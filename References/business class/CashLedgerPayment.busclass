CashLedgerPayment is a BusinessClass
    owned by cb
    prefix is CBM
    classic name is CBPAYMENT

    Ontology
        symbolic key is CashLedgerPayment
            classic set name is CBMSET1
            classic name for CashLedgerPayment.BankTransactionCode is BANK-INST-CODE
            classic name for CashLedgerPayment.TransactionIDNumber is TRANS-IDENT

    Patterns
		implements InlineUserFields
			size is 1000	       
        implements StaticJava
        disable AuditIndex

    Persistent Fields
    	CashManagementAccount
        CashLedgerTransactionIdentifier							
		CommentText											  
		RemittanceComment					is a CommentText  
        Reference                           is a Reference22  
            classic name is REFERENCE-NO
        VoidDate                            is Date
        TransactionNumber
            classic name is TRANS-NBR
		PaymentDate                         is Date
            classic name is CHECK-DATE
        Status                              is Numeric size 2
            classic name is REC-STATUS
            States
                Unreleased               	value is 0
                Released               		value is 1
                SelectedForPayment       	value is 2
                SystemGenerated          	value is 3
                Canceled    				value is 4
                TemporaryVoid            	value is 5
				PendingApproval			 	value is 6
				PendingStopPaymentApproval	value is 7
                Voided					 	value is 8
                Historical				 	value is 9
        PayablesData
            classic name is COMPANY
		CashRequirementsResult				is like CashRequirementsResult
			disable Auditing
        PostDate                            is an ExchangeDate
		BankCheckAmount						is a CurrencyAmount 
            classic name is BANK-CHK-AMT
                precision is CashCode.BankAccountNumber.Currency.NumberOfDecimals
        BankAccountCurrencyNumberOfDecimals is an AcctNd
            sql name is BACurrencyNumberOfDecimals
            classic name is BANK-ND
		CompanyBaseData		            	is a  CompanyFinanceCurrencyAmountGroup

            classic name for CompanyBaseData.OverrideCompany is OVERRIDE-COMP            

            classic name for CompanyBaseData.BasePaymentAmount is BASE-PMT-AMT
        BaseCurrencyNumberOfDecimals        is an AcctNd
            classic name is BASE-ND
        BaseNetPaymentAmount                is a  FinanceCurrencyAmountGroup  
            classic name is BASE-CHK-AMT


        Currency							is a FromCurrency
            classic name is CURRENCY-CODE
		CurrencyTable							
        Description
        PayablesProcessGroup
            classic name is PROC-GRP

        PayeeName                           is a VendorName	
        MailingName 	                    is a VendorName	
        PayeePostalAddress                  is a PostalAddressV2
            classic name for PayeePostalAddress.DeliveryAddress.AddressLine1 is PAYEE-ADDR1
            classic name for PayeePostalAddress.DeliveryAddress.AddressLine2 is PAYEE-ADDR2
            classic name for PayeePostalAddress.DeliveryAddress.AddressLine3 is PAYEE-ADDR3
            classic name for PayeePostalAddress.DeliveryAddress.AddressLine4 is PAYEE-ADDR4
            classic name for PayeePostalAddress.Municipality is PAYEE-ADDR5
            classic name for PayeePostalAddress.StateProvince is PAYEE-ST-PROV
            classic name for PayeePostalAddress.PostalCode is PAY-POSTAL-CD
            classic name for PayeePostalAddress.County is PAY-COUNTY
            classic name for PayeePostalAddress.Country is PAY-CTRY-CODE
        BankAccountValidationType
            classic name is VBANK-IDENT
        BankAccountNumber
            classic name is BANK-ACCT
        BankEntity
        BankName														
        BankPostalAddress					is a PostalAddressV2			
        IntermediaryBankEntity				is a BankEntity				
        IntermediaryCrossBorderIdentifier	is a CrossBorderIdentifier	
        IntermediarySwiftID					is a SwiftID				
        	default label is "SWIFT/BIC"
        IntermediaryBankName				is a BankName				
        IntermediaryBankPostalAddress		is a PostalAddressV2			
        ACHPrenotification
            classic name is ACH-PRENOTE
        BankAccountType
            classic name is VBANK-ACCT-TP
        GlobalBankAccountType	
        BACSBankAccountReference            is a BACSReference
            classic name is BUILD-SOC-REF
        BACSBankAccountName                 is an AccountName
            classic name is BUILD-ACCT-NM
        CrossBorderIdentifier
            classic name is CROSS-IDENT
        SwiftID
        	default label is "SWIFT/BIC"
        PaymentCategoryCode					is a CashLedgerPaymentCategoryCode
            classic name is PMT-CAT-CODE
        NormalOrExpressCode
            classic name is NORM-EXP-CODE
        CashLedgerPaymentForm 
            classic name is PMT-FORM
        CashLedgerChargeCode 
		BankToBankInformation				is Alpha 140			
		ElectronicPaymentCode										
		FirstPartyReference					is Alpha 12				
		SecondPartyReference				is Alpha 12				
		TransactionData1                    is a TransactionData
            classic name is USER-FIELD1
		TransactionData2                    is a TransactionData
            classic name is USER-FIELD2
		TransactionData3                    is a TransactionData
            classic name is USER-FIELD3
		TransactionData4                    is a TransactionData
            classic name is USER-FIELD4
        LanguageCode						is an IsoLocale
        TaxInterface                        is AlphaUpper size 1
            classic name is TAX-FLAG
            States
                NotInterfaced value is "~"
                    default label is "Not interfaced"
                Interfaced    value is "I"
        JournalBook
        	context of CompanyBaseData.OverrideCompany
            classic name is JRNL-BOOK-NBR
            restricted
        JournalBookSequenceNumber           is a JbkSeqNbr
            classic name is JBK-SEQ-NBR
            restricted
        LastDistributionSequence            is a SequenceNumber
            classic name is LAST-DIST-SEQ
        	disable Auditing
        GeneralLedgerSourceCode				is a GeneralLedgerEvent
            classic name is SOURCE-CODE
            default label is "SourceCode"
        ProcessLevel                        is a PayablesProcessLevel
        	context of PayablesData.PayablesCompany
            classic name is PROC-LEVEL

        TaxID
        ReportableIncomeAmount              is an UnsignedInternationalAmount  
            classic name is REPORT-INC-AMT
        YearPaid                            is a Year
        ReportableIncomeObjectID
            classic name is RIC-OBJ-ID
        TaxIDType
            classic name is TIN-TYPE
        ForeignEconomicRegulatoryCode
            classic name is FOR-ECON-CODE
        PayTaxExempt                        is a Flag
        BankCurrency                        is a Currency
        BankAmount							is an UnsignedInternationalAmount	
		TemporaryHold                       is AlphaUpper size 1
            classic name is TEMP-HOLD
            States
                SentForApproval  value is "S"
                    default label is "Sent for Approval"
                ApprovedByEngine value is "A"
                    default label is "Approved by Engine"
				RejectedByEngine value is "R"
					default label is "Rejected by Engine"                    
        TaxExempt                           is a TaxExemptFlg
		ApprovalCostCenter					is like AccountingUnit		
		ApprovalCategory					
        ReissueOriginalReference			is a Reference22  			
        ReissueOriginalIdentifier			is a CashLedgerTransactionIdentifier	
        CompanyCashCode
			context of CompanyBaseData.OverrideCompany  
		CashCodeTransactionCode
			context of CashLedgerPayment.BankTransactionCode
		ApprovalCode
		ApprovalLevel						is Numeric 8
		ReassignToApprovalLevel				is an ApprovalCodeResource
		Approver							is a FinanceResource
		ApproverTeam						is a FinanceTeamField
		OriginatingImportRun				is a CashTransactionImportResult	
			delete ignored
		ImportInProcess						is Boolean						
		CashLedgerBatchApproval
			default label is "ApprovalBatch"
		BudgetEditProcessing 				is Numeric size 1
			States
                NotInProcessing value is 0
                InProcess  		value is 1
                Failure    		value is 2
                Success    		value is 3
 		PaymentProcessingHold				is Boolean
		DistribUserFieldsSearch				is Text	
 			sql name is DISTRIBUSERFIELDSSEARCH
 			text searchable
 			disable Auditing
		CashLedgerMassReleaseResult			is Numeric size 12
		PaymentAttachment					is an AlternateAttachment		
		BankBaseAmount						is a BankCurrencyFinanceCurrencyAmountGroup	
		PayeeFirstName						is a FirstName			
		PayeeMiddleName						is a MiddleName			
		EmailAddress												
		MobileNumber						is a TelephoneNumber	
		VendorBankCode1						is a VendorBankCode150	
			default label is "BankCode1"
		VendorBankCode2						is a VendorBankCode		
			default label is "BankCode2"
		OriginalSubmittingResource			is like Actor 
		JobResult							is like PayablesJobResult
		
	Local Fields
		LocalVendorGroup						is like VendorGroup
		LocalPayGroup							is like PayGroup
		GainLossCalculation
        VerifyCashLedgerMonitor
        LocalCheckCBMonitor						is Alpha 1	
		LocalRunProgram							is a RunProgram		
		LocalProcessGroup						is like PayablesProcessGroup
		LocalAsyncId							is an AsyncActionRequest
		ValidateBankAccountNumber
		LocalFinanceCurrencyAmount				is a FinanceCurrencyAmount
		LocalDistributionFinanceCurrAmt			is a FinanceCurrencyAmount
		LocalCashManagementGroup				is like CashManagementGroup
		LocalCashCode							is like CashCode
		LocalBankTransactionCode				is like BankTransactionCode
		LocalTransactionIDNumber				is a TransactionIDNumber
		LocalApprovalLevel						is Numeric 8
		LocalApprover							is a FinanceResource
		LocalApproverTeam						is a FinanceTeamField		
		LocalApproverList						is Alpha 250
		LocalFirstApproverAssigned				is Boolean
		LocalRejectReason						is AlphaUpper 20
		LocalRejectComment						is Alpha size up to 500
		NewCashLedgerPayment					is a CashLedgerPayment view
		BankAmountExchange
		LocalActionSubmitForApproval			is Boolean
		LocalActionUnreleaseToRelease			is Boolean
		LocalActionReleaseToCancel				is Boolean
		LocalCompletionMessage					is Alpha 100
		LocalInterfaceAsPosted					is Boolean
		LocalBypassCashFundUpdate				is Boolean	
		AutoNumberByCompany						is like GeneralLedgerCompany
		AutoNumberByCashCode					is like CashCode
		AutoNumberByBankTransactionCode			is like BankTransactionCode
		LocalCashLedgerAutoTranNumber			is a CashLedgerAutoTranNumber view
		LocalReference							is a Reference22
		DuplicateTranNumberFound				is Boolean
		AutoNumberingAction			 			is Numeric 1
			States
				OverrideNumberWithAnAutoGeneratedNumber	value is 1
				BypassAutoTransactionNumbering			value is 2
		LocalCashCodeGroup						is like CashCodeGroup
		LocalPrenoteAccepted					is Boolean
		LocalJournalizeGroup					is like JournalizeGroup
		LocalCurrencyCalculationGroup			is a CurrencyCalculationGroup
		CalculateFinanceCurrencyAmountGroup
		ValidateCashPaymentFormat							
		LocalBoolean							is Boolean	

		LocalRecordType							is a CashLedgerDistribRecordType
		LocalCashRequirementsResult				is like CashRequirementsResult
		LocalCalculateCashFinanceStructure		is a CalculateCashFinanceStructure
		LocalAnswer 							is Alpha size 1
		LocalActor								is an Actor	
		LocalToAccountingEntity					is like AccountingEntity
		LocalAccountingUnit						is like AccountingUnit
		LocalFinanceDimension1					is a FinanceDimension1
		LocalLastDistributionSequence			is a SequenceNumber	
		LocalOriginatingTransaction				is BusinessObjectReference	
		LocalSystemAccount						is a SystemAccount			
		LocalFinanceCodeBlock					is a FinanceCodeBlock		
		LocalAmount								is an InternationalAmount	
		LocalCreateFromBatchType				is Numeric 2				
		LocalAccountType						is Numeric 1				
			States
				Expense							value is 1	
				Cash							value is 2
				GainLoss						value is 3	
#ifdef module cam
		LocalFinanceDimension10					is a FinanceDimension10
		LocalAccountingEntity					is like AccountingEntity
		LocalActivityType						is Numeric size 2
#endif

		LastDistribution						is a CashLedgerGLDistribution view 	
		DistributionRunningTotal		  		is an InternationalAmount			
		LocalCashAllocationCode					is a CashAllocationCode				
		LocalAllocationAmount 					is an InternationalAmount			
		LocalAllocationUnitsAmount				is an InternationalAmount			
		DistributionRunningUnitsTotal	  		is an InternationalAmount			
		LocalCompany							is like Company
		LocalCashLedgerJobResult				is a CashLedgerJobResult
		LocalLine								is Numeric size 9	 
		LocalTransactionCount           		is Numeric size 6
		LocalAttributeCtr   					is Numeric 2
		LocalPayablesJobResult					is like PayablesJobResult
		LocalPayablesCompany					is like PayablesCompany
		LocalCompanyGroup                       is a GeneralLedgerCompanyGroup
		LocalLinkback							is Alpha size up to 1000

	Context Fields
		PayablesInvoicePayment
		BankCheckAmountRange					is an AmountRange
		ReferenceNumberRange					is a  ReferenceNbrRange
		TransactionNumberRange					is a  TransNbrRange
		ReportDate								is an AsOfDate	
						
	Rule Blocks

		VerifyCBMonitor
			initialize VerifyCashLedgerMonitor
			VerifyCashLedgerMonitor.CashCode	= CashCode
			VerifyCashLedgerMonitor.PayGroup	= PayablesData.PayGroup
			VerifyCashLedgerMonitor.RunProgram	= RunProgram.CashLedgerPaymentCancel
			LocalCheckCBMonitor					= VerifyCashLedgerMonitor.CallVerifyCashLedgerMonitor
			constraint (VerifyCashLedgerMonitor.NoErrors)
				"<VerifyCashLedgerMonitor.CBMonitorProcessingMessage>"

		SetCurrencyData
			if (PayablesData.PayGroup !entered)
				if (ProcessLevel entered)
					PayablesData.PayGroup		= ProcessLevel.PayGroup
				else
					if (DefaultProcessLevelsRel exists)
						PayablesData.PayGroup	= DefaultProcessLevelsRel.PayGroup
					else
						PayablesData.PayGroup	= PayablesData.PayablesCompany.PayGroup
			if (CompanyBaseData.OverrideCompany not entered)
				if (CashCode.DefaultPostCompany entered)
					CompanyBaseData.OverrideCompany = CashCode.DefaultPostCompany
					BankBaseAmount.OverrideCompany	= CashCode.DefaultPostCompany	
				else
					CompanyBaseData.OverrideCompany = PayablesData.PayGroup.PostCompany
					BankBaseAmount.OverrideCompany  = PayablesData.PayGroup.PostCompany 
			BaseCurrencyNumberOfDecimals 	= CompanyBaseData.OverrideCompany.CurrencyNumberOfDecimals
			TransientAccountingEntity 		= CompanyBaseData.OverrideCompany.AccountingEntity
        	Currency 						= CashCode.Currency		
        	if (CurrencyTable not entered)
				if (CompanySystemClosingControlRel.CurrencyTable exists)
					CurrencyTable = CompanySystemClosingControlRel.CurrencyTable 
				else	
					CurrencyTable = CompanyBaseData.OverrideCompany.CurrencyTable
        	if (BankCheckAmount changed
        	or  PostDate changed
        	or  CurrencyTable changed)
        		initialize CompanyBaseData.BasePaymentAmount
        	if (BankAmount changed	
        	or  PostDate changed
        	or  CurrencyTable changed)
        		initialize BankBaseAmount.BasePaymentAmount	
 
 		ReportableIncomeEdits	
            constraint (ReportableIncomeAmount <= BankCheckAmount)
            	"ReportableAmountCannotBeGreaterThanPaymentAmount"	//Replacement for "ReportableAmountCannotBeGreaterThanPaymentAmount", "ReportableAmountCannotBeGreaterThanPaymentAmount"       

			if (PayablesData.PayablesIncomeCode not entered)
				constraint (ReportableIncomeAmount not entered)
        			"IncomeAmountMustBeZeroWhenIncomeCodeNotEntered"	// Replacement for "IncomeAmountMustBe_0WhenIncomeCodeNotEntered", "IncomeAmountMustBeZeroWhenIncomeCodeNotEntered"      
            											
		CashPaymentEdits
			if (CompanyBaseData.OverrideCompany changed)
				if (AutoNumberingAllowed)
					constraint (!CashManagementGroup.AutoReferenceNumberByCompany)
						"CannotChangeOverrideCompany;AutoNumberingAtCompanyLevelIsSetup"	
			constraint (PayablesData.PayablesCompany entered)
				"CompanyRequired"
			constraint (PayablesData.Vendor entered)
				"VendorRequired"
			constraint (PayablesData.PayGroup entered)
				"PayGroupRequired"
			if (PostDate not entered)
				PostDate = current corporate date	
			if (CompanySystemClosingControlRel.Control)		
				constraint (PostDate within CompanySystemClosingControlRel.ValidEntryDate)
					"PostDateNotWithinValidEntryDatesForSystemCode;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
			if (CashCodeTransactionCodeRel exists)
				constraint (CashCodeTransactionCode exists
				and CashCodeTransactionCode.Active)
					"TransactionCode<CashLedgerPayment.BankTransactionCode>NotAuthorizedForCashCode<CashCode>"
			if (CashLedgerPayment.BankTransactionCode.PaymentOutputOption.PrintedDocument)
				constraint (BankEntity not entered 
				and         BankAccountNumber not entered)
					"BankInformationMustBeBlankForPrintedDocument"          
			else
				if (CashLedgerPayment.BankTransactionCode.PaymentOutputOption.ElectronicFile
				or  CashLedgerPayment.BankTransactionCode.PaymentOutputOption.Swift				    	
				or  CashLedgerPayment.BankTransactionCode.PaymentOutputOption.WireTransfer)
					constraint (BankEntity entered 
					and         BankAccountNumber entered)
						"BankIdAndAcctRequiredForElectronicPayments"          
					constraint (BankAccountType entered)
						"BankAccountTypeRequiredForElectronicPayments"	    


			if  (CashLedgerPayment.BankTransactionCode.BankTransactionType.CashPayment
			and !CashLedgerPayment.BankTransactionCode.PaymentOutputOption.NoOutput)
				initialize ValidateCashPaymentFormat
				ValidateCashPaymentFormat.VendorGroup			= PayablesData.PayablesCompany.VendorGroup	
				ValidateCashPaymentFormat.BankTransactionCode 	= CashLedgerPayment.BankTransactionCode
				ValidateCashPaymentFormat.CashCode				= CashLedgerPayment.CashCode
				ValidateCashPaymentFormat.PayablesProcessGroup	= PayablesProcessGroup
				LocalBoolean = ValidateCashPaymentFormat.PerformValidateCashPaymentFormat	
				constraint (ValidateCashPaymentFormat.OutputErrorNumber not entered)
					"<ValidateCashPaymentFormat.OutputErrorMessage>"
				if (BankAccountType entered)
					if (ValidateCashPaymentFormat.OutputCashPaymentFormat.PaymentFormat.AchFile)
						constraint (BankAccountType.Checking
						or			BankAccountType.Savings
						or			BankAccountType.IBAN)										
							"BankAccountTypeMustBeCheckingOrSavingsOrIbanForACHPaymentFormat"	
			if (BankEntity entered)	
				if (BankPostalAddress not entered)
					BankPostalAddress = BankEntity.PostalAddress
			if (IntermediaryBankEntity entered)	
				if (IntermediaryBankName not entered)	
					IntermediaryBankName = IntermediaryBankEntity.BankName
				if (IntermediaryBankPostalAddress not entered)
					IntermediaryBankPostalAddress = IntermediaryBankEntity.PostalAddress
			if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)	
				constraint (!UsingBankCurrencyPosting)
					"CannotUseFundAccountingWithBankCurrencyPosting"		
			









						
		CreateOffsetDistribution
			include DistributionRoundingOffSet

			if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
				if (instance count of CashLedgerPaymentDistributionsRel > PaymentOffsetBackgroundDistQty)			
					invoke CreatePaymentOffsetDistributionBackground CashLedgerGLDistribution
						invoked.PrmCashManagementGroup				= CashManagementGroup
						invoked.PrmCashCode							= CashCode
						invoked.PrmCashLedgerPayment				= CashLedgerPayment
						invoked.PrmInputFinanceCodeBlock			= CompanyCashCode.PaymentClearingAccount
				else
					for each CashLedgerPaymentDistributionsRel		


						LocalFinanceCurrencyAmount								 				= each.GLBaseAmount
						include ReverseBaseDistributionAmounts
						initialize LocalCalculateCashFinanceStructure
						LocalCalculateCashFinanceStructure.InputCashManagementGroup				= each.CashManagementGroup
						LocalCalculateCashFinanceStructure.InputCashCode						= each.CashCode
						LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= each.CashLedgerSourceRecord
						LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= each.CashLedgerGLDistribution
						LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= each.CashLedgerGLDistribution.GLFinanceCodeBlock
						LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.OffsetCashLedgerPaymentDistribution
						LocalCalculateCashFinanceStructure.InputFinanceCodeBlock				= CompanyCashCode.PaymentClearingAccount
						LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

						invoke Create CashLedgerGLDistribution
							fill in fields from CashLedgerPayment
							invoked.CashLedgerSourceRecord						 = "CBM"
							invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
							invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerPayment.TransactionIDNumber
							invoked.CashLedgerGLDistribution.DistributionType    = "E"
							invoked.Company                                      = CompanyBaseData.OverrideCompany
							invoked.CompanyAccountingEntity						 = CompanyBaseData.OverrideCompany.AccountingEntity
							invoked.RecordType									 = CashLedgerDistribRecordType.OffsetCashLedgerPaymentDistribution
							invoked.Status 	 									 = Status.Released
							invoked.Reference                                    = "PaymentDistribution"
							invoked.PostDate									 = PostDate
							invoked.GLFinanceCodeBlock							 = LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock
							invoked.TransactionNumber                            = Reference
							invoked.GeneralLedgerSourceCode						 = GeneralLedgerSourceCode
							invoked.GLTransactionAmount    					     = each.GLTransactionAmount * -1
							invoked.DistributionToBankAmount  				     = each.GLTransactionAmount * -1
							invoked.GLBaseAmount					 		 	 = LocalFinanceCurrencyAmount
							invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
							invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
							invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
							invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
							invoked.GLTJournalizeGroup							 = LocalJournalizeGroup
							invoked.BypassStatusEdit							 = true
							invoked.BypassCashFundUpdate						 = LocalBypassCashFundUpdate	
			else
				if (UsingBankCurrencyPosting)	
					LocalFinanceCurrencyAmount							 = BankBaseAmount.BasePaymentAmount
				else
					LocalFinanceCurrencyAmount							 = CompanyBaseData.BasePaymentAmount
				include ReverseBaseDistributionAmounts
				invoke Create CashLedgerGLDistribution
					fill in fields from CashLedgerPayment
					invoked.CashLedgerSourceRecord						 = "CBM"
					invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
					invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerPayment.TransactionIDNumber
					invoked.CashLedgerGLDistribution.DistributionType    = "E"
					invoked.Company                                      = CompanyBaseData.OverrideCompany
					invoked.CompanyAccountingEntity						 = CompanyBaseData.OverrideCompany.AccountingEntity
					invoked.RecordType									 = CashLedgerGLDistributionsRel.RecordType.OffsetCashLedgerPaymentDistribution
					invoked.Status 	 									 = Status.Released
					invoked.Reference                                    = "PaymentDistribution"
					invoked.PostDate									 = PostDate
					invoked.GLFinanceCodeBlock							 = CompanyCashCode.PaymentClearingAccount
					invoked.TransactionNumber                            = Reference
					invoked.GeneralLedgerSourceCode						 = GeneralLedgerSourceCode
					if (UsingBankCurrencyPosting)	
						invoked.GLTransactionAmount    					 = BankAmount * -1
						invoked.DistributionToBankAmount  				 = BankAmount * -1
					else
						invoked.GLTransactionAmount    					 = BankCheckAmount * -1
						invoked.DistributionToBankAmount  				 = BankCheckAmount * -1
					invoked.GLBaseAmount					 		 	 = LocalFinanceCurrencyAmount
					invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
					invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
					invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
					invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
					invoked.GLTJournalizeGroup							 = LocalJournalizeGroup
					invoked.BypassStatusEdit							 = true

			invoke Release CashLedgerGLDistributionsUnReleasedRel


		DistributionRoundingOffSet
			initialize LocalDistributionFinanceCurrAmt				
			for each CashLedgerGLDistributionsRel
				LocalDistributionFinanceCurrAmt.FunctionalAmount.EnteredCurrencyAmount		+= each.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.AlternateAmount.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.AlternateAmount2.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.AlternateAmount3.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount3.EnteredCurrencyAmount





				LocalDistributionFinanceCurrAmt.ReportAmount1.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount1.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount2.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount2.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount3.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount3.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount4.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount4.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount5.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount5.EnteredCurrencyAmount
	
			invoke AdjustDistributionCurrencyAmounts last CashLedgerGLDistributionsRel
				if (UsingBankCurrencyPosting)	
					invoked.PrmCurrencyAmountAdjustment.FunctionalTotal		= (BankBaseAmount.BasePaymentAmount.FunctionalAmount.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.FunctionalAmount.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal		= (BankBaseAmount.BasePaymentAmount.AlternateAmount.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.AlternateAmount.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal2		= (BankBaseAmount.BasePaymentAmount.AlternateAmount2.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.AlternateAmount2.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal3		= (BankBaseAmount.BasePaymentAmount.AlternateAmount3.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.AlternateAmount3.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal1		= (BankBaseAmount.BasePaymentAmount.ReportAmount1.EnteredCurrencyAmount				- LocalDistributionFinanceCurrAmt.ReportAmount1.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal2		= (BankBaseAmount.BasePaymentAmount.ReportAmount2.EnteredCurrencyAmount				- LocalDistributionFinanceCurrAmt.ReportAmount2.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal3		= (BankBaseAmount.BasePaymentAmount.ReportAmount3.EnteredCurrencyAmount				- LocalDistributionFinanceCurrAmt.ReportAmount3.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal4		= (BankBaseAmount.BasePaymentAmount.ReportAmount4.EnteredCurrencyAmount				- LocalDistributionFinanceCurrAmt.ReportAmount4.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal5		= (BankBaseAmount.BasePaymentAmount.ReportAmount5.EnteredCurrencyAmount				- LocalDistributionFinanceCurrAmt.ReportAmount5.EnteredCurrencyAmount)
				else
					invoked.PrmCurrencyAmountAdjustment.FunctionalTotal		= (CompanyBaseData.BasePaymentAmount.FunctionalAmount.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.FunctionalAmount.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal		= (CompanyBaseData.BasePaymentAmount.AlternateAmount.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.AlternateAmount.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal2		= (CompanyBaseData.BasePaymentAmount.AlternateAmount2.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.AlternateAmount2.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal3		= (CompanyBaseData.BasePaymentAmount.AlternateAmount3.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.AlternateAmount3.EnteredCurrencyAmount)





					invoked.PrmCurrencyAmountAdjustment.ReportTotal1		= (CompanyBaseData.BasePaymentAmount.ReportAmount1.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.ReportAmount1.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal2		= (CompanyBaseData.BasePaymentAmount.ReportAmount2.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.ReportAmount2.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal3		= (CompanyBaseData.BasePaymentAmount.ReportAmount3.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.ReportAmount3.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal4		= (CompanyBaseData.BasePaymentAmount.ReportAmount4.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.ReportAmount4.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal5		= (CompanyBaseData.BasePaymentAmount.ReportAmount5.EnteredCurrencyAmount			- LocalDistributionFinanceCurrAmt.ReportAmount5.EnteredCurrencyAmount)

		CheckForRelatedChanges	
			if (PostDate changed
			or  CurrencyTable changed
			or (UsingBankCurrencyPosting	
			and BankCurrency changed))		
				if (first GLEntryDistributionsRel exists)
					for each GLEntryDistributionsRel
						invoke RecalcCurrencyAmountsForAllDistributions each

		SetBaseNetPaymentAmount
			LocalCurrencyCalculationGroup.FinanceEnterpriseGroup				= CashManagementGroup
			LocalCurrencyCalculationGroup.ExchangeDate							= PaymentDate
			LocalCurrencyCalculationGroup.FromCurrency							= Currency
			LocalCurrencyCalculationGroup.CurrencyAmount						= BankCheckAmount
			LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= CompanyBaseData.OverrideCompany.AccountingEntity.FunctionalCurrency
			LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency			= CompanyBaseData.OverrideCompany.AccountingEntity.AlternateCurrency
			LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency			= CompanyBaseData.OverrideCompany.AccountingEntity.AlternateCurrency2
			LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency			= CompanyBaseData.OverrideCompany.AccountingEntity.AccountingEntity.AlternateCurrency3
			LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency				= CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyOne
			LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency				= CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyTwo
			LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency				= CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyThree
			LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency				= CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyFour
			LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency				= CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyFive
			BaseNetPaymentAmount.ExchangeDate									= PaymentDate		
			BaseNetPaymentAmount.CurrencyAmount									= BankCheckAmount		
			BaseNetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			BaseNetPaymentAmount.FunctionalAmount.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (CompanyBaseData.OverrideCompany.AccountingEntity.AlternateCurrency entered)
				BaseNetPaymentAmount.AlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				BaseNetPaymentAmount.AlternateAmount.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (CompanyBaseData.OverrideCompany.AccountingEntity.AlternateCurrency2 entered)
				BaseNetPaymentAmount.AlternateAmount2.EnteredCurrencyAmount  	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				BaseNetPaymentAmount.AlternateAmount2.EnteredCurrencyRate  		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (CompanyBaseData.OverrideCompany.AccountingEntity.AlternateCurrency3 entered)
				BaseNetPaymentAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				BaseNetPaymentAmount.AlternateAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				BaseNetPaymentAmount.ReportAmount1.EnteredCurrencyAmount     	= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				BaseNetPaymentAmount.ReportAmount1.EnteredCurrencyRate     		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				BaseNetPaymentAmount.ReportAmount2.EnteredCurrencyAmount      	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				BaseNetPaymentAmount.ReportAmount2.EnteredCurrencyRate      	= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				BaseNetPaymentAmount.ReportAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				BaseNetPaymentAmount.ReportAmount3.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				BaseNetPaymentAmount.ReportAmount4.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				BaseNetPaymentAmount.ReportAmount4.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				BaseNetPaymentAmount.ReportAmount5.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				BaseNetPaymentAmount.ReportAmount5.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate


		CheckForGainLoss	
			CalculateFinanceCurrencyAmountGroup.Total					= BaseNetPaymentAmount
			CalculateFinanceCurrencyAmountGroup.Operand.FunctionalAmount	= CompanyBaseData.BasePaymentAmount.FunctionalAmount
			CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount		= CompanyBaseData.BasePaymentAmount.AlternateAmount
			CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount2	= CompanyBaseData.BasePaymentAmount.AlternateAmount2
			CalculateFinanceCurrencyAmountGroup.Operand.AlternateAmount3	= CompanyBaseData.BasePaymentAmount.AlternateAmount3
			CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount1		= CompanyBaseData.BasePaymentAmount.ReportAmount1
			CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount2		= CompanyBaseData.BasePaymentAmount.ReportAmount2
			CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount3		= CompanyBaseData.BasePaymentAmount.ReportAmount3
			CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount4		= CompanyBaseData.BasePaymentAmount.ReportAmount4
			CalculateFinanceCurrencyAmountGroup.Operand.ReportAmount5		= CompanyBaseData.BasePaymentAmount.ReportAmount5

			LocalBoolean = CalculateFinanceCurrencyAmountGroup.PerformSubtraction

			initialize GainLossCalculation
			TransientAccountingEntity									= PrmAccountingEntity 
			GainLossCalculation.DefaultSystemAccount 					= 2
			GainLossCalculation.AccountType								= 1
			GainLossCalculation.NewCurrencyAmount.FunctionalAmount		= CalculateFinanceCurrencyAmountGroup.Total.FunctionalAmount
			GainLossCalculation.NewCurrencyAmount.AlternateAmount		= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount
			GainLossCalculation.NewCurrencyAmount.AlternateAmount2		= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount2
			GainLossCalculation.NewCurrencyAmount.AlternateAmount3		= CalculateFinanceCurrencyAmountGroup.Total.AlternateAmount3
			GainLossCalculation.NewCurrencyAmount.ReportAmount1			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount1
			GainLossCalculation.NewCurrencyAmount.ReportAmount2			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount2
			GainLossCalculation.NewCurrencyAmount.ReportAmount3			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount3
			GainLossCalculation.NewCurrencyAmount.ReportAmount4			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount4
			GainLossCalculation.NewCurrencyAmount.ReportAmount5			= CalculateFinanceCurrencyAmountGroup.Total.ReportAmount5
			GainLossCalculation.SkipCurrencyExchange					= true
			GainLossCalculation.OriginFinanceCodeBlock					= CompanyCashCode.CashAccount	
			LocalBoolean = GainLossCalculation.DerivedCalculateAmount
			
			if (GainLossCalculation.GainLossFound)
				if (GainLossCalculation.SingleSystemAccount)
					invoke CreateGainLossDistrib CashLedgerGLDistribution
						invoked.CashManagementGroup							 = CashManagementGroup
						invoked.CashCode									 = CashCode
		    			invoked.CashLedgerSourceRecord						 = "CBM"
		    			invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
		    			invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerPayment.TransactionIDNumber
		    			invoked.CashLedgerGLDistribution.DistributionType    = "E"
		    			invoked.Company                                      = CompanyBaseData.OverrideCompany
		    			invoked.RecordType									 = "A"
						invoked.Status 	 									 = Status.Released
						invoked.Reference                                    = TransactionNumber
						invoked.PostDate									 = PaymentDate
						invoked.Description									 = PrmDescription
						invoked.GLFinanceCodeBlock							 = GainLossCalculation.GainAccount
						invoked.TransactionNumber                            = TransactionNumber
						invoked.GeneralLedgerSourceCode						 = GeneralLedgerSourceCode
						invoked.GLTransactionAmount    					     = blank

						invoked.GLBaseAmount					 		 	 = GainLossCalculation.GainAmount
						invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
				        invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
				        invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
				        invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
				        invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType							
						invoked.GLTJournalizeGroup                           = PrmJournalizeGroup  
						invoked.LocalControlDocumentNumber					 = TransactionNumber
						invoked.LocalDocumentNumber							 = TransactionNumber
						invoked.LocalExchangeDate							 = PaymentDate
						invoked.LocalPostingDate							 = PaymentDate
						invoked.LocalGeneralLedgerEvent						 = "AP"
				else								
					if (GainLossCalculation.AmountType.Positive
					or  GainLossCalculation.AmountType.NegativeAndPositive)
						invoke CreateGainLossDistrib CashLedgerGLDistribution
							invoked.CashManagementGroup							 = CashManagementGroup
							invoked.CashCode									 = CashCode
							invoked.CashLedgerSourceRecord						 = "CBM"
			    			invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
			    			invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerPayment.TransactionIDNumber
			    			invoked.CashLedgerGLDistribution.DistributionType    = "E"
			    			invoked.Company                                      = CompanyBaseData.OverrideCompany
			    			invoked.RecordType									 = "A"
							invoked.Status 	 									 = Status.Released
							invoked.Reference                                    = TransactionNumber
							invoked.PostDate									 = PaymentDate
							invoked.Description									 = PrmDescription
							invoked.GLFinanceCodeBlock							 = GainLossCalculation.GainAccount
							invoked.TransactionNumber                            = TransactionNumber
							invoked.GeneralLedgerSourceCode						 = GeneralLedgerSourceCode
							invoked.GLTransactionAmount    					     = blank

							invoked.GLBaseAmount					 		 	 = GainLossCalculation.GainAmount
							invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
					        invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
					        invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
					        invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
					        invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType							
							invoked.GLTJournalizeGroup                           = PrmJournalizeGroup  
							invoked.LocalControlDocumentNumber					 = TransactionNumber
							invoked.LocalDocumentNumber							 = TransactionNumber
							invoked.LocalExchangeDate							 = PaymentDate
							invoked.LocalPostingDate							 = PaymentDate
							invoked.LocalGeneralLedgerEvent						 = "AP"
					if (GainLossCalculation.AmountType.Negative
					or  GainLossCalculation.AmountType.NegativeAndPositive)
						invoke CreateGainLossDistrib CashLedgerGLDistribution
							invoked.CashManagementGroup							 = CashManagementGroup
							invoked.CashCode									 = CashCode
							invoked.CashLedgerSourceRecord						 = "CBM"
			    			invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
			    			invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerPayment.TransactionIDNumber
			    			invoked.CashLedgerGLDistribution.DistributionType    = "E"
			    			invoked.Company                                      = CompanyBaseData.OverrideCompany
			    			invoked.RecordType									 = "A"
							invoked.Status 	 									 = Status.Released
							invoked.Reference                                    = TransactionNumber
							invoked.PostDate									 = PaymentDate
							invoked.Description									 = PrmDescription
							invoked.GLFinanceCodeBlock							 = GainLossCalculation.LossAccount
							invoked.TransactionNumber                            = TransactionNumber
							invoked.GeneralLedgerSourceCode						 = GeneralLedgerSourceCode
							invoked.GLTransactionAmount    					     = blank

							invoked.GLBaseAmount					 		 	 = GainLossCalculation.LossAmount
							invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
					        invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
					        invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
					        invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
					        invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType							
							invoked.GLTJournalizeGroup                           = PrmJournalizeGroup  
							invoked.LocalControlDocumentNumber					 = TransactionNumber
							invoked.LocalDocumentNumber							 = TransactionNumber
							invoked.LocalExchangeDate							 = PaymentDate
							invoked.LocalPostingDate							 = PaymentDate
							invoked.LocalGeneralLedgerEvent						 = "AP"
						
		SetupGainLossAccountForBankCurrency	
			LocalSystemAccount = SystemAccount.RealizedGainAndLoss
			if (CashManagementGroup.CurrencyDifferenceGainAccount entered)	
				if (BaseNetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount < BankBaseAmount.BasePaymentAmount.FunctionalAmount.EnteredCurrencyAmount)
					LocalFinanceCodeBlock.GeneralLedgerChartAccount = CashManagementGroup.CurrencyDifferenceGainAccount
				else
					LocalFinanceCodeBlock.GeneralLedgerChartAccount = CashManagementGroup.CurrencyDifferenceLossAccount
			else
			if (SystemAccountRel exists)
				LocalFinanceCodeBlock.GeneralLedgerChartAccount	= SystemAccountRel.GeneralLedgerChartAccount
			else
				if (BaseNetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount < BankBaseAmount.BasePaymentAmount.FunctionalAmount.EnteredCurrencyAmount)
					LocalSystemAccount = SystemAccount.RealizedGain
					LocalFinanceCodeBlock.GeneralLedgerChartAccount	= SystemAccountRel.GeneralLedgerChartAccount
				else
					LocalSystemAccount = SystemAccount.RealizedLoss
					LocalFinanceCodeBlock.GeneralLedgerChartAccount	= SystemAccountRel.GeneralLedgerChartAccount
			LocalFinanceCodeBlock.ToAccountingEntity		= CompanyCashCode.PaymentClearingAccount.ToAccountingEntity
			if (CompanyBaseData.OverrideCompany.FinanceEnterpriseGroup.AccountingUnitRequired)
				if (CompanyCashCode.PaymentClearingAccount.AccountingUnit entered)
					LocalFinanceCodeBlock.AccountingUnit	= CompanyCashCode.PaymentClearingAccount.AccountingUnit
			if (CompanyBaseData.OverrideCompany.FinanceEnterpriseGroup.FinanceDimension1Required)
				if (CompanyCashCode.PaymentClearingAccount.FinanceDimension1 entered)
					LocalFinanceCodeBlock.FinanceDimension1	= CompanyCashCode.PaymentClearingAccount.FinanceDimension1
			if (CompanyBaseData.OverrideCompany.FinanceEnterpriseGroup.FinanceDimension2Required)
				if (CompanyCashCode.PaymentClearingAccount.FinanceDimension2 entered)
					LocalFinanceCodeBlock.FinanceDimension2	= CompanyCashCode.PaymentClearingAccount.FinanceDimension2
			if (CompanyBaseData.OverrideCompany.FinanceEnterpriseGroup.FinanceDimension3Required)
				if (CompanyCashCode.PaymentClearingAccount.FinanceDimension3 entered)
					LocalFinanceCodeBlock.FinanceDimension3	= CompanyCashCode.PaymentClearingAccount.FinanceDimension3
			if (CompanyBaseData.OverrideCompany.FinanceEnterpriseGroup.FinanceDimension4Required)
				if (CompanyCashCode.PaymentClearingAccount.FinanceDimension4 entered)
					LocalFinanceCodeBlock.FinanceDimension4	= CompanyCashCode.PaymentClearingAccount.FinanceDimension4
			if (CompanyBaseData.OverrideCompany.FinanceEnterpriseGroup.FinanceDimension5Required)
				if (CompanyCashCode.PaymentClearingAccount.FinanceDimension5 entered)
					LocalFinanceCodeBlock.FinanceDimension5	= CompanyCashCode.PaymentClearingAccount.FinanceDimension5
			if (CompanyBaseData.OverrideCompany.FinanceEnterpriseGroup.FinanceDimension6Required)
				if (CompanyCashCode.PaymentClearingAccount.FinanceDimension6 entered)
					LocalFinanceCodeBlock.FinanceDimension6	= CompanyCashCode.PaymentClearingAccount.FinanceDimension6
			if (CompanyBaseData.OverrideCompany.FinanceEnterpriseGroup.FinanceDimension7Required)
				if (CompanyCashCode.PaymentClearingAccount.FinanceDimension7 entered)
					LocalFinanceCodeBlock.FinanceDimension7	= CompanyCashCode.PaymentClearingAccount.FinanceDimension7
			if (CompanyBaseData.OverrideCompany.FinanceEnterpriseGroup.FinanceDimension8Required)
				if (CompanyCashCode.PaymentClearingAccount.FinanceDimension8 entered)
					LocalFinanceCodeBlock.FinanceDimension8	= CompanyCashCode.PaymentClearingAccount.FinanceDimension8
			if (CompanyBaseData.OverrideCompany.FinanceEnterpriseGroup.FinanceDimension9Required)
				if (CompanyCashCode.PaymentClearingAccount.FinanceDimension9 entered)
					LocalFinanceCodeBlock.FinanceDimension9	= CompanyCashCode.PaymentClearingAccount.FinanceDimension9
			if (CompanyBaseData.OverrideCompany.FinanceEnterpriseGroup.FinanceDimension10Required)
				if (CompanyCashCode.PaymentClearingAccount.FinanceDimension10 entered)
					LocalFinanceCodeBlock.FinanceDimension10	= CompanyCashCode.PaymentClearingAccount.FinanceDimension10


		CreateBankCurrencyGainLossDistribution	
			invoke Create CashLedgerGLDistribution
				fill in fields from CashLedgerPayment
				invoked.GLTransactionAmount    					     = LocalAmount
				invoked.DistributionToBankAmount  				     = LocalAmount
				invoked.GLBaseAmount					 		 	 = LocalFinanceCurrencyAmount				    			
				invoked.CashLedgerSourceRecord						 = "CBM"
				invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
				invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerPayment.TransactionIDNumber
				invoked.CashLedgerGLDistribution.DistributionType    = "E"
				invoked.Company                                      = CompanyBaseData.OverrideCompany
				invoked.RecordType									 = CashLedgerGLDistributionsRel.RecordType.APCashLedgerPaymentDistribution  
				invoked.Status 	 									 = Status.Released
				invoked.Reference                                    = TransactionNumber
				invoked.Description									 = "BankCurrencyGainLoss"	
				invoked.PostDate									 = PaymentDate	
				invoked.GLFinanceCodeBlock							 = LocalFinanceCodeBlock
				invoked.GeneralLedgerSourceCode						 = "AP"
				invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
				invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
				invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
				invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
				invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType
				invoked.GLTJournalizeGroup                           = PrmJournalizeGroup  
				invoked.LocalControlDocumentNumber					 = TransactionNumber
				invoked.LocalDocumentNumber							 = TransactionNumber
				invoked.LocalExchangeDate							 = PaymentDate
				invoked.LocalPostingDate							 = PaymentDate
				invoked.LocalGeneralLedgerEvent						 = "AP"
				invoked.LocalCurrencyTable							 = CurrencyTable
				invoked.BypassStatusEdit							 = true
				if (LocalAccountType.Cash)
					invoked.LocalPaymentCloseCashAccount			 = true	

		ReverseBaseDistributionAmounts
			LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	*= -1
			LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	*= -1
			LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 	*= -1
			LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	*= -1
			LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	*= -1
			LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 	 	*= -1
			LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		*= -1

		
		StopPaymentForReissueOriginalIdentifier
			if (SummarizedBankAssignedPaymentNumbers)		
				if (first ReissueOriginalIdentifierPayablesPaymentRel.Status.PaymentCycleClosed)
					invoke RequestVoidOrStopPayment first ReissueOriginalIdentifierPayablesPaymentRel
						invoked.PrmRequestDate	= PostDate
						invoked.PrmRequestType	= 1 
					if (CashManagementGroup.VoidStopPaymentApprovalRequired)
						make transition to PendingStopPaymentApproval
					else
						include CreateOffsetDistribution
						make transition to Released
				else
					if (first ReissueOriginalIdentifierPayablesPaymentRel.Status.VoidStopPaymentRequested)
						make transition to PendingStopPaymentApproval
					else
						include CreateOffsetDistribution
						make transition to Released
			else
				if (first ReissueOriginalIdentifierLedgerTransactionRel.Status.Open)
					invoke Open.RequestVoidOrStopPayment first ReissueOriginalIdentifierLedgerTransactionRel
						invoked.PrmRequestDate	= PostDate
						invoked.PrmRequestType	= 1 
					if (CashManagementGroup.VoidStopPaymentApprovalRequired)
						make transition to PendingStopPaymentApproval
					else
						include CreateOffsetDistribution
						make transition to Released
				else
					if (first ReissueOriginalIdentifierLedgerTransactionRel.Status.PendingApproval)
						make transition to PendingStopPaymentApproval
					else
						include CreateOffsetDistribution
						make transition to Released
		
		InitiateApprovalProcessFlow
			LocalCashManagementGroup		= CashManagementGroup
			LocalCashCode					= CashCode
			LocalBankTransactionCode		= CashLedgerPayment.BankTransactionCode
			LocalTransactionIDNumber		= CashLedgerPayment.TransactionIDNumber
			if (config.CLPUseApproverWebapp = true)
				LocalLinkback				= ApproverLinkback
			else
				LocalLinkback				= CashManagerLinkback
			
			initiate CashLedgerPaymentApproval process
				title is "CashLedgerPayment<Reference>WaitingForApproval" 
				Variables
					LocalCashManagementGroup
					LocalCashCode
					LocalBankTransactionCode
					LocalTransactionIDNumber
				URLs
					"<LocalLinkback>"

		BuildTeamApproverActorList
			LocalApproverList = ""
			LocalFirstApproverAssigned = false
			for each FinanceTeamMembersFromCurrentApprovalLevelRel
				if (LocalFirstApproverAssigned)
					LocalApproverList = LocalApproverList + "," + each.FinanceTeamMember.TeamMember.FinanceResourceActor
				else
					LocalApproverList = each.FinanceTeamMember.TeamMember.FinanceResourceActor
					LocalFirstApproverAssigned = true
		
		GetNextEscalationApprovalLevel
			LocalApprovalLevel		= ApprovalLevel
			if (first LocalApprovalCodeLevelRel.EscalateTo.NextApprovalLevel)
				LocalApprovalLevel	= ApprovalLevel + 1
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
			else
				LocalApprovalLevel	= first LocalApprovalCodeLevelRel.EscalationApprovalLevel.ApprovalLevel
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam

		GetNextApprovalLevel
			if (ApprovalLevel < 1)
				for each ApprovalCodeResourceRel
					if (ApprovalCode.InitialApproverSelectionMethod.FirstApprovalLevel
					or	BankCheckAmount <= each.MaxApprovalAmount)
						LocalApprovalLevel		= each.ApprovalLevel
						LocalApprover			= each.Approver
						LocalApproverTeam		= each.ApprovalTeam
						end for each
			else
				LocalApprovalLevel		= ApprovalLevel			
				if (ApprovalCode.FinalApproverSelectionMethod.FirstApprovalLevelAuthorizedToApprovePayment
				and	BankCheckAmount <= first LocalApprovalCodeLevelRel.MaxApprovalAmount)
					initialize LocalApprovalLevel
					initialize LocalApprover
					initialize LocalApproverTeam
				else
					LocalApprovalLevel		= ApprovalLevel + 1
					if (LocalApprovalCodeLevelRel exists)
						LocalApprovalLevel	= first LocalApprovalCodeLevelRel.ApprovalLevel
						LocalApprover		= first LocalApprovalCodeLevelRel.Approver
						LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
					else 
						if (CashManagementGroup.EnforceProcessorCannotBeApprover
						and OriginalSubmittingResource = LocalActor)
							include SendNotApprovedPaymentMessage
							LocalApprovalLevel 	= ApprovalLevel
							LocalApprover		= Approver
							LocalApproverTeam	= ApproverTeam
						else
							initialize LocalApprovalLevel
							initialize LocalApprover
							initialize LocalApproverTeam

		SendNotApprovedPaymentMessage		
			if (PfiConfigurationFromEmailPropertyRel.Value entered
			and LocalActor.ContactInfo.EmailAddress entered)
				send email
					to LocalActor.ContactInfo.EmailAddress
					from PfiConfigurationFromEmailPropertyRel.Value
					subject "Payment<CashLedgerTransactionIdentifier>ForPayee<PayeeName>HasNotBeenApproved"		
					Attachments
						if (HasAttachment)
							attachment PaymentAttachment
								name is PaymentAttachment.Title
								mime type is PaymentAttachment.MimeType
					Contents
						"PaymentWasNotApproved;Reassign_\To_\Other_\Approver."	

		ReleaseExitRules

			if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				if (config.UpdateGLCommitInForeground = true					
				and instance count of CashLedgerPaymentDistributionsRel < 20)
					invoke UpdateToReleased GLCommit in foreground
						invoked.PrmFinanceEnterpriseGroup	= CashManagementGroup  
						invoked.PrmUniqueID					= UniqueID
						invoked.PrmAccountingEntity			= CompanyBaseData.OverrideCompany.AccountingEntity
				else
					invoke UpdateToReleased GLCommit
						invoked.PrmFinanceEnterpriseGroup	= CashManagementGroup  
						invoked.PrmUniqueID					= UniqueID
						invoked.PrmAccountingEntity			= CompanyBaseData.OverrideCompany.AccountingEntity
			if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
			and CashCode.EditAvailableFunds)
				invoke UpdateCommittedFunds CashCodeFundEditRel
#ifdef module cam
			if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
				invoke UpdateDisbursements CustodialAccountEditRel
				for each CustodialAccountEditRel
					LocalFinanceDimension10 = each.FinanceDimension10
					LocalAccountingEntity = each.AccountingEntity
					if (PayablesData.Vendor = CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
						LocalActivityType = 10
					else
						LocalActivityType = 2
					if (each.CommittedAmount > 0)	
						invoke Create CustodialActivity
							invoked.FinanceEnterpriseGroup  	 = CashManagementGroup
							invoked.CustodialActivity.CustodialAccountManagement	 = CustodialDetailAmountRel.CustodialAccountManagement
							invoked.CustodialPosting		     = LocalFinanceDimension10
							invoked.ActivityDate				 = PostDate 		 
							invoked.ActivityType				 = LocalActivityType
							invoked.DocumentNumber				 = Reference
							invoked.Description 				 = Description
							invoked.Amount						 = each.CommittedAmount *-1
							invoked.CustodialCashCode	 		 = CashCode
							invoked.CustodialTransactionCode	 = CashLedgerPayment.BankTransactionCode
							invoked.CashLedgerPaymentID			 = CashLedgerPayment.TransactionIDNumber
#endif


		PerformBudgetEditsForApprovalOrReleaseOrCancel






			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
        	and  GLCommitRelExists)
 				BudgetEditProcessing = BudgetEditProcessing.InProcess 
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel 
				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    								= CashManagementGroup
					invoked.PrmBudgetEditGroup           								= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBPayment.CashCode	= CashCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBPayment.CashLedgerPayment.BankTransactionCode	= CashLedgerPayment.BankTransactionCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBPayment.CashLedgerPayment.TransactionIDNumber	= CashLedgerPayment.TransactionIDNumber
					invoked.PrmBusinessClassName  					              		= "CashLedgerPayment"		
					if (LocalActionUnreleaseToRelease)
						invoked.PrmActionCode											= "R"  
						invoked.PrmEditContext                      					= "Release"					
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)   
							invoked.PrmMode												= BudgetEditMode.Hard
						else	
							invoked.PrmMode												= BudgetEditMode.UpdateOnly
					else	 
					if (LocalActionSubmitForApproval)
						invoked.PrmActionCode											= "A" 	
						invoked.PrmEditContext                      					= "SubmitForApproval"	
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)   
							invoked.PrmMode												= BudgetEditMode.Hard
						else	
							invoked.PrmMode												= BudgetEditMode.UpdateOnly
					else	
					if (LocalActionReleaseToCancel)
						invoked.PrmActionCode											= "N"	
						invoked.PrmEditContext                      					= "Cancel"					
						invoked.PrmMode													= BudgetEditMode.UpdateOnly				
					if (initiating action	= "CashLedgerPaymentImport.InterfaceCashPayments")	
						invoked.PrmIsBatch	= true
			else
				BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
				if (LocalActionUnreleaseToRelease)
					invoke Unreleased.FinalRelease
				else	
				if (LocalActionSubmitForApproval)
					invoke Unreleased.FinalApproval
				else
				if (LocalActionReleaseToCancel)
					invoke Released.FinalCancel


		PerformBudgetEditsForVoids	

			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
        	and  GLCommitRelExists)
 				BudgetEditProcessing = BudgetEditProcessing.InProcess 
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel 
				invoke EditTotalsRoute BudgetTemplateGroupTotal
					invoked.PrmFinanceEnterpriseGroup    								= CashManagementGroup
					invoked.PrmBudgetEditGroup           								= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBPayment.CashCode	= CashCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBPayment.CashLedgerPayment.BankTransactionCode	= CashLedgerPayment.BankTransactionCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBPayment.CashLedgerPayment.TransactionIDNumber	= CashLedgerPayment.TransactionIDNumber
					invoked.PrmActionCode												= "V"	
					invoked.PrmMode														= BudgetEditMode.UpdateOnly
					invoked.PrmBusinessClassName  					              		= "CashLedgerPayment"		
					invoked.PrmEditContext                      						= "Void"					
				invoke UpdateToReleased GLCommit								
					invoked.PrmFinanceEnterpriseGroup	= CashManagementGroup  
					invoked.PrmUniqueID					= UniqueID
					invoked.PrmAccountingEntity			= CompanyBaseData.OverrideCompany.AccountingEntity

		RejectBudgetCommitments		
			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
			and  GLCommitRelExists)
				invoke RejectInvoice GLCommit
					invoked.PrmFinanceEnterpriseGroup	= CashManagementGroup
					invoked.PrmUniqueID					= UniqueID
					invoked.PrmAccountingEntity			= CompanyBaseData.OverrideCompany.AccountingEntity
					invoked.PrmEditContext				= "RejectCashLedgerPayment"
													
		GetAutoNumberByLevel
			if (CashManagementGroup.AutoReferenceNumberByCompany)
				AutoNumberByCompany 				= CompanyBaseData.OverrideCompany
			else	 									 
			if (CashManagementGroup.AutoReferenceNumberByCashCode)
				AutoNumberByCashCode				= CashCode
			else	  					  
			if (CashManagementGroup.AutoReferenceNumberByBankTransactionCode)
				AutoNumberByBankTransactionCode		= CashLedgerPayment.BankTransactionCode
			else	
			if (CashManagementGroup.AutoReferenceNumberByCashCodeBankTranCode)
				AutoNumberByCashCode				= CashCode
				AutoNumberByBankTransactionCode		= CashLedgerPayment.BankTransactionCode
				
		CheckForDuplicates
			constraint (!DuplicateCashLedgerPaymentsRel exists)
				"Reference<Reference>AlreadyExistsForCashCode<CashCode>AndBankTransactionCode<CashLedgerPayment.BankTransactionCode>"	


		PerformFundAmountEdit

			invoke Delete CashCodeFundEditRel
			for each CashLedgerGLDistributionsRel
				initialize LocalCalculateCashFinanceStructure
				LocalCalculateCashFinanceStructure.InputCashManagementGroup				= each.CashManagementGroup
				LocalCalculateCashFinanceStructure.InputCashCode						= each.CashCode
				LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= each.CashLedgerSourceRecord
				LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= each.CashLedgerGLDistribution
				LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= each.CashLedgerGLDistribution.GLFinanceCodeBlock
				LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.CashCodeDistribution
				LocalCalculateCashFinanceStructure.InputFinanceCodeBlock				= CompanyCashCode.CashAccount
				LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

				LocalToAccountingEntity		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
				if (CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
					LocalAccountingUnit			= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
				else
					LocalFinanceDimension1		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1

				if (CashCode.EditAvailableFunds)
					invoke Update CashCodeFundEditByFundRel
						invoked.EditAmount += each.GLTransactionAmount
				else
					if (CashCodeFundRel !exists)
						invoke Update CashCodeFundEditByFundRel
								



#ifdef module cam
		PerformCustodialAmountEdit
			invoke Delete CustodialAccountEditRel
			for each CashLedgerGLDistributionsRel
				initialize LocalCalculateCashFinanceStructure
				LocalCalculateCashFinanceStructure.InputCashManagementGroup				= each.CashManagementGroup
				LocalCalculateCashFinanceStructure.InputCashCode						= each.CashCode
				LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= each.CashLedgerSourceRecord
				LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= each.CashLedgerGLDistribution
				LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= each.CashLedgerGLDistribution.GLFinanceCodeBlock
				LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.CashCodeDistribution
				LocalCalculateCashFinanceStructure.InputFinanceCodeBlock				= CompanyCashCode.CashAccount
				LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

				LocalToAccountingEntity		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
				LocalFinanceDimension10		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.FinanceDimension10
				if (LocalFinanceDimension10 entered)
					invoke Update CustodialAccountEditByPostingRel
						invoked.EditAmount += each.GLTransactionAmount
#endif

		CreateCashRequirementsErrors
			if (!Skip)
				if (!CashLedgerPayment.BankTransactionCode.Active)
					Skip = true
					SkipMessage = SkipMessage6
					LocalCashRequirementsResult = PrmCashRequirementsResult
					if (InactiveBankTransactionCodeErrorRel not exists)
						invoke Create CashRequirementsError
							invoked.VendorGroup 				= PrmVendorGroup
							invoked.PayGroup					= PrmPayGroup
							invoked.CashRequirementsResult		= PrmCashRequirementsResult
							invoked.ErrorMessage				= SkipMessage
							invoked.ErrorNumber					= CashRequirementsErrorNumber.BankTransactionCodeInactive
							invoked.CashManagementGroup			= CashManagementGroup
							invoked.CashCode					= CashCode
							invoked.CashLedgerPayment			= CashLedgerPayment
							invoked.BankTransactionCode			= CashLedgerPayment.BankTransactionCode

			if (!Skip)
				if (!CashCode.Active)
					Skip = true
					SkipMessage = SkipMessage7
					LocalCashRequirementsResult = PrmCashRequirementsResult
					if (InactiveCashCodeErrorRel not exists)
						invoke Create CashRequirementsError
							invoked.VendorGroup 				= PrmVendorGroup
							invoked.PayGroup					= PrmPayGroup
							invoked.CashRequirementsResult		= PrmCashRequirementsResult
							invoked.ErrorMessage				= SkipMessage
							invoked.ErrorNumber					= CashRequirementsErrorNumber.CashCodeInactive
							invoked.CashManagementGroup			= CashManagementGroup
							invoked.CashCode					= CashCode
							invoked.CashLedgerPayment			= CashLedgerPayment

		MatchRules

			ConfirmAdd = false	
			
			if (BankCurrency	!entered)
				BankCurrency	= Currency
			if (BankAmount		!entered)
				BankAmount		= BankCheckAmount

			if (!Skip)
				if (PrmCashRequirementsResult.ProcessGroup entered)
					if (PrmCashRequirementsResult.ProcessGroup = "NONE")
						if (PayablesProcessGroup entered)
							Skip = true
					else
						if (PayablesProcessGroup != PrmCashRequirementsResult.ProcessGroup)
							Skip = true
					SkipMessage = SkipMessage2
	
			if (!Skip)
				if (PrmCashRequirementsResult.PaymentCode entered
				and CashLedgerPayment.BankTransactionCode != PrmCashRequirementsResult.PaymentCode)
					Skip = true
					SkipMessage = SkipMessage3
			
			if (!Skip)
				if (PrmCashRequirementsResult.Company entered
				and PayablesData.PayablesCompany != PrmCashRequirementsResult.Company)
					Skip = true
					SkipMessage = SkipMessage4
			
			if (!Skip)
				if (PrmCashRequirementsResult.ProcessLevel entered
				and ProcessLevel != PrmCashRequirementsResult.ProcessLevel)
					Skip = true
					SkipMessage = SkipMessage8
			
			if (!Skip)
				if (TemporaryHold entered
				and !TemporaryHold.ApprovedByEngine)
					Skip = true
					SkipMessage = SkipMessage5

			include CreateCashRequirementsErrors



			if (!Skip)
				if (PrmCashRequirementsResult.CashCodeGroup entered)
					if (CashCode = any PrmCashRequirementsResult.CashCodeGroup.CashCodeGroupDetailsRel.CashCode)
						Skip = false
					else
						Skip = true
						ConfirmAdd = true
					SkipMessage = ConfirmMessage5
				else
					if (PrmCashRequirementsResult.CashCode entered)
						if (CashCode != PrmCashRequirementsResult.CashCode)
							Skip = true
							ConfirmAdd = true
					SkipMessage = ConfirmMessage6
	
			if (!Skip)
				if (PrmCashRequirementsResult.Vendor entered
				or  PrmCashRequirementsResult.VendorEntered)		
					if (PrmCashRequirementsResult.Vendor entered)
						if (PayablesData.Vendor != PrmCashRequirementsResult.Vendor)
							Skip = true
							ConfirmAdd = true
						SkipMessage = ConfirmMessage7
					else
						if (PrmCashRequirementsResult.VendorEntered)		
							LocalCounter 		= 1
							Match				= false
							VendorEntered	= false
							while LocalCounter < 10
								if (PrmCashRequirementsResult.Vendors.Vendor[LocalCounter] entered)
									VendorEntered = true
									if (PayablesData.Vendor = PrmCashRequirementsResult.Vendors.Vendor[LocalCounter])
										Match = true
										end while
								LocalCounter += 1
							if (VendorEntered
							and !Match)
								Skip = true
								ConfirmAdd = true
							SkipMessage = ConfirmMessage7
				else
					LocalCounter 		= 1
					Match				= false
					VendorClassEntered	= false
					while LocalCounter < 10
						if (PrmCashRequirementsResult.VendorClasses.VenClass[LocalCounter] entered)
							VendorClassEntered = true
							if (PayablesData.Vendor.VendorClass = PrmCashRequirementsResult.VendorClasses.VenClass[LocalCounter])
								Match = true
								end while
						LocalCounter += 1
					if (VendorClassEntered
					and !Match)
						Skip = true
						ConfirmAdd = true
					SkipMessage = ConfirmMessage8

		ResetLocalFieldsForRelease	
			LocalActionUnreleaseToRelease	= true
			LocalJournalizeGroup = first CashLedgerGLDistributionsRel.GLTransactionDetailRel.JournalizeGroup
				
		ResetLocalFieldsForApproval	
			LocalActionSubmitForApproval = true 	
		
		ResetLocalFieldsForCancel	
			LocalActionReleaseToCancel = true 		 	
																							
			
		CashAllocationCodeEdits	
			if (TransientCashAllocationCode entered)
				if (TransientCashAllocationCode.AllocationType.Amount)
					constraint (TransientCashAllocationAmount not entered)
						"AllocationCodeIsAnAmountType;CannotEnterAnAmount"
				if (TransientCashAllocationCode.AllocationType.AccountOnly
				or  TransientCashAllocationCode.AllocationType.Percent)
					constraint (TransientCashAllocationAmount entered)
						"AllocationCodeRequiresAnAmount"
			else
				if (TransientCashAllocationAmount entered)
					constraint (TransientCashAllocationCode entered)
						"AllocationAmountRequiresAnAllocationCode"	
						
	Derived Fields

		DerivedDebtorAddressCountry is a DerivedField
			type is Alpha size 3
			restricted
			return CompanyBaseData.OverrideCompany.AccountingEntity.AddressCode.PostalAddress.Country
			
		DerivedRemmInvoiceType is a DerivedField
			type is Alpha size 20
			restricted
			return "CashLedgerPayment"
		
		DerivedFunCurr is a DerivedField
			type is AlphaUpper size 5
			restricted
			return CompanyBaseData.OverrideCompany.AccountingEntity.FunctionalCurrency
		
		DerivedFunAmount is a DerivedField
			type is Decimal size 19.3
			restricted
			return CompanyBaseData.BasePaymentAmount.FunctionalAmount.EnteredCurrencyAmount
		
		DerivedBankEntityBranchName is a DerivedField
			type is Alpha size 70
			restricted
			return BankEntity.BankName
	

		DerivedPayeeName is a DerivedField	
			type is like VendorName
			default label is "PayeeName"
			restricted
			if (PayeeFirstName not entered)
				return PayeeName
			else
				return DerivedPayeeNameStringField
			
		DerivedPayeeNameStringField is a StringField	
			type is Alpha 120
			default label is "PayeeName"
			restricted
			PayeeFirstName
			DerivedPayeeMiddleName
			" "
			PayeeName
			
    	DerivedPayeeMiddleName	is a DerivedField	
			type is like MiddleName
			restricted
			return " "+PayeeMiddleName
			
		ContextMessageEntityType is a StringField
			type is Alpha 50
			restricted
			"InforERPEnterpriseFinancialsPaymentDocument"

		ContextMessageText is a MessageField
			restricted
			"PaymentEntryForCashCode<CashCode>,TransactionCode<CashLedgerPayment.BankTransactionCode>,AndReferenceNumber<Reference>"
					
    	DistributionTotal			is a DerivedField		
			type is like InternationalAmount
			return (sum CashLedgerGLDistributionsWithEntryTypeRel.GLTransactionAmount)
			
        BalanceAmount is a DerivedField
            type is like InternationalAmount
            if (UsingBankCurrencyPosting)	
            	return BankAmount - DistributionTotal
            else	
            	return BankCheckAmount - DistributionTotal
            
		MyPFIApprovals is a DerivedField
        	type is Boolean
            restricted
            for each PfiWorkunitRel
                for each each.PfiMetricsRel
                    if (each.PfiMetrics.PfiUserProfile = actor)
                        return true 
		
		StatusLabel 				is a ConditionalField
			type is Alpha size 8
			if (Status.SystemGenerated)
				"Paid"
			else
			if (Status.Historical)
				"Historical"
			else
			if (Status.Released)
				"Released"
			else
				"SelectedForPayment"

		DescriptionMessage			is a MessageField
			restricted
			"CashLedgerPayment"	
		
		DerivedPlainTextComment   is a DerivedField  
		    type is Text
		    return CommentText plain text
						

		DerivedAutoApprove is a DerivedField
			type is Boolean
        	restricted
			if (PaymentRoutingRuleRel exists)
				return first PaymentRoutingRuleRel.AutoApprove
			else
				return true

		DerivedAutoAssignedRoutingCode is a DerivedField
			type is AlphaUpper 30
        	restricted
			return first PaymentRoutingRuleRel.ApprovalCode

		DerivedNextApprovalLevel is a DerivedField
			type is Numeric 8
			restricted
			LocalApprovalLevel = ApprovalLevel
			include GetNextApprovalLevel
			return LocalApprovalLevel
			
		DerivedCurrentApprovalResource is a DerivedField
			type is like FinanceResource
			restricted
			return first CurrentApprovalCodeLevelRel.Approver

		DerivedCurrentApprovalActor is a DerivedField
			type is Actor
			restricted
			return first CurrentApprovalCodeLevelRel.Approver.FinanceResourceActor

		DerivedCurrentApprovalTeam is a DerivedField
			type is like FinanceTeam
			restricted
			return first CurrentApprovalCodeLevelRel.ApprovalTeam

		DerivedCurrentTeamActorList is a DerivedField
			type is Alpha 250
			restricted
			include BuildTeamApproverActorList
			return LocalApproverList

		DerivedCurrentApproverEscalationDays is a DerivedField
			type is Numeric 6
			restricted
			if (first CurrentApprovalCodeLevelRel.EscalationDays > 0)
				return first CurrentApprovalCodeLevelRel.EscalationDays	
			else
				return 10000

		DerivedCurrentApproverEscalationHours is a DerivedField
			type is Decimal 6.2
			restricted
			if (first CurrentApprovalCodeLevelRel.EscalationHours > 0)
				return first CurrentApprovalCodeLevelRel.EscalationHours
			else
				return 9999.99
				
		DisplayCurrentApproverDesc is a ConditionalField
			type is Alpha 100
			restricted
			if (Approver entered)
				Approver.PreferredSimplePresentationName
			else
				ApproverTeam.FinanceTeam.Description

		PaymentStatus 				is a ConditionalField
			type is Alpha 45
			if (PaymentProcessingHold)	
				PaymentProcessingHoldMessage
			else
			if (CashLedgerTransactionRel exists)
				if (CashLedgerTransactionRel.Status.Reconciled
				or  CashLedgerTransactionRel.Status.Voided
				or  CashLedgerTransactionRel.Status.StopPayment
				or  CashLedgerTransactionRel.Status.Escheated
				or  CashLedgerTransactionRel.Status.PendingStopPayConfirmation)		
					CashLedgerTransactionStatusMessage
				else
				if (CashLedgerTransactionRel.Status.StaleDated)
					CashLedgerTransactionStaleDatedMessage
				else
					CashLedgerTransactionIssuedMessage
			else
			if (CashLedgerPayablesPaymentRel exists)
				if (CashLedgerPayablesPaymentRel.Status.ScheduledForPayment)
					CashLedgerPayablesPaymentScheduledMessage
				else	
				if (CashLedgerPayablesPaymentRel.Status.ElectronicPaymentCancelled
				or  CashLedgerPayablesPaymentRel.Status.ElectronicPaymentReinstated)
					CashLedgerPayablesPaymentRejectMessage
				else
				if (CashLedgerPayablesPaymentRel.PaidDate entered)
					CashLedgerPayablesPaymentPaidMessage
				else
				if (CashLedgerPayablesPaymentRel.ConfirmationNumber entered)
					CashLedgerPayablesPaymentAcceptedMessage
				else
					CashLedgerPayablesPaymentIssuedMessage
			else
				blank

		DerivedPaymentType is a DerivedField
			type is Numeric 1
			if (ForeignEconomicRegulatoryCode.FercType.ServicesOrTransfers)
				return 2
			else
			if (ForeignEconomicRegulatoryCode.FercType.CapitalFlows)
				return 4
			else
			if (ForeignEconomicRegulatoryCode.FercType.TradeInGoods)
				return 6

		DerivedPaymentTypeDesc is a DerivedField
			type is MessageField
			if (ForeignEconomicRegulatoryCode.FercType.ServicesOrTransfers)
				return "Outgoing services or transfers"
			else
			if (ForeignEconomicRegulatoryCode.FercType.CapitalFlows)
				return "Outgoing capital flows"
			else
			if (ForeignEconomicRegulatoryCode.FercType.TradeInGoods)
				return "Outgoing trade in goods"

		DerivedTemporaryHoldMessage is a DerivedField		
			type is MessageField
			if (TemporaryHold.SentForApproval)
				return "PaymentHasBeenSentForApproval"
			if (TemporaryHold.RejectedByEngine)
				return "PaymentHasBeenRejected"

		PaymentProcessingHoldMessage is a MessageField	
			restricted
			"PaymentProcessingOnHold"
				
		CashLedgerTransactionStatusMessage is a MessageField
			restricted
			"<CashLedgerTransactionRel.Status>-<CashLedgerTransactionRel.ReconciliationData.ExchangeDate>"
		
		CashLedgerTransactionStaleDatedMessage is a MessageField
			restricted
			"<CashLedgerTransactionRel.Status>-<CashLedgerTransactionRel.StaleDate>"
		
		CashLedgerTransactionIssuedMessage is a MessageField
			restricted
			"Issued-<CashLedgerTransactionRel.IssueDate>"
				
		CashLedgerPayablesPaymentRejectMessage is a MessageField
			restricted
			"Rejected-<CashLedgerPayablesPaymentRel.RejectDate>"

		CashLedgerPayablesPaymentPaidMessage is a MessageField
			restricted
			"Paid-<CashLedgerPayablesPaymentRel.PaidDate>"	

		CashLedgerPayablesPaymentAcceptedMessage is a MessageField
			restricted
			"Accepted-<CashLedgerPayablesPaymentRel.ConfirmationNumber>"	

		CashLedgerPayablesPaymentIssuedMessage is a MessageField
			restricted
			"Issued-<CashLedgerPayablesPaymentRel.PaymentDate>"	

		CashLedgerPayablesPaymentScheduledMessage is a MessageField
			restricted
			"Scheduled-<CashLedgerPayablesPaymentRel.PaymentDate>"
			
		DerivedHeaderBudgetErrorCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (HeaderBudgetEditErrorExists)
				return "(" + instance count of HeaderBudgetEditErrorRel + ")"
			else
				return ""

		DerivedWarningBudgetErrorCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (DistributionBudgetEditErrorExists)
				return "(" + instance count of DistributionBudgetEditErrorRel + ")"
			else
				return ""

		DerivedTransactionCount is a DerivedField
			type is Numeric 7
			return 1

		DerivedAppsValue	is a DerivedField
			type is like PfiAppsValue
			return "CashLedgerPaymentApproval" + UniqueID			

		UserActionRoutingAsHtml	is a DerivedField
			type is RichText
			return first PfiWorkunitRel.UserActionRoutingAsHtml
		
		PaymentsPutOnHoldMessage is a MessageField
			restricted
			"PaymentsPutOnProcessingHold"
			
		PaymentsTakenOffHoldMessage is a MessageField
			restricted
			"PaymentsTakenOffProcessingHold"
		
		PaymentsFoundToProcessMessage is a MessageField
			restricted
			"PaymentsFoundToProcess"

		DerivedFirstErrorMessage is a DerivedField
			type is Alpha size up to 200
        	restricted
        	if (HeaderBudgetEditErrorRel exists)
        		return MouseOverBudgetErrorMessage
			if (DistributionBudgetEditErrorRel exists)
				return MouseOverBudgetErrorMessage
			if (IsPaymentProcessingOnHold)
				return MouseOverOnHoldErrorMessage
			if (IsVendorOnHold)
				return MouseOverVendorOnHoldErrorMessage
					
		MouseOverBudgetErrorMessage is a MessageField
			restricted
			"BudgetErrorsExist;SeeBudgetErrorTabForDetails"

		MouseOverOnHoldErrorMessage is a MessageField
			restricted
			"PaymentIsOnHold;WillNotBeProcessedByCashRequirements"

		MouseOverVendorOnHoldErrorMessage is a MessageField
			restricted
			"VendorIsOnHold;WillNotBeProcessedByCashRequirements"
			
		MassReleaseCompleteMessage is a MessageField
			restricted
			"MassReleaseComplete;SeeResultsRecord"
		OpenPaymentReportCompletionMessage is a MessageField
			restricted
			"OpenPaymentReportComplete;SeeResultsRecord"

		DerivedFormTitle is a DerivedField
			type is Alpha size up to 80
			if (RecordExists)
				return CashLedgerPmtTitle
			else
				return CashLedgerPmtTitleNoRecord
		
		CashLedgerPmtTitleNoRecord is a LabelField
			restricted
			"CashLedgerPayment"
		
		CashLedgerPmtTitle is a LabelField
			restricted
			"CashLedgerPayment_-(<CashLedgerPayment.Reference>)"

		SkipMessage1 is a MessageField
			restricted
			"CashLedgerPaymentFor<PayeeName>CannotBeAddedTo_Cash_Requirements_Result.PayImmediatelyParameterDoesNotMatch."
		SkipMessage2 is a MessageField
			restricted
			"CashLedgerPaymentFor<PayeeName>CannotBeAddedTo_Cash_Requirements_Result.ProcessGroupParameterDoesNotMatch."
		SkipMessage3 is a MessageField
			restricted
			"CashLedgerPaymentFor<PayeeName>CannotBeAddedTo_Cash_Requirements_Result.EditPaymentCodeParameterDoesNotMatch."
		SkipMessage4 is a MessageField
			restricted
			"CashLedgerPaymentFor<PayeeName>CannotBeAddedTo_Cash_Requirements_Result.CompanyParameterDoesNotMatch."
		SkipMessage5 is a MessageField
			restricted
			"CashLedgerPaymentFor<PayeeName>CannotBeAddedTo_Cash_Requirements_Result.TemporaryHoldIsNotApprovedByEngine."
		SkipMessage6 is a MessageField
			restricted
			"CashLedgerPayment(s)ForBankTransactionCode<CashLedgerPayment.BankTransactionCode>CannotBeAddedTo_Cash_Requirements_Result.BankTransactionCodeIsNotActive."
		SkipMessage7 is a MessageField
			restricted
			"CashLedgerPayment(s)ForCashCode<CashCode>CannotBeAddedTo_Cash_Requirements_Result.CashCodeIsNotActive."
		SkipMessage8 is a MessageField
			restricted
			"CashLedgerPaymentFor<PayeeName>CannotBeAddedTo_Cash_Requirements_Result.ProcessLevelParameterDoesNotMatch."

		ConfirmMessage5 is a MessageField
			restricted
			"CashLedgerPaymentFor<PayeeName>DoesNotMatchParameters.CashCodeDoesNotMatchAnyCashCodeFromCashCodeGroupParameters.Continue?"
		ConfirmMessage6 is a MessageField
			restricted
			"CashLedgerPaymentFor<PayeeName>DoesNotMatchParameters.CashCodeParameterDoesNotMatch.Continue?"
		ConfirmMessage7 is a MessageField
			restricted
			"CashLedgerPaymentFor<PayeeName>DoesNotMatchParameters.VendorParameterDoesNotMatch.Continue?"
		ConfirmMessage8 is a MessageField
			restricted
			"CashLedgerPaymentFor<PayeeName>DoesNotMatchParameters.VendorClassDoesNotMatchAnyVendorClassParameters.Continue?"

		DerivedCashLedgerPaymentErrorCount is a DerivedField	
			type is Alpha size up to 20
        	restricted
			if (CashLedgerTransactionError set exists)
				return "(" + instance count of CashLedgerTransactionError set + ")"
			else
				return ""

		DerivedPeriodEndDate	is a DerivedField 
			type is Date
			restricted
			return CurrentGeneralLedgerCalendarPeriodRel.Date

		DerivedRoundTo is a DerivedField 
			type is Decimal 5.4
			restricted
			if (BaseCurrencyNumberOfDecimals= 2)
				return .01
			else
			if (BaseCurrencyNumberOfDecimals= 0)
				return 1
			else
			if (BaseCurrencyNumberOfDecimals= 3)
				return .001
			else
			if (BaseCurrencyNumberOfDecimals= 4)
				return .0001

		PaymentOffsetBackgroundDistQty is a DerivedField		
			type is Numeric 4
			restricted
			if (config.CLPOffsetBackgroundDistQuantity > 50)
				return config.CLPOffsetBackgroundDistQuantity
			return 50
		DerivedRemittanceComment is a DerivedField
            type is RichText
            if (CashRequirementsResultRel.IncludeCommentOnCashLedgerPayments )
                return CashRequirementsResultRel.Comment + RemittanceComment
            else
                return RemittanceComment

		ApproverLinkback is a MessageField
			restricted
			"<linkback(webapp is Approver navigation is ProcessFlowForm text is \"ViewCashLedgerPaymentRecord\")>"

		CashManagerLinkback is a MessageField
			restricted
			"<linkback(webapp is CashManager navigation is ProcessFlowForm text is \"ViewCashLedgerPaymentRecord\")>"

				
	Transient Fields
		TransientAccountingEntity	is an AccountingEntity
			derive value from CompanyBaseData.OverrideCompany.AccountingEntity
		BankCheckAmountUnsigned		is an UnsignedInternationalAmount
			derive value from CashLedgerPayment.BankCheckAmount		
		CompletionMessage			is Alpha size 150
		TransientErrorDescription	is Alpha size up to 200	
			derive value from first CashLedgerTransactionErrorMassReleaseRel.ErrorDescription
		TransientCashAllocationUnitsAmount		is an InternationalAmount	
			default label is "Units"
			
		UseCashAllocationCode					is Boolean					
		TransientCashAllocationCode				is a CashAllocationCode 	
		TransientCashAllocationAmount			is an InternationalAmount	
			
    Conditions
        IsPendingStopApproval
        	restricted
        	when (Status.PendingApproval
        	or    Status.PendingStopPaymentApproval)

		CanRelease
			restricted
			when (!ImportInProcess
			and   !BudgetEditInProgress					
			and  (!CashManagementGroup.CashLedgerPaymentApprovalRequired
			or     CashledgerBatchIsApproved))			
			
		CanSubmitForApproval
			restricted
			when (!ImportInProcess
			and   !BudgetEditInProgress					
			and   CashManagementGroup.CashLedgerPaymentApprovalRequired
			and  !CashledgerBatchIsApproved)			
			
        IsProcessed
        	restricted
            classic name is CBM-PROCESSED
            when (Status >  2)

        IsUnreleased
        	restricted
            when (Status.Unreleased)

        IsUnreleasedForPeriodClose	
        	restricted
            when (Status.Unreleased
            and   PostDate <= CurrentGeneralLedgerCalendarPeriodRel.Date) 


		IsPendingApprovalForPeriodClose		
        	restricted
        	when (Status.PendingApproval
        	and   PostDate <= CurrentGeneralLedgerCalendarPeriodRel.Date 
			and   !IsBatchApproved)

		IsPendingStopPaymentApproval		
        	restricted
        	when (Status.PendingStopPaymentApproval
        	and   PostDate <= CurrentGeneralLedgerCalendarPeriodRel.Date 
			and   !IsBatchApproved)

		OutstandingCashPaymentsExist 
			restricted
			when (IsUnreleasedForPeriodClose
			or	  IsPendingApprovalForPeriodClose
			or    IsPendingStopPaymentApproval)
									
        IsReleased
        	restricted
            when (Status.Released)

		IsAdjustable
			restricted
			when (Status.Released
			or Status.SelectedForPayment
			or Status.SystemGenerated
			or Status.Historical)




		HasReissueOriginalIdentifier
			restricted
			when (ReissueOriginalIdentifier entered)

		RoutingRuleFound
        	restricted
			when (PaymentRoutingRuleRel exists)

		RequiresApproval
			restricted
			when (CashManagementGroup.CashLedgerPaymentApprovalRequired
			or   (ReissueOriginalIdentifier	entered
			and   !CashManagementGroup.VoidStopPaymentApprovalRequired))

		SummarizedBankAssignedPaymentNumbers
			restricted
			when (CashPaymentFormatRel.BankIssuedPaymentNumbers
			and   first ReissueOriginalIdentifierPayablesPaymentRel.IsSummarizedPayment)		

 		RejectCashLedgerPaymentReasonCodeRequired
 			restricted
			when (CashManagementGroup.RejectCashLedgerPaymentReasonCodeRequired)

		HasApprovalComments
			restricted
			when (CashLedgerPaymentReasonCodeUsage set exists)
		
		IsBatchApproved
			restricted
			when (CashLedgerBatchApproval	entered)	

		CashledgerBatchIsApproved			
			restricted
			when (CashLedgerBatchApproval	entered
			and   CashLedgerBatchApproval.Status.Approved)	

		ApprovalCodeRequired
			restricted
			when (CashManagementGroup.CashLedgerPaymentApprovalRequired
			and   !CashManagementGroup.ApprovalCodesNotUsedForPayments)
			
		OutOfBalance
			restricted
			when (Status.Unreleased
			and   BalanceAmount	entered)

		BudgetEditingInformationExists
			restricted
			when (BudgetTemplateGroupTotalRel exists)
		
		MultiRedAlertErrorsExist
			when (HeaderBudgetEditErrorRel exists
			or    DistributionBudgetEditErrorRel exists
			or    IsPaymentProcessingOnHold
			or    (IsVendorOnHold
			and    VendorOnHoldAlertApplicable))

		VendorOnHoldAlertApplicable
        	restricted
            when (Status.Unreleased
            or    Status.Released
            or    Status.PendingApproval)
         
		BudgetEditErrorExists
			when (HeaderBudgetEditErrorRel exists
			or    DistributionBudgetEditErrorRel exists)
					
		HeaderBudgetEditErrorExists
			restricted
			when (HeaderBudgetEditErrorRel exists)
			
		DistributionBudgetEditErrorExists
			restricted
			when (DistributionBudgetEditErrorRel exists)
		
		BudgetEditInProgress
			restricted
        	when (BudgetEditProcessing.InProcess)
        
        BudgetEditFailure
        	restricted
    		when (BudgetEditProcessing.Failure)

		GLCommitRelExists
			restricted
			when (GLCommitRel exists)

		OpenGLCommitRelExists
			restricted
			when (OpenGLCommitDrillRel exists)
			
		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   CashManagementGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

		HasWorkunit
			restricted
			when (PfiWorkunitRel exists)

		CurrentActorIsOnApproverTeam
        	restricted
			when (FinanceTeamMemberRel exists)

		CurrentActorIsApprover
        	restricted
			when (Approver	entered
			and	  CashManagementGroup.HROrganization = actor.agent(Employee).HROrganization
			and	  Approver = actor.agent(Employee).Employee)

		CurrentActorCanApprove
        	restricted
			when (CurrentActorIsApprover
			or	  CurrentActorIsOnApproverTeam)

		CurrentActorApprovals
			restricted
			when (MyPFIApprovals = true)
		
		AllowUpdateOnApprove
        	restricted
			when (Status.PendingApproval
			and	 (CurrentActorCanApprove
			or    CashLedgerBatchApproval.CurrentActorCanApprove))

		CanUpdateDistributions
			restricted
			when (!BudgetEditInProgress		
			and  (Status.Unreleased
			or   (AllowUpdateOnApprove
			and   !IsBatchApproved)))
			
		CanUpdateComments
			restricted
			when (!ImportInProcess
			and   Status >  0)

		HasAttachment		
			restricted
			when (PaymentAttachment entered)

		TemporaryHoldMessageEntered		
			restricted
			when (DerivedTemporaryHoldMessage entered)

		IsPaymentProcessingHoldable
			restricted
			when (!ImportInProcess
			and   Status.Released
			and   !IsPaymentProcessingOnHold)
			
		IsPaymentProcessingOnHold
			when (PaymentProcessingHold)
			
		IsVendorOnHold
			when (PayablesData.Vendor.OnHold)

		CanceledWithinDateRange	
			restricted
			when ((Status.Canceled
			and   PostDate > ReportDate
			and   first CashLedgerGLDistributionsRel.PostDate <= ReportDate)
			or    !Status.Canceled)
			 				
		WithinPostDateRange		
			restricted
			when ((!Status.Canceled                     
			and     PostDate <= ReportDate)
			or		Status.Canceled)

		WithinPaymentDateRange	
			restricted
			when (PaymentDate not entered
			or    PaymentDate > ReportDate)				
			 			
		WithinVoidDateRange		
			restricted
			when (VoidDate not entered
			or    VoidDate >= ReportDate)
			 				 				 			
		WithinBankCheckAmountRange
			restricted
			when (BankCheckAmountRange not entered
			or    BankCheckAmount within BankCheckAmountRange)
		
		WithinReferenceNumberRange
			restricted
			when (ReferenceNumberRange not entered
			or    Reference within ReferenceNumberRange)
						
		WithinTransactionNumberRange
			restricted
			when (TransactionNumberRange not entered
			or    TransactionNumber within TransactionNumberRange)			

		CanRemoveFromCashRequirementsResult
			when (CashRequirementsResult entered
			and   CashRequirementsResultRel.Status.Selected)

		AutoNumberingAllowed	
			restricted
			when (CashManagementGroup.AutoReferenceNumberForPaymentForm
			and   ((CashManagementGroup.AutoReferenceNumberByCompany
			and     CompanyBaseData.OverrideCompany.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoReferenceNumberByCashCode
			and     CashCode.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoReferenceNumberByBankTransactionCode
			and     CashLedgerPayment.BankTransactionCode.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoReferenceNumberByCashCodeBankTranCode
			and     CashLedgerPayment.BankTransactionCode.AutoTransactionNumbering
			and     CashCode.AutoTransactionNumbering)))
												
		CanAddToCashRequirementsResult
			when (CashRequirementsResult not entered
			and   Status.Released)

		IsOpenCashLedgerPayment
        	restricted
            when (Status.Unreleased
            or    Status.Released
            or    Status.SelectedForPayment
            or    Status.PendingApproval)

		IsPrintedDocument
			when (CashLedgerPayment.BankTransactionCode.PaymentOutputOption.PrintedDocument)
			
		IsElectronicFile
			when (CashLedgerPayment.BankTransactionCode.PaymentOutputOption.ElectronicFile)	

		FercTypeEntered
			restricted
			when   (ForeignEconomicRegulatoryCode.FercType entered)

		CashLedgerPaymentErrorsExist	
			when (CashLedgerTransactionErrorRel exists)

		MassReleaseErrorExists	
			when (CashLedgerTransactionErrorMassReleaseRel exists)

		UseCancelSetAction	
			restricted
			when (instance count of CashLedgerGLDistributionsRel > 100)
			
		BankCurrencyDiffersFromCurrency	
			restricted
			when (BankCurrency not = Currency)	 
			
		UsingBankCurrencyPosting	
			restricted
			when (CashCode.UseBankCurrencyForPaymentPosting
			and   BankCurrencyDiffersFromCurrency)	 

		PaymentInBalance	
			restricted
			when ((UsingBankCurrencyPosting	
			and    DistributionTotal = BankAmount)
			or	  (!UsingBankCurrencyPosting
			and    DistributionTotal = BankCheckAmount))

		RecordExists
			restricted
			when (CashLedgerPayment exists)
			
 		SecurityGroupAllowsAccess
			when ((actor.context.CashCodeSecurityGroup = "")
			or   (actor.context.CashCodeSecurityGroup != ""
			and   CashCodeSecurityGroupDetailRel exists))
		
		CompanySecurityGroupAllowsAccess			
			when (actor.context.CompanySecurityGroup = blank
			or    CompanySecurityGroupMemberRel exists)
		
		CashLedgerTransactionIdentifierExists
			restricted
			when (CashLedgerTransactionIdentifier entered)	
			
		DistributionsExist				
			when (CashLedgerGLDistributionsRel exists)
			
		CanDeleteDistributions 			
			restricted
			when (CanUpdateDistributions
			and   DistributionsExist)	
			
		CanApplyAdditionalDistributions 	
			restricted
			when (CanUpdateDistributions
			and   DistributionsWithAnyCashAllocationCodesRel exists)	


		FrontEndSplitsEnabled
			restricted
			when (CashManagementGroup.FinanceEnterpriseGroup.FrontEndSplits)

		ExecuteFrontEndSplits
			restricted
			when (FrontEndSplitsEnabled
			and CanUpdateDistributions)
			
		AllowFrontEndSplit
			restricted
			when (FrontEndSplitsEnabled
			and CashLedgerPaymentDistributionsRel exists
			and CanUpdateDistributions)

		HasFrontEndSplitDistributions
			restricted
			when (FESGLTransactionsRel exist
			and CanUpdateDistributions)
						
    Relations
 
		CashCodeSecurityGroupDetailRel
			one-to-one relation to CashCodeGroupDetail
			Field Mapping uses symbolic key
				related.CashManagementGroup         = actor.context.FinanceEnterpriseGroup
				related.CashCodeGroup				= actor.context.CashCodeSecurityGroup.FinanceDimensionStructure
				related.CashCode                    = CashCode

        NonPayablesReportableIncomeAdjustmentRel
            classic name is APRPTBLINC
            one-to-one relation to NonPayablesReportableIncomeAdjustment
            required
            Field Mapping uses symbolic key
                related.VendorGroup													   = PayablesData.PayablesCompany.VendorGroup  
                related.NonPayablesReportableIncomeAdjustment.TransactionSource        = "CB"
                related.NonPayablesReportableIncomeAdjustment.YearPaid                 = YearPaid
                related.NonPayablesReportableIncomeAdjustment.ReportableIncomeObjectID = ReportableIncomeObjectID

        CashLedgerGLDistributionsRel
            classic name is CBDISTRIB
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 								= CashManagementGroup	
                related.CashCode											= CashCode
                related.CashLedgerSourceRecord								= "CBM"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerPayment.TransactionIDNumber)

        CashLedgerGLDistributionsSeqNbrRel	
            classic name is CBDISTRIB
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 								= CashManagementGroup	
                related.CashCode											= CashCode
                related.CashLedgerSourceRecord								= "CBM"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerPayment.TransactionIDNumber
                and   related.CashLedgerGLDistribution.SequenceNumber	   <= LocalLastDistributionSequence)	

		CashLedgerGLDistributionFundAcctRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 								= CashManagementGroup	
                related.CashCode											= CashCode
                related.CashLedgerSourceRecord								= "CBM"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerPayment.TransactionIDNumber
				and   related.RecordType									= LocalRecordType)

        CashLedgerGLDistributionsNotVoidedRel	
            classic name is CBDISTRIB
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 								= CashManagementGroup	
                related.CashCode											= CashCode
                related.CashLedgerSourceRecord								= "CBM"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerPayment.TransactionIDNumber
                and   !related.RecordType.VoidedCashLedgerPaymentDistribution)

		CashLedgerGLDistributionsNotVoidedAndStaledatedRel	
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 								= CashManagementGroup	
                related.CashCode											= CashCode
                related.CashLedgerSourceRecord								= "CBM"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerPayment.TransactionIDNumber
                and   !related.RecordType.VoidedCashLedgerPaymentDistribution
				and   !related.RecordType.StaleDatingDistribution)

        CashLedgerPaymentDistributionsRel
            classic name is CBDISTRIB
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 								= CashManagementGroup	
                related.CashCode											= CashCode
                related.CashLedgerSourceRecord								= "CBM"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerPayment.TransactionIDNumber
                and   related.RecordType.CashLedgerPaymentDistribution)

     	CashLedgerPaymentDistributionsOrigExpenseOnlyRel	
            classic name is CBDISTRIB
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 								= CashManagementGroup	
                related.CashCode											= CashCode
                related.CashLedgerSourceRecord								= "CBM"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerPayment.TransactionIDNumber
                and   related.RecordType.CashLedgerPaymentDistribution)

				
		GLEntryDistributionsRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
                related.CashLedgerSourceRecord							= "CBM"
                related.CashLedgerGLDistribution.BankTransactionCode 	= CashLedgerPayment.BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerPayment.TransactionIDNumber
                related.CashLedgerGLDistribution.DistributionType		= "E"

 		ReleasedDistributionsRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= "CBM"
                related.CashLedgerGLDistribution.BankTransactionCode 	= CashLedgerPayment.BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerPayment.TransactionIDNumber
			Instance Selection
                where (related.Status.Released)
                







        DefaultProcessLevelsRel
            one-to-many relation to PayablesProcessLevel
            Field Mapping uses symbolic key
                related.Company = PayablesData.PayablesCompany
            Instance Selection
                where (related.DefaultProcessLevel = true)

        CashLedgerGLDistributionsWithEntryTypeRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
                related.CashLedgerSourceRecord							= "CBM"
                related.CashLedgerGLDistribution.BankTransactionCode 	= CashLedgerPayment.BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerPayment.TransactionIDNumber
                related.CashLedgerGLDistribution.DistributionType		= DistType.Entry

        CashLedgerGLDistributionsUnReleasedRel
        	one-to-many relation to CashLedgerGLDistribution
        	Field Mapping uses Alternate1
        		related.CashManagementGroup 							= CashManagementGroup
        		related.CashCode						 				= CashCode
                related.CashLedgerSourceRecord							= "CBM"
        		related.CashLedgerGLDistribution.BankTransactionCode	= CashLedgerPayment.BankTransactionCode
            	related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerPayment.TransactionIDNumber
            	related.CashLedgerGLDistribution.DistributionType 	 	= DistType.Entry
        	Instance Selection
        		where (related.Status.Unreleased)
        			        		
        CashPaymentFormatRel
            one-to-one relation to CashPaymentFormat
            Field Mapping uses symbolic key
            	related.CashManagementGroup 					= CashManagementGroup	
                related.CashCode								= CashCode
                related.CashPaymentFormat.BankTransactionCode	= CashLedgerPayment.BankTransactionCode
                related.CashPaymentFormat.PayablesProcessGroup	= PayablesProcessGroup

		CashLedgerPayablesPaymentRel
			one-to-one relation to CashLedgerPayablesPayment
			Field Mapping uses symbolic key
				related.CashManagementGroup 					      = CashManagementGroup
				related.CashCode 						  			  = CashCode
				related.CashLedgerSourceRecord						  = "CBM"
				related.CashLedgerPayablesPayment.BankTransactionCode = CashLedgerPayment.BankTransactionCode
				related.CashLedgerPayablesPayment.TransactionIDNumber = CashLedgerPayment.TransactionIDNumber

		CashLedgerPaymentsRel
			one-to-many relation to CashLedgerPayment
			Field Mapping uses Set4
				related.CashManagementGroup 	= CashManagementGroup
                related.PayablesData.PayGroup	= PayablesData.PayGroup  
			Instance Selection
				where (related.Status 	= Status.SelectedForPayment
				or	   related.Status 	= Status.SystemGenerated)

		DuplicateCashLedgerPaymentsRel
			one-to-many relation to CashLedgerPayment
			Field Mapping uses Set2
				related.CashManagementGroup 					= CashManagementGroup
                related.CashCode								= CashCode
                related.CashLedgerPayment.BankTransactionCode	= CashLedgerPayment.BankTransactionCode
                related.Reference								= Reference
			Instance Selection
				where (related.UniqueID	!= UniqueID
				and    !related.Status.Canceled
				and	   !related.Status.Voided)

		CompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= LocalCompanyGroup
				related.Company						= CompanyBaseData.OverrideCompany

		PayablesInvoicePaymentsRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses Set2
                related.PayGroup		= PayablesData.PayGroup	
			Instance Selection
				where (related.Status 	= PayablesInvoicePayment.Status.SelectedForPayment
				or	   related.Status 	= PayablesInvoicePayment.Status.SystemGeneratedPayment)

		PayablesProcessingMonitorRel									
			one-to-one relation to PayablesProcessingMonitor
			Field Mapping uses symbolic key
            	related.VendorGroup									  = PayablesData.PayablesCompany.VendorGroup  
				related.PayablesProcessingMonitor.PayGroup			  = PayablesData.PayGroup		
				related.PayablesProcessingMonitor.RunProgram		  = LocalRunProgram				
				related.PayablesProcessingMonitor.ProcessGroup		  = LocalProcessGroup
				related.PayablesProcessingMonitor.ProcessLevel		  = blank
				related.PayablesProcessingMonitor.AccountStructure	  = blank						
				related.PayablesProcessingMonitor.RunGroup			  = blank	
				related.PayablesProcessingMonitor.AuthorityCode		  = blank	
				related.PayablesProcessingMonitor.Company			  = blank	   
				related.PayablesProcessingMonitor.BankTransactionCode = blank

		CashCodeTransactionCodeRel
			one-to-many relation to CashCodeTransactionCode
			Field Mapping uses symbolic key
				related.CashManagementGroup	= CashManagementGroup
				related.CashCode			= CashCode
			Instance Selection
				where (related.CashCodeTransactionCode.Active	 	= true)
								
		PaymentRoutingRuleRel
			one-to-many relation to CashLedgerPaymentRoutingRule
			Field Mapping uses ByPriority
				related.CashManagementGroup = CashManagementGroup
			Instance Selection
				where (related.Active
				and	   CashLedgerPayment within related.ApproverAssignmentRule
				and	   !related.HasChild)

		CurrentApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ApprovalCode
				related.ApprovalLevel			= ApprovalLevel

		ApprovalCodeResourceRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ApprovalCode

		LocalApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ApprovalCode
				related.ApprovalLevel			= LocalApprovalLevel
		
		FinanceTeamMembersFromCurrentApprovalLevelRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.FinanceTeam				= first CurrentApprovalCodeLevelRel.ApprovalTeam

		FinanceTeamMemberRel
			one-to-one relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= CashManagementGroup
				related.FinanceTeam						= ApproverTeam
				related.FinanceTeamMember.TeamMember	= actor.agent(Employee).Employee
				
		ApprovalCodeResourceByResourceRel					
			one-to-one relation to ApprovalCodeResource
			Field Mapping uses ByApprover
				related.FinanceEnterpriseGroup	= CashManagementGroup.FinanceEnterpriseGroup
				related.ApprovalCode			= ApprovalCode
				related.Approver				= LocalApprover

		ReissueOriginalIdentifierPayablesPaymentRel
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses ByCashLedgerTransactionIdentifier
				related.CashManagementGroup 					      = CashManagementGroup
				related.CashLedgerTransactionIdentifier	  			  = ReissueOriginalIdentifier

		ReissueOriginalIdentifierLedgerTransactionRel
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses ByCashLedgerTransactionIdentifier
				related.CashManagementGroup 					      = CashManagementGroup
				related.CashLedgerTransactionIdentifier	  			  = ReissueOriginalIdentifier

		CashLedgerTransactionRel
			one-to-one relation to CashLedgerTransaction
			Field Mapping uses symbolic key
				related.CashManagementGroup 	= CashManagementGroup
				related.BankTransactionCode		= CashLedgerPayment.BankTransactionCode
				related.CashLedgerSourceRecord	= "CBM"
				related.CashLedgerTransaction   = CashLedgerPayment.TransactionIDNumber
				
		CashLedgerTransactionPurgeRel
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses symbolic key
				related.CashManagementGroup 	= CashManagementGroup
				related.BankTransactionCode		= CashLedgerPayment.BankTransactionCode
				related.CashLedgerSourceRecord	= "CBM"
				related.CashLedgerTransaction   = CashLedgerPayment.TransactionIDNumber
			Instance Selection
        		where (related.Status.Reconciled
        		or	   related.Status.Voided
        		or	   related.Status.StopPayment
        		or	   related.Status.WriteOff)

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "CB"
				related.Company						= CompanyBaseData.OverrideCompany	

		HeaderBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup			= CashManagementGroup
				related.BudgetEditError.BudgetEditGroup	= UniqueID

		DistributionBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByHeaderUniqueID
				related.FinanceEnterpriseGroup			= CashManagementGroup
				related.HeaderUniqueID                  = UniqueID

		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.GeneralLedgerSystemCode	= "CB"	

		GLCommitRel		
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID	
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.HeaderUniqueID	= UniqueID



		OpenGLCommitDrillRel	
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.HeaderUniqueID			= UniqueID
			Instance Selection
				where (related.Status = 0
				or     related.Status = 2
				or     related.Status = 3)
				
		GLCommitDocumentsRel	
			one-to-one relation to GLCommitDocument
			Field Mapping uses ByHeaderObjectReference
				related.HeaderObjectReference = reference to this instance







				
		BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup                    = CashManagementGroup
				related.BudgetTemplateGroupTotal.BudgetEditGroup  = UniqueID
														
		CashLedgerPaymentImportInErrorRel
			one-to-many relation to CashLedgerPaymentImport
			Field Mapping uses ByCashLedgerPaymentInError
	           	related.CashManagementGroup							= CashManagementGroup	
                related.CashLedgerPaymentImport.CashCode			= CashCode
                related.CashLedgerPaymentImport.BankTransactionCode	= CashLedgerPayment.BankTransactionCode
                related.CashLedgerPaymentInError					= CashLedgerPayment.TransactionIDNumber

		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "CASHLEDGERPAYMENT"			
				related.AppsValue	= DerivedAppsValue











		CashLedgerAutoTranNumbersRel
			one-to-many relation to CashLedgerAutoTranNumber
            Field Mapping uses symbolic key
            	related.CashManagementGroup 				= CashManagementGroup
                related.CashLedgerDocumentType				= CashLedgerDocumentType.CashLedgerPayment
 			Instance Selection
            	where (related.CashLedgerAutoTranNumber		= Reference
            	and    related.DocumentCashCode				= CashCode
            	and    related.DocumentBankTransactionCode	= CashLedgerPayment.BankTransactionCode
            	and    related.AutoNumberStatus.NumberAssignedToDocument)

		CashRequirementsResultRel
			one-to-many relation to CashRequirementsResult
			Field Mapping uses symbolic key
				related.VendorGroup				= PayablesData.PayablesCompany.VendorGroup
				related.PayGroup				= PayablesData.PayGroup
				related.CashRequirementsResult	= CashRequirementsResult

		ValidCashRequirementsResultRel
			one-to-many relation to CashRequirementsResult
			Field Mapping uses symbolic key
				related.VendorGroup				= PayablesData.PayablesCompany.VendorGroup
				related.PayGroup				= PayablesData.PayGroup
			Instance Selection
				where (related.ProcessGroup !entered		
				and    related.Status			<= 2)		

		ValidCashRequirementsResultByProcessGroupRel		
			one-to-many relation to CashRequirementsResult
			Field Mapping uses symbolic key
				related.VendorGroup				= PayablesData.PayablesCompany.VendorGroup
				related.PayGroup				= PayablesData.PayGroup
 			Instance Selection
				where (related.ProcessGroup		= PayablesProcessGroup
				and    related.Status			<= 2)

		CashCodeGroupDetailRel
			one-to-one relation to CashCodeGroupDetail
			Field Mapping uses symbolic key
				related.CashManagementGroup			= CashManagementGroup
				related.CashCodeGroup				= LocalCashCodeGroup
				related.CashCode					= CashCode

		CashLedgerTransactionErrorRel is a CashLedgerTransactionError set 
		
		CashLedgerTransactionErrorMassReleaseRel	
			one-to-many relation to CashLedgerTransactionError
			Field Mapping uses ByMassReleasePaymentsErrorSource
				related.CashManagementGroup						= CashManagementGroup
				related.ErrorSource								= 5	
				related.CashLedgerMassReleaseResult 			= CashLedgerMassReleaseResult
				related.CashCode								= CashCode
				related.CashLedgerPayment.BankTransactionCode	= CashLedgerPayment.BankTransactionCode
				related.CashLedgerPayment.TransactionIDNumber	= CashLedgerPayment.TransactionIDNumber
		
		CashRequirementsErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses ByCashLedgerPayment
				related.VendorGroup						= PayablesData.PayablesCompany.VendorGroup
				related.PayGroup						= PayablesData.PayGroup
				related.CashRequirementsResult			= CashRequirementsResult
				related.CashManagementGroup				= CashManagementGroup
				related.CashCode						= CashCode
				related.CashLedgerPayment				= CashLedgerPayment

		DeleteCashRequirementsErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses DeleteByCashLedgerPayment
				related.CashManagementGroup				= CashManagementGroup
				related.CashCode						= CashCode
				related.CashLedgerPayment				= CashLedgerPayment

		InactiveBankTransactionCodeErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses ByBankTransactionCode
                related.VendorGroup 			= PayablesData.PayablesCompany.VendorGroup
                related.PayGroup 				= PayablesData.PayGroup
				related.CashRequirementsResult	= LocalCashRequirementsResult
				related.CashManagementGroup		= CashManagementGroup
				related.BankTransactionCode		= CashLedgerPayment.BankTransactionCode
				related.ErrorNumber				= CashRequirementsErrorNumber.BankTransactionCodeInactive
 			Instance Selection
            	where (related.CashLedgerPayment entered)

		InactiveCashCodeErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses ByCashCode
                related.VendorGroup 			= PayablesData.PayablesCompany.VendorGroup
                related.PayGroup 				= PayablesData.PayGroup
				related.CashRequirementsResult	= LocalCashRequirementsResult
				related.CashManagementGroup		= CashManagementGroup
				related.CashCode				= CashCode
				related.ErrorNumber				= CashRequirementsErrorNumber.CashCodeInactive
 			Instance Selection
            	where (related.CashLedgerPayment entered)
            	
		PayablesBillOfExchangeRel
            classic name is APDRAFTS
            one-to-one relation to PayablesBillOfExchange
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= CashManagementGroup	
                related.BankTransactionCode    	= CashLedgerTransactionRel.BankTransactionCode
                related.PayablesBillOfExchange 	= CashLedgerTransactionRel.CashLedgerTransaction
                
        PayablesBillOfExchangeDistributionRel
        	one-to-many relation to PayablesBillOfExchangeDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup		= CashManagementGroup	
                related.BankTransactionCode    	= CashLedgerTransactionRel.BankTransactionCode
                related.PayablesBillOfExchange 	= CashLedgerTransactionRel.CashLedgerTransaction


		CashCodeFundEditRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance

		CashCodeFundEditByFundRel
			one-to-one relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.CashCode				= CashCode
		 		related.AccountingEntity		= LocalToAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
		 		related.FinanceDimension1		= LocalFinanceDimension1

		ExceedesCashCodeFundBalanceRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByExceedesFundBalance
		 		related.CashManagementGroup		= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.ExceedesFundBalance		= true

		CashCodeFundRel
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= CashManagementGroup
				related.CashCode				= CashCode
				related.AccountingEntity		= LocalToAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
				related.FinanceDimension1		= LocalFinanceDimension1

		GLTransactionDetailRel		
			one-to-one relation to GLTransactionDetail
			Field Mapping uses ByOriginatingTransaction		 
				related.OriginatingTransaction	= reference to first CashLedgerGLDistributionsRel

		OrigGLTransactionDetailRel		
			one-to-one relation to GLTransactionDetail
			Field Mapping uses ByOriginatingTransaction		 
				related.OriginatingTransaction	= LocalOriginatingTransaction

		CurrentGeneralLedgerCalendarPeriodRel	
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= CashManagementGroup
				related.GeneralLedgerCalendarPeriod			= CompanyBaseData.OverrideCompany.AccountingEntity.CurrentPeriod.GeneralLedgerCalendarPeriod	

		SystemAccountRel	
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup				= CashManagementGroup
				related.SystemAccount						= LocalSystemAccount

		UnreleasedCashPaymentsErrorRel
			one-to-many relation to CashLedgerJobResultError
            Field Mapping uses ByCompanyErrorType
            	related.CashManagementGroup 				= LocalCashManagementGroup
            	related.CashLedgerJobResult					= LocalCashLedgerJobResult
            	related.Company								= LocalCompany
            	related.ErrorType							= 5 
        
        PendingApprovalCashPaymentsErrorRel
			one-to-many relation to CashLedgerJobResultError
            Field Mapping uses ByCompanyErrorType
            	related.CashManagementGroup 				= LocalCashManagementGroup
            	related.CashLedgerJobResult					= LocalCashLedgerJobResult
            	related.Company								= LocalCompany
            	related.ErrorType							= 6 
       	
       	PendingStopPaymentApprovalCashPaymentsErrorRel
			one-to-many relation to CashLedgerJobResultError
            Field Mapping uses ByCompanyErrorType
            	related.CashManagementGroup 				= LocalCashManagementGroup
            	related.CashLedgerJobResult					= LocalCashLedgerJobResult
            	related.Company								= LocalCompany
            	related.ErrorType							= 7 
            	
#ifdef module cam
		CustodialDetailAmountRel
			one-to-many relation to CustodialDetailAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= CashManagementGroup
			Instance Selection
				where (related.CustodialAccountManagement.AccountingEntity = LocalAccountingEntity
				and    related.CustodialPosting = LocalFinanceDimension10
				and 	related.EditLevel.Individual)
				
		CustodialAccountEditByPostingRel
			one-to-one relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.FinanceEnterpriseGroup	= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance
		  		related.AccountingEntity		= LocalToAccountingEntity
		 		related.FinanceDimension10		= LocalFinanceDimension10
		 		
		ExceedsCustodialAccountBalanceRel
			one-to-many relation to CustodialAccountEdit
			Field Mapping uses ByExceedsBalance
		 		related.FinanceEnterpriseGroup	= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.ExceedsBalance			= true
		 		
		CustodialAccountEditRel
			one-to-many relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.FinanceEnterpriseGroup	= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance
#endif
                
    	DistributionsByCashAllocationCodeRel	
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup			= CashCode.CashManagementGroup	
                related.CashCode					= CashCode
                related.CashLedgerSourceRecord		= "CBM"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
                and    related.CashLedgerGLDistribution.TransactionIDNumber  = CashLedgerPayment.TransactionIDNumber
                and   !related.CashLedgerGLDistribution.DistributionType.FundCashPayment
                and	   related.CashAllocationCode = LocalCashAllocationCode)	 
                
        DistributionsWithAnyCashAllocationCodesRel  
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup			= CashCode.CashManagementGroup	
                related.CashCode					= CashCode
                related.CashLedgerSourceRecord		= "CBM"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
                and    related.CashLedgerGLDistribution.TransactionIDNumber  = CashLedgerPayment.TransactionIDNumber
                and   !related.CashLedgerGLDistribution.DistributionType.FundCashPayment
                and	   related.CashAllocationCode entered)	

		FESGLTransactionsRel
			one-to-many relation using CashLedgerPaymentDistributionsRel
			Instance Selection
				where (related.CreatedByFES)

		CashLedgerGLDistributionPaymentTypeRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 								= CashManagementGroup	
                related.CashCode											= CashCode
                related.CashLedgerSourceRecord								= "CBM"
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerPayment.TransactionIDNumber
				and   related.RecordType.APCashLedgerPaymentDistribution)

		CompanySecurityGroupMemberRel			
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company                     = PayablesData.PayablesCompany

		PfiConfigurationFromEmailPropertyRel 
			one-to-one relation to PfiConfigurationProperty
			Field Mapping uses symbolic key
				related.PfiConfiguration			= "main"
				related.PfiConfigurationProperty	= "FinanceAdminFromEmailAddress"

		PayablesInvoicePaymentsOnHoldRel
			one-to-many relation to PayablesInvoicePayment
			Field Mapping uses symbolic key
				related.Company       							= PayablesData.PayablesCompany
			Instance Selection
				where (related.VendorGroup   					= PayablesData.PayablesCompany.VendorGroup
				and    related.PayGroup							= PayablesData.PayGroup
				and    related.IsSystemGeneratedOrManualPayment
				and    related.OnHold 							= true)

		CashLedgerDistributionTypeEntryRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
                related.CashLedgerSourceRecord							= "CBM"
				related.CashLedgerGLDistribution.BankTransactionCode 	= CashLedgerPayment.BankTransactionCode
				related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerPayment.TransactionIDNumber
				related.CashLedgerGLDistribution.DistributionType		= "E"
			Instance Selection
				where (related.TaxCode entered)

		GLSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.GeneralLedgerSystemCode	= "CB"

		CashCodeOrPayGroupCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company 		= LocalCompany

		GLInterEntityRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.AccountingEntity		= CompanyCashCode.CashAccount.ToAccountingEntity
				related.ToAccountingEntity		= CashCodeOrPayGroupCompanyRel.AccountingEntity

























		CompanyCashCodeRelationCashRequirementsErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses symbolic key
				related.VendorGroup							= LocalVendorGroup
				related.PayGroup							= LocalPayGroup
				related.CashRequirementsResult				= LocalCashRequirementsResult
 			Instance Selection
				where (related.CashLedgerPayment entered
				and related.CashManagementGroup				= CashManagementGroup
				and related.CashCode						= CashCode
				and related.ErrorNumber						= CashRequirementsErrorNumber.CompanyCashCodeRelationship)













		GLInterEntityRelationshipCashRequirementsErrorRel
			one-to-many relation to CashRequirementsError
			Field Mapping uses symbolic key
				related.VendorGroup 						= LocalVendorGroup
				related.PayGroup 							= LocalPayGroup
				related.CashRequirementsResult				= LocalCashRequirementsResult
 			Instance Selection
				where (related.CashLedgerPayment entered
				and related.CashCode						= CashCode
				and related.ErrorNumber						= CashRequirementsErrorNumber.GLInterEntityRelationship)












	Sets
		Set2
			indexed
			Sort Order
				CashManagementGroup
				CashCode
				CashLedgerPayment.BankTransactionCode
				Reference
				CashLedgerPayment.TransactionIDNumber

		Set3
			indexed
			Sort Order
				CashManagementGroup
				CashCode
				CashLedgerPayment.BankTransactionCode
				TransactionNumber
				CashLedgerPayment.TransactionIDNumber

		Set4
			indexed
			Sort Order
				CashManagementGroup
				PayablesData.PayGroup
				Status
				PayablesProcessGroup
				CashLedgerPayment
				CashCode

		Set5
			indexed
			Sort Order
				CashManagementGroup
				PayablesData.PayGroup
				CashLedgerPayment
				CashCode

		ByCashLedgerTransactionIdentifier
			indexed


			Sort Order
				CashManagementGroup
				CashLedgerTransactionIdentifier
				Reference
				CashCode
				CashLedgerPayment

		ByReissueOriginalIdentifier
			indexed
			Instance Selection
				where (HasReissueOriginalIdentifier)
			Sort Order
				CashManagementGroup
				ReissueOriginalIdentifier

		ByCashRequirementsResult
			indexed
			Sort Order
				PayablesData.PayGroup
				CashRequirementsResult
				PayablesData.PayablesCompany
				CashManagementGroup
				CashCode
				CashLedgerPayment

		ByPaymentDate
			Sort Order
				CashManagementGroup
				PaymentDate
				PostDate
				Status
				CashCode
				CompanyBaseData.OverrideCompany
				CashLedgerPayment

		ByBankTransactionCode
			indexed
			Sort Order
				CashManagementGroup
				CashLedgerPayment.BankTransactionCode
				CashLedgerPayment.TransactionIDNumber

		ByCompany	
			indexed
			Sort Order
				CashManagementGroup
				CompanyBaseData.OverrideCompany
				Status
				CashCode
				CashLedgerPayment

		ByCashLedgerBatchApproval		
			Sort Order
				CashManagementGroup
				CashLedgerBatchApproval
				CashCode
				CashLedgerPayment
				
		ByPayeeName				
			indexed
			Sort Order
				CashManagementGroup
				PayeeName
				CashCode
				CashLedgerPayment.BankTransactionCode
				CashLedgerPayment.TransactionIDNumber

		ByPostDate
            Sort Order
                CashManagementGroup
                PostDate
                Status
                CashCode
                CompanyBaseData.OverrideCompany
                CashLedgerPayment
				
	Field Rules






		CashManagementAccount
			force default to CashCode.BankAccountNumber










		Status
			initial value is Status.Unreleased

		PayablesData
			required

		BankCheckAmount
			BankCheckAmount = BankCheckAmountUnsigned
			if (BankAmount				entered
			and BankCheckAmountUnsigned !entered
			and !ImportInProcess)
				BankAmountExchange.ExchangeDate				= PostDate
				BankAmountExchange.TransactionAmount		= BankAmount
				BankAmountExchange.FromCurrency				= BankCurrency
				BankAmountExchange.ToAmount.ToCurrency		= Currency 
				BankCheckAmount								= BankAmountExchange.ToAmount.OutputCurrencyAmount


		BankAccountCurrencyNumberOfDecimals
			if (UsingBankCurrencyPosting)	
				BankAccountCurrencyNumberOfDecimals = BankCurrency.Currency.NumberOfDecimals
			else	
				BankAccountCurrencyNumberOfDecimals = CashCode.BankAccountNumber.Currency.NumberOfDecimals
		



		BaseCurrencyNumberOfDecimals
			cannot be changed
			default to CompanyBaseData.OverrideCompany.CurrencyNumberOfDecimals
						
		Currency
			default to CashCode.Currency

        PostDate
            required

			default to current corporate date











		Description
			default to DescriptionMessage
			
		PayablesProcessGroup
		    default to PayablesData.Vendor.PayablesProcessGroup  
	
        PayeeName
            required

		PayeePostalAddress
        	if (PayablesData.PayablesIncomeCode entered)
        		required		
                	"Address_1RequiredIfIncomeCodeIsEntered"      
			if (action != "ReinstatePayment")	
				if (CashLedgerPayment.BankTransactionCode.PaymentOutputOption.PrintedDocument)	
					required
						"AddressRequiredIfTheBankTransactionCodePaymentOutputOptionIsAPrintedDocument"
					
		BankName
			default to BankEntity.BankName

		BankAccountNumber
			initialize ValidateBankAccountNumber
			ValidateBankAccountNumber.BankAccountValidationType = BankAccountValidationType
			ValidateBankAccountNumber.BankAccountNumber			= BankAccountNumber
				constraint (ValidateBankAccountNumber.IsValidBankAccount)
					"<ValidateBankAccountNumber.ErrorMessage>"
		
        ACHPrenotification
            default to "N"

		SwiftID  
		    constraint (BankEntity entered)
		        "S\W\I\F\TIsValidOnlyIfBankInformationIsEntered"     












                
		GeneralLedgerSourceCode
			required
			default to "CL"
			if (CashLedgerGLDistributionsRel exists)
				cannot be changed
					"CannotChangeSourceCode;DistributionsExist"	               
		
		ProcessLevel
            default to DefaultProcessLevelsRel.PayablesProcessLevel
			if (PayablesData.PayablesIncomeCode entered)
				required
					"PayablesProcessLevelRequiredIfIncomeCodeIsEntered"	//Replacement for "A\P_\ProcessLevelRequiredIfIncomeCodeIsEntered" , "ProcessLevelRequiredIfIncomeCodeIsEntered"    
		
		TaxID
			if (PayablesData.PayablesIncomeCode entered)
				required
                	"Tax_\IdRequiredIfIncomeCodeIsEntered"        

		ReportableIncomeAmount	






            if (PayablesData.PayablesIncomeCode entered 
            and ReportableIncomeAmount not entered)
            	default to BankCheckAmount
                	
		CompanyCashCode
			required
			
		BankCurrency
			default to CashCode.Currency
			
		BankAmount
			if (BankCurrency	= Currency)
				force default to BankCheckAmount
			if (BankCurrency	!= Currency)
				required
					"BankAmountRequiredIfBankCurrencyNotCashCodeCurrency"				 

		ForeignEconomicRegulatoryCode
			initial value is PayablesData.Vendor.ForeignEconomicRegulatoryCode
           	
       	UseCashAllocationCode
       		if (TransientCashAllocationCode entered)
       			default to true
   			else
   				default to false

	Create Rules 
		include IDM.CreateRules
			replace AttachmentField with PaymentAttachment
							
	Delete Rules
		include IDM.DeleteNoArchiveRules
			replace AttachmentField with PaymentAttachment

	Commit Rules
		include IDM.CommitRules
			replace AttachmentField with PaymentAttachment
   				
	Actions
		CashLedgerPaymentClose is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmVendorGroup				is a VendorGroup
					default label is "VendorGroup"
				PrmPayGroup					is a PayGroup
					default label is "PayGroup"
				PrmProcessGroup				is a PayablesProcessGroup
					default label is "ProcessGroup"
				PrmBackgroundGroup			is AlphaUpper up to 60
				PrmPayablesJobResult		is a PayablesJobResult
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmRunGroup					is Numeric 3
				PrmNumberOfThreads			is Numeric 3
					default label is "NumberOfThreads"
				PrmLastCBJournalizeGroup	is AlphaUpper size 30

			Parameter Rules

			Local Fields
				Skip									is Boolean
				LocalContinue							is Boolean
				NewAPReportableIncomeAdjustment			is a NonPayablesReportableIncomeAdjustment view

			Instance Selection
				where ((PrmNumberOfThreads	<= 1
				or    (CashLedgerPayment.TransactionIDNumber % PrmNumberOfThreads) = PrmRunGroup)
				and	  PayablesData.PayGroup				= PrmPayGroup
				and	  CashManagementGroup 					= actor.context.FinanceEnterpriseGroup
				and   Status.SystemGenerated
				and   (PrmProcessGroup not entered
				or	  PayablesProcessGroup					= PrmProcessGroup
				or    (PrmProcessGroup = "NONE"
				and    PayablesProcessGroup not entered)))

			Sort Order is Set4

			Rule Blocks

			Action Rules
				Empty Set Rules

				Set Rules
















				Instance Rules
					LocalVendorGroup	= PrmVendorGroup
					LocalPayGroup		= PrmPayGroup
					if (CashCode.DefaultPostCompany entered)
						LocalCompany				= CashCode.DefaultPostCompany
						LocalPayablesCompany		= CashCode.DefaultPostCompany	
					else
						LocalPayablesCompany		= CompanyBaseData.OverrideCompany
					if (LocalCompany not entered)
						LocalCompany				= PayablesData.PayGroup.PostCompany
					JobResult						= PrmPayablesJobResult
					LocalPayablesJobResult			= PrmPayablesJobResult
					LocalCashRequirementsResult 	= PrmCashRequirementsResult
					if (LocalBankTransactionCode	!= CashLedgerPayment.BankTransactionCode)
						if (!CashLedgerPayment.BankTransactionCode.BankTransactionType.CashPayment)
							Skip = true
						else
						if (!CashLedgerPayment.BankTransactionCode.Active)
							if (PrmCashRequirementsResult entered
							and InactiveBankTransactionCodeErrorRel not exists)
								Skip = true
								invoke Create CashRequirementsError
									invoked.VendorGroup 				= PrmVendorGroup
									invoked.PayGroup					= PrmPayGroup
									invoked.CashRequirementsResult		= PrmCashRequirementsResult
									invoked.PayablesCompany				= PayablesData.PayablesCompany
									invoked.ErrorMessage				= "Payments(s) for bank transaction code "+CashLedgerPayment.BankTransactionCode+" cannot be closed. Bank transaction code is inactive."
									invoked.ErrorNumber					= CashRequirementsErrorNumber.BankTransactionCodeInactive
									invoked.CashManagementGroup			= CashManagementGroup
									invoked.CashCode					= CashCode
									invoked.BankTransactionCode			= CashLedgerPayment.BankTransactionCode
									invoked.CashLedgerPayment			= CashLedgerPayment
















					if (LocalCashCode != CashCode)
						if (!CashCode.Active)
							if (PrmCashRequirementsResult entered
							and InactiveCashCodeErrorRel not exists)
								Skip = true
								invoke Create CashRequirementsError
									invoked.VendorGroup 				= PrmVendorGroup
									invoked.PayGroup					= PrmPayGroup
									invoked.CashRequirementsResult		= PrmCashRequirementsResult
									invoked.PayablesCompany				= PayablesData.PayablesCompany
									invoked.ErrorMessage				= "Payment(s) for cash code "+CashCode+" cannot be closed. Cash code is inactive."
									invoked.ErrorNumber					= CashRequirementsErrorNumber.CashCodeInactive
									invoked.CashManagementGroup			= CashManagementGroup
									invoked.CashCode					= CashCode
									invoked.CashLedgerPayment			= CashLedgerPayment













					if (CompanyCashCode not exists)
						if (PrmCashRequirementsResult entered
						and CompanyCashCodeRelationCashRequirementsErrorRel not exists)
							Skip = true
							invoke Create CashRequirementsError
								invoked.VendorGroup 				= PrmVendorGroup
								invoked.PayGroup					= PrmPayGroup
								invoked.CashRequirementsResult		= PrmCashRequirementsResult
								invoked.PayablesCompany				= PayablesData.PayablesCompany
								invoked.ErrorMessage				= "Company "+LocalPayablesCompany+" cash code "+CashCode+" relationship does not exist in company cash codes."
								invoked.ErrorNumber					= CashRequirementsErrorNumber.CompanyCashCodeRelationship
								invoked.CashManagementGroup			= CashManagementGroup
								invoked.CashCode					= CashCode
								invoked.CashLedgerPayment			= CashLedgerPayment













					if (CompanyCashCode exists
					and CompanyCashCode.CashAccount.ToAccountingEntity != CashCodeOrPayGroupCompanyRel.AccountingEntity
					and	GLInterEntityRel not exists)
						if (PrmCashRequirementsResult entered
						and GLInterEntityRelationshipCashRequirementsErrorRel not exists)
							Skip = true
							invoke Create CashRequirementsError
								invoked.VendorGroup 				= PrmVendorGroup
								invoked.PayGroup					= PrmPayGroup
								invoked.CashRequirementsResult		= PrmCashRequirementsResult
								invoked.PayablesCompany				= PayablesData.PayablesCompany
								invoked.ErrorMessage				= "Invalid relation between accounting entity "+CompanyCashCode.CashAccount.ToAccountingEntity+" and "+CashCodeOrPayGroupCompanyRel.AccountingEntity+"."
								invoked.ErrorNumber					= CashRequirementsErrorNumber.GLInterEntityRelationship
								invoked.CashManagementGroup			= CashManagementGroup
								invoked.CashCode					= CashCode
								invoked.CashLedgerPayment			= CashLedgerPayment














					if (!Skip)
						LocalContinue = true

						if (BankCheckAmount entered
						and CompanyBaseData.BasePaymentAmount.FunctionalAmount.EnteredCurrencyAmount entered)
							invoke SystemGenerated.CreateClosingDistribsFromBatch	
								invoked.PrmCodeBlock				= CompanyCashCode.PaymentClearingAccount
								invoked.PrmDescription				= "Payment Accrual"
								if (CompanyBaseData.OverrideCompany entered)
									invoked.PrmAccountingEntity		= CompanyBaseData.OverrideCompany.AccountingEntity
								else
									invoked.PrmAccountingEntity		= PayablesData.PayablesCompany.AccountingEntity
								invoked.PrmJournalizeGroup			= PrmLastCBJournalizeGroup
								invoked.PrmCreateFromBatchType		= 9
								invoked.PrmAccountType				= 1
								invoked.PrmDefaultSystemAccount		= 0
								invoked.PrmProcessGroup				= PrmProcessGroup

						if (BankCheckAmount entered
						and BaseNetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount entered)
							invoke SystemGenerated.CreateClosingDistribsFromBatch 
								invoked.PrmCodeBlock				= CompanyCashCode.CashAccount
								invoked.PrmDescription				= "Cash Disbursement"
								if (CompanyBaseData.OverrideCompany entered)
									invoked.PrmAccountingEntity		= CompanyBaseData.OverrideCompany.AccountingEntity
								else
									invoked.PrmAccountingEntity		= PayablesData.PayablesCompany.AccountingEntity
								invoked.PrmJournalizeGroup			= PrmLastCBJournalizeGroup
								invoked.PrmCreateFromBatchType		= 9
								invoked.PrmAccountType				= 2
								invoked.PrmDefaultSystemAccount		= 0
								invoked.PrmProcessGroup				= PrmProcessGroup

						invoke ProcessTaxDistribsFromBatch CashLedgerDistributionTypeEntryRel 
							invoked.PrmCreateFromBatchType	= 9
							invoked.PrmJournalizeGroup		= PrmLastCBJournalizeGroup

						if (PayablesData.PayablesIncomeCode entered)
							invoke CreateCashLedgerPaymentAdjustment NonPayablesReportableIncomeAdjustment	
								assign result to NewAPReportableIncomeAdjustment
								fill in fields from this instance
								invoked.PaymentDate					= PaymentDate

								invoked.NonPayablesReportableIncomeAdjustment.TransactionSource = "CB"
								invoked.ReportableAmount			= ReportableIncomeAmount
								invoked.IncomeCode					= PayablesData.PayablesIncomeCode
								invoked.ProcessLevel				= ProcessLevel
								invoked.TaxID						= TaxID
								invoked.Company						= PayablesData.PayablesCompany
								invoked.TransactionNumber			= TransactionNumber
								invoked.TaxIDType					= TaxIDType
								invoked.PaidAmount					= BankCheckAmount
								invoked.TransactionCurrency			= Currency
								invoked.PayeeName					= PayeeName
								invoked.PostalAddress				= PayeePostalAddress
								invoked.TransactionIDNumber			= CashLedgerPayment.TransactionIDNumber
								invoked.CashCode					= CashCode
								invoked.BankTransactionCode			= CashLedgerPayment.BankTransactionCode
								if (PayablesData.PayablesCompany entered)
									invoked.VendorGroup				= PayablesData.PayablesCompany.VendorGroup
							ReportableIncomeObjectID	= NewAPReportableIncomeAdjustment.NonPayablesReportableIncomeAdjustment.ReportableIncomeObjectID
							YearPaid					= PaymentDate year

						initialize TaxExempt
						invoke SystemGenerated.PaymentCloseFromBatch

					LocalCashCode				= CashCode
					LocalBankTransactionCode	= CashLedgerPayment.BankTransactionCode

		OpenPaymentReport is a Set Action
			completion message is "<OpenPaymentReportCompletionMessage>"
			run in background		
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCompany					is a GeneralLedgerCompany
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
					default label is "CompanyGroup"	
				PrmCashCode					is a CashCode
					context of PrmCashManagementGroup
					default label is "CashCode"	
				PrmCashCodeGroup			is a CashCodeGroup
					context of PrmCashManagementGroup
					default label is "CashCodeGroup"
				PrmReportDate				is Date
					default label is "ReconciliationDate"
						
			Parameter Rules
				PrmCashManagementGroup
					required
					CashManagementGroup  = PrmCashManagementGroup
				PrmCompanyGroup
					if (PrmCompanyGroup entered)
						constraint (PrmCompany not entered)
							"CannotEnterBothCompanyAndCompanyGroup"
					LocalCompanyGroup	= PrmCompanyGroup
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"		
					LocalCashCodeGroup	= PrmCashCodeGroup
				PrmReportDate
					required
																										
			Local Fields
				CashLedgerJobResultView			is a CashLedgerJobResult view						

			Instance Selection
				where  (CashManagementGroup 		= PrmCashManagementGroup
				and	   	!Status.Unreleased
				and    	!Status.PendingApproval
				and   ((!Status.Canceled
				and     PostDate            		<= PrmReportDate)
				or	   (Status.Canceled 
				and	  	PostDate					>	PrmReportDate
				and   	first CashLedgerGLDistributionsRel.PostDate  <= PrmReportDate))
				and    (PaymentDate !entered
				or  	PaymentDate           		> PrmReportDate)		
				and   ((Status.Voided
				and     VoidDate             		> PrmReportDate) 
				or      !Status.Voided)	
				and   ((PrmCashCode entered
				and     CashCode  					= PrmCashCode)
				or      PrmCashCode not entered)	
				and   ((PrmCashCodeGroup entered
				and     CashCodeGroupDetailRel exists)
				or      PrmCashCodeGroup not entered)	
				and   ((PrmCompany entered
				and 	CompanyBaseData.OverrideCompany = PrmCompany)
				or 		PrmCompany not entered)	
				and   ((PrmCompanyGroup entered
				and 	CompanyGroupMemberRel exists)
				or 		PrmCompanyGroup not entered))

			Sort Order is ByPaymentDate
			Action Rules
				Empty Set Rules
					invoke Create CashLedgerJobResult
						assign result to CashLedgerJobResultView
						invoked.CashManagementGroup					= PrmCashManagementGroup
						invoked.JobType								= 3 
						invoked.ReportDate							= PrmReportDate
						invoked.Company								= PrmCompany
						invoked.CompanyGroup						= PrmCompanyGroup
						invoked.CashCode							= PrmCashCode
						invoked.CashCodeGroup						= PrmCashCodeGroup
						invoked.Status								= 2
					
				Set Rules
					Entrance Rules
						invoke Create CashLedgerJobResult
							assign result to CashLedgerJobResultView
							invoked.CashManagementGroup					= PrmCashManagementGroup
							invoked.JobType								= 3 
							invoked.ReportDate							= PrmReportDate
							invoked.Company								= PrmCompany
							invoked.CompanyGroup						= PrmCompanyGroup
							invoked.CashCode							= PrmCashCode
							invoked.CashCodeGroup						= PrmCashCodeGroup
					Exit Rules
						invoke UpdateStatusOnResult CashLedgerJobResultView.CashLedgerJobResult							
				Instance Rules
					LocalRecordType = CashLedgerDistribRecordType.OffsetCashLedgerPaymentDistribution
					invoke UpdateOpenPaymentReport CashLedgerGLDistributionFundAcctRel
						invoked.PrmCashLedgerJobResult	= CashLedgerJobResultView.CashLedgerJobResult
						
		CreateBatchApproval is a Set Action 

			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashLedgerPaymentGroup	is a CashLedgerPayment group
				PrmCashManagementAccount	is a CashManagementAccount
				PrmCashCode					is a CashCode
				PrmBankTransactionCode		is a BankTransactionCode
				PrmGeneralLedgerSourceCode	is a GeneralLedgerEvent
					default label is "SourceCode"
				PrmApprovalCostCenter		is like AccountingUnit
				PrmApprovalCategory			is Alpha 20
				PrmDateRange				is a DateRange
				PrmSearchAmountRange		is a SearchAmountRange	
				PrmApprovalCode				is a ApprovalCode
				PrmCommentText				is a CommentText
				PrmAutoApprove				is Boolean
				PrmSubmitForApproval		is Boolean
				PrmCashLedgerBatchApproval	is a CashLedgerBatchApproval

			Parameter Rules
				PrmCashManagementGroup
					required
				PrmApprovalCode
					if (!PrmCashManagementGroup.CashLedgerPaymentApprovalRequired
					or  PrmCashManagementGroup.ApprovalCodesNotUsedForPayments)
						cannot be entered
					if (PrmSubmitForApproval
					and !PrmCashManagementGroup.ApprovalCodesNotUsedForPayments)
						required
							"ApprovalCodeIsRequired"
					constraint (!PrmApprovalCode.ApprovalCodeUsesMaximumAmounts)
						"CannotSelectApprovalCodesSetUpForNonBatchedCashLedgerPayments"
				PrmAutoApprove
					if (PrmAutoApprove)
						constraint (!PrmSubmitForApproval)
							"CannotSelectBothAutoApproveAndSubmitForApproval"
				PrmSubmitForApproval
					if (!PrmCashManagementGroup.CashLedgerPaymentApprovalRequired)
						constraint (!PrmSubmitForApproval)
							"SubmitForApprovalValidOnlyWhenPaymentApprovalIsRequired"
							
			Local Fields
				LocalCashLedgerBatchApproval is a CashLedgerBatchApproval view		
		
			Instance Selection
				where  (PrmCashManagementGroup		= CashManagementGroup
				and   ((PrmCashLedgerPaymentGroup 	entered
	            and	    CashLedgerPayment			within PrmCashLedgerPaymentGroup)
	            or	    PrmCashLedgerPaymentGroup 	!entered)
				and   ((PrmCashManagementAccount 	entered
	            and	    PrmCashManagementAccount	= CashManagementAccount)
	            or	    PrmCashManagementAccount 	!entered)
				and   ((PrmCashCode					entered
	            and	    PrmCashCode					= CashCode)
	            or	    PrmCashCode 				!entered)
				and   ((PrmBankTransactionCode		entered
	            and	    PrmBankTransactionCode		= CashLedgerPayment.BankTransactionCode)
	            or	    PrmBankTransactionCode 		!entered)
				and   ((PrmGeneralLedgerSourceCode	entered
	            and	    PrmGeneralLedgerSourceCode	= GeneralLedgerSourceCode)
	            or	    PrmGeneralLedgerSourceCode 	!entered)
				and   ((PrmApprovalCostCenter		entered
	            and	    PrmApprovalCostCenter		= ApprovalCostCenter)
	            or	    PrmApprovalCostCenter	 	!entered)
				and   ((PrmApprovalCategory			entered
	            and	    PrmApprovalCategory			= ApprovalCategory)
	            or	    PrmApprovalCategory		 	!entered)
				and   ((PrmDateRange				entered
	            and	    PostDate within PrmDateRange)
	            or	    PrmDateRange			 	!entered)
				and   ((PrmSearchAmountRange		entered
	            and	    BankCheckAmount within PrmSearchAmountRange)
	            or	    PrmSearchAmountRange	 	!entered)
	            and     Status.Unreleased
				and     !BudgetEditInProgress			
	            and     !ImportInProcess)


			Action Rules							
				Empty Set Rules

				Set Rules
					Entrance Rules
						initialize LocalCashLedgerBatchApproval
						if (PrmCashLedgerBatchApproval	entered)
							LocalCashLedgerBatchApproval	= PrmCashLedgerBatchApproval
						else
							invoke Create CashLedgerBatchApproval
								assign result to LocalCashLedgerBatchApproval
	    						invoked.CashManagementGroup		= PrmCashManagementGroup
	    						invoked.BatchApprovalType		= 1 
	    						invoked.CashLedgerPaymentGroup	= PrmCashLedgerPaymentGroup
	    						invoked.CashManagementAccount	= PrmCashManagementAccount
								invoked.CashCode				= PrmCashCode
								invoked.BankTransactionCode		= PrmBankTransactionCode
	        					invoked.GeneralLedgerSourceCode	= PrmGeneralLedgerSourceCode
								invoked.ApprovalCostCenter		= PrmApprovalCostCenter
								invoked.ApprovalCategory		= PrmApprovalCategory
								invoked.DateRange				= PrmDateRange
								invoked.SearchAmountRange		= PrmSearchAmountRange
								invoked.CommentText				= PrmCommentText
								invoked.ApprovalCode			= PrmApprovalCode
								invoked.AutoApprove				= PrmAutoApprove
					
					Exit Rules
						if (PrmSubmitForApproval)
							invoke Open.SubmitForApproval LocalCashLedgerBatchApproval.CashLedgerBatchApproval
								invoked.PrmApprovalCode	= PrmApprovalCode
						
				Instance Rules
			    	if ((CashLedgerPayment.BankTransactionCode.PaymentOutputOption.ElectronicFile			    	
					and  ACHPrenotification.Accepted
					or   CashLedgerPayment.BankTransactionCode.PaymentOutputOption.PrintedDocument
					or   CashLedgerPayment.BankTransactionCode.PaymentOutputOption.Swift
					or   CashLedgerPayment.BankTransactionCode.PaymentOutputOption.WireTransfer)
					and  DistributionTotal > 0
					and  PaymentInBalance 	
					and  CompanyCashCode.PaymentClearingAccount entered
					and  !DuplicateCashLedgerPaymentsRel exists) 
			        	CashLedgerBatchApproval	= LocalCashLedgerBatchApproval.CashLedgerBatchApproval
						if (PrmAutoApprove)
							invoke Unreleased.Release
						else
							if (PrmCashManagementGroup.CashLedgerPaymentApprovalRequired)
			        			make transition to PendingApproval






































									















		ReleaseAmendedDistributions is an Instance Action
			valid when (CashLedgerTransactionRel.CanReleaseAmendedDistributions)
			Action Rules
				invoke ReleaseAmendedDistributions CashLedgerTransactionRel
				include PerformBudgetEditsForApprovalOrReleaseOrCancel
								
		CancelFromCashLedgerBatchApproval is a Set Action		
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup			is a CashManagementGroup
				PrmCashLedgerBatchApproval		is a CashLedgerBatchApproval
				PrmCommentText					is a CommentText
			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup
				and    CashLedgerBatchApproval	= PrmCashLedgerBatchApproval
				and   (Status.Unreleased
				or     Status.PendingApproval))

			Sort Order is ByCashLedgerBatchApproval
			Action Rules
				Instance Rules
					if (Status.PendingApproval)
						make transition to Unreleased
					invoke Unreleased.Cancel
						invoked.PrmCommentText	= PrmCommentText

		RemoveFromDeletedBatch is an Instance Action				
			default label is untranslatable
			restricted
			Action Rules
				initialize CashLedgerBatchApproval 
				make transition to Unreleased
											
		AdjustReportableIncome is an Instance Action	
			valid when (IsAdjustable)
			Parameters		
				PrmPayablesCompany		is a PayablesCompany
				PrmIncomeCode			is a PayablesIncomeCode
					default label is "IncomeCode"
				PrmReportableAmount		is an UnsignedInternationalAmount
					default label is "ReportableAmount"
				PrmTaxID				is a TaxID
					default label is "TaxID"
				PrmTaxIDType			is a TaxIDType
					default label is "TaxIDType"
				PrmProcessLevel			is a PayablesProcessLevel
					default label is "ProcessLevel"
				PrmFromNonPayAdustment	is Boolean
			Parameter Rules		
				PrmPayablesCompany
					initial value is PayablesData.PayablesCompany
					force default to PayablesData.PayablesCompany
				PrmIncomeCode
					initial value is PayablesData.PayablesIncomeCode
				PrmReportableAmount
					initial value is ReportableIncomeAmount
					constraint (PrmReportableAmount <= BankCheckAmount)
						"ReportableAmountCannotBeGreaterThanPaymentAmount"
					if (PrmIncomeCode !entered)
						constraint (PrmReportableAmount !entered)
							"IncomeAmountMustBeZeroWhenIncomeCodeNotEntered"
				PrmTaxID
					initial value is TaxID
					if (PrmIncomeCode entered)
						required
							"Tax_\IdRequiredIfIncomeCodeIsEntered"
				PrmTaxIDType
					initial value is TaxIDType
				PrmProcessLevel
					initial value is ProcessLevel
					if (PrmIncomeCode entered)
						required
							"PayablesProcessLevelRequiredIfIncomeCodeIsEntered"
					if (PrmProcessLevel != ProcessLevel)
						constraint (Status.Released
						or          Status.Historical)
							"CanOnlyAdjustProcessLevelOnReleasedOrPaidPayments"
			Entrance Rules
				constraint (IsAdjustable)
					"CanOnlyAdjustReleased,SelectedOrPaidPayments"




				if (!Status.Historical)		
					PrmFromNonPayAdustment = true
			Local Fields
				NewAPReportableIncomeAdjustment			is a NonPayablesReportableIncomeAdjustment view
			Action Rules		
				PayablesData.PayablesIncomeCode	= PrmIncomeCode
				ReportableIncomeAmount			= PrmReportableAmount
				TaxID							= PrmTaxID
				TaxIDType						= PrmTaxIDType
				ProcessLevel					= PrmProcessLevel
			Exit Rules
				if (!PrmFromNonPayAdustment)		
					if (NonPayablesReportableIncomeAdjustmentRel exists)
						if (PayablesData.PayablesIncomeCode entered)
							invoke UpdateCashLedgerPaymentAdjustment NonPayablesReportableIncomeAdjustmentRel
								invoked.IncomeCode					= PayablesData.PayablesIncomeCode
								invoked.ReportableAmount			= ReportableIncomeAmount
								invoked.TaxID						= TaxID
								invoked.TaxIDType					= TaxIDType
								invoked.ProcessLevel				= ProcessLevel
						else
							invoke DeleteCashLedgerPaymentAdjustment NonPayablesReportableIncomeAdjustmentRel
							ReportableIncomeObjectID							= blank
					else			
						if (PayablesData.PayablesIncomeCode entered)
							invoke CreateCashLedgerPaymentAdjustment NonPayablesReportableIncomeAdjustment
								assign result to NewAPReportableIncomeAdjustment
								fill in fields from this instance
								invoked.NonPayablesReportableIncomeAdjustment.TransactionSource = "CB"
								invoked.NonPayablesReportableIncomeAdjustment.YearPaid	= PaymentDate year
								invoked.ReportableAmount			= ReportableIncomeAmount
								invoked.IncomeCode					= PayablesData.PayablesIncomeCode
								invoked.TaxID						= TaxID
								invoked.TaxIDType					= TaxIDType
								invoked.ProcessLevel				= ProcessLevel
								invoked.Company						= PayablesData.PayablesCompany
								invoked.TransactionNumber			= TransactionNumber
								invoked.PaymentDate					= PaymentDate
								invoked.PaidAmount					= BankCheckAmount
								invoked.TransactionCurrency			= Currency
								invoked.PayeeName					= PayeeName
								invoked.TransactionIDNumber			= CashLedgerPayment.TransactionIDNumber
								invoked.PayeeName					= PayeeName
								invoked.PostalAddress				= PayeePostalAddress
								invoked.CashCode					= CashCode
								invoked.BankTransactionCode			= CashLedgerPayment.BankTransactionCode
							ReportableIncomeObjectID	= NewAPReportableIncomeAdjustment.NonPayablesReportableIncomeAdjustment.ReportableIncomeObjectID
							YearPaid					= PaymentDate year

		ApplyComments is an Instance Action
			valid when (CanUpdateComments)
			Parameters
				PrmCommentText		is a CommentText
					default label is "Comment"
			Action Rules
				CommentText			+= PrmCommentText					
											









				
		TemporaryHoldUpdates is a Set Action 


			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashCode					is a CashCode
				PrmBankTransactionCode		is a BankTransactionCode
				PrmReference				is a Reference22
				PrmTransactionIDNumber		is a TransactionIDNumber 
				PrmTemporaryHold 			is AlphaUpper size 1
			Parameter Rules
				PrmTemporaryHold
					required
			Local Fields						
			Instance Selection
				where (CashCode				 				 = PrmCashCode
				and    CashLedgerPayment.BankTransactionCode = PrmBankTransactionCode
				and    CashLedgerPayment.TransactionIDNumber = PrmTransactionIDNumber)
			Sort Order				
			Action Rules
				Instance Rules
					constraint (TemporaryHold entered)
						"TemporaryHoldCannotBeBlank"
					if (TemporaryHold = TemporaryHold.ApprovedByEngine)
						constraint (PrmTemporaryHold entered)
							"CannotChangePaymentHasBeenApproved"  
					if (TemporaryHold = TemporaryHold.RejectedByEngine)
						constraint (PrmTemporaryHold not = "A")
							"CannotChangePaymentHasBeenRejected"  
					if (CashLedgerPayablesPaymentRel exists)
						if (PrmTemporaryHold	= "A"
						or  PrmTemporaryHold	= "R")												
							invoke CashLedgerPaymentTempHoldUpdates CashLedgerPayablesPaymentRel
								invoked.CashLedgerPaymentTempHold = PrmTemporaryHold
					if (PrmTemporaryHold	= "R"
					and Status 				< 3)
						TemporaryHold 	= PrmTemporaryHold
						Status 			= Status.Released
					if (CashLedgerPaymentsRel not exist
					and	PayablesInvoicePaymentsRel not exist)
						LocalRunProgram	= LocalRunProgram.CashRequirements
						if (PayablesProcessingMonitorRel exist)
							invoke Delete PayablesProcessingMonitorRel					


		PaymentProcessingHoldMassUpdate is a Set Action	
			completion message is "<PaymentCount>_<LocalCompletionMessage>"

			Parameters
				PrmCashManagementGroup			is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCashCode						is a CashCode
					default label is "CashCode"	
				PrmBankTransactionCode			is a BankTransactionCode
					default label is "BankTransactionCode"	
				PrmGeneralLedgerSourceCode		is a GeneralLedgerEvent
					default label is "EventCode"	
				PrmDateRange					is a DateRange
					default label is "DateRange"
				PrmPaymentGroup					is a CashLedgerPayment group
					default label is "CustomGroup"	
				PrmHoldAction					is Numeric size 1
					default label is "HoldAction"
					States
						AddHold					value is "0"
						RemoveHold				value is "1"
			Parameter Rules
				PrmCashManagementGroup
					required
			
				PrmHoldAction
					if (PrmHoldAction.AddHold)
						LocalCompletionMessage = PaymentsPutOnHoldMessage
					else
						LocalCompletionMessage = PaymentsTakenOffHoldMessage
								
			Instance Selection
				where  (PrmCashManagementGroup		= CashManagementGroup

				and   ((PrmCashCode					entered
	            and	    PrmCashCode					= CashCode)
	            or	    PrmCashCode 				!entered)

				and   ((PrmBankTransactionCode		entered
	            and	    PrmBankTransactionCode		= CashLedgerPayment.BankTransactionCode)
	            or	    PrmBankTransactionCode 		!entered)

				and   ((PrmGeneralLedgerSourceCode	entered
	            and	    PrmGeneralLedgerSourceCode	= GeneralLedgerSourceCode)
	            or	    PrmGeneralLedgerSourceCode 	!entered)

				and   ((PrmDateRange				entered
	            and	    PostDate within PrmDateRange)
	            or	    PrmDateRange			 	!entered)

				and    ((PrmPaymentGroup entered
				and		 CashLedgerPayment within PrmPaymentGroup)
				or       PrmPaymentGroup not entered)

				and    ((PrmHoldAction.AddHold
				and      IsPaymentProcessingHoldable)
				or      (PrmHoldAction.RemoveHold
				and      IsPaymentProcessingOnHold)))

			Sort Order	

			Local Fields
				PaymentCount is Numeric 8
			
										
			Action Rules
				Empty Set Rules
					LocalCompletionMessage = PaymentsFoundToProcessMessage
				
				Set Rules
					Entrance Rules	
						initialize PaymentCount
							
				Instance Rules
					increment PaymentCount				
					if (PrmHoldAction.AddHold)
						PaymentProcessingHold = true
					else
						PaymentProcessingHold = false
						


		UpdateApprovalLevel is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				ParmEscalate		is Boolean
				ParmReassign		is Boolean
				ParmCurrentActor	is an Actor	
			Action Rules

				LocalActor = ParmCurrentActor
				if (ParmReassign)
					if (ReassignToApprovalLevel entered)
						ApprovalLevel = ReassignToApprovalLevel.ApprovalLevel
						initialize ReassignToApprovalLevel
				else
					if (ParmEscalate)
						include GetNextEscalationApprovalLevel
						ApprovalLevel		= LocalApprovalLevel
						Approver			= LocalApprover
						ApproverTeam		= LocalApproverTeam
					else
						include GetNextApprovalLevel
						ApprovalLevel		= LocalApprovalLevel
						Approver			= LocalApprover
						ApproverTeam		= LocalApproverTeam


		UpdateApprovalFields is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCurrentApprover	is a FinanceResource
				PrmCurrentTeam		is a FinanceTeam
				PrmApprovalLevel	is Numeric 8
			Action Rules
				Approver		= PrmCurrentApprover
				ApproverTeam	= PrmCurrentTeam
				ApprovalLevel	= PrmApprovalLevel






		ReinstatePayment is a Create Action
			default label is untranslatable
			restricted


		RemoveFromCashRequirementsResult is an Instance Action
			valid when (CanRemoveFromCashRequirementsResult)
			Action Rules
				CashRequirementsResult	= blank
							
		UpdateTransactionNumber is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmTransactionNumber	is like TransactionNumber
			Action Rules
				TransactionNumber	= PrmTransactionNumber

		UpdateBudgetResults is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				ParmSuccess    	is Boolean
				ParmActionCode	is an ActionCode
			Action Rules
				if (ParmActionCode.Void) 
					BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
				else	
					if (ParmSuccess)
						BudgetEditProcessing = BudgetEditProcessing.Success
						if (ParmActionCode.Release)
							include ResetLocalFieldsForRelease	
							invoke Unreleased.FinalRelease
						else
						if (ParmActionCode.Approve)
							include ResetLocalFieldsForApproval	
							invoke Unreleased.FinalApproval
						else
						if (ParmActionCode.Cancel)
							include ResetLocalFieldsForCancel	
							invoke Released.FinalCancel	
					else
						BudgetEditProcessing = BudgetEditProcessing.Failure

		RebuildCommitmentTotals is an Instance Action		
			default label is untranslatable
			restricted
			Parameters
				IsBatch        is Boolean
				BudgetEditMode
				BudgetEditTotalsProcessing
				ActionCode

			Action Rules
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel
				invoke Delete BudgetTemplateGroupTotalRel
				for each CashLedgerGLDistributionsRel
					invoke RecalculateCommitmentAmounts each
					increment LocalTransactionCount
					if (LocalTransactionCount > 50)
						commit transaction
						initialize LocalTransactionCount
				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    								= CashManagementGroup
					invoked.PrmBudgetEditGroup           								= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBPayment.CashCode	= CashCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBPayment.CashLedgerPayment.BankTransactionCode	= CashLedgerPayment.BankTransactionCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBPayment.CashLedgerPayment.TransactionIDNumber	= CashLedgerPayment.TransactionIDNumber
					invoked.PrmBusinessClassName  					              		= "CashLedgerPayment"
					if (ActionCode.Release)
						invoked.PrmActionCode					= "R"  
						invoked.PrmEditContext                  = "Release"
						invoked.PrmMode							= BudgetEditMode.Hard
					else	 
					if (ActionCode.Approve)
						invoked.PrmActionCode					= "A" 	
						invoked.PrmEditContext                  = "SubmitForApproval"
						invoked.PrmMode							= BudgetEditMode.Hard
					if (ActionCode.Cancel)
						invoked.PrmActionCode					= "N"	
						invoked.PrmEditContext                  = "Cancel"
						invoked.PrmMode							= BudgetEditMode.UpdateOnly				
					if (initiating action	= "CashLedgerPaymentImport.InterfaceCashPayments")
						invoked.PrmIsBatch	= true

		UpdateJournalizeGroup is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmJournalizeGroup		is like JournalizeGroup
			Action Rules 
				invoke UpdateJournalizeGroup CashLedgerGLDistributionsRel
					invoked.PrmJournalizeGroup		= PrmJournalizeGroup
				

		MaintainPaymentAttachment is an Instance Action		
			valid when (!IsUnreleased)
			Parameters
				PrmPaymentAttachment	is an Attachment
					default label is "PaymentAttachment"
			Action Rules
				include IDM.DeleteNoArchiveRules
					replace AttachmentField with PaymentAttachment
				PaymentAttachment = PrmPaymentAttachment
				include IDM.CreateRules
					replace AttachmentField with PaymentAttachment

		UpdateTextSearchIndexes is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				build text search field DistribUserFieldsSearch
   					Fields
   						CashLedgerPaymentDistributionsRel.DistribUserFields

		UnselectCashLedgerPayments is a Set Action
			default label is untranslatable
			restricted
			completion message is "UnselectCashLedgerPaymentsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is like CashRequirementsResult
			Instance Selection
				where (PayablesData.PayablesCompany.VendorGroup	= PrmVendorGroup
				and    PayablesData.PayGroup					= PrmPayGroup
				and    CashRequirementsResult					= PrmCashRequirementsResult)
			Action Rules
				Instance Rules
					CashRequirementsResult	= blank
					Status					= Status.Released

		RecheckForErrors is a Set Action
			default label is untranslatable
			restricted
			completion message is "RecheckForErrorsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
			Instance Selection
				where (PayablesData.PayablesCompany.VendorGroup	= PrmVendorGroup
				and    PayablesData.PayGroup					= PrmPayGroup
				and    CashRequirementsResult					= PrmCashRequirementsResult)
			Local Fields	
				Skip				is Boolean
				SkipMessage			is Text
			Action Rules
				Instance Rules
					Skip = false

					include CreateCashRequirementsErrors

					if (Skip)
						initialize CashRequirementsResult 

		SelectCashLedgerPayments is a Set Action
			default label is untranslatable
			restricted
			completion message is "SelectCashLedgerPaymentsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult

			Local Fields	
				Skip 				is Boolean
				Match				is Boolean
				VendorClassEntered	is Boolean
				VendorEntered		is Boolean		
				LocalCounter		is Numeric size 1
				ConfirmAdd			is Boolean
				SkipMessage			is Text
				
			Instance Selection
				where (PayablesData.PayablesCompany.VendorGroup	= PrmVendorGroup
				and    PayablesData.PayGroup					= PrmPayGroup
				and   (PrmCashRequirementsResult.ProcessGroup	not entered
				or     PayablesProcessGroup						= PrmCashRequirementsResult.ProcessGroup
				or    (PrmCashRequirementsResult.ProcessGroup	= "NONE"
				and    PayablesProcessGroup						not entered))
				and    Status.Released
				and   (PayablesData.PayablesCompany = PrmCashRequirementsResult.Company
				or     PrmCashRequirementsResult.Company not entered)
				and   (ProcessLevel = PrmCashRequirementsResult.ProcessLevel
				or     PrmCashRequirementsResult.ProcessLevel not entered)
				and    CashLedgerPayment.BankTransactionCode.BankTransactionType.CashPayment
				and   (CashLedgerPayment.BankTransactionCode.PaymentOutputOption.PrintedDocument
				or     CashLedgerPayment.BankTransactionCode.PaymentOutputOption.ElectronicFile
				or     CashLedgerPayment.BankTransactionCode.PaymentOutputOption.Swift
				or 	   CashLedgerPayment.BankTransactionCode.PaymentOutputOption.WireTransfer)
				and	  !PayablesData.Vendor.OnHold
				and    PostDate				   <= PrmCashRequirementsResult.PayThroughDate)
				
			Sort Order
				CashManagementGroup
				PayablesData.PayGroup
				PayablesProcessGroup
				CashLedgerPayment.BankTransactionCode
				CashLedgerPayment.TransactionIDNumber
				CashCode

			Action Rules
				Empty Set Rules
								
				Set Rules
							
				Instance Rules
					Skip = false
					include MatchRules
										
					if (!Skip)
		                PayablesData.PayGroup						= PrmCashRequirementsResult.PayGroup
						CashRequirementsResult						= PrmCashRequirementsResult
															
		ProcessCashLedgerPayments is a Set Action
			default label is untranslatable
			restricted
			completion message is "ProcessCashLedgerPaymentsSubmitted"
			Parameters
				PrmVendorGroup				is a VendorGroup
				PrmPayGroup					is a PayGroup
				PrmCashRequirementsResult	is a CashRequirementsResult
				PrmBackgroundGroup			is AlphaUpper up to 60

			Instance Selection
				where (PayablesData.PayablesCompany.VendorGroup	= PrmVendorGroup
				and    PayablesData.PayGroup					= PrmPayGroup
				and    CashRequirementsResult					= PrmCashRequirementsResult
				and    Status.Released
				and    !IsPaymentProcessingOnHold)
				
			Sort Order
				CashManagementGroup
				CashCode
				PayablesData.PayablesCompany.VendorGroup
				PayablesData.Vendor
				CashLedgerPayment.BankTransactionCode
				CashLedgerPayment.TransactionIDNumber
				PayablesData.PayGroup
				CashRequirementsResult

			Action Rules

				Instance Rules
					BaseNetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount = CompanyBaseData.BasePaymentAmount.FunctionalAmount.EnteredCurrencyAmount
					
					Status = Status.SelectedForPayment



	
					invoke CreateFromBatch CashLedgerPayablesPayment
						invoked.CashManagementGroup	= PrmVendorGroup.BusinessGroup.FinanceEnterpriseGroup
						invoked.PayGroup			= PrmPayGroup
						invoked.Company				= CompanyBaseData.OverrideCompany 
						invoked.PaidVendor			= PayablesData.Vendor
						invoked.TransactionNumber	= blank
						invoked.PayablesCompanyProcessLevel.PayablesCompany				= PayablesData.PayablesCompany 
						invoked.PayablesCompanyProcessLevel.PayablesProcessLevel		= PrmCashRequirementsResult.ProcessLevel
						invoked.VendorGroup			= PrmVendorGroup
						invoked.Status				= blank
						if (PrmCashRequirementsResult.OverrideCashCode entered
						and PrmCashRequirementsResult.OverrideCashCode.Currency = Currency)	
							invoked.CashCode		= PrmCashRequirementsResult.OverrideCashCode
						else
							invoked.CashCode		= CashCode
						
						invoked.InvoiceGroup		= blank
						
						if (PrmCashRequirementsResult.ProcessGroup = "NONE")
							invoked.PayablesProcessGroup	= blank
						else
							invoked.PayablesProcessGroup	= PrmCashRequirementsResult.ProcessGroup
								
						invoked.CashLedgerPayablesPayment.BankTransactionCode			= CashLedgerPayment.BankTransactionCode
						invoked.CashLedgerPayablesPayment.TransactionIDNumber			= CashLedgerPayment.TransactionIDNumber
						
						invoked.CheckType			= CheckType.CbPayment
						invoked.PaidName			= DerivedPayeeName		
						invoked.PaymentDate			= PrmCashRequirementsResult.PaymentDate
		
						invoked.BasePaymentAmount.EnteredCurrencyAmount					= CompanyBaseData.BasePaymentAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.AppliedBaseAmount.TransactionAmount						= CompanyBaseData.BasePaymentAmount.FunctionalAmount.EnteredCurrencyAmount
		
						invoked.PaymentAmount											= BankCheckAmount
						invoked.PaidAmountInvoiceCurrency								= BankCheckAmount
		
						invoked.PaymentAmountBankAccountCurrency.EnteredCurrencyAmount	= BankCheckAmount
						invoked.AppliedAmountBankAccountCurrency.TransactionAmount		= BankCheckAmount

						invoked.VendorGroup 											= PrmCashRequirementsResult.VendorGroup
						invoked.CashRequirementsResult									= PrmCashRequirementsResult


					if (PrmCashRequirementsResult.OverrideCashCode entered
					and PrmCashRequirementsResult.OverrideCashCode.Currency = Currency)	
						for each CashLedgerGLDistributionsRel
							invoke Recreate each
								invoked.PrmCashCode = PrmCashRequirementsResult.OverrideCashCode
						invoke Recreate
							invoked.PrmCashCode = PrmCashRequirementsResult.OverrideCashCode

		Recreate is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashCode	is a CashCode
			Action Rules
				CashCode = PrmCashCode

		AddToCashRequirementsResult is an Instance Action
			valid when (CanAddToCashRequirementsResult)


















						
			Local Fields	
				Skip 				is Boolean
				Match				is Boolean
				VendorClassEntered	is Boolean
				VendorEntered		is Boolean		
				LocalCounter		is Numeric size 1
				ConfirmAdd			is Boolean
				SkipMessage			is Text
				PrmVendorGroup				is a VendorGroup	
				PrmPayGroup					is a PayGroup		
				PrmCashRequirementsResult	is a CashRequirementsResult		
			
			Action Rules
				PrmVendorGroup				= PayablesData.PayablesCompany.VendorGroup	
				PrmPayGroup					= PayablesData.PayGroup						
				if (first ValidCashRequirementsResultByProcessGroupRel exists)			
					PrmCashRequirementsResult	= first ValidCashRequirementsResultByProcessGroupRel.CashRequirementsResult
				else
					if (first ValidCashRequirementsResultRel exists)
						PrmCashRequirementsResult	= first ValidCashRequirementsResultRel.CashRequirementsResult
				constraint (PrmCashRequirementsResult entered)		
					"CashLedgerPaymentFor<PayeeName>CannotBeAddedTo_Cash_Requirements_Result.Valid_Cash_Requirements_ResultNotFound."
				if (PrmCashRequirementsResult.CashCodeGroup entered)			
					constraint (CashCode = any PrmCashRequirementsResult.CashCodeGroup.CashCodeGroupDetailsRel.CashCode)
						"CashCode<CashCode>IsNotIncludedInCashCodeGroup<PrmCashRequirementsResult.CashCodeGroup>EnteredOnCashRequirement;CannotSelect"
				Skip = false
				include MatchRules

				if (Skip)
					if (ConfirmAdd)
						confirmation required
							"<SkipMessage>"
						Skip = false
					else
						constraint (!Skip)
							"<SkipMessage>"
				
				if (!Skip)
	                PayablesData.PayGroup	= PrmPayGroup
					CashRequirementsResult	= PrmCashRequirementsResult
					
					invoke CheckToRemoveAlert CashRequirementsError
						invoked.PrmVendorGroup 					= PrmVendorGroup
						invoked.PrmPayGroup						= PrmPayGroup
						invoked.PrmCashRequirementsResult		= PrmCashRequirementsResult
						invoked.PrmCashCode 					= CashCode
						invoked.PrmBankTransactionCode			= CashLedgerPayment.BankTransactionCode
						invoked.PrmAlternateBankTransactionCode	= CashLedgerPayment.BankTransactionCode.ElectronicAlternateTransactionCode.BankTransactionCode

					if (CashRequirementsErrorRel exists)
						invoke Purge CashRequirementsErrorRel

					invoke SetManuallyChanged PrmCashRequirementsResult


		MassRelease is a Set Action	
			completion message is "<MassReleaseCompleteMessage>"
			run in background		
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCashCode					is a CashCode
					default label is "CashCode"	
				PrmCashCodeGroup			is a CashCodeGroup
					default label is "CashCodeGroup"
				PrmUseSystemDate			is Boolean
					default label is "UseSystemDate"
				PrmEnterDate				is Date
					default label is "EnterDate"
				PrmDays						is Numeric 3
					default label is "Days"
				PrmBankTransactionCode		is a BankTransactionCode
					default label is "BankTransactionCode"
				PrmGeneralLedgerSourceCode	is a GeneralLedgerEvent
					default label is "EventCode"
				PrmPrenoteStatus	is AlphaUpper 1
					default label is "PrenoteStatus"
					States
						NotPrenotifiedToAccepted	value is "N"
						PrenotifiedToAccepted		value is "P"
						BothToAccepted				value is "B"
						NoChange					value is blank
						
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					if (PrmCashCode entered)
						constraint (PrmCashCodeGroup not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"		
					LocalCashCodeGroup	= PrmCashCodeGroup
				PrmUseSystemDate
					if (PrmUseSystemDate)
						constraint (PrmEnterDate not entered)
							"EnterDateMustBeBlankWhenSystemDateIsSelected"
						LocalDateRange.Begin = current corporate date	
				PrmEnterDate
					if (PrmEnterDate not entered)
						constraint (PrmUseSystemDate)
							"EnterDateRequiredWhenSystemDateIsNotSelected"
						LocalDateRange.Begin = current corporate date
					else
						LocalDateRange.Begin = PrmEnterDate
				PrmDays
					LocalDateRange.End = LocalDateRange.Begin + PrmDays as days
																										
			Local Fields
				RecordCount						is Numeric 10
				LocalDateRange					is a DateRange
				MassReleaseError				is Boolean
				MassReleaseErrorMessage			is Alpha 150
				CashLedgerMassReleaseResultView	is a CashLedgerMassReleaseResult view
				
			Instance Selection
				where (CashManagementGroup	 	= PrmCashManagementGroup
				and	   PostDate					within LocalDateRange
				and    Status.Unreleased
				and    CanRelease
				and    !CashLedgerMassReleaseResult entered	

				and ((IsPrintedDocument
				or    ACHPrenotification.Accepted)
				or   (ACHPrenotification.NotPrenotified
				and   (PrmPrenoteStatus.NotPrenotifiedToAccepted
				or	   PrmPrenoteStatus.BothToAccepted))
				or   (ACHPrenotification.Prenotified
				and   (PrmPrenoteStatus.PrenotifiedToAccepted
				or	   PrmPrenoteStatus.BothToAccepted)))

				and  ((PrmCashCode				entered	
				and    CashCode					= PrmCashCode)
				or     PrmCashCode				not entered)

				and  ((PrmCashCodeGroup			entered	
				and    CashCodeGroupDetailRel exists)
				or     PrmCashCodeGroup			not entered)

				and  ((PrmBankTransactionCode	entered	
				and    CashLedgerPayment.BankTransactionCode	= PrmBankTransactionCode)
				or     PrmBankTransactionCode	not entered)

				and  ((PrmGeneralLedgerSourceCode	entered	
				and    GeneralLedgerSourceCode		= PrmGeneralLedgerSourceCode)
				or     PrmGeneralLedgerSourceCode	not entered))				
												
			Sort Order  
				CashManagementGroup
			    CashCode
			    CashLedgerPayment.BankTransactionCode
			    Reference
			    CashLedgerPayment.TransactionIDNumber
			    
				
			Action Rules
				Empty Set Rules
					invoke Create CashLedgerMassReleaseResult	
						invoked.CashManagementGroup		= PrmCashManagementGroup
						invoked.CashCode				= PrmCashCode
						invoked.CashCodeGroup			= PrmCashCodeGroup
				    	invoked.BankTransactionCode		= PrmBankTransactionCode
				    	invoked.UseSystemDate			= PrmUseSystemDate
				    	invoked.EnterDate				= PrmEnterDate
				    	invoked.Days					= PrmDays
				    	invoked.ReleaseDateRange		= LocalDateRange
				    	invoked.PrenoteStatus			= PrmPrenoteStatus
				    	invoked.GeneralLedgerSourceCode	= PrmGeneralLedgerSourceCode
						invoked.Status					= 2 
						invoked.ReleaseType				= 2 
					
				Set Rules
					Entrance Rules
						initialize RecordCount
						invoke Create CashLedgerMassReleaseResult	
							assign result to CashLedgerMassReleaseResultView
							invoked.CashManagementGroup		= PrmCashManagementGroup
							invoked.CashCode				= PrmCashCode
							invoked.CashCodeGroup			= PrmCashCodeGroup
					    	invoked.BankTransactionCode		= PrmBankTransactionCode
					    	invoked.UseSystemDate			= PrmUseSystemDate
					    	invoked.EnterDate				= PrmEnterDate
					    	invoked.Days					= PrmDays
					    	invoked.ReleaseDateRange		= LocalDateRange
					    	invoked.PrenoteStatus			= PrmPrenoteStatus
					    	invoked.GeneralLedgerSourceCode	= PrmGeneralLedgerSourceCode
							invoked.Status					= 1 
							invoked.ReleaseType				= 2 
					Exit Rules
						invoke StatusUpdate CashLedgerMassReleaseResultView.CashLedgerMassReleaseResult	
							
				Instance Rules
					increment RecordCount
					initialize MassReleaseErrorMessage
					MassReleaseError				 = false
					invoke Unreleased.ReleaseFromMassRelease	
						resume on error
							MassReleaseError		= true
							MassReleaseErrorMessage	= error message




					if (MassReleaseError)	
						invoke Create CashLedgerTransactionError 
							fill in fields from this instance
							invoked.CashLedgerPayment.TransactionIDNumber = CashLedgerPayment.TransactionIDNumber
							invoked.BankTransactionCode 		= CashLedgerPayment.BankTransactionCode
							invoked.CashLedgerMassReleaseResult	= CashLedgerMassReleaseResultView.CashLedgerMassReleaseResult
							invoked.CashLedgerSourceRecord		= "CBM"
							invoked.ErrorLevel					= 1		
							invoked.ErrorClass					= 3		
							invoked.ErrorType					= 9		
							invoked.ErrorSource					= 5		
							invoked.ErrorDescription			= MassReleaseErrorMessage
										
					if  (ACHPrenotification.NotPrenotified				
					and  (PrmPrenoteStatus.NotPrenotifiedToAccepted		
					or	  PrmPrenoteStatus.BothToAccepted)				
					and  !IsPrintedDocument) 							
						ACHPrenotification = "A"						
					
					CashLedgerMassReleaseResult	= CashLedgerMassReleaseResultView.CashLedgerMassReleaseResult									

		RemoveCashLedgerMassReleaseResult is an Instance Action	
			default label is untranslatable
			restricted
			Entrance Rules					
			Action Rules
				initialize CashLedgerMassReleaseResult 

		RerunMassReleaseForErrors is a Set Action	
			default label is untranslatable
			restricted
			completion message is "<MassReleaseCompleteMessage>"
			run in background		
			Parameters
				PrmCashManagementGroup			is a CashManagementGroup
				PrmCashLedgerMassReleaseResult 	is a CashLedgerMassReleaseResult
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashLedgerMassReleaseResult
					required									
			Local Fields
				RecordCount						is Numeric 10
				MassReleaseError				is Boolean
				MassReleaseErrorMessage			is Alpha 150
				
			Instance Selection
				where (CashManagementGroup	 		= PrmCashManagementGroup
				and    Status.Unreleased
				and    CanRelease
				and    CashLedgerMassReleaseResult 	= PrmCashLedgerMassReleaseResult)
	
			Sort Order  
			    CashManagementGroup
				CashLedgerMassReleaseResult
				
				
			Action Rules
				Empty Set Rules
					invoke Update PrmCashLedgerMassReleaseResult.CashLedgerMassReleaseResult
						invoked.Status	= 2 
						
				Set Rules
					Entrance Rules
						initialize RecordCount
						invoke Update PrmCashLedgerMassReleaseResult.CashLedgerMassReleaseResult
							invoked.Status	= 1 
							
					Exit Rules
						invoke StatusUpdate PrmCashLedgerMassReleaseResult.CashLedgerMassReleaseResult	
				
				Instance Rules
					increment RecordCount
					initialize MassReleaseErrorMessage
					MassReleaseError				= false
					invoke Unreleased.ReleaseFromMassRelease	
						resume on error
							MassReleaseError		= true
							MassReleaseErrorMessage	= error message
					if (MassReleaseError)	
						invoke Update CashLedgerTransactionError set
							fill in fields from this instance
							invoked.ErrorDescription	= MassReleaseErrorMessage
				
		PaymentFileCreationUpdates is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				PrmStatus								is Numeric size 2
				PrmBankTransactionCode					is a BankTransactionCode
				PrmTransactionNumber					is like TransactionNumber
				PrmCashLedgerTransactionIdentifier		is like CashLedgerTransactionIdentifier
				PrmPaymentDate							is Date
				PrmCashCode								is a CashCode
									
			Action Rules
				Status									= PrmStatus
				CashLedgerPayment.BankTransactionCode	= PrmBankTransactionCode
				TransactionNumber						= PrmTransactionNumber
				CashLedgerTransactionIdentifier			= PrmCashLedgerTransactionIdentifier
				PaymentDate								= PrmPaymentDate
				CashCode								= PrmCashCode
				include SetBaseNetPaymentAmount	

		CompanyPeriodClosePostDateUpdate	is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is like CashManagementGroup
				PrmNewPostDate				is Date
				PrmCashLedgerJobResult		is a CashLedgerJobResult
				PrmCompany					is a GeneralLedgerCompany
				PrmCloseDetail				is a CashLedgerJobResultDetail
			
			Parameter Rules
				PrmCashManagementGroup		
					required
				PrmNewPostDate				
					required
				PrmCompany					
					required
				PrmCloseDetail
					required
						
			Sort Order is ByCompany
				
			Instance Selection
				where (CashManagementGroup				= PrmCashManagementGroup
				and    CompanyBaseData.OverrideCompany	= PrmCompany
				and    OutstandingCashPaymentsExist)
				
			Action Rules
				Empty Set Rules
					if (PrmCloseDetail.CanClose)
						invoke CloseCompany PrmCloseDetail	
					
				Set Rules
					Entrance Rules
												
					Exit Rules
						if (PrmCloseDetail.CanClose)
							invoke CloseCompany PrmCloseDetail
												        	
				Instance Rules
					if (IsPendingStopPaymentApproval)
						invoke UpdateReconDate ReissueOriginalIdentifierLedgerTransactionRel
							invoked.PrmReconDate = PrmNewPostDate
					else
						PostDate	= PrmNewPostDate
						include CheckForRelatedChanges

		CompanyPeriodClosePostDateUpdateUnreleased is a Set Action		
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is like CashManagementGroup
				PrmNewPostDate				is Date
				PrmPeriodEndDate			is Date
				PrmCashLedgerJobResult		is a CashLedgerJobResult
				PrmCompany					is a GeneralLedgerCompany
				PrmCloseDetail				is a CashLedgerJobResultDetail
			
			Parameter Rules
				PrmCashManagementGroup		required		
				PrmNewPostDate				required
				PrmPeriodEndDate			required
				PrmCompany					required
				PrmCloseDetail				required
						
			Sort Order is ByCompany
				
			Instance Selection
				where (CashManagementGroup				= PrmCashManagementGroup
				and    CompanyBaseData.OverrideCompany	= PrmCompany

				and    Status.Unreleased
            	and    PostDate <= PrmPeriodEndDate) 
				
			Action Rules
				Empty Set Rules
					if (PrmCloseDetail.CanClose)
						invoke CloseCompany PrmCloseDetail	
					
				Set Rules
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalCashLedgerJobResult = PrmCashLedgerJobResult
						LocalCompany = PrmCompany
						invoke Delete UnreleasedCashPaymentsErrorRel
						
						if (PrmCloseDetail.CanClose)
							invoke CloseCompany PrmCloseDetail
												        	
				Instance Rules
					PostDate = PrmNewPostDate
					include CheckForRelatedChanges
						
		CompanyPeriodClosePostDateUpdatePendingApproval is a Set Action		
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is like CashManagementGroup
				PrmNewPostDate				is Date
				PrmPeriodEndDate			is Date
				PrmCashLedgerJobResult		is a CashLedgerJobResult
				PrmCompany					is a GeneralLedgerCompany
				PrmCloseDetail				is a CashLedgerJobResultDetail
			
			Parameter Rules
				PrmCashManagementGroup		required		
				PrmNewPostDate				required
				PrmPeriodEndDate			required
				PrmCompany					required
				PrmCloseDetail				required
						
			Sort Order is ByCompany
				
			Instance Selection
				where (CashManagementGroup				= PrmCashManagementGroup
				and    CompanyBaseData.OverrideCompany	= PrmCompany

				and    Status.PendingApproval
	        	and    PostDate <= PrmPeriodEndDate) 

			
			Action Rules
				Empty Set Rules
					if (PrmCloseDetail.CanClose)
						invoke CloseCompany PrmCloseDetail	
					
				Set Rules
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalCashLedgerJobResult = PrmCashLedgerJobResult
						LocalCompany = PrmCompany
						invoke Delete PendingApprovalCashPaymentsErrorRel
						
						if (PrmCloseDetail.CanClose)
							invoke CloseCompany PrmCloseDetail
												        	
				Instance Rules
					PostDate = PrmNewPostDate
					include CheckForRelatedChanges
						
		CompanyPeriodClosePostDateUpdatePendingStopPaymentApproval is a Set Action		
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is like CashManagementGroup
				PrmNewPostDate				is Date
				PrmPeriodEndDate			is Date
				PrmCashLedgerJobResult		is a CashLedgerJobResult
				PrmCompany					is a GeneralLedgerCompany
				PrmCloseDetail				is a CashLedgerJobResultDetail
			
			Parameter Rules
				PrmCashManagementGroup		required		
				PrmNewPostDate				required
				PrmPeriodEndDate			required
				PrmCompany					required
				PrmCloseDetail				required
						
			Sort Order is ByCompany
				
			Instance Selection
				where (CashManagementGroup				= PrmCashManagementGroup
				and    CompanyBaseData.OverrideCompany	= PrmCompany

				and	   Status.PendingStopPaymentApproval
	        	and    PostDate <= PrmPeriodEndDate) 

			
			Action Rules
				Empty Set Rules
					if (PrmCloseDetail.CanClose)
						invoke CloseCompany PrmCloseDetail	
					
				Set Rules
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalCashLedgerJobResult = PrmCashLedgerJobResult
						LocalCompany = PrmCompany
						invoke Delete PendingStopPaymentApprovalCashPaymentsErrorRel
						
						if (PrmCloseDetail.CanClose)
							invoke CloseCompany PrmCloseDetail
												        	
				Instance Rules
					PostDate = PrmNewPostDate
					include CheckForRelatedChanges
					
					if (SummarizedBankAssignedPaymentNumbers)
						invoke UpdateRejectDate ReissueOriginalIdentifierPayablesPaymentRel
							invoked.PrmRejectDate = PrmNewPostDate
					else
						invoke UpdateReconDate ReissueOriginalIdentifierLedgerTransactionRel
							invoked.PrmReconDate = PrmNewPostDate
										                                                                                            
        AutoCreateDistributions is an Instance Action    
            default label is untranslatable
            restricted
            Action Rules
            	initialize DistributionRunningTotal
            	initialize DistributionRunningUnitsTotal	
                for each TransientCashAllocationCode.CashAllocationCodeDetail set				
                	invoke Create CashLedgerGLDistribution
                		assign result to LastDistribution
						fill in fields from CashLedgerPayment
							except invoked.CashManagementGroup
							except invoked.CashCode
							except invoked.CashLedgerSourceRecord
							except invoked.CashLedgerGLDistribution.BankTransactionCode
							except invoked.CashLedgerGLDistribution.TransactionIDNumber
							except invoked.CashLedgerGLDistribution.SequenceNumber
							except invoked.TransactionNumber
							except invoked.TransactionNumberSuffix
							except invoked.GLFinanceCodeBlock
							except invoked.PostDate
							except invoked.Status
						invoked.CashManagementGroup      						= CashManagementGroup		
						invoked.CashCode										= CashCode
						invoked.CashLedgerSourceRecord							= "CBM"
						invoked.CashLedgerGLDistribution.BankTransactionCode 	= CashLedgerPayment.BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerPayment.TransactionIDNumber
						invoked.CashLedgerGLDistribution.DistributionType    	= "E"
						invoked.RecordType									 	= ""
						invoked.TransactionNumberSuffix                     	= 0
						invoked.PostDate									 	= PostDate
						invoked.GLFinanceCodeBlock								= each.AllocationAccount
						invoked.CashAllocationCode								= TransientCashAllocationCode
						invoked.TransientUnitsAmount							= TransientCashAllocationUnitsAmount	
						invoked.CompanyAccountingEntity							= LocalToAccountingEntity	
						if (TransientCashAllocationCode.AllocationType.AccountOnly)
							invoked.GLTransactionAmount			= TransientCashAllocationAmount
						if (TransientCashAllocationCode.AllocationType.Amount)
							invoked.GLTransactionAmount			= each.AllocationAmount
						if (TransientCashAllocationCode.AllocationType.Percent)
							LocalAllocationAmount				= (TransientCashAllocationAmount * each.AllocationPercent)
							round LocalAllocationAmount to nearest DerivedRoundTo
							invoked.GLTransactionAmount			= LocalAllocationAmount
							LocalAllocationUnitsAmount			= (TransientCashAllocationUnitsAmount * each.AllocationPercent)		
							round LocalAllocationUnitsAmount to nearest DerivedRoundTo												
							invoked.TransientUnitsAmount		= LocalAllocationUnitsAmount										

					if (LocalOriginatingTransaction entered)
						invoke FastUpdate LastDistribution.CashLedgerGLDistribution
							fill in user fields from LocalOriginatingTransaction(CashLedgerPaymentImport).CashLedgerPaymentImport
													
					if (TransientCashAllocationCode.AllocationType.Percent)
						DistributionRunningTotal += LocalAllocationAmount
						DistributionRunningUnitsTotal += LocalAllocationUnitsAmount	
				
				if  (TransientCashAllocationCode.AllocationType.Percent
				and (TransientCashAllocationAmount - DistributionRunningTotal) != 0)
					invoke Update LastDistribution.CashLedgerGLDistribution
						invoked.GLTransactionAmount = (LastDistribution.GLTransactionAmount + TransientCashAllocationAmount - DistributionRunningTotal) 
						
				if  (TransientCashAllocationCode.AllocationType.Percent	
				and (TransientCashAllocationUnitsAmount - DistributionRunningUnitsTotal) != 0)
					invoke Update LastDistribution.CashLedgerGLDistribution
						invoked.TransientUnitsAmount = (LastDistribution.TransientUnitsAmount + TransientCashAllocationUnitsAmount - DistributionRunningUnitsTotal) 
						
		CashAllocationCodeDistributionDelete	is an Instance Action	
			valid when (CanDeleteDistributions)	
			Parameters
				PrmCashAllocationCode	is a CashAllocationCode
					default label is "CashAllocationCode"
			Action Rules
				LocalCashAllocationCode	= PrmCashAllocationCode
				if (PrmCashAllocationCode entered)
					if (DistributionsByCashAllocationCodeRel exists)
						invoke Delete DistributionsByCashAllocationCodeRel
				else		
					if (DistributionsWithAnyCashAllocationCodesRel exists)
						invoke Delete DistributionsWithAnyCashAllocationCodesRel	
						
		ApplyAdditionalDistributions is an Instance Action 
			valid when (CanApplyAdditionalDistributions)	
			Parameters
				PrmCashAllocationCode	is a CashAllocationCode
					default label is "CashAllocationCode"
				PrmCashAllocationAmount	is an InternationalAmount
					default label is "CashAllocationAmount"
				PrmCashAllocationUnitsAmount	is an InternationalAmount	
					default label is "CashAllocationUnitsAmount"
				PrmCashLedgerPaymentImport		is BusinessObjectReference  
			Parameter Rules
				PrmCashAllocationCode
					required
			Action Rules
				LocalCashAllocationCode					= PrmCashAllocationCode			
				TransientCashAllocationCode				= PrmCashAllocationCode			
				TransientCashAllocationAmount			= PrmCashAllocationAmount		
				TransientCashAllocationUnitsAmount		= PrmCashAllocationUnitsAmount	
				LocalOriginatingTransaction				= PrmCashLedgerPaymentImport
				include CashAllocationCodeEdits
				if (DistributionsByCashAllocationCodeRel exists)
					confirmation required
						"DistributionsAlreadyExistForAllocationCode<PrmCashAllocationCode>;DoYouWantToContinue?"
				invoke AutoCreateDistributions	
				initialize TransientCashAllocationCode		
				initialize TransientCashAllocationAmount		
				initialize TransientCashAllocationUnitsAmount	
				
		ReopenVoidedPayment is an Instance Action  
			default label is untranslatable
			restricted
			Parameters
				PrmPostDate			is Date
				
			Action Rules
				invoke VoidPaymentDistributions CashLedgerGLDistributionsNotVoidedAndStaledatedRel	
					invoked.PrmCreateFromBatchType		= 10
					invoked.PrmVoidDate					= PrmPostDate
					invoked.PrmVoidReopen				= true									
				if (CashLedgerGLDistributionPaymentTypeRel !exists)
					invoke Create CashLedgerGLDistribution
						fill in fields from CashLedgerPayment
						invoked.CashLedgerSourceRecord					        = "CBM"
						invoked.CashLedgerGLDistribution.BankTransactionCode    = CashLedgerPayment.BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber    = CashLedgerPayment.TransactionIDNumber
						invoked.CashLedgerGLDistribution.DistributionType       = "E"
						invoked.Company                                         = CompanyBaseData.OverrideCompany
						invoked.CompanyAccountingEntity						    = CompanyBaseData.OverrideCompany.AccountingEntity
						invoked.RecordType				                        = "V"
						invoked.GLFinanceCodeBlock						        = CompanyCashCode.PaymentClearingAccount
						invoked.TransactionNumber                               = Reference
						invoked.GeneralLedgerSourceCode	                        = "VP"
						invoked.Description				                        = "VoidPayment"
						invoked.Reference				                        = TransactionNumber
						invoked.GLTransactionAmount    					        = BankCheckAmount
						invoked.DistributionToBankAmount  				        = BankCheckAmount
						invoked.Status 	 				                        = Status.Released
						invoked.PostDate				                        = PrmPostDate
						invoked.BypassStatusEdit							    = true
						invoked.TransientCreateFromBatchType                    = 9
						invoked.LocalControlDocumentNumber					    = TransactionNumber
						invoked.LocalDocumentNumber							    = TransactionNumber
						invoked.LocalPostingDate                                = PrmPostDate
						invoked.LocalExchangeDate                               = PaymentDate
						invoked.LocalGeneralLedgerEvent						    = "AP"
					invoke Create CashLedgerGLDistribution
						fill in fields from CashLedgerPayment
						invoked.CashLedgerSourceRecord					        = "CBM"
						invoked.CashLedgerGLDistribution.BankTransactionCode    = CashLedgerPayment.BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber    = CashLedgerPayment.TransactionIDNumber
						invoked.CashLedgerGLDistribution.DistributionType       = "E"
						invoked.Company                                         = CompanyBaseData.OverrideCompany
						invoked.CompanyAccountingEntity						    = CompanyBaseData.OverrideCompany.AccountingEntity
						invoked.RecordType				                        = "V"
						invoked.GLFinanceCodeBlock						        = CompanyCashCode.CashAccount
						invoked.TransactionNumber                               = Reference
						invoked.GeneralLedgerSourceCode	                        = "VP"
						invoked.Description				                        = "VoidPayment"
						invoked.Reference				                        = TransactionNumber
						invoked.GLTransactionAmount    					        = BankCheckAmount * -1
						invoked.DistributionToBankAmount  				        = BankCheckAmount * -1
						invoked.Status 	 				                        = Status.Released
						invoked.PostDate				                        = PrmPostDate
						invoked.BypassStatusEdit							    = true
						invoked.TransientCreateFromBatchType                    = 9
						invoked.LocalControlDocumentNumber					    = TransactionNumber
						invoked.LocalDocumentNumber							    = TransactionNumber
						invoked.LocalPostingDate                                = PrmPostDate
						invoked.LocalExchangeDate                               = PaymentDate
						invoked.LocalGeneralLedgerEvent						    = "AP"									
				initialize VoidDate	
				Status	= Status.Historical
				include PerformBudgetEditsForVoids

		CashLedgerPaymentPurge is a Set Action
			restricted
			Parameters
				PrmCashManagementGroup       is a CashManagementGroup
				PrmCashCode                  is a CashCode
				PrmCashCodeGroup             is a CashCodeGroup
				PrmPaymentCutOffDate         is Date
				PrmTransactionCutOffDate     is Date
				
			Parameter Rules
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"		
					LocalCashCodeGroup	= PrmCashCodeGroup
			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup
				and  ((PrmCashCode				  entered	
				and    CashCode					= PrmCashCode)
				or     PrmCashCode				  not entered)
				and  ((PrmCashCodeGroup			  entered	
				and    CashCodeGroupDetailRel     exists)
				or     PrmCashCodeGroup			  not entered)
				and    PrmPaymentCutOffDate       entered
				and    PaymentDate             <= PrmPaymentCutOffDate
				and   (Status.Canceled
				or     Status.Voided
				or     Status.Historical)
				or    (Status.Canceled and PostDate <= PrmPaymentCutOffDate))
			
			Action Rules
				Instance Rules
					invoke Purge CashLedgerGLDistributionsRel

					if(CashLedgerTransactionRel.BankTransactionCode.BankTransactionType.CashPayment)
						if(CashLedgerTransactionRel.LastElectronicPaymentSerialNumber not entered)
							display "CashLedgerTransactionRel.BankTransactionCode.BankTransactionType<CashLedgerTransactionRel.BankTransactionCode.BankTransactionType>"
							invoke Purge CashLedgerPayablesPaymentRel
						else
							if (CashLedgerTransactionRel.SummaryOption.Summarized)
								if(CashLedgerPayablesPaymentRel exists
							    and CashLedgerPayablesPaymentRel.LastElectronicPaymentSerialNumber = CashLedgerTransactionRel.LastElectronicPaymentSerialNumber
								and CashLedgerPayablesPaymentRel.PaymentDate <= PrmTransactionCutOffDate
								and CashLedgerPayablesPaymentRel.PayCurrency = Currency)
									invoke Purge CashLedgerPayablesPaymentRel
							else
								invoke Purge CashLedgerPayablesPaymentRel
					if(CashLedgerTransactionRel.BankTransactionCode.BankTransactionType.BillOfExchangePayment)
						if(PayablesBillOfExchangeRel exists)
							if(PayablesBillOfExchangeDistributionRel exists)
								invoke Purge PayablesBillOfExchangeDistributionRel
							invoke Purge PayablesBillOfExchangeRel
					invoke Purge CashLedgerTransactionPurgeRel
					invoke Purge NonPayablesReportableIncomeAdjustmentRel
					invoke Purge
					
		Purge is a Purge Action
			restricted

		ExecuteFrontEndSplitCashDistributions is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				invoke FrontEndSplitDistribtions CashLedgerGLDistribution in foreground
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashCode					= CashCode
					invoked.PrmCashLedgerSourceRecord	= "CBM"
					invoked.PrmBankTransactionCode		= CashLedgerPayment.BankTransactionCode
					invoked.PrmTransactionIDNumber		= CashLedgerPayment.TransactionIDNumber
					invoked.PrmDistributionType			= DistType.Entry

		FrontEndSplitDistributions is an Instance Action
			valid when(AllowFrontEndSplit)
			Action Rules
				invoke ExecuteFrontEndSplitCashDistributions

		DeleteFrontEndSplitDistributions is an Instance Action
			valid when(HasFrontEndSplitDistributions)
			Action Rules
				invoke DeleteFrontEndSplitDistribtions CashLedgerGLDistribution
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashCode					= CashCode
					invoked.PrmCashLedgerSourceRecord	= "CBM"
					invoked.PrmBankTransactionCode		= CashLedgerPayment.BankTransactionCode
					invoked.PrmTransactionIDNumber		= CashLedgerPayment.TransactionIDNumber
					invoked.PrmDistributionType			= DistType.Entry

		UploadToIDM is an Instance Action  
			valid when (PaymentAttachment.ValidForIDMUpload)
			Action Rules
				include IDM.MoveAttachmentsToIDM
					replace AttachmentField   with PaymentAttachment	
						
									
		MoveAttachmentsToIDM is a Set Action
			restricted
			Instance Selection
				where (PaymentAttachment.IsLocal)

			Accumulators
				InstanceCount

			Action Rules
				Instance Rules
					increment InstanceCount	

					include IDM.MoveAttachmentsToIDM
						replace AttachmentField   with PaymentAttachment			

					commit transaction

					if (InstanceCount = config.IDM_MOVE_ATTACHMENTS_LIMIT)
						end set action instance loop


	StateCycles
		PaymentProcessing is a StateCycle
		
			state field is Status
			
			Unreleased is a State
				Create is a Create Action
					Entrance Rules
						include SetCurrencyData	
						include CashPaymentEdits
						if (Reference entered)
							if (AutoNumberingAllowed)			 
								constraint (AutoNumberingAction entered)
									"CannotEnterReferenceNumber;AutoNumberingSetup"
							include CheckForDuplicates	
						else
							constraint (AutoNumberingAllowed)
								"ReferenceNumberRequired"		
								
						if (UseCashAllocationCode)	
							include CashAllocationCodeEdits	
							
					Action Rules





						if (AutoNumberingAllowed
						and Reference not entered)
							include GetAutoNumberByLevel
							invoke AutoCreate CashLedgerAutoTranNumber
								assign result to LocalCashLedgerAutoTranNumber
								invoked.CashManagementGroup			= CashManagementGroup
								invoked.CashLedgerDocumentType		= CashLedgerDocumentType.CashLedgerPayment
								invoked.OriginatingTransaction		= reference to this instance
								invoked.CreateOperator				= actor
								invoked.CreateDate					= current timestamp
								invoked.Company 					= AutoNumberByCompany
								invoked.CashCode					= AutoNumberByCashCode
								invoked.BankTransactionCode			= AutoNumberByBankTransactionCode
								invoked.DocumentCashCode			= CashCode
								invoked.DocumentBankTransactionCode	= CashLedgerPayment.BankTransactionCode
								invoked.DocumentUniqueId			= UniqueID
		
							LocalReference					= LocalCashLedgerAutoTranNumber.CashLedgerAutoTranNumber
							if (LocalCashLedgerAutoTranNumber.AutoNumberStatus.CannotBeAssignedAlreadyInUse)
								DuplicateTranNumberFound 	= true
							
							while (DuplicateTranNumberFound)
								invoke AutoCreate CashLedgerAutoTranNumber
									assign result to LocalCashLedgerAutoTranNumber
									invoked.CashManagementGroup			= CashManagementGroup
									invoked.CashLedgerDocumentType		= CashLedgerDocumentType.CashLedgerPayment
									invoked.OriginatingTransaction		= reference to this instance
									invoked.CreateOperator				= actor
									invoked.CreateDate					= current timestamp
									invoked.Company 					= AutoNumberByCompany
									invoked.CashCode					= AutoNumberByCashCode
									invoked.BankTransactionCode			= AutoNumberByBankTransactionCode
									invoked.DocumentCashCode			= CashCode
									invoked.DocumentBankTransactionCode	= CashLedgerPayment.BankTransactionCode
									invoked.DocumentUniqueId			= UniqueID
								LocalReference					= LocalCashLedgerAutoTranNumber.CashLedgerAutoTranNumber
								DuplicateTranNumberFound		= false
								if (LocalCashLedgerAutoTranNumber.AutoNumberStatus.CannotBeAssignedAlreadyInUse)
									DuplicateTranNumberFound	= true
								
							Reference	= LocalReference	
							
					Exit Rules
						if (TransientCashAllocationCode entered)	
							invoke AutoCreateDistributions			
						initialize TransientCashAllocationCode		
						initialize TransientCashAllocationAmount	
						initialize TransientCashAllocationUnitsAmount	
						initialize UseCashAllocationCode	
												
				Update is an Update Action

					Entrance Rules
						constraint (!BudgetEditInProgress)		
							"CannotUpdate;BudgetEditInProgress"
						if (UseCashAllocationCode)	
							include CashAllocationCodeEdits	
					Action Rules
						if (Reference changed)
							constraint (Reference entered)
								"ReferenceNumberRequired" 
							constraint (!AutoNumberingAllowed)
								"CannotChangeReferenceNumber;AutoNumberingSetup"		 
							if (!AutoNumberingAllowed)
								include CheckForDuplicates
						constraint (PayablesData.PayGroup = old PayablesData.PayGroup)				
							"PayGroupCannotBeChanged" 	
						include SetCurrencyData
						include CashPaymentEdits
						if (TransientCashAllocationCode entered)	
							invoke AutoCreateDistributions	
							
					Exit Rules	
						include CheckForRelatedChanges

						initialize TransientCashAllocationCode		
						initialize TransientCashAllocationAmount
						initialize TransientCashAllocationUnitsAmount	
						
				Delete is a Delete Action
					valid when (IsUnreleased) 
					Entrance Rules
						constraint (!BudgetEditInProgress)		
							"CannotDelete;BudgetEditInProgress"
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							invoke Delete HeaderBudgetEditErrorRel
							invoke Delete DistributionBudgetEditErrorRel 
						if (CashLedgerMassReleaseResult entered)	
							if (CashLedgerTransactionError set exists)
								invoke Delete CashLedgerTransactionError set
						if (DeleteCashRequirementsErrorRel exists)
							invoke Purge DeleteCashRequirementsErrorRel
					Action Rules
						if (ImportInProcess)
							confirmation required
								"DeletingAPartiallyImportedRecordWillDeleteAllRelatedCashPaymentImportRecords"
							invoke DeleteAllRelatedRecords CashLedgerPaymentImportInErrorRel
						invoke Delete CashLedgerGLDistributionsWithEntryTypeRel
						if (Reference is numeric)
							if (CashLedgerAutoTranNumbersRel exists)
								invoke DocumentDeleteUpdate CashLedgerAutoTranNumbersRel

				BatchApprovalRelease is a Set Action		
					default label is untranslatable
					restricted
					Parameters
						PrmCashManagementGroup			is a CashManagementGroup
						PrmCashLedgerBatchApproval		is a CashLedgerBatchApproval
					Instance Selection
						where (CashManagementGroup		= PrmCashManagementGroup
						and    CashLedgerBatchApproval	= PrmCashLedgerBatchApproval
						and    !BudgetEditInProgress						
						and    Status.Unreleased)
					Sort Order is ByCashLedgerBatchApproval
					Action Rules
						Instance Rules
							invoke Unreleased.Release

				Release is an Instance Action
					valid when (CanRelease) 
					Entrance Rules
						constraint (!BudgetEditInProgress)		
							"CannotRelease;BudgetEditInProgress"
						if (CashLedgerPayment.BankTransactionCode.PaymentOutputOption.ElectronicFile
						or CashLedgerPayment.BankTransactionCode.PaymentOutputOption.Swift
						or CashLedgerPayment.BankTransactionCode.PaymentOutputOption.WireTransfer)
							constraint (ACHPrenotification.Accepted) 
								"RecordCannotBeReleasedIfPrenoteStatusIsNotAccepted" 
						constraint (DistributionTotal > 0)
							"TotalDistributionsMustBeAPositiveAmount"	   
						if (UsingBankCurrencyPosting)	
							constraint (DistributionTotal = BankAmount)
								"Total_\DistributionsDoNotEqualBankAmount"      
						else
							constraint (DistributionTotal = BankCheckAmount)
								"Total_\DistributionsDoNotEqualHeaderAmount"       
						constraint (CompanyCashCode.PaymentClearingAccount entered) 
							"CannotRelease,_\Clearing_\AccountsNotSetUpIn_\CompanyCashCode"	
						if(ExecuteFrontEndSplits)
							invoke ExecuteFrontEndSplitCashDistributions
						include CheckForDuplicates
						include ReportableIncomeEdits	
						if (CashCode.EditAvailableFunds
						or  CashCode.RestrictedFunds)
							include PerformFundAmountEdit
							constraint (ExceedesCashCodeFundBalanceRel !exists)
								"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
#ifdef module cam
						if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
							include PerformCustodialAmountEdit
							constraint (ExceedsCustodialAccountBalanceRel !exists)
								"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
#endif

					Action Rules
						LocalActionUnreleaseToRelease	= true
						include PerformBudgetEditsForApprovalOrReleaseOrCancel


				ReleaseFromImport is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						PrmInterfaceAsPosted	is Boolean
						PrmJournalizeGroup		is like JournalizeGroup	
						PrmBypassCashFundUpdate is Boolean	
						PrmBypassFrontEndSplit	is Boolean
					Entrance Rules
						if (CashLedgerPayment.BankTransactionCode.PaymentOutputOption.ElectronicFile
						or  CashLedgerPayment.BankTransactionCode.PaymentOutputOption.Swift
						or  CashLedgerPayment.BankTransactionCode.PaymentOutputOption.WireTransfer)
							constraint (ACHPrenotification.Accepted) 
								"RecordCannotBeReleasedIfPrenoteStatusIsNotAccepted" 
						constraint (DistributionTotal > 0)
							"TotalDistributionsMustBeAPositiveAmount"	   
						if (UsingBankCurrencyPosting)	
							constraint (DistributionTotal = BankAmount)
								"Total_\DistributionsDoNotEqualBankAmount"      
						else
							constraint (DistributionTotal = BankCheckAmount)
								"Total_\DistributionsDoNotEqualHeaderAmount"       
						constraint (CompanyCashCode.PaymentClearingAccount entered) 
							"CannotRelease,_\Clearing_\AccountsNotSetUpIn_\CompanyCashCode"	
						if(!PrmBypassFrontEndSplit 
						and ExecuteFrontEndSplits)
							invoke ExecuteFrontEndSplitCashDistributions
						include CheckForDuplicates
						include ReportableIncomeEdits	
						if (!PrmBypassCashFundUpdate	
						and (CashCode.EditAvailableFunds
						or  CashCode.RestrictedFunds))
							include PerformFundAmountEdit
							constraint (ExceedesCashCodeFundBalanceRel !exists)
								"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
#ifdef module cam
						if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
							include PerformCustodialAmountEdit
							constraint (ExceedsCustodialAccountBalanceRel !exists)
								"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
#endif

					Action Rules
						LocalInterfaceAsPosted			= PrmInterfaceAsPosted
						LocalBypassCashFundUpdate		= PrmBypassCashFundUpdate	
						LocalActionUnreleaseToRelease	= true
						LocalJournalizeGroup			= PrmJournalizeGroup
						if (LocalInterfaceAsPosted)	
							invoke FinalRelease
						else	
							include PerformBudgetEditsForApprovalOrReleaseOrCancel


				ReleaseFromPendingStopPaymentApproval is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						if (first CashLedgerGLDistributionsRel.Status.Unreleased)
							include CreateOffsetDistribution
						make transition to Released

				ReleaseFromMassRelease is an Instance Action	
					default label is untranslatable
					restricted


					Entrance Rules
						constraint (DistributionTotal > 0)
							"TotalDistributionsMustBeAPositiveAmount"	   
						if (UsingBankCurrencyPosting)	
							constraint (DistributionTotal = BankAmount)
								"Total_\DistributionsDoNotEqualBankAmount"      
						else
							constraint (DistributionTotal = BankCheckAmount)
								"Total_\DistributionsDoNotEqualHeaderAmount"       
						constraint (CompanyCashCode.PaymentClearingAccount entered) 
							"CannotRelease,_\Clearing_\AccountsNotSetUpIn_\CompanyCashCode"	
						include CheckForDuplicates
						if(ExecuteFrontEndSplits)
							invoke ExecuteFrontEndSplitCashDistributions
						if (CashCode.EditAvailableFunds
						or  CashCode.RestrictedFunds)
							include PerformFundAmountEdit
							constraint (ExceedesCashCodeFundBalanceRel !exists)
								"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
#ifdef module cam
						if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
							include PerformCustodialAmountEdit
							constraint (ExceedsCustodialAccountBalanceRel !exists)
								"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
#endif

					Action Rules


						LocalActionUnreleaseToRelease	= true
						include PerformBudgetEditsForApprovalOrReleaseOrCancel

	
				FinalRelease is an Instance Action		//	"Unreleased" State
					default label is untranslatable
					restricted	
					Entrance Rules
					Action Rules
						BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
						if (CashLedgerMassReleaseResult entered	
						and CashLedgerTransactionError set exists)
							invoke Delete CashLedgerTransactionError set


						if (ReissueOriginalIdentifier entered)
							include StopPaymentForReissueOriginalIdentifier
						else
							include CreateOffsetDistribution



							make transition to Released
					Exit Rules
						if (LocalInterfaceAsPosted)
							invoke InterfaceAsPosted ReleasedDistributionsRel
						include ReleaseExitRules


				SubmitForApproval is an Instance Action
					completion message is "ApproveCashLedgerPaymentHasBeenSubmittedToTheQueueForProcessing"
					valid when (CanSubmitForApproval)
					Parameters
						PrmApprovalCode		is a ApprovalCode
							default label is "ApprovalCode"
						PrmCommentText		is a CommentText
							default label is "Comment"

					Parameter Rules
						PrmApprovalCode
							initial value is DerivedAutoAssignedRoutingCode
							default to DerivedAutoAssignedRoutingCode
							if (!CashManagementGroup.ApprovalCodesNotUsedForPayments)
								required
									"ApprovalCodeIsRequired"
							constraint (PrmApprovalCode.ApprovalCodeUsesMaximumAmounts)
								"ApprovalCodeMustBeForNonBatchedCashLedgerPayments"

					Entrance Rules
						constraint (!BudgetEditInProgress)		
							"CannotSubmitForApproval;BudgetEditInProgress"
						if (CashLedgerPayment.BankTransactionCode.PaymentOutputOption.ElectronicFile
						or  CashLedgerPayment.BankTransactionCode.PaymentOutputOption.Swift
						or	CashLedgerPayment.BankTransactionCode.PaymentOutputOption.WireTransfer)
							constraint (ACHPrenotification.Accepted) 
								"RecordCannotBeReleasedIfPrenoteStatusIsNotAccepted" 
						constraint (DistributionTotal > 0)
							"TotalDistributionsMustBeAPositiveAmount"	   
						if (UsingBankCurrencyPosting)	
							constraint (DistributionTotal = BankAmount)
								"Total_\DistributionsDoNotEqualBankAmount"      
						else	
							constraint (DistributionTotal = BankCheckAmount)
								"Total_\DistributionsDoNotEqualHeaderAmount"       
						constraint (CompanyCashCode.PaymentClearingAccount entered) 
							"CannotRelease,_\Clearing_\AccountsNotSetUpIn_\CompanyCashCode"	
						include CheckForDuplicates
						if(ExecuteFrontEndSplits)
							invoke ExecuteFrontEndSplitCashDistributions
						if (CashCode.EditAvailableFunds
						or  CashCode.RestrictedFunds)
							include PerformFundAmountEdit
							constraint (ExceedesCashCodeFundBalanceRel !exists)
								"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
#ifdef module cam
						if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
							include PerformCustodialAmountEdit
							constraint (ExceedsCustodialAccountBalanceRel !exists)
								"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
#endif

					Action Rules
						CommentText		+= PrmCommentText
						if (!CashManagementGroup.ApprovalCodesNotUsedForPayments)
							ApprovalCode	 = PrmApprovalCode
							constraint (ApprovalCode.HasApprovalLevels) 
								"CannotComplete;TheApprovalCodeHasNoApprovalLevels"
							constraint (!ApprovalCode.HasTeamWithNoMembers) 
								"CannotComplete;TheApprovalCodeHasATeamWithNoMembers"
							constraint (!ApprovalCode.HasInvalidEscalations)
								"CannotComplete:TheApprovalCodeHasInvalidEscalationSettings"
							constraint (!ApprovalCode.HasInactiveResources)
								"CannotComplete;TheApprovalCodeHasInactiveResources"
							if (CashManagementGroup.EnforceProcessorCannotBeApprover) 
								LocalApprover = actor.agent(Employee).Employee
								constraint (!ApprovalCodeResourceByResourceRel exists)
									"PersonSubmittingPaymentCannotBeTheApprover"
								OriginalSubmittingResource = actor 

						LocalActionSubmitForApproval = true
						include PerformBudgetEditsForApprovalOrReleaseOrCancel



				FinalApproval is an Instance Action
					default label is untranslatable
					restricted	
					Action Rules
						if (!CashManagementGroup.ApprovalCodesNotUsedForPayments)
							initialize ApprovalLevel
							initialize Approver
							initialize ApproverTeam	
							include GetNextApprovalLevel
							if (ApprovalCode.InitialApproverSelectionMethod.SpecificApprovalLevel)
								ApprovalLevel	= ApprovalCode.InitialApprovalLevel.ApprovalLevel
							else
								ApprovalLevel	= LocalApprovalLevel
							Approver 			= LocalApprover
							ApproverTeam		= LocalApproverTeam
						include InitiateApprovalProcessFlow
						make transition to PendingApproval

				RemoveFromBatch is an Instance Action
					valid when (IsBatchApproved)
					Action Rules
						initialize CashLedgerBatchApproval

				Cancel is an Instance Action
					valid when (!ImportInProcess)
					confirmation required
					Parameters
						PrmCommentText	is a CommentText
					Action Rules
						constraint (!BudgetEditInProgress)		
							"CannotCancel;BudgetEditInProgress"
						CommentText	= PrmCommentText
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							invoke Delete HeaderBudgetEditErrorRel
							invoke Delete DistributionBudgetEditErrorRel
						invoke Delete CashLedgerGLDistributionsRel
						make transition to Canceled
					Exit Rules												
						if (CashLedgerBatchApproval entered
						and !CashLedgerBatchApproval.Status.Rejected)
							initialize CashLedgerBatchApproval

			PendingApproval is a State
				Update is an Update Action
					valid when (AllowUpdateOnApprove)
					Entrance Rules
					Action Rules
						constraint (PayablesData.PayGroup = old PayablesData.PayGroup)
							"PayGroupCannotBeChanged"
						include SetCurrencyData
						include CashPaymentEdits
					Exit Rules	
						include CheckForRelatedChanges

				BatchApprove is a Set Action		
					default label is untranslatable
					restricted
					Parameters
						PrmCashManagementGroup			is a CashManagementGroup		
						PrmCashLedgerBatchApproval		is a CashLedgerBatchApproval	
						PrmApprovalCode					is an ApprovalCode
					Instance Selection		
						where (CashManagementGroup		= PrmCashManagementGroup
						and    CashLedgerBatchApproval	= PrmCashLedgerBatchApproval
						and    !BudgetEditInProgress						
						and    Status.PendingApproval)
					Sort Order is ByCashLedgerBatchApproval		
					Action Rules
						Instance Rules
							ApprovalCode	= PrmApprovalCode
							if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit		
							or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
								make transition to Unreleased
								invoke Unreleased.Release
							else
								invoke PendingApproval.Approve

				BatchApprovalApprove is a Set Action		
					default label is untranslatable
					restricted
					Parameters
						PrmCashManagementGroup			is a CashManagementGroup
						PrmCashLedgerBatchApproval		is a CashLedgerBatchApproval
					Instance Selection
						where (CashManagementGroup		= PrmCashManagementGroup
						and    CashLedgerBatchApproval	= PrmCashLedgerBatchApproval
						and    Status.PendingApproval)
					Sort Order is ByCashLedgerBatchApproval
					Action Rules
						Instance Rules
							if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit		
							or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
								make transition to Unreleased
								invoke Unreleased.Release
							else
								invoke PendingApproval.Approve

				Approve is an Instance Action
					default label is untranslatable
					restricted
				    Entrance Rules
				        constraint (DistributionTotal > 0)
				        	"TotalDistributionsMustBeAPositiveAmount"
						if (UsingBankCurrencyPosting)	
							constraint (DistributionTotal = BankAmount)
								"Total_\DistributionsDoNotEqualBankAmount"      
						else				       
				        	constraint (DistributionTotal = BankCheckAmount)
				        		"Total_\DistributionsDoNotEqualHeaderAmount"
						if (CashCode.EditAvailableFunds
						or  CashCode.RestrictedFunds)
							include PerformFundAmountEdit
							constraint (ExceedesCashCodeFundBalanceRel !exists)
								"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
#ifdef module cam
						if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
							include PerformCustodialAmountEdit
							constraint (ExceedsCustodialAccountBalanceRel !exists)
								"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
#endif

					Action Rules
						BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
						if (ReissueOriginalIdentifier entered)
							include StopPaymentForReissueOriginalIdentifier
						else
							include CreateOffsetDistribution
							make transition to Released

						initialize ApprovalLevel
						initialize Approver
						initialize ApproverTeam	

					Exit Rules		
						include ReleaseExitRules
						
				Reject is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						include RejectBudgetCommitments	
						if (CashCode.CancelRejectedPayments)
							invoke Delete CashLedgerGLDistributionsRel
							make transition to Canceled
						else 
							make transition to Unreleased
						
						initialize ApprovalLevel
						initialize Approver
						initialize ApproverTeam	
		
				RejectWithReasonCode is an Instance Action
					default label is untranslatable
					restricted
					subject is RejectCashLedgerPayment
					reason code required
					action comment required
		
					Action Rules
						include RejectBudgetCommitments	
						if (CashCode.CancelRejectedPayments)
							invoke Delete CashLedgerGLDistributionsRel
							make transition to Canceled
						else
							make transition to Unreleased
						
						initialize ApprovalLevel
						initialize Approver
						initialize ApproverTeam	
		
					Exit Rules
						invoke Create CashLedgerPaymentReasonCodeUsage
							invoked.CashManagementGroup			= CashManagementGroup
							invoked.CashCode					= CashCode
							invoked.CashLedgerPayment			= CashLedgerPayment
							invoked.ReasonCode					= reason code
							invoked.Description					= reason code.Description
							invoked.Type						= 1 
							invoked.Comment						= action comment	
						
				ManualApprove is an Instance Action
					valid when (!IsBatchApproved)
					confirmation required
						"ThisWillBypassTheProcessFlowApprovalProcess;DoYouWantToContinue?"
				    Entrance Rules
				        constraint (DistributionTotal > 0)
				        	"TotalDistributionsMustBeAPositiveAmount"
						if (UsingBankCurrencyPosting)	
							constraint (DistributionTotal = BankAmount)
								"Total_\DistributionsDoNotEqualBankAmount"      
						else				       
				        	constraint (DistributionTotal = BankCheckAmount)
				        		"Total_\DistributionsDoNotEqualHeaderAmount"
						if (CashCode.EditAvailableFunds
						or  CashCode.RestrictedFunds)
							include PerformFundAmountEdit
							constraint (ExceedesCashCodeFundBalanceRel !exists)
								"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
#ifdef module cam
						if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
							include PerformCustodialAmountEdit
							constraint (ExceedsCustodialAccountBalanceRel !exists)
								"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
#endif

					Action Rules
						if (ReissueOriginalIdentifier entered)
							include StopPaymentForReissueOriginalIdentifier
						else
							include CreateOffsetDistribution
							make transition to Released

						initialize ApprovalLevel
						initialize Approver
						initialize ApproverTeam	

						cancel CashLedgerPaymentApproval process
					Exit Rules		
						include ReleaseExitRules	
								
				ManualReject is an Instance Action
					valid when (!IsBatchApproved)
					subject is RejectCashLedgerPayment
					Parameters
						PrmComment		is Alpha size up to 500
					Action Rules
						if (CashManagementGroup.RejectCashLedgerPaymentReasonCodeRequired)
							constraint (reason code entered)
								"ReasonCodeIsRequiredForRejectingCashLedgerPaymentRequests"
						include RejectBudgetCommitments	
						if (CashCode.CancelRejectedPayments)
							invoke Delete CashLedgerGLDistributionsRel
							make transition to Canceled
						else
							make transition to Unreleased
					
						initialize ApprovalLevel
						initialize Approver
						initialize ApproverTeam	
						
						cancel CashLedgerPaymentApproval process
		
					Exit Rules
						invoke Create CashLedgerPaymentReasonCodeUsage
							invoked.CashManagementGroup			= CashManagementGroup
							invoked.CashCode					= CashCode
							invoked.CashLedgerPayment			= CashLedgerPayment
							invoked.ReasonCode					= reason code
							invoked.Description					= reason code.Description
							invoked.Type						= 1 
							invoked.Comment						= PrmComment	

				RemoveFromBatch is an Instance Action
					valid when (IsBatchApproved)
					Action Rules
						initialize CashLedgerBatchApproval
						make transition to Unreleased
						
				Cancel is an Instance Action						
					valid when (IsBatchApproved)
					confirmation required
						"ThisWillPermenantlyCancelThePaymentRecord;DoYouWantToContinue?"
					Parameters
						PrmCommentText	is a CommentText
					Action Rules
						constraint (!BudgetEditInProgress)		
							"CannotCancel;BudgetEditInProgress"
			            make transition to Unreleased
            			invoke Unreleased.Cancel
							invoked.PrmCommentText = PrmCommentText

				ChangePaymentProcessingHold is an Instance Action		
					confirmation required
						"ThePaymentProcessingHoldStatusWillBeChangedForSelectedPayments;DoYouWantToContinue?"
					Action Rules
						if (PaymentProcessingHold)
							PaymentProcessingHold = false
						else	
							PaymentProcessingHold = true

			Released is a State








				Cancel is an Instance Action

					Parameters
						PrmPostDate 	is Date
						PrmCommentText	is a CommentText
					Parameter Rules
						PrmPostDate
							required
								"PostDateIsRequired"	
					Entrance Rules
						include VerifyCBMonitor
					Action Rules						
						CommentText					= PrmCommentText					
						PostDate					= PrmPostDate
						if (UseCancelSetAction)	
							invoke CancelPaymentDistributionsSetAction CashLedgerGLDistribution
				            	invoked.PrmCashManagementGroup 		= CashManagementGroup	
				                invoked.PrmCashCode					= CashCode
				                invoked.PrmCashLedgerSourceRecord	= "CBM"
				                invoked.PrmBankTransactionCode 		= CashLedgerPayment.BankTransactionCode
				                invoked.PrmTransactionIDNumber 		= CashLedgerPayment.TransactionIDNumber
				                invoked.PrmLastDistributionSequence	= LastDistributionSequence	
						else
							LocalLastDistributionSequence			= LastDistributionSequence	
							invoke CancelPaymentDistributions CashLedgerGLDistributionsSeqNbrRel
						LocalActionReleaseToCancel 	= true
						include PerformBudgetEditsForApprovalOrReleaseOrCancel                                         


				FinalCancel is an Instance Action
					default label is untranslatable
					restricted	
					Action Rules
						BudgetEditProcessing 	= BudgetEditProcessing.NotInProcessing
						make transition to Canceled
					Exit Rules
						include ReleaseExitRules

	
				ChangePaymentProcessingHold is an Instance Action
					confirmation required
						"ThePaymentProcessingHoldStatusWillBeChangedForSelectedPayments;DoYouWantToContinue?"
					Action Rules
						if (PaymentProcessingHold)
							PaymentProcessingHold = false
						else	
							PaymentProcessingHold = true
																





						
			
			SelectedForPayment is a State
		
			SystemGenerated is a State
				CreateClosingDistribsFromBatch is an Instance Action  
					default label is untranslatable
					restricted
					Parameters
						PrmCodeBlock         		is like TransactionCodeBlock
						PrmDescription				is a  Description 
						PrmAccountingEntity			is like ToAccountingEntity
						PrmJournalizeGroup       	is like JournalizeGroup
						PrmCreateFromBatchType		is Numeric 2  
						PrmAccountType				is Numeric 1
							States
								Expense				value is 1	
								Cash				value is 2	
								GainLoss			value is 3
						PrmDefaultSystemAccount		is Numeric 1  
							States
								None				value is 0
								UnrealizedGainLoss	value is 1
								RealizedGainLoss	value is 2								 		
						PrmProcessGroup			 	is like PayablesProcessGroup
					Local Fields

						GainLossDate				is an ExchangeDate
						GainLossAmount				is a CurrencyAmount
						LocalBoolean				is Boolean
					Action Rules
						LocalAccountType			= PrmAccountType
						if (!CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
							if (PrmAccountType.Expense)
								if (UsingBankCurrencyPosting)	
									LocalFinanceCurrencyAmount = BankBaseAmount.BasePaymentAmount
								else		
									LocalFinanceCurrencyAmount = CompanyBaseData.BasePaymentAmount	
							if (PrmAccountType.Cash)

								LocalFinanceCurrencyAmount = BaseNetPaymentAmount
								include ReverseBaseDistributionAmounts
							invoke Create CashLedgerGLDistribution
								fill in fields from CashLedgerPayment
								if (PrmAccountType.Expense)
									if (UsingBankCurrencyPosting)	
										invoked.GLTransactionAmount    					 = BankAmount 
										invoked.DistributionToBankAmount  				 = BankAmount 
									else
										invoked.GLTransactionAmount    					 = BankCheckAmount 
										invoked.DistributionToBankAmount  				 = BankCheckAmount 
									invoked.GLBaseAmount					 		 	 = LocalFinanceCurrencyAmount
								if (PrmAccountType.Cash)
									invoked.GLTransactionAmount    					 	= BankCheckAmount * -1
									invoked.DistributionToBankAmount  					= BankCheckAmount * -1
									invoked.GLBaseAmount					 		 	= LocalFinanceCurrencyAmount
									invoked.LocalPaymentCloseCashAccount				= true	
								invoked.CashLedgerSourceRecord						 = "CBM"
								invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
								invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerPayment.TransactionIDNumber
								invoked.CashLedgerGLDistribution.DistributionType    = "E"
								invoked.Company                                      = CompanyBaseData.OverrideCompany
								invoked.RecordType									 = CashLedgerGLDistributionsRel.RecordType.APCashLedgerPaymentDistribution  
								invoked.Status 	 									 = Status.Released
								invoked.Reference                                    = TransactionNumber
								invoked.Description									 = PrmDescription
								invoked.PostDate									 = PaymentDate
								invoked.GLFinanceCodeBlock							 = PrmCodeBlock
								invoked.GeneralLedgerSourceCode						 = "AP"
								invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
								invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
								invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
								invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
								invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType
								invoked.GLTJournalizeGroup                           = PrmJournalizeGroup  
								invoked.LocalControlDocumentNumber					 = TransactionNumber
								invoked.LocalDocumentNumber							 = TransactionNumber
								invoked.LocalExchangeDate							 = PaymentDate
								invoked.LocalPostingDate							 = PaymentDate
								invoked.LocalGeneralLedgerEvent						 = "AP"
								invoked.LocalCurrencyTable							 = CurrencyTable
								invoked.BypassStatusEdit							 = true
							if (PrmAccountType.Expense	
							and UsingBankCurrencyPosting)
								include SetupGainLossAccountForBankCurrency
								LocalAmount					= BankAmount * -1 	
								LocalFinanceCurrencyAmount 	= BankBaseAmount.BasePaymentAmount
								LocalCreateFromBatchType	= PrmCreateFromBatchType
								LocalJournalizeGroup		= PrmJournalizeGroup
								include ReverseBaseDistributionAmounts
								include CreateBankCurrencyGainLossDistribution
						else
							invoke UpdateRemainingCommittedAmount CashCodeFundEditRel
							if (PrmAccountType.Cash)
								LocalRecordType = CashLedgerDistribRecordType.CashLedgerPaymentDistribution
							else
								LocalRecordType = CashLedgerDistribRecordType.OffsetCashLedgerPaymentDistribution

							if (instance count of CashLedgerPaymentDistributionsRel > PaymentOffsetBackgroundDistQty)	
								LocalRunProgram 	= RunProgram.PaymentClosing
								LocalProcessGroup	= PrmProcessGroup
								LocalAsyncId 		= PayablesProcessingMonitorRel.AsyncId
								invoke CreateClosingDistribsBackground CashLedgerGLDistribution
									run after LocalAsyncId
									assign async action request id to LocalAsyncId
									invoked.PrmCashManagementGroup			= CashManagementGroup
									invoked.PrmCashCode						= CashCode
									invoked.PrmCashLedgerPayment			= CashLedgerPayment
									invoked.PrmCodeBlock         			= PrmCodeBlock
									invoked.PrmTransactionNumber			= TransactionNumber
									invoked.PrmPaymentDate					= PaymentDate
									invoked.PrmDescription					= PrmDescription
									invoked.PrmJournalizeGroup       		= PrmJournalizeGroup
									invoked.PrmCreateFromBatchType			= PrmCreateFromBatchType
									invoked.PrmAccountType					= PrmAccountType
									invoked.PrmRecordType					= LocalRecordType
									invoked.PrmPayGroup						= PayablesData.PayGroup

								invoke Update PayablesProcessingMonitorRel
									invoked.AsyncId		= LocalAsyncId

							else
								for each CashLedgerGLDistributionFundAcctRel

									LocalFinanceCurrencyAmount					= each.GLBaseAmount
									include ReverseBaseDistributionAmounts

									if (PrmAccountType.Cash)
										initialize LocalCalculateCashFinanceStructure
										LocalCalculateCashFinanceStructure.InputCashManagementGroup					= each.CashManagementGroup
										LocalCalculateCashFinanceStructure.InputCashCode							= each.CashCode
										LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord				= each.CashLedgerSourceRecord
										LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution			= each.CashLedgerGLDistribution
										LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock					= each.CashLedgerGLDistribution.GLFinanceCodeBlock
										LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType		= CashLedgerFinanceStructureType.CashCodeDistribution
										LocalCalculateCashFinanceStructure.InputFinanceCodeBlock					= PrmCodeBlock
										LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

									invoke Create CashLedgerGLDistribution
										fill in fields from each
										invoked.CashLedgerSourceRecord						 = "CBM"
										invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerPayment.BankTransactionCode
										invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerPayment.TransactionIDNumber
										invoked.CashLedgerGLDistribution.DistributionType    = "E"
										invoked.Company                                      = CompanyBaseData.OverrideCompany
										invoked.RecordType									 = CashLedgerGLDistributionsRel.RecordType.APCashLedgerPaymentDistribution  
										invoked.Status 	 									 = Status.Released
										invoked.Reference                                    = TransactionNumber
										invoked.Description									 = PrmDescription
										invoked.PostDate									 = PaymentDate
										if (PrmAccountType.Cash)
											invoked.GLFinanceCodeBlock						 = LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock
										else
											invoked.GLFinanceCodeBlock						 = each.GLFinanceCodeBlock
										invoked.GeneralLedgerSourceCode						 = "AP"
										invoked.GLTransactionAmount    					     = each.GLTransactionAmount * -1
										invoked.DistributionToBankAmount  				     = each.GLTransactionAmount * -1
										invoked.GLBaseAmount					 		 	 = LocalFinanceCurrencyAmount
										invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType
										invoked.GLTJournalizeGroup                           = PrmJournalizeGroup  
										invoked.LocalControlDocumentNumber					 = TransactionNumber
										invoked.LocalDocumentNumber							 = TransactionNumber
										invoked.LocalExchangeDate							 = PaymentDate
										invoked.LocalPostingDate							 = PaymentDate
										invoked.LocalGeneralLedgerEvent						 = "AP"
										invoked.LocalCurrencyTable							 = CurrencyTable
										invoked.BypassStatusEdit							 = true

									if (PrmAccountType.Cash)
										LocalToAccountingEntity	= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
										if (CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
											LocalAccountingUnit			= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
										else
											LocalFinanceDimension1		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1









										invoke Create CashCodeFundConsolidatedUpdate
											invoked.CashManagementGroup		= CashManagementGroup
											invoked.PayGroup				= PayablesData.PayGroup
											invoked.CashCode				= CashCode
											invoked.AccountingEntity		= LocalToAccountingEntity
											invoked.AccountingUnit			= LocalAccountingUnit
											invoked.FinanceDimension1		= LocalFinanceDimension1
											invoked.PostedAmount			= each.GLTransactionAmount * -1
											if (CashCodeFundEditByFundRel exists)
												invoked.CommittedAmount		= each.GLTransactionAmount * -1

						if (PrmAccountType.Cash)
							if (UsingBankCurrencyPosting)	
								LocalAmount					= BankCheckAmount 				
								LocalFinanceCurrencyAmount 	= BaseNetPaymentAmount	
								LocalCreateFromBatchType	= PrmCreateFromBatchType
								LocalJournalizeGroup		= PrmJournalizeGroup
								include CreateBankCurrencyGainLossDistribution
							else		
								if (CompanyBaseData.BasePaymentAmount.FunctionalAmount.EnteredCurrencyAmount != BaseNetPaymentAmount.FunctionalAmount.EnteredCurrencyAmount		
								or  (BaseNetPaymentAmount.AlternateAmount.EnteredCurrencyAmount entered
								and  CompanyBaseData.BasePaymentAmount.AlternateAmount.EnteredCurrencyAmount != BaseNetPaymentAmount.AlternateAmount.EnteredCurrencyAmount)
								or  (BaseNetPaymentAmount.AlternateAmount2.EnteredCurrencyAmount entered
								and  CompanyBaseData.BasePaymentAmount.AlternateAmount2.EnteredCurrencyAmount != BaseNetPaymentAmount.AlternateAmount2.EnteredCurrencyAmount)
								or  (BaseNetPaymentAmount.AlternateAmount3.EnteredCurrencyAmount entered
								and  CompanyBaseData.BasePaymentAmount.AlternateAmount3.EnteredCurrencyAmount != BaseNetPaymentAmount.AlternateAmount3.EnteredCurrencyAmount)
								or  (BaseNetPaymentAmount.ReportAmount1.EnteredCurrencyAmount entered
								and  CompanyBaseData.BasePaymentAmount.ReportAmount1.EnteredCurrencyAmount != BaseNetPaymentAmount.ReportAmount1.EnteredCurrencyAmount)
								or  (BaseNetPaymentAmount.ReportAmount2.EnteredCurrencyAmount entered
								and  CompanyBaseData.BasePaymentAmount.ReportAmount2.EnteredCurrencyAmount != BaseNetPaymentAmount.ReportAmount2.EnteredCurrencyAmount)
								or  (BaseNetPaymentAmount.ReportAmount3.EnteredCurrencyAmount entered
								and  CompanyBaseData.BasePaymentAmount.ReportAmount3.EnteredCurrencyAmount != BaseNetPaymentAmount.ReportAmount3.EnteredCurrencyAmount)
								or  (BaseNetPaymentAmount.ReportAmount4.EnteredCurrencyAmount entered
								and  CompanyBaseData.BasePaymentAmount.ReportAmount4.EnteredCurrencyAmount != BaseNetPaymentAmount.ReportAmount4.EnteredCurrencyAmount)
								or  (BaseNetPaymentAmount.ReportAmount5.EnteredCurrencyAmount entered
								and  CompanyBaseData.BasePaymentAmount.ReportAmount5.EnteredCurrencyAmount != BaseNetPaymentAmount.ReportAmount5.EnteredCurrencyAmount))
									include CheckForGainLoss  
				
				PaymentCloseFromBatch is an Instance Action  
					default label is untranslatable
					restricted
					Action Rules
						make transition to Historical	

			Canceled is a State
				Entrance Rules
					if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
					and CashCode.EditAvailableFunds)
						invoke CancelCommittedFunds CashCodeFundEditRel
#ifdef module cam
					if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
						for each CustodialAccountEditRel
							LocalFinanceDimension10 = each.FinanceDimension10
							LocalAccountingEntity = each.AccountingEntity
							if (PayablesData.Vendor = CustodialDetailAmountRel.CustodialAccountManagement.Vendor)
								LocalActivityType = 10
							else
								LocalActivityType = 6
							invoke Create CustodialActivity
								invoked.FinanceEnterpriseGroup  	 = CashManagementGroup
								invoked.CustodialActivity.CustodialAccountManagement	 = CustodialDetailAmountRel.CustodialAccountManagement
								invoked.CustodialPosting			 = LocalFinanceDimension10
								invoked.ActivityDate				 = PostDate 		 
								invoked.ActivityType				 = LocalActivityType
								invoked.DocumentNumber				 = Reference
								invoked.Description 				 = Description
								invoked.Amount						 = each.CommittedAmount
								invoked.CustodialCashCode			 = CashCode
								invoked.CustodialTransactionCode	 = CashLedgerPayment.BankTransactionCode
								invoked.CashLedgerPaymentID			 = CashLedgerPayment.TransactionIDNumber
						invoke CancelDisbursements CustodialAccountEditRel
#endif

			PendingStopPaymentApproval is a State
				MoveToUnreleased is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						make transition to Unreleased
			
				RejectPendingStopPayment is an Instance Action
					default label is untranslatable
					restricted
					Action Rules


						make transition to Unreleased					

			Historical is a State
				ReinstateVoidedPayment is an Instance Action  
					default label is untranslatable
					restricted
					Parameters
						PrmJournalizeGroup       	is like JournalizeGroup
						PrmCreateFromBatchType		is Numeric 2 
						PrmVoidDate					is Date
						
					Action Rules
						invoke VoidPaymentDistributions CashLedgerGLDistributionsNotVoidedRel	
							invoked.PrmJournalizeGroup       	= PrmJournalizeGroup
							invoked.PrmCreateFromBatchType		= PrmCreateFromBatchType
							invoked.PrmVoidDate					= PrmVoidDate
						if (CashLedgerGLDistributionPaymentTypeRel !exists)
							invoke Create CashLedgerGLDistribution
								fill in fields from CashLedgerPayment
								invoked.CashLedgerSourceRecord					        = "CBM"
								invoked.CashLedgerGLDistribution.BankTransactionCode    = CashLedgerPayment.BankTransactionCode
								invoked.CashLedgerGLDistribution.TransactionIDNumber    = CashLedgerPayment.TransactionIDNumber
								invoked.CashLedgerGLDistribution.DistributionType       = "E"
								invoked.Company                                         = CompanyBaseData.OverrideCompany
								invoked.CompanyAccountingEntity						    = CompanyBaseData.OverrideCompany.AccountingEntity
								invoked.RecordType				                        = "V"
								invoked.GLFinanceCodeBlock						        = CompanyCashCode.PaymentClearingAccount
								invoked.TransactionNumber                               = Reference
								invoked.GeneralLedgerSourceCode	                        = "VP"
								invoked.Description				                        = "VoidPayment"
								invoked.Reference				                        = TransactionNumber
								invoked.GLTransactionAmount    					        = BankCheckAmount * -1
								invoked.DistributionToBankAmount  				        = BankCheckAmount * -1
								invoked.Status 	 				                        = Status.Released
								invoked.PostDate				                        = PrmVoidDate
								invoked.BypassStatusEdit							    = true
								invoked.TransientCreateFromBatchType                    = 9
								invoked.LocalControlDocumentNumber					    = TransactionNumber
								invoked.LocalDocumentNumber							    = TransactionNumber
								invoked.LocalPostingDate                                = PrmVoidDate
								invoked.LocalExchangeDate                               = PaymentDate
								invoked.LocalGeneralLedgerEvent						    = "AP"
								invoked.GLTJournalizeGroup 							    = PrmJournalizeGroup
							invoke Create CashLedgerGLDistribution
								fill in fields from CashLedgerPayment
								invoked.CashLedgerSourceRecord					        = "CBM"
								invoked.CashLedgerGLDistribution.BankTransactionCode    = CashLedgerPayment.BankTransactionCode
								invoked.CashLedgerGLDistribution.TransactionIDNumber    = CashLedgerPayment.TransactionIDNumber
								invoked.CashLedgerGLDistribution.DistributionType       = "E"
								invoked.Company                                         = CompanyBaseData.OverrideCompany
								invoked.CompanyAccountingEntity						    = CompanyBaseData.OverrideCompany.AccountingEntity
								invoked.RecordType				                        = "V"
								invoked.GLFinanceCodeBlock						        = CompanyCashCode.CashAccount
								invoked.TransactionNumber                               = Reference
								invoked.GeneralLedgerSourceCode	                        = "VP"
								invoked.Description				                        = "VoidPayment"
								invoked.Reference				                        = TransactionNumber
								invoked.GLTransactionAmount    					        = BankCheckAmount
								invoked.DistributionToBankAmount  				        = BankCheckAmount
								invoked.Status 	 				                        = Status.Released
								invoked.PostDate				                        = PrmVoidDate
								invoked.BypassStatusEdit							    = true
								invoked.TransientCreateFromBatchType                    = 9
								invoked.LocalControlDocumentNumber					    = TransactionNumber
								invoked.LocalDocumentNumber							    = TransactionNumber
								invoked.LocalPostingDate                                = PrmVoidDate
								invoked.LocalExchangeDate                               = PaymentDate
								invoked.LocalGeneralLedgerEvent						    = "AP"
								invoked.GLTJournalizeGroup 							    = PrmJournalizeGroup
						if (CashCode.NewCashLedgerPaymentForVoid)							

							invoke ReinstatePayment
								assign result to NewCashLedgerPayment
								fill in fields from this instance
									except invoked.CashLedgerPayment.TransactionIDNumber
									except invoked.BaseNetPaymentAmount
									except invoked.OriginatingImportRun			
									except invoked.ReassignToApprovalLevel		
									except invoked.CashLedgerBatchApproval		
									except invoked.BudgetEditProcessing			
									except invoked.CashRequirementsResult		
									except invoked.CashLedgerMassReleaseResult	
								invoked.Status									= Status.Unreleased
								invoked.CashLedgerTransactionIdentifier			= blank
								invoked.LastDistributionSequence				= blank
								invoked.PaymentDate								= blank
								invoked.TransactionNumber						= blank
								invoked.VoidDate								= blank



							for each CashLedgerPaymentDistributionsOrigExpenseOnlyRel	
								LocalOriginatingTransaction	= reference to each.CashLedgerGLDistribution	
								invoke Create CashLedgerGLDistribution
									fill in fields from each
										except invoked.Status
									initialize invoked.GLTJournalizeGroup
									invoked.CashLedgerGLDistribution.TransactionIDNumber	= NewCashLedgerPayment.CashLedgerPayment.TransactionIDNumber
									invoked.GLTransactionAmount								= OrigGLTransactionDetailRel.TransactionAmount
									invoked.GLBaseAmount 									= OrigGLTransactionDetailRel.ReportCurrencyAmount
									invoked.VoidPaymentDistributions						= false
																	
						VoidDate	= PrmVoidDate 
						Status		= Status.Voided
						include PerformBudgetEditsForVoids	
