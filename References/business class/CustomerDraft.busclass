CustomerDraft is a BusinessClass
    owned by dt
    prefix is ARD
    classic name is ARDRAFTS

    Ontology
        symbolic key is CustomerDraft
            classic set name is ARDSET9
            classic name for CustomerDraft.CancelSequence is CANCEL-SEQ

    Patterns
        implements StaticJava
        disable AuditIndex

    Persistent Fields

        ApplicationSequence
            classic name is APP-SEQ
        ReceivableProcessLevel
            classic name is PROCESS-LEVEL
        BankTransactionCode
            classic name is BANK-INST-CODE
        CashCode
        RemitGroup




        CurrencyRateToCustomerGroupCurrency
            sql name is CRateToCustomerGroupCurrency
            classic name is GROUP-RATE
        CustomerGroupCurrencyMultiplicationOrDivision
            sql name is CGCMultiplicationOrDivision
            classic name is GROUP-MUDV
		CurrencyTable        
        DraftDate                                   is an ExchangeDate
        OriginalCurrency                            is a FromCurrency
            classic name is ORIG-CURRENCY
        CurrencyMultiplicationOrDivision
            sql name is CMultiplicationOrDivision
            classic name is CURR-MUDV
        CurrencyDecimalsNumber                      is an OrigNd
            classic name is ORIG-ND
        CurrencyRate                                is an OrigRate
            classic name is ORIG-RATE
        CashRate
        TransactionAmount							is a CurrencyAmount
        	classic name is ORIG-AMT
        BaseAmount									is an InternationalAmount
        	classic name is TRAN-AMT
        MaturityDate                                is Date
        AcceptDate                                  is Date
        AcceptPostDate                              is Date
        	classic name is ACCEPT-GL-DATE
        RemitDate                                   is Date
        CashDate                                    is Date
        DishonorDate                                is Date
        CancelDate                                  is Date
        ResolvedDate                                is Date
        Status                                      is Numeric size 1
            States
                Created      		value is 0
                Accepted     		value is 1
                Selected     		value is 2
                IncludedInRemit 	value is 3
                Presented    		value is 4
                Dishonored   		value is 7
                Cancelled     		value is 8
                Cashed       		value is 6
                Historical   		value is 9
                CreatedUnreleased 	value is 5
                    default label is "Created/unreleased"
        PrintFlag
        PostalCode
        BankEntity

        BankAccountNumber							is AlphaUpper size 35
            classic name is BANK-ACCT-NBR
        AdditionalRevenueAmount          			is an InternationalAmount
			classic name is REVENUE-AMT
        BaseAdditionalRevenueAmount                 is an InternationalAmount
			classic name is ORIG-REV-AMT
        AdditionalRevenueAccount					is a FinanceCodeBlock
            classic name for AdditionalRevenueAccount.AccountingUnit is REV-ACCT-UNIT
            classic name for AdditionalRevenueAccount.GeneralLedgerChartAccount is REV-ACCOUNT
        BankExpenseAmount		                    is an InternationalAmount
			classic name is ORIG-BNK-EXP
        BaseBankExpenseAmount                       is an InternationalAmount
			classic name is BNK-EXP-AMT
        BankExpenseAccount                          is an FinanceCodeBlock
			classic name for BankExpenseAccount.AccountingUnit is BEXP-ACCT-UNIT
			classic name for BankExpenseAccount.GeneralLedgerChartAccount is BEXP-ACCOUNT
        DishonorExpenseAmount                       is an InternationalAmount
			classic name is ORIG-DIS-EXP
        BaseDishonorExpenseAmount                   is an InternationalAmount
			classic name is DIS-EXP-AMT
		DishonorExpenseAccount						is a FinanceCodeBlock
			classic name for DishonorExpenseAccount.AccountingUnit is DEXP-ACCT-UNIT
			classic name for DishonorExpenseAccount.GeneralLedgerChartAccount is DEXP-ACCOUNT
        BillOfExchangeAccrualCode                   is a ReceivableGeneralLedgerCode
            classic name is DRAFT-CODE
        CashUpdate									is Boolean
			classic name is CASH-UPDATE-FL
        ReceivableGeneralLedgerCode
            classic name is AR-CODE
            default label is "ReceivableGlobalLedgerCode"
        DraftReference                              is Numeric size 10
			classic name is DRAFT-REF
        DishonorCode                                is a ReceivableGeneralLedgerCode
			classic name is UNPAYMENT-CODE
        Risk                                    	is Boolean
			classic name is RISK-FL
        DishonorStatus                              is AlphaUpper size 1
			classic name is DIS-UPDATE-FL
            States
                NotDishonored       value is blank
                PostPresentedBoe    value is "P"
                    default label is "Post Presented BOE"
                PostCashedAtRiskBoe value is "R"
                    default label is "Post Cashed at Risk BOE"
                Processed			value is "Y"
        Processed									is Boolean
			classic name is PRES-UPDATE-FL
        Resolution                                  is AlphaUpper size 1
			classic name is RESOLUTION-FL
            States
                NoResolution value is blank
                Cashed       value is "1"
                WrittenOff   value is "2"
                Renegotiated value is "3"
        CommentCode									is a StandardComment
			classic name is COMMENT-CD
        JournalBook
            classic name is JRNL-BOOK-NBR
            restricted
        PayerReference								is AlphaUpper size 10
			classic name is PAYER-REF
        PaymentBatchNumber                          is like BatchNumber
			classic name is PMT-BATCH-NBR
        AppliedAmount                               is an InternationalAmount
			classic name is ORIG-APP-AMT
        BaseAppliedAmount                           is an InternationalAmount
			classic name is APPLD-AMT




	Transient Fields
		RIBKey
		TermsCode
		TransientRecreate is Boolean

	Local Fields
		LocalReceivablePaymentHeader			is a ReceivablePaymentHeader
		NewReceivablePaymentHeader				is a ReceivablePaymentHeader view
        LocalOrigin								is AlphaUpper size 2
        LocalTransactionAmount					is like InternationalAmount
		LocalCode								is Numeric 1
		VerifyRIBKey
        LocalCurrencyExchange               	is a CurrencyExchangeGroup 
        LocalCancelSequence 					is like SeqNbr
		LocalDaysApart							is Numeric size 5
		LocalAccount							is a FinanceCodeBlock
		LocalDescription						is like Description
		LocalCashCode							is a CashCode
		LocalPostDate							is Date
		LocalTermsCalTrigger					is Alpha size 1
		CalculateTerms
		LocalTermsCalculation					is a TermsCalculation
		LoopCounter								is Numeric size 2
		LocalInvoice							is like Invoice
		NewReceivableInvoice					is a ReceivableInvoice view
		LocalInvoiceAmount						is like InternationalAmount
		CurrencyWork							is a ReceivableExchange
		LocalCurrency							is like Currency
		LocalDaysDifference						is Decimal size 5.0
		LocalCurrentDate						is Date
		WorkAmount								is like InternationalAmount
		CurrencyWork1							is a FromCurrencyExchangeGroup				
		LocalCurrencyRelationship				is a CurrencyRelationship	
		LocalCompany                            is like ReceivableCompany
		LocalCustomer                           is like Customer				
	
	Context Fields
		ContextCustomerDraftRemittance			is a CustomerDraftRemittance
		CompanyRange
		MaturityDateRange						is a DateRange
		DraftDateRange							is a DateRange2
		PostalCodeRange
		CustomerMajorClass
		CustomerMinorClass
		DraftNumberRange
		TransactionAmountRange					is an AmountRange

	Derived Fields
		ParentContext is a DerivedField 
			type is like Name
			holds pii
			restricted
			return parentcontext.name
	
        StatusDate  is a ConditionalField
            type is Date
            restricted
            if (IsCreated)
                DraftDate
            else
            if (IsAccepted)
                AcceptDate
            else
            if (IsSelected)
                RemitDate
            else
            if (IsIncludedInRemit)
                RemitDate
            else
            if (IsPresented)
                RemitDate
            else
            if (IsDishonored)
                DishonorDate
            else
            if (IsCanceled)
                CancelDate
            else
            if (IsCashed)
                CashDate
            else
            if (IsHistorical)
                MaturityDate
            else
                blank

        ResolvedStatus is a ConditionalField
            type is AlphaUpper size 13
            restricted
            if (IsDishonor)
                if (IsNoResolution)
                    "NO RESOLUTION"
                else
                if (IsCashResolutn)
                    "CASHED"
                else
                if (IsWoResolution)
                    "WRITTEN OFF"
                else
                if (IsRenegResolutn)
                    "RENEGOTIATED"
                else
                    blank
            else
                blank

		GainLossAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (BaseAmount + sum ReceivableApplicationRel.ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount + sum ReceivableApplicationRel.TotalAdjustments) 

		CurrencyFlag is a DerivedField
			type is Alpha 3  
			if (NonBaseCurrency)
				return "Yes"  
				
		DerivedNationalCompany is a DerivedField
			type is like Company
			restricted
			if (CompanyCustomerRel.NationalAccountIndicator.Child)
				return NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany
			else
				return Company

		DerivedNationalCustomer is a DerivedField
			type is like Customer
			restricted
			if (CompanyCustomerRel.NationalAccountIndicator.Child)
				return NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCustomer
			else
				return CompanyCustomerRel.Customer

		CustomerGroupAgingPeriod is a DerivedField
			type is Numeric 2
			restricted
			LocalCurrentDate = current corporate date
			if (Company.CustomerGroupField.CustomerGroup.AgingMethod.AgeByTransactionDate)
				LocalDaysDifference = LocalCurrentDate - DraftDate 
			else
				LocalDaysDifference = LocalCurrentDate - MaturityDate 
			
			if (Company.CustomerGroupField.CustomerGroup.AgePaymentsRule.AgedInCurrentColumn
			or  LocalDaysDifference = 0)
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 3
				else
					return 2
			else
			if (LocalDaysDifference < 0)
				if (Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod entered
				and Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod >= (LocalDaysDifference * -1))
					if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
						return 3
					else
						return 2
				else
					if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
						if ((Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod + Company.CustomerGroupField.CustomerGroup.AgeFuture) >= (LocalDaysDifference * -1))
							return 2
						else 
							return 1
					else
						return 1
			else  
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[1])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 4
				else
					return 3
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[2])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 5
				else
					return 4
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[3])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 6
				else
					return 5
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[4])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 7	
				else
					return 6
			else
			if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[5])
					return 8
				else
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[6])
					return 9
				else
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[7])
					return 10
				else
					return 11
			else
				return 7

		AgingCodeAgingPeriod is a DerivedField
			type is Numeric 2
			restricted
			LocalCurrentDate = current corporate date
			if (CompanyCustomerRel.AgingCode entered)
				if (CompanyCustomerRel.AgingCode.AgingMethod.AgeByTransactionDate)
					LocalDaysDifference = LocalCurrentDate - DraftDate 
				else
					LocalDaysDifference = LocalCurrentDate - MaturityDate 
				
				if (CompanyCustomerRel.AgingCode.AgePaymentsRule.AgedInCurrentColumn
				or  LocalDaysDifference = 0)
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 3
					else
						return 2
				else
				if (LocalDaysDifference < 0)
					if (CompanyCustomerRel.AgingCode.CurrentAgingPeriod entered
					and CompanyCustomerRel.AgingCode.CurrentAgingPeriod >= (LocalDaysDifference * -1))
						if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
							return 3
						else
							return 2
					else
						if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
							if ((CompanyCustomerRel.AgingCode.CurrentAgingPeriod + CompanyCustomerRel.AgingCode.AgeFuture) >= (LocalDaysDifference * -1))
								return 2
							else
								return 1
						else
							return 1
				else  
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[1])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 4
					else
						return 3
				else
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[2])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 5
					else
						return 4
				else
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[3])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 6
					else
						return 5
				else
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[4])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 7
					else
						return 6
				else
				if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
					if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[5])
						return 8
					else
					if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[6])
						return 9
					else
					if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[7])
						return 10
					else
						return 11
				else
					return 7
			else
				return 2

		CompanyAgingPeriod is a DerivedField
			type is Numeric 2
			restricted
			LocalCurrentDate = current corporate date
			if (Company.AgingMethod.AgeByTransactionDate)
				LocalDaysDifference = LocalCurrentDate - DraftDate 
			else
				LocalDaysDifference = LocalCurrentDate - MaturityDate 
			
			if (Company.AgePaymentsRule.AgedInCurrentColumn
			or  LocalDaysDifference = 0)
				if (Company.ExpandedAgingPeriods)
					return 3
				else
					return 2
			else
			if (LocalDaysDifference < 0)
				if (Company.CurrentAgingPeriod entered
				and Company.CurrentAgingPeriod >= (LocalDaysDifference * -1))
					if (Company.ExpandedAgingPeriods)
						return 3
					else
						return 2
				else
					if (Company.ExpandedAgingPeriods)
						if ((Company.CurrentAgingPeriod + Company.AgeFuture) >= (LocalDaysDifference * -1))
							return 2
						else
							return 1
					else
						return 1
			else  
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[1])
				if (Company.ExpandedAgingPeriods)
					return 4
				else
					return 3
			else
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[2])
				if (Company.ExpandedAgingPeriods)
					return 5
				else
					return 4
			else
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[3])
				if (Company.ExpandedAgingPeriods)
					return 6
				else
					return 5
			else
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[4])
				if (Company.ExpandedAgingPeriods)
					return 7
				else
					return 6
			else
			if (Company.ExpandedAgingPeriods)
				if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[5])
					return 8
				else
				if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[6])
					return 9
				else
				if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[7])
					return 10
				else
					return 11
			else
				return 7

		CustomerGroupAmount is a DerivedField
			type is like InternationalAmount

			if (OriginalCurrency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return TransactionAmount
			else
			if (Company.Currency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return BaseAmount
			else
				CurrencyWork.ExchangeDate								= current corporate date
		        CurrencyWork.TransactionAmount							= TransactionAmount
		        CurrencyWork.FromCurrency								= OriginalCurrency 
				CurrencyWork.BaseAmount.ToCurrency						= Company.CustomerGroupField.CustomerGroup.Currency 
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		NationalAccountAmount is a DerivedField
			type is like InternationalAmount

			if (OriginalCurrency = first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.Currency)
				return TransactionAmount
			else
			if (Company.Currency = first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.Currency)
				return BaseAmount
			else
				CurrencyWork.ExchangeDate								= current corporate date
		        CurrencyWork.TransactionAmount							= TransactionAmount
		        CurrencyWork.FromCurrency								= OriginalCurrency 
				CurrencyWork.BaseAmount.ToCurrency						= first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.Currency 
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		CustomerGroupOpenAmount is a DerivedField
			type is like InternationalAmount

			if (OriginalCurrency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return TransactionAmount
			else
			if (Company.Currency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return BaseAmount
			else
				CurrencyWork.ExchangeDate								= current corporate date
		        CurrencyWork.TransactionAmount							= TransactionAmount
		        CurrencyWork.FromCurrency								= OriginalCurrency 
				CurrencyWork.BaseAmount.ToCurrency						= Company.CustomerGroupField.CustomerGroup.Currency 
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		NationalAccountOpenAmount is a DerivedField
			type is like InternationalAmount

			if (OriginalCurrency = first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.Currency)
				return TransactionAmount
			else
			if (Company.Currency = first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.Currency)
				return BaseAmount
			else
				CurrencyWork.ExchangeDate								= current corporate date
		        CurrencyWork.TransactionAmount							= TransactionAmount
		        CurrencyWork.FromCurrency								= OriginalCurrency 
				CurrencyWork.BaseAmount.ToCurrency						= first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.Currency 
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		CompanyCustomerCurrencyAmount	is a DerivedField			
			type is like InternationalAmount
			restricted
			if (OriginalCurrency != CompanyCustomerRel.Currency)
				CurrencyWork.FinanceEnterpriseGroup			= Company.CustomerGroupField.CustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate					= DraftDate
		        CurrencyWork.TransactionAmount				= TransactionAmount
		        CurrencyWork.FromCurrency					= OriginalCurrency 
				CurrencyWork.BaseAmount.ToCurrency			= CompanyCustomerRel.Currency 
				return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				return TransactionAmount

		NationalAccountCompanyCustomerCurrencyAmount	is a DerivedField			
			type is like InternationalAmount
			restricted
			initialize CurrencyWork
			if (OriginalCurrency != NationalCompanyCustomerRel.Currency)
				CurrencyWork.FinanceEnterpriseGroup			= Company.CustomerGroupField.CustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate					= DraftDate
		        CurrencyWork.TransactionAmount				= TransactionAmount
		        CurrencyWork.FromCurrency					= OriginalCurrency 
				CurrencyWork.BaseAmount.ToCurrency			= NationalCompanyCustomerRel.Currency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				return TransactionAmount

		
		FilteredAmountCustomerCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = CompanyCustomerRel.Currency)
					WorkAmount = TransactionAmount
				else
					CurrencyWork.ExchangeDate					= DraftDate
			        CurrencyWork.TransactionAmount				= TransactionAmount
			        CurrencyWork.FromCurrency					= OriginalCurrency 
					CurrencyWork.BaseAmount.ToCurrency			= CompanyCustomerRel.Currency 
					WorkAmount 									= CurrencyWork.BaseAmount.OutputCurrencyAmount
				
				return WorkAmount

		FilteredAmountCompanyCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = Company.Currency)
					WorkAmount = TransactionAmount
				else
					CurrencyWork.ExchangeDate					= DraftDate
			        CurrencyWork.TransactionAmount				= TransactionAmount
			        CurrencyWork.FromCurrency					= OriginalCurrency 
					CurrencyWork.BaseAmount.ToCurrency			= Company.Currency 
					WorkAmount 									= CurrencyWork.BaseAmount.OutputCurrencyAmount
				
				return WorkAmount

		FilteredAmountGroupCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = Company.CustomerGroupField.CustomerGroup.Currency)
					WorkAmount = TransactionAmount
				else
					CurrencyWork.ExchangeDate					= DraftDate
			        CurrencyWork.TransactionAmount				= TransactionAmount
			        CurrencyWork.FromCurrency					= OriginalCurrency 
					CurrencyWork.BaseAmount.ToCurrency			= Company.CustomerGroupField.CustomerGroup.Currency
					WorkAmount 									= CurrencyWork.BaseAmount.OutputCurrencyAmount
				
				return WorkAmount

		SignedBaseCurrentAmount is a DerivedField
			type is like InternationalAmount
			restricted

			CurrencyWork.ExchangeDate								= current corporate date
	        CurrencyWork.TransactionAmount							= TransactionAmount
	        CurrencyWork.FromCurrency								= OriginalCurrency 
			CurrencyWork.BaseAmount.ToCurrency						= Company.Currency 
			return CurrencyWork.BaseAmount.OutputCurrencyAmount

		RepresentativeText is a StringField							
			type is Text
			default label is "Company"
			Company " - " Company.GeneralLedgerCompany.Name

		CustomerRepresentativeText is a StringField					
			type is Text
			default label is "Customer"
			Customer " - " Customer.Name

	Field Rules

        CurrencyTable
            default to CompanySystemClosingControlRel.CurrencyTable
            default to Company.FinanceEnterpriseGroup.CurrencyTable


		ReceivableProcessLevel
			required
			if (CompanyCustomerRel.ProcessLevelRestrictions)
				constraint (CustomerProcessLevelInclusionRel exists 
				and         CustomerProcessLevelInclusionRel.IncludeProcessLevel) 
					"CustomerExcludedFromProcessLevel"

		BankEntity
			if (BankEntity entered)
				constraint (CustomerDraftBankRel exists)
					"BankAccountOrNumberNotValid"
			else

				default to CustomerDraftBankDefaultRel.CustomerDraftBank.BOEEFTBank
		BankAccountNumber
			if (BankAccountNumber entered)
				constraint (CustomerDraftBankRel exists)
					"BankAccountOrNumberNotValid"
			else
				default to CustomerDraftBankDefaultRel.CustomerDraftBank

		RemitGroup
			cannot be changed
			
		CashCode
			cannot be changed
			
		DraftDate
			default to current corporate date
			if (!Company.TransactionDueDateChangeAllowed
			or   Status > 3)
				cannot be changed
			
		AcceptDate
			if (AcceptDate entered)
				constraint (AcceptDate >= DraftDate)
					"AcceptDateMustBeEqualOrGreaterThanDraftDate"
				constraint (AcceptDate <= MaturityDate)
					"AcceptDateMustBeEqualOrLessThanMaturityDate"

						
		AcceptPostDate
			default to AcceptDate

		MaturityDate
			required
			if (!Company.TransactionDueDateChangeAllowed
			or   Status > 3)
				cannot be changed
			constraint (MaturityDate >= DraftDate)
				"AcceptDateMustBeEqualOrLessThanMaturityDate"
			
		BankTransactionCode
			required
			constraint (BankTransactionCode.BankTransactionType.BillOfExchangePayment)
				"BankTransactionCodeIsNotBillOfExchangeType"
			
        BillOfExchangeAccrualCode
	        if (IsAcceptAccounting
			and BankTransactionCode.ReceivableGeneralLedgerAccounting)
				default to ReceivableProcessLevel.BOEAcceptanceReceivableGeneralLedgerCode

        ReceivableGeneralLedgerCode
        	default to CompanyCustomerRel.ReceivableGeneralLedgerCode
        	default to ReceivableProcessLevel.ReceivableGeneralLedgerCode
        	default to Company.ReceivableGeneralLedgerCode

		OriginalCurrency
			default to CompanyCustomerRel.Currency
			default to Company.Currency
			cannot be changed

		CurrencyRate
			required
			if (OriginalCurrency = Company.Currency)
				default to 1
				constraint (CurrencyRate = 1)
					"RateMustBe1IfCurrencyMatchesCompanyCurrency"
			else
				initialize LocalCurrencyExchange.BaseAmount.EnteredCurrencyRate
				LocalCurrencyExchange.BaseAmount.ToCurrency			= Company.Currency
	
				if (CurrencyRate not entered)
					CurrencyRate = LocalCurrencyExchange.BaseAmount.OutputCurrencyRate
		
				if (Company.CurrencyRateOverride.No)
					constraint (CurrencyRate = LocalCurrencyExchange.BaseAmount.OutputCurrencyRate)
						"CompanyDoesNotAllowCurrencyRateOverride" 
				
		TransactionAmount
			required
			initialize LocalCurrencyExchange
			LocalCurrencyExchange.TransactionAmount					= TransactionAmount
			LocalCurrencyExchange.BaseAmount.ToCurrency				= Company.Currency
			LocalCurrencyExchange.BaseAmount.EnteredCurrencyRate	= CurrencyRate
			BaseAmount												= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount
								
		RIBKey
            initialize VerifyRIBKey
            VerifyRIBKey.BankEntity        = BankEntity
            VerifyRIBKey.BankAccountNumber = BankAccountNumber
            VerifyRIBKey.RIBKey            = RIBKey
            constraint (VerifyRIBKey.PerformVerifyRIBKey)
                "R\I\B_\KeyInvalid,VendorBankAndAccountNumberNumberDoNotEqualCalculatedKey" 

		CurrencyRateToCustomerGroupCurrency						
			if (CustomerDraft.DraftSource = "P")
				CurrencyWork1.FromCurrency				= Company.Currency
				CurrencyWork1.BaseAmount.ToCurrency		= Company.CustomerGroupField.CustomerGroup.Currency
				CurrencyRateToCustomerGroupCurrency		= CurrencyWork1.BaseAmount.OutputCurrencyRate
			required
		
		CustomerGroupCurrencyMultiplicationOrDivision										
			if (Company.Currency = Company.CustomerGroupField.CustomerGroup.Currency)
				CustomerGroupCurrencyMultiplicationOrDivision = "M"
			else
				LocalCurrencyRelationship.FromCurrency			= Company.Currency
				LocalCurrencyRelationship.ToCurrency			= Company.CustomerGroupField.CustomerGroup.Currency
				if (LocalCurrencyRelationship.MultDiv.Multiply)
					CustomerGroupCurrencyMultiplicationOrDivision 	= "M"
				else
					CustomerGroupCurrencyMultiplicationOrDivision 	= "D"

    Conditions
        IsAcceptRequired
        	restricted
            when (BankTransactionCode.PayableAcceptanceAccounting)

        IsAccepted
        	restricted
            when (Status.Accepted)

        IsAcceptAccounting
        	restricted
            when (Company.BillOfExchAcceptAccounting.YesGeneralLedgerUpdateRequiredAtAcceptance)

        IsAccptNotReq
        	restricted
            when (not BankTransactionCode.ReceivableAcceptanceAccounting)

        IsArdset11
        	restricted
            classic name is ARDSET11
            when (Status <  7
            or    Status.Dishonored
            and   Resolution.NoResolution)

        CreatedOrAccepted
        	restricted
            classic name is ARDSET2
            when (Status.Created
            or    Status.Accepted)

        CreatedOrAcceptedOrCancelled
        	restricted
            classic name is ARDSET2
            when (Status.Created
            or    Status.Accepted
            or    Status.Cancelled)

        UnreleasedOrCancelled
        	restricted
            when (Status.CreatedUnreleased
            or    Status.Cancelled)

        IsArdset3
        	restricted
            classic name is ARDSET3
            when (Status.Accepted
            or    Status.Selected)

        IsArdset4
        	restricted
            classic name is ARDSET4
            when (Status.Accepted
            or    Status.Selected)

        IsArdset5
        	restricted
            classic name is ARDSET5
            when (RemitGroup.RemitNumber entered)

        IsArdset6
        	restricted
            classic name is ARDSET6
            when (Status <  7
            or    Status.Dishonored
            and   Resolution.NoResolution)

        IsArdset7
        	restricted
            classic name is ARDSET7
            when (Status <  7
            or    Status.Cashed
            and   Risk)

        IsArdset8
        	restricted
            classic name is ARDSET8
            when (Status.Dishonored
            and   not Resolution.Cashed
            and   not Resolution.WrittenOff
            and   not Resolution.Renegotiated)

        IsBankinstcode
        	restricted
            when (BankTransactionCode entered)

        IsCanceled
        	restricted
            when (Status.Cancelled)

        IsCashResolutn
        	restricted
            when (Resolution.Cashed)

        IsCashed
        	restricted
            when (Status.Cashed)

        IsCbcpycash
        	restricted
            when (Status >  2
            and   not Status.Cancelled)

        IsCommentsExist
        	restricted
            when (first CustomerDraftCommentRel exists)

        IsCreated
        	restricted
            when (Status.Created)

        IsCreatedUnrel
        	restricted
            classic name is "CREATED/UNREL"
            when (Status.CreatedUnreleased)

        IsCshCodeEntrd
        	restricted
            when (CashCode entered)

        IsDiscRemit
        	restricted
            when (RemitGroup.RemitType.Discounted)

        IsDishonor
        	restricted
            when (DishonorDate entered)

        IsDishonored
        	restricted
            when (Status.Dishonored)




        IsEncashedRemit
        	restricted
            when (RemitGroup.RemitType.Encashed)

        IsGlUpdated
        	restricted
            when (CashUpdate)

        IsHistorical
        	restricted
            when (Status.Historical)

        IsIncludedInRemit
        	restricted
            when (Status.IncludedInRemit)

        IsNoAcceptDate
        	restricted
            when (AcceptDate not entered)

        IsNoPrinting
        	restricted
            when (not BankTransactionCode.PaymentOutputOption.PrintedDocument
            and   BankTransactionCode.PaymentOutputOption != "B")

        IsNoResolution
        	restricted
            when (Resolution.NoResolution)

        IsPresented
        	restricted
            when (Status.Presented)

        IsRemCmpEntrd
        	restricted
            when (RemitGroup.RemitCompany entered)

        IsRemTypeEntrd
        	restricted
            when (RemitGroup.RemitType.Discounted
            or    RemitGroup.RemitType.Encashed)

        IsRemitEntrd
        	restricted
            when (RemitGroup.RemitNumber entered)

        IsRenegResolutn
        	restricted
            when (Resolution.Renegotiated)

        IsSelected
        	restricted
            when (Status.Selected)

        IsWoResolution
        	restricted
            when (Resolution.WrittenOff)

		CustomerDraftExists
			restricted
			when (CustomerDraft exists)
			
		NonBaseCurrency
			restricted
			when (OriginalCurrency != Company.Currency)
			
		AllowSelectForRemit
			restricted
			when (ContextCustomerDraftRemittance in context
			and  !Company.ProcessBOEOnRemittance)
		
		AllowUnselectFromRemit
			restricted
			when (ContextCustomerDraftRemittance in context)
		
  		WithinRemitSelectFilter
  			restricted
			when (Status.Accepted
			and  (CompanyRange not entered
			or    Company within CompanyRange)
			and  (MaturityDateRange not entered
			or    MaturityDate within MaturityDateRange)
			and  (DraftDateRange not entered
			or    DraftDate within DraftDateRange)
			and  (PostalCodeRange not entered
			or    PostalCode within PostalCodeRange)
			and  (DraftNumberRange not entered
			or    CustomerDraft.DraftNumber within DraftNumberRange)
			and  (TransactionAmountRange not entered
			or    TransactionAmount within TransactionAmountRange)
			and  (CustomerMajorClass not entered
			or    CompanyCustomerRel.CustomerMajorClass = CustomerMajorClass)
			and  (CustomerMinorClass not entered
			or    CompanyCustomerRel.CustomerMinorClass = CustomerMinorClass))

        PresentedOrCashed
        	restricted
            when (Status.Presented
            or    Status.Cashed)

		AcceptedOrCashedNoRemit
			restricted
            when  (RemitGroup not entered
            and   (Status.Accepted
            or     Status.Cashed))

		PresentedDishonoredOrCashedAndNoResolution
			restricted
            when  (Resolution.NoResolution
            and   (Status.Presented
            or     Status.Dishonored
            or     Status.Cashed))

		AllowDishonoredResolution
			restricted
            when (Status.Dishonored
            and   DishonorStatus.Processed
            and   Processed
            and   Resolution.NoResolution)

		ReceivableFilterMatch
			restricted
			when ((CompanyCustomerRel.ReceivableFilterRel.ReceivableProcessLevel not entered
			or     CompanyCustomerRel.ReceivableFilterRel.ReceivableProcessLevel = ReceivableProcessLevel)
			and   (CompanyCustomerRel.ReceivableFilterRel.Currency not entered
			or     CompanyCustomerRel.ReceivableFilterRel.Currency = OriginalCurrency)
			and   (CompanyCustomerRel.ReceivableFilterRel.DueDateRange not entered
			or     MaturityDate within CompanyCustomerRel.ReceivableFilterRel.DueDateRange)
			and   (CompanyCustomerRel.ReceivableFilterRel.TransactionAmountRange not entered
			or     TransactionAmount within CompanyCustomerRel.ReceivableFilterRel.TransactionAmountRange)
			and   (CompanyCustomerRel.ReceivableFilterRel.TransactionDateRange not entered
			or     DraftDate within CompanyCustomerRel.ReceivableFilterRel.TransactionDateRange)
			and   ((CompanyCustomerRel.ReceivableFilterRel.HistoryFlag not entered)
			or     (CompanyCustomerRel.ReceivableFilterRel.HistoryFlag.IncludeHistory)
			or     (CompanyCustomerRel.ReceivableFilterRel.HistoryFlag.OnlyShowHistory
			and     Status = 9)
			or     (CompanyCustomerRel.ReceivableFilterRel.HistoryFlag.NoHistory
			and     Status < 9)))

		HasPayment
			restricted
			when (PaymentBatchNumber entered)
			
		AtRisk
			restricted
			when (Risk 
			and   RemitGroup.RemitCompany.BillOfExchangeBankRisk
			and   Status.Cashed
			and   MaturityDate >= current corporate date)
			 			
    Relations

        CompanySystemClosingControlRel
            one-to-one relation to CompanySystemClosingControl
            Field Mapping uses BySystemCode
                related.GeneralLedgerSystemCode        = "AR"
                related.Company                        = Company
       
        ReceivableApplicationRel
            one-to-many relation to ReceivableApplication
            delete restricted
            Field Mapping uses Set3
                related.CreditTransaction.CreditCompany                	= Company
                related.CreditTransaction.CreditCustomer               	= Customer
                related.CreditTransaction.CreditType                   	= "B"
                related.CreditTransaction.CreditNumber                 	= CustomerDraft.DraftNumber
                related.CreditTransaction.CreditSequence               	= blank
                related.CreditTransaction.CreditBatch                  	= blank
                related.CreditTransaction.CreditSuffix                 	= CustomerDraft.Suffix
                related.BillOfExchangeCancelSequence 					= CustomerDraft.CancelSequence

        ReceivableApplicationBatchNumberRel
            one-to-many relation to ReceivableApplication
            delete restricted
            Field Mapping uses Set3
                related.CreditTransaction.CreditCompany                	= Company
                related.CreditTransaction.CreditCustomer               	= Customer
                related.CreditTransaction.CreditType                   	= "B"
                related.CreditTransaction.CreditNumber                 	= CustomerDraft.DraftNumber
                related.CreditTransaction.CreditSequence               	= 1
                related.CreditTransaction.CreditBatch                  	= PaymentBatchNumber
                related.CreditTransaction.CreditSuffix                 	= CustomerDraft.Suffix
                related.BillOfExchangeCancelSequence 					= CustomerDraft.CancelSequence

        NonReversedReceivableApplicationRel
            one-to-many relation to ReceivableApplication
            delete restricted
            Field Mapping uses Set3
                related.CreditTransaction.CreditCompany                	= Company
                related.CreditTransaction.CreditCustomer               	= Customer
                related.CreditTransaction.CreditType                   	= "B"
                related.CreditTransaction.CreditNumber                 	= CustomerDraft.DraftNumber
                related.CreditTransaction.CreditSequence               	= blank
                related.CreditTransaction.CreditBatch                  	= blank
                related.CreditTransaction.CreditSuffix                 	= CustomerDraft.Suffix
                related.BillOfExchangeCancelSequence 					= CustomerDraft.CancelSequence
            Instance Selection
            	where (!related.ApplicationSource.ReversalOfApplications
            	and    !related.Reverse)

        CompanyCustomerRel
            one-to-one relation to CompanyCustomer
            required
            Field Mapping uses symbolic key
                related.Company  = Company
                related.Customer = Customer

        NationalCompanyCustomerRel			
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		 = CompanyCustomerRel.NationalCompany
				related.Customer	 = CompanyCustomerRel.NationalCustomer
		
		LocalCompanyCustomerRel
            one-to-one relation to CompanyCustomer
            required
            Field Mapping uses symbolic key
                related.Company  = LocalCompany
                related.Customer = LocalCustomer

	    CompanyCashCodeRel
            one-to-one relation to CompanyCashCode
            valid when (IsCbcpycash)
            required
            Field Mapping uses symbolic key
                related.Company		= Company
                related.CashCode	= CashCode

        LocalCompanyCashCodeRel
            one-to-one relation to CompanyCashCode
            valid when (IsCbcpycash)
            required
            Field Mapping uses symbolic key
                related.Company		= Company
                related.CashCode	= LocalCashCode

        CustomerDraftCommentRel
            one-to-many relation to CustomerDraftComment
            delete cascades
            Field Mapping uses symbolic key
            Instance Selection
                where (related.CustomerDraftComment.Company = Company
                and   related.CustomerDraftComment.Customer = Customer
                and   related.CustomerDraftComment.DraftNumber = CustomerDraft.DraftNumber
                and   related.CustomerDraftComment.Suffix = CustomerDraft.Suffix
                and   related.CustomerDraftComment.DraftSource = CustomerDraft.DraftSource)

        CustomerDraftCreditRel
            one-to-many relation to CustomerDraftCredit
            Field Mapping uses Set1
                related.Company                      = Company
                related.CustomerDraft.DraftNumber     = CustomerDraft.DraftNumber
                related.CustomerDraft.Suffix         = CustomerDraft.Suffix
                related.Customer                     = Customer
                related.CustomerDraft.CancelSequence = CustomerDraft.CancelSequence
                related.CustomerDraft.DraftSource    = CustomerDraft.DraftSource

        CustomerDraftRemittanceRel
            one-to-one relation to CustomerDraftRemittance
            Field Mapping uses symbolic key
                related.Company                              			= RemitGroup.RemitCompany
                related.CustomerDraftRemittance.ProcessLevel 			= RemitGroup.RemitProcessLevel
                related.CustomerDraftRemittance.CashCode				= CashCode
                related.CustomerDraftRemittance.RemitType    			= RemitGroup.RemitType
                related.CustomerDraftRemittance.RemitNumber     		= RemitGroup.RemitNumber
                related.CustomerDraftRemittance.MaturityDate            = MaturityDate

        CustomerRel
            one-to-one relation to Customer
            required
            Field Mapping uses symbolic key
                related.CustomerGroup = Company.CustomerGroupField.CustomerGroup
                related.Customer      = Customer

        CustomerDraftBankRel
            one-to-one relation to CustomerDraftBank
            required
            Field Mapping uses symbolic key
                related.CustomerGroup              				= Company.CustomerGroupField.CustomerGroup
                related.Company  								= Company
                related.Customer 								= Customer


            	related.CustomerDraftBank.BOEEFTBank			= BankEntity
            	related.CustomerDraftBank.BOEEFTBankAccount		= BankAccountNumber


                
        CustomerDraftBankDefaultRel
            one-to-many relation to CustomerDraftBank
            Field Mapping uses Set2
                related.CustomerGroup              		= Company.CustomerGroupField.CustomerGroup
                related.Company  						= Company
                related.Customer 						= Customer
                
        SameCustomerDraftRel
            one-to-many relation to CustomerDraft
            Field Mapping uses Set2
                related.Company                      	= Company
                related.Customer                     	= Customer
				related.MaturityDate					= MaturityDate
                related.CustomerDraft.DraftNumber     	= CustomerDraft.DraftNumber
                related.CustomerDraft.Suffix         	= CustomerDraft.Suffix
                related.CustomerDraft.CancelSequence	= CustomerDraft.CancelSequence

        LastCancelSequenceRel
            one-to-many relation to CustomerDraft
            Field Mapping uses Set7
                related.Company                      	= Company
                related.Customer                     	= Customer
                related.CustomerDraft.DraftNumber     	= CustomerDraft.DraftNumber
                related.CustomerDraft.Suffix         	= CustomerDraft.Suffix
			Instance Selection
				where (related.CustomerDraft.CancelSequence entered)

        CustomerProcessLevelInclusionRel
            one-to-one relation to CustomerProcessLevelInclusion
            Field Mapping uses symbolic key
				related.Company													= Company
				related.Customer												= Customer
				related.CustomerProcessLevelInclusion.ReceivableProcessLevel	= ReceivableProcessLevel








		ReceivablePaymentHeaderRel
			one-to-one relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company							= Company
				related.ReceivablePaymentHeader			= PaymentBatchNumber

		ReceivablePaymentRel
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company							= Company
				related.ReceivablePaymentHeader			= PaymentBatchNumber
				related.ReceivablePayment				= 1

        NonCancelledCustomerDraftRel
            one-to-one relation to CustomerDraft
            Field Mapping uses symbolic key
                related.Company  						= Company
                related.Customer 						= Customer
                related.CustomerDraft.DraftNumber 		= CustomerDraft.DraftNumber
                related.CustomerDraft.Suffix 			= CustomerDraft.Suffix
                related.CustomerDraft.CancelSequence	= 0
                related.CustomerDraft.DraftSource		= CustomerDraft.DraftSource
                
        DebitCreditTransactionSummaryRel
            one-to-one relation to ReceivableTransactionSummary
            Field Mapping uses symbolic key
				related.Company							= Company
				related.ReceivableProcessLevel			= ReceivableProcessLevel
				related.ReceivableTransactionSummary	= "02"

        WriteOffTransactionSummaryRel
            one-to-one relation to ReceivableTransactionSummary
            Field Mapping uses symbolic key
				related.Company							= Company
				related.ReceivableProcessLevel			= ReceivableProcessLevel
				related.ReceivableTransactionSummary	= "08"

        GainLossReceivableTransactionSummaryRel
            one-to-one relation to ReceivableTransactionSummary
            Field Mapping uses symbolic key
				related.Company							= Company
				related.ReceivableProcessLevel			= ReceivableProcessLevel
				related.ReceivableTransactionSummary	= "09"

        CashedBOEReceivableTransactionSummaryRel
            one-to-one relation to ReceivableTransactionSummary
            Field Mapping uses symbolic key
				related.Company							= Company
				related.ReceivableProcessLevel			= ReceivableProcessLevel
				related.ReceivableTransactionSummary	= "10"

		CustomerDraftBankCashingChargesRel
			one-to-many relation to CustomerDraftBankCashingCharges
			Field Mapping uses symbolic key

		NationalAccountInvoiceRel
		    one-to-many relation to NationalAccount

		    Field Mapping uses Set2
		        related.NationalAccount.InvoiceAccountGroup.Company      = Company
		        related.NationalAccount.InvoiceAccountGroup.Customer     = Customer

    Sets

        Set10
            indexed
            Instance Selection
                where (IsBankinstcode)
            Sort Order
                Company
                CustomerDraft.DraftNumber
                CustomerDraft.Suffix
                Customer
                CustomerDraft.CancelSequence
                CustomerDraft.DraftSource
                BankTransactionCode

        Set2
            indexed
            Instance Selection
                where (CreatedOrAccepted)
            Sort Order
                Company
                Customer
                MaturityDate
                CustomerDraft.DraftNumber
                CustomerDraft.Suffix
                CustomerDraft.CancelSequence

        Set3
            indexed
            Instance Selection
                where (IsArdset3)
            Sort Order
                RemitGroup.RemitCompany
                RemitGroup.RemitProcessLevel
                CashCode
                RemitGroup.RemitType
                MaturityDate
                Customer
                CustomerDraft.DraftNumber
                CustomerDraft.Suffix

        Set4
            indexed
            Instance Selection
                where (IsArdset4)
            Sort Order
                RemitGroup.RemitCompany
                RemitGroup.RemitProcessLevel
                CashCode
                RemitGroup.RemitType
                CustomerDraft.DraftNumber
                CustomerDraft.Suffix
                Customer
                MaturityDate

        Set5
            indexed
            Instance Selection
                where (IsArdset5)
            Sort Order
                RemitGroup.RemitCompany
                RemitGroup.RemitProcessLevel
                RemitGroup.RemitNumber
                Customer
                CustomerDraft.DraftNumber
                CustomerDraft.Suffix
                Company
                CustomerDraft.CancelSequence
                CustomerDraft.DraftSource

        Set6
            indexed
            Instance Selection
                where (IsArdset6)
            Sort Order
                Company
                Customer
                CustomerDraft

        Set7
            indexed
            Instance Selection
                where (IsArdset7)
            Sort Order
                Company
                Customer
                CustomerDraft.DraftNumber
                CustomerDraft.Suffix

        Set8
            indexed
            Instance Selection
                where (IsArdset8)
            Sort Order
                Company
                Customer
                CustomerDraft.DraftNumber
                CustomerDraft.Suffix
                MaturityDate

        Set1
            indexed
            Sort Order
                Company
                CustomerDraft.DraftNumber
                CustomerDraft.Suffix
                Customer
                CustomerDraft.CancelSequence
                CustomerDraft.DraftSource

		ByMaturityDate
			indexed
            Sort Order
				MaturityDate
                Company
                CustomerDraft.DraftNumber
                CustomerDraft.Suffix
                Customer
                CustomerDraft.CancelSequence

		ByMaturity
			duplicates
			Sort Order
				MaturityDate
				
		ByCompany
			duplicates
			Sort Order
				Company
				
		ByCustomer
			duplicates
			Sort Order
				Customer

		ByDraftNumber
			duplicates
			Sort Order
				CustomerDraft.DraftNumber				
						
	Create Rules
		constraint (!SameCustomerDraftRel exists)
			"BillOfExchangeAlreadyExists"

		if (BankTransactionCode.PaymentOutputOption.NoOutput)
			PrintFlag = "Y"		

		if (TransientRecreate)
			constraint (CustomerDraft.DraftNumber entered)
				"BillOfExchangeMustBeEntered"
		
		if (!TransientRecreate)
			if (Company.BillOfExchangeNumberingType.AutomaticNumbering 
				and CustomerDraft.CancelSequence not entered)
				constraint (CustomerDraft.DraftNumber not entered)
					"DoNotEnterBillOfExchange;AutoNumberingInUse"
	
				increment Company.LastBillOfExchangeNumber
				CustomerDraft.DraftNumber = Company.LastBillOfExchangeNumber
			
	Rule Blocks

		CreateDistribution
			invoke Create ReceivableGLDistribution
				invoked.FinanceEnterpriseGroup							= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
            	invoked.ReceivableCompanyGroup.GlCompany				= Company
            	invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
            	invoked.ReceivableCompanyGroup.OriginCompany			= Company
		        invoked.Invoice											= CustomerDraft.DraftNumber
		        invoked.TransType										= "B"

		        invoked.ReceivableCompanyDataGroup.Customer				= Customer

				invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel							= ReceivableProcessLevel
				invoked.DistributionSource								= "B"

				invoked.BatchNumber										= PaymentBatchNumber
				invoked.AccumulationType								= "D"
		        invoked.DocumentNumber									= "15-" + CustomerDraft.DraftNumber
            	invoked.ReceivableCompanyGroup.GlCompany										= Company
		        invoked.Status											= 2
				invoked.GeneralLedgerDate								= LocalPostDate
				invoked.OriginalCurrency								= OriginalCurrency

				invoked.Origin											= LocalOrigin
		        invoked.DistributionAmount.CurrencyAmount				= LocalTransactionAmount
				invoked.GeneralLedgerAccount							= LocalAccount
		        invoked.Description										= LocalDescription
				invoked.TransactionDate									= LocalPostDate
				invoked.GeneralLedgerDate								= LocalPostDate
		
	StateCycles	

		CustomerDraftLifeCycle is a StateCycle
		
			state field is Status
			
            CreatedUnreleased is a State

				Create is a Create Action
					Entrance Rules
						CustomerDraft.DraftSource = "P"
				
				Update is an Update Action
				
				Delete is a Delete Action
				
				Release is an Instance Action
					Exit Rules
						if  (CustomerDraft.DraftSource = "P")
							if (!Company.PaymentBatchNumbering)
								LocalReceivablePaymentHeader	= Company.LastPaymentAutoBatchNumber + 1
								while (LocalReceivablePaymentHeader exists)
									LocalReceivablePaymentHeader += 1
									
							increment BankTransactionCode.TransactionIDNumber

							invoke ReleasedBatch.CreateReleasedBatch ReceivablePaymentHeader
								assign result to NewReceivablePaymentHeader
								invoked.Company									= Company
								if (!Company.PaymentBatchNumbering)
									invoked.ReceivablePaymentHeader				= LocalReceivablePaymentHeader
								invoked.TransactionIDNumber						= BankTransactionCode.TransactionIDNumber
								invoked.Reference								= CustomerDraft.DraftNumber
								invoked.ReceivableProcessLevel					= ReceivableProcessLevel
								invoked.DepositBankCode							= BankTransactionCode
								invoked.CurrencyRateToCustomerGroupCurrency		= CurrencyRateToCustomerGroupCurrency
								invoked.CustomerGroupCurrencyMultiplicationOrDivision = CustomerGroupCurrencyMultiplicationOrDivision
								invoked.Currency								= OriginalCurrency
								invoked.CurrencyRate							= CurrencyRate
								invoked.BaseRna									= BaseAmount
								invoked.BaseCash								= BaseAmount
								invoked.BatchTotal								= BaseAmount
								invoked.DetailTotal								= BaseAmount
								invoked.BatchCount								= 1
								invoked.DetailCount								= 1
								invoked.DepositDate								= DraftDate
								invoked.GeneralLedgerDate						= MaturityDate
								invoked.ReceivedNotAppliedReceivableGeneralLedgerCode	= ReceivableProcessLevel.ReceivedNotAppliedReceivableGeneralLedgerCode
								invoked.PrepaymentReceivableGeneralLedgerCode	= ReceivableProcessLevel.PrepaymentReceivableGeneralLedgerCode
								invoked.BillOfExchange							= true
									
							PaymentBatchNumber									= NewReceivablePaymentHeader.ReceivablePaymentHeader
	
							invoke Open.Create ReceivablePayment
								fill in fields from NewReceivablePaymentHeader.ReceivablePaymentHeader
								invoked.TypeOfPayment							= "B"
								invoked.PaymentNumber							= CustomerDraft.DraftNumber
								invoked.Customer								= CustomerDraft.Customer
								invoked.ReferenceNumber							= CustomerDraft.DraftNumber
								invoked.TransactionAmount						= TransactionAmount
								invoked.BaseAmount								= BaseAmount
								invoked.OriginalCurrency						= OriginalCurrency
								invoked.ReceivedNotAppliedReceivableGeneralLedgerCode	= ReceivableGeneralLedgerCode
						
						if (!IsAcceptRequired
						or   CustomerDraft.DraftSource = "P")
							PrintFlag = "Y"		
							make transition to Accepted
						else
							make transition to Created
					
            Created	is a State
				Create is a Create Action
					restricted
					Exit Rules
						if (!IsAcceptRequired
						or   CustomerDraft.DraftSource = "P")
							make transition to Accepted
					
				Update is an Update Action
					Exit Rules
						if (AcceptDate entered 
						or  AcceptPostDate entered)
							make transition to Accepted
							
				Delete is a Delete Action
					restricted

				Cancel is an Instance Action
					Parameters
						PrmCancelDate 		is Date
							default label is "CancelDate"
					Parameter Rules
						PrmCancelDate
							default to current corporate date
							initial value is current corporate date
							constraint (PrmCancelDate >= DraftDate)
								"CancelDateCannotBeLessThanDraftDate"
							constraint (PrmCancelDate <= MaturityDate)
								"CancelDateCannotBeGreaterThanMaturityDate"

					Entrance Rules
						constraint (CustomerDraft.CancelSequence not entered)
							"BillOfExchangeHasAlreadyBeenCancelled"
					Action Rules
						if (GainLossAmount entered)
							if (!GainLossReceivableTransactionSummaryRel exists)
								invoke Create GainLossReceivableTransactionSummaryRel
							invoke Update GainLossReceivableTransactionSummaryRel
							    invoked.TodaysAmount 		+= GainLossAmount
							    invoked.PeriodAmount 		+= GainLossAmount
							    invoked.CurrentYearAmount	+= GainLossAmount
	
						for each NonReversedReceivableApplicationRel
							invoke ApplicationPosted.BillOfExchangeReverse each
	
						invoke ReleasedBatch.Delete ReceivablePaymentHeaderRel
	
						invoke UpdateDraftBalance CompanyCustomerRel
							invoked.PrmBalanceType					= 11
							invoked.TransactionDate					= DraftDate
							invoked.InvoiceLastInvoiceDate			= DraftDate
							invoked.InvoiceLastInvoiceAmount		= BaseAmount
							invoked.PrmReference					= CustomerDraft.DraftNumber
							invoked.ChangeAmount					= BaseAmount * -1
				            if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
								invoked.CustomerGroupChangeAmount	= ((BaseAmount * CurrencyRateToCustomerGroupCurrency) * -1)
							else
								invoked.CustomerGroupChangeAmount	= ((BaseAmount / CurrencyRateToCustomerGroupCurrency) * -1)
								
						invoke UpdateCurrentBalance CompanyCustomerRel
							invoked.PrmBalanceType					= 11
							invoked.TransactionDate					= DraftDate
							invoked.InvoiceLastInvoiceDate			= DraftDate
							invoked.InvoiceLastInvoiceAmount		= BaseAmount
							invoked.PrmReference					= CustomerDraft.DraftNumber
							invoked.ChangeAmount					= BaseAmount
	
						if (LastCancelSequenceRel exists)
							LocalCancelSequence = LastCancelSequenceRel.CustomerDraft.CancelSequence - 1
						else
							LocalCancelSequence = 9999
												
						for each ReceivableApplicationRel
							invoke ApplicationPosted.UpdateCancelSequence each
								invoked.BillOfExchangeCancelSequence = LocalCancelSequence
	
						invoke Cancelled.Create CustomerDraft
							fill in fields from this instance
							invoked.CustomerDraft.CancelSequence = LocalCancelSequence
							invoked.PrintFlag = "Y"	
							invoked.CancelDate = PrmCancelDate
							
						invoke Created.Delete	
						
				Accept is an Instance Action
					Parameters
						PrmAcceptDate 		is Date
							default label is "AcceptDate"
						PrmPostDate			is Date
							default label is "PostDate"
					Action Rules
						if (AcceptDate not entered)
							AcceptDate = PrmAcceptDate
						if (AcceptPostDate not entered)
							AcceptPostDate = PrmPostDate
					Exit Rules
						make transition to Accepted
					
            Accepted is a State  
            	Entrance Rules

					if (old Status < 1)

	            		if (AcceptDate not entered)
	            			AcceptDate = current corporate date
	            		if (AcceptPostDate not entered)
	            			AcceptPostDate = current corporate date
	            			
						if (BillOfExchangeAccrualCode not entered)
							BillOfExchangeAccrualCode = ReceivableProcessLevel.BOEAcceptanceReceivableGeneralLedgerCode
						
						invoke UpdateDraftBalance CompanyCustomerRel
							invoked.PrmBalanceType					= 11
							invoked.TransactionDate					= DraftDate
							invoked.InvoiceLastInvoiceDate			= DraftDate
							invoked.InvoiceLastInvoiceAmount		= BaseAmount
							invoked.PrmReference					= CustomerDraft.DraftNumber
							invoked.ChangeAmount					= BaseAmount
				            if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
								invoked.CustomerGroupChangeAmount	= (BaseAmount * CurrencyRateToCustomerGroupCurrency)
							else
								invoked.CustomerGroupChangeAmount	= (BaseAmount / CurrencyRateToCustomerGroupCurrency)
	            			
						if (BillOfExchangeAccrualCode entered)
							LocalOrigin						= "DA" // or "DB
					        LocalTransactionAmount			= TransactionAmount
							LocalAccount					= BillOfExchangeAccrualCode.DistributionAccount
			        		LocalDescription				= BillOfExchangeAccrualCode.Description
							LocalPostDate					= AcceptDate
					        include CreateDistribution
	
							LocalOrigin						= "DA" // or "DB
					        LocalTransactionAmount			= TransactionAmount * -1
							LocalAccount					= ReceivableGeneralLedgerCode.DistributionAccount
			        		LocalDescription				= ReceivableGeneralLedgerCode.Description
							LocalPostDate					= AcceptDate
					        include CreateDistribution

						
				Update is an Update Action
				
				Delete is a Delete Action
					restricted
				
				Cash is an Instance Action
					Parameters
						PrmCashDate 				is Date
							default label is "CashDate"
						PrmCashCode					is a CashCode
							default label is "CashCode"
						PrmPayerReference			is AlphaUpper size 10
							default label is "PayerReference"
						PrmCashRate					is a CashRate
							default label is "CashRate"
						PrmBankEntity				is a BankEntity
							default label is "BankEntity"
						PrmBankAccountNumber		is a BankAccountNumber
							default label is "BankAccountNumber"
						PrmRIBKey					is a RIBKey
							default label is "RIBKey"
					Parameter Rules
						PrmCashDate
							default to current corporate date
						PrmCashCode
							required
							constraint (PrmCashCode.Currency = OriginalCurrency)
								"CashCodeCurrencyMustMatchBOECurrency"
						PrmRIBKey
				            initialize VerifyRIBKey
				            VerifyRIBKey.BankEntity        = PrmBankEntity
				            VerifyRIBKey.BankAccountNumber = PrmBankAccountNumber
				            VerifyRIBKey.RIBKey            = PrmRIBKey
				            constraint (VerifyRIBKey.PerformVerifyRIBKey)
				                "R\I\B_\KeyInvalid,VendorBankAndAccountNumberNumberDoNotEqualCalculatedKey" 

					Action Rules
						if (PrmBankEntity entered
						or  PrmBankAccountNumber entered)
							BankEntity 				= PrmBankEntity
							BankAccountNumber 		= PrmBankAccountNumber
							constraint (CustomerDraftBankRel exists)
								"BankAccountOrNumberNotValid"
								
						constraint (BankEntity entered)
							"BankEntityIsRequired"

						CashDate 				= PrmCashDate
						CashCode				= PrmCashCode

						if (PrmPayerReference entered)
							PayerReference	= PrmPayerReference

						if (PrmCashRate entered)
							CashRate		= PrmCashRate

					Exit Rules
						make transition to Cashed

				Cancel is an Instance Action
					Parameters
						PrmCancelDate 		is Date
							default label is "CancelDate"
					Parameter Rules
						PrmCancelDate
							default to current corporate date
							initial value is current corporate date
							constraint (PrmCancelDate >= DraftDate)
								"CancelDateCannotBeLessThanDraftDate"
							constraint (PrmCancelDate <= MaturityDate)
								"CancelDateCannotBeGreaterThanMaturityDate"
					Entrance Rules
						constraint (CustomerDraft.CancelSequence not entered)
							"BillOfExchangeHasAlreadyBeenCancelled"
					Action Rules

						if (BillOfExchangeAccrualCode entered)
							LocalOrigin						= "DA" // or "DB
					        LocalTransactionAmount			= TransactionAmount
							LocalAccount					= ReceivableGeneralLedgerCode.DistributionAccount
			        		LocalDescription				= ReceivableGeneralLedgerCode.Description
							LocalPostDate					= AcceptDate
					        include CreateDistribution
					        
							LocalOrigin						= "DB" // or "DB
					        LocalTransactionAmount			= TransactionAmount * -1
							LocalAccount					= BillOfExchangeAccrualCode.DistributionAccount
			        		LocalDescription				= BillOfExchangeAccrualCode.Description
							LocalPostDate					= AcceptDate
					        include CreateDistribution
					        
						if (GainLossAmount entered)
							if (!GainLossReceivableTransactionSummaryRel exists)
								invoke Create GainLossReceivableTransactionSummaryRel
							invoke Update GainLossReceivableTransactionSummaryRel
							    invoked.TodaysAmount 		+= GainLossAmount
							    invoked.PeriodAmount 		+= GainLossAmount
							    invoked.CurrentYearAmount	+= GainLossAmount
	
						for each NonReversedReceivableApplicationRel
							invoke ApplicationPosted.BillOfExchangeReverse each
								invoked.PrmCancelDate		= PrmCancelDate
	
						invoke ReleasedBatch.Delete ReceivablePaymentHeaderRel
	
						invoke UpdateDraftBalance CompanyCustomerRel
							invoked.PrmBalanceType					= 11
							invoked.TransactionDate					= DraftDate
							invoked.InvoiceLastInvoiceDate			= DraftDate
							invoked.InvoiceLastInvoiceAmount		= BaseAmount
							invoked.PrmReference					= CustomerDraft.DraftNumber
							invoked.ChangeAmount					= BaseAmount * -1
				            if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
								invoked.CustomerGroupChangeAmount	= ((BaseAmount * CurrencyRateToCustomerGroupCurrency) * -1)
							else
								invoked.CustomerGroupChangeAmount	= ((BaseAmount / CurrencyRateToCustomerGroupCurrency) * -1)
								
						invoke UpdateCurrentBalance CompanyCustomerRel
							invoked.PrmBalanceType					= 11
							invoked.TransactionDate					= DraftDate
							invoked.InvoiceLastInvoiceDate			= DraftDate
							invoked.InvoiceLastInvoiceAmount		= BaseAmount
							invoked.PrmReference					= CustomerDraft.DraftNumber
							invoked.ChangeAmount					= BaseAmount
	
						if (LastCancelSequenceRel exists)
							LocalCancelSequence = LastCancelSequenceRel.CustomerDraft.CancelSequence - 1
						else
							LocalCancelSequence = 9999
												
						for each ReceivableApplicationRel
							invoke ApplicationPosted.UpdateCancelSequence each
								invoked.BillOfExchangeCancelSequence = LocalCancelSequence

						invoke Delete CustomerDraftCreditRel
	
						invoke Cancelled.Create CustomerDraft
							fill in fields from this instance
							invoked.CustomerDraft.CancelSequence = LocalCancelSequence
							invoked.PrintFlag = "Y"	
							invoked.CancelDate = PrmCancelDate
							
						invoke Accepted.Delete	

				Unaccept is an Instance Action
					valid when (!BankTransactionCode.ReceivableAcceptanceAccounting) 
					Action Rules
						constraint (!BankTransactionCode.ReceivableAcceptanceAccounting)
							"CannotUndo;AcceptanceIsNotRequired"
							
						initialize AcceptPostDate
						initialize AcceptDate
						initialize BillOfExchangeAccrualCode

						invoke UpdateDraftBalance CompanyCustomerRel
							invoked.PrmBalanceType					= 11
							invoked.TransactionDate					= DraftDate
							invoked.InvoiceLastInvoiceDate			= DraftDate
							invoked.InvoiceLastInvoiceAmount		= BaseAmount
							invoked.PrmReference					= CustomerDraft.DraftNumber
							invoked.ChangeAmount					= BaseAmount * -1
				            if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
								invoked.CustomerGroupChangeAmount	= ((BaseAmount * CurrencyRateToCustomerGroupCurrency) * -1)
							else
								invoked.CustomerGroupChangeAmount	= ((BaseAmount / CurrencyRateToCustomerGroupCurrency) * -1)
	            			
						invoke ReleasedBatch.Delete ReceivablePaymentHeaderRel
													
						if (BillOfExchangeAccrualCode entered)
							LocalOrigin						= "DA" // or "DB
					        LocalTransactionAmount			= TransactionAmount * -1
							LocalAccount					= BillOfExchangeAccrualCode.DistributionAccount
			        		LocalDescription				= BillOfExchangeAccrualCode.Description
							LocalPostDate					= AcceptDate
					        include CreateDistribution
	
							LocalOrigin						= "DA" // or "DB
					        LocalTransactionAmount			= TransactionAmount
							LocalAccount					= ReceivableGeneralLedgerCode.DistributionAccount
			        		LocalDescription				= ReceivableGeneralLedgerCode.Description
							LocalPostDate					= AcceptDate
					        include CreateDistribution

					Exit Rules
						make transition to Created
							
				Select is an Instance Action
					valid when (AllowSelectForRemit)
					Action Rules
						constraint (ContextCustomerDraftRemittance.Company entered)
							"CompanyIsRequired"
						constraint (ContextCustomerDraftRemittance.RemitType entered)
							"RemitTypeIsRequired"
						constraint (ContextCustomerDraftRemittance.ProcessLevel entered)
							"ProcessLevelIsRequired"
						constraint (BankEntity entered)
							"BankEntityMustBeEnteredToSelectRecord"
							

						if (ContextCustomerDraftRemittance.CreditLine entered)
							constraint (ContextCustomerDraftRemittance.CreditLine.CreditLimit >= (ContextCustomerDraftRemittance.CreditLine.ActualAmount + TransactionAmount))
								"CreditLimitHasBeenReached"
								
							if (ContextCustomerDraftRemittance.CreditLine.BOEDueFromDays entered)
								if (MaturityDate > current corporate date)
									LocalDaysApart = MaturityDate - current corporate date
								else
									LocalDaysApart = current corporate date - MaturityDate
	

								constraint (LocalDaysApart >= ContextCustomerDraftRemittance.CreditLine.BOEDueFromDays
								and         LocalDaysApart <= ContextCustomerDraftRemittance.CreditLine.BOEDueToDays)
									"DaysToMaturityDateOutsideOfCreditLineRange"


						RemitGroup.RemitCompany			= ContextCustomerDraftRemittance.Company
						RemitGroup.RemitProcessLevel	= ContextCustomerDraftRemittance.ProcessLevel
						RemitGroup.RemitType			= ContextCustomerDraftRemittance.RemitType
						CashCode						= ContextCustomerDraftRemittance.CashCode
						BankTransactionCode				= ContextCustomerDraftRemittance.BankTransactionCode

						if (CustomerDraftRemittanceRel.Status.Selected)
							invoke Selected.FastUpdate CustomerDraftRemittanceRel
								invoked.RemitAmount			+= TransactionAmount  
						else
							invoke Generated.FastUpdate CustomerDraftRemittanceRel
								invoked.RemitAmount			+= TransactionAmount  

						if (CustomerDraftRemittanceRel.CreditLine entered)
							invoke Update CustomerDraftRemittanceRel.CreditLine
								invoked.ActualAmount	+= TransactionAmount
								
					Exit Rules
						make transition to Selected
							
            Selected is a State  
				Update is an Update Action
					restricted
				
				IncludeInRemit is an Instance Action
					restricted
					Parameters
						PrmRemitNumber 	is a RemitNumber
							default label is "RemitNumber"
						PrmRemitDate	is Date
							default label is "RemitNumber"
					Parameter Rules
						PrmRemitNumber
							required
						PrmRemitDate
							default to current corporate date
					Action Rules
						RemitGroup.RemitNumber  	= PrmRemitNumber
						RemitDate					= PrmRemitDate
					Exit Rules
						make transition to IncludedInRemit
						
				Unselect is an Instance Action
					valid when (AllowUnselectFromRemit) 
					Action Rules
						if (CustomerDraftRemittanceRel.Status.Selected)
							invoke Selected.FastUpdate CustomerDraftRemittanceRel
								invoked.RemitAmount			-= TransactionAmount  
						else
							invoke Generated.FastUpdate CustomerDraftRemittanceRel
								invoked.RemitAmount			-= TransactionAmount  

						if (CustomerDraftRemittanceRel.CreditLine entered)
							invoke Update CustomerDraftRemittanceRel.CreditLine
								invoked.ActualAmount	-= TransactionAmount

						initialize RemitGroup
						initialize CashCode
								
					Exit Rules
						make transition to Accepted

            IncludedInRemit	is a State  
				Update is an Update Action
					restricted
					
				Exclude is an Instance Action
					Action Rules
						invoke Generated.FastUpdate CustomerDraftRemittanceRel
							invoked.RemitAmount			-= TransactionAmount  

						if (CustomerDraftRemittanceRel.CreditLine entered)
							invoke Update CustomerDraftRemittanceRel.CreditLine
								invoked.ActualAmount	-= TransactionAmount

						initialize RemitGroup
						initialize RemitDate
						initialize CashCode

					Exit Rules
						make transition to Accepted
						 
				Present is an Instance Action
					restricted
					Exit Rules
						make transition to Presented

            Presented is a State  

				Update is an Update Action
				
				Cash is an Instance Action
					Parameters
						PrmCashDate 		is Date
							default label is "CashDate"
					Parameter Rules
						PrmCashDate
							default to current corporate date
							initial value is current corporate date
					Action Rules
						CashDate 		= PrmCashDate
						if (RemitGroup.RemitType = "D")
							Risk = true
					Exit Rules
						make transition to Cashed

				Dishonor is an Instance Action
					Parameters
						PrmDishonorDate					is Date
				        PrmDishonorExpenseAmount		is an InternationalAmount
						PrmDishonorExpenseAccount		is a FinanceCodeBlock
					Parameter Rules
						PrmDishonorDate
							default to current corporate date
					Entrance Rules
						constraint (ReceivableProcessLevel.BOEDishonoredExpenseReceivableGeneralLedgerCode entered)
							"DishonorCodeNotDefinedForProcessLevel"
					Action Rules
						DishonorDate							= PrmDishonorDate
						DishonorCode							= ReceivableProcessLevel.BOEDishonoredExpenseReceivableGeneralLedgerCode
						DishonorStatus							= "P"
						if (PrmDishonorExpenseAmount entered)
							DishonorExpenseAmount				= PrmDishonorExpenseAmount
							if (PrmDishonorExpenseAccount entered)
								DishonorExpenseAccount			= PrmDishonorExpenseAccount
							else
								DishonorExpenseAccount			= ReceivableProcessLevel.BOEDishonoredExpenseReceivableGeneralLedgerCode.DistributionAccount
					Exit Rules
						make transition to Dishonored

				Exclude is an Instance Action
					Action Rules
						invoke Presented.FastUpdate CustomerDraftRemittanceRel
							invoked.RemitAmount			-= TransactionAmount  

						if (CustomerDraftRemittanceRel.CreditLine entered)
							invoke Update CustomerDraftRemittanceRel.CreditLine
								invoked.ActualAmount	-= TransactionAmount

						initialize RemitGroup
						initialize RemitDate
						initialize CashCode
						initialize Processed
					Exit Rules
						make transition to Accepted 

            Cashed is a State  

				Entrance Rules

					if (Company.CurrencyRateOverride.No)
						constraint (CashRate not entered)
							"CashRateCannotBeEntered;CompanyOverrideSetToNo"
					else
						if (Company.Currency = CustomerDraftRemittanceRel.CustomerDraftRemittance.CashCode.Currency)
							if (CashRate not entered)
								CashRate = 1
							else
								constraint (CashRate = 1)
									"CashRateMustBeSetTo1IfCompanyCurrencyIsEqualToCashCodeCurrency"
						else
							constraint (Company.MultiCurrencyProcessing)
								"CompanyIsNotMultiCurrency"

					if (!CashedBOEReceivableTransactionSummaryRel exists)
						invoke Create CashedBOEReceivableTransactionSummaryRel
					invoke Update CashedBOEReceivableTransactionSummaryRel
						if (CashRate entered)
						    invoked.TodaysAmount 		+= TransactionAmount * CashRate
						    invoked.PeriodAmount 		+= TransactionAmount * CashRate
						    invoked.CurrentYearAmount	+= TransactionAmount * CashRate
						else
						    invoked.TodaysAmount 		+= TransactionAmount
						    invoked.PeriodAmount 		+= TransactionAmount
						    invoked.CurrentYearAmount	+= TransactionAmount
				
					if (CustomerDraftRemittanceRel exists)
						if (CustomerDraftRemittanceRel.Status.Generated)
							invoke Generated.FastUpdate CustomerDraftRemittanceRel
								invoked.CashedAmount		+= TransactionAmount  
						else
							invoke Presented.FastUpdate CustomerDraftRemittanceRel
								invoked.CashedAmount		+= TransactionAmount  

					invoke UpdateDraftBalance CompanyCustomerRel
						invoked.PrmBalanceType					= 11
						invoked.TransactionDate					= DraftDate
						invoked.InvoiceLastInvoiceDate			= DraftDate
						invoked.InvoiceLastInvoiceAmount		= BaseAmount
						invoked.PrmReference					= CustomerDraft.DraftNumber
						invoked.ChangeAmount					= BaseAmount * -1
			            if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
							invoked.CustomerGroupChangeAmount	= ((BaseAmount * CurrencyRateToCustomerGroupCurrency) * -1)
						else
							invoked.CustomerGroupChangeAmount	= ((BaseAmount / CurrencyRateToCustomerGroupCurrency) * -1)
	            			
				Delete is a Delete Action
					restricted
					
				Dishonor is an Instance Action
					Parameters
						PrmDishonorDate					is Date
				        PrmDishonorExpenseAmount		is an InternationalAmount
						PrmDishonorExpenseAccount		is a FinanceCodeBlock
					Parameter Rules
						PrmDishonorDate
							default to current corporate date
					Entrance Rules
						constraint (ReceivableProcessLevel.BOEDishonoredExpenseReceivableGeneralLedgerCode entered)
							"DishonorCodeNotDefinedForProcessLevel"
					Action Rules
						DishonorDate							= PrmDishonorDate
						DishonorCode							= ReceivableProcessLevel.BOEDishonoredExpenseReceivableGeneralLedgerCode
						DishonorStatus							= "R"
						if (PrmDishonorExpenseAmount entered)
							DishonorExpenseAmount				= PrmDishonorExpenseAmount
							if (PrmDishonorExpenseAccount entered)
								DishonorExpenseAccount			= PrmDishonorExpenseAccount
							else
								DishonorExpenseAccount			= ReceivableProcessLevel.BOEDishonoredExpenseReceivableGeneralLedgerCode.DistributionAccount

						if (!Risk)
							invoke UpdateDraftBalance CompanyCustomerRel
								invoked.PrmBalanceType					= 11
								invoked.TransactionDate					= DraftDate
								invoked.InvoiceLastInvoiceDate			= DraftDate
								invoked.InvoiceLastInvoiceAmount		= BaseAmount
								invoked.PrmReference					= CustomerDraft.DraftNumber
								invoked.ChangeAmount					= BaseAmount
					            if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
									invoked.CustomerGroupChangeAmount	= BaseAmount * CurrencyRateToCustomerGroupCurrency
								else
									invoked.CustomerGroupChangeAmount	= BaseAmount / CurrencyRateToCustomerGroupCurrency

						if (!CashedBOEReceivableTransactionSummaryRel exists)
							invoke Create CashedBOEReceivableTransactionSummaryRel
						invoke Update CashedBOEReceivableTransactionSummaryRel
							if (CashRate entered)
							    invoked.TodaysAmount 		-= TransactionAmount * CashRate
							    invoked.PeriodAmount 		-= TransactionAmount * CashRate
							    invoked.CurrentYearAmount	-= TransactionAmount * CashRate
							else
							    invoked.TodaysAmount 		-= TransactionAmount
							    invoked.PeriodAmount 		-= TransactionAmount
							    invoked.CurrentYearAmount	-= TransactionAmount

					Exit Rules
						make transition to Dishonored

				Uncash is an Instance Action
					Action Rules
						constraint (!CashUpdate) 
							"CannotUncash;DT180HasBeenRun"
						if (RemitGroup entered)
							initialize CashRate
							initialize CashDate
						else
							initialize CashRate
							initialize CashDate
							initialize CashCode
													
						if (!CashedBOEReceivableTransactionSummaryRel exists)
							invoke Create CashedBOEReceivableTransactionSummaryRel
						invoke Update CashedBOEReceivableTransactionSummaryRel
							if (CashRate entered)
							    invoked.TodaysAmount 		-= TransactionAmount * CashRate
							    invoked.PeriodAmount 		-= TransactionAmount * CashRate
							    invoked.CurrentYearAmount	-= TransactionAmount * CashRate
							else
							    invoked.TodaysAmount 		-= TransactionAmount
							    invoked.PeriodAmount 		-= TransactionAmount
							    invoked.CurrentYearAmount	-= TransactionAmount

						if (CustomerDraftRemittanceRel exists)
							if (CustomerDraftRemittanceRel.Status.Cashed)
								invoke Cashed.FastUpdate CustomerDraftRemittanceRel
									invoked.CashedAmount			-= TransactionAmount  
							else
							if (CustomerDraftRemittanceRel.Status.Presented)
								invoke Presented.FastUpdate CustomerDraftRemittanceRel
									invoked.CashedAmount			-= TransactionAmount  
							else
								invoke Generated.FastUpdate CustomerDraftRemittanceRel
									invoked.CashedAmount			-= TransactionAmount  

						invoke UpdateDraftBalance CompanyCustomerRel
							invoked.ChangeAmount					= BaseAmount
							invoked.PrmBalanceType					= 11
							invoked.TransactionDate					= DraftDate
							invoked.InvoiceLastInvoiceDate			= DraftDate
							invoked.InvoiceLastInvoiceAmount		= BaseAmount
							invoked.PrmReference					= CustomerDraft.DraftNumber
				            if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
								invoked.CustomerGroupChangeAmount	= BaseAmount * CurrencyRateToCustomerGroupCurrency
							else
								invoked.CustomerGroupChangeAmount	= BaseAmount / CurrencyRateToCustomerGroupCurrency
	            			
					Exit Rules
						if (RemitGroup entered)
							make transition to Presented
						else
							make transition to Accepted

            Dishonored is a State  

				Entrance Rules
					if (DishonorExpenseAmount entered)
						initialize LocalCurrencyExchange
						LocalCurrencyExchange.TransactionAmount					= TransactionAmount
						LocalCurrencyExchange.BaseAmount.ToCurrency				= Company.Currency
						LocalCurrencyExchange.BaseAmount.EnteredCurrencyRate	= CurrencyRate
						BaseDishonorExpenseAmount								= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount

					invoke FastUpdate CompanyCustomerRel
				        invoked.NumberOfDishonoredBillOfExchange		+= 1
				        invoked.DishonoredBillOfExchangeTotal			+= BaseAmount

					if (CustomerDraftRemittanceRel exists)
						if (CustomerDraftRemittanceRel.Status.Cashed)
							invoke Cashed.FastUpdate CustomerDraftRemittanceRel
								invoked.TotalDishonoredAmount			+= TransactionAmount  
						else
						if (CustomerDraftRemittanceRel.Status.Presented)
							invoke Presented.FastUpdate CustomerDraftRemittanceRel
								invoked.TotalDishonoredAmount			+= TransactionAmount  
						else
							invoke Generated.FastUpdate CustomerDraftRemittanceRel
								invoked.TotalDishonoredAmount			+= TransactionAmount  
	
					if (CustomerDraftRemittanceRel.CreditLine entered)
						invoke Update CustomerDraftRemittanceRel.CreditLine
							invoked.ActualAmount						-= TransactionAmount
					
				Delete is a Delete Action
					restricted
					
				UnDishonor is an Instance Action
					Entrance Rules
						constraint (Resolution.NoResolution
						and         DishonorStatus entered)
							"ValidOnlyForDishonoredBOEs"

					Action Rules					

						invoke FastUpdate CompanyCustomerRel
					        invoked.NumberOfDishonoredBillOfExchange		-= 1
					        invoked.DishonoredBillOfExchangeTotal			-= BaseAmount
	
						if (CustomerDraftRemittanceRel exists)
							if (CustomerDraftRemittanceRel.Status.Cashed)
								invoke Cashed.FastUpdate CustomerDraftRemittanceRel
									invoked.TotalDishonoredAmount			-= TransactionAmount  
							else
							if (CustomerDraftRemittanceRel.Status.Presented)
								invoke Presented.FastUpdate CustomerDraftRemittanceRel
									invoked.TotalDishonoredAmount			-= TransactionAmount  
							else
								invoke Generated.FastUpdate CustomerDraftRemittanceRel
									invoked.TotalDishonoredAmount			-= TransactionAmount  
		
						if (CustomerDraftRemittanceRel.CreditLine entered)
							invoke Update CustomerDraftRemittanceRel.CreditLine
								invoked.ActualAmount						+= TransactionAmount
					
				        if (DishonorStatus.PostCashedAtRiskBoe)
							if (!Risk)
								invoke UpdateDraftBalance CompanyCustomerRel
									invoked.PrmBalanceType					= 11
									invoked.TransactionDate					= DraftDate
									invoked.InvoiceLastInvoiceDate			= DraftDate
									invoked.InvoiceLastInvoiceAmount		= BaseAmount
									invoked.PrmReference					= CustomerDraft.DraftNumber
									invoked.ChangeAmount					= BaseAmount * -1
						            if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
										invoked.CustomerGroupChangeAmount	= ((BaseAmount * CurrencyRateToCustomerGroupCurrency) * -1)
									else
										invoked.CustomerGroupChangeAmount	= ((BaseAmount / CurrencyRateToCustomerGroupCurrency) * -1)

							if (!CashedBOEReceivableTransactionSummaryRel exists)
								invoke Create CashedBOEReceivableTransactionSummaryRel
							invoke Update CashedBOEReceivableTransactionSummaryRel
								if (CashRate entered)
								    invoked.TodaysAmount 		+= TransactionAmount * CashRate
								    invoked.PeriodAmount 		+= TransactionAmount * CashRate
								    invoked.CurrentYearAmount	+= TransactionAmount * CashRate
								else
								    invoked.TodaysAmount 		+= TransactionAmount
								    invoked.PeriodAmount 		+= TransactionAmount
								    invoked.CurrentYearAmount	+= TransactionAmount

					Exit Rules

				        if (DishonorStatus.PostPresentedBoe)
				        	Status = 4
				        else
				        if (DishonorStatus.PostCashedAtRiskBoe)
				        	Status = 6





						
				Renegotiate is an Instance Action
					valid when (AllowDishonoredResolution)
					Parameters
						PrmPaymentAmount				is an InternationalAmount
						PrmCashCode						is a CashCode
						PrmPostingDate					is Date
						PrmDocumentNumber				is a DraftNumber				
						PrmFinanceCharges				is an InternationalAmount
						PrmRevenueAccount				is a FinanceCodeBlock
						PrmGeneralLedgerCode			is a ReceivableGeneralLedgerCode
							default label is "GlobalLedgerCode"
						PrmTermsCode					is a TermsCode

					Parameter Rules
						PrmPaymentAmount
							constraint (PrmPaymentAmount decimals <= PrmCashCode.BankAccountNumber.Currency.NumberOfDecimals)
								"CashCode<PrmCashCode>OnlyAllows<PrmCashCode.BankAccountNumber.Currency.NumberOfDecimals>Decimals"
							if (PrmDocumentNumber entered)
								required
									"PaymentAmountRequiredIfDocumentNumberEntered"
							constraint (PrmPaymentAmount <= TransactionAmount + PrmFinanceCharges)
								"PaymentAmountCannotBeGreaterThanTransactionAmount+FinanceCharges"
						PrmCashCode
							default to CashCode
							initial value is CashCode
							constraint (PrmCashCode.Currency = OriginalCurrency)
								"CashCodeCurrencyMustEqualBOECurrency"
						PrmPostingDate
							default to current corporate date
							initial value is current corporate date
						PrmDocumentNumber
							if (PrmPaymentAmount entered)
								required
									"DocumentNumberRequiredIfPaymentAmountEntered"
						PrmFinanceCharges
						PrmRevenueAccount
							default to ReceivableProcessLevel.BOEFinancialRevenueReceivableGeneralLedgerCode.DistributionAccount
							initial value is ReceivableProcessLevel.BOEFinancialRevenueReceivableGeneralLedgerCode.DistributionAccount
						PrmGeneralLedgerCode
							if (PrmPaymentAmount != TransactionAmount + PrmFinanceCharges)
								default to CompanyCustomerRel.ReceivableGeneralLedgerCode
								default to ReceivableGeneralLedgerCode
						PrmTermsCode
							if (PrmPaymentAmount != TransactionAmount + PrmFinanceCharges)
								default to CompanyCustomerRel.DebitCreditMemoTermsCode

					Action Rules
					
						if (PrmPaymentAmount entered)   
							LocalCashCode											= PrmCashCode
							LocalOrigin												= "DH"
					        LocalTransactionAmount									= PrmPaymentAmount
							LocalAccount											= LocalCompanyCashCodeRel.CashAccount
			        		LocalDescription										= "RenegotiateBOE " + CustomerDraft.DraftNumber
			        		LocalPostDate											= PrmPostingDate
							include CreateDistribution			
			 
							initialize LocalCurrencyExchange
							LocalCurrencyExchange.TransactionAmount					= PrmPaymentAmount
							LocalCurrencyExchange.BaseAmount.ToCurrency				= Company.Currency
							LocalCurrencyExchange.BaseAmount.EnteredCurrencyRate	= CurrencyRate
				
							if (0 = 1)
								invoke Unreleased.CreateFromReceivables CashLedgerTransaction
									invoked.CashCode									= PrmCashCode
									invoked.BankTransactionCode        					= Company.DepositBankCode
									invoked.IssueTranAmt				      			= PrmPaymentAmount
									invoked.BankAccountCurrencyExchangeRate         	= CurrencyRate
									invoked.IssuedBankAmount     						= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount
									if (BankTransactionCode.TransactionType.DebitTransaction)
										invoked.BankTransactionSign        				= "DR"
									else
										invoked.BankTransactionSign        				= "CR"
									invoked.Description 								= "By Dishonor Resolution"
									invoked.BankTransactionType							= Company.DepositBankCode.BankTransactionType
									invoked.Currency   				     				= OriginalCurrency
									invoked.TransactionNumber        	                = PrmDocumentNumber
									invoked.SourceCode        							= "AR"
									invoked.Company										= Company
									invoked.CompanyCustomer								= CustomerDraft.Customer
									invoked.IssueDate        							= current corporate date
									invoked.GeneralLedgerPostDate         				= PrmPostingDate
									invoked.Reference        							= CustomerDraft.DraftNumber
									invoked.ReceivablesCompanyProcessLevel.ReceivableProcessLevel	= ReceivableProcessLevel
									invoked.ReceivablesCompanyProcessLevel.ReceivableCompany		= Company				
	
							
							if (!CashedBOEReceivableTransactionSummaryRel exists)
								invoke Create CashedBOEReceivableTransactionSummaryRel
							invoke Update CashedBOEReceivableTransactionSummaryRel
							    invoked.TodaysAmount 								+= PrmPaymentAmount
							    invoked.PeriodAmount 								+= PrmPaymentAmount
							    invoked.CurrentYearAmount							+= PrmPaymentAmount

						
							LocalOrigin												= "DH"
					        LocalTransactionAmount									= PrmPaymentAmount * -1
							LocalAccount											= DishonorCode.DistributionAccount
			        		LocalDescription										= "RenegotiateBOE " + CustomerDraft.DraftNumber
			        		LocalPostDate											= PrmPostingDate
							include CreateDistribution			

							if (PrmFinanceCharges entered)						
								LocalOrigin											= "DH"
						        LocalTransactionAmount								= PrmFinanceCharges
								LocalAccount										= PrmRevenueAccount
				        		LocalDescription									= "RenegotiateBOE " + CustomerDraft.DraftNumber
				        		LocalPostDate										= PrmPostingDate
								include CreateDistribution			

							if (PrmPaymentAmount < TransactionAmount - PrmFinanceCharges)
								LocalOrigin											= "DH"
						        LocalTransactionAmount								= TransactionAmount + PrmFinanceCharges - PrmPaymentAmount
								LocalAccount										= ReceivableGeneralLedgerCode.DistributionAccount
				        		LocalDescription									= "RenegotiateBOE " + CustomerDraft.DraftNumber
				        		LocalPostDate										= PrmPostingDate
								include CreateDistribution			

								LocalInvoiceAmount									= LocalTransactionAmount
								
								invoke FastUpdate CompanyCustomerRel
							        invoked.DishonoredRenegotiatedBillOfExchange	+= 1
							        
							    Resolution											= "1"
							else
								invoke FastUpdate CompanyCustomerRel
							        invoked.ReconciledDishonoredBillOfExchange		+= 1
							        
							    Resolution											= "3"
							
							Risk 													= false
						else  
							invoke FastUpdate CompanyCustomerRel
						        invoked.ReconciledDishonoredBillOfExchange			+= 1

							LocalOrigin												= "DH"
					        LocalTransactionAmount									= TransactionAmount - PrmFinanceCharges
							LocalAccount											= ReceivableGeneralLedgerCode.DistributionAccount
			        		LocalDescription										= "RenegotiateBOE " + CustomerDraft.DraftNumber
			        		LocalPostDate											= PrmPostingDate
							include CreateDistribution			

							LocalOrigin												= "DH"
					        LocalTransactionAmount									= TransactionAmount
							LocalAccount											= DishonorCode.DistributionAccount
			        		LocalDescription										= "RenegotiateBOE " + CustomerDraft.DraftNumber
			        		LocalPostDate											= PrmPostingDate
							include CreateDistribution			

							if (PrmFinanceCharges > 0)
								LocalOrigin											= "DH"
						        LocalTransactionAmount								= PrmFinanceCharges * -1
								LocalAccount										= PrmRevenueAccount
				        		LocalDescription									= "RenegotiateBOE " + CustomerDraft.DraftNumber
				        		LocalPostDate										= PrmPostingDate
								include CreateDistribution		
								
							LocalInvoiceAmount										= TransactionAmount + PrmFinanceCharges
							
						    Resolution												= "3"


						
						invoke UpdateDraftBalance CompanyCustomerRel
							invoked.PrmBalanceType									= 11
							invoked.TransactionDate									= DraftDate
							invoked.InvoiceLastInvoiceDate							= DraftDate
							invoked.InvoiceLastInvoiceAmount						= BaseAmount
							invoked.PrmReference									= CustomerDraft.DraftNumber
							invoked.ChangeAmount									= BaseAmount * -1
				            if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
								invoked.CustomerGroupChangeAmount					= ((BaseAmount * CurrencyRateToCustomerGroupCurrency) * -1)
							else
								invoked.CustomerGroupChangeAmount					= ((BaseAmount / CurrencyRateToCustomerGroupCurrency) * -1)
					
						ResolvedDate 												= PrmPostingDate							


						if (PrmFinanceCharges entered)

							initialize LocalCurrencyExchange
							LocalCurrencyExchange.TransactionAmount					= PrmFinanceCharges
							LocalCurrencyExchange.BaseAmount.ToCurrency				= Company.Currency
							LocalCurrencyExchange.BaseAmount.EnteredCurrencyRate	= CurrencyRate

	        				AdditionalRevenueAmount									= PrmFinanceCharges
	        				BaseAdditionalRevenueAmount								= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount
	        				AdditionalRevenueAccount								= PrmRevenueAccount

						if (PaymentBatchNumber entered)
							for each ReceivableApplicationBatchNumberRel
								if (each.ReceivableInvoiceDetailRel exists) 
									invoke NegotiatedDraftUpdate each.ReceivableInvoiceDetailRel

							if (PrmPaymentAmount entered)
								initialize LocalCurrencyExchange
								LocalCurrencyExchange.TransactionAmount					= PrmPaymentAmount
								LocalCurrencyExchange.BaseAmount.ToCurrency				= Company.Currency
								LocalCurrencyExchange.BaseAmount.EnteredCurrencyRate	= CurrencyRate

								if (ReceivablePaymentRel.Status.Open)
									invoke NegotiatedDraftUpdate ReceivablePaymentRel
										invoked.AppliedAmount							= PrmPaymentAmount
										invoked.BaseAppliedAmount						= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount
							else
								if (ReceivablePaymentRel.Status.Open)
									invoke NegotiatedDraftUpdate ReceivablePaymentRel
										invoked.AppliedAmount							= TransactionAmount
										invoked.BaseAppliedAmount						= BaseAmount
								
						else
							for each ReceivableApplicationRel
								if (each.ReceivableInvoiceDetailRel exists) 
									invoke NegotiatedDraftUpdate each.ReceivableInvoiceDetailRel
						
						initialize LocalCurrencyExchange
						LocalCurrencyExchange.TransactionAmount							= LocalInvoiceAmount
						LocalCurrencyExchange.BaseAmount.ToCurrency						= Company.Currency
						LocalCurrencyExchange.BaseAmount.EnteredCurrencyRate			= CurrencyRate

						if (!DebitCreditTransactionSummaryRel exists)
							invoke Create DebitCreditTransactionSummaryRel
						invoke Update DebitCreditTransactionSummaryRel
						    invoked.TodaysAmount 									+= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount
						    invoked.PeriodAmount 									+= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount
						    invoked.CurrentYearAmount								+= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount

						if (LocalInvoiceAmount entered)
							increment Company.LastRTMPaymentNumber by 1
							LocalInvoice													= "RM-" + Company.LastRTMPaymentNumber
				
							invoke Released.CreateReleasedFromPayment ReceivableInvoice
								assign result to NewReceivableInvoice
								invoked.Company												= Company
								invoked.Customer											= Customer
								invoked.ReceivableInvoiceType								= "D"
								invoked.AlternateReceivableInvoiceType						= "D"
								invoked.System												= "AR"
								invoked.ReceivableInvoice									= LocalInvoice
								invoked.BatchNumber											= current corporate date
								invoked.ReceivableProcessLevel								= ReceivableProcessLevel
								invoked.ReceivableGeneralLedgerCode							= PrmGeneralLedgerCode
								invoked.GeneralLedgerDate									= PrmPostingDate
								invoked.TransactionDate										= PrmPostingDate
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount = LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount
								invoked.InvoiceAmount.CurrencyAmount						= LocalInvoiceAmount
								invoked.BankTransactionCode									= BankTransactionCode
								invoked.BankTransactionType									= BankTransactionCode.BankTransactionType
				
								invoked.ReceivableCrossReference.ReceivableInvoiceType		= "B"
								invoked.ReceivableCrossReference.ReceivableInvoice			= CustomerDraft.DraftNumber
								invoked.Description											= "Renegotiate Dishonored BOE"
								invoked.OriginalCurrency									= OriginalCurrency
								invoked.FromReceivablePayment								= true
								invoked.Origin												= "R"
								invoked.CurrencyDecimalsNumber								= CurrencyDecimalsNumber
						        invoked.CurrencyRateToCustomerGroupCurrency					= CurrencyRateToCustomerGroupCurrency
								invoked.CustomerGroupCurrencyMultiplicationOrDivision		= CustomerGroupCurrencyMultiplicationOrDivision
								invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= CurrencyRate
								invoked.CurrencyMultiplicationOrDivision					= CurrencyMultiplicationOrDivision
						        invoked.CurrencyRateToCustomerGroupCurrency					= CurrencyRateToCustomerGroupCurrency
						        invoked.CustomerGroupCurrencyMultiplicationOrDivision		= CustomerGroupCurrencyMultiplicationOrDivision
								invoked.TermsCode											= PrmTermsCode
								invoked.SummarizeDetail										= false								
				
							initialize CalculateTerms
							TermsCode														= PrmTermsCode
							CalculateTerms.TransactionDate 									= PrmPostingDate
							CalculateTerms.TransactionAmount 								= LocalInvoiceAmount
				
							LocalTermsCalTrigger 											= CalculateTerms.TermsCalTrigger
							constraint (CalculateTerms.OutputErrorNumber not entered)
								"<CalculateTerms.OutputErrorMessage>"
				

	
							LoopCounter = 1
							while (LoopCounter <= 99
							and    CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered)
	




	
								invoke Create ReceivableInvoiceDetail
									fill in fields from NewReceivableInvoice.ReceivableInvoice
									invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"									
									invoked.ReceivableInvoiceDetail.Invoice                     = LocalInvoice
									invoked.AlternateReceivableInvoiceType						= "D"
				            		invoked.Status												= 1
				            		invoked.DueDate 											= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DueDate
									invoked.InvoiceAmount.CurrencyAmount					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment

									if (LoopCounter = 	1)
					            		invoked.DiscountDate.DiscDate[1]						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
					            		invoked.DiscountPercent.DiscPct[1] 						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent				            		
					            		invoked.DiscountDate.DiscDate[2]						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountDate
					            		invoked.DiscountPercent.DiscPct[2] 						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent	
					            		invoked.DiscountDate.DiscDate[3]						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountDate
					            		invoked.DiscountPercent.DiscPct[3] 						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent	
				            		invoked.OriginIntrastatCountry								= Company.PostalAddress.Country	
									invoked.DestinationIntrastatCountry							= CustomerRel.PostalAddress.Country
								increment LoopCounter
	
							if  (BankTransactionCode.BankTransactionType.BillOfExchangePayment
							and  BankTransactionCode.TransactionOrigin.Receivable
							and CompanyCustomerRel.BillOfExchangeProcessing.Individual)
								if (PaymentBatchNumber entered
								and ReceivablePaymentRel.Status.Open)
									invoke NegotiatedDraftUpdate ReceivablePaymentRel
										invoked.AppliedAmount								= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
										invoked.BaseAppliedAmount							= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount
									
					
				WriteOff is an Instance Action
					valid when (AllowDishonoredResolution)
					Parameters
						PrmLossAccount					is a FinanceCodeBlock
						PrmWriteOffDate					is Date
					Parameter Rules
						PrmWriteOffDate
							default to current corporate date
							initial value is current corporate date
	
					Action Rules
	
						invoke FastUpdate CompanyCustomerRel
					        invoked.WriteOffDishonoredBillOfExchange	+= 1
								        
						LocalOrigin												= "DH"
				        LocalTransactionAmount									= TransactionAmount
						LocalAccount											= PrmLossAccount
		        		LocalDescription										= "Write Off BOE " + CustomerDraft.DraftNumber
		        		LocalPostDate											= PrmWriteOffDate
						include CreateDistribution			
	
						LocalOrigin												= "DH"
				        LocalTransactionAmount									= TransactionAmount * -1
						LocalAccount											= DishonorCode.DistributionAccount
		        		LocalDescription										= "Write Off BOE " + CustomerDraft.DraftNumber
		        		LocalPostDate											= PrmWriteOffDate
						include CreateDistribution			
	
						invoke UpdateDraftBalance CompanyCustomerRel
							invoked.PrmBalanceType								= 11
							invoked.TransactionDate								= DraftDate
							invoked.InvoiceLastInvoiceDate						= DraftDate
							invoked.InvoiceLastInvoiceAmount					= BaseAmount
							invoked.PrmReference								= CustomerDraft.DraftNumber
							invoked.ChangeAmount								= BaseAmount * -1
				            if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
								invoked.CustomerGroupChangeAmount				= ((BaseAmount * CurrencyRateToCustomerGroupCurrency) * -1)
							else
								invoked.CustomerGroupChangeAmount				= ((BaseAmount / CurrencyRateToCustomerGroupCurrency) * -1)
						
						if (!WriteOffTransactionSummaryRel exists)
							invoke Create WriteOffTransactionSummaryRel
						invoke Update WriteOffTransactionSummaryRel
						    invoked.TodaysAmount 								+= BaseAmount
						    invoked.PeriodAmount 								+= BaseAmount
						    invoked.CurrentYearAmount							+= BaseAmount
					
						Resolution												= "2"
						ResolvedDate											= PrmWriteOffDate

            Cancelled is a State  

				Create is a Create Action
					restricted
					
				Delete is a Delete Action
					restricted
				
				Recreate is an Instance Action
					Action Rules
						constraint (!NonCancelledCustomerDraftRel exists) 
							"NonCancelledDraftNumberAlreadyExists"
						invoke CreatedUnreleased.Create CustomerDraft
							fill in fields from this instance
							initialize invoked.CustomerDraft.CancelSequence
							initialize invoked.RemitGroup
							initialize invoked.CashCode
							initialize invoked.AppliedAmount
							initialize invoked.BaseAppliedAmount
							initialize invoked.DishonorStatus
							initialize invoked.DishonorExpenseAmount
							initialize invoked.BaseDishonorExpenseAmount
							initialize invoked.DishonorExpenseAccount
							initialize invoked.BankExpenseAmount
							initialize invoked.BaseBankExpenseAmount
							initialize invoked.BankExpenseAccount
							initialize invoked.AdditionalRevenueAmount
							initialize invoked.BaseAdditionalRevenueAmount
							initialize invoked.AdditionalRevenueAccount
							initialize invoked.ResolvedDate
							initialize invoked.DishonorDate
							initialize invoked.CashDate
							initialize invoked.AcceptDate
							initialize invoked.CancelDate
							initialize invoked.CashRate
							initialize invoked.Resolution
							invoked.Processed = false
							invoked.CashUpdate = false
							invoked.Risk = false
							invoked.TransientRecreate = true
							
							
            Historical is a State














	Actions
		
		DraftTotal is a Set Action
			restricted
			Parameters
				PrmCustomerGroup is a CustomerGroup
				PrmCustomerRange is a CustomerRange
				PrmResult        is a ReceivablesJobResult
				PrmUpdate				is AlphaUpper size 1
					States
						ReportOnly		value is "R"
						UpdateAndReport	value is "U"  
				PrmNbrOfRunGroups       is Numeric 3
				PrmRunGroup             is Numeric 3
			Instance Selection
				where(PrmCustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup
				and Company.CustomerGroupField.CustomerGroup = PrmCustomerGroup
				and (PrmCustomerRange	not entered
				or	 Customer within PrmCustomerRange)
				and (PrmNbrOfRunGroups <= 1
				or  (Customer % PrmNbrOfRunGroups) = PrmRunGroup))
				
			Sort Order is primary
			
			Local Fields
				LocalDraftBal         is an InternationalAmount
				LocalWorkAmount       is an InternationalAmount
				LocalGroupDraft       is an InternationalAmount
				SkipRecord			  is Boolean
				LocalCheck            is  Boolean
			Action Rules
				Company Set Rules
					Exit Rules
						if (!LocalCheck)
							invoke DraftBalances LocalCompanyCustomerRel
								invoked.PrmLocalDraftBal      = LocalDraftBal
								invoked.PrmResult             = PrmResult
								invoked.PrmUpdate             = PrmUpdate
							if(PrmUpdate.UpdateAndReport)
								invoke UpdateDraftBalance CustomerRel	
									invoked.ChangeAmount     = LocalGroupDraft
							initialize LocalDraftBal
						LocalCheck = false
				Customer Set Rules
					Exit Rules
						invoke DraftBalances LocalCompanyCustomerRel
							invoked.PrmLocalDraftBal      = LocalDraftBal
							invoked.PrmResult             = PrmResult
							invoked.PrmUpdate             = PrmUpdate
						if(PrmUpdate.UpdateAndReport)
							invoke UpdateDraftBalance CustomerRel	
								invoked.ChangeAmount     = LocalGroupDraft
						initialize LocalDraftBal
						LocalCheck = true
				Instance Rules
					if (Status.Cancelled or Status.Historical or Status.CreatedUnreleased
						or (Status.Cashed and !Risk))
							SkipRecord = true
					else
						if (Status.Dishonored)
							if (DishonorDate entered)
								if (Resolution entered and ResolvedDate entered)
									SkipRecord = true
							else
								if (CashDate entered)
									SkipRecord = true

					if (!SkipRecord)
						LocalDraftBal = LocalDraftBal + TransactionAmount
						if (CustomerGroupCurrencyMultiplicationOrDivision.Multiply)
							LocalWorkAmount = TransactionAmount * CurrencyRateToCustomerGroupCurrency
						else
							LocalWorkAmount = TransactionAmount / CurrencyRateToCustomerGroupCurrency
						LocalGroupDraft = LocalGroupDraft + LocalWorkAmount
						
						LocalCompany     = Company
						LocalCustomer    = Customer
