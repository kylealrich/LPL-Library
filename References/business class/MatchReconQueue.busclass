MatchReconQueue is a BusinessClass
	owned by ma
	prefix is WRQ
	classic name is MAWORKQ

	Ontology
		symbolic key is MatchReconQueue


	Patterns
		implements StaticJava
		disable AuditIndex
		disable Auditing
		implements Archivable

	Persistent Fields



		Vendor							is a snapshot of PayablesInvoice.Vendor
		VendorSearchName        		is a snapshot of PayablesInvoice.Vendor.VendorSearchName
			classic name is VENDOR-SNAME
		PurchaseOrder
			classic name is PO-NUMBER
		Invoice							is a snapshot of PayablesInvoice.Invoice
		Suffix							is a snapshot of PayablesInvoice.Suffix
		CancelSequence        			is a snapshot of PayablesInvoice.CancelSequence
			classic name is CANCEL-SEQ
		DueDate							is a snapshot of PayablesInvoice.DueDate
		InvoiceAmount           		is a snapshot of PayablesInvoice.InvoiceAmount.CurrencyAmount
			classic name is INVOICE-AMT
		InvoiceCommentFlag      		is AlphaUpper size 1
			classic name is INV-COMMENTS
		POCommentFlag           		is AlphaUpper size 1
			classic name is PO-COMMENTS
		HasServiceLines					is AlphaUpper size 1

			classic name is SERVICE-LINES
		Buyer
		Location                		is an InventoryLocation
		Operator
		ItemCostWithAddOnCharge 		is an InternationalCost
			classic name is EXT-UNIT-WAOC
		ChargebackType					is a LineChargebackOption	
			classic name is CB-TYPE
		MatchWork
			delete ignored
		PendingSet						is Numeric 5
		PendingType						is Alpha 1
			States
				Automatic	value is 1
				Cost		value is 2
				Quantity	value is 3
		Previous1						is Numeric 5
		Previous2						is Numeric 5
		Previous3						is Numeric 5
		Chargeback						is Boolean
		ChargebackReason				is a ProcurementReasonCode  
		ChargebackReference				is a Reference
		ChargebackIncludeAOC			is Boolean
		View							is Numeric 1
			States
				InvoiceMatch	value is 1
				DetailMatch		value is 2
				MatchComplete   value is 3

		BuildStamp						is TimeStamp

	Context Fields
		FinanceResource

	Local Fields
		NewMatchWork						is a MatchWork view
		LocalMatchCompany					is like MatchCompany
		LocalMatchWork						is like MatchWork
		LocalReceipt						is like PurchaseOrderReceipt
		LocalReceiptLine					is like PurchaseOrderReceiptLine
		LocalPurchaseOrder					is like PurchaseOrder
		LocalPurchaseOrderLine				is like PurchaseOrderLine
		LocalContract						is like Contract
		LocalContractLine					is like ContractLine
		LocalPayablesInvoiceDetail			is like PayablesInvoiceDetail
		LocalAddOnCharge					is like AddOnCharge
		LocalInvoiceAddOnCharge				is like PayablesInvoiceAddOnCharge
		LocalItem							is an Item
		UOMCalculation

		LocalPayablesInvoice				is like PayablesInvoice

		LocalCompanyGroup					is like GeneralLedgerCompanyGroup

		WorkMatchedNotReceivedQuantity		is an InternationalAmount
		WorkDifference						is an InternationalAmount
		Difference3Amount					is an InternationalAmount
		WorkAmount							is an InternationalAmount
		WorkCost							is like InternationalCost

		Skip								is Boolean
		NextSentence						is Boolean

		CompanyMatch						is Boolean
		VendorMatch							is Boolean



		LocalFinanceResource				is like FinanceResource
		LocalHROrganization					is like HROrganization
		CompletionMessage					is Alpha 250

		Error								is Boolean
		ErrorMessage 						is Alpha 200
		ActionCompleteMessage				is Alpha size 250		

		LocalSet							is Numeric 5

		LocalPoolOption						is a PoolOption

		ReconciliationInvoiceMatchedAmount	is an InternationalAmount	
		ReconciliationInvoiceQuantity		is a Quantity				
		ReconciliationInvoiceAddOnCharge	is an InternationalAmount	

		ReconciliationReceiptMatchedAmount	is an InternationalAmount	
		ReconciliationReceiptAddOnCharge	is an InternationalAmount	
		ReconciliationReceiptQuantity		is a Quantity				

		ReconciliationServiceTotal			is an InternationalAmount	
		ReconciliationServiceAddOnCharge	is an InternationalAmount	
		ReconciliationServiceQuantity		is a Quantity				

		LocalPendingLineQuantity			is a Quantity
		LocalPendingLineExtendedAmount		is an InternationalAmount
		SumPendingLineComplete				is Boolean
		LocalQuantityTotal					is like Quantity

		Sub1								is Numeric 3
		Done								is Boolean
		LocalMatchRule						is a MatchRule
		LocalMatchRuleToleranceGroup		is a MatchRuleToleranceGroup
		LocalMatchMessageToleranceGroup		is a MatchMessageToleranceGroup
		WithinTolerance						is Boolean
		PercentToleranceAmount				is an InternationalCost
		DifferenceWorkAmount				is an InternationalCost
		Difference1Amount					is an InternationalCost
		Difference1Absolute					is an InternationalCost
		PercentToleranceAmount2				is an InternationalCost
		Difference2WorkAmount				is an InternationalCost
		Difference2Amount					is an InternationalCost
		Difference2Absolute					is an InternationalCost
		BypassBuildWorkFileConstraints		is Boolean
		Continue							is Boolean

		WorkOpenToMatchQuantity					is like Quantity
		WorkUnmatchedQuantity					is like Quantity
		WorkMatchAmount							is an InternationalCost
		WorkUnitCost							is like UnitCost
		WorkAmount1								is an InternationalCost
		WorkAmount2								is an InternationalCost
		WorkAmount9								is an InternationalCost
		WorkMatchUnitCost						is an InternationalCost

		DetailsVBuyMatchedQuantity          	is a Quantity	
		ReceiptLineVbuyReceiptQuantity          is a Quantity

		MessageQuantityDifference				is like Quantity			
		MessageUnitCostDifference				is like UnitCost			
		MessageExtendedDifference				is an InternationalAmount	
		MessageOverQuantityPercentDifference	is like Quantity				
		MessageUnderQuantityPercentDifference	is like Quantity				
		MessageOverUnitPercentDifference		is like Percent				
		MessageUnderUnitPercentDifference		is like Percent				
		MessageOverTotalPercentDifference		is like Percent				
		MessageOverCtPercentDifference			is like Percent				
		MessageUnmatchedQuantity				is like Quantity			
		LocalConfigurationParameter				is Alpha size up to 200
		LocalWithDiscrepancy					is Boolean		
		LocalSelectedNotCBWithDisc				is Boolean		
		
	Rule Blocks

		CreateWorkFiles
			if (MatchWork not entered)
				if (View not entered)
					if (Vendor.RequireMatchReference)
						View = 1
					else
					if (PayablesInvoice.MatchPrepayment
					and PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
						View = 1
					else
					if (PayablesInvoice.MatchPrepayment
					and PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay)
						View = 2
					else
					if (!PayablesInvoice.HasInvoiceLines)
						View = 1
					else
					if  (FinanceResource entered
					and  FinanceResource.MatchPreference.InvoiceMatch)
						View = 1
					else
						View = 2

				initialize ErrorMessage



				invoke CreateFromRecon MatchWork
					resume on error
						ErrorMessage = error message
					assign result to NewMatchWork
					invoked.Company							= Company
					invoked.PayablesInvoice					= PayablesInvoice
					invoked.PurchaseOrder					= PurchaseOrder
					invoked.MatchPoint						= "1"
					invoked.ProcessMode						= "R"
					invoked.DocumentType					= "I"
					if (View.InvoiceMatch)
						invoked.ReconciliationMatchLevel	= "IM"
						invoked.MatchLevel					= "IM"
					else
						invoked.ReconciliationMatchLevel	= "DM"
						invoked.MatchLevel					= "DM"
					invoked.BypassBuildWorkFileConstraints	= BypassBuildWorkFileConstraints

				if (ErrorMessage not entered)
					MatchWork								= NewMatchWork.MatchWork

			if (PayablesInvoice.BackgroundProcessing not entered
			and ErrorMessage not entered)
				if (View.InvoiceMatch)
					invoke MagicInvoiceMatch
					if  (PendingInvoicesRel exists)
						invoke CreateInvoiceSet
				else
					invoke AutoMatch
					if (PendingSetInvoiceDetailRel exists)
						invoke CreateSet

		ClearSets
			initialize Chargeback
			initialize ChargebackReason
			invoke Purge MatchReconQueueSetRel
			PendingSet = 1
			initialize Previous1
			initialize Previous2
			initialize Previous3

		CheckInvoiceForClerk

			constraint (LocalFinanceResourceActorRel exists)
				"FinanceResourceNotFoundForHROrganization<LocalHROrganization>FinanceResource<LocalFinanceResource>"

			CompanyMatch	= false
			VendorMatch		= false

			for each LocalFinanceResourceActorRel.SmartReconCompanyGroupsRel
				LocalCompanyGroup = each.CompanyGroup
				if (GLCompanyGroupMemberRel exists)
					CompanyMatch = true
					end for each

			if (!CompanyMatch)
				for each LocalFinanceResourceActorRel.SmartReconCompaniesRel
					if (each.Company = Company)
						CompanyMatch = true
						end for each

			constraint (CompanyMatch)
				"CompanyNotWithinSmartReconciliationSetupForFinanceResource<FinanceResourceActorRel.PreferredFirstAndLastName>"

			for each LocalFinanceResourceActorRel.SmartReconVendorsRel
				if (each.Vendor = Vendor)
					VendorMatch = true
					end for each

			if (!VendorMatch)
				for each LocalFinanceResourceActorRel.SmartReconVendorClassesRel
					if (each.VendorClass = Vendor.VendorClass)
						VendorMatch = true
						end for each

			if (!VendorMatch)
				for each LocalFinanceResourceActorRel.SmartReconVendorRangesRel
					if  (Vendor.VendorSearchName[1:3] >= each.Range.From
					and  Vendor.VendorSearchName[1:3] <= each.Range.To)
						VendorMatch = true
						end for each

			constraint (VendorMatch)
				"VendorNotWithinSmartReconciliationSetupForFinanceResource<FinanceResourceActorRel.PreferredFirstAndLastName>"

		SumPendingLine

			if (!SumPendingLineComplete)
				for each PendingSetInvoiceDetailRel
					LocalPendingLineQuantity		+= each.MatchedQuantity
					LocalPendingLineExtendedAmount	+= each.DerivedExtendedMatchAmount
				SumPendingLineComplete				= true

		303aCheckExtUnderTol
			WithinTolerance = false

			PercentToleranceAmount			= DifferenceWorkAmount * LocalMatchRuleToleranceGroup.MatchUnderAmountPercentage




			if (Difference1Amount < 0)
				Difference1Absolute			= Difference1Amount * -1
			else
				Difference1Absolute			= Difference1Amount * -1

			if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition not entered)
				if  (LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance entered
				and  Difference1Absolute <= LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance)
					WithinTolerance = true
				else
				if  (LocalMatchRuleToleranceGroup.MatchUnderAmountPercentage entered
				and  Difference1Absolute <= PercentToleranceAmount)
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition.And)
				if  (Difference1Absolute > LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance
				and  Difference1Absolute > PercentToleranceAmount)
					WithinTolerance	= false
				else
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition.Or)
				if  (Difference1Absolute <= LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance)
					if  (Difference1Absolute <= PercentToleranceAmount)
						WithinTolerance = true
					else
						WithinTolerance = false
				else
					WithinTolerance = false



		303bCheckExtOverTol

			WithinTolerance = false

			PercentToleranceAmount = DifferenceWorkAmount * LocalMatchRuleToleranceGroup.MatchOverAmountPercentage

			if (Difference1Amount < 0)
				Difference1Absolute = Difference1Amount * -1
			else
				Difference1Absolute = Difference1Amount




			if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition not entered)
				if  (LocalMatchRuleToleranceGroup.MatchOverAmountTolerance entered
				and  Difference1Absolute <= LocalMatchRuleToleranceGroup.MatchOverAmountTolerance)
					WithinTolerance = true
				else
				if  (LocalMatchRuleToleranceGroup.MatchOverAmountPercentage entered
				and  Difference1Absolute <= PercentToleranceAmount)
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition.And)

				if  (Difference1Absolute > LocalMatchRuleToleranceGroup.MatchOverAmountTolerance
				and  Difference1Absolute > PercentToleranceAmount)
					WithinTolerance	= false
				else
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition.Or)

				if  (Difference1Absolute <= LocalMatchRuleToleranceGroup.MatchOverAmountTolerance)

					if  (Difference1Absolute <= PercentToleranceAmount)

						WithinTolerance = true
					else

						WithinTolerance = false
				else

					WithinTolerance = false



		303cCheckUnitUnderTol
			WithinTolerance = false

			PercentToleranceAmount2 = Difference2WorkAmount * LocalMatchRuleToleranceGroup.MatchUnderAmountPercentage



			if (Difference2Amount < 0)
				Difference2Absolute = Difference2Amount * -1
			else
				Difference2Absolute = Difference2Amount

			if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition not entered)
				if  (LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance entered
				and  Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance)
					WithinTolerance = true
				else
				if  (LocalMatchRuleToleranceGroup.MatchUnderAmountPercentage entered
				and  Difference2Absolute <= PercentToleranceAmount2)
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition.And)
				if  (Difference2Absolute > LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance
				and  Difference2Absolute > PercentToleranceAmount2)
					WithinTolerance = false
				else
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchUnderAmountCondition.Or)
				if  (Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchUnderAmountTolerance)
					if  (Difference2Absolute <= PercentToleranceAmount2)
						WithinTolerance = true
					else
						WithinTolerance = false
				else
					WithinTolerance = false



		303dCheckUnitOverTol
			WithinTolerance = false

			PercentToleranceAmount2 = Difference2WorkAmount * LocalMatchRuleToleranceGroup.MatchOverAmountPercentage



			if (Difference2Amount < 0)
				Difference2Absolute = Difference2Amount * -1
			else
				Difference2Absolute = Difference2Amount

			if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition not entered)
				if  (LocalMatchRuleToleranceGroup.MatchOverAmountTolerance entered
				and  Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchOverAmountTolerance)
					WithinTolerance = true
				else
				if  (LocalMatchRuleToleranceGroup.MatchOverAmountPercentage entered
				and  Difference2Absolute <= PercentToleranceAmount2)
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition.And)
				if  (Difference2Absolute > LocalMatchRuleToleranceGroup.MatchOverAmountTolerance
				and  Difference2Absolute > PercentToleranceAmount2)
					WithinTolerance = false
				else
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchOverAmountCondition.Or)
				if  (Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchOverAmountTolerance)
					if  (Difference2Absolute <= PercentToleranceAmount2)
						WithinTolerance = true
					else
						WithinTolerance = false
				else
					WithinTolerance = false



		303eCheckQtyUnderTol
			WithinTolerance = false

			PercentToleranceAmount2 = Difference2WorkAmount * LocalMatchRuleToleranceGroup.MatchUnderAmountPercentage



			if (Difference2Amount < 0)
				Difference2Absolute = Difference2Amount * -1
			else
				Difference2Absolute = Difference2Amount

			if (LocalMatchRuleToleranceGroup.MatchUnderQuantityCondition not entered)
				if  (LocalMatchRuleToleranceGroup.MatchUnderQuantityTolerance entered
				and  Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchUnderQuantityTolerance)
					WithinTolerance = true
				else
				if  (LocalMatchRuleToleranceGroup.MatchUnderQuantityPercentage entered
				and  Difference2Absolute <= PercentToleranceAmount2)
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchUnderQuantityCondition.And)
				if  (Difference2Absolute > LocalMatchRuleToleranceGroup.MatchUnderQuantityTolerance
				and  Difference2Absolute > PercentToleranceAmount2)
					WithinTolerance = false
				else
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchUnderQuantityCondition.Or)
				if  (Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchUnderQuantityTolerance)
					if  (Difference2Absolute <= PercentToleranceAmount2)
						WithinTolerance = true
					else
						WithinTolerance = false
				else
					WithinTolerance = false



		303fCheckQtyOverTol
			WithinTolerance = false

			PercentToleranceAmount2 = Difference2WorkAmount * LocalMatchRuleToleranceGroup.MatchOverAmountPercentage



			if (Difference2Amount < 0)
				Difference2Absolute = Difference2Amount * -1
			else
				Difference2Absolute = Difference2Amount

			if (LocalMatchRuleToleranceGroup.MatchOverQuantityCondition not entered)
				if  (LocalMatchRuleToleranceGroup.MatchOverQuantityTolerance entered
				and  Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchOverQuantityTolerance)
					WithinTolerance = true
				else
				if  (LocalMatchRuleToleranceGroup.MatchOverQuantityPercentage entered
				and  Difference2Absolute <= PercentToleranceAmount2)
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchOverQuantityCondition.And)
				if  (Difference2Absolute > LocalMatchRuleToleranceGroup.MatchOverQuantityTolerance
				and  Difference2Absolute > PercentToleranceAmount2)
					WithinTolerance = false
				else
					WithinTolerance = true
			else
			if (LocalMatchRuleToleranceGroup.MatchOverQuantityCondition.Or)
				if  (Difference2Absolute <= LocalMatchRuleToleranceGroup.MatchOverQuantityTolerance)
					if  (Difference2Absolute <= PercentToleranceAmount2)
						WithinTolerance = true
					else
						WithinTolerance = false
				else
					WithinTolerance = false




		4130CheckSvcContractTolerances





			initialize MessageQuantityDifference
			initialize MessageUnitCostDifference
			initialize MessageExtendedDifference
			initialize MessageOverQuantityPercentDifference
			initialize MessageUnderQuantityPercentDifference
			initialize MessageOverUnitPercentDifference
			initialize MessageUnderUnitPercentDifference
			initialize MessageOverTotalPercentDifference
			initialize MessageOverCtPercentDifference
			WithinTolerance = true

			if  (MatchCompanyRel.ServiceMessagingOption entered
			and  !MatchCompanyRel.ServiceMessagingOption.NoMessage)
				if  (each.ContractLine entered
				and  LocalMatchRuleToleranceGroup entered)
					if  (each.ContractLine.ServiceCode.Amount)
						MessageExtendedDifference		= each.PayablesInvoiceDetail.DerivedContractLineDiscrepancy * -1
						MessageOverCtPercentDifference	= MessageExtendedDifference / each.ContractLine.LifetimeMaximumAmount
					else
						if (each.ContractLine.CurrentNetCost entered) 
							MessageExtendedDifference		= ((each.PayablesInvoiceDetail.EnteredUnitCost * each.PayablesInvoiceDetail.EnteredQuantity) + each.ContractLine.AmountOrdered)
							MessageExtendedDifference		-= (each.ContractLine.LifetimeMaximumQuantity * each.ContractLine.CurrentNetCost) 
							MessageUnitCostDifference		= each.PayablesInvoiceDetail.EnteredUnitCost - each.ContractLine.CurrentNetCost 
							MessageQuantityDifference		= each.PayablesInvoiceDetail.EnteredQuantity - (each.ContractLine.LifetimeMaximumQuantity - each.ContractLine.QuantityOrdered)
						else
							MessageExtendedDifference		= ((each.PayablesInvoiceDetail.EnteredUnitCost * each.PayablesInvoiceDetail.EnteredQuantity) + each.ContractLine.AmountOrdered)
							MessageExtendedDifference		-= (each.ContractLine.LifetimeMaximumQuantity * each.ContractLine.BaseCost) 
							MessageUnitCostDifference		= each.PayablesInvoiceDetail.EnteredUnitCost - each.ContractLine.BaseCost 
							MessageQuantityDifference		= each.PayablesInvoiceDetail.EnteredQuantity - (each.ContractLine.LifetimeMaximumQuantity - each.ContractLine.QuantityOrdered)

					display "MessageUnitCostDifference=<MessageUnitCostDifference>"
					display "MessageQuantityDifference<MessageQuantityDifference>"						
					display "MessageExtendedDifference<MessageExtendedDifference>"						
					display "MessageOverCtPercentDifference<MessageOverCtPercentDifference>"						
			       
					if  (each.ContractLine.ServiceCode.Amount)
						include 4410CheckAmtTypeSrvcMsgTol
					else
						include 4420CheckQtyTypeSrvcMsgTol

		4410CheckAmtTypeSrvcMsgTol
			display "4410CheckAmtTypeSrvcMsgTol"





			if  (MessageExtendedDifference < 0)
				NextSentence = true
			else
			if  (MessageExtendedDifference > 0
			and (MatchCompanyRel.ServiceMessagingOption.OverOrUnderQuantityAndCost
			or   MatchCompanyRel.ServiceMessagingOption.OverQuantityAndCost
			or   MatchCompanyRel.ServiceMessagingOption.ExtendedAmountOnly))
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.And
				and  MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				and  MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.Or
				and (MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				or   MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent))
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent not entered)
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance > 0
				and  MessageExtendedDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance) 
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent > 0
				and  MessageOverCtPercentDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
				    WithinTolerance = false

			else
			if  (MessageExtendedDifference < 0
			and (MatchCompanyRel.ServiceMessagingOption.OverOrUnderQuantityAndCost
			or   MatchCompanyRel.ServiceMessagingOption.UnderQuantityAndCost))
				MessageExtendedDifference *= -1
				MessageOverCtPercentDifference *= -1

				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.And
				and  MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				and  MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.Or
				and (MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				or   MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent))
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent not entered)
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance > 0
				and  MessageExtendedDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance) 
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent > 0
				and  MessageOverCtPercentDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
				    WithinTolerance = false

		4420CheckQtyTypeSrvcMsgTol
			display "4420CheckQtyTypeSrvcMsgTol<MatchCompanyRel.ServiceMessagingOption>"		

			if  ((MatchCompanyRel.ServiceMessagingOption.OverQuantityAndCost
			or    MatchCompanyRel.ServiceMessagingOption.OverOrUnderQuantityAndCost)
			and  (MessageUnitCostDifference > 0
			or    MessageQuantityDifference > 0))
				include 4420aCheckQtySrvcOvTol

			if  ((MatchCompanyRel.ServiceMessagingOption.UnderQuantityAndCost
			or    MatchCompanyRel.ServiceMessagingOption.OverOrUnderQuantityAndCost)
			and  (MessageUnitCostDifference < 0
			or    MessageQuantityDifference < 0))
				include 4420bCheckQtySrvcUnTol

		4420aCheckQtySrvcOvTol
			display "4420aCheckQtySrvcOvTol"

			display "<LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition>"
			display "<LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount>"
			display "<LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent>"

			if  (MessageUnitCostDifference > 0)
			
				if  (each.ContractLine entered)
					if  (each.ContractLine.ServiceCode.Amount)     
						MessageExtendedDifference			= each.PayablesInvoiceDetail.EnteredUnitCost + each.ContractLine.AmountOrdered - each.PayablesInvoiceDetail.MatchUnitCost   

				MessageOverUnitPercentDifference 			= each.PayablesInvoiceDetail.MatchUnitCost * LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent
	
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition.And
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount
				and  MessageUnitCostDifference     > MessageOverUnitPercentDifference) 
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition.Or
				and (MessageUnitCostDifference    > LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount
				or   MessageUnitCostDifference    > MessageOverUnitPercentDifference)) 

				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent not entered)
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount > 0
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount)
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent > 0
				and  MessageUnitCostDifference     > MessageOverUnitPercentDifference) 
				    WithinTolerance = false

			if  (MessageQuantityDifference > 0)

				if  (PayablesInvoice.MatchProcessType.ServiceContract)
				    if  (each.ContractLine.PerOrderMaximumQuantity entered
				    and  each.ContractLine.PerOrderMaximumQuantity < (each.ContractLine.LifetimeMaximumQuantity - each.ContractLine.QuantityOrdered))
						MessageOverQuantityPercentDifference 			= ((each.ContractLine.PerOrderMaximumQuantity - each.ContractLine.QuantityOrdered) * LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent)
					else
						MessageOverQuantityPercentDifference 			= ((each.ContractLine.LifetimeMaximumQuantity - each.ContractLine.QuantityOrdered) * LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent)
	
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition.And
				and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceOverQuantityValue
				and  MessageQuantityDifference    > MessageOverQuantityPercentDifference) 
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition.Or
				and (MessageQuantityDifference   > LocalMatchMessageToleranceGroup.ServiceOverQuantityValue
				or   MessageQuantityDifference   > MessageOverQuantityPercentDifference)) 

				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityValue not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent not entered)
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityValue > 0
				and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceOverQuantityValue) 
				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent > 0
				and  MessageQuantityDifference    > MessageOverQuantityPercentDifference) 
				    WithinTolerance = false


		4420bCheckQtySrvcUnTol






			if  (MessageUnitCostDifference < 0)

				MessageUnitCostDifference 							*= -1
	
				if  (PayablesInvoice.MatchProcessType.ServiceContract)
					MessageUnderUnitPercentDifference 				= (each.PayablesInvoiceDetail.MatchUnitCost * LocalMatchMessageToleranceGroup.ServiceUnderUnitCostTolerancePercent)
	

				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition.And
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount
				and  MessageUnitCostDifference     > MessageUnderUnitPercentDifference)

				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition.Or
				and (MessageUnitCostDifference    > LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount
				or   MessageUnitCostDifference    > MessageUnderUnitPercentDifference)) 

				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostTolerancePercent not entered)

				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount > 0
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount) 

				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostTolerancePercent > 0
				and  MessageUnitCostDifference     > MessageUnderUnitPercentDifference) 

				    WithinTolerance = false
					

			if  (MessageQuantityDifference < 0)

				MessageQuantityDifference 							*= -1


				if  (PayablesInvoice.MatchProcessType.ServiceContract)
					MessageUnderQuantityPercentDifference 			= ((each.ContractLine.LifetimeMaximumQuantity - each.ContractLine.QuantityOrdered) * LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent)





				else
					MessageUnderQuantityPercentDifference			= MessageUnmatchedQuantity * LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent

	

	 			if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition.And
	 			and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue
	 			and  MessageQuantityDifference    > MessageUnderQuantityPercentDifference) 

				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition.Or
				and (MessageQuantityDifference   > LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue
				or   MessageQuantityDifference   > MessageUnderQuantityPercentDifference))


				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent not entered)

				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue > 0
				and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue) 

				    WithinTolerance = false
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent > 0
				and  MessageQuantityDifference    > MessageUnderQuantityPercentDifference) 

				    WithinTolerance = false


	Derived Fields
		MatchedOutOfToleranceMsg is a MessageField
			restricted
			"MatchedOutOfTolerance"

		MatchedInToleranceMsg is a MessageField
			restricted
			"MatchedInTolerance"

		POCostMessagesExistMsg is a MessageField
			restricted
			"Matched-POCostMessagesExist"

		MatchedWithAutoChargebackMsg is a MessageField
			restricted
			"MatchedWithChargeback="

		MatchCompleteMsg is a MessageField
			restricted
			"MatchComplete"

		UnmatchedMsg is a MessageField
			restricted
			"Unmatched"

		BudgetExceededMsg is a MessageField
			restricted
			"BudgetsExceeded;InvoiceNotMatched;SeeBudgetErrorsTab"

		ErrorsExistMsg is a MessageField
			restricted
			"InvoiceNotMatched;ErrorsExist;ClickOnInvoiceLineToView"

		SingleSpace is a StringField
			type is Alpha 1
			" "

		QuantityMsg is a MessageField
			"TotalQuantity"

		TotalCostMsg is a MessageField
			"TotalCost"

		SetMsg is a MessageField
			"Set"

		DiscrepancyMsg is a MessageField
			"TotalDiscrepancy"

		MatchProcessingInBackgroundMsg is a MessageField
			restricted
			"MatchOfInvoiceOrCreationOfDetailsIsProcessingInBackground"
		MatchProcessingInBackgroundAsyncFailureMsg is a MessageField
			restricted
			"BackgroundActionFailed;CheckMyActionsOrAsyncQueue"


		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforSupplierInvoice"

		ContextMessageText is a MessageField
			restricted
			"Invoice<Invoice>"


		PendingInvoiceLineQuantity is a DerivedField
			type is like Quantity
			include SumPendingLine
			return LocalPendingLineQuantity


		PendingInvoiceLineExtendedAmount is a DerivedField
			type is like InternationalCost
			include SumPendingLine
			return LocalPendingLineExtendedAmount


		PendingReceiptLineQuantity is a DerivedField
			type is like Quantity
			return sum PendingSetReceiptLineRel.DerivedSelectedDisplayQuantity

		PendingReceiptLineExtendedAmount is a DerivedField
			type is like InternationalCost
			return sum PendingSetReceiptLineRel.DerivedReceiptExtendedCost

		PendingLineQuantityDifference is a DerivedField
			type is like Quantity
			return PendingInvoiceLineQuantity - PendingReceiptLineQuantity

		PendingLineTotalDifference is a DerivedField
			type is like InternationalAmount
			return PendingInvoiceLineExtendedAmount - PendingReceiptLineExtendedAmount

		Previous1Msg is a DerivedField
			type is Alpha 15
			restricted
			LocalSet = Previous1
			if  (MatchReconQueuePrevious1Rel.Type entered)
				return MatchReconQueuePrevious1Rel.TypeMessage + " (" + instance count of MatchReconQueueInvoiceDetailPreviousRel + ")"
			else
				return "Set #1 (" + instance count of MatchReconQueueInvoiceDetailPreviousRel + ")"

		Previous2Msg is a DerivedField
			type is Alpha 15
			restricted
			LocalSet = Previous2
			if  (MatchReconQueuePrevious2Rel.Type entered)
				return MatchReconQueuePrevious2Rel.TypeMessage + " (" + instance count of MatchReconQueueInvoiceDetailPreviousRel + ")"
			else
				return "Set #2 (" + instance count of MatchReconQueueInvoiceDetailPreviousRel + ")"

		Previous3Msg is a DerivedField
			type is Alpha 15
			restricted
			LocalSet = Previous3
			if  (MatchReconQueuePrevious3Rel.Type entered)
				return MatchReconQueuePrevious3Rel.TypeMessage + " (" + instance count of MatchReconQueueInvoiceDetailPreviousRel + ")"
			else
				return "Set #3 (" + instance count of MatchReconQueueInvoiceDetailPreviousRel + ")"
			
		ReviewedMsg is a DerivedField
			type is Alpha 15
			restricted
			return "Selected (" + instance count of ReviewedLinesRel + ")"
			
		Previous1Discrepancy is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueuePrevious1Rel.Discrepancy

		Previous2Discrepancy is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueuePrevious2Rel.Discrepancy

		Previous3Discrepancy is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueuePrevious3Rel.Discrepancy

		NetSelected is a DerivedField
			type is like InternationalAmount
			if (ChargebackIncludeAOC)
				return sum MatchReconQueueSetRel.Discrepancy + CostComponentDifference
			else
				return sum MatchReconQueueSetRel.Discrepancy

		OverbillSelected is a DerivedField
			type is like InternationalAmount
			if (ChargebackIncludeAOC)
				return sum MatchReconQueueSetRel.OverbillDiscrepancy + CostComponentDifference
			else
				return sum MatchReconQueueSetRel.OverbillDiscrepancy

		NumberInvoiceDetailsNotSelected is a DerivedField
			type is Numeric 5
			restricted
			return instance count of MatchWorkInvoiceDetailNotSelectedRel

		NumberReceiptLinesNotSelected is a DerivedField
			type is Numeric 5
			restricted
			return instance count of PurchaseOrderReceiptLinesNotSelectedRel



		PendingInvoiceQuantity is a DerivedField
			type is like Quantity
			return sum PendingInvoicesRel.DerivedQuantity

		PendingInvoiceExtendedAmount is a DerivedField
			type is like InternationalCost
			return sum PendingInvoicesRel.DerivedExtendedAmount

		PendingReceiptQuantity is a DerivedField
			type is like Quantity
			return sum PendingReceiptsRel.DerivedQuantity

		PendingReceiptExtendedAmount is a DerivedField
			type is like InternationalCost
			return sum PendingReceiptsRel.DerivedExtendedAmount

		PendingQuantityDifference is a DerivedField
			type is like InternationalAmount
			return PendingInvoiceQuantity - PendingReceiptQuantity

		PendingTotalDifference is a DerivedField
			type is like InternationalAmount
			return PendingInvoiceExtendedAmount - PendingReceiptExtendedAmount

		NumberInvoicesNotSelected is a DerivedField
			type is Numeric 5
			restricted
			return instance count of NotSelectedInvoicesRel

		NumberReceiptsNotSelected is a DerivedField
			type is Numeric 5
			restricted
			return instance count of NotSelectedReceiptsRel

		InvoicesRemaining is a DerivedField
			type is Numeric 7
			restricted
			return (instance count of RemainingInvoicesRel)

		Previous1MsgIM is a DerivedField
			type is Alpha 15
			restricted
			LocalSet = Previous1
			if  (MatchReconQueuePrevious1Rel.Type entered)
				return MatchReconQueuePrevious1Rel.TypeMessage + " (" + instance count of PreviousInvoicesRel + ")"
			else
				return "Set #1 (" + instance count of PreviousInvoicesRel + ")"

		Previous2MsgIM is a DerivedField
			type is Alpha 15
			restricted
			if  (MatchReconQueuePrevious2Rel.Type entered)
				return MatchReconQueuePrevious2Rel.TypeMessage + " (" + instance count of PreviousInvoicesRel + ")"
			else
				return "Set #2 (" + instance count of PreviousInvoicesRel + ")"

		Previous3MsgIM is a DerivedField
			type is Alpha 15
			restricted
			if  (MatchReconQueuePrevious3Rel.Type entered)
				return MatchReconQueuePrevious3Rel.TypeMessage + " (" + instance count of PreviousInvoicesRel + ")"
			else
				return "Set #3 (" + instance count of PreviousInvoicesRel + ")"

		Previous1DiscrepancyIM is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueuePrevious1Rel.DiscrepancyIM

		Previous2DiscrepancyIM is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueuePrevious2Rel.DiscrepancyIM

		Previous3DiscrepancyIM is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueuePrevious3Rel.DiscrepancyIM

		NetSelectedInvoiceMatch is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueueSetRel.DiscrepancyIM
		OverbillSelectedInvoiceMatch is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueueSetRel.OverbillDiscrepancyIM
		ServiceContractDiscrepancy is a DerivedField

			type is like InternationalAmount
			if (View.MatchComplete
			and Chargeback)
				return 0
			else
				initialize WorkAmount
				for each ContractDetailRel
				    if (UseNet)
						WorkAmount += each.PayablesInvoiceDetail.DerivedContractLineDiscrepancy
					else
				    if (UseOverbill
				    and each.PayablesInvoiceDetail.DerivedContractLineDiscrepancy < 0)
						WorkAmount += each.PayablesInvoiceDetail.DerivedContractLineDiscrepancy

				return WorkAmount

		PendingInvoiceAOCQuantity is a DerivedField
			type is like Quantity
			return sum PendingInvoiceAOCsRel.MatchedQuantity

		PendingInvoiceAOCExtendedAmount is a DerivedField
			type is like InternationalAmount
			return sum PendingInvoiceAOCsRel.DerivedExtendedMatchAmount

		PendingReceiptAOCQuantity is a DerivedField
			type is like Quantity
			return sum PendingReceiptAOCsRel.MatchedQuantity

		PendingReceiptAOCExtendedAmount is a DerivedField
			type is like InternationalCost
			return sum PendingReceiptAOCsRel.DerivedExtendedMatchAmount

		PendingQuantityAOCDifference is a DerivedField
			type is like InternationalCost
			return PendingInvoiceAOCQuantity - PendingReceiptAOCQuantity

		PendingTotalAOCDifference is a DerivedField
			type is like InternationalAmount
			return PendingInvoiceAOCExtendedAmount - PendingReceiptAOCExtendedAmount

		CostComponentDifference is a DerivedField
			type is like InternationalAmount
			initialize WorkAmount1
			initialize WorkAmount2
			for each MatchWorkInvoiceAddOnChargeRel
				WorkAmount = each.TotalReceiptLineAOC
				if (UseNet
				or  each.DerivedExtendedMatchAmount > WorkAmount)
					WorkAmount9 = each.DerivedExtendedMatchAmount 
					round WorkAmount9 to nearest DerivedRoundTo
					WorkAmount1 += WorkAmount9
					for each each.MatchWorkPOLineAOCRel
						WorkAmount9 = each.DerivedExtendedMatchAmount
						round WorkAmount9 to nearest DerivedRoundTo
						WorkAmount2 += WorkAmount9
			round WorkAmount1 to nearest DerivedRoundTo
			round WorkAmount2 to nearest DerivedRoundTo

			return WorkAmount1 - WorkAmount2  

		Previous1MsgAOC is a DerivedField
			type is Alpha 15
			restricted
			LocalSet = Previous1
			if  (MatchReconQueuePrevious1Rel.Type entered)
				return MatchReconQueuePrevious1Rel.TypeMessage + " (" + instance count of PreviousInvoiceAOCsRel + ")"
			else
				return "Set #1 (" + instance count of PreviousInvoiceAOCsRel + ")"

		Previous2MsgAOC is a DerivedField
			type is Alpha 15
			restricted
			if  (MatchReconQueuePrevious2Rel.Type entered)
				return MatchReconQueuePrevious2Rel.TypeMessage + " (" + instance count of PreviousInvoiceAOCsRel + ")"
			else
				return "Set #2 (" + instance count of PreviousInvoiceAOCsRel + ")"

		Previous3MsgAOC is a DerivedField
			type is Alpha 15
			restricted
			if  (MatchReconQueuePrevious3Rel.Type entered)
				return MatchReconQueuePrevious3Rel.TypeMessage + " (" + instance count of PreviousInvoiceAOCsRel + ")"
			else
				return "Set #3 (" + instance count of PreviousInvoiceAOCsRel + ")"

		Previous1DiscrepancyAOC is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueuePrevious1Rel.DiscrepancyAOC

		Previous2DiscrepancyAOC is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueuePrevious2Rel.DiscrepancyAOC

		Previous3DiscrepancyAOC is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueuePrevious3Rel.DiscrepancyAOC

		NetSelectedAOCMatch is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueueSetRel.DiscrepancyAOC

		OverbillSelectedAOCMatch is a DerivedField
			type is like InternationalAmount
			return sum MatchReconQueueSetRel.OverbillDiscrepancyAOC

		NetLineChargebackAmount is a DerivedField
			type is like InternationalAmount
			initialize WorkAmount
			initialize WorkAmount1 
			initialize WorkAmount2 
			for each SelectedDetailWithChargebackRel
				WorkAmount += each.NetAmount

			if (AddOnChargesWithChargebackRel exists)
				for each AddOnChargesWithChargebackRel
					if (each.CreateChargeback)
						WorkAmount1 += each.DerivedExtendedMatchAmount 
						for each each.MatchWorkPOLineAOCRel
							WorkAmount2 += each.DerivedExtendedMatchAmount
				round WorkAmount1 to nearest DerivedRoundTo
				round WorkAmount2 to nearest DerivedRoundTo

				WorkAmount += (WorkAmount1 - WorkAmount2)  

			return WorkAmount

		OverbillLineChargebackAmount is a DerivedField
			type is like InternationalAmount
			initialize WorkAmount
			initialize WorkAmount1 
			initialize WorkAmount2 
			for each SelectedDetailWithChargebackRel
				WorkAmount += each.OverbillAmount


			if (AddOnChargesWithChargebackRel exists)
				for each AddOnChargesWithChargebackRel
					if (each.CreateChargeback
					and each.DerivedExtendedMatchAmount > each.TotalReceiptLineAOC)
						WorkAmount1 += each.DerivedExtendedMatchAmount 
						for each each.MatchWorkPOLineAOCRel
							WorkAmount2 += each.DerivedExtendedMatchAmount
				round WorkAmount1 to nearest DerivedRoundTo
				round WorkAmount2 to nearest DerivedRoundTo

				WorkAmount += (WorkAmount1 - WorkAmount2)  

			return WorkAmount

		LineChargebackAmountService is a DerivedField
			type is like InternationalAmount
			initialize WorkAmount
			for each DetailWithChargebackRel
				if (each.CreateChargeback)
				    if (UseNet)
						WorkAmount += each.PayablesInvoiceDetail.DerivedContractLineDiscrepancy
					else
				    if (UseOverbill
				    and each.PayablesInvoiceDetail.DerivedContractLineDiscrepancy < 0)
						WorkAmount += each.PayablesInvoiceDetail.DerivedContractLineDiscrepancy

			return WorkAmount


		NumberOfSets is a DerivedField
			type is Numeric 5
			return instance count of MatchReconQueueSetRel

		ChargebackYesOrNo is a DerivedField
			type is Alpha 10
			restricted
			if (Chargeback)
				return "Yes"
			else
				return "No"

		DerivedMatchStatus is a DerivedField
			type is Alpha 100
			if (PayablesInvoice.MatchStatus.MatchedOutOfTolerance)
				return MatchedOutOfToleranceMsg
			else
			if (PayablesInvoice.MatchStatus.MatchedInTolerance)
				return MatchedInToleranceMsg
			else
			if (PayablesInvoice.MatchStatus.POCostMessagesExist)
				return POCostMessagesExistMsg
			else
			if (PayablesInvoice.MatchStatus.MatchedWithAutoChargeback)
				return MatchedWithAutoChargebackMsg + PayablesInvoice.first PayablesInvoiceNonCancelledChargebackRel.Invoice + "-" + PayablesInvoice.first PayablesInvoiceNonCancelledChargebackRel.Suffix
			else
			if  (PayablesInvoice.BudgetEditFailure)
				return BudgetExceededMsg
			else
			if  (!PayablesInvoice.DisplayMatchInProgress
			and  PayablesInvoice.MatchStatus.Unmatched 
			and  PayablesInvoice.ErrorsExists)
				return ErrorsExistMsg 
			else 
			if  (!PayablesInvoice.DisplayMatchInProgress
			and  !PayablesInvoice.BudgetEditInProgress)
				return MatchCompleteMsg

		HasReceiptsInPool is a DerivedField
			type is Boolean


			if  (Vendor.PoolOption entered)
				LocalPoolOption = Vendor.PoolOption
			else
				LocalPoolOption = MatchCompanyRel.PoolOption

			if  ((LocalPoolOption.CompanyVendor
			and   OpenReceiptsPool1Rel exists)
			or   (LocalPoolOption.CompanyVendorPo
			and   OpenReceiptsPool2Rel exists)
			or   (LocalPoolOption.CompanyVendorPoShipTo
			and   OpenReceiptsPool3Rel exists))
				return true
			else
				return false

		DerivedPoolOption is a DerivedField
			type is like PoolOption

			if  (Vendor.PoolOption entered)
				return Vendor.PoolOption
			else
				return MatchCompanyRel.PoolOption

		NumberOfSecondsForRebuildConfig		is a DerivedField
			type is Numeric 9
			return config.match_recon_rebuild_required_minutes

		NumberOfSecondsForRebuild		is a DerivedField
			type is Numeric 9
			if (NumberOfSecondsForRebuildConfig not entered)
				return 3600
			else
				return NumberOfSecondsForRebuildConfig

		OutputNumberOfDecimals is a DerivedField	
			type is Numeric 1
			if (MatchWork.PayablesInvoice.InvoiceCurrency entered)
				return MatchWork.PayablesInvoice.InvoiceCurrency.NumberOfDecimals
			else
				return 2


		DerivedRoundTo is a DerivedField		
    		type is Decimal 5.4
    		restricted
    		if (OutputNumberOfDecimals = 2)
    			return .01
    		else
    		if (OutputNumberOfDecimals = 0)
    			return 1
    		else
    		if (OutputNumberOfDecimals = 3)
    			return .001
    		else
    		if (OutputNumberOfDecimals = 4)
    			return .0001

		InvoiceLabel is a MessageField
			restricted
			"Invoice:"

		AmountLabel is a MessageField
			restricted
			"Amount:"

		ReferenceLabel is a MessageField
			restricted
			"Reference:"

		VendorLabel is a MessageField
			restricted
			"Vendor:"

		InvoicesRemainingLabel is a MessageField
			restricted
			"InvoicesRemaining:"

		SmartReconCompositeTitle is a DerivedField
			type is Alpha 200
			restricted
			if (Vendor.RequireMatchReference)
				return SmartReconMatchReferenceTitle
			else
			if (PayablesInvoice.InvoiceType.MatchPrepayment)
				return SmartReconPrepaymentTitle
			else
				return SmartReconInvoiceTitle

		SmartReconMatchReferenceTitle is a StringField
			type is Alpha 100
			restricted
			InvoiceLabel
			" "
			PayablesInvoice.Invoice
			"   "
			AmountLabel
			" "
			PayablesInvoice.InvoiceAmount.CurrencyAmount
			"   "
			VendorLabel
			" "
			Vendor
			" "
			VendorSearchName
			" "
			ReferenceLabel
			" "
			PayablesInvoice.MatchReferenceNumber


		SmartReconPrepaymentTitle is a StringField
			type is Alpha 100
			restricted
			InvoiceLabel
			" "
			PayablesInvoice.Invoice
			"   "
			AmountLabel
			" "
			PayablesInvoice.InvoiceAmount.CurrencyAmount
			"   "
			VendorLabel
			" "
			Vendor
			" "
			VendorSearchName

		SmartReconInvoiceTitle is a StringField
			type is Alpha 100
			restricted
			InvoiceLabel
			" "
			PayablesInvoice.Invoice
			"   "
			AmountLabel
			" "
			PayablesInvoice.InvoiceAmount.CurrencyAmount
			"   "
			VendorLabel
			" "
			Vendor
			" "
			VendorSearchName
			"   "




		SmartReconCompositeAOCTitle is a StringField
			type is Alpha 100
			restricted
			InvoiceLabel
			" "
			PayablesInvoice.Invoice
			"   "
			AmountLabel
			" "
			PayablesInvoice.InvoiceAmount.CurrencyAmount
			"   "
			VendorLabel
			" "
			Vendor
			" "
			VendorSearchName

		DerivedMessageLinkTitle is a DerivedField
			type is Alpha 50
			restricted
			if (POCostMessageWithCommentRel exists)
				return MessagesLabel + "/" + NotesLabel
			else
			if (POCostMessageRel exists)
				return MessagesLabel

		MessagesLabel is a MessageField
			restricted
			"Messages"

		NotesLabel is a MessageField
			restricted
			"Notes"

		ShowExceptionsCompletedMsg is a MessageField
			restricted
			"ShowExceptionsCompleted"

		RefreshWorkFilesCompletedMsg is a MessageField
			restricted
			"RefreshWorkFilesCompleted"



#ifdef module integration
		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "tenantID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedReconcilationInvoiceMessageBODID is a DerivedField
			type is Alpha 100
			restricted
			return	"infor-nid:" + DerivedTenantID +":"+ DerivedCompany + ":"+ DerivedInvoice +"?ReconcilationInvoiceMessage&verb=Process"
#endif
		DerivedCompany is a DerivedField
			type is Numeric 4
			restricted
			return PayablesInvoice.Company

		DerivedInvoice is a DerivedField
			type is Alpha 22
			restricted
			return	PayablesInvoice.Invoice

		DerivedVendor is a DerivedField
			type is Numeric 9
			restricted
			return	PayablesInvoice.Vendor

		ReconcilationInvoiceMessageAlertDescription is a DerivedField
			type is Alpha 200
			restricted
			return	"Invoice" +" "+DerivedInvoice+" "+"matched out of tolerance, please resolve the message on MA66.2"

		ReconcilationInvoiceMessagePulseAlertXML is a DerivedField
			type is XMLDocument
			restricted
			ReconcilationInvoiceMessagePulseAlertXML = template.IONReconcilationInvoiceMessage_MatchReconQueue_ST	document for this instance


		ChargebackReconOption is a DerivedField		
			type is Alpha 57
			restricted
			if (ChargebackType.Option1)
				return "Chargeback on Selected Line/s and Accept Cost Differences"
			else
				if (ChargebackType.Option2)
					return "Chargeback on Selected Line/s and Create Recon Messages"
				else
					return "None"
		
		DerivedWithDiscrepancy is a DerivedField	
			type is Boolean
			restricted
			LocalWithDiscrepancy = false
			for each MatchWorkInvoiceDetailCBRel
				if (!MatchWorkReceiptLineCBRel.DerivedReceiptExtendedCost = each.DerivedExtendedMatchAmount)
					LocalWithDiscrepancy = true
			if (ServiceContractDiscrepancy > 0)		
				LocalWithDiscrepancy = true
			return LocalWithDiscrepancy

	Conditions
		SmartReconUIV2
			when (SmartReconUIV2Rel exists
			and   SmartReconUIV2Rel.Value	= "true")

		FilesRebuilt
			when (View.MatchComplete
				or (BuildStamp entered
					and (current timestamp - BuildStamp <= NumberOfSecondsForRebuild)
					and !NewReceiptLines
					and !NewInspections
					and !StaleReceiptLines))

		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

		PayablesInvoiceNotMatched
			classic name is APMATCHSTATUS
			restricted
			when (PayablesInvoice.MatchStatus.Unmatched
			and   !PayablesInvoice.MatchProcessType.Expense
			and   (PayablesInvoice.Status.Unreleased
			or    PayablesInvoice.Status.Released))

		IsRegularPayablesInvoice
			classic name is NOPREPAYMENT
			restricted
			when (PayablesInvoice.InvoiceType.Invoice)

		ReceiptRecordExists
			classic name is RECEIPTLINES
			restricted
			when (first PurchaseOrderReceiptSet9Rel exists)

		HasReceipts
			when ((DerivedPoolOption.CompanyVendor
			and    OpenReceiptsPool1Rel exists)
			or    (DerivedPoolOption.CompanyVendorPo
			and    OpenReceiptsPool2Rel exists)
			or    (DerivedPoolOption.CompanyVendorPoShipTo
			and    OpenReceiptsPool3Rel exists))

		HasWorkInvoiceRecords
			restricted
			when (MatchWorkInvoiceRel exists)




		MatchWorkInvoiceDetailExists
			restricted
			when (MatchWorkInvoiceDetailRel exists)  

		HasAddOnCharges
			restricted
			when (MatchWorkInvoiceAddOnChargeRel exists)
			
		HasNotReviewedServiceQuantityContractDetail
			restricted
			when (first NotReviewedServiceQuantityContractDetailRel exists)

		HasNotReviewedServiceAmountContractDetail
			restricted
			when (first NotReviewedServiceAmountContractDetailRel exists)

		ShowContractDetailBoth
			restricted
			when (MatchWorkInvoiceDetailExists
			and   HasNotReviewedServiceQuantityContractDetail)
			
		ShowContractDetailAmount
			restricted
			when (MatchWorkInvoiceDetailExists
			and   HasNotReviewedServiceAmountContractDetail
			and   !HasNotReviewedServiceQuantityContractDetail)
			
		AllInvoiceLinesSelected
			restricted
			when (MatchWorkInvoiceDetailSelectedRel exists  
			and   !MatchWorkInvoiceDetailNotSelectedRel exists 
			and   !PendingSetInvoiceDetailRel exists)

		UnselectedLinesExist
			restricted 
			when (MatchWorkInvoiceDetailNotSelectedRel exists)

		AllInvoiceLinesReviewed
			restricted
			when (first MatchWorkInvoiceDetailRel exists
			and   MatchWorkInvoiceDetailNotReviewedRel not exists)

		HasMessageForWorkList
			restricted
			when (POCostMessageRel exists)

		Previous1Exists
			restricted
			when (MatchReconQueuePrevious1Rel exists)

		Previous2Exists
			restricted
			when (MatchReconQueuePrevious2Rel exists)

		Previous3Exists
			restricted
			when (MatchReconQueuePrevious3Rel exists)

		ReviewedLinesExist
			when (ReviewedLinesRel exists)
			
		AssignedToFinanceResource
			restricted
			when (FinanceResourceAssignmentRel exists)

		AssignedToActor
			restricted
			when (MatchReconQueueFinanceResourceActorRel exists)

		AllInvoicesSelected
			restricted
			when (SelectedInvoicesRel exists
			and   !NotSelectedInvoicesRel exists
			and   !PendingInvoicesRel exists)

		AllInvoiceAOCsSelected
			restricted
			when (SelectedInvoiceAOCsRel exists
			and   !NotSelectedInvoiceAOCsRel exists
			and   !PendingInvoiceAOCsRel exists)

		SinglePurchaseOrder
			restricted
			when (PurchaseOrder entered) 

		DisplayPOLink
			restricted
			when ((FinanceResource.MatchPreference.InvoiceMatch
			or     FinanceResource.MatchPreference.Both)
			and    SinglePurchaseOrder)

		HasMiscAOC
			restricted
			when (MatchWorkInvoiceRel.InvoiceAOCsRel exists)

		AllowDetailMatch
			restricted
			when (AllInvoiceLinesSelected
			and   View.DetailMatch
			and   !PayablesInvoice.MatchProcessType.ServiceContract
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowInvoiceMatch
			restricted
			when (SelectedInvoicesRel exists
			and   !PendingInvoicesRel exists
			and   View.InvoiceMatch
			and   !PayablesInvoice.MatchProcessType.ServiceContract
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowServiceContractMatch
			restricted
			when (!View.MatchComplete
			and   PayablesInvoice.MatchProcessType.ServiceContract
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered
			and   AllInvoiceLinesReviewed)

		ShowAutoSelect
		    restricted
			when (!View.MatchComplete
			and   PayablesInvoice.MatchProcessType.ServiceContract
			and   MatchWorkInvoiceDetailExists)    
			
		ShowSelectionComplete
			restricted
			when (!View.MatchComplete
			and    AllowServiceContractMatch)
					
		AllowDetailView
			restricted
			when (View.InvoiceMatch
			and   !Vendor.RequireMatchReference
			and   PayablesInvoice.HasInvoiceLines)

		AllowInvoiceView
			restricted
			when (View.DetailMatch

			and   !PayablesInvoice.MatchProcessType.DropShip
			and   !PayablesInvoice.MatchProcessType.Service
			and   !PayablesInvoice.MatchProcessType.ServiceContract
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowCreateSet
			restricted
			when (View.DetailMatch
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered
			and   FilesRebuilt
			and  (PendingSetInvoiceDetailRel exists
			or   (PendingSetReceiptLineRel exists
			and   !SmartReconUIV2)))

		ShowDetailWorkingTotals
			restricted
			when (View.DetailMatch
			and  (PendingSetInvoiceDetailRel exists
			or    PendingSetReceiptLineRel exists))

		AllowCreateInvoiceSet
			restricted
			when (View.InvoiceMatch
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered
			and   FilesRebuilt
			and  (PendingInvoicesRel exists
			or    PendingReceiptsRel exists))

		AllowCreateAOCSet
			restricted
			when (PendingInvoiceAOCsRel exists
			or    PendingReceiptAOCsRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowSetChargeback
			restricted
			when (!View.MatchComplete
			and   !FinanceResource.RestrictChargebacks)

		AllowCreateAutoSetDetailMatch
			restricted
			when (View.DetailMatch
			and   MatchWorkInvoiceDetailNotSelectedRel exists
			and  !PendingSetInvoiceDetailRel exists
			and  !PendingSetReceiptLineRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowSelectAllInvoice
			when (View.InvoiceMatch
			and   NotSelectedInvoicesRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)
		AllowUnselectAllInvoices
			when (View.InvoiceMatch
			and   PendingInvoicesRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)
		AllowSelectAllReceipts
			when (View.InvoiceMatch
			and   NotSelectedReceiptsRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)
		AllowUnselectAllReceipts
			when (View.InvoiceMatch
			and   PendingReceiptsRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowSelectAllInvoiceLines
			when (View.DetailMatch
			and   MatchWorkInvoiceDetailNotSelectedRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)
		AllowUnselectAllInvoiceLines
			when (View.DetailMatch
			and   PendingSetInvoiceDetailRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)
		AllowSelectAllReceiptLines
			when (View.DetailMatch
			and   PurchaseOrderReceiptLinesNotSelectedRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)
		AllowUnselectAllReceiptLines
			when (View.DetailMatch
			and   PendingSetReceiptLineRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowSelectAllInvoiceAOCs
			when (PayablesInvoice.MatchProcessType.AOCOnly
			and   NotSelectedInvoiceAOCsRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowUnselectAllInvoiceAOCs
			when (PayablesInvoice.MatchProcessType.AOCOnly
			and   PendingInvoiceAOCsRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowSelectAllReceiptAOCs
			when (PayablesInvoice.MatchProcessType.AOCOnly
			and   NotSelectedReceiptAOCsRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowUnselectAllReceiptAOCs
			when (PayablesInvoice.MatchProcessType.AOCOnly
			and   PendingReceiptAOCsRel exists
			and   FilesRebuilt
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)
		AllowResetWorkFiles
			when (PayablesInvoice.BackgroundProcessing not entered
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.IsNotMatched
			and   !PayablesInvoice.MatchProcessType.AOCOnly)

		AllowResetAOCWorkFiles
			when (PayablesInvoice.BackgroundProcessing not entered
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.IsNotMatched
			and   PayablesInvoice.MatchProcessType.AOCOnly)

		AllowRefreshAndOpen
			when (!PayablesInvoice.BackgroundProcessing entered
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   !PayablesInvoice.IsMatched
			and   !PayablesInvoice.MatchProcessType.ServiceContract)
		
		ShowInvoiceMatch
			when (View.InvoiceMatch
			    and !PayablesInvoice.MatchProcessType.ServiceContract
				and FilesRebuilt)

		ShowDetailMatch
			when (View.DetailMatch
			    and !PayablesInvoice.MatchProcessType.ServiceContract
				and FilesRebuilt)

		ShowMessagesPanel
			when  (View.MatchComplete
			and    PayablesInvoice.HasOpenMatchInvoiceMessages)

		ShowChargebackPanel
			when  (View.MatchComplete
			and    PayablesInvoice.PayablesInvoiceChargebackRel exists)

		ShowAOCPanels
			when (!PayablesInvoice.HasBeenMatched
				and FilesRebuilt)

		AllowRemove
			when (MatchReconQueueFinanceResourceRel exists
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowAddToMyWorkList
			when (!PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowReassign
			when (!PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		AllowCheckInvoiceForClerk
			when (!PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		PrepayPostDateNeedsUpdating
			when (PayablesInvoice.MatchPrepayment
			and   PayablesInvoice.Status.Released
			and   PayablesInvoice.CompanySystemClosingControlRel.Control
			and   PayablesInvoice.DistributionDate not within PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate)

		LineChargebackSelected
			when (SelectedDetailWithChargebackRel exists
			or    AddOnChargesWithChargebackRel exists)
			
		DisplayLineChargebackAmount
			when  (!Chargeback
			and    LineChargebackSelected)

		DisplayLineChargebackAmountService
			when  (!Chargeback
			and    LineChargebackSelected)

		UseNet
			when ((Vendor.MatchTable entered
					and Vendor.MatchTable.ChargebackType.Net)
				or (Vendor.MatchTable not entered
					and MatchCompanyRel.MatchTable.ChargebackType.Net))

		UseOverbill
			when ((Vendor.MatchTable entered
					and Vendor.MatchTable.ChargebackType.Overbill)
				or (Vendor.MatchTable not entered
					and MatchCompanyRel.MatchTable.ChargebackType.Overbill))

		StaleReceiptLines
			when (!PayablesInvoice.MatchProcessType.DropShip
			and   !PayablesInvoice.MatchProcessType.Service
			and   MatchPurchaseOrderInvoicesForDifferentInvoiceRel exists
			and   StaleReceiptLinesRel exists)

		NewReceiptLines
			when (!PayablesInvoice.MatchProcessType.DropShip
			and   !PayablesInvoice.MatchProcessType.Service
			and   NewReceiptLinesRel exists)

		NewInspections 
			when (!PayablesInvoice.MatchProcessType.DropShip
			and   !PayablesInvoice.MatchProcessType.Service
			and   NewInspectionsRel exists)
			
		ShowMarkAll
		    when (PayablesInvoice.MatchProcessType.ServiceContract 
			and   MatchWorkInvoiceDetailExists
			and  !PayablesInvoice.BudgetEditProcessing.InProcess
			and   PayablesInvoice.BackgroundProcessing not entered)

		CreateMatchReconMessage		
			when (MatchCompanyRel.CreateReconMessageForLines		
			and LineChargebackSelected
			and !Chargeback)

		ReconMessageOption2		
			when (ChargebackType.Option2
			and CreateMatchReconMessage
			and DerivedWithDiscrepancy)

		HasSets 
			when (MatchReconQueueSetRel exists)
	Relations
		MatchCompanyRel
			classic name is MACOMPANY
			one-to-one relation to MatchCompany
			Field Mapping uses symbolic key
				related.Company = Company

		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		MatchReconQueueFinanceResourceRel
			one-to-one relation to MatchReconQueueFinanceResource
			Field Mapping uses symbolic key
				related.Company 										= Company
				related.PayablesInvoice            						= PayablesInvoice
				related.FinanceResource            						= actor.agent(Employee).Employee

		MatchReconQueueFinanceResourceActorRel
			one-to-one relation to MatchReconQueueFinanceResource
			Field Mapping uses symbolic key
				related.Company 										= Company
				related.PayablesInvoice            						= PayablesInvoice
				related.FinanceResource            						= actor.agent(Employee).Employee

		LocalMatchReconQueueFinanceResourceRel
			one-to-one relation to MatchReconQueueFinanceResource
			Field Mapping uses symbolic key
				related.Company 										= Company
				related.PayablesInvoice            						= PayablesInvoice
				related.FinanceResource            						= LocalFinanceResource

		FinanceResourceActorRel
			one-to-one relation to FinanceResource
			Field Mapping uses symbolic key
				related.HROrganization		= actor.agent(Employee).HROrganization
				related.FinanceResource		= actor.agent(Employee).Employee

		LocalFinanceResourceActorRel
			one-to-one relation to FinanceResource
			Field Mapping uses symbolic key
				related.HROrganization							= LocalHROrganization
				related.FinanceResource							= LocalFinanceResource

		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "AP"

		GLCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= LocalCompanyGroup
				related.Company						= Company

		ReconciliationQueueBuildApmonitorRel
			one-to-one relation to PayablesProcessingMonitor
			Field Mapping uses symbolic key
				related.VendorGroup										= blank
				related.PayablesProcessingMonitor.PayGroup				= blank
				related.PayablesProcessingMonitor.RunProgram			= "MA167"
				related.PayablesProcessingMonitor.ProcessGroup			= blank
				related.PayablesProcessingMonitor.ProcessLevel			= blank
				related.PayablesProcessingMonitor.AccountStructure		= blank
				related.PayablesProcessingMonitor.RunGroup				= blank
				related.PayablesProcessingMonitor.AuthorityCode			= blank
				related.PayablesProcessingMonitor.Company				= blank
				related.PayablesProcessingMonitor.BankTransactionCode	= blank

		MatchWorkInvoiceDetailSelectedRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.MatchWork		= MatchWork
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.Selected)

		MatchWorkInvoiceDetailNotReviewedRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.MatchWork		= MatchWork
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.SortSelect = blank)

		SelectedDetailWithChargebackRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.MatchWork		= MatchWork
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.Selected
				and    related.CreateChargeback)

		DetailWithChargebackRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.MatchWork		= MatchWork
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.CreateChargeback)

		AddOnChargesWithChargebackRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company			= Company
				related.MatchWork		= MatchWork
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.CreateChargeback)

		SelectMatchWorkInvoiceDetailsRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.MatchWork		= MatchWork
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.MatchReconQueueSet = blank)

		MatchWorkInvoiceDetailNotSelectedRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.MatchWork		= MatchWork
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (!related.Selected)

		PendingSetInvoiceDetailRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.MatchWork		= MatchWork
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.Selected
				and    related.MatchReconQueueSet = blank)

		MatchReconQueueInvoiceDetailPreviousRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.MatchWork		= MatchWork
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.MatchReconQueueSet entered
				and    related.MatchReconQueueSet = LocalSet)

		AllSelectedInvoiceDetailRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= MatchWork
				related.PayablesInvoice            						= PayablesInvoice
			Instance Selection
				where (related.MatchReconQueueSet entered)

		ReviewedLinesRel
			one-to-many relation to MatchWorkInvoiceDetail 
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= MatchWork
				related.PayablesInvoice            						= PayablesInvoice
			Instance Selection
				where (related.SortSelect entered)

		ContractDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice

		ReviewedServiceQuantityContractDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.ContractLine.ServiceCode.Quantity
				and    related.Reviewed)

		ReviewedServiceAmountContractDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.ContractLine.ServiceCode.Amount
				and    related.Reviewed)

		NotReviewedServiceQuantityContractDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.ContractLine.ServiceCode.Quantity
				and    related.NotReviewed)

		NotReviewedServiceAmountContractDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.ContractLine.ServiceCode.Amount
				and    related.NotReviewed)

		LocalPayablesInvoiceDetailRel
			one-to-one relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.PayablesInvoice            						= PayablesInvoice
				related.PurchaseOrder									= LocalPurchaseOrder
				related.PurchaseOrderLine								= LocalPurchaseOrderLine
				related.Contract										= LocalContract
				related.ContractLine									= LocalContractLine
				related.PayablesInvoiceDetail							= LocalPayablesInvoiceDetail

		POCostMessageRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company											= Company
				related.PayablesInvoice									= PayablesInvoice
			Instance Selection
				where (related.MatchMessageOrigin.PoCost)

		POCostMessageWithCommentRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company											= Company
				related.PayablesInvoice									= PayablesInvoice
			Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and    related.HasComments)

		MatchInvoiceMessageRel
			one-to-many relation to MatchInvoiceMessage
			Field Mapping uses symbolic key
				related.Company											= Company
				related.PayablesInvoice									= PayablesInvoice

		PayablesInvoiceAddOnChargeRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.PayablesInvoice            						= PayablesInvoice

		PurchaseOrderReceiptSet9Rel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
				related.Company                 						= Company
				related.Vendor                  						= Vendor
				related.PurchaseOrder									= PurchaseOrder

		OpenReceiptsPool1Rel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
				related.Company                 						= Company
				related.Vendor                  						= Vendor
			Instance Selection
				where (related.ReceiptAmount > related.MatchedAmount
				or     related.ReceiptAmount not entered)

		OpenReceiptsPool2Rel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
				related.Company                 						= Company
				related.Vendor                  						= Vendor
				related.PurchaseOrder									= PurchaseOrder
			Instance Selection
				where (related.ReceiptAmount > related.MatchedAmount
				or     related.ReceiptAmount not entered)

		OpenReceiptsPool3Rel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses Set9
				related.Company			= Company
				related.Vendor			= Vendor
				related.PurchaseOrder	= PurchaseOrder
			Instance Selection
				where (related.PurchaseFromLocation = PurchaseOrder.PurchaseFromLocation
				and   (related.ReceiptAmount > related.MatchedAmount
				or     related.ReceiptAmount not entered))

		MatchPurchaseOrderInvoicesForDifferentInvoiceRel
			one-to-many relation to MatchPurchaseOrderInvoice
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PurchaseOrder	= PurchaseOrder
			Instance Selection
				where (related.PayablesInvoice != PayablesInvoice)

		ReceiptLinesRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork	= MatchWork
				related.Company		= Company

		StaleReceiptLinesRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork										= MatchWork
				related.Company                 						= Company
			Instance Selection
				where (!related.ItemType.Service
				and     related.PurchaseOrderReceiptLine.MatchedQuantity != related.MatchedQuantity)

		NewReceiptLinesRel
            one-to-many relation to PurchaseOrderReceiptLine
            Field Mapping uses Set4
                related.Company                 = Company
                related.PurchaseOrder  			= PurchaseOrder
            Instance Selection
            	where (related.OpenToMatchQuantity entered
				and    related.create stamp > BuildStamp
				and    related.Status.ReleasedInspected)

		NewInspectionsRel
            one-to-many relation to POReceiptAdjustmentAndInspection
            Field Mapping uses ByPurchaseOrder
                related.Company                 			= Company
            Instance Selection
                where (related.PurchaseOrderReceipt.PurchaseOrder 	= PurchaseOrder
            	and    related.create stamp > BuildStamp)

		SelectedReceiptLinesRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork	= MatchWork
				related.Company		= Company
			Instance Selection
				where (related.Selected)

		SelectedServiceSpecialReceiptLineRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses symbolic key
				related.Company		= Company
				related.MatchWork	= MatchWork
			Instance Selection
				where (related.Selected
					and (related.ItemType.Service
						or related.ItemType.Special))

		PurchaseOrderReceiptLinesNotSelectedRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork										= MatchWork
				related.Company                 						= Company
				related.Vendor											= Vendor
			Instance Selection
				where (!related.Selected)

		ReceiptLineBySelectedRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses BySelected
				related.MatchWork	= MatchWork
				related.Company		= Company
				related.Vendor		= Vendor

		SelectMatchWorkReceiptLinesRel
			one-to-many relation to MatchWorkReceiptLine	
			Field Mapping uses symbolic key
				related.Company		= Company
				related.MatchWork	= MatchWork
			Instance Selection
				where (((related.Selected
							and related.PayablesInvoice = PayablesInvoice)
						or !related.Selected)	
					and related.MatchReconQueueSet = blank)

		PendingSetReceiptLineRel
			one-to-many relation to MatchWorkReceiptLine	
			Field Mapping uses symbolic key
				related.Company		= Company
				related.MatchWork	= MatchWork
			Instance Selection
				where (related.PayablesInvoice = PayablesInvoice
					and related.Selected
					and related.MatchReconQueueSet = blank)

		MatchWorkInvoiceRel
			one-to-one relation to MatchWorkInvoice
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= MatchWork
				related.PayablesInvoice									= PayablesInvoice

		LocalMatchWorkRel
			one-to-one relation to MatchWork
			Field Mapping uses symbolic key
				related.Company                 						= LocalMatchCompany
				related.MatchWork										= LocalMatchWork

		LocalMatchWorkInvoiceRel
			one-to-one relation to MatchWorkInvoice
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= MatchWork
				related.PayablesInvoice									= LocalPayablesInvoice

		MatchWorkInvoiceDetailRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= MatchWork
				related.PayablesInvoice									= PayablesInvoice

		InvoiceDetailBySelectedRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses BySelected
				related.Company                 						= Company
				related.MatchWork										= MatchWork
				related.PayablesInvoice									= PayablesInvoice

 		LocalMatchWorkInvoiceDetailRel
			one-to-one relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= MatchWork
				related.PayablesInvoice									= LocalPayablesInvoice
				related.PurchaseOrder									= LocalPurchaseOrder
				related.PurchaseOrderLine								= LocalPurchaseOrderLine
				related.Contract										= LocalContract
				related.ContractLine									= LocalContractLine
				related.PayablesInvoiceDetail							= LocalPayablesInvoiceDetail

		MatchWorkInvoiceAddOnChargeRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= MatchWork
				related.PayablesInvoice									= PayablesInvoice

 		LocalMatchWorkInvoiceAddOnChargeRel
			one-to-one relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= MatchWork
				related.PayablesInvoice									= PayablesInvoice
				related.PurchaseOrder									= LocalPurchaseOrder
				related.PurchaseOrderLine								= LocalPurchaseOrderLine
				related.Contract										= LocalContract
				related.ContractLine									= LocalContractLine
				related.AddOnCharge										= LocalAddOnCharge
				related.MatchWorkInvoiceAddOnCharge						= LocalInvoiceAddOnCharge

		LocalMatchWorkReceiptLineRel
			one-to-one relation to MatchWorkReceiptLine
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= MatchWork
				related.PurchaseOrder									= LocalPurchaseOrder
				related.PurchaseOrderLine								= LocalPurchaseOrderLine
				related.PurchaseOrderReceipt							= LocalReceipt
				related.PurchaseOrderReceiptLine						= LocalReceiptLine

		LocalMatchWorkReceiptLineAOCRel
			one-to-one relation to MatchWorkReceiptLineAOC
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= MatchWork
				related.PurchaseOrder									= LocalPurchaseOrder
				related.PurchaseOrderLine								= LocalPurchaseOrderLine
				related.PurchaseOrderReceipt							= LocalReceipt
				related.PurchaseOrderReceiptLine						= LocalReceiptLine
				related.AddOnCharge										= LocalAddOnCharge

		LocalPurchaseOrderLineRel
			one-to-one relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.PurchaseOrder									= LocalPurchaseOrder
				related.PurchaseOrderLine								= LocalPurchaseOrderLine
		RemainingInvoicesRel
			one-to-many relation to MatchReconQueueFinanceResource
			Field Mapping uses ByFinanceResource
				related.FinanceResource									= actor.agent(Employee).Employee

		MatchReconQueueSetRel
			one-to-many relation to MatchReconQueueSet
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice

		MatchReconQueuePrevious1Rel
			one-to-one relation to MatchReconQueueSet
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice
				related.MatchReconQueueSet	 = Previous1

		MatchReconQueuePrevious2Rel
			one-to-one relation to MatchReconQueueSet
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice
				related.MatchReconQueueSet	 = Previous2

		MatchReconQueuePrevious3Rel
			one-to-one relation to MatchReconQueueSet
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice
				related.MatchReconQueueSet	 = Previous3

		PendingMatchReconQueueSetRel
			one-to-one relation to MatchReconQueueSet
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= PayablesInvoice
				related.MatchReconQueueSet	 = PendingSet

		MatchReconQueueSetDescendingRel
			one-to-many relation to MatchReconQueueSet
			Field Mapping uses ByDescendingSet
			Instance Selection
				where (related.Company				= Company
				and    related.PayablesInvoice		= PayablesInvoice)

		AllFinanceResourceRel
			one-to-many relation to FinanceResource
			Field Mapping uses symbolic key
				related.HROrganization = Company.FinanceEnterpriseGroup.HROrganization



		SelectMatchWorkInvoicesRel
			one-to-many relation to MatchWorkInvoice
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
			Instance Selection
				where (related.MatchReconQueueSet not entered
				and    related.IncludeInView)

		PendingInvoicesRel
			one-to-many relation to MatchWorkInvoice
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
			Instance Selection
				where (related.Selected
				and    related.MatchReconQueueSet not entered
				and    related.IncludeInView)

		SelectedInvoicesRel
			one-to-many relation to MatchWorkInvoice
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
			Instance Selection
				where (related.MatchReconQueueSet entered
				and    related.IncludeInView)

		NotSelectedInvoicesRel
			one-to-many relation to MatchWorkInvoice
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
			Instance Selection
				where (!related.Selected
				and    related.IncludeInView)

		PreviousInvoicesRel
			one-to-many relation to MatchWorkInvoice
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
			Instance Selection
				where (related.MatchReconQueueSet entered
				and    related.MatchReconQueueSet = LocalSet)

		SelectMatchWorkReceiptsRel
			one-to-many relation to MatchWorkReceipt
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
			Instance Selection
				where (related.Vendor = Vendor
					and related.MatchReconQueueSet not entered
					and related.IncludeInView)

		PendingReceiptsRel
			one-to-many relation to MatchWorkReceipt
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
			Instance Selection
				where (related.Selected
				and    related.Vendor		= Vendor
				and    related.MatchReconQueueSet not entered
				and    related.IncludeInView)

		SelectedReceiptsRel
			one-to-many relation to MatchWorkReceipt
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
			Instance Selection
				where (related.MatchReconQueueSet entered
				and    related.Vendor		= Vendor
				and    related.IncludeInView)

		NotSelectedReceiptsRel
			one-to-many relation to MatchWorkReceipt
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
			Instance Selection
				where (!related.Selected
				and    related.Vendor		= Vendor
				and    related.IncludeInView)

		PreviousReceiptsRel
			one-to-many relation to MatchWorkReceipt
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
			Instance Selection
				where (related.MatchReconQueueSet entered
				and    related.MatchReconQueueSet = LocalSet
				and    related.Vendor		= Vendor
				and    related.IncludeInView)


		SelectMatchWorkInvoiceAOCsRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
			Instance Selection
				where (related.MatchReconQueueSet not entered)

		PendingInvoiceAOCsRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
			Instance Selection
				where (related.Selected
				and    related.MatchReconQueueSet not entered)

		SelectedInvoiceAOCsRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder	= PurchaseOrder
			Instance Selection
				where (related.MatchReconQueueSet entered)

		NotSelectedInvoiceAOCsRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder	= PurchaseOrder
			Instance Selection
				where (!related.Selected)

		PreviousInvoiceAOCsRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses ByPurchaseOrder
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
			Instance Selection
				where (related.MatchReconQueueSet entered
				and    related.MatchReconQueueSet = LocalSet)

		SelectMatchWorkReceiptAOCsRel
			one-to-many relation to MatchWorkReceiptLineAOC
			Field Mapping uses ByPurchaseOrderReceipt
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder	= PurchaseOrder
			Instance Selection
				where (related.MatchReconQueueSet not entered)

		PendingReceiptAOCsRel
			one-to-many relation to MatchWorkReceiptLineAOC
			Field Mapping uses ByPurchaseOrderReceipt
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
			Instance Selection
				where (related.Selected
				and    related.MatchReconQueueSet not entered)

		SelectedReceiptAOCsRel
			one-to-many relation to MatchWorkReceiptLineAOC
			Field Mapping uses ByPurchaseOrderReceipt
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
			Instance Selection
				where (related.MatchReconQueueSet entered)

		NotSelectedReceiptAOCsRel
			one-to-many relation to MatchWorkReceiptLineAOC
			Field Mapping uses ByPurchaseOrderReceipt
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
			Instance Selection
				where (!related.Selected)

		PreviousReceiptAOCsRel
			one-to-many relation to MatchWorkReceiptLineAOC
			Field Mapping uses ByPurchaseOrderReceipt
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
			Instance Selection
				where (related.MatchReconQueueSet entered
				and    related.MatchReconQueueSet = LocalSet)

		MatchWorkReceiptLineAOCRel
			one-to-many relation to MatchWorkReceiptLineAOC 
			Field Mapping uses ByPurchaseOrderReceipt
				related.MatchWork			= MatchWork
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder

    	FinanceResourceAssignmentRel
            one-to-many relation to MatchReconQueueFinanceResource
            Field Mapping uses symbolic key
                related.Company 										= Company
                related.PayablesInvoice            						= PayablesInvoice

		AllowPrepayMatchWithoutReceiptRel
			one-to-many relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "AllowPrepayMatchWithoutReceipt"
			Instance Selection
				where (related.Value	= "YES")

		SmartReconUIV2Rel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "SmartReconUIVersion2"

		LocalMatchMessageToleranceRel
			one-to-one relation to MatchMessageTolerance
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
				related.MatchRule						= LocalMatchRule

		MatchWorkInvoiceDetailCBRel		
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company						= Company
				related.MatchWork 					= MatchWork
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.CreateChargeback	= false)

        MatchWorkReceiptLineCBRel		
            one-to-many relation to MatchWorkReceiptLine
            Field Mapping uses symbolic key
                related.Company                 	= Company
            	related.MatchWork					= MatchWork
				related.PurchaseOrder				= MatchWorkInvoiceDetailCBRel.PurchaseOrder
				related.PurchaseOrderLine			= MatchWorkInvoiceDetailCBRel.PurchaseOrderLine
			Instance Selection
				where (related.PayablesInvoice		= PayablesInvoice)

		SelectedDetailNotChargebackRel			
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
				related.Company			= Company
				related.MatchWork		= MatchWork
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where (related.Selected
				and   !related.CreateChargeback)

#ifdef module integration
		FSMBODConfigurationParameterRel
    		one-to-one relation to FSMBODConfigurationParameter
    		Field Mapping uses symbolic key
    			related.FSMBODConfigurationParameter	= LocalConfigurationParameter

		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 2
            	related.FSMBODConfiguration.Noun 		= "PulseAlert"
            	related.FSMBODConfiguration.Direction 	= 1

        FSMBODConfigurationDetailRel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= 2
            	related.FSMBODConfiguration.Noun 			= "PulseAlert"
            	related.FSMBODConfiguration.Direction 		= 1
            Instance Selection
				where (related.Alert						= "FSM_ION_ReconcilationInvoiceMessageAlert"
				and	   related.Enable)
#endif
    Sets
		ByVendorSearchName
			indexed
			Sort Order
				VendorSearchName
				Invoice
				Company
				Vendor
				PayablesInvoice

		ByVendor
			indexed
			Sort Order
				Vendor
				Company
				PayablesInvoice

		ByInvoice
			indexed
			Sort Order
				Invoice
				Company
				PayablesInvoice

		ByDueDate
			indexed
			Sort Order
				DueDate
				Company
				PayablesInvoice

		ByPurchaseOrder
			indexed
			Sort Order
				PurchaseOrder
				Company
				PayablesInvoice

		ByMatchWork
			indexed
			Sort Order
				Company
				MatchWork
				PayablesInvoice

	Field Rules
		PurchaseOrder
			if  (PayablesInvoice.DerivedNumberOfPurchaseOrders = 1)
				PurchaseOrder = PayablesInvoice.first MatchPurchaseOrderInvoicesRel.PurchaseOrder
			else
				initialize PurchaseOrder

		Buyer
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				Buyer = PayablesInvoice.ServiceContract.Buyer
			else
				Buyer = PurchaseOrder.Buyer

		HasServiceLines
			if (PayablesInvoice.ServiceDetailsRel exists)
				HasServiceLines = "Y"

		View
			if  (Vendor.RequireMatchReference)
				View = 1
			else
			if (PayablesInvoice.MatchPrepayment
			and PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
				View = 1
			else
			if (PayablesInvoice.MatchPrepayment
			and PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay)
				View = 2
			else
			if (!PayablesInvoice.HasInvoiceLines)
				View = 1
			else
			if  (PayablesInvoice.MatchProcessType.DropShip
			or   PayablesInvoice.MatchProcessType.Service)
				View = 2
			else
			if  (PayablesInvoice.RuleGroup entered
			and  PayablesInvoice.RuleGroup.MatchRuleToleranceArray.MatchRuleToleranceGroup[1].InvoiceMatchLevel.InvoiceMatch)
				default to 1
			else
			if (FinanceResourceActorRel.MatchPreference.InvoiceMatch)
				default to 1
			else
			if (MatchCompanyRel.MatchTable.RuleGroup1.MatchRuleToleranceArray.MatchRuleToleranceGroup[1].InvoiceMatchLevel.InvoiceMatch)
				default to 1
			else
				default to 2

	Create Rules
		PendingSet = 1



	Actions
		Create is a Create Action
			restricted


			Action Rules
				constraint (!PayablesInvoice.MatchStatus.POCostMessagesExist)
					"CannotMatch;CostMessagesExist"
				constraint (PayablesInvoice.MatchStatus.Unmatched)
					"InvoiceHasBeenMatched"

		CreateForBudgetProcessing is a Create Action
			restricted

		Update is an Update Action
			restricted

		FastUpdate is an Update Action
			restricted
			bypass field rules

		Delete is a Delete Action
			restricted

		PurgeSetsAndResourceRecords is an Instance Action
			restricted
			Action Rules
				invoke Purge MatchReconQueueFinanceResourceRel
				invoke Purge MatchReconQueueSetRel
				initialize MatchWork
				if  (PayablesInvoice.MatchStatus > 1)
					View = View.MatchComplete

		Purge is a Purge Action
			restricted
			default label is "Remove"
			Entrance Rules
				invoke Purge MatchReconQueueFinanceResourceRel
        		invoke Purge MatchReconQueueSetRel

 		RefreshAndOpen is an Instance Action
			valid when (AllowRefreshAndOpen)
        	default label is "RefreshAndOpen"
 			Action Rules
				LocalHROrganization 	= actor.agent(Employee).HROrganization
				LocalFinanceResource 	= actor.agent(Employee).Employee

				constraint (AllowRefreshAndOpen)
					"ActionIsNotValid;PleaseUseRefreshIcon"

				constraint (FinanceResourceActorRel exists)
					"FinanceResourceNotFoundForHROrganization<LocalHROrganization>FinanceResource<LocalFinanceResource>"

				include CheckInvoiceForClerk

				if (!PayablesInvoice.BackgroundProcessing entered)
	 				invoke ResetWorkFiles

		PrepareDetailMatch is an Instance Action
			restricted
			default label is "NavigateToDetailMatch"
			Action Rules
				View = 2
				include CreateWorkFiles
				constraint (ErrorMessage not entered)
					"<ErrorMessage>"

		PrepareInvoiceMatch is an Instance Action
			restricted
			default label is "NavigateToInvoiceMatch"

			Action Rules
				View = 1
				include CreateWorkFiles
				constraint (ErrorMessage not entered)
					"<ErrorMessage>"


		DetailView is an Instance Action
			default label is "ChangeToDetailLevelMatching"
			completion message is "ChangeToDetailViewComplete"
			valid when (AllowDetailView)
			Action Rules

				constraint (!PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
					"PrepayInvoiceUsingMethodPrepayFromInvoiceMustUseInvoiceMatch"

				if  (SelectedInvoicesRel exists
				or   PendingInvoicesRel exists
				or   SelectedReceiptsRel exists
				or   PendingReceiptsRel exists)
					confirmation required
						"ChangingViewsWillUndoAllCurrentSelections:Continue?"


				View = View.DetailMatch
				invoke PurgeDetail MatchWork
				invoke Purge MatchWork
				include ClearSets
				initialize MatchWork
				include CreateWorkFiles
				constraint (ErrorMessage not entered)
					"<ErrorMessage>"

		InvoiceView is an Instance Action
			default label is "ChangeToInvoiceLevelMatching"
			completion message is "ChangeToInvoiceViewComplete"
			valid when (AllowInvoiceView)
			Action Rules
				constraint (!PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay)
					"PrepayInvoiceUsingMethodEligibleForPrepayMustUseDetailMatch"

				if  (MatchWorkInvoiceDetailSelectedRel exists
				or   SelectedReceiptLinesRel exists)
					confirmation required
						"ChangingViewsWillUndoAllCurrentSelections:Continue?"

				View = View.InvoiceMatch

				invoke PurgeDetail MatchWork
				invoke Purge MatchWork

				include ClearSets
				initialize MatchWork

				include CreateWorkFiles
				constraint (ErrorMessage not entered)
					"<ErrorMessage>"

		PrepareAOCMatch is an Instance Action
			default label is "RefreshAOCWorkFiles"
			valid when (AllowResetAOCWorkFiles)
			Action Rules
				initialize Chargeback
				initialize ChargebackReason
        		if (MatchWork entered)
        			invoke PurgeDetail MatchWork
        		BuildStamp = current timestamp

			Exit Rules
				invoke Purge MatchReconQueueSetRel
				PendingSet = 1
				initialize Previous1
				initialize Previous2
				initialize Previous3

				if  (MatchWork not entered)
					invoke CreateOnly MatchWork
						assign result to NewMatchWork
						invoked.Company							= Company
						invoked.PayablesInvoice					= PayablesInvoice
						invoked.MatchPoint						= "1"
						invoked.ProcessMode						= "R"
						invoked.DocumentType					= "I"
						invoked.ReconciliationMatchLevel		= "DM"
						invoked.MatchLevel						= "DM"



					MatchWork									= NewMatchWork.MatchWork

				invoke Create MatchWorkInvoice
					fill in fields from PayablesInvoice
					invoked.MatchWork 									= MatchWork
					invoked.PurchaseOrder								= PurchaseOrder

				for each PayablesInvoice.PayablesInvoiceAddOnChargeRel   
					if (!each.RecordSource.CreatedByAocSpreadFromPo
					and !each.RecordSource.GeneratedByAocSpread)
						invoke Create MatchWorkInvoiceAddOnCharge
							fill in fields from each
							invoked.MatchWork 						= MatchWork
							invoked.MatchWorkInvoice				= each.PayablesInvoice
							invoked.MatchWorkInvoiceAddOnCharge		= each.PayablesInvoiceAddOnCharge

				if (Vendor.PoolOption not entered)
					LocalPoolOption = Vendor.PoolOption
				else
					LocalPoolOption = PayablesInvoice.MatchCompanyRel.PoolOption

				invoke Create MatchWorkReceipt
					invoked.Company		= Company
					invoked.MatchWork	= MatchWork

				for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
					for each each.PurchaseOrderAndLineAddOnChargeRel

						if  (!each.PurchaseOrder.Closed.Yes
						and (!LocalPoolOption.CompanyVendorPoShipTo
						or    each.ShipToLocation = PayablesInvoice.Location))

							invoke Create MatchWorkReceiptLineAOC
								fill in fields from each
								invoked.MatchWork				= MatchWork
								invoked.MatchedQuantity			= each.Quantity
								invoked.ReceivedQuantity		= each.Quantity
								invoked.ReceivedQuantityToMatch	= each.Quantity - each.MatchedQuantity
								invoked.UnmatchedQuantity		= each.Quantity - each.MatchedQuantity
								invoked.OriginalUnitCost		= each.EnteredUnitCost
								invoked.MatchUnitCost			= each.EnteredUnitCost

		SmartReconInvoiceMatch is an Instance Action
			default label is "Match"
			completion message is "<CompletionMessage>"
			valid when (AllowInvoiceMatch)
			Entrance Rules
				constraint (PayablesInvoice.BackgroundProcessing not entered)
					"CannotProcess;PleaseWaitForBackgroundActionToComplete"
				constraint (SelectedReceiptsRel exists)
					"AtLeastOneReceiptMustBeSelected"
				if (!PayablesInvoice.Status.Approved
				and !PayablesInvoice.Status.Released)
					constraint (!PayablesInvoice.RoutingRuleFound)
						"CannotMatch,InvoiceRequiresApproval"
				constraint (!NewInspectionsRel exists)
					"ThereIsANewInspectionForThisPurchaseOrder;PleaseRefresh"

			Action Rules

				invoke Purge PayablesInvoice.AsyncErrorRel













				initialize Difference3Amount

				for each SelectedInvoicesRel

					constraint (!each.PayablesInvoice.MatchStatus.POCostMessagesExist)
						"CannotMatch;CostMessagesExist"
					constraint (each.PayablesInvoice.MatchStatus.Unmatched)
						"InvoiceHasBeenMatched"

					LocalPayablesInvoice = each.PayablesInvoice

					ReconciliationInvoiceMatchedAmount  	+= each.MatchAmount
					ReconciliationInvoiceQuantity  			+= each.PayablesInvoice.HashQuantity
					ReconciliationInvoiceAddOnCharge 		+= each.MatchedAddOnChargeAmount







					for each each.PayablesInvoice.PayablesInvoiceDetailRel

						if  (each.MatchObjectID not entered)
							LocalPayablesInvoice					= each.PayablesInvoice
							LocalPayablesInvoiceDetail 				= each.PayablesInvoiceDetail
							LocalPurchaseOrder						= each.PurchaseOrder
							LocalPurchaseOrderLine					= each.PurchaseOrderLine
							LocalContract							= each.Contract
							LocalContractLine						= each.ContractLine
							if (LocalMatchWorkInvoiceDetailRel exists)
								invoke FastUpdate LocalMatchWorkInvoiceDetailRel
									invoked.Selected										= true
							else
								invoke Create MatchWorkInvoiceDetail
									fill in fields from each
									invoked.MatchWork 								= MatchWork
									invoked.Selected								= true
									invoked.PerformedFrom							= "MA67"
									if (each.ItemType.Service
									or  each.PayablesInvoice.MatchProcessType.DropShip)
										invoked.MatchToReceipt						= false
									else
										invoked.MatchToReceipt						= true

									if (each.TotalDistributionAmount entered)
										invoked.MatchedQuantity						= each.EnteredQuantity
										invoked.MatchUnitCost						= each.EnteredUnitCost
										invoked.MatchAmount							= each.TotalDistributionAmount
									else
										invoked.MatchedQuantity						= each.EnteredQuantity
										invoked.MatchUnitCost						= each.EnteredUnitCost
										invoked.MatchAmount							= each.EnteredQuantity * each.EnteredUnitCost

					for each each.PayablesInvoice.PayablesInvoiceAddOnChargeRel
						if  (each.MatchObjectID not entered
						and  each.PurchaseOrderLine entered)
							LocalPurchaseOrder										= each.PurchaseOrder
							LocalPurchaseOrderLine									= each.PurchaseOrderLine
							LocalContract											= each.Contract
							LocalContractLine										= each.ContractLine
							LocalInvoiceAddOnCharge									= each.PayablesInvoiceAddOnCharge
							LocalAddOnCharge										= each.AddOnCharge
							if (LocalMatchWorkInvoiceAddOnChargeRel exists)
								invoke FastUpdate LocalMatchWorkInvoiceAddOnChargeRel
									invoked.Selected										= true
							else
								invoke Create MatchWorkInvoiceAddOnCharge
									fill in fields from each
									invoked.MatchWork 							= MatchWork
									invoked.MatchWorkInvoiceAddOnCharge			= each.PayablesInvoiceAddOnCharge
									invoked.Selected							= true
									invoked.PerformedFrom						= "MA67"
									if  (Chargeback) 
										invoked.CreateChargeback				= true


				for each SelectedReceiptsRel

					if (each.PurchaseOrderReceipt entered)
						constraint (each.PurchaseOrderReceipt.Status.Released)
							"ReceiptMustBeReleased"


						LocalReceipt = each.PurchaseOrderReceipt

						ReconciliationReceiptMatchedAmount						+= each.PurchaseOrderReceipt.ReceiptAmount - each.PurchaseOrderReceipt.OtherAddOnChargesTotal - each.PurchaseOrderReceipt.MatchedAmount
						for each each.PurchaseOrderReceipt.PurchaseOrderReceiptLineAOCRel 
							if (each.PurchaseOrderReceiptLine not entered)
								ReconciliationReceiptMatchedAmount += each.TotalAddOnChargeAmount

						ReconciliationReceiptAddOnCharge						+= each.PurchaseOrderReceipt.OtherAddOnChargesTotal
						ReconciliationReceiptQuantity							+= each.UnmatchedQuantity



						for each each.PurchaseOrderReceipt.PurchaseOrderReceiptLine set
							if  (each.OpenToMatchQuantity entered
							and !each.PurchaseOrderLine.Closed.Yes 
							and (each.MatchObjectID not entered
							or   each.PurchaseOrderMatchInvoiceLinksRel exists)
							and  each.EnteredReceivedQuantity entered
							and (each.MatchUnitCost entered
							or   each.PurchaseOrderLine.CostOption.NoCharge))

								if  ((each.ItemType.Inventoried
								or    each.ItemType.NonStock)
								and   each.VendorPriceUOM != each.VendorBuyUOM
								and   each.MatchedQuantity entered)
									initialize UOMCalculation

									UOMCalculation.InputUOM			= each.PurchaseOrderReceiptLine.ReceivedUOMMultiplier
									UOMCalculation.InputToUOM		= each.PurchaseOrderReceiptLine.VendorPriceUOMMultiplier
									UOMCalculation.InputQuantity	= each.MatchedQuantity
									UOMCalculation.InputUnitCost	= each.OriginalUnitCost
									UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate

								LocalPurchaseOrder		= each.PurchaseOrder
								LocalPurchaseOrderLine	= each.PurchaseOrderLine
								LocalReceiptLine 		= each.PurchaseOrderReceiptLine
								if (LocalMatchWorkReceiptLineRel exists)
									invoke FastUpdate LocalMatchWorkReceiptLineRel
										invoked.Selected = true
								else
									invoke Create MatchWorkReceiptLine
										fill in fields from each
										invoked.MatchWork 					= MatchWork
										invoked.Company						= each.Company
										invoked.PurchaseOrderReceipt		= each.PurchaseOrderReceipt
										invoked.PurchaseOrderReceiptLine	= each.PurchaseOrderReceiptLine
										invoked.MatchUnitCost				= each.MatchUnitCost

										if  ((each.ItemType.Inventoried
										or    each.ItemType.NonStock)
										and   each.VendorPriceUOM != each.VendorBuyUOM
										and   each.MatchedQuantity entered)
											invoked.MatchedQuantity = UOMCalculation.OutputQuantity
										else
											invoked.MatchedQuantity = each.MatchedQuantity

										if  (each.OpenToMatchQuantity not entered)
											if  (each.VendorPriceUOMQuantity > 0)
												invoked.UnmatchedQuantity	= each.VendorPriceUOMQuantity
												if  (!each.ItemType.Service)
													invoked.MatchAmount		= each.VendorPriceUOMQuantity * each.MatchUnitCost
										else
										if  (each.OpenToMatchQuantity > 0)
											invoked.UnmatchedQuantity		= each.OpenToMatchQuantity
											if  (!each.ItemType.Service)
												invoked.MatchAmount			= each.OpenToMatchQuantity * each.MatchUnitCost

						initialize LocalPurchaseOrderLine
						for each each.PurchaseOrderReceipt.PurchaseOrderReceiptLineAOCRel

							if  ((each.PurchaseOrderReceiptLine.ItemType.Inventoried
							or    each.PurchaseOrderReceiptLine.ItemType.NonStock)
							and   each.PurchaseOrderReceiptLine.VendorPriceUOM != each.PurchaseOrderReceiptLine.ReceivedUOM
							and   each.ReceivedQuantityToMatch entered)
								initialize UOMCalculation

								UOMCalculation.InputUOM			= each.PurchaseOrderReceiptLine.ReceivedUOM
								UOMCalculation.InputToUOM		= each.PurchaseOrderReceiptLine.VendorPriceUOM
								UOMCalculation.InputQuantity	= each.ReceivedQuantityToMatch
								UOMCalculation.InputUnitCost	= each.OriginalUnitCost
								UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate

							LocalPurchaseOrder					= each.PurchaseOrder

							LocalReceiptLine 					= each.PurchaseOrderReceiptLine
							LocalAddOnCharge					= each.AddOnCharge

							if (LocalMatchWorkReceiptLineAOCRel not exists)
								LocalPurchaseOrderLine			= each.PurchaseOrderReceiptLine.PurchaseOrderLine

							if (LocalMatchWorkReceiptLineAOCRel exists)
								invoke FastUpdate LocalMatchWorkReceiptLineAOCRel
									invoked.Selected = true
							else
								invoke Create MatchWorkReceiptLineAOC
									fill in fields from each
									invoked.MatchWork 								= MatchWork
									invoked.Item									= each.PurchaseOrderReceiptLine.Item
									invoked.Selected								= true

									if  ((each.PurchaseOrderReceiptLine.ItemType.Inventoried
									or    each.PurchaseOrderReceiptLine.ItemType.NonStock)
									and   each.PurchaseOrderReceiptLine.VendorPriceUOM != each.PurchaseOrderReceiptLine.ReceivedUOM
									and   each.ReceivedQuantityToMatch entered)
										invoked.ReceivedQuantityToMatch				= UOMCalculation.OutputQuantity
									else
										invoked.ReceivedQuantityToMatch				= each.ReceivedQuantityToMatch
										invoked.OriginalUnitCost					= each.OriginalUnitCost

									invoked.UnmatchedQuantity						= each.ReceivedQuantityToMatch
									invoked.MatchAmount								= each.ReceivedAmountToMatch

									invoked.ReceivedDate							= each.PurchaseOrderReceipt.ReceivedDate

									if  (each.PurchaseOrderReceiptLine entered
									and  each.OpenToMatchQuantity not entered
									and  each.MatchObjectID not entered)
										invoked.OpenToMatchQuantity					= each.ReceivedQuantityToMatch

					else  
						constraint (each.PurchaseOrder.Released)
							"PurchaseOrderMustBeReleased"


						initialize LocalReceipt
						initialize LocalReceiptLine





						for each each.PurchaseOrder.ServiceLinesRel

							LocalPurchaseOrder		= each.PurchaseOrder
							LocalPurchaseOrderLine	= each.PurchaseOrderLine
							if (LocalMatchWorkReceiptLineRel exists)
								invoke FastUpdate LocalMatchWorkReceiptLineRel
									invoked.Selected = true
								ReconciliationReceiptMatchedAmount		+= LocalMatchWorkReceiptLineRel.MatchAmount
								ReconciliationReceiptQuantity			+= LocalMatchWorkReceiptLineRel.OpenToMatchQuantity

							else
								initialize WorkUnitCost
						      	if  (LocalMatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
									WorkUnitCost						= first MatchWork.POLineInvoiceMessageRel.AdjustedUnitCost


								if (WorkUnitCost not entered)
									WorkUnitCost						= each.EnteredUnitCost


								if  (each.ItemType.Service)
									if  (each.ServiceCode.Quantity)
										WorkOpenToMatchQuantity			= each.QuantityToProcess - (each.MatchedQuantity - each.ChargebackQuantity)
										WorkUnmatchedQuantity			= each.QuantityToProcess - (each.MatchedQuantity - each.ChargebackQuantity)
										WorkMatchAmount					= ((each.QuantityToProcess - (each.MatchedQuantity - each.ChargebackQuantity)) * each.EnteredUnitCost)
									else
										WorkOpenToMatchQuantity			= 1
										WorkUnmatchedQuantity			= 1
										WorkMatchAmount					= (each.EnteredUnitCost - (each.MatchedAmount + each.ServiceCancelAmount))
										WorkUnitCost					= WorkMatchAmount
								else
									WorkOpenToMatchQuantity				= each.QuantityToProcess - each.MatchedQuantity
									WorkUnmatchedQuantity				= each.Quantity + each.WriteOffQuantity + each.ChargebackQuantity - each.MatchedQuantity - each.ArchivedQuantity
									WorkMatchAmount						= ((each.Quantity + each.WriteOffQuantity + each.ChargebackQuantity - each.MatchedQuantity - each.ArchivedQuantity) * each.EnteredUnitCost)






								invoke Create MatchWorkReceiptLine
									invoked.MatchWork 					= MatchWork
									invoked.Company 					= each.Company
									invoked.Vendor 						= each.Vendor
									invoked.PurchaseOrder 				= each.PurchaseOrder
									invoked.PurchaseOrderLine 			= each.PurchaseOrderLine
									invoked.Item 						= each.Item
									invoked.ItemType 					= each.ItemType
									invoked.MatchDetailKey 				= each.MatchDetailKey
									invoked.ArchivedQuantity			= each.ArchivedQuantity
									invoked.ExtendedAmount				= each.ExtendedAmount
									invoked.Item						= each.Item
									invoked.MatchedQuantity				= each.MatchedQuantity
									invoked.ShipToLocation				= each.ShipToLocation
									invoked.VendorPriceUOMQuantity		= each.VendorPriceUOMQuantity
									invoked.VendorPriceUOM				= each.VendorPriceUOM
									invoked.MatchWork 					= MatchWork
									invoked.MatchUnitCost				= WorkUnitCost
									invoked.LastAdjustedMatchUnitCost	= MatchWork.LastCostUpdate
									invoked.EnteredReceivedQuantity		= each.Quantity
									invoked.BuyUOMQuantity				= each.Quantity
									invoked.VendorPriceMatchedQuantity	= each.MatchedQuantity - each.ChargebackQuantity
									invoked.OpenToMatchQuantity			= WorkOpenToMatchQuantity
									invoked.UnmatchedQuantity			= WorkUnmatchedQuantity
									invoked.MatchAmount					= WorkMatchAmount
									invoked.Selected					= true

									if (each.PurchaseOrder.Closed.Yes)
										invoked.Status					= 9
									else
										invoked.Status					= 1

								ReconciliationReceiptMatchedAmount		+= WorkMatchAmount
								ReconciliationReceiptQuantity			+= WorkOpenToMatchQuantity


						initialize LocalPurchaseOrderLine
						for each each.PurchaseOrder.PurchaseOrderLineAddOnChargesRel
						    if (each.PurchaseOrderLine.ItemType.Service)
								LocalPurchaseOrder					= each.PurchaseOrder
								LocalAddOnCharge					= each.AddOnCharge
								if (LocalMatchWorkReceiptLineAOCRel exists)
									invoke FastUpdate LocalMatchWorkReceiptLineAOCRel
										invoked.Selected = true
									ReconciliationReceiptAddOnCharge			+= LocalMatchWorkReceiptLineAOCRel.ReceivedAmountToMatch

								else
									WorkAmount1			= ((each.Quantity - each.MatchedQuantity) * each.EnteredUnitCost)
									WorkAmount2			= WorkAmount1 + each.MiscellaneousAddOnChargeInvoicedAmount

									invoke Create MatchWorkReceiptLineAOC
										fill in fields from each
										invoked.MatchWork 				= MatchWork
										invoked.Company					= each.Company
										initialize invoked.PurchaseOrderReceipt
										initialize invoked.PurchaseOrderReceiptLine
										invoked.ReceivedQuantity			= each.Quantity
										invoked.ReceivedQuantityToMatch		= each.Quantity - each.MatchedQuantity
										invoked.UnmatchedQuantity			= each.Quantity - each.MatchedQuantity
										invoked.OriginalUnitCost			= each.EnteredUnitCost
										invoked.MatchUnitCost				= each.EnteredUnitCost
										invoked.ReceivedAmountToMatch		= WorkAmount1
										invoked.MatchAmount					= WorkAmount1
										invoked.UnmatchedAmount				= WorkAmount2
										invoked.ItemType					= each.PurchaseOrderLine.ItemType
										invoked.MatchDetailKey				= each.PurchaseOrderLine.MatchDetailKey
										invoked.Selected					= true

									ReconciliationReceiptAddOnCharge			+= WorkAmount1



				for each MatchWorkInvoiceDetailSelectedRel 
					if (each.MatchWorkPOLineRel not exists)  
						LocalPurchaseOrder 		= each.first MatchWorkReceiptLineForPORel.PurchaseOrder  
						LocalPurchaseOrderLine 	= each.first MatchWorkReceiptLineForPORel.PurchaseOrderLine  
						if  (each.PayablesInvoiceDetail.ItemOnInvoiceRel not exists 
						and  each.MatchWorkReceiptLineForPORel exists  
						and  each.PurchaseOrderLine.EnteredUnitCost = LocalPurchaseOrderLineRel.EnteredUnitCost
						and  each.PurchaseOrderLine.VendorItem = LocalPurchaseOrderLineRel.VendorItem
						and  each.PurchaseOrderLine.ShipToLocation = LocalPurchaseOrderLineRel.ShipToLocation)
						

							invoke CreateTemporary PayablesInvoiceDetail 
								fill in fields from each.PayablesInvoiceDetail
									except invoked.PurchaseOrderLine 
									except invoked.PurchaseOrderReceipt 
									except invoked.PurchaseOrderReceiptLine 

								invoked.PurchaseOrderLine 	= LocalPurchaseOrderLine
								invoked.RecordSource        = "MA" 

							invoke Create MatchWorkInvoiceDetail 
								fill in fields from each 
									except invoked.PurchaseOrderLine 

								invoked.PurchaseOrderLine = LocalPurchaseOrderLine 

							invoke DeleteNoInvoiceUpdate each.PayablesInvoiceDetail 
							invoke Delete each 
						else 
							constraint (1 = 2)
								"InvoiceLineDoesNotMatchReceiptLineForInvoiceLevelMatch.EitherSwitchToDetailMatch,CorrectInvoiceLinesToMatchReceipt,OrRemoveInvoiceLinesToCompleteInvoiceLevelMatch"

				if  (Chargeback
				and  Difference3Amount not entered)

					if  (UseOverbill)
						Difference3Amount = OverbillSelectedInvoiceMatch
					else
						Difference3Amount = NetSelectedInvoiceMatch


				invoke ReconMatch MatchWork
					invoked.MatchPoint										= "1"
					invoked.ProcessMode										= "R"
					invoked.DocumentType									= "I"
					invoked.ReconciliationOverrideDetail					= true
					invoked.ReconciliationMatchLevel						= "IM"
					invoked.ReconciliationUpdate							= true
					invoked.ReconciliationChargebackIndicator				= Chargeback
					invoked.ReconciliationReasonCode						= ChargebackReason
					invoked.Difference3Amount								= Difference3Amount
					invoked.ReconciliationInvoiceMatchedAmount				= ReconciliationInvoiceMatchedAmount
					invoked.ReconciliationInvoiceQuantity					= ReconciliationInvoiceQuantity
					invoked.ReconciliationInvoiceAddOnCharge				= ReconciliationInvoiceAddOnCharge
					invoked.ReconciliationReceiptMatchedAmount				= ReconciliationReceiptMatchedAmount
					invoked.ReconciliationReceiptAddOnCharge				= ReconciliationReceiptAddOnCharge
					invoked.ReconciliationReceiptQuantity					= ReconciliationReceiptQuantity
					invoked.ReconciliationServiceTotal						= ReconciliationServiceTotal
					invoked.ReconciliationServiceAddOnCharge				= ReconciliationServiceAddOnCharge
					invoked.ReconciliationServiceQuantity					= ReconciliationServiceQuantity
					if (PayablesInvoice.InvoiceType.MatchPrepayment)
						invoked.InPrepaids										= true

			Exit Rules
				if (PayablesInvoice.MatchStatus.MatchedOutOfTolerance)
					CompletionMessage = MatchedOutOfToleranceMsg
				else
				if (PayablesInvoice.MatchStatus.MatchedInTolerance)
					CompletionMessage = MatchedInToleranceMsg
				else
				if (PayablesInvoice.MatchStatus.POCostMessagesExist)
					CompletionMessage = POCostMessagesExistMsg
				else
				if (PayablesInvoice.MatchStatus.MatchedWithAutoChargeback)

					CompletionMessage = MatchedWithAutoChargebackMsg + PayablesInvoice.first PayablesInvoiceNonCancelledChargebackRel.Invoice + "-" + PayablesInvoice.first PayablesInvoiceNonCancelledChargebackRel.Suffix
				else
					CompletionMessage = MatchCompleteMsg

				if  (!PayablesInvoice.BackgroundProcessing.MatchInvoice
				and  !PayablesInvoice.TaxEntityUsesSabrix
				and  !PayablesInvoice.BudgetEditProcessing.InProcess)


					invoke Purge MatchReconQueueFinanceResourceRel
					invoke Purge MatchReconQueueSetRel

					if (!GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or  !PayablesInvoice.GLCommitRelExists)
						invoke PurgeDetail MatchWork
						invoke Purge MatchWork
						initialize MatchWork

				View = View.MatchComplete

		LoadUserBatch is a Set Action
			restricted
			completion message is "RecordsLoadedFor<PrmAPClerk>"
			Parameters
				PrmHROrganization	is an HROrganization
				PrmAPClerk			is a FinanceResource

			Parameter Rules
				PrmAPClerk
					required
					default to actor.agent(Employee).Employee
					initial value is actor.agent(Employee).Employee
					constraint (!ReconciliationQueueBuildApmonitorRel.Status.RunningOrWaitingRecovery)
						"ReconciliationQueueBuildIsRunningOrWaitingRecovery"

			Action Rules

				Instance Rules
					LocalFinanceResource = PrmAPClerk

					if (!LocalMatchReconQueueFinanceResourceRel exists
					and !FinanceResourceAssignmentRel exists 
					and !PayablesInvoice.MatchProcessType.Expense
					and PayablesInvoice.AvailableForReconciliationQueue)
						invoke LoadInvoiceForUser
							resume on error
							invoked.PrmHROrganization = PrmHROrganization
							invoked.PrmAPClerk = PrmAPClerk

		CheckInvoiceForClerk is an Instance Action
			valid when (AllowCheckInvoiceForClerk)
			Action Rules
			    include CheckInvoiceForClerk

		AddToMyWorkList is an Instance Action
			valid when (AllowAddToMyWorkList)
			Action Rules
				LocalHROrganization		= actor.agent(Employee).HROrganization
				LocalFinanceResource	= actor.agent(Employee).Employee

				constraint (FinanceResourceActorRel exists)
					"FinanceResourceNotFoundForHROrganization<LocalHROrganization>FinanceResource<LocalFinanceResource>"

				invoke CheckInvoiceForClerk
				    resume on error
				        ErrorMessage = error message

				if (ErrorMessage entered)
				    confirmation required
						"<ErrorMessage>.AddToWorkListAnyway?"

				if  (Vendor.RequireMatchReference)
					View = 1
				else
				if (PayablesInvoice.MatchPrepayment
				and PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
					View = 1
				else
				if (PayablesInvoice.MatchPrepayment
				and PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay)
					View = 2
				else
				if (!PayablesInvoice.HasInvoiceLines)
					View = 1
				else
				if  (FinanceResourceActorRel.MatchPreference.InvoiceMatch)
					View = 1
				else
					View = 2

				invoke Create MatchReconQueueFinanceResource
					invoked.Company			= Company
					invoked.PayablesInvoice	= PayablesInvoice
					invoked.FinanceResource	= FinanceResourceActorRel.FinanceResource




		Reassign is an Instance Action
			valid when (AllowReassign)
			Parameters
				HROrganization
				PrmToClerk is a FinanceResource
			Parameter Rules
				HROrganization
					default to actor.context.HROrganization
				PrmToClerk
					required
					constraint (PrmToClerk exists)
						"FinanceResourceNotFoundForHROrganization<LocalHROrganization>FinanceResource<LocalFinanceResource>"
					constraint (PrmToClerk.IsMatchSpecialist)
						"ReassignClerkIsNotAMatchSpecialist"

					constraint (first FinanceResourceAssignmentRel.FinanceResource != PrmToClerk)
						"InvoiceIsAlreadyAssignedToThisClerk"

			Action Rules

				LocalHROrganization		= HROrganization
				LocalFinanceResource	= PrmToClerk

				include CheckInvoiceForClerk

				invoke Delete FinanceResourceAssignmentRel

				invoke Create MatchReconQueueFinanceResource
					invoked.Company			= Company
					invoked.PayablesInvoice	= PayablesInvoice
					invoked.FinanceResource	= PrmToClerk

		RemoveFromWorkList is an Instance Action
			valid when (AllowRemove)
			Action Rules
				invoke Purge MatchReconQueueFinanceResourceRel
			Exit Rules
				if  (!FinanceResourceAssignmentRel exists)
					invoke Purge MatchReconQueueSetRel
					invoke PurgeDetail MatchWork
					invoke Purge MatchWork
					initialize MatchWork

		LoadInvoiceForUser is an Instance Action
			restricted
			run in background
			Parameters
				PrmCompany			is like PayablesCompany
				PrmHROrganization	is an HROrganization
				PrmAPClerk			is a FinanceResource
			Action Rules

				LocalHROrganization		= PrmHROrganization
				LocalFinanceResource	= PrmAPClerk

				include CheckInvoiceForClerk

				if (Vendor.RequireMatchReference)
					View = 1
				else
				if (PayablesInvoice.MatchPrepayment
				and PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
					View = 1
				else
				if (PayablesInvoice.MatchPrepayment
				and PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay)
					View = 2
				else
				if (!PayablesInvoice.HasInvoiceLines)
					View = 1
				else
				if (PrmAPClerk.MatchPreference.InvoiceMatch)
					View = 1
				else
					View = 2

				initialize ErrorMessage
				invoke CheckInvoiceDetailDistributionsInBalance PayablesInvoice
					resume on error
						ErrorMessage = error message

				if (ErrorMessage not entered)
					invoke Create MatchReconQueueFinanceResource
						invoked.Company							= Company
						invoked.PayablesInvoice					= PayablesInvoice
						invoked.FinanceResource					= PrmAPClerk

#ifdef module integration
		ReconcilationInvoiceMessageAlert is an Instance Action
			restricted
			Parameters
			Action Rules
				invoke TriggerPulseAlert FSMBODConfigurationRel
					invoked.PrmActorGroup 	= "ACCT SUPERVISOR"
					invoked.PrmMainXML 		= ReconcilationInvoiceMessagePulseAlertXML
					invoked.PrmDescription	= ReconcilationInvoiceMessageAlertDescription
					invoked.PrmBODID		= DerivedReconcilationInvoiceMessageBODID
#endif

		SmartReconDetailMatch is an Instance Action
			default label is "Match"
			completion message is "<CompletionMessage>"
			valid when (AllowDetailMatch)
			Entrance Rules

				if (CostComponentDifference not entered)
					ChargebackIncludeAOC = false

				if (SmartReconUIV2)
					if  (PurchaseOrderReceiptLinesNotSelectedRel exists)
						confirmation required
							"NotAllReceiptLinesHaveBeenSelected:Continue?"

				constraint (PayablesInvoice.BackgroundProcessing not entered)
					"CannotProcess;PleaseWaitForBackgroundActionToComplete"
				constraint (!PayablesInvoice.MatchStatus.POCostMessagesExist)
					"CannotMatch;CostMessagesExist"
				constraint (PayablesInvoice.MatchStatus.Unmatched)
					"InvoiceHasBeenMatched"
				if (!PayablesInvoice.Status.Approved
				and !PayablesInvoice.Status.Released)
					constraint (!PayablesInvoice.RoutingRuleFound)
						"CannotMatch,InvoiceRequiresApproval"
				if (PayablesInvoice.InvoiceType.MatchPrepayment
				and AllowPrepayMatchWithoutReceiptRel exists)
				    NextSentence = true
				else
				if (!PayablesInvoice.MatchProcessType.ServiceContract)
				    constraint (SelectedReceiptLinesRel exists
				    and        !PendingSetReceiptLineRel exists)
					    "MustSelectAtLeastOneReceiptLine"

				if  (PayablesInvoice.MatchProcessType.ReceiptMatch
				and  MatchPurchaseOrderInvoicesForDifferentInvoiceRel exists)
					constraint (!StaleReceiptLinesRel exists)
						"CannotMatch.SelectedReceiptLineQuantitiesAreOutOfSyncDueToPriorMatchForThatReceiptLine.PleaseUseRefreshWorkFilesAndTryAgain"

				if (PayablesInvoice.InvoiceType.MatchPrepayment
				and AllowPrepayMatchWithoutReceiptRel exists)
				    NextSentence = true
				else
				if (PayablesInvoice.InvoiceType.MatchPrepayment)
					constraint (SelectedReceiptLinesRel exists)
						"NoReceiptDetailsAvailableForMatching"	

				if  (HasAddOnCharges
				and  CostComponentDifference entered
				and  !Chargeback
				and  AddOnChargesWithChargebackRel not exists)
				    confirmation required
				        "ThereAreAddOnChargeDifferences.ReconciliationMessagesAreNotCreatedForAddOnChargesAndChargebackHasNotBeenSelected.OKToContinue?"

				for each SelectedReceiptLinesRel
					if (each.ItemType.Special 
					or  each.ItemType.Service 
					or  each.PurchaseOrderLine = each.PurchaseOrderReceiptLine)  
						constraint (each.SelectedInvoiceDetailRel exists)
							"PurchaseOrderLineMismatchExistsForItem<each.MatchDetailKey>.VerifyEachSelectedReceiptLineHasAnInvoiceLineForThatPurchaseOrderLine,Item,VendorItem,AndItemType"

				if (CreateMatchReconMessage)	
					constraint (ChargebackType entered)
						"ChargebackReconOptionIsRequired"

				if (!Chargeback 
				and FinanceResourceActorRel.RestrictMatchedNotReceived)
					for each MatchWorkInvoiceDetailRel 

						if (!each.ItemType.Service
						and !each.CreateChargeback)

							constraint (each.MatchWorkReceiptItemRel exists)
								"MatchWillResultInMatchedNotReceivedQuantitiesWhichIsNotAllowedForThisResource"

							initialize DetailsVBuyMatchedQuantity
							initialize ReceiptLineVbuyReceiptQuantity

							if  (each.PayablesInvoiceDetail.VendorBuyUOM = each.PayablesInvoiceDetail.VendorPriceUOM)
								DetailsVBuyMatchedQuantity			= each.PayablesInvoiceDetail.MatchedQuantity
							else
							if  (!each.ItemType.Inventoried
							and  !each.ItemType.NonStock)
								DetailsVBuyMatchedQuantity			= each.PayablesInvoiceDetail.MatchedQuantity
							else
							if (!each.PayablesInvoiceDetail.IsCatchWeight)
								DetailsVBuyMatchedQuantity			= each.PayablesInvoiceDetail.BuyUOMMatchedQuantity



							for each each.MatchWorkReceiptItemRel
	
								if (each.Selected)
									if  ((each.PurchaseOrderReceiptLine.ItemType.Inventoried
									or    each.PurchaseOrderReceiptLine.ItemType.NonStock)
									and  (each.PurchaseOrderReceiptLine.IsCatchWeightItem))
										ReceiptLineVbuyReceiptQuantity					+= each.PurchaseOrderReceiptLine.BuyUOMQuantity
									else
									if  ((each.PurchaseOrderReceiptLine.ItemType.Inventoried
									or    each.PurchaseOrderReceiptLine.ItemType.NonStock))
										ReceiptLineVbuyReceiptQuantity					+= each.PurchaseOrderReceiptLine.OpenToMatchQuantity * (each.PurchaseOrderReceiptLine.PurchaseOrderLine.VendorPriceUOMMultiplier / each.PurchaseOrderReceiptLine.PurchaseOrderLine.EnteredBuyUOMMultiplier)
									else
										ReceiptLineVbuyReceiptQuantity          		+= each.PurchaseOrderReceiptLine.BuyUOMQuantity - each.PurchaseOrderReceiptLine.MatchedQuantity



							constraint (DetailsVBuyMatchedQuantity <= ReceiptLineVbuyReceiptQuantity)
								"MatchWillResultInMatchedNotReceivedQuantitiesWhichIsNotAllowedForThisResource"


				invoke Purge PayablesInvoice.AsyncErrorRel

				if (!PayablesInvoice.TaxEntityUsesSabrix)
					invoke ValidateMatchInvoiceBalance PayablesInvoice

			Action Rules

				if (AddOnChargesWithChargebackRel exists
				and !PayablesInvoice.CostComponentMatch)
					invoke FastUpdate PayablesInvoice 
						invoked.CostComponentMatch = true

					for each AddOnChargesWithChargebackRel
						invoke MiscellaneousCostComponentUpdate each.PayablesInvoiceAddOnChargeRel 


				initialize Difference3Amount
				initialize WorkDifference
				initialize WorkAmount1 
				initialize WorkAmount2 
				for each MatchWorkInvoiceDetailRel

					if  (each.Selected)


						LocalPayablesInvoice				= each.PayablesInvoice
						LocalPurchaseOrder					= each.PurchaseOrder
						LocalPurchaseOrderLine				= each.PurchaseOrderLine
						LocalContract						= each.Contract
						LocalContractLine					= each.ContractLine
						LocalPayablesInvoiceDetail			= each.PayablesInvoiceDetail

						ReconciliationInvoiceMatchedAmount	+= each.MatchAmount
						ReconciliationInvoiceQuantity		+= each.MatchedQuantity

						if  (Chargeback 
						or   each.CreateChargeback)
							if (!ReconMessageOption2)			
								Chargeback					= true

							if (each.AdjustCostMessageRel exists)

								if (UseNet)
									Difference3Amount 		+= each.NetAmount 
								else 
									Difference3Amount 		+= each.OverbillAmount
							else 
								Difference3Amount			+= each.MatchAmount



						if  (!each.ItemType.Service)
							WorkMatchedNotReceivedQuantity	= each.MatchedQuantity
							WorkMatchedNotReceivedQuantity	= each.MatchedNotReceivedQuantity	
							WorkDifference					= each.MatchAmount

						initialize LocalQuantityTotal
						for each each.MatchWorkReceiptItemRel
							Skip = false





							if  (each.PayablesInvoice entered
							and  each.OpenToMatchQuantity not entered)
								Skip = true

							if (LocalMatchWorkInvoiceDetailRel.PayablesInvoiceDetail.PurchaseOrderReceipt entered 
							and LocalMatchWorkInvoiceDetailRel.PayablesInvoiceDetail.PurchaseOrderReceipt not = each.PurchaseOrderReceipt)
								Skip = true 

							if  (each.Selected
							and  !Skip)

								if (each.ItemType.Service)
									if (each.PurchaseOrderLine.ServiceCode.Quantity)
										ReconciliationServiceTotal			+= each.MatchAmount
										ReconciliationServiceQuantity		+= each.OpenToMatchQuantity
									else
										ReconciliationServiceTotal			+= each.PurchaseOrderLine.OpenPurchaseAmountPOCurrency
										ReconciliationServiceQuantity		+= each.OpenToMatchQuantity
								else
									if (each.OpenToMatchQuantity entered)
										ReconciliationReceiptMatchedAmount	+= (each.MatchUnitCost * each.OpenToMatchQuantity)
										ReconciliationReceiptQuantity		+= each.OpenToMatchQuantity
									else
										ReconciliationReceiptMatchedAmount	+= each.MatchAmount
										ReconciliationReceiptQuantity		+= each.MatchedQuantity

								if (LocalMatchWorkInvoiceDetailRel.AdjustCostMessageRel exists)

									NextSentence = true 
								else 
								if  ((Chargeback 
								or    LocalMatchWorkInvoiceDetailRel.CreateChargeback)
								and  LocalMatchWorkInvoiceDetailRel.Selected)
									if (LocalMatchWorkInvoiceDetailRel.MatchedQuantity < each.OpenToMatchQuantity
									and each.OpenToMatchQuantity entered)
										WorkCost = LocalMatchWorkInvoiceDetailRel.MatchedQuantity * each.MatchUnitCost

										round WorkCost to nearest DerivedRoundTo

										Difference3Amount	-= WorkCost

									else
									if (UseOverbill
									and LocalMatchWorkInvoiceDetailRel.MatchAmount <= each.MatchAmount)
										Difference3Amount -= LocalMatchWorkInvoiceDetailRel.MatchAmount

									else
									if  (each.OpenToMatchQuantity entered)
										WorkCost							= (each.MatchUnitCost * each.OpenToMatchQuantity)

										round WorkCost to nearest DerivedRoundTo

										Difference3Amount					-= WorkCost

									else
										Difference3Amount					-= each.MatchAmount


								if  (!LocalMatchWorkInvoiceDetailRel.ItemType.Service)
									WorkMatchedNotReceivedQuantity			-= each.UnmatchedQuantity
									if  (each.OpenToMatchQuantity entered)
										WorkDifference						-= (each.MatchUnitCost * each.OpenToMatchQuantity)
									else
										WorkDifference						-= each.MatchAmount

								LocalQuantityTotal += each.DerivedOpenToMatchQuantity

								if  (LocalQuantityTotal >= LocalMatchWorkInvoiceDetailRel.MatchedQuantity)
									end for each

						if  (!each.ItemType.Service
						and  WorkMatchedNotReceivedQuantity < 0)
							initialize WorkMatchedNotReceivedQuantity
							initialize WorkDifference

						invoke FastUpdate LocalMatchWorkInvoiceDetailRel
							invoked.MatchedNotReceivedQuantity					= WorkMatchedNotReceivedQuantity
							invoked.DifferenceAmount							= WorkDifference



				if (MatchWorkInvoiceAddOnChargeRel exists)
					for each MatchWorkInvoiceAddOnChargeRel
						initialize WorkDifference
						if (each.Selected
						or  ChargebackIncludeAOC)
							ReconciliationInvoiceAddOnCharge						+= each.DerivedExtendedMatchAmount		

							LocalPurchaseOrder										= each.PurchaseOrder
							LocalPurchaseOrderLine									= each.PurchaseOrderLine
							LocalContract											= each.Contract
							LocalContractLine										= each.ContractLine
							LocalInvoiceAddOnCharge									= each.MatchWorkInvoiceAddOnCharge
							LocalAddOnCharge										= each.AddOnCharge

							if  (each.CreateChargeback
							or  ChargebackIncludeAOC)
								if (!ReconMessageOption2)			
									Chargeback										= true
									Difference3Amount 									+= each.DerivedExtendedMatchAmount 


							if (!each.ItemType.Service)
								WorkMatchedNotReceivedQuantity						= each.MatchedQuantity
								WorkDifference										= each.MatchAmount


							for each each.MatchWorkPOLineAOCRel

								Skip = false
								if  (each.PurchaseOrderLine != LocalMatchWorkInvoiceAddOnChargeRel.PurchaseOrderLine)
									Skip = true
								else
								if  (each.Selected
								and  each.PayablesInvoice entered
								and  each.PayablesInvoice != LocalMatchWorkInvoiceAddOnChargeRel.PayablesInvoice)
									Skip = true
								else
								if  (each.PayablesInvoice entered
								and  each.DerivedExtendedMatchAmount not entered)
									Skip = true
									


								if  ((each.Selected
								or    ChargebackIncludeAOC)
								and  !Skip)

									if (each.ItemType.Service)
										ReconciliationServiceAddOnCharge				+= each.ReceivedAmountToMatch 
									else 
										ReconciliationReceiptAddOnCharge				+= each.ReceivedAmountToMatch 
										ReconciliationReceiptAddOnCharge				+= each.MiscellaneousAddOnChargeInvoicedAmount 
			
									if   (LocalMatchWorkInvoiceAddOnChargeRel.CreateChargeback
									or    ChargebackIncludeAOC)
										if (UseOverbill
										and LocalMatchWorkInvoiceAddOnChargeRel.DerivedExtendedMatchAmount <= each.DerivedExtendedMatchAmount)
											Difference3Amount 						    -= LocalMatchWorkInvoiceAddOnChargeRel.DerivedExtendedMatchAmount
										else
											Difference3Amount							-= each.DerivedExtendedMatchAmount 
		


										WorkMatchedNotReceivedQuantity				-= each.UnmatchedQuantity
										WorkDifference								-= each.DerivedExtendedMatchAmount

							invoke FastUpdate LocalMatchWorkInvoiceAddOnChargeRel
								invoked.MatchedNotReceivedQuantity					= WorkMatchedNotReceivedQuantity
								invoked.DifferenceAmount							= WorkDifference


						else 
						if (PayablesInvoice.CostComponentMatch)

							LocalPurchaseOrder										= each.PurchaseOrder
							LocalPurchaseOrderLine									= each.PurchaseOrderLine
							LocalContract											= each.Contract
							LocalContractLine										= each.ContractLine
							LocalInvoiceAddOnCharge									= each.MatchWorkInvoiceAddOnCharge
							LocalAddOnCharge										= each.AddOnCharge
							Difference3Amount 										+= each.DerivedExtendedMatchAmount 
							ReconciliationInvoiceAddOnCharge						+= each.DerivedExtendedMatchAmount		

							for each each.MatchWorkPOLineAOCRel
								if  (each.PurchaseOrderLine = LocalMatchWorkInvoiceAddOnChargeRel.PurchaseOrderLine
								and  each.AddOnCharge = LocalMatchWorkInvoiceAddOnChargeRel.AddOnCharge)
									ReconciliationReceiptAddOnCharge				+= each.DerivedExtendedMatchAmount 
									if (UseOverbill
									and LocalMatchWorkInvoiceAddOnChargeRel.DerivedExtendedMatchAmount <= each.DerivedExtendedMatchAmount)
										Difference3Amount 						    -= LocalMatchWorkInvoiceAddOnChargeRel.DerivedExtendedMatchAmount

									else
										Difference3Amount							-= each.DerivedExtendedMatchAmount 







				if (Chargeback
				and MatchWork.MatchTable.ChargebackType.Net)
					constraint (Difference3Amount >= 0)
						"CannotCreateChargeback,InvoiceAmountMustBeGreaterThanReceiptAmount"



				if (Difference3Amount < 0)
					initialize Difference3Amount



				if  (Chargeback
				and  Difference3Amount not entered)
					if  (UseOverbill)
						Difference3Amount = OverbillSelected

					else
						Difference3Amount = NetSelected

						


				invoke ReconMatch MatchWork
					invoked.MatchPoint											= "1"
					invoked.ProcessMode											= "R"
					invoked.DocumentType										= "I"
					invoked.ReconciliationOverrideDetail						= false
					invoked.ReconciliationMatchLevel							= "DM"
					invoked.ReconciliationUpdate								= true
					if  (SelectedDetailWithChargebackRel exists
					or   AddOnChargesWithChargebackRel exists)
						invoked.ReconciliationChargebackIndicator				= true
					else
						invoked.ReconciliationChargebackIndicator				= Chargeback
					invoked.ReconciliationReasonCode							= ChargebackReason
					invoked.ReconciliationInvoiceMatchedAmount					= ReconciliationInvoiceMatchedAmount
					invoked.ReconciliationInvoiceQuantity						= ReconciliationInvoiceQuantity
					invoked.ReconciliationInvoiceAddOnCharge					= ReconciliationInvoiceAddOnCharge
					invoked.ReconciliationReceiptMatchedAmount					= ReconciliationReceiptMatchedAmount
					invoked.ReconciliationReceiptAddOnCharge					= ReconciliationReceiptAddOnCharge
					invoked.ReconciliationReceiptQuantity						= ReconciliationReceiptQuantity
					invoked.ReconciliationServiceTotal							= ReconciliationServiceTotal
					invoked.ReconciliationServiceAddOnCharge					= ReconciliationServiceAddOnCharge
					invoked.ReconciliationServiceQuantity						= ReconciliationServiceQuantity
					if (PayablesInvoice.InvoiceType.MatchPrepayment)
						invoked.InPrepaids										= true

					if  (Chargeback)
						invoked.Difference3Amount								= Difference3Amount

			Exit Rules
				if (PayablesInvoice.MatchStatus.MatchedOutOfTolerance)
					trigger "ReconcilationInvoiceMessageService" PA service
						resume on error
						title is "EG:<Company.FinanceEnterpriseGroup>CO:<Company>API:<PayablesInvoice>"
						Criteria
							Company.FinanceEnterpriseGroup
							Company
						Variables
							PayablesInvoice.Company
								variable name is Company
							PayablesInvoice.Invoice
								variable name is Invoice
							PayablesInvoice.Vendor
								variable name is Vendor
							Buyer
								variable name is Buyer
							Buyer.Employee.PresentationNameSnapshot
								variable name is BuyerName
							Buyer.Employee.EmployeeWorkEmailAddress
								variable name is BuyerEmailAddress
#ifdef module integration
	       			if (FSMBODConfigurationRel.Enable)
          				if(FSMBODConfigurationDetailRel.Enable)
			   				invoke ReconcilationInvoiceMessageAlert
#endif
					CompletionMessage = MatchedOutOfToleranceMsg
				else
				if (PayablesInvoice.MatchStatus.MatchedInTolerance)
					CompletionMessage = MatchedInToleranceMsg
				else
				if (PayablesInvoice.MatchStatus.POCostMessagesExist)
					CompletionMessage = POCostMessagesExistMsg
				else
				if (PayablesInvoice.MatchStatus.MatchedWithAutoChargeback)

					CompletionMessage = MatchedWithAutoChargebackMsg + PayablesInvoice.first PayablesInvoiceNonCancelledChargebackRel.Invoice + "-" + PayablesInvoice.first PayablesInvoiceNonCancelledChargebackRel.Suffix
				else
					CompletionMessage = MatchCompleteMsg





				if  (!PayablesInvoice.BackgroundProcessing.MatchInvoice
				and  !PayablesInvoice.TaxEntityUsesSabrix
				and  !PayablesInvoice.BudgetEditProcessing.InProcess)
					invoke Purge MatchReconQueueFinanceResourceRel
					invoke Purge MatchReconQueueSetRel
					if (!GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or  !PayablesInvoice.GLCommitRelExists)

						invoke PurgeDetail MatchWork
						invoke Purge MatchWork
						initialize MatchWork

				View = View.MatchComplete

		SmartReconServiceContractMatch is an Instance Action
			default label is "Match"
			completion message is "<CompletionMessage>"
			valid when (AllowServiceContractMatch)
			Entrance Rules
				constraint (PayablesInvoice.BackgroundProcessing not entered)
					"CannotProcess;PleaseWaitForBackgroundActionToComplete"
				constraint (!PayablesInvoice.MatchStatus.POCostMessagesExist)
					"CannotMatch;CostMessagesExist"
				constraint (PayablesInvoice.MatchStatus.Unmatched)
					"InvoiceHasBeenMatched"
				if (!PayablesInvoice.Status.Approved
				and !PayablesInvoice.Status.Released)
					constraint (!PayablesInvoice.RoutingRuleFound)
						"CannotMatch,InvoiceRequiresApproval"
				if (CreateMatchReconMessage)		
					constraint (ChargebackType entered)
						"ChargebackReconOptionIsRequired"
				invoke Purge PayablesInvoice.AsyncErrorRel


				if (!PayablesInvoice.TaxEntityUsesSabrix)
					invoke ValidateMatchInvoiceBalance PayablesInvoice

				invoke Purge MatchReconQueueSetRel
				PendingSet = 1
				initialize Previous1
				initialize Previous2
				initialize Previous3

				BuildStamp = current timestamp

				invoke FastUpdate PayablesInvoice
					invoked.BackgroundProcessing = PayablesInvoice.BackgroundProcessing.CreateMatchInvoice

				if (MatchWork not entered
					or MatchWork not exists)
					initialize MatchWork
					invoke CreateFromRecon MatchWork
						resume on error
							ErrorMessage = error message
						assign result to NewMatchWork
						invoked.Company							= Company
						invoked.PayablesInvoice					= PayablesInvoice
						invoked.PurchaseOrder					= PurchaseOrder
						invoked.MatchPoint						= "1"
						invoked.ProcessMode						= "R"
						invoked.DocumentType					= "I"
						if (View.InvoiceMatch)
							invoked.ReconciliationMatchLevel	= "IM"
							invoked.MatchLevel					= "IM"
						else
							invoked.ReconciliationMatchLevel	= "DM"
							invoked.MatchLevel					= "DM"
						invoked.BypassBuildWorkFileConstraints	= BypassBuildWorkFileConstraints

					if (ErrorMessage not entered)
						MatchWork								= NewMatchWork.MatchWork

				else
				if (BuildStamp date < PayablesInvoice.update stamp date)
					invoke RecreateWorkFiles MatchWork
						invoked.MatchPoint						= "1"
						invoked.ProcessMode						= "R"
						invoked.DocumentType					= "I"
						if (View.InvoiceMatch)
							invoked.ReconciliationMatchLevel	= "IM"
							invoked.MatchLevel					= "IM"
						else
							invoked.ReconciliationMatchLevel	= "DM"
							invoked.MatchLevel					= "DM"
						invoked.BypassBuildWorkFileConstraints	= BypassBuildWorkFileConstraints

				invoke FastUpdate PayablesInvoice
					initialize invoked.BackgroundProcessing

				constraint (ErrorMessage not entered)
					"<ErrorMessage>"

				invoke SelectAllInvoiceLines
				invoke CreateSet

			Action Rules

				initialize Difference3Amount
				if  (Chargeback)
				    Difference3Amount = ServiceContractDiscrepancy * -1
				else
				    for each ContractDetailRel
				        if (each.ReconDetailRel.CreateChargeback)
				        	if (UseNet
				        	or (UseOverbill
				        	and each.DerivedContractLineDiscrepancy < 0))
					            Difference3Amount += each.DerivedContractLineDiscrepancy * -1
								if (!ReconMessageOption2)	
						            Chargeback = each.ReconDetailRel.CreateChargeback
						            ChargebackReason = each.ReconDetailRel.ChargebackReason

				if (Difference3Amount entered
				and MatchWork.MatchTable.ChargebackType.Net)
					constraint (Difference3Amount >= 0)
						"CannotCreateChargebackForNegativeAmount"

				if (Difference3Amount < 0)
				    Difference3Amount = 0


				
				LocalSelectedNotCBWithDisc = false		
				for each SelectedDetailNotChargebackRel
					if (each.PayablesInvoiceDetail.DerivedContractLineDiscrepancy != 0)	
						LocalSelectedNotCBWithDisc = true
						end for each

				invoke ReconMatch MatchWork
					invoked.MatchPoint											= "1"
					invoked.ProcessMode											= "R"
					invoked.DocumentType										= "I"
					invoked.ReconciliationOverrideDetail						= false
					invoked.ReconciliationMatchLevel							= "DM"
					invoked.ReconciliationUpdate								= true
					if  (SelectedDetailWithChargebackRel exists
					and !LocalSelectedNotCBWithDisc)							
						invoked.ReconciliationChargebackIndicator				= true
					else
						invoked.ReconciliationChargebackIndicator				= Chargeback
					invoked.ReconciliationReasonCode							= ChargebackReason
					invoked.ReconciliationInvoiceMatchedAmount					= ReconciliationInvoiceMatchedAmount
					invoked.ReconciliationInvoiceQuantity						= ReconciliationInvoiceQuantity
					invoked.ReconciliationInvoiceAddOnCharge					= ReconciliationInvoiceAddOnCharge
					invoked.ReconciliationReceiptMatchedAmount					= ReconciliationReceiptMatchedAmount
					invoked.ReconciliationReceiptAddOnCharge					= ReconciliationReceiptAddOnCharge
					invoked.ReconciliationReceiptQuantity						= ReconciliationReceiptQuantity
					invoked.ReconciliationServiceTotal							= ReconciliationServiceTotal
					invoked.ReconciliationServiceAddOnCharge					= ReconciliationServiceAddOnCharge
					invoked.ReconciliationServiceQuantity						= ReconciliationServiceQuantity
					if (PayablesInvoice.InvoiceType.MatchPrepayment)
						invoked.InPrepaids										= true

					if  (Chargeback
					or   ReconMessageOption2)		
						invoked.Difference3Amount								= Difference3Amount

			Exit Rules
				if (PayablesInvoice.MatchStatus.MatchedOutOfTolerance)
					trigger "ReconcilationInvoiceMessageService" PA service
						resume on error
						title is "EG:<Company.FinanceEnterpriseGroup>CO:<Company>API:<PayablesInvoice>"
						Criteria
							Company.FinanceEnterpriseGroup
							Company
						Variables
							PayablesInvoice.Company
								variable name is Company
							PayablesInvoice.Invoice
								variable name is Invoice
							PayablesInvoice.Vendor
								variable name is Vendor
							Buyer
								variable name is Buyer
							Buyer.Employee.PresentationNameSnapshot
								variable name is BuyerName
							Buyer.Employee.EmployeeWorkEmailAddress
								variable name is BuyerEmailAddress
#ifdef module integration
	       			if (FSMBODConfigurationRel.Enable)
          				if(FSMBODConfigurationDetailRel.Enable)
			   				invoke ReconcilationInvoiceMessageAlert
#endif
					CompletionMessage = MatchedOutOfToleranceMsg
				else
				if (PayablesInvoice.MatchStatus.MatchedInTolerance)
					CompletionMessage = MatchedInToleranceMsg
				else
				if (PayablesInvoice.MatchStatus.POCostMessagesExist)
					CompletionMessage = POCostMessagesExistMsg
				else
				if (PayablesInvoice.MatchStatus.MatchedWithAutoChargeback)

					CompletionMessage = MatchedWithAutoChargebackMsg + PayablesInvoice.first PayablesInvoiceNonCancelledChargebackRel.Invoice + "-" + PayablesInvoice.first PayablesInvoiceNonCancelledChargebackRel.Suffix
				else
					CompletionMessage = MatchCompleteMsg





				if  (!PayablesInvoice.BackgroundProcessing.MatchInvoice
				and  !PayablesInvoice.TaxEntityUsesSabrix
				and  !PayablesInvoice.BudgetEditProcessing.InProcess)
					invoke Purge MatchReconQueueFinanceResourceRel
					invoke Purge MatchReconQueueSetRel
					if (!GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or  !PayablesInvoice.GLCommitRelExists)

						invoke PurgeDetail MatchWork
						invoke Purge MatchWork
						initialize MatchWork

				View = View.MatchComplete

		SmartReconAOCMatch is an Instance Action
			completion message is "<CompletionMessage>"
			valid when (AllInvoiceAOCsSelected)
			Entrance Rules
				constraint (!PayablesInvoice.MatchStatus.POCostMessagesExist)
					"CannotMatch;CostMessagesExist"
				constraint (PayablesInvoice.MatchStatus.Unmatched)
					"InvoiceHasBeenMatched"
				if (!PayablesInvoice.Status.Approved
				and !PayablesInvoice.Status.Released)
					constraint (!PayablesInvoice.RoutingRuleFound)
						"CannotMatch,InvoiceRequiresApproval"

				invoke Purge PayablesInvoice.AsyncErrorRel

				if (!PayablesInvoice.TaxEntityUsesSabrix)
					invoke ValidateMatchInvoiceBalance PayablesInvoice

			Action Rules
				invoke ReconMatch MatchWork
					invoked.MatchPoint											= "1"
					invoked.ProcessMode											= "R"
					invoked.DocumentType										= "I"
					invoked.ReconciliationOverrideDetail						= false
					invoked.ReconciliationMatchLevel							= "DM"
					invoked.ReconciliationUpdate								= true
					invoked.ReconciliationChargebackIndicator					= Chargeback
					invoked.ReconciliationReasonCode							= ChargebackReason
					invoked.ReconciliationInvoiceMatchedAmount					= ReconciliationInvoiceMatchedAmount
					invoked.ReconciliationInvoiceQuantity						= ReconciliationInvoiceQuantity
					invoked.ReconciliationInvoiceAddOnCharge					= ReconciliationInvoiceAddOnCharge
					invoked.ReconciliationReceiptMatchedAmount					= ReconciliationReceiptMatchedAmount
					invoked.ReconciliationReceiptAddOnCharge					= ReconciliationReceiptAddOnCharge
					invoked.ReconciliationReceiptQuantity						= ReconciliationReceiptQuantity
					invoked.ReconciliationServiceTotal							= ReconciliationServiceTotal
					invoked.ReconciliationServiceAddOnCharge					= ReconciliationServiceAddOnCharge
					invoked.ReconciliationServiceQuantity						= ReconciliationServiceQuantity
					if (PayablesInvoice.InvoiceType.MatchPrepayment)
						invoked.InPrepaids										= true

					if  (Chargeback)
						if (UseOverbill)
							invoked.Difference3Amount							= OverbillSelectedAOCMatch
						else
							invoked.Difference3Amount							= NetSelectedAOCMatch

			Exit Rules
				if (PayablesInvoice.MatchStatus.MatchedOutOfTolerance)
					CompletionMessage = MatchedOutOfToleranceMsg
				else
				if (PayablesInvoice.MatchStatus.MatchedInTolerance)
					CompletionMessage = MatchedInToleranceMsg
				else
				if (PayablesInvoice.MatchStatus.POCostMessagesExist)
					CompletionMessage = POCostMessagesExistMsg
				else
				if (PayablesInvoice.MatchStatus.MatchedWithAutoChargeback)

					CompletionMessage = MatchedWithAutoChargebackMsg + PayablesInvoice.first PayablesInvoiceNonCancelledChargebackRel.Invoice + "-" + PayablesInvoice.first PayablesInvoiceNonCancelledChargebackRel.Suffix
				else
					CompletionMessage = MatchCompleteMsg



				if  (!PayablesInvoice.BackgroundProcessing.MatchInvoice
				and  !PayablesInvoice.TaxEntityUsesSabrix
				and  !PayablesInvoice.BudgetEditProcessing.InProcess)
					invoke Purge MatchReconQueueFinanceResourceRel
					invoke Purge MatchReconQueueSetRel

					if (!GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
					or  !PayablesInvoice.GLCommitRelExists)
						invoke PurgeDetail MatchWork
						invoke Purge MatchWork
						initialize MatchWork

				View = View.MatchComplete

		SelectAllDetails is an Instance Action 
			valid when (View.DetailMatch)
			Action Rules 
				invoke SelectRecordForRecon MatchWorkInvoiceDetailNotSelectedRel
				invoke SelectRecordForRecon PurchaseOrderReceiptLinesNotSelectedRel




		SelectAllInvoiceLines is an Instance Action
			valid when (AllowSelectAllInvoiceLines)
			Action Rules
				invoke SelectRecordForRecon MatchWorkInvoiceDetailNotSelectedRel

		UnselectAllInvoiceLines is an Instance Action
			valid when (AllowUnselectAllInvoiceLines)
			Action Rules
				invoke UnselectRecordForRecon PendingSetInvoiceDetailRel

		SelectAllReceiptLines is an Instance Action
			valid when (AllowSelectAllReceiptLines)
			Action Rules
				invoke SelectRecordForRecon PurchaseOrderReceiptLinesNotSelectedRel

		UnselectAllReceiptLines is an Instance Action
			valid when (AllowUnselectAllReceiptLines)
			Action Rules
				invoke UnselectRecordForRecon PendingSetReceiptLineRel


		AutoMatchFromBatch is a Set Action
			restricted
			Parameters
				PrmCompany		is a PayablesCompany
				PrmInvoice 		is a PayablesInvoice
			Instance Selection
				where (Company 			= PrmCompany
				and    PayablesInvoice 	= PrmInvoice)
			Action Rules
				Instance Rules
					if (View.InvoiceMatch)
						invoke MagicInvoiceMatch
						if  (PendingInvoicesRel exists)
							invoke CreateInvoiceSet
					else
						invoke AutoMatch
						if  (PendingSetInvoiceDetailRel exists)
							invoke CreateSet

					invoke FastUpdate PrmInvoice
						initialize invoked.BackgroundProcessing

		AutoMatch is an Instance Action
			default label is "SelectAllMatchingLines"
			completion message is "SelectionOfExactMatchingLinesComplete"
			valid when (AllowCreateAutoSetDetailMatch)
			Action Rules
				initialize PendingType

				if (PayablesInvoice.RuleGroup entered)
					LocalMatchRule = PayablesInvoice.RuleGroup
				else
				if ((PayablesInvoice.MatchProcessType.Service
				or  PayablesInvoice.MatchProcessType.ServiceContract)
				and MatchCompanyRel.ServiceMessageMatchRule entered)
				    LocalMatchRule = MatchCompanyRel.ServiceMessageMatchRule
				else
					LocalMatchRule = MatchCompanyRel.MatchTable.RuleGroup1

				for each MatchWorkInvoiceDetailNotSelectedRel

					LocalPayablesInvoice										= each.PayablesInvoice
					LocalPurchaseOrder											= each.PurchaseOrder
					LocalPurchaseOrderLine										= each.PurchaseOrderLine
					LocalContract												= each.Contract
					LocalContractLine											= each.ContractLine
					LocalPayablesInvoiceDetail									= each.PayablesInvoiceDetail
					for each each.MatchWorkReceiptLinesRel
						if (!each.Selected)




							if  (LocalPayablesInvoiceDetailRel.MatchDetailKey 		= each.MatchDetailKey
							and  LocalPayablesInvoiceDetailRel.MatchedQuantity 		= each.DerivedOpenToMatchQuantity
							and  LocalPayablesInvoiceDetailRel.MatchUnitCost 		= each.MatchUnitCost
							and  LocalPayablesInvoiceDetailRel.EnteredUOM 			= each.ReceivedUOM)
								invoke SelectRecordForRecon each
								invoke SelectRecordForRecon LocalMatchWorkInvoiceDetailRel
								PendingType = 1
								end for each
							else
								Sub1 = 1
								Done = false

								while (!Done)

									LocalMatchRuleToleranceGroup = LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1]
									WithinTolerance = false

									if  (LocalMatchRuleToleranceGroup.MatchToleranceOption.Extended
									or   LocalMatchRuleToleranceGroup.MatchToleranceOption.ExtendedAndQuantity)

										Difference1Amount							= LocalPayablesInvoiceDetailRel.TotalDistributionAmount - each.MatchAmount
										DifferenceWorkAmount			 			= each.MatchAmount

										if (Difference1Amount			 			not entered)
											WithinTolerance							= true
										else
										if  (Difference1Amount						< 0)
											include 303aCheckExtUnderTol
										else
											include 303bCheckExtOverTol
									else
										Difference2Amount							= LocalPayablesInvoiceDetailRel.MatchUnitCost - each.MatchUnitCost
										Difference2WorkAmount						= each.MatchUnitCost

										if (Difference2Amount = 0)
											WithinTolerance							= true
										else
										if  (Difference2Amount						< 0)
											include 303cCheckUnitUnderTol
										else
											include 303dCheckUnitOverTol



									if  (WithinTolerance
									and  LocalMatchRuleToleranceGroup.MatchToleranceOption.UnitCost)
										if (Difference2Amount entered)
											Difference1Amount		= Difference2Amount * LocalPayablesInvoiceDetailRel.MatchedQuantity
											Difference3Amount		+= Difference1Amount



										if (each.OpenToMatchQuantity > 0)
											Difference2Amount		= LocalPayablesInvoiceDetailRel.MatchedQuantity - each.OpenToMatchQuantity
											Difference2WorkAmount	= each.OpenToMatchQuantity
										else
											Difference2Amount		= LocalPayablesInvoiceDetailRel.MatchedQuantity - each.PurchaseOrderReceiptLine.VendorPriceUOMQuantity
											Difference2WorkAmount	= each.PurchaseOrderReceiptLine.VendorPriceUOMQuantity

										if  (Difference2Amount = 0
										or  (Difference2Amount < 0
									   	and  LocalMatchRuleToleranceGroup.MatchRuleType.AllToOne))
											WithinTolerance							= true
											initialize Difference2Amount
										else
										if  (Difference2Amount						< 0)
											include 303eCheckQtyUnderTol
										else
											include 303fCheckQtyOverTol



									if  (WithinTolerance)
										invoke SelectRecordForRecon each
										invoke SelectRecordForRecon LocalMatchWorkInvoiceDetailRel
										PendingType = 1
										end for each

									Sub1 += 1

									if (Sub1 > 6
									or LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[Sub1].InvoiceMatchLevel not entered)
										Done = true

		CostSet is an Instance Action
			valid when (AllowCreateAutoSetDetailMatch)
			Action Rules
				for each MatchWorkInvoiceDetailNotSelectedRel

					LocalPayablesInvoice										= each.PayablesInvoice
					LocalPurchaseOrder											= each.PurchaseOrder
					LocalPurchaseOrderLine										= each.PurchaseOrderLine
					LocalContract												= each.Contract
					LocalContractLine											= each.ContractLine
					LocalPayablesInvoiceDetail									= each.PayablesInvoiceDetail
					for each each.MatchWorkReceiptLinesRel




						if  (LocalPayablesInvoiceDetailRel.MatchDetailKey 		= each.MatchDetailKey
						and  LocalPayablesInvoiceDetailRel.MatchUnitCost 		= each.MatchUnitCost)
							invoke SelectRecordForRecon each
							invoke SelectRecordForRecon LocalMatchWorkInvoiceDetailRel
							end for each

				if (PendingType entered)
					initialize PendingType
				else
					PendingType = 2

		QuantitySet is an Instance Action
			valid when (AllowCreateAutoSetDetailMatch)
			Action Rules
				for each MatchWorkInvoiceDetailNotSelectedRel
					LocalPayablesInvoice									= each.PayablesInvoice
					LocalPurchaseOrder										= each.PurchaseOrder
					LocalPurchaseOrderLine									= each.PurchaseOrderLine
					LocalContract											= each.Contract
					LocalContractLine										= each.ContractLine
					LocalPayablesInvoiceDetail								= each.PayablesInvoiceDetail
					for each each.MatchWorkReceiptLinesRel
						if (LocalPayablesInvoiceDetailRel.MatchDetailKey = each.MatchDetailKey
						and LocalPayablesInvoiceDetailRel.MatchedQuantity = each.EnteredReceivedQuantity)
							invoke SelectRecordForRecon each
							invoke SelectRecordForRecon LocalMatchWorkInvoiceDetailRel
							end for each

				if (PendingType entered)
					initialize PendingType
				else
					PendingType = 3

		CreateSet is an Instance Action
			restricted
			completion message is "SetCreated"
			valid when (AllowCreateSet)
			Entrance Rules
				invoke Create MatchReconQueueSet
					invoked.Company				= Company
					invoked.PayablesInvoice		= PayablesInvoice
					invoked.MatchReconQueueSet	= PendingSet
					invoked.Type = PendingType
			Exit Rules
				invoke FastUpdate PendingSetInvoiceDetailRel
					invoked.MatchReconQueueSet = PendingSet

				for each PendingSetReceiptLineRel
					if (each.SelectedInvoiceDetailRel exists)
						invoke FastUpdate PendingSetReceiptLineRel
							invoked.MatchReconQueueSet = PendingSet

				Previous3 = Previous2
				Previous2 = Previous1
				Previous1 = PendingSet
				PendingSet += 1
				initialize PendingType

		UndoSet1 is an Instance Action
			completion message is "SetDeleted"
			restricted
			Action Rules
				invoke Purge MatchReconQueuePrevious1Rel
				PendingSet	= Previous1
				Previous1 	= Previous2
				Previous2 	= Previous3
				initialize Previous3

				if (!MatchReconQueueSetRel exists)
					PendingSet = 1
				else
					for each MatchReconQueueSetDescendingRel
						if (each.MatchReconQueueSet < Previous2)
							Previous3 = each.MatchReconQueueSet
							end for each

		UndoSet2 is an Instance Action
			completion message is "SetDeleted"
			restricted
			Action Rules
				invoke Purge MatchReconQueuePrevious2Rel
				Previous2 = Previous3
				initialize Previous3

				if  (!MatchReconQueueSetRel exists)
					PendingSet = 1
				else
					for each MatchReconQueueSetDescendingRel
						if (each.MatchReconQueueSet < Previous2)
							Previous3 = each.MatchReconQueueSet
							end for each

		UndoSet3 is an Instance Action
			completion message is "SetDeleted"
			restricted
			Action Rules
				invoke Purge MatchReconQueuePrevious3Rel
				initialize Previous3

				if (!MatchReconQueueSetRel exists)
					PendingSet = 1
				else
					for each MatchReconQueueSetDescendingRel
						if (each.MatchReconQueueSet < Previous2)
							Previous3 = each.MatchReconQueueSet
							end for each

		SetChargeback is an Instance Action
			valid when (AllowSetChargeback)
			Parameters
				PrmChargeback			is Boolean
				PrmChargebackReason		is a ProcurementReasonCode
				PrmChargebackReference	is a Reference
				PrmChargebackIncludeAOC is Boolean
			Parameter Rules
				PrmChargeback
					initial value is Chargeback
				PrmChargebackReason
					initial value is ChargebackReason
					if (PrmChargeback)
						required
				PrmChargebackIncludeAOC
					initial value is ChargebackIncludeAOC
				PrmChargebackReference
					initial value is ChargebackReference
			Action Rules
				Chargeback = PrmChargeback
				ChargebackReason = PrmChargebackReason
				ChargebackReference = PrmChargebackReference
				ChargebackIncludeAOC = PrmChargebackIncludeAOC
				if (PrmChargeback = false)
					initialize ChargebackReason
					initialize ChargebackReference
					initialize ChargebackIncludeAOC

		SetChargebackReconOption is an Instance Action		
			valid when (CreateMatchReconMessage)
			Parameters
				PrmChargebackType		is a LineChargebackOption
			Parameter Rules
				PrmChargebackType
					initial value is ChargebackType
			Action Rules
				ChargebackType = PrmChargebackType

		UpdateSnapshotFields is an Instance Action
			restricted
			Action Rules
				Vendor				= PayablesInvoice.Vendor
				Invoice				= PayablesInvoice.Invoice
				Suffix				= PayablesInvoice.Suffix
				CancelSequence		= PayablesInvoice.CancelSequence
				VendorSearchName    = PayablesInvoice.Vendor.VendorSearchName
				DueDate				= PayablesInvoice.DueDate
				InvoiceAmount       = PayablesInvoice.InvoiceAmount.CurrencyAmount


		SelectAllInvoices is an Instance Action
			valid when (AllowSelectAllInvoice)
			Action Rules
				invoke SelectRecordForRecon NotSelectedInvoicesRel

		UnselectAllInvoices is an Instance Action
			valid when (AllowUnselectAllInvoices)
			Action Rules
				invoke UnselectRecordForRecon PendingInvoicesRel

		SelectAllReceipts is an Instance Action
			valid when (AllowSelectAllReceipts)
			Action Rules
				invoke SelectRecordForRecon NotSelectedReceiptsRel

		UnselectAllReceipts is an Instance Action
			valid when (AllowUnselectAllReceipts)
			Action Rules
				invoke UnselectRecordForRecon PendingReceiptsRel

		SelectAllInvoicesAndReceipts is an Instance Action 
			valid when (View.InvoiceMatch)
			Action Rules 
				invoke SelectRecordForRecon NotSelectedInvoicesRel
				invoke SelectRecordForRecon NotSelectedReceiptsRel



		MagicInvoiceMatch is an Instance Action
			completion message is "SelectionOfExactMatchingInvoicesComplete"
			restricted
			Action Rules
				initialize PendingType
				for each NotSelectedInvoicesRel
					LocalPayablesInvoice					= each.PayablesInvoice
					for each NotSelectedReceiptsRel
						if  (each.DerivedQuantity 			= LocalMatchWorkInvoiceRel.DerivedQuantity
						and  each.DerivedExtendedAmount		= LocalMatchWorkInvoiceRel.DerivedExtendedAmount)
							invoke SelectRecordForRecon LocalMatchWorkInvoiceRel
							invoke SelectRecordForRecon each
							PendingType = 1
							end for each

		CreateInvoiceSet is an Instance Action
			restricted
			completion message is "SetCreated"
			valid when (AllowCreateInvoiceSet)
			Entrance Rules
				invoke Create MatchReconQueueSet
					invoked.Company				= Company
					invoked.PayablesInvoice		= PayablesInvoice
					invoked.PurchaseOrder		= PurchaseOrder
					invoked.MatchReconQueueSet	= PendingSet
					invoked.Type 				= PendingType
			Exit Rules

				invoke Update PendingInvoicesRel
					invoked.MatchReconQueueSet = PendingSet

				invoke Update PendingReceiptsRel
					invoked.MatchReconQueueSet = PendingSet

				Previous3 = Previous2
				Previous2 = Previous1
				Previous1 = PendingSet
				PendingSet += 1
				initialize PendingType


		SelectAllInvoiceAOCs is an Instance Action
			valid when (AllowSelectAllInvoiceAOCs)
			Action Rules
				invoke SelectRecordForRecon NotSelectedInvoiceAOCsRel

		UnselectAllInvoiceAOCs is an Instance Action
			valid when (AllowUnselectAllInvoiceAOCs)
			Action Rules
				invoke UnselectRecordForRecon PendingInvoiceAOCsRel

		SelectAllReceiptAOCs is an Instance Action
			valid when (AllowSelectAllReceiptAOCs)
			Action Rules
				invoke SelectRecordForRecon NotSelectedReceiptAOCsRel

		UnselectAllReceiptAOCs is an Instance Action
			valid when (AllowUnselectAllReceiptAOCs)
			Action Rules
				invoke UnselectRecordForRecon PendingReceiptAOCsRel

		CreateAOCSet is an Instance Action
			restricted
			completion message is "SetCreated"
			valid when (AllowCreateAOCSet)
			Entrance Rules
				invoke Create MatchReconQueueSet
					invoked.Company				= Company
					invoked.PayablesInvoice		= PayablesInvoice
					invoked.PurchaseOrder		= PurchaseOrder
					invoked.MatchReconQueueSet	= PendingSet
					invoked.Type 				= PendingType
			Exit Rules

				invoke Update PendingInvoiceAOCsRel
					invoked.MatchReconQueueSet = PendingSet

				invoke Update PendingReceiptAOCsRel
					invoked.MatchReconQueueSet = PendingSet

				Previous3 = Previous2
				Previous2 = Previous1
				Previous1 = PendingSet
				PendingSet += 1
				initialize PendingType

		ChargebackAllAddOnCharges is an Instance Action
			valid when (HasAddOnCharges)
			default label is "ChargebackAllAddOnChargeLines"
			Parameters
				PrmChargebackReason		is a ProcurementReasonCode
			Parameter Rules
				PrmChargebackReason
					required
			Action Rules
				for each MatchWorkInvoiceAddOnChargeRel
					if (UseNet
					or  each.OverbillAmount entered)
						invoke SetChargeback each
							invoked.PrmChargeback 		= true
							invoked.PrmChargebackReason = PrmChargebackReason

		ClearAllChargebacksForAddOnCharges is an Instance Action
			valid when (HasAddOnCharges)
			Action Rules
				for each MatchWorkInvoiceAddOnChargeRel
					invoke SetChargeback each
						invoked.PrmChargeback 		= false
						initialize invoked.PrmChargebackReason

		ResetWorkFiles is an Instance Action
			default label is "RefreshWorkFiles"
			valid when (AllowResetWorkFiles)
			completion message is "<ActionCompleteMessage>"

			Action Rules

				constraint (!PayablesInvoice.BackgroundProcessing entered)
					"InvoiceIsCurrentlyProcessingInAsync"

				if (PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
					for each MatchPurchaseOrderInvoicesForDifferentInvoiceRel
						if (each.PayablesInvoice.IsNotMatched)
				            constraint (!each.PayablesInvoice.MatchReconQueueRel.MatchWork entered) 
								"PrepaymentMatchAlreadyBeingWorkedViaInvoice<each.PayablesInvoice.Invoice>"

				invoke FastUpdate PayablesInvoice
					invoked.BackgroundProcessing = PayablesInvoice.BackgroundProcessing.CreateMatchInvoice

			Exit Rules
				if (SmartReconUIV2)
					ActionCompleteMessage = ShowExceptionsCompletedMsg
				else
					ActionCompleteMessage = RefreshWorkFilesCompletedMsg

				BuildStamp = current timestamp

				invoke Purge PayablesInvoice.AsyncErrorRel

				include ClearSets

				if (MatchWork not entered
					or MatchWork not exists)
					initialize MatchWork
					invoke CreateFromRecon MatchWork
						resume on error
							ErrorMessage = error message
						assign result to NewMatchWork
						invoked.Company							= Company
						invoked.PayablesInvoice					= PayablesInvoice
						invoked.PurchaseOrder					= PurchaseOrder
						invoked.MatchPoint						= "1"
						invoked.ProcessMode						= "R"
						invoked.DocumentType					= "I"
						if (View.InvoiceMatch)
							invoked.ReconciliationMatchLevel	= "IM"
							invoked.MatchLevel					= "IM"
						else
							invoked.ReconciliationMatchLevel	= "DM"
							invoked.MatchLevel					= "DM"
						invoked.BypassBuildWorkFileConstraints	= BypassBuildWorkFileConstraints

					if (ErrorMessage not entered)
						MatchWork								= NewMatchWork.MatchWork
				else
					invoke RecreateWorkFiles MatchWork
						invoked.MatchPoint						= "1"
						invoked.ProcessMode						= "R"
						invoked.DocumentType					= "I"
						if (View.InvoiceMatch)
							invoked.ReconciliationMatchLevel	= "IM"
							invoked.MatchLevel					= "IM"
						else
							invoked.ReconciliationMatchLevel	= "DM"
							invoked.MatchLevel					= "DM"
						invoked.BypassBuildWorkFileConstraints	= BypassBuildWorkFileConstraints


				if (PayablesInvoice.BackgroundProcessing not entered)
					constraint (ErrorMessage not entered)
						"<ErrorMessage>"
					if (PayablesInvoice.MatchProcessType.ServiceContract)
						invoke StartReview
					else
					if (PayablesInvoice.MatchProcessType.AOCOnly)
						invoke PrepareAOCMatch
					else
					if (View.InvoiceMatch)
						invoke MagicInvoiceMatch
						if (PendingInvoicesRel exists)
							invoke CreateInvoiceSet
					else
						invoke AutoMatch
						if (PendingSetInvoiceDetailRel exists)
							invoke CreateSet

		StartReview is an Instance Action
			default label is "AutoSelect" 
			valid when (ShowAutoSelect)
			Action Rules

			Exit Rules

				initialize PendingType

				if (PayablesInvoice.RuleGroup entered) 
					LocalMatchRule = PayablesInvoice.RuleGroup
				else
				if ((PayablesInvoice.MatchProcessType.Service  
				or  PayablesInvoice.MatchProcessType.ServiceContract)
				and MatchCompanyRel.ServiceMessageMatchRule entered)  
				    LocalMatchRule = MatchCompanyRel.ServiceMessageMatchRule 
				else				                           
					LocalMatchRule = MatchCompanyRel.MatchTable.RuleGroup1

				LocalMatchRuleToleranceGroup = LocalMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[1] 
				LocalMatchMessageToleranceGroup = LocalMatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[1]

				for each MatchWorkInvoiceDetailRel
					if (each.SortSelect not entered)
						display "CheckingItem<each.MatchDetailKey>-PO:<each.PurchaseOrder>"
						LocalPayablesInvoice										= each.PayablesInvoice
						LocalPurchaseOrder											= each.PurchaseOrder
						LocalPurchaseOrderLine										= each.PurchaseOrderLine
						LocalContract												= each.Contract
						LocalContractLine											= each.ContractLine
						LocalPayablesInvoiceDetail									= each.PayablesInvoiceDetail
						
						include 4130CheckSvcContractTolerances
						display "(2)WithinTolerance=<WithinTolerance>"
			
						if  (WithinTolerance)
							invoke SelectRecordForRecon LocalMatchWorkInvoiceDetailRel 
							PendingType = 1

				if (PendingSetInvoiceDetailRel exists)
					invoke CreateSet

		MarkAllLinesAsReviewed is an Instance Action
			default label is "SelectAllLines"
			valid when (ShowMarkAll)
			Action Rules
			    constraint (MatchWorkInvoiceDetailExists)
				    "PleaseUseRefreshWorkFilesFirst"
				for each MatchWorkInvoiceDetailRel
					if (each.SortSelect not entered)
						invoke FastUpdate each
						    invoked.SortSelect = 1

		MarkAllLinesAsNotReviewed is an Instance Action
			default label is "UnselectAllLines"
			valid when (ShowMarkAll)
			Action Rules
				for each MatchWorkInvoiceDetailRel
					if (each.SortSelect entered)
						invoke FastUpdate each
						    initialize invoked.SortSelect

		UpdatePostDate is an Instance Action
			default label is "UpdatePostDate"
			valid when (PrepayPostDateNeedsUpdating)
			Parameters
				NewPostDate is Date
			Parameter Rules
			    NewPostDate
			    	initial value is current corporate date
			    	required

			Action Rules

				invoke Released.Update PayablesInvoice
					invoked.DistributionDate = NewPostDate

				if (PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice)
					for each MatchPurchaseOrderInvoicesForDifferentInvoiceRel
			            if  (each.PayablesInvoice.Status.Released
			            and  each.PayablesInvoice.DistributionDate not within each.PayablesInvoice.CompanySystemClosingControlRel.ValidEntryDate)
			                invoke Update Released each.PayablesInvoice
			                    invoked.DistributionDate = NewPostDate
























		Reload is a Set Action
			completion message is "ReloadSubmitted"

			Parameters
				PrmHROrganization   is an HROrganization
					default label is "Organization"
				PrmFinanceResource  is an Employee
					default label is "Employee"

			Parameter Rules
				PrmHROrganization
					initial value is actor.agent(Employee).HROrganization
					default to actor.agent(Employee).HROrganization

				PrmFinanceResource
					initial value is actor.agent(Employee).Employee
					default to actor.agent(Employee).Employee

			Set Is
				actor

			Instance Selection
				where (IsValidForActorContext
					and PayablesInvoice.AvailableForReconciliationQueue)

			Action Rules
				Instance Rules
					LocalHROrganization  = PrmHROrganization
					LocalFinanceResource = PrmFinanceResource

					if  (LocalFinanceResource entered
					and !LocalMatchReconQueueFinanceResourceRel exists
					and !FinanceResourceAssignmentRel exists)  
						Continue = true

						if  (PayablesInvoice.MatchProcessType.ReceiptMatch
						and  LocalFinanceResourceActorRel.InvoicePreference.InvoicesWithReceiptLines
						and  !HasReceiptsInPool)
							Continue = false

						if (Continue)

							invoke LoadInvoiceForUser
								resume on error
								invoked.PrmHROrganization = actor.agent(Employee).HROrganization
								invoked.PrmAPClerk = LocalFinanceResource

		AutoAssign is a Set Action
			default label is "AutoAssignMatchReconciliationInvoices"
			restricted
			Parameters
				ReassignExistingAssignments is Boolean
			Instance Selection
				where (PayablesInvoice.AvailableForReconciliationQueue)

			Local Fields
				ResourceCount is Numeric 3
				AssignTo is like FinanceResource
			Action Rules
				Instance Rules

					initialize ErrorMessage
					invoke CheckInvoiceDetailDistributionsInBalance PayablesInvoice
						resume on error
							ErrorMessage = error message

					if (ErrorMessage entered)
						NextSentence = true
					else
					if (FinanceResourceAssignmentRel not exists
					or  ReassignExistingAssignments)

						if (ReassignExistingAssignments)
						    invoke Delete FinanceResourceAssignmentRel

						initialize AssignTo
						initialize ResourceCount

						LocalHROrganization = Company.FinanceEnterpriseGroup.HROrganization
						
						for each AllFinanceResourceRel

							CompanyMatch			= false
							VendorMatch				= false
							LocalFinanceResource 	= each.FinanceResource

							if  (PayablesInvoice.MatchProcessType.ReceiptMatch
							and  LocalFinanceResourceActorRel.InvoicePreference.InvoicesWithReceiptLines
							and  !HasReceiptsInPool)
								NextSentence = true
							else
							if (each.SmartReconciliationCompanySetupMissing
							or  each.SmartReconciliationVendorSetupMissing)
								NextSentence = true
							else

								for each LocalFinanceResourceActorRel.SmartReconCompanyGroupsRel
									LocalCompanyGroup = each.CompanyGroup
									if (GLCompanyGroupMemberRel exists)
										CompanyMatch = true
										end for each

								if (!CompanyMatch)
									for each LocalFinanceResourceActorRel.SmartReconCompaniesRel
										if (each.Company = Company)
											CompanyMatch = true
											end for each

								if (CompanyMatch)

									for each LocalFinanceResourceActorRel.SmartReconVendorsRel
										if (each.Vendor = Vendor)
											VendorMatch = true
											end for each

									if (!VendorMatch)
										for each LocalFinanceResourceActorRel.SmartReconVendorClassesRel
											if (each.VendorClass = Vendor.VendorClass)
												VendorMatch = true
												end for each

									if (!VendorMatch)
										for each LocalFinanceResourceActorRel.SmartReconVendorRangesRel
											if  (Vendor.VendorSearchName[1:3] >= each.Range.From
											and  Vendor.VendorSearchName[1:3] <= each.Range.To)
												VendorMatch = true
												end for each

									if (VendorMatch)
										ResourceCount += 1
										AssignTo = each.FinanceResource

									if (ResourceCount > 1)
										end for each

						if (AssignTo entered
						and ResourceCount = 1)

							invoke Create MatchReconQueueFinanceResource
								invoked.Company							= Company
								invoked.PayablesInvoice					= PayablesInvoice
								invoked.FinanceResource					= AssignTo
