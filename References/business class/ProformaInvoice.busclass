ProformaInvoice is a BusinessClass
	owned by oe
	
	prefix is ProI
	
	Ontology
		symbolic key is ProformaInvoice
		
	
	Patterns
	
	Persistent Fields
		ProformaPercent		is a ProformaCashInAdvanceRequiredPercent
		Status				is Numeric size 1
			States
				Open		  	value is 1
				Paid      		value is 2
		InvoiceAmount		is an InternationalAmount
		InvoiceDate			is Date
		Attachment			is a DocumentAttachment
		ProformaSequence	is Numeric size 6
	
	Transient Fields
		TransientFromCurrency	is a FromCurrency
			derive value from CustomerOrderRel.Currency
	
	Local Fields
		NewReceivableInvoice		is a ReceivableInvoice view
		NewReceivableInvoiceDetail	is a ReceivableInvoiceDetail view
		TaxLineDerviedVATRate		is Percent size 8.5
				
	Derived Fields
		
		DerivedProformaNumber is a DerivedField
			type is Alpha 10
			return CustomerOrderRel.ZeroPaddedProformaNumber
		
		DerivedVATRate is a DerivedField
			type is Percent size 8.5
			return CustomerOrderRel.DerivedVATRate
		
		ReceivedDate is a DerivedField
			type is Date
			return (last ReceivablePrepaymentRel.ReceivablePaymentRel.GeneralLedgerDate)
		
		ProformaAmount is a DerivedField
			type is like InternationalAmount
			return sum ReceivablePrepaymentRel.ReceivablePayment.BaseAmount
		
		DerivedRoundTo is a DerivedField
    		type is Decimal 5.4
    		restricted
    		if (TransientFromCurrency.NumberOfDecimals = 2)
    			return .01
    		else
    		if (TransientFromCurrency.NumberOfDecimals = 0)
    			return 1
    		else
    		if (TransientFromCurrency.NumberOfDecimals = 3)
    			return .001
    		else
    		if (TransientFromCurrency.NumberOfDecimals = 4)
    			return .0001
		
	Relations
	
		ProformaInvoiceLineTaxRel
			one-to-many relation to ProformaInvoiceLineTax
			delete cascades
			Field Mapping uses symbolic key
				related.Company				   		= Company
                related.CustomerOrder               = ProformaInvoice
                
		ReceivableInvoiceRel
			one-to-many relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company				   		= Company
			Instance Selection
				where (related.CustomerOrder		= ProformaInvoice
				and	   related.Origin				= "I")

		ReceivablePrepaymentRel
			one-to-many relation to ReceivablePrepayment
			Field Mapping uses symbolic key
                related.Company                 = Company
			Instance Selection
				where (related.ProformaInvoice	= ProformaInvoice)
		
		OpenReceivablePrepaymentRel
			one-to-many relation to ReceivablePrepayment
			Field Mapping uses symbolic key
                related.Company                 = Company
			Instance Selection
				where (related.ProformaInvoice	= ProformaInvoice
				and	related.ReceivablePayment.Status.Open)
		
		CustomerOrderRel
			one-to-one relation to CustomerOrder
			Field Mapping uses symbolic key
                related.Company                 = Company
				related.CustomerOrder			= ProformaInvoice
				
		ReceivableCompanyRel
			one-to-one relation to ReceivableCompany
			Field Mapping uses symbolic key
				related.Company = Company
	
	Actions
		Create is a Create Action
			restricted
			Action Rules
				ProformaSequence = 1

		Update is an Update Action
			restricted
			Action Rules
				if (ProformaPercent changed)
					ProformaSequence += 1
			
		Delete is a Delete Action
			restricted
			
		Purge is a Purge Action
			restricted
		
		ProcessPrepayments is an Instance Action
			restricted
			Local Fields
				PaymentVATAmount		is like CurrencyAmount
				TransientAmount			is like CurrencyAmount
				LocalTaxAmount			is like CurrencyAmount
				LocalTaxableAmount		is like CurrencyAmount
				LocalVATAmount			is like CurrencyAmount
			Action Rules
				if (ProformaAmount >= InvoiceAmount)
					Status = 2
			Exit Rules
				
				for each OpenReceivablePrepaymentRel
					
					increment ReceivableCompanyRel.LastProfromaTaxInvoiceNumber by 1
					invoke Create ReceivableInvoice
						assign result to NewReceivableInvoice
						invoked.Company												= each.Company
						invoked.Customer											= each.ReceivablePayment.Customer
						invoked.ReceivableInvoiceType								= "I"
						invoked.AlternateReceivableInvoiceType						= "I"
						invoked.ReceivableInvoice									= "TI-" + Company.ZeroFilledLastProfromaTaxInvoiceNumber
						invoked.BatchNumber											= current corporate date
						invoked.ReceivableProcessLevel								= each.ReceivablePayment.ReceivableProcessLevel
						invoked.ReceivableGeneralLedgerCode							= each.ReceivablePayment.ReceivableProcessLevel.ReceivableGeneralLedgerCode
						invoked.GeneralLedgerDate									= current corporate date
						invoked.TransactionDate										= current corporate date

						invoked.TermsCode											= CustomerOrderRel.TermsCode
						invoked.Origin												= "I"
						invoked.TransientSignedTransactionAmount					= each.ReceivablePayment.TransactionAmount
						invoked.InvoiceAmount.CurrencyAmount						= each.ReceivablePayment.TransactionAmount
						invoked.OriginalCurrency									= each.ReceivablePayment.OriginalCurrency
						invoked.CustomerOrder										= each.ProformaInvoice
					invoke Create ReceivableInvoiceDetail
						assign result to NewReceivableInvoiceDetail
						fill in fields from NewReceivableInvoice.ReceivableInvoice
						invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "I"
						invoked.ReceivableInvoiceDetail.Invoice						= "TI-" + Company.ZeroFilledLastProfromaTaxInvoiceNumber
						invoked.ReceivableInvoiceDetail.PaymentSeq					= 1
	            		invoked.InvoiceAmount.CurrencyAmount						= NewReceivableInvoice.InvoiceAmount.CurrencyAmount
	            		invoked.Status												= 1
						invoked.DueDate												= current corporate date
					
					TransientAmount													= (DerivedVATRate * each.ReceivablePayment.TransactionAmount * 100)
					PaymentVATAmount												= TransientAmount/(100+(DerivedVATRate*100))
					TransientFromCurrency = each.ReceivablePayment.OriginalCurrency
					round PaymentVATAmount to nearest DerivedRoundTo
					
					TaxLineDerviedVATRate	=	((NewReceivableInvoice.InvoiceAmount.CurrencyAmount)/InvoiceAmount)
					
					initialize LocalTaxAmount
					initialize LocalTaxableAmount
					initialize LocalVATAmount
					if (PaymentVATAmount entered)
						for each ProformaInvoiceLineTaxRel
							invoke Create ReceivableGLDistribution
								invoked.ReceivableCompanyGroup.GlCompany					= NewReceivableInvoice.Company
				            	invoked.ReceivableCompanyDataGroup.TransactionCompany		= NewReceivableInvoice.Company
				            	invoked.ReceivableCompanyGroup.OriginCompany				= NewReceivableInvoice.Company
						        invoked.GeneralLedgerDate									= current corporate date
								invoked.ReceivableCompanyDataGroup.Customer					= NewReceivableInvoice.Customer
								invoked.Origin												= "RI"
								invoked.AccumulationType 									= "D"
								invoked.DistributionSource									= "A"
								invoked.DocumentNumber										= "TI-" + Company.ZeroFilledLastProfromaTaxInvoiceNumber
								invoked.Status												= 0
								invoked.GeneralLedgerAccount				 				= each.TaxAccount 
								LocalTaxAmount		= each.TaxableCurrencyAmount.TransactionAmount * TaxLineDerviedVATRate
								LocalTaxableAmount	= each.TransactionTaxable.TransactionAmount * TaxLineDerviedVATRate
								TransientFromCurrency = NewReceivableInvoice.OriginalCurrency
								round LocalTaxAmount to nearest DerivedRoundTo
								round LocalTaxableAmount to nearest DerivedRoundTo
								LocalVATAmount		+= LocalTaxAmount
								invoked.DistributionAmount.CurrencyAmount					= LocalTaxAmount 
								invoked.TaxCode												= each.TaxCode 
								invoked.TransactionTaxableAmount							= LocalTaxableAmount 
						        invoked.BatchNumber											= NewReceivableInvoice.BatchNumber
						        invoked.Invoice												= NewReceivableInvoice.ReceivableInvoice
						        invoked.TransType											= NewReceivableInvoice.ReceivableInvoiceType
						        invoked.TransactionDate										= current corporate date
								invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= NewReceivableInvoice.ReceivableProcessLevel
								invoked.OriginalCurrency									= NewReceivableInvoice.OriginalCurrency
						        invoked.CurrencyRate										= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
						        invoked.CurrencyDecimalsNumber								= NewReceivableInvoice.CurrencyDecimalsNumber
								
					invoke Create ReceivableGLDistribution
						invoked.ReceivableCompanyGroup.GlCompany					= each.Company
		            	invoked.ReceivableCompanyDataGroup.TransactionCompany		= each.Company
		            	invoked.ReceivableCompanyGroup.OriginCompany				= each.Company
				        invoked.GeneralLedgerDate									= current corporate date
						invoked.ReceivableCompanyDataGroup.Customer					= each.ReceivablePayment.Customer
						invoked.Origin												= "RI"
						invoked.AccumulationType 									= "D"
						invoked.DistributionSource									= "A"
						invoked.DocumentNumber										= "TI-" + Company.ZeroFilledLastProfromaTaxInvoiceNumber
						invoked.Status												= 0
						invoked.GeneralLedgerAccount				 				= each.ReceivablePayment.ReceivableProcessLevel.ProformaTaxInvoiceCode.DistributionAccount
						invoked.DistributionAmount.CurrencyAmount					= each.ReceivablePayment.TransactionAmount - LocalVATAmount
				        invoked.BatchNumber											= NewReceivableInvoice.BatchNumber
				        invoked.Invoice												= NewReceivableInvoice.ReceivableInvoice
				        invoked.TransType											= NewReceivableInvoice.ReceivableInvoiceType
				        invoked.TransactionDate										= current corporate date
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= NewReceivableInvoice.ReceivableProcessLevel
						invoked.OriginalCurrency									= NewReceivableInvoice.OriginalCurrency
				        invoked.CurrencyRate										= NewReceivableInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				        invoked.CurrencyDecimalsNumber								= NewReceivableInvoice.CurrencyDecimalsNumber
				        
					invoke Unreleased.Release NewReceivableInvoice.ReceivableInvoice
					
					invoke Create ReceivableApplicationSelect
	    				invoked.Company																				= each.Company
	    				invoked.ReceivablePaymentHeader																= each.ReceivablePaymentHeader
	    				invoked.ReceivablePayment																	= each.ReceivablePayment
			            invoked.ReceivableApplicationSelect.TransactionCompany										= NewReceivableInvoice.Company			
						invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		= "I"
						invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice							= NewReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice
						invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq						= NewReceivableInvoiceDetail.ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableOperator											= actor
						invoked.GeneralLedgerDate											= current corporate date
			            invoked.EnteredAmount												= NewReceivableInvoice.InvoiceAmount.CurrencyAmount
			            invoked.ApplicationCurrency											= NewReceivableInvoice.OriginalCurrency
					
					invoke Open.ProcessSelections each.ReceivablePaymentRel
				
				if (Status.Paid and CustomerOrderRel.Status.Unreleased)
					invoke ReleaseFromProforma CustomerOrderRel
