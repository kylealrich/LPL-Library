PayablesInvoiceImport is a BusinessClass
	owned by ap
	prefix is CVI
	classic name is APCINVOICE

	Ontology
		symbolic key is PayablesInvoiceImport
			classic set name is CVISET1


	Patterns
		implements InlineUserFields
			size is 1000
		implements StaticJava
		enable explicit context override
		disable AuditIndex
		disable Auditing 
		disable EffectiveDated
		disable DataTranslations

	Persistent Fields
		RunGroup
		Company						is a PayablesCompany
		Vendor
		EDINumber
		Invoice
		Suffix
		VoucherNumber				  is like VoucherNumber
			classic name is VOUCHER-NBR
		Reference
		AuthorityCode                 is a PayablesAuthorityCode
			classic name is AUTH-CODE
		ProcessLevel                  is a PayablesProcessLevel
			classic name is PROC-LEVEL
		AccrualCode                   is a PayablesAccrualCode
			classic name is ACCR-CODE
		InvoiceType                   is AlphaUpper size 1
			States
				CreditMemo      value is "C"
				DebitMemo      	value is "D"
				Invoice 		value is blank
		OldVendor
		InvoiceCurrency               is a Currency
			classic name is INV-CURRENCY
		InvoiceDate                   is Date
			classic name is INVOICE-DTE
		TaxPointDate                  is Date
			classic name is TAX-PNT-DATE
		PurchaseFromLocation
			context of Vendor
			classic name is PURCH-FR-LOC
		PurchaseOrder
		ExternalPurchaseOrder		  is like PurchaseOrderImport
		AutoMatch                     is Boolean
		Description
		BaseInvoiceAmount             is an InternationalAmount
			classic name is BASE-INV-AMT
		InvoiceAmount                 is an InternationalAmount
			classic name is TRAN-INV-AMT
		AllowableAmountForDiscount    is an InternationalAmount
			classic name is TRAN-ALOW-AMT
		TaxableAmount                 is an InternationalAmount
			classic name is TRAN-TXBL-AMT
			default label is "EnteredTaxableAmount"		
		TaxAmount                     is an InternationalAmount
			classic name is TRAN-TAX-AMT
			default label is "EnteredTaxAmount"			
		DiscountAmount                is an InternationalAmount
			classic name is TRAN-DISC-AMT
		CurrencyExchangeRate          is a CurrencyRate
			classic name is ORIG-CNV-RATE
		Anticipation                  is Boolean
		DiscountPercent
			classic name is DISCOUNT-RT
		DiscountDate                  is Date
			classic name is DISC-DATE
		DueDate
		NumberOfRecurringInvoices     is Numeric size 3
			classic name is NBR-RECUR-PMT
		RecurringFrequency
			classic name is RECUR-FREQ
		PayVendor                     is a Vendor
		InterfacedPayVendor			  is an OldVendor
		RemitToCode                   is like VendorLocation
			default label is "RemitToLocation"

		Location					  is an InventoryLocation	
			default label is "ShipToLocation"					
		CashCode
		SeparatePayment               is a BooleanOverride		
			classic name is SEP-CHK-FLAG
		PayImmediately                is a BooleanOverride		
			classic name is PAY-IMM-FLAG
		Enclosure                     is a BooleanOverride		
		RevalueCurrency               is a BooleanOverride		
			classic name is CURR-RECALC
		DiscountLost                  is Boolean
			classic name is DISC-LOST-FLG
		TaxCode
		IncomeCode                    is a PayablesIncomeCode
		HoldCode                      is a PayablesHoldCode
			classic name is HLD-CODE
		DistributionCode              is a PayablesDistributionCode
			classic name is DIST-CODE
		TermsCode
			classic name is TERM-CODE
		Status                        is Numeric size 1
			classic name is REC-STATUS
			States
				Unreleased value is 0
				Open       value is 1
				History    value is 9
		PostingStatus                 is Numeric size 1
			States
				Unreleased value is 0
				Open       value is 1
				History    value is 9
		DistributionDate              is Date
			classic name is DISTRIB-DATE
		TransactionNumber
			classic name is TRANS-NBR
		BankTransactionCode
			classic name is BANK-INST-CODE
		CheckDate                     is Date
		InvoiceGroup				  is a PayablesInvoiceGroup		
		ReportableIncomeAmount		  is an InternationalAmount
		OneTimeVendor                 is Boolean
			classic name is ONE-TIME-VEND
		VendorName                    
			classic name is VENDOR-VNAME
		VendorSearchName              is a VendorName 
			holds pii
			classic name is VENDOR-SNAME
		PostalAddress				is a PostalAddressV2	
			holds pii
			classic name for PostalAddress.DeliveryAddress.AddressLine1 is ADDR1
			classic name for PostalAddress.DeliveryAddress.AddressLine2 is ADDR2
			classic name for PostalAddress.DeliveryAddress.AddressLine3 is ADDR3
			classic name for PostalAddress.DeliveryAddress.AddressLine4 is ADDR4
			classic name for PostalAddress.Municipality is CITY-ADDR5
			classic name for PostalAddress.StateProvince is STATE-PROV
			classic name for PostalAddress.Country is COUNTRY-CODE
		LegalName					  is a VendorName 
			holds pii
		VendorIncomeCode              is a PayablesIncomeCode
			classic name is VEN-INC-CODE
		TaxID 
			holds pii
		JournalBook
			classic name is JRNL-BOOK-NBR
			restricted
		BankCheckAmount               is an InternationalAmount
			classic name is BANK-CHK-AMT
		BankNumberOfDecimals          is an AcctNd
			classic name is BANK-ND
		BankConversionRate            is an AcctRate
			classic name is BNK-CNV-RATE
		DiscountCode                  is a PayablesDiscountCode
		InvoiceSource                 is AlphaUpper size 1
			States
				Manual                  value is blank
				Edi                     value is "E"
				Ers                     value is "R"
				Payroll                 value is "P"
				Tax                     value is "T"
				Garnishment             value is "G"
				HR						value is "H"
				Lease                   value is "L"
				ArTransfer              value is "C"
				SubContractor           value is "S"
				ExpenseInterface        value is "X"
				TimeAndExpenseInterface value is "I"
				Chargeback				value is "N"			
				BOD						value is "O"			
				InvoiceInterface 		value is "Z"			
		InvoiceReference              is a PayablesReferenceType	
			classic name is INVC-REF-TYPE










		Approved                      is Boolean
			classic name is APPROVED-FLAG
		IncomeWithholdingCode			
			classic name is INC-ACCR-CODE
		Operator
		InvUsrFld01
		InvUsrFld02                   is an InvUsrFld01
		InvUsrFld03                   is an InvUsrFld01
		InvUsrFld04                   is an InvUsrFld01
		InvUsrFld05                   is an InvUsrFld01
		ReceiptOfInvoiceDate          is Date
			classic name is RCPT-INV-DATE
		RecordInError                 is Boolean
			classic name is RECORD-ERROR
		ReasonCode                    is a ProcurementReasonCode
		PrintChargeback               is Boolean
			classic name is CBPRINT-FL
			default label is "PrintCreditMemo"
		RetailAmount                  is an InternationalAmount
			classic name is RETAIL-AMT
		JournalBookSequenceNumber   is a JbkSeqNbr
			classic name is JBK-SEQ-NBR
			restricted
		VATRegistrationCountry      is a Country
			classic name is VAT-REG-CTRY
		VATRegistrationNumber
			classic name is VAT-REG-NBR
		DiversityCode               is a PayablesDiversityCode
			classic name is DIVERSE-CODE
		FlexTerms                   is Boolean
			classic name is FLEX-FLAG
		NatureOfTransactionCode		is an IntrastatNatureOfTransactionCode
			classic name is NOTC
		StatisticalProcedure		is an IntrastatStatisticalProcedure
			classic name is STAT-PROC
		ShipTerm
			classic name is FOB-CODE
		ShippingMethod              is a ShipVia
			classic name is SHIP-VIA
		UnloadingPort				is an IntrastatPortCode
			context of DestinationCountry
		Dropship                    is Boolean
			classic name is DROPSHIP-FL
		TransportMode
		TaxType                     is AlphaUpper size 1
			States
				Invoice value is "I"
				Accrued value is "A"
		DestinationCountry            is a Country
			classic name is DEST-COUNTRY
		OriginCountry                 is a Country
		ForeignEconomicRegulatoryCode
			classic name is FOR-ECON-CODE
		DiscountPercent1              is a DiscountPercent
			classic name is DISCOUNT-RT1
		DiscountPercent2              is a DiscountPercent
			classic name is DISCOUNT-RT2
		DiscountPercent3              is a DiscountPercent
			classic name is DISCOUNT-RT3
		BaseDiscountAmount1           is an InternationalAmount
			classic name is BASE-DISC-AMT1
		BaseDiscountAmount2           is an InternationalAmount
			classic name is BASE-DISC-AMT2
		BaseDiscountAmount3           is an InternationalAmount
			classic name is BASE-DISC-AMT3
		DiscountAmount1               is an InternationalAmount
			classic name is TRAN-DISC-AMT1
		DiscountAmount2               is an InternationalAmount
			classic name is TRAN-DISC-AMT2
		DiscountAmount3               is an InternationalAmount
			classic name is TRAN-DISC-AMT3
		DiscountDate1                 is Date
			classic name is DISC-DATE1
		DiscountDate2                 is Date
			classic name is DISC-DATE2
		DiscountDate3                 is Date
			classic name is DISC-DATE3
		Carrier                       is Boolean
			classic name is CARRIER-FLAG
		GlobalDocumentType
			classic name is GLBL-DOC-TYPE
		ReferenceType				  is a NordicReferenceType
			classic name is REF-TYPE
		CustomerID
		PaymentCategoryCode			  is a CashLedgerPaymentCategoryCode
			classic name is PMT-CAT-CODE
		NoPayConcern	
		ReferenceNumber	
			classic name is REFERENCE-NO
		MatchProcessType
		VendorWithholdingCode		is a IncomeWithholdingCode	
		ApprovalCostCenter			is like AccountingUnit		
		ApprovalCategory			
		ErrorMessage				is Alpha 150
		PayablesInvoice
			delete ignored	
		VendorPaymentAmount			is an InternationalAmount
		VendorPaymentCurrency		is a  Currency
		InterfaceRun				is a PayablesInvoiceInterfaceResult
		LinkTaxOnDistributions		is Boolean
		LetterOfGuarantee
			classic name is LTR-OF-GUARAN
		LetterOfCredit
			classic name is LETTER-OF-CR
		SenderLogicalID
		SenderComponentID
		SenderCreationDateTime
		SenderBODID
		SenderOriginalBOD
		DistributionCodeAccount		is a FinanceCodeBlock	
		BankInstructions1			is a BankInstruct1		
			classic name is BANK-INSTRUCT1
		BankInstructions2			is a BankInstruct2		
			classic name is BANK-INSTRUCT2
		BankInstructions3			is a BankInstruct3		
			classic name is BANK-INSTRUCT3
		BankInstructions4			is a BankInstruct4		
			classic name is BANK-INSTRUCT4
		APClerk						is like FinanceResource	
		CertificationNumber									
		CertificationDate			is Date					
		InvoiceAlternateAmount		is an InternationalAmount				
		InvoiceAlternateRate		is a CurrencyRate 
		InvoiceAlternateAmount2    	is an InternationalAmount
		InvoiceAlternateRate2		is a CurrencyRate
		InvoiceAlternateAmount3    	is an InternationalAmount
		InvoiceAlternateRate3		is a CurrencyRate
		InvoiceReportAmount1		is an InternationalAmount
		InvoiceReportRate1			is a CurrencyRate
		InvoiceReportAmount2		is an InternationalAmount
		InvoiceReportRate2			is a CurrencyRate
		InvoiceReportAmount3		is an InternationalAmount
		InvoiceReportRate3			is a CurrencyRate		
		InvoiceReportAmount4		is an InternationalAmount
		InvoiceReportRate4			is a CurrencyRate		
		InvoiceReportAmount5		is an InternationalAmount
		InvoiceReportRate5			is a CurrencyRate		
		RoutingCategory				  is an InvoiceRoutingCategory
			default label is "InvoiceRoutingCategory"
		GarnFileNumber					is Alpha 15 	
		GarnSocialSecurityNumber		is Alpha 11
		GarnCaseNumber					is Alpha 20
		GarnParentName					is Alpha 230	
		GarnFIPSCode					is Alpha 9 
		GarnTerminationIndicator		is AlphaUpper 1
		GarnMedicalIndicator			is AlphaUpper 1	
	Local Fields
		InterfacedInvoice				is a PayablesInvoice view

		LocalPayablesInvoiceInterfaceResult is like PayablesInvoiceInterfaceResult
		
		HasPayment						is Boolean
		LocalRunGroupHasPayments		is Boolean
		LocalRunGroupHasDistributions	is Boolean
		LocalRunGroupAccruedTax			is like TaxCode			
		LocalRunGroupHasComments		is Boolean

		LocalActionName					is Alpha size up to 50		
		LocalRunGroup					is like RunGroup
		LocalCompany					is like Company
		LocalRunProgram					is a RunProgram
		LocalAuthorityCode				is like PayablesAuthorityCode

		LocalVendor						is like Vendor
		LocalTaxCode					is like TaxCode
		CalculateTax													
		LocalCalculateTaxExecuted		is Alpha 1						

		WorkTotalDistributionAmount		is an InternationalAmount
		WorkTotalTaxAmount				is an InternationalAmount
		WorkTotalTaxableAmount			is an InternationalAmount
				
		LocalUpdateTaxSystem			is Boolean
		LocalUpdateVendorBalance		is Boolean
		LocalLastYearEndingDate			is Date
		LocalMoveErrorsToNewRunGroup  	is Boolean
		LocalPerformBalanceEdits		is Boolean

		IntrastatProcessing
		IntrastatProcessingTrigger		is Alpha 1
		ErrorOccurred					is Boolean
		CompanyErrorOccurred			is Boolean		
		LocalErrorMessage				is Alpha 150
		LocalErrorRunGroup				is a RunGroup
		VerifyPayablesMonitor
		VerifyResultPayablesMonitor		is a VerifyPayablesMonitor
		LocalCheckAPMonitor				is Alpha 1
















		LocalAmountPaid					is an InternationalAmount

		Idx								is Numeric 3
		NextSentence					is Boolean
		LocalFinanceEnterpriseGroup		is like FinanceEnterpriseGroup
		Diff 							is Numeric size 16

		LocalBalancePeriod				is Numeric 2
		LocalCurrentPeriod				is Numeric 2
		LocalBalanceVendorGroup			is like VendorGroup
		LocalBalanceVendor				is like Vendor
		LocalBalanceRemitToCode			is like VendorLocation
		LocalBalanceCompany				is like Company				
		LocalInterfaceAnalysis			is like InterfaceAnalysis
		LocalMainUserTemplate			is Alpha size 250
		LocalConfigurationParameter		is Alpha size up to 200
		BGSubgroup						is an AsyncActionRequest

   	Field Groups
   		SecondaryKeyFields
   			RunGroup
   			Company
   			Vendor
   			EDINumber
   			Invoice
   			Suffix

	Derived Fields
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforSupplierInvoice"

		ContextMessageText is a MessageField
			restricted
			"Invoice<Invoice>"
	
		DerivedVendor is a DerivedField
			type is like Vendor
			if  (Vendor not entered)
				if  (OldVendor entered
				and  VendorForLegacyVendorRel exists)
					return first VendorForLegacyVendorRel.Vendor 
				else
				if (OldVendor entered
				and InterfaceMappingVendorRel exists)
					return first InterfaceMappingVendorRel.Vendor
				else
					return DerivedEDIVendor
			else
				return Vendor

		DerivedPayVendor is a DerivedField
			type is like Vendor
			if  (PayVendor entered)
				return PayVendor
			else
			if  (InterfacedPayVendor entered)
				if  (LegacyPayVendorRel exists)
					return first LegacyPayVendorRel.Vendor 
				else
				if (InterfaceMappingPayVendorRel exists)
					return first InterfaceMappingPayVendorRel.Vendor

		DerivedEDIVendor is a DerivedField
			type is like Vendor
			if  (EDINumber entered)
				if  (EDIVendorLocationRel exists)
					return first EDIVendorLocationRel.Vendor 
				else
				if (EDIVendorRel exists)
					return first EDIVendorRel.Vendor

		DerivedInvoiceAmount is a DerivedField
			type is like InternationalAmount
			if (InvoiceType.CreditMemo
			and InvoiceAmount > 0)
				return (InvoiceAmount *-1)
			if ((InvoiceType.DebitMemo		
			or   InvoiceType.Invoice)
			and  InvoiceAmount < 0)
				return (InvoiceAmount *-1)
			return InvoiceAmount

		DerivedTaxAmount is a DerivedField
			type is like InternationalAmount
			if (InvoiceType.CreditMemo
			and TaxAmount > 0)
				return (TaxAmount *-1)
			if ((InvoiceType.DebitMemo		
			or   InvoiceType.Invoice)
			and  TaxAmount < 0)
				return (TaxAmount *-1)
			return TaxAmount

		DerivedTaxableAmount is a DerivedField
			type is like InternationalAmount
			if (InvoiceType.CreditMemo
			and TaxableAmount > 0)
				return (TaxableAmount *-1)
			if ((InvoiceType.DebitMemo		
			or   InvoiceType.Invoice)
			and  TaxableAmount < 0)
				return (TaxableAmount *-1)
			return TaxableAmount

		DerivedDistributionCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (PayablesInvoiceDistributionImportRel exists)
				return "(" + instance count of PayablesInvoiceDistributionImportRel + ")"
			else
				return ""
		
		VendorNotFoundMsg is a MessageField			
			restricted
			"VendorNotFoundOnInterfaceInvoice"

		VendorNotValidMsg is a MessageField			
			restricted
			"VendorNotFound"
		
		InterfacedVendorNotFoundMsg is a MessageField
			restricted
			"InterfacedVendorNotFound"

		InterfacedPayVendorNotFoundMsg is a MessageField
			restricted
			"InterfacedPayVendorNotFound"

		PostingStatusMustBeUnreleasedMsg is a MessageField 
			restricted
			"PostingStatusMustBeUnreleasedIfStatusIsUnreleased"

		PostingStatusCannotBeUnreleasedMsg is a MessageField 
			restricted
			"PostingStatusCannotBeUnreleasedIfStatusIsOpen"

		PostingStatusMustBeHistorical is a MessageField		
			restricted
			"PostingStatusMustBeHistoricalIfInvoiceStatusIsHistorical"

		DistributionsRequiredForOpenInvoiceMsg is a MessageField  	
			restricted												
			"DistributionsRequiredForOpenInvoice"					

		CannotEnterDistributionCodeMsg is a MessageField 
			restricted
			"CannotEnterDistributionCodeIfPostingStatusIsHistorical"		

		CannotEnterDistributionCodeAccountMsg is a MessageField	
			restricted
			"CannotEnterDistributionCodeAccountIfPostingStatusIsHistorical"		
		
		DistributionCodeRequiredWithDistributionCodeAccountMsg is a MessageField	
			restricted
			"DistributionCodeRequiredWithDistributionCodeAccount"
			
		CannotEnterTaxCodeMsg is a MessageField 
			restricted
			"CannotEnterTaxCodeIfPostingStatusIsHistorical"		

		CannotEnterTransactionNotHistoricalMsg is a MessageField
			restricted
			"CannotEnterTransactionNumberOnUnreleasedOrOpenInvoice"
	
		CannotEnterTransactionIfHasPaymentsMsg is a MessageField
			restricted
			"CannotEnterTransactionIfPaymentsAreEntered"
	
		MustHaveOpenPaymentForOpenInvoiceMsg is a MessageField
			restricted
			"MustHaveAtLeastOneOpenPaymentForOpenInvoice"
		
		CannotEnterVendorWithholdingCodeMsg is a MessageField				
			restricted
			"CannotEnterVendorWithholdingCode"
	
		TransactionNumberRequiredOnHistoricalMsg is a MessageField
			restricted
			"TransactionNumberRequiredOnHistoricalInvoice"
			
		CannotEnterCheckDateIfHasPaymentsMsg is a MessageField
			restricted
			"CannotEnterPaymentDateIfPaymentsExist"
	
		CannotEnterCheckDateNotHistoricalMsg is a MessageField
			restricted
			"CannotEnterPaymentDateOnUnreleasedOrOpenInvoice"

		CheckDateRequiredOnHistoricalMsg is a MessageField
			restricted
			"CheckDateRequiredOnHistoricalInvoice"
			
		CannotEnterPaymentCodeIfHasPaymentsMsg is a MessageField
			restricted
			"CannotEnterPaymentCodeIfPaymentsExist"
	
		CannotEnterPaymentCodeNotHistoricalMsg is a MessageField
			restricted
			"CannotEnterPaymentCodeOnUnreleasedOrOpenInvoice"

		PaymentCodeRequiredOnHistoricalMsg is a MessageField
			restricted
			"PaymentCodeRequiredOnHistoricalInvoice"
			
		CannotEnterSuffixForUnreleasedMsg is a MessageField
			restricted
			"CannotEnterSuffixForAnUnreleasedInvoice"

		CannotSetDiscountLostForUnreleasedMsg is a MessageField
			restricted
			"CannotSetDiscountLostForUnreleasedInvoice"

		InvoiceAmountVersusPaymentsMsg is a MessageField 
			restricted
			"InvoiceAmountIsNotEqualToSumOfPayments"

		InvoiceAmountVersusDistributionsMsg is a MessageField 
			restricted
			"InvoiceAmountIsNotEqualToSumOfDistributions"


		CannotEnterHoldCodeOnHistoricalMsg is a MessageField
			restricted
			"CannotEnterHoldCodeOnHistoricalInvoice"
			
		VendorDoesNotMatchEDINumberMsg is a MessageField
			restricted
			"VendorDoesNotMatchEDINumber"

		InterfaceVendorDoesNotMatchVendorMsg is a MessageField
			restricted
			"InterfaceVendorDoesNotMatchVendor"

		InterfaceVendorDoesNotMatchEDINumberMsg is a MessageField
			restricted
			"InterfaceVendorDoesNotMatchEDINumber"
			
		CannotInterfaceInvoiceWithSuffixGreaterThan1Msg is a MessageField
			restricted
			"CannotInterfaceInvoiceWithSuffixGreaterThan1"
			
		RecurringFrequencyRequiredMsg is a MessageField
			restricted
			"RecurringFrequencyRequiredIfNumberOfRecurringInvoicesEntered"

		NumberOfRecurringInvoicesRequiredMsg is a MessageField
			restricted
			"NumberOfRecurringInvoicesRequiredIfRecurringFrequencyEntered"

		RecurringInvoiceAlreadyExistsMsg is a MessageField
			restricted
			"RecurringInvoiceAlreadyExists"

		SuffixCannotBeGreaterThanNumberOfRecurringInvoicesMsg is a MessageField
			restricted
			"SuffixCannotBeGreaterThanNumberOfRecurringInvoices"

		CannotInterfaceInvWithSfxIfRecurInvExistsMsg is a MessageField
			restricted
			"CannotInterfaceInvoiceWithSuffixIfRecurringInvoiceExists"

		CannotInterfaceRecurringInvoiceMsg is a MessageField
			restricted
			"CannotInterfaceRecurringInvoiceIfInvoiceWithSuffixAlreadyExistsMsg"

		CannotEnterBothExchangeRateAndFunctionalInvoiceAmountMsg is a MessageField
			restricted
			"CannotEnterBothExchangeRateAndFunctionalInvoiceAmount"

		CannotEnterBothAlternateRateAndAlternateAmountMsg is a MessageField						
			restricted
			"CannotEnterBothAlternateRateAndAlternateAmount"

		CannotEnterBothAlternateRate2AndAlternateAmount2Msg is a MessageField					
			restricted
			"CannotEnterBothAlternateRate2AndAlternateAmount2"
	
		CannotEnterBothAlternateRate3AndAlternateAmount3Msg is a MessageField					
			restricted
			"CannotEnterBothAlternateRate3AndAlternateAmount3"
	
		CannotEnterBothInvoiceReportAmount1AndInvoiceReportRate1Msg is a MessageField			
			restricted
			"CannotEnterBothInvoiceReportAmount1AndInvoiceReportRate1"
	
		CannotEnterBothInvoiceReportAmount2AndInvoiceReportRate2Msg is a MessageField			
			restricted
			"CannotEnterBothInvoiceReportAmount2AndInvoiceReportRate2"
	
		CannotEnterBothInvoiceReportAmount3AndInvoiceReportRate3Msg is a MessageField			
			restricted
			"CannotEnterBothInvoiceReportAmount3AndInvoiceReportRate3"
	
		CannotEnterBothInvoiceReportAmount4AndInvoiceReportRate4Msg is a MessageField			
			restricted
			"CannotEnterBothInvoiceReportAmount4AndInvoiceReportRate4"
	
		CannotEnterBothInvoiceReportAmount5AndInvoiceReportRate5Msg is a MessageField			
			restricted
			"CannotEnterBothInvoiceReportAmount5AndInvoiceReportRate5"

		InvAmtNotEqualToDistributionsMsg is a MessageField
			restricted
			"InvoiceAmountDoesNotEqualDistributionTotal"

		InvoiceCompanyIsRequired is a MessageField		
			restricted
			"InvoiceCompanyIsRequired"
		
		InvoiceCompanyDoesNotExist is a MessageField		
			restricted
			"InvoiceCompanyDoesNotExist"
		
		InvalidRemitToLocationMsg is a MessageField
			restricted
			"InvalidRemitToLocation"
			
		TaxAmtNotEqualToDistribsMsg is a MessageField
			restricted
			"InvoiceTaxAmountDoesNotEqualSumOfTaxDistributions"

		TxblAmtNotEqualToDistribsMsg is a MessageField
			restricted
			"TaxableAmountDoesNotEqualSumOfDistributionTaxableAmounts"
			
		TaxEngineReturnDoesNotExist is a MessageField
			restricted
			"TaxReturnFromTaxEngineDoesNotExist"

		PaymentsNotEqualInvoiceMsg is a MessageField
			restricted
			"InvoicePaymentsDoNotEqualInvoiceAmount"

		InterfacePostingMessage is a LabelField 
			restricted
			"JournalCreatedByPayablesInvoiceImport"
		

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "tenantID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "releaseID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "logicalID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "VersionID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "appProdline"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 20
			restricted
			DerivedBODCurrentTimeStamp = system current timestamp
			return DerivedBODCurrentTimeStamp
			
		DerivedBODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 30
			restricted
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"

		DerivedConfirmBODID is a DerivedField
			type is Alpha size 200
			restricted
			return "infor-nid:"+ DerivedTenantID +":"+ Company +":"+ Vendor +":"+ Invoice +":"+"?BOD&verb=Confirm"
				   
		DerivedErrorMessage is a DerivedField
			type is Alpha size 200
			restricted
			return "Failed message, " + "Message: "+ ErrorMessage + ", " +"Productline: " + DerivedappProdline
		
		DerivedAckResponse is a DerivedField
			type is Alpha size 200
			restricted
			if (ErrorMessage = "")
				return "Accepted"
			else
				return "Rejected"
			
		DerivedBODID is a DerivedField
			type is Alpha size 200
			restricted
			return "infor-nid:"+ DerivedTenantID +":"+ Company +":"+ Vendor +":"+ Invoice +":"+"?BOD&verb=Ack"
			
		AcknowledgeSupplierInvoiceXMLBOD is a DerivedField
			type is XMLDocument
	        restricted
	        AcknowledgeSupplierInvoiceXMLBOD = template.IONAcknowledgeSupplierInvoice_PayablesInvoiceImport_AckBOD_ST document for this instance
			
		ConfirmBODXML is a DerivedField
			type is XMLDocument
	        restricted
	        ConfirmBODXML = template.IONAcknowledgeSupplierInvoice_PayablesInvoiceImport_ConfirmBOD_ST document for this instance


		InvoiceInterfaceFormTitle is a DerivedField
			type is Alpha size up to 80
			if (RecordExists)
				return InvoiceInterfaceTitle
			else
				return InvoiceInterfaceTitleNoRecord
		
		InvoiceInterfaceTitleNoRecord is a LabelField
			restricted
			"CreateInterfaceInvoice"
		
		InvoiceInterfaceTitle is a LabelField
			restricted
			"InterfaceInvoice<Invoice>ForVendor<Vendor>"
		
    Conditions

		BypassBatchError
			classic name is BYPASS-BTCH-ER
			restricted
			when (not RecordInError)

		BypassErrorRecords
			classic name is BYPASS-ERR-REC
			restricted
			when (not RecordInError)

		RecordExists
			restricted
			when (PayablesInvoiceImport exists)
		
		RecordIsInError
			classic name is RECORD-ERROR
			restricted
			when (RecordInError)

		RecordIsGood
			classic name is RECORD-GOOD
			restricted
			when (not RecordInError)

		IsManualPaymentNumberReservation	
			restricted
			when (BankTransactionCode.ManualPaymentNumberReservation)

		IsPartiallyImported
			when (PayablesInvoice entered)

		HasDistributionInError	
			when (PayablesInvoiceDistributionImportErrorRel exists)

		IsConfigMultiThread
			when (config.PIIMultiThread = true)

		GarnishmentsDataEntered			
			when (GarnFileNumber entered
			or GarnSocialSecurityNumber entered
			or GarnCaseNumber entered
			or GarnParentName entered
			or GarnFIPSCode entered
			or GarnTerminationIndicator entered
			or GarnMedicalIndicator entered)

	Relations
		AsyncActionRequestRel							
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByAction
				related.AsyncAction = LocalActionName
			Instance Selection
				where (related.MappingField1			= LocalFinanceEnterpriseGroup
				and    related.MappingField2    		= LocalRunGroup
				and	   related.AsyncActionRequest	   != current async action request id
				and    related.NotSuccessfullyCompleted)
		
		GeneralLedgerCompanyRel						
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		PurchaseFromLocationSelectRel
			one-to-many relation to PurchaseFromLocation	
			Field Mapping uses symbolic key
				related.VendorGroup	= Vendor.VendorGroup
				related.Vendor		= Vendor
		
		PayablesInvoicePaymentImportRel
			one-to-many relation to PayablesInvoicePaymentImport
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			 				= Company
				related.Vendor							= Vendor
				related.OldVendor						= OldVendor
				related.EDINumber						= EDINumber
				related.Invoice							= Invoice
				related.Suffix							= Suffix

		NonHistoricalPaymentImportRel
			one-to-many relation to PayablesInvoicePaymentImport
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			 				= Company
				related.Vendor							= Vendor
				related.OldVendor						= OldVendor
				related.EDINumber						= EDINumber
				related.Invoice							= Invoice
				related.Suffix							= Suffix
			Instance Selection
				where (!related.Status.History)

		PayablesInvoiceDistributionImportRel
			one-to-many relation to PayablesInvoiceDistributionImport
			Field Mapping uses ByCompanyVendorInvoice
				related.Company			 				= Company
				related.Vendor							= Vendor
				related.OldVendor						= OldVendor
				related.EDINumber						= EDINumber
				related.Invoice							= Invoice
				related.Suffix							= Suffix

		PayablesInvoiceDistributionImportErrorRel	
			one-to-many relation to PayablesInvoiceDistributionImport
			Field Mapping uses ByCompanyVendorInvoice
				related.Company		= Company
				related.Vendor		= Vendor
				related.OldVendor	= OldVendor
				related.EDINumber	= EDINumber
				related.Invoice		= Invoice
				related.Suffix		= Suffix
			Instance Selection
				where (related.RecordInError)

		PayablesInvoiceImportCommentRel
			one-to-many relation to PayablesInvoiceImportComment
			Field Mapping uses ByCompanyVendorInvoice
				related.Company		= Company
				related.Vendor		= Vendor
				related.OldVendor	= OldVendor
				related.EDINumber	= EDINumber
				related.Invoice		= Invoice
				related.Suffix		= Suffix

		PaymentImportRunGroupRel
			one-to-many relation to PayablesInvoicePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup	= RunGroup
				related.Company		= Company

		DistributionImportRunGroupRel
			one-to-many relation to PayablesInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup	= RunGroup
				related.Company		= Company

		CommentImportRunGroupRel
			one-to-many relation to PayablesInvoiceImportComment
			Field Mapping uses ByRunGroup
				related.RunGroup	= RunGroup
				related.Company		= Company

		OldPayablesInvoicePaymentImportRel
			one-to-many relation to PayablesInvoicePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= old RunGroup
				related.Company			 				= old Company
				related.Vendor							= old Vendor
				related.OldVendor						= old OldVendor
				related.EDINumber						= old EDINumber
				related.Invoice							= old Invoice
				related.Suffix							= old Suffix

		OldPayablesInvoiceDistributionImportRel
			one-to-many relation to PayablesInvoiceDistributionImport
			Field Mapping uses ByRunGroup
				related.RunGroup	= old RunGroup
				related.Company		= old Company
				related.Vendor		= old Vendor
				related.OldVendor	= old OldVendor
				related.EDINumber	= old EDINumber
				related.Invoice		= old Invoice
				related.Suffix		= old Suffix

		OldPayablesInvoiceImportCommentRel
			one-to-many relation to PayablesInvoiceImportComment
			Field Mapping uses ByRunGroup
				related.RunGroup	= old RunGroup
				related.Company		= old Company
				related.Vendor		= old Vendor
				related.OldVendor	= old OldVendor
				related.EDINumber	= old EDINumber
				related.Invoice		= old Invoice
				related.Suffix		= old Suffix

		VendorForLegacyVendorRel
			one-to-many relation to Vendor
			Field Mapping uses ByLegacyVendor
				related.VendorGroup						= Company.VendorGroup
				related.LegacyVendor					= OldVendor
			
		InterfaceMappingVendorRel
			one-to-many relation to VendorMappingTableInterface
			Field Mapping uses symbolic key
				related.VendorGroup								= Company.VendorGroup
			Instance Selection
				where (related.VendorMappingTableInterface.OldVendor	= OldVendor)
			
		LegacyPayVendorRel
			one-to-many relation to Vendor
			Field Mapping uses ByLegacyVendor
				related.VendorGroup						= Company.VendorGroup
				related.LegacyVendor					= InterfacedPayVendor
			
		InterfaceMappingPayVendorRel
			one-to-many relation to VendorMappingTableInterface
			Field Mapping uses symbolic key
				related.VendorGroup								= Company.VendorGroup
			Instance Selection
				where (related.VendorMappingTableInterface.OldVendor	= InterfacedPayVendor)

		EDIVendorRel
			one-to-many relation to Vendor
			Field Mapping uses Set7
				related.VendorGroup						= Company.VendorGroup
				related.EDINumber						= EDINumber
			
		EDIVendorLocationRel
			one-to-many relation to VendorLocation
			Field Mapping uses Set5
				related.VendorGroup						= Company.VendorGroup
				related.EDINumber						= EDINumber
			Instance Selection
				where (related.LocationType.BothRemitToPurchaseFrom
				or     related.LocationType.PurchaseFrom)

		LocalVendorRel
			one-to-one relation to Vendor
			Field Mapping uses symbolic key
				related.VendorGroup						= Company.VendorGroup
				related.Vendor							= LocalVendor
			
		LocalVendorCompanyDefaultRel
			one-to-one relation to VendorCompanyDefault
			Field Mapping uses symbolic key
				related.VendorGroup						= Company.VendorGroup
				related.Vendor 							= LocalVendor
				related.VendorLocation					= blank
				related.Company 						= Company

		LocalInvoicesInRunGroupRel
			one-to-many relation to PayablesInvoiceImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= LocalRunGroup

		LocalInvoicesInRunGroupCompanyRel
			one-to-many relation to PayablesInvoiceImport
			Field Mapping uses ByRunGroup
				related.RunGroup						= LocalRunGroup
				related.Company							= LocalCompany

		PayablesInvoiceImportRel		
			one-to-many relation to PayablesInvoiceImport
			Field Mapping uses ByCompanyVendorInvoice
				related.Company							= Company
				related.Vendor							= DerivedVendor	
			Instance Selection	
				where (related.Invoice					= Invoice
				and    related.Suffix					= Suffix)

		RunGroupCompanyAuthCodeRel
			one-to-many relation to PayablesInvoiceImport
			Field Mapping uses ByRunGroup
				related.RunGroup				= LocalRunGroup
			Instance Selection
				where (((related.GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				and      related.Company		= LocalCompany)
				or       LocalCompany not entered)
				and     (related.AuthorityCode 	= LocalAuthorityCode
				or       LocalAuthorityCode not entered))

		PayablesInvoiceRel
			one-to-one relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company							= Company
				related.Vendor							= DerivedVendor
				related.Invoice							= Invoice
				related.Suffix							= Suffix
				related.CancelSequence					= blank
				related.InvoiceDate						= InvoiceDate			

		RecurringInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company							= Company
				related.Vendor							= DerivedVendor
				related.Invoice							= Invoice
			Instance Selection
				where (related.IsRecurringInvoice)

		InvoiceWithSuffixRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByCompanyVendorInvoice
				related.Company							= Company
				related.Vendor							= DerivedVendor
				related.Invoice							= Invoice
			Instance Selection
				where (related.Suffix					!= blank
				and   !related.IsRecurringInvoice)

		ActiveMonitorForRunGroupRel										 
			one-to-many relation to PayablesProcessingMonitor
			Field Mapping uses Set5	
			Instance Selection
				where (related.PayablesProcessingMonitor.RunProgram		= LocalRunProgram
				and    related.PayablesProcessingMonitor.RunGroup		= LocalRunGroup)

		TaxEntityRel				 
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key


				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	
				related.TaxEntity				= GeneralLedgerCompanyRel.AccountingEntity			
				
		TaxEngineTaxDetailRel
			one-to-many relation to TaxEngineTaxDetail
			Field Mapping uses ByCompanyInvoice
				related.Company					= Company
				related.Invoice					= Invoice

		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key


				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.AccountingEntity.FinanceEnterpriseGroup	
				related.TaxEntity 						= GeneralLedgerCompanyRel.AccountingEntity							
				related.TaxCode 						= LocalTaxCode
				
		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "AP"

		VendorLocationRel								
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup					= Company.VendorGroup
				related.Vendor 						= LocalVendor
				related.VendorLocation				= RemitToCode

		LocalVendorLocationRel								
			one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup						= LocalBalanceVendorGroup	
				related.Vendor 							= LocalBalanceVendor
				related.VendorLocation					= LocalBalanceRemitToCode

 		VendorBalanceRel
			one-to-one relation to VendorBalance
			Field Mapping uses symbolic key
				related.VendorGroup						= LocalBalanceVendorGroup	
				related.Vendor 							= LocalBalanceVendor
				related.VendorLocation					= LocalBalanceRemitToCode
				related.Company 						= LocalBalanceCompany								
		
		ErrorsInRunGroupRel
			one-to-many relation to PayablesInvoiceImport
			Field Mapping uses symbolic key
			Instance Selection
				where (related.GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				and	   related.RunGroup 						= LocalRunGroup
				and    related.ErrorMessage						!=""
				and    related.SenderOriginalBOD				="CSV")

		FSMBODConfigurationParameterRel
    		one-to-one relation to FSMBODConfigurationParameter
    		Field Mapping uses symbolic key
    			related.FSMBODConfigurationParameter	= LocalConfigurationParameter
		
		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 5
            	related.FSMBODConfiguration.Noun 		= "SupplierInvoice"
            	related.FSMBODConfiguration.Direction 	= 1            	
       
        FSMBODConfigurationDetailRel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= 5		
            	related.FSMBODConfiguration.Noun 			= "SupplierInvoice"
            	related.FSMBODConfiguration.Direction 		= 1
            Instance Selection
				where (related.TriggerFrom				= "PayablesInvoiceImport")
		
		UserTemplateRel
			one-to-many relation to UserTemplate
			Field Mapping uses symbolic key
			Instance Selection
				where (related.UserTemplate   = LocalMainUserTemplate)
				

		
		InterfaceAnalysisDetailRel
			one-to-many relation to InterfaceAnalysisDetail
			Field Mapping uses AnalysisBucket
				related.InterfaceAnalysis	= LocalInterfaceAnalysis
				related.PayablesCompany		= Company
				related.Vendor				= Vendor
				related.Currency			= InvoiceCurrency
			Instance Selection
				where (related.MonthYear.Begin	<= InvoiceDate
				and    related.MonthYear.End	>= InvoiceDate)

		InterfaceResultInProcessRel
			one-to-many relation to PayablesInvoiceInterfaceResult
			Field Mapping uses ByRunGroup
				related.RunGroup                        = LocalRunGroup
			Instance Selection
				where (related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				and    related.RunType					= 1 
				and    related.Status.InProcess)

	Sets

		ByCompany
			indexed
			Sort Order
				Company
				RunGroup
				Vendor
				OldVendor
				EDINumber
				Invoice
				Suffix

		ByRunGroup
			indexed
			Sort Order
				RunGroup
				Company
				Vendor
				OldVendor
				EDINumber
				Invoice
				Suffix

		ByCompanyVendorInvoice
			indexed
			Sort Order
				Company
				Vendor
				OldVendor
				EDINumber
				Invoice
				Suffix

		ByInterfaceRun
			Sort Order
				InterfaceRun
				RunGroup
				Company
				Vendor
				OldVendor
				EDINumber
				Invoice
				Suffix

	Field Rules
		RunGroup
			required

		Vendor
			if (!OneTimeVendor
			and OldVendor not entered)
				required
					"MustEnterEitherVendorOrInterfacedVendor"
		
		Invoice
			if (action type.Create
			or  Company changed
			or  Vendor 	changed
			or  Invoice changed
			or  Suffix 	changed)
				constraint (PayablesInvoiceImportRel not exist)		
					"InterfaceInvoice<Invoice>AlreadyExistsForVendor<Vendor>"
				
		InvoiceDate
			required

		BankTransactionCode
			if ((BankTransactionCode.PaymentOutputOption.ElectronicFile
			or	BankTransactionCode.PaymentOutputOption.Swift
			or  BankTransactionCode.PaymentOutputOption.WireTransfer)	
			and Status.Open)
				if (DerivedPayVendor not entered)
					LocalVendor		= DerivedVendor											
					if (RemitToCode entered)											
						constraint ((VendorLocationRel.BankEntity 			entered		
						and			 VendorLocationRel.BankAccountNumber 	entered		
						and 		 VendorLocationRel.BankAccountType 		entered)	
						or 			(LocalVendorRel.BankEntity 				entered				
						and			 LocalVendorRel.BankAccountNumber 		entered				
						and 		 LocalVendorRel.BankAccountType 		entered))			
							"BankEntity,BankAccountNumberAndBankAccountTypeRequiredOnVendor<LocalVendor>OrRemitLocation<RemitToCode>ForInvoicesSetUpForElectronicPayment"
					else
						constraint (LocalVendorRel.BankEntity 				entered
						and			LocalVendorRel.BankAccountNumber 		entered
						and 		LocalVendorRel.BankAccountType 			entered) 
							"BankEntity,BankAccountNumberAndBankAccountTypeRequiredOnVendor<LocalVendor>ForInvoicesSetUpForElectronicPayment"
				else
					LocalVendor		= DerivedPayVendor											
					if (RemitToCode entered)											
						constraint ((VendorLocationRel.BankEntity 			entered		
						and			 VendorLocationRel.BankAccountNumber 	entered		
						and 		 VendorLocationRel.BankAccountType 		entered)	
						or 			(LocalVendorRel.BankEntity 				entered			
						and			 LocalVendorRel.BankAccountNumber 		entered			
						and 		 LocalVendorRel.BankAccountType 			entered))		
							"BankEntity,BankAccountNumberAndBankAccountTypeRequiredOnPayVendor<LocalVendor>OrRemitLocation<RemitToCode>ForInvoicesSetUpForElectronicPayment"
					else
						constraint (LocalVendorRel.BankEntity 				entered		
						and			LocalVendorRel.BankAccountNumber 		entered		
						and 		LocalVendorRel.BankAccountType 			entered) 	
							"BankEntity,BankAccountNumberAndBankAccountTypeRequiredOnPayVendor<LocalVendor>ForInvoicesSetUpForElectronicPayment"
		
		InvoiceSource
			default to "Z"		

		InvoiceReference
			default to "IN"
			
		NatureOfTransactionCode
			if (GeneralLedgerCompanyRel.AccountingEntity.TaxEntity.IntrastatUsed)
				required
					"NatureOfTransactionCodeRequiredForIntrastatReporting"	
			constraint (!MatchProcessType.Service
			and         !MatchProcessType.ServiceContract)
				"IntrastatInformationNotAllowedOnAServiceTypeInvoice"	
			
			if (GeneralLedgerCompanyRel.AccountingEntity.TaxEntity.IntrastatUsed)
				constraint (UnloadingPort 			entered
				or			NatureOfTransactionCode entered
				or			StatisticalProcedure	entered
				or			ShippingMethod			entered
				or			ShipTerm				entered)
					"AtLeastOneGoodsTypeRequiredToAddOrChangeIntrastatInformation"	
			
		ShippingMethod
			constraint (!MatchProcessType.Service
			and         !MatchProcessType.ServiceContract)
				"IntrastatInformationNotAllowedOnAServiceTypeInvoice"	
		
		ShipTerm
			constraint (!MatchProcessType.Service
			and         !MatchProcessType.ServiceContract)
				"IntrastatInformationNotAllowedOnAServiceTypeInvoice"	
				
		StatisticalProcedure
			constraint (!MatchProcessType.Service
			and         !MatchProcessType.ServiceContract)
				"IntrastatInformationNotAllowedOnAServiceTypeInvoice"	
		
		UnloadingPort
			constraint (!MatchProcessType.Service
			and         !MatchProcessType.ServiceContract)
				"IntrastatInformationNotAllowedOnAServiceTypeInvoice"	

		PaymentCategoryCode
			default to PayablesInvoiceImport.Vendor.PaymentCategoryCode

		VendorWithholdingCode											
			cannot be entered

	Rule Blocks
		TriggerACKSupplierInvoiceNativeLPLBOD
			if(ErrorMessage entered)
				LocalMainUserTemplate = "IONAcknowledgeSupplierInvoice_PayablesInvoiceImport_ConfirmBOD_ST"
				if(UserTemplateRel exists)
					send ion bod
						bod is ConfirmBODXML
						bod type is "Acknowledge.SupplierInvoice"
						document id is Invoice
						accounting entity is Company
				
				LocalMainUserTemplate = "IONAcknowledgeSupplierInvoice_PayablesInvoiceImport_AckBOD_ST"	
				if(UserTemplateRel exists)
					send ion bod
						bod is AcknowledgeSupplierInvoiceXMLBOD
						bod type is "Acknowledge.SupplierInvoice"
						document id is Invoice
						accounting entity is Company
			else
				LocalMainUserTemplate = "IONAcknowledgeSupplierInvoice_PayablesInvoiceImport_AckBOD_ST"	
				if(UserTemplateRel exists)
					send ion bod
						bod is AcknowledgeSupplierInvoiceXMLBOD
						bod type is "Acknowledge.SupplierInvoice"
						document id is Invoice
						accounting entity is Company

		CreateAndUpdateRules
			if (GeneralLedgerCompanyRel.AccountingEntity.TaxEntity.IntrastatUsed)
				include IntrastatEdits

		IntrastatEdits
			initialize IntrastatProcessing
			if (PurchaseFromLocation entered)
				IntrastatProcessing.OriginCountry 		= PurchaseFromLocation.VendorLocation.Vendor.OriginCountry
				IntrastatProcessing.OriginRegion 		= PurchaseFromLocation.VendorLocation.Vendor.OriginRegion
				IntrastatProcessing.VendorVATRegCountry = PurchaseFromLocation.VendorLocation.VendorVATRegCountry
				IntrastatProcessing.VendorVATRegNumber 	= PurchaseFromLocation.VendorLocation.VendorVATRegNumber
			else
				IntrastatProcessing.OriginCountry 		= Vendor.OriginCountry
				IntrastatProcessing.OriginRegion 		= Vendor.OriginRegion
				IntrastatProcessing.VendorVATRegCountry = Vendor.VATRegistrationCountry
				IntrastatProcessing.VendorVATRegNumber 	= Vendor.VATRegistrationNumber
			IntrastatProcessing.TaxEntity	= GeneralLedgerCompanyRel.AccountingEntity.TaxEntity
			IntrastatProcessingTrigger		= IntrastatProcessing.MainTrigger
			constraint (IntrastatProcessing.ReturnedErrorNumber not entered)
				"<IntrastatProcessing.OutputErrorMessage>"
			if (!IntrastatProcessing.DoIntrastatReporting)
				constraint (UnloadingPort 			not entered
				and			NatureOfTransactionCode not entered
				and			StatisticalProcedure	not entered
				and			ShippingMethod			not entered
				and			ShipTerm				not entered)
					"SpecifiedCountries/RegionsNotValidForIntrastatReporting"	


		ComputeTax

			initialize CalculateTax
			
			CalculateTax.Function							= "C"

			CalculateTax.TaxEntity	 						= GeneralLedgerCompanyRel.AccountingEntity
			CalculateTax.TaxCode							= each.TaxCode
			if (each.TaxableAmount entered)
				CalculateTax.TaxableAmount					= each.TaxableAmount
			else
				CalculateTax.TaxableAmount					= each.DistributionAmount
			CalculateTax.TaxCodeAccount						= each.DistributionAccount
			CalculateTax.InvoiceDate						= InvoiceDate
			CalculateTax.TaxDate							= InvoiceDate
			CalculateTax.PaymentDate						= InvoiceDate
			CalculateTax.GeneralLedgerDate					= InvoiceDate
			CalculateTax.PostalAddress						= ProcessLevel.PostalAddress
			CalculateTax.FromPostalAddress					= LocalVendorRel.CurrentAddressRel.PostalAddress	
			CalculateTax.System								= "AP"

			if (TaxEntityRel.ThirdParty.VertexOSeries)
				CalculateTax.TransactionSource				= "I"	
				CalculateTax.InvoiceCompany					= Company
				CalculateTax.ProcessLevel					= ProcessLevel 
				CalculateTax.Vendor							= LocalVendor 
				CalculateTax.Invoice 						= Invoice 
				CalculateTax.LineNumber						= each.Sequence
				CalculateTax.FromTaxCode					= LocalVendorRel.TaxCode
				CalculateTax.PostalAddress					= ProcessLevel.PostalAddress
				CalculateTax.FromPostalAddress				= LocalVendorRel.CurrentAddressRel.PostalAddress


				CalculateTax.DeliveryTerms          		= ShipTerm
				CalculateTax.VATRegistrationCountry      	= TaxEntityRel.VATRegistrationCountry 			
				CalculateTax.VATRegistrationNumber		 	= TaxEntityRel.VATRegistrationNumber			
				CalculateTax.FromVATRegistrationCountry   	= LocalVendorRel.VATRegistrationCountry	
				CalculateTax.FromVATRegistrationNumber		= LocalVendorRel.VATRegistrationNumber	
				CalculateTax.DefaultFilingCurrency 			= Company.Currency 
				CalculateTax.CurrencyRate					= CurrencyExchangeRate
				CalculateTax.TransactionCurrency 			= InvoiceCurrency								
				
			if (TaxEntityRel.ThirdParty.TaxEngine)

				if (!TaxEngineTaxDetailRel exists)
					ErrorOccurred 		= true
					LocalErrorMessage 	= TaxEngineReturnDoesNotExist
			else
				LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax
	
				if (CalculateTax.OutputErrorNumber entered)
					ErrorOccurred								= true
					LocalErrorMessage 							= CalculateTax.OutputErrorMessage

				else
					if (each.TaxCode.TaxType.TaxTableCode)
						WorkTotalTaxableAmount					+= CalculateTax.OutputTotalTaxable
						Idx = 1 
						while (Idx <= 8)
							if (CalculateTax.TaxTable.TaxTableOutput[Idx].TaxCode entered)
								WorkTotalTaxAmount					+= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxAmount
								if  (CalculateTax.TaxTable.TaxTableOutput[Idx].AccrualFlag = "I")
									WorkTotalDistributionAmount 	+= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxAmount
							Idx += 1
					else

						WorkTotalTaxAmount						+= CalculateTax.OutputTotalTaxAmount
						WorkTotalTaxableAmount					+= CalculateTax.OutputTotalTaxable






					
		InterfaceEdits






			if  (PostingStatus.History)
				initialize WorkTotalDistributionAmount
				initialize WorkTotalTaxAmount
				initialize WorkTotalTaxableAmount


				for each PayablesInvoiceDistributionImportRel
					LocalTaxCode = each.TaxCode
					initialize LocalRunGroupAccruedTax			


					if  (each.TaxCode entered
					and  !each.TaxIndicator.Taxable
					and ((TaxEntityRel.ThirdParty.InforTax		
					and  ((TaxEntityRel.UseTaxCodeAccounts
					and   EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
					or   (!TaxEntityRel.UseTaxCodeAccounts
					and   TaxEntityRel.AccruedOrInvoiced.Accrued)))
					or 	 (!TaxEntityRel.ThirdParty.InforTax		
					and   TaxAmount not entered)))				
						NextSentence = true
						LocalRunGroupAccruedTax = LocalTaxCode		

					else
						WorkTotalDistributionAmount += each.DistributionAmount

						if  (each.TaxCode entered								
						and ((TaxEntityRel.UseTaxCodeAccounts					
						and   EntityTaxCodeRel.AccruedOrInvoiced.Accrued)		
						or   (!TaxEntityRel.UseTaxCodeAccounts					
						and   TaxEntityRel.AccruedOrInvoiced.Accrued)))			
							LocalRunGroupAccruedTax = each.TaxCode				


					if  (each.TaxCode entered)

						if  (each.TaxIndicator not entered)
							if ((TaxEntityRel.ThirdParty.InforTax		
							and ((TaxEntityRel.UseTaxCodeAccounts				
							and  EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
							or   (!TaxEntityRel.UseTaxCodeAccounts
							and  TaxEntityRel.AccruedOrInvoiced.Invoiced)))
							or  ((!TaxEntityRel.ThirdParty.InforTax		
							and  TaxAmount entered)))					
								WorkTotalTaxAmount			+= each.DistributionAmount
								WorkTotalTaxableAmount		+= each.TaxableAmount

						else
							LocalVendor = DerivedVendor

							include ComputeTax


				if  (!ErrorOccurred)
					if  (DistributionCode entered)		
						ErrorOccurred		= true
						LocalErrorMessage	= CannotEnterDistributionCodeMsg
					else
					if  (DistributionCodeAccount entered)	
						ErrorOccurred		= true
						LocalErrorMessage	= CannotEnterDistributionCodeAccountMsg
					else

						if  (DerivedInvoiceAmount != WorkTotalDistributionAmount)
							ErrorOccurred		= true
							LocalErrorMessage	= InvAmtNotEqualToDistributionsMsg
						else					

							if  (DerivedTaxAmount != WorkTotalTaxAmount)
								ErrorOccurred		= true
								LocalErrorMessage	= TaxAmtNotEqualToDistribsMsg








			if (!ErrorOccurred)											
				if (Company not entered)								
					ErrorOccurred			= true						
					LocalErrorMessage		= InvoiceCompanyIsRequired	

			if (!ErrorOccurred)											
				if (Company not exists)									
					ErrorOccurred			= true						
					LocalErrorMessage		= InvoiceCompanyDoesNotExist

			if (!ErrorOccurred)									
				if (RemitToCode entered)
					LocalBalanceCompany				= Company
					LocalBalanceVendorGroup			= Company.VendorGroup
					if (DerivedPayVendor entered						
					and DerivedVendor != DerivedPayVendor)				
						LocalBalanceVendor			= DerivedPayVendor	
					else	
						LocalBalanceVendor			= DerivedVendor
					LocalBalanceRemitToCode			= RemitToCode
					if (LocalVendorLocationRel not exists)
						ErrorOccurred			= true
						LocalErrorMessage		= InvalidRemitToLocationMsg
						
			if (!ErrorOccurred)									
				if  (Vendor not entered							
				and  OldVendor not entered						
				and !OneTimeVendor)								
					ErrorOccurred		= true					
					LocalErrorMessage	= VendorNotFoundMsg		
			
			if (!ErrorOccurred)										
				if (Vendor entered)									
					LocalVendor = Vendor							
					if (LocalVendorRel not exists)					
						ErrorOccurred		= true					
						LocalErrorMessage 	= VendorNotValidMsg		
			
			if (!ErrorOccurred)
				if  (Vendor not entered
				and  OldVendor entered
				and !OneTimeVendor
				and !VendorForLegacyVendorRel exists
				and !InterfaceMappingVendorRel exists)
					ErrorOccurred		= true
					LocalErrorMessage	= InterfacedVendorNotFoundMsg
				else					
				if  (InterfacedPayVendor entered
				and !LegacyPayVendorRel exists
				and !InterfaceMappingPayVendorRel exists)
					ErrorOccurred		= true
					LocalErrorMessage	= InterfacedPayVendorNotFoundMsg

			if (!ErrorOccurred)
				if  (Vendor entered
				and  EDINumber entered)					
					if (Vendor != DerivedEDIVendor)
						ErrorOccurred		= true
						LocalErrorMessage	= VendorDoesNotMatchEDINumberMsg

			if (!ErrorOccurred)
				if  (Vendor entered
				and  OldVendor entered)					
					if  (Vendor != first VendorForLegacyVendorRel.Vendor
					and  Vendor != first InterfaceMappingVendorRel.Vendor)
						ErrorOccurred		= true
						LocalErrorMessage	= InterfaceVendorDoesNotMatchVendorMsg

			if (!ErrorOccurred)
				if  (OldVendor entered
				and  EDINumber entered)					
					if  (DerivedEDIVendor != first VendorForLegacyVendorRel.Vendor
					and  DerivedEDIVendor != first InterfaceMappingVendorRel.Vendor)
						ErrorOccurred		= true
						LocalErrorMessage	= InterfaceVendorDoesNotMatchEDINumberMsg

			if (!ErrorOccurred)														
				LocalVendor = DerivedVendor											
				if  (Status.Open													
				and PayablesInvoiceDistributionImportRel not exists					
				and DistributionCode not entered									
				and LocalVendorCompanyDefaultRel.DistributionCode not entered		
				and LocalVendorRel.DistributionCode not entered						
				and ProcessLevel.DistributionCode not entered						
				and LocalVendorRel.VendorClass.DistributionCode not entered			
				and Company.DistributionCode not entered)							
					ErrorOccurred		= true										
					LocalErrorMessage	= DistributionsRequiredForOpenInvoiceMsg	

			if (!ErrorOccurred)
				if  (Status.Unreleased
				and  !PostingStatus.Unreleased)
					ErrorOccurred		= true
					LocalErrorMessage	= PostingStatusMustBeUnreleasedMsg
				else					
				if  (Status.Open
				and  PostingStatus.Unreleased)
					ErrorOccurred		= true
					LocalErrorMessage	= PostingStatusCannotBeUnreleasedMsg
				else
				if  (Status.History				
				and !PostingStatus.History)
					ErrorOccurred		= true
					LocalErrorMessage	= PostingStatusMustBeHistorical
				else					
				if  (DistributionCode entered
				and  PostingStatus.History)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterDistributionCodeMsg
				else
				if  (DistributionCodeAccount entered)	
					if (PostingStatus.History)
						ErrorOccurred		= true
						LocalErrorMessage	= CannotEnterDistributionCodeAccountMsg




				else
				if  (TransactionNumber entered
				and  !Status.History)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterTransactionNotHistoricalMsg
				else
				if  (CheckDate entered
				and  !Status.History)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterCheckDateNotHistoricalMsg
				else
				if  (CurrencyExchangeRate entered
				and  BaseInvoiceAmount entered)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterBothExchangeRateAndFunctionalInvoiceAmountMsg
				else
				if  (InvoiceAlternateAmount entered															
				and  InvoiceAlternateRate entered)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterBothAlternateRateAndAlternateAmountMsg
				else
				if  (InvoiceAlternateAmount2 entered														
				and  InvoiceAlternateRate2 entered)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterBothAlternateRate2AndAlternateAmount2Msg
				else
				if  (InvoiceAlternateAmount3 entered														
				and  InvoiceAlternateRate3 entered)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterBothAlternateRate3AndAlternateAmount3Msg
				else
				if  (InvoiceReportAmount1 entered															
				and  InvoiceReportRate1 entered)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterBothInvoiceReportAmount1AndInvoiceReportRate1Msg
				else
				if  (InvoiceReportAmount2 entered															
				and  InvoiceReportRate2 entered)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterBothInvoiceReportAmount2AndInvoiceReportRate2Msg
				else
				if  (InvoiceReportAmount3 entered															
				and  InvoiceReportRate3 entered)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterBothInvoiceReportAmount3AndInvoiceReportRate3Msg
				else
				if  (InvoiceReportAmount4 entered															
				and  InvoiceReportRate4 entered)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterBothInvoiceReportAmount4AndInvoiceReportRate4Msg
				else
				if  (InvoiceReportAmount5 entered															
				and  InvoiceReportRate5 entered)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterBothInvoiceReportAmount5AndInvoiceReportRate5Msg
				else
				if  (Status.Unreleased
				and  Suffix entered)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterSuffixForUnreleasedMsg
				else
				if  (Status.Unreleased
				and  DiscountLost)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotSetDiscountLostForUnreleasedMsg
				else
				if (NumberOfRecurringInvoices entered
				and RecurringFrequency not entered)
					ErrorOccurred		= true
					LocalErrorMessage	= RecurringFrequencyRequiredMsg
				else
				if (RecurringFrequency entered
				and NumberOfRecurringInvoices not entered)
					ErrorOccurred		= true
					LocalErrorMessage	= NumberOfRecurringInvoicesRequiredMsg
				else
				if (Status.Unreleased
				and NumberOfRecurringInvoices entered
				and RecurringInvoiceRel exists)
					ErrorOccurred		= true
					LocalErrorMessage	= RecurringInvoiceAlreadyExistsMsg
				else
				if (NumberOfRecurringInvoices entered
				and Suffix	> NumberOfRecurringInvoices)
					ErrorOccurred		= true
					LocalErrorMessage	= SuffixCannotBeGreaterThanNumberOfRecurringInvoicesMsg
				else
				if (NumberOfRecurringInvoices entered
				and InvoiceWithSuffixRel exists)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotInterfaceRecurringInvoiceMsg				
				else
				if (Suffix entered
				and NumberOfRecurringInvoices not entered
				and RecurringFrequency not entered
				and RecurringInvoiceRel exists)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotInterfaceInvWithSfxIfRecurInvExistsMsg				
				else






				if  (Status.History
				and  HoldCode entered)
					ErrorOccurred		= true
					LocalErrorMessage	= CannotEnterHoldCodeOnHistoricalMsg


				if (LocalRunGroupHasPayments)
					if (PayablesInvoicePaymentImportRel exists)
						HasPayment = true
					else
						HasPayment = false
				
					if  (Status.History
					and  HasPayment
					and  InvoiceAmount != sum PayablesInvoicePaymentImportRel.PaymentAmount)
						ErrorOccurred		= true
						LocalErrorMessage	= InvoiceAmountVersusPaymentsMsg
					else
					if  (!HasPayment
					and  Status.History
					and  CheckDate not entered)
						ErrorOccurred		= true
						LocalErrorMessage	= CheckDateRequiredOnHistoricalMsg
					else
					if  (!HasPayment
					and  Status.History
					and  BankTransactionCode not entered)
						ErrorOccurred		= true
						LocalErrorMessage	= PaymentCodeRequiredOnHistoricalMsg
					else
					if  (HasPayment
					and  CheckDate entered)
						ErrorOccurred		= true
						LocalErrorMessage	= CannotEnterCheckDateIfHasPaymentsMsg
					else
					if  (!HasPayment
					and  Status.History
					and  TransactionNumber not entered)
						ErrorOccurred		= true
						LocalErrorMessage	= TransactionNumberRequiredOnHistoricalMsg
					else
					if  (HasPayment
					and  TransactionNumber entered)
						ErrorOccurred		= true
						LocalErrorMessage	= CannotEnterTransactionIfHasPaymentsMsg
					else
					if  (HasPayment
					and  !Status.History
					and  NonHistoricalPaymentImportRel !exists)
						ErrorOccurred		= true
						LocalErrorMessage	= MustHaveOpenPaymentForOpenInvoiceMsg
					else								
					if (VendorWithholdingCode entered)
						ErrorOccurred		= true
						LocalErrorMessage	= CannotEnterVendorWithholdingCodeMsg

		DoError
			if (Status.History
			and UpdateVendorBalance)
				LocalPaymentNumberHasError	= true

			if  (LocalMoveErrorsToNewRunGroup
			and  LocalErrorRunGroup not entered)
				increment Company.VendorGroup.LastErrorRunGroupNumber
				LocalErrorRunGroup				= PrmErrorRunGroupPrefix + "ERRORS_" + Company.VendorGroup.LastErrorRunGroupNumber

				invoke Update LocalInterfaceResultView.PayablesInvoiceInterfaceResult
					invoked.ErrorRunGroup				= LocalErrorRunGroup
					invoked.Status						= 2
						
			invoke SetError
				invoked.PrmErrorMessage					= LocalErrorMessage
				invoked.PrmErrorRunGroup				= LocalErrorRunGroup


		InterfaceThisInvoice

			initialize ErrorOccurred
			initialize RecordInError
			initialize ErrorMessage

			if (PayablesInvoice entered)
				InterfacedInvoice							= PayablesInvoice.PayablesInvoice
				invoke FastUpdate PayablesInvoice
					invoked.OriginatingInterfaceRun			= LocalPayablesInvoiceInterfaceResult
			else

				include InterfaceEdits

				if (ErrorOccurred)

					include DoError
				else

					if (Status.History)

						invoke Historical.CreateFromInterface PayablesInvoice
							assign result to InterfacedInvoice
							resume on error
								ErrorOccurred		= true
								LocalErrorMessage	= error message
							fill in fields from this instance
								except invoked.InvoiceAmount
								except invoked.DiscountAmount
								except invoked.VoucherNumber
								except invoked.Status
							fill in user fields from this instance
							invoked.Company								= Company
							invoked.Vendor								= DerivedVendor
							invoked.Invoice								= Invoice
							invoked.Suffix								= Suffix
							if (InvoiceSource not entered)		
								invoked.InvoiceSource	= "Z"
							if (LocalRunGroupAccruedTax entered)										
								invoked.ImportInvoiceAccruedTaxCode		= LocalRunGroupAccruedTax		
							if  (LocalRunGroupHasPayments)
								if (HasPayment)
									invoked.ImportInvoiceHasImportPayment	= true
							invoked.PayVendor							= DerivedPayVendor
							invoked.PurchaseFromLocation				= PurchaseFromLocation
							invoked.InvoiceAmount.CurrencyAmount		= InvoiceAmount
							if (!HasPayment)
								invoked.AmountPaid					= InvoiceAmount
							invoked.DiscountAmount.CurrencyAmount		= DiscountAmount
							invoked.TransientBankCheckAmount			= BankCheckAmount
							invoked.TransientPaymentDate				= CheckDate
							invoked.TransientPaymentNumber				= TransactionNumber
							invoked.TransientDiscountLost				= DiscountLost

							invoked.TransientReportableAmount			= ReportableIncomeAmount
							invoked.OverrideSeparatePayment				= SeparatePayment			
							invoked.OverrideEnclosure					= Enclosure					
							invoked.OverridePayImmediately				= PayImmediately			
							invoked.OverrideRevalueCurrency				= RevalueCurrency			
							invoked.TransientPostingStatus				= PostingStatus
							invoked.TransientLineTax					= LinkTaxOnDistributions	

							invoked.MatchProcessType					= "E" 
							invoked.ExternalPurchaseOrder				= ExternalPurchaseOrder 
							invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount = BaseInvoiceAmount
							invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate  = CurrencyExchangeRate
							invoked.InvoiceAmount.AlternateAmount.EnteredCurrencyAmount  = InvoiceAlternateAmount   
							invoked.InvoiceAmount.AlternateAmount.EnteredCurrencyRate    = InvoiceAlternateRate
							invoked.InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount = InvoiceAlternateAmount2
							invoked.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate 	 = InvoiceAlternateRate2 
							invoked.InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount = InvoiceAlternateAmount3
							invoked.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate 	 = InvoiceAlternateRate3 
							invoked.InvoiceAmount.ReportAmount1.EnteredCurrencyAmount    = InvoiceReportAmount1	   
							invoked.InvoiceAmount.ReportAmount1.EnteredCurrencyRate	     = InvoiceReportRate1
							invoked.InvoiceAmount.ReportAmount2.EnteredCurrencyAmount    = InvoiceReportAmount2
							invoked.InvoiceAmount.ReportAmount2.EnteredCurrencyRate	     = InvoiceReportRate2
							invoked.InvoiceAmount.ReportAmount3.EnteredCurrencyAmount    = InvoiceReportAmount3
							invoked.InvoiceAmount.ReportAmount3.EnteredCurrencyRate	     = InvoiceReportRate3
							invoked.InvoiceAmount.ReportAmount4.EnteredCurrencyAmount    = InvoiceReportAmount4
							invoked.InvoiceAmount.ReportAmount4.EnteredCurrencyRate	     = InvoiceReportRate4
							invoked.InvoiceAmount.ReportAmount5.EnteredCurrencyAmount    = InvoiceReportAmount5
							invoked.InvoiceAmount.ReportAmount5.EnteredCurrencyRate	     = InvoiceReportRate5

							invoked.InterfaceInProcess					= true
							invoked.OriginatingInterfaceRun				= LocalPayablesInvoiceInterfaceResult
							if (OneTimeVendor)
								invoked.CreateOneTimeVendor				= true
								invoked.TransientVendorName				= VendorName
								invoked.TransientVendorSearchName		= VendorSearchName
								invoked.TransientVendorAddress			= PostalAddress
								invoked.TransientLegalName				= LegalName
								invoked.TransientTaxID					= TaxID
								invoked.TransientIncomeCode				= VendorIncomeCode
								invoked.TransientVATRegistrationCountry	= VATRegistrationCountry
								invoked.TransientVATRegistrationNumber	= VATRegistrationNumber
							if  (UpdateVendorBalance)
								if (InvoiceDate > LastYearEndingDate)
									invoked.TransientUpdateVendorBalance	= true
								if (CheckDate > LastYearEndingDate)
									invoked.TransientUpdatePaymentBalance	= true
					else

						invoke CreateImportInvoice PayablesInvoice
							assign result to InterfacedInvoice
							resume on error
								ErrorOccurred		= true
								LocalErrorMessage	= error message
							fill in fields from this instance
								except invoked.InvoiceAmount
								except invoked.DiscountAmount
								except invoked.VoucherNumber
								except invoked.Status
							fill in user fields from this instance
							invoked.Company								= Company
							invoked.Vendor								= DerivedVendor
							invoked.Invoice								= Invoice
							invoked.Suffix								= Suffix
							if (InvoiceSource not entered)		
								invoked.InvoiceSource	= "Z"
							if (LocalRunGroupHasPayments)
								if (HasPayment)
									invoked.ImportInvoiceHasImportPayment	= true
							invoked.PayVendor							= DerivedPayVendor
							invoked.PurchaseFromLocation				= PurchaseFromLocation
							invoked.InvoiceAmount.CurrencyAmount		= InvoiceAmount
							invoked.DiscountAmount.CurrencyAmount		= DiscountAmount
	
							invoked.TransientBankCheckAmount			= BankCheckAmount
							invoked.TransientPaymentDate				= CheckDate
							invoked.TransientPaymentNumber				= TransactionNumber

							invoked.TransientReportableAmount			= ReportableIncomeAmount
							invoked.OverrideSeparatePayment				= SeparatePayment			
							invoked.OverrideEnclosure					= Enclosure					
							invoked.OverridePayImmediately				= PayImmediately			
							invoked.OverrideRevalueCurrency				= RevalueCurrency			
							invoked.TransientPostingStatus				= PostingStatus
							invoked.TransientLineTax					= LinkTaxOnDistributions	
							invoked.TransientDistCodeAccount			= DistributionCodeAccount	

							invoked.MatchProcessType					= "E"
							invoked.ExternalPurchaseOrder				= ExternalPurchaseOrder 
							invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount = BaseInvoiceAmount
							invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	 = CurrencyExchangeRate
							invoked.InvoiceAmount.AlternateAmount.EnteredCurrencyAmount  = InvoiceAlternateAmount   
							invoked.InvoiceAmount.AlternateAmount.EnteredCurrencyRate    = InvoiceAlternateRate
							invoked.InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount = InvoiceAlternateAmount2
							invoked.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate 	 = InvoiceAlternateRate2 
							invoked.InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount = InvoiceAlternateAmount3
							invoked.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate 	 = InvoiceAlternateRate3 
							invoked.InvoiceAmount.ReportAmount1.EnteredCurrencyAmount 	 = InvoiceReportAmount1	  
							invoked.InvoiceAmount.ReportAmount1.EnteredCurrencyRate	 	 = InvoiceReportRate1
							invoked.InvoiceAmount.ReportAmount2.EnteredCurrencyAmount    = InvoiceReportAmount2
							invoked.InvoiceAmount.ReportAmount2.EnteredCurrencyRate	     = InvoiceReportRate2
							invoked.InvoiceAmount.ReportAmount3.EnteredCurrencyAmount    = InvoiceReportAmount3
							invoked.InvoiceAmount.ReportAmount3.EnteredCurrencyRate	     = InvoiceReportRate3
							invoked.InvoiceAmount.ReportAmount4.EnteredCurrencyAmount    = InvoiceReportAmount4
							invoked.InvoiceAmount.ReportAmount4.EnteredCurrencyRate	     = InvoiceReportRate4
							invoked.InvoiceAmount.ReportAmount5.EnteredCurrencyAmount    = InvoiceReportAmount5
							invoked.InvoiceAmount.ReportAmount5.EnteredCurrencyRate	     = InvoiceReportRate5

							invoked.InterfaceInProcess					= true
							invoked.OriginatingInterfaceRun				= LocalPayablesInvoiceInterfaceResult
	
							if (OneTimeVendor)
								invoked.CreateOneTimeVendor				= true
								invoked.TransientVendorName				= VendorName
								invoked.TransientVendorSearchName		= VendorSearchName
								invoked.TransientVendorAddress			= PostalAddress
								invoked.TransientLegalName				= LegalName
								invoked.TransientTaxID					= TaxID
								invoked.TransientIncomeCode				= VendorIncomeCode
								invoked.TransientVATRegistrationCountry	= VATRegistrationCountry
								invoked.TransientVATRegistrationNumber	= VATRegistrationNumber
								invoked.TransientCarrier				= Carrier
								
							if  (Status.Open)
								invoked.TransientBalanceOrRelease 		= "R"
								invoked.GLTJournalizeGroup				= GLTJournalizeGroup
							else
							if  (LocalPerformBalanceEdits)
								invoked.TransientBalanceOrRelease 		= "B"


					if (ErrorOccurred)
						if  (InterfacedInvoice.PayablesInvoice exists)			
							if (InterfacedInvoice.Status.Historical)
								invoke Historical.Delete InterfacedInvoice.PayablesInvoice
							else
								invoke Delete InterfacedInvoice.PayablesInvoice
						else
						if  (PayablesInvoiceRel exists
						and  PayablesInvoiceRel.OriginatingInterfaceRun = LocalPayablesInvoiceInterfaceResult)
							if (PayablesInvoiceRel.Status.Historical)
								invoke Historical.Delete PayablesInvoiceRel.PayablesInvoice
							else
								invoke Delete PayablesInvoiceRel.PayablesInvoice
							
						include DoError
					else				
						if  (InterfacedInvoice.PayablesInvoice entered)
							PayablesInvoice									= InterfacedInvoice.PayablesInvoice

						else
							if  (PayablesInvoiceRel exists
							and  PayablesInvoiceRel.OriginatingInterfaceRun = LocalPayablesInvoiceInterfaceResult)
								PayablesInvoice									= PayablesInvoiceRel.PayablesInvoice




			if (!ErrorOccurred)		

				if  (LocalRunGroupHasPayments)

			

					if (!ErrorOccurred)
						initialize LocalAmountPaid
						for each PayablesInvoicePaymentImportRel
							invoke InterfaceEdits each
								resume on error
									ErrorOccurred		= true
									LocalErrorMessage	= error message


								
							if (!ErrorOccurred)

								if (!each.Status.History)
									invoke Unreleased.Create PayablesInvoicePayment
										resume on error
											ErrorOccurred		= true
											LocalErrorMessage	= error message
										fill in fields from each
										if (ProcessLevel.PayGroup entered)										
											invoked.PayGroup						= ProcessLevel.PayGroup		
										else																	
											invoked.PayGroup						= Company.PayGroup			
										invoked.Company								= Company
										invoked.PayablesInvoice						= InterfacedInvoice.PayablesInvoice
										invoked.Vendor								= DerivedVendor
										invoked.PayVendor							= DerivedPayVendor
										invoked.PaymentAmount.CurrencyAmount		= each.PaymentAmount
										invoked.DiscountAmount.CurrencyAmount		= each.DiscountAmount
										invoked.WithholdingAmount					= each.WithholdingAmount
										invoked.BankTransactionCode					= each.ImportBankTransactionCode
										invoked.OverrideSeparatePayment				= each.SeparatePayment		
										invoked.OverridePayImmediately				= each.PayImmediately		
										invoked.OverrideEnclosure					= each.Enclosure			
								else

									invoke Historical.InterfaceCreate PayablesInvoicePayment
										resume on error
											ErrorOccurred		= true
											LocalErrorMessage	= error message
										fill in fields from each
										if (ProcessLevel.PayGroup entered)										
											invoked.PayGroup						= ProcessLevel.PayGroup		
										else																	
											invoked.PayGroup						= Company.PayGroup			
										invoked.Company								= Company
										invoked.PayablesInvoice						= InterfacedInvoice.PayablesInvoice
										invoked.Vendor								= DerivedVendor
										invoked.PayVendor							= DerivedPayVendor
										invoked.PaymentAmount.CurrencyAmount		= each.PaymentAmount
										invoked.DiscountAmount.CurrencyAmount		= each.DiscountAmount
										invoked.WithholdingAmount					= each.WithholdingAmount
										invoked.BankTransactionCode					= each.ImportBankTransactionCode
										invoked.OverrideSeparatePayment				= each.SeparatePayment		
										invoked.OverridePayImmediately				= each.PayImmediately		
										invoked.OverrideEnclosure					= each.Enclosure			
										if (DiscountLost														
										or  each.DiscountLost)													
											invoked.DiscountLost					= true						
										if  (UpdateVendorBalance
										and  CheckDate > LastYearEndingDate)
											invoked.TransientUpdatePaymentBalance	= true
									if (!ErrorOccurred)
										LocalAmountPaid	+= each.PaymentAmount

							if (!ErrorOccurred)
								LocalInterfacedPaymentsCount		+= 1
								LocalInterfacedPaymentsAmountTotal	+= each.PaymentAmount
								invoke FastDelete each


					if (ErrorOccurred)
						include DoError
						LocalInterfacePaymentErrorCount	+= 1

					if (!ErrorOccurred
					and LocalAmountPaid entered)
						invoke FastUpdate InterfacedInvoice.PayablesInvoice
							invoked.AmountPaid	+= LocalAmountPaid
	


			if (!ErrorOccurred)
				if (LocalRunGroupHasComments)
					for each PayablesInvoiceImportCommentRel 
	
						invoke Create PayablesInvoiceComment
							resume on error
								ErrorOccurred		= true
								LocalErrorMessage	= error message
							fill in fields from each
							invoked.Company			= Company
							invoked.PayablesInvoice	= InterfacedInvoice.PayablesInvoice
		
						if (ErrorOccurred)
							LocalInterfaceCommentErrorCount	+= 1
							include DoError
						else
							LocalInterfacedCommentsCount	+= 1
							invoke FastDelete each


			if  (ErrorOccurred
			and  LocalMoveErrorsToNewRunGroup)
				invoke Update PayablesInvoicePaymentImportRel
					invoked.RunGroup = RunGroup

				invoke Update PayablesInvoiceImportCommentRel
					invoked.RunGroup = RunGroup
				

				invoke FastUpdate PayablesInvoiceDistributionImportRel	//	IEFIN-87377 //IEFIN-110648 changed "Update" to "FastUpdate"
					invoked.RunGroup = RunGroup						
	

			if (!ErrorOccurred)

				if (!LocalRunGroupHasDistributions
				or  !PayablesInvoiceDistributionImportRel exists)



				

					if (PayablesInvoice.BackgroundProcessing not entered)

						invoke UpdateErrorRecordsAction InterfacedInvoice.PayablesInvoice
							resume on error

						if (Status.Unreleased)
							invoke CheckRoutingRules InterfacedInvoice.PayablesInvoice
								resume on error
						else
						if (Status.Open)

							invoke Unreleased.Release InterfacedInvoice.PayablesInvoice
								resume on error










					invoke FastUpdate InterfacedInvoice.PayablesInvoice		
						invoked.InterfaceInProcess	= false
				

					invoke FastDelete



			if (!ErrorOccurred)
				if (HoldCode entered)
					invoke PutInvoiceOnHold PayablesInvoiceRel
						invoked.HoldCode = HoldCode
			
			if (!ErrorOccurred)			
				if(GarnishmentsDataEntered)
					invoke Create PayablesInvoiceSensitiveData
						resume on error
							ErrorOccurred		= true
							LocalErrorMessage	= error message
						fill in fields from this instance
						invoked.Company			= Company
						invoked.PayablesInvoice	= InterfacedInvoice.PayablesInvoice

	Actions
		InterfaceInvoices is a Set Action
		    default label is "InterfacePayablesInvoices"

			run in background	

			Queue Mapping Fields				
				PrmFinanceEnterpriseGroup
				PrmRunGroup
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCompany					is a PayablesCompany
				PrmAuthorityCode			is a PayablesAuthorityCode
				PrmStatus					is Alpha size 1
					States
						Unreleased	value is 0
						Open		value is 1
						History		value is 9
				UpdateTaxSystem				is Boolean
				UpdateVendorBalance			is Boolean
				LastYearEndingDate			is Date
				IncludeInvoicesInError		is Boolean
				PrmMoveErrorsToNewRunGroup	is Boolean
					default label is "MoveErrorsToNewRunGroup"
				PrmErrorRunGroupPrefix		is AlphaUpper 15
					default label is "ErrorRunGroupPrefix"
				PerformBalanceEdits			is Boolean
				PrmJournalizeDistributions	is Boolean
					default label is "JournalizeReleasedDistributions"
				PrmOriginalMTIntResult		is a PayablesInvoiceInterfaceResult		
					context of PrmFinanceEnterpriseGroup
				KeepOriginalRunGroup		is Boolean		

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup

				PrmRunGroup
					required
						"RunGroupIsRequired"
					LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
					LocalRunGroup				= PrmRunGroup
					LocalActionName				= "InterfaceInvoices"
					
					if (config.PIIParmUseIntResult = true)		
						for each InterfaceResultInProcessRel
							if (PrmCompany not entered
							or  each.Company not entered
							or  PrmCompany = each.Company)
								Diff = (current timestamp - each.RunTime)
								constraint (Diff > 86400)
									"ExistingJobForThisRunGroup<LocalRunGroup>IsAlreadyInProcess"
					else
						constraint (AsyncActionRequestRel not exist)	
							"ExistingInterfaceForRunGroup<LocalRunGroup>IsAlreadyInProcess"

				PrmCompany													
					if (PrmAuthorityCode entered)
						required
							"CompanyIsRequiredIfAuthorityCodeEntered"

				UpdateTaxSystem
					initial value is true

				UpdateVendorBalance
					initial value is true

				LastYearEndingDate
					if (UpdateVendorBalance)
						required
							"LastYearEndingDateRequiredIfUpdateVendorBalanceSetToTrue"

				PerformBalanceEdits
					initial value is true

				PrmJournalizeDistributions													
					LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
					constraint (!GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
						"JournalizeDistributionsNotAllowedWhenBudgetingSetToTrackAndEdit"

			Local Fields
				LocalInstanceCount					is Numeric 10
				LocalInterfaceResultView			is a PayablesInvoiceInterfaceResult view
				RunGroupHasPayments					is Boolean
				RunGroupHasDistributions			is Boolean
				RunGroupHasComments					is Boolean
				LocalBudgetsEnabled					is Boolean		

				SkipCompany							is Boolean
				GLTJournalizeGroup					is like JournalizeGroup
				LocalAsyncId 						is an AsyncActionRequest
				CommitNow							is Boolean
				LocalPaymentNumberHasError			is Boolean
				LocalInterfacedInvoiceCountTotal	is Numeric 10
				LocalInterfacedInvoiceAmountTotal	is an InternationalAmount
				LocalInterfaceInvoiceErrorCount		is Numeric 10
				LocalInterfacedPaymentsAmountTotal	is an InternationalAmount
				LocalInterfacedPaymentsCount		is Numeric 10
				LocalInterfacePaymentErrorCount		is Numeric 10
				LocalInterfacedCommentsCount		is Numeric 10
				LocalInterfaceCommentErrorCount		is Numeric 10

			Instance Selection
				where (RunGroup = PrmRunGroup
				and	  (PrmCompany not entered										
					or (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup	

						and Company = PrmCompany))
				and   (PrmAuthorityCode	not entered
					or AuthorityCode	= PrmAuthorityCode))

			Sort Order
				RunGroup
				Company
				Vendor
				RemitToCode
				CashCode
				BankTransactionCode
				TransactionNumber
				CheckDate

			Accumulators
				NumberOfPaidInvoices
				Period1NumberOfPayments
				Period2NumberOfPayments
				Period3NumberOfPayments
				Period4NumberOfPayments
				Period5NumberOfPayments
				Period6NumberOfPayments
				Period7NumberOfPayments
				Period8NumberOfPayments
				Period9NumberOfPayments
				Period10NumberOfPayments
				Period11NumberOfPayments
				Period12NumberOfPayments
				Period13NumberOfPayments

			Action Rules

				Empty Set Rules
					invoke Create PayablesInvoiceInterfaceResult
						invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoked.RunTime						= current timestamp
						invoked.RunGroup					= PrmRunGroup
						invoked.RunType						= 1
						invoked.Company						= PrmCompany
						invoked.AuthorityCode				= PrmAuthorityCode
				        invoked.PrmStatus					= PrmStatus
						invoked.UpdateTaxSystem				= UpdateTaxSystem
						invoked.UpdateVendorBalance			= UpdateVendorBalance
						invoked.LastYearEndingDate			= LastYearEndingDate
						invoked.MoveErrorsToNewRunGroup		= PrmMoveErrorsToNewRunGroup	
						invoked.ErrorRunGroupPrefix			= PrmErrorRunGroupPrefix		
						invoked.JournalizeDistributions		= PrmJournalizeDistributions	
						invoked.IncludeInvoicesInError		= IncludeInvoicesInError
						invoked.Status						= 1 
						invoked.PerformBalanceEdits			= PerformBalanceEdits
						if(PrmAuthorityCode entered)					
							invoked.VendorGroup				= PrmCompany.VendorGroup

					LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track 
					or  GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit) 
						invoke ProcessInterfaceBatchEdits BudgetEditBatch					
							invoked.PrmFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup 
							invoked.PrmBusinessClassName 		= "PayablesInvoice" 

				RunGroup Set Rules
					Entrance Rules
						LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track 
						or  GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
							LocalBudgetsEnabled		= true								


						if (PrmJournalizeDistributions)
							LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
							invoke IncrementLastJournalizeGroup GeneralLedgerSystemCodeRel
							GLTJournalizeGroup	= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
							CommitNow			= true

						invoke Create PayablesInvoiceInterfaceResult
							assign result to LocalInterfaceResultView

							invoked.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							invoked.RunTime					= current timestamp
							invoked.RunGroup				= PrmRunGroup
							invoked.RunType					= 1
							invoked.Company					= PrmCompany
							invoked.AuthorityCode			= PrmAuthorityCode
							invoked.PrmStatus				= PrmStatus
							invoked.UpdateTaxSystem			= UpdateTaxSystem
							invoked.UpdateVendorBalance		= UpdateVendorBalance
							invoked.LastYearEndingDate		= LastYearEndingDate
							invoked.MoveErrorsToNewRunGroup	= PrmMoveErrorsToNewRunGroup	
							invoked.ErrorRunGroupPrefix		= PrmErrorRunGroupPrefix		
							invoked.JournalizeDistributions	= PrmJournalizeDistributions	
							invoked.IncludeInvoicesInError	= IncludeInvoicesInError
							invoked.PerformBalanceEdits		= PerformBalanceEdits
							invoked.JournalizeGroup			= GLTJournalizeGroup
							if (PrmAuthorityCode entered)					
								invoked.VendorGroup			= PrmCompany.VendorGroup
							if (PrmOriginalMTIntResult entered)								
								invoked.OriginalMTPIIResult		= PrmOriginalMTIntResult	
								invoked.KeepOriginalRunGroup	= KeepOriginalRunGroup		




					Exit Rules

						if (PrmJournalizeDistributions)
							LocalAsyncId					= LocalInterfaceResultView.PayablesInvoiceInterfaceResult.AsyncId
							invoke JournalizeDistributionsForGroup PayablesInvoiceDistribution in background
								run after LocalAsyncId
								invoked.PrmEnterpriseGroup		= PrmFinanceEnterpriseGroup
								invoked.PrmJournalizeGroup		= GLTJournalizeGroup
								invoked.PrmDescription			= InterfacePostingMessage

						invoke Update LocalInterfaceResultView.PayablesInvoiceInterfaceResult
							invoked.RecordsProcessed					= LocalInstanceCount
							invoked.InterfacedInvoicesAmountTotal		= LocalInterfacedInvoiceAmountTotal
							invoked.InterfacedInvoicesCount				= LocalInterfacedInvoiceCountTotal
							invoked.InterfaceInvoiceErrorCount			= LocalInterfaceInvoiceErrorCount
							invoked.InterfacedPaymentsCount				= LocalInterfacedPaymentsCount
							invoked.InterfacedCommentsCount				= LocalInterfacedCommentsCount

						VerifyResultPayablesMonitor.RunGroup			= PrmRunGroup
						VerifyResultPayablesMonitor.Company 			= blank
						VerifyResultPayablesMonitor.RunProgram			= RunProgram.InvoiceInterface
						VerifyResultPayablesMonitor.ProcessGroup		= blank
						VerifyResultPayablesMonitor.ProcessLevel		= blank
						VerifyResultPayablesMonitor.AccountStructure	= blank
						VerifyResultPayablesMonitor.BatchNumber			= blank
						VerifyResultPayablesMonitor.AuthorityCode		= PrmAuthorityCode
						LocalCheckAPMonitor								= VerifyResultPayablesMonitor.CallVerifyInvoiceInterfacePayablesMonitor
						if (VerifyResultPayablesMonitor.NoErrors)
							invoke UpdateStatus LocalInterfaceResultView.PayablesInvoiceInterfaceResult
					
						LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track 
						or  GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit) 
							LocalAsyncId	= LocalInterfaceResultView.PayablesInvoiceInterfaceResult.AsyncId					
							invoke TriggerBudgetEdit LocalInterfaceResultView.PayablesInvoiceInterfaceResult in background		
								run after LocalAsyncId																			
								invoked.PrmFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup 
								invoked.PrmBusinessClassName 		= "PayablesInvoice"
							





				Company Set Rules
					Entrance Rules

						if (Company not entered        
						or  Company not exists)
							CompanyErrorOccurred	= true						

						else

							VerifyPayablesMonitor.RunGroup			= PrmRunGroup
							VerifyPayablesMonitor.Company 			= Company
							VerifyPayablesMonitor.RunProgram		= RunProgram.InvoiceInterface
							VerifyPayablesMonitor.ProcessGroup		= blank
							VerifyPayablesMonitor.ProcessLevel		= blank
							VerifyPayablesMonitor.AccountStructure	= blank
							VerifyPayablesMonitor.BatchNumber		= blank
							VerifyPayablesMonitor.AuthorityCode		= PrmAuthorityCode
							LocalCheckAPMonitor						= VerifyPayablesMonitor.CallVerifyPayablesMonitor


						if (CompanyErrorOccurred)								
							SkipCompany							= false			
						else													
						if (VerifyPayablesMonitor.NoErrors)
							SkipCompany							= false
							ErrorOccurred						= false
							LocalCheckAPMonitor					= VerifyPayablesMonitor.BeginMonitor

							if (PaymentImportRunGroupRel exists)
								RunGroupHasPayments					= true
							else
								RunGroupHasPayments					= false
	
							if (DistributionImportRunGroupRel exists)
								RunGroupHasDistributions			= true
							else
								RunGroupHasDistributions			= false
	
							if (CommentImportRunGroupRel exists)
								RunGroupHasComments					= true
							else
								RunGroupHasComments					= false
						else

							SkipCompany 						= true
							ErrorOccurred						= false
							LocalErrorMessage					= VerifyPayablesMonitor.ProcessingMessage

							invoke Create PayablesInvoiceInterfaceResult

								invoked.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
								invoked.RunTime					= current timestamp
								invoked.RunGroup				= PrmRunGroup
								invoked.RunType					= 1
								invoked.Company					= Company
								invoked.AuthorityCode			= PrmAuthorityCode
								invoked.PrmStatus				= PrmStatus
								invoked.UpdateTaxSystem			= UpdateTaxSystem
								invoked.UpdateVendorBalance		= UpdateVendorBalance
								invoked.LastYearEndingDate		= LastYearEndingDate
								invoked.MoveErrorsToNewRunGroup	= PrmMoveErrorsToNewRunGroup	
								invoked.ErrorRunGroupPrefix		= PrmErrorRunGroupPrefix		
								invoked.JournalizeDistributions	= PrmJournalizeDistributions	
								invoked.IncludeInvoicesInError	= IncludeInvoicesInError
								invoked.PerformBalanceEdits		= PerformBalanceEdits
								invoked.RunMessage				= VerifyPayablesMonitor.ProcessingMessage
								invoked.Status					= 2
								invoked.BypassExistingJobEdit	= true
								if(PrmAuthorityCode entered)					
									invoked.VendorGroup			= PrmCompany.VendorGroup
								if (PrmOriginalMTIntResult entered)								
									invoked.OriginalMTPIIResult		= PrmOriginalMTIntResult	
									invoked.KeepOriginalRunGroup	= KeepOriginalRunGroup		




					Exit Rules

						if (!SkipCompany
						and !CompanyErrorOccurred)				

							if (RunGroupHasDistributions)
								if (PrmJournalizeDistributions
								or  LocalBudgetsEnabled)		
									LocalAsyncId = LocalInterfaceResultView.PayablesInvoiceInterfaceResult.AsyncId


								invoke LoadInterfaceDistributions PayablesInvoiceDistributionImport
									run after LocalAsyncId
									assign async action request id to LocalAsyncId
									invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
									invoked.PrmRunGroup					= PrmRunGroup
									invoked.PrmCompany					= Company
									invoked.PrmAuthorityCode			= PrmAuthorityCode
									invoked.PrmStatus					= PrmStatus
									invoked.IncludeInvoicesInError		= IncludeInvoicesInError
									invoked.PrmMoveErrorsToNewRunGroup	= PrmMoveErrorsToNewRunGroup
									invoked.PrmErrorRunGroupPrefix		= PrmErrorRunGroupPrefix
									invoked.PerformBalanceEdits			= PerformBalanceEdits
									invoked.PrmInterfaceRun				= LocalInterfaceResultView.PayablesInvoiceInterfaceResult
									invoked.PrmJournalizeGroup			= GLTJournalizeGroup


								
								if (PrmJournalizeDistributions
								or  LocalBudgetsEnabled)		
									invoke Update LocalInterfaceResultView.PayablesInvoiceInterfaceResult
										invoked.AsyncId		= LocalAsyncId




							VerifyPayablesMonitor.RunGroup			= PrmRunGroup
							VerifyPayablesMonitor.Company 			= Company
							VerifyPayablesMonitor.RunProgram		= RunProgram.InvoiceInterface
							VerifyPayablesMonitor.ProcessGroup		= blank
							VerifyPayablesMonitor.ProcessLevel		= blank
							VerifyPayablesMonitor.AccountStructure	= blank
							VerifyPayablesMonitor.BatchNumber		= blank
							VerifyPayablesMonitor.AuthorityCode		= PrmAuthorityCode
							LocalCheckAPMonitor						= VerifyPayablesMonitor.EndMonitor


				RemitToCode Set Rules
					Entrance Rules
						if (UpdateVendorBalance)
							LocalBalanceCompany			= Company
							LocalBalanceVendorGroup		= Company.VendorGroup
							LocalBalanceVendor			= DerivedVendor
							if ((DerivedPayVendor	entered
							and  DerivedPayVendor	= Vendor)
							or   DerivedPayVendor	!entered)
								LocalBalanceRemitToCode	= RemitToCode
							else
								initialize LocalBalanceRemitToCode
							if (LocalBalanceVendor entered
							and LocalVendorLocationRel exists
							and VendorBalanceRel not exist)
								invoke Create VendorBalanceRel
									invoked.Company				= Company
									invoked.VendorGroup			= LocalBalanceVendorGroup
									invoked.Vendor				= LocalBalanceVendor
									invoked.VendorLocation		= LocalBalanceRemitToCode
									if (Vendor.BalanceCurrency not entered)
										invoked.BalanceCurrency	= Company.Currency
									else
										invoked.BalanceCurrency	= InvoiceCurrency
					Exit Rules
						if (UpdateVendorBalance)
							LocalBalanceCompany		= Company
							LocalBalanceVendorGroup	= Company.VendorGroup
							LocalBalanceVendor		= DerivedVendor
							if ((DerivedPayVendor	entered
								and DerivedPayVendor	= Vendor)
							or   DerivedPayVendor	!entered)
								LocalBalanceRemitToCode		= RemitToCode
							else
								initialize LocalBalanceRemitToCode
							if (LocalBalanceVendor entered
							and LocalVendorLocationRel exists)
								invoke UpdateHistoricalNumberOfPayments VendorBalanceRel
									invoked.PrmNumberOfPayments.NbrOfPayments[1]	= Period1NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[2]	= Period2NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[3]	= Period3NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[4]	= Period4NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[5]	= Period5NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[6]	= Period6NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[7]	= Period7NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[8]	= Period8NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[9]	= Period9NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[10]	= Period10NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[11]	= Period11NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[12]	= Period12NumberOfPayments
									invoked.PrmNumberOfPayments.NbrOfPayments[13]	= Period13NumberOfPayments

				TransactionNumber Set Rules
					Entrance Rules
						LocalPaymentNumberHasError	= false

					Exit Rules
						if (UpdateVendorBalance
						and !LocalPaymentNumberHasError)
							if (CheckDate > LastYearEndingDate)
								if (CheckDate <= Company.VendorGroup.PeriodEndingDates.PeriodEndingDate[1])
									LocalBalancePeriod	= 1
								else
									LocalCurrentPeriod = 1
									while (LocalCurrentPeriod 	<= 12
									and    LocalBalancePeriod	!entered)
										if (Company.VendorGroup.PeriodEndingDates.PeriodEndingDate[LocalCurrentPeriod] >= CheckDate)
											LocalBalancePeriod	= LocalCurrentPeriod
										else
											LocalCurrentPeriod += 1
								if (LocalBalancePeriod !entered)
									LocalBalancePeriod	= 13

								if (LocalBalancePeriod	= 1)
									Period1NumberOfPayments		+= 1
								if (LocalBalancePeriod	= 2)
									Period2NumberOfPayments		+= 1
								if (LocalBalancePeriod	= 3)
									Period3NumberOfPayments		+= 1
								if (LocalBalancePeriod	= 4)
									Period4NumberOfPayments		+= 1
								if (LocalBalancePeriod	= 5)
									Period5NumberOfPayments		+= 1
								if (LocalBalancePeriod	= 6)
									Period6NumberOfPayments		+= 1
								if (LocalBalancePeriod	= 7)
									Period7NumberOfPayments		+= 1
								if (LocalBalancePeriod	= 8)
									Period8NumberOfPayments		+= 1
								if (LocalBalancePeriod	= 9)
									Period9NumberOfPayments		+= 1
								if (LocalBalancePeriod	= 10)
									Period10NumberOfPayments	+= 1
								if (LocalBalancePeriod	= 11)
									Period11NumberOfPayments	+= 1
								if (LocalBalancePeriod	= 12)
									Period12NumberOfPayments	+= 1
								if (LocalBalancePeriod	= 13)
									Period13NumberOfPayments	+= 1

				Instance Rules

					if (CommitNow)
						commit transaction
						CommitNow = false

					if (!SkipCompany)
						if ((IncludeInvoicesInError
							or !RecordInError)
						and (PrmStatus not entered
							or PrmStatus = Status))

							ErrorOccurred						= false
							InterfaceRun						= LocalInterfaceResultView.PayablesInvoiceInterfaceResult
							
							LocalRunGroupHasPayments			= RunGroupHasPayments
							LocalRunGroupHasDistributions		= RunGroupHasDistributions
							LocalRunGroupHasComments			= RunGroupHasComments
							LocalUpdateTaxSystem				= UpdateTaxSystem
							LocalUpdateVendorBalance			= UpdateVendorBalance
							LocalLastYearEndingDate				= LastYearEndingDate
							LocalMoveErrorsToNewRunGroup		= PrmMoveErrorsToNewRunGroup
							LocalPayablesInvoiceInterfaceResult	= LocalInterfaceResultView.PayablesInvoiceInterfaceResult
							LocalPerformBalanceEdits			= PerformBalanceEdits
	
							if (PrmJournalizeDistributions
							and PayablesInvoice entered)
								invoke UpdateJournalizeGroup PayablesInvoice
									invoked.PrmJournalizeGroup	= GLTJournalizeGroup
							
							include InterfaceThisInvoice

							if (!ErrorOccurred)
								LocalInterfacedInvoiceCountTotal	+= 1
								LocalInterfacedInvoiceAmountTotal	+= InvoiceAmount
							else
								LocalInterfaceInvoiceErrorCount		+= 1


							LocalInstanceCount += 1

		Create is a Create Action
			Action Rules

		CreateBypassFieldRules is a Create Action	
			restricted
			bypass field rules

		CreateGEMSInvoices is a Create Action
			restricted
			bypass field rules

		Update is an Update Action
			Action Rules
				if (SecondaryKeyFields changed)
					invoke FastUpdate OldPayablesInvoicePaymentImportRel
						invoked.RunGroup	= RunGroup
						invoked.Company		= Company
						invoked.Vendor		= Vendor
						invoked.OldVendor	= OldVendor
						invoked.EDINumber	= EDINumber
						invoked.Invoice		= Invoice
						invoked.Suffix		= Suffix
					invoke FastUpdate OldPayablesInvoiceDistributionImportRel
						invoked.RunGroup	= RunGroup
						invoked.Company		= Company
						invoked.Vendor		= Vendor
						invoked.OldVendor	= OldVendor
						invoked.EDINumber	= EDINumber
						invoked.Invoice		= Invoice
						invoked.Suffix		= Suffix
					invoke FastUpdate OldPayablesInvoiceImportCommentRel
						invoked.RunGroup	= RunGroup
						invoked.Company		= Company
						invoked.Vendor		= Vendor
						invoked.OldVendor	= OldVendor
						invoked.EDINumber	= EDINumber
						invoked.Invoice		= Invoice
						invoked.Suffix		= Suffix

		FastUpdate is an Update Action
			restricted
			bypass field rules

		Delete is a Delete Action
			Entrance Rules
				if (PayablesInvoice entered)
					confirmation required
						"InvoiceIsPartiallyInterfacedAndThoseRecordsWillAlsoBeDeleted"
					if (PayablesInvoice.Status.Historical)
						invoke Historical.Delete PayablesInvoice
					else
						invoke Unreleased.Delete PayablesInvoice

				invoke FastDelete PayablesInvoicePaymentImportRel
				invoke FastDelete PayablesInvoiceImportCommentRel
				invoke FastDelete PayablesInvoiceImportError set
				invoke FastDelete PayablesInvoiceDistributionImportRel

		FastDelete is a Delete Action
			restricted
			bypass relational integrity rules

		DeleteAllTransactionsForRunGroup is a Set Action
			default label is "DeleteAllTransactions_forRunGroup"
			confirmation required

			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup					is AlphaUpper 30
					default label is "RunGroup"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup

				PrmRunGroup
					LocalRunProgram		= LocalRunProgram.InvoiceInterface
					LocalRunGroup		= PrmRunGroup
					constraint (!ActiveMonitorForRunGroupRel exists)
						"InvoiceInterfaceIsAlreadyRunningForThisRunGroup"

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and    GeneralLedgerCompanyRel.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    PayablesInvoice not entered)

			Action Rules

				Instance Rules
					invoke FastDelete PayablesInvoicePaymentImportRel
					invoke FastDelete PayablesInvoiceImportCommentRel
					invoke FastDelete PayablesInvoiceImportError set

					initialize Idx
					for each PayablesInvoiceDistributionImportRel
						Idx += 1
						if (Idx > 20)
						    end for each

					if (Idx > 20)
						invoke DeleteSet PayablesInvoiceDistributionImport
							invoked.PrmCompany		= Company
							invoked.PrmVendor		= Vendor
							invoked.PrmOldVendor	= OldVendor
							invoked.PrmEDINumber	= EDINumber
							invoked.PrmInvoice		= Invoice
							invoked.PrmSuffix		= Suffix
					else
						invoke FastDelete PayablesInvoiceDistributionImportRel

					invoke FastDelete


		AcknowledgeForFailureAPInvoiceCSVRunGroupBOD is an Instance Action
			restricted
			default label is untranslatable
			Parameters
				PrmRunGroup					is AlphaUpper 30
					default label is "RunGroup"
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup" 
			Parameter Rules
				PrmRunGroup
					LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
					LocalRunGroup				= PrmRunGroup
			Action Rules
				if(SenderComponentID entered and SenderLogicalID entered and SenderOriginalBOD = "CSV" )
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger)
						trigger PayablesService.APInvoiceCSVService PA service
							resume on error
							title is "EG:<GeneralLedgerCompanyRel.FinanceEnterpriseGroup>RunGroup:<PayablesInvoiceImport.RunGroup>"
							Criteria
								GeneralLedgerCompanyRel.FinanceEnterpriseGroup     
							Variables
								include persistent fields from ErrorsInRunGroupRel
								GeneralLedgerCompanyRel.FinanceEnterpriseGroup
										variable name is FinanceEnterpriseGroup

		DeleteAllTransactionsForRunGroupCSVBOD is a Set Action
			restricted
			Parameters
				PrmRunGroup is AlphaUpper 30
					default label is "RunGroup"
			Parameter Rules

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and    GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup
				and    SenderComponentID != "Payroll"
				and	   SenderLogicalID entered)
			Action Rules

				Instance Rules
					if(SenderComponentID != "Payroll")
						if  (PayablesInvoice entered)
							invoke Unreleased.Delete PayablesInvoice
						invoke FastDelete PayablesInvoicePaymentImportRel
						invoke FastDelete PayablesInvoiceImportCommentRel
						invoke FastDelete PayablesInvoiceImportError set
						invoke DeleteSet PayablesInvoiceDistributionImport
							invoked.PrmCompany		= Company
							invoked.PrmVendor		= Vendor
							invoked.PrmOldVendor	= OldVendor
							invoked.PrmEDINumber	= EDINumber
							invoked.PrmInvoice		= Invoice
							invoked.PrmSuffix		= Suffix
						invoke FastDelete

		DeleteAllTransactionsForRunGroupBOD is a Set Action
			restricted
			Parameters
				PrmRunGroup				  is AlphaUpper 30
					default label is "RunGroup"
			Parameter Rules
				
			Instance Selection
				where (RunGroup	= PrmRunGroup
				and    GeneralLedgerCompanyRel.FinanceEnterpriseGroup    = actor.context.FinanceEnterpriseGroup
				and    SenderComponentID != "Payroll"
				and	   SenderLogicalID entered)
			Action Rules
			
				Instance Rules
					if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger)
		            	if(SenderLogicalID entered or SenderComponentID entered or SenderBODID entered)
		                	trigger PayablesService.PayablesInvoiceImportService PA service
		                    	resume on error
		                        title is "EG:<GeneralLedgerCompanyRel.FinanceEnterpriseGroup>CO:<Company>PII:<PayablesInvoiceImport>"
		                        Criteria
		                        	GeneralLedgerCompanyRel.FinanceEnterpriseGroup      
		                            Company      
		                        Variables
		                        	include persistent fields from PayablesInvoiceImport
		                            GeneralLedgerCompanyRel.FinanceEnterpriseGroup
		                            	variable name is FinanceEnterpriseGroup


						
					if(SenderComponentID != "Payroll")
						if (PayablesInvoice entered)
							invoke Unreleased.Delete PayablesInvoice
						invoke FastDelete PayablesInvoicePaymentImportRel
						invoke FastDelete PayablesInvoiceImportCommentRel
						invoke FastDelete PayablesInvoiceImportError set
						invoke DeleteSet PayablesInvoiceDistributionImport
							invoked.PrmCompany		= Company
							invoked.PrmVendor		= Vendor
							invoked.PrmOldVendor	= OldVendor
							invoked.PrmEDINumber	= EDINumber
							invoked.PrmInvoice		= Invoice
							invoked.PrmSuffix		= Suffix
						invoke FastDelete

		ResetErrorMessage is an Instance Action
			Action Rules
				initialize ErrorMessage
				RecordInError = false

		SetError is an Instance Action
			restricted
			Parameters
				PrmErrorMessage		is Alpha 150
				PrmErrorRunGroup	is like RunGroup
			Action Rules

				RecordInError					= true
				ErrorMessage					= PrmErrorMessage
				if (PrmErrorRunGroup entered)
					RunGroup			= PrmErrorRunGroup

				invoke Update InterfaceRun
					invoked.Status = 2

		Edit is an Instance Action
			Action Rules
				initialize ErrorOccurred
				RecordInError = false
				initialize ErrorMessage
				include InterfaceEdits
				if (ErrorOccurred)
					RecordInError	= true
					ErrorMessage	= LocalErrorMessage

		UpdateInterfaceAnalysisDetails is a Set Action
			restricted
			Parameters
				PrmInterfaceAnalysis is like InterfaceAnalysis
			Local Fields
				LocalDateRange			is a DateRange
			Instance Selection
				where (InvoiceAmount entered)
			Action Rules
				Instance Rules
					LocalInterfaceAnalysis		= PrmInterfaceAnalysis
					if (InterfaceAnalysisDetailRel exists)
						invoke UpdateInterfaceAnalysisDetails InterfaceAnalysisDetailRel
							invoked.PrmPayablesInterfaceTotal	= InvoiceAmount
					else
						LocalDateRange.Begin	= InvoiceDate - InvoiceDate day + 1
						LocalDateRange.End		= LocalDateRange.Begin + 1 month - 1 day

						invoke Create InterfaceAnalysisDetail
							resume on error
							invoked.InterfaceAnalysis		= LocalInterfaceAnalysis
							invoked.PayablesCompany			= Company
							invoked.Vendor					= DerivedVendor
							invoked.Currency				= InvoiceCurrency
							invoked.MonthYear				= LocalDateRange
							invoked.PayablesInterfaceTotal	= InvoiceAmount
							invoked.InterfaceTotal			= InvoiceAmount
							
		Import is an Import Action
			restricted
			Parameters
				InputData is CSVText
			Action Rules
				dbimport InputData into PayablesInvoiceImport


		MultiThreadInterfaceInvoices is a Set Action			
		    default label is "MultiThreadInterfacePayablesInvoices"		
			valid when (IsConfigMultiThread)
			run in background
			Queue Mapping Fields				
				PrmFinanceEnterpriseGroup
				PrmRunGroup

			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmRunGroup					is AlphaUpper size 26
					default label is "RunGroup"
				PrmCompany					is a PayablesCompany
				PrmAuthorityCode			is a PayablesAuthorityCode
				PrmStatus					is Alpha size 1
					States
						Unreleased	value is 0
						Open		value is 1
						History		value is 9
				UpdateTaxSystem				is Boolean
				UpdateVendorBalance			is Boolean
				LastYearEndingDate			is Date
				IncludeInvoicesInError		is Boolean
				PrmMoveErrorsToNewRunGroup	is Boolean
					default label is "MoveErrorsToNewRunGroup"
				PrmErrorRunGroupPrefix		is AlphaUpper 15
					default label is "ErrorRunGroupPrefix"
				PerformBalanceEdits			is Boolean
				PrmJournalizeDistributions	is Boolean
					default label is "JournalizeReleasedDistributions"
				PrmThreads 					is Numeric 3
					default label is "NumberOfThreads"
				KeepOriginalRunGroup		is Boolean		

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup

				PrmRunGroup
					required
						"RunGroupIsRequired"
					LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
					LocalRunGroup				= PrmRunGroup
					LocalActionName				= "MultiThreadInterfaceInvoices"
					
					if (config.PIIParmUseIntResult = true)		
						for each InterfaceResultInProcessRel
							if (PrmCompany not entered
							or  each.Company not entered
							or  PrmCompany = each.Company)
								Diff = (current timestamp - each.RunTime)
								constraint (Diff > 86400)
									"ExistingJobForThisRunGroup<LocalRunGroup>IsAlreadyInProcess"
					else
						constraint (AsyncActionRequestRel not exist)	
							"ExistingInterfaceForRunGroup<LocalRunGroup>IsAlreadyInProcess"

				PrmCompany
					if (PrmAuthorityCode entered)
						required
							"CompanyIsRequiredIfAuthorityCodeEntered"

				UpdateTaxSystem
					initial value is true

				UpdateVendorBalance
					initial value is true

				LastYearEndingDate
					if (UpdateVendorBalance)
						required
							"LastYearEndingDateRequiredIfUpdateVendorBalanceSetToTrue"

				PerformBalanceEdits
					initial value is true

				PrmJournalizeDistributions
					LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
					constraint (!GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
						"JournalizeDistributionsNotAllowedWhenBudgetingSetToTrackAndEdit"

				PrmThreads
					initial value is config.PIIThreads 
					default to config.PIIThreads
					constraint (PrmThreads > 1)
						"NumberOfProcessingThreadsMustBeGreaterThan1.Recommend:_GreaterThan10."
					required

				KeepOriginalRunGroup
					initial value is true	


			Local Fields
				LocalThread							is Numeric size 3
				LocalThreadCounter					is Numeric size 5
				LocalRunGroupSize					is Numeric size 5
				LocalNewRunGroup					is a RunGroup
				LocalInstanceCount					is Numeric size 10
				LocalFullSetSize					is Numeric size 10
				LocalRunWithOrigRunGroup			is Boolean
				LocalInterfaceResultView			is a PayablesInvoiceInterfaceResult view
				LocalMTPIIResultView				is a PayablesInvoiceInterfaceResult view
				RunGroupHasPayments					is Boolean
				RunGroupHasDistributions			is Boolean
				RunGroupHasComments					is Boolean
				LocalBudgetsEnabled					is Boolean
				LocalErrorRunGroup					is a RunGroup
				SkipCompany							is Boolean
				GLTJournalizeGroup					is like JournalizeGroup
				LocalAsyncId 						is an AsyncActionRequest
				CommitNow							is Boolean
				LocalPaymentNumberHasError			is Boolean
				LocalInterfacedInvoiceCountTotal	is Numeric 10
				LocalInterfacedInvoiceAmountTotal	is an InternationalAmount
				LocalInterfacedDistributionsCount 	is Numeric 10
				LocalInterfaceInvoiceErrorCount		is Numeric 10
				LocalInterfacedPaymentsAmountTotal	is an InternationalAmount
				LocalInterfacedPaymentsCount		is Numeric 10
				LocalInterfacePaymentErrorCount		is Numeric 10
				LocalInterfacedCommentsCount		is Numeric 10
				LocalInterfaceCommentErrorCount		is Numeric 10

			Instance Selection
				where (RunGroup = PrmRunGroup
				and	  (PrmCompany not entered
					or (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
					and Company = PrmCompany))
				and   (PrmAuthorityCode	not entered
					or AuthorityCode	= PrmAuthorityCode))

			Sort Order
				RunGroup
				Company
				Vendor
				RemitToCode
				CashCode
				BankTransactionCode
				TransactionNumber
				CheckDate

			Action Rules
				Empty Set Rules

					invoke Create PayablesInvoiceInterfaceResult
						invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoked.RunTime						= current timestamp
						invoked.RunGroup					= PrmRunGroup
						invoked.RunType						= 1
						invoked.Company						= PrmCompany
						invoked.AuthorityCode				= PrmAuthorityCode
				        invoked.PrmStatus					= PrmStatus
						invoked.UpdateTaxSystem				= UpdateTaxSystem
						invoked.UpdateVendorBalance			= UpdateVendorBalance
						invoked.LastYearEndingDate			= LastYearEndingDate
						invoked.MoveErrorsToNewRunGroup		= PrmMoveErrorsToNewRunGroup
						invoked.ErrorRunGroupPrefix			= PrmErrorRunGroupPrefix
						invoked.JournalizeDistributions		= PrmJournalizeDistributions
						invoked.IncludeInvoicesInError		= IncludeInvoicesInError
						invoked.Status						= 1 
						invoked.PerformBalanceEdits			= PerformBalanceEdits
						if(PrmAuthorityCode entered)						
							invoked.VendorGroup				= PrmCompany.VendorGroup
						invoked.KeepOriginalRunGroup		= KeepOriginalRunGroup		
					LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track 
					or  GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit) 
						invoke ProcessInterfaceBatchEdits BudgetEditBatch
							invoked.PrmFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup 
							invoked.PrmBusinessClassName 		= "PayablesInvoice" 

				RunGroup Set Rules
					Entrance Rules

						LocalRunGroup					= PrmRunGroup
						LocalFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						LocalCompany					= PrmCompany
						LocalAuthorityCode				= PrmAuthorityCode
						LocalFullSetSize				= instance count of RunGroupCompanyAuthCodeRel
						

						if (LocalFullSetSize > 1000)
							LocalRunGroupSize			= ((LocalFullSetSize / PrmThreads) + 1)		

							LocalThread			= 1
							LocalNewRunGroup 	= PrmRunGroup + "-" + LocalThread
						else
							LocalRunGroupSize 			= LocalFullSetSize
							LocalRunWithOrigRunGroup	= true
							LocalNewRunGroup			= PrmRunGroup

						initialize LocalThreadCounter
						
						if (!LocalRunWithOrigRunGroup)		
							invoke Create PayablesInvoiceInterfaceResult
								assign result to LocalMTPIIResultView	
								invoked.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
								invoked.RunTime					= current timestamp
								invoked.RunGroup				= PrmRunGroup
								invoked.RunType					= 1
								invoked.Company					= PrmCompany
								invoked.AuthorityCode			= PrmAuthorityCode
								invoked.PrmStatus				= 0		
								invoked.UpdateTaxSystem			= UpdateTaxSystem
								invoked.UpdateVendorBalance		= UpdateVendorBalance
								invoked.LastYearEndingDate		= LastYearEndingDate
								invoked.MoveErrorsToNewRunGroup	= PrmMoveErrorsToNewRunGroup
								invoked.ErrorRunGroupPrefix		= PrmErrorRunGroupPrefix
								invoked.JournalizeDistributions	= PrmJournalizeDistributions
								invoked.IncludeInvoicesInError	= IncludeInvoicesInError
								invoked.PerformBalanceEdits		= PerformBalanceEdits
								invoked.JournalizeGroup			= GLTJournalizeGroup
								if(PrmAuthorityCode entered)					
									invoked.VendorGroup			= PrmCompany.VendorGroup
								invoked.KeepOriginalRunGroup	= KeepOriginalRunGroup		

					Exit Rules
						if (LocalThreadCounter != 0	
						or  LocalRunWithOrigRunGroup)
							invoke InterfaceInvoices PayablesInvoiceImport
								run after BGSubgroup		
								invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
								invoked.PrmRunGroup					= LocalNewRunGroup
								invoked.PrmCompany					= PrmCompany
								invoked.PrmAuthorityCode			= PrmAuthorityCode
								invoked.PrmStatus					= PrmStatus
								invoked.UpdateTaxSystem				= UpdateTaxSystem
								invoked.UpdateVendorBalance 		= UpdateVendorBalance
								invoked.LastYearEndingDate			= LastYearEndingDate
								invoked.IncludeInvoicesInError		= IncludeInvoicesInError
								invoked.PrmMoveErrorsToNewRunGroup	= PrmMoveErrorsToNewRunGroup
								invoked.PrmErrorRunGroupPrefix		= PrmErrorRunGroupPrefix
								invoked.PerformBalanceEdits			= PerformBalanceEdits
								invoked.PrmJournalizeDistributions	= PrmJournalizeDistributions
								if  (KeepOriginalRunGroup			
								and !LocalRunWithOrigRunGroup)		
									invoked.PrmOriginalMTIntResult	= LocalMTPIIResultView.PayablesInvoiceInterfaceResult
									invoked.KeepOriginalRunGroup	= KeepOriginalRunGroup		

						if (!LocalRunWithOrigRunGroup)
							invoke Update LocalMTPIIResultView.PayablesInvoiceInterfaceResult
								invoked.RecordsProcessed					= LocalInstanceCount
								invoked.InterfacedInvoicesAmountTotal		= LocalInterfacedInvoiceAmountTotal
								invoked.InterfacedInvoicesCount				= LocalInterfacedInvoiceCountTotal
								invoked.InterfaceInvoiceErrorCount			= LocalInterfaceInvoiceErrorCount
								invoked.InterfacedDistributionsCount		= LocalInterfacedDistributionsCount
								invoked.InterfacedPaymentsCount				= LocalInterfacedPaymentsCount
								invoked.InterfacedCommentsCount				= LocalInterfacedCommentsCount

							VerifyResultPayablesMonitor.RunGroup			= PrmRunGroup
							VerifyResultPayablesMonitor.Company 			= blank
							VerifyResultPayablesMonitor.RunProgram			= RunProgram.InvoiceInterface
							VerifyResultPayablesMonitor.ProcessGroup		= blank
							VerifyResultPayablesMonitor.ProcessLevel		= blank
							VerifyResultPayablesMonitor.AccountStructure	= blank
							VerifyResultPayablesMonitor.BatchNumber			= blank
							VerifyResultPayablesMonitor.AuthorityCode		= PrmAuthorityCode
							LocalCheckAPMonitor								= VerifyResultPayablesMonitor.CallVerifyInvoiceInterfacePayablesMonitor
							if (VerifyResultPayablesMonitor.NoErrors)
								invoke UpdateStatus LocalMTPIIResultView.PayablesInvoiceInterfaceResult
					
				Instance Rules



					if (!LocalRunWithOrigRunGroup)
						if (PayablesInvoiceDistributionImportRel exists)
							LocalInterfacedDistributionsCount += instance count of PayablesInvoiceDistributionImportRel
							if (instance count of PayablesInvoiceDistributionImportRel > 50)
								invoke SetNewRunGroup PayablesInvoiceDistributionImport
									assign async action request id to BGSubgroup
									invoked.PrmRunGroup		= RunGroup
									invoked.PrmCompany		= Company
									invoked.PrmVendor		= Vendor
									invoked.PrmOldVendor	= OldVendor
									invoked.PrmEDINumber	= EDINumber
									invoked.PrmInvoice		= Invoice
									invoked.PrmSuffix		= Suffix
									invoked.PrmNewRunGroup	= LocalNewRunGroup
							else
								invoke FastUpdate PayablesInvoiceDistributionImportRel
									invoked.RunGroup	= LocalNewRunGroup

						if (PayablesInvoicePaymentImportRel exists)
							LocalInterfacedPaymentsCount += instance count of PayablesInvoicePaymentImportRel
							invoke FastUpdate PayablesInvoicePaymentImportRel
								invoked.RunGroup	= LocalNewRunGroup

						if (PayablesInvoiceImportCommentRel exists)
							LocalInterfacedCommentsCount += instance count of PayablesInvoiceImportCommentRel
							invoke FastUpdate PayablesInvoiceImportCommentRel
								invoked.RunGroup 	= LocalNewRunGroup
						
						RunGroup	= LocalNewRunGroup
						increment LocalThreadCounter

						LocalInstanceCount					+=	1
						LocalInterfacedInvoiceCountTotal	+=	1
						LocalInterfacedInvoiceAmountTotal	+=	InvoiceAmount

					if (LocalThreadCounter = LocalRunGroupSize
					and !LocalRunWithOrigRunGroup)
						invoke InterfaceInvoices PayablesInvoiceImport
							run after BGSubgroup			
							invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							invoked.PrmRunGroup					= LocalNewRunGroup
							invoked.PrmCompany					= PrmCompany
							invoked.PrmAuthorityCode			= PrmAuthorityCode
							invoked.PrmStatus					= PrmStatus
							invoked.UpdateTaxSystem				= UpdateTaxSystem
							invoked.UpdateVendorBalance 		= UpdateVendorBalance
							invoked.LastYearEndingDate			= LastYearEndingDate
							invoked.IncludeInvoicesInError		= IncludeInvoicesInError
							invoked.PrmMoveErrorsToNewRunGroup	= PrmMoveErrorsToNewRunGroup
							invoked.PrmErrorRunGroupPrefix		= PrmErrorRunGroupPrefix
							invoked.PerformBalanceEdits			= PerformBalanceEdits
							invoked.PrmJournalizeDistributions	= PrmJournalizeDistributions
							if  (KeepOriginalRunGroup			
							and !LocalRunWithOrigRunGroup)		
								invoked.PrmOriginalMTIntResult	= LocalMTPIIResultView.PayablesInvoiceInterfaceResult
								invoked.KeepOriginalRunGroup	= KeepOriginalRunGroup		
						
						initialize	LocalThreadCounter
						increment 	LocalThread
						LocalNewRunGroup 	= PrmRunGroup + "-" + LocalThread

