PayablesInvoiceAddOnCharge is a BusinessClass






    owned by ma
    prefix is MAA
    classic name is MAAOCDTL

    Ontology
        symbolic key is PayablesInvoiceAddOnCharge
            classic set name is MAASET0
            classic name is SEQ-NBR

            classic name for PurchaseOrderLine is LINE-NBR
            classic name for AddOnCharge is AOC-CODE

    Patterns
        implements StaticJava
        disable AuditIndex
        implements Archivable

    Persistent Fields
    	Vendor
		Invoice									is a snapshot of PayablesInvoice.Invoice
		Suffix									is a snapshot of PayablesInvoice.Suffix
		CancelSequence							is a snapshot of PayablesInvoice.CancelSequence
        MatchDetailKey
            classic name is MATCH-DTL-KEY
        PurchaseFromLocation					is a VendorLocation
            classic name is PURCH-FR-LOC
        Location                    is an InventoryLocation
        AddOnChargePercent
            classic name is AOC-RATE


        PurchaseOrderReceipt
            classic name is MA-REC-NBR
        PurchaseOrderReceiptLine    is like PurchaseOrderReceiptLine
            classic name is MA-LINE-NBR
        MatchSequence
            classic name is MATCH-SEQ-NBR
        InvoiceType					is a PayablesInvoiceType
        InvoiceVendor				is like Vendor
        MatchObjectID               is an ObjId
            classic name is MATCH-OBJ-ID
        Currency					is a FromCurrency
            classic name is CURRENCY-CODE
        EnteredUnitCost             is an InternationalCost
            classic name is ENT-UNIT-CST
            precision is DerivedNumberOfDecimalsCost
        MatchUnitCost               is an InternationalCost
            classic name is MATCH-UNIT-CST
            precision is DerivedNumberOfDecimalsCost
        TotalAddOnChargeAmount      is an InternationalAmount
            classic name is TOTAL-AOC
        TaxCode
        Taxable                     is Boolean
            classic name is TAXABLE-FLAG
        TaxAmount                   is an InternationalAmount
        TaxUsageCode
            classic name is TAX-USAGE-CD
        PrintOnPO                   is Boolean
            classic name is AOC-ON-PO
        LandedAddOnCharge           is Boolean
            classic name is LANDED-FLAG
        Summarize                   is Boolean
            classic name is SUMMARY-FLAG
        ZeroCost                    is Boolean
            classic name is ZERO-COST-FLG
        Canceled                    is Boolean
            classic name is CANCELLED-FL
        Closed
            classic name is CLOSED-FL
        CreatedDuringSpread
            classic name is INV-SPRD-CRET
        Issued                      is Boolean
            classic name is ISSUED-FLAG
        InvoicedTaxAmount           is an InternationalAmount
            classic name is INVC-TAX-AMT
        AccruedTaxAmount            is an InternationalAmount
            classic name is ACCR-TAX-AMT
        TotalTaxAmount              is an InternationalAmount
            classic name is EXT-TAX-AMT
        LandedUnitCost              is an InternationalCost
            classic name is LAND-UNIT-CST
            precision is DerivedNumberOfDecimalsCost
        AocAlpha
        AocNum
        AddOnChargeAmount           is an InternationalAmount
            classic name is AOC-AMT
        CrossReferenceVendor
            classic name is XREF-VENDOR
        ReasonCode                  is a ProcurementReasonCode


        IrDiffAmt                   is an InternationalAmount
        EnteredQuantity             is a Quantity
            classic name is ENTERED-QTY
            precision is DerivedNumberOfDecimalsQuantity
        MatchedQuantity             is a Quantity
            classic name is MATCHED-QTY
            precision is DerivedNumberOfDecimalsQuantity
        DueDate
        TotalDistributionAmount     is an InternationalAmount
            precision is PayablesInvoice.InvoiceCurrency.NumberOfDecimals
            classic name is TOT-DIST-AMT
        TotalBaseAmount             is an InternationalAmount
        	default label is "TotalFunctionalAmount"
            classic name is TOT-BASE-AMT
        Status                      is Numeric size 1
        DistributionDate            is Date
            classic name is DISTRIB-DATE
        UpdateDate                  is TimeStamp
        RecordSource                is a RecSource
            classic name is REC-SOURCE
        TransactionNumberOfDecimals is an AcctNd
            classic name is TRAN-ND
        InvoiceLineTaxable          is Boolean
            classic name is NO-TAX-FLAG
        TaxType                     is AlphaUpper size 1
        Item
        ItemType
        BaseCurrencyConversionRate  is an AcctRate
            classic name is ORIG-CNV-RATE
        RetainagePercent            is a Pct
            classic name is RET-PCT
        ProductTaxCategory
            classic name is PROD-TAX-CAT
        TrackType
			protected
        GlobalLineType
            classic name is GLBL-LINE-TYPE
        MiscellaneousAccount					is a FinanceCodeBlock

	Transient Fields
		BypassInvoiceErrorChecking			is Boolean
        BypassBudgetEdit   					is Boolean
        BypassAllowUpdate					is Boolean
		BypassTaxDefault					is Boolean
		TransientCurrencyTable              is a CurrencyTable
		TransientAccountingEntity           is an AccountingEntity  
		TransientExchangeDate               is an ExchangeDate
		TransientPostingDate                is a PostingDate
		TransientCurrencyAmount             is a CurrencyAmount
		ReportCurrencyAmount            	is a FinanceCurrencyAmount
		TransientTaxRate					is a CnvRate
		TransientDifference					is an InternationalAmount
		TransientTaxDifference				is an InternationalAmount
        TaxAdjustAmount                     is an InternationalAmount
		TransientFromCurrency               is a FromCurrency
		TransientDistributionAccount        is a FinanceCodeBlock
		TransientTransactionCodeBlock       is a TransactionCodeBlock
		LocalForceCalculation		  		is Boolean
		TransientReversalUpdateReportCurrencyAmount is a FinanceCurrencyAmount
		
		UserElementGroup

	Context Fields
		MatchInvoiceReference
		InvoiceDateRange			is a DateRange
		PaymentDateRange			is a DateRange2		
		GeneralLedgerCompanyGroup
			
	
	Local Fields
    	LocalAccountingEntity			is an AccountingEntity
		ActionType							is AlphaUpper size 1
			States
				CreateType	value is "C"
				UpdateType	value is "U"
				DeleteType	value is "D"
				InquireType value is "I"
		NewAPDistrib						is a PayablesInvoiceDistribution view
    	LocalCalculateTax				is Alpha 1
		CalculateTax
		LocalTaxTable				is a TaxTableField
		LocalCalculateTaxExecuted	is Alpha 1

		CurrencyExchange
		LocalOriginalInvoiceAddOnCharge is like PayablesInvoiceAddOnCharge
		LocalMaxDecimalsCost		is a NumberOfDecimalsCost
		LocalMaxDecimalsQty			is a NumberOfDecimalsQuantity
		LocalOutputCurrencyAmount	is a CurrencyAmount
		LocalPreviousTaxCode		is a TaxCode
		LocalTaxCode				is a TaxCode
		LocalTaxDone				is Boolean
		LocalMatched				is Boolean
		LocalUnmatched				is Boolean







		LocalUnmatchedQuantity		is like Quantity
		LocalExtendedAmount			is an InternationalAmount


		UOMCalculation


		LocalBaseAmount				is a CurrencyExchange
		LocalFromCurrency			is a FromCurrency

		LocalExchangeDate 			is a ExchangeDate

		RemainingAmount				is like InternationalAmount
		RemainingQuantity			is like Quantity
		LocalWorkAmount				is an InternationalCost
		PercentAccumulated			is like Percent
		QuantityAccumulated			is like Quantity
        OldTotalDistributionAmount  is like CurrencyAmount

		OldEnteredQuantity					is like Quantity
        OldEnteredUnitCost					is like InternationalCost
        OldMatchedQuantity             		is like Quantity
        OldMatchUnitCost               		is an InternationalCost
        OldTaxCode							is a TaxCode
		OldMiscellaneousAccount				is like FinanceCodeBlock 
		POLineCompareAmount 				is like InternationalAmount
		InvoiceLineCompareAmount            is like InternationalAmount
		OldInvoiceLineCompareAmount         is like InternationalAmount

		LocalPassedCommitAmount             is like InternationalAmount
		LocalEncumbranceDate		is Date 

		ProcessingTax				is Boolean
		CalculateTaxHasBeenCalled			is Boolean

		LocalAccruedTaxAmount		is an InternationalCost
		LocalInvoicedTaxAmount		is an InternationalCost
		LocalTaxAmount						is an InternationalCost

		LocalAddOnCharge			is like AddOnCharge
		
		GetRetainage
		LocalGetRetainage					is Alpha 1
		LocalDoRetainageDistribution		is Boolean
		LocalRetainageTaxableAmount			is an InternationalAmount
		LocalRetainageTranAmount			is an InternationalAmount

		LocalQuantityRatio					is like Rate
	    LocalRate 							is Percent size 6.3
								
		WorkDistributionAccount				is like FinanceCodeBlock
		WorkGLTransactionAmount				is an InternationalAmount

		WorkRetainage						is Boolean
		WorkTaxAmount						is an InternationalCost
		LocalPurchaseOrder					is like PurchaseOrder
		LocalPurchaseOrderLine				is like PurchaseOrderLine
		LocalPOLineDistribution				is like PurchaseOrderLineDistribution
		LocalContractLineDistrib			is like ContractLineDistribution
		LocalLastPoDistrib					is like PurchaseOrderLineDistribution 
		I9									is Numeric 3
		


		LocalDistributionAmount				is like InternationalAmount

		LocalCompletionMessage				is Alpha 100
		NextSentence						is Boolean
		CreateFromBatchSwitch				is Boolean

		LocalInvoiceDetailUnitCost			is like UnitCost
		LocalMiscAOC						is like InternationalAmount
		NewMiscellaneousAddOnChargeInvoicedAmount	is like InternationalAmount
		LocalVendorBuyMatchedQuantity		is like Quantity
		LocalVendorPriceMatchedQuantity		is like Quantity
		LocalEffectiveDate					is Date	
		LocalCurrencyAmount					is a CurrencyAmount
		LocalErrorMsg						is Alpha 200
		LocalBODAccountingEntity  			is Alpha 100
		LocalConfigurationParameter			is Alpha size up to 200
		LocalVertexDistributionAccount      is a FinanceCodeBlock
		Idx									is Numeric 3
		LocalInventoryLocation					is like InventoryLocation

		LocalCompany						is like Company
		LocalPayablesInvoice				is like PayablesInvoice
		LocalAutoMatchResult				is like AutoMatchResult

	Rule Blocks
		CreateAndUpdateRules

			constraint (!PayablesInvoice.MatchProcessType.Expense)
				"InvoiceMustBePOTypeOrAOCType"									

			if (!BypassAllowUpdate)
				constraint (AllowUpdate)
					"InvoiceIsNotUpdateable"

			if (AddOnCharge.SpreadMethod.NoSpread
			and PurchaseOrderLine not entered)
				constraint (AddOnCharge.PostingAccount entered)
					"PostingAccountIsRequiredForMiscellaneousAddOnCharge"		




			if (PurchaseOrder entered)
				constraint (MatchPurchaseOrderInvoiceRel exists)
					"PurchaseOrderNotAssociatedWithInvoice"

			if (TaxCode.TaxType.CalculatedRate
			and LocalTaxDone)
				for each PayablesInvoiceDetailWithTaxRel
					invoke FastUpdate each
						initialize invoked.TaxAmount
				for each PayablesInvoiceAddOnChargesWithTaxRel	
					invoke FastUpdate each
						initialize invoked.TaxAmount

			if (PurchaseOrderLine exists)
				Location					= PurchaseOrderLine.ShipToLocation
				RecordSource				= "LM"

			if (POAndLineAOCRel exists
			and !CreditForRebill)
				LandedUnitCost			= POAndLineAOCRel.LandedUnitCost
				LandedAddOnCharge		= POAndLineAOCRel.LandedAddOnCharge
				PrintOnPO				= POAndLineAOCRel.PrintOnPO
				AddOnChargePercent		= POAndLineAOCRel.AddOnChargePercent
				Canceled				= POAndLineAOCRel.Canceled
				CreatedDuringSpread		= POAndLineAOCRel.CreatedDuringSpread
				Issued					= POAndLineAOCRel.Issued
				PurchaseFromLocation	= POAndLineAOCRel.PurchaseFromLocation
				Summarize				= POAndLineAOCRel.Summarize
				Taxable					= POAndLineAOCRel.Taxable
				CrossReferenceVendor	= POAndLineAOCRel.CrossReferenceVendor
				ZeroCost				= POAndLineAOCRel.ZeroCost				
				
				initialize LocalPreviousTaxCode

			if (CreatedDuringSpread not entered)
				include UpdateQuantityAmountAndCost

			
		TaxCodeDefaultingRules		
			if  (ActionType.CreateType
        	and !PayablesInvoice.TaxAdjustment.Calculate
        	and !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC
			and !PayablesInvoice.DoOneSourceAfter
			and !PayablesInvoice.CallVertexByDocument
        	and !TaxEntityRel.ThirdParty.TaxEngine) 
        		if (PayablesInvoice.TaxAdjustment not entered
        		or (PayablesInvoice.TaxCode.TaxType.CalculatedRate
        		and POAndLineAOCRel.InvoicedTaxAmount not entered))
        			CalculateTax.Function				= CalculateTax.Function.Inquire
        			CalculateTax.System					= "AP"
        			CalculateTax.TaxEntity				= Company.AccountingEntity
        			CalculateTax.TaxCode				= PayablesInvoice.TaxCode
        			CalculateTax.TaxDate				= PayablesInvoice.InvoiceDate
        			LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
        			constraint (CalculateTax.OutputErrorMessage not entered)
        				"<CalculateTax.OutputErrorMessage>"
        			LocalTaxCode	= CalculateTax.TaxCode
        	
        	if (PayablesInvoice.TaxAdjustment.Calculate
        	or  PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
        		initialize LocalTaxCode
        	else
        	if (PayablesInvoice.TaxAdjustment.OverrideProductAndAOC)
        		if (CalculateTax.AccruedOrInvoiced.Invoiced
        		or (CalculateTax.TaxType != "C"
        		and LocalTaxCode not entered))
        			LocalTaxCode = PayablesInvoice.TaxCode
        	else
        	if (PayablesInvoice.TaxAdjustment.OverrideTaxablePOAndAOC
        	and POAndLineAOCRel.TaxCode entered)
        		if (CalculateTax.AccruedOrInvoiced.Invoiced
        		or (CalculateTax.TaxType != "C"
        		and LocalTaxCode not entered))
        			LocalTaxCode = PayablesInvoice.TaxCode
	        
	        if (LocalTaxCode entered
			and !PayablesInvoice.DoOneSourceAfter
			and !PayablesInvoice.CallVertexByDocument
	        and !TaxEntityRel.ThirdParty.TaxEngine) 
				CalculateTax.Function				= CalculateTax.Function.Inquire
				CalculateTax.System					= "AP"
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.TaxCode				= LocalTaxCode
				LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
				if (CalculateTax.OutputTotalLandedTaxAmount5DP entered)
					constraint (AddOnCharge.LandedAddOnCharge)
						"CannotApproveNon-\LandedA\O\CWithLandedTax"	
        		TaxCode = LocalTaxCode

			if  (TaxCode.TaxType.CalculatedRate
			and  TaxCode != PayablesInvoice.TaxCode)
   				constraint (CalculateTax.AccruedOrInvoiced.Invoiced)
   					"OnlyAccruedTaxesCanBeCombinedWithACalculatedTaxRate"	

		UpdateQuantityAmountAndCost

	        MatchUnitCost				= EnteredUnitCost
	        MatchedQuantity				= EnteredQuantity
			TotalDistributionAmount 	= DerivedDistributionAmount
	        TotalBaseAmount				= DerivedBaseAmount
	        TotalAddOnChargeAmount		= TotalDistributionAmount
	        AddOnChargeAmount			= TotalDistributionAmount


		MiscellaneousUpdate

			if (PayablesInvoice.MatchProcessType.AOCOnly)
				NextSentence = true 
			else 
			if (!PayablesInvoice.InvoiceType.CreditMemo)			
				if (AddOnCharge.AddOnChargeType.Allowance)
					if  (TotalDistributionAmount > 0)
						TotalDistributionAmount *= -1
			else
				if (AddOnCharge.AddOnChargeType.Allowance)
					if  (TotalDistributionAmount < 0)
						TotalDistributionAmount *= -1
				else
					if  (TotalDistributionAmount > 0)
						TotalDistributionAmount *= -1
							
			MatchUnitCost 				= TotalDistributionAmount
			EnteredUnitCost 			= TotalDistributionAmount
			TotalAddOnChargeAmount 		= TotalDistributionAmount
			AddOnChargeAmount 			= TotalDistributionAmount

		PopulateCalculateTaxInputFields

			CalculateTax.TaxEntity 								= Company.AccountingEntity
			CalculateTax.CallingModule							= "Payables_Invoice"
			CalculateTax.System									= "AP"
			CalculateTax.Invoice 								= PayablesInvoice.Invoice

			CalculateTax.TaxCode 								= TaxCode
			CalculateTax.ProductTaxCategory						= ProductTaxCategory
			CalculateTax.TransactionCurrency					= PayablesInvoice.InvoiceCurrency
			CalculateTax.BaseCurrency							= Company.Currency
			CalculateTax.Location								= Location
			if (EnteredQuantity entered)
				CalculateTax.Quantity							= EnteredQuantity
			else 
				CalculateTax.Quantity							= 1 
			if (PurchaseOrder.DropshipAddress entered)
				CalculateTax.PostalAddress						= PurchaseOrder.DropshipAddress
			else
				CalculateTax.PostalAddress						= InventoryLocationRel.PostalAddress
			if  (PayablesInvoice.VendorLocationRel exists)
				CalculateTax.FromPostalAddress					= PayablesInvoice.VendorLocationRel.CurrentAddressRel.PostalAddress
			else
				CalculateTax.FromPostalAddress					= Vendor.first VendorLocationRel.CurrentAddressRel.PostalAddress

			CalculateTax.InvoiceDate							= PayablesInvoice.InvoiceDate
			CalculateTax.PaymentDate 							= PayablesInvoice.InvoiceDate
			CalculateTax.GeneralLedgerDate 						= PayablesInvoice.InvoiceDate
			CalculateTax.TaxDate								= PayablesInvoice.InvoiceDate

			if (PayablesInvoice.TaxEntityUsesVertex)
				CalculateTax.VertexQuantumOption					= "C"	

			if  (PayablesInvoice.TaxEntityUsesThirdPartyTax)
				CalculateTax.InputReturnVertexTaxIn				= "D"	

			    CalculateTax.VATRegistrationCountry    	 			= TaxEntityRel.VATRegistrationCountry 			
			    CalculateTax.VATRegistrationNumber					= TaxEntityRel.VATRegistrationNumber			
				if (PayablesInvoice.PurchaseFromLocation entered)
					CalculateTax.FromPostalAddress					= PayablesInvoice.PurchaseFromLocation.VendorAddress 
			    	CalculateTax.FromVATRegistrationCountry 		= PayablesInvoice.PurchaseFromLocation.VATRegistrationCountry			
			    	CalculateTax.FromVATRegistrationNumber			= PayablesInvoice.PurchaseFromLocation.VATRegistrationNumber				
					CalculateTax.FromTaxCode						= PayablesInvoice.PurchaseFromLocation.TaxCode
				else
				if (PurchaseOrder.PurchaseFromLocation entered)
					CalculateTax.FromPostalAddress					= PurchaseOrder.PurchaseFromLocation.VendorAddress 
			    	CalculateTax.FromVATRegistrationCountry 		= PurchaseOrder.PurchaseFromLocation.VATRegistrationCountry			
			    	CalculateTax.FromVATRegistrationNumber			= PurchaseOrder.PurchaseFromLocation.VATRegistrationNumber				
					CalculateTax.FromTaxCode						= PurchaseOrder.PurchaseFromLocation.TaxCode
				else
					CalculateTax.FromPostalAddress					= Vendor.VendorAddress		
			    	CalculateTax.FromVATRegistrationCountry 		= Vendor.VATRegistrationCountry					
			    	CalculateTax.FromVATRegistrationNumber			= Vendor.VATRegistrationNumber					
					CalculateTax.FromTaxCode						= Vendor.TaxCode

		   		CalculateTax.InvoiceCompany							= Company
		   		CalculateTax.ProcessLevel							= PayablesInvoice.ProcessLevel 
				CalculateTax.VendorGrp								= Company.VendorGroup
				CalculateTax.Vendor									= Vendor 
				CalculateTax.VendorCustomerName						= PurchaseOrder.Vendor.VendorName 	
				CalculateTax.LineNumber								= PurchaseOrderLine		
				CalculateTax.TaxUsageCode							= TaxUsageCode					
				CalculateTax.DeliveryTerms          				= PurchaseOrder.ShipTerm
				if (PurchaseOrder.DropshipAddress entered)
					CalculateTax.PostalAddress						= PurchaseOrder.DropshipAddress
				else
				if (Location entered)
					CalculateTax.PostalAddress						= Location.PostalAddress	
				else
				if (PayablesInvoice.Location entered)
					CalculateTax.PostalAddress						= PayablesInvoice.Location.PostalAddress	
				else
				if (PurchaseOrder entered
				and PurchaseOrder.ShipToLocation entered)
					CalculateTax.PostalAddress						= PurchaseOrder.ShipToLocation.PostalAddress	
				else
					CalculateTax.PostalAddress						= PayablesInvoice.ProcessLevel.PostalAddress	

			    CalculateTax.DefaultFilingCurrency 					= Company.Currency 
				CalculateTax.CurrencyRate							= PurchaseOrder.EnteredCurrencyConversionRate 		
			    CalculateTax.TransactionCurrency 					= PayablesInvoice.InvoiceCurrency								
				CalculateTax.BaseCurrency 							= Company.Currency					
				CalculateTax.ReceiptSite							= PayablesInvoice.ProcessLevel								
				CalculateTax.UniqueIdOfRelatedObject				= UniqueID													


			if (TaxEntityRel.ThirdParty.VertexOSeries)

				if (Location entered)
					LocalInventoryLocation = Location
				else
					LocalInventoryLocation = PurchaseOrderLine.ShipToLocation


				if  (LandedAddOnCharge)						
					if (ItemType.Inventoried)
						LocalVertexDistributionAccount 		= PurchaseOrderLine.ItemLocationRel.GeneralLedgerCategory.InventoryAccount 
					else 
					if  (PurchaseOrderLine entered)
						LocalVertexDistributionAccount    		= first PurchaseOrderLineDistributionRel.DistributionAccount
					else
					if  (ContractLine entered)
						LocalVertexDistributionAccount    		= first ContractLineDistributionsRel.DistributionAccount
				else 
				if (POAndLineAOCRel exists)
					LocalVertexDistributionAccount				= POAndLineAOCRel.Account
				else
				if  (MiscellaneousAccount entered)
					LocalVertexDistributionAccount    			= MiscellaneousAccount
				else
					LocalVertexDistributionAccount				= AddOnCharge.PostingAccount



				if (PayablesInvoice.BillFromLocation entered)
					CalculateTax.POAAddress				= PayablesInvoice.BillFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress				= PayablesInvoice.Vendor.VendorAddress





				CalculateTax.CostCenter                      		= LocalVertexDistributionAccount.AccountingUnit     


				CalculateTax.PostDate                          		= PayablesInvoice.DistributionDate                    
				CalculateTax.GeneralLedgerAccount 					= LocalVertexDistributionAccount.GeneralLedgerChartAccount 

				if  (AddOnCharge.UNSPSCCode entered)
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode					= AddOnCharge.UNSPSCCode.UNSPSCCodeDisplay 
				else 
				if  (AddOnCharge.HSNSACCode entered)
					CalculateTax.CommodityCodeType      			= "HSN"
					CalculateTax.CommodityCode 					= AddOnCharge.HSNSACCode 

				if (TaxAttributesRel.VertexFlexibleFieldExist)
						




					Idx = 0

					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId = each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company.AccountingEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else    
							if (each.ExternalValue.ValueIs.Vendor)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Vendor
							else    
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DistributionDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DerivedTaxPointDate
							else    
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity 
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Location 
							else    
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceCurrency
							else    
							if (each.ExternalValue.ValueIs.AddOnCharge)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = AddOnCharge
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DiscountAmount.CurrencyAmount
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredUnitCost
							else    



							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
							else    
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
							else    






							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
							else    
							if (each.ExternalValue.ValueIs.TaxUsageCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxUsageCode
							else 



							if (each.ExternalValue.ValueIs.PaymentDate)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceDate
							else 









							if (each.ExternalValue.ValueIs.UsageType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
							else 
							if (each.ExternalValue.ValueIs.CustomerType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
							else 
							if (each.ExternalValue.ValueIs.Project)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project
							else 
							if (each.ExternalValue.ValueIs.Longitude)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLongitude
							else 
							if (each.ExternalValue.ValueIs.Latitude)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLatitude
							else 
							if (each.ExternalValue.ValueIs.Altitude)									
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoAltitude
							else 
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
							else    
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  






					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoice.DiscountAmount.CurrencyAmount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3 
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredUnitCost
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 5 
							else    
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  







					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DistributionDate
							else    
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								if (PayablesInvoice.DerivedTaxPointDate entered)
									CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DerivedTaxPointDate
								else 
									CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
							else    
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue  






		CallCalculateTax
			initialize CalculateTax

			CalculateTax.TaxableAmount							= TotalDistributionAmount
			CalculateTax.InvoiceAmount							= TotalDistributionAmount
			if (TaxCode.TaxType.CalculatedRate)
				CalculateTax.TaxAmount							= TotalDistributionAmount

			if  (PayablesInvoice.InvoiceType.CreditMemo
			and  CalculateTax.TaxableAmount > 0)
				CalculateTax.TaxableAmount							*= -1
				CalculateTax.InvoiceAmount							*= -1

			include PopulateCalculateTaxInputFields
	
			if (TaxCode.TaxType.CalculatedRate)
				CalculateTax.Function			 				= CalculateTax.Function.CalculateTaxRate
			else
			if  (TaxCode.TaxType.TaxTableCode)
				CalculateTax.Function			 				= CalculateTax.Function.CalculateTax
			else
				CalculateTax.Function			 				= CalculateTax.Function.CalculateTax
				

			if (TaxEntityRel.ThirdParty.TaxEngine)
				CalculateTax.TaxAmount = 0
			else
				LocalCalculateTaxExecuted 							= CalculateTax.ExecuteCalculateTax
	

		ReverseOriginalDistributions


			
			LocalOriginalInvoiceAddOnCharge = first OriginalInvoiceAddOnChargeRel.PayablesInvoiceAddOnCharge


					
			if  (!ItemType.Inventoried)
				for each MatchRefOriginalInvoiceAddOnChargeRel.AllDistributionsRel        
					include CreditForRebillDistribution

		CreditForRebillDistribution






			invoke CreateFromMatch each
				assign result to NewAPDistrib
				invoked.Company								= Company
				invoked.PayablesInvoice						= PayablesInvoice
				invoked.Status								= 1
				invoked.UnitAmount							= each.UnitAmount * -1
				invoked.DistributionAmount.CurrencyAmount	= each.DistributionAmount.CurrencyAmount * -1
				invoked.DistributionAmount.KeepRateOnly		= true
				invoked.GLTransactionAmount					= each.DistributionAmount.CurrencyAmount * -1
				invoked.GLFinanceCodeBlock					= each.DistributionAccount
				invoked.DistributionAccount					= each.DistributionAccount

				invoked.DistributionType					= "D"
				invoked.PurchaseOrder						= PurchaseOrder
				invoked.PurchaseOrderLine					= PurchaseOrderLine
				invoked.PurchasingContract					= Contract
				invoked.ContractLine						= ContractLine
				invoked.PayablesInvoiceDetail				= PayablesInvoiceAddOnCharge
				invoked.AddOnCharge							= AddOnCharge
				invoked.OriginalDistribution				= each.OriginalDistribution
				invoked.CommentText							= each.CommentText
				invoked.TransientAsset						= each.AssetDetailRel.Asset 
				invoked.TransientAssetTemplate				= each.AssetDetailRel.AssetTemplate
				invoked.Retainage							= each.Retainage
				invoked.AccrualCode 						= each.AccrualCode 

				invoked.BypassUpdatingInvoiceTotals			= true
				invoked.Status								= 0

				invoked.ProductTaxCategory 				= each.ProductTaxCategory
				invoked.TaxRate							= each.TaxRate
				invoked.TaxableAmount					= each.TaxableAmount * -1
				invoked.TaxCode							= each.TaxCode
				invoked.TaxUsageCode					= each.TaxUsageCode
				invoked.TransientTaxingJurisdiction		= each.PayablesTaxDetailRel.TaxingJurisdiction  
				invoked.Imposition						= each.Imposition
				invoked.TaxType							= each.TaxType
					
			if  (PayablesInvoice.RetainageAccrualCode entered)
				for each each.PayablesInvoiceRetainageDistributionRel
					invoke Create PayablesInvoiceRetainageDistribution
						fill in fields from each
							except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice
							except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution
							except invoked.Invoice
							except invoked.Suffix
						invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice = PayablesInvoice
						invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution = NewAPDistrib.PayablesInvoiceDistribution
						invoked.Invoice 			= Invoice
						invoked.Suffix 				= Suffix

						invoked.PaymentAmount										= each.PaymentAmount * -1
						invoked.RetainageCalculatedAmount							= each.RetainageCalculatedAmount * -1
		
		ProcessDetailTax






			initialize TaxAmount
			initialize InvoicedTaxAmount
			initialize AccruedTaxAmount
			initialize LocalTaxAmount
			initialize LocalInvoicedTaxAmount
			initialize LocalAccruedTaxAmount

			if (TaxCode entered
			and !PayablesInvoice.CallVertexByDocument
			and !PayablesInvoice.DoOneSourceAfter)
				if (TaxCode.TaxType.CalculatedRate)
					if  (TransientTaxRate not entered)
						TransientTaxRate 								= PayablesInvoice.TaxAmount / PayablesInvoice.TaxableAmount
	
					LocalTaxAmount = MatchUnitCost * TransientTaxRate
					round TaxAmount to nearest DerivedRoundTo
				else
					initialize CalculateTax
	
					CalculateTax.TaxableAmount							= TotalDistributionAmount
					CalculateTax.InvoiceAmount							= TotalDistributionAmount
					if (TaxCode.TaxType.CalculatedRate)
						CalculateTax.TaxAmount							= TotalDistributionAmount

					if  (PayablesInvoice.InvoiceType.CreditMemo
					and  CalculateTax.TaxableAmount > 0)
						CalculateTax.TaxableAmount							*= -1
						CalculateTax.InvoiceAmount							*= -1

					include PopulateCalculateTaxInputFields
			
					if (TaxCode.TaxType.CalculatedRate)
						CalculateTax.Function			 				= CalculateTax.Function.CalculateTaxRate
					else
						CalculateTax.Function			 				= CalculateTax.Function.CalculateTax
						

					if (TaxEntityRel.ThirdParty.TaxEngine)
						CalculateTax.TaxAmount = 0
					else
						LocalCalculateTaxExecuted 							= CalculateTax.ExecuteCalculateTax

					CalculateTaxHasBeenCalled = true 



	
					LocalTaxTable = CalculateTax.TaxTable
					for each LocalTaxTable.TaxTableOutput
						

	
						if (each.AccrualFlag = "A")
							LocalAccruedTaxAmount += each.TaxAmount5DP
						else
							LocalTaxAmount += each.TaxAmount5DP
	
					round LocalTaxAmount to nearest DerivedRoundTo
					round LocalInvoicedTaxAmount to nearest DerivedRoundTo
					round LocalAccruedTaxAmount to nearest DerivedRoundTo

					TaxAmount 			= LocalTaxAmount
					AccruedTaxAmount	= LocalAccruedTaxAmount
					InvoicedTaxAmount 	= LocalInvoicedTaxAmount

					if (TaxCode = "00"
					and TaxEntityRel.ThirdParty.VertexOSeries)
						TaxCode = CalculateTax.TaxCode 
					
		MiscellaneousTaxCodeRules


			if (action type.Create)
				if  (TaxCode not entered)		
					if (POAndLineAOCRel exists)		
						Location									= POAndLineAOCRel.ShipToLocation
						TaxCode										= POAndLineAOCRel.TaxCode
					else
						TaxCode										= AddOnCharge.TaxCode
						Location									= PayablesInvoice.Location							

				if (Location not entered 
				and TaxEntityRel.ThirdParty.VertexOSeries)
					Location 										= PurchaseOrder.ShipToLocation 

				if (POAndLineAOCRel not exists
				and TaxCode entered)
				    NextSentence = true
				else
				if (PayablesInvoice.TaxAdjustment.Calculate
				or  PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
					initialize TaxCode
				else	
				if (PayablesInvoice.TaxAdjustment.OverrideProductAndAOC
				or (PayablesInvoice.TaxAdjustment.OverrideTaxablePOAndAOC
				and POAndLineAOCRel not exists))
					if (CalculateTax.AccruedOrInvoiced.Invoiced
					or  !TaxCode.TaxType.CalculatedRate
					or  TaxCode not entered)
						TaxCode									= PayablesInvoice.TaxCode
					else
					if  (PayablesInvoice.TaxAdjustment.OverrideTaxablePOAndAOC
					and (CalculateTax.AccruedOrInvoiced.Invoiced
					or  !TaxCode.TaxType.CalculatedRate))
						if (POAndLineAOCRel exists
						and POAndLineAOCRel.TaxCode entered)
							TaxCode								= PayablesInvoice.TaxCode
	
			TaxType											= TaxCode.TaxType
	
			if (TaxCode entered)
				InvoiceLineTaxable							= true
			else
				InvoiceLineTaxable							= false
	






























		MiscOrNonLandedTaxDistribution


			if (CalculateTaxHasBeenCalled)
				NextSentence = true 
			else 
			if  (PurchaseOrderLine not entered
			or   PayablesInvoice.RetainageAccrualCode not entered
			or   EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
				LocalDoRetainageDistribution 			= false
			else
				LocalDoRetainageDistribution 			= true
				initialize GetRetainage
				GetRetainage.PurchaseOrder				= PurchaseOrder
				GetRetainage.PurchaseOrderLine			= PurchaseOrderLine
				GetRetainage.Contract					= Contract
				GetRetainage.ContractLine				= ContractLine
				LocalGetRetainage 						= GetRetainage.PerformGet

			if (TaxCode not entered)
				initialize TaxAmount
				InvoiceLineTaxable = false
				initialize CalculateTax
			else
			if (CalculateTaxHasBeenCalled)
				NextSentence = true 
			else 
				initialize CalculateTax
				initialize TaxAmount
				initialize InvoicedTaxAmount
				initialize AccruedTaxAmount
				initialize LocalTaxAmount
				initialize LocalInvoicedTaxAmount
				initialize LocalAccruedTaxAmount

				CalculateTax.TaxableAmount						= TotalDistributionAmount
				CalculateTax.InvoiceAmount						= TotalDistributionAmount

				if  (PayablesInvoice.InvoiceType.CreditMemo
				and  CalculateTax.TaxableAmount > 0)
					CalculateTax.TaxableAmount							*= -1
					CalculateTax.InvoiceAmount							*= -1
					
				if (TaxCode.TaxType.CalculatedRate)
					CalculateTax.Function			 			= CalculateTax.Function.CalculateTaxRate
				else
					CalculateTax.Function			 			= CalculateTax.Function.CalculateTax

				include PopulateCalculateTaxInputFields
					

				if (TaxEntityRel.ThirdParty.TaxEngine)
					CalculateTax.TaxAmount = 0
				else
					LocalCalculateTaxExecuted 						= CalculateTax.ExecuteCalculateTax

				initialize TaxAmount
				LocalTaxTable = CalculateTax.TaxTable
				for each LocalTaxTable.TaxTableOutput

					if (each.AccrualFlag = "A")
						LocalAccruedTaxAmount += each.TaxAmount5DP
					else
						LocalTaxAmount += each.TaxAmount5DP

				round LocalTaxAmount to nearest DerivedRoundTo
				round LocalInvoicedTaxAmount to nearest DerivedRoundTo
				round LocalAccruedTaxAmount to nearest DerivedRoundTo

				TaxAmount 			= LocalTaxAmount
				AccruedTaxAmount	= LocalAccruedTaxAmount
				InvoicedTaxAmount 	= LocalInvoicedTaxAmount

				if (TaxCode = "00"
				and TaxEntityRel.ThirdParty.VertexOSeries)
					TaxCode = CalculateTax.TaxCode 

			if  (ProcessingTax
			and  TaxCode.TaxType.TaxTableCode)
				WorkTaxAmount									= TaxAmount + AccruedTaxAmount
				RemainingAmount									= WorkTaxAmount
			else
			if  (ProcessingTax)
				WorkTaxAmount									= DerivedTaxAmount
				RemainingAmount									= WorkTaxAmount 

			if   ((!TaxEntityRel.UseTaxCodeAccounts
			and    !TaxEntityRel.LandedCost)
			or    (TaxEntityRel.UseTaxCodeAccounts
			and    !EntityTaxCodeRel.LandedCost))
			    display "NonLanded:<CalculateTax.TaxCode>"

				if  (LocalTaxTable.TaxTableOutput.TaxPoint = "P")
					WorkDistributionAccount					= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount
					if (WorkDistributionAccount not entered)
						if   (TaxEntityRel.UseTaxCodeAccounts)
							WorkDistributionAccount				= EntityTaxCodeRel.TaxInputDueAccount
						else 
							WorkDistributionAccount				= TaxEntityRel.TaxInputDueAccount
				else
					WorkDistributionAccount					= CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount
					if (WorkDistributionAccount not entered)
						if   (TaxEntityRel.UseTaxCodeAccounts)
							WorkDistributionAccount				= EntityTaxCodeRel.TaxInputAccount
						else 
							WorkDistributionAccount				= TaxEntityRel.TaxInputAccount
			else
			if (WorkDistributionAccount not entered)
			    display "Landed"
				WorkDistributionAccount							= MiscellaneousAccount

			if (WorkDistributionAccount not entered)
			    display "BlankUseSetupAcct"
				WorkDistributionAccount							= AddOnCharge.PostingAccount

			if (!LocalDoRetainageDistribution)
				WorkRetainage									= false
				if  (TaxCode.TaxType.TaxTableCode
				or   TaxEntityUsesThirdPartyTax)
					I9 = 1
					while (I9 <= 8
					and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
						WorkGLTransactionAmount					= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount
						round WorkGLTransactionAmount to nearest DerivedRoundTo

						RemainingAmount							-= WorkGLTransactionAmount

						if (RemainingAmount entered
						and (I9 = 8
						or   CalculateTax.TaxTable.TaxTableOutput[I9+1].TaxCode not entered))
							WorkGLTransactionAmount += RemainingAmount
							initialize RemainingAmount


						if  (!CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)
							if  (CalculateTax.TaxTable.TaxTableOutput.TaxPoint = "P")
								WorkDistributionAccount			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount
								if (WorkDistributionAccount not entered)
									WorkDistributionAccount		= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode.TaxEntityRel.TaxInputDueAccount
							else
								WorkDistributionAccount			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount
								if (WorkDistributionAccount not entered)
									WorkDistributionAccount		= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode.TaxEntityRel.TaxInputAccount
						else
						if (MiscellaneousAccount entered)
							WorkDistributionAccount							= MiscellaneousAccount
						else				
							WorkDistributionAccount							= AddOnCharge.PostingAccount

						if  (WorkGLTransactionAmount not entered
						and  PayablesInvoice.TaxEntityUsesVertex)
							NextSentence = true
						else
							include InvokeDistributionCreate
						I9 += 1
				else
					I9 = 1
					WorkGLTransactionAmount						= CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount
					include InvokeDistributionCreate
			else
				if  (TaxCode.TaxType.TaxTableCode
				or   TaxEntityUsesThirdPartyTax)
					I9 = 1
					while (I9 <= 8
					and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
						LocalWorkAmount							= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount
			    		round LocalWorkAmount to nearest DerivedRoundTo

						LocalRetainageTranAmount				= LocalWorkAmount * GetRetainage.RetainagePercent
						WorkGLTransactionAmount					= LocalWorkAmount - LocalRetainageTranAmount
						LocalRetainageTaxableAmount				= TotalDistributionAmount - (TotalDistributionAmount * GetRetainage.RetainagePercent) 
		
						include InvokeDistributionCreate

						WorkGLTransactionAmount					= LocalRetainageTranAmount
						WorkRetainage							= true
						LocalRetainageTaxableAmount				= (TotalDistributionAmount * GetRetainage.RetainagePercent) 
		
						if  (WorkGLTransactionAmount not entered
						and  PayablesInvoice.TaxEntityUsesVertex)
							NextSentence = true
						else
							include InvokeDistributionCreate

						I9 += 1

				else
					I9 = 1
					LocalWorkAmount								= CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount
		    		round LocalWorkAmount to nearest DerivedRoundTo

					LocalRetainageTranAmount					= LocalWorkAmount * GetRetainage.RetainagePercent
					WorkGLTransactionAmount						= LocalWorkAmount - LocalRetainageTranAmount
					LocalRetainageTaxableAmount					= TotalDistributionAmount - (TotalDistributionAmount * GetRetainage.RetainagePercent) 
	
					include InvokeDistributionCreate

					WorkGLTransactionAmount						= LocalRetainageTranAmount
					WorkRetainage								= true
					LocalRetainageTaxableAmount					= (TotalDistributionAmount * GetRetainage.RetainagePercent) 
		
					include InvokeDistributionCreate


		CopyPOLineDistributionsRuleBlock





			
			if (LandedAddOnCharge)
				initialize LocalAddOnCharge
			else
				LocalAddOnCharge						= AddOnCharge

			if  (PayablesInvoice.RetainageAccrualCode not entered
			or  (ProcessingTax
			and  EntityTaxCodeRel.AccruedOrInvoiced.Accrued))
				LocalDoRetainageDistribution 			= false
			else
				LocalDoRetainageDistribution 			= true
				initialize GetRetainage
				GetRetainage.PurchaseOrder				= PurchaseOrder
				GetRetainage.PurchaseOrderLine			= PurchaseOrderLine
				GetRetainage.Contract					= Contract
				GetRetainage.ContractLine				= ContractLine
				LocalGetRetainage 						= GetRetainage.PerformGet

			initialize PercentAccumulated
			initialize QuantityAccumulated

			if  (ProcessingTax
			and !CalculateTaxHasBeenCalled)
				include CallCalculateTax
							
			if  (ProcessingTax
			and  TaxCode.TaxType.CalculatedRate)
				RemainingAmount									= TotalDistributionAmount * TransientTaxRate
			else
			if  (ProcessingTax
			and  TaxCode.TaxType.TaxTableCode)
				display "PIAOCTaxAmount<TaxAmount>AccruedTaxAmount<AccruedTaxAmount>"
				WorkTaxAmount									= TaxAmount + AccruedTaxAmount
				RemainingAmount									= WorkTaxAmount
			else
			if  (ProcessingTax)
				WorkTaxAmount									= DerivedTaxAmount
				RemainingAmount									= WorkTaxAmount 
			else
				RemainingAmount									= TotalDistributionAmount
				
			if (ProcessingTax)
				I9 = 1					
							
			round RemainingAmount to nearest DerivedRoundTo
			RemainingQuantity										= PurchaseOrderLine.DistributionQuantityTotal
			LocalQuantityRatio 										= MatchedQuantity / PurchaseOrderLine.DistributionQuantityTotal

	        LocalLastPoDistrib = last PurchaseOrderLineDistributionRel.PurchaseOrderLineDistribution 

			for each PurchaseOrderLineDistributionRel

				WorkDistributionAccount							= each.DistributionAccount
				LocalPOLineDistribution  						= each.PurchaseOrderLineDistribution

				if (each.DistributionPercent entered)
					LocalRate = each.DistributionPercent 
				else 
				if (each.DistributionQuantity entered)
					LocalRate							= (each.DistributionQuantity/PurchaseOrderLine.DistributionQuantityTotal)
				else 
					LocalRate							= (each.DistributionAmount/PurchaseOrderLine.ExtendedAmount)

				if  (each.DistributionPercent entered)

					PercentAccumulated							+= each.DistributionPercent

					if  (ProcessingTax
					and (TaxCode.TaxType.TaxTableCode
					or   PayablesInvoice.TaxEntityUsesThirdPartyTax))

						I9 = 1
						while (I9 <= 8
						and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
							LocalWorkAmount					= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP * each.DistributionPercent
				    		round LocalWorkAmount to nearest DerivedRoundTo
							RemainingAmount					-= LocalWorkAmount
							if (PercentAccumulated = 100%
							and RemainingAmount entered
							and (I9 = 8
							or   CalculateTax.TaxTable.TaxTableOutput[I9+1].TaxCode not entered))
								LocalWorkAmount += RemainingAmount
								initialize RemainingAmount

							include CreateInvoiceDetailDistribution
							I9 += 1
					else
					if (PercentAccumulated = 100%)
						LocalWorkAmount								= RemainingAmount
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
					if  (ProcessingTax
					and  TaxCode.TaxType.CalculatedRate)
						LocalWorkAmount						= TotalDistributionAmount * TransientTaxRate * each.DistributionPercent
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
					if  (ProcessingTax)


						LocalWorkAmount						= WorkTaxAmount * each.DistributionPercent
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount

					else
						LocalWorkAmount						= TotalDistributionAmount * each.DistributionPercent
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
				else
				if  (each.DistributionQuantity entered)


					QuantityAccumulated							+= each.DistributionQuantity 
					if  (ProcessingTax
					and (TaxCode.TaxType.TaxTableCode
					or   TaxEntityUsesThirdPartyTax))
						I9 = 1
						while (I9 <= 8
						and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
							LocalWorkAmount					= each.DistributionQuantity * LocalQuantityRatio * CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
							LocalWorkAmount					= (CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP * (each.DistributionQuantity/PurchaseOrderLine.Quantity))
				    		round LocalWorkAmount to nearest DerivedRoundTo
							RemainingAmount						-= LocalWorkAmount

							if (QuantityAccumulated = PurchaseOrderLine.DistributionQuantityTotal 
							and RemainingAmount entered
							and (I9 = 8
							or   CalculateTax.TaxTable.TaxTableOutput[I9+1].TaxCode not entered))

								LocalWorkAmount += RemainingAmount
								initialize RemainingAmount
							include CreateInvoiceDetailDistribution
							I9 += 1
					else
					if  (ProcessingTax
					and  TaxCode.TaxType.CalculatedRate)
						LocalWorkAmount						= (TotalDistributionAmount * TransientTaxRate * (each.DistributionQuantity/PurchaseOrderLine.DistributionQuantityTotal))
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
					if  (ProcessingTax)
						LocalWorkAmount						= (WorkTaxAmount * (each.DistributionQuantity/PurchaseOrderLine.DistributionQuantityTotal))
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
						LocalWorkAmount						= (TotalDistributionAmount * (each.DistributionQuantity/PurchaseOrderLine.DistributionQuantityTotal))
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
						
					RemainingQuantity						-= each.DistributionQuantity
				else

					if  (ProcessingTax
					and (TaxCode.TaxType.TaxTableCode
					or   TaxEntityUsesThirdPartyTax))
						I9 = 1
						while (I9 <= 8
						and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
							LocalWorkAmount						= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP * (each.DistributionAmount / PurchaseOrderLine.ExtendedAmount) 
				    		round LocalWorkAmount to nearest DerivedRoundTo
							RemainingAmount  					-= LocalWorkAmount


							if  (LocalLastPoDistrib = each.PurchaseOrderLineDistribution
							and  RemainingAmount entered
							and (I9 = 8
							or   CalculateTax.TaxTable.TaxTableOutput[I9+1].TaxCode not entered))
								LocalWorkAmount += RemainingAmount
								initialize RemainingAmount


							include CreateInvoiceDetailDistribution
							I9 += 1
					else
					if  (ProcessingTax
					and  TaxCode.TaxType.CalculatedRate)
						LocalWorkAmount						= TotalDistributionAmount * TransientTaxRate * (each.DistributionAmount / PurchaseOrderLine.ExtendedAmount)
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
					if  (ProcessingTax)

						LocalWorkAmount							= WorkTaxAmount * (each.DistributionAmount / PurchaseOrderLine.ExtendedAmount) 
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount  						-= LocalWorkAmount
					else 
						LocalWorkAmount							= MatchUnitCost * MatchedQuantity * (each.DistributionAmount / PurchaseOrderLine.ExtendedAmount)
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount  						-= LocalWorkAmount
	


			if  (RemainingAmount entered
			and (RemainingAmount >= .005
			or   RemainingAmount <= -.005))

				initialize LocalPOLineDistribution
				initialize LocalContractLineDistrib
				WorkDistributionAccount						= last PurchaseOrderLineDistributionRel.DistributionAccount
				WorkGLTransactionAmount						= RemainingAmount
				include InvokeDistributionCreate

		CreateInvoiceDetailDistribution


			if  (ProcessingTax)


				if  ((TaxCode.TaxType.TaxTableCode
				and   CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)
				or   (!TaxCode.TaxType.TaxTableCode
				and   !TaxEntityRel.UseTaxCodeAccounts
				and    TaxEntityRel.LandedCost)
				or   (!TaxCode.TaxType.TaxTableCode
				and    TaxEntityRel.UseTaxCodeAccounts
				and    EntityTaxCodeRel.LandedCost))
					WorkDistributionAccount							= each.DistributionAccount
					if (ItemType.Inventoried)
						if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
							WorkDistributionAccount		= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount

						else
							WorkDistributionAccount		= Company.ReceiptAccrualAccount

				else
				if  (!EntityTaxCodeRel.LandedCost)
					if  (TaxCode.TaxType.CalculatedRate)
						if  (EntityTaxCodeRel.TaxPoint 	= "P")
							WorkDistributionAccount		= EntityTaxCodeRel.TaxInputDueAccount
						else
							WorkDistributionAccount		= EntityTaxCodeRel.TaxInputAccount
					else
					if  (LocalTaxTable.TaxTableOutput.TaxPoint = "P")
						WorkDistributionAccount			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount

						if (WorkDistributionAccount not entered)
							WorkDistributionAccount		= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode.TaxEntityRel.TaxInputDueAccount
					else
						WorkDistributionAccount			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount

						if (WorkDistributionAccount not entered)
							WorkDistributionAccount		= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode.TaxEntityRel.TaxInputAccount

			if  (ProcessingTax
			and  PayablesInvoice.TaxEntityUsesVertex
			and  LocalWorkAmount 		not entered)
				NextSentence = true
			else
			if (!LocalDoRetainageDistribution)
				WorkRetainage							= false
				WorkGLTransactionAmount					= LocalWorkAmount
				include InvokeDistributionCreate
			else
				LocalRetainageTranAmount				= LocalWorkAmount * GetRetainage.RetainagePercent
				WorkGLTransactionAmount					= LocalWorkAmount - LocalRetainageTranAmount
				if (ProcessingTax)
					LocalRetainageTaxableAmount			= TotalDistributionAmount - (TotalDistributionAmount * GetRetainage.RetainagePercent) 

				include InvokeDistributionCreate

				WorkGLTransactionAmount					= LocalRetainageTranAmount
				WorkRetainage							= true
				if (ProcessingTax)
					LocalRetainageTaxableAmount			= (TotalDistributionAmount * GetRetainage.RetainagePercent) 

				include InvokeDistributionCreate


		InvokeDistributionCreate		








			invoke CreateFromMatch PayablesInvoiceDistribution
				if (ContractLine entered)
					fill in user fields from LocalContractLineDistributionRel.ContractLineDistribution
				else
					fill in user fields from LocalPOLineDistributionRel.PurchaseOrderLineDistribution
				invoked.Company								= Company
				invoked.PayablesInvoice						= PayablesInvoice
				invoked.DistributionType					= "D"
				invoked.PurchaseOrder						= PurchaseOrder
				invoked.PurchaseOrderLine					= PurchaseOrderLine
				invoked.PurchasingContract					= Contract
				invoked.ContractLine						= ContractLine
				invoked.PayablesInvoiceDetail				= PayablesInvoiceAddOnCharge
				invoked.AddOnCharge							= AddOnCharge
				invoked.BypassBudgetEdit					= BypassBudgetEdit
				if (LocalPOLineDistribution entered)
					invoked.OriginalDistribution			= LocalPOLineDistribution
					invoked.TransientAsset					= LocalPOLineDistributionRel.AssetInformation.Asset 
					invoked.TransientAssetTemplate			= LocalPOLineDistributionRel.AssetInformation.AssetTemplate
				else
				if  (LocalContractLineDistrib entered)
					invoked.OriginalDistribution			= LocalContractLineDistrib


				invoked.DistributionAccount					= WorkDistributionAccount
				invoked.GLFinanceCodeBlock					= WorkDistributionAccount	
				invoked.GLTransactionAmount					= WorkGLTransactionAmount
				invoked.DistributionAmount.CurrencyAmount	= WorkGLTransactionAmount
				if  (ProcessingTax)
					if  (TaxCode.TaxType.TaxTableCode)
						invoked.TaxCode						= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode
					else
						invoked.TaxCode						= TaxCode
						invoked.ProductTaxCategory 			= ProductTaxCategory
						invoked.TaxUsageCode				= TaxUsageCode

					if (TaxCode.TaxType.CalculatedRate)
						invoked.TaxRate						= TransientTaxRate
						invoked.TaxableAmount				= TotalDistributionAmount
					else
						invoked.TaxRate						= CalculateTax.TaxTable.TaxTableOutput[I9].TaxRate
						invoked.TaxableAmount				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxableAmount * LocalRate

					invoked.Imposition						= CalculateTax.Imposition
					
				if (WorkRetainage)
					invoked.Retainage						= true
					invoked.AccrualCode 					= PayablesInvoice.RetainageAccrualCode 
					if (ProcessingTax)
						invoked.TaxableAmount				= LocalRetainageTaxableAmount

				invoked.BypassUpdatingInvoiceTotals		= true
				invoked.TransientBypassErrorUpdate		= true
				invoked.FromMatch						= true
		
			WorkRetainage									= false


		CopyContractLineDistributionsRuleBlock



			if  (PayablesInvoice.RetainageAccrualCode not entered
			or  (ProcessingTax
			and  EntityTaxCodeRel.AccruedOrInvoiced.Accrued))
				LocalDoRetainageDistribution 			= false
			else
				LocalDoRetainageDistribution 			= true
				initialize GetRetainage
				GetRetainage.PurchaseOrder				= PurchaseOrder
				GetRetainage.PurchaseOrderLine			= PurchaseOrderLine
				GetRetainage.Contract					= Contract
				GetRetainage.ContractLine				= ContractLine
				LocalGetRetainage 						= GetRetainage.PerformGet

			initialize PercentAccumulated

			if  (ProcessingTax
			and !CalculateTaxHasBeenCalled)
				include CallCalculateTax

			if  (ProcessingTax
			and  TaxCode.TaxType.CalculatedRate)
				RemainingAmount									= TotalDistributionAmount * TransientTaxRate
			else
			if  (ProcessingTax)
				WorkTaxAmount									= DerivedTaxAmount
				round WorkTaxAmount to nearest DerivedRoundTo
				RemainingAmount									= WorkTaxAmount
			else
				RemainingAmount									= TotalDistributionAmount
			
			if (ProcessingTax)
				I9 = 1					


			for each ContractLineDistributionsRel


				LocalRate 										= each.Percent 
				LocalContractLineDistrib						= each.ContractLineDistribution
				WorkDistributionAccount							= each.DistributionAccount
				PercentAccumulated								+= each.Percent
				if (PercentAccumulated = 100%)

					LocalWorkAmount								= RemainingAmount
		    		round LocalWorkAmount to nearest DerivedRoundTo

					include CreateInvoiceDetailDistribution
					RemainingAmount						-= LocalWorkAmount
				else
					if  (ProcessingTax
					and (TaxCode.TaxType.TaxTableCode
					or   TaxEntityUsesThirdPartyTax))

						I9 = 1
						while (I9 <= 8
						and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
							LocalWorkAmount					= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP * MatchedQuantity * each.Percent
				    		round LocalWorkAmount to nearest DerivedRoundTo
							include CreateInvoiceDetailDistribution
							RemainingAmount					-= LocalWorkAmount
							I9 += 1
					else
					if  (ProcessingTax
					and  TaxCode.TaxType.CalculatedRate)
						LocalWorkAmount						= TotalDistributionAmount * TransientTaxRate * each.Percent
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount
					else
					if  (ProcessingTax)

						LocalWorkAmount						= WorkTaxAmount * each.Percent
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount

					else
						LocalWorkAmount						= TotalDistributionAmount * each.Percent
			    		round LocalWorkAmount to nearest DerivedRoundTo
						include CreateInvoiceDetailDistribution
						RemainingAmount						-= LocalWorkAmount


			if  (RemainingAmount entered
			and (RemainingAmount >= .005
			or   RemainingAmount <= -.005))
				WorkDistributionAccount						= last ContractLineDistributionsRel.DistributionAccount
				WorkGLTransactionAmount						= RemainingAmount
				include InvokeDistributionCreate

		DeleteTaxDistributions
			if  (OldTaxCode entered)
				if  (!OldTaxCode.TaxType.TaxTableCode)
					LocalTaxCode						= OldTaxCode
					include DeleteTaxRelation
				else
					if (OldTaxCode.TaxTableRel.TaxCode1 entered)
						LocalTaxCode						= OldTaxCode.TaxTableRel.TaxCode1
						include DeleteTaxRelation
					if (OldTaxCode.TaxTableRel.TaxCode2 entered)
						LocalTaxCode						= OldTaxCode.TaxTableRel.TaxCode2
						include DeleteTaxRelation
					if (OldTaxCode.TaxTableRel.TaxCode3 entered)
						LocalTaxCode						= OldTaxCode.TaxTableRel.TaxCode3
						include DeleteTaxRelation
					if (OldTaxCode.TaxTableRel.TaxCode4 entered)
						LocalTaxCode						= OldTaxCode.TaxTableRel.TaxCode4
						include DeleteTaxRelation
					if (OldTaxCode.TaxTableRel.TaxCode5 entered)
						LocalTaxCode						= OldTaxCode.TaxTableRel.TaxCode5
						include DeleteTaxRelation
					if (OldTaxCode.TaxTableRel.TaxCode6 entered)
						LocalTaxCode						= OldTaxCode.TaxTableRel.TaxCode6
						include DeleteTaxRelation
					if (OldTaxCode.TaxTableRel.TaxCode7 entered)
						LocalTaxCode						= OldTaxCode.TaxTableRel.TaxCode7
						include DeleteTaxRelation
					if (OldTaxCode.TaxTableRel.TaxCode8 entered)
						LocalTaxCode						= OldTaxCode.TaxTableRel.TaxCode8
						include DeleteTaxRelation

		DeleteTaxRelation

			if (LocalTaxCode entered)
				if  (PurchaseOrderLine entered)
					for each TaxDistributionsForPurchaseOrderLineRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
				else
				if  (ContractLine entered)
					for each TaxDistributionsForContractLineRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
				else
					for each MiscellaneousTaxDistributionsRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each

		CheckPOCommitments

			if (POGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
    		or  POGeneralLedgerSystemCodeRel.EncumbranceOption.Track)

				if (ProcurementGroupRel.PurchaseOrderEncumbranceDate.LineEarlyDeliveryDate)
					LocalEncumbranceDate = PurchaseOrderLine.EarlyDeliveryDate 
				else 
					LocalEncumbranceDate = PurchaseOrder.PurchaseOrderDate 


    			if  (PurchaseOrderLine entered)
					if  (action type.Delete 
					and (PayablesInvoice.DistributionDate year not = LocalEncumbranceDate year
					or   PayablesInvoice.DistributionDate month not = LocalEncumbranceDate month))
	    				LocalPassedCommitAmount 			= (EnteredQuantity * EnteredUnitCost * -1)
	    				include UpdatePOCommitments
					else
					if (LandedAddOnCharge
					and POAndLineAOCRel exists  
					and CreatedDuringSpread = 1)
						LocalPassedCommitAmount = (POAndLineAOCRel.DerivedQuantity * POAndLineAOCRel.EnteredUnitCost)

						include UpdatePOCommitments 
					else 
	    			if  (action type.Create)
	    				LocalPassedCommitAmount 			= (EnteredQuantity * EnteredUnitCost)
	    				include UpdatePOCommitments
	    			else
	    			if  (action type.Update)
						if (EnteredQuantity != OldEnteredQuantity
						or  EnteredUnitCost != OldEnteredUnitCost) 
							
							POLineCompareAmount 			= (POAndLineAOCRel.DerivedQuantity * POAndLineAOCRel.EnteredUnitCost)
		    				InvoiceLineCompareAmount 		= (EnteredQuantity * EnteredUnitCost)
		    				OldInvoiceLineCompareAmount 	= (OldEnteredQuantity * OldEnteredUnitCost)

		    				if (InvoiceLineCompareAmount 	< POLineCompareAmount
		    				and OldInvoiceLineCompareAmount >= POLineCompareAmount)
		    					LocalPassedCommitAmount 	= (InvoiceLineCompareAmount - POLineCompareAmount)
		    					include UpdatePOCommitments
		    				else
		    				if (InvoiceLineCompareAmount 	>= POLineCompareAmount
		    				and OldInvoiceLineCompareAmount < POLineCompareAmount)
		    					LocalPassedCommitAmount 	= (POLineCompareAmount - OldInvoiceLineCompareAmount)
		    					include UpdatePOCommitments
		    				else
		    				if (InvoiceLineCompareAmount 	>= POLineCompareAmount
		    				and OldInvoiceLineCompareAmount >= POLineCompareAmount)
								NextSentence = true 
		    				else
		    					LocalPassedCommitAmount 	= (InvoiceLineCompareAmount - OldInvoiceLineCompareAmount) 
			    				include UpdatePOCommitments
	    			else
	    			if  (action type.Delete)
	    				LocalPassedCommitAmount 			= (EnteredQuantity * EnteredUnitCost * -1)
	    				include UpdatePOCommitments
    			else
    			if (PurchaseOrder entered)  
    				if (action type.Create)
    					LocalPassedCommitAmount				= TotalAddOnChargeAmount
    					include UpdatePOCommitments
    				else
    				if (action type.Delete)
    					LocalPassedCommitAmount             = TotalAddOnChargeAmount * -1
						include UpdatePOCommitments
					else 
	    			if  (action type.Update
					and (EnteredQuantity not = OldEnteredQuantity
					or   EnteredUnitCost not = OldEnteredUnitCost))
							
						POLineCompareAmount 			= POAndLineAOCRel.DerivedDistributionAmount
						InvoiceLineCompareAmount 		= (EnteredQuantity * EnteredUnitCost)
						OldInvoiceLineCompareAmount 	= (OldEnteredQuantity * OldEnteredUnitCost)


						if (AddOnCharge.AddOnChargeType.Allowance)
							if (InvoiceLineCompareAmount 	>= POLineCompareAmount
							and OldInvoiceLineCompareAmount >= POLineCompareAmount)
								LocalPassedCommitAmount 	= (InvoiceLineCompareAmount - OldInvoiceLineCompareAmount)
								include UpdatePOCommitments
							else
							if (InvoiceLineCompareAmount 	> POLineCompareAmount
							and OldInvoiceLineCompareAmount <= POLineCompareAmount)
								LocalPassedCommitAmount 	= (InvoiceLineCompareAmount - POLineCompareAmount)
								include UpdatePOCommitments
							else
							if (InvoiceLineCompareAmount 	< POLineCompareAmount
							and OldInvoiceLineCompareAmount >= POLineCompareAmount)
								LocalPassedCommitAmount 	= (POLineCompareAmount - OldInvoiceLineCompareAmount) 
								include UpdatePOCommitments
						else 
							if (InvoiceLineCompareAmount 	<= POLineCompareAmount
							and OldInvoiceLineCompareAmount <= POLineCompareAmount)
								LocalPassedCommitAmount 	= (InvoiceLineCompareAmount - OldInvoiceLineCompareAmount)
								include UpdatePOCommitments
							else
							if (InvoiceLineCompareAmount 	< POLineCompareAmount
							and OldInvoiceLineCompareAmount >= POLineCompareAmount)
								LocalPassedCommitAmount 	= (InvoiceLineCompareAmount - POLineCompareAmount)
								include UpdatePOCommitments
							else
							if (InvoiceLineCompareAmount 	> POLineCompareAmount
							and OldInvoiceLineCompareAmount <= POLineCompareAmount)
								LocalPassedCommitAmount 	= (POLineCompareAmount - OldInvoiceLineCompareAmount) 
								include UpdatePOCommitments


		UpdatePOCommitments


			if (TaxCode entered)
    			if  (action type.Update)
					LocalPassedCommitAmount += LandedTax * ((EnteredQuantity * EnteredUnitCost) - (OldEnteredQuantity * OldEnteredUnitCost)) / (EnteredQuantity * EnteredUnitCost)
    			else
    			if  (action type.Delete)
					LocalPassedCommitAmount -= LandedTax
    			else
					LocalPassedCommitAmount += LandedTax

				
			if (POAndLineAOCRel not exists)
				NextSentence = true 
			else 
			if (LandedAddOnCharge)
				for each PurchaseOrderLine.CommittedPurchaseOrderLineDistributionsRel
					
			     	if (each.DistributionByAmount)
				   		LocalDistributionAmount = ((each.DistributionAmount/PurchaseOrderLine.ExtendedAmount) * LocalPassedCommitAmount)
			   		else
			   		if (each.DistributionByPercent)
			   			LocalDistributionAmount = (each.DistributionPercent * LocalPassedCommitAmount)
			   		else
			    		LocalDistributionAmount = ((each.DistributionQuantity/PurchaseOrderLine.Quantity) * LocalPassedCommitAmount)

					if  (action type.Create) 

						if (PurchaseOrder entered)
							Currency = PurchaseOrder.Currency
						else
							Currency = Company.Currency

						initialize ReportCurrencyAmount
						TransientTransactionCodeBlock                       = each.DistributionAccount
						TransientCurrencyTable         						= Company.CurrencyTable
						TransientAccountingEntity      						= Company.AccountingEntity
						TransientExchangeDate          						= PayablesInvoice.DistributionDate
						TransientPostingDate           						= PayablesInvoice.DistributionDate
						TransientFromCurrency          						= PayablesInvoice.InvoiceCurrency
						LocalCurrencyAmount                             	= LocalDistributionAmount
						TransientCurrencyAmount                         	= LocalDistributionAmount
						ReportCurrencyAmount.UseDerivedCalculations         = true
						LocalForceCalculation	       						= ReportCurrencyAmount.AssignToCurrency
						LocalForceCalculation 	       						= ReportCurrencyAmount.DerivedCalculationsComplete
							
						invoke CreateBudgetTemplateReversal each.GLCommitRel
							invoked.PrmFEG              					= Company.FinanceEnterpriseGroup
							invoked.PrmUniqueID         					= PayablesInvoice.UniqueID
							invoked.PrmCodeBlock        					= each.DistributionAccount
							invoked.PrmGLDate           					= PayablesInvoice.DistributionDate
							invoked.PrmTransAmount      					= LocalDistributionAmount
							invoked.PrmCurrencyAmounts.FunctionalAmount     = ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ProjectAmount	    = ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount1        = ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount2        = ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount3        = ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount4        = ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount5        = ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount      = ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount2     = ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount3     = ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount





					
			else
				for each POAndLineAOCRel.CommittedPurchaseOrderLineDistributionsRel
					
			     	if (each.DistributionByAmount)
				   		LocalDistributionAmount = ((each.DistributionAmount/POAndLineAOCRel.DerivedDistributionAmount) * LocalPassedCommitAmount)
			   		else
			   		if (each.DistributionByPercent)
			   			LocalDistributionAmount = (each.DistributionPercent * LocalPassedCommitAmount)
			   		else
			    		LocalDistributionAmount = ((each.DistributionQuantity/POAndLineAOCRel.Quantity) * LocalPassedCommitAmount)






					if (PurchaseOrder entered)
						Currency = PurchaseOrder.Currency
        			else
        				Currency = Company.Currency
					if (action type.Create
					or  action type.Update 
					or  action type.Delete)
						initialize ReportCurrencyAmount
						TransientTransactionCodeBlock                       = each.DistributionAccount
						TransientCurrencyTable         						= Company.CurrencyTable
						TransientAccountingEntity      						= Company.AccountingEntity
						TransientExchangeDate          						= PayablesInvoice.DistributionDate
						TransientPostingDate           						= PayablesInvoice.DistributionDate
						TransientFromCurrency          						= PayablesInvoice.InvoiceCurrency
						LocalCurrencyAmount                             	= LocalDistributionAmount
						TransientCurrencyAmount                         	= LocalDistributionAmount
						ReportCurrencyAmount.UseDerivedCalculations         = true
						LocalForceCalculation	       						= ReportCurrencyAmount.AssignToCurrency
						LocalForceCalculation 	       						= ReportCurrencyAmount.DerivedCalculationsComplete
						
						invoke CreateBudgetTemplateReversal each.GLCommitRel
							invoked.PrmFEG              					= Company.FinanceEnterpriseGroup
							invoked.PrmUniqueID         					= PayablesInvoice.UniqueID
							invoked.PrmCodeBlock        					= each.DistributionAccount
							invoked.PrmGLDate           					= PayablesInvoice.DistributionDate
							invoked.PrmTransAmount      					= LocalDistributionAmount
							invoked.PrmCurrencyAmounts.FunctionalAmount     = ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ProjectAmount	    = ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount1        = ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount2        = ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount3        = ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount4        = ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.ReportAmount5        = ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount      = ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount2     = ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
							invoked.PrmCurrencyAmounts.AlternateAmount3     = ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount

			if (action type.Update)
				for each InvoiceDistributionsForPurchaseOrderLineRel
    				invoke SetGLCommitForRebuild each

						if (PurchaseOrderLine not entered)
							if (AddOnCharge.AddOnChargeType.Allowance)
								if (EnteredUnitCost < POAndLineAOCRel.DerivedDistributionAmount)
									invoked.PrmHasPriorYearPOCommit    = true
									invoked.PrmSkipBudgetRebuild       = false
								else
									invoked.PrmHasPriorYearPOCommit = false
									invoked.PrmSkipBudgetRebuild    = true  
							else 
								if (EnteredUnitCost > POAndLineAOCRel.DerivedDistributionAmount)
									invoked.PrmHasPriorYearPOCommit    = true
									invoked.PrmSkipBudgetRebuild       = false
								else
									invoked.PrmHasPriorYearPOCommit = false
									invoked.PrmSkipBudgetRebuild    = true  
						else 
							if (EnteredQuantity > POAndLineAOCRel.DerivedQuantity
							or  TotalDistributionAmount > POAndLineAOCRel.DerivedDistributionAmount)
								invoked.PrmHasPriorYearPOCommit    = true
								invoked.PrmSkipBudgetRebuild       = false
							else
							if (EnteredQuantity <= POAndLineAOCRel.DerivedQuantity
							and  TotalDistributionAmount <= POAndLineAOCRel.DerivedDistributionAmount)
								invoked.PrmHasPriorYearPOCommit = false
								invoked.PrmSkipBudgetRebuild    = true  
	Derived Fields
		ChangeCompleteMsg is a MessageField
			restricted
			"ChangeComplete"
			
		ChangeCompleteDistributionsUpdatedMsg is a MessageField
			restricted
			"ChangeComplete:DistributionsUpdated"

		InvoiceOutOfBalanceMsg is a MessageField
			restricted
			"DetailsOrTaxOutOfBalance"
			
		OutputNumberOfDecimals is a DerivedField		
			type is Numeric 1
			if (PayablesInvoice.InvoiceCurrency entered)
				return PayablesInvoice.InvoiceCurrency.NumberOfDecimals
			else
				return 2
					

		DerivedRoundTo is a DerivedField		
    		type is Decimal 5.4
    		restricted
    		if (OutputNumberOfDecimals = 2)
    			return .01
    		else
    		if (OutputNumberOfDecimals = 0)
    			return 1
    		else
    		if (OutputNumberOfDecimals = 3)
    			return .001
    		else
    		if (OutputNumberOfDecimals = 4)
    			return .0001

		UnmatchedQuantity is a DerivedField		
			type is like Quantity

    		initialize LocalUnmatchedQuantity
    		if (PurchaseOrderLine.ItemType.Service
    		or  PurchaseOrder.Dropship)
    			LocalUnmatchedQuantity = POAndLineAOCRel.Quantity - POAndLineAOCRel.MatchedQuantity
    		else
    			if (POAndLineAOCRel.ReceivedQuantity > POAndLineAOCRel.Quantity)
    				LocalUnmatchedQuantity = POAndLineAOCRel.ReceivedQuantity - POAndLineAOCRel.MatchedQuantity
    			else
        			LocalUnmatchedQuantity = POAndLineAOCRel.Quantity - POAndLineAOCRel.MatchedQuantity
        		if ((PurchaseOrderLine.ItemType.Inventoried
        		or   PurchaseOrderLine.ItemType.NonStock)
        		and (Item.CatchWeightCode.NotCatchWeight
        		or   Item.CatchWeightCode.IssueRequiresBoth
        		or   Item.CatchWeightCode not entered)
        		and  POAndLineAOCRel.ReceivedQuantity entered
        		and PurchaseOrderLine.EnteredBuyUOMMultiplier entered
        		and PurchaseOrderLine.VendorPriceUOMMultiplier entered)
        			UOMCalculation.InputQuantity				= POAndLineAOCRel.ReceivedQuantity
        			UOMCalculation.InputUOMConversion			= PurchaseOrderLine.EnteredBuyUOMMultiplier
        			UOMCalculation.InputToUOMConversion			= PurchaseOrderLine.VendorPriceUOMMultiplier
        			UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
        			LocalUnmatchedQuantity 		= UOMCalculation.OutputQuantity
    			for each PayablesInvoiceAddOnChargesSet6Rel
    				if (each.Status = 0)
    					LocalUnmatchedQuantity -= each.MatchedQuantity


    		return LocalUnmatchedQuantity

        DerivedDistributionAmount is a DerivedField
	    	type is like InternationalAmount
	    	restricted
	    	
    		DerivedDistributionAmount	      = (MatchedQuantity * MatchUnitCost)
    		round DerivedDistributionAmount to nearest DerivedRoundTo
    		return DerivedDistributionAmount
	    		
	    DerivedUnroundedDistributionAmount is a DerivedField
	    	type is like InternationalAmount
	    	restricted
    		return (MatchedQuantity * MatchUnitCost) 
	    		
        DerivedBaseAmount is a DerivedField
	    	type is like InternationalAmount
	    	restricted
			if (Currency not entered)				
				Currency = PayablesInvoice.InvoiceCurrency
			LocalBaseAmount.ToCurrency			= Company.Currency
			LocalBaseAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			LocalFromCurrency					= PayablesInvoice.InvoiceCurrency

			TransientCurrencyAmount				= TotalDistributionAmount	
			LocalExchangeDate 					= PayablesInvoice.InvoiceDate
			return LocalBaseAmount.OutputCurrencyAmount

        DerivedTotalBaseUnitCost is a DerivedField
	    	type is like InternationalAmount
	    	restricted
			LocalBaseAmount.ToCurrency			= Company.Currency
			LocalBaseAmount.EnteredCurrencyRate	= PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			LocalFromCurrency					= PayablesInvoice.InvoiceCurrency
			LocalBaseAmount.EnteredCurrencyAmount	= MatchUnitCost + (TaxAmount / MatchedQuantity)
			LocalExchangeDate 					= PayablesInvoice.InvoiceDate
			return LocalBaseAmount.OutputCurrencyAmount

		AdjustmentType is a DerivedField
			type is Alpha 10
			if (PayablesInvoice.CreditOrDebitMemo)
				if  (PayablesInvoiceAddOnCharge = 1)
					return "Cost"
				else
				if  (PayablesInvoiceAddOnCharge = 2)
					return "Quantity"

		DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsQuantity
			else
			if (ItemType.Special
			or  ItemType.Service)
				InventoryCompanyRel.NumberOfDecimalsQuantity
			else
				4
				
		DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsCost
			else
			if (ItemType.Special
			or  ItemType.Service)
				InventoryCompanyRel.NumberOfDecimalsCost
			else
				8
		MatchTaxAmount is a DerivedField
			type is like InternationalAmount
        	restricted
			if (HeaderSpreadAddOnCharge)
				return TaxAmount
			else			
        	if  (PayablesInvoice.MatchStatus.Unmatched
        	and (InvoicedTaxAmount entered 
        	or   AccruedTaxAmount entered))
        		return InvoicedTaxAmount
        	else
				return TaxAmount

        DisplayAddOnChargeAmount is a DerivedField
	    	type is like InternationalAmount
			if (AddOnChargeAmount entered)
				return AddOnChargeAmount
			else
				return TotalAddOnChargeAmount

		FirstPaymentCheckDate is a DerivedField
			type is Date
			return first PayablesInvoice.PayablesInvoicePayment set.CheckDate

		DerivedTaxAmount is a DerivedField
        	type is like InternationalAmount
			restricted

			if (TaxCode entered)
				if  (TaxCode.TaxType.TaxTableCode)
					return TaxAmount + AccruedTaxAmount 
				else 
				if  (TaxAmount entered)
					return TaxAmount
				else
					return AccruedTaxAmount


		LandedTax is a DerivedField
        	type is like InternationalAmount
			restricted
			if (TaxCode entered)
				if (!TaxCode.TaxType.CalculatedRate)


					initialize CalculateTax
					CalculateTax.TaxableAmount							= TotalDistributionAmount
					CalculateTax.InvoiceAmount							= TotalDistributionAmount

					if  (PayablesInvoice.InvoiceType.CreditMemo
					and  CalculateTax.TaxableAmount > 0)
						CalculateTax.TaxableAmount							*= -1
						CalculateTax.InvoiceAmount							*= -1

					include PopulateCalculateTaxInputFields
			
					if (TaxCode.TaxType.CalculatedRate)
						CalculateTax.Function			 				= CalculateTax.Function.CalculateTaxRate
					else
						CalculateTax.Function			 				= CalculateTax.Function.CalculateTax
						

					if (TaxEntityRel.ThirdParty.TaxEngine)
						CalculateTax.TaxAmount = 0
					else
						LocalCalculateTaxExecuted 							= CalculateTax.ExecuteCalculateTax
	

	
					return CalculateTax.DerivedTotalLandedTaxAmount5DP

        DerivedEnteredUnitCost is a DerivedField
	    	type is like InternationalCost
	    	restricted
			if (CreatedDuringSpread = 1)
				return (TotalDistributionAmount / EnteredQuantity)
			else
				return EnteredUnitCost

        DerivedMatchUnitCost is a DerivedField
	    	type is like InternationalCost
	    	restricted
			if (CreatedDuringSpread = 1)
				return (TotalDistributionAmount / MatchedQuantity)
			else
				return MatchUnitCost

        DerivedReceiptLinkMatchedQuantity is a DerivedField
	    	type is like Quantity
	    	restricted
			return sum PurchaseOrderReceiptInvoiceLinkSet5Rel.MatchedQuantity

		SumOfDistributions is a DerivedField
			type is like InternationalAmount
			restricted
			if (MiscellaneousDetail)
				SumOfDistributions = (sum MiscellaneousDistributionsRel.DistributionAmount.CurrencyAmount)
			else
			if (PurchaseOrderLine entered)
				SumOfDistributions = (sum InvoiceDistributionsForPurchaseOrderLineRel.DistributionAmount.CurrencyAmount)
			else
				SumOfDistributions = (sum InvoiceDistributionsForContractLineRel.DistributionAmount.CurrencyAmount)			

    		round SumOfDistributions to nearest DerivedRoundTo
    		return SumOfDistributions


		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value	
		
		BODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			if(DerivedRequiredCleanDocId = "Y" and PayablesInvoice.FSMBODConfigurationRel exists)
				if(DerivedConfigFEG="Y")
					LocalBODAccountingEntity = Company.FinanceEnterpriseGroup + DerivedDelimiter + Company
				else
					LocalBODAccountingEntity= Company
				if (FSMBODCrossReferenceDetailRel.DestinationValue entered)
					LocalBODAccountingEntity = FSMBODCrossReferenceDetailRel.DestinationValue
				return LocalBODAccountingEntity
			else
				return Company.FinanceEnterpriseGroup + DerivedDelimiter + Company.AccountingEntity
		
		BODVendorTaxID	is a DerivedField
			type is AlphaUpper size 22
			restricted
			return Vendor.TaxID
		
		BODInvoiceCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.InvoiceCurrency
		
		BODPayCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.PayCurrency
		
		BODReportCurrencyOne is a DerivedField
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.PayCurrency
		
		DerivedLedger is a DerivedField	
			type is AlphaUpper size 20
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.Ledger
		
		DerivedChartAccount is a DerivedField	
			type is AlphaUpper size 26
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.GeneralLedgerChartAccount
		
		DerivedProject is a DerivedField	
			type is AlphaUpper size 25
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.Project
		
		DerivedAccountingUnit is a DerivedField	
			type is AlphaUpper size 25
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.AccountingUnit
		
		DerivedFinanceDimension1 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.FinanceDimension1
		
		DerivedFinanceDimension2 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.FinanceDimension2
		
		DerivedFinanceDimension3 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.FinanceDimension3
		
		DerivedFinanceDimension4 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.FinanceDimension4
		
		DerivedFinanceDimension5 is a DerivedField	
			type is AlphaUpper size 15
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.FinanceDimension5
		
		DerivedFinanceDimension6 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.FinanceDimension6
		
		DerivedFinanceDimension7 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.FinanceDimension7
		
		DerivedFinanceDimension8 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.FinanceDimension8
		
		DerivedFinanceDimension9 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.FinanceDimension9
		
		DerivedFinanceDimension10 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAccount.FinanceDimension10
		
		DerivedReportCurrency is a DerivedField	
			type is AlphaUpper size 5
			restricted
			return PayablesInvoice.InvoiceAmount.FinanceEnterpriseGroup.ReportCurrencyOne
		
		DerivedAlternateCurrencyRate is a DerivedField	
			type is AlphaUpper size 31
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAmount.AlternateAmount.EnteredCurrencyRate
		
		DerivedAlternateCurrencyRate2 is a DerivedField	
			type is AlphaUpper size 31
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAmount.AlternateAmount2.EnteredCurrencyRate
			
		BODDistributionDate is a DerivedField
			type is Date
			restricted
			BODDistributionDate = DetailDistributionsForInvoiceChargeRel.DistributionDate
			return BODDistributionDate
		
		AlphaDistributionDate is a DerivedField
			type is Alpha size 20
			restricted
			return BODDistributionDate
		
		DerivedDistributionDate is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaDistributionDate[1:4] + "-" + AlphaDistributionDate[5:6] + "-" + AlphaDistributionDate[7:8]
		
		DerivedDistributionStatus is a DerivedField	
			type is Alpha size 20
			restricted
			if	(DetailDistributionsForInvoiceChargeRel.Status.Unreleased)
				return "Unreleased"
			if	(DetailDistributionsForInvoiceChargeRel.Status.Released)
				return "Released"
			if	(DetailDistributionsForInvoiceChargeRel.Status.Historical)
				return "Historical"
			if	(DetailDistributionsForInvoiceChargeRel.Status.Pending)
				return "Pending"
			if	(DetailDistributionsForInvoiceChargeRel.Status.Approved)
				return "Approved"
			else
				return "Rejected"
		
		DerivedDistCurrencyAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAmount.CurrencyAmount
		
		DerivedEnteredCurrencyAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount	
		
		DerivedReportAmount1 is a DerivedField	
			type is like InternationalAmount
			restricted
			return DetailDistributionsForInvoiceChargeRel.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
		
		DerivedBaseCurrencyConversionRate is a DerivedField
			type is  Decimal size 31.15
			restricted
			if(BaseCurrencyConversionRate = "0E-15")
				return 0
			else 
				return BaseCurrencyConversionRate
			
		DerivedPayablesInvoiceDistribution is a DerivedField
			type is  Alpha size 6
			restricted
			return DetailDistributionsForInvoiceChargeRel.PayablesInvoiceDistribution
		
		DerivedToAccountingEntity is a DerivedField	
			type is AlphaUpper size 25
			restricted
			if(DerivedRequiredCleanDocId = "Y" and PayablesInvoice.FSMBODConfigurationRel exists)
				if(DerivedConfigFEG="Y")
					LocalBODAccountingEntity = Company.FinanceEnterpriseGroup + DerivedDelimiter + Company
				else
					LocalBODAccountingEntity= Company
				if (FSMBODCrossReferenceDetailRel.DestinationValue entered)
					LocalBODAccountingEntity = FSMBODCrossReferenceDetailRel.DestinationValue
				return LocalBODAccountingEntity
			else
				return DetailDistributionsForInvoiceChargeRel.DistributionAccount.ToAccountingEntity
			
		DerivedDescription is a DerivedField	
			type is AlphaUpper size 100
			restricted
			return DetailDistributionsForInvoiceChargeRel.Description
		DerivedRequiredCleanDocId is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "RequiredCleanDocumentID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
				
		DerivedAOCDescription is a DerivedField 
			type is Alpha size 60
			return AddOnCharge.Description
		DerivedConfigFEG is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "IsMultipleFEG"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value		
				

	
		DerivedPurchaseOrder is a DerivedField 
			type is like PurchaseOrder
			if (PayablesInvoice.MultiplePurchaseOrders)
				return blank
			else
				return PayablesInvoice.FirstPurchaseOrder

		DerivedLine is a DerivedField
			type is Numeric size 6
			restricted
			if (ContractLine not entered)
				return PurchaseOrderLine.LineNumber
			else
				return ContractLine
				
    Conditions
        AddOnChargeNotTaxable
            classic name is AOC-APPROVAL
            restricted
            when (AddOnCharge entered
            and   TaxCode not entered)

		IsAccruedTax
			restricted
			when (TaxCode entered
			and  ((PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.AccruedOrInvoiced.Accrued)
			or		(!PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
			and    PayablesInvoice.TaxEntityRel.AccruedOrInvoiced.Accrued)))
			
		IsInvoicedTax
			restricted
			when (TaxCode entered
			and  ((PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.AccruedOrInvoiced.Invoiced)
			or		(!PayablesInvoice.TaxEntityRel.UseTaxCodeAccounts
			and    PayablesInvoice.TaxEntityRel.AccruedOrInvoiced.Invoiced)))

        ItemAddOnCharge
            classic name is LINEAOCAPPROVL
            restricted
            when (PurchaseOrderLine entered)

        MiscellaneousAddOnCharge
            classic name is MISCAOCAPPROVL
            restricted
            when (PurchaseOrderLine not entered
			and ContractLine not entered)

        LineAddOnCharge
            restricted
            when (PurchaseOrderLine entered)

        NonInventory
            restricted
            when (not ItemType.Inventoried)

		ValidatePO
            restricted
			when ((Vendor.ValidatePurchaseOrder.Yes)
			or    (!Vendor.ValidatePurchaseOrder.No
			and     Vendor.VendorClass.ValidatePurchaseOrder.Yes)
			or    (!Vendor.ValidatePurchaseOrder.No
			and    !Vendor.VendorClass.ValidatePurchaseOrder.No
			and     Company.ValidatePurchaseOrder))

        IsRegularPayablesInvoice
            classic name is REGULAR-INV
            restricted
            when (InvoiceType.Invoice)

        LineHasRetainage
            classic name is RETAINAGE-INV
            restricted
            when (RetainagePercent entered)

		MatchInvoiceReferenceInContext
            restricted
			when (MatchInvoiceReference in context)
			
		AllowQuantityAdjustment
            restricted
			when ((MatchInvoiceReferenceInContext
			or     PayablesInvoice.MatchProcessType.ServiceContract)
			and   !PayablesInvoice.InvoiceType.CreditMemo
			and   !MemoQuantityAddOnChargeRel exists)
									
		AllowCostAdjustment
            restricted
			when ((MatchInvoiceReferenceInContext
			or     PayablesInvoice.MatchProcessType.ServiceContract)
			and   !PayablesInvoice.InvoiceType.CreditMemo
			and   !MemoCostAddOnChargeRel exists)

		CreditForRebill
			restricted
			when (PayablesInvoice.InvoiceType.CreditMemo
			and   PayablesInvoice.InvoiceSource = "Y" 
			and   PayablesInvoice.MatchInvoiceReferenceRel exists)
																					
		AllowCreditForRebill
			when ((MatchInvoiceReferenceInContext
			or     PayablesInvoice.MatchProcessType.ServiceContract)
			and   !PayablesInvoice.CreditOrDebitMemo
			and   !MemoCostAddOnChargeRel exists)
												
		CostAdjustment
            restricted
			when (PayablesInvoice.CreditOrDebitMemo
			and   PayablesInvoiceAddOnCharge = 1)
												
		QuantityAdjustment
            restricted
			when (PayablesInvoice.CreditOrDebitMemo
			and   PayablesInvoiceAddOnCharge = 2)

		AllowUpdate
            restricted
			when (PayablesInvoice.IsUpdateable
			and   !PayablesInvoice.BackgroundProcessing.MatchInvoice)


		SupplierAllowUpdate
			restricted 
			when (AllowUpdate
			and   PayablesInvoice.SupplierCreatedInvoiceStatus = 1)

		AllowDelete
			restricted
			when (PayablesInvoice.IsUpdateable
			and   AddOnCharge.SpreadMethod.NoSpread
			and   !PayablesInvoice.BackgroundProcessing.MatchInvoice)
			
		SupplierAllowDelete 
			restricted 
			when (PayablesInvoice.SupplierCreatedInvoiceStatus = 1)

		HeaderSpreadAddOnCharge
            restricted
			when (PayablesInvoiceSpreadAddOnChargeRel exists)

		WithinInvoiceDateRange
			restricted
			when (InvoiceDateRange not entered
			or	  PayablesInvoice.InvoiceDate within InvoiceDateRange)
									
		WithinPaymentDateRange
			restricted
			when (PaymentDateRange not entered
			or	  FirstPaymentCheckDate within PaymentDateRange)
									
		CopyPOLineDistributionsValid
            restricted
			when  (PurchaseOrderLine entered
			and    PayablesInvoice.IsUpdateable
			and   (!ItemType.Inventoried
			or     !LandedAddOnCharge))

		CopyContractLineDistributionsValid
            restricted
			when  (ContractLine entered
			and    PayablesInvoice.IsUpdateable
			and   (!ItemType.Inventoried
			or     !LandedAddOnCharge))
			
        WithinCompanyGroupFilter
            restricted
            when (GeneralLedgerCompanyGroup not entered
            or    GLCompanyGroupMemberRel exists)
        
        GLCompanyGroupMemberRelExists
            restricted
            when (GLCompanyGroupMemberRel exists)

		MiscellaneousDetail
    		when (PurchaseOrderLine not entered
    		and   ContractLine not entered)
		
		DistributionsInBalance
			when (TotalDistributionAmount = SumOfDistributions
			or    SumOfDistributions = 0)
	
		ShowCreateFromPO
			when (PayablesInvoice.PurchaseOrderInvoice
			and   !PayablesInvoice.MatchProcessType.ServiceContract
			and    PayablesInvoice.IsUpdateable)

		PurchaseOrderEntered
			restricted
			when (PurchaseOrder entered)

		PurchaseOrderExists
			restricted
			when (PurchaseOrderRel exists)

		TaxEntityUsesThirdPartyTax
			when (PayablesInvoice.TaxEntityUsesThirdPartyTax)

		AllowOverrideOneSourceTaxAmount
		    when (PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic

		    and   PayablesInvoice.IsNotMatched)
		    
		OneSourceGeneric
			when (TaxEntityRel.ThirdParty.Sabrix
			and   PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic)

		TaxOverridden 
			when (OneSourceGeneric 
			and   TaxAmount != PayablesInvoiceAddOnChargeTaxRel.CalculatedTaxAmount)		

		AllowMatchPrepaymentAddOnChargeDelete
			restricted 
			when (PayablesInvoice.MatchPrepaymentMethod.PrepayFromInvoice
			and   PayablesInvoice.Status.Released
			and   PayablesInvoice.MatchStatus < 2
			and   AddOnCharge.SpreadMethod.NoSpread)

		ThirdPartyTaxHasBeenCalculated 
			when (PayablesInvoiceAddOnChargeTaxRel exists)
    Relations
        InventoryCompanyRel
        	one-to-one relation to InventoryCompany
        	Field Mapping uses symbolic key
        		related.Company		= Company

       	TaxEntityRel				 
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
                related.TaxEntity 				= Company.AccountingEntity
                
		TaxConfigurationRel						
        	one-to-one relation to TaxConfiguration
        	Field Mapping uses symbolic key
				related.TaxConfiguration		= Company.FinanceEnterpriseGroup

 		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
 				related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup	 
 				related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode

        ItemRel
        	one-to-one relation to Item
        	Field Mapping uses symbolic key
        		related.ItemGroup		= InventoryCompanyRel.ItemGroup
        		related.Item			= PurchaseOrderLine.Item
        
        InventoryLocationRel
            classic name is LOCATION
            one-to-one relation to InventoryLocation
            required
            Field Mapping uses symbolic key
                related.Company           = Company
                related.InventoryLocation = Location

        MatchPurchaseOrderInvoiceRel
        	one-to-one relation to MatchPurchaseOrderInvoice
        	Field Mapping uses Set2
        		related.Company				= Company
        		related.Vendor				= Vendor
                related.PayablesInvoice		= PayablesInvoice
        		related.PurchaseOrder		= PurchaseOrder

		MatchPurchaseOrderInvoiceAnyVendorRel
			one-to-many relation to MatchPurchaseOrderInvoice
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrder				= PurchaseOrder
				related.PayablesInvoice				= PayablesInvoice

        PayablesInvoiceAddOnChargesRel
        	one-to-many relation to PayablesInvoiceAddOnCharge
        	Field Mapping uses Set1		
        		related.Company					= Company
        		related.Vendor                  = Vendor
        		related.PayablesInvoice			= PayablesInvoice
        
        PayablesInvoiceAddOnChargesWithTaxRel
        	one-to-many relation to PayablesInvoiceAddOnCharge
        	Field Mapping uses Set1
        		related.Company					= Company
        		related.Vendor                  = Vendor
        		related.PayablesInvoice			= PayablesInvoice
        	Instance Selection
        		where (related.TaxCode			= LocalTaxCode)
        		
        PayablesInvoiceAddOnChargesSet6Rel
        	one-to-many relation to PayablesInvoiceAddOnCharge
        	Field Mapping uses Set6
        		related.Company					= Company
        		related.PurchaseOrder			= PurchaseOrder
        		related.PurchaseOrderLine		= PurchaseOrderLine
        		related.Vendor                  = Vendor
        		related.AddOnCharge				= AddOnCharge        	        		
        
        PayablesInvoiceDetailRel
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByCompanyVendorPayablesInvoice
                related.Company                 = Company
                related.Vendor                  = Vendor
                related.PayablesInvoice			= PayablesInvoice
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine       = PurchaseOrderLine
                related.Contract				= Contract
                related.ContractLine	        = ContractLine
            Instance Selection
                where (related.MatchDetailKey   = MatchDetailKey)

		PayablesInvoiceDetailsRel
			one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByCompanyVendorPayablesInvoice
                related.Company 				= Company
                related.Vendor  				= Vendor
                related.PayablesInvoice 		= PayablesInvoice

		PayablesInvoiceDetailWithTaxRel
			one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByCompanyVendorPayablesInvoice
                related.Company 				= Company
                related.Vendor  				= Vendor
                related.PayablesInvoice 		= PayablesInvoice
            Instance Selection
            	where (related.TaxCode			= LocalTaxCode)

		PayablesInvoiceAddOnChargeTaxRel
			one-to-one relation to PayablesInvoiceAddOnChargeTax
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.PayablesInvoice		= PayablesInvoice
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
				related.Contract			= Contract
				related.ContractLine		= ContractLine
				related.AddOnCharge					= AddOnCharge
				related.PayablesInvoiceAddOnCharge	= PayablesInvoiceAddOnCharge

        PayablesInvoiceRetainageDistributionRel
            one-to-many relation to PayablesInvoiceRetainageDistribution
            Field Mapping uses Set3
                related.Company = Company
            Instance Selection
                where (related.PurchaseOrder 	= PurchaseOrder
                and   related.PayablesInvoiceRetainageDistribution.PayablesMatchLine 		 = PurchaseOrderLine
				and   related.PayablesInvoiceRetainageDistribution.PayablesInvoice	= PayablesInvoice
                and   related.Vendor 			= Vendor
                and   related.PayablesInvoiceRetainageDistribution.PayablesInvoice.Invoice   = PayablesInvoice.Invoice
                and   related.PayablesInvoiceRetainageDistribution.PayablesInvoice.Suffix    = PayablesInvoice.Suffix)

		PurchaseOrderLineDistributionRel
			one-to-many relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
                related.Company							= Company
                related.PurchaseOrder					= PurchaseOrder
                related.PurchaseOrderLine				= PurchaseOrderLine
                related.AddOnCharge						= LocalAddOnCharge

		ContractLineDistributionsRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup					= Company.VendorGroup
                related.Contract     					= Contract
                related.ContractLine					= ContractLine

		InvoiceDistributionsForPurchaseOrderLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= PurchaseOrderLine
				and 	related.PayablesInvoiceDetail						= PayablesInvoiceAddOnCharge
				and     related.AddOnCharge 								= AddOnCharge
				and     related.TaxCode 									= blank
				and     related.NotMatchCreated)
			
		TaxDistributionsForPurchaseOrderLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= PurchaseOrderLine
				and 	related.PayablesInvoiceDetail						= PayablesInvoiceAddOnCharge
				and     related.AddOnCharge 								= AddOnCharge
				and     related.TaxCode 									= LocalTaxCode
				and     related.NotMatchCreated)
			
		InvoiceDistributionsForContractLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchasingContract							= Contract
				and     related.ContractLine								= ContractLine
				and 	related.PayablesInvoiceDetail						= PayablesInvoiceAddOnCharge
				and     related.AddOnCharge 								= AddOnCharge
				and     related.TaxCode 									= blank
				and     related.NotMatchCreated)
			
		TaxDistributionsForContractLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchasingContract							= Contract
				and     related.ContractLine								= ContractLine
				and 	related.PayablesInvoiceDetail						= PayablesInvoiceAddOnCharge
				and     related.AddOnCharge 								= AddOnCharge
				and     related.TaxCode 									= LocalTaxCode
				and     related.NotMatchCreated)

		TaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PayablesInvoice	= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= PurchaseOrderLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceAddOnCharge
				and     related.PurchasingContract							= Contract
				and     related.ContractLine								= ContractLine
				and     related.AddOnCharge 								= AddOnCharge
				and     related.TaxCode entered)

		MiscellaneousDistributionsRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= blank
				and     related.PurchasingContract							= Contract
				and     related.ContractLine								= blank
				and 	related.PayablesInvoiceDetail						= PayablesInvoiceAddOnCharge
				and     related.AddOnCharge 								= AddOnCharge
				and     related.TaxCode 									= blank
				and     related.NotMatchCreated)
			
		MiscellaneousTaxDistributionsRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= blank
				and     related.PurchasingContract							= Contract
				and     related.ContractLine								= blank
				and 	related.PayablesInvoiceDetail						= PayablesInvoiceAddOnCharge
				and     related.AddOnCharge 								= AddOnCharge
				and     related.TaxCode 									= LocalTaxCode
				and     related.NotMatchCreated)

		AllDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses ByPayablesInvoiceSuffixPOLine
				related.Company							= Company
				related.Vendor							= Vendor
				related.PayablesInvoice					= PayablesInvoice
                related.Suffix                          = blank
                related.PurchaseOrder                   = PurchaseOrder
                related.PurchaseOrderLine               = PurchaseOrderLine
			Instance Selection
				where  (related.AddOnCharge 								= AddOnCharge
				and     related.PurchasingContract							= Contract
				and     related.ContractLine								= ContractLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceAddOnCharge
				and     related.DistributionType.Distribution)
									
		POAndLineAOCRel
			one-to-one relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
				related.AddOnCharge			= AddOnCharge
		
		ContractLineAOCRel
			one-to-one relation to ContractLineAOC
			Field Mapping uses part of key
				related.ContractGroup		= Contract.ContractGroup
				related.Contract			= Contract
				related.ContractLine		= ContractLine
				related.ContractLineAOC		= AddOnCharge
		
        PurchaseOrderReceiptInvoiceLinkRel
            one-to-one relation to PurchaseOrderReceiptInvoiceLink

            Field Mapping uses symbolic key
                related.Company                                                  = Company
                related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt     = PurchaseOrderReceipt
                related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine = PurchaseOrderLine
                related.PurchaseOrderReceiptInvoiceLink.MatchObjectID            = MatchObjectID
                related.PurchaseOrderReceiptInvoiceLink.MatchSequence            = MatchSequence
                related.PurchaseOrderReceiptInvoiceLink.AddOnCharge              = AddOnCharge

        PurchaseOrderReceiptInvoiceLinkSet4Rel
            one-to-many relation to PurchaseOrderReceiptInvoiceLink
            Field Mapping uses Set4
                related.Company                                                  = Company
                related.PurchaseOrderReceiptInvoiceLink.MatchObjectID            = MatchObjectID
                related.PurchaseOrderReceiptInvoiceLink.MatchSequence            = MatchSequence
			Instance Selection
            	where (related.PurchaseOrder	= PurchaseOrder
                and    related.PurchaseOrderReceiptInvoiceLink.AddOnCharge       = AddOnCharge)

        PurchaseOrderReceiptInvoiceLinkSet5Rel
            one-to-many relation to PurchaseOrderReceiptInvoiceLink
            Field Mapping uses Set5
                related.Company                                                 	= Company
                related.PurchaseOrder            									= PurchaseOrder
                related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine 	= PurchaseOrderLine
			Instance Selection
            	where (related.PurchaseOrderReceiptInvoiceLink.AddOnCharge 			= AddOnCharge
                and    related.PurchaseOrderReceiptInvoiceLink.MatchObjectID		= MatchObjectID
            	and    related.Type = "MA"
            	and    related.Status.Processed)

        PurchaseOrderReceiptLineAOCRel
            one-to-many relation to PurchaseOrderReceiptLineAOC
            Field Mapping uses Set3
                related.Company = Company
            Instance Selection
            	where (related.PurchaseOrder	= PurchaseOrder)

        MiscReceiptLineAOCRel
            one-to-many relation to PurchaseOrderReceiptLineAOC
            Field Mapping uses Set2
                related.Company = Company
                related.Vendor = Vendor
                related.PurchaseOrder = PurchaseOrder
            Instance Selection
            	where (related.PurchaseOrderReceiptLine	= blank
            	and    related.AddOnCharge				= AddOnCharge)

        ReceiptLineAOCByMatchObjectIdRel
            one-to-many relation to PurchaseOrderReceiptLineAOC
            Field Mapping uses Set5
                related.Company 						= Company
				related.MatchObjectID					= MatchObjectID
            Instance Selection
            	where (related.PurchaseOrderReceiptLine	= PurchaseOrderReceiptLine)

		PurchaseOrderReceiptLineSet4Rel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses Set4
				related.Company						= Company
                related.PurchaseOrder				= PurchaseOrder
                related.ShipToLocation				= Location
                related.MatchDetailKey				= MatchDetailKey
                related.PurchaseOrderLine			= PurchaseOrderLine







        OriginalInvoiceAddOnChargeRel
            one-to-many relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 						= Company
                related.PayablesInvoice 				= MatchInvoiceReferenceRel.OriginalInvoice
                related.PurchaseOrder  					= PurchaseOrder
                related.PurchaseOrderLine    			= PurchaseOrderLine
                related.Contract	  					= Contract
                related.ContractLine    				= ContractLine
                related.AddOnCharge						= AddOnCharge

        MemoCostAddOnChargeRel
            one-to-one relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 						= Company
                related.PayablesInvoice 				= MatchInvoiceReference.PayablesInvoice
                related.PurchaseOrder  					= PurchaseOrder
                related.PurchaseOrderLine    			= PurchaseOrderLine
                related.Contract	  					= Contract
                related.ContractLine    				= ContractLine
                related.AddOnCharge						= AddOnCharge
                related.PayablesInvoiceAddOnCharge		= 1

        MemoQuantityAddOnChargeRel
            one-to-one relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 						= Company
                related.PayablesInvoice 				= MatchInvoiceReference.PayablesInvoice
                related.PurchaseOrder  					= PurchaseOrder
                related.PurchaseOrderLine    			= PurchaseOrderLine
                related.Contract	  					= Contract
                related.ContractLine    				= ContractLine
                related.AddOnCharge						= AddOnCharge
                related.PayablesInvoiceAddOnCharge		= 2

        MatchInvoiceReferenceRel
            one-to-one relation to MatchInvoiceReference
            Field Mapping uses symbolic key
                related.Company               			= Company
                related.Vendor                			= Vendor
                related.PayablesInvoice					= PayablesInvoice

        MatchRefOriginalInvoiceAddOnChargeRel
            one-to-one relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 						= Company
                related.PayablesInvoice 				= MatchInvoiceReferenceRel.OriginalInvoice
                related.PurchaseOrder  					= PurchaseOrder
                related.PurchaseOrderLine    			= PurchaseOrderLine
                related.Contract	  					= Contract
                related.ContractLine    				= ContractLine
                related.AddOnCharge						= AddOnCharge
                related.PayablesInvoiceAddOnCharge		= LocalOriginalInvoiceAddOnCharge

        DuplicateAddOnChargeRel 
            one-to-many relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 						= Company
                related.PayablesInvoice 				= PayablesInvoice
                related.PurchaseOrder  					= PurchaseOrder
                related.PurchaseOrderLine    			= PurchaseOrderLine
                related.Contract	  					= Contract
                related.ContractLine    				= ContractLine
                related.AddOnCharge						= AddOnCharge
			Instance Selection 
				where (related.PurchaseOrderReceipt = PurchaseOrderReceipt 
				and    related.PurchaseOrderReceiptLine = PurchaseOrderReceiptLine)

        SameAddOnChargeRel 
            one-to-many relation to PayablesInvoiceAddOnCharge
            Field Mapping uses symbolic key
                related.Company 						= Company
                related.PayablesInvoice 				= PayablesInvoice
                related.PurchaseOrder  					= PurchaseOrder
                related.PurchaseOrderLine    			= PurchaseOrderLine
                related.Contract	  					= Contract
                related.ContractLine    				= ContractLine
                related.AddOnCharge						= AddOnCharge

        PurchaseOrderSpreadAddOnChargeRel
            one-to-one relation to PurchaseOrderSpreadAddOnCharge
            Field Mapping uses symbolic key
                related.Company                                		= Company
                related.PurchaseOrder								= PurchaseOrder
                related.AddOnCharge 								= AddOnCharge

        GLCompanyRel
            one-to-one relation to GeneralLedgerCompany
            Field Mapping uses symbolic key
                related.Company			 				= Company

        EntityTaxCodeRel
            classic name is TAXCODE
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= GLCompanyRel.FinanceEnterpriseGroup
                related.TaxEntity 				= GLCompanyRel.AccountingEntity
                related.TaxCode 				= TaxCode


		ProcurementGroupRel
			one-to-one relation to ProcurementGroup			
			Field Mapping uses symbolic key
				related.ProcurementGroup			= Vendor.VendorGroup

		PayablesInvoiceSpreadAddOnChargeRel
			one-to-one relation to PayablesInvoiceSpreadAddOnCharge
			Field Mapping uses symbolic key
				related.Company 									= Company
				related.PayablesInvoice								= PayablesInvoice
				related.AddOnCharge									= AddOnCharge
				
        GLCompanyGroupMemberRel
            one-to-one relation to GeneralLedgerCompanyGroupMember
            Field Mapping uses symbolic key
                related.GeneralLedgerCompanyGroup    = GeneralLedgerCompanyGroup
                related.Company                        = Company

		LocalPOLineDistributionRel
			one-to-one relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
                related.Company							= Company
                related.PurchaseOrder					= PurchaseOrder
                related.PurchaseOrderLine				= PurchaseOrderLine
                related.AddOnCharge						= blank
                related.PurchaseOrderLineDistribution	= LocalPOLineDistribution

		LocalContractLineDistributionRel
			one-to-one relation to ContractLineDistribution
			Field Mapping uses symbolic key
        		related.ContractGroup      				= Company.VendorGroup
				related.Contract						= Contract
				related.ContractLine					= ContractLine
                related.ContractLineDistribution		= LocalContractLineDistrib

		LocalPOLineRel
			one-to-one relation to PurchaseOrderLine
			Field Mapping uses symbolic key
                related.Company							= Company
                related.PurchaseOrder					= LocalPurchaseOrder
                related.PurchaseOrderLine				= LocalPurchaseOrderLine

		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "AP"	
		
		POGeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "PO"	

        TaxRateRel								
        	one-to-many relation to TaxRate
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
        		related.TaxCode					= TaxCode
        		related.ProductTaxCategory		= ProductTaxCategory
        	Instance Selection
                where (related.EffectiveDate 	<= LocalEffectiveDate)

        PurchaseOrderRel
            one-to-one relation to PurchaseOrder
            Field Mapping uses symbolic key
                related.Company          = Company
                related.PurchaseOrder    = PurchaseOrder

		OneSourceUserAttributesRel						
			one-to-many relation to OneSourceUserAttribute
			delete cascades
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID) 				

		TaxLineItemRel	
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
				related.LineItemNumber						= PayablesInvoiceAddOnCharge
			Instance Selection
			    where (related.InvoiceNumber = Invoice)

		OneCallTaxLineItemRel2	
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= PayablesInvoice.UniqueID
			Instance Selection
			    where (related.InvoiceNumber = PayablesInvoice.Invoice 
				and    related.RelatedObjectReference 		= reference to this instance)
				
		LocalInventoryLocationRel  
		    one-to-one relation to InventoryLocation
		    Field Mapping uses symbolic key
				related.Company						= Company
				related.InventoryLocation			= LocalInventoryLocation

		LocalAutoMatchResultInvoiceRel
			one-to-one relation to AutoMatchResultInvoice
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.AutoMatchResult			= LocalAutoMatchResult
				related.PayablesInvoice			= LocalPayablesInvoice

 		ReconDetailRel
			one-to-one relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company                 						= Company
				related.MatchWork										= PayablesInvoice.MatchReconQueueRel.MatchWork
				related.PayablesInvoice									= PayablesInvoice
				related.PurchaseOrder									= PurchaseOrder
				related.PurchaseOrderLine								= PurchaseOrderLine
				related.Contract										= Contract
				related.ContractLine									= ContractLine
                related.AddOnCharge										= AddOnCharge
				related.MatchWorkInvoiceAddOnCharge						= PayablesInvoiceAddOnCharge




		DetailDistributionsForInvoiceChargeRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
				
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and 	related.PurchaseOrderLine							= PurchaseOrderLine
				and 	related.PayablesInvoiceDetail						= PayablesInvoiceAddOnCharge
				and 	related.AddOnCharge 								= AddOnCharge)

		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter

		FSMBODCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField 		= "CSFGLC"
				related.FSMBODCrossReference.DestinationField 	= "DESTAE"
			Instance Selection
				where (related.SourceValue	= LocalBODAccountingEntity)

		
    Sets











        Set3
            indexed
            Sort Order
                Company

				PayablesInvoice
                PurchaseOrder
                MatchDetailKey
                PurchaseOrderLine
                PayablesInvoiceAddOnCharge
                AddOnCharge
                Contract
                ContractLine

        Set6 
            indexed
            Sort Order
                Company
                PurchaseOrder
                PurchaseOrderLine
                Vendor
                AddOnCharge
                PayablesInvoice
                Contract
                ContractLine
                PayablesInvoiceAddOnCharge














        Set9
            indexed
            Instance Selection
                where (IsRegularPayablesInvoice)
            Sort Order
                Company
                MatchObjectID
                MatchSequence
                Vendor
                PayablesInvoice
                PurchaseOrder
                PurchaseOrderLine
                AddOnCharge
                Contract
                ContractLine
                PayablesInvoiceAddOnCharge

        Set1 
            not indexed
            Sort Order
                Company
                Vendor
                PayablesInvoice
                PurchaseOrder
                PurchaseOrderLine
                AddOnCharge
                Contract
                ContractLine
                PayablesInvoiceAddOnCharge

        OldSet1
            not indexed
            Sort Order
                Company
                Vendor
                Invoice
                Suffix
                CancelSequence
                PurchaseOrder
                PurchaseOrderLine
                AddOnCharge
                Contract
                ContractLine
                PayablesInvoiceAddOnCharge














    Field Rules
		Vendor
			required
			cannot be changed
			default to PayablesInvoice.Vendor

        TransientCurrencyTable
            default to PayablesInvoice.CurrencyTable
            required

        Currency
        	default to PurchaseOrder.Currency
        	default to Company.Currency
        	if (PayablesInvoice.InvoiceCurrency != Company.Currency)
        		CurrencyExchange.ToCurrency = Company.Currency
        		LocalOutputCurrencyAmount = CurrencyExchange.OutputCurrencyAmount

        PayablesInvoiceAddOnCharge
	       	if  (!PayablesInvoice.IsChargeback
        	and  (PurchaseOrderLine entered
        	or    ContractLine entered))
	        	constraint (!PayablesInvoice.MatchProcessType.Expense)
        			"InvoiceMustBePO,Dropship,OrAddOnChargeInvoice"		
        		
			if (!BypassAllowUpdate)
    	    	constraint (AllowUpdate)
        			"InvoiceIsNotUpdateable"
        		
			if  (PurchaseOrder entered)
	        	if (!PayablesInvoice.IsChargeback)
					constraint (MatchPurchaseOrderInvoiceAnyVendorRel exists)
						"PurchaseOrderIsNotLinkedToThisInvoice"

	        	constraint (PurchaseOrder.Released)
	        		"PurchaseOrderMustBeReleased"			
	        		
	        	constraint (!PurchaseOrder.Canceled)
	        		"PurchaseOrderIsCanceled"				
	        		
	        	if (!PayablesInvoice.InvoiceType.CreditMemo)
		        	constraint (!PurchaseOrder.Closed.Yes)
		        		"PurchaseOrderIsClosed"					
	        		
		LandedAddOnCharge
			if (POAndLineAOCRel exists)
				default to POAndLineAOCRel.LandedAddOnCharge
			else 
				default to AddOnCharge.LandedAddOnCharge 

		MatchDetailKey
			if  (PurchaseOrderLine entered)
				force default to PurchaseOrderLine.MatchDetailKey
			else
			if  (ItemType.Inventoried 
			or   ItemType.NonStock)
				force default to Item

			cannot be changed
			







		ZeroCost
			default to POAndLineAOCRel.ZeroCost

		TrackType
			force default to AddOnCharge.TrackType

		PurchaseOrder
			initial value is DerivedPurchaseOrder

	SubType MiscellaneousAddOnCharge Field Rules

		MatchedQuantity
			force default to 1

		EnteredQuantity
			force default to 1

		TotalDistributionAmount
			if (!ZeroCost)
				required

			if (POAndLineAOCRel exists)
				default to POAndLineAOCRel.DerivedDistributionAmount

			if (RecordSource.CreatedWithinMatch
			and PayablesInvoice.IsChargeback)
				NextSentence = true
			else
			if (CreditForRebill
			and AddOnCharge.AddOnChargeType.Cost)
				if (TotalDistributionAmount >= 0)
					TotalDistributionAmount *= -1
			else
			if (AddOnCharge.AddOnChargeType.Cost)
				if (!PayablesInvoice.InvoiceType.CreditMemo)
					constraint (TotalDistributionAmount >= 0)
						"CostTypeAddOnCharge;CannotEnterNegativeTotalOrUnitCost"	
				else
					constraint (TotalDistributionAmount <= 0)
						"CostTypeAddOnCharge;EnterNegativeValueForCreditMemo"

			if  (CreditForRebill)
				cannot be changed
					"CannotChangeAmountOnCreditForRebill"

		RecordSource
			default to "LM"
			
		DistributionDate
			force default to PayablesInvoice.DistributionDate

		MiscellaneousAccount
			TransientAccountingEntity         							= Company.AccountingEntity
			required
			
			if (PayablesInvoice.TaxEntityUsesSabrix
			and PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Original)

				initialize LocalPurchaseOrder
				initialize LocalPurchaseOrderLine
				initialize LocalExtendedAmount
				for each PayablesInvoice.MatchPurchaseOrderInvoicesRel
					for each each.PurchaseOrder.PurchaseOrderLineRel
						if (each.ExtendedAmount > LocalExtendedAmount)
							LocalExtendedAmount				= each.ExtendedAmount
							LocalPurchaseOrder				= each.PurchaseOrder
							LocalPurchaseOrderLine			= each.PurchaseOrderLine

				MiscellaneousAccount = LocalPOLineRel.first PurchaseOrderLineDistributionRel.DistributionAccount
				if  (MiscellaneousAccount not entered)
					MiscellaneousAccount = AddOnCharge.PostingAccount
				else
				if  (MiscellaneousAccount.GeneralLedgerChartAccount entered)
					MiscellaneousAccount.GeneralLedgerChartAccount = AddOnCharge.PostingAccount.GeneralLedgerChartAccount
			
			if (POAndLineAOCRel exists)
				default to POAndLineAOCRel.Account
			else
				default to AddOnCharge.PostingAccount
				
			if (POAndLineAOCRel exists)
				constraint (MiscellaneousAccount = POAndLineAOCRel.Account)
					"AddOnChargeIsOnPurchaseOrder,AccountMustMatch.LeaveBlankToDefault"

	SubType LineAddOnCharge Field Rules        
		Item
			force default to PurchaseOrderLine.Item
			cannot be changed

		ItemType
			force default to PurchaseOrderLine.ItemType
			cannot be changed

		MatchDetailKey
			force default to PurchaseOrderLine.MatchDetailKey
			cannot be changed
			
		Location
			force default to PurchaseOrderLine.ShipToLocation

        EnteredUnitCost
        
			if  (CreditForRebill)
				cannot be changed
					"CannotChangeUnitCostOnCreditForRebill"

			if (!ZeroCost
			and !CreditForRebill)
				if (TotalDistributionAmount not entered)
					required
						"UnitCostOrTotalCostIsRequiredForItem\A\O\CApproval"		
	
	        	if (EnteredQuantity entered)
	        		required
						"UnitCostRequiredIfQuantityEntered"

				if  (!PayablesInvoice.IsMemoOnly)
		        	if (AddOnCharge.AddOnChargeType.Allowance)
		        		if (EnteredUnitCost > 0)
		        			EnteredUnitCost *= -1
		        	else
		        	if (AddOnCharge.AddOnChargeType.Cost)
		        		constraint (EnteredUnitCost >= 0)
		        			"CostType_\A\O\C;CannotEnterNegativeUnitCost"		
	        	
				if (PayablesInvoice.MatchProcessType.AOCOnly)
					NextSentence = true 
				else 
				if (PayablesInvoice.InvoiceType.CreditMemo)
					if  (AddOnCharge.AddOnChargeType.Allowance)
						if  (EnteredUnitCost < 0)
							EnteredUnitCost *= -1
					else
					if  (AddOnCharge.AddOnChargeType.Cost)
						if  (CostAdjustment
						and  EnteredUnitCost > 0)
							EnteredUnitCost *= -1
						if  (QuantityAdjustment
						and  EnteredUnitCost < 0)
							EnteredUnitCost *= -1
				else 				       		
				if (PayablesInvoice.InvoiceType.DebitMemo)
					if  (AddOnCharge.AddOnChargeType.Allowance)
						if  (EnteredUnitCost > 0)
							EnteredUnitCost *= -1
					else
					if  (AddOnCharge.AddOnChargeType.Cost)
						if  (CostAdjustment
						and  EnteredUnitCost < 0)
							EnteredUnitCost *= -1
						if  (QuantityAdjustment
						and  EnteredUnitCost > 0)
							EnteredUnitCost *= -1

		EnteredQuantity

			if  (CreditForRebill)
				cannot be changed
					"CannotChangeQuantityOnCreditForRebill"

			default to UnmatchedQuantity
				        
			if  (PayablesInvoice.InvoiceType.CreditMemo
			and !CreditForRebill
			and  AddOnCharge.AddOnChargeType.Cost
			and  QuantityAdjustment
			and  EnteredQuantity > 0)
				EnteredQuantity *= -1

        InvoiceLineTaxable
        	if (OneSourceGeneric)
        	    InvoiceLineTaxable = true
        	else
        	if (TaxCode entered)
	        	InvoiceLineTaxable = true
	        else
	        	InvoiceLineTaxable = false
        
        LocalMaxDecimalsCost
    		default to Item.NumberOfDecimalsCost
    		default to 5

		LocalMaxDecimalsQty
			if (PurchaseOrderLine.ItemType.Inventoried
			or  PurchaseOrderLine.ItemType.NonStock)
				default to ItemRel.NumberOfDecimalsQuantity
			else
				default to InventoryCompanyRel.NumberOfDecimalsQuantity
        
        TaxCode


			if  (CreditForRebill)
				NextSentence = true
			else
			if  (action type.Create)
        		include TaxCodeDefaultingRules



        	if (!PayablesInvoice.InvoiceType.CreditMemo
        	and  POAndLineAOCRel.TaxCode not entered
        	and !POAndLineAOCRel.Taxable
			and !initiating action = "PayablesInvoiceSpreadAddOnCharge.RecalculateSpreadAOC")	
        		constraint (PayablesInvoice.TaxAdjustment.NoTax
        		or          PayablesInvoice.TaxAdjustment.OverrideProductAndAOC)
        			"CannotOverridePurchaseOrderOrLineTax"	

			if ((PayablesInvoice.TaxAdjustment.OverrideProductAndAOC
			or   PayablesInvoice.TaxAdjustment.OverrideTaxablePOAndAOC)
			and  !PayablesInvoice.MatchProcessType.Expense
			and  !PayablesInvoice.DoOneSourceAfter
			and  !PayablesInvoice.CallVertexByDocument
			and  !TaxEntityRel.ThirdParty.TaxEngine) 
				CalculateTax.Function		= CalculateTax.Function.Inquire
				CalculateTax.TaxEntity		= Company.AccountingEntity	
				CalculateTax.TaxCode		= TaxCode
				LocalCalculateTax = CalculateTax.ExecuteCalculateTax
					constraint (CalculateTax.OutputErrorNumber not entered)
						"CalculateTax.OutputErrorMessage"
        
        TaxType
        	default to PayablesInvoice.TaxType
        	if (TaxCode.TaxType.CalculatedRate)
        		initialize LocalTaxDone
        		for each PayablesInvoiceDetailsRel
        			if (each.TaxCode = PayablesInvoice.TaxCode
        			and each.TaxAmount entered)
        				LocalTaxDone = true
        				end for each
        		if (!LocalTaxDone)
        			for each PayablesInvoiceAddOnChargesRel
	        			if (each.TaxCode = PayablesInvoice.TaxCode
	        			and each.TaxAmount entered)
	        				LocalTaxDone = true
	        				end for each
        
        TotalDistributionAmount

			if  (!PayablesInvoice.IsMemoOnly)
	            if (AddOnCharge.AddOnChargeType.Allowance)
    	    		if (TotalDistributionAmount > 0)
        				TotalDistributionAmount *= -1
	        	else
    	    	if (AddOnCharge.AddOnChargeType.Cost)
        			constraint (TotalDistributionAmount >= 0)
        				"CostTypeA\O\C;CannotEnterNegativeDistributionTotal"		

			if  (CreditForRebill)
				cannot be changed
					"CannotChangeAmountOnCreditForRebill"


	Create Rules

		if  (BypassTaxDefault)
		    NextSentence = true
		else
		if (TaxCode not entered
		and !TaxEntityRel.ThirdParty.Sabrix 
		and !CreditForRebill)

			if  (PurchaseOrderLine entered
			and !HeaderSpreadAddOnCharge
			and !PayablesInvoice.InvoiceType.CreditMemo)
				if  (!PayablesInvoice.TaxAdjustment.IgnoreProductOnly
				and  !PayablesInvoice.TaxAdjustment.Calculate
				and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
					TaxCode = POAndLineAOCRel.TaxCode
					if  (PayablesInvoice.TaxAdjustment.OverrideProductAndAOC)
						TaxCode = PayablesInvoice.TaxCode
					else
					if  (PayablesInvoice.TaxAdjustment.OverrideTaxablePOAndAOC)
						if  (PurchaseOrderLine.TaxCode entered)
							TaxCode = PayablesInvoice.TaxCode

					if (TaxCode entered)
						InvoiceLineTaxable = true
					

	Create Exit Rules
		display "999AOCCreateExit" 
		if (CreditForRebill)
			display "999CreditForRebill"
			NextSentence = true
		else
		if (ItemType.Inventoried
		and LandedAddOnCharge)
			NextSentence = true
		else
		if (RecordSource.CreatedWithinMatch
		and !PayablesInvoice.MatchProcessType.ServiceContract
		and PayablesInvoice.IsChargeback)
			NextSentence = true
		else
			if  (PurchaseOrderLine entered)
				BypassBudgetEdit  = true
				if  (!LandedAddOnCharge)
					if (POAndLineAOCRel exists)
						WorkDistributionAccount		= POAndLineAOCRel.Account
					else
						WorkDistributionAccount		= AddOnCharge.PostingAccount
					WorkGLTransactionAmount			= TotalDistributionAmount
					include InvokeDistributionCreate
				else
					include CopyPOLineDistributionsRuleBlock

			else 
			if (ContractLine entered)
				BypassBudgetEdit  = true
				if  (!LandedAddOnCharge)
					WorkDistributionAccount			= AddOnCharge.PostingAccount
					WorkGLTransactionAmount			= TotalDistributionAmount
					include InvokeDistributionCreate
				else
					include CopyContractLineDistributionsRuleBlock
			else
				if (MiscellaneousAccount entered)
					WorkDistributionAccount			= MiscellaneousAccount
				else
					WorkDistributionAccount			= AddOnCharge.PostingAccount
				WorkGLTransactionAmount				= TotalDistributionAmount

				if  (PayablesInvoice.CostComponentMatch
				and  MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount entered
				and  TotalDistributionAmount > MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
				and (PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount entered
				or   Company.AddOnChargeDifferenceAccount entered))
					WorkGLTransactionAmount						= first MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
					include InvokeDistributionCreate

					if  (AddOnCharge.AddOnChargeDifferenceAccount entered)
						WorkDistributionAccount				= AddOnCharge.AddOnChargeDifferenceAccount 
					else
					if  (PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount entered)
						WorkDistributionAccount				= PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount
					else
					if  (Company.AddOnChargeDifferenceAccount entered)
						WorkDistributionAccount				= Company.AddOnChargeDifferenceAccount

					WorkGLTransactionAmount						= TotalDistributionAmount - first MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
					include InvokeDistributionCreate
				else
					include InvokeDistributionCreate
		

			if  (TaxCode entered
			and  !PayablesInvoice.DoOneSourceAfter
			and  !PayablesInvoice.CallVertexByDocument
			and  !TaxCode.TaxType.CalculatedRate
			and  (!RecordSource.CreatedWithinMatch
			or    !PayablesInvoice.InvoiceType.MatchPrepayment)		
			and  ((!PayablesInvoice.TaxAdjustment.Calculate
			and    !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
			or     CreatedDuringSpread = 1))

					if  (PurchaseOrderLine entered)
						BypassBudgetEdit  = true
						ProcessingTax = true
						if  (!LandedAddOnCharge)

							include MiscOrNonLandedTaxDistribution
						else
							include CopyPOLineDistributionsRuleBlock
						ProcessingTax = false
					else 
					if (ContractLine entered)
						BypassBudgetEdit  = true
						ProcessingTax = true
						if  (!LandedAddOnCharge)
							include MiscOrNonLandedTaxDistribution
						else
							include CopyContractLineDistributionsRuleBlock
						ProcessingTax = false
					else
						ProcessingTax = true
		
						include MiscOrNonLandedTaxDistribution

						ProcessingTax = false
			
		if (!BypassInvoiceErrorChecking
		and !PayablesInvoice.InterfaceInProcess)
			invoke InvoiceUpdate PayablesInvoice

		if  (PurchaseOrder entered 
		or   PurchaseOrderLine entered
		or   ContractLine entered)
			if (!PayablesInvoice.IsMemoOnly)
				include CheckPOCommitments

    Actions
        Create is a Create Action
        	restricted
			Field Rules
				PurchaseOrderLine
					if (PurchaseOrder entered)		
						required
			Entrance Rules
			
				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency

	        	if (EnteredUnitCost entered
	        		and !CreateFromBatchSwitch)
    	    		constraint (TotalDistributionAmount not entered)
						"EnterOnly_\A\O\CUnitCostOrDistributionTotal,NotBoth"		

				constraint (!DuplicateAddOnChargeRel exists) 
					"DuplicateAddOnCharge"                   

				if (PurchaseOrderLine entered
				and PurchaseOrderLine.Contract entered)
				    Contract 		= PurchaseOrderLine.Contract
				    ContractLine 	= PurchaseOrderLine.ContractLine

			Action Rules
		        if (CreateFromBatchSwitch entered)
		        	if  (Vendor not entered)
		        	    Vendor = PayablesInvoice.Vendor
		        	if  (MatchDetailKey not entered
		        	and  PurchaseOrderLine entered)
		        		MatchDetailKey = PurchaseOrderLine.MatchDetailKey
		            if (EnteredQuantity not entered
		            and PayablesInvoiceDetailRel exists)
		            	EnteredQuantity = first PayablesInvoiceDetailRel.EnteredQuantity
		            if (EnteredQuantity not entered)
		            	EnteredQuantity = POAndLineAOCRel.DerivedQuantity
		            if (EnteredQuantity not entered)
		            	EnteredQuantity = 1
					if (AddOnCharge.SpreadMethod.Rate
					and TotalAddOnChargeAmount not entered
					and AddOnChargePercent entered)
						TotalAddOnChargeAmount = AddOnChargePercent * PurchaseOrderLine.LineAmount
		            if (EnteredUnitCost not entered)
		                EnteredUnitCost = (TotalAddOnChargeAmount / EnteredQuantity)
		            MatchedQuantity = EnteredQuantity
		            MatchUnitCost = EnteredUnitCost
		            TotalDistributionAmount 	= DerivedDistributionAmount
			        TotalBaseAmount				= DerivedBaseAmount
			        if  (AddOnChargeAmount not entered)
			        	AddOnChargeAmount		= TotalDistributionAmount

				else
				if  (PurchaseOrderLine entered
				or ContractLine entered)	
					if  (EnteredQuantity not entered
					and  POAndLineAOCRel exists)
						EnteredQuantity = UnmatchedQuantity
						
					if  (EnteredUnitCost not entered
					and  TotalAddOnChargeAmount entered)
						EnteredUnitCost = TotalAddOnChargeAmount / EnteredQuantity

					include UpdateQuantityAmountAndCost									 
        	Exit Rules
        		ActionType = ActionType.CreateType
				include CreateAndUpdateRules
				include ProcessDetailTax

		CreateMiscellaneousAddOnCosts is a Create Action		
			Field Rules
				PurchaseOrderLine
					cannot be entered
				
			Entrance Rules
				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency
				TransientPostingDate        = PayablesInvoice.DistributionDate
				TransientExchangeDate       = PayablesInvoice.DistributionDate
				if (PurchaseOrder not entered)
					PurchaseOrder = PayablesInvoice.FirstPurchaseOrder
				
				constraint (!DuplicateAddOnChargeRel exists) 
					"DuplicateAddOnCharge"                   
					
				constraint (AddOnCharge.SpreadMethod.NoSpread)
					"CannotUseASpreadAddOnChargeCode"						

				if (PayablesInvoice.TaxEntityUsesSabrix)
					NextSentence = true
				else
				if (AddOnCharge.AddOnChargeType.Cost)
					constraint (!AddOnCharge.LandedAddOnCharge)
						"CannotAddAMiscellaneousAddOnChargeThatIsLanded"			
				else
				if (AddOnCharge.AddOnChargeType.Allowance)
					constraint (!AddOnCharge.LandedAddOnCharge)	
						"CannotAddAMiscellaneousAllowanceThatIsLanded"		
			
				include MiscellaneousUpdate

				if  (CreditForRebill)
					display "999Reverse"
					include ReverseOriginalDistributions
				else
					include MiscellaneousTaxCodeRules


		CreateFromBatch is a Create Action
			restricted
			Action Rules
				CreateFromBatchSwitch = true
				invoke Create this instance
						
        CreateFromSpread is a Create Action
        	restricted
        	bypass field rules
        	Entrance Rules

				constraint (!DuplicateAddOnChargeRel exists) 
					"DuplicateAddOnCharge"                   

				LocalAccountingEntity 				= Company.AccountingEntity
				LocalFromCurrency					= PayablesInvoice.InvoiceCurrency
				TrackType							= AddOnCharge.TrackType
				if (POAndLineAOCRel exists)
					LandedAddOnCharge = POAndLineAOCRel.LandedAddOnCharge 
				else
					LandedAddOnCharge = AddOnCharge.LandedAddOnCharge 
				LocalAccountingEntity = Company.AccountingEntity
	        	if (TaxCode entered)
		        	InvoiceLineTaxable = true
	        	else
	        		InvoiceLineTaxable = false

        		if (RecordSource not entered)
					if (PurchaseOrderSpreadAddOnChargeRel exists)
						RecordSource = "IS"
					else
						RecordSource = "MS"

		        TotalBaseAmount				= DerivedBaseAmount

				if (PurchaseOrderLine entered
				and PurchaseOrderLine.Contract entered)
				    Contract 		= PurchaseOrderLine.Contract
				    ContractLine 	= PurchaseOrderLine.ContractLine

				Invoice						= PayablesInvoice.Invoice

        	Exit Rules
				include ProcessDetailTax

        Update is an Update Action
        	valid when (AllowUpdate)
			completion message is "<LocalCompletionMessage>"
			Entrance Rules				
				LocalAccountingEntity 			= Company.AccountingEntity
				LocalFromCurrency				= PayablesInvoice.InvoiceCurrency
				TransientPostingDate        	= PayablesInvoice.DistributionDate
				TransientExchangeDate       	= PayablesInvoice.DistributionDate
				LocalCompletionMessage 			= ChangeCompleteMsg

				if (initiating action = "PayablesInvoiceDetail.Update"
				and EnteredQuantity changed)
					EnteredUnitCost = (TotalAddOnChargeAmount / EnteredQuantity)
					MatchedQuantity = EnteredQuantity
					MatchUnitCost = EnteredUnitCost

				if (MiscellaneousAddOnCharge)
					include MiscellaneousUpdate
					
        	Action Rules
				OldTotalDistributionAmount 		= old TotalDistributionAmount
				OldTaxCode						= old TaxCode
				OldMatchedQuantity				= old MatchedQuantity
				OldMatchUnitCost				= old MatchUnitCost
				OldEnteredQuantity				= old EnteredQuantity
				OldEnteredUnitCost				= old EnteredUnitCost
				OldMiscellaneousAccount 		= old MiscellaneousAccount

        		if (PurchaseOrderLine entered
				or ContractLine entered)	
        			ActionType = ActionType.UpdateType
					include CreateAndUpdateRules
					include ProcessDetailTax
					TotalBaseAmount				= DerivedBaseAmount			
				else	
					include MiscellaneousTaxCodeRules

			Exit Rules
				if (CreditForRebill)
					NextSentence = true
				else
				if (ItemType.Inventoried
				and LandedAddOnCharge)
					NextSentence = true
				else
					if (TaxCode != OldTaxCode
					and OldTaxCode entered)
						include DeleteTaxDistributions

					if (EnteredQuantity != OldEnteredQuantity 
					or  EnteredUnitCost != OldEnteredUnitCost
					or  MiscellaneousAccount != OldMiscellaneousAccount)
						if  (PurchaseOrderLine entered)
							invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForPurchaseOrderLineRel
								invoked.ParmDeleteAndAdd = true
							if (PayablesInvoice.UnsubmittedSupplierPOInvoice)
								BypassBudgetEdit = true
							if  (!LandedAddOnCharge)
								if (POAndLineAOCRel exists)
									WorkDistributionAccount			= POAndLineAOCRel.Account
								else
									WorkDistributionAccount			= AddOnCharge.PostingAccount
								WorkGLTransactionAmount				= TotalDistributionAmount
								include InvokeDistributionCreate
							else
								include CopyPOLineDistributionsRuleBlock
							LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg
						else
						if  (ContractLine entered
						and (instance count of InvoiceDistributionsForContractLineRel = 1)) 
							invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForContractLineRel
								invoked.ParmDeleteAndAdd = true
							if  (!LandedAddOnCharge)
								WorkDistributionAccount				= AddOnCharge.PostingAccount
								WorkGLTransactionAmount				= TotalDistributionAmount
								include InvokeDistributionCreate
							else
								include CopyContractLineDistributionsRuleBlock
							LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg
						else
						if  (PurchaseOrderLine not entered
						and  ContractLine not entered)
							invoke DeleteInvoiceDetailDistributions MiscellaneousDistributionsRel
								invoked.ParmDeleteAndAdd = true
							if (PayablesInvoice.UnsubmittedSupplierPOInvoice)
								BypassBudgetEdit = true
							if (MiscellaneousAccount entered)
								WorkDistributionAccount			= MiscellaneousAccount
							else
								WorkDistributionAccount			= AddOnCharge.PostingAccount
							WorkGLTransactionAmount				= TotalDistributionAmount

							if  (PayablesInvoice.CostComponentMatch
							and  MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount entered
							and  TotalDistributionAmount > MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
							and (PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount entered
							or   Company.AddOnChargeDifferenceAccount entered))
								WorkGLTransactionAmount						= first MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
								include InvokeDistributionCreate
			
								if  (AddOnCharge.AddOnChargeDifferenceAccount entered)
									WorkDistributionAccount				= AddOnCharge.AddOnChargeDifferenceAccount 
								else
								if  (PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount entered)
									WorkDistributionAccount				= PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount
								else
								if  (Company.AddOnChargeDifferenceAccount entered)
									WorkDistributionAccount				= Company.AddOnChargeDifferenceAccount
			
								WorkGLTransactionAmount						= TotalDistributionAmount - first MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
								include InvokeDistributionCreate
							else
								include InvokeDistributionCreate
								
							LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg

					if  ((EnteredQuantity != OldEnteredQuantity	
					or    EnteredUnitCost != OldEnteredUnitCost
					or    MiscellaneousAccount != OldMiscellaneousAccount
					or    TaxCode != OldTaxCode)
					and  (TaxCode entered 
					or    OldTaxCode entered))

						if  (PurchaseOrderLine entered
						and (instance count of InvoiceDistributionsForPurchaseOrderLineRel = 1)) 

							if  (TaxCode = OldTaxCode)  
								include DeleteTaxDistributions
	
							if  (TaxCode entered
							and  !PayablesInvoice.DoOneSourceAfter
							and  !PayablesInvoice.CallVertexByDocument
							and  !TaxCode.TaxType.CalculatedRate
							and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly
							and  !PayablesInvoice.TaxAdjustment.Calculate
							and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
								ProcessingTax = true
								if  (!LandedAddOnCharge)
									include MiscOrNonLandedTaxDistribution
								else
									include CopyPOLineDistributionsRuleBlock
								ProcessingTax = false
						else
						if  (ContractLine entered
						and (instance count of InvoiceDistributionsForContractLineRel = 1)) 
							if  (TaxCode = OldTaxCode)  
								include DeleteTaxDistributions
	
							if  (TaxCode entered
							and  !PayablesInvoice.DoOneSourceAfter
							and  !PayablesInvoice.CallVertexByDocument
							and  !TaxCode.TaxType.CalculatedRate
							and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly
							and  !PayablesInvoice.TaxAdjustment.Calculate
							and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
								ProcessingTax = true
								if  (!LandedAddOnCharge)
									include MiscOrNonLandedTaxDistribution
								else
									include CopyContractLineDistributionsRuleBlock
								ProcessingTax = false
						else
						if  (PurchaseOrderLine not entered
						and  ContractLine not entered)

							if  (TaxCode = OldTaxCode)  
								include DeleteTaxDistributions
	
							if  (TaxCode entered
							and  !PayablesInvoice.CallVertexByDocument
							and  !PayablesInvoice.DoOneSourceAfter)
								ProcessingTax = true
								include MiscOrNonLandedTaxDistribution
								ProcessingTax = false
							else 
							if  (TaxCode not entered
							and  !PayablesInvoice.CallVertexByDocument
							and  !PayablesInvoice.DoOneSourceAfter)
								initialize TaxAmount
								InvoiceLineTaxable = false

							
					if  (!PayablesInvoice.IsMemoOnly)
						include CheckPOCommitments

				invoke InvoiceUpdate PayablesInvoice


       	SupplierUpdate is an Update Action
        	valid when (SupplierAllowUpdate)
			completion message is "<LocalCompletionMessage>"
			Entrance Rules				
				LocalAccountingEntity 			= Company.AccountingEntity
				LocalFromCurrency				= PayablesInvoice.InvoiceCurrency
				TransientPostingDate        	= PayablesInvoice.DistributionDate
				TransientExchangeDate       	= PayablesInvoice.DistributionDate
				LocalCompletionMessage 			= ChangeCompleteMsg

				if (MiscellaneousAddOnCharge)
					include MiscellaneousUpdate
					
        	Action Rules
				OldTotalDistributionAmount 		= old TotalDistributionAmount
				OldTaxCode						= old TaxCode
				OldMatchedQuantity				= old MatchedQuantity
				OldMatchUnitCost				= old MatchUnitCost
				OldEnteredQuantity				= old EnteredQuantity
				OldEnteredUnitCost				= old EnteredUnitCost

        		if (PurchaseOrderLine entered)
        			ActionType = ActionType.UpdateType
					include CreateAndUpdateRules
					include ProcessDetailTax
				else	
					include MiscellaneousTaxCodeRules

			Exit Rules
				if (CreditForRebill)
					NextSentence = true
				else
				if (ItemType.Inventoried
				and LandedAddOnCharge)
					NextSentence = true
				else
					if (TaxCode != OldTaxCode
					and OldTaxCode entered)
						include DeleteTaxDistributions

					if (EnteredQuantity != OldEnteredQuantity 
					or  EnteredUnitCost != OldEnteredUnitCost) 
						if  (PurchaseOrderLine entered
						and (instance count of InvoiceDistributionsForPurchaseOrderLineRel = 1)) 
							invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForPurchaseOrderLineRel
								invoked.ParmDeleteAndAdd = true
							if (PayablesInvoice.UnsubmittedSupplierPOInvoice)
								BypassBudgetEdit = true
							if  (!LandedAddOnCharge)
								if (POAndLineAOCRel exists)
									WorkDistributionAccount			= POAndLineAOCRel.Account
								else
									WorkDistributionAccount			= AddOnCharge.PostingAccount
								WorkGLTransactionAmount				= TotalDistributionAmount
								include InvokeDistributionCreate
							else
								include CopyPOLineDistributionsRuleBlock
							LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg
						else
						if  (ContractLine entered
						and (instance count of InvoiceDistributionsForContractLineRel = 1)) 
							invoke DeleteInvoiceDetailDistributions InvoiceDistributionsForContractLineRel
								invoked.ParmDeleteAndAdd = true
							if  (!LandedAddOnCharge)
								WorkDistributionAccount				= AddOnCharge.PostingAccount
								WorkGLTransactionAmount				= TotalDistributionAmount
								include InvokeDistributionCreate
							else
								include CopyContractLineDistributionsRuleBlock
							LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg
						else
						if  (PurchaseOrderLine not entered
						and  ContractLine not entered)
							invoke DeleteInvoiceDetailDistributions MiscellaneousDistributionsRel
								invoked.ParmDeleteAndAdd = true
							if (PayablesInvoice.UnsubmittedSupplierPOInvoice)
								BypassBudgetEdit = true
							if (MiscellaneousAccount entered)
								WorkDistributionAccount			= MiscellaneousAccount
							else
								WorkDistributionAccount			= AddOnCharge.PostingAccount
							WorkGLTransactionAmount				= TotalDistributionAmount

							if  (PayablesInvoice.CostComponentMatch
							and  MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount entered
							and  TotalDistributionAmount > MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
							and (PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount entered
							or   Company.AddOnChargeDifferenceAccount entered))
								WorkGLTransactionAmount						= first MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
								include InvokeDistributionCreate
			
								if  (AddOnCharge.AddOnChargeDifferenceAccount entered)
									WorkDistributionAccount				= AddOnCharge.AddOnChargeDifferenceAccount 
								else
								if  (PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount entered)
									WorkDistributionAccount				= PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount
								else
								if  (Company.AddOnChargeDifferenceAccount entered)
									WorkDistributionAccount				= Company.AddOnChargeDifferenceAccount
			
								WorkGLTransactionAmount						= TotalDistributionAmount - first MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
								include InvokeDistributionCreate
							else
								include InvokeDistributionCreate
								
							LocalCompletionMessage = ChangeCompleteDistributionsUpdatedMsg

					if  ((EnteredQuantity != OldEnteredQuantity	
					or    EnteredUnitCost != OldEnteredUnitCost
					or    TaxCode != OldTaxCode)
					and  (TaxCode entered 
					or    OldTaxCode entered))

						if  (PurchaseOrderLine entered
						and (instance count of InvoiceDistributionsForPurchaseOrderLineRel = 1)) 

							if  (TaxCode = OldTaxCode)  
								include DeleteTaxDistributions
	
							if  (TaxCode entered
							and  !PayablesInvoice.DoOneSourceAfter
							and  !PayablesInvoice.CallVertexByDocument
							and  !TaxCode.TaxType.CalculatedRate
							and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly
							and  !PayablesInvoice.TaxAdjustment.Calculate
							and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
								ProcessingTax = true
								if  (!LandedAddOnCharge)
									include MiscOrNonLandedTaxDistribution
								else
									include CopyPOLineDistributionsRuleBlock
								ProcessingTax = false
						else
						if  (ContractLine entered
						and (instance count of InvoiceDistributionsForContractLineRel = 1)) 
							if  (TaxCode = OldTaxCode)  
								include DeleteTaxDistributions
	
							if  (TaxCode entered
							and  !PayablesInvoice.DoOneSourceAfter
							and  !PayablesInvoice.CallVertexByDocument
							and  !TaxCode.TaxType.CalculatedRate
							and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly
							and  !PayablesInvoice.TaxAdjustment.Calculate
							and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
								ProcessingTax = true
								if  (!LandedAddOnCharge)
									include MiscOrNonLandedTaxDistribution
								else
									include CopyContractLineDistributionsRuleBlock
								ProcessingTax = false
						else
						if  (PurchaseOrderLine not entered
						and  ContractLine not entered)

							if  (TaxCode = OldTaxCode)  
								include DeleteTaxDistributions
	
							if  (TaxCode entered
							and  !PayablesInvoice.CallVertexByDocument
							and  !PayablesInvoice.DoOneSourceAfter)
								ProcessingTax = true
								include MiscOrNonLandedTaxDistribution
								ProcessingTax = false
							else 
							if  (TaxCode not entered
							and  !PayablesInvoice.CallVertexByDocument
							and  !PayablesInvoice.DoOneSourceAfter)
								initialize TaxAmount
								InvoiceLineTaxable = false

							
					if  (!PayablesInvoice.IsMemoOnly)
						include CheckPOCommitments

				invoke InvoiceUpdate PayablesInvoice

        MiscellaneousCostComponentUpdate is an Update Action
        	restricted 
			default label is untranslatable
			Entrance Rules				
				LocalAccountingEntity 			= Company.AccountingEntity
				LocalFromCurrency				= PayablesInvoice.InvoiceCurrency
				TransientPostingDate        	= PayablesInvoice.DistributionDate
				TransientExchangeDate       	= PayablesInvoice.DistributionDate

			Exit Rules

				if  (PayablesInvoice.CostComponentMatch
				and  MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount entered
				and  TotalDistributionAmount > MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
				and (PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount entered
				or   Company.AddOnChargeDifferenceAccount entered))

					invoke DeleteInvoiceDetailDistributions MiscellaneousDistributionsRel
						invoked.ParmDeleteAndAdd = true

					if (PayablesInvoice.UnsubmittedSupplierPOInvoice)
						BypassBudgetEdit = true

					if (MiscellaneousAccount entered)
						WorkDistributionAccount				= MiscellaneousAccount
					else
						WorkDistributionAccount				= AddOnCharge.PostingAccount

					WorkGLTransactionAmount					= first MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
					include InvokeDistributionCreate

					if  (AddOnCharge.AddOnChargeDifferenceAccount entered)
						WorkDistributionAccount				= AddOnCharge.AddOnChargeDifferenceAccount 
					else
					if  (PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount entered)
						WorkDistributionAccount				= PayablesInvoice.ProcessLevel.AddOnChargeDifferenceAccount
					else
					if  (Company.AddOnChargeDifferenceAccount entered)
						WorkDistributionAccount				= Company.AddOnChargeDifferenceAccount

					WorkGLTransactionAmount					= TotalDistributionAmount - first MiscReceiptLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount
					include InvokeDistributionCreate

        FastUpdate is an Update Action
        	bypass field rules
        	restricted
        	Entrance Rules


        	Action Rules
				if (MatchObjectID entered and old MatchObjectID not entered)
					LocalMatched = true

        		LocalTaxCode	= TaxCode
        		if (TransientDifference entered)
					if  (PurchaseOrderLine entered)
						invoke Update first InvoiceDistributionsForPurchaseOrderLineRel
							invoked.DistributionAmount.CurrencyAmount	+= TransientDifference
							invoked.GLTransactionAmount					+= TransientDifference
					else
					if  (ContractLine entered)
						invoke Update first InvoiceDistributionsForContractLineRel
							invoked.DistributionAmount.CurrencyAmount	+= TransientDifference
							invoked.GLTransactionAmount					+= TransientDifference
				else
        		if (TransientTaxDifference entered)
					if  (PurchaseOrderLine entered)
						invoke Update first TaxDistributionsRel
							invoked.DistributionAmount.CurrencyAmount	+= TransientTaxDifference
							invoked.GLTransactionAmount					+= TransientTaxDifference
							invoked.TransientTaxRoundAmt				= TransientTaxDifference
					else
					if  (ContractLine entered)
						invoke Update first TaxDistributionsRel
							invoked.DistributionAmount.CurrencyAmount	+= TransientTaxDifference
							invoked.GLTransactionAmount					+= TransientTaxDifference
							invoked.TransientTaxRoundAmt				= TransientTaxDifference
			Exit Rules

				if  (TaxEntityRel.ThirdParty.VertexOSeries
				and  TaxAmount entered) 
					for each OneCallTaxLineItemRel2 
						invoke Update each 
							invoked.ChargedTax = TaxAmount  

				if (LocalMatched)
					if (OneSourceGeneric
					and !TaxConfigurationRel.DebugMode)				
						invoke Purge OneSourceUserAttributesRel

				if (TaxAdjustAmount entered)
					if  (PurchaseOrderLine entered)
						invoke RestrictedUpdate last TaxDistributionsForPurchaseOrderLineRel
							invoked.DistributionAmount.CurrencyAmount -= TaxAdjustAmount
					else
					if  (ContractLine entered)
						invoke RestrictedUpdate last TaxDistributionsForContractLineRel
							invoked.DistributionAmount.CurrencyAmount -= TaxAdjustAmount
					else
					if  (PurchaseOrderLine not entered)
						invoke RestrictedUpdate last MiscellaneousTaxDistributionsRel
							invoked.DistributionAmount.CurrencyAmount -= TaxAdjustAmount

		CalculateRate is an Update Action
			restricted
			bypass field rules
			Action Rules
				if (!PayablesInvoice.IsMemoOnly
				and !ItemType.Inventoried)
					ProcessingTax = true
					include CopyPOLineDistributionsRuleBlock
					ProcessingTax = false

		CopyContractLineTaxDistributionsOneSource is an Instance Action
			restricted 
			Action Rules

				TransientCurrencyTable 				= PayablesInvoice.CurrencyTable
				OldTaxCode = TaxCode
				include DeleteTaxDistributions

				CalculateTaxHasBeenCalled 		= true
				ProcessingTax 					= true
				BypassBudgetEdit 				= true 

				if  (!LandedAddOnCharge)
					WorkDistributionAccount			= AddOnCharge.PostingAccount
					WorkGLTransactionAmount			= DerivedTaxAmount 
					include InvokeDistributionCreate
				else
					include CopyContractLineDistributionsRuleBlock
					
				ProcessingTax 					= false

		AccrueTax is an Instance Action
			restricted
			Action Rules
				TaxAmount += AccruedTaxAmount
				
        Delete is a Delete Action
        	valid when (AllowDelete)
        	Entrance Rules

				if (PayablesInvoiceSpreadAddOnChargeRel exists		
				and invoking action not = "PayablesInvoiceSpreadAddOnCharge.RecalculateSpreadAOC")
					confirmation required
						"PayablesInvoiceLineAndSpreadAOCLineWillBeDeleted"

				if (PayablesInvoice.Status.Cancelled
				or  PayablesInvoice.CancelSequence entered
				or  initiating action = "PayablesInvoice.CancelReleased")
					NextSentence = true
				else
				if (!PayablesInvoice.IsMemoOnly)
					include CheckPOCommitments
        		        
				if  (PurchaseOrderLine entered)
					for each InvoiceDistributionsForPurchaseOrderLineRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
				else
				if  (ContractLine entered)
					for each InvoiceDistributionsForContractLineRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
				else
					for each MiscellaneousDistributionsRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each

				if  (TaxCode entered)
					OldTaxCode						= TaxCode
					include DeleteTaxDistributions

						
			Exit Rules
				invoke InvoiceUpdate PayablesInvoice

        SupplierDelete is a Delete Action
        	default label is "Delete"
			valid when (SupplierAllowDelete)
        	Entrance Rules
				if (PayablesInvoice.Status.Cancelled
				or  PayablesInvoice.CancelSequence entered
				or  initiating action = "PayablesInvoice.CancelReleased")
					NextSentence = true
				else
				if (!PayablesInvoice.IsMemoOnly)
					include CheckPOCommitments
        		        
				if  (PurchaseOrderLine entered)
					for each InvoiceDistributionsForPurchaseOrderLineRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
				else
				if  (ContractLine entered)
					for each InvoiceDistributionsForContractLineRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each
				else
					for each MiscellaneousDistributionsRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each

				if  (TaxCode entered)
					OldTaxCode						= TaxCode
					include DeleteTaxDistributions

				if  (HeaderSpreadAddOnCharge)
					invoke FastUpdate PayablesInvoiceSpreadAddOnChargeRel
						invoked.SpreadAmount	-= TotalDistributionAmount
						
			Exit Rules
				invoke InvoiceUpdate PayablesInvoice

        DeleteNoInvoiceUpdate is a Delete Action
        	restricted
        	Action Rules
				if (PayablesInvoice.Status.Cancelled
				or  PayablesInvoice.CancelSequence entered
				or  initiating action = "PayablesInvoice.CancelReleased")
					NextSentence = true
				else
				if (!PayablesInvoice.IsMemoOnly)
					include CheckPOCommitments

				if  (PayablesInvoice.CanceledInvoice)
					NextSentence = true
				else
				if (PayablesInvoice.Company.FinanceEnterpriseGroup.BODTrigger	
				and PayablesInvoice.TransientInUnmatch)										
					NextSentence = true
				else
				if  ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
        		or    GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				and PayablesInvoice.TransientInUnmatch)							
					NextSentence = true
				else
					if  (PurchaseOrderLine entered)
						for each InvoiceDistributionsForPurchaseOrderLineRel
							if (each.IsOpenDistribution)
								invoke DeleteInvoiceDetailDistributions each
									invoked.ParmDeleteAndAdd = true
					else
					if  (ContractLine entered)
						for each InvoiceDistributionsForContractLineRel
							if (each.IsOpenDistribution)
								invoke DeleteInvoiceDetailDistributions each
									invoked.ParmDeleteAndAdd = true
					else
						for each MiscellaneousDistributionsRel
							if (each.IsOpenDistribution)
								invoke DeleteInvoiceDetailDistributions each
									invoked.ParmDeleteAndAdd = true
	
					if  (TaxCode entered)
						OldTaxCode						= TaxCode
						include DeleteTaxDistributions

		DeleteKeepDistribs is a Delete Action
			default label is untranslatable
			restricted
			Entrance Rules
				if  (PurchaseOrderLine entered
				or   ContractLine entered)
					if (!PayablesInvoice.IsMemoOnly)
						include CheckPOCommitments

					for each AllDistributionsRel
						invoke FastUpdate each
						    initialize invoked.PayablesInvoiceDetail
						    initialize invoked.PurchaseOrderLine
						    initialize invoked.PurchaseOrder
						    initialize invoked.PurchasingContract
						    initialize invoked.ContractLine
							initialize invoked.OriginalDistribution

		OverrideOneSourceTaxAmount is an Instance Action
			valid when (AllowOverrideOneSourceTaxAmount)
			disable multiple instance selection
			Parameters
				OverrideTaxAmount 	is an InternationalAmount
				    	
			Action Rules
				invoke Update PayablesInvoiceAddOnChargeTaxRel
				    invoked.OverrideTaxAmount = OverrideTaxAmount
				
		UpdateSnapshotFields is an Instance Action
			restricted
			Action Rules
				Invoice				= PayablesInvoice.Invoice
				Suffix				= PayablesInvoice.Suffix
				CancelSequence		= PayablesInvoice.CancelSequence


		UpdateSnapshotFieldsSet is a Set Action			
			default label is untranslatable
			restricted
			Parameters
				PrmCompany		is a MatchCompany
				PrmInvoice		is a PayablesInvoice
			Parameter Rules
				PrmCompany
				PrmInvoice
				
			Instance Selection
				where (Company 			= PrmCompany
				and    PayablesInvoice	= PrmInvoice)
				
			Action Rules
				Instance Rules
					Invoice				= PrmInvoice.Invoice
					Suffix				= PrmInvoice.Suffix
					CancelSequence		= PrmInvoice.CancelSequence
					
									
		CreateFromPurchaseOrderAoc is a Create Action
			restricted

			Entrance Rules				
				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency
				if (PayablesInvoiceDetailRel exists
				and EnteredQuantity not entered)
					EnteredQuantity						= first PayablesInvoiceDetailRel.EnteredQuantity
					MatchedQuantity						= first PayablesInvoiceDetailRel.MatchedQuantity

				if (POAndLineAOCRel exists)
					LandedUnitCost			= POAndLineAOCRel.LandedUnitCost
					LandedAddOnCharge		= POAndLineAOCRel.LandedAddOnCharge
					PrintOnPO				= POAndLineAOCRel.PrintOnPO
					AddOnChargePercent		= POAndLineAOCRel.AddOnChargePercent
					Canceled				= POAndLineAOCRel.Canceled
					CreatedDuringSpread		= POAndLineAOCRel.CreatedDuringSpread
					Issued					= POAndLineAOCRel.Issued
					PurchaseFromLocation	= POAndLineAOCRel.PurchaseFromLocation
					Summarize				= POAndLineAOCRel.Summarize
					Taxable					= POAndLineAOCRel.Taxable
					CrossReferenceVendor	= POAndLineAOCRel.CrossReferenceVendor
					ZeroCost				= POAndLineAOCRel.ZeroCost				

				if (PurchaseOrderLine entered
				and PurchaseOrderLine.Contract entered)
				    Contract 		= PurchaseOrderLine.Contract
				    ContractLine 	= PurchaseOrderLine.ContractLine

			Action Rules
				include UpdateQuantityAmountAndCost
		
			Exit Rules
       			ActionType = ActionType.CreateType
				if (TaxCode entered)
					include ProcessDetailTax



		CreateTemporary is a Create Action

			default label is untranslatable
			restricted
			bypass field rules
			Entrance Rules
				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency
				PayablesInvoiceAddOnCharge	= last SameAddOnChargeRel.PayablesInvoiceAddOnCharge + 1
				LandedAddOnCharge			= POAndLineAOCRel.LandedAddOnCharge
				TaxCode						= POAndLineAOCRel.TaxCode
			Action Rules
				include UpdateQuantityAmountAndCost
			Exit Rules
				BypassBudgetEdit  = true
       			ActionType = ActionType.CreateType
				if (TaxCode entered)
					include ProcessDetailTax
							

		MemoCreate is a Create Action
			restricted
			Entrance Rules
				LocalAccountingEntity 		= Company.AccountingEntity
				LocalFromCurrency			= PayablesInvoice.InvoiceCurrency

				if (TaxEntityRel.ThirdParty.TaxEngine)

					MatchDetailKey = PurchaseOrderLine.MatchDetailKey

					if (EnteredUnitCost not entered)
						if (TotalAddOnChargeAmount entered)
							EnteredUnitCost = TotalAddOnChargeAmount
						else 
							EnteredUnitCost = AddOnChargeAmount

					if (AddOnCharge.AddOnChargeType.Allowance)
						if (EnteredUnitCost > 0)
							TotalAddOnChargeAmount = EnteredUnitCost 
							AddOnChargeAmount = EnteredUnitCost 
						else 
							TotalAddOnChargeAmount = EnteredUnitCost * -1
							AddOnChargeAmount = EnteredUnitCost * -1
					else 
						if (EnteredUnitCost < 0)
							TotalAddOnChargeAmount = EnteredUnitCost 
							AddOnChargeAmount = EnteredUnitCost 
						else 
							TotalAddOnChargeAmount = EnteredUnitCost * -1
							AddOnChargeAmount = EnteredUnitCost * -1

					if (PayablesInvoiceDetailRel exists)
						EnteredQuantity = first PayablesInvoiceDetailRel.EnteredQuantity
						if (EnteredQuantity > 0)
							EnteredQuantity *= -1
					else 
						EnteredQuantity = -1

					EnteredUnitCost = TotalAddOnChargeAmount / EnteredQuantity 
					MatchedQuantity = EnteredQuantity
					MatchUnitCost = EnteredUnitCost

			Action Rules
		        if (CreateFromBatchSwitch entered)
		        	if  (Vendor not entered)
		        	    Vendor = PayablesInvoice.Vendor
		        	if  (MatchDetailKey not entered
		        	and  PurchaseOrderLine entered)
		        		MatchDetailKey = PurchaseOrderLine.MatchDetailKey
		            if (EnteredQuantity not entered
		            and PayablesInvoiceDetailRel exists)
		            	EnteredQuantity = first PayablesInvoiceDetailRel.EnteredQuantity
		            if (EnteredQuantity not entered)
		            	EnteredQuantity = POAndLineAOCRel.DerivedQuantity
		            if (EnteredQuantity not entered)
		            	EnteredQuantity = 1
		            if (EnteredUnitCost not entered)
		                EnteredUnitCost = (TotalAddOnChargeAmount / EnteredQuantity)

        		ActionType = ActionType.UpdateType

		        MatchUnitCost				= EnteredUnitCost
		        MatchedQuantity				= EnteredQuantity
				TotalDistributionAmount 	= DerivedDistributionAmount
		        TotalBaseAmount				= DerivedBaseAmount
		        TotalAddOnChargeAmount		= TotalDistributionAmount
		        AddOnChargeAmount			= TotalDistributionAmount

			Exit Rules
				display "AOCMemoCreate<CreditForRebill>"
				if (CreditForRebill)
					include ReverseOriginalDistributions
					if (OneSourceGeneric)
						invoke Update PayablesInvoiceAddOnChargeTaxRel
							invoked.TaxingJurisdiction		= MatchRefOriginalInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.TaxingJurisdiction
							invoked.ShipToLocation			= PayablesInvoice.Location
							invoked.TaxAccrualCode			= MatchRefOriginalInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.TaxAccrualCode
						    invoked.OverrideTaxAmount 		= MatchRefOriginalInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.OverrideTaxAmount * -1
							invoked.CalculatedTaxAmount		= MatchRefOriginalInvoiceAddOnChargeRel.PayablesInvoiceAddOnChargeTaxRel.CalculatedTaxAmount * -1
				else
				if (TaxCode entered)
					include ProcessDetailTax

				if (!PayablesInvoice.BackgroundProcessing entered
				and !PayablesInvoice.InterfaceInProcess)
					invoke InvoiceUpdate PayablesInvoice
	

		CreateMemoCostAdjustment is an Instance Action
			valid when (AllowCostAdjustment)
			Parameters
				MemoCompany		is a PayablesCompany
				MemoInvoice 	is a PayablesInvoice
			Parameter Rules
				MemoCompany
					default to MemoInvoice.Company
				MemoInvoice
					constraint (MemoInvoice.InvoiceType.CreditMemo)
						"AddOnChargeCostAdjustmentOnlyAllowedForCreditMemos"

			Action Rules
				invoke MemoCreate PayablesInvoiceAddOnCharge
					invoked.Company						= Company
					invoked.PayablesInvoice				= MemoInvoice
					invoked.PurchaseOrder				= PurchaseOrder
					invoked.PurchaseOrderLine			= PurchaseOrderLine
					invoked.AddOnCharge					= AddOnCharge
					invoked.PayablesInvoiceAddOnCharge	= 1
					invoked.EnteredQuantity				= EnteredQuantity
					if  (ContractLine entered)
						invoked.EnteredUnitCost			= ContractLineAOCRel.UnitCost - EnteredUnitCost
					else
						invoked.EnteredUnitCost			= POAndLineAOCRel.EnteredUnitCost - EnteredUnitCost
						
					invoked.Vendor						= Vendor
					invoked.MatchDetailKey				= MatchDetailKey
					invoked.PurchaseFromLocation		= PurchaseFromLocation
					invoked.Location					= Location
					invoked.PurchaseOrderReceipt		= PurchaseOrderReceipt
					invoked.PurchaseOrderReceiptLine 	= PurchaseOrderReceiptLine
					invoked.InvoiceType					= InvoiceType
					invoked.InvoiceVendor				= InvoiceVendor
					invoked.TaxCode						= TaxCode
					invoked.Taxable						= Taxable
					invoked.TaxUsageCode				= TaxUsageCode
					invoked.PrintOnPO					= PrintOnPO
					invoked.LandedAddOnCharge			= LandedAddOnCharge
					invoked.Summarize					= Summarize
					invoked.DueDate						= DueDate
					invoked.RecordSource				= RecordSource
					invoked.InvoiceLineTaxable			= InvoiceLineTaxable
					invoked.TaxType						= TaxType
					invoked.Item						= Item
					invoked.ItemType					= ItemType
					invoked.Contract					= Contract
					invoked.ContractLine				= ContractLine
					invoked.ProductTaxCategory			= ProductTaxCategory

		CreateMemoQuantityAdjustment is an Instance Action
			valid when (AllowQuantityAdjustment)
			Parameters
				MemoCompany		is a PayablesCompany
				MemoInvoice 	is a PayablesInvoice
			Parameter Rules
				MemoCompany
					default to MemoInvoice.Company
				MemoInvoice
					constraint (MemoInvoice.InvoiceType.CreditMemo)
						"AddOnChargeQuantityAdjustmentOnlyAllowedForCreditMemos"
			Entrance Rules
				if  (ContractLine entered)
					constraint (!ContractLine.ServiceCode.Amount)
						"QuantityAdjustmentNotAllowedOnAmountTypeServiceLine"			
			Action Rules
				invoke MemoCreate PayablesInvoiceAddOnCharge
					invoked.Company						= Company
					invoked.PayablesInvoice				= MemoInvoice
					invoked.PurchaseOrder				= PurchaseOrder
					invoked.PurchaseOrderLine			= PurchaseOrderLine
					invoked.AddOnCharge					= AddOnCharge
					invoked.PayablesInvoiceAddOnCharge	= 2
					if  (ContractLine entered)
						invoked.EnteredQuantity			= ContractLine.Quantity - EnteredQuantity
						invoked.EnteredUnitCost			= ContractLineAOCRel.UnitCost
					else
						invoked.EnteredQuantity			= POAndLineAOCRel.Quantity - EnteredQuantity
						invoked.EnteredUnitCost			= POAndLineAOCRel.EnteredUnitCost
						
					invoked.Vendor						= Vendor
					invoked.MatchDetailKey				= MatchDetailKey
					invoked.PurchaseFromLocation		= PurchaseFromLocation
					invoked.Location					= Location
					invoked.PurchaseOrderReceipt		= PurchaseOrderReceipt
					invoked.PurchaseOrderReceiptLine 	= PurchaseOrderReceiptLine
					invoked.InvoiceType					= InvoiceType
					invoked.InvoiceVendor				= InvoiceVendor
					invoked.TaxCode						= TaxCode
					invoked.Taxable						= Taxable
					invoked.TaxUsageCode				= TaxUsageCode
					invoked.PrintOnPO					= PrintOnPO
					invoked.LandedAddOnCharge			= LandedAddOnCharge
					invoked.Summarize					= Summarize
					invoked.DueDate						= DueDate
					invoked.RecordSource				= RecordSource
					invoked.InvoiceLineTaxable			= InvoiceLineTaxable
					invoked.TaxType						= TaxType
					invoked.Item						= Item
					invoked.ItemType					= ItemType
					invoked.Contract					= Contract
					invoked.ContractLine				= ContractLine
					invoked.ProductTaxCategory			= ProductTaxCategory

		ProcessVertexSet is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult
				PrmMatchFrom 		is Numeric 1
					States 
						AutoMatch				value is 1
						ReconciliationMatch		value is 2
						OnlineMatch 			value is 3
				PrmReconMatchWork   is a MatchWork
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required
				PrmFinanceEnterpriseGroup 
					default to PrmCompany.FinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup
					
			Sort Order
				Company
				PayablesInvoice

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    TaxCode entered)

			Local Fields 
				VertexMatchWork					is a MatchWork view
				VertexAutoMatchError			is Alpha 200
			
			Rule Blocks
				EndOfSetRules



					if (PrmMatchFrom.ReconciliationMatch)					
						invoke FastUpdate PrmPayablesInvoice
							invoked.BackgroundProcessing = 3 
						VertexMatchWork = PrmReconMatchWork.MatchWork
					else						
					if (PrmMatchFrom.OnlineMatch 
					or  PrmMatchFrom.AutoMatch)
						invoke FastUpdate PrmPayablesInvoice
							invoked.BackgroundProcessing = 3 

						if  (PrmPayablesInvoice.MatchReconQueueRel exists 
						and  PrmPayablesInvoice.MatchReconQueueRel.MatchWork entered)
							invoke PurgeDetail PrmPayablesInvoice.MatchWorkRel
							invoke Purge PrmPayablesInvoice.MatchWorkRel


						invoke CreateOnly MatchWork
							resume on error	 					
					   			VertexAutoMatchError = error message
							assign result to VertexMatchWork
							invoked.Company						= PrmCompany
							invoked.PayablesInvoice				= PrmPayablesInvoice
							invoked.MatchPoint					= "1"
							if (invoking action like "*Batch*")
								invoked.ProcessMode				= "B"
							else
								invoked.ProcessMode				= "O"
							invoked.DocumentType				= "I"
							invoked.LinkedAutoMatchResult		= PrmAutoMatchResult
							invoked.BypassValidateMatchInvoiceBalance = true						



						if  (!PrmPayablesInvoice.MatchReconQueueRel exists)
							invoke CreateForBudgetProcessing MatchReconQueue
								invoked.Company				= PrmCompany
								invoked.PayablesInvoice		= PrmPayablesInvoice
								invoked.MatchWork			= VertexMatchWork.MatchWork
						else
							invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
								invoked.MatchWork			= VertexMatchWork.MatchWork



	
					invoke UpdateErrorRecordsAction PrmPayablesInvoice
						resume on error							
							VertexAutoMatchError = error message


					if  (VertexAutoMatchError not entered)
						if (PrmPayablesInvoice.InvoiceErrorsExists)
							VertexAutoMatchError = InvoiceOutOfBalanceMsg



					if (VertexAutoMatchError not entered
					and !PrmMatchFrom.ReconciliationMatch)



						if  (VertexAutoMatchError not entered)

							invoke ValidateMatchInvoiceBalance PrmPayablesInvoice
								resume on error							
					   				VertexAutoMatchError = error message



	
						if  (!PrmMatchFrom.ReconciliationMatch)
							if  (VertexAutoMatchError not entered)

								invoke BatchMatch VertexMatchWork.MatchWork
									resume on error							
						   				VertexAutoMatchError = error message
									invoked.PrmCompany 			= PrmCompany
									invoked.PrmInvoice 			= PrmPayablesInvoice
									invoked.PrmMatchWork 		= VertexMatchWork.MatchWork
									invoked.PrmAutoMatchResult	= PrmAutoMatchResult




					if  (VertexAutoMatchError entered)

						invoke Update VertexMatchWork.MatchWork
							invoked.VerifyMatchMessage = VertexAutoMatchError

						if (PrmAutoMatchResult entered)


							LocalCompany			= PrmCompany
							LocalPayablesInvoice	= PrmPayablesInvoice
							LocalAutoMatchResult 	= PrmAutoMatchResult

							invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
								invoked.ErrorMessage 				= VertexAutoMatchError
								invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

							invoke Update VertexMatchWork.MatchWork
								initialize invoked.LinkedAutoMatchResult
						else
							invoke FastUpdate PrmPayablesInvoice
								initialize invoked.BackgroundProcessing
								initialize invoked.POTaxAmount
					else
					if  (PrmMatchFrom.ReconciliationMatch)
						invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
							invoked.View = 3 
							
						invoke FinishMatch VertexMatchWork.MatchWork




			Action Rules				
				Empty Set Rules
					invoke InvoiceUpdate PrmPayablesInvoice
						if (PrmMatchFrom not entered)
			        		invoked.ResetBackgroundProcessing = true

					include EndOfSetRules 

				Set Rules
					Exit Rules
						invoke InvoiceUpdate PrmPayablesInvoice
							if (PrmMatchFrom not entered)
				        		invoked.ResetBackgroundProcessing = true

						include EndOfSetRules 

				Instance Rules

					invoke ProcessVertex 

		ProcessVertex is an Instance Action
			default label is untranslatable
			restricted
			Action Rules 

				initialize CalculateTax

				CalculateTax.TaxableAmount						= TotalDistributionAmount
				CalculateTax.InvoiceAmount						= TotalDistributionAmount
				if  (PayablesInvoice.InvoiceType.CreditMemo
				and  CalculateTax.TaxableAmount > 0)
					CalculateTax.TaxableAmount					*= -1
					CalculateTax.InvoiceAmount					*= -1

				include PopulateCalculateTaxInputFields
		
				CalculateTax.Function			 				= CalculateTax.Function.CalculateTax
				LocalCalculateTaxExecuted 						= CalculateTax.ExecuteCalculateTax
				CalculateTaxHasBeenCalled						= true 

				LocalTaxTable = CalculateTax.TaxTable
				for each LocalTaxTable.TaxTableOutput
					


					if (each.AccrualFlag = "A")
						LocalAccruedTaxAmount += each.TaxAmount5DP
					else
						LocalTaxAmount += each.TaxAmount5DP

				round LocalTaxAmount to nearest DerivedRoundTo
				round LocalInvoicedTaxAmount to nearest DerivedRoundTo
				round LocalAccruedTaxAmount to nearest DerivedRoundTo

				if (TaxCode = "00")
					TaxCode = CalculateTax.TaxCode 	

				TaxAmount 			= LocalTaxAmount
				AccruedTaxAmount	= LocalAccruedTaxAmount
				InvoicedTaxAmount 	= LocalInvoicedTaxAmount

				invoke FastUpdate PayablesInvoice
					invoked.POTaxAmount += TaxAmount

				if (TaxAmount entered or AccruedTaxAmount entered)
					InvoiceLineTaxable				= true

				invoke Update PayablesInvoice.PayablesInvoiceTaxRel
					invoked.TaxSystemTaxAmount		+= TaxAmount 
					
				invoke Update PayablesInvoiceAddOnChargeTaxRel
					invoked.TaxingJurisdiction				= CalculateTax.TaxingJurisdiction
					invoked.ShipToLocation					= Location
					invoked.CalculatedTaxAmount 			= TaxAmount 

				if (TaxAmount 			changed
				or  AccruedTaxAmount	changed
				or  InvoicedTaxAmount 	changed
				or  TaxCode             changed)

					if  (TaxCode entered)
						OldTaxCode						= TaxCode

					include DeleteTaxDistributions 

					BypassBudgetEdit  = true
					ProcessingTax = true

					if  (!LandedAddOnCharge)
						include MiscOrNonLandedTaxDistribution
					else 
					if  (PurchaseOrderLine entered)						
						include CopyPOLineDistributionsRuleBlock
					else 
					if (ContractLine entered)
						include CopyContractLineDistributionsRuleBlock
					else
						include MiscOrNonLandedTaxDistribution

					ProcessingTax = false


		CreditForRebillSet is a Set Action
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmInvoice			is a PayablesInvoice
				MemoInvoice 		is a PayablesInvoice
			Parameter Rules
				PrmCompany
					required
				PrmInvoice
					required
				MemoInvoice
					constraint (MemoInvoice.InvoiceSource.CreditForRebill)
						"CreditForRebillOnlyAllowedForCreditForRebillInvoice"
			Set Is  
				PrmCompany
				PrmInvoice

			Instance Selection
				where (Company			= PrmCompany
				and    PayablesInvoice 	= PrmInvoice
				and   !HeaderSpreadAddOnCharge)

			Action Rules

				Empty Set Rules
					invoke InvoiceUpdate MemoInvoice
						invoked.ResetBackgroundProcessing = true
				
					if  (MemoInvoice.TaxEntityUsesSabrix
					and  MemoInvoice.RoutingRuleFound
					and  MemoInvoice.SubmitActionValid)
						invoke Unreleased.SubmitForApproval MemoInvoice
							resume on error
								LocalErrorMsg = error message
							invoked.AutoApprovePrm	= MemoInvoice.DerivedAutoApprove
							invoked.RoutingCodePrm	= MemoInvoice.DerivedAutoAssignedRoutingCode

				Set Rules
					Exit Rules
						invoke InvoiceUpdate MemoInvoice
							invoked.ResetBackgroundProcessing = true
							
						if  (MemoInvoice.TaxEntityUsesSabrix
						and  MemoInvoice.RoutingRuleFound
						and  MemoInvoice.SubmitActionValid)
							invoke Unreleased.SubmitForApproval MemoInvoice
								resume on error
									LocalErrorMsg = error message
								invoked.AutoApprovePrm	= MemoInvoice.DerivedAutoApprove
								invoked.RoutingCodePrm	= MemoInvoice.DerivedAutoAssignedRoutingCode


				Instance Rules

					if (PurchaseOrderLine entered)
						invoke CreditForRebillLineAddOnCost
							resume on error
							invoked.MemoCompany		= PrmCompany
							invoked.MemoInvoice 	= MemoInvoice
					else
						display "999AOCCreateMiscFromSet"
						invoke CreditForRebillMiscAOC
							resume on error
							invoked.MemoCompany		= PrmCompany
							invoked.MemoInvoice 	= MemoInvoice
												
												
		CreditForRebillLineAddOnCost is an Instance Action
			default label is "CreditForRebill"
			valid when (AllowCreditForRebill)
			Parameters
				MemoCompany		is a PayablesCompany
				MemoInvoice 	is a PayablesInvoice
			Parameter Rules
				MemoCompany
					default to MemoInvoice.Company
				MemoInvoice
					constraint (MemoInvoice.InvoiceSource.CreditForRebill)
						"CreditForRebillOnlyAllowedForCreditForRebillInvoice"
			Entrance Rules

			Action Rules
				invoke MemoCreate PayablesInvoiceAddOnCharge
					invoked.Company						= MemoCompany
					invoked.PayablesInvoice				= MemoInvoice
					invoked.PurchaseOrder				= PurchaseOrder
					invoked.PurchaseOrderLine			= PurchaseOrderLine
					invoked.AddOnCharge					= AddOnCharge
					invoked.PayablesInvoiceAddOnCharge	= 2
					invoked.EnteredQuantity				= EnteredQuantity * -1
					invoked.EnteredUnitCost				= EnteredUnitCost
						
					invoked.Vendor						= Vendor
					invoked.MatchDetailKey				= MatchDetailKey
					invoked.PurchaseFromLocation		= PurchaseFromLocation
					invoked.Location					= Location
					invoked.PurchaseOrderReceipt		= PurchaseOrderReceipt
					invoked.PurchaseOrderReceiptLine 	= PurchaseOrderReceiptLine
					invoked.InvoiceType					= InvoiceType
					invoked.InvoiceVendor				= InvoiceVendor
					invoked.TaxCode						= TaxCode
					invoked.Taxable						= Taxable
					invoked.TaxAmount					= TaxAmount
					invoked.TaxUsageCode				= TaxUsageCode
					invoked.PrintOnPO					= PrintOnPO
					invoked.LandedAddOnCharge			= LandedAddOnCharge
					invoked.Summarize					= Summarize
					invoked.DueDate						= DueDate
					invoked.RecordSource				= RecordSource
					invoked.InvoiceLineTaxable			= InvoiceLineTaxable
					invoked.TaxType						= TaxType
					invoked.Item						= Item
					invoked.ItemType					= ItemType
					invoked.Contract					= Contract
					invoked.ContractLine				= ContractLine
					invoked.ProductTaxCategory			= ProductTaxCategory
					invoked.TotalDistributionAmount		= TotalDistributionAmount * -1
					invoked.TaxAmount					= TaxAmount * -1


		CreditForRebillMiscAOC is an Instance Action
			default label is "CreateInvoiceMiscellaneousAddOnCharges"
			valid when (AllowCreditForRebill)
			Parameters
				MemoCompany		is a PayablesCompany
				MemoInvoice 	is a PayablesInvoice
			Parameter Rules
				MemoCompany
					default to MemoInvoice.Company
				MemoInvoice
					constraint (MemoInvoice.InvoiceSource.CreditForRebill)
						"CreditForRebillOnlyAllowedForCreditForRebillInvoice"

			Action Rules


				

				invoke CreateMiscellaneousAddOnCosts PayablesInvoiceAddOnCharge
					invoked.Company							= MemoCompany 
					invoked.PayablesInvoice					= MemoInvoice
					invoked.Vendor							= Vendor
					invoked.PurchaseOrder					= PurchaseOrder
					invoked.AddOnCharge						= AddOnCharge
					invoked.PurchaseFromLocation			= PurchaseFromLocation
					invoked.Location						= Location
					invoked.LandedAddOnCharge				= LandedAddOnCharge
					invoked.PrintOnPO						= PrintOnPO
					invoked.MiscellaneousAccount            = MiscellaneousAccount
					invoked.EnteredQuantity					= EnteredQuantity * -1
					invoked.MatchedQuantity					= MatchedQuantity * -1
					invoked.EnteredUnitCost					= EnteredUnitCost
					invoked.MatchUnitCost					= MatchUnitCost
					invoked.TotalAddOnChargeAmount			= TotalAddOnChargeAmount * -1
					invoked.AddOnChargeAmount				= AddOnChargeAmount * -1
					invoked.TotalDistributionAmount			= TotalDistributionAmount * -1
					invoked.TaxCode							= TaxCode
					invoked.TaxAmount						= TaxAmount * -1
					invoked.LandedAddOnCharge				= LandedAddOnCharge
					invoked.RecordSource					= "LM"

		DeletePrepaymentAddOnCharge is a Delete Action
			valid when (AllowMatchPrepaymentAddOnChargeDelete)
			Entrance Rules
				constraint (AllowMatchPrepaymentAddOnChargeDelete)
					"ActionOnlyValidOnReleasedMatchPrepayment" 

				if  (TaxCode entered)
					LocalTaxCode = TaxCode
					for each MiscellaneousTaxDistributionsRel
						if (each.IsOpenDistribution)
							invoke DeleteInvoiceDetailDistributions each

				for each MiscellaneousDistributionsRel
					if (each.IsOpenDistribution)
						invoke DeleteInvoiceDetailDistributions each

				invoke FastUpdate PayablesInvoice 
					invoked.AddOnChargeAmount -= AddOnChargeAmount 
					invoked.MatchAmount += AddOnChargeAmount
						
    	PopulateBlankItem is a Set Action
    		restricted
    		Parameters
    			PrmCompany		is a PurchasingCompany
    		Instance Selection
    			where (Company = PrmCompany
    			and	  (ItemType.Service or ItemType.Special)
    			and	   Item not entered)
    		Action Rules
    			Instance Rules
   					Item = MatchDetailKey
						
		UnmatchPhase4InvoiceAddOnCharge is a Set Action
			restricted
			Parameters
				PrmPayablesCompany			is a PayablesCompany
				PrmPayablesInvoice			is a PayablesInvoice
				UnmatchFrom							is Alpha 4
					States
						MA70 value is "MA70"
						MA75 value is "MA75"
			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Action Rules
				Empty Set Rules
					invoke UnmatchFinal PrmPayablesInvoice
						invoked.UnmatchFrom = UnmatchFrom
						
				Set Rules
					
					Exit Rules
						invoke UnmatchFinal PrmPayablesInvoice
							invoked.UnmatchFrom = UnmatchFrom
					
				Instance Rules
					if  (MatchObjectID entered)
						LocalInvoiceDetailUnitCost	= MatchUnitCost
						LocalMiscAOC 				= POAndLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount - MatchUnitCost 
	

						if  (!PayablesInvoice.IsChargeback
						and   POAndLineAOCRel exists
						and  !POAndLineAOCRel.AddOnChargeOrigin.Matching)


							if (PurchaseOrderLine not entered)
								if (MatchUnitCost > POAndLineAOCRel.MiscellaneousAddOnChargeInvoicedAmount)
									invoke UpdateFromMatch POAndLineAOCRel
										initialize invoked.MiscellaneousAddOnChargeInvoicedAmount
								else
									invoke UpdateFromMatch POAndLineAOCRel
										invoked.MiscellaneousAddOnChargeInvoicedAmount	= MatchUnitCost * -1

							else
								if  (POAndLineAOCRel.PurchaseOrderLine.VendorPriceUOM entered
								and  POAndLineAOCRel.PurchaseOrderLine.VendorPriceUOM != POAndLineAOCRel.PurchaseOrderLine.PurchaseOrderLine.EnteredBuyUOM)
					
									initialize UOMCalculation

									UOMCalculation.InputQuantity				= MatchedQuantity
									UOMCalculation.InputUOMConversion			= POAndLineAOCRel.PurchaseOrderLine.VendorPriceUOMMultiplier
									UOMCalculation.InputToUOMConversion			= POAndLineAOCRel.PurchaseOrderLine.EnteredBuyUOMMultiplier
									UOMCalculation.Method					    = UOMCalculation.Method.ConvertToAlternate
				
									invoke UpdateFromMatch POAndLineAOCRel
										invoked.MatchedQuantity					-= UOMCalculation.OutputQuantity * -1
										invoked.ReceivedQuantityToMatch			= PurchaseOrderLine.ReceivedQuantity

								else
									invoke UpdateFromMatch POAndLineAOCRel
										invoked.MatchedQuantity					-= MatchedQuantity
										invoked.ReceivedQuantityToMatch			= PurchaseOrderLine.ReceivedQuantity


						if (!PayablesInvoice.InvoiceType.CreditMemo
						or  PayablesInvoice.Suffix not entered)					
		
							if (PayablesInvoice.ReceiptLinkMatchIDRel exists)  
		
								if  (PayablesInvoice.MatchLevel.DetailMatch
								and  ItemType.Inventoried
								and  PayablesInvoice.MatchProcessType.AOCOnly)


									for each PurchaseOrderReceiptLineSet4Rel



										for each each.InventoryTransactionLineCostAdjustmentRel
											if  (each.UnitCost entered)

												invoke UpdateForCostAdjustment each.ItemLocation			
													invoked.PrmCostDifference			= each.UnitCost * -1
													invoked.PrmQuantity					= each.Quantity

													invoked.PrmDocumentNumber			= each.InventoryTransaction
													invoked.PrmLineNumber				= each.InventoryTransactionLine.LineNumber
													invoked.PrmAddOnChargeDifference	= true
													if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
														invoked.PrmOffsetAccount			= PayablesInvoice.ProcessLevel.CostVarianceAccount
													else
														invoked.PrmOffsetAccount			= PayablesInvoice.MatchCompanyRel.CostVarianceAccount
											end for each
																					
								for each PurchaseOrderReceiptInvoiceLinkSet4Rel		

	
									LocalVendorBuyMatchedQuantity		= each.MatchedQuantity

									if (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine not entered)	
										NewMiscellaneousAddOnChargeInvoicedAmount	= each.PurchaseOrderReceiptLineAOCRel.TotalAddOnChargeAmount - LocalMiscAOC
						
										invoke UpdateFromMatch each.PurchaseOrderReceiptLineAOCRel
											if (NewMiscellaneousAddOnChargeInvoicedAmount < 0)
												invoked.MiscellaneousAddOnChargeInvoicedAmount	+= LocalInvoiceDetailUnitCost
											else
												invoked.MiscellaneousAddOnChargeInvoicedAmount	= NewMiscellaneousAddOnChargeInvoicedAmount
												
											initialize invoked.MatchedQuantity
											initialize invoked.ReceivedQuantityToMatch
									else
										LocalVendorPriceMatchedQuantity			= LocalVendorBuyMatchedQuantity
										if  (each.PurchaseOrderLine.VendorPriceUOMMultiplier entered
										and  each.PurchaseOrderLine.EnteredBuyUOMMultiplier entered
										and  each.PurchaseOrderLine.VendorPriceUOMMultiplier != each.PurchaseOrderLine.EnteredBuyUOMMultiplier)
											LocalVendorPriceMatchedQuantity	= (LocalVendorBuyMatchedQuantity * (each.PurchaseOrderLine.EnteredBuyUOMMultiplier / each.PurchaseOrderLine.VendorPriceUOMMultiplier))								
						
										invoke UpdateFromMatch each.PurchaseOrderReceiptLineAOCRel		
											initialize invoked.MatchObjectID
											initialize invoked.MatchSequence
											invoked.MatchedQuantity 			-= LocalVendorBuyMatchedQuantity
											invoked.ReceivedQuantityToMatch 	+= LocalVendorBuyMatchedQuantity
											invoked.ReceivedAmountToMatch 		+= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.OriginalUnitCost * LocalVendorPriceMatchedQuantity
											invoked.OpenToMatchQuantity			= each.PurchaseOrderReceiptLineAOCRel.ReceivedQuantityToMatch + LocalVendorBuyMatchedQuantity
											invoked.Status						= 1
											invoked.Closed						= "N"				
						
									if (PayablesInvoice.MatchProcessType.AOCOnly
									and !PayablesInvoice.IsChargeback
									and !each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt.Status.Released)
										invoke UpdateFromMatch each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt
											invoked.Status = 1
	
									invoke Delete each
							else
								for each ReceiptLineAOCByMatchObjectIdRel		
									LocalVendorBuyMatchedQuantity		= each.MatchedQuantity


									if (each.PurchaseOrderReceiptLine not entered)	
										NewMiscellaneousAddOnChargeInvoicedAmount	= each.TotalAddOnChargeAmount - LocalMiscAOC
						
										invoke UpdateFromMatch each
											if (NewMiscellaneousAddOnChargeInvoicedAmount < 0)
												invoked.MiscellaneousAddOnChargeInvoicedAmount	+= LocalInvoiceDetailUnitCost
											else
												invoked.MiscellaneousAddOnChargeInvoicedAmount	= NewMiscellaneousAddOnChargeInvoicedAmount
												
											initialize invoked.MatchedQuantity
											initialize invoked.ReceivedQuantityToMatch
									else
										LocalVendorPriceMatchedQuantity			= LocalVendorBuyMatchedQuantity
						
										invoke UpdateFromMatch each		
											initialize invoked.MatchObjectID
											initialize invoked.MatchSequence
											invoked.MatchedQuantity 			-= LocalVendorBuyMatchedQuantity
											invoked.ReceivedQuantityToMatch 	+= LocalVendorBuyMatchedQuantity
											invoked.ReceivedAmountToMatch 		+= each.OriginalUnitCost * LocalVendorPriceMatchedQuantity
											invoked.OpenToMatchQuantity			= each.ReceivedQuantityToMatch + LocalVendorBuyMatchedQuantity
											invoked.Status						= 1
											invoked.Closed						= "N"				
						
									if (PayablesInvoice.MatchProcessType.AOCOnly
									and !PayablesInvoice.IsChargeback
									and !each.PurchaseOrderReceipt.Status.Released)
										invoke UpdateFromMatch each.PurchaseOrderReceipt
											invoked.Status = 1
		
						if (RecordSource.CreatedWithinMatch
						or  RecordSource.GeneratedByAocSpread)
							invoke DeleteNoInvoiceUpdate 
						else
						if (RecordSource.Invoice
						or  RecordSource.LineMatchMa43)
							invoke FastUpdate 
								initialize invoked.MatchObjectID
								initialize invoked.MatchSequence
								initialize invoked.PurchaseOrderReceipt
								initialize invoked.PurchaseOrderReceiptLine		
								initialize invoked.Status


						if  (!PayablesInvoice.IsChargeback
						and   POAndLineAOCRel exists
						and  !POAndLineAOCRel.AddOnChargeOrigin.Matching)
							if  (UnmatchFrom.MA75
							and (PrmPayablesInvoice.GeneralLedgerSystemCodeRel.EncumbranceOption.Track
							or   PrmPayablesInvoice.GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit))
								for each POAndLineAOCRel.HeaderOrLineAddOnChargeDistributionRel
									invoke InvoiceCancel each 

						if  (UnmatchFrom.MA70)
							if  ((PrmPayablesInvoice.MatchProcessType.AOCOnly
							and   !PrmPayablesInvoice.CostComponentMatch)
							and  (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
							or    GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit))
								if (LandedAddOnCharge)
									for each PurchaseOrderLine.CommittedPurchaseOrderLineDistributionsRel
										invoke InvoiceCancel each 
											invoked.AOCOnly = true 
								else 
									for each POAndLineAOCRel.CommittedPurchaseOrderLineDistributionsRel
										invoke InvoiceCancel each 
											invoked.AOCOnly = true 

		DeleteNoInvoiceUpdateSet is a Set Action
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice			is a PayablesInvoice
				PrmPurchaseOrder			is a PurchaseOrder
			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required
				PrmPurchaseOrder
					required

			Instance Selection
				where (Company				= PrmCompany
				and    PayablesInvoice		= PrmPayablesInvoice
				and    PurchaseOrder		= PrmPurchaseOrder)

			Action Rules
				Empty Set Rules
					invoke UpdateMatchProcessType MatchPurchaseOrderInvoiceRel
					invoke InvoiceUpdate PayablesInvoice
					invoke UpdateExternalPOForMatchInvoices PayablesInvoice

				Set Rules
					Exit Rules
						invoke UpdateMatchProcessType MatchPurchaseOrderInvoiceRel
						invoke InvoiceUpdate PayablesInvoice
						invoke UpdateExternalPOForMatchInvoices PayablesInvoice

				Instance Rules
					invoke DeleteNoInvoiceUpdate
					
		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke Purge PayablesInvoiceAddOnChargeTaxRel		
FileCreationLogic.PayablesInvoiceAddOnCharge is a BusinessClass

	Persistent Fields
	
	Local Fields

		LocalFinanceEnterpriseGroup is like FinanceEnterpriseGroup
		LocalFileCreationSetup		is like FileCreationSetup
					
	Relations

		FileCreationRecordNotProcessedRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 1
				related.Key1					= LocalCompany
				related.Key2					= LocalPayablesInvoice

		FileCreationRecordErrorRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 2
				related.Key1					= LocalCompany
				related.Key2					= LocalPayablesInvoice
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"PayablesInvoiceAddOnCharge_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"

			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
				FileCreationSetupPrm	is a FileCreationSetup
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3

			Local Fields
				InPayablesInvoiceGroup					is Boolean
				LocalPayablesInvoiceGroupSelection		is a PayablesInvoice group in subject FileCreationPayablesInvoice

			Instance Selection
				where (Company.FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      PayablesInvoice % PrmNumberOfRunGroups = PrmRunGroup)
				and	   update stamp > BeginTimeStamp
				and	   update stamp <= EndTimeStamp)

			Action Rules
				Instance Rules
					LocalFinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
					LocalFileCreationSetup	= FileCreationSetupPrm
					LocalCompany		= Company
					LocalPayablesInvoice		= PayablesInvoice
					if (FileCreationRecordNotProcessedRel not exist
					and	FileCreationRecordErrorRel not exist)	
						LocalPayablesInvoiceGroupSelection = FileCreationSetupPrm.EligibilityGroup
						if (LocalPayablesInvoiceGroupSelection entered)
							InPayablesInvoiceGroup = false
							if (PayablesInvoice within LocalPayablesInvoiceGroupSelection)
								InPayablesInvoiceGroup = true

						if (LocalPayablesInvoiceGroupSelection not entered
						or	InPayablesInvoiceGroup)											
							invoke Create FileCreationRecord
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
								invoked.FileCreationSetup	= FileCreationSetupPrm
								invoked.Key1				= Company
								invoked.Key2				= PayablesInvoice
								invoked.SystemTimeStamp		= EndTimeStamp
								invoked.EffectiveDate		= system current corporate date
								invoked.Status				= 1
