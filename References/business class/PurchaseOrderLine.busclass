PurchaseOrderLine is a BusinessClass
    owned by po
    prefix is PLI
    classic name is POLINE

    Ontology
    	symbolic key is PurchaseOrderLine
            classic set name is PLISET1
            classic name is LINE-NBR

    Patterns
    	implements ForceUIRefreshOnStale
        implements ContextualParent
        implements StaticJava
        disable AuditIndex
		implements AnalyticCube
			disable continuous update
			dynamically calculate totals
			write to base level only
		implements Archivable

    Persistent Fields
        LineNumber		
        ShipToLocation                   is an InventoryLocation
            classic name is LOCATION
        Item
        ItemType
        ServiceCode
        ProcurementGroup        		 is like ProcurementGroup
            classic name is PROCURE-GROUP
        PurchaseOrderObjectID
            classic name is PO-OBJ-ID
        Quantity						 is an UnsignedQuantity 
            precision is DerivedNumberOfDecimalsQuantity 
        ReceivedQuantity                 is a Quantity 
            classic name is REC-QTY
            precision is DerivedNumberOfDecimalsQuantity
            protected
        CatchWeightQuantity              is a Quantity 
            classic name is CATCH-WT-QTY
            precision is DerivedNumberOfDecimalsQuantity    	
        ParticipantSequenceNumber        is a Sequence
            classic name is PART-SEQ-NBR
        Tier
        ManufacturerContract             is a Contract
            classic name is MFG-CONTRACT
        Preferred                        is Numeric size 1
            classic name is PREFERRED-FLAG
            States
                No                      value is 0
                Contract                value is 1
                Manufacturer            value is 2
                ContractAndManufacturer value is 3
        LastMatchUnitCost                is an InternationalCost
            classic name is LST-MATCH-UCST
			protected
			precision is DerivedNumberOfDecimalsCost        
        MatchedQuantity                  is a Quantity 
            classic name is MATCHED-QTY
            precision is DerivedNumberOfDecimalsQuantity
			protected        
        MatchedAmount                    is an InternationalCost
			protected
			precision is PurchaseOrder.Currency.NumberOfDecimals        
        SubstituteQuantity               is a Quantity
            classic name is SUBST-QTY
            precision is DerivedNumberOfDecimalsQuantity
			protected        
        RejectedQuantity                 is a Quantity 
            classic name is REJECT-QTY
            precision is DerivedNumberOfDecimalsQuantity
			protected        
        CostOption
        Vendor
        VendorItem
            classic name is VEN-ITEM
        PurchaseFromLocation			is a VendorLocation
            classic name is PURCH-FR-LOC
        Buyer
            classic name is BUYER-CODE
        EnteredBuyUOM                    is a UnitOfMeasure
            classic name is ENT-BUY-UOM
        EnteredBuyUOMMultiplier          is an UOMMultiplier
            classic name is EBUY-UOM-MULT
        VendorPriceUOM                   is a UnitOfMeasure
        	classic name is VPRI-UOM
        VendorPriceUOMMultiplier         is an UOMMultiplier
            classic name is VPRI-UOM-MULT
        VendorBuyUnitCost                is an UnsignedUnitCost
            classic name is VBUY-UNIT-CST
            precision is DerivedNumberOfDecimalsCost
            	round to precision
        CostCode
            classic name is COST-CD
		EnteredUnitCost                  is an UnsignedUnitCost
            classic name is ENT-UNIT-CST
    		precision is DerivedNumberOfDecimalsCost
        Contract
        	classic name is AGREEMENT-REF
        ContractLine
        	context of Contract
        MajorPurchasingClass
            classic name is PURCH-MAJCL
        MinorPurchasingClass
            classic name is PURCH-MINCL
        ContractAmount            		is an InternationalAmount   
        	classic name is AGRMT-REF-AMT
        Description
        VendorPriceUOMQuantity           is a Quantity 
            classic name is VPRI-QUANTITY
            precision is DerivedNumberOfDecimalsQuantity 
        EarlyDeliveryDate                is Date
            classic name is EARLY-DL-DATE
        LateDeliveryDate                 is Date
            classic name is LATE-DL-DATE
        ReceivingActivityDate            is Date
            classic name is REC-ACT-DATE
        CloseDate                        is Date
        DistributionCode                 is a PayablesDistributionCode
            classic name is DIST-CODE
        HSNSACCode
        Taxable                          is Boolean
            classic name is TAXABLE-FLAG
        TaxCode
        TaxableUnitCost                  is an InternationalCost
            classic name is TAXBL-UNT-CST
            precision is DerivedNumberOfDecimalsCost
        StockWeight
            classic name is WEIGHT
        StockVolume
            classic name is CUBIC-FEET
        PrintedOnReceivingDocument       is Boolean
            classic name is REC-PRT-FL
        CertificationRequired            is Boolean
            classic name is CERT-REQ-FL
        RecInspFl                        is AlphaUpper size 1
            States
                No  value is "N"
                Yes value is "Y"
        InspectionRequired               is Boolean
            classic name is INSP-REQ-FL
        MSDSRequired                     is Boolean
            classic name is MSDS-FLAG
        IgnoreLeadTimeCalculation        is Boolean
            classic name is NO-LT-CALC-FL
        OvershipmentToleranceOption 
            classic name is ZERO-OSHIP-FL
        UndershipmentToleranceOption
            classic name is ZERO-USHIP-FL
        OvershipmentTolerancePercentage
            sql name is OTolerancePercentage
            classic name is OSHIP-TOL-PCT
        UndershipmentTolerancePercentage
            sql name is UTolerancePercentage
            classic name is USHIP-TOL-PCT
        UserDate3                        is Date
        UserDate4                        is Date
        ItemGTIN
        	classic name is GTIN
        Manufacturer
            classic name for Manufacturer.ManufacturerCode is MANUF-CODE
            classic name for Manufacturer.ManufacturerDivision is MANUF-DIVISION
        ManufacturerNumber
            classic name is MANUF-NBR
        LastDistributionSequence         is a PurchaseSequence
            classic name is LAST-DST-SEQ
            disable Auditing
        LastSourceLine                   is Numeric size 4
            classic name is LAST-SRC-LINE
            disable Auditing
        Released                         is Boolean
            classic name is RELEASED-FL
        Issued                           is Boolean
            classic name is ISSUED-FLAG
        Revised                          is Boolean
            classic name is REVISED-FL
        Closed					is AlphaUpper size 1
            classic name is CLOSED-FL
			States
				Yes				value is "Y"
				No				value is "N"
				Historical		value is "H"
        ExcludeFromAddOnChargeSpread     is Boolean
            classic name is EXCL-AOC-SPRD
        PurchaseOrderUserField2
            classic name is PO-USER-FLD-2
        PurchaseOrderUserField4          is a UserFld2
            classic name is PO-USER-FLD-4
        PurchaseOrderUserField6          is a UserFld3
            classic name is PO-USER-FLD-6
        MatchDetailKey
            classic name is MATCH-DTL-KEY
        ArchivedQuantity                 is a Quantity 
            classic name is ARCHIVE-QTY
            precision is DerivedNumberOfDecimalsQuantity
			protected        
        MatchedNotReceivedQuantity       is a Quantity 
            classic name is MATCHED-NO-REC
            precision is DerivedNumberOfDecimalsQuantity
			protected        
        ChargebackQuantity               is a Quantity 
            classic name is CHARGEBACK-QTY
            precision is DerivedNumberOfDecimalsQuantity
			protected        
        WriteOffQuantity                 is a Quantity 
            classic name is WRITE-OFF-QTY
            precision is DerivedNumberOfDecimalsQuantity
			protected        
        VendorReturnLine
            classic name is RET-LINE-NBR
        TaxUsageCode
            classic name is TAX-USAGE-CD
        CancelQuantity                   is a Quantity 
            classic name is CXL-QTY
            precision is DerivedNumberOfDecimalsQuantity
            default label is "CanceledQuantity"
        QuantityToProcess                is a Quantity 
            classic name is QTY-TO-PROC
            precision is DerivedNumberOfDecimalsQuantity
        VendorPriceUOMQuantityToProcess  is a Quantity 
            sql name is VPriceUOMQuantityToProcess
            classic name is VPRI-QTY-TO-PR
            precision is DerivedNumberOfDecimalsQuantity
        ExtendedAmount                   is an InternationalAmount 
            classic name is EXTENDED-AMT
        InvoicedTaxAmount                is an InternationalAmount
            classic name is INVC-TAX-AMT
            precision is PurchaseOrder.Currency.NumberOfDecimals
				round to precision
        AccruedTaxAmount                 is an InternationalAmount
            classic name is ACCR-TAX-AMT
            precision is PurchaseOrder.Currency.NumberOfDecimals
				round to precision
        ExtendedTaxableAmount            is an InternationalAmount
            classic name is EXT-TAXBL-AMT
        OpenPurchaseAmount               is an InternationalAmount
            classic name is OPEN-PO-AMT            
        OpenPurchaseAmountPOCurrency     is an InternationalAmount
            classic name is OPEN-PO-TRAN
        ProductTaxCategory
            classic name is PROD-TAX-CAT
        LandedUnitCost                   is an InternationalCost
            classic name is LAND-UNIT-CST
            precision is DerivedNumberOfDecimalsCost
        ICNCode
        SupplementaryQuantity            is a Quantity 
            classic name is SUPLMNTARY-QTY
            precision is DerivedNumberOfDecimalsQuantity
        RequisitionInterfaceInformation
            classic name for RequisitionInterfaceInformation.SurgerySystemSource is RQSRC-MACHINE
            classic name for RequisitionInterfaceInformation.SurgerySystemRequisitionReference is PAR-ORDER-ID
        PunchoutId
        FreightTerm
            classic name is FREIGHT-TERMS
        ShipTerm
            classic name is FOB-CODE
        TermCode						 is a TermsCode
        CatchWeightCost                  is an InternationalCost
            classic name is CATCH-WGT-COST
            precision is DerivedNumberOfDecimalsCost
        PreviouslyReleased               is Boolean
            classic name is PREV-RELEASED
        SourcingEvent
            classic name is SS-EVENT-NBR
        CommodityCode					 is a CommCodes
        UseProcurementCard               is Boolean
            classic name is P-CARD-FLAG
        ChargeQuantity                   is a Quantity 
            classic name is CHARGE-QTY
            precision is DerivedNumberOfDecimalsQuantity
        ChargedNotReceivedQuantity       is a Quantity 
            classic name is CHG-NO-REC-QTY
            precision is DerivedNumberOfDecimalsQuantity
        ChargeApprovedQuantity           is a Quantity 
            classic name is CHRG-APPRV-QTY
            precision is DerivedNumberOfDecimalsQuantity
        ChargeDisputeQuantity            is a Quantity 
            classic name is CHRG-DISPT-QTY
            precision is DerivedNumberOfDecimalsQuantity
        OriginalLineNumber               is a LineNumber
            classic name is ORIG-LINE-NBR
        Retainage                        is Numeric size 1
            States
                No                         value is 0
                Yes                        value is 1
                RetainageOnContract 	   value is 3
                    default label is "Retainage on Contract"
        RetainageFirstPercent            is a Pct
            classic name is RET-PCT-1
        RetainageSecondPercent           is a Pct
            classic name is RET-PCT-2
        RetainageUpToPercentComplete     is a Pct
            classic name is RET-UP-TO-PCT
        RetainagePercentComplete         is a Pct
            classic name is RET-PCT-COMP
        RetainageOverridePercentComplete is a Pct
            sql name is ROverridePercentComplete
            classic name is RET-OVRD-PCT
        ChargebackAmount                 is an InternationalAmount
            classic name is CHARGEBACK-AMT
			protected        
        UNSPSCCode
            classic name for UNSPSCCode.UNSPSCSegment is ICSEGMENT
            classic name for UNSPSCCode.UNSPSCFamily is ICFAMILY
            classic name for UNSPSCCode.UNSPSCClass is ICCLASS
            classic name for UNSPSCCode.UNSPSCCommodity is ICCOMMODITY
        MemoQuantity                     is a Quantity 
            classic name is MEMO-QTY
            precision is DerivedNumberOfDecimalsQuantity
			protected        
        ServiceCancelAmount              is an InternationalCost
            classic name is SERV-CXL-AMT
            precision is PurchaseOrder.Currency.NumberOfDecimals
        MemoAmount                       is an InternationalAmount
            classic name is MEMO-AMT
        PurchaseOrderUserField7          is a UserFld7
            classic name is PO-USER-FLD-7
        EAMOperationNumber               is an OperationNumber
            classic name is EAM-OPER-NBR
        EAMSequenceNumber                is a SeqNbr
            classic name is EAM-SEQ-NBR
        EAMWorkOrderNumber               is a WorkOrderNumber
            classic name is EAM-WO-NBR
        PatientProcedure
        	classic name is HPP-OBJ-ID
			restricted
        	delete ignored
        CreatedBy                        is an Operator 
        	holds pii
        LastUpdateBy                     is an Operator 
        	holds pii
        LastUpdateDate                   is TimeStamp
            classic name is LAST-UPDT-DATE
        ReturnQuantity                   is a Quantity
            classic name is RETURN-QTY
            precision is DerivedNumberOfDecimalsQuantity
		CnCode                           is a ConsignCode
        GlobalLineType
            classic name is GLBL-LINE-TYPE
		PurchaseOrderLineLifeCycleState	 is Numeric size 1
            States
                Unreleased	        value is 0
                Released			value is 1
                Canceled	        value is 2
                Closed			    value is 3
                Historical			value is 4
		DistributionBy
		OriginalItem					is like Item
		CatchWeightCancelQuantity				is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightMatchQuantity				is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightChargebackQuantity			is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightSubstituteQuantity			is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightRejectedQuantity				is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightReturnedQuantity				is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightArchivedQuantity				is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightMemoQuantity					is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightWriteOffQuantity				is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		CatchWeightMatchedNotReceivedQuantity	is a Quantity
			protected
			precision is DerivedNumberOfDecimalsQuantity
		EAMWorkOrder
		EAMWorkOrderActivity
		EAMProjectID
		EAMProjectType
		EAMProjectTaxCode
		EAMManufacturing
    	EAMTrade
    	EAMCommodityCode
    	EAMLineType
    	ExcludePOLine				is Boolean
    	Chemical					is Boolean
    	RebuildRepair				is Boolean
    	TestRequired				is Boolean
    	EAMDescription					is a Description3
		EDIOutputUnitCost           is an UnsignedUnitCost
			precision is DerivedNumberOfDecimalsCost
		EDIOutputLineAmount         is an InternationalAmount
        E2GCompCode                 is a Name	 
        	holds pii
    	EAMTool						is a EAMToolField  
		PointOfTitleTransfer

        TemporaryHold                   is AlphaUpper size 1
            classic name is TEMP-HOLD	
            States
                ApprovedByEngine value is "A"
                    default label is "Approved by Engine"
                SentForApproval  value is "S"
                    default label is "Sent for Approval"
				RejectedByEngine value is "R"
					default label is "Rejected by Engine"
		Processor					is an Employee
		CapitatedProcedureLine      is like ContractLine 
		CapitatedComponentGroup     is Numeric 2
		CapitatedProcedureLevel     is Numeric size 1
			States 
				NotApplicable               value is 0
				Primary                     value is 1
				Revision                    value is 2	
		SpecialHandlingCode
		SpecialHandlingInstructions			is a Description4
		HandlingTimeInMinutes
		POShipDate					is Date
		IDMReprintStatus     		is AlphaUpper size 2
			States
				ForReprint             		value is "FR"
				InProgress               	value is "IP"
				Printed                  	value is "PR"

	Transient Fields
		TransientInventoryCompany		is a LikeInventoryCompany
			derive value from Company
		TransientInventoryLocation		is a LikeInventoryLocation
			derive value from ShipToLocation
		TransReturnUnitCost				is an UnsignedUnitCost
			derive value from DerivedReturnCost
    		precision is DerivedNumberOfDecimalsCost
		TransientItemSubstitute			is Boolean
		StructureDefaultCode
			derive value from Company.PurchaseOrderStructureDefaultCode
		EnteredContractLine				is a ContractLine
			context of Contract
		UserElementGroup                                             
		TaxEntityValue					is a TaxEntity							
			derive value from Company.AccountingEntity
		ItemLocation
		StandardCommentCode
        TemplateAccount					is a FinanceCodeBlock
		TransientProcurementTemplate	is a ProcurementTemplate
        BypassDistributionCreation		is Boolean
        BypassQuantityFromSource		is Boolean
        ReturnedQuantity				is a Quantity
        	derive value from first VendorReturnLinesCreationRel.ReturnQuantity
        	precision is DerivedNumberOfDecimalsQuantity 
        TransientCatchWeightReturnedQuantity				is a Quantity
        	derive value from first VendorReturnLinesCreationRel.CatchWeightQuantity
        	precision is DerivedNumberOfDecimalsQuantity 
		TransientFromBlanketContract	is Boolean
		TransientBypassUnitCostValidation	is Boolean
		TransientBypassCostDefaulting	is Boolean

		PurchaseOrderAddOnChargeMatchedQuantity is like Quantity

		FromInterfaceUpdate             is Boolean
		DistributionCounter is Numeric size 6
		ProcurementTransactionDistributionHasActivity is Boolean
		

		TransientLineSourceCompany 				is like OperatingCompany  
		TransientLineSourceLineNumber 			is like SourceDocumentNumeric 
		TransientLineSourceDocumentNumber 		is Numeric size 6 
		PurchaseOrderLineCancelAOCAmount is an InternationalAmount	

		PurchaseOrderLineCancelComputedTaxAmount is an InternationalAmount

		PurchaseOrderLineCancelWareHouseDemandTotalQuantity is like Quantity

		PurchaseOrderLineSourceCalculatedQuantity is like Quantity

		PurchaseOrderLineAdditionalQuantityToCancel is like Quantity

		PurchaseOrderLineSourceQuantityToProcess is like Quantity

		PurchaseOrderLineDistCancelQuantity is like Quantity

		PurchaseOrderLineDistCancelAmount  is an InternationalAmount

		PurchaseOrderLineSourceMultipleLinesCancelQuantity  is like Quantity

		PurchaseOrderLineSourceEnteredUnitCost  is an InternationalCost


		PrmPOReceiptCompany is like Company
		PrmPOReceiptPurchaseOrderReceipt is a PurchaseOrderReceipt
		PrmPOReceiptPurchaseOrderReceiptLine is a PurchaseOrderReceiptLine
		PrmPOReceiptAddOnCharge is an AddOnCharge
		
		

		PurchaseOrderLineDeleteLineSourceTotalQuantity is like Quantity

		PurchaseOrderLineDeleteLineSourceCalculatedQuantity is like Quantity

		PurchaseOrderLineDeleteLineSourceWareHouseDemandTotalQuantity is like Quantity

		PurchseOrderLineAdditionalQuantityToDelete is like Quantity

		PurchaseOrderLineDeleteLineSourceWareHouseDemandMaxQuantityToDelete is like Quantity 

		PurchaseOrderLineDeleteDeletedQuantity is like Quantity	

		PrmWHDLCompany is like Company
		PrmWHDLLocation is like InventoryLocation						 
		PrmWHDLDocNumNumeric is a SourceDocumentNumeric
		PrmWHDLLineNumber is a LineNumber		
		PurchaseOrderLineWHDLQuantity is like Quantity

				

		PurchaseOrderLineUpdateFromMatchProcessOnly is Boolean

		PurchaseOrderLineUpdateFromUnMatchProcess is Boolean
			    
		PurchaseOrderLineUpdateFromMatchUnmatchedQuantity is like Quantity

		PurchaseOrderLineUpdateFromMatchOriginalMatchedQuantity is like Quantity

		PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity is like Quantity


		LocalUpdateFromMatchMatchedQuantity is like Quantity	

		LocalUpdateFromMatchMatchedAmount is an InternationalCost

		LocalUpdateFromMatchVendorPriceUOM is like UnitOfMeasure

		LocalUpdateFromMatchChargebackQuantity is like Quantity

		LocalUpdateFromMatchChargebackAmount is an InternationalAmount

		LocalUpdateFromMatchMemoQuantity is like Quantity

		LocalUpdateFromMatchWriteOffQuantity is like Quantity	

		LocalUpdateFromMatchCostUpdate is Boolean

		LocalUpdateFromMatchOutputQuantity is like Quantity

		LocalFromMatchCatchWeightMatchQuantity is like Quantity
		LocalFromMatchCatchWeightMNRQuantity is like Quantity
		LocalFromMatchCatchWeightChargebackQuantity is like Quantity
		LocalFromMatchCatchWeightWriteOffQuantity is like Quantity
		LocalFromMatchCatchWeightMemoQuantity is like Quantity

		PurchaseOrderReleaseLineAmountTotal is an InternationalAmount

		PurchaseOrderReleaseTotalUsedAmount is an InternationalAmount

		PurchaseOrderReleaseContractTotal is an InternationalAmount

		TransientByPassLineAddOnChargeCallback 	is Boolean
		TransientByPassHeaderCallback			is Boolean
		VendorPriceUnitCost	is an UnsignedUnitCost			 
			derive value from DerivedVendorPriceUnitCost
			precision is DerivedNumberOfDecimalsCost
			
			

		TransientUpdatePatientProcedure			 is AlphaUpper size 1
			derive value from DerivedPatientProcedureUpdate
        TransientProcedure						 is a Procedure
			derive value from DerivedTranProcedure
        TransientProcedureDate                   is Date
			derive value from DerivedTranProcedureDate       
        TransientProcedureModifier				 is AlphaUpper size 2
			derive value from DerivedTranProcedureModifier	
        TransientPhysicianName                   is a PhysName 
        	holds pii
			derive value from DerivedTranPhysicianName
        TransientNurseCoordinator                is a NrsCoord
        	derive value from DerivedTranNurseCoordinator
       	TransientSalesRepresentative             is a SalesRep
       		derive value from DerivedTranSalesRepresentative
        TransientOrderNumber                     is a OrdNbr
        	derive value from DerivedTranOrderNumber
        TransientRequestor						 is a Requestor
        	derive value from DerivedTranRequestor
       	TransientLot                             is an ItemLot
       		derive value from DerivedTranLot
        TransientSerialNumber                    is an ItemSerialNumber
        	derive value from DerivedTranSerialNumber
        TransientUserDefinedField1				 is a Userdef1
        	derive value from DerivedTranUserDefinedField1
        TransientUserDefinedField2				 is a Userdef2
        	derive value from DerivedTranUserDefinedField2

        TransientVisitNumber					 is a PatientVisit
        	derive value from DerivedTranVisitNumber
		TransientPatientID                       is a Patient
			derive value from DerivedTranPatientID
        TransientCaseNumber						 is a CaseNumber
			derive value from DerivedTranCaseNumber	
       	TransientPatientLastName                 is a LastName
       		derive value from DerivedTranPatientLastName
        TransientPatientFirstName                is a FirstName	 
        	holds pii
        	derive value from DerivedTranPatientFirstName
        TransientPatientMiddleName            	 is a MiddleName
        	derive value from DerivedTranPatientMiddleName
        TransientBirthdate						 is Date
        	derive value from DerivedTranBirthdate
        TransientGender							 is a Gender
        	derive value from DerivedTranGender
        TransientSocialSecurityNumber			 is a TaxID 
        	holds pii
        	derive value from DerivedTranSocialSecurityNumber
        TransientUniqueDeviceId 				 is Alpha 120
        	derive value from DerivedTranUniqueDeviceId
        TransientGTIN 							 is a ItemGTIN
        	derive value from DerivedTranGTIN
        TransientManufacturer  					 is a Manufacturer
        	derive value from DerivedTranManufacturer
        TransientManufacturerNumber				 is a ManufacturerNumber
        	derive value from DerivedTranManufacturerNumber
        TransientManufacturingDate				 is Date
        	derive value from DerivedTranManufacturingDate
        TransientExpirationDate 				 is Date
        	derive value from DerivedTranExpirationDate
        TransientItem							is like Item
        	derive value from PurchaseOrderLine.Item

        TransientLineType						 is Numeric 1
        TransientCurrencyTable                   is a CurrencyTable
        	derive value from PurchaseOrder.CurrencyTable
		StandingEarlyDeliveryDate                is Date
		TransientStocklessRequestingLocation	is Boolean
			derive value from DerivedStocklessRequestingLocation
		TransientGLCalendarPeriod 				is a GeneralLedgerCalendarPeriod	
			derive value from PurchaseOrder.GeneralLedgerCalendarPeriodXrefRel.GeneralLedgerCalendarPeriod
		TransientBypassOpenPurchaseAmountUpdate	is Boolean
		TransientPurchaseOrderCurrency			is a ToCurrency
			derive value from PurchaseOrder.Currency
		TransientCatchWeightReturnQuantity		is like Quantity
			default label is "StockQuantity"
		TransientBypassSubstitution				is Boolean
		TransientPurchaseOrderLineLifeCycleStateForSearch	 is Numeric size 1
			default label is "LineStatus"
			derive value from PurchaseOrderLineLifeCycleState
            States
                Unreleased	        value is 0
                Released			value is 1
                Closed			    value is 3
                Historical			value is 4
        TransientUpdateFromPOInterface			is Boolean
		TransientBypassAOCCreation				is Boolean 
		TransientOnline							is Alpha size 1
			derive value from DeriveReturnYes
        
		
	Local Fields
		LocalVendorChange			is Boolean
        RNILocalFields                is a RNIWork
        RNILocalRD                    is a RNIData
        I1                            is Numeric size 2
        Skip                        is Boolean
        LMatchPOInv					is like MatchPurchaseOrderInvoice
        OldReceivedQuantity         is like Quantity
        LPurchaseOrderLineAddOnCharge    is an AddOnCharge
		CopyErrorMessage			is Alpha size 200
		ContractLineView			is a ContractLine view
		UOMCalculation
		LocalAddOnCost				is an AddOnCharge
		LocalLineNbr		        is Numeric size 6
		LocalLineSeq				is Numeric size 4
		LocalQuantity				is Decimal size 13.4
		LocalRequestingLocation		is AlphaUpper size 5
		LocalRecallGroup			is AlphaUpper size 4
		LocalRecallNotice			is a RecallNotice
		LocalRecallProduct			is a RecallProduct
		CurrencyExchange
		CalculateTax
		LocalCalculateTaxExecuted	is Alpha 1
		LocalJurisdictionLookupKey  is Alpha 200					
		LocalTaxTable				is a TaxTableField
		LocalShippedQuantity		is a Quantity
    	LocalWarehouseQuantity		is a Quantity
		LocalTotalPORecQtyInStock	is a Quantity
		LocalTotalPORecQtyInBuyUOM  is a Quantity
		LocalTotalRejectedQuantity	is like Quantity
		LocalNewReceivedQuantity	is a Quantity
		LocalNewReceivedUOM			is a UnitOfMeasure

		LocalContractOldQty	is like Quantity
		LocalContractQuantity is like Quantity  

		LocalExchangedAmt	is an InternationalAmount  
		LocalAOCAmt			is an InternationalAmount 
		LocalTaxAmt			is an InternationalAmount		
		LocalAOCTaxAmt		is an InternationalAmount
		LocalOldTaxAmt			is an InternationalAmount	
		LocalExchangeTaxAmt	is an InternationalAmount
		ClosePurchaseOrderLine    is Boolean
		LocalDeletePurchaseOrderLineSourceFlag is Boolean



		UnitOfMeasureEdit
		RoundedValue
    	LocalRetPercentComplete					is a Pct	
    	LocalCatchWeightFromMatch 				is Boolean
		LocalCatchWeightChargebackQuantity 		is like Quantity

		LocalUpdateFromMatchProcessedQuantity 	is like Quantity

		LocalUpdateFromMatchInvoiceUnitCost 	is like InternationalCost

		LocalReplaceItemFlag 					is Boolean
		Execute                 				is Boolean
		LocalContractExtendedAmount	 			is an InternationalAmount
		LocalContractLineContractAmount	 		is an InternationalAmount
		LocalContractLineQuantity 				is like Quantity
		ProcurementCostDefault
		BypassHeaderTotalsUpdate				is Boolean
		DistributionTotalsComputed				is Boolean
		LocalTotalDistributionQuantity			is like Quantity
		LocalTotalDistributionAmount			is an InternationalAmount
		LocalTotalDistributionPercent			is Percent size 6.3
		LocalTotalCommittedAmount				is an InternationalAmount
		LocalAOCAmount      					is like InternationalAmount 
		LocalDistributionAccount				is like TransactionCodeBlock

		LocalPeriodOfPerformanceProject			is like Project	
		LocalReopenClosed                       is Boolean	
		LocalStockWeight						is Decimal size 22.7
		LocalStockVolume						is Decimal size 22.7
        LocalDistributionCode					is a PayablesDistributionCode
		LocalContractIsEntered					is Boolean

		LocalPORecLineTotalsDone				is Boolean
		LocalPORecCount							is Numeric 3
		LocalPORecLineCount						is Numeric 3
		LocalPORecLineEntRecQty					is like Quantity
		LocalPORecLineShipToLocation			is like InventoryLocation
		LocalBuyerMessagesTotalsDone			is Boolean
		LocalBuyerMessagesCount					is Numeric 3
		LocalReceivingBuyerMessageCount			is Numeric 3
		LocalManualBuyerMessageCount			is Numeric 3
		LocalCalculateQuantityAndCostChangesDone is Boolean
		LocalQuantityChanges					is Numeric 3
		LocalUnitCostChanges					is Numeric 3
		LocalAuditActionUpdateCount				is Numeric 3

		LocalPatientProcedureView       		is a PatientProcedure view
		LocalPatientProcedure					is like PatientProcedure
        LocalCalculateTotalsValuesDone          is Boolean
        LocalCalculateMatchedAmountDone			is Boolean
        LocalLineOpenToMatchAmount              is like UnitCost
        LocalLineTotalAddOnChargeAmount         is like InternationalAmount
        LocalLineTotalAddOnChargeAmoutForUI		is like InternationalAmount
        LocalLineAOCForContract					is like UnitCost
		CurrencyChanged                         is Boolean        

		LocalDistributionErrorMessage			is Alpha size 200
		LocalTransactionCodeBlock				is a TransactionCodeBlock
		LocalDefaultedDistribution				is a FinanceCodeBlock
		LocalExecute							is Numeric size 1

		LocalRecPlusCB							is Boolean
		LocalNetReceivedQuantity				is like Quantity
		LocalNetMatchedQuantity					is like Quantity
		LocalNonServiceMatchedAmount			is an InternationalCost
		LocalMNRAmount							is an InternationalCost
		LocalPayablesInvoice					is a PayablesInvoice
		TaxableDetermined                       is Boolean
		LocalTaxAmount 							is like InternationalCost 
			precision is PurchaseOrder.Currency.NumberOfDecimals 
				round to precision        


		SavedTransactionAmount		is a CurrencyAmount
		SavedExchangeDate			is a ExchangeDate
		SavedFromCurrency			is a FromCurrency
		
		LocalCalculateVendorReturnsDone			is Boolean
		LocalVendorReturnLineAddedQuantity		is like Quantity
		LocalVendorReturnLineAuthorizedQuantity	is like Quantity
		LocalCalculateContractInAmountDone		is Boolean
		LocalInAmountExtendedAmount				is an InternationalAmount
		LocalInAmountDifferenceAmountForSpread	is an InternationalAmount
		FromMassAdd                             is Boolean
		LocalProcVariable						is Alpha size 30
  		LocalMaskedValue						is Alpha size 30
  		LocalNonSpace 		  	    			is Numeric size 2 
		LocalCounter							is Numeric size 2
		LocalStartLetter 						is Numeric size 2
  		LocalEndLetter							is Numeric size 2 
  		LocalPosition							is Numeric size 2 
		MadUnitCost								is an InternationalCost
		MaaUnitCost								is an InternationalCost
		Ctr										is Numeric size 2
		ProcInfoForIssueLabel					is a ProcInfoForIssue
		ProcInfoForIssueValue					is a ProcInfoForIssue
		ProcInfoForIssueSpace					is a ProcInfoForIssue
		LocalBypassQuantityConversion			is Boolean

        LocalPostedUnitCost						is a UnitCost
        LocalTotalUnitCost						is a UnitCost
        LocalReceiptWithCAUnitCost				is a UnitCost
        LocalCostDifference						is a UnitCost
        LocalLineUnitCost						is a UnitCost
        LocalCurrencyRelationship				is a CurrencyRelationship

		BudgetExceedFlag						is Boolean	
		IntrastatProcessing
		LocalCheckCountries						is Alpha 1
		LocalOriginCountry						is like Country
		LocalOriginRegion						is like Region
		LocalDeleteLine							is Boolean
		LocalCopyPurchaseOrder					is Boolean
		LocalBypassVendorUpdate					is Boolean



		LocalPOLCurrency						is Alpha size 5
		LocalConfigurationParameter				is Alpha size up to 200

		LocalProcedureInfo						is Alpha size 25
		LocalCancelFromPurchaseOrder			is Boolean
		BypassCommitUpdate						is Boolean
		BypassProjectDateEdit
		

		LocalOperatingCompanyFromInterface		is like InventoryCompany
		LocalRequestingLocationFromInterface	is a RequestingLocation
		LocalUnitCostFromInterface				is like UnsignedUnitCost
		LocalCostCodeFromInterface				is like CostCode
		LocalOldHeaderCurrency					is a Currency
		LocalTaxCode							is like TaxCode
		LocalTrueInvoicedTaxAmount				is an InternalAmount
		LocalTrueAccruedTaxAmount				is an InternalAmount
		LocalPOReceiptImportHeader				is a PurchaseOrderReceiptImport
		LocalConversionRate						is an EnteredCurrencyConversionRate
		BypassHeaderAmountUpdate				is Boolean
		LocalAOCTotalComputed					is Boolean
		LocalOldContract                        is like Contract
		LocalOldContractLine                    is like ContractLine
		LocalVendorPriceQuantityToProcess		is like Quantity
			precision is DerivedNumberOfDecimalsQuantity
				round to precision

		LocalOneSourceTaxAttribute				is a TaxAttributeGroup50
		LocalOneSourceTaxAttributeText			is Text
		AttributeCounter						is Numeric 2
		LocalOneSourceInventoryLocation			is like InventoryLocation


		LocalCleanIdAccountingEntity			is Alpha size 220
		LocalCleanIdAccEntity 					is Alpha size 220
		LocalQuantityAvailableToCancel			is like Quantity
			precision is DerivedNumberOfDecimalsQuantity
				round to precision
		LocalContract                           is like Contract
		LocalPurchaseOrderLine                  is like PurchaseOrderLine
		GTINCheckDigit
		LocalVendorItem							is like VendorItem
		DoDebug									is Boolean
		LocalVendorPriceUnitCost				is an UnsignedUnitCost
			precision is DerivedNumberOfDecimalsCost
				round to precision
		LocalContractValidationError			is Alpha size 200
		LocalContractHasError					is Boolean
		LocalCompany							is like AssetCompany
		LocalTagNumber							is like TagNumber
		LocalFromOpenReceiptArchive				is Boolean
		ValidateBuyer
		LocalBypassVendorLocationValidation		is Boolean
		LocalCancelFromPOLine					is Boolean
		LocalReceiptUOMMismatch					is Boolean
		TaxLineItemView							is a TaxLineItem view
		LocalUniqueID							is like UniqueID
		FirstProcedureLine     					is like ContractLine
		FirstProcedureContract 					is like Contract
		SecondProcedureLine    					is like ContractLine
		SecondProcedureContract					is like Contract  

		LocalVertexDistributionAccount      is a FinanceCodeBlock
		Idx									is Numeric 3
		PerformingRelease 					is Boolean
		LocalComputeQuantity					is like Quantity
		LocalRoundedUpdateFromMatchProcessedQuantity is like Quantity
			precision is DerivedNumberOfDecimalsQuantity
				round to precision
		LocalDefaultCostFromCopy				is  Boolean
		LocalBeforeAndAfterDisplay				is Text
		LocalFromCurrency						is like Currency
		LocalToCurrency 						is like Currency
		LocalContractParticipantMatch			is Boolean 
		LocalStatus								is Numeric size 1						
		LocalTotalReceivedQuantity 				is like Quantity
		LocalPurchaseOrderOpenPurchaseAmount	is an InternationalAmount					
		LocalLandedTaxAmount					is an InternationalAmount					
		LocalTotalLandedAOC						is an InternationalAmount
		LocalAOCLandedUnitCost					is an InternationalAmount
		LocalContractTaxAmt						is an InternationalAmount
		LocalDisableDeliveryTolerance			is Boolean
		ExecuteDeliveryToleranceDays			is Numeric size 3
		LocalLandedAOCAndTaxAmount				is an InternationalAmount

	Context Fields
		PayablesInvoice
		MatchPurchaseOrderInvoice
		FinanceEnterpriseGroup
		RecallProduct
		EarlyDeliveryDateRange                  is a DateRange
		Currency
		AuditDateRange							is a DateRange2
		AlternateShipToLocation

	Dimensions
		Buyer
			caption is "<Name>"
			Attributes
				BuyerGroup
				Name

		TransientGLCalendarPeriod
			dimension name is Calendar
			caption is "<AlternateCaption>"
			Attributes
				YTDCrossReference
				SamePeriodLastYear
				YTDCrossRefSPLY
				PeriodType
				PeriodTypeName
				NumberOfDays
				
		Closed
			dimension name is ClosedFlag

		Contract
		CostCode
		PurchaseOrder.Currency
			dimension name is CurrencyCode
			
		PurchaseOrder.DerivedDropShipDimension
			dimension name is Dropship
			
		Item
			caption is "<ItemLongName>"
			Attributes
				ItemLongName
				ItemGroup
				Item				
				Description
				Description2
				StockUOM
				GenericName
				MajorPurchasingClass
				MajorPurchasingClassDesc
				MinorPurchasingClass
				MinorPurchasingClassDesc
				MajorInventoryClass
				MajorInventoryClassDesc
				MinorInventoryClass
				MinorInventoryClassDesc
				UNSPSCCode.UNSPSCSegment
				UNSPSCCode.UNSPSCFamily
				UNSPSCCode.UNSPSCClass
				UNSPSCCode.UNSPSCCommodity
				Active
				AddedDate
				CommodityCode
				Consignment	    		
				HazardCode	    		
				Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision
				ManufacturerNumber
			Hierarchies 
				PurchasingClass 
					base level included
					Attributes 
						ItemGroup 
						MajorPurchasingClass 
						MinorPurchasingClass
				InventoryClass 
					base level included
					Attributes 
						ItemGroup 
						MajorInventoryClass 
						MinorInventoryClass
				UNSPSC 
					base level included
					Attributes 
						ItemGroup 
						UNSPSCCode.UNSPSCSegment 
						UNSPSCCode.UNSPSCFamily
						UNSPSCCode.UNSPSCClass
						UNSPSCCode.UNSPSCCommodity
				Manufacturer 
					base level included
					Attributes 
						ItemGroup 
						Manufacturer.ManufacturerCode 
						Manufacturer.ManufacturerDivision
						ManufacturerNumber
				HazardCode
					base level included
					Attributes 
						ItemGroup 
						HazardCode

		ItemGTIN
			Attributes
				FullDescription
				FunctionalName
				BrandName
				DietOrAllergen
				LatexIndicator
				ReusabilityCode
				UnitOfMeasure
				Manufacturer
				ManufacturerNumber
		ItemType
		PurchaseOrder.IssueMethod
			dimension name is IssueMethod		
		PurchaseOrderLineLifeCycleState
			dimension name is LifeCycle	
		ShipToLocation
 			dimension name is Location
			Attributes
				Company
				Name
				LocationType
				LocationTypeDescription
				PostalAddress
				GlobalLocationNumber			
		Manufacturer
			Attributes
				Manufacturer.ManufacturerCode
				Manufacturer.ManufacturerDivision

		DerivedPCardDimensionDimension
			dimension name is PCard

		PurchaseOrder
			dimension name is PONumber
			Attributes
				Company
				PurchaseOrder		
				Closed
				Issued
				Released
				Revised
				TaxCode		

		PurchaseOrder.ProcessLevel
			dimension name is ProcessLevel
						



		DerivedSpendCategoryDimension
			dimension name is SpendCategory

		DerivedSourcingEventDimension
			dimension name is SourcingEvent
			 
		TaxCode
		
		DerivedTimeIntelligenceDimension
			dimension name is TimeIntelligence

		Vendor
			caption is representative text
			Attributes
				VendorGroup
				Vendor
				VendorName
				VendorStatus
				VendorClass
				ContactName
				Operator									
				Project
			Hierarchies
				VendorClass
					base level included
					Attributes
						VendorGroup
						VendorClass



			
	Measures		
		ExtendedAmount
		POLineCount
		Quantity		
		EnteredUnitCost
		EnteredUnitCostPerStockUOM
		OpenPurchaseAmount				
		LandedUnitCost
		CanceledLineCount
		CancelQuantity			
		ServiceCancelAmount
		OnOrderQuantity
		OnOrderValue
		MatchedPOLineCount		
		UnMatchedPOLineCount
		MatchedAmount
		InvoicedPOLineCount
		MatchedUnitCost
		MatchedQuantity		
		UnMatchedQuantity
		ReceivedQuantity
		POLinesReceived
		POLinesUnreceived
		ExtendedReceiptValue
		RejectedQuantity 
		POLinesOverReceived
		LinesShippedComplete
		LinesNotShippedComplete 
		QuantityShippedComplete 
		QuantityReceivedOnTime
		ReceivedOnTime
		ReceivedLate
		ReceiptLineCount
		ReceiptQuantity
		POLinesDeliveredToCorrectLocation
		BuyerMessagesCount
		ReceivingBuyerMessageCount
		ManualBuyerMessageCount
		QuantityInStockUOM
		MatchedQuantityInStockUOM
		ExtendedRejectedValue


	Rule Blocks
		LoadOneSourceInputFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.CallingModule				= "Purchase_Order"
				CalculateTax.System						= "PO"
				CalculateTax.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= PurchaseOrder.ProcessLevel
				CalculateTax.Invoice					= PurchaseOrder
				CalculateTax.Suffix						= PurchaseOrder.POCode
				CalculateTax.TaxCode					= TaxCode
				CalculateTax.PostalAddress				= ShipToLocation.PostalAddressForPurchaseOrder
				CalculateTax.CommodityCode				= DerivedCommodityCodeNoDash
				CalculateTax.Vendor						= Vendor
				CalculateTax.PointOfTitleTransfer		= PointOfTitleTransfer
				CalculateTax.DeliveryTerms				= ShipTerm
				CalculateTax.Description				= Description
				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.FromPostalAddress		= PurchaseFromLocation.VendorAddress 
				else
					CalculateTax.FromPostalAddress		= Vendor.VendorAddress		
				CalculateTax.BypassEditing				= true
			
		CreateTaxLineItem
			if (TaxEntityRel.ThirdParty.Sabrix
			or  SingleCallToVertex)
				invoke Create TaxLineItem
					assign result to TaxLineItemView

					invoked.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.InvoiceNumber				= PurchaseOrder
					if (EarlyDeliveryDate entered)
						invoked.InvoiceDate				= EarlyDeliveryDate
					else
						invoked.InvoiceDate				= PurchaseOrder.PurchaseOrderDate
					invoked.TaxEntity					= Company.AccountingEntity

					invoked.LineItemId					= Item
					invoked.RelatedObjectReference		= reference to PurchaseOrderLine
					if (SingleCallToOneSource
					or  SingleCallToVertex)
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= PurchaseOrder.UniqueID
					else
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
					invoked.RelatedLineItemUniqueId		= UniqueID
					invoked.LineItemNumber				= PurchaseOrderLine
					invoked.InvoiceAmount				= ExtendedAmount
					invoked.TaxableAmount				= ExtendedTaxableAmount
					invoked.ShipToTaxCode				= TaxCode
					invoked.ShipToTaxCodeDescription	= TaxCode.Description
					if (TaxEntityRel.ThirdParty.Sabrix)
						invoked.CommodityCode			= DerivedCommodityCodeNoDash
					if (PurchaseOrder.DropshipAddress entered)
						invoked.ShipToAddress		= PurchaseOrder.DropshipAddress
					else
					if (ShipToLocation.PostalAddressForPurchaseOrder entered)
						invoked.ShipToAddress		= ShipToLocation.PostalAddressForPurchaseOrder
					else
						invoked.ShipToAddress		= PurchaseOrder.ProcessLevel.PostalAddress
					invoked.Description				= Description

					if (TaxEntityRel.ThirdParty.VertexOSeries)
						if  (ItemType.Inventoried)
							LocalVertexDistributionAccount 		= GeneralLedgerCategoryRel.InventoryAccount 
						else
							LocalVertexDistributionAccount    	= first PurchaseOrderLineDistributionsRel.DistributionAccount

						if (TaxCode != "00")
							invoked.ShipToTaxCode				= TaxCode									
							invoked.ShipToTaxCodeDescription	= TaxCode.Description

						invoked.CostCenter                     	= LocalVertexDistributionAccount.AccountingUnit    
						invoked.GeneralLedgerAccount 			= LocalVertexDistributionAccount.GeneralLedgerChartAccount 
						invoked.ProductClass                    = MajorPurchasingClass  
						invoked.ProductTaxCategory 				= ProductTaxCategory

						if (IsHSNSACCodeEnabled)
							invoked.CommodityCodeType      		= "HSN"
							invoked.CommodityCode				= HSNSACCode 
						else 
							invoked.CommodityCodeType      		= "UNSPSC"
							invoked.CommodityCode				= UNSPSCCode.UNSPSCCodeDisplay 

						invoked.Quantity 						= Quantity 

		CreateTaxLineItemUserFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				initialize AttributeCounter
				if (TaxAttributesRel exists)
					invoke Create TaxLineItemUserFields
						for each TaxAttributesRel.OneSourceTaxAttributeByNumberRel
							invoked.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							if (SingleCallToOneSource)
								invoked.TaxLineItem.UniqueIdOfRelatedObject	= PurchaseOrder.UniqueID
							else
								invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
							invoked.TaxLineItem.Sequence					= TaxLineItemView.TaxLineItem.Sequence
								if (each.LoadDynamicField.ValueIs.TaxEntity)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= TaxEntityRel.TaxEntity
								else		
								if (each.LoadDynamicField.ValueIs.Company)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName						
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= Company
								else
								if (each.LoadDynamicField.ValueIs.Description)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Description
								else		
								if (each.LoadDynamicField.ValueIs.Vendor)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Vendor
								else				
								if (each.LoadDynamicField.ValueIs.PostingDate)						
									if (EarlyDeliveryDate entered)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName									
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EarlyDeliveryDate
									else
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PurchaseOrder.PurchaseOrderDate
								else			
								if (each.LoadDynamicField.ValueIs.TaxDate)						
									if (EarlyDeliveryDate entered)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName									
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EarlyDeliveryDate
									else
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PurchaseOrder.PurchaseOrderDate
								else
								if (each.LoadDynamicField.ValueIs.GLAccount)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedProcessPOLDistGLAccount
								else			
								if (each.LoadDynamicField.ValueIs.Location)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ShipToLocation
								else			
								if (each.LoadDynamicField.ValueIs.Currency)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PurchaseOrder.Currency
								else			
								if (each.LoadDynamicField.ValueIs.UnitCost)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EnteredUnitCost
								else			
								if (each.LoadDynamicField.ValueIs.ContractType)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Contract.ContractType
								else			
								if (each.LoadDynamicField.ValueIs.Project)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedAccountProject
								else			
								if (each.LoadDynamicField.ValueIs.CommodityCode)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= CommodityCode
								else			
								if (each.LoadDynamicField.ValueIs.UNSPSC)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= UNSPSCCode.UNSPSCCodeDisplay
								else			
								if (each.LoadDynamicField.ValueIs.ProductTaxCatagory)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ProductTaxCategory
								else			
								if (each.LoadDynamicField.ValueIs.TaxUsageCode)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= TaxUsageCode
								else			
								if (each.LoadDynamicField.ValueIs.TaxUsageCode)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= TaxUsageCode
								else			
								if (each.LoadDynamicField.ValueIs.EAMCommodityCode)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EAMCommodityCode
								else			
								if (each.LoadDynamicField.ValueIs.EAMManufacturingIndicator)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldCheckBox.Value[1]
								else			
								if (each.LoadDynamicField.ValueIs.EAMProjectID)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EAMWorkOrder.ProjectID
								else			
								if (each.LoadDynamicField.ValueIs.EAMProjectType)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[23]
								else			
								if (each.LoadDynamicField.ValueIs.EAMPositionFacility)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EAMWorkOrder.PositionFacility
								else			
								if (each.LoadDynamicField.ValueIs.EAMTypeCode)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EAMWorkOrder.TypeCode
								else			
								if (each.LoadDynamicField.ValueIs.EAMUserField30)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[30]
								else			
								if (each.LoadDynamicField.ValueIs.EAMUserField24)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[24]
								else			
								if (each.LoadDynamicField.ValueIs.EAMWorkOrderShipTo)						
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]
								else
								if (each.LoadDynamicField.ValueIs.EAMWorkOrderCountry)						
										LocalOneSourceInventoryLocation = EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]
										if (OneSourceEAMInventoryLocationRel exists
										and OneSourceEAMInventoryLocationRel.PostalAddress.Country entered)
											AttributeCounter +=1	
											invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
											invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[AttributeCounter].Value	= OneSourceEAMInventoryLocationRel.PostalAddress.Country
								else
								if (each.LoadDynamicField.ValueIs.EAMWorkOrderState)						
										LocalOneSourceInventoryLocation = EAMWorkOrder.EAMWorkOrderUserFieldsRel.UserFieldAlpha.Value[32]
										if (OneSourceEAMInventoryLocationRel exists
										and OneSourceEAMInventoryLocationRel.PostalAddress.StateProvince entered)
											AttributeCounter +=1	
											invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
											invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
											invoked.UserElementGroup.UserElement[AttributeCounter].Value	= OneSourceEAMInventoryLocationRel.PostalAddress.StateProvince
								else
								if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedToAccountingEntity
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension1)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedFinanceDimension1
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension2)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedFinanceDimension2
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension3)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedFinanceDimension3
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension4)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedFinanceDimension4
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension5)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedFinanceDimension5
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension6)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedFinanceDimension6
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension7)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedFinanceDimension7
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension8)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedFinanceDimension8
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension9)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedFinanceDimension9
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension10)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedFinanceDimension10
								else
								if (each.LoadDynamicField.ValueIs.Latitude)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ShipToLocation.PostalAddressForPurchaseOrder.GeoLatitude
								else
								if (each.LoadDynamicField.ValueIs.Longitude)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ShipToLocation.PostalAddressForPurchaseOrder.GeoLongitude
								else
								if (each.LoadDynamicField.ValueIs.Altitude)
										AttributeCounter +=1	
										invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
										invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ShipToLocation.PostalAddressForPurchaseOrder.GeoAltitude
								else
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= each.Value

			else 
			if (SingleCallToVertex)
				initialize AttributeCounter
				if (TaxAttributesRel.VertexFlexibleFieldExist)

					invoke Create TaxLineItemUserFields


						invoked.FinanceEnterpriseGroup						= Company.FinanceEnterpriseGroup 

						if (SingleCallToVertex)
							invoked.TaxLineItem.UniqueIdOfRelatedObject 	= PurchaseOrder.UniqueID
						else
							invoked.TaxLineItem.UniqueIdOfRelatedObject 	= UniqueID

						invoked.TaxLineItem.Sequence 						= TaxLineItemView.TaxLineItem.Sequence

						if  (ItemType.Inventoried)
							LocalVertexDistributionAccount 					= GeneralLedgerCategoryRel.InventoryAccount 
						else
							LocalVertexDistributionAccount    				= first PurchaseOrderLineDistributionsRel.DistributionAccount




						Idx = 0

						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

							if (each.Code entered            
							or  each.ExternalValue entered)
								Idx +=1   
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId = each.VertexFlexibleCode.FieldId


								if (each.ExternalValue.ValueIs.TaxEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Company.AccountingEntity
								else    
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Company
								else    
								if (each.ExternalValue.ValueIs.Vendor)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Vendor
								else    
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PurchaseOrder.PurchaseOrderDate
								else    
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PurchaseOrder.PurchaseOrderDate
								else    
								if (each.ExternalValue.ValueIs.AccountingUnit)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
								else    
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
								else    
								if (each.ExternalValue.ValueIs.Location)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ShipToLocation 
								else    
								if (each.ExternalValue.ValueIs.Currency)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PurchaseOrder.Currency
								else    
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = EnteredUnitCost
								else    
								if (each.ExternalValue.ValueIs.ContractType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
								else    
								if (each.ExternalValue.ValueIs.WorkType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
								else    
								if (each.ExternalValue.ValueIs.AccountSubType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
								else    
								if (each.ExternalValue.ValueIs.ServiceType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
								else    
								if (each.ExternalValue.ValueIs.CommodityCode)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = DerivedCommodityCodeNoDash
								else    
								if (each.ExternalValue.ValueIs.UNSPSC)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = UNSPSCCode.UNSPSCCodeDisplay
								else    
								if (each.ExternalValue.ValueIs.ProductTaxCatagory)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ProductTaxCategory
								else    
								if (each.ExternalValue.ValueIs.TaxUsageCode)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TaxUsageCode
								else 
								if (each.ExternalValue.ValueIs.UsageType)			
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
								else 
								if (each.ExternalValue.ValueIs.CustomerType)			
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
								else 
								if (each.ExternalValue.ValueIs.Project)				
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project
								else 
								if (each.ExternalValue.ValueIs.Longitude)				
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ShipToLocation.PostalAddress.GeoLongitude
								else 
								if (each.ExternalValue.ValueIs.Latitude)			
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ShipToLocation.PostalAddress.GeoLatitude
								else 
								if (each.ExternalValue.ValueIs.Altitude)									
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ShipToLocation.PostalAddress.GeoAltitude
								else 
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension1)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension2)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension3)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension4)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension5)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension6)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension7)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension8)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension9)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension10) 
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
								else    
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = each.Code  





						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

							if (each.NumericValue entered            
							or  each.ExternalValue entered)
								Idx +=1   
								invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 

								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = Company
								else    
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
								else    
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = EnteredUnitCost
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 8 
								else    
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = each.NumericValue  







						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

							if (each.DateValue entered            
							or  each.ExternalValue entered)
								Idx +=1   
								invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId = each.VertexFlexibleDate.FieldId 
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = PurchaseOrder.PurchaseOrderDate
								else    
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = PurchaseOrder.PurchaseOrderDate 
								else    
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = each.DateValue  






		LoadVertexOneCall
			if (TaxEntityRel.ThirdParty.VertexOSeries)
				CalculateTax.CallingModule				= "Purchase_Order"
				CalculateTax.System						= "PO"
				CalculateTax.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= PurchaseOrder.ProcessLevel
				CalculateTax.Invoice					= PurchaseOrder
				CalculateTax.Suffix						= PurchaseOrder.POCode
				CalculateTax.PostalAddress				= ShipToLocation.PostalAddressForPurchaseOrder
				CalculateTax.Vendor						= Vendor

				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.POAAddress				= PurchaseFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress				= Vendor.VendorAddress

				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.FromPostalAddress		= PurchaseFromLocation.VendorAddress 
				else
					CalculateTax.FromPostalAddress		= Vendor.VendorAddress		
				CalculateTax.BypassEditing				= true

		VertexFlexibleFields
			if (TaxEntityRel.ThirdParty.VertexOSeries)

				CalculateTax.Invoice						= PurchaseOrder
				if  (ItemType.Inventoried)
					LocalVertexDistributionAccount 			= GeneralLedgerCategoryRel.InventoryAccount 
				else
					LocalVertexDistributionAccount    		= first PurchaseOrderLineDistributionsRel.DistributionAccount

				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.POAAddress					= PurchaseFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress					= Vendor.VendorAddress

				if (InventoriedOrNonstock)
					CalculateTax.ProductClass               = Item.MajorPurchasingClass 
				CalculateTax.CostCenter                     = LocalVertexDistributionAccount.AccountingUnit    
				CalculateTax.PostDate                       = PurchaseOrder.PurchaseOrderDate                    
				CalculateTax.GeneralLedgerAccount 			= LocalVertexDistributionAccount.GeneralLedgerChartAccount 

				if (IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      	= "HSN"
					CalculateTax.HSNSACCode					= HSNSACCode 
				else 
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode					= UNSPSCCode.UNSPSCCodeDisplay 

				if (TaxAttributesRel.VertexFlexibleFieldExist)



					Idx = 0

					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId = each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company.AccountingEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else    
							if (each.ExternalValue.ValueIs.Vendor)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Vendor
							else    
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PurchaseOrder.PurchaseOrderDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PurchaseOrder.PurchaseOrderDate
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ShipToLocation 
							else    
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PurchaseOrder.Currency
							else    






							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredUnitCost
							else    



							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
							else    
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
							else    
							if (each.ExternalValue.ValueIs.CommodityCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = DerivedCommodityCodeNoDash
							else    
							if (each.ExternalValue.ValueIs.UNSPSC)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = UNSPSCCode.UNSPSCCodeDisplay
							else    
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
							else    
							if (each.ExternalValue.ValueIs.TaxUsageCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxUsageCode
							else 















							if (each.ExternalValue.ValueIs.UsageType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
							else 
							if (each.ExternalValue.ValueIs.CustomerType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
							else 
							if (each.ExternalValue.ValueIs.Project)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project
							else 
							if (each.ExternalValue.ValueIs.Longitude)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ShipToLocation.PostalAddress.GeoLongitude
							else 
							if (each.ExternalValue.ValueIs.Latitude)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ShipToLocation.PostalAddress.GeoLatitude
							else 
							if (each.ExternalValue.ValueIs.Altitude)									
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ShipToLocation.PostalAddress.GeoAltitude
							else 
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
							else    
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  






					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    




							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredUnitCost
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 5 
							else    
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  







					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PurchaseOrder.PurchaseOrderDate
							else    



							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PurchaseOrder.PurchaseOrderDate 
							else    
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue  





		CalculateAOCTotal
			if (not LocalAOCTotalComputed)
				for each PurchaseOrderAndLineAddOnCharge set
					LocalLineTotalAddOnChargeAmoutForUI += each.AddOnChargeAmountPOCurrency
					if (each.Vendor = Vendor and each.PrintOnPO)
						LocalLineTotalAddOnChargeAmount += each.AddOnChargeAmountPOCurrency
				LocalAOCTotalComputed = true

		WarehouseDemandProcessing
			if (IsInventoryType
			and WarehouseDemandRel not exists)
				invoke Create WarehouseDemand
					invoked.Company								= Company
					invoked.WarehouseDemand.DemandSystemCode	= "PO"
					invoked.WarehouseDemand.DemandDocument		= PurchaseOrder
					invoked.WarehouseDemand.DemandCompany		= Company
					invoked.DocumentNumberNumeric				= PurchaseOrder
					invoked.Destination							= ShipToLocation
					if (ShipToLocation.WarehouseProcessType entered)
						invoked.RequirePickingFeedback			= ShipToLocation.WarehouseProcessType.RequirePickingFeedback
						invoked.RequirePackingFeedback			= ShipToLocation.WarehouseProcessType.RequirePackingFeedback
					else
						invoked.RequirePickingFeedback			= false
						invoked.RequirePackingFeedback			= false
					invoked.DestinationName						= PurchaseOrder.DropshipName
					invoked.DestinationAddress					= PurchaseOrder.DropshipAddress
					invoked.RequireFreight						= "N"

		ComputeRetainagePercentComplete
			if (Retainage.Yes)
				if (CostOption.CostRequired)
					if (ServiceCode not entered
					or  ServiceCode.Quantity)
						LocalRetPercentComplete = ((MatchedQuantity * EnteredUnitCost) / ExtendedAmount)
					else
						LocalRetPercentComplete = MatchedAmount / ExtendedAmount
				else
				if (CostOption.VendorDetermined 
				and not ItemType.Service)
					LocalRetPercentComplete	= MatchedQuantity / QuantityToProcess

				if (LocalRetPercentComplete entered)
					initialize RoundedValue
					RoundedValue.RoundInput			= LocalRetPercentComplete
					RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
					RoundedValue.RoundTo			= .0001
					RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf	                      		
					RetainagePercentComplete		= RoundedValue.RoundResult      
				else
					initialize RetainagePercentComplete
			





		ReleaseRules
			include ComputeRetainagePercentComplete

			invoke ClosePurchaseOrderLine
			
			if (ReceivedQuantity > 0 
			and ItemType.Inventoried)
				for each PurchaseOrderReceiptLinesWithMatchDetailKeyRel
                    initialize LocalPostedUnitCost
                    initialize LocalTotalUnitCost
                    initialize LocalLineUnitCost
                    initialize LocalCostDifference
					if (not each.Status.Entered
					and each.MatchedQuantity = 0)


						LocalReceiptWithCAUnitCost = each.DerivedInventoryTransactionUnitCost 

						LocalLineUnitCost = DerivedLandedUnitCostInStockUOM
						
						if (LocalLineUnitCost != LocalReceiptWithCAUnitCost) 
							LocalCostDifference = LocalLineUnitCost - LocalReceiptWithCAUnitCost
							LocalQuantity		= each.DerivedReceivedQuantityInStockOrCatchweightUOM
						
						if (LocalCostDifference entered)
							if (PurchaseOrder.Currency != Company.Currency)
								LocalCurrencyRelationship.FromCurrency	= PurchaseOrder.Currency
								LocalCurrencyRelationship.ToCurrency	= Company.Currency
								if (LocalCurrencyRelationship.MultDiv.Multiply)
									LocalCostDifference	*= PurchaseOrder.EnteredCurrencyConversionRate
								else
									LocalCostDifference /= PurchaseOrder.EnteredCurrencyConversionRate
							invoke UpdateForCostAdjustment ItemLocationRel
								invoked.PrmQuantity							= LocalQuantity 
								if (IsCatchWeightItem)
									invoked.PrmSecondaryQuantity			= each.EnteredReceivedQuantity 
								
								invoked.PrmCostDifference 	= LocalCostDifference 
								invoked.PrmDocumentNumber   = each.InventoryTransactionLineRel.InventoryTransaction
								invoked.PrmLineNumber		= each.PurchaseOrderReceiptLine
								invoked.PrmEnteredItem		= MatchDetailKey
								if (PurchaseOrder.ProcessLevel.ReceiptAccrualAccount entered)
									invoked.PrmOffsetAccount     = PurchaseOrder.ProcessLevel.ReceiptAccrualAccount
								else
									invoked.PrmOffsetAccount     = Company.MatchCompany.ReceiptAccrualAccount

								

			if (CostOption.NoCharge)
				for each LineSourcesFromRQRel
					invoke Cancel each
						invoked.PrmCloseNoCharge = true

				if (HasPOReceiptLines)
					for each PurchaseOrderReceiptLinesRel
						if (each.OpenToMatchQuantity entered)
							invoke Update each
								initialize invoked.OpenToMatchQuantity

			if (PurchaseOrderLineDistributionsWithAssetTemplateRel exists
			and !AssetHeaderExists)
				invoke Create PurchaseOrderLineAsset
					fill in fields from this instance
					invoked.Vendor						= PurchaseOrderLine.Vendor
					if (PurchaseOrderLine.IsDropship)
						invoked.Dropship				= "Y"
					else
						invoked.Dropship				= "N"
					invoked.PurchaseOrderLineQuantity	= PurchaseOrderLine.Quantity
					if (UnreleasedPurchaseOrderReceiptLinesRel exists)
						invoked.ReceivedQuantity 		= UnreleasedPurchaseOrderReceiptLinesRel.EnteredReceivedQuantity

			for each LineSourcesFromOrderEntryAndRequisitionRel
				if (each.FromOrderEntryOrRequisition
				and CostOption.NoCharge
				and (ItemType.Service
				or	 PurchaseOrder.Dropship))
					invoke Update each
						invoked.ProcessedQuantity    =    each.Quantity
				if (each.FromRequisition)
					invoke UpdateAmountsForRequisitionLines each
						invoked.FromPORelease = true

			if (Contract entered)
				if (!CostCode.Punchout)
					if (ReceivedQuantity > QuantityToProcess) 
						LocalQuantity						= ReceivedQuantity
					else
						LocalQuantity						= QuantityToProcess
					if (EnteredBuyUOM != VendorPriceUOM)
						initialize UOMCalculation
						UOMCalculation.InputQuantity		= LocalQuantity
						UOMCalculation.InputUOM				= EnteredBuyUOM
						UOMCalculation.InputToUOM			= VendorPriceUOM
						UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
						LocalQuantity						= UOMCalculation.OutputQuantity

					LocalContractQuantity 					= LocalQuantity
					LocalVendorPriceQuantityToProcess		= LocalQuantity
					if (LastMatchUnitCost entered)
						ContractAmount = LocalQuantity * LastMatchUnitCost
					else
						ContractAmount = LocalQuantity * EnteredUnitCost
					include CalculateAOCSPIN


					invoke UpdateContractAmounts
						invoked.PrmTaxAmount				= LocalContractTaxAmt
						invoked.PrmAOCAmount				= LocalAOCAmt
						invoked.PrmAmount					= ContractAmount
						invoked.PrmContractQuantity			= LocalContractQuantity
						invoked.PrmContractCurrency			= PurchaseOrder.Currency
						invoked.PrmContractUOM				= EnteredBuyUOM
						invoked.PrmFromRelease              = true
						if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate = 1)
							invoked.PrmContractDate 		= PurchaseOrder.PurchaseOrderDate
						if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate = 2)
							invoked.PrmContractDate			= EarlyDeliveryDate

			for each UnmatchedPayablesInvoiceDetailsRel
				if (each.PayablesInvoice.Status.Unreleased
				or  each.PayablesInvoice.Status.PendingApproval
				or  each.PayablesInvoice.Status.Approved)
					invoke PurchaseOrderCostMessageCheck each

			Released = true
			
			if (PurchaseOrder.Closed.Yes
			or	Closed.Yes)
				make transition to Closed
			else
				make transition to Released
			
			if (TaxEntityRel.ThirdParty.Sabrix
			and TaxEntityRel.DelayTaxProcessing
			and PurchaseOrder.DerivedNumberOfTaxLineItems > 200)
				initialize LandedUnitCost
				include CalculateLandedUnitCost
				for each PurchaseOrderLineAddOnChargesRel
					invoke CalculateOneSourceLandedUnitCost each
				include UpdateHeaderAmountsFromLine
			else 
			if  (VertexDelayTaxCall)
				PerformingRelease = true 
				initialize LandedUnitCost
				include CalculateLandedUnitCost
				for each PurchaseOrderLineAddOnChargesRel
					invoke CalculateVertexLandedUnitCost each
				include UpdateHeaderAmountsFromLine
					
			PreviouslyReleased = true


		CreatePurchaseOrderLineDistributionError 
			
			LocalTransactionCodeBlock.Ledger = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CoreLedger
			
			LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.ContractLine]				= first ContractLineDistributionsRel.ContractLineDistribution.DistributionAccount
			if (ContractParticipantByCompanyRel exists)
				LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.ContractParticipant]		= ContractParticipantByCompanyRel.AccountingUnit
			else
				if (ContractParticipantByLocationRel exists)
					LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.ContractParticipant] = first ContractParticipantByLocationRel.AccountingUnit
					
			LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.PurchaseOrderHeader] 		= PurchaseOrder.DefaultDistributionAccount
			LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.TemplateLine] 				= TemplateAccount
			LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.RequestingLocation] 			= PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation.IssueAccount
			if (ItemType.NonStock)
				LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.ShipToLocationGLCategory]	= ItemLocationRel.GeneralLedgerCategory.IssueAccount
				LocalTransactionCodeBlock.FinanceCodeBlockArray.Block[AccountDefaultingComponentPO.Item] 						= Item.IssueAccount
			
			LocalExecute = LocalTransactionCodeBlock.StructureCodeDefault
			LocalDefaultedDistribution = LocalTransactionCodeBlock
			
			if (PurchaseOrderLineDistributionErrorRel exists
			and not FromMassAdd) 
				invoke Update first PurchaseOrderLineDistributionErrorRel
					invoked.DefaultedDistribution = LocalDefaultedDistribution
					if (LocalDistributionErrorMessage[1:7] = "Warning")
						invoked.ErrorMessageNumber = 999
					else
						invoked.ErrorMessage = LocalDistributionErrorMessage
			else
			
				invoke Create PurchaseOrderLineError
					fill in fields from this instance
					invoked.ErrorType = PurchaseOrderLineError.ErrorType.Distribution
					invoked.DefaultedDistribution = LocalDefaultedDistribution
					if (LocalDistributionErrorMessage[1:7] = "Warning")
						invoked.ErrorMessageNumber = 999
					else
						invoked.ErrorMessage = LocalDistributionErrorMessage
		
		PurchaseOrderLineDistributionAccountDefaulting 
			if (not BypassDistributionCreation 
			and not IsInventoryType
			and DistributionCode not entered)
				if  (Contract entered 
				and (Contract.AllowReferenceOfItemsNotOnContract or ContractLine entered)
				and  Contract.UseCommitments)
					if (Contract.UseHeaderCommitments)
						invoke CreateRestricted PurchaseOrderLineDistribution
							fill in fields from this instance
							invoked.TransientBypassCommittedContractValidation	= true
							invoked.DistributionAccount		= Contract.CommitmentAccount
							invoked.DistributionPercent		= 1
					else
						for each ContractLine.ContractLineDistribution set
							invoke CreateRestricted PurchaseOrderLineDistribution
								fill in fields from this instance
								invoked.TransientBypassCommittedContractValidation	= true
								invoked.DistributionAccount	= each.DistributionAccount
								invoked.DistributionPercent = each.Percent
					DistributionBy = DistributionBy.ByPercent 
				else
					initialize LocalDistributionErrorMessage
					invoke Create PurchaseOrderLineDistribution
						resume on error
							LocalDistributionErrorMessage = error message
						fill in fields from this instance
						invoked.LocalContractDefaulting	= true
					if (LocalDistributionErrorMessage entered)
						include CreatePurchaseOrderLineDistributionError
				initialize DistributionTotalsComputed
		
		CopyContractLineComment
			if (ContractLine.ContractLineCommentExists 
			and PurchaseOrder.BlanketOrStandingContract not entered)
				for each ContractLine.ContractLineComment set
					if (not each.CommentUsedFor.DisplayOnly)
						invoke SystemCreateLine PurchaseOrderLineComment
							fill in fields from this instance
							invoked.CommentTitle 		= each.CommentTitle
							if (each.CommentUsedFor.PrintOnPurchaseOrder)
								invoked.CommentType 	= "P"
							else
								invoked.CommentType 	= "N"
							invoked.CommentText  		= each.Description
                            invoked.Attachment.File     = each.Attachment.File                      
                            invoked.Attachment.MimeType = each.Attachment.MimeType
                            invoked.Attachment.Title    = each.Attachment.Title

		UpdatePurchaseOrderReceiptLineCost
			if (VendorBuyUnitCost changed)
				for each PurchaseOrderReceiptLinesRel
					invoke CostUpdatedFromPOLine each
						invoked.PrmNewCost = EnteredUnitCost
						invoked.PrmNewExtendedAmount = CalculateExtendedAmount

		UpdateQuantitiesOrUnitCostOutsidePOLine
			if (Quantity changed
			or  EnteredBuyUOM changed
			or  ShipToLocation changed
			or  EnteredUnitCost changed
			or  VendorBuyUnitCost changed
			or  EarlyDeliveryDate changed)
				if (Quantity changed
				or  EnteredBuyUOM changed)
					if (instance count of PurchaseOrderLineSource set = 1
					and not BypassQuantityFromSource)
						if (InventoriedOrNonstock
						and EnteredBuyUOM not = first PurchaseOrderLineSource set.EnteredUOM)
							initialize UOMCalculation
							UOMCalculation.InputUOM				= EnteredBuyUOM
							UOMCalculation.InputToUOM			= first PurchaseOrderLineSource set.EnteredUOM
							UOMCalculation.InputQuantity		= Quantity
							UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
							LocalPOLineSourceQuantity			= UOMCalculation.OutputQuantity
						else
							LocalPOLineSourceQuantity			= Quantity
						invoke UpdateSourceQuantityFromLine PurchaseOrderLineSource set
							invoked.Quantity		= LocalPOLineSourceQuantity
							if (not InventoriedOrNonstock)
								invoked.EnteredUOM	= EnteredBuyUOM  
				
				include WarehouseDemandProcessing
				include SetWarehouseDemandFields
			
			if ((Quantity changed
			or   EnteredBuyUOM changed
			or   EnteredUnitCost changed
			or   LandedUnitCost changed)
			and  not TransientByPassLineAddOnChargeCallback)
				for each PurchaseOrderAndLineAddOnCharge set
					invoke Update each
						if (Quantity changed
						or  EnteredBuyUOM changed)
							invoked.Quantity 								= QuantityToProcess
                        if (LandedUnitCost changed)
                        	invoked.LocalNewLandedUnitCost 					= true
                        invoked.TransientByPassPurchaseOrderLineCallback 	= true

			if (EnteredUnitCost changed
			and POReceiptInvoiceLinkWithReceivedQuantityRel exist)
				invoke Update POReceiptInvoiceLinkWithReceivedQuantityRel
					invoked.PoCostUpd	= EnteredUnitCost

		VendorItemProcessing
			if (VendorItem.MinimumOrderQuantity entered)
				initialize UOMCalculation
				UOMCalculation.InputUOM 			= EnteredBuyUOM
	    		UOMCalculation.InputQuantity 		= Quantity
	    		UOMCalculation.Method 				= UOMCalculation.Method.ConvertToBuy
				
				constraint (UOMCalculation.OutputQuantity >= VendorItem.MinimumOrderQuantity)
					"QuantityOrderedIsLessThanVendorMinimum" 

			QuantityToProcess	= Quantity - CancelQuantity
			
			if (VendorItem.VendorBuyUOM entered)
				if (ItemLocationRel.DefaultSourceUOM.UnitOfMeasure entered)
					constraint (VendorItem.VendorBuyUOM = ItemLocationRel.DefaultSourceUOM.UnitOfMeasure)
						"ConflictBetweenVendorBuyUOMAndItemSourceUOM"	

				if (HasItemLocationStockUOM)	
					constraint (VendorBuyLocationItemUOMRel.OKForBuying)
						"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>IsNotAValidUOMOnTheLocation"


				if (EnteredBuyUOM != VendorItem.VendorBuyUOM)
					initialize UOMCalculation
					UOMCalculation.InputUOM						= EnteredBuyUOM
					UOMCalculation.InputToUOM					= VendorItem.VendorBuyUOM
					UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
					
					if (action type.Create or VendorBuyUnitCost changed)
						UOMCalculation.InputUnitCost			= VendorBuyUnitCost
						VendorBuyUnitCost						= UOMCalculation.OutputUnitCost
					
					if (not LocalBypassQuantityConversion)	
						if (Item.NumberOfDecimalsQuantity.0Decimals)
							UOMCalculation.ValidateDecimal		= true
							UOMCalculation.LocalErrorMessage	= ConvertErrorMessage
						else
							UOMCalculation.DoRounding			= true
						
						UOMCalculation.InputQuantity			= Quantity
						Quantity								= UOMCalculation.OutputQuantity
						UOMCalculation.InputQuantity			= QuantityToProcess
						QuantityToProcess						= UOMCalculation.OutputQuantity
						
						if (ReceivedQuantity entered)
							UOMCalculation.InputQuantity		= ReceivedQuantity
							ReceivedQuantity					= UOMCalculation.OutputQuantity
							
						if (CancelQuantity entered)
							UOMCalculation.InputQuantity		= CancelQuantity
							CancelQuantity						= UOMCalculation.OutputQuantity
					
					initialize LocalBypassQuantityConversion
					
					EnteredBuyUOM								= VendorItem.VendorBuyUOM
					EnteredBuyUOMMultiplier						= ItemUOMBuyRel.UOMConversion
			


			if (VendorItem.VendorPriceUOM entered)



				if (VendorPriceUOM != VendorItem.VendorPriceUOM)
					VendorPriceUOM								= VendorItem.VendorPriceUOM
					VendorPriceUOMMultiplier					= ItemUOMPriceRel.UOMConversion
			else
				VendorPriceUOM									= DerivedVendorPriceUOM
				VendorPriceUOMMultiplier						= DerivedVendorPriceUOMMultiplier
			
			EnteredUnitCost										= DerivedVendorPriceUnitCost
			if (DoDebug)
				display "POL:VendorItemProcessing:VendorBuyUnitCost:<VendorBuyUnitCost>:EnteredUnitCost:<EnteredUnitCost>"
		
    	DistributionTotals
			if (not DistributionTotalsComputed) 
				initialize LocalTotalDistributionQuantity
				initialize LocalTotalDistributionAmount
				initialize LocalTotalDistributionPercent
				initialize LocalTotalCommittedAmount
				for each PurchaseOrderLineDistributionsRel
					LocalTotalDistributionQuantity	+= each.DistributionQuantity
					LocalTotalDistributionAmount	+= each.DistributionAmount
					LocalTotalDistributionPercent	+= each.DistributionPercent
					LocalTotalCommittedAmount		+= each.CommittedAmount
				DistributionTotalsComputed = true
    
    	UpdateHeaderAmountsFromLine
	    	invoke UpdateHeaderAmountsFromPurchaseOrderLine PurchaseOrder
				invoked.PrmExtendedAmount			= ExtendedAmount - old ExtendedAmount
				invoked.PrmExtendedTaxableAmount	= ExtendedTaxableAmount - old ExtendedTaxableAmount
				invoked.PrmStockWeight				= StockWeight - old StockWeight
				invoked.PrmStockVolume				= StockVolume - old StockVolume
				invoked.PrmAccruedTaxAmount			= AccruedTaxAmount - old AccruedTaxAmount
				invoked.PrmInvoicedTaxAmount		= InvoicedTaxAmount - old InvoicedTaxAmount
				invoked.PrmOpenPurchaseAmount		= OpenPurchaseAmount - old OpenPurchaseAmount
				invoked.PrmEDIOutputLineAmount		= EDIOutputLineAmount - old EDIOutputLineAmount
				invoked.PrmBypassVendorUpdate		= LocalBypassVendorUpdate
    	










   
    	UpdatePolineFactFromPolinesrc													
			invoke Update PolineFactRel
				invoked.ManufacturerCode     	= Manufacturer.ManufacturerCode
				invoked.ManufacturerDivision	= Manufacturer.ManufacturerDivision
				invoked.ManufacturerNumber      = ManufacturerNumber
				invoked.MfgContract				= DerivedManufacturerContract
				invoked.VendorItem    			= VendorItem
				invoked.Quantity      			= LocalQuantity
				invoked.ExtendedAmt   			= LocalQuantity * VendorBuyUnitCost	
				invoked.RequestingLocation		= LocalRequestingLocation			
				if (PurchaseOrder exists
				and PurchaseOrder.PurchaseOrderDate	entered)
					invoked.PoDate		  		= PurchaseOrder.PurchaseOrderDate
				invoked.ItemGroup	  			= ProcurementGroup
				invoked.VendorGroup   			= ProcurementGroup
				invoked.ProcureGroup			= ProcurementGroup
				invoked.TierContract			= ContractLineMemberRel.MfgContractTierInfo.MfgContract
				invoked.PoYear					= PurchaseOrder.PurchaseOrderDate year
				invoked.PoMonth					= PurchaseOrder.PurchaseOrderDate month

				if ((UNSPSCCode.UNSPSCSegment entered)
				and (!UNSPSCCode.UNSPSCSegment = "00"))
					LocalUNSPSCCode.UNSPSCSegment				= UNSPSCCode.UNSPSCSegment
					if (UNSPSCCode.UNSPSCFamily not entered)
						LocalUNSPSCCode.UNSPSCFamily			= "00"
					else											
						LocalUNSPSCCode.UNSPSCFamily			= UNSPSCCode.UNSPSCFamily
					if (UNSPSCCode.UNSPSCClass not entered)
						LocalUNSPSCCode.UNSPSCClass				= "00"
					else											
						LocalUNSPSCCode.UNSPSCClass				= UNSPSCCode.UNSPSCClass
					if (UNSPSCCode.UNSPSCCommodity not entered)
						LocalUNSPSCCode.UNSPSCCommodity			= "00"
					else											
						LocalUNSPSCCode.UNSPSCCommodity			= UNSPSCCode.UNSPSCCommodity
					invoked.UNSPSCCode							= LocalUNSPSCCode
				else
					initialize invoked.UNSPSCCode
									
		UpdatePolineFactFromPoline
			invoke Update PolineFactRel
				invoked.PoNumber                = PurchaseOrder 
				invoked.ManufacturerCode     	= Manufacturer.ManufacturerCode
				invoked.ManufacturerDivision	= Manufacturer.ManufacturerDivision
				invoked.ManufacturerNumber      = ManufacturerNumber
				invoked.MfgContract				= DerivedManufacturerContract
				invoked.VendorItem    			= VendorItem
				invoked.Vendor                  = PurchaseOrder.Vendor 
				invoked.Item                    = Item 
				invoked.CmContract              = Contract
				invoked.Quantity      			= Quantity
				invoked.VbuyUnitCst             = VendorBuyUnitCost
				invoked.ExtendedAmt   			= Quantity * VendorBuyUnitCost	

				if (PurchaseOrder exists
				and PurchaseOrder.PurchaseOrderDate	entered)
					invoked.PoDate		  		= PurchaseOrder.PurchaseOrderDate
				invoked.ItemGroup	  			= ProcurementGroup
				invoked.VendorGroup   			= ProcurementGroup
				invoked.ProcureGroup			= ProcurementGroup
				invoked.ContractGroup           = ProcurementGroup
				invoked.TierContract			= ContractLineMemberRel.MfgContractTierInfo.MfgContract
				invoked.PoYear					= PurchaseOrder.PurchaseOrderDate year
				invoked.PoMonth					= PurchaseOrder.PurchaseOrderDate month

				if ((UNSPSCCode.UNSPSCSegment entered)
				and (!UNSPSCCode.UNSPSCSegment = "00"))
					LocalUNSPSCCode.UNSPSCSegment				= UNSPSCCode.UNSPSCSegment
					if (UNSPSCCode.UNSPSCFamily not entered)
						LocalUNSPSCCode.UNSPSCFamily			= "00"
					else											
						LocalUNSPSCCode.UNSPSCFamily			= UNSPSCCode.UNSPSCFamily
					if (UNSPSCCode.UNSPSCClass not entered)
						LocalUNSPSCCode.UNSPSCClass				= "00"
					else											
						LocalUNSPSCCode.UNSPSCClass				= UNSPSCCode.UNSPSCClass
					if (UNSPSCCode.UNSPSCCommodity not entered)
						LocalUNSPSCCode.UNSPSCCommodity			= "00"
					else											
						LocalUNSPSCCode.UNSPSCCommodity			= UNSPSCCode.UNSPSCCommodity
					invoked.UNSPSCCode							= LocalUNSPSCCode
				else
					initialize invoked.UNSPSCCode


		CalculatePORecLineTotals
			if (!LocalPORecLineTotalsDone)
				for each ReleasedPurchaseOrderReceiptLinesRel
					LocalPORecCount					= 1
					LocalPORecLineCount				+= 1
					LocalPORecLineEntRecQty			+= each.DerivedBuyUOMQuantity
					LocalPORecLineShipToLocation	= each.ShipToLocation                                                   
				LocalPORecLineTotalsDone			= true

		CalculateBuyerMessagesTotals
			if (!LocalBuyerMessagesTotalsDone)
				for each BuyerMessagesRel
					LocalBuyerMessagesCount += 1
					if (each.BuyerMessageType.Manual)
						LocalManualBuyerMessageCount += 1 					
					if (each.BuyerMessageType.Receiving)
						LocalReceivingBuyerMessageCount += 1
				LocalBuyerMessagesTotalsDone = true
				
		CalculateQuantityAndCostChanges
			if (!LocalCalculateQuantityAndCostChangesDone)
				for each audit log records
					if (each.action type.Update)
						LocalAuditActionUpdateCount += 1

						if (each.changed field names like "*Quantity*")
							LocalQuantityChanges += 1
						if (each.changed field names like "*EnteredUnitCost*")

							LocalUnitCostChanges += 1
				LocalCalculateQuantityAndCostChangesDone = true


		InitiateCalculateTaxFields
			initialize CalculateTax
			CalculateTax.TaxEntity				= Company.AccountingEntity
			CalculateTax.TaxCode 				= TaxCode
			CalculateTax.ProductTaxCategory		= ProductTaxCategory
			CalculateTax.TaxableAmount			= ExtendedTaxableAmount
			
			if (EarlyDeliveryDate entered)
				CalculateTax.TaxDate				= EarlyDeliveryDate
				CalculateTax.InvoiceDate			= EarlyDeliveryDate
				CalculateTax.PaymentDate			= EarlyDeliveryDate
				CalculateTax.GeneralLedgerDate		= EarlyDeliveryDate
			else
				CalculateTax.TaxDate				= PurchaseOrder.PurchaseOrderDate
				CalculateTax.InvoiceDate			= PurchaseOrder.PurchaseOrderDate
				CalculateTax.PaymentDate			= PurchaseOrder.PurchaseOrderDate
				CalculateTax.GeneralLedgerDate		= PurchaseOrder.PurchaseOrderDate
			
			if (PurchaseOrder.DropshipAddress entered)
				CalculateTax.PostalAddress			= PurchaseOrder.DropshipAddress
			else
			if (ShipToLocation.PostalAddressForPurchaseOrder entered)
				CalculateTax.PostalAddress			= ShipToLocation.PostalAddressForPurchaseOrder
			else
				CalculateTax.PostalAddress			= PurchaseOrder.ProcessLevel.PostalAddress
			
			if (PurchaseFromLocation entered
			and PurchaseFromLocation.CurrentAddressRelExists)
				CalculateTax.FromPostalAddress 		= PurchaseFromLocation.VendorAddress
			else
				CalculateTax.FromPostalAddress 		= Vendor.VendorAddress
			CalculateTax.FromTaxCode				= PurchaseFromLocation.TaxCode
			
			if (CalculateTax.FromTaxCode not entered)
				CalculateTax.FromTaxCode			= Vendor.TaxCode
				
			CalculateTax.ThirdPartyFunction		= "I"	
			CalculateTax.System					= "PO"
			CalculateTax.Quantity				= QuantityToProcess
			CalculateTax.Location				= ShipToLocation
			CalculateTax.Function 				= "C"
				
			if  (TaxEntityUsesThirdPartyTax)
				CalculateTax.RelatedObjectReference			= reference to this instance
				CalculateTax.InputVertexRequest				= "P" 
				CalculateTax.TransactionSource				= "I"	
				CalculateTax.InputReturnVertexTaxIn			= "D" 
				CalculateTax.InvoiceCompany					= Company
				CalculateTax.ProcessLevel					= PurchaseOrder.ProcessLevel 
				CalculateTax.Vendor							= PurchaseOrder.Vendor 
				CalculateTax.VendorCustomerName				= PurchaseOrder.Vendor.VendorName 	
				CalculateTax.LineNumber						= PurchaseOrderLine		
				CalculateTax.CommodityCode					= ICNCode				
				CalculateTax.TaxUsageCode					= TaxUsageCode					
				CalculateTax.DeliveryTerms          		= PurchaseOrder.ShipTerm	
				CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry 			
				CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber			
				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists
				and PurchaseFromLocation.VATRegistrationNumber entered)
					CalculateTax.FromPostalAddress				= PurchaseFromLocation.VendorAddress 
					CalculateTax.FromVATRegistrationCountry 	= PurchaseFromLocation.VATRegistrationCountry			
					CalculateTax.FromVATRegistrationNumber		= PurchaseFromLocation.VATRegistrationNumber				
				else
					CalculateTax.FromPostalAddress				= Vendor.VendorAddress		
					CalculateTax.FromVATRegistrationCountry 	= Vendor.VATRegistrationCountry					
					CalculateTax.FromVATRegistrationNumber		= Vendor.VATRegistrationNumber					
				CalculateTax.DefaultFilingCurrency 			= Company.Currency 
				CalculateTax.CurrencyRate					= PurchaseOrder.EnteredCurrencyConversionRate 		
				CalculateTax.TransactionCurrency 			= PurchaseOrder.Currency								
				CalculateTax.BaseCurrency 					= Company.Currency					
				CalculateTax.ReceiptSite					= PurchaseOrder.ProcessLevel								
				CalculateTax.UniqueIdOfRelatedObject		= UniqueID													
				
				CalculateTax.SabrixUserElement				= UserElementGroup											
				CalculateTax.UserElementLevel				= "L"
		
		CalculateLandedUnitCost
			if ((LandedUnitCost not entered and EnteredUnitCost entered)
			or EnteredUnitCost changed 
			or ExtendedTaxableAmount changed
			or Taxable changed
			or TaxCode changed
			or DoTaxCalculation)
			
				initialize AccruedTaxAmount
				initialize InvoicedTaxAmount
				initialize LocalTrueAccruedTaxAmount
				initialize LocalTrueInvoicedTaxAmount
				
				LandedUnitCost = EnteredUnitCost
			
				if (PurchaseOrderLineTax set exists)
					invoke Delete PurchaseOrderLineTax set

				if (ExtendedTaxableAmount entered
				and TaxCode entered
				and not Closed.Historical)
					include InitiateCalculateTaxFields


					if  (not SingleCallToOneSource
					and  DoTaxCalculation
					and  !SingleCallToVertex 
					and  !VertexDelayTaxCall)

						LocalUniqueID = UniqueID
						if (TaxLineItemsRel exists)
							for each TaxLineItemsRel
								invoke Delete each.LineItemUserFieldsRel
								invoke Delete each
								
						include LoadOneSourceInputFields
						include CreateTaxLineItem
						include CreateTaxLineItemUserFields
						include VertexFlexibleFields

						LocalCalculateTaxExecuted = CalculateTax.ExecuteCalculateTax
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"
						
						if (TaxCode = "00"
						and TaxEntityRel.ThirdParty.VertexOSeries)
							TaxCode = CalculateTax.TaxCode 

						initialize AccruedTaxAmount
						initialize InvoicedTaxAmount
						
						

						LocalTaxTable = CalculateTax.TaxTable
						for each LocalTaxTable.TaxTableOutput
							if (each.TaxCode entered
							and each.TaxCode.Status.Active)
								LocalTaxAmount 			  	  = each.TaxAmount5DP 
								invoke Create PurchaseOrderLineTax
									invoked.Company			  = Company
									invoked.PurchaseOrder	  = PurchaseOrder
									invoked.PurchaseOrderLine = PurchaseOrderLine
									invoked.TaxCode 		  = each.TaxCode
									invoked.TaxRate			  = each.TaxRate
									if (TaxEntityUsesSabrix)
										invoked.TaxAmount	  = each.TaxAmount
									else
										invoked.TaxAmount	  = LocalTaxAmount

								if (each.AccrualFlag = "A")
									if (TaxEntityUsesSabrix)
										LocalTrueAccruedTaxAmount	 += each.TaxAmount
									else
										LocalTrueAccruedTaxAmount    += LocalTaxAmount
								else
									if (TaxEntityUsesSabrix)
										LocalTrueInvoicedTaxAmount	 += each.TaxAmount
									else
										LocalTrueInvoicedTaxAmount   += LocalTaxAmount
								
								if (each.LandCostFlag)
									if (TaxEntityUsesSabrix)
										LandedUnitCost += (each.TaxAmount / VendorPriceUOMQuantityToProcess)
									else
										LandedUnitCost += (LocalTaxAmount / VendorPriceUOMQuantityToProcess)
						
						AccruedTaxAmount	= LocalTrueAccruedTaxAmount
						InvoicedTaxAmount 	= LocalTrueInvoicedTaxAmount


		CalculateOpenPurchaseAmount  
        	if (not IsServiceCodeAmount)
        		OpenPurchaseAmount = ((QuantityToProcess - MatchedQuantity - ArchivedQuantity) * ((EnteredBuyUOMMultiplier / VendorPriceUOMMultiplier) * EnteredUnitCost))
        	else
        		OpenPurchaseAmount = ((QuantityToProcess * VendorBuyUnitCost) - MatchedAmount - ServiceCancelAmount + ChargebackAmount)
        	
        	if (OpenPurchaseAmount < 0)
        		initialize OpenPurchaseAmount
        		initialize OpenPurchaseAmountPOCurrency
        	else
        		OpenPurchaseAmountPOCurrency = OpenPurchaseAmount
        		if (Closed.Historical)
        			initialize OpenPurchaseAmount
        		else
        			if (PurchaseOrder.Currency != Company.Currency
        			and PurchaseOrder.Currency entered)
        				initialize CurrencyExchange
						SavedFromCurrency				= PurchaseOrder.Currency
						CurrencyExchange.ToCurrency		= Company.Currency
						SavedExchangeDate				= PurchaseOrder.PurchaseOrderDate
						SavedTransactionAmount			= OpenPurchaseAmount
						CurrencyExchange.EnteredCurrencyRate	= PurchaseOrder.EnteredCurrencyConversionRate
						
						OpenPurchaseAmount = CurrencyExchange.OutputCurrencyAmount
		
        CalculateCloseQuantity
            initialize LocalRecPlusCB
            
            if (QuantityToProcess - ReceivedQuantity - WriteOffQuantity <= 0) 
                if (CatchWeightQuantity != 0
                and CatchWeightQuantity > VendorPriceUOMQuantity)
                    LocalNetReceivedQuantity = CatchWeightQuantity * (VendorPriceUOMMultiplier/EnteredBuyUOMMultiplier) + WriteOffQuantity
                else
                    LocalNetReceivedQuantity = ReceivedQuantity + ChargebackQuantity + MemoQuantity + WriteOffQuantity
                    LocalRecPlusCB = true
            else
                LocalNetReceivedQuantity = ReceivedQuantity + WriteOffQuantity
            
            if ((ChargebackQuantity + MemoQuantity != 0)
            and  ChargebackQuantity + MemoQuantity  = MatchedQuantity)
                if (QuantityToProcess not entered)
                    LocalNetMatchedQuantity = MatchedQuantity + ArchivedQuantity
                else
                    LocalNetMatchedQuantity = ArchivedQuantity
            else
                LocalNetMatchedQuantity = MatchedQuantity + ArchivedQuantity
            




            









        SetWarehouseDemandFields
        	if (IsInventoryType)
	        	LocalWarehouseQuantity = QuantityToProcess - ReceivedQuantity - WriteOffQuantity - ChargebackQuantity - MemoQuantity
	        	if (LocalWarehouseQuantity   > 0
	        	and EnteredBuyUOMMultiplier != 1
	        	and Item.CatchWeightCode.NotCatchWeight)
	        		initialize UOMCalculation
					UOMCalculation.InputUOM				= EnteredBuyUOM
					UOMCalculation.InputUOMConversion	= EnteredBuyUOMMultiplier
		            UOMCalculation.InputQuantity		= LocalWarehouseQuantity
		            UOMCalculation.Method				= UOMCalculation.Method.ConvertToStock
		            LocalWarehouseQuantity				= UOMCalculation.OutputQuantity
			            	        
	        	if (not Closed.Historical)
					if (ShipToLocation changed 
					and DemandForOldShipToLocationRel exists)
						invoke Delete DemandForOldShipToLocationRel	        			

	        		if (WarehouseDemandLinesRel not exist
	        		and LocalWarehouseQuantity > 0)
	        			invoke CreateSupply WarehouseDemandLine
	        				invoked.Company									= Company
	        				invoked.InventoryLocation						= ShipToLocation
	        				invoked.Item									= Item
	        				invoked.EstimatedTransactionDate				= EarlyDeliveryDate
	        				invoked.WarehouseDemandLine.DemandDocumentType	= DemandDocumentType.PurchaseOrder
	        				invoked.WarehouseDemand.DemandSystemCode		= DemandSystemCode.PurchaseOrder
	        				invoked.WarehouseDemand.DemandCompany			= Company
	        				invoked.LineType								= ItemType
	        				invoked.WarehouseDemand.DemandDocument			= PurchaseOrder
	        				invoked.WarehouseDemandLine.LineNumber			= PurchaseOrderLine
	        				invoked.Vendor									= Vendor
	        				invoked.TransactionUOM							= EnteredBuyUOM
	        				invoked.TransactionUOMMultiplier				= EnteredBuyUOMMultiplier
	        				invoked.DemandRecordType						= WarehouseDemandLine.DemandRecordType.Supply
	        				invoked.Quantity								= LocalWarehouseQuantity
	    			else
	    				if (WarehouseDemandLinesRel exist)
	    					if (LocalWarehouseQuantity > 0)
			        			invoke Update WarehouseDemandLinesRel
			        				invoked.Vendor									= Vendor
			        				invoked.TransactionUOM							= EnteredBuyUOM
			        				invoked.TransactionUOMMultiplier				= EnteredBuyUOMMultiplier
			        				invoked.Quantity								= LocalWarehouseQuantity
			        				invoked.EstimatedTransactionDate				= EarlyDeliveryDate
			        				invoked.InventoryLocation						= ShipToLocation
		        			else
		        				invoke Delete WarehouseDemandLinesRel
		
		CreateCommentFromCommentCode
		
			invoke SystemCreateLine PurchaseOrderLineComment
                fill in fields from this instance
                invoked.CommentTitle 			= StandardCommentCodeRel.CommentName 
                invoked.CommentType  			= StandardCommentCodeRel.StandardCommentPrintCode
                invoked.CommentText  			= StandardCommentCodeRel.CommentText
                invoked.Attachment.File   		= StandardCommentCodeRel.Attachment.File
				invoked.Attachment.MimeType		= StandardCommentCodeRel.Attachment.MimeType
				invoked.Attachment.Title   		= StandardCommentCodeRel.Attachment.Title
            initialize StandardCommentCode		
		
		CalculateAOCSPIN 			

		 	initialize LocalTotalLandedAOC
			initialize LocalAOCTaxAmt
			for each PurchaseOrderAndLineAddOnCharge set


				if (each.Currency != PurchaseOrder.Currency and PurchaseOrder.Currency entered)    
					initialize CurrencyExchange
    				SavedFromCurrency				= each.Currency
   					CurrencyExchange.ToCurrency		= PurchaseOrder.Currency
    				SavedExchangeDate				= EarlyDeliveryDate
    				SavedTransactionAmount			= each.EnteredUnitCost
    				CurrencyExchange.EnteredCurrencyRate	= PurchaseOrder.EnteredCurrencyConversionRate

    				LocalExchangedAmt = CurrencyExchange.OutputCurrencyAmount
    				
				 	if (LocalExchangedAmt entered)
				 		LocalAOCAmt = 	LocalAOCAmt + LocalExchangedAmt * LocalContractQuantity
					else
						LocalAOCAmt = 	LocalAOCAmt + each.EnteredUnitCost * LocalContractQuantity

					if (each.LandedUnitCost entered)
						initialize CurrencyExchange
						SavedFromCurrency				= each.Currency
						CurrencyExchange.ToCurrency		= PurchaseOrder.Currency
						SavedExchangeDate				= EarlyDeliveryDate
						SavedTransactionAmount			= each.LandedUnitCost
						CurrencyExchange.EnteredCurrencyRate	= PurchaseOrder.EnteredCurrencyConversionRate
						LocalAOCLandedUnitCost 	= CurrencyExchange.OutputCurrencyAmount
				else
					LocalAOCAmt = 	LocalAOCAmt + each.EnteredUnitCost * LocalContractQuantity
			

				if (each.Currency != PurchaseOrder.Currency and PurchaseOrder.Currency entered)    
					if (each.InvoicedTaxAmount entered)
						initialize CurrencyExchange
	    				SavedFromCurrency				= each.Currency
	   					CurrencyExchange.ToCurrency		= PurchaseOrder.Currency
	    				SavedExchangeDate				= EarlyDeliveryDate
	    				SavedTransactionAmount			= each.InvoicedTaxAmount
	    				CurrencyExchange.EnteredCurrencyRate      = PurchaseOrder.EnteredCurrencyConversionRate
	
	    				LocalExchangeTaxAmt = CurrencyExchange.OutputCurrencyAmount
					
					LocalAOCTaxAmt += LocalExchangeTaxAmt
						
					if (each.AccruedTaxAmount entered)
						initialize CurrencyExchange
	    				SavedFromCurrency				= each.Currency
	   					CurrencyExchange.ToCurrency		= PurchaseOrder.Currency
	    				SavedExchangeDate				= EarlyDeliveryDate
	    				SavedTransactionAmount			= each.AccruedTaxAmount
	    				CurrencyExchange.EnteredCurrencyRate      = PurchaseOrder.EnteredCurrencyConversionRate
	
	    				LocalExchangeTaxAmt = CurrencyExchange.OutputCurrencyAmount
							
						LocalAOCTaxAmt += LocalExchangeTaxAmt
						
				else
					LocalAOCTaxAmt += 	(each.InvoicedTaxAmount + each.AccruedTaxAmount)
					LocalAOCLandedUnitCost = each.LandedUnitCost
				
				if (each.LandedAddOnCharge
				and each.IsNotCanceled)
					LocalTotalLandedAOC += LocalAOCLandedUnitCost
				



			LocalContractTaxAmt = LocalAOCTaxAmt + DerivedPOLandedTax

    		    		    			
	



					
		UnreleasePurchaseOrder
			constraint (not PurchaseOrder.Closed.Yes 
			or 			Company.ReopenPurchaseOrder)
            	"PurchasingCompany<Company>DoesNotAllowReopenOfClosedPurchaseOrder."
            	
			if (PurchaseOrder.PurchaseOrderLifeCycleState.Released)
				invoke Released.Update PurchaseOrder
					invoked.LocalUpdatedFromLine = true
			else														
				if (PurchaseOrder.PurchaseOrderLifeCycleState.Closed)
					invoke Closed.ReopenHeader PurchaseOrder
						invoked.PrmUpdatedFromLine = true
		
		CreateOrDeleteDistributionFromDistributionCode
			if (not IsInventoryType)
				if (DistributionCode entered and not DistributionExists)        					
					if (DistributionCode.AccountEdit entered)				
						if (DistributionCode.PayablesDistributionCodeDetailRel exists)
						
							if (DistributionCode.TotalDistributionAmount entered)
								constraint (DistributionCode.TotalPercent not entered)
									"CanEitherEnterDistributionPercentOrDistributionAmount"
								DistributionBy = DistributionBy.ByAmount
							else
								if (DistributionCode.TotalPercent entered)
									DistributionBy = DistributionBy.ByPercent
									
							for each DistributionCode.PayablesDistributionCodeDetailRel
								initialize LocalDistributionErrorMessage
								invoke Create PurchaseOrderLineDistribution
									resume on error
										LocalDistributionErrorMessage = error message
									fill in fields from this instance
										except invoked.DistributionPercent
										except invoked.DistributionAmount
									invoked.DistributionAccount		= each.DistributionAccount
									invoked.DistributionPercent		= each.DistributionPercent
									if(each.DistributionAmount entered)
										invoked.DistributionAmount		= each.DistributionAmount
									if (each.AssetTemplate entered)
										invoked.AssetInformation.AssetTemplate = each.AssetTemplate
								if (LocalDistributionErrorMessage entered)
									include CreatePurchaseOrderLineDistributionError
				else
					if (DistributionCode not entered)
						initialize LocalDistributionAccount
						for each LocalDistributionCode.PayablesDistributionCodeDetailRel
							LocalDistributionAccount = each.DistributionAccount
							invoke Delete PurchaseOrderLineDistributionsFromDistCodeRel
										
		CheckForBudgetAndCommitmentChanges
			
			if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
    		or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)

				if (Quantity != old Quantity 
	        	or  LandedUnitCost != old LandedUnitCost
	        	or  CurrencyChanged
	        	or  LocalFromOpenReceiptArchive 
	        	or  (ReceivedQuantity != OldReceivedQuantity
	        	and (ReceivedQuantity > QuantityToProcess
	        	or   OldReceivedQuantity > QuantityToProcess))
	        	or  (CostOption changed
		        and old LandedUnitCost = 0
		        and LandedUnitCost > 0)
		    	or (EarlyDeliveryDate != old EarlyDeliveryDate and Company.ProcurementGroup.PurchaseOrderEncumbranceDate.LineEarlyDeliveryDate))

					for each PurchaseOrderLineDistributionsRel
						invoke UpdateGLCommitmentIndirect each	

							if  (EarlyDeliveryDate != old EarlyDeliveryDate and Company.ProcurementGroup.PurchaseOrderEncumbranceDate.LineEarlyDeliveryDate
							and !CurrencyChanged
							and  LandedUnitCost = old LandedUnitCost
							and  Quantity = old Quantity)
								invoked.FromDateChange = true
							if (Quantity < old Quantity
							and PurchaseOrderLineSourceReverseOrderRel exists)
								invoked.ClearSourceAmount = true
							if (CurrencyChanged)
								invoked.TransientCurrencyChanged = true
							if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)

								invoked.PerformBudgetEdit = true
	    					if (LocalReopenClosed = true)
	    						invoked.PrmReopenClosed = true
	    					if  (ReceivedQuantity != OldReceivedQuantity
	        				and (ReceivedQuantity > QuantityToProcess
	        				or   OldReceivedQuantity > QuantityToProcess))
	        					invoked.PrmFromOverreceiving = true

							if (LocalFromOpenReceiptArchive)
								invoked.PrmFromArchive = true
							if ((Quantity 		not = old Quantity) 
							or (LandedUnitCost 	not = old LandedUnitCost))
								invoked.PrmQuantityOrCostUpdate = true

        CheckPatientProcedure  

        	if (PatientProcedure not entered)
				if (HasLinePatientProcedureInfo)
		            invoke Create PatientProcedure
		                assign result to LocalPatientProcedureView
		                invoked.Company					= Company
		                invoked.VisitNumber				= TransientVisitNumber
		                invoked.PatientID				= TransientPatientID
		                invoked.CaseNumber				= TransientCaseNumber
		                invoked.Procedure				= TransientProcedure
		                invoked.ProcedureDate			= TransientProcedureDate
		                invoked.ProcedureModifier		= TransientProcedureModifier
		                invoked.PhysicianName			= TransientPhysicianName
		                invoked.NurseCoordinator		= TransientNurseCoordinator
		                invoked.PatientLastName			= TransientPatientLastName
		                invoked.PatientFirstName		= TransientPatientFirstName
		                invoked.PatientMiddleName		= TransientPatientMiddleName
		                invoked.Birthdate				= TransientBirthdate
		                invoked.Gender					= TransientGender
		                invoked.SocialSecurityNumber	= TransientSocialSecurityNumber
		                invoked.SalesRepresentative		= TransientSalesRepresentative
		                invoked.OrderNumber				= TransientOrderNumber
		                invoked.Requestor				= TransientRequestor
		                invoked.Lot						= TransientLot
		                invoked.SerialNumber			= TransientSerialNumber
		                invoked.UserDefinedField1		= TransientUserDefinedField1
		                invoked.UserDefinedField2		= TransientUserDefinedField2
		                invoked.UniqueDeviceId			= TransientUniqueDeviceId
		                invoked.GTIN					= TransientGTIN
		                invoked.Manufacturer			= TransientManufacturer 
		                invoked.ManufacturerNumber		= TransientManufacturerNumber
		                invoked.ManufacturingDate		= TransientManufacturingDate
		                invoked.ExpirationDate			= TransientExpirationDate
		                invoked.LocalItem				= TransientItem
				else
	    		if (HasProcedureInformationHeaderDefault)
	    			invoke Create PatientProcedure
	    				assign result to LocalPatientProcedureView
						invoked.Company					= Company
						invoked.Procedure				= PurchaseOrder.DefaultProcedureInformation.DefaultProcedure 
						invoked.ProcedureModifier		= PurchaseOrder.DefaultProcedureInformation.DefaultProcedureModifier
						invoked.ProcedureDate			= PurchaseOrder.DefaultProcedureInformation.DefaultProcedureDate
						invoked.PhysicianName			= PurchaseOrder.DefaultProcedureInformation.DefaultPractitioner
						invoked.NurseCoordinator		= PurchaseOrder.DefaultProcedureInformation.DefaultNurseCoordinator
						invoked.SalesRepresentative		= PurchaseOrder.DefaultProcedureInformation.DefaultSalesRepresentative
						invoked.OrderNumber				= PurchaseOrder.DefaultProcedureInformation.DefaultSupplierOrderNumber
						invoked.Requestor				= PurchaseOrder.DefaultProcedureInformation.DefaultRequester
						invoked.UserDefinedField1		= PurchaseOrder.DefaultProcedureInformation.DefaultUserDefined1
						invoked.UserDefinedField2		= PurchaseOrder.DefaultProcedureInformation.DefaultUserDefined2
		                invoked.VisitNumber				= PurchaseOrder.PatientProcedure.VisitNumber
		                invoked.PatientID				= PurchaseOrder.PatientProcedure.PatientID
		                invoked.CaseNumber				= PurchaseOrder.PatientProcedure.CaseNumber
		                invoked.PatientLastName			= PurchaseOrder.PatientProcedure.PatientLastName
		                invoked.PatientFirstName		= PurchaseOrder.PatientProcedure.PatientFirstName
		                invoked.PatientMiddleName		= PurchaseOrder.PatientProcedure.PatientMiddleName
		                invoked.Birthdate				= PurchaseOrder.PatientProcedure.Birthdate
		                invoked.Gender					= PurchaseOrder.PatientProcedure.Gender
		                invoked.SocialSecurityNumber	= PurchaseOrder.PatientProcedure.SocialSecurityNumber
	                
				PatientProcedure = LocalPatientProcedureView.PatientProcedure

			else 
        	if (action type.Update
        	and TransientUpdatePatientProcedure entered) 
				invoke Update PatientProcedure
	                invoked.VisitNumber				= TransientVisitNumber
	                invoked.PatientID				= TransientPatientID
	                invoked.CaseNumber				= TransientCaseNumber
	                invoked.Procedure				= TransientProcedure
	                invoked.ProcedureDate			= TransientProcedureDate
	                invoked.ProcedureModifier		= TransientProcedureModifier
	                invoked.PhysicianName			= TransientPhysicianName
	                invoked.NurseCoordinator		= TransientNurseCoordinator
	                invoked.PatientLastName			= TransientPatientLastName
	                invoked.PatientFirstName		= TransientPatientFirstName
	                invoked.PatientMiddleName		= TransientPatientMiddleName
	                invoked.Birthdate				= TransientBirthdate
	                invoked.Gender					= TransientGender
	                invoked.SocialSecurityNumber	= TransientSocialSecurityNumber
	                invoked.SalesRepresentative		= TransientSalesRepresentative
	                invoked.OrderNumber				= TransientOrderNumber
	                invoked.Requestor				= TransientRequestor
	                invoked.Lot						= TransientLot
	                invoked.SerialNumber			= TransientSerialNumber
	                invoked.UserDefinedField1		= TransientUserDefinedField1
	                invoked.UserDefinedField2		= TransientUserDefinedField2
	                invoked.UniqueDeviceId			= TransientUniqueDeviceId
					invoked.GTIN					= TransientGTIN
					invoked.Manufacturer			= TransientManufacturer 
					invoked.ManufacturerNumber		= TransientManufacturerNumber
					invoked.ManufacturingDate		= TransientManufacturingDate
					invoked.ExpirationDate			= TransientExpirationDate
					invoked.LocalItem				= TransientItem
				
		GetLocalMaskedValue  
			initialize LocalMaskedValue

			if (LocalNonSpace < 5)	
				LocalCounter = LocalNonSpace
				while (LocalCounter not = 0)
					LocalMaskedValue = LocalMaskedValue + "*"
					LocalCounter-=1
			else 					
				LocalCounter = LocalNonSpace - 4
				LocalStartLetter = LocalNonSpace - 3
				LocalEndLetter = LocalNonSpace
				while (LocalCounter not = 0)
					LocalMaskedValue = LocalMaskedValue + "*"
					LocalCounter-=1
				LocalMaskedValue = LocalMaskedValue + LocalProcVariable[LocalStartLetter:LocalEndLetter]		

				
		CreateSourceFromPurchaseOrderHeaderDefaults	
			invoke SystemCreate PurchaseOrderLineSource				
				fill in fields from this instance
				invoked.PurchaseOrder									= PurchaseOrder
				invoked.PurchaseOrderLine 								= PurchaseOrderLine
				invoked.PurchaseOrderLineSource.SourceDocumentOrigin	= "PO"
				invoked.PurchaseOrderLineSource.Requester				= PurchaseOrder.DefaultSourceInformation.DefaultRequester
	            invoked.PurchaseOrderLineSource.OperatingCompany		= PurchaseOrder.DefaultSourceInformation.DefaultOperatingCompany
	            invoked.PurchaseOrderLineSource.SourceDocumentAlpha		= PurchaseOrder.DefaultSourceInformation.DefaultSourceDocument
				invoked.PurchaseOrderLineSource.SourceDocumentLineNumber= PurchaseOrderLine.LineNumber
				invoked.RequestingLocation								= PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation
				invoked.DeliverTo										= PurchaseOrder.DefaultSourceInformation.DefaultDeliverTo
		
		ValidateContract
			if (Contract entered)
                invoke ValidateContract Contract
					invoked.EditDate		= PurchaseOrder.PurchaseOrderDate
                    if (PurchaseOrder.FromBlanket)
                    	invoked.Source      = 4 
                    else
                    if (PurchaseOrder.FromStanding)
                    	invoked.Source      = 5 
                    else
                    	invoked.Source      = 2   
                    invoked.PrmVendor       = Vendor
					if (ContractHasVendorLocation)
                    	invoked.PrmVendorLocation = VendorLocationRel.VendorLocation
					invoked.PrmStockless = TransientStocklessRequestingLocation
					invoked.PrmSource = DerivedFormTitle

					if (action type.Create)
						invoked.POCreation     = true
				
				if (Contract.ApPoPurchaseFrom.PurchaseFromLocation entered)
					if (not LocalBypassVendorLocationValidation)
						constraint (PurchaseFromLocation = Contract.ApPoPurchaseFrom.PurchaseFromLocation)
							"PurchaseFromLocationDoesNotMatchVendorLocation<Contract.ApPoPurchaseFrom.PurchaseFromLocation>OnContract<Contract>"
					
				initialize LocalBypassVendorLocationValidation
		
        CalculateTotalsValues 
			if (not LocalCalculateTotalsValuesDone)
				initialize LocalLineOpenToMatchAmount
				if (Item.IsCatchWeightItem)
					LocalLineOpenToMatchAmount = OpenToMatchQuantityInStockUOM * EnteredUnitCost
				else
                	LocalLineOpenToMatchAmount = OpenToMatchQuantity * VendorBuyUnitCost
                
                if (ServiceCode.Amount)
                	LocalLineOpenToMatchAmount -= MatchServiceAmount + ServiceCancelAmount
                	
                for each PurchaseOrderAndLineAddOnCharge set
                	LocalLineAOCForContract += each.TotalAddOnChargeAmount
                	if (OpenToMatchQuantity > 0)
                    	LocalLineOpenToMatchAmount += each.DerivedDistributionAmount
                
                if (LocalLineOpenToMatchAmount < 0)
                	initialize LocalLineOpenToMatchAmount
                	    
                LocalCalculateTotalsValuesDone = true
        
        CalculateMatchedAmount
        	if (not LocalCalculateMatchedAmountDone)
        		if (ItemType.Service)
      				initialize LocalNonServiceMatchedAmount
      			else

	      			initialize LocalNonServiceMatchedAmount
	      			for each PayablesInvoiceDetailsForPOLineRel
						if (!each.PayablesInvoice.LinkedToCancelledPOInvoice)
							LocalNonServiceMatchedAmount		+= (each.MatchUnitCost * each.MatchedQuantity)
							LocalPayablesInvoice				= each.PayablesInvoice
							for each PayablesInvoiceAddOnChargesRel
								LocalNonServiceMatchedAmount	+= (each.MatchUnitCost * each.MatchedQuantity)
	      			for each PayablesInvoiceDetailHistoriesRel
						if (each.ApapihistRel.CancelledPOInvoiceRel not exists)
		      				LocalNonServiceMatchedAmount		+= (each.MatchUnitCost * each.MatchedQuantity)
		      			    for each PayablesInvoiceAddOnChargesRel
	    	  			    	LocalNonServiceMatchedAmount	+= (each.MatchUnitCost * each.MatchedQuantity)
					for each PayablesInvoiceMatchAOCOnlyRel      			 
						if (!each.PayablesInvoice.LinkedToCancelledPOInvoice)
      			    		LocalNonServiceMatchedAmount	+= (each.MatchUnitCost * each.MatchedQuantity)

					if(LocalNonServiceMatchedAmount = 0)
						LocalNonServiceMatchedAmount += (VendorBuyUnitCost * MatchedQuantity)
						for each PurchaseOrderLineAddOnChargesRel
							LocalNonServiceMatchedAmount	+= (each.EnteredUnitCost * each.MatchedQuantity)
	        	
	        	LocalCalculateMatchedAmountDone = true
        
        CalculateVendorReturnQuantities
			if(not LocalCalculateVendorReturnsDone)
				for each VendorReturnLinesWithStatusAddedRel
					LocalVendorReturnLineAddedQuantity += each.ReturnQuantity
				for each VendorReturnLinesWithStatusAuthorizedRel
					LocalVendorReturnLineAuthorizedQuantity += each.ReturnQuantity
					
				LocalCalculateVendorReturnsDone = true
				
		CalculateContractInAmount
			if(not LocalCalculateContractInAmountDone)
				for each PurchaseOrderLineSameContractNoCostDifferenceWithReq
					LocalInAmountExtendedAmount += each.ExtendedAmount
				for each PurchaseOrderLineSameContractCostDifferenceWithReq
					LocalInAmountDifferenceAmountForSpread += each.DifferenceAmountForSpread
			
				LocalCalculateContractInAmountDone = true

		CreateRecallProductTransaction
		
			LocalRecallGroup        = PrmRecallGroup
			LocalRecallNotice       = PrmRecallNotice
			LocalRecallProduct      = PrmRecallProduct

			if (not FromRequisitions)
				if (RecallProductTransactionRel !exists)
					invoke Create RecallProductTransaction
						invoked.RecallGroup										= PrmRecallGroup
						invoked.RecallNotice									= PrmRecallNotice
						invoked.RecallProduct									= PrmRecallProduct
						invoked.ActivityType									= 4 
						invoked.InventoryLocationGroup.InventoryCompany			= Company
						invoked.InventoryLocationGroup.InventoryLocation		= ShipToLocation
						invoked.PurchaseOrderLineGroup.PurchasingCompany		= Company
						invoked.PurchaseOrderLineGroup.PurchaseOrder 			= PurchaseOrder
						invoked.PurchaseOrderLineGroup.PurchaseOrderLine		= PurchaseOrderLine
						invoked.LocalPriority									= PrmQueryPriority
						invoked.LocalDueDate									= PrmQueryDueDate
						invoked.TransactionDate									= EarlyDeliveryDate
						invoked.LocalCreateTasks                                = PrmCreateTasks
			else
				if (RecallProductTransactionSourceRel !exists)				
					for each LineSourcesFromRQRel
						invoke Create RecallProductTransaction
							invoked.RecallGroup										= PrmRecallGroup
							invoked.RecallNotice									= PrmRecallNotice
							invoked.RecallProduct									= PrmRecallProduct
							invoked.ActivityType									= 14 
							invoked.InventoryLocationGroup.InventoryCompany			= Company
							invoked.InventoryLocationGroup.InventoryLocation		= ShipToLocation
							invoked.PurchaseOrderLineGroup.PurchasingCompany		= Company
							invoked.PurchaseOrderLineGroup.PurchaseOrder			= PurchaseOrder
							invoked.PurchaseOrderLineGroup.PurchaseOrderLine		= PurchaseOrderLine
				    		invoked.PurchaseOrderLineSourceGroup.PurchasingCompany  = each.Company
					     	invoked.PurchaseOrderLineSourceGroup.PoNumber			= each.PurchaseOrder
					     	invoked.PurchaseOrderLineSourceGroup.LineNbr			= each.PurchaseOrderLine
				        	invoked.PurchaseOrderLineSourceGroup.OriginCd			= each.PurchaseOrderLineSource.SourceDocumentOrigin
				        	invoked.PurchaseOrderLineSourceGroup.OperCompany		= each.PurchaseOrderLineSource.OperatingCompany
				        	invoked.PurchaseOrderLineSourceGroup.SourceDocN			= each.PurchaseOrderLineSource.SourceDocumentNumeric
				        	invoked.PurchaseOrderLineSourceGroup.SourceDocA			= each.PurchaseOrderLineSource.SourceDocumentAlpha
				        	invoked.PurchaseOrderLineSourceGroup.SrcLineNbr			= each.PurchaseOrderLineSource.SourceDocumentLineNumber
							invoked.RequestingLocationGroup.RequestingCompany		= each.PurchaseOrderLineSource.OperatingCompany
							invoked.RequestingLocationGroup.RequestingLocation		= each.RequestingLocation
							if (each.RequestingLocation = blank)
								invoked.RequestingLocationGroup.RequestingLocation	= each.RequisitionLineRel.Requisition.RequestingLocation
							invoked.RequisitionLineGroup.InventoryCompany			= each.PurchaseOrderLineSource.OperatingCompany
							invoked.RequisitionLineGroup.Requisition				= each.PurchaseOrderLineSource.SourceDocumentNumeric
							invoked.RequisitionLineGroup.RequisitionLine			= each.PurchaseOrderLineSource.SourceDocumentLineNumber
							invoked.LocalPriority									= PrmQueryPriority
							invoked.LocalDueDate									= PrmQueryDueDate
							invoked.TransactionDate									= each.RequestedDeliveryDate
							invoked.LocalCreateTasks                                = PrmCreateTasks

		DeleteRules
			constraint (not IsOriginalWithSubstitute)
				"CannotDeleteLine;SubstituteVendorItemLinesExistForThisPurchaseOrderLine"
		
			constraint (not Issued)
				"CannotDelete,Line<LineNumber>HasBeenIssued"	
			
			constraint (not HasActivityThroughPayablesInvoiceDetail
			or			not HasActivityThroughPurchaseOrderReceiptLine
			and 	  ((ReceivedQuantity = 0 
			and 	    MatchedQuantity  = 0)
			or			ItemType.Service))
				"CannotDelete,Line<LineNumber>HasActivity" 
			
			constraint (CancelQuantity <= 0)
				"CannotDelete,Line<LineNumber>IsCancelled" 
			constraint (MatchedAmount <= 0)	
				"CannotDelete,MatchedAmountIsGreaterThanZero" 
				
			constraint (not HasPOReceiptLines)
				"CannotDelete,PurchaseOrderReceiptLineExists"

			constraint (not HasInvoiceLine)
				"CannotDelete,InvoiceLineExists"

		ValidatePurchasingClass
			invoke ValidatePurchasingClasses Buyer
				invoked.PrmMajorPurchasingClass = MajorPurchasingClass
				invoked.PrmMinorPurchasingClass = MinorPurchasingClass
				invoked.PrmItemType				= ItemType
				if (this instance.Buyer.ProcurementGroup not entered)
					if (InventoriedOrNonstock)
						invoked.PrmGroup		= Item.ItemGroup
					else
						invoked.PrmGroup		= ContractLine.ContractGroup

		UpdateVendorItemAndDescriptionForReceiptAndInvoice
			if ((ItemType.Special and VendorItem changed)
			or  (ItemType.Service and Description changed))
           		for each PurchaseOrderReceiptLinesRel
           			invoke FastUpdate each
           				invoked.VendorItem 		= VendorItem
           				invoked.Description		= Description
           				invoked.MatchDetailKey	= MatchDetailKey

           		for each PayablesInvoiceDetailsByVendorRel
           			invoke FastUpdate each
           				invoked.VendorItem 		= VendorItem
           				invoked.ItemDescription	= Description
           				invoked.MatchDetailKey	= MatchDetailKey
        
        ValidateGTIN
			constraint (ItemGTIN is numeric)
				"GTINMustBeNumeric"
			
			if (InventoriedOrNonstock)
				constraint (ActiveItemGTINRel exists)
					"GTINDoesNotExist"
				
				if (EnteredBuyUOM entered
				and ItemGTIN      entered)
	       			constraint (ItemGTIN.UnitOfMeasure.UnitOfMeasure = EnteredBuyUOM)
						"ItemGTINUnitOfMeasureOf<ItemGTIN.UnitOfMeasure.UnitOfMeasure>DoesNotMatchEnteredOrDefaultedBuyUnitOfMeasureOf<EnteredBuyUOM>"
					
			initialize GTINCheckDigit
			GTINCheckDigit.ItemGTIN		= ItemGTIN
			constraint (GTINCheckDigit.ValidCheckDigit)
				"GTINCheckDigitIsInvalid"

		InitializeSubstituteRelatedFields
			initialize VendorItem
			initialize Manufacturer
			initialize ManufacturerNumber
			initialize UNSPSCCode
			if (Contract entered
			and RelatedItemOnContractLineRel not exists)
				initialize Contract
				initialize ContractLine

		AutomaticSubstituteRoutine
			if (each.IsItemMasterSubstitute)
				OriginalItem 	 = Item
				Item 		 	 = each.AssociatedItem.RelatedItem
				initialize ItemType
				default ItemType to DefaultItemType
				
				if (EnteredBuyUOM entered)
					if (HasItemLocationStockUOM)
						if (not LocationItemUOMRel.OKForBuying)
							initialize EnteredBuyUOM
					else
					if (not ItemUOMBuyRel.OKForBuying)
						initialize EnteredBuyUOM
				include InitializeSubstituteRelatedFields
				end for each

			else 
				initialize LocalContractHasError
				invoke ValidateContract each.Contract 
					resume on error
						LocalContractHasError 		 = true
						LocalContractValidationError = error message
					invoked.EditDate		= PurchaseOrder.PurchaseOrderDate
                    if (PurchaseOrder.FromBlanket)
                    	invoked.Source      = 4 
                    else
                    if (PurchaseOrder.FromStanding)
                    	invoked.Source      = 5 
                    else
                    	invoked.Source      = 2   
                    invoked.PrmVendor       = Vendor
					invoked.PrmStockless = TransientStocklessRequestingLocation
					invoked.PrmSource = DerivedFormTitle
					if (action type.Create)
						invoked.POCreation     = true

				if (not LocalContractHasError)
					if (each.Contract.ApPoPurchaseFrom entered)
						if ((each.Contract.ApPoPurchaseFrom.PurchaseFromLocation entered 
						and  each.Contract.ApPoPurchaseFrom.PurchaseFromLocation not = PurchaseFromLocation)
						or  (each.Contract.ApPoPurchaseFrom.VendorLocation       entered 
						and  each.Contract.ApPoPurchaseFrom.VendorLocation 	   	 not = PurchaseFromLocation))
							LocalContractHasError 	= true
							
					if (each.Contract.ContractParticipantsExist)
						initialize LocalContractParticipantMatch
						for each each.Contract.ContractParticipant set
							if (each.ContractParticipant.ParticipantLocation.Company entered
							and each.ContractParticipant.ParticipantLocation.Company = Company) 

								if (each.ContractParticipant.ParticipantLocation.RequestingLocation not entered
								and (each.ContractParticipant.ParticipantLocation.Location not entered 
								or each.ContractParticipant.ParticipantLocation.Location = ShipToLocation))
									LocalContractParticipantMatch = true
									end for each

							if (each.ContractParticipant.ParticipantLocation.PricingGroup entered
							and (InventoryCompanyRel.PricingGroup = each.ContractParticipant.ParticipantLocation.PricingGroup
							or ShipToLocation.PricingGroup = each.ContractParticipant.ParticipantLocation.PricingGroup))
								LocalContractParticipantMatch = true
								end for each
					
				if (not LocalContractHasError
				and (not each.Contract.ContractParticipantsExist 
				or LocalContractParticipantMatch)) 
					OriginalItem 	= Item
					Item 		 	= each.AssociatedItem.RelatedItem
					Description		= each.ContractLine.ItemDescription
					Contract	 	= each.Contract
					ContractLine 	= each.ContractLine
					EnteredBuyUOM 	= ContractLine.UOM
					ItemType	 	= ItemType.Special
					include InitializeSubstituteRelatedFields
					end for each	
		
		InventoryLocationStatusValidation
			constraint (ShipToLocation.Status.Active)
				"InventoryLocation<ShipToLocation>MustBeActive"
		
		ItemReplacement
			if (old Item entered and Item changed
			and not old ItemType.Inventoried and not ItemType.Inventoried)
				LocalReplaceItemFlag = true
				if (ContractLine entered and ContractLine not changed)
					initialize Contract
					initialize ContractLine
					
    Derived Fields
		DerivedBeforeAndAfterRevision is a DerivedField
			type is MessageField
			if (PurchaseOrder.RevisionsInclude.RevisionsComplete 
			or  PurchaseOrder.RevisionsInclude.RevisionsOnly)
				for each audit log records descending
					if  (each.action type.Update
					and (each.changed field names like "*Quantity*"
					or   each.changed field names like "*VendorBuyUnitCost*"
					or   each.changed field names like "*EnteredBuyUOM*"))
						initialize LocalBeforeAndAfterDisplay

						if (each.changed field names like "*Quantity*")
							LocalBeforeAndAfterDisplay  += "Quantity change on " + each.effective date + "\u000a" + "Before Value:"+ old each.Quantity + ", After Value:" + Quantity + "\u000a" + "\u000a"

						if (each.changed field names like "*VendorBuyUnitCost*")
							LocalBeforeAndAfterDisplay 	+=  "Unit Cost change on "+ each.effective date + "\u000a" + "Before Value:"+ old each.VendorBuyUnitCost +", After Value:" + VendorBuyUnitCost + "\u000a" + "\u000a"

						if (each.changed field names like "*EnteredBuyUOM*")
							LocalBeforeAndAfterDisplay	+= "Buy UOM change on " + each.effective date + "\u000a" + "Before Value:"+ old each.EnteredBuyUOM + ", After Value:" + EnteredBuyUOM
						end for each
				return LocalBeforeAndAfterDisplay 
		
		DerivedBeforeAndAfterRevisionPDF is a DerivedField
			type is MessageField
			restricted
			if (PurchaseOrder.RevisionsInclude.RevisionsComplete 
			or  PurchaseOrder.RevisionsInclude.RevisionsOnly)
				for each audit log records descending
					if  (each.action type.Update
					and (each.changed field names like "*Quantity*"
					or   each.changed field names like "*VendorBuyUnitCost*"
					or   each.changed field names like "*EnteredBuyUOM*"))
						initialize LocalBeforeAndAfterDisplay
						LocalBeforeAndAfterDisplay  += "Revision/s:" + "\u000a" + "\u000a"

						if (each.changed field names like "*Quantity*")
							LocalBeforeAndAfterDisplay  += "       Quantity change on " + each.effective date + "\u000a" + "       Before Value:"+ old each.Quantity + ", After Value:" + Quantity + "\u000a" + "\u000a"

						if (each.changed field names like "*VendorBuyUnitCost*")
							LocalBeforeAndAfterDisplay 	+=  "       Unit Cost change on "+ each.effective date + "\u000a" + "       Before Value:"+ old each.VendorBuyUnitCost +", After Value:" + VendorBuyUnitCost + "\u000a" + "\u000a"

						if (each.changed field names like "*EnteredBuyUOM*")
							LocalBeforeAndAfterDisplay	+= "       Buy UOM change on " + each.effective date + "\u000a" + "       Before Value:"+ old each.EnteredBuyUOM + ", After Value:" + EnteredBuyUOM
						end for each
				return LocalBeforeAndAfterDisplay 

		DerivedUOMForDeliveryTicket is a DerivedField
			type is like UnitOfMeasure
			if (PurchaseOrderLineSourcesRel exists)
				return PurchaseOrderLineSourcesRel.EnteredUOM
			else
				return EnteredBuyUOM

		DerivedLineTotalAmount is a DerivedField
			type is Decimal 19.3
			return (ExtendedAmount + AccruedTaxAmount + InvoicedTaxAmount + AddOnChargesForALine)
		
		DerivedPOTotals is a DerivedField
			type is MessageField
			restricted
			if (PurchaseOrder.LastPurchaseOrderLine = PurchaseOrderLine)	
    			return ("Order Total: " + PurchaseOrder.CalculateTotalAmount)	
			else	
			    return blank
		
		DerivedProcedureLevel is a DerivedField 
			type is Alpha 30
			if (CapitatedProcedureLevel = 1)
				return "Primary"
			else 
			if (CapitatedProcedureLevel = 2)
				return "Revision"
			else 
				return blank 

		DerivedProcLabel1 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[1]

		DerivedProcLabel2 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[2]			
			    
		DerivedProcLabel3 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[3]			    
			    	
		DerivedProcLabel4 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[4]
		
		DerivedProcLabel5 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[5]
			
		DerivedProcLabel6 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[6]

		DerivedProcLabel7 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[7]			
			    
		DerivedProcLabel8 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[8]			    
			    	
		DerivedProcLabel9 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[9]
		
		DerivedProcLabel10 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[10]

		DerivedProcLabel11 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[11]

		DerivedProcLabel12 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[12]			
			    
		DerivedProcLabel13 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[13]			    
			    	
		DerivedProcLabel14 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[14]
		
		DerivedProcLabel15 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[15]

		DerivedProcLabel16 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[16]

		DerivedProcLabel17 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[17]			
			    
		DerivedProcLabel18 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[18]			    
			    	
		DerivedProcLabel19 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[19]
		
		DerivedProcLabel20 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[20]
			
		DerivedProcLabel21 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[21]

		DerivedProcLabel22 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[22]			
			    
		DerivedProcLabel23 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[23]			    
			    	
		DerivedProcLabel24 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[24]
		
		DerivedProcLabel25 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[25]
			
		DerivedProcLabel26 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[26]
		
		DerivedProcLabel27 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[27]
			
		DerivedProcValue1 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[1]
			
		DerivedProcValue2 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[2]
			
		DerivedProcValue3 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[3]
			
		DerivedProcValue4 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[4]
			
		DerivedProcValue5 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[5]
			
		DerivedProcValue6 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[6]
			
		DerivedProcValue7 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[7]
			
		DerivedProcValue8 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[8]
			
		DerivedProcValue9 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[9]
			
		DerivedProcValue10 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[10]
			
		DerivedProcValue11 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[11]
			
		DerivedProcValue12 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[12]
			
		DerivedProcValue13 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[13]
			
		DerivedProcValue14 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[14]
			
		DerivedProcValue15 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[15]
			
		DerivedProcValue16 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[16]
			
		DerivedProcValue17 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[17]
			
		DerivedProcValue18 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[18]
			
		DerivedProcValue19 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[19]
			
		DerivedProcValue20 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[20]
			
		DerivedProcValue21 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[21]
			
		DerivedProcValue22 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[22]
			
		DerivedProcValue23 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[23]
			
		DerivedProcValue24 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[24]
			
		DerivedProcValue25 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[25]
			
		DerivedProcValue26 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[26]
			
		DerivedProcValue27 is a DerivedField
			type is Alpha 35
			LocalProcedureInfo = DerivedLabelProcInfo
			return ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[27]	

		DerivedInvoiceDetailTotals is a DerivedField 
			type is Decimal 19.3
			return sum PayablesInvoiceDetailsRel.TotalBaseAmount																				


		MobilePurchaseOrderAndLineDisplay is a LabelField
			"PO<PurchaseOrder>Line<PurchaseOrderLine>"
		MobileOrderedQuantityDisplay is a LabelField
			"<Quantity>_-_<EnteredBuyUOM>"
		MobileReceivedQuantityDisplay is a LabelField
			"<ReceivedQuantity>_<EnteredBuyUOM>"
		MobileUnitCostDisplay is a LabelField
			"<EnteredUnitCost>_-_<PurchaseOrder.Currency>"








		MobileTotalAmountDisplay is a LabelField
			"<CalculateExtendedAmount>_-_<Currency>"


		ReceivedAndRemainingQtyWithUOMDisplay	is a LabelField	
			"Received:<ReceivedQuantityOneDecimal>_<EnteredBuyUOM>|Remaining:<RemainingQuantityOneDecimal>_<EnteredBuyUOM>"

		DerivedNumberOfDecimalQuantityDisplay is a DerivedField
			type is Numeric size 1
			return 1

		ReceivedQuantityOneDecimal is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalQuantityDisplay 
			return ReceivedQuantity

		RemainingQuantityOneDecimal is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalQuantityDisplay 
			return 	RemainingQuantity			

		DerivedDirectPayCertificate is a DerivedField
			type is Alpha size 50
			return ShipToLocation.DirectPayCertificate

		DerivedItemGTINUOM is a DerivedField
			type is like UnitOfMeasure
			if (VendorItem.VendorBuyUOM entered)
				return VendorItem.VendorBuyUOM
			else
				return EnteredBuyUOM
    
    	SubstituteItemMessage is a MessageField
			restricted
			"Item<Item>IsASubstituteForOriginalItem<OriginalItem>"

		NoPurchaseOrderLinesToReviewMessage is a MessageField
			restricted
			"All_PO_Lines_UpToDate"
			

		MissingDistributionMsg	is a MessageField
			"Warning:_MissingDistributionAccount"
		
		SubstituteItemMsg is a MessageField
			"Item<Item>IsASubstituteForOriginalItem<OriginalItem>"
			

		DerivedTranVisitNumber is a DerivedField
			type is AlphaUpper size 20
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.VisitNumber
		DerivedTranPatientID is a DerivedField
			type is AlphaUpper size 20
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.PatientID 
		DerivedTranCaseNumber is a DerivedField
			type is like CaseNumber
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.CaseNumber
		
		DerivedPatientProcedureUpdate is a DerivedField
			type is AlphaUpper size 1
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return "Y"		
					
		DerivedTranProcedure is a DerivedField
			type is like Procedure
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Procedure
		DerivedTranProcedureDate is a DerivedField
			type is Date
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.ProcedureDate
		DerivedTranProcedureModifier is a DerivedField
			type is Alpha size 2
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.ProcedureModifier 
		DerivedTranPhysicianName is a DerivedField 
			type is like PhysName
			holds pii
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.PhysicianName
		DerivedTranNurseCoordinator	is a DerivedField
			type is like NrsCoord
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.NurseCoordinator
		DerivedTranPatientLastName	is a DerivedField 
			type is like LastName
			holds pii
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.PatientLastName
		DerivedTranPatientFirstName	is a DerivedField 
			type is like FirstName
			holds pii
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.PatientFirstName
		DerivedTranPatientMiddleName is a DerivedField 
			type is like MiddleName
			holds pii
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.PatientMiddleName
		DerivedTranBirthdate		is a DerivedField
			type is Date
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Birthdate
		DerivedTranGender  			is a DerivedField
			type is like Gender
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Gender 
		DerivedTranSocialSecurityNumber is a DerivedField 
			type is like TaxID
			holds pii
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.SocialSecurityNumber				
		DerivedTranSalesRepresentative is a DerivedField
			type is like SalesRep
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.SalesRepresentative 
		DerivedTranOrderNumber is a DerivedField
			type is like OrdNbr
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.OrderNumber	
		DerivedTranRequestor is a DerivedField
			type is like Requestor
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Requestor 
		DerivedTranLot is a DerivedField
			type is like ItemLot
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Lot	
		DerivedTranSerialNumber is a DerivedField
			type is like ItemSerialNumber
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.SerialNumber	
		DerivedTranUserDefinedField1 is a DerivedField
			type is like Userdef1
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.UserDefinedField1 
		DerivedTranUserDefinedField2 is a DerivedField
			type is like Userdef2
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.UserDefinedField2
		DerivedTranUniqueDeviceId is a DerivedField
			type is Alpha 120
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.UniqueDeviceId
		DerivedTranGTIN is a DerivedField
			type is like ItemGTIN
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.GTIN
		DerivedTranManufacturer is a DerivedField
			type is Alpha size up to 8
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Manufacturer
		DerivedTranManufacturerCode is a DerivedField
			type is like ManufacturerCode
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Manufacturer.ManufacturerCode
		DerivedTranManufacturerDivision is a DerivedField
			type is like ManufacturerDivision
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.Manufacturer.ManufacturerDivision										
		DerivedTranManufacturerNumber is a DerivedField
			type is like ManufacturerNumber
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.ManufacturerNumber
		DerivedTranManufacturingDate is a DerivedField
			type is Date
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.ManufacturingDate
		DerivedTranExpirationDate is a DerivedField
			type is Date
			restricted
			if (DisplayOfProcedureInfo)
				if (action type.Update)
					return blank
				else
					return PatientProcedure.ExpirationDate	

		DerivedLandedUnitCostInStockUOM is a DerivedField
			type is like InternationalCost
			restricted
			return LandedUnitCost / VendorPriceUOMMultiplier
		
    	DerivedQuantityForIDM			is a DerivedField
			type is like UnsignedQuantity
				precision is DerivedNumberOfDecimalsQuantity
			return QuantityToProcess
			
		DerivedUnitCostForIDM			is a DerivedField
			type is like UnsignedUnitCost
				precision is DerivedNumberOfDecimalsCost
			return VendorBuyUnitCost
			
		DerivedTaxCodeDesc			is a DerivedField
			type is like Description
			if (TaxCode entered)
				return TaxCode.Description + " - "
			
    	ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforPurchaseOrderLine"

        ContextMessageText is a MessageField
            restricted
            "PurchaseOrderLine<PurchaseOrderLine>OfPurchaseOrder<PurchaseOrder>"

		DerivedFormTitle is a MessageField
			restricted
			"PurchaseOrder:<PurchaseOrder>_Line:<PurchaseOrderLine>"

    	DerivedManufacturerUnitCost is a DerivedField
			type is like InternationalCost

			if  (ManufacturerContract	entered)
				if (ManufacturerContract	!= Contract)	
					if (ContractLineMemberRel		exists)
						return ContractLineMemberRel.BaseCost
					else
					if (ManufacturerContractLineRel	exists)
						if (ManufacturerContractLineRel.CurrentNetCost	entered)
							return first ManufacturerContractLineRel.CurrentNetCost
						else
							return first ManufacturerContractLineRel.BaseCost
					else
						return EnteredUnitCost
				else									
					return EnteredUnitCost	
			else
				return EnteredUnitCost

		DerivedLineSourceRequester is a DerivedField
			type is like Requester
			return first PurchaseOrderLineSourceWithRequesterRel.Requester

		LineMessage is a MessageField
			restricted
			"Line_"
    

		DerivedSpendCategoryDimension is a DerivedField
			type is like SpendCategory
			restricted
			if (Contract not entered)
				if (CostCode.Punchout)
					return 1 
				else
				if (ItemOnContract)
					return 2 
				else
					return 3 
			else
				return 1 

		DerivedTimeIntelligenceDimension is a DerivedField
			type is like TimeIntelligence
        	restricted
			return "CurrentPeriod"			
			
		DerivedSourcingEventDimension is a DerivedField
			type is like YesOrNo
        	restricted
			if (SourcingEvent entered)
				return "Y"
			else
				return "N"

		DerivedPCardDimensionDimension is a DerivedField
			type is like YesOrNo
        	restricted
			if (UseProcurementCard)
				return "Y"
			else
				return "N"

		POLineCount is a DerivedField
			type is Numeric 1
			restricted
			return 1

  		CanceledLineCount is a DerivedField
			type is Numeric 1
        	restricted
			if (CancelQuantity = Quantity)
				return 1

		InvoicedPOLineCount is a DerivedField
			type is Numeric 1
			restricted
			if (PayablesInvoiceDetailsByVendorRel exists)
				return 1
			
  		EnteredUnitCostPerStockUOM is a DerivedField
			type is Decimal 9.2
        	restricted
			if (EnteredBuyUOMMultiplier !=0)						
				return EnteredUnitCost / EnteredBuyUOMMultiplier				

  		OnOrderQuantity is a DerivedField
			type is like Quantity 
        	restricted
			return (Quantity - CancelQuantity - ReceivedQuantity)				

  		OnOrderValue is a DerivedField
			type is Decimal 9.2
        	restricted
			return ((Quantity - CancelQuantity - ReceivedQuantity) * EnteredUnitCost)		

		MatchedPOLineCount is a DerivedField
			type is Numeric 1
        	restricted
			if (MatchedQuantity >= (Quantity - CancelQuantity))
				return 1
				
		UnMatchedPOLineCount is a DerivedField
			type is Numeric 1
        	restricted
			if (MatchedQuantity < (Quantity - CancelQuantity))				
				return 1
					
		MatchedUnitCost is a DerivedField					  		
			type is Decimal 9.2
        	restricted
        	if (MatchedQuantity != 0)
        		return (MatchedAmount / MatchedQuantity)
         		
		UnMatchedQuantity is a DerivedField
			type is like Quantity 
        	restricted
			if ((Quantity - MatchedQuantity - CancelQuantity) > 0) 
				return (Quantity - MatchedQuantity - CancelQuantity)

		CancelQuantityMessage is a DerivedField
			type is Text
			if (CancelQuantity = 1)
				return CancelQuantity + HasBeenCancelledMessage
			else
			if (CancelQuantity > 1)
				return CancelQuantity + HaveBeenCancelledMessage
			else
				return ""	
		
		POLinesReceived is a DerivedField
			type is Numeric 1
			restricted
			if (ReceivedQuantity = Quantity)
				if (ItemType.Inventoried or ItemType.NonStock or ItemType.Special)
					return 1

		POLinesUnreceived is a DerivedField
			type is Numeric 1
			restricted
			if (ReceivedQuantity = 0)
				if (ItemType.Inventoried or ItemType.NonStock or ItemType.Special)
					return 1

  		ExtendedReceiptValue is a DerivedField
			type is Decimal 9.2
        	restricted
			return (ReceivedQuantity * EnteredUnitCost)

		POLinesOverReceived is a DerivedField
			type is Numeric 1
        	restricted
			if (ReceivedQuantity > Quantity)				
				return 1					

		LinesShippedComplete is a DerivedField
			type is Numeric 1
        	restricted
			if (ReceivedQuantity = Quantity)				
				return 1

		LinesNotShippedComplete is a DerivedField
			type is Numeric 1
        	restricted
			if (ReceivedQuantity < Quantity)				
				return 1

		QuantityShippedComplete is a DerivedField
			type is like Quantity 
        	restricted
			if (ReceivedQuantity = Quantity)				
				return Quantity
				
		QuantityReceivedOnTime is a DerivedField
			type is like Quantity 
			restricted			
			if (LateDeliveryDate entered
			and ReceivingActivityDate entered)
				if (ReceivingActivityDate <= LateDeliveryDate)
					return ReceivedQuantity
			else 
			if (ReceivingActivityDate <= EarlyDeliveryDate
			and ReceivingActivityDate entered)				
				return ReceivedQuantity

		ReceivedOnTime is a DerivedField
			type is Numeric 1
			restricted        	
			if (LateDeliveryDate entered
			and ReceivingActivityDate entered)
				if (ReceivingActivityDate <= LateDeliveryDate)
					return 1
			else 
			if (ReceivingActivityDate <= EarlyDeliveryDate
			and ReceivingActivityDate entered)			
				return 1

		ReceivedLate is a DerivedField
			type is Numeric 1
			restricted        	
			if (LateDeliveryDate entered
			and ReceivingActivityDate entered)
				if (ReceivingActivityDate > LateDeliveryDate)
					return 1
			else 
			if (ReceivingActivityDate > EarlyDeliveryDate
			and ReceivingActivityDate entered)
				return 1

		ReceiptLineCount is a DerivedField
			type is Numeric 3
			restricted
			include CalculatePORecLineTotals              
			return LocalPORecLineCount
      
		ReceiptQuantity is a DerivedField
			type is like Quantity
			restricted
			include CalculatePORecLineTotals
			return LocalPORecLineEntRecQty
            
		POLinesDeliveredToCorrectLocation is a DerivedField
			type is Numeric 3
			restricted
			include CalculatePORecLineTotals             
			if (PurchaseOrderLine.ShipToLocation = LocalPORecLineShipToLocation)     
				return 1

		DerivedStrippedManufacturerNumber is a DerivedField
			type is Alpha size 32
			return com.lawson.apps.procurement.base.StringUtils.stripNonAlphaNumeric(ManufacturerNumber)
			
		DerivedStrippedVendorItem is a DerivedField
			type is Alpha size 32
			return com.lawson.apps.procurement.base.StringUtils.stripNonAlphaNumeric(VendorItem)
		
		DerivedStrippedItem is a DerivedField
			type is Alpha size 32
			return com.lawson.apps.procurement.base.StringUtils.stripNonAlphaNumeric(Item)
		
		BuyerMessagesCount is a DerivedField
			type is Numeric 3
			restricted
			include CalculateBuyerMessagesTotals
			return LocalBuyerMessagesCount

		ReceivingBuyerMessageCount is a DerivedField
			type is Numeric 3
			restricted
			include CalculateBuyerMessagesTotals
			return LocalReceivingBuyerMessageCount
			
		ManualBuyerMessageCount is a DerivedField
			type is Numeric 3
			restricted
			include CalculateBuyerMessagesTotals
			return LocalManualBuyerMessageCount
			
		QuantityChangeCount is a DerivedField
			type is Numeric 3
			restricted
			include CalculateQuantityAndCostChanges
			return LocalQuantityChanges
			
		UnitCostChangeCount is a DerivedField
			type is Numeric 3
			restricted
			include CalculateQuantityAndCostChanges
			return LocalUnitCostChanges

		QuantityInStockUOM is a DerivedField
			type is like InternationalAmount 
        	restricted
			return EnteredBuyUOMMultiplier * Quantity

		MatchedQuantityInStockUOM is a DerivedField
			type is like Quantity	
				precision is DerivedNumberOfDecimalsQuantity 
			if (CatchWeightMatchQuantity entered)
				return CatchWeightMatchQuantity
			else
				return EnteredBuyUOMMultiplier * MatchedQuantity
				
		MatchedQuantityForBatchJobReport is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (IsCatchWeightItem)
				return MatchedQuantityInStockUOM
			else
				return MatchedQuantity

  		ExtendedRejectedValue is a DerivedField
			type is Decimal 9.2
        	restricted
			return (RejectedQuantity * EnteredUnitCost)

		POLineChangeCount is a DerivedField
			type is Numeric 3
			restricted			
			return QuantityChangeCount + UnitCostChangeCount

		

		HasBeenCancelledMessage is a MessageField
			"HasBeenCancelled"
			
		HaveBeenCancelledMessage is a MessageField
			"HaveBeenCancelled"

    	DistributionQuantityTotal is a DerivedField
			type is like Quantity
			restricted
			include DistributionTotals
			return LocalTotalDistributionQuantity
			
		DistributionAmountTotal is a DerivedField
			type is like InternationalAmount
			restricted
			include DistributionTotals
			return LocalTotalDistributionAmount
			
		DistributionPercentTotal is a DerivedField
			type is Percent size 6.3
			restricted
			include DistributionTotals
			return LocalTotalDistributionPercent

		DifferenceAmountForSpread is a DerivedField
			type is like InternationalAmount
			restricted
			return (ExtendedAmount - PurchaseOrderLineSourceUnitCostDifferenceRel.DerivedOriginalExtendedAmount)
		
		DifferenceQuantityFromRequisitions is a DerivedField
			type is like UnsignedQuantity
			restricted
			return (Quantity - PurchaseOrderLineSourceUnitCostDifferenceRel.RequisitionLineRel.Quantity)

		RemainingQuantityToBeDistributed is a ComputeField
			type is Decimal size 13.4
			(QuantityToProcess - DistributionQuantityTotal)

		RemainingAmountToBeDistributed is a DerivedField
			type is like InternationalAmount
			return (ExtendedAmount - DistributionAmountTotal)
		
		RemainingPercentToBeDistributed is a ComputeField
			type is Percent size 6.3
			(100% - DistributionPercentTotal)
		
		DerivedRemainingUnit is a DerivedField
			type is Text 
			restricted
			include DistributionTotals
			if (DistributionBy.ByQuantity)
				return QuantityMessage
			else
			if (DistributionBy.ByAmount)
				return AmountMessage
			else
				return PercentMessage

		RemainingToBeDistributed			is a MessageField	
			"Remaining<DerivedRemainingUnit>ToBeDistributed:"
		
		QuantityMessage						is a MessageField
			restricted
			"Quantity"
		AmountMessage						is a MessageField
			restricted
			"Amount"
		PercentMessage						is a MessageField
			restricted
			"Percent"
    	
        AddOnChargesForALine is a DerivedField 
            type is like UnitCost
                precision is DerivedNumberOfDecimalsCost
        	include CalculateAOCTotal
        	return LocalLineTotalAddOnChargeAmount
        	
        AddOnChargesForALineForUI is a DerivedField
        	type is like InternationalAmount
        		precision is PurchaseOrder.Currency.NumberOfDecimals
        	include CalculateAOCTotal
        	return LocalLineTotalAddOnChargeAmoutForUI
        	
        AddOnChargesForALineForContract is a DerivedField
        	type is like UnitCost
        		precision is DerivedNumberOfDecimalsCost
        	include CalculateTotalsValues
        	return LocalLineAOCForContract
        
        
        OrderedAmount is a DerivedField
            type is like UnitCost
                precision is DerivedNumberOfDecimalsCost
            return ((Quantity * VendorBuyUnitCost) + AddOnChargesForALine)
        
        MatchedNotReceivedAmount is a DerivedField
            type is like UnitCost
                precision is DerivedNumberOfDecimalsCost
            return (MatchedNotReceivedQuantity * VendorBuyUnitCost)
            
        OpenToMatchQuantity is a DerivedField
            type is like Quantity
                precision is DerivedNumberOfDecimalsQuantity
			if (not MatchedRequired
			or (Closed.Yes and PurchaseOrderLineLifeCycleState.Closed))
				initialize LocalQuantity
			else	
				if (not ReceiptRequired)
					if (ServiceCode.Amount)
						if (IsFullyMatched or CostOption.NoCharge)
		      				initialize LocalQuantity
		      			else	
							LocalQuantity = 1
	            	else
	            		LocalQuantity = (Quantity - MatchedQuantity - CancelQuantity)
						
	            else    
					LocalQuantity = (ReceivedQuantity - MatchedQuantity - ArchivedQuantity)	
	
				if (LocalQuantity < 0)
					initialize LocalQuantity
				
			return LocalQuantity
			
		OpenToMatchCatchWeightQuantity is a DerivedField
			type is like Quantity
                precision is DerivedNumberOfDecimalsQuantity
			if (not MatchedRequired)
				initialize LocalQuantity
			else	
				if (not ReceiptRequired)
					if (ServiceCode.Amount)
						if (IsFullyMatched or CostOption.NoCharge)
		      				initialize LocalQuantity
		      			else	
							LocalQuantity = 1
	            	else
	            		LocalQuantity = (VendorPriceUOMQuantity - MatchedQuantityInStockUOM - CancelQuantityInStockUOM)
						
	            else    
					LocalQuantity = (CatchWeightQuantity - MatchedQuantityInStockUOM - ArchivedQuantityInStockUOM)	
	
				if (LocalQuantity < 0)
					initialize LocalQuantity
				
			return LocalQuantity
			            
        OpenToMatchAmount is a DerivedField
            type is like InternationalAmount	
            include CalculateTotalsValues
            return LocalLineOpenToMatchAmount
		
		DerivedTotalMatchQuantity is a DerivedField		
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			restricted

			if (QuantityToProcess >= ReceivedQuantity + WriteOffQuantity)
				LocalQuantity = QuantityToProcess 

			else
				LocalQuantity = ReceivedQuantity + WriteOffQuantity

			LocalQuantity -= ArchivedQuantity
			
			if (not MatchedRequired or LocalQuantity < 0)
				initialize LocalQuantity
			
			return LocalQuantity
    	
    	DerivedVendorPriceUnitCost is a DerivedField
    		type is like UnsignedUnitCost 
    			precision is DerivedNumberOfDecimalsCost
    		restricted
    		LocalVendorPriceUnitCost = VendorBuyUnitCost * (VendorPriceUOMMultiplier / EnteredBuyUOMMultiplier)
    		return LocalVendorPriceUnitCost
    		
		DerivedVendorPriceUOM is a DerivedField
			type is like UnitOfMeasure
			restricted
			if (InventoriedOrNonstock)
				if (Item.IsCatchWeightItem)
					return Item.StockUOM
				else
				if (VendorItem.VendorPriceUOM entered)
					return VendorItem.VendorPriceUOM
				else
					return EnteredBuyUOM
			else
				return EnteredBuyUOM
		
		DerivedVendorPriceUOMMultiplier is a DerivedField
			type is like UOMMultiplier
			restricted
			if  (InventoriedOrNonstock and ItemUOMPriceRel exists)
				return ItemUOMPriceRel.UOMConversion
			else
				return 1
		
		PurchaseCompanyDisplay				is a LabelField
 			"<Company>_-_<Company.Name>"			
    	PurchaseOrderDisplay				is a LabelField
    		"PO:<PurchaseOrder>,Line:<LineNumber>"
		PurchaseOrderAndLineDisplay 	   	is a LabelField
			"PO:<PurchaseOrder>|Line:<PurchaseOrderLine>"
		PurchaseOrderLineDisplay 	   		is a LabelField
			"PurchaseOrderLine:<PurchaseOrderLine>"	
    	LineDisplay							is a LabelField
    		"PurchaseOrderLine:<LineNumber>"
    	CompanyDisplay						is a LabelField
    		"Company:<Company>,<Company.Name>"
    	ItemDisplay							is a LabelField
    		"Item:<Item>,<Item.Description>_<Item.Description2>"
		DescriptionDisplay					is a LabelField
			restricted
			"Description:<Description>"
		VendorItemDisplay					is a LabelField
			"VendorItem:<VendorItem>,<VendorItem.VendorItemDescription>"
		QuantityDisplay						is a LabelField
			"OrderedQuantity:<Quantity><EnteredBuyUOM>"
		LocationDisplay						is a LabelField
			"ShipToLocation:<ShipToLocation>,<ShipToLocation.NameForPurchaseOrder>"
		DeliveryDateDisplay					is a LabelField
			"DeliveryDate:<EarlyDeliveryDate>"
		CostDisplay							is a LabelField
			"UnitCost:<EnteredUnitCost>"
		ExtendedAmountDisplay				is a LabelField
			"Amount:<CalculateExtendedAmount>"
    	StatusDisplay						is a LabelField
    		"Status:<DerivedStatus>"
		RemainingQuantityDisplay			is a LabelField
			"RemainingQuantity:<RemainingQuantity>,<EnteredBuyUOM>"
		ReceivedQuantityDisplay				is a LabelField
			"ReceivedQuantity:<ReceivedQuantity>,<EnteredBuyUOM>"
		RemainingQuantityWithUOMDisplay    is a LabelField
			"<RemainingQuantity>_<EnteredBuyUOM>"
		ItemAndDescriptionDisplay			is a LabelField
			"<Item>_-_<PurchaseOrderLine.Description>"
		
		LandedTaxMessage is a MessageField
			restricted
			"TaxIsLanded"
		
		LandedCostMessage					is a DerivedField
			type is MessageField
			if (CompanyTaxCodeRel exists
			and CompanyTaxCodeRel.LandedCost)
				return LandedTaxMessage
		
		ItemCardViewDisplay					is a DerivedField
			type is MessageField
 			if (ItemExists)
 				return ItemDisplay
 			else
 				return DescriptionDisplay

    	CommentCount                       is a DerivedField
            type is Alpha size up to 20
            restricted
            if (PurchaseOrderLineComment set exists)
                return "(" + instance count of PurchaseOrderLineComment set + ")"
            else
                return ""

        MajorMinorPurchasingClass      is a StringField
            type is Alpha size 50
            classic name is PCLASS-MAJMIN
            restricted
            MajorPurchasingClass
            MinorPurchasingClass

        ManufacturerCodeAndDivision    is a StringField
            type is Alpha size 8
            classic name is MF-CODE-DIV
            restricted
            Manufacturer.ManufacturerCode
            Manufacturer.ManufacturerDivision

        DerivedManufacturerContract is a ConditionalField
			type is Numeric size 15
			restricted
			if  (Contract			not = 0
			and  ManufacturerContract  = 0)
				Contract
			else
			if  (Contract			   not = 0
			and  ManufacturerContract  not = 0)
				ManufacturerContract
			else
				0
        
        RemainingQuantity              is a DerivedField	
            type is like Quantity
            	precision is DerivedNumberOfDecimalsQuantity 		
            classic name is REMAINING
            if ((Quantity - ReceivedQuantity - CancelQuantity) < 0)
            	return 0
            else
            	return (Quantity - ReceivedQuantity - CancelQuantity)


        DisplayRemainingQuantity        is a DerivedField    
            type is like Quantity
                precision is DerivedNumberOfDecimalsQuantity
            if (RemainingQuantity > 0)
                return (Quantity - ReceivedQuantity - CancelQuantity)
            else
                return 0

        LinePrinted                    is a ConditionalField
            type is Alpha size 3
            classic name is PO-PRINTED-FL
            if (IsPrinted)
                "Yes"
            else
                "No"

        LineReleased                   is a ConditionalField
            type is Alpha size 3
            classic name is PO-RELEASED-FL
            if (PurchaseOrderLineLifeCycleState.Released
            or	Released)
                "Yes"
            else
                "No"

        LineCanceled                   is a ConditionalField
            type is Alpha size 5
            classic name is PO-CNCLED-FL
            restricted
            if (HeaderClosed)
                "Yes"
            else
                "No"

        LineClosed                     is a ConditionalField
            type is Alpha size 3
            classic name is PO-CLOSED-FL
            restricted
            if (IsClosed)
                "Yes"
            else
                "No"

        Dropship                       is a ConditionalField
            type is Alpha size 3
            classic name is PO-DROP-SHIP
            restricted
            if (IsDropship)
                "Yes"
            else
                "No"

		UnreleasedMessage				is a MessageField
			restricted
			"Unreleased"
		ReleasedMessage					is a MessageField
			restricted
			"Released"
		ClosedMessage					is a MessageField
			restricted
			"Closed"
		HistoricalMessage				is a MessageField
			restricted
			"Historical"

		DerivedStatus					is a DerivedField
			type is Alpha 10
			default label is "Status"
			if (Closed.Historical)
				return HistoricalMessage
			else
			if (Closed.Yes)
				return ClosedMessage
			else
			if (Released)
				return ReleasedMessage
			else
				return UnreleasedMessage

        ShipToLocatioName              is a StringField
            type is Alpha size 30
            classic name is ICL-LOC-PO-NM
            ShipToLocation.NameForPurchaseOrder

        PurchaseFromLocationName       is a StringField
            type is Alpha size 30
            classic name is PURCH-FR-NAME
            restricted
            PurchaseFromLocation.VendorName

        ItemDescription1               is a StringField
            type is Alpha size 30
            classic name is ITEM-DESC-1
            restricted
            Item.Description

        ItemDescription2               is a StringField
            type is Alpha size 30
            classic name is ITEM-DESC-2
            restricted
            Item.Description2

		DerivedDescription				is a DerivedField
			type is like Description
			if (Description entered)
				return Description
			else
				return Item.Description
				
        GeneralLedgerCategory          is a StringField
            type is Alpha size 4
            classic name is PO-GL-CATEGORY
            restricted
            GeneralLedgerCategoryRel.GeneralLedgerCategory

        MatchedAndRejectedQuantity     is a DerivedField	
            type is like Quantity
            	precision is DerivedNumberOfDecimalsQuantity 			
            classic name is APPR-AND-REJ
            restricted
            return (MatchedQuantity + RejectedQuantity)

        DisplayFullPurchaseOrder       is a StringField
            type is Alpha size 24
            classic name is DISP-PO-REL-CD
            restricted
            PurchaseOrder
            "-"
            PurchaseOrder.PORelease
            "-"
            PurchaseOrder.POCode

        DisplayPurchaseOrderAndRelease is a StringField
            type is Alpha size 19
            classic name is DISP-PO-REL
            restricted
            PurchaseOrder
            "-"
            PurchaseOrder.PORelease

        DisplayDocumentNumber          is a ConditionalField
            type is AlphaRight size 24
            classic name is DISP-DOC-NBR
            if (HasPOCode)
                DisplayFullPurchaseOrder
            else
            if (HasPORelease)
                DisplayPurchaseOrderAndRelease
            else
                PurchaseOrder
                
        QtyVsReceivedQty is a ConditionalField
			type is Decimal 13.4
				precision is DerivedNumberOfDecimalsQuantity
			restricted
			if (ReceivedQuantity > Quantity)
				ReceivedQuantity
			else
				Quantity
        
		DerivedLandedTaxAmount is a ComputeField
			type is like InternationalCost
			restricted
			(LandedUnitCost - EnteredUnitCost)

        AmountToCommit is a DerivedField   
        	type is like InternationalCost
        	restricted
        	if (MatchedAmount = 0)
        		return (LandedUnitCost - ServiceCancelAmount)
        	else
        	if (EnteredUnitCost - MatchedAmount <= 0)
        		return 0
        	else
			if (InvoicedTaxAmount > 0)
				return ((EnteredUnitCost - MatchedAmount - ServiceCancelAmount) + (DerivedLandedTaxAmount - (DerivedLandedTaxAmount * MatchedAmount/EnteredUnitCost)))  
        	else
        		return (EnteredUnitCost - MatchedAmount - ServiceCancelAmount)
        
        QuantityToCommit is a DerivedField
        	type is Decimal 13.4
        	restricted
        	if (QuantityToMatch - MatchedQuantity - ArchivedQuantity < 0)
        		return 0 
        	else
        		return (QuantityToMatch - MatchedQuantity - ArchivedQuantity)
        
        CostToCommit is a DerivedField
        	type is like InternationalCost
        	restricted
       		return LandedUnitCost
        
        ExtendedAmountToCommit is a DerivedField
        	type is like InternationalAmount
        	restricted
        	if  (!ServiceCode.Amount
			and  LandedPurchaseOrderLineAddOnChargeRel exists)
				if  (QuantityToCommit entered) 
					initialize LocalAOCAmount
					for each PurchaseOrderLine.LandedPurchaseOrderLineAddOnChargeRel
						if (each.MatchedQuantity entered) 
							LocalAOCAmount += each.LandedUnitCost * each.MatchedQuantity 

					return ((QuantityToCommit * CostToCommit) - LocalAOCAmount)
				else 
					initialize LocalAOCAmount
					for each PurchaseOrderLine.LandedPurchaseOrderLineAddOnChargeRel
						if (each.DerivedQuantity entered) 
							LocalAOCAmount += each.LandedUnitCost * each.DerivedQuantity 

					return LocalAOCAmount
			else 
        	if (!ServiceCode.Amount)
        		return (QuantityToCommit * CostToCommit)
        	else   
        		return (AmountToCommit)
        
        QuantityToMatch is a ComputeField
			type is Decimal 13.4
				precision is DerivedNumberOfDecimalsQuantity
			restricted
			(QtyVsReceivedQty - CancelQuantity)	
        
    	DerivedOpenToPayablesInvoiceQuantity is a DerivedField  
			type is Decimal 13.4
				precision is DerivedNumberOfDecimalsQuantity

			if (IsDropship
			or  ItemType.Service
			or  !OpenMatchQuantityReceiptLineExists)
				if  (ItemType.Service
				and  ServiceCode.Amount)
				    if (Closed.Yes)
						initialize LocalQuantity
					else
					if  (DerivedEntUnitCst entered)
						LocalQuantity = 1
					else
						initialize LocalQuantity
				else
				    if (Closed.Yes)
						initialize LocalQuantity
					else
						LocalQuantity = (QuantityToProcess - MatchedQuantity)

						if (EnteredBuyUOMMultiplier entered and VendorPriceUOMMultiplier entered)  
							LocalQuantity = LocalQuantity * (EnteredBuyUOMMultiplier / VendorPriceUOMMultiplier)
			else
				if ((ItemType.NonStock
				or   ItemType.Inventoried)
				and (Item.CatchWeightCode.AllTransactionsRequireBoth
				or   Item.CatchWeightCode.ReceiptRequiresBoth))
					LocalQuantity = (CatchWeightQuantity + WriteOffQuantity + ChargebackQuantity - MatchedQuantity - ArchivedQuantity)
				else
					LocalQuantity = (ReceivedQuantity + WriteOffQuantity + ChargebackQuantity - MatchedQuantity - ArchivedQuantity)









					if (EnteredBuyUOMMultiplier entered and VendorPriceUOMMultiplier entered)  
						LocalQuantity = LocalQuantity * (EnteredBuyUOMMultiplier / VendorPriceUOMMultiplier)

			return LocalQuantity

    	DerivedQuantityWithPrecision is a DerivedField
			type is Decimal 13.4
	            precision is DerivedNumberOfDecimalsQuantity
			if ((VendorPriceUOM entered)
			and (!VendorPriceUOM	= EnteredBuyUOM))
				return (VendorPriceUOMQuantity - (CancelQuantity * (EnteredBuyUOMMultiplier / VendorPriceUOMMultiplier)))
			else				 
				return (Quantity - CancelQuantity)

    	DerivedCancelledQuantityWithPrecision is a DerivedField
			type is Decimal 13.4
	            precision is DerivedNumberOfDecimalsQuantity
			if ((VendorPriceUOM entered)
			and (!VendorPriceUOM	= EnteredBuyUOM))
				return (CancelQuantity * (EnteredBuyUOMMultiplier / VendorPriceUOMMultiplier))
			else				 
				return CancelQuantity

    	DerivedOriginalOrderQuantityWithPrecision is a DerivedField
			type is Decimal 13.4
	            precision is DerivedNumberOfDecimalsQuantity
			if ((VendorPriceUOM entered)
			and (!VendorPriceUOM	= EnteredBuyUOM))
				return VendorPriceUOMQuantity
			else				 
				return Quantity

    	DerivedUnitOfMeasure is a DerivedField
			type is like UnitOfMeasure

			if ((VendorPriceUOM entered)
			and (!VendorPriceUOM	= EnteredBuyUOM))
				return VendorPriceUOM
			else				 
				return EnteredBuyUOM

		DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsQuantity
			else
			if (InventoryCompanyRel exists) 
				InventoryCompanyRel.NumberOfDecimalsQuantity
			else
				4
				
		DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsCost
			else
			if (InventoryCompanyRel exists) 
				InventoryCompanyRel.NumberOfDecimalsCost
			else
				8

    	QuantityToProcessInStock is a DerivedField
    		type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (Item.StockUOM entered
			and EnteredBuyUOM != Item.StockUOM)
				return QuantityToProcess * EnteredBuyUOMMultiplier
			else
				return QuantityToProcess

    	DerivedNewReceivedInStock is a DerivedField    
    		type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (InventoriedOrNonstock
			and LocalNewReceivedUOM != Item.StockUOM
			and LocalNewReceivedQuantity entered)
				UOMCalculation.InputQuantity	= LocalNewReceivedQuantity
				UOMCalculation.InputUOM			= LocalNewReceivedUOM
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToStock
				return UOMCalculation.OutputQuantity
			else
				return LocalNewReceivedQuantity

    	DerivedNewReceivedInEnteredBuyUOM is a DerivedField
    		type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (InventoriedOrNonstock
			and LocalNewReceivedUOM not = EnteredBuyUOM
			and LocalNewReceivedQuantity entered)
				UOMCalculation.InputQuantity	= LocalNewReceivedQuantity
				UOMCalculation.InputUOM			= LocalNewReceivedUOM 
				UOMCalculation.InputToUOM		= EnteredBuyUOM 
				UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
				return UOMCalculation.OutputQuantity
			else
				return LocalNewReceivedQuantity
				
		DerivedStockReceivedQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			restricted
			if (ItemType.Service)
				return (MatchedQuantity * EnteredBuyUOMMultiplier)
			else
	    		return (ReceivedQuantity * EnteredBuyUOMMultiplier)
    		
		DerivedStockRemainingQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			restricted
   			return (RemainingQuantity * EnteredBuyUOMMultiplier)

		DerivedQuantityForSupplyDemand is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			restricted
			return ((QuantityToProcess - ReceivedQuantity - WriteOffQuantity - ChargebackQuantity - MemoQuantity) * EnteredBuyUOMMultiplier)
			
        DerivedDistributionPanelLabelDistributionsExist     is a LabelField
        	restricted
        	"Distributions*"
        	
        DerivedDistributionPanelLabelNoDistributions	  	is a LabelField
        	restricted
        	"Distributions"
        	
        DerivedDistributionsPanelLabel       is a ConditionalField
            type is Alpha size 15
            restricted
            if (DistributionExists)
            	DerivedDistributionPanelLabelDistributionsExist
            else
            	DerivedDistributionPanelLabelNoDistributions
            	
		DerivedQuantityAvailableToReceive	is a DerivedField	
            type is like Quantity
            	precision is DerivedNumberOfDecimalsQuantity
            restricted 			
            return (QuantityToProcess - ReceivedQuantity)

		DerivedUnitCost is a DerivedField
			type is like UnitCost
			restricted
			if (ItemType.Service
			and ServiceCode.Amount)
				return EnteredUnitCost - MatchedAmount - ServiceCancelAmount
			else
				return EnteredUnitCost

		DerivedEDIOutputUnitCost is a DerivedField
			type is like UnitCost
	    		precision is DerivedNumberOfDecimalsCost
			restricted
			initialize DerivedEDIOutputUnitCost
			if (PurchaseOrder.SuppressPOCost)
				if (PurchaseOrder.IssueMethod.EDI
				or  PurchaseOrder.IssueMethod.Email
				or  PurchaseOrder.IssueMethod.Fax
				or  PurchaseOrder.IssueMethod.Paper)
					DerivedEDIOutputUnitCost = 0
				if (PurchaseOrder.IssueMethod.XML
				and PurchaseOrder.AribaPOType entered)
					DerivedEDIOutputUnitCost = .01
			else
				return VendorBuyUnitCost

		DerivedExtendedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (DerivedOpenToPayablesInvoiceQuantity * DerivedEntUnitCst)

		DerivedOriginallyOrderedExtendedAmount is a DerivedField
			type is like InternationalAmount
			return (DerivedOriginalOrderQuantityWithPrecision * DerivedUnitCostWithPrecision)

		DerivedUncancelledExtendedAmount is a DerivedField
			type is like InternationalAmount
			return (DerivedQuantityWithPrecision * DerivedUnitCostWithPrecision)

		DerivedEntUnitCst is a DerivedField 
			type is like InternationalCost
	    		precision is DerivedNumberOfDecimalsCost
			if (ItemType.Service
			and	ServiceCode.Amount)
				return (VendorBuyUnitCost - (MatchedAmount + ServiceCancelAmount))
			else
			if (PomatchobjRel exists)
				return (first PomatchobjRel.PoCostUpd)
			else
			if (LastMatchUnitCost entered)
				return LastMatchUnitCost
			else
			if (IsCatchWeightItem)
			    return EnteredUnitCost
			else
			if (VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
				return EnteredUnitCost
			else
				return VendorBuyUnitCost

		DerivedUnitCostWithPrecision is a DerivedField 
			type is like UnitCost
	            precision is DerivedNumberOfDecimalsCost
			if (CostOption.VendorDetermined)
				if (ReleasedPurchaseOrderReceiptLinesRel exists)
					return first ReleasedPurchaseOrderReceiptLinesRel.OriginalUnitCost
				else
					return VendorBuyUnitCost
			else
				return VendorBuyUnitCost

		DerivedInvoiceAmount is a DerivedField
			type is like InternationalCost
				precision is DerivedNumberOfDecimalsCost
			return (DerivedOpenToPayablesInvoiceQuantity * DerivedEntUnitCst)

		ReturnCostDiffersMatchOrPOCostMessage is a DerivedField
			type is Alpha size 80
			restricted
			if (ReturnCostDiffersPOCost)
				return LineCostDifferesPOCostMessage
			else
			if (ReturnCostDiffersMatchCost)
				return LineCostDiffersMatchCostMessage
				
		DerivedAcknowledgementEDIUnitCost is a DerivedField
			type is like InternationalCost
			if (POAcknowledgementCostMessageDifferenceRel exists)
				return RoundedEDICost
			else
				return 0

		DerivedAcknowledgementEDIUOM is a DerivedField
			type is Alpha size 20
			if (POAcknowledgementUOMMessageDifferenceRel exists)
				return POAcknowledgementUOMMessageDifferenceRel.EDIAlpha
			else
				return blank

		DerivedAcknowledgementEDIQuantity is a DerivedField
			type is like Quantity
			if (POAcknowledgementQuantityMessageDifferenceRel exists)
				return RoundedEDIQuantity
			else
				return 0

		DerivedAcknowledgementEDIVendorItem is a DerivedField
			type is Alpha size 60
			if (POAcknowledgementVendorItemMessageRel exists)
				return POAcknowledgementVendorItemMessageRel.EDIAlpha
			else
				return blank

		DerivedRoundTo is a DerivedField
			type is like InternationalCost
			restricted
			if (DerivedNumberOfDecimalsCost = 8)
				return .00000001
			else
			if (DerivedNumberOfDecimalsCost = 7)
				return .0000001
			else
			if (DerivedNumberOfDecimalsCost = 6)
				return .000001
			else
			if (DerivedNumberOfDecimalsCost = 5)
				return .00001
			else
			if (DerivedNumberOfDecimalsCost = 4)
				return .0001
			else
			if (DerivedNumberOfDecimalsCost = 3)
				return .001
			else
			if (DerivedNumberOfDecimalsCost = 2)
				return .01
			else
			if (DerivedNumberOfDecimalsCost = 1)
				return .1
			else
			if (DerivedNumberOfDecimalsCost = 0)
				return 1
			else
				return 0

		RoundedEDICost is a DerivedField
			type is like InternationalCost
			restricted
			if (POAcknowledgementCostMessageDifferenceRel.EDIAmount != 0)
				RoundedValue.RoundInput			= first POAcknowledgementCostMessageDifferenceRel.EDIAmount
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo			= DerivedRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
			else
				return 0

		RoundedEDIQuantity is a DerivedField
			type is like Quantity
			restricted
			if (POAcknowledgementQuantityMessageDifferenceRel.EDINumeric != 0)
				RoundedValue.RoundInput			= POAcknowledgementQuantityMessageDifferenceRel.EDINumeric
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo			= DerivedRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
			else
				return 0

		AcknowledgementMessageCount is a ComputeField
			type is Numeric 6
			(instance count of POAcknowledgementMessagesNeedingActionRel)

    	AcknowledgementMessagePanelCount is a DerivedField
            type is Alpha size up to 20
            restricted
			if (AcknowledgementMessageCount > 1)
                return "(" + AcknowledgementMessageCount + ")"
            else
                return ""

		ReturnAcknowledgementMessage is a DerivedField
			type is Alpha size 80
			restricted
			if (POAcknowledgementRejectedMessageRel exists)
				return AcknowledgementRejectMessage
			else
			if (POAcknowledgementDeliveryDateMessageRel exists
			and POAcknowledgementItemSubstituteMessageRel exists)
				return AcknowledgementDeliverySubstituteMessage
			else
			if (POAcknowledgementDeliveryDateMessageRel exists)
				return AcknowledgementDeliveryDateMessage
			else
			if (POAcknowledgementItemSubstituteMessageRel exists)
				return AcknowledgementSubstituteItemMessage

	    AcknowledgementRejectMessage									is a MessageField
	    	restricted
			"HasRejectedMessage"

	    AcknowledgementDeliverySubstituteMessage									is a MessageField
	    	restricted
			"HasDeliveryDateAndSubstituteItemMessage"

	    AcknowledgementDeliveryDateMessage									is a MessageField
	    	restricted
			"HasDeliveryDateMessage"

	    AcknowledgementSubstituteItemMessage									is a MessageField
	    	restricted
			"HasSubstituteItemMessage"

		ReturnAcknowledgementContractUOM is a DerivedField
			type is Alpha size 20
			restricted
			if (ContractLineRel exists)
				return AcknowledgementContractLineUOMMessage

	    AcknowledgementContractLineUOMMessage							is a MessageField
	    	restricted
			"Contract_U\O\M_:<ContractLineRel.UOM.UnitOfMeasure>"

		ReturnAckUOMConversionMessage is a DerivedField
			type is Alpha size 80
			restricted
			if (Item exists)
				return AckUOMConversionMessage

	    AckUOMConversionMessage									is a MessageField
	    	restricted
			"BuyUOMOf<EnteredBuyUOM>Contains<EnteredBuyUOMMultiplier>_<Item.StockUOM>"

	    LineCostDifferesPOCostMessage									is a MessageField
	    	restricted
	    	"UnitCostEnteredIsNotEqualToPurchaseOrderLineUnitCost"
	    
	    LineCostDiffersMatchCostMessage									is a MessageField
	    	restricted
	    	"UnitCostEnteredIsNotEqualToPayablesInvoiceDetailMatchUnitCost"
	    					
		VendorInactiveMessage is a MessageField  
			restricted
			"VendorIsInactive"
			
		DistributionNotInBalanceMessage is a MessageField
			restricted
			"DistributionIsNotInBalance"	
		
		DropshipOrderMessage is a MessageField
			restricted 
			"ThisIsADropshipOrder"	

		BackorderETA 					is a DerivedField
			type is Date

            if (VendorBackorderDetailsForPORel exists
			and first VendorBackorderDetailsForPORel.EstimatedAvailabilityDate entered)
				return VendorBackorderDetailsForPORel.EstimatedAvailabilityDate

			if (VendorBackorderDetailsRel exists
			and first VendorBackorderDetailsRel.EstimatedAvailabilityDate entered)
				return first VendorBackorderDetailsRel.EstimatedAvailabilityDate

		ETADetails 						is a DerivedField
			type is MessageField
			if (BackorderETA entered)
				return ETAMessage

		ETAMessage 						is a MessageField
			";ETAIs<BackorderETA>"

		VendorBackorderMessage 			is a MessageField
			"ItemIsOnBackorder<ETADetails>"

		DerivedCostCodeMessage is a DerivedField
			type is Text
			restricted
			if	(CostCode.Entered)
				return CostEnteredManuallyMessage
			else
			if (CostCode.LastCost)
				return UnitCostFromLastCostMessage
			else
			if (CostCode.CatalogQuote)
				return UnitCostFromQuoteCatalogMessage
			else
			if (CostCode.Blanket)
				return UnitCostFromBlanketOrderMessage
			else
			if (CostCode.Contract)
				return 	UnitCostFromContractMessage
			else 
			if (CostCode.LastPoCreated)
				return UnitCostFromLastPoCreatedMessage
			else
			if (CostCode.StrategicSourcing)
				return CostFromStrategicSourcingMessage
			else 
			if (CostCode.TierIcLocationParticipant 
			or CostCode.TierReqLocParticipant
			or CostCode.TierCompanyParticipant)
				return UnitCostFromTieredPricingMessage	
			else 
			if (CostCode.ProcurementTemplateContract)
				return UnitCostFromProcedureTemplateMessage
			else
				return blank
						
		CostEnteredManuallyMessage is a MessageField 
			restricted
			"CostEnteredManually"
		
		UnitCostFromLastCostMessage is a MessageField 
			restricted
			"UnitCostFromLastCost"
		
		UnitCostFromQuoteCatalogMessage is a MessageField	
			restricted
			"UnitCostFromQuoteCatalog"
		
		UnitCostFromBlanketOrderMessage is a MessageField	
			restricted	
			"UnitCostFromBlanketOrder"
		
		UnitCostFromContractMessage is a MessageField 
			restricted
			"UnitCostFromContract"
		
		UnitCostFromLastPoCreatedMessage is a MessageField 	
			restricted
			"UnitCostFromLastPOCreated"
		
		CostFromStrategicSourcingMessage is a MessageField 
			restricted	
			"CostFromStrategicSourcing"
		
		UnitCostFromTieredPricingMessage is a MessageField 
			restricted 	
			"UnitCostFromTieredPricing"
			
		UnitCostFromProcedureTemplateMessage is a MessageField 
			restricted	
			"UnitCostFromProcedureTemplate"
				
		HasMiscAddOnChargeMessage is a MessageField
			restricted	
			"HasMiscellaneousAddOnCharge"
		
		HasAddOnChargeMessage is a MessageField
			restricted
			"HasAddOnCharge"
			
		DerivedOverdueDate is a DerivedField
			type is Numeric 6
			restricted
			if (EarlyDeliveryDate entered
			and EarlyDeliveryDate < current corporate date
			and IsOpenForReceiving)
				if (current corporate date - EarlyDeliveryDate < 4)
					return 1
				else 
				if (current corporate date - EarlyDeliveryDate < 8)
					return 2
				else 
				if (current corporate date - EarlyDeliveryDate < 15)
					return 3
				else 
				if (current corporate date - EarlyDeliveryDate < 22)
					return 4
				else 
					return 5

		CalculateExtendedAmount is a DerivedField 
			type is like InternationalAmount


			if (ServiceCode.Amount)
				return (VendorBuyUnitCost - ServiceCancelAmount)
			else
				return (VendorPriceUOMQuantityToProcess * EnteredUnitCost)

		CalculateEDIOutputLineAmount is a DerivedField
			type is like InternationalAmount
			return (VendorPriceUOMQuantityToProcess * DerivedEDIOutputUnitCost)
		
		DerivedReceivedNotInvoicedTotalAmount is a DerivedField
			type is like InternationalAmount
			default label is "ReceivedNotInvoicedTotalAmount"
			return (DerivedReceivedNotInvoicedQuantity * LandedUnitCost)
		
		DerivedOpenToReceiveTotalAmount is a DerivedField
			type is like InternationalAmount
			default label is "OpenToReceiveTotalAmount"
			return (RemainingQuantity * LandedUnitCost)
			
		DerivedPOFormTitle is a DerivedField
			type is MessageField
			if (LineNumber not entered)
				return "Purchase Order Line Create"
			else
				return DerivedPOFormDetailTitle
				
		DerivedPOFormDetailTitle is a MessageField
			restricted
			"Purchase_Order<PurchaseOrder>_Line<LineNumber>"


		PurchaseOrderLineCreatedMessage      is a MessageField
			restricted
            "PurchaseOrderLineCreated"

        PurchaseOrderLineUpdatedMessage      is a MessageField
        	restricted
            "PurchaseOrderLineUpdated"
		
		MissingDistributionWarningMessage  is a MessageField
			restricted
            "Warning:MissingGlobalLedgerDistribution"
            
        MinimumOrderWarningMessage         is a MessageField
        	restricted
            ";QuantityLessThanMinimumOrderQuantity"
        
        MaximumOrderWarningMessage		   is a MessageField
        	restricted
        	";QuantityGreaterThanMaximumOrderQuantity"
        
		MissingDistributionAccountWarningMessage  is a MessageField
			restricted
            "MissingDistributionAccount"
            
        ItemMasterExistsMessage					is a MessageField
        	restricted
        	";Warning:ItemExists"
       
        CreateOrUpdateMessage is a DerivedField
        	type is Text
        	if (action type.Create)
        		return PurchaseOrderLineCreatedMessage
    		else
    			if (action type.Update)
    				return PurchaseOrderLineUpdatedMessage
        
        ItemWarningMessages is a DerivedField
        	type is Text
        	if (Item exists)
        		if (ItemType.Special
	            or  ItemType.Service)
	            	return ItemMasterExistsMessage
	            else
    			if (ItemLocationRel.MinimumOrderQuantity entered
        		or  ItemLocationRel.MaximumOrderQuantity entered) 
	            	initialize UOMCalculation
					UOMCalculation.InputUOM				= EnteredBuyUOM
		            UOMCalculation.InputQuantity		= Quantity
		            UOMCalculation.Method				= UOMCalculation.Method.ConvertToStock
		            if (ItemLocationRel.MinimumOrderQuantity != 0
		            and UOMCalculation.OutputQuantity < ItemLocationRel.MinimumOrderQuantity)
	            		return MinimumOrderWarningMessage
	            	else
	            	if (ItemLocationRel.MaximumOrderQuantity != 0
	            	and UOMCalculation.OutputQuantity > ItemLocationRel.MaximumOrderQuantity)
	            		return MaximumOrderWarningMessage
	        return blank
        
        CompletionMessage is a DerivedField
        	type is Text
        	restricted
        	return CreateOrUpdateMessage + ItemWarningMessages

	
		DerivedReceivedOrMatchQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (ReceivedQuantity not entered)
				if (IsDropship)
					return MatchedQuantity
			else
	    		return ReceivedQuantity
		
		DerivedVendorReturnLineAdded is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			include CalculateVendorReturnQuantities
			return LocalVendorReturnLineAddedQuantity
		
		DerivedVendorReturnLineAuthorized is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			include CalculateVendorReturnQuantities
			return LocalVendorReturnLineAuthorizedQuantity
					
		DerivedVendorReturnLineShipped is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			default label is "ReturnedQuantity"
			initialize LocalShippedQuantity	
			for each VendorReturnLinesWithStatusShippedRel 
				LocalShippedQuantity += each.ReturnQuantity - each.CancelQuantity
			return LocalShippedQuantity		
		
		DerivedReturnedQuantityInPOUOM is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			default label is "ReturnedQuantity"
			initialize LocalShippedQuantity	
			for each VendorReturnLinesWithStatusShippedRel 
				LocalShippedQuantity += each.DerivedReturnQuantityInPOUOM - each.DerivedCancelQuantityInPOUOM
			return LocalShippedQuantity	
		
		DerivedTotalRejectedQuantityInPOUOM is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			default label is "RejectedQuantity"
			initialize LocalTotalRejectedQuantity
			for each InspectionLinesRel
				LocalTotalRejectedQuantity += each.DerivedRejectedQuantityInPOUOM
			return LocalTotalRejectedQuantity
		
		DefaultItemType is a DerivedField
			type is like ItemType
			restricted
			if (ItemLocationRel exists and ItemLocationRel.InventoryTracked)
			    return ItemType.Inventoried
			else
				if (ItemExists)
				    return ItemType.NonStock
				else
					if (ContractLine entered)
						if (ContractLine.ItemType.Service)
							return ItemType.Service
						else
							return ItemType.Special
					else
			    		return ItemType.Special
		
		DerivedDefaultVendorItem is a DerivedField
			type is like VendorItem
			restricted
			if (InventoriedOrNonstock
			and DefaultVendorItemRel exists)
				return DefaultVendorItemRel.VendorItem
			else
			if (LocalVendorItem entered)
				return LocalVendorItem
			else
				return Item
		
		PurchaseOrderLineSourceCount is a ComputeField 
			type is Numeric 5
			restricted
			(instance count of PurchaseOrderLineSourcesRel)
			
		BypassCopyLinesComment is a MessageField
			restricted
			"UnitCostIsRequired.AboveErrorCausedPurchaseOrderLine<LineNumber>NotToBeCopied"
			
		DerivedCommittedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			include DistributionTotals
			return LocalTotalCommittedAmount
			
		DerviedTotalAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return ((LandedUnitCost * VendorPriceUOMQuantityToProcess) - ServiceCancelAmount)
			
      	MatchServiceAmount is a DerivedField   
      		type is like InternationalAmount
      		if(MatchedAmount entered
      		and ItemType.Service)      			   			
      			return MatchedAmount
      	
      	CalculateVendorPriceUOMQuantityToProcess is a DerivedField
      		type is like InternationalAmount
      		restricted
      		if (VendorItemExists)
        		if(VendorItem.VendorPriceUOM entered)        			
        			VendorPriceUOM = VendorItem.VendorPriceUOM
        		else 
        			VendorPriceUOM = EnteredBuyUOM 	        		
      			if (VendorPriceUOM = EnteredBuyUOM)
      				return QuantityToProcess
      			else
      				return QuantityToProcess * (EnteredBuyUOMMultiplier / VendorPriceUOMMultiplier)
      		else
      		if (ItemExists)
      			return QuantityToProcess
      		else
      		if (VendorPriceUOM = EnteredBuyUOM)
      			return QuantityToProcess
      			
      	LineAmount is a DerivedField
      		type is like InternationalAmount
      		restricted
      		return (Quantity * VendorBuyUnitCost)
      		
      	RequisitionSourceContract is a DerivedField
      		type is like Contract
      		restricted
      		if (LineSourcesFromRQRel exists)
      			return first LineSourcesFromRQRel.RequisitionLineRel.Contract	

		DerivedAmountAvailableToCancel is a DerivedField
      		type is like InternationalAmount
      		restricted
      		if(ServiceCode.Amount)
      			return (ExtendedAmount - MatchedAmount)
      		else
      			return 0
      	
      	DerivedQuantityNotReceived is a DerivedField
      		type is like Quantity
      		restricted
      		return (Quantity - ReceivedQuantity)
      		
      	DerivedQuantityNotMatched is a DerivedField
      		type is like Quantity
      		restricted
      		return (Quantity - MatchedQuantity + ChargebackQuantity + MemoQuantity)
      		
      	DerivedQuantityAvailableToCancel is a DerivedField
      		type is like Quantity
      		restricted
      		if (DerivedQuantityNotReceived > DerivedQuantityNotMatched)
      			LocalQuantityAvailableToCancel = DerivedQuantityNotMatched
			else
				LocalQuantityAvailableToCancel = DerivedQuantityNotReceived
			return LocalQuantityAvailableToCancel          	
		
		DerivedStocklessRequestingLocation is a DerivedField
			type is Boolean
			restricted
			if (LineSourcesReqLocNotStocklessRel not exists
			and (LineSourcesReqLocStocklessRel exists
			or  (LocalRequestingLocationFromInterface entered and LocalRequestingLocationFromInterface.Stockless) 
			or  (PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation entered and PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation.Stockless)))
				return true
			


					
		IsFullyMatched is a DerivedField
			type is Boolean
			restricted
			
			if (ServiceCode.Amount)
				if ((VendorBuyUnitCost > 0
				and MatchedAmount + ServiceCancelAmount >= VendorBuyUnitCost)
				or (VendorBuyUnitCost not entered
				and  MatchedAmount > 0)
				or QuantityToProcess not entered)
					return true
			else
				if (ChargebackQuantity entered)
					if (LocalNetMatchedQuantity entered)
						if ((LocalNetMatchedQuantity = ReceivedQuantity + ChargebackQuantity) 
							or (LocalRecPlusCB
							and LocalNetMatchedQuantity = LocalNetReceivedQuantity)) 
								return true
						else
							if ((LocalNetReceivedQuantity = LocalNetMatchedQuantity)
							or  (LocalNetReceivedQuantity = LocalNetMatchedQuantity + PurchaseOrderReceiptLinesRel.ArchivedQuantity + WriteOffQuantity))
								return true
							
				else
					if ((ReceiptRequired and (MatchedQuantity >= DerivedTotalMatchQuantity) and MatchedNotReceivedQuantity not entered)
					or (not ReceiptRequired and (MatchedQuantity >= DerivedTotalMatchQuantity)))
						return true
					
			return false

		DerivedNonServiceMatchedAmount is a DerivedField
      		type is like InternationalAmount
			include CalculateMatchedAmount
			return LocalNonServiceMatchedAmount

		MatchedAmountForBatchJobReport is a DerivedField
      		type is like InternationalAmount

			initialize MatchedAmountForBatchJobReport
			if (MatchedAmountForBatchJobReport not entered)
				for each PayablesInvoiceDetailsForPOLineRel
					if (not each.PayablesInvoice.LinkedToCancelledPOInvoice)
						MatchedAmountForBatchJobReport += (each.MatchUnitCost * each.MatchedQuantity)
						LocalPayablesInvoice = each.PayablesInvoice
						for each PayablesInvoiceAddOnChargesRel
							MatchedAmountForBatchJobReport += (each.MatchUnitCost * each.MatchedQuantity)
				for each PayablesInvoiceDetailHistoriesRel
					if (each.ApapihistRel.CancelledPOInvoiceRel not exists)
						MatchedAmountForBatchJobReport += (each.MatchUnitCost * each.MatchedQuantity)
						for each PayablesInvoiceAddOnChargesRel
							MatchedAmountForBatchJobReport += (each.MatchUnitCost * each.MatchedQuantity)
				for each PayablesInvoiceMatchAOCOnlyRel
					if (not each.PayablesInvoice.LinkedToCancelledPOInvoice)
						MatchedAmountForBatchJobReport += (each.MatchUnitCost * each.MatchedQuantity)
				if  (MatchedAmountForBatchJobReport not entered)
					if (ItemType.Service)
						MatchedAmountForBatchJobReport += MatchedAmount
						for each PurchaseOrderLineAddOnChargesRel
							MatchedAmountForBatchJobReport += (each.EnteredUnitCost * (MatchedAmount / VendorBuyUnitCost))
					else
						MatchedAmountForBatchJobReport += (VendorBuyUnitCost * MatchedQuantity)
						for each PurchaseOrderLineAddOnChargesRel
							MatchedAmountForBatchJobReport += (each.EnteredUnitCost * each.MatchedQuantity)
			return MatchedAmountForBatchJobReport

		DerivedMatchedNotReceivedAmount is a DerivedField				
      		type is like InternationalAmount
      		if (IsDropship or ItemType.Service)
      			return 0
      		else
      			initialize LocalMNRAmount
				initialize MaaUnitCost 
				MadUnitCost = last PayablesInvoiceDetailsForPOLineRel.MatchUnitCost
	
				for each PurchaseOrderLineAddOnChargesRel
	   			    MaaUnitCost	= each.last MaaocdtlRel.MatchUnitCost
	   			    end for each
	
				if (IsCatchWeightItem)
					LocalMNRAmount = (CatchWeightMatchedNotReceivedQuantity * VendorPriceUnitCost)
				else
				if  (ReceivedQuantity not entered
				or  (MatchedQuantity > ReceivedQuantity))
					if (EnteredBuyUOM != VendorPriceUOM)			
						LocalMNRAmount = (MatchedNotReceivedQuantity * (last PayablesInvoiceDetailsForPOLineRel.MatchUnitCost + MaaUnitCost) * last PayablesInvoiceDetailsForPOLineRel.VendorBuyUOMMultiplier)
						if  (LocalMNRAmount not entered)
			      			LocalMNRAmount = (DerivedNonServiceMatchedAmount - (ReceivedQuantity * VendorBuyUnitCost) - (WriteOffQuantity * VendorBuyUnitCost))
					else				
						LocalMNRAmount = (MatchedNotReceivedQuantity * (last PayablesInvoiceDetailsForPOLineRel.MatchUnitCost + MaaUnitCost))
                    	if  (LocalMNRAmount not entered)
			      			LocalMNRAmount = (DerivedNonServiceMatchedAmount - (ReceivedQuantity * VendorBuyUnitCost) - (WriteOffQuantity * VendorBuyUnitCost))
	      		else
					LocalMNRAmount = (MatchedNotReceivedQuantity * VendorBuyUnitCost)
	
				if  (LocalMNRAmount > 0)
					return LocalMNRAmount


		ConvertErrorMessage is a MessageField
			"CannotOrderPartialPurchaseUOM,Use<VendorItem.VendorBuyUOM>UOM"
			
		ConvertErrorMessageVendorPrice is a MessageField
			"CannotOrderPartialPurchaseUOM,EnterQuantityAndUOMThatHasCleanConversionTo<VendorItem.VendorPriceUOM>UOM"


  		DerivedLabelProcInfo is a DerivedField
  			type is Alpha size 25
  			restricted
  			if (PatientProcedure.HasPatientProcedureInfo)
  				initialize ProcInfoForIssueLabel
  				initialize ProcInfoForIssueValue
  				initialize ProcInfoForIssueSpace

  				Ctr=1
  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "BILL CODE" 
  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedConsignCode 
  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."   				
  				Ctr+=1
  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "PROCEDURE INFORMATION"
				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = "--------------------"
				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "." 			
	  			
	  			if (PatientProcedure.VisitNumber entered)
		  			if (PurchasingVendorRel.PrintVisitNumber
		  			or  PurchaseFromLocationRel.PrintVisitNumber
		  			or  Company.PrintVisitNumber)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Visit Number:" 
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedValueVisitNumber
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "." 

	  			if (PatientProcedure.PatientID entered)
		  			if (PurchasingVendorRel.PrintMedicalRecordNumber
		  			or  PurchaseFromLocationRel.PrintMedicalRecordNumber
		  			or  Company.PrintMedicalRecordNumber)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Medical Record Number:" 
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedValueMedicalRecordNumber
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

	  			if (PatientProcedure.CaseNumber entered)
		  			if (PurchasingVendorRel.PrintCaseID
		  			or  PurchaseFromLocationRel.PrintCaseID
		  			or  Company.PrintCaseID)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Case ID:" 
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedValueCaseNumber
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."


	  			if (PatientProcedure.Procedure entered)
		  			if (PurchasingVendorRel.PrintProcedure
		  			or  PurchaseFromLocationRel.PrintProcedure
		  			or  Company.PrintProcedure)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Procedure:" 
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.Procedure
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."


		  		if (PatientProcedure.ProcedureModifier entered)
		  			if (PurchasingVendorRel.PrintPatientProcedureModifier
		  			or  PurchaseFromLocationRel.PrintPatientProcedureModifier
		  			or  Company.PrintPatientProcedureModifier)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Procedure Modifier:" 
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.ProcedureModifier
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

	  			if (PatientProcedure.ProcedureDate entered)
		  			if (PurchasingVendorRel.PrintProcedureDate
		  			or  PurchaseFromLocationRel.PrintProcedureDate
		  			or  Company.PrintProcedureDate)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Procedure Date:" 
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.ProcedureDate
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.PhysicianName entered)
		  			if (PurchasingVendorRel.PrintPractitioner
		  			or  PurchaseFromLocationRel.PrintPractitioner
		  			or  Company.PrintPractitioner)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Practitioner:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.PhysicianName
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.NurseCoordinator entered)
		  			if (PurchasingVendorRel.PrintNurseCoordinator
		  			or  PurchaseFromLocationRel.PrintNurseCoordinator
		  			or  Company.PrintNurseCoordinator)					
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Coordinating Nurse:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.NurseCoordinator
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

	  			if (PurchasingVendorRel.PrintPatientName
	  			or  PurchaseFromLocationRel.PrintPatientName
	  			or  Company.PrintPatientName)
					if (PatientProcedure.PatientLastName 	entered)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Last Name:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedValueLastName
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."
					if (PatientProcedure.PatientFirstName	entered)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "First Name:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedValueFirstName
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."
					if (PatientProcedure.PatientMiddleName	entered)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Middle Name:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedValueMiddleName
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.Birthdate entered)
		  			if (PurchasingVendorRel.PrintPatientBirthdate
		  			or  PurchaseFromLocationRel.PrintPatientBirthdate
		  			or  Company.PrintPatientBirthdate)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Birthdate:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedValueBirthdate
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.Gender entered)
		  			if (PurchasingVendorRel.PrintPatientGender
		  			or  PurchaseFromLocationRel.PrintPatientGender
		  			or  Company.PrintPatientGender)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Gender:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedValueGender
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.SocialSecurityNumber entered)
		  			if (PurchasingVendorRel.PrintPatientSocialSecurityNumber
		  			or  PurchaseFromLocationRel.PrintPatientSocialSecurityNumber
		  			or  Company.PrintPatientSocialSecurityNumber)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Social Security Number:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedValueSSN
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.SalesRepresentative entered)
		  			if (PurchasingVendorRel.PrintSalesRepresentative
		  			or  PurchaseFromLocationRel.PrintSalesRepresentative
		  			or  Company.PrintSalesRepresentative)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Sales Representative:"
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.SalesRepresentative
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.OrderNumber entered)
		  			if (PurchasingVendorRel.PrintSupplierOrderNumber
		  			or  PurchaseFromLocationRel.PrintSupplierOrderNumber
		  			or  Company.PrintSupplierOrderNumber)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Supplier Order Number:"   
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.OrderNumber
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.Requestor entered)
		  			if (PurchasingVendorRel.PrintRequester
		  			or  PurchaseFromLocationRel.PrintRequester
		  			or  Company.PrintRequester)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Requester:"
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.Requestor
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.Lot entered)
		  			if (PurchasingVendorRel.PrintLotNumber
		  			or  PurchaseFromLocationRel.PrintLotNumber
		  			or  Company.PrintLotNumber)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Lot Number:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.Lot
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.SerialNumber entered)
		  			if (PurchasingVendorRel.PrintSerialNumber
		  			or  PurchaseFromLocationRel.PrintSerialNumber
		  			or  Company.PrintSerialNumber)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Serial Number:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.SerialNumber
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.GTIN entered)
		  			if (PurchasingVendorRel.PrintGTIN
		  			or  PurchaseFromLocationRel.PrintGTIN
		  			or  Company.PrintGTIN)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "GTIN:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.GTIN
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.ManufacturingDate entered)
		  			if (PurchasingVendorRel.PrintManufacturingDate
		  			or  PurchaseFromLocationRel.PrintManufacturingDate
		  			or  Company.PrintGTIN)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Manufacturing Date:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.ManufacturingDate
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.ExpirationDate entered)
		  			if (PurchasingVendorRel.PrintExpirationDate
		  			or  PurchaseFromLocationRel.PrintExpirationDate
		  			or  Company.PrintGTIN)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Expiration Date:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.ExpirationDate
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.UniqueDeviceId entered)
		  			if (PurchasingVendorRel.PrintUniqueDeviceId
		  			or  PurchaseFromLocationRel.PrintUniqueDeviceId
		  			or  Company.PrintGTIN)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "Unique Device Id:"  
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = PatientProcedure.UniqueDeviceId
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."
		  						  				
		  		if (PatientProcedure.UserDefinedField1 entered)
		  			if (PurchasingVendorRel.PrintUserDefined1
		  			or  PurchaseFromLocationRel.PrintUserDefined1
		  			or  Company.PrintUserDefined1)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "User Defined 1:" 
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedValueUserDef1
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."

		  		if (PatientProcedure.UserDefinedField2 entered)
		  			if (PurchasingVendorRel.PrintUserDefined2
		  			or  PurchaseFromLocationRel.PrintUserDefined2
		  			or  Company.PrintUserDefined2)
		  				Ctr+=1
		  				ProcInfoForIssueLabel.ProcInfoArray.ProcInfoDetails[Ctr] = "User Defined 2:"   
		  				ProcInfoForIssueValue.ProcInfoArray.ProcInfoDetails[Ctr] = DerivedValueUserDef2
		  				ProcInfoForIssueSpace.ProcInfoArray.ProcInfoDetails[Ctr] = "."
		  				
  			return blank

		DerivedConsignCode is a DerivedField
			type is Alpha 20
			restricted
			
			if (CnCode.BillOnly)
				return "Bill Only"
			else
			if (CnCode.BillAndReplace)
				return "Bill and Replace"
			else
			if (CnCode.WasteOnly)
				return "Waste Only"
			else
			if (CnCode.ReplaceOnly)
				return "Replace Only"
			else							
				return "Normal"

		DerivedGender is a DerivedField
			type is Alpha 20
			restricted
			if (PatientProcedure.Gender.Female)
				return "Female"
			else
			if (PatientProcedure.Gender.Male)
				return "Male"
			else							
				return "Withhold"
		
		DerivedBirthYear is a DerivedField
			type is Year
			restricted
			return PatientProcedure.Birthdate year

		DerivedBirthMonth is a DerivedField
			type is Numeric size 2
			restricted
			return PatientProcedure.Birthdate month
		
		DerivedBirthDay is a DerivedField
			type is Numeric size 2
			restricted
			return PatientProcedure.Birthdate day

		DerivedBirthdate is a MessageField
			restricted
			"<DerivedBirthYear>/<DerivedBirthMonth>/<DerivedBirthDay>"

  		DerivedValueVisitNumber is a DerivedField
  			type is Alpha size 40
  			restricted
			if (PurchasingVendorRel.MaskVisitNumber
			or  PurchaseFromLocationRel.MaskVisitNumber
			or  Company.MaskVisitNumber)
				LocalProcVariable = PatientProcedure.VisitNumber
				LocalNonSpace = DerivedNonSpace
				if (LocalNonSpace entered)
					include GetLocalMaskedValue
  					return LocalMaskedValue
			else 
				return PatientProcedure.VisitNumber

  		DerivedValueMedicalRecordNumber is a DerivedField
  			type is Alpha size 40
  			restricted
			if (PurchasingVendorRel.MaskMedicalRecordNumber
			or  PurchaseFromLocationRel.MaskMedicalRecordNumber
			or  Company.MaskMedicalRecordNumber)
				LocalProcVariable = PatientProcedure.PatientID
				LocalNonSpace = DerivedNonSpace
				if (LocalNonSpace entered)
					include GetLocalMaskedValue
  					return LocalMaskedValue
			else 
				return PatientProcedure.PatientID

  		DerivedValueCaseNumber is a DerivedField
  			type is Alpha size 40
  			restricted
			if (PurchasingVendorRel.MaskCaseID
			or  PurchaseFromLocationRel.MaskCaseID
			or  Company.MaskCaseID)
				LocalProcVariable = PatientProcedure.CaseNumber
				LocalNonSpace = DerivedNonSpace
				if (LocalNonSpace entered)
					include GetLocalMaskedValue
  					return LocalMaskedValue
			else 
				return PatientProcedure.CaseNumber

  		DerivedValueFirstName is a DerivedField 
  			type is Alpha size 60
  			holds pii
  			restricted
			if (PurchasingVendorRel.MaskPatientName
			or  PurchaseFromLocationRel.MaskPatientName
			or  Company.MaskPatientName)
				LocalProcVariable = PatientProcedure.PatientFirstName
				LocalNonSpace = DerivedNonSpace
				if (LocalNonSpace entered)
					include GetLocalMaskedValue
  					return LocalMaskedValue
			else 
				return PatientProcedure.PatientFirstName

  		DerivedValueLastName is a DerivedField 
  			type is Alpha size 60
  			holds pii
  			restricted
			if (PurchasingVendorRel.MaskPatientName
			or  PurchaseFromLocationRel.MaskPatientName
			or  Company.MaskPatientName)
				LocalProcVariable = PatientProcedure.PatientLastName
				LocalNonSpace = DerivedNonSpace
				if (LocalNonSpace entered)
					include GetLocalMaskedValue
  					return LocalMaskedValue
			else 
				return PatientProcedure.PatientLastName

  		DerivedValueMiddleName is a DerivedField 
  			type is Alpha size 15
  			holds pii
  			restricted
			if (PurchasingVendorRel.MaskPatientName
			or  PurchaseFromLocationRel.MaskPatientName
			or  Company.MaskPatientName)
				LocalProcVariable = PatientProcedure.PatientMiddleName
				LocalNonSpace = DerivedNonSpace
				if (LocalNonSpace entered)
					include GetLocalMaskedValue
  					return LocalMaskedValue
			else 
				return PatientProcedure.PatientMiddleName

  		DerivedValueBirthdate is a DerivedField 
  			type is Alpha size 15
  			holds pii
  			restricted
			if (PurchasingVendorRel.MaskPatientBirthdate
			or  PurchaseFromLocationRel.MaskPatientBirthdate
			or  Company.MaskPatientBirthdate)
				LocalProcVariable = DerivedBirthdate
				LocalNonSpace = DerivedNonSpace
				if (LocalNonSpace entered)
					include GetLocalMaskedValue
					return LocalMaskedValue
			else 
				return DerivedBirthdate

  		DerivedValueGender is a DerivedField 
  			type is Alpha size 15
  			holds pii
  			restricted
			if (PurchasingVendorRel.MaskPatientGender
			or  PurchaseFromLocationRel.MaskPatientGender
			or  Company.MaskPatientGender)
				LocalProcVariable = DerivedGender
				LocalNonSpace = DerivedNonSpace
				if (LocalNonSpace entered)
					include GetLocalMaskedValue
  					return LocalMaskedValue
			else 
				return DerivedGender

  		DerivedValueSSN is a DerivedField 
  			type is Alpha size 40
  			holds pii
  			restricted
			if (PurchasingVendorRel.MaskPatientSocialSecurityNumber
			or  PurchaseFromLocationRel.MaskPatientSocialSecurityNumber
			or  Company.MaskPatientSocialSecurityNumber)
				LocalProcVariable = PatientProcedure.SocialSecurityNumber
				LocalNonSpace = DerivedNonSpace
				if (LocalNonSpace entered)
					include GetLocalMaskedValue
  					return LocalMaskedValue
			else 
				return PatientProcedure.SocialSecurityNumber

  		DerivedValueUserDef1 is a DerivedField
  			type is Alpha size 40
  			restricted
			if (PurchasingVendorRel.MaskUserDefined1
			or  PurchaseFromLocationRel.MaskUserDefined1
			or  Company.MaskUserDefined1)
				LocalProcVariable = PatientProcedure.UserDefinedField1
				LocalNonSpace = DerivedNonSpace
				if (LocalNonSpace entered)
					include GetLocalMaskedValue
  					return LocalMaskedValue
			else 
				return PatientProcedure.UserDefinedField1

  		DerivedValueUserDef2 is a DerivedField
  			type is Alpha size 40
  			restricted
			if (PurchasingVendorRel.MaskUserDefined2
			or  PurchaseFromLocationRel.MaskUserDefined2
			or  Company.MaskUserDefined2)
				LocalProcVariable = PatientProcedure.UserDefinedField2
				LocalNonSpace = DerivedNonSpace
				if (LocalNonSpace entered)
					include GetLocalMaskedValue
					return LocalMaskedValue
			else 
				return PatientProcedure.UserDefinedField2								

		DerivedNonSpace is a DerivedField  
			type is Numeric 2
			restricted
			LocalPosition = 30
			if (LocalProcVariable entered)
				while (LocalPosition not = 0)
					if (LocalProcVariable[LocalPosition:LocalPosition] entered)
						end while
					else
						LocalPosition-=1
				return LocalPosition	
				
		DerivedTaxAmount is a DerivedField 
			type is like InternationalAmount

			if (AccruedTaxAmount entered)
				return AccruedTaxAmount
			else
			if (InvoicedTaxAmount entered)
				return InvoicedTaxAmount	
			else
				return 0															

		DerivedTotalMatchedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (ItemType.Service)
				return MatchedAmount
			else
				return DerivedNonServiceMatchedAmount
																							
		DerivedPrintTotal is a DerivedField
			type is like InternationalAmount
			restricted
			return ExtendedAmount + InvoicedTaxAmount
			
		DerivedTotalOrderAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return ExtendedAmount + InvoicedTaxAmount + AccruedTaxAmount
		
		DerivedEDIOutputOrderAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return sum PurchaseOrderLine.EDIOutputLineAmount
		
		ContractLineMaxEditValue       is a DerivedField
        	type is like InternationalAmount
        		precision is DerivedNumberOfDecimalsCost
        	if (!ContractAmountIncludesTax and !ContractAmountIncludesAddOnCharge)
        		return (ExtendedAmount)
        	else
        	if (ContractAmountIncludesTax and !ContractAmountIncludesAddOnCharge)
        		return (ExtendedAmount + AccruedTaxAmount + InvoicedTaxAmount)
        	else
        	if (!ContractAmountIncludesTax and ContractAmountIncludesAddOnCharge)
        		return (ExtendedAmount + AddOnChargesForALineForContract)
        	else
        		return (ExtendedAmount + AccruedTaxAmount + InvoicedTaxAmount + AddOnChargesForALineForContract)
		
		DerivedEarlyDeliveryDate is a StringField
			type is Alpha 10
			restricted
			EarlyDeliveryDate month
			"/"
			EarlyDeliveryDate day
			"/"
			EarlyDeliveryDate year

		DerivedCommodityCodeNoDash is a StringField
			type is like CommCodes
			CommodityCode.CommodityCodeRel.CommodityCode.Segment[1]
			CommodityCode.CommodityCodeRel.CommodityCode.Segment[2]
			CommodityCode.CommodityCodeRel.CommodityCode.Segment[3]
			CommodityCode.CommodityCodeRel.CommodityCode.Segment[4]
			CommodityCode.CommodityCodeRel.CommodityCode.Segment[5]
	
		DerivedReceivedNotInvoicedQuantity is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (not CostOption.NoCharge 
			or (AllowZeroCostInvoice and Closed.No))
				return (ReceivedQuantity - MatchedQuantity - ArchivedQuantity)
			else
				return 0
			
		DerivedFixitQuantityInStockForSupplyDemand is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			restricted
			return ((Quantity - CancelQuantity - ReceivedQuantity - WriteOffQuantity - ChargebackQuantity - MemoQuantity) * EnteredBuyUOMMultiplier)

		DerivedLineNumber is a DerivedField
			type is like LineNumber
			return LineNumber

		DerivedCurrentDate is a DerivedField
			type is Date
			return current corporate date
			
		DerivedWidgetVendorName is a DerivedField
			type is Alpha size up to 120	
			default label is "VendorName"
			return Vendor.VendorName

		DerivedItemType is a DerivedField
			type is Alpha 11
			if (ItemType.Inventoried)
				return "Inventoried"
			if (ItemType.NonStock)
				return "NonStock"
			if (ItemType.Special)
				return "Special"
		
		DerivedXPliInspReqFl is a DerivedField
			type is Alpha 27
			if (InspectionRequired)
				return DerivedInspReqMsg
			else
				return DerivedNInspReqMsg
		
		DerivedInspReqMsg is a MessageField
			"InspectionRequired"
		
		DerivedNInspReqMsg is a MessageField
			"ReceiptInspectionRequired"
		
		DerivedXTracking is a DerivedField
			type is Alpha 29
			if (ItemLocation.SerialTracked.SerialRequiredAtReceipt and ItemLocation.BinTracked)
				return DerivedSBTrackMsg
			else
			if (ItemLocation.BinTracked and ItemLocation.LotTracked.LotRequiredAtReceipt)
				return DerivedLBTrackMsg
			else
			if (ItemLocation.BinTracked)
				return DerivedBTrackMsg
			else
			if (ItemLocation.LotTracked.LotRequiredAtReceipt)
				return DerivedLTrackMsg
			else
			if (ItemLocation.SerialTracked.SerialRequiredAtReceipt)
				return DerivedSTrackMsg
		
		DerivedSBTrackMsg is a MessageField
			"Serial/BinTrackingRequired"
		
		DerivedLBTrackMsg is a MessageField
			"Lot/BinTrackingRequired"
		
		DerivedBTrackMsg is a MessageField
			"BinTrackingRequired"
		
		DerivedLTrackMsg is a MessageField
			"LotTrackingRequired"
		
		DerivedSTrackMsg is a MessageField
			"SerialTrackingRequired"
		
		DerivedPrefBin is a DerivedField
			type is AlphaUpper 10
			if (ItemLocation.PreferredBin entered)
				return ItemLocation.PreferredBin
		
		DerivedOpenQuantity is a DerivedField
			type is Decimal 13.4
			if (Company.PrintQuantity)
				return DerivedOpenQty
		
		DerivedOpenQty is a ComputeField
			type is Decimal 13.4
			(QuantityToProcess - ReceivedQuantity)
		
		DerivedUnrelRec is a DerivedField
			type is Alpha 21
			if (CostOption.NoCharge)
				return DerivedUnrelRecMsg
		
		DerivedUnrelRecMsg is a MessageField
			"UnreleasedReceivings"
		
		DerivedUOMConversion is a DerivedField
			type is Alpha 61
			if (HasCatchWeightIDM
			or 	NoCatchWeightIDM)
				return DerivedUOMConversionMsg
		
		DerivedUOMConversionMsg is a MessageField
			"BuyUOMOf<EnteredBuyUOM>=<DerivedApproximate>StockUOMOf<DerivedUOMMultiplier><Item.StockUOM>"
		
		DerivedApproximate is a DerivedField
			type is Alpha 11
			if (HasCatchWeightIDM)
				return "Approximate"
		
		DerivedUOMMultiplier is a DerivedField
			type is like UOMMultiplier
			if (HasCatchWeightIDM)
				return Item.SecondaryUOMMultiplier
			if (NoCatchWeightIDM)
				return EnteredBuyUOMMultiplier
		
		DerivedItemDetail is a DerivedField
			type is like MatchDetailKey
			if (Company.LocalPrintItemDtl)
				return MatchDetailKey
		
		DerivedItemGTIN is a DerivedField
			type is like ItemGTIN
			if (Company.LocalPrintGTIN and ItemGtinExists)
				return ItemGTIN
		
		DerivedItemGTINDesc is a DerivedField
			type is Alpha 40
			if (Company.LocalPrintGTIN and ItemGtinExists)
				return ItemGTIN.FullDescription
				
		DerivedLeadTimeDays is a DerivedField
			type is like LeadtimeDays
			if (PurchaseFromLocationRel.LeadtimeDays entered)
				return PurchaseFromLocationRel.LeadtimeDays
			else
			if (PurchasingVendorRel.LeadtimeDays entered)
				return PurchasingVendorRel.LeadtimeDays
			else
			if (InventoriedOrNonstock and ItemLocation.LeadtimeDays entered)
				return ItemLocation.LeadtimeDays


		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			return PurchaseOrder.DerivedDelimiter
		
		DerivedPOIncludeUDF is a DerivedField
			type is Boolean
			restricted
			return PurchaseOrder.DerivedPOOutIncludeUDFs
			
		DerivedFinanceEnterpriseGroup is a DerivedField
			type is AlphaUpper size 4
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			
		DerivedAccountingEntity is a DerivedField
			type is AlphaUpper size 12
			restricted
			return PurchaseOrder.DerivedAccountingEntity
			
		BODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			return PurchaseOrder.BODAccountingEntity
			
		ProcessBODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			return PurchaseOrder.ProcessBODAccountingEntity
		
		DerivedItem is a DerivedField
			type is Alpha size 50
			restricted
			if(ItemType.Service or ItemType.Special or DerivedRequiredCleanDocId = "Y" or DerivedItemFlag = "Y")
				return Item
			else 
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + ProcurementGroup + DerivedDelimiter + Item
		
		DerivedLocation is a DerivedField 
			type is Alpha size 22
			restricted
			if(ShipToLocation entered)
				if(DerivedRequiredCleanDocId = "Y")
					return ShipToLocation
				else
					return Company using "%d" + DerivedDelimiter + ShipToLocation
			else 
				return ""
								
		AlphaEarlyDeliveryDate is a DerivedField
			type is Alpha size 22
			restricted
			return EarlyDeliveryDate
		
		DerivedBODCreateDateTime is a DerivedField
			type is Alpha size 25
			restricted
			return PurchaseOrder.BODCreateDate
			
		DerivedBODEarlyDeliveryDate is a DerivedField
			type is Alpha size 25
			restricted
			return AlphaEarlyDeliveryDate[1:4] + "-" + AlphaEarlyDeliveryDate[5:6] + "-" + AlphaEarlyDeliveryDate[7:8] + "T" + DerivedBODCreateDateTime[9:10] + ":" + DerivedBODCreateDateTime[11:12] + ":" + DerivedBODCreateDateTime[13:14] + "Z"
		
		DerivedServiceIndicator is a DerivedField
			type is Alpha size 5
			restricted
			if(ServiceCode entered)
				return "true"
			else
				return "false"
		
		DerivedPOLineStatus is a DerivedField
			type is Alpha size 25
			restricted
			if(Closed.Yes and PurchaseOrder.Closed.Yes)
				return "Closed"
			else
			if(Quantity = CancelQuantity )
				return "Deleted"	
			else
			if(CancelQuantity entered and Quantity = CancelQuantity + ReceivedQuantity )
				return "Deleted"	
			else
				return "Open"
		
		DerivedDefaultServiceCancelAmount is a DerivedField 
			type is like UnsignedUnitCost
				precision is DerivedNumberOfDecimalsCost
			restricted
			if (ServiceCode.Amount)
				return (VendorBuyUnitCost - MatchedAmount)
			else
				return 0
								
		
		DerivedPOLineCommentText is a DerivedField
			type is Alpha size 250
			restricted
			if(PurchaseOrderLineComment set exists)
				return PurchaseOrderLineComment set.CommentText
			else
				return ""
		
		DerivedItemTypeComment is a DerivedField
			type is Alpha size 50
			restricted
			if(PurchaseOrderLineComment set exists)
				if(ItemType.Service)
					return "eam.ServiceLongDescription"
				else
					return "eam.PartLongDescription"
			else
				return ""
				
		DerivedEAMWorkOrderActivity  is a DerivedField
			type is Alpha size 8
			restricted
			if(EAMWorkOrderActivity != 0)
				return EAMWorkOrderActivity
			else
				return ""
				
		DerivedEAMManufacturing is a DerivedField
			type is Alpha size 1
			restricted
			if(DerivedPOIncludeUDF)
				return EAMManufacturing
			else
				return ""
					
		DerivedEAMProjectType is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedPOIncludeUDF)
				return EAMProjectType
			else
				return ""
		
		DerivedEAMCommodityCode is a DerivedField
			type is Alpha size 15
			restricted
			if(DerivedPOIncludeUDF)
				return PurchaseOrderLine.EAMCommodityCode
			else
				return ""
		
		DerivedRebuildRepair is a DerivedField
			type is Boolean
			restricted
			if(DerivedPOIncludeUDF)
				return RebuildRepair
			else
				return ""
		
		DerivedEAMProjectTaxCode is a DerivedField
			type is Alpha size 5
			restricted			
			if(DerivedPOIncludeUDF)
				return EAMProjectTaxCode
			else 
				return ""
		
		DerivedPOLDistProject is a DerivedField
			type is Alpha size 26
			restricted
			if(PurchaseOrderLineDistributionRel exists)
				return PurchaseOrderLineDistributionRel.DistributionAccount.Project
			else 
				return ""
				
		DerivedPOLDistGLAccount is a DerivedField
			type is Alpha size 25
			restricted
			if(PurchaseOrderLineDistributionRel exists)
				return PurchaseOrderLineDistributionRel.DistributionAccount.GeneralLedgerChartAccount
			else 
				return ""
				
		DerivedLedger is a DerivedField	
			type is AlphaUpper size 20
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.Ledger
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.Ledger
			else 
				return ""
		
		DerivedAccountingUnit is a DerivedField	
			type is AlphaUpper size 25
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.AccountingUnit
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.AccountingUnit
			else 
				return ""
				
		DerivedProcessDistAccountingEntity is a DerivedField   
            type is AlphaUpper size 25
            restricted
            if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
            	return PurchaseOrderLineDistributionRel.DistributionAccount.ToAccountingEntity
            else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.ToAccountingEntity
			else
				return ""
		
		DerivedDistAccountingEntity is a DerivedField   
            type is AlphaUpper size 25
            restricted
            if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
                LocalCleanIdAccEntity = PurchaseOrderLineDistributionRel.DistributionAccount.ToAccountingEntity
                if(DerivedRequiredCleanDocId = "Y")
                    if(DerivedConfigFEG = "Y")
                        LocalCleanIdAccountingEntity = DerivedFinanceEnterpriseGroup + DerivedDelimiter + LocalCleanIdAccEntity
                    else
                        LocalCleanIdAccountingEntity = LocalCleanIdAccEntity
                    if(FSMBODCrossReferenceDetailRel.DestinationValue entered)
                        LocalCleanIdAccountingEntity = FSMBODCrossReferenceDetailRel.DestinationValue
                        return LocalCleanIdAccountingEntity
                    else
                        return LocalCleanIdAccEntity
                else
                    return LocalCleanIdAccEntity
            else
            if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
                LocalCleanIdAccEntity = GeneralLedgerCategoryRel.InventoryAccount.ToAccountingEntity
                if(DerivedRequiredCleanDocId = "Y")
                    if(DerivedConfigFEG = "Y")
                        LocalCleanIdAccountingEntity = DerivedFinanceEnterpriseGroup + DerivedDelimiter + LocalCleanIdAccEntity
                    else
                        LocalCleanIdAccountingEntity = LocalCleanIdAccEntity
                    if(FSMBODCrossReferenceDetailRel.DestinationValue entered)
                        LocalCleanIdAccountingEntity = FSMBODCrossReferenceDetailRel.DestinationValue
                        return LocalCleanIdAccountingEntity
                    else
                        return LocalCleanIdAccEntity
                else
                    return LocalCleanIdAccEntity
            else
                return ""

		DerivedToAccountingEntity is a DerivedField	
			type is AlphaUpper size 12
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.ToAccountingEntity
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.ToAccountingEntity
			else
				return ""

		DerivedFinanceDimension1 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.FinanceDimension1
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.FinanceDimension1
			else
				return ""
				
		DerivedFinanceDimension2 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.FinanceDimension2
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.FinanceDimension2
			else 
				return ""
				
		DerivedFinanceDimension3 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.FinanceDimension3
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.FinanceDimension3
			else
				return ""
				
		DerivedFinanceDimension4 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.FinanceDimension4
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.FinanceDimension4
			else
				return ""
				
		DerivedFinanceDimension5 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.FinanceDimension5
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.FinanceDimension5
			else
				return ""
		
		DerivedFinanceDimension6 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.FinanceDimension6
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.FinanceDimension6
			else
				return ""
				
		DerivedFinanceDimension7 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.FinanceDimension7
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.FinanceDimension7
			else
				return ""
				
		DerivedFinanceDimension8 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.FinanceDimension8
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.FinanceDimension8
			else
				return ""
				
		DerivedFinanceDimension9 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.FinanceDimension9
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.FinanceDimension9
			else
				return ""
				
		DerivedFinanceDimension10 is a DerivedField	
			type is AlphaUpper size 15
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.DistributionAccount.FinanceDimension10
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.FinanceDimension10
			else
				return ""
		
		DerivedEnteredCurrencyAmount is a DerivedField	
			type is like InternationalAmount
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)
				return PurchaseOrderLineDistributionRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
			else
				return ""
		
		DerivedEnteredCurrencyRate is a DerivedField	
			type is Decimal size 31.15
			restricted
			if(PurchaseOrderLineDistributionRel exists and PurchaseOrderLineDistributionRel.AddOnCharge not entered)		
				return PurchaseOrderLineDistributionRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return 0
				
		DerivedDirectPayCertificateValue is a DerivedField
			type is Alpha size 50
			restricted
			if (ItemType.Inventoried)
				return 	DerivedDirectPayCertificate
			else
				return ""
										

		PORequisitionReferenceXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(PurchaseOrderLineSourcesRel exists)
				for each PurchaseOrderLineSourcesRel
					PORequisitionReferenceXMLBOD += template.IONPORequisitionReferenceXML_ST document for each
			else 
				return ""

		PurchaseOrderSubLineXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(PurchaseOrderLineSourcesRel exists)
				for each PurchaseOrderLineSourcesRel
					PurchaseOrderSubLineXMLBOD += template.IONPurchaseOrderSubLineXML_ST document for each
			else 
				return ""


		PurchaseOrderLineAOCXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(PurchaseOrderLineAddOnChargesRel exists)
				for each PurchaseOrderLineAddOnChargesRel
					PurchaseOrderLineAOCXMLBOD += template.IONPurchaseOrderLineAOCXML_ST document for each
			else 
				return ""
		
		
		DerivedContractID is a DerivedField
			type is Alpha size 100
			restricted
			if(Contract > 0)
				if(DerivedRequiredCleanDocId = "Y")
					return Contract
				else				
					return ProcurementGroup + DerivedDelimiter + Contract using "%d"
			else
				return ""
		
		DerivedBODContractLine is a DerivedField
			type is Alpha size 15
			restricted
			if(ContractLine > 0)
				return ContractLine using "%d"
			else
				return ""

		DerivedRequiredCleanDocId is a DerivedField
			type is Alpha size 60
			restricted
			return PurchaseOrder.DerivedRequiredCleanDocId			
					
		DerivedConfigFEG is a DerivedField
			type is Alpha size 60
			restricted
			return PurchaseOrder.DerivedConfigFEG		
					
		DerivedItemFlag is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "IsCSF_NonSOR_For_Item"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value	

		POLineCLeanDocItemId is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedRequiredCleanDocId = "Y" )
				if(ItemType.Special )
					return template.IONPOLineCLeanDocIDYesSpecialItemXML_ST document for this instance
				else
					return template.IONPOLineCLeanDocIDYesXML_ST document for this instance
			else
				if(ItemType.Special )
					return template.IONPOLineCLeanDocIDNoSpecialItemXML_ST document for this instance
				else 
					return template.IONPOLineCLeanDocNoIDXML_ST document for this instance
		



		DerivedProcessPOLDistGLAccount is a DerivedField
			type is Alpha size 25
			restricted
			if(PurchaseOrderLineDistributionRel exists and !(ItemType.Inventoried))
				return PurchaseOrderLineDistributionRel.DistributionAccount.GeneralLedgerChartAccount
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.GeneralLedgerChartAccount
			else 
				return ""
		
		DerivedAccountProject is a DerivedField
			type is Alpha size 25
			restricted
			if(PurchaseOrderLineDistributionRel exists and !(ItemType.Inventoried))
				return PurchaseOrderLineDistributionRel.DistributionAccount.Project
			else
			if(GeneralLedgerCategoryRel exist and ItemType.Inventoried)
				return GeneralLedgerCategoryRel.InventoryAccount.Project
			else 
				return ""
	
		POProcessRequisitionReferenceXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(PurchaseOrderLineSourcesRel exists)
				for each PurchaseOrderLineSourcesRel
					each.LocalPOLineSourceAE = BODAccountingEntity
					POProcessRequisitionReferenceXMLBOD += template.IONProcessPORequisitionReferenceXML_ST document for each
			else 
				return ""

		ProcessPurchaseOrderSubLineXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(PurchaseOrderLineSourcesRel exists)
				for each PurchaseOrderLineSourcesRel
					each.LocalPOLineSourceAE = BODAccountingEntity
					ProcessPurchaseOrderSubLineXMLBOD += template.IONProcessPOSubLineSourceXML_ST document for each
			else 
				return ""


		ProcessPurchaseOrderLineAOCXMLBOD is a DerivedField 
			type is XMLDocument
			restricted
			if(PurchaseOrderLineAddOnChargesRel exists)
				for each PurchaseOrderLineAddOnChargesRel
					each.LocalPOLineAOCAE = BODAccountingEntity
					ProcessPurchaseOrderLineAOCXMLBOD += template.IONProcessPOLineAOCXML_ST document for each
			else 
				return ""
				
		ProcessPOLineDistProjectXMLBOD is a DerivedField 
			type is XMLDocument
			restricted
			if(PurchaseOrderLineDistributionRel exists)
				for each PurchaseOrderLineDistributionRel
					if(!(each.DistributionAccount.Project= blank))
						ProcessPOLineDistProjectXMLBOD += template.IONPOLineDistributionProject_ST document for each
			else 
				return ""	
				
		ProcessPOLineDistProjectBudgetXMLBOD is a DerivedField 
			type is XMLDocument
			restricted
			if(PurchaseOrderLineDistributionRel exists)
				for each PurchaseOrderLineDistributionRel
					ProcessPOLineDistProjectBudgetXMLBOD += template.IONPOLineDistributionProjectBudget_ST document for each
			else 
				return ""				
				
		ProcessPurchaseOrderLineDistChargeXMLBOD is a DerivedField 
			type is XMLDocument
			restricted
			if(PurchaseOrderLineAddOnChargesRel exists)
				for each PurchaseOrderLineAddOnChargesRel
					ProcessPurchaseOrderLineDistChargeXMLBOD += template.IONPOLDistChargeAddOnCharge_ST document for each
			else 
				ProcessPurchaseOrderLineDistChargeXMLBOD += template.IONPOLDistChargeAddOnChargeEmpty_ST document for this instance
			
				
		ProcessPOPunchOut is a DerivedField
			type is Alpha size 60
			restricted
			if (ItemType.Special)
				return "Punch-Out Item"
			else
				return ""
				
		ProcessPOSpecialItem is a DerivedField
			type is Alpha size 60
			restricted
			if (ItemType.Special)
				return "Supplier" 
			else
				return ""
						

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
			
		BudgetExceedsDescription is a DerivedField
			type is Alpha 200
			restricted
			return "Vendor" + " "+ PurchaseOrder.Vendor +" "+"exceeding the budget in PurchaseOrder" +" "+ PurchaseOrder
					
		DerivedBODID is a DerivedField
			type is Alpha 200
			restricted 
			return	"infor-nid:" + DerivedTenantID +":"+ GeneralLedgerCompanyRel.FinanceEnterpriseGroup +":"+ PurchaseOrderLine +":"+ "?BudgertExceeds&verb=Process"
			
		BudgetExceedsAlertXML is a DerivedField
			type is XMLDocument
			restricted
			BudgetExceedsAlertXML = template.IONBudgetExceeds_PurchaseOrderLine_ST document for this instance	


		DerivedReturnCost is a DerivedField
			type is like UnsignedUnitCost
    			precision is DerivedNumberOfDecimalsCost
			restricted
			if (VendorReturnLinesCreationRel exist)
				return first VendorReturnLinesCreationRel.UnitCost
			else
				if (!VendorReturnForCreateForVendorReturnRel.VendorClaimType.NoCharge)
					return VendorBuyUnitCost
				else
					return 0


		TaxCode1 is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode1
				return PurchaseOrderLineTaxRel.TaxCode
			else
				return TaxCode
		
		TaxRate1 is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode1
			else
				LocalTaxCode = TaxCode
			return PurchaseOrderLineTaxRel.TaxRate		
			
		TaxAmount1	is a DerivedField
			type is like InternationalAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode1
			else
				LocalTaxCode = TaxCode
			return PurchaseOrderLineTaxRel.TaxAmount

		TaxCode2 is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode2
				return PurchaseOrderLineTaxRel.TaxCode
		
		TaxRate2 is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode2
				return PurchaseOrderLineTaxRel.TaxRate
			
		TaxAmount2	is a DerivedField
			type is like InternationalAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode2
				return PurchaseOrderLineTaxRel.TaxAmount
				
		TaxCode3 is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode3
				return PurchaseOrderLineTaxRel.TaxCode
		
		TaxRate3 is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode3
				return PurchaseOrderLineTaxRel.TaxRate
			
		TaxAmount3	is a DerivedField
			type is like InternationalAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode3
				return PurchaseOrderLineTaxRel.TaxAmount
			
		TaxCode4 is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode4
				return PurchaseOrderLineTaxRel.TaxCode
		
		TaxRate4 is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode4
				return PurchaseOrderLineTaxRel.TaxRate
			
		TaxAmount4	is a DerivedField
			type is like InternationalAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode4
				return PurchaseOrderLineTaxRel.TaxAmount		

		TaxCode5 is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode5
				return PurchaseOrderLineTaxRel.TaxCode
		
		TaxRate5 is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode5
				return PurchaseOrderLineTaxRel.TaxRate
			
		TaxAmount5	is a DerivedField
			type is like InternationalAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode5
				return PurchaseOrderLineTaxRel.TaxAmount

		TaxCode6 is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode6
				return PurchaseOrderLineTaxRel.TaxCode
		
		TaxRate6 is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode6
				return PurchaseOrderLineTaxRel.TaxRate
			
		TaxAmount6	is a DerivedField
			type is like InternationalAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode6
				return PurchaseOrderLineTaxRel.TaxAmount

		TaxCode7 is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode7
				return PurchaseOrderLineTaxRel.TaxCode
		
		TaxRate7 is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode7
				return PurchaseOrderLineTaxRel.TaxRate
			
		TaxAmount7	is a DerivedField
			type is like InternationalAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode7
				return PurchaseOrderLineTaxRel.TaxAmount					
				
		TaxCode8 is a DerivedField
			type is like TaxCode
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode8
				return PurchaseOrderLineTaxRel.TaxCode
		
		TaxRate8 is a DerivedField
			type is like ChrgRate
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode8
				return PurchaseOrderLineTaxRel.TaxRate
			
		TaxAmount8	is a DerivedField
			type is like InternationalAmount
			if (TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = TaxCode.TaxTableRel.TaxCode8
				return PurchaseOrderLineTaxRel.TaxAmount				
				

		CancelQuantityInStockUOM		is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (CatchWeightCancelQuantity entered)
				return CatchWeightCancelQuantity
			else
				return CancelQuantity * EnteredBuyUOMMultiplier

		ReturnedQuantityInStockUOM		is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (CatchWeightReturnedQuantity entered)
				return CatchWeightReturnedQuantity
			else
				return ReturnQuantity * EnteredBuyUOMMultiplier

		SubstituteQuantityInStockUOM		is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (CatchWeightSubstituteQuantity entered)
				return CatchWeightSubstituteQuantity
			else
				return SubstituteQuantity * EnteredBuyUOMMultiplier
                
        ArchivedQuantityInStockUOM		is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (CatchWeightArchivedQuantity entered)
				return CatchWeightArchivedQuantity
			else
				return ArchivedQuantity * EnteredBuyUOMMultiplier

		RejectedQuantityInStockUOM		is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (CatchWeightRejectedQuantity entered)
				return CatchWeightRejectedQuantity
			else
				return RejectedQuantity * EnteredBuyUOMMultiplier

		ArchivedQuantityInCatchWeightUOM		is a DerivedField 
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			return ArchivedQuantity * EnteredBuyUOMMultiplier
                
		OpenToMatchQuantityInStockUOM		is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (OpenToMatchCatchWeightQuantity entered)	
				return OpenToMatchCatchWeightQuantity
			else
				return OpenToMatchQuantity * EnteredBuyUOMMultiplier
			
		MatchedQuantityInCatchWeightUOM		is a DerivedField 
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			return MatchedQuantity / EnteredBuyUOMMultiplier
			
		MatchedNotReceivedQuantityInStockUOM		is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (CatchWeightMatchedNotReceivedQuantity entered)
				return CatchWeightMatchedNotReceivedQuantity
			else
				return MatchedNotReceivedQuantity * EnteredBuyUOMMultiplier
				
		ChargebackQuantityInCatchWeightUOM		is a DerivedField 
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			return ChargebackQuantity / EnteredBuyUOMMultiplier

		MemoQuantityInCatchWeightUOM		is a DerivedField 
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			return MemoQuantity / EnteredBuyUOMMultiplier

		WriteOffQuantityInCatchWeightUOM		is a DerivedField 
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			return WriteOffQuantity / EnteredBuyUOMMultiplier

		ChargebackQuantityInStockUOM		is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (CatchWeightChargebackQuantity entered)
				return CatchWeightChargebackQuantity
			else
				return ChargebackQuantity * EnteredBuyUOMMultiplier

		MemoQuantityInStockUOM		is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (CatchWeightMemoQuantity entered)
				return CatchWeightMemoQuantity
			else
				return MemoQuantity * EnteredBuyUOMMultiplier

		WriteOffQuantityInStockUOM		is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (CatchWeightWriteOffQuantity entered)
				return CatchWeightWriteOffQuantity
			else
				return WriteOffQuantity * EnteredBuyUOMMultiplier
				
		WriteOffQuantityForBatchJobReport is a DerivedField
			type is like Quantity
				precision is DerivedNumberOfDecimalsQuantity
			if (IsCatchWeightItem)
				return WriteOffQuantityInStockUOM
			else
				return WriteOffQuantity

		NoCatchWeightMessage is a MessageField
			"CatchweightStockQuantityIsRequiredForCatchweightItems"
			
		DerivedCatchWeightStockUOM  is a DerivedField
			type is like UnitOfMeasure
    		if (IsCatchWeightItem) 
    			return Item.StockUOM
    			
    	DerivedOrderedQuantity is a DerivedField
    		type is like Quantity
    			precision is DerivedNumberOfDecimalsQuantity
    		default label is "OrderedQuantity"
    		return Quantity

		DerivedCanceledQuantity is a DerivedField
    		type is like Quantity
    			precision is DerivedNumberOfDecimalsQuantity
    		default label is "CanceledQuantity"
    		return CancelQuantity

		DerivedOrderedAmount is a DerivedField
    		type is like UnsignedUnitCost
    			precision is DerivedNumberOfDecimalsCost
    		default label is "OrderedAmount"
			if (ServiceCode.Amount)
				return (VendorBuyUnitCost)
			else
				return 0

		DerivedCanceledAmount is a DerivedField
    		type is like UnsignedUnitCost
    			precision is DerivedNumberOfDecimalsCost
    		default label is "CanceledAmount"
			return (ServiceCancelAmount)

    	DerivedOrderedPriceQuantity is a DerivedField
    		type is like Quantity
    			precision is DerivedNumberOfDecimalsQuantity
    		default label is "OrderedPrice"
    		return VendorPriceUOMQuantity

		CancelledOrReturnMessage is a DerivedField
			type is MessageField
			if (CancelledStatus)
				return "With Canceled Quantity or Amount"
			else
			if (ReturnedStatus)
				return "Returned"
			else
			if (CancelledOrReturnedStatus)
				return "With Canceled Quantity or Amount / Returned"
			else
				return blank
		
		DerivedPurchaseOrderReceipt is a DerivedField	
            type is Numeric size 10
            return PurchaseOrderReceiptLinesRel.PurchaseOrderReceipt
            
        DerivedPurchaseOrderReceiptStatus is a DerivedField 
            type is Numeric size 1
            return PurchaseOrderReceiptLinesRel.Status
            
        DerivedOneYearReplicationData is a DerivedField 
        	type is Boolean
            if ((current date - create date) <  360)
                return true
            else
                return false

 		DerivedLocationStockUOM				is a DerivedField 
			type is like UnitOfMeasure
			return ItemLocationRel.ItemLocationStockUOM.UnitOfMeasure

		DerivedLocationStockUOMMultiplier 	is a DerivedField
			type is like UOMMultiplier
			return ItemLocationRel.ItemLocationStockUOM.ItemUOM.UOMConversion

		DerivedOrderUOMRounding				is a DerivedField 
			type is Boolean
			return ItemLocationRel.HasOrderUOMRounding

		DerivedDefaultBuyLocationItemUOM	is a DerivedField 
			type is like UnitOfMeasure
			return LocationItemUOMDefaultBuyingRel.UnitOfMeasure

		DerivedStockUOM 					is a DerivedField
			type is like UnitOfMeasure
			if (HasItemLocationStockUOM)
				return DerivedLocationStockUOM
			else
				return Item.StockUOM


		DerivedItemAndDescription is a StringField 
			type is Alpha size up to 50
			Item
			" - "
			Description

		DerivedSpecialHandlingCode 		is a DerivedField
			type is Alpha size 25
			return SpecialHandlingCode

		DerivedHandlingTimeInMinutes	is a DerivedField
			type is Numeric 3
			return HandlingTimeInMinutes

		DerivedHandlingTimeInMinutesForPrint	is a DerivedField
			type is Numeric 3
			if (HandlingTimeInMinutes entered)
				return HandlingTimeInMinutes
			else
				return 00
		
		DerivedEmptyHeader is a DerivedField
			type is Alpha 2
			return blank
        
     	DerivedTimeSensitive					is a DerivedField		
			type is Boolean
			return SpecialHandlingCode.TimeSensitive

		HasSpecialHandlingMessage is a MessageField
			"Yes"

		NoSpecialHandlingMessage is a MessageField
			"No"

		DerivedHasSpecialHandling				is a DerivedField
			type is MessageField
			if (HasSpecialHandlingCode)
				return HasSpecialHandlingMessage
			else
				return NoSpecialHandlingMessage

		DeriveReturnYes is a DerivedField
			type is Alpha size 1
			return "Y"

		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp				

		DerivedAlternateShipToLocationBin is a DerivedField
			type is like Bin
			if (AlternateShipToLocationRel exists)
				return AlternateShipToLocationRel.PreferredBin

		PODocumentCostOptionMessage is a DerivedField
			type is MessageField
			if (CostOption.VendorDetermined and EnteredUnitCost not entered)
				return "Cost to be determined"
			else
			if (CostOption.NoCharge)
				return "No charge item"

		CanceledAmount is a DerivedField
			type is like UnsignedUnitCost
				precision is DerivedNumberOfDecimalsCost
			if (ServiceCode.Amount)
				return ServiceCancelAmount
			else
				return (CancelQuantity * EnteredUnitCost)
		
		DerivedMatchedAmount is a DerivedField
			type is like UnsignedUnitCost
				precision is DerivedNumberOfDecimalsCost
			if (ServiceCode.Amount)
				return MatchedAmount
			else
				return (MatchedQuantity  * EnteredUnitCost)

		DerivedPOLandedTax is a DerivedField
			type is like InternationalAmount
			restricted
			if (EnteredUnitCost changed
			and LandedUnitCost not changed)
				LocalLandedAOCAndTaxAmount = LandedUnitCost - old EnteredUnitCost
			else
				LocalLandedAOCAndTaxAmount = LandedUnitCost - EnteredUnitCost

			LocalLandedTaxAmount = LocalLandedAOCAndTaxAmount - LocalTotalLandedAOC 
			if (LocalTotalLandedAOC < 0 
			and	LocalLandedAOCAndTaxAmount >= 0) 
				LocalTotalLandedAOC = LocalTotalLandedAOC * -1

			if (LocalLandedAOCAndTaxAmount < LocalTotalLandedAOC) 
				LocalLandedTaxAmount = LocalLandedAOCAndTaxAmount
			return (LocalLandedTaxAmount * LocalVendorPriceQuantityToProcess)

		DerivedDeliveryToleranceDays is a DerivedField
			type is Numeric size 3
			restricted
			initialize LocalDisableDeliveryTolerance
			if (PurchaseFromLocationRel not exists or PurchaseFromLocationRel.DeliveryToleranceOption.DefaultToNextLevel)
				if (PurchasingVendorRel not exists or PurchasingVendorRel.DeliveryToleranceOption.DefaultToNextLevel)
					if (Company exists and Company.DeliveryToleranceOption.UseDeliveryToleranceDays)
						return Company.DeliveryToleranceDays
					else
						LocalDisableDeliveryTolerance = true
				else
					if (PurchasingVendorRel.DeliveryToleranceOption.UseDeliveryToleranceDays)
						return PurchasingVendorRel.DeliveryToleranceDays
					else
						LocalDisableDeliveryTolerance = true
			else
				if (PurchaseFromLocationRel.DeliveryToleranceOption.UseDeliveryToleranceDays)
					return PurchaseFromLocationRel.DeliveryToleranceDays
				else
					LocalDisableDeliveryTolerance = true

		DeliveryDateWithinTolerance is a ComputeField
			type is Date
			restricted
			(EarlyDeliveryDate + DerivedDeliveryToleranceDays)

	Conditions
	
		ForContractLineDisplay
			restricted
			when (PurchaseOrderLine exists
			and  (not ItemType.Service			or not CostCode.Entered))

		ForContractLineEdit
			restricted
			when (not PurchaseOrderLine exists	
			or    CostCode.Entered)

		HasPayablesInvoiceDetails 
			restricted 
			when (PayablesInvoiceDetailsRel exists)
		
		IsACapitatedProcedure 
			restricted 
			when (CapitatedProcedureLevel > 0
			and   CapitatedProcedureLine !entered)

		ContractLineIsACapitatedComponent 
			restricted 
			when (CapitatedComponentGroup entered)

		CapitatedProcedureLineEntered 
			restricted 
			when (CapitatedProcedureLine entered)

		IsLastLine
			restricted
			when (PurchaseOrderLine.LineNumber = PurchaseOrder.last PrintLinesRel.LineNumber)
			
		IsCostNegative 
			restricted
			when (VendorBuyUnitCost < 0)
			
		OriginalItemExists
			restricted
			when (OriginalItemRel exists)
		
		SubstituteItemsExists
			restricted
			when (ValidSubstituteItemsRel exists) 
			
		ItemGTINExist
			restricted
			when (ItemGTINRel exists)
		
		HasIncorrectReceivedQuantity
			restricted
			when (ReceivedQuantity != sum ReleasedPurchaseOrderReceiptLinesRel.DerivedReceivedQuantityInPOUOM) 
	
		HasInvoicedTaxAmount
			restricted
			when (InvoicedTaxAmount > 0)
			
		HasAccruedTaxAmount
			restricted
			when (AccruedTaxAmount > 0)
		
		OldCostCodeFromContracts
			restricted
			when (old CostCode.Contract
			or	  old CostCode.Blanket
			or	  old CostCode.CatalogQuote
			or	  old CostCode.Standing
			or	  old CostCode.TierReqLocParticipant
			or	  old CostCode.TierIcLocationParticipant
			or	  old CostCode.TierCompanyParticipant)

		HasUnreleasedReceiptLines
			restricted
			when (UnreleasedPurchaseOrderReceiptLinesRel exists)
		
		CanReleasePurchaseOrder
			restricted
			when (PurchaseOrder.PurchaseOrderInOpenStatus
			and   PurchaseOrder.IsUpdateAllowed)
			
    	ValidForCreateUpdate
    		restricted
    		when (PurchaseOrder.IsUpdateAllowed
        	and  (FromInterfaceUpdate
        	or   (not FromInterfaceUpdate and PurchaseOrder.InterfaceInProcess.NotInProcess)))

    	ValidForReleasedUpdate
    		restricted
    		when ((FromInterfaceUpdate
        	or    (not FromInterfaceUpdate and PurchaseOrder.InterfaceInProcess.NotInProcess))
        	and    not PurchaseOrder.Closed.Historical)

		TaxEntityUsesThirdPartyTax
			restricted
			when (TaxEntityUsesVertex
			or    TaxEntityUsesSabrix)
		
		TaxEntityUsesVertex
			restricted				 							
			when (TaxEntityValue.ThirdParty.VertexOSeries)	

		TaxEntityUsesSabrix										
			restricted				 							
			when (TaxEntityValue.ThirdParty.Sabrix)	
		
		DoTaxCalculation
			restricted
			when (not TaxEntityRel.ThirdParty.Sabrix  
			or    not TaxEntityRel.DelayTaxProcessing 
			or    PurchaseOrderLineLifeCycleState.Released)

		IsOneSourceTax
			restricted
			when (Taxable
			and	  TaxEntityRel.ThirdParty.Sabrix)
		
		LineErrorsExist
			restricted
			when (PurchaseOrderLineErrorRel exists)
			
		ContractLineEntered
			restricted
			when (ContractLine entered)
		
		ContractHasPerOrderMinimumAmount
			restricted
			when (Contract entered
			and   Contract.PerOrderMinimumAmount entered)
			
		ContractHasPerOrderMaximumAmount
			restricted
			when (Contract entered
			and   Contract.PerOrderMaximumAmount entered)
		
        ContractHasVendorLocation 
        	restricted
        	when (Contract.HasApPurchFrom)

		AllowDelete
			restricted
    		when (not Issued
    		and   not PurchaseOrder.BudgetEditInProgress)

		RestrictPOLineChanges		
			restricted
			when  ((not Company.ReopenPurchaseOrderLine
			and		PurchaseOrderLineLifeCycleState.Closed) 
			or	   (PurchaseOrderLineLifeCycleState.Historical
			or		PurchaseOrderLineLifeCycleState.Canceled)
			or		PurchaseOrder.BudgetEditInProgress)
		
		IsDeleteAllowed
			restricted
			when ((PurchaseOrderLineLifeCycleState.Unreleased
			or	  (PurchaseOrderLineLifeCycleState.Released
			and    not IsPrinted)
			or	   PurchaseOrderLineLifeCycleState.Closed)
			and    !PurchaseOrder.BudgetEditInProgress
        	and    not HasPOReceiptLines
			and    not HasInvoiceLine)


    	HasPatientProcedureRecord
			when (PatientProcedure entered)

		IsProcInfoDeleteAllowed
			restricted
			when (IsDeleteAllowed
			and   PatientProcedure entered)
			
		OverdueReceipt
			restricted
			when (EarlyDeliveryDate entered
			and   current corporate date >= EarlyDeliveryDate)

		EarlyDeliveryDateWithinRange
    		restricted
    		when (!EarlyDeliveryDateRange entered
    		or   (EarlyDeliveryDateRange entered
    		and   EarlyDeliveryDate within EarlyDeliveryDateRange))
		
		NonInventoriedReceived
			when (!ItemType.Inventoried
			and   ReceivedQuantity != 0)
		
		LineCanBeCopied
			restricted
			when (ShipToLocation.IsActive
			and  (ItemType.Special or ItemType.Service or Item.IsActive)
			and  (not LineFullyCancelled))
			
		HeaderIsFullyCanceledOrLineCanBeCopied
			restricted
			when (PurchaseOrder.Canceled
			or	  LineCanBeCopied)
		
		ForIgnoreCancelQuantity
			restricted
			when (ShipToLocation.IsActive
			and  (ItemType.Special or ItemType.Service or Item.IsActive))

		CanArchiveReceipt
			restricted
			when (ReleasedReceiptLineExists
			and   Closed.No)

		IsValidforReceiptArchive
			restricted
			when (HasReleasedReceiptLine
			and   Closed.No)
			
		DistributionsExistButNotInBalance
			restricted
			when (DistributionExists
			and   not AmountsAndQuantitesInBalance)
			
		ByQuantityInBalance
			restricted
			when (DistributionBy.ByQuantity
			and   RemainingQuantityToBeDistributed not entered)
			
		ByAmountInBalance
			restricted
			when (DistributionBy.ByAmount
			and   RemainingAmountToBeDistributed not entered)
			
		ByPercentInBalance
			restricted
			when (DistributionBy.ByPercent
			and   RemainingPercentToBeDistributed not entered)
			
		AmountsAndQuantitesInBalance
			restricted
			when (ByQuantityInBalance
			or	  ByAmountInBalance
			or	  ByPercentInBalance)
		
		MissingDistribution
			restricted
			when (!IsInventoryType
			and   !DistributionExists
			and   PurchaseOrderLine exists
			and	  !LineFullyCancelled)
			
		AllowChangeToPunchoutPurchaseOrder
			restricted
			when (PurchaseFromLocationRel.AllowChangeToPunchoutPurchaseOrder
			or    PurchasingVendorRel.AllowChangeToPunchoutPurchaseOrder)
        












	





			
		SubstituteLinesExist
			restricted
			when (SubstitutedPurchaseOrderLinesRel exists)
			
		LineExists
			restricted
			when (PurchaseOrderLine exists)
	
		IsCostRequired
			restricted
			when (!TransientBypassUnitCostValidation
			and   CostOption.CostRequired)
		
		HasBlanketOrStandingContract
			restricted
			when (PurchaseOrder.BlanketOrStandingContract entered)			
		
		DisableCreatePurchaseOrderLine
			restricted
			when (PurchaseOrder.BlanketOrStandingContract entered
			and not PurchaseOrder.BlanketOrStandingContract.AllowReferenceOfItemsNotOnContract)
	
		InventoriedSpecialOrNonstock
			restricted
			when (ItemType.Inventoried
			or	  ItemType.Special
			or	  ItemType.NonStock)
	
		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

        IsMyPurchaseOrder
        	restricted
			when (Buyer = actor.agent(Employee).Employee)
        
        QuantityNotEntered
        	restricted
        	when (Quantity !entered)
        
        InspectionsExist
        	restricted
        	when (InspectionLinesRel exists)
        
        AdjustmentsExist
        	restricted
        	when (AdjustmentLinesRel exists)
        
       	AssetDefaultExists
            classic name is AMDFLTS-EXIST
            restricted
            when (PurchaseOrderLineAssetDefaultsRel exists)

        AssetDetailExists
            classic name is AMDTL-EXISTS
            restricted
            when (PurchaseOrderLineAssetDetailslRel exists)

        AssetHeaderExists
            classic name is AMHDR-EXISTS
            restricted
            when (PurchaseOrderLineAssetRel exists)

        QuantityFullyCancelled
            restricted
			when (CancelQuantity = Quantity)
        
        QuantityPartiallyCancelled
			when (CancelQuantity != 0
			and   CancelQuantity < Quantity)
        
        IsClosed
            restricted
            when (PurchaseOrder.Closed.Yes)

        HasContract
            classic name is CONTRACT-ENTRD
            restricted
            when (Contract entered)

        ItemOnContract
            restricted
        	when (ItemOnContractRel exists)
        
        CommittedContract
            restricted
        	when (first PurchaseOrderLineDistributionsRel.ContractCommitments)
        
        IsDropship
            restricted
            when (PurchaseOrder.Dropship)

        IsFromVendorReturn
            classic name is FROM-RETURN
            restricted
            when (PurchaseOrder.VendorReturn entered)
            
        IsVendorInactive   
            restricted
            when (!PurchaseOrder.Vendor.IsActiveVendor)
        
        AddOnChargeExists
            classic name is HAS-AOCDTL
            restricted
            when (PurchaseOrderAndLineAddOnCharge set exists)
            
    	HasVendorReturnLines
    		restricted
    		when (VendorReturnLinesRel exists)

        AddOnChargeExistsForAVendor
            restricted
        	when (first PurchaseOrderAndLineAddOnChargesForALineSameVendorRel exists)
        
        AuditRecordExists
            classic name is HAS-AUDIT-REC
            restricted
            when (first PurchaseOrderAuditsRel exists)

        DistributionExists
            classic name is HAS-DIST
            restricted
            when (PurchaseOrderLineDistributionsRel exists)
            
        HasMultipleDistributions
            restricted
        	when (instance count of PurchaseOrderLineDistributionsRel > 1)
        	
		HasPicture
			restricted
			when (Item.Picture entered)
			
    	HasTolerances
    		restricted
    		when (OvershipmentTolerancePercentage entered
    		or UndershipmentTolerancePercentage entered)
        	
        SingleDistributionDisplay
            restricted
			when (not HasMultipleDistributions and not IsInventoryType)
			
        HasPOCode
            restricted
            when (PurchaseOrder.POCode entered)

        ReleasedReceiptLineExists
            classic name is HAS-RECEIVING
            restricted
            when (first ReleasedPurchaseOrderReceiptLinesRel exists)

		HasReleasedReceiptLine //Receipt Lines that are not "Unreleased" and not "Released / Pending Two Step Receiving"
			restricted
			when (first ReleasedReceiptLinesRel exists)

        OpenMatchQuantityReceiptLineExists
            restricted
			when (first OpenMatchQuantityReceiptLinesRel exists)
			
        PurchaseOrderLineSourceExists
            classic name is HAS-SOURCE
            restricted
            when (first PurchaseOrderLineSource set exists)

        IsInventoryLineEnetered    
            restricted
        	when (PurchaseOrderLine entered 
        	and !ItemType.Inventoried)
        	
        IsInventoryType
            classic name is INVENTORYTYPE
            restricted
            when (ItemType.Inventoried)
            
        IsInventoryAndDropShip            
            restricted
            when (ItemType.Inventoried    
            and PurchaseOrder.Dropship)
            
        IsNonStockType
            classic name is INVENTORYTYPE
            restricted
            when (ItemType.NonStock)

        HasPORelease
            classic name is IS-RELEASE
            restricted
            when (PurchaseOrder.PORelease entered)

        HasVendorItem
            classic name is IS-VEND-ITEM
            restricted
            when (VendorItem entered)

        ItemExists
            classic name is ITEMMAST
            restricted
            when (Item exists)

        NonStockOrSpecialOrService
            restricted
			when (ItemType.NonStock
			or    ItemType.Service
			or	  ItemType.Special)
		
        NonStockOrSpecial 
			restricted 
			when (ItemType.NonStock
			or    ItemType.Special)
		
		IsSpecialOrService
            restricted
			when (ItemType.Special
			or    ItemType.Service)
        
        VendorItemExists
            classic name is ITEMVEN-EXISTS
            restricted
            when (VendorItem exists)
            
        ItemGtinExists
        	restricted
        	when (ItemGTIN exists)

        InvoiceDetailExists
            classic name is MAINVDTL-EXIST
            restricted
            when (PayablesInvoiceDetailsUnmatchedRel exists)

		ReturnCostDiffers
			restricted
			when (ReturnCostDiffersPOCost
			or	  ReturnCostDiffersMatchCost)

		ReturnCostDiffersPOCost
			restricted
			when (MatchedQuantity not entered
			and	  VendorBuyUnitCost != TransReturnUnitCost)

		ReturnCostDiffersMatchCost
			restricted
			when (MatchedQuantity entered
			and	  PayablesInvoiceDetailWithDifferentMatchUnitCostRel exists)

        HasMajorPurchaingClass
            classic name is MAJOR-CLASS
            restricted
            when (MajorPurchasingClass entered)

        HasManufacturerCode
            classic name is MANUF-CD-ENTRD
            restricted
            when (Manufacturer.ManufacturerCode entered)

        HasMinorPurchasingClass
            classic name is MINOR-CLASS
            restricted
            when (MinorPurchasingClass entered)
            
        HasPOReceiptLines
        	restricted 
    		when (PurchaseOrderReceiptLinesRel exists)
    		
		HasInvoiceDetails
			restricted
			when (PayablesInvoiceDetailsForPOLineRel exists)

		HasInvoiceLine
			restricted
			when (PayablesInvoiceDetailsRel exists)

        IsNonService
            restricted
            when (not ItemType.Service)

        IsService
            restricted
            when (ItemType.Service)

        IsNotInventory
            classic name is NOTINVENTORY
            restricted
            when (not ItemType.Inventoried)

        IsOpen
            restricted
            when (not Closed.Yes)

        IsOpenForReceiving
            classic name is OPENRECEIVING
            restricted
            when (PurchaseOrder.Released
            and   QuantityToProcess > 0
            and   ReceivedQuantity < QuantityToProcess
            and   not ItemType.Service
            and   not PurchaseOrder.Dropship)

		OverdueReceiptsInventory
			restricted
			when (Closed.No
			and	  IsOpenForReceiving
			and	  IsInventoryType
			and	  OverdueReceipt)

        IsOpenForReceivingForAVendor  
            restricted
        	when (Company.ProcurementGroup  = actor.agent(SupplierSourceId).SupplierGroup
 			and   Vendor			        = actor.agent(SupplierSourceId).Supplier.Vendor
 			and  (IsOpenForReceiving
 			or   (ItemType.Service
 			and  !IsFullyMatched))
 			and  (PurchaseOrder.Issued
 			or    PurchaseOrder.IssueMethod.DoNotPrint))	
        
        IsOpenForReceivingForASupplier  
            restricted
 			when ((IsOpenForReceiving
 			or    (ItemType.Service
 			and   !IsFullyMatched))
 			and   (PurchaseOrder.Issued
 			or     PurchaseOrder.IssueMethod.DoNotPrint))	

        IsOpenForReceivingIncludingUnreleased
            when (QuantityToProcess > 0
            and   ReceivedQuantity < QuantityToProcess
            and   Closed.No
            and   not ItemType.Service
            and   not PurchaseOrder.Dropship)
        
        HeaderClosed
            classic name is PO-HISTORY
            restricted
            when (PurchaseOrder.Closed.Yes)

        IsPrinted
            restricted
            when (Issued)

        HasPurchaseFromLocation
            classic name is PURCH-FR-LOC
            restricted
            when (PurchaseFromLocation entered)

        HasReceivedQuantity
            classic name is RECEIPTS-EXIST
            restricted
            when (ReceivedQuantity >  0)

        QuantityPartiallyReceived
        	restricted
        	when (ReceivedQuantity >  0
        	and   ReceivedQuantity! = Quantity)
        
        HasRequestingLocations
        	restricted
        	when (instance count of PurchaseOrderLineSourceRequestingLocationRel > 1)
        
        IsReceivable
            restricted
            when (not ItemType.Service
            and   not IsDropship
            and   Released
            and   Closed.No
            and   QuantityToProcess >  ReceivedQuantity)

        IsReleased
            restricted
            when (PurchaseOrder.Released)

        IsRetainageLine
            restricted
            when (Retainage.Yes)
            
        IsRetainageContract
        	restricted
            when (Retainage.RetainageOnContract)
				       	
		IsHeaderRetainage
			restricted
            when (PurchaseOrder.HasRetainage)
        
        IsRetainageAllowed
        	restricted
        	when (IsRetainageContract
        	or    IsHeaderRetainage)
        	
      	IsValidRetainageCostOption 
      		restricted
      		when (CostOption.CostRequired
      		or	 (CostOption.VendorDetermined and not ItemType.Service))
            
        VendorReturnLineExists
            classic name is RETURNS-EXIST
            restricted
            when (first VendorReturnLinesRel exists)

        IsUnreleased
            restricted
            when (!Released)

        UnreleasedAndHasContract
            restricted
        	when (IsUnreleased
        	and   HasContract)
        
        MultipleVendorItemsForItemAndVendorExist
            restricted
            when (MultipleVendorItemsForItemAndVendorRel exists)

		LineFullyCancelled
		    restricted
			when (CancelQuantity = Quantity
			or	 (ServiceCode.Amount 
			and   ServiceCancelAmount entered 
			and   ServiceCancelAmount = EnteredUnitCost))
			
		ValidToSubstituteForVendorItem
		    restricted
			when ((PurchaseOrderLineLifeCycleState.Unreleased or PurchaseOrderLineLifeCycleState.Released)
			and  MultipleVendorItemsForItemAndVendorExist
			and  !IsFullyReceived
			and  !IsFullyMatched
			and  !LineFullyCancelled)
		
        ContractEntered
            restricted
       		when (Contract entered)

		ContractAmountIncludesTax
			restricted
			when (ContractEntered
			and   Contract.IncludeTaxInMaxEdits)
		
		ContractAmountIncludesAddOnCharge
			restricted
			when (ContractEntered
			and   Contract.IncludeAOCInMaxEdits)
		
		QuantityAvailableForPayablesInvoice
		    restricted
			when (DerivedOpenToPayablesInvoiceQuantity > 0)
			
		ReceivedNotInvoicedQuantityExists
			when (DerivedReceivedNotInvoicedQuantity > 0)
			
		InvoicedNotReceivedExists 
		    restricted
			when (IsReceivable 
			and   UnmatchedPayablesInvoiceDetailsRel exists)
		
		HasUnmatchedInvoice
			restricted
			when (UnmatchedPayablesInvoiceDetailsRel exists)
			
		IsCreatedFromOrderEntry
			restricted
			when (PurchaseOrderLinesFromOrderEntryRel exists)
			
		AllowMatchCreateDetail
		    restricted
        	when  (DerivedOpenToPayablesInvoiceQuantity > 0
        	or    (CostOption.NoCharge
        	and    Vendor.AllowZeroCostInvoice.Yes
        	and    OpenToMatchQuantity > 0
        	and    Closed.No))
			
		IsDistributionNotBalanced 
		    restricted
			when (PurchaseOrderLineDistributionsRel exists
			and	((DistributionBy.ByQuantity
			and    DistributionQuantityTotal not = QuantityToProcess
			and    QuantityToProcess > 0)  
			or    (DistributionBy.ByPercent
			and    DistributionPercentTotal not = 100%
			and    QuantityToProcess > 0)
			or    (DistributionBy.ByAmount
			and    DistributionAmountTotal not = CalculateExtendedAmount   
			and    QuantityToProcess > 0)))			
		
		HasCostCode 
		    restricted
			when (DerivedCostCodeMessage entered)
		
		MiscellaneousAddOnChargeExists
		    restricted
            when (first PurchaseOrderAddOnChargesRel exists)
 
 		CreateInvoiceDetailsFromPoLinesValid
 		    restricted
			when (not InvoiceDetailExists
			and	  !Closed.Yes
			and   PayablesInvoice entered
			and	  (PayablesInvoice.IsUpdateable
			or     PayablesInvoice.Status.Amended
			or    (PayablesInvoice.MatchPrepayment
			and    PayablesInvoice.MatchStatus < 2)))

		CreateCreditMemoCostAdjustmentValid
 		    restricted
			when (ItemType.Service
			and   PayablesInvoice entered
			and   PayablesInvoice.InvoiceType.CreditMemo
			and	  PayablesInvoice.IsUpdateable)

		CreateCreditMemoQuantityAdjustmentValid
 		    restricted
			when (CreateCreditMemoCostAdjustmentValid
			and   ServiceCode.Quantity)

		CreateDetailsFromAllRemainingLinesEnabled
		    restricted
			when (not InvoiceDetailExists and MatchPurchaseOrderInvoice entered)

		HasCancellations
		    restricted
			when (CancelQuantity entered)  

        HasComments
            restricted
            when (PurchaseOrderLineComment set exists)
		
		SupplierCommentsExist
		    restricted
			when (PurchaseOrderLineCommentDisplayOnPortalRel exists)
		
		HasSourceRecord
		    restricted
			when (first PurchaseOrderLineSourcesRel exists)

		HasActivityThroughPayablesInvoiceDetail
		    restricted
			when (PayablesInvoiceDetailsByVendorRel exists)
		
		HasActivityThroughPurchaseOrderReceiptLine
		    restricted	
			when (PurchaseOrderReceiptLinesForActivityRel exists)
			
		InvoiceReceivedNotMatched
		    restricted
			when (true) 
		
		FromRequisitions
		    restricted
			when (LineSourcesFromRQRel exists)
			
		CapitatedRequisitionSource
			restricted 
			when (FromRequisitions
			and   first LineSourcesFromRQRel.RequisitionRel.ForCapitatedProcedure)
		
		HasCommitments
		    restricted
			when (CommittedPurchaseOrderLineDistributionsRel exists)
			
		CommittedRequisitionLineSourcesExist
		    restricted
			when (FromRequisitions
			and  (RQGeneralLedgerSystemCodeRel.EncumbranceOption.Track
			or    RQGeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit))
		
		PurchaseOrderLineEligibleToBeCancelled
		    restricted
			when ((LocalDeletePurchaseOrderLineSourceFlag or Released) 
            and    Closed.No
            and    CanBeCancelled)
			
		CanBeCancelled
			restricted
			when (DerivedDefaultServiceCancelAmount > ServiceCancelAmount
			or   (not IsServiceCodeAmount and DerivedQuantityAvailableToCancel > CancelQuantity))

		IsServiceCodeAmount
		    restricted
			when (ServiceCode.Amount)

		IsServiceCodeQuantity
		    restricted
			when (ServiceCode.Quantity)
		
		IsVendorBuyUOMMatched
		    restricted
			when (VendorPriceUOM = EnteredBuyUOM)	
			
		HasBudgetErrors
		    restricted
			when (DistributionsWithBudgetErrorRel exists)
			
		HasDefaultAssetTemplate
		    restricted
			when (PurchaseOrder.DefaultAssetTemplate entered
			and NonStockOrSpecialOrService)	

		IsLineToProcess
		    restricted
		    when (Released and Closed.No)








			
		IsLineProcessed
			restricted
			when (ReceivedQuantity > 0
			or    MatchedQuantity  > 0
			or    MatchedAmount    > 0)
			
		UnitCostOrQuantityDifferencesWithRequisitions
			restricted
			when (PurchaseOrderLineSourceUnitCostDifferenceRel exists)
			
		RecallProductItemForItemHardErrorExists
			restricted
			when (RecallProductItemForItemHardErrorRel exists)
			
		RecallProductItemForItemWarningExists
			restricted
			when (RecallProductItemForItemWarningRel exists)
		
		RecallProductItemForVendorItemHardErrorExists
			restricted
			when (RecallProductItemForVendorItemHardErrorRel exists)	
			
        RecallProductItemForVendorItemWarningExists
			restricted
			when (RecallProductItemForVendorItemWarningRel exists)
        
        HasProcedureInformationHeaderDefault
        	restricted
            when (PurchaseOrder.DefaultProcedureInformation 			entered
		    or    PurchaseOrder.PatientProcedure.VisitNumber 			entered
		    or    PurchaseOrder.PatientProcedure.PatientID 				entered
		    or    PurchaseOrder.PatientProcedure.CaseNumber				entered 
		    or    PurchaseOrder.PatientProcedure.PatientLastName		entered
		    or    PurchaseOrder.PatientProcedure.PatientFirstName		entered
		    or    PurchaseOrder.PatientProcedure.PatientMiddleName		entered
		    or    PurchaseOrder.PatientProcedure.Birthdate				entered
		    or    PurchaseOrder.PatientProcedure.Gender					entered
		    or    PurchaseOrder.PatientProcedure.SocialSecurityNumber	entered)

        HasLinePatientProcedureInfo
        	restricted
            when (TransientVisitNumber 			entered
            or 	  TransientPatientID 			entered
            or 	  TransientCaseNumber 			entered
            or 	  TransientProcedure 			entered
            or 	  TransientProcedureModifier 	entered
            or 	  TransientProcedureDate 		entered
            or 	  TransientPhysicianName 		entered
            or 	  TransientNurseCoordinator 	entered
            or 	  TransientPatientLastName 		entered
	        or 	  TransientPatientFirstName 	entered
	        or 	  TransientPatientMiddleName 	entered
	        or 	  TransientBirthdate 			entered
	        or 	  TransientGender 				entered
	        or 	  TransientSocialSecurityNumber entered
            or 	  TransientSalesRepresentative 	entered
            or 	  TransientOrderNumber 			entered
            or 	  TransientRequestor 			entered
            or 	  TransientLot 					entered
	        or 	  TransientSerialNumber 		entered
	        or 	  TransientUserDefinedField1 	entered
	        or 	  TransientUserDefinedField2 	entered)
        
       	ProcedureInformationChanged
       		restricted
			when (PatientProcedure entered
			and  (TransientVisitNumber 			changed
	        or	  TransientPatientID 			changed
	        or	  TransientCaseNumber 			changed
	        or	  TransientProcedure 			changed
	        or	  TransientProcedureModifier 	changed
	        or	  TransientProcedureDate 		changed
	        or	  TransientPhysicianName		changed
	        or	  TransientNurseCoordinator 	changed
	       	or	  TransientPatientLastName 		changed
	        or	  TransientPatientFirstName 	changed
	        or	  TransientPatientMiddleName 	changed
	        or	  TransientBirthdate 			changed
	        or	  TransientGender 				changed
	        or	  TransientSocialSecurityNumber changed
	       	or	  TransientSalesRepresentative	changed
	        or	  TransientOrderNumber 			changed
	        or	  TransientRequestor 			changed
	       	or	  TransientLot 					changed
	        or	  TransientSerialNumber 		changed
	        or	  TransientUserDefinedField1 	changed
	        or	  TransientUserDefinedField2	changed))

        DisplayOfProcedureInfo
        	restricted
            when (PurchaseOrder.DisplayOfProcedureInfo)
            
		CombineLinesWithDifferentContractNotAllowed
			restricted

			when ((PurchaseFromLocationRel exists
			and	   not PurchaseFromLocationRel.MixContractsOnPurchaseOrder)
			or 	  (PurchaseFromLocationRel not exists
			and    not PurchasingVendorRel.MixContractsOnPurchaseOrder))
			
		CancelledStatus
			when ((CancelQuantity entered or ServiceCancelAmount entered)
			and ReturnQuantity not entered)
			
		ReturnedStatus
			when ((CancelQuantity not entered or ServiceCancelAmount not entered)
			and ReturnQuantity entered
			and !CancelledOrReturnedStatus)
			
		CancelledOrReturnedStatus
			when ((CancelQuantity entered or ServiceCancelAmount entered)
			and ReturnQuantity entered)
			
		AssetTemplateExists
			when (PurchaseOrderLineDistributionsWithAssetTemplateRel exists)


		IsFullyReceived
			restricted
			when ((ReceivedQuantity + WriteOffQuantity) >= QuantityToProcess)

		ReceiptRequired
			restricted
			when (not (ItemType.Service or IsDropship))
		
		AllowZeroCostInvoice			
			restricted
			when (Vendor.AllowZeroCostInvoice.Yes
			or   (Vendor.AllowZeroCostInvoice not entered
			and   Company.MatchCompany.AllowZeroCostInvoice))
		
		ReceiptImportHeaderExists
			restricted
			when (ReceiptImportHeaderRel exists)
			
		
		ReceiptImportLineExists
			restricted
			when (ReceiptImportLineRel exists)
		
		MatchedRequired
			restricted
			when (not CostOption.NoCharge
			or AllowZeroCostInvoice)		


		
		InventoriedOrNonstock
			restricted
			when (ItemType.Inventoried
			or    ItemType.NonStock)
		
		PatientProcedureEntered
			restricted
			when (PatientProcedure entered)
		
		IsOriginalWithoutSubstitute
			restricted
			when (OriginalLineNumber not entered)
		
		IsOriginalWithSubstitute
			restricted
			when (PurchaseOrderLine entered		
			and	  OriginalLineNumber entered	
			and	  PurchaseOrderLine = OriginalLineNumber)

		HasCatchWeightIDM
			when (not Item.CatchWeightCode.NotCatchWeight)
						
		NoCatchWeightIDM
			when (Item.CatchWeightCode.NotCatchWeight
			and   not PurchaseOrderLine.EnteredBuyUOM = Item.StockUOM)
			
		NotCatchWeightAndHasAdjustments
			restricted
			when (Item.CatchWeightCode.NotCatchWeight
			and	  AdjustmentLinesRel exists)
			
		CatchWeightAndHasAdjustments
			restricted
			when (not Item.CatchWeightCode.NotCatchWeight
			and	  AdjustmentLinesRel exists)
			
		HasReceivingBuyerMessages
			restricted
			when (ReceivingBuyerMessagesRel exists)
		
		HasBuyerMessages
			restricted
			when (BuyerMessagesRel exists)
			
		HasUnitCost 
			restricted
			when (VendorBuyUnitCost entered)
		
		HasUOM
			restricted
			when (EnteredBuyUOM entered)

		InventoriedOrNonstockHasItemLocation
			restricted
			when (InventoriedOrNonstock
			and   ItemLocationRel exists)
			
		HasPOReceiptLine
			restricted
			when (first POHeaderPOReceiptLineRel exists)
		HasPOAndLineAddOnCharge
			restricted
			when (first POHeaderPOLAOCRel exists)
		HasPayablesInvoiceDetail
			restricted
			when (first POHeaderPayablesInvoiceDetailRel exists)			
		HasAcknowledgementMessages
			restricted
			when (PurchaseOrderAcknowledgementMessageRel exists)

		POAcknowledgementMessagesNeedingAction
			restricted
			when (POAcknowledgementMessagesNeedingActionRel exists)
		POAcknowledgementMessagesAreUpdateable
			when (POAcknowledgementMessagesAreUpdateableRel exists)
		HasContractLine
			when (ContractLineRel exists)
		ContractDiffFromWorkingContract
			when (ContractRel.Contract != ContractRel.WorkingContractID)
		AcknowledgementCostSearch
			when (POAcknowledgementCostMessageDifferenceRel exists)
		AcknowledgementUOMSearch
			when (POAcknowledgementUOMMessageDifferenceRel exists)
		AcknowledgementQuantitySearch
			when (POAcknowledgementQuantityMessageDifferenceRel exists)
		AcknowledgementVendorItemSearch
			when (POAcknowledgementVendorItemMessageRel exists)
		AcknowledgementRejectedSearch
			when (POAcknowledgementRejectedMessageRel exists)
		AcknowledgementDeliveryDateSearch
			when (POAcknowledgementDeliveryDateMessageRel exists)
		AcknowledgementItemSubstituteSearch
			when (POAcknowledgementItemSubstituteMessageRel exists)
		AcknowledgementCostQtySearch
			when (POAcknowledgementCostMessageDifferenceRel exists
			or    POAcknowledgementQuantityMessageDifferenceRel exists)
		AcknowledgementMyVendorsSearch
			when (BuyerVendorsRel exists
			or    BuyerVendorsBlankPurchaseFromRel exists)
		AcknowledgementOverAmountSearch
			when (POAcknowledgementMessageEDICostGreaterRel exists)
		AcknowledgementMyTypesSearch
			when ((BuyerSearchRel.SearchByCost
			and    POAcknowledgementCostMessageDifferenceRel exists)
			or    (BuyerSearchRel.SearchByQuantity
			and    POAcknowledgementQuantityMessageDifferenceRel exists)
			or    (BuyerSearchRel.SearchByUOM
			and    POAcknowledgementUOMMessageDifferenceRel exists)
			or    (BuyerSearchRel.SearchByVendorItem
			and    POAcknowledgementVendorItemMessageRel exists)
			or    (BuyerSearchRel.SearchByRejectedItem
			and    POAcknowledgementRejectedMessageRel exists)
			or    (BuyerSearchRel.SearchByDeliveryDate
			and    POAcknowledgementDeliveryDateMessageRel exists)
			or    (BuyerSearchRel.SearchByItemSubstitute
			and    POAcknowledgementItemSubstituteMessageRel exists)
			or     AcknowledgementNoSearchTypesChosen)
		AcknowledgementNoSearchTypesChosen
			when  (!BuyerSearchRel.SearchByCost
			and    !BuyerSearchRel.SearchByQuantity
			and    !BuyerSearchRel.SearchByUOM
			and    !BuyerSearchRel.SearchByVendorItem
			and    !BuyerSearchRel.SearchByRejectedItem
			and    !BuyerSearchRel.SearchByDeliveryDate
			and    !BuyerSearchRel.SearchByItemSubstitute)
		MultipleAcknowledgementMessages
			when (AcknowledgementMessageCount > 1)
		SingleAcknowledgementMessage
			when (AcknowledgementMessageCount = 1)
		HasAcknowledgementMessageAlert
			when (POAcknowledgementRejectedMessageRel exists
			or    POAcknowledgementDeliveryDateMessageRel exists
			or    POAcknowledgementItemSubstituteMessageRel exists)
		HasAcknowledgementCommentsAlert
			when (AcknowledgementPurchaseOrderLineCommentRel exists)
		CanAddAcknowledgementComments
			when (!AcknowledgementPurchaseOrderLineCommentRel exists)
		HasItemUOMConversionAlert
			when ((ItemType.Inventoried or ItemType.NonStock)
			and   EnteredBuyUOMMultiplier > 1)
		IsAribaEnabled
			restricted
			when (ProcurementGroupRel.AribaEnabled)	
		
		IsCatchWeightItem
			restricted
			when (InventoriedOrNonstock
			and  (Item.CatchWeightCode.AllTransactionsRequireBoth
			or 	  Item.CatchWeightCode.ReceiptRequiresBoth))
			
		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)
			
		IsValidForPrinting
			restricted
			when  (PurchaseOrder.RevisionsInclude.RevisionsComplete 
			or    (PurchaseOrder.RevisionsInclude.RevisionsOnly and (Revised or IDMReprintStatus.ForReprint))
			or   ((PurchaseOrder.RevisionsInclude.Reissue or PurchaseOrder.PurchaseOrderRevision not entered) and not LineFullyCancelled))

		ReferencedContractHasHeaderCommitments
			restricted
			when (Contract entered
			and   Contract.AllowReferenceOfItemsNotOnContract
			and   Contract.UseHeaderCommitments)
			
		InventoriedOrNonStockAndCatchWeightAndHasAdjustments
			restricted
			when (InventoriedOrNonstock
			and   IsCatchWeightItem
			and	  AdjustmentsExist)

		DisplayRevision
			when (DerivedBeforeAndAfterRevision entered)

		DisplayLineItemCommentSection
			when (InventoriedOrNonstock
			and   ItemCommentToPrintRel exists)
			
		DisplayLineAddOnChargeSection
			when (PrintablePurchaseOrderAndLineAddOnChargesForALineRel exists)
			
		DisplayLineCommentSection
			when (PrintOnPurchaseOrderLineCommentsRel exists)
		
		DisplayPatientProcedureSection
			when (PrintBillOnlyDetailsRel exists)
						
		IsOnHold
			restricted
			when (TemporaryHold.SentForApproval)

		ServiceQuantityNoChargeIsCancelled
			restricted
			when	(PurchaseOrder.PurchaseOrderLifeCycleState.Canceled
			and		 ItemType.Service
			and		 CostOption.NoCharge
			and		 PurchaseOrderLineLifeCycleState.Closed)


		FrontEndSplitsEnabled
			restricted
			when(GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FrontEndSplits)

		AllowFrontEndSplit
			restricted
			when (PurchaseOrder.IsUpdateAllowed
			and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FrontEndSplits
			and	!GeneralLedgerCompanyRel.FinanceEnterpriseGroup.UseFundedAmounts)

		HasFrontEndSplitDistributions
			restricted
			when (PurchaseOrder.IsUpdateAllowed
			and DistributionsCreatedByFESRel exists)
			
		UnitOfMeasureRequired
			restricted
			when ((Company.RequireUnitOfMeasure
			and not TransientBypassUnitCostValidation)
			or (InventoriedOrNonstock
			and Company.RequireUnitOfMeasure)
			or (not TransientBypassUnitCostValidation
			and (not ItemType.Service
			or ContractLine not entered)))
								

		QuantityRequired
			restricted
			when (!PurchaseOrder.FromBlanketOrTemplate 
			and    ServiceCode.Amount)
			
		ConsignmentRequired
			restricted
			when (PurchaseOrderLinesWithConsignCodeRel exists)
			
		ServiceCodeRequired
			restricted
			when (ItemType.Service
			and   EnteredContractLine not entered)
			
		MSDSRequiredCondition
			restricted
			when (InventoriedOrNonstockHasItemLocation
			and   Item.MSDSRequired)
			
		EnteredBuyUOMRequired
			restricted
			when (not TransientBypassUnitCostValidation
			and  (Company.RequireUnitOfMeasure
			or	  not ItemType.Service 
			or    EnteredContractLine not entered))
		
		EarlyDeliveryDateRequired
			restricted
			when (not ItemType.Service
			and   PurchaseOrder.DefaultDeliveryDate not entered
			and   PurchaseOrder.PurchasingVendorRel.LeadtimeDays not entered
			and   PurchaseOrder.PurchaseFromLocationRel.LeadtimeDays not entered
			and   DerivedLeadTimeDays not entered)
			
		TaxCodeRequired
			restricted
			when  (Taxable
			and (((TaxEntityValue.ThirdParty.InforTax and IsHSNSACCodeEnabled)

			and  ((PurchaseOrder.PurchaseFromLocation entered

			and   (PurchaseOrder.PurchaseFromLocation.TaxRegistrationType.UnRegistered
			or    (PurchaseOrder.PurchaseFromLocation.TaxRegistrationType.CompositeDealer and HSNSACCode.NoTaxTaxCode not entered)
			or    (PurchaseOrder.PurchaseFromLocation.TaxRegistrationType.SpecialEconomicZone and HSNSACCode.ImportTaxCode not entered)

			or  ((not PurchaseOrder.PurchaseFromLocation.TaxRegistrationType.UnRegistered and not PurchaseOrder.PurchaseFromLocation.TaxRegistrationType.CompositeDealer and not PurchaseOrder.PurchaseFromLocation.TaxRegistrationType.SpecialEconomicZone)
			and ((ShipToLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode not entered or PurchaseOrder.PurchaseFromLocation.CurrentAddressRel.PostalAddress.Country.IsoCountryCode not entered)
			or    not PurchaseOrder.PurchaseFromLocation.TaxRegistrationType.Registered
			or    ShipToLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode != "IN" //Iso Country Code of Country on Ship To Location not "IN"
			or  ((PurchaseOrder.PurchaseFromLocation.CurrentAddressRel.PostalAddress.Country.IsoCountryCode != "IN" and HSNSACCode.ImportTaxCode not entered) //Iso Country Code of Country on Purchase From Location not "IN" and no Import Tax Code on HSNSAC Code
			or   (PurchaseOrder.PurchaseFromLocation.CurrentAddressRel.PostalAddress.Country.IsoCountryCode = "IN"

			and ((PurchaseOrder.PurchaseFromLocation.CurrentAddressRel.PostalAddress.StateProvince not entered or ShipToLocation.PostalAddressForPurchaseOrder.StateProvince not entered)

			or   (PurchaseOrder.PurchaseFromLocation.CurrentAddressRel.PostalAddress.StateProvince entered and ShipToLocation.PostalAddressForPurchaseOrder.StateProvince entered and HSNSACCode.IntrastateTaxCode not entered))))))))

			or (PurchaseOrder.PurchaseFromLocation not entered

			and (PurchaseOrder.Vendor.TaxRegistrationType.UnRegistered
			or (PurchaseOrder.Vendor.TaxRegistrationType.CompositeDealer and HSNSACCode.NoTaxTaxCode not entered)
			or (PurchaseOrder.Vendor.TaxRegistrationType.SpecialEconomicZone and HSNSACCode.ImportTaxCode not entered)

			or ((not PurchaseOrder.Vendor.TaxRegistrationType.UnRegistered and not PurchaseOrder.Vendor.TaxRegistrationType.CompositeDealer and not PurchaseOrder.Vendor.TaxRegistrationType.SpecialEconomicZone)
			and ((ShipToLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode not entered or PurchaseOrder.Vendor.CurrentAddressRel.PostalAddress.Country.IsoCountryCode not entered)
			or not PurchaseOrder.Vendor.TaxRegistrationType.Registered
			or ShipToLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode != "IN" //Iso Country Code of Country on Ship To Location not "IN"
			or ((PurchaseOrder.Vendor.CurrentAddressRel.PostalAddress.Country.IsoCountryCode != "IN" and HSNSACCode.ImportTaxCode not entered) //Iso Country Code of Country on Vendor not "IN" and no Import Tax Code on HSNSAC Code
			or (PurchaseOrder.Vendor.CurrentAddressRel.PostalAddress.Country.IsoCountryCode = "IN"

			and ((PurchaseOrder.Vendor.CurrentAddressRel.PostalAddress.StateProvince not entered or ShipToLocation.PostalAddressForPurchaseOrder.StateProvince not entered)

			or (PurchaseOrder.Vendor.CurrentAddressRel.PostalAddress.StateProvince entered and ShipToLocation.PostalAddressForPurchaseOrder.StateProvince entered and HSNSACCode.IntrastateTaxCode not entered))))))))))
			or ((not TaxEntityValue.ThirdParty.InforTax or not IsHSNSACCodeEnabled)

			and ((not InventoriedOrNonstock or (ItemLocationRel.PurchaseTaxCode not entered and Item.PurchaseTaxCode not entered))
			and PurchaseOrder.TaxCode not entered 
			and ShipToLocation.PurchaseOrderTaxCode not entered 
			and EnteredContractLine.TaxCode not entered))))
						
		DescriptionRequired
			restricted
			when (not InventoriedOrNonstock
			and   EnteredContractLine not entered)
		
		IsDisplayOnlyCommodityCode
			restricted
			when (InventoriedOrNonstock
			and   Item exists
			and   Item.CommodityCode entered)

		SingleCallToOneSource
			restricted
			when (TaxEntityUsesSabrix
			and	  TaxEntityRel.DelayTaxProcessing
			and	  PurchaseOrder.DerivedNumberOfTaxLineItems <= 200)

		SingleCallToVertex  
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries
			and   TaxEntityRel.VertexCallMethod.ByTransaction
			and	  PurchaseOrder.DerivedNumberOfTaxLineItems <= 200)

		VertexDelayTaxCall
			when (!PerformingRelease 
			and   TaxEntityRel.ThirdParty.VertexOSeries
			and   TaxEntityRel.TaxAttributeCode entered)

		HasItemLocationStockUOM
			when (InventoriedOrNonstock
			and	  ItemLocationRel.HasItemLocationStockUOM)


		ItemIsInventoryOrNonstock
			restricted
			when (ItemType.Inventoried
			or	  ItemType.NonStock)

		ItemIsSpecial
			restricted
			when (ItemType.Special)

		HasSpecialHandlingCode
			when (SpecialHandlingCode entered)

		HasSpecialHandlingInstructions
			restricted
			when (SpecialHandlingInstructions entered)

		HasHandlingInstructionsToDisplay
			restricted
			when (HasSpecialHandlingCode
			and   HasSpecialHandlingInstructions)

		ItemIsBackordered
			when (not IsService
			and	  VendorBackorderDetailsRel exists)

        ItemIsBackorderedForOpenPOLine
			when (not IsService
			and	 Closed.No
            and (VendorBackorderDetailsForPORel exists
            or VendorBackorderDetailsRel exists))

		POADateEarlierThanPODate
			restricted
			when (EarlyDeliveryDate < PurchaseOrder.PurchaseOrderDate)

    Relations
		VendorBackorderDetailsRel
			one-to-many relation to VendorBackorderDetails
            Field Mapping uses ByVendorItemAvailabilityDate
				related.ProcurementGroup 			= ProcurementGroup
				related.Vendor 						= Vendor
				related.VendorItem 					= VendorItem
				related.Item 						= Item
			Instance Selection
				where (related.IsOpen
				and    related.HasValidDate)

		VendorBackorderDetailsForPORel
			one-to-many relation to VendorBackorderDetails
            Field Mapping uses ByPurchaseOrderLine
				related.ProcurementGroup 			= ProcurementGroup
                related.PurchasingCompany			= Company
                related.PurchaseOrder				= PurchaseOrder
                related.PurchaseOrderLine   		= PurchaseOrderLine
			Instance Selection
				where (related.IsOpen)

    	ItemCommentRel
    		one-to-many relation to ItemComment
    		Field Mapping uses symbolic key
    			related.ItemGroup			= Company.ProcurementGroup
    			related.Item				= Item
    			
    	ItemCommentToPrintRel
    		one-to-many relation to ItemComment
    		Field Mapping uses symbolic key
    			related.ItemGroup			= Company.ProcurementGroup
    			related.Item				= Item
    		Instance Selection
    			where (related.IsValidForPrinting)
    
		ProcedureForThisPurchaseOrderRel 
			one-to-many relation to PurchaseOrderLine 
			Field Mapping uses symbolic key 
				related.Company				= Company 
				related.PurchaseOrder     	= PurchaseOrder
			Instance Selection 
				where (related.IsACapitatedProcedure
				and    related.ContractLine				= CapitatedProcedureLine)		

		ContractCapitatedComponentGroupRel 
			one-to-one relation to ContractCapitatedComponentGroup 
			Field Mapping uses symbolic key 
				related.ContractGroup 					= Company.ProcurementGroup 
				related.Contract                    	= Contract 
				related.ContractLine                    = CapitatedProcedureLine
				related.ContractCapitatedComponentGroup = CapitatedComponentGroup

    	ComponentForFirstProcedureRel 
			one-to-many relation to PurchaseOrderLine 
			Field Mapping uses ByPurchaseOrderContract 
    			related.Company				= Company
    			related.PurchaseOrder		= PurchaseOrder	
				related.Contract            = FirstProcedureContract
			Instance Selection 
				where (related.CapitatedProcedureLine  = FirstProcedureLine
				and    related.CapitatedProcedureLevel = 0)		
		
		PrintOnPurchaseOrderLine
    		one-to-many relation to PurchaseOrderLine
    		Field Mapping uses symbolic key
    			related.Company				= Company
    			related.PurchaseOrder		= PurchaseOrder
    			related.PurchaseOrderLine	= PurchaseOrderLine
    			
    	PrintBillOnlyDetailsRel
    		one-to-many relation to PurchaseOrderLine
    		Field Mapping uses symbolic key
    			related.Company				= Company
    			related.PurchaseOrder		= PurchaseOrder
    			related.PurchaseOrderLine	= PurchaseOrderLine
    		Instance Selection
    			where (related.PatientProcedure.HasPatientProcedureInfo)
    			    
		ProcurementGroupRel
			one-to-one relation to ProcurementGroup			
			Field Mapping uses symbolic key
				related.ProcurementGroup			= Company.ProcurementGroup
    
    	POHeaderPOReceiptLineRel
    		one-to-many relation to PurchaseOrderReceiptLine
    		Field Mapping uses Set5
    			related.Company		    	= Company
				related.PurchaseOrder       = PurchaseOrder
		POHeaderPOLAOCRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company             = Company
                related.PurchaseOrder       = PurchaseOrder
		POHeaderPayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail	
			Field Mapping uses ByPurchaseOrderLine
				related.Company             = Company
                related.PurchaseOrder       = PurchaseOrder
                                
    	OriginalItemRel
    		one-to-one relation to Item
    		Field Mapping uses symbolic key
    			related.ItemGroup					= Company.ProcurementGroup
    			related.Item						= OriginalItem
    	PurchaseOrderAcknowledgementMessageRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByRevision
    			related.Company                     = Company
    			related.PurchaseOrder               = PurchaseOrder
    		Instance Selection
    			where (related.PurchaseOrderLine     = PurchaseOrderLine)
    	
    	POAcknowledgementMessagesNeedingActionRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByPurchaseOrderLine
    			related.Company                     	= Company
    			related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
    		Instance Selection
    			where (related.HasAcknowledgementMessageNeedingAction	= true)

    	POAcknowledgementMessagesAreUpdateableRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByPurchaseOrderLine
    			related.Company                     	= Company
    			related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
    		Instance Selection
    			where (related.MessageNumber			= 20
				or     related.MessageNumber			= 21
    			or     related.MessageNumber			= 16
				or     related.MessageNumber			= 22
				or     related.MessageNumber			= 53
				or     related.MessageNumber			= 55
    			or     related.MessageNumber			= 18
				or     related.MessageNumber			= 19
				or     related.MessageNumber			= 50)
    	POAcknowledgementMessageRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByPurchaseOrderLine
    			related.Company                     = Company
    			related.PurchaseOrder               = PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
				related.PurchaseOrderRevision		= PurchaseOrder.PurchaseOrderRevision

    	POAcknowledgementCostMessageDifferenceRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByPurchaseOrderLine
    			related.Company                     	= Company
    			related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
    		Instance Selection
    			where (related.MessageNumber			= 20
				or     related.MessageNumber			= 21)

    	POAcknowledgementMessageEDICostGreaterRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByPurchaseOrderLine
    			related.Company                     	= Company
    			related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
    		Instance Selection
    			where ((related.MessageNumber			= 20
				or     related.MessageNumber			= 21)
				and    related.HasAmountBeyondSearchAmount)

    	POAcknowledgementUOMMessageDifferenceRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByPurchaseOrderLine
    			related.Company                     	= Company
    			related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
    		Instance Selection
    			where (related.MessageNumber			= 16
				or     related.MessageNumber			= 22
				or     related.MessageNumber			= 53
				or     related.MessageNumber			= 55)

    	POAcknowledgementQuantityMessageDifferenceRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByPurchaseOrderLine
    			related.Company                     	= Company
    			related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
    		Instance Selection
    			where (related.MessageNumber			= 18
				or     related.MessageNumber			= 19
				or     related.MessageNumber			= 50)

    	POAcknowledgementVendorItemMessageRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByPurchaseOrderLine
    			related.Company                     	= Company
    			related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
    		Instance Selection
    			where (related.MessageNumber			= 15
				or     related.MessageNumber			= 41
				or     related.MessageNumber			= 47)

    	POAcknowledgementRejectedMessageRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByPurchaseOrderLine
    			related.Company                     	= Company
    			related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
    		Instance Selection
    			where (related.MessageNumber			= 36)

    	POAcknowledgementDeliveryDateMessageRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByPurchaseOrderLine
    			related.Company                     	= Company
    			related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
    		Instance Selection
    			where (related.MessageNumber			= 44
				or     related.MessageNumber			= 58)

    	POAcknowledgementItemSubstituteMessageRel
    		one-to-many relation to PurchaseOrderAcknowledgementMessage
    		Field Mapping uses ByPurchaseOrderLine
    			related.Company                     	= Company
    			related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
    		Instance Selection
    			where (related.MessageNumber			= 37
				or     related.MessageNumber			= 54)

		PurchaseOrderRevisionRel
			one-to-one relation to PurchaseOrderRevision
			Field Mapping uses symbolic key
				related.Company        			= Company
				related.PurchaseOrder  			= PurchaseOrder
				related.PurchaseOrderRevision 	= PurchaseOrder.PurchaseOrderRevision

    	AcknowledgementPurchaseOrderLineCommentRel
    		one-to-many relation to PurchaseOrderLineComment
    		Field Mapping uses ByCommentType
    			related.Company				 = Company
                related.PurchaseOrder		 = PurchaseOrder
                related.PurchaseOrderLine	 = PurchaseOrderLine
        	Instance Selection
        		where (related.CommentType.Acknowledgement)

		EmployeeRel
			one-to-one relation to Employee
			Field Mapping uses symbolic key
				related.HROrganization		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.HROrganization
				related.Employee			= Processor

		BuyerVendorsRel
			one-to-one relation to BuyerVendor
			Field Mapping uses symbolic key
				related.HROrganization						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.HROrganization
        	   	related.Buyer								= actor.agent(Employee).Employee
				related.VendorGroup							= Company.VendorGroup
				related.BuyerVendor.Vendor					= Vendor
				related.BuyerVendor.PurchaseFromLocation	= PurchaseFromLocation

		BuyerVendorsBlankPurchaseFromRel
			one-to-one relation to BuyerVendor
			Field Mapping uses symbolic key
				related.HROrganization						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.HROrganization
        	   	related.Buyer								= actor.agent(Employee).Employee
				related.VendorGroup							= Company.VendorGroup
				related.BuyerVendor.Vendor					= Vendor
				related.BuyerVendor.PurchaseFromLocation	= blank

		BuyerSearchRel
			one-to-one relation to Buyer
			Field Mapping uses symbolic key
				related.HROrganization						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.HROrganization
        	   	related.Buyer								= actor.agent(Employee).Employee

		ValidSubstituteItemsRel
    		one-to-many relation to AssociatedItem
    		Field Mapping uses ByPriorityAndContract
    			related.ItemGroup 		= Item.ItemGroup
    			related.Item			= Item
    		Instance Selection
				where (related.IsWithinEffectiveDate
				and	  (related.IsItemMasterSubstitute
				or    (related.ContractLineForSubstitution
				and   related.DerivedValidContractParticipant))
				and   (related.IsNotLocationSpecific
				or	  (related.IsSubstituteForCompanyOnly
				and	  related.AssociatedItem.RelatedCompany 		= Company)
				or    (related.AssociatedItem.RelatedCompany 		= Company
				and   related.AssociatedItem.RelatedLocation		= ShipToLocation)))

    	OtherItemSubstitutesRel
    		one-to-many relation to AssociatedItem
    		Field Mapping uses Set3
    			related.ItemGroup					= Item.ItemGroup
    			related.AssociatedItem.RelatedItem 	= Item
    		Instance Selection
    			where (related.IsSubstitute
    			and    current corporate date >= related.EffectiveDate
    			and   (related.ExpirationDate not entered 
    			or     current corporate date <= related.ExpirationDate))
    
		PriorityAssociatedItemRel
    		one-to-many relation to AssociatedItem
    		Field Mapping uses ByPriority
    			related.ItemGroup 		= Item.ItemGroup
    			related.Item			= Item
    		Instance Selection
    			where (current corporate date >= related.EffectiveDate
				and   (related.ExpirationDate not entered
				or     current corporate date <= related.ExpirationDate))

    	SubstituteItemByPriorityRel
    		one-to-many relation to AssociatedItem
    		Field Mapping uses ByPriorityAndContract
    			related.ItemGroup 		= Item.ItemGroup
    			related.Item			= Item
    		Instance Selection
				where (((related.IsInPurchaseOrderLocation 	and  related.IsItemMasterSubstitute)
				or       related.ContractLineForSubstitution)
    			and      related.IsNotLocationSpecific
				and      related.IsWithinEffectiveDate)

		SubstituteItemByPriorityNoLocationRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriorityAndContract
				related.ItemGroup 		= Item.ItemGroup
				related.Item			= Item
			Instance Selection
				where ((related.IsItemMasterSubstitute
				or      related.ContractLineForSubstitution)
				and     related.IsNotLocationSpecific
				and     related.IsWithinEffectiveDate)

     	SubstituteItemsWithLocationAndPriorityRel
    		one-to-many relation to AssociatedItem
    		Field Mapping uses ByPriorityAndContract
    			related.ItemGroup 									= Item.ItemGroup
    			related.Item										= Item
    		Instance Selection
    			where (related.AssociatedItem.RelatedCompany		= Company
    			and    related.AssociatedItem.RelatedLocation		= ShipToLocation
				and    related.IsWithinEffectiveDate
				and    (related.IsItemMasterSubstitute
				or      related.ContractLineForSubstitution))

		SubstituteItemByPriorityWithCompanyOnlyRel
			one-to-many relation to AssociatedItem
			Field Mapping uses ByPriorityAndContract
				related.ItemGroup 		= Item.ItemGroup
				related.Item			= Item
			Instance Selection
				where (related.AssociatedItem.RelatedCompany		= Company
				and    related.IsSubstituteForCompanyOnly
				and    related.IsWithinEffectiveDate
				and    (related.IsItemMasterSubstitute
				or      related.ContractLineForSubstitution))
				
        MatchInvoiceMessageRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses symbolic key
                related.Company				= Company
                related.PayablesInvoice    	= LMatchPOInv
                related.PurchaseOrder		= PurchaseOrder
            Instance Selection
                where (related.Status <= 2)

        MatchInvoiceMessageForPayablesInvoiceRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses Set5
                related.Company         = Company
                related.PayablesInvoice = RNILocalFields.LPayablesInvoice
            Instance Selection
                where (related.PurchaseOrder = PurchaseOrder)    
        
        POLineInvoiceMessageRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses Set1
                related.Company						= Company
                related.Vendor						= Vendor
                related.PayablesInvoice				= LocalPayablesInvoice
     			related.PurchaseOrder				= PurchaseOrder
			Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and    related.Status.Closed
				and    related.ApplicationAction.AdjustCost
				and    related.PurchaseOrderLine		= PurchaseOrderLine)
				        
        AdjustCostMessagesRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses Set1
                related.Company						= Company
                related.Vendor						= Vendor
			Instance Selection
     			where (related.PurchaseOrder		= PurchaseOrder
				and    related.PurchaseOrderLine    = PurchaseOrderLine
				and    related.MatchMessageOrigin.PoCost
				and    related.Status.Closed
				and    related.ApplicationAction.AdjustCost)
				        
        POLineDistributionForAOCRel
            one-to-many relation to PurchaseOrderLineDistribution
            Field Mapping uses symbolic key
                related.Company                                     = Company
                related.PurchaseOrder                               = PurchaseOrder
                related.PurchaseOrderLine                           = PurchaseOrderLine
                related.AddOnCharge                                    = LPurchaseOrderLineAddOnCharge

		MatchPurchaseOrderInvoiceRel
			one-to-many relation to MatchPurchaseOrderInvoice
			Field Mapping uses ByPurchaseOrder
				related.Company			= Company
				related.PurchaseOrder	= PurchaseOrder
                related.Vendor       	= Vendor
                
		LaterPOLineForAContractRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company 				= Company
				related.PurchaseOrder        	= PurchaseOrder
			Instance Selection
				where (related.Contract = LocalContract
				and    related.PurchaseOrderLine > LocalPurchaseOrderLine)

		LocalContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup	= Company.VendorGroup
				related.Contract        = LocalContract

		LocalMatchPurchaseOrderInvoiceRel
			one-to-one relation to MatchPurchaseOrderInvoice
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PurchaseOrder	= PurchaseOrder
				related.PayablesInvoice	= LocalPayablesInvoice	
				related.Vendor			= Vendor
                
        PayablesInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses Set6
				related.Company			= Company
                related.Vendor       	= Vendor
            Instance Selection
                where (related.ExternalPurchaseOrder = PurchaseOrder)
        
        PayablesInvoiceDetailsForPostDateRel
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses Set10
                related.Company                = Company
                related.PurchaseOrder        = PurchaseOrder
                related.PurchaseOrderLine    = PurchaseOrderLine
            Instance Selection
                where (related.DistributionDate    > RNILocalFields.RNIPostDate)              

        POReceiptAdjustmentAndInspectionLinesRel
            one-to-many relation to POReceiptAdjustmentAndInspectionLine
            Field Mapping uses Set2
                related.Company                        = Company
                related.PurchaseOrderReceipt        = RNILocalFields.LPurchaseOrderReceipt
                related.PurchaseOrderReceiptLine    = RNILocalFields.LPurchaseOrderReceiptLine
                related.AdjustmentInspectionDocumentType = "RA"
            Instance Selection
                where (related.DocumentDate > RNILocalFields.RNIPostDate)
                
        MatchedPurchaseOrderLineAddOnChargeRel
            one-to-many relation to PurchaseOrderAndLineAddOnCharge
            Field Mapping uses Set8
                related.Company                = Company
                related.PurchaseOrder        = PurchaseOrder
                related.ShipToLocation        = ShipToLocation
                related.MatchDetailKey        = MatchDetailKey
                related.PurchaseOrderLine    = PurchaseOrderLine
            Instance Selection
                where (!related.Canceled
                and related.LandedAddOnCharge)        

        PayablesInvoiceAOCBeyondRNIPostDateRel
            one-to-many relation to PayablesInvoiceAddOnCharge
            Field Mapping uses Set6
                related.Company                = Company
                related.PurchaseOrder        = PurchaseOrder
                related.PurchaseOrderLine    = PurchaseOrderLine
            Instance Selection
                where (related.Status = 1
                and    related.AddOnCharge = LPurchaseOrderLineAddOnCharge
                and    related.DistributionDate > RNILocalFields.RNIPostDate)
        
        PayablesInvoiceDetailsForPOLineRNIRel
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses Set10
                related.Company                = Company
                related.PurchaseOrder        = PurchaseOrder
                related.PurchaseOrderLine    = PurchaseOrderLine
            Instance Selection
                where (related.DistributionDate > RNILocalFields.RNIPostDate
                or     related.RNINonClosedLineRelMessageExists)
                
		PayablesInvoiceDetailWithDifferentUnitCostRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses Set10
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine
			Instance Selection
				where (related.MatchUnitCost != EnteredUnitCost) 
        
        PayablesInvoiceDetailWithDifferentMatchUnitCostRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses Set10
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine
			Instance Selection
				where (related.MatchUnitCost != DerivedReturnCost) 
                
		PrintOnPOContractLineCommentRel
			one-to-many relation to ContractLineComment
			Field Mapping uses ContractLine part of key
				related.ContractGroup						= Company.ProcurementGroup
				related.Contract							= Contract
				related.ContractLine                        = ContractLine
			Instance Selection
				where (related.CommentUsedFor				= "2"  
				or     related.CommentUsedFor               = "3") 

        PrintOnPOContractCommentRel
            one-to-many relation to ContractComment
            Field Mapping uses Contract part of key
                related.ContractGroup                       = Company.ProcurementGroup
                related.Contract                            = Contract
            Instance Selection
                where (related.CommentUsedFor               = "2"  
                or     related.CommentUsedFor               = "3") 

		ContractLineAOCRel 
			one-to-many relation to ContractLineAOC
			Field Mapping uses part of key
				related.ContractGroup	= Company.ProcurementGroup
				related.Contract		= Contract
				related.ContractLine	= ContractLine
			Instance Selection
				where (related.Company           = Company)
    

		ContractLineDistributionsRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup 	= Company.ProcurementGroup
				related.Contract 		= Contract
				related.ContractLine 	= ContractLine

		ReceiptImportHeaderRel
			one-to-many relation to PurchaseOrderReceiptImport
			Field Mapping uses ByPurchaseOrder
				related.Company		    			= Company
				related.PurchaseOrder               = PurchaseOrder
		
		ReceiptImportLineRel
			one-to-many relation to PurchaseOrderReceiptLineImport
			Field Mapping uses ByPurchaseOrderLine
				related.Company		    							= Company
				related.PurchaseOrder               				= PurchaseOrder
				related.PurchaseOrderReceiptLineImport.LineNumber 	= PurchaseOrderLine
						
		ReceiptImportLineWithSameItemRel
			one-to-many relation to PurchaseOrderReceiptLineImport
			Field Mapping uses symbolic key
				related.Company										= Company
				related.PurchaseOrderReceiptImport					= LocalPOReceiptImportHeader
			Instance Selection
				where (related.Item									= Item)
				
		PurchaseOrderReceiptImportRel
			one-to-one relation to PurchaseOrderReceiptImport
			Field Mapping uses ByPurchaseOrder
				related.Company		    			= Company
				related.PurchaseOrder               = PurchaseOrder
				related.PurchaseOrderReceiptImport	= LocalPOReceiptImportHeader
		
		PurchaseOrderLineDistributionErrorRel is a PurchaseOrderLineError set
			Instance Selection
				where (related.ErrorType.Distribution)
				
		PurchaseOrderLineErrorRel is a PurchaseOrderLineError set

		ContractParticipantByCompanyRel
			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup										= Company.ProcurementGroup
				related.Contract											= Contract
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Company				= Company
				and    related.ContractParticipant.ParticipantLocation.Location 			= blank
				and    related.ContractParticipant.ParticipantLocation.RequestingLocation	= blank)
		
		ContractParticipantByLocationRel
			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup										= Company.ProcurementGroup
				related.Contract											= Contract
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Company				= Company
				and    related.ContractParticipant.ParticipantLocation.Location 			= PurchaseOrderLine.ShipToLocation
				and    related.ContractParticipant.ParticipantLocation.RequestingLocation	= blank)


        ItemGTINsRel
            classic name is ICITEMGTIN
            one-to-many relation to ItemGTIN
            Field Mapping uses symbolic key
                related.ItemGroup = Item.ItemGroup
                related.Item      = Item
            Instance Selection
				where (related.Manufacturer = VendorItem.Manufacturer
				and related.ManufacturerNumber = VendorItem.ManufacturerNumber
				and related.UnitOfMeasure = EnteredBuyUOM
				and related.Active)
		
		ItemGTINRel
			one-to-many relation to ItemGTIN
			Field Mapping uses symbolic key
				related.ItemGroup	= Item.ItemGroup
				related.Item		= Item
			Instance Selection
				where (related.Active)
		
		ActiveItemGTINRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup			= Item.ItemGroup
				related.ItemGTIN			= ItemGTIN
				related.Item      			= Item
			Instance Selection
				where (related.Active)

		GTINWithMatchingVendorItemRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup			= Item.ItemGroup
                related.Manufacturer		= VendorItem.Manufacturer
                related.ManufacturerNumber	= VendorItem.ManufacturerNumber
                related.Item				= Item
                related.UnitOfMeasure		= DerivedItemGTINUOM
			Instance Selection
				where (related.Active
				and    related.UseAsDefaultPerUOM)

		NoDefaultGTINRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup			= Item.ItemGroup
				related.Manufacturer		= VendorItem.Manufacturer
				related.ManufacturerNumber	= VendorItem.ManufacturerNumber
				related.Item				= Item
				related.UnitOfMeasure		= DerivedItemGTINUOM
			Instance Selection
				where (related.Active)

		DistributionByQuantityRel
            one-to-many relation to PurchaseOrderLineDistribution
            Field Mapping uses symbolic key
                related.Company                                     = Company
                related.PurchaseOrder                                 = PurchaseOrder
                related.PurchaseOrderLine                             = PurchaseOrderLine
            Instance Selection
                where (related.DistributionByQuantity)

        DistributionByAmountRel
            one-to-many relation to PurchaseOrderLineDistribution
            Field Mapping uses symbolic key
                related.Company                                     = Company
                related.PurchaseOrder                                 = PurchaseOrder
                related.PurchaseOrderLine                             = PurchaseOrderLine
            Instance Selection
                where (related.DistributionByAmount)
    
    	PurchaseOrderLinesWithConsignCodeRel
    		one-to-many relation to PurchaseOrderLine
    		Field Mapping uses symbolic key
    			related.Company = Company
    			related.PurchaseOrder = PurchaseOrder
    		Instance Selection
    			where (related.CnCode entered)
    	
    	PreviousLineWithSameContract
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.PurchaseOrder		    = PurchaseOrder
			Instance Selection
				where (related.PurchaseOrderLine  < PurchaseOrderLine
				and    related.Contract         = Contract)
 
     	LinesWithDifferentContractRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.PurchaseOrder		    = PurchaseOrder
			Instance Selection
				where (related.Contract entered
				and		related.Contract		!= Contract)
		
		OtherLinesWithDifferentContractRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company                   = Company
				related.PurchaseOrder		      = PurchaseOrder
			Instance Selection
				where (related.PurchaseOrderLine != PurchaseOrderLine
				and    related.Contract entered
				and	   related.Contract		     != Contract)
    	
    	RecallGroupRel
    		one-to-one relation to RecallGroup
    		Field Mapping uses symbolic key
    			related.RecallGroup             = Company.ProcurementGroup
    	
    	RecallProductItemForItemHardErrorRel
    		one-to-many relation to RecallProductItem
    		Field Mapping uses ByItem
    			related.RecallGroup             = Company.ProcurementGroup
    			related.Item                    = Item
    		Instance Selection
    			where (((related.RecallNotice.Vendor = PurchaseOrder.Vendor
    			and    related.RecallNotice.Vendor entered)
    			or     related.RecallNotice.Vendor !entered)
    			and   (related.RecallNotice.Status.Pending
    			or     related.RecallNotice.Status.Active)
    			and    related.RecallNotice.RestrictPurchaseOrderCreation.HardError)
    	
    	RecallProductItemForItemWarningRel
    		one-to-many relation to RecallProductItem
    		Field Mapping uses ByItem
    			related.RecallGroup             = Company.ProcurementGroup
    			related.Item                    = Item
    		Instance Selection
    			where (((related.RecallNotice.Vendor = PurchaseOrder.Vendor
    			and    related.RecallNotice.Vendor entered)
    			or     related.RecallNotice.Vendor !entered)
    			and   (related.RecallNotice.Status.Pending
    			or     related.RecallNotice.Status.Active)
    			and    related.RecallNotice.RestrictPurchaseOrderCreation.Warning)
    	
    	RecallProductItemForVendorItemHardErrorRel
    		one-to-many relation to RecallProductItem
    		Field Mapping uses ByVendorItem
    			related.RecallGroup             = Company.ProcurementGroup
    			related.VendorItem              = VendorItem
    		Instance Selection
    			where (((related.RecallNotice.Vendor = Vendor
    			and    related.RecallNotice.Vendor entered)
    			or     related.RecallNotice.Vendor !entered)
    			and   (related.RecallNotice.Status.Pending
    			or     related.RecallNotice.Status.Active)
    			and    related.RecallNotice.RestrictPurchaseOrderCreation.HardError)
    	
    	RecallProductItemForVendorItemWarningRel
    		one-to-many relation to RecallProductItem
    		Field Mapping uses ByVendorItem
    			related.RecallGroup             = Company.ProcurementGroup
    			related.VendorItem              = VendorItem
    		Instance Selection
    			where (((related.RecallNotice.Vendor = Vendor
    			and    related.RecallNotice.Vendor entered)
    			or     related.RecallNotice.Vendor !entered)
    			and   (related.RecallNotice.Status.Pending
    			or     related.RecallNotice.Status.Active)
    			and    related.RecallNotice.RestrictPurchaseOrderCreation.Warning)
    	
    	PurchaseOrderLineSameContract	       
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.PurchaseOrder		    = PurchaseOrder
			Instance Selection
				where (related.Contract         = Contract)	
    	
    	PurchaseOrderLineSameContractNoCostDifferenceWithReq	       
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.PurchaseOrder		    = PurchaseOrder
			Instance Selection
				where (related.Contract         = Contract
				and   (!UnitCostOrQuantityDifferencesWithRequisitions
				or     related.PreviouslyReleased))	
    	
    	PurchaseOrderLineSameContractCostDifferenceWithReq	       
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company                 = Company
				related.PurchaseOrder		    = PurchaseOrder
			Instance Selection
				where (related.Contract         = Contract
				and    UnitCostOrQuantityDifferencesWithRequisitions
				and   !PreviouslyReleased)	
    	
    	RelatedItemOnContractLineRel
    		one-to-many relation to ContractLine
    		Field Mapping uses symbolic key
    			related.ContractGroup		= Company.ProcurementGroup
    			related.Contract 			= Contract
    		Instance Selection
    			where (related.ItemNumber	= Item)
    			
    	RelatedVendorItemOnContractLineRel
    		one-to-many relation to ContractLine
    		Field Mapping uses symbolic key
    			related.ContractGroup		= Company.ProcurementGroup
    			related.Contract 			= Contract
    		Instance Selection
    			where (related.VendorItem	= VendorItem)
    
    	ContractLineTaxableLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndLocationOnly 
    			related.ContractGroup						= Company.ProcurementGroup
    			related.Contract 							= Contract
				related.ContractLine        				= ContractLine 
				related.ContractAndLineLocation.Company		= Company
				related.ContractAndLineLocation.Location	= ShipToLocation
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractLineTaxCodeLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndLocationOnly 
    			related.ContractGroup						= Company.ProcurementGroup
    			related.Contract 							= Contract
				related.ContractLine        				= ContractLine 
				related.ContractAndLineLocation.Company		= Company
				related.ContractAndLineLocation.Location	= ShipToLocation
			Instance Selection 
				where (related.TaxCode entered)				
		
    	ContractTaxableLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLocationOnly 
    			related.ContractGroup						= Company.ProcurementGroup
    			related.Contract 							= Contract
				related.ContractAndLineLocation.Company		= Company
				related.ContractAndLineLocation.Location	= ShipToLocation
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractTaxCodeLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLocationOnly 
    			related.ContractGroup						= Company.ProcurementGroup
    			related.Contract 							= Contract
				related.ContractAndLineLocation.Company		= Company
				related.ContractAndLineLocation.Location	= ShipToLocation
			Instance Selection 
				where (related.TaxCode entered)		

    	ContractLineTaxableRequestingLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndRequestingLocationOnly 
    			related.ContractGroup								= Company.ProcurementGroup
    			related.Contract 									= Contract
				related.ContractLine        						= ContractLine 
				related.ContractAndLineLocation.Company				= Company
				related.ContractAndLineLocation.RequestingLocation	= PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractLineTaxCodeRequestingLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndRequestingLocationOnly 
    			related.ContractGroup								= Company.ProcurementGroup
    			related.Contract 									= Contract
				related.ContractLine        						= ContractLine 
				related.ContractAndLineLocation.Company				= Company
				related.ContractAndLineLocation.RequestingLocation	= PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation
			Instance Selection 
				where (related.TaxCode entered)				
		
    	ContractTaxableRequestingLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByRequestingLocationOnly 
    			related.ContractGroup								= Company.ProcurementGroup
    			related.Contract 									= Contract
				related.ContractAndLineLocation.Company				= Company
				related.ContractAndLineLocation.RequestingLocation	= PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractTaxCodeRequestingLocationRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByRequestingLocationOnly 
    			related.ContractGroup								= Company.ProcurementGroup
    			related.Contract 									= Contract
				related.ContractAndLineLocation.Company				= Company
				related.ContractAndLineLocation.RequestingLocation	= PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation
			Instance Selection 
				where (related.TaxCode entered)		

		DistributionsWithBudgetErrorRel is a PurchaseOrderLineDistribution set
    		Instance Selection
    			where (related.BudgetErrorExists)
    	
    	ContractLineTaxableCompanyRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndCompanyOnly 
    			related.ContractGroup						= Company.ProcurementGroup
    			related.Contract 							= Contract
				related.ContractLine        				= ContractLine 
				related.ContractAndLineLocation.Company		= Company
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractLineTaxCodeCompanyRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByLineAndCompanyOnly 
    			related.ContractGroup						= Company.ProcurementGroup
    			related.Contract 							= Contract
				related.ContractLine        				= ContractLine 
				related.ContractAndLineLocation.Company		= Company
			Instance Selection 
				where (related.TaxCode entered)				
		
    	ContractTaxableCompanyRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByCompanyOnly 
    			related.ContractGroup						= Company.ProcurementGroup
    			related.Contract 							= Contract
				related.ContractAndLineLocation.Company		= Company
			Instance Selection 
				where (related.Taxable > 0)		

    	ContractTaxCodeCompanyRel 
			one-to-many relation to ContractAndLineLocation 
			Field Mapping uses ByCompanyOnly 
    			related.ContractGroup						= Company.ProcurementGroup
    			related.Contract 							= Contract
				related.ContractAndLineLocation.Company		= Company
			Instance Selection 
				where (related.TaxCode entered)		

    	PurchaseOrderLineCommentDisplayOnPortalRel is a PurchaseOrderLineComment set
			Instance Selection
				where (related.SupplierCanView)
    	
    	PrintOnPurchaseOrderLineCommentsRel
    		one-to-many relation to PurchaseOrderLineComment
    		Field Mapping uses ByCommentType
    			related.Company				 = Company
                related.PurchaseOrder		 = PurchaseOrder
                related.PurchaseOrderLine	 = PurchaseOrderLine
        	Instance Selection
        		where (related.CommentType.PrintOnPurchaseOrder)
        
        SendToVendorPOLineCommentAttachmentsRel
        	one-to-many relation to PurchaseOrderLineComment
    		Field Mapping uses ByCommentType
    			related.Company				 = Company
                related.PurchaseOrder		 = PurchaseOrder
                related.PurchaseOrderLine	 = PurchaseOrderLine
        	Instance Selection
        		where ((related.CommentType.PrintOnPurchaseOrder
				and    related.SendToVendor
    			and    related.HasAttachment)
    			and   (not related.AttachmentSent or PurchaseOrder.RevisionsInclude.RevisionsComplete or PurchaseOrder.RevisionsInclude.Reissue))
        				
        	
        GeneralLedgerSystemCodeRel 
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "PO"
        
        RQGeneralLedgerSystemCodeRel 
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "RQ"

    	SubstitutedPurchaseOrderLinesRel
    		one-to-many relation to PurchaseOrderLine
    		Field Mapping uses symbolic key
    			related.Company 			= Company
    			related.PurchaseOrder 		= PurchaseOrder
    		Instance Selection
				where (related.OriginalLineNumber entered
				and	   related.OriginalLineNumber  = OriginalLineNumber
				and	   not related.IsOriginalWithSubstitute)

        PurchaseOrderLineAssetDetailslRel
            one-to-many relation to PurchaseOrderLineAssetDetail
            Field Mapping uses symbolic key
                related.Company = Company
            Instance Selection
                where (related.PurchaseOrder = PurchaseOrder
                and   related.PurchaseOrderLineAsset = PurchaseOrderLine)
		
		ContractParticipantLocationsRel
			one-to-many relation to ContractParticipant
			Field Mapping uses symbolic key
				related.ContractGroup 								= PurchaseOrder.BlanketOrStandingContract.ContractGroup
				related.Contract									= PurchaseOrder.BlanketOrStandingContract
			Instance Selection
				where (related.ContractParticipant.ParticipantLocation.Company  = Company
				and   (related.ContractParticipant.ParticipantLocation.Location not entered
				or 	   related.ContractParticipant.ParticipantLocation.Location = ShipToLocation))
		
		PurchaseOrderLinesByLineNbrRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByLineNbrForResequence				
				related.Company            = Company
				related.PurchaseOrder      = PurchaseOrder				 
		
        PurchaseOrderLineAssetRel
            one-to-one relation to PurchaseOrderLineAsset
            Field Mapping uses symbolic key
                related.Company                 = Company
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine       = PurchaseOrderLine

        PurchaseOrderLineAssetDefaultsRel
            one-to-one relation to PurchaseOrderLineAssetDefaults
            Field Mapping uses symbolic key
                related.Company                 = Company
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine       = PurchaseOrderLine               
   
        ItemLocationRel
            one-to-one relation to ItemLocation
            Field Mapping uses symbolic key
                related.Company           = Company
                related.InventoryLocation = ShipToLocation
                related.Item              = Item

        ItemUOMBuyRel
        	one-to-one relation to ItemUOM
        	Field Mapping uses symbolic key
        		related.ItemGroup         = ProcurementGroup
        		related.Item              = Item
        		related.UnitOfMeasure     = EnteredBuyUOM
        		
        ItemUOMPriceRel
        	one-to-one relation to ItemUOM
        	Field Mapping uses symbolic key
        		related.ItemGroup         = ProcurementGroup
        		related.Item              = Item
        		related.UnitOfMeasure     = VendorPriceUOM

		PayablesInvoiceDetailsForPOLineRel 
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses Set10
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
                
        PayablesInvoiceDetailsRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
        
        PayablesInvoiceDetailsByVendorRel
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByPurchaseOrderLine
                related.Company 			= Company
            	related.PurchaseOrder 		= PurchaseOrder
                related.PurchaseOrderLine 	= PurchaseOrderLine
            Instance Selection
                where (related.Vendor 		= Vendor)              

        PayablesInvoiceDetailsUnmatchedRel
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses ByPurchaseOrderLine
                related.Company = Company
                related.PurchaseOrder = PurchaseOrder
                related.PurchaseOrderLine = PurchaseOrderLine
            Instance Selection
                where (related.Status.Unreleased
                and    related.PayablesInvoice = PayablesInvoice)  
		
		UnmatchedPayablesInvoiceDetailsRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (related.Status.Unreleased)
		
        PurchaseOrderAddOnChargesRel
            one-to-many relation to PurchaseOrderAndLineAddOnCharge
            Field Mapping uses symbolic key
                related.Company 				= Company
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine 		= blank
                
        PurchaseOrderAddOnChargesNotCanceledRel
            one-to-many relation to PurchaseOrderAndLineAddOnCharge
            Field Mapping uses symbolic key
                related.Company 				= Company
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine 		= blank
            Instance Selection
            	where (not related.Canceled)
        
        PurchaseOrderAddOnChargesComputedChargesRel
            one-to-many relation to PurchaseOrderAndLineAddOnCharge
            Field Mapping uses symbolic key
           	Instance Selection
           		where (related.Company = Company
                and related.PurchaseOrder = PurchaseOrder
                and related.PurchaseOrderLine = PurchaseOrderLine)
                
        PurchaseOrderLineAddOnChargesRel
            one-to-many relation to PurchaseOrderAndLineAddOnCharge
			delete cascades
            Field Mapping uses symbolic key
                related.Company 				= Company
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine 		= PurchaseOrderLine
                
        PrintablePurchaseOrderAndLineAddOnChargesForALineRel
            one-to-many relation to PurchaseOrderAndLineAddOnCharge
            Field Mapping uses symbolic key
                related.Company 				= Company
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine 		= PurchaseOrderLine
            Instance Selection
				where (related.PrintOnPO		= true
				and	   related.Vendor			= Vendor)

		PurchaseOrderAndLineAddOnChargesForALineSameVendorRel
            one-to-many relation to PurchaseOrderAndLineAddOnCharge
            Field Mapping uses symbolic key
                related.Company 				= Company
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine 		= PurchaseOrderLine
            Instance Selection
            	where (related.Vendor           = Vendor) 
		
        PurchaseOrderAuditsRel
            one-to-many relation to PurchaseOrderAudit
            Field Mapping uses Set3
                related.Company = Company
            Instance Selection
                where (related.PurchaseOrder	= PurchaseOrder
                and   related.PurchaseOrderLine = PurchaseOrderLine)

        PurchaseOrderLineSourcesRel
            one-to-many relation to PurchaseOrderLineSource
            Field Mapping uses Set1
                related.Company                 = Company
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine       = PurchaseOrderLine
                
        PurchaseOrderLineSourcesWithQuantityRel
        	one-to-many relation to PurchaseOrderLineSource
        	Field Mapping uses Set1
        		related.Company					= Company
        		related.PurchaseOrder			= PurchaseOrder
        		related.PurchaseOrderLine		= PurchaseOrderLine
        	Instance Selection
        		where (related.Quantity entered)      
 		
 		PurchaseOrderLineSourceForRequesterRel
 			one-to-many relation to PurchaseOrderLineSource
 			Field Mapping uses Set9
 				related.Company				= Company
                related.PurchaseOrder		= PurchaseOrder	
 				related.PurchaseOrderLine	= PurchaseOrderLine
 				related.PurchaseOrderLineSource.SourceDocumentOrigin	= SourceDocumentOrigin.Requisitions
            Instance Selection
                where (related.Requester = actor.agent(Employee).Employee)
        
        PurchaseOrderLinesFromOrderEntryRel is a PurchaseOrderLineSource set
        	Instance Selection
        		where (related.FromOrderEntry)
           	
        LineSourcesFromRQRel is a PurchaseOrderLineSource set
            Instance Selection
            	where (related.FromRequisition)
        
        PurchaseOrderLineSourcesForDocLineRel
            one-to-many relation to PurchaseOrderLineSource
            Field Mapping uses Set2
                related.PurchaseOrderLineSource.OperatingCompany		= TransientLineSourceCompany
                related.PurchaseOrderLineSource.SourceDocumentOrigin	= "RQ"
                related.PurchaseOrderLineSource.SourceDocumentNumeric	= TransientLineSourceDocumentNumber
                related.PurchaseOrderLineSource.SourceDocumentLineNumber = TransientLineSourceLineNumber
                related.PurchaseOrder									= PurchaseOrder
                related.PurchaseOrderLine       						= PurchaseOrderLine                

		PurchaseOrderLineSourceReverseOrderRel
            one-to-many relation to PurchaseOrderLineSource
            Field Mapping uses BySet1ReversedOrder
            	related.Company 										= Company
            	related.PurchaseOrder									= PurchaseOrder
				related.PurchaseOrderLine       						= PurchaseOrderLine
            	related.PurchaseOrderLineSource.SourceDocumentOrigin	= "RQ"                
                                            	
        PurchaseOrderLineSourceRequestingLocationRel
            one-to-many relation to PurchaseOrderLineSource
            Field Mapping uses Set1
            	related.Company 										= Company
            	related.PurchaseOrder									= PurchaseOrder
				related.PurchaseOrderLine       						= PurchaseOrderLine
			Instance Selection
				where (related.PurchaseOrderLineSource.SourceDocumentOrigin	= "RQ"    
				or     related.PurchaseOrderLineSource.SourceDocumentOrigin	= "PO")    
        
 		LineSourcesReqLocNotStocklessRel
		    one-to-many relation to PurchaseOrderLineSource
            Field Mapping uses Set1
            	related.Company 										= Company
            	related.PurchaseOrder									= PurchaseOrder
				related.PurchaseOrderLine       						= PurchaseOrderLine
            Instance Selection
                where (related.PurchaseOrderLineSource.SourceDocumentOrigin	= "RQ"  
                and   related.RequestingLocation.Stockless 				= false)

  		LineSourcesReqLocStocklessRel
		    one-to-many relation to PurchaseOrderLineSource
            Field Mapping uses Set1
            	related.Company 										= Company
            	related.PurchaseOrder									= PurchaseOrder
				related.PurchaseOrderLine       						= PurchaseOrderLine
            Instance Selection
                where (related.PurchaseOrderLineSource.SourceDocumentOrigin	= "RQ"  
                and   related.RequestingLocation.Stockless 				= true)
 
        PurchaseOrderLineSourceUnitCostDifferenceRel
			one-to-many relation to PurchaseOrderLineSource
				Field Mapping uses Set1
	                related.Company                 = Company
	                related.PurchaseOrder			= PurchaseOrder
	                related.PurchaseOrderLine       = PurchaseOrderLine  
            Instance Selection
            	where (!related.RequisitionUnitCost = EnteredUnitCost
            	or      related.RequisitionQuantityDifference)
        
        PurchaseOrderLineSourceWithRequesterRel
			one-to-many relation to PurchaseOrderLineSource
				Field Mapping uses Set1
	                related.Company                 = Company
	                related.PurchaseOrder			= PurchaseOrder
	                related.PurchaseOrderLine       = PurchaseOrderLine  
            Instance Selection
            	where (related.Requester entered)        	
        
        PurchaseOrderReceiptLinesRel
            one-to-many relation to PurchaseOrderReceiptLine
            Field Mapping uses ByPurchaseOrderLine
                related.Company                 = Company
                related.PurchaseOrder		    = PurchaseOrder
                related.PurchaseOrderLine       = PurchaseOrderLine

        POReceiptLineTemplatesRel
            one-to-many relation to POReceiptLineTemplate
            Field Mapping uses ByPurchaseOrder
                related.Company       		= Company
            	related.PurchaseOrder 		= PurchaseOrder
            	related.PurchaseOrderLine 	= PurchaseOrderLine

        ReleasedPurchaseOrderReceiptLinesRel
            one-to-many relation to PurchaseOrderReceiptLine
            Field Mapping uses Set5
                related.Company                 = Company
                related.PurchaseOrder		    = PurchaseOrder
                related.PurchaseOrderLine       = PurchaseOrderLine

		ReleasedReceiptLinesRel
			one-to-many relation to PurchaseOrderReceiptLine
			Field Mapping uses Set5
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine
			Instance Selection
				where (not related.Status.ReleasedPendingTwoStepReceiving)

        OpenMatchQuantityReceiptLinesRel
            one-to-many relation to PurchaseOrderReceiptLine
            Field Mapping uses Set5
                related.Company                 = Company
                related.PurchaseOrder		    = PurchaseOrder
                related.PurchaseOrderLine       = PurchaseOrderLine
			Instance Selection
            	where (related.OpenToMatchQuantity entered)

        ReleasedPurchaseOrderReceiptLinesFromBatchRel
            one-to-many relation to PurchaseOrderReceiptLine
            Field Mapping uses ByPurchaseOrderLine
                related.Company                 = Company
                related.PurchaseOrder		    = PurchaseOrder
                related.PurchaseOrderLine       = PurchaseOrderLine
            Instance Selection
            	where (not related.Status.Entered
            	or	   related.PurchaseOrderReceipt.Status.ReleaseInProgress)

        PurchaseOrderReceiptLinesAOCRel
            one-to-one relation to PurchaseOrderReceiptLineAOC
            Field Mapping uses symbolic key
                related.Company              = PrmPOReceiptCompany
                related.PurchaseOrderReceipt = PrmPOReceiptPurchaseOrderReceipt
                related.PurchaseOrderReceiptLine = PrmPOReceiptPurchaseOrderReceiptLine
        		related.AddOnCharge				 = PrmPOReceiptAddOnCharge
        		
        AddOnChargesForReceivingRel is a PurchaseOrderAndLineAddOnCharge set
        	Instance Selection
        		where (related.IsNotCanceled)
        		
        LineAddOnChargesForCancellationRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
        	Instance Selection
        		where (related.IsNotCanceled)       		

        UnreleasedPurchaseOrderReceiptLinesRel
            one-to-many relation to PurchaseOrderReceiptLine
            Field Mapping uses Set4
                related.Company                 = Company
                related.PurchaseOrder		    = PurchaseOrder
                related.ShipToLocation 			= ShipToLocation
                related.MatchDetailKey			= MatchDetailKey
                related.PurchaseOrderLine       = PurchaseOrderLine
            Instance Selection
            	where (related.Status.Entered)
		
		PurchaseOrderReceiptLinesForActivityRel
            one-to-many relation to PurchaseOrderReceiptLine
            Field Mapping uses Set4
                related.Company                 = Company
                related.PurchaseOrder		    = PurchaseOrder
                related.ShipToLocation 			= ShipToLocation
                related.MatchDetailKey			= MatchDetailKey  
                related.PurchaseOrderLine       = PurchaseOrderLine          
            	
        PurchaseOrderReceiptAdjustmentAndInspectionLinesRel
            one-to-many relation to POReceiptAdjustmentAndInspectionLine
            Field Mapping uses Set3
                related.Company				= Company
                related.PurchaseOrder		= PurchaseOrder
                related.PurchaseOrderLine	= PurchaseOrderLine
        
        AdjustmentLinesRel
            one-to-many relation to POReceiptAdjustmentAndInspectionLine
            Field Mapping uses Set3
                related.Company				= Company
                related.PurchaseOrder		= PurchaseOrder
                related.PurchaseOrderLine	= PurchaseOrderLine
            Instance Selection
            	where (related.IsAdjustment)
		
		InspectionLinesRel
			one-to-many relation to POReceiptAdjustmentAndInspectionLine
            Field Mapping uses Set3
                related.Company				= Company
                related.PurchaseOrder		= PurchaseOrder
                related.PurchaseOrderLine	= PurchaseOrderLine
            Instance Selection
            	where (related.IsInspection)
		
		DefaultVendorItemRel
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup			= ProcurementGroup
				related.Item						= Item
				related.Vendor						= Vendor
			Instance Selection
				where (related.VendorItem.UseAsDefault)

		VendorItemsRel 
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup	= ProcurementGroup
				related.Item				= Item
				related.Vendor				= Vendor
				
		ActiveVendorItemsRel 
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup	= ProcurementGroup
				related.Item				= Item
				related.Vendor				= Vendor
			Instance Selection
				where (related.Active)
		
		VendorReturnLinesRel
			one-to-many relation to VendorReturnLine
			Field Mapping uses Set3
				related.Company						= Company
				related.OriginalPurchaseOrder		= PurchaseOrder
				related.OriginalPurchaseOrderLine	= PurchaseOrderLine
		
		VendorReturnLinesWithStatusAddedRel
			one-to-many relation to VendorReturnLine
			Field Mapping uses Set3
				related.Company						= Company
				related.OriginalPurchaseOrder		= PurchaseOrder
				related.OriginalPurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (related.VendorReturn.Status.Added)
		
		VendorReturnLinesCreationRel
			one-to-many relation to VendorReturnLine
			Field Mapping uses Set3
				related.Company						= Company
				related.OriginalPurchaseOrder		= PurchaseOrder
				related.OriginalPurchaseOrderLine	= PurchaseOrderLine
				related.VendorReturn 				= PurchaseOrder.CreateForVendorReturn
			Instance Selection
                where (related.VendorReturn.Status.Added)
				

		VendorReturnLinesWithStatusAuthorizedRel
			one-to-many relation to VendorReturnLine
			Field Mapping uses Set3
				related.Company						= Company
				related.OriginalPurchaseOrder		= PurchaseOrder
				related.OriginalPurchaseOrderLine	= PurchaseOrderLine
            Instance Selection
                where (related.VendorReturn.Status.AuthorizedByVendor)
       	
		VendorReturnLinesWithStatusShippedRel
			one-to-many relation to VendorReturnLine
			Field Mapping uses Set3
				related.Company						 = Company
				related.OriginalPurchaseOrder        = PurchaseOrder
                related.OriginalPurchaseOrderLine    = PurchaseOrderLine
            Instance Selection
                where (related.VendorReturn.Status.Closed
                or     related.VendorReturn.Status.WaitingForVendorAction)

        TaxCodeRatesRel
            one-to-many relation to TaxRate
            Field Mapping uses symbolic key
            Instance Selection
                where (related.TaxRate.TaxCode = TaxCode)

        CommodityCodeRel
        	one-to-one relation to CommodityCode
        	Field Mapping uses symbolic key
        		related.ItemGroup        = ProcurementGroup
        		related.CommodityCode    = CommodityCode
        
        BuyerRel
            one-to-one relation to Buyer
            Field Mapping uses symbolic key
                related.HROrganization = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.HROrganization
                related.Buyer          = Buyer

        GeneralLedgerCategoryRel
            one-to-one relation to GeneralLedgerCategory
            valid when (IsInventoryType)
            Field Mapping uses symbolic key
                related.Company               = Company
                related.InventoryLocation     = ShipToLocation
                related.GeneralLedgerCategory = ItemLocationRel.GeneralLedgerCategory

        VendorReturnRel
            one-to-one relation to VendorReturn
            valid when (IsFromVendorReturn)
            Field Mapping uses symbolic key
                related.Company      = Company
                related.VendorReturn = PurchaseOrder.VendorReturn
        
        VendorReturnForCancellationRel
            one-to-many relation to VendorReturn
            valid when (IsFromVendorReturn)
            Field Mapping uses symbolic key
                related.Company      = Company
                related.VendorReturn = PurchaseOrder.VendorReturn
			Instance Selection
				where  (not related.VendorClaimType.CreditMemo)
				
		PayablesInvoiceDetailForInvoiceRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PayablesInvoice					= LocalPayablesInvoice
				related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
			Instance Selection
				where  (related.Location				= ShipToLocation
				and		related.MatchDetailKey			= MatchDetailKey)
				
		MultipleVendorItemsForItemAndVendorRel
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup				= ProcurementGroup
				related.Item							= Item
				related.Vendor							= Vendor
			Instance Selection
				where  (related.VendorItem				!= VendorItem)
		
		OtherVendorItemWithSameManufacturerInfoRel	
			one-to-many relation to VendorItem
			Field Mapping uses symbolic key
				related.ProcurementGroup				= ProcurementGroup
				related.Item							= Item
				related.Vendor							= Vendor
			Instance Selection
				where  (related.VendorItem				!= VendorItem
				and 	related.Manufacturer 			= Manufacturer
				and 	related.ManufacturerNumber 		= ManufacturerNumber
			    and    (related.VendorBuyUOM !entered
			    or     (related.VendorBuyUOM entered
				and     related.VendorBuyUOM            = EnteredBuyUOM))
				and		related.Active)
				
        PurchaseOrderAndLineAddOnChargeRel
            one-to-one relation to PurchaseOrderAndLineAddOnCharge
            Field Mapping uses symbolic key
                related.Company 				= Company
                related.PurchaseOrder			= PurchaseOrder
                related.PurchaseOrderLine 		= PurchaseOrderLine
                related.AddOnCharge				= LocalAddOnCost
		
		LandedPurchaseOrderLineAddOnChargeRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses Set3
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (related.LandedAddOnCharge = true)
		
		SpendLocationRel
			one-to-one relation to SpendLocation
			Field Mapping uses symbolic key
				related.Company			= Company
				related.SpendLocation	= ShipToLocation

		LineItemOnProductRel
			one-to-many relation to RecallProductItem
			Field Mapping uses symbolic key
				related.RecallGroup				= LocalRecallGroup
   				related.RecallNotice			= LocalRecallNotice
   				related.RecallProduct			= LocalRecallProduct
   			Instance Selection
   				where ((related.Item             						  = Item)
   				or     (related.VendorItem                                 = VendorItem
   				and     related.VendorItem entered)
   				or     (related.ManufacturerInformation.ManufacturerNumber = ManufacturerNumber
   				and     related.ManufacturerInformation.ManufacturerNumber entered
   				and     ManufacturerNumber entered)) 
		
		RecallProductTransactionRel
			one-to-many relation to RecallProductTransaction
			Field Mapping uses symbolic key
				related.RecallGroup				= LocalRecallGroup
   				related.RecallNotice			= LocalRecallNotice
   				related.RecallProduct			= LocalRecallProduct
   			Instance Selection
   				where (related.PurchaseOrderLineGroup.PurchaseOrder 	= PurchaseOrder
   				and    related.PurchaseOrderLineGroup.PurchaseOrderLine = PurchaseOrderLine)				

		RecallProductTransactionSourceRel
			one-to-many relation to RecallProductTransaction
			Field Mapping uses symbolic key
				related.RecallGroup				= LocalRecallGroup
   				related.RecallNotice			= LocalRecallNotice
   				related.RecallProduct			= LocalRecallProduct
   			Instance Selection
   				where (related.PurchaseOrderLineSourceGroup.PoNumber 	= PurchaseOrder
   				and    related.PurchaseOrderLineSourceGroup.LineNbr		= PurchaseOrderLine)			

		ItemOnContractRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup 			= ProcurementGroup
				related.ItemNumber    			= Item
			Instance Selection
				where (PurchaseOrder.PurchaseOrderDate			>= related.EffectiveDate
				and   (PurchaseOrder.PurchaseOrderDate			<= related.ExpirationDate
				or 		related.ExpirationDate	 = blank))
				
		InventoryCompanyRel
			one-to-one relation to InventoryCompany
			Field Mapping uses symbolic key
				related.Company          = Company
				
		RequestingLocationFromInterfaceRel
        	one-to-one relation to RequestingLocation
        	Field Mapping uses symbolic key
        		related.Company 			= LocalOperatingCompanyFromInterface
        		related.RequestingLocation	= LocalRequestingLocationFromInterface
		
		ContractLineMemberRel
			one-to-one relation to ContractLineMember
			Field Mapping uses BySeqNumber
				related.ContractGroup			= Company.ProcurementGroup
				related.Contract				= Contract
				related.MfgContractTierInfo.MfgContract = ManufacturerContract
				related.ItemNumber				= Item
				related.VendorItem				= VendorItem
				related.UOM						= VendorPriceUOM	
				related.MemberSeqNumber			= ParticipantSequenceNumber	
				
		PolineFactRel
			one-to-one relation to PolineFact
			Field Mapping uses PLFSET1
				related.PurchasingCompany	= Company
				related.PoNumber			= PurchaseOrder
				related.PoRelease			= PurchaseOrder.PORelease
				related.PoCode				= PurchaseOrder.POCode
				related.LineNbr				= LocalLineNbr
				related.LineSeq				= LocalLineSeq
		
		ManufacturerContractLineRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVenItemMfgInfo
				related.ContractGroup												= Company.ProcurementGroup
				related.Contract													= ManufacturerContract
				related.VendorItem													= VendorItem
				related.Manufacturer.ManufacturerCode       						= Manufacturer.ManufacturerCode	
				related.Manufacturer.ManufacturerDivision   						= Manufacturer.ManufacturerDivision
				related.ManufacturerNumber		    								= ManufacturerNumber
				related.UOM															= VendorPriceUOM
				related.ManufacturerContract										= ManufacturerContract
	
		PurchaseOrderInterfacesRel
			one-to-many relation to PurchaseOrderInterface
			Field Mapping uses symbolic key
    
    	PurchasingVendorRel
            one-to-one relation to PurchasingVendor
            Field Mapping uses symbolic key
                related.VendorGroup = Company.VendorGroup
                related.Vendor 		= Vendor
        

        PurchaseOrderLineDistributionsRel
            one-to-many relation to PurchaseOrderLineDistribution
            delete cascades
            Field Mapping uses symbolic key
                related.Company                   = Company
                related.PurchaseOrder             = PurchaseOrder
                related.PurchaseOrderLine         = PurchaseOrderLine
            Instance Selection
            	where (related.AddOnCharge not entered)

        POLineDistributionsRel
            one-to-many relation to PurchaseOrderLineDistribution
            delete cascades
            Field Mapping uses symbolic key
                related.Company                   = Company
                related.PurchaseOrder             = PurchaseOrder
                related.PurchaseOrderLine         = PurchaseOrderLine
            	related.AddOnCharge				  = blank
           
		PurchaseOrderLineDistributionsWithAssetTemplateRel
            one-to-many relation to PurchaseOrderLineDistribution
            delete cascades
            Field Mapping uses symbolic key
                related.Company                   = Company
                related.PurchaseOrder             = PurchaseOrder
                related.PurchaseOrderLine         = PurchaseOrderLine
            Instance Selection
            	where (related.AddOnCharge not entered
            	and related.AssetInformation.AssetTemplate entered)
            	
        PurchaseOrderLineDistributionsByAccountRel
            one-to-many relation to PurchaseOrderLineDistribution
            delete cascades
            Field Mapping uses symbolic key
                related.Company                   = Company
                related.PurchaseOrder             = PurchaseOrder
                related.PurchaseOrderLine         = PurchaseOrderLine
            Instance Selection
            	where (related.AddOnCharge not entered
            	and    related.DistributionAccount	= LocalDistributionAccount)

		CommittedPurchaseOrderLineDistributionsRel
            one-to-many relation to PurchaseOrderLineDistribution
            Field Mapping uses symbolic key
                related.Company                   = Company
                related.PurchaseOrder             = PurchaseOrder
                related.PurchaseOrderLine         = PurchaseOrderLine
            Instance Selection
            	where (related.CommitmentExists
            	and    related.AddOnCharge not entered)
		
		PomatchobjRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set3	
                related.Company														= Company
                related.PurchaseOrder												= PurchaseOrder
                related.PurchaseOrderLine											= PurchaseOrderLine
			Instance Selection
				where (related.Status.Released
				and   (related.Type 	= "PO"
				or	   related.Type 	= "CS"))

		POReceiptInvoiceLinkWithReceivedQuantityRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set5
                related.Company														= Company
                related.PurchaseOrder												= PurchaseOrder
            Instance Selection
                where (related.PurchaseOrderLine	= PurchaseOrderLine
                and    related.Type					= "PO")

		PayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company							= Company
				related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
			Instance Selection
				where (related.Status.Unreleased
				and    related.PayablesInvoice				= PayablesInvoice
				and    related.PayablesInvoiceDetail.Vendor	= Vendor)

		LocalPayablesInvoiceDetailRel
			one-to-many relation to PayablesInvoiceDetail
			Field Mapping uses ByPurchaseOrderLine
				related.Company							= Company
				related.PurchaseOrder					= PurchaseOrder
				related.PurchaseOrderLine				= PurchaseOrderLine
			Instance Selection
				where (related.Status.Unreleased
				and    related.PayablesInvoice				= LocalPayablesInvoice
				and    related.PayablesInvoiceDetail.Vendor	= Vendor)

		PolineWithQtyRemainingRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key	
				related.Company				= Company
    			related.PurchaseOrder		= PurchaseOrder
    		Instance Selection
    			where (related.DerivedOpenToPayablesInvoiceQuantity > 0)

		StandardCommentCodeRel
            one-to-many relation to StandardCommentCode
            Field Mapping uses Set1
                related.ProcurementGroup    = Company.ProcurementGroup
                related.StandardCommentCode = StandardCommentCode
            Instance Selection 
                where (related.IsoLocale not entered)

		ContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup 	= Company.ProcurementGroup
				related.Contract 		= Contract
		
		OldContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup   = Company.ProcurementGroup
				related.Contract        = LocalOldContract

		OldContractLineRel
			one-to-one relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup   = Company.ProcurementGroup
				related.Contract        = LocalOldContract
				related.ContractLine    = LocalOldContractLine

		ContractLineRel
			one-to-one relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup 	= Company.ProcurementGroup
				related.Contract 		= Contract
				related.ContractLine 	= ContractLine
				
		ReceivingBuyerMessagesRel
			one-to-many relation to PurchaseOrderBuyerMessage
			Field Mapping uses ByPurchaseOrder
				related.Company						= Company
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderReceiptLine	= PurchaseOrderLine
			Instance Selection
				where (related.ReceivingMessage)
				
		BuyerMessagesRel
			one-to-many relation to PurchaseOrderBuyerMessage
			Field Mapping uses ByPurchaseOrder
				related.Company						= Company
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderReceiptLine	= PurchaseOrderLine
				
        RequisitionLineRel
        	one-to-one relation to RequisitionLine
        	Field Mapping uses symbolic key
           		related.Company     	= TransientLineSourceCompany
                related.Requisition		= TransientLineSourceDocumentNumber
                related.RequisitionLine = TransientLineSourceLineNumber

		LineBuyerLocationsRel
			one-to-many relation to BuyerLocation
			Field Mapping uses Set4
				related.HROrganization        = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.HROrganization
            	related.Buyer                 = PurchaseOrder.Buyer
            	related.Company               = Company
            	related.Location              = ShipToLocation
            	
        BuyerLocationsRel
			one-to-many relation to BuyerLocation
			Field Mapping uses Set4
				related.HROrganization        = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.HROrganization
            	related.Buyer                 = PurchaseOrder.Buyer
      
      	LineSourcesFromOrderEntryAndRequisitionRel is a PurchaseOrderLineSource set
			Instance Selection
				where (related.FromOrderEntryOrRequisition)
      
	    PurchaseOrderReceiptLinesWithMatchDetailKeyRel
			one-to-many relation to PurchaseOrderReceiptLine
            Field Mapping uses Set4
	            related.Company                      = Company
				related.PurchaseOrder                = PurchaseOrder
	            related.ShipToLocation               = ShipToLocation
	            related.MatchDetailKey               = MatchDetailKey
	            related.PurchaseOrderLine            = PurchaseOrderLine
        
		WarehouseDemandRel
        	one-to-one relation to WarehouseDemand
        	Field Mapping uses symbolic key
        		related.Company								= Company
        		related.WarehouseDemand.DemandSystemCode	= "PO"
        		related.WarehouseDemand.DemandDocument		= PurchaseOrder
        		related.WarehouseDemand.DemandCompany		= Company
        
		WarehouseDemandLinesRel
			one-to-many relation to WarehouseDemandLine

			Field Mapping uses symbolic key
				related.Company									= Company
				related.WarehouseDemand.DemandSystemCode		= DemandSystemCode.PurchaseOrder
				related.WarehouseDemand.DemandDocument			= PurchaseOrder
				related.WarehouseDemand.DemandCompany			= Company
				related.InventoryLocation						= ShipToLocation
				related.Item									= Item
				related.WarehouseDemandLine.DemandDocumentType	= DemandDocumentType.PurchaseOrder
				related.WarehouseDemandLine.LineNumber			= PurchaseOrderLine
				related.WarehouseDemandLine.ComponentSequence   = 0

		DemandForOldShipToLocationRel
			one-to-one relation to WarehouseDemandLine
			Field Mapping uses symbolic key
				related.Company									= Company
				related.WarehouseDemand.DemandSystemCode		= DemandSystemCode.PurchaseOrder
				related.WarehouseDemand.DemandDocument			= PurchaseOrder
				related.WarehouseDemand.DemandCompany			= Company
				related.InventoryLocation						= old ShipToLocation
				related.Item									= Item
				related.WarehouseDemandLine.DemandDocumentType	= DemandDocumentType.PurchaseOrder
				related.WarehouseDemandLine.LineNumber			= PurchaseOrderLine
				related.WarehouseDemandLine.ComponentSequence   = 0

		WHDemandLineUpdateFromReceiptRel
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set5
				related.Company										= Company
                related.InventoryLocation							= ShipToLocation
			Instance Selection
				where (related.WarehouseDemand.DemandSystemCode		= PurchaseOrderLineSourcesRel.PurchaseOrderLineSource.SourceDocumentOrigin
				and		related.DocumentNumberNumeric				= PurchaseOrderLineSourcesRel.PurchaseOrderLineSource.SourceDocumentNumeric
				and		related.WarehouseDemand.DemandDocument		= 0 
				and     related.WarehouseDemand.DemandCompany		= Company
				and		related.WarehouseDemandLine.LineNumber		= PurchaseOrderLineSourcesRel.PurchaseOrderLineSource.SourceDocumentLineNumber)

		WarehouseDemandLineItemRel
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set2
				related.Company										= Company
				related.InventoryLocation							= ShipToLocation
				related.LineType									= ItemType
				related.Item										= Item
				related.AllocationPriority							= blank
                related.WarehouseDemand.DemandDocument				= blank
                related.WarehouseDemandLine.LineNumber				= blank
                related.AllocationDate								= blank
                related.WarehouseDemand.DemandSystemCode			= blank
                related.WarehouseDemand.DemandCompany				= blank
        
        WarehouseDemandLineFromRQRel
			one-to-one relation to WarehouseDemandLine
			Field Mapping uses Set1
				related.Company									= Company
                related.WarehouseDemand.DemandSystemCode		= "RQ"
                related.WarehouseDemand.DemandDocument			= PrmWHDLDocNumNumeric
                related.WarehouseDemand.DemandCompany			= PrmWHDLCompany
                related.WarehouseDemandLine.LineNumber			= PrmWHDLLineNumber
                related.WarehouseDemandLine.ComponentSequence   = 0               
				related.InventoryLocation						= PrmWHDLLocation
				                
        WarehouseDemandLineFromPOSourceRel
			one-to-one relation to WarehouseDemandLine
			Field Mapping uses Set1
				related.Company									= PrmWHDLCompany
                related.WarehouseDemand.DemandSystemCode		= "PO"
                related.WarehouseDemand.DemandDocument			= PurchaseOrder.DisplayDocumentNumber
                related.WarehouseDemand.DemandCompany			= PrmWHDLCompany
                related.WarehouseDemandLine.LineNumber			= PrmWHDLLineNumber
                related.WarehouseDemandLine.ComponentSequence   = 0               
				related.InventoryLocation						= PrmWHDLLocation

		WarehouseSupplyLinesRel
			one-to-many relation to WarehouseDemandLine
			Field Mapping uses Set7
				related.Company									= Company
                related.InventoryLocation						= ShipToLocation
                related.WarehouseDemand.DemandSystemCode		= "PO"
                related.WarehouseDemand.DemandDocument			= PurchaseOrder
                related.WarehouseDemand.DemandCompany			= Company
                related.WarehouseDemandLine.LineNumber			= PurchaseOrderLine
                related.WarehouseDemandLine.ComponentSequence	= blank
        
        VendorReturnForCreateForVendorReturnRel
    		one-to-one relation to VendorReturn
    		Field Mapping uses symbolic key
    			related.Company 		= Company
    			related.VendorReturn 	= PurchaseOrder.CreateForVendorReturn
    			
       	PurchaseFromLocationRel										
       		one-to-one relation to PurchaseFromLocation
			Field Mapping uses symbolic key
				related.VendorGroup				= Vendor.VendorGroup
				related.Vendor					= Vendor
				related.PurchaseFromLocation	= PurchaseFromLocation

       	VendorLocationRel			
       		one-to-one relation to VendorLocation
			Field Mapping uses symbolic key
				related.VendorGroup				= Vendor.VendorGroup
				related.Vendor					= Vendor
				related.VendorLocation			= PurchaseFromLocation
		
		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity
									
		CompanyTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity
				related.TaxCode 				= TaxCode
				
		ProjectPeriodOfPerformanceRel
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.Project                 = LocalPeriodOfPerformanceProject
				related.GeneralLedgerSystemCode = "PO"			
		
		PurchaseOrderLineDistributionsFromDistCodeRel is a PurchaseOrderLineDistribution set
			Instance Selection
				where (related.DistributionAccount = LocalDistributionAccount)
		
		PatientProcedureRel
            one-to-one relation to PatientProcedure
            Field Mapping uses symbolic key
                related.Company             = Company
                related.PatientProcedure	= LocalPatientProcedure

		PayablesInvoiceAddOnChargesRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PayablesInvoice		= LocalPayablesInvoice
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
				
		PayablesInvoiceDetailHistoriesRel
			one-to-many relation to PayablesInvoiceDetailHistory
			Field Mapping uses Set2
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (related.LineStatusNotZero)
				
		RQWarehouseDemandLineRel
			one-to-one relation to WarehouseDemandLine
			Field Mapping uses Set9
				related.Company									= Company
				related.WarehouseDemand.DemandSystemCode		= DemandSystemCode.Requisitions
				related.WarehouseDemand.DemandDocument			= PrmWHDLDocNumNumeric
                related.WarehouseDemand.DemandCompany			= PrmWHDLCompany
				related.WarehouseDemandLine.LineNumber			= PrmWHDLLineNumber
				related.InventoryLocation						= ShipToLocation
				related.WarehouseDemandLine.ComponentSequence	= 0

		POLineCommentsForReceivingDocumentIDMRel
    		one-to-many relation to PurchaseOrderLineComment
    		Field Mapping uses ByCommentType
    			related.Company				 = Company
                related.PurchaseOrder		 = PurchaseOrder
                related.PurchaseOrderLine	 = PurchaseOrderLine
        	Instance Selection
        		where (related.CommentType.PrintOnReceivingDocument
        		or	   related.CommentType.PrintOnInternalDocuments)
        
		GTINForReceivingDocumentIDMRel
        	one-to-many relation to PurchaseOrderLine
        	Field Mapping uses symbolic key
        		related.Company 			= Company
        		related.PurchaseOrder 		= PurchaseOrder
        		related.PurchaseOrderLine 	= PurchaseOrderLine
        	Instance Selection
        		where (related.Company.LocalPrintGTIN)
        
		ItemDetailForReceivingDocumentIDMRel
        	one-to-many relation to PurchaseOrderLine
        	Field Mapping uses symbolic key
        		related.Company 			= Company
        		related.PurchaseOrder 		= PurchaseOrder
        		related.PurchaseOrderLine 	= PurchaseOrderLine
        	Instance Selection
        		where (related.Company.LocalPrintItemDtl)
        		
        InventoryLocationRel
        	one-to-many relation to InventoryLocation
        		Field Mapping uses symbolic key
        			related.Company = Company
        			
       	PayablesInvoiceMatchAOCOnlyRel
            one-to-many relation to PayablesInvoiceAddOnCharge
            Field Mapping uses Set6
                related.Company 			= Company
                related.PurchaseOrder 		= PurchaseOrder
                related.PurchaseOrderLine 	= PurchaseOrderLine
                related.Vendor 				= Vendor
            Instance Selection
                where (related.PayablesInvoice.MatchProcessType.AOCOnly)


        FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
        
        PurchaseOrderLineDistributionRel
            one-to-many relation to PurchaseOrderLineDistribution
            delete cascades
            Field Mapping uses symbolic key
                related.Company                   = Company
                related.PurchaseOrder             = PurchaseOrder
                related.PurchaseOrderLine         = PurchaseOrderLine



		PurgePurchaseOrderLineDistributionDetailRel is a PurchaseOrderLineDistributionDetail set
        	Instance Selection
				include deleted records

		PurgePurchaseOrderLineDistributionsRel is a PurchaseOrderLineDistribution set
        	Instance Selection
				include deleted records
				
      	PurgePurchaseOrderLineSourceRel is a PurchaseOrderLineSource set
            Instance Selection
            	include deleted records
            	
        PurgePurchaseOrderLineAssetRel is a PurchaseOrderLineAsset set
			Instance Selection
				include deleted records
				
		PurgePurchaseOrderLineCommentRel
			one-to-many relation to PurchaseOrderLineComment
			Field Mapping uses part of key
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				include deleted records
				
		PurgePurchaseOrderLineTaxRel is a PurchaseOrderLineTax set
			Instance Selection
				include deleted records

		PurchaseOrderLineTaxRel is a PurchaseOrderLineTax set
			Instance Selection
				where (related.TaxCode = LocalTaxCode)
				

		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 2
            	related.FSMBODConfiguration.Noun 		= "PulseAlert"
            	related.FSMBODConfiguration.Direction 	= 1
        
        FSMBODConfigurationDetailRel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= 2	
            	related.FSMBODConfiguration.Noun 			= "PulseAlert"
            	related.FSMBODConfiguration.Direction 		= 1
            Instance Selection
				where (related.Alert						= "FSM_ION_BudgetExceedsAlert"
				and	   related.Enable)


		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
	 			related.FinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	 
	 			related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode
	 			
	 	OneSourceEAMInventoryLocationRel
	 		one-to-one relation to InventoryLocation
	 		Field Mapping uses symbolic key
	 			related.Company					= Company
	 			related.InventoryLocation		= LocalOneSourceInventoryLocation

		FSMBODCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
            	related.FSMBODCrossReference.SourceField 		= "CSFAE"
            	related.FSMBODCrossReference.DestinationField 	= "DESTAE"
            Instance Selection
				where (related.SourceValue	= LocalCleanIdAccountingEntity)

		DistributionsCreatedByFESRel
            one-to-many relation to PurchaseOrderLineDistribution
            Field Mapping uses symbolic key
                related.Company                        = Company
                related.PurchaseOrder                  = PurchaseOrder
                related.PurchaseOrderLine              = PurchaseOrderLine
            Instance Selection
                where (related.CreatedByFES)
                
		UniqueAssetsTagRel
			one-to-many relation to Asset
			Field Mapping uses ByCompanyTagAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company 				= LocalCompany
				related.TagNumber				= LocalTagNumber
				
		ManualPurchaseOrderLineEDIAcknowledgementRel 
			one-to-many relation to PurchaseOrderEDIAcknowledgement
			Field Mapping uses ByCompanyPurchaseOrderAcknowledgement
				related.Company			= Company
				related.PurchaseOrder	= PurchaseOrder
			Instance Selection
				where (related.RunGroup				= PurchaseOrder
				and    related.PurchaseOrderLine 	= PurchaseOrderLine)

		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject = LocalUniqueID
			Instance Selection
				where (related.InvoiceNumber				= PurchaseOrder)

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		LocationItemUOMDefaultBuyingRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  					= Company
				related.InventoryLocation 			= ShipToLocation
				related.Item						= Item
			Instance Selection
				where (related.DefaultForBuying)

		LocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  					= Company
				related.InventoryLocation 			= ShipToLocation
				related.Item						= Item
				related.UnitOfMeasure				= EnteredBuyUOM	

		VendorBuyLocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  					= Company
				related.InventoryLocation 			= ShipToLocation
				related.Item						= Item
				related.UnitOfMeasure				= VendorItem.VendorBuyUOM

		VendorPriceLocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  					= Company
				related.InventoryLocation 			= ShipToLocation
				related.Item						= Item
				related.UnitOfMeasure				= VendorItem.VendorPriceUOM


		CurrencyRelationshipRel
			one-to-one relation to CurrencyRelationship
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CurrencyRelationship.FromCurrency	 = LocalFromCurrency
				related.CurrencyRelationship.ToCurrency		 = LocalToCurrency

		AlternateShipToLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company 		  = Company
				related.InventoryLocation = AlternateShipToLocation
				related.Item 			  = Item

		PurchaseOrderLinesReprintInProgressRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrder 				= PurchaseOrder
			Instance Selection
				where (related.IDMReprintStatus.InProgress)		
		
    Sets
        Set10
            indexed
            Sort Order
                Company
                PurchaseOrder
                ShipToLocation
                MatchDetailKey
                PurchaseOrderLine

        Set11
            indexed
            Sort Order
                Company
                PurchaseOrder
                MatchDetailKey
                PurchaseOrderLine

        Set13
            indexed
            Instance Selection
                where (UnreleasedAndHasContract)
            Sort Order
                Company
                PurchaseOrder
                Contract
                Item
                VendorItem
                EnteredBuyUOM
                PurchaseOrderLine

		ByPurchaseOrderContract
            indexed
            Sort Order
                Company
                PurchaseOrder
                Contract
                PurchaseOrderLine					

        Set15
            indexed
            Sort Order
                Company
                PurchaseOrder
                VendorItem
                PurchaseOrderLine

        Set2
            indexed
            Instance Selection
                where (HasContract)
            Sort Order
                ProcurementGroup
                Contract
                Company
                PurchaseOrder
                PurchaseOrderLine

        Set3
            indexed
            Instance Selection
                where (IsNonService)
            Sort Order
                Company
                ShipToLocation
                PurchaseOrder
                PurchaseOrderLine

        Set4
            indexed
            Sort Order
                Company
                Buyer
                EarlyDeliveryDate
                ShipToLocation
                PurchaseOrder
                PurchaseOrderLine

        Set5
            indexed
            Sort Order
                Company
                ShipToLocation
                EarlyDeliveryDate
                PurchaseOrder
                PurchaseOrderLine

        Set6
            indexed
            Sort Order
                Company
                Item
                ShipToLocation
                EarlyDeliveryDate descending
                PurchaseOrder descending
                PurchaseOrderLine descending

        Set7
            indexed
            Sort Order
                Company
                PurchaseOrder
                Item
                PurchaseOrderLine

        Set8
            indexed
            Instance Selection
                where (IsNonService)
            Sort Order
                Company
                ShipToLocation
                Vendor
                EarlyDeliveryDate
                PurchaseOrder
                PurchaseOrderLine

        Set9
            indexed
            Instance Selection
                where (IsNonService)
            Sort Order
                Company
                PurchaseOrder
                PurchaseOrderLine

        ByLineNbrForResequence
            duplicates
            Sort Order                
                Company
                PurchaseOrder
                LineNumber
                
        ByContractLine 
    		Instance Selection
    			where (ContractEntered)
    		Sort Order
    			ProcurementGroup
    			Contract
				ContractLine
    			Company
    			PurchaseOrder
    			PurchaseOrderLine 
    			
    	ByProcurementGroup
    		Sort Order
    			ProcurementGroup
    			Company
    			PurchaseOrder
    			PurchaseOrderLine 
    	
    	ByManufacturerNumber
    		Sort Order
    			ManufacturerNumber
    			Company
    			PurchaseOrder
    			PurchaseOrderLine

		ByVendorItem
			Sort Order
    			VendorItem
    			Company
    			PurchaseOrder
    			PurchaseOrderLine
    			
        ByMatchDetailKey
            indexed
            Sort Order
                Company
                PurchaseOrder
                ItemType
                MatchDetailKey
                PurchaseOrderLine
		
		ByItem
			Sort Order
				ProcurementGroup
				Item
				Company
				PurchaseOrder
				PurchaseOrderLine

		Set16
			Sort Order
				Company
				Item
				ShipToLocation
				Buyer
				Vendor
				MajorPurchasingClass
				MinorPurchasingClass
				PurchaseOrder
				PurchaseOrderLine

		Set17
			Sort Order
				Company
				Item
				EarlyDeliveryDate descending
				ShipToLocation
				Buyer
				Vendor
				MajorPurchasingClass
				MinorPurchasingClass
				PurchaseOrder
				PurchaseOrderLine

		ByContractCompanyLocation
			Sort Order
				ProcurementGroup
				Contract
				Company
				ShipToLocation
				PurchaseOrder
				PurchaseOrderLine
		
		Set18
			Sort Order
				Company
				MajorPurchasingClass
				MinorPurchasingClass
				ShipToLocation
				Buyer
				Vendor
				PurchaseOrder
				PurchaseOrderLine
				
		ByVendor
			Sort Order
				Vendor
				Company
				PurchaseOrder
				PurchaseOrderLine
				
		ByProcurementGroupVendor
			Sort Order
				ProcurementGroup
				Vendor
				Closed
				Company
				PurchaseOrder
				PurchaseOrderLine
				
		ByPatientProcedure
			indexed
			Sort Order
				Company
				PatientProcedure
				PurchaseOrder
				PurchaseOrderLine
			Instance Selection
				where (PatientProcedureEntered)
				
		ByPOLine
    		indexed
    		Sort Order
    			Company
    			PurchaseOrder
    			ShipToLocation
    			PurchaseOrderLine
    			
    	ByEarlyDeliveryDate
            indexed
            Sort Order
                PurchaseOrderLineLifeCycleState
                EarlyDeliveryDate
                Buyer
                Company
                PurchaseOrder
                PurchaseOrderLine

    Field Rules
		InspectionRequired
			if (action type.Create
			and InventoriedOrNonstock)
				default to ItemLocationRel.InspectionRequired

			if (InspectionRequired)
				constraint (not IsDropship)
					"DropShipmentsCannotRequireInspection"
		
		CnCode
			default to ContractLine.ConsignCode
			default to PurchaseOrder.DefaultBillCode
			default to Item.ConsignCode
			
    	ShipToLocation
			initial value is PurchaseOrder.ShipToLocation
        	default to PurchaseOrder.ShipToLocation
			if(TransientFromBlanketContract)
				if(PurchaseOrder.BlanketOrStandingContract.ContractParticipantsExist)
					constraint (ContractParticipantLocationsRel exists)
						"CannotAdd,LocationDoesNotParticipateInBlanketContract"	
            constraint (LineBuyerLocationsRel exists
            or 			BuyerLocationsRel not exists)
            	"Line<LineNumber>:Location<ShipToLocation>NotValidForBuyer<PurchaseOrder.Buyer>"            
            
            if (ShipToLocation changed)
				if (IsHSNSACCodeEnabled)
					confirmation required
						"ChangingShipToLocationChangesTaxCode,Continue?"
					initialize TaxCode
				initialize Contract
				initialize ContractLine
				initialize Tier
				initialize Preferred
				initialize ManufacturerContract

        Item
			default ItemType to DefaultItemType
			required
			if (InventoriedOrNonstock)
				if  (OriginalItem not entered
				and (TransientItemSubstitute  
				or  (Item.ItemGroup.AutomaticItemSubstitute and action type.Create
				and  not TransientBypassSubstitution)))
					if (SubstituteItemsWithLocationAndPriorityRel exists) 
						for each SubstituteItemsWithLocationAndPriorityRel
							include AutomaticSubstituteRoutine

					if (OriginalItem not entered
					and	SubstituteItemByPriorityWithCompanyOnlyRel exists) 
						for each SubstituteItemByPriorityWithCompanyOnlyRel
							include AutomaticSubstituteRoutine

					if (OriginalItem not entered
					and SubstituteItemByPriorityNoLocationRel exists) 
						for each SubstituteItemByPriorityNoLocationRel
							include AutomaticSubstituteRoutine
					
            if (OriginalLineNumber entered)
            	cannot be changed
            		"CannotChangeItem;SubstituteVendorItemLinesExistForThisPurchaseOrderLine"
            
            if (!IsPrinted)
				if (InventoriedOrNonstock)
					constraint (Item exists)
						"Item<Item>DoesNotExist"
					if (not PreviouslyReleased)								
						constraint (Item.Active)		
							"Item<Item>IsInactive"
						constraint (not Item.Discontinued)					
							"Item<Item>IsDiscontinued"
						if (ItemLocationRel exists)
							constraint (ItemLocationRel.ItemLocation.Active)
		        				"ItemLocationIsInactive;Location:<ShipToLocation>,Item:<Item>"   
							constraint (not ItemLocationRel.ItemLocation.Discontinued) 
								"Item<Item>AtItemLocation<ShipToLocation>IsDiscontinued"
            if (ItemType.Inventoried)
            	constraint (ItemLocationRel exists)
            		"Item<Item>DoesNotExistAtThisLocation"
            	constraint(ItemLocationRel.InventoryTracked)
            		"Item<Item>NotInventoryTracked"
				if (ItemLocationRel exists)
					constraint (ItemLocationRel.AllowReceipt)
						"ItemLocation<Item>DoesNotAllowReceipts" 
			
			if (not LocalReplaceItemFlag)
				if (old ItemType.Inventoried or ItemType.Inventoried)
	    			cannot be changed
	    				"CannotChangeLineItem,OldOrNewItemIsInventoryType" 

				if (ContractLine entered
				and ContractLine not changed)
					cannot be changed
						"CannotChangeItemWhileContractLineIsEntered"
			
			if (InventoriedOrNonstock)
				constraint (!RecallProductItemForItemHardErrorExists)
					"CannotAddItem;Item<Item>IsOnActiveRecallNotice<first RecallProductItemForItemHardErrorRel.RecallNotice>"
				if (RecallProductItemForItemWarningExists)
					confirmation required
						"Item<Item>IsOnActiveRecallNotice<first RecallProductItemForItemWarningRel.RecallNotice>;DoYouWantToContinue?"
						
			if (MatchedQuantity entered 
			or ReceivedQuantity entered)
				cannot be changed
					"CannotChangeItem;MatchedOrReceivedQuantityExists"
			else
			if (UnmatchedPayablesInvoiceDetailsRel exists 
			or UnreleasedPurchaseOrderReceiptLinesRel exists)
				cannot be changed
					"CannotChangeItem;UnreleasedInvoiceOrReceiptForPurchaseOrderExists"

		ItemType
    		if (old ItemType.Inventoried or ItemType.Inventoried)
    			cannot be changed
    				"CannotChangeItemTypeToOrFromInventory" 
    				
    		if (ItemType.Inventoried)
				constraint (not PurchaseOrder.IsDropship)
					"CannotAddInventoriedLinesForDropshipPurchaseOrder"
						
    		if (PurchaseOrder.IsSubcontractorPurchaseOrder)
				constraint (not ItemType.Inventoried)
					"SubcontractorPO,CannotHaveInventoryItemsOnThePO" 
    		if (old ItemType.Service or ItemType.Service)
    			if (MatchedQuantity entered)
	    			cannot be changed
	    				"CannotChangeToOrFromServiceType,InvoiceExists" 
    			if (ReceivedQuantity entered)
    				cannot be changed
    					"CannotChangeToOrFromServiceType,ReceiverExists" 
			
			if (ContractLine entered
			and ContractLine not changed)
				cannot be changed
					"CannotChangeItemTypeWhileContractLineIsEntered"
					
			if (MatchedQuantity entered 
			or ReceivedQuantity entered)
				cannot be changed
					"CannotChangeItemType;MatchedOrReceivedQuantityExists"
			else
			if (UnmatchedPayablesInvoiceDetailsRel exists 
			or UnreleasedPurchaseOrderReceiptLinesRel exists)
				cannot be changed
					"CannotChangeItemType;UnreleasedInvoiceOrReceiptForPurchaseOrderExists"

			if (old Item entered  and Item changed
			and ItemType.NonStock and Item exists)
				initialize Manufacturer
				initialize ManufacturerNumber
				initialize MajorPurchasingClass
				initialize MinorPurchasingClass
				initialize UNSPSCCode

		DistributionBy
			default to DistributionBy.ByPercent
			initial value is DistributionBy.ByPercent

			if (not BypassDistributionCreation)	
				if (DistributionBy changed)
					if (PurchaseOrderLineDistributionsRel exists)
						cannot be changed
							"CannotChangeDistributionBy,DistributionsExist" 
					initialize DistributionTotalsComputed
			
		ExtendedAmount
			force default to CalculateExtendedAmount
			
		EnteredContractLine



			initialize EnteredContractLine 
    
    	Contract
    		if (PurchaseOrder.FromBlanket)
    			cannot be changed
    				"CannotUpdateContractForPurchaseOrderLine<PurchaseOrderLine>;BlanketContractReferenceExists"
    				
			if ((ItemType.Special
			and Contract.UOMSMustMatchForSpecials)
			and EnteredBuyUOM changed
			and EnteredBuyUOM not = ContractLine.UOM)
				initialize Contract
    			initialize ContractLine  
			
			if  (not ItemType.Service
			and (Contract entered
			and not Contract.AllowReferenceOfItemsNotOnContract))
				if (Item exists)
					constraint (RelatedItemOnContractLineRel exists)
						"Item<Item>IsNotOnReferencedContract<Contract>"
				else
					if (VendorItem entered)
						constraint (RelatedVendorItemOnContractLineRel exists)
							"VendorItem<VendorItem>IsNotOnReferencedContract<Contract>"
					
			if (Contract changed
            and old Contract.UseCommitments
            and (!Contract.UseCommitments
            or   Contract not entered))
               	for each PurchaseOrderLineDistribution set
               		invoke UpdateGLCommitmentIndirect each
               			invoked.RemoveContractReversal = true   			
            
            if (Contract changed
            and (old Contract.UseCommitments = false
            or   old Contract not entered)
            and Contract.UseCommitments)
               	for each PurchaseOrderLineDistribution set
               		invoke UpdateGLCommitmentIndirect each
               			invoked.AddContractReversal = true    
            
            if  (Contract changed
            and  CostOption.NoCharge)

				invoke UpdateFast PurchaseOrderLineDistribution set
					


 			if (Contract.Stockless
 			and LineSourcesReqLocStocklessRel exists
 			and ItemType.Inventoried)
 				ItemType			= ItemType.NonStock	

			if (CombineLinesWithDifferentContractNotAllowed and Contract entered)
				constraint (OtherLinesWithDifferentContractRel not exists)
					"VendorDoesNotAllowDifferentContractsOnSamePurchaseOrder"
			
		ContractLine
			if (PurchaseOrder.FromBlanket)
    			cannot be changed
    				"CannotUpdateContractLineForPurchaseOrderLine<PurchaseOrderLine>;BlanketContractReferenceExists"
		
			if (Contract not entered and ContractLine entered)
				CostCode = CostCode.Entered
				initialize ContractLine

			if (ItemType.Service
			and Contract entered
			and not Contract.AllowReferenceOfItemsNotOnContract)
				required
					"ContractLineIsRequiredForServiceItemOnContract"
					
				constraint (ContractLine.ForServiceCostDefaulting)
					"ContractLineIsNotAServiceItemType" 
			
			if (not invoking action = "UpdateLineFromHeader")
				constraint (not ContractLine.OnHold)
					"ContractLineOnHold;CannotUse"

        VendorItem
            if (IsOriginalWithSubstitute)
            	cannot be changed
            		"CannotChangeVendorItem;SubstituteVendorItemLinesExistForThisPurchaseOrderLine"
            else
				if ((Contract entered and ContractLine entered)
				and ContractLine not changed
				and (not LocalReplaceItemFlag
                and (VendorItem entered
				and VendorItem not = ContractLine.VendorItem)))
					cannot be changed
						"CannotChangeVendorItemWhileContractLineIsEntered"
			
			if (InventoriedOrNonstock)
				if (Company.CostOrVendorItemDefaultingOrder.VendorItemBeforeCost)
					default to DerivedDefaultVendorItem
				
				if (VendorItem entered)
					if (ActiveVendorItemsRel exists)
						constraint (VendorItemExists)
							"CannotEnterVendorItemDifferentFromExisting"
					
					if (VendorItemsRel exists)
						if (not IsPrinted and VendorItemExists)
							constraint (VendorItem.Active)		
								"VendorItemIsInactive"
						
						constraint (!RecallProductItemForItemHardErrorExists)
							"CannotAddItem;ItemIsOnActiveRecallNotice<first RecallProductItemForItemHardErrorRel.RecallNotice>"
									
						if (RecallProductItemForItemWarningExists)
							confirmation required
								"ItemIsOnActiveRecallNotice<first RecallProductItemForItemWarningRel.RecallNotice>;DoYouWantToContinue?"
			
			if (VendorItem changed)							   
				initialize VendorPriceUOM
				initialize VendorPriceUOMMultiplier
				initialize VendorPriceUnitCost
				initialize VendorPriceUOMQuantity
				initialize VendorPriceUOMQuantityToProcess
				if (VendorBackorderDetailsForPORel exists)
					invoke FastUpdate VendorBackorderDetailsForPORel
						invoked.VendorItem = VendorItem

        EnteredBuyUOM
    		if (Company.RequireUnitOfMeasure)
				if (not TransientBypassUnitCostValidation)
        			required
        				"CompanyRequiresUnitOfMeasureToBeEntered" 
    		else
	        	if (InventoriedOrNonstock)
	        		if (Company.RequireUnitOfMeasure)
		        			required
		        				"CompanyRequiresEntryOfBuyUnitOfMeasure" 
	        		else 
						default to VendorItem.VendorBuyUOM
						default to ItemGTIN.UnitOfMeasure
						default to ItemLocationRel.DefaultSourceUOM.UnitOfMeasure
						default to LocationItemUOMDefaultBuyingRel.UnitOfMeasure
						default to Item.DefaultBuyUOM
						
					if (HasItemLocationStockUOM)
						if (TransientOnline entered
						or  not DerivedOrderUOMRounding)
							constraint (LocationItemUOMRel.OKForBuying)
								"<EnteredBuyUOM>IsNotValidUnitOfMeasureOnLocationForThisItem<Item>"
					else
						constraint (ItemUOMBuyRel.OKForBuying)
							"<EnteredBuyUOM>IsNotValidUnitOfMeasureForItem<Item>"

					if (EnteredBuyUOM entered
					and VendorItemExists
					and VendorItem.VendorBuyUOM.UnitOfMeasure entered
					and not TransientFromBlanketContract)
						if (HasItemLocationStockUOM)


							if (LocationItemUOMRel.OKForBuying)
								constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = EnteredBuyUOM)
									"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>DoesNotMatchEnteredOrDefaultedBuyUnitOfMeasureOf<EnteredBuyUOM>"
							else
								constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = DerivedLocationStockUOM) 
									"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>DoesNotMatchNewEnteredOrDefaultedBuyUnitOfMeasureOf<DerivedLocationStockUOM>"
						else
							constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = EnteredBuyUOM) 
								"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>DoesNotMatchEnteredOrDefaultedBuyUnitOfMeasureOf<EnteredBuyUOM>"
					
        	if (not TransientBypassUnitCostValidation)
				if  (not ItemType.Service
				or   ContractLine not entered)
	        		required



        	if (InventoriedOrNonstock)
				if (HasItemLocationStockUOM)
					if (TransientOnline entered
					or  not DerivedOrderUOMRounding)
						constraint (LocationItemUOMRel.OKForBuying)
							"<EnteredBuyUOM>IsNotValidUnitOfMeasureOnLocationForThisItem<Item>"
				else
					constraint (ItemUOMBuyRel.OKForBuying)
						"<EnteredBuyUOM>IsNotValidUnitOfMeasureForItem<Item>"

	        	if (EnteredBuyUOM entered
	        	and VendorItemExists
	        	and VendorItem.VendorBuyUOM.UnitOfMeasure entered
	        	and not TransientFromBlanketContract)
					if (HasItemLocationStockUOM)
						if (LocationItemUOMRel.OKForBuying)
							constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = EnteredBuyUOM)
								"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>DoesNotMatchEnteredUnitOfMeasureOf<EnteredBuyUOM>"
						else
							constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = DerivedLocationStockUOM) 
								"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>DoesNotMatchNewEnteredUnitOfMeasureOf<DerivedLocationStockUOM>"
					else
						constraint (VendorItem.VendorBuyUOM.UnitOfMeasure = EnteredBuyUOM)
							"VendorItemBuyUnitOfMeasureOf<VendorItem.VendorBuyUOM.UnitOfMeasure>DoesNotMatchEnteredUnitOfMeasureOf<EnteredBuyUOM>"

				if (HasItemLocationStockUOM
				and	action type.Create
				and	InventoriedOrNonstock)
					if (not LocationItemUOMRel.OKForBuying) 
						initialize UOMCalculation
						UOMCalculation.InputUOM			= EnteredBuyUOM
			 			UOMCalculation.InputToUOM		= DerivedLocationStockUOM 
						UOMCalculation.InputQuantity	= Quantity
						UOMCalculation.InputUnitCost	= VendorBuyUnitCost
						UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
						UOMCalculation.DoRounding 	 	= true
						UOMCalculation.InputRoundType	= UOMCalculation.InputRoundType.High	
						Quantity						= UOMCalculation.OutputQuantity
						QuantityToProcess				= UOMCalculation.OutputQuantity
						VendorBuyUnitCost				= UOMCalculation.OutputUnitCost
						EnteredUnitCost					= UOMCalculation.OutputUnitCost
						EnteredBuyUOM					= DerivedLocationStockUOM
						EnteredBuyUOMMultiplier			= DerivedLocationStockUOMMultiplier 




        	
			if (MatchedQuantity entered
			or  ReceivedQuantity entered)
				cannot be changed
					"CannotChangeUOM;MatchedOrReceivedQuantityExists"
    		else
			if (UnmatchedPayablesInvoiceDetailsRel exists 
			or UnreleasedPurchaseOrderReceiptLinesRel exists)
				cannot be changed
					"CannotChangeUOM;UnreleasedInvoiceOrReceiptForPurchaseOrderExists"
    
        	if (EnteredBuyUOM changed)				
	        	if (ReceivedQuantity entered		
	            and InventoriedOrNonstock)
	            	initialize UOMCalculation
	            	UOMCalculation.InputUOM            = old EnteredBuyUOM
	            	UOMCalculation.InputToUOM          = EnteredBuyUOM
	            	UOMCalculation.InputQuantity       = ReceivedQuantity
	            	UOMCalculation.Method              = UOMCalculation.Method.ConvertToAlternate
	            	                    
	            	ReceivedQuantity = UOMCalculation.OutputQuantity
			
				initialize VendorPriceUOM	
				initialize VendorPriceUOMMultiplier
				initialize EnteredBuyUOMMultiplier


        EnteredBuyUOMMultiplier
			if(IsFromVendorReturn)
				default to VendorReturnLine.EnteredUOMMultiplier
			else
			if (InventoriedOrNonstock)
				default to ItemUOMBuyRel.UOMConversion
				if (ReceivedQuantity not entered
				and MatchedQuantity  not entered)
					force default to ItemUOMBuyRel.UOMConversion
			else
				force default to 1
        	
		CostOption
 			if (CostOption.NoCharge)
				constraint (not ServiceCode.Amount)
					"CannotSet_Cost_OptionTo_No_ChargeFor_Service_ItemBy_Amount"
					
				initialize VendorBuyUnitCost
               	initialize EnteredUnitCost
               	initialize VendorPriceUnitCost


			if (ItemLocationRel.NoCharge and old CostOption.NoCharge)
				cannot be changed
					"Item<Item>IsFlaggedAsNoChargeAtThisLocation<ShipToLocation>" 
					


			if (!PurchaseOrder.LocalFromInterface
			and PurchaseOrder.OriginatingInterfaceRun = 0)
				if (not (old CostOption.CostRequired and CostOption.VendorDetermined))
					if (InvoiceDetailExists)
						cannot be changed
							"CannotChangeCostOptionAsInvoice(s)Exists" 
					if (ReceivedQuantity > 0)
						cannot be changed
							"CannotChangeCostOptionAsReceipt(s)Exists" 

			if (PurchaseOrder.LocalFromInterface)
				default to CostOption.CostRequired
		
		CostCode
			if (not LocalCopyPurchaseOrder
			and not TransientBypassCostDefaulting) 
				if (VendorBuyUnitCost entered
				or  EnteredUnitCost entered) 
					default to CostCode.Entered
					if (old VendorBuyUnitCost != VendorBuyUnitCost
					or  old EnteredUnitCost != EnteredUnitCost) 
						CostCode = CostCode.Entered
				else     
					if (CostOption.CostRequired)
						if (CostOption changed
						or (VendorBuyUnitCost changed
						or EnteredUnitCost changed)) 
							initialize CostCode
					else

						if	(not FromInterfaceUpdate
						and  CostOption entered
						and	(action type.Create or CostOption changed))
							force default to CostCode.Entered
				
        Quantity
			if (PunchoutId entered
			and not AllowChangeToPunchoutPurchaseOrder)
				cannot be changed
					"CannotChangeQuantity,PurchaseOrderHasPunchoutItemAttached"
			
			if (not ServiceCode.Quantity)
				default to 1
			if (!PurchaseOrder.FromBlanketOrTemplate)
	            if (ServiceCode.Amount)
	            	constraint(Quantity = 1)
	            		"ServiceItemByAmount,QuantityMustBe1"
					required
				
			QuantityToProcess = Quantity - CancelQuantity
			
			if (Quantity changed)
				constraint (instance count of PurchaseOrderLineSource set <= 1 or BypassQuantityFromSource)
					"MultipleSourceRecordsExist,MustChangeQuantityOnSourceRecord"
				constraint (QuantityToProcess >= ReceivedQuantity and QuantityToProcess >= MatchedQuantity)
					"CannotReduceQuantityBelowMatchedOrReceivedQuantity"
				if (CancelQuantity entered)
					constraint (Quantity < old Quantity)
						"CannotIncreaseQuantity,LineCancelled"
				
				initialize SupplementaryQuantity
			
			if (action type.Create 
			and not IsFromVendorReturn
			and IsInventoryType
			and EnteredBuyUOM not = Item.StockUOM
			and not IsCatchWeightItem)
				initialize UOMCalculation
				UOMCalculation.InputUOM				= EnteredBuyUOM
				UOMCalculation.InputQuantity		= Quantity
				UOMCalculation.Method				= UOMCalculation.Method.ConvertToStock
				
				constraint (UOMCalculation.OutputQuantity decimals <= Item.NumberOfDecimalsQuantity)
					"TooManyDecimalDigitsEnteredForQuantity:MaxForItem<Item>Is<Item.NumberOfDecimalsQuantity>"




    	
    	VendorBuyUnitCost
			if (action type.Create) 
				if (EnteredUnitCost entered and VendorBuyUnitCost entered) 
					constraint (EnteredUnitCost = VendorBuyUnitCost * (VendorPriceUOMMultiplier / EnteredBuyUOMMultiplier))
						"EnteredUnitCostShouldBeConvertedFromVendorBuyUnitCostCorrectly"
				else
					if (VendorBuyUnitCost entered)
						EnteredUnitCost = VendorBuyUnitCost * (VendorPriceUOMMultiplier / EnteredBuyUOMMultiplier)
					else
		    			VendorBuyUnitCost = EnteredUnitCost * (EnteredBuyUOMMultiplier / VendorPriceUOMMultiplier)
			else
				if (EnteredUnitCost changed)
					if (VendorBuyUnitCost changed)
						constraint (EnteredUnitCost = VendorBuyUnitCost * (VendorPriceUOMMultiplier / EnteredBuyUOMMultiplier))
							"EnteredUnitCostShouldBeConvertedFromVendorBuyUnitCostCorrectly"
					else
						VendorBuyUnitCost = EnteredUnitCost * (EnteredBuyUOMMultiplier / VendorPriceUOMMultiplier)
				else
				if (VendorBuyUnitCost changed)
					EnteredUnitCost = VendorBuyUnitCost * (VendorPriceUOMMultiplier / EnteredBuyUOMMultiplier)
			
			if (PunchoutId entered
			and not AllowChangeToPunchoutPurchaseOrder)
				cannot be changed
					"CannotChangeUnitCost,PurchaseOrderHasPunchoutItemAttached"
					
    	EnteredUnitCost
    	    initialize LocalContractIsEntered
    	    if (Contract entered)
    	    	LocalContractIsEntered = true 		
    		
    		if  (not TransientBypassCostDefaulting
    		and (VendorBuyUnitCost not entered 
			or   VendorBuyUnitCost changed
    		or   EnteredBuyUOM   changed
    		or	 Contract changed
    		or	 ShipToLocation changed
    		or   VendorItem changed
    		or   Vendor changed
    		or  (Quantity changed
    		and  Contract.LineLevelBreaks.OrderTotals)
    		or   action type.Create))
    			
    			if (PurchaseOrder.FromBlanket)
    				cannot be changed
    					"CannotChangeUnitCostForPurchaseOrderLine<PurchaseOrderLine>;BlanketContractReferenceExists"
    				
    			if (Contract changed and not ItemType.Service)
					initialize ContractLine
					initialize Preferred
					initialize Tier
					
				if (ContractLine entered
				and ContractLine.UsesUOMSMustMatch
				and ContractLine.UOM != EnteredBuyUOM)
					initialize Contract
					initialize ContractLine
					initialize Preferred
					initialize Tier
				
				if (PurchaseOrder.BlanketOrStandingContract entered) 
					force default Contract to PurchaseOrder.BlanketOrStandingContract
					initialize CostCode
				


				if (FromInterfaceUpdate)
					ProcurementCostDefault.InRequestingCompany			= LocalOperatingCompanyFromInterface
					ProcurementCostDefault.InRequestingLocation			= LocalRequestingLocationFromInterface
					ProcurementCostDefault.InStockless					= RequestingLocationFromInterfaceRel.Stockless
				else
					if (LineSourcesFromRQRel exists)
						ProcurementCostDefault.InRequestingCompany			= first LineSourcesFromRQRel.Company
						ProcurementCostDefault.InRequestingLocation			= first LineSourcesFromRQRel.RequestingLocation
						ProcurementCostDefault.InStockless					= first LineSourcesFromRQRel.RequestingLocation.Stockless
					else

					if (PurchaseOrder.DefaultSourceInformation entered)
						ProcurementCostDefault.InRequestingCompany		= PurchaseOrder.DefaultSourceInformation.DefaultOperatingCompany
						ProcurementCostDefault.InRequestingLocation		= PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation
						ProcurementCostDefault.InStockless				= PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation.Stockless
				
				ProcurementCostDefault.InCompany					= Company
				ProcurementCostDefault.InItem						= Item
				ProcurementCostDefault.InQuantity					= Quantity
				ProcurementCostDefault.InItemType					= ItemType
				ProcurementCostDefault.InQuantityUOM				= EnteredBuyUOM
				ProcurementCostDefault.InCostOption					= CostOption
				ProcurementCostDefault.PurchaseOrder				= PurchaseOrder
				ProcurementCostDefault.InProcurementGroup			= Company.ProcurementGroup
				ProcurementCostDefault.InManufacturerCode			= Manufacturer.ManufacturerCode
				ProcurementCostDefault.InManufacturerDivision		= Manufacturer.ManufacturerDivision
				ProcurementCostDefault.InManufacturerNumber			= ManufacturerNumber
				ProcurementCostDefault.InUnitCost					= VendorBuyUnitCost
				ProcurementCostDefault.InCostOption					= CostOption
				ProcurementCostDefault.InPreference					= Preferred
				ProcurementCostDefault.InLocation					= ShipToLocation
				ProcurementCostDefault.InContractGroup				= Contract.ContractGroup
				ProcurementCostDefault.InContract					= Contract
				ProcurementCostDefault.InContractLine				= ContractLine
				ProcurementCostDefault.InDate						= PurchaseOrder.PurchaseOrderDate
				ProcurementCostDefault.InVendor						= Vendor
				ProcurementCostDefault.InDescription				= Description
				ProcurementCostDefault.InServiceCode				= ServiceCode
				ProcurementCostDefault.InTier						= Tier
				ProcurementCostDefault.InVendorItem					= VendorItem
				ProcurementCostDefault.InPurchaseFromLocation		= PurchaseFromLocation
				ProcurementCostDefault.InRetainageTracking			= PurchaseOrder.RetainagePercentCompleteTracking
				ProcurementCostDefault.InDoUpdates					= true

				ProcurementCostDefault.InBypassQuantityConversion	= LocalBypassQuantityConversion
				if (CapitatedComponentGroup entered
				or  CapitatedProcedureLevel entered)
					ProcurementCostDefault.InCapitatedContract      = true 
				ProcurementCostDefault.InCapitatedProcedureLine     = CapitatedProcedureLine    
				ProcurementCostDefault.InCapitatedComponentGroup    = CapitatedComponentGroup 
				ProcurementCostDefault.InCapitatedProcedureLevel    = CapitatedProcedureLevel
				ProcurementCostDefault.InDoDebug					= DoDebug
				if (LocalCopyPurchaseOrder 
				or  Vendor changed)
					ProcurementCostDefault.InDoNotIgnoreNoCharge	= true
				if (CurrencyChanged)
					ProcurementCostDefault.InDoNotConvertCurrency	= true

				Execute	= ProcurementCostDefault.DefaultUnitCost
				
				if (ProcurementCostDefault.InStockless
				and ProcurementCostDefault.OutputUnitCost not entered
				and not ProcurementCostDefault.OutputCostOption.NoCharge
				and not ProcurementCostDefault.OutputCostOption.VendorDetermined)
					ProcurementCostDefault.InStockless	= false
					Execute	= ProcurementCostDefault.DefaultUnitCost
				
				if (LocalContractIsEntered and ContractLine entered)
					constraint (not ContractLine.OnHold)
						"ContractLineOnHold;CannotUse"

				if (Contract changed and EnteredUnitCost entered
				and not Contract.AllowReferenceOfItemsNotOnContract)
					constraint (Contract not entered) 
						"CannotChangeContractWhileUnitCostIsEntered"
				


				if (DoDebug)
					display "POL:InEnteredUnitCostFieldRule"
					display "POL:CostCode:<CostCode>"
				
				if	(CostCode.Entered 
				and	(not ItemType.Service or ServiceCode.Quantity)
				and  not LocalVendorChange)
					if (DoDebug)
						display "POL:NonDefaulting"
					if ((action type.Create and ProcurementCostDefault.LastCostOrPO)
					or  old CostCode.LastPoCreated or old CostCode.LastCost)
						constraint (Buyer.OverrideLastPOLastCost)
							"BuyerNotAuthorizedToChangeUnitCostFromLastCostOrLastPO"
					
					if (ProcurementCostDefault.IsStrategicSourcing)
						constraint (Buyer.OverrideSourcingCost)
							"BuyerNotAuthorizedToChangeUnitCostFromStrategicSourcing"
					
					if  (ProcurementCostDefault.CostCodeFromContracts 
					and (action type.Create or OldCostCodeFromContracts))
						constraint (Buyer.OverrideContractCost)
							"BuyerNotAuthorizedToChangeUnitCostFromContracts"
						initialize Contract
						initialize ContractLine
						initialize Preferred
						initialize Tier
					
					if (not Contract.AllowReferenceOfItemsNotOnContract
					and CapitatedComponentGroup !entered
					and CapitatedProcedureLevel = 0)
						constraint (Contract not entered)
							"CannotEnterBothUnitCostAndContract"
						
					if (ProcurementCostDefault.OutputNoCharge)
						initialize VendorBuyUnitCost
						initialize EnteredUnitCost
						initialize VendorPriceUnitCost
						CostOption = ProcurementCostDefault.OutputCostOption
						CostCode   = ProcurementCostDefault.OutputCostCode
					
				else 
					if  (((LocalCopyPurchaseOrder and not LocalDefaultCostFromCopy) and not TransientFromBlanketContract)
					and ((Buyer.OverrideContractCost	and ProcurementCostDefault.CostCodeFromContracts)
					or   (Buyer.OverrideLastPOLastCost	and ProcurementCostDefault.LastCostOrPO)
					or	 (not ProcurementCostDefault.LocalFoundCost)))
						if (DoDebug)
							display "POL:NonDefaulting2"				
						CostCode = CostCode.Entered
					else
						if (DoDebug)
							display "POL:Defaulting3"
						if (VendorBuyUnitCost entered and ServiceCode.Amount)
							if (ProcurementCostDefault.OutputContractLine.BaseCost entered)
								if (VendorBuyUnitCost != ProcurementCostDefault.OutputContractLine.BaseCost)
									constraint (Buyer.OverrideContractCost)
										"BuyerNotAuthorizedToChangeUnitCostFromContracts"
										
								constraint (VendorBuyUnitCost <= ProcurementCostDefault.OutputContractLine.BaseCost) 
									"UnitCostForServiceItemMustNotExceedContractLineBaseCost"
							CostCode					= ProcurementCostDefault.OutputCostCode
						else
							if (FromInterfaceUpdate and ProcurementCostDefault.OutputUnitCost not entered)
								VendorBuyUnitCost		= LocalUnitCostFromInterface
								CostCode				= LocalCostCodeFromInterface
							else
								VendorBuyUnitCost		= ProcurementCostDefault.OutputUnitCost
								CostCode				= ProcurementCostDefault.OutputCostCode
						
						CostOption						= ProcurementCostDefault.OutputCostOption
						VendorItem						= ProcurementCostDefault.OutputVendorItem
						EnteredBuyUOM					= ProcurementCostDefault.OutputCostUOM
						if (InventoriedOrNonstock)
							EnteredBuyUOMMultiplier		= ItemUOMBuyRel.UOMConversion
						VendorPriceUOM					= DerivedVendorPriceUOM
						VendorPriceUOMMultiplier		= DerivedVendorPriceUOMMultiplier
						EnteredUnitCost					= DerivedVendorPriceUnitCost
						Contract						= ProcurementCostDefault.OutputContract
						ContractLine					= ProcurementCostDefault.OutputContractLine
						Tier							= ProcurementCostDefault.OutputMfgContractTierInfo
						Preferred						= ProcurementCostDefault.OutputPreference
						Quantity						= ProcurementCostDefault.OutputQuantity
						QuantityToProcess				= Quantity - CancelQuantity
						if (DoDebug)
							display "POLCDOUT:CostDefaulting:VendorBuyUnitCost:<VendorBuyUnitCost>:EnteredUnitCost:<EnteredUnitCost>"
							display "POLCDOUT:Contract:<Contract>:CostCode:<CostCode>"
				
				if (Contract entered)
					include ValidateContract
				
				if (ItemType.Service
				and ContractLine entered)
					VendorItem			= ProcurementCostDefault.OutputVendorItem
					ServiceCode			= ProcurementCostDefault.OutputServiceCode
					EnteredBuyUOM		= ProcurementCostDefault.OutputCostUOM
				
				if (VendorReturnLine entered)
					if (EnteredUnitCost not entered)
						EnteredUnitCost = VendorReturnLine.UnitCost
						if (CostCode not entered)
							CostCode = CostCode.Entered
							
			default VendorItem to DerivedDefaultVendorItem
				
			if (InventoriedOrNonstock
			and VendorItemExists)
				include VendorItemProcessing
			
			if (CostOption not entered)
				CostOption = CostOption.CostRequired
			if (ServiceCode.Amount) 
				constraint (Quantity = 1)
					"SelectedContractLine<ContractLine>ServiceCodeIsBy<ServiceCode>,QuantityMustBe1"
				if (MatchServiceAmount > 0
				or ServiceCancelAmount > 0)
					constraint (VendorBuyUnitCost >= (MatchServiceAmount + ServiceCancelAmount))
						"CannotChangeServiceLineCostToLessThanMatchedOrCanceledAmount"	
			













			



			
			if (LocalOldHeaderCurrency entered)
				initialize CurrencyExchange
				SavedFromCurrency						= LocalOldHeaderCurrency
				CurrencyExchange.ToCurrency				= PurchaseOrder.Currency
				SavedExchangeDate						= PurchaseOrder.PurchaseOrderDate
				SavedTransactionAmount					= VendorBuyUnitCost
				LocalConversionRate						= CurrencyExchange.OutputCurrencyRate
				LocalFromCurrency	      				= LocalOldHeaderCurrency
				LocalToCurrency	      					= PurchaseOrder.Currency
				if (CurrencyRelationshipRel.MultDiv.Divide)
					VendorBuyUnitCost 						= (VendorBuyUnitCost / LocalConversionRate)
					EnteredUnitCost							= (EnteredUnitCost / LocalConversionRate)
				else
					VendorBuyUnitCost 						= (VendorBuyUnitCost * LocalConversionRate)	
					EnteredUnitCost							= (EnteredUnitCost * LocalConversionRate)			



				if (not Vendor changed)
					TransientBypassCostDefaulting		= true
				

			if (IsCostRequired)
				required
					"UnitCostIsRequired"





		
    	ServiceCode
    		if (ItemType.Service)
    			if (ContractLine not entered)
	    			required
	    				"ServiceCodeIsRequiredForServiceItems"
			else
				initialize ServiceCode
					
			if (old MatchedQuantity entered or old MatchedAmount entered)
				cannot be changed
					"CannotChangeServiceCodeIfMatchedQuantityOrAmountIsGreaterThan0" 
			
			if (old ServiceCode.Quantity and ServiceCode.Amount)
				if (PurchaseOrderAddOnChargesNotCanceledRel exists)
					cannot be changed
						"CannotChangeToAmountService,AddOnCostsExist" 
										
		Description
			initial value is Item.Description
			if (InventoriedOrNonstock)
				force default to Item.Description
			else
				default to ContractLine.ItemDescription
			
			required

		MatchDetailKey
			if  (ItemType.Inventoried 
			or   ItemType.NonStock)
				force default to Item
			else
			if  (ItemType.Special) 
				force default to VendorItem
			else
				force default to Description

		EarlyDeliveryDate
		
			initial value is PurchaseOrder.DefaultDeliveryDate
			if (PurchaseOrder.DefaultDeliveryDate entered)
				default to PurchaseOrder.DefaultDeliveryDate
			else
			if (StandingEarlyDeliveryDate not entered)
				if (DerivedLeadTimeDays entered)
					default to current corporate date + DerivedLeadTimeDays as days
			else	
			if (StandingEarlyDeliveryDate entered)	
				EarlyDeliveryDate = StandingEarlyDeliveryDate + DerivedLeadTimeDays as days
				if (EarlyDeliveryDate < PurchaseOrder.PurchaseOrderDate)
					EarlyDeliveryDate = PurchaseOrder.PurchaseOrderDate
				
			if (not ItemType.Service)	
				required
			
			constraint (EarlyDeliveryDate >= PurchaseOrder.PurchaseOrderDate)
				"DeliveryDateCannotBeEarlierThanPurchaseOrderDate"
		
		LateDeliveryDate
			constraint(LateDeliveryDate >= EarlyDeliveryDate)
        		"LateDeliveryDateCannotBeLessThanEarlyDeliveryDate"
		
		POShipDate
			constraint (POShipDate >= PurchaseOrder.PurchaseOrderDate)
				"ShipDateCannotBeEarlierThanPurchaseOrderDate"

		VendorPriceUOM	




			force default to DerivedVendorPriceUOM
			if (VendorPriceUOM changed)
				initialize VendorPriceUOMMultiplier

		VendorPriceUOMMultiplier 
			default to DerivedVendorPriceUOMMultiplier
			if (not InventoriedOrNonstock
			or (ReceivedQuantity not entered
			and MatchedQuantity  not entered))
				force default to DerivedVendorPriceUOMMultiplier

		VendorPriceUnitCost	
			force default to DerivedVendorPriceUnitCost
		
		VendorPriceUOMQuantity
			if (VendorPriceUOM = EnteredBuyUOM 
			or  VendorItem not entered)
				force default to Quantity
			else
				initialize UOMCalculation
        		UOMCalculation.InputUOM				= EnteredBuyUOM
        		UOMCalculation.InputToUOM			= VendorPriceUOM
        		UOMCalculation.InputQuantity		= Quantity
        		UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
        		
        		if (Item.NumberOfDecimalsQuantity.0Decimals)
    				UOMCalculation.ValidateDecimal	 = true
					UOMCalculation.LocalErrorMessage = ConvertErrorMessageVendorPrice
    			else
    				UOMCalculation.DoRounding		 = true
    			
    			force default to UOMCalculation.OutputQuantity
    			
		VendorPriceUOMQuantityToProcess
			if (VendorPriceUOM = EnteredBuyUOM)
				force default to QuantityToProcess
			else
				LocalVendorPriceQuantityToProcess = QuantityToProcess * (EnteredBuyUOMMultiplier / VendorPriceUOMMultiplier)
				force default to LocalVendorPriceQuantityToProcess
			
        Vendor
        	force default to PurchaseOrder.Vendor
        	
        	if (InventoriedOrNonstock and VendorItem entered)
	        	if (not PurchaseOrder.LocalVendorChanged)
		        	cannot be changed 
		        		"CannotEnterVendorItemDifferentFromExisting"				
		    
		    if (Vendor changed)
		    	initialize Contract
				initialize Tier
				initialize Preferred
				initialize VendorItem
				initialize Manufacturer
				initialize ManufacturerContract
				initialize ItemGTIN
			
			if (IsHSNSACCodeEnabled
    		and Vendor changed)
    			initialize TaxCode
        
		ReturnedQuantity






			if (PurchaseOrder.CreateForVendorReturn entered)
				constraint (instance count of VendorReturnLinesCreationRel <= 1)
					"CannotEnterMultipleVendorReturnLine"
				if(VendorReturnLinesCreationRel not exists)
					invoke Create VendorReturnLine
	        			invoked.Company								= Company
	        			invoked.VendorReturn						= PurchaseOrder.CreateForVendorReturn
	        			invoked.ReferenceNumber						= VendorReturnForCreateForVendorReturnRel.ReferenceNumber
	        			invoked.OriginalPurchaseOrder				= PurchaseOrder 
	        			invoked.OriginalPurchaseOrderLine			= PurchaseOrderLine
	        			invoked.Item								= Item
	        			invoked.Description							= Description
	        			invoked.ItemType							= ItemType
	        			invoked.ReturnQuantity						= ReturnedQuantity
	        			invoked.InspectionRequired					= InspectionRequired
	        			if (!VendorReturnForCreateForVendorReturnRel.VendorClaimType.NoCharge)
        					invoked.UnitCost						= TransReturnUnitCost	
	        			invoked.LastDistributionSequence			= LastDistributionSequence
	        			invoked.TaxCode								= TaxCode
	        			invoked.TaxUsageCode						= TaxUsageCode
	        			invoked.ProductTaxCategory					= ProductTaxCategory
	        			invoked.StockWeight							= StockWeight
	        			invoked.VendorItem							= VendorItem
	        			invoked.Contract    						= Contract
						invoked.ContractLine                        = ContractLine	        			
	        			invoked.ItemGTIN							= ItemGTIN
	        			invoked.EnteredUOM							= EnteredBuyUOM
	        			invoked.EnteredUOMMultiplier				= EnteredBuyUOMMultiplier
	        			invoked.VendorPriceUOM						= VendorPriceUOM
	        			invoked.VendorPriceUOMMultiplier			= VendorPriceUOMMultiplier
						if (IsCatchWeightItem)
							invoked.CatchWeightQuantity				= TransientCatchWeightReturnedQuantity

	        	else


	        		for each VendorReturnLinesCreationRel
	        			invoke Update each
	        				invoked.ReturnQuantity = ReturnedQuantity
	        				invoked.CatchWeightQuantity = TransientCatchWeightReturnedQuantity
	        				if (!VendorReturnForCreateForVendorReturnRel.VendorClaimType.NoCharge)
	        					invoked.UnitCost   = TransReturnUnitCost

		TransientCatchWeightReturnedQuantity
    		constraint (IsCatchWeightItem)
    			"CannotEnterCatchWeightStockQuantity;ItemNotSetUpForCatchWeightForLine<LineNumber>"
	        				
	    ItemGTIN
			if (IsSpecialOrService)																
				if (ContractLine.GlobalTradeItemNumber entered)
					default to ContractLine.GlobalTradeItemNumber
					constraint (ItemGTIN = ContractLine.GlobalTradeItemNumber)
						"GTINMustMatchContractLineForSpecialItem"
			else 																				
				if (Item.ItemGroup.AllowMultipleGTINs)												
					if (ContractLine.GlobalTradeItemNumber entered										
					and ContractLine.GlobalTradeItemNumber.UnitOfMeasure.UnitOfMeasure = EnteredBuyUOM  
					and ContractLine.GlobalTradeItemNumber.Active)	
						default to ContractLine.GlobalTradeItemNumber
					else																				
						default to GTINWithMatchingVendorItemRel.ItemGTIN									
						default to NoDefaultGTINRel.ItemGTIN

		    	if (ItemGTIN changed)
			    	if (ItemGTIN entered)
			    		Manufacturer = ItemGTIN.Manufacturer
			    		ManufacturerNumber = ItemGTIN.ManufacturerNumber
			    	else
			    		initialize Manufacturer
			    		initialize ManufacturerNumber
			    		
		    	if (PurchasingVendorRel.GTINInUse)
		    		for each ItemGTINsRel
	    				default to each.ItemGTIN
			    
			include ValidateGTIN
		    		
        Manufacturer
			if (InventoriedOrNonstock)
				if (VendorItem exists)
					if (VendorItem.Manufacturer entered)
						force default to VendorItem.Manufacturer
					
					if (VendorItem.ManufacturerNumber entered)
						force default ManufacturerNumber to VendorItem.ManufacturerNumber
						
				else
				if  (ItemLocationRel exists
				and (ItemLocationRel.Manufacturer entered
				or   ItemLocationRel.ManufacturerNumber entered)) 
					default to ItemLocationRel.Manufacturer
					default ManufacturerNumber to ItemLocationRel.ManufacturerNumber
				else
				if  (Item exists
				and (Item.Manufacturer entered
				or   Item.ManufacturerNumber entered))
					default to Item.Manufacturer
					default ManufacturerNumber to Item.ManufacturerNumber
				else
				if  (ItemGTIN entered
				and (ItemGTIN.Manufacturer entered
				or   ItemGTIN.ManufacturerNumber entered))
					default to ItemGTIN.Manufacturer
					default ManufacturerNumber to ItemGTIN.ManufacturerNumber
				
			default to ContractLine.Manufacturer

			if (ItemType.Special
			and ContractLine.Manufacturer entered)
				constraint (Manufacturer = ContractLine.Manufacturer)
					"ManufacturerDoesNotMatchManufacturer<ContractLine.Manufacturer>OnContractLine"

		ManufacturerNumber
				
			default to ContractLine.ManufacturerNumber   		
	
			if (ItemType.Special
			and ContractLine.ManufacturerNumber entered)
				constraint (ManufacturerNumber = ContractLine.ManufacturerNumber)
					"ManufacturerNumberDoesNotMatchManufacturerNumber<ContractLine.ManufacturerNumber>OnContractLine"
	
		MajorPurchasingClass
			if (InventoriedOrNonstock)
				default to Item.MajorPurchasingClass
	            if (Item.MajorPurchasingClass entered
				and not PurchaseOrderLineLifeCycleState.Closed)
	                constraint (MajorPurchasingClass = Item.MajorPurchasingClass)
	                    "CannotUseDifferentPurchasingClassForInventoryAndNon-stockItems"
	        
	        else            
	        	default to ContractLine.MajorPurchasingClass
				
		MinorPurchasingClass
			if (InventoriedOrNonstock)
				default to Item.MinorPurchasingClass
	            if (Item.MinorPurchasingClass entered
				and not PurchaseOrderLineLifeCycleState.Closed)
	                constraint (MinorPurchasingClass = Item.MinorPurchasingClass)
	                	"CannotUseDifferentPurchasingClassForInventoryAndNon-stockItems"
	                	
	            include ValidatePurchasingClass
        	
        	else
        		default to ContractLine.MinorPurchasingClass
        		include ValidatePurchasingClass
        		
        Taxable
			if (CostOption.NoCharge)
				cannot be entered
					"NoChargeItemCannotBeTaxable"
			else					
        	if (action type.Create)
				if (ContractLine entered)
					if (ContractLineTaxableRequestingLocationRel exists)
						if (first ContractLineTaxableRequestingLocationRel.Taxable = 1) 
							Taxable = true
							TaxableDetermined = true
						else
						if (first ContractLineTaxableRequestingLocationRel.Taxable = 2) 
							TaxableDetermined = true  
					if (ContractLineTaxableLocationRel exists
					and TaxableDetermined = false)
						if (first ContractLineTaxableLocationRel.Taxable = 1) 
							Taxable = true
							TaxableDetermined = true 
						else
						if (first ContractLineTaxableLocationRel.Taxable = 2) 
							TaxableDetermined = true 
					if (ContractLineTaxableCompanyRel exists
					and TaxableDetermined = false)
						if (first ContractLineTaxableCompanyRel.Taxable = 1) 
							Taxable = true
							TaxableDetermined = true 
						else
						if (first ContractLineTaxableCompanyRel.Taxable = 2) 
							TaxableDetermined = true 
					if (ContractLine.Taxable = true
					and TaxableDetermined = false)
						Taxable = true
						TaxableDetermined = true	
					if (ContractTaxableRequestingLocationRel exists
					and TaxableDetermined = false) 
						if (first ContractTaxableRequestingLocationRel.Taxable = 1)
							Taxable = true
							TaxableDetermined = true 	
						else
						if (first ContractTaxableRequestingLocationRel.Taxable = 2)
							TaxableDetermined = true 						

					if (ContractTaxableLocationRel exists
					and TaxableDetermined = false)
						if (first ContractTaxableLocationRel.Taxable = 1)
							Taxable = true
							TaxableDetermined = true 
						else
						if (first ContractTaxableLocationRel.Taxable = 2)
							TaxableDetermined = true 

					if (ContractTaxableCompanyRel exists
					and TaxableDetermined = false)
						if (first ContractTaxableCompanyRel.Taxable = 1)
							Taxable = true
							TaxableDetermined = true 
						else
						if (first ContractTaxableCompanyRel.Taxable = 2)
							TaxableDetermined = true 
				
				if (InventoriedOrNonstock and ItemLocationRel exists
				and not ItemLocationRel.PurchaseTaxable.DefaultToNextLevel
				and TaxableDetermined = false)
					if (ItemLocationRel.PurchaseTaxable.Yes)
						default to true
				else
				if (InventoriedOrNonstock and not Item.PurchaseTaxable.DefaultToNextLevel
				and TaxableDetermined = false)
					if (Item.PurchaseTaxable.Yes)
						default to true
				else
				if (TaxableDetermined = false)
					default to PurchaseOrder.DefaultTaxable
					
        	if (not Taxable)
				initialize InvoicedTaxAmount
				initialize AccruedTaxAmount
				initialize TaxCode
				initialize TaxUsageCode
				initialize TaxableUnitCost
				initialize ExtendedTaxableAmount
		
		OvershipmentToleranceOption
			if (OvershipmentToleranceOption.DisableOvershipmentMessage)
				initialize OvershipmentTolerancePercentage
			else
				if (OvershipmentToleranceOption.DefaultToNextLevel or OvershipmentTolerancePercentage not entered)
					if (PurchaseFromLocationRel.OvershipmentToleranceOption.DefaultToNextLevel
					or (PurchaseFromLocationRel.OvershipmentToleranceOption.UseOvershipmentTolerance
					and PurchaseFromLocationRel.OvershipmentTolerancePercentage not entered))
						if (PurchasingVendorRel.OvershipmentToleranceOption.DefaultToNextLevel
						or (PurchasingVendorRel.OvershipmentToleranceOption.UseOvershipmentTolerance
						and PurchasingVendorRel.OvershipmentTolerancePercentage not entered))
							force default to OvershipmentToleranceOption.UseOvershipmentTolerance
							force default OvershipmentTolerancePercentage to Company.OvershipmentTolerancePercentage
						else
							force default to PurchasingVendorRel.OvershipmentToleranceOption
							force default OvershipmentTolerancePercentage to PurchasingVendorRel.OvershipmentTolerancePercentage
					else
						force default to PurchaseFromLocationRel.OvershipmentToleranceOption
						force default OvershipmentTolerancePercentage to PurchaseFromLocationRel.OvershipmentTolerancePercentage
					
		UndershipmentToleranceOption
			if (UndershipmentToleranceOption.CancelAllBackorders)
				initialize UndershipmentTolerancePercentage
			else
				if (UndershipmentToleranceOption.DefaultToNextLevel or UndershipmentTolerancePercentage not entered)
					if (PurchaseFromLocationRel.UndershipmentToleranceOption.DefaultToNextLevel
					or (PurchaseFromLocationRel.UndershipmentToleranceOption.UseUndershipmentTolerance
					and PurchaseFromLocationRel.UndershipmentTolerancePercentage not entered))
						if (PurchasingVendorRel.UndershipmentToleranceOption.DefaultToNextLevel
						or (PurchasingVendorRel.UndershipmentToleranceOption.UseUndershipmentTolerance
						and PurchasingVendorRel.UndershipmentTolerancePercentage not entered))
							force default to UndershipmentToleranceOption.UseUndershipmentTolerance
							force default UndershipmentTolerancePercentage to Company.UndershipmentTolerancePercentage
						else
							force default to PurchasingVendorRel.UndershipmentToleranceOption
							force default UndershipmentTolerancePercentage to PurchasingVendorRel.UndershipmentTolerancePercentage
					else
						force default to PurchaseFromLocationRel.UndershipmentToleranceOption
						force default UndershipmentTolerancePercentage to PurchaseFromLocationRel.UndershipmentTolerancePercentage
				
		UndershipmentTolerancePercentage
			constraint (UndershipmentTolerancePercentage <= 100%)
				"UndershipmentTolerancePercentageCanNotBeGreaterThan100"  

        TaxCode
        	if (Taxable)
        		if (TaxEntityValue.ThirdParty.InforTax
        		and IsHSNSACCodeEnabled)
    				if (PurchaseFromLocation entered)
    					if (PurchaseFromLocation.TaxRegistrationType.UnRegistered)
		        			required
		        				"TaxCodeIsRequired"
    					if (PurchaseFromLocation.TaxRegistrationType.CompositeDealer)
    						default to HSNSACCode.NoTaxTaxCode
    					if (PurchaseFromLocation.TaxRegistrationType.SpecialEconomicZone)
    						default to HSNSACCode.ImportTaxCode
    					if (ShipToLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode entered
    					and PurchaseFromLocation.CurrentAddressRel.PostalAddress.Country.IsoCountryCode entered)
	    					if (PurchaseFromLocation.TaxRegistrationType.Registered)
	        					if (ShipToLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode = "IN")
	        						if (PurchaseFromLocation.CurrentAddressRel.PostalAddress.Country.IsoCountryCode = "IN")
			        					if( PurchaseFromLocation.CurrentAddressRel.PostalAddress.StateProvince entered
			        					and ShipToLocation.PostalAddressForPurchaseOrder.StateProvince entered) 
			        						if (PurchaseFromLocation.CurrentAddressRel.PostalAddress.StateProvince = ShipToLocation.PostalAddressForPurchaseOrder.StateProvince)
			        							default to HSNSACCode.IntrastateTaxCode
			        						else
			        							default to HSNSACCode.InterstateTaxCode
		        					else
		        						default to HSNSACCode.ImportTaxCode	
    				else
    					if (Vendor.TaxRegistrationType.UnRegistered)
		        			required
		        				"TaxCodeIsRequired"
    				 	if (Vendor.TaxRegistrationType.CompositeDealer)
    						default to HSNSACCode.NoTaxTaxCode
    					if (Vendor.TaxRegistrationType.SpecialEconomicZone)
    						default to HSNSACCode.ImportTaxCode
    					if (ShipToLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode entered
    					and Vendor.CurrentAddressRel.PostalAddress.Country.IsoCountryCode entered)
	    					if (Vendor.TaxRegistrationType.Registered)
	        					if (ShipToLocation.PostalAddressForPurchaseOrder.Country.IsoCountryCode = "IN")
	        						if (Vendor.CurrentAddressRel.PostalAddress.Country.IsoCountryCode = "IN")
		        						if (Vendor.CurrentAddressRel.PostalAddress.StateProvince entered
		        						and ShipToLocation.PostalAddressForPurchaseOrder.StateProvince entered)
			        						if (Vendor.CurrentAddressRel.PostalAddress.StateProvince = ShipToLocation.PostalAddressForPurchaseOrder.StateProvince)
			        							default to HSNSACCode.IntrastateTaxCode
			        						else
			        							default to HSNSACCode.InterstateTaxCode
			        				else
			        					default to HSNSACCode.ImportTaxCode
	        		required
	        			"TaxCodeIsRequired"
				if (ContractLine entered)
					default to first ContractLineTaxCodeRequestingLocationRel.TaxCode
					default to first ContractLineTaxCodeLocationRel.TaxCode
					default to first ContractLineTaxCodeCompanyRel.TaxCode 
					default to ContractLine.TaxCode	
					default to first ContractTaxCodeRequestingLocationRel.TaxCode
					default to first ContractTaxCodeLocationRel.TaxCode
					default to first ContractTaxCodeCompanyRel.TaxCode
        		if (InventoriedOrNonstock)
					default to ItemLocationRel.PurchaseTaxCode
					default to Item.PurchaseTaxCode
				default to PurchaseOrder.TaxCode
				default to ShipToLocation.PurchaseOrderTaxCode
        		
        		required
        			"Line<LineNumber>IsTaxable.PleaseEnterTaxCode"
        	else
        		cannot be entered
        			"TaxCodeCannotBeEnteredAsItemIsNotTaxable"
        
        TaxableUnitCost
        	if (Taxable)
        		default to EnteredUnitCost
        		if  (EnteredUnitCost < TaxableUnitCost
        		or  (EnteredUnitCost changed
        		and  old EnteredUnitCost = old TaxableUnitCost))
        			force default to EnteredUnitCost
        			
        OpenPurchaseAmount
        	include CalculateOpenPurchaseAmount
		
		ExtendedTaxableAmount
			if (Taxable)
				if (ServiceCode.Amount)
					force default to ((VendorPriceUOMQuantityToProcess * TaxableUnitCost) - ServiceCancelAmount)
				else
					force default to (VendorPriceUOMQuantityToProcess * TaxableUnitCost)

        CancelQuantity
        	cannot be changed
        		"CancelQuantityChanged,MustUseCancelFunction" 
        
        EAMWorkOrderNumber
        	constraint (ShipToLocation.EAMLocation.EAMLocation)
        		"CannotEnterWorkOrderNumberForANonEAMTypeLocation" 
        		
        	if (ReceivedQuantity entered 
        	or 	MatchedQuantity entered 
        	or  MatchedNotReceivedQuantity entered)
        		cannot be changed
        			"CannotUseDropship,AssetTemplateExists"
        			
        Buyer
        	force default to PurchaseOrder.Buyer
        		
            if (action type.Create
            or (action type.Update
            and (Buyer changed
            or   ShipToLocation changed
            or   Vendor changed
            or   PurchaseFromLocation changed
            or   ItemType changed)))
				initialize ValidateBuyer
				ValidateBuyer.InPurchasingCompany			= Company
				ValidateBuyer.InShipToLocation				= ShipToLocation
				ValidateBuyer.InRequestingLocation		    = PurchaseOrder.DefaultSourceInformation.DefaultRequestingLocation
				ValidateBuyer.InVendor						= Vendor
				ValidateBuyer.InPurchaseFromLocation		= PurchaseFromLocation
				ValidateBuyer.InItemType					= ItemType
				ValidateBuyer.InBypassPurchasingClass		= true
				constraint (ValidateBuyer.IsValidBuyer)
					"<ValidateBuyer.ErrorMessage>"
        		
		Processor
			if (action type.Create)
				Processor		= PurchaseOrder.Buyer		
        CommodityCode
			if  (Buyer.RequireCommodityCode
			and ((action type.Create and not IsFromVendorReturn)
			or   action type.Update))
				required
					"BuyerRequiresEntryOfACommodityCodeForItem" 

        	if (InventoriedOrNonstock
        	and Item exists
        	and Item.CommodityCode entered)
	        	force default to Item.CommodityCode	
	        	
        		constraint (CommodityCode = Item.CommodityCode)
        			"CommodityCodeDoesNotMatchItemCommodityCode"
        			
        	if (IsSpecialOrService
        	and ContractLine.CommodityCode entered)
        		default to ContractLine.CommodityCode
        
        PurchaseFromLocation
        	force default to PurchaseOrder.PurchaseFromLocation
			
        	if (PurchaseFromLocation changed)
				initialize UndershipmentToleranceOption
				initialize UndershipmentTolerancePercentage
				initialize OvershipmentToleranceOption
				initialize OvershipmentTolerancePercentage
				
				if (IsHSNSACCodeEnabled)
        			initialize TaxCode
								
		PrintedOnReceivingDocument
			if (not PurchaseOrder.PrintReceipt)
				PrintedOnReceivingDocument = true
		
		Retainage




			if (not PurchaseOrder.HasRetainage
			and ContractLine.RetainageLineOrHeader
			and ContractLine.RetainageExist)
				default to Retainage.RetainageOnContract
				
			if (IsRetainageLine)
				constraint (not PurchaseOrder.HasRetainageContract)
					"RetainageTrackedAtContractLevel;CannotUpdate"
				constraint (not PurchaseOrder.RetainagePercentCompleteTracking.NoRetainage)
					"NonRetainagePurchaseOrder;CannotHaveRetainageOnLine"
			else
			if (IsRetainageContract)
				constraint (PurchaseOrder.HasRetainageContract or Retainage not changed)
					"PurchaseOrderHeaderNotTrackedAtContract;CannotHaveContractRetainage"
				constraint (ContractLine.Retainage entered)
					"CannotHaveRetainageOnLineWhenThereIsNoRetainageContract"	
			else
			if (Retainage.No)
				if (Retainage changed)
					constraint (not ContractLine.Retainage)
						"NonRetainagePurchaseOrderLineCannotBeTiedToARetainageContractLine"
				
					initialize RetainageFirstPercent
					initialize RetainageSecondPercent
					initialize RetainageUpToPercentComplete
					initialize RetainageOverridePercentComplete
				else
					constraint (RetainageFirstPercent not entered
					and 		RetainageSecondPercent not entered
					and			RetainageUpToPercentComplete not entered
					and 		RetainageOverridePercentComplete not entered)
						"NonRetainagePurchaseOrderOrContract;CannotHaveRetainagePercent"
		
		RetainageFirstPercent
			if (Retainage.Yes)
				required
					"PurchaseOrderLine<LineNumber>HasRetainage;MustHaveFirstRetainagePercent"
			else
				cannot be entered
					"RetainageOnContract.CannotHaveRetainagePercent"
		
		RetainageUpToPercentComplete
			if (Retainage.Yes)
				required
					"PurchaseOrderLine<LineNumber>HasRetainage;MustHaveUpToRetainagePercent"
			else
				cannot be entered
					"RetainageOnContract.CannotHaveRetainagePercent"
		
		RetainageOverridePercentComplete
			if (not PurchaseOrder.RetainagePercentCompleteTracking.LineLevel)
				cannot be entered
					"RetainageMustBeOnLineLevelToHaveLineOverridePercentage"
	
			if (IsRetainageContract)
				cannot be entered
					"RetainageOnContract.CannotHaveRetainagePercent"
			
		StockWeight
			if (ItemType.Service)
				cannot be entered
					"WeightAndVolumeCannotBeEnteredForServiceItem"
			if (InventoriedOrNonstock)
				if (not TransientUpdateFromPOInterface)
					cannot be changed
						"WeightAndVolumeMustBeMaintainedOnTheItemMaster"
				
				LocalStockWeight = Quantity * Item.StockWeight
				if (LocalStockWeight > 999999.999)
					confirmation required 
						"Warning:_\Stock_\WeightExceedsAllottedSizeOf999,999.999"
				force default to LocalStockWeight
		
		StockVolume
			if (ItemType.Service)
				cannot be entered
					"WeightAndVolumeCannotBeEnteredForServiceItem"
			if (InventoriedOrNonstock)
				if (not TransientUpdateFromPOInterface)
					cannot be changed
						"WeightAndVolumeMustBeMaintainedOnTheItemMaster"

				LocalStockVolume = Quantity * Item.StockVolume
				if (LocalStockVolume > 999999.999)
					confirmation required 
						"Warning:_\Stock_\VolumeExceedsAllottedSizeOf999,999.999"
				force default to LocalStockVolume
				
		DistributionCode
			if (DistributionExists
			and DistributionCode entered)
				cannot be changed
					"CannotAddBothDistributionCodeAndLineDistribution"
					
			if (DistributionBy.ByAmount)
				constraint (DistributionCode.PayablesDistributionCodeDetailRel.AssetTemplate not entered)
					"CannotUseAssetTemplateWhenDistributionByAmounts"
					
		UNSPSCCode
			if (InventoriedOrNonstock)
				default to Item.UNSPSCCode
			
		MSDSRequired
			initial value is Item.MSDSRequired 
   			if (InventoriedOrNonstockHasItemLocation)
   				if (action type.Create)
					default to Item.MSDSRequired
				if (Item.MSDSRequired)
					constraint (MSDSRequired)
						"MSDSIsRequiredForItem<Item>"
				
			if (ItemType.Service
			or  IsDropship)
				force default to false
				
		CertificationRequired
			if (action type.Create
			and InventoriedOrNonstock)
				default to Item.CertificationRequired
			
		TransientPatientID
			if (TransientVisitNumber exists)
				force default to TransientVisitNumber.Patient
        TransientPatientLastName 
        	if (TransientPatientID exists)                
        		force default to TransientPatientID.LastName
        TransientPatientFirstName    
        	if (TransientPatientID exists)                
        		force default to TransientPatientID.FirstName
        TransientPatientMiddleName    
        	if (TransientPatientID exists)                
        		force default to TransientPatientID.MiddleInitial
        TransientBirthdate 
        	if (TransientPatientID exists)                
        		force default to TransientPatientID.BirthDate
        TransientSocialSecurityNumber      
        	if (TransientPatientID exists)                
        		force default to TransientPatientID.FicaNbr
        		
		ProductTaxCategory
			if (InventoriedOrNonstock)
				default to Item.ProductTaxCategory
		
		ICNCode
			if (ICNCode changed)
				initialize SupplementaryQuantity
			
			if ((PurchaseFromLocation.CurrentAddressRel.PostalAddress.Country entered or Vendor.CurrentAddressRel.PostalAddress.Country entered)
			and	 PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder.Country entered)
				initialize IntrastatProcessing
				IntrastatProcessing.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				IntrastatProcessing.TaxEntity					= Company.AccountingEntity
							
				if (PurchaseFromLocation entered)
					LocalOriginCountry							= PurchaseFromLocation.VendorAddress.Country
					LocalOriginRegion							= PurchaseFromLocation.VendorAddress.Region
								
				else
					LocalOriginCountry							= Vendor.VendorAddress.Country
					LocalOriginRegion							= Vendor.VendorAddress.Region
				
				IntrastatProcessing.DestinationCountry			= PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder.Country
				IntrastatProcessing.DestinationRegion			= PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder.Region
				IntrastatProcessing.OriginCountry				= LocalOriginCountry
				IntrastatProcessing.OriginRegion				= LocalOriginRegion
				LocalCheckCountries								= IntrastatProcessing.CheckCountries
			
			if (TaxEntityRel.IntrastatUsed
			and Item.ICNCode entered
			and IntrastatProcessing.DoIntrastatReporting
			and InventoriedOrNonstock)
				default to Item.ICNCode
				constraint (ICNCode = Item.ICNCode)
					"CannotOverrideItemMasterICNCode"

		SupplementaryQuantity		
			if (ICNCode.SupplementaryUOM entered)
				if (ICNCode.SupplementaryUOM != EnteredBuyUOM)
					initialize UOMCalculation
					UOMCalculation.InputQuantity	= Quantity
					UOMCalculation.InputUOM			= EnteredBuyUOM
					UOMCalculation.InputToUOM		= ICNCode.SupplementaryUOM
					UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
					default to UOMCalculation.OutputQuantity
				else
					default to Quantity

		EAMWorkOrder
			if (action type.Create)
				default to PurchaseOrder.EAMWorkOrder
				
		EAMWorkOrderActivity
			if (action type.Create)
				default to PurchaseOrder.EAMWorkOrderActivity

		EDIOutputUnitCost
			force default to DerivedEDIOutputUnitCost

		EDIOutputLineAmount
			force default to CalculateEDIOutputLineAmount

		HSNSACCode
			if (IsHSNSACCodeEnabled)
    			if(IsFromVendorReturn)
    				default to VendorReturnLine.HSNSACCode
    			if (ContractLine entered)
					default to ContractLine.HSNSACCode
    			if (InventoriedOrNonstock)
					default to Item.HSNSACCode



			else
    			cannot be entered	
    				"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"

		PointOfTitleTransfer
			if (IsOneSourceTax)
				force default to PurchaseOrder.PointOfTitleTransfer
			else
				initialize PointOfTitleTransfer
		
		ShipTerm
			if (IsOneSourceTax)
				if (action type.Create)
					default to PurchaseOrder.ShipTerm
			else
				initialize ShipTerm

		SpecialHandlingCode
			if (ItemIsInventoryOrNonstock)
				force default to Item.SpecialHandlingCode
			else
			if (ItemIsSpecial
			and not FromInterfaceUpdate)
				if (ContractLineRel.SpecialHandlingCode.Active)
					default to ContractLineRel.SpecialHandlingCode
				if  (SpecialHandlingCode changed
				and  SpecialHandlingCode entered)
					constraint (SpecialHandlingCode.Active)
						"SpecialHandlingCodeMustBeActive"

		SpecialHandlingInstructions
			if (SpecialHandlingCode entered)
				required
					"InstructionsRequiredForSpecialHandling"
			if (ItemIsInventoryOrNonstock)
				force default to Item.SpecialHandlingInstructions
			else
			if (ItemIsSpecial
			and not FromInterfaceUpdate)
				if (ContractLineRel.SpecialHandlingCode.Active)
					default to ContractLineRel.SpecialHandlingInstructions
				if (SpecialHandlingCode not entered)
					initialize SpecialHandlingInstructions

		HandlingTimeInMinutes
			if (SpecialHandlingCode.TimeSensitive)
				required
					"HandlingTimeIsRequiredForTimeSensitiveItem"
			if (ItemIsInventoryOrNonstock)
				force default to Item.HandlingTimeInMinutes
			else
			if (ItemIsSpecial
			and not FromInterfaceUpdate)
				if (ContractLineRel.SpecialHandlingCode.Active)
					default to ContractLineRel.HandlingTimeInMinutes
				if (SpecialHandlingCode not entered
				or not SpecialHandlingCode.TimeSensitive)
					initialize HandlingTimeInMinutes

	Create Rules

		constraint (ReceivedQuantity not entered)
			"ReceivedQuantityCannotBeEntered"
		
		constraint (MatchedQuantity not entered)
			"MatchedQuantityCannotBeEntered"

		if (EnteredBuyUOM not entered)
			LocalBypassQuantityConversion = true
	
		if(PurchaseOrderLinesByLineNbrRel exists)
        	default LineNumber to last PurchaseOrderLinesByLineNbrRel.LineNumber + 1
        else
        	default LineNumber to 1
		
		constraint (not PurchaseOrder.Canceled)
			"CannotAddLineToCanceledPurchaseOrder" 
			
		ProcurementGroup    = Company.ProcurementGroup
		if (not Closed.Historical)
			Closed				= Closed.No
					
		if (PurchaseOrder.RetainagePercentCompleteTracking.PurchaseOrderLevel
		or (PurchaseOrder.RetainagePercentCompleteTracking.LineLevel
		and PurchaseOrder.RetainageFirstPercent entered
		and PurchaseOrder.RetainageUpToPercentComplete entered))
			default Retainage to Retainage.Yes
			default RetainageFirstPercent to PurchaseOrder.RetainageFirstPercent
			default RetainageSecondPercent to PurchaseOrder.RetainageSecondPercent
			default RetainageUpToPercentComplete to PurchaseOrder.RetainageUpToPercentComplete
		
    	if (ItemType.Service and EnteredContractLine entered)
			if (PurchaseFromLocation not entered)
				LocalBypassVendorLocationValidation = true

			include ValidateContract
			ContractLine 									= EnteredContractLine
			Item 											= EnteredContractLine.ItemNumber
		
		if (PurchaseOrder.Issued)
			Revised		= true


	
	Create Exit Rules
		log untranslatable:"Company<Company>;PurchaseOrder<PurchaseOrder>;PurchaseOrderDate<PurchaseOrder.PurchaseOrderDate>;PurchaseOrderLine<PurchaseOrderLine>;ItemType<this instance(locale of blank).ItemType>;ServiceCode<this instance(locale of blank).ServiceCode>;CostCode<this instance(locale of blank).CostCode>."			
		if (not Closed.Historical)
    		include UnreleasePurchaseOrder
    		
		if (Retainage.RetainageOnContract
		and not PurchaseOrder.RetainagePercentCompleteTracking.Contract)
			invoke FastUpdate PurchaseOrder
				invoked.RetainagePercentCompleteTracking = PurchaseOrder.RetainagePercentCompleteTracking.Contract
				
		include CalculateLandedUnitCost
		
		include CalculateOpenPurchaseAmount
		
		if (not FromMassAdd  
		and not BypassHeaderAmountUpdate)
			invoke RollUpAmountsToHeader
		
		include WarehouseDemandProcessing
		include SetWarehouseDemandFields
		
		include PurchaseOrderLineDistributionAccountDefaulting 

		if (not LocalCopyPurchaseOrder or not BypassDistributionCreation)
			include CreateOrDeleteDistributionFromDistributionCode
		
		display "DistErrorExists<LineErrorsExist>"
		









		
		if (ContractLine entered and not TransientBypassAOCCreation) 
			ContractLineView = ContractLine
			for each ContractLineAOCRel
				invoke Create PurchaseOrderAndLineAddOnCharge
					invoked.Company						= Company
        			invoked.PurchaseOrder        		= PurchaseOrder
                    invoked.PurchaseOrderLine     		= PurchaseOrderLine
                    invoked.Vendor 						= each.Contract.Vendor
					invoked.ShipToLocation				= ShipToLocation
					invoked.PurchaseFromLocation		= PurchaseFromLocation
        			invoked.AddOnCharge					= each.AOC
					invoked.AddOnChargePercent			= each.AOCRate
					invoked.EnteredUnitCost				= each.UnitCost
					invoked.ZeroCost					= each.ZeroCost
					invoked.Taxable						= each.Taxable
					invoked.TaxCode						= each.TaxCode
					invoked.Account						= each.ContractLine.DistributionAccount
			
			include CopyContractLineComment
		
		if (DisplayOfProcedureInfo)
			include CheckPatientProcedure
		
		if (CombineLinesWithDifferentContractNotAllowed
		and Contract entered 
		and ContractLine entered)
			constraint (LinesWithDifferentContractRel not exists)	
				"VendorDoesNotAllowDifferentContractsOnSamePurchaseOrder"
					
		if (StandardCommentCode entered)
			include CreateCommentFromCommentCode
			
		if (PurchaseOrder.DefaultSourceInformation entered
		and PurchaseOrderLineSourcesRel not exists)	
			include CreateSourceFromPurchaseOrderHeaderDefaults	
			
			
		invoke BudgetExceedTrigger    

    Form Invokes
    	CreatePOLineAssetDefaults
    		if (AssetDefaultExists)    			
    			invoke Update PurchaseOrderLineAssetDefaultsRel  
    		else    			
    			invoke Create PurchaseOrderLineAssetDefaultsRel   
    Action Exit Rules
		
				           
  	
    Actions
		ProcessOneSourceForPOLines is a Set Action
			restricted
			valid when (SingleCallToOneSource)
			Parameters
				PrmCompany				is a PurchasingCompany
				PrmPurchaseOrder		is a PurchaseOrder

			Local Fields
				AsyncId					is a AsyncActionRequest
			Instance Selection
				where (PrmCompany		= Company
				and	   PrmPurchaseOrder = PurchaseOrder
				and	   Taxable)

			Sort Order
				Company
				PurchaseOrder
				PurchaseOrderLine
			Action Rules
				PurchaseOrder Set Rules
					Entrance Rules
						if (SingleCallToOneSource)
							LocalUniqueID = PurchaseOrder.UniqueID
							if (TaxLineItemsRel exists)
								for each TaxLineItemsRel
									invoke Delete each.LineItemUserFieldsRel
									invoke Delete each

							if (PurchaseOrder.MiscellaneousAddOnChargeExists)
								for each PurchaseOrder.TaxablePurchaseOrderAddOnChargesRel
									LocalUniqueID = each.UniqueID
									if (TaxLineItemsRel exists)
										for each TaxLineItemsRel
											invoke Delete each.LineItemUserFieldsRel
											invoke Delete each

							if (PurchaseOrderLineAddOnChargesRel exists)
								for each PurchaseOrder.TaxablePurchaseOrderLineAddOnChargesRel
									LocalUniqueID = each.UniqueID
									if (TaxLineItemsRel exists)
										for each TaxLineItemsRel
											invoke Delete each.LineItemUserFieldsRel
											invoke Delete each

							AsyncId = current async action request id

					Exit Rules
						invoke ProcessOneSourceForPOAOC PurchaseOrderAndLineAddOnCharge in foreground
							invoked.PrmCompany			= Company
							invoked.PrmPurchaseOrder	= PurchaseOrder
						if (SingleCallToOneSource
						and PurchaseOrder.DerivedNumberOfTaxableHeaderAOCs not entered
						and PurchaseOrder.DerivedNumberOfTaxableLineAOCs not entered)
							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= PurchaseOrder.UniqueID
							CalculateTax.UserElementLevel					= "L"

							LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax

							constraint (CalculateTax.OutputErrorNumber not entered)
								"<CalculateTax.OutputErrorMessage>;ContactAdministrator"

							invoke UpdatePOTaxAmounts TaxLineItem in foreground
								invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.PrmCompany					= Company
								invoked.PrmInvoiceNumber			= PurchaseOrder
								invoked.PrmUniqueIdOfRelatedObject  = PurchaseOrder.UniqueID
							
				Instance Rules
					LocalUniqueID = UniqueID
					if (TaxLineItemsRel exists)
						for each TaxLineItemsRel
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each

					include InitiateCalculateTaxFields
					include LoadOneSourceInputFields
					include CreateTaxLineItem
					include CreateTaxLineItemUserFields

		ProcessVertexForPOLines is a Set Action
			restricted
			valid when (SingleCallToVertex)
			Parameters
				PrmCompany				is a PurchasingCompany
				PrmPurchaseOrder		is a PurchaseOrder

			Local Fields
				AsyncId					is a AsyncActionRequest
			Instance Selection
				where (PrmCompany		= Company
				and	   PrmPurchaseOrder = PurchaseOrder
				and	   Taxable)

			Sort Order
				Company
				PurchaseOrder
				PurchaseOrderLine
			Action Rules
				PurchaseOrder Set Rules
					Entrance Rules
						if (SingleCallToVertex)
							LocalUniqueID = PurchaseOrder.UniqueID
							if (TaxLineItemsRel exists)
								for each TaxLineItemsRel
									invoke Delete each.LineItemUserFieldsRel
									invoke Delete each

							if (PurchaseOrder.MiscellaneousAddOnChargeExists)
								for each PurchaseOrder.TaxablePurchaseOrderAddOnChargesRel
									LocalUniqueID = each.UniqueID
									if (TaxLineItemsRel exists)
										for each TaxLineItemsRel
											invoke Delete each.LineItemUserFieldsRel
											invoke Delete each

							if (PurchaseOrderLineAddOnChargesRel exists)
								for each PurchaseOrder.TaxablePurchaseOrderLineAddOnChargesRel
									LocalUniqueID = each.UniqueID
									if (TaxLineItemsRel exists)
										for each TaxLineItemsRel
											invoke Delete each.LineItemUserFieldsRel
											invoke Delete each

							AsyncId = current async action request id

					Exit Rules
						invoke ProcessVertexForPOAOC PurchaseOrderAndLineAddOnCharge
							run after AsyncId
							assign async action request id to AsyncId
							invoked.PrmCompany			= Company
							invoked.PrmPurchaseOrder	= PurchaseOrder
						if (SingleCallToVertex
						and PurchaseOrder.DerivedNumberOfTaxableHeaderAOCs not entered
						and PurchaseOrder.DerivedNumberOfTaxableLineAOCs not entered)
							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= PurchaseOrder.UniqueID

							LocalJurisdictionLookupKey						= "PO:" + PurchaseOrder + ":" + CurrentTimestamp 
							CalculateTax.AppendToJurisFile					= true					
							CalculateTax.JurisdictionResultsKey				= LocalJurisdictionLookupKey
							CalculateTax.RelatedObjectReference				= reference to PurchaseOrder  				 

							LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax

							invoke UpdatePOTaxAmounts TaxLineItem
								run after AsyncId
								assign async action request id to AsyncId
								invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.PrmCompany					= Company
								invoked.PrmInvoiceNumber			= PurchaseOrder
								invoked.PrmUniqueIdOfRelatedObject  = PurchaseOrder.UniqueID
							
				Instance Rules
					LocalUniqueID = UniqueID
					if (TaxLineItemsRel exists)
						for each TaxLineItemsRel
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each

					include InitiateCalculateTaxFields
					include LoadVertexOneCall
					include CreateTaxLineItem
					include CreateTaxLineItemUserFields

		ManuallyCreateLineAcknowledgements is an Instance Action
			restricted

			Action Rules

				invoke Create PurchaseOrderEDIAcknowledgement
					invoked.RunGroup			= PurchaseOrder
					invoked.Company				= Company
					invoked.PurchaseOrder		= PurchaseOrder
					invoked.PurchaseOrderLine	= PurchaseOrderLine
					invoked.Vendor				= Vendor
					invoked.VendorItem			= VendorItem
					invoked.Quantity			= Quantity
					invoked.UnitOfMeasure		= EnteredBuyUOM
					invoked.EnteredUnitCost		= EnteredUnitCost
					invoked.EarlyDeliveryDate	= EarlyDeliveryDate

		GenerateLineAcknowledgements is an Instance Action
			restricted
			Parameters
				PrmAcknowledgementType 		    is Alpha size 2
                PrmAcknowledgementPOShipDate	is Date
			Action Rules
				if (ManualPurchaseOrderLineEDIAcknowledgementRel not exists)
					invoke Create PurchaseOrderEDIAcknowledgement
						invoked.RunGroup			= PurchaseOrder
						invoked.Company				= Company
						invoked.PurchaseOrder		= PurchaseOrder
						invoked.PurchaseOrderLine	= PurchaseOrderLine
						invoked.Item				= Item
						invoked.Vendor				= Vendor
						invoked.VendorItem			= VendorItem
						invoked.Quantity			= Quantity
						invoked.UnitOfMeasure		= EnteredBuyUOM
						invoked.EnteredUnitCost		= EnteredUnitCost
						invoked.EarlyDeliveryDate	= EarlyDeliveryDate
						invoked.POShipDate			= PrmAcknowledgementPOShipDate
						invoked.AcknowledgementType	= PrmAcknowledgementType
				else
					invoke Update ManualPurchaseOrderLineEDIAcknowledgementRel
						invoked.VendorItem 			= VendorItem
						invoked.Quantity			= Quantity
						invoked.UnitOfMeasure		= EnteredBuyUOM
						invoked.EnteredUnitCost		= EnteredUnitCost
						invoked.EarlyDeliveryDate	= EarlyDeliveryDate
						invoked.POShipDate			= PrmAcknowledgementPOShipDate
						invoked.AcknowledgementType	= PrmAcknowledgementType

		UnreleaseFromAcknowledgement is an Instance Action
			restricted
			Action Rules
				if (Issued)
					Revised = true
				
				invoke Unrelease

		UnreleaseHeaderFromAcknowledgment is an Instance Action
            restricted
            Action Rules
                include UnreleasePurchaseOrder

		FixReceivedQuantity is a Set Action
			Instance Selection
				where (HasIncorrectReceivedQuantity)
			Action Rules
				Instance Rules
					for each ReleasedPurchaseOrderReceiptLinesRel
						ReceivedQuantity 	+= each.DerivedReceivedQuantityInPOUOM
    
        ProcessReceivedNotInvoicedLines is a Set Action
            restricted
            Parameters
                PrmCompany                        is a PurchasingCompany
                PrmRNIPostDate                    is Date
                PrmUpdateOption                    is AlphaUpper size 1
                PrmRNIRun                        is a PurchaseOrderResult
                
            Local Fields
                CreatedDate        is Date
                NewRNILine      is a RNILine view
                LLandedAOC        is Boolean
                LVendor            is like Vendor
                LLandedUnitCost        is like InternationalCost
                LEnteredUnitCost    is like UnsignedUnitCost
                LAccount            is a FinanceCodeBlock
                LPurchaseOrderLineDistribution	is like PurchaseOrderLineDistribution
                
			Instance Selection
                where ((Company = PrmCompany
                and    PurchaseOrder.PurchaseOrderDate <= PrmRNIPostDate
                and	   IsNonService
                and	   ReceivingActivityDate entered)
                and    (!((ReceivedQuantity > 0 and !HasPOReceiptLine) 
                or     (MatchedQuantity > 0 and !HasPayablesInvoiceDetail))))
                                    
            Action Rules
                Instance Rules                	
                    initialize RNILocalFields
                    initialize RNILocalRD
                    RNILocalFields.RNIPostDate    = PrmRNIPostDate
                    initialize Skip
                    initialize LMatchPOInv
                       
                    if (PurchaseOrder.Closed.Yes
                	and PurchaseOrder.CloseDate <= PrmRNIPostDate
                	and MatchPurchaseOrderInvoiceRel exists)
                		LMatchPOInv = first MatchPurchaseOrderInvoiceRel.PayablesInvoice
                		if (MatchInvoiceMessageRel not exists)
                			Skip = true
                		
                	if (!Skip)	
						if (PurchaseOrder.Currency not entered										
						or  PurchaseOrder.Currency = Company.GeneralLedgerCompany.Currency)
							RNILocalRD.PcrCurrencyCode = Company.GeneralLedgerCompany.Currency
							RNILocalRD.PcrEntCnvRate = 1
						else
							RNILocalRD.PcrCurrencyCode = PurchaseOrder.Currency
							if (PurchaseOrder.CurrencyExchangeSetPoint = "R")
								RNILocalRD.PcrEntCnvRate =     PurchaseOrder.ReceiptCurrencyConversionRate
							else
								RNILocalRD.PcrEntCnvRate =     PurchaseOrder.EnteredCurrencyConversionRate
						
						initialize I1
						
						RNILocalRD.PrlEntRecUom             = ""
						RNILocalFields.RecActDate           = 0
						RNILocalFields.RuomMult                = 0
						RNILocalFields.ExtendedAmt            = 0
						RNILocalFields.RecNotMatchedFl         = 0
						RNILocalFields.ApiInvoiceFlag        = 0
						RNILocalFields.MagMainvmsgFlag        = 0
						RNILocalFields.PrlActualMatchedQty     = 0
						RNILocalFields.PrlActualArchivedQty = 0
						
						if (ItemType.Inventoried
						or  ItemType.NonStock)
							if (Item.CatchWeightCode != "N")
								RNILocalFields.RecQty =    CatchWeightQuantity
							else
								RNILocalFields.RecQty = ReceivedQuantity
						else
							RNILocalFields.RecQty = ReceivedQuantity
		
						
						RNILocalFields.DecRecQuantity = 0

	                    for each ReleasedPurchaseOrderReceiptLinesRel    
	                    	RNILocalFields.LPurchaseOrderReceipt        = each.PurchaseOrderReceipt
	                        RNILocalFields.LPurchaseOrderReceiptLine    = each.PurchaseOrderReceiptLine
	                        if (MatchedQuantity > 0)
	                            RNILocalFields.PrlActualMatchedQty += each.MatchedQuantity
	                        
	                        if (ArchivedQuantity > 0)
	                            if (each.LastUpdateDate entered 
	                            and each.DerivedLastUpdateDate <= PrmRNIPostDate)
	                                RNILocalFields.PrlActualArchivedQty += each.ArchivedQuantity
	                        if (CostOption.VendorDetermined)                            
	                            RNILocalFields.ExtendedAmt += each.ExtendedAmount
	                        
	                        if (each.ReceivedDate > PrmRNIPostDate)
	                            RNILocalFields.DecRecQuantity += each.BuyUOMQuantity
	                        else
	                        	if ((each.EnteredReceivedQuantity - each.OriginalReceivedQuantity) != 0)
		                        	RNILocalFields.TotPjlQuantity = sum POReceiptAdjustmentAndInspectionLinesRel.Quantity
						            if (RNILocalFields.TotPjlQuantity != 0 
						            and each.ReceivedUOM != EnteredBuyUOM)
						                RNILocalFields.EbuyQty = RNILocalFields.TotPjlQuantity * each.ReceivedUOMMultiplier / EnteredBuyUOMMultiplier
						                RNILocalFields.TotPjlQuantity  = RNILocalFields.EbuyQty
					            	
					            	if (each.EnteredReceivedQuantity entered)
	                        			RNILocalFields.DecRecQuantity += RNILocalFields.TotPjlQuantity
	                        
	                        if (PrmRNIPostDate entered and ReceivingActivityDate > PrmRNIPostDate)    

	                            if (each.ReceivedDate > PrmRNIPostDate)
	                                if (ItemType.Inventoried
	                                or  ItemType.NonStock)
	                                    if (Item.CatchWeightCode != "N")
	                                        RNILocalFields.RecQty -=  each.CatchWeightQuantity
	                                    else
	                                        RNILocalFields.RecQty -=  each.BuyUOMQuantity
	                                else
	                                    RNILocalFields.RecQty -=  each.BuyUOMQuantity
	                            else
	                                if ((each.EnteredReceivedQuantity - each.OriginalReceivedQuantity) != 0)
	                                    RNILocalFields.RecQty -= RNILocalFields.TotPjlQuantity
	                                if (RNILocalFields.RecActDate not entered)
	                                    RNILocalFields.RecActDate = each.ReceivedDate
	                            if (each.ReceivedUOM != VendorPriceUOM)
	                                RNILocalRD.PrlEntRecUom = each.ReceivedUOM
	                                RNILocalFields.RuomMult = each.ReceivedUOMMultiplier
		                    
						if (ReceivedQuantity > (RNILocalFields.PrlActualMatchedQty + ArchivedQuantity))
							RNILocalFields.RecNotMatchedFl = 1
						
						RNILocalFields.PliClosedWithMsgOnWaitFlag = "N"
						
						if (Closed = "Y"
						and CloseDate <= PrmRNIPostDate
						and RNILocalFields.RecNotMatchedFl = 0
						and PurchaseOrderLineAddOnChargesRel not exists)
							RNILocalFields.PliClosedWithMsgOnWaitFlag = "Y"
						
						if (RNILocalFields.RecNotMatchedFl = 1)
							RNILocalFields.MatchedQty        =    RNILocalFields.PrlActualMatchedQty
						else
							RNILocalFields.MatchedQty        =    MatchedQuantity
						RNILocalFields.MsgMatchedQty    = 0


						for each PayablesInvoiceDetailsRel    
							RNILocalFields.LPayablesInvoiceDetail = each.PayablesInvoiceDetail
							RNILocalFields.LPayablesInvoice     = each.PayablesInvoice
							RNILocalFields.LInvoice     		= each.Invoice
							RNILocalFields.LPayablesPO          = each.PurchaseOrder
							RNILocalFields.LPayablesDistDate    = each.DistributionDate
							RNILocalFields.LStatus    = each.Status
							RNILocalFields.LBuyUOMMatchedQuantity    = each.BuyUOMMatchedQuantity
							RNILocalFields.ApiInvoiceFlag    = 0
							RNILocalFields.MagMainvmsgFlag    = 0

							I1 += 1
							if (I1 > 10)
								I1 = 10
							for each MatchInvoiceMessageForPayablesInvoiceRel        

								if (each.Status != 9
								and each.MatchMessageOrigin != 1)
									RNILocalFields.PliClosedWithMsgOnWaitFlag = "N"
									RNILocalFields.ApiInvoiceFlag    = 1

									if (each.ApplicationAction != "1")

										RNILocalFields.MagMainvmsgFlag    = 1
										if (RNILocalFields.LPayablesDistDate <= PrmRNIPostDate)
											RNILocalFields.MsgsInvNbr.InvoiceNumber[I1]    = RNILocalFields.LInvoice
										RNILocalFields.MatchedQty        -= RNILocalFields.LBuyUOMMatchedQuantity
										RNILocalFields.MsgMatchedQty    += RNILocalFields.LBuyUOMMatchedQuantity


								CreatedDate = each.create stamp.timestamp date
								if(CreatedDate entered)

									if (((each.Status = 2 or each.Status = 9)
									and each.RespondDate > PrmRNIPostDate
									and CreatedDate <= PrmRNIPostDate)
									or ((each.Status = 1 or each.Status = 0)
									and CreatedDate <= PrmRNIPostDate
									and each.MatchMessageOrigin != "1"))

										RNILocalFields.PliClosedWithMsgOnWaitFlag = "N"
										RNILocalFields.MsgsInvNbr.InvoiceNumber[I1]    = each.Invoice
									if (each.Status = 9 
									and each.ApplicationAction = "1"
									and each.RespondDate > PrmRNIPostDate
									and CreatedDate > PrmRNIPostDate)


										RNILocalFields.PliClosedWithMsgOnWaitFlag = "N"
										RNILocalFields.MagMainvmsgFlag    = 1
										if (RNILocalFields.LPayablesDistDate <= PrmRNIPostDate)
											RNILocalFields.MsgsInvNbr.InvoiceNumber[I1]    = each.Invoice
										RNILocalFields.MatchedQty        -= RNILocalFields.LBuyUOMMatchedQuantity
										RNILocalFields.MsgMatchedQty    += RNILocalFields.LBuyUOMMatchedQuantity


							if (!(RNILocalFields.LPayablesDistDate <= PrmRNIPostDate
							or   RNILocalFields.ApiInvoiceFlag = 1
							or   RNILocalFields.MagMainvmsgFlag = 1))
								if (RNILocalFields.LStatus = 1)

									RNILocalFields.PliClosedWithMsgOnWaitFlag = "N"
									RNILocalFields.MatchedQty -= RNILocalFields.LBuyUOMMatchedQuantity

						
						if (RNILocalFields.PliClosedWithMsgOnWaitFlag = "N")
							if (RNILocalFields.MatchedQty < 0)
								RNILocalFields.MatchedQty = 0
							if (RNILocalFields.ApiInvoiceFlag = 1
							or RNILocalFields.MagMainvmsgFlag = 1)
								RNILocalFields.RniQty = RNILocalFields.RecQty - MatchedQuantity + RNILocalFields.MsgMatchedQty

							else
								RNILocalFields.RniQty = RNILocalFields.RecQty - RNILocalFields.MatchedQty - RNILocalFields.PrlActualArchivedQty + ChargebackQuantity + MemoQuantity


			
							RNILocalFields.PrintRecSw    = 0
							if (HasPOAndLineAddOnCharge)	
								for each PurchaseOrderLineAddOnChargesRel     
									if (RNILocalFields.PrintRecSw = 0)

										if (!(each.ZeroCost or each.Canceled))
											if (!(each.Closed = "Y"
											and RNILocalFields.ApiInvoiceFlag = 0						
											and PurchaseOrder.CloseDate entered
											and PurchaseOrder.CloseDate <= PrmRNIPostDate))



												if (!(RNILocalFields.PrlActualArchivedQty > 0
												and Closed.Yes
												and each.Closed = "Y"
												and RNILocalFields.ApiInvoiceFlag = 0))
													RNILocalFields.AocRecQty    = each.ReceivedQuantity - RNILocalFields.DecRecQuantity
													RNILocalFields.AocMatchQty    = each.MatchedQuantity

													RNILocalFields.AocMatchQty -= sum PayablesInvoiceDetailsForPostDateRel.BuyUOMMatchedQuantity
													if (RNILocalFields.AocMatchQty < 0)
														RNILocalFields.AocMatchQty = 0
													RNILocalFields.AocRniQty    = RNILocalFields.AocRecQty - RNILocalFields.AocMatchQty
													if (RNILocalFields.AocRniQty > 0)
														RNILocalFields.PrintRecSw = 1
							initialize Skip
							if (RNILocalFields.ApiInvoiceFlag = 0
							and RNILocalFields.MagMainvmsgFlag = 0)
								if (((RNILocalFields.RniQty <= 0
								or CostOption.NoCharge)
								and RNILocalFields.PrintRecSw = 0))
									Skip = true
							if ((RNILocalFields.RniQty <= 0
							and RNILocalFields.PrintRecSw = 0))            
								Skip = true
							if (!Skip)
								if (TaxCode entered)
									if (CompanyTaxCodeRel exists and CompanyTaxCodeRel.LandedCost)
										RNILocalRD.PliInvcTaxAmt    = InvoicedTaxAmount
										RNILocalRD.PliAccrTaxAmt    = AccruedTaxAmount
									else
										RNILocalRD.PliInvcTaxAmt    = 0
										RNILocalRD.PliAccrTaxAmt    = 0
								else
									RNILocalRD.PliInvcTaxAmt    = InvoicedTaxAmount
									RNILocalRD.PliAccrTaxAmt    = AccruedTaxAmount
								RNILocalRD.RecKeyRecType    = ""
								RNILocalRD.RecKeyAocCode    = ""

								if (ReceivingActivityDate > PrmRNIPostDate
								and RNILocalFields.RecActDate entered)
									RNILocalRD.PliRecActDate    = RNILocalFields.RecActDate
								else
									RNILocalRD.PliRecActDate    = ReceivingActivityDate
								RNILocalRD.PliVpriUomMult    = VendorPriceUOMMultiplier
								RNILocalRD.PliEntBuyUom        = EnteredBuyUOM
								RNILocalRD.PliEbuyUomMult    = EnteredBuyUOMMultiplier
								RNILocalRD.PliVpriUom        = VendorPriceUOM
								RNILocalRD.PliUnitCost         = LandedUnitCost
								if (CostOption.VendorDetermined)
									if (ReceivedQuantity entered)
										RNILocalRD.PliUnitCost    = RNILocalFields.ExtendedAmt / ReceivedQuantity
									if (Taxable and TaxCode entered)
										initialize CalculateTax
										CalculateTax.TaxEntity                = Company.AccountingEntity
										CalculateTax.TaxCode                 = TaxCode
										CalculateTax.ProductTaxCategory        = ProductTaxCategory
										CalculateTax.NumberOfDecimals        = 5
										CalculateTax.TaxableAmount            = RNILocalRD.PliUnitCost
										CalculateTax.TaxDate                = EarlyDeliveryDate
										CalculateTax.Function                 = "C"
								
										LocalCalculateTaxExecuted = CalculateTax.ExecuteCalculateTax
										constraint (CalculateTax.OutputErrorNumber not entered)
											"<CalculateTax.OutputErrorMessage>"
										RNILocalRD.TaxTotal = CalculateTax.OutputTotalTaxAmount5DP
										RNILocalRD.PliUnitCost += RNILocalRD.TaxTotal
								else
									RNILocalRD.PliUnitCost    = LandedUnitCost
								
								if (HasPOAndLineAddOnCharge)
									RNILocalRD.PliUnitCost -= sum MatchedPurchaseOrderLineAddOnChargeRel.LandedUnitCost 
								
								if (RNILocalRD.PliUnitCost < 0)
									RNILocalRD.PliUnitCost    = RNILocalRD.PliUnitCost * (-1)
								RNILocalRD.PliLocation        = ShipToLocation
								RNILocalRD.PliQuantity        = Quantity
								RNILocalRD.PliMatchedQty    = MatchedQuantity
								RNILocalRD.PliQtyToProc        = QuantityToProcess
								RNILocalRD.PliLastDstSeq    = LastDistributionSequence
								RNILocalRD.PliPurchMajcl    = MajorPurchasingClass
								RNILocalRD.PliPurchMincl    = MinorPurchasingClass
								RNILocalRD.PliManufCode        = Manufacturer.ManufacturerCode
								RNILocalRD.PliManufDivision    = Manufacturer.ManufacturerDivision
								if (ItemType.Inventoried)
									if (ItemLocationRel exists)
										if (GeneralLedgerCategoryRel exists)
											RNILocalRD.DistributionCodeBlock    = GeneralLedgerCategoryRel.InventoryAccount
								else
									RNILocalRD.DistributionCodeBlock = ""
									RNILocalRD.MmdLineSeq = 0
									RNILocalFields.DistributionLinesCount 	= instance count of POLineDistributionsRel
		                            if (RNILocalFields.DistributionLinesCount = 1)
		                            	RNILocalRD.DistributionCodeBlock = first POLineDistributionsRel.DistributionAccount
		                                RNILocalRD.MmdLineSeq = first POLineDistributionsRel.PurchaseOrderLineDistribution
		
			
								if (ItemType.Inventoried 
								or  ItemType.NonStock)
									RNILocalRD.IteDescription    = Item.Description
									RNILocalRD.IteNbrDecCost    = 1/(10^Item.NumberOfDecimalsCost)
									RNILocalRD.IteNbrDecQty        = 1/(10^Item.NumberOfDecimalsQuantity)
								else
									RNILocalRD.IteDescription    = Description
									RNILocalRD.IteNbrDecCost    = 1/(10^Company.InventoryCompany.NumberOfDecimalsCost)
									RNILocalRD.IteNbrDecQty        = 1/(10^Company.InventoryCompany.NumberOfDecimalsQuantity)

								if (Item.CatchWeightCode = "N")
									if (RNILocalRD.PliEntBuyUom != RNILocalRD.PliVpriUom)
										RNILocalFields.RniQty = RNILocalFields.RniQty * EnteredBuyUOMMultiplier / VendorPriceUOMMultiplier
										initialize RoundedValue
										RoundedValue.RoundInput            = RNILocalFields.RniQty
										RoundedValue.RoundingType        = RoundedValue.RoundingType.Normal
										RoundedValue.RoundTo            = RNILocalRD.IteNbrDecQty
										RoundedValue.RoundingMethodFW    = RoundedValue.RoundingMethodFW.MultipleOf                                  
										RNILocalRD.AccQty                 = RoundedValue.RoundResult
									else
										RNILocalRD.AccQty = RNILocalFields.RniQty

								else
									if (RNILocalRD.PliVpriUom != Item.StockUOM)
										RNILocalFields.RniQty  = RNILocalFields.RniQty * VendorPriceUOMMultiplier
										initialize RoundedValue
										RoundedValue.RoundInput            = RNILocalFields.RniQty
										RoundedValue.RoundingType        = RoundedValue.RoundingType.Normal
										RoundedValue.RoundTo            = RNILocalRD.IteNbrDecQty
										RoundedValue.RoundingMethodFW    = RoundedValue.RoundingMethodFW.MultipleOf                                  
										RNILocalRD.AccQty = RoundedValue.RoundResult
									else
										RNILocalRD.AccQty = RNILocalFields.RniQty

								if (RNILocalRD.AccQty < 0)
									RNILocalRD.AccQty = 0
								if (RNILocalRD.PrlEntRecUom entered)    
									RNILocalFields.PrintRecvQty    = RNILocalRD.AccQty * VendorPriceUOMMultiplier / RNILocalFields.RuomMult
									initialize RoundedValue
									RoundedValue.RoundInput            = RNILocalFields.PrintRecvQty
									RoundedValue.RoundingType        = RoundedValue.RoundingType.Normal
									RoundedValue.RoundTo            = RNILocalRD.IteNbrDecQty
									RoundedValue.RoundingMethodFW    = RoundedValue.RoundingMethodFW.MultipleOf                                  
									RNILocalRD.PrlEntRecQty    = RoundedValue.RoundResult
								else
									RNILocalRD.PrlEntRecQty    = 0
								initialize RoundedValue
								RoundedValue.RoundInput            = RNILocalRD.PliUnitCost
								RoundedValue.RoundingType        = RoundedValue.RoundingType.Normal
								RoundedValue.RoundTo            = RNILocalRD.IteNbrDecCost
								RoundedValue.RoundingMethodFW    = RoundedValue.RoundingMethodFW.MultipleOf



								initialize RNILocalFields.RoundedOutput
								RNILocalFields.RoundedOutput	= RoundedValue.RoundResult
								RoundedValue.RoundInput            = RNILocalRD.AccQty * RNILocalFields.RoundedOutput
								RoundedValue.RoundingType        = RoundedValue.RoundingType.Normal
								RoundedValue.RoundTo            = 0.001
								RoundedValue.RoundingMethodFW    = RoundedValue.RoundingMethodFW.MultipleOf
								RNILocalFields.ExtendedAmt = RoundedValue.RoundResult                                  

								if (RNILocalRD.PcrCurrencyCode != Company.GeneralLedgerCompany.Currency)
									initialize CurrencyExchange
									SavedFromCurrency                = RNILocalRD.PcrCurrencyCode
									CurrencyExchange.ToCurrency        = Company.GeneralLedgerCompany.Currency
									SavedExchangeDate                = EarlyDeliveryDate
									SavedTransactionAmount            = RNILocalFields.ExtendedAmt
									CurrencyExchange.EnteredCurrencyRate      = RNILocalRD.PcrEntCnvRate
									RNILocalRD.PoCurAmt        = RNILocalFields.ExtendedAmt
									RNILocalRD.BaseCurAmt     = CurrencyExchange.OutputCurrencyAmount
								else
									RNILocalRD.PoCurAmt        = RNILocalFields.ExtendedAmt
									RNILocalRD.BaseCurAmt    = RNILocalFields.ExtendedAmt
									RNILocalRD.PoCurAmtNd    = Company.GeneralLedgerCompany.CurrencyNumberOfDecimals
									RNILocalRD.BaseCurAmtNd    = Company.GeneralLedgerCompany.CurrencyNumberOfDecimals
		
								invoke Create RNILine
									assign result to NewRNILine
									invoked.RNILine					= PurchaseOrderLine
									invoked.PurchaseOrderResult   	= PrmRNIRun
									invoked.Company               	= Company
									invoked.PurchaseOrder        	= PurchaseOrder        
									invoked.PurchaseOrderLine    	= PurchaseOrderLine
									invoked.ProcessLevel        	= PurchaseOrder.ProcessLevel
									invoked.PostDate           		= PrmRNIPostDate        
									invoked.Item                	= Item
									invoked.ItemType            	= ItemType
									invoked.Description				= Description        
									invoked.Vendor                	= PurchaseOrder.Vendor        
									invoked.VendorName            	= PurchaseOrder.Vendor.VendorName
									invoked.Buyer                	= PurchaseOrder.Buyer
									invoked.BuyerName            	= PurchaseOrder.Buyer.Name
									invoked.PurchaseFromLoc        	= PurchaseOrder.PurchaseFromLocation
									invoked.PORelease            	= PurchaseOrder.PORelease
									invoked.ShipToLocation        	= RNILocalRD.PliLocation
									invoked.RniQty                	= RNILocalRD.AccQty
									invoked.PliUnitCost            	= RNILocalRD.PliUnitCost
									invoked.PoCurAmt            	= RNILocalRD.PoCurAmt
									invoked.BaseCurAmt            	= RNILocalRD.BaseCurAmt
									invoked.RecActDate            	= RNILocalRD.PliRecActDate
									invoked.PrlEntRecQty        	= RNILocalRD.PrlEntRecQty
									invoked.PrlEntRecUom        	= RNILocalRD.PrlEntRecUom
									invoked.InvNbr                	= RNILocalFields.MsgsInvNbr
									invoked.LineAOC                	= RNILocalRD.RecKeyAocCode
									invoked.DistributionCodeBlock   = RNILocalRD.DistributionCodeBlock
								
								if (PurchaseOrder.ProcessLevel.ReceiptAccrualAccount entered)
									RNILocalRD.AccrualCodeBlock     = PurchaseOrder.ProcessLevel.ReceiptAccrualAccount
								else
									RNILocalRD.AccrualCodeBlock     = Company.MatchCompany.ReceiptAccrualAccount
								
								RNILocalFields.DistTotal             	= 0
								RNILocalFields.TotalPoDistAmt         	= 0
								RNILocalFields.TranRemainDistAmt     	= RNILocalRD.PoCurAmt
								RNILocalFields.BaseRemainDistAmt     	= RNILocalRD.BaseCurAmt
								if (PurchaseOrderLine.DistributionBy.ByAmount)
									RNILocalFields.TotalPoDistAmt 		   +=  sum POLineDistributionsRel.DistributionAmount

								if (RNILocalRD.DistributionCodeBlock entered)
									if (!ItemType.Inventoried
									and RNILocalRD.BaseCurAmt entered)
										invoke Create RNILineDistribution
											invoked.RNILineDistribution = RNILocalRD.MmdLineSeq
											invoked.PurchaseOrderResult                    = PrmRNIRun
											invoked.RNILine                    = NewRNILine.RNILine
											invoked.Company                    = Company
											invoked.PurchaseOrder            = PurchaseOrder        
											invoked.PurchaseOrderLine        = PurchaseOrderLine        
											invoked.DistributionPercent        = 100
											if (PurchaseOrder.ProcessLevel.ReceiptAccrualAccount entered)
												invoked.AccrualCodeBlock     = PurchaseOrder.ProcessLevel.ReceiptAccrualAccount
											else
												invoked.AccrualCodeBlock     = Company.MatchCompany.ReceiptAccrualAccount
											invoked.CurrencyCode            = RNILocalRD.PcrCurrencyCode
											invoked.AddOnCharge                = RNILocalRD.RecKeyAocCode
											invoked.BaseCurAmt                 = RNILocalRD.BaseCurAmt
											invoked.PoCurAmt                 = RNILocalRD.PoCurAmt
											invoked.DistributionCodeBlock     = RNILocalRD.DistributionCodeBlock
											invoked.DistributionSequence    = RNILocalRD.MmdLineSeq
					
								else
									if (RNILocalFields.DistributionLinesCount < 6)
										invoke CreateDistributions PurchaseOrderLineDistribution in foreground
											invoked.PrmCompany                    = Company
											invoked.PrmPurchaseOrder            = PurchaseOrder    
											invoked.PrmPurchaseOrderLine        = PurchaseOrderLine
											invoked.PrmAddOnCharge                = RNILocalRD.RecKeyAocCode
											invoked.PrmRNIPostDate                = PrmRNIPostDate
											invoked.PrmRNIRun                    = PrmRNIRun
											invoked.PrmRNILine                    = NewRNILine.RNILine
											invoked.PrmRNILocalFields            = RNILocalFields
											invoked.PrmRNILocalRD                = RNILocalRD
									else
										invoke CreateDistributions PurchaseOrderLineDistribution in background
											invoked.PrmCompany                    = Company
											invoked.PrmPurchaseOrder            = PurchaseOrder    
											invoked.PrmPurchaseOrderLine        = PurchaseOrderLine
											invoked.PrmAddOnCharge                = RNILocalRD.RecKeyAocCode
											invoked.PrmRNIPostDate                = PrmRNIPostDate
											invoked.PrmRNIRun                    = PrmRNIRun
											invoked.PrmRNILine                    = NewRNILine.RNILine
											invoked.PrmRNILocalFields            = RNILocalFields
											invoked.PrmRNILocalRD                = RNILocalRD
										
								if (HasPOAndLineAddOnCharge)
									for each PurchaseOrderLineAddOnChargesRel        
										LPurchaseOrderLineAddOnCharge = each.AddOnCharge
										LLandedAOC            = each.LandedAddOnCharge
										LVendor                = each.Vendor
										LLandedUnitCost        = each.LandedUnitCost
										LEnteredUnitCost    = each.EnteredUnitCost
										LAccount            = each.Account
										initialize Skip
										if (each.ZeroCost or each.Canceled)
											Skip = true
										if (each.Closed = "Y"
										and PurchaseOrder.CloseDate entered
										and PurchaseOrder.CloseDate <= PrmRNIPostDate)
											Skip = true
										if (RNILocalFields.PrlActualArchivedQty > 0
										and Closed = "Y" 
										and each.Closed = "Y"
										and RNILocalFields.ApiInvoiceFlag = 0)
											Skip = true
										if (!Skip)
											RNILocalFields.AocRecQty    = each.ReceivedQuantity - RNILocalFields.DecRecQuantity
											RNILocalFields.AocMatchQty    = each.MatchedQuantity
											if (RNILocalFields.AocRecQty > 0)

												RNILocalFields.AocMatchQty -= sum PayablesInvoiceAOCBeyondRNIPostDateRel.MatchedQuantity
												RNILocalFields.AocRniQty = RNILocalFields.AocRecQty - RNILocalFields.AocMatchQty + RNILocalFields.MsgMatchedQty

												if (RNILocalFields.AocRniQty > 0)
													RNILocalRD.RecKeyRecType        = "A"
													RNILocalRD.RecKeyAocCode        = each.AddOnCharge
													LPurchaseOrderLineDistribution = first POLineDistributionForAOCRel.PurchaseOrderLineDistribution


													LPurchaseOrderLineDistribution = first POLineDistributionForAOCRel.PurchaseOrderLineDistribution
			                                        if (!LLandedAOC)
			                                            if (LPurchaseOrderLineDistribution entered)
			                                            	RNILocalRD.DistributionCodeBlock = first POLineDistributionForAOCRel.DistributionAccount
													RNILocalRD.PliVpriUomMult    = VendorPriceUOMMultiplier
													RNILocalRD.PliEntBuyUom        = EnteredBuyUOM
													RNILocalRD.PliEbuyUomMult    = EnteredBuyUOMMultiplier
													RNILocalRD.PliVpriUom        = VendorPriceUOM
													RNILocalRD.PliLocation        = ShipToLocation
													if (LLandedAOC)
														if (PurchaseOrder.Vendor = LVendor)
															RNILocalRD.PliUnitCost = LLandedUnitCost
														else
															RNILocalRD.PliUnitCost = LLandedUnitCost / PurchaseOrder.EnteredCurrencyConversionRate
													else
														RNILocalRD.PliUnitCost = LEnteredUnitCost
													if (Item.CatchWeightCode = "N")
														if (RNILocalRD.PliEntBuyUom != RNILocalRD.PliVpriUom)
															RNILocalFields.RniQty      = RNILocalFields.RniQty * EnteredBuyUOMMultiplier / VendorPriceUOMMultiplier
															initialize RoundedValue
															RoundedValue.RoundInput            = RNILocalFields.RniQty
															RoundedValue.RoundingType        = RoundedValue.RoundingType.Normal
															RoundedValue.RoundTo            = RNILocalRD.IteNbrDecQty
															RoundedValue.RoundingMethodFW    = RoundedValue.RoundingMethodFW.MultipleOf                                  
															RNILocalRD.AccQty = RoundedValue.RoundResult
														else
															RNILocalRD.AccQty = RNILocalFields.AocRniQty
													else
														if (RNILocalRD.PliVpriUom     != Item.StockUOM)
															RNILocalFields.AocRniQty = RNILocalFields.AocRniQty * VendorPriceUOMMultiplier
															initialize RoundedValue
															RoundedValue.RoundInput            = RNILocalFields.AocRniQty
															RoundedValue.RoundingType        = RoundedValue.RoundingType.Normal
															RoundedValue.RoundTo            = RNILocalRD.IteNbrDecQty
															RoundedValue.RoundingMethodFW    = RoundedValue.RoundingMethodFW.MultipleOf
															RNILocalRD.AccQty = RoundedValue.RoundResult
														else
															RNILocalRD.AccQty = RNILocalFields.AocRniQty
													if (RNILocalRD.PrlEntRecUom != 0)
														RNILocalFields.PrintRecvQty = RNILocalRD.AccQty * VendorPriceUOMMultiplier / RNILocalFields.RuomMult
														initialize RoundedValue
														RoundedValue.RoundInput            = RNILocalFields.PrintRecvQty
														RoundedValue.RoundingType        = RoundedValue.RoundingType.Normal
														RoundedValue.RoundTo            = RNILocalRD.IteNbrDecQty
														RoundedValue.RoundingMethodFW    = RoundedValue.RoundingMethodFW.MultipleOf
														RNILocalRD.PrlEntRecQty = RoundedValue.RoundResult
													else
														RNILocalRD.PrlEntRecQty = 0
													RNILocalFields.ExtendedAmt = RNILocalRD.AccQty * RNILocalRD.PliUnitCost
													if (RNILocalRD.PcrCurrencyCode != Company.GeneralLedgerCompany.Currency)
														initialize CurrencyExchange
														SavedFromCurrency                = RNILocalRD.PcrCurrencyCode
														CurrencyExchange.ToCurrency        = Company.GeneralLedgerCompany.Currency
														SavedExchangeDate                = EarlyDeliveryDate
														SavedTransactionAmount            = RNILocalFields.ExtendedAmt
														CurrencyExchange.EnteredCurrencyRate      = RNILocalRD.PcrEntCnvRate
														RNILocalRD.PoCurAmt        = RNILocalFields.ExtendedAmt
														RNILocalRD.BaseCurAmt     = CurrencyExchange.OutputCurrencyAmount
			
													else
														RNILocalRD.PoCurAmt            = RNILocalFields.ExtendedAmt
														RNILocalRD.BaseCurAmt        = RNILocalFields.ExtendedAmt
														RNILocalRD.PoCurAmtNd        = Company.GeneralLedgerCompany.CurrencyNumberOfDecimals
														RNILocalRD.BaseCurAmtNd        = Company.GeneralLedgerCompany.CurrencyNumberOfDecimals
			
													invoke Create RNILineAOC in background
														invoked.PurchaseOrderResult                = PrmRNIRun
														invoked.Company                = Company
														invoked.PurchaseOrder        = PurchaseOrder        
														invoked.PurchaseOrderLine    = PurchaseOrderLine        
														invoked.RNILine                = NewRNILine.RNILine
														invoked.AddOnCharge            = RNILocalRD.RecKeyAocCode                        
														invoked.RniQty                = RNILocalRD.AccQty
														invoked.PliUnitCost            = RNILocalRD.PliUnitCost
														invoked.PoCurAmt            = RNILocalRD.PoCurAmt
														invoked.BaseCurAmt            = RNILocalRD.BaseCurAmt
														invoked.Account                = LAccount
														invoked.InvNbr                = RNILocalFields.MsgsInvNbr                                            
																

















														


													if (RNILocalRD.DistributionCodeBlock entered)
														if (!ItemType.Inventoried
														and RNILocalRD.BaseCurAmt entered)
															invoke Create RNILineDistribution
																invoked.RNILineDistribution = RNILocalRD.MmdLineSeq
																invoked.PurchaseOrderResult                    = PrmRNIRun
																invoked.RNILine                    = NewRNILine.RNILine
																invoked.Company                    = Company
																invoked.PurchaseOrder            = PurchaseOrder        
																invoked.PurchaseOrderLine        = PurchaseOrderLine        
																invoked.DistributionPercent        = 100
																if (PurchaseOrder.ProcessLevel.ReceiptAccrualAccount entered)
																	invoked.AccrualCodeBlock     = PurchaseOrder.ProcessLevel.ReceiptAccrualAccount
																else
																	invoked.AccrualCodeBlock     = Company.MatchCompany.ReceiptAccrualAccount
																invoked.CurrencyCode            = RNILocalRD.PcrCurrencyCode
																invoked.AddOnCharge                = RNILocalRD.RecKeyAocCode
																invoked.BaseCurAmt                 = RNILocalRD.BaseCurAmt
																invoked.PoCurAmt                 = RNILocalRD.PoCurAmt
																invoked.DistributionCodeBlock     = RNILocalRD.DistributionCodeBlock
																invoked.DistributionSequence    = RNILocalRD.MmdLineSeq
										
													else
														if (RNILocalFields.DistributionLinesCount < 6)
															invoke CreateDistributions PurchaseOrderLineDistribution in foreground
																invoked.PrmCompany                    = Company
																invoked.PrmPurchaseOrder            = PurchaseOrder    
																invoked.PrmPurchaseOrderLine        = PurchaseOrderLine
																invoked.PrmAddOnCharge                = RNILocalRD.RecKeyAocCode
																invoked.PrmRNIPostDate                = PrmRNIPostDate
																invoked.PrmRNIRun                    = PrmRNIRun
																invoked.PrmRNILine                    = NewRNILine.RNILine
																invoked.PrmRNILocalFields            = RNILocalFields
																invoked.PrmRNILocalRD                = RNILocalRD
														else
															invoke CreateDistributions PurchaseOrderLineDistribution in background
																invoked.PrmCompany                    = Company
																invoked.PrmPurchaseOrder            = PurchaseOrder    
																invoked.PrmPurchaseOrderLine        = PurchaseOrderLine
																invoked.PrmAddOnCharge                = RNILocalRD.RecKeyAocCode
																invoked.PrmRNIPostDate                = PrmRNIPostDate
																invoked.PrmRNIRun                    = PrmRNIRun
																invoked.PrmRNILine                    = NewRNILine.RNILine
																invoked.PrmRNILocalFields            = RNILocalFields
																invoked.PrmRNILocalRD                = RNILocalRD
    

    	PopulateBlankItem is a Set Action
    		restricted
    		Parameters
    			PrmCompany		is a PurchasingCompany
    		Instance Selection
    			where (Company = PrmCompany
    			and	  (ItemType.Service or ItemType.Special)
    			and	   Item not entered)
    		Action Rules
    			Instance Rules
    				if (ItemType.Special
    				and VendorItem entered)
    					Item = VendorItem
    				else
    					Item = Description
    			
		CreateReceiveAll is a Set Action
			restricted
			Parameters
				PrmCompany				is a PurchasingCompany
				PrmPurchaseOrderReceipt is a PurchaseOrderReceipt
				PrmRunInBackground		is Boolean
				
			Local Fields
				LocalReceivedQuantity	is like Quantity

			Instance Selection
				where	(Company		= PrmCompany
				and		PurchaseOrder	= PrmPurchaseOrderReceipt.PurchaseOrder
				and		!ItemType.Service
				and not IsCatchWeightItem
				and     QuantityToProcess > 0
				and     ReceivedQuantity < QuantityToProcess)
				
			Action Rules
				Set Rules
					Exit Rules
						if (PrmRunInBackground)
							invoke CreateInProgress.TransitionToUnreleased PrmPurchaseOrderReceipt
						
				Instance Rules
					RoundedValue.RoundInput						= RemainingQuantity
					RoundedValue.RoundingType					= RoundedValue.RoundingType.Normal
					RoundedValue.RoundTo						= (1/10^DerivedNumberOfDecimalsQuantity)
					RoundedValue.RoundingMethodFW				= RoundedValue.RoundingMethodFW.MultipleOf
					LocalReceivedQuantity 						= RoundedValue.RoundResult
					
					invoke Create POReceiptLineTemplate
						fill in fields from this instance
						invoked.ReceivedQuantity				= LocalReceivedQuantity
						invoked.PurchaseOrderReceipt			= PrmPurchaseOrderReceipt
						invoked.TransientInspectionRequired		= InspectionRequired
					
		RollUpAmountsToHeader is an Instance Action
			restricted
			Parameters
				PrmUpdateAmountsOnly	is Boolean
			Action Rules
				invoke UpdateHeaderAmountsFromPurchaseOrderLine PurchaseOrder
					invoked.PrmNumberOfLines		    = 1
					invoked.PrmExtendedAmount			= ExtendedAmount
					invoked.PrmExtendedTaxableAmount	= ExtendedTaxableAmount
					invoked.PrmStockWeight				= StockWeight
					invoked.PrmStockVolume				= StockVolume
					invoked.PrmAccruedTaxAmount			= AccruedTaxAmount
					invoked.PrmInvoicedTaxAmount		= InvoicedTaxAmount
					invoked.PrmOpenPurchaseAmount		= OpenPurchaseAmount
					invoked.PrmEDIOutputLineAmount		= EDIOutputLineAmount
					invoked.PrmBypassVendorUpdate		= true
					invoked.PrmUpdateAmountsOnly		= PrmUpdateAmountsOnly

        DeletePatientProcedure is an Instance Action  
            restricted
            Action Rules
                LocalPatientProcedure = PatientProcedure
                initialize PatientProcedure
            Exit Rules
                if (FromRequisitions
                and not LocalDeleteLine)
                    for each LineSourcesFromRQRel
		                if (each.RequisitionLineRel.PatientProcedure entered)
		                	invoke DeletePatientProcedure each.RequisitionLineRel
		                	initialize LocalPatientProcedure
                if (LocalPatientProcedure entered)
                	invoke Delete PatientProcedureRel

    	CopyComment is an Instance Action
			restricted
			Parameters
				PrmFrmPurchaseOrderLine	is like PurchaseOrderLine

			Parameter Rules
				PrmFrmPurchaseOrderLine
					required

			Action Rules
				for each PurchaseOrderLineComment set
					invoke SystemCreateLine PurchaseOrderLineComment
						fill in fields from each
							except invoked.Attachment.FSMAttachmentIDM
						invoked.PurchaseOrderLine 	= PrmFrmPurchaseOrderLine	
						invoked.Attachment.File	  	= each.Attachment.File
						invoked.Attachment.MimeType	= each.Attachment.MimeType
						invoked.Attachment.Title	= each.Attachment.Title
		
		BudgetExceedTrigger is an Instance Action	
			restricted
			Action Rules
				if(PurchasingVendorRel.OpenPurchaseLimit > 0 and ((PurchasingVendorRel.OpenPurchaseAmount + PurchaseOrder.OpenPurchaseAmount) > PurchasingVendorRel.OpenPurchaseLimit))			
					if(BudgetExceedFlag = false)	
						BudgetExceedFlag = true
						trigger "BudgetExceedsService" PA service		
							resume on error
	                		title is "EG:<GeneralLedgerCompanyRel.FinanceEnterpriseGroup>CO:<Company>PO:<PurchaseOrder>"
	                		Criteria
	                			GeneralLedgerCompanyRel.FinanceEnterpriseGroup
	                  	 	 	Company	
							Variables
								Company
									variable name is Company	
								PurchaseOrder
									variable name is PONumber
								EnteredBuyUOM
									variable name is BuyerUOM
								EnteredUnitCost
									variable name is UnitCost     
								Item	
									variable name is Item	
								Description
									variable name is Description
								Quantity 
									variable name is Quantity 
								Vendor	
									variable name is Vendor	
						invoke BudgetExceedsAlert 
						 

		BudgetExceedsAlert is an Instance Action
			restricted
			Parameters
			Action Rules
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger  and FSMBODConfigurationRel.Enable)
					if(FSMBODConfigurationDetailRel.Enable)
						invoke TriggerPulseAlert FSMBODConfigurationRel
							invoked.PrmActorGroup 	= "ACTIVITYOWNER" 
							invoked.PrmMainXML 		= BudgetExceedsAlertXML	
							invoked.PrmDescription	= BudgetExceedsDescription
							invoked.PrmBODID		= DerivedBODID

		
        EditDelete is an Instance Action
        	restricted
        	Action Rules
        		include DeleteRules

				for each PurchaseOrderAndLineAddOnCharge set
					constraint (each.IsNotCanceled)
				    	"CannotDelete,AddOnChargeIsCanceled"  

				for each WarehouseDemandLinesRel
					invoke EditDelete each
				
    	Delete is a Delete Action
    		valid when (IsDeleteAllowed)
    		
			Local Fields
				LocalPurchaseOrderLine is a PurchaseOrderLine
				
    		Entrance Rules
    			if (HasPatientProcedureRecord)
	    			LocalDeleteLine = true
					invoke  DeletePatientProcedure
					
				if (not PurchaseOrder.ForHeaderDeletion)
					include DeleteRules
													
				initialize PurchaseOrderLineDeleteLineSourceWareHouseDemandMaxQuantityToDelete
				initialize PurchaseOrderLineDeleteDeletedQuantity
	
				for each CommittedPurchaseOrderLineDistributionsRel
					invoke DeletePOCommitment each
						invoked.PrmSkipUpdateTemplateTotals = true
				if (Contract entered)
					if (EnteredBuyUOM not = VendorPriceUOM)
						initialize UOMCalculation
						initialize LocalQuantity
						if (ReceivedQuantity > QuantityToProcess) 
							UOMCalculation.InputQuantity	= ReceivedQuantity
						else
							UOMCalculation.InputQuantity	= QuantityToProcess
						UOMCalculation.InputUOM				= EnteredBuyUOM
						UOMCalculation.InputToUOM			= VendorPriceUOM
						UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
						LocalQuantity						= UOMCalculation.OutputQuantity
					else
						if (ReceivedQuantity > QuantityToProcess) 
							LocalQuantity					= ReceivedQuantity
						else
							LocalQuantity					= QuantityToProcess
					LocalContractQuantity					= LocalQuantity
					LocalVendorPriceQuantityToProcess		= LocalQuantity
					if (LastMatchUnitCost entered)
						ContractAmount 						= LocalQuantity * LastMatchUnitCost
					else
						ContractAmount 						= LocalQuantity * EnteredUnitCost
					include CalculateAOCSPIN
	
				if (Contract entered
				and Released)
					invoke UpdateContractAmounts
						invoked.PrmTaxAmount				= (LocalContractTaxAmt * -1)
						invoked.PrmAOCAmount				= (LocalAOCAmt * -1)
						invoked.PrmAmount					= (ContractAmount * -1)
						invoked.PrmContractQuantity			= (LocalContractQuantity * -1)
						invoked.PrmContractCurrency			= PurchaseOrder.Currency
						invoked.PrmContractUOM				= EnteredBuyUOM
						if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate = 1)
							invoked.PrmContractDate 		= PurchaseOrder.PurchaseOrderDate
						if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate = 2)
							invoked.PrmContractDate			= EarlyDeliveryDate
						invoked.PrmFromCancelOrDelete		= true

    			initialize LocalPurchaseOrderLine
    			LocalPurchaseOrderLine = OriginalLineNumber	
    			invoke  DeleteFromPurchaseOrderLine PurchaseOrderLineSource set

				if (not PurchaseOrder.ForHeaderDeletion)
					include UnreleasePurchaseOrder
    				
    			if (VendorReturnLine entered 
				and PurchaseOrder.VendorReturn.CreditNeeded)
					invoke Cancel VendorReturnLine 
				
				for each PurchaseOrderLineAddOnChargesRel
					invoke Delete each
					
				invoke Delete POReceiptInvoiceLinkWithReceivedQuantityRel

		    Exit Rules
		    	invoke Delete WarehouseDemandLinesRel
		    	
		    	if (not PurchaseOrder.ForHeaderDeletion)
			    	invoke UpdateHeaderAmountsFromPurchaseOrderLine PurchaseOrder
			    		invoked.PrmNumberOfLines 					    = -1
				    	if (Closed.Yes)
							invoked.PrmNumberOfClosedLines 			    = -1
						invoked.PrmExtendedAmount						= ExtendedAmount * -1
						invoked.PrmExtendedTaxableAmount				= ExtendedTaxableAmount * -1
						invoked.PrmStockWeight							= StockWeight * -1
						invoked.PrmStockVolume							= StockVolume * -1
						invoked.PrmAccruedTaxAmount						= AccruedTaxAmount * -1
						invoked.PrmInvoicedTaxAmount					= InvoicedTaxAmount * -1
						invoked.PrmOpenPurchaseAmount					= OpenPurchaseAmount * -1
						invoked.PrmEDIOutputLineAmount					= EDIOutputLineAmount * -1
						invoked.PrmBypassVendorUpdate					= true
				
					if (not SubstituteLinesExist)
						invoke UpdateOriginalLineNumber LocalPurchaseOrderLine
					
		PurgePurchaseOrderLineSet is a Set Action
			restricted
			Parameters
				PrmCompany			is a PurchasingCompany
				PrmPurchaseOrder	is a PurchaseOrder
				
			Instance Selection
				include deleted records
				where (Company			= PrmCompany
				and    PurchaseOrder	= PrmPurchaseOrder)
				
			Action Rules
				Instance Rules
					invoke Purge

		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				if (HasPatientProcedureRecord)
					LocalPatientProcedure = PatientProcedure
					invoke Purge PatientProcedureRel
				invoke Purge PurgePurchaseOrderLineDistributionDetailRel
				invoke Purge PurgePurchaseOrderLineDistributionsRel
				invoke Purge PurgePurchaseOrderLineSourceRel
				invoke Purge PurgePurchaseOrderLineAssetRel
				invoke Purge PurgePurchaseOrderLineCommentRel
				invoke Purge PurgePurchaseOrderLineTaxRel
				
    	CreateAssetDefaults is an Instance Action
    		restricted
    		Parameters
    			Company
    			PurchaseOrder
    			PurchaseOrderLine
    			AssetDescription         is a Description
		        TagNumber 
		        AssetGroup
		        AssetAccountingUnitGroup
		        Combine 
		        HoldAsset                is Boolean
		      	Project	 		 is a FinanceCodeBlockProjectOnly
		      		default label is "AssetProject"
		        ItemNumber               is an AssetItemNumber
		        ItemDescription          is a Description
		        ModelNumber
		        PurchaseDate             is Date
		        InServiceDate            is Date
		        TransactionItemTax       is an InternationalAmount
		        AssetLocation
		        AssetDivision
		        LocationDetail           is an AssetLocationDetail
		    
		    Parameter Rules								
				TagNumber
					if (PurchaseOrder.DefaultAssetTemplate.Company.RequireUniqueTags = true)
						LocalCompany 		= PurchaseOrder.DefaultAssetTemplate.Company
						LocalTagNumber 		= TagNumber
						constraint (UniqueAssetsTagRel not exists)
							"TagNumber<TagNumber>IsInUse"    
		    
		    Action Rules
		    
		    	invoke Create PurchaseOrderLineAssetDefaults
		    		invoked.Company						= Company
                	invoked.PurchaseOrder               = PurchaseOrder
                	invoked.PurchaseOrderLine           = PurchaseOrderLine
	                invoked.AssetDescription            = AssetDescription
	                invoked.TagNumber                   = TagNumber
	                invoked.AssetGroup                  = AssetGroup
	                invoked.AssetAccountingUnitGroup    = AssetAccountingUnitGroup
	                invoked.Project                     = Project
	                invoked.Combine               	    = Combine
	                invoked.HoldAsset                   = HoldAsset
	                invoked.ItemNumber                  = ItemNumber
	                invoked.ItemDescription             = ItemDescription
	                invoked.ModelNumber                 = ModelNumber
	                invoked.PurchaseDate                = PurchaseDate
	                invoked.InServiceDate               = InServiceDate
	                invoked.AssetLocation               = AssetLocation
	                invoked.AssetDivision               = AssetDivision
	            	invoked.LocationDetail              = LocationDetail
    	
    	UpdateDistributionByForCombine is an Instance Action
    		restricted
    		Parameters
    			PrmDistributionBy is a DistributionBy
    		Action Rules
    			DistributionBy = PrmDistributionBy
    			
    	ReconcileDistributionLinesByQuantity is an Instance Action
    		restricted
    		valid when (PurchaseOrder.PurchaseOrderInOpenStatus)
    		Local Fields
    			LocalReconcileSourcedFromMultipleLine 		is Boolean
    			LocalReconcileSourceDistLineByPercent 		is Boolean
    			LocalReconcilePODistFirstRecordProcessed	is Boolean
    			LocalReconcileSourceLineCount 				is Numeric size 6
    			LocalReconcilePODistQuantity				is like Quantity
    			LocalReconcilePODistTotalQuantity			is like Quantity
    			LocalReconcileDistPercentTotalValue			is Percent size 6.3
        		LocalReconcileDistQuantityTotalValue		is like Quantity
        		LocalReconcileDistAmountTotalValue			is like InternationalAmount
    		Entrance Rules
    			if (instance count of LineSourcesFromRQRel > 1)
    				LocalReconcileSourcedFromMultipleLine = true
    			for each LineSourcesFromRQRel
					TransientLineSourceCompany = each.PurchaseOrderLineSource.OperatingCompany   
					TransientLineSourceLineNumber = each.PurchaseOrderLineSource.SourceDocumentLineNumber 
					TransientLineSourceDocumentNumber = each.PurchaseOrderLineSource.SourceDocumentNumeric
					if (RequisitionLineRel.DistributionBy.ByPercent)
						LocalReconcileSourceDistLineByPercent = true
    			if (LocalReconcileSourcedFromMultipleLine
    			and LocalReconcileSourceDistLineByPercent)
    				for each PurchaseOrderLineDistributionsRel
						if (each.DistributionQuantity entered)
							invoke MoveToDistributionByQuantity each
								invoked.PrmDistributionQuantity = 0
								invoked.PrmIncrement = false
    		Action Rules
    			if (LocalReconcileSourcedFromMultipleLine
    			and LocalReconcileSourceDistLineByPercent)
    				initialize LocalReconcilePODistTotalQuantity
    				LocalReconcileSourceLineCount = instance count of LineSourcesFromRQRel
					for each PurchaseOrderLineDistributionsRel
						if (each.DistributionQuantity entered)
							invoke MoveToDistributionByQuantity each
								invoked.PrmDistributionQuantity = 0
								invoked.PrmIncrement = false
    				for each LineSourcesFromRQRel
						TransientLineSourceCompany = each.PurchaseOrderLineSource.OperatingCompany   
						TransientLineSourceLineNumber = each.PurchaseOrderLineSource.SourceDocumentLineNumber 
						TransientLineSourceDocumentNumber = each.PurchaseOrderLineSource.SourceDocumentNumeric
						initialize LocalReconcileDistPercentTotalValue
						if (RequisitionLineRel.DistributionBy.ByPercent)
							LocalReconcileDistPercentTotalValue = RequisitionLineRel.DistributionPercentTotal
						initialize LocalReconcileDistQuantityTotalValue
						if (RequisitionLineRel.DistributionBy.ByQuantity)
							LocalReconcileDistQuantityTotalValue = RequisitionLineRel.DistributionQuantityTotal
						initialize LocalReconcileDistAmountTotalValue
						if (RequisitionLineRel.DistributionBy.ByAmount)
							LocalReconcileDistAmountTotalValue = RequisitionLineRel.DistributionAmountTotal
						for each RequisitionLineRel.RequisitionLineDistributionsRel
							initialize LocalReconcilePODistQuantity
							
							if (RequisitionLineRel.DistributionBy.ByPercent)
								LocalReconcilePODistQuantity = each.DistributionPercent / LocalReconcileDistPercentTotalValue * RequisitionLineRel.Quantity
							if (RequisitionLineRel.DistributionBy.ByQuantity)
								LocalReconcilePODistQuantity = each.DistributionQuantity / LocalReconcileDistQuantityTotalValue * RequisitionLineRel.Quantity
							if (RequisitionLineRel.DistributionBy.ByAmount)
								LocalReconcilePODistQuantity = each.DistributionAmount / LocalReconcileDistAmountTotalValue * RequisitionLineRel.Quantity
							LocalReconcilePODistTotalQuantity += LocalReconcilePODistQuantity
							initialize LocalReconcilePODistFirstRecordProcessed
							LocalDistributionAccount = each.DistributionAccount
							for each PurchaseOrderLineDistributionsByAccountRel
								if (LocalReconcilePODistFirstRecordProcessed)
									invoke Delete each
								else
									DistributionBy = DistributionBy.ByQuantity
									invoke MoveToDistributionByQuantity each
										invoked.PrmDistributionQuantity = LocalReconcilePODistQuantity
										invoked.PrmIncrement = true
									LocalReconcilePODistFirstRecordProcessed = true

		UpdateFromAcknowledgement is an Update Action


			restricted
			Local Fields
				LocalPOLineSourceQuantity		is like Quantity
			Action Rules
				TransientBypassCostDefaulting	= true									
			Exit Rules
				include UpdatePurchaseOrderReceiptLineCost
				include CalculateLandedUnitCost
				include UpdateQuantitiesOrUnitCostOutsidePOLine
				include UpdateHeaderAmountsFromLine

    	Update is an Update Action


    		restricted
    		
    	FastUpdate is an Update Action
    		restricted
    		bypass field rules	

		UpdateFromTaxLineItem is an Instance Action
			restricted
			Parameters
				PrmAccruedTaxAmount		is an InternalAmount
				PrmInvoicedTaxAmount	is an InternalAmount
				PrmLandedUnitCost		is an InternationalCost
				PrmTaxCode 				is like TaxCode 
			Action Rules
				AccruedTaxAmount	 = PrmAccruedTaxAmount
				InvoicedTaxAmount	 = PrmInvoicedTaxAmount
				LandedUnitCost		+= PrmLandedUnitCost
				if (TaxCode = "00"
				and PrmTaxCode entered)
					TaxCode = PrmTaxCode 
			Exit Rules
				include UpdateHeaderAmountsFromLine

    	UpdateFromDistribution is an Update Action
    		restricted
    		bypass field rules	
			Action Rules
				if (MissingDistribution
				and DistributionCode entered)
					initialize DistributionCode
    		
		CreateVendorReturnLine is an Update Action
			valid when (PurchaseOrder.CreateForVendorReturn entered)
			bypass field rules
			Exit Rules
				if (VendorReturnLinesCreationRel not exists)
					invoke Create VendorReturnLine
						invoked.Company								= Company
						invoked.VendorReturn						= PurchaseOrder.CreateForVendorReturn
						invoked.ReferenceNumber						= VendorReturnForCreateForVendorReturnRel.ReferenceNumber
						invoked.OriginalPurchaseOrder				= PurchaseOrder 
						invoked.OriginalPurchaseOrderLine			= PurchaseOrderLine
						invoked.Item								= Item
						invoked.Description							= Description
						invoked.ItemType							= ItemType
						invoked.ReturnQuantity						= ReturnedQuantity
						invoked.InspectionRequired					= InspectionRequired
						if (!VendorReturnForCreateForVendorReturnRel.VendorClaimType.NoCharge)
        					invoked.UnitCost						= TransReturnUnitCost	
						invoked.LastDistributionSequence			= LastDistributionSequence
						invoked.TaxCode								= TaxCode
						invoked.TaxUsageCode						= TaxUsageCode
						invoked.ProductTaxCategory					= ProductTaxCategory
						invoked.StockWeight							= StockWeight
						invoked.VendorItem							= VendorItem
						invoked.Contract    						= Contract
						invoked.ContractLine                        = ContractLine	        			
						invoked.ItemGTIN							= ItemGTIN
						invoked.EnteredUOM							= EnteredBuyUOM
						invoked.EnteredUOMMultiplier				= EnteredBuyUOMMultiplier
						invoked.VendorPriceUOM						= VendorPriceUOM
						invoked.VendorPriceUOMMultiplier			= VendorPriceUOMMultiplier
						if (IsCatchWeightItem)
							invoked.CatchWeightQuantity				= TransientCatchWeightReturnedQuantity
				else
					for each VendorReturnLinesCreationRel
						invoke Update each
							invoked.ReturnQuantity = ReturnedQuantity
							invoked.CatchWeightQuantity = TransientCatchWeightReturnedQuantity
					        if (!VendorReturnForCreateForVendorReturnRel.VendorClaimType.NoCharge)
	        					invoked.UnitCost   = TransReturnUnitCost

		SubstituteVendorItem is an Instance Action
			valid when (ValidToSubstituteForVendorItem)
			Parameters
				PrmItem						is an Item
				PrmVendor					is a Vendor
				PrmSubstituteVendorItem		is a VendorItem
				PrmOriginalQuantity			is a Quantity
				PrmQuantity					is a Quantity
				PrmEnteredBuyUOM			is an UnitOfMeasure
				PrmEnteredUnitCost			is an UnitCost
			Parameter Rules
				PrmItem
					initial value is Item
					force default to Item	
				PrmVendor
					initial value is Vendor
					force default to Vendor
				PrmOriginalQuantity
					initial value is Quantity
				PrmQuantity
					initial value is Quantity
				PrmEnteredBuyUOM
					initial value is EnteredBuyUOM
				PrmEnteredUnitCost
					initial value is VendorBuyUnitCost
				PrmSubstituteVendorItem
					constraint (PrmSubstituteVendorItem != VendorItem)
						"CannotSubstituteTheSameVendorItem"
					if (InventoriedOrNonstock)
						if (ActiveVendorItemsRel exists)
							constraint (PrmSubstituteVendorItem exists)
								"CannotEnterVendorItemDifferentFromExisting"
						
						if (VendorItemsRel exists)
							if (not IsPrinted and PrmSubstituteVendorItem exists)
								constraint (PrmSubstituteVendorItem.Active)		
									"VendorItemIsInactive"
					required
						"SubstituteVendorItemIsRequired"
			Action Rules
				constraint (!IsFullyReceived)
					"CannotSubstituteForVendorItemWhenPurchaseOrderLineIsFullyReceived"
				constraint (!IsFullyMatched)
					"CannotSubstituteForVendorItemWhenPurchaseOrderLineIsFullyInvoiceMatched"
				constraint (!LineFullyCancelled)
					"CannotSubstituteForVendorItemWhenPurchaseOrderLineIsFullyCancelled"
				constraint (PrmOriginalQuantity <= Quantity)
					"CannotRaiseOriginalPOLineOrderQuantity"
				
				if (IsOriginalWithoutSubstitute)
					OriginalLineNumber	= PurchaseOrderLine
				
				if (PrmOriginalQuantity != Quantity)	
					invoke CancelLine
						invoked.PrmCancelQuantity = Quantity - PrmOriginalQuantity	
					
				Quantity 			= PrmOriginalQuantity

				invoke Create
					fill in fields from this instance
						except invoked.PurchaseOrderLine
						except invoked.VendorItem
						except invoked.LineNumber
						except invoked.Quantity
						except invoked.EnteredBuyUOM
						except invoked.EnteredUnitCost
						except invoked.EarlyDeliveryDate
						except invoked.LateDeliveryDate
                        except invoked.POShipDate
						except invoked.ReceivingActivityDate
						except invoked.CloseDate
						except invoked.Released
						except invoked.Issued
						except invoked.Revised
						except invoked.ArchivedQuantity
						except invoked.MatchedNotReceivedQuantity
						except invoked.MatchedQuantity
						except invoked.MatchedAmount
						except invoked.OvershipmentToleranceOption
						except invoked.UndershipmentToleranceOption
						except invoked.CancelQuantity
						except invoked.QuantityToProcess
						except invoked.PreviouslyReleased
						except invoked.ChargeQuantity
						except invoked.ChargedNotReceivedQuantity
						except invoked.ChargeApprovedQuantity
						except invoked.ChargeDisputeQuantity
						except invoked.ChargebackAmount
						except invoked.MemoQuantity
						except invoked.CreatedBy
						except invoked.LastUpdateBy
						except invoked.LastUpdateDate
						except invoked.ReturnQuantity
						except invoked.PurchaseOrderLineLifeCycleState
						except invoked.ReceivedQuantity
						except invoked.Taxable
						except invoked.TaxCode
						except invoked.TaxableUnitCost	
						except invoked.LandedUnitCost
						except invoked.CostCode
						except invoked.LastMatchUnitCost
						except invoked.SubstituteQuantity
						except invoked.RejectedQuantity
						except invoked.WriteOffQuantity
						except invoked.VendorReturnLine
						except invoked.VendorPriceUOMQuantityToProcess
						except invoked.OpenPurchaseAmount
						except invoked.OpenPurchaseAmountPOCurrency
						except invoked.ServiceCancelAmount
						except invoked.MemoAmount
						except invoked.VendorPriceUnitCost
						except invoked.PatientProcedure
						except invoked.Contract
						except invoked.ContractLine
						except invoked.Preferred
						except invoked.Tier
					invoked.VendorItem				= PrmSubstituteVendorItem
					invoked.Quantity				= PrmQuantity
					invoked.EnteredBuyUOM			= PrmEnteredBuyUOM
					invoked.VendorBuyUnitCost		= PrmEnteredUnitCost
		
		UpdateOriginalLineNumber is an Instance Action
			restricted
			Action Rules
				initialize OriginalLineNumber

    	UpdateEDIOutputLineAmounts is an Instance Action
    		restricted
    		Action Rules
				if (PurchaseOrder.SuppressPOCost)
					if (PurchaseOrder.IssueMethod.EDI
					or  PurchaseOrder.IssueMethod.Email
					or  PurchaseOrder.IssueMethod.Fax
					or  PurchaseOrder.IssueMethod.Paper)
						EDIOutputUnitCost = 0
					if (PurchaseOrder.IssueMethod.XML
					and PurchaseOrder.AribaPOType entered)
						EDIOutputUnitCost = .01
					EDIOutputLineAmount = (VendorPriceUOMQuantityToProcess * EDIOutputUnitCost)
				else
					EDIOutputUnitCost = EnteredUnitCost
					EDIOutputLineAmount = (VendorPriceUOMQuantityToProcess * EnteredUnitCost)

    	UpdateLineFromHeader is an Instance Action


    		restricted
    		Parameters
    			PrmOldHeaderCurrency				is a Currency
    		Action Rules
    			LocalVendorChange	= true
    			
    			if (Closed.Yes)
	    			constraint (Company.ReopenPurchaseOrderLine)
						"CompanyDoesNotAllowChangesToAClosedPurchaseOrderLine"

				if (InventoriedOrNonstock and ItemExists)
					constraint (Item.Active)
						"Item<Item>IsInactive"
						
				LocalOldHeaderCurrency = PrmOldHeaderCurrency
				
				if (LocalOldHeaderCurrency entered)
					CurrencyChanged = true
				
				if (PurchaseOrderLineLifeCycleState.Unreleased)
    				invoke Unreleased.Update
						if (Vendor != PurchaseOrder.Vendor)
							initialize Contract
							initialize ContractLine
							initialize Preferred
							initialize Manufacturer
							initialize ManufacturerNumber
    					invoked.Vendor					= PurchaseOrder.Vendor
    					invoked.Buyer					= PurchaseOrder.Buyer
    					invoked.PurchaseFromLocation 	= PurchaseOrder.PurchaseFromLocation
    			else
    			if (PurchaseOrderLineLifeCycleState.Released)
    				invoke Released.Update
						if (Vendor != PurchaseOrder.Vendor)
							initialize Contract
							initialize ContractLine
							initialize Preferred
							initialize Manufacturer
							initialize ManufacturerNumber
    					invoked.Vendor					= PurchaseOrder.Vendor
    					invoked.Buyer					= PurchaseOrder.Buyer
    					invoked.PurchaseFromLocation 	= PurchaseOrder.PurchaseFromLocation
    			else
    			if (PurchaseOrderLineLifeCycleState.Closed)
    				invoke Closed.Update
						if (Vendor != PurchaseOrder.Vendor)
							initialize Contract
							initialize ContractLine
							initialize Preferred
							initialize Manufacturer
							initialize ManufacturerNumber
    					invoked.Vendor					= PurchaseOrder.Vendor
    					invoked.Buyer					= PurchaseOrder.Buyer
    					invoked.PurchaseFromLocation 	= PurchaseOrder.PurchaseFromLocation
    			
    		Exit Rules
    		



				if (CurrencyChanged)
    				include CheckForBudgetAndCommitmentChanges	
    				
    	UpdateLandedUnitCostFromAOC is an Instance Action
    		restricted
    		Parameters
    			PrmLandedUnitCost		is an InternationalCost
    			FromRequisition         is Boolean
    			FromCancel              is Boolean
    			
    		Action Rules
				LandedUnitCost			+= PrmLandedUnitCost

			Exit Rules
				if (HasCommitments)
					for each CommittedPurchaseOrderLineDistributionsRel 
            			invoke UpdateGLCommitmentIndirect each 
            				if (FromRequisition)
            					invoked.FromRequisitionAOC = true
            				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
            					invoked.PerformBudgetEdit = true
            				if (FromCancel)
            					invoked.PrmFromCancel     = true

 		UpdateRejectQtyFromPORInspectionLine is an Instance Action
			restricted					
			Parameters
				PrmRejectedQuantity     		is a Quantity
				PrmCatchWeightRejectedQuantity	is a Quantity
			Action Rules
				RejectedQuantity 				+= PrmRejectedQuantity
				CatchWeightRejectedQuantity		+= PrmCatchWeightRejectedQuantity
 
 						
		CreateCopy is a Create Action
			restricted
			Action Rules
				LocalCopyPurchaseOrder = true
			
        CreateFromBatch is a Create Action
        	restricted
        	Action Rules
        		BypassDistributionCreation = true
        
        CreateFromBatchWithBypassCostDefaulting is a Create Action
        	restricted
        	Action Rules
        		BypassDistributionCreation = true
				TransientBypassCostDefaulting = true
        		
        CreateFromImport is a Create Action
        	restricted
        	
        	Action Rules
        		FromMassAdd 		= true
        	        	
        CreateCommentLog is an Instance Action
        	restricted
        	Parameters
    			PrmCompany			is a PurchasingCompany
        		PrmPurchaseOrder 	is a PurchaseOrder
        		PrmComment 			is Alpha size 50
        	Local Fields
    			LocalAppendComment					  is Boolean
        	Action Rules
        		LocalAppendComment = false
				if(PrmPurchaseOrder.HasComment)
					for each PrmPurchaseOrder.PurchaseOrderComment set
						if(each.CommentTitle="PO29" and each.CommentType="E")
    						LocalAppendComment = true
							invoke Update each
								invoked.CommentText			+= PrmComment        
    						end for each	
				if(not LocalAppendComment)
    				invoke SystemCreate PurchaseOrderComment
    					invoked.Company				= PrmCompany
						invoked.PurchaseOrder		= PrmPurchaseOrder
						invoked.CommentTitle		= "PO29"
						invoked.CommentType			= "E"
						invoked.CommentText			= PrmComment        	
    				





		CopyPurchaseOrderLineSet is a Set Action
			restricted
			Parameters
				PrmCompany							is a PurchasingCompany
				PrmPurchaseOrder                    is a PurchaseOrder 
				PrmCopyDistributions				is Boolean
				PrmCopyUnitCost             		is Boolean
				PrmCopyIgnoreCancelQuantity			is Boolean
				PrmCopySourceRecords				is Boolean
				PrmCopyComments						is Boolean
				PrmCopyTaxData						is Boolean
				PrmCopyAddOnCosts					is Boolean
				PrmNewDefaultTaxCode				is a TaxCode
				PrmBuyer							is a Buyer
				PrmVendor							is a Vendor
				PrmVendorBuyUnitCost                is an InternationalCost
				PrmEnteredUnitCost					is an InternationalCost
				PrmCostOption						is a CostOption
				PrmPurchaseFromLocation				is an PurchaseFromLocation
				PrmShipToLocation					is an InventoryLocation
				PrmNewRequestingLocation			is a RequestingLocation
				PrmRequester						is a Requester
				PrmUsePOVendor						is Boolean
				PrmUsePOPurchaseFromLocation		is Boolean
				PrmIsReleased						is Boolean
				PrmSourceDocument					is a DefaultSourceDocument
				PrmCopyFromPurchaseOrder			is a PurchaseOrder
				PrmPurchaseOrderDate				is Date
			Local Fields
				LocalPurchaseOrderLine              is a PurchaseOrderLine view
                LocalBuyer							is a Buyer
              	LocalInitializeContract				is Boolean
			Parameter Rules
				PrmVendorBuyUnitCost
					if (PrmVendor != Vendor
					and Vendor entered)
						if (PrmEnteredUnitCost not entered
						and CostOption.CostRequired)
							if (VendorBuyUnitCost entered)
								PrmVendorBuyUnitCost = VendorBuyUnitCost
								initialize PrmEnteredUnitCost
							else
								if (EnteredUnitCost not entered)
									PrmEnteredUnitCost		= EnteredUnitCost
									PrmVendorBuyUnitCost	= VendorBuyUnitCost
									PrmCostOption			= CostOption
									
									invoke CreateCommentLog
										invoked.PrmCompany			= PrmCompany
										invoked.PrmPurchaseOrder	= PrmPurchaseOrder
										invoked.PrmComment			= BypassCopyLinesComment
								PrmEnteredUnitCost	= EnteredUnitCost
								initialize PrmVendorBuyUnitCost

			Instance Selection
				where	(Company		= PrmCompany
				and		 PurchaseOrder	= PrmCopyFromPurchaseOrder
				and		(HeaderIsFullyCanceledOrLineCanBeCopied
				or 		(PrmCopyIgnoreCancelQuantity and ForIgnoreCancelQuantity)))

			Action Rules
				Instance Rules
					initialize LocalInitializeContract
					if (PrmCopyDistributions)
		            	BypassDistributionCreation = true
		
		          	if (Buyer not = PrmBuyer)
		          		LocalBuyer 				= PrmBuyer
		          	else
		          		LocalBuyer 				= Buyer
		          		
		          	if (Contract entered)
						if (((Contract.ExpirationDate entered
						and Contract.LastInvoiceAllowedDate not entered
						and PrmPurchaseOrderDate > Contract.ExpirationDate)
						or (Contract.FirstInvoiceAllowedDate not entered
						and PrmPurchaseOrderDate < Contract.EffectiveDate) 		//dates are not "valid"
						or  not (Contract.ContractStatus.Active)) 				
						or (PrmVendor != Vendor and PrmVendor entered) 			
						or (ItemType.Service and  PrmCopyUnitCost 				
						and LocalBuyer.OverrideContractCost)					
						or (InventoriedOrNonstock and not VendorItem.IsActive) 	
						or RelatedVendorItemOnContractLineRel not exists 		
						or ((not PrmCopyUnitCost 								
						or LocalBuyer.OverrideContractCost						
						or LocalBuyer.OverrideLastPOLastCost)					
						and not ItemType.Service)) 								
							LocalInitializeContract = true
		            		
		            invoke CreateCopy PurchaseOrderLine
		                assign result to LocalPurchaseOrderLine
						resume on error
		            		CopyErrorMessage = error message
		               
		                fill in fields from this instance
							except invoked.EarlyDeliveryDate
							except invoked.LateDeliveryDate
                            except invoked.POShipDate
							except invoked.ReceivingActivityDate
							except invoked.CloseDate
							except invoked.Released
							except invoked.Issued
							except invoked.Revised
							except invoked.ArchivedQuantity
							except invoked.MatchedNotReceivedQuantity
							except invoked.MatchedQuantity
							except invoked.MatchedAmount
							except invoked.OvershipmentToleranceOption
							except invoked.UndershipmentToleranceOption
							except invoked.CancelQuantity
							except invoked.QuantityToProcess
							except invoked.PreviouslyReleased
							except invoked.ChargeQuantity
							except invoked.ChargebackQuantity
							except invoked.ChargedNotReceivedQuantity
							except invoked.ChargeApprovedQuantity
							except invoked.ChargeDisputeQuantity
							except invoked.ChargebackAmount
							except invoked.MemoQuantity
							except invoked.CreatedBy
							except invoked.LastUpdateBy
							except invoked.LastUpdateDate
							except invoked.ReturnQuantity
							except invoked.PurchaseOrderLineLifeCycleState
							except invoked.ReceivedQuantity
							except invoked.Taxable
							except invoked.TaxCode
							except invoked.TaxableUnitCost
							except invoked.AccruedTaxAmount
							except invoked.InvoicedTaxAmount
							except invoked.ExtendedTaxableAmount	
							except invoked.LandedUnitCost
							except invoked.PrintedOnReceivingDocument
							except invoked.CostCode
							except invoked.LastMatchUnitCost
							except invoked.SubstituteQuantity
							except invoked.RejectedQuantity
							except invoked.WriteOffQuantity
							except invoked.VendorReturnLine
							except invoked.VendorPriceUOMQuantityToProcess
							except invoked.OpenPurchaseAmount
							except invoked.OpenPurchaseAmountPOCurrency
							except invoked.ServiceCancelAmount
							except invoked.MemoAmount
							except invoked.VendorPriceUnitCost
							except invoked.PatientProcedure
							except invoked.LineNumber
							except invoked.EnteredUnitCost
							except invoked.CatchWeightQuantity
							except invoked.CatchWeightCancelQuantity
							except invoked.CatchWeightMatchQuantity
							except invoked.CatchWeightMatchedNotReceivedQuantity
							except invoked.CatchWeightChargebackQuantity
							except invoked.CatchWeightSubstituteQuantity
							except invoked.CatchWeightRejectedQuantity
							except invoked.CatchWeightReturnedQuantity
							except invoked.CatchWeightArchivedQuantity
							except invoked.CatchWeightMemoQuantity
							except invoked.CatchWeightWriteOffQuantity
							except invoked.RetainagePercentComplete
							except invoked.VendorItem
							except invoked.TemporaryHold
							except invoked.IDMReprintStatus
		
		                invoked.Company                   = PrmCompany
		                invoked.PurchaseOrder             = PrmPurchaseOrder
		                invoked.Closed					  = Closed.No
		                if(PrmVendor entered)
		                	invoked.Vendor				  = PrmVendor
		                invoked.Buyer					  = LocalBuyer
		                invoked.LocalVendorItem			  = VendorItem
		                if (LocalInitializeContract)
		                	initialize invoked.Contract
		                	initialize invoked.ContractLine
		                	initialize invoked.Preferred
		                	initialize invoked.Tier
		                	initialize invoked.VendorItem
		              	
		              	if (PrmCopyUnitCost)
			                invoked.VendorBuyUnitCost					= PrmVendorBuyUnitCost
			                
		              		if (PurchaseOrder.Currency = PrmPurchaseOrder.Currency)
								invoked.VendorBuyUnitCost				= VendorBuyUnitCost
							else
								initialize CurrencyExchange
								SavedFromCurrency						= PurchaseOrder.Currency
								CurrencyExchange.ToCurrency				= PrmPurchaseOrder.Currency
								SavedExchangeDate						= PrmPurchaseOrder.PurchaseOrderDate
								SavedTransactionAmount					= VendorBuyUnitCost
								LocalConversionRate						= CurrencyExchange.OutputCurrencyRate
				
								LocalFromCurrency	      				= PurchaseOrder.Currency
								LocalToCurrency	      					= PrmPurchaseOrder.Currency
								if (CurrencyRelationshipRel.MultDiv.Divide)
									invoked.VendorBuyUnitCost 				= (VendorBuyUnitCost / LocalConversionRate)
								else
									invoked.VendorBuyUnitCost 				= (VendorBuyUnitCost * LocalConversionRate)	

						else
							initialize invoked.VendorBuyUnitCost
							invoked.LocalDefaultCostFromCopy 			= true
								
		                if(PrmPurchaseFromLocation entered)
		                	invoked.PurchaseFromLocation	  = PrmPurchaseFromLocation
		                if (InventoriedOrNonstock)	
		                	initialize invoked.Description			
		            	if (PrmCopyIgnoreCancelQuantity)
		            		initialize invoked.CancelQuantity
		            	else
		            		invoked.Quantity = Quantity - CancelQuantity
		            	if	(PrmCopyTaxData)
		            		invoked.Taxable			= Taxable
		            		invoked.TaxCode			= TaxCode
		            		invoked.TaxableUnitCost	= TaxableUnitCost
		            	else
		            		if(PrmNewDefaultTaxCode entered)
		            			invoked.Taxable 		= true
		            			invoked.TaxCode 		= PrmNewDefaultTaxCode
		            			
		            	if (IsHSNSACCodeEnabled)		
			            	if (PrmVendor entered
			            	or  PrmPurchaseFromLocation entered
			            	or  PrmShipToLocation entered)
				            	if (PrmNewDefaultTaxCode not entered
				            	and PrmCopyTaxData)
									initialize invoked.TaxCode
		              	
		              	invoked.Released = 	PrmIsReleased
		              	initialize invoked.PurchaseOrderLineLifeCycleState
						initialize invoked.TemporaryHold
		              	
		              	if (IsRetainageContract)
		              		initialize Retainage
		              		initialize RetainageFirstPercent
							initialize RetainageSecondPercent
							initialize RetainageUpToPercentComplete
							initialize RetainageOverridePercentComplete
					
					if (CopyErrorMessage entered)
						invoke Create PurchaseOrderLineError
			                invoked.Company					= PrmCompany
			                invoked.PurchaseOrder			= PrmPurchaseOrder
							invoked.ErrorType 				= PurchaseOrderLineError.ErrorType.Copy
							if (CopyErrorMessage[1:7] = "Warning")
								invoked.ErrorMessageNumber 	= 999
							else
								invoked.ErrorMessage 		= LineMessage + PurchaseOrderLine.LineNumber + ": " + CopyErrorMessage



		BatchCancelPurchaseOrderLine is a Set Action
			restricted
			Parameters
				PrmCompany							is a PurchasingCompany
				PrmPurchaseOrder                    is like PurchaseOrder
				PrmCancelFromPurchaseOrder			is Boolean
				PrmFromVendorReturn					is Boolean
			
			Sort Order
				Company
				PurchaseOrder
				PurchaseOrderLine
				
			Instance Selection
				where (Company 			= PrmCompany
				and    PurchaseOrder 	= PrmPurchaseOrder
				and    IsLineToProcess)	
			
			Action Rules
				Empty Set Rules
					invoke TransitionToCanceled PurchaseOrder
								
				PurchaseOrder Set Rules
					Exit Rules
						invoke TransitionToCanceled PurchaseOrder
						
						if (PurchaseOrder.ContractLinesExist)
							for each PurchaseOrder.LinesForAContractLineRel
								LocalContract          = each.Contract
								LocalPurchaseOrderLine = each.PurchaseOrderLine
								if (LaterPOLineForAContractRel !exists
								and LocalContractRel.UseCommitments)
									invoke FinishUpdateContractAmounts LocalContractRel						
				
				Instance Rules
					invoke CancelLine
						invoked.CancelFromPurchaseOrder = PrmCancelFromPurchaseOrder
						invoked.PrmCancelQuantity 		= Quantity
						invoked.PrmFromVendorReturn		= PrmFromVendorReturn	

    	CreateItemAddOnCostViaSpread	is a Set Action
    		restricted
    		Parameters
    			PrmPurchasingCompany			is a PurchasingCompany
    			PrmPurchaseOrder				is a PurchaseOrder
    			PrmAddOnCost					is an AddOnCharge
    		Instance Selection
    			where (Company			= PrmPurchasingCompany
    			and    PurchaseOrder	= PrmPurchaseOrder)
			Action Rules
	    		Instance Rules
	    			invoke Create PurchaseOrderAndLineAddOnCharge
	    				invoked.Company				= PrmPurchasingCompany
	    				invoked.PurchaseOrder		= PrmPurchaseOrder
	    				invoked.PurchaseOrderLine	= PurchaseOrderLine
	    				invoked.AddOnCharge			= PrmAddOnCost
    				
    	DeleteItemAddOnCostViaSpread	is a Set Action
    		restricted
    		Parameters
    			PrmPurchasingCompany			is a PurchasingCompany
    			PrmPurchaseOrder				is a PurchaseOrder
    			PrmAddOnCost					is an AddOnCharge
    		Instance Selection
    			where (Company			= PrmPurchasingCompany
    			and    PurchaseOrder	= PrmPurchaseOrder)
    		Action Rules
	    		Instance Rules
	    			LocalAddOnCost			= PrmAddOnCost
	    			invoke Delete PurchaseOrderAndLineAddOnChargeRel
    				
    	ExportToPolineFact is a Set Action
			default label is "LoadPurchaseOrderDetailsForTierReporting"
			restricted
			Parameters
				ProcurementGroup
				BeginPoDate 		is Date
				EndPoDate   		is Date
				
			Parameter Rules
				ProcurementGroup
					required
					if (BeginPoDate not entered
					and EndPoDate   not entered)
						if (ProcurementGroup.ProcurementGroupSetActionLoadPolineRel	exists)
							BeginPoDate 	= ProcurementGroup.ProcurementGroupSetActionLoadPolineRel.LastRunEndDate
						EndPoDate			= current corporate date
				EndPoDate
					if (BeginPoDate	entered)
						required
					constraint (EndPoDate	>= BeginPoDate)
						"EndPoDateCannotPrecedeBeginPoDate"
						
			Local Fields
				CurrentProcurementGroupSetActionLoadPoline	is a ProcurementGroupSetAction
				PurchaseOrderLineSourceFound				is Boolean
				LocalUNSPSCCode                             is a UNSPSCCode
				
			Instance Selection
				where (ProcurementGroup		 = ProcurementGroup
				and    PurchaseOrder.PurchaseOrderDate >= BeginPoDate
				and    PurchaseOrder.PurchaseOrderDate <= EndPoDate
				and    Released)
			
			Action Rules
			
				Set Rules
				
					Entrance Rules
						CurrentProcurementGroupSetActionLoadPoline	= 1

					Exit Rules
						invoke Update CurrentProcurementGroupSetActionLoadPoline
							invoked.LoadType				= 1
							if (EndPoDate	not entered)
								invoked.LastRunEndDate		= current corporate date
							else
							if (EndPoDate	> current corporate date)
								invoked.LastRunEndDate		= current corporate date
							else
								invoked.LastRunEndDate		= EndPoDate 

				Instance Rules
					LocalLineNbr							= PurchaseOrderLine









					LocalLineSeq				= 1
					include UpdatePolineFactFromPoline

		RecallPurchaseOrderLineQuery is a Set Action     
			restricted
			Parameters
				PrmRecallGroup			is a RecallGroup
				PrmRecallNotice			is a RecallNotice
				PrmRecallProduct		is a RecallProduct
				PrmRecallProductItem 	is a RecallProductItem
				PrmItem					is an Item
				PrmVendorItem       	is like VendorItem
            	PrmManufacturerNumber	is like ManufacturerNumber
				PrmGTIN             	is like ItemGTIN
				PrmManufacturerCode		is like ManufacturerCode
				PrmManufacturerDivision is like ManufacturerDivision
				PrmQueryDateRange		is a DateRange
				PrmQueryPriority		is Numeric size 2
					States
		   				High			value is 1
		   				Medium			value is 2
		   				Low				value is 3
				PrmQueryDueDate			is TimeStamp
				PrmCreateTasks      	is Boolean
			
			Sort Order
				Item
    			VendorItem
    			ManufacturerNumber
    			ItemGTIN
				Company
    			PurchaseOrder
    			PurchaseOrderLine	

			Set Is 
				Item
				VendorItem
				Manufacturer
				ManufacturerNumber
				ItemGTIN
				Company
				PurchaseOrder
				PurchaseOrderLine
				PrmRecallGroup 
				PrmRecallNotice 
				PrmRecallProduct
				PrmRecallProductItem 	

			Instance Selection
				where (ProcurementGroup		  = PrmRecallGroup
				and   (PrmRecallNotice.Vendor not entered
				or     PrmRecallNotice.Vendor = Vendor)
    			and	 ((NonStockOrSpecial
				and	  !QuantityFullyCancelled)
				or    (ItemType.Inventoried
				and	  !Closed.Yes
				and	   QuantityToProcess > ReceivedQuantity))
				and	   PrmQueryDateRange entered
				and    PurchaseOrder.PurchaseOrderDate within PrmQueryDateRange)

			Action Rules
				Instance Rules
                  	if ((Item                               = PrmItem
					and ((PrmItem							= PrmManufacturerNumber
					and  ItemType.Special)
					or  (PrmItem                           != PrmManufacturerNumber
					and !ItemType.Special)))
                    or  (ItemType.Special
                    and ((ManufacturerNumber entered
                    and  ManufacturerNumber                 = PrmManufacturerNumber
                    and (PrmManufacturerCode !entered
                    or  (PrmManufacturerDivision entered
                    and  Manufacturer.ManufacturerCode      = PrmManufacturerCode
                    and  Manufacturer.ManufacturerDivision  = PrmManufacturerDivision)
					or  (PrmManufacturerCode entered
					and  Manufacturer.ManufacturerCode      = PrmManufacturerCode)))
                    or  (PrmGTIN entered
                    and  ItemGTIN entered
                    and  ItemGTIN                           = PrmGTIN)
                    or  (PrmVendorItem entered
                    and  VendorItem entered
                    and  VendorItem                         = PrmVendorItem))))           			
					
						if (not FromRequisitions)
							invoke Create RecallProductTransaction
								invoked.RecallGroup										= PrmRecallGroup
								invoked.RecallNotice									= PrmRecallNotice
								invoked.RecallProduct									= PrmRecallProduct
								invoked.ActivityType									= 4 
								invoked.InventoryLocationGroup.InventoryCompany			= Company
								invoked.InventoryLocationGroup.InventoryLocation		= ShipToLocation
								invoked.PurchaseOrderLineGroup.PurchasingCompany		= Company
								invoked.PurchaseOrderLineGroup.PurchaseOrder 			= PurchaseOrder
								invoked.PurchaseOrderLineGroup.PurchaseOrderLine		= PurchaseOrderLine
								invoked.LocalPriority									= PrmQueryPriority
								invoked.LocalDueDate									= PrmQueryDueDate
								invoked.TransactionDate									= EarlyDeliveryDate
								invoked.LocalCreateTasks                                = PrmCreateTasks
						else
							for each LineSourcesFromRQRel
								invoke Create RecallProductTransaction
									invoked.RecallGroup										= PrmRecallGroup
									invoked.RecallNotice									= PrmRecallNotice
									invoked.RecallProduct									= PrmRecallProduct
									invoked.ActivityType									= 14 
									invoked.InventoryLocationGroup.InventoryCompany			= Company
									invoked.InventoryLocationGroup.InventoryLocation		= ShipToLocation
									invoked.PurchaseOrderLineGroup.PurchasingCompany		= Company
									invoked.PurchaseOrderLineGroup.PurchaseOrder			= PurchaseOrder
									invoked.PurchaseOrderLineGroup.PurchaseOrderLine		= PurchaseOrderLine
									invoked.PurchaseOrderLineSourceGroup.PurchasingCompany  = each.Company
									invoked.PurchaseOrderLineSourceGroup.PoNumber			= each.PurchaseOrder
									invoked.PurchaseOrderLineSourceGroup.LineNbr			= each.PurchaseOrderLine
									invoked.PurchaseOrderLineSourceGroup.OriginCd			= each.PurchaseOrderLineSource.SourceDocumentOrigin
									invoked.PurchaseOrderLineSourceGroup.OperCompany		= each.PurchaseOrderLineSource.OperatingCompany
									invoked.PurchaseOrderLineSourceGroup.SourceDocN			= each.PurchaseOrderLineSource.SourceDocumentNumeric
									invoked.PurchaseOrderLineSourceGroup.SourceDocA			= each.PurchaseOrderLineSource.SourceDocumentAlpha
									invoked.PurchaseOrderLineSourceGroup.SrcLineNbr			= each.PurchaseOrderLineSource.SourceDocumentLineNumber
									invoked.RequestingLocationGroup.RequestingCompany		= each.PurchaseOrderLineSource.OperatingCompany
									invoked.RequestingLocationGroup.RequestingLocation		= each.RequestingLocation
									if (each.RequestingLocation = blank)
										invoked.RequestingLocationGroup.RequestingLocation	= each.RequisitionLineRel.Requisition.RequestingLocation
									invoked.RequisitionLineGroup.InventoryCompany			= each.PurchaseOrderLineSource.OperatingCompany
									invoked.RequisitionLineGroup.Requisition				= each.PurchaseOrderLineSource.SourceDocumentNumeric
									invoked.RequisitionLineGroup.RequisitionLine			= each.PurchaseOrderLineSource.SourceDocumentLineNumber
									invoked.LocalPriority									= PrmQueryPriority
									invoked.LocalDueDate									= PrmQueryDueDate
									invoked.TransactionDate									= each.RequestedDeliveryDate
									invoked.LocalCreateTasks                                = PrmCreateTasks
    	
		RecallPurchaseOrderLineItemQuery is a Set Action   
			restricted
			Parameters
				PrmRecallGroup		is a RecallGroup
				PrmRecallNotice		is a RecallNotice
				PrmRecallProduct	is a RecallProduct
				PrmItem				is an Item
				PrmQueryDateRange	is a DateRange
				PrmQueryPriority	is Numeric size 2
					States
		   				High			value is 1
		   				Medium			value is 2
		   				Low				value is 3
				PrmQueryDueDate		is TimeStamp
				PrmCreateTasks      is Boolean
			
			Sort Order
                Company
                Item
                ShipToLocation
                EarlyDeliveryDate descending
                PurchaseOrder descending
                PurchaseOrderLine descending
				
			Instance Selection
			
				where (Item = PrmItem
				and    ProcurementGroup		  = PrmRecallGroup
				and   (PrmRecallNotice.Vendor not entered
				or     PrmRecallNotice.Vendor = Vendor)
    			and	 ((ItemType.NonStock
				and	  !QuantityFullyCancelled)
				or    (ItemType.Inventoried
				and	   !Closed.Yes
				and	   QuantityToProcess > ReceivedQuantity))
				and	   PrmQueryDateRange entered
				and    PurchaseOrder.PurchaseOrderDate within PrmQueryDateRange)
				
			Action Rules
				Instance Rules
				
					include CreateRecallProductTransaction

		RecallPurchaseOrderLineVendorItemQuery is a Set Action     
			restricted
			Parameters
				PrmRecallGroup		is a RecallGroup
				PrmRecallNotice		is a RecallNotice
				PrmRecallProduct	is a RecallProduct
				PrmVendorItem       is like VendorItem
				PrmQueryDateRange	is a DateRange
				PrmQueryPriority	is Numeric size 2
					States
		   				High			value is 1
		   				Medium			value is 2
		   				Low				value is 3
				PrmQueryDueDate		is TimeStamp
				PrmCreateTasks      is Boolean
			
			Sort Order
    			VendorItem
    			Company
    			PurchaseOrder
    			PurchaseOrderLine
				
			Instance Selection
				where (VendorItem 				= PrmVendorItem
				and    ProcurementGroup		   	= PrmRecallGroup
				and   (PrmRecallNotice.Vendor not entered
				or     PrmRecallNotice.Vendor 	= Vendor)
    			and	  (NonStockOrSpecialOrService
				and	  !QuantityFullyCancelled)
				and	   PrmQueryDateRange entered
				and    PurchaseOrder.PurchaseOrderDate within PrmQueryDateRange)
				
			Action Rules
				Instance Rules
					include CreateRecallProductTransaction

		RecallPurchaseOrderLineOtherToItemQuery is a Set Action    
			restricted
			Parameters
				PrmRecallGroup		is a RecallGroup
				PrmRecallNotice		is a RecallNotice
				PrmRecallProduct	is a RecallProduct
            	PrmManufacturerNumber	is like ManufacturerNumber
				PrmQueryDateRange	is a DateRange
				PrmQueryPriority	is Numeric size 2
					States
		   				High			value is 1
		   				Medium			value is 2
		   				Low				value is 3
				PrmQueryDueDate		is TimeStamp
				PrmCreateTasks      is Boolean
			
			Sort Order
                Company
                Item
                ShipToLocation
                EarlyDeliveryDate descending
                PurchaseOrder descending
                PurchaseOrderLine descending
				
			Instance Selection
				where (Item = PrmManufacturerNumber  
				and    ItemType.Special
				and    ProcurementGroup		  = PrmRecallGroup
				and   (PrmRecallNotice.Vendor not entered
				or     PrmRecallNotice.Vendor = Vendor)
				and	  !QuantityFullyCancelled
				and	   PrmQueryDateRange entered
				and    PurchaseOrder.PurchaseOrderDate within PrmQueryDateRange)
				
			Action Rules
				Instance Rules
					include CreateRecallProductTransaction

		RecallPurchaseOrderLineManufacturerNumberQuery is a Set Action     
			restricted
			Parameters
				PrmRecallGroup		is a RecallGroup
				PrmRecallNotice		is a RecallNotice
				PrmRecallProduct	is a RecallProduct
            	PrmManufacturerNumber	is like ManufacturerNumber
				PrmManufacturerCode	is like ManufacturerCode
				PrmManufacturerDivision is like ManufacturerDivision
				PrmQueryDateRange	is a DateRange
				PrmQueryPriority	is Numeric size 2
					States
		   				High			value is 1
		   				Medium			value is 2
		   				Low				value is 3
				PrmQueryDueDate		is TimeStamp
				PrmCreateTasks      is Boolean
			
			Sort Order
    			ManufacturerNumber
    			Company
    			PurchaseOrder
    			PurchaseOrderLine
				
			Instance Selection
	            where (ManufacturerNumber entered
				and    ManufacturerNumber 					= PrmManufacturerNumber
				and   (PrmManufacturerCode !entered
				or    (Manufacturer.ManufacturerCode 		= PrmManufacturerCode
				and    Manufacturer.ManufacturerDivision	= PrmManufacturerDivision))
				and    ProcurementGroup		  				= PrmRecallGroup
				and   (PrmRecallNotice.Vendor not entered
				or     PrmRecallNotice.Vendor 				= Vendor)
    			and	 ((NonStockOrSpecialOrService
				and	  !QuantityFullyCancelled)
				or    (ItemType.Inventoried
				and	  !Closed.Yes
				and	   QuantityToProcess > ReceivedQuantity))
				and	   PrmQueryDateRange entered
				and    PurchaseOrder.PurchaseOrderDate within PrmQueryDateRange)
				
			Action Rules
				Instance Rules
					include CreateRecallProductTransaction

		CreateInvoiceDetailsFromPoLinesSet is a Set Action
			restricted
			Parameters
				PrmCompany				is a PayablesCompany
				PrmPayablesInvoice		is a PayablesInvoice
				PrmPurchaseOrder		is a PurchaseOrder
				ServiceOnly				is Boolean
			Parameter Rules
				PrmPayablesInvoice
					required
			Set Is  
				PrmCompany
				PrmPayablesInvoice

			Instance Selection
				where (Company			= PrmCompany
				and    PurchaseOrder 	= PrmPurchaseOrder)

			Action Rules
				Empty Set Rules  

					for each PrmPayablesInvoice.MatchPurchaseOrderInvoicesRel
						if (each.CreateAOCValid)
							invoke CreateAOCFromPurchaseOrder each

		        	invoke InvoiceUpdate PrmPayablesInvoice
		        		invoked.ResetBackgroundProcessing = true

				Set Rules
					Exit Rules
						for each PrmPayablesInvoice.MatchPurchaseOrderInvoicesRel
							if (each.CreateAOCValid)
								invoke CreateAOCFromPurchaseOrder each

			        	invoke InvoiceUpdate PrmPayablesInvoice
			        		invoked.ResetBackgroundProcessing = true
					
				Instance Rules

					if    ((!ServiceOnly or ItemType.Service)
					and     !Closed.Yes
	 				and     AllowMatchCreateDetail
                    and    (!PrmPayablesInvoice.DerivedPoolOption.CompanyVendorPoShipTo
                    or       ShipToLocation = PrmPayablesInvoice.Location))
						invoke CreateInvoiceDetailsFromPoLines
							invoked.Company			= PrmCompany
							invoked.PayablesInvoice = PrmPayablesInvoice

			
		CreateInvoiceDetailsFromPoLines is an Instance Action
			valid when (CreateInvoiceDetailsFromPoLinesValid)
			default label is "CreateDetailFromPOLine"
			Parameters
				Company
				PayablesInvoice
			Parameter Rules
				Company
					default to MatchPurchaseOrderInvoice.PayablesInvoice.Company
				PayablesInvoice
					default to MatchPurchaseOrderInvoice.PayablesInvoice

			Action Rules
				LocalPayablesInvoice = PayablesInvoice 
				constraint (!LocalPayablesInvoiceDetailRel exist)
					"CreateFailedInvoiceDetailExists" 
				
				invoke CreateFromPurchaseOrderLine PayablesInvoiceDetail
					invoked.Company							= Company 
					invoked.Vendor							= Vendor
					invoked.PayablesInvoice					= PayablesInvoice
					invoked.PurchaseOrder					= PurchaseOrder
					invoked.PurchaseOrderLine				= PurchaseOrderLine
					invoked.Item							= Item
					invoked.ItemType						= ItemType
					invoked.VendorItem						= VendorItem
					invoked.Location						= ShipToLocation
					if (InventoriedOrNonstock and Item.IsCatchWeightItem)
						invoked.EnteredUnitCost				= DerivedEntUnitCst
						if (CatchWeightQuantity entered)
							invoked.EnteredQuantity			= CatchWeightQuantity
					    	invoked.BuyUOMMatchedQuantity	= (ReceivedQuantity + WriteOffQuantity + ChargebackQuantity - MatchedQuantity - ArchivedQuantity)
						else
							invoked.EnteredQuantity			= VendorPriceUOMQuantity
					    	invoked.BuyUOMMatchedQuantity	= Quantity
					else
					if (VendorPriceUOM != EnteredBuyUOM)
						invoked.EnteredUnitCost				= EnteredUnitCost
				        invoked.EnteredQuantity				= DerivedOpenToPayablesInvoiceQuantity
					else					
						invoked.EnteredUnitCost				= DerivedEntUnitCst
				        invoked.EnteredQuantity				= DerivedOpenToPayablesInvoiceQuantity
					invoked.EnteredUOM						= VendorPriceUOM
					invoked.EnteredUOMMultiplier			= VendorPriceUOMMultiplier
					invoked.VendorPriceUOM					= VendorPriceUOM
					invoked.VendorPriceUOMMultiplier		= VendorPriceUOMMultiplier
					invoked.VendorBuyUOM					= EnteredBuyUOM
					invoked.VendorBuyUOMMultiplier			= EnteredBuyUOMMultiplier
			        invoked.RecordSource							= "LM"
			        invoked.DistributionDate						= PayablesInvoice.DistributionDate
					invoked.StockWeight								= StockWeight 
					invoked.ICNCode									= ICNCode 
					invoked.SupplementaryQuantity					= SupplementaryQuantity 
					invoked.CommodityCode							= CommodityCode
					invoked.ProductTaxCategory						= ProductTaxCategory
					invoked.SupplementaryUOM						= ICNCode.SupplementaryUOM 
					invoked.Contract								= Contract
					invoked.ContractLine							= ContractLine
					if  (!PayablesInvoice.TaxAdjustment.IgnoreProductOnly
					and  !PayablesInvoice.TaxAdjustment.Calculate
					and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
						invoked.TaxCode									= TaxCode
						if (Vendor.TaxUsageCode entered)
							invoked.TaxUsageCode						= Vendor.TaxUsageCode
						else
							invoked.TaxUsageCode						= Vendor.VendorClass.TaxUsageCode
					if (initiating action = "MatchPurchaseOrderInvoice.CreateDetailFromPurchaseOrder"
					or  initiating action = "PayablesInvoice.CreateInvoiceUnreleased"
					or  initiating action = "PayablesInvoice.CreateBySupplierUnreleased"
					or  initiating action = "CreateInvoiceDetailsFromPoLinesSet")
						invoked.BypassInvoiceErrorChecking		= true

		CreditMemoCostAdjustment is an Instance Action
			valid when (CreateCreditMemoCostAdjustmentValid)
			default label is "CostAdjustment"
			Parameters
				Company
				PayablesInvoice
			Parameter Rules
				Company
					default to MatchPurchaseOrderInvoice.PayablesInvoice.Company
				PayablesInvoice
					default to MatchPurchaseOrderInvoice.PayablesInvoice

			Action Rules
				invoke ServiceItemAdjustment PayablesInvoiceDetail
					invoked.Company							= Company 
					invoked.Vendor							= Vendor
					invoked.PayablesInvoice					= PayablesInvoice
					invoked.PurchaseOrder					= PurchaseOrder
					invoked.PurchaseOrderLine				= PurchaseOrderLine
					invoked.MemoAdjustType					= 1
					invoked.CostOrQuantityAdjustment		= true
					invoked.Item							= Item
					invoked.ItemType						= ItemType
					invoked.VendorItem						= VendorItem
					invoked.Location						= ShipToLocation
				    if (ServiceCode.Amount)
						invoked.EnteredUnitCost				= MatchedAmount * -1
				        invoked.EnteredQuantity				= 1
				    else
				        invoked.EnteredQuantity				= MatchedQuantity
					invoked.EnteredUOM						= VendorPriceUOM
					invoked.EnteredUOMMultiplier			= VendorPriceUOMMultiplier
					invoked.VendorPriceUOM					= VendorPriceUOM
					invoked.VendorPriceUOMMultiplier		= VendorPriceUOMMultiplier
					invoked.VendorBuyUOM					= EnteredBuyUOM
					invoked.VendorBuyUOMMultiplier			= EnteredBuyUOMMultiplier
			        invoked.RecordSource					= "LM"
			        invoked.DistributionDate				= PayablesInvoice.DistributionDate
					invoked.StockWeight						= StockWeight 
					invoked.ICNCode							= ICNCode 
					invoked.CommodityCode					= CommodityCode
					invoked.ProductTaxCategory				= ProductTaxCategory
					invoked.SupplementaryUOM				= ICNCode.SupplementaryUOM 
					invoked.Contract						= Contract
					invoked.ContractLine					= ContractLine
					if  (!PayablesInvoice.TaxAdjustment.IgnoreProductOnly
					and  !PayablesInvoice.TaxAdjustment.Calculate
					and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
						invoked.TaxCode									= TaxCode
						if (Vendor.TaxUsageCode entered)
							invoked.TaxUsageCode						= Vendor.TaxUsageCode
						else
							invoked.TaxUsageCode						= Vendor.VendorClass.TaxUsageCode

		CreditMemoQuantityAdjustment is an Instance Action
			valid when (CreateCreditMemoQuantityAdjustmentValid)
			default label is "QuantityAdjustment"
			Parameters
				Company
				PayablesInvoice
			Parameter Rules
				Company
					default to MatchPurchaseOrderInvoice.PayablesInvoice.Company
				PayablesInvoice
					default to MatchPurchaseOrderInvoice.PayablesInvoice

			Action Rules
				LocalPayablesInvoice = PayablesInvoice 
				constraint (!LocalPayablesInvoiceDetailRel exist)
					"CreateFailedInvoiceDetailExists" 
				
				invoke ServiceItemAdjustment PayablesInvoiceDetail
					invoked.Company							= Company 
					invoked.Vendor							= Vendor
					invoked.PayablesInvoice					= PayablesInvoice
					invoked.PurchaseOrder					= PurchaseOrder
					invoked.PurchaseOrderLine				= PurchaseOrderLine
					invoked.MemoAdjustType					= 2
					invoked.CostOrQuantityAdjustment		= true
					invoked.Item							= Item
					invoked.ItemType						= ItemType
					invoked.VendorItem						= VendorItem
					invoked.Location						= ShipToLocation
					invoked.EnteredUnitCost					= EnteredUnitCost
			        invoked.EnteredQuantity					= MatchedQuantity
					invoked.EnteredUOM						= VendorPriceUOM
					invoked.EnteredUOMMultiplier			= VendorPriceUOMMultiplier
					invoked.VendorPriceUOM					= VendorPriceUOM
					invoked.VendorPriceUOMMultiplier		= VendorPriceUOMMultiplier
					invoked.VendorBuyUOM					= EnteredBuyUOM
					invoked.VendorBuyUOMMultiplier			= EnteredBuyUOMMultiplier
			        invoked.RecordSource					= "LM"
			        invoked.DistributionDate				= PayablesInvoice.DistributionDate
					invoked.StockWeight						= StockWeight 
					invoked.ICNCode							= ICNCode 
					invoked.CommodityCode					= CommodityCode
					invoked.ProductTaxCategory				= ProductTaxCategory
					invoked.SupplementaryUOM				= ICNCode.SupplementaryUOM 
					invoked.Contract						= Contract
					invoked.ContractLine					= ContractLine
					if  (!PayablesInvoice.TaxAdjustment.IgnoreProductOnly
					and  !PayablesInvoice.TaxAdjustment.Calculate
					and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
						invoked.TaxCode									= TaxCode
						if (Vendor.TaxUsageCode entered)
							invoked.TaxUsageCode						= Vendor.TaxUsageCode
						else
							invoked.TaxUsageCode						= Vendor.VendorClass.TaxUsageCode

		CreateDetailsFromAllRemainingLines is an Instance Action
			valid when (CreateDetailsFromAllRemainingLinesEnabled)
			default label is "CreateDetailsForAllPOLines"
			Action Rules
				for each PolineWithQtyRemainingRel
					invoke CreateInvoiceDetailsFromPoLines each

		CreateMatchWorkDetailsForServiceItems is a Set Action
			restricted
			Parameters
				PrmCompany				 is a PayablesCompany
				PrmPurchaseOrder	 	 is a PurchaseOrder
				PrmMultiplePOs			 is Boolean
				PrmVendor				 is a Vendor
				PrmInvoice				 is a PayablesInvoice
				PrmMatchWork			 is a MatchWork
				FromRecon				 is Boolean
				PrmAutoMatchResult		 is an AutoMatchResult
				PoolOption
				PrmInvoiceMatchLevel	 is a MatchLevel
			Local Fields
				WorkOpenToMatchQuantity					is like Quantity
				WorkUnmatchedQuantity					is like Quantity
				WorkMatchAmount							is an InternationalCost
				WorkUnitCost							is like UnitCost

			Instance Selection
				where (Company					= PrmCompany
				and    Vendor					= PrmVendor
				and   (ItemType.Service
				or     IsDropship)
				and   (PrmMultiplePOs
				or     PurchaseOrder 			= PrmPurchaseOrder))
						
			Set Is
				PrmCompany
				PrmPurchaseOrder
				PrmInvoice
				PrmMatchWork

			Action Rules
				Empty Set Rules
					invoke CreateMatchWorkDetailsForServiceItems PurchaseOrderAndLineAddOnCharge
						invoked.PrmCompany 			= PrmCompany
						invoked.PrmPurchaseOrder 	= PrmPurchaseOrder
						invoked.PrmMultiplePOs 		= PrmMultiplePOs 
						invoked.PrmVendor			= PrmVendor
						invoked.PrmInvoice 			= PrmInvoice
						invoked.PrmMatchWork 		= PrmMatchWork
						invoked.PrmAutoMatchResult 	= PrmAutoMatchResult
						invoked.FromRecon			= FromRecon
						invoked.PoolOption			= PoolOption
				Set Rules
					Exit Rules
						invoke CreateMatchWorkDetailsForServiceItems PurchaseOrderAndLineAddOnCharge
							invoked.PrmCompany 			= PrmCompany
							invoked.PrmPurchaseOrder 	= PrmPurchaseOrder
							invoked.PrmMultiplePOs 		= PrmMultiplePOs 
							invoked.PrmVendor			= PrmVendor
							invoked.PrmInvoice 			= PrmInvoice
							invoked.PrmMatchWork 		= PrmMatchWork
							invoked.PrmAutoMatchResult  = PrmAutoMatchResult
							invoked.FromRecon			= FromRecon
							invoked.PoolOption			= PoolOption

				Instance Rules


					LocalPayablesInvoice							= PrmInvoice

					if  (LocalMatchPurchaseOrderInvoiceRel exists
					and (!PoolOption.CompanyVendorPoShipTo
					or    ShipToLocation	= PrmInvoice.Location)
					and  (!CostOption.NoCharge
					or     AllowZeroCostInvoice))		

						initialize WorkUnitCost
				      	if  (!PrmInvoiceMatchLevel.InvoiceMatch)
							WorkUnitCost						= first POLineInvoiceMessageRel.AdjustedUnitCost
			
						if (WorkUnitCost not entered)
							WorkUnitCost						= VendorBuyUnitCost

						
						if  (ItemType.Service)
							if  (ServiceCode.Quantity)
								WorkOpenToMatchQuantity			= QuantityToProcess - (MatchedQuantity - ChargebackQuantity)
								WorkUnmatchedQuantity			= QuantityToProcess - (MatchedQuantity - ChargebackQuantity)
								WorkMatchAmount					= ((QuantityToProcess - (MatchedQuantity - ChargebackQuantity)) * VendorBuyUnitCost)
							else
								WorkOpenToMatchQuantity			= 1
								WorkUnmatchedQuantity			= 1
								WorkMatchAmount					= (VendorBuyUnitCost - (MatchedAmount + ServiceCancelAmount))
								WorkUnitCost					= WorkMatchAmount
						else
							WorkOpenToMatchQuantity				= QuantityToProcess - MatchedQuantity
							WorkUnmatchedQuantity				= Quantity + WriteOffQuantity + ChargebackQuantity - MatchedQuantity - ArchivedQuantity
							WorkMatchAmount						= ((Quantity + WriteOffQuantity + ChargebackQuantity - MatchedQuantity - ArchivedQuantity) * VendorBuyUnitCost)
			

							
						invoke Create MatchWorkReceiptLine
							invoked.MatchWork 					= PrmMatchWork
							invoked.Company 					= Company
							invoked.Vendor 						= Vendor
							invoked.PurchaseOrder 				= PurchaseOrder
							invoked.PurchaseOrderLine 			= PurchaseOrderLine
							invoked.Item 						= Item
							invoked.ItemType 					= ItemType
							invoked.MatchDetailKey 				= MatchDetailKey
							invoked.ArchivedQuantity			= ArchivedQuantity
							invoked.ExtendedAmount				= ExtendedAmount
							invoked.Item						= Item
							invoked.MatchedQuantity				= MatchedQuantity
							invoked.ShipToLocation				= ShipToLocation
							invoked.VendorPriceUOMQuantity		= VendorPriceUOMQuantity
							invoked.VendorPriceUOM				= VendorPriceUOM
			
							initialize invoked.PurchaseOrderReceipt
							initialize invoked.PurchaseOrderReceiptLine
							invoked.MatchWork 					= PrmMatchWork
							invoked.MatchUnitCost				= WorkUnitCost
							invoked.EnteredReceivedQuantity		= Quantity
							invoked.BuyUOMQuantity				= Quantity
							invoked.VendorPriceMatchedQuantity	= MatchedQuantity - ChargebackQuantity
							invoked.OpenToMatchQuantity			= WorkOpenToMatchQuantity 
							invoked.UnmatchedQuantity			= WorkUnmatchedQuantity
							invoked.MatchAmount					= WorkMatchAmount
							
							if (PurchaseOrder.Closed.Yes)
								invoked.Status					= 9
							else
								invoked.Status					= 1
									
		UpdatePOLineFromMatch is an Instance Action    
			restricted					
			Parameters
				PrmLastMatchUnitCost	is an InternationalAmount
			Action Rules
				LastMatchUnitCost		= PrmLastMatchUnitCost
				for each ReleasedPurchaseOrderReceiptLinesRel
					invoke UpdatePOReceiptLineFromMatch each
						if (PrmLastMatchUnitCost = blank)
							invoked.PrmMatchUnitCost	= EnteredUnitCost
						else
							invoked.PrmMatchUnitCost 	= PrmLastMatchUnitCost
							











							





























												






























































						
		UpdateContractAmounts is an Instance Action
			restricted
			Parameters
				PrmTaxAmount 			is an InternationalAmount
				PrmAOCAmount 			is an InternationalAmount
				PrmAmount				is an InternationalAmount
				PrmContractQuantity		is a Quantity
				PrmFromCancelOrDelete	is Boolean
				PrmContractCurrency		is a Currency
				PrmContractDate			is Date
				PrmContractUOM			is a UnitOfMeasure
				PrmOldContract          is like Contract
				PrmOldContractLine      is like ContractLine
				PrmFromRelease          is Boolean

			Action Rules
				if (ContractLine entered)
					invoke UpdateAmountsAndQuantities ContractLine
						invoked.InTaxAmount  				= PrmTaxAmount
						invoked.InAddOnChargeAmount 		= PrmAOCAmount
						invoked.InAmount 					= PrmAmount
						invoked.InCurrency 					= PrmContractCurrency
						invoked.InDate						= PrmContractDate
						invoked.InQuantity 					= PrmContractQuantity
						invoked.InUOM      					= PrmContractUOM
						invoked.FromCancelOrDelete			= PrmFromCancelOrDelete
						invoked.FromMatch                   = PrmFromRelease   
						if (InventoriedOrNonstock)
							if (ItemLocationRel exists)
								invoked.InConsignment 		= ItemLocationRel.Consignment
							else 
								invoked.InConsignment 		= Item.Consignment
				else
				if (PrmOldContractLine entered)
					invoke UpdateAmountsAndQuantities OldContractLineRel
						invoked.InTaxAmount  				= PrmTaxAmount
						invoked.InAddOnChargeAmount 		= PrmAOCAmount
						invoked.InAmount 					= PrmAmount
						invoked.InCurrency 					= PrmContractCurrency
						invoked.InDate						= PrmContractDate
						invoked.InQuantity 					= PrmContractQuantity
						invoked.InUOM      					= PrmContractUOM
						invoked.FromCancelOrDelete			= PrmFromCancelOrDelete
						if (InventoriedOrNonstock)
							if (ItemLocationRel exists)
								invoked.InConsignment 		= ItemLocationRel.Consignment
							else 
								invoked.InConsignment 		= Item.Consignment					
				else
				if (Contract entered)
					invoke UpdateContractAmounts Contract
						invoked.InTaxAmount 			= PrmTaxAmount			 
						invoked.InAddOnChargeAmount 	= PrmAOCAmount
						invoked.InAmount 				= PrmAmount
						invoked.InCurrency 				= PrmContractCurrency
						invoked.InTransactionDate		= PrmContractDate
				else
				if (PrmOldContract entered)
					LocalOldContract	= PrmOldContract 
					invoke UpdateContractAmounts OldContractRel
						invoked.InTaxAmount 			= PrmTaxAmount			 
						invoked.InAddOnChargeAmount 	= PrmAOCAmount
						invoked.InAmount 				= PrmAmount
						invoked.InCurrency 				= PrmContractCurrency
						invoked.InTransactionDate		= PrmContractDate					 
					
		AttachItemToRecallProduct is an Instance Action
			valid when (RecallProduct entered)
			default label is "AttachLineInformation"
   			Parameters
   				RecallGroup
   				RecallNotice
   				RecallProduct
    			
    		Parameter Rules
    			RecallGroup
    				required
    			RecallNotice
    				required
    			RecallProduct
    				required
   
    		Action Rules
    			constraint (RecallNotice.RecallNoticeUpdatable)
    				"ItemsCanOnlyBeAddedToNoticesInPendingStatus"
    				
				if (RecallNotice.Vendor entered)
					constraint (Vendor = RecallNotice.Vendor)
						"POLineVendorDoesNotMatchRecallNoticeVendor"
						
 				LocalRecallGroup	= RecallGroup
				LocalRecallNotice	= RecallNotice
				LocalRecallProduct	= RecallProduct

				constraint (LineItemOnProductRel !exists)
 					"LineInformationAlreadyExistsOnProduct"
						
				invoke Create RecallProductItem	
					invoked.RecallGroup                                = LocalRecallGroup
					invoked.RecallNotice                               = LocalRecallNotice
					invoked.RecallProduct                              = LocalRecallProduct
					if (ItemType.Special)
						invoked.Description 						   = Description
					invoked.Item                                       = Item
					invoked.VendorItem     							   = VendorItem
					invoked.ManufacturerInformation.Manufacturer 	   = Manufacturer
					invoked.ManufacturerInformation.ManufacturerNumber = ManufacturerNumber
		
		UpdateFromMatch is an Update Action  
			restricted
			bypass field rules
			Action Rules
				if (Retainage.Yes or Retainage.No)
					PurchaseOrderLineUpdateFromMatchProcessOnly = true
				
				if (LocalUpdateFromMatchMatchedQuantity not entered
					and CatchWeightQuantity > 0)
					LocalUpdateFromMatchMatchedQuantity = PurchaseOrderLineUpdateFromMatchUnmatchedQuantity
					PurchaseOrderLineUpdateFromMatchOriginalMatchedQuantity = MatchedQuantity
				
				if (LocalUpdateFromMatchVendorPriceUOM entered
				and CatchWeightQuantity not entered  
				and EnteredBuyUOM != LocalUpdateFromMatchVendorPriceUOM)	
					initialize UOMCalculation
					UOMCalculation.InputQuantity		= LocalUpdateFromMatchMatchedQuantity
					UOMCalculation.InputUOM				= LocalUpdateFromMatchVendorPriceUOM
					UOMCalculation.InputToUOM			= EnteredBuyUOM
					UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
					LocalUpdateFromMatchMatchedQuantity	= UOMCalculation.OutputQuantity

				if (LocalUpdateFromMatchMatchedQuantity entered
                and LocalUpdateFromMatchMatchedQuantity decimals > DerivedNumberOfDecimalsQuantity)
                	LocalRoundedUpdateFromMatchProcessedQuantity = LocalUpdateFromMatchMatchedQuantity

				if (ItemType.Service)
					if (LocalUpdateFromMatchMatchedQuantity < 0)
						MatchedQuantity += LocalUpdateFromMatchMatchedQuantity
						MatchedAmount += LocalUpdateFromMatchMatchedAmount
						ChargebackAmount += LocalUpdateFromMatchChargebackAmount
						if (ServiceCode.Amount
						and MatchedAmount > 0)
							MatchedQuantity = 1
					else
						if (ServiceCode.Amount)
							MatchedQuantity = 1
							MatchedAmount += (LocalUpdateFromMatchMatchedAmount * MatchedQuantity)
							ChargebackAmount += LocalUpdateFromMatchChargebackAmount
						else
							MatchedQuantity += LocalUpdateFromMatchMatchedQuantity
							MatchedAmount += (LocalUpdateFromMatchMatchedAmount * LocalUpdateFromMatchMatchedQuantity)
					initialize MatchedNotReceivedQuantity
					
					if (initiating action = "PayablesInvoice.PurchaseOrderInvoiceCancel")
						if (MatchedAmount changed)
							QuantityToProcess = Quantity - CancelQuantity



			
				if (!ItemType.Service)
					if (LocalRoundedUpdateFromMatchProcessedQuantity entered)
						MatchedQuantity += LocalRoundedUpdateFromMatchProcessedQuantity
					else
						MatchedQuantity += LocalUpdateFromMatchMatchedQuantity
					MatchedNotReceivedQuantity += PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity
					if (IsCatchWeightItem)
						CatchWeightMatchQuantity += LocalFromMatchCatchWeightMatchQuantity						
						CatchWeightMatchedNotReceivedQuantity += LocalFromMatchCatchWeightMNRQuantity
											
				ChargebackQuantity += LocalUpdateFromMatchChargebackQuantity
				MemoQuantity += LocalUpdateFromMatchMemoQuantity
				WriteOffQuantity += LocalUpdateFromMatchWriteOffQuantity
				if (IsCatchWeightItem)
					CatchWeightChargebackQuantity += LocalFromMatchCatchWeightChargebackQuantity
					CatchWeightMemoQuantity += LocalFromMatchCatchWeightMemoQuantity
					CatchWeightWriteOffQuantity += LocalFromMatchCatchWeightWriteOffQuantity
	
				if (VendorBuyUnitCost != LocalUpdateFromMatchMatchedAmount
					and LocalUpdateFromMatchCostUpdate)
					for each PurchaseOrderReceiptLinesRel
						if (each.MatchedQuantity = 0)
							invoke Update each 
								invoked.MatchUnitCost = LocalUpdateFromMatchMatchedAmount
				
				if (Contract entered)
					if (EnteredBuyUOM != VendorPriceUOM)
						initialize UOMCalculation
						UOMCalculation.InputUOM				= EnteredBuyUOM
			            UOMCalculation.InputQuantity		= Quantity
			            UOMCalculation.InputToUOM			= VendorPriceUOM
			            if (ReceivedQuantity > QuantityToProcess)
			            	UOMCalculation.InputQuantity = ReceivedQuantity
			            else
			            	UOMCalculation.InputQuantity = QuantityToProcess	            
			            UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
			            
			            LocalUpdateFromMatchOutputQuantity = UOMCalculation.OutputQuantity
					else
						if (ReceivedQuantity > QuantityToProcess)
			            	LocalUpdateFromMatchOutputQuantity = ReceivedQuantity
			            else
			            	LocalUpdateFromMatchOutputQuantity = QuantityToProcess
					
					if (LastMatchUnitCost entered)
						ContractAmount = LocalUpdateFromMatchOutputQuantity * LastMatchUnitCost
					else
						ContractAmount = LocalUpdateFromMatchOutputQuantity * VendorBuyUnitCost
					
				if (CatchWeightQuantity > 0
				and LocalCatchWeightChargebackQuantity not entered)
					LocalCatchWeightFromMatch = true
					LocalCatchWeightChargebackQuantity = LocalUpdateFromMatchChargebackQuantity
				
				include ComputeRetainagePercentComplete
				
				invoke ClosePurchaseOrderLine 
				




					
				if (Retainage.RetainageOnContract
				and ContractLine.Retainage)
					invoke UpdateAmountsAndQuantities ContractLine
						if  (ItemType.Service
						and  LocalUpdateFromMatchMatchedQuantity < 0)
							invoked.InInvoiceAmount	= LocalUpdateFromMatchMatchedAmount
						else
							invoked.InInvoiceAmount	= LocalUpdateFromMatchMatchedAmount * LocalUpdateFromMatchMatchedQuantity
					
				if (PurchaseOrder.Currency != Contract.CurrencyCode)
					initialize CurrencyExchange
					SavedFromCurrency				= PurchaseOrder.Currency
					CurrencyExchange.ToCurrency		= Contract.CurrencyCode
	
				if (ItemType.Inventoried
				and (LocalUpdateFromMatchWriteOffQuantity entered
				or LocalUpdateFromMatchChargebackQuantity entered))
					include SetWarehouseDemandFields 
				

				
				if (PurchaseOrder.Dropship)												
					for each PurchaseOrderLineSourcesRel
						LocalUpdateFromMatchInvoiceUnitCost = LocalUpdateFromMatchMatchedAmount
						LocalUpdateFromMatchProcessedQuantity = LocalUpdateFromMatchMatchedQuantity
						if (LocalUpdateFromMatchMatchedQuantity < 0)
							LocalUpdateFromMatchProcessedQuantity = LocalUpdateFromMatchMatchedQuantity * -1
							if (each.Quantity = each.ProcessedQuantity
							or each.ProcessedQuantity not entered)
								initialize LocalUpdateFromMatchInvoiceUnitCost
						 	if (LocalUpdateFromMatchProcessedQuantity < MatchedQuantity)
						 		LocalUpdateFromMatchProcessedQuantity = MatchedQuantity
						 		LocalUpdateFromMatchInvoiceUnitCost = each.BillingUnitCost
						 	else
						 		initialize LocalUpdateFromMatchInvoiceUnitCost
						 	LocalUpdateFromMatchMatchedQuantity = LocalUpdateFromMatchMatchedQuantity - LocalUpdateFromMatchProcessedQuantity
						 
						else
							if (each.LocalQuantityLeftToProcess not entered
							and LocalUpdateFromMatchProcessedQuantity not entered)
						 		initialize LocalUpdateFromMatchInvoiceUnitCost
						 	else
						 		LocalUpdateFromMatchInvoiceUnitCost = LocalUpdateFromMatchMatchedAmount

						invoke UpdateFromReceivingOrMatch each 
							invoked.PrmUOM = EnteredBuyUOM  
			    			invoked.PrmQuantityToProcess = LocalUpdateFromMatchProcessedQuantity
			    			invoked.PrmInvoiceUnitCost = LocalUpdateFromMatchInvoiceUnitCost
			    			invoked.PrmCurrency	= PurchaseOrder.Currency
			    			invoked.PrmBaseCurrency = Company.Currency

						if (LocalUpdateFromMatchMatchedQuantity not entered)
							end for each
						
				if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				and  !PurchaseOrderLineUpdateFromUnMatchProcess
				and  !BypassCommitUpdate)
				 	BypassProjectDateEdit = true 
				 	for each CommittedPurchaseOrderLineDistributionsRel
				 		invoke UpdateGLCommitmentIndirect each
				 			invoked.PrmFromInvoice = true


					
				BypassHeaderTotalsUpdate		= true  

				include CalculateOpenPurchaseAmount 
				if (!TransientBypassOpenPurchaseAmountUpdate)
					include UpdateHeaderAmountsFromLine

				if (PurchaseOrderLineUpdateFromUnMatchProcess
				and LastMatchUnitCost entered)
				    invoke UpdateLastMatchUnitCost
		
		UpdateLastMatchUnitCost is an Instance Action
			restricted
			Action Rules
			    initialize LastMatchUnitCost

			    for each AdjustCostMessagesRel

			        if (each.PayablesInvoiceDetail.MatchObjectID entered
			        and !each.PayablesInvoice.CancelledPOInvoiceRel exists
			        and !each.PayablesInvoiceDetail.CreditForRebillDetailRel exists)

			            LastMatchUnitCost = each.AdjustedUnitCost
		
		Unrelease is an Instance Action
			restricted
			Action Rules
				if ((Contract entered
				and  Contract = LocalOldContract)
				or  (Contract !entered
				and  LocalOldContract entered))
					if (!CostCode.Punchout)
						if (ReceivedQuantity > old QuantityToProcess)
							LocalContractOldQty = ReceivedQuantity
						else
							LocalContractOldQty = old QuantityToProcess
						LocalContractQuantity 	= LocalContractOldQty
						if (EnteredBuyUOM not = VendorPriceUOM)
							initialize UOMCalculation
							UOMCalculation.InputUOM			= EnteredBuyUOM
							UOMCalculation.InputToUOM		= VendorPriceUOM
							UOMCalculation.InputQuantity	= LocalContractOldQty
							UOMCalculation.Method			= UOMCalculation.Method.ConvertToAlternate
							LocalContractOldQty				= UOMCalculation.OutputQuantity
						LocalVendorPriceQuantityToProcess 	= LocalContractOldQty

						include CalculateAOCSPIN
						LocalOldTaxAmt = LocalContractTaxAmt  
						
						invoke UpdateContractAmounts
							invoked.PrmTaxAmount				= (LocalContractTaxAmt * -1)
							invoked.PrmAOCAmount				= (LocalAOCAmt * -1)
							invoked.PrmAmount					= (old ExtendedAmount * -1)
							invoked.PrmContractQuantity			= (LocalContractQuantity * -1)
							invoked.PrmContractCurrency 		= old PurchaseOrder.Currency
							invoked.PrmContractUOM				= old EnteredBuyUOM
							if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate = 1)
								invoked.PrmContractDate 		= old PurchaseOrder.PurchaseOrderDate
							if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate = 2)
								invoked.PrmContractDate			= old EarlyDeliveryDate
							if (Contract !entered)
								invoked.PrmOldContract          = LocalOldContract
								invoked.PrmOldContractLine      = LocalOldContractLine
								
				if (Closed.Yes)
					invoke FastUpdate PurchaseOrder
						initialize invoked.CloseDate
						invoked.Closed	 	= PurchaseOrder.Closed.No 
						invoked.NumberOfClosedLines -= 1  
				
				initialize Released
				initialize CloseDate
				Closed     = Closed.No

				make transition to Unreleased
		
		UpdatePurchaseOrderLineFromAddOnCharge is an Instance Action
			restricted
			Action Rules
				LocalOldContract = Contract
				invoke Unrelease
				include UnreleasePurchaseOrder
			
		ClosePurchaseOrderLine is an Instance Action 
			restricted									
			Parameters
				PrmFromPOLineCancel is Boolean
				PrmFromOpenReceiptArchive is Boolean
			Action Rules
				LocalFromOpenReceiptArchive = PrmFromOpenReceiptArchive
				if (PrmFromOpenReceiptArchive)
					include CheckForBudgetAndCommitmentChanges
			
				include CalculateCloseQuantity

				if ((not ReceiptRequired or IsFullyReceived) 
				and (not MatchedRequired or IsFullyMatched))
					if (Closed.No) 
						Closed = Closed.Yes
						PurchaseOrderLineLifeCycleState = PurchaseOrderLineLifeCycleState.Closed
						CloseDate = current corporate date
						increment PurchaseOrder.NumberOfClosedLines by 1
	
						if (not IsInventoryType
						and !PrmFromPOLineCancel)
							for each LineSourcesFromRQRel
								invoke Processed.Close each.RequisitionLineRel
									invoked.ParmSkipCommitment = true   

						if (IsDropship
						and first VendorBackorderDetailsForPORel exists)
							invoke UpdateFromPurchaseOrder first VendorBackorderDetailsForPORel
								invoked.PrmStatus 			= 1 

				else
				if (Closed.Yes) 
					Closed = Closed.No
					initialize CloseDate
					PurchaseOrderLineLifeCycleState = PurchaseOrderLineLifeCycleState.Released
					decrement PurchaseOrder.NumberOfClosedLines by 1
					if (not PurchaseOrder.PurchaseOrderLifeCycleState.Released)
						invoke TransitionToReleased PurchaseOrder
				if (ArchivedQuantity changed and ArchivedQuantity > 0)
					if (not LocalFromOpenReceiptArchive)
						OpenPurchaseAmount = OpenPurchaseAmount - (VendorBuyUnitCost * ArchivedQuantity)
						
						if (OpenPurchaseAmount < 0)
							initialize OpenPurchaseAmount

					LocalPurchaseOrderOpenPurchaseAmount = PurchaseOrder.OpenPurchaseAmount - (VendorBuyUnitCost * ArchivedQuantity)
					invoke FastUpdate PurchaseOrder
						if (LocalPurchaseOrderOpenPurchaseAmount < 0)
							initialize invoked.OpenPurchaseAmount
						else
							invoked.OpenPurchaseAmount = LocalPurchaseOrderOpenPurchaseAmount
							
				initialize LocalStatus
				initialize LocalTotalReceivedQuantity

				if (VendorBackorderDetailsForPORel exists)
					if (LineFullyCancelled)
						LocalStatus = 2 
					else
					if (IsFullyReceived)
						LocalStatus = 1 
					else
					if (VendorBackorderDetailsForPORel.BackorderQuantity entered
					and	ReceivedQuantity changed)
						LocalTotalReceivedQuantity = ReceivedQuantity - old ReceivedQuantity
						
					if (LocalStatus entered
					or  LocalTotalReceivedQuantity entered)
						invoke UpdateFromPurchaseOrder VendorBackorderDetailsForPORel
							invoked.PrmStatus 			= LocalStatus
							invoked.PrmReceivedQuantity = LocalTotalReceivedQuantity








		
		MassCreatePurchaseOrderReceipts is a Set Action
			restricted
			Parameters
				RunGroup               
				CompleteReceiptProcessing is Boolean
				ReleaseReceipts        is Boolean
				ReleaseOption
				PrmCompany             is a PurchasingCompany
				Vendor1                is a Vendor
				PurchaseFrom1          is a VendorLocation
					context of Vendor1
				Vendor2                is a Vendor
				PurchaseFrom2          is a VendorLocation
					context of Vendor2
				PrmVendorClass         is a VendorClass
				POCode1                is a POCode    
				POCode2                is a POCode
				BillCode1              is a PO100FilCnCode
				BillCode2              is a PO100FilCnCode
				BillCode3              is a PO100FilCnCode
				BillCode4              is a PO100FilCnCode
				PrmShipTo              is an InventoryLocation
				FromDeliveryDate       is Date
				ToDeliveryDate         is Date
				FromPODate			   is Date
					default label is "FromPurchaseOrderDate"
				ToPODate			   is Date
					default label is "ToPurchaseOrderDate"
				
			Parameter Rules
			
				RunGroup
					required
				
				PrmCompany
					required
					
				CompleteReceiptProcessing
					initial value is true
				
				PurchaseFrom1
					if (PurchaseFrom1 entered)
						constraint (Vendor1 entered)
							"MustEnterVendorIfPurchaseFromIsEntered"

				PurchaseFrom2
					if (PurchaseFrom2 entered)
						constraint (Vendor2 entered)
							"MustEnterVendorIfPurchaseFromIsEntered"
				
				FromDeliveryDate
					if (ToDeliveryDate entered)
						constraint (FromDeliveryDate < ToDeliveryDate)
							"FromDeliveryDateMustBePriorToToDeliveryDate"
							
				ToDeliveryDate
					if (FromDeliveryDate entered)		
						default to current corporate date
						
					constraint (FromDeliveryDate entered)
						"FromDeliveryDateRequiredWhenUsingToDeliveryDate"
					
				FromPODate
					if (FromDeliveryDate entered)
						constraint (FromPODate not entered)
							"CannotEnterBothDeliveryDateAndPurchaseOrderDate"
							
					if (ToPODate entered)
						constraint (FromPODate < ToPODate)
							"FromPurchaseOrderDateMustBePriorToToPurchaseOrderDate"
							
				ToPODate
					if (FromPODate entered)
						default to current corporate date
						
					constraint (FromPODate entered)
						"FromPurchaseOrderDateRequiredWhenUsingToPurchaseOrderDate"
					
			Sort Order
				Company
				PurchaseOrder
				PurchaseOrderLine
				
			Local Fields
				RunTime     is Alpha 50
				RunDate		is Date
				RunYear		is Alpha 4
				RunDay		is Alpha 2
				RunMonth	is Alpha 2
				LocalCreatedPOReceiptImportHeader is a PurchaseOrderReceiptImport
			
			Instance Selection
				
				where (PrmCompany = Company
				and   (PrmVendorClass !entered
				or     Vendor.VendorClass = PrmVendorClass)
				and   (PrmShipTo !entered
				or     PrmShipTo = ShipToLocation)
				and   (FromDeliveryDate !entered
				or     EarlyDeliveryDate >= FromDeliveryDate)
				and   (ToDeliveryDate !entered
				or     EarlyDeliveryDate <= ToDeliveryDate)
				and   (FromPODate not entered
				or     PurchaseOrder.PurchaseOrderDate >= FromPODate)
				and   (ToPODate not entered
				or     PurchaseOrder.PurchaseOrderDate <= ToPODate)
				and   ((POCode1 !entered
				and    POCode2 !entered)
				or    ((POCode2 = PurchaseOrder.POCode
				and    POCode2 entered)
				or     (POCode1 entered
				and     POCode1 = PurchaseOrder.POCode)))
				and   ((BillCode1 not entered 
				and		BillCode2 not entered
				and		BillCode3 not entered
				and		BillCode4 not entered)
				or    ((BillCode1 entered and BillCode1 = CnCode)
				or     (BillCode2 entered and BillCode2 = CnCode)
				or	   (BillCode3 entered and BillCode3 = CnCode)
				or	   (BillCode4 entered and BillCode4 = CnCode)))
				and   ((Vendor1 !entered
				and    Vendor2 !entered)
				or    ((Vendor2 = Vendor
				and    Vendor2 entered)
				or     (Vendor1 entered
				and     Vendor1 = Vendor)))
				and   ((PurchaseFrom1 !entered
				and    PurchaseFrom2 !entered)
				or    ((PurchaseFrom2 = PurchaseFromLocation
				and    PurchaseFrom2 entered)
				or     (PurchaseFrom1 entered
				and     PurchaseFrom1 = PurchaseFromLocation)))
				and   !ItemType.Service
				and    Closed.No
				and    QuantityToProcess > 0
				and    ReceivedQuantity < QuantityToProcess
				and   !HasUnreleasedReceiptLines
				and   !IsDropship
				and    Released
				and   (Issued
				or     PurchaseOrder.IssueMethod.DoNotPrint)) 	
				
			Action Rules
			
				Set Rules
					
					Entrance Rules
						RunDate		= current corporate date
						RunYear		= RunDate year
						RunMonth	= RunDate month
						RunDay		= RunDate day
						RunTime		= current corporate time
					
					Exit Rules
						if (CompleteReceiptProcessing)
							invoke InterfaceReceipts PurchaseOrderReceiptImport
								invoked.PrmRunGroup           = RunGroup
								invoked.PrmCompany            = PrmCompany
								invoked.ReleaseReceipts       = ReleaseReceipts
								invoked.ReleaseOption		  = ReleaseOption
				
				PurchaseOrder Set Rules
				
					Entrance Rules
				
						if (ReceiptImportHeaderExists)
							LocalCreatedPOReceiptImportHeader = first ReceiptImportHeaderRel.PurchaseOrderReceiptImport
						else
							invoke Create PurchaseOrderReceiptImport
								fill in fields from this instance
								invoked.RunGroup                    = RunGroup
								invoked.Company		           		= Company
								invoked.PurchaseOrderReceiptImport  = PurchaseOrder + RunYear[3:4] + RunMonth + RunDay + RunTime
								invoked.POCode                      = PurchaseOrder.POCode
								
							LocalCreatedPOReceiptImportHeader = PurchaseOrder + RunYear[3:4] + RunMonth + RunDay + RunTime
											
				Instance Rules
						
					if (not ReceiptImportLineExists)
						invoke Create PurchaseOrderReceiptLineImport
							fill in fields from this instance
							invoked.RunGroup                                    = RunGroup
							invoked.Company		               					= Company
							invoked.PurchaseOrderReceiptImport 					= LocalCreatedPOReceiptImportHeader
							invoked.PurchaseOrderReceiptLineImport.LineNumber 	= PurchaseOrderLine
							invoked.EnteredReceivedQuantity                     = RemainingQuantity
		
		BuildAllRebatesContractRebateDueInvoiceLinesForOneContract is a Set Action
			completion message is "LoadOfAllRebatesContractRebateDueInvoiceLinesForAContractHasStarted;Check'MyScheduledActions'ForCompletion"
			restricted

			Parameters
				PrmContractGroup		is a ContractGroup		
				PrmCompany				is Numeric size 4
				PrmContract				is a Contract	
				PrmBeginMatchDate 		is Date
				PrmEndMatchDate  	 	is Date
				
			Instance Selection
				where (PrmCompany			= Company
				and    PrmContract			= Contract)

			Sort Order
				Company
				Contract
							
			Action Rules
				Instance Rules
					invoke BuildRebatesForMatchedInvoiceLines PayablesInvoiceDetail in foreground
						invoked.PrmContractGroup			= PrmContractGroup		
						invoked.PrmContract					= Contract
						invoked.PrmCompany					= Company
						invoked.PrmPoNumber					= PurchaseOrder
						invoked.PrmLineNbr					= PurchaseOrderLine
						invoked.PrmBeginMatchDate 			= PrmBeginMatchDate
						invoked.PrmEndMatchDate  	 		= PrmEndMatchDate
						invoked.PrmManufacturer				= Manufacturer
						invoked.PrmMajorPurchasingClass		= MajorPurchasingClass
						invoked.PrmMinorPurchasingClass		= MinorPurchasingClass
						invoked.PrmUNSPSCSegment			= UNSPSCCode.UNSPSCSegment
						invoked.PrmUNSPSCFamily				= UNSPSCCode.UNSPSCFamily
						invoked.PrmUNSPSCClass				= UNSPSCCode.UNSPSCClass
						invoked.PrmUNSPSCCommodity			= UNSPSCCode.UNSPSCCommodity
		    			invoked.PrmManufacturerContract		= ManufacturerContract
		    			invoked.PrmLocation					= ShipToLocation

					invoke BuildReturnRebateInvoiceLinesForOneContract VendorReturnLine in foreground
						invoked.PrmContractGroup			= PrmContractGroup		
						invoked.PrmContract					= Contract
						invoked.PrmCompany					= Company
						invoked.PrmPoNumber					= PurchaseOrder
						invoked.PrmLineNbr					= PurchaseOrderLine
						invoked.PrmEffectiveDate			= PrmContract.EffectiveDate
						invoked.PrmExpirationDate			= PrmContract.ExpirationDate
						invoked.PrmCommCodes				= CommodityCode
						invoked.PrmManufacturerInformation	= Manufacturer
						invoked.PrmPurchMajcl				= MajorPurchasingClass
						invoked.PrmPurchMincl				= MinorPurchasingClass
						invoked.PrmIcsegment				= UNSPSCCode.UNSPSCSegment
						invoked.PrmIcfamily					= UNSPSCCode.UNSPSCFamily
						invoked.PrmIcclass					= UNSPSCCode.UNSPSCClass
						invoked.PrmIccommodity				= UNSPSCCode.UNSPSCCommodity
		    			invoked.PrmMfgContract				= ManufacturerContract
		    			invoked.PrmLocation					= ShipToLocation
						
					invoke DeleteUnmatchedRebateInvoiceLines PayablesInvoiceDetail in foreground
						invoked.PrmContractGroup			= PrmContractGroup		
						invoked.PrmContract					= Contract
						invoked.PrmCompany					= Company
						invoked.PrmPoNumber					= PurchaseOrder
						invoked.PrmLineNbr					= PurchaseOrderLine
						invoked.PrmBeginMatchDate  			= PrmBeginMatchDate
						invoked.PrmEndMatchDate    			= PrmEndMatchDate 
		
		UpdatePOLineFromAdjustment is an Instance Action
			restricted
			Parameters
				PrmReceivingActivityDate is Date
				
			Action Rules
				if (PrmReceivingActivityDate entered)
					ReceivingActivityDate = PrmReceivingActivityDate
		
		UpdateFromReceiptLine is an Instance Action
			restricted
			Parameters
				PrmPurchaseOrderReceipt		is like PurchaseOrderReceipt
				PrmPurchaseOrderReceiptLine is like PurchaseOrderReceiptLine
				PrmReceivedQuantity			is like Quantity
				PrmReceivedUOM				is like UnitOfMeasure
				PrmReceivedUOMMultiplier	is like UOMMultiplier
				PrmIsSubstitute				is Boolean
				PrmIsCancelRemaining		is Boolean
				PrmIsCancelBackorder		is Boolean
				PrmMatchedNotReceivedQty	is like Quantity 
				PrmCatchWeightMatchedNotReceivedQty	is like Quantity
				PrmCatchWeightQuantity		is like Quantity
				PrmReceiptUnitCost          is like UnitCost
				PrmCurrentReceiptQuantity	is like Quantity
				PrmReceivingActivityDate	is Date
				PrmReleaseType				is Numeric size 1
					States
						NonTwoStepReceiving				value is 0
						TwoStepReceivingFirstRelease	value is 1
						TwoStepReceivingFinalRelease	value is 2
				PrmHasMatchedWriteOff		is Boolean
				PrmWriteOffQuantity			is like Quantity
			
			Local Fields
				LocalAllAllocationQuantity		is a Quantity	
				LocalRejectedQuantity			is a Quantity	
				LocalWHQuantity					is a Quantity	
				LocalTransDocumentType			is a AdjustmentInspectionDocumentType
				LocalQuantityToCancel			is like Quantity
				LocalQuantityToCancelInStock	is like Quantity
				
			Action Rules
				if (not PrmReleaseType.TwoStepReceivingFinalRelease) 
					LocalNewReceivedQuantity 	= PrmReceivedQuantity
					LocalNewReceivedUOM			= PrmReceivedUOM

					initialize LocalTotalPORecQtyInStock
					initialize LocalTotalPORecQtyInBuyUOM
					OldReceivedQuantity         = ReceivedQuantity	
					for each ReleasedPurchaseOrderReceiptLinesFromBatchRel

						if (each.EnteredReceivedQuantity entered)
							if (InventoriedOrNonstock)
								if (EnteredBuyUOM = each.ReceivedUOM)
									LocalTotalPORecQtyInBuyUOM	+= each.EnteredReceivedQuantity
								else
									LocalReceiptUOMMismatch 	= true
							
							LocalTotalPORecQtyInStock	+= each.DerivedStockQuantity


					if (LocalReceiptUOMMismatch   
					or not InventoriedOrNonstock) 
						if (InventoriedOrNonstock
						and EnteredBuyUOM not = Item.StockUOM)
							initialize UOMCalculation
							UOMCalculation.InputQuantity		= LocalTotalPORecQtyInStock
							UOMCalculation.InputUOM				= Item.StockUOM
							UOMCalculation.InputToUOM			= EnteredBuyUOM
							UOMCalculation.InputToUOMConversion	= EnteredBuyUOMMultiplier
							UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
							UOMCalculation.DoRounding			= true
							ReceivedQuantity					= UOMCalculation.OutputQuantity
						else
							ReceivedQuantity					= LocalTotalPORecQtyInStock       
					else
						ReceivedQuantity						= LocalTotalPORecQtyInBuyUOM
					
					for each PurchaseOrderLineAddOnChargesRel
						invoke UpdateFromLine each
							invoked.PrmReceivedQuantity		= ReceivedQuantity
					
					include CheckForBudgetAndCommitmentChanges
				

				if (not PrmReleaseType.TwoStepReceivingFirstRelease) 
					if (IsInventoryType)
						if (Item.CatchWeightCode.NotCatchWeight)
							if (LocalReceiptUOMMismatch)
								LocalWarehouseQuantity = QuantityToProcessInStock - LocalTotalPORecQtyInStock
							else
								LocalWarehouseQuantity = ((QuantityToProcess - ReceivedQuantity) * EnteredBuyUOMMultiplier) 
						else
							LocalWarehouseQuantity = QuantityToProcess - ReceivedQuantity 
						if (WarehouseDemandLinesRel not exist)
							if (LocalWarehouseQuantity > 0)
								include WarehouseDemandProcessing
								invoke CreateSupply WarehouseDemandLine
									invoked.Company									= Company
									invoked.InventoryLocation						= ShipToLocation
									invoked.Item									= Item
									invoked.EstimatedTransactionDate				= EarlyDeliveryDate
									invoked.WarehouseDemandLine.DemandDocumentType	= DemandDocumentType.PurchaseOrder
									invoked.WarehouseDemand.DemandSystemCode		= DemandSystemCode.PurchaseOrder
									invoked.WarehouseDemand.DemandCompany			= Company
									invoked.LineType								= ItemType
									invoked.WarehouseDemand.DemandDocument			= PurchaseOrder
									invoked.WarehouseDemandLine.LineNumber			= PurchaseOrderLine
									invoked.Vendor									= Vendor
									invoked.TransactionUOM							= EnteredBuyUOM
									invoked.TransactionUOMMultiplier				= EnteredBuyUOMMultiplier
									invoked.DemandRecordType						= WarehouseDemandLine.DemandRecordType.Supply
									invoked.Quantity								= LocalWarehouseQuantity
						else
							if (Item.CatchWeightCode.NotCatchWeight)
								if (LocalWarehouseQuantity < 0) 
									LocalWarehouseQuantity = QuantityToProcessInStock * -1
								else
									LocalWarehouseQuantity = ((PrmReceivedQuantity * PrmReceivedUOMMultiplier) * -1)
							else
								if (LocalWarehouseQuantity < 0) 
									LocalWarehouseQuantity = QuantityToProcess * -1 
								else
									LocalWarehouseQuantity = (PrmReceivedQuantity * -1) 
			
							invoke UpdateDemandQuantity WarehouseDemandLinesRel
								invoked.PrmQuantity	   = LocalWarehouseQuantity

				if (not PrmReleaseType.TwoStepReceivingFinalRelease)	
					if (PrmIsSubstitute)
						SubstituteQuantity			   += DerivedNewReceivedInEnteredBuyUOM
						

					LocalTransDocumentType			= PurchaseOrderReceiptAdjustmentAndInspectionLinesRel.AdjustmentInspectionDocumentType
					
					LocalWHQuantity = DerivedNewReceivedInEnteredBuyUOM						
					
					if (PrmHasMatchedWriteOff)
						WriteOffQuantity = PrmWriteOffQuantity
					
					if (LocalTransDocumentType.ReceiptInspection)
						LocalRejectedQuantity = PurchaseOrderReceiptAdjustmentAndInspectionLinesRel.Quantity
					
						if (LocalRejectedQuantity entered)
							initialize UOMCalculation
							UOMCalculation.InputQuantity		= LocalRejectedQuantity
							UOMCalculation.InputUOM				= EnteredBuyUOM
							UOMCalculation.InputToUOM			= VendorPriceUOM
							UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
							LocalRejectedQuantity				= UOMCalculation.OutputQuantity
							
							RejectedQuantity					= LocalRejectedQuantity 

					if (PrmReceivingActivityDate entered)
						ReceivingActivityDate = PrmReceivingActivityDate
					
					if (PrmReceiptUnitCost entered
					and PurchaseOrderLine.CostOption.VendorDetermined)
						EnteredUnitCost = PrmReceiptUnitCost
						

					if (Contract entered
					and not CostCode.Punchout
					and ReceivedQuantity > QuantityToProcess)
						if ((ReceivedQuantity - DerivedNewReceivedInEnteredBuyUOM) > QuantityToProcess) 
							LocalQuantity						= DerivedNewReceivedInEnteredBuyUOM
						else
							LocalQuantity						= ReceivedQuantity - QuantityToProcess
						if (EnteredBuyUOM != VendorPriceUOM)			
							initialize UOMCalculation
							UOMCalculation.InputQuantity		= LocalQuantity						
							UOMCalculation.InputUOM				= EnteredBuyUOM
							UOMCalculation.InputToUOM			= VendorPriceUOM
							UOMCalculation.Method				= UOMCalculation.Method.ConvertToAlternate
							LocalQuantity						= UOMCalculation.OutputQuantity														
							
						if (LastMatchUnitCost entered)
							ContractAmount = LocalQuantity * LastMatchUnitCost
						else
							ContractAmount = LocalQuantity * EnteredUnitCost
							
						LocalContractQuantity					= LocalQuantity
						LocalVendorPriceQuantityToProcess		= LocalQuantity
						include CalculateAOCSPIN

						invoke UpdateContractAmounts
							invoked.PrmTaxAmount 				= LocalContractTaxAmt
							invoked.PrmAOCAmount				= LocalAOCAmt
							invoked.PrmAmount					= ContractAmount
							invoked.PrmContractQuantity			= LocalContractQuantity
							invoked.PrmContractCurrency			= PurchaseOrder.Currency
							invoked.PrmContractUOM				= EnteredBuyUOM
							if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate = 1)
								invoked.PrmContractDate 		= PurchaseOrder.PurchaseOrderDate
							if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate = 2)
								invoked.PrmContractDate 		= EarlyDeliveryDate
								
								
					LocalAllAllocationQuantity = ReceivedQuantity - RejectedQuantity
					

					


					MatchedNotReceivedQuantity			-= PrmMatchedNotReceivedQty 
					CatchWeightMatchedNotReceivedQuantity -= PrmCatchWeightMatchedNotReceivedQty
					CatchWeightQuantity                 += PrmCatchWeightQuantity
					
					if (PrmIsCancelBackorder or PrmIsCancelRemaining) 
						if (QuantityToProcess > 0
						and ReceivedQuantity < QuantityToProcess)
							LocalQuantityToCancel						= RemainingQuantity + CancelQuantity - PrmCurrentReceiptQuantity
							LocalQuantityToCancelInStock				= QuantityToProcessInStock - LocalTotalPORecQtyInStock
							
							RoundedValue.RoundInput						= LocalQuantityToCancel
							RoundedValue.RoundingType					= RoundedValue.RoundingType.Normal
							RoundedValue.RoundTo						= (1/10^DerivedNumberOfDecimalsQuantity)
							RoundedValue.RoundingMethodFW				= RoundedValue.RoundingMethodFW.MultipleOf
							LocalQuantityToCancel 						= RoundedValue.RoundResult
							
							invoke CancelLine
								invoked.PrmPurchaseOrderReceipt			= PrmPurchaseOrderReceipt
								invoked.PrmPurchaseOrderReceiptLine		= PrmPurchaseOrderReceiptLine
								invoked.CancelFromPurchaseOrderReceipt 	= true
								invoked.PrmCancelQuantity 				= LocalQuantityToCancel	
								invoked.PrmQuantityToCancelInStock		= LocalQuantityToCancelInStock
						else 
						if (ReceivedQuantity >= QuantityToProcess)
							invoke ClosePurchaseOrderLine
					else
						invoke ClosePurchaseOrderLine		
				
			Exit Rules


				if (not PrmReleaseType.TwoStepReceivingFirstRelease)	
					if (IsInventoryType) 
						for each LineSourcesFromRQRel
							PrmWHDLCompany 				= each.PurchaseOrderLineSource.OperatingCompany
							PrmWHDLDocNumNumeric 		= each.PurchaseOrderLineSource.SourceDocumentNumeric
							PrmWHDLLineNumber 			= each.PurchaseOrderLineSource.SourceDocumentLineNumber									

							invoke FastUpdate RQWarehouseDemandLineRel
								initialize invoked.BasedOnPurchaseOrderReceipt
				
				


















































































































































































								
		CancelLine is an Instance Action
			valid when (PurchaseOrderLineEligibleToBeCancelled)
			Local Fields
				LocalAmountRemaining							is an InternationalAmount	
				LocalQuantityRemaining							is a Quantity			
				LocalQuantityToCancel 							is a Quantity
				LocalCancelQtyInStock							is a Quantity
				LocalAvailableToCancelInStock					is a Quantity
				LocalCancelLineSourceTotalQuantity 				is like Quantity			
				LocalQtyToProcessInStock						is a Quantity
				LocalExcessQuantity								is like Quantity
				LocalDemandTotalQuantity						is like Quantity
				LocalDemandCancelQuantity						is like Quantity
			Parameters
				CancelFromPurchaseOrder 		is Boolean
				CancelFromPurchaseOrderReceipt 	is Boolean
				PrmQuantityToCancelInStock		is like Quantity 
				PrmCancelQuantity 				is a Quantity
					default label is "NewCancelQuantity"
				PrmServiceCancelAmount 			is an UnsignedUnitCost
					default label is "NewServiceCancelAmount"						
					precision is DerivedNumberOfDecimalsCost
				PrmPurchaseOrderReceipt 		is like PurchaseOrderReceipt
					default label is "PurchaseOrderReceipt"
				PrmPurchaseOrderReceiptLine 	is like PurchaseOrderReceiptLine
					default label is "PurchaseOrderReceiptLine"
				PrmLocalDeletePurchaseOrderLineSourceFlag is Boolean
					default label is "DeletePurchaseOrderLineSourceFlag"
				PrmFromVendorReturn				is Boolean
					default label is "FromVendorReturn"
			
			Parameter Rules
				PrmServiceCancelAmount
					initial value is DerivedDefaultServiceCancelAmount
					default to DerivedDefaultServiceCancelAmount
					if(ServiceCode.Amount)
						if (PrmServiceCancelAmount < DerivedDefaultServiceCancelAmount)
		      				PrmCancelQuantity = 0
		      			else	
							PrmCancelQuantity = 1
						
				PrmCancelQuantity
					initial value is DerivedQuantityAvailableToCancel	
					default to DerivedQuantityAvailableToCancel							
			
			Entrance Rules
				if (PrmLocalDeletePurchaseOrderLineSourceFlag)
					LocalDeletePurchaseOrderLineSourceFlag = true
				
				if (not CancelFromPurchaseOrderReceipt)
					constraint (PurchaseOrder.UnreleasedPurchaseOrderReceiptsRel not exists)
						"CannotCancel,UnreleasedReceiptExistsForPurchaseOrder" 
				
					constraint (PurchaseOrderLinesFromOrderEntryRel not exist)	
						"CannotCancelOrDeletePurchaseOrderCreatedFrom_\Order_\Entry" 
					
					constraint (UnmatchedPayablesInvoiceDetailsRel not exists)
							"CannotCancelPurchaseOrderLine;UnmatchedInvoiceLineExists" 
				
					constraint (PurchaseOrderLineEligibleToBeCancelled)
						"CannotCancel,PurchaseOrderLine<LineNumber>IsNotReleased"
				
				if (ServiceCode.Amount)
					constraint (PrmCancelQuantity <= 1)
						"CannotEnterQuantityForAmountTypeServicePurchaseOrderLine" 
						
					constraint (ServiceCancelAmount <= PrmServiceCancelAmount)
						"CannotReduceCanceledAmountOnLine<LineNumber>"  
					
					constraint (PrmServiceCancelAmount <= DerivedDefaultServiceCancelAmount)
						"CannotCancelMoreThanWhatRemainsOnTheLine" 
					
				else
					constraint(PrmServiceCancelAmount = 0)
						"EnterCancelAmountForAmountTypeServicePurchaseOrderLineOnly" 

					constraint (CancelQuantity <= PrmCancelQuantity)
						"CannotReduceCanceledQuantityOnLine<LineNumber>"  
						
					constraint (PrmCancelQuantity <= DerivedQuantityAvailableToCancel)
						"CannotCancel<PrmCancelQuantity>Only<DerivedQuantityAvailableToCancel>LeftOnLine<LineNumber>" 
					
				
				if (CancelFromPurchaseOrderReceipt)
					constraint (PrmPurchaseOrderReceipt entered
					and 		PrmPurchaseOrderReceiptLine entered)
						"PurchaseOrderReceiptAndLineAreRequired"
				
        	Action Rules
        		if (not CancelFromPurchaseOrder
        		and not PrmFromVendorReturn
        		and not CancelFromPurchaseOrderReceipt)
	        		confirmation required
	        			"PurchaseOrderLineWillBeCanceled.Continue?"
	        	
				if ((PrmCancelQuantity      > 0                    or PrmServiceCancelAmount > 0) 
				or  (PrmCancelQuantity      != CancelQuantity      or CancelQuantity = 0)
				or  (PrmServiceCancelAmount != ServiceCancelAmount or ServiceCancelAmount = 0)
				or   PrmCancelQuantity      >= CancelQuantity)

					if (ItemType.Inventoried)
						initialize LocalCancelLineSourceTotalQuantity
						initialize LocalDemandTotalQuantity
						for each LineSourcesFromRQRel
							if (IsCatchWeightItem)
								LocalCancelLineSourceTotalQuantity 	+= each.Quantity
								LocalDemandTotalQuantity			+= each.RequisitionLineRel.Quantity
							else
								LocalCancelLineSourceTotalQuantity += (each.Quantity * each.EnteredUOMMultiplier)
								LocalDemandTotalQuantity += each.RequisitionLineRel.Quantity * each.RequisitionLineRel.EnteredUOMMultiplier
					
							
							
					if (PurchaseOrderLineCancelWareHouseDemandTotalQuantity != 0)
						PurchaseOrderLineSourceCalculatedQuantity = LocalCancelLineSourceTotalQuantity
						PurchaseOrderLineAdditionalQuantityToCancel = ((PrmCancelQuantity - CancelQuantity) * EnteredBuyUOMMultiplier)
						
						PurchaseOrderLineSourceCalculatedQuantity = PurchaseOrderLineSourceCalculatedQuantity - PurchaseOrderLineAdditionalQuantityToCancel
						if (PurchaseOrderLineSourceCalculatedQuantity < PurchaseOrderLineCancelWareHouseDemandTotalQuantity)
							PurchaseOrderLineAdditionalQuantityToCancel = PurchaseOrderLineCancelWareHouseDemandTotalQuantity - PurchaseOrderLineSourceCalculatedQuantity





					PurchaseOrderLineCancelComputedTaxAmount = PurchaseOrderLineCancelComputedTaxAmount + InvoicedTaxAmount + AccruedTaxAmount			
					
					QuantityToProcess 				= Quantity - PrmCancelQuantity
					LocalVendorPriceQuantityToProcess = VendorPriceUOMQuantityToProcess
					if	(not InventoriedOrNonstock	
					or	(VendorPriceUOM not entered
					or	 VendorPriceUOM = EnteredBuyUOM))
						VendorPriceUOMQuantityToProcess = QuantityToProcess
					else
					if (IsCatchWeightItem
					or	VendorPriceUOM = Item.StockUOM) 
						VendorPriceUOMQuantityToProcess = QuantityToProcess * EnteredBuyUOMMultiplier
					else 




						initialize UOMCalculation
						UOMCalculation.InputUOM					= EnteredBuyUOM
						UOMCalculation.InputToUOM				= VendorPriceUOM
						UOMCalculation.InputQuantity			= QuantityToProcess
						UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
						VendorPriceUOMQuantityToProcess			= UOMCalculation.OutputQuantity
					
					if (ServiceCode.Amount)	
						ServiceCancelAmount 	 		= PrmServiceCancelAmount
						ExtendedAmount 					= VendorBuyUnitCost - ServiceCancelAmount
						if (Taxable)								
							ExtendedTaxableAmount 		= ExtendedAmount								
						if (ExtendedAmount = 0)									
							LocalQuantityToCancel		= 1
					else
						LocalQuantityToCancel 			= PrmCancelQuantity - CancelQuantity
						ExtendedAmount 					= VendorPriceUOMQuantityToProcess * EnteredUnitCost	
						if (Taxable)
							ExtendedTaxableAmount		= VendorPriceUOMQuantityToProcess * EnteredUnitCost									

					LocalContractQuantity = LocalQuantityToCancel
					include CalculateAOCSPIN

					include CalculateLandedUnitCost


					if (IsInventoryType)

						if (IsCatchWeightItem)
							LocalQuantityRemaining			= QuantityToProcess
						else
							LocalAvailableToCancelInStock   = DerivedQuantityAvailableToCancel * EnteredBuyUOMMultiplier                           
							LocalQtyToProcessInStock		= QuantityToProcess * EnteredBuyUOMMultiplier
							LocalQuantityRemaining			= LocalQtyToProcessInStock
							if (PrmQuantityToCancelInStock entered)
								LocalCancelQtyInStock		= PrmQuantityToCancelInStock
							else
								LocalCancelQtyInStock		= LocalQuantityToCancel * EnteredBuyUOMMultiplier
							
						if  (LocalCancelLineSourceTotalQuantity > LocalDemandTotalQuantity
						and (LocalQuantityToCancel > (LocalCancelLineSourceTotalQuantity - LocalDemandTotalQuantity)))
							LocalExcessQuantity = LocalCancelLineSourceTotalQuantity - LocalDemandTotalQuantity
						else
							initialize LocalExcessQuantity
							
						for each LineSourcesFromRQRel
							PrmWHDLLocation 			= ShipToLocation						 
							PrmWHDLCompany 				= each.PurchaseOrderLineSource.OperatingCompany
							PrmWHDLDocNumNumeric 		= each.PurchaseOrderLineSource.SourceDocumentNumeric
							PrmWHDLLineNumber 			= each.PurchaseOrderLineSource.SourceDocumentLineNumber
							if (IsCatchWeightItem)
								invoke CancelDemand WarehouseDemandLineFromRQRel
									invoked.PrmCancelQuantity 	= (each.Quantity - LocalQuantityRemaining - LocalExcessQuantity)
							else
								if (LocalQuantityRemaining >= each.DerivedQuantityInStockUOM)
									LocalQuantityRemaining -= each.DerivedQuantityInStockUOM
								else
									if (LocalQuantityRemaining > 0)
										if (LocalExcessQuantity entered)
											LocalDemandCancelQuantity 	= (each.DerivedQuantityInStockUOM - LocalQuantityRemaining - LocalExcessQuantity)
											if (LocalDemandCancelQuantity < 0)
												LocalQuantityRemaining = LocalDemandCancelQuantity * -1
												initialize LocalDemandCancelQuantity
										else
											LocalDemandCancelQuantity   = (each.DerivedQuantityInStockUOM - LocalQuantityRemaining)
											initialize LocalQuantityRemaining
									else
										if (WarehouseDemandLineFromRQRel.Quantity >= each.DerivedQuantityInStockUOM)
											LocalDemandCancelQuantity	= each.DerivedQuantityInStockUOM 
										else
											LocalDemandCancelQuantity	= WarehouseDemandLineFromRQRel.Quantity
										initialize LocalQuantityRemaining
									
									if (LocalDemandCancelQuantity > 0)
										invoke CancelDemand WarehouseDemandLineFromRQRel
											invoked.PrmCancelQuantity	= LocalDemandCancelQuantity
									
									initialize LocalExcessQuantity
								

						invoke CancelDemand WarehouseDemandLinesRel
							if (IsCatchWeightItem)
								invoked.PrmCancelQuantity		= LocalQuantityToCancel
							else
								if (LocalCancelFromPurchaseOrder
								or  CancelFromPurchaseOrderReceipt)
									invoked.PrmCancelAllRemainingQuantity = true
								else
									invoked.PrmCancelQuantity 		= LocalCancelQtyInStock
					
					if (ContractAmount entered)
						if (ReceivedQuantity > QuantityToProcess)
							ContractAmount = ((VendorBuyUnitCost * ReceivedQuantity) - ServiceCancelAmount)
						else
							ContractAmount = ((VendorBuyUnitCost * QuantityToProcess) - ServiceCancelAmount)
						if (ContractAmount <0)
							initialize ContractAmount
					
					if (Contract entered)
						invoke UpdateContractAmounts
							invoked.PrmFromRelease             = true
							if (LocalQuantityToCancel = Quantity)
								invoked.PrmTaxAmount			= (LocalContractTaxAmt * -1)
							else
								invoked.PrmTaxAmount 			= ((LocalContractTaxAmt / (Quantity - CancelQuantity)) * LocalQuantityToCancel * -1)
								
							invoked.PrmAOCAmount 			= (LocalAOCAmt * -1)
							if (PrmServiceCancelAmount > 0)
								invoked.PrmAmount			= ((PrmServiceCancelAmount - old ServiceCancelAmount) * -1)
							else
								invoked.PrmAmount			= (LocalQuantityToCancel * VendorBuyUnitCost * -1)
							invoked.PrmContractQuantity		= (LocalQuantityToCancel * -1)
							invoked.PrmContractCurrency		= PurchaseOrder.Currency
							invoked.PrmContractUOM			= EnteredBuyUOM
							if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate = 1)
								invoked.PrmContractDate 	= PurchaseOrder.PurchaseOrderDate
							if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate = 2)
								invoked.PrmContractDate		= EarlyDeliveryDate
							invoked.PrmFromCancelOrDelete	= true
					
					if 	(Retainage.Yes 
					and  RetainagePercentComplete > 0
					and  not ServiceCode.Amount)
						RetainagePercentComplete = MatchedQuantity / QuantityToProcess
					
					include CalculateOpenPurchaseAmount 
					
	        		if (not CancelFromPurchaseOrder
					and Issued
					and not PurchaseOrder.IssuePending entered)
						Revised = true
						invoke CreatePurchaseOrderRevision PurchaseOrder
							
					if (QuantityToProcess changed)
						LocalQuantityRemaining = QuantityToProcess
						for each PurchaseOrderLineSource set
							if (LocalQuantityRemaining >= each.Quantity)
								LocalQuantityRemaining -= each.Quantity
							else
								invoke UpdateQuantities each    
									invoked.PrmCancelQuantity = LocalQuantityRemaining
									invoked.PrmSkipCommitment = true
									invoked.PrmFromPOLineCancel = true
								initialize LocalQuantityRemaining
								
					if(DistributionBy.ByQuantity)
						if (QuantityToProcess changed and QuantityToProcess > 0)
							LocalQuantityRemaining = QuantityToProcess
							for each PurchaseOrderLineDistribution set
								if (LocalQuantityRemaining >= each.DistributionQuantity)
									LocalQuantityRemaining -= each.DistributionQuantity
								else
									invoke UpdateQuantities each
										invoked.PrmCancelQuantity = LocalQuantityRemaining
									initialize LocalQuantityRemaining
					else
						if(DistributionBy.ByAmount)
							if (ExtendedAmount changed and ExtendedAmount > 0)
								LocalAmountRemaining = ExtendedAmount
								for each PurchaseOrderLineDistribution set
									if (LocalAmountRemaining >= each.DistributionAmount)
										LocalAmountRemaining -= each.DistributionAmount
									else
										invoke UpdateAmounts each
											invoked.PrmCancelAmount = LocalAmountRemaining
										initialize LocalAmountRemaining
							
					if (PrmCancelQuantity 	= Quantity 
					or 	ServiceCancelAmount = VendorBuyUnitCost)
						if (CancelFromPurchaseOrder = false)

							LocalCancelFromPOLine = true
							for each LineAddOnChargesForCancellationRel 
								invoke CancelPurchaseOrderAddOnCharge each


					if (PrmCancelQuantity > 0)

						for each PurchaseOrderAndLineAddOnCharge set
							initialize PurchaseOrderLineSourceEnteredUnitCost
							PurchaseOrderLineSourceEnteredUnitCost = each.EnteredUnitCost
							invoke UpdateAddOnChargeOnLineCancel each 						
								invoked.PrmOldEnteredUnitCost 		= PurchaseOrderLineSourceEnteredUnitCost
								invoked.PrmPOLineCancelQuantity 	= PrmCancelQuantity
								invoked.PrmPOLineOldCancelQuantity 	= CancelQuantity	

				if (QuantityToProcess = 0)
					if (PurchaseOrder.AribaPOType entered)
						initialize EDIOutputUnitCost
						initialize EDIOutputLineAmount
				
			Exit Rules
				if (not PrmFromVendorReturn
				and VendorReturnLine entered
				and not VendorReturnLine.VendorReturn.VendorClaimType.CreditMemo)
					invoke Cancel VendorReturnLine 
						invoked.PrmCancelNewQuantity	= PrmCancelQuantity  
						invoked.PrmIsCancelFromPOLine	= true
			
				if (not ServiceCode.Amount)
					CancelQuantity   = PrmCancelQuantity
					Quantity 		 = old Quantity
					
				if (not CancelFromPurchaseOrderReceipt 	
				or  CancelQuantity = Quantity)  		
					invoke ClosePurchaseOrderLine   
						invoked.PrmFromPOLineCancel = true
				 	
				include UpdateHeaderAmountsFromLine			

				for each CommittedPurchaseOrderLineDistributionsRel
					invoke UpdateGLCommitmentIndirect each
						invoked.PrmFromCancel = true
				

				invoke FastUpdate PurchaseOrder
					invoked.LastActivityDate				= current corporate date
					invoked.LastUpdateDate					= current timestamp
					if(Revised)
						invoked.Revised = true 
					invoked.IssuePending = true
				if((!PurchaseOrder.Canceled) and (!LocalCancelFromPurchaseOrder))
					invoke TriggerPurchaseOrder PurchaseOrder
				
				if (Revised)
					invoke UpdateRevisionsAndIssueMethodFlag PurchaseOrder
		
				if (ContractLine entered
				and ContractRel.UseCommitments
				and !CancelFromPurchaseOrder)
					invoke FinishUpdateContractAmounts ContractRel 

				if (PurchaseOrder.NeedsMatrixApproval
				and !CancelFromPurchaseOrder)
					if (Closed.No)
						invoke Unrelease
					include UnreleasePurchaseOrder				
		

		ReopenLine is an Instance Action		
			restricted
        	Parameters
        		PrmCompany			is a PayablesCompany
        		PrmPayablesInvoice 	is a PayablesInvoice
			Entrance Rules
   				LocalPayablesInvoice				= PrmPayablesInvoice
				if (PayablesInvoiceDetailForInvoiceRel exists)
					if (!ServiceCode.Amount)
						MatchedQuantity -= first PayablesInvoiceDetailForInvoiceRel.MatchedQuantity
						if (MatchedQuantity < 0)
							initialize MatchedQuantity
						OpenPurchaseAmount = ((((QuantityToProcess - MatchedQuantity) * EnteredBuyUOMMultiplier) / VendorPriceUOMMultiplier) * VendorBuyUnitCost)
						if (OpenPurchaseAmount < 0)
							initialize OpenPurchaseAmount
					else
						if (MatchedAmount > (QuantityToProcess * VendorBuyUnitCost)
						and OpenPurchaseAmount = 0)
							OpenPurchaseAmount = (((QuantityToProcess * VendorBuyUnitCost) - MatchedAmount) + (first PayablesInvoiceDetailForInvoiceRel.MatchUnitCost * first PayablesInvoiceDetailForInvoiceRel.MatchedQuantity))
						else
							OpenPurchaseAmount += (first PayablesInvoiceDetailForInvoiceRel.MatchUnitCost * first PayablesInvoiceDetailForInvoiceRel.MatchedQuantity)
						if (OpenPurchaseAmount < 0)
							initialize OpenPurchaseAmount

					if (first PayablesInvoiceDetailForInvoiceRel.PayablesInvoice.MatchProcessType.Service
					or  ItemType.Service)
						MatchedAmount -= (first PayablesInvoiceDetailForInvoiceRel.MatchUnitCost * first PayablesInvoiceDetailForInvoiceRel.MatchedQuantity)
						if (MatchedAmount <= 0)
							initialize LastMatchUnitCost
							initialize MatchedQuantity
							initialize MatchedAmount
					else
						if (MatchedQuantity = 0)
							initialize LastMatchUnitCost
							initialize MatchedAmount
	
					if (OpenPurchaseAmount changed)
						include UpdateHeaderAmountsFromLine

					if  (CloseDate entered)
						initialize CloseDate
						Closed = Closed.No
						if (PurchaseOrder.NumberOfClosedLines > 0)
							decrement PurchaseOrder.NumberOfClosedLines by 1

					if (PurchaseOrder.CloseDate entered)
						invoke FastUpdate PurchaseOrder
							initialize invoked.CloseDate
							invoked.Closed	 	= "N"	
					
			Exit Rules
				if (PayablesInvoiceDetailForInvoiceRel exists)
					include CalculateOpenPurchaseAmount

		UpdateFromPOLineComments is an Instance Action
			restricted
			Action Rules
				if (PurchaseOrderLine.Issued 
				or  PurchaseOrder.RevisionsInclude.Reissue)
					invoke Unrelease
					include UnreleasePurchaseOrder
		
		ValidateSupplyTypeDemand is an Instance Action  
			restricted
			Action Rules
			
				include WarehouseDemandProcessing 
				            	        
				if (DerivedFixitQuantityInStockForSupplyDemand > 0)
					if (!WarehouseDemandLinesRel exists)
						invoke CreateSupply WarehouseDemandLine  
							invoked.Company									= Company
							invoked.InventoryLocation						= ShipToLocation
							invoked.Item									= Item
							invoked.EstimatedTransactionDate				= EarlyDeliveryDate
							invoked.WarehouseDemandLine.DemandDocumentType	= DemandDocumentType.PurchaseOrder
							invoked.WarehouseDemand.DemandSystemCode		= DemandSystemCode.PurchaseOrder
							invoked.WarehouseDemand.DemandCompany			= Company
							invoked.LineType								= ItemType
							invoked.WarehouseDemand.DemandDocument			= PurchaseOrder
							invoked.WarehouseDemandLine.LineNumber			= PurchaseOrderLine
							invoked.Vendor									= Vendor
							invoked.TransactionUOM							= EnteredBuyUOM
							invoked.TransactionUOMMultiplier				= EnteredBuyUOMMultiplier
							invoked.DemandRecordType						= WarehouseDemandLine.DemandRecordType.Supply
							invoked.Quantity								= DerivedFixitQuantityInStockForSupplyDemand
					else
						if (first WarehouseDemandLinesRel.Quantity != DerivedFixitQuantityInStockForSupplyDemand)
							invoke FastUpdate first WarehouseDemandLinesRel 
								invoked.Quantity							= DerivedFixitQuantityInStockForSupplyDemand
				else
					invoke DeleteWithoutLocationUpdate WarehouseDemandLinesRel  

		IssuePurchaseOrderLines is a Set Action
			restricted
			Parameters
				PrmCompany			is a PurchasingCompany
				PrmPurchaseOrder	is a PurchaseOrder

			Instance Selection
				where (Company			= PrmCompany
				and	   PurchaseOrder	= PrmPurchaseOrder
				and    IsValidForPrinting)
				
			Action Rules
				Empty Set Rules
					invoke UpdateToIssued PrmPurchaseOrder
					
				Set Rules
					Exit Rules
						invoke UpdateToIssued PrmPurchaseOrder
					
				Instance Rules
					invoke Issue

		DeletePurchaseOrderLineSet is a Set Action
			restricted
			Parameters
				PrmCompany			is a PurchasingCompany
				PrmPurchaseOrder	is a PurchaseOrder
				PrmFromUnreleased	is Boolean

			Instance Selection
				where (Company			= PrmCompany
				and	   PurchaseOrder	= PrmPurchaseOrder)

			Action Rules
				Empty Set Rules
					invoke DeletePurchaseOrder PrmPurchaseOrder
						invoked.PrmFromUnreleased 	= PrmFromUnreleased
				Set Rules
					Exit Rules
						invoke DeletePurchaseOrder PrmPurchaseOrder
							invoked.PrmFromUnreleased 	= PrmFromUnreleased
				Instance Rules
					invoke Delete
					
		Issue is an Instance Action
				restricted
				Action Rules
					Issued = true
					initialize Revised

					if (Company.UseIDM)
						IDMReprintStatus = IDMReprintStatus.InProgress
					
					if (PurchaseOrder.IssueMethod.EDI
					or  PurchaseOrder.IssueMethod.XML)
						invoke Create PurchaseOrderEDIOutput
							fill in fields from this instance
								except invoked.PatientProcedure
							invoked.Quantity											= QuantityToProcess	
							invoked.Company												= Company
							invoked.PurchaseOrder										= PurchaseOrder
							invoked.PurchaseOrderRevision								= PurchaseOrder.PurchaseOrderRevision
							invoked.PurchaseOrderLine									= PurchaseOrderLine
							invoked.RecordType											= "L"
							invoked.VendorPurchaseFromLocation							= PurchaseFromLocation
							invoked.IssueMethod                                         = PurchaseOrder.IssueMethod
							invoked.PurchaseOrderDate									= PurchaseOrder.PurchaseOrderDate
							if (PatientProcedure exists)
						  		if (PatientProcedure.Lot entered)
						  			if (PurchasingVendorRel.TransmitLotNumber
						  			or  PurchaseFromLocationRel.TransmitLotNumber
						  			or  Company.TransmitLotNumber)
						  				invoked.Lot										= PatientProcedure.Lot
						  		if (PatientProcedure.SerialNumber entered)
						  			if (PurchasingVendorRel.TransmitSerialNumber
						  			or  PurchaseFromLocationRel.TransmitSerialNumber
						  			or  Company.TransmitSerialNumber)
						  				invoked.Serial 									= PatientProcedure.SerialNumber
                            invoked.Chemical											= Chemical
                            invoked.TestRequired										= TestRequired
                            invoked.RebuildRepair										= RebuildRepair
                            invoked.InspectionRequired									= InspectionRequired
                            invoked.EAMWorkOrder										= EAMWorkOrder
                            invoked.Taxable												= Taxable				
				            invoked.E2GCompCode									 		= E2GCompCode 	
							if (PurchaseOrder.SuppressPOCost)
								invoked.PrintTotal										= EDIOutputLineAmount
							invoked.DirectPayCertificate								= ShipToLocation.DirectPayCertificate	
							invoked.EnteredUnitCost										= VendorBuyUnitCost

								
						for each LineSourcesFromRQRel
							invoke Create PurchaseOrderEDIOutput							
								fill in fields from this instance
								invoked.Company											= Company
								invoked.PurchaseOrder									= PurchaseOrder
								invoked.PurchaseOrderRevision							= PurchaseOrder.PurchaseOrderRevision
								invoked.PurchaseOrderLine								= PurchaseOrderLine
								invoked.Vendor											= PurchaseOrder.Vendor
								invoked.VendorPurchaseFromLocation						= PurchaseOrder.PurchaseFromLocation
								invoked.RecordType										= "LR"
								invoked.RequestingCompany								= each.PurchaseOrderLineSource.OperatingCompany
								invoked.RequestingLocation								= each.RequestingLocation
								invoked.EnteredBuyUOM									= each.EnteredUOM
								invoked.Quantity										= each.Quantity
								invoked.DeliverTo										= each.DeliverTo
								invoked.RequestingLocationGlobalLocationNumber			= each.RequestingLocation.GlobalLocationNumber
								invoked.InventoryCompanyGlobalLocationNumber			= each.InventoryCompanyRel.GlobalLocationNumber
								invoked.IssueMethod                                     = PurchaseOrder.IssueMethod
                                invoked.Requester                                       = each.Requester
								invoked.EnteredUnitCost									= VendorBuyUnitCost
								
						if (PatientProcedure exists)
							invoke Create PurchaseOrderEDIOutput
								fill in fields from this instance
								invoked.Company											= Company
								invoked.PurchaseOrder									= PurchaseOrder
								invoked.PurchaseOrderRevision							= PurchaseOrder.PurchaseOrderRevision
								invoked.PurchaseOrderLine								= PurchaseOrderLine
								invoked.Vendor											= PurchaseOrder.Vendor
								invoked.VendorPurchaseFromLocation						= PurchaseOrder.PurchaseFromLocation
								invoked.RecordType										= "LP"
								invoked.IssueMethod                                     = PurchaseOrder.IssueMethod
                                if (PatientProcedure.PatientID entered)
                                    if (PurchasingVendorRel.TransmitMedicalRecordNumber
                                    or  PurchaseFromLocationRel.TransmitMedicalRecordNumber
                                    or  Company.TransmitMedicalRecordNumber)
                                        invoked.PatientID                                = DerivedValueMedicalRecordNumber
								if (PatientProcedure.CaseNumber entered)
						  			if (PurchasingVendorRel.TransmitCaseID
						  			or  PurchaseFromLocationRel.TransmitCaseID
						  			or  Company.TransmitCaseID)
						  				invoked.CaseNumber								  = DerivedValueCaseNumber
								if (PatientProcedure.ProcedureDate entered)
						  			if (PurchasingVendorRel.TransmitProcedureDate
						  			or  PurchaseFromLocationRel.TransmitProcedureDate
						  			or  Company.TransmitProcedureDate)
						  				invoked.ProcedureDate                           = PatientProcedure.ProcedureDate
                                if (PatientProcedure.PhysicianName entered)
						  			if (PurchasingVendorRel.TransmitPractitioner
						  			or  PurchaseFromLocationRel.TransmitPractitioner
						  			or  Company.TransmitPractitioner)
                                        invoked.PhysicianName	                          = PatientProcedure.PhysicianName
                                if (PatientProcedure.SalesRepresentative entered)
                                    if (PurchasingVendorRel.TransmitSalesRepresentative
                                    or  PurchaseFromLocationRel.TransmitSalesRepresentative
                                    or  Company.TransmitSupplierOrderNumber)
                                        invoked.SalesRepresentative                      = PatientProcedure.SalesRepresentative

                                if (PatientProcedure.OrderNumber entered)
                                    if (PurchasingVendorRel.TransmitSupplierOrderNumber
                                    or  PurchaseFromLocationRel.TransmitSupplierOrderNumber
                                    or  Company.TransmitSupplierOrderNumber)
                                        invoked.OrderNumber                             = PatientProcedure.OrderNumber
								invoked.EnteredUnitCost									= VendorBuyUnitCost
									
						if (TaxCode entered)
							invoke Create PurchaseOrderEDIOutput
								fill in fields from this instance
								invoked.Company											= Company
								invoked.PurchaseOrder									= PurchaseOrder
								invoked.PurchaseOrderRevision							= PurchaseOrder.PurchaseOrderRevision
								invoked.PurchaseOrderLine								= PurchaseOrderLine
								invoked.Vendor											= PurchaseOrder.Vendor
								invoked.VendorPurchaseFromLocation						= PurchaseOrder.PurchaseFromLocation
								invoked.RecordType										= "LT"
								invoked.TaxCode											= TaxCode
								invoked.TaxAmount										= (AccruedTaxAmount + InvoicedTaxAmount)
								invoked.TotalTaxableAmount								= ExtendedTaxableAmount
								invoked.IssueMethod                                     = PurchaseOrder.IssueMethod
								invoked.EnteredUnitCost									= VendorBuyUnitCost
									
						for each PurchaseOrderLineAddOnChargesRel
							invoke Create PurchaseOrderEDIOutput
								fill in fields from this instance
								invoked.Company											= Company
								invoked.PurchaseOrder									= PurchaseOrder
								invoked.PurchaseOrderRevision							= PurchaseOrder.PurchaseOrderRevision
								invoked.PurchaseOrderLine								= PurchaseOrderLine
								invoked.RecordType										= "LA"
								invoked.AddOnCharge										= each.AddOnCharge
								invoked.AddOnChargeAmount								= each.TotalAddOnChargeAmount
								invoked.Summary											= each.Summarize
								invoked.Vendor											= each.Vendor
								invoked.VendorPurchaseFromLocation						= each.PurchaseFromLocation
								invoked.TaxCode											= each.TaxCode
								invoked.TaxAmount										= (each.AccruedTaxAmount + each.InvoicedTaxAmount)
								invoked.IssueMethod                                     = PurchaseOrder.IssueMethod
								invoked.EnteredUnitCost									= VendorBuyUnitCost
										
						for each PrintOnPurchaseOrderLineCommentsRel
							invoke Create PurchaseOrderEDIOutput
								fill in fields from this instance
								invoked.Company											= Company
								invoked.PurchaseOrder									= PurchaseOrder
								invoked.PurchaseOrderRevision							= PurchaseOrder.PurchaseOrderRevision
								invoked.PurchaseOrderLine								= PurchaseOrderLine
								invoked.Vendor											= PurchaseOrder.Vendor									
								invoked.VendorPurchaseFromLocation						= PurchaseOrder.PurchaseFromLocation
								invoked.RecordType										= "LC"
								invoked.CommentTitle									= each.CommentTitle
								invoked.CommentText										= each.CommentText
								invoked.IssueMethod                                     = PurchaseOrder.IssueMethod
								invoked.EnteredUnitCost									= VendorBuyUnitCost
					
					if (PurchaseOrder.IssueMethod.Email)
						for each SendToVendorPOLineCommentAttachmentsRel
							invoke FastUpdate each
								invoked.AttachmentSent = true

				Exit Rules
					if (Company.UseIDM)
						for each PurchaseOrderLinesReprintInProgressRel
							invoke FastUpdate each
								if  (PurchaseOrder.IDMJob.Status.Finished 
								and  PurchaseOrder.IDMJob.MDSID entered
								and  PurchaseOrder.IssueMethodForRegeneration)
									invoked.IDMReprintStatus = IDMReprintStatus.Printed
								else
									invoked.IDMReprintStatus = IDMReprintStatus.ForReprint		
							
		RemoveMessage is an Instance Action
			valid when (POAcknowledgementMessagesNeedingAction)
			
			Parameters
				CommentText

			Parameter Rules
				CommentText
			Action Rules
				for each POAcknowledgementMessagesNeedingActionRel
					invoke RemoveMessage each 

				if (CommentText entered)
					invoke Create PurchaseOrderLineComment
    					invoked.Company				= Company
        	    		invoked.PurchaseOrder		= PurchaseOrder
		    			invoked.PurchaseOrderLine	= PurchaseOrderLine
						invoked.CommentTitle		= "Acknowledgement_Comment"
						invoked.CommentType			= "A"
						invoked.CommentText			= CommentText

		AddAcknowledgementComment is an Instance Action
			default label is "AddComment"
			valid when (POAcknowledgementMessagesNeedingAction)

			Parameters
				CommentText

			Parameter Rules
				CommentText
					required
			Action Rules
				invoke Create PurchaseOrderLineComment
    				invoked.Company				= Company
            		invoked.PurchaseOrder		= PurchaseOrder
		    		invoked.PurchaseOrderLine	= PurchaseOrderLine
					invoked.CommentTitle		= "Acknowledgement_Comment"
					invoked.CommentType			= "A"
					invoked.CommentText			= CommentText

		AssignProcessor is an Instance Action
			default label is "AssignProcessor"

			Parameters
				ParmProcessor			is an Employee			

			Parameter Rules
				ParmProcessor
					required

			Action Rules
				Processor = ParmProcessor

				send email
					to EmployeeRel.EmployeeWorkEmailAddress
					from config.DefaultFromEmailAddress
					subject "AssignedAsProcessor"
					Contents
						"YouHaveBeenAssignAsTheProcessorForAnAcknowledgementMessage"
						"TheAcknowledgementMessageIsForPurchaseOrder<PurchaseOrder>;Line<PurchaseOrderLine>;Revision<PurchaseOrder.PurchaseOrderRevision>"
						"PleaseViewTheMessageAndTakeActionAsNeeded"

		UpdatePOLineFromAcknowledgement is an Instance Action
			valid when (POAcknowledgementMessagesAreUpdateable)

			Parameters
				ParmComment				is a CommentText
				ParmUpdateCost			is Boolean
				ParmUpdateUOM			is Boolean
				ParmUpdateQuantity		is Boolean
				ParmRemoveMessage		is Boolean

			Parameter Rules
				ParmComment
				ParmUpdateCost
					initial value is true
					if (!AcknowledgementCostSearch)
						ParmUpdateCost		= false
        			constraint (ParmUpdateCost = true and AcknowledgementCostSearch)
        				"CannotUpdateCost,ThereIsNoAcknowledgementMessageForCostDifference"
				ParmUpdateUOM
					initial value is true
 					if (!AcknowledgementUOMSearch)
						ParmUpdateUOM		= false
        			constraint (ParmUpdateUOM = true and AcknowledgementUOMSearch)
        				"CannotUpdateUnitOfMeasure,ThereIsNoAcknowledgementMessageForUnitOfMeasureDifference"
				ParmUpdateQuantity				
					initial value is true
					if (!AcknowledgementQuantitySearch)
						ParmUpdateQuantity	= false
        			constraint (ParmUpdateQuantity = true and AcknowledgementQuantitySearch)
        				"CannotUpdateQuantity,ThereIsNoAcknowledgementMessageForQuantityDifference"
				ParmRemoveMessage
					initial value is true

			Action Rules

        		constraint (ParmUpdateCost = true or ParmUpdateUOM = true or ParmUpdateQuantity = true)
        			"AtLeastOneUpdateMustBeChosen"

				invoke UpdateFromAcknowledgement
					if (ParmUpdateCost)
						invoked.VendorBuyUnitCost	= DerivedAcknowledgementEDIUnitCost
					if (ParmUpdateUOM)
						invoked.EnteredBuyUOM		= DerivedAcknowledgementEDIUOM
					if (ParmUpdateQuantity)
						invoked.Quantity			= DerivedAcknowledgementEDIQuantity

				if (ParmRemoveMessage)
					for each POAcknowledgementMessagesNeedingActionRel
						invoke RemoveMessage each

				if (ParmComment entered)
					invoke Create PurchaseOrderLineComment
    					invoked.Company				= Company
	            		invoked.PurchaseOrder		= PurchaseOrder
    	        		invoked.PurchaseOrderLine	= PurchaseOrderLine
						invoked.CommentTitle		= "Acknowledgement_Comment"
						invoked.CommentType			= "A"
						invoked.CommentText				= ParmComment

		CancelBackorderForUnreceivedLines is a Set Action
			restricted
			Parameters
				PrmCompany					is a PurchasingCompany
				PrmPurchaseOrderReceipt		is a PurchaseOrderReceipt

			Parameter Rules
			Instance Selection
				where (PrmCompany = Company
				and    PrmPurchaseOrderReceipt.PurchaseOrder = PurchaseOrder
				and    QuantityToProcess > 0
				and    ReceivedQuantity < QuantityToProcess
 				and    IsReceivable
 				and   (PurchaseOrderReceiptLinesRel not exists
 				or	   PrmPurchaseOrderReceipt != last PurchaseOrderReceiptLinesRel.PurchaseOrderReceipt))	
		
			Sort Order
			Action Rules										
				Instance Rules
					invoke CancelLine
						invoked.PrmPurchaseOrderReceipt			= PrmPurchaseOrderReceipt
						invoked.PrmPurchaseOrderReceiptLine		= PurchaseOrderLine
						invoked.CancelFromPurchaseOrderReceipt 	= true
						invoked.PrmCancelQuantity 				= RemainingQuantity + CancelQuantity
							
		PutOnHold is an Instance Action
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.SentForApproval
					
		TaxEngineApprove is an Instance Action
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.ApprovedByEngine

		TaxEngineReject is an Instance Action
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.RejectedByEngine
		
		UpdateTaxAmountFromBatch is an Instance Action
			restricted
			Action Rules
				if (IsUnreleased and Taxable and TaxEntityUsesSabrix)
					initialize InvoicedTaxAmount
					initialize AccruedTaxAmount
				
		UpdatePOLineShipDateFromPOAcknowledgement is an Instance Action
			restricted
			Parameters
				PrmAcknowledgementPOShipDate is Date
					default label is "AcknowledgementShipDate"

			Action Rules
				if (PrmAcknowledgementPOShipDate entered)
					POShipDate = PrmAcknowledgementPOShipDate

					ExecuteDeliveryToleranceDays = DerivedDeliveryToleranceDays

					if(DerivedLeadTimeDays entered
					and not LocalDisableDeliveryTolerance
					and not POADateEarlierThanPODate)
						if((PrmAcknowledgementPOShipDate + DerivedLeadTimeDays as days) <= DeliveryDateWithinTolerance)
							EarlyDeliveryDate = PrmAcknowledgementPOShipDate + DerivedLeadTimeDays as days
						else
							LateDeliveryDate = PrmAcknowledgementPOShipDate + DerivedLeadTimeDays as days

	StateCycles
		PurchaseOrderLineLifeCycle is a StateCycle

			state field is PurchaseOrderLineLifeCycleState
			
			Unreleased is a State
		        Create is a Create Action
        			valid when 	(ValidForCreateUpdate)
		        	completion message is "<CompletionMessage>"
		        	
		        	Action Rules


					Exit Rules 

                        if (ContractLine entered)
                            if (PurchaseOrder.BlanketOrStandingContract entered)  
                                for each PrintOnPOContractLineCommentRel
                                    invoke Create PurchaseOrderLineComment
                                        invoked.Company             = Company
                                        invoked.PurchaseOrder       = PurchaseOrder
                                        invoked.PurchaseOrderLine   = PurchaseOrderLine
                                        invoked.CommentTitle        = each.CommentTitle
                                        if (each.CommentUsedFor = 2)
                                            invoked.CommentType     = "P"
                                        else 
                                        if (each.CommentUsedFor = 3)
                                            invoked.CommentType     = "N"
                                        invoked.CommentText         = each.Description
                                        invoked.Attachment.File     = each.Attachment.File                      
                                        invoked.Attachment.MimeType = each.Attachment.MimeType
                                        invoked.Attachment.Title    = each.Attachment.Title
                            
                            if (PurchaseOrder.BlanketOrStandingContract !entered)  
                                if (PreviousLineWithSameContract !exists)
                                    for each PrintOnPOContractCommentRel
                                        invoke Create PurchaseOrderComment
                                            invoked.Company             = Company
                                            invoked.PurchaseOrder       = PurchaseOrder
                                            invoked.CommentTitle        = each.CommentTitle
                                            if (each.CommentUsedFor = 2)
                                                invoked.CommentType     = "P"
                                            else 
                                            if (each.CommentUsedFor = 3)
                                                invoked.CommentType     = "N"
                                            invoked.CommentText         = each.Description
                                            invoked.Attachment.File     = each.Attachment.File                      
                                            invoked.Attachment.MimeType = each.Attachment.MimeType
                                            invoked.Attachment.Title    = each.Attachment.Title

				QuickCreate is a Create Action    
					valid when (not DisableCreatePurchaseOrderLine)
				
				CreateFromTemplateLine is a Create Action
					restricted
					Parameters
						PrmCompany					is like PurchasingCompany
						PrmProcurementGroup			is a ProcurementGroup
						PrmProcurementTemplate		is a ProcurementTemplate
						PrmProcurementTemplateLine	is a ProcurementTemplateLine
						PrmPurchaseOrder			is like PurchaseOrder
						PrmVendor                   is a Vendor
						PrmCopyAllLines				is Boolean
					Parameter Rules
						PrmProcurementGroup
							required
						PrmProcurementTemplate
							required
						PrmProcurementTemplateLine
							required
					Action Rules
						if (PrmProcurementTemplateLine.Contract !entered
						or  PrmProcurementTemplateLine.Contract.Vendor = PrmVendor)
							invoke Create this instance
								invoked.Company								= PrmCompany
								invoked.PurchaseOrder						= PrmPurchaseOrder
								invoked.TransientBypassUnitCostValidation	= true
								if (PrmProcurementTemplateLine.HasContract)
									invoked.Contract		= PrmProcurementTemplateLine.Contract
									invoked.ContractLine	= PrmProcurementTemplateLine.ContractLine
									invoked.CostOption      = PrmProcurementTemplateLine.ContractLine.CostOption

								invoked.ShipToLocation          	= PrmProcurementTemplateLine.FromCompanyLocation.FromLocation         
		                        invoked.Item                        = PrmProcurementTemplateLine.Item
		                        if (PrmCopyAllLines
		                        and PrmProcurementTemplateLine.Quantity not entered)
		                        	invoked.Quantity                = 1
		                        else
		                        	invoked.Quantity                = PrmProcurementTemplateLine.Quantity
		                        invoked.EnteredBuyUOM               = PrmProcurementTemplateLine.UnitOfMeasure
		                        invoked.CommodityCode               = PrmProcurementTemplateLine.CommodityCode
		                        if (PrmProcurementTemplateLine.ServiceCode.Quantity or PrmProcurementTemplateLine.ServiceCode.Amount)
		                            invoked.ItemType                = ItemType.Service
		                            invoked.Description             = PrmProcurementTemplateLine.ServiceDescription
		                            invoked.ServiceCode             = PrmProcurementTemplateLine.ServiceCode
		                        else
		                            if (PrmProcurementTemplateLine.SpecialItem)
		                                invoked.ItemType                = ItemType.Special
		                                invoked.Description             = PrmProcurementTemplateLine.SpecialItemDescription
		                                if (PrmProcurementTemplateLine.HasContract)
		                                	invoked.VendorItem			= PrmProcurementTemplateLine.ContractLine.VendorItem
		                                else
		                                	invoked.VendorItem  		= PrmProcurementTemplateLine.SpecialItemDescription
		                            else
		                                invoked.Description             = PrmProcurementTemplateLine.Item.Description
		                                invoked.MajorPurchasingClass    = PrmProcurementTemplateLine.Item.MajorPurchasingClass
		                                invoked.MinorPurchasingClass    = PrmProcurementTemplateLine.Item.MinorPurchasingClass
								invoked.Manufacturer 				= PrmProcurementTemplateLine.Manufacturer
								invoked.ManufacturerNumber			= PrmProcurementTemplateLine.ManufacturerNumber
								invoked.TemplateAccount				= PrmProcurementTemplateLine.DistributionAccount
  
        		Update is an Update Action
        			valid when 	(ValidForCreateUpdate)
        			completion message is "<CompletionMessage>"
        			Local Fields
        				LocalPOLineSourceQuantity		is like Quantity
					Entrance Rules
				    	include InventoryLocationStatusValidation
				    	
				    	if (ItemType.Service and EnteredContractLine entered)
							ContractLine 	= EnteredContractLine
        			Action Rules
											
						constraint (!IsOnHold)
							"CannotUpdate;SentForApproval"

                       	if (PurchaseOrderReceiptLinesRel exists
	                   	or  PayablesInvoiceDetailsByVendorRel exists)
							if (ItemType.Special and VendorItem changed)
    	                   		confirmation required
    	                   			"VendorItemWillAlsoBeUpdatedOnReceiptLineAndInvoiceLines.Continue?"
							else
							if (ItemType.Service and Description changed)
    	                   		confirmation required
    	                   			"DescriptionWillAlsoBeUpdatedOnReceiptLineAndInvoiceLines.Continue?"

                        if (ReferencedContractHasHeaderCommitments)
	                    	constraint (not HasMultipleDistributions and first PurchaseOrderLineDistributionRel.DistributionAccount = Contract.CommitmentAccount)
	                        	"ReferencedContractHasHeaderCommitments.PurchaseOrderLineDistributionMustMatchContractHeaderCommitmentDistribution."

						include CalculateOpenPurchaseAmount
						
						LocalDistributionCode = old DistributionCode
						
						if (StandardCommentCode entered)
							include CreateCommentFromCommentCode
						
						LocalBypassVendorUpdate = true

						include ItemReplacement
						
					Exit Rules
						include UpdatePurchaseOrderReceiptLineCost
						
						include CalculateLandedUnitCost
						include CheckForBudgetAndCommitmentChanges
						include UpdateQuantitiesOrUnitCostOutsidePOLine
        					
				    	if (not BypassHeaderAmountUpdate)
							include UpdateHeaderAmountsFromLine

						if (ContractLine changed and ContractLine entered)
							include CopyContractLineComment
							
						if (DisplayOfProcedureInfo)
							include CheckPatientProcedure  
						
						if (MissingDistribution) 
							include PurchaseOrderLineDistributionAccountDefaulting
							include CreateOrDeleteDistributionFromDistributionCode
							
						include UpdateVendorItemAndDescriptionForReceiptAndInvoice

						if (Vendor changed 
						and PurchaseOrderLineAssetRel exists)
							invoke FastUpdate PurchaseOrderLineAssetRel 
								invoked.Vendor = Vendor

        		ReplaceItem is an Instance Action 
					restricted
        			valid when (ValidForCreateUpdate)
        			Parameters
        				ReplaceItem						is an Item
        				ReplaceItemType					is like ItemType
        				ReplaceDescription				is like Description
        				ReplaceVendorItem				is like VendorItem
        				ReplaceUOM						is a UnitOfMeasure
        				ReplaceCost						is like UnsignedUnitCost
        			Parameter Rules
        				ReplaceItem
        					constraint (Item != ReplaceItem)
        						"CannotUseReplaceItemFunction;NewItemSameAsOldItem"
        						
        				ReplaceItemType
							initial value is ItemType
        					constraint (not old ItemType.Inventoried and not ItemType.Inventoried)
        						"CannotReplaceItem;OldOrNewItemIsInventoryType" 
        				
        				ReplaceDescription
        					initial value is ReplaceItem.Description
        					default to ReplaceItem.Description
        					
        				ReplaceUOM
        					initial value is EnteredBuyUOM
        					
        				ReplaceCost
        					initial value is EnteredUnitCost
        					
        			Action Rules
        				constraint (PurchaseOrderReceiptLinesRel not exists)
        					"ItemCannotBeReplaced;OriginalLineHasBeenReceived"
        				
        				invoke Unreleased.Update
        					invoked.Item						= ReplaceItem
	        				invoked.ItemType					= ReplaceItemType
	        				invoked.Description                 = ReplaceDescription
	        				invoked.VendorItem					= ReplaceVendorItem
	        				invoked.EnteredBuyUOM				= ReplaceUOM
	        				invoked.EnteredUnitCost				= ReplaceCost
	        				invoked.LocalReplaceItemFlag		= true
	        				initialize invoked.Contract
	        				initialize invoked.ContractLine


        						
                ReleasePurchaseOrder is an Instance Action
					valid when (CanReleasePurchaseOrder)
					Action Rules
						invoke Release Unreleased PurchaseOrder
                
                EditRelease is an Instance Action
                	restricted
                	Local Fields
                		LocalAmountRemaining	is like InternationalAmount
                		
                	Action Rules
		        		if (Company.RequireUnitOfMeasure)
		        			constraint (EnteredBuyUOM entered)
		        				"CompanyRequiresUnitOfMeasureToBeEnteredForLine<LineNumber>" 
						constraint (Quantity entered)
							"QuantityIsRequiredForLine<LineNumber>"							            		              	
                		if (IsCostRequired)
                			constraint (not IsCostNegative)
								"UnitCostCannotBeNegativeForLine<LineNumber>"
							constraint (VendorBuyUnitCost entered)
    							"UnitCostIsRequiredForLine<LineNumber>"
						if (CostOption.NoCharge)
							constraint (not ServiceCode.Amount)
								"CannotSet_Cost_OptionTo_No_ChargeFor_Service_ItemBy_AmountForLine<LineNumber>"
                        constraint (HasUOM)
                			"UOMIsRequiredForLine<LineNumber>"
                			
                        if (not Released
                        and ReceivedQuantity < Quantity)
	                            
                            if (not IsInventoryType)
                            	constraint (DistributionExists)	
                                    "CannotRelease,MissingDistributionAccountForLine<LineNumber>"                                    
                                
                                if (QuantityToProcess > 0)

                                    if (PurchaseOrder.Currency != Company.Currency
                                    and DistributionAmountTotal entered) 
                                        initialize CurrencyExchange
                                        initialize CurrencyExchange.TransactionAmount
                                        SavedFromCurrency							= PurchaseOrder.Currency
                                        CurrencyExchange.ToCurrency					= Company.Currency
                                        SavedExchangeDate							= PurchaseOrder.PurchaseOrderDate
                                        CurrencyExchange.EnteredCurrencyAmount		= DistributionAmountTotal
                                        CurrencyExchange.EnteredCurrencyRate		= PurchaseOrder.EnteredCurrencyConversionRate
                                        constraint (CurrencyExchange.OutputCurrencyAmount = ExtendedAmount)
                                            "CannotRelease,Line<LineNumber>DistributionsOutOfBalance"

                                    else
                                    	initialize DistributionTotalsComputed
                                        constraint (not DistributionsExistButNotInBalance) 
                                            "CannotRelease,Line<LineNumber>DistributionsOutOfBalance"                            
                                    




                            


                            
                            if (Taxable)
                            	constraint (TaxCode entered)
                            		"CannotRelease;Line<LineNumber>TaxableWithNoTaxCodeEntered"
                            
                            constraint (!LineErrorsExist)
                    			"CannotRelease;ErrorsExist"
							
							if (PurchaseOrder.RetainagePercentCompleteTracking.PurchaseOrderLevel 
							or  PurchaseOrder.RetainagePercentCompleteTracking.Contract)
								initialize RetainageOverridePercentComplete
							
							if (Retainage.Yes)
								constraint (RetainageFirstPercent 			 <= 1
								and 		RetainageUpToPercentComplete 	 <= 1
								and 		RetainageSecondPercent 			 <= 1
								and 		RetainageOverridePercentComplete <= 1
								and 		RetainageSecondPercent 			 >= 0			
								and 		RetainageOverridePercentComplete >= 0)
									"RetainagePercentMustBeBetween1And100PercentOnly"	
								
                            if (PurchaseOrderLineSource set exists)
                                for each PurchaseOrderLineSource set
                                    if (each.FromOrderEntry)
                                        constraint (each.CustomerOrderLineRel.CustomerOrder.HoldCode not entered)
                                            "CannotRelease;CustomerOnRelatedOrderEntryOrderIsOnHold"
						
						constraint (not IsDistributionNotBalanced)
							"PurchaseOrderLine<LineNumber>_\<DistributionNotInBalanceMessage>"  
						
						if (InventoriedOrNonstock)
							if (not (PurchaseOrderLineLifeCycleState.Closed
							or	LineFullyCancelled))
								if (Item.MajorPurchasingClass entered)
									constraint (MajorPurchasingClass = Item.MajorPurchasingClass)
										"CannotUseDifferentPurchasingClassForInventoryAndNon-stockItemsAtLine<LineNumber>"
								if (Item.MinorPurchasingClass entered)
									constraint (MinorPurchasingClass = Item.MinorPurchasingClass)
										"CannotUseDifferentPurchasingClassForInventoryAndNon-stockItemsAtLine<LineNumber>"

							if (not PreviouslyReleased)								
								constraint (Item.Active)		
									"Item<Item>IsInactive"
								constraint (not Item.Discontinued)					
									"Item<Item>IsDiscontinued"
								if (ItemLocationRel exists)
					        		constraint (ItemLocationRel.ItemLocation.Active)
		        						"Item<Item>AtLocation<ShipToLocation>IsInactive"   
									constraint (not ItemLocationRel.ItemLocation.Discontinued) 
										"Item<Item>AtItemLocation<ShipToLocation>IsDiscontinued"
							if (HasItemLocationStockUOM)
								constraint (LocationItemUOMRel.OKForBuying)
									"<EnteredBuyUOM>IsNotValidUnitOfMeasureOnLocationForThisItem<Item>"  
							else                		                    			
								constraint (ItemUOMBuyRel.OKForBuying)	
									"<EnteredBuyUOM>IsNotValidForThisItem<Item>"
	        					
                    	if (IsHSNSACCodeEnabled)
							constraint (HSNSACCode entered)
								"HSN_/SACCodeIsRequiredForLine<PurchaseOrderLine>"
						else
							constraint (HSNSACCode not entered)
								"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompanyForLine<PurchaseOrderLine>"
                    			
                    	constraint (Quantity entered)
                    		"QuantityIsRequiredForLine<LineNumber>"
                    	
                    	constraint (!IsInventoryAndDropShip)
                    		"CannotHaveInventoryItemOnDropshipPurchaseOrder"	
                    	
                    	if (PurchaseOrderLinesWithConsignCodeRel exists)
							constraint (CnCode entered)
								"CannotRelease,BillCodeNotEnteredForLine<LineNumber>"

						if(Contract entered)
							if (Contract.CurrencyCode != PurchaseOrder.Currency)
								initialize CurrencyExchange
								SavedFromCurrency						= PurchaseOrder.Currency
								CurrencyExchange.ToCurrency				= Contract.CurrencyCode
		                        SavedExchangeDate						= PurchaseOrder.PurchaseOrderDate
		                        SavedTransactionAmount					= ContractLineMaxEditValue
		                        CurrencyExchange.EnteredCurrencyRate    = PurchaseOrder.EnteredCurrencyConversionRate
		                        LocalContractExtendedAmount 			= CurrencyExchange.OutputCurrencyAmount
		                    else
		                    	LocalContractExtendedAmount = ContractLineMaxEditValue
		                   
		                  	LocalAmountRemaining = LocalContractExtendedAmount
		                    
		                    if (Contract.MaxEditPoAndRq)
			                    for each LineSourcesFromRQRel
		                    		if (each.RequisitionLineRel exists
		                    		and Contract = each.RequisitionLineRel.Contract)
		                    			LocalAmountRemaining -= each.RequisitionLineRel.ApprovalValue
		                   	
		                    if (Contract.MaximumAmount > 0)
		                    	constraint(LocalAmountRemaining <= Contract.AmountRemaining)
		                    		"PurchaseOrderAmountExceedsMaximumAmountRemainingForContract<Contract>"
		                   
							if (Contract.CreateCommitments.HeaderSpread
	                        and !PreviousLineWithSameContract exists
	                        and (!CommittedRequisitionLineSourcesExist
	                        or  (CommittedRequisitionLineSourcesExist
	                        and  UnitCostOrQuantityDifferencesWithRequisitions)))
								invoke EditHeaderSpread ContractRel
									initialize LocalCalculateContractInAmountDone
									include CalculateContractInAmount
									if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate.LineEarlyDeliveryDate)
										invoked.InTransactionDate	= EarlyDeliveryDate
	                        		else
	                        		if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate.PurchaseOrderDate)
	                        			invoked.InTransactionDate   = PurchaseOrder.PurchaseOrderDate
	                        		invoked.InCurrency				= PurchaseOrder.Currency
	                        		invoked.InAmount                = LocalInAmountExtendedAmount + LocalInAmountDifferenceAmountForSpread    


							include ValidateContract
			
						if (ContractLine entered)
							if  (!FromRequisitions
							or   Contract.LifetimeEdit.PurchaseOrders
							or  (FromRequisitions
							and  PurchaseOrderLineSourceCount > 1)
	                        or  (FromRequisitions
	                        and  UnitCostOrQuantityDifferencesWithRequisitions
	                        and  Contract.LifetimeEdit.PurchaseOrdersAndReqs
	                        and  PurchaseOrderLineSourceCount = 1)) 
								include CalculateAOCSPIN
								invoke EditLimits ContractLineRel
									if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate.LineEarlyDeliveryDate)
										invoked.InDate				= EarlyDeliveryDate
	                        		else
	                        		if (Company.ProcurementGroup.PurchaseOrderEncumbranceDate.PurchaseOrderDate)
	                        			invoked.InDate   			= PurchaseOrder.PurchaseOrderDate
	                        		invoked.InCurrency				= PurchaseOrder.Currency
	                        		if  (FromRequisitions
	                        		and  UnitCostOrQuantityDifferencesWithRequisitions
	                        		and  Contract.LifetimeEdit.PurchaseOrdersAndReqs
	                        		and  PurchaseOrderLineSourceCount = 1
									and !PreviouslyReleased) 
                        				invoked.InDifferenceAmount  = DifferenceAmountForSpread 
                        			invoked.InAmount				= ExtendedAmount
									invoked.InQuantity          	= Quantity
									invoked.InAddOnChargeAmount     = LocalAOCAmt
									invoked.InTaxAmount             = LocalContractTaxAmt
									invoked.InUOM                   = EnteredBuyUOM 
									if (FromRequisitions
									and !PreviouslyReleased)
										invoked.POFromRQ            = true

	        			if (InventoriedOrNonstock and VendorItemExists)
	        				constraint (VendorItem.Active)
	        					"VendorItem<VendorItem>IsInactive"	
                       	





				


				BatchRelease is a Set Action
					restricted
					Parameters
						PrmCompany			is a PurchasingCompany
						PrmPurchaseOrder	is a PurchaseOrder

					Sort Order
						Company
						PurchaseOrder
						PurchaseOrderLine

					Instance Selection
						where (Company			= PrmCompany
						and	   PurchaseOrder	= PrmPurchaseOrder
						and    PurchaseOrderLineLifeCycleState.Unreleased)

					Action Rules
						PurchaseOrder Set Rules
							Exit Rules

								if (SingleCallToVertex)
									invoke ProcessVertexForPOLines PurchaseOrderLine
										invoked.PrmCompany				= Company
										invoked.PrmPurchaseOrder 		= PurchaseOrder
								else 
								if  (VertexDelayTaxCall)
									for each PurchaseOrder.TaxablePurchaseOrderAddOnChargesRel
										invoke CalculateVertexLandedUnitCost each 
								else
								if (SingleCallToOneSource)
									invoke ProcessOneSourceForPOLines PurchaseOrderLine in foreground
										invoked.PrmCompany				= Company
										invoked.PrmPurchaseOrder 		= PurchaseOrder
								invoke TransitionToReleased PurchaseOrder
								
						Instance Rules
							include ReleaseRules

				



				


				Release is an Instance Action		
					restricted
					Action Rules
						include ReleaseRules
						




				FrontEndSplitDistributions	is an Instance Action
					valid when(AllowFrontEndSplit)
					Action Rules
						invoke SplitFESDistributions PurchaseOrderLineDistribution in foreground
							invoked.PrmCompany 				= Company
							invoked.PrmPurchaseOrder		= PurchaseOrder
							invoked.PrmPurchaseOrderLine	= PurchaseOrderLine
				
				DeleteFrontEndSplitDistributions	is an Instance Action
					valid when(HasFrontEndSplitDistributions)
					Action Rules
						invoke DeleteFrontEndSplitDistributions PurchaseOrderLineDistribution
							invoked.PrmCompany 				= Company
							invoked.PrmPurchaseOrder		= PurchaseOrder
							invoked.PrmPurchaseOrderLine	= PurchaseOrderLine

			Released is a State
				ReceiptArchive is an Instance Action
					valid when (IsValidforReceiptArchive)
					
					Entrance Rules
						constraint (PayablesInvoiceDetailsUnmatchedRel not exist)
							"CannotArchivePurchaseOrderLine;UnmatchedInvoiceForPurchaseOrderLineExist" 
								
					Action Rules
						if (MatchedNotReceivedQuantity not entered)		
							for each ReleasedPurchaseOrderReceiptLinesRel
								invoke ReceiptArchive each
							invoke ClosePurchaseOrderLine
						
						if (Closed.Yes)
							for each PurchaseOrderAndLineAddOnCharge set
								if (each.LandedAddOnCharge)
									invoke POReceiptArchiveCloseAOC each
						
					Exit Rules						
						invoke FastUpdate PurchaseOrder
							invoked.LastActivityDate				= current corporate date
							invoked.LastUpdateDate					= current timestamp
							
						for each CommittedPurchaseOrderLineDistributionsRel
			
							invoke UpdateGLCommitmentIndirect each
								invoked.PrmFromCancel = true 
							
				CancelLineRemaining is an Instance Action
					restricted
					valid when (PurchaseOrderLineEligibleToBeCancelled)
					Parameters
						CancelFromPurchaseOrder		is Boolean
		        	Action Rules
		        		LocalCancelFromPurchaseOrder = true
		        		invoke CancelLine
							invoked.CancelFromPurchaseOrder	= CancelFromPurchaseOrder
        		UpdateLandedUnitCost is an Instance Action
					restricted
        			Parameters
        				PrmLandedUnitCost		is an InternationalCost
        			Action Rules
        				LandedUnitCost -= PrmLandedUnitCost
        				        		
        		Update is an Update Action
        			valid when  (ValidForReleasedUpdate)
        			completion message is "<CompletionMessage>"
        			Local Fields
        				LocalOldQuantity	is a Quantity
        				LocalLineCanceled	is Boolean
        				LocalPOLineSourceQuantity	is like Quantity
        				LocalMatchObjectID	is like ObjId
					Entrance Rules
				    	if (ItemType.Service and EnteredContractLine entered)
							ContractLine 	= EnteredContractLine
        			Action Rules

						constraint (!IsOnHold)
							"CannotUpdate;SentForApproval"
						if (ItemType.Service and EnteredContractLine entered)
							ContractLine 	= EnteredContractLine
                       	if (PurchaseOrderReceiptLinesRel exists
	                   	or  PayablesInvoiceDetailsByVendorRel exists)
							if (ItemType.Special and VendorItem changed)
    	                   		confirmation required
    	                   			"VendorItemWillAlsoBeUpdatedOnReceiptLineAndInvoiceLines.Continue?"
							else
							if (ItemType.Service and Description changed)
    	                   		confirmation required
    	                   			"DescriptionWillAlsoBeUpdatedOnReceiptLineAndInvoiceLines.Continue?"
        				
                        if (ReferencedContractHasHeaderCommitments)
	                    	constraint (not HasMultipleDistributions and first PurchaseOrderLineDistributionRel.DistributionAccount = Contract.CommitmentAccount)
	                        	"ReferencedContractHasHeaderCommitments.PurchaseOrderLineDistributionMustMatchContractHeaderCommitmentDistribution."




        				











                        	
        				if (old Quantity = CancelQuantity
        				or (ServiceCancelAmount entered
        				and ServiceCancelAmount = old EnteredUnitCost))
        					LocalLineCanceled = true
        				
        				if (not LocalVendorChange)
        					constraint (!LocalLineCanceled)
        						"CannotChange;Line<LineNumber>IsAlreadyFullyCanceled"
        					
        				if (Quantity < old Quantity)
        					display "QuantityHasBeenReduced;NeedToValidate"
        					constraint (old Quantity >= (ReceivedQuantity + CancelQuantity))
        						"CannotChange;Line<LineNumber>IsAlreadyFullyReceivedOrOverReceived"


						if (Issued)
							Revised		= true 








						
						LocalDistributionCode = old DistributionCode
						LocalBypassVendorUpdate = true	
						
						if (StandardCommentCode entered)
							include CreateCommentFromCommentCode												
						
						if (Contract changed)
							LocalOldContract 	 = old Contract
							LocalOldContractLine = old ContractLine
						else
							LocalOldContract 	 = Contract
							LocalOldContractLine = ContractLine
						
						include ItemReplacement

					Exit Rules
						if (EnteredBuyUOM changed)
							if (PurchaseOrderReceiptLinesRel exists)
                        		for each PurchaseOrderReceiptLinesRel


                        			initialize UOMCalculation
									UOMCalculation.InputUOM					= each.VendorBuyUOM
									UOMCalculation.InputToUOM				= EnteredBuyUOM
									UOMCalculation.InputUnitCost			= each.OriginalUnitCost
									UOMCalculation.Method					= UOMCalculation.Method.ConvertToAlternate
									
                        			invoke FastUpdate each
                        				invoked.OriginalUnitCost			= UOMCalculation.OutputUnitCost
                        				invoked.OpenToMatchQuantity 		= ReceivedQuantity
                        				if (each.VendorItem.VendorPriceUOM entered)
                        					invoked.VendorPriceUOM 			= each.VendorItem.VendorPriceUOM                        					
                        				else                        					
                        					invoked.VendorPriceUOM 			= VendorPriceUOM
                        				invoked.VendorBuyUOM 				= EnteredBuyUOM
                        				invoked.VendorPriceUOMMultiplier 	= VendorPriceUOMMultiplier
                        				invoked.VendorBuyUOMMultiplier 		= EnteredBuyUOMMultiplier
                        				invoked.BuyUOMQuantity 				= each.DerivedBuyUOMQuantity 
                        				invoked.VendorPriceUOMQuantity 		= VendorPriceUOMQuantity
						
						if (ReturnedQuantity not entered)
							include UpdatePurchaseOrderReceiptLineCost
							invoke  Unrelease
							if (not TransientByPassHeaderCallback)
								include UnreleasePurchaseOrder






        					
						if (DisplayOfProcedureInfo)
							include CheckPatientProcedure
							
						if  (CostOption.NoCharge)
							initialize VendorBuyUnitCost
							initialize EnteredUnitCost
							initialize VendorPriceUnitCost
						
						if (EnteredUnitCost changed	
						and POReceiptInvoiceLinkWithReceivedQuantityRel not exist)
						
							invoke GetNextMatchObjectID Company.MatchCompany
							LocalMatchObjectID = Company.MatchCompany.LastMatchObjectID
						
							invoke Create PurchaseOrderReceiptInvoiceLink
								invoked.Company				= Company
								invoked.PurchaseOrder		= PurchaseOrder
								invoked.PurchaseOrderLine	= PurchaseOrderLine
								invoked.PoCostUpd			= EnteredUnitCost
								invoked.Type				= "PO"
								invoked.PurchaseOrderReceiptInvoiceLink.MatchObjectID	= LocalMatchObjectID
								invoked.Status				= 1

						include CalculateLandedUnitCost
						include UpdateQuantitiesOrUnitCostOutsidePOLine
						include CreateOrDeleteDistributionFromDistributionCode
						
						include CalculateOpenPurchaseAmount
						include UpdateHeaderAmountsFromLine
						
						include CheckForBudgetAndCommitmentChanges

						if (ContractLine changed and ContractLine entered)
							include CopyContractLineComment
							
						include UpdateVendorItemAndDescriptionForReceiptAndInvoice

						if (Vendor changed 
						and PurchaseOrderLineAssetRel exists)
							invoke FastUpdate PurchaseOrderLineAssetRel 
								invoked.Vendor = Vendor

        		ReplaceItem is an Instance Action 
					restricted
        			valid when (ValidForCreateUpdate)
        			Parameters
        				ReplaceItem						is an Item
        				ReplaceItemType					is like ItemType
        				ReplaceDescription				is like Description
        				ReplaceVendorItem				is like VendorItem
        				ReplaceUOM						is a UnitOfMeasure
        				ReplaceCost						is an UnsignedUnitCost
        			Parameter Rules
        				ReplaceItem
        					constraint (Item != ReplaceItem)
        						"CannotUseReplaceItemFunction;NewItemSameAsOldItem"
        						
        				ReplaceItemType
							initial value is ItemType
        					constraint (not old ItemType.Inventoried and not ItemType.Inventoried)
        						"CannotReplaceItem;OldOrNewItemIsInventoryType" 
        				
        				ReplaceDescription
        					initial value is ReplaceItem.Description
        					default to ReplaceItem.Description
        					
        				ReplaceUOM
        					initial value is EnteredBuyUOM
        					
        				ReplaceCost
        					initial value is EnteredUnitCost
        					
        			Action Rules
        				constraint(ReceivedQuantity = 0) 
        					"ItemCannotBeReplaced;OriginalLineHasBeenReceived"
		        					
		        		constraint(PayablesInvoiceDetailsForPOLineRel not exists)
		        			"ItemCannotBeReplaced;OriginalLineHasBeenInvoiced"
        			        					
						invoke Released.Update
							invoked.Item						= ReplaceItem
	        				invoked.ItemType					= ReplaceItemType
	        				invoked.Description                 = ReplaceDescription 
	        				invoked.VendorItem					= ReplaceVendorItem
	        				invoked.EnteredBuyUOM				= ReplaceUOM
	        				invoked.EnteredUnitCost				= ReplaceCost
							invoked.LocalReplaceItemFlag		= true
							initialize invoked.Contract
	        				initialize invoked.ContractLine      

					Exit Rules
						include UnreleasePurchaseOrder
						initialize Released
						initialize Issued
								
						make transition to Unreleased 	

							
			Canceled is a State
				Close is an Instance Action
				
        		Update is an Update Action
        			Entrance Rules
						include InventoryLocationStatusValidation

			Closed is a State
				
				Update is an Update Action
					valid when (Company.ReopenPurchaseOrder)
					Local Fields
        				LocalOldQuantity	is a Quantity
        				LocalLineCanceled	is Boolean
						LocalPOLineSourceQuantity		is like Quantity
					Entrance Rules
						include InventoryLocationStatusValidation
        			Action Rules
        				constraint (Company.ReopenPurchaseOrderLine)
        					"CompanyDoesNotAllowChangesToAClosedPurchaseOrderLine"
        				
        				if (old Quantity = CancelQuantity
        				or (ServiceCancelAmount entered
        				and ServiceCancelAmount = old EnteredUnitCost))
        					LocalLineCanceled = true
        				
        				if (not LocalVendorChange)
	        				constraint (!LocalLineCanceled)
	        					"CannotChange;Line<LineNumber>IsAlreadyFullyCanceled"
        					
        				if (Quantity < LocalOldQuantity)
        					constraint (LocalOldQuantity >= (ReceivedQuantity + CancelQuantity))
        						"CannotChange;Line<LineNumber>IsAlreadyFullyReceivedOrOverReceived"
        								
        				if (StandardCommentCode entered)
        					include CreateCommentFromCommentCode

						if (Contract changed)
							LocalOldContract 	 = old Contract
							LocalOldContractLine = old ContractLine
						else
							LocalOldContract = Contract
							LocalOldContractLine = ContractLine

        			Exit Rules

						invoke Closed.ReOpenPurchaseOrderLine
        				LocalReopenClosed = true
						include CalculateLandedUnitCost
        				include CalculateOpenPurchaseAmount
        				include UpdateQuantitiesOrUnitCostOutsidePOLine 
        				include CheckForBudgetAndCommitmentChanges
        				if (ContractLine changed and ContractLine entered)
							include CopyContractLineComment
							
						invoke UpdateForFieldRules PurchaseOrderLineDistribution set

						include UpdateHeaderAmountsFromLine
				





				
				ReOpenPurchaseOrderLine is an Instance Action
					restricted
					valid when (Closed.Yes)
					Action Rules
						
						if (PurchaseOrder.PurchaseOrderLifeCycleState.Released
						or  PurchaseOrder.PurchaseOrderLifeCycleState.Closed)
							include UnreleasePurchaseOrder
						else
							invoke Unreleased.Update PurchaseOrder
								invoked.LocalUpdatedFromLine = true
							
						if (PurchaseOrder.VendorReturn entered)
							invoke Update VendorReturnRel
								invoked.Status = 2
								
						invoke Unrelease
					


			
			Historical is a State
FileCreationLogic.PurchaseOrderLine is a BusinessClass

	Persistent Fields
	
	Local Fields
		LocalFinanceEnterpriseGroup is like FinanceEnterpriseGroup
		LocalFileCreationSetup		is like FileCreationSetup
		LocalPurchasingCompany		is like PurchasingCompany
		LocalPurchaseOrder			is like PurchaseOrder	

	Relations
		FileCreationRecordNotProcessedRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 1
				related.Key1					= LocalPurchasingCompany
				related.Key2					= LocalPurchaseOrder

		FileCreationRecordErrorRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 2
				related.Key1					= LocalPurchasingCompany
				related.Key2					= LocalPurchaseOrder

	Derived Fields
				
	Actions

		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"PurchaseOrderLine_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"

			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
				FileCreationSetupPrm	is a FileCreationSetup
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				AllRecords				is Boolean
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3
				
			Local Fields
				LocalPurchaseOrderLineGroupSelection	is a PurchaseOrderLine group in subject FileCreationPurchaseOrderLine
				InPurchaseOrderGroup					is Boolean
				LocalPurchaseOrderGroupSelection		is a PurchaseOrder group in subject FileCreationPurchaseOrder

			Instance Selection
				where (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    ((FileCreationSetupPrm.ExportFile.PurchaseOrderLine
				and     (PrmNumberOfRunGroups <= 1
				or      PurchaseOrderLine % PrmNumberOfRunGroups = PrmRunGroup))
				or      (FileCreationSetupPrm.ExportFile.PurchaseOrder
				and     (PrmNumberOfRunGroups <= 1
				or      PurchaseOrder % PrmNumberOfRunGroups = PrmRunGroup)))
				and	   (AllRecords
				or	    (update stamp > BeginTimeStamp
				and	     update stamp <= EndTimeStamp)))

			Action Rules
				Instance Rules
					if (FileCreationSetupPrm.ExportFile.PurchaseOrderLine)
						LocalPurchaseOrderLineGroupSelection = FileCreationSetupPrm.EligibilityGroup
						if (LocalPurchaseOrderLineGroupSelection not entered
						or	PurchaseOrderLine within LocalPurchaseOrderLineGroupSelection)
							invoke Create FileCreationRecord
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
								invoked.FileCreationSetup	= FileCreationSetupPrm
								invoked.Key1				= Company
								invoked.Key2		        = PurchaseOrder
								invoked.Key3				= PurchaseOrderLine
								invoked.SystemTimeStamp		= EndTimeStamp
								invoked.EffectiveDate		= system current corporate date
								invoked.Status				= 1
					else
					if (FileCreationSetupPrm.ExportFile.PurchaseOrder)
						LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroupPrm
						LocalFileCreationSetup		= FileCreationSetupPrm
						LocalPurchasingCompany		= Company
						LocalPurchaseOrder			= PurchaseOrder
						LocalPurchaseOrderGroupSelection = FileCreationSetupPrm.EligibilityGroup
						if (FileCreationRecordNotProcessedRel not exist
						and	FileCreationRecordErrorRel not exist)
							LocalPurchaseOrderGroupSelection = FileCreationSetupPrm.EligibilityGroup
							if (LocalPurchaseOrderGroupSelection entered)
								InPurchaseOrderGroup = false
								if (PurchaseOrder within LocalPurchaseOrderGroupSelection)
									InPurchaseOrderGroup = true

							if (LocalPurchaseOrderGroupSelection not entered
							or  InPurchaseOrderGroup)
								invoke Create FileCreationRecord
									invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
									invoked.FileCreationSetup	= FileCreationSetupPrm
									invoked.Key1				= Company
									invoked.Key2		        = PurchaseOrder
									invoked.SystemTimeStamp		= EndTimeStamp
									invoked.EffectiveDate		= system current corporate date
									invoked.Status				= 1
