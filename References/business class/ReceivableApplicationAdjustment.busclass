ReceivableApplicationAdjustment is a BusinessClass
	owned by ar
	prefix is ADJ
	sql name is RApplicationAdjustment
	classic name is ARADJUST

	Ontology
		symbolic key is ReceivableApplicationAdjustment
			classic set name is ADJSET1
			sql name is RApplicationAdjustment
			classic name is ADJ-SEQ
			classic name for ReceivableApplication.BatchNumber is BATCH-NBR
			classic name for ReceivableApplication.ApplicationSequence is APP-SEQ

	Patterns
		implements StaticJava
		disable AuditIndex
		implements Archivable

	Persistent Fields

		AdjustmentAmount					is a FinanceCurrencyAmountGroup
			default label is "AdjustmentAmount"
			classic name for AdjustmentAmount.CurrencyAmount is ORIG-ADJ-AMT
			classic name for AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount is ADJ-AMT
		AdjustmentReason					is an ApplicationAdjustmentReason
			classic name is REASON-CODE
		ReceivableAdjustmentReasonType
			classic name is REASON-TYPE
		Description
			classic name is DESC

		ReviewStatus						is Numeric size 1
			States
				UnreleasedAdjustment		value is 0
				ReviewNeedsApproval			value is 2
				ApprovalCompleteOrNotNeeded	value is 4
				ChargebackProcessed			value is 5
				PendingApproval				value is 6
		CreateDate							is TimeStamp
		CreditAdjustAmount					is an InternationalAmount
			classic name is CR-ORIG-AJ-AMT
		AdjustSource						is an AcUsage
		ReceivableAdjustType				is AlphaUpper size 1
			classic name is ADJUST-TYPE
			States
				CreditMemoOrigin	value is "C"
				NonCreditMemoOrigin	value is "N"
				TransferOrigin		value is "P"
		Units								is a Unit
		BaseEarnedDiscountAmount			is an InternationalAmount
			classic name is EA-DISC-AMT
			precision is Company.Currency.NumberOfDecimals
		BaseUnEarnedDiscountAmount			is an InternationalAmount
			classic name is UE-DISC-AMT
			precision is Company.Currency.NumberOfDecimals
		AdjustFlag							is Numeric size 1
			States
				NoAdjustMaintenance	value is 0
				Accrued				value is 1
				Expensed			value is 2
		ReceivableInvoiceDisputeCode
			classic name is DISPUTE-CD
		ChargebackInvoiceDisputeCode		is a ReceivableInvoiceDisputeCode
			classic name is CB-DISPUTE-CD
		Adjusted							is Boolean
		DistributionAccount					is a FinanceCodeBlock



		ARIncomeWithholdingCode				is AlphaUpper size 10	
		ARIncomeWithholdingDocumentNumber	is AlphaUpper size 16	
		AdjustmentCreditTransaction
		ApprovalCode
		ApprovalLevel							is Numeric 8
		Approver								is a FinanceResource
		ApproverTeam							is a FinanceTeam
		ReassignToApprovalLevel					is an ApprovalCodeResource


		AdjustAmount					is a CurrencyAmount			
			classic name is ORIG-ADJ-AMT
			restricted												
		BaseAdjustAmount				is an InternationalAmount	
			classic name is ADJ-AMT
			precision is Company.Currency.NumberOfDecimals
			restricted												


	Context Fields






		RTMCompany							is a ReceivableCompany
		RTMPaymentHeader					is a ReceivablePaymentHeader
		RTMPayment
		ReceivableInvoiceRange				is an InvoiceRange
		DueDateRange						is a DateRange3
		ReceivableProcessLevelRange
		SalesRepresentativeRange
		TermsCodeRange
		TransUser1Range
		CustomerPurchaseOrderRange
		OpenAmountRange						is an AmountRange3  
		GeneralLedgerDateRange				is a DateRange
			default label is "GlobalLedgerDateRange"	
		ProjectRange
		AdjustAmountRange					is an AmountRange4
		CreditAnalyst
		CurrencyType


	Transient Fields
		TransientReversal				is Boolean
		TransientTransactionDate		is an ExchangeDate
		TransientPostingDate			is an PostingDate
		TransientAccountingEntity		is an AccountingEntity
			derive value from GeneralLedgerCompanyRel.AccountingEntity
		ApplicationCurrency				is a Currency
			derive value from ReceivableApplication.DerivedDebitCurrency
		TransientFromCurrency			is a FromCurrency
			derive value from ReceivableApplication.DerivedDebitCurrency
		SkipTransferToAPEdit			is Boolean
		CheckAccrual					is Boolean
		GainLoss						is Boolean
		Reversal						is Boolean

		Customer
			derive value from ReceivableApplication.DebitCustomer
		ReceivableProcessLevel
			derive value from ReceivableApplication.DerivedProcessLevel
		ReceivableReasonType
		ProcessDispute					is Boolean
		ApplicationSetToPost			is Boolean
		TransientCustomer				is like Customer
		SearchCurrency					is a Currency
		TransientSetToReviewed			is Boolean
		TransientDistributionAccount	is a TransactionCodeBlock	
		BypassProjectDateEdit	
		TransientNeedsApproval          is Boolean
			derive value from DerivedReviewStatus
		TransientFunctionalType  	is AlphaUpper 1  
			States
				CreditMemo 			    value is C
				DebitMemo  			    value is D
				Invoice    			    value is I
				CustomerPayment		    value is P
					default label is "CustomerPayment"
				BillOfExchangePayment	value is B
					default label is "BillOfExchangePayment"
			derive value from ReceivableApplication.TransType
		TransientGeneralLedgerDate		is Date
			derive value from DerivedGeneralLedgerDate
		TransientAttachment				is an Attachment
		TransientApprovalCode			is a ApprovalCode
		AdjustmentApprovalEmailSubject		is Alpha 255
			Text Variables
 				Company							value is ReceivableApplication.Company
				Adjustment						value is ReceivableApplicationAdjustment
 				TransType						value is ReceivableApplication.TransType
 				Invoice							value is ReceivableApplication.Invoice
 				AdjustmentAmount				value is ReceivableApplicationAdjustment.AdjustmentAmount.CurrencyAmount
				Customer						value is ReceivableApplicationAdjustment.Customer	
				Currency						value is ReceivableApplication.DerivedCreditCurrency
				AdjustmentReason				value is ReceivableApplicationAdjustment.AdjustmentReason
				ReasonType						value is ReceivableApplicationAdjustment.AdjustmentReason.ReceivableAdjustmentReasonType
		AdjustmentApprovalEmailContent		is RichText
			Text Variables
				Company							value is ReceivableApplication.Company
				Adjustment						value is ReceivableApplicationAdjustment
 				TransType						value is ReceivableApplication.TransType
 				Invoice							value is ReceivableApplication.Invoice
 				AdjustmentAmount				value is ReceivableApplicationAdjustment.AdjustmentAmount.CurrencyAmount
				Customer						value is ReceivableApplicationAdjustment.Customer	
				Currency						value is ReceivableApplication.DerivedCreditCurrency
				AppliedAmount					value is ReceivableApplication.CreditTransaction.CreditApplicationAmount.CurrencyAmount
				AdjustmentReason				value is ReceivableApplicationAdjustment.AdjustmentReason
				ReasonType						value is ReceivableApplicationAdjustment.AdjustmentReason.ReceivableAdjustmentReasonType
		AdjustmentApprovedEmailSubject		is Alpha 255
			Text Variables
				Company							value is ReceivableApplication.Company
				Adjustment						value is ReceivableApplicationAdjustment
 				TransType						value is ReceivableApplication.TransType
 				Invoice							value is ReceivableApplication.Invoice
 				AdjustmentAmount				value is ReceivableApplicationAdjustment.AdjustmentAmount.CurrencyAmount
				Customer						value is ReceivableApplicationAdjustment.Customer	
				Currency						value is ReceivableApplication.DerivedCreditCurrency
				AdjustmentReason				value is ReceivableApplicationAdjustment.AdjustmentReason
				ReasonType						value is ReceivableApplicationAdjustment.AdjustmentReason.ReceivableAdjustmentReasonType
		AdjustmentApprovedEmailContent		is RichText
			Text Variables
				Company							value is ReceivableApplication.Company
				Adjustment						value is ReceivableApplicationAdjustment
 				TransType						value is ReceivableApplication.TransType
 				Invoice							value is ReceivableApplication.Invoice
 				AdjustmentAmount				value is ReceivableApplicationAdjustment.AdjustmentAmount.CurrencyAmount
				Customer						value is ReceivableApplicationAdjustment.Customer	
				Currency						value is ReceivableApplication.DerivedCreditCurrency
				AppliedAmount					value is ReceivableApplication.CreditTransaction.CreditApplicationAmount.CurrencyAmount
				AdjustmentReason				value is ReceivableApplicationAdjustment.AdjustmentReason
				ReasonType						value is ReceivableApplicationAdjustment.AdjustmentReason.ReceivableAdjustmentReasonType
		AdjustmentRejectEmailSubject		is Alpha 255
			Text Variables
				Company							value is ReceivableApplication.Company
				Adjustment						value is ReceivableApplicationAdjustment
 				TransType						value is ReceivableApplication.TransType
 				Invoice							value is ReceivableApplication.Invoice
 				AdjustmentAmount				value is ReceivableApplicationAdjustment.AdjustmentAmount.CurrencyAmount
				Customer						value is ReceivableApplicationAdjustment.Customer	
				Currency						value is ReceivableApplication.DerivedCreditCurrency
				AdjustmentReason				value is ReceivableApplicationAdjustment.AdjustmentReason
				ReasonType						value is ReceivableApplicationAdjustment.AdjustmentReason.ReceivableAdjustmentReasonType
		AdjustmentRejectEmailContent		is RichText
			Text Variables
				Company							value is ReceivableApplication.Company
				Adjustment						value is ReceivableApplicationAdjustment
 				TransType						value is ReceivableApplication.TransType
 				Invoice							value is ReceivableApplication.Invoice
 				AdjustmentAmount				value is ReceivableApplicationAdjustment.AdjustmentAmount.CurrencyAmount
				Customer						value is ReceivableApplicationAdjustment.Customer	
				Currency						value is ReceivableApplication.DerivedCreditCurrency
				AppliedAmount					value is ReceivableApplication.CreditTransaction.CreditApplicationAmount.CurrencyAmount
				AdjustmentReason				value is ReceivableApplicationAdjustment.AdjustmentReason
				ReasonType						value is ReceivableApplicationAdjustment.AdjustmentReason.ReceivableAdjustmentReasonType
		TransientAdjustmentAmount			is like InternationalAmount
			derive value from DerivedAdjustmentAmount
		TransientReversedAdjustmentAmount	is like InternationalAmount
			derive value from DerivedReversedAdjustmentAmount

	Local Fields
		LocalGeneralLedgerSystemCode	is a GeneralLedgerSystemCode
		LocalCurrencyTable				is a CurrencyTable
		AvailableDiscount				is an InternationalAmount
		CalculateDiscountDate			is Date
		EarnedDiscountDate				is Date
		I9								is Numeric 3
		AbsoluteAdjustAmount			is an InternationalAmount
		WorkAmount						is an InternationalAmount
		WorkAmount2						is an InternationalAmount
		CurrencyWork					is a FromCurrencyExchangeGroup
		LocalSumCashDetailAmountGroup	is like FinanceCurrencyAmountGroup
		LocalCurrency					is like Currency
		Earned							is Boolean
		WorkDate						is Date
		LocalTrigger					is Alpha size 1
		CalculateReceivableYearPeriod
		NextSentence					is Boolean

		LocalPrmComment					is a Description
		LocalOpenTransAmount			is an InternationalAmount 
		LocalPaymentApplicationAmount	is like InternationalAmount
		LocalSumDetailApplyAmounts		is like InternationalAmount
		LocalPaymentAmountRemaining		is like InternationalAmount
		LocalDetailAmountToAdd			is like InternationalAmount
		LocalDetailDifference			is like InternationalAmount
		LocalDetailAdjustmentPercent	is a Percent
		LocalApprovalCode				is like ApprovalCode
		LocalApprovalLevel				is Numeric 8
		LocalApprover					is a FinanceResource
		LocalApproverTeam				is a FinanceTeam
		LocalApproverList				is Alpha 250
		LocalFirstApproverAssigned		is Boolean
		LocalComment					is Alpha size up to 500
		LocalRejectReason				is AlphaUpper 20
		LocalActor						is an Actor
		LocalFinanceResource			is a FinanceResource
		LocalCounter 					is Numeric size 3
		

		LocalTaxSequenceNumber			is Alpha size 30
		LocalMainUserTemplate			is Alpha size 250
		LocalTriggerFrom				is Alpha size 100
		NativeLPLBODTrigger				is Boolean


	Rule Blocks

		ConvertAmounts






			if  (TransientFromCurrency not entered)
				TransientFromCurrency = ReceivableApplication.DerivedDebitCurrency

			AdjustmentAmount.FunctionalAmount.ToCurrency			= ReceivableApplication.ApplicationAmount.FunctionalAmount.ToCurrency
			AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableApplication.ApplicationAmount.FunctionalAmount.EnteredCurrencyRate
			AdjustmentAmount.ExchangeDate							= ReceivableApplication.ApplicationAmount.ExchangeDate
			AdjustmentAmount.KeepRateOnly							= true



			if  (AdjustmentAmount.FunctionalAmount.ToCurrency not entered)
				if (ReceivableApplication.TransType.CustomerPayment)
					AdjustmentAmount.FunctionalAmount.ToCurrency			= ReceivableApplication.ReceivablePaymentDebitRel.Company.Currency
				else
					AdjustmentAmount.FunctionalAmount.ToCurrency			= ReceivableApplication.ReceivableInvoiceDetailRel.Company.Currency

			if (AdjustmentAmount.CurrencyAmount not entered
			or  CreditAdjustAmount changed)


				if (ApplicationCurrency not entered)
					ApplicationCurrency = ReceivableApplication.DerivedCreditCurrency


				if (!ReceivableInvoiceDetailRel exists)
					if (ReceivablePaymentRel.OriginalCurrency != ApplicationCurrency)
						CurrencyWork.TransactionAmount							= CreditAdjustAmount
						CurrencyWork.FromCurrency								= ApplicationCurrency
						CurrencyWork.BaseAmount.ToCurrency						= ReceivablePaymentRel.OriginalCurrency
						AdjustmentAmount.CurrencyAmount							= CurrencyWork.BaseAmount.OutputCurrencyAmount
					else
						AdjustmentAmount.CurrencyAmount							= CreditAdjustAmount
				else
				if (ReceivableInvoiceDetailRel.OriginalCurrency != ApplicationCurrency)
					CurrencyWork.TransactionAmount								= CreditAdjustAmount
					CurrencyWork.FromCurrency									= ApplicationCurrency
					CurrencyWork.BaseAmount.ToCurrency							= ReceivableInvoiceDetailRel.OriginalCurrency
					if (AdjustmentAmount.ExchangeDate entered)
						TransientTransactionDate							= ReceivableApplication.CreditTransaction.CreditApplicationAmount.ExchangeDate 
					else
						TransientTransactionDate							= current corporate date
					AdjustmentAmount.CurrencyAmount								= CurrencyWork.BaseAmount.OutputCurrencyAmount
				else
					AdjustmentAmount.CurrencyAmount								= CreditAdjustAmount











				if (ReceivableApplication.IsCreditTypePayment)
					if (ReceivablePaymentRel.OriginalCurrency != ApplicationCurrency)
						CurrencyWork.TransactionAmount							= CreditAdjustAmount
						CurrencyWork.FromCurrency								= ApplicationCurrency
						CurrencyWork.BaseAmount.ToCurrency						= ReceivablePaymentRel.OriginalCurrency
						CreditAdjustAmount										= CurrencyWork.BaseAmount.OutputCurrencyAmount


			if (Company.DetailedRNADistributions
			and ReceivableApplication.HasPaymentCashDetail
			and ReceivableApplication.CreditTransaction.CreditType.Payment
			and ReceivableApplication.TransType.CustomerPayment)
				constraint (ReceivablePaymentRel.CashDetailState.Released)
					"Payment_\Cash_\DetailsMustBeReleased.UseThe_\Release_\Cash_\DetailsAction."



		CommonEdits

			if (ParentContext not entered)
				constraint (!GainLossAdjustment)
					"ChangesNotAllowedForGainLossAdjustments"
				constraint (!AdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
					"ChangesNotAllowedForReasonTypeTransfer"

			constraint (!ReceivableApplication.ReceivableInvoiceDetailRel.ReceivablePendingAdjustment2Rel exists)
				"CannotChange;PendingAdjustmentExistsForInvoice<ReceivableApplication.ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice>"

			constraint (!ReceivableApplication.Status.ApplicationPosted
			or			ApplicationSetToPost = true )
				"InqiureOnly;ApplicationPosted"

			if (!ReceivableInvoiceDetailRel exists
			or  !ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo)
				constraint (ReceivableApplication.ApplicationAmount.CurrencyAmount >= 0)
					"AppliedAmountCannotBeNegative"

			if (!ReceivableApplication.ApplicationSource.GroupedMemo)
				if (!ReceivableApplication.Writeoff)
					constraint (ReceivableApplication.ApplicationAmount.CurrencyAmount entered)
						"AppliedAmountRequired"






			if (!SkipTransferToAPEdit)
				constraint (!ReceivableApplication.ApplicationSource.TransferToAP)
					"CannotChange;TransactionTransferredToAccountsPayable"

			if (ReceivableApplication.Status.AvailableForPosting)
				constraint (!ReceivableApplication.Reverse)
					"ReversalApplicationCannotBeChanged"



		ReviewStatusAndCheckDiscount

			initialize ReviewStatus

			include CheckEarnedDiscount

			if (TransientSetToReviewed)
				ReviewStatus										= 4
			else
			if (AdjustmentReason.Review not entered)
				ReviewStatus										= 4
			else
			if (AdjustmentReason.Review.ReviewAlways)
				ReviewStatus										= 2
			else
			if (AdjustmentReason.Review.ConditionalReviewRequired)

				initialize AbsoluteAdjustAmount
				if (AdjustmentReason.AdjustmentAmountReviewLimit entered
				or  AdjustmentReason.AdjustmentAmountReviewPercent entered)
					if (AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount > 0)
						AbsoluteAdjustAmount = AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
					else
						AbsoluteAdjustAmount = AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1


				if  ((AdjustmentReason.AdjustmentAmountReviewLimit entered
				and  AbsoluteAdjustAmount > AdjustmentReason.AdjustmentAmountReviewLimit)
				or  (AdjustmentReason.AdjustmentAmountReviewPercent entered
				and  (AbsoluteAdjustAmount / ReceivableApplication.ReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount > AdjustmentReason.AdjustmentAmountReviewPercent)))

					ReviewStatus								= 2
				else

					ReviewStatus								= 4
			else
			if  (AdjustmentReason.Review.OptionalDiscountReview
			and  AdjustmentReason.ReceivableAdjustmentReasonType.Discount)
				if (EarnedDiscountDate not entered)
					ReviewStatus							= 2
				else
				if  (ReceivableApplication.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + ReceivableApplication.TotalAdjustments != ReceivableInvoiceDetailRel.OpenAmount)
					ReviewStatus							= 2
				else
				if  (ReceivableApplication.ReceivableApplication.TransType.CustomerPayment
				and ((EarnedDiscountDate + ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays) < ReceivableApplication.ReceivablePaymentRel.ReceivablePaymentHeader.DepositDate))
					ReviewStatus							= 2
				else
				if  (ReceivableApplication.ReceivableApplication.TransType.BillOfExchangePayment
				and ((EarnedDiscountDate + ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays) < ReceivableApplication.ReceivablePaymentRel.ReceivablePaymentHeader.DepositDate))
					ReviewStatus							= 2
				else
				if  (ReceivableApplication.ReceivableApplication.TransType.CreditMemo
				and ((EarnedDiscountDate + ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays) < ReceivableApplication.GeneralLedgerDate))
					ReviewStatus							= 2
				else
					ReviewStatus							= 4

			if (ReviewStatus not entered)
				if (DistributionAccount.Project entered
				and DistributionAccount.Project.ProjectType.Summary)
					ReviewStatus									= 2

			include CreateUpdateCashDetailApplication

		CheckEarnedDiscount

			initialize AvailableDiscount
			initialize EarnedDiscountDate
			initialize Earned

			if (ReceivableApplication.CreditTransaction.CreditType.Payment)
				CalculateDiscountDate = ReceivableApplication.ReceivablePaymentRel.ReceivablePaymentHeader.DepositDate
			else
				CalculateDiscountDate = ReceivableApplication.ReceivableCreditInvoiceDetailRel.GeneralLedgerDate




			I9 = 1
			while ((I9 <= 3)
			and	!Earned
			and	 ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] entered)
				WorkDate = ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9] + ReceivableInvoiceDetailRel.CompanyCustomerRel.ApplicationDiscountGraceDays



				if (ReceivableApplication.CreditTransaction.CreditType.Payment
				or  ReceivableApplication.CreditTransaction.CreditType.CreditMemo)

					if (WorkDate >= CalculateDiscountDate)
						Earned = true
						EarnedDiscountDate = ReceivableInvoiceDetailRel.DiscountDate.DiscDate[I9]
						if (ReceivableInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9] not entered)
							AvailableDiscount = ((ReceivableInvoiceDetailRel.DiscountPercent.DiscPct[I9] * ReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount) - ReceivableInvoiceDetailRel.TotalEarnedDiscount)
						else
							AvailableDiscount = ReceivableInvoiceDetailRel.DiscountAmount.OrigDiscAmt[I9] - ReceivableInvoiceDetailRel.TotalEarnedDiscount

						if (AvailableDiscount <= 0)
							BaseUnEarnedDiscountAmount = AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						else
						if (AvailableDiscount >= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)
							BaseEarnedDiscountAmount = AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						else
							BaseEarnedDiscountAmount = AvailableDiscount
							BaseUnEarnedDiscountAmount = AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount - AvailableDiscount

				I9 +=1

			if (!Earned)
				BaseUnEarnedDiscountAmount = AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount

		CreateUpdateCashDetailApplication 
			if (Company.DetailedRNADistributions
			and ReceivableApplication.HasPaymentCashDetail
			and ReceivableApplication.CreditTransaction.CreditType.Payment
			and ReceivableApplication.TransType.CustomerPayment
			and not ReceivableApplication.ApplicationSource.ReversalOfApplications)
				if (action type.Update)
					invoke Delete ReceivableApplication.CashDetailApplicationRel
				
				LocalPaymentAmountRemaining = AdjustmentAmount.CurrencyAmount
				if (ReceivableApplication.ReceivablePaymentRel.PaymentOpen = 0)
					for each ReceivableApplication.ReceivablePaymentRel.ReceivablePaymentCashDetail set
						if (each.OpenAmount > 0)
							invoke Create CashDetailApplication
								invoked.Company												= ReceivableApplication.CreditTransaction.CreditCompany
								invoked.ReceivablePaymentHeader								= ReceivableApplication.CreditTransaction.CreditBatch
								invoked.ReceivablePayment									= ReceivableApplication.CreditTransaction.CreditSequence
								invoked.ReceivablePaymentCashDetail							= each.ReceivablePaymentCashDetail
								invoked.CashDetailApplicationGroup.Company					= Company
								invoked.CashDetailApplicationGroup.ReceivableApplication	= ReceivableApplication
								invoked.DistributionAmount.CurrencyAmount					= each.OpenAmount
								invoked.DistributionAmount.ExchangeDate						= ReceivableApplication.CreditTransaction.CreditApplicationAmount.ExchangeDate
								invoked.ApplicationPostDate									= ReceivableApplication.GeneralLedgerDate
								if (ReceivableAdjustType.TransferOrigin)
									invoked.ApplicationSource								= "T"
								else
									invoked.ApplicationSource								= "A"
				else
					initialize LocalSumDetailApplyAmounts
					for each ReceivableApplication.ReceivablePaymentRel.ReceivablePaymentCashDetail set
						if (each.OpenAmount > 0)
							LocalDetailAdjustmentPercent 	= (each.OpenAmount / ReceivableApplication.ReceivablePaymentRel.PaymentOpen)
							LocalPaymentApplicationAmount	= AdjustmentAmount.CurrencyAmount * LocalDetailAdjustmentPercent
							round LocalPaymentApplicationAmount to nearest ReceivableApplication.DerivedCurrencyRoundTo

							if (LocalPaymentApplicationAmount > 0
							and LocalPaymentApplicationAmount > each.OpenAmount)
								LocalPaymentApplicationAmount = each.OpenAmount

							if (LocalPaymentApplicationAmount != 0)
								LocalSumDetailApplyAmounts += LocalPaymentApplicationAmount
								invoke Create CashDetailApplication
									invoked.Company												= ReceivableApplication.CreditTransaction.CreditCompany
									invoked.ReceivablePaymentHeader								= ReceivableApplication.CreditTransaction.CreditBatch
									invoked.ReceivablePayment									= ReceivableApplication.CreditTransaction.CreditSequence
									invoked.ReceivablePaymentCashDetail							= each.ReceivablePaymentCashDetail
									invoked.CashDetailApplicationGroup.Company					= Company
									invoked.CashDetailApplicationGroup.ReceivableApplication	= ReceivableApplication
									invoked.DistributionAmount.CurrencyAmount					= LocalPaymentApplicationAmount
									invoked.DistributionAmount.ExchangeDate						= ReceivableApplication.CreditTransaction.CreditApplicationAmount.ExchangeDate
									invoked.ApplicationPostDate									= ReceivableApplication.GeneralLedgerDate
									if (ReceivableAdjustType.TransferOrigin)
										invoked.ApplicationSource								= "T"
									else
										invoked.ApplicationSource								= "A"

					if (LocalPaymentAmountRemaining != LocalSumDetailApplyAmounts)
						LocalDetailDifference = LocalPaymentAmountRemaining - LocalSumDetailApplyAmounts
						for each ReceivableApplication.CashDetailApplicationRel
							if (each.DistributionAmount.CurrencyAmount entered)
								if (LocalDetailDifference <= each.ReceivablePaymentCashDetail.OpenAmount)
									LocalDetailAmountToAdd = LocalDetailDifference
									LocalDetailDifference  = 0
								else
									LocalDetailAmountToAdd = each.ReceivablePaymentCashDetail.OpenAmount
									LocalDetailDifference -= each.ReceivablePaymentCashDetail.OpenAmount
								
								if (each.DistributionAmount.CurrencyAmount + LocalDetailAmountToAdd = 0)
									invoke Delete each
								else
									invoke Update each
										invoked.DistributionAmount.CurrencyAmount 	= each.DistributionAmount.CurrencyAmount + LocalDetailAmountToAdd
								
								if (LocalDetailDifference = 0)
									end for each
				
				initialize LocalSumCashDetailAmountGroup
				for each ReceivableApplication.CashDetailApplicationRel
					LocalSumCashDetailAmountGroup.CurrencyAmount 							+= each.DistributionAmount.CurrencyAmount
					LocalSumCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount 	+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	+= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	+= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount 	+= each.DistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount.EnteredCurrencyAmount 	+= each.DistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount 	+= each.DistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount 	+= each.DistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ProjectAmount.EnteredCurrencyAmount 		+= each.DistributionAmount.ProjectAmount.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
					LocalSumCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount 		+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

				constraint (LocalSumCashDetailAmountGroup.CurrencyAmount = AdjustmentAmount.CurrencyAmount) 
					"CashDetailApplicationsAreLessThanApplicationAdjustmentAmount"

				LocalSumCashDetailAmountGroup.CurrencyAmount 							= AdjustmentAmount.CurrencyAmount - LocalSumCashDetailAmountGroup.CurrencyAmount 
				LocalSumCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.FunctionalAmount.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount 	= AdjustmentAmount.AlternateAmount.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.AlternateAmount.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	= AdjustmentAmount.AlternateAmount2.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.AlternateAmount2.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	= AdjustmentAmount.AlternateAmount3.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.AlternateAmount3.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount 	= AdjustmentAmount.ToFunctionalAmount.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ToAlternateAmount.EnteredCurrencyAmount 	= AdjustmentAmount.ToAlternateAmount.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ToAlternateAmount.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount 	= AdjustmentAmount.ToAlternateAmount2.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount 	= AdjustmentAmount.ToAlternateAmount3.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ProjectAmount.EnteredCurrencyAmount 		= AdjustmentAmount.ProjectAmount.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ProjectAmount.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount 		= AdjustmentAmount.ReportAmount1.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount1.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount 		= AdjustmentAmount.ReportAmount2.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount2.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount 		= AdjustmentAmount.ReportAmount3.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount3.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount 		= AdjustmentAmount.ReportAmount4.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount4.EnteredCurrencyAmount
				LocalSumCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount 		= AdjustmentAmount.ReportAmount5.EnteredCurrencyAmount - LocalSumCashDetailAmountGroup.ReportAmount5.EnteredCurrencyAmount

				invoke RoundingUpdate ReceivableApplication.last CashDetailApplicationRel
					invoked.PrmRoundAmount = LocalSumCashDetailAmountGroup


		DeleteEntranceRules	
			LocalOpenTransAmount =	(ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount	
									-(ReceivableInvoiceDetailRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount	
									+ReceivableInvoiceDetailRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)	
									+AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)	
			if (!ReceivableApplication.PaymentWriteoff)	





				constraint (LocalOpenTransAmount >= 0)	
					"CannotDelete;OpenAmountWillResultInNegativeAmount"	

		InitiateApprovalProcessFlow
			initiate ReceivableApplicationAdjustmentApproval process
				title is "ApproveApplicationAdjustment<ReceivableReasonRel.ReceivableReason>For<ReceivableApplication.TransType>_<ReceivableApplication.Invoice>"
				Variables
					Company
					ReceivableApplication
					ReceivableApplicationAdjustment
				URLs
					"<linkback(webapp is JournalApprover navigation is ProcessFlowForm text is \"ViewReceivableApplicationAdjustment\")>"

		GetNextEscalationApprovalLevel
			LocalApprovalCode		= ApprovalCode
			LocalApprovalLevel		= ApprovalLevel
			if (first LocalApprovalCodeLevelRel.EscalateTo.NextApprovalLevel)
				LocalApprovalLevel	= ApprovalLevel + 1
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
			else
				LocalApprovalLevel	= first LocalApprovalCodeLevelRel.EscalationApprovalLevel.ApprovalLevel
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam

			include ApproverEmailNotification  
		
		GetNextApprovalLevel
			if (ApprovalLevel < 1)
				LocalApprovalLevel	= first ApprovalCodeResourceRel.ApprovalLevel
				LocalApprover		= first ApprovalCodeResourceRel.Approver
				LocalApproverTeam	= first ApprovalCodeResourceRel.ApprovalTeam
			else
				LocalApprovalCode		= ApprovalCode
				LocalApprovalLevel		= ApprovalLevel + 1
				if (LocalApprovalCodeLevelRel exists)
					LocalApprovalLevel	= first LocalApprovalCodeLevelRel.ApprovalLevel
					LocalApprover		= first LocalApprovalCodeLevelRel.Approver
					LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
				else
					initialize LocalApprovalCode
					initialize LocalApprovalLevel
					initialize LocalApprover
					initialize LocalApproverTeam
			
			if (LocalApprovalLevel entered)
				include ApproverEmailNotification
		
		GetNextTransientApprovalLevel
			if (LocalApprovalLevel < 1)
				LocalApprovalLevel	= first TransientApprovalCodeLevelRel.ApprovalLevel
			else
				LocalApprovalCode		= TransientApprovalCode
				LocalApprovalLevel		= LocalApprovalLevel + 1
				if (LocalApprovalCodeLevelRel exists)
					LocalApprovalLevel	= first LocalApprovalCodeLevelRel.ApprovalLevel
				else
					initialize LocalApprovalLevel
		
		BuildTeamApproverActorList
			LocalApproverList = ""
			LocalFirstApproverAssigned = false
			for each FinanceTeamMembersFromCurrentApprovalLevelRel
				if (LocalFirstApproverAssigned)
					LocalApproverList = LocalApproverList + "," + each.FinanceTeamMember.TeamMember.FinanceResourceActor
				else
					LocalApproverList = each.FinanceTeamMember.TeamMember.FinanceResourceActor
					LocalFirstApproverAssigned = true

		ApproverEmailNotification
			if (LocalApprover entered)
				send email
					to		LocalApprover.EmailAddress
					from	actor.agent(Employee).EmployeeWorkEmailAddress
					subject "<DerivedAdjustmentApprovalEmailSubject>"
					Attachments
						if (Company.CustomerGroupField.CustomerGroup.AdjustmentApprovalIncludeRelatedDocs)
							for each ReceivableApplicationAdjustmentAttachmentRel
								attachment each.Attachment.File
									name is each.Attachment.Title
									mime type is each.Attachment.MimeType
					Contents
						"<DerivedAdjustmentApprovalEmailContent>"
						"Company:_<Company.RepresentativeText>,_Customer:_<Customer.RepresentativeText>"
						"Adjustment_Amount:_<AdjustmentAmount.CurrencyAmount>_<ReceivableApplication.DerivedCreditCurrency>"
						"Applied_Amount:_<ReceivableApplication.CreditTransaction.CreditApplicationAmount.CurrencyAmount>_<ReceivableApplication.DerivedCreditCurrency>"
						"Debits_:_<ReceivableApplication.TransType>,_<ReceivableApplication.Invoice>,_Amount:_<ReceivableApplication.ApplicationAmount.CurrencyAmount>_<ReceivableApplication.DerivedDebitCurrency>"
						"Credits:_<ReceivableApplication.CreditTransaction.CreditType>,_<ReceivableApplication.CreditTransaction.CreditNumber>,_Amount:_<ReceivableApplication.CreditTransaction.CreditApplicationAmount.CurrencyAmount>_<ReceivableApplication.DerivedCreditCurrency>"
						"<DerivedEmailLink>"
			else
			if (LocalApproverTeam entered)
				for each SendToTeamMembersRel
					send email
						to		each.FinanceTeamMember.TeamMember.EmailAddress
						from	actor.agent(Employee).EmployeeWorkEmailAddress
						subject "<DerivedAdjustmentApprovalEmailSubject>"
						Attachments
							if (Company.CustomerGroupField.CustomerGroup.AdjustmentApprovalIncludeRelatedDocs)
								for each ReceivableApplicationAdjustmentAttachmentRel
									attachment each.Attachment.File
										name is each.Attachment.Title
										mime type is each.Attachment.MimeType
						Contents
							"<DerivedAdjustmentApprovalEmailContent>"
							"Company:_<Company.RepresentativeText>,_Customer:_<Customer.RepresentativeText>"
							"Adjustment_Amount:_<AdjustmentAmount.CurrencyAmount>_<ReceivableApplication.DerivedCreditCurrency>"
							"Applied_Amount:_<ReceivableApplication.CreditTransaction.CreditApplicationAmount.CurrencyAmount>_<ReceivableApplication.DerivedCreditCurrency>"
							"Debits_:_<ReceivableApplication.TransType>,_<ReceivableApplication.Invoice>,_Amount:_<ReceivableApplication.ApplicationAmount.CurrencyAmount>_<ReceivableApplication.DerivedDebitCurrency>"
							"Credits:_<ReceivableApplication.CreditTransaction.CreditType>,_<ReceivableApplication.CreditTransaction.CreditNumber>,_Amount:_<ReceivableApplication.CreditTransaction.CreditApplicationAmount.CurrencyAmount>_<ReceivableApplication.DerivedCreditCurrency>"
							"<DerivedEmailLink>"

		RejectionEmailNotification
			send email
				to		CreateActorRel.ContactInfo.EmailAddress
				from	actor.agent(Employee).EmployeeWorkEmailAddress
				subject "<DerivedAdjustmentRejectEmailSubject>"
				Attachments
					if (Company.CustomerGroupField.CustomerGroup.AdjustmentRejectIncludeRelatedDocs)
						for each ReceivableApplicationAdjustmentAttachmentRel
							attachment each.Attachment.File
								name is each.Attachment.Title
								mime type is each.Attachment.MimeType
				Contents
						"<DerivedAdjustmentRejectEmailContent>"
						"Company:_<Company.RepresentativeText>,_Customer:_<Customer.RepresentativeText>"
						"Adjustment_Amount:_<AdjustmentAmount.CurrencyAmount>_<ReceivableApplication.DerivedCreditCurrency>"
						"RejectedOn_<current timestamp>_By_<actor.agent(Employee).FirstLastName>"
						"Comment:<LocalComment>"
						"<DerivedRejectionReason>"
		
		ApprovedEmailNotification
			send email
				to      CreateActorRel.ContactInfo.EmailAddress
				from	actor.agent(Employee).EmployeeWorkEmailAddress
				subject "<DerivedAdjustmentApprovedEmailSubject>"
				Attachments
					if (Company.CustomerGroupField.CustomerGroup.AdjustmentApprovedIncludeRelatedDocs)
						for each ReceivableApplicationAdjustmentAttachmentRel
							attachment each.Attachment.File
								name is each.Attachment.Title
								mime type is each.Attachment.MimeType
				Contents
						"<DerivedAdjustmentApprovedEmailContent>"
						"Company:_<Company.RepresentativeText>,_Customer:_<Customer.RepresentativeText>"
						"Adjustment_Amount:_<AdjustmentAmount.CurrencyAmount>_<ReceivableApplication.DerivedCreditCurrency>"
						"ApprovedOn_<current timestamp>_By_<actor.agent(Employee).FirstLastName>"
						

	Derived Fields

		SelectedForPendingAdjustment	is a DerivedField
			type is Alpha 3  
			if (HasReceivablePendingAdjustment)
				return "Yes"  

		ReviewMessage					is a MessageField
			restricted
			"Review"

		AccruedMessage					is a MessageField
			restricted
			"Accrued"

		PostedMessage					is a MessageField
			restricted
			"Posted"

		ReviewAdjustmentsForApplicationListTitle is a MessageField
			"Adjustments_For_<ReceivableApplication.TransType>_<ReceivableApplication.Invoice>"

		DerivedAccrued					is a DerivedField
			type is Alpha 10
			if (AdjustFlag.Accrued)
				return AccruedMessage

		DerivedReview					is a DerivedField
			type is Alpha 10
			if (ReviewStatus.ReviewNeedsApproval
			or  ReviewStatus.PendingApproval
			or (ReviewStatus.UnreleasedAdjustment
			and HasApprovalHistory))
				return ReviewMessage

		DerivedPosted					is a DerivedField
			type is Alpha 10
			if (ReceivableApplicationRel.Status.ApplicationPosted)
				return PostedMessage

		DerivedDisplayCurrency			is a DerivedField
			type is like Currency
			restricted

			LocalCurrency = actor.context.Currency
			if (LocalCurrency entered)
				return LocalCurrency
			if (ReceivablePaymentRel exists)

				return ReceivablePaymentRel.OriginalCurrency


			return ReceivableApplication.CreditTransaction.DerivedCreditCurrency

		ParentContext					is a DerivedField
			type is Alpha 50
			restricted
			return parentcontext.name

		DerivedApplicationLimit			is a DerivedField
			type is like InternationalAmount

			if  (AdjustmentReason.AdjustmentAmountReviewLimit entered)
				return AdjustmentReason.AdjustmentAmountReviewLimit
			else
			if  (ReceivableApplication.TransType.CustomerPayment)
				return (AdjustmentReason.AdjustmentAmountReviewPercent * ReceivableApplication.ReceivablePaymentDebitRel.TransactionAmount)
			else
				return (AdjustmentReason.AdjustmentAmountReviewPercent * ReceivableApplication.ReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount)

		SelectedForRTM					is a DerivedField
			type is Alpha 3  
			if (HasRTMPaymentAdjustment)
				return "Yes"  

		DerivedBalanceType				is a DerivedField
			type is Numeric 2
			restricted
			if (AdjustmentReason.ReceivableAdjustmentReasonType.Chargeback)
				return 4	
			else
			if (AdjustmentReason.ReceivableAdjustmentReasonType.Discount)
				return 5	
			else
			if (AdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
				return 6	
			else
			if (AdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
				return 7	
			else
			if (AdjustmentReason.ReceivableAdjustmentReasonType.Grouping)
				return 8	
			else	
			if (AdjustmentReason.ReceivableAdjustmentReasonType.MarkAsPaid)	
				return 13	
			else
			if (AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
				return 14   
			else	
			if (AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				return 15	


		DerivedAdjustmentType			is a ConditionalField
			type is Alpha 10
			restricted
			if (AdjustmentReason.ReceivableAdjustmentReasonType.Chargeback)
				"Payment"
			else
			if (AdjustmentReason.ReceivableAdjustmentReasonType.Discount)
				if (ReceivableInvoiceByRecInvoiceTypeRel.AlternateReceivableInvoiceType.Invoice)
					"Invoice"
				else
				if (ReceivableInvoiceByRecInvoiceTypeRel.AlternateReceivableInvoiceType.CreditMemo)
					"Credit"
				else
				if (ReceivableInvoiceByRecInvoiceTypeRel.AlternateReceivableInvoiceType.DebitMemo)
					"Debit"
				else
					blank
			else
			if (AdjustmentReason.ReceivableAdjustmentReasonType.OverShort
			or  AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding	
			or  AdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer
			or  AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
				if (ReceivableInvoiceByRecInvoiceTypeRel.AlternateReceivableInvoiceType.Invoice)
					"Invoice"
				else
				if (ReceivableInvoiceByRecInvoiceTypeRel.AlternateReceivableInvoiceType.CreditMemo)
					"Credit"
				else
				if (ReceivableInvoiceByRecInvoiceTypeRel.AlternateReceivableInvoiceType.DebitMemo)
					"Debit"
				else
				if (ReceivablePaymentRel exists)
					"Payment"
				else
					blank
			else
			if (AdjustmentReason.ReceivableAdjustmentReasonType.Grouping
			or  AdjustmentReason.ReceivableAdjustmentReasonType.MarkAsPaid)	
				if (ReceivableInvoiceByRecInvoiceTypeRel.AlternateReceivableInvoiceType.Invoice)
					"Invoice"
				else
				if (ReceivableInvoiceByRecInvoiceTypeRel.AlternateReceivableInvoiceType.CreditMemo)
					"Credit"
				else
					blank
			else
				blank

		DerivedApplicationNumber		is a DerivedField
			type is AlphaUpper size 22
			restricted
			if (DerivedAdjustmentType = "Payment")
				return ReceivableApplication.CreditTransaction.CreditNumber
			else
				return ReceivableApplication.Invoice

		DerivedReference				is a StringField
			type is Alpha 30
			restricted
			DerivedAdjustmentType
			" "
			DerivedApplicationNumber



		DerivedAppCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return ReceivableApplication.ApplicationCurrency

		DerivedAppCurrencyVal is a DerivedField
			type is Decimal 19.3
			restricted
			return ReceivableApplication.CreditTransaction.CreditApplicationAmount.CurrencyAmount

		DerivedFunctionalAmount is a DerivedField
			type is Decimal size 31.2
			restricted
			return DerivedAppCurrencyVal * ReceivableApplication.ApplicationAmount.FunctionalAmount.EnteredCurrencyRate

		DerivedFEGReportCurOne is a DerivedField
			type is AlphaUpper size 5
			restricted
			return Company.FinanceEnterpriseGroup.ReportCurrencyOne

		DerivedReportAmount is a DerivedField
			type is Decimal size 31.2
			restricted
			return DerivedAppCurrencyVal * ReceivableApplication.ApplicationAmount.ReportAmount1.EnteredCurrencyRate

		DerivedAdjRepAmount is a DerivedField
			type is Decimal size 32.2
			restricted
			return  CreditAdjustAmount * ReceivableApplication.ApplicationAmount.ReportAmount1.EnteredCurrencyRate

		DerivedAdjBaseAmount is a DerivedField
			type is Decimal size 32.2
			restricted
			return  CreditAdjustAmount * ReceivableApplication.ApplicationAmount.FunctionalAmount.EnteredCurrencyRate

		AdjustmentAmountDisplay			is a LabelField
			"<ReceivableInvoiceDetailRel.OriginalCurrency>_<AdjustmentAmount.CurrencyAmount>"

		AdjustmentLimitDisplay			is a LabelField
			"<ReceivableInvoiceDetailRel.OriginalCurrency>_<DerivedApplicationLimit>"

		

		DerivedNextApprovalLevel is a DerivedField
			type is Numeric 8
			restricted
			LocalApprovalLevel = ApprovalLevel
			include GetNextApprovalLevel
			return LocalApprovalLevel

		DerivedNextLocalApprovalLevel is a DerivedField
			type is Numeric 8
			restricted
			include GetNextTransientApprovalLevel
			return LocalApprovalLevel

		DerivedCurrentApprovalResource is a DerivedField
			type is Numeric 9
			restricted
			return first CurrentApprovalCodeLevelRel.Approver

		DerivedCurrentApprovalActor is a DerivedField
			type is Actor
			restricted
			return first CurrentApprovalCodeLevelRel.Approver.FinanceResourceActor

		DerivedCurrentApprovalTeam is a DerivedField
			type is AlphaUpper 20
			restricted
			return first CurrentApprovalCodeLevelRel.ApprovalTeam

		DerivedCurrentTeamActorList is a DerivedField
			type is Alpha 250
			restricted
			include BuildTeamApproverActorList
			return LocalApproverList

		DerivedCurrentApproverEscalationDays is a DerivedField
			type is Numeric 6
			restricted
			if (first CurrentApprovalCodeLevelRel.EscalationDays > 0)
				return first CurrentApprovalCodeLevelRel.EscalationDays
			else
				return 10000

		DerivedLocalApproverEscalationDays is a DerivedField
			type is Numeric 6
			restricted
			if (first TransientApprovalCodeLevelRel.EscalationDays > 0)
				return first TransientApprovalCodeLevelRel.EscalationDays
			else
				return 10000

		DerivedCurrentApproverEscalationHours is a DerivedField
			type is Decimal 6.2
			restricted
			if (first CurrentApprovalCodeLevelRel.EscalationHours > 0)
				return first CurrentApprovalCodeLevelRel.EscalationHours
			else
				return 9999.99

		DerivedLocalApproverEscalationHours is a DerivedField
			type is Decimal 6.2
			restricted
			if (first TransientApprovalCodeLevelRel.EscalationHours > 0)
				return first TransientApprovalCodeLevelRel.EscalationHours
			else
				return 9999.99

		DisplayByCurrentApproverDesc is a StringField
			type is Alpha 100
			"by "
			DisplayCurrentApproverDesc

		DisplayCurrentApproverDesc is a ConditionalField
			type is Alpha 100
			if (ReviewStatus.ReviewNeedsApproval
			or  ReviewStatus.PendingApproval)
				if (Approver entered)
					Approver.FirstLastName 
				else
					ApproverTeam.FinanceTeam.Description
			else
				blank

		DerivedAppsValue is a DerivedField
			type is like PfiAppsValue
			return "ReceivableApplicationAdjustmentApproval" + UniqueID

		ProcessIndicatorNotFoundMessage is a LabelField
			"ProcessIndicatorNotFound"

		DerivedApprovalJSON is a DerivedField
			type is Text
			initialize TransientApprovalCode
			initialize LocalApprovalLevel
			TransientApprovalCode = ApprovalCode
			LocalApprovalLevel = ApprovalLevel
			LocalCounter = LocalApprovalLevel
			DerivedApprovalJSON = "{ "
			while (true)
				DerivedApprovalJSON += "\"" + TransientApprovalCode + "\": {"
				while (LocalApprovalLevel > 0)
					if (LocalApprovalLevel > 1)
						DerivedApprovalJSON += ","
					DerivedApprovalJSON += "\"" + LocalApprovalLevel + "\": {"
					DerivedApprovalJSON += "\"Label\": \"Level "+ LocalCounter
					if (first TransientApprovalCodeLevelRel.Approver entered)
						DerivedApprovalJSON += " - " + first TransientApprovalCodeLevelRel.Approver.PreferredGivenName
						DerivedApprovalJSON += " " + first TransientApprovalCodeLevelRel.Approver.PreferredFamilyName
					else
					if (first TransientApprovalCodeLevelRel.ApprovalTeam entered)
						DerivedApprovalJSON += " - " + first TransientApprovalCodeLevelRel.ApprovalTeam.Description
					DerivedApprovalJSON += "\", "
					DerivedApprovalJSON += "\"Approver\": \"" + first TransientApprovalCodeLevelRel.Approver + "\", "
					DerivedApprovalJSON += "\"Actor\": \"" + first TransientApprovalCodeLevelRel.Approver.FinanceResourceActor + "\", "
					DerivedApprovalJSON += "\"ApprovalTeam\": \"" + first TransientApprovalCodeLevelRel.ApprovalTeam + "\", "
					DerivedApprovalJSON += "\"TeamActorList\": ["
					LocalFirstApproverAssigned = false
					for each FinanceTeamMembersFromTransientApprovalCodeLevelRel
						if (LocalFirstApproverAssigned)
							DerivedApprovalJSON += ", \"" + each.FinanceTeamMember.TeamMember.FinanceResourceActor + "\""
						else
							DerivedApprovalJSON += "\"" + each.FinanceTeamMember.TeamMember.FinanceResourceActor +"\""
							LocalFirstApproverAssigned = true
					DerivedApprovalJSON += "], "
					DerivedApprovalJSON += "\"EscalationHours\": \"" + DerivedLocalApproverEscalationHours + "\", "
					DerivedApprovalJSON += "\"EscalationDays\": " + DerivedLocalApproverEscalationDays + "}"
					LocalApprovalLevel = DerivedNextLocalApprovalLevel
					increment LocalCounter
				DerivedApprovalJSON += "}"
				end while
			DerivedApprovalJSON += "}"
			return DerivedApprovalJSON

		DerivedMilestoneLabel is a DerivedField
			type is Text
			initialize DerivedMilestoneLabel
			initialize LocalCounter
			LocalCounter = ApprovalLevel 
			DerivedMilestoneLabel += "Level " + LocalCounter
			if (first CurrentApprovalCodeLevelRel.Approver entered)
				DerivedMilestoneLabel += " - " + first CurrentApprovalCodeLevelRel.Approver.PreferredGivenName
				DerivedMilestoneLabel += " " + first CurrentApprovalCodeLevelRel.Approver.PreferredFamilyName
			else
			if (first CurrentApprovalCodeLevelRel.ApprovalTeam entered)
				DerivedMilestoneLabel += " - " + first CurrentApprovalCodeLevelRel.ApprovalTeam.Description
			return DerivedMilestoneLabel

		DerivedApprovalLinkback is a MessageField
			restricted
			"<linkback(webapp is JournalApprover navigation is ProcessFlowForm text is \"ViewReceivableApplicationAdjustment\")>"

		DerivedEmailLink is a DerivedField
			type is Alpha size up to 1000
			restricted
			if (Company.CustomerGroupField.CustomerGroup.AdjustmentApprovalIncludeLink)
				return "Click " + DerivedApprovalLinkback + " to review the Adjustment."
			else
				return ""

		DerivedAdjustmentApprovalEmailSubject is a DerivedField
			type is MessageField
			restricted
			AdjustmentApprovalEmailSubject    = Company.CustomerGroupField.CustomerGroup.AdjustmentApprovalEmailSubject
			if (AdjustmentApprovalEmailSubject entered)
				return AdjustmentApprovalEmailSubject text
			else
				return 
		
		DerivedAdjustmentApprovalEmailContent is a DerivedField
			type is MessageField
			restricted
			AdjustmentApprovalEmailContent    = Company.CustomerGroupField.CustomerGroup.AdjustmentApprovalEmailContent
			return AdjustmentApprovalEmailContent text

		DerivedAdjustmentApprovedEmailSubject is a DerivedField
			type is MessageField
			restricted
			AdjustmentApprovedEmailSubject    = Company.CustomerGroupField.CustomerGroup.AdjustmentApprovedEmailSubject
			return AdjustmentApprovedEmailSubject text

		DerivedAdjustmentApprovedEmailContent is a DerivedField
			type is MessageField
			restricted
			AdjustmentApprovedEmailContent    = Company.CustomerGroupField.CustomerGroup.AdjustmentApprovedEmailContent
			return AdjustmentApprovedEmailContent text

		DerivedAdjustmentRejectEmailSubject is a DerivedField
			type is MessageField
			restricted
			AdjustmentRejectEmailSubject    = Company.CustomerGroupField.CustomerGroup.AdjustmentRejectEmailSubject
			return AdjustmentRejectEmailSubject text

		DerivedAdjustmentRejectEmailContent is a DerivedField
			type is MessageField
			restricted
			AdjustmentRejectEmailContent    = Company.CustomerGroupField.CustomerGroup.AdjustmentRejectEmailContent
			return AdjustmentRejectEmailContent text
			

		DerivedAdjustmentAmount		is a DerivedField
			type is like InternationalAmount
			restricted
			if (ReceivableApplication.ApplicationSource.ReversalOfApplications)
				if (ReceivableApplication.ReversalSource.PaymentReversal)
					return CreditAdjustAmount * -1
				else
				if (ReceivableApplication.ReversalSource.TransactionReversal)
					return AdjustmentAmount.CurrencyAmount * -1
			else
				if (ReceivableApplication.ReversalSource.PaymentReversal)
					return CreditAdjustAmount
				else
				if (ReceivableApplication.ReversalSource.TransactionReversal)
					return AdjustmentAmount.CurrencyAmount
		
		DerivedReversedAdjustmentAmount		is a DerivedField
			type is like InternationalAmount
			restricted
			return DerivedAdjustmentAmount * -1

		DerivedReviewStatus is a DerivedField
			type is Boolean
			restricted
			if (ReviewStatus.ReviewNeedsApproval
			or  ReviewStatus.PendingApproval)
				return true
			else
				return false

		DerivedRejectionReason is a DerivedField
			type is Alpha 40
			restricted
			if (LocalRejectReason entered)
				return "Rejection Reason: " + LocalRejectReason
			else
				return ""

		DerivedAdjustmentDescription is a DerivedField
    		type is Alpha size up to 40
    		restricted
    		return Description[0:40]
    		
		DerivedGeneralLedgerDate is a DerivedField
			type is Date
			restricted
			return ReceivableApplication.GeneralLedgerDate

	Field Rules
		ReceivableAdjustmentReasonType
			initial value is AdjustmentReason.ReceivableAdjustmentReasonType	
			default to AdjustmentReason.ReceivableAdjustmentReasonType

		AdjustmentReason
			required
				"ReasonIsRequired"

			if (ParentContext != "ReceivablePendingAdjustment")
				cannot be changed
					"CannotChangeReasonCode"

			if (!ReceivableApplication.ApplicationSource.GroupedMemo)
				constraint (!AdjustmentReason.ReceivableAdjustmentReasonType.Grouping)
					"CannotUseGroupingReasonCode"

			if (ParentContext = "ReceivableApplicationAdjustmentSelect")
				NextSentence = true
			else
			if (!GainLoss
			and !Reversal
			and !TransientReversal)
				if (AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount < 0
				and !AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
					constraint (AdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
						"AdjustmentAmountIsNegative;ReasonCodeMustBeTypeOver/Short"

				constraint (AdjustmentReason != "CURR")
					"CURRIsAReservedReasonCode"

				if (!ReceivableApplication.TransType.CustomerPayment
				and  AdjustmentReason.ReceivableAdjustmentReasonType.Chargeback)
					constraint (!ReceivableApplication.ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						"ChargebackReasonCodeNotAllowedOnCreditMemos"

					constraint (AdjustmentReason.ChargebackType.Detail or AdjustmentReason.ChargebackType.Summary)
						"ChargebackReasonCodeTypeMustBeDetailOrSummary"

					constraint (AdjustmentAmount.CurrencyAmount > 0)
						"NegativeChargebacksNotPermitted"


		Description


			if	(LocalPrmComment entered)
				default to	LocalPrmComment
			if	(!LocalPrmComment entered)
				default to AdjustmentReason.Description

		AdjustmentAmount



			if  (AdjustmentReason = "CURR")
				AdjustmentAmount.KeepRateAndAmount = true
			else
				AdjustmentAmount.KeepRateAndAmount = false
				if  ((action type.Update
				and  (!AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate changed
				or	  !AdjustmentAmount.AlternateAmount.EnteredCurrencyRate changed
				or	  !AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate changed
				or	  !AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate changed
				or	  !AdjustmentAmount.ReportAmount1.EnteredCurrencyRate changed
				or	  !AdjustmentAmount.ReportAmount2.EnteredCurrencyRate changed
				or	  !AdjustmentAmount.ReportAmount3.EnteredCurrencyRate changed
				or	  !AdjustmentAmount.ReportAmount4.EnteredCurrencyRate changed
				or	  !AdjustmentAmount.ReportAmount5.EnteredCurrencyRate changed))
				or   (action type.Create
				and  (AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate entered
				or	  AdjustmentAmount.AlternateAmount.EnteredCurrencyRate entered
				or	  AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate entered
				or	  AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate entered
				or	  AdjustmentAmount.ReportAmount1.EnteredCurrencyRate entered
				or	  AdjustmentAmount.ReportAmount2.EnteredCurrencyRate entered
				or	  AdjustmentAmount.ReportAmount3.EnteredCurrencyRate entered
				or	  AdjustmentAmount.ReportAmount4.EnteredCurrencyRate entered
				or	  AdjustmentAmount.ReportAmount5.EnteredCurrencyRate entered)))
					AdjustmentAmount.KeepRateOnly = true








			if (ReceivableApplication.IsCreditTypePayment)
				if (ReceivablePaymentRel.OriginalCurrency != ReceivableApplication.DerivedCreditCurrency) 
					if (TransientTransactionDate not entered)
						TransientTransactionDate							= ReceivableApplication.CreditTransaction.CreditApplicationAmount.ExchangeDate
					CurrencyWork.TransactionAmount							= CreditAdjustAmount
					CurrencyWork.FromCurrency								= ReceivableApplication.DerivedCreditCurrency 
					CurrencyWork.BaseAmount.ToCurrency						= ReceivablePaymentRel.OriginalCurrency
					CreditAdjustAmount										= CurrencyWork.BaseAmount.OutputCurrencyAmount



		AdjustSource
			if (ReceivableInvoiceDetailRel.CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward)
				AdjustSource							= "B"
			else
			if (ReceivableApplication.TransType.CreditMemo
			or  ReceivableApplication.TransType.NonArPayment
			or  ReceivableApplication.TransType.CustomerPayment
			or  ReceivableApplication.TransType.BillOfExchangePayment)
				AdjustSource							= "C"
			else
				AdjustSource							= "D"

		DistributionAccount
			LocalGeneralLedgerSystemCode = "AR"	
			BypassProjectDateEdit = true	
			if (AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
				default to ReceivableApplication.ReceivableInvoiceDetailRel.ReceivableGeneralLedgerCode.DistributionAccount

			if (ReceivableApplicationRel.DebitIsInvoice)
				if (AdjustmentReason.AllowProcessLevelFinanceCodeBlockOverride)


					default to ReceivableApplication.ReceivableInvoiceDetailRel.ReceivableProcessLevel.AccountingUnitFinanceCodeBlock
						default individual fields
					if (AdjustmentReason.AccrualAccount entered)
						default to AdjustmentReason.AccrualAccount
							default individual fields
						AdjustFlag = 1
					else
						default to AdjustmentReason.DistributionAccount
							default individual fields
					if (DistributionAccount.Project not entered)	
						default to ReceivableApplication.ReceivableInvoiceDetailRel.Project	
							default individual fields	



				if (AdjustmentReason.PreventProcessLevelFinanceCodeBlockOverride)
					if(!AdjustmentReason.ReceivableReason.IsMarkAsPaidType)	
						if (AdjustmentReason.AccrualAccount entered)
							default to AdjustmentReason.AccrualAccount
							AdjustFlag = 1
						else
							default to AdjustmentReason.DistributionAccount


			if (ReceivableApplicationRel.IsPaymentWriteoff)
				if (AdjustmentReason.AllowProcessLevelFinanceCodeBlockOverride)
					default to ReceivableApplication.ReceivablePaymentDebitRel.ReceivableProcessLevel.AccountingUnitFinanceCodeBlock
						default individual fields
					if (AdjustmentReason.AccrualAccount entered)
						default to AdjustmentReason.AccrualAccount
							default individual fields
						AdjustFlag = 1
					else
						default to AdjustmentReason.DistributionAccount
							default individual fields
					if (DistributionAccount.Project not entered								
					and !AdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)	
						default to ReceivableApplication.ReceivablePaymentDebitRel.Project	
							default individual fields	
				if (AdjustmentReason.PreventProcessLevelFinanceCodeBlockOverride)
					if (AdjustmentReason.AccrualAccount entered)
						default to AdjustmentReason.AccrualAccount
						AdjustFlag = 1
					else
						default to AdjustmentReason.DistributionAccount

			if (GainLossAdjustment
			and !Reversal)

				DistributionAccount.ToAccountingEntity			= GeneralLedgerCompanyRel.AccountingEntity
				DistributionAccount.GeneralLedgerChartAccount	= first SystemRealizedGainLossAccountRel.GeneralLedgerChartAccount
				if (DistributionAccount.GeneralLedgerChartAccount not entered)
					if(AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount < 0)
						DistributionAccount.GeneralLedgerChartAccount	= first SystemRealizedGainAccountRel.GeneralLedgerChartAccount
					else
						DistributionAccount.GeneralLedgerChartAccount	= first SystemRealizedLossAccountRel.GeneralLedgerChartAccount



				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.AccountingUnitRequired)
					DistributionAccount.AccountingUnit			= SystemAccountingUnitRel.AccountingUnit
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension1Required)
					DistributionAccount.FinanceDimension1		= FinanceDimension1Rel.FinanceDimension1
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension2Required)
					DistributionAccount.FinanceDimension2		= FinanceDimension2Rel.FinanceDimension2
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension3Required)
					DistributionAccount.FinanceDimension3		= FinanceDimension3Rel.FinanceDimension3
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension4Required)
					DistributionAccount.FinanceDimension4		= FinanceDimension4Rel.FinanceDimension4
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension5Required)
					DistributionAccount.FinanceDimension5		= FinanceDimension5Rel.FinanceDimension5
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension6Required)
					DistributionAccount.FinanceDimension6		= FinanceDimension6Rel.FinanceDimension6
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension7Required)
					DistributionAccount.FinanceDimension7		= FinanceDimension7Rel.FinanceDimension7
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension8Required)
					DistributionAccount.FinanceDimension8		= FinanceDimension8Rel.FinanceDimension8
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension9Required)
					DistributionAccount.FinanceDimension9		= FinanceDimension9Rel.FinanceDimension9
				if (GeneralLedgerCompanyRel.FinanceEnterpriseGroup.FinanceDimension10Required)
					DistributionAccount.FinanceDimension10		= FinanceDimension10Rel.FinanceDimension10
			initialize TransientDistributionAccount  
			if (DistributionAccount entered)	
				TransientDistributionAccount	= DistributionAccount

		CreateDate
			default to current timestamp

		ARIncomeWithholdingCode	
			if (AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				required	
					"AR_\Income_\Withholding_\CodeIsRequiredWith_\Adjustment_\Reason<AdjustmentReason>,SinceItIsDefinedAs_\Tax_\Withholding"	
			constraint (AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				"AR_\Income_\Withholding_\CodeCanNotBePopulatedWith_\Adjustment_\Reason<AdjustmentReason>,SinceItIsNotDefinedAs_\Tax_\Withholding"	

		ARIncomeWithholdingDocumentNumber	
			if (AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				required	
					"AR_\Income_\Withholding_\Document_\NumberIsRequiredWith_\Adjustment_\Reason<AdjustmentReason>,SinceItIsDefinedAs_\Tax_\Withholding"	
			constraint (AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				"AR_\Income_\Withholding_\Document_\NumberCanNotBePopulatedWith_\Adjustment_\Reason<AdjustmentReason>,SinceItIsNotDefinedAs_\Tax_\Withholding"	

		ApprovalCode
			initial value is AdjustmentReason.ApprovalCode
			default to AdjustmentReason.ApprovalCode
			
			if (AdjustmentReason.RequiresApproval)
				required
					"ApprovalCodeRequiredWhenAdjustmentNeedsReview"

			constraint (ApprovalCode.HasApprovalLevels)
				"ApprovalCodeHasNoApprovalLevels"
			constraint (!ApprovalCode.HasTeamWithNoMembers)
				"ApprovalCodeHasATeamWithNoMembers"
			constraint (!ApprovalCode.HasInvalidEscalations)
				"ApprovalCodeHasInvalidEscalationSettings"
			constraint (!ApprovalCode.HasInactiveResources)
				"ApprovalCodeHasInactiveResources"










	Conditions
		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		SecurityGroupAllowsAccess	
			when (actor.context.CompanySecurityGroup = blank
			or	  CompanySecurityGroupMemberRel exists)

		IsAdjusted
			restricted
			when (!Adjusted)

		HasReceivablePendingAdjustment

			when (ReceivablePendingAdjustmentRel exists)

		AllowSelectForPendingAdjustment
			restricted
			when (!HasReceivablePendingAdjustment
			and !HasMarkedAsPaidReceivableApplicationAdjustments
			and !ReviewStatus.PendingApproval)

		AllowUnSelectForPendingAdjustment
			restricted
			when (HasReceivablePendingAdjustment)

		IsReceivableInvoiceAdjustment
			classic name is ADJ-I-C-D
			restricted
			when (ReceivableApplication.TransType.CreditMemo
			or	ReceivableApplication.TransType.Invoice
			or	ReceivableApplication.TransType.DebitMemo)

		IsNotMixedSignedInvoice  
			restricted
			when (IsReceivableInvoiceAdjustment
			and   ReceivableApplication.ReceivableInvoiceDetailRel.AlternateReceivableInvoiceType != "M")


		IsPaymentAdjustment
			classic name is ADJ-P
			restricted
			when (ReceivableApplication.TransType.CustomerPayment)

		IsInReview
			classic name is ADJSET2
			restricted
			when (ReviewStatus.ReviewNeedsApproval)

		IsDiscount
			restricted
			when (ReceivableAdjustmentReasonType.Discount)

		IsNotReversedAndNotSourceOfReversal
			restricted
			when(!ReceivableApplication.ApplicationSource.ReversalOfApplications
			and	 !ReceivableApplication.Reverse)

		IsNotCurr
			restricted
			when (AdjustmentReason != "CURR")

		IsCurrAdjustment
			restricted
			when (AdjustmentReason = "CURR")

		IsReviewed
			classic name is REVSTATUS4
			restricted
			when (ReviewStatus.ApprovalCompleteOrNotNeeded)

		InvoiceAdjustment
			restricted
			when (ReceivableApplication.ReceivableApplication.TransType.CreditMemo
			or	ReceivableApplication.ReceivableApplication.TransType.DebitMemo
			or	ReceivableApplication.ReceivableApplication.TransType.Invoice
			or	ReceivableApplication.ReceivableApplication.TransType.MixedSignLines)

		PaymentAdjustment
			restricted
			when (ReceivableApplication.ReceivableApplication.TransType.NonArPayment
			or	ReceivableApplication.ReceivableApplication.TransType.CustomerPayment
			or	ReceivableApplication.ReceivableApplication.TransType.BillOfExchangePayment)

		IsAdjustmentForContextRTMPayment
			restricted
			when (ReceivableApplication.CreditTransaction.CreditCompany		= RTMPayment.Company
			and   ReceivableApplication.CreditTransaction.CreditBatch		= RTMPayment.ReceivablePaymentHeader
			and   ReceivableApplication.CreditTransaction.CreditSequence	= RTMPayment.ReceivablePaymentRel.ReceivablePayment)

		AllowDelete
			restricted
			when (AllowUpdateAndDelete
			or	ProcessDispute)

		AllowChanges
			restricted
			when (!ReceivableApplication.Status.ApplicationPosted
			and   !ReceivableApplication.ApplicationSource.TransferToAP


			and   !HasMarkedAsPaidReceivableApplicationAdjustments
			and   !ReceivableApplication.ApplicationSource.ReversalOfApplications  
			and   (!ReceivableApplication.Reverse
			or	 ReceivableApplication.Status < 4)
			and  !ReceivableApplication.OverAppliedAdjustmentRel exists)

		GainLossAdjustment
			restricted
			when (AdjustmentReason.ReceivableAdjustmentReasonType.OverShort
			and   AdjustmentReason = "CURR")

		CreditMemoOrigin
			restricted
			when (ReceivableAdjustType = "C")

		AllowReturnToMaker
			restricted
			when ((AdjustmentReason != "CURR"
			and  !ReceivableAdjustmentReasonType.Chargeback
			and   AdjustmentAmount.CurrencyAmount entered)
			or   (ReceivableAdjustmentReasonType.OverShort
			and   AdjustmentAmount.CurrencyAmount < 0))





		HasRTMPaymentAdjustment
			restricted
			when (RTMPaymentAdjustmentRel exists)

		AllowUnselectForRTM
			restricted
			when (HasRTMPaymentAdjustment
			and   RTMPaymentAdjustmentRel.RTMPayment.Status.UnreleasedRtm)

		RTMPaymentInContext
			restricted
			when (RTMPayment in context)

		DisplaySelectForRTM
			restricted
			when (RTMPaymentInContext
			and  !HasRTMPaymentAdjustment)

		AllowSelectDistributionSet 
			restricted
			when (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting
			and   Company.SelectFundDistributionSet)

		WithinCustomerAdjustmentFilter
			restricted
			when (!ReceivableApplication.ApplicationSource.ReversalOfApplications
			and   !ReceivableApplication.Reverse
			and   (ReceivableInvoiceRange not entered
			or	 ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice within ReceivableInvoiceRange)
			and   (DueDateRange not entered
			or	 ReceivableInvoiceDetailRel.DueDate within DueDateRange)
			and   (ReceivableProcessLevelRange not entered
			or	 ReceivableInvoiceDetailRel.ReceivableProcessLevel within ReceivableProcessLevelRange)
			and   (SalesRepresentativeRange not entered
			or	 ReceivableInvoiceDetailRel.SalesRepresentative within SalesRepresentativeRange)
			and   (TermsCodeRange not entered
			or	 ReceivableInvoiceDetailRel.TermsCode within TermsCodeRange)
			and   (TransUser1Range not entered
			or	 ReceivableInvoiceDetailRel.TransactionUserField1 within TransUser1Range)
			and   (CustomerPurchaseOrderRange not entered
			or	 ReceivableInvoiceDetailRel.CustomerPurchaseOrder within CustomerPurchaseOrderRange)
			and   (OpenAmountRange not entered
			or	 ReceivableInvoiceDetailRel.OpenAmount within OpenAmountRange)
			and   (GeneralLedgerDateRange not entered
			or	 GeneralLedgerDateRange within GeneralLedgerDateRange)
			and   (ProjectRange not entered
			or	 DistributionAccount.Project within ProjectRange)
			and   (AdjustAmountRange not entered
			or	 AdjustmentAmount.CurrencyAmount within AdjustAmountRange))

		WithinApplicationAdjustmentFilter
			restricted
			when ((GeneralLedgerDateRange not entered
			or	 ReceivableApplication.GeneralLedgerDate within GeneralLedgerDateRange)
			and   (ReceivableProcessLevelRange not entered
			or	 ReceivableInvoiceDetailRel.ReceivableProcessLevel within ReceivableProcessLevelRange)
			and   (SalesRepresentativeRange not entered
			or	 ReceivableInvoiceDetailRel.SalesRepresentative within SalesRepresentativeRange)
			and   (TransUser1Range not entered
			or	 ReceivableInvoiceDetailRel.TransactionUserField1 within TransUser1Range)
			and   (CreditAnalyst not entered
			or	 CreditAnalyst = CompanyCustomerRel.CreditAnalyst)
			and   (SearchCurrency not entered
			or	   SearchCurrency = ReceivableInvoiceDetailRel.OriginalCurrency)
			and   ((GainLoss not entered)
			or	(GainLoss and GainLossAdjustment)
			or	(!GainLoss and !GainLossAdjustment)))

		IsEarnedDiscount
			restricted
			when (BaseEarnedDiscountAmount entered)

		IsUnEarnedDiscount
			restricted
			when (BaseUnEarnedDiscountAmount entered)

		CreatedByMe
			when (create stamp.actor = actor)

		IsReceivableAdjustmentReasonTypeOverShortAndMarkAsPaid	
			when (AdjustmentReason.ReceivableAdjustmentReasonType.OverShort	
			or		AdjustmentReason.ReceivableAdjustmentReasonType.MarkAsPaid)	

		HasMarkedAsPaidReceivableApplicationAdjustments							
			restricted															
			when (AdjustmentReason.ReceivableAdjustmentReasonType.MarkAsPaid
			or AdjustmentReason.ReceivableReasonType.MarkedAsPaid)	//IEFIN-56617 updated to Company.ReceivableCompany.MarkedAsPaidReceivableReason.  IEFIN-40063 was "MP"

		IsTaxWithholding	
			when (ReceivableApplicationRel.TaxWithholdingAdjustmentRel exists)	

		CompanyHasATaxWithholdingReceivableReason	
			when (ReceivableApplication.ReceivableReasonTaxWithholdingRel exists)	

		IsValidForExpense			
			restricted
			when (AdjustmentReason.AccrualAccount.GeneralLedgerChartAccount entered
			and !HasMarkedAsPaidReceivableApplicationAdjustments)
	
		SubmitForApprovalValid
			restricted
			when (AdjustmentReason.RequiresApproval
			and   IsReviewValid)

		HasApprovalHistory
			restricted
			when (ReceivableApplicationAdjustmentApprovalHistory set exists)

		RejectAdjustmentReasonCodeRequired
			restricted
			when (AdjustmentReason.RejectAdjustmentReasonCodeRequired)
		
		IsReviewValid
			restricted
			when (ReviewStatus.ReviewNeedsApproval
			or    (ReviewStatus.UnreleasedAdjustment
			and    HasApprovalHistory))

		IsManualApprovalValid
			restricted
			when (!AdjustmentReason.RequiresApproval
			and IsReviewValid)

		IsManualRejectValid
			restricted
			when (!AdjustmentReason.RequiresApproval
			and ReviewStatus.ReviewNeedsApproval)

		IsAdjustmentsValidToViewInExeedsList
			restricted
			when (IsReviewValid
			or ReviewStatus.PendingApproval)

		IsReviewPendingOrHasApprovalHistory
			restricted
			when ((ReviewStatus.UnreleasedAdjustment		
			or ReviewStatus.ReviewNeedsApproval			
			or ReviewStatus.ChargebackProcessed			
			or ReviewStatus.PendingApproval)
			or HasApprovalHistory)
		
		HasApplicationAdjustmentNeedsAttachment
			restricted
			when (AdjustmentReason.AttachmentRequired
			and ReceivableApplication.ApplicationSource.ManualCashApplication
			and IsReviewPendingOrHasApprovalHistory)

		ApplicationAdjustmentAttachmentNotExists
			restricted
			when (ReceivableApplicationAdjustmentAttachmentRel not exists
			and HasApplicationAdjustmentNeedsAttachment)


		AllowUpdateAndDelete
			restricted
			when(!ReviewStatus.PendingApproval
			and AllowChanges)

		DisplayApprovalInformationPanel
			restricted
			when (HasApprovalHistory
			and   first PfiWorkunitRel.HasProcessIndicator)
			
		DisplayApprovalTrackingPanel
			restricted
			when (HasApprovalHistory
			and  !first PfiWorkunitRel.HasProcessIndicator)

	Relations

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company = Company

		CompanySecurityGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company

		ReceivableApplicationRel
			classic name is ARAPPLIED
			one-to-one relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company										 = Company
				related.ReceivableApplication.TransType				 = ReceivableApplication.TransType
				related.ReceivableApplication.Invoice				 = ReceivableApplication.Invoice
				related.ReceivableApplication.PaymentSeq			 = ReceivableApplication.PaymentSeq
				related.ReceivableApplication.BatchNumber			 = ReceivableApplication.BatchNumber
				related.ReceivableApplication.ApplicationSequence	 = ReceivableApplication.ApplicationSequence

		ReceivableInvoiceRel
			classic name is AROIHDR
			one-to-one relation to ReceivableInvoice
			required
			Field Mapping uses Set6
				related.Company							 = Company
				related.AlternateReceivableInvoiceType	 = ReceivableApplication.TransType
				related.ReceivableInvoice				 = ReceivableApplication.Invoice

		ReceivableInvoiceByRecInvoiceTypeRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceDetailRel.AlternateReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice

		ReceivableInvoiceDetailRel
			classic name is AROITEMS
			one-to-one relation to ReceivableInvoiceDetail
			required
			Field Mapping uses symbolic key
				related.Company												 = Company
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableApplication.TransType
				related.ReceivableInvoiceDetail.Invoice						 = ReceivableApplication.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableApplication.PaymentSeq

		ReceivablePendingAdjustmentRel
			classic name is ARPENDADJ
			one-to-one relation to ReceivablePendingAdjustment

			Field Mapping uses symbolic key
				related.Company																			 = Company
				related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableApplication.TransType
				related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.Invoice						 = ReceivableApplication.Invoice
				related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableApplication.PaymentSeq
				related.ReceivablePendingAdjustment.BatchNumber											 = ReceivableApplication.BatchNumber
				related.ReceivablePendingAdjustment.ApplicationSequence									 = ReceivableApplication.ApplicationSequence
				related.ReceivablePendingAdjustment.AdjustmentSequence									 = ReceivableApplicationAdjustment

		ReceivablePaymentHeaderRel
			classic name is ARPYMNTHDR
			one-to-one relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company						 = ReceivableApplication.CreditTransaction.CreditCompany
				related.ReceivablePaymentHeader		 = ReceivableApplication.CreditTransaction.CreditBatch

		ReceivableReasonRel
			classic name is ARREASON
			one-to-one relation to ReceivableReason
			required
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableReasonType	 = "AD"
				related.ReceivableReason		 = AdjustmentReason

		ReceivableGeneralLedgerCodeRel
			classic name is ARCODE
			one-to-one relation to ReceivableGeneralLedgerCode
			required
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.ReceivableGeneralLedgerCode	 = ReceivableApplicationRel.ReceivableGeneralLedgerCode

		ReceivablePaymentRel
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					 = ReceivableApplication.CreditTransaction.CreditCompany
				related.ReceivablePaymentHeader	 = ReceivableApplication.CreditTransaction.CreditBatch
				related.ReceivablePayment		 = ReceivableApplication.CreditTransaction.CreditSequence

		RTMPaymentAdjustmentRel
			one-to-one relation to RTMPaymentAdjustment
			Field Mapping uses symbolic key
				related.Company										 = Company
				related.ReceivablePaymentHeader						 = ReceivablePaymentHeaderRel.ReceivablePaymentHeader
				related.Customer									 = ReceivablePaymentRel.Customer
				related.RTMPayment									 = ReceivablePaymentRel.PaymentNumber
				related.RTMPaymentAdjustment.DebitCompany			 = Company
				related.RTMPaymentAdjustment.DebitType				 = ReceivableApplication.TransType
				related.RTMPaymentAdjustment.DebitTransactionNumber	 = ReceivableApplication.Invoice
				related.RTMPaymentAdjustment.DebitPaymentSequence	 = ReceivableApplication.PaymentSeq
				related.RTMPaymentAdjustment.DebitBatchNumber		 = ReceivableApplication.BatchNumber
				related.RTMPaymentAdjustment.ApplicationSequence	 = ReceivableApplication.ApplicationSequence
				related.RTMPaymentAdjustment.AdjustmentSequence		 = ReceivableApplicationAdjustment

		SystemGainLossAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount				 = SystemAccount.UnrealizedGainAndLoss

		SystemUnrealizedGainAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount				 = SystemAccount.UnrealizedGain

		SystemUnrealizedLossAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount				 = SystemAccount.UnrealizedLoss


		SystemRealizedGainLossAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount				 = SystemAccount.RealizedGainAndLoss

		SystemRealizedGainAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount				 = SystemAccount.RealizedGain

		SystemRealizedLossAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.SystemAccount				 = SystemAccount.RealizedLoss

		SystemAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses BySystemAccountingUnitInStructure
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingUnitStructure		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity			 = GeneralLedgerCompanyRel.AccountingEntity

		FinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceDimension1Structure	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnterpriseDim1Structure

		FinanceDimension2Rel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceDimension2Structure	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnterpriseDim2Structure

		FinanceDimension3Rel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceDimension3Structure	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnterpriseDim3Structure

		FinanceDimension4Rel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceDimension4Structure	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnterpriseDim4Structure
		FinanceDimension5Rel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceDimension5Structure	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnterpriseDim5Structure

		FinanceDimension6Rel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceDimension6Structure	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnterpriseDim6Structure

		FinanceDimension7Rel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceDimension7Structure	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnterpriseDim7Structure

		FinanceDimension8Rel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceDimension8Structure	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnterpriseDim8Structure

		FinanceDimension9Rel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceDimension9Structure	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnterpriseDim9Structure

		FinanceDimension10Rel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceDimension10Structure	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup.EnterpriseDim10Structure







		CompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		 = ReceivableApplication.Company
				related.Customer	 = Customer

		CurrentCompanyCustomerPeriodTotalsRel
			one-to-one relation to CompanyCustomerPeriodTotals
			Field Mapping uses symbolic key
				related.Company									 = Company
				related.CompanyCustomerPeriodTotals.Customer	 = ReceivableApplication.DebitCustomer
				related.CompanyCustomerPeriodTotals.Year		 = CalculateReceivableYearPeriod.CurrentYear

		LocalCompanyCustomerPeriodTotalsRel
			one-to-one relation to CompanyCustomerPeriodTotals
			Field Mapping uses symbolic key
				related.Company									 = Company
				related.CompanyCustomerPeriodTotals.Customer	 = TransientCustomer
				related.CompanyCustomerPeriodTotals.Year		 = CalculateReceivableYearPeriod.CurrentYear

		ApprovalCodeResourceRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ApprovalCode			= ApprovalCode

		LocalApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ApprovalCode			= LocalApprovalCode
				related.ApprovalLevel			= LocalApprovalLevel

		CurrentApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ApprovalCode			= ApprovalCode
				related.ApprovalLevel			= ApprovalLevel

		FinanceTeamMembersFromCurrentApprovalLevelRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceTeam				= first CurrentApprovalCodeLevelRel.ApprovalTeam

		TransientApprovalCodeLevelRel	
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ApprovalCode			= TransientApprovalCode
				related.ApprovalLevel			= LocalApprovalLevel

		FinanceTeamMembersFromTransientApprovalCodeLevelRel	
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceTeam				= first TransientApprovalCodeLevelRel.ApprovalTeam

		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "RApplicationAdjustment"
				related.AppsValue	= DerivedAppsValue

		SendToTeamMembersRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.FinanceTeam				= LocalApproverTeam	

		CreateActorRel
			one-to-one relation to Actor
			Field Mapping uses symbolic key
				related.Actor				= create stamp.actor

		FinanceResourceActorRel
			one-to-many relation to FinanceResource
			Field Mapping uses symbolic key
				related.HROrganization				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.HROrganization
			Instance Selection
				where (related.FinanceResourceActor = LocalActor)

		ReceivableApplicationAdjustmentAttachmentRel is a ReceivableApplicationAdjustmentAttachment set

		ParentAgentRel
			one-to-one relation to ParentAgent
			Field Mapping uses ActorSet
				related.Actor = LocalActor

		AgentRel
			one-to-many relation to Agent
			Field Mapping uses ParentSet
				related.ParentAgent = ParentAgentRel.ParentAgent
			Instance Selection
				where (related.BusinessObjectRef.BusinessClassName = "Employee")

	Sets

		Set2
			indexed
			Instance Selection
				where (IsInReview)
			Sort Order
				Company
				ReceivableApplication
				ReceivableApplicationAdjustment

		Set3
			indexed
			Instance Selection
				where (IsDiscount)
			Sort Order
				Company
				ReceivableApplication
				ReceivableApplicationAdjustment

		AlternatePrimary
			indexed
			Sort Order
				Company
				ReceivableApplication.TransType
				ReceivableApplication.Invoice
				ReceivableApplication.PaymentSeq
				ReceivableApplication.BatchNumber
				ReceivableApplication.ApplicationSequence
				ReceivableApplicationAdjustment

		ByCreditTransaction
			indexed
			Sort Order
				AdjustmentCreditTransaction.CreditCompany
				AdjustmentCreditTransaction.CreditBatch
				AdjustmentCreditTransaction.CreditSequence
				Company
				ReceivableApplication
				ReceivableApplicationAdjustment

		ByReasonCode
			duplicates
			Sort Order
				AdjustmentReason

		ByOperator
			duplicates
			Sort Order
				ReceivableApplication.ReceivableOperator

		ByProject
			duplicates
			Sort Order
				DistributionAccount.Project

	Create Rules
		if (AdjustmentReason = "CURR")
			constraint ((AdjustmentReason.ReceivableAdjustmentReasonType.OverShort
					or ReceivableAdjustmentReasonType.OverShort)
					and AdjustmentReason.ReceivableReasonType.CashApplicationAdjustment)
				"CURRMustBeAnOvershortTypeReasonCode"

		if (AllowSelectDistributionSet) 
			if (!ReceivableApplication.Writeoff
			and  AdjustmentReason != "CURR")
				invoke ChangeDistributionSetNeedsReview ReceivableApplication
					invoked.PrmDistributionSetState 		= "MD"
					invoked.PrmDistributionSetNeedsReview	= true

		AdjustmentCreditTransaction.CreditCompany		= ReceivableApplication.CreditTransaction.CreditCompany 
		AdjustmentCreditTransaction.CreditBatch			= ReceivableApplication.CreditTransaction.CreditBatch
		AdjustmentCreditTransaction.CreditSequence		= ReceivableApplication.CreditTransaction.CreditSequence

	Actions
		Create is a Create Action
			valid when (AllowChanges)
			Entrance Rules



				LocalCurrencyTable = Company.DerivedCurrencyTable
				BypassProjectDateEdit = true	
				include ConvertAmounts
				include CommonEdits
				if  (ReceivableInvoiceDetailRel exists
				and  !ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo
				and  !AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
					constraint (ReceivableInvoiceDetailRel.OpenAmount >= AdjustmentAmount.CurrencyAmount)
						"Adjustment<AdjustmentAmount.CurrencyAmount>MustBeLessThanOrEqualToInvoiceOpen<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.OpenAmount>ForInvoice<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice>"

				if  (AdjustmentReason.ReceivableAdjustmentReasonType.OverShort
				and  Company.PreventWriteOffBeforeTransactionGLDate)
					if (IsPaymentAdjustment)
						constraint (ReceivableApplicationRel.GeneralLedgerDate >= ReceivablePaymentRel.GeneralLedgerDate)
							"Adjustment_\Global_\Ledger_\Date<ReceivableApplicationRel.GeneralLedgerDate>MustBeGreaterThanOrEqualTo_\Payment_\Global_\Ledger_\Date<ReceivablePaymentRel.GeneralLedgerDate>"
					else
					if (ReceivableInvoiceDetailRel exists)
						constraint (ReceivableApplicationRel.GeneralLedgerDate >= ReceivableInvoiceByRecInvoiceTypeRel.GeneralLedgerDate)
							"Adjustment_\Global_\Ledger_\Date<ReceivableApplicationRel.GeneralLedgerDate>MustBeGreaterThanOrEqualTo_\Invoice_\Global_\Ledger_\Date<ReceivableInvoiceByRecInvoiceTypeRel.GeneralLedgerDate>"

			Action Rules




			Exit Rules
				include ReviewStatusAndCheckDiscount

				if (!GainLossAdjustment)
					if (PaymentAdjustment)

						invoke UpdateAppliedAmounts ReceivablePaymentRel
							invoked.BaseAdjustAmount					+= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.AdjustAmountTransactionCurrency	+= AdjustmentAmount.CurrencyAmount

						invoke UpdateCurrentBalance ReceivablePaymentRel.CompanyCustomerRel
							invoked.ChangeAmount						= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference
					else

						invoke UpdateAppliedAmounts ReceivableInvoiceDetailRel

							invoked.AdjustmentAmount.CurrencyAmount		+= AdjustmentAmount.CurrencyAmount

						invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel
							if (ReceivableApplication.ReceivableApplication.TransType.CreditMemo)
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							else
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference

					invoke UpdateAdjustAmounts ReceivableApplication
						invoked.Amount									= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
					if(Company.FinanceEnterpriseGroup.BODTrigger and AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)
						invoke TriggerReceivableTracker ReceivablePaymentRel




				if (TransientAttachment entered)
					invoke Create ReceivableApplicationAdjustmentAttachment
						invoked.Company									= Company
						invoked.ReceivableApplicationAdjustment			= ReceivableApplicationAdjustment
						invoked.ReceivableApplication					= ReceivableApplication
						invoked.Attachment								= TransientAttachment	
		
				if (SubmitForApprovalValid)
					invoke SubmitForApproval
					
		CreateFromBatch is a Create Action
			restricted
			Entrance Rules
				LocalCurrencyTable = Company.DerivedCurrencyTable
				BypassProjectDateEdit = true	
				include ConvertAmounts

				if  (ReceivableInvoiceDetailRel exists
				and  !ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo)
					constraint (ReceivableInvoiceDetailRel.DerivedOpenAmount >= AdjustmentAmount.CurrencyAmount)
						"Adjustment<AdjustmentAmount.CurrencyAmount>MustBeLessThanInvoiceOpen<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.DerivedOpenAmount>ForInvoice<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice>"

			Action Rules


			Exit Rules

				include ReviewStatusAndCheckDiscount
				if (!GainLossAdjustment)
					if (PaymentAdjustment)

						invoke UpdateAppliedAmounts ReceivablePaymentRel
							invoked.BaseAdjustAmount					+= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.AdjustAmountTransactionCurrency	+= AdjustmentAmount.CurrencyAmount
						invoke UpdateCurrentBalance ReceivablePaymentRel.CompanyCustomerRel
							invoked.ChangeAmount						= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference
					else
						invoke UpdateAppliedAmounts ReceivableInvoiceDetailRel

							invoked.AdjustmentAmount.CurrencyAmount		+= AdjustmentAmount.CurrencyAmount

						invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel
							if (ReceivableApplication.ReceivableApplication.TransType.CreditMemo)
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							else
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference

					invoke UpdateAdjustAmounts ReceivableApplication
						invoked.Amount									= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
				if (SubmitForApprovalValid)
					invoke SubmitForApproval

		CreateGainLoss is a Create Action
			restricted
			Entrance Rules

				AdjustmentAmount.FunctionalAmount.ToCurrency			= ReceivableApplication.ApplicationAmount.FunctionalAmount.ToCurrency
				AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableApplication.ApplicationAmount.FunctionalAmount.EnteredCurrencyRate
				AdjustmentAmount.ExchangeDate							= ReceivableApplication.ApplicationAmount.ExchangeDate
				AdjustmentAmount.KeepRateAndAmount						= true

				if  (AdjustmentAmount.FunctionalAmount.ToCurrency not entered)
					if (ReceivableApplication.TransType.CustomerPayment)
						AdjustmentAmount.FunctionalAmount.ToCurrency			= ReceivableApplication.ReceivablePaymentDebitRel.Company.Currency
					else
						AdjustmentAmount.FunctionalAmount.ToCurrency			= ReceivableApplication.ReceivableInvoiceDetailRel.Company.Currency
				BypassProjectDateEdit = true	

			Action Rules
				LocalCurrencyTable = Company.DerivedCurrencyTable

			Exit Rules
				include ReviewStatusAndCheckDiscount
				if (SubmitForApprovalValid)
					invoke SubmitForApproval

		CreateOnly is a Create Action

			restricted
			Entrance Rules

				LocalCurrencyTable = Company.DerivedCurrencyTable
				BypassProjectDateEdit = true	
				include ConvertAmounts

				ReceivableApplicationAdjustment = ReceivableApplication.AdjustmentSequence
			Action Rules

			Exit Rules
				if (PaymentAdjustment)
					invoke UpdateAppliedAmounts ReceivablePaymentRel
						invoked.BaseAdjustAmount					+= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.AdjustAmountTransactionCurrency	+= AdjustmentAmount.CurrencyAmount
					invoke UpdateCurrentBalance ReceivablePaymentRel.CompanyCustomerRel
						invoked.ChangeAmount						= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
						invoked.PrmBalanceType						= DerivedBalanceType
						invoked.PrmReference						= DerivedReference
				else
					invoke UpdateAppliedAmounts ReceivableInvoiceDetailRel

						invoked.AdjustmentAmount.CurrencyAmount		+= AdjustmentAmount.CurrencyAmount

					invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel
						if (ReceivableApplication.ReceivableApplication.TransType.CreditMemo)
							invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						else
							invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
						invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
						invoked.PrmBalanceType						= DerivedBalanceType
						invoked.PrmReference						= DerivedReference

		CreateFromConversion is a Create Action
			restricted

			Entrance Rules

				LocalCurrencyTable = Company.DerivedCurrencyTable
				BypassProjectDateEdit = true	
				include ConvertAmounts
				increment ReceivableApplication.AdjustmentSequence
				ReceivableApplicationAdjustment = ReceivableApplication.AdjustmentSequence

				if  (ReceivableAdjustmentReasonType not entered)
					ReceivableAdjustmentReasonType	= AdjustmentReason.ReceivableAdjustmentReasonType

				if  (Description not entered)
					Description					= AdjustmentReason.Description

				if  (DistributionAccount not entered)
					DistributionAccount			= AdjustmentReason.DistributionAccount

				CreateDate = current timestamp
			Exit Rules

				if (!GainLossAdjustment)
					if (PaymentAdjustment)

						invoke UpdateAppliedAmounts ReceivablePaymentRel
							invoked.BaseAdjustAmount					+= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.AdjustAmountTransactionCurrency	+= AdjustmentAmount.CurrencyAmount
						invoke UpdateCurrentBalance ReceivablePaymentRel.CompanyCustomerRel
							invoked.ChangeAmount						= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference
					else
						invoke UpdateAppliedAmounts ReceivableInvoiceDetailRel

							invoked.AdjustmentAmount.CurrencyAmount		+= AdjustmentAmount.CurrencyAmount

						invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel
							if (ReceivableApplication.ReceivableApplication.TransType.CreditMemo)
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							else
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference

					invoke UpdateAdjustAmounts ReceivableApplication
						invoked.Amount									= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount

				if (AdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
					CalculateReceivableYearPeriod.Company				= Company
					CalculateReceivableYearPeriod.EffectiveDate			= ReceivableApplicationRel.GeneralLedgerDate
					LocalTrigger										= CalculateReceivableYearPeriod.CalculateYearPeriod

					if  (ReceivableApplication.DebitCustomer entered)
						if (!CurrentCompanyCustomerPeriodTotalsRel exists)
							invoke Create CurrentCompanyCustomerPeriodTotalsRel

						invoke AddToBuckets CurrentCompanyCustomerPeriodTotalsRel
							invoked.Type			= "W"
							invoked.Period			= CalculateReceivableYearPeriod.CurrentPeriod
							invoked.Amount			= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
					else
					if  (TransientCustomer entered)
						if (!LocalCompanyCustomerPeriodTotalsRel exists)
							invoke Create LocalCompanyCustomerPeriodTotalsRel

						invoke AddToBuckets LocalCompanyCustomerPeriodTotalsRel
							invoked.Type			= "W"
							invoked.Period			= CalculateReceivableYearPeriod.CurrentPeriod
							invoked.Amount			= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount


		Update is an Update Action
			valid when (AllowUpdateAndDelete)
			Entrance Rules
				LocalCurrencyTable = Company.DerivedCurrencyTable
				BypassProjectDateEdit = true	
				include ConvertAmounts
			Action Rules
				constraint (!AdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
					"CannotModifyTransferAdjustments"

				constraint (AllowUpdateAndDelete)
					"CannotUpdateAdjustmentIfPosted,PendingApproval,TransferredToAP,Reversed,MarkAsPaid,OrHasAnOverAppliedAdjustment"  

				if (ReceivableInvoiceDetailRel exists)
					constraint (ReceivableInvoiceDetailRel.DerivedOpenAmount >= (AdjustmentAmount.CurrencyAmount - old AdjustmentAmount.CurrencyAmount))
						"Adjustment<AdjustmentAmount.CurrencyAmount>MustBeLessThanInvoiceOpen<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.DerivedOpenAmount>ForInvoice<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice>"
				include CommonEdits
			Exit Rules
				include ReviewStatusAndCheckDiscount
				if (!GainLossAdjustment)
					if (AdjustmentAmount.CurrencyAmount changed
					or  AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount changed)
						WorkAmount		= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount - old AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
						WorkAmount2		= AdjustmentAmount.CurrencyAmount - old AdjustmentAmount.CurrencyAmount
						if (PaymentAdjustment)
							invoke UpdateAppliedAmounts ReceivablePaymentRel
								invoked.BaseAdjustAmount					+= WorkAmount
								invoked.AdjustAmountTransactionCurrency	+= WorkAmount2

							invoke UpdateCurrentBalance ReceivablePaymentRel.CompanyCustomerRel
								invoked.ChangeAmount						= WorkAmount
								invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
								invoked.PrmBalanceType						= DerivedBalanceType
								invoked.PrmReference						= DerivedReference
						else
							invoke UpdateAppliedAmounts ReceivableInvoiceDetailRel

								invoked.AdjustmentAmount.CurrencyAmount		+= WorkAmount2

							invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel
								if (ReceivableApplication.ReceivableApplication.TransType.CreditMemo)
									invoked.ChangeAmount					= WorkAmount
								else
									invoked.ChangeAmount					= WorkAmount * -1
								invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
								invoked.PrmBalanceType						= DerivedBalanceType
								invoked.PrmReference						= DerivedReference

						invoke UpdateAdjustAmounts ReceivableApplication
							invoked.Amount									= WorkAmount
				if(Company.FinanceEnterpriseGroup.BODTrigger and AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)
					invoke TriggerReceivableTracker ReceivablePaymentRel





				if (SubmitForApprovalValid)
					invoke SubmitForApproval
					
		UpdateFromAdjustmentMaintenance is an Update Action
			restricted

		Delete is a Delete Action

			valid when (AllowDelete)
			Entrance Rules	
				constraint (AllowDelete)
					"CannotDeleteAdjustmentIfPosted,PendingApproval,TransferredToAP,Reversed,MarkAsPaid,OrHasAnOverAppliedAdjustment"  
				include DeleteEntranceRules	

			Action Rules
				constraint (!AdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
					"CannotDeleteTransferAdjustments"

				if (ReceivableInvoiceDetailRel exists)
					constraint (ReceivableInvoiceDetailRel.DerivedOpenAmount + old AdjustmentAmount.CurrencyAmount >= 0)
						"DeletingAdjustmentWouldCauseInvoiceOpenAmountToBeLessThanZero"

				include CommonEdits

				if (!GainLossAdjustment)
					if (PaymentAdjustment)
						invoke UpdateAppliedAmounts ReceivablePaymentRel
							invoked.BaseAdjustAmount					-= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.AdjustAmountTransactionCurrency	-= AdjustmentAmount.CurrencyAmount
						invoke UpdateCurrentBalance ReceivablePaymentRel.CompanyCustomerRel
							invoked.ChangeAmount						= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference
					else
						invoke UpdateAppliedAmounts ReceivableInvoiceDetailRel

							invoked.AdjustmentAmount.CurrencyAmount						-= AdjustmentAmount.CurrencyAmount

						invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel
							if (ReceivableApplication.ReceivableApplication.TransType.CreditMemo)
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							else
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference

					invoke UpdateAdjustAmounts ReceivableApplication
						invoked.Amount									= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
					if(Company.FinanceEnterpriseGroup.BODTrigger and AdjustmentReason.ReceivableAdjustmentReasonType.TaxWithholding)
						invoke TriggerReceivableTracker ReceivablePaymentRel





			Exit Rules
				if (!ReceivableApplication.ReceivableApplicationAdjustment set exists
				and  ReceivableApplication.ApplicationAmount.CurrencyAmount not entered
				and  ParentContext != "ReceivableApplication")
					if (ReceivableApplication.Status.UnreleasedCashApplication)
						invoke UnreleasedCashApplication.Delete ReceivableApplication
					else
					if (ReceivableApplication.Status.RequiresAuditListing)
						invoke RequiresAuditListing.Delete ReceivableApplication
					else
					if (ReceivableApplication.Status.AvailableForPosting)
						invoke AvailableForPosting.Delete ReceivableApplication

		DeleteFromAdjustmentMaintenance is a Delete Action
			restricted
			Entrance Rules	
				include DeleteEntranceRules	

			Action Rules
				if (!GainLossAdjustment)
					if (PaymentAdjustment)
						invoke UpdateAppliedAmounts ReceivablePaymentRel
							invoked.BaseAdjustAmount					-= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.AdjustAmountTransactionCurrency	-= AdjustmentAmount.CurrencyAmount
						invoke UpdateCurrentBalance ReceivablePaymentRel.CompanyCustomerRel
							invoked.ChangeAmount						= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference
					else
						invoke UpdateAppliedAmounts ReceivableInvoiceDetailRel

							invoked.AdjustmentAmount.CurrencyAmount		-= AdjustmentAmount.CurrencyAmount

						invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel
							if (ReceivableApplication.ReceivableApplication.TransType.CreditMemo)
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							else
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference

					invoke UpdateAdjustAmounts ReceivableApplication
						invoked.Amount									= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
			Exit Rules
				if (!ReceivableApplication.ReceivableApplicationAdjustment set exists
				and  ReceivableApplication.ApplicationAmount.CurrencyAmount not entered
				and  ParentContext != "ReceivableApplication")
					if (ReceivableApplication.Status.UnreleasedCashApplication)
						invoke UnreleasedCashApplication.Delete ReceivableApplication
					else
					if (ReceivableApplication.Status.RequiresAuditListing)
						invoke RequiresAuditListing.Delete ReceivableApplication
					else
					if (ReceivableApplication.Status.AvailableForPosting)
						invoke AvailableForPosting.Delete ReceivableApplication

		Purge is a Purge Action
			restricted
			Entrance Rules
				invoke Delete ReceivableApplicationAdjustmentApprovalHistory set
				invoke Purge ReceivableApplicationAdjustmentAttachmentRel

		ReversePosted is an Instance Action
			restricted
			Parameters
				PrmAdjusted is Boolean
			Action Rules
				Adjusted = true
				if (!GainLossAdjustment and !PrmAdjusted)
					if (PaymentAdjustment)
						invoke UpdateAppliedAmounts ReceivablePaymentRel
							invoked.BaseAdjustAmount					-= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.AdjustAmountTransactionCurrency	-= AdjustmentAmount.CurrencyAmount
						invoke UpdateCurrentBalance ReceivablePaymentRel.CompanyCustomerRel
							invoked.ChangeAmount						= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference
					else
						invoke UpdateAppliedAmounts ReceivableInvoiceDetailRel

							invoked.AdjustmentAmount.CurrencyAmount		-= AdjustmentAmount.CurrencyAmount

						invoke UpdateCurrentBalance ReceivableInvoiceDetailRel.CompanyCustomerRel
							if (ReceivableApplication.ReceivableApplication.TransType.CreditMemo)
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							else
								invoked.ChangeAmount					= AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.TransactionDate						= ReceivableApplication.DerivedTransactionDate
							invoked.PrmBalanceType						= DerivedBalanceType
							invoked.PrmReference						= DerivedReference






		SelectForRTM is an Instance Action
			valid when (DisplaySelectForRTM)
			Entrance Rules
				constraint (IsNotCurr
				and			ReceivableApplication.TransType.Invoice
				and			ReceivableApplication.CreditTransaction.CreditType.Payment
				and			!ReceivableApplication.Reverse
				and			!ReceivableApplication.ApplicationSource.ReversalOfApplications)
					"AdjustmentNotAvailableForReturnToMaker"

			Action Rules
				invoke Create RTMPaymentAdjustmentRel
					invoked.Company											= Company
					invoked.ReceivablePaymentHeader							= ReceivablePaymentHeaderRel.ReceivablePaymentHeader
					invoked.Customer										= ReceivablePaymentRel.Customer
					invoked.RTMPayment										= ReceivablePaymentRel.PaymentNumber
					invoked.RTMPaymentAdjustment.DebitCompany				= Company
					invoked.RTMPaymentAdjustment.DebitType					= ReceivableApplication.TransType
					invoked.RTMPaymentAdjustment.DebitTransactionNumber		= ReceivableApplication.Invoice
					invoked.RTMPaymentAdjustment.DebitPaymentSequence		= ReceivableApplication.PaymentSeq
					invoked.RTMPaymentAdjustment.DebitBatchNumber			= ReceivableApplication.BatchNumber
					invoked.RTMPaymentAdjustment.ApplicationSequence		= ReceivableApplication.ApplicationSequence
					invoked.RTMPaymentAdjustment.AdjustmentSequence			= ReceivableApplicationAdjustment

					invoked.DebitCustomer									= ReceivableApplication.DebitCustomer

					invoked.Amount											= CreditAdjustAmount

		UnselectForRTM is an Instance Action
			valid when (AllowUnselectForRTM)
			Action Rules
				invoke Delete RTMPaymentAdjustmentRel

		SelectForPendingAdjustment is an Instance Action
			default label is "Select"
			valid when (AllowSelectForPendingAdjustment)
			Parameters
				ReceivableReasonType
				PrmReasonCode			is a ReceivableReason
				PrmDisputeCode			is a ReceivableInvoiceDisputeCode
				PrmGeneralLedgerDate	is Date
				PrmDescription			is a Description
				PrmDistributionAccount	is a TransactionCodeBlock	
			Parameter Rules
				ReceivableReasonType
					initial value is "AD"
					default to "AD"
				PrmReasonCode
					constraint (PrmReasonCode != "CURR")
						"CURRIsAReservedReasonCode"
				PrmDistributionAccount
					BypassProjectDateEdit = true	
					LocalGeneralLedgerSystemCode = "AR"
					if(PrmGeneralLedgerDate entered)
						TransientTransactionDate = PrmGeneralLedgerDate
						TransientPostingDate	 = PrmGeneralLedgerDate
					else
						TransientTransactionDate = ReceivableApplication.GeneralLedgerDate
						TransientPostingDate	 = ReceivableApplication.GeneralLedgerDate
			Action Rules
				constraint (!AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
					"OverAppliedAdjustmentsCannotBeUpdated;DeleteAndRe-createInReceivableApplicationReviewOrReviewPayments"
				constraint (!ReviewStatus.PendingApproval)
					"CannotSelect;_\AdjustmentIsPendingForApprovalFrom_\Reviewer"
				if (PrmReasonCode not entered)
					LocalOpenTransAmount = (ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
											-(ReceivableInvoiceDetailRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
											+ReceivableInvoiceDetailRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)+AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)
					constraint (LocalOpenTransAmount > 0)
							"CannotDelete;OpenAmountWillResultToNegativeAmount"

				if  (AdjustmentReason.ReceivableAdjustmentReasonType.OverShort
				and  Company.PreventWriteOffBeforeTransactionGLDate)
					if(PrmGeneralLedgerDate not entered)
						PrmGeneralLedgerDate = ReceivableApplication.GeneralLedgerDate

					if (IsPaymentAdjustment)
						constraint (PrmGeneralLedgerDate >= ReceivablePaymentRel.GeneralLedgerDate)
							"Adjustment_\Global_\Ledger_\Date<PrmGeneralLedgerDate>MustBeGreaterThanOrEqualTo_\Payment_\Global_\Ledger_\Date<ReceivablePaymentRel.GeneralLedgerDate>"
					else
					if (ReceivableInvoiceDetailRel exists)
						constraint (PrmGeneralLedgerDate >= ReceivableInvoiceByRecInvoiceTypeRel.GeneralLedgerDate)
							"Adjustment_\Global_\Ledger_\Date<PrmGeneralLedgerDate>MustBeGreaterThanOrEqualTo_\Invoice_\Global_\Ledger_\Date<ReceivableInvoiceByRecInvoiceTypeRel.GeneralLedgerDate>"

				invoke Create ReceivablePendingAdjustment
					invoked.Company																			= Company
					invoked.ReceivablePendingAdjustment.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= ReceivableApplication.TransType
					invoked.ReceivablePendingAdjustment.ReceivableInvoiceDetail.Invoice						= ReceivableApplication.Invoice
					invoked.ReceivablePendingAdjustment.ReceivableInvoiceDetail.PaymentSeq					= ReceivableApplication.PaymentSeq
					invoked.ReceivablePendingAdjustment.BatchNumber											= ReceivableApplication.BatchNumber
					invoked.ReceivablePendingAdjustment.ApplicationSequence									= ReceivableApplication.ApplicationSequence
					invoked.ReceivablePendingAdjustment.AdjustmentSequence									= ReceivableApplicationAdjustment
					invoked.User																			= actor
					invoked.Customer																		= ReceivableApplication.ReceivableInvoiceDetailRel.Customer
					invoked.Source																			= "R"
					invoked.ReasonCode																		= PrmReasonCode
					invoked.DisputeCode																		= PrmDisputeCode
					invoked.GeneralLedgerDate																= PrmGeneralLedgerDate
					invoked.DistributionAccount																= PrmDistributionAccount
					if (PrmDescription entered)
						invoked.Description																	= PrmDescription
					else
						invoked.Description																	= PrmReasonCode.Description
					if (PrmReasonCode not entered)
						if (ReviewStatus.ReviewNeedsApproval)
							invoked.ActionCode														= "R"
						else
						if (PrmDisputeCode entered)
							invoked.ActionCode														= "B"
						else
							invoked.ActionCode														= "D"
					else
						invoked.ActionCode															= "C"

		UnSelectForPendingAdjustment is an Instance Action
			default label is "Unselect"  
			valid when (AllowUnSelectForPendingAdjustment)
			Action Rules
				invoke Purge ReceivablePendingAdjustmentRel

		Expense is an Instance Action
			default label is "Expense"
			valid when (IsValidForExpense)				
			Parameters
				PrmGeneralLedgerDate	is Date
				PrmDescription			is a Description
				PrmDistributionAccount	is a TransactionCodeBlock	
			Parameter Rules
				PrmDistributionAccount
					initial value is AdjustmentReason.DistributionAccount 
					BypassProjectDateEdit = true	
					LocalGeneralLedgerSystemCode = "AR"
					if(PrmGeneralLedgerDate entered)
						TransientTransactionDate = PrmGeneralLedgerDate
						TransientPostingDate	 = PrmGeneralLedgerDate
					else
						TransientTransactionDate = ReceivableApplication.GeneralLedgerDate
						TransientPostingDate	 = ReceivableApplication.GeneralLedgerDate
					required
			Action Rules
				constraint (!AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
					"OverAppliedAdjustmentsCannotBeUpdated;DeleteAndRe-createInReceivableApplicationReviewOrReviewPayments"
				invoke Create ReceivablePendingAdjustment
					invoked.Company																			= Company
					invoked.ReceivablePendingAdjustment.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= ReceivableApplication.TransType
					invoked.ReceivablePendingAdjustment.ReceivableInvoiceDetail.Invoice						= ReceivableApplication.Invoice
					invoked.ReceivablePendingAdjustment.ReceivableInvoiceDetail.PaymentSeq					= ReceivableApplication.PaymentSeq
					invoked.ReceivablePendingAdjustment.BatchNumber											= ReceivableApplication.BatchNumber
					invoked.ReceivablePendingAdjustment.ApplicationSequence									= ReceivableApplication.ApplicationSequence
					invoked.ReceivablePendingAdjustment.AdjustmentSequence									= ReceivableApplicationAdjustment
					invoked.User																			= actor
					invoked.Source																			= "A"
					invoked.ReasonCode																		= AdjustmentReason
					invoked.GeneralLedgerDate																= PrmGeneralLedgerDate
					invoked.DistributionAccount																= PrmDistributionAccount
					invoked.Description																		= PrmDescription
					invoked.ActionCode																		= "E"


		CopyApplicationCreditTransactionData is a Set Action 
			restricted
			Instance Selection
				where (true)
			Action Rules
				Instance Rules
					if (AdjustmentCreditTransaction.CreditCompany not entered)
						AdjustmentCreditTransaction.CreditCompany	= ReceivableApplication.CreditTransaction.CreditCompany
					if (AdjustmentCreditTransaction.CreditBatch not entered)
						AdjustmentCreditTransaction.CreditBatch		= ReceivableApplication.CreditTransaction.CreditBatch
					if (AdjustmentCreditTransaction.CreditSequence not entered)
						AdjustmentCreditTransaction.CreditSequence	= ReceivableApplication.CreditTransaction.CreditSequence

		
		SubmitForApproval is an Instance Action
			completion message is "ReceivableApplicationAdjustmentHasBeenSubmittedToTheQueueForProcessing"
	 		valid when (SubmitForApprovalValid)
			
			Action Rules
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam	
				constraint (ApprovalCode.HasApprovalLevels)
					"CannotSubmitForApproval;TheApprovalCodeHasNoApprovalLevels"
				constraint (!ApprovalCode.HasTeamWithNoMembers)
					"CannotSubmitForApproval;TheApprovalCodeHasATeamWithNoMembers"
				constraint (!ApprovalCode.HasInvalidEscalations)
					"CannotSubmitForApproval;TheApprovalCodeHasInvalidEscalationSettings"
				constraint (!ApprovalCode.HasInactiveResources)
					"CannotSubmitForApproval;TheApprovalCodeHasInactiveResources"
				include GetNextApprovalLevel
				ApprovalLevel	= LocalApprovalLevel
				Approver		= LocalApprover
				ApproverTeam	= LocalApproverTeam

				include InitiateApprovalProcessFlow
			
			Exit Rules
				
				invoke Create ReceivableApplicationAdjustmentApprovalHistory
					invoked.Company								= Company
					invoked.ReceivableApplication				= ReceivableApplication
					invoked.ReceivableApplicationAdjustment		= ReceivableApplicationAdjustment
					invoked.ActionTaken							= 3 
					invoked.ActionTakenBy						= actor.agent(Employee).Employee

				ReviewStatus	= ReviewStatus.PendingApproval

		UpdateApprovalLevel is an Instance Action
			restricted
			Parameters
				ParmEscalate	is Boolean
				ParmReassign	is Boolean
			Action Rules
				if (ParmReassign)
					if (ReassignToApprovalLevel entered)
						ApprovalLevel = ReassignToApprovalLevel.ApprovalLevel
						initialize ReassignToApprovalLevel
				else
				if (ParmEscalate)
					include GetNextEscalationApprovalLevel
					ApprovalLevel		= LocalApprovalLevel
					Approver			= LocalApprover
					ApproverTeam		= LocalApproverTeam
				else
					include GetNextApprovalLevel
					ApprovalLevel		= LocalApprovalLevel
					Approver			= LocalApprover
					ApproverTeam		= LocalApproverTeam

		UpdateApprovalHistory is an Instance Action
			restricted
			Parameters
				ParmActor		is an Actor
				ParmAction		is Numeric 2
				ParmApproved	is Boolean
			Action Rules
				LocalActor				= ParmActor

				if (ParmActor = actor)
					LocalFinanceResource = actor.agent(Employee).Employee
				else
					LocalFinanceResource = first AgentRel.BusinessObjectRef(Employee).Employee
				if (ParmApproved)
					include ApprovedEmailNotification
				invoke Create ReceivableApplicationAdjustmentApprovalHistory
					invoked.Company								= Company
					invoked.ReceivableApplication				= ReceivableApplication
					invoked.ReceivableApplicationAdjustment		= ReceivableApplicationAdjustment
					invoked.ActionTaken							= ParmAction
					invoked.ActionTakenBy						= LocalFinanceResource
					


		PflowApprove is an Instance Action  
			restricted
			Action Rules

				ReviewStatus	= ReviewStatus.ApprovalCompleteOrNotNeeded
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam

		
		Reviewed is an Instance Action    
			valid when (IsManualApprovalValid)

			Entrance Rules
				if (AdjustmentReason.RequiresApproval)
					confirmation required
						"ThisWillBypassTheProcessFlowApprovalProcess;DoYouWantToContinue?"
			Action Rules
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam

				cancel ReceivableApplicationAdjustmentApproval process

				invoke Create ReceivableApplicationAdjustmentApprovalHistory
					invoked.Company								= Company
					invoked.ReceivableApplication				= ReceivableApplication
					invoked.ReceivableApplicationAdjustment		= ReceivableApplicationAdjustment
					invoked.ActionTaken							= 1 
					invoked.ActionTakenBy						= actor.agent(Employee).Employee

				ReviewStatus	= ReviewStatus.ApprovalCompleteOrNotNeeded

		PflowReject is an Instance Action
			restricted
			action comment required
			Action Rules
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam

				LocalComment = action comment
				include RejectionEmailNotification

				invoke Create ReceivableApplicationAdjustmentApprovalHistory
					invoked.Company								= Company
					invoked.ReceivableApplication				= ReceivableApplication
					invoked.ReceivableApplicationAdjustment		= ReceivableApplicationAdjustment
					invoked.ActionTaken							= 2 
					invoked.ActionTakenBy						= actor.agent(Employee).Employee
					invoked.Comment								= action comment
				ReviewStatus	= ReviewStatus.UnreleasedAdjustment

		PflowRejectWithReasonCode is an Instance Action
			restricted
			subject is ReceivableApplicationAdjustmentReject
			reason code required
			action comment required
			
			Action Rules
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam

				LocalComment = action comment
				LocalRejectReason	= reason code
				include RejectionEmailNotification

				invoke Create ReceivableApplicationAdjustmentApprovalHistory
					invoked.Company								= Company
					invoked.ReceivableApplication				= ReceivableApplication
					invoked.ReceivableApplicationAdjustment		= ReceivableApplicationAdjustment
					invoked.ActionTaken							= 2 
					invoked.ActionTakenBy						= actor.agent(Employee).Employee
					invoked.Comment								= action comment
					invoked.ActionReason						= reason code
				ReviewStatus	= ReviewStatus.UnreleasedAdjustment

		ManualReject is an Instance Action
			valid when (IsManualRejectValid)
			subject is ReceivableApplicationAdjustmentReject
			Parameters
				PrmComment		is Alpha size up to 500

			Action Rules
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam

				cancel ReceivableApplicationAdjustmentApproval process

				LocalComment = PrmComment
				include RejectionEmailNotification

				invoke Create ReceivableApplicationAdjustmentApprovalHistory
					invoked.Company								= Company
					invoked.ReceivableApplication				= ReceivableApplication
					invoked.ReceivableApplicationAdjustment		= ReceivableApplicationAdjustment
					invoked.ActionTaken							= 2 
					invoked.ActionTakenBy						= actor.agent(Employee).Employee
					invoked.Comment								= PrmComment
				ReviewStatus	= ReviewStatus.UnreleasedAdjustment

		AddAttachment is an Instance Action
			default label is "AddAttachment"
			valid when (ApplicationAdjustmentAttachmentNotExists)
			Parameters
				PrmAttachment	is an Attachment
			
			Parameter Rules
				PrmAttachment
					required
						"AttachmentIsRequired"
			
			Action Rules
				invoke Create ReceivableApplicationAdjustmentAttachment
					invoked.Company									= Company
					invoked.ReceivableApplicationAdjustment			= ReceivableApplicationAdjustment
					invoked.ReceivableApplication					= ReceivableApplication
					invoked.Attachment								= PrmAttachment	
