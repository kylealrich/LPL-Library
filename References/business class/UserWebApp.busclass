UserWebApp is a BusinessClass
    owned by repository
    prefix is URWA
    framework type is LPLConfiguration

	Patterns
		disable EffectiveDated
		disable AsOfDateProcessing
		implements DynamicCreation
		implements ConfigurationMetadata
		implements AuditLogEntryActions

    Ontology
        symbolic key is UserWebApp

    Persistent Fields
    	Owner is like Actor // LMRK-97977 Was "is Actor". Likely meant to be "is an Actor". Changed to "like" so we have the same dict type but without changing existing functionality.
    	UserWebAppName is LPLName



    	Status 			is a UserObjectStatus
    	LPL             is LPL
    	Description		is a ConfigDescription
    	UserEditorType
    	ErrorText		is Text

    Derived Fields
		ParseText is a NativeField
			type is Text

	Local Fields
		LocParseText 	    is Text
		LocParsed 		    is Boolean  
		LocName             is LPLName
		
    Field Rules
		Owner
			default to actor

    	UserWebAppName
    		required

		LPL
			required

				if (Status.Active)
					LocParseText = ParseText
	
				if (not LocParseText = blank)




					confirmation required
						"<LocParseText>:_User_Web_AppIsInvalid.__DoYouWantToSaveAnyway?"

					Status = Status.Invalid
					ErrorText = LocParseText

		UserEditorType
			default to UserEditorType.LPL

		Status
			if (Status.Active)
				initialize ErrorText

    Conditions
		HasErrorText
			default label is "ErrorTextEntered"
			when (ErrorText entered)

	Relations
		WebAppRel
			one-to-one relation to WebApp
			Field Mapping uses symbolic key
				related.WebApp		= UserWebAppName

        ConfigEntityRel
            one-to-one relation to ConfigEntity
            Field Mapping uses ByEntityType
                related.EntityType = 20
                related.BusinessView = blank
                related.Name = UserWebAppName
                related.Actor = blank

		LocalDuplicateRel
    		one-to-many relation to UserWebApp
			Field Mapping uses WebAppSet
				related.UserWebAppName = LocName

    Actions
    	Create is a Create Action
    		Local Fields
    			ValidName is LPLName

			Exit Rules
    			invoke FireEvent
    			
    	CreateFromSnapshot is a Create Action
    		restricted
    		bypass field rules


    	Update is an Update Action
    		Exit Rules
    			invoke FireEvent
    			
    	UpdateFromSnapshot is an Update Action
    		restricted
    		bypass field rules


    	Delete is a Delete Action
    		Exit Rules
    			invoke FireEvent
    	
    	DeleteFromSnapshot is a Delete Action
    		restricted
    		bypass relational integrity rules


    	Activate is an Instance Action
    		valid when (not Status.Active)
    		Action Rules
    			LocParseText = ParseText

    			if (not LocParseText = blank)
					constraint(LocParseText = blank)
						"<LocParseText>:_User_Web_AppIsInvalid._Cannot_Activate."

    			Status = Status.Active
    			initialize ErrorText

			Exit Rules
    			invoke FireEvent

    	Deactivate is an Instance Action
    		valid when (not Status.Inactive)
    		Action Rules
    			Status = Status.Inactive

			Exit Rules
    			invoke FireEvent

    	Invalidate is an Instance Action
    		valid when (not Status.Invalid)
    		restricted
    		Action Rules
    			Status = Status.Invalid

			Exit Rules
    			invoke FireEvent

		FireEvent is an Instance Action
			restricted


        CreateConfiguration is a Create Action
        	completion message is "ConfigurationCreated"
            Parameters
                WebApp

			Parameter Rules
				WebApp
					required

            Entrance Rules
                LocName = WebApp
                constraint (!LocalDuplicateRel exists)
                    "ConfigurationExistsFor_'<LocName>'"

            Action Rules
                invoke Create this instance
                    invoked.UserWebAppName = WebApp
                    invoked.LPL = WebAppRel.BaseLPL

		TagItem is an Instance Action
			Parameters
				ParamConfigurationTag is a ConfigurationTag
					default label is "Tag"
			
			Entrance Rules
				if (Status.Inactive)
					confirmation required
						"UserWebAppIsInactive,TagAnyway?"
							
				if (Status.Invalid)
					confirmation required
						"UserWebAppIsInvalid,TagAnyway?"
								
			Action Rules
				invoke Create ConfigurationTagItem
					invoked.ConfigurationTag = ParamConfigurationTag
					invoked.ConfigurationTagItem.Reference = reference to this instance		  

    Sets
    	WebAppSet
    		indexed
			Sort Order
				UserWebAppName


