AssetTransfer is a BusinessClass
    owned by am
    prefix is ATF
    classic name is AMASSETTRF

    Ontology
        symbolic key is AssetTransfer
            classic set name is ATFSET1
            classic name is PROCESS-SEQ

    Patterns
        implements ContextualParent
        implements StaticJava
        disable AuditIndex

    Persistent Fields

        AssetTransferTo
            classic name for AssetTransferTo.ToTagNumber is TO-TAG-NBR
            classic name for AssetTransferTo.ToAssetObjectID is TO-OBJ-ID
            classic name for AssetTransferTo.ToAssetType.Type is TO-ASSET-TYPE
            classic name for AssetTransferTo.ToAssetType.SubType is TO-SUB-TYPE
            classic name for AssetTransferTo.ToAssetAccountGroup is TO-ACCT-GRP
            classic name for AssetTransferTo.ToAssetAccountingUnit is TO-ACCT-UNIT
            classic name for AssetTransferTo.ToAssetAccountingUnitGroup is TO-AU-GROUP
            classic name for AssetTransferTo.ToAssetLocationDetail is TO-LOC-DTL
            classic name for AssetTransferTo.ToTotalItemQuantity is TO-IT-TOT-QTY
            classic name for AssetTransferTo.ToItemTotalBaseCost is TO-IT-TOTCSTBS
            classic name for AssetTransferTo.ToItemTotalBaseTax is TO-IT-TOTTAXBS
            classic name for AssetTransferTo.ToItemTotalTransactionCost is TO-IT-TOTCSTTR
            classic name for AssetTransferTo.ToItemTotalTransactionTax is TO-IT-TOTTAXTR
            classic name for AssetTransferTo.ToCurrency is TO-CURR-CODE
            classic name for AssetTransferTo.ToLastAssetItemPurchaseDate is TO-IT-LAST-DT
            classic name for AssetTransferTo.ToLastSequenceNumber is TO-IT-LAST-SEQ
            classic name for AssetTransferTo.ToAssetProject is TO-ACTIVITY
        TransferStatus                     			is AlphaUpper size 1
            classic name is TRF-STATUS
            States
                NotReleased value is "N"
                Released    value is "R"
        TransferDate                       			is Date
        PostingDate									is Date
        TransferType                       			is AlphaUpper size 1
            States
                IntraCompany value is "T"
                InterCompany value is "I"
        FullOrPartial
            classic name is FULL-PARTIAL
        TransferQuantity                   			is a TotalItemQuantity
            classic name is TRF-QUANTITY
        Description
        TagNumber
            classic name is TAG-NBR
        AssetLease
        Classification
        AssetGroup
        AssetObjectID
            classic name is OBJ-ID
        AssetCategory
        Simulated                          			is Boolean
        WorkInProcess                      			is Boolean
            classic name is WORK-IN-PROC
        TaxExempt                          			is Boolean
        Used                               			is Boolean
        TotalItemQuantity
            classic name is ITEM-TOT-QTY
        ItemTotalBaseCost                  			is an InternationalAmount
            classic name is IT-TOT-CSTBASE
        TransferFromAssetItemTotalBaseCost 			is an InternationalAmount
            sql name is TFromAssetItemTotalBaseCost
            classic name is FR-IT-TOTCSTBS
        ItemTotalBaseTax                   			is an InternationalAmount
            classic name is IT-TOT-TAXBASE
        TransferFromAssetItemTotalBaseTax  			is an InternationalAmount
            sql name is TFromAssetItemTotalBaseTax
            classic name is FR-IT-TOTTAXBS
        ItemTotalTransactionCost           			is an InternationalAmount
            classic name is IT-TOT-CSTTRAN
        ItemTotalTransactionTax            			is an InternationalAmount
            classic name is IT-TOT-TAXTRAN
        BaseNumberOfDecimals
            classic name is BASE-ND
        ToBaseNumberOfDecimals             			is a BaseNumberOfDecimals
            classic name is TO-BASE-ND
        TransactionNumberOfDecimals        			is a CurrencyNumberOfDecimals
            classic name is TRAN-ND
        ToTransactionNumberOfDecimals      			is a CurrencyNumberOfDecimals
            classic name is TO-TRAN-ND
        Currency
            classic name is CURRENCY-CODE
        LastAssetItemPurchaseDate          			is Date
            classic name is ITEM-LAST-DATE
        LastSequenceNumber                 			is a Sequence
            classic name is ITEM-LAST-SEQ
			disable Auditing

        AssetType
            classic name for AssetType.Type 		is ASSET-TYPE
            classic name for AssetType.SubType		is SUB-TYPE
        Company                            			is an AssetCompany
        AssetAccountingUnit						 	is a FinanceCodeBlockNoAccountFull
        	default label is "DefaultTransactionDimensions"
            classic name for AssetAccountingUnit.AccountingUnit is ACCT-UNIT
      	AssetProject	 							is a FinanceCodeBlockProjectOnly
      		default label is "AssetProject"
        	classic name for AssetProject.Project is ACTIVITY
        DepreciationExpenseProject					is a FinanceCodeBlockProjectOnly
      		default label is "DepreciationExpenseOverride"
            classic name for DepreciationExpenseProject.Project is DEP-EXP-ACTVTY
        AssetLocation
            classic name is LOCATION-NAME
            default label is "Location"
        AssetDivision
        	default label is "Division"
            classic name is DIVISION
        AssetAccountGroup
            classic name is ACCT-GRP
        AssetAccountingUnitGroup
        	default label is "AssetDimensionGroup"
            classic name is AU-GROUP
        AssetOwner									is an Employee
        	context of FinanceEnterpriseGroup
        OriginatingCompany                 			is Numeric size 4
            classic name is ORIG-CO
        SelectName                         			is like MassSelection
        CreationDate                       			is TimeStamp
        CreatedBy                          			is an Operator 
        	holds pii
            classic name is CREATOR-ID

    Local Fields
		LocalBook							is a Book
		LocalDepBook						is a Book
		LocalToDepBook						is a Book
		LocalLedger							is like Ledger
		NewAsset							is an Asset view
		SavedAsset							is an Asset
		SavedAssetObjectID					is like AssetObjectID

		ToRequiredBooks						is Numeric 2
		FromRequiredBooks					is Numeric 2
		LocalAsset							is an Asset
		LocalAssetItem						is like AssetItem
		LocalAccountingUnit					is like AccountingUnit
		LocalFund 							is an AssetFundField
		LocalProject						is like Project
		LocalAccountingEntity				is like AccountingEntity
  		LocalFinanceDimension1				is like FinanceDimension1
  		LocalFinanceDimension2				is like FinanceDimension2
  		LocalFinanceDimension3				is like FinanceDimension3
  		LocalFinanceDimension4				is like FinanceDimension4
  		LocalFinanceDimension5				is like FinanceDimension5
   		LocalFinanceDimension6				is like FinanceDimension6
   		LocalFinanceDimension7				is like FinanceDimension7
  		LocalFinanceDimension8				is like FinanceDimension8
  		LocalFinanceDimension9				is like FinanceDimension9
  		LocalFinanceDimension10				is like FinanceDimension10
  		LocalFundAmount						is like InternationalAmount
        LocalTotalFundAmount				is like InternationalAmount
		LocalFundAllocatedAmount			is like InternationalAmount
		AllocatedAmount						is like InternationalAmount
		AllocatedPercent					is Percent size 9.6
  		LocalFundPercent					is Percent size 9.6
		LocalFundPercentContribution 		is Percent size 9.6
        LocalPercentContribution			is Percent size 9.6
  		LocalCounter						is Numeric 3
		FundCount 							is Numeric 3
		FromItemTransferCreate				is Boolean
		AssetTransferFundCount				is Numeric 3
		LocalTransferQuantity				is a TotalItemQuantity
		BypassActiveCodeBlockEdit

	Transient Fields
		TransientCreateFromBatch			is Boolean

		TransientPostingDate				is Date
		TransientAssetTransfer				is like AssetTransfer
		TransientPosting					is AlphaUpper size 1
		TransferQuantityComplete			is Boolean
		CreateFromAssetTransferCreate		is Boolean
		TransientFromTransferCreate			is Boolean

	Context Fields
		TransferDateRange					is a DateRange

	Derived Fields


		AssetTransferCompanyName is a MessageField
			"<AssetTransferTo.ToAssetCompany>-<AssetTransferTo.ToAssetCompany.Name>"

		AssetTransferToDimensionGroup is a MessageField
			"<AssetTransferTo.ToAssetAccountingUnitGroup>-<AssetTransferTo.ToAssetAccountingUnitGroup.Description>"

		AssetTranferToGroup is a MessageField
			"<AssetTransferTo.ToAssetGroup>-<AssetTransferTo.ToAssetGroup.Description>"

		AssetTransferToLocation is a MessageField
			"<AssetTransferTo.ToAssetLocation>-<AssetTransferTo.ToAssetLocation.Description>"

		AssetTransferToDivision is a MessageField
			"<AssetTransferTo.ToAssetDivision>-<AssetTransferTo.ToAssetDivision.Description>"

		AssetTransferToAccountGroup is a MessageField
			"<AssetTransferTo.ToAssetAccountGroup>-<AssetTransferTo.ToAssetAccountGroup.Description>"

		AssetTransferToOwner is a MessageField
			"<AssetTransferTo.ToAssetOwner>-<AssetTransferTo.ToAssetOwner.Name.FirstAndLastName>"

		DerivedCreateDate is a DerivedField
            type is Date
            restricted
            return TransferDate


		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforAssetTransfer"

		ContextMessageText is a MessageField
			restricted
			"Asset<Asset>AssetTransfer<AssetTransfer>"

		FullTransferMessage					is a MessageField
			restricted
			"Full_Transfer"

		PartialTransferMessage				is a MessageField
		 	restricted
		 	"Partial_Transfer"

		ConditionalTransferAssetDisplay		is a DerivedField
			type is Alpha 30
			if (FullTransfer)
				return FullTransferMessage
			else
				return PartialTransferMessage

		ContextTransferredAsset				is a MessageField
			"TransferredAsset_<AssetTransferTo.ToAsset>"

		ContextUser							is a MessageField
			"User<CreatedBy>"

		TotalUnreleasedTransactionAmount	is a DerivedField
			type is Decimal size 19.3
			restricted
			return (sum UnreleasedToAssetTransactionsRel.TransactionAmount)

		TotalTransferQuantity				is a DerivedField
			type is like ItemQuantity
			return (sum AssetItemTransfer set.ToItemQuantity)

		TotalTransferBaseCost				is a DerivedField
			type is Decimal size 19.3
			return (sum AssetItemTransfersRel.ToBaseItemCost)

		TotalTransferTransactionCost		is a DerivedField
			type is Decimal size 19.3
			return (sum AssetItemTransfersRel.ToTransactionItemCost)

		TotalTransferBaseTax				is a DerivedField
			type is Decimal size 19.3
			restricted
			return (sum AssetItemTransfer set.ToBaseItemTax)

		TotalTransferTransCost				is a DerivedField
			type is Decimal size 19.3
			restricted
			return (sum AssetItemTransfer set.ToTransactionItemCost)

		TotalTransferTransTax				is a DerivedField
			type is Decimal size 19.3
			restricted
			return (sum AssetItemTransfer set.ToTransactionItemTax)

		TotalAssetItemQuantity				is a DerivedField
			type is like ItemQuantity
			restricted
			return (sum AssetItemRel.ItemQuantity)

        AssetDescription is a StringField
            type is Alpha size 30

            classic name is AST-DESCRIP
            Asset.Description

		FullMessage				is a MessageField
			"Full"

		PartialMessage			is a MessageField
			"Partial"

		FullOrPartialLabel		is a DerivedField
			type is MessageField
			if (TransferQuantity < Asset.EnteredQuantity)
				return PartialMessage
			else
				return FullMessage

		AllowIntercompanyTransferBalancing is a DerivedField
			type is Boolean
			if (Company.BalanceTransfers =  AssetTransferTo.ToAssetCompany.BalanceTransfers)
				return true
			else
				return false

    Conditions

		RecordIsSelected
			restricted
			when (TransferDateRange not entered
			or    TransferDate within TransferDateRange)
		IsTagEntered
			restricted
			when (TagNumber entered)
		IsToTagEntered
			restricted
			when (AssetTransferTo.ToTagNumber entered)
		IsTagTransfered
			when ((!(TagNumber not entered and AssetTransferTo.ToTagNumber not entered))
			and (TagNumber != AssetTransferTo.ToTagNumber))
        IsAssetGroupTransfered
        	when ((!(AssetGroup not entered and AssetTransferTo.ToAssetGroup not entered))
			and (AssetGroup != AssetTransferTo.ToAssetGroup))
        IsLocationTransfered
        	when ((!(AssetLocation not entered and AssetTransferTo.ToAssetLocation not entered))
			and (AssetLocation != AssetTransferTo.ToAssetLocation))
        IsAssetDivTransfered
        	when ((!(AssetDivision not entered and AssetTransferTo.ToAssetDivision not entered))
			and (AssetDivision != AssetTransferTo.ToAssetDivision))
        IsAssetTypeTransfered
        	when ((!(AssetType not entered and AssetTransferTo.ToAssetType not entered))
			and (AssetType != AssetTransferTo.ToAssetType))
        IsAcctGroupTransfered
        	when ((!(AssetAccountGroup not entered and AssetTransferTo.ToAssetAccountGroup not entered))
			and (AssetAccountGroup != AssetTransferTo.ToAssetAccountGroup))
        IsAcctUnitGrpTransfered
        	when ((!(AssetAccountingUnitGroup not entered and AssetTransferTo.ToAssetAccountingUnitGroup not entered))
			and (AssetAccountingUnitGroup != AssetTransferTo.ToAssetAccountingUnitGroup))
        IsAcctUnitTransfered
        	when ((!(AssetAccountingUnit not entered and AssetTransferTo.ToAssetAccountingUnit not entered))
			and (AssetAccountingUnit != AssetTransferTo.ToAssetAccountingUnit))
        IsExpenseProTransfered
        	when ((!(Asset.DepreciationExpenseProject not entered and AssetTransferTo.ToDepreciationExpenseProject not entered))
			and (Asset.DepreciationExpenseProject != AssetTransferTo.ToDepreciationExpenseProject))
        IsAstProTransfered
        	when ((!(Asset.AssetProject not entered and AssetTransferTo.ToAssetProject not entered))
			and (Asset.AssetProject != AssetTransferTo.ToAssetProject))


		IsAssetOwnerTransfered
			when ((!(AssetOwner not entered and AssetTransferTo.ToAssetOwner not entered))
			and (AssetOwner != AssetTransferTo.ToAssetOwner))

        TransferStatusNotReleased
        	restricted
            classic name is ATFSET7
            when (TransferStatus.NotReleased)

        AssetNotEntered
        	restricted
            classic name is BLANK-LINE
            when (Asset not entered)

        DivisionEntered
        	restricted
            classic name is DIVISION-EXIST
            when (AssetDivision exists)

        IsInterCompanyTransfer
        	restricted
            classic name is INTERCO-TRF
            when (Company != AssetTransferTo.ToAssetCompany)

        IsIntraCompanyTransfer
        	restricted
            classic name is INTRACO-TRF
            when (Company = AssetTransferTo.ToAssetCompany)

        LocationNameEntered
        	restricted
            classic name is LOCATION-EXIST
            when (AssetLocation exists)

        IsReleased
        	restricted
            when (TransferStatus.Released)

        UnReleased
        	restricted
            when (TransferStatus.NotReleased)

        IsTransferred
        	restricted
            classic name is TRANSFER
            when (Asset entered
            and   TransferStatus.Released)

        AssetBookTransferExists
        	restricted
            classic name is TRFBOOKS-EXIST
            when (first AssetBookTransfersRel exists)

        AssetTypeExists
        	restricted
            classic name is TYPE-EXIST
            when (AssetType exists)

		FullTransfer
			restricted
			when (FullOrPartial.Full)

		PartialTransfer
			restricted
			when (FullOrPartial.Partial)

		TransferQuantityChange
			when (TransferQuantity changed)

		ActiveTransfer
			restricted
			when (Asset.Status = "3"
			and  Asset.AssetProcess = "TRF"
			and	Asset != AssetTransferRel.Asset)


		UpdateAllowed
			restricted
			when (!Asset.AssetProcess.Disposal
			and !Asset.Status.Disposed)

		SecurityGroupAllowsAccess
			restricted
			when (actor.context.CompanySecurityGroup = blank
			or    CompanySecurityGroupMemberRel exists)

		DisplayTransferTransactions
			restricted
			when (FullTransfer
			and TransferTransactionsRel exists)

		DisplayTransferBookTransactions
			restricted
			when (FullTransfer
			and TransferBookTransactionsRel exists)

		DisplayPartialTransferTransactions
			when (PartialTransfer
			and PartialTransferTransactionsRel exists)

		DisplayPartialTransferBookTransactions
			when (PartialTransfer
			and PartialTransferBookTransactionsRel exists)

		HasImpairment
			when AssetImpairmentRel exists

		DisplayAssetImpairmentTransactions
			when (HasImpairment
			and ImpairmentTransactionsRel exists)

		DisplayAssetImpairmentBookTransactions
			when (HasImpairment
			and ImpairmentBookTransactionsRel  exists)

		PartialTransferTagEntered
			when (PartialTransfer
			and IsTagEntered)

		FullTransferToTagEntered
			when (FullTransfer
			and IsToTagEntered)

		FundOverride
			when ((AssetTransferTo.ToAssetType not entered
			or (AssetTransferTo.ToAssetType entered
			and AssetTransferTo.ToAssetType.AllocateDepreciationExpense = false)
			and Asset.FundOverride))

		ItemFundAssignment
			restricted
			when (AssetTransferTo.ToAssetType.AllocateDepreciationExpense = false
			and !FundOverride
			and Asset.FundAccounting)

		FundAllocationUpdated
			restricted
			when (any AssetTransferFundsRel.ModifiedDuringTransfer)

		TransferFundsExist
			when (Asset.FundOverride and AssetItemTransferFundsRel exists)

		ItemTransferFundAllocationsComplete
			when (all AssetItemTransfersRel.FundAllocationComplete)
		ToTransferCheck
			when(AssetTransferTo.TransferFieldsSame
			and (AssetTransferTo.ToAssetLocationDetail entered
			or AssetTransferTo.ToAssetLocationDetail changed))

	Relations
		CurrentBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company	= Company

		CompanySecurityGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup   = actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company                 	= Company

		PostingBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.IsPostingBook)

		CurrentPostingCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses CompanyCurrentPostingBook
				related.Company		= Company
				related.PostingBook	= true

		ToCompanyCurrentPostingWithLedgerRel
			one-to-many relation to BookCalendar
			Field Mapping uses CompanyCurrentPostingBook
				related.Company		= AssetTransferTo.ToAssetCompany
				related.PostingBook	= true
				related.Book		= BookWithLedgerRel.Book

		BookWithLedgerRel
			one-to-many relation to Book
			Field Mapping uses ByLedger
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Ledger					= LocalLedger

		FutureBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Book					= LocalBook
				related.Company					= Company
			Instance Selection
				where (related.BookCalendar.YearEndDate >= TransferDate)


		ToCompanyCurrentBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company	= AssetTransferTo.ToAssetCompany

		ToCompanyCurrentPostingCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses CompanyCurrentPostingBook
				related.Company		= AssetTransferTo.ToAssetCompany
				related.PostingBook	= true

		ToCompanyCurrentCalendarTransferDateRel
			one-to-many relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Book					= LocalBook
				related.Company					= AssetTransferTo.ToAssetCompany
			Instance Selection
				where (related.BookCalendar.YearEndDate >= TransferDate
				and related.BookCalendar.YearBeginDate <= TransferDate)

		ToCompanyFutureBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Book					= LocalBook
				related.Company					= AssetTransferTo.ToAssetCompany
			Instance Selection
				where (related.BookCalendar.YearEndDate >= TransferDate)

		ToCompanyHistoryBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Book					= LocalBook
				related.Company					= AssetTransferTo.ToAssetCompany
			Instance Selection
				where (related.BookCalendar.YearBeginDate <= TransferDate)

		AssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= LocalBook

		FromAssetInactiveBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.Book.Active	= false)


        AssetBookTransfersRel
            classic name is AMASTBKTRF
            one-to-many relation to AssetBookTransfer
            delete cascades
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset         			= Asset
                related.AssetTransfer 			= AssetTransfer

        ToAssetBookRel
            one-to-one relation to AssetBookTransfer
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
                related.Asset					= Asset
                related.AssetTransfer 			= AssetTransfer
                related.Book                	= LocalBook

        FromAssetBookRel
            one-to-one relation to AssetBookTransfer
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
                related.Asset					= Asset
                related.AssetTransfer 			= AssetTransfer
                related.Book                	= LocalBook

		AssetRepairRel
			one-to-many relation to AssetRepair
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset         			= Asset

		AssetTransferRel
			one-to-many relation to AssetTransfer
				Field Mapping uses symbolic key
					related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
	                related.Asset         			= Asset

		AssetRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset 						= Asset

		ToAssetRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset 						= AssetTransferTo.ToAsset

		UniqueAssetsTagRel
			one-to-many relation to Asset
			Field Mapping uses ByCompanyTagAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company 				= AssetTransferTo.ToAssetCompany
				related.TagNumber				= AssetTransferTo.ToTagNumber

		ToAssetItemRel
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset 						= AssetTransferTo.ToAsset

		AssetItemTransfersRel
            one-to-many relation to AssetItemTransfer
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetTransfer			= AssetTransfer

		AssetItemRel
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset 						= Asset

		UnreleasedAssetTransactionsRel is an AssetTransaction set
			Instance Selection
				where (related.TransactionStatus.Unreleased
				or related.TransactionStatus.Memo
				and related.AssetProcess.Transfer)

		TransferAssetTransactionsRel is an AssetTransaction set
			Instance Selection
				where ((related.TransactionStatus.Unreleased
				or related.TransactionStatus.Memo)
				and related.AssetProcess.Transfer
				and related.ProcessSequence = AssetTransfer)

		UnreleasedToAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
                related.Asset				= AssetTransferTo.ToAsset
			Instance Selection
				where ((related.TransactionStatus 	= "M"
				or related.TransactionStatus 		= "U")
                and related.Company					= Company)

		AssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses Set6
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TransactionStatus			= "U"
				related.AssetProcess				= "TRF"
			Instance Selection
				where (related.Asset				= AssetTransferTo.ToAsset
				or related.Asset					= Asset)

		PartialTransferTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where ((related.Asset				= AssetTransferTo.ToAsset
				or 	related.Asset					= Asset)
				and related.AssetProcess 			= "TRF"
				and related.ProcessSequence			= AssetTransfer)

		PartialTransferBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
			Instance Selection
				where((related.Asset					= AssetTransferTo.ToAsset
				or 	related.Asset						= Asset)
				and	related.AssetProcess.Transfer
				and related.ProcessSequence				= AssetTransfer)

		TransferTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= AssetTransferTo.ToAsset
			Instance Selection
				where (related.AssetProcess				= "TRF"
				and  related.ProcessSequence			= AssetTransfer)

		TransferBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= AssetTransferTo.ToAsset
			Instance Selection
				where (related.AssetProcess.Transfer
				and related.ProcessSequence				= AssetTransfer)

		ImpairmentTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset
			Instance Selection
				where (related.AssetProcess				= "IMP"
				or	   related.AssetProcess				= "IMA")

		ImpairmentBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset
			Instance Selection
				where (related.AssetProcess				= "IMP"
				or	   related.AssetProcess				= "IMA")

		TransferToAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set5
			Instance Selection
				where ((related.Asset				= AssetTransferTo.ToAsset
				or related.Asset					= Asset)
				and related.TransactionStatus			= "U")

		MassSelectionBookDetailRel
			one-to-many relation to MassSelectionBookDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.MassSelectionType				= "T"
				related.MassSelection 					= SelectName
			Instance Selection
				where (related.MassSelectionBookDetail.Book = LocalBook)

		MassSelectionDepBookDetailRel
			one-to-many relation to MassSelectionBookDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.MassSelectionType				= "T"
				related.MassSelection 					= SelectName
			Instance Selection
				where (related.MassSelectionBookDetail.Book = LocalDepBook)


		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	= "AM"
				related.Company					= Asset.Company

		FromRequiredBooksRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= Asset.Company
			Instance Selection
				where (related.RequiredBook)

		ToRequiredBooksRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransferTo.ToAssetCompany
			Instance Selection
				where (related.RequiredBook)

		FromBookInToCompanyRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
				related.Book					= LocalBook
			Instance Selection
				where (related.PostingBook
				and related.Book.Ledger			= LocalBook.Ledger)

		FromNonPostingBookInToCompanyRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= AssetTransfer.AssetTransferTo.ToAssetCompany
				related.Book					= LocalBook
			Instance Selection
				where (related.Book.Ledger		= LocalBook.Ledger
				and (!related.PostingBook))

		AssetImpairmentRel
			one-to-one relation to AssetImpairment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetImpairment			= Asset.LastAssetImpairment


		PurgeAssetItemTransferRel is an AssetItemTransfer set
			Instance Selection
				include deleted records

		PurgeAssetBookTransferRel is an AssetBookTransfer set
			Instance Selection
				include deleted records

		AssetImpairmentBookRel
			one-to-many relation to AssetImpairmentBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetImpairment			= Asset.LastAssetImpairment

		ToAssetImpairmentBookRel
			one-to-one relation to AssetImpairmentBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= LocalAsset
				related.AssetImpairment			= AssetTransferTo.ToAsset.LastAssetImpairment
				related.Book					= LocalBook

		AssetDepreciationBookTransfersRel
            one-to-many relation to AssetBookTransfer
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset         			= Asset
                related.AssetTransfer 			= AssetTransfer
            Instance Selection
           		where (!related.Book.Impairment)

        AssetImpairmentBookTransfersRel
            one-to-many relation to AssetBookTransfer
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset         			= Asset
                related.AssetTransfer 			= AssetTransfer
            Instance Selection
           		where (related.Book.Impairment)

		AssetFundsRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset
				related.RecordType				= 0

		ToAssetFundsRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= AssetTransferTo.ToAsset
				related.RecordType				= 0

		AssetItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= Asset
				related.RecordType				= 0

		ToAssetItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= AssetTransferTo.ToAsset
				related.RecordType				= 0

		AssetTransferFundsRel
			one-to-many relation to AssetTransferFund
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset

		ToAssetTransferFundsRel
			one-to-many relation to AssetTransferFund
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= AssetTransferTo.ToAsset

		AssetItemTransferFundsRel
			one-to-many relation to AssetItemTransferFund
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		ToAssetItemTransferFundsRel
			one-to-many relation to AssetItemTransferFund
			delete cascades
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		LocalAssetItemTransferFundsRel
			one-to-many relation to AssetItemTransferFund
			Field Mapping uses ByTransferFundItem
				related.Asset					= Asset
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10		= LocalFinanceDimension10

		LocalAssetTransferFundRel
			one-to-one relation to AssetTransferFund
			Field Mapping uses ByAssetTransferFund
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10		= LocalFinanceDimension10

		AssetItemsRel
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Asset					= Asset

		AssetItemTransferRel
			one-to-one relation to AssetItemTransfer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetTransfer			= AssetTransfer
				related.AssetItem 				= LocalAssetItem

    Sets

        Set2
            indexed
            Instance Selection
                where (IsReleased)
            Sort Order
                Company
                Asset
                AssetTransfer

        Set3
            indexed
            Instance Selection
                where (IsReleased)
            Sort Order
                AssetLocation
                Asset
                AssetTransfer

        Set4
            indexed
            Instance Selection
                where (IsReleased)
            Sort Order
                AssetDivision
                Asset
                AssetTransfer

        Set5
            indexed
            Instance Selection
                where (IsReleased)
            Sort Order
                Company
                AssetType
                Asset
                AssetTransfer

        Set6
            indexed
            Instance Selection
                where (TransferStatusNotReleased)
            Sort Order
                AssetTransferTo.ToAssetCompany
                AssetTransferTo.ToAsset
                Asset
                AssetTransfer

        Set7
            indexed
            Instance Selection
                where (TransferStatusNotReleased)
            Sort Order
                Asset
                AssetTransfer

        Set8
            indexed
            Instance Selection
                where (IsReleased)
            Sort Order
                Asset
                AssetTransfer

        Set9
            indexed
            Instance Selection
                where (IsReleased)
            Sort Order
                AssetTransferTo.ToAssetCompany
                AssetTransferTo.ToAsset
                Asset
                AssetTransfer

        ToAssetTransfer
            indexed
            Sort Order
                AssetTransferTo.ToAssetCompany
                AssetTransferTo.ToAsset
                Asset
                AssetTransfer

	Field Rules
		AssetTransferTo
			required
			constraint (AssetTransferTo.HasAllRequiredAccountingUnits)
				"TransferToDefaultDimensionsRequiredOrDimensionGroupIncomplete"

		TransferDate
			required
			constraint (ToCompanyCurrentPostingCalendarsRel exists)
				"PostingCalendarMustBeDefinedForCompany<AssetTransferTo.ToAssetCompany>Book"





			if (TransferDate < Asset.LastAssetItemPurchaseDate)
				confirmation required
					"Warning:TransferDateIsPriorToPurchaseDate"

		PostingDate
			default to TransferDate
			if (CompanySystemClosingControlRel exists
			and CompanySystemClosingControlRel.Control = true)
				constraint (PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
					"PostingDateIsOutsideSystemControlValidEntryDateRange"

		Company
			initial value is Asset.Company
			default to Asset.Company

			constraint (Company.PendingYearEndCount not entered)
				"CannotTransferAsset;YearEndIsPending"				//"CannotTransfer,YearEndPending"        
			constraint (!Company.PeriodCloseRelease.InProcess)
				"CannotTransferAsset;PeriodOrYearEndCloseIsInProcess"	//"PeriodOrYear-endCloseIsInProcess" 

		TransferType
			if (IsIntraCompanyTransfer)
				TransferType = "T"		
			else
				TransferType = "I"		

		FullOrPartial
			initial value is "F"

		TransferQuantity
			initial value is Asset.EnteredQuantity
			if (TransferQuantity < TotalItemQuantity
			or (action type.Create
			and TransferQuantity < Asset.EnteredQuantity))
				FullOrPartial = "P"
			else
				FullOrPartial = "F"
			required
			if (action type.Create)
				constraint (TransferQuantity <= Asset.EnteredQuantity)
					"TransferQuantity<TransferQuantity>CannotExceedAssetTotalItemQuantity<Asset.EnteredQuantity>"
			else
				constraint (TransferQuantity <= TotalItemQuantity)
					"TransferQuantity<TransferQuantity>CannotExceedAssetTotalItemQuantity<TotalItemQuantity>"
			constraint (TransferQuantity >=0)
				"TransferQuantityCannotBeNegative"

		TransferStatus
			default to TransferStatus.NotReleased

		Description
			initial value is Asset.Description
			default to Asset.Description

		TagNumber
			initial value is Asset.TagNumber
			if (action type.Create)
				default to Asset.TagNumber

		AssetLease
			initial value is Asset.AssetLease
			default to Asset.AssetLease

		Classification
			initial value is Asset.Classification
			default to Asset.Classification

		AssetGroup
			initial value is Asset.AssetGroup
			if (action type.Create)
				default to Asset.AssetGroup

		AssetObjectID
			initial value is Asset.AssetObjectID
			default to Asset.AssetObjectID

		AssetCategory
			initial value is Asset.AssetCategory
			default to Asset.AssetCategory

		Simulated
			initial value is Asset.Simulated
			default to Asset.Simulated

		WorkInProcess
			initial value is Asset.WorkInProcess
			default to Asset.WorkInProcess

		TaxExempt
			initial value is Asset.TaxExempt
			default to Asset.TaxExempt

		Used
			initial value is Asset.Used
			default to Asset.Used

		Currency
			initial value is Asset.Currency
			default to Asset.Currency

		AssetLocation
			initial value is Asset.AssetLocation
			if (action type.Create)
				default to Asset.AssetLocation

		AssetDivision
			initial value is Asset.AssetDivision
			if (action type.Create)
				default to Asset.AssetDivision

		AssetType
			initial value is Asset.AssetType
			default to Asset.AssetType

		AssetAccountGroup
			initial value is Asset.AssetAccountGroup
			default to Asset.AssetAccountGroup

		AssetAccountingUnit
			initial value is Asset.AssetAccountingUnit
			if (action type.Create)
				default to Asset.AssetAccountingUnit

		AssetAccountingUnitGroup
			initial value is Asset.AssetAccountingUnitGroup
			default to Asset.AssetAccountingUnitGroup

		AssetOwner
			initial value is Asset.AssetOwner
			if (action type.Create)
				default to Asset.AssetOwner

		AssetProject
			initial value is Asset.AssetProject.Project
			if (action type.Create)
				default to Asset.AssetProject.Project

		DepreciationExpenseProject
			initial value is Asset.DepreciationExpenseProject
			if (action type.Create)
				default to Asset.DepreciationExpenseProject

		BaseNumberOfDecimals
			initial value is Asset.BaseNumberOfDecimals
			default to Asset.BaseNumberOfDecimals

		ToBaseNumberOfDecimals
			initial value is AssetTransferTo.ToAssetCompany.CurrencyNumberOfDecimals
			default to AssetTransferTo.ToAssetCompany.CurrencyNumberOfDecimals

		TransactionNumberOfDecimals
			initial value is Currency.NumberOfDecimals
			default to Currency.NumberOfDecimals

		ToTransactionNumberOfDecimals
			initial value is AssetTransferTo.ToCurrency.NumberOfDecimals
			default to AssetTransferTo.ToCurrency.NumberOfDecimals

        ItemTotalBaseCost
			initial value is Asset.ItemTotalBaseCost
			default to Asset.ItemTotalBaseCost

        ItemTotalBaseTax
			initial value is Asset.ItemTotalBaseTax
			default to Asset.ItemTotalBaseTax

        ItemTotalTransactionCost
			initial value is Asset.ItemTotalTransactionCost
			default to Asset.ItemTotalTransactionCost

        ItemTotalTransactionTax
			initial value is Asset.ItemTotalTransactionTax
			default to Asset.ItemTotalTransactionTax

		TotalItemQuantity
			initial value is Asset.TotalItemQuantity
			default to Asset.TotalItemQuantity

		CreationDate
			default to current timestamp

		CreatedBy
			default to actor

	Rule Blocks
		ValidateTransfer
			if (Company != AssetTransferTo.ToAssetCompany)
				for each PostingBookRel
					LocalLedger = each.Book.Ledger
					constraint (ToCompanyCurrentPostingWithLedgerRel exists)
						"NoMatchingPostingBookFor<LocalBook>WithLedger<LocalLedger>InCompany<AssetTransferTo.ToAssetCompany>"
				constraint (Company.BalanceTransfers = AssetTransferTo.ToAssetCompany.BalanceTransfers)
					"TheFromAndToCompanyMustHaveTheSameTransferBalancingOptionSelected"


		UpdateTransferFunds
			if (FullOrPartial.Full)
				for each AssetFundsRel  
					LocalAccountingEntity 	= each.AccountingEntity
					LocalAccountingUnit 	= each.AccountingUnit
					LocalProject 			= each.Project
					LocalFund 				= each.Fund
					LocalFinanceDimension1	= each.FinanceDimension1
					LocalFinanceDimension2 	= each.FinanceDimension2
					LocalFinanceDimension3 	= each.FinanceDimension3
					LocalFinanceDimension4 	= each.FinanceDimension4
					LocalFinanceDimension5 	= each.FinanceDimension5
					LocalFinanceDimension6 	= each.FinanceDimension6
					LocalFinanceDimension7 	= each.FinanceDimension7
					LocalFinanceDimension8 	= each.FinanceDimension8
					LocalFinanceDimension9 	= each.FinanceDimension9
					LocalFinanceDimension10 = each.FinanceDimension10
					if (LocalAssetTransferFundRel exists)
						invoke Update LocalAssetTransferFundRel
							invoked.TransactionAmount	= each.TransactionAmount
							invoked.PercentContribution	= each.PercentContribution

					else
						invoke Create AssetTransferFund
							invoked.Asset				= Asset
							invoked.AssetTransfer 		= AssetTransfer
							fill in fields from each
				if (!Asset.FundOverride)
					invoke Delete AssetItemTransferFundsRel
					for each AssetItemFundsRel

						invoke CreateFromItem AssetItemTransferFundsRel
							invoked.Asset			= Asset
							invoked.AssetTransfer 	= AssetTransfer
							invoked.AssetItem		= each.AssetItem
							LocalPercentContribution 	= each.PercentContribution
							LocalFundAmount				= each.TransactionAmount
							fill in fields from each
					if (!TransientFromTransferCreate)
						include RefreshFundAllocation
			else
				include RefreshFundAllocation



		RefreshFundAllocation
			initialize LocalCounter
			if (FundOverride = false)
				initialize AllocatedAmount
				initialize AllocatedPercent
				initialize LocalCounter
				if (PartialTransfer)
					if (LocalAssetItem entered)
						invoke DeleteFromAsset AssetTransferFundsRel
					else
						invoke Delete ToAssetTransferFundsRel
					FundCount	= instance count of ToAssetItemTransferFundsRel
					for each ToAssetItemTransferFundsRel
						LocalCounter   				+= 1
						LocalAsset					= each.Asset

						LocalAccountingEntity		= each.AccountingEntity
						LocalAccountingUnit			= each.AccountingUnit
						LocalProject				= each.Project
						LocalFund					= each.Fund
						LocalFinanceDimension1		= each.FinanceDimension1
						LocalFinanceDimension2		= each.FinanceDimension2
						LocalFinanceDimension3		= each.FinanceDimension3
						LocalFinanceDimension4		= each.FinanceDimension4
						LocalFinanceDimension5		= each.FinanceDimension5
						LocalFinanceDimension6 		= each.FinanceDimension6
						LocalFinanceDimension7		= each.FinanceDimension7
						LocalFinanceDimension8		= each.FinanceDimension8
						LocalFinanceDimension9		= each.FinanceDimension9
						LocalFinanceDimension10 	= each.FinanceDimension10
						LocalFundAmount  			= each.TransactionAmount
						LocalFundPercent			= (LocalFundAmount / AssetTransferTo.ToItemTotalTransactionCost)
						if (LocalAssetTransferFundRel exists)
							LocalFundAllocatedAmount			= LocalAssetTransferFundRel.TransactionAmount
							LocalFundPercentContribution 		= LocalAssetTransferFundRel.PercentContribution
							invoke UpdateFromItemTransferFund LocalAssetTransferFundRel
								invoked.TransactionAmount	+=  LocalFundAmount
								invoked.PercentContribution = ((LocalFundAllocatedAmount + LocalFundAmount) / AssetTransferTo.ToItemTotalTransactionCost)
						else
							invoke CreateFromItemTransferFund LocalAssetTransferFundRel
								invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
								invoked.AssetTransfer			= AssetTransfer
								invoked.Asset					= LocalAsset
								invoked.AccountingEntity		= LocalAccountingEntity
								invoked.AccountingUnit			= LocalAccountingUnit
								invoked.Project					= LocalProject
								invoked.Fund					= LocalFund
								invoked.FinanceDimension1		= LocalFinanceDimension1
								invoked.FinanceDimension2		= LocalFinanceDimension2
								invoked.FinanceDimension3		= LocalFinanceDimension3
								invoked.FinanceDimension4		= LocalFinanceDimension4
								invoked.FinanceDimension5		= LocalFinanceDimension5
								invoked.FinanceDimension6		= LocalFinanceDimension6
								invoked.FinanceDimension7		= LocalFinanceDimension7
								invoked.FinanceDimension8		= LocalFinanceDimension8
								invoked.FinanceDimension9		= LocalFinanceDimension9
								invoked.FinanceDimension10		= LocalFinanceDimension10
								invoked.TransactionAmount	=  LocalFundAmount
								invoked.PercentContribution	= (LocalFundAmount / AssetTransferTo.ToItemTotalTransactionCost)


				else    


					LocalTotalFundAmount = Asset.ItemTotalTransactionCost
					initialize LocalCounter
					initialize AllocatedAmount
					initialize AllocatedPercent
					initialize FundCount
					invoke DeleteFromAsset AssetTransferFundsRel
					for each distinct ItemTransferFundFieldGroup in ToAssetItemTransferFundsRel
						LocalCounter += 1
					for each distinct ItemTransferFundFieldGroup in ToAssetItemTransferFundsRel
						FundCount += 1
						LocalAsset					= each.Asset
						LocalAccountingEntity		= each.AccountingEntity
						LocalAccountingUnit			= each.AccountingUnit
						LocalProject				= each.Project
						if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
							LocalFund 				= each.AccountingUnit
						else
							LocalFund				= each.FinanceDimension1
						LocalFinanceDimension1		= each.FinanceDimension1
						LocalFinanceDimension2		= each.FinanceDimension2
						LocalFinanceDimension3		= each.FinanceDimension3
						LocalFinanceDimension4		= each.FinanceDimension4
						LocalFinanceDimension5		= each.FinanceDimension5
						LocalFinanceDimension6 		= each.FinanceDimension6
						LocalFinanceDimension7		= each.FinanceDimension7
						LocalFinanceDimension8		= each.FinanceDimension8
						LocalFinanceDimension9		= each.FinanceDimension9
						LocalFinanceDimension10 	= each.FinanceDimension10
						LocalFundAmount  			= sum LocalAssetItemTransferFundsRel.TransactionAmount
						invoke CreateFromItemTransferFund LocalAssetTransferFundRel
							LocalPercentContribution		= (LocalFundAmount / LocalTotalFundAmount)
							invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
							invoked.AssetTransfer			= AssetTransfer
							invoked.Asset					= LocalAsset
							invoked.FinanceDimension1		= LocalFinanceDimension1
							if (FundCount < LocalCounter)
								invoked.TransactionAmount	=  LocalFundAmount
								invoked.PercentContribution	=  LocalPercentContribution
								AllocatedAmount				+= LocalFundAmount
								AllocatedPercent 			+= LocalPercentContribution
							else
								invoked.TransactionAmount	=  (LocalTotalFundAmount - AllocatedAmount)
								invoked.PercentContribution	=  (1 - AllocatedPercent)
			else 
				if (PartialTransfer)
					if (FromItemTransferCreate) 
						initialize AllocatedAmount
						initialize AllocatedPercent
						initialize LocalCounter
						FundCount	= instance count of AssetFundsRel
						for each AssetFundsRel
							LocalAsset					= each.Asset
							LocalAccountingEntity		= each.AccountingEntity
							LocalAccountingUnit			= each.AccountingUnit
							LocalProject				= each.Project
							LocalFund					= each.Fund
							LocalFinanceDimension1		= each.FinanceDimension1
							LocalFinanceDimension2		= each.FinanceDimension2
							LocalFinanceDimension3		= each.FinanceDimension3
							LocalFinanceDimension4		= each.FinanceDimension4
							LocalFinanceDimension5		= each.FinanceDimension5
							LocalFinanceDimension6 		= each.FinanceDimension6
							LocalFinanceDimension7		= each.FinanceDimension7
							LocalFinanceDimension8		= each.FinanceDimension8
							LocalFinanceDimension9		= each.FinanceDimension9
							LocalFinanceDimension10 	= each.FinanceDimension10
							LocalFundPercent			= each.PercentContribution
							LocalFundAmount  			= each.TransactionAmount
							LocalCounter 				+= 1

							if (LocalAssetTransferFundRel exists)
								LocalFundAmount = LocalAssetTransferFundRel.PercentContribution * AssetTransferTo.ToItemTotalTransactionCost



								invoke Update LocalAssetTransferFundRel
									if (LocalCounter < FundCount)
										invoked.TransactionAmount	=  LocalFundAmount
										AllocatedAmount				+=  LocalFundAmount
										AllocatedPercent 			+=  LocalAssetTransferFundRel.PercentContribution
									else
										invoked.TransactionAmount	=  AssetTransferTo.ToItemTotalTransactionCost - AllocatedAmount
										invoked.PercentContribution	= (1 - AllocatedPercent)



							else
								LocalFundAmount = LocalFundPercent * AssetTransferTo.ToItemTotalTransactionCost
								invoke Create LocalAssetTransferFundRel
									invoked.AssetTransfer			= AssetTransfer
									invoked.FinanceDimension1		= LocalFinanceDimension1
									if (LocalCounter < FundCount)
										invoked.TransactionAmount	+=  LocalFundAmount
										invoked.PercentContribution =  	LocalFundPercent
										AllocatedAmount				+=  LocalFundAmount
										AllocatedPercent 			+=  LocalFundPercent
									else
										invoked.TransactionAmount	=  AssetTransferTo.ToItemTotalTransactionCost - AllocatedAmount
										invoked.PercentContribution	= (1 - AllocatedPercent)
					else   
						if (sum AssetTransferFundsRel.PercentContribution = 1) 
							initialize AllocatedAmount
							initialize AllocatedPercent
							initialize LocalCounter
							FundCount	= instance count of AssetTransferFundsRel
							for each AssetTransferFundsRel
								LocalCounter 					+= 1
								LocalFundAmount					= each.PercentContribution * AssetTransferTo.ToItemTotalTransactionCost
								invoke UpdateFromAssetGenerate each

									if (LocalCounter < FundCount)
										invoked.TransactionAmount  		= LocalFundAmount
										AllocatedAmount					+=  LocalFundAmount
									else
										invoked.TransactionAmount	=  AssetTransferTo.ToItemTotalTransactionCost - AllocatedAmount
						else 
							for each AssetTransferFundsRel
								LocalFundAmount					= each.PercentContribution * AssetTransferTo.ToItemTotalTransactionCost
								invoke UpdateFromAssetGenerate each
									invoked.TransactionAmount  		= LocalFundAmount

	Actions
		Create is a Create Action
			valid when (UpdateAllowed)
			Entrance Rules
				BypassActiveCodeBlockEdit = true
				if (FromAssetInactiveBookRel exist)
					confirmation required
						"Warning:TransferringAnAssetWhichContainsInactiveBooks,SelectYesToProceed"
				invoke Released.Transfer Asset
				if (AssetTransferTo.ToAssetCompany.RequireUniqueTags = true)
					if ((IsTagTransfered
					and IsToTagEntered
					and IsIntraCompanyTransfer)
					or (IsInterCompanyTransfer
					and IsToTagEntered))
						if (TransferQuantity < Asset.EnteredQuantity)
							constraint (UniqueAssetsTagRel not exists)
								"RequiredUniqueTagsFlagIsSetOnCompany;TagNumberMustBeUnique"
						else
							constraint (UniqueAssetsTagRel not exists)
								"TagNumber<AssetTransferTo.ToTagNumber>IsInUse"

			Action Rules
				if (IsInterCompanyTransfer)
					FromRequiredBooks 	= instance count of FromRequiredBooksRel
					ToRequiredBooks		= instance count of ToRequiredBooksRel
					constraint (FromRequiredBooks = ToRequiredBooks)
						"NumberOfRequiredBooksOnFromAndToSideMustBeEqual"
				constraint (!ToTransferCheck)
					"TransferRequiresAnUpdatedTransferToValue"
				include ValidateTransfer
				if (FullTransfer)
					ItemTotalTransactionCost = Asset.ItemTotalTransactionCost

			Exit Rules
				if (FullTransfer)
					AssetTransferTo.ToAsset				= Asset
					AssetTransferTo.ToAssetObjectID		= AssetObjectID
					for each Asset.AssetItem set
						LocalTransferQuantity		+= each.ItemQuantity
						invoke Create AssetItemTransfer
							fill in fields from each
							invoked.Asset			= Asset
							invoked.AssetTransfer	= AssetTransfer
							invoked.ToItemQuantity	= each.ItemQuantity
							if (Asset.FundOverride 	= false
							and LocalTransferQuantity 		= AssetTransfer.TransferQuantity)
								TransferQuantityComplete 	= true

					for each Asset.AssetBook set
						LocalBook = each.Book
						if (!each.Disposed)
							LocalBook = each.Book
							if (AssetTransfer.TransferType.InterCompany
							and !(FromBookInToCompanyRel exists
							or FromNonPostingBookInToCompanyRel exists))
								invoke InterCompanyCreate AssetBookTransfer
									fill in fields from each
									invoked.Asset			= Asset
									invoked.AssetTransfer	= AssetTransfer
									invoked.ToAsset			= AssetTransfer.AssetTransferTo.ToAsset
									invoked.Book			= each.Book
							else
								invoke Create AssetBookTransfer
									fill in fields from each
									invoked.Asset			= Asset
									invoked.AssetTransfer	= AssetTransfer
									if (AssetTransfer.TransferType.InterCompany)
										invoked.ToAsset			= AssetTransfer.AssetTransferTo.ToAsset
										invoked.ToBook 			= each.Book
									if (TransferType.IntraCompany)
										invoked.ToBook		= each.Book
						else
							confirmation required
								"Book<LocalBook>HasBeenDisposedAndWillNotBeUpdated"				
					invoke UpdateFromTransfer Asset 
						invoked.PrmTagNumber					= AssetTransferTo.ToTagNumber
						invoked.PrmAssetGroup					= AssetTransferTo.ToAssetGroup
						invoked.PrmCompany						= AssetTransferTo.ToAssetCompany
						invoked.PrmCurrency						= AssetTransferTo.ToCurrency
						invoked.PrmAssetLocation				= AssetTransferTo.ToAssetLocation
						invoked.PrmAssetDivision				= AssetTransferTo.ToAssetDivision
						invoked.PrmAssetType					= AssetTransferTo.ToAssetType
						invoked.PrmAssetAccountGroup			= AssetTransferTo.ToAssetAccountGroup
						invoked.PrmAssetAccountingUnit			= AssetTransferTo.ToAssetAccountingUnit
						invoked.PrmAssetAccountingUnitGroup		= AssetTransferTo.ToAssetAccountingUnitGroup
						invoked.PrmItemTotalBaseCost			= AssetTransferTo.ToItemTotalBaseCost
						invoked.PrmItemTotalBaseTax				= AssetTransferTo.ToItemTotalBaseTax
						invoked.PrmItemTotalTransactionCost		= AssetTransferTo.ToItemTotalTransactionCost
						invoked.PrmItemTotalTransactionTax		= AssetTransferTo.ToItemTotalTransactionTax
						invoked.PrmDepreciationExpenseProject	= AssetTransferTo.ToDepreciationExpenseProject
						invoked.PrmAssetProject					= AssetTransferTo.ToAssetProject
						invoked.PrmAssetOwner					= AssetTransferTo.ToAssetOwner

				else
					if (Asset.FundAccounting)
						FromItemTransferCreate = true
						include UpdateTransferFunds

					invoke Unreleased.Create Asset
						assign result to NewAsset
						fill in fields from Asset
						invoked.AssetProcess					= "TRF"
						invoked.TagNumber						= AssetTransferTo.ToTagNumber
						invoked.AssetGroup						= AssetTransferTo.ToAssetGroup
						invoked.Company							= AssetTransferTo.ToAssetCompany
						invoked.AssetType						= AssetTransferTo.ToAssetType
						invoked.AssetAccountGroup				= AssetTransferTo.ToAssetAccountGroup
						invoked.AssetAccountingUnit				= AssetTransferTo.ToAssetAccountingUnit
						invoked.AssetAccountingUnitGroup		= AssetTransferTo.ToAssetAccountingUnitGroup
						invoked.DepreciationExpenseProject		= AssetTransferTo.ToDepreciationExpenseProject
						invoked.AssetDivision					= AssetTransferTo.ToAssetDivision
						invoked.AssetLocation					= AssetTransferTo.ToAssetLocation
						invoked.AssetProject					= AssetTransferTo.ToAssetProject
						if (AssetTransferTo.ToCurrency entered)
							invoked.Currency					= AssetTransferTo.ToCurrency
						invoked.LastAssetItemPurchaseDate		= AssetTransferTo.ToLastAssetItemPurchaseDate
						invoked.AssetOwner						= AssetTransferTo.ToAssetOwner
						initialize AssetTransferTo.ToTotalItemQuantity
						initialize invoked.AssetObjectID
						initialize invoked.LastAssetItem
						initialize invoked.LastAssetSequence
						initialize invoked.LastTransactionSequence
						initialize invoked.LastCommentSequence
						initialize invoked.CreationDate
						initialize invoked.CreatedBy

					SavedAsset			= NewAsset.Asset
					SavedAssetObjectID	= NewAsset.AssetObjectID

					AssetTransferTo.ToAsset			= SavedAsset
					AssetTransferTo.ToAssetObjectID	= SavedAssetObjectID


					if(AssetImpairmentRel exists)
						invoke CreateFromTransfer AssetImpairment
							fill in fields from AssetImpairmentRel
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Asset					= AssetTransferTo.ToAsset
							invoked.Status					= "U"



					if (Asset.FundAccounting)
						FromItemTransferCreate = true
						include UpdateTransferFunds


				if (Asset != AssetTransferTo.ToAsset)
					for each AssetRepairRel
						invoke Create AssetRepair
							fill in fields from each
							invoked.Asset			= AssetTransferTo.ToAsset


		CreateFromBatch is a Create Action
			restricted
			Action Rules
				BypassActiveCodeBlockEdit = true
				TransientCreateFromBatch = true


			Entrance Rules
				invoke Released.Transfer Asset

			Exit Rules
				include ValidateTransfer
				if (FullTransfer)
					AssetTransferTo.ToAsset				= Asset
					AssetTransferTo.ToAssetObjectID		= AssetObjectID
					for each Asset.AssetItem set
						invoke Create AssetItemTransfer
							fill in fields from each
							invoked.Asset			= Asset
							invoked.AssetTransfer	= AssetTransfer
							invoked.ToItemQuantity	= each.ItemQuantity




					for each Asset.AssetBook set
						LocalBook = each.Book
						if (!each.Disposed)					
							invoke Create AssetBookTransfer
								fill in fields from each
								invoked.Asset			= Asset
								invoked.AssetTransfer	= AssetTransfer
								invoked.TransientCreateFromBatch = TransientCreateFromBatch
								if(LocalBook.Impairment)

									LocalDepBook = each.ImpairmentBookOfOrigin
									if(MassSelectionBookDetailRel.MassSelectionBookDetail.Book = MassSelectionBookDetailRel.MassSelectionBookDetail.ToBook )
										invoked.ToBook = LocalBook
									else
										LocalToDepBook = MassSelectionBookDetailRel.MassSelectionBookDetail.ToBook
										invoked.ToBook = LocalToDepBook.ImpairmentBook
								else
									invoked.ToBook			= first MassSelectionBookDetailRel.MassSelectionBookDetail.ToBook
						else
							confirmation required
								"Book<LocalBook>HasBeenDisposedAndWillNotBeUpdated"	


					invoke UpdateFromTransfer Asset 
						invoked.PrmTagNumber					= AssetTransferTo.ToTagNumber
						invoked.PrmAssetGroup					= AssetTransferTo.ToAssetGroup
						invoked.PrmCompany						= AssetTransferTo.ToAssetCompany
						invoked.PrmCurrency						= AssetTransferTo.ToCurrency
						invoked.PrmAssetLocation				= AssetTransferTo.ToAssetLocation
						invoked.PrmAssetDivision				= AssetTransferTo.ToAssetDivision
						invoked.PrmAssetType					= AssetTransferTo.ToAssetType
						invoked.PrmAssetAccountGroup			= AssetTransferTo.ToAssetAccountGroup
						invoked.PrmAssetAccountingUnit			= AssetTransferTo.ToAssetAccountingUnit
						invoked.PrmAssetAccountingUnitGroup		= AssetTransferTo.ToAssetAccountingUnitGroup
						invoked.PrmItemTotalBaseCost			= AssetTransferTo.ToItemTotalBaseCost
						invoked.PrmItemTotalBaseTax				= AssetTransferTo.ToItemTotalBaseTax
						invoked.PrmItemTotalTransactionCost		= AssetTransferTo.ToItemTotalTransactionCost
						invoked.PrmItemTotalTransactionTax		= AssetTransferTo.ToItemTotalTransactionTax
						invoked.PrmDepreciationExpenseProject	= AssetTransferTo.ToDepreciationExpenseProject
						invoked.PrmAssetOwner					= AssetTransferTo.ToAssetOwner
				else
					invoke Unreleased.Create Asset
						assign result to NewAsset
						fill in fields from Asset
						invoked.AssetProcess								= "TRF"
						invoked.TagNumber									= AssetTransferTo.ToTagNumber
						if (AssetTransferTo.ToAssetGroup entered)
							invoked.AssetGroup								= AssetTransferTo.ToAssetGroup
						if ( AssetTransferTo.ToAssetCompany entered)
							invoked.Company									= AssetTransferTo.ToAssetCompany
						if (AssetTransferTo.ToAssetType entered)
							invoked.AssetType								= AssetTransferTo.ToAssetType
						if (AssetTransferTo.ToAssetAccountGroup entered)
							invoked.AssetAccountGroup						= AssetTransferTo.ToAssetAccountGroup
						if (AssetTransferTo.ToAssetAccountingUnit entered)
							invoked.AssetAccountingUnit						= AssetTransferTo.ToAssetAccountingUnit
						if (AssetTransferTo.ToAssetAccountingUnitGroup entered)
							invoked.AssetAccountingUnitGroup				= AssetTransferTo.ToAssetAccountingUnitGroup
						invoked.AssetDivision								= AssetTransferTo.ToAssetDivision
						invoked.AssetLocation								= AssetTransferTo.ToAssetLocation
						invoked.AssetProject								= AssetTransferTo.ToAssetProject
						invoked.Currency									= AssetTransferTo.ToCurrency
						invoked.AssetOwner									= AssetTransferTo.ToAssetOwner
						initialize AssetTransferTo.ToTotalItemQuantity
						initialize invoked.AssetObjectID
						initialize invoked.LastAssetItem
						initialize invoked.LastAssetSequence
						initialize invoked.LastTransactionSequence
						initialize invoked.LastCommentSequence
						initialize invoked.CreationDate
						initialize invoked.CreatedBy

					SavedAsset			= NewAsset.Asset
					SavedAssetObjectID	= NewAsset.AssetObjectID

					AssetTransferTo.ToAsset			= SavedAsset
					AssetTransferTo.ToAssetObjectID	= SavedAssetObjectID


				if (Asset != AssetTransferTo.ToAsset)
					for each AssetRepairRel
						invoke Create AssetRepair
							fill in fields from each
							invoked.Asset			= AssetTransferTo.ToAsset


		CreateTransferFunds is an Instance Action
			restricted
			Action Rules
				include RefreshFundAllocation

		MAssetTransfer is a Create Action
			restricted
			Action Rules
				BypassActiveCodeBlockEdit = true
				invoke Create this instance

		MobileAssetTransfer is a Create Action
			restricted
			Action Rules
				invoke Create this instance


		Update is an Update Action
			valid when (TransferStatusNotReleased)
			Entrance Rules
				if (AssetTransferTo.ToAssetCompany.RequireUniqueTags = true)
					if ((IsTagTransfered
					and AssetTransferTo.ToTagNumber changed
					and IsIntraCompanyTransfer)
					or (IsInterCompanyTransfer
					and IsToTagEntered entered
					and AssetTransferTo.ToTagNumber changed))
						if (TransferQuantity < Asset.EnteredQuantity)
							constraint (UniqueAssetsTagRel not exists)
								"RequiredUniqueTagsFlagIsSetOnCompany;TagNumberMustBeUnique"
						else
							constraint (UniqueAssetsTagRel not exists)
								"TagNumber<AssetTransferTo.ToTagNumber>IsInUse"

			Action Rules
				BypassActiveCodeBlockEdit = true
				if (AssetTransferTo.ToAssetCompany changed
				or  TransferQuantityChange)
					if (FullTransfer)
						invoke UpdateFromTransfer Asset
							invoked.PrmTagNumber					= TagNumber
							invoked.PrmAssetGroup					= AssetGroup
							invoked.PrmCompany						= Company
							invoked.PrmCurrency						= Currency
							invoked.PrmAssetLocation				= AssetLocation
							invoked.PrmAssetDivision				= AssetDivision
							invoked.PrmAssetType					= AssetType
							invoked.PrmAssetAccountGroup			= AssetAccountGroup
							invoked.PrmAssetAccountingUnit			= AssetAccountingUnit
							invoked.PrmAssetAccountingUnitGroup		= AssetAccountingUnitGroup
							invoked.PrmItemTotalBaseCost			= ItemTotalBaseCost
							invoked.PrmItemTotalBaseTax				= ItemTotalBaseTax
							invoked.PrmItemTotalTransactionCost		= ItemTotalTransactionCost
							invoked.PrmItemTotalTransactionTax		= ItemTotalTransactionTax
							invoked.PrmDepreciationExpenseProject	= DepreciationExpenseProject
							invoked.PrmAssetProject					= AssetProject
							invoked.PrmAssetOwner					= AssetOwner
					for each AssetItemTransfersRel
						invoke ResetTransfer each
						invoke Delete each
					initialize AssetTransferTo.ToItemTotalBaseCost
					initialize AssetTransferTo.ToItemTotalBaseTax
					initialize AssetTransferTo.ToItemTotalTransactionCost
					initialize AssetTransferTo.ToItemTotalTransactionTax

					for each AssetBookTransfersRel
						invoke ResetTransfer each
							invoked.DeleteTransactions = true
							if (AssetTransferTo.ToAssetCompany changed)
								invoked.OriginalToCompany = old AssetTransferTo.ToAssetCompany
						invoke Delete each
					if (FullOrPartial.Partial)
						invoke Delete ToAssetRel
					if (IsInterCompanyTransfer)
						FromRequiredBooks 	= instance count of FromRequiredBooksRel
						ToRequiredBooks		= instance count of ToRequiredBooksRel
						constraint (FromRequiredBooks = ToRequiredBooks)
							"NumberOfRequiredBooksOnFromAndToSideMustBeEqual"

				if (AssetTransfer.AssetTransferTo.DimensionsHaveChanged
				and !(AssetTransferTo.ToAssetCompany changed
				or  TransferQuantityChange))
					for each AssetBookTransfersRel
						invoke AssetRecreateTransactions each

			Exit Rules
				if (PostingDate changed)
					for each AssetBookTransfersRel
						invoke UpdatePostingDate each
				if (AssetTransfer.AssetTransferTo.DimensionsHaveChanged
				and !(AssetTransferTo.ToAssetCompany changed
				or  TransferQuantityChange))
					constraint (!AssetTransferTo.TransferFieldsSame)
						"TransferRequiresAnUpdatedTransferToValue"
					include ValidateTransfer
					if (FullTransfer)
						AssetTransferTo.ToAsset				= Asset
						AssetTransferTo.ToAssetObjectID		= AssetObjectID

						invoke UpdateFromTransfer Asset
							invoked.PrmTagNumber					= AssetTransferTo.ToTagNumber
							invoked.PrmAssetGroup					= AssetTransferTo.ToAssetGroup
							invoked.PrmCompany						= AssetTransferTo.ToAssetCompany
							invoked.PrmCurrency						= AssetTransferTo.ToCurrency
							invoked.PrmAssetLocation				= AssetTransferTo.ToAssetLocation
							invoked.PrmAssetDivision				= AssetTransferTo.ToAssetDivision
							invoked.PrmAssetType					= AssetTransferTo.ToAssetType
							invoked.PrmAssetAccountGroup			= AssetTransferTo.ToAssetAccountGroup
							invoked.PrmAssetAccountingUnit			= AssetTransferTo.ToAssetAccountingUnit
							invoked.PrmAssetAccountingUnitGroup		= AssetTransferTo.ToAssetAccountingUnitGroup
							invoked.PrmItemTotalBaseCost			= AssetTransferTo.ToItemTotalBaseCost
							invoked.PrmItemTotalBaseTax				= AssetTransferTo.ToItemTotalBaseTax
							invoked.PrmItemTotalTransactionCost		= AssetTransferTo.ToItemTotalTransactionCost
							invoked.PrmItemTotalTransactionTax		= AssetTransferTo.ToItemTotalTransactionTax
							invoked.PrmDepreciationExpenseProject	= AssetTransferTo.ToDepreciationExpenseProject
							invoked.PrmAssetProject					= AssetTransferTo.ToAssetProject
							invoked.PrmAssetOwner					= AssetTransferTo.ToAssetOwner
					else
						invoke UpdateFromTransfer ToAssetRel
							invoked.PrmTagNumber					= AssetTransferTo.ToTagNumber
							invoked.PrmAssetGroup					= AssetTransferTo.ToAssetGroup
							invoked.PrmCompany						= AssetTransferTo.ToAssetCompany
							invoked.PrmAssetType					= AssetTransferTo.ToAssetType
							invoked.PrmAssetAccountGroup			= AssetTransferTo.ToAssetAccountGroup
							invoked.PrmAssetAccountingUnit			= AssetTransferTo.ToAssetAccountingUnit
							invoked.PrmAssetAccountingUnitGroup		= AssetTransferTo.ToAssetAccountingUnitGroup
							invoked.PrmDepreciationExpenseProject	= AssetTransferTo.ToDepreciationExpenseProject
							invoked.PrmAssetDivision				= AssetTransferTo.ToAssetDivision
							invoked.PrmAssetLocation				= AssetTransferTo.ToAssetLocation
							invoked.PrmAssetProject					= AssetTransferTo.ToAssetProject
							invoked.PrmCurrency						= AssetTransferTo.ToCurrency
							invoked.PrmLastAssetItemPurchaseDate	= AssetTransferTo.ToLastAssetItemPurchaseDate
							invoked.PrmAssetOwner					= AssetTransferTo.ToAssetOwner

				if (AssetTransferTo.ToAssetCompany changed
				or  TransferQuantityChange)
					constraint (!AssetTransferTo.TransferFieldsSame)
						"TransferRequiresAnUpdatedTransferToValue"
					include ValidateTransfer
					if (FullTransfer)
						AssetTransferTo.ToAsset				= Asset
						AssetTransferTo.ToAssetObjectID		= AssetObjectID
						for each Asset.AssetItem set
							invoke Create AssetItemTransfer
								fill in fields from each
								invoked.Asset			= Asset
								invoked.AssetTransfer	= AssetTransfer
								invoked.ToItemQuantity	= each.ItemQuantity

						for each Asset.AssetBook set
							LocalBook = each.Book
							if (!each.Disposed)
								invoke Create AssetBookTransfer
									fill in fields from each
									invoked.Asset			= Asset
									invoked.AssetTransfer	= AssetTransfer
									if (TransferType.IntraCompany)
										invoked.ToBook		= each.Book
							else
								confirmation required
									"Book<LocalBook>HasBeenDisposedAndWillNotBeUpdated"	
						invoke UpdateFromTransfer Asset 
							invoked.PrmTagNumber					= AssetTransferTo.ToTagNumber
							invoked.PrmAssetGroup					= AssetTransferTo.ToAssetGroup
							invoked.PrmCompany						= AssetTransferTo.ToAssetCompany
							invoked.PrmCurrency						= AssetTransferTo.ToCurrency
							invoked.PrmAssetLocation				= AssetTransferTo.ToAssetLocation
							invoked.PrmAssetDivision				= AssetTransferTo.ToAssetDivision
							invoked.PrmAssetType					= AssetTransferTo.ToAssetType
							invoked.PrmAssetAccountGroup			= AssetTransferTo.ToAssetAccountGroup
							invoked.PrmAssetAccountingUnit			= AssetTransferTo.ToAssetAccountingUnit
							invoked.PrmAssetAccountingUnitGroup		= AssetTransferTo.ToAssetAccountingUnitGroup
							invoked.PrmItemTotalBaseCost			= AssetTransferTo.ToItemTotalBaseCost
							invoked.PrmItemTotalBaseTax				= AssetTransferTo.ToItemTotalBaseTax
							invoked.PrmItemTotalTransactionCost		= AssetTransferTo.ToItemTotalTransactionCost
							invoked.PrmItemTotalTransactionTax		= AssetTransferTo.ToItemTotalTransactionTax
							invoked.PrmDepreciationExpenseProject	= AssetTransferTo.ToDepreciationExpenseProject
							invoked.PrmAssetProject					= AssetTransferTo.ToAssetProject
							invoked.PrmAssetOwner					= AssetTransferTo.ToAssetOwner
					else
						invoke Unreleased.Create Asset
							assign result to NewAsset
							fill in fields from Asset
							invoked.AssetProcess					= "TRF"
							invoked.TagNumber						= AssetTransferTo.ToTagNumber
							invoked.AssetGroup						= AssetTransferTo.ToAssetGroup
							invoked.Company							= AssetTransferTo.ToAssetCompany
							invoked.AssetType						= AssetTransferTo.ToAssetType
							invoked.AssetAccountGroup				= AssetTransferTo.ToAssetAccountGroup
							invoked.AssetAccountingUnit				= AssetTransferTo.ToAssetAccountingUnit
							invoked.AssetAccountingUnitGroup		= AssetTransferTo.ToAssetAccountingUnitGroup
							invoked.DepreciationExpenseProject		= AssetTransferTo.ToDepreciationExpenseProject
							invoked.AssetDivision					= AssetTransferTo.ToAssetDivision
							invoked.AssetLocation					= AssetTransferTo.ToAssetLocation
							invoked.AssetProject					= AssetTransferTo.ToAssetProject
							invoked.Currency						= AssetTransferTo.ToCurrency
							invoked.LastAssetItemPurchaseDate		= AssetTransferTo.ToLastAssetItemPurchaseDate
							invoked.AssetOwner						= AssetTransferTo.ToAssetOwner
							initialize AssetTransferTo.ToTotalItemQuantity
							initialize invoked.AssetObjectID
							initialize invoked.LastAssetItem
							initialize invoked.LastAssetSequence
							initialize invoked.LastTransactionSequence
							initialize invoked.LastCommentSequence
							initialize invoked.CreationDate
							initialize invoked.CreatedBy

						SavedAsset			= NewAsset.Asset
						SavedAssetObjectID	= NewAsset.AssetObjectID

						AssetTransferTo.ToAsset			= SavedAsset
						AssetTransferTo.ToAssetObjectID	= SavedAssetObjectID


					if (Asset != AssetTransferTo.ToAsset)
						for each AssetRepairRel
							invoke Create AssetRepair
								fill in fields from each
								invoked.Asset			= AssetTransferTo.ToAsset


		RefreshFromItemTransferFunds is an Instance Action
			restricted
			Entrance Rules
				invoke DeleteFromAsset AssetTransferFundsRel
				invoke Delete ToAssetFundsRel
			Action Rules
				for each AssetItemTransferFundsRel
					LocalAsset					= each.Asset
					LocalAccountingEntity		= each.AccountingEntity
					LocalAccountingUnit			= each.AccountingUnit
					LocalProject				= each.Project
					LocalFund					= each.Fund
					LocalFinanceDimension1		= each.FinanceDimension1
					LocalFinanceDimension2		= each.FinanceDimension2
					LocalFinanceDimension3		= each.FinanceDimension3
					LocalFinanceDimension4		= each.FinanceDimension4
					LocalFinanceDimension5		= each.FinanceDimension5
					LocalFinanceDimension6 		= each.FinanceDimension6
					LocalFinanceDimension7		= each.FinanceDimension7
					LocalFinanceDimension8		= each.FinanceDimension8
					LocalFinanceDimension9		= each.FinanceDimension9
					LocalFinanceDimension10 	= each.FinanceDimension10
					LocalFundAmount  			= each.TransactionAmount
					if (LocalAssetTransferFundRel exists)
						LocalFundAmount += LocalAssetTransferFundRel.TransactionAmount
						invoke UpdateFromItemTransferFund LocalAssetTransferFundRel
							invoked.TransactionAmount		= LocalFundAmount
							invoked.PercentContribution 	= (LocalFundAmount / ItemTotalTransactionCost)
					else
						invoke CreateFromItemTransferFund AssetTransferFund
							invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
							invoked.AssetTransfer			= AssetTransfer
							invoked.Asset					= Asset
							invoked.AccountingEntity		= LocalAccountingEntity
							invoked.AccountingUnit			= LocalAccountingUnit
							invoked.Project					= LocalProject
							invoked.Fund					= LocalFund
							invoked.FinanceDimension1		= LocalFinanceDimension1
							invoked.FinanceDimension2		= LocalFinanceDimension2
							invoked.FinanceDimension3		= LocalFinanceDimension3
							invoked.FinanceDimension4		= LocalFinanceDimension4
							invoked.FinanceDimension5		= LocalFinanceDimension5
							invoked.FinanceDimension6		= LocalFinanceDimension6
							invoked.FinanceDimension7		= LocalFinanceDimension7
							invoked.FinanceDimension8		= LocalFinanceDimension8
							invoked.FinanceDimension9		= LocalFinanceDimension9
							invoked.FinanceDimension10		= LocalFinanceDimension10
							invoked.TransactionAmount		= LocalFundAmount
							invoked.PercentContribution		= (LocalFundAmount / ItemTotalTransactionCost)
					for each AssetTransferFundsRel
						invoke Create AssetFund
							invoked.Asset					= AssetTransfer.AssetTransferTo.ToAsset
							fill in fields from each
					for each AssetItemTransferFundsRel
						LocalAssetItem						= each.AssetItemTransferRel.ToAssetAndItem.ToAssetItem
						invoke Create AssetItemFund
							invoked.AssetItem				= LocalAssetItem
							invoked.Asset					= AssetTransfer.AssetTransferTo.ToAsset
							fill in fields from each




		UpdateFromTransfer is an Instance Action
			restricted
			Entrance Rules

		UpdateStatus is an Instance Action
			restricted
			Parameters
				PrmTransferStatus		is AlphaUpper 1
					States
						NotReleased value is "N"
						Released    value is "R"

			Action Rules
				TransferStatus	= PrmTransferStatus

		Delete is a Delete Action
			restricted
			Action Rules

		SubmitForApproval is an Instance Action
			restricted
			Action Rules
				invoke SubmitForApproval Asset


		ResetTransfer is an Instance Action
			restricted

			Action Rules
				BypassActiveCodeBlockEdit = true
				if (FullTransfer)
					initialize AssetTransferTo.ToAsset
					initialize AssetTransferTo.ToAssetObjectID
					invoke UpdateLastAssetSequence Asset
						invoked.PrmLastAssetSequence = Asset.LastAssetSequence -1
					for each AssetItemsRel
						LocalAssetItem	= each.AssetItem
						invoke UpdateFromTransfer each
							invoked.PrmUpdateLocationDetail		= true
							invoked.PrmLocation					= AssetLocation
							invoked.PrmLocationDetail			= AssetItemTransferRel.LocationDetail
							if (AssetTransferTo.ToAssetCompany.Currency != Currency)
								invoked.PrmBaseItemCost			= AssetItemTransferRel.ToBaseItemCost
								invoked.PrmCurrencyExchange		= true

				else
				if (PartialTransfer)
					if (Asset != AssetTransferTo.ToAsset)
						for each AssetItemTransfer set
							invoke ResetTransfer each










						invoke UpdateLastAssetSequence Asset
							invoked.PrmLastAssetSequence = Asset.LastAssetSequence - 1
				if (AssetBookTransfersRel exists)
					for each AssetBookTransfersRel
						invoke ResetTransfer each
				invoke Delete AssetTransferFundsRel
				invoke Delete AssetItemTransferFundsRel


		Release is an Instance Action
			restricted
			Entrance Rules
				if (AssetTransfer.TransferType.InterCompany)
					if (AssetBookTransfersRel exists)
						for each AssetBookTransfersRel
							if (each.FromBookCalendarCurrentRel.IsPostingBook)
								constraint (each.ToBook entered)
									"ToBookIsRequired"
								constraint (each.CurrentToBookCalendarRel.IsPostingBook)
									"FromBookIsAPostingBook,ToBookMustAlsoBeAPostingBook"
							else
								if (each.ToBook entered)
									constraint (!each.CurrentToBookCalendarRel.IsPostingBook)
										"ToBookMustBeANonPostingBook"
							if (each.ToBook entered)				//"TransferDateNotInCurr/1stFutureYearOfBook"    
								constraint (each.CurrentBookCalendarRel.BookCalendar.YearBeginDate = each.CurrentToBookCalendarRel.BookCalendar.YearBeginDate)
									"FromAndToCalendarYearsMustBeEqual"
								constraint (each.CurrentBookCalendarRel.BookCalendar.PostingBook = each.CurrentToBookCalendarRel.BookCalendar.PostingBook)
									"FromAndToCalendarsMustHaveSimilarSetup"
								constraint (each.CurrentBookCalendarRel.BookCalendar.NumberOfDepreciationPeriodsClosed = each.CurrentToBookCalendarRel.BookCalendar.NumberOfDepreciationPeriodsClosed)
									"FromAndToCalendarsMustBeInTheSameCurrentPeriod"
								constraint (each.CurrentBookCalendarRel.BookCalendar.DepreciationPeriods.DepreciationPeriodEndDates = each.CurrentToBookCalendarRel.BookCalendar.DepreciationPeriods.DepreciationPeriodEndDates)
									"FromAndToCalendarsMustHaveTheSamePeriodEndDates"
								constraint (each.CurrentBookCalendarRel.BookCalendar.DepreciationPeriods.DepreciationPeriodNumbers = each.CurrentToBookCalendarRel.BookCalendar.DepreciationPeriods.DepreciationPeriodNumbers)
									"FromAndToCalendarsMustHaveTheSamePeriodStructure"
								constraint (each.Book.MethodSwitch = each.ToBook.MethodSwitch)
									"FromAndToBooksMustTheSameMethodSwitch"
								constraint (each.Book.DepreciationType = each.ToBook.DepreciationType)
									"FromAndToBooksMustHaveTheSameDepreciationType"
								constraint (each.Book.Convention = each.ToBook.Convention)
									"FromAndToBooksMustHaveTheSameConvention"


								if (each.ToCompanyCurrentCalendarTransferDateRel not exists)
									if (TransferDate > each.CurrentToBookCalendarRel.BookCalendar.YearEndDate)
										constraint (ToCompanyFutureBookCalendarsRel exists)
											"TransferDate<TransferDate>RequiresAFutureCalendarForToBook"		//"TransferDateNotInCurr/1stFutureYearOfBook"    
									if (TransferDate < each.CurrentToBookCalendarRel.BookCalendar.YearBeginDate)
										constraint (each.ToCompanyHistoryBookCalendarsRel exists)
											"TransferDate<TransferDate>RequiresAHistoryCalendarForToBook"


			Action Rules
				BypassActiveCodeBlockEdit = true
				if (TransferQuantity > 0)
					constraint (TransferQuantity = TotalTransferQuantity)
						"TotalTransferQuantity<TransferQuantity>MustBeEqualToTheTotalOfAllTheItemTransferQuantities<TotalTransferQuantity>"		//"QuantityCannotExceedAssetQuantity" and "CannotRelease;ItemSelectionIsIncomplete"      
				constraint (Company.PendingYearEndCount not entered)
					"CannotTransferAsset;YearEndIsPending"				//"CannotTransfer,YearEndPending"       
				constraint (!Company.PeriodCloseRelease.InProcess)
					"CannotTransferAsset;PeriodOrYearEndCloseIsInProcess"	//"PeriodOrYear-endCloseIsInProcess"        

				TransferStatus = "R"


		RefreshFunds is an Instance Action
			restricted
			Parameters
				PrmAssetItem					is like AssetItem
					default label is "AssetItem"
			Action Rules
				LocalAssetItem		= PrmAssetItem
				include RefreshFundAllocation

		UpdateFromAssetItemTransfer is an Instance Action
			restricted
			Parameters
				PrmToTotalItemQuantity			is a TotalItemQuantity
				PrmToItemTotalBaseCost        	is an InternationalAmount
				PrmToItemTotalBaseTax          	is an InternationalAmount
				PrmToItemTotalTransactionCost  	is an InternationalAmount
				PrmToItemTotalTransactionTax   	is an InternationalAmount
				FromAssetTransferCreate 		is Boolean
			Parameter Rules
				PrmToTotalItemQuantity
					initial value is (TotalTransferQuantity)
				PrmToItemTotalBaseCost
					initial value is (TotalTransferBaseCost)
				PrmToItemTotalBaseTax
					initial value is (TotalTransferBaseTax)
				PrmToItemTotalTransactionCost
					initial value is (TotalTransferTransCost)
				PrmToItemTotalTransactionTax
					initial value is (TotalTransferTransTax)


			Action Rules
				BypassActiveCodeBlockEdit = true
				AssetTransferTo.ToTotalItemQuantity				= TransferQuantity
				AssetTransferTo.ToItemTotalBaseCost				+= PrmToItemTotalBaseCost
				AssetTransferTo.ToItemTotalBaseTax 				+= PrmToItemTotalBaseTax
				AssetTransferTo.ToItemTotalTransactionCost		+= PrmToItemTotalTransactionCost
				AssetTransferTo.ToItemTotalTransactionTax		+= PrmToItemTotalTransactionTax
				TransientFromTransferCreate						= FromAssetTransferCreate

				if (Asset.FundAccounting
				and !Asset.TransientFromReset)
					FromItemTransferCreate = true
					if (!Asset.FundOverride
					and FullTransfer)
						if (TransferQuantityComplete)
							include UpdateTransferFunds
					else

						include UpdateTransferFunds

		AssetReleaseTransfer is an Instance Action
			restricted
			Action Rules
				invoke PostRelease.Release Asset

		AssetResetTransfer is an Instance Action
			restricted
			Action Rules
				invoke PostRelease.ResetTransfer Asset

		PurgeAssetTransfers is a Set Action
			restricted

			Parameters
				PrmCompany				is an AssetCompany
				PrmFromDate				is Date
				PrmToDate				is Date
				PrmAssetGroup			is like AssetGroup
				PrmAssetType			is like AssetType
				PrmAssetSubType			is like AssetType
				PrmPurgeSimulated		is Boolean

			Instance Selection

				where (((Asset.Simulated and PrmPurgeSimulated) or (not PrmPurgeSimulated and not Asset.Simulated))
				and    Asset.Company = PrmCompany
				and    (PrmFromDate not entered or TransferDate >= PrmFromDate)
				and    (PrmToDate not entered or TransferDate <= PrmToDate)
				and    (PrmAssetGroup not entered or AssetGroup = PrmAssetGroup)
				and    (PrmAssetType not entered or AssetType.Type = PrmAssetType)
				and    (PrmAssetSubType not entered or AssetType.SubType = PrmAssetSubType)
				and	   IsReleased)

			Action Rules
				Instance Rules
					invoke Purge

		PurgeDeletedAssetTransfers is a Set Action
			restricted

			Parameters
				PrmCompany				is an AssetCompany
				PrmFromDate				is Date
				PrmToDate				is Date
				PrmAssetGroup			is like AssetGroup
				PrmAssetType			is like AssetType
				PrmAssetSubType			is like AssetType
				PrmPurgeSimulated		is Boolean

			Instance Selection
				include only deleted records
				where (((Asset.Simulated and PrmPurgeSimulated) or (not PrmPurgeSimulated and not Asset.Simulated))
				and    Asset.Company = PrmCompany
				and    (PrmFromDate not entered or TransferDate >= PrmFromDate)
				and    (PrmToDate not entered or TransferDate <= PrmToDate)
				and    (PrmAssetGroup not entered or AssetGroup = PrmAssetGroup)
				and    (PrmAssetType not entered or AssetType.Type = PrmAssetType)
				and    (PrmAssetSubType not entered or AssetType.SubType = PrmAssetSubType))

			Action Rules
				Instance Rules
					invoke Purge

		PurgeDisposedAssetTransfers is a Set Action
			restricted
			Parameters
				PrmCompany					is an AssetCompany
				PrmAsset					is an Asset
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
				PrmLeaseCompany				is like GeneralLedgerCompany
				PrmLocationName				is like AssetLocation
				PrmDivision					is like AssetDivision
				PrmAssetGroup				is like AssetGroup
				PrmFromDate					is Date
				PrmToDate					is Date

			Instance Selection
				include deleted records
				where (Asset.Company = PrmCompany
				and   (PrmAsset not entered or (Asset = PrmAsset and Asset.Company.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup))
				and   (PrmLeaseCompany not entered or Asset.AssetLease.LeaseCompany = PrmLeaseCompany)
				and   (PrmLocationName not entered or Asset.AssetLocation = PrmLocationName)
				and   (PrmDivision not entered or Asset.AssetDivision = PrmDivision)
				and   (PrmAssetGroup not entered or Asset.AssetGroup = PrmAssetGroup)
				and   (PrmFromDate not entered or Asset.AssetDisposalDate >= PrmFromDate)
				and   (PrmToDate not entered or Asset.AssetDisposalDate <= PrmToDate)
				and   Asset.Status.Disposed)

			Action Rules
				Instance Rules
					invoke Purge

		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke Purge PurgeAssetItemTransferRel
				invoke Purge PurgeAssetBookTransferRel

		RemovePurgedLeaseID is an Update Action  
			restricted
			bypass field rules











			Action Rules
        		initialize AssetLease
	        	AssetCategory			= "N"

		NewPostingDateUpdate is an Update Action
			restricted
