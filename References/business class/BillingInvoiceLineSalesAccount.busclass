BillingInvoiceLineSalesAccount is a BusinessClass
	owned by bl
	prefix is OILA
	sql name is LineSalesAccount
	
	Patterns
		implements StaticJava
		implements Archivable
		
	Ontology
		symbolic key is BillingInvoiceLineSalesAccount

	Persistent Fields								
		SalesAccount	is a TransactionCodeBlock
		Description
		SalesAmount		is a CurrencyAmount
			default label is "Amount"			
		CreatedByFES						is Boolean		
			protected
		FESManuallyUpdated					is Boolean
			protected

	Local Fields
		Idx									is Numeric 2
		CalculateTax
		LocalFEGtext						is like FinanceEnterpriseGroup
		LocalTaxTotal						is an InternationalAmount
		TaxLineItemView						is a TaxLineItem view
		AttributeCounter					is Numeric 2
		ProcessTaxHistory
		LocalDerivedFESKey 					is a FrontEndSplitKey
		LocalCreateFromCopy					is Boolean
		LocalLineItemNumber					is like DistributionSequence
		LocalTaxHistoryProcessed			is Alpha 1
		LocalCalculateTaxExecuted			is Alpha 1
		LocalJurisdictionLookupKey  		is Alpha 200
		LocalFirstSalesAccountForLine		is Boolean
		LocalVertexTaxHistoryProcessed		is Boolean
		LocalReceivableGeneralLedgerCode	is like ReceivableGeneralLedgerCode

	Derived Fields
		DefaultLookupKey is a StringField
			type is Alpha 100
			restricted
			"BillingInvoiceLineSalesAccount"
			":"
			CurrentTimestamp

		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp

	Transient Fields
    	TransientExchangeDate               is an ExchangeDate
    		derive value from BillingInvoice.InvoiceDate
    	TransientPostingDate                is a PostingDate
    		derive value from BillingInvoice.InvoiceDate
					
	Field Rules
		SalesAccount
			required
				"SalesAccountIsRequired"
				
		Description
			default to BillingInvoiceLine.Description
			
		SalesAmount
			if (!BillingInvoiceLine.NoCharge)
				required
					"AmountIsRequired"

		CreatedByFES
			if(CreatedByFES
			and	action type.Update
			and	(SalesAccount.Ledger changed
			or	SalesAccount.ToAccountingEntity changed
			or	SalesAccount.AccountingUnit changed
			or	SalesAccount.GeneralLedgerChartAccount changed
			or	SalesAccount.Project changed
			or	SalesAccount.FinanceDimension1 changed
			or	SalesAccount.FinanceDimension2 changed
			or	SalesAccount.FinanceDimension3 changed
			or	SalesAccount.FinanceDimension4 changed
			or	SalesAccount.FinanceDimension5 changed
			or	SalesAccount.FinanceDimension6 changed
			or	SalesAccount.FinanceDimension7 changed
			or	SalesAccount.FinanceDimension8 changed
			or	SalesAccount.FinanceDimension9 changed
			or	SalesAccount.FinanceDimension10 changed
        	or	SalesAmount changed))
				confirmation required
					"OverrideFrontEndSplit?"
				FESManuallyUpdated = true		
	Relations

		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		 = Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		 = "BL"
		

		FESDistributionsByKeyLocalRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey

		FESDistByDistributionRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
			    related.FrontEndSplitDistributions.Distribution		= BillingInvoiceLineSalesAccount

		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject = BillingInvoiceLine.UniqueID
			Instance Selection
				where (related.InvoiceNumber				= BillingInvoice.InvoiceNumber)

       	TaxEntityRel
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
                related.TaxEntity 				= Company.AccountingEntity

		TaxAttributesRel
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
	 			related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
	 			related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode

		VertexConfigRel
        	one-to-one relation to VertexConfig
        	Field Mapping uses symbolic key
				related.VertexConfig 						= Company.FinanceEnterpriseGroup

		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig						= Company.FinanceEnterpriseGroup
			Instance Selection
				where (related.CallingModuleKey 			= reference to this instance)

		LocalReceivableGeneralLedgerCodeRel
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company					 				= Company
				related.ReceivableGeneralLedgerCode 			= LocalReceivableGeneralLedgerCode

		TaxLineItemsForLineRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
			Instance Selection
				where ((related.TaxLineItem.UniqueIdOfRelatedObject	= BillingInvoice.UniqueID
				or      related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID)
				and		related.InvoiceNumber						= BillingInvoice.InvoiceNumber
				and	    related.RelatedObjectReference				= reference to this instance)

	Rule Blocks
		CalculateTaxInputParams
			initialize CalculateTax
			CalculateTax.System							= "BL"
			CalculateTax.TaxCode						= BillingInvoiceLine.TaxCode
			CalculateTax.Invoice						= BillingInvoice.DerivedInvoice
			CalculateTax.Quantity						= 1
			CalculateTax.UnitCost 						= SalesAmount
			CalculateTax.Function						= "C"
			CalculateTax.Customer						= BillingInvoice.Customer
			CalculateTax.TaxEntity						= Company.AccountingEntity
			CalculateTax.LineNumber						= BillingInvoiceLineSalesAccount
			CalculateTax.InvoiceDate					= BillingInvoice.InvoiceDate
			CalculateTax.Description					= Description
			CalculateTax.FromTaxCode					= BillingInvoiceLine.Location.TaxCode
			CalculateTax.ShipmentDate					= BillingInvoice.ShipDate
			CalculateTax.ProcessLevel					= BillingInvoice.BillingProcessLevel
			CalculateTax.CallingModule					= "BillingInvoiceLineSalesAccount"
			CalculateTax.InvoiceAmount 					= BillingInvoice.InvoiceTotal
			CalculateTax.TaxableAmount 					= SalesAmount
			CalculateTax.InvoiceCompany             	= Company
			CalculateTax.TransactionType				= "S"
			CalculateTax.NumberOfDecimals				= BillingInvoice.CurrencyNumberOfDecimals
			CalculateTax.FromPostalAddress				= BillingInvoiceLine.Location.PostalAddress
			CalculateTax.GeneralLedgerDate				= BillingInvoice.GeneralLedgerDate
			CalculateTax.ProductTaxCategory				= BillingInvoiceLine.ProductTaxCategory
			CalculateTax.ThirdPartyFunction				= "C"
			CalculateTax.InputReturnVertexTaxIn			= "D"
			if (BillingInvoice.TaxPointDate entered)
				CalculateTax.TaxPointDate				= BillingInvoice.TaxPointDate
			else
				CalculateTax.TaxDate                	= BillingInvoice.InvoiceDate
			if (BillingInvoiceLine.IsHSNSACCodeEnabled)
				CalculateTax.HSNSACCode					= BillingInvoiceLine.HSNSACCode
				CalculateTax.CommodityCodeType      	= "HSN"
			else
				CalculateTax.UNSPSCCode					= BillingInvoiceLine.DerivedUNSPSCCodeNoDash
				CalculateTax.CommodityCodeType      	= "UNSPSC"
			if (BillingInvoice.CustomerShipTo entered)
				CalculateTax.PostalAddress				= BillingInvoice.CustomerShipTo.ShipToAddress
			else
			if (BillingInvoice.Customer entered)
				CalculateTax.PostalAddress				= BillingInvoice.Customer.PostalAddress
			else
			if (BillingInvoice.BillTo entered)
				CalculateTax.PostalAddress				= BillingInvoice.BillTo.PostalAddress

		LoadVertexGlobalInputFields
			if (TaxEntityRel.ThirdParty.VertexOSeries)
				CalculateTax.BaseCurrency 					= Company.Currency
				CalculateTax.CurrencyRate					= BillingInvoice.CurrencyRate
				CalculateTax.ProductClass 					= BillingInvoiceLine.MajorSalesClass
				CalculateTax.TransactionSource				= "O"
				CalculateTax.TransactionCurrency 			= BillingInvoice.Currency
				CalculateTax.DefaultFilingCurrency 			= TaxEntityRel.DefaultFilingCurrency
				CalculateTax.FromVATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber
				CalculateTax.FromVATRegistrationCountry   	= TaxEntityRel.VATRegistrationCountry
				if (BillingInvoice.BillingInvoiceType.Credit)
					CalculateTax.DocumentType				= "CreditMemo"
				else
					CalculateTax.DocumentType				= "Invoice"
				if (BillingInvoice.CustomerShipTo.ShipToAddress.Country entered)
					CalculateTax.VATRegistrationCountry     = BillingInvoice.CustomerShipTo.ShipToAddress.Country
				else
					CalculateTax.VATRegistrationCountry     = BillingInvoice.CompanyCustomer.VATRegistrationCountry
				if (BillingInvoice.CustomerShipTo.VATRegistrationNumber entered)
					CalculateTax.VATRegistrationNumber		= BillingInvoice.CustomerShipTo.VATRegistrationNumber
				else
					CalculateTax.VATRegistrationNumber		= BillingInvoice.CompanyCustomer.VATRegistrationNumber
				if (VertexConfigRel.DebugMode)
					LocalJurisdictionLookupKey				= DefaultLookupKey
					CalculateTax.AppendToJurisFile			= true
					CalculateTax.JurisdictionResultsKey		= LocalJurisdictionLookupKey
					CalculateTax.RelatedObjectReference     = reference to this instance
				else
				if (JurisdictionResultsRel exist)
					invoke Delete JurisdictionResultsRel
				include VertexFlexibleFields

		LoadOneSourceInputFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.CommodityCode					= BillingInvoiceLine.DerivedUNSPSCCodeNoDash
				CalculateTax.BypassEditing					= true
				CalculateTax.PointOfTitleTransfer			= BillingInvoiceLine.PointOfTitleTransfer
				CalculateTax.DeliveryTerms					= BillingInvoiceLine.ShipTerm
				CalculateTax.VendorCustomerName				= BillingInvoice.Customer.Name
				CalculateTax.UniqueLineNumber				= UniqueID
				CalculateTax.ItemNumber						= BillingInvoiceLine.Item

		VertexFlexibleFields

			if (TaxAttributesRel.VertexFlexibleFieldExist)
				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
					if (each.Code entered
					or  each.ExternalValue entered)
						Idx +=1
						CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
						CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue
						if (each.ExternalValue.ValueIs.TaxEntity)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxEntityRel.TaxEntity
						else
						if (each.ExternalValue.ValueIs.Company)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
						else
						if (each.ExternalValue.ValueIs.Description)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
						else
						if (each.ExternalValue.ValueIs.Customer)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Customer
						else
						if (each.ExternalValue.ValueIs.PaymentDate)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.PostingDate)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.TaxDate)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.InvoiceDate
						else
						if (each.ExternalValue.ValueIs.GLAccount)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.GeneralLedgerChartAccount
						else
						if (each.ExternalValue.ValueIs.Location)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Location
						else
						if (each.ExternalValue.ValueIs.Currency)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Currency
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoiceLine.EnteredDiscount
						else
						if (each.ExternalValue.ValueIs.UnitCost)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAmount
						else
						if (each.ExternalValue.ValueIs.CommodityCode)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoiceLine.Item.CommodityCode
						else
						if (each.ExternalValue.ValueIs.UNSPSC)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoiceLine.DerivedUNSPSCCodeNoDash
						else
						if (each.ExternalValue.ValueIs.ContractType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.ContractType
						else
						if (each.ExternalValue.ValueIs.WorkType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.WorkType
						else
						if (each.ExternalValue.ValueIs.ServiceType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.ServiceType
						else
						if (each.ExternalValue.ValueIs.AccountSubType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.GeneralLedgerChartAccount.AccountSubType
						else
						if (each.ExternalValue.ValueIs.UsageType)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.UsageType
						else
						if (each.ExternalValue.ValueIs.AccountingUnit)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.AccountingUnit
						else
						if (each.ExternalValue.ValueIs.Project)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project
						else
						if (each.ExternalValue.ValueIs.ProductTaxCatagory)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoiceLine.ProductTaxCategory
						else
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.ToAccountingEntity
						else
						if (each.ExternalValue.ValueIs.FinanceDimension1)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension1
						else
						if (each.ExternalValue.ValueIs.FinanceDimension2)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension2
						else
						if (each.ExternalValue.ValueIs.FinanceDimension3)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension3
						else
						if (each.ExternalValue.ValueIs.FinanceDimension4)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension4
						else
						if (each.ExternalValue.ValueIs.FinanceDimension5)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension5
						else
						if (each.ExternalValue.ValueIs.FinanceDimension6)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension6
						else
						if (each.ExternalValue.ValueIs.FinanceDimension7)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension7
						else
						if (each.ExternalValue.ValueIs.FinanceDimension8)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension8
						else
						if (each.ExternalValue.ValueIs.FinanceDimension9)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension9
						else
						if (each.ExternalValue.ValueIs.FinanceDimension10)
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension10
						else
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code

				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
					if (each.NumericValue entered
					or  each.ExternalValue entered)
						Idx +=1
						CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId				= each.VertexFlexibleNumeric.FieldId
						CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue			= each.ExternalValue
						if (each.ExternalValue.ValueIs.TaxEntity)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue		= TaxEntityRel.TaxEntity
						else
						if (each.ExternalValue.ValueIs.AccountingUnit)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue		= SalesAccount.AccountingUnit
						else
						if (each.ExternalValue.ValueIs.Company)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue		= Company
						else
						if (each.ExternalValue.ValueIs.GLAccount)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue		= SalesAccount.GeneralLedgerChartAccount
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue		= BillingInvoiceLine.EnteredDiscount
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals	= 3
						else
						if (each.ExternalValue.ValueIs.UnitCost)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 		= SalesAmount
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals	= 3
						else
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 		= SalesAccount.ToAccountingEntity
						else
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 		= each.NumericValue

				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
					if (each.DateValue entered
					or  each.ExternalValue entered)
						Idx += 1
						CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId 		= each.VertexFlexibleDate.FieldId
						CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue	= each.ExternalValue
						if (each.ExternalValue.ValueIs.PostingDate)
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue	= BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.PaymentDate)
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue	= BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.TaxDate)
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue	= BillingInvoice.InvoiceDate
						else
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue	= each.DateValue

		CreateTaxJournal
			initialize Idx
			Idx = 1
			while (Idx <= 8
			and not LocalVertexTaxHistoryProcessed)
				if (CalculateTax.TaxTable.TaxTableOutput[Idx].TaxCode entered)
					initialize ProcessTaxHistory
					ProcessTaxHistory.UniqueIdOfRelatedObject 		= UniqueID
					ProcessTaxHistory.RelatedObjectReference    	= reference to this instance
					ProcessTaxHistory.SystemCode					= "BL"
					ProcessTaxHistory.TransactionType				= "S"
					ProcessTaxHistory.TransactionSource				= "O"
					ProcessTaxHistory.InvoicedOrCreditMemo			= "I"
					ProcessTaxHistory.InvoiceCompany            	= Company
					ProcessTaxHistory.TaxEntity						= Company.AccountingEntity
					ProcessTaxHistory.ProcessLevel					= BillingInvoice.BillingProcessLevel
					ProcessTaxHistory.Quantity						= 1
					ProcessTaxHistory.Customer						= BillingInvoice.Customer
					ProcessTaxHistory.TaxID							= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxID
					ProcessTaxHistory.Location						= BillingInvoiceLine.Location
					ProcessTaxHistory.Invoice						= BillingInvoice.DerivedInvoice
					if (CalculateTax.TaxTable.TaxTableOutput[Idx].TaxPoint = "P")
						ProcessTaxHistory.TaxTransactionAccount		= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxOutputDueAccount
					else
						ProcessTaxHistory.TaxTransactionAccount		= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxOutputAccount
					ProcessTaxHistory.AccruedOrInvoiced 			= CalculateTax.TaxTable.TaxTableOutput[Idx].AccrualFlag
					ProcessTaxHistory.VendorOrCustomerName			= BillingInvoice.CompanyCustomer.Customer.Name
					ProcessTaxHistory.ProductTaxCategory			= BillingInvoiceLine.ProductTaxCategory
					ProcessTaxHistory.LineNumber					= BillingInvoiceLineSalesAccount
					ProcessTaxHistory.TaxCode						= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxCode
					ProcessTaxHistory.TaxRate						= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxRate
					if (TaxEntityRel.ThirdParty.Sabrix)
						ProcessTaxHistory.ToAddress					= BillingInvoice.CustomerShipTo.ShipToAddress
					else
						if (BillingInvoice.IsCustomerOrder)
							ProcessTaxHistory.ToAddress				= BillingInvoice.CustomerOrder.BillPostalAddress
						else
						if (BillingInvoice.IsBillToEnterd)
							ProcessTaxHistory.ToAddress 			= BillingInvoice.BillTo.PostalAddress
						else
							ProcessTaxHistory.ToAddress				= BillingInvoice.Customer.PostalAddress
					ProcessTaxHistory.FromTaxCode					= BillingInvoice.Location.TaxCode
					ProcessTaxHistory.FromAddress					= BillingInvoice.Location.PostalAddress
					ProcessTaxHistory.POATaxCode					= BillingInvoice.BillingProcessLevel.TaxCode
					ProcessTaxHistory.DeliveryTerms					= BillingInvoiceLine.ShipTerm
					ProcessTaxHistory.PointOfTitleTransfer			= BillingInvoiceLine.PointOfTitleTransfer
					ProcessTaxHistory.CommodityCode					= BillingInvoiceLine.DerivedUNSPSCCodeNoDash

					ProcessTaxHistory.InvoiceDate					= BillingInvoice.InvoiceDate
					ProcessTaxHistory.TaxPointDate					= BillingInvoice.TaxPointDate

					ProcessTaxHistory.TransactionTaxAmount			= CalculateTax.TaxTable.TaxTableOutput[Idx].TaxAmount
					ProcessTaxHistory.TransactionTaxableAmount		= SalesAmount
					ProcessTaxHistory.TransactionInvoiceAmount		= BillingInvoice.InvoiceTotal
					ProcessTaxHistory.TransactionNumberOfDecimals	= BillingInvoice.CurrencyNumberOfDecimals

					if (TaxEntityRel.ThirdParty.VertexOSeries)
						LocalVertexTaxHistoryProcessed				= true
						ProcessTaxHistory.UnitCost 					= SalesAmount
						ProcessTaxHistory.ProductClass 				= BillingInvoiceLine.MajorSalesClass
						if (BillingInvoice.BillingInvoiceType.Credit)
							ProcessTaxHistory.DocumentType			= "CreditMemo"
						else
							ProcessTaxHistory.DocumentType			= "Invoice"
						if (BillingInvoice.CustomerShipTo entered)
							ProcessTaxHistory.ToAddress				= BillingInvoice.CustomerShipTo.ShipToAddress
						else
						if (BillingInvoice.Customer entered)
							ProcessTaxHistory.ToAddress				= BillingInvoice.Customer.PostalAddress
						else
						if (BillingInvoice.BillTo entered)
							ProcessTaxHistory.ToAddress				= BillingInvoice.BillTo.PostalAddress
						include ProcessTaxHistoryVertexFlexibleFields
					if (BillingInvoiceLine.IsHSNSACCodeEnabled)
						ProcessTaxHistory.HSNSACCode				= BillingInvoiceLine.HSNSACCode
						ProcessTaxHistory.CommodityCodeType			= "HSN"
					else
						ProcessTaxHistory.UNSPSCCode				= BillingInvoiceLine.DerivedUNSPSCCodeNoDash
						ProcessTaxHistory.CommodityCodeType			= "UNSPSC"

					if (TaxEntityRel.ThirdParty.Sabrix)
						ProcessTaxHistory.OneSourceTaxAttribute50	= first TaxLineItemsForLineRel.LineItemUserFieldsRel.UserElementGroup
						ProcessTaxHistory.UserElementLevel			= "O"

						ProcessTaxHistory.Description				= Description
						ProcessTaxHistory.UniqueLineNumber			= UniqueID
						ProcessTaxHistory.ItemNumber				= BillingInvoiceLine.Item
						if (BillingInvoiceLine.SingleCallToOneSource)
							ProcessTaxHistory.DeliveryTerms			= BillingInvoice.ShipTerm

					ProcessTaxHistory.VATRegistrationCountry      	= TaxEntityRel.VATRegistrationCountry
					ProcessTaxHistory.VATRegistrationNumber		 	= TaxEntityRel.VATRegistrationNumber
					ProcessTaxHistory.FromVATRegistrationCountry   	= BillingInvoice.CompanyCustomer.VATRegistrationCountry
					ProcessTaxHistory.FromVATRegistrationNumber		= BillingInvoice.CompanyCustomer.VATRegistrationNumber
					ProcessTaxHistory.DefaultFilingCurrency 		= TaxEntityRel.DefaultFilingCurrency
					ProcessTaxHistory.BaseCurrency 					= Company.Currency
					ProcessTaxHistory.TransactionCurrency			= BillingInvoice.Currency
					ProcessTaxHistory.CurrencyRate					= BillingInvoice.CurrencyRate
					ProcessTaxHistory.HistoryType					= "N"
					LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed
					constraint (ProcessTaxHistory.OutputErrorNumber not entered)
						"<ProcessTaxHistory.OutputErrorMessage>"
				Idx +=1

		ProcessTaxHistoryVertexFlexibleFields

			if (TaxAttributesRel.VertexFlexibleFieldExist)
				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
					if (each.Code entered
					or  each.ExternalValue entered)
						Idx +=1
						ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
						ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue
						if (each.ExternalValue.ValueIs.TaxEntity)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxEntityRel.TaxEntity
						else
						if (each.ExternalValue.ValueIs.Company)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
						else
						if (each.ExternalValue.ValueIs.Description)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Description
						else
						if (each.ExternalValue.ValueIs.Customer)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Customer
						else
						if (each.ExternalValue.ValueIs.PaymentDate)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.PostingDate)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.TaxDate)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.InvoiceDate
						else
						if (each.ExternalValue.ValueIs.CommodityCode)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoiceLine.Item.CommodityCode
						else
						if (each.ExternalValue.ValueIs.UNSPSC)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoiceLine.DerivedUNSPSCCodeNoDash
						else
						if (each.ExternalValue.ValueIs.GLAccount)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.GeneralLedgerChartAccount
						else
						if (each.ExternalValue.ValueIs.Location)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Location
						else
						if (each.ExternalValue.ValueIs.Currency)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Currency
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoiceLine.EnteredDiscount
						else
						if (each.ExternalValue.ValueIs.UnitCost)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAmount
						else
						if (each.ExternalValue.ValueIs.ContractType)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.ContractType
						else
						if (each.ExternalValue.ValueIs.WorkType)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.WorkType
						else
						if (each.ExternalValue.ValueIs.ServiceType)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.ServiceType
						else
						if (each.ExternalValue.ValueIs.UsageType)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.UsageType
						else
						if (each.ExternalValue.ValueIs.ProductTaxCatagory)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoiceLine.ProductTaxCategory
						else
						if (each.ExternalValue.ValueIs.AccountingUnit)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.AccountingUnit
						else
						if (each.ExternalValue.ValueIs.Project)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project
						else
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.ToAccountingEntity
						else
						if (each.ExternalValue.ValueIs.FinanceDimension1)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension1
						else
						if (each.ExternalValue.ValueIs.FinanceDimension2)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension2
						else
						if (each.ExternalValue.ValueIs.FinanceDimension3)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension3
						else
						if (each.ExternalValue.ValueIs.FinanceDimension4)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension4
						else
						if (each.ExternalValue.ValueIs.FinanceDimension5)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension5
						else
						if (each.ExternalValue.ValueIs.FinanceDimension6)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension6
						else
						if (each.ExternalValue.ValueIs.FinanceDimension7)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension7
						else
						if (each.ExternalValue.ValueIs.FinanceDimension8)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension8
						else
						if (each.ExternalValue.ValueIs.FinanceDimension9)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension9
						else
						if (each.ExternalValue.ValueIs.FinanceDimension10)
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension10
						else
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code

				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
					if (each.NumericValue entered
					or  each.ExternalValue entered)
						Idx += 1
						ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId					= each.VertexFlexibleNumeric.FieldId
						ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue			= each.ExternalValue
						if (each.ExternalValue.ValueIs.TaxEntity)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue			= TaxEntityRel.TaxEntity
						else
						if (each.ExternalValue.ValueIs.AccountingUnit)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue			= SalesAccount.AccountingUnit
						else
						if (each.ExternalValue.ValueIs.Company)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue			= Company
						else
						if (each.ExternalValue.ValueIs.GLAccount)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue			= SalesAccount.GeneralLedgerChartAccount
						else
						if (each.ExternalValue.ValueIs.DiscountAmount)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue			= BillingInvoiceLine.EnteredDiscount
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals		= 3
						else
						if (each.ExternalValue.ValueIs.UnitCost)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue			= SalesAmount
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals		= 3
						else
						if (each.ExternalValue.ValueIs.ToAccountingEntity)
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue			= SalesAccount.ToAccountingEntity
						else
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue			= each.NumericValue

				Idx = 0
				for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
					if (each.DateValue entered
					or  each.ExternalValue entered)
						Idx +=1
						ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId		= each.VertexFlexibleDate.FieldId
						ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue	= each.ExternalValue
						if (each.ExternalValue.ValueIs.PostingDate)
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue	= BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.PaymentDate)
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue	= BillingInvoice.GeneralLedgerDate
						else
						if (each.ExternalValue.ValueIs.TaxDate)
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue	= BillingInvoice.InvoiceDate
						else
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue	= each.DateValue

  	Actions
  		Create is a Create Action
  			valid when (BillingInvoice.Status.Unreleased)
			Exit Rules
				if (!BillingInvoiceLine.SingleCallToOneSource
				and !BillingInvoiceLine.SingleCallToVertex
				and !LocalFirstSalesAccountForLine)
					invoke ThirdPartyTaxCallFromSalesAccount BillingInvoiceLine
						invoked.PrmUniqueID					= UniqueID
						invoked.PrmDescription				= Description
						invoked.PrmSalesAmount				= SalesAmount
						invoked.PrmSalesAccount				= SalesAccount

  		Update is an Update Action
  			valid when (BillingInvoice.Status.Unreleased)
			Exit Rules
				if (!BillingInvoiceLine.SingleCallToOneSource
				and !BillingInvoiceLine.SingleCallToVertex)
					invoke ThirdPartyTaxCallFromSalesAccount BillingInvoiceLine
						invoked.PrmUniqueID					= UniqueID
						invoked.PrmSalesAmount				= SalesAmount
						invoked.PrmDescription				= Description
						invoked.PrmSalesAccount				= SalesAccount

  		Delete is a Delete Action
  			valid when (BillingInvoice.Status.Unreleased)

		ThirdPartyTaxCall is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCreateLineTaxes			is Boolean
				PrmProcessTaxHistoryCall	is Boolean
			Action Rules
				include CalculateTaxInputParams
				include LoadVertexGlobalInputFields
				include LoadOneSourceInputFields
				CalculateTax.UniqueIdOfRelatedObject	= UniqueID
				LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
				if (PrmCreateLineTaxes)
					for each CalculateTax.TaxTable.TaxTableOutput
						if (each.TaxAmount entered)
							LocalTaxTotal += each.TaxAmount
							invoke Create BillingInvoiceLineTax
								invoked.Company													= Company
								invoked.BillingInvoice											= BillingInvoice
								invoked.ProductTaxCategory										= CalculateTax.ProductTaxCategory
								invoked.BillingInvoiceLineTax.BillingInvoiceLine 				= BillingInvoiceLine
								invoked.LocalCurrencyTable										= BillingInvoice.CurrencyTable
								invoked.LocalFromCurrency										= BillingInvoice.Currency
								invoked.LocalExchangeDate										= BillingInvoice.InvoiceDate
								if (each.TaxPoint = "P")
									invoked.TaxAccount											= each.TaxOutputDueAccount
								else
									invoked.TaxAccount											= each.TaxOutputAccount
								invoked.BillingInvoiceLineTax.TaxCode 							= each.TaxCode
								invoked.TaxRate													= each.TaxRate
								invoked.TaxableCurrencyAmount.TransactionAmount					= each.TaxAmount5DP
								invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 			= Company.Currency
								invoked.TransactionTaxable.TransactionAmount					= each.TaxableAmount
								invoked.TransactionTaxable.BaseAmount.ToCurrency 				= Company.Currency
								invoked.TaxID													= each.TaxID
								invoked.BillingInvoiceLineTax.TaxLevel							= each.TaxLevel
								if (TaxEntityRel.OneSourceUseARCodeForTaxAccount
								and CalculateTax.SabrixReturnedTaxCode entered)
									LocalReceivableGeneralLedgerCode 							= CalculateTax.SabrixReturnedTaxCode
									constraint (LocalReceivableGeneralLedgerCodeRel exists)
										"Receivable_\Global_\Ledger_\Code<LocalReceivableGeneralLedgerCode>DoesNotExistFor_\Company<Company>"
									invoked.TaxAccount											= LocalReceivableGeneralLedgerCodeRel.DistributionAccount
					if (LocalTaxTotal entered)
						invoke UpdateLineTaxFromLineSalesAccount BillingInvoiceLine
							invoked.PrmTaxTotal	= LocalTaxTotal
				if (PrmProcessTaxHistoryCall)
					include CreateTaxJournal

		FrontEndSplitDistributions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmCompany								is a BillingCompany
				PrmBillingInvoice						is a BillingInvoice
				PrmInvoiceLine							is a BillingInvoiceLine
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmCompany
					required
				PrmBillingInvoice
					required
				PrmInvoiceLine
					required
			Local Fields
				LocalForEachSumFESAmount					is an InternationalAmount
			Instance Selection
				where (Company.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and Company = PrmCompany.Company
				and BillingInvoice = PrmBillingInvoice
				and BillingInvoiceLine = PrmInvoiceLine
				and BillingInvoice.Status.Unreleased
				and	SalesAmount entered
				and not CreatedByFES
				and SalesAccount.FinanceDimension2 not entered
				and SalesAccount.Project entered
				and !SalesAccount.Project.ExcludeFromFES
        		and SalesAccount.Project.first FESProjectShadowContractRel.SummaryProject.ProjectContract.FrontEndSplits)
			Rule Blocks
				FillLocalFEGtextAndDerivedFESKey
					LocalFEGtext		= PrmCompany.FinanceEnterpriseGroup
       				LocalDerivedFESKey	= "BL-"+PrmCompany+"-"+PrmBillingInvoice+"-"+PrmInvoiceLine
			Action Rules
				Empty Set Rules
					
				Set Rules
					Entrance Rules
						include FillLocalFEGtextAndDerivedFESKey
						invoke Purge FESDistributionsByKeyLocalRel
					Exit Rules
						include FillLocalFEGtextAndDerivedFESKey
						invoke Purge FESDistributionsByKeyLocalRel
				Instance Rules
					include FillLocalFEGtextAndDerivedFESKey
					invoke SplitDistribution FrontEndSplitDistributions in foreground
						invoked.PrmFinanceEnterpriseGroup 		= PrmFinanceEnterpriseGroup
						invoked.PrmAccountingEntity				= SalesAccount.AccountingEntity
						invoked.PrmDistribution					= BillingInvoiceLineSalesAccount
						invoked.PrmDerivedFESKey				= LocalDerivedFESKey
						invoked.PrmDistributionAmount			= SalesAmount
						invoked.PrmDistributionAmountWithTax	= SalesAmount
						invoked.PrmTransactionDate				= TransientExchangeDate
						invoked.PrmPostingDate					= TransientPostingDate
						invoked.PrmTransactionCurrencyCode		= BillingInvoice.Currency
						invoked.PrmDistributionBy				= DistributionBy.ByAmount
						invoked.PrmNumberOfDecimalsQuantity		= NumberOfDecimalsQuantity.0Decimals
						invoked.PrmGeneralLedgerSystemCode		= GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode
						invoked.PrmTransactionCodeBlock			= SalesAccount
					if(FESDistByDistributionRel exists)
						initialize LocalForEachSumFESAmount
						for each FESDistByDistributionRel
							LocalForEachSumFESAmount += each.FESAmount
							invoke Create BillingInvoiceLineSalesAccount
								fill in fields from this instance
								invoked.SalesAccount			= each.CodeBlock
								if (last FESDistByDistributionRel.FrontEndSplitDistributions = each.FrontEndSplitDistributions)
									invoked.SalesAmount		= each.FESAmount + (SalesAmount - LocalForEachSumFESAmount)
								else
									invoked.SalesAmount		= each.FESAmount
								invoked.CreatedByFES					= true
						invoke Delete 

		DeleteFrontEndSplitDistributions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmCompany								is a BillingCompany
				PrmBillingInvoice						is a BillingInvoice
				PrmInvoiceLine							is a BillingInvoiceLine
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmCompany
					required
				PrmBillingInvoice
					required
				PrmInvoiceLine
					required
			Instance Selection
				where (Company.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and Company = PrmCompany.Company
				and BillingInvoice = PrmBillingInvoice
				and BillingInvoiceLine = PrmInvoiceLine
				and BillingInvoice.Status.Unreleased
				and CreatedByFES)
			Action Rules
				Empty Set Rules

				Set Rules 
	            	Exit Rules

				Instance Rules
					invoke Delete
