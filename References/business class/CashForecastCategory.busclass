CashForecastCategory is a BusinessClass
	owned by cashmgmt
	prefix is CMCFC

	Ontology
		symbolic key is CashForecastCategory
		
	Patterns
		implements DynamicCreation
		implements Resequence on DisplayOrder
			new sequence field is NewDisplayOrder
			set is ByDisplayOrder
			
    Persistent Fields
		DisplayOrder
		ForecastCreationParameter
		Comments					 	is Text
		CreatedFromStatementLine	 	is Boolean
		IsSummaryLevel				 	is Boolean				

	Transient Fields
		NewDisplayOrder				 	is a DisplayOrder
		BypassAmountCalculation		 	is Boolean
		
	Local Fields
		LocalParentForecastCategory		is a CashForecastCategory
		LocalCashTransactionCategory	is a CashTransactionCategory
		LocalCashManagementAccount	 	is a CashManagementAccount
		LocalForecastDate			 	is Date
		ForecastDateArrayCounter	 	is Numeric 1
		LocalDateRange					is a DateRange
		LocalRollingFrequencyDuration   is Numeric 3
		LocalForecastDateArray			is a ForecastDateArray
		LocalMonthDifference 			is Numeric 10
		LocalYear 						is Numeric 10
		LocalRollingDateRange			is a DateRange
		LocalArrayValue					is Date
		LocalForecastCalendar			is a SystemCalendar 	
		
	Derived Fields
		SummarizedTransactionMessage is a MessageField
			restricted
			"SummarizedTransaction"
		
		NumberOfDaysInRange is a DerivedField
  			type is Numeric 4
  			restricted
  			return (instance count of CashForecastPeriodDaysInRangeRel)
  		
  		NumberOfWeekDaysInRange is a DerivedField
  			type is Numeric 4
  			restricted
  			return (instance count of CashForecastPeriodDayOfWeekRel)
  		
  		NumberOfMonthDaysInRange is a DerivedField
  			type is Numeric 4
  			restricted
  			return (instance count of CashForecastPeriodDayOfMonthRel)
  		
  		ForecastAccountDisclaimer is a DerivedField
  			type is Alpha up to 100
  			if (ForecastCreationParameter.ScheduledCalculationOption.Debt
  			and ForecastCreationParameter.DebtInstrument.CashForecastAccount entered)
  				return "Forecast will only be calculated for Account " + ForecastCreationParameter.DebtInstrument.CashForecastAccount
  			else
  				return blank

		DerivedRollingFrequencyWeeksToDaysDuration is a DerivedField
			type is Numeric 3
			restricted
			return (LocalRollingFrequencyDuration * 7)

		DerivedRollingActualBeginDate is a DerivedField
			type is Date
			restricted
			return (ForecastCreationParameter.LastRollingActualDate + 1 day)

		DerivedRollingActualEndDate is a DerivedField
			type is Date
			restricted
			if (ForecastCreationParameter.RollingFrequency.Weekly)
				return (ForecastCreationParameter.LastRollingActualDate + DerivedRollingFrequencyWeeksToDaysDuration as days)
			else
			if (ForecastCreationParameter.RollingFrequency.Monthly)
				return (ForecastCreationParameter.LastRollingActualDate + LocalRollingFrequencyDuration as months)
			else
			if (ForecastCreationParameter.RollingFrequency.Annually)
				return (ForecastCreationParameter.LastRollingActualDate + LocalRollingFrequencyDuration as years)

		DerivedActualBeginDate is a DerivedField 
			type is Date
			restricted
			if (ForecastCreationParameter.RollingFrequency.Weekly)
				return LocalRollingDateRange.Begin
			else
			if (ForecastCreationParameter.RollingFrequency.Monthly)
				LocalMonthDifference = LocalRollingDateRange.End month - ForecastCreationParameter.ForecastDateRange.Begin month
				LocalYear   = LocalRollingDateRange.End year - ForecastCreationParameter.ForecastDateRange.Begin year
				
				if (LocalYear > 0)
					LocalMonthDifference = 1
				return (ForecastCreationParameter.ForecastDateRange.Begin + LocalMonthDifference as months)
			else
			if (ForecastCreationParameter.RollingFrequency.Annually)
				LocalMonthDifference = LocalRollingDateRange.End year - ForecastCreationParameter.ForecastDateRange.Begin year
				return (ForecastCreationParameter.ForecastDateRange.Begin + LocalMonthDifference as years)

		DerivedActualEndDate is a DerivedField 
			type is Date
			restricted
			if (ForecastCreationParameter.RollingFrequency.Weekly)
				return (LocalRollingDateRange.Begin + DerivedRollingFrequencyWeeksToDaysDuration as days)
			else
			if (ForecastCreationParameter.RollingFrequency.Monthly)
				return (ForecastCreationParameter.ForecastDateRange.End + LocalMonthDifference as months)
			else
			if (ForecastCreationParameter.RollingFrequency.Annually)
				return (ForecastCreationParameter.ForecastDateRange.End + LocalMonthDifference as years)

		DerivedForecastDateArrayValue is a DerivedField
			type is Date
			restricted
			if (ForecastCreationParameter.RollingFrequency.Weekly)
				return (LocalForecastDate + DerivedRollingFrequencyWeeksToDaysDuration as days)
			else
			if (ForecastCreationParameter.RollingFrequency.Monthly)
				LocalYear   = LocalRollingDateRange.End year - LocalForecastDate year

				if (LocalYear > 0)
					LocalMonthDifference = 1

				return (LocalForecastDate + LocalMonthDifference as months)
			else
			if (ForecastCreationParameter.RollingFrequency.Annually)
				LocalMonthDifference = LocalRollingDateRange.End year - LocalForecastDate year
				return (LocalForecastDate + LocalMonthDifference)
				
	Field Rules
		ParentForecastCategory
			force default to CashForecastCategory.CashTransactionCategory.ParentTransactionCategory
			
		DisplayOrder
			if (!CashForecastCategory.CashTransactionCategory.HasChild)
				autosequence using ByDisplayOrder
		
		ForecastCreationParameter
			initial value is CashForecast.ForecastCreationParameter
			
			if (!HasChild
			and ForecastCreationParameter changed
			and HaveBuiltForecast
			and !BypassAmountCalculation)
				confirmation required
					"ForecastAmountsForAllAccounts,Category<CashForecastCategory.CashTransactionCategory>WillBeRecalculated;WouldYouLikeToContinue?"
				
				for each CashForecast.CashForecastAccount set
					LocalCashManagementAccount = each.CashForecastAccount.CashManagementAccount
					invoke Delete CashForecastPeriodAmountByCategoryRel
					
					invoke CalculateForecastAmountByCategory
						invoked.PrmCashManagementGroup	 = CashManagementGroup
						invoked.PrmCashManagementAccount = each.CashForecastAccount.CashManagementAccount
						invoked.PrmForecastCalendar		 = each.ForecastCalendar
		
		IsSummaryLevel
			if (HasChild)
				force default to true
				
	Conditions
  		HaveBuiltForecast
  			restricted
  			when (CashForecast.HaveBuiltForecast)
  		
  		HasParentCategory
  			restricted
    		when (ParentForecastCategory entered)
    		
    	HasChild
    		restricted
    		when (CashForecastCategory children exist)
    		
    	CanAddCategory
    		restricted
  			when (HaveBuiltForecast
  			and   CashForecast.IsUpdatable
  			and   !HasChild)
  		
  		CanMaintain
  			restricted
  			when (!HaveBuiltForecast
  			and   CashForecast.IsUpdatable
  			and   !HasChild)
  			
  		CanDelete
  			restricted
  			when (CashForecast.Status.New)
  				
	Relations
		CashForecastPeriodAmountByCategoryRel
			one-to-many relation to CashForecastPeriodAmount
			Field Mapping uses ByCashTransactionCategory
				related.CashManagementGroup	  					  = CashManagementGroup
				related.CashForecast		  					  = CashForecast
				related.CashForecastCategory 					  = CashForecastCategory
				related.CashForecastAccount.CashManagementAccount = LocalCashManagementAccount
		
		CashForecastPeriodAmountByCategoryOnlyRel
			one-to-many relation to CashForecastPeriodAmount
			delete cascades
			Field Mapping uses ByCashTransactionCategory
				related.CashManagementGroup	 = CashManagementGroup
				related.CashForecast		 = CashForecast
				related.CashForecastCategory = CashForecastCategory
				
		CashForecastPeriodDayOfWeekRel
			one-to-many relation to CashForecastPeriod
			Field Mapping uses symbolic key
				related.CashManagementGroup		  				  = CashManagementGroup
				related.CashForecast		  					  = CashForecast
				related.CashForecastAccount.CashManagementAccount = LocalCashManagementAccount
			Instance Selection
				where (related.CashForecastPeriod within LocalDateRange
				and	   related.NumericDayOfWeek = ForecastCreationParameter.DayOfWeek)
		
		CashForecastPeriodDayOfMonthRel
			one-to-many relation to CashForecastPeriod
			Field Mapping uses symbolic key
				related.CashManagementGroup		  				  = CashManagementGroup
				related.CashForecast		  					  = CashForecast
				related.CashForecastAccount.CashManagementAccount = LocalCashManagementAccount
			Instance Selection
				where (related.CashForecastPeriod within LocalDateRange
				and	   related.CashForecastPeriodDay = ForecastCreationParameter.DayOfMonth)
		
		CashForecastPeriodDaysInRangeRel
			one-to-many relation to CashForecastPeriod
			Field Mapping uses symbolic key
				related.CashManagementGroup		  				  = CashManagementGroup
				related.CashForecast		  					  = CashForecast
				related.CashForecastAccount.CashManagementAccount = LocalCashManagementAccount
			Instance Selection
				where (related.CashForecastPeriod within LocalDateRange)
			
		ForecastDateBankDayRel
    		one-to-many relation to SystemCalendarDate
    		Field Mapping uses symbolic key
    			related.EnterpriseGroup		= CashManagementGroup.EnterpriseGroup
				related.SystemCalendar		= LocalForecastCalendar
				related.SystemCalendarDate	= LocalArrayValue
			Instance Selection 
				where (related.IsBankDay)
		
		ParentForecastCategoryRel
			one-to-one relation to CashForecastCategory
			Field Mapping uses symbolic key
				related.CashManagementGroup	 	= CashManagementGroup
				related.CashForecast		 	= CashForecast
				related.CashForecastCategory 	= LocalParentForecastCategory
						
		PeerWithParentForecastCategoryRel
			one-to-many relation to CashForecastCategory
			Field Mapping uses ByParentKey
				related.CashManagementGroup		= CashManagementGroup
				related.CashForecast		 	= CashForecast
				related.ParentForecastCategory 	= ParentForecastCategory
			Instance Selection
				where (related.CashForecastCategory != CashForecastCategory)
		
		CashForecastPeriodAmountCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "CashForecastPeriodAmount"
	    
	    DebtCashForecastAccountRel
	    	one-to-one relation to CashForecastAccount
			Field Mapping uses symbolic key
				related.CashManagementGroup		  				  = CashManagementGroup
				related.CashForecast 							  = CashForecast
				related.CashForecastAccount.CashManagementAccount = LocalCashManagementAccount

	Sets
		ByDisplayOrder
			duplicates
			Sort Order
 				CashManagementGroup
 				CashForecast
 				DisplayOrder


 		
 		ByParentKey
 			Sort Order
 				CashManagementGroup
				CashForecast
				ParentForecastCategory
				CashForecastCategory
	
 	Rule Blocks
		AddParentForecastCategories
			LocalCashTransactionCategory = CashForecastCategory.CashTransactionCategory
			for each LocalCashTransactionCategory ancestors
				LocalParentForecastCategory.CashTransactionCategory = each.CashTransactionCategory
				if (!ParentForecastCategoryRel exists)
					invoke CreateSummaryCategories CashForecastCategory
						invoked.CashManagementGroup								= CashManagementGroup
						invoked.CashForecast									= CashForecast
						invoked.CashForecastCategory.CashTransactionCategory	= each.CashTransactionCategory
						invoked.ParentForecastCategory.CashTransactionCategory  = each.ParentTransactionCategory
						invoked.IsSummaryLevel									= true
						
		CalculateCategoryForecastAmount
			initialize LocalDateRange
			if (!HasChild)
				LocalRollingDateRange = PrmRollingDateRange
				if (ForecastCreationParameter.ForecastCalculation.Historical)
					if (!PrmRollingDateRange entered)
						LocalDateRange = ForecastCreationParameter.ActualDateRange
					else
						LocalDateRange.Begin = DerivedRollingActualBeginDate
						LocalDateRange.End   = DerivedRollingActualEndDate

					invoke GetForecastTransactions BankStatementLine
						invoked.PrmCashManagementGroup 	  	  = CashManagementGroup
						invoked.PrmCashForecast 	   		  = CashForecast
						invoked.PrmCashAccount		   		  = PrmCashManagementAccount
						invoked.PrmForecastCalendar			  = PrmForecastCalendar
						invoked.PrmActualDateRange		  	  = LocalDateRange
						invoked.PrmCategory			   		  = CashForecastCategory.CashTransactionCategory
						invoked.PrmForecastCreationParameter  = ForecastCreationParameter
						invoked.PrmRollingDateRange			  = PrmRollingDateRange
					if (PrmRollingDateRange entered)
						ForecastCreationParameter.ActualDateRange = LocalDateRange
						ForecastCreationParameter.LastRollingActualDate = DerivedRollingActualEndDate
				
				if (ForecastCreationParameter.ForecastCalculation.Calculated)						
					if (ForecastCreationParameter.EnteredCalculationOption.Date)
						LocalForecastDateArray = ForecastCreationParameter.ForecastDateArray
						if (PrmRollingDateRange entered)
							LocalCashManagementAccount = PrmCashManagementAccount
							ForecastDateArrayCounter = 1
							LocalMonthDifference = LocalRollingDateRange.End month - LocalForecastDateArray.ForecastDate[1] month
							while (ForecastDateArrayCounter <= 4)
								if (LocalForecastDateArray.ForecastDate[ForecastDateArrayCounter] entered)
									LocalForecastDate = LocalForecastDateArray.ForecastDate[ForecastDateArrayCounter]
									LocalForecastDateArray.ForecastDate[ForecastDateArrayCounter] = DerivedForecastDateArrayValue

								ForecastDateArrayCounter += 1
								
							ForecastCreationParameter.ForecastDateArray = LocalForecastDateArray

						if (!PrmRollingDateRange entered)
							LocalDateRange = ForecastCreationParameter.ForecastDateRange
						else
							LocalDateRange = PrmRollingDateRange

						ForecastDateArrayCounter = 1
						while (ForecastDateArrayCounter <= 4)
							if (LocalForecastDateArray.ForecastDate[ForecastDateArrayCounter] entered)
								if (LocalForecastDateArray.ForecastDate[ForecastDateArrayCounter] within LocalDateRange)
									LocalArrayValue = LocalForecastDateArray.ForecastDate[ForecastDateArrayCounter]
									if (ForecastDateBankDayRel exists)
										invoke Create CashForecastDetail
											invoked.CashManagementGroup						  = CashManagementGroup
											invoked.CashForecast							  = CashForecast
											invoked.CashForecastAccount.CashManagementAccount = PrmCashManagementAccount
											invoked.CashForecastPeriod						  = LocalForecastDateArray.ForecastDate[ForecastDateArrayCounter]
											invoked.CashForecastCategory 					  = CashForecastCategory
											invoked.Description								  = SummarizedTransactionMessage
											if (ForecastCreationParameter.CalculationMethod.Whole)
												invoked.ForecastAmount						  = ForecastCreationParameter.ForecastAmount
											else
												invoked.ForecastAmount						  = (ForecastCreationParameter.ForecastAmount / ForecastCreationParameter.NumberOfDatesEntered)
											invoked.IsSystemCalculated						  = true
							ForecastDateArrayCounter += 1
					else
					if (ForecastCreationParameter.EnteredCalculationOption.DayOfWeek)
						LocalCashManagementAccount = PrmCashManagementAccount
						if (!PrmRollingDateRange entered)
							LocalDateRange = ForecastCreationParameter.ForecastDateRange
						else
							LocalDateRange.Begin = DerivedActualBeginDate
							LocalDateRange.End   = DerivedActualEndDate

							if (LocalDateRange.End > PrmRollingDateRange.End)
								LocalDateRange.End = PrmRollingDateRange.End
						for each CashForecastPeriodDayOfWeekRel
							invoke Create CashForecastDetail
								invoked.CashManagementGroup						  = CashManagementGroup
								invoked.CashForecast							  = CashForecast
								invoked.CashForecastAccount.CashManagementAccount = PrmCashManagementAccount
								invoked.CashForecastPeriod						  = each.CashForecastPeriod
								invoked.CashForecastCategory 					  = CashForecastCategory
								invoked.Description								  = SummarizedTransactionMessage
								if (ForecastCreationParameter.CalculationMethod.Whole)
									invoked.ForecastAmount						  = ForecastCreationParameter.ForecastAmount
								else
									invoked.ForecastAmount						  = (ForecastCreationParameter.ForecastAmount / NumberOfWeekDaysInRange)
								invoked.IsSystemCalculated						  = true
						if (PrmRollingDateRange entered)
							ForecastCreationParameter.ForecastDateRange = LocalDateRange
					else
					if (ForecastCreationParameter.EnteredCalculationOption.DayOfMonth)
						LocalCashManagementAccount = PrmCashManagementAccount
						if (!PrmRollingDateRange entered)
							LocalDateRange = ForecastCreationParameter.ForecastDateRange
						else
							LocalDateRange.Begin = DerivedActualBeginDate
							LocalDateRange.End = DerivedActualEndDate

							if (LocalDateRange.End > PrmRollingDateRange.End)
								LocalDateRange.End = PrmRollingDateRange.End

						for each CashForecastPeriodDayOfMonthRel
							invoke Create CashForecastDetail
								invoked.CashManagementGroup						  = CashManagementGroup
								invoked.CashForecast							  = CashForecast
								invoked.CashForecastAccount.CashManagementAccount = PrmCashManagementAccount
								invoked.CashForecastPeriod						  = each.CashForecastPeriod
								invoked.CashForecastCategory 					  = CashForecastCategory
								invoked.Description								  = SummarizedTransactionMessage
								if (ForecastCreationParameter.CalculationMethod.Whole)
									invoked.ForecastAmount						  = ForecastCreationParameter.ForecastAmount
								else
									invoked.ForecastAmount						  = (ForecastCreationParameter.ForecastAmount / NumberOfMonthDaysInRange)	
								invoked.IsSystemCalculated						  = true
						if (PrmRollingDateRange entered)
							ForecastCreationParameter.ForecastDateRange = LocalDateRange
					else	
						LocalCashManagementAccount = PrmCashManagementAccount
						if (!PrmRollingDateRange entered)
							LocalDateRange = ForecastCreationParameter.ForecastDateRange
						else
							LocalDateRange.Begin = DerivedActualBeginDate
							LocalDateRange.End   = DerivedActualEndDate
						
							if (LocalDateRange.End > PrmRollingDateRange.End)
								LocalDateRange.End = PrmRollingDateRange.End


						for each CashForecastPeriodDaysInRangeRel
							invoke Create CashForecastDetail
								invoked.CashManagementGroup						  = CashManagementGroup
								invoked.CashForecast							  = CashForecast
								invoked.CashForecastAccount.CashManagementAccount = PrmCashManagementAccount
								invoked.CashForecastPeriod						  = each.CashForecastPeriod
								invoked.CashForecastCategory 					  = CashForecastCategory
								invoked.Description								  = SummarizedTransactionMessage
								if (ForecastCreationParameter.CalculationMethod.Whole)
									invoked.ForecastAmount						  = ForecastCreationParameter.ForecastAmount
								else
									invoked.ForecastAmount						  = (ForecastCreationParameter.ForecastAmount / NumberOfDaysInRange)
								invoked.IsSystemCalculated						  = true
						if (PrmRollingDateRange entered)
							ForecastCreationParameter.ForecastDateRange = LocalDateRange
				




				



	
  	Actions
  		Create is a Create Action
  			valid when (CanMaintain)
  			Exit Rules
  				include AddParentForecastCategories
  				
		CreateSummaryCategories is a Create Action
			default label is untranslatable
			restricted
			Action Rules
				IsSummaryLevel = true
					
		AddCategory is a Create Action 
			valid when (CanAddCategory)
			confirmation required
				"ForecastCalculationsForCategory<CashForecastCategory.CashTransactionCategory>WillBePerformedForEachAccountDefinedOnTheCashForecast;WouldYouLikeToContinue?"
			completion message is "CategoryForecastCalculationHasBeenSubmittedToTheQueueForProcessing"
			Exit Rules
				include AddParentForecastCategories
			
				for each CashForecast.CashForecastAccount set
					invoke CalculateForecastAmountByCategory
						invoked.PrmCashManagementGroup	 = CashManagementGroup
						invoked.PrmCashManagementAccount = each.CashForecastAccount.CashManagementAccount
						invoked.PrmForecastCalendar		 = each.ForecastCalendar
		
				invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
				
		CalculateForecastAmountByCategory is an Instance Action
			default label is untranslatable
			restricted
			run in background
			Parameters
				PrmCashManagementGroup	 	is a CashManagementGroup
				PrmCashManagementAccount 	is a CashManagementAccount
				PrmForecastCalendar		 	is a SystemCalendar
				PrmRollingDateRange		 	is a DateRange
				
			Parameter Rules
				PrmCashManagementGroup	 	required
				PrmCashManagementAccount 	required
				PrmForecastCalendar	     	required
					
			Action Rules
				LocalForecastCalendar = PrmForecastCalendar
				include CalculateCategoryForecastAmount
		
			Exit Rules
				invoke UpdateActualAmountsOnForecast CashForecastPeriodAmount
					invoked.PrmCashManagementGroup 							= PrmCashManagementGroup
					invoked.PrmCashForecast     							= CashForecast
					invoked.PrmCashForecastAccount.CashManagementAccount	= PrmCashManagementAccount
					invoked.PrmCashForecastCategory							= CashForecastCategory
				
		CalculateForecastAmountForAllCategories is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup	 	is a CashManagementGroup
				PrmCashForecast			 	is a CashForecast
				PrmCashManagementAccount 	is a CashManagementAccount
				PrmForecastCalendar		 	is a SystemCalendar
				PrmRollingDateRange		 	is a DateRange
				PrmRollingFrequencyDuration is Numeric 3
				
			Parameter Rules
				PrmCashManagementGroup	 	required
				PrmCashForecast			 	required
				PrmCashManagementAccount 	required
				PrmForecastCalendar	     	required
				
			Sort Order
				CashManagementGroup
				CashForecast
				CashForecastCategory

			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup
				and    CashForecast				= PrmCashForecast
				and	   !HasChild 	
				and	   PrmCashManagementAccount = PrmCashManagementAccount) 
			
			Action Rules
				Set Rules
					Exit Rules
						invoke UpdateActualAmountsOnForecast CashForecastPeriodAmount
							invoked.PrmCashManagementGroup 							= PrmCashManagementGroup
							invoked.PrmCashForecast     							= PrmCashForecast
							invoked.PrmCashForecastAccount.CashManagementAccount	= PrmCashManagementAccount					
				
				Instance Rules
					LocalRollingFrequencyDuration = PrmRollingFrequencyDuration
					LocalForecastCalendar = PrmForecastCalendar
					include CalculateCategoryForecastAmount

  		Update is an Update Action
  			valid when (CashForecast.IsUpdatable)
  			Action Rules
  				constraint (!HasChild)
  					"CannotUpdateASummaryLevelCategory"
  					
  				if (!CashForecast.Status.New)
  					constraint (!ForecastCreationParameter changed)
  						"CanOnlyUpdateANewForecast"
  		



						



				
  		UpdateSummaryCategoriesOnForecast is a Set Action
			default label is untranslatable
			restricted
			Parameters
				CashManagementGroup
  				
  			Parameter Rules
  				CashManagementGroup	required
  			
  			Sort Order
  				CashManagementGroup
				CashForecast
				CashForecastCategory
  			
			Instance Selection
  				where (CashManagementGroup	= CashManagementGroup)	
  			
  			Action Rules
  				Set Rules
					Exit Rules
						invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
						
				Instance Rules
  					ParentForecastCategory.CashTransactionCategory = CashForecastCategory.CashTransactionCategory.ParentTransactionCategory
  				
  					include AddParentForecastCategories
									
  		Delete is a Delete Action
  			valid when (CanDelete)
  			Action Rules
  				if (!PeerWithParentForecastCategoryRel exists) 
  					LocalParentForecastCategory = ParentForecastCategory
  					
  			Exit Rules
				if (LocalParentForecastCategory entered)
					invoke Delete LocalParentForecastCategory.CashForecastPeriodAmount set
					invoke Delete LocalParentForecastCategory and ancestors 
  				
  				if (CashForecast.HaveBuiltForecast)
  					invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
  							
  		Purge is a Purge Action
  			restricted
  			Action Rules
  				if (!PeerWithParentForecastCategoryRel exists) 
  					LocalParentForecastCategory = ParentForecastCategory
  					
			Exit Rules
				if (LocalParentForecastCategory entered)
					invoke Purge LocalParentForecastCategory.CashForecastPeriodAmount set
					invoke Purge LocalParentForecastCategory and ancestors 
  				
  				if (CashForecast.HaveBuiltForecast)
  					invoke ScheduledRefresh CashForecastPeriodAmountCubeRel in background
