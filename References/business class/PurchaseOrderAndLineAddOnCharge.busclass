PurchaseOrderAndLineAddOnCharge is a BusinessClass
    owned by po
    prefix is PAO
    sql name is POrderAndLineAddOnCharge
    classic name is POAOCDTL

    Ontology
        symbolic key is PurchaseOrderAndLineAddOnCharge
            classic set name is PAOSET1
            classic name for PurchaseOrderLine is LINE-NBR
            classic name for AddOnCharge is AOC-CODE

    Patterns
        implements ContextualParent
        implements StaticJava
        disable AuditIndex
        implements Archivable
        
    Persistent Fields        
        Vendor
        PurchaseFromLocation			is a VendorLocation
            classic name is PURCH-FR-LOC
        ShipToLocation                  is an InventoryLocation
            classic name is LOCATION
        AddOnChargeEntryMethod
            classic name is ENTRY
        AddOnChargePercent
            classic name is AOC-RATE
        Quantity						is like Quantity
        	precision is DerivedNumberOfDecimalsQuantity
		TotalAddOnChargeAmount			is a CurrencyAmount
			classic name is  TOTAL-AOC
        EnteredUnitCost                 is an InternationalCost
            classic name is ENT-UNIT-CST
            precision is DerivedNumberOfDecimalsCost



		AddOnChargeAmountPOCurrency		is an InternationalAmount
			classic name is  TOTAL-AOC-PO


       
        ReceivedQuantity                is like Quantity
            classic name is REC-QTY
			protected
			precision is DerivedNumberOfDecimalsQuantity        
        MatchedQuantity                 is like Quantity
            classic name is MATCHED-QTY
			protected
			precision is DerivedNumberOfDecimalsQuantity        
        MiscellaneousAddOnChargeInvoicedAmount  is an InternationalAmount    
            classic name is MISC-MA-AMT
			protected        
        ReceivedQuantityToMatch         is like Quantity
            classic name is RECQTY-TO-MA
            restricted
			protected
			precision is DerivedNumberOfDecimalsQuantity        
		LandedAddOnCharge               is Boolean 
            classic name is LANDED-FLAG
        LandedUnitCost                  is an InternationalCost
            classic name is LAND-UNIT-CST
            precision is DerivedNumberOfDecimalsCost
        Taxable                         is Boolean
            classic name is TAXABLE-FLAG
        TaxCode
        Account							is a TransactionCodeBlock
        AddOnChargeOrigin
            classic name is ORIGIN-CD
        PrintOnPO                       is Boolean
            classic name is AOC-ON-PO
        Summarize                       is Boolean
            classic name is SUMMARY-FLAG
        ZeroCost                        is Boolean
            classic name is ZERO-COST-FLG
        Canceled                        is Boolean
            classic name is CANCELLED-FL
			protected        
        Closed
            classic name is CLOSED-FL
			protected        
        CreatedDuringSpread             is Boolean
            classic name is INV-SPRD-CRET
        MatchDetailKey
            classic name is MATCH-DTL-KEY
        Issued                          is Boolean
            classic name is ISSUED-FLAG
       	AccruedTaxAmount				is a CurrencyAmount
       		classic name is ACCR-TAX-AMT
			protected        
       	AccruedTaxAmountPOCurrency      is an InternationalAmount
            classic name is ATAX-AMT-PO 
        BillingInvoiceAmount            is an InternationalAmount
            classic name is BL-INVC-AMT
		

        FreightTerm
            classic name is FREIGHT-TERMS
        ShipTerm
            classic name is FOB-CODE
        TermCode						is a TermsCode
        CrossReferenceVendor
            classic name is XREF-VENDOR
        Currency						is a FromCurrency
            classic name is CURRENCY-CODE
        EnteredCurrencyConversionRate
            classic name is ENT-CNV-RATE
        ReceiptCurrencyConversionRate   is an EnteredCurrencyConversionRate
            classic name is REC-CNV-RATE
        OpenPurchaseAmount              is an InternationalAmount
            classic name is OPEN-PO-AMT
        ChargebackQuantity              is like Quantity
            classic name is CHARGEBACK-QTY
            precision is DerivedNumberOfDecimalsQuantity

        InvoicedTaxAmount				is a CurrencyAmount
        	classic name is INVC-TAX-AMT
			protected        
        InvoicedTaxAmountPOCurrency		is an InternationalAmount
            classic name is ITAX-AMT-PO

		ExtendedTaxableAmount			is a CurrencyAmount
			classic name is EXT-TAXBL-AMT
        ExtendedTaxableAmountPOCurrency is an InternationalAmount
            sql name is ETaxableAmountPOCurrency
            classic name is EX-TXBL-AMT-PO

        MatchedNotReceivedQuantity      is like Quantity
            classic name is MNR-QTY
            precision is DerivedNumberOfDecimalsQuantity
        WriteOffQuantity                is like Quantity
            classic name is WRITE-OFF-QTY
            precision is DerivedNumberOfDecimalsQuantity
        ArchivedQuantity                is like Quantity
            classic name is ARCHIVE-QTY
            precision is DerivedNumberOfDecimalsQuantity
        MemoQuantity                    is like Quantity
            classic name is MEMO-QTY
            precision is DerivedNumberOfDecimalsQuantity
        MemoAmount                      is an InternationalAmount
            classic name is MEMO-AMT
        TrackType
        	protected
        GlobalDocumentType
            classic name is GLBL-DOC-TYPE
        GlobalLineType
            classic name is GLBL-LINE-TYPE
        FromRequisition					is like Requisition
        	
	Transient Fields










		TransientMiscPOAOCAmount				is an InternationalAmount
			default label is "PO\AOCAmount"
		TransientMiscInvAOCAmount				is an InternationalAmount
			default label is "InvoiceAOCAmount"
		TransientOldPOAOCAmount 				is an InternationalAmount

		TransientOldPOPrtAmount 				is an InternationalAmount

		TransientOldPOTaxAmount 				is an InternationalAmount

		TransientOldPOVGrdAmount				is an InternationalAmount

		TransientOldOVGrdAmount					is an InternationalAmount

		TransientOldTotOrdAmount				is an InternationalAmount

		TransientAssetInformation				is an AssetInformation
			derive value from HeaderOrLineAddOnChargeDistributionRel.AssetInformation
		TransientFromCopy                       is Boolean	
		TaxEntityValue							is a TaxEntity							
			derive value from Company.AccountingEntity	
		TransientByPassPurchaseOrderLineCallback is Boolean
		TransientByPassHeaderCallback			is Boolean
		TransientHeaderVendor					is like Vendor
		PurchaseOrderLineUpdateFromUnMatchProcess is Boolean
			
	Context Fields
		PayablesCompany
		PayablesInvoice

    Local Fields
    	CurrencyTable
    	LocalFromCurrency				is a FromCurrency
		LocalCurrencyExchange			is a CurrencyExchange
    	CurrencyWork					is a CurrencyExchangeGroup
    	LocalCreateAOC					is Boolean  
    	LocalUpdateAOC					is Boolean  
    	LocalCurrCompany				is like PurchasingCompany  
    	LocalFrCurrCode				    is a Currency 
    	LocalToCurrCode				    is a Currency 
    	LocalSystem						is AlphaUpper size 2 
		LocalEffectDate					is Date  
		LocalBaseAmt					is an InternationalAmount 
		LocalTranAmt					is an InternationalAmount 
		LocalBaseRate					is an EnteredCurrencyConversionRate 
		LocalBaseND						is Numeric size 1 
		LocalTranND						is Numeric size 1 
        LocalCostAllowedND				is Numeric size 1 
        LocalThirdParty 				is Alpha size 1 
        LocalAmountUnsign 				is an InternationalCost 
        LocalOldAmountUnsign 			is an InternationalCost 
        LocalERSCapable 				is Boolean 	
    	LocalPOERSCapable 					is Boolean 	
    	LocalCurrencyND 					is Numeric size 1 
    	LocalQuantity 						 is a Quantity 
    	LocalPOCost							 is an InternationalCost	
    	LocalEnteredUnitCost 				 is an InternationalCost	
		LocalTaxAmount 						 is like InternationalCost 
			precision is DerivedCurrencyNumberOfDecimals 
				round to precision        
    	LocalPurchaseOrderLine 				 is a PurchaseOrderLine 
    	LocalVendorPriceUOMQuantityToProcess is a Quantity 
    	LocalEnteredBuyUOMMultiplier		 is an UOMMultiplier 
    	LocalVendorPriceUOMMultiplier 	 	 is an UOMMultiplier 
		LocalCostND							 is Numeric size 1 
    	LocalAmountND 						 is Numeric size 1 
    	LocalTotalAddOnChargeAmount 		 is an InternationalAmount  
		LocalDoNotReadPAO					 is Boolean 
   		LocalDoNotStorePAO					 is Boolean 
   		LocalCalculateTaxExecuted	is Alpha 1	
		LocalJurisdictionLookupKey  		is Alpha 200					
		CalculateTax
		LocalPostingDate                    is a PostingDate
		LocalAccountingEntity 				is an AccountingEntity 
		LocalExchangeDate                   is an ExchangeDate
        LocalUnitCost                 		is an UnsignedUnitCost
        LocalGeneralLedgerSystemCode 		is a GeneralLedgerSystemCode
        LocalNewLandedUnitCost				is Boolean
		LocalOldTotalAddOnChargeAmount		is a CurrencyAmount

		LocalPOLineAOCAE                    is Alpha size 22

		LocalOldPrintOnPO 						is Boolean
		LocalOldAddOnChargeAmountPOCurrency		is an InternationalAmount
		LocalOldInvoicedTaxAmountPOCurrency		is an InternationalAmount
		LocalOldAccruedTaxAmountPOCurrency		is an InternationalAmount
		LocalOldVendor							is like Vendor
		LocalPayablesInvoice					is a PayablesInvoice
		LocalLineAOCInvoiceQuantity				is like Quantity
		BypassHeaderAmountUpdate				is Boolean
		BypassCommitUpdate						is Boolean
		BypassProjectDateEdit
		LocalOldAccount                         is a TransactionCodeBlock

		LocalOneSourceTaxAttribute				is a TaxAttributeGroup50
		LocalOneSourceTaxAttributeText			is Text
		AttributeCounter						is Numeric 2

		LocalCallOneSource						is Boolean
		LocalLineExtendedAmount					is an InternationalAmount
		LocalLargestPOLine						is a PurchaseOrderLine view
		TaxLineItemView							is a TaxLineItem view
		LocalLineItemNumber						is like DistributionSequence 
		RoundedValue
		LocalUniqueID							is like UniqueID

		LocalVertexDistributionAccount      is a FinanceCodeBlock
		Idx									is Numeric 3
		LocalMatchWork 						is like MatchWork 

    Derived Fields
    	DerivedOtherVendor is a DerivedField
    		type is Alpha size 9
    		if (Vendor = PurchaseOrder.Vendor)
    			return blank
    		else
    			return Vendor
    			
    	DerivedOtherVendorName is a DerivedField
    		type is Alpha size 120
    		if (Vendor = PurchaseOrder.Vendor)
    			return blank
    		else
    			return Vendor.VendorName

		ContextMessageEntityType is a StringField
			type is Alpha 50
			restricted
			"InforPurchaseOrderLineAddOnCharge"
		
		ContextMessageText is a MessageField
			restricted
			"AddOnCharge<AddOnCharge>ToPurchaseOrderLine<PurchaseOrderLine>OfPurchaseOrder<PurchaseOrder>"

		DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1
			restricted
			if (LineAddOnCharge)
				PurchaseOrderLine.DerivedNumberOfDecimalsCost
			else
			if (InventoryCompanyRel exists) 
				InventoryCompanyRel.NumberOfDecimalsCost
			else
				8
				
		DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1
			restricted
			if (LineAddOnCharge)
				PurchaseOrderLine.DerivedNumberOfDecimalsQuantity
			else
			if (InventoryCompanyRel exists) 
				InventoryCompanyRel.NumberOfDecimalsQuantity
			else
				4
				
		DerivedQuantity is a DerivedField
			type is like Quantity
			restricted
			if (LineAddOnCharge)
				if (ReceivedQuantity > Quantity)
					return (ReceivedQuantity - MatchedQuantity)	
				else
					return (Quantity - MatchedQuantity)	
			else
				return 1
		
		DerivedLineAOCInvoiceQuantity is a DerivedField		
			type is like Quantity
			restricted
			
			initialize LocalLineAOCInvoiceQuantity
			if (ReceivedQuantity entered)
				LocalLineAOCInvoiceQuantity = ReceivedQuantity - MatchedQuantity
			else
				LocalLineAOCInvoiceQuantity = Quantity - MatchedQuantity
			
			if (PurchaseOrderLine.VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
				LocalLineAOCInvoiceQuantity = LocalLineAOCInvoiceQuantity * (PurchaseOrderLine.EnteredBuyUOMMultiplier / PurchaseOrderLine.VendorPriceUOMMultiplier)
			
			if (LocalLineAOCInvoiceQuantity < 0)
				initialize LocalLineAOCInvoiceQuantity
			
			return LocalLineAOCInvoiceQuantity
		
		DerivedDistributionAmount is a DerivedField   
			type is like InternationalAmount
			if (LineAddOnCharge)
				if (Canceled)
					return 0
				else
					return (DerivedQuantity * EnteredUnitCost)
			else
				if (Canceled)
					return 0
				else
					return (TotalAddOnChargeAmount - MiscellaneousAddOnChargeInvoicedAmount)
			
				
		DerivedTotalAOCAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum AddOnCharge.ContextPurchaseOrderAndLineAddOnChargesRel.TotalAddOnChargeAmount)


				
		DerivedPOLChargeTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (InvoicedTaxAmount + AccruedTaxAmount)
			
		DerivedPOLAOCType is a DerivedField
			type is Alpha size 22
			restricted
			if(TrackType = "C")
				return "Charge"
			else 
				return "Allowance"
				
		BODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			return PurchaseOrder.BODAccountingEntity
				



		DerivedPurchaseOrderHeaderAOCPercent is a DerivedField
			type is Alpha size 25
			restricted
			return (AddOnChargePercent*100)
			
		DerivedAOCDescription is a DerivedField 
			type is Alpha size 60
			return AddOnCharge.Description

		DerivedTaxCode is a DerivedField
			type is Alpha size 60
			restricted
			return PurchaseOrderAndLineAddOnCharge.AddOnCharge.TaxCode
			
		ProcessBODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			return PurchaseOrder.ProcessBODAccountingEntity	

		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp				
					
		DerivedCurrencyNumberOfDecimals is a DerivedField  
			type is like Currency
			restricted
			return Currency.NumberOfDecimals
	Conditions
		
		HasOtherVendor
			restricted
			when (DerivedOtherVendor entered)
									
		HasTaxCode
            classic name is AOCTAX
            restricted
            when (TaxCode entered)

        HasInvoicedTax
        	restricted
        	when (InvoicedTaxAmount != 0)
        	
        HasAccruedTax
        	restricted
        	when (AccruedTaxAmount != 0)
        
        TaxEntityUsesThirdPartyTax
			restricted
			when (TaxEntityUsesVertex
			or    TaxEntityUsesSabrix)
		
		TaxEntityUsesVertex
			restricted				 							
			when (TaxEntityValue.ThirdParty.VertexOSeries)	

		TaxEntityUsesSabrix										
			restricted				 							
			when (TaxEntityValue.ThirdParty.Sabrix)	
        
        LineAddOnCharge
            classic name is DETAILAOC
            restricted
            when (PurchaseOrderLine entered) 

		LineAddOnChargeExists
			restricted
	    	when (PurchaseOrderAndLineAddOnChargeRel exists)	
	    	
	    HeaderAddOnChargeExists
	    	restricted
	    	when (PurchaseOrdeMiscAddOnChargeRel exists)
	    	




        IsLinetax
        	restricted
            when (TaxCode entered)

        BudgetErrorExists
        	restricted
			when (BudgetEditErrorRel exists)
        
        MiscellaneousAddOnCharge
            classic name is MISCAOC
            restricted
            when (!LineAddOnCharge)

        IsMisctax
        	restricted
            when (TaxCode entered)

        Open
        	when (IsNotCanceled
        	and  !Closed.Yes
        	and  !Closed.Historical)
  
        IsNotIssued
        	restricted
        	when (not Issued)
        
        IsCancelAllowed
        	restricted
        	when (IsNotCanceled
        	and   PurchaseOrder.PurchaseOrderEligibleToBeCancelled)
        
        IsCancelRemainingAllowed
        	restricted
        	when (IsNotCanceled
        	and   PurchaseOrder.PurchaseOrderEligibleForCancelRemaining)
        
        IsNotCanceled
            classic name is NOT-CANCELLED
            restricted
            when (!Canceled)

        IsPolinedtl
        	restricted
            when (LineAddOnCharge)

		PayablesInvoiceAocExist
			restricted
			when (PayablesInvoiceAocRel exists)

		PayablesInvoiceAddOnChargesSet6Exist
			restricted
			when (PayablesInvoiceAddOnChargesSet6Rel exists)
				
		CreateInvoiceAocFromPoValid
			restricted
			when (!PayablesInvoiceAocExist
			and	  PayablesInvoice.IsUpdateable)
		


		
		IsVendorERS
			restricted
			when ( PurchaseOrder.InvoiceMethod.InvoiceNotRequired and ( Vendor = PurchaseOrder.Vendor  or Vendor not entered )
			and ( PurchaseFromLocation = PurchaseOrder.PurchaseFromLocation or PurchaseFromLocation not entered )
			and PurchaseOrderAndLineAddOnCharge.PurchaseOrderLine not entered )  
		
		ForApprovalPO
			restricted
			when ( PurchaseOrder.SubcontractorPurchaseOrder and not PurchaseOrder.Approved and PurchaseOrder.Released )
	
		HasActivity	
			restricted
			when  ( LineAddOnCharge and PurchaseOrderLine.ItemType.Inventoried 
            and PurchaseOrderLine.ReceivedQuantity > PurchaseOrderLine.MatchedQuantity  and not ZeroCost)
    	
		LinkedToContextInvoice
			restricted
			when (ContextMatchPurchaseOrderInvoiceRel exists)

		HeaderSpreadAddOnCharge
			restricted
			when (PurchaseOrderSpreadAddOnChargeRel exists)
		
		OpenReceiving
			when (Quantity > ReceivedQuantity)
			
		OpenToMatch
			when (((ReceivedQuantity > MatchedQuantity) and !MiscellaneousAddOnCharge) 
			or    ((TotalAddOnChargeAmount > MiscellaneousAddOnChargeInvoicedAmount) and MiscellaneousAddOnCharge)) 
		
		AllowAOCUpdate
			when (PurchaseOrder.IsUpdateAllowed
			and   not Canceled)
			
		IsCostTypeAOC
			when (AddOnChargeRel.AddOnChargeType.Cost)
		
		DoTaxCalculation
			restricted
			when (not TaxEntityRel.ThirdParty.Sabrix  
			or    not TaxEntityRel.DelayTaxProcessing 
			or    LocalCallOneSource)

		SingleCallToOneSource
			restricted
			when (Taxable
			and	  TaxEntityUsesSabrix
			and	  TaxEntityRel.DelayTaxProcessing
			and	  PurchaseOrder.DerivedNumberOfTaxLineItems <= 200)

		SingleCallToVertex  
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries
			and   TaxEntityRel.VertexCallMethod.ByTransaction
			and	  PurchaseOrder.DerivedNumberOfTaxLineItems <= 200)

		VertexDelayTaxCall
			when (TaxEntityRel.ThirdParty.VertexOSeries
			and   TaxEntityRel.TaxAttributeCode entered)

		HasDistributions 
			when (PurchaseOrderLineDistributionsRel exists)

    Relations
    	NonServicePurchaseOrderLinesWithReceivedQuantityRel
    		one-to-many relation to PurchaseOrderLine
    		Field Mapping uses symbolic key
    			related.Company				= Company
    			related.PurchaseOrder		= PurchaseOrder
			Instance Selection
				where (related.IsNonService
				and    related.HasReceivedQuantity)    	
    	
    	TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxEntity 				= Company.AccountingEntity
    	
    	PurchaseOrderLineRel
    		one-to-many relation to PurchaseOrderLine
    		Field Mapping uses symbolic key
    			related.Company				= Company
    			related.PurchaseOrder		= PurchaseOrder
    			related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (LineAddOnCharge)
    	
    	HeaderOrLineAddOnChargeDistributionRel
    		one-to-many relation to PurchaseOrderLineDistribution
    		delete cascades
    		Field Mapping uses symbolic key
    			related.Company				= Company
    			related.PurchaseOrder		= PurchaseOrder
    			related.PurchaseOrderLine	= PurchaseOrderLine
    			related.AddOnCharge			= AddOnCharge
    
		CommittedPurchaseOrderLineDistributionsRel
            one-to-many relation to PurchaseOrderLineDistribution
            Field Mapping uses symbolic key
                related.Company                   = Company
                related.PurchaseOrder             = PurchaseOrder
                related.PurchaseOrderLine         = PurchaseOrderLine
                related.AddOnCharge               = AddOnCharge
            Instance Selection
            	where (related.CommitmentExists)
		
		ContextMatchPurchaseOrderInvoiceRel
			one-to-one relation to MatchPurchaseOrderInvoice
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PurchaseOrder	= PurchaseOrder
				related.PayablesInvoice	= PayablesInvoice
				related.Vendor			= Vendor
        
        PayablesInvoiceAddOnChargeRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses Set6
				related.Company				= Company
				related.PurchaseOrder   	= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
				related.Vendor				= Vendor

				
        MaaocdtlRel
            one-to-many relation to PayablesInvoiceAddOnCharge
            Field Mapping uses Set6
                related.Company = Company
            Instance Selection
                where (related.PurchaseOrder 		= PurchaseOrder
                and   related.PurchaseOrderLine 	= PurchaseOrderLine
                and   related.Vendor 				= Vendor
                and   related.AddOnCharge 			= AddOnCharge)

		MatchWorkReceiptLineAOCWithReceiptRel
			one-to-many relation to MatchWorkReceiptLineAOC
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= LocalMatchWork
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
			Instance Selection 
				where (related.PurchaseOrderReceipt	entered 
				and    related.AddOnCharge			= AddOnCharge)

        PolineDlvDteRel
            one-to-many relation to PurchaseOrderLine
            Field Mapping uses Set5
                related.Company        = Company
                related.ShipToLocation = ShipToLocation

        VendorLocationRel
            one-to-one relation to VendorLocation
            Field Mapping uses symbolic key
                related.VendorGroup    = Company.VendorGroup
                related.Vendor         = Vendor
                related.VendorLocation = PurchaseFromLocation

        VendorRel
            one-to-one relation to Vendor
            Field Mapping uses symbolic key
                related.VendorGroup = Company.VendorGroup
                related.Vendor      = Vendor
                
        VendorGroupRel
            one-to-one relation to VendorGroup
            Field Mapping uses symbolic key
                related.VendorGroup = PurchaseOrderAndLineAddOnCharge.Company.VendorGroup
                
        BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup              = Company.FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup     = UniqueID
        
        POVendorRel
            one-to-one relation to Vendor
            Field Mapping uses symbolic key
                related.VendorGroup = PurchaseOrderAndLineAddOnCharge.Company.VendorGroup
                related.Vendor      = PurchaseOrder.Vendor	        

		PurchaseOrderReceiptLineAOCRel
			one-to-one relation to PurchaseOrderReceiptLineAOC
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrderReceipt		= PurchaseOrder
				related.PurchaseOrderReceiptLine	= PurchaseOrderLine
				related.AddOnCharge					= AddOnCharge		

		PurchaseOrderReceiptLineAOCSet3Rel
			one-to-many relation to PurchaseOrderReceiptLineAOC
			Field Mapping uses Set3
				related.Company			= Company
				related.PurchaseOrder	= PurchaseOrder
			Instance Selection
				where (related.Vendor	= Vendor)

		PurchaseOrderReceiptLineAOCSet2Rel
			one-to-many relation to PurchaseOrderReceiptLineAOC
			Field Mapping uses Set2
				related.Company			= PurchaseOrderAndLineAddOnCharge.Company
				related.Vendor			= PurchaseOrderAndLineAddOnCharge.Vendor
				related.PurchaseOrder	= PurchaseOrderAndLineAddOnCharge.PurchaseOrder		
				
		OpenReceiptLineAddOnChargesRel
			one-to-many relation to PurchaseOrderReceiptLineAOC
			Field Mapping uses Set2
				related.Company			= PurchaseOrderAndLineAddOnCharge.Company
				related.Vendor			= PurchaseOrderAndLineAddOnCharge.Vendor
				related.PurchaseOrder	= PurchaseOrderAndLineAddOnCharge.PurchaseOrder
			Instance Selection
				where (related.PurchaseOrderReceiptLine = PurchaseOrderAndLineAddOnCharge.PurchaseOrderLine 
				and    related.AddOnCharge 				= PurchaseOrderAndLineAddOnCharge.AddOnCharge )
				 
		PayablesInvoiceAddOnChargesSet6Rel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses Set6
				related.Company				= Company
				related.PurchaseOrder		= PurchaseOrder
				related.PurchaseOrderLine	= PurchaseOrderLine
			Instance Selection
				where (related.Vendor 		= Vendor)

		PayablesInvoiceAocRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses Set6
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine
			Instance Selection
				where (related.PayablesInvoice	= PayablesInvoice
				and    related.Vendor			= Vendor
				and    related.AddOnCharge		= AddOnCharge)

		PayablesInvoiceAocMatchedRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses Set6
				related.Company					= Company
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine
				related.Vendor					= Vendor
			Instance Selection
				where (related.AddOnCharge		= AddOnCharge
				and   (related.MatchObjectID entered
				or     related.PayablesInvoice  = PayablesInvoice))

		PurchasingCompanyRel
            one-to-one relation to PurchasingCompany
            Field Mapping uses symbolic key
                related.Company = PurchaseOrderAndLineAddOnCharge.Company
 		
 		PurchaseOrderLineDistributionsRel
            one-to-many relation to PurchaseOrderLineDistribution
            Field Mapping uses symbolic key
                related.Company                   = PurchaseOrderAndLineAddOnCharge.Company
                related.PurchaseOrder             = PurchaseOrderAndLineAddOnCharge.PurchaseOrder
                
        PurchaseOrderAndLineAddOnChargeRel
        	one-to-many relation to PurchaseOrderAndLineAddOnCharge
            Field Mapping uses symbolic key            
                related.Company 			= PurchaseOrderAndLineAddOnCharge.Company

                related.PurchaseOrder		= PurchaseOrderAndLineAddOnCharge.PurchaseOrder
                related.PurchaseOrderLine 	= PurchaseOrderAndLineAddOnCharge.PurchaseOrderLine
                related.AddOnCharge			= PurchaseOrderAndLineAddOnCharge.AddOnCharge
                
        PurchaseOrdeMiscAddOnChargeRel
        	one-to-many relation to PurchaseOrderAndLineAddOnCharge
            Field Mapping uses symbolic key            
                related.Company 			= PurchaseOrderAndLineAddOnCharge.Company

                related.PurchaseOrder		= PurchaseOrderAndLineAddOnCharge.PurchaseOrder
                related.PurchaseOrderLine 	= blank
                related.AddOnCharge			= PurchaseOrderAndLineAddOnCharge.AddOnCharge
        
        NonServicePurchaseOrderLinesRel
 			one-to-many relation to PurchaseOrderLine
 			Field Mapping uses Set9
 				related.Company		   	  = PurchaseOrderAndLineAddOnCharge.Company
 				related.PurchaseOrder	  = PurchaseOrderAndLineAddOnCharge.PurchaseOrder
 			Instance Selection                                           
				where (!related.PurchaseOrderLine.IsFullyReceived)		
 		
 		AddOnChargeRel
        	one-to-one relation to AddOnCharge
        	Field Mapping uses symbolic key
        		related.Company      = PurchaseOrderAndLineAddOnCharge.Company
        		related.AddOnCharge  = PurchaseOrderAndLineAddOnCharge.AddOnCharge
        		 		
        PurchasingVendorRel
            one-to-one relation to PurchasingVendor
            Field Mapping uses symbolic key
                related.VendorGroup = PurchaseOrderAndLineAddOnCharge.Company.VendorGroup
                related.Vendor 		= Vendor
                
        PurchaseFromLocationRel
			one-to-one relation to PurchaseFromLocation
			Field Mapping uses symbolic key
				related.VendorGroup				= PurchaseOrderAndLineAddOnCharge.Company.VendorGroup
				related.Vendor					= Vendor
				related.PurchaseFromLocation	= PurchaseOrder.PurchaseFromLocation		
       	
        InventoryCompanyRel
            one-to-one relation to InventoryCompany
            Field Mapping uses symbolic key
                related.Company = PurchaseOrderAndLineAddOnCharge.Company
                
        ItemRel
            one-to-one relation to Item
            Field Mapping uses symbolic key
                related.ItemGroup = InventoryCompanyRel.ItemGroup
                related.Item      = PurchaseOrderLine.Item        
                
        ItemGroupRel
			one-to-one relation to ItemGroup
			Field Mapping uses symbolic key
				related.ItemGroup = InventoryCompanyRel.ItemGroup           	               
    	
    	MatchCompanyRel
            one-to-one relation to MatchCompany
            Field Mapping uses symbolic key
                related.Company = PurchaseOrderAndLineAddOnCharge.Company
                
		GeneralLedgerSystemCodeRel 
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "PO"

		RequisitionsGeneralLedgerSystemCodeRel 
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "RQ"
		
		PurchaseOrderSpreadAddOnChargeRel
			one-to-one relation to PurchaseOrderSpreadAddOnCharge
			Field Mapping uses symbolic key
				related.Company 									= Company
				related.PurchaseOrder								= PurchaseOrder
				related.AddOnCharge									= AddOnCharge
				
		PurchaseOrderSpreadAddOnChargeAmountRel
			one-to-many relation to PurchaseOrderSpreadAddOnCharge
			Field Mapping uses symbolic key
				related.Company 									= Company
				related.PurchaseOrder								= PurchaseOrder
				related.AddOnCharge									= AddOnCharge
			Instance Selection
				where (related.SpreadMethod = "A")								
		
		RequisitionLineAddOnChargeRel
			one-to-one relation to RequisitionLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company                = Company
				related.Requisition            = FromRequisition
				related.RequisitionLine        = 0
				related.AddOnCharge            = AddOnCharge
			
		VendorReturnRel
			one-to-many relation to VendorReturn
			Field Mapping uses symbolic key
				related.Company						    = Company
			Instance Selection
				where (related.CreatedFromPurchaseOrder		= PurchaseOrder)		
				
		LocalMatchPurchaseOrderInvoiceRel
			one-to-one relation to MatchPurchaseOrderInvoice
			Field Mapping uses symbolic key
				related.Company			= Company
				related.PurchaseOrder	= PurchaseOrder
				related.PayablesInvoice	= LocalPayablesInvoice	
				related.Vendor			= Vendor
		
		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
	 			related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup	 
	 			related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode
		
		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject = LocalUniqueID
			Instance Selection
				where (related.InvoiceNumber				= PurchaseOrder)
		
																				
    Sets
        Set10
            indexed
            Sort Order
                Company
                Vendor
                PurchaseOrder
                PurchaseOrderLine
                AddOnCharge

        Set2
            indexed
            Sort Order
                Company
                AddOnCharge
                PurchaseOrder
                PurchaseOrderLine

        Set3
            indexed
            Instance Selection
                where (IsPolinedtl)
            Sort Order
                Company
                PurchaseOrder
                PurchaseOrderLine
                AddOnCharge

        Set4
            indexed
            Instance Selection
                where (Open)
            Sort Order
                Company
                Vendor
                PurchaseOrder
                AddOnCharge
                PurchaseOrderLine

        Set6
            indexed
            Sort Order

                PurchaseOrderLine
                AddOnCharge
                PurchaseOrder
                Company
        
        Set5
            indexed
            Instance Selection
                where (Open)
            Sort Order
                Company
                AddOnCharge
                PurchaseOrder
                PurchaseOrderLine

        Set8
            indexed
            Sort Order
                Company
                PurchaseOrder
                ShipToLocation
                MatchDetailKey
                PurchaseOrderLine
                AddOnCharge

        Set9
            indexed
            Instance Selection
                where (IsNotCanceled)
            Sort Order
                Company
                PurchaseOrder
                PrintOnPO
                Vendor
                PurchaseOrderAndLineAddOnCharge.PurchaseOrderLine
                PurchaseOrderAndLineAddOnCharge.AddOnCharge

	Rule Blocks
		GetLargestPOLine
			for each PurchaseOrder.PurchaseOrderLine set
				if (LocalLineExtendedAmount < each.ExtendedAmount)
					LocalLargestPOLine		= each.PurchaseOrderLine
					LocalLineExtendedAmount	= each.ExtendedAmount
			
		LoadOneSourceInputFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.CallingModule				= "Purchase_Order"
				CalculateTax.System						= "PO"
				CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= PurchaseOrder.ProcessLevel
				CalculateTax.Invoice					= PurchaseOrder
				CalculateTax.Suffix						= PurchaseOrder.POCode
				CalculateTax.TaxCode					= TaxCode
				CalculateTax.PostalAddress				= ShipToLocation.PostalAddressForPurchaseOrder
				CalculateTax.ItemNumber					= AddOnCharge
				CalculateTax.Description				= AddOnCharge.Description
				CalculateTax.PointOfTitleTransfer		= PurchaseOrder.PointOfTitleTransfer
				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.FromPostalAddress 		= PurchaseFromLocation.VendorAddress
				else
					CalculateTax.FromPostalAddress 		= Vendor.VendorAddress
				CalculateTax.BypassEditing				= true

				if (AddOnCharge.OneSourceTaxCallOverride.UseCommodityCode)
					CalculateTax.CommodityCode			= AddOnCharge.DerivedCommodityCodeNoDash
				else
				if (PurchaseOrderLine entered)
					CalculateTax.CommodityCode			= PurchaseOrderLine.DerivedCommodityCodeNoDash
				else
				if (AddOnCharge.OneSourceTaxCallOverride.UseCommodityCodeFromLargestPOLine)
					include GetLargestPOLine
					CalculateTax.CommodityCode			= LocalLargestPOLine.DerivedCommodityCodeNoDash
				
		CreateTaxLineItem
			if (TaxEntityRel.ThirdParty.Sabrix
			or  SingleCallToVertex)
				invoke Create TaxLineItem
					assign result to TaxLineItemView
					
					invoked.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
					invoked.InvoiceNumber				= PurchaseOrder
					if (PurchaseOrderLine.EarlyDeliveryDate entered)
						invoked.InvoiceDate				= PurchaseOrderLine.EarlyDeliveryDate
					else
					if (PurchaseOrder.DefaultDeliveryDate entered)
						invoked.InvoiceDate				= PurchaseOrder.DefaultDeliveryDate
					else
						invoked.InvoiceDate				= PurchaseOrder.PurchaseOrderDate
					invoked.TaxEntity					= Company.AccountingEntity

					invoked.LineItemId					= AddOnCharge
					invoked.RelatedObjectReference		= reference to PurchaseOrderAndLineAddOnCharge
					if (SingleCallToOneSource
					or  SingleCallToVertex)
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= PurchaseOrder.UniqueID
					else
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
					invoked.RelatedLineItemUniqueId		= UniqueID
					invoked.LineItemNumber				= LocalLineItemNumber
					invoked.InvoiceAmount				= TotalAddOnChargeAmount
					invoked.TaxableAmount				= ExtendedTaxableAmount
					invoked.ShipToTaxCode				= TaxCode
					invoked.ShipToTaxCodeDescription	= TaxCode.Description
					if (TaxEntityRel.ThirdParty.Sabrix)
						if (AddOnCharge.OneSourceTaxCallOverride.UseCommodityCode)
							invoked.CommodityCode			= AddOnCharge.DerivedCommodityCodeNoDash
						else
						if (PurchaseOrderLine entered)
							invoked.CommodityCode			= PurchaseOrderLine.DerivedCommodityCodeNoDash
						else
						if (AddOnCharge.OneSourceTaxCallOverride.UseCommodityCodeFromLargestPOLine)
							include GetLargestPOLine
							invoked.CommodityCode			= LocalLargestPOLine.DerivedCommodityCodeNoDash
					
					if (PurchaseOrder.DropshipAddress entered)
						invoked.ShipToAddress		= PurchaseOrder.DropshipAddress
					else
					if (ShipToLocation.PostalAddressForPurchaseOrder entered)
						invoked.ShipToAddress		= ShipToLocation.PostalAddressForPurchaseOrder
					else
						invoked.ShipToAddress		= PurchaseOrder.ProcessLevel.PostalAddress
					invoked.Description				= AddOnCharge.Description

					if (TaxEntityRel.ThirdParty.VertexOSeries)
						if (LandedAddOnCharge) 
							if (PurchaseOrderLine.ItemType.Inventoried)
								LocalVertexDistributionAccount 		= PurchaseOrderLine.GeneralLedgerCategoryRel.InventoryAccount 
							else 
								LocalVertexDistributionAccount    	= first PurchaseOrderLineDistributionsRel.DistributionAccount
						else 
							LocalVertexDistributionAccount 			= AddOnCharge.PostingAccount

						if (TaxCode != "00")
							invoked.ShipToTaxCode				= TaxCode									
							invoked.ShipToTaxCodeDescription	= TaxCode.Description									

						invoked.CostCenter                      = LocalVertexDistributionAccount.AccountingUnit     
						invoked.GeneralLedgerAccount 			= LocalVertexDistributionAccount.GeneralLedgerChartAccount 


						if  (AddOnCharge.UNSPSCCode entered)
							invoked.CommodityCodeType      		= "UNSPSC"
							invoked.CommodityCode 				= AddOnCharge.UNSPSCCode.UNSPSCCodeDisplay 
						else 
						if  (AddOnCharge.HSNSACCode entered)
							invoked.CommodityCodeType      		= "HSN"
							invoked.CommodityCode 				= AddOnCharge.HSNSACCode 

						if (Quantity entered)
							invoked.Quantity 					= Quantity 
						else 
							invoked.Quantity 					= 1 

		CreateTaxLineItemUserFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				initialize AttributeCounter
				if (TaxAttributesRel exists)
					invoke Create TaxLineItemUserFields	
						for each TaxAttributesRel.OneSourceTaxAttributeByNumberRel
							invoked.FinanceEnterpriseGroup					= Company.FinanceEnterpriseGroup
							if (SingleCallToOneSource)
								invoked.TaxLineItem.UniqueIdOfRelatedObject	= PurchaseOrder.UniqueID
							else
								invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
							invoked.TaxLineItem.Sequence					= TaxLineItemView.TaxLineItem.Sequence
								
							if (each.LoadDynamicField.ValueIs.TaxEntity)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= TaxEntityRel.TaxEntity
							else		
							if (each.LoadDynamicField.ValueIs.Company)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Company
							else		
							if (each.LoadDynamicField.ValueIs.Vendor)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Vendor
							else				
							if (each.LoadDynamicField.ValueIs.PostingDate)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName									
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PurchaseOrder.PurchaseOrderDate
							else			
							if (each.LoadDynamicField.ValueIs.TaxDate)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName										
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= PurchaseOrder.PurchaseOrderDate
							else			
							if (each.LoadDynamicField.ValueIs.GLAccount)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName										
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.GeneralLedgerChartAccount
							else			
							if (each.LoadDynamicField.ValueIs.Location)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ShipToLocation
							else			
							if (each.LoadDynamicField.ValueIs.Currency)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Currency
							else			
							if (each.LoadDynamicField.ValueIs.AddOnCharge)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= AddOnCharge
							else			
							if (each.LoadDynamicField.ValueIs.UnitCost)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EnteredUnitCost
							else			
							if (each.LoadDynamicField.ValueIs.WorkType)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.Project.WorkType			
							else			
							if (each.LoadDynamicField.ValueIs.AccountSubType)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.GeneralLedgerChartAccount.AccountSubType
							else			
							if (each.LoadDynamicField.ValueIs.ServiceType)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.Project.ServiceType
							else			
							if (each.LoadDynamicField.ValueIs.UsageType)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.Project.UsageType
							else			
							if (each.LoadDynamicField.ValueIs.CustomerType)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.Project.Project.ProjectContract.ProjectFundingSourceRel.CustomerType
							else			
							if (each.LoadDynamicField.ValueIs.Project)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.Project
							else			
							if (each.LoadDynamicField.ValueIs.ToAccountingEntity)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.ToAccountingEntity
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension1)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.FinanceDimension1
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension2)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.FinanceDimension2
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension3)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.FinanceDimension3
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension4)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.FinanceDimension4
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension5)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.FinanceDimension5
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension6)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.FinanceDimension6
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension7)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.FinanceDimension7
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension8)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.FinanceDimension8
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension9)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.FinanceDimension9
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension10)						
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Account.FinanceDimension10
							else
							if (each.LoadDynamicField.ValueIs.Latitude)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ShipToLocation.PostalAddressForPurchaseOrder.GeoLatitude
							else
							if (each.LoadDynamicField.ValueIs.Longitude)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ShipToLocation.PostalAddressForPurchaseOrder.GeoLongitude
							else
							if (each.LoadDynamicField.ValueIs.Altitude)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ShipToLocation.PostalAddressForPurchaseOrder.GeoAltitude
							else
							if (each.LoadDynamicField.ValueIs.UNSPSC)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= AddOnCharge.UNSPSCCode.UNSPSCCodeDisplay
							else
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= each.AttributeNumber
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= each.Value

			else 
			if (SingleCallToVertex)
				initialize AttributeCounter
				if (TaxAttributesRel.VertexFlexibleFieldExist)

					invoke Create TaxLineItemUserFields


						invoked.FinanceEnterpriseGroup						= Company.FinanceEnterpriseGroup 

						if (SingleCallToVertex)
							invoked.TaxLineItem.UniqueIdOfRelatedObject 	= PurchaseOrder.UniqueID
						else
							invoked.TaxLineItem.UniqueIdOfRelatedObject 	= UniqueID

						invoked.TaxLineItem.Sequence 						= TaxLineItemView.TaxLineItem.Sequence

						if (LandedAddOnCharge) 
							if (PurchaseOrderLine.ItemType.Inventoried)
								LocalVertexDistributionAccount 		= PurchaseOrderLine.GeneralLedgerCategoryRel.InventoryAccount 
							else 
								LocalVertexDistributionAccount    	= first PurchaseOrderLineDistributionsRel.DistributionAccount
						else 
							LocalVertexDistributionAccount 			= AddOnCharge.PostingAccount




						Idx = 0

						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

							if (each.Code entered            
							or  each.ExternalValue entered)
								Idx +=1   
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId = each.VertexFlexibleCode.FieldId

								if (each.ExternalValue.ValueIs.TaxEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Company.AccountingEntity
								else    
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Company
								else    
								if (each.ExternalValue.ValueIs.Vendor)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Vendor
								else    
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PurchaseOrder.PurchaseOrderDate
								else    
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PurchaseOrder.PurchaseOrderDate
								else    
								if (each.ExternalValue.ValueIs.AccountingUnit)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
								else    
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
								else    
								if (each.ExternalValue.ValueIs.Location)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ShipToLocation 
								else    
								if (each.ExternalValue.ValueIs.Currency)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PurchaseOrder.Currency
								else    
								if (each.ExternalValue.ValueIs.AddOnCharge)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = AddOnCharge
								else    
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = EnteredUnitCost
								else    
								if (each.ExternalValue.ValueIs.ContractType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
								else    
								if (each.ExternalValue.ValueIs.WorkType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
								else    
								if (each.ExternalValue.ValueIs.AccountSubType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
								else    
								if (each.ExternalValue.ValueIs.ServiceType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
								else    
								if (each.ExternalValue.ValueIs.TaxUsageCode)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = PurchaseOrderLine.TaxUsageCode
								else 
								if (each.ExternalValue.ValueIs.UsageType)			
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
								else 
								if (each.ExternalValue.ValueIs.CustomerType)			
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
								else 
								if (each.ExternalValue.ValueIs.Project)				
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.Project
								else 
								if (each.ExternalValue.ValueIs.Longitude)				
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ShipToLocation.PostalAddress.GeoLongitude
								else 
								if (each.ExternalValue.ValueIs.Latitude)			
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ShipToLocation.PostalAddress.GeoLatitude
								else 
								if (each.ExternalValue.ValueIs.Altitude)									
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ShipToLocation.PostalAddress.GeoAltitude
								else 
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension1)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension2)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension3)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension4)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension5)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension6)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension7)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension8)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension9)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
								else    
								if (each.ExternalValue.ValueIs.FinanceDimension10) 
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
								else    
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = each.Code  





						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

							if (each.NumericValue entered            
							or  each.ExternalValue entered)
								Idx +=1   
								invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = Company
								else    
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
								else    
								if (each.ExternalValue.ValueIs.UnitCost)
									if (LineAddOnCharge)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = EnteredUnitCost
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 8 
									else 
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = TotalAddOnChargeAmount
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 8 
								else    
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = each.NumericValue  







						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

							if (each.DateValue entered            
							or  each.ExternalValue entered)
								Idx +=1   
								invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId = each.VertexFlexibleDate.FieldId 
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = PurchaseOrder.PurchaseOrderDate
								else    
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = PurchaseOrder.PurchaseOrderDate 
								else    
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = each.DateValue  





		LoadVertexOneCall
			if (TaxEntityRel.ThirdParty.VertexOSeries)
				CalculateTax.CallingModule				= "Purchase_Order"
				CalculateTax.System						= "PO"
				CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= PurchaseOrder.ProcessLevel
				CalculateTax.Invoice					= PurchaseOrder
				CalculateTax.Suffix						= PurchaseOrder.POCode
				CalculateTax.PostalAddress				= PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder
				CalculateTax.Vendor						= Vendor

				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.POAAddress				= PurchaseFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress				= Vendor.VendorAddress

				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.FromPostalAddress		= PurchaseFromLocation.VendorAddress 
				else
					CalculateTax.FromPostalAddress		= Vendor.VendorAddress		
				CalculateTax.BypassEditing				= true

		VertexFlexibleFields
			if (TaxEntityRel.ThirdParty.VertexOSeries)

				CalculateTax.Invoice						= PurchaseOrder
				if (LandedAddOnCharge) 
					if (PurchaseOrderLine.ItemType.Inventoried)
						LocalVertexDistributionAccount 		= PurchaseOrderLine.GeneralLedgerCategoryRel.InventoryAccount 
					else 
						LocalVertexDistributionAccount    	= first PurchaseOrderLineDistributionsRel.DistributionAccount
				else 
					LocalVertexDistributionAccount 			= AddOnCharge.PostingAccount

				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.POAAddress					= PurchaseFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress					= Vendor.VendorAddress

				CalculateTax.CostCenter                      		= LocalVertexDistributionAccount.AccountingUnit   
				CalculateTax.PostDate                          		= PurchaseOrder.PurchaseOrderDate                    
				CalculateTax.GeneralLedgerAccount 					= LocalVertexDistributionAccount.GeneralLedgerChartAccount 

				if  (AddOnCharge.UNSPSCCode entered)
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode					= AddOnCharge.UNSPSCCode.UNSPSCCodeDisplay 

				if (TaxAttributesRel.VertexFlexibleFieldExist)



					Idx = 0

					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId = each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company.AccountingEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else    
							if (each.ExternalValue.ValueIs.Vendor)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Vendor
							else    
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PurchaseOrder.PurchaseOrderDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PurchaseOrder.PurchaseOrderDate
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.AccountingUnit 
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ShipToLocation 
							else    
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PurchaseOrder.Currency
							else    
							if (each.ExternalValue.ValueIs.AddOnCharge)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = AddOnCharge
							else    



							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredUnitCost
							else    



							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
							else    
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
							else    










							if (each.ExternalValue.ValueIs.TaxUsageCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PurchaseOrderLine.TaxUsageCode
							else 















							if (each.ExternalValue.ValueIs.UsageType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
							else 
							if (each.ExternalValue.ValueIs.CustomerType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
							else 
							if (each.ExternalValue.ValueIs.Project)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project
							else 
							if (each.ExternalValue.ValueIs.Longitude)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ShipToLocation.PostalAddress.GeoLongitude
							else 
							if (each.ExternalValue.ValueIs.Latitude)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ShipToLocation.PostalAddress.GeoLatitude
							else 
							if (each.ExternalValue.ValueIs.Altitude)									
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ShipToLocation.PostalAddress.GeoAltitude
							else 
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
							else    
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  






					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    




							if (each.ExternalValue.ValueIs.UnitCost)
								if (LineAddOnCharge)
									CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredUnitCost
									CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 5 
								else 
									CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = TotalAddOnChargeAmount
									CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 5 
							else    
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  







					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PurchaseOrder.PurchaseOrderDate
							else    



							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PurchaseOrder.PurchaseOrderDate 
							else    
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue  





		CopyPurchaseOrderAndLineAddOnCharge
			invoke CreatePurchaseOrderLineAddOnCharge 
				resume on error
				fill in fields from this instance
					except invoked.EnteredUnitCost
					except invoked.AddOnChargePercent
					except invoked.TotalAddOnChargeAmount
					except invoked.Closed
					except invoked.Canceled
					except invoked.Issued
					except invoked.MatchedQuantity
					except invoked.MatchedNotReceivedQuantity
					except invoked.ChargebackQuantity
					except invoked.MiscellaneousAddOnChargeInvoicedAmount
					except invoked.ReceivedQuantity
					except invoked.ReceivedQuantityToMatch
					except invoked.InvoicedTaxAmount
					except invoked.InvoicedTaxAmountPOCurrency
					except invoked.AccruedTaxAmount
					except invoked.AccruedTaxAmountPOCurrency
				invoked.Company 			= PrmCompany
				invoked.PurchaseOrder		= PrmPurchaseOrder
				invoked.TransientFromCopy	= true
				if(PrmShipToLocation entered)
					invoked.ShipToLocation		= PrmShipToLocation
				if (AddOnChargeEntryMethod.UnitCost)
					invoked.EnteredUnitCost = EnteredUnitCost
				else
					if (AddOnChargeEntryMethod.RatePercentage)
						invoked.AddOnChargePercent = AddOnChargePercent
					else
						if (AddOnChargeEntryMethod.TotalAmount)
							invoked.TotalAddOnChargeAmount	= TotalAddOnChargeAmount
							invoked.ZeroCost				= ZeroCost
		
		ConvertToPOCurrency
			initialize CurrencyWork
		    CurrencyWork.TransactionAmount							= TotalAddOnChargeAmount
		    CurrencyWork.BaseAmount.ToCurrency						= PurchaseOrder.Currency
		    CurrencyWork.BaseAmount.EnteredCurrencyRate				= EnteredCurrencyConversionRate
		    AddOnChargeAmountPOCurrency								= CurrencyWork.BaseAmount.OutputCurrencyAmount
			
			initialize CurrencyWork
		    CurrencyWork.TransactionAmount							= ExtendedTaxableAmount
		    CurrencyWork.BaseAmount.ToCurrency						= PurchaseOrder.Currency
		    CurrencyWork.BaseAmount.EnteredCurrencyRate				= EnteredCurrencyConversionRate
		    ExtendedTaxableAmountPOCurrency							= CurrencyWork.BaseAmount.OutputCurrencyAmount
			
			initialize CurrencyWork
		    CurrencyWork.TransactionAmount							= AccruedTaxAmount
		    CurrencyWork.BaseAmount.ToCurrency						= PurchaseOrder.Currency
		    CurrencyWork.BaseAmount.EnteredCurrencyRate				= EnteredCurrencyConversionRate
		    AccruedTaxAmountPOCurrency								= CurrencyWork.BaseAmount.OutputCurrencyAmount
		
			initialize CurrencyWork
		    CurrencyWork.TransactionAmount							= InvoicedTaxAmount
		    CurrencyWork.BaseAmount.ToCurrency						= PurchaseOrder.Currency
		    CurrencyWork.BaseAmount.EnteredCurrencyRate				= EnteredCurrencyConversionRate
		    InvoicedTaxAmountPOCurrency								= CurrencyWork.BaseAmount.OutputCurrencyAmount
		
		AddOnChargeEntranceRules			
			if (not LineAddOnCharge)
				initialize EnteredUnitCost
				
			if (LineAddOnCharge)
				constraint ((not AddOnCharge.SpreadMethod.NoSpread
				and CreatedDuringSpread)
				or EnteredUnitCost entered 
				or TotalAddOnChargeAmount entered
				or AddOnChargePercent entered 
				or ZeroCost 
				or AddOnCharge.AddOnChargePercent entered )
					"MustEnterAtLeastOneCost,Rate,OrZeroCostValue"
			else									
				constraint (TotalAddOnChargeAmount entered 
				or AddOnChargePercent entered 
				or AddOnCharge.AddOnChargePercent entered 
				or ZeroCost )
					"MustEnterRateOrTotalAddOnCharge"
					
			if (not LocalCreateAOC)			













               		
               	constraint ( not HasActivity)
               		"ActivityExists,MustBeZeroCostAddOnCharge"
                				
		AddOnChargeEdits			

			constraint (not AddOnChargeRel.AddOnChargeType.Cost or (EnteredUnitCost >= 0 and TotalAddOnChargeAmount >= 0 ))
				"CostTypeAddOnCharge,CannotEnterNegativeTotalOrUnitCost"

			if (AddOnChargeRel.AddOnChargeType.Allowance) 
				constraint ( Vendor entered or PurchaseOrder.Vendor = Vendor )
					"MustUseSameVendorAsTheP\OVendorForAllowanceType_AddOnCharge"				 
				if (LineAddOnCharge)					
					constraint (TaxCode not entered or TaxCode = PurchaseOrderLine.TaxCode or not AddOnChargeRel.LandedAddOnCharge)						
						"MustUseSameTaxCodeAsP\OLineForAllowance_AddOnCharge"						
					constraint ( not Taxable or PurchaseOrderLine.Taxable )
						"CannotHaveTaxOnAllowanceAddOnChargeIfLineDoesNotHaveTax"
				
					LocalAmountUnsign = EnteredUnitCost
					if (LocalUpdateAOC)
						LocalOldAmountUnsign = EnteredUnitCost
						if ( LocalAmountUnsign > LocalOldAmountUnsign )
							LocalAmountUnsign = LocalAmountUnsign - LocalOldAmountUnsign 
						else
							initialize LocalAmountUnsign
					
					constraint  (LocalAmountUnsign <= PurchaseOrderLine.LandedUnitCost) 	
						"AllowanceAddOnChargeAmountCannotExceedLandedValueForP\OLine"	
           			LocalAmountUnsign = TotalAddOnChargeAmount
           			
           			constraint ( LocalAmountUnsign <= PurchaseOrderLine.ExtendedAmount)
           				"AllowanceAddOnChargeAmountCannotExceedP\OValue"
           							
				constraint  (AddOnChargePercent <= 1)
					"Allowance_AddOnChargeRateCannotExceed100Percent"
			 
				if (not LineAddOnCharge)
					LocalAmountUnsign =  TotalAddOnChargeAmount
					if ( LocalUpdateAOC )	
						LocalOldAmountUnsign = 	TotalAddOnChargeAmount
						if ( LocalAmountUnsign > LocalOldAmountUnsign )
							LocalAmountUnsign = LocalAmountUnsign - LocalOldAmountUnsign
						else 
							initialize 	LocalAmountUnsign					
					constraint (LocalAmountUnsign <= PurchaseOrder.TotalOrderAmount)
						"AllowanceAddOnChargeAmountCannotExceedP\OValue"
			
				constraint (LineAddOnCharge or TaxCode not entered)
					"CannotHaveTaxOnMiscellaneousAllowanceAddOnCharge"
			
		CreateAndUpdateRules
			
			LocalUpdateAOC = true	

			constraint (not ForApprovalPO)
				"CannotAddOrModifyAddOnChargeAsThePurchaseOrderNeedsApproval"
				
			if (AddOnChargeEntryMethod not entered)
				if (TotalAddOnChargeAmount entered or ZeroCost)
					AddOnChargeEntryMethod = AddOnChargeEntryMethod.TotalAmount
				else
				if (EnteredUnitCost entered)
					AddOnChargeEntryMethod = AddOnChargeEntryMethod.UnitCost
				else
				if (AddOnChargePercent entered)
					AddOnChargeEntryMethod = AddOnChargeEntryMethod.RatePercentage
				
			if (not LineAddOnCharge)
				constraint (not AddOnChargeEntryMethod.UnitCost)
					"UnitCostIsNotAValidEntryMethodForMiscellaneousAddOnCharge"
			
		CalculateProc
			if (AddOnChargeRel.AddOnChargeType.Allowance)
				if (TotalAddOnChargeAmount > 0)
					TotalAddOnChargeAmount = TotalAddOnChargeAmount * -1
					
				if ( AddOnChargeAmountPOCurrency > 0 )
					AddOnChargeAmountPOCurrency = AddOnChargeAmountPOCurrency * -1
               
				if (EnteredUnitCost > 0)
					EnteredUnitCost = EnteredUnitCost * -1
					
				if (InvoicedTaxAmount > 0)
					InvoicedTaxAmount = InvoicedTaxAmount * -1 
              	
              	if (AccruedTaxAmount > 0 )
              		AccruedTaxAmount = AccruedTaxAmount * -1
              		
                if (ExtendedTaxableAmount > 0)
                	ExtendedTaxableAmount = ExtendedTaxableAmount * -1
               
               	if (InvoicedTaxAmountPOCurrency > 0)
               		InvoicedTaxAmountPOCurrency = InvoicedTaxAmountPOCurrency * -1
               
                if (AccruedTaxAmountPOCurrency > 0)
                	AccruedTaxAmountPOCurrency = AccuredTaxAmountPOCurrency * -1
               
               	if (ExtendedTaxableAmountPOCurrency > 0)
               		ExtendedTaxableAmountPOCurrency = ExtendedTaxableAmountPOCurrency * -1
               
               	if (LandedUnitCost > 0)
               		LandedUnitCost = LandedUnitCost * -1
               



				
		CancelRules
			if (!IsPolinedtl)
				constraint (PurchaseOrder.Released)
					"CannotCancel,PurchaseOrderIsNotReleased"
					
			if (IsPolinedtl)
				constraint (PurchaseOrderLine.Closed.No)
					"CannotCancelAddOnCharge,PurchaseOrderLineIsClosed"
						
				constraint (PurchaseOrderLine.Released)
					"CannotCancel,PurchaseOrderLineIsNotReleased"
					
			if ((MatchedQuantity > 0 
			or  MiscellaneousAddOnChargeInvoicedAmount > 0 
			or  ReceivedQuantity > 0) 
			and LineAddOnCharge)

				
				constraint (ReceivedQuantity != MatchedQuantity)  
					"CannotCancelOrDelete,ActivityExists"
				constraint (AddOnChargeOrigin != "OE") 
					"CannotCancelOrDelete,_AddOnChargeCreatedFrom\_Order_Entry"		
					
			if  (PayablesInvoiceAddOnChargesSet6Exist)  
				constraint (ReceivedQuantity != PayablesInvoiceAddOnChargesSet6Rel.MatchedQuantity)
					"CannotCancelOrDelete,ActivityExists"
											
		SetToClose
			Closed = Closed.Yes
			
			for each OpenReceiptLineAddOnChargesRel
				invoke CloseFromLineAddOnCharge each
					
			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
        	or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
        	and !FromMatchUpdate)
				invoke UpdateGLCommitmentIndirect HeaderOrLineAddOnChargeDistributionRel
					if (Canceled = true)
						invoked.PrmFromCancel = true
					
  		UpdateTaxAmounts
			if (Taxable
   			and TaxCode entered
   			and (TotalAddOnChargeAmount changed
			or 	 Quantity changed
			or  (TotalAddOnChargeAmount entered
			and (InvoicedTaxAmount not entered and AccruedTaxAmount not entered))
			or  (SingleCallToOneSource and ZeroCost)))
   				initialize CalculateTax
   				CalculateTax.TaxEntity					= Company.AccountingEntity	
   				if (PurchaseOrderLine.EarlyDeliveryDate entered)
					CalculateTax.TaxDate				= PurchaseOrderLine.EarlyDeliveryDate
					CalculateTax.InvoiceDate			= PurchaseOrderLine.EarlyDeliveryDate
					CalculateTax.PaymentDate			= PurchaseOrderLine.EarlyDeliveryDate
					CalculateTax.GeneralLedgerDate		= PurchaseOrderLine.EarlyDeliveryDate
				else
				if (PurchaseOrder.DefaultDeliveryDate entered)
					CalculateTax.TaxDate				= PurchaseOrder.DefaultDeliveryDate
					CalculateTax.InvoiceDate			= PurchaseOrder.DefaultDeliveryDate
					CalculateTax.PaymentDate			= PurchaseOrder.DefaultDeliveryDate
					CalculateTax.GeneralLedgerDate		= PurchaseOrder.DefaultDeliveryDate
				else
					CalculateTax.TaxDate				= PurchaseOrder.PurchaseOrderDate
					CalculateTax.InvoiceDate			= PurchaseOrder.PurchaseOrderDate
					CalculateTax.PaymentDate			= PurchaseOrder.PurchaseOrderDate
					CalculateTax.GeneralLedgerDate		= PurchaseOrder.PurchaseOrderDate
   				CalculateTax.TaxableAmount				= TotalAddOnChargeAmount
   				CalculateTax.TaxCode					= TaxCode
				CalculateTax.Function					= "C"
				if (PurchaseOrder.DropshipAddress entered)
					CalculateTax.PostalAddress			= PurchaseOrder.DropshipAddress
				else
				if (ShipToLocation.PostalAddressForPurchaseOrder entered)
					CalculateTax.PostalAddress			= ShipToLocation.PostalAddressForPurchaseOrder
				else
					CalculateTax.PostalAddress			= PurchaseOrder.ProcessLevel.PostalAddress
				
				CalculateTax.ThirdPartyFunction			= "I"
				CalculateTax.System						= "PO"
				if (PurchaseFromLocation entered
				and PurchaseFromLocation.CurrentAddressRelExists)
					CalculateTax.FromPostalAddress 		= PurchaseFromLocation.VendorAddress
				else
					CalculateTax.FromPostalAddress 		= Vendor.VendorAddress
				if (PurchaseFromLocation.VendorLocation.TaxCode not entered)
					CalculateTax.FromTaxCode			= Vendor.TaxCode
				else
					CalculateTax.FromTaxCode			= PurchaseFromLocation.VendorLocation.TaxCode
				CalculateTax.Location					= ShipToLocation
				
				if  (TaxEntityUsesThirdPartyTax)
			   		CalculateTax.RelatedObjectReference			= reference to this instance
		   			CalculateTax.InputVertexRequest				= "P" 
			   		CalculateTax.TransactionSource				= "I"	
			   		CalculateTax.InputReturnVertexTaxIn			= "D" 
			   		CalculateTax.InvoiceCompany					= Company
			   		CalculateTax.ProcessLevel					= PurchaseOrder.ProcessLevel 
					CalculateTax.Vendor							= PurchaseOrder.Vendor 
					CalculateTax.VendorCustomerName				= PurchaseOrder.Vendor.VendorName 	
					CalculateTax.LineNumber						= PurchaseOrderLine		
			   		CalculateTax.CommodityCode					= PurchaseOrderLine.ICNCode				
					CalculateTax.TaxUsageCode					= PurchaseOrderLine.TaxUsageCode					
					CalculateTax.DeliveryTerms          		= PurchaseOrder.ShipTerm	
				    CalculateTax.VATRegistrationCountry    	 	= TaxEntityRel.VATRegistrationCountry 			
				    CalculateTax.VATRegistrationNumber			= TaxEntityRel.VATRegistrationNumber			
					if (PurchaseFromLocation entered
					and PurchaseFromLocation.CurrentAddressRelExists
					and PurchaseFromLocation.VATRegistrationNumber entered)
						CalculateTax.FromPostalAddress				= PurchaseFromLocation.VendorAddress 
				    	CalculateTax.FromVATRegistrationCountry 	= PurchaseFromLocation.VATRegistrationCountry			
				    	CalculateTax.FromVATRegistrationNumber		= PurchaseFromLocation.VATRegistrationNumber				
					else
						CalculateTax.FromPostalAddress				= Vendor.VendorAddress		
				    	CalculateTax.FromVATRegistrationCountry 	= Vendor.VATRegistrationCountry					
				    	CalculateTax.FromVATRegistrationNumber		= Vendor.VATRegistrationNumber					
				    CalculateTax.DefaultFilingCurrency 			= Company.Currency 
					CalculateTax.CurrencyRate					= PurchaseOrder.EnteredCurrencyConversionRate 		
				    CalculateTax.TransactionCurrency 			= PurchaseOrder.Currency								
					CalculateTax.BaseCurrency 					= Company.Currency					
					CalculateTax.ReceiptSite					= PurchaseOrder.ProcessLevel								
					CalculateTax.UniqueIdOfRelatedObject		= UniqueID													
				
				if (not SingleCallToOneSource
				and not SingleCallToVertex)
				
					LocalUniqueID = UniqueID
					if (TaxLineItemsRel exists)
						for each TaxLineItemsRel
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each

					include LoadOneSourceInputFields
					include CreateTaxLineItem
					include CreateTaxLineItemUserFields
					include VertexFlexibleFields
					
					LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax

					if (TaxCode = "00"
					and TaxEntityRel.ThirdParty.VertexOSeries)
						TaxCode = CalculateTax.TaxCode 

					initialize AccruedTaxAmount
					initialize InvoicedTaxAmount
					for each CalculateTax.TaxTable.TaxTableOutput
						LocalTaxAmount 			  	  = each.TaxAmount5DP 

						if (each.AccrualFlag = "A")
							AccruedTaxAmount += LocalTaxAmount
						else
							InvoicedTaxAmount += LocalTaxAmount
						
						if (each.LandCostFlag)        				
							LandedUnitCost += (LocalTaxAmount / PurchaseOrderLine.VendorPriceUOMQuantityToProcess)
					


		CreateAndUpdateDistribution
			if (Account entered)
				if (HeaderOrLineAddOnChargeDistributionRel not exist)
					invoke CreateRestricted PurchaseOrderLineDistribution
						fill in fields from this instance
						invoked.DistributionAccount				= Account
						invoked.AddOnCharge						= AddOnCharge
						invoked.AssetInformation				= TransientAssetInformation
				else
					
					if (Account != LocalOldAccount)
						
						invoke Update HeaderOrLineAddOnChargeDistributionRel
							invoked.DistributionAccount								= Account
							invoked.LocalByPassPurchaseOrderLineCallback			= TransientByPassPurchaseOrderLineCallback
					if (TotalAddOnChargeAmount changed
					or  MiscellaneousAddOnChargeInvoicedAmount changed
					or  Canceled = true)
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
	            		or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)		
							invoke UpdateGLCommitmentIndirect HeaderOrLineAddOnChargeDistributionRel
								invoked.PerformBudgetEdit = true
								if (Canceled = true)
									invoked.PrmFromCancel = true
			else
				invoke Delete HeaderOrLineAddOnChargeDistributionRel
			
			if (TransientAssetInformation changed)
				invoke Update HeaderOrLineAddOnChargeDistributionRel
					invoked.AssetInformation					= TransientAssetInformation
					
	Field Rules
		Closed
			default to Closed.No
			
		AddOnChargeEntryMethod
			if (AddOnChargeEntryMethod.RatePercentage)
				initialize TotalAddOnChargeAmount
				initialize EnteredUnitCost
				initialize ZeroCost
			else
			if (AddOnChargeEntryMethod.UnitCost)
				initialize AddOnChargePercent
				initialize TotalAddOnChargeAmount
				initialize ZeroCost
			else
				initialize AddOnChargePercent
				initialize EnteredUnitCost
			
			required
					
		AddOnChargePercent
			if (AddOnChargeEntryMethod.RatePercentage)
				default to AddOnChargeRel.AddOnChargePercent
				required
			if (CreatedDuringSpread)
				cannot be changed
					"RateCannotBeChanged;AddOnChargeCreatedFromSpread"										
	        	
		EnteredUnitCost
			if (LineAddOnCharge and AddOnChargeEntryMethod.UnitCost)
				required

				if (EnteredUnitCost decimals > DerivedNumberOfDecimalsCost)
					initialize RoundedValue
					RoundedValue.RoundInput			= EnteredUnitCost
					RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
					RoundedValue.RoundTo			= (1/10^DerivedNumberOfDecimalsCost)
					RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf	                      		
					EnteredUnitCost					= RoundedValue.RoundResult

			if  (LineAddOnCharge
			and AddOnChargeEntryMethod.TotalAmount)
				EnteredUnitCost = (TotalAddOnChargeAmount / Quantity)

    	TotalAddOnChargeAmount
    		if (CreatedDuringSpread
    		and not AddOnChargeEntryMethod.RatePercentage)
    			cannot be changed
    				"TotalAOCAmountCannotBeChanged;AddOnChargeCreatedFromSpread"
			if (LineAddOnCharge)
				if (AddOnChargeEntryMethod.RatePercentage)
					force default to AddOnChargePercent * PurchaseOrderLine.LineAmount	
					EnteredUnitCost = (TotalAddOnChargeAmount/Quantity)
				else
				if (AddOnChargeEntryMethod.UnitCost)
					force default to Quantity * EnteredUnitCost

				if (AddOnChargeRel.AddOnChargeType.Allowance
				and EnteredUnitCost > 0)
					EnteredUnitCost = EnteredUnitCost * -1	
    		else
    			if (AddOnChargeEntryMethod.RatePercentage)
    				force default to AddOnChargePercent * PurchaseOrder.PurchaseOrderLineTotal	 							        			
			
			if (AddOnChargeRel.AddOnChargeType.Cost)
				constraint (TotalAddOnChargeAmount >= 0)
					"CostTypeAddOnCharge,CannotEnterNegativeTotalAmount"
			else
				if (AddOnChargeRel.AddOnChargeType.Allowance
				and TotalAddOnChargeAmount > 0)
					TotalAddOnChargeAmount = TotalAddOnChargeAmount * -1

			initialize CurrencyWork
	        CurrencyWork.TransactionAmount							= TotalAddOnChargeAmount
	        CurrencyWork.BaseAmount.ToCurrency						= PurchaseOrder.Currency
	        CurrencyWork.BaseAmount.EnteredCurrencyRate				= EnteredCurrencyConversionRate
	        AddOnChargeAmountPOCurrency								= CurrencyWork.BaseAmount.OutputCurrencyAmount
	        
	        if (AddOnChargeEntryMethod.TotalAmount and not ZeroCost
	        and IsNotCanceled)
	        	required
			
			if (AddOnChargeRel.AddOnChargeType.Allowance)
				LocalAmountUnsign = TotalAddOnChargeAmount
				LocalOldTotalAddOnChargeAmount	= old TotalAddOnChargeAmount * -1
				if (TotalAddOnChargeAmount < 0)
					LocalAmountUnsign = TotalAddOnChargeAmount * -1
				LocalOldTotalAddOnChargeAmount += PurchaseOrder.TotalOrderAmount
				constraint(LocalAmountUnsign <= LocalOldTotalAddOnChargeAmount)
					"AddOnChargeAmountCannotExceedPurchaseOrderTotalAmount"
			
	        
	    ZeroCost
	    	constraint (TotalAddOnChargeAmount not entered)
	    		"CanOnlyEnterTotalAddOnChargeAmountOrZeroCost"
		
		ExtendedTaxableAmount
			force default to TotalAddOnChargeAmount
			
			if (AddOnChargeRel.AddOnChargeType.Allowance)
				if (ExtendedTaxableAmount > 0)
					ExtendedTaxableAmount = ExtendedTaxableAmount * -1
			
			initialize CurrencyWork
	        CurrencyWork.TransactionAmount							= ExtendedTaxableAmount
	        CurrencyWork.BaseAmount.ToCurrency						= PurchaseOrder.Currency
	        CurrencyWork.BaseAmount.EnteredCurrencyRate				= EnteredCurrencyConversionRate
	        ExtendedTaxableAmountPOCurrency							= CurrencyWork.BaseAmount.OutputCurrencyAmount
			
		Vendor
			default to PurchaseOrder.Vendor		
			
			if (Vendor.ERSCapable)
				constraint (LineAddOnCharge)
					"CannotHaveMiscellaneousAddOnChargeForERSVendor" // POPCR.456"
					
				constraint (Vendor = PurchaseOrder.Vendor)
					"PurchasingVendorIsE\R\SCapable;MustHaveAddOnChargeVendorsSameAsPurchaseOrder" 
							
			if (Vendor changed)
				for each  PurchaseOrderReceiptLineAOCSet2Rel
					constraint (each.MatchedQuantity = 0)
						"CannotChangeTheAddOnChargeVendorAsTheAddOnChargeHasAlreadyBeenInvoiced"					
				for each PurchaseOrderReceiptLineAOCSet3Rel
					if ((each.Vendor != Vendor) and each.AddOnCharge = PurchaseOrderAndLineAddOnCharge.AddOnCharge)	
						invoke Update each
							invoked.Vendor = Vendor
			
			if (Vendor != PurchaseOrder.Vendor)
				initialize LocalERSCapable
				initialize LocalPOERSCapable
				
				LocalERSCapable = VendorRel.ERSCapable
				LocalPOERSCapable =  POVendorRel.ERSCapable
				
				constraint (not LocalPOERSCapable)
					"LineAddOnChargeVendorMustBeSameForAnE\R\SVendorPurchaseOrder"
					
				constraint (not LocalERSCapable)
					"PurchaseOrderVendorIsNon-ersCapable;AddOnChargeVendorMustAlsoBeNon-ers"
				
		Quantity
			if (LineAddOnCharge)
				if (PurchaseOrderLine.QuantityToProcess entered)
					default to PurchaseOrderLine.QuantityToProcess
				else
					default to 1 
			else
				default to 1										

		ReceivedQuantity
			if (LineAddOnCharge)
				default to PurchaseOrderLine.ReceivedQuantity				
			else
				default to 1

		LandedAddOnCharge
			force default to AddOnCharge.LandedAddOnCharge
			
		LandedUnitCost
			if  (LandedAddOnCharge
			and (action type.Create
			or  TotalAddOnChargeAmount changed
			or 	Quantity changed))
				LandedUnitCost = (TotalAddOnChargeAmount/Quantity)

				if (LineAddOnCharge
				and PurchaseOrderLine.IsCatchWeightItem)
					LandedUnitCost = (LandedUnitCost * (PurchaseOrderLine.VendorPriceUOMMultiplier / PurchaseOrderLine.EnteredBuyUOMMultiplier))
			
			if (AddOnChargeRel.AddOnChargeType.Allowance)
				if (LandedUnitCost > 0)
					LandedUnitCost = LandedUnitCost * -1

		Taxable
			if (not Taxable)
            	if ( TaxCode entered and LineAddOnCharge )
            		Taxable = true 
            	else 
            		if ( AddOnChargeRel.AddOnChargeType.Cost)	
            			Taxable = AddOnChargeRel.Taxable
					else
						if ( PurchaseOrderLine.Taxable and AddOnCharge.Taxable )
							Taxable = true
						else 
							Taxable = false							            			

		TaxCode
			if (Taxable)
				if (IsCostTypeAOC)
					default to AddOnChargeRel.TaxCode
					default to ShipToLocation.TaxCode
				else 
					if (PurchaseOrderLine not entered)
						cannot be entered
							"CannotHaveTaxOnMiscellaneousAllowanceAddOnCharge"
					else
						force default to PurchaseOrderLine.TaxCode
			else
				initialize TaxCode
			
	   	    constraint (not Taxable or TaxCode entered or LocalThirdParty entered)
	   			"AddOnCostTaxableButNoTaxCodeEntered"           			           	
	   		constraint (Taxable or TaxCode not entered)
	   			"CannotHaveTaxCodeAndTaxableFlagEqualsN\O" 

			if (Currency not entered)
				if (VendorLocationRel.InvoiceCurrency entered)
					Currency = VendorLocationRel.InvoiceCurrency
				else
				if (Vendor.InvoiceCurrency entered)
					Currency = Vendor.InvoiceCurrency	
				else
					Currency = PurchaseOrder.Currency

			include AddOnChargeEdits		
			if (DoTaxCalculation
			and !VertexDelayTaxCall)
				include UpdateTaxAmounts
		
		AccruedTaxAmount
			if (TaxCode changed and TaxCode not entered)
				initialize AccruedTaxAmount
			
			if (AddOnChargeRel.AddOnChargeType.Allowance)
				if (AccruedTaxAmount > 0)
					AccruedTaxAmount = AccruedTaxAmount * -1
					
			initialize CurrencyWork
	        CurrencyWork.TransactionAmount							= AccruedTaxAmount
	        CurrencyWork.BaseAmount.ToCurrency						= PurchaseOrder.Currency
	        CurrencyWork.BaseAmount.EnteredCurrencyRate				= EnteredCurrencyConversionRate
	        AccruedTaxAmountPOCurrency								= CurrencyWork.BaseAmount.OutputCurrencyAmount
		
		InvoicedTaxAmount
			if (TaxCode changed and TaxCode not entered)
				initialize InvoicedTaxAmount
			
			if (AddOnChargeRel.AddOnChargeType.Allowance)
				if (InvoicedTaxAmount > 0)
					InvoicedTaxAmount = InvoicedTaxAmount * -1

			initialize CurrencyWork
	        CurrencyWork.TransactionAmount							= InvoicedTaxAmount
	        CurrencyWork.BaseAmount.ToCurrency						= PurchaseOrder.Currency
	        CurrencyWork.BaseAmount.EnteredCurrencyRate				= EnteredCurrencyConversionRate
	        InvoicedTaxAmountPOCurrency								= CurrencyWork.BaseAmount.OutputCurrencyAmount	
        
				
		PurchaseFromLocation
			if (Vendor not entered or Vendor = PurchaseOrder.Vendor)
				default to PurchaseOrder.PurchaseFromLocation			
			if (Vendor entered and PurchaseFromLocation entered)
				constraint (VendorLocationRel exists)
					"InvalidLocation<PurchaseFromLocation>ForVendor<Vendor>" 
		
		ShipToLocation
			if (PurchaseOrderLine.ShipToLocation not entered)
				ShipToLocation = PurchaseOrder.ShipToLocation 
			else	
				ShipToLocation = PurchaseOrderLine.ShipToLocation
								   				
		Account
			if (!AddOnCharge.LandedAddOnCharge)
				default to AddOnCharge.PostingAccount
			if (LineAddOnCharge and AddOnCharge.LandedAddOnCharge)
				force default to blank
			if (Account.Project entered)     
				LocalExchangeDate = PurchaseOrder.PurchaseOrderDate
				LocalPostingDate  = PurchaseOrder.PurchaseOrderDate
				
			LocalGeneralLedgerSystemCode = first GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode
				
			if (Company.AccountingEntity.ValidSystems entered) 
				constraint (LocalGeneralLedgerSystemCode within Company.AccountingEntity.ValidSystems) 
					"InvalidSystemFor<Company.ProcurementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>" 
			if (Account.ToAccountingEntity.ValidSystems entered) 
				constraint (LocalGeneralLedgerSystemCode within Account.ToAccountingEntity.ValidSystems) 
					"InvalidSystemForPosting<Company.ProcurementGroup.FinanceEnterpriseGroup.AccountingEntityLabel>" 
			if (Account.GeneralLedgerChartAccount.Account.SystemRestriction entered) 
				constraint (LocalGeneralLedgerSystemCode within Account.GeneralLedgerChartAccount.Account.SystemRestriction) 
					"InvalidSystemForAccount"
			
		PrintOnPO 
			if (action type.Create)
				if (not Vendor = PurchaseOrder.Vendor)

					PrintOnPO = false
				else
					default to AddOnChargeRel.PrintOnPO			
		
		Summarize 
			if (not PrintOnPO)
				Summarize = false
			else 
				if (Summarize not entered)
					Summarize = AddOnChargeRel.Summarize	
		
		MatchDetailKey 
			if (MatchDetailKey not entered)
				if (not LineAddOnCharge)
					initialize MatchDetailKey
				else
					MatchDetailKey = PurchaseOrderLine.MatchDetailKey
				

		
		Currency
			default to VendorLocationRel.InvoiceCurrency
			default to Vendor.InvoiceCurrency											
			default to PurchaseOrder.Currency
			
			if (Vendor = PurchaseOrder.Vendor)
				constraint (Currency = PurchaseOrder.Currency)
					"AddOnChargeVendorAndPurchaseOrderVendorAreTheSame;CurrencyMustBeTheSame"



			else																	
				if (PurchaseFromLocation entered									
				and VendorLocationRel.InvoiceCurrency entered)						
					constraint (VendorLocationRel.InvoiceCurrency = Currency		
					or VendorLocationRel not exist)									
						"EnteredCurrencyMustMatchPurchaseFromCurrency"				
				else																
					if (Vendor.InvoiceCurrency entered)								
						constraint (Vendor.InvoiceCurrency = Currency)				
							"EnteredCurrencyMustMatchVendorCurrency"				
		
		
		EnteredCurrencyConversionRate
			if (Currency = PurchaseOrder.Currency)
				default to PurchaseOrder.EnteredCurrencyConversionRate	
			else
				LocalFromCurrency 		 			= Currency
				LocalExchangeDate 					= PurchaseOrder.PurchaseOrderDate
				LocalCurrencyExchange.ToCurrency	= PurchaseOrder.Currency
				CurrencyTable 						= PurchaseOrder.CurrencyTable
				constraint (LocalCurrencyExchange.IsRateDefined)
					"CurrencyRateDoesNotExistBetween<Currency>To<Company.Currency>"
				default to LocalCurrencyExchange.OutputCurrencyRate
				
				if (PurchaseOrder.CurrencyExchangeSetPoint.Entry)
					ReceiptCurrencyConversionRate = EnteredCurrencyConversionRate
				else
					if (PurchaseOrder.CurrencyExchangeSetPoint.Receiving 
					or 	PurchaseOrder.CurrencyExchangeSetPoint.Invoicing)
						ReceiptCurrencyConversionRate = 0

			include ConvertToPOCurrency

		TrackType
			force default to PurchaseOrderAndLineAddOnCharge.AddOnCharge.TrackType

	Create Rules
		LocalCreateAOC = true
		constraint ( not IsVendorERS )
			"CannotEnter\Miscellaneous\AddOnCostForE\R\SVendor"

		constraint ( not LineAddOnChargeExists )
			"AddOnCostAlreadyExists"	
			
		if (TaxEntityUsesSabrix)
			initialize InvoicedTaxAmount
			initialize InvoicedTaxAmountPOCurrency
			initialize AccruedTaxAmount
			initialize AccruedTaxAmountPOCurrency

		if (LineAddOnCharge)
			if (not TransientFromCopy)
				if (LandedAddOnCharge)
					constraint (not PurchaseOrderLine.IsFullyReceived)
						"CannotAddLandedAddOnChargeAsLineHasBeenFullyReceived" 
				else
					constraint (not PurchaseOrderLine.HasReceivedQuantity)
						"CannotAddNon-landedAddOnChargeAsReleasedReceiversExists" 
			
				if (not Closed.Historical)
					if (PurchaseOrderLine.IsClosed)
						invoke Closed.ReOpenPurchaseOrderLine PurchaseOrderLine
					else					
					if (PurchaseOrderLine.Released)
						invoke Released.UpdatePurchaseOrderLineFromAddOnCharge PurchaseOrderLine
		else 
			if (not TransientFromCopy)
				constraint (NonServicePurchaseOrderLinesWithReceivedQuantityRel not exist)
					"CannotAddHeaderAddOnChargeAsReleasedReceiversExists" 
					
				if (not Closed.Historical
				and PurchaseOrder.Released)
					invoke Released.Unrelease PurchaseOrder

		include AddOnChargeEntranceRules
		
		constraint (not InventoryCompanyRel.CostingMethod.StandardCosting 
		or 			not PurchaseOrderLine.ItemType.Inventoried)
   			"StandardCostCompany,InventoriedTypeItemsCannotHaveAddOnCosts" 

    	constraint (not PurchaseOrderLine.Closed.Yes) 
    		"CannotAttachAddOnCostToAClosedP\OLine"
	    		
	    
	    		


    
    Create Exit Rules
    	if (not LineAddOnCharge)
			constraint (AddOnCharge.SpreadMethod.NoSpread) 
				"MustUseAddOnChargeCodeWithNoSpreadForMiscellaneousAddOnCharge"
    		constraint (not AddOnCharge.LandedAddOnCharge)
    			"PurchaseOrderAddOnChargeCannotBeLanded"	    
    			
    	if (LineAddOnCharge)
			if (LandedAddOnCharge)			
	    		invoke UpdateLandedUnitCostFromAOC PurchaseOrderLine
	    			invoked.PrmLandedUnitCost	= LandedUnitCost
	    			if (FromRequisition entered)
	    				invoked.FromRequisition = true

		invoke RollUpAmountsToHeader

		if (PurchasingCompanyRel.ReopenPurchaseOrder
		and PurchaseOrder.IsClosed
		and Closed != "H")			
			invoke FastUpdate PurchaseOrder
				invoked.Released = false
				invoked.Closed = Closed.No
				invoked.LastActivityDate				= current corporate date
				invoked.LastUpdateDate					= current timestamp
	
    Actions
		ProcessOneSourceForPOAOC is a Set Action
			restricted
			valid when (SingleCallToOneSource)
			Parameters
				PrmCompany			is a PurchasingCompany
				PrmPurchaseOrder	is a PurchaseOrder

			Local Fields
				LocalLineItemNumber	is like DistributionSequence

			Instance Selection
				where (PrmCompany	= Company
				and	   PrmPurchaseOrder = PurchaseOrder
				and    Taxable)

			Sort Order
				Company
				PurchaseOrder
			Action Rules
				PurchaseOrder Set Rules
					Entrance Rules
						LocalUniqueID = PurchaseOrder.UniqueID
						LocalLineItemNumber = last TaxLineItemsRel.LineItemNumber
					Exit Rules
						if (SingleCallToOneSource)
							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= PurchaseOrder.UniqueID
							CalculateTax.UserElementLevel					= "L"

							LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax

							constraint (CalculateTax.OutputErrorNumber not entered)
								"<CalculateTax.OutputErrorMessage>;ContactAdministrator"

							invoke UpdatePOTaxAmounts TaxLineItem in foreground
								invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
								invoked.PrmCompany					= Company
								invoked.PrmInvoiceNumber			= PurchaseOrder
								invoked.PrmUniqueIdOfRelatedObject  = PurchaseOrder.UniqueID
				Instance Rules
					LocalLineItemNumber = LocalLineItemNumber + 1

					include UpdateTaxAmounts
					include LoadOneSourceInputFields
					include CreateTaxLineItem
					include CreateTaxLineItemUserFields

		ProcessVertexForPOAOC is a Set Action
			restricted
			valid when (SingleCallToVertex)
			Parameters
				PrmCompany			is a PurchasingCompany
				PrmPurchaseOrder	is a PurchaseOrder

			Local Fields
				LocalLineItemNumber	is like DistributionSequence

			Instance Selection
				where (PrmCompany	= Company
				and	   PrmPurchaseOrder = PurchaseOrder
				and    Taxable)

			Sort Order
				Company
				PurchaseOrder
			Action Rules
				PurchaseOrder Set Rules
					Entrance Rules
						LocalUniqueID = PurchaseOrder.UniqueID
						LocalLineItemNumber = last TaxLineItemsRel.LineItemNumber
					Exit Rules
						if (SingleCallToVertex)
							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= PurchaseOrder.UniqueID

							LocalJurisdictionLookupKey						= "PO:" + PurchaseOrder + ":" + CurrentTimestamp 
							CalculateTax.AppendToJurisFile					= true					
							CalculateTax.JurisdictionResultsKey				= LocalJurisdictionLookupKey
							CalculateTax.RelatedObjectReference				= reference to PurchaseOrder  				 

							LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax

							invoke UpdatePOTaxAmounts TaxLineItem
								invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
								invoked.PrmCompany					= Company
								invoked.PrmInvoiceNumber			= PurchaseOrder
								invoked.PrmUniqueIdOfRelatedObject  = PurchaseOrder.UniqueID
				Instance Rules
					LocalLineItemNumber = LocalLineItemNumber + 1

					include UpdateTaxAmounts
					include LoadVertexOneCall
					include CreateTaxLineItem
					include CreateTaxLineItemUserFields


    	BatchAOCCloseAndAdjust is a Set Action 
    		Parameters
    			PrmCompany				is a PurchasingCompany
    		
    		Instance Selection	
				where (Company = PrmCompany
				and PurchaseOrder.Closed.Yes
				and Closed.No) 

    		Action Rules
    			Instance Rules

    				if (LandedAddOnCharge
    				and PurchaseOrderLine.ItemType.Inventoried)
	    				invoke CreateCostAdjustment OpenReceiptLineAddOnChargesRel
    					
    				invoke CloseAOC
						invoked.PrmClosePurchaseOrderHeaderBatch = true
    					
		RollUpAmountsToHeader is an Instance Action
			restricted
			Action Rules
				invoke UpdateHeaderAmountsFromAddOnCharge PurchaseOrder
					invoked.PrmPrintOnPO								= PrintOnPO
					invoked.PrmTotalAddOnChargeAmount					= AddOnChargeAmountPOCurrency
					invoked.PrmTrackType								= TrackType
					invoked.PrmInvoicedTaxAmount						= InvoicedTaxAmountPOCurrency
					invoked.PrmAccruedTaxAmount							= AccruedTaxAmountPOCurrency
					invoked.PrmVendor									= Vendor

        Create is a Create Action
			valid when (PurchaseOrder.IsUpdateAllowed)
			Action Rules



				include CreateAndUpdateRules
			Local Fields
			      					     	
			Entrance Rules				

				LocalAccountingEntity = Company.AccountingEntity
			


           	           					
        CreatePurchaseOrderAddOnCharge is a Create Action
        	default label is "Create"
        	valid when (PurchaseOrder.IsUpdateAllowed)

			Entrance Rules
				LocalAccountingEntity = Company.AccountingEntity				
			
			Action Rules
				include CreateAndUpdateRules


			
			Exit Rules
				include CreateAndUpdateDistribution
				
				
        CreatePurchaseOrderLineAddOnCharge is a Create Action
        	valid when (PurchaseOrder.IsUpdateAllowed)
        	default label is "Create"

			Entrance Rules
				LocalAccountingEntity = Company.AccountingEntity			
			
			Action Rules
				include CreateAndUpdateRules


				
			
			Exit Rules
				include CreateAndUpdateDistribution



        Update is an Update Action
        	valid when (AllowAOCUpdate)
        	Entrance Rules




        		
				LocalOldPrintOnPO 						= old PrintOnPO
				LocalOldAddOnChargeAmountPOCurrency		= AddOnChargeAmountPOCurrency
				LocalOldInvoicedTaxAmountPOCurrency		= InvoicedTaxAmountPOCurrency
				LocalOldAccruedTaxAmountPOCurrency		= AccruedTaxAmountPOCurrency
				if (TransientHeaderVendor entered)
					if (Vendor changed)
						LocalOldVendor					= Vendor
					else
						LocalOldVendor					= TransientHeaderVendor
				else	
					LocalOldVendor						= old Vendor
        		LocalAccountingEntity = Company.AccountingEntity
        		if (VendorReturnRel not exists)
        			include AddOnChargeEntranceRules
        		LocalOldAccount                         = old Account
        		
        	Action Rules
        		if (VendorReturnRel not exists)
        			include CreateAndUpdateRules        								        	

        		if (LocalUpdateAOC)


					if (AddOnChargePercent changed or EnteredUnitCost changed or TotalAddOnChargeAmount changed 
					or TaxCode changed or Quantity changed )			    			
   						LocalQuantity = Quantity
   						if ( LineAddOnCharge )
   							LocalPOCost = 	PurchaseOrderLine.VendorBuyUnitCost
   							LocalEnteredUnitCost = EnteredUnitCost
   							LocalPurchaseOrderLine = PurchaseOrderLine.PurchaseOrderLine
   							LocalVendorPriceUOMQuantityToProcess = PurchaseOrderLine.VendorPriceUOMQuantityToProcess 		
   							LocalEnteredBuyUOMMultiplier = PurchaseOrderLine.EnteredBuyUOMMultiplier
   							LocalVendorPriceUOMMultiplier = PurchaseOrderLine.VendorPriceUOMMultiplier
   							LocalCostND  =  LocalCostAllowedND
   						else 
   							LocalEnteredBuyUOMMultiplier  = 1 		
   							LocalVendorPriceUOMMultiplier = 1		
   							if ( AddOnChargePercent > 0 )
   								LocalCurrCompany = PurchaseOrderAndLineAddOnCharge.Company
   								LocalFrCurrCode  = PurchaseOrder.Currency 
   								LocalToCurrCode	 = Currency
   								LocalSystem			= "PO"   
 								LocalEffectDate   = PurchaseOrder.PurchaseOrderDate
 							    LocalBaseAmt      = 0
 							    LocalTranAmt	  = PurchaseOrder.TotalProductAmount	  							
            					if ( EnteredCurrencyConversionRate not entered )
            						LocalBaseRate = PurchaseOrder.EnteredCurrencyConversionRate
            					else 
            						LocalBaseRate = EnteredCurrencyConversionRate						 
            
        						LocalBaseND  = 	Company.CurrencyNumberOfDecimals
        						LocalTranND  = 	Company.CurrencyNumberOfDecimals				
        	

        						LocalPOCost  =  PurchaseOrder.TotalProductAmount
        						LocalCostND  =  LocalCurrencyND
        					
        					LocalTotalAddOnChargeAmount = TotalAddOnChargeAmount
        					LocalAmountND  =  LocalCurrencyND

               				LocalDoNotReadPAO  = true 
               				LocalDoNotStorePAO = true               




				
			Exit Rules
				include CreateAndUpdateDistribution
				
				if (IsNotCanceled)
				
				 	if ( not LineAddOnCharge or ReceivedQuantity > 0)
	        			for each  PurchaseOrderReceiptLineAOCSet2Rel
	        				if (each.PurchaseOrderReceiptLine  entered)        					
	                       		LocalCurrCompany = PurchaseOrderAndLineAddOnCharge.Company
	                       		LocalFrCurrCode  = Currency
	                       		LocalToCurrCode  = PurchaseOrder.Currency
	                       		LocalSystem      = "PO"
	                       		LocalEffectDate  = PurchaseOrder.PurchaseOrderDate
	                       		LocalBaseAmt	 =  0 
	                       		LocalTranAmt	 = EnteredUnitCost * PurchaseOrderLine.ReceivedQuantity
								LocalBaseRate	 = PurchaseOrderReceiptLineAOCRel.ReceiptCurrencyConversionRate
								LocalBaseND 	 = Company.CurrencyNumberOfDecimals
								LocalTranND 	 = Company.CurrencyNumberOfDecimals
			               		

			               				               		
			               		invoke Update each
	        						invoked.AddOnChargeAmountPOCurrency 	= LocalBaseAmt
	                       	else 
	                       		invoke Update each
	        						invoked.TotalAddOnChargeAmount					 	= TotalAddOnChargeAmount
	        						invoked.AddOnChargeAmountPOCurrency 				= AddOnChargeAmountPOCurrency
					
					if (LineAddOnCharge
					and LandedAddOnCharge)
						invoke UpdateLandedUnitCostFromAOC PurchaseOrderLine
		    				if (LocalNewLandedUnitCost)
		    					invoked.PrmLandedUnitCost	= LandedUnitCost
		    				else
		    					invoked.PrmLandedUnitCost	= LandedUnitCost - old LandedUnitCost
		    				
					if (LocalOldPrintOnPO 					not = PrintOnPO
					or  LocalOldAddOnChargeAmountPOCurrency	not = AddOnChargeAmountPOCurrency
					or  LocalOldInvoicedTaxAmountPOCurrency	not = InvoicedTaxAmountPOCurrency
					or  LocalOldAccruedTaxAmountPOCurrency	not = AccruedTaxAmountPOCurrency
					or  LocalOldVendor						not = Vendor
					or  TransientHeaderVendor entered)
						invoke UpdateHeaderAmountsFromAddOnCharge PurchaseOrder
							invoked.PrmPrintOnPO								= LocalOldPrintOnPO
							invoked.PrmTotalAddOnChargeAmount					= LocalOldAddOnChargeAmountPOCurrency * -1
							invoked.PrmInvoicedTaxAmount						= LocalOldInvoicedTaxAmountPOCurrency * -1
							invoked.PrmAccruedTaxAmount							= LocalOldAccruedTaxAmountPOCurrency * -1
							invoked.PrmVendor									= LocalOldVendor
							invoked.PrmTrackType								= TrackType
		
						invoke UpdateHeaderAmountsFromAddOnCharge PurchaseOrder
							invoked.PrmPrintOnPO								= PrintOnPO
							invoked.PrmTotalAddOnChargeAmount					= AddOnChargeAmountPOCurrency
							invoked.PrmInvoicedTaxAmount						= InvoicedTaxAmountPOCurrency
							invoked.PrmAccruedTaxAmount							= AccruedTaxAmountPOCurrency
							invoked.PrmVendor									= Vendor
							invoked.PrmTrackType								= TrackType
				
				if (not TransientByPassPurchaseOrderLineCallback
				and PurchaseOrderLine.PurchaseOrderLineLifeCycleState.Released)
					invoke Released.Update PurchaseOrderLine
						invoked.TransientByPassLineAddOnChargeCallback 	= true
						invoked.TransientByPassHeaderCallback 			= TransientByPassHeaderCallback

				if (not Closed.Historical
				and PurchaseOrder.Released
				and not TransientByPassHeaderCallback)
					invoke Released.Unrelease PurchaseOrder

        FastUpdate is an Update Action
        	restricted
        	Action Rules

		UpdateFromTaxLineItem is an Instance Action
			restricted
			Parameters
				PrmAccruedTaxAmount		is a CurrencyAmount
				PrmInvoicedTaxAmount	is a CurrencyAmount
				PrmLandedUnitCost		is an InternationalCost
				PrmTaxCode 				is like TaxCode 
			Entrance Rules
			Action Rules
				AccruedTaxAmount	 = PrmAccruedTaxAmount
				InvoicedTaxAmount	 = PrmInvoicedTaxAmount
				LandedUnitCost		+= PrmLandedUnitCost
				if (TaxCode = "00"
				and PrmTaxCode entered)
					TaxCode = PrmTaxCode 
			Exit Rules
				invoke CalculateOneSourceLandedUnitCost


        Delete is a Delete Action
        	valid when (PurchaseOrder.AllowDelete)
        	Entrance Rules
        		constraint (not Issued)
					"CannotDelete,AddOnChargeHasBeenIssued,MustCancelLineOrPurchaseOrder"

				constraint (IsNotCanceled)
				    "CannotDelete,AddOnChargeIsCanceled"     
			    
				constraint (PurchasingCompanyRel.ReopenPurchaseOrder
				or			not Closed.Yes)
	  			    "CannotCancelOrDelete,AddOnChargeIsClosed"
	  			    
	  			for each CommittedPurchaseOrderLineDistributionsRel
					invoke DeletePOCommitment each

				if (LineAddOnCharge)
				
					if (PurchaseOrderLine.Released)
						invoke Released.UpdatePurchaseOrderLineFromAddOnCharge PurchaseOrderLine					
        		
        	Exit Rules        		
        		
	    		if (not PurchaseOrder.ForHeaderDeletion)
	        		if (LineAddOnCharge
	        		and LandedAddOnCharge)        			
			    		invoke UpdateLandedUnitCostFromAOC PurchaseOrderLine
		    				invoked.PrmLandedUnitCost	= LandedUnitCost * -1
		    	
		    		invoke UpdateHeaderAmountsFromAddOnCharge PurchaseOrder
						invoked.PrmPrintOnPO								= PrintOnPO
						invoked.PrmTrackType								= TrackType
						invoked.PrmVendor									= Vendor
						invoked.PrmTotalAddOnChargeAmount					= AddOnChargeAmountPOCurrency * -1
						invoked.PrmInvoicedTaxAmount						= InvoicedTaxAmountPOCurrency * -1
						invoked.PrmAccruedTaxAmount							= AccruedTaxAmountPOCurrency * -1
					
				
					if (PurchaseOrder.Released)
						invoke Released.Unrelease PurchaseOrder

					
		UpdateFromLine is an Instance Action
			restricted
			Parameters
				PrmReceivedQuantity		is like Quantity
			Action Rules
				ReceivedQuantity 		= PrmReceivedQuantity
				ReceivedQuantityToMatch = PrmReceivedQuantity 
				
				invoke CloseAOC
				
        UpdateAOCInvoiceOnCancel is an Instance Action		
        	restricted
        	Local Fields
        		LocalRecFlag			is Boolean
        		LocalRecFlagUpdated		is Boolean
        	Entrance Rules

        		LocalRecFlagUpdated = false
        		for each MaaocdtlRel		
        			MatchedQuantity -= each.MatchedQuantity
        			if (!each.PurchaseOrderLine = 0)
        				ReceivedQuantityToMatch += each.MatchedQuantity
        			if (MatchedQuantity < 0)
        				MatchedQuantity = 0
        			if (!PurchaseOrderLine = 0)
        				Closed 				= Closed.No
        				LocalRecFlag 		= false
        				LocalRecFlagUpdated = true
        			else
        				MiscellaneousAddOnChargeInvoicedAmount -= each.TotalDistributionAmount
        				if (AddOnCharge.AddOnChargeType.Allowance)
        					if (MiscellaneousAddOnChargeInvoicedAmount > 0)
        						MiscellaneousAddOnChargeInvoicedAmount = 0
        					if (MiscellaneousAddOnChargeInvoicedAmount > TotalAddOnChargeAmount)
        						Closed 				= Closed.No
        						LocalRecFlag 		= false
        						LocalRecFlagUpdated = true
        				else
        					if (MiscellaneousAddOnChargeInvoicedAmount < 0)
        						MiscellaneousAddOnChargeInvoicedAmount = 0
        					if (MiscellaneousAddOnChargeInvoicedAmount < TotalAddOnChargeAmount)
        						Closed 				= Closed.No
        						LocalRecFlag 		= false
        						LocalRecFlagUpdated = true



        			if ((each.PayablesInvoice.MatchProcessType.AOCOnly		
        			or   each.PayablesInvoice.MatchProcessType.ReceiptMatch)        			
        			and  !PayablesInvoiceAddOnChargeRel.ItemType.Service
        			and  LocalRecFlagUpdated)
        				invoke Update PurchaseOrderReceiptLineAOCRel
        					invoked.Closed = LocalRecFlag
        			
		CancelPurchaseOrderAddOnCharge is an Instance Action

			valid when (IsCancelAllowed)
        	Action Rules
				include CancelRules

				initialize AddOnChargeAmountPOCurrency	
				initialize AccruedTaxAmountPOCurrency
				initialize InvoicedTaxAmountPOCurrency
	    		Canceled			   = true 
	    		Closed				   = Closed.Yes	

				invoke CloseAOC
				if (not PurchaseOrder.LocalCancelFromPO
				and not PurchaseOrderLine.LocalCancelFromPOLine
				and PurchaseOrder.Released
				and LineAddOnCharge
				and PurchaseOrderLine.QuantityToProcess > 0)
					invoke Unrelease PurchaseOrderLine
					invoke Released.Unrelease PurchaseOrder
			Exit Rules
				invoke UpdateHeaderAmountsFromAddOnCharge PurchaseOrder
					invoked.PrmPrintOnPO								= PrintOnPO
					invoked.PrmTrackType								= TrackType
					invoked.PrmVendor									= Vendor
					invoked.PrmTotalAddOnChargeAmount					= AddOnChargeAmountPOCurrency - old AddOnChargeAmountPOCurrency
					invoked.PrmAccruedTaxAmount							= AccruedTaxAmountPOCurrency - old AccruedTaxAmountPOCurrency
					invoked.PrmInvoicedTaxAmount						= InvoicedTaxAmountPOCurrency - old InvoicedTaxAmountPOCurrency
					
				if (PurchaseOrder.LocalCancelFromPO
				or  PurchaseOrderLine.LocalCancelFromPOLine)
					TransientByPassPurchaseOrderLineCallback = true	
				include CreateAndUpdateDistribution

	        	if (LineAddOnCharge
	        	and LandedAddOnCharge)        			
			    	invoke UpdateLandedUnitCostFromAOC PurchaseOrderLine
		    			invoked.PrmLandedUnitCost	= LandedUnitCost * -1				
						invoked.FromCancel          = true
								   
		UpdateAddOnChargeOnLineCancel is an Instance Action
			restricted
			valid when (IsCancelRemainingAllowed)
			Parameters
				PrmOldEnteredUnitCost is an InternationalCost
				PrmPOLineCancelQuantity is an Quantity
				PrmPOLineOldCancelQuantity is an Quantity				
			Action Rules



				Quantity = Quantity - PrmPOLineCancelQuantity + PrmPOLineOldCancelQuantity	
				if (PrmOldEnteredUnitCost != EnteredUnitCost)
					invoke Update PurchaseOrderLine
							invoked.LandedUnitCost = PurchaseOrderLine.LandedUnitCost - EnteredUnitCost + PrmOldEnteredUnitCost

					for each PurchaseOrderReceiptLineAOCRel
						invoke UpdateReceiptLineCosts each
							invoked.PrmOldEnteredUnitCost = PrmOldEnteredUnitCost						  
						
		CloseAOC is an Instance Action
			restricted
			Parameters
				PrmClosePurchaseOrderHeaderBatch	is Boolean
				FromMatchUpdate                     is Boolean
			
			Action Rules
				if (PrmClosePurchaseOrderHeaderBatch)
					include SetToClose
				else
					if (not Canceled)
						if (Closed.Yes)
							if (LineAddOnCharge)
								if (ReceivedQuantityToMatch > 0
								or (PurchaseOrderLine.IsServiceCodeAmount
								and MiscellaneousAddOnChargeInvoicedAmount < TotalAddOnChargeAmount)
								or (not PurchaseOrderLine.IsServiceCodeAmount
								and MatchedQuantity < Quantity))
									Closed = Closed.No
							else
								if  ((AddOnCharge.AddOnChargeType.Cost
								and   MiscellaneousAddOnChargeInvoicedAmount < TotalAddOnChargeAmount)
								or   (AddOnCharge.AddOnChargeType.Allowance
								and   MiscellaneousAddOnChargeInvoicedAmount > TotalAddOnChargeAmount))
									Closed = Closed.No
							

						else		
							if (PurchaseOrderLine entered)
								if  (PurchaseOrderLine.ServiceCode not entered
								and ((MatchedQuantity - ChargebackQuantity >= ReceivedQuantity
								and  ReceivedQuantity >= Quantity)
								or  (PurchaseOrder.Dropship
								and  MatchedQuantity >= Quantity)))
									include SetToClose
								else
									if (PurchaseOrderLine.IsServiceCodeQuantity
									and MatchedQuantity >= Quantity)
										include SetToClose
									else
										if (PurchaseOrderLine.IsServiceCodeAmount)
											if (AddOnCharge.AddOnChargeType.Cost
											and MiscellaneousAddOnChargeInvoicedAmount >= TotalAddOnChargeAmount)
												include SetToClose
											else
												if (AddOnCharge.AddOnChargeType.Allowance
												and MiscellaneousAddOnChargeInvoicedAmount <= TotalAddOnChargeAmount)
													include SetToClose
												else
													LocalTotalAddOnChargeAmount = sum PayablesInvoiceAocMatchedRel.AddOnChargeAmount
													if (MatchedQuantity > 0
													and LocalTotalAddOnChargeAmount >= TotalAddOnChargeAmount) 
														include SetToClose
													
								if (ReceivedQuantityToMatch = 0
								and ReceivedQuantity = MatchedQuantity
								and MatchedQuantity > 0
								and MatchedQuantity - ChargebackQuantity >= Quantity)
									include SetToClose
							else
								if ((AddOnCharge.AddOnChargeType.Cost
								and  MiscellaneousAddOnChargeInvoicedAmount >= TotalAddOnChargeAmount)
								or	(AddOnCharge.AddOnChargeType.Allowance
								and  MiscellaneousAddOnChargeInvoicedAmount <= TotalAddOnChargeAmount))
									include SetToClose
			
		CreateInvoiceAocFromPo is an Instance Action
			default label is "CreateChargeOrAllowanceFromPurchaseOrder"
			valid when (CreateInvoiceAocFromPoValid)	
			Parameters
				PayablesCompany
				PayablesInvoice




			Action Rules
				constraint (!PayablesInvoiceAocRel exists)
					"ChargeOrAllowanceExists" 

				if (AddOnChargeEntryMethod.TotalAmount)								
   					LocalUnitCost = TotalAddOnChargeAmount / Quantity
				else
					LocalUnitCost = EnteredUnitCost
				
				if (PurchaseOrderLine.VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
					LocalUnitCost = LocalUnitCost * (PurchaseOrderLine.VendorPriceUOMMultiplier / PurchaseOrderLine.EnteredBuyUOMMultiplier)
				
				if  (PayablesInvoice.InvoiceCurrency != Currency)
					initialize CurrencyWork
					LocalFromCurrency 		 				= Currency
		        	LocalExchangeDate 						= PayablesInvoice.InvoiceDate
					CurrencyTable 							= PayablesInvoice.CurrencyTable
				    CurrencyWork.TransactionAmount			= LocalUnitCost
				    CurrencyWork.BaseAmount.ToCurrency		= PayablesInvoice.InvoiceCurrency
				    CurrencyWork.BaseAmount.EnteredCurrencyRate	= EnteredCurrencyConversionRate
				    LocalUnitCost							*= EnteredCurrencyConversionRate

				invoke CreateFromPurchaseOrderAoc PayablesInvoiceAddOnCharge
					invoked.Company							= Company 
					invoked.Vendor							= Vendor
					invoked.PayablesInvoice					= PayablesInvoice
					invoked.PurchaseOrder					= PurchaseOrder
					invoked.PurchaseOrderLine				= PurchaseOrderLine
					invoked.AddOnCharge						= AddOnCharge
					invoked.PurchaseFromLocation			= PurchaseFromLocation
					invoked.Location						= ShipToLocation
					invoked.AddOnChargePercent				= AddOnChargePercent
					invoked.LandedAddOnCharge				= LandedAddOnCharge
					invoked.PrintOnPO						= PrintOnPO
					invoked.EnteredQuantity					= DerivedLineAOCInvoiceQuantity
					invoked.MatchedQuantity					= DerivedLineAOCInvoiceQuantity
					invoked.MatchDetailKey					= MatchDetailKey
					
					invoked.EnteredUnitCost					= LocalUnitCost
					invoked.MatchUnitCost					= LocalUnitCost
					invoked.TotalDistributionAmount			= DerivedLineAOCInvoiceQuantity * LocalUnitCost

					invoked.RecordSource					= "LM"
					invoked.Item							= PurchaseOrderLine.Item
					invoked.ItemType						= PurchaseOrderLine.ItemType
					if  (!PayablesInvoice.TaxAdjustment.Calculate
					and  !PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)
						invoked.TaxCode						= TaxCode

					if (initiating action = "MatchPurchaseOrderInvoice.CreateAOCFromPurchaseOrder"
					or  invoking action = "MatchPurchaseOrderInvoice.CreateAOCFromPurchaseOrder"
					or  initiating action = "PayablesInvoice.CreateInvoiceUnreleased"
					or  PayablesInvoice.InterfaceInProcess)
						invoked.BypassInvoiceErrorChecking		= true
						invoked.BypassAllowUpdate				= true
					
					
		CreateInvoiceMiscellaneousAddOnCharges is an Instance Action
			default label is "CreateInvoiceMiscellaneousAddOnCharges"
			valid when (CreateInvoiceAocFromPoValid)	
			Parameters
				PayablesCompany
				PayablesInvoice

			Action Rules
				constraint (!PayablesInvoiceAocRel exists)
					"ChargeOrAllowanceExists" 
				

				invoke CreateMiscellaneousAddOnCosts PayablesInvoiceAddOnCharge
					invoked.Company							= Company 
					invoked.Vendor							= Vendor
					invoked.PayablesInvoice					= PayablesInvoice
					invoked.PurchaseOrder					= PurchaseOrder
					invoked.AddOnCharge						= AddOnCharge
					invoked.PurchaseFromLocation			= PurchaseFromLocation
					invoked.Location						= ShipToLocation
					invoked.LandedAddOnCharge				= LandedAddOnCharge
					invoked.PrintOnPO						= PrintOnPO
					invoked.MiscellaneousAccount            = Account
					invoked.TotalDistributionAmount			= DerivedDistributionAmount
					invoked.RecordSource					= "LM"

					if (initiating action = "MatchPurchaseOrderInvoice.CreateAOCFromPurchaseOrder"
					or  invoking action = "MatchPurchaseOrderInvoice.CreateAOCFromPurchaseOrder"
					or  initiating action = "PayablesInvoice.CreateInvoiceUnreleased"
					or  PayablesInvoice.InterfaceInProcess)
						invoked.BypassInvoiceErrorChecking		= true
						invoked.BypassAllowUpdate				= true

		UpdateFromMatch is an Update Action  
			restricted
			bypass field rules
			Action Rules

				if (PurchaseOrderLine entered
				and !PurchaseOrderLine.ItemType.Service
				and !PurchaseOrder.Dropship)
					ReceivedQuantityToMatch -= MatchedQuantity
					ReceivedQuantityToMatch += ChargebackQuantity

				invoke CloseAOC  
					invoked.FromMatchUpdate = true
			Exit Rules
				if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
	            or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)	
				and  !BypassCommitUpdate	
				and  !PurchaseOrderLineUpdateFromUnMatchProcess)
				 	BypassProjectDateEdit = true 
				 	invoke UpdateGLCommitmentIndirect HeaderOrLineAddOnChargeDistributionRel
				 		invoked.PrmFromInvoice = true

    	AddSpreadDifference is an Instance Action
			restricted
			Parameters
				PrmSpreadDifference			is an InternationalAmount
			Action Rules
				if (PrmSpreadDifference entered)

					LocalOldAddOnChargeAmountPOCurrency = AddOnChargeAmountPOCurrency
					LocalOldAccruedTaxAmountPOCurrency  = AccruedTaxAmountPOCurrency
					LocalOldInvoicedTaxAmountPOCurrency = InvoicedTaxAmountPOCurrency
					
					TotalAddOnChargeAmount	+= PrmSpreadDifference
					AddOnChargeAmountPOCurrency += PrmSpreadDifference

					EnteredUnitCost += (PrmSpreadDifference/Quantity)

					if (LineAddOnCharge
					and LandedAddOnCharge)
						LandedUnitCost += (PrmSpreadDifference/Quantity)
						invoke UpdateLandedUnitCostFromAOC PurchaseOrderLine
		    				invoked.PrmLandedUnitCost	= LandedUnitCost - old LandedUnitCost
						

					invoke UpdateHeaderAmountsFromAddOnCharge PurchaseOrder
						invoked.PrmPrintOnPO								= PrintOnPO
						invoked.PrmTrackType								= TrackType
						invoked.PrmVendor									= Vendor
						invoked.PrmTotalAddOnChargeAmount					= AddOnChargeAmountPOCurrency - LocalOldAddOnChargeAmountPOCurrency
						invoked.PrmInvoicedTaxAmount						= InvoicedTaxAmountPOCurrency - LocalOldInvoicedTaxAmountPOCurrency
						invoked.PrmAccruedTaxAmount							= AccruedTaxAmountPOCurrency - LocalOldAccruedTaxAmountPOCurrency
					 			
		POReceiptArchiveCloseAOC is an Instance Action
			restricted
        	Action Rules
	    		Closed = Closed.Yes				






		BatchCopyPurchaseOrderLineAddOnCharge is a Set Action
			restricted
			Parameters
				PrmCompany							is a PurchasingCompany
				PrmPurchaseOrder                    is like PurchaseOrder 
				PrmCopyFromPurchaseOrder			is a PurchaseOrder
				PrmShipToLocation					is an InventoryLocation
				PrmCopyIgnoreCancelQuantity			is Boolean

			Instance Selection
				where	(Company			= PrmCompany
				and		 PurchaseOrder		= PrmCopyFromPurchaseOrder
				and		 (PurchaseOrderLine.HeaderIsFullyCanceledOrLineCanBeCopied
				or		 PrmCopyIgnoreCancelQuantity and PurchaseOrderLine.ForIgnoreCancelQuantity))

			Action Rules
				Instance Rules
					include CopyPurchaseOrderAndLineAddOnCharge
		
		BatchCopyPurchaseOrderAddOnCharge is a Set Action
			restricted
			Parameters
				PrmCompany							is a PurchasingCompany
				PrmPurchaseOrder                    is like PurchaseOrder 
				PrmCopyFromPurchaseOrder			is a PurchaseOrder
				PrmShipToLocation					is an InventoryLocation

			Instance Selection
				where	(Company			= PrmCompany
				and		 PurchaseOrder		= PrmCopyFromPurchaseOrder
				and		 PurchaseOrderLine not entered)

			Action Rules
				Instance Rules
					include CopyPurchaseOrderAndLineAddOnCharge


		Purge is a Purge Action
			restricted
			bypass relational integrity rules


		CreateMatchWorkDetailsForServiceItems is a Set Action
			restricted
			Parameters
				PrmCompany				 is a PayablesCompany
				PrmPurchaseOrder	 	 is a PurchaseOrder
				PrmMultiplePOs			 is Boolean
				PrmVendor				 is a Vendor
				PrmInvoice				 is a PayablesInvoice
				PrmMatchWork			 is a MatchWork
				FromRecon				 is Boolean
				PrmAutoMatchResult		 is an AutoMatchResult
				PoolOption
				PrmInvoiceMatchLevel	 is a MatchLevel
			Local Fields
				WorkAmount1				 is like InternationalCost
				WorkAmount2				 is like InternationalCost

			Instance Selection
				where (Company					= PrmCompany
				and    Vendor					= PrmVendor
				and   (PrmMultiplePOs
				or     PurchaseOrder 			= PrmPurchaseOrder))
						
			Set Is
				PrmCompany
				PrmPurchaseOrder
				PrmInvoice
				PrmMatchWork

			Action Rules
				Empty Set Rules
					invoke CreateMatchWorkReceiptDetails PurchaseOrderReceiptLine
						invoked.PrmCompany 			= PrmCompany
						invoked.PrmPurchaseOrder 	= PrmPurchaseOrder
						invoked.PrmMultiplePOs 		= PrmMultiplePOs 
						invoked.PrmVendor			= PrmVendor
						invoked.PrmInvoice 			= PrmInvoice
						invoked.PrmMatchWork 		= PrmMatchWork
						invoked.PrmAutoMatchResult 	= PrmAutoMatchResult
						invoked.FromRecon			= FromRecon
						invoked.PoolOption			= PoolOption
				Set Rules
					Exit Rules
						invoke CreateMatchWorkReceiptDetails PurchaseOrderReceiptLine
							invoked.PrmCompany 			= PrmCompany
							invoked.PrmPurchaseOrder 	= PrmPurchaseOrder
							invoked.PrmMultiplePOs 		= PrmMultiplePOs 
							invoked.PrmVendor			= PrmVendor
							invoked.PrmInvoice 			= PrmInvoice
							invoked.PrmMatchWork 		= PrmMatchWork
							invoked.PrmAutoMatchResult  = PrmAutoMatchResult
							invoked.FromRecon			= FromRecon
							invoked.PoolOption			= PoolOption

				Instance Rules


					LocalPayablesInvoice						= PrmInvoice
					LocalMatchWork 								= PrmMatchWork 

					if  (LocalMatchPurchaseOrderInvoiceRel exists
					and  MatchWorkReceiptLineAOCWithReceiptRel not exists 
					and (!PoolOption.CompanyVendorPoShipTo
					or    ShipToLocation	= PrmInvoice.Location))

						WorkAmount1								= ((Quantity - MatchedQuantity) * EnteredUnitCost)
						WorkAmount2								= WorkAmount1 + MiscellaneousAddOnChargeInvoicedAmount
			
						invoke Create MatchWorkReceiptLineAOC
							fill in fields from this instance
							invoked.MatchWork 					= PrmMatchWork
							invoked.Company						= Company
							initialize invoked.PurchaseOrderReceipt
							initialize invoked.PurchaseOrderReceiptLine
							invoked.ReceivedQuantity			= Quantity
							invoked.ReceivedQuantityToMatch		= Quantity - MatchedQuantity
							invoked.UnmatchedQuantity			= Quantity - MatchedQuantity
							invoked.OriginalUnitCost			= EnteredUnitCost
							invoked.MatchUnitCost				= EnteredUnitCost
							invoked.ReceivedAmountToMatch		= WorkAmount1
							invoked.MatchAmount					= WorkAmount1
							invoked.UnmatchedAmount				= WorkAmount2
							invoked.ItemType					= PurchaseOrderLine.ItemType
							invoked.MatchDetailKey				= PurchaseOrderLine.MatchDetailKey
			
		CalculateOneSourceLandedUnitCost is an Instance Action
			restricted
			Entrance Rules
				LocalOldAddOnChargeAmountPOCurrency		= AddOnChargeAmountPOCurrency
				LocalOldInvoicedTaxAmountPOCurrency		= InvoicedTaxAmountPOCurrency
				LocalOldAccruedTaxAmountPOCurrency		= AccruedTaxAmountPOCurrency
			Action Rules
				LocalCallOneSource = true
				if (not SingleCallToOneSource
				and not SingleCallToVertex)
					include UpdateTaxAmounts
				include ConvertToPOCurrency
				
				if (LineAddOnCharge
				and LandedAddOnCharge)
					invoke UpdateLandedUnitCostFromAOC PurchaseOrderLine
		    			invoked.PrmLandedUnitCost	= LandedUnitCost - old LandedUnitCost
				
				invoke UpdateHeaderAmountsFromAddOnCharge PurchaseOrder
					invoked.PrmPrintOnPO							= PrintOnPO
					invoked.PrmTrackType							= TrackType
					invoked.PrmVendor								= Vendor
					invoked.PrmTotalAddOnChargeAmount				= AddOnChargeAmountPOCurrency - LocalOldAddOnChargeAmountPOCurrency
					invoked.PrmInvoicedTaxAmount					= InvoicedTaxAmountPOCurrency - LocalOldInvoicedTaxAmountPOCurrency
					invoked.PrmAccruedTaxAmount						= AccruedTaxAmountPOCurrency - LocalOldAccruedTaxAmountPOCurrency
					
		CalculateVertexLandedUnitCost is an Instance Action
			restricted
			Entrance Rules
				LocalOldAddOnChargeAmountPOCurrency		= AddOnChargeAmountPOCurrency
				LocalOldInvoicedTaxAmountPOCurrency		= InvoicedTaxAmountPOCurrency
				LocalOldAccruedTaxAmountPOCurrency		= AccruedTaxAmountPOCurrency
			Action Rules
				include UpdateTaxAmounts
				include ConvertToPOCurrency
				
				if (LineAddOnCharge
				and LandedAddOnCharge)
					invoke UpdateLandedUnitCostFromAOC PurchaseOrderLine
		    			invoked.PrmLandedUnitCost	= LandedUnitCost - old LandedUnitCost
				
				invoke UpdateHeaderAmountsFromAddOnCharge PurchaseOrder
					invoked.PrmPrintOnPO							= PrintOnPO
					invoked.PrmTrackType							= TrackType
					invoked.PrmVendor								= Vendor
					invoked.PrmTotalAddOnChargeAmount				= AddOnChargeAmountPOCurrency - LocalOldAddOnChargeAmountPOCurrency
					invoked.PrmInvoicedTaxAmount					= InvoicedTaxAmountPOCurrency - LocalOldInvoicedTaxAmountPOCurrency
					invoked.PrmAccruedTaxAmount						= AccruedTaxAmountPOCurrency - LocalOldAccruedTaxAmountPOCurrency
					
