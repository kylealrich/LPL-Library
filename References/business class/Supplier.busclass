Supplier is a BusinessClass
	owned by procurement
	prefix is SUP
	representative text is "<SupplierName>_-_(<Supplier>)"
	representative image is Picture.File
		missing image is random background

	Ontology
		symbolic key is Supplier

	Persistent Fields
		SupplierName 					is a VendorName 
			holds pii
		Vendor
		TaxIdGroup
		VATRegistrationCountry			is a Country
			default label is "V\A\TRegistrationCountry/\Jurisdiction"
		VATRegistrationNumber
		DoingBusinessAs 				is Alpha size 30
		DandBNbr 						is Alpha size 20
			default label is "Dun&Bradstreet"
		BusinessType 						is Numeric size 2
			States
				Corporation 				value is 1
				NotForProfit 				value is 2
				SoleProprietorship 			value is 3
				ForeignCorporation 			value is 4
				PublicAgency 				value is 5
		SameAsAddressAbove				is Boolean
		MailingAddress 					is a PostalAddressV2	
			holds pii
		BillingAddress 					is a PostalAddressV2	
			holds pii
		BillingFirstName				is Alpha size 30 
			holds pii
		BillingLastName					is Alpha size 30 
			holds pii
		PreQualified					is Boolean
		Active							is Boolean
		AcceptTerms						is Boolean
		SupplierStatus					is Numeric size 1
			States
				NeedsValidation				value is 1
				PendingValidation			value is 2
				Validated					value is 3
				Rejected					value is 4
		HasBeenValidated				is Boolean
		CreatedByBuyer					is Boolean
		GlobalLocationNumber
		SentCertificationNotice 		is Date
		SentDiversityNotice 			is Date
		WebAddress						is URL
		InactiveTimeStamp				is TimeStamp
		GroupPurchasingOrganization		is Boolean
		VendormateLogin					is Alpha size up to 50
		VendormateEntityId				is Alpha size up to 40
		SanctionsFree					is Boolean
		TaxIdVerifiedByVendormate		is Boolean
		AllowMixedEntryOfInvoices       is Boolean
			default label is "AllowPurchaseOrdersToBeViewedThatHaveInvoicesEnteredInternally"
		RequireInvoiceEntryOnPortal     is Boolean
			default label is "RequireAllInvoicesToBeEnteredOnSupplierPortal"
		SupplierSubmittedInvoiceType    is Numeric size 1
			States
				UserDetermined                  value is 0
				Expense							value is 1
				MatchToPurchaseOrder     		value is 2
				ServiceContract          		value is 3
		AllowAdhocAddOnCharges          is Boolean 
			default label is "AllowSupplierToEnterAdHocAddOnCharges"
		EventToCreate                   is Numeric size 8
		EventCompany                    is a SourcingCompany  
		BankInformationGroup
			context of SupplierGroup
		SuppressDisplayOfDueDate        is Boolean
		TaxCertification                is an AttachmentWithTitleAudited
		Picture							is an ImageAttachment
		SearchSupplier      			is Text
			text searchable
			disable Auditing
		ContactLocationDisplay                  is Numeric size 1
			States
				AllDocuments					value is 0
				OnlyLocationDocuments    	    value is 1
				LocationAndNoLocationDocuments	value is 2
			default label is "ContactCanView_(ForPurchaseOrders,Invoices,Receipts,Payments,_andItems)"
		PrimaryContactViewAllDocuments  is Boolean
			default label is "AllowPrimaryContactToViewAllDocuments"
		OIGExclusionStatus									
		PreviousExclusionStatus					is a OIGExclusionStatus		
		OIGValidationDate						is Date		
			default label is "LastOIGValidationDate"
		ContactIsRegistered						is Boolean  
			restricted
			disable Auditing
		RegistrationPassword					is Password 
			default label is "Password"
			disable Auditing
		RegistrationConfirmPassword				is Password
			default label is "ConfirmPassword"
			disable Auditing
		SupplierDescription                     is Alpha size 1000
			default label is "CompanyInformation"

	Context Fields
		SupplyManagementReportContext is a SupplyManagementReport
		PayablesDiversityCode
		EventDateRange                is a DateRange
		ContextVendor                 is a Vendor

	Transient Fields
	 	RequestedBy					is Alpha size 100
	 	RequesterEmail				is an EmailAddress 
	 		holds pii
		VendormatePassword				is Alpha 20
		LoginName						is LoginName
			default label is "UserName"
  		Password						is Alpha size 288
  		ConfirmPassword					is Alpha size 288
		MainContact						is an PersonName 
			holds pii
		GivenName                       is Alpha size 50 
			holds pii
		FamilyName                      is Alpha size 50 
			holds pii
		ContactTitle					is a Description
		TransientTelephone              is Alpha size 15 
			holds pii
		TelephoneNumber 
			holds pii
		EmailAddress 
			holds pii
		ConfirmEmailAddress             is an EmailAddress 
			holds pii
		FaxNumber 
			holds pii
		MobilePhone 
			holds pii
		ReceiveEmailNotification 		is Boolean
		VendormateUserId				is Alpha 40
		UseVendormateLogin				is Boolean
		DunAndBradstreetNumber 			is Alpha size 20
			default label is "Dun&Bradstreet"
		TransientVendorClass            is a VendorClass
		TransientBankInformationGroup   is a BankInformationGroup
			context of SupplierGroup
		DeleteSupplier                  is Boolean 

		TransientSingleJSONNode			is Alpha 400
		TransientNextAction				is Alpha 100
		TransientUserVerificationId		is Alpha 100
		TransientUserIdentity			is Alpha 50
		TransientResponseStatus			is Alpha 100
		TransientDisplayPasswordPolicy	is Boolean	
		TransientVerificationCode		is Alpha size 20
		TransientStringHolder			is Alpha size 3000
		TransientSendVerificationCode	is Boolean
		TransientResendVerificationCode	is Boolean
		TransientUserRegistered			is Boolean
		TransientUserVerified			is Boolean
		TransientErrorOccurred			is Boolean
		FieldToConvert					is Alpha 250
		TransientVerificationCodeResent	is Boolean
		ChangeTaxID                     is Boolean

	Local Fields
		LocalEffectiveDate				is Date
		LocalTaxIdGroup					is a TaxIdGroup
		LocalTaxIdentificationType      is like TaxIdentificationType
		LocalGlnType					is Numeric size 2
		VendormateToken					is Alpha size up to 50
		VendormateResponseStatus		is Alpha 20
		VendormateUserStatus			is Alpha 20
		NewVendor						is a Vendor view
		LocalEventCounter				is Numeric size 21
		LocalPreviousEventId			is Numeric size 21
		LocalSourcingEventLineCounter	is Numeric size 21
		LocalAwardedSourcingEventLineCounter	is Numeric size 21
		SourceIDTotaled                 is Boolean
		TotalSourceIDBid                is Decimal size 21.2
		TotalSourceIDAwarded            is Decimal size 21.2
		LocalBankAccountNumber          is a BankAccountNumber
		LocalBankCountry         		is a Country
		ValidateBankAccountNumber
		LocalSupplierGroup              is like SupplierGroup
		LocalSupplier                   is like Supplier
		LocalVendor                     is like Vendor
		LocalText						is Text	
		LocalText2						is Text	
		LocalVATNumber	                is like VATRegistrationNumber 
			holds pii
		LocalVATCountry                 is like Country
		LocalCommodityCode              is like CommodityCode
		LocalNumberOfDays               is Numeric 3
		LocalContact                    is like Employee

		JSONResponse					is JSONObject
		LocalSupplierSourceId			is like SupplierSourceId
		SupplierSourceIdView			is a SupplierSourceId view
		NewQuestion						is a SupplierQuestions view
		LoginNameHasSpaces              is Boolean
	Field Groups
		SupplierFields
			SupplierName
			TaxIdGroup
			VATRegistrationCountry
			VATRegistrationNumber
			DoingBusinessAs
			DandBNbr
			GlobalLocationNumber
			BusinessType
			WebAddress
			MailingAddress
			BillingAddress
			BillingFirstName
			BillingLastName
			PreQualified
			Active
			AcceptTerms
			SupplierStatus
			HasBeenValidated
			CreatedByBuyer
			BankInformationGroup

		CompareFields
			SupplierName
			TaxIdGroup
			VATRegistrationCountry
			VATRegistrationNumber
			GlobalLocationNumber
			WebAddress
			MailingAddress
			BillingAddress
			BankInformationGroup

		GeneralInformationFields
			DoingBusinessAs
			DandBNbr
			GlobalLocationNumber
			BusinessType
			TaxIdGroup
			WebAddress

  	Rule Blocks
		UpdateValidationEmail
			send email
				to SupplierGroup.NotificationEmailAddress
				from SupplierGroup.AdminEmailAddress
				cc PrimaryContact.EmailAddress
				subject "<SupplierGroupExtensionRel.FinalUpdatedValidationEmailSubject>"
				Contents
					"<SupplierGroupExtensionRel.FinalUpdatedValidationEmailContent>"
					"SupplierInformationWasModifiedOn<update stamp>"

		GetVendormateData
			invoke GetVendormateToken VendormateTokenService
				invoked.VisionRequest							= VendormateTokenRequest
				VendormateToken									= result.VisionResponse.Token
				VendormateResponseStatus						= result.VisionResponse.Status

			constraint (VendormateResponseStatus = "Ok")
				"InvalidVendormateUserNameOrPassword"

			invoke GetVendorData VendormateService
				invoked.Service									= "user"
				invoked.Operation								= "getUserProfileWithEntityForERPPartners"
				invoked.VisionRequest							= VendormateDataRequest
				invoked.Token									= VendormateToken
				VendormateResponseStatus						= result.VisionResponse.Status
				VendormateUserStatus							= result.VisionResponse.UserProfile.UserDetail.UserStatus
				SupplierName									= result.VisionResponse.UserProfile.EntityDetail.LegalName
				MailingAddress.DeliveryAddress.AddressLine1 	= result.VisionResponse.UserProfile.EntityDetail.AddressLine1
				MailingAddress.DeliveryAddress.AddressLine2 	= result.VisionResponse.UserProfile.EntityDetail.AddressLine2
				MailingAddress.Municipality						= result.VisionResponse.UserProfile.EntityDetail.City
				MailingAddress.StateProvince 					= result.VisionResponse.UserProfile.EntityDetail.StateCode
				MailingAddress.PostalCode	 					= result.VisionResponse.UserProfile.EntityDetail.ZipCode
				MailingAddress.County 							= result.VisionResponse.UserProfile.EntityDetail.County
				MailingAddress.Country							= result.VisionResponse.UserProfile.EntityDetail.CountryCode
				WebAddress 										= result.VisionResponse.UserProfile.EntityDetail.MainWebsite
				DoingBusinessAs	 								= result.VisionResponse.UserProfile.EntityDetail.DbaName
				DandBNbr                                        = result.VisionResponse.UserProfile.EntityDetail.DnbListingNumber
				TaxIdGroup.TaxId								= result.VisionResponse.UserProfile.EntityDetail.EinOrSsn
				VendormateEntityId								= result.VisionResponse.UserProfile.EntityDetail.Id
				MainContact.FamilyName 							= result.VisionResponse.UserProfile.UserDetail.LastName
				MainContact.GivenName 							= result.VisionResponse.UserProfile.UserDetail.FirstName
				ContactTitle 									= result.VisionResponse.UserProfile.UserDetail.Title
				EmailAddress			 						= result.VisionResponse.UserProfile.UserDetail.Email
				if (SupplierGroup.RequireEmailConfirmation)
					ConfirmEmailAddress                         = result.VisionResponse.UserProfile.UserDetail.Email
				TelephoneNumber.SubscriberNumber 				= result.VisionResponse.UserProfile.UserDetail.WorkPhone
				FaxNumber.SubscriberNumber						= result.VisionResponse.UserProfile.UserDetail.Fax
				VendormateUserId								= result.VisionResponse.UserProfile.UserDetail.Id
				SanctionsFree									= result.VisionResponse.UserProfile.EntityDetail.IsEntitySanctionsFree
				TaxIdVerifiedByVendormate						= result.VisionResponse.UserProfile.EntityDetail.VerifiedFEIN
				GlobalLocationNumber							= result.VisionResponse.UserProfile.EntityDetail.GlobalLocationNumber

			constraint (VendormateResponseStatus = "Ok")
				"VendormateAccessFailed"

			constraint (VendormateUserStatus = "ACT")
				"VendormateAccountIsNotActive"

		TotalSourceIDAward
			if (!SourceIDTotaled)
				for each SupplierSourceIdForHistoryRel
					TotalSourceIDBid     += each.TotalSourceIdBid
					TotalSourceIDAwarded += each.TotalSourceIdAwarded
			SourceIDTotaled = true

		UpdateExitRules
			if (BankInformationGroup.BankEntity entered
			and !BankInformationGroup.DisplayBankEntity)
				initialize BankInformationGroup.BankEntity
			if (BankInformationGroup.BankAccountNumber entered
			and !BankInformationGroup.DisplayBankAccountNumber)
				initialize BankInformationGroup.BankAccountNumber
			if (BankInformationGroup.BankAccountType entered
			and !BankInformationGroup.DisplayBankAccountType)
				initialize BankInformationGroup.BankAccountType
			if (BankInformationGroup.BankCurrency entered
			and !BankInformationGroup.DisplayBankCurrency)
				initialize BankInformationGroup.BankCurrency
			if (BankInformationGroup.CrossBorderIdentifier entered
			and !BankInformationGroup.DisplayCrossBorderIdentifier)
				initialize BankInformationGroup.CrossBorderIdentifier
			if (BankInformationGroup.SwiftID entered
			and !BankInformationGroup.DisplaySwiftID)
				initialize BankInformationGroup.SwiftID
			if (BankInformationGroup.BankingCode entered
			and !BankInformationGroup.DisplayBankingCode)
				initialize BankInformationGroup.BankingCode
			if (BankInformationGroup.BankID entered
			and !BankInformationGroup.DisplayBankID)
				initialize BankInformationGroup.BankID
			if (BankInformationGroup.AssignmentNumber entered
			and !BankInformationGroup.DisplayAssignmentNumber)
				initialize BankInformationGroup.AssignmentNumber
			if (BankInformationGroup.GiroNumber entered
			and !BankInformationGroup.DisplayGiroNumber)
				initialize BankInformationGroup.GiroNumber
			if (BankInformationGroup.BACSReference entered
			and !BankInformationGroup.DisplayBACSReference)
				initialize BankInformationGroup.BACSReference
			if (BankInformationGroup.CreditCardNumber entered
			and !BankInformationGroup.DisplayCreditCardNumber)
				initialize BankInformationGroup.CreditCardNumber
			if (BankInformationGroup.BACSName entered
			and !BankInformationGroup.DisplayBACSName)
				initialize BankInformationGroup.BACSName

		ValidateBankAccount

			initialize ValidateBankAccountNumber
			ValidateBankAccountNumber.BankAccountValidationType	= DerivedBankAccountValidationType
			ValidateBankAccountNumber.BankAccountNumber 		= LocalBankAccountNumber
			constraint (ValidateBankAccountNumber.IsValidBankAccount)
				"<ValidateBankAccountNumber.ErrorMessage>ForAccount<LocalBankAccountNumber>"

		BuildTextIndexes
			build text search field SearchSupplier
				Fields
					SupplierName
					Supplier
					Vendor
					MailingAddress
					PrimaryContactUpperCaseName
					SupplierDescription

	Derived Fields
		RepresentativeText is a StringField
			type is Text
			default label is "Supplier"
			Supplier " - " SupplierName

		SupplierTitleMessage is a MessageField
			"Supplier"

		RepresentativeTextWithTitle is a StringField
			type is Text
			SupplierTitleMessage " " Supplier " - " SupplierName

		SupplierRegistrationDerived is a DerivedField 
			type is Text 
			if (SupplierExists)
				return blank 
			else 
				return SupplierGroup.CompanyInformationText 
		
		DisplaySupplierNumber is a DerivedField
			type is Text
			if (SupplierExists)
				return SupplierTitleMessage + " " + RepresentativeText
			else
				return CreateSupplierMessage

		CreateSupplierMessage is a MessageField
			"CreateSupplier"

		ActivityDate is a ComputeField
			type is Date
			(current corporate date - LocalNumberOfDays as days)

		NumberOfClosedEventInvites is a ComputeField
			type is Numeric 6
			(instance count of ClosedSupplierNotificationsRel)

		EventResponsesNoBid is a ComputeField
			type is Numeric 6
			(instance count of EventResponsesNoBidRel)

		TotalSourceIdEventsBid is a DerivedField
			type is Numeric size 21
			return (instance count of EventResponsesForSupplierRel)

		DerivedBankAccountValidationType is a DerivedField
			type is like BankAccountValidationType

			if (CountryBankInformationRel exists)
				return CountryBankInformationRel.BankAccountValidationType
			else
			if (DefaultCountryBankInformationRel exists)
				return DefaultCountryBankInformationRel.BankAccountValidationType

		TotalSourceIdEventAwards is a DerivedField
			type is Numeric size 21
			return (instance count of AwardedEventResponsesForSupplierRel)

		TotalSourceIdEventBidSuccess is a DerivedField
			type is Percent size 6.1
			return (TotalSourceIdEventAwards/TotalSourceIdEventsBid)

		TotalParticipation is a DerivedField
			type is Percent size 6.1
			if (TotalSourceIdEventsBid/NumberOfClosedEventInvites > 100%)
				return 100%
			else
				return (TotalSourceIdEventsBid/NumberOfClosedEventInvites)

		TotalSourceIdLinesBid is a DerivedField
			type is Numeric size 21
			initialize LocalSourcingEventLineCounter
			for each SupplierSourceIdForHistoryRel
				TotalSourceIdLinesBid += each.TotalSourceIdLinesBid

		TotalSourceIdAwardedLines is a DerivedField
			type is Numeric size 21
			for each SupplierSourceIdForHistoryRel
				TotalSourceIdAwardedLines += each.TotalSourceIdAwardedLines

		TotalSourceIdLineBidSuccess is a DerivedField
			type is Percent size 6.1
			return (TotalSourceIdAwardedLines/TotalSourceIdLinesBid)

  		TotalSourceIdBid is a DerivedField
			type is Decimal size 21.2
			include TotalSourceIDAward
			return TotalSourceIDBid

		TotalSourceIdAwarded is a DerivedField
			type is Decimal size 21.2
			include TotalSourceIDAward
			return TotalSourceIDAwarded

		TotalSourceIdAmountBidSuccess is a DerivedField
			type is Percent size 6.1
			return (TotalSourceIdAwarded / TotalSourceIdBid)

  		TotalSourceIdEventsBidWithDiversity is a DerivedField
			type is Numeric size 21
			restricted
			return (instance count of EventReponsesForSupplierWithDiversityRel)

		TotalSourceIdEventAwardsWithDiversity is a DerivedField
			type is Numeric size 21
			restricted
			return (instance count of AwardedEventReponsesForSupplierWithDiversityRel)

		TotalSourceIdEventBidWithDiversitySuccess is a DerivedField
			type is Percent size 6.1
			restricted
			return (TotalSourceIdEventAwardsWithDiversity/TotalSourceIdEventsBidWithDiversity)

		TotalSourceIdLinesBidWithDiversity is a DerivedField
			type is Decimal size 21
			restricted
			for each SupplierSourceIdForHistoryRel
				TotalSourceIdLinesBidWithDiversity += each.TotalSourceIdLinesBidWithDiversity
		TotalSourceIdAwardedLinesWithDiversity is a DerivedField
			type is Decimal size 21
			restricted
			for each SupplierSourceIdForHistoryRel
				TotalSourceIdAwardedLinesWithDiversity += each.TotalSourceIdAwardedLinesWithDiversity
		TotalSourceIdLineBidWithDiversitySuccess is a DerivedField
			type is Percent size 6.1
			restricted
			return (TotalSourceIdAwardedLinesWithDiversity/TotalSourceIdLinesBidWithDiversity)

		TotalSourceIdBidWithDiversity is a DerivedField
			type is Decimal size 21
			restricted
			for each SupplierSourceIdForHistoryRel
				TotalSourceIdBidWithDiversity += each.TotalSourceIdBidWithDiversity
		TotalSourceIdAwardedWithDiversity is a DerivedField
			type is Decimal size 21
			restricted
			for each SupplierSourceIdForHistoryRel
				TotalSourceIdAwardedWithDiversity += each.TotalSourceIdAwardedWithDiversity
		TotalSourceIdAmountBidWithDiversitySuccess is a DerivedField
			type is Percent size 6.1
			restricted
			return (TotalSourceIdAwardedWithDiversity / TotalSourceIdBidWithDiversity)

		TaxCertificationMessage is a MessageField
			restricted
			"TaxCertification"

		TaxCertificationLabel is a DerivedField
			type is Alpha 25
			restricted
			if (TaxIdGroup.TaxIdType entered)
				return TaxIdentificationTypeRel.TaxCertificationLabel
			else
				return TaxCertificationMessage

  		DerivedAppsValue                            is a DerivedField
			type is like PfiAppsValue
			return "SupplierAppr" + UniqueID

		UserActionRoutingAsHtml						is a DerivedField
			type is RichText
			return first PfiWorkunitRel.UserActionRoutingAsHtml

  		RequiredQuestionsCount is a DerivedField
			type is Numeric size 21
			restricted
			return (instance count of RequiredQuestions)

  		RequiredQuestionsConditionalCount is a DerivedField
			type is Numeric size 21
			restricted
			return (instance count of RequiredQuestionsConditional)

  		QuestionWithRequiredAttachmentsRelCount is a DerivedField
  			type is Numeric size 21
  			restricted
  			return (instance count of QuestionWithRequiredAttachmentsRel)
  		QuestionConditionalWithRequiredAttachmentsRelCount is a DerivedField
  			type is Numeric size 21
  			restricted
  			return (instance count of QuestionConditionalWithRequiredAttachmentsRel)

  		SupplierQuestionResponseRequiredRelCount is a DerivedField
  			type is Numeric size 21
  			restricted
  			return (instance count of SupplierQuestionResponseRequiredRel)
  		SupplierQuestionsSetResponseRequiredRelCount is a DerivedField
  			type is Numeric size 21
  			restricted
  			return (instance count of SupplierQuestionsSetResponseRequiredRel)

  		SupplierQuestionResponseWithRequiredAttachmentRelCount is a DerivedField
  			type is Numeric size 21
  			restricted
  			return (instance count of SupplierQuestionResponseWithRequiredAttachmentRel)
  		SupplierQuestionsSetResponseWithRequiredAttachmentRelCount is a DerivedField
  			type is Numeric size 21
  			restricted
  			return (instance count of SupplierQuestionsSetResponseWithRequiredAttachmentRel)

  		DateSupplierCreated is a DerivedField   
  			type is Date
  			restricted
  			for each this instance.audit log records
  				if (each.action = "create"
  				and each.actor  = "Anonymous")
  					return each.effective date

  		DateRegistered is a DerivedField
  			type is Date
  			for each this instance.audit log records
  				if (each.action = "create")
  					return each.effective date
				end for each

		RequiredQuestionLinkback is a MessageField
			restricted
			"<linkback(webapp is SupplyManagementSupplier navigation is SupplierUnansweredQuestions text is \"here\")>"

  		VendorMessage is a MessageField
  			restricted
  			"Vendor"

  		SupplierTypeMessage is a MessageField
  			restricted
  			"Supplier"

  		Type is a ConditionalField
  			type is Alpha size 10
  			if (Vendor entered)
  				VendorMessage
  			else
  				SupplierTypeMessage

  		YesMessage is a MessageField
  			restricted
  			"Yes"

  		NoMessage is a MessageField
  			restricted
  			"No"

  		DiversityExist is a ConditionalField
  			type is Text
  			if (DiversityRel exists)
	  			YesMessage
	  		else
	  			NoMessage

		NumberOfResponses is a ComputeField
			type is Numeric 4
			(instance count of NumberOfResponsesRel)

		NumberOfAncestors is a ComputeField
			type is Numeric 1
			restricted
			(instance count of Supplier ancestors)

		NumDuplicateSupplierTaxIds is a ComputeField
			type is Numeric 6
			restricted
			(instance count of TaxIdRel)

		NumDuplicateSupplierTaxIdsOnly is a ComputeField
			type is Numeric 6
			restricted
			(instance count of TaxIdOnlyRel)

		NumDuplicateSupplierVATTax is a ComputeField
			type is Numeric 6
			restricted
			(instance count of VATTaxRel)

		AdminEmailAddress is a StringField 
			type is EmailAddressField
			holds pii
			restricted
			SupplierGroup.AdminEmailAddress

		NotificationEmailAddress is a StringField 
			type is EmailAddressField
			holds pii
			restricted
			SupplierGroup.NotificationEmailAddress

		PrimaryContactEmail is a StringField 
			type is EmailAddressField
			holds pii
			restricted
			PrimaryContact.EmailAddress

		PrimaryContactUpperCaseName is a DerivedField
			type is AlphaUpper size 30
			restricted
			return PrimaryContact.MainContact.PresentationName

		UnreadSupplierMessages is a ComputeField
			type is Numeric 6
			(instance count of UnreadSupplierMessagesRel)

		DerivedContractsInSupplierNegotiationExist is a DerivedField
			type is Boolean
			if (SupplierGroup.SPDisablePortalContractManagement)
				return false
			else
				return (ContractsInSupplierNegotiationExist)

		PurchaseFromIndicator is a DerivedField
			type is Alpha size up to 20
			if (SupplierPurchaseFrom set exists)
				return "*"
			else
				return ""

		SupplierDisplayName is a StringField
			type is Alpha size 42
			Supplier
			" - "
			SupplierName

		SupplierNameID is a StringField
			type is Alpha size 42
			default label is "Supplier"
			SupplierName + " (" + Supplier + ")"

		NumberOfInvoices is a ComputeField
			type is Numeric 8
			restricted
			(instance count of NumberOfInvoicesRel)

		NumberOfOpenInvoices is a DerivedField
			type is Numeric 8
			restricted
			if (VendorExists
			and	!SupplierGroup.SPDisablePortalInvoices)
				return (instance count of NumberOfOpenInvoicesRel)
			else
				return 0

		NumberOfOverdueInvoices is a ComputeField
			type is Numeric 8
			restricted
			(instance count of NumberOfOverdueInvoicesRel)

		NumberOfPaidInvoices is a ComputeField
			type is Numeric 8
			restricted
			(instance count of NumberOfPaidInvoicesRel)

		NumberOfExceptionInvoices is a DerivedField
			type is Numeric 8
			restricted
			if (VendorExists
			and !SupplierGroup.SPDisablePortalInvoices)
				return (instance count of NumberOfExceptionInvoicesRel)
			else
				return 0

		DerivedExceptionInvoicesExist is a DerivedField
			type is Boolean
			if (VendorExists
			and !SupplierGroup.SPDisablePortalInvoices)
				return (ExceptionInvoicesExist)
			else
				return false

		NumberOfChargebackInvoices is a ComputeField
			type is Numeric 8
			restricted
			(instance count of NumberOfChargebackInvoicesRel)

		NumberOfReceipts is a DerivedField
			type is Numeric 8
			restricted
			return 0

		NumberOfReleasedReceipts is a DerivedField
			type is Numeric 8
			restricted
			return 0

		NumberOfClosedReceipts is a DerivedField
			type is Numeric 8
			restricted
			return 0

		NumberOfOpenPurchaseOrders is a DerivedField
			type is Numeric 8
			restricted
			return 0

		NumberOfOverdueShipments is a DerivedField
			type is Numeric 8
			restricted
			return 0

		NumberOfOpenPurchaseOrderLines is a DerivedField
			type is Numeric 8
			restricted
			return 0

		NumberOfShipmentsDueInNextWeek is a DerivedField
			type is Numeric 8
			restricted
			return 0

		NumberOfItems is a ComputeField
			type is Numeric 8
			restricted
			(instance count of NumberOfItemsRel)

		NumberOfItemsBelowReorderPoint is a DerivedField
			type is Numeric 8
			restricted
			if (VendorExists
			and	!SupplierGroup.SPDisablePortalItems)
				return (instance count of NumberOfItemsBelowReorderPointRel)
			else
				return 0

		DerivedItemsBelowReorderPointExist is a DerivedField
			type is Boolean
			if (VendorExists
			and	!SupplierGroup.SPDisablePortalItems)
				return (ItemsBelowReorderPointExist)
			else
				return false

		NumberOfExpiringSupplierCertificates is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of ExpiringCertificationRel)

		NumberOfExpiringDiversities is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of ExpiringDiversityRel)

		NumberOfDiversitiesNeedingDates is a ComputeField
			type is Numeric size 6
			(instance count of DiversitiesNeedingDatesRel)

		NumberOfUnsubmittedResponses is a ComputeField
			type is Numeric size 8
			restricted
			(instance count of NumberOfUnsubmittedResponsesRel)

		NumberOfUnsubmittedBestAndFinalResponses is a ComputeField
			type is Numeric size 8
			restricted
			(instance count of NumberOfUnsubmittedBestAndFinalResponsesRel)

		NumberOfUnsubmittedPricingResponses is a ComputeField
			type is Numeric size 8
			restricted
			(instance count of NumberOfUnsubmittedPricingResponsesRel)

		DerivedUnsubmittedResponsesExist is a DerivedField
			type is Boolean
			return (UnsubmittedResponsesExist)

		DerivedUnsubmittedBestAndFinalResponsesExist is a DerivedField
			type is Boolean
			return (UnsubmittedBestAndFinalResponsesExist)

		DerivedUnsubmittedPricingResponsesExist is a DerivedField
			type is Boolean
			return (UnsubmittedPricingResponsesExist)

		DerivedUnsubmittedPOInvoicesExist is a DerivedField
			type is Boolean
			if (VendorExists)
				return (UnsubmittedPOInvoicesExist)
			else
				return false

		DerivedUnsubmittedExpenseInvoicesExist is a DerivedField
			type is Boolean
			return (UnsubmittedExpenseInvoicesExist)

		ExpiringDiversitiesCount is a MessageField
			"ViewDiversityCodes(<NumberOfExpiringDiversities>)"

		ExpiringCount is a MessageField
			"ViewCertifications(<NumberOfExpiringSupplierCertificates>)"

		NumberOfConsignmentItems is a ComputeField
			type is Numeric 8
			restricted
			(instance count of NumberOfConsignmentItemsRel)

		NumberOfActiveContracts is a ComputeField
			type is Numeric 8
			restricted
			(instance count of NumberOfActiveContractsRel)

		NumberOfExpiringContracts is a DerivedField
			type is Numeric 8
			restricted
			if (SupplierGroup.SPDisablePortalContractManagement)
				return 0
			else
				return (instance count of NumberOfExpiringContractsRel)

		DerivedExpiringContractsExist is a DerivedField
			type is Boolean
			if (SupplierGroup.SPDisablePortalContractManagement)
				return false
			else
				return (ExpiringContractsExist)

		CurrentSupplierPerformanceScore is a ConditionalField
			type is Decimal size 3.2
			if (HasCurrentSupplierPerformanceEvaluation)
				first CurrentSupplierPerformanceEvaluationRel.TotalPerformanceScore
			else
				blank

		DerivedCurrentSupplierGroupPerformanceScoreEvaluationTemplate is a DerivedField
			type is Numeric size 8
			restricted
			return (first CurrentSupplierPerformanceScoreTemplateRel.PerformanceEvaluationTemplate)

		DerivedCurrentPerformanceEvaluationTemplate is a DerivedField
			type is Numeric size 8
			restricted
			return (first CurrentPerformanceEvaluationTemplateRel.PerformanceEvaluationTemplate)

		DerivedCurrentPerformanceScoreTemplate is a DerivedField
			type is Numeric size 8
			restricted
			return (first CurrentSupplierPerformanceScoreTemplateRel.PerformanceEvaluationTemplate)

		DoingBusinessAsUpper is a DerivedField
			type is AlphaUpper 30
			restricted
			return com.lawson.apps.procurement.base.StringUtils.convertToUpperCase(DoingBusinessAs)

		ExpiringDiversityMessageContents is a DerivedField
			type is Text
			restricted
			for each ExpiringDiversityRel
				ExpiringDiversityMessageContents = ExpiringDiversityMessageContents + each.PayablesDiversityCode.Description + " ; " + each.ExpirationDate + SupplierGroup.NewLine
			return ExpiringDiversityMessageContents

		ExpiringCertificationsMessageContents is a DerivedField
			type is Text
			restricted
			for each ExpiringCertificationRel
				ExpiringCertificationsMessageContents = ExpiringCertificationsMessageContents + each.SupplierCertification.PayablesCertificationCode.Description + " ; " + each.CertificationExpirationDate + SupplierGroup.NewLine
			return ExpiringCertificationsMessageContents

		MustAcceptTermsAndConditionsMessage is a MessageField
			restricted
			"MustAcceptTermsAndConditionsInOrderToContinue."

		DuplicateTaxIdMessage is a MessageField
			restricted
			"AnotherSupplierHasAlreadyRegisteredWithThisTaxId."

		DuplicateVATTaxMessage is a MessageField
			restricted
			"AnotherSupplierHasAlreadyRegisteredWithThisVATTaxInformation."

		VendorWithDuplicateTaxID is a DerivedField
			type is Alpha 42
			restricted
			return (first VendorTaxIdsRel.Vendor)

		VendorWithDuplicateTaxIDOnly is a DerivedField
			type is Alpha 42
			restricted
			return (first VendorTaxIdsOnlyRel.Vendor)

		VendorWithDuplicateVATTax is a DerivedField
			type is Alpha 42
			restricted
			return (first VendorVATTaxRel.Vendor)

		DuplicateTaxId1Message is a MessageField
			restricted
			"<NumDuplicateSupplierTaxIds>SuppliersFoundWithTheSameTaxId."

		DuplicateTaxId3Message is a MessageField
			restricted
			"<NumDuplicateSupplierTaxIdsOnly>SuppliersFoundWithTheSameTaxId."

		DuplicateTaxId2Message is a MessageField
			restricted
			"Supplier<first TaxIdRel.SupplierDisplayName>FoundWithTheSameTaxId."

		DuplicateTaxId4Message is a MessageField
			restricted
			"Supplier<first TaxIdOnlyRel.SupplierDisplayName>FoundWithTheSameTaxId."

		SupplierDuplicateTaxIdErrorMessage is a ConditionalField
			type is Alpha 250
			restricted
			if (NumDuplicateSupplierTaxIds > 1)
				DuplicateTaxId1Message
			else
			if (NumDuplicateSupplierTaxIdsOnly > 1)
				DuplicateTaxId3Message
			else
			if (TaxIdRel exists)
				DuplicateTaxId2Message
			else
				DuplicateTaxId4Message

		DuplicateVATTax1Message is a MessageField
			restricted
			"<NumDuplicateSupplierVATTax>SuppliersFoundWithTheSameVATTaxInformation."

		DuplicateVATTax2Message is a MessageField
			restricted
			"Supplier<first VATTaxRel.SupplierDisplayName>FoundWithTheSameVATTaxInformation."

		SupplierDuplicateVATTaxErrorMessage is a ConditionalField
			type is Alpha 250
			restricted
			if (NumDuplicateSupplierVATTax > 1)
				DuplicateVATTax1Message
			else
				DuplicateVATTax2Message

		MailingAddressCityStateZip is a StringField
			type is Alpha size 30
			MailingAddress.Municipality
			", "
			MailingAddress.StateProvince
			" "
			MailingAddress.PostalCode

		CityStateZIPDisplay is a DerivedField
			type is Text
			restricted
			initialize LocalText2

			if (MailingAddress.Municipality entered)
				LocalText2 += MailingAddress.Municipality
				if (MailingAddress.StateProvince entered
					or MailingAddress.PostalCode entered)
					LocalText2 += ", "

			if (MailingAddress.StateProvince entered
				and MailingAddress.PostalCode entered)
				LocalText2 += MailingAddress.StateProvince + " " + MailingAddress.PostalCode
			else
				LocalText2 += MailingAddress.StateProvince + MailingAddress.PostalCode
			return LocalText2

		FullAddressDisplay is a DerivedField
			type is Text
			default label is "VendorAddress"
			initialize LocalText

			if (MailingAddress.DeliveryAddress.AddressLine1 entered)
				LocalText += MailingAddress.DeliveryAddress.AddressLine1
				if (MailingAddress.DeliveryAddress.AddressLine2 entered
					or MailingAddress.DeliveryAddress.AddressLine3 entered
					or MailingAddress.DeliveryAddress.AddressLine4 entered
					or CityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (MailingAddress.DeliveryAddress.AddressLine2 entered)
				LocalText += MailingAddress.DeliveryAddress.AddressLine2
				if (MailingAddress.DeliveryAddress.AddressLine3 entered
					or MailingAddress.DeliveryAddress.AddressLine4 entered
					or CityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (MailingAddress.DeliveryAddress.AddressLine3 entered)
				LocalText += MailingAddress.DeliveryAddress.AddressLine3
				if (MailingAddress.DeliveryAddress.AddressLine4 entered
					or CityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (MailingAddress.DeliveryAddress.AddressLine4 entered)
				LocalText += MailingAddress.DeliveryAddress.AddressLine4
				if (CityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (CityStateZIPDisplayEntered)
				LocalText += CityStateZIPDisplay
			return LocalText

		RemitCityStateZIPDisplay is a DerivedField	
			type is Text
			restricted
			initialize LocalText2

			if (BillingAddress.Municipality entered)
				LocalText2 += BillingAddress.Municipality
				if (BillingAddress.StateProvince entered
					or BillingAddress.PostalCode entered)
					LocalText2 += ", "

			if (BillingAddress.StateProvince entered
				and BillingAddress.PostalCode entered)
				LocalText2 += BillingAddress.StateProvince + " " + BillingAddress.PostalCode
			else
				LocalText2 += BillingAddress.StateProvince + BillingAddress.PostalCode
			return LocalText2

		FullRemitDisplay is a DerivedField	
			type is Text
			default label is "VendorAddress"
			initialize LocalText

			if (BillingAddress.DeliveryAddress.AddressLine1 entered)
				LocalText += BillingAddress.DeliveryAddress.AddressLine1
				if (BillingAddress.DeliveryAddress.AddressLine2 entered
					or BillingAddress.DeliveryAddress.AddressLine3 entered
					or BillingAddress.DeliveryAddress.AddressLine4 entered
					or RemitCityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (BillingAddress.DeliveryAddress.AddressLine2 entered)
				LocalText += BillingAddress.DeliveryAddress.AddressLine2
				if (BillingAddress.DeliveryAddress.AddressLine3 entered
					or BillingAddress.DeliveryAddress.AddressLine4 entered
					or RemitCityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (BillingAddress.DeliveryAddress.AddressLine3 entered)
				LocalText += BillingAddress.DeliveryAddress.AddressLine3
				if (BillingAddress.DeliveryAddress.AddressLine4 entered
					or RemitCityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (BillingAddress.DeliveryAddress.AddressLine4 entered)
				LocalText += BillingAddress.DeliveryAddress.AddressLine4
				if (RemitCityStateZIPDisplayEntered)
					LocalText += SupplierGroup.NewLine

			if (RemitCityStateZIPDisplayEntered)
				LocalText += RemitCityStateZIPDisplay
			return LocalText

		BothTaxMessage is a MessageField
			"EitherTaxIDOrVATRegistrationNumberIsRequired*"

		TaxIdMessage is a MessageField
			"TaxID"

		VATMessage is a MessageField
			"VATRegistrationNumber"

		TaxIdMessageWithAsterisk is a MessageField
			"TaxID*"

		VATMessageWithAsterisk is a MessageField
			"VATRegistrationNumber*"

		DerivedTaxId is a DerivedField
			type is Alpha size up to 50
			if (SupplierGroup.TaxCodeDisplay = 0)
				return TaxIdMessage
			else
				return TaxIdMessageWithAsterisk

		DerivedVAT is a DerivedField
			type is Alpha size up to 50
			if (SupplierGroup.TaxCodeDisplay = 0)
				return VATMessage
			else
				return VATMessageWithAsterisk

		DiversityCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SupplierDiversityResponse set exists)
				return "(" + instance count of SupplierDiversityResponse set + ")"
			else
				return ""

		HasDiversityCodesMessage is a MessageField
			"DiversityCodes*"

		NoDiversityCodesMessage is a MessageField 
			"DiversityCodes"
		
		RegistrationDiversityLabel is a DerivedField 
			type is Alpha size 30 
			if (SupplierDiversityResponse set exists)
				return HasDiversityCodesMessage
			else 
				return NoDiversityCodesMessage

		HasCommodityCodesMessage is a MessageField
			"CommodityCodes*"

		NoCommodityCodesMessage is a MessageField 
			"CommodityCodes"
		
		RegistrationCommodityLabel is a DerivedField 
			type is Alpha size 30 
			if (HasCommodityCodes)
				return HasCommodityCodesMessage
			else 
				return NoCommodityCodesMessage		
		
		HasProxyMessage is a MessageField
			"ProxyNotifications*"

		NoProxyMessage is a MessageField 
			"ProxyNotifications"
		
		RegistrationProxyLabel is a DerivedField 
			type is Alpha size 30 
			if (SupplierContactProxyRel exists)
				return HasProxyMessage
			else 
				return NoProxyMessage		

		HasBankInformationMessage is a MessageField
			"BankInformation*"

		NoBankInformationMessage is a MessageField 
			"BankInformation"
		
		RegistrationBankInformationLabel is a DerivedField 
			type is Alpha size 30 
			if (HasBankInformation)
				return HasBankInformationMessage
			else 
				return NoBankInformationMessage	

		HasCertificationsMessage is a MessageField
			"Certifications*"

		NoCertificationsMessage is a MessageField 
			"Certifications"
		
		RegistrationCertificationsLabel is a DerivedField 
			type is Alpha size 30 
			if (CertificationsExist)
				return HasCertificationsMessage
			else 
				return NoCertificationsMessage		

		SupplierContactCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SupplierSourceId set exists)
				return "(" + instance count of SupplierSourceId set + ")"
			else
				return ""

		ContactCount is a ComputeField
			type is Numeric 2
			restricted
			(instance count of SupplierSourceId set)

		ActiveContactCount is a ComputeField	
			type is Numeric 2
			restricted 
			(instance count of SupplierSourceIdActiveRel)
		
		ActiveContactWithCommodityCodeCount is a ComputeField 
			type is Numeric 2 
			restricted 
			(instance count of SupplierSourceIdActiveWithCommodityRel)
		
		SupplierCommentCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SupplierComment set exists)
				return "(" + instance count of SupplierComment set + ")"
			else
				return ""

		SupplierCertificationCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (AllSupplierCertificationsRel exists)
				return "(" + instance count of AllSupplierCertificationsRel + ")"
			else
				return ""

		SupplierPerformanceCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SupplierPerformanceEvaluation set exists)
				return "(" + instance count of SupplierPerformanceEvaluation set + ")"
			else
				return ""

		VendormateApiKey is a DerivedField
			type is Alpha 15
			restricted
			return "9BFDFAC98C34999"

		VendormateTokenRequest is a StringField
			type is Text
			restricted
			"<VisionRequest><apiKey>"
			VendormateApiKey
			"</apiKey><username>"
			VendormateLogin
			"</username><password>"
			VendormatePassword
			"</password></VisionRequest>"

		VendormateDataRequest is a StringField
			type is Text
			restricted
			"<VisionRequest><companyId></companyId></VisionRequest>"



		DerivedNonDiverseTotalEventsBid is a DerivedField
			type is Numeric size 21
			return (sum NonDiverseSupplierRel.DerivedTotalEventsBid)

		DerivedNonDiverseTotalEventsAwarded is a DerivedField
			type is Numeric size 21
			return (sum NonDiverseSupplierRel.DerivedTotalEventsAwarded)

		DerivedEventsNonDiverseBidPercent is a ComputeField
			type is Percent size 6.2
			(DerivedNonDiverseTotalEventsAwarded/ DerivedNonDiverseTotalEventsBid)

		DerivedNonDiverseTotalEventLinesBid is a DerivedField
			type is Numeric size 6
			return (sum NonDiverseSupplierRel.DerivedTotalEventLinesBid)

		DerivedNonDiverseTotalEventLinesAwarded is a DerivedField
			type is Numeric size 6
			return (sum NonDiverseSupplierRel.DerivedTotalEventLinesAwarded)

		DerivedNonDiverseEventLinesBidPercent is a ComputeField
			type is Percent size 6.2
			(DerivedNonDiverseTotalEventLinesAwarded/ DerivedNonDiverseTotalEventLinesBid)

 		DerivedNonDiverseBidTotal is a DerivedField
			type is like InternationalAmount
			return (sum NonDiverseSupplierRel.DerivedBidTotal)

 		DerivedNonDiverseAwardedTotal is a DerivedField
			type is Decimal size 21.2
			return (sum NonDiverseSupplierRel.DerivedAwardedTotal)

		DerivedNonDiverseTotalBidPercent is a ComputeField
			type is Percent size 6.2
			(DerivedNonDiverseAwardedTotal/ DerivedNonDiverseBidTotal)

        PerformanceCount is a ComputeField
            type is Numeric size 2
            restricted
            (instance count of SupplierPerformanceEvaluation set)




		ConvertToLowerCase is a NativeField
			type is Alpha 250
			restricted

		LowerCaseEmailAddress is a DerivedField
			type is LoginName
			restricted
			LowerCaseEmailAddress = ConvertToLowerCase
			
		SupplierExtEntityGUID is a DerivedField  
			type is Alpha size 36                
			restricted
			default label is untranslatable
			return SupplierGroup.SupplierExtEntityGUID

		SupplierExtEntityEnabled is a DerivedField  
			type is Boolean                         
			restricted
			default label is untranslatable
			return SupplierGroup.SupplierExtEntityEnabled

		SupplyManagementSupplierService is a DerivedField
			type is Alpha 300
			restricted
			default label is untranslatable
			return stackconfig(config).SUPPLIER_SERVICE   //"FSM.IEFINAPP.SUPPLYMANAGEMENTSUPPLIER"





		DerivedNewLineMF is a DerivedField
			type is RichText
			restricted
			return "<br>"

		DerivedBlankField5 is a DerivedField
			type is Alpha 5
			default label is untranslatable
			return blank

		DerivedVerificationCodeRequired is a DerivedField
         	type is Boolean
			default label is untranslatable
			if (SupplierExtEntityEnabled)
				invoke GetExternalEntity ExternalUserExecutor
					resume on error
					assign result to JSONResponse 
					invoked.EntityId = SupplierExtEntityGUID
				TransientResponseStatus = JSONResponse select "$.responsestatus"
				if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
					return JSONResponse select "$.response.externalentity.enableuserverification"
				else
					return false
			else
				return false	


		DerivedVerificationCodeRequiredRegistration is a DerivedField
         	type is Alpha 250
			default label is untranslatable
			if (RequiredRegistrationFieldsEntered
			or  RequiredExistingRegistrationFieldsEntered)
				if (!TransientUserRegistered)


					FieldToConvert	= EmailAddress
					EmailAddress	= LowerCaseEmailAddress		
					
					invoke RegisterUser ExternalUserExecutor
						resume on error
						assign result to JSONResponse
						invoked.EntityId				= SupplierExtEntityGUID
						invoked.IdentifierId 			= "PrimaryEmail"
						invoked.IdentifierValue 		= EmailAddress
						invoked.Password 				= RegistrationPassword
						invoked.EnableUserVerification	= true
						invoked.FirstName				= GivenName
						invoked.LastName				= FamilyName

					TransientResponseStatus = JSONResponse select "$.responsestatus"
					if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
						TransientSendVerificationCode	= true
						TransientUserRegistered			= true
						TransientStringHolder			= blank
						TransientSingleJSONNode			= JSONResponse select "$.response.user"
						if (TransientSingleJSONNode = "")
							TransientNextAction			= JSONResponse select "$.response.nextaction.action"
							TransientUserVerificationId	= JSONResponse select "$.response.nextaction.userverificationid"
							TransientUserIdentity		= JSONResponse select "$.response.nextaction.useridentity"
					else
						TransientSingleJSONNode			= JSONResponse select "$.errorlist[0].code"
						TransientStringHolder			= JSONResponse select "$.errorlist[0].languagetext"
						TransientErrorOccurred			= true
						TransientSendVerificationCode	= false
			return DerivedVerificationCodeRequiredRegistration


		DerivedResendVerificationCode is a DerivedField
         	type is Alpha 250
			default label is untranslatable
			if (TransientUserIdentity entered
			and TransientUserVerificationId entered
			and !TransientUserVerified
			and !TransientVerificationCodeResent)
				invoke ResendVerification ExternalUserExecutor
					resume on error
					assign result to JSONResponse
					invoked.EntityId			= SupplierExtEntityGUID
					invoked.UserIdentity 		= TransientUserIdentity
					invoked.VerificationId 		= TransientUserVerificationId

				TransientResponseStatus = JSONResponse select "$.responsestatus"
				if (com.lawson.apps.security.base.Security_ActionBase.isEqualIgnoreCase(TransientResponseStatus, "Success"))
					TransientResendVerificationCode = true
					TransientVerificationCodeResent	= true
				else
					TransientSingleJSONNode	= JSONResponse select "$.errorlist[0].code"
					TransientStringHolder	= JSONResponse select "$.errorlist[0].languagetext"
					TransientErrorOccurred	= true
			return DerivedResendVerificationCode


		DerivedEnteredEmailMatchesSessionKey is a DerivedField
         	type is Boolean
			default label is untranslatable
			if (EmailAddress entered
			and DerivedSupplierFromSessionKey entered
			and DerivedSupplierSourceIdFromSessionKey entered)
				if (SupplierSourceIdInSessionKeyExists)
					FieldToConvert	= EmailAddress
					EmailAddress	= LowerCaseEmailAddress		
					if (EmailAddress = SupplierSourceIdInSessionKeyRel.EmailAddress)
						GivenName						= SupplierSourceIdInSessionKeyRel.MainContact.GivenName
						FamilyName						= SupplierSourceIdInSessionKeyRel.MainContact.FamilyName
						return true
					else	
						TransientStringHolder			= "EnteredEmailAddressDoesNotMatchWhatIsOnFileInTheSystem"
						return false
				else
					TransientStringHolder				= "CustomerContactRecordDoesNotExist"
					return false
			return false


		DerivedSupplierGroupFromSessionKey is a DerivedField
			type is AlphaUpper 5
			default label is untranslatable
			return (session.key.SupplierGroup)
				
		DerivedSupplierFromSessionKey is a DerivedField
			type is Numeric 9
			default label is untranslatable
			return (session.key.Supplier)
				
		DerivedSupplierSourceIdFromSessionKey is a DerivedField
			type is Numeric 4
			default label is untranslatable
			return (session.key.SupplierSourceId)

		DerivedExternalEntityRegistrationTitle is a DerivedField
			type is Alpha 30
			default label is untranslatable
			if (IsAnonymousAndCompleteAccountRegistration)
				return DerivedMessageForCompletingRegistration
			else
				return DerivedMessageForNormalRegistration
				
		DerivedMessageForCompletingRegistration is a MessageField
			restricted
			"CompleteYourRegistration"
			
		DerivedMessageForNormalRegistration is a MessageField
			restricted
			"SupplierRegistration"


	Conditions

		OpenPurchaseOrders
			restricted
			when (OpenPurchaseOrdersRel exists)

		OpenPurchaseOrderLines
			restricted
			when (OpenPurchaseOrderLinesRel exists)

		SomeActivityInPastMonths
			restricted
			when (InvoicesAfterActivityDateRel exists
			or    PurchaseOrdersAfterActivityDateRel exists
			or    ContractsAfterActivityDateRel exists)

		HasSupplierRequisitions
			restricted
			when (SupplierRequisitionRel exists
			and   Vendor entered)
		
		TemplatesExist
			restricted
			when (ProcurementTemplateRel exists
			and   Vendor entered)
		
		HasPOsOrLines
			restricted
			when (OpenPurchaseOrders
			or    OpenPurchaseOrderLines)

		BothTaxCodes
			restricted
			when (SupplierGroup.TaxCodeDisplay = 0)

		CanDisplayBankInformation
			restricted
			when (SupplierGroup.AllowBankInformation
			and   SupplierExists)

		CanViewBankInformation		
			restricted
			when (SupplierGroup.AllowBankInformation)

		ViewerCanViewBankInformation
			restricted
			when (ViewerRel exists
			and   ViewSensitiveDataForViewerRel exists)

		MultipleContact
			restricted
			when (ContactCount > 1)

		SingleContact
			restricted
			when (ContactCount = 1)
		
		BuyerCanViewBankInformation		
			restricted
			when (BuyerRel exists
			and   ViewSensitiveDataForBuyerRel exists)

		PayablesSpecialistCanViewBankInformation		
			restricted
			when (PayablesSpecialistRel exists
			and   ViewSensitiveDataForPayablesSpecialistRel exists)

		SourcingManagerCanViewBankInformation		
			restricted
			when (SourcingManagerRel exists
			and   ViewSensitiveDataForSourcingManagerRel exists)

		ContractManagerCanViewBankInformation		
			restricted
			when (ContractManagerRel exists
			and   ViewSensitiveDataForContractManagerRel exists)

		SupplyManagementAdministratorCanViewBankInformation		
			restricted
			when (SupplyManagementAdministratorRel exists
			and   ViewSensitiveDataForSupplyManagementAdministratorRel exists)

		ApplicationAdministratorCanViewBankInformation
			restricted
			when (ApplicationAdministratorRel exists)

		TaxIDTypeEntered		
			restricted
			when (TaxIdGroup.TaxIdType entered)

		TaxIDEntered		
			restricted
			when (TaxIdGroup.TaxId entered)

		HasActiveContracts
			restricted
			when (VendorChangeActiveContractsRel exists)

		TaxCertificationExists
			restricted
			when (TaxCertification entered)

		IsDiversityCertified
			restricted
			when (DiversityCodeRel exists)
		IsVendor
			restricted
			when (Vendor entered)
		HasWorkunit
			restricted
			when (PfiWorkunitRel exists)

		ElectronicTransactions
			restricted
			when (TransientVendorClass.BankTransactionCode.PaymentOutputOption.ElectronicFile)

		UsesConditionalQuestions
			restricted
			when (SupplierGroup.UseConditionalQuestions)

		NoConditionalQuestionsAndQuestionsExists
			restricted
			when (SupplierGroup.UseConditionalQuestions = false
			and   SupplierGroup.QuestionsExist)

		ConditionalQuestionsAndQuestionsExist
			restricted
			when (SupplierGroup.UseConditionalQuestions
			and   Supplier.QuestionsExist)

		AnsweredRequiredQuestions
			restricted
			when ((all RequiredQuestions.SupplierGroupQuestion = any SupplierQuestionResponse set.SupplierGroupQuestion
			and    SupplierGroup.UseConditionalQuestions = false)
			or    (all RequiredQuestionsConditional.SupplierQuestions = any SupplierQuestionsSetResponse set.SupplierQuestions
			and    SupplierGroup.UseConditionalQuestions))
		AttachedRequiredQuestionAttachments
			restricted
			when ((all QuestionWithRequiredAttachmentsRel.SupplierGroupQuestion = any SupplierQuestionsSetResponseWithAttachmentRel.SupplierQuestions
			and    SupplierGroup.UseConditionalQuestions = false)
			or    (all QuestionConditionalWithRequiredAttachmentsRel.SupplierQuestions = any SupplierQuestionsSetResponse set.SupplierQuestions
			and    SupplierGroup.UseConditionalQuestions))
		SomeRequiredQuestionsOrAttachmentsNotAnswered
			when (!RequiredQuestionCountSameAsAnswerCount
			or    !RequiredAttachmentCountSameAsAnswerCount)
		SomeRequiredQuestionsOrAttachmentsNotAnsweredNoConditional
			when ((SupplierGroup.SupplierGroupQuestionHaveNoConditionalQuestions) 
			and   (!RequiredQuestionCountSameAsAnswerCount
			or    !RequiredAttachmentCountSameAsAnswerCount))
		NeedCommoditiesOrQuestionsAnswered 
			restricted 
			when (SomeRequiredQuestionsOrAttachmentsNotAnswered
			or    PrimaryContact.IncompleteCommodities)
		RequiredQuestionCountSameAsAnswerCount
			restricted
			when ((RequiredQuestionsCount = SupplierQuestionResponseRequiredRelCount
			and    SupplierGroup.UseConditionalQuestions = false)
			or    (RequiredQuestionsConditionalCount = SupplierQuestionsSetResponseRequiredRelCount
			and    SupplierGroup.UseConditionalQuestions))
		RequiredAttachmentCountSameAsAnswerCount
			restricted
			when ((QuestionWithRequiredAttachmentsRelCount = SupplierQuestionResponseWithRequiredAttachmentRelCount
			and    SupplierGroup.UseConditionalQuestions = false)
			or    (QuestionConditionalWithRequiredAttachmentsRelCount = SupplierQuestionsSetResponseWithRequiredAttachmentRelCount
			and    SupplierGroup.UseConditionalQuestions))
		RequiredQuestionCountDifferentFromAnswerCount
			restricted
			when ((SupplierGroup.UseConditionalQuestions = false
			and    RequiredQuestionsCount != SupplierQuestionResponseRequiredRelCount)
			or    (SupplierGroup.UseConditionalQuestions
			and    RequiredQuestionsConditionalCount != SupplierQuestionsSetResponseRequiredRelCount))
		RequiredAttachmentCountDifferentFromAnswerCount
			restricted
			when ((SupplierGroup.UseConditionalQuestions = false
			and	   QuestionWithRequiredAttachmentsRelCount != SupplierQuestionResponseWithRequiredAttachmentRelCount)
			or    (SupplierGroup.UseConditionalQuestions
			and	   QuestionConditionalWithRequiredAttachmentsRelCount != SupplierQuestionsSetResponseWithRequiredAttachmentRelCount))
		RequiredQuestionsNotAnswered 
			restricted 
			when (RequiredQuestionCountDifferentFromAnswerCount
			or    RequiredAttachmentCountDifferentFromAnswerCount)

		MissingContactCommodities
			restricted 
			when (SupplierGroup.RequireCommodityRegistration
			and   ActiveContactCount != ActiveContactWithCommodityCodeCount)
		FullyRegisteredForList
			restricted
			when (CommodityCodesEntered
			and   RequiredQuestionCountSameAsAnswerCount
			and   RequiredAttachmentCountSameAsAnswerCount)
		NotFullyRegistered
			restricted
			when (MissingContactCommodities
			or    RequiredQuestionsNotAnswered)
		FullyRegistered
			when (RequiredQuestionCountSameAsAnswerCount
			and   RequiredAttachmentCountSameAsAnswerCount
			and   CommodityCodesEntered)
		RequiredQuestionsAnswered
			restricted
			when (RequiredQuestionCountSameAsAnswerCount
			and   RequiredAttachmentCountSameAsAnswerCount)
		QuestionsExist
			restricted
			when (SupplierQuestions set exists
			and   SupplierGroup.UseConditionalQuestions)
		CreatedInTheLastMonth
			when (DateSupplierCreated > (current corporate date - 30))
		CommodityCodesEntered
			restricted
			when (!SupplierGroup.RequireCommodityRegistration
			or   (SupplierGroup.RequireCommodityRegistration
			and   !SupplierSourceIDMissingCommodityCodeRel exists))
		CommodityCodesNotEntered
			when   (SupplierGroup.RequireCommodityRegistration
			and     SupplierSourceIDMissingCommodityCodeRel exists)
		IsUpdatable
			restricted
			when (SupplierStatus.NeedsValidation
			or 	  SupplierStatus.Validated)
		HasReceipts
			restricted
			when (PurchaseOrderReceiptRel exists)
		HasReturns
			restricted
			when (VendorReturnRel exists)
		DiversityCodesExist
			when (SupplierDiversityResponse set exists)
		CommentsExist
			restricted
			when (SupplierComment set exists)
		CanCreateVendor
			restricted
			when (!Vendor entered
			and   SupplierStatus.Validated)
		CertificationsExist
			restricted
			when (AllSupplierCertificationsRel exists)
		HasCertifications
			restricted
			when (SupplierCertification set exists)
		HasQuestions
			restricted
			when (Questions exists)
		HasBankInformation
			restricted
			when (BankInformationGroup.BankInformationGroupEntered)
		HasNoBankInformation
			when (!BankInformationGroup.BankInformationGroupEntered)
		SupplierContactCertsExist
			restricted
			when (SupplierLocationCertificationRel exists)
		ActiveCertificationsExist
			restricted
			when (ActiveSupplierCertRel exists)
		CanCreateVendorCertification
			restricted
			when (!VendorCertificationRel exists)
		NeedsValidationStill
			when (SupplierStatus.NeedsValidation)
		ExpiringCertifications
			restricted
			when (ExpiringCertificationRel exists)
		EmailCertificationToSupplierValid
			restricted
			when (ExpiringCertifications
			and	  PrimaryContact.ReceiveEmailNotification)
		ExpiringDiversities
			restricted
			when (ExpiringDiversityRel exists)
		DiversitiesNeedingDates
			restricted
			when (DiversitiesNeedingDatesRel exists)
 		EmailDiversityToSupplierValid
			restricted
			when (ExpiringDiversities
			and	  PrimaryContact.ReceiveEmailNotification)
		Rejected
			restricted
			when (SupplierStatus.Rejected)
		PortalVendor
			restricted
 			when ((SupplierGroup 	= actor.agent(SupplierSourceId).SupplierGroup
 			and    Supplier	   		= actor.agent(SupplierSourceId).Supplier))
 		VendorExists
 			restricted
 			when (Vendor entered)
		IsPrimary
			restricted
			when (actor.agent(SupplierSourceId).PrimaryContact)
		CanChangeBillingAndMailingAddress
			restricted
			when (IsPrimary
			and	  SameAsAddressAbove)
		CanChangeSeparateAddresses
			restricted
			when (IsPrimary
			and	  !SameAsAddressAbove)
		HasPicture
			restricted
			when (Picture.File entered)
		HasParent
			restricted
			when (ParentSupplier entered)
		HasContracts
			restricted
			when (SupplierContractRel exists)
		HasItems
			restricted
			when (NumberOfItemsRel exists)
		HasInvoices
			restricted
			when (NumberOfInvoicesRel exists)
		HasInvoicesOrChecks
			restricted
			when (HasInvoices
			or    HasChecks)
		HasCurrentSupplierPerformanceEvaluation
			restricted
			when (CurrentSupplierPerformanceEvaluationRel exists)
		CurrentTemplateExists
			restricted
			when (CurrentPerformanceEvaluationTemplateRel exists)
		EvaluationUsingCurrentTemplateExists
			restricted
			when (AnySupplierPerformanceEvaluationRel exists)
		AllowEvaluationCreation
			restricted
			when (CurrentTemplateExists
			and	  !EvaluationUsingCurrentTemplateExists)
		GlnEntered
			restricted
			when (GlobalLocationNumber entered)
		GlnChanged
			restricted
			when (GlobalLocationNumber != old GlobalLocationNumber)
		VendorChanged
			restricted
			when (Vendor != old Vendor)
		ActivateSupplierValid
			restricted
			when (!Active
			and	  !Rejected)
		ExceptionInvoicesExist
			restricted
			when (NumberOfExceptionInvoicesRel exists)
		ItemsBelowReorderPointExist
			restricted
			when (NumberOfItemsBelowReorderPointRel exists)
		UnsubmittedResponsesExist
			restricted
			when (NumberOfUnsubmittedResponsesRel exists)
		UnsubmittedBestAndFinalResponsesExist
			restricted
			when (NumberOfUnsubmittedBestAndFinalResponsesRel exists)
		UnsubmittedPricingResponsesExist
			restricted
			when (NumberOfUnsubmittedPricingResponsesRel exists)
		UnsubmittedPOInvoicesExist
			restricted
			when (NumberOfUnsubmittedInvoicesRel exists)
		UnsubmittedExpenseInvoicesExist
			restricted
			when (NumberOfUnsubmittedExpenseInvoicesRel exists)
		SupplierHasUnsubmittedInvoices
			restricted
			when (UnsubmittedSupplierCreatedInvoicesRel exists)
		ExpiringContractsExist
			restricted
			when (NumberOfExpiringContractsRel exists)
		HasSupplierProcessedInvoices
			restricted
			when (SupplierProcessedInvoicesRel exists)
		HasSupplierProcessedExpenseInvoices
			restricted
			when (SupplierProcessedExpenseInvoicesRel exists)
		ContractsInSupplierNegotiationExist
			restricted
			when (ContractsInSupplierNegotiationRel exists)
		HasChild
			restricted
			when (Supplier children exist)
		SupplierExists
			restricted
			when (Supplier entered)
		SupplierNonDiverse
			restricted
			when (NonDiverseSupplierRel exist)
		NonDiverseSupplierRelExists
			restricted
			when (NonDiverseSupplierRel exists)
		DiversityExists
			when (DiversityRel exists)
		HasEventToCreate
			restricted
			when (EventToCreate > 0)
		HasCommodityCodes
			restricted
			when (SupplierCommodityCodeRel exists)
		HasChecks
			restricted
			when (TotalNumberOfChecksRel exists)
		ActiveFlagMismatch
			when (Vendor entered
			and  ((Active and !ExistingVendor.IsPoAddActive)
			or   (!Active and ExistingVendor.IsPoAddActive)))

		IsAnonymous
			restricted
			when (actor has role "SupplierAnonymous_ST")

		BypassRuleForTheseFiles
			restricted
			when (parentcontext.name	!= "SupplierContactMessage"
			or  parentcontext.name 		!= "AnonymizeSupplierData"
			or  parentcontext.name 		!= "Supplier"
			or  parentcontext.name 		!= "PurgeAuditLogSupplierData"
			or  parentcontext.name      != "AnonymizeLog")

		CanUpdateBankAccountNumber
			restricted
			when (IsUpdatable
			and   BankInformationGroup.BankAccountNumberEntered)

		ContactCanEnterInvoices
			restricted
			when (ContactCanEnterInvoicesRel exists)

		CanUpdateCreditCardNumber
			restricted
			when (IsUpdatable
			and   BankInformationGroup.CreditCardNumberEntered)

		TaxCertificationEntered
			restricted
			when (TaxCertification entered)

		VATEntered
			restricted
			when (VATRegistrationNumber entered)

		NonVATTaxEntered
			restricted
			when (TaxIdGroup entered)

		RequireTaxId
			restricted
			when (TaxIdGroup.TaxIdType entered
				or TaxIdGroup.TaxId entered
				or SupplierGroup.TaxCodeDisplay = 1
				or (SupplierGroup.TaxCodeDisplay = 0
				and !VATRegistrationCountry entered
				and !VATRegistrationNumber entered))

		RequireVAT
			restricted
			when (VATRegistrationCountry entered
				or VATRegistrationNumber entered
				or SupplierGroup.TaxCodeDisplay = 2
				or (SupplierGroup.TaxCodeDisplay = 0
				and !TaxIdGroup.TaxIdType entered
				and !TaxIdGroup.TaxId entered))

		AnonymizeLogAnonymizeRelExists
			restricted
			when (first AnonymizeLogAnonymizeRel exists)

		AnonymizeLogPurgeRelExists
			restricted
			when (first AnonymizeLogPurgeRel exists)

		HasSubmittedResponses
			restricted
			when (SubmittedResponsesRel exists)

		CityStateZIPDisplayEntered	
			restricted
			when(MailingAddress.Municipality entered
				or MailingAddress.StateProvince entered
				or MailingAddress.PostalCode entered)

		RemitCityStateZIPDisplayEntered	
			restricted
			when(BillingAddress.Municipality entered
				or BillingAddress.StateProvince entered
				or BillingAddress.PostalCode entered)


		SupplierSourceIdByEmailExists
			default label is untranslatable
			when (SupplierSourceIdEmailExistsRel exists)

		SupplierSourceIdInSessionKeyExists
			restricted
			when (SupplierSourceIdInSessionKeyRel exists)

		DisplayForVerification
			default label is untranslatable
			when (DerivedVerificationCodeRequired)

		EmailAddressEntered
			default label is untranslatable
			when (EmailAddress entered)

		EmailAddressNotEntered
			default label is untranslatable
			when (EmailAddress not entered)
			
		ConfirmEmailAddressEntered
			default label is untranslatable
			when (!SupplierGroup.RequireEmailConfirmation
			or   (SupplierGroup.RequireEmailConfirmation
			and   ConfirmEmailAddress entered))
			
		ConfirmEmailAddressNotEntered
			default label is untranslatable
			when (SupplierGroup.RequireEmailConfirmation
			and   ConfirmEmailAddress not entered)
			
		EmailAddressesDoNotMatch
			default label is untranslatable
			when (EmailAddress entered
			and   ConfirmEmailAddress entered
			and   EmailAddress != ConfirmEmailAddress)

		EmailAddressesMatch
			default label is untranslatable
			when (!EmailAddressesDoNotMatch)

		RegistrationPasswordEntered
			default label is untranslatable
			when (RegistrationPassword entered)
			
		RegistrationPasswordNotEntered
			default label is untranslatable
			when (RegistrationPassword not entered)

		RegistrationConfirmPasswordEntered
			default label is untranslatable
			when (RegistrationConfirmPassword entered)
			
		RegistrationConfirmPasswordNotEntered
			default label is untranslatable
			when (RegistrationConfirmPassword not entered)

		RegistrationPasswordsDoNotMatch
			default label is untranslatable
			when (RegistrationPassword entered
			and   RegistrationConfirmPassword entered
			and   RegistrationPassword != RegistrationConfirmPassword)

		RegistrationPasswordsMatch
			default label is untranslatable
			when (!RegistrationPasswordsDoNotMatch)

		GivenNameEntered
			default label is untranslatable
			when (GivenName entered)
			
		GivenNameNotEntered
			default label is untranslatable
			when (GivenName not entered)

		FamilyNameEntered
			default label is untranslatable
			when (FamilyName entered)
			
		FamilyNameNotEntered
			default label is untranslatable
			when (FamilyName not entered)

		TransientTelephoneEntered
			default label is untranslatable
			when (TransientTelephone entered)

		TransientTelephoneNotEntered
			default label is untranslatable
			when (TransientTelephone not entered)
						
		SupplierNameEntered
			default label is untranslatable
			when (SupplierName entered)
		
		SupplierNameNotEntered
			default label is untranslatable
			when (SupplierName not entered)
			
		MailingAddressCounrtyEntered
			default label is untranslatable
			when (MailingAddress.Country entered)
			
		MailingAddressCountryNotEntered
			default label is untranslatable
			when (MailingAddress.Country not entered)
			
		MailingAddressEntered
			default label is untranslatable
			when (MailingAddress entered)

		MailingAddressNotEntered
			default label is untranslatable
			when (MailingAddress not entered)
			
		BillingAddressEntered
			default label is untranslatable
			when (SupplierGroup.QuickRegistration
			or   (!SupplierGroup.QuickRegistration
			and  (SameAsAddressAbove entered
			or    BillingAddress entered)))
			
		BillingAddressNotEntered
			default label is untranslatable
			when (!SupplierGroup.QuickRegistration
			and  (SameAsAddressAbove not entered
			and   BillingAddress not entered))

		AcceptTermsEntered
			default label is untranslatable
			when (AcceptTerms entered)
			
		AcceptTermsNotEntered
			default label is untranslatable
			when (AcceptTerms not entered)

		RequiredRegistrationFieldsNotEntered
			restricted
			when (EmailAddressNotEntered
			or    ConfirmEmailAddressNotEntered
			or    EmailAddressesDoNotMatch
			or	  RegistrationPasswordNotEntered
			or    RegistrationConfirmPasswordNotEntered
			or    RegistrationPasswordsDoNotMatch
			or    GivenNameNotEntered
			or    FamilyNameNotEntered
			or    TransientTelephoneNotEntered
			or    SupplierNameNotEntered
			or    MailingAddressCountryNotEntered
			or    MailingAddressNotEntered
			or    BillingAddressNotEntered
			or    AcceptTermsNotEntered)
			
		RequiredRegistrationFieldsEntered
			restricted
			when (EmailAddressEntered
			and   ConfirmEmailAddressEntered
			and   EmailAddressesMatch  
			and	  RegistrationPasswordEntered
			and   RegistrationConfirmPasswordEntered
			and   RegistrationPasswordsMatch  
			and   GivenNameEntered
			and   FamilyNameEntered
			and   TransientTelephoneEntered
			and   SupplierNameEntered
			and   MailingAddressCounrtyEntered
			and   MailingAddressEntered
			and   BillingAddressEntered
			and   AcceptTermsEntered)

		RequiredExistingRegistrationFieldsNotEntered
			restricted
			when (EmailAddressNotEntered
			or	  RegistrationPasswordNotEntered
			or    RegistrationConfirmPasswordNotEntered
			or    RegistrationPasswordsDoNotMatch
			or    !DerivedEnteredEmailMatchesSessionKey)
			
		RequiredExistingRegistrationFieldsEntered
			restricted
			when (EmailAddressEntered
			and	  RegistrationPasswordEntered
			and   RegistrationConfirmPasswordEntered
			and   !RegistrationPasswordsDoNotMatch
			and   DerivedEnteredEmailMatchesSessionKey)

		EmailAddressChanged
			default label is untranslatable
			when (old EmailAddress entered
			and   EmailAddress changed)

		RegistrationPasswordChanged
			default label is untranslatable
			when (old RegistrationPassword entered
			and   RegistrationPassword changed)

		GivenNameChanged
			default label is untranslatable
			when (old GivenName entered
			and   GivenName changed)

		FamilyNameChanged
			default label is untranslatable
			when (old FamilyName entered
			and   FamilyName changed)

		RegisterUserInputFieldsChanged
			default label is untranslatable
			when (EmailAddressChanged
			or    RegistrationPasswordChanged
			or    GivenNameChanged
			or    FamilyNameChanged)

		IsAnonymousAndXref
			restricted
			when (IsAnonymous
			and   !SupplierExtEntityEnabled)

		IsAnonymousAndExternalEntity
			restricted
			when (IsAnonymous
			and   SupplierExtEntityEnabled)

		NeedToCompleteFullRegistration
			restricted
			when (!SupplierSourceIdInSessionKeyExists)
			
		IsAnonymousAndFullRegistration
			restricted
			when (IsAnonymous
			and   NeedToCompleteFullRegistration)
			
		IsAnonymousAndCompleteAccountRegistration
			restricted
			when (IsAnonymous
			and   SupplierSourceIdInSessionKeyExists)
			
		ShowCredentialingPanelAndIsAnonymous
			restricted
			when (SupplierGroup.ShowCredentialingPanel
			and   IsAnonymousAndFullRegistration)

		ShowBankInformationPanel
			restricted
			when (SupplierGroup.ShowBankInformationPanel
			and   NeedToCompleteFullRegistration
			and   !IsAnonymous)

		ShowDiversityCodesPanel
			restricted
			when (SupplierGroup.ShowDiversityCodesPanel
			and   NeedToCompleteFullRegistration
			and   !IsAnonymous)

		ShowQuestionsPanel
			restricted
			when (SupplierGroup.ShowQuestionsPanel
			and   NeedToCompleteFullRegistration
			and   !IsAnonymous)

		ShowCommoditySelectWithTree
			restricted
			when (SupplierGroup.CommoditySelectWithTree
			and   NeedToCompleteFullRegistration
			and   !IsAnonymous)

		ShowCommoditySelectLevelOne
			restricted
			when (SupplierGroup.CommoditySelectLevelOne
			and   NeedToCompleteFullRegistration
			and   !IsAnonymous)

		ShowCertificationsPanel
			restricted
			when (SupplierGroup.ShowCertificationsPanel
			and   NeedToCompleteFullRegistration
			and   !IsAnonymous)

		ShowProxyNotificationsPanel
			restricted
			when (SupplierGroup.ShowProxyNotificationsPanel
			and   NeedToCompleteFullRegistration
			and   !IsAnonymous)
		SupplierHasCapitatedContract 
			restricted 
			when (PortalSupplierCapitatedContractRel exists)

	Relations
  		SupplierSourceIdForHistoryRel is a SupplierSourceId set
  			Instance Selection
  				where (related.HasSourcingEventLineResponsesForResponseHistory)

		BuyerRel								
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor					= actor
				related.ActorRole.Role			= "Buyer_ST"

		ViewerRel								
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor					= actor
				related.ActorRole.Role			= "SupplyManagementViewer_ST"

		PayablesSpecialistRel					
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor					= actor
				related.ActorRole.Role			= "PayablesSpecialist_ST"

		SupplierRequisitionRel
			one-to-many relation to Requisition
			Field Mapping uses ByVendor
				related.Vendor                  = Vendor
			Instance Selection
				where (related.CreatedBySupplier)
		
		ProcurementTemplateRel
			one-to-many relation to ProcurementTemplate
			Field Mapping uses symbolic key
				related.ProcurementGroup       = SupplierGroup
			Instance Selection
				where (related.ParticipantExistsForContextVendor)
		
		SourcingManagerRel						
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor					= actor
				related.ActorRole.Role			= "SourcingManager_ST"

		ContractManagerRel						
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor					= actor
				related.ActorRole.Role			= "ContractManager_ST"

		SupplyManagementViewerRel		
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor					= actor
				related.ActorRole.Role			= "SupplyManagementViewer_ST"

		SupplyManagementAdministratorRel		
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor					= actor
				related.ActorRole.Role			= "SupplyManagementAdministrator_ST"

		ApplicationAdministratorRel		
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor					= actor
				related.ActorRole.Role			= "ApplicationAdministrator_ST"

		ViewSensitiveDataForBuyerRel			
			one-to-one relation to RoleSecurityClass
			Field Mapping uses symbolic key
				related.Role					= "Buyer_ST"
				related.DataArea				= parentcontext.dataarea
				related.SecurityClass			= "IEFINViewSensitiveData_ST"

		ViewSensitiveDataForPayablesSpecialistRel	
			one-to-one relation to RoleSecurityClass
			Field Mapping uses symbolic key
				related.Role					= "PayablesSpecialist_ST"
				related.DataArea				= parentcontext.dataarea
				related.SecurityClass			= "IEFINViewSensitiveData_ST"

		ViewSensitiveDataForSourcingManagerRel	
			one-to-one relation to RoleSecurityClass
			Field Mapping uses symbolic key
				related.Role					= "SourcingManager_ST"
				related.DataArea				= parentcontext.dataarea
				related.SecurityClass			= "IEFINViewSensitiveData_ST"


		ViewSensitiveDataForContractManagerRel	
			one-to-one relation to RoleSecurityClass
			Field Mapping uses symbolic key
				related.Role					= "ContractManager_ST"
				related.DataArea				= parentcontext.dataarea
				related.SecurityClass			= "IEFINViewSensitiveData_ST"

		ViewSensitiveDataForViewerRel	
			one-to-one relation to RoleSecurityClass
			Field Mapping uses symbolic key
				related.Role					= "SupplyManagementViewer_ST"
				related.DataArea				= parentcontext.dataarea
				related.SecurityClass			= "IEFINViewSensitiveData_ST"

		ViewSensitiveDataForSupplyManagementAdministratorRel	
			one-to-one relation to RoleSecurityClass
			Field Mapping uses symbolic key
				related.Role					= "SupplyManagementAdministrator_ST"
				related.DataArea				= parentcontext.dataarea
				related.SecurityClass			= "IEFINViewSensitiveData_ST"

	  	AnonymizeLogAnonymizeRel
			one-to-many relation to AnonymizeLog
			Field Mapping uses BySupplier
				related.FinanceEnterpriseGroup	= SupplierGroup.FinanceEnterpriseGroup
				related.SupplierGroup			= SupplierGroup
				related.Supplier				= Supplier
			Instance Selection
				where (related.Status.Anonymized)

		AnonymizeLogPurgeRel
			one-to-many relation to AnonymizeLog
			Field Mapping uses BySupplier
				related.FinanceEnterpriseGroup	= SupplierGroup.FinanceEnterpriseGroup
				related.SupplierGroup			= SupplierGroup
				related.Supplier				= Supplier
			Instance Selection
				where (related.Status.AuditLogPurged)

		SupplierContactProxyRel
			one-to-many relation to SupplierContactProxy
			Field Mapping uses part of key
				related.SupplierGroup	= SupplierGroup
				related.Supplier        = Supplier

		TaxIdentificationTypeRel
			one-to-one relation to TaxIdentificationType
			Field Mapping uses symbolic key
				related.TaxIdentificationType  = TaxIdGroup.TaxIdType

	  	CountryBankInformationRel
			one-to-many relation to CountryBankInformation
			Field Mapping uses ByCountry
				related.Country          = LocalBankCountry

		DefaultCountryBankInformationRel
			one-to-many relation to CountryBankInformation
			Field Mapping uses ByCountry
				related.Country          = blank

	  	DiversityCodeRel
			one-to-many relation to SupplierDiversityResponse
			delete cascades
			Field Mapping uses BySupplier
				related.SupplierGroup				= SupplierGroup
				related.Supplier					= Supplier

		PayablesDiversityCodeSearchRel is a SupplierDiversityResponse set
			Instance Selection
				where (related.PayablesDiversityCode = PayablesDiversityCode)

		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "SUPPLIER"
				related.AppsValue   = DerivedAppsValue

		EventResponsesForSupplierRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	= SupplierGroup
				related.NotifiedSupplier.Supplier		= Supplier
			Instance Selection
				where (related.HasEventBidResponseLines
				and    related.SourcingEvent.Status.Closed)

		AwardedEventResponsesForSupplierRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	= SupplierGroup
				related.NotifiedSupplier.Supplier		= Supplier
			Instance Selection
				where (related.HasAwardedEventBidResponseLines
				and    related.SourcingEvent.Status.Closed)

		EventReponsesForSupplierRel   
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	= SupplierGroup
				related.NotifiedSupplier.Supplier		= Supplier

		AwardedEventReponsesForSupplierRel  
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	= SupplierGroup
				related.NotifiedSupplier.Supplier		= Supplier

		EventReponsesForSupplierWithDiversityRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	= SupplierGroup
				related.NotifiedSupplier.Supplier		= Supplier
			Instance Selection
				where (related.HasEventBidResponseLinesWithDiversity
				and (related.SourcingEvent = SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent
				or SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent not entered))

		AwardedEventReponsesForSupplierWithDiversityRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	= SupplierGroup
				related.NotifiedSupplier.Supplier		= Supplier
			Instance Selection
				where (related.HasAwardedEventBidResponseLinesWithDiversity
				and (related.SourcingEvent = SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent
				or SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent not entered))

  		ParentSupplierRel
  			one-to-one relation to Supplier
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
				related.Supplier			= ParentSupplier

  		OldParentSupplierRel
  			one-to-one relation to Supplier
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
				related.Supplier			= old ParentSupplier

		VATTaxRel
			one-to-many relation to Supplier
			Field Mapping uses VATTaxSet
				related.VATRegistrationCountry      = VATRegistrationCountry
				related.VATRegistrationNumber       = VATRegistrationNumber
				related.SupplierGroup               = SupplierGroup
			Instance Selection
				where (related.Supplier 	!= Supplier)

		LocalVATTaxRel
			one-to-many relation to Supplier
			Field Mapping uses VATTaxSet
				related.VATRegistrationCountry      = LocalVATCountry
				related.VATRegistrationNumber       = LocalVATNumber
				related.SupplierGroup               = SupplierGroup
			Instance Selection
				where (related.Supplier 	!= Supplier)

		TaxIdRel
			one-to-many relation to Supplier
			Field Mapping uses TaxIdSet
				related.TaxIdGroup.TaxIdType 		= TaxIdGroup.TaxIdType
				related.TaxIdGroup.TaxId	 		= TaxIdGroup.TaxId
				related.SupplierGroup               = SupplierGroup
			Instance Selection
				where (related.Supplier 	!= Supplier)

		TaxIdOnlyRel
			one-to-many relation to Supplier
			Field Mapping uses TaxIDOnly
				related.TaxIdGroup.TaxId	 		= TaxIdGroup.TaxId
				related.SupplierGroup               = SupplierGroup
			Instance Selection
				where (related.Supplier 	!= Supplier)

		LocalTaxIdRel
			one-to-many relation to Supplier
			Field Mapping uses TaxIdSet
				related.TaxIdGroup.TaxIdType 		= LocalTaxIdentificationType
				related.TaxIdGroup.TaxId	 		= LocalTaxIdGroup.TaxId
			Instance Selection
				where (related.SupplierGroup = SupplierGroup
				and	   related.Supplier 	!= Supplier)

		LocalTaxIdOnlyRel
			one-to-many relation to Supplier
			Field Mapping uses TaxIDOnly
				related.TaxIdGroup.TaxId	 		= LocalTaxIdGroup.TaxId
				related.SupplierGroup 				= SupplierGroup
			Instance Selection
				where (related.Supplier 	!= Supplier)

		VendorTaxIdsRel
			one-to-many relation to Vendor
			Field Mapping uses ByTaxIds
				related.TaxIDType                   = TaxIdGroup.TaxIdType
				related.TaxID	 					= TaxIdGroup.TaxId
				related.VendorGroup                 = SupplierGroup
			Instance Selection
				where (related.Vendor	  != Vendor)

		VendorTaxIdsOnlyRel
			one-to-many relation to Vendor
			Field Mapping uses ByTaxIdsOnly
				related.TaxID	 					= TaxIdGroup.TaxId
				related.VendorGroup                 = SupplierGroup
			Instance Selection
				where (related.Vendor	   != Vendor)

		VendorVATTaxRel
			one-to-many relation to Vendor
			Field Mapping uses ByVATTax
				related.VATRegistrationCountry	= VATRegistrationCountry
				related.VATRegistrationNumber   = VATRegistrationNumber
				related.VendorGroup             = SupplierGroup
			Instance Selection
				where (related.Vendor	  != Vendor)

		GlobalLocationNumberRel
			one-to-many relation to GlobalLocationNumber
			Field Mapping uses symbolic key
				related.ItemGroup			 = SupplierGroup
				related.GlobalLocationNumber = GlobalLocationNumber

		ActiveSupplierQuestions is a SupplierQuestions set
			Instance Selection
				where (related.Active)
		ActiveSupplierQuestionsRel
			one-to-many relation to SupplierQuestions
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
				related.Supplier			= Supplier
			Instance Selection
				where (related.Active)
		RequiredQuestionsConditional
			one-to-many relation to SupplierQuestions
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
				related.Supplier			= Supplier
			Instance Selection
				where (related.ResponseRequired
				and    related.Active
				and    related.OnlyRequiredForFuture < DateRegistered)

		RequiredQuestions
			one-to-many relation to SupplierGroupQuestion
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
			Instance Selection
				where (related.ResponseRequired
				and    related.Active
				and    related.OnlyRequiredForFuture < DateRegistered)

		QuestionWithRequiredAttachmentsRel
			one-to-many relation to SupplierGroupQuestion
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
			Instance Selection
				where (related.AlwaysRequireResponseAttachment
				and    related.Active
				and    related.OnlyRequiredForFuture < DateRegistered)

		QuestionConditionalWithRequiredAttachmentsRel
			one-to-many relation to SupplierQuestions
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
				related.Supplier			= Supplier
			Instance Selection
				where (related.AlwaysRequireResponseAttachment
				and    related.Active
				and    related.OnlyRequiredForFuture < DateRegistered)

		SupplierGroupQuestionByDisplayOrderRel
			one-to-many relation to SupplierGroupQuestion
			Field Mapping uses ByDisplayOrder
				related.SupplierGroup   = SupplierGroup
			Instance Selection
				where (related.Active)
		SupplierGroupQuestionValueRel
			one-to-many relation to SupplierGroupQuestionValue
			Field Mapping uses ByDisplayOrder
				related.SupplierGroup   		= SupplierGroup
				related.SupplierGroupQuestion	= NewQuestion.SupplierGroupQuestion
		PrimaryContact
			one-to-one relation to SupplierSourceId
			Field Mapping uses IsPrimaryContact
				related.SupplierGroup		= SupplierGroup
				related.Supplier			= Supplier

		DiversityRel is a SupplierDiversityResponse set

		Questions is a SupplierGroupQuestion set

		SupplierQuestionResponseRels is a SupplierQuestionResponse set

		SupplierQuestionResponseRequiredRel
			one-to-many relation to SupplierQuestionResponse
			Field Mapping uses part of key
				related.SupplierGroup	= SupplierGroup
				related.Supplier		= Supplier
			Instance Selection
				where (related.FromRequiredQuestion 
				and    related.SupplierGroupQuestion.Active
				and    related.SupplierGroupQuestion.OnlyRequiredForFuture < DateRegistered)

		SupplierQuestionResponseWithAttachmentRel
			one-to-many relation to SupplierQuestionResponse
			Field Mapping uses part of key
				related.SupplierGroup	= SupplierGroup
				related.Supplier		= Supplier
			Instance Selection
				where (related.Attachment entered
				and    related.SupplierGroupQuestion.Active
				and    related.SupplierGroupQuestion.OnlyRequiredForFuture < DateRegistered)

		SupplierQuestionResponseWithRequiredAttachmentRel
			one-to-many relation to SupplierQuestionResponse
			Field Mapping uses part of key
				related.SupplierGroup	= SupplierGroup
				related.Supplier		= Supplier
			Instance Selection
				where (related.Attachment entered
				and    related.SupplierGroupQuestion.AlwaysRequireResponseAttachment
				and    related.SupplierGroupQuestion.Active
				and    related.SupplierGroupQuestion.OnlyRequiredForFuture < DateRegistered)

		SupplierQuestionsSetResponseRels is a SupplierQuestionsSetResponse set

		SupplierQuestionsSetResponseRequiredRel
			one-to-many relation to SupplierQuestionsSetResponse
			Field Mapping uses part of key
				related.SupplierGroup	= SupplierGroup
				related.Supplier		= Supplier
			Instance Selection
				where (related.FromRequiredQuestion
				and    related.SupplierQuestions.Active)

		SupplierQuestionsSetResponseWithAttachmentRel
			one-to-many relation to SupplierQuestionsSetResponse
			Field Mapping uses part of key
				related.SupplierGroup	= SupplierGroup
				related.Supplier		= Supplier
			Instance Selection
				where (related.Attachment entered
				and    related.SupplierQuestions.Active
				and    related.SupplierQuestions.OnlyRequiredForFuture < DateRegistered)

		SupplierQuestionsSetResponseWithRequiredAttachmentRel
			one-to-many relation to SupplierQuestionsSetResponse
			Field Mapping uses part of key
				related.SupplierGroup	= SupplierGroup
				related.Supplier		= Supplier
			Instance Selection
				where (related.Attachment entered
				and    related.SupplierQuestions.AlwaysRequireResponseAttachment
				and    related.SupplierQuestions.Active
				and    related.SupplierQuestions.OnlyRequiredForFuture < DateRegistered)

		SupplierSourceIdRel is a SupplierSourceId set

		ContactCanEnterInvoicesRel is a SupplierSourceId set
			Instance Selection
				where (related.CanEnterInvoices)

		MigrationSupplierSourceIdRel
			one-to-many relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup       = LocalSupplierGroup
				related.Supplier            = LocalSupplier

		ExistingVendor
			one-to-one relation to Vendor
			Field Mapping uses symbolic key
				related.VendorGroup			= SupplierGroup
				related.Vendor				= Vendor

 		VendorGroupRel
 			one-to-one relation to VendorGroup
 			Field Mapping uses symbolic key
 				related.VendorGroup         = SupplierGroup

		PurchasingVendorRel
			one-to-one relation to PurchasingVendor
			Field Mapping uses symbolic key
				related.VendorGroup			= SupplierGroup
				related.Vendor				= Vendor

		SupplierEffectiveDatesNotEntered is a SupplierDiversityResponse set
			Instance Selection
				where (!related.EffectiveDate entered)

		SupplierExpirationDatesNotEntered is a SupplierDiversityResponse set
			Instance Selection
				where (!related.ExpirationDate entered)

		VendorCertificationRel
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup         = SupplierGroup
				related.Vendor              = Vendor
			Instance Selection
				where (related.VendorCertification.VendorLocation !entered)

		VendorLocationCertificationRel
			one-to-many relation to VendorCertification
			Field Mapping uses symbolic key
				related.VendorGroup         = SupplierGroup
				related.Vendor              = Vendor
			Instance Selection
				where (related.VendorCertification.VendorLocation entered)

		SupplierCertificationDatesNotEntered is a SupplierCertification set
			Instance Selection
				where (!related.SupplierCertification.CertificationEffectiveDate entered)

		SupplierCertificationRel is a SupplierCertification set
			Instance Selection
				where (related.SupplierSourceId = 0)

		AllSupplierCertificationsRel is a SupplierCertification set

		CommodityCodeCertificationsRel
			one-to-many relation to SupplierCertification
			Field Mapping uses symbolic key
				related.SupplierGroup      = SupplierGroup
				related.Supplier           = Supplier
			Instance Selection
				where (related.CommodityCode entered)

		ExpiringCertificationRel is a SupplierCertification set
			Instance Selection
				where ((related.ExpirationDateRedAlert
				or     related.ExpirationDateYellowAlert)
				and   (related.Active))

		ExpiringDiversityRel is a SupplierDiversityResponse set
			Instance Selection
				where (related.ExpirationDateRedAlert
				or     related.ExpirationDateYellowAlert)

		DiversitiesNeedingDatesRel is a SupplierDiversityResponse set
			Instance Selection
				where (related.EffectiveDateNotEnteredAndRequired
				or     !related.ExpirationDateEntered)

		SupplierLocationCertificationRel is a SupplierCertification set 
			Instance Selection
				where (related.SupplierSourceId !=0
				and    related.CommodityCode !entered)

		PayablesDiversityCodeRel
			one-to-many relation to PayablesDiversityCode
			Field Mapping uses symbolic key
				related.VendorGroup          = SupplierGroup

		VendorDiversityRel
			one-to-many relation to VendorDiversity
			Field Mapping uses ByDateDescending
				related.VendorGroup 		= SupplierGroup
				related.Vendor	 	        = Vendor
			Instance Selection
				where (related.VendorDiversity.VendorLocation !entered)

		SupplierDiversityResponseRel
			one-to-many relation to SupplierDiversityResponse
			Field Mapping uses BySupplier
				related.SupplierGroup		= SupplierGroup
				related.Supplier			= Supplier

		VendorChangeActiveContractsRel
			one-to-many relation to Contract
			delete restricted
			Field Mapping uses BySupplier
				related.ContractGroup           = SupplierGroup
				related.Supplier	 	        = Supplier
			Instance Selection
				where (related.ActiveContract)

		VendorChangeContractPurchaseFromsRel
			one-to-many relation to Contract
			delete restricted
			Field Mapping uses OpenBySupplier
				related.ContractGroup           = SupplierGroup
				related.Supplier	 	        = Supplier
			Instance Selection
				where (related.HasPurchaseFromInformation)

		SupplierContractRel
			one-to-many relation to Contract
			delete restricted
			Field Mapping uses BySupplier
				related.ContractGroup           = SupplierGroup
				related.Supplier	 	        = Supplier

		SupplierOpenContractRel
			one-to-many relation to Contract
			Field Mapping uses OpenBySupplier
				related.ContractGroup           = SupplierGroup
				related.Supplier	 	        = Supplier

		GPOSupplierOpenContractRel
			one-to-many relation to Contract
			Field Mapping uses OpenByGPOSupplier
				related.ContractGroup           = SupplierGroup
				related.GPOSupplier	 	        = Supplier

		SupplierSourceIDMissingCommodityCodeRel is a SupplierSourceId set
			Instance Selection
				where (!related.CommodityCodesExist
				and		related.Active)

		SupplierSourceIdMismatch is a SupplierSourceId set
			Instance Selection
				where (related.ContactLocationMismatch)

		SupplierSourceIdActiveRel is a SupplierSourceId set
			Instance Selection
				where (related.Active)

		SupplierSourceIdActiveWithCommodityRel is a SupplierSourceId set
			Instance Selection
				where (related.Active
				and    related.CommodityCodesExist)		
		
		SupplierSourceIdInactiveRel is a SupplierSourceId set
			Instance Selection
				where (!related.Active)

		ActiveSupplierCertRel is a SupplierCertification set
			Instance Selection
				where (related.SupplierSourceId = 0
				and    related.Active)

		UnreadSupplierMessagesRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
				related.Supplier 			= Supplier
				related.SupplierSourceId 	= actor.agent(SupplierSourceId).SupplierSourceId
			Instance Selection
				where (related.Status.Unread
				and	   related.ReleaseStatus.Released)

		NumberOfInvoicesRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
 				related.Vendor					   = Vendor
 			Instance Selection
 				where (related.Company.VendorGroup = SupplierGroup)

		NumberOfPaidInvoicesRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
 				related.Vendor					   = Vendor
			Instance Selection
  				where (related.PaymentsExist
  				and    related.Company.VendorGroup = SupplierGroup)

		NumberOfOpenInvoicesRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
 				related.Vendor					   = Vendor
			Instance Selection
  				where (related.IsOpenInvoice
  				and    related.Company.VendorGroup = SupplierGroup)

		NumberOfOverdueInvoicesRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
 				related.Vendor					   = Vendor
			Instance Selection
  				where (related.IsPastDue
  				and    related.Company.VendorGroup = SupplierGroup)

		NumberOfExceptionInvoicesRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
 				related.Vendor					   = Vendor
			Instance Selection
				where (related.ExceptionInvoice
				and    related.Company.VendorGroup = SupplierGroup)

		NumberOfChargebackInvoicesRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
				related.Vendor				       = Vendor
			Instance Selection
				where (related.IsChargeback
				and    related.Company.VendorGroup = SupplierGroup)

		TotalNumberOfChecksRel
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses Set8
				related.CashManagementGroup	= SupplierGroup.BusinessGroup.FinanceEnterpriseGroup
				related.VendorGroup 		= SupplierGroup
				related.PaidVendor			= Vendor
			Instance Selection
	 			where (related.Status  = 2
	 			or     related.Status  = 15
	 			or     related.Status  = 16)

		SupplierGroupPortalContactRel
			one-to-many relation to SupplierGroupPortalContacts
			Field Mapping uses symbolic key
				related.SupplierGroup           = LocalSupplierGroup
			Instance Selection
				where (related.DefaultMessageDialogContact)

		SupplierGroupPortalContactsRel
			one-to-many relation to SupplierGroupPortalContacts
			Field Mapping uses ByEmployee
				related.Contact                 = LocalContact
				related.SupplierGroup           = LocalSupplierGroup

		NumberOfUnsubmittedResponsesRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses UnsubmittedBySupplier
 				related.NotifiedSupplier.SupplierGroup 		= SupplierGroup
 				related.NotifiedSupplier.Supplier			= Supplier
 				related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
 			Instance Selection
  				where (related.UnsubmittedResponseForCurrentContactNotPricingNotBestAndFinal)

		NumberOfUnsubmittedBestAndFinalResponsesRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses UnsubmittedBySupplier
 				related.NotifiedSupplier.SupplierGroup 		= SupplierGroup
 				related.NotifiedSupplier.Supplier			= Supplier
 				related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
 			Instance Selection
  				where (related.UnsubmittedBestAndFinalResponseForCurrentContact)

		NumberOfUnsubmittedPricingResponsesRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses UnsubmittedBySupplier
 				related.NotifiedSupplier.SupplierGroup 		= SupplierGroup
 				related.NotifiedSupplier.Supplier			= Supplier
 				related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
 			Instance Selection
  				where (related.UnsubmittedPricingResponseForCurrentContact)

		SubmittedResponsesRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
 				related.NotifiedSupplier.SupplierGroup 		= SupplierGroup
 				related.NotifiedSupplier.Supplier			= Supplier
 			Instance Selection
 				where (related.Status.Submitted)

		NumberOfResponsesRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
 				related.NotifiedSupplier.SupplierGroup 		= SupplierGroup
 				related.NotifiedSupplier.Supplier			= Supplier

		EventResponsesNoBidRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
 				related.NotifiedSupplier.SupplierGroup 		= SupplierGroup
 				related.NotifiedSupplier.Supplier			= Supplier
 			Instance Selection
 				where (related.SourcingEvent.Status.Closed
 				and    related.NoBid)

		EventResponsesIncludingNoBid
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplier
 				related.NotifiedSupplier.SupplierGroup 		= SupplierGroup
 				related.NotifiedSupplier.Supplier			= Supplier
 			Instance Selection
 				where (related.SourcingEvent.Status.Closed)

		EventLineResponsesIncludingNoBid
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses BySupplier
 				related.NotifiedSupplier.SupplierGroup 		= SupplierGroup
 				related.NotifiedSupplier.Supplier			= Supplier
 			Instance Selection
 				where (related.SourcingEvent.Status.Closed)

		NumberOfUnsubmittedInvoicesRel   
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendor
 				related.Vendor 		= Vendor
 			Instance Selection
  				where (related.CreateBySupplierMatchToPO
  				and    related.CreateBySupplierInvoiceCanMaintain)

  		NumberOfUnsubmittedExpenseInvoicesRel
  			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendor
 				related.Vendor 	= Vendor
 			Instance Selection
  				where (!related.CreateBySupplierMatchToPO
  				and    related.CreateBySupplierInvoiceCanMaintain)

  		SupplierProcessedInvoicesRel
  			one-to-many relation to PayablesInvoice
  			Field Mapping uses ByVendor
  				related.Vendor     = Vendor
  			Instance Selection
  				where (related.CreateBySupplierMatchToPO
  				and    related.CreateBySupplierInvoiceSubmitted)

		UnsubmittedSupplierCreatedInvoicesRel
 			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendor
 				related.Vendor 	= Vendor
 			Instance Selection
  				where (related.CreateBySupplierInvoiceCanMaintain)

  		SupplierProcessedExpenseInvoicesRel
  			one-to-many relation to PayablesInvoice
  			Field Mapping uses ByVendor
  				related.Vendor        = Vendor
  			Instance Selection
  				where (!related.CreateBySupplierMatchToPO
  				and    related.CreateBySupplierInvoiceSubmitted)

		CurrentVendorAddress
			one-to-one relation to VendorAddress
			Field Mapping uses symbolic key
				related.VendorGroup					= SupplierGroup
				related.Vendor 						= Vendor
				related.VendorLocation 				= blank
				related.VendorContact.VendorContactCode = blank
				related.VendorContact.ContactLevel      = blank

		NumberOfItemsRel
			one-to-many relation to ItemReplenishmentSource
			Field Mapping uses Set3
				related.Vendor	= Vendor
			Instance Selection
				where (related.HasVendor)

		NumberOfConsignmentItemsRel
			one-to-many relation to ItemReplenishmentSource
			Field Mapping uses Set3
				related.Vendor	= Vendor
			Instance Selection
				where (related.HasVendor
				and	   related.ConsignmentItem)

		NumberOfItemsBelowReorderPointRel
			one-to-many relation to ItemReplenishmentSource
			Field Mapping uses Set3
				related.Vendor	= Vendor
			Instance Selection
				where (related.HasVendor
				and	   related.ItemStockOnHandBelowReorderPoint)

		SupplierCommodityCodeRel
			one-to-many relation to SupplierCommodityCode
			Field Mapping uses part of key
				related.SupplierGroup = SupplierGroup
				related.Supplier	  = Supplier

		SupplierCommodityCodeForACodeRel
       		one-to-many relation to SupplierCommodityCode
            Field Mapping uses part of key
            	related.SupplierGroup	= LocalSupplierGroup
            	related.Supplier        = LocalSupplier
            Instance Selection
            	where (LocalCommodityCode within related.CommodityCode)

		NumberOfActiveContractsRel
			one-to-many relation to Contract
			Field Mapping uses BySupplier
				related.ContractGroup           = SupplierGroup
				related.Supplier	 	        = Supplier
			Instance Selection
				where (related.ActiveContractBySupplier)

		NumberOfExpiringContractsRel
			one-to-many relation to Contract
			Field Mapping uses BySupplier
				related.ContractGroup           = SupplierGroup
				related.Supplier	 	        = Supplier
			Instance Selection
				where (related.ExpiringContractsBySupplier)

		ContractsInSupplierNegotiationRel
			one-to-many relation to Contract
			Field Mapping uses BySupplier
				related.ContractGroup           = SupplierGroup
				related.Supplier	 	        = Supplier
			Instance Selection
				where (related.ContractsInSupplierNegotiation)

		CompletedSupplierPerformanceEvaluationsRel
			one-to-many relation to SupplierPerformanceEvaluation
			Field Mapping uses symbolic key
				related.SupplierGroup 	= SupplierGroup
				related.Supplier		= Supplier
			Instance Selection
				where (related.IsEvaluationComplete	= true)

		AllSupplierPerformanceEvaluationsRel
			one-to-many relation to SupplierPerformanceEvaluation
			delete cascades
			Field Mapping uses symbolic key
				related.SupplierGroup 	= SupplierGroup
				related.Supplier		= Supplier

		CurrentSupplierPerformanceEvaluationRel
			one-to-many relation to SupplierPerformanceEvaluation
			Field Mapping uses ByTemplate
				related.SupplierGroup 					= SupplierGroup
				related.Supplier						= Supplier
				related.PerformanceEvaluationTemplate	= DerivedCurrentSupplierGroupPerformanceScoreEvaluationTemplate
				related.Contract = blank

		CurrentSupplierPerformanceScoreTemplateRel
			one-to-many relation to PerformanceEvaluationTemplate
			Field Mapping uses symbolic key
				related.SupplierGroup 					= SupplierGroup
			Instance Selection
				where (related.CurrentTemplateForScores	= true)

		CurrentPerformanceEvaluationTemplateRel
  			one-to-many relation to PerformanceEvaluationTemplate
			Field Mapping uses symbolic key
				related.SupplierGroup					= SupplierGroup
			Instance Selection
				where (related.CurrentTemplateForEvaluations = true)

		AnySupplierPerformanceEvaluationRel
  			one-to-many relation to SupplierPerformanceEvaluation
			Field Mapping uses symbolic key
				related.SupplierGroup					= SupplierGroup
				related.Supplier						= Supplier
				related.Contract						= blank
				related.PerformanceEvaluationTemplate	= DerivedCurrentPerformanceEvaluationTemplate

		PerformanceEvaluationTemplateRel is a PerformanceEvaluationTemplate set

		SupplierVendorMismatchSupplierGroupRel
			one-to-many relation to SupplierVendorMismatch
			Field Mapping uses symbolic key
				related.SupplierGroup	= SupplierGroup

		SupplierVendorMismatchSupplierGroupNoDetailRel
			one-to-many relation to SupplierVendorMismatch
			Field Mapping uses symbolic key
				related.SupplierGroup	= SupplierGroup
			Instance Selection
				where (related.NoDetailExists)

		SupplierVendorMismatchRel
			one-to-one relation to SupplierVendorMismatch
			Field Mapping uses symbolic key
				related.SupplierGroup	= SupplierGroup
				related.Supplier		= Supplier

		LocalSupplierVendorMismatchRel
			one-to-one relation to SupplierVendorMismatch
			Field Mapping uses symbolic key
				related.SupplierGroup	= LocalSupplierGroup
				related.Supplier		= LocalSupplier

		SupplierGroupExtensionRel
			one-to-one relation to SupplierGroupExtension
			Field Mapping uses symbolic key
				related.SupplierGroup   = SupplierGroup

		VendorAndSupplierRel
			one-to-many relation to VendorAndSupplier
			Field Mapping uses BySupplier
				related.VendorGroup   = SupplierGroup
				related.Supplier      = Supplier

		PurchaseOrderReceiptRel
			one-to-many relation to PurchaseOrderReceipt
			Field Mapping uses ByVendor
				related.Vendor        = Vendor
			Instance Selection
				where (related.Company.ProcurementGroup = SupplierGroup)

		VendorReturnRel
			one-to-many relation to VendorReturn
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Vendor = Vendor)

		InvoicesAfterActivityDateRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses ByVendorInvoice
				related.Vendor        = LocalVendor
 			Instance Selection
 				where (related.Company.VendorGroup = SupplierGroup
				and    related.InvoiceDate >= ActivityDate)

		PortalSupplierCapitatedContractRel 
			one-to-many relation to Contract
			delete restricted
			Field Mapping uses BySupplier
				related.ContractGroup           = actor.agent(SupplierSourceId).SupplierGroup
				related.Supplier	 	        = actor.agent(SupplierSourceId).Supplier
			Instance Selection
				where (related.CapitatedContract)
		ContractsAfterActivityDateRel
			one-to-many relation to Contract
			delete restricted
			Field Mapping uses BySupplier
				related.ContractGroup           = LocalSupplierGroup
				related.Supplier	 	        = LocalSupplier
			Instance Selection
				where (related.EffectiveDate >= ActivityDate)

		PurchaseOrdersAfterActivityDateRel
			one-to-many relation to PurchaseOrder
			Field Mapping uses ByVendorBeforeCompany
				related.Vendor        = LocalVendor
			Instance Selection
				where (related.PurchaseOrderDate >= ActivityDate
				and    related.Company.ProcurementGroup   = LocalSupplierGroup)

		OpenPurchaseOrdersRel
			one-to-many relation to PurchaseOrder
			Field Mapping uses ByVendorBeforeCompany
				related.Vendor        = Vendor
			Instance Selection
				where (related.OpenOrdersByVendorForDrill
				and    related.Company.ProcurementGroup   = SupplierGroup)

		OpenPurchaseOrderLinesRel
			one-to-many relation to PurchaseOrderLine
			Field Mapping uses ByVendor
				related.Vendor        = Vendor
			Instance Selection
				where (related.IsOpenForReceivingForASupplier
				and    related.Company.ProcurementGroup   = SupplierGroup)

		NonDiverseSupplierRel
			one-to-many relation to SourcingEventNotification
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup	= SupplierGroup
				related.NotifiedSupplier.Supplier		= Supplier
			Instance Selection
				where (related.AwardHistoryListNotEmpty)

		ClosedSupplierNotificationsRel
			one-to-many relation to SourcingEventNotification
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup 	  = SupplierGroup
				related.NotifiedSupplier.Supplier	   	  = Supplier
			Instance Selection
				where (related.SourcingEvent.Status.Closed)

		ContactWithNoLocation is a SupplierSourceId set
			Instance Selection
				where (related.VendorLocation !entered
				and    related.PrimaryContact = false)

		PrimaryContactWithNoLocation is a SupplierSourceId set
			Instance Selection
				where (related.VendorLocation !entered
				and    related.PrimaryContact = true)

		EventToCompanyRel
			one-to-many relation to SourcingEvent
			Field Mapping uses ByEvent
				related.SourcingEvent                   = EventToCreate


		SupplierSourceIdEmailExistsRel
			one-to-many relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
			Instance Selection
				where (related.EmailAddress = EmailAddress)

		SupplierSourceIdForRegistrationRel
			one-to-one relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup		= SupplierGroup
				related.Supplier			= LocalSupplier
				related.SupplierSourceId	= LocalSupplierSourceId

		SupplierSourceIdInSessionKeyRel
			one-to-one relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup		= DerivedSupplierGroupFromSessionKey
				related.Supplier			= DerivedSupplierFromSessionKey
				related.SupplierSourceId	= DerivedSupplierSourceIdFromSessionKey

		CommodityCodeRel
			one-to-many relation to CommodityCode
			Field Mapping uses symbolic key
				related.ItemGroup = SupplierGroup

	Sets
		TaxIdSet
			indexed
			Sort Order
				TaxIdGroup.TaxIdType
				TaxIdGroup.TaxId
				SupplierGroup
				Supplier

		TaxIDOnly
			Sort Order
				TaxIdGroup.TaxId
				SupplierGroup
				Supplier

		VATTaxSet
			Sort Order
				VATRegistrationCountry
				VATRegistrationNumber
				SupplierGroup
				Supplier

		BySupplierName
			indexed
			Sort Order
				SupplierName
				SupplierGroup
				Supplier

		ByVendor
			Sort Order
				SupplierGroup
				Vendor
				Supplier

		ByParentSupplier
			Sort Order
				SupplierGroup
				ParentSupplier
				Supplier

		GlobalLocationNumberSet
			duplicates
			Sort Order
				GlobalLocationNumber

		ByOIGExclusionStatus		
			Sort Order
				SupplierGroup
				OIGExclusionStatus
				Supplier

	Form Invokes
		CreateSourcingEventResponse
			invoke Create Draft SourcingEventResponse
				invoked.Company		                      = EventCompany
				invoked.SourcingEvent                     = EventToCreate
				invoked.NotifiedSupplier.SupplierGroup    = actor.agent(SupplierSourceId).SupplierGroup
				invoked.NotifiedSupplier.Supplier         = actor.agent(SupplierSourceId).Supplier
				invoked.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId

    Field Rules
    	SupplierName
    		required
    			"CompanyNameIsRequired"

			if (SupplierName changed)
				if (SupplierOpenContractRel exists)
					for each SupplierOpenContractRel
						invoke FastUpdateWithoutEdits each
							invoked.UpdateContractSearchDocument = true

    	VATRegistrationCountry

    		if (VATRegistrationNumber entered)
    			required
    				"VATRegistrationCountry/\jurisdictionMustBeEnteredIfNumberIsEntered"

    	VATRegistrationNumber

    		if (VATRegistrationCountry entered)
    			required
    				"VATRegistrationNumberMustBeEnteredIfCountry/\jurisdictionIsEntered"

    	BillingAddress
    		if (SameAsAddressAbove)
    			BillingAddress = MailingAddress

		ParentSupplier
			constraint (ParentSupplier != Supplier)
				"ASupplierCannotBeItsOwnParentSupplier"

			constraint (!GroupPurchasingOrganization)
				"A_GPOSupplierCannotHaveAParentSupplier"

			constraint (!ParentSupplier.GroupPurchasingOrganization)
				"A_GPOSupplierCannotBeUsedAsAParentSupplier"

			constraint (all Supplier descendants.Supplier != ParentSupplier)
				"Supplier<Supplier parent.Supplier.SupplierName>CannotBeAParentForSupplier<SupplierName>.ItIsAlreadyADescendantOfSupplier<Supplier.SupplierName>"

			constraint (instance count of ParentSupplier ancestors < 4)
				"MaximumOfFiveSupplierLevelsIsExceeded"

			if (ParentSupplier changed and ParentSupplier != blank)
				if (OldParentSupplierRel exists)
					for each Supplier descendants
						constraint (ParentSupplier.NumberOfAncestors - OldParentSupplierRel.NumberOfAncestors + each.NumberOfAncestors < 4)
							"MoveUnderNewParentSupplierExceedsMaximumOfFiveSupplierLevels"
				else
					for each Supplier descendants
						constraint (ParentSupplier.NumberOfAncestors + each.NumberOfAncestors < 4)
							"MoveUnderNewParentSupplierExceedsMaximumOfFiveSupplierLevels"

		VendormateEntityId
			cannot be changed

		ContactLocationDisplay

			if (ContactLocationDisplay > 0)
				constraint (Vendor entered)
					"If_Contact_Can_ViewIsNotSetTo_All_Documents,SupplierMustBeAssociatedWithAVendor"
				constraint (ContactWithNoLocation !exists)
					"If_Contact_Can_ViewIsNotSetTo_All_Documents,AllSupplierContactsMustBeAssociatedWithAVendorLocation"
				if (PrimaryContactViewAllDocuments = false)
					constraint (PrimaryContactWithNoLocation !exists)
						"ForPrimaryContact,If_Contact_Can_ViewIsNotSetTo_All_DocumentsAndPrimaryContactIsNotAllowedToViewAllDocuments,PrimaryContactMustBeAssociatedWithAVendorLocation"

			if (ContactLocationDisplay = 0)
				PrimaryContactViewAllDocuments = false

	Attach Rules
		constraint (Active
		or 			BypassRuleForTheseFiles)
			"Supplier<Supplier>IsInactive"

	Actions
		Create is a Create Action 
			Field Rules
				LoginName

					if (!SupplierExtEntityEnabled)
						required
							"UserNameIsRequired"

					if (LoginName contains " ")
						LoginNameHasSpaces = true 
						constraint (LoginNameHasSpaces = false)
							"UserNameCannotContainSpaces"

				Password

					if (!SupplierExtEntityEnabled)
						required
							"PasswordIsRequired"

				ConfirmPassword
					if (!SupplierExtEntityEnabled)
						constraint (Password = ConfirmPassword)
							"ConfirmPasswordDoesNotMatchPassword"

						required
							"ConfirmPasswordIsRequired"

				MainContact.GivenName
					required
						"FirstNameIsRequired"

				MainContact.FamilyName
					required
						"LastNameIsRequired"

				MailingAddress.Country
					required
						"Country/\JurisdictionForMailingAddressIsRequired"

				SameAsAddressAbove
					if (SupplierGroup.QuickRegistration)
						SameAsAddressAbove = true

					if (BillingAddress not entered)
						required
							"MustEitherEnterRemitAddressOrCheckBoxIndicatingItIsTheSameAsMailingAddress"

 				MailingAddress
					if (!SupplierGroup.RequireNewSupplierValidation)
	  					required

				AcceptTerms
					required
						"<MustAcceptTermsAndConditionsMessage>"

				TelephoneNumber.SubscriberNumber
					required
						"PhoneNumberIsRequired"

				EmailAddress
					required
						"EmailAddressIsRequired"

				Vendor
					
					constraint (!Vendor.VendorStatus.Inactive)
						"VendorIsNotActive"
					
					if (Vendor entered
					and TaxIdGroup.TaxId entered
					and Vendor.TaxID entered)
						if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning
						or  SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly)
							if (Vendor.TaxID != TaxIdGroup.TaxId)
								confirmation required
									"Warning:TaxId<Vendor.TaxID>OnVendorAndSupplierDoNotMatch.DoYouWantToContinue?"
						else
							constraint (Vendor.TaxID = TaxIdGroup.TaxId)
								"TaxId<Vendor.TaxID>OnVendorAndEnteredTaxIdOnSupplierDoNotMatch"
								
				TaxIdGroup
					if (SupplierGroup.TaxCodeDisplay = 0)
						if (VATRegistrationNumber !entered)
							required
								"MustEnterTaxIdOrVATRegistrationNumber"

					if (SupplierGroup.TaxCodeDisplay = 1)
						required
							"MustEnterTaxId"

					if (TaxIdGroup entered)
						if  (VendorTaxIdsRel exists
						and (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning
						or   SupplierGroup.AllowDuplicateTaxIds.No))
							confirmation required
								"Warning:Vendor<VendorWithDuplicateTaxID>FoundWithTheSameTaxId.DoYouWantToProceed?"
						if  (VendorTaxIdsOnlyRel exists
						and (SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly
						or   SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly))
							confirmation required
								"Warning:Vendor<VendorWithDuplicateTaxIDOnly>FoundWithTheSameTaxId.DoYouWantToProceed?"
						if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning)
							if (TaxIdRel exists)
								if (NumDuplicateSupplierTaxIds > 1)
									confirmation required
										"Warning:<NumDuplicateSupplierTaxIds>SuppliersFoundWithTheSameTaxId.DoYouWantToProceed?"
								else
									confirmation required
										"Warning:Supplier<first TaxIdRel.SupplierDisplayName>FoundWithTheSameTaxId.DoYouWantToContinue?"
						if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly)
							if (TaxIdOnlyRel exists)
								if (NumDuplicateSupplierTaxIdsOnly > 1)
									confirmation required
										"Warning:<NumDuplicateSupplierTaxIdsOnly>SuppliersFoundWithTheSameTaxId.DoYouWantToProceed?"
								else
									confirmation required
										"Warning:Supplier<first TaxIdOnlyRel.SupplierDisplayName>FoundWithTheSameTaxId.DoYouWantToContinue?"
						else
						if (SupplierGroup.AllowDuplicateTaxIds.No)
							constraint (!TaxIdRel exists)
								"<SupplierDuplicateTaxIdErrorMessage>"
						else
						if (SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly)
							constraint (!TaxIdOnlyRel exists)
								"<SupplierDuplicateTaxIdErrorMessage>"

						if (TaxIdentificationTypeRel.TaxCertificationRequired)
							constraint (TaxCertification entered)
								"MustAttachA<TaxCertificationLabel>"

  				VATRegistrationNumber

					if (SupplierGroup.TaxCodeDisplay = 0)
						if (TaxIdGroup.TaxId !entered)
							required
								"MustEnterTaxIdOrVATRegistrationNumber"

					if (SupplierGroup.TaxCodeDisplay = 2)
						required
							"MustEnterVATRegistrationNumber"

					if (VATRegistrationNumber entered)
						if (VendorVATTaxRel exists)
							confirmation required
								"Warning:Vendor<VendorWithDuplicateVATTax>FoundWithTheSameVATTaxInformation.DoYouWantToProceed?"
						if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning
						or  SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly)
							if (VATTaxRel exists)
								if (NumDuplicateSupplierVATTax > 1)
									confirmation required
										"Warning:<NumDuplicateSupplierVATTax>SuppliersFoundWithTheSameVATTaxInformation.DoYouWantToProceed?"
								else
									confirmation required
										"Warning:Supplier<first VATTaxRel.SupplierDisplayName>FoundWithTheSameVATTaxInformation.DoYouWantToContinue?"
						else
							constraint (!VATTaxRel exists)
								"<SupplierDuplicateVATTaxErrorMessage>"

				ReceiveEmailNotification
					default to true

				SupplierDescription
					if (SupplierGroup.RequireSupplierDescription)
						required

			Action Rules

				Active 		   = true
				AcceptTerms    = true
				CreatedByBuyer = true
				FieldToConvert	= EmailAddress
				EmailAddress	= LowerCaseEmailAddress	
				if (SupplierGroup.RequireEmailConfirmation)
					FieldToConvert		= ConfirmEmailAddress
					ConfirmEmailAddress	= LowerCaseEmailAddress		
					constraint (EmailAddress = ConfirmEmailAddress)
						"ConfirmEmailAddressDoesNotMatchEmailAddress"

				if (BillingAddress.Country entered)
					BankInformationGroup.Country = BillingAddress.Country
				else
					BankInformationGroup.Country = MailingAddress.Country

				if (BankInformationGroup.Country entered
				and BankInformationGroup.BankAccountNumber entered)
					LocalBankCountry            = BankInformationGroup.Country
					LocalBankAccountNumber      = BankInformationGroup.BankAccountNumber
					include ValidateBankAccount

			Exit Rules
				if (SupplierGroup.RequireNewSupplierValidation)
					SupplierStatus = SupplierStatus.NeedsValidation
					HasBeenValidated = false
				else
					SupplierStatus = SupplierStatus.Validated
					HasBeenValidated = true

				invoke Create SupplierSourceId
					invoked.SupplierGroup				= SupplierGroup
					invoked.Supplier					= this instance.Supplier
					if (!SupplierExtEntityEnabled)
						invoked.LoginName				= LoginName
						invoked.Password				= Password
						invoked.ConfirmPassword			= ConfirmPassword
					invoked.MainContact					= MainContact
					invoked.ContactTitle				= ContactTitle
					invoked.EmailAddress                = EmailAddress
					invoked.ConfirmEmailAddress         = ConfirmEmailAddress
					invoked.TelephoneNumber             = TelephoneNumber
					invoked.FaxNumber                   = FaxNumber
					invoked.MobilePhone                 = MobilePhone
					invoked.ReceiveEmailNotification 	= ReceiveEmailNotification
					invoked.BankInformationGroup.Country = BankInformationGroup.Country

				invoke Create VendorAndSupplier
					invoked.VendorGroup					= SupplierGroup
					invoked.Vendor						= Vendor
					invoked.Supplier					= this instance.Supplier
					invoked.DunAndBradstreetNumber      = DandBNbr

				if (SupplierGroup.UseConditionalQuestions)
					for each SupplierGroupQuestionByDisplayOrderRel
						invoke Create SupplierQuestions
							assign result to NewQuestion
							invoked.SupplierGroup			= SupplierGroup
							invoked.Supplier				= Supplier
							invoked.SupplierGroupQuestion	= each.SupplierGroupQuestion
							fill in fields from each
								except invoked.DisplayOrder

						if (NewQuestion.ResponseType.List)
							for each SupplierGroupQuestionValueRel
								invoke CreateDisplay SupplierQuestionsListValue
									invoked.SupplierGroup				= SupplierGroup
									invoked.Supplier					= Supplier
									invoked.SupplierQuestions			= NewQuestion.SupplierQuestions
									invoked.SupplierQuestionsListValue	= each.SupplierGroupQuestionValue
									fill in fields from each

				include BuildTextIndexes

		T2VCreate is a Create Action				
			restricted 
			default label is untranslatable 
			bypass field rules 
			
		CreateFromMigration is a Create Action 
			restricted
			Field Rules

				ReceiveEmailNotification
					default to true

			Action Rules
				Active 		   = true
				AcceptTerms    = true

			Exit Rules
				if (SupplierGroup.RequireNewSupplierValidation)
					SupplierStatus = SupplierStatus.NeedsValidation
					HasBeenValidated = false
				else
					SupplierStatus = SupplierStatus.Validated
					HasBeenValidated = true

				invoke CreateFromMigration SupplierSourceId
					invoked.SupplierGroup				= SupplierGroup
					invoked.Supplier					= this instance.Supplier
					invoked.LoginName					= LoginName
			  		invoked.Password					= Password
			  		invoked.ConfirmPassword				= ConfirmPassword
					invoked.MainContact					= MainContact
					invoked.ContactTitle				= ContactTitle
					invoked.EmailAddress                = EmailAddress
					if (SupplierGroup.RequireEmailConfirmation)
						invoked.ConfirmEmailAddress     = EmailAddress
					invoked.TelephoneNumber             = TelephoneNumber
					invoked.FaxNumber                   = FaxNumber
					invoked.MobilePhone                 = MobilePhone
					invoked.ReceiveEmailNotification 	= ReceiveEmailNotification

				invoke Create VendorAndSupplier
					invoked.VendorGroup					= SupplierGroup
					invoked.Vendor						= Vendor
					invoked.Supplier					= this instance.Supplier
					invoked.DunAndBradstreetNumber      = DandBNbr

				include BuildTextIndexes

		RemoveFromMigration is a Set Action
			restricted
			Parameters
				PrmSupplierGroup is a SupplierGroup

			Instance Selection
				where (SupplierGroup = PrmSupplierGroup)

			Action Rules
				Instance Rules
					LocalSupplierGroup = PrmSupplierGroup
					LocalSupplier      = Supplier
					for each MigrationSupplierSourceIdRel
						invoke DeleteFromMigration each
					invoke Delete

		SupplierCreate is a Create Action 
			allow anonymous access
			Field Rules
				LoginName
					if (!SupplierExtEntityEnabled)
						required
							"UserNameIsRequired"

					if (LoginName contains " ")
						LoginNameHasSpaces = true 
						constraint (LoginNameHasSpaces = false)
							"UserNameCannotContainSpaces"

				Password
					if (!SupplierExtEntityEnabled)
						required
							"PasswordIsRequired"

				ConfirmPassword
					if (!SupplierExtEntityEnabled)
						constraint (Password = ConfirmPassword)
							"ConfirmPasswordDoesNotMatchPassword"

						required
							"ConfirmPasswordIsRequired"

				RegistrationPassword
					if (SupplierExtEntityEnabled)
						required
							"PasswordIsRequired"

				RegistrationConfirmPassword
					if (SupplierExtEntityEnabled)
						required
							"ConfirmPasswordIsRequired"
						constraint (RegistrationPassword = RegistrationConfirmPassword)
							"ConfirmPasswordDoesNotMatchPassword"

				TaxIdGroup
					if (SupplierGroup.TaxCodeDisplay = 0)
						if (VATRegistrationNumber !entered)
							required
								"MustEnterTaxIdOrVATRegistrationNumber"

					if (SupplierGroup.TaxCodeDisplay = 1)
						required
							"MustEnterTaxId"

					if (TaxIdGroup entered)
						if (SupplierGroup.AllowDuplicateTaxIds.No)
							constraint (!TaxIdRel exists)
								"<DuplicateTaxIdMessage>"
						if (SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly)
							constraint (!TaxIdOnlyRel exists)
								"<DuplicateTaxIdMessage>"

				VATRegistrationNumber
					if (SupplierGroup.TaxCodeDisplay = 0)
						if (TaxIdGroup.TaxId !entered)
							required
								"MustEnterTaxIdOrVATRegistrationNumber"

					if (SupplierGroup.TaxCodeDisplay = 2)
						required
							"MustEnterVATRegistrationNumber"

					if ((SupplierGroup.AllowDuplicateTaxIds.No
					or   SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly)
					and VATRegistrationNumber entered)
						constraint (!VATTaxRel exists)
							"<DuplicateVATTaxMessage>"

				GivenName
					required
						"FirstNameIsRequired"
					MainContact.GivenName = GivenName

				FamilyName
					required
						"LastNameIsRequired"
					MainContact.FamilyName = FamilyName

				MailingAddress.Country
					required
						"Country/\JurisdictionForMailingAddressIsRequired"

				MailingAddress
					required
						"AddressInformationRequired"

				SameAsAddressAbove
					if (SupplierGroup.QuickRegistration)
						SameAsAddressAbove = true

					if (BillingAddress not entered)
						required
							"MustEitherEnterRemitAddressOrCheckBoxIndicatingItIsTheSameAsMailingAddress"
				AcceptTerms
					required
						"<MustAcceptTermsAndConditionsMessage>"

				VendormateLogin
					if (VendormatePassword entered)
						required
							"VendormateUserNameIsRequiredIfPasswordEntered"
				VendormatePassword
					if (VendormateLogin entered)
						required
							"VendormatePasswordIsRequiredIfUserNameEntered"

				ReceiveEmailNotification
					default to true

				EventCompany
					default to first EventToCompanyRel.Company

				TransientTelephone
					required
						"PhoneNumberIsRequired"
					TelephoneNumber.SubscriberNumber = TransientTelephone

				EmailAddress
					required
						"EmailAddressIsRequired"

				SupplierDescription
					if (SupplierGroup.RequireSupplierDescription)
						required					

			Action Rules

				if (SupplierExtEntityEnabled
				and LoginName !entered)  
					LoginName = EmailAddress

				if (TaxIdGroup entered)
					if (TaxIdentificationTypeRel.TaxCertificationRequired)
						constraint (TaxCertification entered)
							"MustAttachA<TaxCertificationLabel>"
				Active = true
				FieldToConvert	= EmailAddress
				EmailAddress	= LowerCaseEmailAddress	
				if (SupplierGroup.RequireEmailConfirmation)
					FieldToConvert		= ConfirmEmailAddress
					ConfirmEmailAddress	= LowerCaseEmailAddress		
					constraint (EmailAddress = ConfirmEmailAddress)
						"ConfirmEmailAddressDoesNotMatchEmailAddress"
				if (VendormatePassword entered
				and SupplierName not entered)
					constraint (VendormateLogin entered)
						"VendormateUserNameIsRequiredIfPasswordEntered"
					include GetVendormateData
					if (UseVendormateLogin)
						LoginName = VendormateLogin

				if (BillingAddress.Country entered)
					BankInformationGroup.Country 			= BillingAddress.Country
					TransientBankInformationGroup.Country 	= BillingAddress.Country
				else
					BankInformationGroup.Country 			= MailingAddress.Country
					TransientBankInformationGroup.Country 	= MailingAddress.Country

				if (BankInformationGroup.Country entered
				and BankInformationGroup.BankAccountNumber entered)
					LocalBankCountry 		= BankInformationGroup.Country
					LocalBankAccountNumber  = BankInformationGroup.BankAccountNumber
					include ValidateBankAccount

				if (TransientBankInformationGroup.Country entered
				and TransientBankInformationGroup.BankAccountNumber entered)
					LocalBankCountry 		= TransientBankInformationGroup.Country
					LocalBankAccountNumber  = TransientBankInformationGroup.BankAccountNumber
					include ValidateBankAccount

			Exit Rules
				if (SupplierGroup.RequireNewSupplierValidation)
					SupplierStatus = SupplierStatus.NeedsValidation
					HasBeenValidated = false
				else
					SupplierStatus = SupplierStatus.Validated
					HasBeenValidated = true

				invoke Create SupplierSourceId
					invoked.SupplierGroup				= SupplierGroup
					invoked.Supplier					= this instance.Supplier
					invoked.LoginName					= LoginName
					if (!SupplierExtEntityEnabled)
						invoked.Password				= Password
						invoked.ConfirmPassword			= ConfirmPassword
					else
						invoked.Password				= RegistrationPassword
						invoked.ConfirmPassword			= RegistrationConfirmPassword
					invoked.MainContact					= MainContact
					invoked.ContactTitle				= ContactTitle
					invoked.EmailAddress                = EmailAddress
					invoked.ConfirmEmailAddress		    = EmailAddress
					invoked.TelephoneNumber             = TelephoneNumber
					invoked.FaxNumber                   = FaxNumber
					invoked.MobilePhone                 = MobilePhone
					invoked.ReceiveEmailNotification 	= ReceiveEmailNotification
					invoked.VendormateUserId			= VendormateUserId
					invoked.BankInformationGroup        = TransientBankInformationGroup
					invoked.TransientUserIdentity		= TransientUserIdentity
					invoked.TransientUserVerificationId	= TransientUserVerificationId
					invoked.TransientVerificationCode	= TransientVerificationCode
					invoked.TransientUserRegistered		= TransientUserRegistered

				if (SupplierGroup.UseConditionalQuestions)
					for each SupplierGroupQuestionByDisplayOrderRel
						invoke Create SupplierQuestions
							assign result to NewQuestion
							invoked.SupplierGroup			= SupplierGroup
							invoked.Supplier				= Supplier
							invoked.SupplierGroupQuestion	= each.SupplierGroupQuestion
							fill in fields from each
								except invoked.DisplayOrder

						if (NewQuestion.ResponseType.List)
							for each SupplierGroupQuestionValueRel
								invoke CreateDisplay SupplierQuestionsListValue
									invoked.SupplierGroup				= SupplierGroup
									invoked.Supplier					= Supplier
									invoked.SupplierQuestions			= NewQuestion.SupplierQuestions
									invoked.SupplierQuestionsListValue	= each.SupplierGroupQuestionValue
									fill in fields from each


		MobileSupplierCreate is a Create Action
			allow anonymous access
			Field Rules
				LoginName
					required
						"UserNameIsRequired"

				Password
					required
						"PasswordIsRequired"

				ConfirmPassword
					constraint (Password = ConfirmPassword)
						"ConfirmPasswordDoesNotMatchPassword"
					required
						"ConfirmPasswordIsRequired"

				TaxIdGroup
					if (SupplierGroup.TaxCodeDisplay = 0)
						if (VATRegistrationNumber !entered)
							required
								"MustEnterTaxIdOrVATRegistrationNumber"

					if (SupplierGroup.TaxCodeDisplay = 1)
						required
							"MustEnterTaxId"

					if (TaxIdGroup entered)
						if (SupplierGroup.AllowDuplicateTaxIds.No)
							constraint (!TaxIdRel exists)
								"<DuplicateTaxIdMessage>"
						if (SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly)
							constraint (!TaxIdOnlyRel exists)
								"<DuplicateTaxIdMessage>"

				VATRegistrationNumber
					if (SupplierGroup.TaxCodeDisplay = 0)
						if (TaxIdGroup.TaxId !entered)
							required
								"MustEnterTaxIdOrVATRegistrationNumber"

					if (SupplierGroup.TaxCodeDisplay = 2)
						required
							"MustEnterVATRegistrationNumber"

					if ((SupplierGroup.AllowDuplicateTaxIds.No
					or	 SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly)
					and VATRegistrationNumber entered)
						constraint (!VATTaxRel exists)
							"<DuplicateVATTaxMessage>"

				GivenName
					required
						"FirstNameIsRequired"
					MainContact.GivenName = GivenName

				FamilyName
					required
						"LastNameIsRequired"
					MainContact.FamilyName = FamilyName

				MailingAddress.Country
					required
						"Country/\JurisdictionForMailingAddressIsRequired"

				MailingAddress
					required
						"AddressInformationRequired"

				SameAsAddressAbove
					SameAsAddressAbove = true

					if (BillingAddress not entered)
						required
							"MustEitherEnterRemitAddressOrCheckBoxIndicatingItIsTheSameAsMailingAddress"
				AcceptTerms
					required
						"<MustAcceptTermsAndConditionsMessage>"

				VendormateLogin
					if (VendormatePassword entered)
						required
							"VendormateUserNameIsRequiredIfPasswordEntered"
				VendormatePassword
					if (VendormateLogin entered)
						required
							"VendormatePasswordIsRequiredIfUserNameEntered"

				ReceiveEmailNotification
					default to true

				EventCompany
					default to first EventToCompanyRel.Company

				TransientTelephone
					required
						"PhoneNumberIsRequired"
					TelephoneNumber.SubscriberNumber = TransientTelephone

				EmailAddress
					required
						"EmailAddressIsRequired"

				SupplierDescription
					if (SupplierGroup.RequireSupplierDescription)
						required						

			Action Rules
				if (TaxIdGroup entered)
					if (TaxIdentificationTypeRel.TaxCertificationRequired)
						constraint (TaxCertification entered)
							"MustAttachA<TaxCertificationLabel>"
				Active = true
				FieldToConvert	= EmailAddress
				EmailAddress	= LowerCaseEmailAddress	
				if (SupplierGroup.RequireEmailConfirmation)
					FieldToConvert		= ConfirmEmailAddress
					ConfirmEmailAddress	= LowerCaseEmailAddress		
					constraint (EmailAddress = ConfirmEmailAddress)
						"ConfirmEmailAddressDoesNotMatchEmailAddress"
				if (VendormatePassword entered
				and SupplierName not entered)
					constraint (VendormateLogin entered)
						"VendormateUserNameIsRequiredIfPasswordEntered"
					include GetVendormateData
					if (UseVendormateLogin)
						LoginName = VendormateLogin

				if (BillingAddress.Country entered)
					BankInformationGroup.Country			= BillingAddress.Country
					TransientBankInformationGroup.Country	= BillingAddress.Country
				else
					BankInformationGroup.Country			= MailingAddress.Country
					TransientBankInformationGroup.Country	= MailingAddress.Country

				if (BankInformationGroup.Country entered
				and BankInformationGroup.BankAccountNumber entered)
					LocalBankCountry		= BankInformationGroup.Country
					LocalBankAccountNumber	= BankInformationGroup.BankAccountNumber
					include ValidateBankAccount

				if (TransientBankInformationGroup.Country entered
				and TransientBankInformationGroup.BankAccountNumber entered)
					LocalBankCountry		= TransientBankInformationGroup.Country
					LocalBankAccountNumber	= TransientBankInformationGroup.BankAccountNumber
					include ValidateBankAccount

			Exit Rules
				if (SupplierGroup.RequireNewSupplierValidation)
					SupplierStatus = SupplierStatus.NeedsValidation
					HasBeenValidated = false
				else
					SupplierStatus = SupplierStatus.Validated
					HasBeenValidated = true

				invoke Create SupplierSourceId
					invoked.SupplierGroup				= SupplierGroup
					invoked.Supplier					= this instance.Supplier
					invoked.LoginName					= LoginName
					invoked.Password					= Password
					invoked.ConfirmPassword 			= ConfirmPassword
					invoked.MainContact 				= MainContact
					invoked.ContactTitle				= ContactTitle
					invoked.EmailAddress				= EmailAddress
					invoked.ConfirmEmailAddress 		= EmailAddress
					invoked.TelephoneNumber 			= TelephoneNumber
					invoked.FaxNumber					= FaxNumber
					invoked.MobilePhone 				= MobilePhone
					invoked.ReceiveEmailNotification	= ReceiveEmailNotification
					invoked.VendormateUserId			= VendormateUserId
					invoked.BankInformationGroup		= TransientBankInformationGroup

				include BuildTextIndexes


		SupplierCreateImport is an Import Action
			allow anonymous access

			Action Rules
				FieldToConvert	= EmailAddress
				LoginName		= LowerCaseEmailAddress
				EmailAddress	= LowerCaseEmailAddress		

				if (DerivedVerificationCodeRequired)
					constraint (TransientVerificationCode entered)
						"VerificationCodeIsRequired"
					
				if (SupplierSourceIdInSessionKeyExists
				or  SupplierSourceIdByEmailExists)
					constraint (EmailAddress entered)
						"EmailAddressIsRequired"
					constraint (RegistrationPassword entered)
						"PasswordIsRequired"
					constraint (RegistrationConfirmPassword entered)
						"ConfirmPasswordIsRequired"
					constraint (RegistrationPassword = RegistrationConfirmPassword)
						"ConfirmPasswordDoesNotMatchPassword"
					
					if (SupplierSourceIdInSessionKeyExists)
						constraint (EmailAddress = SupplierSourceIdInSessionKeyRel.EmailAddress)
							"EnteredEmailAddressDoesNotMatchWhatIsOnFileInTheSystem" 
						
					Supplier				= first SupplierSourceIdEmailExistsRel.Supplier
					LoginName				= first SupplierSourceIdEmailExistsRel.EmailAddress
					LocalSupplier			= first SupplierSourceIdEmailExistsRel.Supplier
					LocalSupplierSourceId	= first SupplierSourceIdEmailExistsRel.SupplierSourceId

					invoke RegisterSupplierSourceId SupplierSourceIdForRegistrationRel.SupplierSourceId
						assign result to SupplierSourceIdView
						invoked.EmailAddress				= EmailAddress
						invoked.LoginName					= LoginName
						invoked.Password					= RegistrationPassword
						invoked.MainContact					= SupplierSourceIdForRegistrationRel.MainContact
						invoked.TelephoneNumber				= SupplierSourceIdForRegistrationRel.TelephoneNumber
						invoked.TransientUserIdentity		= TransientUserIdentity
						invoked.TransientUserVerificationId	= TransientUserVerificationId
						invoked.TransientVerificationCode	= TransientVerificationCode
						invoked.TransientUserRegistered		= TransientUserRegistered
						
					LoginName = SupplierSourceIdForRegistrationRel.LoginName
				else
					invoke SupplierCreate this instance
						

		StatusUpdate is an Instance Action
			restricted
			Action Rules

				SupplierStatus = Supplier.SupplierStatus.NeedsValidation

		ContactSearchUpdate is an Instance Action
			restricted
			Action Rules

				include BuildTextIndexes

		Update is an Update Action 
			valid when (IsUpdatable)
			Field Rules
				TaxIdGroup
					if ((TaxIdGroup.TaxId changed
					and TaxIdGroup.TaxId entered)
					or  (TaxIdGroup.TaxIdType changed
					and TaxIdGroup.TaxIdType entered))
						if (VendorTaxIdsRel exists
						and (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning
						or   SupplierGroup.AllowDuplicateTaxIds.No))
							confirmation required
								"Warning:Vendor<VendorWithDuplicateTaxID>FoundWithTheSameTaxId.DoYouWantToProceed?"
						if (VendorTaxIdsOnlyRel exists
						and (SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly
						or   SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly))
							confirmation required
								"Warning:Vendor<VendorWithDuplicateTaxIDOnly>FoundWithTheSameTaxId.DoYouWantToProceed?"
						if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning)
							if (TaxIdRel exists)
								if (NumDuplicateSupplierTaxIds > 1)
									confirmation required
										"Warning:<NumDuplicateSupplierTaxIds>SuppliersFoundWithTheSameTaxId.DoYouWantToProceed?"
								else
									confirmation required
										"Warning:Supplier<first TaxIdRel.SupplierDisplayName>FoundWithTheSameTaxId.DoYouWantToContinue?"
						if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly)
							if (TaxIdOnlyRel exists)
								if (NumDuplicateSupplierTaxIdsOnly > 1)
									confirmation required
										"Warning:<NumDuplicateSupplierTaxIdsOnly>SuppliersFoundWithTheSameTaxId.DoYouWantToProceed?"
								else
									confirmation required
										"Warning:Supplier<first TaxIdOnlyRel.SupplierDisplayName>FoundWithTheSameTaxId.DoYouWantToContinue?"
						else
						if (SupplierGroup.AllowDuplicateTaxIds.No)
							constraint (!TaxIdRel exists)
								"<SupplierDuplicateTaxIdErrorMessage>"
						else
						if (SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly)
							constraint (!TaxIdOnlyRel exists)
								"<SupplierDuplicateTaxIdErrorMessage>"

						if (TaxIdentificationTypeRel.TaxCertificationRequired)
							constraint (TaxCertification entered)
								"MustAttachA<TaxCertificationLabel>"

				VATRegistrationNumber
					if (VATRegistrationNumber changed
					and VATRegistrationNumber entered)
						if (VendorVATTaxRel exists)
							confirmation required
								"Warning:Vendor<VendorWithDuplicateVATTax>FoundWithTheSameVATTaxInformation.DoYouWantToProceed?"
						if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning
						or  SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly)
							if (VATTaxRel exists)
								if (NumDuplicateSupplierVATTax > 1)
									confirmation required
										"Warning:<NumDuplicateSupplierVATTax>SuppliersFoundWithTheSameVATTaxInformation.DoYouWantToProceed?"
								else
									confirmation required
										"Warning:Supplier<first VATTaxRel.SupplierDisplayName>FoundWithTheSameVATTaxInformation.DoYouWantToContinue?"
						else
							constraint (!VATTaxRel exists)
								"<SupplierDuplicateVATTaxErrorMessage>"

				Vendor
					if (Vendor entered
					and TaxIdGroup.TaxId entered
					and Vendor.TaxID entered)
						if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning
						or  SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly)
							if (Vendor.TaxID != TaxIdGroup.TaxId)
								confirmation required
									"Warning:TaxId<Vendor.TaxID>OnVendorAndSupplierDoNotMatch.DoYouWantToContinue?"
						else
							constraint (Vendor.TaxID = TaxIdGroup.TaxId)
								"TaxId<Vendor.TaxID>OnVendorAndEnteredTaxIdOnSupplierDoNotMatch"

					if (VATRegistrationNumber entered
					and Vendor.VATRegistrationNumber entered)
						if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning
						or  SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly)
							if (Vendor.VATRegistrationNumber != VATRegistrationNumber
							or  Vendor.VATRegistrationCountry != VATRegistrationCountry)
								confirmation required
									"Warning:VATInformationOnVendorAndSupplierDoNotMatch.DoYouWantToContinue?"
						else
							constraint (Vendor.VATRegistrationNumber  = VATRegistrationNumber
							and         Vendor.VATRegistrationCountry = VATRegistrationCountry)
								"VATInformationOnVendorAndSupplierDoNotMatch"

					if (Vendor changed)
						if (Vendor entered)
							constraint (Active)
								"SupplierIsNotActive;CannotChangeOrEnterVendor"
							constraint (!Vendor.VendorStatus.Inactive)
								"VendorIsNotActive"

						constraint (!HasActiveContracts)
							"CannotChangeVendor;ActiveContractsExistForSupplier"

						if (VendorChangeContractPurchaseFromsRel exists)
							confirmation required
								"ContractsExistForOldVendorThatHavePurchaseFromInformation;PurchaseFromInformationWillBeRemoved;DoYouWantToCOntinue?"

  				MailingAddress
					if (!SupplierGroup.RequireNewSupplierValidation
					and !SupplierGroup.RequireUpdatedSupplierValidation)
						required
					if (SupplierGroup.RequireNewSupplierValidation
					and !SupplierGroup.RequireUpdatedSupplierValidation
					and HasBeenValidated)
						required

				SameAsAddressAbove
					if (BillingAddress not entered)
						required
							"MustEitherEnterRemitAddressOrCheckBoxIndicatingItIsTheSameAsMailingAddress"

				GroupPurchasingOrganization
					if (GroupPurchasingOrganization changed
					and old GroupPurchasingOrganization)
						constraint (!SupplierOpenContractRel exists)
							"OpenContractsExistForSupplier;CannotChangeGroupPurchasingOrganization"
						constraint (!GPOSupplierOpenContractRel exists)
							"SupplierIsA_GPOSupplierOnOpenContracts;CannotChangeGroupPurchasingOrganization"

				BankInformationGroup
					if (BankInformationGroup.Country entered
					and BankInformationGroup.BankAccountNumber entered)
						LocalBankCountry            = BankInformationGroup.Country
						LocalBankAccountNumber      = BankInformationGroup.BankAccountNumber
						include ValidateBankAccount

				SupplierDescription
					if (SupplierDescription changed
					and old SupplierDescription entered)
						if (SupplierGroup.RequireSupplierDescription)
							required

			Action Rules
				AcceptTerms = true


				if (TaxIdGroup entered)
					if (TaxIdentificationTypeRel.TaxCertificationRequired)
						constraint (TaxCertification entered)
							"MustAttachA<TaxCertificationLabel>"
   				if (Vendor changed)
   					invoke Update SupplierSourceId set
						invoked.LocationVendor	= Vendor
						invoked.VendorLocation	= blank

					invoke Delete SupplierPurchaseFrom set

					for each SupplierOpenContractRel   
						invoke UpdateVendorFromSupplier each
							invoked.NewVendor = Vendor

			Exit Rules

				if (Supplier.SupplierStatus.Validated
				and SupplierGroup.RequireUpdatedSupplierValidation
				and SupplierFields changed)
					SupplierStatus = SupplierStatus.NeedsValidation
					include UpdateValidationEmail

				if ((CompareFields changed
				or   BankInformationGroup changed)
				and  SupplierGroup.AutoCompare
				and  Vendor entered)
					invoke CompareSupplierAndVendor
						invoked.ParmSupplierGroup	= SupplierGroup
						invoked.ParmSupplier        = Supplier
						invoked.CompareSupplier	    = true

				invoke Update first VendorAndSupplierRel
					invoked.VendorGroup					= SupplierGroup
					invoked.Vendor						= Vendor
					invoked.Supplier					= Supplier
					invoked.DunAndBradstreetNumber      = DandBNbr

				include BuildTextIndexes

				ChangeTaxID	= false

		SupplierUpdate is an Update Action 
			Field Rules
				TaxIdGroup
					if ((TaxIdGroup.TaxId changed
					and TaxIdGroup.TaxId entered)
					or (TaxIdGroup.TaxIdType changed
					and TaxIdGroup.TaxIdType entered))
						if (SupplierGroup.AllowDuplicateTaxIds.No)
							constraint (!TaxIdRel exists)
								"<DuplicateTaxIdMessage>"
						else
						if (SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly)
							constraint (!TaxIdOnlyRel exists)
								"<DuplicateTaxIdMessage>"

  				VATRegistrationNumber
					if (VATRegistrationNumber changed
					or  VATRegistrationCountry changed
					and VATRegistrationNumber entered)
						if (SupplierGroup.AllowDuplicateTaxIds.No
						or  SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly)
							constraint (!VATTaxRel exists)
								"<DuplicateVATTaxMessage>"
  				MailingAddress
					required
						"AddressInformationRequired"
				SameAsAddressAbove
					if (BillingAddress not entered)
						required
							"MustEitherEnterRemitAddressOrCheckBoxIndicatingItIsTheSameAsMailingAddress"
				AcceptTerms
					required
						"<MustAcceptTermsAndConditionsMessage>"

				BankInformationGroup
					if (BankInformationGroup.Country entered
					and BankInformationGroup.BankAccountNumber entered)
						LocalBankCountry            = BankInformationGroup.Country
						LocalBankAccountNumber      = BankInformationGroup.BankAccountNumber
						include ValidateBankAccount

				SupplierDescription
					if (SupplierDescription changed
					and old SupplierDescription entered)
						if (SupplierGroup.RequireSupplierDescription)
							required

			Action Rules
				if (TaxIdGroup entered)
					if (TaxIdentificationTypeRel.TaxCertificationRequired)
						constraint (TaxCertification entered)
							"MustAttachA<TaxCertificationLabel>"

			Exit Rules

				if (Supplier.SupplierStatus.Validated
				and SupplierGroup.RequireUpdatedSupplierValidation
				and SupplierFields changed)
					SupplierStatus = SupplierStatus.NeedsValidation

					include UpdateValidationEmail

				invoke Update first VendorAndSupplierRel
					invoked.VendorGroup					= SupplierGroup
					invoked.Vendor						= Vendor
					invoked.Supplier					= Supplier
					invoked.DunAndBradstreetNumber      = DandBNbr

				if ((CompareFields changed
				or   BankInformationGroup changed)
				and  SupplierGroup.AutoCompare
				and  Vendor entered)
					invoke CompareSupplierAndVendor
						invoked.ParmSupplierGroup	= SupplierGroup
						invoked.ParmSupplier        = Supplier
						invoked.CompareSupplier	    = true

				include BuildTextIndexes

				ChangeTaxID	= false

			
		QuickUpdate is an Update Action
			restricted
			bypass field rules
			

		NotifyIfRequiredQuestions is a Set Action
			default label is "EmailSuppliersWithRequiredQuestionsToAnswer"
			Parameters
				ParmSupplierGroup is a SupplierGroup
					default label is "SupplierGroup"

			Parameter Rules
				ParmSupplierGroup
					required

			Instance Selection
				where (ParmSupplierGroup = SupplierGroup
				and    Active
				and   !RequiredQuestionsAnswered)

			Action Rules
				Instance Rules

					send email
						to PrimaryContact.EmailAddress
						from SupplierGroup.AdminEmailAddress
						subject "YouHaveRequiredSupplierRegistrationQuestionsToAnswer"
						Contents
							"Click<RequiredQuestionLinkback>ToViewAndAnswerSupplierRegistrationQuestions"
							"RequiredQuestionsMustBeAnsweredToPerformProcessingOnSupplierPortal"

					invoke Create SupplierContactMessage
						invoked.SupplierGroup 					= PrimaryContact.SupplierGroup
						invoked.Supplier 						= PrimaryContact.Supplier
						invoked.SupplierSourceId				= PrimaryContact.SupplierSourceId
						invoked.CreationDateTime				= current timestamp
						invoked.MessageTitle					= "Required Questions to Answer"
						invoked.MessageText						= "Required Supplier Registration Questions Need to be Answered to Perform Processing"
						invoked.Status							= 1
						invoked.Priority						= 2
						invoked.SystemGenerated					= true
						invoked.ReleaseStatus					= 2
						invoked.MessageOwner                    = actor.agent(Employee).Employee

		UpdateBankCountry is an Instance Action
			default label is "UpdateBankCountry/\Jurisdiction"
			valid when (CanDisplayBankInformation)
			Parameters
				ParmBankCountry         is a Country

			Parameter Rules
				ParmBankCountry
					initial value is BankInformationGroup.Country
					required
						"MustEnterABankCountry/\Jurisdiction"

			Action Rules
				BankInformationGroup.Country           = ParmBankCountry
				if (BankInformationGroup.Country changed)
					include UpdateExitRules

			Exit Rules

				if (Supplier.SupplierStatus.Validated
				and SupplierGroup.RequireUpdatedSupplierValidation)
					SupplierStatus = SupplierStatus.NeedsValidation
					include UpdateValidationEmail

		UpdateCreditCardNumber is an Instance Action
			valid when (CanDisplayBankInformation)
			Parameters
				ParmCreditCardNumber   is a CrCardNumber 
					holds pii
					default label is "NewCreditCardNumber"

			Parameter Rules
				ParmCreditCardNumber
					required
						"MustEnterNewCreditCardNumber"

			Action Rules

				BankInformationGroup.CreditCardNumber = ParmCreditCardNumber

			Exit Rules

				if (Supplier.SupplierStatus.Validated
				and SupplierGroup.RequireUpdatedSupplierValidation)
					SupplierStatus = SupplierStatus.NeedsValidation
					include UpdateValidationEmail

		UpdateBankAccountNumber is an Instance Action
			valid when (CanDisplayBankInformation)
			Parameters
				ParmBankAccountNumber    is a BankAccountNumber
				ConfirmBankAccountNumber is like BankAccountNumber 
					holds pii

			Parameter Rules
				ParmBankAccountNumber
					required
						"MustEnterNew<BankInformationGroup.DerivedBankAccountNumberLabel>"

					LocalBankCountry = BankInformationGroup.Country

					if (BankInformationGroup.Country entered)
						LocalBankCountry        = BankInformationGroup.Country
						LocalBankAccountNumber  = ParmBankAccountNumber
						include ValidateBankAccount

					if (BankInformationGroup.BankAccountNumberConfirmationRequired)
						constraint (ConfirmBankAccountNumber entered)
							"MustConfirm<BankInformationGroup.DerivedBankAccountNumberLabel>If<BankInformationGroup.DerivedBankAccountNumberLabel>Entered"

						constraint (ParmBankAccountNumber = ConfirmBankAccountNumber)
							"<BankInformationGroup.DerivedBankAccountNumberLabel>AndConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>DoNotMatch"

				ConfirmBankAccountNumber

					if (ConfirmBankAccountNumber entered)
						constraint (ParmBankAccountNumber entered)
							"MustEnter<BankInformationGroup.DerivedBankAccountNumberLabel>IfEnteringConfirmation<BankInformationGroup.DerivedBankAccountNumberLabel>"

			Action Rules

				BankInformationGroup.BankAccountNumber = ParmBankAccountNumber

			Exit Rules

				if (Supplier.SupplierStatus.Validated
				and SupplierGroup.RequireUpdatedSupplierValidation)
					SupplierStatus = SupplierStatus.NeedsValidation
					include UpdateValidationEmail

		UpdateSupplierInformation is an Instance Action 
			restricted
			Parameters
				ParmSupplierName		  is a VendorName 
					holds pii
				ParmDBA                   is Alpha size 30
				ParmDAndB                 is Alpha size 20
				ParmBusinessType          is Numeric size 2
				ParmTaxIDType             is a TaxIdentificationType
				ParmTaxID                 is AlphaUpper size 25
				ParmVATCountry            is a Country
				ParmTaxCertification      is an AttachmentWithTitleAudited
				ParmVATNumber             is AlphaUpper size 25
				ParmGLN                   is a GlobalLocationNumber
				ParmURL                   is URL


			Action Rules
				LocalTaxIdentificationType 	= ParmTaxIDType
				LocalTaxIdGroup.TaxId 		= ParmTaxID
				LocalVATNumber				= ParmVATNumber
				LocalVATCountry 			= ParmVATCountry
				if ((ParmTaxID != TaxIdGroup.TaxId
				and ParmTaxID entered)
				or (ParmTaxIDType != TaxIdGroup.TaxIdType
				and ParmTaxIDType entered))
					if (SupplierGroup.AllowDuplicateTaxIds.No)
						constraint (!LocalTaxIdRel exists)
							"<DuplicateTaxIdMessage>"
					else
					if (SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly)
						constraint (!LocalTaxIdOnlyRel exists)
							"<DuplicateTaxIdMessage>"

				if (ParmVATNumber != VATRegistrationNumber
				or  ParmVATCountry != VATRegistrationCountry
				and ParmVATNumber entered)
					if (SupplierGroup.AllowDuplicateTaxIds.No
					or  SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly)
						constraint (!LocalVATTaxRel exists)
							"<DuplicateVATTaxMessage>"

				SupplierName						= ParmSupplierName
				DoingBusinessAs						= ParmDBA
				DandBNbr							= ParmDAndB
				Supplier.BusinessType               = ParmBusinessType
				Supplier.TaxIdGroup.TaxIdType       = ParmTaxIDType
				Supplier.TaxIdGroup.TaxId           = ParmTaxID
			   	Supplier.VATRegistrationCountry     = ParmVATCountry
			   	Supplier.VATRegistrationNumber      = ParmVATNumber
				Supplier.GlobalLocationNumber       = ParmGLN
		   		Supplier.WebAddress                 = ParmURL
		   		Supplier.TaxCertification           = ParmTaxCertification

			Exit Rules

				invoke Update first VendorAndSupplierRel
					invoked.VendorGroup					= SupplierGroup
					invoked.Vendor						= Vendor
					invoked.Supplier					= Supplier
					invoked.DunAndBradstreetNumber      = DandBNbr

				if (Supplier.SupplierStatus.Validated
				and SupplierGroup.RequireUpdatedSupplierValidation)
					SupplierStatus = SupplierStatus.NeedsValidation
					include UpdateValidationEmail

		UpdateBankInformation is an Instance Action 
			restricted
			Parameters
				ParmCountry                 is a Country
					default label is "Country/\Jurisdiction"
				ParmBankAccountNumber 		is a BankAccountNumber
					default label is "BankAccountNumber"
				ParmCreditCardNumber  		is a CrCardNumber 
					holds pii
					default label is "CreditCardNumber"
				ParmBankEntity        		is a BankEntity
					default label is "BankEntity"
				ParmBankEntityName          is a BankName
					default label is "BankEntityName"
				ParmBankAccountType   		is a BankAccountType
					default label is "BankAccountType"
				ParmBankCurrency      		is a Currency
					default label is "BankCurrency"
				ParmCrossBorderIdentifier 	is a CrossBorderIdentifier
					default label is "CrossBorderIdentifier"
				ParmSwiftID                 is a SwiftID
					default label is "SwiftID"
				ParmBankingCode             is a BankingCode
					default label is "BankingCode"
				ParmBankID                  is a BankID
					default label is "BankID"
				ParmAssignmentNumber        is an AssignmentNumber
					default label is "AssignmentNumber"
				ParmGiroNumber              is a GiroNumber
					default label is "GiroNumber"
				ParmBACSReference           is a BACSReference
					default label is "BACSReference"
				ParmBACSName                is an AccountName

			Action Rules

				if (ParmCountry entered)
					BankInformationGroup.Country                  = ParmCountry
				if (ParmCountry !entered)
					if(ParmBankAccountNumber entered)
						BankInformationGroup.BankAccountNumber        = ParmBankAccountNumber
					if(ParmCreditCardNumber entered)
						BankInformationGroup.CreditCardNumber         = ParmCreditCardNumber
					if(ParmBankEntity entered)
						BankInformationGroup.BankEntity               = ParmBankEntity
					if (ParmBankEntityName entered
					and ParmBankEntity !exists)
						BankInformationGroup.BankEntityName           = ParmBankEntityName
					else
					if (ParmBankEntity exists)
						BankInformationGroup.BankEntityName           = ParmBankEntity.BankName
					if(ParmBankAccountType entered)
						BankInformationGroup.BankAccountType          = ParmBankAccountType
					if(ParmBankCurrency entered)
						BankInformationGroup.BankCurrency             = ParmBankCurrency
					if(ParmCrossBorderIdentifier entered)
						BankInformationGroup.CrossBorderIdentifier    = ParmCrossBorderIdentifier
					if(ParmSwiftID entered)
						BankInformationGroup.SwiftID                  = ParmSwiftID
					if(ParmBankingCode entered)
						BankInformationGroup.BankingCode              = ParmBankingCode
					if(ParmBankID entered)
						BankInformationGroup.BankID                   = ParmBankID
					if(ParmAssignmentNumber entered)
						BankInformationGroup.AssignmentNumber         = ParmAssignmentNumber
					if(ParmGiroNumber entered)
						BankInformationGroup.GiroNumber               = ParmGiroNumber
					if(ParmBACSReference entered)
						BankInformationGroup.BACSReference            = ParmBACSReference
					if(ParmBACSName entered)
						BankInformationGroup.BACSName  				  = ParmBACSName
				if (ParmCountry entered)
					include UpdateExitRules

			Exit Rules

				if (SupplierGroup.AutoCompare
				and Vendor entered)
					invoke CompareSupplierAndVendor
						invoked.ParmSupplierGroup	= SupplierGroup
						invoked.ParmSupplier        = Supplier
						invoked.CompareSupplier	    = true

				if (Supplier.SupplierStatus.Validated
				and SupplierGroup.RequireUpdatedSupplierValidation)
					SupplierStatus = SupplierStatus.NeedsValidation
					include UpdateValidationEmail

		Delete is a Delete Action
			Entrance Rules
				invoke Delete VendorAndSupplierRel

			Action Rules
				if (SupplierStatus.PendingValidation)
					cancel SupplierAppr process
				for each SupplierSourceId set
					invoke DeleteFromSupplier each

		CreateVendor is an Instance Action
			valid when (CanCreateVendor)
  			Parameters
  				VendorClass
  				TransferDiversityCodes	is Boolean
  				CreatePoVendor			is Boolean
 				TransferCertifications  is Boolean

			Parameter Rules

  				TransferDiversityCodes
  					if (TransferDiversityCodes)
  						constraint (SupplierDiversityResponse set exists)
  							"NoDiversityCodesHaveBeenSelectedForSupplier"
  						constraint (!SupplierExpirationDatesNotEntered exists)
  							"ExpirationDatesMustBeAssignedToEachSupplierDiversityCode"
  						if (VendorGroupRel.DiversityValidWhenWithinDates)
  							constraint (!SupplierEffectiveDatesNotEntered exists)
  								"EffectiveDatesMustBeAssignedToEachSupplierDiversityCode"

  			Action Rules
  				TransientVendorClass = VendorClass
  				constraint (!Vendor entered)
  					"Vendor<Vendor>HasAlreadyBeenAssignedToSupplier<Supplier>"
  				constraint (SupplierStatus.Validated)
  					"CannotCreateVendorUntilSupplierIsValidated"
 				constraint (Active)
					"CannotCreateVendorWhenSupplierIsNotActive"
				if (!PrimaryContact.NotCompleteQuestions = blank)
	 				if (!PrimaryContact.NotCompleteCommodities = blank)
		  				constraint (PrimaryContact.RegistrationComplete)
	  						"CannotCreateVendorUntilRegistrationComplete.NotAllRequiredQuestionsAreAnswered.NoCommodityCodesAreRegistered"
					else
		  				constraint (PrimaryContact.RegistrationComplete)
	  						"CannotCreateVendorUntilRegistrationComplete.NotAllRequiredQuestionsAreAnswered"
				else
	 				if (!PrimaryContact.NotCompleteCommodities = blank)
		  				constraint (PrimaryContact.RegistrationComplete)
	  						"CannotCreateVendorUntilRegistrationComplete.NoCommodityCodesAreRegistered"
					else
		  				constraint (PrimaryContact.RegistrationComplete)
	  						"CannotCreateVendorUntilRegistrationComplete"
				if (TaxIdGroup.TaxIdType entered)
					if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning)
						if (VendorTaxIdsRel exists)
							confirmation required
								"Warning:Vendor<VendorWithDuplicateTaxID>FoundWithTheSameTaxId.DoYouWantToProceed?"
					else
					if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly)
						if (VendorTaxIdsOnlyRel exists)
							confirmation required
								"Warning:Vendor<VendorWithDuplicateTaxIDOnly>FoundWithTheSameTaxId.DoYouWantToProceed?"
					else
					if (SupplierGroup.AllowDuplicateTaxIds.No)
						constraint (!VendorTaxIdsRel exists)
							"Vendor<VendorWithDuplicateTaxID>FoundWithTheSameTaxId."
					else
					if (SupplierGroup.AllowDuplicateTaxIds.NoTaxIDOnly)
						constraint (!VendorTaxIdsOnlyRel exists)
							"Vendor<VendorWithDuplicateTaxIDOnly>FoundWithTheSameTaxId."
				if (VATRegistrationNumber entered)
					if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning
					or  SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly)
						if (VendorVATTaxRel exists)
							confirmation required
								"Warning:Vendor<VendorWithDuplicateVATTax>FoundWithTheSameVATTaxInformation.DoYouWantToProceed?"
					else
						constraint (VendorVATTaxRel !exists)
							"Vendor<VendorWithDuplicateVATTax>FoundWithTheSameVATTaxInformation"
				if (GlobalLocationNumber entered)
					if (GlobalLocationNumberRel exists)
						constraint (first GlobalLocationNumberRel.Active)
							"GlobalLocationNumber<first GlobalLocationNumberRel.GlobalLocationNumber>MustBeActive"

  				invoke Create Vendor
	  				assign result to NewVendor
 					invoked.VendorGroup			= SupplierGroup
					invoked.VendorName			= SupplierName
					invoked.VendorClass			= VendorClass
					invoked.VendorSearchName	= DoingBusinessAs
					invoked.TaxID				= TaxIdGroup.TaxId
					invoked.TaxIDType           = TaxIdGroup.TaxIdType
					invoked.ContactName			= PrimaryContact.MainContact.PresentationName
					invoked.PhoneNumber			= PrimaryContact.TelephoneNumber
					invoked.MobileNumber		= PrimaryContact.MobilePhone
					invoked.FaxNumber			= PrimaryContact.FaxNumber
					invoked.EmailAddress		= PrimaryContact.EmailAddress
					invoked.URLAddress			= WebAddress
					invoked.VendorAddress       = BillingAddress
					invoked.VATRegistrationCountry = VATRegistrationCountry
					invoked.VATRegistrationNumber  = VATRegistrationNumber
					invoked.BankAccountType     = BankInformationGroup.BankAccountType
					invoked.BankEntity          = BankInformationGroup.BankEntity
					invoked.BankAccountNumber   = BankInformationGroup.BankAccountNumber
					invoked.BankCurrency        = BankInformationGroup.BankCurrency
					invoked.CrossBorderIdentifier = BankInformationGroup.CrossBorderIdentifier
					invoked.SwiftID             = BankInformationGroup.SwiftID
					invoked.BankingCode         = BankInformationGroup.BankingCode
					invoked.BankID              = BankInformationGroup.BankID
					invoked.AssignmentNumber    = BankInformationGroup.AssignmentNumber
					invoked.GiroNumber          = BankInformationGroup.GiroNumber
					invoked.BACSReference       = BankInformationGroup.BACSReference
					invoked.BACSName            = BankInformationGroup.BACSName
					invoked.CreditCardNumber    = BankInformationGroup.CreditCardNumber
					if (BankInformationGroup.Country entered
					and BankInformationGroup.BankAccountNumber entered)
						LocalBankCountry        = BankInformationGroup.Country
						LocalBankAccountNumber  = BankInformationGroup.BankAccountNumber
						invoked.BankAccountValidationType = DerivedBankAccountValidationType

				if (TransferCertifications
				and CanCreateVendorCertification)
					for each ActiveSupplierCertRel
	 					invoke Create VendorCertification
	 						invoked.VendorGroup  				= SupplierGroup
 							invoked.Vendor 	 	 				= NewVendor.Vendor
 							invoked.PayablesCertificationCode	= each.SupplierCertification.PayablesCertificationCode
 							invoked.CertificationEffectiveDate 	= each.SupplierCertification.CertificationEffectiveDate
 							invoked.CertificationExpirationDate = each.CertificationExpirationDate

				if (TransferDiversityCodes)
					for each SupplierDiversityResponse set
						invoke Create VendorDiversity
							invoked.VendorGroup				= SupplierGroup
							invoked.Vendor					= NewVendor.Vendor
							invoked.DiversityCode			= each.PayablesDiversityCode
							invoked.DiversityEffectiveDate	= each.EffectiveDate
							invoked.DiversityExpirationDate	= each.ExpirationDate
							invoked.ReviewDate				= each.ReviewDate
							invoked.Active                  = each.Active
							invoked.CertificationComplete   = each.CertificationComplete
							invoked.Alerts                  = each.Alerts
							invoked.Attachment              = each.Attachment

					invoke Update ExistingVendor
						invoked.DiversityCode				= first SupplierDiversityResponse set.PayablesDiversityCode

				if (CreatePoVendor)
	  				invoke Create PurchasingVendor
						invoked.VendorGroup			= SupplierGroup
						invoked.Vendor				= NewVendor.Vendor

				invoke Create VendorAndSupplier
					invoked.VendorGroup					= SupplierGroup
					invoked.Vendor						= NewVendor.Vendor
					invoked.Supplier					= Supplier
					invoked.DunAndBradstreetNumber      = DandBNbr

			Exit Rules
				if (GlobalLocationNumber entered)
					if (!GlobalLocationNumberRel exists)
						invoke Create GlobalLocationNumber
							invoked.ItemGroup				= SupplierGroup
							invoked.GlobalLocationNumber	= GlobalLocationNumber
			  				invoked.Active					= true

					invoke Create GlobalLocationNumberDetail
						invoked.ItemGroup											= SupplierGroup
						invoked.GlobalLocationNumber 								= GlobalLocationNumber
						invoked.GlobalLocationNumberDetail.GlobalLocationNumberType = 7
						invoked.VendorAndVendorLocation.Vendor						= NewVendor.Vendor

					if (CreatePoVendor)
						invoke Create GlobalLocationNumberDetail
							invoked.ItemGroup													= SupplierGroup
							invoked.GlobalLocationNumber 										= GlobalLocationNumber
							invoked.GlobalLocationNumberDetail.GlobalLocationNumberType   		= 9
							invoked.PurchasingVendorAndPurchaseFromLocation.PurchasingVendor    = NewVendor.Vendor

				Vendor    = NewVendor.Vendor
				for each SupplierSourceId set
					invoke UpdateVendor each
						invoked.ParmNewVendor				= Vendor
				SupplierStatus = SupplierStatus.Validated

				for each SupplierOpenContractRel
					invoke UpdateVendorFromSupplier each
						invoked.NewVendor = Vendor

		EmailCertificationToSupplier is an Instance Action
			default label is "SendEmail"
			valid when (EmailCertificationToSupplierValid)
			Parameters
				ToEmail 		is an EmailAddress 
					holds pii
				FromEmail  		is an EmailAddress 
					holds pii
				Subject   		is Text
				EmailContents 	is Text

			Parameter Rules
				ToEmail
					initial value is PrimaryContact.EmailAddress
				FromEmail
					initial value is actor.ContactInfo.EmailAddress
					required
				Subject
					initial value is SupplierGroupExtensionRel.ExpiringCertificationsEmailSubject
					required
				EmailContents
					initial value is SupplierGroupExtensionRel.ExpiringCertificationsEmailContent + SupplierGroup.NewLine + ExpiringCertificationsMessageContents
					required

			Action Rules
				send email
					to ToEmail
					from FromEmail
					subject "<Subject>"
					Contents
						"<EmailContents>"

				SentCertificationNotice = current corporate date

				invoke Create SupplierContactMessage
					invoked.SupplierGroup 					= PrimaryContact.SupplierGroup
					invoked.Supplier 						= PrimaryContact.Supplier
					invoked.SupplierSourceId				= PrimaryContact.SupplierSourceId
					invoked.CreationDateTime				= current timestamp
					invoked.MessageTitle					= Subject
					invoked.MessageText						= EmailContents
					invoked.Status							= 1
					invoked.Priority						= 2
					invoked.SystemGenerated					= true
					invoked.ReleaseStatus					= 2
					invoked.MessageOwner                    = actor.agent(Employee).Employee

		EmailDiversityToSupplier is an Instance Action
			default label is "SendEmail"
			valid when (EmailDiversityToSupplierValid)
			Parameters
				ToEmail 		is an EmailAddress 
					holds pii
				FromEmail  		is an EmailAddress 
					holds pii
				Subject   		is Text
				EmailContents 	is Text

			Parameter Rules
				ToEmail
					initial value is PrimaryContact.EmailAddress
				FromEmail
					initial value is actor.ContactInfo.EmailAddress
					required
				Subject
					initial value is SupplierGroupExtensionRel.ExpiringDiversityEmailSubject
					required
				EmailContents
					initial value is SupplierGroupExtensionRel.ExpiringDiversityEmailContent + SupplierGroup.NewLine + ExpiringDiversityMessageContents
					required

			Action Rules
				send email
					to ToEmail
					from FromEmail
					subject "<Subject>"
					Contents
						"<EmailContents>"

				SentDiversityNotice = current corporate date

				invoke Create SupplierContactMessage
					invoked.SupplierGroup 					= PrimaryContact.SupplierGroup
					invoked.Supplier 						= PrimaryContact.Supplier
					invoked.SupplierSourceId				= PrimaryContact.SupplierSourceId
					invoked.CreationDateTime				= current timestamp
					invoked.MessageTitle					= Subject
					invoked.MessageText						= EmailContents
					invoked.Status							= 1
					invoked.Priority						= 2
					invoked.SystemGenerated					= true
					invoked.ReleaseStatus					= 2
					invoked.MessageOwner                    = actor.agent(Employee).Employee

		ActivateSupplier is an Instance Action
			valid when (ActivateSupplierValid)

			Action Rules
				Active = true
				for each SupplierSourceIdInactiveRel
					invoke ActivateSupplierContact each

		InactivateSupplier is an Instance Action
			valid when (Active)

			subject is InactivateSupplier
			reason code required
			confirmation required
				"InactivatingThisSupplierWillPreventAccessToTheSupplierPortal;DoYouWantToContinue?"

			Action Rules
				Active = false
				InactiveTimeStamp = current timestamp
				for each SupplierSourceIdActiveRel
					invoke InactivateSupplierContact each 

		CompareSupplierAndVendor is a Set Action
			restricted
			Parameters
				ParmSupplierGroup		is a SupplierGroup
				ParmSupplier            is a Supplier
				CompareSupplier			is Boolean
				CompareContacts			is Boolean
				CompareDiversity		is Boolean
				CompareCertification	is Boolean
				SupplierList			is a Supplier group

			Parameter Rules
				ParmSupplierGroup
					required
				ParmSupplier
					if (ParmSupplier entered)
						constraint (SupplierList !entered)
							"CannotEnterBothASupplierAndSupplierList"
						constraint (ParmSupplier.Vendor entered)
							"SupplierMustHaveAVendorToCompareTo"
				CompareSupplier
					initial value is true
				CompareContacts
					initial value is true
				CompareDiversity
					initial value is true
				CompareCertification
					initial value is true
				SupplierList
					if (SupplierList entered)
						constraint (ParmSupplier !entered)
							"CannotEnterBothASupplierAndSupplierList"

			Instance Selection
				where (ParmSupplierGroup = SupplierGroup
				and   (ParmSupplier !entered
				or     ParmSupplier 	 = Supplier)
				and    Vendor entered)

			Sort Order
				SupplierGroup
				Supplier

			Action Rules
				SupplierGroup Set Rules
					Entrance Rules
						if (ParmSupplier !entered)
							invoke Purge SupplierVendorMismatchSupplierGroupRel
						ParmSupplierGroup   = SupplierGroup

				Instance Rules
					LocalSupplierGroup = ParmSupplierGroup
					LocalSupplier      = ParmSupplier
					if (ParmSupplier entered)
						invoke Purge LocalSupplierVendorMismatchRel

					if ((SupplierList not entered
					or 	 Supplier within SupplierList)
					and  Active = true
					and  Vendor.VendorStatus.Active)

				 		if (CompareSupplier
				 		and SupplierName    != Vendor.VendorName)
				 			if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
				 			invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type 					 	= 1
								invoked.SupplierValue 				= SupplierName
								invoked.VendorValue   				= Vendor.VendorName
						if (CompareSupplier
						and TaxIdGroup.TaxId    != Vendor.TaxID)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type						= 2
								invoked.SupplierValue 				= TaxIdGroup.TaxId
								invoked.VendorValue   				= Vendor.TaxID
						if (CompareSupplier
						and VATRegistrationCountry    != Vendor.VATRegistrationCountry)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type						= 35
								invoked.SupplierValue 				= VATRegistrationCountry
								invoked.VendorValue   				= Vendor.VATRegistrationCountry
						if (CompareSupplier
						and VATRegistrationNumber    != Vendor.VATRegistrationNumber)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type						= 36
								invoked.SupplierValue 				= VATRegistrationNumber
								invoked.VendorValue   				= Vendor.VATRegistrationNumber
						if (GlobalLocationNumber	!= Vendor.GlobalLocationNumber
				 		and CompareSupplier)
				 			if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
				 			invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 3
								invoked.SupplierValue 				= GlobalLocationNumber
								invoked.VendorValue   				= Vendor.GlobalLocationNumber
						if (CompareSupplier
						and WebAddress	!= Vendor.URLAddress)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
					 			invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier 					= Supplier
								invoked.Type					 	= 5
								invoked.SupplierValue 				= WebAddress
								invoked.VendorValue   				= Vendor.URLAddress
						if (CompareSupplier
						and !SameAsAddressAbove
						and BillingAddress.DeliveryAddress.AddressLine1 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine1)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type						= 76
								invoked.SupplierValue 				= BillingAddress.DeliveryAddress.AddressLine1
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine1
						if (CompareSupplier
						and SameAsAddressAbove
						and MailingAddress.DeliveryAddress.AddressLine1 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine1)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 6
								invoked.SupplierValue 				= MailingAddress.DeliveryAddress.AddressLine1
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine1
						if (CompareSupplier
						and !SameAsAddressAbove
						and BillingAddress.DeliveryAddress.AddressLine2 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine2)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 77
								invoked.SupplierValue 				= BillingAddress.DeliveryAddress.AddressLine2
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine2
						if (CompareSupplier
						and SameAsAddressAbove
						and MailingAddress.DeliveryAddress.AddressLine2 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine2)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 7
								invoked.SupplierValue 				= MailingAddress.DeliveryAddress.AddressLine2
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine2
						if (CompareSupplier
						and !SameAsAddressAbove
						and BillingAddress.DeliveryAddress.AddressLine3 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine3)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 78
								invoked.SupplierValue 				= BillingAddress.DeliveryAddress.AddressLine3
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine3
						if  (CompareSupplier
						and SameAsAddressAbove
						and  MailingAddress.DeliveryAddress.AddressLine3 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine3)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 8
								invoked.SupplierValue 				= MailingAddress.DeliveryAddress.AddressLine3
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine3
						if (CompareSupplier
						and !SameAsAddressAbove
						and BillingAddress.DeliveryAddress.AddressLine4 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine4)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 79
								invoked.SupplierValue 				= BillingAddress.DeliveryAddress.AddressLine4
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine4
						if  (CompareSupplier
						and SameAsAddressAbove
						and  MailingAddress.DeliveryAddress.AddressLine4 != CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine4)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 9
								invoked.SupplierValue 				= MailingAddress.DeliveryAddress.AddressLine4
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.DeliveryAddress.AddressLine4
						if (CompareSupplier
					 	and !SameAsAddressAbove
					 	and BillingAddress.Municipality	!= CurrentVendorAddress.PostalAddress.Municipality)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 80
								invoked.SupplierValue 				= BillingAddress.Municipality
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.Municipality
						if (CompareSupplier
						and SameAsAddressAbove
						and MailingAddress.Municipality != CurrentVendorAddress.PostalAddress.Municipality)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 10
								invoked.SupplierValue 				= MailingAddress.Municipality
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.Municipality
						if (CompareSupplier
						and !SameAsAddressAbove
						and BillingAddress.StateProvince    != CurrentVendorAddress.PostalAddress.StateProvince)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 81
								invoked.SupplierValue 				= BillingAddress.StateProvince
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.StateProvince
						if (CompareSupplier
						and SameAsAddressAbove
						and MailingAddress.StateProvince    != CurrentVendorAddress.PostalAddress.StateProvince)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 11
								invoked.SupplierValue 				= MailingAddress.StateProvince
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.StateProvince
						if (CompareSupplier
					 	and !SameAsAddressAbove
					 	and BillingAddress.PostalCode	!= CurrentVendorAddress.PostalAddress.PostalCode)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 82
								invoked.SupplierValue 				= BillingAddress.PostalCode
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.PostalCode
						if (CompareSupplier
					 	and SameAsAddressAbove
					 	and MailingAddress.PostalCode	!= CurrentVendorAddress.PostalAddress.PostalCode)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
					 			invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 12
								invoked.SupplierValue 				= MailingAddress.PostalCode
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.PostalCode
						if (CompareSupplier
						and !SameAsAddressAbove
						and BillingAddress.County    != CurrentVendorAddress.PostalAddress.County)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 83
								invoked.SupplierValue 				= BillingAddress.County
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.County
						if (CompareSupplier
						and SameAsAddressAbove
						and MailingAddress.County    != CurrentVendorAddress.PostalAddress.County)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 13
								invoked.SupplierValue 				= MailingAddress.County
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.County
						if (CompareSupplier
					 	and !SameAsAddressAbove
					 	and BillingAddress.Country	!= CurrentVendorAddress.PostalAddress.Country)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 84
								invoked.SupplierValue 				= BillingAddress.Country
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.Country
						if (CompareSupplier
					 	and SameAsAddressAbove
					 	and MailingAddress.Country	!= CurrentVendorAddress.PostalAddress.Country)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 14
								invoked.SupplierValue 				= MailingAddress.Country
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.Country
						if (SupplierGroup.DisplayTypeForRegistration)
							if (CompareSupplier
						 	and !SameAsAddressAbove
						 	and BillingAddress.Type	!= CurrentVendorAddress.PostalAddress.Type)
						 		if (!SupplierVendorMismatchRel exists)
					 				invoke Create SupplierVendorMismatch
										invoked.SupplierGroup                        = SupplierGroup
										invoked.Supplier                             = Supplier
										invoked.Vendor						         = Vendor
						 		invoke Create SupplierVendorMismatchDetail
									invoked.SupplierGroup		  		= SupplierGroup
									invoked.Supplier					= Supplier
									invoked.Type					 	= 85
									invoked.SupplierValue 				= BillingAddress.Type
									invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.Type
							if (CompareSupplier
						 	and SameAsAddressAbove
						 	and MailingAddress.Type	!= CurrentVendorAddress.PostalAddress.Type)
						 		if (!SupplierVendorMismatchRel exists)
					 				invoke Create SupplierVendorMismatch
										invoked.SupplierGroup                        = SupplierGroup
										invoked.Supplier                             = Supplier
										invoked.Vendor						         = Vendor
						 		invoke Create SupplierVendorMismatchDetail
									invoked.SupplierGroup		  		= SupplierGroup
									invoked.Supplier					= Supplier
									invoked.Type					 	= 70
									invoked.SupplierValue 				= MailingAddress.Type
									invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.Type
						if (CompareSupplier
						and SameAsAddressAbove
						and MailingAddress.Region	!= CurrentVendorAddress.PostalAddress.Region)
						 	if (!SupplierVendorMismatchRel exists)
					 			invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
						 	invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 86
								invoked.SupplierValue 				= MailingAddress.Region
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.Region
						if (CompareSupplier
						and !SameAsAddressAbove
						and BillingAddress.Region	!= CurrentVendorAddress.PostalAddress.Region)
						 	if (!SupplierVendorMismatchRel exists)
					 			invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 90
								invoked.SupplierValue 				= BillingAddress.Region
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.Region
						if (CompareSupplier
						and SameAsAddressAbove
						and MailingAddress.NationalIDNumber	!= CurrentVendorAddress.PostalAddress.NationalIDNumber)
						 	if (!SupplierVendorMismatchRel exists)
					 			invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
						 	invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 87
								invoked.SupplierValue 				= MailingAddress.NationalIDNumber
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.NationalIDNumber
						if (CompareSupplier
						and !SameAsAddressAbove
						and BillingAddress.NationalIDNumber	!= CurrentVendorAddress.PostalAddress.NationalIDNumber)
						 	if (!SupplierVendorMismatchRel exists)
					 			invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
						 	invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 91
								invoked.SupplierValue 				= BillingAddress.NationalIDNumber
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.NationalIDNumber
						if (CompareSupplier
						and SameAsAddressAbove
						and MailingAddress.LocaleIDNumber	!= CurrentVendorAddress.PostalAddress.LocaleIDNumber)
						 	if (!SupplierVendorMismatchRel exists)
					 			invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 88
								invoked.SupplierValue 				= MailingAddress.LocaleIDNumber
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.LocaleIDNumber
						if (CompareSupplier
					 	and !SameAsAddressAbove
					 	and BillingAddress.LocaleIDNumber	!= CurrentVendorAddress.PostalAddress.LocaleIDNumber)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
						 	invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 92
								invoked.SupplierValue 				= BillingAddress.LocaleIDNumber
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.LocaleIDNumber
						if (CompareSupplier
						and SameAsAddressAbove
						and MailingAddress.IndividualIDNumber	!= CurrentVendorAddress.PostalAddress.IndividualIDNumber)
						 	if (!SupplierVendorMismatchRel exists)
					 			invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
						 	invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 89
								invoked.SupplierValue 				= MailingAddress.IndividualIDNumber
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.IndividualIDNumber
						if (CompareSupplier
						and !SameAsAddressAbove
						and BillingAddress.IndividualIDNumber	!= CurrentVendorAddress.PostalAddress.IndividualIDNumber)
						 	if (!SupplierVendorMismatchRel exists)
					 			invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
						 	invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 93
								invoked.SupplierValue 				= BillingAddress.IndividualIDNumber
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.IndividualIDNumber
						if (CompareSupplier
						and SameAsAddressAbove
						and MailingAddress.StateProvinceIDNumber	!= CurrentVendorAddress.PostalAddress.StateProvinceIDNumber)
						 	if (!SupplierVendorMismatchRel exists)
					 			invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
						 	invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 94
								invoked.SupplierValue 				= MailingAddress.StateProvinceIDNumber
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.StateProvinceIDNumber
						if (CompareSupplier
						and !SameAsAddressAbove
						and BillingAddress.StateProvinceIDNumber	!= CurrentVendorAddress.PostalAddress.StateProvinceIDNumber)
						 	if (!SupplierVendorMismatchRel exists)
					 			invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
						 	invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 95
								invoked.SupplierValue 				= BillingAddress.StateProvinceIDNumber
								invoked.VendorValue   				= CurrentVendorAddress.PostalAddress.StateProvinceIDNumber
						if (CompareSupplier
						and PrimaryContact.MainContact.PresentationName  != Vendor.ContactName)
							if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
							invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					    = 15
								invoked.SupplierValue 				= PrimaryContact.MainContact.PresentationName
								invoked.VendorValue   				= Vendor.ContactName
						if (CompareSupplier
						and PrimaryContact.TelephoneNumber.InternationalPrefix	!= Vendor.PhoneNumber.InternationalPrefix)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 64
								invoked.SupplierValue 				= PrimaryContact.TelephoneNumber.InternationalPrefix
								invoked.VendorValue   				= Vendor.PhoneNumber.InternationalPrefix
						if (CompareSupplier
						and PrimaryContact.TelephoneNumber.SubscriberNumber	!= Vendor.PhoneNumber.SubscriberNumber)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 17
								invoked.SupplierValue 				= PrimaryContact.TelephoneNumber.SubscriberNumber
								invoked.VendorValue   				= Vendor.PhoneNumber.SubscriberNumber
						if (CompareSupplier
						and PrimaryContact.TelephoneNumber.Extension != Vendor.PhoneNumber.Extension)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 18
								invoked.SupplierValue 				= PrimaryContact.TelephoneNumber.Extension
								invoked.VendorValue   				= Vendor.PhoneNumber.Extension
						if (CompareSupplier
						and PrimaryContact.MobilePhone.MobilePhoneNumber.InternationalPrefix	!= Vendor.MobileNumber.MobilePhoneNumber.InternationalPrefix)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 66
								invoked.SupplierValue 				= PrimaryContact.MobilePhone.MobilePhoneNumber.InternationalPrefix
								invoked.VendorValue   				= Vendor.MobileNumber.MobilePhoneNumber.InternationalPrefix
						if (CompareSupplier
						and PrimaryContact.MobilePhone.MobilePhoneNumber.SubscriberNumber	!= Vendor.MobileNumber.MobilePhoneNumber.SubscriberNumber)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 33
								invoked.SupplierValue 				= PrimaryContact.MobilePhone.MobilePhoneNumber.SubscriberNumber
								invoked.VendorValue   				= Vendor.MobileNumber.MobilePhoneNumber.SubscriberNumber
						if (CompareSupplier
						and PrimaryContact.MobilePhone.MobilePhoneNumber.Extension != Vendor.MobileNumber.MobilePhoneNumber.Extension)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 34
								invoked.SupplierValue 				= PrimaryContact.MobilePhone.MobilePhoneNumber.Extension
								invoked.VendorValue   				= Vendor.MobileNumber.MobilePhoneNumber.Extension
						if (CompareSupplier
						and PrimaryContact.FaxNumber.InternationalPrefix	!= Vendor.FaxNumber.InternationalPrefix)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 65
								invoked.SupplierValue 				= PrimaryContact.FaxNumber.InternationalPrefix
								invoked.VendorValue   				= Vendor.FaxNumber.InternationalPrefix
						if (CompareSupplier
						and PrimaryContact.FaxNumber.SubscriberNumber	!= Vendor.FaxNumber.SubscriberNumber)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 20
								invoked.SupplierValue 				= PrimaryContact.FaxNumber.SubscriberNumber
								invoked.VendorValue   				= Vendor.FaxNumber.SubscriberNumber
						if (CompareSupplier
						and PrimaryContact.FaxNumber.Extension != Vendor.FaxNumber.Extension)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 21
								invoked.SupplierValue 				= PrimaryContact.FaxNumber.Extension
								invoked.VendorValue   				= Vendor.FaxNumber.Extension
						if (CompareSupplier
						and PrimaryContact.EmailAddress != Vendor.EmailAddress)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 22
								invoked.SupplierValue 				= PrimaryContact.EmailAddress
								invoked.VendorValue   				= Vendor.EmailAddress

						if (CompareSupplier
						and BankInformationGroup.BankAccountNumber != Vendor.BankAccountNumber)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 37
								invoked.SupplierValue 				= BankInformationGroup.BankAccountNumber
								invoked.VendorValue   				= Vendor.BankAccountNumber

						if (CompareSupplier
						and BankInformationGroup.BankEntity != Vendor.BankEntity)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 38
								invoked.SupplierValue 				= BankInformationGroup.BankEntity
								invoked.VendorValue   				= Vendor.BankEntity

						if (CompareSupplier
						and BankInformationGroup.BankAccountType != Vendor.BankAccountType)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 39
								invoked.SupplierValue 				= BankInformationGroup.BankAccountType
								invoked.VendorValue   				= Vendor.BankAccountType

						if (CompareSupplier
						and BankInformationGroup.BankCurrency != Vendor.BankCurrency)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 40
								invoked.SupplierValue 				= BankInformationGroup.BankCurrency
								invoked.VendorValue   				= Vendor.BankCurrency

						if (CompareSupplier
						and BankInformationGroup.CrossBorderIdentifier != Vendor.CrossBorderIdentifier)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 41
								invoked.SupplierValue 				= BankInformationGroup.CrossBorderIdentifier
								invoked.VendorValue   				= Vendor.CrossBorderIdentifier

						if (CompareSupplier
						and BankInformationGroup.SwiftID != Vendor.SwiftID)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 42
								invoked.SupplierValue 				= BankInformationGroup.SwiftID
								invoked.VendorValue   				= Vendor.SwiftID

						if (CompareSupplier
						and BankInformationGroup.BankingCode != Vendor.BankingCode)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 43
								invoked.SupplierValue 				= BankInformationGroup.BankingCode
								invoked.VendorValue   				= Vendor.BankingCode

						if (CompareSupplier
						and BankInformationGroup.BankID != Vendor.BankID)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 44
								invoked.SupplierValue 				= BankInformationGroup.BankID
								invoked.VendorValue   				= Vendor.BankID

						if (CompareSupplier
						and BankInformationGroup.AssignmentNumber != Vendor.AssignmentNumber)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 45
								invoked.SupplierValue 				= BankInformationGroup.AssignmentNumber
								invoked.VendorValue   				= Vendor.AssignmentNumber

						if (CompareSupplier
						and BankInformationGroup.GiroNumber != Vendor.GiroNumber)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 46
								invoked.SupplierValue 				= BankInformationGroup.GiroNumber
								invoked.VendorValue   				= Vendor.GiroNumber

						if (CompareSupplier
						and BankInformationGroup.BACSReference != Vendor.BACSReference)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 47
								invoked.SupplierValue 				= BankInformationGroup.BACSReference
								invoked.VendorValue   				= Vendor.BACSReference

						if (CompareSupplier
						and BankInformationGroup.BACSName != Vendor.BACSName)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 48
								invoked.SupplierValue 				= BankInformationGroup.BACSName
								invoked.VendorValue   				= Vendor.BACSName

						if (CompareSupplier
						and BankInformationGroup.CreditCardNumber != Vendor.CreditCardNumber)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 49
								invoked.SupplierValue 				= BankInformationGroup.CreditCardNumber
								invoked.VendorValue   				= Vendor.CreditCardNumber
						if (CompareSupplier
						and TaxIdGroup.TaxIdType != Vendor.TaxIDType)
					 		if (!SupplierVendorMismatchRel exists)
				 				invoke Create SupplierVendorMismatch
									invoked.SupplierGroup                        = SupplierGroup
									invoked.Supplier                             = Supplier
									invoked.Vendor						         = Vendor
					 		invoke Create SupplierVendorMismatchDetail
								invoked.SupplierGroup		  		= SupplierGroup
								invoked.Supplier					= Supplier
								invoked.Type					 	= 63
								invoked.SupplierValue 				= TaxIdGroup.TaxIdType
								invoked.VendorValue   				= Vendor.TaxIDType

						if (CompareContacts)
							for each SupplierSourceIdMismatch
	 							invoke CreateContactMismatchDetail each

						if (CompareDiversity)
							for each DiversityRel
								invoke DiversityCompare each
							for each VendorDiversityRel
								invoke VendorDiversityCompare each
									invoked.ParmSupplier = Supplier

						if (CompareCertification)
							for each SupplierCertificationRel
								invoke SupplierCertificationCompare each
							for each SupplierLocationCertificationRel
								invoke SupplierLocationCertificationCompare each
							for each VendorCertificationRel
								invoke VendorCertificationCompare each
									invoked.ParmSupplier = Supplier
							for each VendorLocationCertificationRel
								invoke VendorLocationCertificationCompare each
									invoked.ParmSupplier = Supplier
		UpdateBankInformationCountry is a Set Action
			restricted
			Parameters
				SupplierGroup

			Instance Selection
				where (SupplierGroup = SupplierGroup)

			Action Rules

				Instance Rules
					if (BankInformationGroup.Country !entered)
						BankInformationGroup.Country = BillingAddress.Country

		CreateAndUpdateSupplierSearch is a Set Action
			restricted
			Parameters
				PrmSupplierGroup        is a SupplierGroup
					default label is "SupplierGroup"

			Parameter Rules
				PrmSupplierGroup
					required
						"SupplierGroupIsRequired"

			Instance Selection
				where (SupplierGroup = PrmSupplierGroup)

			Action Rules
				Instance Rules
					include BuildTextIndexes

		CreateAdHocSupplierMessages is a Set Action
			restricted
			Parameters
				ParmSupplierGroup         is a SupplierGroup
					default label is "SupplierGroup"
				ParmRunGroup              is a RunGroup
					default label is "RunGroup"
				ParmInactive              is Boolean
					default label is "IncludeInactiveSuppliers"
				ParmVendorOnly            is Boolean
					default label is "IncludeOnlySuppliersWithVendors"
				ParmRecentActivity        is Numeric 3   
					default label is "ActivityWithinEnteredNumberOfDays"
				ParmSubmittedBid          is Boolean
					default label is "HasSubmittedBids"
				ParmCommodityCode         is a CommodityCode	
					default label is "IncludeOnlySuppliersUsingThisCommodityCode"
				ParmMissingBankingInfo    is Boolean
					default label is "OnlySuppliersMissingBankingInformation"
				ParmUnsubmittedInvoice    is Boolean
					default label is "OnlySuppliersWithUnsubmittedSupplierCreatedInvoices"
				ParmStandardMessaging     is Boolean
					default label is "UseStandardMessaging"
				ParmMessageTitle		  is Alpha 100
					default label is "MessageTitle"
				ParmMessageText    		  is Text
					default label is "Message"
				ParmPriority              is Numeric 1
					States
						Low				  value is 1
						Normal			  value is 2
						High			  value is 3
					default label is "Priority"
				ParmAttachment			  is an Attachment
					default label is "Attachment"
				ParmRelease               is Boolean
					default label is "ImmediatelyReleaseMessage"
				ParmMessageOwner          is an Employee
					default label is "DialogContact"

			Parameter Rules
				ParmSupplierGroup
					required
				ParmRunGroup
					if (!ParmRelease)
						required
				ParmMessageTitle
					if (!ParmStandardMessaging)
						required
				ParmMissingBankingInfo
					if (ParmMissingBankingInfo)
						constraint (!ParmUnsubmittedInvoice)
							"CannotSendMessagesForBothMissingBankInformationAndUnsubmittedSupplierCreatedInvoices"
				ParmUnsubmittedInvoice
					if (ParmUnsubmittedInvoice)
						constraint (!ParmMissingBankingInfo)
							"CannotSendMessagesForBothMissingBankInformationAndUnsubmittedSupplierCreatedInvoices"
						constraint (ParmVendorOnly)
							"MustCheck_IncludeOnlySuppliersWithVendors_IfRunningForUnsubmittedSupplierCreatedInvoices"
				ParmPriority
					initial value is ParmPriority.Normal
				ParmRecentActivity
					if (ParmRecentActivity entered)
						constraint (ParmVendorOnly)
							"MustCheck_IncludeOnlySuppliersWithVendors_IfRunningForActivityWithinEnteredNumberOfDays"
				ParmMessageOwner
					initial value is (first SupplierGroupPortalContactRel.Contact)
					required
					LocalSupplierGroup = ParmSupplierGroup
					LocalContact       = ParmMessageOwner
					if (ParmMessageOwner entered)
						constraint (SupplierGroupPortalContactsRel exists)
							"DialogContactMustBeAValidSupplierGroupPortalContact"
				ParmStandardMessaging
					if (!ParmMissingBankingInfo
					and !ParmUnsubmittedInvoice)
						ParmStandardMessaging = false

			Instance Selection
				where (ParmSupplierGroup  = SupplierGroup
				and   (ParmInactive       = true
				or     Active             = true)
				and   (ParmVendorOnly     = false
				or     Vendor entered)
				and   (ParmSubmittedBid   = false
				or     HasSubmittedResponses))

			Action Rules

				Instance Rules
					LocalSupplierGroup          = ParmSupplierGroup
					LocalSupplier               = Supplier
					LocalVendor                 = Vendor
					LocalCommodityCode  		= ParmCommodityCode
					LocalNumberOfDays           = ParmRecentActivity
					if  ((ParmCommodityCode !entered
					or    SupplierCommodityCodeForACodeRel exists)
					and  (ParmRecentActivity !entered
					or    SomeActivityInPastMonths)
					and  (ParmUnsubmittedInvoice = false
					or    SupplierHasUnsubmittedInvoices)
					and  (ParmMissingBankingInfo = false
					or    HasNoBankInformation))

						invoke Create SupplierMessage
							invoked.SupplierGroup 		= ParmSupplierGroup
							invoked.Supplier 			= Supplier
							invoked.RunGroup            = ParmRunGroup
							if (!ParmStandardMessaging)
								invoked.MessageTitle	= ParmMessageTitle
							else
							if (ParmMissingBankingInfo)
								invoked.MessageTitle    = "Missing Bank Information"
							else
							if (ParmUnsubmittedInvoice)
								invoked.MessageTitle    = "Unsubmitted Invoices"
							if (!ParmStandardMessaging)
								invoked.MessageText 	= ParmMessageText
							else
							if (ParmMissingBankingInfo)
								invoked.MessageText     = "Please Enter Bank Information On Your Supplier Record. Select My Account To Enter Information"
							else
							if (ParmUnsubmittedInvoice)
								invoked.MessageText 	= "Please Submit Invoices In Supplier Portal To Allow Them To Be Processed. Select Order Management; Manage Supplier Created Invoices"
							invoked.Priority 			= ParmPriority
							invoked.Attachment		 	= ParmAttachment
							invoked.LocalRelease    	= ParmRelease
							invoked.MessageOwner        = ParmMessageOwner

		UpdateOIGExclusionStatus is an Instance Action		
			restricted
			default label is untranslatable
			Parameters
				PrmOIGExclusionStatus		is a OIGExclusionStatus
				PrmOIGValidationDate		is Date
			Parameter Rules
				PrmOIGExclusionStatus
					required
				PrmOIGValidationDate
					default to current corporate date
			Entrance Rules
				PreviousExclusionStatus	= OIGExclusionStatus
			Action Rules
				OIGExclusionStatus		= PrmOIGExclusionStatus
				OIGValidationDate		= PrmOIGValidationDate

		Anonymize is an Instance Action	
			restricted
			Parameters
				PrmFromVendor			is Boolean

			Action Rules
				if (AnonymizeLogAnonymizeRelExists)
					confirmation required
						"Warning,TheAnonymizeActionIsNonReversableAndAnonymizeRecordAlreadyExists;AreYouSureYouWantToContinue?"
					confirmation required
						"ProceedToAnonymizeAgain?"
				else
					confirmation required
						"Warning,TheAnonymizeActionIsNonReversable;AreYouSureYouWantToContinue?"
					confirmation required
						"ProceedToAnonymize?"

				for each SupplierSourceId set
					invoke Anonymize each

				if (Vendor entered)
					invoke Anonymize ExistingVendor
						invoked.PrmFromSupplier = true

				SupplierName        = Supplier
				if (TaxIdGroup.TaxId entered)
					TaxIdGroup.TaxId = Supplier
				if (VATRegistrationNumber entered)
					VATRegistrationNumber = Supplier
				initialize DoingBusinessAs
				initialize DandBNbr
				MailingAddress.Municipality = Supplier
				MailingAddress.PostalCode   = Supplier
				MailingAddress.DeliveryAddress = Supplier
				initialize MailingAddress.GeoLatitude
				initialize MailingAddress.GeoLongitude
				initialize MailingAddress.GeoAltitude
				SameAsAddressAbove = true
				initialize BillingAddress
				initialize BillingFirstName
				initialize BillingLastName
				initialize WebAddress
				initialize VendormateLogin
				initialize VendormateEntityId
				initialize BankInformationGroup

			Exit Rules
				invoke Create AnonymizeLog
					invoked.FinanceEnterpriseGroup		= SupplierGroup.FinanceEnterpriseGroup
					invoked.Status						= 1
					invoked.AffectedBusinessClass		= "PC1"
					invoked.SupplierGroup				= SupplierGroup
					invoked.Supplier					= Supplier

		PurgeAuditLog is an Instance Action	
			restricted
			Parameters
				PrmFromVendor			is Boolean
			Action Rules
				constraint (AnonymizeLogAnonymizeRelExists)
					"CannotPurge;SupplierMustBeAnonymizedFirst"
				if (AnonymizeLogPurgeRelExists)
					confirmation required
						"Warning,ThePurgeAuditLogActionIsNonReversableAndAnonymizeRecordAlreadyExists;AreYouSureYouWantToContinue?"
					confirmation required
						"ProceedToPurgeAuditLogAgain?"
				else
					confirmation required
						"Warning,ThePurgeAuditLogActionIsNonReversable;AreYouSureYouWantToContinue?"
					confirmation required
						"ProceedToPurgeAuditLog?"

				invoke PurgeAuditLog SupplierSourceId set

				if (Vendor entered)
					invoke PurgeAuditLog ExistingVendor
						invoked.PrmFromSupplier     = true

				invoke purge audit log entries

		  	Exit Rules
				invoke Create AnonymizeLog
					invoked.FinanceEnterpriseGroup		= SupplierGroup.FinanceEnterpriseGroup
					invoked.Status						= 2
					invoked.AffectedBusinessClass		= "PC1"
					invoked.SupplierGroup				= SupplierGroup
					invoked.Supplier					= Supplier

	StateCycles
		SupplierLifeCycle is a StateCycle
			state field is SupplierStatus

			NeedsValidation is a State
				RequestValidation is an Instance Action
					Action Rules
						if (!Active)
							confirmation required
								"Warning:InactiveSupplier;RequestingValidationWillActivateTheSupplier.DoYouWantToContinue?"
		  				constraint (FullyRegistered)
							"CannotRequestValidationUntilRegistrationStatusIsCompleteForAllActiveSupplierContacts-SearchSupplierContactsListForContactsWhereRegistrationStatusIsNotComplete"
						constraint (TaxIdGroup entered or VATRegistrationNumber entered)
							"MustEnterTaxInformation"
						constraint (MailingAddress.DeliveryAddress entered)
							"AddressLine1IsRequired"
						constraint (PrimaryContact.MainContact entered)
							"PrimaryContactGivenNameRequired"
						constraint (PrimaryContact.TelephoneNumber entered)
							"PhoneNumberMustBeEntered"
						constraint (PrimaryContact.EmailAddress entered)
							"MustEnterEmailAddressToReceiveNotifications"
						Active = true
						if (TaxIdGroup.TaxId entered)
							if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarning)
								if (TaxIdRel exists)
									confirmation required
										"Warning:ADuplicateTaxIdWillBeCreated.DoYouWantToContinue?"
								if (VendorTaxIdsRel exists)
									confirmation required
										"Warning:ADuplicateTaxIdWillBeCreated.DoYouWantToContinue?"
							if (SupplierGroup.AllowDuplicateTaxIds.YesWithWarningTaxIDOnly)
								if (TaxIdOnlyRel exists)
									confirmation required
										"Warning:ADuplicateTaxIdWillBeCreated.DoYouWantToContinue?"
								if (VendorTaxIdsOnlyRel exists)
									confirmation required
										"Warning:ADuplicateTaxIdWillBeCreated.DoYouWantToContinue?"
						initiate SupplierAppr process
							title is "ValidationForSupplier<Supplier>,<SupplierName>"
							Criteria
								SupplierGroup
								CreatedByBuyer
							Variables
								SupplierGroup
								Supplier
								SupplierName
								AdminEmailAddress
								NotificationEmailAddress
							URLs
								"<linkback(webapp is ContractManager navigation is SupplierApproval text is \"SupplierApproval\")>"

						make transition to PendingValidation

			PendingValidation is a State
				NotValidated is an Instance Action
					restricted
					subject is SupplierNotValidated
					reason code required
					action comment required
					Action Rules
						make transition to NeedsValidation
				Reject is an Instance Action
					restricted
					subject is SupplierReject
					reason code required
					action comment required
					Action Rules
						Active = false
						make transition to Rejected
				Validate is an Instance Action
					restricted
					Action Rules
		  				constraint (FullyRegistered)
							"CannotValidateUntilRegistrationStatusIsCompleteForAllActiveSupplierContacts-SearchSupplierContactsListForContactsWhereRegistrationStatusIsNotComplete"
						HasBeenValidated = true
						make transition to Validated
				ManualNotValidated is an Instance Action
					subject is SupplierNotValidated
					reason code required
					action comment required
					Action Rules
						make transition to NeedsValidation
						cancel SupplierAppr process
				ManualReject is an Instance Action
					subject is SupplierReject
					reason code required
					action comment required
					Action Rules
						Active = false
						make transition to Rejected
						cancel SupplierAppr process
				ManualValidate is an Instance Action
					Action Rules
		  				constraint (FullyRegistered)
							"CannotValidateUntilRegistrationStatusIsCompleteForAllActiveSupplierContacts-SearchSupplierContactsListForContactsWhereRegistrationStatusIsNotComplete"
						HasBeenValidated = true
						make transition to Validated
						cancel SupplierAppr process

			Validated is a State

			Rejected is a State
				ReinstateSupplier is an Instance Action
					valid when (!Active)
 					subject is SupplierReinstate
					reason code required
					action comment required
					Action Rules
						Active = true
						make transition to NeedsValidation
