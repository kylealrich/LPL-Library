ContractClassification is a BusinessClass
    owned by po
    prefix is CCLS

    Ontology
		symbolic key is ContractClassification
    	
	Persistent Fields
		PerformanceEvaluationTemplate
		Description									is a Description4
		Type                                        is Numeric size 2
			States
				NoApprovals							value is 1
				ApprovalsWithNoRedlining            value is 2
				ApprovalsWithRedliningOnDocument    value is 3
				ApprovalsWithRedliningOnContract    value is 4
		RequireFullDistributionForSpecialItem       is Boolean
		ShowHealthcareInformation                   is Boolean
		RequireCommodityCodeForServiceItem			is Boolean
		RequireCommodityCodeForNonServiceItem		is Boolean
		RequireManufacturerCodeForNonServiceItem	is Boolean	
		RequireManufacturerNumberForNonServiceItem	is Boolean
		RequireContractApproval						is Boolean
		RequireFinalApproval						is Boolean
		RequireContractNegotiation					is Boolean
		RequireAddendumApproval						is Boolean
		RequireAddendumNegotiation					is Boolean
		RequireFinalAddendumApproval				is Boolean
		RequireAmendmentApproval					is Boolean
		RequireAmendmentNegotiation					is Boolean
		RequireFinalAmendmentApproval				is Boolean
		RequireApprovalWithWordDocument				is Boolean
		RequireApprovalWithWordDocDuringAddendum 	is Boolean
		RequireFinalApprovalWithWordDocument		is Boolean
		RequireMatrixInitialApproval                is Boolean 
		RequireMatrixAmendmentApproval              is Boolean 
		RequireMatrixAddendumApproval               is Boolean 
		ContractDocumentTemplate
			default label is "DocumentTemplate"
		ContractIDMDocumentTemplate     			is an IDMOutputSettings
			default label is "IDMDocumentTemplate"
			protected
			restricted
		SourcingEligible							is Boolean			
		Active										is Boolean
		AddendumDocumentTemplate
			default label is "AddendumTemplate"
		AllowUpdatesDuringApproval					is Boolean
		UseSupplierPortalForNegotiations			is Boolean
		RequireNegotiationFinalApproval				is Boolean
		RequireTermAndConditionApproval				is Boolean
		AllowUpdatesDuringFinalApproval				is Boolean
		AllowUpdatesDuringAddendumApproval			is Boolean
		UseSupplierPortalForAddendumNegotiations	is Boolean
		RequireAddendumNegotiationFinalApproval		is Boolean
		RequireAddendumTermAndConditionApproval		is Boolean
		AllowUpdatesDuringAddendumFinalApproval		is Boolean
		DoNotDisplayContractsToAll                  is Boolean
			default label is "DoNotAllowSuppliersToViewContractsAnonymously"
		SupplierCanView                             
			default label is "AllowSupplierToViewCommentsAndAttachmentsOnPortal"
		SetActiveLineToAmendment                    is Boolean
			default label is "ChangeToActiveContractLineSetsStatusToAmendment"
		UseIDM										is Boolean				
		UseIDMForContract							is Boolean
			default label is "UseIDMTemplate"
			restricted
			protected
		ContractDocumentIDMTemplate     			is an IDMTemplate
			default label is "DocumentTemplate"
		AllowChangeOrder                            is Boolean
		ChangeOrderAmendmentAddendum                is Numeric 1
			States
				Addendum 							value 1  
				Amendment                           value 2
			default label is "ContractAddendumOrAmendmentWhenChangeOrderIsCreated"
		ChangeOrderChangeLifetimeMaximum            is Boolean
			default label is "UpdateContractLifetimeMaximumAndSpreadsWhenChangeOrderUpdatesOccur"
		ChangeOrderManualUpdates                    is Boolean
			default label is "AllowFieldsAffectedByChangeOrdersToBeUpdatedDirectly"
		MultipleChangeOrdersAllowed                  is Boolean
			default label is "AllowMultipleChangeOrdersPerAmendmentOrAddendum"
		ChangeOrderAutoCreateDocument                is Boolean
			default label is "CreateContractDocumentWhenChangeIsCompletedAndContractIsActivated"
		ChangeOrderEditBudgets                       is Boolean
			default label is "EditBudgetsWhenChangeOrderIsSubmitted"
		AutomaticUpdateHeaderLifetimeMaximumAmount	is Boolean
		AddendumDocumentIDMTemplate					is an IDMTemplate
			default label is "AddendumTemplate"
		CostChangeTolerancePercent                  is Percent size 6.3
			default label is "PercentNotToExceed"
		CostChangeToleranceAmount                   is an InternationalAmount
			default label is "AmountNotToExceed"
		Connector
		ToleranceHandling                           is Numeric 1
			States
				CreateToleranceErrorRecord          value 1
				OnlineError                         value 2
		UseForInterface                             is Boolean
		UseForCapitatedContracts                    is Boolean 
		EnableClinicalSystemUseLocations    		is Boolean 
			default label is "SetForClinicalUseSystemsToTrueForEligibleContracts"	

	Derived Fields
	
		AndMessage is a MessageField
			"And"
			
		OrMessage is a MessageField
			"Or"
		
		ConnectorState is a DerivedField
			type is Alpha size 10
			if (Connector = "A")
				return AndMessage
			else
			if (Connector = "O")
				return OrMessage
			else
				return blank
		
		MatrixApprovalMessage is a MessageField
			"RequireResponsibilityMatrixApprovalForServiceAndStandingContracts"
		
		DerivedMatrixMessage is a DerivedField 
			type is Alpha size 150
			if (ContractGroup.AllowResponsibilityMatrixApprovals)
				return MatrixApprovalMessage
			else 
				return blank
		
		ActorContractClassificationGroup is a DerivedField
			type is like ContractClassificationGroup
			return actor.context.ContractClassificationGroup
	
	Relations
		
		PeformanceEvaluationTemplateExistsRel
            one-to-many relation to PerformanceEvaluationTemplate
            Field Mapping uses symbolic key
                related.SupplierGroup       = ContractGroup
		ClassificationToContractsRel
			one-to-many relation to Contract
			Field Mapping uses ByClassification
				related.ContractClassification 		= ContractClassification	
				related.ContractSubclassification 	= blank
				related.ContractGroup    			= ContractGroup
				
		InUseContractsForThisClassificationRel 
			one-to-many relation to Contract
			Field Mapping uses ByClassification
				related.ContractClassification 	= ContractClassification	
				related.ContractSubclassification 	= blank
				related.ContractGroup    		= ContractGroup	
			Instance Selection
				where (!related.ContractStatus.Closed)
	
		SupplierGroupRel
			one-to-one relation to SupplierGroup
			Field Mapping uses symbolic key
				related.SupplierGroup   = ContractGroup
		
		SourcingCompanyRel 
			one-to-many relation to SourcingCompany
			Field Mapping uses BySourcingGroup 
				related.SourcingGroup	= ContractGroup

		ContractsWithPendingTermChangesRel 
			one-to-many relation to Contract
			Field Mapping uses ByClassification
				related.ContractClassification 	= ContractClassification	
				related.ContractSubclassification 	= blank
				related.ContractGroup    		= ContractGroup	
			Instance Selection
				where (related.ContractSubclassification not entered
				and	   related.InProgress
				and	   related.HasUnapprovedArticleOrTermChanges)
				
		ActorContextClassRel
			one-to-many relation to ActorContext
			Field Mapping uses symbolic key
				related.Actor             = actor
			Instance Selection
				where (related.ContextProperty.KeyField   = "ContractClassification")
				
		ContractClassificationGroupDetailRel
			one-to-many relation to ContractClassificationGroupMember 
			Field Mapping uses symbolic key
				related.ContractGroup                       = ContractGroup
				related.ContractClassificationGroup         = ActorContractClassificationGroup
				related.ContractClassification              = ContractClassification
		
		ContractRedlineDocumentRel 
			one-to-many relation to Contract
			Field Mapping uses ByClassification
				related.ContractClassification 	= ContractClassification	
				related.ContractSubclassification 	= blank
				related.ContractGroup    		= ContractGroup
			Instance Selection
				where (!related.ContractStatus.Closed
				and     related.RedlineDocumentExists)

	Conditions
		IsPerformanceEvaluationTemplate
			restricted
			when (PerformanceEvaluationTemplate entered)

		PerformanceEvaluationTemplateExists
			when (PeformanceEvaluationTemplateExistsRel exists)

		SourcingCompanyExists
			restricted
			when (SourcingCompanyRel exists)

		ContractClassificationGroupAllowsAccess
			restricted
			when  ((ActorContractClassificationGroup entered
			and	  ContractClassificationGroupDetailRel exists)
			or	  !ActorContractClassificationGroup entered) 
		
		HasCostChangeTolerances
			restricted
			when (ToleranceHandling > 0)
			
		HasSecurityAccess
			restricted
			when (ContractGroup.BusinessGroupAllowsAccess
			and   ContractClassificationGroupAllowsAccess
			and  ((ContractClassification = any actor.context.ContractClassification
		    and    ClassActorContextExists)
			or    !ClassActorContextExists))
		
		HasContractDocumentTemplate
			restricted
			when (ContractDocumentTemplate entered)
		
		HasAddendumDocumentTemplate
			restricted
			when (AddendumDocumentTemplate entered)
		
		SuppliersCanViewAllContracts
			restricted
			when (SupplierGroupRel.DisplayContractsToAll = true)
		
		HasContractsWithPendingTermChanges
			restricted
			when (ContractsWithPendingTermChangesRel exists)
			
		ClassActorContextExists
			restricted
			when (ActorContextClassRel exists)
			
		BasicApprovals
			restricted
			when (Type = 2)
			
		ContractRedlining
			restricted
			when (Type = 4)
			
		DocumentRedlining
			restricted
			when (Type = 3)
			
		ContractsExistForClassification
			restricted
			when (InUseContractsForThisClassificationRel exists)
		
		NoApprovals
			restricted   
			when (!RequireContractApproval						
			and   !RequireFinalApproval						
		    and   !RequireContractNegotiation					
		    and   !RequireAddendumApproval						
		    and   !RequireAddendumNegotiation					
		    and   !RequireFinalAddendumApproval				
		    and   !RequireAmendmentApproval					
		    and   !RequireAmendmentNegotiation					
		    and   !RequireFinalAmendmentApproval
		    and   !RequireApprovalWithWordDocument				
			and   !RequireApprovalWithWordDocDuringAddendum
			or    !RequireMatrixInitialApproval                 
		    or    !RequireMatrixAmendmentApproval               
		    or    !RequireMatrixAddendumApproval)
		    
		ContractApprovalsEntered
			restricted  
			when (RequireContractApproval						
			or    RequireFinalApproval						
		    or    RequireContractNegotiation					
		    or    RequireAddendumApproval						
		    or    RequireAddendumNegotiation					
		    or    RequireFinalAddendumApproval				
		    or    RequireAmendmentApproval					
		    or    RequireAmendmentNegotiation					
		    or    RequireFinalAmendmentApproval
			or    RequireMatrixInitialApproval                 
		    or    RequireMatrixAmendmentApproval               
		    or    RequireMatrixAddendumApproval)
		    
		ContractRedlineApprovalsEntered
			restricted
			when (RequireContractNegotiation					
		    or    RequireAddendumNegotiation			
			or    RequireTermAndConditionApproval				
			or	  RequireAddendumTermAndConditionApproval		
			or    RequireContractApproval   
			or    RequireAddendumApproval)		 				 

		ContractRedlineApprovalsOnly
			restricted
			when (RequireTermAndConditionApproval
			or    RequireAddendumTermAndConditionApproval)
		
		NotForDocumentRedlineApprovals
			restricted
			when (RequireContractApproval
			or    RequireAddendumApproval)
		
		DocumentRedlineApprovalsEntered
			restricted
			when (RequireApprovalWithWordDocument				
			or    RequireApprovalWithWordDocDuringAddendum)
			
		HasContractsWithRedlineDocuments
			restricted
			when (ContractRedlineDocumentRel exists)
			
		AmendmentApprovals
			restricted
			when (RequireAmendmentApproval					
			or    RequireAmendmentNegotiation
			or    RequireFinalAmendmentApproval)
			
	Field Rules
		Description 
			required
		
		Type 
			required
		
		Active
			default to true
		SourcingEligible
			if (SourcingEligible)
				constraint (SourcingCompanyExists)
					"NotEligibleForEventCreation;NoSourcingCompaniesAreSetupForAssociatedSourcingGroup"
		AllowUpdatesDuringApproval
			if (Type = 4)
				if (RequireContractApproval = true)
					AllowUpdatesDuringApproval = true
				if (RequireContractApproval = false)
					AllowUpdatesDuringApproval = false
		RequireNegotiationFinalApproval
			if (RequireNegotiationFinalApproval changed)
				constraint (!HasContractsWithPendingTermChanges)
					"RequireFinalApprovalAfterSupplierPortalNegotiationsCannotBeChanged;ContractsUsingThisClassificationExistThatAreInTheApprovalProcess"
			constraint (UseSupplierPortalForNegotiations)
				"RequireFinalApprovalAfterSupplierPortalNegotiationsMustBeBlankWhenUseSupplierPortalForNegotiationsIsSetToNo"
			constraint (RequireContractNegotiation)
				"RequireFinalApprovalAfterSupplierPortalNegotiationsMustBeBlankWhenRequireSupplierContractNegotiationsIsSetToNo"
		UseSupplierPortalForNegotiations
			if (Type = 4)
				if (RequireContractNegotiation = true)
					UseSupplierPortalForNegotiations = true
				if (RequireContractNegotiation = false)
					UseSupplierPortalForNegotiations = false
		RequireTermAndConditionApproval
			if (RequireTermAndConditionApproval changed)
				constraint (!HasContractsWithPendingTermChanges)
					"RequireApprovalOfTermAndConditionUpdatesCannotBeChanged;ContractsUsingThisClassificationExistThatAreInTheApprovalProcess"
			constraint (RequireContractApproval)
				"RequireApprovalOfTermAndConditionUpdatesMustBeBlankWhenRequireInternalContractApprovalBeforeNegotiationsIsSetToNo"
		AllowUpdatesDuringFinalApproval
			if (Type = 4)
				if (RequireNegotiationFinalApproval = true)
					AllowUpdatesDuringFinalApproval = true
				if (RequireNegotiationFinalApproval = false)
					AllowUpdatesDuringFinalApproval = false
		AllowUpdatesDuringAddendumApproval
			if (Type = 4)
				if (RequireAddendumApproval = true)
					AllowUpdatesDuringAddendumApproval = true
				if (RequireAddendumApproval = false)
					AllowUpdatesDuringAddendumApproval = false
		RequireAddendumNegotiationFinalApproval
			if (RequireAddendumNegotiationFinalApproval changed)
				constraint (!HasContractsWithPendingTermChanges)
					"RequireAddendumFinalApprovalAfterSupplierPortalNegotiationsCannotBeChanged;ContractsUsingThisClassificationExistThatAreInTheApprovalProcess"
			constraint (UseSupplierPortalForAddendumNegotiations)
				"RequireAddendumFinalApprovalAfterSupplierPortalNegotiationsMustBeBlankWhenUseSupplierPortalForAddendumNegotiationsIsSetToNo"
			constraint (RequireAddendumNegotiation)
				"RequireAddendumFinalApprovalAfterSupplierPortalNegotiationsMustBeBlankWhenRequireSupplierContractAddendumNegotiationsIsSetToNo"
		UseSupplierPortalForAddendumNegotiations
			if (Type = 4)
				if (RequireAddendumNegotiation = true)
					UseSupplierPortalForAddendumNegotiations = true
				if (RequireAddendumNegotiation = false)
					UseSupplierPortalForAddendumNegotiations = false
		RequireAddendumTermAndConditionApproval
			if (RequireAddendumTermAndConditionApproval changed)
				constraint (!HasContractsWithPendingTermChanges)
					"RequireApprovalOfTermAndConditionUpdatesCannotBeChanged;ContractsUsingThisClassificationExistThatAreInTheApprovalProcess"
			constraint (RequireAddendumApproval)
				"RequireApprovalOfTermAndConditionUpdatesMustBeBlankWhenRequireInternalContractAddendumApprovalBeforeNegotiationsIsSetToNo"
		AllowUpdatesDuringAddendumFinalApproval
			if (Type = 4)
				if (RequireAddendumNegotiationFinalApproval = true)
					AllowUpdatesDuringAddendumFinalApproval = true
				if (RequireAddendumNegotiationFinalApproval = false)
					AllowUpdatesDuringAddendumFinalApproval = false
					
		SetActiveLineToAmendment
			if (AmendmentApprovals)
				force default to true

		ContractDocumentIDMTemplate
			if (UseIDM)
				constraint (ContractDocumentIDMTemplate.IDMDocumentType.ContractDocument)
					"InvalidTemplate"
			else
				initialize
		
		AddendumDocumentIDMTemplate
			if (UseIDM)
				constraint (AddendumDocumentIDMTemplate.IDMDocumentType.AddendumDocument)
					"InvalidTemplate"
			else
				initialize
					
		AllowChangeOrder
			if (!AllowChangeOrder)
				ChangeOrderAmendmentAddendum = 0
				ChangeOrderChangeLifetimeMaximum = false
				ChangeOrderManualUpdates		 = false                    
				MultipleChangeOrdersAllowed      = false            
				ChangeOrderAutoCreateDocument    = false            
				ChangeOrderEditBudgets			 = false	

		PerformanceEvaluationTemplate
			constraint (PerformanceEvaluationTemplate.TotalCategoryWeighting = 100%)
				"CannotUseAsCurrentPerformanceEvaluationTemplate;TotalCategoryWeightingDoesNotEqual100%"
	Attach Rules
		constraint (Active)
			"ContractClassificationIsNotActive"

	Actions
		Create is a Create Action
			Field Rules
				RequireApprovalWithWordDocument	
					if (Type = 3)
						default to true
				AllowUpdatesDuringApproval
					if (RequireTermAndConditionApproval)
						default to true
				AllowUpdatesDuringFinalApproval
					if (RequireNegotiationFinalApproval)
						default to true
				AllowUpdatesDuringAddendumApproval
					if (RequireAddendumTermAndConditionApproval)
						default to true
				AllowUpdatesDuringAddendumFinalApproval
					if (RequireAddendumNegotiationFinalApproval)
						default to true
			Action Rules
				if (Type = Type.ApprovalsWithRedliningOnDocument
				and !UseIDM)
					confirmation required
						"UnlessUsing_InforAsASingleTenantOrOnPremise,MustCheck_Use_IDMIfYouWantToPerformApprovalsWithRedliningOnDocument;DoYouWantToContinue?"	
				if (ToleranceHandling > 0)
					if (CostChangeToleranceAmount = 0)
						constraint (CostChangeTolerancePercent > 0)
							"IfToleranceHandlingIsDefined,ToleranceAmountOrPercentMustBeGreaterThanZero"
				if (CostChangeToleranceAmount > 0
				or  CostChangeTolerancePercent > 0)
					constraint (ToleranceHandling > 0)
						"MustDefineToleranceHandlingIfTolerancePercentOrAmountIsGreaterThanZero"
				if (CostChangeToleranceAmount > 0
				and CostChangeTolerancePercent > 0)
					constraint (Connector entered)
						"MustDefineAndOrIfToleranceAmountAndPercentAreBothEntered"
				if (CostChangeToleranceAmount = 0
				or  CostChangeTolerancePercent = 0)
					initialize Connector
				if (ToleranceHandling = 0)
					UseForInterface = false				

		Update is an Update Action	
							
			Action Rules
			
				if (ToleranceHandling > 0)
					if (CostChangeToleranceAmount = 0)
						constraint (CostChangeTolerancePercent > 0)
							"IfToleranceHandlingIsDefined,ToleranceAmountOrPercentMustBeGreaterThanZero"
				if (CostChangeToleranceAmount > 0
				or  CostChangeTolerancePercent > 0)
					constraint (ToleranceHandling > 0)
						"MustDefineToleranceHandlingIfTolerancePercentOrAmountIsGreaterThanZero"			
				if (CostChangeToleranceAmount > 0
				and CostChangeTolerancePercent > 0)
					constraint (Connector entered)
						"MustDefineAndOrIfToleranceAmountAndPercentAreBothEntered"
				if (CostChangeToleranceAmount = 0
				or  CostChangeTolerancePercent = 0)
					initialize Connector
			
				if (!DocumentRedlineApprovalsEntered)
					constraint (!HasContractsWithRedlineDocuments)
						"MustSelectAtLeastOne_'RequireInternalContractApprovalUsingDocumentRedliningBeforeNegotiations'_Option;ContractsWithRedlineDocumentsExist"
				
				if (Active changed)
					for each ContractSubclassification set
						invoke Update each 
							invoked.Active		= Active
				
				if (UseIDM changed)
					if (UseIDM)
						confirmation required
							"Switching_Contract_ClassificationToUseIDM.Continue?"

						for each ContractSubclassification set
							invoke Update each
								invoked.UseIDM = true
								invoked.LocalUpdateFromClassification = true
					else
						constraint (!ContractsExistForClassification)
							"CannotChangeUseIDMToFalse;OpenContractsExistThatUseIDM"					
				
				if (Type changed)
					constraint (!ContractsExistForClassification)
						"CannotChangeType;ContractsExistForClassification"
						
					if (Type !=4)
						constraint (!ContractRedlineApprovalsOnly)
							"CannotChangeTypeFromApprovalsWithRedliningOnContractIfApprovalFieldsCheckedThatOnlyPertainToThatType"
					if (Type !=3)
						constraint (!DocumentRedlineApprovalsEntered)
							"CannotChangeTypeFromApprovalsWithRedliningOnDocumentIfApprovalFieldsCheckedThatOnlyPertainToThatType"
						
					if (Type = 1)
						constraint (NoApprovals)
							"CannotChangeToNoApprovalTypeIfApprovalOptionsSelected"
							
					if (Type = 3)
						constraint (!NotForDocumentRedlineApprovals)
							"CannotChangeToRedliningOnDocumentTYpeIfApprovalsWithNoRedlining_'RequireInternalContractApprovalBeforeNegotiations'_DraftOrAmendmentOptionsAreChecked"
				
				if (Type = 3
				and UseSupplierPortalForNegotiations changed)
					constraint (!ContractsExistForClassification)
						"CannotChangeUseSupplierPortalForAllNegotiationsFlag;ContractsExistForClassification"

				if (ToleranceHandling > 0)
					if (CostChangeToleranceAmount = 0)
						constraint (CostChangeTolerancePercent > 0)
							"IfToleranceHandlingIsDefined,ToleranceAmountOrPercentMustBeGreaterThanZero"
				if (CostChangeToleranceAmount > 0
				or  CostChangeTolerancePercent > 0)
					constraint (ToleranceHandling > 0)
						"MustDefineToleranceHandlingIfTolerancePercentOrAmountIsGreaterThanZero"
				if (ToleranceHandling = 0)
					UseForInterface = false		

				if (UseForCapitatedContracts changed)
					constraint (!ContractsExistForClassification)
						"CannotChangeUseForCapitatedContractsFlag;ContractsExistForClassification"

			
			Exit Rules
				if (UseIDM changed)
					if (UseIDM)
						for each InUseContractsForThisClassificationRel
							invoke FastUpdate each
								invoked.UseIDM = true
								if (Type = 3)
									invoked.UseIDMPerClassificationAndSubClass = true

				
		Delete is a Delete Action
			Action Rules
				constraint (!ClassificationToContractsRel exists)
					"CannotDelete;ContractsExistForThisContractClassification"
					
		SyncUseIDMAndUseIDMTemplateForContracts is a Set Action
			restricted
			default label is untranslatable
		
			Instance Selection
				where (UseIDM not = UseIDMForContract)

			Action Rules
				Empty Set Rules
					invoke SyncUseIDMAndUseIDMTemplateForContracts ContractSubclassification
					
				Set Rules
					Exit Rules
						invoke SyncUseIDMAndUseIDMTemplateForContracts ContractSubclassification
						
				Instance Rules
					UseIDM = true
					UseIDMForContract = true
