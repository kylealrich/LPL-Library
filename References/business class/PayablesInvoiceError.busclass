PayablesInvoiceError is a BusinessClass
    owned by ap
    prefix is PIER

    Ontology
		symbolic key is PayablesInvoiceError

    Patterns
    	disable AuditIndex
    	disable Auditing
    	disable EffectiveDated
    	implements Archivable

    Persistent Fields
    	ErrorClass		is Numeric 2
    		States
    			MissingInformation	value is 1
    			InvalidInformation	value is 2
    	ErrorType		is a PayablesInvoiceErrorType
    	ErrorLevel		is Numeric 2
    		default label is "Level"
    		States
    			Error	value is 1
    			Warning	value is 2

	Transient Fields
		ClearBackgroundProcessing is Boolean
	
	Derived Fields
		Msg001sub is a MessageField
			restricted
			"InvalidCompanyInformation"
			
		Msg001 is a DerivedField
			type is Alpha size up to 200
			restricted
			return Msg001sub + CompanyErrorMessage
			
		Msg002sub is a MessageField
			restricted
			"InvalidVendorInformation"
			
		Msg002 is a DerivedField
			type is Alpha size up to 200
			restricted
			return Msg002sub + VendorErrorMessage
			
		Msg003sub is a MessageField
			restricted
			"InvalidP\OInformation.P\O:"
			
		Msg003 is a DerivedField
			type is Alpha size up to 200
			restricted
			return Msg003sub + POErrorMessage
			
		Msg004 is a MessageField
			restricted
			"InvoiceNumberRequired"
			
		Msg005 is a MessageField
			restricted
			"ImageIndexRequired"
			
		Msg006 is a MessageField
			restricted
			"InvoiceDateRequired"
			
		Msg007 is a MessageField
			restricted
			"InvoiceAmountRequired"
		
		Msg008 is a MessageField
			restricted
			"CompanyRequired"
			
		Msg009sub is a MessageField
			restricted
			"VendorRequired."
			
		Msg009 is a DerivedField
			type is Alpha size up to 200
			restricted
			return Msg003sub + VendorErrorMessage
			
		Msg010 is a MessageField
			restricted
			"ImageRequired"
			
		Msg011 is a MessageField
			restricted
			"CurrencyRequired"
			
		Msg012 is a MessageField
			restricted
			"DueDateOrTermsCodeRequired"
			
		Msg013 is a MessageField
			restricted
			"HandlingCodeRequired"
			
		Msg014 is a MessageField
			restricted
			"BatchRequired"
			
		Msg015 is a MessageField
			restricted
			"VoucherRequired"
			



			
		Msg017 is a MessageField
			restricted
			"PurchaseOrderRequired"
			
		Msg018 is a MessageField
			restricted
			"ProcessLevelRequired"
			
		Msg019 is a MessageField
			restricted
			"DistributionRequired"
			
		Msg020 is a MessageField
			restricted

			"TotalDistributionAmount<PayablesInvoice.TotalDistributionAmount.TransactionTotal>IsGreaterThanInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"		
			
		Msg021 is a MessageField
			restricted
			"CashCodeRequired"
			
		Msg022 is a MessageField
			restricted
			"PaymentCodeRequired"
			
		Msg023 is a MessageField
			restricted

			"TotalDistributionAmount<PayablesInvoice.TotalDistributionAmount.TransactionTotal>IsNotEqualToInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"		
			
		Msg024 is a MessageField
			restricted

			"Invoice<PayablesInvoice.Invoice>AlreadyExists"		
			
		Msg025 is a MessageField
			restricted

			"InvalidBatch<PayablesInvoice.BatchNumber>"		
			
		Msg026 is a MessageField
			restricted

			"InvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>IsNotEqualToMatchTotals<PayablesInvoice.DerivedMatchTotals>WhichIncludesTaxOf<PayablesInvoice.TaxAmount>"		
			
		Msg027 is a MessageField
			restricted

			"InvalidProcessLevel<PayablesInvoice.ProcessLevel>"		
			
		Msg028 is a MessageField
			restricted

			"InvalidRoutingCategory<PayablesInvoice.RoutingCategory>"		
			
		Msg029 is a MessageField
			restricted
			"PoolOptionRequiresShipToLocation"
			
		Msg030 is a MessageField
			restricted

			"PurchaseOrder<PayablesInvoice.ExternalPurchaseOrder>IsClosed"		
			
		Msg031 is a MessageField
			restricted

			"TotalTaxAmount<PayablesInvoice.DerivedTotalTaxAmountField>IsNotEqualToInvoiceTaxAmount<PayablesInvoice.TaxAmount>"		
			
		Msg031Match is a MessageField
			restricted

			"EnteredTaxAmount<PayablesInvoice.TaxAmount>DoesNotMatchDetailTaxAmount<PayablesInvoice.POTaxAmount>"		
			
		Msg031OneSource is a MessageField
			restricted

			"EnteredTaxAmount<PayablesInvoice.TaxAmount>DoesNotMatchOneSourceCalculatedTax<PayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount>"		
			
		Msg031Vertex is a MessageField
			restricted

			"EnteredTaxAmount<PayablesInvoice.TaxAmount>DoesNotMatchVertexCalculatedTax<PayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount>OrSumOfTaxDetails(DrillToMatchInformation)"		
			
		Msg031VertexByLine is a MessageField
			restricted
			"EnteredTaxAmount<PayablesInvoice.TaxAmount>DoesNotMatchVertexCalculatedTax<PayablesInvoice.DerivedTotalInvoiceDetailsInvoicedTaxAmount>"		
			
		Msg032 is a MessageField
			restricted
			"MatchProcessTypeRequired"
			
		Msg033 is a MessageField
			restricted

			"TotalPaymentAmount<PayablesInvoice.TotalPaymentAmount.TransactionTotal>IsNotEqualToInvoiceAmount<PayablesInvoice.InvoiceAmount.CurrencyAmount>"		
		
		Msg034 is a MessageField
			restricted

			"CannotReleaseMatchInvoice<PayablesInvoice.Invoice>,MustPerformMatch"		
		
		Msg035 is a MessageField
			restricted

			"CannotRelease;DistributionDetailNotSetupForAccrualCode<PayablesInvoice.AccrualCode>"		
		
		Msg036 is a MessageField
			restricted

			"DetailNotActiveForAccrualCode<PayablesInvoice.AccrualCode>"		
		
		Msg037 is a MessageField
			restricted
			"BankEntityRequiredForElectronicPayment"
		
		Msg038 is a MessageField
			restricted
			"BankAccountNumberRequiredForElectronicPayment"
		
		Msg039 is a MessageField
			restricted
			"BankAccountTypeRequiredForElectronicPayment"
		
		Msg040 is a MessageField
			restricted

			"DistributionDetailNotSetupForRetainageAccrual<PayablesInvoice.RetainageAccrualCode>"		
		
		Msg041 is a MessageField
			restricted

			"DetailNotActiveForRetainageAccrualCode<PayablesInvoice.RetainageAccrualCode>"		
		
		Msg042 is a MessageField
			restricted

			"TaxRoundingAccountNotSetForCompany<PayablesInvoice.Company>"		
		
		Msg043 is a MessageField
			restricted

			"DiversityCode<PayablesInvoice.DiversityCode>NotActive"		
		
		Msg044 is a MessageField
			restricted
			"IntrastatHeaderInformationNotAllowed"
		
		Msg045 is a MessageField
			restricted	
			"VendorReturnsNotShipped"
		
		Msg046 is a MessageField
			restricted	
			"DetailDistributionsOutOfBalance"
		
		Msg047 is a MessageField
			restricted	
			"NoInvoiceDetailLinesExist"
		
		Msg048 is a MessageField
			restricted	
			"POLineIsClosed"
		
		Msg049 is a MessageField
			restricted	
			"DistributionsOutOfBalance"
			
		Msg050 is a MessageField
			restricted	

			"MissingVendor<PayablesInvoice.Vendor>WithholdingCode"		
			
		Msg051 is a MessageField
			restricted	
			"MissingIntercompanyBillingDistributions"
		
		Msg052 is a MessageField
			restricted	
			"SecondaryWithholdingSetupIsIncomplete"
		
		Msg053 is a MessageField
			restricted	

			"IncorrectAccountingEntityOnAccrualCode<PayablesInvoice.AccrualCode>"		
			
		Msg054 is a MessageField
			restricted	

			"IncorrectAccountingEntityOnDiscountCode<PayablesInvoice.DiscountCode>"		
			
		Msg055 is a MessageField
			restricted	

			"IncorrectAccountingEntityOnIncomeWithholdingCode<PayablesInvoice.IncomeWithholdingCode>"		
			
		Msg056 is a MessageField
			restricted	

			"IncorrectAccountingEntityOnRetainageAccrualCode<PayablesInvoice.RetainageAccrualCode>"		
	
		Msg057 is a MessageField
			restricted	
			"OneSourceTaxServerOrWebserviceError;ContactAdministrator"

		Msg058 is a MessageField
			restricted	
			"AsyncError"
			
		Msg059 is a MessageField
			restricted
			"InvoiceSetForIntercompanyBillingAndRequiresInvoiceCurrency<PayablesInvoice.InvoiceCurrency>ToBeInCompanyFunctionalCurrency<PayablesInvoice.Company.Currency>"
		
		Msg060 is a MessageField
			restricted
			"CashPaymentFormatDoesNotExist"
		
		Msg061 is a MessageField
			restricted
			"BankAccountTypeMustBeCheckingOrSavingsOrIbanForACHPaymentFormat"	
		
		Msg062 is a MessageField
			restricted
			"DistributionFlaggedAsAnAsset,ButAssetDetailsAreMissing"

		Msg063 is a MessageField
			restricted
			"HSN_/SACCodeIsRequired"
			
		Msg064 is a MessageField
			restricted
			"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"	

		Msg065 is a MessageField
			restricted
			"FundDistributionsAreRestrictedOrExceedCashAmountAvailableForFund"	





#ifdef module cam			
		Msg067 is a MessageField
			restricted
			"DistributionsAmountExceedsCashAmountAvailableForTheCustodialAccount"	
#endif

		Msg068 is a MessageField
			restricted
			"CannotRelease;InvoiceIsOn_\Tax_\ToleranceHold"

		Msg069 is a MessageField
			restricted
			"VendorChargedTaxOf<PayablesInvoice.TaxAmount>IsOutOfToleranceWithTheTaxSystemAmountOf<PayablesInvoice.PayablesInvoiceTaxRel.TaxSystemTaxAmount>."

		Msg070 is a MessageField
			restricted
			"DocumentManagementWebServiceError;SeeInvoiceCommentsForMoreDetail"

		Msg071 is a MessageField 
			restricted
			"SupplierCreatedAddOnChargeExists;MustCreateMiscellaneousOrSpreadAddOnChargeOrDelete"
		
		Msg072 is a MessageField 		
			restricted
			"PayablesDiscountCodeDetailDoesNotExist"

		Msg073 is a MessageField     
			restricted
			"SumOfIntercompanyBillingBillToCompanyDistributionAmountsEqualsZero;MustSumToANonZeroAmount"

		Msg074 is a DerivedField	
			type is MessageField
			restricted
			if (PayablesInvoice.PayablesInvoiceSpreadAddOnChargeRel exists)		
				for each PayablesInvoice.PayablesInvoiceSpreadAddOnChargeRel
					if (!each.SpreadAmount = each.DerivedSumAOCDistributions
					and !each.SpreadMethod.Rate)
						return "Total distribution amount " + each.DerivedSumAOCDistributions + " is not equal to Spread AOC Amount " + each.SpreadAmount + "; Perform Recalculate Spread AOC Action for AOC " + each.AddOnCharge
						end for each
			else
				return "Total distribution amount is not equal to Spread AOC Amount; Perform Recalculate Spread AOC Action"
		Msg075 is a DerivedField	
			type is MessageField
			restricted
			return "OneSource error thrown while processing Tax History - See Tax Log for details"

		ErrorMessage is a DerivedField
			type is Alpha size up to 200
			if (ErrorType.InvalidCompany)
				return Msg001		//	"Invalid Company Information. " + CompanyErrorMessage
			else
			if (ErrorType.InvalidVendor)
				return Msg002		//	"Invalid Vendor Information. " + VendorErrorMessage
			else
			if (ErrorType.InvalidPurchaseOrder)
				return Msg003		//	"Invalid PO Information. PO: " + POErrorMessage
			else
			if (ErrorType.MissingInvoiceNumber)
				return Msg004		//	"Invoice Number Required"
			else
			if (ErrorType.MissingImageIndex)
				return Msg005		//	"Image Index Required"
			else
			if (ErrorType.MissingInvoiceDate)
				return Msg006		//	"Invoice Date Required"
			else
			if (ErrorType.MissingInvoiceAmount)
				return Msg007		//	"Invoice Amount Required"
			else
			if (ErrorType.MissingCompany)
				return Msg008		//	"Company Required"
			else
			if (ErrorType.MissingVendor)
				return Msg009		//	"Vendor Required. " + VendorErrorMessage
			else
			if (ErrorType.MissingImage)
				return Msg010		//	"Image Required"
			else
			if (ErrorType.MissingCurrency)
				return Msg011		//	"Currency Required"
			else
			if (ErrorType.MissingDueDate)
				return Msg012		//	"Due Date Or Terms Code Required"
			else
			if (ErrorType.MissingHandlingCode)
				return Msg013		//	"Handling Code Required"
			else
			if (ErrorType.MissingBatch)
				return Msg014		//	"Batch Required"
			else
			if (ErrorType.MissingVoucher)
				return Msg015		//	"Voucher Required"
			else



			if (ErrorType.MissingPurchaseOrder)
				return Msg017		//	"Purchase Order Required"
			else
			if (ErrorType.MissingProcessLevel)
				return Msg018		//	"Process Level Required"
			else
			if (ErrorType.MissingDistribution)
				return Msg019		//	"Distribution Required"
			else
			if (ErrorType.DistributionOverInvoice)
				return Msg020		//	"Total Distribution Amount Is Greater Than Invoice Amount"
			else
			if (ErrorType.MissingCashCode)
				return Msg021		//	"Cash Code Required"
			else
			if (ErrorType.MissingPaymentCode)
				return Msg022		//	"Payment Code Required"
			else
			if (ErrorType.InvoiceOutOfBalance)
				return Msg023		//	"Total Distribution Amount Is Not Equal To Invoice Amount"
			else
			if (ErrorType.InvoiceAlreadyExists)
				return Msg024		//	"Invoice Already Exists"
			else
			if (ErrorType.InvalidBatch)
				return Msg025		//	"Invalid Batch"
			else
			if (ErrorType.MatchInvoiceOutOfBalance)
				return Msg026		//	"Match Total Is Not Equal To Invoice Amount" 
			else
			if (ErrorType.InvalidProcessLevel)
				return Msg027		//	"Invalid Process Level"
			else
			if (ErrorType.InvalidRoutingCategory)
				return Msg028		//	"Invalid Routing Category"
			else
			if (ErrorType.MissingShipToLocation)
				return Msg029		//	"Pool Option Requires Ship To Location"
			else
			if (ErrorType.InvalidPoStatus)
				return Msg030		//	"Purchase Order Is Closed"
			else
			if (ErrorType.TaxOutOfBalance)
				if (PayablesInvoice.MatchProcessType.Expense)
					return Msg031		//	"Total Tax Amount Is Not Equal To Invoice Tax Amount"
				else
				if (PayablesInvoice.TaxEntityRel.ThirdParty.Sabrix
				and PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic)
					return Msg031OneSource
				else
				if (PayablesInvoice.CallVertexByDocument) 
					return Msg031Vertex
				else
				if (PayablesInvoice.TaxEntityRel.ThirdParty.VertexOSeries) 
					return Msg031VertexByLine
				else
					return Msg031Match
			else
			if (ErrorType.MissingMatchProcessType)
				return Msg032		//	"Match Process Type Required"
			else
			if (ErrorType.PaymentOutOfBalance)
				return Msg033		//	"Total Payment Amount Is Not Equal To Invoice Amount"
			else
			if (ErrorType.UnmatchedMatchInvoice)
				return Msg034		//	"CannotReleaseMatchInvoice,MustPerformMatch"
			else
			if (ErrorType.MissingAccrualCode)
				return Msg035		//	"CannotRelease;AccrualCodeDistributionDetailNotSetup"
			else
			if (ErrorType.AccrualCodeDetailNotActive)
				return Msg036		//	"CannotRelease;AccrualCodeDetailNotActive"
			else
			if (ErrorType.MissingBankEntity)
				return Msg037		//	"BankEntityRequiredForElectronicPayment"
			else
			if (ErrorType.MissingBankAccount)
				return Msg038		//	"BankAccountNumberRequiredForElectronicPayment"
			else
			if (ErrorType.MissingBankAccountType)
				return Msg039		//	"BankAccountTypeRequiredForElectronicPayment"
			else
			if (ErrorType.MissingRetainageAccrualCode)
				return Msg040		//	"RetainageAccrualDistributionDetailNotSetup"
			else
			if (ErrorType.InactiveRetainageAccrualCode)
				return Msg041		//	"RetainageAccrualCodeDetailNotActive"
			else
			if (ErrorType.MissingTaxRoundingAccount)
				return Msg042		//	"TaxRoundingAccountNotSetForCompany"
			else
			if (ErrorType.DiversityCodeNotActive)
				return Msg043		//	"DiversityCodeNotActive"
			else
			if (ErrorType.IntrastatInformationError)
				return Msg044		//	"IntrastatHeaderInformationNotAllowed"
			else
			if (ErrorType.VendorReturnsNotShipped)
				return Msg045		//	"VendorReturnsNotShipped"
			else
			if (ErrorType.DetailDistributionsOutOfBal)
				return Msg046		//	"DetailDistributionsOutOfBalance"
			else
			if (ErrorType.NoInvoiceDetailLinesExist)
				return Msg047		//	"NoInvoiceDetailLinesExist"
			else
			if (ErrorType.POLineIsClosed)
				return Msg048		//	"POLineIsClosed"
			else
			if (ErrorType.DistributionsOutOfBalance)
				return Msg049		//	"DistributionsOutOfBalance"
			else
			if (ErrorType.MissingVendorWithholdingCode)
				return Msg050		//	"MissingVendorWithholdingCode"
			else			
			if (ErrorType.MissingICBDistributions)
				return Msg051		//	"MissingIntercompanyBillingDistributions"
			else
			if (ErrorType.MissingSecondaryWithholdingInformation)
				return Msg052		//	"SecondaryWithholdingSetupIsIncomplete"
			else
			if (ErrorType.IncorrectAccountingEntityOnAccrualCode)
				return Msg053		//	"IncorrectAccountingEntityOnAccrualCode"
			else
			if (ErrorType.IncorrectAccountingEntityOnDiscountCode)
				return Msg054		//	"IncorrectAccountingEntityOnDiscountCode"
			else
			if (ErrorType.IncorrectAccountingEntityOnIncomeWithholdingCode)
				return Msg055		//	"IncorrectAccountingEntityOnIncomeWithholdingCode"
			else
			if (ErrorType.IncorrectAccountingEntityOnRetainageAccrualCode)
				return Msg056		//	"IncorrectAccountingEntityOnRetainageAccrualCode"
			else
			if (ErrorType.SabrixTaxSevereError)
				return Msg057		//	"SabrixTaxSevereError"
			else			
			if (ErrorType.AsyncFailure)
				return Msg058		//	"AsyncError"
			else
			if (ErrorType.InvoiceCurrencyNotSetToBillFromCurrency)
				return Msg059		//	"InvoiceSetForIntercompanyBillingAndRequiresInvoiceCurrency<PayablesInvoice.InvoiceCurrency>ToBeInCompanyFunctionalCurrency<PayablesInvoice.Company.Currency>"
			else
			if (ErrorType.MissingCashPaymentFormat)
				return Msg060	
			else	
			if (ErrorType.InvalidBankAccountType)
				return Msg061	
			else	
			if (ErrorType.MissingAssetDetails)
				return Msg062	
			else				
			if (ErrorType.HSNSACCodeRequired)
				return Msg063	
			else
			if (ErrorType.HSNSACCodeNotAllowed)
				return Msg064	
			else
			if (ErrorType.DistributionFundExceedsBalance)
				return Msg065	



#ifdef module cam
			else
			if (ErrorType.DistributionAmountExceedsCustodialAccountBalance)
				return Msg067	
#endif
			else
			if (ErrorType.InvoiceOnTaxToleranceHold)
				return Msg068	
			else
			if (ErrorType.InvoiceOutsideTaxTolerance)
				return Msg069	
			else	
			if (ErrorType.DocumentManagementWebServiceError)
				return Msg070	
			else 
			if (ErrorType.UnassignedSupplierAddOnCharge)
				return Msg071 
			else 
			if (ErrorType.DiscountCodeDetailDoesNotExist)		
				return Msg072 
				return ""
			else			
			if (ErrorType.SumOfIntercompanyBillingAmountsCannotBeZero) 
				return Msg073		
			else
			if (ErrorType.SpreadAOCOutOfBalance)	
				return Msg074	// "TotalDistributionAmount<>IsNotEqualToSpreadAOCAmount<>;PerformRecalculateSpreadAOAction"
			else
			if (ErrorType.OneSourceTaxHistoryError)		
				return Msg075	//	"OneSourceErrorThrownWhileProcessingTaxHistory"

		DerivedCompanyID is a DerivedField
			type is Alpha 50
			restricted
			return "Company ID: " + PayablesInvoice.PayablesInvoiceExtension.InterfaceData.Company + "."

		CompanyErrorMessage is a DerivedField
			type is Alpha size up to 100
			restricted
			if (PayablesInvoice.PayablesInvoiceExtension.InterfaceData.Company entered)
				return DerivedCompanyID
			else
				return ""

		DerivedVendorID is a DerivedField
			type is Alpha 50
			restricted
			return "Vendor ID: " + PayablesInvoice.PayablesInvoiceExtension.InterfaceData.Vendor + "."

		DerivedVendorName is a DerivedField
			type is Alpha size up to 120	
			restricted
			return "Vendor Name: " + PayablesInvoice.PayablesInvoiceExtension.InterfaceData.VendorName + "."

		VendorErrorMessage is a DerivedField
			type is Alpha size up to 170	
			restricted
			if (PayablesInvoice.PayablesInvoiceExtension.InterfaceData.Vendor entered
			and PayablesInvoice.PayablesInvoiceExtension.InterfaceData.VendorName entered)
				return DerivedVendorID + " " + DerivedVendorName
			else
			if (PayablesInvoice.PayablesInvoiceExtension.InterfaceData.Vendor entered)
				return DerivedVendorID
			else
			if (PayablesInvoice.PayablesInvoiceExtension.InterfaceData.VendorName entered)
				return DerivedVendorName

		PONumberAndRelease is a StringField
			type is Alpha 19
			restricted
			PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoNumber
			"-"
			PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoRelease

		DerivedFullPO is a StringField
			type is Alpha 24
			restricted
			PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoNumber
			"-"
			PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoRelease
			"-"
			PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoCode

		POErrorMessage is a ConditionalField
			type is Alpha 24
			restricted
			if (PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoNumber entered
			and PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoRelease !entered
			and PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoCode !entered)
				PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoNumber
			else
			if (PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoNumber entered
			and PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoRelease entered
			and PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoCode !entered)
				PONumberAndRelease
			else
			if (PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoNumber entered
			or  PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoRelease entered
			or  PayablesInvoice.PayablesInvoiceExtension.InterfaceData.PoCode entered)
				DerivedFullPO
			else
				blank

	Sets

	Relations

	Conditions
		InvoiceOutOfBalance
			restricted
			when (ErrorType.InvoiceOutOfBalance
			or	  ErrorType.MatchInvoiceOutOfBalance)

		AllowAsyncErrorDelete
			when (ErrorType.AsyncFailure
			and   ErrorLevel.Warning)

		AllowWebServiceDelete
			when (ErrorType.DocumentManagementWebServiceError)

	Field Rules
		ErrorLevel
			initial value is 1	
			default to 1	

	Rule Blocks

	Actions
		Create is a Create Action
			restricted

			Exit Rules
				if  (ClearBackgroundProcessing)
					invoke FastUpdate PayablesInvoice
						initialize invoked.BackgroundProcessing

		CreateViaParameters is a Create Action
			restricted
			Parameters
				PrmCompany 				is like Company
				PrmInvoice 				is like PayablesInvoice
		    	PrmErrorClass			is Numeric 2
		    	PrmErrorType			is like PayablesInvoiceErrorType
		    	PrmErrorLevel			is Numeric 2
				
			Action Rules
				invoke Create this instance
					invoked.Company				= PrmCompany
					invoked.PayablesInvoice		= PrmInvoice
					invoked.ErrorLevel			= PrmErrorLevel
					invoked.ErrorClass			= PrmErrorClass
					invoked.ErrorType			= PrmErrorType
					
					if  (PrmErrorLevel = 2) 
						invoked.ClearBackgroundProcessing = true

		Update is an Update Action
			restricted

		Delete is a Delete Action
			restricted
			
		Purge is a Purge Action
			restricted
			bypass relational integrity rules

		RemoveAsyncError is an Instance Action
			valid when (AllowAsyncErrorDelete)
			Action Rules
				invoke FastUpdate PayablesInvoice
					initialize invoked.BackgroundProcessing
				invoke Purge

		RemoveWebServiceError is an Instance Action
			valid when (AllowWebServiceDelete)
			Action Rules
				confirmation required
					"TheUpdateToTheDocumentManagementPartnerHasNotOccurred.ContinueAnyway?"
				invoke Purge

	StateCycles
