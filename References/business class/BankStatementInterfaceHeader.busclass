BankStatementInterfaceHeader is a BusinessClass
	owned by cashmgmt
	prefix is BSIH

	Ontology
		symbolic key is BankStatementInterfaceHeader

	Persistent Fields
		Filename				is Alpha 300
		FileFormat				is Alpha 2
			States
				BAI		value is 10
				BAI2	value is 20
				MT940	value is 30
				MT942	value is 40
				CSV		value is 50
				EDI822	value is 60
				CAMT053	value is 70
					default label is "CAMT\053"
				CAMT052	value is 80
 					default label is "CAMT\052"
		ImportDate				is Date
		StatementType			is Numeric 2
			States
				PreviousDay		value is 0
				Intraday		value is 1
				AccountAnalysis	value is 2
				Mixed			value is 3
		Status					is Numeric 2
			States
				NotImported			value is 10
				ImportInitiated		value is 15
				Imported			value is 20
				ImportCanceled		value is 30
				NoRecordsImported	value is 40	
		Data					is Text
		ActualNumberOfRecords	is Numeric 8 
			default label is "Actual Number of Records"
		Workunit				is a PfiWorkunit
			delete ignored
		Channel					is a PfiChannel
			delete ignored
		Receiver				is a PfiReceiver
			delete ignored
		HasValidationErrors		is Boolean
		EDIDelimeter			is Alpha 1
		HasReceivablePaymentImportValidationErrors	is Boolean
		IgnoreBankTransactionCodeError				is Boolean
		IgnoreOutOfBalanceStatement					is Boolean
		CAMTExpectedNumberOfRecords 				is Numeric 8

	Local Fields
		LocalCashManagementGroup					is a CashManagementGroup
		LocalImportAccountNumber					is Alpha 35
		LocalCashManagementAccount					is a CashManagementAccount
		LocalFinancialInstitution					is like FinancialInstitution
		LocalStatementDate							is Date
		LocalStatementDatePlus6Days					is Date								
		LocalImportCurrency							is like Currency
		LocalAccountCurrency						is like Currency
		LocalBankStatementInterface					is a BankStatementInterface
		LocalNextStmtBankStatementInterface			is a BankStatementInterface
		LocalIncomingBankStatementHeadersCreated	is Boolean
		LocalCalendarStatementDate					is Date
		LocalDatesCreated							is Numeric 2
		LocalNewCashManagementAccount				is like CashManagementAccount
		LocalCreateStatementDate					is Date
		LocalTransactionType						is like BankTransactionTypeCode
		LocalNtryTransactionType					is like BankTransactionTypeCode
		LocalIdentifier								is AlphaUpper 50
		LocalDomain									is like ISO20022DomainCode
		LocalNtryDomain								is like ISO20022DomainCode
		LocalFamily									is like ISO20022FamilyCode
		LocalNtryFamily								is like ISO20022FamilyCode
		LocalSubFamily								is like ISO20022SubFamilyCode
		LocalNtrySubFamily							is like ISO20022SubFamilyCode
		LocalReceivableCompany						is like ReceivableCompany
		LocalCompanyCustomerBankEntity				is Alpha 35
		LocalCompanyCustomerBankAccountNumber		is Alpha 35
		LocalCAMT05XCdtDbtInd						is AlphaUpper 4
		LocalCAMT05XFmlyCdRCDTOrRCCN				is AlphaUpper 4
		LocalAccountChanged							is Boolean							
		LocalCSVImportAccountNumber					is Alpha 35							
		LocalCSVStatementDate						is Date								
		LocalCSVImportCurrency						is like Currency					
		LocalCSVTransactionType						is like BankTransactionTypeCode		
		LocalBeginningBalance						is an InternationalAmount			
		LocalAccumulatedLineAmount					is an InternationalAmount			
		LocalEndingBalance							is an InternationalAmount			
		LocalMT940Amount							is Alpha 20
		LocalMT940Amount2							is Alpha 20
		LocalFirstIteration							is Boolean
		LocalCounter								is Numeric size 6
		LocalPrtryCount								is Numeric size 6
		LocalDomnCount								is Numeric size 6
		SkipCashAccountAttachRule

	Context Fields
		EnterpriseGroup

	Derived Fields
		ExpectedNumberOfRecords is a DerivedField
			type is Numeric 8	
			default label is "Expected Number of Records"
			if (BAIFormat)
				return last FileTrailerRel.DataColArray.ColArray[4]
			else
			if (CAMT05XFormat
			and CAMTExpectedNumberOfRecords entered)
				return CAMTExpectedNumberOfRecords
			else
				return ActualNumberOfRecords

		DerivedCashAccount is a DerivedField
			type is like CashManagementAccount
			restricted
			if (BAIFormat)
				LocalImportAccountNumber = first BAICashAccountRel.DataColArray.ColArray[2]
			else
			if (MT94XFormat)
				LocalImportAccountNumber = first MT940CashAccountRel.MT940Data[5:40]
			else
			if (CAMT05XFormat)
				LocalImportAccountNumber = first CAMT05XStmtRel.CAMT05XAcct
			else
			if (CSVFormat)
				LocalImportAccountNumber = first BankStatementInterfaceNotImportedRel.DataColArray.ColArray[1]
			else
			if (EDI822Format)
				LocalImportAccountNumber = first EDI822CashAccountRel.DataColArray.ColArray[2]

			return first ActualCashManagementAccountRel.CashManagementAccount

		DerivedCashManagementGroup is a DerivedField	
			type is like CashManagementGroup
			restricted
			if (CashManagementGroupCount = 1)
				return first AllCashManagementGroupsRel.CashManagementGroup
			else
			if (CashManagementGroupByAccountCount = 1)
				return first CashManagementGroupByAccountRel.CashManagementGroup

		CashManagementGroupByAccountCount is a DerivedField 
			type is Numeric 4
			restricted
			return instance count of CashManagementGroupByAccountRel

		CashManagementGroupCount is a DerivedField 
			type is Numeric 4
			restricted
			return instance count of AllCashManagementGroupsRel

		MultipleAccountsInBankStatementInterface is a DerivedField
			type is Boolean
			restricted
			if (BAIFormat)
				for each BAICashAccountRel
					LocalImportAccountNumber = each.DataColArray.ColArray[2]	
					LocalBankStatementInterface = each.BankStatementInterface
					if (MultipleAccountsInBankStatementInterfaceRel exists)
						return true
						end for each
			else
			if (MT94XFormat)
				for each MT940CashAccountRel
					LocalImportAccountNumber = each.MT940Data[5:40]
					LocalBankStatementInterface = each.BankStatementInterface
					if (MultipleAccountsInBankStatementInterfaceRel exists)
						return true
						end for each
			else
			if (CAMT05XFormat)
				for each CAMT05XStmtRel
					LocalImportAccountNumber = each.CAMT05XAcct
					LocalBankStatementInterface = each.BankStatementInterface
					if (MultipleAccountsInBankStatementInterfaceRel exists)
						return true
						end for each

		CAMT05XStmtOrAcctRpt is a DerivedField
			type is Alpha 7
			restricted
			if (CAMT05XFormat)
				if (FileFormat = "70")
					return "Stmt"
				else
				if (FileFormat = "80")
					return "AcctRpt"
				else
					return ""

		CAMT05XStmtOrRpt is a DerivedField
			type is Alpha 4
			restricted
			if (CAMT05XFormat)
				if (FileFormat = "70")
					return "Stmt"
				else
				if (FileFormat = "80")
					return "Rpt"
				else
					return ""

		DerivedCashManagementAccountLegalEntity is a DerivedField
			type is like ReceivableCompany
			restricted
			if (CAMT05XFormat)
				if (ActualCashManagementAccountRel exists)
					return ActualCashManagementAccountRel.LegalEntity

		DerivedBeginningBalance is a DerivedField
			type is like InternationalAmount
			if (PreviousBankStatementByStatementDateRel exists)
				return first PreviousBankStatementByStatementDateRel.EndingBalance
			else
				if (ActualCashManagementAccountRel exists)
					return ActualCashManagementAccountRel.BeginningAccountBalance
					
		OutOfBalanceValidationEnabled is a DerivedField
			type is Boolean
			return LocalCashManagementGroup.ValidateImportedBankStatementBalance

		DerivedCAMT05xValidationCommit is a DerivedField 
			type is Numeric 4
			if (config.DerivedCAMT05xValidationCommit > 0)
				return config.DerivedCAMT05xValidationCommit
			else
				return 50

	Field Rules
		StatementType
			if (FileFormat.MT942
			or  FileFormat.CAMT052)
				StatementType = StatementType.Intraday

		ImportDate
			default to current corporate date
			
		Status
			default to Status.NotImported
	
	Conditions
		CanImport
			restricted
			when (Status.NotImported
			and  (!BAIFormat
			or	 (BAIFormat
			and   ExpectedNumberOfRecords = ActualNumberOfRecords)))
			
		BAIFormat
			restricted
			when (FileFormat.BAI2
				or FileFormat.BAI)

		MT94XFormat
			restricted
			when (FileFormat.MT940
				or FileFormat.MT942)

		CSVFormat
			restricted
			when (FileFormat.CSV)

		EDI822Format
			restricted
			when (FileFormat.EDI822)

		CAMT05XFormat
			restricted
			when (FileFormat.CAMT053
				or FileFormat.CAMT052)

		ImportFailed
			restricted
			when (HasValidationErrors)


		AutoImport
			restricted
			when ((CashManagementGroupCount = 1
					and first AllCashManagementGroupsRel.AutomaticBankStatementImport)
				or (CashManagementGroupByAccountCount = 1
					and first CashManagementGroupByAccountRel.CashManagementGroup.AutomaticBankStatementImport))   

		CanPurge
			restricted
			when (Status.Imported
			or	  Status.ImportCanceled)

		HasBankStatements
			restricted
			when ((BankStatement set exists
			and !FileFormat.CAMT053)
			or (BankStatement set exists
			and FileFormat.CAMT053
			and !ActualCashManagementAccountRel.CreateReceivablePaymentsFromCAMT053))

		StatementsLoadedIntoReconciliation
			restricted
			when (BankStatementReconciliation set exists)
		
		HasSkippedTransactions
			restricted
			when (BankStatementInterfaceSkippedRel exists)

		UsePurgeSetAction	
			restricted
			when (instance count of BankStatementInterface set > 100) 

		FileContainsMultipleStatementsWithSameAccount
			restricted
			when (MultipleAccountsInBankStatementInterface)
			
		HasOutOfBalanceError
			restricted
			when (OutOfBalanceErrorRel exists)

		ValidateBalance
			restricted
			when (!IgnoreOutOfBalanceStatement
			and !HasOutOfBalanceError
			and OutOfBalanceValidationEnabled) 

		HasBankTransactionCodeDomainOrProprietaryDoesNotExistError
			restricted
			when (BankTransactionCodeDomainOrProprietaryDoesNotExistErrorRel exists)

		CAMT05XBkToCstmrDbtCdtReceivableNtfctn
			restricted
			when (CAMT05XStmtOrAcctRpt = "Stmt"
			and   CAMT05XStmtOrRpt = "Stmt"
			and   LocalCAMT05XCdtDbtInd = "CRDT")

		CAMT05XBkToCstmrDbtCdtReceivableNtfctnRCDT
			restricted
			when (LocalCAMT05XFmlyCdRCDTOrRCCN ="RCDT")

		CAMT05XBkToCstmrDbtCdtReceivableNtfctnRCCN
			restricted
			when (LocalCAMT05XFmlyCdRCDTOrRCCN ="RCCN")

		CAMT05XBkToCstmrDbtCdtReceivableNtfctnRCDTOrRCCN
			restricted
			when (CAMT05XBkToCstmrDbtCdtReceivableNtfctnRCDT 
			or    CAMT05XBkToCstmrDbtCdtReceivableNtfctnRCCN)

	Relations
		FileTrailerRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByBAICode
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.Code 						 = "99"

		BAICashAccountRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByBAICode
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.Code 						 = "03"
			Instance Selection
				where (related.Status < "30") 
				
		BAITransactionLineRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByBAICode
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.Code 						 = "16"
			Instance Selection
				where (related.Status < "30") 
				
		BankStatementInterfaceNotImportedRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByStatus
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.Status						 = "10" 

		MT940CashAccountRel is a BankStatementInterface set
			Instance Selection
				where (related.MT940Data like ":25*" //related.FirstThreeChars = ":25"
				and    related.Status < "30") 		 

		NextMT940CashAccountRel
			one-to-many relation using MT940CashAccountRel
			Instance Selection
				where (related.BankStatementInterface > LocalBankStatementInterface)

		MT940TransactionLineRel is a BankStatementInterface set
			Instance Selection
				where (related.MT940Data like ":61*" //related.FirstThreeChars = ":61"
				and    related.Status < "30" 		 
				and    related.BankStatementInterface > LocalBankStatementInterface
				and    related.BankStatementInterface < LocalNextStmtBankStatementInterface)

		CSVCashAccountRel is a BankStatementInterface set
			Instance Selection
				where (related.Status < "30") 

		EDI822CashAccountRel 
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByBAICode
				related.BankStatementInterfaceHeader	= BankStatementInterfaceHeader
				related.Code							= "ACT"
			Instance Selection
				where (related.Status < "30") 

		EDI822CurrencyRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByBAICode
				related.BankStatementInterfaceHeader	= BankStatementInterfaceHeader
				related.Code 							= "CUR"
			Instance Selection
				where (related.Status < "30" 
				and    related.BankStatementInterface > LocalBankStatementInterface)

		CAMT05XStmtRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByCAMT053RecordType
				related.BankStatementInterfaceHeader	= BankStatementInterfaceHeader
				related.CAMT053RecordType 				= "10" 
			Instance Selection
				where (related.Status < "30") 

		CAMT05XNtryRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByCAMT053RecordType
				related.BankStatementInterfaceHeader	= BankStatementInterfaceHeader
				related.CAMT053RecordType 				= "20" 
			Instance Selection
				where (related.Status < "30") 
		
		CAMT05XNtryByStmtRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByCAMT053RecordType
				related.BankStatementInterfaceHeader	= BankStatementInterfaceHeader
				related.CAMT053RecordType 				= "20" 
			Instance Selection
				where (related.Status < "30" 
				and    related.BankStatementInterface > LocalBankStatementInterface
				and    related.BankStatementInterface < LocalNextStmtBankStatementInterface)
		
		NextCAMT05XStmtRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByCAMT053RecordType
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.CAMT053RecordType 			 = "10" 
			Instance Selection
				where (related.BankStatementInterface > LocalBankStatementInterface)

		DuplicateBankStatementRel
			one-to-many relation to BankStatement
			Field Mapping uses ByAccountDate
				related.CashManagementGroup		= LocalCashManagementGroup
				related.CashManagementAccount	= LocalCashManagementAccount
				related.StatementDate			= LocalStatementDate
			Instance Selection
				where (related.StatementType.PreviousDay)

		DuplicateBankStatementInterfaceRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByImportAccountNumber
				related.BankStatementInterfaceHeader	= BankStatementInterfaceHeader
				related.ImportAccountNumber				= LocalImportAccountNumber
			Instance Selection
				where (related.Status < "30" 
				and    related.BankStatementInterface != LocalBankStatementInterface
				and	   related.DerivedStatementDate	   = LocalStatementDate)

		MultipleAccountsInBankStatementInterfaceRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByImportAccountNumber
				related.BankStatementInterfaceHeader	= BankStatementInterfaceHeader
				related.ImportAccountNumber				= LocalImportAccountNumber
			Instance Selection
				where (related.Status < "30" 
				and    related.BankStatementInterface != LocalBankStatementInterface)

		ImportAccountNumberBankStatementInterfaceRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByImportAccountNumber
				related.BankStatementInterfaceHeader	= BankStatementInterfaceHeader

		DuplicateFeeStatementRel
			one-to-many relation to BankServiceDetail
			Field Mapping uses ByStatementDate
				related.CashManagementGroup	  = LocalCashManagementGroup
				related.FinancialInstitution  = LocalFinancialInstitution
				related.CashManagementAccount = LocalCashManagementAccount
				related.StatementDate		  = LocalStatementDate

		EDI822GroupHeaderRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByBAICode
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.Code						 = "GS"

		EDI822DateTimeRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByBAICode
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.Code						 = "DTM"
			Instance Selection
				where (related.DataColArray.ColArray[2] = "151")

		ActualCashManagementAccountRel
			one-to-many relation to CashManagementAccount
			Field Mapping uses ByImportAccountNumber
				related.ImportAccountNumber = LocalImportAccountNumber

		CashManagementGroupByAccountRel
			one-to-many relation to CashManagementAccount
			Field Mapping uses ByCashManagementAccount
				related.CashManagementAccount = DerivedCashAccount

		AllCashManagementAccountsRel
			one-to-many relation to CashManagementAccount
			Field Mapping uses symbolic key
				related.CashManagementGroup	= LocalCashManagementGroup

		AllCashManagementGroupsRel
			one-to-many relation to CashManagementGroup
			Field Mapping uses symbolic key
			Instance Selection
				where (related.CashManagementGroup entered)

		IncomingBankStatementDetailRel
			one-to-one relation to IncomingBankStatementDetail
			Field Mapping uses symbolic key
				related.EnterpriseGroup				= LocalCashManagementGroup.EnterpriseGroup
				related.SystemCalendar 				= LocalCashManagementGroup.CorporateCalendar
				related.IncomingBankStatementHeader	= LocalCreateStatementDate
				related.IncomingBankStatementDetail	= LocalCashManagementAccount

		MT940OpeningRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses symbolic key
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
			Instance Selection
				where (related.BankStatementInterface > LocalBankStatementInterface
				and    related.MT940Data like ":60*") //related.FirstThreeChars = ":60")

		CorporateCalendarStatementDateRel
			one-to-one relation to SystemCalendarDate
			Field Mapping uses symbolic key
				related.EnterpriseGroup		= LocalCashManagementGroup.EnterpriseGroup
				related.SystemCalendar 		= LocalCashManagementGroup.CorporateCalendar
				related.SystemCalendarDate	= LocalCreateStatementDate

		CorporateCalendarStatementDatePlus6DaysRel	
			one-to-one relation to SystemCalendarDate
			Field Mapping uses symbolic key
				related.EnterpriseGroup		= LocalCashManagementGroup.EnterpriseGroup
				related.SystemCalendar 		= LocalCashManagementGroup.CorporateCalendar
				related.SystemCalendarDate	= LocalStatementDatePlus6Days
				
		CorporateCalendarDateRel
			one-to-many relation to SystemCalendarDate
			Field Mapping uses symbolic key
				related.EnterpriseGroup	= LocalCashManagementGroup.EnterpriseGroup
				related.SystemCalendar 	= LocalCashManagementGroup.CorporateCalendar

		IncomingBankStatementHeaderRel
			one-to-one relation to IncomingBankStatementHeader
			Field Mapping uses symbolic key
				related.EnterpriseGroup				= LocalCashManagementGroup.EnterpriseGroup
				related.SystemCalendar 				= LocalCashManagementGroup.CorporateCalendar
				related.IncomingBankStatementHeader	= LocalCalendarStatementDate

		NewIncomingBankStatementDetailRel
			one-to-one relation to IncomingBankStatementDetail
			Field Mapping uses symbolic key
				related.EnterpriseGroup				= LocalCashManagementGroup.EnterpriseGroup
				related.SystemCalendar 				= LocalCashManagementGroup.CorporateCalendar
				related.IncomingBankStatementHeader	= LocalCreateStatementDate
				related.IncomingBankStatementDetail	= LocalNewCashManagementAccount

		NewBankStatementRel
			one-to-many relation to BankStatement
			Field Mapping uses ByAccountDate
				related.CashManagementGroup	  	= LocalCashManagementGroup
				related.CashManagementAccount 	= LocalNewCashManagementAccount
				related.StatementDate		  	= LocalCreateStatementDate

		BankTransactionTypeCodeRel
			one-to-one relation to BankTransactionTypeCode
			Field Mapping uses symbolic key
				related.CashManagementGroup	  	= LocalCashManagementGroup
				related.BankTransactionTypeCode = LocalTransactionType

		ISO20022DomainCodeRel
			one-to-one relation to ISO20022DomainCode
			Field Mapping uses symbolic key
				related.CashManagementGroup			= LocalCashManagementGroup
				related.ISO20022DomainCode			= LocalDomain

		ISO20022FamilyCodeRel
			one-to-one relation to ISO20022FamilyCode
			Field Mapping uses symbolic key
				related.CashManagementGroup			= LocalCashManagementGroup
				related.ISO20022FamilyCode			= LocalFamily

		ISO20022SubFamilyCodeRel
			one-to-one relation to ISO20022SubFamilyCode
			Field Mapping uses symbolic key
				related.CashManagementGroup				= LocalCashManagementGroup
				related.ISO20022SubFamilyCode			= LocalSubFamily	

		FinancialInstitutionBranchRel
			one-to-many relation to FinancialInstitutionBranch
			Field Mapping uses symbolic key
				related.CashManagementGroup		= LocalCashManagementGroup
			Instance Selection
				where (related.BranchIdentifier = LocalIdentifier)

		BankStatementInterfaceHeaderErrorRel
			one-to-many relation to BankStatementInterfaceHeaderError
			Field Mapping uses ByBankStatementInterface
				related.BankStatementInterfaceHeader	= BankStatementInterfaceHeader

		OutOfBalanceErrorRel
			one-to-many relation to BankStatementInterfaceHeaderError
			Field Mapping uses symbolic key
				related.BankStatementInterfaceHeader	= BankStatementInterfaceHeader
			Instance Selection
				where (related.ErrorType.BankStatementOutOfBalance)

		BankTransactionCodeDomainOrProprietaryDoesNotExistErrorRel
			one-to-many relation to BankStatementInterfaceHeaderError
			Field Mapping uses symbolic key
				related.BankStatementInterfaceHeader	= BankStatementInterfaceHeader
			Instance Selection
				where (related.ErrorType.BankTransactionCodeDomainOrProprietaryDoesNotExist)

		BankServicesAnalyticCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "BankServiceDetail"

		BankStatementInterfaceSkippedRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByStatus
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.Status						 = "30" 

		LocalCashManagementAccountRel
			one-to-one relation to CashManagementAccount
			Field Mapping uses symbolic key
				related.CashManagementGroup 		= LocalCashManagementGroup
				related.CashManagementAccount		= LocalCashManagementAccount

		CAMT05XDbtrAgtAndDbtrAcctRel
			one-to-one relation to CompanyCustomerBankAccount
			Field Mapping uses symbolic key
				related.Company													= LocalReceivableCompany
				related.CompanyCustomerBankAccount.CustomerBankEntity			= LocalCompanyCustomerBankEntity
				related.CompanyCustomerBankAccount.CustomerBankAccountNumber	= LocalCompanyCustomerBankAccountNumber

		PreviousBankStatementByDateRel 
			one-to-many relation to BankStatement
			Field Mapping uses ByAccountDescendDate
				related.CashManagementGroup	  	= LocalCashManagementGroup
				related.CashManagementAccount 	= LocalCashManagementAccount
			Instance Selection
				where (related.StatementDate 	< LocalCreateStatementDate
				or     (related.StatementDate 	= LocalCreateStatementDate		
				and     related.BankStatement 	< first DuplicateBankStatementRel.BankStatement))
				
		PreviousBankStatementByStatementDateRel
			one-to-many relation to BankStatement
			Field Mapping uses ByAccountDescendDate
				related.CashManagementGroup	  	= LocalCashManagementGroup
				related.CashManagementAccount 	= LocalCashManagementAccount
			Instance Selection
				where (related.StatementDate <= LocalStatementDate 
				and    related.StatementType.PreviousDay)

	Rule Blocks
		CreateIncomingBankStatementHeaderRecords
			LocalCalendarStatementDate = LocalStatementDate
			LocalDatesCreated = 0
			while (LocalDatesCreated < 7)
				if (CorporateCalendarDateRel exists)
					if (!IncomingBankStatementHeaderRel exists)
						invoke Create IncomingBankStatementHeader
							invoked.EnterpriseGroup				= LocalCashManagementGroup.EnterpriseGroup
							invoked.SystemCalendar				= LocalCashManagementGroup.CorporateCalendar
							invoked.IncomingBankStatementHeader	= LocalCalendarStatementDate
							invoked.CashManagementGroup			= LocalCashManagementGroup
				LocalDatesCreated = LocalDatesCreated + 1
				if (LocalCalendarStatementDate != LocalStatementDate
				and	LocalCalendarStatementDate <= current corporate date)
					LocalCreateStatementDate = LocalCalendarStatementDate
					include CreateIncomingBankStatementDetails
				LocalCalendarStatementDate = LocalCalendarStatementDate + 1 day
			LocalCreateStatementDate = LocalStatementDate
			LocalIncomingBankStatementHeadersCreated = true

		CreateIncomingBankStatementDetails
			if (IncomingBankStatementDetailRel exists
			and LocalCreateStatementDate = LocalStatementDate)
				invoke Update IncomingBankStatementDetailRel
					invoked.Status							= 1	
					invoked.MissingStatus					= 2	
					invoked.TimeReceived 					= current timestamp
					invoked.BankStatementInterfaceHeader 	= BankStatementInterfaceHeader
			else
				for each AllCashManagementAccountsRel
					LocalNewCashManagementAccount = each.CashManagementAccount
					if (NewIncomingBankStatementDetailRel not exists)
						if (CorporateCalendarStatementDateRel.IsBankDay
						or	NewBankStatementRel exists)
							LocalCalendarStatementDate = LocalCreateStatementDate
							if (!IncomingBankStatementHeaderRel exists)
								invoke Create IncomingBankStatementHeader
									invoked.EnterpriseGroup				= LocalCashManagementGroup.EnterpriseGroup
									invoked.SystemCalendar				= LocalCashManagementGroup.CorporateCalendar
									invoked.IncomingBankStatementHeader	= LocalCalendarStatementDate
									invoked.CashManagementGroup			= LocalCashManagementGroup
							invoke Create IncomingBankStatementDetail
								invoked.EnterpriseGroup					= LocalCashManagementGroup.EnterpriseGroup
								invoked.SystemCalendar					= LocalCashManagementGroup.CorporateCalendar
								invoked.IncomingBankStatementHeader		= LocalCreateStatementDate
								invoked.IncomingBankStatementDetail 	= LocalNewCashManagementAccount
								if (LocalNewCashManagementAccount = LocalCashManagementAccount
								and LocalCreateStatementDate = LocalStatementDate)
									invoked.Status							= 1	
									invoked.MissingStatus					= 2	
									invoked.TimeReceived 					= current timestamp
									invoked.BankStatementInterfaceHeader 	= BankStatementInterfaceHeader
								else
								if (NewBankStatementRel exists)
									if (NewBankStatementRel.BankStatementInterfaceHeader entered)
										invoked.Status = 2	
										invoked.CompletedStatus = 1	
									else
										invoked.Status = 2	
										invoked.CompletedStatus = 2	
								else
								if (each.NoBankStatementsExpected)
									invoked.Status			= 3	
									invoked.ExcludedStatus 	= 2	
								else
									invoked.Status			= 1	
									invoked.MissingStatus 	= 1	

		CreateIncomingBankStatementDetail
			if (IncomingBankStatementDetailRel exists)
				invoke Update IncomingBankStatementDetailRel
					invoked.Status			= 1	
					invoked.MissingStatus	= 2	
					invoked.TimeReceived 	= current timestamp
			else
				invoke Create IncomingBankStatementDetail
					invoked.EnterpriseGroup					= LocalCashManagementGroup.EnterpriseGroup
					invoked.SystemCalendar					= LocalCashManagementGroup.CorporateCalendar
					invoked.IncomingBankStatementHeader		= LocalCreateStatementDate
					invoked.IncomingBankStatementDetail 	= LocalCashManagementAccount
					invoked.Status							= 1	
					invoked.MissingStatus					= 2	
					invoked.TimeReceived 					= current timestamp

		ImportValidationRules
			invoke Purge BankStatementInterfaceHeaderError set
			HasValidationErrors = false
			LocalValidationErrors = false

			if (MT94XFormat)
				for each MT940CashAccountRel
					LocalBankStatementInterface = each.BankStatementInterface
					if (NextMT940CashAccountRel exists)
						LocalNextStmtBankStatementInterface = first NextMT940CashAccountRel.BankStatementInterface
					else
						LocalNextStmtBankStatementInterface = last BankStatementInterface set.BankStatementInterface + 1 
					LocalImportAccountNumber = each.MT940Data[5:40]
					LocalCashManagementAccount = first ActualCashManagementAccountRel.CashManagementAccount
					LocalCashManagementGroup = PrmCashManagementGroup
					if (!ActualCashManagementAccountRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 1 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.ImportAccountNumber 		= LocalImportAccountNumber
					else		
						if (ActualCashManagementAccountRel.IsInactive)	
							LocalValidationErrors = true
							SkipCashAccountAttachRule = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType					= 10 
								invoked.BankStatementInterface		= each.BankStatementInterface
								invoked.CashManagementGroup			= LocalCashManagementGroup
								invoked.CashManagementAccount		= LocalCashManagementAccount
								invoked.ImportAccountNumber 		= LocalImportAccountNumber		

					LocalStatementDate = "20" + each.first MT940ClosingRel.MT940Data[7:12]
					if (DuplicateBankStatementRel exists
					and !ActualCashManagementAccountRel.AllowMultipleStatementsPerDay)	
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 2 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.CashManagementAccount		= LocalCashManagementAccount
							invoked.BankStatement				= first DuplicateBankStatementRel.BankStatement
							invoked.StatementDate				= LocalStatementDate

					LocalBankStatementInterface = each.BankStatementInterface
					if (DuplicateBankStatementInterfaceRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 8 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.CashManagementAccount		= LocalCashManagementAccount
							invoked.BankStatement				= first DuplicateBankStatementInterfaceRel.BankStatement
							invoked.StatementDate				= LocalStatementDate

					LocalStatementDatePlus6Days = LocalStatementDate + 6 days	
					if (!CorporateCalendarStatementDatePlus6DaysRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 15 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.CashManagementAccount		= LocalCashManagementAccount
							invoked.BankStatement				= first DuplicateBankStatementRel.BankStatement
							invoked.StatementDate				= LocalStatementDate
					
					LocalImportCurrency = first MT940OpeningRel.MT940Data[13:15]
					if (LocalImportCurrency entered)
						LocalAccountCurrency = first ActualCashManagementAccountRel.Currency
						if (LocalCashManagementAccount entered
						and LocalImportCurrency != LocalAccountCurrency)
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType				= 3 
								invoked.BankStatementInterface	= each.BankStatementInterface
								invoked.CashManagementGroup		= LocalCashManagementGroup
								invoked.ImportCurrency			= LocalImportCurrency
								invoked.CashManagementAccount	= LocalCashManagementAccount

					if (ValidateBalance) 
						
						LocalCashManagementGroup = PrmCashManagementGroup	
						LocalAccumulatedLineAmount = 0
						LocalEndingBalance = 0
						for each MT940TransactionLineRel  			
							LocalTransactionType = each.DerivedTransactionType
							LocalBankStatementInterface = each.BankStatementInterface
							
							if (!BankTransactionTypeCodeRel exists)
								LocalValidationErrors = true
								invoke Create BankStatementInterfaceHeaderError set
									invoked.ErrorType					= 4 
									invoked.BankStatementInterface		= each.BankStatementInterface
									invoked.CashManagementGroup			= LocalCashManagementGroup
									invoked.TransactionType				= LocalTransactionType
									
							if (each.DerivedAccountNumber = LocalImportAccountNumber)
								LocalAccumulatedLineAmount = LocalAccumulatedLineAmount + each.DerivedTransactionAmount
						
						LocalMT940Amount = each.MT940ClosingRel.MT940Data[16:31]
						LocalMT940Amount2 = ""
						LocalCounter = 1
			
						while (LocalCounter < 15)
							if (LocalMT940Amount[LocalCounter:LocalCounter] = ",")
								LocalMT940Amount2 = LocalMT940Amount2 + "."
							else
								LocalMT940Amount2 = LocalMT940Amount2 + LocalMT940Amount[LocalCounter:LocalCounter]
							LocalCounter +=1
							
						LocalEndingBalance = LocalMT940Amount2
			
						if (each.MT940ClosingRel.MT940Data[6:6] = "D")
							LocalEndingBalance = LocalEndingBalance * -1
							
						if (DerivedBeginningBalance + LocalAccumulatedLineAmount != LocalEndingBalance)
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType					= 17 
								invoked.BankStatementInterface		= LocalBankStatementInterface
								invoked.CashManagementGroup			= LocalCashManagementGroup
								invoked.TransactionType				= LocalTransactionType
								invoked.ImportAccountNumber			= LocalImportAccountNumber
								
					else
						LocalCashManagementGroup = PrmCashManagementGroup
						for each MT940TransactionLineRel
							LocalTransactionType = each.DerivedTransactionType
							if (!BankTransactionTypeCodeRel exists)
								LocalValidationErrors = true
								invoke Create BankStatementInterfaceHeaderError set
									invoked.ErrorType					= 4 
									invoked.BankStatementInterface		= each.BankStatementInterface
									invoked.CashManagementGroup			= LocalCashManagementGroup
									invoked.TransactionType				= LocalTransactionType
					
			else
			if (CAMT05XFormat)
				for each CAMT05XStmtRel
					LocalBankStatementInterface					= each.BankStatementInterface
					if (NextCAMT05XStmtRel exists)
						LocalNextStmtBankStatementInterface		= first NextCAMT05XStmtRel.BankStatementInterface
					else
						LocalNextStmtBankStatementInterface		= last BankStatementInterface set.BankStatementInterface + 1 
					LocalImportAccountNumber					= each.CAMT05XAcct
					LocalCashManagementAccount					= first ActualCashManagementAccountRel.CashManagementAccount
					LocalCashManagementGroup 					= PrmCashManagementGroup

					if (!ActualCashManagementAccountRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 1	
							invoked.BankStatementInterface		= LocalBankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.ImportAccountNumber			= LocalImportAccountNumber
					else
						if (ActualCashManagementAccountRel.IsInactive)	
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType				= 10 
								invoked.BankStatementInterface	= LocalBankStatementInterface
								invoked.CashManagementGroup		= LocalCashManagementGroup
								invoked.ImportAccountNumber		= LocalImportAccountNumber

					LocalStatementDate = each.CAMT05XStmtDate
					if (DuplicateBankStatementRel exists
					and !ActualCashManagementAccountRel.AllowMultipleStatementsPerDay)	
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 2	
							invoked.BankStatementInterface		= LocalBankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.CashManagementAccount		= LocalCashManagementAccount
							invoked.BankStatement				= first DuplicateBankStatementRel.BankStatement
							invoked.StatementDate				= LocalStatementDate

					if (DuplicateBankStatementInterfaceRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 8	
							invoked.BankStatementInterface		= LocalBankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.CashManagementAccount		= LocalCashManagementAccount
							invoked.BankStatement				= first DuplicateBankStatementInterfaceRel.BankStatement
							invoked.StatementDate				= LocalStatementDate

					LocalStatementDatePlus6Days = LocalStatementDate + 6 days	
					if (!CorporateCalendarStatementDatePlus6DaysRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 15 
							invoked.BankStatementInterface		= LocalBankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.CashManagementAccount		= LocalCashManagementAccount
							invoked.BankStatement				= first DuplicateBankStatementRel.BankStatement
							invoked.StatementDate				= LocalStatementDate
							
					LocalImportCurrency = each.CAMT05XAcctCcy
					if (LocalImportCurrency entered)
						LocalAccountCurrency = first ActualCashManagementAccountRel.Currency
						if (LocalCashManagementAccount entered
						and LocalImportCurrency != LocalAccountCurrency)
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType				= 3	
								invoked.BankStatementInterface	= each.BankStatementInterface
								invoked.CashManagementGroup		= LocalCashManagementGroup
								invoked.ImportCurrency			= LocalImportCurrency
								invoked.CashManagementAccount	= LocalCashManagementAccount



















					if (ValidateBalance)
						LocalEndingBalance = each.CAMT05XClosingBalAmt
						LocalAccumulatedLineAmount = 0


					for each CAMT05XNtryByStmtRel
						LocalPrtryCount = each.CAMT053Data select "count(/Ntry/BkTxCd/Prtry)"
						LocalDomnCount = each.CAMT053Data select "count(/Ntry/BkTxCd/Domn)"

						if (LocalPrtryCount = 0
						and LocalDomnCount = 0)
							if (!IgnoreBankTransactionCodeError
							and !HasBankTransactionCodeDomainOrProprietaryDoesNotExistError)
								LocalValidationErrors = true
								invoke Create BankStatementInterfaceHeaderError set
									invoked.ErrorType				= 16 
									invoked.BankStatementInterface	= each.BankStatementInterface
									invoked.CashManagementGroup		= LocalCashManagementGroup			
									invoked.TransactionType			= LocalTransactionType

						if (LocalPrtryCount > 0)
							LocalTransactionType = each.CAMT053Data select "/Ntry/BkTxCd/Prtry/Cd"
							if (LocalTransactionType entered
							and LocalTransactionType != LocalNtryTransactionType)
								LocalNtryTransactionType = LocalTransactionType
								if (!BankTransactionTypeCodeRel exists)
									LocalValidationErrors = true
									invoke Create BankStatementInterfaceHeaderError set
										invoked.ErrorType				= 4 
										invoked.BankStatementInterface	= each.BankStatementInterface
										invoked.CashManagementGroup		= LocalCashManagementGroup
										invoked.TransactionType			= LocalTransactionType

						if (LocalDomnCount > 0)
							LocalDomain = each.CAMT053Data select "/Ntry/BkTxCd/Domn/Cd"
							if (LocalDomain entered
							and LocalDomain != LocalNtryDomain)
								LocalNtryDomain = LocalDomain
								if (!ISO20022DomainCodeRel exists)
									LocalValidationErrors = true
									invoke Create BankStatementInterfaceHeaderError set
										invoked.ErrorType				= 11 
										invoked.BankStatementInterface	= each.BankStatementInterface
										invoked.CashManagementGroup		= LocalCashManagementGroup
										invoked.Domain					= LocalDomain

							LocalFamily = each.CAMT053Data select "/Ntry/BkTxCd/Domn/Fmly/Cd"
							if (LocalFamily entered
							and LocalFamily != LocalNtryFamily)
								LocalNtryFamily = LocalFamily
								if (!ISO20022FamilyCodeRel exists)
									LocalValidationErrors = true
									invoke Create BankStatementInterfaceHeaderError set
										invoked.ErrorType				= 12 
										invoked.BankStatementInterface	= each.BankStatementInterface
										invoked.CashManagementGroup		= LocalCashManagementGroup
										invoked.Family					= LocalFamily

							LocalSubFamily = each.CAMT053Data select "/Ntry/BkTxCd/Domn/Fmly/SubFmlyCd"
							if (LocalSubFamily entered
							and LocalSubFamily != LocalNtrySubFamily)
								LocalNtrySubFamily = LocalSubFamily
								if (!ISO20022SubFamilyCodeRel exists)
									LocalValidationErrors = true
									invoke Create BankStatementInterfaceHeaderError set
										invoked.ErrorType				= 13 
										invoked.BankStatementInterface	= each.BankStatementInterface
										invoked.CashManagementGroup		= LocalCashManagementGroup
										invoked.SubFamily				= LocalSubFamily

						if (ValidateBalance) 	
							if (each.CAMT053Data select "/Ntry/CdtDbtInd" = "DBIT")
								LocalAccumulatedLineAmount += each.CAMT053Data select "/Ntry/Amt" * -1
							else
								LocalAccumulatedLineAmount += each.CAMT053Data select "/Ntry/Amt"

					if (ValidateBalance) 	
						if (DerivedBeginningBalance + LocalAccumulatedLineAmount != LocalEndingBalance)
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType					= 17 
								invoked.BankStatementInterface		= LocalBankStatementInterface
								invoked.CashManagementGroup			= LocalCashManagementGroup
								invoked.TransactionType				= LocalTransactionType
								invoked.ImportAccountNumber			= LocalImportAccountNumber

			else
			if (BAIFormat)
				for each BAICashAccountRel
					LocalImportAccountNumber = each.DataColArray.ColArray[2]
					LocalCashManagementAccount = first ActualCashManagementAccountRel.CashManagementAccount
					LocalCashManagementGroup = PrmCashManagementGroup
					if (!ActualCashManagementAccountRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 1 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.ImportAccountNumber 		= LocalImportAccountNumber
					else		
						if (ActualCashManagementAccountRel.IsInactive)	
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType				= 10 
								invoked.BankStatementInterface	= each.BankStatementInterface
								invoked.CashManagementGroup		= LocalCashManagementGroup
								invoked.ImportAccountNumber 	= LocalImportAccountNumber		

					if (each.last GroupHeaderRel.DataColArray.ColArray[5] size = 6)
						LocalStatementDate = "20" + each.last GroupHeaderRel.DataColArray.ColArray[5]
					else
						LocalStatementDate = each.last GroupHeaderRel.DataColArray.ColArray[5]
					
					if (DuplicateBankStatementRel exists
					and !ActualCashManagementAccountRel.AllowMultipleStatementsPerDay)	
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 2 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.CashManagementAccount		= LocalCashManagementAccount
							invoked.BankStatement				= first DuplicateBankStatementRel.BankStatement
							invoked.StatementDate				= LocalStatementDate

					LocalBankStatementInterface = each.BankStatementInterface
					if (DuplicateBankStatementInterfaceRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 8 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.CashManagementAccount		= LocalCashManagementAccount
							invoked.BankStatement				= first DuplicateBankStatementInterfaceRel.BankStatement
							invoked.StatementDate				= LocalStatementDate

					LocalStatementDatePlus6Days = LocalStatementDate + 6 days	
					if (!CorporateCalendarStatementDatePlus6DaysRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 15 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.CashManagementAccount		= LocalCashManagementAccount
							invoked.BankStatement				= first DuplicateBankStatementRel.BankStatement
							invoked.StatementDate				= LocalStatementDate
							
					LocalImportCurrency = each.DataColArray.ColArray[3]
					if (LocalImportCurrency entered)
						LocalAccountCurrency = first ActualCashManagementAccountRel.Currency
						if (LocalCashManagementAccount entered
						and LocalImportCurrency != LocalAccountCurrency)
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType				= 3 
								invoked.BankStatementInterface	= each.BankStatementInterface
								invoked.CashManagementGroup		= LocalCashManagementGroup
								invoked.ImportCurrency			= LocalImportCurrency
								invoked.CashManagementAccount	= LocalCashManagementAccount

				LocalCashManagementGroup = PrmCashManagementGroup
				for each BAITransactionLineRel
					LocalTransactionType = each.DerivedTransactionType
					if (!BankTransactionTypeCodeRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 4 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.TransactionType				= LocalTransactionType	

			else
			if (CSVFormat)
				LocalFirstIteration = true
				for each CSVCashAccountRel
					LocalImportAccountNumber = each.DataColArray.ColArray[1]
					if (LocalCSVImportAccountNumber != LocalImportAccountNumber)		
						LocalCSVImportAccountNumber = LocalImportAccountNumber			
						LocalAccountChanged = true			
						LocalCashManagementAccount = first ActualCashManagementAccountRel.CashManagementAccount
						LocalCashManagementGroup = PrmCashManagementGroup
						if (!ActualCashManagementAccountRel exists)
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType					= 1 
								invoked.BankStatementInterface		= each.BankStatementInterface
								invoked.CashManagementGroup			= LocalCashManagementGroup
								invoked.ImportAccountNumber 		= LocalImportAccountNumber
						else
							if (ActualCashManagementAccountRel.IsInactive)	
								LocalValidationErrors = true
								invoke Create BankStatementInterfaceHeaderError set
									invoked.ErrorType					= 10 
									invoked.BankStatementInterface		= each.BankStatementInterface
									invoked.CashManagementGroup			= LocalCashManagementGroup
									invoked.ImportAccountNumber 		= LocalImportAccountNumber		

					LocalStatementDate = each.DataColArray.ColArray[3]
					if (LocalAccountChanged			
					or  LocalCSVStatementDate != LocalStatementDate)		
						LocalCSVStatementDate = LocalStatementDate			
						if (DuplicateBankStatementRel exists
						and !ActualCashManagementAccountRel.AllowMultipleStatementsPerDay)	
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType					= 2 
								invoked.BankStatementInterface		= each.BankStatementInterface
								invoked.CashManagementGroup			= LocalCashManagementGroup
								invoked.CashManagementAccount		= LocalCashManagementAccount
								invoked.BankStatement				= first DuplicateBankStatementRel.BankStatement
								invoked.StatementDate				= LocalStatementDate

						LocalStatementDatePlus6Days = LocalStatementDate + 6 days	
						if (!CorporateCalendarStatementDatePlus6DaysRel exists)
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType					= 15 
								invoked.BankStatementInterface		= each.BankStatementInterface
								invoked.CashManagementGroup			= LocalCashManagementGroup
								invoked.CashManagementAccount		= LocalCashManagementAccount
								invoked.BankStatement				= first DuplicateBankStatementRel.BankStatement
								invoked.StatementDate				= LocalStatementDate
							
					LocalImportCurrency = each.DataColArray.ColArray[4]
					if (LocalAccountChanged			
					or  LocalCSVImportCurrency != LocalImportCurrency)			
						LocalCSVImportCurrency = LocalImportCurrency			
						if (LocalImportCurrency entered)
							LocalAccountCurrency = first ActualCashManagementAccountRel.Currency
							if (LocalCashManagementAccount entered
							and LocalImportCurrency != LocalAccountCurrency)
								LocalValidationErrors = true
								invoke Create BankStatementInterfaceHeaderError set
									invoked.ErrorType				= 3 
									invoked.BankStatementInterface	= each.BankStatementInterface
									invoked.CashManagementGroup		= LocalCashManagementGroup
									invoked.ImportCurrency			= LocalImportCurrency
									invoked.CashManagementAccount	= LocalCashManagementAccount

					LocalTransactionType = each.DerivedTransactionType
					if (LocalCSVTransactionType != LocalTransactionType)		
						LocalCSVTransactionType = LocalTransactionType			
						if (!BankTransactionTypeCodeRel exists)
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType					= 4 
								invoked.BankStatementInterface		= each.BankStatementInterface
								invoked.CashManagementGroup			= LocalCashManagementGroup
								invoked.TransactionType				= LocalTransactionType					
								


					if (ValidateBalance) 	
						if (LocalAccountChanged
						and !LocalFirstIteration) 
							if (LocalBeginningBalance + LocalAccumulatedLineAmount != LocalEndingBalance)
								LocalValidationErrors = true
								invoke Create BankStatementInterfaceHeaderError set
									invoked.ErrorType					= 17 
									invoked.BankStatementInterface		= LocalBankStatementInterface
									invoked.CashManagementGroup			= LocalCashManagementGroup
									invoked.TransactionType				= LocalTransactionType
									invoked.ImportAccountNumber			= LocalImportAccountNumber
							LocalAccumulatedLineAmount = 0
							
						LocalAccumulatedLineAmount += each.DerivedTransactionAmount
						LocalEndingBalance = each.DataColArray.ColArray[6]
						LocalBeginningBalance = DerivedBeginningBalance
						LocalFirstIteration = false
							
					initialize LocalAccountChanged			
				


				if (ValidateBalance
				and !LocalFirstIteration) 
					if (DerivedBeginningBalance + LocalAccumulatedLineAmount != LocalEndingBalance)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 17 
							invoked.BankStatementInterface		= LocalBankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.TransactionType				= LocalTransactionType
							invoked.ImportAccountNumber			= LocalImportAccountNumber































			else
			if (EDI822Format)
				LocalCashManagementGroup = PrmCashManagementGroup
				for each EDI822GroupHeaderRel
					LocalIdentifier = each.DataColArray.ColArray[3]
	 				LocalFinancialInstitution = first FinancialInstitutionBranchRel.FinancialInstitution

					if(!FinancialInstitutionBranchRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 7 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.BranchIdentifier			= LocalIdentifier

				if (first EDI822DateTimeRel.DataColArray.ColArray[3] size = 6)
					LocalStatementDate = "20" + first EDI822DateTimeRel.DataColArray.ColArray[3]
				else
					LocalStatementDate = first EDI822DateTimeRel.DataColArray.ColArray[3]

				for each EDI822CashAccountRel
					LocalImportAccountNumber = each.DataColArray.ColArray[2]
					LocalCashManagementAccount = first ActualCashManagementAccountRel.CashManagementAccount

					if (!ActualCashManagementAccountRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 1 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.FinancialInstitution		= LocalFinancialInstitution
							invoked.ImportAccountNumber 		= LocalImportAccountNumber
					else
						if (ActualCashManagementAccountRel.IsInactive)	
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType					= 10 
								invoked.BankStatementInterface		= each.BankStatementInterface
								invoked.CashManagementGroup			= LocalCashManagementGroup
								invoked.FinancialInstitution		= LocalFinancialInstitution
								invoked.ImportAccountNumber 		= LocalImportAccountNumber		

					if (DuplicateFeeStatementRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 6 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.CashManagementAccount		= LocalCashManagementAccount
							invoked.FinancialInstitution		= LocalFinancialInstitution
							invoked.BankServiceStatement		= first DuplicateFeeStatementRel.BankServiceStatement
							invoked.StatementDate				= LocalStatementDate

					LocalBankStatementInterface = each.BankStatementInterface
					if (DuplicateBankStatementInterfaceRel exists)
						LocalValidationErrors = true
						invoke Create BankStatementInterfaceHeaderError set
							invoked.ErrorType					= 9 
							invoked.BankStatementInterface		= each.BankStatementInterface
							invoked.CashManagementGroup			= LocalCashManagementGroup
							invoked.CashManagementAccount		= LocalCashManagementAccount
							invoked.FinancialInstitution		= LocalFinancialInstitution
							invoked.BankServiceStatement		= first DuplicateBankStatementInterfaceRel.BankServiceStatement
							invoked.StatementDate				= LocalStatementDate

					LocalImportCurrency = first EDI822CurrencyRel.DataColArray.ColArray[3]
					if (LocalImportCurrency entered)
						LocalAccountCurrency = first ActualCashManagementAccountRel.Currency
						if (LocalCashManagementAccount entered
						and LocalImportCurrency != LocalAccountCurrency)
							LocalValidationErrors = true
							invoke Create BankStatementInterfaceHeaderError set
								invoked.ErrorType				= 3 
								invoked.BankStatementInterface	= each.BankStatementInterface
								invoked.CashManagementGroup		= LocalCashManagementGroup
								invoked.ImportCurrency			= LocalImportCurrency
								invoked.CashManagementAccount	= LocalCashManagementAccount

			HasValidationErrors = LocalValidationErrors
			if (!HasValidationErrors)
				invoke InvokeImport
					invoked.PrmCashManagementGroup = LocalCashManagementGroup

	Actions
		Create is a Create Action
			restricted

		Update is an Update Action
			restricted

		Delete is a Delete Action
			restricted

		Purge is a Purge Action		
			restricted

		ImportAll is a Set Action
			completion message is "ImportAllHasBeenSubmittedToTheQueueForProcessing"
			run in background
			Parameters
				PrmCashManagementGroup is a CashManagementGroup

			Instance Selection 
				where (CanImport)

			Sort Order
				BankStatementInterfaceHeader

			Action Rules
				Instance Rules
					if (Status.NotImported)
						invoke NotImported.Import
							invoked.PrmCashManagementGroup = PrmCashManagementGroup

		ExecuteProcessingRules is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				invoke InvokeReclassifyAllStatementLines BankStatement set

		TransitionToImported is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (!BankStatementInterfaceNotImportedRel exists)
					Status = Status.Imported

			Exit Rules
				if (EDI822Format)
					invoke Refresh BankServicesAnalyticCubeRel in background

		ImportValidation is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup	is a CashManagementGroup

			Local Fields
				LocalCounter			is Numeric 6
				LocalLineNumber			is Numeric 6
				LocalValidationErrors	is Boolean

			Action Rules
				include ImportValidationRules

		PurgeHistory is a Set Action
			Parameters
				ImportDateRange		is a DateRange
				OnlyPurgeIntraday 	is Boolean

			Parameter Rules
				ImportDateRange	
					required
						"BeginningImportDateIsRequired"

					constraint (ImportDateRange.Begin entered)
						"BeginningImportDateIsRequired"
					
					constraint (ImportDateRange.End entered)
						"EndingImportDateIsRequired"

			Instance Selection
				where (CanPurge
				and	   ImportDate within ImportDateRange
				and	  (!OnlyPurgeIntraday
				or	   OnlyPurgeIntraday
				and	   StatementType.Intraday))

			Action Rules
				Instance Rules
					if (Status.Imported)
						invoke Imported.Purge
					else
						invoke ImportCanceled.Purge
						
		IgnoreOutOfBalanceStatement is an Instance Action
			restricted
			Parameters
				PrmCashManagementGroup is a CashManagementGroup
			Action Rules
				IgnoreOutOfBalanceStatement = true
				invoke NotImported.Import
					invoked.PrmCashManagementGroup = PrmCashManagementGroup

		IgnoreBankTransactionCodeError is an Instance Action 
			restricted
			Parameters
				PrmCashManagementGroup is a CashManagementGroup
			Action Rules
				IgnoreBankTransactionCodeError = true
				invoke NotImported.Import
					invoked.PrmCashManagementGroup = PrmCashManagementGroup

		FastUpdate is an Update Action
			restricted
			bypass field rules
			default label is untranslatable

	StateCycles
		BSIHCycle is a StateCycle
			state field is Status

			NotImported is a State
				Import is an Instance Action
					valid when (CanImport)
					completion message is "ImportHasBeenSubmittedToTheQueueForProcessing"
					Parameters
						PrmCashManagementGroup	is a CashManagementGroup

					Action Rules
						if (CAMT05XFormat)
							constraint (CAMT05XStmtRel exists)
								"<FileFormat>FormatHasChanged;MustDelete_\Bank_\Statement_\InterfaceAndReimportFile"

						invoke ImportValidation in background
							invoked.PrmCashManagementGroup = PrmCashManagementGroup

				InvokeImport is an Instance Action
					default label is untranslatable
					restricted
					completion message is "ImportHasBeenSubmittedToTheQueueForProcessing"
					Parameters
						PrmCashManagementGroup	is a CashManagementGroup

					Action Rules
						if (BankStatementInterfaceNotImportedRel exists)	
							invoke ImportBatch BankStatementInterface in background
								invoked.PrmCashManagementGroup	 		= PrmCashManagementGroup
								invoked.PrmBankStatementInterfaceHeader	= BankStatementInterfaceHeader

	 						make transition to ImportInitiated

	 						if (FileContainsMultipleStatementsWithSameAccount)
								for each distinct ImportAccountNumber in ImportAccountNumberBankStatementInterfaceRel
									LocalImportAccountNumber = each.ImportAccountNumber
									LocalCashManagementAccount = first ActualCashManagementAccountRel.CashManagementAccount
									if (LocalCashManagementAccount entered
									and LocalCashManagementAccount.AutoReconcileStatementLines)
										invoke LoadAndReconcile LocalCashManagementAccount in background
											run outside of action background group
											run after current action background group
	 					else
	 						make transition to NoRecordsImported	

				Cancel is an Instance Action
					Action Rules
						make transition to ImportCanceled

			ImportInitiated is a State
				ImportRestricted is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						make transition to Imported

				Cancel is an Instance Action
					Action Rules
						make transition to ImportCanceled

			Imported is a State
				RemoveBankStatements is an Instance Action
					valid when (HasBankStatements)
					Action Rules
						constraint (!StatementsLoadedIntoReconciliation)
							"CannotRemoveBankStatements;Statement<first BankStatementReconciliation set.BankStatement>HasBeenLoadedIntoReconciliation"
						constraint (HasBankStatements)
							"CannotRemoveBankStatements;CashManagementAccountFlaggedToImportReceivablePayments"

						invoke Delete BankStatement set

				PurgeImportedBankStatementInterfaceHeader is an Instance Action	
					Action Rules
						if (UsePurgeSetAction)	
							confirmation required
								"PurgeWillBeSubmittedToTheQueueForProcessing;RefreshScreenToVerifyActionIsComplete.Continue?"
							invoke PurgeBankStatementInterfaceSetAction BankStatementInterface
								invoked.PrmBankStatementInterfaceHeader	= BankStatementInterfaceHeader 
						else
							invoke Purge BankStatementInterface set
							invoke Purge



			ImportCanceled is a State
				Reset is an Instance Action
		 			Action Rules
		 				make transition to NotImported

				PurgeCancelledBankStatementInterfaceHeader is an Instance Action	
					Action Rules
						if (UsePurgeSetAction)
							confirmation required
								"PurgeWillBeSubmittedToTheQueueForProcessing;RefreshScreenToVerifyActionIsComplete.Continue?"	
							invoke PurgeBankStatementInterfaceSetAction BankStatementInterface
								invoked.PrmBankStatementInterfaceHeader	= BankStatementInterfaceHeader 
						else
							invoke Purge BankStatementInterface set
							invoke Purge



			NoRecordsImported is a State	
				Cancel is an Instance Action
		 			Action Rules
		 				make transition to ImportCanceled
