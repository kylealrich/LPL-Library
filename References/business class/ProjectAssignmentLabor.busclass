ProjectAssignmentLabor is a BusinessClass
    owned by Projects
    prefix is PJASL

    Ontology
    	part of ProjectAssignment
    		relative key is LaborPeriod
    		
    Persistent Fields
		Status				is Numeric size 1
			States
				Entered			value is 1
				Approved		value is 2
				Processed		value is 3
				Certified		value is 4
				PendingApproval value is 5
		RedistributionApprovalStatus is Numeric size 1				
			States
				Approved		value is 1
				Rejected    	value is 2
				PendingApproval value is 3
		ActualPercent		is Percent size 6.3
		DateRange
		JournalizeGroup
		PlannedPercent		is Percent size 6.3
		Adjusted			is Boolean
		PreviewAmount		is a InternationalAmount
			precision is Project.Currency.NumberOfDecimals
		PreviewBurdenAmount	is a InternationalAmount
			precision is Project.Currency.NumberOfDecimals		
		Capped				is Boolean
		NoTransactionsFound	is Boolean
		CertifiedPercent	is Percent size 6.3
		ErrorMessage		is Text
			default label is "LaborDistributionErrorMessage"
			disable Auditing
		FinanceCodeBlock	is a FinanceCodeBlockNoProject 
			default label is "FinanceStructure"
		ProjectLaborSchedule	
		PreviewUnitsAmount	is a UnitsAmount
		CertifiedCommittedEffort	is Percent size 6.3  
		OverageAmount		is an InternationalAmount
			precision is Project.Currency.NumberOfDecimals
			default label is "UndistributedOverage"
		TransactionAmount			is an InternationalAmount
			precision is Project.Currency.NumberOfDecimals
			disable Auditing
		DistributedOverageAmount	is an InternationalAmount
			precision is Project.Currency.NumberOfDecimals
			disable Auditing
		FringeBurdenAmount			is an InternationalAmount
			precision is Project.Currency.NumberOfDecimals
			disable Auditing
		Hours						is like UnitsAmount
			disable Auditing

	Transient Fields
		LaborEmployee						is like Employee
			derive value from Employee
		TransientCurrencyTable              is a CurrencyTable
		TransientAccountingEntity           is an AccountingEntity  
		TransientExchangeDate               is an ExchangeDate
		TransientPostingDate                is a PostingDate
		TransientFromCurrency               is a FromCurrency
		TransientCurrencyAmount             is a CurrencyAmount
		TransientReportCurrencyAmount	    is a FinanceCurrencyAmount
		CommittedEffort						is Percent size 6.3
		SkipReduce							is Boolean
		BypassStructureRelationEdit		
		BypassActiveCodeBlockEdit
		Redistributed						is Boolean

	Context Fields
		ProjectSchedulePeriod
		
	Local Fields
		LocalDateRange				  is a DateRange
		LocalEmployee				  is like Employee
		LocalFinanceEnterpriseGroup	  is like FinanceEnterpriseGroup
		LocalAccountingEntity		  is like AccountingEntity
		LocalAccountingEntityGroup	  is like AccountingEntityGroup
		LocalPeriod					  is like ProjectSchedulePeriod
		LocalSalaryCap				  is like ProjectSalaryCap
		LocalSalaryCapDate			  is Date
		LocalProject				  is a Project
		LocalProjectAssignment		  is like ProjectAssignment
		LocalSplitSequenceNumber	  is like SequenceNumber
	    TotalsAccumulated    		  is Boolean		
		LocalProjectTransactionAmount is like InternationalAmount
		LocalDistributedOverage		  is like InternationalAmount
		LocalProjectUnitsAmount    	  is like UnitsAmount
		LocalProjectBurdenAmount	  is like InternationalAmount
		LocalOverageAmount			  is like InternationalAmount
		LocalPercent				  is Percent size 6.3
		LocalRoundTo		 		  is Decimal 5.4
		LocalAmount					  is like InternationalAmount
		LocalTransactionDate		  is Date
		LocalBurdenAmount			  is like InternationalAmount
		LocalUnitsAmount			  is like UnitsAmount
		CompletionMessage			  is Alpha size 60
		RecordCreated				  is Boolean
		ResetJournalizeGroup		  is like JournalizeGroup
		LocalProjectLaborSchedule     is like ProjectLaborSchedule
		LocalForceCalculation		  is Boolean	
		LocalFinanceClodeBlock 		  is a TransactionCodeBlock
		LocalExchangeDate             is an ExchangeDate
		LocalBurdenCodeBlock		  is a TransactionCodeBlock
		LocalBurdenCode               is a ProjectBurdenCode		
		LocalProjectAssignmentBurden  is Boolean
		LocalSequenceNumber			  is Numeric size 4
		LocalEffortPeriod			  is like ProjectEffortPeriod
		LocalEncumbranceAmount		  is like CurrencyAmount
		LocalSubmittedActor			  is an Actor	
		LocalApprovalActor			  is an Actor			
		LocalRedistributionSubmittedActor is an Actor	
		LocalRedistributionApprovalActor  is an Actor
		LocalAssignmentDateRange	  is a ProjectDateRange			
		LocalProjectStructureValidationResult is a ProjectStructureValidationResult
		LocalCodeBlock				  is a FinanceCodeBlock
		LocalOverageOption			  is Numeric size 1
		ActualDifference			  is Percent size 6.3
		PlannedDifference			  is Percent size 6.3

	Rule Blocks    
		CalculateSalaryCapEncumbrance
			if (LocalProject.SalaryCap entered)
				LocalRoundTo                = DerivedRoundTo
				LocalFinanceEnterpriseGroup = FinanceEnterpriseGroup
				LocalSalaryCap              = LocalProject.SalaryCap
				if (LocalProject.SalaryCapDate.ProjectStartDate)
					LocalSalaryCapDate = LocalProject.ProjectDateRange.BeginDate
				else
					LocalSalaryCapDate = LocalDateRange.End
				if (Employee.EncumbranceSalaryAmount <= (SalaryCapRel.MaximumAmount * DerivedLaborFTE))
					if (Employee.EncumbranceBasis.PlannedPercent)				
				  		LocalEncumbranceAmount = ((Employee.EncumbranceSalaryAmount / ProjectLaborSchedule.SalaryDivisor) * PlannedPercent * DerivedLaborFTE)
					else
					if (Employee.EncumbranceBasis.ActualPercent)				
				  		LocalEncumbranceAmount = ((Employee.EncumbranceSalaryAmount / ProjectLaborSchedule.SalaryDivisor) * ActualPercent * DerivedLaborFTE)

			  		round LocalEncumbranceAmount to nearest LocalRoundTo
				else				
					if (Employee.EncumbranceBasis.PlannedPercent)								
						LocalEncumbranceAmount = ((SalaryCapRel.MaximumAmount / ProjectLaborSchedule.SalaryDivisor) * PlannedPercent * DerivedLaborFTE)
					else	
					if (Employee.EncumbranceBasis.ActualPercent)								
						LocalEncumbranceAmount = ((SalaryCapRel.MaximumAmount / ProjectLaborSchedule.SalaryDivisor) * ActualPercent * DerivedLaborFTE)
					round LocalEncumbranceAmount to nearest LocalRoundTo
			else
				if (Employee.EncumbranceBasis.PlannedPercent)											
			  		LocalEncumbranceAmount = ((Employee.EncumbranceSalaryAmount / ProjectLaborSchedule.SalaryDivisor) * PlannedPercent)
				else	
				if (Employee.EncumbranceBasis.ActualPercent)											
			  		LocalEncumbranceAmount = ((Employee.EncumbranceSalaryAmount / ProjectLaborSchedule.SalaryDivisor) * ActualPercent)

		  		round LocalEncumbranceAmount to nearest LocalRoundTo
	
	    AccumulateTotals
	        if (!TotalsAccumulated)
	        	for each ProjectAssignmentLaborTransaction set
		            if (each.GLTransactionDetail.GeneralLedgerEvent = "BD")
		            	LocalProjectBurdenAmount  += each.GLTransactionDetail.TransactionAmount
		            else
			        	LocalProjectTransactionAmount += each.GLTransactionDetail.TransactionAmount
			            LocalProjectUnitsAmount       += each.GLTransactionDetail.UnitsAmount
			            if (each.IsOverage)
			            	LocalDistributedOverage   += each.GLTransactionDetail.TransactionAmount
		       	TotalsAccumulated = true

		UpdateEncumbrance 	
			if (EncumbrancesExist)	
				LocalProject                   = Project
				LocalDateRange.End             = DateRange.End
				include CalculateSalaryCapEncumbrance
			    LocalFinanceEnterpriseGroup    = FinanceEnterpriseGroup	 
			    LocalProjectLaborSchedule      = ProjectLaborSchedule
			    LocalPeriod					   = LaborPeriod.Period	
				LocalFinanceClodeBlock         = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock
				LocalFinanceClodeBlock.Project = Project				
				TransientCurrencyTable         = FinanceEnterpriseGroup.CurrencyTable
				TransientAccountingEntity      = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.ToAccountingEntity
				TransientExchangeDate          = DateRange.End
				TransientPostingDate           = DateRange.End
				TransientFromCurrency          = Employee.ProjectEmployee.Currency
				TransientCurrencyAmount        = LocalEncumbranceAmount
				TransientReportCurrencyAmount.UseDerivedCalculations = true
				LocalForceCalculation	       = TransientReportCurrencyAmount.AssignToCurrency	
				LocalForceCalculation 	       = TransientReportCurrencyAmount.DerivedCalculationsComplete	
				invoke UpdateReleasedCommitment GLCommitSalaryEncumbranceRel
					invoked.TransactionAmount    	= LocalEncumbranceAmount
					invoked.ReportCurrencyAmount	= TransientReportCurrencyAmount
					invoked.TransactionDate      	= DateRange.End
					invoked.AccountingEntity        = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.ToAccountingEntity
					invoked.CurrencyCode            = Employee.ProjectEmployee.Currency
				if (Employee.ProjectEmployee.FringeEncumbrance						
				and !Project.FringeBurden.No)
					LocalProjectAssignmentBurden =  false				
					if (ProjectAssignment.BurdenCode entered)
						LocalBurdenCode             = ProjectAssignment.BurdenCode
						LocalBurdenCodeBlock        = ProjectAssignment.FringeEncumbranceCodeBlock
						LocalProjectAssignmentBurden =  true
					else
						LocalBurdenCode             = Employee.ProjectEmployee.BurdenCode
						LocalBurdenCodeBlock        = Employee.ProjectEmployee.FringeEncumbranceCodeBlock
					LocalExchangeDate       = DateRange.End								
	    			TransientCurrencyAmount = LocalEncumbranceAmount * ProjectBurdenCodeFringeRel.Rate
	    			round TransientCurrencyAmount to nearest LocalRoundTo
	    			if (ProjectBurdenCodeFringeRel.Rate entered)
		    			initialize				  TransientReportCurrencyAmount
						TransientReportCurrencyAmount.UseDerivedCalculations = true
						LocalForceCalculation	= TransientReportCurrencyAmount.AssignToCurrency	
						LocalForceCalculation 	= TransientReportCurrencyAmount.DerivedCalculationsComplete														
						LocalFinanceClodeBlock  = LocalBurdenCodeBlock
						if (LocalProjectAssignmentBurden)	
							invoke UpdateReleasedCommitment ProjectAssignmentBurdenRel
								invoked.TransactionAmount    	= TransientCurrencyAmount
								invoked.ReportCurrencyAmount	= TransientReportCurrencyAmount
								invoked.TransactionDate      	= DateRange.End
								invoked.AccountingEntity        = LocalBurdenCodeBlock.ToAccountingEntity
								invoked.CurrencyCode            = Employee.ProjectEmployee.Currency
						else
						if (!LocalProjectAssignmentBurden)
							invoke UpdateReleasedCommitment OtherProjectEmployeeBurdenRel
								invoked.TransactionAmount    	= TransientCurrencyAmount 
								invoked.ReportCurrencyAmount	= TransientReportCurrencyAmount
								invoked.TransactionDate      	= DateRange.End
								invoked.AccountingEntity        = LocalBurdenCodeBlock.ToAccountingEntity
								invoked.CurrencyCode            = Employee.ProjectEmployee.Currency

		ProcessTransactionTable
			Counter2 = 1
			while (TransactionTable.GLTransactionDetail[Counter2] entered)
				TransactionProcessed = false
				LocalTransaction = TransactionTable.GLTransactionDetail[Counter2]
				if ((LocalTransaction.TransactionAmount >= 0
				and  !ProcessNegatives)
				or  (LocalTransaction.TransactionAmount < 0
				and  ProcessNegatives))
					LocalTransPercent = LocalTransaction.TransactionAmount / LocalEmployeeAmount
					TotalTransAmount = LocalTransaction.TransactionAmount
					TotalUnitsAmount = LocalTransaction.UnitsAmount
					initialize TotalOverageAmount
					Counter = 1
					while (LaborDistributionTable.LaborDistribution[Counter].Project entered)
						RecordCreated = false
    					ErrorFound = false
    					OverageErrorFound = false
    					BurdenErrorFound = false
    					initialize LocalOverageAmount
						LocalProject = LaborDistributionTable.LaborDistribution[Counter].Project
						LocalProjectAssignment = LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment
						LocalSplitSequenceNumber = LaborDistributionTable.LaborDistribution[Counter].SequenceNumber
						LocalAssignmentDateRange = ProjectAssignmentRel.ProjectDateRange
						if (LocalProject.HasPeriodOfPerformance
						and ProjectPeriodOfPerformanceRel exists)
							LocalAssignmentDateRange.BeginDate -= ProjectPeriodOfPerformanceRel.LeadDays
							LocalAssignmentDateRange.EndDate   += ProjectPeriodOfPerformanceRel.LagDays
						if (LocalTransaction.TransactionDate within LocalAssignmentDateRange)
							TransactionProcessed = true
	    					LaborDistributionTable.LaborDistribution[Counter].Found = true
    						TransientFromCurrency = LocalProject.Currency
							LocalAmount = LocalTransaction.TransactionAmount * LaborDistributionTable.LaborDistribution[Counter].ActualPercent
							round LocalAmount to nearest LocalRoundTo
							LaborDistributionTable.LaborDistribution[Counter].TransactionAmount = LocalAmount
							LaborDistributionTable.LaborDistribution[Counter].UnitsAmount = LocalTransaction.UnitsAmount * LaborDistributionTable.LaborDistribution[Counter].ActualPercent
							LocalMax = LocalTransPercent * LaborDistributionTable.LaborDistribution[Counter].MaximumAmount
							round LocalMax to nearest LocalRoundTo
							if (LocalMax entered)
								if ((LocalMax < 0
								and  LaborDistributionTable.LaborDistribution[Counter].MaxExceeded)
								or  (LocalMax > 0
								and  LaborDistributionTable.LaborDistribution[Counter].TransactionAmount > LocalMax))
									LocalOverageAmount = LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
									LaborDistributionTable.LaborDistribution[Counter].TransactionAmount = LocalMax
									LaborDistributionTable.LaborDistribution[Counter].MaxExceeded = true													
									LocalOverageAmount -= LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
									MaxExceeded = true
									if (!LocalProject.OverageCodeBlock entered)									
										LaborDistributionTable.LaborDistribution[Counter].OverageAmount += LocalOverageAmount
							LaborDistributionTable.LaborDistribution[Counter].TotalAmount += LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
							LaborDistributionTable.LaborDistribution[Counter].TotalUnits += LaborDistributionTable.LaborDistribution[Counter].UnitsAmount
							TotalTransAmount -= LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
							TotalUnitsAmount -= LaborDistributionTable.LaborDistribution[Counter].UnitsAmount
							TotalOverageAmount += LocalOverageAmount
							if   (Counter = LastActualCounter
							and   TotalPercent = 1
							and ((TotalTransAmount != 0
							and   TotalTransAmount > -1
							and   TotalTransAmount < 1)
							or   (TotalUnitsAmount != 0
							and   TotalUnitsAmount > -1
							and   TotalUnitsAmount < 1))
							and (!MaxExceeded
							or    TotalOverageAmount != TotalTransAmount))
								LaborDistributionTable.LaborDistribution[Counter].TransactionAmount += (TotalTransAmount - TotalOverageAmount)

								TotalTransAmount = TotalOverageAmount
								LaborDistributionTable.LaborDistribution[Counter].UnitsAmount += TotalUnitsAmount
								TotalUnitsAmount = 0
							if (LaborDistributionTable.LaborDistribution[Counter].TransactionAmount entered
							or  LaborDistributionTable.LaborDistribution[Counter].UnitsAmount entered)
								RecordCreated = true
								invoke Released.Create GLTransactionDetail
									assign result to LocalGLTransactionDetail										
									resume on error
										ErrorFound = true
										LocalErrorMessage = error message										
									fill in fields from LocalTransaction
										except invoked.ReportCurrencyAmount
										except invoked.OriginatingTransaction
										except invoked.AutoReverse
			                		invoked.OriginalLaborTransaction = LocalTransaction
									invoked.TransactionAmount 		 = LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
									invoked.PostingDate				 = PrmPostingDate
									invoked.LaborDistribution		 = 2
									if (FromAccountingEntity entered)
										invoked.AccountingEntity	 = FromAccountingEntity
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.ToAccountingEntity entered)
										invoked.FinanceCodeBlock.ToAccountingEntity	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.ToAccountingEntity
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.AccountingUnit entered)
										invoked.FinanceCodeBlock.AccountingUnit	 			= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.AccountingUnit
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.GeneralLedgerChartAccount entered)
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.GeneralLedgerChartAccount
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension1 entered)
										invoked.FinanceCodeBlock.FinanceDimension1	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension1
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension2 entered)
										invoked.FinanceCodeBlock.FinanceDimension2	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension2
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension3 entered)
										invoked.FinanceCodeBlock.FinanceDimension3	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension3
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension4 entered)
										invoked.FinanceCodeBlock.FinanceDimension4	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension4
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension5 entered)
										invoked.FinanceCodeBlock.FinanceDimension5	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension5
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension6 entered)
										invoked.FinanceCodeBlock.FinanceDimension6	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension6
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension7 entered)
										invoked.FinanceCodeBlock.FinanceDimension7	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension7
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension8 entered)
										invoked.FinanceCodeBlock.FinanceDimension8	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension8
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension9 entered)
										invoked.FinanceCodeBlock.FinanceDimension9	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension9
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension10	entered)
										invoked.FinanceCodeBlock.FinanceDimension10 	 	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension10
									invoked.FinanceCodeBlock.Project = LaborDistributionTable.LaborDistribution[Counter].Project
									invoked.System					 = "PR"
									invoked.GeneralLedgerEvent		 = "PL"
									invoked.Reference				 = "ProjectAssignmentLabor"
									invoked.JournalizeGroup          = LocalJournalizeGroup
									invoked.UnitsAmount				 = LaborDistributionTable.LaborDistribution[Counter].UnitsAmount
									invoked.Billed					 = 0
									invoked.RevenueRecognized		 = 0
									invoked.Capitalize				 = 0
									invoked.IndirectBurden			 = 0
								if (!ErrorFound)
									invoke Create ProjectAssignmentLaborTransaction
										invoked.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
										invoked.Project						= LaborDistributionTable.LaborDistribution[Counter].Project
										invoked.Employee					= LocalEmployee
										invoked.ProjectAssignment			= LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment
										invoked.LaborPeriod.Period			= LocalPeriod
										invoked.LaborPeriod.SequenceNumber	= LaborDistributionTable.LaborDistribution[Counter].SequenceNumber 
										invoked.GLTransactionDetail			= LocalGLTransactionDetail.GLTransactionDetail
									LaborDistributionTable.LaborDistribution[Counter].TotalTransactionAmount += LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
									LaborDistributionTable.LaborDistribution[Counter].TotalHours			 += LaborDistributionTable.LaborDistribution[Counter].UnitsAmount
								if (!LocalProject.FringeBurden.No
								and !ErrorFound)
									LocalTransactionDate = LocalTransaction.TransactionDate
									LocalBurdenCode = ProjectAssignmentRel.BurdenCode
									LocalBurdenAmount = LaborDistributionTable.LaborDistribution[Counter].TransactionAmount * ProjectBurdenCodeRel.Rate
									round LocalBurdenAmount to nearest LocalRoundTo
									if (LocalBurdenAmount entered)
										invoke Released.Create GLTransactionDetail
											assign result to LocalGLTransactionDetail												
											resume on error
												BurdenErrorFound = true
												LocalErrorMessage = error message												
											fill in fields from LocalTransaction
												except invoked.ReportCurrencyAmount
												except invoked.OriginatingTransaction
												except invoked.UnitsAmount
												except invoked.AutoReverse
					                		invoked.OriginalLaborTransaction = LocalTransaction
											invoked.TransactionAmount 		 = LocalBurdenAmount
											invoked.PostingDate				 = PrmPostingDate
											invoked.LaborDistribution		 = 2
											if (FromAccountingEntity entered)
												invoked.AccountingEntity	 = FromAccountingEntity
											if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity entered)
													invoked.FinanceCodeBlock.ToAccountingEntity	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit entered)
													invoked.FinanceCodeBlock.AccountingUnit	 			= ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
													invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1 entered)
													invoked.FinanceCodeBlock.FinanceDimension1	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2 entered)
													invoked.FinanceCodeBlock.FinanceDimension2	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3 entered)
													invoked.FinanceCodeBlock.FinanceDimension3	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4 entered)
													invoked.FinanceCodeBlock.FinanceDimension4	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5 entered)
													invoked.FinanceCodeBlock.FinanceDimension5	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6 entered)
													invoked.FinanceCodeBlock.FinanceDimension6	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7 entered)
													invoked.FinanceCodeBlock.FinanceDimension7	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8 entered)
													invoked.FinanceCodeBlock.FinanceDimension8	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9 entered)
													invoked.FinanceCodeBlock.FinanceDimension9	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10	entered)
													invoked.FinanceCodeBlock.FinanceDimension10 	 	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10
											else
												if (ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity entered)
													invoked.FinanceCodeBlock.ToAccountingEntity	 		= ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity
												if (ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit entered)
													invoked.FinanceCodeBlock.AccountingUnit	 			= ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit
												if (ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
													invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1 entered)
													invoked.FinanceCodeBlock.FinanceDimension1	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2 entered)
													invoked.FinanceCodeBlock.FinanceDimension2	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3 entered)
													invoked.FinanceCodeBlock.FinanceDimension3	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4 entered)
													invoked.FinanceCodeBlock.FinanceDimension4	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5 entered)
													invoked.FinanceCodeBlock.FinanceDimension5	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6 entered)
													invoked.FinanceCodeBlock.FinanceDimension6	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7 entered)
													invoked.FinanceCodeBlock.FinanceDimension7	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8 entered)
													invoked.FinanceCodeBlock.FinanceDimension8	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9 entered)
													invoked.FinanceCodeBlock.FinanceDimension9	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10	entered)
													invoked.FinanceCodeBlock.FinanceDimension10 	 	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10
											invoked.FinanceCodeBlock.Project = LaborDistributionTable.LaborDistribution[Counter].Project
											invoked.System					 = "PR"
											invoked.GeneralLedgerEvent		 = "BD"
											invoked.Reference				 = "ProjectAssignmentLaborBurden"
											invoked.JournalizeGroup          = LocalJournalizeGroup
											invoked.Billed					 = 0
											invoked.RevenueRecognized		 = 0
											invoked.Capitalize				 = 0
											invoked.IndirectBurden			 = 0
										if (!BurdenErrorFound)
											invoke Create ProjectAssignmentLaborTransaction
												invoked.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
												invoked.Project						= LaborDistributionTable.LaborDistribution[Counter].Project
												invoked.Employee					= LocalEmployee
												invoked.ProjectAssignment			= LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment
												invoked.LaborPeriod.Period			= LocalPeriod
												invoked.LaborPeriod.SequenceNumber	= LaborDistributionTable.LaborDistribution[Counter].SequenceNumber 
												invoked.GLTransactionDetail			= LocalGLTransactionDetail.GLTransactionDetail
											LaborDistributionTable.LaborDistribution[Counter].TotalFringeBurden += LocalBurdenAmount
											if (FringeOffsetCodeBlock entered)
												invoke Released.Create GLTransactionDetail
													resume on error
														BurdenErrorFound = true
													fill in fields from LocalTransaction
														except invoked.ReportCurrencyAmount
														except invoked.OriginatingTransaction
														except invoked.UnitsAmount
														except invoked.AutoReverse
							                		invoked.OriginalLaborTransaction = LocalTransaction
													invoked.TransactionAmount 		 = LocalBurdenAmount * -1
													invoked.PostingDate				 = PrmPostingDate
													invoked.LaborDistribution		 = 2
													if (FromAccountingEntity entered)
														invoked.AccountingEntity	 = FromAccountingEntity
													if (FringeOffsetCodeBlock.ToAccountingEntity entered)
														invoked.FinanceCodeBlock.ToAccountingEntity	 		= FringeOffsetCodeBlock.ToAccountingEntity
													if (FringeOffsetCodeBlock.AccountingUnit entered)
														invoked.FinanceCodeBlock.AccountingUnit	 	 		= FringeOffsetCodeBlock.AccountingUnit
													if (FringeOffsetCodeBlock.GeneralLedgerChartAccount entered)
														invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= FringeOffsetCodeBlock.GeneralLedgerChartAccount
													if (FringeOffsetCodeBlock.Project entered)
														invoked.FinanceCodeBlock.Project			 		= FringeOffsetCodeBlock.Project
													if (FringeOffsetCodeBlock.FinanceDimension1 entered)
														invoked.FinanceCodeBlock.FinanceDimension1	 		= FringeOffsetCodeBlock.FinanceDimension1
													if (FringeOffsetCodeBlock.FinanceDimension2 entered)
														invoked.FinanceCodeBlock.FinanceDimension2	 		= FringeOffsetCodeBlock.FinanceDimension2
													if (FringeOffsetCodeBlock.FinanceDimension3 entered)
														invoked.FinanceCodeBlock.FinanceDimension3	 		= FringeOffsetCodeBlock.FinanceDimension3
													if (FringeOffsetCodeBlock.FinanceDimension4 entered)
														invoked.FinanceCodeBlock.FinanceDimension4	 		= FringeOffsetCodeBlock.FinanceDimension4
													if (FringeOffsetCodeBlock.FinanceDimension5 entered)
														invoked.FinanceCodeBlock.FinanceDimension5	 		= FringeOffsetCodeBlock.FinanceDimension5
													if (FringeOffsetCodeBlock.FinanceDimension6 entered)
														invoked.FinanceCodeBlock.FinanceDimension6	 		= FringeOffsetCodeBlock.FinanceDimension6
													if (FringeOffsetCodeBlock.FinanceDimension7 entered)
														invoked.FinanceCodeBlock.FinanceDimension7	 		= FringeOffsetCodeBlock.FinanceDimension7
													if (FringeOffsetCodeBlock.FinanceDimension8 entered)
														invoked.FinanceCodeBlock.FinanceDimension8	 		= FringeOffsetCodeBlock.FinanceDimension8
													if (FringeOffsetCodeBlock.FinanceDimension9 entered)
														invoked.FinanceCodeBlock.FinanceDimension9	 		= FringeOffsetCodeBlock.FinanceDimension9
													if (FringeOffsetCodeBlock.FinanceDimension10 entered)
														invoked.FinanceCodeBlock.FinanceDimension10 	 	= FringeOffsetCodeBlock.FinanceDimension10											
													invoked.System					 = "PR"
													invoked.GeneralLedgerEvent		 = "BD"
													invoked.Reference				 = "ProjectAssignmentLaborBurden"
													invoked.JournalizeGroup          = LocalJournalizeGroup
													invoked.Billed					 = 0
													invoked.RevenueRecognized		 = 0
													invoked.Capitalize				 = 0
													invoked.IndirectBurden			 = 0
											if (FringeOffsetCodeBlock not entered
											or  BurdenErrorFound)
												BurdenErrorFound = false
												invoke Released.Create GLTransactionDetail
													resume on error
														BurdenErrorFound = true
														LocalErrorMessage = error message														
													fill in fields from LocalTransaction
														except invoked.ReportCurrencyAmount
														except invoked.OriginatingTransaction
														except invoked.UnitsAmount
														except invoked.AutoReverse
							                		invoked.OriginalLaborTransaction = LocalTransaction
													invoked.TransactionAmount 		 = LocalBurdenAmount * -1
													invoked.PostingDate				 = PrmPostingDate
													invoked.LaborDistribution		 = 2
													if (FromAccountingEntity entered)
														invoked.AccountingEntity	 = FromAccountingEntity
													if (ProjectBurdenCodeRel.OffsetCodeBlockOption.FullStructure)
														invoked.FinanceCodeBlock = ProjectBurdenCodeRel.OffsetCodeBlock
													else
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.ToAccountingEntity entered)
															invoked.FinanceCodeBlock.ToAccountingEntity	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.ToAccountingEntity
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity entered)
																	invoked.FinanceCodeBlock.ToAccountingEntity	= ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity entered)
																	invoked.FinanceCodeBlock.ToAccountingEntity	= ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.AccountingUnit entered)
															invoked.FinanceCodeBlock.AccountingUnit	 		= ProjectBurdenCodeRel.OffsetPartialCodeBlock.AccountingUnit
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit entered)
																	invoked.FinanceCodeBlock.AccountingUnit	= ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit entered)
																	invoked.FinanceCodeBlock.AccountingUnit	 	= ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.GeneralLedgerChartAccount entered)
															invoked.FinanceCodeBlock.GeneralLedgerChartAccount		= ProjectBurdenCodeRel.OffsetPartialCodeBlock.GeneralLedgerChartAccount
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
																	invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
																	invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension1 entered)
															invoked.FinanceCodeBlock.FinanceDimension1	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension1
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1 entered)
																	invoked.FinanceCodeBlock.FinanceDimension1	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1 entered)
																	invoked.FinanceCodeBlock.FinanceDimension1	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension2 entered)
															invoked.FinanceCodeBlock.FinanceDimension2	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension2
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2 entered)
																	invoked.FinanceCodeBlock.FinanceDimension2	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2 entered)
																	invoked.FinanceCodeBlock.FinanceDimension2	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension3 entered)
															invoked.FinanceCodeBlock.FinanceDimension3	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension3
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3 entered)
																	invoked.FinanceCodeBlock.FinanceDimension3	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3 entered)
																	invoked.FinanceCodeBlock.FinanceDimension3	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension4 entered)
															invoked.FinanceCodeBlock.FinanceDimension4	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension4
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4 entered)
																	invoked.FinanceCodeBlock.FinanceDimension4	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4 entered)
																	invoked.FinanceCodeBlock.FinanceDimension4	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension5 entered)
															invoked.FinanceCodeBlock.FinanceDimension5	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension5
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5 entered)
																	invoked.FinanceCodeBlock.FinanceDimension5	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5 entered)
																	invoked.FinanceCodeBlock.FinanceDimension5	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension6 entered)
															invoked.FinanceCodeBlock.FinanceDimension6	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension6
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6 entered)
																	invoked.FinanceCodeBlock.FinanceDimension6	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6 entered)
																	invoked.FinanceCodeBlock.FinanceDimension6	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension7 entered)
															invoked.FinanceCodeBlock.FinanceDimension7	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension7
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7 entered)
																	invoked.FinanceCodeBlock.FinanceDimension7	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7 entered)
																	invoked.FinanceCodeBlock.FinanceDimension7	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension8 entered)
															invoked.FinanceCodeBlock.FinanceDimension8	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension8
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8 entered)
																	invoked.FinanceCodeBlock.FinanceDimension8	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8 entered)
																	invoked.FinanceCodeBlock.FinanceDimension8	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension9 entered)
															invoked.FinanceCodeBlock.FinanceDimension9	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension9
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9 entered)
																	invoked.FinanceCodeBlock.FinanceDimension9	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9 entered)
																	invoked.FinanceCodeBlock.FinanceDimension9	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension10 entered)
															invoked.FinanceCodeBlock.FinanceDimension10	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension10
														else
															if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
																if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10 entered)
																	invoked.FinanceCodeBlock.FinanceDimension10	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10
															else
																if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10 entered)
																	invoked.FinanceCodeBlock.FinanceDimension10	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10
														if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.Project entered)
															invoked.FinanceCodeBlock.Project = ProjectBurdenCodeRel.OffsetPartialCodeBlock.Project
														else
															invoked.FinanceCodeBlock.Project = blank
													invoked.System					 = "PR"
													invoked.GeneralLedgerEvent		 = "BD"
													invoked.Reference				 = "ProjectAssignmentLaborBurden"
													invoked.JournalizeGroup          = LocalJournalizeGroup
													invoked.Billed					 = 0
													invoked.RevenueRecognized		 = 0
													invoked.Capitalize				 = 0
													invoked.IndirectBurden			 = 0
							if (LocalOverageAmount entered
							and LocalProject.OverageCodeBlock entered)
								TotalTransAmount -= LocalOverageAmount
								TotalOverageAmount -= LocalOverageAmount
								RecordCreated = true
								invoke Released.Create GLTransactionDetail
									assign result to LocalGLTransactionDetail
									resume on error
										OverageErrorFound = true
										LocalErrorMessage = error message										
									fill in fields from LocalTransaction
										except invoked.ReportCurrencyAmount
										except invoked.OriginatingTransaction
										except invoked.UnitsAmount
										except invoked.AutoReverse
			                		invoked.OriginalLaborTransaction = LocalTransaction
									invoked.TransactionAmount 		 = LocalOverageAmount
									invoked.PostingDate				 = PrmPostingDate
									invoked.LaborDistribution		 = 2
									if (FromAccountingEntity entered)
										invoked.AccountingEntity	 = FromAccountingEntity
									if (LocalProject.OverageCodeBlock.ToAccountingEntity entered)
										invoked.FinanceCodeBlock.ToAccountingEntity	 		= LocalProject.OverageCodeBlock.ToAccountingEntity
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.ToAccountingEntity entered)
										invoked.FinanceCodeBlock.ToAccountingEntity	 		= Employee.ProjectEmployee.FinanceCodeBlock.ToAccountingEntity
									if (LocalProject.OverageCodeBlock.AccountingUnit entered)
										invoked.FinanceCodeBlock.AccountingUnit	 	 		= LocalProject.OverageCodeBlock.AccountingUnit
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.AccountingUnit entered)
										invoked.FinanceCodeBlock.AccountingUnit	 			= Employee.ProjectEmployee.FinanceCodeBlock.AccountingUnit
									if (LocalProject.OverageCodeBlock.GeneralLedgerChartAccount entered)
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalProject.OverageCodeBlock.GeneralLedgerChartAccount
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.GeneralLedgerChartAccount entered)
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= Employee.ProjectEmployee.FinanceCodeBlock.GeneralLedgerChartAccount
									if (LocalProject.OverageCodeBlock.Project entered)
										invoked.FinanceCodeBlock.Project	 				= LocalProject.OverageCodeBlock.Project
									if (LocalProject.OverageCodeBlock.FinanceDimension1 entered)
										invoked.FinanceCodeBlock.FinanceDimension1	 		= LocalProject.OverageCodeBlock.FinanceDimension1
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension1 entered)
										invoked.FinanceCodeBlock.FinanceDimension1	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension1
									if (LocalProject.OverageCodeBlock.FinanceDimension2 entered)
										invoked.FinanceCodeBlock.FinanceDimension2	 		= LocalProject.OverageCodeBlock.FinanceDimension2
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension2 entered)
										invoked.FinanceCodeBlock.FinanceDimension2	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension2
									if (LocalProject.OverageCodeBlock.FinanceDimension3 entered)
										invoked.FinanceCodeBlock.FinanceDimension3	 		= LocalProject.OverageCodeBlock.FinanceDimension3
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension3 entered)
										invoked.FinanceCodeBlock.FinanceDimension3	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension3
									if (LocalProject.OverageCodeBlock.FinanceDimension4 entered)
										invoked.FinanceCodeBlock.FinanceDimension4	 		= LocalProject.OverageCodeBlock.FinanceDimension4
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension4 entered)
										invoked.FinanceCodeBlock.FinanceDimension4	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension4
									if (LocalProject.OverageCodeBlock.FinanceDimension5 entered)
										invoked.FinanceCodeBlock.FinanceDimension5	 		= LocalProject.OverageCodeBlock.FinanceDimension5
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension5 entered)
										invoked.FinanceCodeBlock.FinanceDimension5	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension5
									if (LocalProject.OverageCodeBlock.FinanceDimension6 entered)
										invoked.FinanceCodeBlock.FinanceDimension6	 		= LocalProject.OverageCodeBlock.FinanceDimension6
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension6 entered)
										invoked.FinanceCodeBlock.FinanceDimension6	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension6
									if (LocalProject.OverageCodeBlock.FinanceDimension7 entered)
										invoked.FinanceCodeBlock.FinanceDimension7	 		= LocalProject.OverageCodeBlock.FinanceDimension7
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension7 entered)
										invoked.FinanceCodeBlock.FinanceDimension7	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension7
									if (LocalProject.OverageCodeBlock.FinanceDimension8 entered)
										invoked.FinanceCodeBlock.FinanceDimension8	 		= LocalProject.OverageCodeBlock.FinanceDimension8
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension8 entered)
										invoked.FinanceCodeBlock.FinanceDimension8	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension8
									if (LocalProject.OverageCodeBlock.FinanceDimension9 entered)
										invoked.FinanceCodeBlock.FinanceDimension9	 		= LocalProject.OverageCodeBlock.FinanceDimension9
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension9 entered)
										invoked.FinanceCodeBlock.FinanceDimension9	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension9
									if (LocalProject.OverageCodeBlock.FinanceDimension10	entered)
										invoked.FinanceCodeBlock.FinanceDimension10 	 	= LocalProject.OverageCodeBlock.FinanceDimension10
									else
									if (LocalOverageOption = 1
									and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension10 entered)
										invoked.FinanceCodeBlock.FinanceDimension10 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension10
									invoked.System					 = "PR"
									invoked.GeneralLedgerEvent		 = "PL"
									invoked.Reference				 = "ProjectAssignmentLaborOverage"
									invoked.JournalizeGroup          = LocalJournalizeGroup
									invoked.Billed					 = 0
									invoked.RevenueRecognized		 = 0
									invoked.Capitalize				 = 0
									invoked.IndirectBurden			 = 0
								if (!OverageErrorFound)
									invoke Create ProjectAssignmentLaborTransaction
										invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
										invoked.Project						= LaborDistributionTable.LaborDistribution[Counter].Project
										invoked.Employee					= Employee
										invoked.ProjectAssignment			= LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment
										invoked.LaborPeriod.Period			= LaborPeriod.Period
										invoked.LaborPeriod.SequenceNumber	= LaborDistributionTable.LaborDistribution[Counter].SequenceNumber 
										invoked.GLTransactionDetail			= LocalGLTransactionDetail.GLTransactionDetail									
									LaborDistributionTable.LaborDistribution[Counter].TotalDistributedOverage += LocalOverageAmount
							if (ErrorFound)
								TotalTransAmount += LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
								TotalUnitsAmount += LaborDistributionTable.LaborDistribution[Counter].UnitsAmount
								LaborDistributionTable.LaborDistribution[Counter].ErrorMessage = LocalErrorMessage
								RecordCreated = false
							else
							if (OverageErrorFound)
								TotalTransAmount += LocalOverageAmount
								LaborDistributionTable.LaborDistribution[Counter].ErrorMessage = LocalErrorMessage
								RecordCreated = false
							else
							if (BurdenErrorFound)
								LaborDistributionTable.LaborDistribution[Counter].ErrorMessage = "Burden:" + LocalErrorMessage
							if (RecordCreated)
								LaborDistributionTable.LaborDistribution[Counter].Created = true
						Counter += 1
					Counter = 1
					AnyCreated = false
					while (LaborDistributionTable.LaborDistribution[Counter].Project entered)									
						if (LaborDistributionTable.LaborDistribution[Counter].Created)
							AnyCreated = true
						Counter += 1
					if (AnyCreated
					and TransactionProcessed)
						invoke LaborDistributionProcessed LocalTransaction
						TotalTransAmount -= LocalTransaction.TransactionAmount
						TotalUnitsAmount -= LocalTransaction.UnitsAmount
						initialize OffsetErrorFound
						if (TotalTransAmount entered
						or  TotalUnitsAmount entered)
							invoke Released.Create GLTransactionDetail
								resume on error
									OffsetErrorFound = true
								fill in fields from LocalTransaction
									except invoked.ReportCurrencyAmount
									except invoked.OriginatingTransaction
									except invoked.AutoReverse
		                		invoked.OriginalLaborTransaction = LocalTransaction
								invoked.TransactionAmount 		 = TotalTransAmount
								invoked.PostingDate				 = PrmPostingDate
								invoked.LaborDistribution		 = 2
								if (FromAccountingEntity entered)
									invoked.AccountingEntity	 = FromAccountingEntity
								if (OffsetCodeBlock.ToAccountingEntity entered)
									invoked.FinanceCodeBlock.ToAccountingEntity	 		= OffsetCodeBlock.ToAccountingEntity
								if (OffsetCodeBlock.AccountingUnit entered)
									invoked.FinanceCodeBlock.AccountingUnit	 	 		= OffsetCodeBlock.AccountingUnit
								if (OffsetCodeBlock.GeneralLedgerChartAccount entered)
									invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= OffsetCodeBlock.GeneralLedgerChartAccount
								if (OffsetCodeBlock.Project entered)
									invoked.FinanceCodeBlock.Project			 		= OffsetCodeBlock.Project
								if (OffsetCodeBlock.FinanceDimension1 entered)
									invoked.FinanceCodeBlock.FinanceDimension1	 		= OffsetCodeBlock.FinanceDimension1
								if (OffsetCodeBlock.FinanceDimension2 entered)
									invoked.FinanceCodeBlock.FinanceDimension2	 		= OffsetCodeBlock.FinanceDimension2
								if (OffsetCodeBlock.FinanceDimension3 entered)
									invoked.FinanceCodeBlock.FinanceDimension3	 		= OffsetCodeBlock.FinanceDimension3
								if (OffsetCodeBlock.FinanceDimension4 entered)
									invoked.FinanceCodeBlock.FinanceDimension4	 		= OffsetCodeBlock.FinanceDimension4
								if (OffsetCodeBlock.FinanceDimension5 entered)
									invoked.FinanceCodeBlock.FinanceDimension5	 		= OffsetCodeBlock.FinanceDimension5
								if (OffsetCodeBlock.FinanceDimension6 entered)
									invoked.FinanceCodeBlock.FinanceDimension6	 		= OffsetCodeBlock.FinanceDimension6
								if (OffsetCodeBlock.FinanceDimension7 entered)
									invoked.FinanceCodeBlock.FinanceDimension7	 		= OffsetCodeBlock.FinanceDimension7
								if (OffsetCodeBlock.FinanceDimension8 entered)
									invoked.FinanceCodeBlock.FinanceDimension8	 		= OffsetCodeBlock.FinanceDimension8
								if (OffsetCodeBlock.FinanceDimension9 entered)
									invoked.FinanceCodeBlock.FinanceDimension9	 		= OffsetCodeBlock.FinanceDimension9
								if (OffsetCodeBlock.FinanceDimension10	entered)
									invoked.FinanceCodeBlock.FinanceDimension10 	 	= OffsetCodeBlock.FinanceDimension10							
								invoked.System					 = "PR"
								invoked.GeneralLedgerEvent		 = "PL"
								invoked.Reference				 = "ProjectAssignmentLabor"
								invoked.JournalizeGroup			 = LocalJournalizeGroup
								invoked.UnitsAmount				 = TotalUnitsAmount
								invoked.Billed					 = 0
								invoked.RevenueRecognized		 = 0
								invoked.Capitalize				 = 0
								invoked.IndirectBurden			 = 0
							if (OffsetErrorFound)
								invoke Released.Create GLTransactionDetail
									resume on error
									fill in fields from LocalTransaction
										except invoked.ReportCurrencyAmount
										except invoked.OriginatingTransaction
										except invoked.AutoReverse
			                		invoked.OriginalLaborTransaction = LocalTransaction
									invoked.TransactionAmount 		 = TotalTransAmount
									invoked.PostingDate				 = PrmPostingDate
									invoked.LaborDistribution		 = 2
									if (FromAccountingEntity entered)
										invoked.AccountingEntity	 = FromAccountingEntity
									invoked.System					 = "PR"
									invoked.GeneralLedgerEvent		 = "PL"
									invoked.Reference				 = "ProjectAssignmentLabor"
									invoked.JournalizeGroup			 = LocalJournalizeGroup
									invoked.UnitsAmount				 = TotalUnitsAmount
									invoked.Billed					 = 0
									invoked.RevenueRecognized		 = 0
									invoked.Capitalize				 = 0
									invoked.IndirectBurden			 = 0
				Counter2 += 1

		AddToTable
			LocalProjectStructureValidationResult = ProjectStructureValidationResultView.ProjectStructureValidationResult
			if (ProjectStructureValidationLineOTORel not exists)
				LineCount += 1
				invoke Create ProjectStructureValidationLine
					invoked.FinanceEnterpriseGroup				 = FinanceEnterpriseGroup
					invoked.ProjectStructureValidationResult	 = LocalProjectStructureValidationResult
					invoked.SequenceNumber						 = LineCount
					invoked.ValidationCodeBlock.AccountingEntity = LocalAccountingEntity
					invoked.ValidationCodeBlock.FinanceCodeBlock = LocalCodeBlock
				if (TranCount = 50)
					commit transaction
					initialize TranCount
				TranCount += 1

		ValidateTransactionTable
			Counter2 = 1
			while (TransactionTable.GLTransactionDetail[Counter2] entered)
				TransactionProcessed = false
				LocalTransaction = TransactionTable.GLTransactionDetail[Counter2]
				if ((LocalTransaction.TransactionAmount >= 0
				and  !ProcessNegatives)
				or  (LocalTransaction.TransactionAmount < 0
				and  ProcessNegatives))
					LocalTransPercent = LocalTransaction.TransactionAmount / LocalEmployeeAmount
					TotalTransAmount = LocalTransaction.TransactionAmount
					TotalUnitsAmount = LocalTransaction.UnitsAmount
					initialize TotalOverageAmount
					Counter = 1
					while (LaborDistributionTable.LaborDistribution[Counter].Project entered)
    					initialize LocalOverageAmount
						LocalProject = LaborDistributionTable.LaborDistribution[Counter].Project
						LocalProjectAssignment = LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment
						LocalSplitSequenceNumber = LaborDistributionTable.LaborDistribution[Counter].SequenceNumber
						LocalAssignmentDateRange = ProjectAssignmentRel.ProjectDateRange
						if (LocalProject.HasPeriodOfPerformance
						and ProjectPeriodOfPerformanceRel exists)
							LocalAssignmentDateRange.BeginDate -= ProjectPeriodOfPerformanceRel.LeadDays
							LocalAssignmentDateRange.EndDate   += ProjectPeriodOfPerformanceRel.LagDays
						if (LocalTransaction.TransactionDate within LocalAssignmentDateRange)
							TransactionProcessed = true
	    					LaborDistributionTable.LaborDistribution[Counter].Found = true
    						TransientFromCurrency = LocalProject.Currency
							LocalAmount = LocalTransaction.TransactionAmount * LaborDistributionTable.LaborDistribution[Counter].ActualPercent
							round LocalAmount to nearest LocalRoundTo
							LaborDistributionTable.LaborDistribution[Counter].TransactionAmount = LocalAmount
							LaborDistributionTable.LaborDistribution[Counter].UnitsAmount = LocalTransaction.UnitsAmount * LaborDistributionTable.LaborDistribution[Counter].ActualPercent
							LocalMax = LocalTransPercent * LaborDistributionTable.LaborDistribution[Counter].MaximumAmount
							round LocalMax to nearest LocalRoundTo
							if (LocalMax entered)
								if ((LocalMax < 0
								and  LaborDistributionTable.LaborDistribution[Counter].MaxExceeded)
								or  (LocalMax > 0
								and  LaborDistributionTable.LaborDistribution[Counter].TransactionAmount > LocalMax))
									LocalOverageAmount = LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
									LaborDistributionTable.LaborDistribution[Counter].TransactionAmount = LocalMax
									LaborDistributionTable.LaborDistribution[Counter].MaxExceeded = true													
									LocalOverageAmount -= LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
									MaxExceeded = true
									if (!LocalProject.OverageCodeBlock entered)									
										LaborDistributionTable.LaborDistribution[Counter].OverageAmount += LocalOverageAmount
							LaborDistributionTable.LaborDistribution[Counter].TotalAmount += LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
							LaborDistributionTable.LaborDistribution[Counter].TotalUnits += LaborDistributionTable.LaborDistribution[Counter].UnitsAmount
							TotalTransAmount -= LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
							TotalUnitsAmount -= LaborDistributionTable.LaborDistribution[Counter].UnitsAmount
							TotalOverageAmount += LocalOverageAmount
							if   (Counter = LastActualCounter
							and   TotalPercent = 1
							and ((TotalTransAmount != 0
							and   TotalTransAmount > -1
							and   TotalTransAmount < 1)
							or   (TotalUnitsAmount != 0
							and   TotalUnitsAmount > -1
							and   TotalUnitsAmount < 1))
							and (!MaxExceeded
							or    TotalOverageAmount != TotalTransAmount))
								LaborDistributionTable.LaborDistribution[Counter].TransactionAmount += (TotalTransAmount - TotalOverageAmount)
								TotalTransAmount = TotalOverageAmount
								LaborDistributionTable.LaborDistribution[Counter].UnitsAmount += TotalUnitsAmount
								TotalUnitsAmount = 0
							if (LaborDistributionTable.LaborDistribution[Counter].TransactionAmount entered
							or  LaborDistributionTable.LaborDistribution[Counter].UnitsAmount entered)
								LocalCodeBlock							= LocalTransaction.FinanceCodeBlock
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.ToAccountingEntity entered)
									LocalCodeBlock.ToAccountingEntity	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.ToAccountingEntity
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.AccountingUnit entered)
									LocalCodeBlock.AccountingUnit	 	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.AccountingUnit
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.GeneralLedgerChartAccount entered)
									LocalCodeBlock.GeneralLedgerChartAccount = LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.GeneralLedgerChartAccount
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension1 entered)
									LocalCodeBlock.FinanceDimension1	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension1
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension2 entered)
									LocalCodeBlock.FinanceDimension2	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension2
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension3 entered)
									LocalCodeBlock.FinanceDimension3	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension3
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension4 entered)
									LocalCodeBlock.FinanceDimension4	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension4
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension5 entered)
									LocalCodeBlock.FinanceDimension5	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension5
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension6 entered)
									LocalCodeBlock.FinanceDimension6	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension6
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension7 entered)
									LocalCodeBlock.FinanceDimension7	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension7
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension8 entered)
									LocalCodeBlock.FinanceDimension8	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension8
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension9 entered)
									LocalCodeBlock.FinanceDimension9	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension9
								if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension10	entered)
									LocalCodeBlock.FinanceDimension10 	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension10
								LocalCodeBlock.Project					= LaborDistributionTable.LaborDistribution[Counter].Project
								if (FromAccountingEntity entered)
									LocalAccountingEntity	= FromAccountingEntity
								else
									LocalAccountingEntity	= LocalTransaction.AccountingEntity
								include AddToTable
								if (!LocalProject.FringeBurden.No)
									LocalTransactionDate = LocalTransaction.TransactionDate
									LocalBurdenCode = ProjectAssignmentRel.BurdenCode
									LocalBurdenAmount = LaborDistributionTable.LaborDistribution[Counter].TransactionAmount * ProjectBurdenCodeRel.Rate
									round LocalBurdenAmount to nearest LocalRoundTo
									if (LocalBurdenAmount entered)
										LocalCodeBlock							= LocalTransaction.FinanceCodeBlock
										if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity entered)
												LocalCodeBlock.ToAccountingEntity	= ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit entered)
												LocalCodeBlock.AccountingUnit	 	= ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
												LocalCodeBlock.GeneralLedgerChartAccount = ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1 entered)
												LocalCodeBlock.FinanceDimension1	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2 entered)
												LocalCodeBlock.FinanceDimension2	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3 entered)
												LocalCodeBlock.FinanceDimension3	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4 entered)
												LocalCodeBlock.FinanceDimension4	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5 entered)
												LocalCodeBlock.FinanceDimension5	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6 entered)
												LocalCodeBlock.FinanceDimension6	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7 entered)
												LocalCodeBlock.FinanceDimension7	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8 entered)
												LocalCodeBlock.FinanceDimension8	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9 entered)
												LocalCodeBlock.FinanceDimension9	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9
											if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10	entered)
												LocalCodeBlock.FinanceDimension10	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10
										else
											if (ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity entered)
												LocalCodeBlock.ToAccountingEntity	= ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity
											if (ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit entered)
												LocalCodeBlock.AccountingUnit	 	= ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit
											if (ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
												LocalCodeBlock.GeneralLedgerChartAccount = ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount
											if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1 entered)
												LocalCodeBlock.FinanceDimension1	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1
											if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2 entered)
												LocalCodeBlock.FinanceDimension2	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2
											if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3 entered)
												LocalCodeBlock.FinanceDimension3	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3
											if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4 entered)
												LocalCodeBlock.FinanceDimension4	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4
											if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5 entered)
												LocalCodeBlock.FinanceDimension5	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5
											if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6 entered)
												LocalCodeBlock.FinanceDimension6	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6
											if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7 entered)
												LocalCodeBlock.FinanceDimension7	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7
											if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8 entered)
												LocalCodeBlock.FinanceDimension8	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8
											if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9 entered)
												LocalCodeBlock.FinanceDimension9	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9
											if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10	entered)
												LocalCodeBlock.FinanceDimension10	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10
										LocalCodeBlock.Project					= LaborDistributionTable.LaborDistribution[Counter].Project
										if (FromAccountingEntity entered)
											LocalAccountingEntity	= FromAccountingEntity
										else
											LocalAccountingEntity	= LocalTransaction.AccountingEntity
										include AddToTable
										if (FringeOffsetCodeBlock entered)
											LocalCodeBlock							= LocalTransaction.FinanceCodeBlock
											if (FringeOffsetCodeBlock.ToAccountingEntity entered)
												LocalCodeBlock.ToAccountingEntity	= FringeOffsetCodeBlock.ToAccountingEntity
											if (FringeOffsetCodeBlock.AccountingUnit entered)
												LocalCodeBlock.AccountingUnit	 	= FringeOffsetCodeBlock.AccountingUnit
											if (FringeOffsetCodeBlock.GeneralLedgerChartAccount entered)
												LocalCodeBlock.GeneralLedgerChartAccount = FringeOffsetCodeBlock.GeneralLedgerChartAccount
											if (FringeOffsetCodeBlock.Project entered)
												LocalCodeBlock.Project		 		= FringeOffsetCodeBlock.Project
											if (FringeOffsetCodeBlock.FinanceDimension1 entered)
												LocalCodeBlock.FinanceDimension1	= FringeOffsetCodeBlock.FinanceDimension1
											if (FringeOffsetCodeBlock.FinanceDimension2 entered)
												LocalCodeBlock.FinanceDimension2	= FringeOffsetCodeBlock.FinanceDimension2
											if (FringeOffsetCodeBlock.FinanceDimension3 entered)
												LocalCodeBlock.FinanceDimension3	= FringeOffsetCodeBlock.FinanceDimension3
											if (FringeOffsetCodeBlock.FinanceDimension4 entered)
												LocalCodeBlock.FinanceDimension4	= FringeOffsetCodeBlock.FinanceDimension4
											if (FringeOffsetCodeBlock.FinanceDimension5 entered)
												LocalCodeBlock.FinanceDimension5	= FringeOffsetCodeBlock.FinanceDimension5
											if (FringeOffsetCodeBlock.FinanceDimension6 entered)
												LocalCodeBlock.FinanceDimension6	= FringeOffsetCodeBlock.FinanceDimension6
											if (FringeOffsetCodeBlock.FinanceDimension7 entered)
												LocalCodeBlock.FinanceDimension7	= FringeOffsetCodeBlock.FinanceDimension7
											if (FringeOffsetCodeBlock.FinanceDimension8 entered)
												LocalCodeBlock.FinanceDimension8	= FringeOffsetCodeBlock.FinanceDimension8
											if (FringeOffsetCodeBlock.FinanceDimension9 entered)
												LocalCodeBlock.FinanceDimension9	= FringeOffsetCodeBlock.FinanceDimension9
											if (FringeOffsetCodeBlock.FinanceDimension10 entered)
												LocalCodeBlock.FinanceDimension10 	= FringeOffsetCodeBlock.FinanceDimension10	
											if (FromAccountingEntity entered)
												LocalAccountingEntity	= FromAccountingEntity
											else
												LocalAccountingEntity	= LocalTransaction.AccountingEntity
											include AddToTable
										else
											LocalCodeBlock				= LocalTransaction.FinanceCodeBlock
											if (ProjectBurdenCodeRel.OffsetCodeBlockOption.FullStructure)
												LocalCodeBlock = ProjectBurdenCodeRel.OffsetCodeBlock
											else
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.ToAccountingEntity entered)
													LocalCodeBlock.ToAccountingEntity	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.ToAccountingEntity
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity entered)
															LocalCodeBlock.ToAccountingEntity	= ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity entered)
															LocalCodeBlock.ToAccountingEntity	= ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.AccountingUnit entered)
													LocalCodeBlock.AccountingUnit	 		= ProjectBurdenCodeRel.OffsetPartialCodeBlock.AccountingUnit
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit entered)
															LocalCodeBlock.AccountingUnit	= ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit entered)
															LocalCodeBlock.AccountingUnit	 	= ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.GeneralLedgerChartAccount entered)
													LocalCodeBlock.GeneralLedgerChartAccount		= ProjectBurdenCodeRel.OffsetPartialCodeBlock.GeneralLedgerChartAccount
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
															LocalCodeBlock.GeneralLedgerChartAccount	= ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
															LocalCodeBlock.GeneralLedgerChartAccount	= ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension1 entered)
													LocalCodeBlock.FinanceDimension1	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension1
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1 entered)
															LocalCodeBlock.FinanceDimension1	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1 entered)
															LocalCodeBlock.FinanceDimension1	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension2 entered)
													LocalCodeBlock.FinanceDimension2	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension2
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2 entered)
															LocalCodeBlock.FinanceDimension2	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2 entered)
															LocalCodeBlock.FinanceDimension2	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension3 entered)
													LocalCodeBlock.FinanceDimension3	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension3
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3 entered)
															LocalCodeBlock.FinanceDimension3	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3 entered)
															LocalCodeBlock.FinanceDimension3	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension4 entered)
													LocalCodeBlock.FinanceDimension4	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension4
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4 entered)
															LocalCodeBlock.FinanceDimension4	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4 entered)
															LocalCodeBlock.FinanceDimension4	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension5 entered)
													LocalCodeBlock.FinanceDimension5	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension5
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5 entered)
															LocalCodeBlock.FinanceDimension5	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5 entered)
															LocalCodeBlock.FinanceDimension5	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension6 entered)
													LocalCodeBlock.FinanceDimension6	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension6
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6 entered)
															LocalCodeBlock.FinanceDimension6	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6 entered)
															LocalCodeBlock.FinanceDimension6	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension7 entered)
													LocalCodeBlock.FinanceDimension7	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension7
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7 entered)
															LocalCodeBlock.FinanceDimension7	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7 entered)
															LocalCodeBlock.FinanceDimension7	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension8 entered)
													LocalCodeBlock.FinanceDimension8	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension8
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8 entered)
															LocalCodeBlock.FinanceDimension8	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8 entered)
															LocalCodeBlock.FinanceDimension8	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension9 entered)
													LocalCodeBlock.FinanceDimension9	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension9
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9 entered)
															LocalCodeBlock.FinanceDimension9	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9 entered)
															LocalCodeBlock.FinanceDimension9	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9

												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension10 entered)
													LocalCodeBlock.FinanceDimension10	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension10
												else
													if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
														if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10 entered)
															LocalCodeBlock.FinanceDimension10	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10
													else
														if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10 entered)
															LocalCodeBlock.FinanceDimension10	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10
												if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.Project entered)
													LocalCodeBlock.Project = ProjectBurdenCodeRel.OffsetPartialCodeBlock.Project
												else
													LocalCodeBlock.Project = blank
											if (FromAccountingEntity entered)
												LocalAccountingEntity	= FromAccountingEntity
											else
												LocalAccountingEntity	= LocalTransaction.AccountingEntity
											include AddToTable
											
							if (LocalOverageAmount entered
							and LocalProject.OverageCodeBlock entered)
								TotalTransAmount -= LocalOverageAmount
								TotalOverageAmount -= LocalOverageAmount
								LocalCodeBlock					= LocalTransaction.FinanceCodeBlock
								if (LocalProject.OverageCodeBlock.ToAccountingEntity entered)
									LocalCodeBlock.ToAccountingEntity	= LocalProject.OverageCodeBlock.ToAccountingEntity
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.ToAccountingEntity entered)
									LocalCodeBlock.ToAccountingEntity	= Employee.ProjectEmployee.FinanceCodeBlock.ToAccountingEntity
								if (LocalProject.OverageCodeBlock.AccountingUnit entered)
									LocalCodeBlock.AccountingUnit	 	= LocalProject.OverageCodeBlock.AccountingUnit
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.AccountingUnit entered)
									LocalCodeBlock.AccountingUnit		= Employee.ProjectEmployee.FinanceCodeBlock.AccountingUnit
								if (LocalProject.OverageCodeBlock.GeneralLedgerChartAccount entered)
									LocalCodeBlock.GeneralLedgerChartAccount = LocalProject.OverageCodeBlock.GeneralLedgerChartAccount
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.GeneralLedgerChartAccount entered)
									LocalCodeBlock.GeneralLedgerChartAccount = Employee.ProjectEmployee.FinanceCodeBlock.GeneralLedgerChartAccount
								if (LocalProject.OverageCodeBlock.Project entered)
									LocalCodeBlock.Project				= LocalProject.OverageCodeBlock.Project
								if (LocalProject.OverageCodeBlock.FinanceDimension1 entered)
									LocalCodeBlock.FinanceDimension1	= LocalProject.OverageCodeBlock.FinanceDimension1
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension1 entered)
									LocalCodeBlock.FinanceDimension1	= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension1
								if (LocalProject.OverageCodeBlock.FinanceDimension2 entered)
									LocalCodeBlock.FinanceDimension2	= LocalProject.OverageCodeBlock.FinanceDimension2
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension2 entered)
									LocalCodeBlock.FinanceDimension2	= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension2
								if (LocalProject.OverageCodeBlock.FinanceDimension3 entered)
									LocalCodeBlock.FinanceDimension3	= LocalProject.OverageCodeBlock.FinanceDimension3
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension3 entered)
									LocalCodeBlock.FinanceDimension3	= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension3
								if (LocalProject.OverageCodeBlock.FinanceDimension4 entered)
									LocalCodeBlock.FinanceDimension4	= LocalProject.OverageCodeBlock.FinanceDimension4
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension4 entered)
									LocalCodeBlock.FinanceDimension4	= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension4
								if (LocalProject.OverageCodeBlock.FinanceDimension5 entered)
									LocalCodeBlock.FinanceDimension5	= LocalProject.OverageCodeBlock.FinanceDimension5
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension5 entered)
									LocalCodeBlock.FinanceDimension5	= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension5
								if (LocalProject.OverageCodeBlock.FinanceDimension6 entered)
									LocalCodeBlock.FinanceDimension6	= LocalProject.OverageCodeBlock.FinanceDimension6
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension6 entered)
									LocalCodeBlock.FinanceDimension6	= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension6
								if (LocalProject.OverageCodeBlock.FinanceDimension7 entered)
									LocalCodeBlock.FinanceDimension7	= LocalProject.OverageCodeBlock.FinanceDimension7
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension7 entered)
									LocalCodeBlock.FinanceDimension7	= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension7
								if (LocalProject.OverageCodeBlock.FinanceDimension8 entered)
									LocalCodeBlock.FinanceDimension8	= LocalProject.OverageCodeBlock.FinanceDimension8
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension8 entered)
									LocalCodeBlock.FinanceDimension8	= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension8
								if (LocalProject.OverageCodeBlock.FinanceDimension9 entered)
									LocalCodeBlock.FinanceDimension9	= LocalProject.OverageCodeBlock.FinanceDimension9
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension9 entered)
									LocalCodeBlock.FinanceDimension9	= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension9
								if (LocalProject.OverageCodeBlock.FinanceDimension10	entered)
									LocalCodeBlock.FinanceDimension10	= LocalProject.OverageCodeBlock.FinanceDimension10
								else
								if (LocalOverageOption = 1
								and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension10 entered)
									LocalCodeBlock.FinanceDimension10	= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension10
								if (FromAccountingEntity entered)
									LocalAccountingEntity	= FromAccountingEntity
								else
									LocalAccountingEntity	= LocalTransaction.AccountingEntity
								include AddToTable
						Counter += 1
					if (TransactionProcessed)
						TotalTransAmount -= LocalTransaction.TransactionAmount
						TotalUnitsAmount -= LocalTransaction.UnitsAmount
						if (TotalTransAmount entered
						or  TotalUnitsAmount entered)
							LocalCodeBlock = LocalTransaction.FinanceCodeBlock
							if (OffsetCodeBlock.ToAccountingEntity entered)
								LocalCodeBlock.ToAccountingEntity	= OffsetCodeBlock.ToAccountingEntity
							if (OffsetCodeBlock.AccountingUnit entered)
								LocalCodeBlock.AccountingUnit	 	= OffsetCodeBlock.AccountingUnit
							if (OffsetCodeBlock.GeneralLedgerChartAccount entered)
								LocalCodeBlock.GeneralLedgerChartAccount = OffsetCodeBlock.GeneralLedgerChartAccount
							if (OffsetCodeBlock.Project entered)
								LocalCodeBlock.Project			 	= OffsetCodeBlock.Project
							if (OffsetCodeBlock.FinanceDimension1 entered)
								LocalCodeBlock.FinanceDimension1	= OffsetCodeBlock.FinanceDimension1
							if (OffsetCodeBlock.FinanceDimension2 entered)
								LocalCodeBlock.FinanceDimension2	= OffsetCodeBlock.FinanceDimension2
							if (OffsetCodeBlock.FinanceDimension3 entered)
								LocalCodeBlock.FinanceDimension3	= OffsetCodeBlock.FinanceDimension3
							if (OffsetCodeBlock.FinanceDimension4 entered)
								LocalCodeBlock.FinanceDimension4	= OffsetCodeBlock.FinanceDimension4
							if (OffsetCodeBlock.FinanceDimension5 entered)
								LocalCodeBlock.FinanceDimension5	= OffsetCodeBlock.FinanceDimension5
							if (OffsetCodeBlock.FinanceDimension6 entered)
								LocalCodeBlock.FinanceDimension6	= OffsetCodeBlock.FinanceDimension6
							if (OffsetCodeBlock.FinanceDimension7 entered)
								LocalCodeBlock.FinanceDimension7	= OffsetCodeBlock.FinanceDimension7
							if (OffsetCodeBlock.FinanceDimension8 entered)
								LocalCodeBlock.FinanceDimension8	= OffsetCodeBlock.FinanceDimension8
							if (OffsetCodeBlock.FinanceDimension9 entered)
								LocalCodeBlock.FinanceDimension9	= OffsetCodeBlock.FinanceDimension9
							if (OffsetCodeBlock.FinanceDimension10 entered)
								LocalCodeBlock.FinanceDimension10 	= OffsetCodeBlock.FinanceDimension10
							if (FromAccountingEntity entered)
								LocalAccountingEntity	= FromAccountingEntity
							else
								LocalAccountingEntity	= LocalTransaction.AccountingEntity
							include AddToTable
				Counter2 += 1
		
		ProcessOriginalTransactionTable
			Counter2 = 1
			while (OriginalTransactionTable.GLTransactionDetail[Counter2] entered)
				LocalTransaction = OriginalTransactionTable.GLTransactionDetail[Counter2]
				if ((LocalTransaction.TransactionAmount >= 0
				and  !ProcessNegatives)
				or  (LocalTransaction.TransactionAmount < 0
				and  ProcessNegatives))
					LocalTransPercent = LocalTransaction.TransactionAmount / LocalEmployeeAmount
					TotalTransAmount = LocalTransaction.TransactionAmount
					TotalUnitsAmount = LocalTransaction.UnitsAmount
					initialize TotalOverageAmount
					RecordCreated = false
					Counter = 1
					while (LaborDistributionTable.LaborDistribution[Counter].Project entered)
						initialize LocalOverageAmount
						LocalProject = LaborDistributionTable.LaborDistribution[Counter].Project
						LocalProjectAssignment = LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment
						LocalSplitSequenceNumber = LaborDistributionTable.LaborDistribution[Counter].SequenceNumber
						LocalAssignmentDateRange = ProjectAssignmentRel.ProjectDateRange
						if (LocalProject.HasPeriodOfPerformance
						and ProjectPeriodOfPerformanceRel exists)
							LocalAssignmentDateRange.BeginDate -= ProjectPeriodOfPerformanceRel.LeadDays
							LocalAssignmentDateRange.EndDate   += ProjectPeriodOfPerformanceRel.LagDays
						if (LocalTransaction.TransactionDate within LocalAssignmentDateRange)
							TransientFromCurrency = LocalProject.Currency
							LocalAmount = LocalTransaction.TransactionAmount * LaborDistributionTable.LaborDistribution[Counter].ActualPercent
							round LocalAmount to nearest LocalRoundTo
							LaborDistributionTable.LaborDistribution[Counter].TransactionAmount = LocalAmount
							LaborDistributionTable.LaborDistribution[Counter].UnitsAmount = LocalTransaction.UnitsAmount * LaborDistributionTable.LaborDistribution[Counter].ActualPercent
							LocalMax = LocalTransPercent * LaborDistributionTable.LaborDistribution[Counter].MaximumAmount
							round LocalMax to nearest LocalRoundTo
							if (LocalMax entered)
								if ((LocalMax < 0
								and  LaborDistributionTable.LaborDistribution[Counter].MaxExceeded)
								or  (LocalMax > 0
								and  LaborDistributionTable.LaborDistribution[Counter].TransactionAmount > LocalMax))
									LocalOverageAmount = LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
									LaborDistributionTable.LaborDistribution[Counter].TransactionAmount = LocalMax
									LaborDistributionTable.LaborDistribution[Counter].MaxExceeded = true													
									LocalOverageAmount -= LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
									MaxExceeded = true											
							LaborDistributionTable.LaborDistribution[Counter].TotalAmount += LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
							LaborDistributionTable.LaborDistribution[Counter].TotalUnits += LaborDistributionTable.LaborDistribution[Counter].UnitsAmount						
							TotalTransAmount -= LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
							TotalUnitsAmount -= LaborDistributionTable.LaborDistribution[Counter].UnitsAmount
							TotalOverageAmount += LocalOverageAmount
							if   (Counter = ProjectCount
							and   TotalPercent = 1
							and ((TotalTransAmount != 0
							and   TotalTransAmount > -1
							and   TotalTransAmount < 1)
							or   (TotalUnitsAmount != 0
							and   TotalUnitsAmount > -1
							and   TotalUnitsAmount < 1))
							and (!MaxExceeded
							or    TotalOverageAmount != TotalTransAmount))
								LaborDistributionTable.LaborDistribution[Counter].TransactionAmount += (TotalTransAmount - TotalOverageAmount)

								TotalTransAmount = TotalOverageAmount
								LaborDistributionTable.LaborDistribution[Counter].UnitsAmount += TotalUnitsAmount
								TotalUnitsAmount = 0							
							if (LaborDistributionTable.LaborDistribution[Counter].TransactionAmount entered
							or  LaborDistributionTable.LaborDistribution[Counter].UnitsAmount entered)
								RecordCreated = true
								initialize ErrorFound
								invoke Released.Create GLTransactionDetail
									assign result to LocalGLTransactionDetail
									resume on error
										ErrorFound = true
										LocalErrorMessage = error message
									fill in fields from LocalTransaction
										except invoked.ReportCurrencyAmount
										except invoked.OriginatingTransaction
										except invoked.AutoReverse
			                		invoked.OriginalLaborTransaction = LocalTransaction
									invoked.TransactionAmount 		 = LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
									invoked.PostingDate				 = PrmPostingDate
									invoked.LaborDistribution		 = 2
									if (FromAccountingEntity entered)
										invoked.AccountingEntity	 = FromAccountingEntity
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.ToAccountingEntity entered)
										invoked.FinanceCodeBlock.ToAccountingEntity	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.ToAccountingEntity
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.AccountingUnit entered)
										invoked.FinanceCodeBlock.AccountingUnit	 			= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.AccountingUnit
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.GeneralLedgerChartAccount entered)
										invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.GeneralLedgerChartAccount
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension1 entered)
										invoked.FinanceCodeBlock.FinanceDimension1	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension1
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension2 entered)
										invoked.FinanceCodeBlock.FinanceDimension2	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension2
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension3 entered)
										invoked.FinanceCodeBlock.FinanceDimension3	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension3
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension4 entered)
										invoked.FinanceCodeBlock.FinanceDimension4	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension4
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension5 entered)
										invoked.FinanceCodeBlock.FinanceDimension5	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension5
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension6 entered)
										invoked.FinanceCodeBlock.FinanceDimension6	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension6
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension7 entered)
										invoked.FinanceCodeBlock.FinanceDimension7	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension7
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension8 entered)
										invoked.FinanceCodeBlock.FinanceDimension8	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension8
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension9 entered)
										invoked.FinanceCodeBlock.FinanceDimension9	 		= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension9
									if (LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension10	entered)
										invoked.FinanceCodeBlock.FinanceDimension10 	 	= LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock.FinanceDimension10
									invoked.FinanceCodeBlock.Project = LaborDistributionTable.LaborDistribution[Counter].Project
									invoked.System					 = "PR"
									invoked.GeneralLedgerEvent		 = "PJ"
									invoked.Reference				 = "ProjectAssignmentLaborAdjustment"
									invoked.JournalizeGroup          = LocalJournalizeGroup
									invoked.UnitsAmount				 = LaborDistributionTable.LaborDistribution[Counter].UnitsAmount
									invoked.Billed					 = 0
									invoked.RevenueRecognized		 = 0
									invoked.Capitalize				 = 0
									invoked.IndirectBurden			 = 0
								if (!ErrorFound)
									invoke Create ProjectAssignmentLaborTransaction
										resume on error
										invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
										invoked.Project						= LaborDistributionTable.LaborDistribution[Counter].Project
										invoked.Employee					= Employee
										invoked.ProjectAssignment			= LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment
										invoked.LaborPeriod.Period			= LaborPeriod.Period
										invoked.LaborPeriod.SequenceNumber	= LaborDistributionTable.LaborDistribution[Counter].SequenceNumber 
										invoked.GLTransactionDetail			= LocalGLTransactionDetail.GLTransactionDetail
									LaborDistributionTable.LaborDistribution[Counter].TotalTransactionAmount += LaborDistributionTable.LaborDistribution[Counter].TransactionAmount
									LaborDistributionTable.LaborDistribution[Counter].TotalHours			 += LaborDistributionTable.LaborDistribution[Counter].UnitsAmount
								else
									LaborDistributionTable.LaborDistribution[Counter].ErrorMessage = LocalErrorMessage
								if (!LocalProject.FringeBurden.No
								and !ErrorFound)
									LocalTransactionDate = LocalTransaction.TransactionDate
									LocalBurdenCode = ProjectAssignmentRel.BurdenCode																				
									LocalBurdenAmount = LaborDistributionTable.LaborDistribution[Counter].TransactionAmount * ProjectBurdenCodeRel.Rate
									round LocalBurdenAmount to nearest LocalRoundTo
									if (LocalBurdenAmount entered)
										initialize ErrorFound
										invoke Released.Create GLTransactionDetail
											assign result to LocalGLTransactionDetail
											resume on error
												ErrorFound = true
											fill in fields from LocalTransaction
												except invoked.ReportCurrencyAmount
												except invoked.OriginatingTransaction
												except invoked.UnitsAmount
												except invoked.AutoReverse
					                		invoked.OriginalLaborTransaction = LocalTransaction
											invoked.TransactionAmount 		 = LocalBurdenAmount
											invoked.PostingDate				 = PrmPostingDate
											invoked.LaborDistribution		 = 2
											if (FromAccountingEntity entered)
												invoked.AccountingEntity	 = FromAccountingEntity
											if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity entered)
													invoked.FinanceCodeBlock.ToAccountingEntity	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit entered)
													invoked.FinanceCodeBlock.AccountingUnit	 			= ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
													invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1 entered)
													invoked.FinanceCodeBlock.FinanceDimension1	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2 entered)
													invoked.FinanceCodeBlock.FinanceDimension2	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3 entered)
													invoked.FinanceCodeBlock.FinanceDimension3	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4 entered)
													invoked.FinanceCodeBlock.FinanceDimension4	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5 entered)
													invoked.FinanceCodeBlock.FinanceDimension5	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6 entered)
													invoked.FinanceCodeBlock.FinanceDimension6	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7 entered)
													invoked.FinanceCodeBlock.FinanceDimension7	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8 entered)
													invoked.FinanceCodeBlock.FinanceDimension8	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9 entered)
													invoked.FinanceCodeBlock.FinanceDimension9	 		= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9
												if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10	entered)
													invoked.FinanceCodeBlock.FinanceDimension10 	 	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10
											else
												if (ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity entered)
													invoked.FinanceCodeBlock.ToAccountingEntity	 		= ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity
												if (ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit entered)
													invoked.FinanceCodeBlock.AccountingUnit	 			= ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit
												if (ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
													invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1 entered)
													invoked.FinanceCodeBlock.FinanceDimension1	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2 entered)
													invoked.FinanceCodeBlock.FinanceDimension2	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3 entered)
													invoked.FinanceCodeBlock.FinanceDimension3	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4 entered)
													invoked.FinanceCodeBlock.FinanceDimension4	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5 entered)
													invoked.FinanceCodeBlock.FinanceDimension5	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6 entered)
													invoked.FinanceCodeBlock.FinanceDimension6	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7 entered)
													invoked.FinanceCodeBlock.FinanceDimension7	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8 entered)
													invoked.FinanceCodeBlock.FinanceDimension8	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9 entered)
													invoked.FinanceCodeBlock.FinanceDimension9	 		= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9
												if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10	entered)
													invoked.FinanceCodeBlock.FinanceDimension10 	 	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10
											invoked.FinanceCodeBlock.Project = LaborDistributionTable.LaborDistribution[Counter].Project
											invoked.System					 = "PR"
											invoked.GeneralLedgerEvent		 = "BD"
											invoked.Reference				 = "ProjectAssignmentLaborBurden"
											invoked.JournalizeGroup          = LocalJournalizeGroup
											invoked.Billed					 = 0
											invoked.RevenueRecognized		 = 0
											invoked.Capitalize				 = 0
											invoked.IndirectBurden			 = 0
										if (!ErrorFound)
											invoke Create ProjectAssignmentLaborTransaction
												resume on error
												invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
												invoked.Project						= LaborDistributionTable.LaborDistribution[Counter].Project
												invoked.Employee					= Employee
												invoked.ProjectAssignment			= LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment
												invoked.LaborPeriod.Period			= LaborPeriod.Period
												invoked.LaborPeriod.SequenceNumber	= LaborDistributionTable.LaborDistribution[Counter].SequenceNumber 
												invoked.GLTransactionDetail			= LocalGLTransactionDetail.GLTransactionDetail
											LaborDistributionTable.LaborDistribution[Counter].TotalFringeBurden	+= LocalBurdenAmount
										BurdenErrorFound = false
										if (FringeOffsetCodeBlock entered)
											invoke Released.Create GLTransactionDetail
												resume on error
													BurdenErrorFound = true
												fill in fields from LocalTransaction
													except invoked.ReportCurrencyAmount
													except invoked.OriginatingTransaction
													except invoked.UnitsAmount
													except invoked.AutoReverse
						                		invoked.OriginalLaborTransaction = LocalTransaction
												invoked.TransactionAmount 		 = LocalBurdenAmount * -1
												invoked.PostingDate				 = PrmPostingDate
												invoked.LaborDistribution		 = 2
												if (FromAccountingEntity entered)
													invoked.AccountingEntity	 = FromAccountingEntity
												if (FringeOffsetCodeBlock.ToAccountingEntity entered)
													invoked.FinanceCodeBlock.ToAccountingEntity	 		= FringeOffsetCodeBlock.ToAccountingEntity
												if (FringeOffsetCodeBlock.AccountingUnit entered)
													invoked.FinanceCodeBlock.AccountingUnit	 	 		= FringeOffsetCodeBlock.AccountingUnit
												if (FringeOffsetCodeBlock.GeneralLedgerChartAccount entered)
													invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= FringeOffsetCodeBlock.GeneralLedgerChartAccount
												if (FringeOffsetCodeBlock.Project entered)
													invoked.FinanceCodeBlock.Project			 		= FringeOffsetCodeBlock.Project
												if (FringeOffsetCodeBlock.FinanceDimension1 entered)
													invoked.FinanceCodeBlock.FinanceDimension1	 		= FringeOffsetCodeBlock.FinanceDimension1
												if (FringeOffsetCodeBlock.FinanceDimension2 entered)
													invoked.FinanceCodeBlock.FinanceDimension2	 		= FringeOffsetCodeBlock.FinanceDimension2
												if (FringeOffsetCodeBlock.FinanceDimension3 entered)
													invoked.FinanceCodeBlock.FinanceDimension3	 		= FringeOffsetCodeBlock.FinanceDimension3
												if (FringeOffsetCodeBlock.FinanceDimension4 entered)
													invoked.FinanceCodeBlock.FinanceDimension4	 		= FringeOffsetCodeBlock.FinanceDimension4
												if (FringeOffsetCodeBlock.FinanceDimension5 entered)
													invoked.FinanceCodeBlock.FinanceDimension5	 		= FringeOffsetCodeBlock.FinanceDimension5
												if (FringeOffsetCodeBlock.FinanceDimension6 entered)
													invoked.FinanceCodeBlock.FinanceDimension6	 		= FringeOffsetCodeBlock.FinanceDimension6
												if (FringeOffsetCodeBlock.FinanceDimension7 entered)
													invoked.FinanceCodeBlock.FinanceDimension7	 		= FringeOffsetCodeBlock.FinanceDimension7
												if (FringeOffsetCodeBlock.FinanceDimension8 entered)
													invoked.FinanceCodeBlock.FinanceDimension8	 		= FringeOffsetCodeBlock.FinanceDimension8
												if (FringeOffsetCodeBlock.FinanceDimension9 entered)
													invoked.FinanceCodeBlock.FinanceDimension9	 		= FringeOffsetCodeBlock.FinanceDimension9
												if (FringeOffsetCodeBlock.FinanceDimension10 entered)
													invoked.FinanceCodeBlock.FinanceDimension10 	 	= FringeOffsetCodeBlock.FinanceDimension10											
												invoked.System					 = "PR"
												invoked.GeneralLedgerEvent		 = "BD"
												invoked.Reference				 = "ProjectAssignmentLaborBurden"
												invoked.JournalizeGroup          = LocalJournalizeGroup
												invoked.Billed					 = 0
												invoked.RevenueRecognized		 = 0
												invoked.Capitalize				 = 0
												invoked.IndirectBurden			 = 0
										if (FringeOffsetCodeBlock not entered
										or  BurdenErrorFound)
											BurdenErrorFound = false
											initialize ErrorFound
											invoke Released.Create GLTransactionDetail
												resume on error
													ErrorFound = true
												fill in fields from LocalTransaction
													except invoked.ReportCurrencyAmount
													except invoked.OriginatingTransaction
													except invoked.UnitsAmount
													except invoked.AutoReverse
						                		invoked.OriginalLaborTransaction = LocalTransaction
												invoked.TransactionAmount 		 = LocalBurdenAmount * -1
												invoked.PostingDate				 = PrmPostingDate
												invoked.LaborDistribution		 = 2
												if (FromAccountingEntity entered)
													invoked.AccountingEntity	 = FromAccountingEntity
												if (ProjectBurdenCodeRel.OffsetCodeBlockOption.FullStructure)
													invoked.FinanceCodeBlock = ProjectBurdenCodeRel.OffsetCodeBlock
												else
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.ToAccountingEntity entered)
														invoked.FinanceCodeBlock.ToAccountingEntity	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.ToAccountingEntity
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity entered)
																invoked.FinanceCodeBlock.ToAccountingEntity	= ProjectAssignmentSplitRel.BurdenCodeBlock.ToAccountingEntity
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity entered)
																invoked.FinanceCodeBlock.ToAccountingEntity	= ProjectAssignmentRel.BurdenCodeBlock.ToAccountingEntity
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.AccountingUnit entered)
														invoked.FinanceCodeBlock.AccountingUnit	 		= ProjectBurdenCodeRel.OffsetPartialCodeBlock.AccountingUnit
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit entered)
																invoked.FinanceCodeBlock.AccountingUnit	= ProjectAssignmentSplitRel.BurdenCodeBlock.AccountingUnit
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit entered)
																invoked.FinanceCodeBlock.AccountingUnit	 	= ProjectAssignmentRel.BurdenCodeBlock.AccountingUnit
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.GeneralLedgerChartAccount entered)
														invoked.FinanceCodeBlock.GeneralLedgerChartAccount		= ProjectBurdenCodeRel.OffsetPartialCodeBlock.GeneralLedgerChartAccount
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
																invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= ProjectAssignmentSplitRel.BurdenCodeBlock.GeneralLedgerChartAccount
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount entered)
																invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= ProjectAssignmentRel.BurdenCodeBlock.GeneralLedgerChartAccount
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension1 entered)
														invoked.FinanceCodeBlock.FinanceDimension1	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension1
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1 entered)
																invoked.FinanceCodeBlock.FinanceDimension1	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension1
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1 entered)
																invoked.FinanceCodeBlock.FinanceDimension1	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension1
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension2 entered)
														invoked.FinanceCodeBlock.FinanceDimension2	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension2
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2 entered)
																invoked.FinanceCodeBlock.FinanceDimension2	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension2
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2 entered)
																invoked.FinanceCodeBlock.FinanceDimension2	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension2
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension3 entered)
														invoked.FinanceCodeBlock.FinanceDimension3	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension3
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3 entered)
																invoked.FinanceCodeBlock.FinanceDimension3	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension3
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3 entered)
																invoked.FinanceCodeBlock.FinanceDimension3	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension3
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension4 entered)
														invoked.FinanceCodeBlock.FinanceDimension4	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension4
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4 entered)
																invoked.FinanceCodeBlock.FinanceDimension4	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension4
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4 entered)
																invoked.FinanceCodeBlock.FinanceDimension4	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension4
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension5 entered)
														invoked.FinanceCodeBlock.FinanceDimension5	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension5
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5 entered)
																invoked.FinanceCodeBlock.FinanceDimension5	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension5
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5 entered)
																invoked.FinanceCodeBlock.FinanceDimension5	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension5
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension6 entered)
														invoked.FinanceCodeBlock.FinanceDimension6	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension6
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6 entered)
																invoked.FinanceCodeBlock.FinanceDimension6	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension6
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6 entered)
																invoked.FinanceCodeBlock.FinanceDimension6	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension6
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension7 entered)
														invoked.FinanceCodeBlock.FinanceDimension7	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension7
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7 entered)
																invoked.FinanceCodeBlock.FinanceDimension7	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension7
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7 entered)
																invoked.FinanceCodeBlock.FinanceDimension7	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension7
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension8 entered)
														invoked.FinanceCodeBlock.FinanceDimension8	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension8
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8 entered)
																invoked.FinanceCodeBlock.FinanceDimension8	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension8
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8 entered)
																invoked.FinanceCodeBlock.FinanceDimension8	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension8
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension9 entered)
														invoked.FinanceCodeBlock.FinanceDimension9	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension9
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9 entered)
																invoked.FinanceCodeBlock.FinanceDimension9	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension9
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9 entered)
																invoked.FinanceCodeBlock.FinanceDimension9	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension9
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension10 entered)
														invoked.FinanceCodeBlock.FinanceDimension10	 	= ProjectBurdenCodeRel.OffsetPartialCodeBlock.FinanceDimension10
													else
														if (ProjectAssignmentSplitRel.BurdenCodeBlock entered)
															if (ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10 entered)
																invoked.FinanceCodeBlock.FinanceDimension10	= ProjectAssignmentSplitRel.BurdenCodeBlock.FinanceDimension10
														else
															if (ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10 entered)
																invoked.FinanceCodeBlock.FinanceDimension10	= ProjectAssignmentRel.BurdenCodeBlock.FinanceDimension10
													if (ProjectBurdenCodeRel.OffsetPartialCodeBlock.Project entered)
														invoked.FinanceCodeBlock.Project = ProjectBurdenCodeRel.OffsetPartialCodeBlock.Project
													else
														invoked.FinanceCodeBlock.Project = blank
												invoked.System					 = "PR"
												invoked.GeneralLedgerEvent		 = "BD"
												invoked.Reference				 = "ProjectAssignmentLaborBurden"
												invoked.JournalizeGroup          = LocalJournalizeGroup
												invoked.Billed					 = 0
												invoked.RevenueRecognized		 = 0
												invoked.Capitalize				 = 0
												invoked.IndirectBurden			 = 0
							if (LaborDistributionTable.LaborDistribution[Counter].MaxExceeded)
								LocalProject = LaborDistributionTable.LaborDistribution[Counter].Project
								LocalSequenceNumber = LaborDistributionTable.LaborDistribution[Counter].SequenceNumber
								invoke SetCapped CappedLaborRel
									if (!LocalProject.OverageCodeBlock entered)
										invoked.PrmOverageAmount = LocalOverageAmount
								if (LocalOverageAmount entered
								and LocalProject.OverageCodeBlock entered)
									TotalTransAmount -= LocalOverageAmount
									TotalOverageAmount -= LocalOverageAmount
									RecordCreated = true
									initialize ErrorFound
									invoke Released.Create GLTransactionDetail
										resume on error
											ErrorFound = true
										assign result to LocalGLTransactionDetail
										fill in fields from LocalTransaction
											except invoked.ReportCurrencyAmount
											except invoked.OriginatingTransaction
											except invoked.UnitsAmount
											except invoked.AutoReverse
				                		invoked.OriginalLaborTransaction = LocalTransaction
										invoked.TransactionAmount 		 = LocalOverageAmount
										invoked.PostingDate				 = PrmPostingDate
										invoked.LaborDistribution		 = 2
										if (FromAccountingEntity entered)
											invoked.AccountingEntity	 = FromAccountingEntity
										if (LocalProject.OverageCodeBlock.ToAccountingEntity entered)
											invoked.FinanceCodeBlock.ToAccountingEntity	 		= LocalProject.OverageCodeBlock.ToAccountingEntity
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.ToAccountingEntity entered)
											invoked.FinanceCodeBlock.ToAccountingEntity	 		= Employee.ProjectEmployee.FinanceCodeBlock.ToAccountingEntity
										if (LocalProject.OverageCodeBlock.AccountingUnit entered)
											invoked.FinanceCodeBlock.AccountingUnit	 	 		= LocalProject.OverageCodeBlock.AccountingUnit
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.AccountingUnit entered)
											invoked.FinanceCodeBlock.AccountingUnit	 			= Employee.ProjectEmployee.FinanceCodeBlock.AccountingUnit
										if (LocalProject.OverageCodeBlock.GeneralLedgerChartAccount entered)
											invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalProject.OverageCodeBlock.GeneralLedgerChartAccount
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.GeneralLedgerChartAccount entered)
											invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= Employee.ProjectEmployee.FinanceCodeBlock.GeneralLedgerChartAccount
										if (LocalProject.OverageCodeBlock.Project entered)
											invoked.FinanceCodeBlock.Project	 				= LocalProject.OverageCodeBlock.Project
										if (LocalProject.OverageCodeBlock.FinanceDimension1 entered)
											invoked.FinanceCodeBlock.FinanceDimension1	 		= LocalProject.OverageCodeBlock.FinanceDimension1
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension1 entered)
											invoked.FinanceCodeBlock.FinanceDimension1	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension1
										if (LocalProject.OverageCodeBlock.FinanceDimension2 entered)
											invoked.FinanceCodeBlock.FinanceDimension2	 		= LocalProject.OverageCodeBlock.FinanceDimension2
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension2 entered)
											invoked.FinanceCodeBlock.FinanceDimension2	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension2
										if (LocalProject.OverageCodeBlock.FinanceDimension3 entered)
											invoked.FinanceCodeBlock.FinanceDimension3	 		= LocalProject.OverageCodeBlock.FinanceDimension3
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension3 entered)
											invoked.FinanceCodeBlock.FinanceDimension3	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension3
										if (LocalProject.OverageCodeBlock.FinanceDimension4 entered)
											invoked.FinanceCodeBlock.FinanceDimension4	 		= LocalProject.OverageCodeBlock.FinanceDimension4
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension4 entered)
											invoked.FinanceCodeBlock.FinanceDimension4	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension4
										if (LocalProject.OverageCodeBlock.FinanceDimension5 entered)
											invoked.FinanceCodeBlock.FinanceDimension5	 		= LocalProject.OverageCodeBlock.FinanceDimension5
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension5 entered)
											invoked.FinanceCodeBlock.FinanceDimension5	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension5
										if (LocalProject.OverageCodeBlock.FinanceDimension6 entered)
											invoked.FinanceCodeBlock.FinanceDimension6	 		= LocalProject.OverageCodeBlock.FinanceDimension6
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension6 entered)
											invoked.FinanceCodeBlock.FinanceDimension6	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension6
										if (LocalProject.OverageCodeBlock.FinanceDimension7 entered)
											invoked.FinanceCodeBlock.FinanceDimension7	 		= LocalProject.OverageCodeBlock.FinanceDimension7
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension7 entered)
											invoked.FinanceCodeBlock.FinanceDimension7	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension7
										if (LocalProject.OverageCodeBlock.FinanceDimension8 entered)
											invoked.FinanceCodeBlock.FinanceDimension8	 		= LocalProject.OverageCodeBlock.FinanceDimension8
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension8 entered)
											invoked.FinanceCodeBlock.FinanceDimension8	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension8
										if (LocalProject.OverageCodeBlock.FinanceDimension9 entered)
											invoked.FinanceCodeBlock.FinanceDimension9	 		= LocalProject.OverageCodeBlock.FinanceDimension9
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension9 entered)
											invoked.FinanceCodeBlock.FinanceDimension9	 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension9
										if (LocalProject.OverageCodeBlock.FinanceDimension10	entered)
											invoked.FinanceCodeBlock.FinanceDimension10 	 	= LocalProject.OverageCodeBlock.FinanceDimension10
										else
										if (LocalOverageOption = 1
										and Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension10 entered)
											invoked.FinanceCodeBlock.FinanceDimension10 		= Employee.ProjectEmployee.FinanceCodeBlock.FinanceDimension10
										invoked.System					 = "PR"
										invoked.GeneralLedgerEvent		 = "PJ"
										invoked.Reference				 = "ProjectAssignmentLaborOverageAdjustment"
										invoked.JournalizeGroup          = LocalJournalizeGroup
										invoked.Billed					 = 0
										invoked.RevenueRecognized		 = 0
										invoked.Capitalize				 = 0
										invoked.IndirectBurden			 = 0
									if (!ErrorFound)
										invoke Create ProjectAssignmentLaborTransaction
											resume on error
											invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
											invoked.Project						= LaborDistributionTable.LaborDistribution[Counter].Project
											invoked.Employee					= Employee
											invoked.ProjectAssignment			= LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment
											invoked.LaborPeriod.Period			= LaborPeriod.Period
											invoked.LaborPeriod.SequenceNumber	= LaborDistributionTable.LaborDistribution[Counter].SequenceNumber 
											invoked.GLTransactionDetail			= LocalGLTransactionDetail.GLTransactionDetail									
										LaborDistributionTable.LaborDistribution[Counter].TotalDistributedOverage += LocalOverageAmount
						Counter += 1
					if (!LocalTransaction.LaborDistribution.Processed
					and RecordCreated)
						invoke LaborDistributionProcessed LocalTransaction
					TotalTransAmount -= LocalTransaction.TransactionAmount
					TotalUnitsAmount -= LocalTransaction.UnitsAmount
					initialize OffsetErrorFound
					if (TotalTransAmount entered
					or  TotalUnitsAmount entered)
						invoke Released.Create GLTransactionDetail
							resume on error
								OffsetErrorFound = true
							fill in fields from LocalTransaction
								except invoked.ReportCurrencyAmount
								except invoked.OriginatingTransaction
								except invoked.AutoReverse
		            		invoked.OriginalLaborTransaction = LocalTransaction
							invoked.TransactionAmount 		 = TotalTransAmount
							invoked.PostingDate				 = PrmPostingDate
							invoked.LaborDistribution		 = 2
							if (FromAccountingEntity entered)
								invoked.AccountingEntity	 = FromAccountingEntity
							if (OffsetCodeBlock.ToAccountingEntity entered)
								invoked.FinanceCodeBlock.ToAccountingEntity	 		= OffsetCodeBlock.ToAccountingEntity
							if (OffsetCodeBlock.AccountingUnit entered)
								invoked.FinanceCodeBlock.AccountingUnit	 	 		= OffsetCodeBlock.AccountingUnit
							if (OffsetCodeBlock.GeneralLedgerChartAccount entered)
								invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= OffsetCodeBlock.GeneralLedgerChartAccount
							if (OffsetCodeBlock.Project entered)
								invoked.FinanceCodeBlock.Project			 		= OffsetCodeBlock.Project
							if (OffsetCodeBlock.FinanceDimension1 entered)
								invoked.FinanceCodeBlock.FinanceDimension1	 		= OffsetCodeBlock.FinanceDimension1
							if (OffsetCodeBlock.FinanceDimension2 entered)
								invoked.FinanceCodeBlock.FinanceDimension2	 		= OffsetCodeBlock.FinanceDimension2
							if (OffsetCodeBlock.FinanceDimension3 entered)
								invoked.FinanceCodeBlock.FinanceDimension3	 		= OffsetCodeBlock.FinanceDimension3
							if (OffsetCodeBlock.FinanceDimension4 entered)
								invoked.FinanceCodeBlock.FinanceDimension4	 		= OffsetCodeBlock.FinanceDimension4
							if (OffsetCodeBlock.FinanceDimension5 entered)
								invoked.FinanceCodeBlock.FinanceDimension5	 		= OffsetCodeBlock.FinanceDimension5
							if (OffsetCodeBlock.FinanceDimension6 entered)
								invoked.FinanceCodeBlock.FinanceDimension6	 		= OffsetCodeBlock.FinanceDimension6
							if (OffsetCodeBlock.FinanceDimension7 entered)
								invoked.FinanceCodeBlock.FinanceDimension7	 		= OffsetCodeBlock.FinanceDimension7
							if (OffsetCodeBlock.FinanceDimension8 entered)
								invoked.FinanceCodeBlock.FinanceDimension8	 		= OffsetCodeBlock.FinanceDimension8
							if (OffsetCodeBlock.FinanceDimension9 entered)
								invoked.FinanceCodeBlock.FinanceDimension9	 		= OffsetCodeBlock.FinanceDimension9
							if (OffsetCodeBlock.FinanceDimension10 entered)
								invoked.FinanceCodeBlock.FinanceDimension10 	 	= OffsetCodeBlock.FinanceDimension10							
							invoked.System					 = "PR"
							invoked.GeneralLedgerEvent		 = "PJ"
							invoked.Reference				 = "ProjectAssignmentLaborAdjustment"							
							invoked.JournalizeGroup			 = LocalJournalizeGroup
							invoked.UnitsAmount				 = TotalUnitsAmount
							invoked.Billed					 = 0
							invoked.RevenueRecognized		 = 0
							invoked.Capitalize				 = 0
							invoked.IndirectBurden			 = 0
						if (OffsetErrorFound)
							invoke Released.Create GLTransactionDetail
								resume on error
								fill in fields from LocalTransaction
									except invoked.ReportCurrencyAmount
									except invoked.OriginatingTransaction
									except invoked.AutoReverse
			            		invoked.OriginalLaborTransaction = LocalTransaction
								invoked.TransactionAmount 		 = TotalTransAmount
								invoked.PostingDate				 = PrmPostingDate
								invoked.LaborDistribution		 = 2
								if (FromAccountingEntity entered)
									invoked.AccountingEntity	 = FromAccountingEntity
								invoked.System					 = "PR"
								invoked.GeneralLedgerEvent		 = "PJ"
								invoked.Reference				 = "ProjectAssignmentLaborAdjustment"							
								invoked.JournalizeGroup			 = LocalJournalizeGroup
								invoked.UnitsAmount				 = TotalUnitsAmount
								invoked.Billed					 = 0
								invoked.RevenueRecognized		 = 0
								invoked.Capitalize				 = 0
								invoked.IndirectBurden			 = 0
				Counter2 += 1

								
	Derived Fields
		
#ifdef module ar    
    	PhoneDerivedEmployee is a DerivedField
    		type is Alpha size 20
    		return Employee + "#" + Employee.Name.PreferredFirstAndLastName
    	
    	PhoneDerivedProject is a DerivedField
    		type is Alpha size 25
    		return Project + "#" + Project.Description
#endif 
		DerivedPlannedPercent is a DerivedField
			type is Percent size 6
			restricted
			return PlannedPercent
			
		DerivedActualPercent is a DerivedField
			type is Percent size 6
			restricted
			return ActualPercent
			
		DerivedPlannedAndActualPercent is a DerivedField
    		type is Alpha size 50 		
    		return  "Planned: "+ DerivedPlannedPercent+ " | Actual: "+DerivedActualPercent
    		
		ContextMessageEntityType is a StringField
			type is Alpha 40
			restricted
			"InforERPEnterpriseProjectLabor"
			
		ContextMessageText is a StringField
			type is Alpha 30
			restricted
			"ProjectAssignmentLabor<ProjectAssignmentLabor>"
							
		TotalActualPercent is a DerivedField  
			type is Percent size 7.3
			restricted
			return ProjectEmployeeLaborPeriodRel.TotalActualPercent

		ProjectTransactionAmount is a DerivedField  
			type is like CurrencyAmount
				precision is Project.Currency.NumberOfDecimals
		    return TransactionAmount
		
		DistributedOverage is a DerivedField  
			type is like CurrencyAmount
				precision is Project.Currency.NumberOfDecimals
			return DistributedOverageAmount
			
		ProjectUnitsAmount is a DerivedField  
			type is like UnitsAmount
       		return Hours

		ProjectBurdenAmount is a DerivedField  
			type is like CurrencyAmount
				precision is Project.Currency.NumberOfDecimals
		    return FringeBurdenAmount

		TotalTransactionAmount is a DerivedField  
			type is like CurrencyAmount
				precision is Project.Currency.NumberOfDecimals
			if (IsProcessedOrCertified)
				return TransactionAmount

		PeriodRecordCount is a DerivedField
			type is Numeric size 2
			restricted
			return instance count of ActualAdjustedPeriodEmployeeLaborRel

		PeriodTotalPercent is a DerivedField  
			type is Percent size 7.3
			restricted			
			return sum AllAdjustedPeriodEmployeeLaborRel.ActualPercent

		DistributedGLTransactionDetailCount is a DerivedField
			type is Numeric size 4
			restricted
			return instance count of DistributedGLTransactionDetailRel
			
		DerivedApproverActor is a DerivedField
			type is Actor
			restricted
			return Employee.ProjectEmployee.Approver.agent(Actor).Actor
			
		DerivedRedistributionApprover is a DerivedField
			type is Actor
			restricted
			return Employee.ProjectEmployee.RedistributionApprover.agent(Actor).Actor

		EmployeeEmailAddress is a DerivedField
			type is Alpha up to 100
			return Employee.EmployeeWorkEmailAddress

		RedistributeLaborCompletedMF is a MessageField
			restricted
			"RedistributeLaborActionComplete"

		RedistributeLaborSubmittedMF is a MessageField
			restricted
			"RedistributeLaborActionHasBeenSubmitted"

		DistributeIndividualLaborSubmittedMF is a MessageField
			restricted
			"DistributeIndividualLaborActionHasBeenSubmitted"

		UpgradeIncompleteMF is a MessageField
			restricted
        	"Labor_DistributionUpgradeIsIncomplete;_PleaseRun_Create_Project_Employee_Labor_PeriodActionFromThe_Project_UtilitiesMenuBeforeContinuing"







		DerivedLaborFTE is a DerivedField
			type is Decimal size 4.3
			if (ProjectEmployeeLaborFTERel exists)
				return ProjectEmployeeLaborFTERel.LaborFTE
			else
			if (Employee.LaborFTE entered)
				return Employee.LaborFTE
			else
				return 1

		DerivedDisplayEncumbranceAmount is a DerivedField
			type is like CurrencyAmount
				precision is Employee.ProjectEmployee.Currency.NumberOfDecimals
			return GLCommitSalaryEncumbranceRel.TransactionAmount	

		DerivedProjectAssignmentAmount is a DerivedField
			type is like CurrencyAmount
				precision is Employee.ProjectEmployee.Currency.NumberOfDecimals
			restricted				
			return sum ProjectAssignmentBurdenRel.TransactionAmount

		DerivedProjectEmployeeFringeAmount is a DerivedField
			type is like CurrencyAmount
				precision is Employee.ProjectEmployee.Currency.NumberOfDecimals
			restricted				
		    return sum ProjectEmployeeBurdenRel.TransactionAmount 

		DerivedDisplayFringeAmount is a DerivedField
			type is like CurrencyAmount
				precision is Employee.ProjectEmployee.Currency.NumberOfDecimals
			if (HasProjectAssignmentBurdenCode
			and DifferentFringeFinanceStructure)
				return DerivedProjectAssignmentAmount			
			else		
				return DerivedProjectEmployeeFringeAmount
				
		DerivedRoundTo is a DerivedField
    		type is Decimal 5.4
    		restricted
    		if (Project.Currency.NumberOfDecimals = 2)
    			return .01
    		else
    		if (Project.Currency.NumberOfDecimals = 0)
    			return 1
    		else
    		if (Project.Currency.NumberOfDecimals = 3)
    			return .001
    		else
    		if (Project.Currency.NumberOfDecimals = 4)
    			return .0001				

		DerivedSalaryCapEndDate is a DerivedField
			type is Date
			restricted
			if (Project.SalaryCapDate.ProjectStartDate)
				return Project.ProjectDateRange.BeginDate
			else
				return DateRange.End

		PostingProjectCapMessage is a MessageField
			restricted
			"SalaryEncumbranceCreatedUsing<FinanceEnterpriseGroup.ProjectLabel>SalaryCap"

		EmployeeCapMessage is a MessageField
			restricted
			"SalaryEncumbranceCreatedUsingEmployeeSalaryEncumbranceAmount"

		EncumbranceSalaryCapMessage is a ConditionalField
			type is Alpha size 100
			restricted
			if  (Project.SalaryCap entered
			and (SalaryCapMessageRel.MaximumAmount * DerivedLaborFTE) <= Employee.EncumbranceSalaryAmount)
				PostingProjectCapMessage
			else
				blank


		HasBeenRedistributed is a DerivedField
			type is Boolean
			for each audit log records
				if (each.initiating action = "RedistributeLabor"
				or  each.initiating action = "RedistributeAllLabor")
					return true
					
		SubmittedActor is a DerivedField
			type is Alpha size up to 100
			initialize LocalSubmittedActor
			if (Status.PendingApproval
			or  Status.Approved
			or  Status.Processed)
				for each audit log records
					if (each.Status.PendingApproval
					and !old each.Status.PendingApproval)
						LocalSubmittedActor = each.actor
			return LocalSubmittedActor.PersonName.PresentationName

		ApprovalActor is a DerivedField
			type is Alpha size up to 100
			initialize LocalApprovalActor
			if (Status.Processed
			or  Status.Certified
			or  Status.Approved)
				for each audit log records
					if  (each.Status.Approved
					and  !old each.Status.Approved)
						LocalApprovalActor = each.actor
			return LocalApprovalActor.PersonName.PresentationName
		
		DerivedApprovalActor is a DerivedField
			type is Alpha size up to 100
			initialize LocalApprovalActor
			if (Status.Processed
			or  Status.Certified
			or  Status.Approved)
				for each audit log records
					if  (each.Status.Approved
					and  !old each.Status.Approved)
						LocalApprovalActor = each.actor
			return LocalApprovalActor.PersonName.FirstAndLastName
			
			
		SubmittedRedistributionActor is a DerivedField
			type is Alpha size up to 100
			initialize LocalRedistributionSubmittedActor
			if (RedistributionApprovalStatus.PendingApproval
			or  RedistributionApprovalStatus.Approved)
				for each audit log records
					if  (each.RedistributionApprovalStatus.PendingApproval
					and !old each.RedistributionApprovalStatus.PendingApproval)
						LocalRedistributionSubmittedActor = each.actor
			return LocalRedistributionSubmittedActor.PersonName.PresentationName

		ApprovalRedistributionActor is a DerivedField
			type is Alpha size up to 100
			initialize LocalRedistributionApprovalActor
			if (RedistributionApprovalStatus.Approved)
				for each audit log records
					if (each.RedistributionApprovalStatus.Approved
					and !old each.RedistributionApprovalStatus.Approved)
						LocalRedistributionApprovalActor = each.actor
			return LocalRedistributionApprovalActor.PersonName.PresentationName
		
		DateSubmitted is a DerivedField  
			type is Date
			if(Status =2
			or Status =3
			or Status =4
			or Status =5)		
				return Status date last changed to 5
			else
				return ""
			
    Conditions
		HasProjectAssignmentLaborComments
			restricted		
			when (ProjectAssignmentLaborComment set exists)	
    	IsCurrentPeriod
    		restricted
    		when (current corporate date within DateRange)
    	IsNotProcessedOrCertified
    		restricted
			when (!Status.Processed
			and   !Status.Certified)
		IsProcessedOrCertified
			restricted
			when (Status.Processed
			or    Status.Certified)
		NotExcluded
			restricted
			when (!Employee.ExcludeFromLabor)
		NotExcludedPendingCostTransfer
			restricted
			when (!Employee.ExcludeFromLabor
	        and    Status.Processed
	        and    Adjusted)
    	IsMyProject
    		restricted
    		when (Project.IsMyProject)
    	IsEntered
    		restricted
    		when (Status.Entered
    		or    Status not entered)
    	IsOkToAddPercent
    		restricted
    		when (PercentEnteredRel not exists		
    		and !IsProcessedOrCertified
    		and !Status.Approved
    		and !Status.PendingApproval)
    	IsOkToAddEditIcon
    		restricted
    		when (PercentEnteredRel exists
    		and !IsProcessedOrCertified
    		and !Status.Approved
    		and !Status.PendingApproval)
    	IsOkToApprove
    		restricted
			when (ProjectEmployeeLaborPeriodRel.IsOkToApprove)
    	IsOkToProcessZero
    		restricted
    		when (ProjectEmployeeLaborPeriodRel.Status.Entered    		
    		and   ProjectEmployeeLaborPeriodRel.TotalActualPercent = 0
    		and   current corporate date >= DateRange.End)
    	IsOkToSubmitForApproval
    		restricted
    		when (ProjectEmployeeLaborPeriodRel.TotalActualPercent entered

    		and   DerivedApproverActor entered
    		and   ApprovalProcessRequired)
		OkToResetLaborDistributionApprovals			
			restricted
			when (Status.PendingApproval)
		OkToResetLaborRedistributionApprovals			
			restricted
			when (RedistributionApprovalStatus.PendingApproval)
		IsOkToSubmitForApprovalRedistribution    		
    		when (Adjusted
    		and   JournalizeGroup entered
			and  (RedistributionApprovalStatus.Rejected
			or    RedistributionApprovalStatus = 0)	
    		and   DerivedRedistributionApprover entered
    		and   ApprovalProcessRequired)
    	DisplayRedistributionApprovalStatus	
    		when (ApprovalProcessRequired
			and   DerivedRedistributionApprover entered)
    	ApprovalProcessRequired
    		restricted
    		when (Employee = actor.agent(Employee).Employee
    		and   FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionApproval
    		and  (FinanceEnterpriseGroup.EnterpriseProjectStructure.DistributionApprovalGroup not entered
    		or    EmployeeRel.Employee within FinanceEnterpriseGroup.EnterpriseProjectStructure.DistributionApprovalGroup))
		LaborDistributionApprovalTrue
			restricted
			when (FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionApproval)   
    	Approve100PercentLaborOnlyStrucutre
    		restricted		
			when (actor.context.FinanceEnterpriseGroup.EnterpriseProjectStructure.Approve100PercentLaborActualOnly)     		
		IsOkToPopulateActual
			restricted
			when (ProjectEmployeeLaborPeriodRel.Status not entered
			or    ProjectEmployeeLaborPeriodRel.Status.Entered)
		IsOkToUnapprove
			restricted
			when (ProjectEmployeeLaborPeriodRel.Status.Approved)
    	IsOkToReverse
    		restricted
    		when (Status.Processed
    		and   JournalizeGroup entered
    		and  ((ApprovalProcessRequired 
    		and   DerivedRedistributionApprover entered    		
    		and  (RedistributionApprovalStatus.Approved
			or    RedistributionApprovalStatus = 0))
    		or   !ApprovalProcessRequired
			or   DerivedRedistributionApprover not entered))
		IsOkToReverseZero
			restricted
			when (ProjectEmployeeLaborPeriodRel.Status.Processed
			and   ProjectEmployeeLaborPeriodRel.JournalizeGroup not entered
			and   ProjectEmployeeLaborPeriodRel.TotalActualPercent = 0) 
    	IsOkToRedistribute
    		restricted
    		when (Adjusted
    		and   JournalizeGroup entered
    		and  ((ApprovalProcessRequired 
    		and   DerivedRedistributionApprover entered
    		and   RedistributionApprovalStatus.Approved)
    		or   !ApprovalProcessRequired
    		or   DerivedRedistributionApprover not entered))
    	IsOkToDistribute
    		restricted
    		when (Status.Approved)
		IsOkToValidate
			restricted
			when (Status.Approved)    		
    	IsWithInProjectAssignmentDateRange
    		restricted
    		when (DateRange within ProjectAssignment.ProjectDateRange)
    	IsOkForEmcumbrance
    		restricted
    		when (GeneralLedgerSystemCodeGMRel.EncumbranceOption.Track 
    		and   Employee.ProjectEmployee.SalaryEncumbrance
    		and   Status.Entered
			and  ((Employee.EncumbranceBasis.PlannedPercent
			and    PlannedPercent entered)
			or    (Employee.EncumbranceBasis.ActualPercent
			and    ActualPercent entered))
    		and   !EncumbrancesExist)
		EncumbrancesExist
			restricted
			when (GLCommitEncumbranceRel exists)			
		EncumbrancesExistAndProjectCap
			restricted
			when (GLCommitEncumbranceRel exists
			and   EncumbranceSalaryCapMessage entered)			
    	HasProjectAssignmentBurdenCode
    		restricted
    		when (ProjectAssignment.BurdenCode entered)    		
		OpenPeriod
			restricted
			when (ProjectSchedulePeriodRel.Status.Open)
		ActualUndistributed  
			when (IsProcessedOrCertified
			and   ActualPercent entered
			and   TotalTransactionAmount not entered)
		FullyDistributed
			when (IsProcessedOrCertified
			and   ActualPercent entered
			and   TransactionAmount entered)
		ActionCreate
			when (action = "create")
		ActionUpdate
			when (!action = "create"
			and	  !action = "Delete")
		StatusUpdate
			when (!Status = old Status)
		PlannedPercentUpdate
			when (!PlannedPercent = old PlannedPercent)
		ActualPercentUpdate
			when (!ActualPercent = old ActualPercent)
		AdjustedUpdate
			when (!Adjusted = old Adjusted)

 		DifferentFringeFinanceStructure	
 			restricted
			when (ProjectAssignment.FringeEncumbranceCodeBlock.Ledger                    != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.Ledger
			or    ProjectAssignment.FringeEncumbranceCodeBlock.AccountingUnit            != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.AccountingUnit					
			or    ProjectAssignment.FringeEncumbranceCodeBlock.ToAccountingEntity        != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.ToAccountingEntity					
			or    ProjectAssignment.FringeEncumbranceCodeBlock.GeneralLedgerChartAccount != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.GeneralLedgerChartAccount						
			or    ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension1         != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension1
			or    ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension2 		  != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension2
			or    ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension3 		  != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension3				
			or    ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension4 		  != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension4					
			or    ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension5 		  != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension5					
			or    ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension6 		  != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension6					
			or    ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension7 		  != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension7					
			or    ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension8 		  != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension8					
			or    ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension9 		  != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension9					
			or    ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension10 		  != Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension10)					

		IsBlueStatusTag
			restricted
			when (Status.Entered)

		IsGreenRedistributionStatusTag
			restricted
			when (RedistributionApprovalStatus.Approved)					
			
		IsGreenStatusTag
			restricted
			when (Status.Approved or Status.Processed or Status.Certified)					
 			
		JournalizeGroupEntered
			restricted
			when (JournalizeGroup entered)

		ErrorMessageEntered
			restricted
			when (ErrorMessage entered)
 		
 		IsValidForActorContext
			when (FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
				
    Relations
    	OtherProjectAssignmentLaborRel
    		one-to-many relation to ProjectAssignmentLabor
    		Field Mapping uses ByEmployeeAndSchedulePeriod
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.Employee				= Employee
    			related.ProjectLaborSchedule	= ProjectLaborSchedule
    			related.LaborPeriod.Period		= LaborPeriod.Period
    		Instance Selection
    			where (related.UniqueID != UniqueID)
    			
		ProjectAssignmentLaborSplitRel
			one-to-many relation to ProjectAssignmentLabor
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= Project
				related.Employee				= Employee
				related.ProjectAssignment		= ProjectAssignment
			Instance Selection
				where (related.LaborPeriod.SequenceNumber entered
				and    related.LaborPeriod.Period = LaborPeriod.Period)

		ParentAssignmentRel
			one-to-one relation to ProjectAssignmentLabor
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= Project
				related.Employee				= Employee
				related.ProjectAssignment		= ProjectAssignment
				related.LaborPeriod.Period		= LaborPeriod.Period
				related.LaborPeriod.SequenceNumber = 0
				
		AllPeriodLaborRel
    		one-to-many relation to ProjectAssignmentLabor
    		Field Mapping uses ByEmployeeAndSchedulePeriod
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.Employee				= Employee
    			related.ProjectLaborSchedule	= ProjectLaborSchedule
    			related.LaborPeriod.Period		= LaborPeriod.Period
		
    	ActualEnteredLaborRel  
    		one-to-many relation using AllPeriodLaborRel
			Instance Selection
				where (related.Status.Entered
				and    related.ActualPercent entered)
		
		PercentEnteredRel
    		one-to-many relation using AllPeriodLaborRel
			Instance Selection
				where (related.Project = Project
				and related.ActualPercent entered)	

    	ProcessedLaborNoErrorsRel  
    		one-to-many relation using AllPeriodLaborRel
			Instance Selection
				where (related.Status.Processed
				and    related.Adjusted = false
				and    related.ErrorMessage not entered)
				
    	ProjectSchedulePeriodRel
    		one-to-one relation to ProjectSchedulePeriod
    		required
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.ProjectLaborSchedule 	= ProjectLaborSchedule
    			related.ProjectSchedulePeriod	= LaborPeriod.Period

    	ProjectSchedulePeriodEncumbranceRel
    		one-to-one relation to ProjectSchedulePeriod
    		required
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
    			related.ProjectLaborSchedule 	= LocalProjectLaborSchedule
    			related.ProjectSchedulePeriod	= LocalPeriod

		ToProjectAssignmentLaborRel
			one-to-one relation to ProjectAssignmentLabor
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
    			related.Project						= Project
    			related.Employee					= Employee
    			related.ProjectAssignment			= ProjectAssignment
    			related.LaborPeriod.Period			= LocalPeriod
    			related.LaborPeriod.SequenceNumber	= LaborPeriod.SequenceNumber
			    			
    	GLTransactionDetailRel
    		one-to-many relation to GLTransactionDetail
    		Field Mapping uses ByResourceAndDate
    			related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
    			related.Resource				= LocalEmployee
    		Instance Selection
    			where (related.LaborDistribution.Unprocessed
    			and    related.TransactionDate within LocalDateRange
    			and    related.System != "PS"
    			and    related.IsPosted)

		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup          = LocalFinanceEnterpriseGroup
				related.GeneralLedgerSystemCode         = "PS"

		GeneralLedgerSystemCodeGMRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup          = FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode         = "GM"

		AccountingEntityGroupMemberRel
			one-to-many relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup          = LocalFinanceEnterpriseGroup
				related.AccountingEntityGroup			= LocalAccountingEntityGroup

		AccountingEntityGroupMemberOTORel
			one-to-one relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup          = LocalFinanceEnterpriseGroup
				related.AccountingEntityGroup			= LocalAccountingEntityGroup
				related.AccountingEntity				= LocalAccountingEntity

		AccountingEntityGroupMemberOTOActiveRel
			one-to-many relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup          = LocalFinanceEnterpriseGroup
				related.AccountingEntityGroup			= LocalAccountingEntityGroup
				related.AccountingEntity				= LocalAccountingEntity
    		Instance Selection
    			where (related.AccountingEntity.Status.Active)
				
		SystemClosingControlRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= LocalFinanceEnterpriseGroup
				related.AccountingEntity				= LocalAccountingEntity
				related.GeneralLedgerSystemCode			= "PS"

		ProjectPeriodOfPerformanceRel
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= LocalProject
				related.GeneralLedgerSystemCode	= "PR"

		GLTransactionJournalizeGroupProjectRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByJournalizeGroup
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.JournalizeGroup			= JournalizeGroup
			Instance Selection
				where (related.FinanceCodeBlock.Project = Project
				and    related.LaborDistribution.Distributed
				and    related.Resource         = Employee)
				
		ResetGLTransactionDetailRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByJournalizeGroup
				related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				related.JournalizeGroup			= ResetJournalizeGroup
			Instance Selection
				where (related.FinanceCodeBlock.Project = LocalProject
				and    related.LaborDistribution.Distributed
				and    related.Resource         = LocalEmployee)
								
		OriginalGLTransactionDetailRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses ByJournalizeGroup
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.JournalizeGroup			= JournalizeGroup
			Instance Selection
    			where (related.Resource			= Employee
    			and	   related.TransactionDate within DateRange)				
				
		DistributedGLTransactionDetailRel
			one-to-many relation using OriginalGLTransactionDetailRel
			Instance Selection
				where (related.LaborDistribution.Distributed)
				
		AllProcessedPeriodEmployeeLaborRel
			one-to-many relation to ProjectAssignmentLabor
    		Field Mapping uses ByEmployeeAndSchedulePeriod
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.Employee				= Employee
    			related.ProjectLaborSchedule	= ProjectLaborSchedule
    			related.LaborPeriod.Period		= LaborPeriod.Period
			Instance Selection
				where (related.Status.Processed)
				
		AllAdjustedPeriodEmployeeLaborRel
			one-to-many relation using AllProcessedPeriodEmployeeLaborRel
			Instance Selection
				where (related.Adjusted)

		ActualAdjustedPeriodEmployeeLaborRel
			one-to-many relation using AllAdjustedPeriodEmployeeLaborRel
			Instance Selection
				where (related.ActualPercent entered)
							
		EmployeeRel
			one-to-one relation to Employee
			Field Mapping uses symbolic key
				related.HROrganization	= FinanceEnterpriseGroup.HROrganization
				related.Employee		= Employee

		ProjectEmployeeLaborFTERel
			one-to-one relation to ProjectEmployeeLaborFTE
			Field Mapping uses ByDateDescending
				related.HROrganization	= FinanceEnterpriseGroup.HROrganization
				related.Employee		= Employee
				related.EffectiveDate	<= DateRange.End
				
		SalaryCapRel
			one-to-one relation to ProjectSalaryCap
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				related.ProjectSalaryCap		= LocalSalaryCap
				related.EffectiveDate			<= LocalSalaryCapDate

		SalaryCapMessageRel
			one-to-one relation to ProjectSalaryCap
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectSalaryCap		= Project.SalaryCap
				related.EffectiveDate			<= DerivedSalaryCapEndDate

		CappedLaborRel
			one-to-one relation to ProjectAssignmentLabor
			Field Mapping uses ByEmployeeAndSchedulePeriod
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Employee					= Employee
    			related.ProjectLaborSchedule		= ProjectLaborSchedule
				related.LaborPeriod.Period			= LaborPeriod.Period
				related.Project						= LocalProject
				related.LaborPeriod.SequenceNumber	= LocalSequenceNumber

		LocalCappedLaborRel
			one-to-one relation to ProjectAssignmentLabor
			Field Mapping uses ByEmployeeAndSchedulePeriod
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.Employee					= LocalEmployee
    			related.ProjectLaborSchedule		= LocalProjectLaborSchedule
				related.LaborPeriod.Period			= LocalPeriod
				related.Project						= LocalProject
				related.LaborPeriod.SequenceNumber	= LocalSequenceNumber

		ProjectAssignmentRel
			one-to-one relation to ProjectAssignment
			Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
    			related.Project					= LocalProject
    			related.Employee				= LocalEmployee
    			related.ProjectAssignment		= LocalProjectAssignment

		ProjectAssignmentSplitRel
			one-to-one relation to ProjectAssignmentSplit
			Field Mapping uses part of key
    			related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
    			related.Project					= LocalProject
    			related.Employee				= LocalEmployee
    			related.ProjectAssignment		= LocalProjectAssignment
    			related.SequenceNumber			= LocalSplitSequenceNumber

		ProjectBurdenCodeRel
			one-to-one relation to ProjectBurdenCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				related.ProjectBurdenCode		= LocalBurdenCode
				related.EffectiveDate			<= LocalTransactionDate

		ProjectBurdenCodeFringeRel
			one-to-one relation to ProjectBurdenCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
				related.ProjectBurdenCode		= LocalBurdenCode
				related.EffectiveDate		   <= LocalExchangeDate
		
		ProjectAssignmentEffortRel
			one-to-one relation to ProjectAssignmentEffort
			Field Mapping uses ByEmployeeAndPeriod
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Employee				= Employee
				related.ProjectEffortSchedule	= ProjectLaborSchedule.ProjectEffortSchedule
				related.ProjectEffortPeriod		= LocalEffortPeriod				
				related.Project					= Project
				related.ProjectAssignment		= ProjectAssignment
				
		ProjectEffortPeriodRel
			one-to-many relation to ProjectEffortPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectEffortSchedule	= ProjectLaborSchedule.ProjectEffortSchedule
			Instance Selection
				where (DateRange.End within related.DateRange)

		CertifiedEffortRel
			one-to-many relation to ProjectAssignmentEffort
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= Project
				related.Employee				= Employee
				related.ProjectAssignment		= ProjectAssignment
				related.ProjectEffortPeriod		= ProjectEffortPeriodRel.ProjectEffortPeriod
			Instance Selection
				where (related.Certified)
															
		GLCommitRel
			one-to-one relation to GLCommit
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction  = reference to this instance

		GLCommitEncumbranceRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.HeaderUniqueID			= UniqueID

		ProjectEmployeeBurdenRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.HeaderUniqueID			= UniqueID
			Instance Selection
				where (related.FinanceCodeBlock.Ledger					  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.Ledger
	        	and    related.FinanceCodeBlock.ToAccountingEntity		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.ToAccountingEntity
	        	and    related.FinanceCodeBlock.AccountingUnit			  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.AccountingUnit
	            and    related.FinanceCodeBlock.GeneralLedgerChartAccount = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.GeneralLedgerChartAccount
	            and    related.FinanceCodeBlock.Project					  = Project
				and    related.FinanceCodeBlock.FinanceDimension1		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension1
				and    related.FinanceCodeBlock.FinanceDimension2		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension2
				and    related.FinanceCodeBlock.FinanceDimension3		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension3
				and    related.FinanceCodeBlock.FinanceDimension4		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension4
				and    related.FinanceCodeBlock.FinanceDimension5         = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension5
				and    related.FinanceCodeBlock.FinanceDimension6		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension6
				and    related.FinanceCodeBlock.FinanceDimension7		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension7
				and    related.FinanceCodeBlock.FinanceDimension8		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension8
				and    related.FinanceCodeBlock.FinanceDimension9		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension9
				and    related.FinanceCodeBlock.FinanceDimension10		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension10)	

		OtherProjectEmployeeBurdenRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.HeaderUniqueID			= UniqueID
			Instance Selection
				where (related.GLCommit                                  != GLCommitRel.GLCommit			
				and    related.FinanceCodeBlock.Ledger					  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.Ledger
	        	and    related.FinanceCodeBlock.ToAccountingEntity		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.ToAccountingEntity
	        	and    related.FinanceCodeBlock.AccountingUnit			  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.AccountingUnit
	            and    related.FinanceCodeBlock.GeneralLedgerChartAccount = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.GeneralLedgerChartAccount
	            and    related.FinanceCodeBlock.Project					  = Project
				and    related.FinanceCodeBlock.FinanceDimension1		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension1
				and    related.FinanceCodeBlock.FinanceDimension2		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension2
				and    related.FinanceCodeBlock.FinanceDimension3		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension3
				and    related.FinanceCodeBlock.FinanceDimension4		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension4
				and    related.FinanceCodeBlock.FinanceDimension5         = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension5
				and    related.FinanceCodeBlock.FinanceDimension6		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension6
				and    related.FinanceCodeBlock.FinanceDimension7		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension7
				and    related.FinanceCodeBlock.FinanceDimension8		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension8
				and    related.FinanceCodeBlock.FinanceDimension9		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension9
				and    related.FinanceCodeBlock.FinanceDimension10		  = Employee.ProjectEmployee.FringeEncumbranceCodeBlock.FinanceDimension10)
				
		ProjectAssignmentBurdenRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.HeaderUniqueID			= UniqueID
			Instance Selection
				where (related.FinanceCodeBlock.Ledger					  = ProjectAssignment.FringeEncumbranceCodeBlock.Ledger
	        	and    related.FinanceCodeBlock.ToAccountingEntity		  = ProjectAssignment.FringeEncumbranceCodeBlock.ToAccountingEntity
	        	and    related.FinanceCodeBlock.AccountingUnit			  = ProjectAssignment.FringeEncumbranceCodeBlock.AccountingUnit
	            and    related.FinanceCodeBlock.GeneralLedgerChartAccount = ProjectAssignment.FringeEncumbranceCodeBlock.GeneralLedgerChartAccount
	            and    related.FinanceCodeBlock.Project					  = Project
				and    related.FinanceCodeBlock.FinanceDimension1		  = ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension1
				and    related.FinanceCodeBlock.FinanceDimension2		  = ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension2
				and    related.FinanceCodeBlock.FinanceDimension3		  = ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension3
				and    related.FinanceCodeBlock.FinanceDimension4		  = ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension4
				and    related.FinanceCodeBlock.FinanceDimension5         = ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension5
				and    related.FinanceCodeBlock.FinanceDimension6		  = ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension6
				and    related.FinanceCodeBlock.FinanceDimension7		  = ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension7
				and    related.FinanceCodeBlock.FinanceDimension8		  = ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension8
				and    related.FinanceCodeBlock.FinanceDimension9		  = ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension9
				and    related.FinanceCodeBlock.FinanceDimension10		  = ProjectAssignment.FringeEncumbranceCodeBlock.FinanceDimension10)

		GLCommitSalaryEncumbranceRel
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.HeaderUniqueID			= UniqueID
			Instance Selection
				where (related.FinanceCodeBlock.Ledger					  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.Ledger
	        	and    related.FinanceCodeBlock.ToAccountingEntity		  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.ToAccountingEntity
	        	and    related.FinanceCodeBlock.AccountingUnit			  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.AccountingUnit
	            and    related.FinanceCodeBlock.GeneralLedgerChartAccount = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.GeneralLedgerChartAccount
	            and    related.FinanceCodeBlock.Project					  = Project
				and    related.FinanceCodeBlock.FinanceDimension1		  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.FinanceDimension1
				and    related.FinanceCodeBlock.FinanceDimension2		  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.FinanceDimension2
				and    related.FinanceCodeBlock.FinanceDimension3		  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.FinanceDimension3
				and    related.FinanceCodeBlock.FinanceDimension4		  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.FinanceDimension4
				and    related.FinanceCodeBlock.FinanceDimension5         = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.FinanceDimension5
				and    related.FinanceCodeBlock.FinanceDimension6		  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.FinanceDimension6
				and    related.FinanceCodeBlock.FinanceDimension7		  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.FinanceDimension7
				and    related.FinanceCodeBlock.FinanceDimension8		  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.FinanceDimension8
				and    related.FinanceCodeBlock.FinanceDimension9		  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.FinanceDimension9
				and    related.FinanceCodeBlock.FinanceDimension10		  = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.FinanceDimension10)

		JournalizeGroupResultRel
			one-to-one relation to JournalizeGroupResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.JournalizeGroupResult	= JournalizeGroup

		ProjectStructureValidationLineOTORel
			one-to-many relation to ProjectStructureValidationLine
			Field Mapping uses ByValidationCodeBlock
				related.FinanceEnterpriseGroup				 = FinanceEnterpriseGroup
				related.ProjectStructureValidationResult	 = LocalProjectStructureValidationResult
				related.ValidationCodeBlock.AccountingEntity = LocalAccountingEntity
				related.ValidationCodeBlock.FinanceCodeBlock = LocalCodeBlock
				
		ProjectStructureValidationLineRel
			one-to-many relation to ProjectStructureValidationLine
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup				 = LocalFinanceEnterpriseGroup
				related.ProjectStructureValidationResult	 = LocalProjectStructureValidationResult

		ProjectEmployeeLaborPeriodRel
			one-to-one relation to ProjectEmployeeLaborPeriod
			Field Mapping uses symbolic key
				related.HROrganization			= FinanceEnterpriseGroup.HROrganization
				related.Employee				= Employee
				related.ProjectLaborSchedule	= ProjectLaborSchedule
				related.ProjectSchedulePeriod	= LaborPeriod.Period

		FixLaborScheduleRel
			one-to-many relation to ProjectEmployeeLaborPeriod
			Field Mapping uses symbolic key
				related.HROrganization	= FinanceEnterpriseGroup.HROrganization
				related.Employee		= Employee
			Instance Selection
				where (related.ProjectSchedulePeriod = LaborPeriod.Period
				and    related.DateRange = DateRange)

    Sets
    	ByEmployeeAndSchedulePeriod
    		Sort Order
    			FinanceEnterpriseGroup
    			Employee
    			ProjectLaborSchedule
    			LaborPeriod.Period
    			Project
    			LaborPeriod.SequenceNumber

    	ByProjectSchedulePeriodAndEmployee
    		Sort Order
    			FinanceEnterpriseGroup
    			ProjectLaborSchedule
    			LaborPeriod.Period
    			Employee    			
    			Project
    			LaborPeriod.SequenceNumber

    Field Rules
    	Status
    		if (old Status entered)
	    		cannot be changed
	    			"StatusCannotBeChangedDirectly;_PleaseUseDedicatedAction"
	    			
    		if (ActualPercent entered
    		or  PlannedPercent entered)
    			default to Status.Entered
					
    	ActualPercent
    		constraint (ActualPercent <= 1)
    			"ActualPercentCannotExceed100"
    		if (Status.Approved)
    			cannot be changed
    				"CannotChangeActualPercent;_RecordHasBeenApproved"
    		if (Status.Certified)
    			cannot be changed
    				"CannotChangeActualPercent;_EffortHasBeenCertified"
    		if (Status.PendingApproval)
    			cannot be changed
    				"CannotChangeActualPercent;_RecordIsPendingApproval"
    		if (Status.Processed
    		and old ActualPercent not entered
    		and JournalizeGroup not entered)
    			cannot be changed
    				"CannotChangeActualPercent;_ZeroRecordHasBeenProcessed"
    			
		DateRange    		
    		DateRange = ProjectSchedulePeriodRel.DateRange

    	PlannedPercent
    		constraint (PlannedPercent <= 1)
    			"PlannedPercentCannotExceed100"
    		if (Status.Approved)
    			cannot be changed
    				"CannotChangePlannedPercent;_RecordHasBeenApproved"
    		if (Status.Certified)
    			cannot be changed
    				"CannotChangePlannedPercent;_EffortHasBeenCertified"
    		if (Status.PendingApproval)
    			cannot be changed
    				"CannotChangePlannedPercent;_RecordIsPendingApproval"
    		if (Status.Processed)
    			cannot be changed
    				"CannotChangePlannedPercent;_RecordHasBeenProcessed"

		CertifiedPercent
			cannot be changed

		CertifiedCommittedEffort
			cannot be changed
			
		FinanceCodeBlock
    		if (Status.Processed)		
	   			cannot be changed
	   				"CannotChangeFinanceStructure;_RecordHasBeenProcessed"

		ProjectLaborSchedule
			default to Employee.ProjectLaborSchedule

		OverageAmount
			cannot be changed

		TransactionAmount
			cannot be changed

		DistributedOverageAmount
			cannot be changed

		FringeBurdenAmount
			cannot be changed

		Hours
			cannot be changed

	Delete Rules
		if (OtherProjectAssignmentLaborRel not exists)
			invoke Delete ProjectEmployeeLaborPeriodRel
		else
		if ((ActualPercent entered
		or   PlannedPercent entered)
		and  ProjectEmployeeLaborPeriodRel exists)
			invoke UpdateTotals ProjectEmployeeLaborPeriodRel
				invoked.ActualDifference	= ActualPercent * -1
				invoked.PlannedDifference	= PlannedPercent * -1

	Actions
        Create is a Create Action
        	restricted
        	Action Rules
        		constraint (!Employee.ProjectEmployee.ExcludeFromLabor)
        			"EmployeeExcludedFromLaborDistribution"
        		constraint (FinanceEnterpriseGroup.LaborDistributionUpgradeComplete)
        			"<UpgradeIncompleteMF>"
			Exit Rules
				if (ProjectEmployeeLaborPeriodRel exists)
					Status = ProjectEmployeeLaborPeriodRel.Status
					JournalizeGroup = ProjectEmployeeLaborPeriodRel.JournalizeGroup
				if (Status.Entered
				or  Status not entered)
					PlannedPercent = CommittedEffort
				if ((PlannedPercent entered
				or   ActualPercent entered)
				and  Status not entered)
					Status = Status.Entered
				DateRange = ProjectSchedulePeriodRel.DateRange
				if (LaborPeriod.SequenceNumber entered
				and !SkipReduce)
					invoke ReducePlannedPercent ParentAssignmentRel
						invoked.Reduction = PlannedPercent
				if (Status.Processed
				or  Status.Certified)
					invoke CreateProjectEffortRecord
						if (Status.Certified)
							invoked.PrmCertified = true
				if (ProjectEmployeeLaborPeriodRel exists)
					invoke Update ProjectEmployeeLaborPeriodRel
						invoked.TotalActualPercent	+= ActualPercent
						invoked.TotalPlannedPercent	+= PlannedPercent
				else
					invoke Create ProjectEmployeeLaborPeriodRel
						invoked.Status						 = Status
						invoked.JournalizeGroup 			 = JournalizeGroup
						invoked.TotalActualPercent			 = ActualPercent
						invoked.TotalPlannedPercent			 = PlannedPercent

		ReducePlannedPercent is an Instance Action
			restricted
			Parameters
				Reduction	is Percent size 6.3
			Action Rules
				if (PlannedPercent >= Reduction)
					PlannedPercent -= Reduction
			Exit Rules
				if (PlannedPercent changed
				and ProjectEmployeeLaborPeriodRel exists)
					PlannedDifference = PlannedPercent - old PlannedPercent
					invoke UpdateTotals ProjectEmployeeLaborPeriodRel
						invoked.PlannedDifference	= PlannedDifference
		
		AddPercent is an Instance Action
			restricted
			Parameters
				Planned	is Percent size 6
				Actual	is Percent size 6
			Parameter Rules
				Planned			
					initial value is PlannedPercent	
				Actual
					initial value is ActualPercent					
			Action Rules
				constraint (Actual <= 1)
	    			"TotalActualPercentCannotExceed100"
	    		constraint (Planned <= 1)
	    			"TotalPlannedPercentCannotExceed100"
				ActualPercent	= Actual
				PlannedPercent	= Planned
				Status			= 1
			Exit Rules
				ActualDifference  = ActualPercent - old ActualPercent
				PlannedDifference = PlannedPercent - old PlannedPercent
				invoke Update ProjectEmployeeLaborPeriodRel
					invoked.TotalActualPercent	+= ActualDifference
					invoked.TotalPlannedPercent	+= PlannedDifference
					invoked.Status				 = 1
					invoked.NoTransactionsFound	 = false
					invoked.Distributed			 = false
				invoke SetStatus AllPeriodLaborRel 
					invoked.PrmStatus = 1

        Update is an Update Action
        	Action Rules
        		constraint (FinanceEnterpriseGroup.LaborDistributionUpgradeComplete)
        			"<UpgradeIncompleteMF>"
        	Exit Rules
        		if (Status.Processed
        		and ActualPercent changed)
        			invoke SetAdjusted AllProcessedPeriodEmployeeLaborRel
	            if ((Employee.EncumbranceBasis.PlannedPercent
				and   PlannedPercent entered)
				or   (Employee.EncumbranceBasis.ActualPercent
				and   ActualPercent entered))
					include UpdateEncumbrance  
				if (FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionApproval
				and RedistributionApprovalStatus.Approved
				and ActualPercent changed)
					invoke SetRedistibutionStatus AllProcessedPeriodEmployeeLaborRel
						invoked.PrmStatus = 0
				if ((ActualPercent changed
				or   PlannedPercent changed
				or   Status changed
				or   Adjusted changed
				or   JournalizeGroup changed
				or   Redistributed)
				and  ProjectEmployeeLaborPeriodRel exists)
					ActualDifference = ActualPercent - old ActualPercent
					PlannedDifference = PlannedPercent - old PlannedPercent
					invoke Update ProjectEmployeeLaborPeriodRel
						invoked.TotalActualPercent			+= ActualDifference
						invoked.TotalPlannedPercent			+= PlannedDifference
						invoked.Status						 = Status
						invoked.Adjusted					 = Adjusted
						invoked.JournalizeGroup 			 = JournalizeGroup
						if (Redistributed)
							invoked.LaborRedistributed		 = true

        UpdateNoRules is an Update Action
        	restricted
        	bypass field rules
        	Exit Rules
        		if (Status.Processed
        		and ActualPercent changed)
        			invoke SetAdjusted AllProcessedPeriodEmployeeLaborRel
	            if ((Employee.EncumbranceBasis.PlannedPercent
				and   PlannedPercent entered)
				or   (Employee.EncumbranceBasis.ActualPercent
				and   ActualPercent entered))
					include UpdateEncumbrance  
				if (FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionApproval
				and RedistributionApprovalStatus.Approved
				and ActualPercent changed)
					invoke SetRedistibutionStatus AllProcessedPeriodEmployeeLaborRel
						invoked.PrmStatus = 0
				if ((ActualPercent changed
				or   PlannedPercent changed
				or   Status changed
				or   Adjusted changed
				or   JournalizeGroup changed)
				and  ProjectEmployeeLaborPeriodRel exists)
					ActualDifference = ActualPercent - old ActualPercent
					PlannedDifference = PlannedPercent - old PlannedPercent
					invoke Update ProjectEmployeeLaborPeriodRel
						invoked.TotalActualPercent			+= ActualDifference
						invoked.TotalPlannedPercent			+= PlannedDifference
						invoked.Status						 = Status
						invoked.Adjusted					 = Adjusted
						invoked.JournalizeGroup 			 = JournalizeGroup

		UpdateCodeBlock is an Instance Action
			restricted
			Parameters
				PrmFinanceCodeBlock is a FinanceCodeBlockNoProject
			Action Rules
				FinanceCodeBlock = PrmFinanceCodeBlock
				
		UpdateFringe is an Instance Action
			restricted
			Parameters
				PrmDifference	is like InternationalAmount
			Action Rules
				FringeBurdenAmount += PrmDifference

		SetAdjusted is an Instance Action
			restricted
			Action Rules
				Adjusted = true
				CertifiedPercent = blank

		ApproveAllLabor is a Set Action  
			restricted














































		ApproveLabor is an Instance Action
			valid when (IsOkToApprove)
			disable multiple instance selection			
			Action Rules
				invoke ApproveLabor ProjectEmployeeLaborPeriodRel

		ChangeZeroLaborToProcessed is an Instance Action
			valid when (IsOkToProcessZero)
			disable multiple instance selection
			Action Rules
				invoke ChangeZeroLaborToProcessed ProjectEmployeeLaborPeriodRel
							
		SubmitForApproval is an Instance Action			
			valid when (IsOkToSubmitForApproval)
			disable multiple instance selection			
			Action Rules
	    		constraint (ProjectEmployeeLaborPeriodRel.TotalActualPercent <= 1)
	    			"TotalActualPercentForPeriodCannotExceed100"
				if (Approve100PercentLaborOnlyStrucutre)
			    	constraint (ProjectEmployeeLaborPeriodRel.TotalActualPercent = 1)
			    		"TotalActualPercentForPeriodMustEqual100"
				if (FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionConfirmation entered)
					confirmation required
						"<FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionConfirmation>"			
				invoke SetStatus AllPeriodLaborRel
					invoked.PrmStatus = 5
				invoke Update ProjectEmployeeLaborPeriodRel
					invoked.Status = 5

				initiate LaborDistributionApproval process
					title is "ApproveLaborDistributionFor<Employee.Name.PreferredFirstAndLastName>_<DateRange.Begin>-<DateRange.End>"
					Variables
						FinanceEnterpriseGroup
						Project
						Employee
						ProjectAssignment
						LaborPeriod
						DerivedApproverActor
						EmployeeEmailAddress
						DateRange.Begin
						DateRange.End
					URLs
						"<linkback(webapp is ProjectAccountant navigation is PeriodLaborLinkBack text is \"LaborDistribution\")>"


		ApproveLaborDistribution is an Instance Action
			restricted
			Action Rules
				invoke SetStatus AllPeriodLaborRel
					invoked.PrmStatus = 2
				invoke Update ProjectEmployeeLaborPeriodRel
					invoked.Status = 2
										
		RejectLaborDistribution is an Instance Action
			restricted
			action comment required			
			Action Rules					
				invoke SetStatus AllPeriodLaborRel
					invoked.PrmStatus = 1
				invoke Update ProjectEmployeeLaborPeriodRel
					invoked.Status = 1

		SubmitRedistributionForApproval is an Instance Action
			valid when (IsOkToSubmitForApprovalRedistribution)
			disable multiple instance selection			
			Action Rules
	    		constraint (ProjectEmployeeLaborPeriodRel.TotalActualPercent <= 1)
	    			"TotalActualPercentForPeriodCannotExceed100"
				if (Approve100PercentLaborOnlyStrucutre)
			    	constraint (ProjectEmployeeLaborPeriodRel.TotalActualPercent = 1)
			    		"TotalActualPercentForPeriodMustEqual100"
				if (FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionConfirmation entered)
					confirmation required
						"<FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionConfirmation>"			
				invoke SetRedistibutionStatus AllProcessedPeriodEmployeeLaborRel
					invoked.PrmStatus = 3
				initiate LaborRedistributionApproval process
					title is "ApproveLaborRedistributionFor<Employee.Name.PreferredFirstAndLastName>_<DateRange.Begin>-<DateRange.End>"
					Variables
						FinanceEnterpriseGroup
						Project
						Employee
						ProjectAssignment
						LaborPeriod
						DerivedRedistributionApprover
						EmployeeEmailAddress
						DateRange.Begin
						DateRange.End
					URLs
						"<linkback(webapp is ProjectResource navigation is ResourcePeriodRedistributionLaborLinkBack text is \"LaborDistribution\")>"

		ApproveLaborRedistribution is an Instance Action
			restricted
			Action Rules
				invoke SetRedistibutionStatus AllProcessedPeriodEmployeeLaborRel
					invoked.PrmStatus = 1

		RejectLaborRedistribution is an Instance Action
			restricted
			action comment required			
			Action Rules					
				invoke SetRedistibutionStatus AllProcessedPeriodEmployeeLaborRel
					invoked.PrmStatus = 2


		ResetLaborRedistributionApprovals is an Instance Action
			valid when (OkToResetLaborRedistributionApprovals)		
			Action Rules
				invoke SetRedistibutionStatus AllProcessedPeriodEmployeeLaborRel
					invoked.PrmStatus = 0

		ResetLaborDistributionApprovals is an Instance Action
			valid when (OkToResetLaborDistributionApprovals)		
			Action Rules
				invoke SetStatus AllPeriodLaborRel
					invoked.PrmStatus = 1
				invoke Update ProjectEmployeeLaborPeriodRel
					invoked.Status = 1

		UnapproveAllLabor is a Set Action  
			restricted























			Sort Order
				FinanceEnterpriseGroup
				ProjectLaborSchedule
				LaborPeriod.Period
				Status
				Employee

















		UnapproveLabor is an Instance Action
			valid when (IsOkToUnapprove)
			disable multiple instance selection			
			Action Rules
				invoke UnapproveLabor ProjectEmployeeLaborPeriodRel

		PopulateActualPercent is an Instance Action
			valid when (IsOkToPopulateActual)
			disable multiple instance selection			
			Action Rules
				invoke PopulateActualPercent ProjectEmployeeLaborPeriodRel
				
		PopulateActual is an Instance Action
			restricted
			Action Rules
				ActualPercent = PlannedPercent

		SetStatus is an Instance Action
			restricted
			Parameters
				PrmStatus	is Numeric size 1
			Action Rules
				Status = PrmStatus
				if (PrmStatus = 3)
					initialize Adjusted
					initialize PreviewAmount
					initialize PreviewBurdenAmount
					initialize PreviewUnitsAmount
					initialize CertifiedCommittedEffort
					invoke CreateProjectEffortRecord
				if (PrmStatus = 1
				or  PrmStatus = 2)
					initialize ErrorMessage
					initialize NoTransactionsFound
				if (PrmStatus = 4)
					initialize Adjusted

		SetRedistibutionStatus is an Instance Action
			restricted
			default label is "SetRedistributionStatus"
			Parameters
				PrmStatus	is Numeric size 1
			Action Rules
				RedistributionApprovalStatus = PrmStatus

        Delete is a Delete Action
        	restricted

		Copy is an Instance Action
			restricted
			Parameters
				ToPeriod 			 is like ProjectSchedulePeriod
				CopyFinanceStructure is Boolean
				SetToApproved        is Boolean
				CopyPlannedToActual  is Boolean
			Action Rules
				LocalPeriod = ToPeriod
				if (ToProjectAssignmentLaborRel.IsEntered)
					if (SetToApproved)
						invoke UpdateNoRules ToProjectAssignmentLaborRel
							invoked.PlannedPercent	= PlannedPercent
							if (CopyPlannedToActual)
								invoked.ActualPercent	= PlannedPercent
							else
								invoked.ActualPercent	= ActualPercent	
							if (CopyFinanceStructure)
								invoked.FinanceCodeBlock = FinanceCodeBlock
							invoked.Status = 2	
					else
						invoke Update ToProjectAssignmentLaborRel
							invoked.PlannedPercent	= PlannedPercent
							if (CopyPlannedToActual)
								invoked.ActualPercent	= PlannedPercent
							else
								invoked.ActualPercent	= ActualPercent	
							if (CopyFinanceStructure)
								invoked.FinanceCodeBlock = FinanceCodeBlock

		CopyAllLabor is a Set Action
			restricted
        	Parameters
        		PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
        			default label is "FinanceEnterpriseGroup"
        		EmployeeGroup				is an Employee group
        		PrmProjectLaborSchedule		is a ProjectLaborSchedule
        			default label is "LaborSchedule"
				FromPeriod 					is a ProjectSchedulePeriod
				ToPeriod 					is a ProjectSchedulePeriod
				ThroughPeriod				is a ProjectSchedulePeriod
				CopyFinanceStructure		is Boolean
				CopyPlannedToActual         is Boolean
        	Parameter Rules
        		PrmFinanceEnterpriseGroup
        			required
	        		constraint (PrmFinanceEnterpriseGroup.LaborDistributionUpgradeComplete)
	        			"<UpgradeIncompleteMF>"
				PrmProjectLaborSchedule
					required
				FromPeriod
					required
				ToPeriod
					required
					constraint (ToPeriod != FromPeriod)
						"ToPeriodCannotEqualFromPeriod"
				ThroughPeriod
					default to ToPeriod
					if (ThroughPeriod entered)
						constraint (ThroughPeriod >= ToPeriod)
							"ThroughPeriodMustBeAfterToPeriod"
						constraint (FromPeriod < ToPeriod
						or          FromPeriod > ThroughPeriod)
							"FromPeriodCannotBeWithinTargetPeriodRange"
			Sort Order
				FinanceEnterpriseGroup
				ProjectLaborSchedule
				LaborPeriod.Period
				Employee
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    ProjectLaborSchedule = PrmProjectLaborSchedule
        		and    LaborPeriod.Period = FromPeriod
        		and   !Employee.ExcludeFromLabor        		
        		and   (EmployeeRel.Employee within EmployeeGroup
        		or     EmployeeGroup not entered))
			Local Fields
				LocalPeriod			is like ProjectSchedulePeriod
			Action Rules
				Instance Rules
					if (ThroughPeriod not entered)
						ThroughPeriod = ToPeriod
					LocalPeriod = ToPeriod
					while (LocalPeriod <= ThroughPeriod)
						invoke Copy
							invoked.ToPeriod 			 = LocalPeriod
							invoked.CopyFinanceStructure = CopyFinanceStructure
							invoked.CopyPlannedToActual  = CopyPlannedToActual
						LocalPeriod += 1

		CopyLabor is an Instance Action
			valid when (!Employee.ExcludeFromLabor)
			disable multiple instance selection
			Parameters
				PrmProjectLaborSchedule is a ProjectLaborSchedule
				ToPeriod 				is a ProjectSchedulePeriod
				ThroughPeriod 			is a ProjectSchedulePeriod				
				CopyFinanceStructure	is Boolean
				SetToApproved           is Boolean 
				CopyPlannedToActual		is Boolean
			Parameter Rules
				PrmProjectLaborSchedule
					initial value is ProjectLaborSchedule
					default to ProjectLaborSchedule
				ToPeriod
					required
					initial value is LaborPeriod.Period + 1
				ThroughPeriod
					default to ToPeriod
					if (ThroughPeriod entered)
						constraint (ThroughPeriod >= ToPeriod)
							"ThroughPeriodMustBeAfterToPeriod"
			Local Fields
				LocalPeriod			is like ProjectSchedulePeriod
			Action Rules
        		constraint (FinanceEnterpriseGroup.LaborDistributionUpgradeComplete)
        			"<UpgradeIncompleteMF>"
				if (ThroughPeriod not entered)
					ThroughPeriod = ToPeriod
				LocalPeriod = ToPeriod
				while (LocalPeriod <= ThroughPeriod)
					invoke CopyLabor ProjectEmployeeLaborPeriodRel
						invoked.ToPeriod 			 = LocalPeriod
						invoked.CopyFinanceStructure = CopyFinanceStructure
						invoked.SetToApproved        = SetToApproved
						invoked.CopyPlannedToActual  = CopyPlannedToActual
					LocalPeriod += 1

		PreviewAdjustments is an Instance Action
			valid when (IsOkToRedistribute)
			disable multiple instance selection
        	Local Fields
        		Counter					is Numeric size 3
        		Counter2				is Numeric size 3
        		ProjectCount			is Numeric size 3
        		TotalPercent			is Percent size 6.3
        		TotalTransAmount		is a CurrencyAmount
        		TotalUnitsAmount		is a UnitsAmount        		
        		OriginalTransAmount		is a CurrencyAmount
        		OriginalUnitsAmount		is a UnitsAmount        		
				OriginalTransactionTable
        		MaxExceeded				is Boolean
        		MaximumAmount			is an InternationalAmount
        		TransactionCount		is Numeric size 3

			Action Rules
	    		constraint (ProjectEmployeeLaborPeriodRel.TotalActualPercent <= 1)
	    			"TotalActualPercentForPeriodCannotExceed100"
				if (Approve100PercentLaborOnlyStrucutre)
			    	constraint (ProjectEmployeeLaborPeriodRel.TotalActualPercent = 1)
			    		"TotalActualPercentForPeriodMustEqual100"
				if (FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionConfirmation entered)
					confirmation required
						"<FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionConfirmation>"			
				LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroup
				LocalRoundTo = DerivedRoundTo
				for each OriginalGLTransactionDetailRel
    				if (TransactionCount >= 99)
    					end for each
    				TransactionCount += 1
					Counter = 1
					while (Counter < 99)
						if (OriginalTransactionTable.GLTransactionDetail[Counter] = each.OriginalLaborTransaction)
							end while
						if (OriginalTransactionTable.GLTransactionDetail[Counter] not entered)
							OriginalTransactionTable.GLTransactionDetail[Counter] = each.OriginalLaborTransaction
							end while
						Counter += 1			
				Counter = 1
				while (OriginalTransactionTable.GLTransactionDetail[Counter] entered)
   					OriginalTransAmount += OriginalTransactionTable.GLTransactionDetail[Counter].TransactionAmount
   					OriginalUnitsAmount += OriginalTransactionTable.GLTransactionDetail[Counter].UnitsAmount
   					Counter += 1
				ProjectCount = PeriodRecordCount
				TotalPercent = ProjectEmployeeLaborPeriodRel.TotalActualPercent
				TotalTransAmount = OriginalTransAmount
				TotalUnitsAmount  = OriginalUnitsAmount
				initialize Counter
				for each AllAdjustedPeriodEmployeeLaborRel
					initialize LocalAmount
					initialize LocalBurdenAmount
					initialize LocalUnitsAmount
					if (each.ActualPercent entered)
						TransientFromCurrency = each.Project.Currency				
						Counter += 1
						initialize OriginalTransAmount
						initialize OriginalUnitsAmount
						Counter2 = 1
						while (OriginalTransactionTable.GLTransactionDetail[Counter2] entered)
							if (OriginalTransactionTable.GLTransactionDetail[Counter2].TransactionDate within each.ProjectAssignment.ProjectDateRange)
			   					OriginalTransAmount += OriginalTransactionTable.GLTransactionDetail[Counter2].TransactionAmount
			   					OriginalUnitsAmount += OriginalTransactionTable.GLTransactionDetail[Counter2].UnitsAmount
		   					Counter2 += 1
	        			LocalAmount = each.ActualPercent * OriginalTransAmount
						round LocalAmount to nearest LocalRoundTo	        			
	        			LocalUnitsAmount = each.ActualPercent * OriginalUnitsAmount
	        			if (each.Project.SalaryCap entered)
	        				LocalSalaryCap = each.Project.SalaryCap
							if (each.Project.SalaryCapDate.ProjectStartDate)
								LocalSalaryCapDate = each.Project.ProjectDateRange.BeginDate
							else
								LocalSalaryCapDate = each.DateRange.End
	        				MaximumAmount = SalaryCapRel.MaximumAmount / each.ProjectLaborSchedule.SalaryDivisor
	        				MaximumAmount *= each.ActualPercent
	        				MaximumAmount *= each.DerivedLaborFTE
							round MaximumAmount to nearest LocalRoundTo	        				
	        			else
	        				initialize MaximumAmount
	        			if (LocalAmount > MaximumAmount
	        			and MaximumAmount entered)
	        				LocalAmount = MaximumAmount
	        				MaxExceeded = true
						TotalTransAmount -= LocalAmount
						TotalUnitsAmount -= LocalUnitsAmount
						if   (Counter = ProjectCount
						and   TotalPercent = 1
						and ((TotalTransAmount != 0
						and   TotalTransAmount > -1
						and   TotalTransAmount < 1)
						or   (TotalUnitsAmount != 0
						and   TotalUnitsAmount > -1
						and   TotalUnitsAmount < 1))
						and   !MaxExceeded)
							LocalAmount += TotalTransAmount
							LocalUnitsAmount += TotalUnitsAmount
							TotalTransAmount = 0
							TotalUnitsAmount = 0
						if (!each.Project.FringeBurden.No)
							LocalProject = each.Project
							LocalEmployee = each.Employee
							LocalProjectAssignment = each.ProjectAssignment
							LocalTransactionDate = each.DateRange.End
							LocalBurdenCode = ProjectAssignmentRel.BurdenCode
							LocalBurdenAmount = LocalAmount * ProjectBurdenCodeRel.Rate
							round LocalBurdenAmount to nearest LocalRoundTo
						else
							LocalBurdenAmount = 0
					invoke SetPreviewAmount each
						invoked.PrmPreviewAmount = LocalAmount
						invoked.PrmPreviewBurdenAmount = LocalBurdenAmount
						invoked.PrmPreviewUnitsAmount = LocalUnitsAmount

		SetPreviewAmount is an Instance Action
			restricted
			Parameters
				PrmPreviewAmount 		is a CurrencyAmount
				PrmPreviewBurdenAmount	is a CurrencyAmount
				PrmPreviewUnitsAmount	is a UnitsAmount		
			Action Rules
				TransientFromCurrency = Project.Currency
				PreviewAmount 		= PrmPreviewAmount
				PreviewBurdenAmount = PrmPreviewBurdenAmount				
				PreviewUnitsAmount	= PrmPreviewUnitsAmount

		SetCapped is an Instance Action
			restricted
			Parameters
				PrmOverageAmount	is like InternationalAmount
			Action Rules
				Capped = true
				OverageAmount += PrmOverageAmount
				
		RedistributeAllLabor is a Set Action
			restricted
        	Parameters
        		PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
        			default label is "FinanceEnterpriseGroup"
        		EmployeeGroup				is an Employee group
        		PrmProjectLaborSchedule		is a ProjectLaborSchedule
        			default label is "LaborSchedule"
        		PrmProjectSchedulePeriod	is a ProjectSchedulePeriod
        			default label is "Period"
        		PrmPostingDate				is Date
        			default label is "PostingDate"
        		FromAccountingEntity		is an AccountingEntity
				OffsetCodeBlock				is a FinanceCodeBlockOverage
					default label is "OverrideOffsetFinanceStructure"
				FringeOffsetCodeBlock		is a FinanceCodeBlockOverage
					default label is "OverrideFringeOffsetFinanceStructure"
        	Parameter Rules
        		PrmFinanceEnterpriseGroup
        			required
	        		constraint (PrmFinanceEnterpriseGroup.LaborDistributionUpgradeComplete)
	        			"<UpgradeIncompleteMF>"
				PrmProjectLaborSchedule
					required
					constraint (PrmProjectLaborSchedule.ProjectEffortSchedule entered)
						"EffortScheduleRequiredForLaborSchedule<PrmProjectLaborSchedule>"
				PrmProjectSchedulePeriod
					required
        		PrmPostingDate
        			required
        			default to current corporate date
			Sort Order
				FinanceEnterpriseGroup
				ProjectLaborSchedule
				LaborPeriod.Period
				Adjusted
				JournalizeGroup
				Employee
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    ProjectLaborSchedule = PrmProjectLaborSchedule
        		and    LaborPeriod.Period = PrmProjectSchedulePeriod
        		and    IsOkToRedistribute
        		and   !Employee.ExcludeFromLabor        		
        		and   (EmployeeRel.Employee within EmployeeGroup
        		or     EmployeeGroup not entered))
			Action Rules
				Employee Set Rules
					Exit Rules
						if (ProjectEmployeeLaborPeriodRel.TotalActualPercent <= 1)
							LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							LocalAccountingEntity		= first DistributedGLTransactionDetailRel.OriginalLaborTransactionRel.AccountingEntity
							if (FromAccountingEntity entered)
								LocalAccountingEntity	= FromAccountingEntity
							if (SystemClosingControlRel exists
							and SystemClosingControlRel.Control)
								if (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
									invoke DoRedistribution
										invoked.PrmPostingDate			= PrmPostingDate
										invoked.FromAccountingEntity	= FromAccountingEntity
										invoked.OffsetCodeBlock			= OffsetCodeBlock
										invoked.FringeOffsetCodeBlock	= FringeOffsetCodeBlock
							else
								invoke DoRedistribution
									invoked.PrmPostingDate			= PrmPostingDate
									invoked.FromAccountingEntity	= FromAccountingEntity
									invoked.OffsetCodeBlock			= OffsetCodeBlock
									invoked.FringeOffsetCodeBlock	= FringeOffsetCodeBlock													
		
		RedistributeLabor is an Instance Action
			valid when (IsOkToRedistribute)
			disable multiple instance selection
			completion message is "<CompletionMessage>"			
        	Parameters
        		PrmPostingDate				is Date
        			default label is "PostingDate"
        		FromAccountingEntity		is an AccountingEntity
				OffsetCodeBlock				is a FinanceCodeBlockOverage
					default label is "OverrideOffsetFinanceStructure"
				FringeOffsetCodeBlock		is a FinanceCodeBlockOverage
					default label is "OverrideFringeOffsetFinanceStructure"
        			
        	Parameter Rules							
        		PrmPostingDate
        			required
        			default to current corporate date
					LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					LocalAccountingEntity		= first DistributedGLTransactionDetailRel.OriginalLaborTransactionRel.AccountingEntity
					if (FromAccountingEntity entered)
						LocalAccountingEntity	= FromAccountingEntity
					if (SystemClosingControlRel exists
					and SystemClosingControlRel.Control)
						constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
						if (OffsetCodeBlock.Project entered)
							LocalProject = OffsetCodeBlock.Project
							LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
							LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
							if (LocalProject.HasPeriodOfPerformance
							and ProjectPeriodOfPerformanceRel exists)
								LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
								LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
							constraint (PrmPostingDate within LocalDateRange)
								"PostingDate<PrmPostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
						if (FringeOffsetCodeBlock.Project entered)
							LocalProject = FringeOffsetCodeBlock.Project
							LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
							LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
							if (LocalProject.HasPeriodOfPerformance
							and ProjectPeriodOfPerformanceRel exists)
								LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
								LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
							constraint (PrmPostingDate within LocalDateRange)
								"PostingDate<PrmPostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
						for each AllPeriodLaborRel
							if (each.ActualPercent entered)
								LocalProject = each.Project
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								constraint (PrmPostingDate within LocalDateRange)
									"PostingDate<PrmPostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
			Action Rules
        		constraint (FinanceEnterpriseGroup.LaborDistributionUpgradeComplete)
        			"<UpgradeIncompleteMF>"
	    		constraint (ProjectEmployeeLaborPeriodRel.TotalActualPercent <= 1)
	    			"TotalActualPercentForPeriodCannotExceed100"
				if (Approve100PercentLaborOnlyStrucutre)
			    	constraint (ProjectEmployeeLaborPeriodRel.TotalActualPercent = 1)
			    		"TotalActualPercentForPeriodMustEqual100"
				if (FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionConfirmation entered)
					confirmation required
						"<FinanceEnterpriseGroup.EnterpriseProjectStructure.LaborDistributionConfirmation>"			
				if (DistributedGLTransactionDetailCount > 50)
					CompletionMessage = RedistributeLaborSubmittedMF
					invoke DoRedistribution in background
						invoked.PrmPostingDate			= PrmPostingDate
						invoked.FromAccountingEntity	= FromAccountingEntity						
						invoked.OffsetCodeBlock			= OffsetCodeBlock
						invoked.FringeOffsetCodeBlock	= FringeOffsetCodeBlock						
				else
					CompletionMessage = RedistributeLaborCompletedMF
					invoke DoRedistribution in foreground
						invoked.PrmPostingDate			= PrmPostingDate
						invoked.FromAccountingEntity	= FromAccountingEntity
						invoked.OffsetCodeBlock			= OffsetCodeBlock
						invoked.FringeOffsetCodeBlock	= FringeOffsetCodeBlock						
						
		DoRedistribution is an Instance Action
			restricted
			Parameters
				PrmPostingDate			is Date
				FromAccountingEntity	is an AccountingEntity
				OffsetCodeBlock			is a FinanceCodeBlockOverage
				FringeOffsetCodeBlock	is a FinanceCodeBlockOverage				

        	Local Fields
        		LaborDistributionTable
        		OriginalTransactionTable
        		Counter					is Numeric size 3
        		Counter2				is Numeric size 3
        		ProjectCount			is Numeric size 3
        		TotalPercent			is Percent size 6.3
        		TotalTransAmount		is a CurrencyAmount
				TotalOverageAmount		is a CurrencyAmount
        		TotalUnitsAmount		is a UnitsAmount
        		LocalJournalizeGroup	is a JournalizeGroup
        		LocalTransaction		is a GLTransactionDetail
        		MaxExceeded				is Boolean        		
				LocalGLTransactionDetail	is a GLTransactionDetail view
				NegativesExist			is Boolean
        		LocalEmployeeAmount		is a CurrencyAmount
        		LocalTransPercent		is Decimal size 7.4
        		LocalMax				is a CurrencyAmount
        		ProcessNegatives		is Boolean
        		OffsetErrorFound		is Boolean
        		BurdenErrorFound		is Boolean
        		ErrorFound				is Boolean
				LocalErrorMessage		is Text

			Action Rules
				LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroup
	            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
				LocalJournalizeGroup 		= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup	
				BypassStructureRelationEdit = true
				BypassActiveCodeBlockEdit	= true
				LocalEmployee				= Employee		
				LocalDateRange				= DateRange
				LocalRoundTo				= DerivedRoundTo
				LocalOverageOption			= FinanceEnterpriseGroup.EnterpriseProjectStructure.OverageAccountDefaultOption
				for each DistributedGLTransactionDetailRel
					TotalTransAmount = each.TransactionAmount * -1
					TotalUnitsAmount = each.UnitsAmount * -1
					invoke Released.Create GLTransactionDetail
						resume on error
						fill in fields from each
							except invoked.ReportCurrencyAmount
							except invoked.OriginatingTransaction
							except invoked.AutoReverse
						invoked.TransactionAmount 		= TotalTransAmount
						invoked.PostingDate				= PrmPostingDate
						invoked.LaborDistribution		= 1
						invoked.System					= "PR"
						invoked.GeneralLedgerEvent		= "PJ"
						invoked.Reference				= "ProjectAssignmentLaborAdjustment"						
						invoked.JournalizeGroup			= LocalJournalizeGroup
						invoked.UnitsAmount				= TotalUnitsAmount
						invoked.Billed					= 0
						invoked.RevenueRecognized		= 0
						invoked.Capitalize				= 0
						invoked.IndirectBurden			= 0
						invoked.BypassActiveCodeBlockEdit = true
					if (each.OriginalLaborTransaction != LocalTransaction)
						LocalTransaction = each.OriginalLaborTransaction
						Counter = 1
						while (Counter < 99)
							if (OriginalTransactionTable.GLTransactionDetail[Counter] = each.OriginalLaborTransaction)
								end while
							if (OriginalTransactionTable.GLTransactionDetail[Counter] not entered)
								OriginalTransactionTable.GLTransactionDetail[Counter] = each.OriginalLaborTransaction
								LocalEmployeeAmount += OriginalTransactionTable.GLTransactionDetail[Counter].TransactionAmount
								if (OriginalTransactionTable.GLTransactionDetail[Counter].TransactionAmount < 0)
									NegativesExist = true
								end while
							Counter += 1
				initialize Counter	
				for each AllPeriodLaborRel
					if (each.ActualPercent entered
					and each.Adjusted)
						Counter += 1
		        		LaborDistributionTable.LaborDistribution[Counter].ActualPercent = each.ActualPercent
		        		TotalPercent   += each.ActualPercent
						LaborDistributionTable.LaborDistribution[Counter].Project = each.Project
						LaborDistributionTable.LaborDistribution[Counter].SequenceNumber = each.LaborPeriod.SequenceNumber
						LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock = each.FinanceCodeBlock
						LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment = each.ProjectAssignment
						ProjectCount = Counter
	        			if (each.Project.SalaryCap entered)
	        				LocalSalaryCap = each.Project.SalaryCap
							if (each.Project.SalaryCapDate.ProjectStartDate)
								LocalSalaryCapDate = each.Project.ProjectDateRange.BeginDate
							else
								LocalSalaryCapDate = each.DateRange.End
							LocalAmount = SalaryCapRel.MaximumAmount / each.ProjectLaborSchedule.SalaryDivisor
							LocalAmount *= each.ActualPercent
							LocalAmount *= each.DerivedLaborFTE
							round LocalAmount to nearest LocalRoundTo
							LaborDistributionTable.LaborDistribution[Counter].MaximumAmount = LocalAmount
	        		invoke UpdateRedistributionFields each
		        		invoked.PrmJournalizeGroup 	= LocalJournalizeGroup
					invoke Delete each.ProjectAssignmentLaborTransaction set		        		
					invoke CreateProjectEffortRecord each
			Exit Rules
				BypassStructureRelationEdit = false
				BypassActiveCodeBlockEdit = false
				ProcessNegatives = false
				include ProcessOriginalTransactionTable
				if (NegativesExist)
					ProcessNegatives = true
					include ProcessOriginalTransactionTable
				Counter = 1
				while (LaborDistributionTable.LaborDistribution[Counter].Project entered)
					LocalProject = LaborDistributionTable.LaborDistribution[Counter].Project
					LocalSequenceNumber = LaborDistributionTable.LaborDistribution[Counter].SequenceNumber
					if (LaborDistributionTable.LaborDistribution[Counter].ErrorMessage entered)
						invoke SetErrorMessage CappedLaborRel
							invoked.PrmErrorMessage	= LaborDistributionTable.LaborDistribution[Counter].ErrorMessage
					else
						invoke UpdateTotals CappedLaborRel
							invoked.PrmTransactionAmount		= LaborDistributionTable.LaborDistribution[Counter].TotalTransactionAmount
							invoked.PrmDistributedOverageAmount	= LaborDistributionTable.LaborDistribution[Counter].TotalDistributedOverage
							invoked.PrmFringeBurdenAmount		= LaborDistributionTable.LaborDistribution[Counter].TotalFringeBurden
							invoked.PrmHours					= LaborDistributionTable.LaborDistribution[Counter].TotalHours
					Counter += 1
				invoke Update ProjectEmployeeLaborPeriodRel
					invoked.Status				= 3
					invoked.Adjusted			= false
					invoked.JournalizeGroup 	= LocalJournalizeGroup
					invoked.LaborRedistributed	= true    						
				invoke InitiateJournalizeForRunGroup FinanceEnterpriseGroup in background
					invoked.PrmJournalizeGroup	= LocalJournalizeGroup			        		

		UpdateRedistributionFields is an Instance Action
			restricted
			Parameters
				PrmJournalizeGroup	is like JournalizeGroup
			Action Rules
        		Status 				= Status.Processed
        		JournalizeGroup 	= PrmJournalizeGroup
        		Adjusted			= false
        		PreviewAmount		= 0
        		PreviewBurdenAmount = 0
        		PreviewUnitsAmount	= 0
        		Capped				= false
        		OverageAmount		= 0
        		ErrorMessage		= blank
        		Redistributed		= true
				initialize TransactionAmount
				initialize DistributedOverageAmount
				initialize FringeBurdenAmount
				initialize Hours

		DistributeIndividualLabor is an Instance Action
			valid when (IsOkToDistribute)
			disable multiple instance selection
			completion message is "<DistributeIndividualLaborSubmittedMF>"
			Parameters
        		PrmAccountingEntity			is an AccountingEntity
        			default label is "AccountingEntity"
        		PrmAccountingEntityGroup	is an AccountingEntityGroup
        			default label is "AccountingEntityGroup"
        		PrmProjectLaborSchedule		is a ProjectLaborSchedule
        			default label is "LaborSchedule"
        		PrmProjectSchedulePeriod	is a ProjectSchedulePeriod
        			default label is "Period"
        		PrmPostingDate				is Date
        			default label is "PostingDate"
        		SelectionGroup				is a GLTransactionDetail group
        		FromAccountingEntity		is an AccountingEntity
				OffsetCodeBlock				is a FinanceCodeBlockOverage
					default label is "OverrideOffsetFinanceStructure"
				FringeOffsetCodeBlock		is a FinanceCodeBlockOverage
					default label is "OverrideFringeOffsetFinanceStructure"
				ProcessAll					is Boolean


			Parameter Rules
        		PrmAccountingEntity
        			required













				PrmProjectLaborSchedule
					required
					initial value is ProjectLaborSchedule
					default to ProjectLaborSchedule
					constraint (PrmProjectLaborSchedule.ProjectEffortSchedule entered)
						"EffortScheduleRequiredForLaborSchedule<PrmProjectLaborSchedule>"
				PrmProjectSchedulePeriod
					required
					initial value is LaborPeriod.Period
        		PrmPostingDate
        			required
        			default to current corporate date
					LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					if (PrmAccountingEntity entered)
						LocalAccountingEntity		= PrmAccountingEntity
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					else
						for each AccountingEntityGroupMemberRel
							LocalAccountingEntity		= each.AccountingEntity
							if (each.AccountingEntity.Status.Active)							
								if (SystemClosingControlRel exists
								and SystemClosingControlRel.Control)
									constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
										"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					if (FromAccountingEntity entered)
						LocalAccountingEntity = FromAccountingEntity
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
						if (OffsetCodeBlock.Project entered)
							LocalProject = OffsetCodeBlock.Project
							LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
							LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
							if (LocalProject.HasPeriodOfPerformance
							and ProjectPeriodOfPerformanceRel exists)
								LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
								LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
							constraint (PrmPostingDate within LocalDateRange)
								"PostingDate<PrmPostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
						if (FringeOffsetCodeBlock.Project entered)
							LocalProject = FringeOffsetCodeBlock.Project
							LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
							LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
							if (LocalProject.HasPeriodOfPerformance
							and ProjectPeriodOfPerformanceRel exists)
								LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
								LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
							constraint (PrmPostingDate within LocalDateRange)
								"PostingDate<PrmPostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
						for each AllPeriodLaborRel
							if (each.ActualPercent entered)
								LocalProject = each.Project
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								constraint (PrmPostingDate within LocalDateRange)
									"PostingDate<PrmPostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
				SelectionGroup
					initial value is PrmProjectLaborSchedule.DefaultSelectionGroup
					if (!ProcessAll)
						required
							"MustEnterSelectionGroupOrSelectProcessAll"
					else
						cannot be entered
							"MustEnterSelectionGroupOrSelectProcessAll"

			Action Rules
        		constraint (FinanceEnterpriseGroup.LaborDistributionUpgradeComplete)
        			"<UpgradeIncompleteMF>"
				invoke DistributeAllLabor
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmEmployee				  = Employee
					invoked.PrmAccountingEntity		  = PrmAccountingEntity
					invoked.PrmAccountingEntityGroup  = PrmAccountingEntityGroup
					invoked.PrmProjectLaborSchedule	  = ProjectLaborSchedule
					invoked.PrmProjectSchedulePeriod  = PrmProjectSchedulePeriod
					invoked.PrmPostingDate			  = PrmPostingDate
					invoked.SelectionGroup			  = SelectionGroup
					invoked.FromAccountingEntity	  = FromAccountingEntity
					invoked.OffsetCodeBlock			  = OffsetCodeBlock
					invoked.FringeOffsetCodeBlock	  = FringeOffsetCodeBlock
					invoked.ProcessAll				  = ProcessAll

				
        DistributeAllLabor is a Set Action
        	restricted
        	Parameters
        		PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
        			default label is "FinanceEnterpriseGroup"
        		EmployeeGroup				is an Employee group
        		PrmEmployee					is a ProjectEmployee
        			default label is "Employee"
        		PrmAccountingEntity			is an AccountingEntity
        			default label is "AccountingEntity"
        		PrmAccountingEntityGroup	is an AccountingEntityGroup
        			default label is "AccountingEntityGroup"
        		PrmProjectLaborSchedule		is a ProjectLaborSchedule
        			default label is "LaborSchedule"
        		PrmProjectSchedulePeriod	is a ProjectSchedulePeriod
        			default label is "Period"
        		PrmPostingDate				is Date
        			default label is "PostingDate"
        		SelectionGroup				is a GLTransactionDetail group
        		FromAccountingEntity		is an AccountingEntity
				OffsetCodeBlock				is a FinanceCodeBlockOverage
					default label is "OverrideOffsetFinanceStructure"
				FringeOffsetCodeBlock		is a FinanceCodeBlockOverage
					default label is "OverrideFringeOffsetFinanceStructure"
				ProcessAll					is Boolean


        	Parameter Rules
        		PrmFinanceEnterpriseGroup
        			required
	        		constraint (PrmFinanceEnterpriseGroup.LaborDistributionUpgradeComplete)
	        			"<UpgradeIncompleteMF>"
        		PrmEmployee
        			constraint (EmployeeGroup not entered)
        				"CannotChooseBothEmployeeGroupAndEmployee"
        		PrmAccountingEntity

        			if (PrmAccountingEntityGroup entered)
	        			cannot be entered
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"
	        		else
	        			required
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	        			
        		PrmAccountingEntityGroup
        			if (PrmAccountingEntity entered)
	        			cannot be entered
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	        			
	        		else
	        			required
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	        			
				PrmProjectLaborSchedule
					required
					initial value is PrmEmployee.ProjectLaborSchedule
					constraint (PrmProjectLaborSchedule.ProjectEffortSchedule entered)
						"EffortScheduleRequiredForLaborSchedule<PrmProjectLaborSchedule>"
				PrmProjectSchedulePeriod
					required
        		PrmPostingDate
        			required
        			default to current corporate date
					LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
					LocalAccountingEntityGroup	= PrmAccountingEntityGroup
					if (PrmAccountingEntity entered)
						LocalAccountingEntity		= PrmAccountingEntity
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					else
						for each AccountingEntityGroupMemberRel
							LocalAccountingEntity		= each.AccountingEntity
							if (each.AccountingEntity.Status.Active)							
								if (SystemClosingControlRel exists
								and SystemClosingControlRel.Control)
									constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
										"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					if (FromAccountingEntity entered)
						LocalAccountingEntity = FromAccountingEntity
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinSystemClosingControlValidDateRange"
				SelectionGroup
					initial value is PrmProjectLaborSchedule.DefaultSelectionGroup
					if (!ProcessAll)
						required
							"MustEnterSelectionGroupOrSelectProcessAll"
					else
						cannot be entered
							"MustEnterSelectionGroupOrSelectProcessAll"
						
        	Local Fields
        		LaborDistributionTable
					do not save in checkpoint
        		Counter					is Numeric size 3
        		ProjectCount			is Numeric size 3
        		LastActualCounter		is Numeric size 3
        		TotalPercent			is Percent size 6.3
        		TotalTransAmount		is a CurrencyAmount
				TotalOverageAmount		is a CurrencyAmount        		
        		TotalUnitsAmount		is a UnitsAmount
        		LocalJournalizeGroup	is a JournalizeGroup
        		MaxExceeded				is Boolean
				ErrorFound				is Boolean
				OverageErrorFound		is Boolean
				BurdenErrorFound		is Boolean
				LocalErrorMessage		is Text
				LocalSetToApproved		is Boolean
				LocalBlankJournalizeGroup is Boolean
				LocalNoTransactionsFound  is Boolean
				AnyErrorMessage			is Boolean
				AnyCreated				is Boolean
				AnyFound				is Boolean
				LocalGLTransactionDetail	is a GLTransactionDetail view
				TransactionTable		is an OriginalTransactionTable
					do not save in checkpoint
        		Counter2				is Numeric size 2
        		LocalTransaction		is a GLTransactionDetail
        		NegativesExist			is Boolean
        		LocalEmployeeAmount		is a CurrencyAmount
        		LocalTransPercent		is Decimal size 7.4
        		LocalMax				is a CurrencyAmount
        		ProcessNegatives		is Boolean
				OffsetErrorFound		is Boolean
				CommitNow				is Boolean
				TransactionProcessed	is Boolean
				TransactionCount		is Numeric size 3
				LocalFullyDistributed	is Boolean
				LocalEffortEndDate		is Date
				NewEffortPeriod			is like ProjectEffortPeriod

			Sort Order
				FinanceEnterpriseGroup
				ProjectLaborSchedule
				LaborPeriod.Period
				Status
				Employee
				Project
				LaborPeriod.SequenceNumber
				        	
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    ProjectLaborSchedule = PrmProjectLaborSchedule
        		and    LaborPeriod.Period = PrmProjectSchedulePeriod
        		and    Status.Approved        		
        		and   !Employee.ExcludeFromLabor        		
        		and   (EmployeeRel.Employee within EmployeeGroup
        		or     EmployeeGroup not entered)
        		and   (Employee = PrmEmployee
        		or     PrmEmployee not entered))
        		
			Action Rules
				Set Rules
					Entrance Rules
						LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
			            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
						LocalJournalizeGroup 		= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup						
						LocalEffortEndDate			= PrmProjectLaborSchedule.ProjectEffortSchedule.last ProjectEffortPeriod set.DateRange.End
						if (PrmProjectSchedulePeriod.DateRange.End > LocalEffortEndDate)
							invoke CreatePeriodDates PrmProjectLaborSchedule.ProjectEffortSchedule
								invoked.PeriodThruDate = PrmProjectSchedulePeriod.DateRange.End
						NewEffortPeriod = first PrmProjectSchedulePeriod.ProjectEffortPeriodRel.ProjectEffortPeriod
					Exit Rules
						invoke InitiateJournalizeForRunGroup PrmFinanceEnterpriseGroup in background
							invoked.PrmJournalizeGroup	= LocalJournalizeGroup

				Employee Set Rules
					Entrance Rules
						initialize LaborDistributionTable
						initialize Counter
						initialize ProjectCount
						initialize LastActualCounter
						initialize TotalPercent
						initialize MaxExceeded
						initialize LocalEmployeeAmount
					Exit Rules
						CommitNow = true
						LocalAccountingEntityGroup = PrmAccountingEntityGroup
						LocalOverageOption		   = PrmFinanceEnterpriseGroup.EnterpriseProjectStructure.OverageAccountDefaultOption
						initialize TransactionTable
						initialize TransactionCount
						NegativesExist = false	
		    			for each GLTransactionDetailRel
		    				if (TransactionCount >= 99)
    							end for each
    						LocalAccountingEntity = each.AccountingEntity
		    				if ((LocalAccountingEntity = PrmAccountingEntity
		    				or   AccountingEntityGroupMemberOTOActiveRel exists)
		    				and (each within SelectionGroup
		    				or   SelectionGroup not entered))
	    						TransactionCount += 1
								LocalEmployeeAmount += each.TransactionAmount
								Counter = 1
								while (Counter < 99)
									if (TransactionTable.GLTransactionDetail[Counter] not entered)
										TransactionTable.GLTransactionDetail[Counter] = each.GLTransactionDetail
										if (each.TransactionAmount < 0)
											NegativesExist = true
										end while
									Counter += 1							

						ProcessNegatives = false
						include ProcessTransactionTable
						if (NegativesExist)
							ProcessNegatives = true
							include ProcessTransactionTable

						LocalSetToApproved			= false
						LocalBlankJournalizeGroup	= false
						LocalNoTransactionsFound 	= false
						ResetJournalizeGroup		= LocalJournalizeGroup
						AnyErrorMessage				= false
						AnyCreated					= false
						AnyFound					= false
						LocalFullyDistributed		= true
    					Counter = 1
    					while (LaborDistributionTable.LaborDistribution[Counter].Project entered)
    						if (LaborDistributionTable.LaborDistribution[Counter].ErrorMessage entered)
    							AnyErrorMessage = true
    						if (LaborDistributionTable.LaborDistribution[Counter].Created)
    							AnyCreated = true
    						if (LaborDistributionTable.LaborDistribution[Counter].Found)
    							AnyFound = true
    						if  (LaborDistributionTable.LaborDistribution[Counter].ActualPercent entered
    						and !LaborDistributionTable.LaborDistribution[Counter].Created)
    							LocalFullyDistributed = false
							Counter += 1
						if (!AnyCreated)
							LocalFullyDistributed = false
						if (AnyErrorMessage)
							if (AnyCreated)
								LocalBlankJournalizeGroup = false
							else
								LocalSetToApproved = true
								LocalBlankJournalizeGroup = true
								if (AnyFound)
									LocalNoTransactionsFound = false
								else
									LocalNoTransactionsFound = true
						else
							if (AnyCreated)
								LocalBlankJournalizeGroup = false
							else
								LocalSetToApproved = true
								LocalBlankJournalizeGroup = true
								if (AnyFound)
									LocalNoTransactionsFound = false
								else
									LocalNoTransactionsFound = true
    					Counter = 1
    					while (LaborDistributionTable.LaborDistribution[Counter].Project entered)
							LocalProject = LaborDistributionTable.LaborDistribution[Counter].Project
							LocalSequenceNumber = LaborDistributionTable.LaborDistribution[Counter].SequenceNumber
							invoke ResetRecord LocalCappedLaborRel
								invoked.MaxExceeded 				= LaborDistributionTable.LaborDistribution[Counter].MaxExceeded
								invoked.SetToApproved  				= LocalSetToApproved
								invoked.BlankJournalizeGroup 		= LocalBlankJournalizeGroup
								invoked.PrmErrorMessage				= LaborDistributionTable.LaborDistribution[Counter].ErrorMessage
								invoked.PrmNoTransactionsFound		= LocalNoTransactionsFound
								invoked.PrmOverageAmount			= LaborDistributionTable.LaborDistribution[Counter].OverageAmount
								invoked.PrmTransactionAmount		= LaborDistributionTable.LaborDistribution[Counter].TotalTransactionAmount
								invoked.PrmDistributedOverageAmount	= LaborDistributionTable.LaborDistribution[Counter].TotalDistributedOverage
								invoked.PrmFringeBurdenAmount		= LaborDistributionTable.LaborDistribution[Counter].TotalFringeBurden
								invoked.PrmHours					= LaborDistributionTable.LaborDistribution[Counter].TotalHours
								invoked.PrmJournalizeGroup		    = LocalJournalizeGroup
							if (AnyCreated)
								invoke DeleteCommitmentAfterDistributeLabor LocalCappedLaborRel
    						Counter += 1
						invoke Update ProjectEmployeeLaborPeriodRel
							if (LocalSetToApproved)
								invoked.Status			= 2
							else
			        			invoked.Status 			= 3
			        		if (LocalBlankJournalizeGroup)
			        			invoked.JournalizeGroup = blank
			        		else
			        			invoked.JournalizeGroup	= LocalJournalizeGroup
    		    			invoked.NoTransactionsFound	= LocalNoTransactionsFound
        					invoked.Adjusted			= false
        					invoked.FullyDistributed	= LocalFullyDistributed
						
				LaborPeriod.SequenceNumber Set Rules
					Entrance Rules
						LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						LocalEmployee = Employee
						LocalProjectLaborSchedule = ProjectLaborSchedule
						LocalPeriod = LaborPeriod.Period
						LocalDateRange 	= DateRange

	        	Instance Rules
					if (CommitNow)
						commit transaction
						CommitNow = false
	        		if (Counter < 199)
						LocalRoundTo = DerivedRoundTo
						Counter += 1
						LaborDistributionTable.LaborDistribution[Counter].Project = Project
						LaborDistributionTable.LaborDistribution[Counter].SequenceNumber = LaborPeriod.SequenceNumber
						LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock = FinanceCodeBlock
						LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment = ProjectAssignment
		        		LaborDistributionTable.LaborDistribution[Counter].ActualPercent = ActualPercent
						ProjectCount = Counter
	        			if (Project.SalaryCap entered)
	        				LocalFinanceEnterpriseGroup = FinanceEnterpriseGroup
	        				LocalSalaryCap = Project.SalaryCap
							if (Project.SalaryCapDate.ProjectStartDate)
								LocalSalaryCapDate = Project.ProjectDateRange.BeginDate
							else
								LocalSalaryCapDate = PrmProjectSchedulePeriod.DateRange.End
							LocalAmount = SalaryCapRel.MaximumAmount / PrmProjectLaborSchedule.SalaryDivisor
							LocalAmount *= ActualPercent
							LocalAmount *= DerivedLaborFTE
							round LocalAmount to nearest LocalRoundTo
							LaborDistributionTable.LaborDistribution[Counter].MaximumAmount = LocalAmount
		        		TotalPercent	   += ActualPercent
		        		if (ActualPercent entered)
		        			LastActualCounter = Counter
					LocalEffortPeriod = NewEffortPeriod
	        		if (ProjectAssignmentEffortRel not exists)
	        			invoke Create ProjectAssignmentEffort
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Project					= Project
							invoked.Employee				= Employee
							invoked.ProjectAssignment		= ProjectAssignment
							invoked.ProjectEffortPeriod		= LocalEffortPeriod
							invoked.ProjectEffortSchedule	= ProjectLaborSchedule.ProjectEffortSchedule
							invoked.ProjectLaborSchedule	= ProjectLaborSchedule
							if (ProjectLaborSchedule.ProjectEffortSchedule.Frequency = ProjectLaborSchedule.Frequency)
								invoked.EffortPercent		= ActualPercent

		ValidateIndividualLaborJournalEntries is an Instance Action
			valid when (IsOkToValidate)
			disable multiple instance selection
			Parameters
        		PrmAccountingEntity			is an AccountingEntity
        			default label is "AccountingEntity"
        		PrmAccountingEntityGroup	is an AccountingEntityGroup
        			default label is "AccountingEntityGroup"
        		PrmProjectLaborSchedule		is a ProjectLaborSchedule
        			default label is "LaborSchedule"
        		PrmProjectSchedulePeriod	is a ProjectSchedulePeriod
        			default label is "Period"
        		PrmPostingDate				is Date
        			default label is "PostingDate"
        		SelectionGroup				is a GLTransactionDetail group
        		FromAccountingEntity		is an AccountingEntity
				OffsetCodeBlock				is a FinanceCodeBlockOverage
					default label is "OverrideOffsetFinanceStructure"
				FringeOffsetCodeBlock		is a FinanceCodeBlockOverage
					default label is "OverrideFringeOffsetFinanceStructure"
				ProcessAll					is Boolean
			Parameter Rules
        		PrmAccountingEntity
        			required
				PrmProjectLaborSchedule
					required
					initial value is ProjectLaborSchedule
					default to ProjectLaborSchedule
					constraint (PrmProjectLaborSchedule.ProjectEffortSchedule entered)
						"EffortScheduleRequiredForLaborSchedule<PrmProjectLaborSchedule>"
				PrmProjectSchedulePeriod
					required
					initial value is LaborPeriod.Period
        		PrmPostingDate
        			required
        			default to current corporate date
					LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					if (PrmAccountingEntity entered)
						LocalAccountingEntity		= PrmAccountingEntity
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					else
						for each AccountingEntityGroupMemberRel
							LocalAccountingEntity		= each.AccountingEntity
							if (each.AccountingEntity.Status.Active)							
								if (SystemClosingControlRel exists
								and SystemClosingControlRel.Control)
									constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
										"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					if (FromAccountingEntity entered)
						LocalAccountingEntity = FromAccountingEntity
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
						if (OffsetCodeBlock.Project entered)
							LocalProject = OffsetCodeBlock.Project
							LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
							LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
							if (LocalProject.HasPeriodOfPerformance
							and ProjectPeriodOfPerformanceRel exists)
								LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
								LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
							constraint (PrmPostingDate within LocalDateRange)
								"PostingDate<PrmPostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
						if (FringeOffsetCodeBlock.Project entered)
							LocalProject = FringeOffsetCodeBlock.Project
							LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
							LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
							if (LocalProject.HasPeriodOfPerformance
							and ProjectPeriodOfPerformanceRel exists)
								LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
								LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
							constraint (PrmPostingDate within LocalDateRange)
								"PostingDate<PrmPostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
						for each AllPeriodLaborRel
							if (each.ActualPercent entered)
								LocalProject = each.Project
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								constraint (PrmPostingDate within LocalDateRange)
									"PostingDate<PrmPostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
				SelectionGroup
					initial value is PrmProjectLaborSchedule.DefaultSelectionGroup
					if (!ProcessAll)
						required
							"MustEnterSelectionGroupOrSelectProcessAll"
					else
						cannot be entered
							"MustEnterSelectionGroupOrSelectProcessAll"

			Action Rules
				invoke ValidateLaborJournalEntries
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmEmployee				  = Employee
					invoked.PrmAccountingEntity		  = PrmAccountingEntity
					invoked.PrmAccountingEntityGroup  = PrmAccountingEntityGroup
					invoked.PrmProjectLaborSchedule	  = ProjectLaborSchedule
					invoked.PrmProjectSchedulePeriod  = PrmProjectSchedulePeriod
					invoked.PrmPostingDate			  = PrmPostingDate
					invoked.SelectionGroup			  = SelectionGroup
					invoked.FromAccountingEntity	  = FromAccountingEntity
					invoked.OffsetCodeBlock			  = OffsetCodeBlock
					invoked.FringeOffsetCodeBlock	  = FringeOffsetCodeBlock
					invoked.ProcessAll				  = ProcessAll

        ValidateLaborJournalEntries is a Set Action
        	restricted
        	Parameters
        		PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
        			default label is "FinanceEnterpriseGroup"
        		EmployeeGroup				is an Employee group
        		PrmEmployee					is a ProjectEmployee
        			default label is "Employee"
        		PrmAccountingEntity			is an AccountingEntity
        			default label is "AccountingEntity"
        		PrmAccountingEntityGroup	is an AccountingEntityGroup
        			default label is "AccountingEntityGroup"
        		PrmProjectLaborSchedule		is a ProjectLaborSchedule
        			default label is "LaborSchedule"
        		PrmProjectSchedulePeriod	is a ProjectSchedulePeriod
        			default label is "Period"
        		PrmPostingDate				is Date
        			default label is "PostingDate"
        		SelectionGroup				is a GLTransactionDetail group
        		FromAccountingEntity		is an AccountingEntity
				OffsetCodeBlock				is a FinanceCodeBlockOverage
					default label is "OverrideOffsetFinanceStructure"
				FringeOffsetCodeBlock		is a FinanceCodeBlockOverage
					default label is "OverrideFringeOffsetFinanceStructure"
				ProcessAll					is Boolean
        	Parameter Rules
        		PrmFinanceEnterpriseGroup
        			required
        		PrmEmployee
        			constraint (EmployeeGroup not entered)
        				"CannotChooseBothEmployeeGroupAndEmployee"
        		PrmAccountingEntity

        			if (PrmAccountingEntityGroup entered)
	        			cannot be entered
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"
	        		else
	        			required
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	        			
        		PrmAccountingEntityGroup
        			if (PrmAccountingEntity entered)
	        			cannot be entered
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	        			
	        		else
	        			required
	        				"MustEnterEitherAccountingEntityOrAccountingEntityGroup"	        			
				PrmProjectLaborSchedule
					required
					initial value is PrmEmployee.ProjectLaborSchedule
					constraint (PrmProjectLaborSchedule.ProjectEffortSchedule entered)
						"EffortScheduleRequiredForLaborSchedule<PrmProjectLaborSchedule>"
				PrmProjectSchedulePeriod
					required
        		PrmPostingDate
        			required
        			default to current corporate date
					LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
					LocalAccountingEntityGroup	= PrmAccountingEntityGroup
					if (PrmAccountingEntity entered)
						LocalAccountingEntity		= PrmAccountingEntity
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					else
						for each AccountingEntityGroupMemberRel
							LocalAccountingEntity		= each.AccountingEntity
							if (each.AccountingEntity.Status.Active)							
								if (SystemClosingControlRel exists
								and SystemClosingControlRel.Control)
									constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
										"PostingDateMustBeWithinSystemClosingControlValidDateRange"
					if (FromAccountingEntity entered)
						LocalAccountingEntity = FromAccountingEntity
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control)
							constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
								"PostingDateMustBeWithinSystemClosingControlValidDateRange"
				SelectionGroup
					initial value is PrmProjectLaborSchedule.DefaultSelectionGroup
					if (!ProcessAll)
						required
							"MustEnterSelectionGroupOrSelectProcessAll"
					else
						cannot be entered
							"MustEnterSelectionGroupOrSelectProcessAll"

        	Local Fields
        		LaborDistributionTable
					do not save in checkpoint
        		Counter					is Numeric size 4
        		ProjectCount			is Numeric size 3
        		LastActualCounter		is Numeric size 3
        		TotalPercent			is Percent size 6.3
        		TotalTransAmount		is a CurrencyAmount
				TotalOverageAmount		is a CurrencyAmount        		
        		TotalUnitsAmount		is a UnitsAmount
        		MaxExceeded				is Boolean
				ErrorFound				is Boolean
				LocalErrorMessage		is Text
				TransactionTable		is an OriginalTransactionTable
					do not save in checkpoint
        		Counter2				is Numeric size 2
        		LocalTransaction		is a GLTransactionDetail
        		NegativesExist			is Boolean
        		LocalEmployeeAmount		is a CurrencyAmount
        		LocalTransPercent		is Decimal size 7.4
        		LocalMax				is a CurrencyAmount
        		ProcessNegatives		is Boolean
				CommitNow				is Boolean
				TransactionProcessed	is Boolean
				TranCount				is Numeric size 2
				ProjectStructureValidationTestView		is a ProjectStructureValidationTest view
				ProjectStructureValidationResultView	is a ProjectStructureValidationResult view
				ErrorCounter			is like SequenceNumber
				LineCount				is like SequenceNumber
				TransactionCount		is Numeric size 3

			Sort Order
				FinanceEnterpriseGroup
				ProjectLaborSchedule
				LaborPeriod.Period
				Status
				Employee
				Project
				LaborPeriod.SequenceNumber
				        	
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    ProjectLaborSchedule = PrmProjectLaborSchedule
        		and    LaborPeriod.Period = PrmProjectSchedulePeriod
        		and    Status.Approved        		
        		and   !Employee.ExcludeFromLabor        		
        		and   (EmployeeRel.Employee within EmployeeGroup
        		or     EmployeeGroup not entered)
        		and   (Employee = PrmEmployee
        		or     PrmEmployee not entered))
        		
			Action Rules
				Set Rules
					Entrance Rules
						invoke Create ProjectStructureValidationResult
							assign result to ProjectStructureValidationResultView
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.RunTime				   	= current timestamp
							invoked.TestType				= 3
							invoked.Schedule				= PrmProjectLaborSchedule
							invoked.Period					= PrmProjectSchedulePeriod
					Exit Rules
						LocalFinanceEnterpriseGroup			  = PrmFinanceEnterpriseGroup
						LocalProjectStructureValidationResult = ProjectStructureValidationResultView.ProjectStructureValidationResult
						for each ProjectStructureValidationLineRel
							initialize ErrorFound
							invoke Create ProjectStructureValidationTest
								assign result to ProjectStructureValidationTestView
								resume on error
									ErrorFound = true
									LocalErrorMessage = error message
								invoked.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
								invoked.PostingDate				= PrmPostingDate
								invoked.AccountingEntity		= each.ValidationCodeBlock.AccountingEntity
								invoked.FinanceCodeBlock		= each.ValidationCodeBlock.FinanceCodeBlock
								invoked.System					= "PR"
								invoked.TransactionDate			= PrmPostingDate
								invoked.BypassUnitAndAmountEdit	= true
								invoked.ValidateProjectFinanceStructure = true
							if (ErrorFound)
								ErrorCounter += 1
								invoke Create ProjectStructureValidationError
									fill in fields from ProjectStructureValidationResultView.ProjectStructureValidationResult
									invoked.Error				= ErrorCounter
									invoked.ErrorMessage 		= LocalErrorMessage
									invoked.FinanceCodeBlock	= each.ValidationCodeBlock.FinanceCodeBlock
							else
								invoke Purge ProjectStructureValidationTestView.ProjectStructureValidationTest
							invoke Purge each
							if (TranCount = 50)
								commit transaction
								initialize TranCount
							TranCount += 1

				Employee Set Rules
					Entrance Rules
						initialize LaborDistributionTable
						initialize Counter
						initialize ProjectCount
						initialize LastActualCounter
						initialize TotalPercent
						initialize MaxExceeded
						initialize LocalEmployeeAmount
					Exit Rules
						CommitNow = true
						LocalAccountingEntityGroup = PrmAccountingEntityGroup
						LocalOverageOption		   = PrmFinanceEnterpriseGroup.EnterpriseProjectStructure.OverageAccountDefaultOption
						initialize TransactionTable
						initialize TransactionCount
						NegativesExist = false	
		    			for each GLTransactionDetailRel
		    				if (TransactionCount >= 99)
    							end for each
		    				LocalAccountingEntity = each.AccountingEntity
		    				if ((LocalAccountingEntity = PrmAccountingEntity
		    				or   AccountingEntityGroupMemberOTOActiveRel exists)
		    				and (each within SelectionGroup
		    				or   SelectionGroup not entered))
	    						TransactionCount += 1
								LocalEmployeeAmount += each.TransactionAmount
								Counter = 1
								while (Counter < 99)
									if (TransactionTable.GLTransactionDetail[Counter] not entered)
										TransactionTable.GLTransactionDetail[Counter] = each.GLTransactionDetail
										if (each.TransactionAmount < 0)
											NegativesExist = true
										end while
									Counter += 1							

						ProcessNegatives = false
						include ValidateTransactionTable
						if (NegativesExist)
							ProcessNegatives = true
							include ValidateTransactionTable

				LaborPeriod.SequenceNumber Set Rules
					Entrance Rules
						LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						LocalEmployee = Employee
						LocalProjectLaborSchedule = ProjectLaborSchedule
						LocalPeriod = LaborPeriod.Period
						LocalDateRange 	= DateRange

	        	Instance Rules
					if (CommitNow)
						commit transaction
						CommitNow = false
	        		if (Counter < 199)
						LocalRoundTo = DerivedRoundTo
						Counter += 1
						LaborDistributionTable.LaborDistribution[Counter].Project = Project
						LaborDistributionTable.LaborDistribution[Counter].SequenceNumber = LaborPeriod.SequenceNumber
						LaborDistributionTable.LaborDistribution[Counter].FinanceCodeBlock = FinanceCodeBlock
						LaborDistributionTable.LaborDistribution[Counter].ProjectAssignment = ProjectAssignment
		        		LaborDistributionTable.LaborDistribution[Counter].ActualPercent = ActualPercent
						ProjectCount = Counter
	        			if (Project.SalaryCap entered)
	        				LocalFinanceEnterpriseGroup = FinanceEnterpriseGroup
	        				LocalSalaryCap = Project.SalaryCap
							if (Project.SalaryCapDate.ProjectStartDate)
								LocalSalaryCapDate = Project.ProjectDateRange.BeginDate
							else
								LocalSalaryCapDate = PrmProjectSchedulePeriod.DateRange.End
							LocalAmount = SalaryCapRel.MaximumAmount / PrmProjectLaborSchedule.SalaryDivisor
							LocalAmount *= ActualPercent
							LocalAmount *= DerivedLaborFTE
							round LocalAmount to nearest LocalRoundTo
							LaborDistributionTable.LaborDistribution[Counter].MaximumAmount = LocalAmount
		        		TotalPercent	   += ActualPercent
		        		if (ActualPercent entered)
		        			LastActualCounter = Counter

		ResetRecord is an Instance Action
			restricted
			Parameters
				MaxExceeded					is Boolean
				SetToApproved				is Boolean
				BlankJournalizeGroup		is Boolean
				PrmErrorMessage				is Text
				PrmNoTransactionsFound		is Boolean
				PrmOverageAmount			is like InternationalAmount
				PrmTransactionAmount		is like InternationalAmount
				PrmDistributedOverageAmount	is like InternationalAmount
				PrmFringeBurdenAmount		is like InternationalAmount
				PrmHours					is like UnitsAmount
				PrmJournalizeGroup			is like JournalizeGroup
			Action Rules
				if (MaxExceeded)
					Capped 		  = true
					OverageAmount = PrmOverageAmount
				if (SetToApproved)
					Status = 2
					initialize CertifiedPercent
					initialize TransactionAmount
					initialize DistributedOverageAmount
					initialize FringeBurdenAmount
					initialize Hours
					invoke Delete ProjectAssignmentLaborTransaction set
				else
					Status					 = 3
					TransactionAmount		 = PrmTransactionAmount
					DistributedOverageAmount = PrmDistributedOverageAmount
					FringeBurdenAmount		 = PrmFringeBurdenAmount
					Hours					 = PrmHours
				if (BlankJournalizeGroup)
					initialize JournalizeGroup
				else
					JournalizeGroup			 = PrmJournalizeGroup
				ErrorMessage		 		 = PrmErrorMessage
				NoTransactionsFound			 = PrmNoTransactionsFound
        		Adjusted					 = false

		UpdateTotals is an Instance Action
			restricted
			Parameters
				PrmTransactionAmount		is like InternationalAmount
				PrmDistributedOverageAmount	is like InternationalAmount
				PrmFringeBurdenAmount		is like InternationalAmount
				PrmHours					is like UnitsAmount
			Action Rules
				TransactionAmount			= PrmTransactionAmount
				DistributedOverageAmount	= PrmDistributedOverageAmount
				FringeBurdenAmount			= PrmFringeBurdenAmount
				Hours						= PrmHours

		DeleteErrorMessage is an Instance Action
			valid when (ErrorMessageEntered)
			Action Rules
				initialize ErrorMessage
				
		SetErrorMessage is an Instance Action
			restricted
			Parameters
				PrmErrorMessage	is Text
			Action Rules
				ErrorMessage	= PrmErrorMessage
				
		ChangeZeroLaborToEntered is an Instance Action
			valid when (IsOkToReverseZero)
			disable multiple instance selection
			Action Rules
				invoke ChangeZeroLaborToEntered ProjectEmployeeLaborPeriodRel

		ReverseAllLabor is a Set Action
			restricted
        	Parameters
        		PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
        			default label is "FinanceEnterpriseGroup"
        		EmployeeGroup				is an Employee group
        		PrmProjectLaborSchedule		is a ProjectLaborSchedule
        			default label is "LaborSchedule"
        		PrmProjectSchedulePeriod	is a ProjectSchedulePeriod
        			default label is "Period"
        		PrmPostingDate				is Date
        			default label is "PostingDate"
        		ResetIndirectBurdenStatus	is Boolean
        	Parameter Rules
        		PrmFinanceEnterpriseGroup
        			required
	        		constraint (PrmFinanceEnterpriseGroup.LaborDistributionUpgradeComplete)
	        			"<UpgradeIncompleteMF>"
				PrmProjectLaborSchedule
					required
					constraint (PrmProjectLaborSchedule.ProjectEffortSchedule entered)
						"EffortScheduleRequiredForLaborSchedule<PrmProjectLaborSchedule>"
				PrmProjectSchedulePeriod
					required
        		PrmPostingDate
        			required
        			default to current corporate date
				ResetIndirectBurdenStatus	
					initial value is true
			Sort Order
				FinanceEnterpriseGroup
				ProjectLaborSchedule
				LaborPeriod.Period
				Status
				Employee
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    ProjectLaborSchedule = PrmProjectLaborSchedule
        		and    LaborPeriod.Period = PrmProjectSchedulePeriod
        		and    IsOkToReverse
        		and   !Employee.ExcludeFromLabor        		
        		and   (EmployeeRel.Employee within EmployeeGroup
        		or     EmployeeGroup not entered))
			Local Fields
				LocalIsOkToReverse		is Boolean
        		LocalJournalizeGroup	is a JournalizeGroup
			Action Rules
				Employee Set Rules
					Exit Rules
						LocalIsOkToReverse = true
						LocalFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
						LocalAccountingEntity		= first DistributedGLTransactionDetailRel.OriginalLaborTransactionRel.AccountingEntity
						if (SystemClosingControlRel exists
						and SystemClosingControlRel.Control
						and PrmPostingDate not within SystemClosingControlRel.ValidEntryDate)
							LocalIsOkToReverse = false
						if (LocalIsOkToReverse
						and FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
							for each AllPeriodLaborRel
								if (each.ActualPercent entered)
									LocalProject = each.Project
									LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
									LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
									if (LocalProject.HasPeriodOfPerformance
									and ProjectPeriodOfPerformanceRel exists)
										LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
										LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
									if (PrmPostingDate not within LocalDateRange)
										LocalIsOkToReverse = false
						if (LocalIsOkToReverse)
				            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
							LocalJournalizeGroup 		= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
							BypassStructureRelationEdit = true
							BypassActiveCodeBlockEdit	= true
							for each DistributedGLTransactionDetailRel				        					
								invoke ReverseLaborDistribution each.OriginalLaborTransactionRel			        			
								invoke Released.Create GLTransactionDetail
									resume on error
									fill in fields from each
										except invoked.ReportCurrencyAmount
										except invoked.OriginatingTransaction
										except invoked.AutoReverse
									invoked.TransactionAmount	= each.TransactionAmount * -1
									invoked.JournalizeGroup		= LocalJournalizeGroup
									invoked.PostingDate			= PrmPostingDate
									invoked.UnitsAmount			= each.UnitsAmount * -1
									invoked.Billed				= 0
									invoked.RevenueRecognized	= 0
									invoked.Capitalize			= 0
									if (each.GeneralLedgerEvent = "PL"
									or  each.GeneralLedgerEvent = "PJ")
										invoked.GeneralLedgerEvent	= "LR"
									if (ResetIndirectBurdenStatus)
										invoked.IndirectBurden	= 0
							invoke ProcessReversals AllPeriodLaborRel
							invoke Update ProjectEmployeeLaborPeriodRel
								invoked.Status				= 2
								invoked.JournalizeGroup		= blank
								invoked.Adjusted			= false
								invoked.NoTransactionsFound	= false
								invoked.FullyDistributed	= false
							invoke InitiateJournalizeForRunGroup FinanceEnterpriseGroup in background
								invoked.PrmJournalizeGroup	= LocalJournalizeGroup

		ReverseLaborDistributions is an Instance Action
			valid when (IsOkToReverse)
			disable multiple instance selection
        	Parameters
        		PrmPostingDate				is Date
        			default label is "PostingDate"
        		ResetIndirectBurdenStatus	is Boolean
        	Parameter Rules							
        		PrmPostingDate
        			initial value is first DistributedGLTransactionDetailRel.PostingDate
        			required
        			default to current corporate date
					LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					LocalAccountingEntity		= first DistributedGLTransactionDetailRel.OriginalLaborTransactionRel.AccountingEntity
					if (SystemClosingControlRel exists
					and SystemClosingControlRel.Control)
						constraint (PrmPostingDate within SystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinSystemClosingControlValidDateRange"			
					if (FinanceEnterpriseGroup.ProjectDateEdit.PostingDate)
						for each AllPeriodLaborRel
							if (each.ActualPercent entered)
								LocalProject = each.Project
								LocalDateRange.Begin = LocalProject.ProjectDateRange.BeginDate
								LocalDateRange.End   = LocalProject.ProjectDateRange.EndDate
								if (LocalProject.HasPeriodOfPerformance
								and ProjectPeriodOfPerformanceRel exists)
									LocalDateRange.Begin = ProjectPeriodOfPerformanceRel.ProjectBeginDate
									LocalDateRange.End   = ProjectPeriodOfPerformanceRel.ProjectEndDate
								constraint (PrmPostingDate within LocalDateRange)
									"PostingDate<PrmPostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalProject>DateRangeOf<LocalDateRange.Begin>Through<LocalDateRange.End>"
				ResetIndirectBurdenStatus	
					initial value is true	
			Local Fields
        		LocalJournalizeGroup	is a JournalizeGroup				
			Action Rules
        		constraint (FinanceEnterpriseGroup.LaborDistributionUpgradeComplete)
        			"<UpgradeIncompleteMF>"
				confirmation required
					"ThisWillReversePreviouslyCalculatedLaborDistributions"
				LocalFinanceEnterpriseGroup	= FinanceEnterpriseGroup
	            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
				LocalJournalizeGroup 		= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
				BypassStructureRelationEdit = true
				BypassActiveCodeBlockEdit	= true
				for each DistributedGLTransactionDetailRel				        					
					invoke ReverseLaborDistribution each.OriginalLaborTransactionRel			        			
					invoke Released.Create GLTransactionDetail
						resume on error
						fill in fields from each
							except invoked.ReportCurrencyAmount
							except invoked.OriginatingTransaction
							except invoked.AutoReverse
						invoked.TransactionAmount	= each.TransactionAmount * -1
						invoked.JournalizeGroup		= LocalJournalizeGroup
						invoked.PostingDate			= PrmPostingDate
						invoked.UnitsAmount			= each.UnitsAmount * -1
						invoked.Billed				= 0
						invoked.RevenueRecognized	= 0
						invoked.Capitalize			= 0
						if (each.GeneralLedgerEvent = "PL"
						or  each.GeneralLedgerEvent = "PJ")
							invoked.GeneralLedgerEvent	= "LR"
						if (ResetIndirectBurdenStatus)
							invoked.IndirectBurden	= 0
						invoked.BypassActiveCodeBlockEdit = true
				commit transaction
				invoke ProcessReversals AllPeriodLaborRel
			Exit Rules
				invoke Update ProjectEmployeeLaborPeriodRel
					invoked.Status				= 2
					invoked.JournalizeGroup		= blank
					invoked.Adjusted			= false
					invoked.NoTransactionsFound	= false
					invoked.FullyDistributed	= false			
				invoke InitiateJournalizeForRunGroup FinanceEnterpriseGroup in background
					invoked.PrmJournalizeGroup	= LocalJournalizeGroup
			
		ProcessReversals is an Instance Action
			restricted
			Action Rules
				Status 				= Status.Approved
				JournalizeGroup 	= blank
				NoTransactionsFound	= false
				Capped				= false        		
				Adjusted			= false
				PreviewAmount		= blank
				PreviewBurdenAmount	= blank
				PreviewUnitsAmount	= blank
				CertifiedPercent	= blank
				ErrorMessage		= blank
				OverageAmount		= blank
				initialize TransactionAmount
				initialize DistributedOverageAmount
				initialize FringeBurdenAmount
				initialize Hours
				invoke Delete ProjectAssignmentLaborTransaction set

		UpdateSchedule is an Instance Action
			restricted
			Action Rules
				ProjectLaborSchedule	= Employee.ProjectLaborSchedule
				
		CreateAssignment is an Instance Action
			Parameters
				PrmProject 			is a Project
				PrmProjectRole 		is a ProjectRole
				PrmProjectDateRange is a ProjectDateRange
				PrmCommittedEffort	is Percent size 6.3
				PrmBillableRate		is Decimal size 22.6
				PrmFinanceCodeBlock	is a FinanceCodeBlockNoProject 
				PrmBurdenCode		is a ProjectBurdenCode
				PrmBurdenCodeBlock	is a FinanceCodeBlockNoProject 
			Action Rules
				invoke Create ProjectAssignment
					fill in fields from this instance
					invoked.Project				= PrmProject
					invoked.ProjectRole 		= PrmProjectRole
					invoked.ProjectDateRange	= PrmProjectDateRange
					invoked.CommittedEffort		= PrmCommittedEffort
					invoked.BillableRate		= PrmBillableRate
					invoked.FinanceCodeBlock	= PrmFinanceCodeBlock
					invoked.BurdenCode			= PrmBurdenCode
					invoked.BurdenCodeBlock		= PrmBurdenCodeBlock
					
		CreateEncumbranceIndividual is an Instance Action
    		valid when (IsOkForEmcumbrance)		
        	Parameters
				ProjectLaborSchedule      
	       			default label is "LaborSchedule"
        		FromPeriod					is a ProjectSchedulePeriod
				ThroughPeriod 			    is a ProjectSchedulePeriod
        	Parameter Rules
				ProjectLaborSchedule
					required
					initial value is Employee.ProjectLaborSchedule
				FromPeriod
					required
					initial value is LaborPeriod.Period
				ThroughPeriod
					default to FromPeriod
					if (ThroughPeriod entered)
						constraint (ThroughPeriod >= FromPeriod)
							"ThroughPeriodMustBeAfterFromPeriod"
			Action Rules
				invoke CreateAllEncumbrances in background
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
	    			invoked.PrmEmployee				  = Employee
				    invoked.PrmProjectLaborSchedule   = ProjectLaborSchedule
				    invoked.FromPeriod                = FromPeriod
				    invoked.ThroughPeriod             = ThroughPeriod
									    
		CreateAllEncumbrances is a Set Action
			restricted
        	Parameters
        		PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
        		EmployeeGroup				is an Employee group        			
        		PrmEmployee					is a ProjectEmployee
       				default label is "Employee"        		
        		PrmProjectLaborSchedule		is a ProjectLaborSchedule
        			default label is "LaborSchedule"        		
        		FromPeriod					is a ProjectSchedulePeriod        		
				ThroughPeriod 			    is a ProjectSchedulePeriod
        	Parameter Rules
        		PrmFinanceEnterpriseGroup
        			required
        		PrmEmployee
        			constraint (EmployeeGroup not entered)
        				"CannotChooseBothEmployeeGroupAndEmployee"
				PrmProjectLaborSchedule
					required
					initial value is PrmEmployee.ProjectLaborSchedule
				FromPeriod
					required
				ThroughPeriod
					default to FromPeriod
					if (ThroughPeriod entered)
						constraint (ThroughPeriod >= FromPeriod)
							"ThroughPeriodMustBeAfterFromPeriod"
			Sort Order
				FinanceEnterpriseGroup
				ProjectLaborSchedule
				LaborPeriod.Period
				Status
				Employee
        	Instance Selection
	            where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
	            and    ProjectLaborSchedule   = PrmProjectLaborSchedule   
	            and   (LaborPeriod.Period     >= FromPeriod
	            and    LaborPeriod.Period     <= ThroughPeriod)	
   	            and    GeneralLedgerSystemCodeGMRel.EncumbranceOption.Track
	            and    Employee.ProjectEmployee.SalaryEncumbrance
				and    !EncumbrancesExist
				and    Status.Entered
	            and    ((Employee.EncumbranceBasis.PlannedPercent
				and     PlannedPercent entered)
				or      (Employee.EncumbranceBasis.ActualPercent
				and      ActualPercent entered))
        		and   !Employee.ExcludeFromLabor	            
        		and   (EmployeeRel.Employee within EmployeeGroup
        		or     EmployeeGroup not entered)
        		and   (Employee = PrmEmployee
        		or     PrmEmployee not entered))
			Action Rules
	        	Instance Rules	
					LocalProject                   = Project
					LocalDateRange.End             = DateRange.End
					include CalculateSalaryCapEncumbrance
					TransientCurrencyTable         = FinanceEnterpriseGroup.CurrencyTable
					TransientAccountingEntity      = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.ToAccountingEntity
					TransientExchangeDate          = DateRange.End
					TransientPostingDate           = DateRange.End
					TransientFromCurrency          = Employee.ProjectEmployee.Currency
					TransientCurrencyAmount        = LocalEncumbranceAmount
					LocalPeriod                    = LaborPeriod.Period	        	
	        		LocalFinanceEnterpriseGroup    = PrmFinanceEnterpriseGroup
					LocalProjectLaborSchedule      = PrmProjectLaborSchedule	        			
					LocalFinanceClodeBlock         = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock
					LocalFinanceClodeBlock.Project = Project
					TransientReportCurrencyAmount.UseDerivedCalculations = true
					LocalForceCalculation	       = TransientReportCurrencyAmount.AssignToCurrency	
					LocalForceCalculation 	       = TransientReportCurrencyAmount.DerivedCalculationsComplete		
					invoke CreateProjectCommitment GLCommit
						invoked.HeaderUniqueID 		     = UniqueID
						invoked.AccountingEntity	     = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.ToAccountingEntity
						invoked.FinanceEnterpriseGroup   = FinanceEnterpriseGroup
						invoked.System				     = "GM"
						invoked.FinanceCodeBlock	     = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock
						invoked.FinanceCodeBlock.Project = Project
						invoked.CurrencyCode		   	 = Employee.ProjectEmployee.Currency
						invoked.TransactionAmount	     = LocalEncumbranceAmount
						invoked.ReportCurrencyAmount     = TransientReportCurrencyAmount     
						invoked.TransactionDate		     = DateRange.End
						invoked.OriginatingTransaction   = reference to this instance
						invoked.DimensionCode		     = Employee.ProjectEmployee.SalaryEncumbranceCodeBlock.DimensionCode
						invoked.TransBusinessObjectRef   = reference to this instance
					if (Employee.ProjectEmployee.FringeEncumbrance						
					and !Project.FringeBurden.No)
						LocalBurdenCode      = ProjectAssignment.BurdenCode
						LocalBurdenCodeBlock = ProjectAssignment.FringeEncumbranceCodeBlock
						if (LocalBurdenCode not entered)
							LocalBurdenCode      = Employee.ProjectEmployee.BurdenCode					
							LocalBurdenCodeBlock = Employee.ProjectEmployee.FringeEncumbranceCodeBlock
						if (LocalBurdenCode entered)
							if (LocalBurdenCodeBlock.ToAccountingEntity not entered)
								LocalBurdenCodeBlock = Employee.ProjectEmployee.FringeEncumbranceCodeBlock
							LocalExchangeDate              = DateRange.End
							if (ProjectBurdenCodeFringeRel.Rate entered)
								TransientCurrencyAmount        = LocalEncumbranceAmount * ProjectBurdenCodeFringeRel.Rate
								LocalFinanceClodeBlock         = LocalBurdenCodeBlock
								LocalFinanceClodeBlock.Project = Project
								initialize			     		 TransientReportCurrencyAmount						
								TransientReportCurrencyAmount.UseDerivedCalculations = true
								LocalForceCalculation	       = TransientReportCurrencyAmount.AssignToCurrency	
								LocalForceCalculation 	       = TransientReportCurrencyAmount.DerivedCalculationsComplete
								invoke CreateProjectCommitment GLCommit
									invoked.HeaderUniqueID 		     = UniqueID
									invoked.AccountingEntity	     = LocalBurdenCodeBlock.ToAccountingEntity
									invoked.FinanceEnterpriseGroup   = FinanceEnterpriseGroup
									invoked.System				     = "GM"
									invoked.FinanceCodeBlock	     = LocalBurdenCodeBlock
									invoked.FinanceCodeBlock.Project = Project
									invoked.CurrencyCode		   	 = Employee.ProjectEmployee.Currency
									invoked.TransactionAmount	     = TransientCurrencyAmount
									invoked.ReportCurrencyAmount     = TransientReportCurrencyAmount     
									invoked.TransactionDate		     = DateRange.End
									invoked.OriginatingTransaction   = reference to this instance
									invoked.DimensionCode		     = LocalBurdenCodeBlock.DimensionCode
									invoked.TransBusinessObjectRef   = reference to this instance
								
		DeleteEncumbranceIndividual is an Instance Action
			valid when (EncumbrancesExist)		
        	Parameters
				ProjectLaborSchedule        	
        		FromPeriod					is a ProjectSchedulePeriod
				ThroughPeriod 			    is a ProjectSchedulePeriod
        	Parameter Rules
				ProjectLaborSchedule
					required
					initial value is Employee.ProjectLaborSchedule
				FromPeriod
					required
					initial value is LaborPeriod.Period
				ThroughPeriod
					default to FromPeriod
					if (ThroughPeriod entered)
						constraint (ThroughPeriod >= FromPeriod)
							"ThroughPeriodMustBeAfterFromPeriod"
			Action Rules
				invoke DeleteAllEncumbrances in background
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
	    			invoked.PrmEmployee				  = Employee
				    invoked.PrmProjectLaborSchedule   = ProjectLaborSchedule
				    invoked.FromPeriod                = FromPeriod
				    invoked.ThroughPeriod             = ThroughPeriod
									    
		DeleteAllEncumbrances is a Set Action
			restricted
        	Parameters
        		PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
        		EmployeeGroup				is an Employee group        			
        		PrmEmployee					is a ProjectEmployee
        		PrmProjectLaborSchedule		is a ProjectLaborSchedule
        		FromPeriod					is a ProjectSchedulePeriod        		
				ThroughPeriod 			    is a ProjectSchedulePeriod
        	Parameter Rules
        		PrmFinanceEnterpriseGroup
        			required
        		PrmEmployee
        			constraint (EmployeeGroup not entered)
        				"CannotChooseBothEmployeeGroupAndEmployee"
				PrmProjectLaborSchedule
					required
					initial value is PrmEmployee.ProjectLaborSchedule
				FromPeriod
					required
				ThroughPeriod
					default to FromPeriod
					if (ThroughPeriod entered)
						constraint (ThroughPeriod >= FromPeriod)
							"ThroughPeriodMustBeAfterFromPeriod"
			Sort Order
				FinanceEnterpriseGroup
				ProjectLaborSchedule
				LaborPeriod.Period
				Employee
        	Instance Selection
	            where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
	            and    ProjectLaborSchedule   = PrmProjectLaborSchedule   
	            and   (LaborPeriod.Period     >= FromPeriod
	            and    LaborPeriod.Period     <= ThroughPeriod)	            
				and    EncumbrancesExist
        		and   !Employee.ExcludeFromLabor				
        		and   (EmployeeRel.Employee within EmployeeGroup
        		or     EmployeeGroup not entered)
        		and   (Employee = PrmEmployee
        		or     PrmEmployee not entered))
			Action Rules
	        	Instance Rules	
					invoke Purge GLCommitEncumbranceRel
										
		DeleteCommitmentAfterDistributeLabor is an Instance Action
			restricted			
			Action Rules								
				invoke Purge GLCommitEncumbranceRel

		CreateComments is an Instance Action
			Parameters
				PrmSubject	 			is a CommentName
		    	PrmComment				is Text
				PrmFrom					is Alpha size 230
				PrmCommentDate			is TimeStamp
				PrmDocumentURL			is URL	
				PrmAttachment			is an Attachment
			Parameter Rules
				PrmSubject
					required
		    	PrmComment
		    		required
				PrmFrom	
					initial value is actor
					required
				PrmCommentDate
		    		default to current timestamp
			Action Rules
				invoke Create ProjectAssignmentLaborComment
					fill in fields from this instance
					invoked.Subject				   = PrmSubject
			    	invoked.Comment                = PrmComment
					invoked.From                   = PrmFrom	
					invoked.CommentDate            = PrmCommentDate
					invoked.DocumentURL			   = PrmDocumentURL					
			    	invoked.Attachment             = PrmAttachment

		GenerateProjectAssignmentLaborTransactions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
        	Instance Selection
        		where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
        		and    LaborPeriod.SequenceNumber not entered)
        	Action Rules
        		Instance Rules
        			if (ProjectAssignmentLaborTransaction set not exists)
        				for each GLTransactionJournalizeGroupProjectRel
        					invoke Create ProjectAssignmentLaborTransaction
        						fill in fields from this instance
								invoked.GLTransactionDetail	= each.GLTransactionDetail



		GenerateProjectAssignmentEffortRecords is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
					for each PrmFinanceEnterpriseGroup.ProjectLaborSchedule set
						constraint (each.ProjectEffortSchedule entered)
							"EffortSchedulesMustBeAttachedToAllLaborSchedules;_PleaseRunThe_Generate_Effort_SchedulesAction"
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    LaborPeriod.SequenceNumber not entered
				and   (Status.Processed
				or     Status.Certified))
			Action Rules
				Instance Rules
	        		if (ProjectEffortPeriodRel not exists
	        		and DateRange.End entered)
	        			invoke CreatePeriodDates ProjectLaborSchedule.ProjectEffortSchedule
    	    				invoked.PeriodThruDate = DateRange.End
    	    		if (ProjectEffortPeriodRel exists)
						LocalEffortPeriod = first ProjectEffortPeriodRel.ProjectEffortPeriod	        		
		        		if (ProjectAssignmentEffortRel not exists)
		        			invoke Create ProjectAssignmentEffort
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.Project					= Project
								invoked.Employee				= Employee
								invoked.ProjectAssignment		= ProjectAssignment
								invoked.ProjectEffortPeriod		= LocalEffortPeriod
								invoked.ProjectEffortSchedule	= ProjectLaborSchedule.ProjectEffortSchedule
								invoked.ProjectLaborSchedule	= ProjectLaborSchedule
								if (ProjectLaborSchedule.ProjectEffortSchedule.Frequency = ProjectLaborSchedule.Frequency)
									invoked.GetSplitAmounts		= true
									if (Status.Certified)
										invoked.Certified		= true
					
		CreateProjectAssignmentEffort is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmProjectLaborSchedule		is a ProjectLaborSchedule
					default label is "LaborSchedule"
				NewEffortSchedule			is a ProjectEffortSchedule
					default label is "NewEffortSchedule"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmProjectLaborSchedule
					required
				NewEffortSchedule
					required
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    LaborPeriod.SequenceNumber not entered
				and    Status.Processed)
			Action Rules
				Instance Rules
					invoke CreateProjectEffortRecord

		CreateProjectEffortRecord is an Instance Action
			restricted
			Parameters
				PrmCertified	is Boolean
			Action Rules
        		if (ProjectEffortPeriodRel not exists
        		and DateRange.End entered)
        			invoke CreatePeriodDates ProjectLaborSchedule.ProjectEffortSchedule
        				invoked.PeriodThruDate = DateRange.End
        		if (ProjectEffortPeriodRel exists)
					LocalEffortPeriod = first ProjectEffortPeriodRel.ProjectEffortPeriod
	        		if (ProjectAssignmentEffortRel not exists)
	        			invoke Create ProjectAssignmentEffort
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Project					= Project
							invoked.Employee				= Employee
							invoked.ProjectAssignment		= ProjectAssignment
							invoked.ProjectEffortPeriod		= LocalEffortPeriod
							invoked.ProjectEffortSchedule	= ProjectLaborSchedule.ProjectEffortSchedule
							invoked.ProjectLaborSchedule	= ProjectLaborSchedule
							invoked.Certified				= PrmCertified

		CreateProjectEmployeeLaborPeriod is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
			Local Fields
				LocalStatus						  is Numeric size 1
				LocalJournalizeGroup			  is like JournalizeGroup
				LocalTotalActualPercent			  is Percent size 6.3
				LocalTotalPlannedPercent		  is Percent size 6.3
				LocalAdjusted					  is Boolean
				LocalLaborRedistributed			  is Boolean
				LocalDistributed				  is Boolean
				LocalUndistributed				  is Boolean
				LocalFullyDistributed			  is Boolean
				LocalTransactionAmount	is like InternationalAmount
				LocalDistributedOverage	is like InternationalAmount
				LocalFringeBurdenAmount	is like InternationalAmount
				LocalHours				is like UnitsAmount
			Sort Order
    			FinanceEnterpriseGroup
    			Employee
    			ProjectLaborSchedule
    			LaborPeriod.Period
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ProjectLaborSchedule entered
				and    ProjectEmployeeLaborPeriodRel not exists)
			Action Rules
				Empty Set Rules
					invoke UpdateLaborDistributionUpgradeComplete PrmFinanceEnterpriseGroup
						invoked.PrmLaborDistributionUpgradeComplete = true
				Set Rules
					Entrance Rules
						invoke UpdateLaborDistributionUpgradeComplete PrmFinanceEnterpriseGroup
							invoked.PrmLaborDistributionUpgradeComplete = false
					Exit Rules
						invoke UpdateLaborDistributionUpgradeComplete PrmFinanceEnterpriseGroup
							invoked.PrmLaborDistributionUpgradeComplete = true
				LaborPeriod.Period Set Rules
					Entrance Rules
						initialize LocalTotalActualPercent
						initialize LocalTotalPlannedPercent
						initialize LocalStatus
						initialize LocalJournalizeGroup
						initialize LocalAdjusted
						initialize LocalLaborRedistributed
						initialize LocalDistributed
						initialize LocalUndistributed
					Exit Rules
						if (LocalStatus != 3)
							LocalAdjusted = false
						if (LocalDistributed)
							if (LocalUndistributed)
								LocalFullyDistributed = false
							else
								LocalFullyDistributed = true
						else
							LocalFullyDistributed = false
						invoke Create ProjectEmployeeLaborPeriodRel
							invoked.Status						 = LocalStatus
							invoked.JournalizeGroup 			 = LocalJournalizeGroup
							invoked.TotalActualPercent			 = LocalTotalActualPercent
							invoked.TotalPlannedPercent			 = LocalTotalPlannedPercent
							invoked.Adjusted					 = LocalAdjusted
							invoked.LaborRedistributed		 	 = LocalLaborRedistributed
							invoked.FullyDistributed			 = LocalFullyDistributed
				Instance Rules
					LocalTotalActualPercent  += ActualPercent
					LocalTotalPlannedPercent += PlannedPercent
					if (JournalizeGroup entered)
						LocalJournalizeGroup = JournalizeGroup
					if (Status > LocalStatus)
						LocalStatus			 = Status
					if (Adjusted)
						LocalAdjusted = true
					if (HasBeenRedistributed)
						LocalLaborRedistributed = true
					if (ActualPercent entered
					and IsProcessedOrCertified)
						if (ProjectAssignmentLaborTransaction set exists)
							LocalDistributed = true
						else
							LocalUndistributed = true

					initialize LocalTransactionAmount
					initialize LocalDistributedOverage
					initialize LocalFringeBurdenAmount
					initialize LocalHours
		        	for each ProjectAssignmentLaborTransaction set
			            if (each.GLTransactionDetail.GeneralLedgerEvent = "BD")
			            	LocalFringeBurdenAmount		+= each.GLTransactionDetail.TransactionAmount
			            else
				        	LocalTransactionAmount		+= each.GLTransactionDetail.TransactionAmount
				            LocalHours					+= each.GLTransactionDetail.UnitsAmount
				            if (each.IsOverage)
				            	LocalDistributedOverage	+= each.GLTransactionDetail.TransactionAmount
					TransactionAmount			= LocalTransactionAmount
					DistributedOverageAmount	= LocalDistributedOverage
					FringeBurdenAmount			= LocalFringeBurdenAmount
					Hours						= LocalHours

		RecalculateLaborTotals is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
			Local Fields
				LocalTransactionAmount	is like InternationalAmount
				LocalDistributedOverage	is like InternationalAmount
				LocalFringeBurdenAmount	is like InternationalAmount
				LocalHours				is like UnitsAmount
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ProjectAssignmentLaborTransaction set exists)
			Action Rules
				Instance Rules
					initialize LocalTransactionAmount
					initialize LocalDistributedOverage
					initialize LocalFringeBurdenAmount
					initialize LocalHours
		        	for each ProjectAssignmentLaborTransaction set
			            if (each.GLTransactionDetail.GeneralLedgerEvent = "BD")
			            	LocalFringeBurdenAmount		+= each.GLTransactionDetail.TransactionAmount
			            else
				        	LocalTransactionAmount		+= each.GLTransactionDetail.TransactionAmount
				            LocalHours					+= each.GLTransactionDetail.UnitsAmount
				            if (each.IsOverage)
				            	LocalDistributedOverage	+= each.GLTransactionDetail.TransactionAmount
					TransactionAmount			= LocalTransactionAmount
					DistributedOverageAmount	= LocalDistributedOverage
					FringeBurdenAmount			= LocalFringeBurdenAmount
					Hours						= LocalHours

		FixBadRecords is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and   (ProjectLaborSchedule not entered
				or     Status != ProjectEmployeeLaborPeriodRel.Status
				or     JournalizeGroup != ProjectEmployeeLaborPeriodRel.JournalizeGroup
				or     Adjusted != ProjectEmployeeLaborPeriodRel.Adjusted
				or     NoTransactionsFound != ProjectEmployeeLaborPeriodRel.NoTransactionsFound))
			Action Rules
				Instance Rules
					if (ProjectLaborSchedule not entered)
						ProjectLaborSchedule = first FixLaborScheduleRel.ProjectLaborSchedule
					if (ProjectEmployeeLaborPeriodRel exists)
						Status				= ProjectEmployeeLaborPeriodRel.Status
						JournalizeGroup		= ProjectEmployeeLaborPeriodRel.JournalizeGroup
						Adjusted			= ProjectEmployeeLaborPeriodRel.Adjusted
						NoTransactionsFound	= ProjectEmployeeLaborPeriodRel.NoTransactionsFound

