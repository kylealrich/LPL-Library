CashLedgerReconciliationAdjustment is a BusinessClass
    owned by cb
    prefix is CBJ
    sql name is CLReconciliationAdjustment
    classic name is CBADJUST

    Ontology
        symbolic key is CashLedgerReconciliationAdjustment
            classic set name is CBJSET1
            sql name is CLReconciliationAdjustment
            classic name is TRANS-IDENT
            classic name for BankTransactionCode is BANK-INST-CODE

    Patterns
        implements StaticJava
        disable AuditIndex

    Persistent Fields
    	CommentText
        CashCode
        CashManagementAccount
        TransactionNumber
            classic name is TRANS-NBR
        TransactionNumberSuffix          is a Suffix
            classic name is SUFFIX
        Company                          is a CompanyIsolated 	
        CurrencyTable											
        IssuedBankAmount                 is a CurrencyAmount 	
            classic name is ISSUE-BNK-AMT
        IssuedBaseAmount                 is a FinanceCurrencyAmount 
            classic name is ISSUE-BASE-AMT
		ReconciliationData				 is a FinanceCurrencyAmountGroup            

            classic name for ReconciliationData.ExchangeDate is RECON-DATE

            classic name for ReconciliationData.CurrencyAmount is RECON-BNK-AMT

            classic name for ReconciliationData.FunctionalAmount.EnteredCurrencyAmount is RECON-BASE-AMT 



        AppliedDistributionBankAmount    is an InternationalAmount
            classic name is DIST-APPLIED
        AppliedDistributionBaseAmount    is an DocumentCurrencyTotals  
            classic name is BASE-APPLIED
        PostDate                         is Date
        Status                           is Numeric size 1
            classic name is REC-STATUS
            States
                UnreleasedUnreconciled value is 0
                    default label is "Unreleased, unreconciled"
                ReleasedReconciled     value is 1
                    default label is "Released, reconciled"
        JournalBook
            context of Company.OrigCompany
            classic name is JRNL-BOOK-NBR
            restricted
        CashLedgerStatement				is like CashLedgerStatement
            classic name is RECON-STMT-NBR
        CompanyCashCode
			context of Company.OrigCompany
		BudgetEditProcessing 				is Numeric size 1
			States
                NotInProcessing value is 0
                InProcess  		value is 1
                Failure    		value is 2
                Success    		value is 3
		AdjustmentWithTolerance 			is Boolean
                			
    Local Fields
        ExchangeDate
		BankDifferenceAmount			is an InternationalAmount
		BaseDifferenceAmount			is a  FinanceCurrencyAmountGroup
		LocalFinanceCurrencyAmountGroup	is a  FinanceCurrencyAmountGroup
		LocalFinanceCurrencyAmount		is a  FinanceCurrencyAmount
		LocalDistributionFinanceCurrAmt	is a  FinanceCurrencyAmount
		LocalCreateReconcileOffset      is Boolean
		LocalReference              	is like Reference
		LocalDescription            	is like Description
		LocalAccountingEntity			is an AccountingEntity
		LocalReconcileGeneralLedgerEntry	is Boolean
		LocalCalculateCashFinanceStructure	is a CalculateCashFinanceStructure
		LocalAnswer 						is Alpha size 1
		LocalCreateOffset				is Boolean						
		LocalReconCurrencyAmount		is a FinanceCurrencyAmount		
		LocalReconcileVarianceData		is an InternationalAmount		
		NegativeFinanceCurrencyAmount									
		LocalBoolean					is Boolean						
		LocalCashManagementGroup		is like CashManagementGroup
		LocalCompany					is like Company
		LocalCashLedgerJobResult		is a CashLedgerJobResult
		
	Derived Fields
		DerivedTransactionIdentifier is a DerivedField
			type is like CashLedgerTransactionIdentifier
			return CashLedgerTransactionRel.CashLedgerTransactionIdentifier
		
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforERPEnterpriseFinancialsReconciliationData"

		ContextMessageText is a MessageField
			restricted
			"CashLedgerReconciliationAdjustment<CashLedgerReconciliationAdjustment>"
			
		TransactionOutOfBalanceMessage			is a MessageField
			restricted			
			"ActionComplete,ReconciliationAdjustmentIsOutOfBalance"  
		TransactionUpdatedMessage				is a MessageField
			restricted
			"ReconciliationAdjustmentUpdated"
		TransactionReleasedMessage				is a MessageField
			restricted
			"ReconciliationAdjustmentReleaseComplete"	
		ReferenceMessage						is a MessageField
			restricted
			"CashLedgerReconciliationAdjustment"
		DescriptionMessage						is a MessageField
			restricted
			"Reconciliation_\Entry"      
							
		DerivedBankDifferenceAmount 			is a DerivedField		
			type is like InternationalAmount
			return (ReconciliationData.CurrencyAmount - IssuedBankAmount)
			
		BalanceAmount							is a DerivedField		
			type is like InternationalAmount
			return ((DerivedBankDifferenceAmount * -1) - AppliedDistributionBankAmount) 

		DerivedHeaderBudgetErrorCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (HeaderBudgetEditErrorExists)
				return "(" + instance count of HeaderBudgetEditErrorRel + ")"
			else
				return ""

		DerivedWarningBudgetErrorCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (DistributionBudgetEditErrorExists)
				return "(" + instance count of DistributionBudgetEditErrorRel + ")"
			else
				return ""

		DerivedFirstErrorMessage is a DerivedField
			type is Alpha size up to 200
        	restricted
        	if (HeaderBudgetEditErrorRel exists)
        		return MouseOverBudgetErrorMessage
			if (DistributionBudgetEditErrorRel exists)
				return MouseOverBudgetErrorMessage

		ReconcilingBankStatement is a DerivedField
			type is like BankStatement
			return CashLedgerTransactionRel.first BankStatementReconciliation set.ReconMatchNumber.BankStatement

		LineMatchField is a DerivedField
			type is AlphaUpper 200
			return CashLedgerTransactionRel.first BankStatementReconciliation set.ReconMatchNumber.LineMatchField
		
		MatchNumber is a DerivedField
			type is like BankStatementReconciliation
			return CashLedgerTransactionRel.first BankStatementReconciliation set.ReconMatchNumber

		MouseOverBudgetErrorMessage is a MessageField
			restricted
			"BudgetErrorsExist;SeeBudgetErrorTabForDetails"

		DerivedPeriodEndDate	is a DerivedField 
			type is Date
			restricted
			return CurrentGeneralLedgerCalendarPeriodRel.Date

		ReconciliationVarianceMessage	is a MessageField		
			restricted
			"ReconciliationVariance"

	Transient Fields
		TransientFromCurrency					is a FromCurrency
			derive value from CashCode.Currency
		CompletionMessage						is Alpha size 150
		
    Conditions
        IsUnreleased
        	restricted
            classic name is CBJ-UNRELEASED
            when (Status.UnreleasedUnreconciled)

        IsUnreleasedForPeriodClose	
        	restricted
            when (Status.UnreleasedUnreconciled
            and   PostDate <= CurrentGeneralLedgerCalendarPeriodRel.Date) 

        OutstandingReconciliationAdjustmentsExist	
        	restricted
            when (IsUnreleasedForPeriodClose)
            
		BudgetEditingInformationExists
			restricted
			when (BudgetTemplateGroupTotalRel exists)
		
		BudgetEditErrorExists
			when (HeaderBudgetEditErrorRel exists
			or    DistributionBudgetEditErrorRel exists)
			
		HeaderBudgetEditErrorExists
			restricted
			when (HeaderBudgetEditErrorRel exists)
			
		DistributionBudgetEditErrorExists
			restricted
			when (DistributionBudgetEditErrorRel exists)
		
		BudgetEditInProgress
			restricted
        	when (BudgetEditProcessing.InProcess)
        
        BudgetEditFailure
        	restricted
    		when (BudgetEditProcessing.Failure)

		GLCommitRelExists
			restricted
			when (GLCommitRel exists)

		OpenGLCommitRelExists
			restricted
			when (OpenGLCommitDrillRel exists)
			
		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   CashManagementGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

		CanUpdateComments
			restricted
			when (Status >  0)

		OutOfBalance
			restricted
			when (Status.UnreleasedUnreconciled
			and   BalanceAmount	entered)
			
		ReconciledByBankStatement
			restricted
			when (CashLedgerTransactionRel.BankStatementReconciliation set exists)

		CanDeleteRecord
			restricted
			when (Status.UnreleasedUnreconciled
			and   CashLedgerTransactionRel.BankStatementReconciliation set !exists)

		CanViewBankStatement		
			when (CashLedgerTransactionRel.first BankStatementReconciliation set.ReconMatchNumber.BankStatement.BankStatement entered)

    Relations
        CashLedgerGLDistributionsRel
            classic name is ADJUST-DISTRIB
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= CashCode.CashManagementGroup	
                related.CashCode 				= CashCode
                related.CashLedgerSourceRecord	= CashLedgerSourceRecord
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode	= BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerReconciliationAdjustment
                and   related.CashLedgerGLDistribution.DistributionType.Reconciliation)

        UnreleasedCashLedgerGLDistributionsRel
            classic name is ADJUST-DISTRIB
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= CashCode.CashManagementGroup	
                related.CashCode 				= CashCode
                related.CashLedgerSourceRecord	= CashLedgerSourceRecord
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode	= BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerReconciliationAdjustment
                and   related.CashLedgerGLDistribution.DistributionType.Reconciliation
                and   related.Status.Unreleased)

		CashLedgerTransactionRel
			one-to-one relation to CashLedgerTransaction
			Field Mapping uses symbolic key
				related.CashManagementGroup 	= CashCode.CashManagementGroup	
				related.BankTransactionCode		= BankTransactionCode
				related.CashLedgerSourceRecord	= CashLedgerSourceRecord
				related.CashLedgerTransaction   = CashLedgerReconciliationAdjustment

		HeaderBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup			= CashManagementGroup
				related.BudgetEditError.BudgetEditGroup	= UniqueID

		DistributionBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByHeaderUniqueID
				related.FinanceEnterpriseGroup			= CashManagementGroup
				related.HeaderUniqueID                  = UniqueID

		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.GeneralLedgerSystemCode	= "CB"	

		GLCommitRel		
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID	
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.HeaderUniqueID	= UniqueID



		OpenGLCommitDrillRel	
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.HeaderUniqueID			= UniqueID
			Instance Selection
				where (related.Status = 0
				or     related.Status = 2
				or     related.Status = 3)
				
		GLCommitDocumentsRel	
			one-to-one relation to GLCommitDocument
			Field Mapping uses ByHeaderObjectReference
				related.HeaderObjectReference = reference to this instance







				  
		BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup                    = CashManagementGroup
				related.BudgetTemplateGroupTotal.BudgetEditGroup  = UniqueID

		CompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "CB"
				related.Company						= Company.OrigCompany

		CurrentGeneralLedgerCalendarPeriodRel	
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= CashManagementGroup
				related.GeneralLedgerCalendarPeriod			= Company.OrigCompany.AccountingEntity.CurrentPeriod.GeneralLedgerCalendarPeriod	

		UnreleasedReconciliationAdjustmentsErrorRel
			one-to-many relation to CashLedgerJobResultError
            Field Mapping uses ByCompanyErrorType
            	related.CashManagementGroup 				= LocalCashManagementGroup
            	related.CashLedgerJobResult					= LocalCashLedgerJobResult
            	related.Company								= LocalCompany
            	related.ErrorType							= 9 
            	
    Sets
        Set2
            indexed
            Sort Order
                CashCode
                Status
                BankTransactionCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerReconciliationAdjustment
                CashLedgerSourceRecord

        Set3
            indexed
            Sort Order
                CashCode
                BankTransactionCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerReconciliationAdjustment
                CashLedgerSourceRecord

        Set4
            indexed
            Instance Selection
                where (IsUnreleased)
            Sort Order
            	CashManagementGroup
                CashCode
                BankTransactionCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerReconciliationAdjustment
                CashLedgerSourceRecord

		ByCashManagementAccount
			indexed
			Sort Order
				CashManagementGroup
				CashManagementAccount
				Status
				CashCode
                BankTransactionCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerReconciliationAdjustment
                CashLedgerSourceRecord

		ByCashManagementAccountByPostDate
			indexed
			Sort Order
				CashManagementGroup
				CashManagementAccount
				PostDate
				CashCode
                BankTransactionCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerReconciliationAdjustment
                CashLedgerSourceRecord

        ByStatus
            indexed
            Sort Order
                Status
                CashCode
                BankTransactionCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerReconciliationAdjustment

        ByCompany	
            indexed
            Sort Order
            	CashManagementGroup
                Company.OrigCompany
                Status
                CashCode
                BankTransactionCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerReconciliationAdjustment
                CashLedgerSourceRecord                 
                
	Rule Blocks
	
		CalculateBaseAmountDiffences

			BaseDifferenceAmount.CurrencyAmount							  = BankDifferenceAmount 
			BaseDifferenceAmount.ExchangeDate							  = CashLedgerTransactionRel.IssueDate
			for each UnreleasedCashLedgerGLDistributionsRel
				BaseDifferenceAmount.FunctionalAmount.EnteredCurrencyAmount		+= each.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount
				BaseDifferenceAmount.AlternateAmount.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount.EnteredCurrencyAmount
				BaseDifferenceAmount.AlternateAmount2.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount2.EnteredCurrencyAmount
				BaseDifferenceAmount.AlternateAmount3.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount3.EnteredCurrencyAmount
	        	BaseDifferenceAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= each.GLBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount
				BaseDifferenceAmount.ToAlternateAmount.EnteredCurrencyAmount	+= each.GLBaseAmount.ToAlternateAmount.EnteredCurrencyAmount
				BaseDifferenceAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= each.GLBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount
				BaseDifferenceAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= each.GLBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount
				BaseDifferenceAmount.ProjectAmount.EnteredCurrencyAmount		+= each.GLBaseAmount.ProjectAmount.EnteredCurrencyAmount
				BaseDifferenceAmount.ReportAmount1.EnteredCurrencyAmount		+= each.GLBaseAmount.ReportAmount1.EnteredCurrencyAmount
				BaseDifferenceAmount.ReportAmount2.EnteredCurrencyAmount		+= each.GLBaseAmount.ReportAmount2.EnteredCurrencyAmount
				BaseDifferenceAmount.ReportAmount3.EnteredCurrencyAmount		+= each.GLBaseAmount.ReportAmount3.EnteredCurrencyAmount
				BaseDifferenceAmount.ReportAmount4.EnteredCurrencyAmount		+= each.GLBaseAmount.ReportAmount4.EnteredCurrencyAmount
				BaseDifferenceAmount.ReportAmount5.EnteredCurrencyAmount		+= each.GLBaseAmount.ReportAmount5.EnteredCurrencyAmount














		
		ReverseReconBaseAmounts
			LocalFinanceCurrencyAmountGroup.FunctionalAmount.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount.EnteredCurrencyAmount  		*= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount2.EnteredCurrencyAmount		*= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount3.EnteredCurrencyAmount		*= -1
			LocalFinanceCurrencyAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount	*= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount.EnteredCurrencyAmount	 	*= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount	*= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount	*= -1
			LocalFinanceCurrencyAmountGroup.ProjectAmount.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount1.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount2.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount3.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount4.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount5.EnteredCurrencyAmount 		*= -1

		ReverseDiffBaseAmounts
			LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   	= (BaseDifferenceAmount.FunctionalAmount.EnteredCurrencyAmount		* -1) 
			LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    	= (BaseDifferenceAmount.AlternateAmount.EnteredCurrencyAmount    	* -1)
			LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   	= (BaseDifferenceAmount.AlternateAmount2.EnteredCurrencyAmount   	* -1)
			LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount   	= (BaseDifferenceAmount.AlternateAmount3.EnteredCurrencyAmount   	* -1)
			LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount 	= (BaseDifferenceAmount.ToFunctionalAmount.EnteredCurrencyAmount 	* -1)
			LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  	= (BaseDifferenceAmount.ToAlternateAmount.EnteredCurrencyAmount  	* -1)
			LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount 	= (BaseDifferenceAmount.ToAlternateAmount2.EnteredCurrencyAmount 	* -1)
			LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount 	= (BaseDifferenceAmount.ToAlternateAmount3.EnteredCurrencyAmount 	* -1)
			LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 	  		= (BaseDifferenceAmount.ProjectAmount.EnteredCurrencyAmount 	 	* -1)
			LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 	  		= (BaseDifferenceAmount.ReportAmount1.EnteredCurrencyAmount 	 	* -1)
			LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 	 	 	= (BaseDifferenceAmount.ReportAmount2.EnteredCurrencyAmount 		* -1) 
			LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 	  		= (BaseDifferenceAmount.ReportAmount3.EnteredCurrencyAmount 		* -1) 
			LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		  	= (BaseDifferenceAmount.ReportAmount4.EnteredCurrencyAmount 		* -1) 
			LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	 	  	= (BaseDifferenceAmount.ReportAmount5.EnteredCurrencyAmount 		* -1) 

		SetLocalFinanceCurrencyAmountGroup
			LocalFinanceCurrencyAmountGroup.ExchangeDate								= CashLedgerTransactionRel.IssueDate
			LocalFinanceCurrencyAmountGroup.CurrencyAmount								= ReconciliationData.CurrencyAmount
			LocalFinanceCurrencyAmountGroup.FunctionalAmount.EnteredCurrencyAmount 		= (IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount		- BaseDifferenceAmount.FunctionalAmount.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.AlternateAmount.EnteredCurrencyAmount  		= (IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount		- BaseDifferenceAmount.AlternateAmount.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.AlternateAmount2.EnteredCurrencyAmount		= (IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount		- BaseDifferenceAmount.AlternateAmount2.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.AlternateAmount3.EnteredCurrencyAmount		= (IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount		- BaseDifferenceAmount.AlternateAmount3.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount	= (IssuedBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount	- BaseDifferenceAmount.ToFunctionalAmount.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount.EnteredCurrencyAmount	 	= (IssuedBaseAmount.ToAlternateAmount.EnteredCurrencyAmount		- BaseDifferenceAmount.ToAlternateAmount.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount	= (IssuedBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount	- BaseDifferenceAmount.ToAlternateAmount2.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount	= (IssuedBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount	- BaseDifferenceAmount.ToAlternateAmount3.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.ProjectAmount.EnteredCurrencyAmount 		= (IssuedBaseAmount.ProjectAmount.EnteredCurrencyAmount			- BaseDifferenceAmount.ProjectAmount.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.ReportAmount1.EnteredCurrencyAmount 		= (IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount			- BaseDifferenceAmount.ReportAmount1.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.ReportAmount2.EnteredCurrencyAmount 		= (IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount			- BaseDifferenceAmount.ReportAmount2.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.ReportAmount3.EnteredCurrencyAmount 		= (IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount			- BaseDifferenceAmount.ReportAmount3.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.ReportAmount4.EnteredCurrencyAmount 		= (IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount			- BaseDifferenceAmount.ReportAmount4.EnteredCurrencyAmount)
			LocalFinanceCurrencyAmountGroup.ReportAmount5.EnteredCurrencyAmount 		= (IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount			- BaseDifferenceAmount.ReportAmount5.EnteredCurrencyAmount)

		SetLocalFinanceCurrencyAmounts
			LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   = LocalFinanceCurrencyAmountGroup.FunctionalAmount.EnteredCurrencyAmount
			LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    = LocalFinanceCurrencyAmountGroup.AlternateAmount.EnteredCurrencyAmount
			LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   = LocalFinanceCurrencyAmountGroup.AlternateAmount2.EnteredCurrencyAmount
			LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount  	= LocalFinanceCurrencyAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	
			LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalFinanceCurrencyAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount
			LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  = LocalFinanceCurrencyAmountGroup.ToAlternateAmount.EnteredCurrencyAmount
			LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalFinanceCurrencyAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount
			LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount = LocalFinanceCurrencyAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount
			LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 	  	= LocalFinanceCurrencyAmountGroup.ProjectAmount.EnteredCurrencyAmount	
			LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 	  	= LocalFinanceCurrencyAmountGroup.ReportAmount1.EnteredCurrencyAmount
			LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 	  	= LocalFinanceCurrencyAmountGroup.ReportAmount2.EnteredCurrencyAmount
			LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 	  	= LocalFinanceCurrencyAmountGroup.ReportAmount3.EnteredCurrencyAmount
			LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 	  	= LocalFinanceCurrencyAmountGroup.ReportAmount4.EnteredCurrencyAmount
			LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  	= LocalFinanceCurrencyAmountGroup.ReportAmount5.EnteredCurrencyAmount
			 	 					 	 		
		ReverseLocalFinanceCurrencyAmounts
			LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount   = (LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	* -1)
			LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount    = (LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		* -1)
			LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount   = (LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	* -1)
			LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount  	= (LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	* -1)
			LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount = (LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	* -1)
			LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  = (LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	* -1)
			LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount = (LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	* -1)
			LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount = (LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	* -1)
			LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 	  	= (LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		* -1)
			LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 	  	= (LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		* -1)
			LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 	  	= (LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		* -1)
			LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 	  	= (LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		* -1)
			LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 	  	= (LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		* -1)
			LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	  	= (LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		* -1)
			 	 					 	 		
		SetCurrencyData


			LocalAccountingEntity				= Company.OrigCompany.AccountingEntity
			TransientFromCurrency 				= CashCode.Currency
			ExchangeDate 						= CashLedgerTransactionRel.IssueDate
			BankDifferenceAmount			  	= DerivedBankDifferenceAmount
			
		CheckForRelatedChanges	
			if (PostDate changed)
				if (first UnreleasedCashLedgerGLDistributionsRel exists)
					for each UnreleasedCashLedgerGLDistributionsRel
						invoke RecalcCurrencyAmountsForAllDistributions each

		CreateOffsetDifferenceDistribution
			if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
				for each UnreleasedCashLedgerGLDistributionsRel
					LocalFinanceCurrencyAmount								 			= each.GLBaseAmount
					include ReverseLocalFinanceCurrencyAmounts

					initialize LocalCalculateCashFinanceStructure
					LocalCalculateCashFinanceStructure.InputCashManagementGroup				= each.CashManagementGroup
					LocalCalculateCashFinanceStructure.InputCashCode						= each.CashCode
					LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= each.CashLedgerSourceRecord
					LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= each.CashLedgerGLDistribution
					LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= each.CashLedgerGLDistribution.GLFinanceCodeBlock
					LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.CashCodeDistribution
					LocalCalculateCashFinanceStructure.InputFinanceCodeBlock				= CompanyCashCode.CashAccount
					LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

					invoke Create CashLedgerGLDistribution
						fill in fields from CashLedgerTransactionRel
						invoked.CashCode                        			 = CashCode
						invoked.CashLedgerSourceRecord						 = CashLedgerSourceRecord
						invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerTransactionRel.BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerTransactionRel.CashLedgerTransaction
						invoked.GeneralLedgerSourceCode                      = "CL"
						invoked.CashLedgerGLDistribution.DistributionType    = DistType.Reconciliation
						invoked.Status 	 									 = 1
						invoked.PostDate                                     = PostDate
						invoked.RecordType									 = "C"
						invoked.GLFinanceCodeBlock			  				 = LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock
						invoked.GLTransactionAmount	    					 = each.GLTransactionAmount * -1
						invoked.DistributionToBankAmount  					 = each.GLTransactionAmount * -1
						invoked.GLBaseAmount								 = LocalFinanceCurrencyAmount
						invoked.ToBaseCurrencyNumberOfDecimals				 = CashLedgerTransactionRel.BaseCurrencyNumberOfDecimals
						invoked.ToTransactionCurrencyNumberOfDecimals		 = CashLedgerTransactionRel.TransactionCurrencyNumberOfDecimals
						invoked.TransactionCurrencyNumberOfDecimals			 = CashLedgerTransactionRel.TransactionCurrencyNumberOfDecimals
						invoked.BypassStatusEdit							 = true
			else
				include ReverseDiffBaseAmounts
				invoke Create CashLedgerGLDistribution
					fill in fields from CashLedgerTransactionRel
					invoked.CashCode                        			 = CashCode
					invoked.CashLedgerSourceRecord						 = CashLedgerSourceRecord
					invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerTransactionRel.BankTransactionCode
					invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerTransactionRel.CashLedgerTransaction
					invoked.GeneralLedgerSourceCode                      = "CL"
					invoked.CashLedgerGLDistribution.DistributionType    = DistType.Reconciliation
					invoked.Status 	 									 = 1
					invoked.PostDate                                     = PostDate
					invoked.RecordType									 = "C"
					invoked.GLFinanceCodeBlock			  				 = CompanyCashCode.CashAccount					
					invoked.GLTransactionAmount	    					 = AppliedDistributionBankAmount * -1
					invoked.DistributionToBankAmount  					 = AppliedDistributionBankAmount * -1
					invoked.GLBaseAmount								 = LocalFinanceCurrencyAmount
					invoked.ToBaseCurrencyNumberOfDecimals				 = CashLedgerTransactionRel.BaseCurrencyNumberOfDecimals
					invoked.ToTransactionCurrencyNumberOfDecimals		 = CashLedgerTransactionRel.TransactionCurrencyNumberOfDecimals
					invoked.TransactionCurrencyNumberOfDecimals			 = CashLedgerTransactionRel.TransactionCurrencyNumberOfDecimals
					invoked.BypassStatusEdit							 = true
				
		DistributionRoundingOffSet
			initialize LocalDistributionFinanceCurrAmt
			for each UnreleasedCashLedgerGLDistributionsRel
				LocalDistributionFinanceCurrAmt.FunctionalAmount.EnteredCurrencyAmount		+= each.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.AlternateAmount.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.AlternateAmount2.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.AlternateAmount3.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount3.EnteredCurrencyAmount





				LocalDistributionFinanceCurrAmt.ReportAmount1.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount1.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount2.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount2.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount3.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount3.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount4.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount4.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount5.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount5.EnteredCurrencyAmount
			invoke AdjustDistributionCurrencyAmounts last UnreleasedCashLedgerGLDistributionsRel
				invoked.PrmCurrencyAmountAdjustment.FunctionalTotal		= ((BaseDifferenceAmount.FunctionalAmount.EnteredCurrencyAmount   * -1)	- LocalDistributionFinanceCurrAmt.FunctionalAmount.EnteredCurrencyAmount)
				invoked.PrmCurrencyAmountAdjustment.AlternateTotal		= ((BaseDifferenceAmount.AlternateAmount.EnteredCurrencyAmount	  * -1)	- LocalDistributionFinanceCurrAmt.AlternateAmount.EnteredCurrencyAmount)
				invoked.PrmCurrencyAmountAdjustment.AlternateTotal2		= ((BaseDifferenceAmount.AlternateAmount2.EnteredCurrencyAmount	  * -1)	- LocalDistributionFinanceCurrAmt.AlternateAmount2.EnteredCurrencyAmount)
				invoked.PrmCurrencyAmountAdjustment.AlternateTotal3		= ((BaseDifferenceAmount.AlternateAmount3.EnteredCurrencyAmount	  * -1)	- LocalDistributionFinanceCurrAmt.AlternateAmount3.EnteredCurrencyAmount)





				invoked.PrmCurrencyAmountAdjustment.ReportTotal1		= ((BaseDifferenceAmount.ReportAmount1.EnteredCurrencyAmount	  * -1)	- LocalDistributionFinanceCurrAmt.ReportAmount1.EnteredCurrencyAmount)
				invoked.PrmCurrencyAmountAdjustment.ReportTotal2		= ((BaseDifferenceAmount.ReportAmount2.EnteredCurrencyAmount	  * -1)	- LocalDistributionFinanceCurrAmt.ReportAmount2.EnteredCurrencyAmount)
				invoked.PrmCurrencyAmountAdjustment.ReportTotal3		= ((BaseDifferenceAmount.ReportAmount3.EnteredCurrencyAmount	  * -1)	- LocalDistributionFinanceCurrAmt.ReportAmount3.EnteredCurrencyAmount)
				invoked.PrmCurrencyAmountAdjustment.ReportTotal4		= ((BaseDifferenceAmount.ReportAmount4.EnteredCurrencyAmount	  * -1)	- LocalDistributionFinanceCurrAmt.ReportAmount4.EnteredCurrencyAmount)
				invoked.PrmCurrencyAmountAdjustment.ReportTotal5		= ((BaseDifferenceAmount.ReportAmount5.EnteredCurrencyAmount	  * -1)	- LocalDistributionFinanceCurrAmt.ReportAmount5.EnteredCurrencyAmount)
					
		CreateReconcileGLAcctDistribution
			LocalReference 												= ReferenceMessage
			LocalDescription											= DescriptionMessage

			include SetLocalFinanceCurrencyAmountGroup
			if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
				if (LocalCreateReconcileOffset)							
					include ReverseReconBaseAmounts
					LocalFinanceCurrencyAmountGroup.CurrencyAmount	   *= -1
			else		        			
		        if (LocalCreateReconcileOffset)							
					include ReverseReconBaseAmounts
			        LocalFinanceCurrencyAmountGroup.CurrencyAmount	   *= -1
			include SetLocalFinanceCurrencyAmounts
			invoke CreateReconcileAcctDistribution CashLedgerGLDistribution
    			fill in fields from CashLedgerTransactionRel
    			invoked.CashCode										= CashCode
    			invoked.CashLedgerGLDistribution.BankTransactionCode 	= CashLedgerTransactionRel.BankTransactionCode
		    	invoked.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransactionRel.CashLedgerTransaction
    			invoked.TransactionNumberSuffix						 	= 0
    			invoked.GeneralLedgerSourceCode    		                = "CL"
    			invoked.CashLedgerGLDistribution.DistributionType	    = DistType.Reconciliation
				invoked.Status	 									 	= 1
				invoked.Reference										= LocalReference
				invoked.Description										= LocalDescription				
				invoked.PostDate                                     	= PostDate
				invoked.ToBaseCurrencyNumberOfDecimals					= CashLedgerTransactionRel.BaseCurrencyNumberOfDecimals
				invoked.ToTransactionCurrencyNumberOfDecimals		 	= CashLedgerTransactionRel.TransactionCurrencyNumberOfDecimals
				invoked.TransactionCurrencyNumberOfDecimals			 	= CashLedgerTransactionRel.TransactionCurrencyNumberOfDecimals
				invoked.GLBaseAmount									= LocalFinanceCurrencyAmount																					
				invoked.GLTransactionAmount								= LocalFinanceCurrencyAmountGroup.CurrencyAmount
		        invoked.DistributionToBankAmount 						= LocalFinanceCurrencyAmountGroup.CurrencyAmount
				if (LocalCreateReconcileOffset)
	    			invoked.RecordType									= "C"
					invoked.GLFinanceCodeBlock							= CompanyCashCode.CashAccount					
				else
					invoked.RecordType									= blank		        
					invoked.GLFinanceCodeBlock							= CompanyCashCode.ReconciliationAccount
				invoked.BypassBudgetAndCommitmentProcessing 			= true
				invoked.ReconcileGeneralLedgerEntry						= LocalReconcileGeneralLedgerEntry

		CreateReconcileVarianceAcctDistribution		
			LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= ReconciliationData.FunctionalAmount.EnteredCurrencyRate
			LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= ReconciliationData.AlternateAmount.EnteredCurrencyRate
			LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= ReconciliationData.AlternateAmount2.EnteredCurrencyRate
			LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= ReconciliationData.AlternateAmount3.EnteredCurrencyRate
			LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= ReconciliationData.ReportAmount1.EnteredCurrencyRate
			LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= ReconciliationData.ReportAmount2.EnteredCurrencyRate
			LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= ReconciliationData.ReportAmount3.EnteredCurrencyRate
			LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= ReconciliationData.ReportAmount4.EnteredCurrencyRate
			LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= ReconciliationData.ReportAmount5.EnteredCurrencyRate
			if (!LocalCreateOffset)
				if (CompanyCashCode.ReconcileGeneralLedgerEntry)
					if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
						LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount + ReconciliationData.FunctionalAmount.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount + ReconciliationData.AlternateAmount.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount + ReconciliationData.AlternateAmount2.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount + ReconciliationData.AlternateAmount3.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount + ReconciliationData.ReportAmount1.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount + ReconciliationData.ReportAmount2.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount + ReconciliationData.ReportAmount3.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount + ReconciliationData.ReportAmount4.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount + ReconciliationData.ReportAmount5.EnteredCurrencyAmount) * -1)
					else
						LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount + ReconciliationData.FunctionalAmount.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount + ReconciliationData.AlternateAmount.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount + ReconciliationData.AlternateAmount2.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount + ReconciliationData.AlternateAmount3.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount + ReconciliationData.ReportAmount1.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount + ReconciliationData.ReportAmount2.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount + ReconciliationData.ReportAmount3.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount + ReconciliationData.ReportAmount4.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= ((LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount + ReconciliationData.ReportAmount5.EnteredCurrencyAmount) * -1)
					if (IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount = ReconciliationData.FunctionalAmount.EnteredCurrencyAmount)
						initialize LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					if (IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount = ReconciliationData.AlternateAmount.EnteredCurrencyAmount)
						initialize LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					if (IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount = ReconciliationData.AlternateAmount2.EnteredCurrencyAmount)
						initialize LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					if (IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount = ReconciliationData.AlternateAmount3.EnteredCurrencyAmount)
						initialize LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					if (IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount = ReconciliationData.ReportAmount1.EnteredCurrencyAmount)
						initialize LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					if (IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount = ReconciliationData.ReportAmount2.EnteredCurrencyAmount)
						initialize LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					if (IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount = ReconciliationData.ReportAmount3.EnteredCurrencyAmount)
						initialize LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					if (IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount = ReconciliationData.ReportAmount4.EnteredCurrencyAmount)
						initialize LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					if (IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount = ReconciliationData.ReportAmount5.EnteredCurrencyAmount)
						initialize LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
				else
					if (CashLedgerTransactionRel.BankTransactionSign.BankCredit)
						LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= ((ReconciliationData.FunctionalAmount.EnteredCurrencyAmount - IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= ((ReconciliationData.AlternateAmount.EnteredCurrencyAmount - IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= ((ReconciliationData.AlternateAmount2.EnteredCurrencyAmount - IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= ((ReconciliationData.AlternateAmount3.EnteredCurrencyAmount - IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= ((ReconciliationData.ReportAmount1.EnteredCurrencyAmount - IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= ((ReconciliationData.ReportAmount2.EnteredCurrencyAmount - IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= ((ReconciliationData.ReportAmount3.EnteredCurrencyAmount - IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= ((ReconciliationData.ReportAmount4.EnteredCurrencyAmount - IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= ((ReconciliationData.ReportAmount5.EnteredCurrencyAmount - IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount) * -1)
					else
						LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= ((ReconciliationData.FunctionalAmount.EnteredCurrencyAmount - IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= ((ReconciliationData.AlternateAmount.EnteredCurrencyAmount - IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= ((ReconciliationData.AlternateAmount2.EnteredCurrencyAmount - IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= ((ReconciliationData.AlternateAmount3.EnteredCurrencyAmount - IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= ((ReconciliationData.ReportAmount1.EnteredCurrencyAmount - IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= ((ReconciliationData.ReportAmount2.EnteredCurrencyAmount - IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= ((ReconciliationData.ReportAmount3.EnteredCurrencyAmount - IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= ((ReconciliationData.ReportAmount4.EnteredCurrencyAmount - IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount) * -1)
						LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= ((ReconciliationData.ReportAmount5.EnteredCurrencyAmount - IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount) * -1)
					if (LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount != blank)
						if (LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount *-1)
							initialize LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						else
							LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount += LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
					if (LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount != blank)
						if (LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount = LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount)
							initialize LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						else
							LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount += LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
					if (LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount != blank)
						if (LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount = LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount)
							initialize LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						else
							LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount += LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
					if (LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount != blank)
						if (LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount = LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount)
							initialize LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						else
							LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount += LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					if (LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount != blank)
						if (LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount = LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount)
							initialize LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						else
							LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount += LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					if (LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount != blank)
						if (LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount = LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount)
							initialize LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						else
							LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount += LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					if (LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount != blank)
						if (LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount = LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount)
							initialize LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						else
							LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount += LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					if (LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount != blank)
						if (LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount = LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount)
							initialize LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						else
							LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount += LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					if (LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount != blank)
						if (LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount = LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount)
							initialize LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						else
							LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount += LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
			else
				NegativeFinanceCurrencyAmount = LocalReconCurrencyAmount
				LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation

			if (LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered
			or  LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered
			or  LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered
			or  LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered
			or  LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered
			or  LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered
			or  LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered
			or  LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered
			or  LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered
			or  NegativeFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered
			or  NegativeFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered
			or  NegativeFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered
			or  NegativeFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered
			or  NegativeFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered
			or  NegativeFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered
			or  NegativeFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered
			or  NegativeFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered
			or  NegativeFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered)
				invoke CreateReconcileAcctDistribution CashLedgerGLDistribution
					fill in fields from CashLedgerTransactionRel
					invoked.CashCode										= CashCode
					invoked.CashLedgerGLDistribution.BankTransactionCode	= CashLedgerTransactionRel.BankTransactionCode
					invoked.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransactionRel.CashLedgerTransaction
					invoked.TransactionNumberSuffix							= 0
					invoked.GeneralLedgerSourceCode							= "CL"
					invoked.CashLedgerGLDistribution.DistributionType		= "R"
					invoked.Status	 										= 1
					invoked.Reference										= LocalReference
					invoked.Description										= LocalDescription
					invoked.PostDate										= PostDate
					invoked.BaseCurrencyNumberOfDecimals					= CashLedgerTransactionRel.BaseCurrencyNumberOfDecimals
					invoked.ToBaseCurrencyNumberOfDecimals					= CashLedgerTransactionRel.BaseCurrencyNumberOfDecimals
					invoked.ToTransactionCurrencyNumberOfDecimals			= CashLedgerTransactionRel.TransactionCurrencyNumberOfDecimals
					invoked.TransactionCurrencyNumberOfDecimals				= CashLedgerTransactionRel.TransactionCurrencyNumberOfDecimals
					if (LocalCreateOffset)
						invoked.RecordType									= "C"
						if (CompanyCashCode.ReconcileGeneralLedgerEntry)
							invoked.GLFinanceCodeBlock						= CompanyCashCode.ReconciliationAccount
						else
							invoked.GLFinanceCodeBlock						= CompanyCashCode.CashAccount
						invoked.GLBaseAmount								= NegativeFinanceCurrencyAmount
					else
						invoked.RecordType									= blank
						invoked.GLFinanceCodeBlock							= CompanyCashCode.VarianceAccount
						invoked.GLBaseAmount								= LocalReconCurrencyAmount
					invoked.CompanyAccountingEntity							= Company.OrigCompany.AccountingEntity
					invoked.BypassUnitAndAmountEdit							= true

		ReleaseExitRules

			if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				invoke UpdateToReleased GLCommit
					invoked.PrmFinanceEnterpriseGroup	= CashManagementGroup  
					invoked.PrmUniqueID					= UniqueID
					invoked.PrmAccountingEntity			= Company.OrigCompany.AccountingEntity


		PerformBudgetEditsForRelease






			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
        	and  GLCommitRelExists)
 				BudgetEditProcessing = BudgetEditProcessing.InProcess                   
				invoke Delete HeaderBudgetEditErrorRel 
				invoke Delete DistributionBudgetEditErrorRel 
				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    															= CashManagementGroup
					invoked.PrmBudgetEditGroup           															= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBAdjustment.BankTransactionCode				= BankTransactionCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBAdjustment.CashLedgerSourceRecord				= CashLedgerSourceRecord
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBAdjustment.CashLedgerReconciliationAdjustment	= CashLedgerReconciliationAdjustment
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
						invoked.PrmMode																				= BudgetEditMode.UpdateOnly
					else	
						invoked.PrmMode																				= BudgetEditMode.Hard	
					invoked.PrmBusinessClassName  					              									= "CashLedgerReconciliationAdjustment"	
					invoked.PrmEditContext                      													= "Release"								
			else
				BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
				invoke FinalRelease


		PerformBudgetEditsForReopen	





			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
        	and  GLCommitRelExists)
 				BudgetEditProcessing = BudgetEditProcessing.InProcess                   
				invoke Delete HeaderBudgetEditErrorRel 
				invoke Delete DistributionBudgetEditErrorRel 
				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    															= CashManagementGroup
					invoked.PrmBudgetEditGroup           															= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBAdjustment.BankTransactionCode				= BankTransactionCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBAdjustment.CashLedgerSourceRecord				= CashLedgerSourceRecord
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBAdjustment.CashLedgerReconciliationAdjustment	= CashLedgerReconciliationAdjustment
					invoked.PrmActionCode																			= "O"	
					invoked.PrmMode																					= BudgetEditMode.UpdateOnly
					invoked.PrmBusinessClassName  					              									= "CashLedgerReconciliationAdjustment"	
					invoked.PrmEditContext                      													= "Reopen"								
			else	
				BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
				invoke FinalReopenDelete	
																
    Field Rules
        CashCode
            required

    	CashManagementAccount
    		force default to CashCode.BankAccountNumber

        TransactionNumber
            required

		ReconciliationData
			constraint (ReconciliationData.ExchangeDate entered)
		        "ReconciliationDateIsRequired"                       
			if (CashCode.BankAccountBalance set exists)		
            	constraint (ReconciliationData.ExchangeDate > CashCode.last BankAccountBalance set.BankAccountBalance)
                	"ReconciliationDateIsForAClosedBankPeriod"    
		    required
		
		PostDate
			required
			if (CompanySystemClosingControlRel.Control)		
				constraint (PostDate within CompanySystemClosingControlRel.ValidEntryDate)
					"PostDateNotWithinValidEntryDatesForSystemCode;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
				
        CompanyCashCode
            required				
	
	Actions
		Create is a Create Action
			restricted 
			Entrance Rules
				include SetCurrencyData
			
		Update is an Update Action
			valid when (Status.UnreleasedUnreconciled)
			completion message is "<CompletionMessage>"
			Entrance Rules
				constraint (!BudgetEditInProgress)		
					"CannotUpdate;BudgetEditInProgress"
				include SetCurrencyData

				constraint (ReconciliationData.ExchangeDate entered)
			        "ReconciliationDateIsRequired"                       
				if (ReconciledByBankStatement)	
					constraint (!ReconciliationData.ExchangeDate changed)
						"ReconciliationDateCannotBeChanged"			
				constraint (PostDate entered)
					"PostDateIsRequired"           
				include CalculateBaseAmountDiffences
			Action Rules
			Exit Rules
				include CheckForRelatedChanges					
				if (AppliedDistributionBankAmount = (BankDifferenceAmount * -1))
					CompletionMessage = TransactionUpdatedMessage						
				else																																					
					CompletionMessage = TransactionOutOfBalanceMessage  
						
		Release is an Instance Action
			valid when (Status.UnreleasedUnreconciled)
			completion message is "<CompletionMessage>"
			Entrance Rules
				constraint (!BudgetEditInProgress)		
					"CannotRelease;BudgetEditInProgress"
				include SetCurrencyData
				constraint (AppliedDistributionBankAmount = (BankDifferenceAmount * -1))
					"CannotRelease;TransactionIsOutOfBalance"                 






			Action Rules
				include PerformBudgetEditsForRelease                                         


				
		FinalRelease is an Instance Action
			default label is untranslatable
			restricted 
			Action Rules
				BudgetEditProcessing				= BudgetEditProcessing.NotInProcessing
				LocalFinanceCurrencyAmountGroup		= ReconciliationData
				LocalReconcileGeneralLedgerEntry 	= false
				if (ReconciliationData.FunctionalAmount.EnteredCurrencyAmount < 0)
					include ReverseReconBaseAmounts
				if (ReconciliationData.CurrencyAmount < 0)
					LocalFinanceCurrencyAmountGroup.CurrencyAmount = ReconciliationData.CurrencyAmount * -1					
				invoke Open.ReconcileAdjustment CashLedgerTransactionRel
					invoked.PrmFinanceCurrencyAmountGroup   = LocalFinanceCurrencyAmountGroup
					invoked.PrmAccountingEntity				= Company.OrigCompany.AccountingEntity	
					invoked.PrmFromCurrency					= CashCode.Currency 					

				include CalculateBaseAmountDiffences
				include CreateOffsetDifferenceDistribution
				if (CompanyCashCode.ReconcileGeneralLedgerEntry)
					LocalReconcileGeneralLedgerEntry	= true
					LocalCreateReconcileOffset 			= false
					include CreateReconcileGLAcctDistribution
					LocalCreateReconcileOffset 			= true
					include CreateReconcileGLAcctDistribution
				if (IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount	!= ReconciliationData.FunctionalAmount.EnteredCurrencyAmount	
				or  IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount	!= ReconciliationData.AlternateAmount.EnteredCurrencyAmount
				or  IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount	!= ReconciliationData.AlternateAmount2.EnteredCurrencyAmount
				or  IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount	!= ReconciliationData.AlternateAmount3.EnteredCurrencyAmount
				or  IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount	!= ReconciliationData.ReportAmount1.EnteredCurrencyAmount
				or  IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount	!= ReconciliationData.ReportAmount2.EnteredCurrencyAmount
				or  IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount	!= ReconciliationData.ReportAmount3.EnteredCurrencyAmount
				or  IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount	!= ReconciliationData.ReportAmount4.EnteredCurrencyAmount
				or  IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount	!= ReconciliationData.ReportAmount5.EnteredCurrencyAmount)
					LocalDescription	= ReconciliationVarianceMessage
					LocalCreateOffset	= false	
					include CreateReconcileVarianceAcctDistribution
					LocalCreateOffset	= true
					include CreateReconcileVarianceAcctDistribution
				invoke Release UnreleasedCashLedgerGLDistributionsRel
























				Status 				= Status.ReleasedReconciled
				CompletionMessage 	= TransactionReleasedMessage  
			Exit Rules
				include ReleaseExitRules
								
		Delete is a Delete Action
			valid when (CanDeleteRecord)
			Entrance Rules
				constraint (!BudgetEditInProgress)		
					"CannotDelete;BudgetEditInProgress"
				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					invoke Delete HeaderBudgetEditErrorRel
					invoke Delete DistributionBudgetEditErrorRel  
			Action Rules
				invoke Delete UnreleasedCashLedgerGLDistributionsRel
				
		Purge is a Purge Action
			restricted












		ReopenDelete is an Instance Action		
			default label is untranslatable
			restricted
			Entrance Rules
				include PerformBudgetEditsForReopen	


		FinalReopenDelete is a Delete Action	
			default label is untranslatable
			restricted
			Entrance Rules
				include ReleaseExitRules 
			Action Rules
				BudgetEditProcessing				= BudgetEditProcessing.NotInProcessing
												
		UpdateDocumentTotals is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmDocumentCurrencyTotals		is a DocumentCurrencyTotals
			Action Rules
				AppliedDistributionBaseAmount 	   = PrmDocumentCurrencyTotals










										
		UpdateBudgetResults is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				ParmSuccess    	is Boolean
				ParmActionCode	is an ActionCode	
			Action Rules
				if (ParmSuccess)
					BudgetEditProcessing = BudgetEditProcessing.Success
					if (ParmActionCode.Reopen) 
						invoke FinalReopenDelete	
					else
						invoke FinalRelease
				else
					BudgetEditProcessing = BudgetEditProcessing.Failure

		RebuildCommitmentTotals is an Instance Action		
			default label is untranslatable
			restricted
			Parameters
				IsBatch        is Boolean
			Action Rules
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel
				invoke Delete BudgetTemplateGroupTotalRel
				for each UnreleasedCashLedgerGLDistributionsRel
					invoke RecalculateCommitmentAmounts each
				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    															= CashManagementGroup
					invoked.PrmBudgetEditGroup           															= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBAdjustment.BankTransactionCode				= BankTransactionCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBAdjustment.CashLedgerSourceRecord				= CashLedgerSourceRecord
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBAdjustment.CashLedgerReconciliationAdjustment	= CashLedgerReconciliationAdjustment
					invoked.PrmMode																					= BudgetEditMode.Hard	
					invoked.PrmBusinessClassName  					              									= "CashLedgerReconciliationAdjustment"
					invoked.PrmEditContext                      													= "Release"

		ApplyComments is an Instance Action
			valid when (CanUpdateComments)
			Parameters
				PrmCommentText		is a CommentText
					default label is "Comment"
			Action Rules
				CommentText			+= PrmCommentText					
																					









		UpdateCashLedgerSourceRecord is an Instance Action		
			restricted
			Parameters
				PrmCashLedgerSourceRecord	is a CashLedgerSourceRecord

			Action Rules								
				CashLedgerSourceRecord	= PrmCashLedgerSourceRecord
																					
		CompanyPeriodClosePostDateUpdate	is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is like CashManagementGroup
				PrmNewPostDate				is Date
				PrmPeriodEndDate			is Date
				PrmCashLedgerJobResult		is a CashLedgerJobResult
				PrmCompany					is a GeneralLedgerCompany
				PrmCloseDetail				is a CashLedgerJobResultDetail
			
			Parameter Rules
				PrmCashManagementGroup		required
				PrmNewPostDate				required
				PrmPeriodEndDate			required
				PrmCompany					required
				PrmCloseDetail				required
						
			Sort Order is ByCompany
				
			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup
				and    Company.OrigCompany		= PrmCompany

				and    Status.UnreleasedUnreconciled
            	and    PostDate <= PrmPeriodEndDate) 
            
			Action Rules
				Empty Set Rules
					if (PrmCloseDetail.CanClose)
						invoke CloseCompany PrmCloseDetail	
					
				Set Rules
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalCashLedgerJobResult = PrmCashLedgerJobResult
						LocalCompany = PrmCompany
						invoke Delete UnreleasedReconciliationAdjustmentsErrorRel
						
						if (PrmCloseDetail.CanClose)
							invoke CloseCompany PrmCloseDetail
			        	
				Instance Rules
					PostDate	= PrmNewPostDate
					include CheckForRelatedChanges
								
																					
