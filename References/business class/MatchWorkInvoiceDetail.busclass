MatchWorkInvoiceDetail is a BusinessClass
    owned by ma
    prefix is MWMAD

    Ontology
        symbolic key is MatchWorkInvoiceDetail

    Patterns

        disable AuditIndex
        disable Auditing
        disable EffectiveDated
      	disable DataTranslations
 
    Persistent Fields
    	Vendor
        Item
		ItemType
        MatchDetailKey
		EnteredUnitCost							is like UnitCost
            precision is DerivedNumberOfDecimalsCost
        EnteredQuantity             			is like Quantity
            precision is DerivedNumberOfDecimalsQuantity
        MatchAmount								is an InternationalCost
        MatchedQuantity							is like Quantity
            precision is DerivedNumberOfDecimalsQuantity
        MatchUnitCost							is like UnitCost
            precision is DerivedNumberOfDecimalsCost
        BuyUOMMatchedQuantity					is like Quantity
            precision is DerivedNumberOfDecimalsQuantity
		Selected								is Boolean
		MatchToReceipt							is Boolean
		MatchSub								is Numeric 3
		MatchedNotReceivedQuantity				is an InternationalAmount
		DifferenceAmount						is an InternationalCost
		RecordSource							is a RecSource
		CreateChargeback						is Boolean
        RetainagePercent            			is like Pct
        LineDistributionHasAmount				is Boolean								
        Location                    is an InventoryLocation

		MNRTaxMatchedNotReceivedUnitCost		is like UnitCost  				
		MNRTaxToleranceUnitCost					is like UnitCost				
		EnteredLandTaxUnitCost					is like UnitCost				
		MatchLandTaxUnitCost					is like UnitCost				
		ApprovedUnitCost						is like UnitCost				
		ApprovedLandTaxUnitCost					is like UnitCost				
		TaxableAmount							is an InternationalAmount 	

		NonTaxEnteredUnitCost					is like UnitCost				
		ApprovedAddOnChargeLandTaxUnitCost		is like UnitCost				
		EnteredAddOnChargeLandTaxUnitCost		is like UnitCost				
		NonTaxApprovedUnitCost					is like UnitCost				
		NonTaxMatchUnitCost						is like UnitCost				

		MatchReconQueueSet						is like MatchReconQueueSet
		ChargebackReason						is a ProcurementReasonCode
		SortSelect								is Numeric 1	
		ChargebackReference				        is a Reference

	Context Fields
		MatchReconQueue
		FinanceResource									
	Transient Fields
		UserElementGroup							
		OverrideDetail							is Boolean
		OverrideAOCDetail						is Boolean
		TermsCalculation														
		InvoiceCurrencyExchangeRate				is like Rate			
		CalculateTax												
		WorkDistributionGroup					is a MatchWorkDistributionGroup

	Local Fields
		LocalAutoMatchResult					is an AutoMatchResult
		TaxLineItemView							is a TaxLineItem view


		MatchedNotReceivedCount					is Numeric 3				
		CurrentReceipt							is like PurchaseOrderReceipt
		CurrentReceiptLine						is like PurchaseOrderReceiptLine
		CurrentContract							is like Contract
		CurrentContractLine						is like ContractLine
		

		ThisPurchaseOrderLine					is like PurchaseOrderLine
		ThisReceipt								is like PurchaseOrderReceipt
		ThisReceiptLine							is like PurchaseOrderReceiptLine

		LocalMatchSequence						is like MatchSequence

		WorkChargebackInvoice					is like PayablesInvoice			
		NewDistribution							is a PayablesInvoiceDistribution view
		OriginalInvoice							is like PayablesInvoice

		LocalOriginalInvoiceDetail				is like PayablesInvoiceDetail

		LocalCurrencyRelationship				is a CurrencyRelationship
		LocalMatchRuleToleranceGroup			is a MatchRuleToleranceGroup
		LocalMatchMessageToleranceGroup			is a MatchMessageToleranceGroup
		DistributionProcessLevel				is like PayablesProcessLevel
		LocalDefaultAccount						is a FinanceCodeBlock
		WorkToleranceAccount					is a FinanceCodeBlock
		LocalDistributionAccount				is a FinanceCodeBlock

        LocalCurrencyTable                      is a CurrencyTable
        LocalExchangeDate						is an ExchangeDate
		CurrencyWork							is a FromCurrencyExchangeGroup
		TranCurrRelationship					is a CurrencyRelationship
		TranCurrExchangeRate    				is a CurrExchangeRate
		IntrastatProcessing
		LocalTrigger							is Alpha 1
				
		Sub1									is Numeric 3
		I1										is Numeric 3
		I2										is Numeric 3
		I9										is Numeric 3
		IdxNonLanded							is Numeric 3
		NextSentence							is Boolean
		BypassPOUpdate							is Boolean
		BypassPOLineUpdate						is Boolean
		LocalCreateTaxDistribs					is Boolean 

		LocalCalculateTaxExecuted				is Alpha 1				


		UOMCalculation



		DistributionByAmount					is Boolean						

		SkipNonLanded							is Boolean
		ThisOnePassed							is Boolean

		CalculateMatchNotReceivedWriteoffQuantity	is Boolean					
		ChargebackMatchedNotReceived			is Numeric 1						
		MNRDistrib								is Boolean						
		TaxTolerance							is Boolean						
		PayablesChargebackIndicator				is Boolean						
		Include993								is Boolean
		CreateMessage							is Boolean						
		PrepaidTaxInventoriedItemMatchesReceipt is Boolean
		Approved 								is AlphaUpper 1	 				
            States
                Yes                  value is "Y"
                No                   value is "N"
                Disapproved          value is "D"
                MessageExists        value is "M"
                MessagePendingAction value is "P"
                MatchPrepayment      value is "R"



		BestReceiptDate							is Date						


		InvoiceMatchedNotReceived				is Boolean					
		UpdateQuantity							is Boolean					
		PendingDistributions					is Boolean					
		ExcessQuantity							is like Quantity			
		CatchWeightExcessQuantity				is like Quantity

		

		TotalMatchedQuantity					is like Quantity			
		TotalVBuyMatchQuantity					is like Quantity    		
		TotalMessageVBuyMatchQuantity			is like Quantity    		
		MessageVendorPriceMatchQuantity			is like Quantity    		
		ReceiptLineReceivedQuantity				is like Quantity    		
		TempMatchedQuantity						is like Quantity    		
		TempVbuyMatchQuantity					is like Quantity    		
		PreviousMatchedQuantity					is like Quantity    		
		PreviousVBuyMatchQuantity				is like Quantity    		
		ServiceLineChargebackAmount				is an InternationalAmount   
		ServiceLineChargebackQuantity			is a Quantity				
		ServiceLineChargebackUnitCost			is a UnitCost				
		SaveServiceLineChargebackQuantity 		is a Quantity				

		HasLastMatchUnitCost 					is Boolean
		CostUnder								is Boolean					
		CostOver								is Boolean					
		QuantityUnder							is Boolean					
		QuantityOver							is Boolean					
		DistributionDetailMatchAmount			is an InternationalAmount	
		RemainingQuantity						is a Quantity				
		VBuyRemainingQuantity					is a Quantity				
		VBuyCatchWeightRemainingQuantity		is a Quantity 
		SkipPostings							is Boolean					

		TotalDistributionAmount					is an InternationalAmount	
		NewOpenPurchaseOrderAmount				is an InternationalAmount	
		ReceiptLineVbuyReceiptQuantity			is a Quantity				
		ReceivedNotInvoicedQuantity				is a Quantity				
		LocalEnteredUnitCost					is like UnitCost				
		LocalMatchUnitCost						is like UnitCost				
		AdjustedMatchUnitCost					is like UnitCost				
		RetainedMatchedAmount					is an InternationalAmount  	
		LocalMatchedQuantity					is a Quantity				
		VendorBuyMatchedQuantity				is a Quantity				

		LocalUnmatchedQuantity					is a Quantity				
		LocalEnteredLandTaxUnitCost				is like UnitCost				

		LocalConvertedQuantity					is a Quantity				
		LocalVendorPriceQuantity				is a Quantity				
		LocalStockQuantity						is a Quantity				
		NewPOLineMatchedQuantity				is a Quantity				
		NewPOLineMatchedAmount					is an InternationalCost  	
		NewPOLineMemoQuantity					is a Quantity				
		NewPOLineVendorPriceUOM					is like UnitOfMeasure  		
		ProcessMatchExcess						is Numeric 1				
			States
				Chargeback						value is 1
				Writeoff						value is 2
				MatchedNotReceived				value is 3
				
		NewPOLineChargebackQuantity				is a Quantity				
		NewPOLineChargebackAmount 				is an InternationalAmount	
		NewPOLineWriteoffQuantity				is a Quantity				
		NewPOLineMatchedNotReceived				is a Quantity				
		NewCatchWeightMatchQuantity				is a Quantity
		NewCatchWeightChargebackQuantity		is a Quantity
		NewCatchWeightSubstituteQuantity		is a Quantity
		NewCatchWeightRejectedQuantity			is a Quantity
		NewCatchWeightReturnedQuantity			is a Quantity
		NewCatchWeightArchivedQuantity			is a Quantity
		NewCatchWeightMemoQuantity				is a Quantity
		NewCatchWeightWriteOffQuantity			is a Quantity
		NewCatchWeightMNRQuantity				is a Quantity

		NewInvoiceLinkMatchedNotReceivedQuantity	is a Quantity			
		NewInvoiceLinkChargebackQuantity		is a Quantity				
		NewInvoiceLinkWriteoffQuantity			is a Quantity				
		NewInvoiceLinkMemoQuantity				is a Quantity				
		NewReceiptLineMatchedQuantity 			is a Quantity 				
		NewInvoiceLinkMNRReceipt				is like PurchaseOrderReceipt
		NewInvoiceLinkMNRUnitCost				is a UnitCost				
		NewInvoiceLinkMNRAmount					is an InternationalAmount	
		NewInvoiceLinkMNRToleranceQuantity		is a Quantity				
		NewInvoiceLinkMNRToleranceUnitCost		is a UnitCost				
		NewInvoiceLinkMNRToleranceAmount		is an InternationalAmount	
		NewInvoiceLinkMNRTaxUnitCost			is a UnitCost				
		NewInvoiceLinkMNRToleranceTaxUnitCost	is a UnitCost				
		NewInvoiceLinkICVQuantity				is a Quantity				
		NewInvoiceLinkICVUnitCost				is a UnitCost				
		NewInvoiceLinkICVAmount					is an InternationalAmount	
		NewInvoiceLinkMatchUnitCost				is a UnitCost				
		NewInvoiceLinkICVToleranceQuantity		is a Quantity				
		NewInvoiceLinkICVToleranceUnitCost		is a UnitCost				
		NewInvoiceLinkICVToleranceAmount		is an InternationalAmount	
		NewInvoiceLinkPOCostUpdate 				is an InternationalAmount	


		LocalMatchedAmount 						is an InternationalAmount 	




        WorkReceiptConversionRate    			is an EnteredCurrencyConversionRate  

		ChargebackDetailSequenceNumber			is a SequenceNumber			
				
		DetailsMatchedQuantity              	is a Quantity				
		DetailsMatchUnitCost                	is a UnitCost				
		DetailsVBuyMatchedQuantity          	is a Quantity				

		DetailsSequenceNumber					is a SequenceNumber			
		DetailsAddOnCharge						is like AddOnCharge			

		DetailsInvoiceType						is like InvoiceType			
        DetailsBuyUOMMatchedQuantity       		is a Quantity				
        DetailsEnteredUnitCost					is a UnitCost				
        DetailsEnteredQuantity					is a Quantity				
		DetailsLandedAddOnCharge				is Boolean					

		DetailsTaxCode							is a TaxCode				
		DetailsProductTaxCategory				is like ProductTaxCategory	

		DetailsTaxAmount						is an InternationalAmount	
		
		MatchedNotReceivedExchangeVariance		is Boolean					
		CostChargeback							is Boolean					

		DistributionUnitCost					is a UnitCost				
		CurrentCostDifference					is a UnitCost				
		CostDifference							is a UnitCost				

		MatchedNotReceivedWriteoffQuantity		is a Quantity				
		WorkMatchedNotReceivedQuantity			is a Quantity				
		WorkWriteoffQuantity					is a Quantity				

		WorkArchiveQuantity						is a Quantity				
		PendingDistributionAmount				is an InternationalAmount	
		WorkVarianceQuantity					is a Quantity				

		DistributionCompany						is like Company				
		WorkPoDate								is Date						
		AmMatchedQuantity						is like Quantity  			
		RetainedTotalAmount						is an InternationalAmount   
		WorkAccrualCode							is like PayablesAccrualCode	
		
		WorkLandedAddOnCharge					is Boolean					
		WorkRetainLandedAddOnCharge				is Boolean					
		

					
		WorkPostingSwitch						is Numeric 1				
        	States
        		TaxGoods			value is 1
        		TaxVariance			value is 2
        		TaxTolerance		value is 3
        		MatchNotReceived	value is 4
        		Writeoff			value is 5
        		TaxWriteoff			value is 6

		WorkInvoiceDetailMatchedNotReceivedQuantity is a Quantity			
		WorkChargebackQuantity 					is a Quantity				
		WorkPolineMatchedQuantity				is a Quantity				

		MtxTotalTaxAmt							is an InternationalAmount	
		MtxPrevMatchQty							is a Quantity				
		MtxMatchedQuantity						is a Quantity
		MtxMatchUnitCost						is a UnitCost

		MtxTaxableAmount						is an InternationalAmount

		WorkTotalTaxAmount 						is an InternationalAmount	
		ChargebackTaxableAmount 				is an InternationalAmount	

		RemainingUnitCost						is a UnitCost				
		SaveRemainingUnitCost					is a UnitCost				
		LastTaxCode								is like TaxCode				
		RemainingAmount						    is like InternationalAmount



		PurchaseOrderInvoiceTax 				is an InternationalAmount	


        


		TaxWorkCalculateTaxRate					is a CurrencyRate			
		TaxWorkAccrualFlag						is Alpha 1					
		TaxWorkCalculateAccrual 				is Alpha 1					
		TaxWorkTaxableAmount					is an InternationalAmount	






		MessageQuantityDifference				is like Quantity			
		MessageUnitCostDifference				is like UnitCost			
		MessageExtendedDifference				is an InternationalAmount	
		MessageOverQuantityPercentDifference	is like Percent				
		MessageUnderQuantityPercentDifference	is like Percent				
		MessageOverUnitPercentDifference		is like Percent				
		MessageUnderUnitPercentDifference		is like Percent				
		MessageOverTotalPercentDifference		is like Percent				
		MessageOverCtPercentDifference			is like Percent				
		MessageUnmatchedQuantity				is like Quantity			
		MessageReasonCode 						is like ReasonCode  		
        MessageType                 			is AlphaUpper size 2		
            States
                Cost          value is "C"
                Quantity      value is "Q"
                Item          value is "I"
                NoReceiptLine value is "NR"
        MessageSubType              			is AlphaUpper size 1		
            States
                ItemDifference      value is blank
                InvoiceOverReceipt  value is "O"
                InvoiceUnderReceipt value is "U"
        MessageStatus							is Numeric 1				
            States
                Unreleased    value is 0
                Open          value is 1
                PendingAction value is 2
                Closed        value is 9

		WorkCostDifference 						is like UnitCost			
		WorkCostPercentAmount 					is an InternationalAmount	
		WorkQuantityDifference					is like Quantity  			
		WorkQuantityPercentAmount 				is an InternationalAmount	
		WorkPercent								is Percent size 10.7 

		WorkCost								is like InternationalCost
		WorkQuantity							is like Quantity
		LocalQuantity							is like Quantity
		LocalMatchAmount						is like InternationalAmount
		LocalEngineTaxAmount						is an InternationalAmount
		LocalOpenToMatchQuantity				is a Quantity
		
		SaveUnmatchedQuantity					is a Quantity				
		FirstDistQuantity						is a Quantity				

		DetailDistAmount						is a Quantity				

		RemainingDistAmount						is an InternationalAmount	
		WorkDistQuantity 						is a Quantity  				





		LocalTotalNewTaxAmount					is an InternationalAmount	
		LocalTotalAddOnChargeAmount				is an InternationalAmount	
				


		PerformedFrom							is Numeric 1				
			States
				Match			value is 1
				BatchRelease	value is 2
				POADI			value is 3
				MA61			value is 4
				Contract    	value is 5

		PrepaidTaxInventoriedItem               is Numeric 1
		    States
		        MatchesReceipt			value is 1
		        DoesNotMatchReceipt		value is 2
		        
		TotalTax3dp								is an InternationalAmount	
		DetailsTax3dp							is an InternationalAmount	
		TotalGoods								is an InternationalAmount	
		CalcTaxRate								is an OrigRate					


		UsePODate								is Boolean					
		TemporaryTaxType						is a TaxType				
		POTaxDate								is Date						
		WorkTaxAmount							is an InternationalAmount	
		WorkTaxUnitCost							is a UnitCost				

				
		ConvertedCost							is like UnitCost			
		LocalUpdatedCost						is like UnitCost
		
        WorkVendorPriceUOM                   	is like UnitOfMeasure		
        WorkVendorPriceUOMMultiplier         	is like UOMMultiplier		
        WorkVendorBuyUOM                   		is like UnitOfMeasure		
        WorkVendorBuyUOMMultiplier         		is like UOMMultiplier		

		LocalTaxTableIndex						is Numeric 2
		TaxOnly									is Boolean
		LocalTaxCode							is a TaxCode
		CalculateTaxCode						is a TaxCode
		UseVariance								is Boolean
		TaxRuleBlockCalled						is Boolean		

		LocalLocation							is like InventoryLocation
		
		SaveNonTaxEnteredUnitCost				is like UnitCost
		
		LocalTaxDistribUpdateDone				is Boolean
		LocalSumDistribUpdateDone				is Boolean


		SubtractPOTaxCodeDistribAmount			is Boolean
	    LocalTotalInvoiceLandedTax				is like InternationalCost
	    LocalTotalInvoiceNonLandedTax			is like InternationalCost
	    LocalTotalPOLandedTax					is like InternationalCost
	    LocalTotalPONonLandedTax				is like InternationalCost
	    LocalAmount								is like InternationalCost
		LocalRate								is like InternationalCost
		Idx										is Numeric 3
		LocalVertexDistributionAccount      	is a FinanceCodeBlock
		LocalInventoryLocation					is like InventoryLocation

		
	Derived Fields

		SelectedLinesCount is a DerivedField 
			type is Numeric 5 
			restricted 
			return (instance count of SelectedReceiptLineRel)

		TotalLinesCount is a DerivedField 
			type is Numeric 5 
			restricted 
			return (instance count of MatchWorkPOLineRel)

        ReceiptLineTally is a DerivedField
            type is Alpha size 20
            return SelectedLinesCount + "/" + TotalLinesCount

		ThisReceiptInvoiceLinkMatchedQuantity is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ThisReceiptInvoiceLinkRel.MatchedQuantity)
			
		ThisReceiptInvoiceLinkTotalMatchedNotRecievedQuantity is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ThisReceiptInvoiceLinkRel.MatchedNotReceivedQuantity)			

		ThisReceiptInvoiceLinkTotalIcvTolUcst is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ThisReceiptInvoiceLinkRel.IcvTolUcst)

		TotalThisReceiptInvoiceLinkIcvUnitCost is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ThisReceiptInvoiceLinkRel.IcvUcst)

		TotalThisReceiptInvoiceLinkMNRTaxUnitCost is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ThisReceiptInvoiceLinkRel.MatchedNotReceivedTaxUnitCost)

		TotalThisReceiptInvoiceLinkMNRToleranceUnitCost is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum ThisReceiptInvoiceLinkRel.MnrTolUcst)
			
		ReceiptInvoiceLinkMatchedQuantity is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum PurchaseOrderReceiptInvoiceLinkMatchRel.MatchedQuantity)
			
		ReceiptInvoiceLinkMatchedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (sum PurchaseOrderReceiptInvoiceLinkMatchRel.MatchAmount)
			
		DerivedExtendedAmount is a DerivedField
			type is like InternationalCost
	            precision is DerivedNumberOfDecimalsQuantity
			restricted
			return (EnteredQuantity * EnteredUnitCost)
    
		DerivedExtendedMatchAmount is a DerivedField
			type is like InternationalCost
	            precision is DerivedNumberOfDecimalsQuantity
			return (MatchedQuantity * MatchUnitCost)

		SelectedReceiptExtendedCost is a DerivedField
			type is like InternationalCost
	            precision is DerivedNumberOfDecimalsQuantity
	        if (PayablesInvoiceDetail.PurchaseOrderReceipt entered)
	            return sum SelectedReceiptLineRel2.DerivedReceiptExtendedCost
	        else
				return sum SelectedReceiptLineRel.DerivedReceiptExtendedCost

		SelectedReceiptLineDifference is a DerivedField 
			type is like InternationalAmount 
			return DerivedExtendedMatchAmount - SelectedReceiptExtendedCost

		OverbillAmount is a DerivedField
			type is like InternationalCost
	            precision is DerivedNumberOfDecimalsQuantity
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				if (DerivedExtendedMatchAmount > DerivedContractLineExtended)
					return (DerivedExtendedMatchAmount - DerivedContractLineExtended)
			else
				if (DerivedExtendedMatchAmount > SelectedReceiptExtendedCost)
					return (DerivedExtendedMatchAmount - SelectedReceiptExtendedCost)
								    
		NetAmount is a DerivedField
			type is like InternationalCost
	            precision is DerivedNumberOfDecimalsQuantity
			if (PayablesInvoice.MatchProcessType.ServiceContract)
				return (DerivedExtendedMatchAmount - DerivedContractLineExtended)
			else
				return (DerivedExtendedMatchAmount - SelectedReceiptExtendedCost)
								    
		DerivedItemType is a DerivedField
			type is Alpha 1
			if (ItemType.Inventoried)
				return "I"
			else
			if (ItemType.NonStock)
				return "N"
			else
			if (ItemType.Special)
				return "X"
			else
			if (ItemType.Service)
				return "S"

		ChargebackYesOrNo is a DerivedField
			type is Alpha 10
			restricted
			if (CreateChargeback)
				return "Yes"
			else
				return "No"

		TotalAOCAmount is a DerivedField
			type is like InternationalAmount
	            precision is PayablesInvoice.InvoiceCurrency.NumberOfDecimals
	        restricted
			return (sum PayablesInvoiceAddOnChargeRel.DerivedDistributionAmount)

		DerivedContractCost is a DerivedField
		    type is like UnitCost
		    if (ContractLine.ServiceCode.Amount)
				return PayablesInvoiceDetail.ContractLine.DerivedRemainingAmountInUse
			else
				return PayablesInvoiceDetail.ContractLine.DerivedMatchBaseCost

		DerivedContractLineExtended is a DerivedField
		    type is like InternationalAmount
		    return DerivedContractCost * MatchedQuantity

		DerivedContractLineDiscrepancy is a DerivedField
		    type is like InternationalAmount
		    return DerivedExtendedMatchAmount - DerivedContractLineExtended

		SingleSpace is a StringField
			type is Alpha 1
			restricted
			" "

		DerivedNumberOfDecimalsQuantity is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsQuantity
			else
			if (ItemType.Special
			or  ItemType.Service)
				InventoryCompanyRel.NumberOfDecimalsQuantity
			else
				4
				
		DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.NonStock
			or  ItemType.Inventoried)
				Item.NumberOfDecimalsCost
			else
			if (ItemType.Special
			or  ItemType.Service)
				InventoryCompanyRel.NumberOfDecimalsCost
			else
				8

		DerivedIntrastatYear is a DerivedField
			type is like FiscalYear
			restricted
			return PayablesInvoice.InvoiceDate year
			
		OutputNumberOfDecimals is a DerivedField		
			type is Numeric 1
			if (PayablesInvoice.InvoiceCurrency entered)
				return PayablesInvoice.InvoiceCurrency.NumberOfDecimals
			else
				return 2


		DerivedRoundTo is a DerivedField		
    		type is Decimal 5.4
    		restricted
    		if (OutputNumberOfDecimals = 2)
    			return .01
    		else
    		if (OutputNumberOfDecimals = 0)
    			return 1
    		else
    		if (OutputNumberOfDecimals = 3)
    			return .001
    		else
    		if (OutputNumberOfDecimals = 4)
    			return .0001

		DerivedRoundToCost is a DerivedField
			type is like RoundTo
			restricted
			if (DerivedNumberOfDecimalsCost = 8)
				return .00000001
			else
			if (DerivedNumberOfDecimalsCost = 7)
				return .0000001
			else
			if (DerivedNumberOfDecimalsCost = 6)
				return .000001
			else
			if (DerivedNumberOfDecimalsCost = 5)
				return 0.00001
			else
			if (DerivedNumberOfDecimalsCost = 4)
				return 0.0001
			else
			if (DerivedNumberOfDecimalsCost = 3)
				return 0.001
			else
			if (DerivedNumberOfDecimalsCost = 2)
				return 0.01
			else
			if (DerivedNumberOfDecimalsCost = 1)
				return 0.1
			else
			if (DerivedNumberOfDecimalsCost = 0)
				return 1

		DerivedTaxPointDate2 is a DerivedField	
			type is Date
			restricted
			if (DetailsTaxCode.DerivedTaxPoint = "G")
				return PayablesInvoice.DistributionDate
			else
			if (DetailsTaxCode.DerivedTaxPoint = "P" 
			and PayablesInvoice.DerivedPaymentDate entered)
				return PayablesInvoice.DerivedPaymentDate
			else
				return PayablesInvoice.InvoiceDate

		QuantityAlertMsg is a DerivedField
			type is MessageField
			if (ItemType.Service)
				return QuantityExceedsWhatIsAvailableMsg
			else
				return EnteredQtyGreaterThanOpenToMatchQtyMsg
				
		QuantityExceedsWhatIsAvailableMsg is a MessageField
		    "QuantityExceedsWhatIsAvailableOnPurchaseOrderLine"
		    
		EnteredQtyGreaterThanOpenToMatchQtyMsg is a MessageField
			"EnteredQuantityIsGreaterThanOpenToMatchQuantity"

		CostAlertMessage is a MessageField 
			"CostDifferenceFromPurchaseOrderLineOutsideOfTolerance"

	Conditions

		AllReceiptLinesSelected 
			when (UnselectedReceiptLineRel not exists)

		AtLeastOneReceiptLineSelected 
			when (SelectedReceiptLineRel exists)

		CanBeSelected 
			when (!MatchWork.FinanceResourceActorRel.RestrictMatchedNotReceived
			or    SelectedReceiptLineRel exists
			or    UnselectedReceiptLineRel not exists)

		UnselectedReceiptLinesExist 
			when (UnselectedReceiptLineRel exists)

		MemoInvoice
			restricted
			when ((PayablesInvoice.InvoiceType.DebitMemo
			or     PayablesInvoice.InvoiceType.CreditMemo)
			and   !PayablesInvoice.MatchProcessType.AOCOnly
			and   !PayablesInvoice.MatchProcessType.Expense)
	
		HasAOC
			restricted
			when (PayablesInvoiceAddOnChargeRel exists)

		DoChargeback
			restricted
			when ((CreateChargeback
			or    MatchWorkInvoiceRel.Chargeback)
			and !CreateMatchReconMessage)			

		CreditForRebill
			restricted
			when (PayablesInvoice.InvoiceType.CreditMemo
			and   PayablesInvoice.InvoiceSource = "Y" 
			and   PayablesInvoice.MatchInvoiceReferenceRel exists)

		InternalDetailsExist
			restricted
			when (InternalDetailsRel exists)
												
		IsCatchWeight
			when (Item.CatchWeightCode.AllTransactionsRequireBoth
			or 	  Item.CatchWeightCode.ReceiptRequiresBoth)			

		OneSourceGeneric
			when (TaxEntityRel.ThirdParty.Sabrix
			and   PayablesInvoice.TaxConfigurationRel.OneSourceVersionType.Generic)

		CreateMatchReconMessage		
			when (Company.CreateReconMessageForLines		
			and MatchReconQueue.DerivedWithDiscrepancy
			and MatchReconQueue.ChargebackType.Option2)

		HasCostMessages 
			when (AcceptCostMessageRel exist)

	Relations
		MatchWorkReceiptLineRel
			one-to-one relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
				related.PurchaseOrderReceipt		= PayablesInvoiceDetail.PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PayablesInvoiceDetail.PurchaseOrderReceiptLine

		MatchWorkPOLineRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine

		SelectedReceiptLineRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
			Instance Selection
				where (related.Selected)

		UnselectedReceiptLineRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
			Instance Selection
				where (!related.Selected)

		SelectedReceiptLineRel2
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
				related.PurchaseOrderReceipt		= PayablesInvoiceDetail.PurchaseOrderReceipt
				related.PurchaseOrderReceiptLine	= PayablesInvoiceDetail.PurchaseOrderReceiptLine
			Instance Selection
				where (related.Selected)

		MatchWorkPOLineLocationRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
			Instance Selection
				where (related.ShipToLocation = PayablesInvoice.Location)

		MatchWorkReceiptLineForMDKRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey

		MatchWorkReceiptLineForPORel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.PurchaseOrder				= PurchaseOrder
			Instance Selection
				where (related.Item = Item
				and    related.Selected)				

		MatchWorkReceiptLineForPOLineRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine

		MatchWorkNoReceiptLineRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine

		MatchWorkReceiptItemRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
			Instance Selection
				where (related.Item	= Item
				and    related.PurchaseOrderLine = PurchaseOrderLine)

		MatchWorkReceiptItemForLocationRel
			one-to-many relation to MatchWorkReceiptLine
			Field Mapping uses ByVendorMatchDetailKey
				related.MatchWork					= MatchWork
				related.Company						= Company
				related.Vendor						= Vendor
				related.ItemType					= ItemType
				related.MatchDetailKey				= MatchDetailKey
			Instance Selection
				where (related.ItemType	= ItemType
				and    related.ShipToLocation = PayablesInvoice.Location)

		MatchWorkInvoiceRel
			one-to-one relation to MatchWorkInvoice
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= PayablesInvoice

		PurchaseOrderLineDistributionRel
			one-to-many relation to PurchaseOrderLineDistribution
			Field Mapping uses symbolic key
                related.Company							= Company
                related.PurchaseOrder					= PurchaseOrder
            Instance Selection
                where (related.PurchaseOrderLine		= PurchaseOrderLine
                and    related.AddOnCharge				= blank)

		InvoiceDistributionsForMiscellaneousDetailRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrderLine							= blank
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.AddOnCharge 								= blank
				and     related.TaxCode										= blank
				and     related.NotMatchCreated)
			
		TaxDistributionsForMiscellaneousDetailRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrderLine							= blank
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.AddOnCharge 								= blank
				and     related.TaxCode										entered
				and     related.NotMatchCreated)
			
		InvoiceDistributionsForPurchaseOrderLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= PurchaseOrderLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.AddOnCharge 								= blank
				and     related.TaxCode										= blank
				and     related.NotMatchCreated)
			
		TaxDistributionsForPurchaseOrderLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchaseOrder								= PurchaseOrder
				and     related.PurchaseOrderLine							= PurchaseOrderLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.AddOnCharge 								= blank
				and     related.TaxCode										entered
				and     related.NotMatchCreated)
			
  		InvoiceDistributionsForContractLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchasingContract							= Contract
				and     related.ContractLine								= ContractLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.AddOnCharge 								= blank
				and     related.TaxCode										= blank
				and     related.NotMatchCreated)
			
		TaxDistributionsForContractLineRel  
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PayablesInvoice										= PayablesInvoice
			Instance Selection
				where  (related.PurchasingContract							= Contract
				and     related.ContractLine								= ContractLine
				and     related.PayablesInvoiceDetail   					= PayablesInvoiceDetail
				and     related.AddOnCharge 								= blank
				and     related.TaxCode										entered
				and     related.NotMatchCreated)
			
		ContractLineDistributionRel
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup					= PayablesCompanyRel.VendorGroup
                related.Contract     					= Contract
                related.ContractLine					= ContractLine

        PayablesCompanyRel
            one-to-one relation to PayablesCompany
            Field Mapping uses symbolic key
                related.Company = Company

		SelectedMatchWorkReceiptForPurchaseOrderRel
			one-to-many relation to MatchWorkReceipt
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
			Instance Selection
				where (related.PurchaseOrder		= PurchaseOrder
				and    related.Selected)

		InventoryLocationRel
			one-to-one relation to InventoryLocation
			Field Mapping uses symbolic key
				related.Company 						= Company
				related.InventoryLocation				= PayablesInvoiceDetail.PurchaseOrderReceiptLine.ShipToLocation

        POLineInvoiceMessageRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses Set1
                related.Company						= Company
                related.Vendor						= Vendor
                related.PayablesInvoice				= PayablesInvoice
     			related.PurchaseOrder				= PurchaseOrder
			Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and    related.Status.Closed
				and    related.ApplicationAction.AdjustCost
				and    related.PurchaseOrderLine		= PurchaseOrderLine)

		ThisReceiptRel
			one-to-one relation to MatchWorkReceipt
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PurchaseOrderReceipt		= ThisReceipt
			
		ThisReceiptLineRel
			one-to-one relation to MatchWorkReceiptLine
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= ThisPurchaseOrderLine
				related.PurchaseOrderReceipt		= ThisReceipt
				related.PurchaseOrderReceiptLine	= ThisReceiptLine
			










			
		ThisPurchaseOrderReceiptLineRel
			one-to-one relation to PurchaseOrderReceiptLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.PurchaseOrderReceipt		= ThisReceipt
				related.PurchaseOrderReceiptLine	= ThisReceiptLine

		IntrastatDetailRel
			one-to-one relation to IntrastatDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
				related.TaxEntity						= Company.AccountingEntity
				related.IntrastatHeader.FiscalYear		= DerivedIntrastatYear
				related.IntrastatHeader.IntrastatNumber	= ThisPurchaseOrderReceiptLineRel.IntrastatNumber
				related.IntrastatDetail					= ThisReceiptLine
						
		IntrastatHeaderRel
			one-to-one relation to IntrastatHeader
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.FinanceEnterpriseGroup
				related.TaxEntity						= Company.AccountingEntity
				related.IntrastatHeader.FiscalYear		= DerivedIntrastatYear
				related.IntrastatHeader.IntrastatNumber	= ThisPurchaseOrderReceiptLineRel.IntrastatNumber
						
		PurchasingCompanyRel
			one-to-one relation to PurchasingCompany
			Field Mapping uses symbolic key
				related.Company						= Company

		ThisReceiptInvoiceLinkRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
                related.Company                 											= Company
			Instance Selection
                where (related.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchWork.OutMatchObjectID
                and    related.PurchaseOrderReceiptInvoiceLink.AddOnCharge	    			= blank
                and    related.PurchaseOrderLine											= PurchaseOrderLine
				and   (related.Type															= "MA"
				or     related.Type															= "RC")
				and   (related.Status														= 1
				or     related.Status														= 2))

		PurchaseOrderReceiptInvoiceLinkMatchRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
                related.Company                 											= Company
			Instance Selection
                where (related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt			= CurrentReceipt
                and    related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine    	= CurrentReceiptLine
				and    related.Type															= "MA"
				and    related.Status														= 1
				and    related.PurchaseOrderReceiptInvoiceLink.AddOnCharge					= blank)

		PurchaseOrderReceiptInvoiceLinkLastCostRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set3
                related.Company                 											= Company
			Instance Selection
                where (related.PurchaseOrder												= PurchaseOrder
                and    related.PurchaseOrderLine	    									= PurchaseOrderLine
				and    related.Status														= 1
				and   (related.Type															= "PO"
				or     related.Type															= "CS"))

		PurchaseOrderLastCostRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set3
                related.Company                 											= Company
			Instance Selection
                where (related.PurchaseOrder												= PurchaseOrder
                and    related.PurchaseOrderLine	    									= PurchaseOrderLine
				and    related.Status														= 1
				and    related.Type															= "PO")

		ContractLineLinkLinkLastCostRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses Set3
                related.Company                 											= Company
			Instance Selection
                where (related.PurchaseOrder												= blank
                and    related.PurchaseOrderLine	    									= blank
                and    related.Contract														= Contract
                and    related.ContractLine													= ContractLine
				and    related.Status														= 1
				and    related.Type															= "CS")

		ThisReceiptAndPayablesInvoiceLinkRel
			one-to-many relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
                related.Company                 											= Company
			Instance Selection
                where (related.PayablesInvoice												= PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice
                and    related.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchWork.OutMatchObjectID
                and    related.PurchaseOrderReceiptInvoiceLink.AddOnCharge	    			= blank
                and    related.PurchaseOrderLine											= PurchaseOrderLine
				and   (related.Type															= "MA"
				or     related.Type															= "RC")
				and   (related.Status														= 1
				or     related.Status														= 2))

		ThisReceiptInvoiceLinkExactRel
			one-to-one relation to PurchaseOrderReceiptInvoiceLink
			Field Mapping uses symbolic key
                related.Company                 											= Company
                related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt				= ThisReceipt
                related.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine    		= ThisReceiptLine
                related.PurchaseOrderReceiptInvoiceLink.MatchObjectID						= MatchWork.OutMatchObjectID
                related.PurchaseOrderReceiptInvoiceLink.MatchSequence    					= LocalMatchSequence
                related.PurchaseOrderReceiptInvoiceLink.AddOnCharge	    					= blank

       	TaxEntityRel				 
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
                related.TaxEntity 				= Company.AccountingEntity
				
		TaxEngineTaxDetailRel
			one-to-many relation to TaxEngineTaxDetail
			Field Mapping uses ByCompanyInvoice
				related.Company					= Company
				related.Invoice					= PayablesInvoice.Invoice
				related.PONumber				= PurchaseOrder
				related.Vendor					= Vendor
                related.OrderLineNumber         = PurchaseOrderLine

				
        ReceiptInvoiceLinkMatchObjIDRel
            classic name is POMATCHOBJ
            one-to-many relation to PurchaseOrderReceiptInvoiceLink
            Field Mapping uses Set2
                related.Company                                       = Company
                related.PurchaseOrderReceiptInvoiceLink.MatchObjectID = MatchWork.OutMatchObjectID
            Instance Selection
                where (related.PurchaseOrder									= PurchaseOrder
                and    related.PurchaseOrderLine	    						= PurchaseOrderLine
                and    related.PurchaseOrderReceiptInvoiceLink.AddOnCharge not entered
				and    related.Type = "MA"
				and    !related.Status.Cancelled)
                
        InventoryCompanyRel
            one-to-one relation to InventoryCompany
            Field Mapping uses symbolic key
                related.Company = Company

		AdjustCostMessageRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses Set1
                related.Company						= Company
                related.Vendor						= Vendor
                related.PayablesInvoice				= PayablesInvoice
     			related.PurchaseOrder				= PurchaseOrder
     			related.PurchaseOrderLine			= PurchaseOrderLine
     			related.Contract					= Contract
     			related.ContractLine				= ContractLine
                related.PayablesInvoiceDetail		= PayablesInvoiceDetail
			Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and    related.ApplicationAction.AdjustCost)

		AcceptCostMessageRel
            one-to-many relation to MatchInvoiceMessage
            Field Mapping uses Set1
                related.Company						= Company
                related.Vendor						= Vendor
                related.PayablesInvoice				= PayablesInvoice
     			related.PurchaseOrder				= PurchaseOrder
     			related.PurchaseOrderLine			= PurchaseOrderLine
     			related.Contract					= Contract
     			related.ContractLine				= ContractLine
                related.PayablesInvoiceDetail		= PayablesInvoiceDetail
			Instance Selection
				where (related.MatchMessageOrigin.PoCost
				and    related.ApplicationAction.AcceptWorkInSmartRecon)

		MatchMessageToleranceRel
			one-to-one relation to MatchMessageTolerance
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= MatchWork.MatchRule.FinanceEnterpriseGroup
				related.MatchRule						= MatchWork.MatchRule
						
		CurrentContractLineRel
			one-to-one relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup					= PayablesCompanyRel.VendorGroup
                related.Contract     					= CurrentContract
                related.ContractLine					= CurrentContractLine

		ItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company							= Company
				related.InventoryLocation				= LocalLocation
				related.Item							= Item

		InventoryCostHistoryPOLineRel
			one-to-one relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company 										= Company
				related.InventoryLocation								= PayablesInvoiceDetail.Location
				related.Item											= Item
				related.InventoryTransaction							= PurchaseOrder
				related.InventoryCostHistory.TransactionSystemCode  	= "PO"			
				related.InventoryCostHistory.LineNumber					= PurchaseOrderLine
				related.InventoryCostHistory.ComponentSequence			= 0

		InventoryCostHistoryReceiptLineRel
			one-to-one relation to InventoryCostHistory
			Field Mapping uses symbolic key
				related.Company 										= Company
				related.InventoryLocation								= PayablesInvoiceDetail.Location
				related.Item											= Item
				related.InventoryTransaction							= ThisReceipt
				related.InventoryCostHistory.TransactionSystemCode  	= "PO"			
				related.InventoryCostHistory.LineNumber					= ThisReceiptLine
				related.InventoryCostHistory.ComponentSequence			= 0

        MatchWorkReceiptLinesRel
            one-to-many relation to MatchWorkReceiptLine
            Field Mapping uses ByPurchaseOrderReceipt
				related.MatchWork				= MatchWork
                related.Company                 = Company
                related.PurchaseOrder 			= PurchaseOrder
            Instance Selection
                where (related.ShipToLocation          = Location
                and    related.MatchDetailKey          = MatchDetailKey
                and    related.PurchaseOrderLine       = PurchaseOrderLine)

        SortedMatchWorkReceiptLinesRel
            one-to-many relation to MatchWorkReceiptLine
            Field Mapping uses ByPurchaseOrderReceipt
				related.MatchWork				= MatchWork
                related.Company                 = Company
                related.PurchaseOrder 			= PurchaseOrder
            Instance Selection
                where (related.SortNumber entered)

		PurchaseOrderSpreadAddOnChargeRel
			one-to-one relation to PurchaseOrderSpreadAddOnCharge
			Field Mapping uses symbolic key
				related.Company 									= Company
				related.PurchaseOrder								= PurchaseOrder
				related.AddOnCharge									= DetailsAddOnCharge

		PayablesInvoiceAddOnChargeRel
			one-to-many relation to PayablesInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company					= Company
				related.PayablesInvoice			= PayablesInvoice
				related.PurchaseOrder			= PurchaseOrder
				related.PurchaseOrderLine		= PurchaseOrderLine

		InvoiceDetailAOCsRel
			one-to-many relation to MatchWorkInvoiceAddOnCharge
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= PayablesInvoice
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine

		ReceiptLineAOCsRel
			one-to-many relation to MatchWorkReceiptLineAOC
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PurchaseOrder				= PurchaseOrder
				related.PurchaseOrderLine			= PurchaseOrderLine
			
		InternalDetailsRel
			one-to-many relation to MatchWorkInvoiceDetail
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.MatchWork					= MatchWork
				related.PayablesInvoice				= PayablesInvoice
			Instance Selection
				where (related.PurchaseOrderLine	= PurchaseOrderLine
				and    related.RecordSource.InternalMatchDetails)

		LocalEntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
		    	related.FinanceEnterpriseGroup			= Company.AccountingEntity.FinanceEnterpriseGroup
                related.TaxEntity 						= Company.AccountingEntity
                related.TaxCode 						= CalculateTaxCode

        CreditForRebillOriginalDetailRel
            one-to-one relation to PayablesInvoiceDetail
            Field Mapping uses symbolic key
                related.Company 						= Company
                related.PayablesInvoice 				= OriginalInvoice
                related.PurchaseOrder  					= PurchaseOrder
                related.PurchaseOrderLine    			= PurchaseOrderLine
                related.Contract	  					= Contract
                related.ContractLine    				= ContractLine
                related.PayablesInvoiceDetail			= LocalOriginalInvoiceDetail

        LocalOriginalInvoiceDetailRel
            one-to-many relation to PayablesInvoiceDetail
            Field Mapping uses symbolic key
                related.Company 						= Company
                related.PayablesInvoice 				= OriginalInvoice
                related.PurchaseOrder  					= PurchaseOrder
                related.PurchaseOrderLine    			= PurchaseOrderLine
                related.Contract	  					= Contract
                related.ContractLine    				= ContractLine


 		AutoMatchResultInvoiceRel
			one-to-one relation to AutoMatchResultInvoice
			Field Mapping uses symbolic key
				related.Company					= Company
				related.AutoMatchResult			= LocalAutoMatchResult
				related.PayablesInvoice			= PayablesInvoice

		MatchReconQueueSetRel
			one-to-many relation to MatchReconQueueSet
			Field Mapping uses symbolic key
                related.Company                 	= Company
				related.PayablesInvoice				= PayablesInvoice
				related.MatchReconQueueSet			= MatchReconQueueSet

		TaxLineItemRel	
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= PayablesInvoice.UniqueID
				related.LineItemNumber						= PurchaseOrderLine
				
		BypassOneSourceRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "BypassOneSource"

		BypassOneSourceTaxRateRel								
			one-to-many relation to TaxRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxCode					= DetailsTaxCode
				
		SkipRel
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "Skip"


 		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
 				related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup	 
 				related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode

		LocalInventoryLocationRel  
		    one-to-one relation to InventoryLocation
		    Field Mapping uses symbolic key
				related.Company						= Company
				related.InventoryLocation			= LocalInventoryLocation

  	Sets
		ByVendorMatchDetailKey
            indexed
            Sort Order
            	MatchWork
				Company
				Vendor
				ItemType
				MatchDetailKey
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine
				PayablesInvoice
				PayablesInvoiceDetail

        ByItemType
            indexed
            Sort Order
            	MatchWork
                Company
                PayablesInvoice
                ItemType
                MatchDetailKey
                PurchaseOrder
                PurchaseOrderLine
				Contract
				ContractLine
                PayablesInvoiceDetail

        ByMatchedQuantity
            indexed
            Sort Order
            	MatchWork
                Company
                PayablesInvoice
                MatchedQuantity
                PurchaseOrder
                PurchaseOrderLine
				Contract
				ContractLine
                PayablesInvoiceDetail

        ByMatchUnitCost
            indexed
            Sort Order
            	MatchWork
                Company
                PayablesInvoice
                MatchUnitCost
                PurchaseOrder
                PurchaseOrderLine
				Contract
				ContractLine
                PayablesInvoiceDetail

		BySelected
            indexed
            Sort Order
				Company
				MatchWork
				PayablesInvoice
				SortSelect descending
				PurchaseOrder
				PurchaseOrderLine
				Contract
				ContractLine
				PayablesInvoiceDetail

	Rule Blocks
		703DoProduct 


























			initialize TotalDistributionAmount

			initialize NewInvoiceLinkMatchedNotReceivedQuantity
			initialize NewInvoiceLinkChargebackQuantity
			initialize NewInvoiceLinkWriteoffQuantity
			initialize NewInvoiceLinkICVToleranceUnitCost
			initialize NewInvoiceLinkICVToleranceQuantity
			initialize NewInvoiceLinkICVToleranceAmount
			initialize NewInvoiceLinkICVQuantity
			initialize NewInvoiceLinkICVUnitCost
			initialize NewInvoiceLinkICVAmount
			initialize NewInvoiceLinkMatchUnitCost
			initialize NewInvoiceLinkMNRAmount
			initialize NewInvoiceLinkMNRUnitCost
			initialize NewInvoiceLinkMNRAmount
			initialize NewInvoiceLinkMNRUnitCost
			initialize NewInvoiceLinkMNRToleranceUnitCost
			initialize NewInvoiceLinkMemoQuantity
			initialize NewInvoiceLinkPOCostUpdate

			LocalLocation = PayablesInvoiceDetail.Location
			if (ThisReceiptLineRel.ShipToLocation entered)
				LocalLocation = ThisReceiptLineRel.ShipToLocation

			if (MemoInvoice
			and WorkVendorPriceUOMMultiplier not entered)
			    include 899BuildVpriCnv
			    
			if  (ItemType.Service
			and  ThisReceiptLineRel exists)
				NewOpenPurchaseOrderAmount			= ThisReceiptLineRel.PurchaseOrderLine.OpenPurchaseAmountPOCurrency - (EnteredUnitCost * EnteredQuantity)


			if  (!ThisReceiptLineRel exists)

				initialize ReceiptLineReceivedQuantity
				initialize ReceiptLineVbuyReceiptQuantity
			else
			if  ((ThisReceiptLineRel.ItemType.Inventoried
			or    ThisReceiptLineRel.ItemType.NonStock)
			and  (IsCatchWeight))

				ReceiptLineReceivedQuantity						= ThisReceiptLineRel.PurchaseOrderReceiptLine.CatchWeightOpenToMatchQuantity
				ReceiptLineVbuyReceiptQuantity					= ThisReceiptLineRel.BuyUOMQuantity

			else
			if  ((ThisReceiptLineRel.ItemType.Inventoried
			or    ThisReceiptLineRel.ItemType.NonStock))


				ReceiptLineReceivedQuantity						= ThisReceiptLineRel.OpenToMatchQuantity
				ReceiptLineVbuyReceiptQuantity					= ThisReceiptLineRel.OpenToMatchQuantity * (ThisReceiptLineRel.PurchaseOrderLine.VendorPriceUOMMultiplier / ThisReceiptLineRel.PurchaseOrderLine.EnteredBuyUOMMultiplier)
			else
			if  ((MatchWork.MatchRuleResult.AllToOne
			or    MatchWork.MatchRuleResult.AllToAll)
			and   MatchWork.MatchLevel.InvoiceMatch)

				ReceiptLineReceivedQuantity 				= DetailsMatchedQuantity
				ReceiptLineVbuyReceiptQuantity              = DetailsVBuyMatchedQuantity








			else

				ReceiptLineReceivedQuantity             		= ThisReceiptLineRel.VendorPriceUOMQuantity - ThisReceiptLineRel.VendorPriceMatchedQuantity
				ReceiptLineVbuyReceiptQuantity          		= ThisReceiptLineRel.BuyUOMQuantity - ThisReceiptLineRel.VendorPriceMatchedQuantity

				







			if  (MatchWork.MatchLevel.DetailMatch
			and  DoChargeback
			and  ReceiptLineReceivedQuantity > DetailsMatchedQuantity
			and  !MatchWork.MatchRuleType.AllToOne
			and  !MatchWork.ProcessMode.Reconciliation)
				ReceivedNotInvoicedQuantity               		= ReceiptLineReceivedQuantity - DetailsMatchedQuantity
			else
				initialize ReceivedNotInvoicedQuantity




			if  (IsCatchWeight)
				if  (MemoInvoice
				and  !PayablesInvoiceDetail.MemoAdjustType.QuantityAdjustment)
					TempMatchedQuantity							= DetailsMatchedQuantity
					TempVbuyMatchQuantity						= DetailsVBuyMatchedQuantity
				else





				if (PayablesInvoiceDetail.BuyUOMMatchedQuantity > ReceiptLineVbuyReceiptQuantity)
					TempMatchedQuantity							= ThisReceiptLineRel.PurchaseOrderReceiptLine.OpenToMatchQuantity
					TempVbuyMatchQuantity						= ReceiptLineVbuyReceiptQuantity
				else
					TempMatchedQuantity                 		= DetailsMatchedQuantity - TotalMatchedQuantity
					TempVbuyMatchQuantity						= BuyUOMMatchedQuantity


			else
			if  (MemoInvoice
			and  !PayablesInvoiceDetail.MemoAdjustType.QuantityAdjustment)
				TempMatchedQuantity								= DetailsMatchedQuantity
				ReceiptLineVbuyReceiptQuantity					= DetailsMatchedQuantity
				ReceiptLineReceivedQuantity						= DetailsMatchedQuantity
			else
			if  (!ThisReceiptLineRel exists)
				TempMatchedQuantity                 			= DetailsMatchedQuantity - TotalMatchedQuantity
				TempVbuyMatchQuantity							= DetailsVBuyMatchedQuantity - TotalVBuyMatchQuantity


			else
			if  (ItemType.Service)
				TempMatchedQuantity 							= DetailsMatchedQuantity - TotalMatchedQuantity
				TempVbuyMatchQuantity							= DetailsVBuyMatchedQuantity - TotalVBuyMatchQuantity
				if (NewOpenPurchaseOrderAmount < 0)
					ServiceLineChargebackAmount					= NewOpenPurchaseOrderAmount * -1
					initialize NewOpenPurchaseOrderAmount
					if  (ThisReceiptLineRel.PurchaseOrderLine.ServiceCode.Quantity)
						ServiceLineChargebackQuantity           = ThisReceiptLineRel.OpenToMatchQuantity - DetailsEnteredQuantity



			else
			if  (ReceiptLineReceivedQuantity > DetailsMatchedQuantity
			and  ReceivedNotInvoicedQuantity not entered)
				TempMatchedQuantity								= DetailsMatchedQuantity
				TempVbuyMatchQuantity							= DetailsVBuyMatchedQuantity


				if  (MatchWork.MatchLevel.DetailMatch
				and  MatchWork.ProcessMode.Reconciliation)
					TempMatchedQuantity							-= PreviousMatchedQuantity
					TempVbuyMatchQuantity						-= PreviousVBuyMatchQuantity


			else

				TempMatchedQuantity								= ReceiptLineReceivedQuantity
				TempVbuyMatchQuantity							= ReceiptLineVbuyReceiptQuantity


				
			TotalMatchedQuantity								+= TempMatchedQuantity



			MessageVendorPriceMatchQuantity						+= TempMatchedQuantity
			TotalVBuyMatchQuantity								+= TempVbuyMatchQuantity
			TotalMessageVBuyMatchQuantity						+= TempVbuyMatchQuantity

			if  (TotalMatchedQuantity > DetailsMatchedQuantity
			and  ReceivedNotInvoicedQuantity not entered)
				TempMatchedQuantity								-= (TotalMatchedQuantity - DetailsMatchedQuantity)
				TempVbuyMatchQuantity							-= (TotalVBuyMatchQuantity - DetailsVBuyMatchedQuantity)










			ApprovedUnitCost									= MatchUnitCost
			initialize ApprovedLandTaxUnitCost
			initialize LocalEnteredUnitCost
			initialize LocalMatchUnitCost
			initialize AdjustedMatchUnitCost
			initialize NonTaxEnteredUnitCost


			

			if  (MemoInvoice
			and  !PayablesInvoiceDetail.MemoAdjustType.QuantityAdjustment)
				LocalEnteredUnitCost					= MatchUnitCost
				LocalMatchUnitCost						= MatchUnitCost
			else
			if  (ItemType.Service
			or   PurchaseOrderLine not entered)
				if  (PurchaseOrderLine not entered
				and  last ContractLineLinkLinkLastCostRel.PoCostUpd entered)
					AdjustedMatchUnitCost				= last ContractLineLinkLinkLastCostRel.PoCostUpd
				LocalEnteredUnitCost					= EnteredUnitCost
				LocalMatchUnitCost						= MatchUnitCost
			else
			if  (!ThisReceiptLineRel exists)
				if  (ItemType.Inventoried)
					if  (PurchaseOrderLine entered)
						LocalEnteredUnitCost			= PurchaseOrderLine.EnteredUnitCost
						NonTaxEnteredUnitCost			= PurchaseOrderLine.EnteredUnitCost
					else

						NonTaxEnteredUnitCost			= EnteredUnitCost
				else
				if  ((MatchWork.MatchRuleResult.AllToOne
				or    MatchWork.MatchRuleResult.AllToAll)
				and   MatchWork.MatchLevel.InvoiceMatch)
					LocalMatchUnitCost					= MatchUnitCost
			else
				if  (ThisReceiptLineRel exists
				and  last PurchaseOrderReceiptInvoiceLinkLastCostRel.PoCostUpd entered)
					AdjustedMatchUnitCost				= last PurchaseOrderReceiptInvoiceLinkLastCostRel.PoCostUpd

					

				LocalEnteredUnitCost					= ThisReceiptLineRel.PurchaseOrderReceiptLine.MatchUnitCost
				LocalMatchUnitCost						= ApprovedUnitCost
			
				
				if  (AdjustCostMessageRel exists
				and  first AdjustCostMessageRel.AdjustedUnitCost entered)
					LocalMatchUnitCost						= first AdjustCostMessageRel.AdjustedUnitCost

			
			initialize EnteredLandTaxUnitCost
			initialize MatchLandTaxUnitCost

			NonTaxApprovedUnitCost							= ApprovedUnitCost
     		NonTaxMatchUnitCost								= LocalMatchUnitCost 



			if  (NonTaxEnteredUnitCost not entered)

				NonTaxEnteredUnitCost						= LocalEnteredUnitCost


				
			SaveNonTaxEnteredUnitCost						= NonTaxEnteredUnitCost 

			RetainedMatchedAmount						   += (LocalEnteredUnitCost * DetailsMatchedQuantity)




			include DoTaxRuleBlock
			TaxRuleBlockCalled = true

			if  (ItemType.Inventoried)		
				MatchUnitCost 									= PayablesInvoiceDetail.MatchUnitCost 
				NonTaxApprovedUnitCost							= MatchUnitCost
    	 		NonTaxMatchUnitCost								= LocalMatchUnitCost 
				NonTaxEnteredUnitCost							= SaveNonTaxEnteredUnitCost 



			




















			initialize PurchaseOrderInvoiceTax
			
            LocalEnteredUnitCost						= LocalEnteredUnitCost + LocalEnteredLandTaxUnitCost  
            if  (ItemType.Inventoried)



				PurchaseOrderInvoiceTax					= PurchaseOrderInvoiceTax + (EnteredLandTaxUnitCost * TempMatchedQuantity)

   


   
			if  (PurchaseOrderLine.TaxCode entered)
                LocalMatchUnitCost						+= MatchLandTaxUnitCost

                











			if  (ItemType.NonStock
			and  !MemoInvoice
			and  ThisReceiptLineRel exists)
				include 755SetLastCost

			if  (ItemType.Service
			and  ThisReceiptLineRel.OpenToMatchQuantity < EnteredQuantity)
				ExcessQuantity								= ServiceLineChargebackQuantity


			LocalMatchedQuantity							= TempMatchedQuantity
			VendorBuyMatchedQuantity						= TempVbuyMatchQuantity
			AmMatchedQuantity								= LocalMatchedQuantity



			include 706DistItem


			if  (TaxEntityRel.IntrastatUsed)
				initialize IntrastatProcessing
				
				IntrastatProcessing.TaxEntity				= Company.AccountingEntity

				IntrastatProcessing.PurchaseOrder			= PurchaseOrder
				IntrastatProcessing.Vendor					= PurchaseOrder.Vendor
				IntrastatProcessing.DeliveryTerms			= PurchaseOrder.ShipTerm
				IntrastatProcessing.SystemCode				= "PO"

				IntrastatProcessing.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				IntrastatProcessing.VendorGrp					= PayablesCompanyRel.VendorGroup
				IntrastatProcessing.Vendor						= Vendor
				IntrastatProcessing.VendorVATRegCountry     	= Vendor.VATRegistrationCountry
				IntrastatProcessing.VendorVATRegNumber 			= Vendor.VATRegistrationNumber
				if  (PayablesInvoice.MatchProcessType.DropShip)
					IntrastatProcessing.DropShip = "Y" 
				else
					IntrastatProcessing.DropShip = "N" 

				if (PayablesInvoice.Dropship)
					IntrastatProcessing.DestinationCountry 	= PurchaseOrder.DropshipAddress.Country
					IntrastatProcessing.DestinationRegion 	= PurchaseOrder.DropshipAddress.Region
				else
				if (PurchaseOrder entered
				and PurchaseOrder.ShipToLocation entered)
					IntrastatProcessing.DestinationCountry	= PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder.Country
					IntrastatProcessing.DestinationRegion	= PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder.Region
				else
				if (PayablesInvoice.Location entered)
					IntrastatProcessing.DestinationCountry 	= PayablesInvoice.Location.PostalAddressForPurchaseOrder.Country
					IntrastatProcessing.DestinationRegion 	= PayablesInvoice.Location.PostalAddressForPurchaseOrder.Region
				else
					IntrastatProcessing.DestinationCountry 	= PayablesInvoice.DefaultProcessLevelRel.PostalAddress.Country
					IntrastatProcessing.DestinationRegion 	= PayablesInvoice.DefaultProcessLevelRel.PostalAddress.Region


				if (PurchaseOrder.PurchaseFromLocation entered)
					IntrastatProcessing.OriginCountry		= PurchaseOrder.PurchaseFromLocation.VendorAddress.Country
					IntrastatProcessing.OriginRegion		= PurchaseOrder.PurchaseFromLocation.VendorAddress.Region
				else
					IntrastatProcessing.OriginCountry		= PurchaseOrder.Vendor.VendorAddress.Country
					IntrastatProcessing.OriginRegion		= PurchaseOrder.Vendor.VendorAddress.Region
				
				LocalTrigger								= IntrastatProcessing.CheckCountries 
			


				if  (ItemType.Service
				and  TaxEntityRel.IntrastatUsed							
                and (IntrastatProcessing.OriginCountry.IsoCountryNumber = 250 
                or   IntrastatProcessing.OriginCountry.IsoCountryNumber = 380
                or   IntrastatProcessing.DestinationCountryRel.IsoCountryNumber = 250
                or   IntrastatProcessing.DestinationCountryRel.IsoCountryNumber = 380)
				and  IntrastatProcessing.DoIntrastatReporting)
					include 705aCreateIntrastatDropship
				else
				if  (PayablesInvoice.MatchProcessType.DropShip
				and  TaxEntityRel.IntrastatUsed							
				and  IntrastatProcessing.DoIntrastatReporting)
					include 705aCreateIntrastatDropship
				else
				if  (ThisReceiptLineRel exists
				and  ThisReceiptLineRel.PurchaseOrderReceiptLine.IntrastatNumber entered)
					include 705UpdateIntrastat



			BypassPOUpdate = false

			if  (PurchaseOrderLine not entered)
								

				if  (ReceiptLineReceivedQuantity < RemainingQuantity)

					ExcessQuantity                 				= RemainingQuantity - ReceiptLineReceivedQuantity
					TotalMatchedQuantity						+= ExcessQuantity 

			else
				if  (ItemType.Service)
					LocalUnmatchedQuantity						= PurchaseOrderLine.QuantityToProcess - PurchaseOrderLine.MatchedQuantity 
				else
				if  (PurchaseOrder.IsDropship)
					LocalUnmatchedQuantity						= PurchaseOrderLine.QuantityToProcess - PurchaseOrderLine.MatchedQuantity 
					if  (ItemType.Inventoried
					or   ItemType.NonStock)
						LocalConvertedQuantity					= LocalUnmatchedQuantity
						LocalVendorPriceQuantity				= LocalUnmatchedQuantity
						LocalStockQuantity						= LocalUnmatchedQuantity

						initialize UOMCalculation

						UOMCalculation.InputQuantity				= LocalUnmatchedQuantity
						UOMCalculation.InputUOMConversion			= WorkVendorPriceUOMMultiplier
						UOMCalculation.InputToUOMConversion			= WorkVendorBuyUOMMultiplier
						UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
						LocalVendorPriceQuantity					= UOMCalculation.OutputQuantity

						LocalUnmatchedQuantity						= LocalVendorPriceQuantity						
				else
					initialize LocalUnmatchedQuantity


				if  (PayablesInvoice.InvoiceType.CreditMemo
				and  !MemoInvoice)
					LocalMatchedQuantity						*= -1

				if  (PurchaseOrderLine.ItemType.Inventoried
				or   PurchaseOrderLine.ItemType.NonStock)
					LocalConvertedQuantity						= LocalUnmatchedQuantity
					LocalVendorPriceQuantity					= LocalUnmatchedQuantity
					LocalStockQuantity							= LocalUnmatchedQuantity

					initialize UOMCalculation

					UOMCalculation.InputQuantity				= LocalUnmatchedQuantity
					UOMCalculation.InputUOMConversion			= WorkVendorPriceUOMMultiplier
					UOMCalculation.InputToUOMConversion			= WorkVendorBuyUOMMultiplier
					UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
					LocalConvertedQuantity						= UOMCalculation.OutputQuantity
				else
					LocalConvertedQuantity						= LocalMatchedQuantity


				
				if  ((PurchaseOrderLine exists
				and   ThisReceiptLineRel exists)
				and  (PayablesInvoice.InvoiceType.DebitMemo
				or    PayablesInvoice.InvoiceType not entered)
				and  (PurchaseOrderLine.ItemType.Inventoried
				or    PurchaseOrderLine.ItemType.NonStock)
				and   IsCatchWeight)
					NewPOLineMatchedQuantity					= VendorBuyMatchedQuantity 

					if (DetailsMatchedQuantity > ThisReceiptLineRel.PurchaseOrderReceiptLine.OpenToMatchQuantity)
					 	NewCatchWeightMatchQuantity				= ThisReceiptLineRel.PurchaseOrderReceiptLine.OpenToMatchQuantity
					else
						NewCatchWeightMatchQuantity				= DetailsEnteredQuantity

				else
				if  ((PayablesInvoice.InvoiceType.CreditMemo
				or    PayablesInvoice.InvoiceType.DebitMemo)
				and   ItemType.Service
				and   PurchaseOrderLine.ServiceCode.Amount)
					NewPOLineMatchedQuantity				= 1
					NewPOLineMatchedAmount					= MatchUnitCost 
				else
				if  (!MatchWork.MatchLevel.DetailMatch
				or   !MatchWork.MatchRuleType.AllToOne
				or   PurchaseOrderLine.ItemType.Service
				or   ThisReceiptLineRel exists)
					if  (!MemoInvoice)
						if  (MatchWork.MatchLevel.InvoiceMatch
						and  PayablesInvoice.InvoiceType not entered
						and  ThisReceiptLineRel exists
						and  ThisReceiptLineRel.BuyUOMQuantity > VendorBuyMatchedQuantity)

							NewPOLineMatchedQuantity				= ThisReceiptLineRel.BuyUOMQuantity
							NewPOLineMatchedAmount					= MatchUnitCost 
						else


							NewPOLineMatchedQuantity				= VendorBuyMatchedQuantity
							NewPOLineMatchedAmount					= MatchUnitCost 


				if  (MemoInvoice
				and  !ItemType.Inventoried)
					NewPOLineMemoQuantity						= VendorBuyMatchedQuantity
					NewPOLineMemoQuantity 						= NewPOLineMemoQuantity * -1

				NewPOLineVendorPriceUOM							= PayablesInvoiceDetail.VendorPriceUOM
				if (!IsCatchWeight)
					ReceiptLineVbuyReceiptQuantity				= ReceiptLineReceivedQuantity

	
				if  (IsCatchWeight)
				    NextSentence = true
				else
				if  ((ItemType.Inventoried
				or   ItemType.NonStock)
				and  !IsCatchWeight)
					initialize UOMCalculation

					UOMCalculation.InputQuantity				= RemainingQuantity
					UOMCalculation.InputUOMConversion			= WorkVendorPriceUOMMultiplier
					UOMCalculation.InputToUOMConversion			= WorkVendorBuyUOMMultiplier
					UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
					RemainingQuantity							= UOMCalculation.OutputQuantity


					UOMCalculation.InputQuantity				= ReceiptLineReceivedQuantity
					UOMCalculation.InputUOMConversion			= WorkVendorPriceUOMMultiplier
					UOMCalculation.InputToUOMConversion			= WorkVendorBuyUOMMultiplier
					UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
					ReceiptLineVbuyReceiptQuantity				= UOMCalculation.OutputQuantity






				initialize ProcessMatchExcess
				
				if  (!ItemType.Service)
					initialize ExcessQuantity
					initialize CatchWeightExcessQuantity



				if  (MatchWork.MatchLevel.DetailMatch
				and  !ItemType.Service)
					if  (!ThisReceiptLineRel exists)
						ExcessQuantity						= VBuyRemainingQuantity
						if (IsCatchWeight)
							CatchWeightExcessQuantity		= MatchedQuantity


						if  (Company.PostingAccountNoReceiptLine.MatchedNoReceipt)
							ProcessMatchExcess				= ProcessMatchExcess.MatchedNotReceived
						if  (Company.PostingAccountNoReceiptLine.MatchWriteOff)
							ProcessMatchExcess				= ProcessMatchExcess.Writeoff
					else
						ExcessQuantity			            = VBuyRemainingQuantity - ReceiptLineVbuyReceiptQuantity
						if (IsCatchWeight)
							CatchWeightExcessQuantity		= VBuyCatchWeightRemainingQuantity - ThisReceiptLineRel.PurchaseOrderReceiptLine.CatchWeightQuantity


						if  (ExcessQuantity > 0)
							if  (Company.PostingAccountNoReceiptLine.MatchedNoReceipt)
								ProcessMatchExcess				= ProcessMatchExcess.MatchedNotReceived
							if  (Company.PostingAccountNoReceiptLine.MatchWriteOff)
								ProcessMatchExcess				= ProcessMatchExcess.Writeoff




				if  (MemoInvoice
				and (ItemType.Inventoried
				or   PayablesInvoiceDetail.MemoAdjustType.CostAdjustment))  
					initialize ProcessMatchExcess

					initialize ExcessQuantity
					initialize CatchWeightExcessQuantity

				if  (MatchReconQueue.LineChargebackSelected
				and  !CreateChargeback)

					NextSentence							= true
				else
				if  (DoChargeback)
					ProcessMatchExcess							= ProcessMatchExcess.Chargeback


				if  (ExcessQuantity < 0)

					initialize ExcessQuantity
					initialize CatchWeightExcessQuantity

				if  (CatchWeightExcessQuantity < 0)
					initialize CatchWeightExcessQuantity
					
				if  (ThisReceiptLineRel.AnotherSelectedMatchWorkReceiptLineRel exists) 
					initialize ExcessQuantity
					initialize CatchWeightExcessQuantity

  					
				if  (ProcessMatchExcess.Chargeback)
					NewPOLineChargebackQuantity 				= ExcessQuantity
					NewCatchWeightChargebackQuantity			= CatchWeightExcessQuantity

				else
				if  (!PayablesInvoice.MatchProcessType.DropShip)
					if  (ProcessMatchExcess.Writeoff)
						NewPOLineWriteoffQuantity 				= ExcessQuantity
						NewCatchWeightWriteOffQuantity			= CatchWeightExcessQuantity

					else
					if  (ProcessMatchExcess.MatchedNotReceived)
						NewPOLineMatchedNotReceived 			= ExcessQuantity
						NewCatchWeightMNRQuantity				= CatchWeightExcessQuantity

	

				if  (MemoInvoice
				and  PayablesInvoiceDetail.MemoAdjustType.QuantityAdjustment
				and  !ItemType.Service)
					if (IsCatchWeight)
						NewPOLineMatchedNotReceived = DetailsBuyUOMMatchedQuantity
						NewCatchWeightMNRQuantity	= DetailsMatchedQuantity
					else
						NewPOLineMatchedNotReceived = DetailsMatchedQuantity



					
				NewInvoiceLinkMatchedNotReceivedQuantity	= NewPOLineMatchedNotReceived
				NewInvoiceLinkChargebackQuantity			= NewPOLineChargebackQuantity
				NewInvoiceLinkWriteoffQuantity				= NewPOLineWriteoffQuantity
				NewInvoiceLinkMemoQuantity					= NewPOLineMemoQuantity


	
				if  (ThisReceiptLineRel exists
				and  !ItemType.Service
				and  !MemoInvoice)

					NewPOLineMatchedQuantity				+= ExcessQuantity
					if (IsCatchWeight)
						TotalMatchedQuantity				+= CatchWeightExcessQuantity
					    NewCatchWeightMatchQuantity			+= CatchWeightExcessQuantity


					else
						TotalMatchedQuantity				+= ExcessQuantity




				
				RemainingQuantity							-= LocalMatchedQuantity
				VBuyRemainingQuantity						-= VendorBuyMatchedQuantity
				VBuyCatchWeightRemainingQuantity			-= LocalMatchedQuantity 

	      		
	      		PreviousMatchedQuantity						+= LocalMatchedQuantity
	      		PreviousVBuyMatchQuantity					+= VendorBuyMatchedQuantity

				if  (MatchWork.MatchLevel.InvoiceMatch
				and  RecordSource.CreatedWithinMatch
				and  PurchaseOrderLine.Closed.Yes)
					BypassPOUpdate = true
				else
				if  (!ThisReceiptLineRel exists
				and  MatchWork.MatchLevel.InvoiceMatch
				and  MatchWork.ProcessMode.Reconciliation
				and  !OverrideDetail
				and  !ItemType.Service)

					BypassPOUpdate = true


				if  (ThisReceiptLineRel.PurchaseOrderReceiptLine entered 
				and  PurchaseOrderLine != ThisReceiptLineRel.PurchaseOrderReceiptLine 
				and  PurchaseOrderLine.MatchDetailKey != ThisReceiptLineRel.PurchaseOrderReceiptLine.MatchDetailKey)
					if (PurchaseOrderLine.ItemType.Special 
					and ThisReceiptLineRel.PurchaseOrderReceiptLine.ItemType.Special 
					and PurchaseOrderLine.EnteredBuyUOM = ThisReceiptLineRel.PurchaseOrderReceiptLine.ReceivedUOM)
						NextSentence = true 
					else 
						BypassPOLineUpdate = true

				if  (BypassPOUpdate
				or   BypassPOLineUpdate)
					NextSentence = true
				else
				if  (PurchaseOrderLine exists)


					if  (MemoInvoice
					and  PayablesInvoiceDetail.MemoAdjustType.QuantityAdjustment
					and  (PurchaseOrderLine.ItemType.Inventoried
					or    PurchaseOrderLine.ItemType.NonStock)
					and  IsCatchWeight)
						NewPOLineMatchedQuantity					= VendorBuyMatchedQuantity 
						NewPOLineMatchedAmount = VendorBuyMatchedQuantity * PayablesInvoiceDetail.EnteredUnitCost
						NewCatchWeightMatchQuantity					= DetailsEnteredQuantity

					else
					if  (MemoInvoice
					and  PayablesInvoiceDetail.MemoAdjustType.QuantityAdjustment
					and  NewPOLineMatchedQuantity not entered)
						NewPOLineMatchedQuantity = DetailsMatchedQuantity   
						NewPOLineMatchedAmount = DetailsMatchedQuantity * PayablesInvoiceDetail.MatchUnitCost
					else
					if  (MemoInvoice
					and  PayablesInvoiceDetail.MemoAdjustType.CostAdjustment
					and  PurchaseOrderLine.ServiceCode.Amount
					and  PurchaseOrderLine.MatchedAmount + NewPOLineMatchedAmount > 0)
						NewPOLineMatchedQuantity = 0   
						if (IsCatchWeight)
						    NewCatchWeightMatchQuantity = 0

					if  (!IsCatchWeight
					and  PayablesInvoiceDetail.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
					and  PurchaseOrderLine.VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
						initialize NewPOLineVendorPriceUOM
					else 
					if  (PayablesInvoiceDetail.EnteredUOM = PurchaseOrderLine.EnteredBuyUOM)
						initialize NewPOLineVendorPriceUOM

					invoke UpdateFromMatch PurchaseOrderLine
					
						invoked.BypassCommitUpdate                   		= true		
						invoked.LocalUpdateFromMatchMatchedQuantity			= NewPOLineMatchedQuantity
						invoked.LocalUpdateFromMatchMatchedAmount			= NewPOLineMatchedAmount
						invoked.LocalUpdateFromMatchVendorPriceUOM			= NewPOLineVendorPriceUOM
						invoked.LocalUpdateFromMatchChargebackQuantity		= NewPOLineChargebackQuantity
						invoked.LocalUpdateFromMatchChargebackAmount		= NewPOLineChargebackAmount
						invoked.LocalUpdateFromMatchMemoQuantity			= NewPOLineMemoQuantity
						invoked.LocalUpdateFromMatchWriteOffQuantity		= NewPOLineWriteoffQuantity
						invoked.PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity = NewPOLineMatchedNotReceived
						invoked.TransientBypassOpenPurchaseAmountUpdate		= true

						if  (AdjustCostMessageRel exists
						and !PayablesInvoice.InvoiceSource.CreditForRebill
						and  first AdjustCostMessageRel.AdjustedUnitCost entered)
							invoked.LastMatchUnitCost						= first AdjustCostMessageRel.AdjustedUnitCost

						if (IsCatchWeight)
							invoked.LocalFromMatchCatchWeightMatchQuantity		= NewCatchWeightMatchQuantity
							invoked.LocalFromMatchCatchWeightMNRQuantity		= NewCatchWeightMNRQuantity
							invoked.LocalFromMatchCatchWeightChargebackQuantity	= NewCatchWeightChargebackQuantity
							invoked.LocalFromMatchCatchWeightWriteOffQuantity	= NewCatchWeightWriteOffQuantity
							invoked.LocalFromMatchCatchWeightMemoQuantity		= NewCatchWeightMemoQuantity



					initialize RetainedTotalAmount
					
				invoke FastUpdate PurchaseOrder
					invoked.LastActivityDate			= current corporate date


			if (ItemType.Service
            and PurchaseOrderLine.ServiceCode.Quantity)
                NextSentence = true
            else
                NewReceiptLineMatchedQuantity                   = DetailsMatchedQuantity


			if  (BypassPOUpdate)
				NextSentence = true
			else
			if  (ThisReceiptLineRel exists
			and  !ItemType.Service
			and  !PayablesInvoice.MatchProcessType.DropShip
			and  !MemoInvoice)
				LocalMatchedAmount							= TotalDistributionAmount
				include 831aUpdatePoreceive
				

			if  (BypassPOUpdate)
				NextSentence = true
			else
			if  (!MemoInvoice
			or   !ItemType.Inventoried)




				LocalMatchSequence = MatchSequence
				if  (MatchWork.MatchLevel.InvoiceMatch
				and  ThisReceiptInvoiceLinkExactRel exists)
					invoke FastUpdate ThisReceiptInvoiceLinkExactRel
						invoked.MatchedQuantity													+= NewReceiptLineMatchedQuantity
						invoked.MatchedNotReceivedQuantity 										+= NewInvoiceLinkMatchedNotReceivedQuantity
				else
					if (MemoInvoice
					and ThisReceiptInvoiceLinkExactRel exists)
						LocalMatchSequence += 1

					invoke Create PurchaseOrderReceiptInvoiceLink
						invoked.Company															= Company
						invoked.PurchaseOrderReceiptInvoiceLink.MatchObjectID					= MatchWork.OutMatchObjectID
						if (MemoInvoice)
						    initialize invoked.PurchaseOrderReceiptInvoiceLink.MatchSequence
						else
							invoked.PurchaseOrderReceiptInvoiceLink.MatchSequence				= LocalMatchSequence
						initialize invoked.PurchaseOrderReceiptInvoiceLink.AddOnCharge
						invoked.Vendor															= PayablesInvoice.Vendor
						invoked.PayablesInvoice													= PayablesInvoice.PayablesInvoice
						invoked.PurchaseOrder													= PurchaseOrder
						invoked.PurchaseOrderLine												= PurchaseOrderLine
						invoked.Item															= Item
						invoked.MatchDetailKey													= MatchDetailKey
						invoked.MatchUnitCost													= MatchUnitCost
						if (IsCatchWeight)
							invoked.MatchedQuantity												= NewPOLineMatchedQuantity
						else 
							invoked.MatchedQuantity												= NewReceiptLineMatchedQuantity
						invoked.Type															= "MA"
						invoked.MatchedNotReceivedQuantity 										= NewInvoiceLinkMatchedNotReceivedQuantity
						invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt			= ThisReceipt
						invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine		= ThisReceiptLine
						if  (ThisReceiptLineRel exists)
							invoked.PoCostUpd													= ThisReceiptLineRel.MatchUnitCost
						else
							invoked.PoCostUpd 													= NewInvoiceLinkPOCostUpdate

						invoked.MatchedNotReceivedQuantity 			= NewInvoiceLinkMatchedNotReceivedQuantity
						invoked.ChargebackQuantity 					= NewInvoiceLinkChargebackQuantity
						invoked.WriteOffQuantity 					= NewInvoiceLinkWriteoffQuantity
						invoked.IcvTolUcst 							= NewInvoiceLinkICVToleranceUnitCost
						invoked.IcvTolQty 							= NewInvoiceLinkICVToleranceQuantity
						invoked.IcvTolAmt 							= NewInvoiceLinkICVToleranceAmount
						invoked.IcvQty 								= NewInvoiceLinkICVQuantity
						invoked.IcvUcst 							= NewInvoiceLinkICVUnitCost
						invoked.IcvAmt 								= NewInvoiceLinkICVAmount
						invoked.MatchedNotReceivedAmount 			= NewInvoiceLinkMNRAmount
						invoked.MatchedNotReceivedUnitCost 			= NewInvoiceLinkMNRUnitCost
						invoked.MnrTolUcst 							= NewInvoiceLinkMNRToleranceUnitCost
						invoked.MemoQuantity 						= NewInvoiceLinkMemoQuantity
						if (IsCatchWeight)
							invoked.CatchWeightMatchQuantity		= NewCatchWeightMatchQuantity
							invoked.CatchWeightMatchedNotReceivedQuantity	= NewCatchWeightMNRQuantity
							invoked.CatchWeightChargebackQuantity	= NewCatchWeightChargebackQuantity
							invoked.CatchWeightWriteOffQuantity		= NewCatchWeightWriteOffQuantity
							invoked.CatchWeightMemoQuantity			= NewCatchWeightMemoQuantity


			if  (MatchWork.ProcessMode.Reconciliation
			and  MatchWork.MatchLevel.DetailMatch
			and  !MatchWork.InPrepaids
			and  !DoChargeback)


	
				if  (ItemType.Service)
					include 951bCheckSvcPoTolerances
				else
				if  (!Company.ReconciliationOverTolerance.No
				or   !Company.ReconciliationUnderTolerance.No)
					if  (Company.ReconciliationRuleOrder entered
					and  MatchWork.MatchRule not entered)
						I2 = Company.ReconciliationRuleOrder
					else
						I2 = 1
						while (I2 < 6 
						and    !MatchWork.MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I2].InvoiceMatchLevel.DetailMatch)
							I2 += 1 
		
					if  (I2 <= 6)
						initialize Approved 

					LocalMatchRuleToleranceGroup = MatchWork.MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I2] 
						
					if  (Company.ReconciliationOverTolerance.Yes
					or   Company.ReconciliationOverTolerance.Ignore)

			
			            if  (!IsCatchWeight
			            and   PayablesInvoiceDetail.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
			            and   PurchaseOrderLine.VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
							if  (ThisReceiptLineRel exists
							and  EnteredUnitCost > ThisReceiptLineRel.MatchUnitCost)
								include 956CheckOverCost
								if  (CreateMessage
								and  CostOver not entered)
				

									MessageStatus								= 1
									Approved									= "M"
									MessageSubType								= "O"
									MessageType									= "C "
									include 955FormatCommonMessage
									CostOver									= true
						else
						if  (ThisReceiptLineRel exists
						and  MatchUnitCost > ThisReceiptLineRel.MatchUnitCost)
							include 956CheckOverCost
							if  (CreateMessage
							and  CostOver not entered)
			

								MessageStatus								= 1
								Approved									= "M"
								MessageSubType								= "O"
								MessageType									= "C "
								include 955FormatCommonMessage
								CostOver									= true
	
					if  (Company.ReconciliationUnderTolerance.Yes
					or   Company.ReconciliationUnderTolerance.Ignore)


			
			            if  (!IsCatchWeight
			            and   PayablesInvoiceDetail.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
			            and   PurchaseOrderLine.VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
							if  (EnteredUnitCost < ThisReceiptLineRel.MatchUnitCost
							and  ThisReceiptLineRel exists
							and  PurchaseOrderLine = ThisReceiptLineRel.PurchaseOrderLine
							and  CostUnder not entered)
								include 957CheckUnderCost
								if  (CreateMessage)
									if  (LocalMatchRuleToleranceGroup.CreateOpenMessageforUnderCost)
										MessageStatus						= 1
										Approved							= "M"
									else					
									if  (LocalMatchRuleToleranceGroup.CreateClosedMessageforUnderCost)
										MessageStatus						= 9
										MessageReasonCode					= LocalMatchRuleToleranceGroup.ReasonCodeForUnderCostMessage
				
									MessageSubType						= "U"
									MessageType							= "C"
									include 955FormatCommonMessage
									CostUnder							= true
						else
						if  (MatchUnitCost < ThisReceiptLineRel.MatchUnitCost
						and  ThisReceiptLineRel exists
						and  PurchaseOrderLine = ThisReceiptLineRel.PurchaseOrderLine
						and  CostUnder not entered)
							include 957CheckUnderCost
							if  (CreateMessage)
								if  (LocalMatchRuleToleranceGroup.CreateOpenMessageforUnderCost)
									MessageStatus						= 1
									Approved							= "M"
								else					
								if  (LocalMatchRuleToleranceGroup.CreateClosedMessageforUnderCost)
									MessageStatus						= 9
									MessageReasonCode					= LocalMatchRuleToleranceGroup.ReasonCodeForUnderCostMessage
			
								MessageSubType						= "U"
								MessageType							= "C"
								include 955FormatCommonMessage
								CostUnder							= true
			

			            if  (!IsCatchWeight
			            and   PayablesInvoiceDetail.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
			            and   PurchaseOrderLine.VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
							if  (EnteredQuantity < ThisReceiptLineRel.OpenToMatchQuantity
							and  ThisReceiptLineRel exists
							and  QuantityUnder not entered)
								include 959CheckUnderQty
								if  (CreateMessage)
									if  (LocalMatchRuleToleranceGroup.CreateOpenMessageforUnderQuantity)
										MessageStatus						= 1
										Approved							= "M"
									else					
									if  (LocalMatchRuleToleranceGroup.CreateClosedMessageforUnderQuantity)
										MessageStatus						= 9
										MessageReasonCode					= LocalMatchRuleToleranceGroup.ReasonCodeForUnderQuantityMessage
				
									MessageSubType						= "U"
									MessageType							= "Q"
									include 955FormatCommonMessage
									QuantityUnder							= true
						else
						if  (MatchedQuantity < ThisReceiptLineRel.OpenToMatchQuantity
						and  ThisReceiptLineRel exists
						and  QuantityUnder not entered)
							include 959CheckUnderQty
							if  (CreateMessage)
								if  (LocalMatchRuleToleranceGroup.CreateOpenMessageforUnderQuantity)
									MessageStatus						= 1
									Approved							= "M"
								else					
								if  (LocalMatchRuleToleranceGroup.CreateClosedMessageforUnderQuantity)
									MessageStatus						= 9
									MessageReasonCode					= LocalMatchRuleToleranceGroup.ReasonCodeForUnderQuantityMessage
			
								MessageSubType						= "U"
								MessageType							= "Q"
								include 955FormatCommonMessage
								QuantityUnder							= true
      





			if  (MatchWork.MatchLevel.InvoiceMatch
			and  InvoiceDetailKeyed
			and  !OverrideDetail
			and  !ThisReceiptLineRel exists)
				InvoiceMatchedNotReceived					= true

			if (!PayablesInvoiceDetail.RecordSource.CreatedWithinMatch)
				MatchUnitCost = PayablesInvoiceDetail.MatchUnitCost 

		705UpdateIntrastat 


				
			if  (!IntrastatHeaderRel exists)

				IntrastatProcessing.HeaderFc					= "C"
				IntrastatProcessing.TaxEntity					= Company.AccountingEntity
				IntrastatProcessing.FiscalYear					= DerivedIntrastatYear
				IntrastatProcessing.TransactionType				= "P"
				IntrastatProcessing.SystemCode					= "AP"
				IntrastatProcessing.Vendor						= PayablesInvoice.Vendor
				IntrastatProcessing.DocumentNumber				= PayablesInvoice.Invoice					
				IntrastatProcessing.NatureOfTransactionCode		= PayablesInvoice.NatureOfTransactionCode
				IntrastatProcessing.InvoiceDate					= PayablesInvoice.InvoiceDate
				IntrastatProcessing.DeliveryDate				= PayablesInvoice.InvoiceDate
				IntrastatProcessing.CurrencyRate				= InvoiceCurrencyExchangeRate
				IntrastatProcessing.VendorCurrency				= PayablesInvoice.InvoiceCurrency
				IntrastatProcessing.InvoiceCompany				= PurchaseOrder.Company
				IntrastatProcessing.PurchaseOrder				= PurchaseOrder
				IntrastatProcessing.UnloadingPort				= PayablesInvoice.UnloadingPort
				IntrastatProcessing.TransportMode				= PayablesInvoice.ShippingMethod					
				IntrastatProcessing.DeliveryTerms				= PayablesInvoice.ShipTerm						
				IntrastatProcessing.StatisticalProcedure		= PayablesInvoice.StatisticalProcedure
				if  (PayablesInvoice.MatchProcessType.DropShip)
					IntrastatProcessing.DropShip = "Y"
				else
					IntrastatProcessing.DropShip = "N"
					
				LocalTrigger									= IntrastatProcessing.MainTrigger
				

							
			IntrastatProcessing.HeaderFc					= blank
			if  (!IntrastatDetailRel exists)
				IntrastatProcessing.DetailFc				= "C"
			else
				IntrastatProcessing.DetailFc				= "U"
			    IntrastatProcessing.ICNCode				  		= IntrastatDetailRel.ICNCode
			    IntrastatProcessing.StockWeight			  		= IntrastatDetailRel.StockWeight
			    IntrastatProcessing.ReceivedAmount        		= IntrastatDetailRel.ReceivedAmount
			    IntrastatProcessing.SupplementaryUOM      		= IntrastatDetailRel.SupplementaryUOM
			    IntrastatProcessing.SupplementaryQuantity 		= IntrastatDetailRel.SupplementaryQuantity


			IntrastatProcessing.TaxEntity					= Company.AccountingEntity
			IntrastatProcessing.FiscalYear					= PayablesInvoice.InvoiceDate year
			IntrastatProcessing.IntrastatNumber 			= ThisReceiptLineRel.IntrastatNumber
			IntrastatProcessing.LineNumber					= ThisReceiptLine
		

			LocalCurrencyTable								= PayablesInvoice.CurrencyTable
			LocalExchangeDate								= PayablesInvoice.InvoiceDate				
            CurrencyWork.TransactionAmount					= PayablesInvoiceDetail.TotalDistributionAmount + DetailsTaxAmount
            CurrencyWork.FromCurrency						= PayablesInvoice.InvoiceCurrency
			CurrencyWork.BaseAmount.ToCurrency				= Company.Currency
			IntrastatProcessing.BaseAmount					= CurrencyWork.BaseAmount.OutputCurrencyAmount
			IntrastatProcessing.ICNCode				  		= PurchaseOrderLine.ICNCode
			
			LocalTrigger									= IntrastatProcessing.MainTrigger

		705aCreateIntrastatDropship 


				
				
			IntrastatProcessing.HeaderFc					= "C"
			IntrastatProcessing.TaxEntity					= Company.AccountingEntity
			IntrastatProcessing.FiscalYear					= DerivedIntrastatYear
			IntrastatProcessing.TransactionType				= "P"
			IntrastatProcessing.SystemCode					= "AP"
			IntrastatProcessing.Vendor						= PayablesInvoice.Vendor
			IntrastatProcessing.DocumentNumber				= PayablesInvoice.Invoice					
			IntrastatProcessing.NatureOfTransactionCode		= PayablesInvoice.NatureOfTransactionCode
			IntrastatProcessing.InvoiceDate					= PayablesInvoice.InvoiceDate
			IntrastatProcessing.DeliveryDate				= PayablesInvoice.InvoiceDate
			IntrastatProcessing.CurrencyRate				= InvoiceCurrencyExchangeRate
			IntrastatProcessing.VendorCurrency				= PayablesInvoice.InvoiceCurrency
			IntrastatProcessing.InvoiceCompany				= PurchaseOrder.Company
			IntrastatProcessing.PurchaseOrder				= PurchaseOrder
			IntrastatProcessing.UnloadingPort				= PayablesInvoice.UnloadingPort
			IntrastatProcessing.TransportMode				= PayablesInvoice.ShippingMethod					
			IntrastatProcessing.DeliveryTerms				= PayablesInvoice.ShipTerm						
			IntrastatProcessing.StatisticalProcedure		= PayablesInvoice.StatisticalProcedure
			if  (PayablesInvoice.MatchProcessType.DropShip)
				IntrastatProcessing.DropShip = "Y"
			else
				IntrastatProcessing.DropShip = "N"
					
			if  (PayablesInvoice.IntrastatNumber not entered)

				LocalTrigger									= IntrastatProcessing.MainTrigger
				
				invoke FastUpdate PayablesInvoice
					invoked.IntrastatNumber						= IntrastatProcessing.OutputIntrastatNumber

			IntrastatProcessing.HeaderFc						= blank
			

			if  (IntrastatDetailRel exists)
				IntrastatProcessing.DetailFc					= "U"

			else
				IntrastatProcessing.DetailFc					= "C"

				
			IntrastatProcessing.TaxEntity						= Company.AccountingEntity
			IntrastatProcessing.FiscalYear						= DerivedIntrastatYear
			IntrastatProcessing.IntrastatNumber 				= IntrastatProcessing.OutputIntrastatNumber
			IntrastatProcessing.LineNumber						= ThisReceiptLine
			IntrastatProcessing.FiscalYear						= DerivedIntrastatYear
			


			LocalCurrencyTable									= PayablesInvoice.CurrencyTable
			LocalExchangeDate									= PayablesInvoice.InvoiceDate				
            CurrencyWork.TransactionAmount						= PayablesInvoiceDetail.TotalDistributionAmount + DetailsTaxAmount
            CurrencyWork.FromCurrency							= PayablesInvoice.InvoiceCurrency
			CurrencyWork.BaseAmount.ToCurrency					= Company.Currency
			IntrastatProcessing.BaseAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount


			IntrastatProcessing.ICNCode				  			= PurchaseOrderLine.ICNCode
			IntrastatProcessing.StockWeight						= PurchaseOrderLine.StockWeight 
			IntrastatProcessing.SupplementaryUOM				= PurchaseOrderLine.ICNCode.SupplementaryUOM
			IntrastatProcessing.SupplementaryQuantity 			= PurchaseOrderLine.SupplementaryQuantity			



			
			LocalTrigger										= IntrastatProcessing.MainTrigger
			
		706DistItem 

			
			initialize WorkDistributionGroup
			WorkDistributionGroup.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
			WorkDistributionGroup.Company				= Company
			WorkDistributionGroup.Invoice						= PayablesInvoice
			WorkDistributionGroup.PurchaseOrder					= PurchaseOrder
			WorkDistributionGroup.PurchaseOrderLine				= PurchaseOrderLine
			WorkDistributionGroup.PayablesInvoiceDetail			= PayablesInvoiceDetail
			WorkDistributionGroup.MatchedQuantity				= MatchedQuantity

			initialize DistributionCompany
			MatchedNotReceivedExchangeVariance	= true
			CostChargeback						= false
			DistributionProcessLevel			= PurchaseOrder.ProcessLevel

			if  (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
				WorkDistributionGroup.CurrencyRate	= WorkReceiptConversionRate
				WorkPoDate						= ThisReceiptLineRel.PurchaseOrderReceipt.ReceivedDate
			else
			if  (PurchaseOrder.CurrencyExchangeSetPoint.Entry)
				WorkDistributionGroup.CurrencyRate	= WorkReceiptConversionRate
				WorkPoDate						= PurchaseOrder.PurchaseOrderDate
			else
			if  ((Company.Currency != PayablesInvoice.InvoiceCurrency
			or    PurchaseOrder.CurrencyExchangeSetPoint.Invoicing)
			and  !ItemType.Inventoried)
				WorkDistributionGroup.CurrencyRate	= InvoiceCurrencyExchangeRate
				WorkPoDate						= PayablesInvoice.InvoiceDate
			else
				WorkDistributionGroup.CurrencyRate	= WorkReceiptConversionRate
				WorkPoDate						= PurchaseOrder.PurchaseOrderDate

			if  (MemoInvoice
			and  ItemType.Inventoried)
				include 715ProcessMemo
			else
			if  (ItemType.Inventoried
			and  ThisReceiptLineRel exists
			and  ThisReceiptLineRel.PurchaseOrderReceiptLine.ArchivedWriteOffQuantity > 0)

					




	
				if  (ThisReceiptLineRel.PurchaseOrderReceiptLine.ArchivedWriteOffQuantity > LocalMatchedQuantity)
					WorkArchiveQuantity					= LocalMatchedQuantity
				else
					WorkArchiveQuantity					= ThisReceiptLineRel.PurchaseOrderReceiptLine.ArchivedWriteOffQuantity
	
				WorkDistributionGroup.Amount					= WorkArchiveQuantity * NonTaxEnteredUnitCost
				DistributionUnitCost					= NonTaxEnteredUnitCost

	
				if  (WorkDistributionGroup.Amount entered)
					DistributionCompany					= Company
					if  (PayablesInvoice.ProcessLevel.UnderbillAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.UnderbillAccount
					else
					if  (Company.UnderbillAccount entered)
						WorkDistributionGroup.Account				= Company.UnderbillAccount
					else
					if  (PayablesInvoice.ProcessLevel.InventoryReceiptArchivalAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.InventoryReceiptArchivalAccount
					else
						WorkDistributionGroup.Account				= Company.InventoryReceiptArchivalAccount
					



					
					WorkDistributionGroup.MatchedQuantity		= WorkArchiveQuantity
					include 719MatchDistribCont
					TotalDistributionAmount				= WorkDistributionGroup.Amount
	


							
					if  (ThisReceiptLineRel.PurchaseOrderReceiptLine.ArchivedWriteOffQuantity <= DetailsMatchedQuantity
					and (MatchWork.MatchRuleResult.OneToOne 
					or   MatchWork.MatchRuleResult.OneToAll
					or   InvoiceDetailKeyed))
						WorkDistributionGroup.MatchedQuantity		= DetailsMatchedQuantity - WorkArchiveQuantity
						WorkDistributionGroup.Amount				= WorkDistributionGroup.MatchedQuantity * NonTaxEnteredUnitCost
						DistributionUnitCost				= NonTaxEnteredUnitCost

						
						if  (WorkDistributionGroup.Amount entered)
							DistributionCompany				= Company
							if  (PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount entered)
								WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount
							else
								WorkDistributionGroup.Account				= Company.MatchedNotReceivedAccount
							include 719MatchDistribCont
			else
				include 710CreateMatchDistrib

				if  (MatchWork.MatchLevel.DetailMatch
				and  ThisReceiptLineRel exists)
				
					initialize AmMatchedQuantity
					include 714CreateVar

					CurrentCostDifference			= DistributionUnitCost 



					if  (AdjustedMatchUnitCost > 0
					and  NonTaxMatchUnitCost != NonTaxApprovedUnitCost)

			



			
						DistributionUnitCost					= NonTaxApprovedUnitCost - NonTaxMatchUnitCost

						WorkDistributionGroup.Amount 					= WorkVarianceQuantity * DistributionUnitCost
						WorkDistributionGroup.MatchedQuantity			= WorkVarianceQuantity
			
						if  (ItemType.Inventoried)
							WorkPostingSwitch					= 3
							if (NonTaxMatchUnitCost != NonTaxEnteredUnitCost)
								WorkDistributionGroup.Account = WorkToleranceAccount 

							else
							if (!ItemLocationRel.InventoryTracked)								
								WorkDistributionGroup.Account	= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
							else
							if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
								WorkDistributionGroup.Account	= PayablesInvoice.ProcessLevel.CostVarianceAccount

							else
								WorkDistributionGroup.Account	= Company.CostVarianceAccount

						else
							WorkPostingSwitch					= 1
			
						NewInvoiceLinkICVToleranceQuantity 		= WorkVarianceQuantity 
						NewInvoiceLinkICVToleranceUnitCost 		= DistributionUnitCost
						NewInvoiceLinkICVToleranceAmount 		= WorkDistributionGroup.Amount
			
						include 719MatchDistribCont
					
						if  (DoChargeback)

							WorkChargebackQuantity				= WorkVarianceQuantity 
							AmMatchedQuantity					= WorkVarianceQuantity
							WorkDistributionGroup.Amount 				= WorkDistributionGroup.Amount * -1
							if  (ItemType.Inventoried)
								WorkPostingSwitch				= 3
								WorkDistributionGroup.Account = WorkToleranceAccount 
							else
								WorkPostingSwitch				= 1
								

							include 717BuildCbDetails

					if  (DoChargeback
					and  Difference3Amount not entered
					and  NonTaxEnteredUnitCost != NonTaxMatchUnitCost)
						NextSentence = true
					else





					
						include 725CalcExchRateVar
						include 725tCalcTaxExchRateVar

		710CreateMatchDistrib 












			if  (!ThisReceiptLineRel exists
			or    ThisReceiptLineRel.PurchaseOrderReceiptLine.ArchivedWriteOffQuantity != LocalMatchedQuantity)


				include 713ProcessMnr







				if  (MatchedNotReceivedWriteoffQuantity = 0
				or  (IsCatchWeight
				and  MatchedNotReceivedWriteoffQuantity != BuyUOMMatchedQuantity)
				or  (!IsCatchWeight
				and  MatchedNotReceivedWriteoffQuantity != DetailsMatchedQuantity))


		      		DistributionUnitCost					= NonTaxEnteredUnitCost

		      		 




				

					if  (IsCatchWeight)
						if (ThisReceiptLineRel exists
						and LocalMatchedQuantity > ThisReceiptLineRel.PurchaseOrderReceiptLine.CatchWeightQuantity)
							WorkDistributionGroup.Amount 			= ThisReceiptLineRel.PurchaseOrderReceiptLine.CatchWeightQuantity * DistributionUnitCost
						else						
							WorkDistributionGroup.Amount 			= LocalMatchedQuantity * DistributionUnitCost

					else
					if  (MatchWork.MatchLevel.InvoiceMatch
					and  MatchWork.MatchRuleType.AllToOne
					and  InvoiceDetailKeyed
					and  ThisReceiptLineRel exists)
						WorkDistributionGroup.Amount 				= LocalMatchedQuantity * DistributionUnitCost
					else
					if  (MatchWork.MatchLevel.InvoiceMatch
					and  InvoiceDetailKeyed
					and  ThisReceiptLineRel exists)
						LocalMatchedQuantity				= ReceiptLineReceivedQuantity
						WorkDistributionGroup.Amount 				= ReceiptLineReceivedQuantity * DistributionUnitCost
					else
					if  (LocalMatchedQuantity > ReceiptLineReceivedQuantity
					and  !ItemType.Service)
						WorkDistributionGroup.Amount 				= ReceiptLineReceivedQuantity * DistributionUnitCost
					else

						LocalAmount 								= LocalMatchedQuantity * DistributionUnitCost 
						round LocalAmount to nearest DerivedRoundTo 
						WorkDistributionGroup.Amount 				= LocalAmount 

					if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
					else
						WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount

					WorkDistributionGroup.CurrencyRate			= WorkReceiptConversionRate

					if  (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
						WorkPoDate							= ThisReceiptLineRel.PurchaseOrderReceipt.ReceivedDate
					else
						WorkPoDate							= PurchaseOrder.PurchaseOrderDate

					WorkDistributionGroup.MatchedQuantity			= LocalMatchedQuantity


					include 719MatchDistribCont

					if  (ItemType.Inventoried)
						TotalDistributionAmount				= WorkDistributionGroup.Amount
					else
						TotalDistributionAmount				= PendingDistributionAmount
						
					if  (DoChargeback
					and  PurchaseOrderLine entered
					and  ItemType.Service)
						initialize ServiceLineChargebackUnitCost
						SaveServiceLineChargebackQuantity	= ServiceLineChargebackQuantity

			
						NewOpenPurchaseOrderAmount  = PurchaseOrderLine.OpenPurchaseAmountPOCurrency - (DetailsEnteredUnitCost * DetailsEnteredQuantity)
			
						if  (ThisReceiptLineRel.PurchaseOrderLine.ServiceCode.Amount
						and  DetailsEnteredUnitCost > PurchaseOrderLine.OpenPurchaseAmountPOCurrency)
							ServiceLineChargebackUnitCost   	= PurchaseOrderLine.OpenPurchaseAmountPOCurrency - DetailsEnteredUnitCost
							ServiceLineChargebackQuantity		= 1

							NewPOLineChargebackAmount       	= ServiceLineChargebackUnitCost * -1
							WorkDistributionGroup.Amount				= ServiceLineChargebackUnitCost
							DistributionUnitCost				= ServiceLineChargebackUnitCost


							include 717BuildCbDetails
			
						if  (ThisReceiptLineRel.PurchaseOrderLine.ServiceCode.Quantity)
							if  (DetailsEnteredUnitCost > ThisReceiptLineRel.PurchaseOrderLine.EnteredUnitCost)

								ServiceLineChargebackUnitCost 	= PurchaseOrderLine.EnteredUnitCost - DetailsEnteredUnitCost

								if (DetailsEnteredQuantity > ReceiptLineReceivedQuantity)
									ServiceLineChargebackQuantity 	= ReceiptLineReceivedQuantity 
								else 
									ServiceLineChargebackQuantity 	= DetailsEnteredQuantity 


								WorkDistributionGroup.Amount 			= ServiceLineChargebackQuantity * ServiceLineChargebackUnitCost
								DistributionUnitCost			= ServiceLineChargebackUnitCost


								include 717BuildCbDetails
			
							if  (SaveServiceLineChargebackQuantity  < 0)
								ServiceLineChargebackQuantity	= SaveServiceLineChargebackQuantity

								ServiceLineChargebackUnitCost	= DetailsEnteredUnitCost 
								WorkDistributionGroup.Amount 	= ServiceLineChargebackQuantity * ServiceLineChargebackUnitCost
								DistributionUnitCost			= ServiceLineChargebackUnitCost


								include 717BuildCbDetails
								ExcessQuantity					= SaveServiceLineChargebackQuantity * -1

					if  (MemoInvoice
					and  !ItemType.Inventoried)
						include 715tMemoTax


		713ProcessMnr 











			if  (MemoInvoice
			and  PayablesInvoiceDetail.MemoAdjustType.QuantityAdjustment)
				NextSentence = true
			else
				WorkLandedAddOnCharge							= true
				WorkRetainLandedAddOnCharge						= true

				if  (ItemType.Service)
					WorkLandedAddOnCharge						= false
	
				CalculateMatchNotReceivedWriteoffQuantity		= true	


				if  ((MatchWork.ProcessMode.Reconciliation
				and   ThisReceiptLineRel exists
				and   PurchaseOrder not entered)

				or  (ThisReceiptLineRel exists
				and  MatchWork.MatchLevel.DetailMatch
				and  MatchWork.MatchRuleType.OneToAll
				and  TotalMatchedQuantity < DetailsMatchedQuantity))
					if  (ThisReceiptLineRel.AnotherSelectedMatchWorkReceiptLineRel exists) 
						CalculateMatchNotReceivedWriteoffQuantity	= false
							
				initialize WorkMatchedNotReceivedQuantity
				initialize WorkWriteoffQuantity
				initialize MatchedNotReceivedWriteoffQuantity
				





				if  (IsCatchWeight)
					if  (CalculateMatchNotReceivedWriteoffQuantity
					and  RemainingQuantity      > ReceiptLineVbuyReceiptQuantity)
						if  (!ThisReceiptLineRel exists)
							if  (Company.PostingAccountNoReceiptLine.MatchedNoReceipt)
								WorkMatchedNotReceivedQuantity 	= RemainingQuantity - ReceiptLineVbuyReceiptQuantity

							else
							if  (Company.PostingAccountNoReceiptLine.MatchWriteOff)
								WorkWriteoffQuantity 			= RemainingQuantity - ReceiptLineVbuyReceiptQuantity

						else
						if  (Company.PostingAccountQuantityExceedsReceipt.MatchedNoReceipt)
							WorkMatchedNotReceivedQuantity 		= RemainingQuantity - ReceiptLineVbuyReceiptQuantity

						else
						if  (Company.PostingAccountQuantityExceedsReceipt.MatchWriteOff)
							WorkWriteoffQuantity 				= RemainingQuantity - ReceiptLineVbuyReceiptQuantity

				else 
				if  (CalculateMatchNotReceivedWriteoffQuantity
				and  RemainingQuantity      > ReceiptLineReceivedQuantity
				and  !ItemType.Service)
					if  (!ThisReceiptLineRel exists)
						if  (Company.PostingAccountNoReceiptLine.MatchedNoReceipt)
							WorkMatchedNotReceivedQuantity 	= RemainingQuantity - ReceiptLineReceivedQuantity

						else
						if  (Company.PostingAccountNoReceiptLine.MatchWriteOff)
							WorkWriteoffQuantity 			= RemainingQuantity - ReceiptLineReceivedQuantity

					else
					if  (Company.PostingAccountQuantityExceedsReceipt.MatchedNoReceipt)
						WorkMatchedNotReceivedQuantity 		= RemainingQuantity - ReceiptLineReceivedQuantity

					else
					if  (Company.PostingAccountQuantityExceedsReceipt.MatchWriteOff)
						WorkWriteoffQuantity 				= RemainingQuantity - ReceiptLineReceivedQuantity


				if  (WorkMatchedNotReceivedQuantity > 0)
					MatchedNotReceivedWriteoffQuantity		= WorkMatchedNotReceivedQuantity

				else
				if  (WorkWriteoffQuantity > 0)
					MatchedNotReceivedWriteoffQuantity		= WorkWriteoffQuantity







				if  (MatchWork.MatchLevel.DetailMatch
				and  DoChargeback
				and  ReceivedNotInvoicedQuantity > 0
				and  !MatchWork.MatchTable.ChargebackType.Overbill)

					WorkChargebackQuantity 							= ReceivedNotInvoicedQuantity * -1
					WorkDistributionGroup.Amount					= WorkChargebackQuantity * NonTaxMatchUnitCost
					DistributionUnitCost							= NonTaxMatchUnitCost

					if (ItemType.Inventoried
					and !ItemLocationRel.InventoryTracked)								
						WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
					else
					if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
					else
						WorkDistributionGroup.Account				= Company.CostVarianceAccount
					WorkDistributionGroup.MatchedQuantity					= WorkChargebackQuantity
					if  (!ItemType.Inventoried)
						if  (PreviousMatchedQuantity entered)
							WorkPolineMatchedQuantity				= PreviousMatchedQuantity
						else
							WorkPolineMatchedQuantity				+= LocalMatchedQuantity
					include 719MatchDistribCont
					WorkDistributionGroup.Amount							*= -1
					if (ItemType.Inventoried
					and !ItemLocationRel.InventoryTracked)								
						WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
					else
					if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
					else
						WorkDistributionGroup.Account				= Company.CostVarianceAccount


					include 717BuildCbDetails

					if  (!ItemType.Inventoried
					and   PreviousMatchedQuantity not entered)
						WorkPolineMatchedQuantity					-= LocalMatchedQuantity




					

				if  (MatchedNotReceivedWriteoffQuantity > 0
				and  (MatchWork.MatchLevel.DetailMatch
				or    ItemType.Service
				or   (MatchWork.MatchLevel.InvoiceMatch
				and   MatchWork.ProcessMode.Reconciliation
				and   !OverrideDetail)))
					if  (IsCatchWeight)
						DistributionUnitCost						= PurchaseOrderLine.VendorPriceUnitCost

					else
					if  (ItemType.Inventoried
					and  PurchaseOrderLine entered)
						DistributionUnitCost						= PurchaseOrderLine.EnteredUnitCost

					else
						DistributionUnitCost						= NonTaxMatchUnitCost


					AmMatchedQuantity								= MatchedNotReceivedWriteoffQuantity
					WorkDistributionGroup.Amount					= MatchedNotReceivedWriteoffQuantity * DistributionUnitCost

					if  (IsCatchWeight)

						if  (!ThisReceiptLineRel exists)
							WorkDistributionGroup.Amount		= MatchedQuantity * DistributionUnitCost

						else
							WorkDistributionGroup.Amount		= ((DetailsEnteredQuantity - ThisReceiptLineRel.PurchaseOrderReceiptLine.CatchWeightQuantity) * DistributionUnitCost)


					if  (WorkMatchedNotReceivedQuantity > 0)
						if  (!ItemType.Inventoried)
							if  (PreviousMatchedQuantity entered
							and  PendingDistributions)
								WorkPolineMatchedQuantity			= PreviousMatchedQuantity
							else
								WorkPolineMatchedQuantity			+= LocalMatchedQuantity
						WorkInvoiceDetailMatchedNotReceivedQuantity	= WorkMatchedNotReceivedQuantity



						MatchedNotReceivedQuantity		= WorkMatchedNotReceivedQuantity



						if  (PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount

						else
							WorkDistributionGroup.Account				= Company.MatchedNotReceivedAccount

					else
						if  (PayablesInvoice.ProcessLevel.MatchWriteOffAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.MatchWriteOffAccount

						else
							WorkDistributionGroup.Account				= Company.MatchWriteOffAccount



					NewInvoiceLinkMNRReceipt						= ThisReceipt
					NewInvoiceLinkMatchedNotReceivedQuantity		= WorkMatchedNotReceivedQuantity

					NewInvoiceLinkMNRUnitCost						= DistributionUnitCost
					NewInvoiceLinkMNRAmount							= WorkDistributionGroup.Amount
					WorkDistributionGroup.MatchedQuantity					= MatchedNotReceivedWriteoffQuantity

					include 719MatchDistribCont

					if  (!DoChargeback)
						MatchedNotReceivedExchangeVariance			= true
						WorkVarianceQuantity							= MatchedNotReceivedWriteoffQuantity
						include 725CalcExchRateVar
						include 725tCalcTaxExchRateVar
						MatchedNotReceivedExchangeVariance			= false
					else

						WorkChargebackQuantity						= MatchedNotReceivedWriteoffQuantity
						WorkDistributionGroup.Amount						*= -1
						MNRDistrib 									= true
						if  (ItemType.Inventoried
						and  DetailsTaxCode not entered)
							if  (ThisReceiptLineRel exists
							and  ThisReceiptLineRel.PurchaseOrderReceiptLine.TaxCode entered)
								DetailsTaxCode						= ThisReceiptLineRel.PurchaseOrderReceiptLine.TaxCode
								DetailsProductTaxCategory			= ThisReceiptLineRel.PurchaseOrderReceiptLine.ProductTaxCategory
							else
							if  (PurchaseOrderLine exists
							and  PurchaseOrderLine.TaxCode entered)
								DetailsTaxCode						= PurchaseOrderLine.TaxCode
								DetailsProductTaxCategory			= PurchaseOrderLine.ProductTaxCategory
						if (PayablesInvoice.TaxAdjustment.OverrideProductOnly		
						or 	PayablesInvoice.TaxAdjustment.OverrideProductAndAOC		
						or  PayablesInvoice.TaxAdjustment.OverrideTaxablePOLine		
						or  PayablesInvoice.TaxAdjustment.OverrideTaxablePOAndAOC)
							
							ChargebackMatchedNotReceived			= 1	


						AmMatchedQuantity							= WorkChargebackQuantity

						WorkPostingSwitch					= 4

						include 717BuildCbDetails

					if   (WorkMatchedNotReceivedQuantity > 0
					and  !ItemType.Inventoried
					and  (PreviousMatchedQuantity not entered
					or    !PendingDistributions))
						WorkPolineMatchedQuantity					-= LocalMatchedQuantity
	
				if  (MatchedNotReceivedWriteoffQuantity > 0
				and  MatchWork.MatchLevel.DetailMatch)

					initialize AmMatchedQuantity
					if  (ItemType.Inventoried
					and  PurchaseOrderLine exists)
						DistributionUnitCost					= PurchaseOrderLine.EnteredUnitCost

					else
						DistributionUnitCost					= NonTaxMatchUnitCost


					DistributionUnitCost						= NonTaxApprovedUnitCost - DistributionUnitCost

					WorkDistributionGroup.Amount 						= MatchedNotReceivedWriteoffQuantity * DistributionUnitCost

					if  (DistributionUnitCost > 0)

						CostChargeback							= true

					if  (WorkDistributionGroup.Amount entered)
						NewInvoiceLinkMNRToleranceQuantity		= MatchedNotReceivedWriteoffQuantity
						NewInvoiceLinkMNRToleranceUnitCost		= DistributionUnitCost
						NewInvoiceLinkMNRToleranceAmount		= WorkDistributionGroup.Amount 
	
					NewInvoiceLinkMNRTaxUnitCost				= MNRTaxMatchedNotReceivedUnitCost  
					NewInvoiceLinkMNRToleranceTaxUnitCost		= MNRTaxToleranceUnitCost			

					if  (!ItemType.Inventoried
					and  WorkDistributionGroup.Amount entered)
						if  (PreviousMatchedQuantity entered)
							WorkPolineMatchedQuantity			= PreviousMatchedQuantity
						else
							WorkPolineMatchedQuantity			+= LocalMatchedQuantity

					if  (WorkDistributionGroup.Amount > 0)
						WorkDistributionGroup.Account = WorkToleranceAccount 
					
						WorkDistributionGroup.MatchedQuantity				= MatchedNotReceivedWriteoffQuantity
						WorkPostingSwitch							= 3
					
						include 719MatchDistribCont 

					if  (DoChargeback)
						WorkChargebackQuantity					= MatchedNotReceivedWriteoffQuantity
						WorkDistributionGroup.Amount 					*= -1

						DetailsProductTaxCategory				= PayablesInvoiceDetail.ProductTaxCategory


						if (ItemType.Inventoried 
						and MNRDistrib)
							WorkDistributionGroup.Account = WorkToleranceAccount
						include 717BuildCbDetails

					if  (WorkMatchedNotReceivedQuantity > 0
					and  !ItemType.Inventoried
					and  PreviousMatchedQuantity not entered
					and  WorkDistributionGroup.Amount entered)
						WorkPolineMatchedQuantity				-= LocalMatchedQuantity
	
				if  (MatchedNotReceivedWriteoffQuantity > 0)
					AmMatchedQuantity							= LocalMatchedQuantity
					if  (!UpdateQuantity
					and  !PendingDistributions)
						WorkPolineMatchedQuantity				+= MatchedNotReceivedWriteoffQuantity
      
		714CreateVar 




			
			CostChargeback															= true
			DistributionUnitCost     												= NonTaxMatchUnitCost - NonTaxEnteredUnitCost

			WorkVarianceQuantity													= LocalMatchedQuantity


			if (IsCatchWeight)
				WorkVarianceQuantity												= LocalMatchedQuantity

			else	    
			if  (ItemType.Inventoried
			and  PayablesInvoiceDetail.PurchaseOrderReceipt entered
			and  instance count of MatchWorkReceiptLineForPOLineRel > 1)
				WorkVarianceQuantity												= DetailsMatchedQuantity

			else
			if  (MatchWork.MatchLevel.DetailMatch
			and  LocalMatchedQuantity > ReceiptLineReceivedQuantity)
				WorkVarianceQuantity												= ReceiptLineReceivedQuantity

			else
			if  (MatchWork.MatchLevel.DetailMatch
			and  DoChargeback
			and  ReceiptLineReceivedQuantity > DetailsMatchedQuantity
			and  !MatchWork.MatchRuleType.AllToOne)
				WorkVarianceQuantity												= DetailsMatchedQuantity


			WorkDistributionGroup.Amount 			= WorkVarianceQuantity * DistributionUnitCost
				
			if  (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
				WorkDistributionGroup.CurrencyRate					= WorkReceiptConversionRate
			else
				WorkDistributionGroup.CurrencyRate					= InvoiceCurrencyExchangeRate

			if  (WorkDistributionGroup.CurrencyRate not entered)
				WorkDistributionGroup.CurrencyRate					= 1

			if  (ItemType.Inventoried
			or  (DetailsLandedAddOnCharge
			and  MatchWork.MatchLevel.DetailMatch))
				NewInvoiceLinkICVQuantity					= WorkVarianceQuantity
				NewInvoiceLinkICVUnitCost					= DistributionUnitCost
				NewInvoiceLinkICVAmount						= WorkDistributionGroup.Amount
			else
				NewReceiptLineMatchedQuantity				= WorkVarianceQuantity
				NewInvoiceLinkMatchUnitCost					= DistributionUnitCost


			if  (WorkDistributionGroup.Amount entered)


				if  (ItemType.Inventoried
				or  (DetailsLandedAddOnCharge
				and  MatchWork.MatchLevel.DetailMatch))
					if (ItemType.Inventoried
					and !ItemLocationRel.InventoryTracked)								
						WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
					else
					if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
					else
						WorkDistributionGroup.Account				= Company.CostVarianceAccount
				else
					WorkDistributionGroup.Account = WorkToleranceAccount 
							


				if  (ItemType.Inventoried
				and  DoChargeback
				and  LocalEnteredUnitCost != NonTaxMatchUnitCost)



					WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity

				include 719MatchDistribCont


				
			if  (ItemType.Inventoried
			and  ItemLocationRel.InventoryTracked								
			and  MatchWork.MatchLevel.DetailMatch)
				if (DetailsTaxCode entered)
					DistributionUnitCost		+= (MatchLandTaxUnitCost - EnteredLandTaxUnitCost)
				include 750IcAdjust






			if  (MatchWork.MatchLevel.DetailMatch
			and  DoChargeback
			and  MatchWork.MatchRuleResult.AllToOne
			and  !PayablesInvoice.MatchProcessType.DropShip
			and  !PayablesInvoice.MatchProcessType.Service
			and  WorkVarianceQuantity not entered)
				WorkVarianceQuantity		= ThisReceiptInvoiceLinkMatchedQuantity





			if  (DoChargeback
			and (AdjustedMatchUnitCost not entered
			or  ((NonTaxApprovedUnitCost > AdjustedMatchUnitCost)
			and  (AdjustCostMessageRel not exists or AcceptCostMessageRel exists))))
				DistributionUnitCost				= NonTaxMatchUnitCost - NonTaxEnteredUnitCost





				WorkDistributionGroup.Amount 				= WorkVarianceQuantity * DistributionUnitCost

				if  (ItemType.Inventoried)
					WorkPostingSwitch				= 2
					if (!ItemLocationRel.InventoryTracked)								
						WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
					else
					if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
					else
						WorkDistributionGroup.Account				= Company.CostVarianceAccount
				else
					WorkPostingSwitch				= 1
					



				if  (MatchWork.MatchTable.ChargebackType.Overbill 
				and  NonTaxMatchUnitCost < NonTaxEnteredUnitCost
				and  ReceivedNotInvoicedQuantity not entered 
				and  MatchedNotReceivedWriteoffQuantity not entered)
					NextSentence = true 
				else 
					WorkDistributionGroup.Amount 	= WorkDistributionGroup.Amount * -1
					WorkChargebackQuantity			= WorkVarianceQuantity 
					AmMatchedQuantity				= WorkVarianceQuantity

					UseVariance = true

					include 717BuildCbDetails	
					UseVariance = false
					initialize WorkPostingSwitch

					if  (ItemType.Inventoried)
						DistributionUnitCost		-= (ApprovedLandTaxUnitCost - LocalEnteredLandTaxUnitCost) 



		715ProcessMemo 

      
			TempMatchedQuantity						= DetailsMatchedQuantity 
			TotalMatchedQuantity					= DetailsMatchedQuantity
			TempVbuyMatchQuantity					= DetailsBuyUOMMatchedQuantity 

			initialize MtxTotalTaxAmt




      		

			if  (PayablesInvoice.InvoiceType.CreditMemo
			and  PayablesInvoiceDetail.MemoAdjustType.CostAdjustment)

	
				RemainingUnitCost							= MatchUnitCost 
	      


				if  (ThisReceiptInvoiceLinkTotalIcvTolUcst > 0
				and  RemainingUnitCost < 0)


					if  ((DetailsMatchUnitCost * -1) > ThisReceiptInvoiceLinkTotalIcvTolUcst)
						DistributionUnitCost						= ThisReceiptInvoiceLinkTotalIcvTolUcst * -1

						RemainingUnitCost							= MatchUnitCost - DistributionUnitCost

					else
						DistributionUnitCost						= MatchUnitCost 


						initialize RemainingUnitCost
		      
						ApprovedUnitCost							= DistributionUnitCost 
						NewInvoiceLinkICVToleranceUnitCost			= DistributionUnitCost
						
						TempMatchedQuantity							= DetailsMatchedQuantity
						WorkVarianceQuantity						= DetailsMatchedQuantity
						NewInvoiceLinkICVToleranceQuantity			= DetailsMatchedQuantity
		
						WorkDistributionGroup.Amount						= WorkVarianceQuantity * DistributionUnitCost
		
						NewInvoiceLinkICVToleranceAmount			= WorkDistributionGroup.Amount
		      
					if  (WorkDistributionGroup.Amount entered)
						WorkDistributionGroup.Account = WorkToleranceAccount 
		      
			      

						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity
						WorkPostingSwitch							= 3
						include 719MatchDistribCont
			      

						WorkPostingSwitch							= 1
						initialize MtxTotalTaxAmt
						if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
						else
							WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount
						include 715tMemoTax
			      







			      

						WorkDistributionGroup.Amount						= MtxTotalTaxAmt
						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity
						DistributionUnitCost						= (MtxTotalTaxAmt / WorkVarianceQuantity)

						WorkDistributionGroup.Account = WorkToleranceAccount 
						include 719MatchDistribCont
			      

						WorkDistributionGroup.Amount 						= MtxTotalTaxAmt * -1
						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity
						DistributionUnitCost						= ((MtxTotalTaxAmt / WorkVarianceQuantity) * -1)

						if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
						else
							WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount
						include 719MatchDistribCont
					

				if  (RemainingUnitCost < 0)

		      
					SaveRemainingUnitCost							= RemainingUnitCost 
		      
					if  ((RemainingUnitCost * -1) > TotalThisReceiptInvoiceLinkIcvUnitCost)
						DistributionUnitCost						= TotalThisReceiptInvoiceLinkIcvUnitCost * -1

						RemainingUnitCost							-= DistributionUnitCost

					else            
						DistributionUnitCost						= RemainingUnitCost 

						initialize RemainingUnitCost

		      
					ApprovedUnitCost								= DistributionUnitCost 
					NewInvoiceLinkICVUnitCost						= DistributionUnitCost
					
					TempMatchedQuantity								= DetailsMatchedQuantity 
					WorkVarianceQuantity							= DetailsMatchedQuantity
					NewInvoiceLinkICVQuantity						= DetailsMatchedQuantity
					
					WorkDistributionGroup.Amount							= WorkVarianceQuantity * DistributionUnitCost
					NewInvoiceLinkICVAmount							= WorkDistributionGroup.Amount 
		      
					if  (WorkDistributionGroup.Amount entered)
						if (ItemType.Inventoried
						and !ItemLocationRel.InventoryTracked)								
							WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
						else
						if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
						else
							WorkDistributionGroup.Account				= Company.CostVarianceAccount
			      

						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity
						WorkPostingSwitch							= 2
						include 719MatchDistribCont
			      

						WorkPostingSwitch							= 1
						initialize MtxTotalTaxAmt
						if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
						else
							WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount
						include 715tMemoTax
			      







			      

						WorkDistributionGroup.Amount						= MtxTotalTaxAmt 
						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity 
						DistributionUnitCost						= (MtxTotalTaxAmt / WorkVarianceQuantity)

						if (ItemType.Inventoried
						and !ItemLocationRel.InventoryTracked)								
							WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
						else
						if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
						else
							WorkDistributionGroup.Account				= Company.CostVarianceAccount
						include 719MatchDistribCont
			      

						WorkDistributionGroup.Amount 						= MtxTotalTaxAmt * -1.
						WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity 
						DistributionUnitCost						= ((MtxTotalTaxAmt / WorkVarianceQuantity) * -1)

						if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
						else
							WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount
						include 719MatchDistribCont
		      
					ApprovedUnitCost								= SaveRemainingUnitCost 
					DistributionUnitCost							= SaveRemainingUnitCost

						
					TempMatchedQuantity								= DetailsMatchedQuantity 
					WorkVarianceQuantity							= DetailsMatchedQuantity
		      
					WorkDistributionGroup.Amount							= ((WorkVarianceQuantity * DistributionUnitCost) + MtxTotalTaxAmt)
		      
					WorkDistributionGroup.MatchedQuantity					= WorkVarianceQuantity 
					DistributionUnitCost							= (WorkDistributionGroup.Amount / WorkVarianceQuantity)

		      
					if  (ItemType.Inventoried
					and  ItemLocationRel.InventoryTracked)
						include 750IcAdjust
	      
				NewReceiptLineMatchedQuantity					= DetailsMatchedQuantity
	
				include 715uUpdatePomatchobj
      



			

			if  (PayablesInvoice.InvoiceType.DebitMemo
			and  PayablesInvoiceDetail.MemoAdjustType.CostAdjustment)

	      
				ApprovedUnitCost								= MatchUnitCost 
				DistributionUnitCost							= MatchUnitCost

				TempMatchedQuantity								= MatchedQuantity
				WorkVarianceQuantity							= MatchedQuantity
				WorkDistributionGroup.Amount							= WorkVarianceQuantity * DistributionUnitCost
	      
				if  (WorkDistributionGroup.Amount entered)
					WorkPostingSwitch							= 2
					WorkDistributionGroup.MatchedQuantity				= WorkVarianceQuantity
					if (ItemType.Inventoried
					and !ItemLocationRel.InventoryTracked)								
						WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
					else
					if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
					else
						WorkDistributionGroup.Account				= Company.CostVarianceAccount
					initialize MtxTotalTaxAmt
					include 719MatchDistribCont
					include 715tMemoTax
	      
				WorkDistributionGroup.MatchedQuantity					= WorkVarianceQuantity 
				DistributionUnitCost							= (WorkDistributionGroup.Amount / WorkVarianceQuantity)

	      
				if  (ItemType.Inventoried
				and  ItemLocationRel.InventoryTracked)
					include 750IcAdjust
	        
				NewInvoiceLinkICVQuantity            			= WorkVarianceQuantity 
				NewInvoiceLinkICVUnitCost            			= DistributionUnitCost
				NewInvoiceLinkICVAmount            				= WorkDistributionGroup.Amount 
				NewReceiptLineMatchedQuantity					= DetailsMatchedQuantity       
				include 715uUpdatePomatchobj
      




			
			if  (PayablesInvoice.InvoiceType.CreditMemo
			and  PurchaseOrderLine.MatchedNotReceivedQuantity > 0
			and  PayablesInvoiceDetail.MemoAdjustType.QuantityAdjustment)
				WorkMatchedNotReceivedQuantity				= DetailsMatchedQuantity * -1
				if  (ThisReceiptInvoiceLinkTotalMatchedNotRecievedQuantity < WorkMatchedNotReceivedQuantity)
					WorkMatchedNotReceivedQuantity			= ThisReceiptInvoiceLinkTotalMatchedNotRecievedQuantity

				if  (PurchaseOrderLine.MatchedNotReceivedQuantity < WorkMatchedNotReceivedQuantity)
					WorkMatchedNotReceivedQuantity			= PurchaseOrderLine.MatchedNotReceivedQuantity 


	      

				initialize NewInvoiceLinkMNRAmount
				DistributionUnitCost							= first ThisReceiptAndPayablesInvoiceLinkRel.MatchedNotReceivedUnitCost 


				if  (DistributionUnitCost not entered)
					DistributionUnitCost = PayablesInvoiceDetail.EnteredUnitCost

					
				WorkDistributionGroup.Amount							= WorkMatchedNotReceivedQuantity * -1 * DistributionUnitCost
	      
				if  (WorkDistributionGroup.Amount != 0)
					NewInvoiceLinkMNRAmount						= WorkDistributionGroup.Amount 
					WorkDistributionGroup.MatchedQuantity				= WorkMatchedNotReceivedQuantity * -1 
					WorkPostingSwitch							= 4
					if  (PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount entered)
						WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount
					else
						WorkDistributionGroup.Account				= Company.MatchedNotReceivedAccount
					include 719MatchDistribCont
					include 715tMemoTax
	      




	      		
				DistributionUnitCost							= TotalThisReceiptInvoiceLinkMNRToleranceUnitCost 

				WorkDistributionGroup.Amount							= WorkMatchedNotReceivedQuantity * -1 * DistributionUnitCost
	      
				if  (WorkDistributionGroup.Amount entered
				and  PayablesInvoiceDetail.OtherCostAdjustmentsRel not exists)
					NewInvoiceLinkMNRAmount						+= WorkDistributionGroup.Amount
					WorkDistributionGroup.MatchedQuantity				= WorkMatchedNotReceivedQuantity * -1 
					WorkPostingSwitch							= 3
					WorkDistributionGroup.Account = WorkToleranceAccount 
					include 719MatchDistribCont
					include 715tMemoTax
	      
				NewPOLineMemoQuantity						+= WorkMatchedNotReceivedQuantity 
				NewPOLineMatchedNotReceived					+= WorkMatchedNotReceivedQuantity * -1 
	  
				NewInvoiceLinkMatchedNotReceivedQuantity	= WorkMatchedNotReceivedQuantity * -1
				NewInvoiceLinkMNRUnitCost					= DistributionUnitCost
				NewInvoiceLinkMNRAmount						= WorkDistributionGroup.Amount 
	  
				NewInvoiceLinkMNRUnitCost					= first ThisReceiptAndPayablesInvoiceLinkRel.MatchedNotReceivedUnitCost
				NewInvoiceLinkMNRToleranceUnitCost			= TotalThisReceiptInvoiceLinkMNRToleranceUnitCost 
	  
				NewInvoiceLinkMemoQuantity					= WorkMatchedNotReceivedQuantity 
				
				include 715uUpdatePomatchobj

			invoke FastUpdate PayablesInvoiceDetail
				invoked.MatchObjectID						= MatchWork.OutMatchObjectID
				invoked.Status								= 1
				invoked.PurchaseOrderReceipt				= ThisReceipt
				invoked.PurchaseOrderReceiptLine			= ThisReceiptLine
				invoked.MatchSequence						= MatchSequence
				invoked.MatchUpdateDate						= current corporate date
			      
		715tMemoTax 



      

			if  (MemoInvoice
			and  PayablesInvoiceDetail.MemoAdjustType.QuantityAdjustment)
				MtxPrevMatchQty 					= WorkPolineMatchedQuantity + DetailsMatchedQuantity
			else
				MtxPrevMatchQty						= WorkPolineMatchedQuantity
      
			if  ((ContractLine entered
			and   TaxDistributionsForContractLineRel exists)
			or   (PurchaseOrderLine entered
			and   TaxDistributionsForPurchaseOrderLineRel exists)
			or   (ContractLine not entered 
			and   PurchaseOrderLine not entered 
			and   TaxDistributionsForMiscellaneousDetailRel exists))
				NextSentence = true
			else
			if  (DetailsTaxCode entered
			and  PayablesInvoiceDetail.InvoiceLineTaxable)

				if (DetailsMatchedQuantity entered)
					initialize CalculateTax				
					CalculateTax.InvoiceAmount					= WorkDistributionGroup.MatchedQuantity * DistributionUnitCost




					if  (MNRDistrib
					and (PayablesInvoiceDetail.TaxAmount entered
					or   TotalThisReceiptInvoiceLinkMNRTaxUnitCost != 0))
						WorkPostingSwitch						= 4
						if  (PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount entered)
							WorkDistributionGroup.Account		= PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount
						else
							WorkDistributionGroup.Account		= Company.MatchedNotReceivedAccount
						DistributionUnitCost					= TotalThisReceiptInvoiceLinkMNRTaxUnitCost
						if (TotalThisReceiptInvoiceLinkMNRTaxUnitCost not entered)
							DistributionUnitCost				= PayablesInvoiceDetail.TaxAmount

						WorkDistributionGroup.Amount			= DistributionUnitCost
					else
					if  (MNRDistrib
					and  EnteredLandTaxUnitCost not entered)
						TaxTolerance			= true

					if  (WorkPostingSwitch not entered)
						WorkPostingSwitch		  		= 1

					WorkChargebackInvoice					= MatchWork.ChargebackInvoice
					include 718BuildCbTax  
      
			if  (ChargebackMatchedNotReceived = 1)

				if  (DetailsTaxCode entered)


					CalculateTax.InvoiceAmount			= ((MatchedNotReceivedWriteoffQuantity + WorkDistributionGroup.MatchedQuantity) * DistributionUnitCost * -1)
					TaxTolerance 						= true
					ChargebackMatchedNotReceived		+= 1
					include 718BuildCbTax

				initialize ChargebackMatchedNotReceived
      
			initialize WorkPostingSwitch
      
      
		715uUpdatePomatchobj 


			LocalMatchSequence															= MatchSequence

			if  (PayablesInvoice.InvoiceType.CreditMemo
			and  ThisReceipt not entered)
				ThisReceipt = first ReceiptInvoiceLinkMatchObjIDRel.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt
				ThisReceiptLine = first ReceiptInvoiceLinkMatchObjIDRel.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine

				
			if  (ThisReceiptInvoiceLinkExactRel exists)

				invoke FastUpdate ThisReceiptInvoiceLinkExactRel
					invoked.Vendor														= PayablesInvoice.Vendor
					invoked.PayablesInvoice												= PayablesInvoice.PayablesInvoice
					invoked.PurchaseOrder												= PurchaseOrder
					invoked.PurchaseOrderLine											= PurchaseOrderLine
					invoked.Item														= Item
					invoked.MatchDetailKey												= MatchDetailKey
					invoked.MatchUnitCost												= MatchUnitCost
					invoked.Type														= "MA"
			else

				invoke Create ThisReceiptInvoiceLinkExactRel
					invoked.Company														= Company
					invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt		= ThisReceipt
					invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine	= ThisReceiptLine
					invoked.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchWork.OutMatchObjectID
					if (PayablesInvoice.InvoiceType.CreditMemo)
					    initialize invoked.PurchaseOrderReceiptInvoiceLink.MatchSequence
					else
						invoked.PurchaseOrderReceiptInvoiceLink.MatchSequence				= LocalMatchSequence
					initialize invoked.PurchaseOrderReceiptInvoiceLink.AddOnCharge
					invoked.Vendor														= PayablesInvoice.Vendor
					invoked.PayablesInvoice												= PayablesInvoice.PayablesInvoice
					invoked.PurchaseOrder												= PurchaseOrder
					invoked.PurchaseOrderLine											= PurchaseOrderLine
					invoked.Item														= Item
					invoked.MatchDetailKey												= MatchDetailKey
					invoked.MatchUnitCost												= MatchUnitCost
					invoked.MatchedQuantity												= NewReceiptLineMatchedQuantity
					invoked.Type														= "MA"

					invoked.MatchedNotReceivedQuantity 			= NewInvoiceLinkMatchedNotReceivedQuantity
					invoked.ChargebackQuantity 					= NewInvoiceLinkChargebackQuantity
					invoked.WriteOffQuantity 					= NewInvoiceLinkWriteoffQuantity
					invoked.IcvTolUcst 							= NewInvoiceLinkICVToleranceUnitCost
					invoked.IcvTolQty 							= NewInvoiceLinkICVToleranceQuantity
					invoked.IcvTolAmt 							= NewInvoiceLinkICVToleranceAmount
					invoked.IcvQty 								= NewInvoiceLinkICVQuantity
					invoked.IcvUcst 							= NewInvoiceLinkICVUnitCost
					invoked.IcvAmt 								= NewInvoiceLinkICVAmount
					invoked.MatchedNotReceivedAmount 			= NewInvoiceLinkMNRAmount
					invoked.MatchedNotReceivedUnitCost 			= NewInvoiceLinkMNRUnitCost
					invoked.MnrTolUcst 							= NewInvoiceLinkMNRToleranceUnitCost
					invoked.MemoQuantity 						= NewInvoiceLinkMemoQuantity
					invoked.PoCostUpd 							= NewInvoiceLinkPOCostUpdate
				
		717BuildCbDetails  



















			if  (WorkDistributionGroup.Amount not entered
			or   MatchWork.ChargebackInvoice not entered
			or   (ItemType.Service
			and   ServiceLineChargebackQuantity not entered))
				initialize WorkPostingSwitch
				initialize PayablesChargebackIndicator
			else
			if  (MatchReconQueue.LineChargebackSelected
			and  !CreateChargeback)

				NextSentence							= true
			else

				WorkDistributionGroup.Invoice			= MatchWork.ChargebackInvoice
				DetailsInvoiceType						= "C"
				RecordSource							= "MA"
				ChargebackDetailSequenceNumber			+= 1
				DetailsSequenceNumber					= ChargebackDetailSequenceNumber

				initialize DetailsTaxAmount
				DetailsMatchUnitCost					= DistributionUnitCost 
				DetailsEnteredUnitCost					= DistributionUnitCost

				if  (ItemType.Service
				and  ServiceLineChargebackQuantity entered)

					WorkDistributionGroup.MatchedQuantity		= ServiceLineChargebackQuantity
					DetailsMatchedQuantity  			= ServiceLineChargebackQuantity
				else
					WorkDistributionGroup.MatchedQuantity		= WorkChargebackQuantity
					if  (CostChargeback)

						DetailsMatchUnitCost			= DistributionUnitCost * -1
						DetailsEnteredUnitCost			= DetailsMatchUnitCost
						DetailsMatchedQuantity			= WorkChargebackQuantity
						CostChargeback					= false
					else

						DetailsMatchedQuantity			= WorkChargebackQuantity * -1

				DetailsEnteredQuantity					= DetailsMatchedQuantity

				if  (PayablesInvoiceDetail.VendorBuyUOM = PayablesInvoiceDetail.VendorPriceUOM)
					DetailsVBuyMatchedQuantity			= DetailsMatchedQuantity
				else
				if  (!ItemType.Inventoried
				and  !ItemType.NonStock)
					DetailsVBuyMatchedQuantity			= DetailsMatchedQuantity
				else
				if (!IsCatchWeight)







					DetailsVBuyMatchedQuantity			= PayablesInvoiceDetail.BuyUOMMatchedQuantity


				PayablesChargebackIndicator = "Y"				 
	
				if  (ItemType.Service)
					WorkDistributionGroup.MatchedQuantity		= ServiceLineChargebackQuantity
				else
				if  (!ItemType.Inventoried)
					DistributionUnitCost 				*= -1

				RetainedMatchedAmount					+= DistributionUnitCost * DetailsMatchedQuantity

				if  (MemoInvoice
				and  DistributionByAmount)

					
					initialize DistributionDetailMatchAmount
					
					if  ((MatchWork.MatchLevel.DetailMatch
					or    MatchWork.ProcessMode.Reconciliation)
					and  (!ItemType.Inventoried
					and   LineDistributionHasAmount))
						if (PayablesInvoice.MatchProcessType.ServiceContract
						and ContractLine entered
						and InvoiceDistributionsForContractLineRel exists)
							DistributionDetailMatchAmount						= sum InvoiceDistributionsForContractLineRel.DistributionAmount.CurrencyAmount
						else
						if  (InvoiceDistributionsForPurchaseOrderLineRel exists)
							DistributionDetailMatchAmount						= sum InvoiceDistributionsForPurchaseOrderLineRel.DistributionAmount.CurrencyAmount
						else
							DistributionDetailMatchAmount						= sum PurchaseOrderLineDistributionRel.DistributionAmount
							SkipPostings										= true
	





				
				initialize ServiceLineChargebackAmount
				initialize ServiceLineChargebackQuantity
				include 719MatchDistribCont


					
				if  (DetailsTaxCode entered 
				and  PayablesInvoiceDetail.InvoiceLineTaxable)
					LastTaxCode					= DetailsTaxCode
					if  (DetailsMatchedQuantity entered)
						initialize CalculateTax
						CalculateTax.InvoiceAmount			= DetailsMatchedQuantity * DistributionUnitCost
						if  (CalculateTax.InvoiceAmount >= 0)
							if  (ItemType.Inventoried						
							or   DistributionUnitCost < 0)                  
								CalculateTax.InvoiceAmount		*= -1

						if  (MNRDistrib
						and  EnteredLandTaxUnitCost not entered)
							TaxTolerance 					= true

						include 718BuildCbTax

						WorkPostingSwitch					= 3





	



				if  (ChargebackMatchedNotReceived = 1
				and  ItemType.Inventoried)
					DetailsProductTaxCategory				= PayablesInvoiceDetail.ProductTaxCategory
					if  (DetailsTaxCode entered)
						LastTaxCode							= DetailsTaxCode 
						initialize CalculateTax

						CalculateTax.InvoiceAmount			= ((MatchedNotReceivedWriteoffQuantity + DetailsMatchedQuantity) * DistributionUnitCost * -1)
						TaxTolerance 						= true
						ChargebackMatchedNotReceived		+= 1
						include 718BuildCbTax
						
					initialize ChargebackMatchedNotReceived




				

				invoke MemoCreate PayablesInvoiceDetail
					fill in fields from PayablesInvoiceDetail
						except invoked.PayablesInvoice
						except invoked.PayablesInvoiceDetail
						except invoked.TotalDistributionAmount
						except invoked.TotalBaseAmount
						except invoked.InvoicedTaxAmount
						except invoked.AccruedTaxAmount
						except invoked.MatchedQuantity
						except invoked.MatchUnitCost
						except invoked.EnteredUnitCost
						except invoked.TaxAmount
						except invoked.EnteredUOM
					invoked.PayablesInvoice					= MatchWork.ChargebackInvoice

					if (ChargebackReason entered)
						invoked.ReasonCode					= ChargebackReason
					else
						invoked.ReasonCode					= MatchWorkInvoiceRel.ChargebackReason

					if  (IsCatchWeight)
						if (ThisReceiptLine entered)
							invoked.EnteredQuantity			= ((EnteredQuantity - ThisPurchaseOrderReceiptLineRel.CatchWeightQuantity) * -1)
							invoked.BuyUOMMatchedQuantity	= ((BuyUOMMatchedQuantity - ThisPurchaseOrderReceiptLineRel.MatchedQuantity) * -1)				    
							invoked.EnteredUnitCost			= PurchaseOrderLine.EnteredUnitCost
							invoked.MatchedQuantity			= ((EnteredQuantity - ThisPurchaseOrderReceiptLineRel.CatchWeightQuantity) * -1)
							invoked.MatchUnitCost			= PurchaseOrderLine.EnteredUnitCost
						    invoked.EnteredUOM				= PayablesInvoiceDetail.EnteredUOM
						else
							invoked.EnteredQuantity			= PayablesInvoiceDetail.EnteredQuantity * -1
							invoked.BuyUOMMatchedQuantity	= PayablesInvoiceDetail.BuyUOMMatchedQuantity * -1					    
							invoked.EnteredUnitCost			= PayablesInvoiceDetail.EnteredUnitCost
							invoked.MatchedQuantity			= PayablesInvoiceDetail.MatchedQuantity
							invoked.MatchUnitCost			= PayablesInvoiceDetail.MatchUnitCost
						    invoked.EnteredUOM				= PayablesInvoiceDetail.EnteredUOM
					else
						invoked.EnteredQuantity					= DetailsMatchedQuantity
						invoked.EnteredUnitCost					= DetailsMatchUnitCost
						invoked.MatchedQuantity					= DetailsMatchedQuantity
						invoked.MatchUnitCost					= DetailsMatchUnitCost
						invoked.EnteredUnitCost					= DetailsEnteredUnitCost
					    invoked.EnteredUOM						= PayablesInvoiceDetail.EnteredUOM
	
					invoked.TaxAmount						= DetailsTaxAmount
					invoked.Status 							= 1
					invoked.MatchObjectID					= MatchWork.OutMatchObjectID
					invoked.PurchaseOrderReceipt			= ThisReceipt
					invoked.PurchaseOrderReceiptLine		= ThisReceiptLine
					invoked.RecordSource					= "MA"
					invoked.MatchUpdateDate					= current corporate date
					
					if (ChargebackReason entered)
						invoked.ReasonCode					= ChargebackReason
					else
						invoked.ReasonCode					= MatchWorkInvoiceRel.ChargebackReason

				initialize WorkPostingSwitch
				initialize PayablesChargebackIndicator

				DetailsInvoiceType							= PayablesInvoice.InvoiceType
				WorkDistributionGroup.Invoice				= PayablesInvoice
				DetailsEnteredUnitCost						= PayablesInvoiceDetail.EnteredUnitCost
				DetailsEnteredQuantity						= PayablesInvoiceDetail.EnteredQuantity
				DetailsMatchedQuantity						= MatchedQuantity 
				DetailsVBuyMatchedQuantity					= PayablesInvoiceDetail.BuyUOMMatchedQuantity
		        DetailsBuyUOMMatchedQuantity       			= PayablesInvoiceDetail.BuyUOMMatchedQuantity

		718BuildCbTax 



			WorkDistributionGroup.Invoice				= MatchWork.ChargebackInvoice
        
			if  (DetailsTaxCode not entered
			or   CalculateTax.InvoiceAmount not entered
			or   !PayablesInvoiceDetail.InvoiceLineTaxable)
				initialize CalculateTax
			else
				if  (PayablesInvoice.TaxCode.TaxType.CalculatedRate
				and  PayablesInvoice.TaxCode = DetailsTaxCode)

					if  (MemoInvoice)
						initialize CalculateTax
						CalculateTax.TaxCode 							= DetailsTaxCode
						CalculateTax.ProductTaxCategory					= PayablesInvoiceDetail.ProductTaxCategory
						CalculateTax.TaxableAmount						= PayablesInvoiceDetail.TotalDistributionAmount
						if (PayablesInvoiceDetail.TaxableUnitCost entered)
							CalculateTax.TaxableAmount					= PayablesInvoiceDetail.TaxableUnitCost * PayablesInvoiceDetail.EnteredQuantity
						
						CalculateTax.TaxAmount							= PayablesInvoiceDetail.TaxAmount



						CalculateTax.Function			 				= CalculateTax.Function.CalculateTax
						include CallCalculateTax

						CalculateTax.InvoiceAmount						= CalculateTax.TaxableAmount  
	                    CalculateTax.TaxTable.TaxTableOutput[1].TaxCode	= DetailsTaxCode 
	                    TaxWorkCalculateTaxRate							= CalculateTax.TaxTable.TaxTableOutput[1].TaxRate 
						TaxWorkAccrualFlag								= CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag
						TaxWorkCalculateAccrual							= CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag 
						TaxWorkTaxableAmount							= CalculateTax.TaxableAmount 
					else
						CalculateTax.TaxCode 							= DetailsTaxCode
						CalculateTax.ProductTaxCategory					= PayablesInvoiceDetail.ProductTaxCategory
						CalculateTax.Function			 				= CalculateTax.Function.Inquire
						include CallCalculateTax

					CalculateTax.TaxAmount 								= CalculateTax.InvoiceAmount * TaxWorkCalculateTaxRate
	                CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount 	= CalculateTax.TaxAmount 
	                CalculateTax.TaxableAmount							= CalculateTax.InvoiceAmount 
	                CalculateTax.TaxTable.TaxTableOutput[1].TaxRate		= TaxWorkCalculateTaxRate 
	                CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag	= TaxWorkCalculateAccrual 
				else

					CalculateTax.Function			 					= CalculateTax.Function.CalculateTax
					CalculateTax.TaxCode 								= DetailsTaxCode
					if  (ItemType.Inventoried
					or   ItemType.NonStock)
						CalculateTax.ProductTaxCategory					= PayablesInvoiceDetail.ProductTaxCategory
					else
						initialize CalculateTax.ProductTaxCategory
		
		            CalculateTax.TaxableAmount							= CalculateTax.InvoiceAmount
					if (PayablesInvoiceDetail.TaxableUnitCost entered
					and ChargebackMatchedNotReceived not entered)
						CalculateTax.TaxableAmount						= PayablesInvoiceDetail.TaxableUnitCost * PayablesInvoiceDetail.EnteredQuantity

					initialize 											  CalculateTax.TaxAmount
					include CallCalculateTax


				initialize WorkTotalTaxAmount

				if  (PayablesInvoice = WorkChargebackInvoice)
					MtxMatchedQuantity				= WorkDistributionGroup.MatchedQuantity
					MtxMatchUnitCost				= DistributionUnitCost
				else
					MtxMatchedQuantity				= DetailsMatchedQuantity
					MtxMatchUnitCost				= DetailsMatchUnitCost

				if  (WorkPostingSwitch != 4)	
					if  (ItemType.Inventoried
					and  DetailsTaxCode = PurchaseOrderLine.TaxCode)
						WorkPostingSwitch			= 2
					else
						WorkPostingSwitch			= 3
				MtxTotalTaxAmt						= CalculateTax.TaxAmount
				MtxTaxableAmount					= CalculateTax.TaxableAmount
				DetailsTaxAmount					= CalculateTax.TaxAmount












				include 991CreateTaxDistrib
	      
				if  (PayablesInvoice.InvoiceType.CreditMemo
				and  CalculateTax.TaxCode.TaxType.TaxTableCode)
					ChargebackTaxableAmount							+= MtxTaxableAmount
	
				initialize WorkAccrualCode

		719MatchDistribCont  


			if  ((WorkDistributionGroup.Amount entered
			or   PurchaseOrderLine.CostOption.NoCharge)
			and (!SkipPostings
			or   PayablesChargebackIndicator))
				initialize PendingDistributionAmount
				Include993						= false

				if  (PurchaseOrderLine entered
				and  ItemType.Service
				and  DoChargeback
				and  ServiceLineChargebackAmount  < 0)
					initialize WorkPostingSwitch
					initialize PayablesChargebackIndicator
					Include993				= true
				else
				if  (PurchaseOrderLine entered
				and  !ItemType.Inventoried)
					Include993				= true
				else
				if  (ThisReceiptLineRel exists
				and  !ItemType.Inventoried)
					Include993				= true
				else
				if  (!ThisReceiptLineRel exists
				and  !ItemType.Inventoried
				and   PurchaseOrderLine not entered
				and   DetailsSequenceNumber entered)
					Include993				= true
				else
				if (DetailsInvoiceType = "C"
				and  !MemoInvoice
				and  PayablesInvoiceDetail.MiscellaneousDetail)
					Include993				= true

				if  (Include993)
					include 6300MmdistDistribs
				else
				if   (PurchaseOrderLine not entered
				and   ContractLine not entered
				and   InvoiceDistributionsForMiscellaneousDetailRel exists)
					NextSentence = true

				else

					WorkDistributionGroup.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
					WorkDistributionGroup.AddOnCharge			= DetailsAddOnCharge
					WorkDistributionGroup.UnitAmount			= WorkDistributionGroup.MatchedQuantity
					WorkDistributionGroup.AddOnCharge			= DetailsAddOnCharge
					WorkDistributionGroup.MatchedQuantity		= WorkDistributionGroup.MatchedQuantity
					WorkDistributionGroup.UnitAmount			= WorkDistributionGroup.MatchedQuantity
					if  (Company.SummarizeDistribution.DoNotSummarize
					or   PayablesInvoice.RetainageAccrualCode entered)
						WorkDistributionGroup.Description	= Item
					else
						initialize WorkDistributionGroup.Description

					if (PayablesInvoice.InvoiceType.CreditMemo
					and !MemoInvoice)
						WorkDistributionGroup.Invoice			= WorkChargebackInvoice

					if  (RecordSource.GeneratedByAocSpread)
						if  (PurchaseOrderSpreadAddOnChargeRel exists
						and  PurchaseOrderSpreadAddOnChargeRel.SpreadMethod.NoSpread)
							WorkDistributionGroup.Account = PurchaseOrderSpreadAddOnChargeRel.PostingAccount

					if (WorkDistributionGroup.Invoice = MatchWork.ChargebackInvoice	
					and  DetailsMatchedQuantity < 0				
					and  WorkDistributionGroup.UnitAmount > 0)
						WorkDistributionGroup.UnitAmount			*= -1
							

					invoke CreateDistribution MatchWork
						invoked.PrmWorkDistributionGroup		= WorkDistributionGroup
						invoked.PrmHSNSACCode				    = PayablesInvoiceDetail.HSNSACCode

					initialize WorkAccrualCode

					if (DetailsInvoiceType = "C"
					and !MemoInvoice)
						increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

					else


						increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount


			
		719aPostFullInvoiceLine 

			
			initialize AmMatchedQuantity
			initialize RetainedTotalAmount
      
			WorkDistributionGroup.Amount				= DetailsMatchedQuantity * DetailsMatchUnitCost
			AmMatchedQuantity								= DetailsMatchedQuantity 
			if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
				WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
			else
				WorkDistributionGroup.Account				= Company.ReceiptAccrualAccount




      
			WorkDistributionGroup.MatchedQuantity					= DetailsMatchedQuantity
			DistributionUnitCost							= DetailsMatchUnitCost 


			if  (MemoInvoice
			and  DistributionByAmount)

				
				initialize DistributionDetailMatchAmount
				
				if  ((MatchWork.MatchLevel.DetailMatch
				or    MatchWork.ProcessMode.Reconciliation)
				and  (!ItemType.Inventoried
				and   LineDistributionHasAmount))
					if (PurchaseOrderLine entered
					and PendingDistributions)
						DistributionDetailMatchAmount						= sum InvoiceDistributionsForPurchaseOrderLineRel.DistributionAmount.CurrencyAmount
					else
					if (ContractLine entered
					and PendingDistributions)
						DistributionDetailMatchAmount						= sum InvoiceDistributionsForContractLineRel.DistributionAmount.CurrencyAmount
					else
						DistributionDetailMatchAmount						= sum PurchaseOrderLineDistributionRel.DistributionAmount
						SkipPostings										= true



      		
      		if  (PurchaseOrderLine entered
      		and  !ItemType.Inventoried)
      			include 6300MmdistDistribs
				SkipPostings = false
      
				TotalDistributionAmount						= PendingDistributionAmount 

		725CalcExchRateVar 




			if  (Company.Currency  != PayablesInvoice.InvoiceCurrency
			and  PurchaseOrder.CurrencyExchangeSetPoint.Invoicing
			and  InvoiceCurrencyExchangeRate != WorkReceiptConversionRate
			and  InvoiceCurrencyExchangeRate entered
			and  WorkReceiptConversionRate entered
			and  ItemType.Inventoried
			and  WorkVarianceQuantity entered)







				LocalCurrencyRelationship.FromCurrency	      		= PayablesInvoice.InvoiceCurrency
				LocalCurrencyRelationship.ToCurrency		      	= Company.Currency
				if (LocalCurrencyRelationship.MultDiv.Multiply)
					CostDifference 									= (NonTaxEnteredUnitCost * InvoiceCurrencyExchangeRate)
					CostDifference 									-= (NonTaxEnteredUnitCost * WorkReceiptConversionRate)
				else
					CostDifference 									= (NonTaxEnteredUnitCost / InvoiceCurrencyExchangeRate)
					CostDifference									-= (NonTaxEnteredUnitCost / WorkReceiptConversionRate)

				include 726CreateExchRateApdist

				if  (!MatchedNotReceivedExchangeVariance
				and  CostDifference entered)
					include 726aIcUpdates	

		725tCalcTaxExchRateVar 






			if  (Company.Currency = PayablesInvoice.InvoiceCurrency
			or   InventoryCompanyRel.CostingMethod.StandardCosting
			or   DetailsTaxCode.TaxType = "A"
			or  InvoiceCurrencyExchangeRate = WorkReceiptConversionRate
			or  InvoiceCurrencyExchangeRate not entered
			or  WorkReceiptConversionRate not entered
			or  (ApprovedLandTaxUnitCost not entered)
			or  !PurchaseOrder.CurrencyExchangeSetPoint.Invoicing
			or   WorkVarianceQuantity <= 0
			or  !ItemType.Inventoried)
				NextSentence = true
			else







				LocalCurrencyRelationship.FromCurrency	      		= PayablesInvoice.InvoiceCurrency
				LocalCurrencyRelationship.ToCurrency		      	= Company.Currency
				if (LocalCurrencyRelationship.MultDiv.Multiply)
					CostDifference 								= (ApprovedLandTaxUnitCost * InvoiceCurrencyExchangeRate) 
					CostDifference								-= (ApprovedLandTaxUnitCost *  WorkReceiptConversionRate)
				else
					CostDifference 								= (ApprovedLandTaxUnitCost / InvoiceCurrencyExchangeRate) 
					CostDifference								-= (ApprovedLandTaxUnitCost /  WorkReceiptConversionRate)

				include 726CreateExchRateApdist

				if  (!MatchedNotReceivedExchangeVariance
				and  CostDifference entered)
					include 726aIcUpdates	

		726CreateExchRateApdist 


			
			initialize WorkDistributionGroup
			WorkDistributionGroup.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
			WorkDistributionGroup.Company				= Company
			WorkDistributionGroup.Invoice				= PayablesInvoice
			WorkDistributionGroup.PurchaseOrder					= PurchaseOrder
			WorkDistributionGroup.PurchaseOrderLine				= PurchaseOrderLine
			WorkDistributionGroup.PayablesInvoiceDetail			= PayablesInvoiceDetail

			WorkDistributionGroup.Description							= "ExchangeRateCostVariance"
			WorkDistributionGroup.Amount				= WorkVarianceQuantity * CostDifference  




			if  (MatchedNotReceivedExchangeVariance)
				WorkDistributionGroup.Account = WorkToleranceAccount 
			else
			if (!ItemLocationRel.InventoryTracked)								
				WorkDistributionGroup.Account				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
			else
			if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
				WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.CostVarianceAccount
			else
				WorkDistributionGroup.Account				= Company.CostVarianceAccount

			if  (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
				WorkDistributionGroup.CurrencyRate					= WorkReceiptConversionRate
			else
				WorkDistributionGroup.CurrencyRate					= InvoiceCurrencyExchangeRate

			if  (WorkDistributionGroup.CurrencyRate not entered)
				WorkDistributionGroup.CurrencyRate						= 1

			if  (WorkAccrualCode not entered)
				WorkAccrualCode															= PayablesInvoice.RetainageAccrualCode

			invoke CreateDistribution MatchWork
				invoked.PrmWorkDistributionGroup		= WorkDistributionGroup



			increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount


			initialize PayablesChargebackIndicator

		726aIcUpdates 


			LocalLocation = PayablesInvoiceDetail.Location
			if (ThisReceiptLineRel.ShipToLocation entered)
				LocalLocation = ThisReceiptLineRel.ShipToLocation

			if  (ItemLocationRel exists
			and  ItemLocationRel.InventoryTracked)								

				LocalCurrencyTable							= PayablesInvoice.CurrencyTable
				LocalExchangeDate							= PayablesInvoice.InvoiceDate				
	            CurrencyWork.TransactionAmount				= ConvertedCost
	            CurrencyWork.FromCurrency					= PayablesInvoice.InvoiceCurrency
				CurrencyWork.BaseAmount.ToCurrency			= Company.Currency
				ConvertedCost								= CurrencyWork.BaseAmount.OutputCurrencyAmount


				
				if (ConvertedCost entered)
					invoke UpdateForCostAdjustment ItemLocationRel
						if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
							invoked.PrmOffsetAccount			= PayablesInvoice.ProcessLevel.CostVarianceAccount
						else
							invoked.PrmOffsetAccount			= Company.CostVarianceAccount
						invoked.PrmCostDifference			= ConvertedCost
						invoked.PrmQuantity					= WorkVarianceQuantity * PurchaseOrderLine.VendorPriceUOMMultiplier
						invoked.PrmDocumentNumber			= ThisPurchaseOrderReceiptLineRel.first InventoryTransactionLineRel.InventoryTransaction
						invoked.PrmLineNumber				= ThisReceiptLine

				if  (LocalAutoMatchResult entered
				and  ConvertedCost entered)
					invoke FastUpdate LocalAutoMatchResult
						invoked.CostVariance				+= ConvertedCost * WorkVarianceQuantity * PurchaseOrderLine.VendorPriceUOMMultiplier

					invoke MarkAsCostVarianceCreatedToTrue AutoMatchResultInvoiceRel

			initialize CurrentCostDifference

		733TolAccount 


			if  (MatchWork.MatchLevel.InvoiceMatch
			and  Difference3Amount < 0
			and !PayablesInvoice.InvoiceType.CreditMemo
			and  PayablesInvoice.ProcessLevel.UnderbillAccount entered)
				WorkToleranceAccount						= PayablesInvoice.ProcessLevel.UnderbillAccount
			else
			if  (MatchWork.MatchLevel.InvoiceMatch
			and  Difference3Amount < 0
			and !PayablesInvoice.InvoiceType.CreditMemo
			and  Company.UnderbillAccount entered)
				WorkToleranceAccount						= Company.UnderbillAccount
			else
			if  (MatchWork.InPrepaids)
				if  (PayablesInvoice.ProcessLevel.PrepayAccount entered)
					WorkToleranceAccount						= PayablesInvoice.ProcessLevel.PrepayAccount
				else
					WorkToleranceAccount						= Company.PrepayAccount
			else
			if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
				WorkToleranceAccount						= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
			else
				WorkToleranceAccount						= Company.ToleranceOffsetAccount

		750IcAdjust 





































			if  (DoChargeback
			and  AdjustedMatchUnitCost 		= 0
			and  NonTaxApprovedUnitCost 	= NonTaxMatchUnitCost
			and (ApprovedLandTaxUnitCost    != MatchLandTaxUnitCost  
			or   ApprovedUnitCost 			!= LocalEnteredUnitCost))

				if  (!MatchWork.MatchTable.ChargebackType.Overbill  
				or   WorkDistributionGroup.Amount > 0)				
					initialize DistributionUnitCost					

				else
				if  (DetailsTaxCode entered
				and  DetailsTaxCode = PurchaseOrderLine.TaxCode)
					initialize DistributionUnitCost

				else
				if  (DetailsTaxCode entered)
					DistributionUnitCost	= 0 - LocalEnteredLandTaxUnitCost  

					if  (DetailsTaxCode entered)
						initialize CalculateTax
						CalculateTax.Function			 	= CalculateTax.Function.CalculateTax
						CalculateTax.TaxCode 				= DetailsTaxCode
						CalculateTax.ProductTaxCategory		= PayablesInvoiceDetail.ProductTaxCategory
						CalculateTax.TaxableAmount 			= ThisReceiptLineRel.PurchaseOrderLine.EnteredUnitCost
						include CallCalculateTax
						DistributionUnitCost				= (CalculateTax.OutputTotalLandedTaxAmount5DP - LocalEnteredLandTaxUnitCost)  


			CurrentCostDifference							= DistributionUnitCost











			if (CurrentCostDifference not entered)			

				CurrentCostDifference						= NonTaxApprovedUnitCost - NonTaxMatchUnitCost



			if  (!MemoInvoice)
				include 755SetLastCost

			LocalLocation = PayablesInvoiceDetail.Location
			if (ThisReceiptLineRel.ShipToLocation entered)
				LocalLocation = ThisReceiptLineRel.ShipToLocation


			if (CurrentCostDifference entered)			

				if  (PayablesInvoiceDetail.EnteredUOM != Item.StockUOM
				or   PayablesInvoiceDetail.EnteredUOM != PayablesInvoiceDetail.VendorPriceUOM)







					ConvertedCost									= CurrentCostDifference / WorkVendorPriceUOMMultiplier
				else
					ConvertedCost									= CurrentCostDifference
					



				if  (PayablesInvoice.InvoiceCurrency != Company.Currency)
					ConvertedCost 								= (ConvertedCost * PayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate)


				if (NonTaxMatchUnitCost = NonTaxEnteredUnitCost)
					LocalUpdatedCost	= ((ApprovedUnitCost - ApprovedLandTaxUnitCost) / WorkVendorPriceUOMMultiplier)
				else
					LocalUpdatedCost	= (MatchUnitCost / WorkVendorPriceUOMMultiplier)

				if  (PayablesInvoice.InvoiceCurrency != Company.Currency)
					if (TranCurrRelationship.MultDiv.Multiply)
						LocalUpdatedCost 							= (LocalUpdatedCost * TranCurrExchangeRate.Rate)
					else				
						LocalUpdatedCost 							= (LocalUpdatedCost / TranCurrExchangeRate.Rate)


																				

				if  (ItemLocationRel exists
				and  ConvertedCost entered)




					invoke UpdateForCostAdjustment ItemLocationRel
						invoked.PrmCostDifference				= ConvertedCost
						invoked.PrmQuantity						= WorkVarianceQuantity * PurchaseOrderLine.VendorPriceUOMMultiplier
						if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
							invoked.PrmOffsetAccount			= PayablesInvoice.ProcessLevel.CostVarianceAccount
						else
							invoked.PrmOffsetAccount			= Company.CostVarianceAccount
						if  (!MemoInvoice)
							invoked.PrmDocumentNumber			= ThisPurchaseOrderReceiptLineRel.first InventoryTransactionLineRel.InventoryTransaction
							invoked.PrmLineNumber				= ThisReceiptLine
							invoked.PrmOriginatingPurchaseOrder	= PurchaseOrder
						else
							invoked.PrmDocumentNumber			= PayablesInvoiceDetail.first LocalOriginalInvoiceDetailRel.PurchaseOrderReceiptLine.first InventoryTransactionLineRel.InventoryTransaction
							invoked.PrmLineNumber				= PayablesInvoiceDetail.first LocalOriginalInvoiceDetailRel.PurchaseOrderReceiptLine

						invoked.PrmUpdatedCost					= LocalUpdatedCost

						if  (!MemoInvoice)
							invoked.PrmUpdateLastReceiptCost	= true
							

					if  (LocalAutoMatchResult entered)
						invoke FastUpdate LocalAutoMatchResult
							invoked.CostVariance				+= ConvertedCost * WorkVarianceQuantity * PurchaseOrderLine.VendorPriceUOMMultiplier

						invoke MarkAsCostVarianceCreatedToTrue AutoMatchResultInvoiceRel
							
		755SetLastCost









			LocalLocation = PayablesInvoiceDetail.Location
			if (ThisReceiptLineRel.ShipToLocation entered)
				LocalLocation = ThisReceiptLineRel.ShipToLocation

			if  (ItemLocationRel exists
			and  DetailsAddOnCharge not entered
			and  !DoChargeback)

				if  (NonTaxMatchUnitCost = NonTaxApprovedUnitCost)
					ConvertedCost = (ApprovedUnitCost - ApprovedLandTaxUnitCost) 
				else
					ConvertedCost = (LocalMatchUnitCost - MatchLandTaxUnitCost) 


				if  (PayablesInvoiceDetail.EnteredUOM != Item.StockUOM)







					ConvertedCost									= ConvertedCost / WorkVendorPriceUOMMultiplier



				if (PayablesInvoice.InvoiceCurrency != Company.Currency)
					LocalCurrencyTable						= PayablesInvoice.CurrencyTable
					if  (PurchaseOrder.CurrencyExchangeSetPoint.Entry)
						LocalExchangeDate					= PurchaseOrder.PurchaseOrderDate				
		            else
					if (PurchaseOrder.CurrencyExchangeSetPoint.Receiving)
						LocalExchangeDate					= ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate
					else
						LocalExchangeDate					= PayablesInvoice.InvoiceDate
		            CurrencyWork.TransactionAmount			= ConvertedCost
		            CurrencyWork.FromCurrency				= PayablesInvoice.InvoiceCurrency
					CurrencyWork.BaseAmount.ToCurrency		= Company.Currency
					ConvertedCost							= CurrencyWork.BaseAmount.OutputCurrencyAmount


					
				invoke UpdateFromTransaction ItemLocationRel
					invoked.PrmLastReceiptCost = ConvertedCost
					invoked.PrmIsReceiptCost	   = true


		831aUpdatePoreceive 


			include 835aGetBestRecDate

			
			if  (ThisReceiptRel exists
			and  ThisReceiptLineRel exists)


				NewReceiptLineMatchedQuantity = LocalMatchedQuantity

				if (IsCatchWeight)
					if (DetailsMatchedQuantity > ThisReceiptLineRel.PurchaseOrderReceiptLine.CatchWeightQuantity)
						NewReceiptLineMatchedQuantity = ThisReceiptLineRel.PurchaseOrderReceiptLine.CatchWeightQuantity
					else 
					    NewReceiptLineMatchedQuantity = DetailsMatchedQuantity





				initialize UOMCalculation

				UOMCalculation.InputUOM												= PayablesInvoiceDetail.VendorPriceUOM
				UOMCalculation.InputToUOM											= PayablesInvoiceDetail.VendorBuyUOM

				UOMCalculation.InputQuantity										= ThisReceiptLineRel.VendorPriceArchiveQuantity  
				UOMCalculation.Method												= UOMCalculation.Method.ConvertToAlternate
				LocalConvertedQuantity												= UOMCalculation.OutputQuantity


				invoke FastUpdate ThisReceiptLineRel
					invoked.VendorPriceMatchedQuantity								+= LocalMatchedQuantity

					if  (MatchWork.MatchLevel.InvoiceMatch
					and  PayablesInvoice.InvoiceType not entered
					and  NewReceiptLineMatchedQuantity > VendorBuyMatchedQuantity)
						invoked.MatchedQuantity										+= NewReceiptLineMatchedQuantity
					else
						invoked.MatchedQuantity										+= VendorBuyMatchedQuantity
					
					if  ((MatchWork.MatchLevel.DetailMatch

					and  !PayablesInvoice.MatchProcessType.DropShip
					and  !PayablesInvoice.MatchProcessType.Service)
					or  (WithPreviousDetailMatch)
					or  (MatchWork.MatchLevel.DetailMatch
					and  MatchWork.ProcessMode.Reconciliation))
						if (IsCatchWeight)
							if  (NewReceiptLineMatchedQuantity > invoked.OpenToMatchQuantity)
								initialize invoked.OpenToMatchQuantity
							else
								invoked.OpenToMatchQuantity                            -= NewReceiptLineMatchedQuantity
						else 
						if  ((ItemType.Inventoried
						or    ItemType.NonStock)
						and   invoked.VendorPriceUOM != invoked.PurchaseOrderReceiptLine.VendorBuyUOM
						and   invoked.PurchaseOrderReceiptLine.VendorBuyUOM != invoked.PurchaseOrderLine.EnteredBuyUOM)
							if  (LocalMatchedQuantity > invoked.OpenToMatchQuantity
							and  invoked.OpenToMatchQuantity entered)
								initialize invoked.OpenToMatchQuantity
							else
							if  (invoked.MatchedQuantity >= invoked.VendorPriceUOMQuantity)
								initialize invoked.OpenToMatchQuantity
							else
							if  (invoked.OpenToMatchQuantity not entered)
								invoked.OpenToMatchQuantity   							= ThisReceiptLineRel.VendorPriceUOMQuantity - LocalMatchedQuantity
							else
								invoked.OpenToMatchQuantity                            -= LocalMatchedQuantity
						else
						if  (LocalMatchedQuantity > invoked.OpenToMatchQuantity
						and  invoked.OpenToMatchQuantity entered)
							initialize invoked.OpenToMatchQuantity
						else
						if  (invoked.MatchedQuantity >= invoked.BuyUOMQuantity)
							initialize invoked.OpenToMatchQuantity
						else
						if  (invoked.OpenToMatchQuantity not entered)
							invoked.OpenToMatchQuantity   							= ThisReceiptLineRel.BuyUOMQuantity - LocalMatchedQuantity
						else
							invoked.OpenToMatchQuantity                            -= LocalMatchedQuantity
					else
					if  ((MatchWork.MatchRuleResult.AllToOne
					or    MatchWork.MatchRuleResult.AllToAll)
					and   MatchWork.MatchLevel.InvoiceMatch)

						invoked.OpenToMatchQuantity                            		-= LocalMatchedQuantity  
					else
						initialize invoked.OpenToMatchQuantity
						
					invoked.TotalMatchAmount										+= (LocalMatchedQuantity * ThisReceiptLineRel.MatchUnitCost)
					invoked.MatchObjectID											= MatchWork.OutMatchObjectID
					invoked.MatchSequence											= MatchSequence
					invoked.ArchivedQuantity										= LocalConvertedQuantity

					invoked.Updated													= true

				invoke FastUpdate ThisReceiptRel
					invoked.HashQuantityMatched										+= VendorBuyMatchedQuantity
					if  (ThisReceiptLineRel.VendorPriceMatchedQuantity >= ThisReceiptLineRel.DerivedUnmatchedQuantity)
						invoked.WorkLinesClosed										+= 1	

					if  (MatchWork.MatchLevel.DetailMatch
					or   WithPreviousDetailMatch
					or  (MatchWork.MatchLevel.DetailMatch
					and  MatchWork.ProcessMode.Reconciliation))
						invoked.MatchedAmount 										+= ThisReceiptLineRel.MatchAmount
					else
						invoked.MatchedAmount										+= ThisReceiptLineRel.ExtendedAmount
					

			




			invoke UpdateFromMatch ThisReceiptLineRel.PurchaseOrderReceiptLine
				invoked.MatchObjectID												= MatchWork.OutMatchObjectID
				invoked.MatchSequence												= MatchSequence
				invoked.ArchivedQuantity											= ThisReceiptLineRel.ArchivedQuantity  
				invoked.MatchedQuantity												= ThisReceiptLineRel.MatchedQuantity

				invoked.OpenToMatchQuantity											= ThisReceiptLineRel.OpenToMatchQuantity


				if (IsCatchWeight)
					invoked.CatchWeightMatchedQuantity								+= NewReceiptLineMatchedQuantity

					if  (PayablesInvoiceDetail.BuyUOMMatchedQuantity > invoked.CatchWeightOpenToMatchQuantity)
						initialize invoked.CatchWeightOpenToMatchQuantity
					else
						invoked.CatchWeightOpenToMatchQuantity						-= PayablesInvoiceDetail.BuyUOMMatchedQuantity


				if  (PayablesInvoice.MatchProcessType.DropShip
				and  ThisReceiptLineRel.IntrastatNumber entered)
					invoked.IntrastatNumber											= ThisReceiptLineRel.IntrastatNumber

		835aGetBestRecDate 

			
			if  (ThisReceiptRel exists)
				if  (TermsCalculation.UseLatestReceiptDate
				and  ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate > BestReceiptDate)
					BestReceiptDate						 		= ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate
				else
				if  (TermsCalculation.UseShipToArriveDate)
					if  (ThisReceiptRel.PurchaseOrderReceipt.ShipToArriveDate > BestReceiptDate)
						BestReceiptDate							= ThisReceiptRel.PurchaseOrderReceipt.ShipToArriveDate
					else 
					if  (ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate > BestReceiptDate)
						BestReceiptDate						 	= ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate
				else
				if  (TermsCalculation.UseEarliestReceiptDate)
					if  (ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate < BestReceiptDate
					or   BestReceiptDate not entered)
						BestReceiptDate						 	= ThisReceiptRel.PurchaseOrderReceipt.ReceivedDate

		844FindMatprlwrkRecord 








			ThisOnePassed								= true

			if  (ThisReceiptLineRel.MatchDetailKey != MatchDetailKey)

				ThisOnePassed							= false 
			else
			if  (!MatchWork.ProcessMode.Reconciliation
			and  !MemoInvoice
			and  (ThisReceiptLineRel.MatchSub != MatchSub1
			or    !ThisReceiptLineRel.Selected))

				ThisOnePassed							= false 
			else
			if  (MatchWork.ProcessMode.Reconciliation
			and  !ThisReceiptLineRel.Selected)

				ThisOnePassed							= false 
			else
			if  ((MatchWork.MatchRuleType.OneToOne
			or    MatchWork.MatchRuleType.OneToAll)
			and   ThisReceiptLineRel.MatchObjectID entered)

				ThisOnePassed							= false 
			else
			if  (MatchWork.ProcessMode.Reconciliation
			and  InvoiceDetailKeyed
			and (MatchWork.MatchRuleResult.AllToOne
			or   MatchWork.MatchRuleResult.AllToAll)
			and  ThisReceiptLineRel.MatchObjectID entered
			and  ThisReceiptLineRel.MatchAmount >= ThisReceiptLineRel.TotalMatchAmount)

				ThisOnePassed							= false
			else 
			if  (ThisReceiptLineRel.VendorPriceMatchedQuantity >= ThisReceiptLineRel.VendorPriceUOMQuantity
			and  !MemoInvoice
			and (!ItemType.Service
			or   !ThisReceiptLineRel.PurchaseOrderLine.ServiceCode.Amount))

				ThisOnePassed							= false
			else
			if (MatchWork.MultiplePurchaseOrders								
			and !MatchWork.ProcessMode.Reconciliation
			and !ThisReceiptLineRel.Selected
			and PurchaseOrder != ThisReceiptLineRel.PurchaseOrder) 

				ThisOnePassed							= false
						


			if  (ThisReceiptLineRel.MatchDetailKey = MatchDetailKey) 
				if  (PurchaseOrderLine not entered
				and  PurchaseOrderLine != ThisReceiptLineRel.PurchaseOrderLine)
					if  (!MatchWork.MatchLevel.DetailMatch)

						ThisOnePassed					= false
				else
				if  (PurchaseOrderLine != ThisReceiptLineRel.PurchaseOrderLine)
					if  (MatchWork.MatchLevel.DetailMatch
					or  (!MatchWork.MatchRuleResult.AllToAll
					and  !MatchWork.MatchRuleResult.AllToOne))

						ThisOnePassed					= false

			if  (!ThisOnePassed)

				initialize ThisReceipt
				initialize ThisReceiptLine
				initialize ThisPurchaseOrderLine
			else
				include 899BuildVpriCnv

		899BuildVpriCnv 

				
			initialize WorkVendorPriceUOM
			initialize WorkVendorBuyUOM
			WorkVendorPriceUOMMultiplier				= 1
			WorkVendorBuyUOMMultiplier					= 1

			if  (PurchaseOrderLine entered
			and  PurchaseOrderLine.VendorPriceUOMMultiplier entered)
				WorkVendorPriceUOM						= PurchaseOrderLine.VendorPriceUOM 
				WorkVendorPriceUOMMultiplier			= PurchaseOrderLine.VendorPriceUOMMultiplier
				WorkVendorBuyUOM						= PurchaseOrderLine.EnteredBuyUOM
				WorkVendorBuyUOMMultiplier				= PurchaseOrderLine.EnteredBuyUOMMultiplier
			else
			if  (ThisPurchaseOrderReceiptLineRel exists
			and  ThisPurchaseOrderReceiptLineRel.VendorPriceUOMMultiplier entered)
				WorkVendorPriceUOM						= ThisPurchaseOrderReceiptLineRel.VendorPriceUOM 
				WorkVendorPriceUOMMultiplier			= ThisPurchaseOrderReceiptLineRel.VendorPriceUOMMultiplier
				WorkVendorBuyUOM						= ThisPurchaseOrderReceiptLineRel.VendorBuyUOM
				WorkVendorBuyUOMMultiplier				= ThisPurchaseOrderReceiptLineRel.VendorBuyUOMMultiplier
			else
			if  (PayablesInvoiceDetail.VendorItem entered)
				if  (PayablesInvoiceDetail.VendorItem.VendorPriceUOM entered)
					WorkVendorPriceUOM							= PayablesInvoiceDetail.VendorItem.VendorPriceUOM 
					initialize UOMCalculation

					UOMCalculation.InputUnitCost				= 1
					UOMCalculation.InputUOM						= PayablesInvoiceDetail.VendorItem.VendorPriceUOM
					UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
					WorkVendorPriceUOMMultiplier				= UOMCalculation.OutputUnitCost

				if  (PayablesInvoiceDetail.VendorItem.VendorBuyUOM entered)
					WorkVendorBuyUOM							= PayablesInvoiceDetail.VendorItem.VendorBuyUOM
					initialize UOMCalculation

					UOMCalculation.InputUnitCost				= 1
					UOMCalculation.InputUOM						= PayablesInvoiceDetail.VendorItem.VendorBuyUOM
					UOMCalculation.Method						= UOMCalculation.Method.ConvertToAlternate
					WorkVendorBuyUOMMultiplier					= UOMCalculation.OutputUnitCost


		2122GetLndtaxUcst 

      
			MtxPrevMatchQty														= PurchaseOrderLine.MatchedQuantity

			ApprovedUnitCost													= MatchUnitCost
			NonTaxApprovedUnitCost												= MatchUnitCost

			if (TaxOnly)
				if  (PayablesInvoice.TaxAdjustment.IgnoreProductOnly
				or   PayablesInvoice.TaxAdjustment.Calculate
				or   PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC)

					initialize ApprovedUnitCost
					initialize NonTaxApprovedUnitCost
			
			initialize ApprovedLandTaxUnitCost
			initialize NonTaxEnteredUnitCost
			NonTaxMatchUnitCost													= MatchUnitCost

			if  (ItemType.Service
			or   MatchWorkReceiptLineForPOLineRel not exists)
				NonTaxEnteredUnitCost											= PayablesInvoiceDetail.EnteredUnitCost
				if  (PayablesInvoiceDetail.TaxableUnitCost entered)
					NonTaxEnteredUnitCost											= PayablesInvoiceDetail.TaxableUnitCost
			else
			if  (ItemType.Inventoried
			and  !MatchWorkReceiptLineForPOLineRel exists)
				NonTaxEnteredUnitCost											= PurchaseOrderLine.EnteredUnitCost
			else
			if  (ThisReceiptLineRel.PurchaseOrderReceiptLine entered
			and  ThisReceiptLineRel.PurchaseOrderReceiptLine.OriginalUnitCost entered)
				NonTaxEnteredUnitCost											= ThisReceiptLineRel.PurchaseOrderReceiptLine.OriginalUnitCost
			else
				NonTaxEnteredUnitCost											= PayablesInvoiceDetail.EnteredUnitCost

			
				if  (PayablesInvoiceDetail.TaxableUnitCost entered)
					NonTaxEnteredUnitCost											= PayablesInvoiceDetail.TaxableUnitCost


			
			if  (PurchaseOrderLine.TaxableUnitCost entered
			and  PurchaseOrderLine.TaxableUnitCost != PurchaseOrderLine.EnteredUnitCost)
				NonTaxEnteredUnitCost											= PurchaseOrderLine.TaxableUnitCost

				if  (PurchaseOrderLine.EnteredUnitCost    = ApprovedUnitCost
				and  PayablesInvoice.TaxAdjustment not entered)
					NonTaxMatchUnitCost											= NonTaxEnteredUnitCost
					NonTaxApprovedUnitCost										= NonTaxEnteredUnitCost










			initialize EnteredLandTaxUnitCost
			initialize MatchLandTaxUnitCost
			initialize TaxableAmount




			if  (PayablesInvoice.CallVertexByDocument)
				NextSentence = true 
			else 			
			if  (PurchaseOrderLine.TaxCode entered)
				initialize CalculateTax
				CalculateTax.TaxEntity											= Company.AccountingEntity
				CalculateTax.CallingModule										= "Payables_Invoice"
				CalculateTax.System												= "AP"
				CalculateTax.Invoice 											= PayablesInvoice.Invoice
				CalculateTax.InvoiceCompany										= Company
				CalculateTax.TaxCode											= PurchaseOrderLine.TaxCode
				CalculateTax.ProductTaxCategory									= PurchaseOrderLine.ProductTaxCategory

				if ((PayablesInvoiceDetail.PurchaseOrderReceipt entered and DetailsMatchedQuantity <= ReceiptLineReceivedQuantity)
				or  (PayablesInvoiceDetail.PurchaseOrderReceipt not entered and DetailsMatchedQuantity < PurchaseOrderLine.Quantity)) 

					CalculateTax.InvoiceAmount 									= DetailsMatchedQuantity * NonTaxEnteredUnitCost
				else 

					CalculateTax.InvoiceAmount 									= PurchaseOrderLine.Quantity * NonTaxEnteredUnitCost
				UsePODate														= true
				if  (CalculateTax.InvoiceAmount entered)

					CalculateTax.Function			 							= CalculateTax.Function.CalculateTax
					CalculateTax.TaxableAmount									= CalculateTax.InvoiceAmount
					include CallCalculateTax

				UsePODate														= false

				if  (CalculateTax.OutputTotalLandedTaxAmount5DP entered)
					if ((PayablesInvoiceDetail.PurchaseOrderReceipt entered and DetailsMatchedQuantity <= ReceiptLineReceivedQuantity)
					or  (PayablesInvoiceDetail.PurchaseOrderReceipt not entered and DetailsMatchedQuantity < PurchaseOrderLine.Quantity)) 
						EnteredLandTaxUnitCost 										= CalculateTax.OutputTotalLandedTaxAmount5DP / DetailsMatchedQuantity
					else 
						EnteredLandTaxUnitCost 										= CalculateTax.OutputTotalLandedTaxAmount5DP / PurchaseOrderLine.Quantity


			if  (DetailsTaxCode entered
			and  PayablesInvoiceDetail.InvoiceLineTaxable
			and  !CalculateTax.TaxCode.TaxType.CalculatedRate)
				initialize CalculateTax
				CalculateTax.TaxCode											= DetailsTaxCode
				CalculateTax.ProductTaxCategory									= PayablesInvoiceDetail.ProductTaxCategory

				CalculateTax.InvoiceAmount 									= MatchedQuantity * NonTaxMatchUnitCost


				if (PayablesInvoiceDetail.TaxableUnitCost entered)
					CalculateTax.InvoiceAmount								= MatchedQuantity * PayablesInvoiceDetail.TaxableUnitCost


				if  (CalculateTax.InvoiceAmount entered)

					CalculateTax.Function			 						= CalculateTax.Function.CalculateTax
					CalculateTax.TaxableAmount								= CalculateTax.InvoiceAmount
					include CallCalculateTax



				if  (CalculateTax.OutputTotalLandedTaxAmount5DP entered)
					MatchLandTaxUnitCost 									= CalculateTax.OutputTotalLandedTaxAmount5DP / MatchedQuantity
					MatchUnitCost											+= MatchLandTaxUnitCost


				
				CalculateTax.InvoiceAmount 									= MatchedQuantity * NonTaxApprovedUnitCost
				if (PayablesInvoiceDetail.TaxableUnitCost entered)
					CalculateTax.InvoiceAmount								= MatchedQuantity * PayablesInvoiceDetail.TaxableUnitCost



				if  (CalculateTax.InvoiceAmount entered)

					CalculateTax.Function			 						= CalculateTax.Function.CalculateTax
					CalculateTax.TaxableAmount								= CalculateTax.InvoiceAmount
					include CallCalculateTax





				TaxableAmount												= CalculateTax.TaxableAmount
				if  (CalculateTax.OutputTotalLandedTaxAmount5DP entered)
					ApprovedLandTaxUnitCost									= CalculateTax.OutputTotalLandedTaxAmount5DP / MatchedQuantity
					ApprovedUnitCost										= ApprovedUnitCost + ApprovedLandTaxUnitCost




					
			if  (DetailsTaxCode entered
			and  PayablesInvoiceDetail.InvoiceLineTaxable
			and  CalculateTax.TaxCode.TaxType.CalculatedRate)
				include 2123GetCalcTaxRate

		2123GetCalcTaxRate 

			
			initialize CalculateTax
			CalculateTaxCode													= DetailsTaxCode
			CalculateTax.TaxCode												= DetailsTaxCode
			CalculateTax.ProductTaxCategory										= PayablesInvoiceDetail.ProductTaxCategory
			CalculateTax.TaxableAmount											= MatchedQuantity * NonTaxApprovedUnitCost
			CalculateTax.TaxAmount												= PayablesInvoiceDetail.TaxAmount
			
			CalculateTax.InvoiceAmount											= CalculateTax.TaxableAmount
			TaxableAmount														= CalculateTax.TaxableAmount

			CalcTaxRate															= PayablesInvoiceDetail.TaxAmount / TaxableAmount


			initialize CalculateTax.OutputTotalLandedTaxAmount5DP

			if  (LocalEntityTaxCodeRel.LandedCost)
				CalculateTax.OutputTotalLandedTaxAmount5DP						= PayablesInvoiceDetail.TaxAmount
				CalculateTax.OutputTotalTaxAmount								= PayablesInvoiceDetail.TaxAmount

			ApprovedLandTaxUnitCost												= CalculateTax.OutputTotalLandedTaxAmount5DP / MatchedQuantity
			ApprovedUnitCost													+= ApprovedLandTaxUnitCost

			
			if  (CalculateTax.OutputTotalLandedTaxAmount5DP entered)
				CalculateTax.TaxableAmount										= MatchedQuantity * NonTaxMatchUnitCost
				MatchLandTaxUnitCost											= NonTaxMatchUnitCost * CalcTaxRate
				MatchUnitCost												= NonTaxMatchUnitCost + MatchLandTaxUnitCost



			
		2124CreateVariance 














			WorkTaxUnitCost														= (NonTaxApprovedUnitCost - NonTaxMatchUnitCost)

			if  (WorkTaxUnitCost entered)
				if  (ItemType.Inventoried)
					WorkPostingSwitch												= 2
				else
					WorkPostingSwitch												= 1
				
				initialize CalculateTax
				CalculateTax.InvoiceAmount											= ((MatchedQuantity - WorkMatchedNotReceivedQuantity) * WorkTaxUnitCost)

				include 2125BuildTaxDetails
				





			WorkTaxUnitCost														= (NonTaxMatchUnitCost - NonTaxEnteredUnitCost)

			if (PayablesInvoiceDetail.TaxableUnitCost entered)
				WorkTaxUnitCost											= PayablesInvoiceDetail.TaxableUnitCost -  NonTaxEnteredUnitCost





			if  (WorkTaxUnitCost entered
			and (PurchaseOrderLine.TaxCode not entered
			or   DetailsTaxCode = PurchaseOrderLine.TaxCode))
				if  ((PerformedFrom.Match
				and   MatchWork.MatchWork.MatchLevel.DetailMatch)
				or   (!ItemType.Inventoried
				and   PerformedFrom.MA61))
					WorkPostingSwitch											= 1
				else
				if  (ItemType.Inventoried)
					WorkPostingSwitch											= 2
				else
					WorkPostingSwitch											= 3

				initialize CalculateTax
				CalculateTax.InvoiceAmount										= ((MatchedQuantity - WorkMatchedNotReceivedQuantity) * WorkTaxUnitCost)



				include 2125BuildTaxDetails
				

			if (PurchaseOrderLine.TaxCode entered
			and  DetailsTaxCode entered
			and  DetailsTaxCode != PurchaseOrderLine.TaxCode
			and !TaxEntityRel.ThirdParty.Sabrix	
			and !PayablesInvoice.TaxEntityUsesVertex)		
				CalculateTax.TaxCode										= DetailsTaxCode
				if (DetailsTaxCode not entered)
				    CalculateTax.TaxCode = PurchaseOrderLine.TaxCode

				CalculateTax.ProductTaxCategory								= PayablesInvoiceDetail.ProductTaxCategory
				SubtractPOTaxCodeDistribAmount = true
				WorkTaxUnitCost												= NonTaxMatchUnitCost

				if (PayablesInvoiceDetail.TaxableUnitCost entered)
					WorkTaxUnitCost											= PayablesInvoiceDetail.TaxableUnitCost

				if (DetailsTaxCode not entered)
 					WorkTaxUnitCost *= -1
 								
				if  ((PerformedFrom.Match
				and   MatchWork.MatchWork.MatchLevel.DetailMatch)
				or   (!ItemType.Inventoried
				and   PerformedFrom.MA61))
					WorkPostingSwitch											= 1
				else
				if  (ItemType.Inventoried)
					WorkPostingSwitch											= 2
				else
					WorkPostingSwitch											= 3

				initialize CalculateTax
				CalculateTax.InvoiceAmount										= ((MatchedQuantity - WorkMatchedNotReceivedQuantity) * WorkTaxUnitCost)



				include 2125BuildTaxDetails
				SubtractPOTaxCodeDistribAmount = false




			
			if  (MatchedQuantity    	>= WorkMatchedNotReceivedQuantity
			and  WorkMatchedNotReceivedQuantity        	> 0
			and  !PayablesInvoice.TaxAdjustment.Calculate)
				if  (ItemType.Inventoried)
					WorkPostingSwitch											= 2
				else
					WorkPostingSwitch											= 1


				initialize CalculateTax.TaxCode
				initialize LocalTaxCode
				initialize MatchedNotReceivedCount
				if  (PayablesInvoice.TaxAdjustment not entered
				or   PayablesInvoice.TaxAdjustment.OverrideProductOnly
				or   PayablesInvoice.TaxAdjustment.OverrideProductAndAOC
				or   PayablesInvoice.TaxAdjustment.OverrideTaxablePOLine)
					LocalTaxCode												= DetailsTaxCode
					if  (MatchWorkReceiptLineForPOLineRel exists
					and  WorkMatchedNotReceivedQuantity entered
					and  first MatchWorkReceiptLineForPOLineRel.PurchaseOrderReceiptLine.TaxCode entered
					and  first MatchWorkReceiptLineForPOLineRel.PurchaseOrderReceiptLine.ItemType.Inventoried)
						WorkPostingSwitch										= 4
						MatchedNotReceivedCount									+= 1
						initialize TemporaryTaxType
					else
					if  (MatchWorkReceiptLineForPOLineRel not exists
					and  WorkMatchedNotReceivedQuantity entered)
						WorkPostingSwitch										= 4
						MatchedNotReceivedCount									+= 1
						initialize TemporaryTaxType



				if  (ItemType.Inventoried)
					WorkTaxUnitCost												= NonTaxEnteredUnitCost

				else
					WorkTaxUnitCost												= NonTaxApprovedUnitCost	
					if (PayablesInvoiceDetail.TaxableUnitCost entered)
						WorkTaxUnitCost											= PayablesInvoiceDetail.TaxableUnitCost


				
				LocalAmount 										= WorkMatchedNotReceivedQuantity * WorkTaxUnitCost
				round LocalAmount to nearest DerivedRoundTo 
				CalculateTax.InvoiceAmount = LocalAmount 


				include 2125BuildTaxDetails

				initialize CalculateTax.TaxCode
				initialize CalculateTax.ProductTaxCategory
				
				if  (ItemType.Inventoried
				and  MatchedNotReceivedCount entered
				and  MatchWorkReceiptLineForPOLineRel exists)
					WorkPostingSwitch											= 2
					LocalTaxCode												= DetailsTaxCode
					TemporaryTaxType											= CalculateTax.TaxCode.TaxType 
					initialize CalculateTax
					MatchedNotReceivedCount										+= 1
					WorkTaxUnitCost												= NonTaxEnteredUnitCost
					LocalAmount 												= WorkMatchedNotReceivedQuantity * WorkTaxUnitCost
					round LocalAmount to nearest DerivedRoundTo 
					CalculateTax.InvoiceAmount = LocalAmount 


					include 2125BuildTaxDetails
					initialize MatchedNotReceivedCount


				if  (ItemType.Inventoried)
					WorkTaxUnitCost												= NonTaxMatchUnitCost -  NonTaxEnteredUnitCost
					if (PayablesInvoiceDetail.TaxableUnitCost entered)
						WorkTaxUnitCost											= PayablesInvoiceDetail.TaxableUnitCost -  NonTaxEnteredUnitCost


					
					if  (WorkTaxUnitCost entered)
						initialize CalculateTax
						TaxTolerance											= true
						WorkPostingSwitch										= 3
						LocalAmount												= WorkMatchedNotReceivedQuantity * WorkTaxUnitCost
						round LocalAmount to nearest DerivedRoundTo 
						CalculateTax.InvoiceAmount = LocalAmount 

						include 2125BuildTaxDetails

		2125BuildTaxDetails 



			if  (CalculateTax.InvoiceAmount entered)
				if  (CalculateTax.TaxCode not entered
				and  DetailsTaxCode entered)
					CalculateTax.TaxCode										= DetailsTaxCode
					CalculateTax.ProductTaxCategory								= PayablesInvoiceDetail.ProductTaxCategory
				else
				if (PurchaseOrderLine.TaxCode entered
				and  DetailsTaxCode not entered
				and SubtractPOTaxCodeDistribAmount)
					CalculateTax.TaxCode										= PurchaseOrderLine.TaxCode
					CalculateTax.ProductTaxCategory								= PurchaseOrderLine.ProductTaxCategory

				if  (CalculateTax.TaxCode entered
				and  TemporaryTaxType != "C")


					CalculateTax.Function			 							= CalculateTax.Function.CalculateTax
					CalculateTax.TaxableAmount									= CalculateTax.InvoiceAmount
					include CallCalculateTax


					if (TaxRuleBlockCalled)
						NextSentence = true
					else 	
					if  (MatchedNotReceivedCount   = 2)

						if  (ItemType.Inventoried)
							WorkPostingSwitch									= 3
							
						Sub1 = 1
						while (Sub1 <= 8 and CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxCode entered)


				            CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxAmount5DP	-= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxAmount5DP
            				CalculateTax.TaxableAmount								-= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxableAmount
            				initialize CalculateTax.OutputTotalTaxAmount
            				Sub1 += 1


					else
						WorkTaxAmount											= CalculateTax.OutputTotalTaxAmount



	
						if  (!PerformedFrom.Contract)
							include 991CreateTaxDistrib

				if  (CalculateTax.TaxCode entered
				and  TemporaryTaxType  = "C")
				

					CalculateTaxCode 											= DetailsTaxCode
					CalculateTax.TaxableAmount									= CalculateTax.InvoiceAmount
					CalculateTax.OutputTotalTaxAmount							= CalculateTax.InvoiceAmount * CalcTaxRate
						

					
					CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount5DP		= CalculateTax.OutputTotalTaxAmount
					CalculateTax.TaxTable.TaxTableOutput[1].TaxRate				= CalcTaxRate
					CalculateTax.TaxTable.TaxTableOutput[1].TaxableAmount		= CalculateTax.TaxableAmount
					if  (LocalEntityTaxCodeRel.LandedCost)
						CalculateTax.OutputTotalLandedTaxAmount5DP				= CalculateTax.OutputTotalTaxAmount
						
					WorkTaxAmount												= CalculateTax.OutputTotalTaxAmount

					if (CalculateTax.TaxTable.TaxTableOutput[1].TaxCode not entered)
						CalculateTaxCode 											= DetailsTaxCode
						CalculateTax.TaxTable.TaxTableOutput[1].TaxCode				= DetailsTaxCode
						CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint			= LocalEntityTaxCodeRel.TaxPoint
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount	= LocalEntityTaxCodeRel.TaxInputDueAccount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount		= LocalEntityTaxCodeRel.TaxInputAccount
						CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag			= LocalEntityTaxCodeRel.AccruedOrInvoiced
						CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag		= LocalEntityTaxCodeRel.LandedCost
			
					if (TaxRuleBlockCalled)
						NextSentence = true
					else 
					if  (!PerformedFrom.Contract)
						include 991CreateTaxDistrib

		787WriteNegAccApdistrib 


			if  (RecordSource.InternalMatchDetails
			or   DetailsMatchedQuantity not entered
			or   NonTaxEnteredUnitCost != DetailsMatchUnitCost)
				NextSentence = true
			else

				initialize WorkDistributionGroup.Amount
				
				if  (EnteredLandTaxUnitCost entered
				and  ApprovedLandTaxUnitCost > LocalEnteredLandTaxUnitCost)  
					WorkDistributionGroup.Amount					= DetailsMatchedQuantity * (EnteredLandTaxUnitCost - ApprovedLandTaxUnitCost)
	      
				if  (WorkDistributionGroup.Amount entered)
					LastTaxCode														= DetailsTaxCode

					initialize WorkDistributionGroup
					WorkDistributionGroup.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
					WorkDistributionGroup.Company				= Company
					WorkDistributionGroup.Invoice				= PayablesInvoice
					WorkDistributionGroup.PurchaseOrder					= PurchaseOrder
					WorkDistributionGroup.PurchaseOrderLine				= PurchaseOrderLine
					WorkDistributionGroup.PayablesInvoiceDetail			= PayablesInvoiceDetail

					WorkDistributionGroup.AddOnCharge				= DetailsAddOnCharge
					WorkDistributionGroup.Description				= "ExchangeRateCostVariance"
					WorkDistributionGroup.Amount	= WorkDistributionGroup.Amount * -1
		
					if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
						WorkDistributionGroup.Account	= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
					else
						WorkDistributionGroup.Account	= Company.ReceiptAccrualAccount
		
					invoke CreateDistribution MatchWork
						invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

					initialize WorkAccrualCode

					if (DetailsInvoiceType = "C"
					and  !MemoInvoice)
						increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

					else

						increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount


				
		991CreateTaxDistrib  


			if  (ItemType.Inventoried)
				if  (WorkPostingSwitch.MatchNotReceived)

					if  (PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount entered)

						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.MatchedNotReceivedAccount
					else

						LocalDefaultAccount									= Company.MatchedNotReceivedAccount
				else
				if  (WorkPostingSwitch.Writeoff)
					if  (PayablesInvoice.ProcessLevel.MatchWriteOffAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.MatchWriteOffAccount
					else
						LocalDefaultAccount									= Company.MatchWriteOffAccount
				else
				if  (WorkPostingSwitch.TaxVariance
				or   UseVariance)
					if (!ItemLocationRel.InventoryTracked)								
						LocalDefaultAccount									= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
					else
					if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.CostVarianceAccount
					else
						LocalDefaultAccount									= Company.CostVarianceAccount
				else
				if  (WorkPostingSwitch.TaxTolerance)

					if  (PayablesInvoice.ProcessLevel.PrepayAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.PrepayAccount
					else
					if  (MatchWork.PayablesInvoice.InvoiceType.MatchPrepayment)
						LocalDefaultAccount									= Company.PrepayAccount
					else
					if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)

						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
					else

						LocalDefaultAccount									= Company.ToleranceOffsetAccount
				else
				if  (WorkPostingSwitch.TaxWriteoff)
					if  (PayablesInvoice.ProcessLevel.UnderbillAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.UnderbillAccount
					else
					if  (Company.UnderbillAccount entered)
						LocalDefaultAccount									= Company.UnderbillAccount
					else
					if  (PayablesInvoice.ProcessLevel.InventoryReceiptArchivalAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.InventoryReceiptArchivalAccount
					else
						LocalDefaultAccount									= Company.InventoryReceiptArchivalAccount

				else
					if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
						LocalDefaultAccount									= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
					else
						LocalDefaultAccount									= Company.ReceiptAccrualAccount


			
			if  (PurchaseOrderLine.TaxCode.TaxType.TaxTableCode
			or   PayablesInvoiceDetail.TaxCode.TaxType.TaxTableCode)
				if  (PayablesInvoiceDetail.TaxCode != PurchaseOrderLine.TaxCode)



					RemainingAmount				= CalculateTax.OutputTotalTaxAmount
				else
					RemainingAmount					= PayablesInvoiceDetail.TaxAmount
				
				I9 = 1
				initialize IdxNonLanded  

				while (I9 <= 8
				and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
					if  (!CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)
					    IdxNonLanded = I9
					LocalAmount 			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
					round LocalAmount to nearest DerivedRoundTo
					RemainingAmount			-= LocalAmount
						

		    		if  (I9 = 8
		    		or   CalculateTax.TaxTable.TaxTableOutput[I9+1].TaxCode not entered)
						if  (RemainingAmount entered
		    		    and  RemainingAmount > -.05
		    		    and  RemainingAmount <  .05)

							if (IdxNonLanded entered)  
			    				CalculateTax.TaxTable.TaxTableOutput[IdxNonLanded].TaxAmount5DP += RemainingAmount
			    			else
			    				CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP += RemainingAmount
			    			initialize RemainingAmount
			    	I9 += 1

			I9 = 1



			if   (SkipNonLanded
			and  !PayablesInvoiceDetail.TaxCode.TaxType.TaxTableCode
			and   PurchaseOrderLine.TaxCode.TaxType.TaxTableCode
			and  !CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag
			and  (CalculateTax.TaxTable.TaxTableOutput[1].TaxCode not entered
			or    CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount5DP not entered))

				while (I9 <= 8
				and   (CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode not entered
				or     CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP not entered))
				    I9 += 1



			while (I9 <= 8
			and    CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)



				CalculateTaxCode = CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode

				if  (!CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag
				and  SkipNonLanded)
				    NextSentence = true  
				else
				if  (CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered)
					if  (CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)

			
						if  (MatchWork.MatchWork.MatchLevel.InvoiceMatch
						and  WorkPostingSwitch.TaxTolerance)
							if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
								WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
							else
								WorkDistributionGroup.Account				= Company.ToleranceOffsetAccount
						else
						if  (ItemType.Inventoried)
							if  (LocalDefaultAccount entered)

								WorkDistributionGroup.Account 					= LocalDefaultAccount
							else
							if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
								WorkDistributionGroup.Account					= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
							else
								WorkDistributionGroup.Account					= Company.ReceiptAccrualAccount
							
						else
						if  (PayablesInvoice.MatchProcessType.ServiceContract)
							if (!InvoiceDistributionsForContractLineRel exists
							and  ContractLine entered)
								WorkDistributionGroup.Account					= first ContractLineDistributionRel.DistributionAccount 
						else
						if (PayablesInvoiceDetail.MiscellaneousDetail)
							if (PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount entered)
								WorkDistributionGroup.Account					= PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount	
							else
								WorkDistributionGroup.Account					= Company.InvoiceItemDetailAccount	
						else
							if  (!PurchaseOrderLineDistributionRel exists
							and  !PendingDistributions)
								if  (CalculateTax.TaxTable.TaxTableOutput[I9].TaxPoint = "P")
									WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount
								else
									WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount
		
		

						
					else

						if  (CalculateTax.TaxTable.TaxTableOutput[I9].TaxPoint = "P")
							WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount
						else
							WorkDistributionGroup.Account				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount
				      
		

					

		
					initialize WorkDistributionGroup.Amount
					initialize WorkDistributionGroup.TaxableAmount
					initialize WorkDistributionGroup.UnitAmount
					initialize WorkDistributionGroup.ItemTaxTransaction
					WorkDistributionGroup.TaxCode			= CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode


					WorkDistributionGroup.TaxType				= CalculateTax.TaxTable.TaxTableOutput[I9].AccrualFlag

					WorkDistributionGroup.TaxRate				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxRate
					WorkDistributionGroup.ProductTaxCategory	= CalculateTax.ProductTaxCategory
					WorkDistributionGroup.Imposition			= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[I9].Imposition
		
					WorkDistributionGroup.UnitAmount				= MatchedQuantity
					WorkDistributionGroup.MatchedQuantity		= MatchedQuantity
		





		

		      





		       
					if  (CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)

						WorkDistributionGroup.RetainageLanded	= true
					else

						WorkDistributionGroup.RetainageLanded	= false
		
					WorkDistributionGroup.RetainageAccrualCode	= PayablesInvoice.RetainageAccrualCode
		       

		     		
		     		if  (ItemType.Service)
		     			initialize WorkDistributionGroup.LandedCost
		
		       



















		
					WorkDistributionGroup.MatchedQuantity						= MatchedQuantity
		      




					if  (PurchaseOrderLine exists)
						WorkDistributionGroup.Description						= PurchaseOrderLine.Description 
		
					if  (PayablesInvoice.MatchProcessType.ServiceContract
					and  ContractLine entered
					and  PendingDistributions)
						invoke DoInvoiceDistributionsForContractLine
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
							invoked.PrmDistributionUnitCost									= MatchUnitCost  
							invoked.PrmTaxableAmount										= CalculateTax.TaxableAmount
							invoked.PrmPreviousQuantity										= MtxPrevMatchQty
							invoked.PrmTaxCode												= WorkDistributionGroup.TaxCode
							invoked.PrmTaxType												= WorkDistributionGroup.TaxType
							invoked.PrmTaxRate												= WorkDistributionGroup.TaxRate
							invoked.PrmProductTaxCategory									= WorkDistributionGroup.ProductTaxCategory
							invoked.PrmImposition											= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[I9].Imposition
							if  (!ItemType.Inventoried
							and  !LocalEntityTaxCodeRel.LandedCost)
								invoked.TaxAccount											= WorkDistributionGroup.Account
					else
					if (PendingDistributions)

						invoke DoInvoiceDistributionsForPurchaseOrderLine
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
							invoked.PrmDistributionUnitCost									= MatchUnitCost  
							invoked.PrmTaxableAmount										= CalculateTax.TaxableAmount
							invoked.PrmPreviousQuantity										= MtxPrevMatchQty
							invoked.PrmTaxCode												= WorkDistributionGroup.TaxCode
							invoked.PrmTaxType												= WorkDistributionGroup.TaxType
							invoked.PrmTaxRate												= WorkDistributionGroup.TaxRate
							invoked.PrmProductTaxCategory									= WorkDistributionGroup.ProductTaxCategory
							invoked.PrmImposition											= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[I9].Imposition
							if  (!ItemType.Inventoried
							and  !LocalEntityTaxCodeRel.LandedCost)
								invoked.TaxAccount											= WorkDistributionGroup.Account
					else
					if  (PayablesInvoice.MatchProcessType.ServiceContract
					and  ContractLine entered
					and  ContractLineDistributionRel exists)

			
						invoke DoContractLineDistributions
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
							invoked.PrmDistributionUnitCost									= MatchUnitCost  
							invoked.PrmTaxableAmount										= CalculateTax.TaxableAmount
							invoked.PrmPreviousQuantity										= MtxPrevMatchQty
							invoked.PrmTaxCode												= WorkDistributionGroup.TaxCode
							invoked.PrmTaxType												= WorkDistributionGroup.TaxType
							invoked.PrmTaxRate												= WorkDistributionGroup.TaxRate
							invoked.PrmProductTaxCategory									= WorkDistributionGroup.ProductTaxCategory
							invoked.PrmImposition											= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[I9].Imposition
							if  (!ItemType.Inventoried
							and  !LocalEntityTaxCodeRel.LandedCost)
								invoked.TaxAccount											= WorkDistributionGroup.Account
					else
					if  (PurchaseOrderLineDistributionRel exists)

						
						invoke DoPOLineDistributions
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
							invoked.PrmDistributionUnitCost									= MatchUnitCost  
							invoked.PrmTaxableAmount										= CalculateTax.TaxableAmount
							invoked.PrmPreviousQuantity										= MtxPrevMatchQty
							invoked.PrmTaxCode												= WorkDistributionGroup.TaxCode
							invoked.PrmTaxType												= WorkDistributionGroup.TaxType
							invoked.PrmTaxRate												= WorkDistributionGroup.TaxRate
							invoked.PrmProductTaxCategory									= WorkDistributionGroup.ProductTaxCategory
							invoked.PrmImposition											= CalculateTax.OutputJurisdictions.JurisdictionTableOutput[I9].Imposition
							if  (!ItemType.Inventoried
							and  !LocalEntityTaxCodeRel.LandedCost)
								invoked.TaxAccount											= WorkDistributionGroup.Account
					else


						WorkDistributionGroup.FinanceEnterpriseGroup 						= Company.FinanceEnterpriseGroup
						WorkDistributionGroup.Company										= Company
						if  (WorkDistributionGroup.Invoice not entered)
							WorkDistributionGroup.Invoice									= PayablesInvoice
						WorkDistributionGroup.PurchaseOrder									= PurchaseOrder
						WorkDistributionGroup.PurchaseOrderLine								= PurchaseOrderLine
						WorkDistributionGroup.PayablesInvoiceDetail							= PayablesInvoiceDetail
						WorkDistributionGroup.Contract										= PayablesInvoiceDetail.Contract
						WorkDistributionGroup.ContractLine									= ContractLine

						LocalAmount 														= CalculateTax.TaxTable.TaxTableOutput[I9].TaxableAmount
						round LocalAmount to nearest DerivedRoundTo 
						WorkDistributionGroup.TaxableAmount									= LocalAmount 

						LocalAmount 														= CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount5DP
						round LocalAmount to nearest DerivedRoundTo 
						WorkDistributionGroup.Amount										= LocalAmount 

						if  (PayablesInvoiceDetail.TaxCode.TaxType.TaxTableCode
						or   PurchaseOrderLine.TaxCode.TaxType.TaxTableCode)
							round WorkDistributionGroup.Amount to nearest DerivedRoundTo
							RemainingAmount					-= WorkDistributionGroup.Amount
							

				    		if  (I9 = 8
				    		or   CalculateTax.TaxTable.TaxTableOutput[I9+1].TaxCode not entered)
								if  (RemainingAmount entered
				    		    and  RemainingAmount > -.05
				    		    and  RemainingAmount <  .05)

					    			WorkDistributionGroup.Amount += RemainingAmount
					    			initialize RemainingAmount


						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup								= WorkDistributionGroup
							invoked.PrmHSNSACCode											= PayablesInvoiceDetail.HSNSACCode


						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount


						if  (CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag
						and  ItemType.Inventoried
						and  PurchaseOrderLine.TaxCode entered
						and  CalculateTax.TaxCode = PurchaseOrderLine.TaxCode
						and  PurchaseOrderLine.TaxCode != PayablesInvoiceDetail.TaxCode
						and !TaxEntityRel.ThirdParty.Sabrix)
							WorkDistributionGroup.TaxableAmount								*= -1
							WorkDistributionGroup.Amount									*= -1
							if (!ItemLocationRel.InventoryTracked)								
								WorkDistributionGroup.Account	= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
							else
							if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
								WorkDistributionGroup.Account	= PayablesInvoice.ProcessLevel.CostVarianceAccount
							else
								WorkDistributionGroup.Account	= Company.CostVarianceAccount


							invoke CreateDistribution MatchWork
								invoked.PrmWorkDistributionGroup								= WorkDistributionGroup
								invoked.PrmHSNSACCode											= PayablesInvoiceDetail.HSNSACCode

							if (DetailsInvoiceType = "C"
							and  !MemoInvoice)
								increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

							else

								increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount


				I9 += 1

			initialize WorkDistributionGroup.TaxCode
			initialize WorkDistributionGroup.TaxableAmount
			initialize WorkDistributionGroup.TaxType
			initialize WorkDistributionGroup.TaxRate
			
		6300MmdistDistribs 


				
			if  (!ItemType.Inventoried)









				if  (MatchWork.MatchLevel.InvoiceMatch
				and (MatchWork.MatchRuleType.OneToOne or MatchWork.MatchRuleType.OneToAll)
				and  !OverrideDetail
				and  ThisReceiptLineRel exists)
					if  (WorkDistributionGroup.MatchedQuantity > ReceiptLineReceivedQuantity)
						WorkDistributionGroup.MatchedQuantity							= ReceiptLineReceivedQuantity
	
				if  (PurchaseOrderLine not entered
				or   PurchaseOrderLineDistributionRel exists
				or   PendingDistributions
				or  (PayablesInvoice.MatchProcessType.ServiceContract
				and  ContractLine entered
				and  PendingDistributions)
				or   !PayablesInvoice.BypassMatch)








					if  (WorkDistributionGroup.MatchedQuantity entered)
						DetailDistAmount										= WorkDistributionGroup.MatchedQuantity * DistributionUnitCost
					else
						DetailDistAmount										= DistributionUnitCost
	
					if  (WorkDistributionGroup.Invoice = PayablesInvoice	
					and  PayablesInvoice.MatchProcessType.ServiceContract
					and  ContractLine entered
					and  PendingDistributions)

						if (!LocalSumDistribUpdateDone)							
							LocalSumDistribUpdateDone			= true			
							for each InvoiceDistributionsForContractLineRel
								increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by each.DistributionAmount.CurrencyAmount
					else
					if  (WorkDistributionGroup.Invoice = PayablesInvoice	
					and  PendingDistributions
					and  PurchaseOrderLine entered)

						if (!LocalSumDistribUpdateDone)							
							LocalSumDistribUpdateDone			= true			
							for each InvoiceDistributionsForPurchaseOrderLineRel

								increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by each.DistributionAmount.CurrencyAmount

					else
					if  (PayablesInvoice.MatchProcessType.ServiceContract
					and  ContractLine entered
					and  ContractLineDistributionRel exists)

						invoke DoContractLineDistributions
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= DetailDistAmount
							invoked.PrmDistributionUnitCost									= DistributionUnitCost
					else
					if  (PurchaseOrderLineDistributionRel exists)

						invoke DoPOLineDistributions
							invoked.PrmInvoice												= WorkDistributionGroup.Invoice
							invoked.PrmDistributionAmount									= DetailDistAmount
							invoked.PrmDistributionUnitCost									= DistributionUnitCost
					else
					if  (DoChargeback
					and  DetailsInvoiceType = "C"
					and  !MemoInvoice
					and  PayablesInvoiceDetail.MiscellaneousDetail)


						initialize WorkDistributionGroup
						WorkDistributionGroup.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
						WorkDistributionGroup.Company					= Company
						WorkDistributionGroup.Invoice					= MatchWork.ChargebackInvoice
						WorkDistributionGroup.PurchaseOrder				= PurchaseOrder
						WorkDistributionGroup.PurchaseOrderLine			= PurchaseOrderLine
						WorkDistributionGroup.PayablesInvoiceDetail		= PayablesInvoiceDetail

						if (PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount entered)
							WorkDistributionGroup.Account			= PayablesInvoice.ProcessLevel.InvoiceItemDetailAccount	
						else
							WorkDistributionGroup.Account			= Company.InvoiceItemDetailAccount	
	
						WorkDistributionGroup.Amount				= PayablesInvoiceDetail.TotalDistributionAmount * -1
							
						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup		= WorkDistributionGroup
	
						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)

							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount
						else

							increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount

					else
					if  (PurchaseOrderLine not entered
					or   ContractLine not entered
					and  InvoiceDistributionsForMiscellaneousDetailRel exists)
						NextSentence = true

					else

						initialize WorkDistributionGroup
						WorkDistributionGroup.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
						WorkDistributionGroup.Company					= Company
						WorkDistributionGroup.Invoice					= PayablesInvoice
						WorkDistributionGroup.PurchaseOrder				= PurchaseOrder
						WorkDistributionGroup.PurchaseOrderLine			= PurchaseOrderLine
						WorkDistributionGroup.PayablesInvoiceDetail		= PayablesInvoiceDetail
						
						if  (PayablesInvoice.ProcessLevel.ToleranceOffsetAccount entered)
							WorkDistributionGroup.Account				= PayablesInvoice.ProcessLevel.ToleranceOffsetAccount
						else
							WorkDistributionGroup.Account				= Company.ToleranceOffsetAccount
			
						WorkDistributionGroup.Amount					= DetailDistAmount			 
						WorkDistributionGroup.MatchedQuantity			= DetailsMatchedQuantity
						WorkDistributionGroup.AddOnCharge				= DetailsAddOnCharge
						WorkDistributionGroup.Description				= PurchaseOrderLine.Description

						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup			= WorkDistributionGroup

						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount







































		951bCheckSvcPoTolerances 



      
			if  (Company.ServiceMessagingOption entered
			and  !Company.ServiceMessagingOption.NoMessage)
				
				initialize LocalMatchRuleToleranceGroup
				initialize LocalMatchMessageToleranceGroup
				
				initialize MessageQuantityDifference
				initialize MessageUnitCostDifference
				initialize MessageExtendedDifference
				initialize MessageOverQuantityPercentDifference
				initialize MessageUnderQuantityPercentDifference
				initialize MessageOverUnitPercentDifference
				initialize MessageUnderUnitPercentDifference
				initialize MessageOverTotalPercentDifference
				initialize MessageOverCtPercentDifference
				


				I1 = 1
	
				if  (PayablesInvoice.RuleGroup entered)
					while (I1 <= 6)
					
						if  (PayablesInvoice.RuleGroup.MatchRuleToleranceArray.MatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
							LocalMatchMessageToleranceGroup = PayablesInvoice.RuleGroup.MatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[I1]
							LocalMatchRuleToleranceGroup = PayablesInvoice.RuleGroup.MatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[I1]
							end while
						else
							I1 += 1
				else
				if  (Company.ServiceMessageRuleOrder entered
				and  Company.ServiceMessageMatchRule entered)
					while (I1 <= 6)
						if  (Company.ServiceMessageMatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup.InvoiceMatchLevel.DetailMatch)
							LocalMatchMessageToleranceGroup = Company.ServiceMessageMatchRule.MatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[I1]
							LocalMatchRuleToleranceGroup = Company.ServiceMessageMatchRule.MatchMessageToleranceRel.MatchMessageToleranceArray.MatchMessageToleranceGroup[I1]
							end while
						else
							I1 += 1
				else
					I1 = 7


				ThisPurchaseOrderLine = PurchaseOrderLine





				if  (I1 <= 6)

					if  (PurchaseOrderLine.ServiceCode.Amount)
						MessageExtendedDifference 						= PayablesInvoiceDetail.EnteredUnitCost - ThisReceiptLineRel.MatchAmount
						MessageOverCtPercentDifference				 	= MessageExtendedDifference / PurchaseOrderLine.EnteredUnitCost
						if  (MessageExtendedDifference > -.01
						and  MessageExtendedDifference < .01)
						    initialize MessageExtendedDifference
					else
						if  ((LocalMatchMessageToleranceGroup.ServiceOverQuantityValue entered
						or    LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent entered
						or    LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue entered
						or    LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent entered)
						and  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount entered
						or    LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent entered
						or    LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount entered
						or    LocalMatchMessageToleranceGroup.ServiceUnderUnitCostTolerancePercent entered))
							initialize MessageExtendedDifference
						else
							MessageExtendedDifference			= ((PayablesInvoiceDetail.EnteredUnitCost * PayablesInvoiceDetail.EnteredQuantity) - (ThisReceiptLineRel.DerivedUnmatchedQuantity * PurchaseOrderLine.EnteredUnitCost))




						
						MessageQuantityDifference       		= PayablesInvoiceDetail.EnteredQuantity - ThisReceiptLineRel.DerivedUnmatchedQuantity

						MessageUnitCostDifference 				= PayablesInvoiceDetail.EnteredUnitCost - ThisReceiptLineRel.MatchUnitCost		
						MessageOverQuantityPercentDifference 	= ThisReceiptLineRel.EnteredReceivedQuantity * LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent
						MessageUnderQuantityPercentDifference   = ThisReceiptLineRel.EnteredReceivedQuantity * LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent
						MessageOverUnitPercentDifference 		= PurchaseOrderLine.EnteredUnitCost * LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent
						MessageUnderUnitPercentDifference  		= PurchaseOrderLine.EnteredUnitCost * LocalMatchMessageToleranceGroup.ServiceUnderUnitCostTolerancePercent
						MessageUnmatchedQuantity				= LocalUnmatchedQuantity




					LocalUnmatchedQuantity						= PurchaseOrderLine.QuantityToProcess - PurchaseOrderLine.MatchedQuantity 

					initialize MessageType
		       
					if  (PayablesInvoice.MatchProcessType.ServiceContract
					and  CurrentContractLineRel exists)
						if  (CurrentContractLineRel.ServiceCode.Amount)
							include 4410CheckAmtTypeSrvcMsgTol
						else
						if  (CurrentContractLineRel.ServiceCode.Quantity)
							include 4420CheckQtyTypeSrvcMsgTol
					else
					if  ((PayablesInvoice.MatchProcessType.Service
					or    PayablesInvoice.MatchProcessType.DropShip
					or    PayablesInvoice.MatchProcessType.ReceiptMatch)
					and   PurchaseOrderLine exists)
						if  (PurchaseOrderLine.ServiceCode.Amount)
							include 4410CheckAmtTypeSrvcMsgTol
						if  (PurchaseOrderLine.ServiceCode.Quantity)
							include 4420CheckQtyTypeSrvcMsgTol

		955FormatCommonMessage 


			invoke Create MatchInvoiceMessage
				fill in fields from PayablesInvoiceDetail
					except invoked.Status
				      
				if  (PayablesInvoice.MatchProcessType.DropShip)
					invoked.MatchMessageOrigin					= 3
				else
				if  (PayablesInvoice.MatchProcessType.Service)
					invoked.MatchMessageOrigin					= 4
				else
					invoked.MatchMessageOrigin					= 2
      
				if  (PayablesInvoice.MatchProcessType.ServiceContract)
					invoked.Buyer								= PayablesInvoice.ServiceContract.Buyer
					invoked.BuyerOwner							= PayablesInvoice.ServiceContract.Buyer
					invoked.AuthorityCodeEmailAddress			= PayablesInvoice.ServiceContract.Buyer.EmailAddress
				else
				if  (PurchaseOrder.Buyer entered
				and  !PayablesInvoice.MatchProcessType.DropShip
				and  !PayablesInvoice.MatchProcessType.Service)
					invoked.Buyer								= PurchaseOrder.Buyer
					invoked.AuthorityCodeEmailAddress			= PurchaseOrder.Buyer.EmailAddress
				else
				if  (PurchaseOrderLine.Buyer entered)
					invoked.Buyer								= PurchaseOrderLine.Buyer
					invoked.AuthorityCodeEmailAddress			= PurchaseOrderLine.Buyer.EmailAddress
				else
					invoked.Buyer								= PurchaseOrder.Buyer
					invoked.AuthorityCodeEmailAddress			= PurchaseOrder.Buyer.EmailAddress


				invoked.DueDate									= PayablesInvoice.DueDate
				invoked.Priority								= 2
				invoked.MatchObjectID							= MatchWork.OutMatchObjectID
				invoked.DiscountDate							= PayablesInvoice.DiscountDate
				invoked.Location								= PayablesInvoiceDetail.Location
				      










				if (CreateMatchReconMessage			
				and CreateChargeback)
					invoked.ApplicationAction 					= 2 
                	invoked.ReasonCode	 						= ChargebackReason 
                	invoked.Status 								= 9
					invoked.Reference 							= ChargebackReference
				else
					invoked.ReasonCode							= MessageReasonCode
			        invoked.Status								= MessageStatus
		        invoked.MessageType								= MessageType
		        invoked.MessageSubType							= MessageSubType


			if  (MessageStatus != 9)
				invoke FastUpdate MatchWorkInvoiceRel
					invoked.Approved							= "M"
      
		956CheckOverCost 

			
			initialize WorkCostDifference
			initialize WorkCostPercentAmount
			CreateMessage										= false
      
            if  (PayablesInvoiceDetail.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
            and  PurchaseOrderLine.VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
	            WorkCostDifference  								= EnteredUnitCost - ThisReceiptLineRel.MatchUnitCost
	      
				if  (LocalMatchRuleToleranceGroup.ReconUnderAmountPercentage > 0)
	                WorkCostPercentAmount 							= ThisReceiptLineRel.MatchUnitCost * LocalMatchRuleToleranceGroup.ReconUnderAmountPercentage 
			else
				WorkCostDifference  								= MatchUnitCost - ThisReceiptLineRel.MatchUnitCost
	      
				if  (LocalMatchRuleToleranceGroup.ReconOverAmountPercentage > 0)
					WorkCostPercentAmount 							= ThisReceiptLineRel.MatchUnitCost * LocalMatchRuleToleranceGroup.ReconOverAmountPercentage
      
			if  (LocalMatchRuleToleranceGroup.ReconOverAmountCondition.And)
				if  (WorkCostDifference     > LocalMatchRuleToleranceGroup.ReconOverAmountTolerance
				and  WorkCostDifference     > WorkCostPercentAmount)
					CreateMessage								= true
      
			if  (LocalMatchRuleToleranceGroup.ReconOverAmountCondition.Or)
				if  (WorkCostDifference     > LocalMatchRuleToleranceGroup.ReconOverAmountTolerance
				or   WorkCostDifference     > WorkCostPercentAmount)
					CreateMessage								= true
      
			if  (LocalMatchRuleToleranceGroup.ReconOverAmountCondition not entered)
				if  (LocalMatchRuleToleranceGroup.ReconOverAmountPercentage not entered
				and  LocalMatchRuleToleranceGroup.ReconOverAmountTolerance not entered
				and  WorkCostDifference entered)
					CreateMessage								= true
				else
				if  ((LocalMatchRuleToleranceGroup.ReconOverAmountPercentage > 0
				and   WorkCostDifference     > WorkCostPercentAmount)
				or   (LocalMatchRuleToleranceGroup.ReconOverAmountTolerance > 0
				and   WorkCostDifference     > LocalMatchRuleToleranceGroup.ReconOverAmountTolerance))
					CreateMessage								= true
      
		957CheckUnderCost 

			
			initialize WorkCostDifference
			initialize WorkCostPercentAmount
			CreateMessage										= false
      
            if  (PayablesInvoiceDetail.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
            and  PurchaseOrderLine.VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
	            WorkCostDifference  								= ThisReceiptLineRel.MatchUnitCost - EnteredUnitCost
	      
				if  (LocalMatchRuleToleranceGroup.ReconUnderAmountPercentage > 0)
	                WorkCostPercentAmount 							= ThisReceiptLineRel.MatchUnitCost * LocalMatchRuleToleranceGroup.ReconUnderAmountPercentage 
			else
	            WorkCostDifference  								= ThisReceiptLineRel.MatchUnitCost - MatchUnitCost
	      
				if  (LocalMatchRuleToleranceGroup.ReconUnderAmountPercentage > 0)
	                WorkCostPercentAmount 							= ThisReceiptLineRel.MatchUnitCost * LocalMatchRuleToleranceGroup.ReconUnderAmountPercentage 
      
			if  (LocalMatchRuleToleranceGroup.ReconUnderAmountCondition.And)
				if  (WorkCostDifference     > LocalMatchRuleToleranceGroup.ReconUnderAmountTolerance
				and  WorkCostDifference     > WorkCostPercentAmount)
					CreateMessage								= true
      
			if  (LocalMatchRuleToleranceGroup.ReconUnderAmountCondition.Or)
				if  (WorkCostDifference      > LocalMatchRuleToleranceGroup.ReconUnderAmountTolerance
				or  WorkCostDifference      > WorkCostPercentAmount)
					CreateMessage								= true
      
			if  (LocalMatchRuleToleranceGroup.ReconUnderAmountCondition not entered)
				if  (LocalMatchRuleToleranceGroup.ReconUnderAmountPercentage not entered
				and  LocalMatchRuleToleranceGroup.ReconUnderAmountTolerance not entered
				and  WorkCostDifference  entered)
					CreateMessage								= true
				else
				if  ((LocalMatchRuleToleranceGroup.ReconUnderAmountPercentage > 0
				and   WorkCostDifference      > WorkCostPercentAmount)
				or   (LocalMatchRuleToleranceGroup.ReconUnderAmountTolerance > 0
				and  WorkCostDifference      > LocalMatchRuleToleranceGroup.ReconUnderAmountTolerance))
					CreateMessage								= true
      
		958CheckOverQty 


			initialize WorkQuantityDifference
			initialize WorkQuantityPercentAmount
			CreateMessage										= false
      
      		if  (IsCatchWeight)
				if  (BuyUOMMatchedQuantity > ThisReceiptLineRel.MatchedQuantity)
	                WorkQuantityDifference   					= BuyUOMMatchedQuantity -  ThisReceiptLineRel.MatchedQuantity
	      
					if  (LocalMatchRuleToleranceGroup.ReconOverQuantityPercentage > 0)
	                    WorkQuantityPercentAmount 				= ThisReceiptLineRel.MatchedQuantity * LocalMatchRuleToleranceGroup.ReconOverQuantityPercentage
			else
            if  (PayablesInvoiceDetail.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
            and  PurchaseOrderLine.VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
                WorkQuantityDifference   						= EnteredQuantity -  ThisReceiptLineRel.DerivedOpenToMatchQuantity
      
				if  (LocalMatchRuleToleranceGroup.ReconOverQuantityPercentage > 0)
                    WorkQuantityPercentAmount 					= ThisReceiptLineRel.DerivedOpenToMatchQuantity * LocalMatchRuleToleranceGroup.ReconOverQuantityPercentage
			else
			if  (ThisReceiptLineRel.OpenToMatchQuantity entered)
                WorkQuantityDifference   						= MatchedQuantity -  ThisReceiptLineRel.DerivedOpenToMatchQuantity
      
				if  (LocalMatchRuleToleranceGroup.ReconOverQuantityPercentage > 0)
                    WorkQuantityPercentAmount 					= ThisReceiptLineRel.OpenToMatchQuantity * LocalMatchRuleToleranceGroup.ReconOverQuantityPercentage
            else 
				WorkQuantityDifference   						= MatchedQuantity - MessageVendorPriceMatchQuantity

				if  (LocalMatchRuleToleranceGroup.ReconOverQuantityPercentage > 0)
					WorkQuantityPercentAmount 					= ThisReceiptLineRel.VendorPriceUOMQuantity * LocalMatchRuleToleranceGroup.ReconOverQuantityPercentage 


			if  (LocalMatchRuleToleranceGroup.ReconOverQuantityCondition.And)
				if  (WorkQuantityDifference       > LocalMatchRuleToleranceGroup.ReconOverQuantityTolerance
				and  WorkQuantityDifference       > WorkQuantityPercentAmount)
					CreateMessage								= true
      
			if  (LocalMatchRuleToleranceGroup.ReconOverQuantityCondition.Or)
				if  (WorkQuantityDifference       > LocalMatchRuleToleranceGroup.ReconOverQuantityTolerance
				or   WorkQuantityDifference       > WorkQuantityPercentAmount)
					CreateMessage								= true
      
			if  (LocalMatchRuleToleranceGroup.ReconOverQuantityCondition not entered)
				if  (LocalMatchRuleToleranceGroup.ReconOverQuantityPercentage not entered
				and  LocalMatchRuleToleranceGroup.ReconOverQuantityTolerance not entered
				and  WorkQuantityDifference entered)
					CreateMessage								= true
				else
				if  ((LocalMatchRuleToleranceGroup.ReconOverQuantityPercentage > 0
				and   WorkQuantityDifference      > WorkQuantityPercentAmount)
				or   (LocalMatchRuleToleranceGroup.ReconOverQuantityTolerance > 0
				and   WorkQuantityDifference      > LocalMatchRuleToleranceGroup.ReconOverQuantityTolerance))
					CreateMessage								= true
      
		959CheckUnderQty 


			initialize WorkQuantityDifference
			initialize WorkQuantityPercentAmount
			CreateMessage										= false
      
            if  (PayablesInvoiceDetail.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
            and  PurchaseOrderLine.VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
                WorkQuantityDifference   						=  ThisReceiptLineRel.DerivedOpenToMatchQuantity - EnteredQuantity   
				if  (LocalMatchRuleToleranceGroup.ReconUnderQuantityPercentage > 0)
					WorkQuantityPercentAmount 					= ThisReceiptLineRel.DerivedOpenToMatchQuantity * LocalMatchRuleToleranceGroup.ReconUnderQuantityPercentage 
			else
			if  (ThisReceiptLineRel.OpenToMatchQuantity entered)
                WorkQuantityDifference   						=  ThisReceiptLineRel.OpenToMatchQuantity - MatchedQuantity   

				if  (LocalMatchRuleToleranceGroup.ReconUnderQuantityPercentage > 0)
					WorkQuantityPercentAmount 					= ThisReceiptLineRel.OpenToMatchQuantity * LocalMatchRuleToleranceGroup.ReconUnderQuantityPercentage
				else 
					WorkQuantityDifference   					= ThisReceiptLineRel.VendorPriceUOMQuantity - MatchedQuantity

				if  (LocalMatchRuleToleranceGroup.ReconUnderQuantityPercentage > 0)
					WorkQuantityPercentAmount 					= ThisReceiptLineRel.VendorPriceUOMQuantity * LocalMatchRuleToleranceGroup.ReconUnderQuantityPercentage 
      
			if  (LocalMatchRuleToleranceGroup.ReconUnderQuantityCondition.And)
				if  (WorkQuantityDifference       > LocalMatchRuleToleranceGroup.ReconUnderQuantityTolerance
				and  WorkQuantityDifference       > WorkQuantityPercentAmount)
					CreateMessage								= true
      
			if  (LocalMatchRuleToleranceGroup.ReconUnderQuantityCondition.Or)
				if  (WorkQuantityDifference       > LocalMatchRuleToleranceGroup.ReconUnderQuantityTolerance
				or   WorkQuantityDifference       > WorkQuantityPercentAmount)
					CreateMessage								= true
      
			if  (LocalMatchRuleToleranceGroup.ReconUnderQuantityCondition not entered)
				if  (LocalMatchRuleToleranceGroup.ReconUnderQuantityPercentage not entered
				and  LocalMatchRuleToleranceGroup.ReconUnderQuantityTolerance not entered
				and  WorkQuantityDifference  entered)
					CreateMessage								= true
				else
				if  ((LocalMatchRuleToleranceGroup.ReconUnderQuantityPercentage > 0
				and   WorkQuantityDifference      > WorkQuantityPercentAmount)
				or   (LocalMatchRuleToleranceGroup.ReconUnderQuantityTolerance > 0
				and   WorkQuantityDifference      > LocalMatchRuleToleranceGroup.ReconUnderQuantityTolerance))
					CreateMessage								= true
      
      
		4410CheckAmtTypeSrvcMsgTol 


			if  (MessageExtendedDifference < 0)		
				NextSentence = true					
			else									
			if  (MessageExtendedDifference > 0
			and (Company.ServiceMessagingOption.OverOrUnderQuantityAndCost
			or   Company.ServiceMessagingOption.OverQuantityAndCost
			or   Company.ServiceMessagingOption.ExtendedAmountOnly))
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.And
				and  MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				and  MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.Or
				and (MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				or   MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent))
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent not entered)
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance > 0
				and  MessageExtendedDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent > 0
				and  MessageOverCtPercentDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
					MessageType									= "C"

				if  (MessageType entered)
					MessageSubType									= "O"
					include 4440CreateNewMainvmsg
			else
			if  (MessageExtendedDifference < 0
			and (Company.ServiceMessagingOption.OverOrUnderQuantityAndCost
			or   Company.ServiceMessagingOption.UnderQuantityAndCost))
				MessageExtendedDifference *= -1
				MessageOverCtPercentDifference *= -1

				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.And
				and  MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				and  MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition.Or
				and (MessageExtendedDifference   > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance
				or   MessageOverCtPercentDifference  > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent))
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent not entered)
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance > 0
				and  MessageExtendedDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountTolerance) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceExtendedAmountCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent > 0
				and  MessageOverCtPercentDifference > LocalMatchMessageToleranceGroup.ServiceExtendedAmountPercent) 
					MessageType									= "C"

				if  (MessageType entered)
					MessageSubType									= "U"
					include 4440CreateNewMainvmsg

		4420CheckQtyTypeSrvcMsgTol 


			if  ((Company.ServiceMessagingOption.OverQuantityAndCost
			or    Company.ServiceMessagingOption.OverOrUnderQuantityAndCost)
			and  (MessageUnitCostDifference > 0
			or    MessageQuantityDifference > 0))
				include 4420aCheckQtySrvcOvTol

			if  ((Company.ServiceMessagingOption.UnderQuantityAndCost
			or    Company.ServiceMessagingOption.OverOrUnderQuantityAndCost)
			and  (MessageUnitCostDifference < 0
			or    MessageQuantityDifference < 0))
				include 4420bCheckQtySrvcUnTol

		4420aCheckQtySrvcOvTol 


			if  (MessageUnitCostDifference > 0)
			
				if  (CurrentContractLineRel exists
				and  MatchMessageToleranceRel exists)
					if  (CurrentContractLineRel.ServiceCode.Amount)     
						MessageExtendedDifference			= EnteredUnitCost + CurrentContractLineRel.AmountOrdered - MatchUnitCost   

				MessageOverUnitPercentDifference 			= MatchUnitCost * LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent
	
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition.And
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount
				and  MessageUnitCostDifference     > MessageOverUnitPercentDifference) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition.Or
				and (MessageUnitCostDifference    > LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount
				or   MessageUnitCostDifference    > MessageOverUnitPercentDifference)) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent not entered)
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount > 0
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceOverUnitCostToleranceAmount)
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverUnitCostTolerancePercent > 0
				and  MessageUnitCostDifference     > MessageOverUnitPercentDifference) 
					MessageType									= "C"

				if  (MessageType entered)
					MessageSubType									= "O"
					include 4440CreateNewMainvmsg

			if  (MessageQuantityDifference > 0)

				if  (PayablesInvoice.MatchProcessType.ServiceContract)
				    if  (CurrentContractLineRel.PerOrderMaximumQuantity entered
				    and  CurrentContractLineRel.PerOrderMaximumQuantity < (CurrentContractLineRel.LifetimeMaximumQuantity - CurrentContractLineRel.QuantityOrdered))
						MessageOverQuantityPercentDifference 			= ((CurrentContractLineRel.PerOrderMaximumQuantity - CurrentContractLineRel.QuantityOrdered) * LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent)
					else
						MessageOverQuantityPercentDifference 			= ((CurrentContractLineRel.LifetimeMaximumQuantity - CurrentContractLineRel.QuantityOrdered) * LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent)
	
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition.And
				and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceOverQuantityValue
				and  MessageQuantityDifference    > MessageOverQuantityPercentDifference) 
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition.Or
				and (MessageQuantityDifference   > LocalMatchMessageToleranceGroup.ServiceOverQuantityValue
				or   MessageQuantityDifference   > MessageOverQuantityPercentDifference)) 
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityValue not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent not entered)
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityValue > 0
				and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceOverQuantityValue) 
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceOverQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceOverQuantityPercent > 0
				and  MessageQuantityDifference    > MessageOverQuantityPercentDifference) 
					MessageType									= "Q"

				if  (MessageType entered)
					MessageSubType									= "O"
					include 4440CreateNewMainvmsg

		4420bCheckQtySrvcUnTol 






			if  (MessageUnitCostDifference < 0)

				MessageUnitCostDifference 							*= -1
	
				if  (PayablesInvoice.MatchProcessType.ServiceContract)
					MessageUnderUnitPercentDifference 				= (MatchUnitCost * LocalMatchMessageToleranceGroup.ServiceUnderUnitCostTolerancePercent)



				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition.And
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount
				and  MessageUnitCostDifference     > MessageUnderUnitPercentDifference) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition.Or
				and (MessageUnitCostDifference    > LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount
				or   MessageUnitCostDifference    > MessageUnderUnitPercentDifference)) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostTolerancePercent not entered)
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount > 0
				and  MessageUnitCostDifference     > LocalMatchMessageToleranceGroup.ServiceUnderUnitCostToleranceAmount) 
					MessageType									= "C"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderUnitCostCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderUnitCostTolerancePercent > 0
				and  MessageUnitCostDifference     > MessageUnderUnitPercentDifference) 
					MessageType									= "C"
					
				if  (MessageType entered)
					MessageSubType									= "U"
					include 4440CreateNewMainvmsg
					

			if  (MessageQuantityDifference < 0)

				MessageQuantityDifference 							*= -1
				if  (PayablesInvoice.MatchProcessType.ServiceContract)
				
				    if  (CurrentContractLineRel.PerOrderMaximumQuantity entered
				    and  CurrentContractLineRel.PerOrderMaximumQuantity < (CurrentContractLineRel.LifetimeMaximumQuantity - CurrentContractLineRel.QuantityOrdered))
						MessageUnderQuantityPercentDifference 			= ((CurrentContractLineRel.PerOrderMaximumQuantity - CurrentContractLineRel.QuantityOrdered) * LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent)
					else
						MessageUnderQuantityPercentDifference 			= ((CurrentContractLineRel.LifetimeMaximumQuantity - CurrentContractLineRel.QuantityOrdered) * LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent)
				else
					MessageUnderQuantityPercentDifference			= MessageUnmatchedQuantity * LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent





	 			if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition.And
	 			and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue
	 			and  MessageQuantityDifference    > MessageUnderQuantityPercentDifference) 
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition.Or
				and (MessageQuantityDifference   > LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue
				or   MessageQuantityDifference   > MessageUnderQuantityPercentDifference)) 
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent not entered)
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue > 0
				and  MessageQuantityDifference    > LocalMatchMessageToleranceGroup.ServiceUnderQuantityValue) 
					MessageType									= "Q"
				else
				if  (LocalMatchMessageToleranceGroup.ServiceUnderQuantityCondition not entered
				and  LocalMatchMessageToleranceGroup.ServiceUnderQuantityPercent > 0
				and  MessageQuantityDifference    > MessageUnderQuantityPercentDifference) 
					MessageType									= "Q"

				if  (MessageType entered)
					MessageSubType									= "U"
					include 4440CreateNewMainvmsg

		4440CreateNewMainvmsg 


			invoke Create MatchInvoiceMessage
				fill in fields from PayablesInvoiceDetail
					except invoked.Status
				      
				invoked.DueDate										= PayablesInvoice.DueDate
				invoked.MatchMessageOrigin							= 4
				invoked.Priority									= 2
				invoked.MatchObjectID								= MatchWork.OutMatchObjectID
				invoked.DiscountDate								= PayablesInvoice.DiscountDate
				invoked.Location									= PayablesInvoiceDetail.Location
		        invoked.MessageType									= MessageType
		        invoked.MessageSubType								= MessageSubType
				if (CreateMatchReconMessage			
				and CreateChargeback)
					invoked.ApplicationAction						= 2
					invoked.ReasonCode								= ChargebackReason
					invoked.Status									= 9
					invoked.Reference 								= ChargebackReference
				else
					invoked.ReasonCode								= MessageReasonCode
			        invoked.Status									= 1
      
				if  (PayablesInvoice.MatchProcessType.ServiceContract)
					invoked.Buyer									= PayablesInvoice.ServiceContract.Buyer
					invoked.BuyerOwner								= PayablesInvoice.ServiceContract.Buyer
					invoked.AuthorityCodeEmailAddress				= PayablesInvoice.ServiceContract.Buyer.EmailAddress
				else
				if  (PurchaseOrder.Buyer entered
				and  !PayablesInvoice.MatchProcessType.DropShip
				and  !PayablesInvoice.MatchProcessType.Service)
					invoked.Buyer									= PurchaseOrder.Buyer
					invoked.AuthorityCodeEmailAddress				= PurchaseOrder.Buyer.EmailAddress
				else
					invoked.Buyer									= PurchaseOrderLine.Buyer
					invoked.AuthorityCodeEmailAddress				= PurchaseOrderLine.Buyer.EmailAddress


			invoke FastUpdate MatchWorkInvoiceRel
				invoked.Approved									= "M"
				
			initialize MessageType

		CallCalculateTax		
		

			if (CalculateTax.Function not entered)
				CalculateTax.Function			 									= CalculateTax.Function.CalculateTax

			CalculateTax.TaxEntity 													= Company.AccountingEntity
			CalculateTax.CallingModule												= "Payables_Invoice"
			CalculateTax.System														= "AP"
			CalculateTax.Invoice 													= PayablesInvoice.Invoice
			CalculateTax.TransactionCurrency										= PayablesInvoice.InvoiceCurrency
			CalculateTax.BaseCurrency												= Company.Currency
			CalculateTax.Location													= PayablesInvoiceDetail.Location
			CalculateTax.Quantity													= PayablesInvoiceDetail.EnteredQuantity 
			CalculateTax.PostalAddress												= InventoryLocationRel.PostalAddress
			if  (PayablesInvoice.VendorLocationRel exists)
				CalculateTax.FromPostalAddress										= PayablesInvoice.VendorLocationRel.CurrentAddressRel.PostalAddress
			else
				CalculateTax.FromPostalAddress										= Vendor.first VendorLocationRel.CurrentAddressRel.PostalAddress
		
			if  (UsePODate
			and  POTaxDate entered)
				CalculateTax.InvoiceDate											= POTaxDate
				CalculateTax.PaymentDate 											= POTaxDate
				CalculateTax.GeneralLedgerDate 										= POTaxDate
				CalculateTax.TaxDate												= POTaxDate
			else
				CalculateTax.InvoiceDate											= PayablesInvoice.InvoiceDate
				CalculateTax.PaymentDate 											= PayablesInvoice.InvoiceDate
				CalculateTax.GeneralLedgerDate 										= PayablesInvoice.InvoiceDate
				CalculateTax.TaxDate												= PayablesInvoice.InvoiceDate

			if (PayablesInvoice.TaxEntityUsesVertex)
				CalculateTax.VertexQuantumOption					= "C"	
			
			if  (PayablesInvoice.TaxEntityUsesThirdPartyTax
			and !TaxEntityRel.ThirdParty.TaxEngine)
				CalculateTax.InputReturnVertexTaxIn									= "D"	

			    CalculateTax.VATRegistrationCountry    	 			= PayablesInvoice.TaxEntityRel.VATRegistrationCountry 			
			    CalculateTax.VATRegistrationNumber					= PayablesInvoice.TaxEntityRel.VATRegistrationNumber			
				if (PayablesInvoice.PurchaseFromLocation entered)
					CalculateTax.FromPostalAddress					= PayablesInvoice.PurchaseFromLocation.VendorAddress 
			    	CalculateTax.FromVATRegistrationCountry 		= PayablesInvoice.PurchaseFromLocation.VATRegistrationCountry			
			    	CalculateTax.FromVATRegistrationNumber			= PayablesInvoice.PurchaseFromLocation.VATRegistrationNumber				
					CalculateTax.FromTaxCode						= PayablesInvoice.PurchaseFromLocation.TaxCode
				else
				if (PurchaseOrder.PurchaseFromLocation entered)
					CalculateTax.FromPostalAddress					= PurchaseOrder.PurchaseFromLocation.VendorAddress 
			    	CalculateTax.FromVATRegistrationCountry 		= PurchaseOrder.PurchaseFromLocation.VATRegistrationCountry			
			    	CalculateTax.FromVATRegistrationNumber			= PurchaseOrder.PurchaseFromLocation.VATRegistrationNumber				
					CalculateTax.FromTaxCode						= PurchaseOrder.PurchaseFromLocation.TaxCode
				else
					CalculateTax.FromPostalAddress					= Vendor.VendorAddress		
			    	CalculateTax.FromVATRegistrationCountry 		= Vendor.VATRegistrationCountry					
			    	CalculateTax.FromVATRegistrationNumber			= Vendor.VATRegistrationNumber					
					CalculateTax.FromTaxCode						= Vendor.TaxCode

		   		CalculateTax.InvoiceCompany							= Company
		   		CalculateTax.ProcessLevel							= PayablesInvoice.ProcessLevel 
				CalculateTax.VendorGrp								= PayablesCompanyRel.VendorGroup
				CalculateTax.Vendor									= Vendor 
				CalculateTax.VendorCustomerName						= PurchaseOrder.Vendor.VendorName 	
				CalculateTax.LineNumber								= PurchaseOrderLine		
				if (OneSourceGeneric)
			   		CalculateTax.CommodityCode						= PayablesInvoiceDetail.DerivedCommodityCodeNoDash				
				else
			   		CalculateTax.CommodityCode						= PayablesInvoiceDetail.ICNCode				
				CalculateTax.TaxUsageCode							= PayablesInvoiceDetail.TaxUsageCode					
				CalculateTax.DeliveryTerms          				= PurchaseOrder.ShipTerm

				if (PurchaseOrder.DropshipAddress entered)
					CalculateTax.PostalAddress						= PurchaseOrder.DropshipAddress
				else
				if (Location entered)
					if (PurchaseOrderLine.ShipToLocation.PostalAddressForPurchaseOrder entered)
						CalculateTax.PostalAddress					= PurchaseOrderLine.ShipToLocation.PostalAddressForPurchaseOrder
					else 	
						CalculateTax.PostalAddress					= PayablesInvoiceDetail.Location.PostalAddress	
				else
				if (PayablesInvoice.Location entered)
					if (PayablesInvoice.Location.PostalAddressForPurchaseOrder entered)
						CalculateTax.PostalAddress					= PayablesInvoice.Location.PostalAddressForPurchaseOrder
					else 	
						CalculateTax.PostalAddress					= PayablesInvoice.Location.PostalAddress	
				else
				if (PurchaseOrder entered
				and PurchaseOrder.ShipToLocation entered)
					if (PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder entered)
						CalculateTax.PostalAddress					= PurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder
					else 	
						CalculateTax.PostalAddress					= PurchaseOrder.ShipToLocation.PostalAddress	
				else
					CalculateTax.PostalAddress						= PayablesInvoice.ProcessLevel.PostalAddress	

			    CalculateTax.DefaultFilingCurrency 					= Company.Currency 
				CalculateTax.CurrencyRate							= PurchaseOrder.EnteredCurrencyConversionRate 		
			    CalculateTax.TransactionCurrency 					= PayablesInvoice.InvoiceCurrency								
				CalculateTax.BaseCurrency 							= Company.Currency					
				CalculateTax.ReceiptSite							= PayablesInvoice.ProcessLevel								
				CalculateTax.UniqueIdOfRelatedObject				= PayablesInvoiceDetail.UniqueID													


			if (TaxEntityRel.ThirdParty.VertexOSeries)

				if  (!ItemType.Inventoried)
					if  (PurchaseOrderLine entered)
						if (PayablesInvoiceDetail.InvoiceDistributionsForPurchaseOrderLineRel exists)
							LocalVertexDistributionAccount    = first PayablesInvoiceDetail.InvoiceDistributionsForPurchaseOrderLineRel.DistributionAccount
						else 
							LocalVertexDistributionAccount    = first PurchaseOrderLine.PurchaseOrderLineDistributionsRel.DistributionAccount
					else
					if  (ContractLine entered)
						if (PayablesInvoiceDetail.InvoiceDistributionsForContractLineRel exists)
							LocalVertexDistributionAccount    = first PayablesInvoiceDetail.InvoiceDistributionsForContractLineRel.DistributionAccount
						else 
							LocalVertexDistributionAccount    = first ContractLine.ContractLineDistributionRel.DistributionAccount
					else
						LocalVertexDistributionAccount    		= PayablesInvoiceDetail.first InvoiceDistributionsForMiscellaneousDetailRel.DistributionAccount
				else
					LocalVertexDistributionAccount				= PayablesInvoiceDetail.ItemLocationRel.GeneralLedgerCategory.InventoryAccount

				if (LocalVertexDistributionAccount not entered)
					LocalVertexDistributionAccount    = first PurchaseOrderLine.PurchaseOrderLineDistributionsRel.DistributionAccount

				if (PayablesInvoice.BillFromLocation entered)
					CalculateTax.POAAddress							= PayablesInvoice.BillFromLocation.VendorAddress	 	
				else
					CalculateTax.POAAddress							= PayablesInvoice.Vendor.VendorAddress

				CalculateTax.ProductClass                   		= PurchaseOrderLine.MajorPurchasingClass  
				CalculateTax.CostCenter                      		= LocalVertexDistributionAccount.AccountingUnit     
				CalculateTax.PostDate                          		= PayablesInvoice.DistributionDate                    
				CalculateTax.GeneralLedgerAccount 					= LocalVertexDistributionAccount.GeneralLedgerChartAccount 

				if (PayablesInvoiceDetail.IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      			= "HSN"
					CalculateTax.HSNSACCode							= PayablesInvoiceDetail.HSNSACCode 
				else 
					CalculateTax.CommodityCodeType      			= "UNSPSC"
					CalculateTax.UNSPSCCode							= PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay 


				if (TaxAttributesRel.VertexFlexibleFieldExist
				and !PayablesInvoice.CallVertexByDocument)

					LocalInventoryLocation = PayablesInvoiceDetail.Location




					Idx = 0

					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel

						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId = each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company.AccountingEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else    
							if (each.ExternalValue.ValueIs.Vendor)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Vendor
							else    
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DistributionDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DerivedTaxPointDate
							else    
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.ToAccountingEntity 
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.AccountingUnit
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceDetail.Location 
							else    
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceCurrency
							else    



							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.DiscountAmount.CurrencyAmount
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceDetail.EnteredUnitCost
							else    



							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
							else    
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.GeneralLedgerChartAccount.AccountSubType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
							else    
							if (each.ExternalValue.ValueIs.CommodityCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceDetail.DerivedCommodityCodeNoDash
							else    
							if (each.ExternalValue.ValueIs.UNSPSC)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay
							else    
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceDetail.ProductTaxCategory
							else    
							if (each.ExternalValue.ValueIs.TaxUsageCode)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoiceDetail.TaxUsageCode
							else 



							if (each.ExternalValue.ValueIs.PaymentDate)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = PayablesInvoice.InvoiceDate 
							else 









							if (each.ExternalValue.ValueIs.UsageType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
							else 
							if (each.ExternalValue.ValueIs.CustomerType)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
							else 
							if (each.ExternalValue.ValueIs.Project)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.Project
							else 
							if (each.ExternalValue.ValueIs.Longitude)				
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLongitude
							else 
							if (each.ExternalValue.ValueIs.Latitude)			
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoLatitude
							else 
							if (each.ExternalValue.ValueIs.Altitude)									
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalInventoryLocationRel.PostalAddress.GeoAltitude
							else 
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension1
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalVertexDistributionAccount.FinanceDimension10
							else    
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  






					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel

						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId 
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalVertexDistributionAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoice.DiscountAmount.CurrencyAmount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3 
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = PayablesInvoiceDetail.EnteredUnitCost
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 5 
							else    
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue  







					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel

						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue     
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DistributionDate
							else    
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								if (PayablesInvoice.DerivedTaxPointDate entered)
									CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.DerivedTaxPointDate
								else 
									CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = PayablesInvoice.InvoiceDate 
							else    
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue  






			if (OneSourceGeneric
			and PayablesInvoiceDetail.TaxAmount not entered
			and PayablesInvoiceDetail.AccruedTaxAmount not entered
			and !SkipRel exists)
				if (TaxAttributesRel.OneSourceTaxAttributeRel exists)



					for each TaxLineItemRel
						invoke Delete each.LineItemUserFieldsRel
						invoke Delete each
					
					invoke Create TaxLineItem
						assign result to TaxLineItemView
					
						invoked.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
						invoked.TaxLineItem.UniqueIdOfRelatedObject = PayablesInvoice.UniqueID
						invoked.RelatedObjectReference 				= reference to PayablesInvoiceDetail
						invoked.InvoiceNumber						= PayablesInvoice.Invoice
						invoked.LineItemId							= PurchaseOrderLine	
						invoked.RelatedLineItemUniqueId				= PayablesInvoiceDetail.UniqueID											
						invoked.InvoiceDate							= PayablesInvoice.InvoiceDate
						invoked.TaxEntity							= Company.AccountingEntity
					
						invoked.LineItemNumber						= PurchaseOrderLine	
						invoked.InvoiceAmount						= PayablesInvoiceDetail.TotalDistributionAmount
						invoked.TaxableAmount						= PayablesInvoiceDetail.TotalDistributionAmount
						if (PayablesInvoiceDetail.TaxCode != "00")
							invoked.ShipToTaxCode					= PayablesInvoiceDetail.TaxCode									
							invoked.ShipToTaxCodeDescription		= PayablesInvoiceDetail.TaxCode.Description									
						invoked.CommodityCode						= PayablesInvoiceDetail.DerivedCommodityCodeNoDash											
					
						if (PayablesInvoice.Dropship
						and PayablesInvoice.FirstPurchaseOrder entered)
							invoked.ShipToAddress 					= PayablesInvoice.FirstPurchaseOrder.DropshipAddress
						else
						if (PayablesInvoice.FirstPurchaseOrder entered
						and PayablesInvoice.FirstPurchaseOrder.ShipToLocation entered)
							invoked.ShipToAddress					= PayablesInvoice.FirstPurchaseOrder.ShipToLocation.PostalAddressForPurchaseOrder
						else
						if (PayablesInvoice.Location entered)
							invoked.ShipToAddress 					= PayablesInvoice.Location.PostalAddressForPurchaseOrder
						else
							invoked.ShipToAddress 					= PayablesInvoice.DefaultProcessLevelRel.PostalAddress
	
					initialize Idx
					invoke Create TaxLineItemUserFields

						for each TaxAttributesRel.OneSourceTaxAttributeRel
	
							LocalDistributionAccount	= WorkDistributionGroup.Account
							if (LocalDistributionAccount not entered)
								if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
									LocalDistributionAccount	= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
								else
									LocalDistributionAccount	= Company.ReceiptAccrualAccount
							



							if ((each.LoadDynamicField.System	= "AP"
							or   each.LoadDynamicField.System not entered)
							and Idx < 50)
								invoked.FinanceEnterpriseGroup							= Company.FinanceEnterpriseGroup 
								invoked.TaxLineItem.UniqueIdOfRelatedObject 			= PayablesInvoice.UniqueID
								invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
								if (each.LoadDynamicField.ValueIs.TaxEntity)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= Company.AccountingEntity

								else
								if (each.LoadDynamicField.ValueIs.Company)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= Company

								else
								if (each.LoadDynamicField.ValueIs.Vendor)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= Vendor

								else
								if (each.LoadDynamicField.ValueIs.PostingDate)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoice.DistributionDate

								else
								if (each.LoadDynamicField.ValueIs.TaxDate)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= DerivedTaxPointDate2

								else
								if (each.LoadDynamicField.ValueIs.GLAccount)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.GeneralLedgerChartAccount

								else
								if (each.LoadDynamicField.ValueIs.Location)
									if (!PayablesInvoice.MatchProcessType.Expense
									and  PayablesInvoiceDetail.Location entered)																
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number = Idx
										invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoiceDetail.Location
									else
									if (PayablesInvoice.RemitToCode entered)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number = Idx
										invoked.UserElementGroup.UserElement[Idx].Name	= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoice.RemitToCode

								else
								if (each.LoadDynamicField.ValueIs.Currency)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoice.InvoiceCurrency

								else








								if (each.LoadDynamicField.ValueIs.DiscountAmount
								and PayablesInvoice.DiscountAmount.CurrencyAmount entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoice.DiscountAmount.CurrencyAmount

								else
								if (each.LoadDynamicField.ValueIs.UnitCost
								and PayablesInvoiceDetail.EnteredQuantity entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= EnteredUnitCost

								else
								if (each.LoadDynamicField.ValueIs.ContractType
								and LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ContractType
								else
								if (each.LoadDynamicField.ValueIs.WorkType
								and LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.WorkType
								else
								if (each.LoadDynamicField.ValueIs.AccountSubType
								and LocalDistributionAccount.GeneralLedgerChartAccount.AccountSubType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= LocalDistributionAccount.GeneralLedgerChartAccount.AccountSubType
								else
								if (each.LoadDynamicField.ValueIs.ServiceType
								and LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ServiceType
								else
								if (each.LoadDynamicField.ValueIs.UsageType
								and LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.UsageType
								else
								if (each.LoadDynamicField.ValueIs.CustomerType
								and LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject.ProjectContract.ProjectFundingSourceRel.CustomerType
								else
								if (each.LoadDynamicField.ValueIs.Project
								and LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= LocalDistributionAccount.Project.ProjectInEnterpriseStructureRel.ParentProject
								else
								if (each.LoadDynamicField.ValueIs.CommodityCode
								and PayablesInvoiceDetail.CommodityCode entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoiceDetail.CommodityCode

								else
								if (each.LoadDynamicField.ValueIs.UNSPSC
								and PayablesInvoiceDetail.PurchaseOrderLine.UNSPSCCode entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value	= PayablesInvoiceDetail.PurchaseOrderLine.UNSPSCCode.UNSPSCCodeDisplay

								else
								if (each.LoadDynamicField.ValueIs.ProductTaxCatagory		//	"Category" is spelled wrong in 'UserFieldDynamicValue' state field
								and PayablesInvoiceDetail.ProductTaxCategory entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoiceDetail.ProductTaxCategory

								else
								if (each.LoadDynamicField.ValueIs.TaxUsageCode
								and PayablesInvoiceDetail.TaxUsageCode entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= PayablesInvoiceDetail.TaxUsageCode
								else
								if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
									if (LocalDistributionAccount.ToAccountingEntity entered)
										increment Idx
										invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
										invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
										invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.ToAccountingEntity
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension1
								and LocalDistributionAccount.FinanceDimension1 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.FinanceDimension1
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension2
								and LocalDistributionAccount.FinanceDimension2 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.FinanceDimension2
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension3
								and LocalDistributionAccount.FinanceDimension3 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.FinanceDimension3
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension4
								and LocalDistributionAccount.FinanceDimension4 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.FinanceDimension4
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension5
								and LocalDistributionAccount.FinanceDimension5 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.FinanceDimension5
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension6
								and LocalDistributionAccount.FinanceDimension6 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.FinanceDimension6
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension7
								and LocalDistributionAccount.FinanceDimension7 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.FinanceDimension7
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension8
								and LocalDistributionAccount.FinanceDimension8 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.FinanceDimension8
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension9
								and LocalDistributionAccount.FinanceDimension9 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.FinanceDimension9
								else
								if (each.LoadDynamicField.ValueIs.FinanceDimension10
								and LocalDistributionAccount.FinanceDimension10 entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= LocalDistributionAccount.FinanceDimension10
								else
								if (each.Value entered)
									increment Idx
									invoked.UserElementGroup.UserElement[Idx].Number 	= Idx
									invoked.UserElementGroup.UserElement[Idx].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[Idx].Value		= each.Value

				UserElementGroup.UserElement[1].Number 				= 1
				UserElementGroup.UserElement[1].Name				= "ATTRIBUTE1"
				UserElementGroup.UserElement[1].Value				= "INVC"

				UserElementGroup.UserElement[2].Number 				= 2
				UserElementGroup.UserElement[2].Name				= "ATTRIBUTE3"
				UserElementGroup.UserElement[2].Value				= PayablesInvoice.FirstPurchaseOrder		

				if  (PayablesInvoice.FirstPurchaseOrder.AribaPOType entered)
					UserElementGroup.UserElement[3].Number 			= 3
					UserElementGroup.UserElement[3].Name			= "ATTRIBUTE4"
					UserElementGroup.UserElement[3].Value			= PayablesInvoice.FirstPurchaseOrder.AribaPOType		

				CalculateTax.SabrixUserElement						= UserElementGroup	
				CalculateTax.CreateOutputUserFieldFile				= true
		
				CalculateTax.ReceiptSite							= PayablesInvoice.ProcessLevel							
				CalculateTax.UniqueIdOfRelatedObject				= PayablesInvoice.UniqueID								
				CalculateTax.UserElementLevel						= blank

				CalculateTax.BypassEditing							= true  
				CalculateTax.Description							= PayablesInvoiceDetail.ItemDescription                                    
				CalculateTax.ItemNumber								= PayablesInvoiceDetail.Item
				CalculateTax.LineNumber								= PurchaseOrderLine
				CalculateTax.UniqueLineNumber						= PayablesInvoiceDetail.UniqueID

				if (PurchaseOrderLine.ShipToLocation.PostalAddressForPurchaseOrder entered)
					CalculateTax.PostalAddress						= PurchaseOrderLine.ShipToLocation.PostalAddressForPurchaseOrder
				else
				if (PurchaseOrderLine.ShipToLocation.PostalAddress entered)
					CalculateTax.PostalAddress			= PurchaseOrderLine.ShipToLocation.PostalAddress
				else 	
				if (PayablesInvoice.Location.PostalAddressForPurchaseOrder entered)
					CalculateTax.PostalAddress			= PayablesInvoice.Location.PostalAddressForPurchaseOrder
				else 	
				if (PayablesInvoice.Location.PostalAddress entered)									
					CalculateTax.PostalAddress 						= PayablesInvoice.Location.PostalAddress	
				else
					CalculateTax.PostalAddress						= PayablesInvoice.ProcessLevel.PostalAddress	
						
				if (PayablesInvoice.PurchaseFromLocation entered)
					CalculateTax.FromPostalAddress					= PayablesInvoice.PurchaseFromLocation.VendorAddress 	
				else	
					CalculateTax.FromPostalAddress					= Vendor.VendorAddress


			if  ((OneSourceGeneric
			or    PayablesInvoice.CallVertexByDocument)
			and (PayablesInvoiceDetail.TaxAmount entered
			or   PayablesInvoiceDetail.AccruedTaxAmount entered))



				if (PayablesInvoiceDetail.OneCallTaxLineItemRel2 exists
				and PayablesInvoiceDetail.PayablesInvoiceDetailTaxRel.OverrideTaxAmount not entered)

					CalculateTaxCode                                            = DetailsTaxCode
					if (PayablesInvoiceDetail.PayablesInvoiceDetailTaxRel.OverrideTaxAmount entered)
						CalculateTax.OutputTaxRate								= PayablesInvoiceDetail.PayablesInvoiceDetailTaxRel.OverrideTaxAmount / PayablesInvoiceDetail.TotalDistributionAmount
					else
					if (PayablesInvoiceDetail.TaxAmount entered)
						CalculateTax.OutputTaxRate								= PayablesInvoiceDetail.TaxAmount / PayablesInvoiceDetail.TotalDistributionAmount
					else
						CalculateTax.OutputTaxRate								= PayablesInvoiceDetail.AccruedTaxAmount / PayablesInvoiceDetail.TotalDistributionAmount
					CalculateTax.OutputTotalLandedTaxAmount5DP 					= CalculateTax.TaxableAmount * CalculateTax.OutputTaxRate  
					CalculateTax.OutputTotalTaxAmount							= CalculateTax.OutputTotalLandedTaxAmount5DP

					initialize I1 
					for each PayablesInvoiceDetail.OneCallTaxLineItemRel2
						for each each.TaxDetailOutRel
							I1 += 1

							CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode			= each.TaxCode
							CalculateTax.TaxTable.TaxTableOutput[I1].TaxRate			= each.TaxRate
							CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount			= each.TaxAmount
							CalculateTax.TaxTable.TaxTableOutput[I1].TaxAmount5DP		= each.TaxAmount5DP
							CalculateTax.TaxTable.TaxTableOutput[I1].TaxableAmount		= each.TaxableAmount
							CalculateTax.TaxTable.TaxTableOutput[I1].LandCostFlag 		= each.LandCostFlag
							CalculateTax.TaxTable.TaxTableOutput[I1].AccrualFlag 		= each.AccrualFlag
							CalculateTax.TaxTable.TaxTableOutput[I1].TaxInputAccount 	= each.TaxInputAccount
							CalculateTax.TaxTable.TaxTableOutput[I1].TaxInputDueAccount = each.TaxInputDueAccount
							CalculateTax.TaxTable.TaxTableOutput[I1].TaxPoint 			= each.TaxPoint

				if (PayablesInvoiceDetail.OneCallTaxLineItemRel2 not exists
				or  PayablesInvoiceDetail.PayablesInvoiceDetailTaxRel.OverrideTaxAmount entered
				or  CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount not entered)

					if (PayablesInvoiceDetail.PayablesInvoiceDetailTaxRel.OverrideTaxAmount entered)
						CalculateTax.OutputTaxRate								= PayablesInvoiceDetail.PayablesInvoiceDetailTaxRel.OverrideTaxAmount / PayablesInvoiceDetail.TotalDistributionAmount
					else
					if (PayablesInvoiceDetail.TaxAmount entered)
						CalculateTax.OutputTaxRate								= PayablesInvoiceDetail.TaxAmount / PayablesInvoiceDetail.TotalDistributionAmount
					else
						CalculateTax.OutputTaxRate								= PayablesInvoiceDetail.AccruedTaxAmount / PayablesInvoiceDetail.TotalDistributionAmount
					CalculateTax.OutputTotalLandedTaxAmount5DP 					= CalculateTax.TaxableAmount * CalculateTax.OutputTaxRate  
					CalculateTax.OutputTotalTaxAmount							= CalculateTax.OutputTotalLandedTaxAmount5DP
					CalculateTax.TaxTable.TaxTableOutput[1].TaxCode				= DetailsTaxCode
					CalculateTaxCode                                            = DetailsTaxCode
					if (DetailsTaxCode not entered)
						CalculateTax.TaxTable.TaxTableOutput[1].TaxCode = PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode

					CalculateTax.TaxTable.TaxTableOutput[1].TaxRate				= CalculateTax.OutputTaxRate
					CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount			= CalculateTax.OutputTotalTaxAmount
					CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount5DP		= CalculateTax.OutputTotalLandedTaxAmount5DP
					CalculateTax.TaxTable.TaxTableOutput[1].TaxableAmount		= CalculateTax.TaxableAmount
					if (LocalEntityTaxCodeRel exists)
						CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag 		= LocalEntityTaxCodeRel.LandedCost
						CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag 		= LocalEntityTaxCodeRel.AccruedOrInvoiced
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount 	= LocalEntityTaxCodeRel.TaxInputAccount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount 	= LocalEntityTaxCodeRel.TaxInputDueAccount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint 			= LocalEntityTaxCodeRel.TaxPoint
					else
						CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag 		= TaxEntityRel.LandedCost
						CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag 		= TaxEntityRel.AccruedOrInvoiced
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount 	= TaxEntityRel.TaxInputAccount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount 	= TaxEntityRel.TaxInputDueAccount
						CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint 			= TaxEntityRel.TaxPoint
			else
			if (BypassOneSourceRel exists
			and BypassOneSourceTaxRateRel exists)

				CalculateTax.OutputTaxRate									= BypassOneSourceTaxRateRel.Rate
				CalculateTax.OutputTotalTaxAmount							= CalculateTax.TaxableAmount * CalculateTax.OutputTaxRate
				CalculateTax.OutputTotalLandedTaxAmount5DP 					= CalculateTax.OutputTotalTaxAmount 
	            CalculateTax.TaxTable.TaxTableOutput[1].TaxCode				= DetailsTaxCode
	            if (DetailsTaxCode not entered)
	            	CalculateTax.TaxTable.TaxTableOutput[1].TaxCode = PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
	            CalculateTax.TaxTable.TaxTableOutput[1].TaxRate				= CalculateTax.OutputTaxRate
	            CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount			= CalculateTax.OutputTotalTaxAmount
	            CalculateTax.TaxTable.TaxTableOutput[1].TaxAmount5DP		= CalculateTax.OutputTotalTaxAmount
	            CalculateTax.TaxTable.TaxTableOutput[1].TaxableAmount		= CalculateTax.TaxableAmount
				if (LocalEntityTaxCodeRel exists)
		            CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag 		= LocalEntityTaxCodeRel.LandedCost
		            CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag 		= LocalEntityTaxCodeRel.AccruedOrInvoiced
					CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount 	= LocalEntityTaxCodeRel.TaxInputAccount
					CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount 	= LocalEntityTaxCodeRel.TaxInputDueAccount
					CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint 			= LocalEntityTaxCodeRel.TaxPoint
				else
		            CalculateTax.TaxTable.TaxTableOutput[1].LandCostFlag 		= TaxEntityRel.LandedCost
		            CalculateTax.TaxTable.TaxTableOutput[1].AccrualFlag 		= TaxEntityRel.AccruedOrInvoiced
					CalculateTax.TaxTable.TaxTableOutput[1].TaxInputAccount 	= TaxEntityRel.TaxInputAccount
					CalculateTax.TaxTable.TaxTableOutput[1].TaxInputDueAccount 	= TaxEntityRel.TaxInputDueAccount
					CalculateTax.TaxTable.TaxTableOutput[1].TaxPoint 			= TaxEntityRel.TaxPoint
					
			else 
			if (TaxEntityRel.ThirdParty.TaxEngine)
				LocalEngineTaxAmount = 0
				LocalTaxTableIndex = 1
				for each TaxEngineTaxDetailRel






					if  ((each.TaxClassification < 3
					and   PayablesInvoice.InvoiceAmount.CurrencyAmount > 0
					and   each.TaxAmount > 0)
					or    (each.TaxClassification < 3
					and   PayablesInvoice.InvoiceAmount.CurrencyAmount < 0
					and   each.TaxAmount < 0)
					or   (each.TaxClassification > 2
					and   PayablesInvoice.InvoiceAmount.CurrencyAmount > 0
					and   each.TaxAmount < 0)
					or   (each.TaxClassification > 2
					and   PayablesInvoice.InvoiceAmount.CurrencyAmount < 0
					and   each.TaxAmount > 0))

						CalculateTaxCode = each.TaxCode 

						CalculateTax.TaxTable.TaxTableOutput[LocalTaxTableIndex].TaxCode				= each.TaxCode
						CalculateTax.TaxTable.TaxTableOutput[LocalTaxTableIndex].TaxRate				= each.TaxRate
						CalculateTax.TaxTable.TaxTableOutput[LocalTaxTableIndex].TaxAmount				= each.TaxAmount
						CalculateTax.TaxTable.TaxTableOutput[LocalTaxTableIndex].TaxAmount5DP			= each.TaxAmount
						
						CalculateTax.TaxTable.TaxTableOutput[LocalTaxTableIndex].TaxableAmount			= PayablesInvoiceDetail.TotalDistributionAmount
						CalculateTax.TaxTable.TaxTableOutput[LocalTaxTableIndex].LandCostFlag 			= LocalEntityTaxCodeRel.LandedCost
						CalculateTax.TaxTable.TaxTableOutput[LocalTaxTableIndex].AccrualFlag 			= LocalEntityTaxCodeRel.AccruedOrInvoiced
						CalculateTax.TaxTable.TaxTableOutput[LocalTaxTableIndex].TaxInputAccount 		= LocalEntityTaxCodeRel.TaxInputAccount
						CalculateTax.TaxTable.TaxTableOutput[LocalTaxTableIndex].TaxInputDueAccount 	= LocalEntityTaxCodeRel.TaxInputDueAccount
						CalculateTax.TaxTable.TaxTableOutput[LocalTaxTableIndex].TaxPoint 				= LocalEntityTaxCodeRel.TaxPoint
						
						LocalEngineTaxAmount += each.TaxAmount
						if (LocalEntityTaxCodeRel.LandedCost)
							CalculateTax.OutputTotalLandedTaxAmount5DP									+= each.TaxAmount
						LocalTaxTableIndex += 1

				CalculateTax.OutputTotalTaxAmount 							= LocalEngineTaxAmount
			else
				LocalCalculateTaxExecuted							= CalculateTax.ExecuteCalculateTax  



						
		DoTaxRuleBlock


			if  (!PayablesInvoice.MatchProcessType.ServiceContract)
				POTaxDate						= first SelectedMatchWorkReceiptForPurchaseOrderRel.PurchaseOrderReceipt.ReceivedDate

			initialize WorkTaxAmount
			initialize DetailsTax3dp

			LocalTaxCode = PayablesInvoiceDetail.TaxCode
			if  (PayablesInvoiceDetail.TaxCode.TaxType.TaxTableCode)
				LocalTaxCode = PayablesInvoiceDetail.TaxCode.TaxTableRel.TaxCode1

			if (TaxEntityRel.ThirdParty.Sabrix
			and LocalTaxCode not entered
			and PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode entered)
				LocalTaxCode		= PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode
				DetailsTaxCode		= PurchaseOrderLine.ShipToLocation.PurchaseOrderTaxCode


			initialize PrepaidTaxInventoriedItem
			if  (ItemType.Inventoried
			and   PayablesInvoice.InvoiceType.MatchPrepayment
	        and   PayablesInvoice.MatchPrepaymentMethod.EligibleForPrepay
	        and   PayablesInvoiceDetail.TaxCode entered)

		        if  (PayablesInvoiceDetail.MatchedQuantity = ReceiptLineReceivedQuantity
				and  NonTaxMatchUnitCost = NonTaxEnteredUnitCost
		        and (PurchaseOrderLine.TaxCode not entered
		        or   PurchaseOrderLine.TaxCode = PayablesInvoiceDetail.TaxCode))

		        	PrepaidTaxInventoriedItem = 1  
		        else
		        	PrepaidTaxInventoriedItem = 2  

	                initialize CalculateTax
	                CalculateTax.ProcessLevel = PayablesInvoice.ProcessLevel
	                CalculateTax.VoucherNumber = PayablesInvoice.VoucherNumber
	                CalculateTax.Invoice = PayablesInvoice.Invoice
	                CalculateTax.TaxCode = PayablesInvoiceDetail.TaxCode
	                CalculateTax.InvoiceAmount = PayablesInvoiceDetail.TotalDistributionAmount
	                CalculateTax.TaxableAmount = PayablesInvoiceDetail.TotalDistributionAmount
	                CalculateTax.TaxEntity = Company.GeneralLedgerCompany.AccountingEntity
	                CalculateTax.InvoiceCompany = Company
	                CalculateTax.InvoiceDate = PayablesInvoice.InvoiceDate
	                CalculateTax.PaymentDate = PayablesInvoice.InvoiceDate
	                CalculateTax.TaxDate = PayablesInvoice.InvoiceDate
	                CalculateTax.ProductTaxCategory = PayablesInvoice.TaxCode.ProductTaxCategory
	                CalculateTax.System = "AP"
	                CalculateTax.Function = CalculateTax.Function.CalculateTax
	                LocalCalculateTaxExecuted = CalculateTax.ExecuteCalculateTax
	                I9 = 1
	                while (CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode entered
	                and   I9 <= 8)
	                    if (CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount not entered)
	                        I9 += 1
	                    else
	                        invoke CreateFromMatch PayablesInvoiceDistribution
	                            assign result to NewDistribution
	                            invoked.Company = Company
	                            invoked.PayablesInvoice = PayablesInvoice
	                            invoked.DistributionType = "D"
	                            invoked.PayablesInvoiceDetail		= PayablesInvoiceDetail
	                            invoked.PurchaseOrder				= PurchaseOrder
	                            invoked.PurchaseOrderLine			= PurchaseOrderLine
								invoked.PurchasingContract			= Contract
								invoked.ContractLine				= ContractLine
	                            invoked.TaxCode = CalculateTax.TaxTable.TaxTableOutput[I9].TaxCode
	                            invoked.TaxableAmount = PayablesInvoiceDetail.TotalDistributionAmount * -1
	                            invoked.TaxRate = CalculateTax.TaxTable.TaxTableOutput[I9].TaxRate
	                            invoked.GLTransactionAmount = CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount * -1
	                            invoked.DistributionAmount.CurrencyAmount = CalculateTax.TaxTable.TaxTableOutput[I9].TaxAmount * -1
	                            invoked.Status = 1
	                            invoked.MatchCreated = "D"
								invoked.TransientOriginalPayablesInvoiceTaxAmount = MatchWorkInvoiceRel.TaxAmount

								if  (!CalculateTax.TaxTable.TaxTableOutput[I9].LandCostFlag)
	
									if  (CalculateTax.TaxTable.TaxTableOutput[I9].TaxPoint = "P")
										invoked.GLFinanceCodeBlock				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount
										invoked.DistributionAccount				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputDueAccount
									else
										invoked.GLFinanceCodeBlock				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount
										invoked.DistributionAccount				= CalculateTax.TaxTable.TaxTableOutput[I9].TaxInputAccount
								else
								if  (PayablesInvoiceDetail.TaxCode != PurchaseOrderLine.TaxCode)
									if (!ItemLocationRel.InventoryTracked)								
										invoked.GLFinanceCodeBlock				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
										invoked.DistributionAccount				= ItemLocationRel.GeneralLedgerCategory.CostVarianceAccount
									else
									if  (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
										invoked.GLFinanceCodeBlock				= PayablesInvoice.ProcessLevel.CostVarianceAccount
										invoked.DistributionAccount				= PayablesInvoice.ProcessLevel.CostVarianceAccount
									else
										invoked.GLFinanceCodeBlock				= Company.CostVarianceAccount
										invoked.DistributionAccount				= Company.CostVarianceAccount
								else
									if  (PayablesInvoice.ProcessLevel.ReceiptAccrualAccount entered)
										invoked.GLFinanceCodeBlock				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
										invoked.DistributionAccount				= PayablesInvoice.ProcessLevel.ReceiptAccrualAccount
									else
										invoked.GLFinanceCodeBlock				= Company.ReceiptAccrualAccount
										invoked.DistributionAccount				= Company.ReceiptAccrualAccount






	                        I9 += 1

			if  ((OneSourceGeneric
			or    PayablesInvoice.CallVertexByDocument)
			and  !PayablesInvoiceDetail.InvoiceLineTaxable)
			    NextSentence = true
			else
			if  (PayablesInvoiceDetail.TaxCode not entered
			and  !ItemType.Inventoried)
			    NextSentence = true
			else
			if  (PrepaidTaxInventoriedItem.MatchesReceipt)
				if  (PayablesInvoiceDetail.IsAccruedTax
				and  PayablesInvoiceDetail.TaxAmount not entered
				and !LocalTaxDistribUpdateDone)							
					LocalTaxDistribUpdateDone	= true					
					invoke AccrueTax PayablesInvoiceDetail
			else
			if  (ContractLine entered
			and (!TaxEntityRel.ThirdParty.Sabrix
			or   PayablesInvoiceDetail.TaxCode entered)
			and  TaxDistributionsForContractLineRel exists)

				if  (PayablesInvoice.DoOneSourceAfter
				or   PayablesInvoice.CallVertexByDocument)
					if (PayablesInvoice.TaxAmount not entered
					and PayablesInvoiceDetail.TaxAmount not entered)
						LocalTaxDistribUpdateDone	= true					
						invoke AccrueTax PayablesInvoiceDetail
				else			
				if  (PayablesInvoiceDetail.IsAccruedTax
				and  PayablesInvoiceDetail.TaxAmount not entered
				and !LocalTaxDistribUpdateDone)							
					LocalTaxDistribUpdateDone	= true					
					invoke AccrueTax PayablesInvoiceDetail
			else
			if  (PurchaseOrderLine entered
			and  PrepaidTaxInventoriedItem not entered
			and (!TaxEntityRel.ThirdParty.Sabrix
			or   PayablesInvoiceDetail.TaxCode entered)
			and  TaxDistributionsForPurchaseOrderLineRel exists)

				if  (PayablesInvoice.DoOneSourceAfter
				or   PayablesInvoice.CallVertexByDocument)
					if (PayablesInvoice.TaxAmount not entered
					and PayablesInvoiceDetail.TaxAmount not entered)
						LocalTaxDistribUpdateDone	= true					
						invoke AccrueTax PayablesInvoiceDetail
				else			
				if  (PayablesInvoiceDetail.IsAccruedTax
				and  PayablesInvoiceDetail.TaxAmount not entered
				and  !LocalTaxDistribUpdateDone)						
					LocalTaxDistribUpdateDone	= true					
					invoke AccrueTax PayablesInvoiceDetail
			else
			if  (PayablesInvoiceDetail.MiscellaneousDetail
			and (!TaxEntityRel.ThirdParty.Sabrix
			or   PayablesInvoiceDetail.TaxCode entered)
			and  TaxDistributionsForMiscellaneousDetailRel exists)

				if  (PayablesInvoice.DoOneSourceAfter
				or   PayablesInvoice.CallVertexByDocument)
					if (PayablesInvoice.TaxAmount not entered
					and PayablesInvoiceDetail.TaxAmount not entered)
						LocalTaxDistribUpdateDone	= true					
						invoke AccrueTax PayablesInvoiceDetail
				else			
				if  (PayablesInvoiceDetail.IsAccruedTax
				and  PayablesInvoiceDetail.TaxAmount not entered
				and  !LocalTaxDistribUpdateDone)						
					LocalTaxDistribUpdateDone	= true					
					invoke AccrueTax PayablesInvoiceDetail
			else
			if  (MemoInvoice)

				
				initialize CalculateTax
	
				if  (PayablesInvoiceDetail.TaxCode entered)
					WorkTaxAmount												= PayablesInvoiceDetail.TaxAmount
					CalculateTax.TaxCode										= PayablesInvoiceDetail.TaxCode
					CalculateTax.ProductTaxCategory								= PayablesInvoiceDetail.ProductTaxCategory
					CalculateTax.InvoiceAmount									= PayablesInvoiceDetail.TotalDistributionAmount
					CalculateTax.TaxableAmount									= PayablesInvoiceDetail.TotalDistributionAmount
					if (PayablesInvoiceDetail.TaxableUnitCost entered)
						CalculateTax.InvoiceAmount								= PayablesInvoiceDetail.TaxableUnitCost * PayablesInvoiceDetail.EnteredQuantity
						CalculateTax.TaxableAmount								= PayablesInvoiceDetail.TaxableUnitCost * PayablesInvoiceDetail.EnteredQuantity


	


					CalculateTax.Function			 							= CalculateTax.Function.CalculateTax
					include CallCalculateTax
	
					if  (!PerformedFrom.Contract)
						WorkTaxAmount											= CalculateTax.OutputTotalTaxAmount
						include 991CreateTaxDistrib
					else
					if  (PayablesInvoice.TaxCode.TaxType.CalculatedRate)
						CalculateTax.Function 									= CalculateTax.Function.Inquire
						include CallCalculateTax							 
						if  (!RecordSource.GeneratedByAocSpread
						and  !RecordSource.CreatedByAocSpreadFromPo)
							Sub1 = 1
							while (Sub1 <= 8
							and    CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxCode entered)
								if  (CalculateTax.TaxTable.TaxTableOutput[Sub1].AccrualCode = "I")
									TotalTax3dp									+= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxAmount5DP
									DetailsTax3dp								+= CalculateTax.TaxTable.TaxTableOutput[Sub1].TaxAmount5DP 
            					Sub1 += 1
			else

				if  (PayablesInvoiceDetail.IsAccruedTax
				and  PayablesInvoiceDetail.TaxAmount not entered
				and !LocalTaxDistribUpdateDone)							
					LocalTaxDistribUpdateDone	= true					
					invoke AccrueTax PayablesInvoiceDetail


			







				WorkMatchedNotReceivedQuantity = NewPOLineMatchedNotReceived  
				if (WorkMatchedNotReceivedQuantity < 0)
					initialize WorkMatchedNotReceivedQuantity

					
				if  (ItemType.Inventoried
				and  IsCatchWeight
				and  WorkMatchedNotReceivedQuantity not entered
				and  ThisReceiptLineRel exists
				and PayablesInvoiceDetail.MatchedQuantity > PurchaseOrderLine.OpenToMatchCatchWeightQuantity)
					WorkMatchedNotReceivedQuantity = PayablesInvoiceDetail.MatchedQuantity - PurchaseOrderLine.OpenToMatchCatchWeightQuantity

				else 
				if  (ItemType.Inventoried
				and  !IsCatchWeight
				and  WorkMatchedNotReceivedQuantity not entered
				and  ThisReceiptLineRel exists
				and PayablesInvoiceDetail.MatchedQuantity > PurchaseOrderLine.OpenToMatchQuantity)
					WorkMatchedNotReceivedQuantity = PayablesInvoiceDetail.MatchedQuantity - PurchaseOrderLine.OpenToMatchQuantity

				else
				if  (ItemType.Inventoried
				and  WorkMatchedNotReceivedQuantity not entered
				and  ThisReceiptLineRel not exists)
					WorkMatchedNotReceivedQuantity		= PayablesInvoiceDetail.MatchedQuantity


				LocalCreateTaxDistribs = false 
				if  (!ItemType.Inventoried
				and  !TaxDistributionsForPurchaseOrderLineRel exist)
					LocalCreateTaxDistribs = true 


				if  (ItemType.Inventoried
				or   LocalCreateTaxDistribs 
				or  (!PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC
				and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly))

					if  (PerformedFrom.Contract)
						NonTaxEnteredUnitCost										= PayablesInvoiceDetail.EnteredUnitCost
						NonTaxApprovedUnitCost										= PayablesInvoiceDetail.EnteredUnitCost
						if  (PayablesInvoiceDetail.TaxCode entered
						and  PayablesInvoiceDetail.InvoiceLineTaxable
						and  PayablesInvoice.TaxCode.TaxType.CalculatedRate)
							include 2123GetCalcTaxRate
					else
						include 2122GetLndtaxUcst
						if  (PurchaseOrderLine entered
						and  !PayablesInvoice.MatchProcessType.Service
						and  !PurchaseOrderLine.ServiceCode.Amount)

							NonTaxEnteredUnitCost									= PurchaseOrderLine.EnteredUnitCost

	
					if  (!ItemType.Inventoried
					or   LocalCreateTaxDistribs
					or  (ItemType.Inventoried
					and (PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC
					or   PayablesInvoice.TaxAdjustment.IgnoreProductOnly))
					or  (!PayablesInvoice.TaxAdjustment.IgnoreProductAndAOC
					and  !PayablesInvoice.TaxAdjustment.IgnoreProductOnly))
						WorkTaxUnitCost												= NonTaxEnteredUnitCost
						TemporaryTaxType											= CalculateTax.TaxCode.TaxType 
	
						if  (ItemType.Inventoried
						and  PurchaseOrderLine.TaxCode not entered
						and  DetailsTaxCode != PurchaseOrderLine.TaxCode)
							WorkPostingSwitch											= 2
						else
							WorkPostingSwitch											= 1












						if  (WorkTaxUnitCost entered
						and (ItemType.Inventoried
						or   PurchaseOrderLine.TaxCode not entered 
						or   PayablesInvoiceDetail.TaxCode = PurchaseOrderLine.TaxCode 
						or   TaxEntityRel.ThirdParty.TaxEngine 
						or   OneSourceGeneric) 
						and  MatchedQuantity       >  WorkMatchedNotReceivedQuantity)
							initialize CalculateTax
							CalculateTax.TaxCode									= PurchaseOrderLine.TaxCode 
							CalculateTax.ProductTaxCategory							= PayablesInvoiceDetail.ProductTaxCategory
							LocalAmount												= ((MatchedQuantity - WorkMatchedNotReceivedQuantity) * WorkTaxUnitCost)
							round LocalAmount to nearest DerivedRoundTo 
							CalculateTax.InvoiceAmount = LocalAmount 

							if  (PurchaseOrderLine.TaxCode entered
							and  DetailsTaxCode != PurchaseOrderLine.TaxCode)
								if (ItemType.Inventoried
								and instance count of MatchWorkReceiptLineForPOLineRel < 2
								and DetailsMatchedQuantity > ReceiptLineReceivedQuantity)
									NextSentence = true 
								else 
								if ((PayablesInvoiceDetail.PurchaseOrderReceipt entered and DetailsMatchedQuantity <= ReceiptLineReceivedQuantity)
								or  (PayablesInvoiceDetail.PurchaseOrderReceipt not entered and DetailsMatchedQuantity < PurchaseOrderLine.Quantity)) 

									LocalAmount										= (MatchedQuantity * WorkTaxUnitCost)
									round LocalAmount to nearest DerivedRoundTo 
									CalculateTax.InvoiceAmount = LocalAmount 
								else 

									LocalAmount										= (PurchaseOrderLine.Quantity * WorkTaxUnitCost)
									round LocalAmount to nearest DerivedRoundTo 
									CalculateTax.InvoiceAmount = LocalAmount 
								SkipNonLanded										= true 

							if (CalculateTax.TaxableAmount not entered)
								CalculateTax.TaxableAmount							= CalculateTax.InvoiceAmount
							TotalGoods												+= CalculateTax.InvoiceAmount


							include 2125BuildTaxDetails

							SkipNonLanded											= false
														
						if  (!PerformedFrom.Contract
						and  !TaxEntityRel.ThirdParty.VertexOSeries 
						and  !TaxEntityRel.ThirdParty.TaxEngine)
							if  (ItemType.Inventoried									
							and (PayablesInvoiceDetail.TaxCode.TaxType.TaxTableCode 
							or   PayablesInvoiceDetail.EntityTaxCodeRel.LandedCost))	
								NextSentence = true										
							else														
								UseVariance = true
							include 2124CreateVariance
							UseVariance = false



		1500CreditForRebill  


            OriginalInvoice	= PayablesInvoice.MatchInvoiceReferenceRel.OriginalInvoice

			for each LocalOriginalInvoiceDetailRel
				LocalOriginalInvoiceDetail = each.PayablesInvoiceDetail
				if (PayablesInvoiceDetail.PurchaseOrderReceipt not entered
				or  each.PurchaseOrderReceipt = PayablesInvoiceDetail.PurchaseOrderReceipt)
					end for each

			LocalTaxCode = PayablesInvoiceDetail.TaxCode

			LocalLocation = PayablesInvoiceDetail.Location

			if (PurchaseOrderLine.LastMatchUnitCost entered)
				HasLastMatchUnitCost = true 
			else
				HasLastMatchUnitCost = false 

			if  (ContractLine entered)
				if (!InvoiceDistributionsForContractLineRel exist)
				
					for each CreditForRebillOriginalDetailRel.AllDistributionsRel        
						if (each.TaxCode not entered)
							include 1500CreditForRebillDistribution

				if  (LocalTaxCode entered
				and  !TaxDistributionsForContractLineRel exists)
					for each CreditForRebillOriginalDetailRel.AllDistributionsRel        
						if (each.TaxCode entered)
							include 1500CreditForRebillDistribution

			else
			if   (PurchaseOrderLine entered)
				if (!InvoiceDistributionsForPurchaseOrderLineRel exist)

					for each CreditForRebillOriginalDetailRel.AllDistributionsRel        
						if (each.TaxCode not entered)
							include 1500CreditForRebillDistribution

				if  (LocalTaxCode entered
				and  !TaxDistributionsForPurchaseOrderLineRel exists)

			
					for each CreditForRebillOriginalDetailRel.AllDistributionsRel        
						if (each.TaxCode entered)
							include 1500CreditForRebillDistribution


			if  (PayablesInvoice.MatchProcessType.ServiceContract)

				initialize LocalTotalAddOnChargeAmount 
				LocalTotalNewTaxAmount							= PayablesInvoiceDetail.TaxAmount
	
				for each PayablesInvoiceDetail.PayablesInvoiceAddOnChargeRel
					LocalTotalNewTaxAmount						+= each.TaxAmount 
					LocalTotalAddOnChargeAmount					+= each.TotalBaseAmount 

				NewPOLineMatchedQuantity						= PayablesInvoiceDetail.MatchedQuantity
				NewPOLineMatchedAmount							= PayablesInvoiceDetail.TotalDistributionAmount

				if (LocalTotalNewTaxAmount > 0)
				    LocalTotalNewTaxAmount *= -1
				
				if (LocalTotalAddOnChargeAmount > 0)
				    LocalTotalAddOnChargeAmount *= -1

				if (NewPOLineMatchedAmount > 0)
				    NewPOLineMatchedAmount *= -1

				if (NewPOLineMatchedQuantity > 0)
				    NewPOLineMatchedQuantity *= -1

				invoke UpdateAmountsAndQuantities PayablesInvoiceDetail.ContractLine  
					invoked.InTaxAmount							= LocalTotalNewTaxAmount 
					invoked.InAddOnChargeAmount					= LocalTotalAddOnChargeAmount 
					invoked.InDate								= PayablesInvoice.InvoiceDate
					invoked.InAmount							= NewPOLineMatchedAmount 
					invoked.InQuantity							= NewPOLineMatchedQuantity 
					invoked.InUOM.UnitOfMeasure					= PayablesInvoiceDetail.EnteredUOM
					invoked.InCurrency                          = PayablesInvoice.InvoiceCurrency
					invoked.FromMatch 							= true
					if (PayablesInvoice.ServiceContract.UseRetainage)
						invoked.InInvoiceAmount                 = PayablesInvoiceDetail.TotalDistributionAmount 
			else
			if  (PurchaseOrderLine entered
			and  PurchaseOrderLine.ItemType.Service)


				NewPOLineMatchedQuantity		= PayablesInvoiceDetail.MatchedQuantity 
				NewPOLineMatchedAmount			= PayablesInvoiceDetail.TotalDistributionAmount
						
				if  (PurchaseOrderLine.ServiceCode.Amount
				and  PurchaseOrderLine.MatchedAmount + NewPOLineMatchedAmount > 0)
					initialize NewPOLineMatchedQuantity   
				else
				if (PurchaseOrderLine.ServiceCode.Amount
				and PurchaseOrderLine.MatchedQuantity = 0)
					initialize NewPOLineMatchedQuantity
					
				if (NewPOLineMatchedQuantity > 0)
				    NewPOLineMatchedQuantity *= -1
				
				if (NewPOLineMatchedAmount > 0)
				    NewPOLineMatchedAmount *= -1


				invoke UpdateFromMatch PurchaseOrderLine
					invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
					invoked.TransientBypassOpenPurchaseAmountUpdate		= true
					invoked.LocalUpdateFromMatchMatchedQuantity		= NewPOLineMatchedQuantity
					invoked.LocalUpdateFromMatchMatchedAmount		= NewPOLineMatchedAmount

			else
			if (CreditForRebillOriginalDetailRel.ReceiptInvoiceLinkMatchObjectIDRel exists)		

				for each CreditForRebillOriginalDetailRel.ReceiptInvoiceLinkMatchObjectIDRel



					if (CreditForRebillOriginalDetailRel.SamePOLineDifferentInvoiceLineRel exists
					and PayablesInvoiceDetail.PurchaseOrderReceipt entered 
					and PayablesInvoiceDetail.PurchaseOrderReceipt not = each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt)
						NextSentence = true
					else 
					if  (each.PurchaseOrderReceiptInvoiceLink.AddOnCharge not entered
					and !each.Status.Cancelled
					and  each.Type = "MA")


						invoke UpdateFromMatch PurchaseOrderLine											
							invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
							invoked.TransientBypassOpenPurchaseAmountUpdate		= true
							if (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt entered)
								invoked.LocalUpdateFromMatchMatchedQuantity						= ((each.MatchedQuantity + each.MatchedNotReceivedQuantity + each.ChargebackQuantity + each.WriteOffQuantity) * -1)
								invoked.LocalUpdateFromMatchMatchedAmount						= each.MatchUnitCost
							else
								invoked.LocalUpdateFromMatchMatchedQuantity						= each.MatchedQuantity * -1
								invoked.LocalUpdateFromMatchMatchedAmount						= each.MatchUnitCost
								
							invoked.PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity	= each.MatchedNotReceivedQuantity * -1
							invoked.LocalUpdateFromMatchChargebackQuantity						= each.ChargebackQuantity * -1
							invoked.LocalUpdateFromMatchWriteOffQuantity						= each.WriteOffQuantity * -1
							invoked.LocalUpdateFromMatchMemoQuantity							= each.MemoQuantity * -1
							if ((each.PurchaseOrderLine.MatchedNotReceivedQuantity - each.MatchedNotReceivedQuantity) < 0)
								invoked.PurchaseOrderLineUpdateFromMatchMatchedNotReceivedQuantity	= each.MatchedNotReceivedQuantity * -1
	
							if (IsCatchWeight)
								if (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt entered)
									invoked.LocalFromMatchCatchWeightMatchQuantity				= ((each.CatchWeightMatchQuantity + each.CatchWeightMatchedNotReceivedQuantity + each.CatchWeightChargebackQuantity + each.CatchWeightWriteOffQuantity) * -1)
								else
									invoked.LocalFromMatchCatchWeightMatchQuantity				= each.CatchWeightMatchQuantity * -1
									
								invoked.LocalFromMatchCatchWeightMNRQuantity	= each.CatchWeightMatchedNotReceivedQuantity * -1
								invoked.LocalFromMatchCatchWeightChargebackQuantity				= each.CatchWeightChargebackQuantity * -1
								invoked.LocalFromMatchCatchWeightWriteOffQuantity				= each.CatchWeightWriteOffQuantity * -1
								invoked.LocalFromMatchCatchWeightMemoQuantity					= each.CatchWeightMemoQuantity * -1
								if ((each.PurchaseOrderLine.CatchWeightMatchedNotReceivedQuantity - each.CatchWeightMatchedNotReceivedQuantity) < 0)
									invoked.LocalFromMatchCatchWeightMNRQuantity				= each.CatchWeightMatchedNotReceivedQuantity * -1
	
						if (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine not entered)
							NextSentence = true
						else

							invoke UpdateFromMatch PurchaseOrder  
								invoked.PrmMatchObjID					= MatchWork.OutMatchObjectID
								invoked.PrmVendorBuyMatchedQuantity		= each.MatchedQuantity
								invoked.PrmPOLineVendorBuyUnitCost		= each.PurchaseOrderLine.VendorBuyUnitCost


							if ((PurchaseOrderLine.ItemType.Inventoried
							or  PurchaseOrderLine.ItemType.NonStock)
							and (HasLastMatchUnitCost 
							or   each.IcvUcst entered)
							and MatchWork.MatchLevel.DetailMatch)






								initialize I2
								for each each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.InventoryTransactionLineCostAdjustmentDescendingRel

									WorkCost = each.UnitCost * -1
									WorkQuantity = each.Quantity

									if  (WorkCost entered
									or   WorkQuantity entered)
										invoke UpdateForCostAdjustment each.ItemLocation
											invoked.PrmCostDifference			= WorkCost
											invoked.PrmQuantity					= WorkQuantity
											invoked.PrmDocumentNumber			= each.InventoryCostHistoryForCostAdjustmentRel.InventoryTransaction
											invoked.PrmLineNumber				= each.InventoryCostHistoryForCostAdjustmentRel.InventoryCostHistory.LineNumber
											if (PayablesInvoiceDetail.PayablesInvoiceAddOnChargeRel exists)
												invoked.PrmAddOnChargeDifference	= true
											if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
												invoked.PrmOffsetAccount			= PayablesInvoice.ProcessLevel.CostVarianceAccount
											else
												invoked.PrmOffsetAccount			= Company.CostVarianceAccount

									end for each 










							LocalQuantity							= each.MatchedQuantity

							invoke UpdateFromMatch each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine
								invoked.OpenToMatchQuantity				+= LocalQuantity
								
								if  (LocalQuantity < each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.MatchedQuantity)
									invoked.MatchedQuantity			    -= LocalQuantity
								else
									initialize invoked.MatchedQuantity
									
								initialize invoked.MatchObjectID
								initialize invoked.MatchSequence
								initialize invoked.ArchivedWriteOffQuantity
								initialize invoked.PayablesInvoice



							if  (each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.VendorPriceUOMQuantity entered)
								LocalQuantity			= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.VendorPriceUOMQuantity
								LocalMatchAmount 		= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.OriginalUnitCost * each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.VendorPriceUOMQuantity
							else
								LocalQuantity			= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.EnteredReceivedQuantity
								LocalMatchAmount 		= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.OriginalUnitCost * each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine.EnteredReceivedQuantity


							invoke UpdateFromMatch each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt
								if ((invoked.MatchedAmount - LocalMatchAmount) < 0)
									initialize invoked.MatchedAmount
								else
									invoked.MatchedAmount -= LocalMatchAmount
								if ((invoked.HashQuantity - LocalQuantity) < 0)
									initialize invoked.HashQuantity
								else
									invoked.HashQuantity -= LocalQuantity	
								invoked.Status	= 1

					invoke Create PurchaseOrderReceiptInvoiceLink
						invoked.Company														= Company
						invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt		= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt
						invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine	= each.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine
						invoked.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchWork.OutMatchObjectID

						initialize invoked.PurchaseOrderReceiptInvoiceLink.AddOnCharge
						invoked.Vendor														= PayablesInvoice.Vendor
						invoked.PayablesInvoice												= PayablesInvoice.PayablesInvoice
						invoked.PurchaseOrder												= PurchaseOrder
						invoked.PurchaseOrderLine											= PurchaseOrderLine
						invoked.Item														= Item
						invoked.MatchDetailKey												= MatchDetailKey
						invoked.MatchUnitCost												= MatchUnitCost
						invoked.MatchedQuantity												= each.MatchedQuantity * -1
						invoked.Type														= "MA"
	
						invoked.MatchedNotReceivedQuantity 			= each.MatchedNotReceivedQuantity * -1
						invoked.ChargebackQuantity 					= each.ChargebackQuantity * -1
						invoked.WriteOffQuantity 					= each.WriteOffQuantity * -1
						invoked.IcvTolUcst 							= each.IcvTolUcst
						invoked.IcvTolQty 							= each.IcvTolQty * -1
						invoked.IcvTolAmt 							= each.IcvTolAmt 
						invoked.IcvQty 								= each.IcvQty * -1
						invoked.IcvUcst 							= each.IcvUcst 
						invoked.IcvAmt 								= each.IcvAmt 
						invoked.MatchedNotReceivedAmount 			= each.MatchedNotReceivedAmount
						invoked.MatchedNotReceivedUnitCost 			= each.MatchedNotReceivedUnitCost 
						invoked.MnrTolUcst 							= each.MnrTolUcst 
						invoked.MemoQuantity 						= each.MemoQuantity * -1
						invoked.PoCostUpd 							= each.PoCostUpd * -1
						if (IsCatchWeight)
							invoked.CatchWeightMatchQuantity		= each.CatchWeightMatchQuantity * -1
							invoked.CatchWeightMatchedNotReceivedQuantity	= each.CatchWeightMatchedNotReceivedQuantity * -1
							invoked.CatchWeightChargebackQuantity	= each.CatchWeightChargebackQuantity * -1
							invoked.CatchWeightWriteOffQuantity		= each.CatchWeightWriteOffQuantity * -1
							invoked.CatchWeightMemoQuantity			= each.CatchWeightMemoQuantity * -1

			else


				if ((PurchaseOrderLine.ItemType.Inventoried
				or   PurchaseOrderLine.ItemType.NonStock)
				and HasLastMatchUnitCost 
				and  MatchWork.MatchLevel.DetailMatch
				and  CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine entered
				and  CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.InvoiceDetailMatchObjectIDAndSequenceRel exists)


					initialize I2
					for each CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.InventoryTransactionLineCostAdjustmentDescendingRel

						WorkCost = each.UnitCost * -1
						WorkQuantity = each.Quantity

						if  (WorkCost entered
						or   WorkQuantity entered)
							invoke UpdateForCostAdjustment each.ItemLocation
								invoked.PrmCostDifference			= WorkCost
								invoked.PrmQuantity					= WorkQuantity
								invoked.PrmDocumentNumber			= each.InventoryCostHistoryForCostAdjustmentRel.InventoryTransaction
								invoked.PrmLineNumber				= each.InventoryCostHistoryForCostAdjustmentRel.InventoryCostHistory.LineNumber
								if (PayablesInvoiceDetail.PayablesInvoiceAddOnChargeRel exists)
									invoked.PrmAddOnChargeDifference	= true
								if (PayablesInvoice.ProcessLevel.CostVarianceAccount entered)
									invoked.PrmOffsetAccount			= PayablesInvoice.ProcessLevel.CostVarianceAccount
								else
									invoked.PrmOffsetAccount			= Company.CostVarianceAccount

						end for each 

				if  (MatchWork.MatchLevel.DetailMatch
				and (!PurchaseOrderLine.CostOption.NoCharge
				or   PurchaseOrderLine.AllowZeroCostInvoice))


					invoke UpdateFromMatch PurchaseOrderLine 
						invoked.PurchaseOrderLineUpdateFromUnMatchProcess = true
						invoked.TransientBypassOpenPurchaseAmountUpdate		= true
						if (this instance.PurchaseOrderLine.ServiceCode.Amount)
							invoked.LocalUpdateFromMatchMatchedAmount		= PayablesInvoiceDetail.EnteredUnitCost
						else
							invoked.LocalUpdateFromMatchMatchedQuantity		= PayablesInvoiceDetail.MatchedQuantity
							
					invoke UpdateFromMatch PurchaseOrder  
						invoked.PrmMatchObjID					= MatchWork.OutMatchObjectID
						invoked.PrmVendorBuyMatchedQuantity		= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.MatchedQuantity
						invoked.PrmPOLineVendorBuyUnitCost		= PurchaseOrderLine.VendorBuyUnitCost
				
				if (CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.IntrastatNumber entered)

					IntrastatProcessing.DetailFc						= "C"
					IntrastatProcessing.TaxEntity						= Company.AccountingEntity
					IntrastatProcessing.IntrastatNumber 				= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.IntrastatNumber
					IntrastatProcessing.LineNumber						= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine
					initialize IntrastatProcessing.BaseAmount							
					LocalTrigger										= IntrastatProcessing.MainTrigger
				

				if  (CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine entered)
					if (CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.VendorBuyUOM != CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.VendorPriceUOM
					and CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.CatchWeightQuantity > 0)
						if (CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.OpenToMatchQuantity not entered)
							if (CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.BuyUOMQuantity = CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.MatchedQuantity)
								LocalOpenToMatchQuantity 	+= (CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.MatchedQuantity * (CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity / CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.BuyUOMQuantity))
							else
								LocalOpenToMatchQuantity 	+= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.MatchedQuantity
						else
							if ((CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.PurchaseOrderReceipt.Status.ReadyToArchive
							or   CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.PurchaseOrderReceipt.Status.ArchivedClosed)
							and  CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.BuyUOMQuantity			= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.MatchedQuantity
							and  CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity	= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.MatchedQuantity)
								LocalOpenToMatchQuantity		= (CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.MatchedQuantity *(CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity / CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.BuyUOMQuantity))
							else
								LocalOpenToMatchQuantity 	+= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity
					else
						LocalOpenToMatchQuantity				= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.BuyUOMQuantity
	
	
					invoke UpdateFromMatch CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine
						initialize invoked.MatchedQuantity
						initialize invoked.MatchObjectID
						initialize invoked.MatchSequence
						initialize invoked.Invoice
						initialize invoked.Suffix
						initialize invoked.ArchivedWriteOffQuantity
						invoked.OpenToMatchQuantity				= LocalOpenToMatchQuantity

				

				if  (CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity entered)
					LocalQuantity			= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity
					LocalMatchAmount 		= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.OriginalUnitCost * CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.VendorPriceUOMQuantity
				else
					LocalQuantity			= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.EnteredReceivedQuantity
					LocalMatchAmount 		= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.OriginalUnitCost * CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine.EnteredReceivedQuantity

				invoke UpdateFromMatch CreditForRebillOriginalDetailRel.PurchaseOrderReceipt
					if ((invoked.MatchedAmount - LocalMatchAmount) < 0)
						initialize invoked.MatchedAmount
					else
						invoked.MatchedAmount -= LocalMatchAmount
					if ((invoked.HashQuantity - LocalQuantity) < 0)
						initialize invoked.HashQuantity
					else
						invoked.HashQuantity -= LocalQuantity	
					invoked.Status	= 1

			if (PurchaseOrderLine entered) 
				for each PurchaseOrderReceiptInvoiceLinkLastCostRel
					invoke Delete each 

			invoke FastUpdate PayablesInvoiceDetail
				invoked.Status									= 1
				invoked.MatchObjectID							= MatchWork.OutMatchObjectID
				invoked.MatchSequence							= MatchSequence
				invoked.DistributionDate						= PayablesInvoice.DistributionDate
				invoked.MatchUpdateDate							= current corporate date

				invoked.PurchaseOrderReceipt					= CreditForRebillOriginalDetailRel.PurchaseOrderReceipt
				invoked.PurchaseOrderReceiptLine				= CreditForRebillOriginalDetailRel.PurchaseOrderReceiptLine
			
		1500CreditForRebillDistribution

			invoke CreateFromMatch each
				assign result to NewDistribution
				invoked.Company								= Company
				invoked.PayablesInvoice						= PayablesInvoice
				invoked.Status								= 1
				invoked.UnitAmount							= each.UnitAmount * -1
				invoked.DistributionAmount.CurrencyAmount	= each.DistributionAmount.CurrencyAmount * -1
				invoked.DistributionAmount.KeepRateOnly		= true
				invoked.GLTransactionAmount					= each.DistributionAmount.CurrencyAmount * -1
				invoked.GLFinanceCodeBlock					= each.DistributionAccount
				invoked.DistributionAccount					= each.DistributionAccount

				invoked.DistributionType					= "D"
				invoked.PurchaseOrder						= PurchaseOrder
				invoked.PurchaseOrderLine					= PurchaseOrderLine
				invoked.PurchasingContract					= Contract
				invoked.ContractLine						= ContractLine
				invoked.PayablesInvoiceDetail				= PayablesInvoiceDetail
				invoked.CommentText							= each.CommentText
				invoked.TransientAsset						= each.AssetDetailRel.Asset 
				invoked.TransientAssetTemplate				= each.AssetDetailRel.AssetTemplate
				invoked.Retainage							= each.Retainage
				invoked.AccrualCode 						= each.AccrualCode 

				invoked.BypassUpdatingInvoiceTotals			= true
				invoked.Status								= 1
				invoked.MatchCreated						= "D"
				invoked.TransientOriginalPayablesInvoiceTaxableAmount 	= MatchWorkInvoiceRel.TaxableAmount
				invoked.TransientOriginalPayablesInvoiceTaxAmount		= MatchWorkInvoiceRel.TaxAmount
				invoked.TransientBypassErrorUpdate				= true

				if (LocalTaxCode entered)
					invoked.ProductTaxCategory 				= each.ProductTaxCategory
					invoked.TaxRate							= each.TaxRate
					invoked.TaxableAmount					= each.TaxableAmount * -1
					invoked.TaxCode							= each.TaxCode
					invoked.TransientTaxingJurisdiction		= each.PayablesTaxDetailRel.TaxingJurisdiction  
					invoked.Imposition						= each.Imposition
					
			if  (PayablesInvoice.RetainageAccrualCode entered)
				for each each.PayablesInvoiceRetainageDistributionRel
					invoke Create PayablesInvoiceRetainageDistribution
						fill in fields from each
							except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice
							except invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution
						invoked.PayablesInvoiceRetainageDistribution.PayablesInvoice = PayablesInvoice
						invoked.PayablesInvoiceRetainageDistribution.PayablesInvoiceDistribution = NewDistribution.PayablesInvoiceDistribution
						invoked.PaymentAmount										= each.PaymentAmount * -1
						invoked.RetainageCalculatedAmount							= each.RetainageCalculatedAmount * -1

		
	Actions
		Create is a Create Action
			restricted
			Action Rules
				if (PayablesInvoice.MatchProcessType.ServiceContract)
				    Selected = true
			Exit Rules





		Update is an Update Action
			restricted
			Exit Rules

			
		FastUpdate is an Update Action
			bypass field rules
			restricted
			Entrance Rules
				if (Selected
				and MatchReconQueueSet not entered)
					if (!MatchWorkInvoiceRel.Selected)
						invoke FastUpdate MatchWorkInvoiceRel
							invoked.Selected	= true
							
					if  (MatchWork.MatchReconQueueRel.Previous1 entered)
						MatchReconQueueSet = MatchWork.MatchReconQueueRel.Previous1
						invoke FastUpdate MatchWork.MatchReconQueueRel
							initialize invoked.PendingType							
						invoke Update MatchWork.MatchReconQueueRel.MatchReconQueuePrevious1Rel
			    			initialize invoked.Type
					else
						MatchReconQueueSet = 1
						invoke FastUpdate MatchWork.MatchReconQueueRel
							invoked.Previous1 = 1							

						if  (MatchReconQueueSetRel not exists)
							invoke Create MatchReconQueueSet
				    			invoked.Company				= Company
	    						invoked.PayablesInvoice		= PayablesInvoice
								invoked.MatchReconQueueSet	= MatchReconQueueSet

			Action Rules





		Delete is a Delete Action
			restricted
			bypass relational integrity rules
		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Action Rules



				
		MatchInvoiceDetailSet is a Set Action
			restricted
			Parameters
				PrmCompany						is a MatchCompany
				PrmMatchWork					is a MatchWork
				PrmPayablesInvoice				is a PayablesInvoice
				Difference3Amount				is an InternationalCost
				InvoiceDetailKeyed				is Boolean						
				WithPreviousDetailMatch			is Boolean
				MatchSub1						is Numeric 3					
				MatchSequence
				PrmAutoMatchResult				is an AutoMatchResult
			Set Is  
				PrmCompany
				PrmPayablesInvoice

			Sort Order
	        	MatchWork
    	        Company
        	    PayablesInvoice
        	    PurchaseOrder
        	    PurchaseOrderLine
        	    Contract
        	    ContractLine

			Local Fields
				SumOpenPurchaseAmount			is an InternationalAmount
			
			Instance Selection
				where (Company 			= PrmCompany
				and    MatchWork		= PrmMatchWork
				and    PayablesInvoice	= PrmPayablesInvoice)

			Action Rules
				Empty Set Rules

					if  (PrmPayablesInvoice.AsyncErrorRel exists)
						invoke Purge PrmPayablesInvoice.AsyncErrorRel

					invoke MatchAddOnChargesSet MatchWorkInvoiceAddOnCharge
						on error
							invoke CreateViaParameters PayablesInvoiceError
								invoked.PrmCompany			= PrmCompany
								invoked.PrmInvoice			= PrmPayablesInvoice
								invoked.PrmErrorLevel		= 1		
								invoked.PrmErrorClass		= 2		
								invoked.PrmErrorType		= 58	

						invoked.PrmCompany					= PrmCompany
						invoked.PrmMatchWork 				= PrmMatchWork
						invoked.PrmPayablesInvoice			= PrmPayablesInvoice
						invoked.Difference3Amount			= Difference3Amount
						invoked.InvoiceDetailKeyed			= InvoiceDetailKeyed
						invoked.WithPreviousDetailMatch		= WithPreviousDetailMatch				
						invoked.MatchSub1					= MatchSub1
						invoked.MatchSequence				= LocalMatchSequence
						invoked.PrmAutoMatchResult			= PrmAutoMatchResult
				Set Rules
					Entrance Rules
						if  (PrmPayablesInvoice.AsyncErrorRel exists)
							invoke Purge PrmPayablesInvoice.AsyncErrorRel

					Exit Rules

						if (PrmPayablesInvoice.PayablesInvoiceAddOnChargeRel not exists)
							if  (PrmMatchWork.MatchLevel.InvoiceMatch
							and (PrmMatchWork.MatchRuleResult.AllToOne
							or   PrmMatchWork.MatchRuleResult.AllToAll))
								if  (PrmPayablesInvoice = last PrmMatchWork.MatchWorkInvoiceRel.PayablesInvoice)
									invoke AfterDetailSetAction PrmMatchWork
										invoked.PrmAutoMatchResult	= PrmAutoMatchResult
							else
								invoke AfterDetailSetAction PrmMatchWork
									invoked.PrmAutoMatchResult	= PrmAutoMatchResult
						else 
							invoke MatchAddOnChargesSet MatchWorkInvoiceAddOnCharge
								on error
									invoke CreateViaParameters PayablesInvoiceError
										invoked.PrmCompany			= PrmCompany
										invoked.PrmInvoice			= PrmPayablesInvoice
										invoked.PrmErrorLevel		= 1		
										invoked.PrmErrorClass		= 2		
										invoked.PrmErrorType		= 58	

								invoked.PrmCompany					= PrmCompany
								invoked.PrmMatchWork 				= PrmMatchWork
								invoked.PrmPayablesInvoice			= PrmPayablesInvoice
								invoked.Difference3Amount			= Difference3Amount
								invoked.InvoiceDetailKeyed			= InvoiceDetailKeyed
								invoked.WithPreviousDetailMatch		= WithPreviousDetailMatch				
								invoked.MatchSub1					= MatchSub1
								invoked.MatchSequence				= MatchSequence
								invoked.PrmAutoMatchResult			= PrmAutoMatchResult

				PurchaseOrder Set Rules
					Entrance Rules
						initialize SumOpenPurchaseAmount
					Exit Rules
						if (PurchaseOrder entered)
						   	invoke UpdateHeaderAmountsFromPurchaseOrderLine PurchaseOrder
								invoked.PrmOpenPurchaseAmount		= SumOpenPurchaseAmount
								invoked.PrmFromBatch				= true
					 
				Instance Rules
					if  (PayablesInvoiceDetail.MatchObjectID entered
					and  PayablesInvoiceDetail.MatchObjectID = MatchWork.OutMatchObjectID)
						NextSentence = true
					else
						MatchSequence += 1

						if (PurchaseOrderLine entered)
							SumOpenPurchaseAmount				-= PurchaseOrderLine.OpenPurchaseAmount

						invoke 702DoMainvdtl
							invoked.Difference3Amount			= Difference3Amount
							invoked.InvoiceDetailKeyed			= InvoiceDetailKeyed
							invoked.WithPreviousDetailMatch		= WithPreviousDetailMatch				
							invoked.MatchSub1					= MatchSub1
							invoked.MatchSequence				= MatchSequence
							invoked.PrmAutoMatchResult			= PrmAutoMatchResult

						if (PurchaseOrderLine entered)
							SumOpenPurchaseAmount					+= PurchaseOrderLine.OpenPurchaseAmount

		702DoMainvdtl is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				Difference3Amount						is an InternationalCost
				InvoiceDetailKeyed						is Boolean						
				WithPreviousDetailMatch					is Boolean
				MatchSub1								is Numeric 3					
				MatchSequence
				PrmAutoMatchResult						is an AutoMatchResult
			Action Rules

				TaxRuleBlockCalled = false
				LocalAutoMatchResult = PrmAutoMatchResult
				if  (CreditForRebill)
					include 1500CreditForRebill
				else	
				if  (MatchWork.MatchLevel.InvoiceMatch
				and (MatchWork.MatchRuleResult.AllToOne
				or   MatchWork.MatchRuleResult.AllToAll)
				and  !ItemType.Inventoried 
				and  PayablesInvoice != MatchWork.PayablesInvoice
				and  PurchaseOrderLine.Closed.Yes)
					invoke FastUpdate PayablesInvoiceDetail
						invoked.MatchObjectID						= MatchWork.OutMatchObjectID
						invoked.Status								= 1
						invoked.MatchSequence						= MatchSequence
						invoked.MatchUpdateDate						= current corporate date

					if  (WorkDistributionGroup.Invoice = PayablesInvoice	
					and  PayablesInvoice.MatchProcessType.ServiceContract
					and  ContractLine entered)
						for each PayablesInvoiceDetail.InvoiceDistributionsForContractLineRel
							increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by each.DistributionAmount.CurrencyAmount
					else
						for each PayablesInvoiceDetail.InvoiceDistributionsForPurchaseOrderLineRel

							increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by each.DistributionAmount.CurrencyAmount


						LocalMatchSequence = MatchSequence
						LocalMatchSequence += 1
						invoke Create PurchaseOrderReceiptInvoiceLink
							invoked.Company														= Company
							invoked.PurchaseOrderReceiptInvoiceLink.MatchObjectID				= MatchWork.OutMatchObjectID
							invoked.PurchaseOrderReceiptInvoiceLink.MatchSequence				= LocalMatchSequence
							initialize invoked.PurchaseOrderReceiptInvoiceLink.AddOnCharge
							invoked.Vendor														= PayablesInvoice.Vendor
							invoked.PayablesInvoice												= PayablesInvoice.PayablesInvoice
							invoked.PurchaseOrder												= PurchaseOrder
							invoked.PurchaseOrderLine											= PurchaseOrderLine
							invoked.Item														= Item
							invoked.MatchDetailKey												= MatchDetailKey
							invoked.MatchUnitCost												= MatchUnitCost
							invoked.MatchedQuantity												= PayablesInvoiceDetail.MatchedQuantity 
							invoked.Type														= "MA"
							invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceipt		= PayablesInvoiceDetail.PurchaseOrderReceipt
							invoked.PurchaseOrderReceiptInvoiceLink.PurchaseOrderReceiptLine	= PayablesInvoiceDetail.PurchaseOrderReceiptLine

						invoke UpdateFromMatch PayablesInvoiceDetail.PurchaseOrderReceiptLine
							invoked.MatchObjectID												= MatchWork.OutMatchObjectID
							invoked.MatchSequence												= LocalMatchSequence
							invoked.MatchedQuantity												+= PayablesInvoiceDetail.MatchedQuantity
							invoked.OpenToMatchQuantity											-= PayablesInvoiceDetail.MatchedQuantity

				else	
				if  (MatchWork.MatchLevel.InvoiceMatch
				and  InternalDetailsExist
				and  !RecordSource.InternalMatchDetails)
					if (!LocalSumDistribUpdateDone							
					and PendingDistributions)								
						LocalSumDistribUpdateDone			= true			
						for each InvoiceDistributionsForPurchaseOrderLineRel

							increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by each.DistributionAmount.CurrencyAmount

					NextSentence = true
				else


					include 733TolAccount
				
					InvoiceMatchedNotReceived					= false
					UpdateQuantity								= false
					PendingDistributions						= false
		
					DetailsTaxCode								= PayablesInvoiceDetail.TaxCode
					DetailsEnteredUnitCost						= PayablesInvoiceDetail.EnteredUnitCost
					DetailsEnteredQuantity						= PayablesInvoiceDetail.EnteredQuantity

					DetailsMatchedQuantity						= MatchedQuantity 
					DetailsVBuyMatchedQuantity					= PayablesInvoiceDetail.BuyUOMMatchedQuantity
			        DetailsBuyUOMMatchedQuantity       			= PayablesInvoiceDetail.BuyUOMMatchedQuantity
					DetailsInvoiceType							= PayablesInvoice.InvoiceType			
					WorkDistributionGroup.Invoice				= PayablesInvoice
					DetailsSequenceNumber						= PayablesInvoiceDetail.PayablesInvoiceDetail
					initialize DetailsAddOnCharge
		
					initialize ExcessQuantity				
					initialize CatchWeightExcessQuantity

					WorkReceiptConversionRate			= PurchaseOrder.ReceiptCurrencyConversionRate
					if  (WorkReceiptConversionRate not entered)
						WorkReceiptConversionRate		= PurchaseOrder.EnteredCurrencyConversionRate
					if  (WorkReceiptConversionRate not entered)
						WorkReceiptConversionRate		= 1
						
					if (InvoiceCurrencyExchangeRate not entered)
						InvoiceCurrencyExchangeRate = InvoiceCurrencyExchangeRate
					else
						InvoiceCurrencyExchangeRate = 1


		
					initialize ServiceLineChargebackAmount
					initialize ServiceLineChargebackQuantity
					initialize CostUnder
					initialize CostOver
					initialize QuantityUnder
					initialize QuantityOver

		






		
					if  (PayablesInvoice.MatchProcessType.ServiceContract
					and  ContractLine entered
					and  InvoiceDistributionsForContractLineRel exists)
						PendingDistributions								= true
					else
					if (PurchaseOrderLine entered
					and InvoiceDistributionsForPurchaseOrderLineRel exists)
						PendingDistributions								= true
		
					if  (PurchaseOrderLine entered
					and  PurchaseOrderLine.MatchedQuantity entered)
						UpdateQuantity							= true
		
					DistributionDetailMatchAmount				= MatchAmount
					RemainingQuantity							= MatchedQuantity
					if (IsCatchWeight)
					    RemainingQuantity						= BuyUOMMatchedQuantity 


					VBuyRemainingQuantity						= DetailsVBuyMatchedQuantity

					VBuyCatchWeightRemainingQuantity 			= DetailsMatchedQuantity  


					if  (LineDistributionHasAmount)
						SkipPostings							= true
					else
						SkipPostings							= false
						

	
					initialize ThisReceipt
					initialize ThisReceiptLine
					initialize ThisPurchaseOrderLine

					if  (PayablesInvoiceDetail.PurchaseOrderReceipt entered
					and  PayablesInvoiceDetail.EnteredQuantity > PayablesInvoiceDetail.PurchaseOrderReceiptLine.EnteredReceivedQuantity
					and  MatchWork.MatchRuleResult.OneToAll
					and  MatchWorkReceiptLineRel exists
					and  MatchWorkReceiptLineRel.AnotherSelectedMatchWorkReceiptLineRel exists)

						invoke FastUpdate PayablesInvoiceDetail
							initialize invoked.PurchaseOrderReceipt
							initialize invoked.PurchaseOrderReceiptLine
	
					else
					if  (PayablesInvoiceDetail.PurchaseOrderReceipt entered	
					and  MatchWorkReceiptLineRel exists					
					and  !MatchWorkReceiptLineRel.Selected 				
					and  MatchWorkReceiptLineRel.AnotherSelectedMatchWorkReceiptLineRel exists) 
						invoke FastUpdate PayablesInvoiceDetail							
							initialize invoked.PurchaseOrderReceipt		
							initialize invoked.PurchaseOrderReceiptLine	


					if  (PayablesInvoiceDetail.PurchaseOrderReceipt entered
					and (MatchWorkReceiptLineRel exists
					or   !MemoInvoice))

						if (MatchWorkReceiptLineRel exists)
							ThisReceipt						= PayablesInvoiceDetail.PurchaseOrderReceipt
							ThisReceiptLine					= PayablesInvoiceDetail.PurchaseOrderReceiptLine
							ThisPurchaseOrderLine			= PurchaseOrderLine
							include 844FindMatprlwrkRecord
							if  (ThisReceiptLineRel exists)
								include 703DoProduct
						else
						if  (MatchWork.MatchLevel.InvoiceMatch
						and  MatchWork.ProcessMode.Reconciliation
						and  !OverrideDetail
						and  !ItemType.Service)
							TotalMatchedQuantity				= DetailsMatchedQuantity
					else						
						if  (!MatchWork.MatchRuleResult.OneToAll
						and   MatchWorkReceiptLineForPOLineRel exists)

							for each MatchWorkReceiptLineForPOLineRel
								if (each.Selected)
									ThisReceipt						= each.PurchaseOrderReceipt
									ThisReceiptLine					= each.PurchaseOrderReceiptLine
									ThisPurchaseOrderLine			= each.PurchaseOrderLine

										
									include 844FindMatprlwrkRecord
									if  (ThisReceiptLineRel exists)
										include 703DoProduct

	
									if  ((MatchWork.ProcessMode.Reconciliation
									and   TotalMatchedQuantity < DetailsMatchedQuantity
									and  !ItemType.Service)
									or   (MatchWork.MatchRuleType.OneToAll
									and   TotalMatchedQuantity < DetailsMatchedQuantity
									and  !ItemType.Service))
										NextSentence = true
									else

										end for each
						else
						if (MatchWorkReceiptLineForPORel exists)

							for each MatchWorkReceiptLineForPORel
								if (each.Selected)
									ThisReceipt						= each.PurchaseOrderReceipt
									ThisReceiptLine					= each.PurchaseOrderReceiptLine
									ThisPurchaseOrderLine			= each.PurchaseOrderLine

										
									include 844FindMatprlwrkRecord
									if  (ThisReceiptLineRel exists)
										include 703DoProduct

	
									if  ((MatchWork.ProcessMode.Reconciliation
									and   TotalMatchedQuantity < DetailsMatchedQuantity
									and  !ItemType.Service)
									or   (MatchWork.MatchRuleType.OneToAll
									and   TotalMatchedQuantity < DetailsMatchedQuantity
									and  !ItemType.Service))
										NextSentence = true
									else

										end for each
						else
						if (MatchWork.MultiplePurchaseOrders
						and MatchWorkReceiptLineForMDKRel exists)

							for each MatchWorkReceiptLineForMDKRel
								if (each.Selected)
									ThisReceipt						= each.PurchaseOrderReceipt
									ThisReceiptLine					= each.PurchaseOrderReceiptLine
									ThisPurchaseOrderLine			= each.PurchaseOrderLine

										
									include 844FindMatprlwrkRecord
									if  (ThisReceiptLineRel exists)
										include 703DoProduct

	
									if  ((MatchWork.ProcessMode.Reconciliation
									and   TotalMatchedQuantity < DetailsMatchedQuantity
									and  !ItemType.Service)
									or   (MatchWork.MatchRuleType.OneToAll
									and   TotalMatchedQuantity < DetailsMatchedQuantity
									and  !ItemType.Service))
										NextSentence = true
									else

										end for each
						else
						if  (MatchWork.MatchLevel.InvoiceMatch
						and  MatchWork.ProcessMode.Reconciliation
						and  !OverrideDetail
						and  !ItemType.Service)


							if (!LocalSumDistribUpdateDone							
							and PendingDistributions)									
								LocalSumDistribUpdateDone			= true			
								for each InvoiceDistributionsForPurchaseOrderLineRel

									increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by each.DistributionAmount.CurrencyAmount

	
					if  (TotalMatchedQuantity not entered)

						include 703DoProduct
						
					if  (SkipPostings)
						include 719aPostFullInvoiceLine
		
					if  (MatchWork.ProcessMode.Reconciliation
					and  MatchWork.MatchLevel.DetailMatch
					and  !DoChargeback
					and  !MatchWork.PayablesInvoice.InvoiceType.MatchPrepayment
					and  Company.ReconciliationOverTolerance != "N")




			
						if  (Company.ReconciliationRuleOrder entered)
							I2												= Company.ReconciliationRuleOrder
						else
							I2 												= 1
							while (I2 <= 6 
							and   !MatchWork.MatchRule.MatchRuleToleranceArray.MatchRuleToleranceGroup[I2].InvoiceMatchLevel.DetailMatch)
								I2 += 1 

						if  (I2 <= 6)
							initialize MessageType



							
				      		if  (IsCatchWeight
							and  BuyUOMMatchedQuantity > ThisReceiptLineRel.MatchedQuantity)
								include 958CheckOverQty
								if  (CreateMessage)
									MessageSubType							= "O"
									MessageType								= "Q"
									MessageStatus							= 1
									Approved								= "M"
									include 955FormatCommonMessage
									QuantityOver							= true
							else
   							if  (!PurchaseOrderLine exists
							or  (NewPOLineMatchedNotReceived entered
							and  NewPOLineMatchedNotReceived				= MessageVendorPriceMatchQuantity
							and  MatchedQuantity 	= MessageVendorPriceMatchQuantity)
							or  (NewPOLineWriteoffQuantity entered
							and  NewPOLineWriteoffQuantity = MessageVendorPriceMatchQuantity
							and  MatchedQuantity    = MessageVendorPriceMatchQuantity))
								CreateMessage								= true
								initialize MessageSubType
								MessageType									= "NR"
								MessageStatus								= 1
								Approved									= "M"
								include 955FormatCommonMessage
							else
				            if  (!IsCatchWeight
				            and   PayablesInvoiceDetail.EnteredUOM != PurchaseOrderLine.EnteredBuyUOM
				            and   PurchaseOrderLine.VendorPriceUOM != PurchaseOrderLine.EnteredBuyUOM)
								if  (EnteredQuantity > MessageVendorPriceMatchQuantity
								and  QuantityOver not entered)
									include 958CheckOverQty
									if  (CreateMessage)
										MessageSubType							= "O"
										MessageType								= "Q"
										MessageStatus							= 1
										Approved								= "M"
										include 955FormatCommonMessage
										QuantityOver							= true
							else
							if  (MatchedQuantity > MessageVendorPriceMatchQuantity
							and  QuantityOver not entered)
								include 958CheckOverQty
								if  (CreateMessage)
									MessageSubType							= "O"
									MessageType								= "Q"
									MessageStatus							= 1
									Approved								= "M"
									include 955FormatCommonMessage
									QuantityOver							= true
						
					if  (MatchWork.MatchLevel.DetailMatch
					and  ItemType.Inventoried
					and  DetailsTaxCode entered
					and  PayablesInvoiceDetail.InvoiceLineTaxable)
						include 787WriteNegAccApdistrib
		





		
					if  ((!OverrideDetail
					or    !RecordSource.CreatedWithinMatch
					or    PayablesInvoice.InvoiceType.CreditMemo)
					and   (!MemoInvoice
					or     !ItemType.Inventoried)
					and   (!RecordSource.InternalMatchDetails))
					




						invoke FastUpdate PayablesInvoiceDetail
							invoked.Status									= 1
							invoked.MatchObjectID							= MatchWork.OutMatchObjectID
							invoked.MatchSequence							= MatchSequence
							invoked.DistributionDate						= PayablesInvoice.DistributionDate
							invoked.MatchUpdateDate							= current corporate date
							invoked.ExcessQuantityProcess					= ProcessMatchExcess  
			
							if  (InvoiceMatchedNotReceived)
								initialize invoked.PurchaseOrderReceipt
								if  (PurchaseOrderLine not entered)
									initialize invoked.PurchaseOrderReceiptLine
								else
									invoked.PurchaseOrderReceiptLine		= ThisReceiptLine
							else
								invoked.PurchaseOrderReceipt				= ThisReceipt
								invoked.PurchaseOrderReceiptLine			= ThisReceiptLine
								if (ThisReceiptLineRel exists
								and ThisReceiptLineRel.ShipToLocation != invoked.Location)
								    invoked.Location = ThisReceiptLineRel.ShipToLocation







		DoInvoiceDistributionsForPurchaseOrderLine is an Instance Action
			restricted
			Parameters
				PrmInvoice						is like PayablesInvoice
				PrmDistributionAmount 			is an InternationalAmount
				PrmDistributionUnitCost 		is like UnitCost
				PrmTaxableAmount 				is an InternationalAmount
				PrmPreviousQuantity 			is like Quantity
				PrmTaxCode						is like TaxCode
				PrmTaxType						is AlphaUpper size 1
				PrmTaxRate                      is a ChrgRate
				PrmImposition					is a VertexImpositionType
				PrmProductTaxCategory			is like ProductTaxCategory
				TaxAccount						is a FinanceCodeBlock
			Action Rules

				SaveUnmatchedQuantity									= MatchedQuantity


				initialize WorkDistributionGroup
				WorkDistributionGroup.FinanceEnterpriseGroup 			= Company.FinanceEnterpriseGroup
				WorkDistributionGroup.Company							= Company
				if (PrmInvoice entered)
					WorkDistributionGroup.Invoice						= PrmInvoice
				else
					WorkDistributionGroup.Invoice						= PayablesInvoice
				WorkDistributionGroup.PurchaseOrder						= PurchaseOrder
				WorkDistributionGroup.PurchaseOrderLine					= PurchaseOrderLine
				WorkDistributionGroup.PayablesInvoiceDetail				= PayablesInvoiceDetail
				WorkDistributionGroup.MatchedQuantity					= MatchedQuantity
				WorkDistributionGroup.TaxCode							= PrmTaxCode
				WorkDistributionGroup.TaxType							= PrmTaxType
				WorkDistributionGroup.TaxRate							= PrmTaxRate
				WorkDistributionGroup.Imposition						= PrmImposition
				WorkDistributionGroup.ProductTaxCategory				= PrmProductTaxCategory

				initialize WorkDistributionGroup.LandedCost
				RemainingDistAmount										= PrmDistributionAmount

				for each InvoiceDistributionsForPurchaseOrderLineRel
					WorkPercent											= (each.DistributionAmount.CurrencyAmount / PayablesInvoiceDetail.TotalDistributionAmount)

					WorkDistributionGroup.Amount						= PrmDistributionAmount * WorkPercent
					round WorkDistributionGroup.Amount to nearest DerivedRoundTo
					WorkDistributionGroup.TaxableAmount					= PrmTaxableAmount * WorkPercent 
       				WorkDistributionGroup.OriginalDistribution			= each.OriginalDistribution
					
					if  (WorkDistributionGroup.Amount entered
					or  (PrmTaxCode entered
					and  PayablesInvoiceDetail.TaxAmount entered
					and  TaxEntityRel.ThirdParty.VertexOSeries))

						WorkDistributionGroup.UnitAmount				= MatchedQuantity * WorkPercent 
		
						if  (WorkPercent = 100%)
							WorkDistributionGroup.ItemQuantity			= PurchaseOrderLine.Quantity
						else
							WorkDistributionGroup.ItemQuantity			= MatchedQuantity * WorkPercent 
							
						RemainingDistAmount  							-= WorkDistributionGroup.Amount
		
						if  (PrmTaxCode entered
						and  TaxAccount entered)
							WorkDistributionGroup.Account				= TaxAccount
						else												
							WorkDistributionGroup.Account				= each.DistributionAccount
						WorkDistributionGroup.Asset						= each.AssetDetailRel.Asset
						WorkDistributionGroup.AssetTemplate				= each.AssetDetailRel.AssetTemplate
		
						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup			= WorkDistributionGroup
					
						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount


					if  (RemainingDistAmount <= 0)
						end for each

				if  (RemainingDistAmount entered)

					initialize WorkDistributionGroup.TaxableAmount
					initialize WorkDistributionGroup.UnitAmount
					initialize WorkDistributionGroup.ItemQuantity
					WorkDistributionGroup.Amount	= RemainingDistAmount
					invoke CreateDistribution MatchWork
						invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

					if (DetailsInvoiceType = "C"
					and  !MemoInvoice)
						increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

					else

						increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount


		DoInvoiceDistributionsForContractLine is an Instance Action
			restricted
			Parameters
				PrmInvoice						is like PayablesInvoice
				PrmDistributionAmount 			is an InternationalAmount
				PrmDistributionUnitCost 		is like UnitCost
				PrmTaxableAmount 				is an InternationalAmount
				PrmImposition					is a VertexImpositionType
				PrmPreviousQuantity 			is like Quantity
				PrmTaxCode						is like TaxCode
				PrmTaxType						is AlphaUpper size 1
				PrmTaxRate                      is a ChrgRate
				PrmProductTaxCategory			is like ProductTaxCategory
				TaxAccount						is a FinanceCodeBlock
			Action Rules

				SaveUnmatchedQuantity									= MatchedQuantity


				initialize WorkDistributionGroup
				WorkDistributionGroup.FinanceEnterpriseGroup 			= Company.FinanceEnterpriseGroup
				WorkDistributionGroup.Company							= Company
				if (PrmInvoice entered)
					WorkDistributionGroup.Invoice						= PrmInvoice
				else
					WorkDistributionGroup.Invoice						= PayablesInvoice
				WorkDistributionGroup.PurchaseOrder						= PurchaseOrder
				WorkDistributionGroup.PurchaseOrderLine					= PurchaseOrderLine
				WorkDistributionGroup.PayablesInvoiceDetail				= PayablesInvoiceDetail
				WorkDistributionGroup.MatchedQuantity					= MatchedQuantity
				WorkDistributionGroup.TaxCode							= PrmTaxCode
				WorkDistributionGroup.TaxType							= PrmTaxType
				WorkDistributionGroup.TaxRate							= PrmTaxRate
				WorkDistributionGroup.ProductTaxCategory				= PrmProductTaxCategory

				initialize WorkDistributionGroup.LandedCost
				RemainingDistAmount										= PrmDistributionAmount

				for each InvoiceDistributionsForContractLineRel
					WorkPercent											= (each.DistributionAmount.CurrencyAmount / PayablesInvoiceDetail.TotalDistributionAmount)
		
					WorkDistributionGroup.Amount						= PrmDistributionAmount * WorkPercent
					WorkDistributionGroup.TaxableAmount					= PrmTaxableAmount * WorkPercent 
					WorkDistributionGroup.Imposition					= PrmImposition
					
					if  (WorkDistributionGroup.Amount entered
					or  (PrmTaxCode entered
					and  PayablesInvoiceDetail.TaxAmount entered
					and  TaxEntityRel.ThirdParty.VertexOSeries))
						WorkDistributionGroup.UnitAmount				= MatchedQuantity * WorkPercent 
		
						if  (WorkPercent = 100%)
							WorkDistributionGroup.ItemQuantity			= PurchaseOrderLine.Quantity
						else
							WorkDistributionGroup.ItemQuantity			= MatchedQuantity * WorkPercent 
							
						RemainingDistAmount  							-= WorkDistributionGroup.Amount
		
						if  (PrmTaxCode entered
						and  TaxAccount entered)
							WorkDistributionGroup.Account				= TaxAccount
						else												
							WorkDistributionGroup.Account				= each.DistributionAccount
						WorkDistributionGroup.Asset						= each.AssetDetailRel.Asset
						WorkDistributionGroup.AssetTemplate				= each.AssetDetailRel.AssetTemplate
		
						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup			= WorkDistributionGroup
					
						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount



						
					if  (RemainingDistAmount <= 0)
						end for each

				if  (RemainingDistAmount entered)

					initialize WorkDistributionGroup.TaxableAmount
					initialize WorkDistributionGroup.UnitAmount
					initialize WorkDistributionGroup.ItemQuantity
					WorkDistributionGroup.Amount	= RemainingDistAmount
					invoke CreateDistribution MatchWork
						invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

					if (DetailsInvoiceType = "C"
					and  !MemoInvoice)
						increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

					else

						increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount



		DoPOLineDistributions is an Instance Action
			restricted
			Parameters
				PrmInvoice						is like PayablesInvoice
				PrmDistributionAmount 			is an InternationalAmount
				PrmDistributionUnitCost 		is like UnitCost
				PrmTaxableAmount 				is an InternationalAmount
				PrmImposition					is a VertexImpositionType
				PrmPreviousQuantity 			is like Quantity
				PrmTaxCode						is like TaxCode
				PrmTaxType						is AlphaUpper size 1
				PrmTaxRate                      is a ChrgRate
				PrmProductTaxCategory			is like ProductTaxCategory
				TaxAccount						is a FinanceCodeBlock
			Action Rules


				SaveUnmatchedQuantity													= MatchedQuantity

				initialize WorkDistributionGroup
				WorkDistributionGroup.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
				WorkDistributionGroup.Company					= Company
				if (PrmInvoice entered)
					WorkDistributionGroup.Invoice				= PrmInvoice
				else
					WorkDistributionGroup.Invoice				= PayablesInvoice
				WorkDistributionGroup.PurchaseOrder				= PurchaseOrder
				WorkDistributionGroup.PurchaseOrderLine			= PurchaseOrderLine
				WorkDistributionGroup.PayablesInvoiceDetail		= PayablesInvoiceDetail
				WorkDistributionGroup.MatchedQuantity			= MatchedQuantity
				WorkDistributionGroup.TaxCode					= PrmTaxCode
				WorkDistributionGroup.Imposition				= PrmImposition
				WorkDistributionGroup.TaxType					= PrmTaxType
				WorkDistributionGroup.TaxRate					= PrmTaxRate
				WorkDistributionGroup.ProductTaxCategory		= PrmProductTaxCategory

				if (PrmInvoice entered 
				and PrmInvoice not = PayablesInvoice)
					if (MatchedNotReceivedQuantity entered)
						WorkDistributionGroup.UnitAmount 		= WorkChargebackQuantity * -1
					else 
					if (WorkChargebackQuantity entered)
						WorkDistributionGroup.UnitAmount 		= WorkChargebackQuantity
					else 
						WorkDistributionGroup.UnitAmount 		= DetailsMatchedQuantity

				if  (first PurchaseOrderLineDistributionRel.DistributionPercent entered
				or  first PurchaseOrderLineDistributionRel.DistributionQuantity entered)
					for each PurchaseOrderLineDistributionRel
			

						if  (PrmTaxCode entered
						and  TaxAccount entered)
							WorkDistributionGroup.Account						= TaxAccount
						else												
							WorkDistributionGroup.Account						= each.DistributionAccount
						WorkDistributionGroup.Asset								= each.AssetInformation.Asset
						WorkDistributionGroup.AssetTemplate						= each.AssetInformation.AssetTemplate
        				WorkDistributionGroup.OriginalDistribution				= each.PurchaseOrderLineDistribution
		
						initialize WorkDistributionGroup.ItemQuantity
		
						if  (each.DistributionPercent entered)
							WorkDistributionGroup.Amount		= (PrmDistributionAmount * each.DistributionPercent)
							WorkDistributionGroup.TaxableAmount					= (PrmTaxableAmount *  each.DistributionPercent)
							WorkDistributionGroup.ItemQuantity					= SaveUnmatchedQuantity * (each.DistributionPercent)
						else
							WorkDistQuantity													= each.DistributionQuantity
							if  (FirstDistQuantity entered)

								WorkDistQuantity												= FirstDistQuantity
								initialize FirstDistQuantity
								
							if  (WorkDistQuantity > SaveUnmatchedQuantity)

								WorkDistQuantity												= SaveUnmatchedQuantity
			
							SaveUnmatchedQuantity												-= WorkDistQuantity
			
							if  (WorkDistributionGroup.LandedCost
							and  WorkDistributionGroup.AssetTemplate entered)
								WorkDistributionGroup.ItemQuantity				= each.DistributionQuantity
			
							WorkDistributionGroup.Amount		= ((WorkDistQuantity / each.PurchaseOrderLine.DistributionQuantityTotal) * PrmDistributionAmount)
							WorkDistributionGroup.TaxableAmount					= PrmTaxableAmount
							
						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount


				else

					initialize WorkDistributionGroup.LandedCost
					RemainingDistAmount												= PrmDistributionAmount
		
					for each PurchaseOrderLineDistributionRel
						
						WorkPercent													= each.DistributionAmount/PurchaseOrderLine.ExtendedAmount
			
						WorkDistributionGroup.Amount								= PrmDistributionAmount * WorkPercent
						WorkDistributionGroup.TaxableAmount							= PrmTaxableAmount * WorkPercent
						WorkDistributionGroup.Imposition							= PrmImposition
						WorkDistributionGroup.OriginalDistribution					= each.PurchaseOrderLineDistribution
						

							
						if  (WorkDistributionGroup.Amount entered)
							WorkDistributionGroup.UnitAmount						= MatchedQuantity * WorkPercent 
			
							if  (WorkPercent = 100%)
								WorkDistributionGroup.ItemQuantity					= PurchaseOrderLine.Quantity
							else
								WorkDistributionGroup.ItemQuantity					= MatchedQuantity * WorkPercent
								
							RemainingDistAmount  									-= WorkDistributionGroup.Amount
			
							if  (PrmTaxCode entered
							and  TaxAccount entered)
								WorkDistributionGroup.Account						= TaxAccount
							else												
								WorkDistributionGroup.Account						= each.DistributionAccount
							WorkDistributionGroup.Asset								= each.AssetInformation.Asset
							WorkDistributionGroup.AssetTemplate						= each.AssetInformation.AssetTemplate
			
							invoke CreateDistribution MatchWork
								invoked.PrmWorkDistributionGroup					= WorkDistributionGroup
						
							if (DetailsInvoiceType = "C"
							and  !MemoInvoice)
								increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

							else

								increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount





							
						if  (RemainingDistAmount <= 0)
							end for each

					if  (RemainingDistAmount entered)

						initialize WorkDistributionGroup.TaxableAmount
						initialize WorkDistributionGroup.UnitAmount
						initialize WorkDistributionGroup.ItemQuantity
						WorkDistributionGroup.Amount	= RemainingDistAmount
						invoke CreateDistribution MatchWork
							invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

						if (DetailsInvoiceType = "C"
						and  !MemoInvoice)
							increment MatchWork.ChargebackTransactionTotalDistribution by WorkDistributionGroup.Amount

						else

							increment MatchWorkInvoiceRel.TotalMatchDistributionAmount by WorkDistributionGroup.Amount


		DoContractLineDistributions is an Instance Action
			restricted
			Parameters
				PrmInvoice						is like PayablesInvoice
				PrmDistributionAmount 			is an InternationalAmount
				PrmDistributionUnitCost 		is like UnitCost
				PrmTaxableAmount 				is an InternationalAmount
				PrmImposition					is a VertexImpositionType
				PrmPreviousQuantity 			is like Quantity
				PrmTaxCode						is like TaxCode
				PrmTaxType						is AlphaUpper size 1
				PrmTaxRate                      is a ChrgRate
				PrmProductTaxCategory			is like ProductTaxCategory
				TaxAccount						is a FinanceCodeBlock
			Action Rules


				SaveUnmatchedQuantity													= MatchedQuantity

				initialize WorkDistributionGroup
				WorkDistributionGroup.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup
				WorkDistributionGroup.Company					= Company
				if (PrmInvoice entered)
					WorkDistributionGroup.Invoice				= PrmInvoice
				else
					WorkDistributionGroup.Invoice				= PayablesInvoice
				WorkDistributionGroup.PurchaseOrder				= PurchaseOrder
				WorkDistributionGroup.PurchaseOrderLine			= PurchaseOrderLine
				WorkDistributionGroup.PayablesInvoiceDetail		= PayablesInvoiceDetail
				WorkDistributionGroup.MatchedQuantity			= MatchedQuantity
				WorkDistributionGroup.TaxCode					= PrmTaxCode
				WorkDistributionGroup.TaxType					= PrmTaxType
				WorkDistributionGroup.TaxRate					= PrmTaxRate
				WorkDistributionGroup.ProductTaxCategory		= PrmProductTaxCategory

				for each ContractLine.DistributionsRel
			

    				WorkDistributionGroup.OriginalDistribution	= each.ContractLineDistribution

					if  (PrmTaxCode entered
					and  TaxAccount entered)
						WorkDistributionGroup.Account			= TaxAccount
					else												
						WorkDistributionGroup.Account			= each.DistributionAccount
						
					WorkDistributionGroup.Amount				= (PrmDistributionAmount * each.Percent)
					WorkDistributionGroup.TaxableAmount			= (PrmTaxableAmount *  each.Percent)
					WorkDistributionGroup.Imposition			= PrmImposition
					WorkDistributionGroup.ItemQuantity			= SaveUnmatchedQuantity * (each.Percent)
					invoke CreateDistribution MatchWork
						invoked.PrmWorkDistributionGroup		= WorkDistributionGroup

		SelectRecordForRecon is an Instance Action
			valid when (!Selected)
			default label is "Select"
			Entrance Rules
				if (MatchReconQueue.SmartReconUIV2)
					if (MatchWorkReceiptItemRel exists
					and not SelectedReceiptLineRel exists)
						confirmation required 
							"NoReceiptLinesHaveBeenSelected;ThisActionWillSelectAll.Continue?"
			Action Rules
				Selected = true
				SortSelect = 1
				invoke InitializeSortNumber SortedMatchWorkReceiptLinesRel 
				invoke SetSortNumber MatchWorkReceiptLinesRel

				if (MatchReconQueue.SmartReconUIV2)
					if (MatchWorkReceiptItemRel exists
					and not SelectedReceiptLineRel exists)
						invoke SelectRecordForRecon MatchWorkReceiptItemRel
			Exit Rules			
				if (Selected
				and !MatchWorkInvoiceRel.Selected)
					invoke FastUpdate MatchWorkInvoiceRel
						invoked.Selected = true

		UnselectRecordForRecon is an Instance Action
			valid when (Selected)
			default label is "Unselect"
			Action Rules
				Selected = false
				SortSelect = 0
				initialize MatchReconQueueSet

		SelectAllReceiptLines is an Instance Action
			Action Rules 
				invoke SelectRecordForRecon MatchWorkReceiptItemRel

		UnselectAllReceiptLines is an Instance Action
			Action Rules 
				invoke UnselectRecordForRecon MatchWorkReceiptItemRel

		SetChargeback is an Instance Action
			valid when (!FinanceResource.RestrictChargebacks) 
			Parameters
				PrmChargeback			is Boolean
				PrmChargebackReason		is a ProcurementReasonCode
				PrmChargebackReference	is a Reference
			Parameter Rules
				PrmChargeback
					initial value is CreateChargeback
				PrmChargebackReason
					initial value is ChargebackReason
					if (PrmChargeback)
						required
				PrmChargebackReference
					initial value is ChargebackReference
			Action Rules
				CreateChargeback = PrmChargeback
				ChargebackReason = PrmChargebackReason
				ChargebackReference = PrmChargebackReference
				if (PrmChargeback = false)
					initialize ChargebackReason
					initialize ChargebackReference
				
		SelectAll is a Set Action
			restricted 
			default label is "All"
			run in foreground
			Instance Selection
				where (MatchWork = MatchReconQueue.MatchWork
				and    !Selected)

			Action Rules
				Instance Rules
					invoke SelectRecordForRecon

		DeselectAll is a Set Action
			restricted 
			default label is "None"
			run in foreground
			Instance Selection
				where (MatchWork = MatchReconQueue.MatchWork
				and    Selected)

			Action Rules
				Instance Rules
					invoke UnselectRecordForRecon
								





























































































								

































								
								







































								
        
