PricingGroup is a BusinessClass
	owned by po

	prefix is Pric

	Ontology
		symbolic key is PricingGroup

	Patterns

	Persistent Fields
		Description
		PricingGroupType	is Numeric size 2
			States
				Company							value is 1
				InventoryOrRequestingLocation	value is 2
		Active				is Boolean

	Local Fields
		LocalPricingGroup			is like PricingGroup
		LocalContract				is like Contract
		LocalManufacturerContract	is a Contract
		LocalContractGroup          is like ContractGroup 
		LocalLocation               is like InventoryLocation
		LocalRequestingLocation     is like RequestingLocation
		LocalCompany                is like Company

	Derived Fields
		RepresentativeText is a StringField
			type is Text
			default label is "PricingGroup"
			PricingGroup " - " Description

	Conditions
		NoDetails
			restricted
			when (PricingGroupCompanyRel !exists
			and   PricingGroupLocationRel !exists
			and   PricingGroupRequestingLocationRel !exists)

		HasDetails
			restricted
			when (PricingGroupCompanyRel exists
			or    PricingGroupLocationRel exists
			or    PricingGroupRequestingLocationRel exists)

		CompanyPricingGroup
			restricted
			when (PricingGroupType.Company)

		LocationPricingGroup
			restricted
			when (PricingGroupType.InventoryOrRequestingLocation)

		CompaniesExist
			restricted
			when (PricingGroupCompanyRel exists)

		LocationsExist
			restricted
			when (PricingGroupLocationRel exists)

		RequestingLocationsExist
			restricted
			when (PricingGroupRequestingLocationRel exists)

		ParticipantsExist
			restricted
			when (ContractParticipantsRel exists)

		TierMembersExist
			restricted
			when (ContractTierMembersRel exists)

		DistributorMembersExist
			restricted
			when (ContractDistributorPricingMembersRel exists)

		ContractsExist
			restricted
			when (ParticipantsExist
			or    TierMembersExist
			or    DistributorMembersExist)

		BypassRuleForTheseFiles
			restricted
       		when (parentcontext.name = "ContractLineMember")

	Relations

		PricingGroupCompanyRel
			one-to-many relation to InventoryCompany
			Field Mapping uses ByPricingGroup
				related.PricingGroup     = PricingGroup
			Instance Selection
				where (ContractGroup = related.ItemGroup)

		PricingGroupLocationRel
			one-to-many relation to InventoryLocation
			Field Mapping uses ByPricingGroup
				related.PricingGroup     = PricingGroup
			Instance Selection
				where (ContractGroup = related.Company.ItemGroup)

		PricingGroupRequestingLocationRel
			one-to-many relation to RequestingLocation
			Field Mapping uses ByPricingGroup
				related.PricingGroup     = PricingGroup
			Instance Selection
				where (ContractGroup = related.Company.ItemGroup)

		LocalInventoryCompanyRel 
			one-to-one relation to InventoryCompany 
			Field Mapping uses symbolic key 
				related.Company 		= LocalCompany

		LocalPricingGroupRel 
			one-to-one relation to PricingGroup 
			Field Mapping uses symbolic key 
				related.ContractGroup   = ContractGroup
				related.PricingGroup    = LocalPricingGroup	

		ContractLocationRel
			one-to-many relation to ContractAndLineLocation
			Field Mapping uses ByLocationOnly
				related.ContractGroup								= LocalContractGroup
				related.Contract        							= LocalContract
				related.ContractAndLineLocation.Company 			= LocalCompany 
				related.ContractAndLineLocation.Location			= LocalLocation
		ContractRequestingLocationRel
			one-to-many relation to ContractAndLineLocation
			Field Mapping uses ByRequestingLocationOnly
				related.ContractGroup								= LocalContractGroup
				related.Contract        							= LocalContract
				related.ContractAndLineLocation.Company 			= LocalCompany 
				related.ContractAndLineLocation.RequestingLocation 	= LocalRequestingLocation
		ContractParticipantsRel
			one-to-many relation to ContractParticipant
			Field Mapping uses ByPricingGroup
				related.ContractGroup   										= ContractGroup
				related.ContractParticipant.ParticipantLocation.PricingGroup    = PricingGroup
			Instance Selection
				where (!related.Contract.ContractStatus.Closed)

		ContractTierMembersRel
			one-to-many relation to ContractTierMember
			Field Mapping uses ByPricingGroup
				related.ContractGroup   					= ContractGroup
				related.ContractTierMember.PricingGroup    	= PricingGroup
			Instance Selection
				where (!related.Contract.ContractStatus.Closed)

		ContractDistributorPricingMembersRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses ByPricingGroup
				related.ContractGroup   								= ContractGroup
				related.ContractDistributorPricingMember.PricingGroup   = PricingGroup
			Instance Selection
				where (!related.Contract.ContractStatus.Closed)

		ContractParticipantsClinicalRel
			one-to-many relation to ContractParticipant
			Field Mapping uses ByPricingGroup
				related.ContractGroup   										= ContractGroup
				related.ContractParticipant.ParticipantLocation.PricingGroup    = PricingGroup
			Instance Selection
				where (!related.Contract.ContractStatus.Closed
				and     related.Contract.EnableClinicalSystemUseLocations)

		ContractTierMembersClinicalRel
			one-to-many relation to ContractTierMember
			Field Mapping uses ByPricingGroup
				related.ContractGroup   					= ContractGroup
				related.ContractTierMember.PricingGroup    	= PricingGroup
			Instance Selection
				where (!related.Contract.ContractStatus.Closed
				and     related.Contract.EnableClinicalSystemUseLocations)

		ContractDistributorPricingMembersClinicalRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses ByPricingGroup
				related.ContractGroup   								= ContractGroup
				related.ContractDistributorPricingMember.PricingGroup   = PricingGroup
			Instance Selection
				where (!related.Contract.ContractStatus.Closed
				and     related.Contract.EnableClinicalSystemUseLocations)				

		NewContractParticipantsRel
			one-to-many relation to ContractParticipant
			Field Mapping uses ByPricingGroup
				related.ContractGroup   										= ContractGroup
				related.ContractParticipant.ParticipantLocation.PricingGroup    = LocalPricingGroup
				related.Contract 												= LocalContract

		NewContractTierMembersRel
			one-to-many relation to ContractTierMember
			Field Mapping uses ByPricingGroup
				related.ContractGroup   					= ContractGroup
				related.ContractTierMember.PricingGroup    	= LocalPricingGroup
				related.Contract 							= LocalContract

		NewContractDistributorPricingMembersRel
			one-to-many relation to ContractDistributorPricingMember
			Field Mapping uses ByPricingGroup
				related.ContractGroup   								= ContractGroup
				related.ContractDistributorPricingMember.PricingGroup   = LocalPricingGroup
				related.Contract                                        = LocalContract
				related.ContractDistributorPricingMember.ManufacturerContract = LocalManufacturerContract

		ContractGroupEmailTemplate2Rel
			one-to-one relation to ContractGroupEmailTemplate2
			Field Mapping uses symbolic key
				related.ContractGroup     = ContractGroup

		FactSheetRel
			one-to-one relation to SampleDocumentTemplate
			Field Mapping uses symbolic key
				related.SampleDocumentTemplate      = "PricingGroup_ST"

	Field Rules

		Description
			required

		PricingGroupType
			required

		Active
			initial value is true

	Attach Rules
		constraint (Active
		or          BypassRuleForTheseFiles)
			"PricingGroupIsInactive"

	Actions

		Create is a Create Action
			Field Rules
				Active
					default to true

		Update is an Update Action

			Action Rules
				if (PricingGroupType changed)
					constraint (!CompaniesExist and !LocationsExist and !RequestingLocationsExist)
						"CannotChangePricingGroupTypeWhenCompaniesOrLocationsAreAssociatedWithPricingGroup"

		Delete is a Delete Action

			Action Rules
				constraint (!ContractsExist)
					"CannotDelete;PricingGroupIsAssociatedWithAContract;MustSetActiveToFalse"

				for each PricingGroupCompanyRel
					invoke Update each
						invoked.PricingGroup = blank

				for each PricingGroupLocationRel
					invoke Update each
						invoked.PricingGroup = blank

				for each PricingGroupRequestingLocationRel
					invoke Update each
						invoked.PricingGroup = blank

		CreateLocationsForAContract is a Set Action 
		
		CreateLocationsForAContractInstance is an Instance Action 
			restricted 
			Parameters
				ParmProcurementGroup		is a ProcurementGroup
				ParmContract            	is a Contract
				CompanyOption           	is Numeric 1
				LineLevel               	is Boolean 

			Action Rules 
				LocalContractGroup	= ParmProcurementGroup 
				LocalContract       = ParmContract 
				if (LocationsExist)
					for each PricingGroupLocationRel
						LocalCompany  = each.Company
						LocalLocation = each.InventoryLocation
						if (ContractLocationRel !exists)
							invoke Create ContractAndLineLocation
								invoked.ContractGroup 						= ParmProcurementGroup 
								invoked.Contract 							= ParmContract
								invoked.ContractAndLineLocation.Company     = each.Company
								invoked.ContractAndLineLocation.Location	= each.InventoryLocation
								invoked.ClinicalSystemUse                   = true	
								invoked.LineLevel                           = LineLevel								
						else
						if (ContractLocationRel exists
						and ContractLocationRel.ClinicalSystemUse = false)
							invoke Update ContractLocationRel
								invoked.ClinicalSystemUse = true
								invoked.LineLevel         = LineLevel

				if (RequestingLocationsExist
				and ContractGroup.DoNotUseRequestingLocations = false)
					for each PricingGroupRequestingLocationRel
						LocalCompany  = each.Company
						LocalRequestingLocation = each.RequestingLocation
						if (ContractRequestingLocationRel !exists)
							invoke Create ContractAndLineLocation
								invoked.ContractGroup 								= ParmProcurementGroup 
								invoked.Contract 									= ParmContract
								invoked.ContractAndLineLocation.Company     		= each.Company
								invoked.ContractAndLineLocation.RequestingLocation	= each.RequestingLocation
								invoked.ClinicalSystemUse                   		= true	
								invoked.LineLevel                                   = LineLevel 								
						else
						if (ContractRequestingLocationRel exists
						and ContractRequestingLocationRel.ClinicalSystemUse = false)
							invoke Update ContractRequestingLocationRel
								invoked.ClinicalSystemUse = true
								invoked.LineLevel         = LineLevel 

				if (CompaniesExist)
					for each PricingGroupCompanyRel 
						LocalCompany = each.Company
						invoke CreateLocationsForAContractInstance LocalInventoryCompanyRel 
							invoked.ParmContractGroup   		= ParmProcurementGroup
							invoked.ParmContract 				= ParmContract
							invoked.CompanyOption       		= CompanyOption
							invoked.LineLevel           		= LineLevel

		DeleteLocationsForAContract is a Set Action 
			restricted 
			Parameters
				ParmProcurementGroup	is a ProcurementGroup
				ParmContract            is a Contract
				ParmPricingGroup        is a PricingGroup

			Instance Selection
				where (ParmProcurementGroup		= ContractGroup 
				and    ParmPricingGroup     	= PricingGroup)

			Action Rules 
				Instance Rules 
					LocalContractGroup	= ParmProcurementGroup 
					LocalContract       = ParmContract 
					if (LocationsExist)
						for each PricingGroupLocationRel
							LocalCompany  = each.Company
							LocalLocation = each.InventoryLocation
							if (ContractLocationRel exists)
								invoke DeleteClinical ContractLocationRel

					if (RequestingLocationsExist)
						for each PricingGroupRequestingLocationRel
							LocalCompany  			= each.Company
							LocalRequestingLocation = each.RequestingLocation
							if (ContractRequestingLocationRel exists)
								invoke DeleteClinical ContractRequestingLocationRel

					if (CompaniesExist)
						for each PricingGroupCompanyRel 
							invoke DeleteLocationsForAContract InventoryCompany 
								invoked.ParmContractGroup   = ParmProcurementGroup
								invoked.ParmContract 		= ParmContract
								invoked.ParmCompany         = each.Company

		UpdateContractLocations is an Instance Action 
			restricted 
			Action Rules 

				for each ContractParticipantsClinicalRel 
					LocalPricingGroup = PricingGroup 
					invoke CreateLocationsForAContractInstance LocalPricingGroupRel 
						invoked.ParmProcurementGroup = each.ContractGroup 
						invoked.ParmContract         = each.Contract 

				for each ContractTierMembersClinicalRel 
					LocalPricingGroup = PricingGroup
					invoke CreateLocationsForAContractInstance LocalPricingGroupRel 
						invoked.ParmProcurementGroup = each.ContractGroup 
						invoked.ParmContract         = each.Contract 

				for each ContractDistributorPricingMembersClinicalRel 
					LocalPricingGroup = PricingGroup 
					invoke CreateLocationsForAContractInstance LocalPricingGroupRel  
						invoked.ParmProcurementGroup = each.ContractGroup 
						invoked.ParmContract         = each.Contract 

		AddPricingGroupToContracts is an Instance Action
			valid when (ContractsExist)

			Parameters
				ContractPricingGroup     			is a PricingGroup
				InactivatePricingGroup   			is Boolean
				UseValuesFromOriginalPricingGroup 	is Boolean
				ParmAccountingUnit		 			is a FinanceCodeBlockNoAccount
				ParmPurchaseMethod                  is a PurchaseMethod

			Parameter Rules

				ContractPricingGroup
					required
					constraint (ContractPricingGroup.PricingGroupType = PricingGroup.PricingGroupType)
						"CannotAddPricingGroupToContractWithADifferentPricingGroupTypeThanTheOriginalPricingGroup"

			Action Rules

				LocalPricingGroup = ContractPricingGroup

				for each ContractParticipantsRel
					LocalContract = each.Contract
					if (NewContractParticipantsRel !exists)
						invoke CreateFromGroup each
							invoked.ContractGroup        									= ContractGroup
					     	invoked.Contract             									= each.Contract
					     	invoked.ContractParticipant.ParticipantLocation.PricingGroup 	= ContractPricingGroup
					     	if (UseValuesFromOriginalPricingGroup = true)
					     		invoked.AccountingUnit                                      = each.AccountingUnit
					     	else
					     		invoked.AccountingUnit                                      = ParmAccountingUnit

				for each ContractTierMembersRel
					LocalContract = each.Contract
					if (NewContractTierMembersRel !exists)
						if  (each.Contract.ContractStatus.Active
			     		and (((each.PurchaseMethod !entered
			     		and  UseValuesFromOriginalPricingGroup = true)
			     		or   ParmPurchaseMethod !entered
			     		and  UseValuesFromOriginalPricingGroup = false)
			     		or  (!each.Contract.HasDefaultTier
			     		and  UseValuesFromOriginalPricingGroup = false)
			     		or  (UseValuesFromOriginalPricingGroup = true
			     		and  each.Tier !entered)))
			     			invoke TransitionToAmendment Active each.Contract
		     				send email
								to each.Contract.PrimaryContactRel.DerivedEmail
								cc each.Contract.DerivedSecondaryContactEmailAddressList
								from config.DefaultFromEmailAddress
								subject "<ContractGroupEmailTemplate2Rel.FinalPricingGroupContractAmendedSubject>"
								Contents
									"<ContractGroupEmailTemplate2Rel.FinalPricingGroupContractAmendedContent>"
							invoke Create ContractNotificationEmail
								invoked.ContractGroup					= ContractGroup
								invoked.Contract						= each.Contract
								initialize invoked.ContractDeliverable
								initialize invoked.ContractMilestone
								initialize invoked.SentToMilestoneContact
								initialize invoked.SentToDeliverableContact
								invoked.SentToEmailAddress				= each.Contract.PrimaryContactRel.DerivedEmail
								invoked.SentToCc                        = each.Contract.DerivedSecondaryContactEmailAddressList
								invoked.SentFromPrimaryContractContact	= each.Contract.PrimaryContact
								invoked.SentFromEmailAddress			= each.Contract.PrimaryContactRel.DerivedEmail
								invoked.EmailSubjectLine				= ContractGroupEmailTemplate2Rel.FinalPricingGroupContractAmendedSubject
								invoked.EmailContent					= ContractGroupEmailTemplate2Rel.FinalPricingGroupContractAmendedContent
								invoked.NotificationType				= 6
						invoke CreateFromGroup each
							invoked.ContractGroup        					= ContractGroup
					     	invoked.Contract             					= each.Contract
					     	invoked.ContractTierMember.PricingGroup 		= ContractPricingGroup
					     	if (UseValuesFromOriginalPricingGroup = true)
					     		invoked.Tier								= each.Tier
					     		invoked.PurchaseMethod                      = each.PurchaseMethod
					     	else
					     		invoked.PurchaseMethod						= ParmPurchaseMethod
					    if (each.Contract.ContractStatus.Active)
							invoke ReleaseMembers each.Contract

				for each ContractDistributorPricingMembersRel
					LocalContract = each.Contract
					LocalManufacturerContract = each.ContractDistributorPricingMember.ManufacturerContract
					if (NewContractDistributorPricingMembersRel !exists)
						if  (each.Contract.ContractStatus.Active
			     		and (!each.Contract.HasDefaultPricingIdentifier
			     		and  UseValuesFromOriginalPricingGroup = false)
			     		or  (UseValuesFromOriginalPricingGroup = true
			     		and  each.PricingIdentifier !entered))
					    	invoke TransitionToAmendment Active each.Contract
					    	send email
								to each.Contract.PrimaryContactRel.DerivedEmail
								cc each.Contract.DerivedSecondaryContactEmailAddressList

								from config.DefaultFromEmailAddress
								subject "<ContractGroupEmailTemplate2Rel.FinalPricingGroupContractAmendedSubject>"
								Contents
									"<ContractGroupEmailTemplate2Rel.FinalPricingGroupContractAmendedContent>"
							invoke Create ContractNotificationEmail
								invoked.ContractGroup					= ContractGroup
								invoked.Contract						= each.Contract
								initialize invoked.ContractDeliverable
								initialize invoked.ContractMilestone
								initialize invoked.SentToMilestoneContact
								initialize invoked.SentToDeliverableContact
								invoked.SentToEmailAddress				= each.Contract.PrimaryContactRel.DerivedEmail
								invoked.SentToCc                        = each.Contract.DerivedSecondaryContactEmailAddressList
								invoked.SentFromPrimaryContractContact	= each.Contract.PrimaryContact
								invoked.SentFromEmailAddress			= each.Contract.PrimaryContactRel.DerivedEmail
								invoked.EmailSubjectLine				= ContractGroupEmailTemplate2Rel.FinalPricingGroupContractAmendedSubject
								invoked.EmailContent					= ContractGroupEmailTemplate2Rel.FinalPricingGroupContractAmendedContent
								invoked.NotificationType				= 6
						invoke CreateFromGroup each
							invoked.ContractGroup        									= ContractGroup
					     	invoked.Contract             									= each.Contract
					     	invoked.ContractDistributorPricingMember.PricingGroup 			= ContractPricingGroup
					     	invoked.ContractDistributorPricingMember.ManufacturerContract   = each.ContractDistributorPricingMember.ManufacturerContract
					     	invoked.MfgContractTierInfo                                     = each.MfgContractTierInfo
					     	if (UseValuesFromOriginalPricingGroup = true)
								invoked.PricingIdentifier                                   = each.PricingIdentifier
						if (each.Contract.ContractStatus.Active)
							invoke ReleaseMembers each.Contract

				if (InactivatePricingGroup = true)
					Active = false
