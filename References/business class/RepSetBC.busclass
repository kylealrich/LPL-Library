RepSetBC is a BusinessClass
	prefix is RSB
	owned by la
	default label is "ReplicationSetBusinessClass"
	framework type is ReplicationSet
	
	Patterns
		implements LightweightAuditing
		disable AuditIndex
		implements AuditLogEntryActions
	
	Ontology
		symbolic key is RepSetBC
		
	Persistent Fields
		BusinessClass
		ReplicateClassName  			is Alpha size 127

		Condition           			is LPLText	
			is condition for BusinessClass
			disable Auditing when in background
		OldCondition        			is LPLText	
			is condition for BusinessClass
			disable Auditing when in background
		AdditionalCondition           	is LPLText
			is condition for BusinessClass
			disable Auditing when in background	
		OldAdditionalCondition			is LPLText
			is condition for BusinessClass
			disable Auditing when in background
		FillCondition       			is LPLText	
			is condition for BusinessClass
			disable Auditing when in background
		DataToExtract     			is Numeric size 1 
			States
				CurrentData					value is 0
				AuditLogEntries 			value is 1
				FutureEffectiveEntries		value is 2
				AuditAndFutureEntries       value is 3
		LastRegistrationStamp   		is TimeStamp
		IncrementalReplication			is Boolean  
			disable Auditing when in background
		ParentHierarchyLevels			is Numeric size 3
		RestartInformation 				is Text
			disable Auditing
		RestartData 					is Text
			disable Auditing
		DisableIncrementalReplication	is Boolean 
		RegisteredSchema 				is JSONObject
			disable Auditing when in background 
		Delivered 						is Boolean
		BackfillDate					is TimeStamp
		BackfillRestartInformation		is Text
			disable Auditing
		BackfillRestartData 			is Text
			disable Auditing
		ArchiveBackfillToStamp			is TimeStamp 
			default label is "ArchiveBackfillToDate"
		ArchiveBackfillCompleteStamp	is TimeStamp 
			default label is "ArchiveBackfillCompletionDate"
		ArchiveBackfillRestartInformation is Text    
			disable Auditing
		ArchiveBackfillRestartData 		is Text      
			disable Auditing
		OverrideReplicationSetTimeStorageResolution		is Boolean
		TimeStorageResolution			is Numeric size 1
			States
				Seconds				value is 0
				Milliseconds		value is 1
		ColumnarFlattenHierarchy		is Boolean
		NumberOfHierarchyLevels			is Numeric size 3
		AlwaysRebuild					is Boolean
		AlsoRepToColumnar				is Boolean
		UseColumnarVariationPattern     is Boolean
		UseColumnarView                 is Boolean
		    default label is untranslatable
		EnableIndicator					is Boolean
		MultiThreadFullReplications		is Boolean
		MultiThreadNumThreads			is Numeric size 2
			default label is "NumberOfThreads"
		MultiThreadField				is a BusinessField
			context of BusinessClass
        MultiThreadSchemaBuilt          is Boolean
            default label is untranslatable
		Inactive						is Boolean 
		IncrementalIndicatorField		is a BusinessClassIncrementalIndicatorField
		    context of BusinessClass
		ExpectedNumberOfRecords 		is Numeric size 12
		CreateOnly						 is Boolean 
		IgnoreIndicatorOnFullReplication is Boolean 
		ReReplicateOnAnyChange           is Boolean
        ReReplicateBasedOnAdditionalBC   is a BusinessClass
        EnableNChars is Boolean
        	default label is untranslatable
        IncludeSourceEntryAction         is Numeric size 1
            States
                Default value is 0
                False   value is 1
                True    value is 2
		UseTransactionIDForRelatedData is Boolean	
		ValidationInfo is a RepSetBCValidateInfo	
		ArchiveBackfillActionGroupID	is UniqueID
			disable Auditing 
			default label is untranslatable
        CreateBlankDimensionRows        is Boolean
        NonHistoricalChangeOptimizationEligible is Boolean
        	default label is untranslatable
        	protected
        
    Transient Fields
    	UseSQLName 							is Boolean
    	TransExplodeCompoundFields 			is Boolean
    		default label is "ExplodeCompoundFields"
    	TransReplacePeriodsWithUnderscores	is Boolean
    		default label is "ReplacePeriodsWithUnderscores"
	
	Conditions
		SchemaRegistrationRequired
			when (not Inactive and ReplicationSet.ReplicationSchemaDestination entered and LastRegistrationStamp = blank and not ReplicationSet.ExportFormat.COLUMNAR)
			
		RedAlert 
			when (SchemaRegistrationRequired or (not ReplicationSet.RunningInProcess and ReplicationIncomplete) or (not ArchiveBackfillRunningInProcess and ArchiveBackfillIncomplete) or (not Inactive and HasDupeReplicated))
			
		YellowAlert
			when (Inactive or ReplicationSet.InProcess)				

		BusinessClassExists
			when (BusinessClass exists)		
			
		FillConditionRecommended
			when ((Condition entered or AdditionalCondition entered) and IncrementalReplication)
			
		FailedReplicationsExist
			when (IONOutboxQueueFailedRel exists)
			
		IncompleteReplicationsExist
			when (IONOutboxQueueIncompleteRel exists)	
			
		IONOutBoxReplicationsExist
			default label is "IONOutboxReplicationsExist"
			when (IONOutboxQueueRel exist)	

		ReplicationIncomplete
			restricted
			when (not Inactive and RestartInformation entered)
			
		BackfillIncomplete
			restricted
			when (not Inactive and BackfillRestartInformation entered)			
			
		ArchiveBackfillIncomplete
			restricted
			default label is untranslatable
			when (not Inactive and ArchiveBackfillRestartInformation entered)
		
		RelatedReplicatesValid
			restricted
			when (DataToExtract.CurrentData and not DisableIncrementalReplication and not BusinessClass.HasIncrementalReplicationIndicator)

        ShowReRepFields
            restricted
            when (CanEditBaseFields and not DisableIncrementalReplication and not EnableIndicator)

		CanEditBaseFields
			default label is "BaseFieldsCanBeEdited"
			when (not Delivered or DeveloperMode or InternalExecution)
			
		ShowCustomFields
			when (Delivered or RepSetBCClientField set exists)
			
		DisplayClientFields
			default label is untranslatable:"DisplayClientFields"
    		when (RepSetBCClientField set exists)
			
		CanDelete
			default label is untranslatable
			when (CanEditBaseFields and not ReplicationSet.InProcess)	
			
		ReplicateNameRedAlert
			default label is untranslatable
			when (not BusinessClassExists or not IsValidImportName)
			
		AnyDelivered
			restricted
			when (ReplicationSet.AnyDelivered)	

		DisplayBackfill			
			restricted
			when (DataToExtract.CurrentData and HasCreateStamp and HasUpdateStamp and not MultiThreadFullReplications)
				
		CanChangeBackfill
			restricted
			when (DataToExtract.CurrentData and (not IncrementalReplication or DisableIncrementalReplication or not ReplicationSet.LastRefreshStamp entered or BusinessClass.HasIncrementalReplicationIndicator) and HasCreateStamp and HasUpdateStamp)
				
		CanRunBackfill
			restricted
			when (DataToExtract.CurrentData and BackfillDate entered and not Inactive and ((IncrementalReplication and ReplicationSet.LastRefreshStamp entered) or BusinessClass.HasIncrementalReplicationIndicator) and HasCreateStamp and HasUpdateStamp and not HasDupeReplicated)
			
		CanRunArchiveBackfill
			restricted
			when (not Inactive and ArchiveBackfillCompleteStamp not entered and not ColumnarFlattenHierarchy and DerArchiveBackfillStamp entered and not OldCondition entered and not OldAdditionalCondition entered and not FillCondition entered 
			and   ReplicationSet.LastRefreshStamp entered and (IncrementalReplication or BusinessClass.HasIncrementalReplicationIndicator) 
			and   HasCreateStamp and HasUpdateStamp and not HasDupeReplicated and not SynchronizeRecordCountLocked and BusinessClass.ArchivingEnabledForBusinessClass)	
			
		CanFlattenHierarchy
			default label is "FlattenHierarchy"
			when (ReplicationSet.ExportFormat.COLUMNAR and (BusinessClass.ImplementsParentHierarchy	or BusinessClass.ImplementsChildHierarchy))
		
		CanEnableIndicator
			restricted
			when (not DisableIncrementalReplication and BusinessClass.HasIncrementalReplicationIndicator and not ReReplicateOnAnyChange and DataToExtract.CurrentData)
 		
		CanChooseIndicator
			default label is untranslatable:"CanChooseIndicator"
			restricted
			when (EnableIndicator and CanEnableIndicator)
			
		CanMultiThread
			default label is untranslatable
			when (not BackfillDate entered)
	
		ExpectedNumberOfRecordsIsValid
			default label is untranslatable:"ExpectedNumberOfRecordsIsValid"
			restricted
			when (not EnableIndicator and not Inactive and DataToExtract.CurrentData and (IncrementalReplication or DisableIncrementalReplication) and HasUpdateStamp and HasCreateStamp 
			and EnableRecordSync and (not RelatedReplicatesValid or instance count of RepSetBCRelatedReplicate set <= 0))
		
		CanSynchronizeRecordCount
			default label is untranslatable:"CanSynchronizeRecordCount"
			restricted
			when (not ReplicationSet.InProcess and not ReplicationIncomplete and not BackfillIncomplete and not ArchiveBackfillIncomplete and not ArchiveBackfillLocked and ExpectedNumberOfRecordsIsValid and ReplicationSet.LastRefreshStamp entered and not SynchronizeRecordCountLocked)

		CanCreate
			default label is untranslatable:"CanCreate"
			restricted
		    when (not ReplicationSet.InProcess or InternalExecution)

        NotCurrentData
            default label is untranslatable:"NotCurrentData"
            restricted
            when (not DataToExtract.CurrentData)
        
        AnyLocked
        	restricted
        	default label is untranslatable:"AnyLocked"
        	when (ReplicateLoopLocked or ReplicateThreadLocked or SynchronizeRecordCountLocked or ArchiveBackfillLocked)
        	
        CanValidateData
        	default label is untranslatable:"CanValidateData"
        	restricted
        	when (not Inactive and not ReplicationIncomplete and not BackfillIncomplete and not ArchiveBackfillIncomplete and not OldCondition entered and not OldAdditionalCondition entered and not FillCondition entered
        	and   (ValidationInfo.ValidateAllData or ValidationInfo.ValidationDateField.IsField) 
        	and   DataToExtract.CurrentData and not ReplicationSet.InProcess and ReplicationSet.LastRefreshStamp entered and not AnyLocked
        	and  (ReplicationSet.ExportFormat.COLUMNAR 
        	or (((ReplicationSet.ShowDataLakeQueue and not ReplicationSet.DataLakeQueueIncomplete) or (ReplicationSet.ReplicationSchemaDestination.IMS and not IncompleteReplicationsExist))
        	and ReplicationSet.CompassConfigured)) 
        	and   RepSetBCCheckSum set exists) 

		ConditionEditable
			when (not ReplicationSet.InProcess and not ReplicationIncomplete and not ArchiveBackfillIncomplete)
			
		ShowValidationData
        	default label is untranslatable:"ShowValidationData"
        	restricted
        	when (DataToExtract.CurrentData and (ReplicationSet.ExportFormat.COLUMNAR or ((ReplicationSet.ShowDataLakeQueue or ReplicationSet.ReplicationSchemaDestination.IMS) and ReplicationSet.CompassConfigured)))
        	
        ShowValidationCheckSumData
        	default label is untranslatable:"ShowValidationCheckSumData"
        	restricted
        	when (ShowValidationData and ValidationInfo entered) 
        	
        ShowValidationCheckSumHistory
        	default label is untranslatable:"ShowValidationCheckSumData"
        	restricted
        	when (RepSetBCValidationResult set exists) 
        
        CheckSumFieldRequired
        	default label is untranslatable:"CheckSumFieldRequired"
        	restricted
        	when (ShowValidationCheckSumData and not RepSetBCCheckSum set exists) 
        	
        IncludesColumnar 
        	default label is untranslatable:"IncludesColumnar"
        	restricted

        	when (AlsoRepToColumnar or ReplicationSet.ExportFormat.COLUMNAR)

		IncludesDataLake
			default label is untranslatable:"IncludesDataLake"
        	restricted
			when (ReplicationSet.ShowDataLakeQueue or ReplicationSet.ReplicationSchemaDestination.IMS)
        
        IncludeColumnarAndDataLake
        	default label is untranslatable:"IncludeColumnarAndDataLake"
        	restricted
			when (IncludesColumnar and IncludesDataLake)
        	
        ValidtionDisableCondition 
			default label is untranslatable:"DisableCondition"
        	restricted
        	when (ValidationInfo.DisableCondition)
        	
        IncludesBCUniqueID
        	default label is untranslatable
        	restricted
        	when (RepSetBCFieldUidRel exists or RepSetBCClientFieldUidRel exists)
        	
        LastReplicationTimeExists
			when (DerLastRefeshStamp != blank)

		BackfillThroughValid
			when (not CanChangeBackfill and BackfillDate entered)
			
		ArchiveBackfillRunningInProcess
			default label is untranslatable
			restricted			
			when (ArchiveBackfillLocked or ArchiveBackfillActionGroupActive)
			
		ArchiveBackfillActionGroupActive
			default label is "ArchiveBackfillInProcess"
			when ((ArchiveBackfillActionGroupID entered and not first ArchiveBackfillActionGroupRel.ActionGroupSuccessfullyCompleted) or RootArchiveBackfillAsyncActionRequestProcessingRel exists)


		RelatedRepSetsByBCExists
			default label is untranslatable
			when(RelatedRepSetsByBC exists)
			
	Local Fields
		LocalRepSetBusClass				is a BusinessClass					
		LocalRepSetBCField 				is Alpha size 300	
		LocalSchemaValidationType 		is Numeric size 1
			States
				Valid 						value is 0
				MismatchNoInvalidate		value is 1	
				MismatchInvalidate			value is 2
		LocalSchemaIsInvalid			is Boolean
		LocalFieldAdded					is Boolean
		LocalRecordCount				is Numeric size 12
		LocalSegments					is Numeric size 12
		LocalNumberCreated	   			is Numeric size 12
		LocalNumberUpdated				is Numeric size 12
		LocalNumberDeleted				is Numeric size 12
		LocalBackFillUpdateAsDelete		is Numeric size 12 

		LocalStarted 					is TimeStamp
		LocalFinished 					is TimeStamp
		LocalReplicationWarnings		is Text
		LocalThreadNum 					is Numeric size 2
		LocIncrIndicatorField1  		is like BusinessClassIncrementalIndicatorField
		LocIncrIndicatorField2  		is like BusinessClassIncrementalIndicatorField
		LocalColumnarMessage			is Boolean
		LocalHistoryStamp				is TimeStamp
		LocalSkipValidConditionErrorMsg is Boolean
		LocalNonHistChangeOptEligible   is Boolean
		
	Derived Fields
		OrderIsValid is a DerivedField
			type is Boolean
			
			if (not ReplicationSet.ExportFormat.COLUMNAR
			and not RepSetBC.Delivered)
				return true
			else
				return false
		
		DefaultReplicateClassName is a DerivedField
			type is Alpha size 127
			
			restricted
			
			if (ReplicationSet.ExportFormat.COLUMNAR)
			    if (DataToExtract.AuditLogEntries
			    or  DataToExtract.AuditAndFutureEntries
			    or  DataToExtract.FutureEffectiveEntries)
				    return "COLUMNAR_AUDIT_" + BusinessClass

                return "COLUMNAR_" + BusinessClass
			else
			if (ReplicateClassName entered)
				return CleanedReplicateClassName
			else
				return BusinessClass
			
		CleanedReplicateClassName is a NativeField
			type is Alpha size 127
			restricted			
			
		IsValidReplicateClassName is a NativeField	
			type is Boolean
			restricted		

		IsValidImportName is a NativeField
			type is Boolean
			restricted 
			
		ConditionChangedStructure is a NativeField
			type is Boolean
			restricted		
			
		HasUpdateStamp is a NativeField
			type is Boolean
			restricted
			
		HasCreateStamp is a NativeField
			type is Boolean
			restricted			
			
		DeveloperMode is a NativeField
			type is Boolean
			restricted			
			
		HierarchyLevelLimit is a NativeField
			type is Boolean
			restricted		
			
		EnableRecordSync is a NativeField
			type is Boolean
			restricted		
			default label is "RecordSynchronizationEnabled"
			
		SchemaRegistrationIsRequiredMessage is a MessageField
			restricted
			"SchemaRegistrationIsRequiredBeforeReplication"
			
		IncompleteReplicationMessage is a MessageField
			restricted
			"ReplicationIsIncomplete"
			
		DuplicateReplicateClassNamesMessage is a MessageField 
			restricted			
			"DuplicateReplicateClassNamesInOtherSetsExist.CannotProcess."						
			
		RedAlertMessage is a DerivedField	
			type is MessageField
			if (not Inactive and HasDupeReplicated) 
				return DuplicateReplicateClassNamesMessage
			else
			if (SchemaRegistrationRequired)
				return SchemaRegistrationIsRequiredMessage
			else
			if (not ReplicationSet.RunningInProcess and ReplicationIncomplete)
				return IncompleteReplicationMessage
			else
			if (not ArchiveBackfillRunningInProcess and ArchiveBackfillIncomplete)
				return ArchiveBackfillIncompleteMessage
		
			return blank
			
		RepSetBCInactiveMessage is a MessageField 
			restricted
			"Inactive"
		
		ReplicationCurrentlyProcessingMessage is a MessageField 
			restricted			
			"ReplicationSetIsCurrentlyProcessing"
			
		YellowAlertMessage is a DerivedField
			type is MessageField
			if (Inactive) 
				return RepSetBCInactiveMessage
			else
			if (ReplicationSet.InProcess)
				return ReplicationCurrentlyProcessingMessage

			return blank
		
		BusinessClassNoLongerExistsMessage is a MessageField
			restricted
			"BusinessClassNoLongerExists"	

		ImportDoesNotExistmessage is a MessageField
			restricted
			"LocalImportDoesNotExist"
						
		ReplicateNameRedAlertMessage is a DerivedField	
			type is MessageField
			if (not BusinessClassExists)
				return BusinessClassNoLongerExistsMessage
			else
			if (not IsValidImportName)
				return ImportDoesNotExistmessage
			
			return blank

		SchemasMatch is a NativeField			
			type is Boolean
			restricted
			
		SchemaValidMessage is a MessageField
			restricted
			"SchemaIsValid."
			
		SchemaNotRegisteredMessage is a MessageField
			restricted
			"PreviousSchemaHasNotBeenRecorded."	
			
		SchemaMistmatchMessage is a MessageField
			restricted
			"CurrentSchemaDoesNotMatchWhatHasBeenRegistered."	
			
		SchemaMistmatchRegistrationMessage is a MessageField
			restricted
			"CurrentSchemaDoesNotMatchWhatHasBeenRegistered.UpdatedToRequireRegistration."									
				
		ValidateSchemaMessage is a DerivedField		
			type is MessageField	
			restricted
			
			if (RegisteredSchema not entered)
				return SchemaNotRegisteredMessage
			else
			if (LocalSchemaValidationType.MismatchNoInvalidate)
				return SchemaMistmatchMessage
			else
			if (LocalSchemaValidationType.MismatchInvalidate)
				return SchemaMistmatchRegistrationMessage					
				
			return SchemaValidMessage
			
		HasDupeReplicated is a DerivedField 
			type is Boolean
			restricted
			
			HasDupeReplicated = false
			
			for each OtherActiveReplicateClassName
				if (not ReplicationSet.DisableDuplicateReplicateNameCheck
				or  each.ReplicationSet.LastRefreshStamp > ReplicationSet.LastRefreshStamp) 
					HasDupeReplicated = true
					end for each
					
			return HasDupeReplicated
			
		HasDupeSchema is a DerivedField 
			type is Boolean
			restricted
			
			HasDupeSchema = false
			
			for each OtherActiveReplicateClassName
				if (not ReplicationSet.DisableDuplicateReplicateNameCheck
				or  each.LastRegistrationStamp > LastRegistrationStamp
				or  each.ReplicationSet.LastRegistrationStamp > ReplicationSet.LastRegistrationStamp) 
					HasDupeSchema = true
					end for each
						
			return HasDupeSchema
			
		ReplicateLoopLocked is a NativeField
			type is Boolean		

			
		ReplicateThreadLocked is a NativeField
			type is Boolean		
			restricted


			
		SynchronizeRecordCountLocked is a NativeField
			type is Boolean		
			restricted
			default label is untranslatable:"SynchronizeRecordCountLocked"

			
		ArchiveBackfillThreadLocked is a NativeField
			type is Boolean		
			restricted
			default label is untranslatable


			
		ArchiveBackfillLocked is a NativeField
			type is Boolean		
			restricted
			default label is untranslatable

			
		DefaultIndicatorField is a DerivedField
			type is LPLName
			
			if (DisableIncrementalReplication
			or  not EnableIndicator)
				return blank
			
			if (IncrementalIndicatorField entered)
				return IncrementalIndicatorField
				
			initialize LocIncrIndicatorField1
			LocalRepSetBusClass = BusinessClass
			

			for each(BusClsIncr) BusinessClassIncrementalIndicatorFieldRel
				LocIncrIndicatorField2 = each(BusClsIncr).BusinessClassIncrementalIndicatorField 
				
				if (LocIncrIndicatorField1 = blank)
					LocIncrIndicatorField1 = LocIncrIndicatorField2 
				
				for each(RepSetOther) RepSetBCOtherRel
					if (each(RepSetOther).EnableIndicator and not each(RepSetOther).DisableIncrementalReplication)
						if (each(RepSetOther).IncrementalIndicatorField = LocIncrIndicatorField2)
							initialize LocIncrIndicatorField2 
							end for each 
				
				if (LocIncrIndicatorField2 entered)
					return LocIncrIndicatorField2 
			
			return LocIncrIndicatorField1 

		InternalExecution is a NativeField
		    type is Boolean
		    restricted
		    
		InactiveMessage is a MessageField
			restricted
			"ReplicationSetBusinessClassIsInactive"	
			
		BackfillIncompleteMessage is a MessageField
			restricted
			"BackfillRunIsIncomplete"
			
		ArchiveBackfillIncompleteMessage is a MessageField
			restricted
			"ArchiveBackfillRunIsIncomplete"
										
		ReplicationSetNotReplicatedMessage is a MessageField
			restricted
			"ReplicationSetHasNotBeenReplicated"
			
		InvalidTypeForDataLakeValidationMessage is a MessageField
			restricted
			"ReplicationSetDestinationIsNotTheDataLake"	
			
		CheckSumFieldsRequiredMessage is a MessageField
			restricted
			"AtLeastOneCheckSumFieldIsRequired"		
					
		ValidateDataInvalidMessage is a DerivedField		
			type is MessageField	
			restricted
			
			if (Inactive not entered)
				return InactiveMessage
			else
			if (ReplicationIncomplete)
				return IncompleteReplicationMessage
			else
			if (BackfillIncomplete)
				return BackfillIncompleteMessage		
			else
			if (ArchiveBackfillIncomplete) 
				return ArchiveBackfillIncompleteMessage
			else
			if (ReplicationSet.InProcess or AnyLocked or (ReplicationSet.ShowDataLakeQueue and ReplicationSet.DataLakeQueueIncomplete) or (ReplicationSet.ReplicationDataDestination.IMS and IncompleteReplicationsExist))
				return ReplicationCurrentlyProcessingMessage
			else
			if (ReplicationSet.LastRefreshStamp not entered)
				return ReplicationSetNotReplicatedMessage	
			else
			if (not ReplicationSet.ExportFormat.COLUMNAR and not ReplicationSet.ShowDataLakeQueue and not ReplicationSet.ReplicationDataDestination.IMS)

				return InvalidTypeForDataLakeValidationMessage
			else
			if (not RepSetBCCheckSum set exists)
				return CheckSumFieldsRequiredMessage
			
			return ""
		
		ValidationRelatedValue is a DerivedField
			type is Alpha size 300
			restricted
			default label is untranslatable
			return ValidationInfo.ValidationDateField.RelatedValue
			
		ValidationValidateAll is a DerivedField
			type is Boolean
			restricted
			default label is untranslatable
			return ValidationInfo.ValidateAllData
			
		ValidationConditionOverride is a DerivedField
			type is LPLText
        	default label is untranslatable:"ConditionOverride" 
        	restricted
        	return ValidationInfo.ConditionOverride
        	
        ValidCondition is a NativeField
			type is Boolean
			restricted
			default label is untranslatable

			
		ValidOldCondition is a NativeField  
			type is Boolean
			restricted
			default label is untranslatable

			
		ValidAdditionalCondition is a NativeField
			type is Boolean
			restricted
			default label is untranslatable

			
		ValidOldAdditionalCondition is a NativeField 
			type is Boolean
			restricted
			default label is untranslatable


		DerLastRefeshStamp is a DerivedField
			type is TimeStamp
			default label is "LastReplication"
			return ReplicationSet.LastRefreshStamp
			
		ValidationPassedMessage is a MessageField
			restricted
			"ValidationCompletedWithNoDiscrepancies"
			
		ValidationFailedMessage is a MessageField
			restricted
			"ValidationCompletedWithDiscrepancies"

		ReplicationClassInactiveMessage is a MessageField
			"Inactive_-SkippedInReplication"

		FullReplicationMessage is a MessageField
			restricted
			"FullReplication"

		IncrementalReplicationMessage is a MessageField
			restricted
			"IncrementalReplication"

		NextReplicationFullOrIncrementalMessage is a DerivedField
			type is MessageField
			default label is "NextReplication"

			if (DisableIncrementalReplication or not LastReplicationTimeExists)
				return FullReplicationMessage
			else
				return IncrementalReplicationMessage
				
		DerArchiveBackfillStamp is a DerivedField
			type is TimeStamp
			default label is "ArchiveBackfillStamp"
			
			if (ColumnarFlattenHierarchy)
				return blank
				
			if (not BusinessClass.ArchivingEnabledForBusinessClass)
				return blank
				
			if (ArchiveBackfillToStamp entered)
				if (ArchiveBackfillToStamp > ReplicationSet.LastResetToStamp)
					return ArchiveBackfillToStamp
			
			return ReplicationSet.LastResetToStamp
			
		CurrentArchiveBackfillActionGroupID is a NativeField
			type is UniqueID

		DerivedValidationMethod is a DerivedField
			type is Numeric size 1
			if (IncludesColumnar and not AlsoRepToColumnar)
				return 1
			else 
				if(IncludesDataLake)
					return 2	
					
		DerRetroChangeEntriesEnabled is a DerivedField
			type is Boolean
			default label is untranslatable
			if (config(Audting).CreateRetroChangeEntries = "false")
				return false
			return true
			
		DerRetroChangeMessage is a DerivedField
			type is Text 
			default label is untranslatable
			
			if (not DerRetroChangeEntriesEnabled)
				return "Retro Change Log Entry creation disabled"
			else
			if (not NonHistoricalChangeOptimizationEligible)
				return "At lease one replication must be run before non-historical optimization will be allowed"
			
			return blank
					
	Rule Blocks
		ColumnarActiveValidation
			LocalRepSetBusClass = BusinessClass
			if (RepSetBCOtherActiveColumnarRel exists)
				if (not Inactive)
					confirmation required
						"BusinessClassIsActiveInColumnarReplicationSet:<first RepSetBCOtherActiveColumnarRel.ReplicationSet>.ThisRecordWillBeCreatedAsInactive.Continue?"
					Inactive = true
				else
					confirmation required
						"BusinessClassIsActiveInColumnarReplicationSet:<first RepSetBCOtherActiveColumnarRel.ReplicationSet>.Continue?"
						
				LocalColumnarMessage = true
			
			if (RepSetBCOtherAlsoRepsToActiveColumnarRel exists)
				if (not Inactive)
					confirmation required
						"BusinessClassIsActiveInAndUsedAsReplicateToColumnarInReplicationSet:<first RepSetBCOtherAlsoRepsToActiveColumnarRel.ReplicationSet>.ThisRecordWillBeCreatedAsInactive.Continue?"
					Inactive = true
				else
					confirmation required
						"BusinessClassIsActiveInAndUsedAsReplicateToColumnarInReplicationSet:<first RepSetBCOtherAlsoRepsToActiveColumnarRel.ReplicationSet>.Continue?"
						
				LocalColumnarMessage = true	
				

			if (AlsoRepToColumnar and not ReplicationSet.ExportFormat.COLUMNAR
			and (ReplicationSet.ReplicationDataDestination.IMS or ReplicationSet.ReplicationDataDestination.FTP 
			or  (not ReplicationSet.IsMultiTenant and ReplicationSet.ReplicationDataDestination.Directory)
		    or  ReplicationSet.ReplicationDataDestination.ReplicationDataDestinationDataLake.Streaming 
			or  ReplicationSet.ReplicationDataDestination.ReplicationDataDestinationDataLake.Batch))
				confirmation required
    				"SecurityWillBeAppliedToDataBeingReplicated.ThisAlsoWillCauseSecurityToBeAppliedToColumnarData.Continue?"
    				
    	AuditFieldsAddBlock
    		if (not RepSetBCFieldRel exists
			and not RepSetBCClientFieldRel exists)
	  			if (not Delivered 
				or (DeveloperMode 
				or InternalExecution))
		 			invoke Create RepSetBCField
		 				invoked.ReplicationSet 					= ReplicationSet
				  		invoked.RepSetBC         				= RepSetBC
				  		invoked.RelatedValue    				= {FieldId}
				  		invoked.ReplacePeriodsWithUnderscores 	= ReplacePeriodsWithUnderscores
						invoked.SkipSchemaChangeConfirmation	= SkipSchemaChangeConfirmation
						invoked.UseSQLName						= UseSQLName
		 		else
		 			invoke Create RepSetBCClientField
		 				invoked.ReplicationSet 					= ReplicationSet
				  		invoked.RepSetBC         				= RepSetBC
				  		invoked.RelatedValue    				= {FieldId}
				  		invoked.ReplacePeriodsWithUnderscores 	= ReplacePeriodsWithUnderscores
						invoked.SkipSchemaChangeConfirmation	= SkipSchemaChangeConfirmation
						invoked.UseSQLName						= UseSQLName
						
				TotalCount += 1
    		
	Create Rules
		if (ReplicateClassName size > 100
		and ReplicationSet.ReplicationSchemaDestination.IMS)
			confirmation required
				"IMSLimitsBusinessClassReplicateNamesTo100Characters.<ReplicateClassName>WillBeTruncatedTo100CharactersInSchema.Continue?"
				
		if (ReplicationSet.ExportFormat.COLUMNAR)
			include ColumnarActiveValidation

	Delete Rules
		constraint (CanDelete)
			"DeleteNotAllowed"
	
	Field Rules
		BusinessClass
			required
			constraint (not BusinessClass.Deprecated)
				"BusinessClassIsDeprecated"	
				
			constraint (not BusinessClass.HasPersistenceClass)
				"BusinessClassCannotUseAlternatePersistence"
				
			if (Delivered
			and not DeveloperMode
			and not InternalExecution) 
				cannot be changed
					"BusinessClassCannotBeChangedForADeliveredReplicationSetBusinessClass"
			
			if (RepSetBCField set exists
			or 	RepSetBCClientField set exists)
				cannot be changed
					"BusinessClassCannotBeChangedWhenFieldsExist"
			
		ReplicateClassName
			initial value is BusinessClass
			force default to DefaultReplicateClassName
			
			constraint (IsValidReplicateClassName)
				"InvalidReplicateClassName"
				
			constraint (IsValidImportName)
				"LocalImportFor<ReplicateClassName>DoesNotExist"
				
			if (not ReplicateClassName entered) 
				required	
				
			if (Delivered
			and not DeveloperMode
			and not InternalExecution
			and (not ReplicationSet.ExportFormat.COLUMNAR
			or ReplicateClassName != DefaultReplicateClassName))
				cannot be changed
					"ReplicateNameCannotBeChangedForADeliveredReplicationSetBusinessClass"
					
			if (ReplicationSet.ExportFormat.COLUMNAR 
			and ReplicateClassName != DefaultReplicateClassName)
				cannot be changed
					"ReplicateNameCannotBeChangedForAColumnarReplicationSetBusinessClass"
				

			if (action type.Create
			or  ReplicateClassName changed)
				if (not Inactive and OtherActiveReplicateClassName exists)
					confirmation required
						"TheReplicateClassName<ReplicateClassName>IsActiveInReplicationSet<first OtherActiveReplicateClassName.ReplicationSet>.ThisRecordWillBeCreatedAsInactive.AreYouSureYouWantToUseThisName?"
					Inactive = true
				else
				if (not LocalColumnarMessage and OtherReplicateClassName exists) 
					confirmation required
						"TheReplicateClassName<ReplicateClassName>IsAlreadyUsedInReplicationSet<first OtherReplicateClassName.ReplicationSet>.AreYouSureYouWantToUseThisName?"

				
		DataToExtract
			if (Delivered 
			and not DeveloperMode
			and not InternalExecution)
				cannot be changed
					"DataToExtractCannotBeChangedForADeliveredReplicationSetBusinessClass"
			
			if (DataToExtract.AuditLogEntries) 
				constraint (BusinessClass.ImplementsAuditing)
					"BusinessClassMustImplementAuditing"
			else
			if (DataToExtract.FutureEffectiveEntries) 
				constraint (BusinessClass.ImplementsEffectiveDated)
					"BusinessClassMustImplementEffectiveDatedPattern"
                constraint (not ReplicationSet.ExportFormat.COLUMNAR)
                    "FutureEffectiveEntriesIsNotSupportedForColumnar.UseAuditAndFutureEffectiveEntriesInstead"
			else
			if (DataToExtract.AuditAndFutureEntries)
				constraint (BusinessClass.ImplementsEffectiveDated or BusinessClass.ImplementsAuditing)
					"BusinessClassMustImplementAuditingOrEffectiveDatedPattern"

			if (action type.Update
			and not DataToExtract.CurrentData
			and old DataToExtract.CurrentData)
				LocalRepSetBCField = "audit entry id"
				 
				if (not RepSetBCFieldRel exists
				and not RepSetBCClientFieldRel exists)
					if (not Delivered
					or  DeveloperMode
					or  InternalExecution)
						invoke Create RepSetBCField
							invoked.ReplicationSet 	= ReplicationSet
							invoked.RepSetBC 		= RepSetBC
							invoked.RelatedValue	= "audit entry id"
					else
						invoke Create RepSetBCClientField
							invoked.ReplicationSet 	= ReplicationSet
							invoked.RepSetBC 		= RepSetBC
							invoked.RelatedValue	= "audit entry id"
				initialize LocalRepSetBCField				
			



			
		Condition
		    if (Delivered
			and not DeveloperMode
			and not InternalExecution)

				if ((Condition entered
				and not old Condition entered)
				or (not Condition entered
				and old Condition entered)
				or Condition != old Condition)
					constraint (false)
						"ConditionCannotBeChangedForADeliveredReplicationSetBusinessClass"
					
			if (IncrementalReplication
			and (Condition changed
			or   AdditionalCondition changed))
				if (not Condition entered 
				and not AdditionalCondition entered)
					if (not DisableIncrementalReplication and not BusinessClass.HasIncrementalReplicationIndicator)
						confirmation required
							"ClearingTheConditionWillRequireAFullReplicationForThisBusinessClass.TheNextReplicationWillIncludeAllData."
					initialize IncrementalReplication
					initialize OldCondition
					initialize OldAdditionalCondition
					initialize ExpectedNumberOfRecords
				else
				if (not old Condition entered 
				and not old AdditionalCondition entered)
					confirmation required
						"PreviouslyReplicatedDataRemains.TheNextReplicationWillIncrementallyIncludeOnlyDataMatchingTheCondition."
				else
				if (ConditionChangedStructure)
					if (not FillCondition entered) 
						if (not DisableIncrementalReplication and not BusinessClass.HasIncrementalReplicationIndicator)
							confirmation required
								"WithoutAFillCondition,ChangingTheConditionWillRequireAFullReplicationForThisBusinessClass.TheNextReplicationWillIncludeAllData."
						initialize IncrementalReplication
						initialize OldCondition
						initialize OldAdditionalCondition
						initialize ExpectedNumberOfRecords
					else
						if (not OldCondition entered) 
							OldCondition = old Condition
							
						if (not OldAdditionalCondition entered) 
							OldAdditionalCondition = old AdditionalCondition

			if (FillCondition entered)
				if (not OldCondition entered and (not Delivered or DeveloperMode))
					constraint (false)
						"Original_ConditionMustBeModifiedBeforeSavingChanges.MakeSureToAdd_Fill_ConditionToThe_Original_Condition."
		
		AdditionalCondition				
			if (not Delivered)

				if ((AdditionalCondition entered
				and not old AdditionalCondition)
				or (not AdditionalCondition entered
				and old AdditionalCondition)
				or AdditionalCondition != old AdditionalCondition)
					constraint (false)
						"AdditionalConditionIsOnlyValidForADeliveredReplicationSetBusinessClass"					
			
			if (IncrementalReplication
			and (Condition changed
			or   AdditionalCondition changed))
				if (not Condition entered 
				and not AdditionalCondition entered)
					if (not DisableIncrementalReplication and not BusinessClass.HasIncrementalReplicationIndicator)
						confirmation required
							"ClearingTheConditionWillRequireAFullReplicationForThisBusinessClass.TheNextReplicationWillIncludeAllData."
					initialize IncrementalReplication
					initialize OldCondition
					initialize OldAdditionalCondition
					initialize ExpectedNumberOfRecords
				else
				if (not old Condition entered 
				and not old AdditionalCondition entered)
					confirmation required
						"PreviouslyReplicatedDataRemains.TheNextReplicationWillIncrementallyIncludeOnlyDataMatchingTheCondition."
				else
				if (ConditionChangedStructure)
					if (not FillCondition entered) 
						if (not DisableIncrementalReplication and not BusinessClass.HasIncrementalReplicationIndicator)
							confirmation required
								"WithoutAFillCondition,ChangingTheConditionWillRequireAFullReplicationForThisBusinessClass.TheNextReplicationWillIncludeAllData."
						initialize IncrementalReplication
						initialize OldCondition
						initialize OldAdditionalCondition
						initialize ExpectedNumberOfRecords
					else
						if (not OldCondition entered) 
							OldCondition = old Condition
							
						if (not OldAdditionalCondition entered) 
							OldAdditionalCondition = old AdditionalCondition

			if (FillCondition entered)
				if (not OldAdditionalCondition entered and Delivered and not DeveloperMode)
					constraint (false)
						"Additional_ConditionMustBeModifiedBeforeSavingChanges.MakeSureToAdd_Fill_ConditionToThe_Additional_Condition."
		
		FillCondition
			if (FillCondition entered)
				constraint ((Condition entered and old Condition entered) or (AdditionalCondition entered and old AdditionalCondition entered))
					"FillConditionIsOnlyValidWhenAConditionIsUsedAndHasBeenChanged."
					
		ParentHierarchyLevels
			if (not BusinessClass.ImplementsParentHierarchy)
				cannot be entered
					"ParentHierarchyLevelsOnlyValidWhenKeyFieldOfBusinessClassImplementsParentHierarchy"	
					
		DisableIncrementalReplication
			
			if (not DisableIncrementalReplication
			and not HasUpdateStamp)
				if (BusinessClass.HasIncrementalReplicationIndicator)
					if (not DataToExtract.CurrentData)
						confirmation required
							"BusinessClassMustHaveAnUpdateStampForIncrementalReplicationWhenReplicatingAuditLogEntriesOrFutureEffectiveEntries.ReplicationSetWillBeSetToDisableIncrementalReplication.Continue?"
					
						force default to true
				else	
					confirmation required
						"BusinessClassMustHaveAnUpdateStampOrIncrementalIndicatorForIncrementalReplication.ReplicationSetWillBeSetToDisableIncrementalReplication.Continue?"
			
					force default to true		
				
			if (DisableIncrementalReplication)
				initialize IncrementalReplication
			
			if (DisableIncrementalReplication changed and ExpectedNumberOfRecords entered)
				confirmation required
					"ThisWillResetThe_'ExpectedNumberOfRecords'_value.ItWillBeRecalculatedDuringTheNextReplication.IfTheTargetSystemHasNotBeenCleanedUpThereMayBeDiscrepencies."
				initialize ExpectedNumberOfRecords
				
		Delivered
			initial value is DeveloperMode
			
			if (not DeveloperMode)
				cannot be changed
					"DeliveredFlagCannotBeChangedOutsideOfDeveloperMode"
			else
			if (not Delivered)
				confirmation required
					"DeveloperModeIsEnabledAndReplicationSetIsNotMarkedAsDelivered.IsThisCorrect?"
					
		BackfillDate
			if (BackfillIncomplete)
				cannot be changed
					"CannotChange<BackfillDate label>UntilPreviousRunCompletes."	
					
		NumberOfHierarchyLevels
			default to 15	
			if (HierarchyLevelLimit)
				cannot be entered
					"NumberOfHierarchyLevelsCannotExceed100UnlessConfiguredToDoSo."				
			
		AlsoRepToColumnar
			if (AlsoRepToColumnar)
				include ColumnarActiveValidation
							
		MultiThreadField
			if (MultiThreadFullReplications)
				required
					"MultiThreadFieldMustBeEntered"
				constraint(MultiThreadField.RepresentationType.Numeric
			            or MultiThreadField.RepresentationType.Integer
			            or MultiThreadField.RepresentationType.Date
			            or MultiThreadField.RepresentationType.TimeStamp
			            or MultiThreadField.RepresentationType.UniqueID)
					"MultiThreadFieldMustBeANumericOrIntegerOrDateOrTimestampType"
					
		MultiThreadNumThreads
			if (MultiThreadFullReplications)
				required
					"MustChooseANumberOfThreads"
				constraint(MultiThreadNumThreads > 1)
					"NumberOfThreadsMustBeMoreThan1"
					

		Inactive
			if (action type.Update
			and Inactive changed)
				if (not Inactive)
					constraint (not OtherActiveReplicateClassName exists)
						"TheReplicateClassName<ReplicateClassName>IsActiveInReplicationSet<first OtherActiveReplicateClassName.ReplicationSet>.OnlyOneCanBeActive."
					LocalRepSetBusClass = BusinessClass
					
					if (ReplicationSet.ExportFormat.COLUMNAR or AlsoRepToColumnar)
						constraint (not RepSetBCOtherActiveColumnarRel exists)
							"BusinessClassIsAlreadyActiveInColumnarReplicationSet:<first RepSetBCOtherActiveColumnarRel.ReplicationSet>"
						constraint (not RepSetBCOtherAlsoRepsToActiveColumnarRel exists)
							"BusinessClassIsAlreadyReplicatedToColumnarInActiveReplicationSet:<first RepSetBCOtherAlsoRepsToActiveColumnarRel.ReplicationSet>" 

					if (IncrementalReplication and not DisableIncrementalReplication and ReplicationSet.LastRefreshStamp entered and not BusinessClass.HasIncrementalReplicationIndicator)
						confirmation required
							"If<ReplicationSet>HasBeenReplicatedWhileThisWasInactive,DataWillBeMissingFor<BusinessClass>/<ReplicateClassName>.YouMayWantToManuallyResetThisRecordBeforeTheNextReplication.Continue?"
				else
					if (IncrementalReplication and not DisableIncrementalReplication and ReplicationSet.LastRefreshStamp entered and not BusinessClass.HasIncrementalReplicationIndicator)
						confirmation required
							"InactivatingWillCauseThisReplicationSetBusinessClassToBeSkippedWhenReplicating<ReplicationSet>.AreYouSureYouWantToInactivate?"
		
		IncrementalIndicatorField
			if (not DisableIncrementalReplication and EnableIndicator and BusinessClass.HasIncrementalReplicationIndicator)
				if (instance count of BusinessClassIncrementalIndicatorFieldRel > 1)
					required 
				else
					default to first BusinessClassIncrementalIndicatorFieldRel.BusinessClassIncrementalIndicatorField
					
				LocalRepSetBusClass = BusinessClass
				
				for each RepSetBCOtherRel
					if (each.EnableIndicator and not each.DisableIncrementalReplication)
						LocIncrIndicatorField1 = IncrementalIndicatorField
						
						if (LocIncrIndicatorField1 = blank)
							LocIncrIndicatorField1 = first BusinessClassIncrementalIndicatorFieldRel.BusinessClassIncrementalIndicatorField
						
						LocIncrIndicatorField2 = each.IncrementalIndicatorField
						
						if (LocIncrIndicatorField2 = blank)
							LocIncrIndicatorField2 = each.first BusinessClassIncrementalIndicatorFieldRel.BusinessClassIncrementalIndicatorField
							
						if (LocIncrIndicatorField1 = LocIncrIndicatorField2)
							confirmation required
								"IndicatorFieldIsUsedInAnotherReplicationAndIsTypicallyNotUsedThisWay.ItIsAlsoUsedIn<each.ReplicationSet>.Continue?"
							end for each
			
			initial value is DefaultIndicatorField
			
		EnableIndicator
			if (not CanEnableIndicator)
				EnableIndicator = false

		CreateOnly
			if (UseColumnarVariationPattern)
				if (ReplicationSet.ExportFormat.COLUMNAR)
					constraint (not CreateOnly)
						"CreateOnlyIsNotValidWhenUsingTheUseColumnarVariationPattern"
				else
					UseColumnarVariationPattern = false

		ReReplicateOnAnyChange
		    constraint (not EnableIndicator)
		        "Re\-ReplicationOnAnyChangeIsNotValidWithIndicatorPattern"

		    constraint (not DisableIncrementalReplication)
		        "Re\-ReplicationOnAnyChangeIsOnlyValidWithIncrementalReplication"

		    constraint (BusinessClass.HasUpdateStamp)
		        "BusinessClassMustImplementUpdateStamp"

		ReReplicateBasedOnAdditionalBC
		    constraint (ReReplicateOnAnyChange)
		        "AdditionalBusinessClassIsOnlyValidWithRe\-ReplicateOnAnyChange"

		    constraint (ReReplicateBasedOnAdditionalBC.HasUpdateStamp)
		        "AdditionalBusinessClassMustImplementUpdateStamp"

		EnableNChars
			if (EnableNChars)
				cannot be changed
				
        UseColumnarVariationPattern
            if (UseColumnarVariationPattern changed
            and UseColumnarVariationPattern = false
            and not DisableIncrementalReplication
            and IncrementalReplication
            and ReplicationSet.LastRefreshStamp entered)
                confirmation required
                    "UnselectingThe_Use_Columnar_Variation_PatternWillResetThisReplicationClassAndItWillNeedToBeRe\-replicated.Continue?"
                invoke Reset

		UseTransactionIDForRelatedData
			initial value is config(Replication).UseTransactionIDForRelated

			if (DataToExtract.CurrentData)
				UseTransactionIDForRelatedData = false	
	Relations
		BusinessFieldsRel 
			one-to-many relation to BusinessField
			Field Mapping uses symbolic key
				related.BusinessView = BusinessClass
				
		BusinessKeyFieldsRel 
			one-to-many relation to BusinessField
			Field Mapping uses symbolic key
				related.BusinessView = BusinessClass
			Instance Selection
				where (related.IsPartOfPrimaryKey = true)


        UniqueIDFieldRel
            one-to-many relation to BusinessField
            Field Mapping uses symbolic key
                related.BusinessView = BusinessClass
            Instance Selection
                where (related.IsBCUniqueID = true)
				
		RepSetBCFieldRel 
			one-to-many relation to RepSetBCField
			Field Mapping uses ByRelatedValue
				related.ReplicationSet = ReplicationSet
				related.RepSetBC 	   = RepSetBC
				related.RelatedValue   = LocalRepSetBCField
				
		RepSetBCClientFieldRel 
			one-to-many relation to RepSetBCClientField
			Field Mapping uses ByRelatedValue
				related.ReplicationSet = ReplicationSet
				related.RepSetBC 	   = RepSetBC
				related.RelatedValue   = LocalRepSetBCField
				
		RepSetBCFieldUidRel 
			one-to-many relation to RepSetBCField
			Field Mapping uses symbolic key
				related.ReplicationSet = ReplicationSet
				related.RepSetBC 	   = RepSetBC
			Instance Selection
				where (related.SuppressFieldData = false and related.BusinessFieldRel.IsBCUniqueID)
				
		RepSetBCClientFieldUidRel 
			one-to-many relation to RepSetBCClientField
			Field Mapping uses  symbolic key
				related.ReplicationSet = ReplicationSet
				related.RepSetBC 	   = RepSetBC
			Instance Selection
				where (related.SuppressFieldData = false and related.BusinessFieldRel.IsBCUniqueID)
				
		RepSetBCOtherRel
			one-to-many relation to RepSetBC
			Field Mapping uses ByBusinessClassAllSet
				related.BusinessClass = LocalRepSetBusClass	
			Instance Selection
				where (related.UniqueID != UniqueID)
				
		RepSetBCOtherActiveColumnarRel
			one-to-many relation to RepSetBC
			Field Mapping uses ByBusinessClassAllSet
				related.BusinessClass = LocalRepSetBusClass
			Instance Selection
				where (related.ReplicationSet.ExportFormat.COLUMNAR
				and    related.UniqueID != UniqueID
				and    (related.DataToExtract = DataToExtract
				    or  (related.DataToExtract.AuditLogEntries and DataToExtract.AuditAndFutureEntries)
				    or  (related.DataToExtract.AuditAndFutureEntries and DataToExtract.AuditLogEntries))
				and	   related.Inactive = false)
				

		RepSetBCOtherAlsoRepsToActiveColumnarRel
			one-to-many relation to RepSetBC
			Field Mapping uses ByBusinessClassAllSet
				related.BusinessClass = LocalRepSetBusClass
			Instance Selection
				where (related.AlsoRepToColumnar
				and    related.UniqueID != UniqueID
				and    (related.DataToExtract = DataToExtract
                    or  (related.DataToExtract.AuditLogEntries and DataToExtract.AuditAndFutureEntries)
                    or  (related.DataToExtract.AuditAndFutureEntries and DataToExtract.AuditLogEntries))
				and	   related.Inactive = false)
				
		RepSetBCHistoryInstance 
			one-to-one relation to RepSetBCHistory
			Field Mapping uses symbolic key
				related.ReplicationSet 		  		 = ReplicationSet
				related.RepSetBC 		  	  		 = RepSetBC
				related.RepSetBCHistory.Backfill	 = 0 
				related.RepSetBCHistory.HistoryStamp = ReplicationSet.AdjustedCurrentRefreshStamp 
				
		RepSetBCHistoryLaterInstance 
			one-to-many relation to RepSetBCHistory
			Field Mapping uses symbolic key
				related.ReplicationSet 		  		 = ReplicationSet
				related.RepSetBC 		  	  		 = RepSetBC
				related.RepSetBCHistory.Backfill	 = 0 
				related.RepSetBCHistory.HistoryStamp > LocalHistoryStamp				
				
		RepSetBCBackfillHistoryInstance 
			one-to-one relation to RepSetBCHistory
			Field Mapping uses symbolic key
				related.ReplicationSet 		  		 = ReplicationSet
				related.RepSetBC 		  	  		 = RepSetBC
				related.RepSetBCHistory.Backfill 	 = 1 
				related.RepSetBCHistory.HistoryStamp = BackfillDate			
				
		RepSetBCArchiveBackfillHistoryInstance 
			one-to-one relation to RepSetBCHistory
			Field Mapping uses symbolic key
				related.ReplicationSet 		  		 = ReplicationSet
				related.RepSetBC 		  	  		 = RepSetBC
				related.RepSetBCHistory.Backfill 	 = 2 
				related.RepSetBCHistory.HistoryStamp = ArchiveBackfillToStamp
				
		IONOutboxQueueRel
			one-to-many relation to IONOutboxQueue
			Field Mapping uses ByBodType
				related.BodType = ReplicateClassName
									
		IONOutboxQueueFailedRel
			one-to-many relation to IONOutboxQueue
			Field Mapping uses ByBodType
				related.BodType = ReplicateClassName
			Instance Selection
				where (related.Status = IONOutboxQueueStatus.Failed)
				
		IONOutboxQueueIncompleteRel
			one-to-many relation to IONOutboxQueue
			Field Mapping uses ByBodType
				related.BodType = ReplicateClassName
			Instance Selection
				where (related.Status < IONOutboxQueueStatus.Received) 
		

		OtherReplicateClassName
			one-to-many relation to RepSetBC
			Field Mapping uses ByReplicateClassNameOnly
				related.ReplicateClassName = ReplicateClassName
			Instance Selection
				where (related.UniqueID != UniqueID) 
		

		OtherActiveReplicateClassName
			one-to-many relation to RepSetBC
			Field Mapping uses ByReplicateClassNameOnly
				related.ReplicateClassName = ReplicateClassName
			Instance Selection
				where (related.UniqueID != UniqueID and related.Inactive = false) 
				
		BusinessClassIncrementalIndicatorFieldRel
			one-to-many relation to BusinessClassIncrementalIndicatorField
			Field Mapping uses BySequence
				related.BusinessClass = BusinessClass
				

		RootArchiveBackfillAsyncActionRequestProcessingRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByClass
				related.ImplementingClass 	= "RepSetBC"
				related.AsyncAction 		= "ArchiveBackfillData"
			Instance Selection
				where (related.MappingField1 = ReplicationSet 
				and    related.MappingField2 = RepSetBC 
				and   (related.NonFinishedTriggersExist))		


		RootArchiveBackfillAsyncActionRequestPendingRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByClass
				related.ImplementingClass 	= "ReplicationSet"
				related.AsyncAction 		= "ArchiveBackfillData"
			Instance Selection
				where (related.MappingField1 = ReplicationSet 
				and    related.MappingField2 = RepSetBC 
				and   (related.PendingScheduling))		

		ArchiveBackfillActionGroupRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByActionGroup
				related.ActionGroup = ArchiveBackfillActionGroupID  
			Instance Selection                      
				where (related.ActionGroup entered) 
				
		ArchiveBackfillActionGroupActiveRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByActionGroup
				related.ActionGroup = ArchiveBackfillActionGroupID  
				related.InactiveInGroup = false 
			Instance Selection                      
				where (related.ActionGroup entered) 
				
		NewArchiveDataRefreshStampRel
			one-to-many relation to ArchivedData
			Field Mapping uses ByPurgedClassSentCreateStamp
				related.ArchivedData.PurgedBusinessClass = BusinessClass  
				related.SentToArchive = 0 
				related.create stamp <= ReplicationSet.LastRefreshStamp
				
		NewArchiveDataRel
			one-to-many relation to ArchivedData
			Field Mapping uses ByPurgedClassSentCreateStamp
				related.ArchivedData.PurgedBusinessClass = BusinessClass  
				related.SentToArchive = 0 
				related.create stamp <= ArchiveBackfillToStamp
				
		ErrorArchiveDataRel
			one-to-many relation to ArchivedData
			Field Mapping uses ByPurgedClassSentCreateStamp
				related.ArchivedData.PurgedBusinessClass = BusinessClass  
				related.SentToArchive = 2 
				related.create stamp <= ArchiveBackfillToStamp
				
		DisabledArchiveDataRel
			one-to-many relation to ArchivedData
			Field Mapping uses ByPurgedClassSentCreateStamp
				related.ArchivedData.PurgedBusinessClass = BusinessClass  
				related.SentToArchive = 3 
				related.create stamp <= ArchiveBackfillToStamp
				

		RelatedRepSetsByBC
            one-to-many relation to RepSetBC
            Field Mapping uses ByReplicateClassNameOnly
                related.ReplicateClassName = ReplicateClassName
				
	Sets
		ByBusinessClass
			indexed
			duplicates
			Sort Order
				ReplicationSet
				BusinessClass

		ByReplicateClassName
			indexed
			Sort Order
				ReplicationSet
				ReplicateClassName
				
		ByReplicateClassNameOnly
			indexed
			duplicates 
			Sort Order
				ReplicateClassName	
				
		ByBusinessClassAllSet
			indexed
			duplicates
			Sort Order
				BusinessClass
				ReplicationSet							
		
	Actions
		Create is a Create Action
			valid when (CanCreate)
			
			Local Fields
				LocalBusinessFieldType  	is a BusinessFieldRepresentationType
			
			Entrance Rules
				if (Delivered and not InternalExecution)
					constraint (DeveloperMode)
						"DeliveredFlagCannotBeChangedOutsideOfDeveloperMode"
					



			
			Exit Rules
				for each(BusKeyFieldRel) BusinessKeyFieldsRel
					if (not TransExplodeCompoundFields or not each(BusKeyFieldRel).IsCompoundField) 
						if (not Delivered
						or  ((DeveloperMode
						or  InternalExecution)
						and not each(BusKeyFieldRel).BusinessField.IsConfiguration))
							invoke Create RepSetBCField
								invoked.ReplicationSet 	= ReplicationSet
								invoked.RepSetBC 		= RepSetBC
								invoked.RelatedValue	= each(BusKeyFieldRel).BusinessField
								
								if (UseSQLName)
									invoked.UseSQLName			= UseSQLName
									invoked.ReplicateFieldName	= each(BusKeyFieldRel).FullSQLName lowercase
						else
							invoke Create RepSetBCClientField
								invoked.ReplicationSet 	= ReplicationSet
								invoked.RepSetBC 		= RepSetBC
								invoked.RelatedValue	= each(BusKeyFieldRel).BusinessField
								invoked.UseSQLName		= UseSQLName
								
								if (UseSQLName)
									invoked.UseSQLName			= UseSQLName
									invoked.ReplicateFieldName	= each(BusKeyFieldRel).FullSQLName lowercase
					else
						for each(ExplField) each(BusKeyFieldRel).FlattenedCompoundField set
						
							LocalRepSetBCField = each(ExplField).FullName 
			
							if (not RepSetBCFieldRel exists
							and not RepSetBCClientFieldRel exists)
								LocalBusinessFieldType = each(ExplField).RepresentationType 

								if (not LocalBusinessFieldType.Unknown 
								and not LocalBusinessFieldType.BinaryDocument
								and not LocalBusinessFieldType.BinaryObject
								and not LocalBusinessFieldType.Iteration
								and not LocalBusinessFieldType.NotInUse
								and not LocalBusinessFieldType.NoRepresentation
								and not LocalBusinessFieldType.View
								and (not ReplicationSet.ExportFormat.COLUMNAR
								or  (not LocalBusinessFieldType.Text and each(ExplField).IsValidForColumnar))
								and  each(ExplField).Type.Persistent
								and  not each(ExplField).IsHiddenFrameworkField)
									if (not Delivered
									or  ((DeveloperMode
									or  InternalExecution)
									and not each(ExplField).BusinessField.IsConfiguration))
										invoke Create RepSetBCField
											invoked.ReplicationSet 					= ReplicationSet
											invoked.RepSetBC 						= RepSetBC
											invoked.RelatedValue					= LocalRepSetBCField
											invoked.ReplacePeriodsWithUnderscores 	= TransReplacePeriodsWithUnderscores
											
											if (UseSQLName)
												invoked.UseSQLName					= UseSQLName
												invoked.ReplicateFieldName			= each(ExplField).FullSQLName lowercase
									else
										invoke Create RepSetBCClientField
											invoked.ReplicationSet 					= ReplicationSet
											invoked.RepSetBC 						= RepSetBC
											invoked.RelatedValue					= LocalRepSetBCField
											invoked.ReplacePeriodsWithUnderscores 	= TransReplacePeriodsWithUnderscores
											
											if (UseSQLName)
												invoked.UseSQLName					= UseSQLName
												invoked.ReplicateFieldName			= each(ExplField).FullSQLName lowercase
									
							
				if (DataToExtract.AuditLogEntries
				or 	DataToExtract.FutureEffectiveEntries
				or  DataToExtract.AuditAndFutureEntries)	
					if (not Delivered
					or  DeveloperMode
					or  InternalExecution)
						invoke Create RepSetBCField
							invoked.ReplicationSet 	= ReplicationSet
							invoked.RepSetBC 		= RepSetBC
							invoked.RelatedValue	= "audit entry id"
					else
						invoke Create RepSetBCClientField
							invoked.ReplicationSet 	= ReplicationSet
							invoked.RepSetBC 		= RepSetBC
							invoked.RelatedValue	= "audit entry id"											
				
				if (ReplicationSet.EnableEnterpriseSearch)
					invoke AddRepresentativeTextFields

                if (ReplicationSet.ExportFormat.COLUMNAR
                and DataToExtract.CurrentData)
                    for each UniqueIDFieldRel
                        if (not each.IsPartOfPrimaryKey)
                            if (not Delivered
                            or  ((DeveloperMode
                            or  InternalExecution)
                            and not each.BusinessField.IsConfiguration))
                                invoke Create RepSetBCField
                                    invoked.ReplicationSet 	= ReplicationSet
                                    invoked.RepSetBC 		= RepSetBC
                                    invoked.RelatedValue	= each.BusinessField
					        else
                                invoke Create RepSetBCClientField
                                    invoked.ReplicationSet 	= ReplicationSet
                                    invoked.RepSetBC 		= RepSetBC
                                    invoked.RelatedValue	= each.BusinessField


        CreateForCopy is a Create Action 
            restricted               

                        				
		Update is an Update Action
			valid when (not ReplicationSet.InProcess)
			Action Rules
				if (LastRegistrationStamp entered
				and (BusinessClass changed
				or  ReplicateClassName changed

				or  DataToExtract changed
				or  ParentHierarchyLevels changed
				or  (IncludeSourceEntryAction changed and (DataToExtract.CurrentData and (IncludeSourceEntryAction.False or old IncludeSourceEntryAction.False))))
				and not ReplicationSet.ExportFormat.COLUMNAR)
					if (not DisableIncrementalReplication and not BusinessClass.HasIncrementalReplicationIndicator)
						confirmation required
							"ChangesWillRequireANewSchemaRegistrationForThisBusinessClass.TheNextReplicationWillIncludeAllData."
					else
						confirmation required
								"ChangesWillRequireANewSchemaRegistrationForThisBusinessClass."
						
					initialize LastRegistrationStamp
					initialize IncrementalReplication	
					initialize ExpectedNumberOfRecords
					
				if (ReplicateClassName size > 100
				and ReplicationSet.ReplicationSchemaDestination.IMS)
					confirmation required
						"IMSLimitsBusinessClassReplicateNamesTo100Characters.<ReplicateClassName>WillBeTruncatedTo100CharactersInSchema.Continue?"

				if (DisableIncrementalReplication changed and DisableIncrementalReplication)
					confirmation required
						"DisablingIncrementalReplicationWillCauseAll<DataToExtract>FromThisBusinessClassToBeReplicatedWithSubsequentReplications."

		Delete is a Delete Action
			valid when (CanDelete)
			confirmation required
				"SchemaForThisBusinessClassWillRemainButDataWillNoLongerReplicateWithThisSet.AreYouSureYouWantToDelete?"
				
		Purge is a Purge Action
			valid when (CanDelete)
			confirmation required
				"SchemaForThisBusinessClassWillRemainButDataWillNoLongerReplicateWithThisSet.ThisCannotBeUndone,AreYouSureYouWantToPurge?"				
				
		Reset is an Instance Action
			valid when (not ReplicationSet.RunningInProcess)
			
			Entrance Rules
				if (not DisableIncrementalReplication and not BusinessClass.HasIncrementalReplicationIndicator)
					confirmation required
						"ResettingWillClearTheIncrementalReplicationFlag.TheNextReplicationWillIncludeAllData."
				
				if (BackfillDate entered)
					confirmation required
						"ABackfillDateIsSet,TheExistingValueWillBeUsedOnTheNextReplicationUnlessManuallyChanged."
				
				if (ExpectedNumberOfRecordsIsValid and not DisableIncrementalReplication and ExpectedNumberOfRecords entered)
					confirmation required
						"ThisWillAlsoResetThe_'ExpectedNumberOfRecords'_value.ItWillBeRecalculatedDuringTheNextReplication.IfTheTargetSystemHasNotBeenCleanedUpThereMayBeDiscrepencies."
					
			Action Rules
				
				if (ReplicationIncomplete
				or  BackfillIncomplete
				or  ArchiveBackfillIncomplete)
					
					if (ReplicationIncomplete)
						confirmation required
							"ReplicationIsIncomplete.ResettingWillClearAndResetInformationAndLeaveReplicationIncomplete.AreYouSure?" 	
						
						invoke ClearRestartInformation		
					
					if (BackfillIncomplete)
						confirmation required
							"BackfillIsIncomplete.ResettingWillClearAndResetInformationAndLeaveBackfillIncomplete.AreYouSure?" 	
							
						invoke ClearBackfillRestartInformation
					
					if (ArchiveBackfillIncomplete)
						confirmation required
							"ArchiveBackfillIsIncomplete.ResettingWillClearAndResetInformationAndLeaveArchiveBackfillIncomplete.AreYouSure?" 	
						
						invoke ClearArchiveBackfillRestartInformation
				else
					initialize IncrementalReplication
					
					invoke ClearArchiveDates
					
				initialize ExpectedNumberOfRecords

                if (ReplicationSet.ExportFormat.COLUMNAR)
                    invoke ClearColumnarCheckPoint
                    
                if (not ColumnarFlattenHierarchy
                and BusinessClass.ArchivingEnabledForBusinessClass)
               		ArchiveBackfillToStamp = system current timestamp	
               		

			
		SetRegistrationRequired is an Instance Action
			restricted
			Parameters
				ClearIncrementalFlag is Boolean
					default label is untranslatable
					
			Action Rules
				initialize LastRegistrationStamp 	
				

				if (ClearIncrementalFlag)
					initialize IncrementalReplication	
					initialize ExpectedNumberOfRecords	
				
		SetInProcess is an Instance Action
			restricted
			
			Action Rules
				constraint (not ReplicationIncomplete)
					"<BusinessClass>(<ReplicateClassName>)AlreadyMarkedAsInProcess"
				
				RestartInformation = "START=true"
					
		SetInProcessBackfill is an Instance Action
			restricted
			
			Action Rules
				constraint (not BackfillIncomplete)
					"<BusinessClass>(<ReplicateClassName>)AlreadyMarkedAsInProcessForBackfill"
				
					BackfillRestartInformation ="START=true"
					
		SetInProcessArchiveBackfill is an Instance Action
			restricted
			default label is untranslatable
			
			Action Rules
				constraint (not ArchiveBackfillIncomplete)
					"<BusinessClass>(<ReplicateClassName>)AlreadyMarkedAsInProcessForArchiveBackfill"
				
					ArchiveBackfillRestartInformation ="START=true"
				
		SetFinishedForRestart is an Instance Action
			restricted
			
			Action Rules
				RestartInformation = "FINISHED=true"
				initialize RestartData
					
		SetFinishedForRestartBackfill is an Instance Action
			restricted
			
			Action Rules
					BackfillRestartInformation ="FINISHED=true"
					initialize BackfillRestartData
					
		SetFinishedForRestartArchiveBackfill is an Instance Action
			restricted
			
			Action Rules
					ArchiveBackfillRestartInformation ="FINISHED=true"
					initialize ArchiveBackfillRestartData

        ClearColumnarCheckPoint is an Instance Action
            restricted
			default label is untranslatable



		ClearRestartInformation is an Instance Action
			restricted
			
			Parameters
				Unlock is Boolean
				WasIncremental is Boolean
				    default label is "Incremental"
				ParamLastRefresh is TimeStamp
					default label is "LastRefreshStamp"
				ParamPrevLastRefresh is TimeStamp
					default label is "PreviousRefreshStamp"
				ClearArchive is Boolean
					default label is untranslatable
				
			Action Rules
				initialize RestartInformation	
				initialize RestartData
				
				if (Unlock)
					if (ReplicateLoopLocked)
						invoke UnlockReplicateLoop	// Safety valve. Since this uses a connection level lock it should have release at end work when "ReplicateLoop" (a background action) ended.
						
					invoke UnlockAllReplicateThreads // Safety valve. Since this uses a connection level lock it should have release at end work when "Replicate" (a background action) ended.
						invoked.WasIncremental = WasIncremental
				else
				if (ParamLastRefresh entered)
					LocalHistoryStamp = ParamLastRefresh
					
					for each RepSetBCHistoryLaterInstance
						if (ParamPrevLastRefresh not entered or each.RepSetBCHistory.HistoryStamp <= ParamPrevLastRefresh)
							ExpectedNumberOfRecords = ExpectedNumberOfRecords - each.NumberCreated - each.BackfillUpdateCreates + each.NumberDeleted 
				else
					initialize ExpectedNumberOfRecords 
					
				if (MultiThreadNumThreads > 0)
					invoke Delete RepSetBCCheckPoint set
					
				if (ClearArchive)	
					invoke ClearArchiveBackfillRestartInformation
						invoked.Unlock = Unlock
						invoked.WasIncremental = WasIncremental
						invoked.ParamLastRefresh = ParamLastRefresh
						invoked.ParamPrevLastRefresh = ParamPrevLastRefresh
				
		SetRestartInformation is an Instance Action
			restricted
			default label is untranslatable
			
			Parameters
				ParamRestartInformation is Text
					default label is "RestartInformation"
			
			Action Rules
				RestartInformation = ParamRestartInformation
				
		ClearBackfillRestartInformation is an Instance Action
			restricted
			
			Action Rules
				initialize BackfillRestartInformation	
				initialize BackfillRestartData	
				
		SetBackfillRestartInformation is an Instance Action
			restricted
			
			Parameters
				BackfillParamRestartInformation is Text
					default label is "BackfillRestartInformation"
			
			Action Rules
				BackfillRestartInformation = BackfillParamRestartInformation
				
		ClearArchiveBackfillRestartInformation is an Instance Action
			restricted
			
			Parameters
				Unlock is Boolean
				WasIncremental is Boolean
				    default label is "Incremental"
				ParamLastRefresh is TimeStamp
					default label is "LastRefreshStamp"
				ParamPrevLastRefresh is TimeStamp
					default label is "PreviousRefreshStamp"
			
			Action Rules
				initialize ArchiveBackfillRestartInformation	
				initialize ArchiveBackfillRestartData
				initialize ArchiveBackfillToStamp
				
				if (Unlock)
					if (ArchiveBackfillLocked)
						invoke UnlockArchiveBackfill	// Safety valve. Since this uses a connection level lock it should have release at end work when "ReplicateLoop" (a background action) ended.

					invoke UnlockAllArchiveBackfillThreads // Safety valve. Since this uses a connection level lock it should have release at end work when "Replicate" (a background action) ended.
						invoked.SetComplete = false
				else
					initialize ArchiveBackfillCompleteStamp
					
				if (MultiThreadNumThreads > 0)
					invoke Delete RepSetBCArchiveCheckPoint set	
					
		SetArchiveBackfillRestartInformation is an Instance Action
			restricted
			
			Parameters
				ArchiveBackfillParamRestartInformation is Text
					default label is untranslatable:"ArchiveBackfillRestartInformation"
			
			Action Rules
				ArchiveBackfillRestartInformation = ArchiveBackfillParamRestartInformation
					
		ClearArchiveDates is an Instance Action
			restricted
			
			Action Rules
				initialize ArchiveBackfillToStamp
				initialize ArchiveBackfillCompleteStamp
				
		ClearRecordCount is an Instance Action
			restricted
			
			Action Rules
				initialize ExpectedNumberOfRecords
				
		SetRestartData is an Instance Action
			restricted
			
			Parameters
				ParamRestartData is Text
					default label is untranslatable:"RestartData"
				ParamIsArchiveBackfill is Boolean
					default label is untranslatable:"IsArchiveBackfill"
					
			Action Rules
				if (ParamIsArchiveBackfill)
					ArchiveBackfillRestartData = ParamRestartData	
				else
					RestartData = ParamRestartData			
			 				
		AddFields is an Instance Action
			completion message is "Added<TotalCount>Fields"
			Parameters
				AddPersistentFields 				  		is Boolean
				AddPersistentUserFields 			  		is Boolean
				ExplodeCompoundFields						is Boolean
				ReplacePeriodsWithUnderscores				is Boolean
				UseSQLName									is Boolean
				AddPersistentFieldCubeDimensionValues 		is Boolean
				AddPersistentUserFieldCubeDimensionValues 	is Boolean
				SkipSchemaChangeConfirmation				is Boolean 
				AddAuditFields								is Boolean
			
			Local Fields
				Count 						is Numeric size 3
				TotalCount					is Numeric size 6
				LocalBusinessFieldType  	is a BusinessFieldRepresentationType
				LocalCreateField			is Boolean
				LocalCreateCubeDimension	is Boolean
				LocalRepSetBCCDV 			is Alpha size 300
				
			Parameter Rules
				ReplacePeriodsWithUnderscores
					initial value is true
				
				UseSQLName
					initial value is true
					
			Entrance Rules
				if (not ExplodeCompoundFields and UseSQLName)
					UseSQLName = false  
					
			Action Rules
				for each(BusFieldRel) BusinessFieldsRel
					if  ((each(BusFieldRel).Type.Persistent
					and (not ReplicationSet.ExportFormat.COLUMNAR or each(BusFieldRel).IsValidForColumnar))
					and (((AddPersistentFields or AddPersistentFieldCubeDimensionValues) and not each(BusFieldRel).IsConfiguration)
					or  ((AddPersistentUserFields or AddPersistentUserFieldCubeDimensionValues) and each(BusFieldRel).IsConfiguration))
					and  (not each(BusFieldRel).IsHiddenFrameworkField))
					
						LocalCreateField = false
						LocalCreateCubeDimension = false
					
						if (AddPersistentFields
						or  AddPersistentUserFields)
							LocalRepSetBCField = each(BusFieldRel).BusinessField 
							
							if (not RepSetBCFieldRel exists
							and not RepSetBCClientFieldRel exists)
								LocalCreateField = true
							
						if ((AddPersistentFieldCubeDimensionValues
						or  AddPersistentUserFieldCubeDimensionValues)
						and (each(BusFieldRel).IsKeyField
						or each(BusFieldRel).IsPartOfKey))
							LocalRepSetBCField = each(BusFieldRel).BusinessField + " cube dimension value" 
							LocalRepSetBCCDV = LocalRepSetBCField
							
							if (not RepSetBCFieldRel exists
							and not RepSetBCClientFieldRel exists)
								LocalCreateCubeDimension = true
								
						if (LocalCreateField
						or  LocalCreateCubeDimension)														
							LocalBusinessFieldType = each(BusFieldRel).RepresentationType 
						
							if (not LocalBusinessFieldType.Unknown 
							and not LocalBusinessFieldType.BinaryDocument
							and not LocalBusinessFieldType.BinaryObject
							and not LocalBusinessFieldType.Iteration
							and not LocalBusinessFieldType.NotInUse
							and not LocalBusinessFieldType.NoRepresentation
							and not LocalBusinessFieldType.View
							and (not ReplicationSet.ExportFormat.COLUMNAR 
							or   not LocalBusinessFieldType.Text))
								if (LocalCreateField)

									if (not ExplodeCompoundFields or not each(BusFieldRel).IsCompoundField) 
										if (not Delivered
										or  ((DeveloperMode
										or  InternalExecution)
										and not each(BusFieldRel).BusinessField.IsConfiguration))
											invoke Create RepSetBCField
												invoked.ReplicationSet 					= ReplicationSet
												invoked.RepSetBC 						= RepSetBC
												invoked.RelatedValue					= each(BusFieldRel).BusinessField
												invoked.ReplacePeriodsWithUnderscores 	= ReplacePeriodsWithUnderscores
												invoked.SkipSchemaChangeConfirmation	= SkipSchemaChangeConfirmation
												
												if (UseSQLName)
													invoked.UseSQLName					= UseSQLName
													invoked.ReplicateFieldName			= each(BusFieldRel).FullSQLName lowercase
										else
											invoke Create RepSetBCClientField
												invoked.ReplicationSet 					= ReplicationSet
												invoked.RepSetBC 						= RepSetBC
												invoked.RelatedValue					= each(BusFieldRel).BusinessField
												invoked.ReplacePeriodsWithUnderscores 	= ReplacePeriodsWithUnderscores
												invoked.SkipSchemaChangeConfirmation	= SkipSchemaChangeConfirmation
												
												if (UseSQLName)
													invoked.UseSQLName					= UseSQLName
													invoked.ReplicateFieldName			= each(BusFieldRel).FullSQLName lowercase
										
										Count += 1
										TotalCount += 1
									else
										for each(ExplField) each(BusFieldRel).FlattenedCompoundField set
										
											LocalRepSetBCField = each(ExplField).FullName 
							
											if (not RepSetBCFieldRel exists
											and not RepSetBCClientFieldRel exists)
												LocalBusinessFieldType = each(ExplField).RepresentationType 

												if (not LocalBusinessFieldType.Unknown 
												and not LocalBusinessFieldType.BinaryDocument
												and not LocalBusinessFieldType.BinaryObject
												and not LocalBusinessFieldType.Iteration
												and not LocalBusinessFieldType.NotInUse
												and not LocalBusinessFieldType.NoRepresentation
												and not LocalBusinessFieldType.View
												and (not ReplicationSet.ExportFormat.COLUMNAR
												or  (not LocalBusinessFieldType.Text and each(ExplField).IsValidForColumnar))
												and  each(ExplField).Type.Persistent
												and  not each(ExplField).IsHiddenFrameworkField)
													if (not Delivered
													or  ((DeveloperMode
													or  InternalExecution)
													and not each(ExplField).BusinessField.IsConfiguration))
														invoke Create RepSetBCField
															invoked.ReplicationSet 					= ReplicationSet
															invoked.RepSetBC 						= RepSetBC
															invoked.RelatedValue					= LocalRepSetBCField
															invoked.ReplacePeriodsWithUnderscores 	= ReplacePeriodsWithUnderscores
															invoked.SkipSchemaChangeConfirmation	= SkipSchemaChangeConfirmation
															
															if (UseSQLName)
																invoked.UseSQLName					= UseSQLName
																invoked.ReplicateFieldName			= each(ExplField).FullSQLName lowercase
													else
														invoke Create RepSetBCClientField
															invoked.ReplicationSet 					= ReplicationSet
															invoked.RepSetBC 						= RepSetBC
															invoked.RelatedValue					= LocalRepSetBCField
															invoked.ReplacePeriodsWithUnderscores 	= ReplacePeriodsWithUnderscores
															invoked.SkipSchemaChangeConfirmation	= SkipSchemaChangeConfirmation
															
															if (UseSQLName)
																invoked.UseSQLName					= UseSQLName
																invoked.ReplicateFieldName			= each(ExplField).FullSQLName lowercase
													
													Count += 1
													TotalCount += 1
													
													if (Count >= 100)
														commit transaction
														initialize Count
									
								if (LocalCreateCubeDimension)

									if (not Delivered
									or  ((DeveloperMode
									or  InternalExecution)
									and not each(BusFieldRel).BusinessField.IsConfiguration))
										invoke Create RepSetBCField
											invoked.ReplicationSet 					= ReplicationSet
											invoked.RepSetBC 						= RepSetBC
											invoked.RelatedValue					= LocalRepSetBCCDV // This was set 'to each(BusFieldRel).BusinessField + " cube dimension value"' above  
											invoked.ReplacePeriodsWithUnderscores 	= ReplacePeriodsWithUnderscores
											invoked.SkipSchemaChangeConfirmation	= SkipSchemaChangeConfirmation
											invoked.UseSQLName						= UseSQLName
									else
										invoke Create RepSetBCClientField
											invoked.ReplicationSet 					= ReplicationSet
											invoked.RepSetBC 						= RepSetBC
											invoked.RelatedValue					= LocalRepSetBCCDV // This was set 'to each(BusFieldRel).BusinessField + " cube dimension value"' above
											invoked.ReplacePeriodsWithUnderscores 	= ReplacePeriodsWithUnderscores
											invoked.SkipSchemaChangeConfirmation	= SkipSchemaChangeConfirmation
											invoked.UseSQLName						= UseSQLName
											
									Count += 1
									TotalCount += 1
			
								if (Count >= 100)
									commit transaction
									initialize Count
								
				if (AddAuditFields and DataToExtract > 0) 
					LocalRepSetBCField = "audit entry id"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
						
					LocalRepSetBCField = "system stamp"
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "effective date"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
						
					LocalRepSetBCField = "effective through"
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "actor"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "authenticated actor"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "action"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "initiating action"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "invoking action"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "action type"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "audit period"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "action tag"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "subject"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "reason code"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "correction"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "audit transaction id"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "changed field names"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "applied stamp"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField
					
					LocalRepSetBCField = "entry stamp"	
					include AuditFieldsAddBlock
						replace FieldId with LocalRepSetBCField				
									
		AddRepresentativeTextFields is an Instance Action 
			restricted
							
		ValidateSchema is an Instance Action
		    valid when (not ReplicationSet.ExportFormat.COLUMNAR)
			completion message is "<ValidateSchemaMessage>"
			Parameters
				ShowWarningOnly is Boolean
			Local Fields
				LocalIsValid is Boolean
				LocalActor is an Actor
			Action Rules
				initialize LocalSchemaValidationType
				LocalSchemaIsInvalid = false
				LocalFieldAdded = false
				
				if (RegisteredSchema not entered)
					if (ShowWarningOnly)
						constraint (false)
							"<ValidateSchemaMessage>"
					if (LastRegistrationStamp entered)
						LocalIsValid = SchemasMatch 
				else
				if (LastRegistrationStamp entered
				and not SchemasMatch)
					LocalSchemaIsInvalid = true
					if (ShowWarningOnly)
						LocalSchemaValidationType = LocalSchemaValidationType.MismatchNoInvalidate
						constraint (false)
							"<ValidateSchemaMessage>"
					
					LocalSchemaValidationType = LocalSchemaValidationType.MismatchInvalidate
					invoke SetRegistrationRequired
			
			Exit Rules
				if (ReplicateClassName size > 100
				and ReplicationSet.ReplicationSchemaDestination.IMS)
					LocalActor = actor
					send notification
						to LocalActor
						description is "BusinessClassNameIsOverThe100CharacterIMSLimit"
						detail is "BusinessClassNameIsOverThe100CharacterIMSLimitForReplicationSet:<ReplicationSet>BusinessClass:<BusinessClass>.ItWillBeTruncatedTo100CharactersInTheSchema."
						
				if (LocalFieldAdded)
					LocalActor = actor
					send notification
						to LocalActor
						description is "FieldAddedToReplicationBusinessClass"
						detail is "OneOrMoreFieldsWereAddedToTheReplicationSet:<ReplicationSet>,BusinessClass:<BusinessClass>.ToFillOutPreviouslyReplicatedDataWithTheNewFieldYouWillNeedToResetTheBusinessClassOnTheReplicationSet."
					
		ValidateBusinessClassSchemas is a Set Action
			valid when (not ReplicationSet.ExportFormat.COLUMNAR)
			run in foreground
			disable checkpoint
			completion message is "<LocalInvalidCount>Record(s)ResetToRequireSchemaRegistration"
			Parameters
				ParamReplicationSet			is a ReplicationSet
					default label is "ReplicationSet"

			Parameter Rules
				ParamReplicationSet
					if (ParamReplicationSet not entered)
						confirmation required
							"ThisWillProcessAllRecordsForAllReplicationSets.AreYouSure?"
				
			Local Fields
				LocalInvalidCount is Numeric size 3					
				
			Instance Selection
				where ((ParamReplicationSet = blank
				or     ReplicationSet = ParamReplicationSet)
				and    not Inactive)
			
			Sort Order
				ReplicationSet
				BusinessClass	
				
			Action Rules
				Instance Rules
					invoke ValidateSchema
						invoked.ShowWarningOnly = false			
						
					if (LocalSchemaIsInvalid)
						increment LocalInvalidCount		
						
		ValidateDeliveredBusinessClassSchemas is a Set Action
			valid when (not ReplicationSet.ExportFormat.COLUMNAR)
			run in foreground
			disable checkpoint
			completion message is "<LocalInvalidCount>Record(s)ResetToRequireSchemaRegistration"

			Local Fields
				LocalInvalidCount is Numeric size 3					
				
			Instance Selection
				where (Delivered and not Inactive)
			
			Sort Order
				ReplicationSet
				BusinessClass	
				
			Action Rules
				Instance Rules
					invoke ValidateSchema
						invoked.ShowWarningOnly = false			
						
					if (LocalSchemaIsInvalid)
						increment LocalInvalidCount			
						                                        
        Copy is an Instance Action
            restricted
            
            Parameters
                NewReplicationSet     is like ReplicationSet
                OldPrefix             is Alpha size 5
                NewPrefix             is Alpha size 5
            
            Local Fields
                NewReplicateClassName is Alpha size 127
                RepSetBCView          is a RepSetBC view
                
            Parameter Rules
                NewReplicationSet
                    required                
                                                
            Action Rules
                if (OldPrefix entered
                and ReplicateClassName like (OldPrefix + "*"))
                    NewReplicateClassName = ReplicateClassName - OldPrefix
                else
                    NewReplicateClassName = ReplicateClassName
                    
                if (NewPrefix entered)
                    NewReplicateClassName = NewPrefix + NewReplicateClassName
            
                invoke CreateForCopy RepSetBC
                    assign result to RepSetBCView
                    invoked.ReplicationSet           					= NewReplicationSet
                    invoked.BusinessClass            					= BusinessClass
                    invoked.ReplicateClassName       					= NewReplicateClassName
                    invoked.Condition                					= Condition    

                    invoked.AdditionalCondition		 					= AdditionalCondition


                    invoked.DataToExtract			 					= DataToExtract

                    invoked.DisableIncrementalReplication 				= DisableIncrementalReplication
                    invoked.ParentHierarchyLevels    					= ParentHierarchyLevels
                    invoked.BackfillDate			 					= BackfillDate
                    invoked.OverrideReplicationSetTimeStorageResolution = OverrideReplicationSetTimeStorageResolution
                    invoked.TimeStorageResolution	 					= TimeStorageResolution
                    invoked.Delivered 				 					= false
                    invoked.ColumnarFlattenHierarchy 					= ColumnarFlattenHierarchy
                    invoked.NumberOfHierarchyLevels	 					= NumberOfHierarchyLevels
                    invoked.AlwaysRebuild			 					= AlwaysRebuild
                    invoked.AlsoRepToColumnar							= false
                    invoked.MultiThreadFullReplications					= MultiThreadFullReplications
                    invoked.MultiThreadNumThreads						= MultiThreadNumThreads
                    invoked.MultiThreadField							= MultiThreadField
                    
                    if (Inactive) 
                    	invoked.Inactive 								= Inactive

                for each RepSetBCField set
                    invoke Copy each
                        invoked.NewReplicationSet    = NewReplicationSet    
                        invoked.NewRepSetBC          = RepSetBCView.RepSetBC
                        
                for each RepSetBCClientField set
                	invoke Copy each
                		invoked.NewReplicationSet 	 = NewReplicationSet
                		invoked.NewRepSetBC			 = RepSetBCView.RepSetBC
                        
                for each RepSetBCRelatedReplicate set
                    invoke Create RepSetBCRelatedReplicate                    
                        invoked.ReplicationSet       = NewReplicationSet
                        invoked.RepSetBC             = RepSetBCView.RepSetBC
                        invoked.RelatedLink          = each.RelatedLink
                        
        ValidateData is an Instance Action
        	run in background
        	valid when (CanValidateData)
        		"<ValidateDataInvalidMessage>"
        	Parameters
        		ParamOverride 			is Boolean
        			default label is "OverrideOffsetOptions"
        		ParamOffsetOptions		is a RepSetBCValidateOffset
        			default label is "OffsetOptions"
        		ParamSendNotification	is Boolean
        			default label is "SendNotificationUponCompletion"
        		ParamValidateMethod		is Numeric size 1
        			States
        				ValidateColumnar	value is 1
        				ValidateDataLake 	value is 2

    		Parameter Rules
    			ParamOffsetOptions
    				initial value is ValidationInfo.OffsetOptions
    				
    				if (not ValidationInfo.ValidateAllData)
	    				if (ParamOverride)
	    					required
	    				else
	    					ParamOffsetOptions = ValidationInfo.OffsetOptions
	    					
	    			if (NewArchiveDataRefreshStampRel exists)
						confirmation required
							"NotAllArchivedDataRecordsFor_'<BusinessClass>'_haveBeenSentToTheArchiveStore.TheseAreNotIncludedInValidationAndMayCauseFalseMismatchIdentification."
				ParamValidateMethod
					initial value is DerivedValidationMethod
	    					
    		Local Fields
    			LocalFromDate 					is Date
    			LocalVal 	  					is Numeric size 2
    			LocalStartTime					is TimeStamp
    			LocalRepSetBCValidationResult 	is a RepSetBCValidationResult
    			
			Entrance Rules
				LocalStartTime = system current timestamp
				
				if (ValidationInfo.ValidateAllData)
					constraint (BackfillDate not entered)
						"CannotValidateDataWithBackFillDateEntered"
				else
					if (ParamOffsetOptions.OffsetOption.SpecificDate)
						LocalFromDate = ParamOffsetOptions.SpecificDate
					else
						LocalFromDate = current corporate date
						
						if (ParamOffsetOptions.OffsetOption.OffsetDays)
							LocalFromDate = LocalFromDate - ParamOffsetOptions.OffsetDays 
						else
						if (ParamOffsetOptions.OffsetOption.ThisWeek)
							LocalVal = ((LocalFromDate corporate week day) - 1)
							LocalFromDate = LocalFromDate - LocalVal 
						else
						if (ParamOffsetOptions.OffsetOption.ThisMonth)
							LocalVal = ((LocalFromDate day) - 1)
							LocalFromDate = LocalFromDate - LocalVal 




















						else
						if (ParamOffsetOptions.OffsetOption.ThisYear)
							LocalVal = ((LocalFromDate month) - 1)
							LocalFromDate = LocalFromDate - LocalVal as months 
							LocalVal = ((LocalFromDate day) - 1)
							LocalFromDate = LocalFromDate - LocalVal 
							
					constraint (BackfillDate not entered or BackfillDate corporate date < LocalFromDate)
						"OffsetDataCannotOverlapWithBackFillDate"
						

    			
			Exit Rules 
				if (ParamSendNotification and LocalRepSetBCValidationResult entered and LocalRepSetBCValidationResult exists)
					invoke Create UserNotification
	                    invoked.SourceObject = reference to LocalRepSetBCValidationResult
	                    invoked.Actor = actor
	                    invoked.SourceType = 6 
	                    invoked.NavigationName = "ViewResults"
	                    
	                    if (LocalRepSetBCValidationResult.RepSetBCVRRecordMismatch set exists)
	                    	invoked.Description = ValidationFailedMessage
	                    else
	                    	invoked.Description = ValidationPassedMessage
        	
        ReplicateLoop is an Instance Action
			run in background
        	restricted
        	valid when (ReplicationSet.InProcess)
			
			Queue Mapping Fields
				ReplicationSet
				BusinessClass
        	
        	Local Fields
				ReplLocalThreadNum	is Numeric size 2
				LocalRequestId  is UniqueID
				LocalBackgroundGroup is AlphaUpper size 34
        	
        	Entrance Rules
        		invoke LockReplicateLoop
        			
        	Action Rules
        		ReplLocalThreadNum = 0
        		LocalBackgroundGroup = ReplicationSet + RepSetBC
        	
        		if (MultiThreadFullReplications
        		and (not IncrementalReplication 
				or   DisableIncrementalReplication 
				or   not ReplicationSet.LastRefreshStamp entered))
					invoke Create RepSetBCHistory	
						invoked.ReplicationSet 				 = ReplicationSet
						invoked.RepSetBC 					 = RepSetBC
						invoked.RepSetBCHistory.Backfill 	 = 0 
						invoked.RepSetBCHistory.HistoryStamp = ReplicationSet.AdjustedCurrentRefreshStamp 

					initialize MultiThreadSchemaBuilt

        			while (ReplLocalThreadNum < MultiThreadNumThreads)
        				invoke Replicate in background group (LocalBackgroundGroup)
        					invoked.PrmThreadNum = ReplLocalThreadNum
    					ReplLocalThreadNum = ReplLocalThreadNum + 1
    					
    				invoke SetFinished in background group (ReplicationSet)
    					run after background group (LocalBackgroundGroup)
				else
					invoke Replicate in background group (ReplicationSet)
						invoked.PrmThreadNum = -1
						
		LockReplicateLoop is an Instance Action 
			restricted                          
			
			Entrance Rules
				constraint (not ReplicateLoopLocked)
					"ReplicationSet<ReplicationSet>,Sequence<RepSetBC>,BusinessClass<BusinessClass>,ReplicateClassName<ReplicateClassName>ReplicateLoopIsAlreadyLocked.ThisPotentiallyIndicatesADuplicateThread."

			
		UnlockReplicateLoop is an Instance Action
			restricted	

            		
        ForceUnlockReplicateLoop is an Instance Action
        	valid when (ReplicateLoopLocked)
        	confirmation required
				"ReplicateLoopShouldOnlyBeUnlockedIfYouAreCertainItIsNotActivelyProcessing.AreYouSure?"
        	
        	Action Rules
        		invoke UnlockReplicateLoop
        		
       	LockReplicateThread is an Instance Action 
			restricted
			
			Parameters
				PrmThreadNum is Numeric size 2
					default label is "ThreadNumber"
			
			Entrance Rules
				if (PrmThreadNum < 0)
					LocalThreadNum = 0
				else
					LocalThreadNum = PrmThreadNum
				
				constraint (not ReplicateThreadLocked)
					"ReplicationSet<ReplicationSet>,Sequence<RepSetBC>,BusinessClass<BusinessClass>,ReplicateClassName<ReplicateClassName>ReplicateThread<LocalThreadNum>IsAlreadyLocked.ThisPotentiallyIndicatesADuplicateThread."

			
			Exit Rules
				LocalThreadNum = -1
			
		UnlockReplicateThread is an Instance Action
			restricted	
			
			Parameters
				PrmThreadNum is Numeric size 2
					default label is "ThreadNumber"
			
			Entrance Rules
				if (PrmThreadNum < 0)
					LocalThreadNum = 0
				else
					LocalThreadNum = PrmThreadNum

            
            Exit Rules
            	LocalThreadNum = -1
            	
        UnlockAllReplicateThreads is an Instance Action
			restricted	
			
			Parameters
				WasIncremental is Boolean
				    default label is "Incremental"
			
			Local Fields
				ReplLocalThreadNum	is Numeric size 2
				
			Action Rules
				ReplLocalThreadNum = 0
				

				if (MultiThreadFullReplications and (DisableIncrementalReplication or not IncrementalReplication or not WasIncremental))
					while (ReplLocalThreadNum < MultiThreadNumThreads)
        				invoke UnlockReplicateThread
        					invoked.PrmThreadNum = ReplLocalThreadNum
    					ReplLocalThreadNum = ReplLocalThreadNum + 1
    			else
    				invoke UnlockReplicateThread
    					invoked.PrmThreadNum = 0
    	
    	
    	LockArchiveBackfill is an Instance Action 
			restricted                          
			
			Entrance Rules
				constraint (not ReplicateLoopLocked)
					"ReplicationSet<ReplicationSet>,Sequence<RepSetBC>,BusinessClass<BusinessClass>,ReplicateClassName<ReplicateClassName>ArchiveBackfillIsAlreadyLocked.ThisPotentiallyIndicatesADuplicateThread."

			
		UnlockArchiveBackfill is an Instance Action
			restricted	

            		
        ForceUnlockArchiveBackfill is an Instance Action
        	valid when (ArchiveBackfillLocked)
        	confirmation required
				"ReplicateArchiveBackfillShouldOnlyBeUnlockedIfYouAreCertainItIsNotActivelyProcessing.AreYouSure?"
        	
        	Action Rules
        		invoke UnlockArchiveBackfill
    	
    	
    	LockArchiveBackfillThread is an Instance Action 
			restricted
			
			Parameters
				PrmThreadNum is Numeric size 2
					default label is "ThreadNumber"
			
			Entrance Rules
				if (PrmThreadNum < 0)
					LocalThreadNum = 0
				else
					LocalThreadNum = PrmThreadNum
				
				constraint (not ReplicateThreadLocked)
					"ReplicationSet<ReplicationSet>,Sequence<RepSetBC>,BusinessClass<BusinessClass>,ReplicateClassName<ReplicateClassName>ArchiveBAckfillReplicateThread<LocalThreadNum>IsAlreadyLocked.ThisPotentiallyIndicatesADuplicateThread."

			
			Exit Rules
				LocalThreadNum = -1
    	
    	UnlockArchiveBackfillThread is an Instance Action
			restricted	
			
			Parameters
				PrmThreadNum is Numeric size 2
					default label is "ThreadNumber"
			
			Entrance Rules
				if (PrmThreadNum < 0)
					LocalThreadNum = 0
				else
					LocalThreadNum = PrmThreadNum

            
            Exit Rules
            	LocalThreadNum = -1
            	
    	
    	UnlockAllArchiveBackfillThreads is an Instance Action
			restricted	
			default label is untranslatable
			
			Parameters
				SetComplete is Boolean
					default label is untranslatable
			
			Local Fields
				ReplLocalThreadNum	is Numeric size 2
				
			Action Rules
				ReplLocalThreadNum = 0
				
				if (MultiThreadFullReplications)
					while (ReplLocalThreadNum < MultiThreadNumThreads)
        				invoke UnlockArchiveBackfillThread
        					invoked.PrmThreadNum = ReplLocalThreadNum
    					ReplLocalThreadNum = ReplLocalThreadNum + 1
    			else
    				invoke UnlockArchiveBackfillThread
    					invoked.PrmThreadNum = 0
    					
    			if (SetComplete)
    				ArchiveBackfillCompleteStamp = DerArchiveBackfillStamp
    				initialize ArchiveBackfillRestartInformation	
					initialize ArchiveBackfillRestartData
    				
    				if (MultiThreadFullReplications and RepSetBCArchiveBackfillHistoryInstance exists)
    					invoke Update RepSetBCArchiveBackfillHistoryInstance
							invoked.Finished = update stamp 
    			
    			initialize ArchiveBackfillToStamp
    			
		Replicate is an Instance Action 
			run in background
			restricted
			valid when (ReplicationSet.InProcess)
			
			Parameters
				PrmThreadNum is Numeric size 2
					default label is "ThreadNumber"
			
			Queue Mapping Fields
				ReplicationSet
				BusinessClass
			
			Entrance Rules
				constraint (not SynchronizeRecordCountLocked)
					"A_'SynchronizeRecordCount'_isInProcess.ReplicationCannotRunUntilComplete."
				invoke LockReplicateThread 
					invoked.PrmThreadNum = PrmThreadNum
					
				if (DisableIncrementalReplication and ExpectedNumberOfRecordsIsValid) 
					initialize ExpectedNumberOfRecords
				
				LocalStarted = system current timestamp
				
				if (not Inactive
				and ColumnarFlattenHierarchy
				and (PrmThreadNum = -1
				or   PrmThreadNum = 0)
				and (AlwaysRebuild
				or   not IncrementalReplication 
				or   DisableIncrementalReplication 
				or   not ReplicationSet.LastRefreshStamp entered))
					invoke ReplicateFlattenedHierarchy in background group (ReplicationSet)
				

			Exit Rules
				NonHistoricalChangeOptimizationEligible = LocalNonHistChangeOptEligible
				
				if (ExpectedNumberOfRecordsIsValid)
					ExpectedNumberOfRecords = ExpectedNumberOfRecords + LocalNumberCreated + LocalBackFillUpdateAsDelete - LocalNumberDeleted
						
				if (ReplicationSet.CurrentRefreshStamp entered 
				and (ReplicationSet.MaintainHistoryCount > 0
				or   LocalReplicationWarnings entered))
					if (PrmThreadNum = -1)
						if (not RepSetBCHistoryInstance exists) 
							invoke Create RepSetBCHistory				
								invoked.ReplicationSet 				 = ReplicationSet
								invoked.RepSetBC 					 = RepSetBC
								invoked.RepSetBCHistory.Backfill 	 = 0 
								invoked.RepSetBCHistory.HistoryStamp = ReplicationSet.AdjustedCurrentRefreshStamp 
								invoked.RecordCount					 = LocalRecordCount 
								invoked.Segments		 	 		 = LocalSegments    
								invoked.Started						 = LocalStarted     
								invoked.NumberCreated				 = LocalNumberCreated 
								invoked.NumberUpdated				 = LocalNumberUpdated 
								invoked.NumberDeleted				 = LocalNumberDeleted 
								invoked.BackfillUpdateCreates		 = LocalBackFillUpdateAsDelete 
								invoked.Finished					 = LocalFinished    
								invoked.ReplicationWarnings			 = LocalReplicationWarnings 
								
								if (ExpectedNumberOfRecordsIsValid)
									invoked.ExpectedNumberOfRecords	 = ExpectedNumberOfRecords
						else
							invoke Update RepSetBCHistoryInstance
								invoked.RecordCount				= LocalRecordCount 
								invoked.Segments				= LocalSegments    
								invoked.NumberCreated			= LocalNumberCreated 
								invoked.NumberUpdated			= LocalNumberUpdated 
								invoked.NumberDeleted			= LocalNumberDeleted 
								invoked.BackfillUpdateCreates	= LocalBackFillUpdateAsDelete 
								invoked.Started					= LocalStarted     
								invoked.Finished				= LocalFinished    
								invoked.ReplicationWarnings		= LocalReplicationWarnings 
								
								if (ExpectedNumberOfRecordsIsValid)
									invoked.ExpectedNumberOfRecords	 = ExpectedNumberOfRecords
					else
						if (RepSetBCHistoryInstance exists) 
							invoke UpdateForLoop RepSetBCHistoryInstance
								invoked.PrmRecordCount				= LocalRecordCount 
								invoked.PrmSegments					= LocalSegments	   
								invoked.PrmNumberCreated			= LocalNumberCreated 
								invoked.PrmNumberUpdated			= LocalNumberUpdated 
								invoked.PrmNumberDeleted			= LocalNumberDeleted 
								invoked.PrmBackfillUpdateCreates	= LocalBackFillUpdateAsDelete 
								invoked.PrmStarted					= LocalStarted	   
								invoked.PrmReplicationWarnings 		= LocalReplicationWarnings 
								
								if (ExpectedNumberOfRecordsIsValid)
									invoked.PrmExpectedNumberOfRecords = LocalNumberCreated + LocalBackFillUpdateAsDelete - LocalNumberDeleted
				
				invoke UnlockReplicateThread
					invoked.PrmThreadNum = PrmThreadNum
							
		SetFinished is an Instance Action
			run in background
			restricted
			
			Queue Mapping Fields
				ReplicationSet
				BusinessClass
			
			Action Rules
				if (RepSetBCHistoryInstance exists)
					if (ReplicationSet.CurrentRefreshStamp entered  
					and (ReplicationSet.MaintainHistoryCount > 0
					or   RepSetBCHistoryInstance.ReplicationWarnings entered))
						invoke Update RepSetBCHistoryInstance
							invoked.Finished = update stamp 
					else
						invoke Delete RepSetBCHistoryInstance
							
		InvokeReplicateFlattenedHierarchy is an Instance Action
			run in background
			restricted
			valid when (ReplicationSet.InProcess)
			
			Queue Mapping Fields
				ReplicationSet
				BusinessClass
			
			Exit Rules
				invoke ReplicateFlattenedHierarchy in background group (ReplicationSet)				
							
		ReplicateFlattenedHierarchy is an Instance Action
			run in background
			restricted
			valid when (ReplicationSet.InProcess)
	
			Queue Mapping Fields
				ReplicationSet
				BusinessClass
				
		ReplicateSet is a Set Action
			restricted
			Parameters
				ParamReplicationSet			is a ReplicationSet
					default label is "ReplicationSet"

			Parameter Rules
				ParamReplicationSet
					required
				
			Instance Selection
				where (ReplicationSet = ParamReplicationSet and not Inactive)
			
			Sort Order
				ReplicationSet
				BusinessClass
				
			Action Rules
				Empty Set Rules
					invoke UnlockReplicationSet ParamReplicationSet in background
						run after background group (ParamReplicationSet)
						invoked.SkipUnlockRequests = true
				
				Instance Rules
					invoke ReplicateLoop in background group (ParamReplicationSet)
							
				Set Rules
					
					Exit Rules
						invoke UnlockReplicationSet ParamReplicationSet in background
							run after background group (ParamReplicationSet)
							invoked.SkipUnlockRequests = true

		BackfillData is an Instance Action 
			run in background
				schedule concurrency is NoActionGroupConcurrency 
				initial misfire strategy is DoNothing
			synchronized on "<ReplicationSet>_<ReplicateClassName>" 
			valid when (CanRunBackfill)
			
			Parameters
				FromDate 				is TimeStamp
				OffsetDays 				is Numeric size 3
				
			Local Fields				
				LocalBackFillFromDate 	is TimeStamp
										
			Parameter Rules
				FromDate   
					if (not OffsetDays entered)
						required	
							"MustEnterFromDateOrOffset"
						
						constraint (FromDate < BackfillDate)
							"<FromDate label>MustBeBefore<BackfillDate label>"
						
						LocalBackFillFromDate = FromDate
					else
						LocalBackFillFromDate = BackfillDate - (OffsetDays * 86400) 
			
				OffsetDays
					constraint (not FromDate entered)
						"CannotEnterBothFromDateAndOffset"				
			
			Queue Mapping Fields
				ReplicationSet
				BusinessClass
				
			Entrance Rules
				LocalStarted = system current timestamp
				if (not BackfillIncomplete)
					invoke SetInProcessBackfill
			

			
			Exit Rules
				if (ReplicationSet.MaintainHistoryCount > 0
				or  LocalReplicationWarnings entered)
					if (not RepSetBCBackfillHistoryInstance exists) 
						invoke Create RepSetBCHistory				
							invoked.ReplicationSet 				 = ReplicationSet
							invoked.RepSetBC 					 = RepSetBC
							invoked.RepSetBCHistory.Backfill  	 = 1 
							invoked.RepSetBCHistory.HistoryStamp = BackfillDate
							invoked.BackfillFrom				 = LocalBackFillFromDate
							invoked.RecordCount					 = LocalRecordCount 
							invoked.Segments					 = LocalSegments    
							invoked.NumberCreated				 = LocalNumberCreated 
							invoked.NumberUpdated				 = LocalNumberUpdated 
							invoked.NumberDeleted				 = LocalNumberDeleted 
							invoked.BackfillUpdateCreates		 = LocalBackFillUpdateAsDelete 
							invoked.Started						 = LocalStarted     
							invoked.Finished					 = LocalFinished    
							invoked.ReplicationWarnings			 = LocalReplicationWarnings 
					else
						invoke Update RepSetBCBackfillHistoryInstance
							invoked.BackfillFrom			= LocalBackFillFromDate
							invoked.RecordCount				= LocalRecordCount 
							invoked.Segments				= LocalSegments    
							invoked.NumberCreated			= LocalNumberCreated 
							invoked.NumberUpdated			= LocalNumberUpdated 
							invoked.NumberDeleted			= LocalNumberDeleted 
							invoked.BackfillUpdateCreates	= LocalBackFillUpdateAsDelete 
							invoked.Started					= LocalStarted     
							invoked.Finished				= LocalFinished    
							invoked.ReplicationWarnings		= LocalReplicationWarnings 
			
				if (ExpectedNumberOfRecordsIsValid)	
					ExpectedNumberOfRecords = ExpectedNumberOfRecords + LocalNumberCreated + LocalBackFillUpdateAsDelete - LocalNumberDeleted 
				
				BackfillDate = LocalBackFillFromDate
				invoke ClearBackfillRestartInformation

		BackfillArchiveData is an Instance Action
			run in background
				schedule concurrency is NoActionGroupConcurrency 
				initial misfire strategy is DoNothing
			valid when (CanRunArchiveBackfill)
			
			Local Fields
				ReplLocalThreadNum	is Numeric size 2
				LocalBackgroundGroup is AlphaUpper size 54
			
			Queue Mapping Fields
				ReplicationSet
				BusinessClass
				
			Entrance Rules
				if (ArchiveBackfillActionGroupID != CurrentArchiveBackfillActionGroupID)
					constraint (not ArchiveBackfillActionGroupID entered or not ArchiveBackfillActionGroupActive)
						"IncompleteBackfillArchiveDataExistsAndMustComplete"

					ArchiveBackfillActionGroupID = CurrentArchiveBackfillActionGroupID
					
				if (DerArchiveBackfillStamp != ArchiveBackfillToStamp)
					ArchiveBackfillToStamp = DerArchiveBackfillStamp
					
				constraint (not NewArchiveDataRel exists)
					"ArchivedDataRecordsFor_'<BusinessClass>'_thatWouldBeIncludedHaveNotYetBeenSentToTheArchive."
					
				if (ErrorArchiveDataRel exists)
					confirmation required
						"ArchivedDataRecordsFor_'<BusinessClass>'_thatContainErrorsExist.Continue?"
						log untranslatable:"ReplicationsSet<ReplicationSet>,BusinessClass<BusinessClass>,ReplicateName<ReplicateClassName>ArchiveBackfillApprovedWithArchivedDataRecordsInError"
				
				if (DisabledArchiveDataRel exists)
					confirmation required
						"ArchivedDataRecordsFor_'<BusinessClass>'_thatAreDisabledAndWillNotBeSentToTheArchiveExist,ValidationDoesNotHaveAccessToThoseRecords.Continue?"
						log untranslatable:"ReplicationsSet<ReplicationSet>,BusinessClass<BusinessClass>,ReplicateName<ReplicateClassName>ArchiveBackfillApprovedWithArchivedDataRecordsInDisabledState"
										
				invoke LockArchiveBackfill
					
				if (DisableIncrementalReplication and ExpectedNumberOfRecordsIsValid) 
					initialize ExpectedNumberOfRecords
					
				if (not ArchiveBackfillIncomplete)
					invoke SetInProcessArchiveBackfill
			
			Action Rules
        		ReplLocalThreadNum = 0
        		LocalBackgroundGroup = "BackfillArchiveData_" + ReplicationSet + RepSetBC
        	
        		if (MultiThreadFullReplications
        		and ReplicationSet.MaintainHistoryCount > 0)
						invoke Create RepSetBCHistory	
							invoked.ReplicationSet 				 = ReplicationSet
							invoked.RepSetBC 					 = RepSetBC
							invoked.RepSetBCHistory.Backfill 	 = 2 
							invoked.RepSetBCHistory.HistoryStamp = ArchiveBackfillToStamp
	
        			while (ReplLocalThreadNum < MultiThreadNumThreads)
        				invoke BackfillArchiveDataThread in background group (LocalBackgroundGroup)
        					invoked.PrmThreadNum = ReplLocalThreadNum
    					ReplLocalThreadNum = ReplLocalThreadNum + 1
				else
					invoke BackfillArchiveDataThread in background group (LocalBackgroundGroup)
						invoked.PrmThreadNum = -1
						
			Exit Rules
				invoke UnlockAllArchiveBackfillThreads in background
						run after background group (LocalBackgroundGroup)
						invoked.SetComplete = true
			
		BackfillArchiveDataThread is an Instance Action 
			run in background
			restricted
			default label is untranslatable
			valid when (ArchiveBackfillRestartInformation entered)
			
			Parameters
				PrmThreadNum is Numeric size 2
					default label is "ThreadNumber"
		
			Queue Mapping Fields
				ReplicationSet
				BusinessClass
				
			Entrance Rules
				invoke LockArchiveBackfillThread 
					invoked.PrmThreadNum = PrmThreadNum
				
				LocalStarted = system current timestamp

			
			Exit Rules
				if (ExpectedNumberOfRecordsIsValid)
					ExpectedNumberOfRecords = ExpectedNumberOfRecords + LocalNumberCreated + LocalBackFillUpdateAsDelete - LocalNumberDeleted

				if (ReplicationSet.MaintainHistoryCount > 0
				or  LocalReplicationWarnings entered)
					if (PrmThreadNum = -1)
						if (not RepSetBCBackfillHistoryInstance exists) 
							invoke Create RepSetBCHistory				
								invoked.ReplicationSet 				 = ReplicationSet
								invoked.RepSetBC 					 = RepSetBC
								invoked.RepSetBCHistory.Backfill 	 = 2 
								invoked.RepSetBCHistory.HistoryStamp = ArchiveBackfillToStamp	
								invoked.RecordCount					 = LocalRecordCount 
								invoked.Segments		 	 		 = LocalSegments    
								invoked.Started						 = LocalStarted     
								invoked.NumberCreated				 = LocalNumberCreated 
								invoked.NumberUpdated				 = LocalNumberUpdated 
								invoked.NumberDeleted				 = LocalNumberDeleted 
								invoked.BackfillUpdateCreates		 = LocalBackFillUpdateAsDelete 
								invoked.Started						 = LocalStarted     
								invoked.Finished					 = LocalFinished    
								invoked.ReplicationWarnings			 = LocalReplicationWarnings 
								
								if (ExpectedNumberOfRecordsIsValid)
									invoked.ExpectedNumberOfRecords	 = ExpectedNumberOfRecords
						else
							invoke Update RepSetBCBackfillHistoryInstance
								invoked.RecordCount				= LocalRecordCount 
								invoked.Segments				= LocalSegments    
								invoked.NumberCreated			= LocalNumberCreated 
								invoked.NumberUpdated			= LocalNumberUpdated 
								invoked.NumberDeleted			= LocalNumberDeleted 
								invoked.BackfillUpdateCreates	= LocalBackFillUpdateAsDelete 
								invoked.Started					= LocalStarted     
								invoked.Finished				= LocalFinished    
								invoked.ReplicationWarnings		= LocalReplicationWarnings 
								
								if (ExpectedNumberOfRecordsIsValid)
									invoked.ExpectedNumberOfRecords	 = ExpectedNumberOfRecords
					else
						if (RepSetBCBackfillHistoryInstance exists) 
							invoke UpdateForLoop RepSetBCHistoryInstance
								invoked.PrmRecordCount				= LocalRecordCount 
								invoked.PrmSegments					= LocalSegments	   
								invoked.PrmNumberCreated			= LocalNumberCreated 
								invoked.PrmNumberUpdated			= LocalNumberUpdated 
								invoked.PrmNumberDeleted			= LocalNumberDeleted 
								invoked.PrmBackfillUpdateCreates	= LocalBackFillUpdateAsDelete 
								invoked.PrmStarted					= LocalStarted	   
								invoked.PrmReplicationWarnings 		= LocalReplicationWarnings 
								
								if (ExpectedNumberOfRecordsIsValid)
									invoked.PrmExpectedNumberOfRecords = LocalNumberCreated + LocalBackFillUpdateAsDelete - LocalNumberDeleted
				
				invoke UnlockArchiveBackfillThread
					invoked.PrmThreadNum = PrmThreadNum
				
		FixEnableIndicator is a Set Action
			restricted
			run in background
			
			Sort Order is primary
			
			Action Rules
				Instance Rules
					if (EnableIndicator and not BusinessClass.HasIncrementalReplicationIndicator)
						EnableIndicator = false
		

		SetInactive is an Instance Action
			restricted
			Parameters
				ParamInactive is Boolean
					default label is "Inactive"
				
			Action Rules
				Inactive = ParamInactive
				
		LockSynchronizeRecordCount is an Instance Action
			restricted                          
			
			Entrance Rules
				constraint (not SynchronizeRecordCountLocked)
					"ReplicationSet<ReplicationSet>,Sequence<RepSetBC>,BusinessClass<BusinessClass>,ReplicateClassName<ReplicateClassName>SynchronizeRecordCountIsAlreadyLocked.ThisPotentiallyIndicatesADuplicateThread."

			
		UnlockSynchronizeRecordCount is an Instance Action
			restricted	

            		
        ForceUnlockSynchronizeRecordCount is an Instance Action
        	valid when (SynchronizeRecordCountLocked)
        	confirmation required
				"SynchronizeRecordCountShouldOnlyBeUnlockedIfYouAreCertainItIsNotActivelyProcessing.AreYouSure?"
        	
        	Action Rules
        		invoke UnlockSynchronizeRecordCount
        		
		SynchronizeRecordCount is an Instance Action 
			valid when (CanSynchronizeRecordCount)
			synchronized on untranslatable:"SyncRecordCount<ReplicationSet>_<ReplicateClassName>" 
			run in background
			refresh and lock this instance
			
			Parameters
				ParamDummy is Boolean 
					default label is untranslatable:"Dummy"
			
			Local Fields
				LocLastRefresh is TimeStamp
			
			Entrance Rules
        		invoke LockSynchronizeRecordCount
				LocLastRefresh = ReplicationSet.LastRefreshStamp
			

			Exit Rules
        		invoke UnlockSynchronizeRecordCount
						
