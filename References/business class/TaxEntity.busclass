TaxEntity is a BusinessClass
    owned by tx
    prefix is TXE


    Ontology
        symbolic key is TaxEntity


    Patterns
        implements StaticJava
        disable AuditIndex
        implements BODId

    Persistent Fields

        Name
        ThirdParty
        UseTaxCodeAccounts     is Boolean

        TaxInputAccount        is a FinanceCodeBlockFull 
            classic name for TaxInputAccount.AccountingUnit is INP-ACCT-UNIT
            classic name for TaxInputAccount.GeneralLedgerChartAccount is INP-ACCOUNT
        TaxOutputAccount       is a FinanceCodeBlockFull 
            classic name for TaxOutputAccount.AccountingUnit is OUT-ACCT-UNIT
            classic name for TaxOutputAccount.GeneralLedgerChartAccount is OUT-ACCOUNT
        TaxID
        AccruedOrInvoiced      is AlphaUpper size 1
            classic name is ACCRUAL-FL
            States
                Invoiced value is "I"
                Accrued  value is "A"
        TaxToleranceLimit      is an InternationalAmount
            classic name is TOLERANCE-LMT
        TaxToleranceAmount     is an InternationalAmount
            classic name is TOLERANCE-AMT
        LastTransactionID      is a TransactionSequenceNumber
            classic name is LAST-TRANS-ID
        FromRate
        ThruRate               is Percent size 7.4
        TaxPoint               is AlphaUpper size 1
            States
                InvoiceDate  value is "I"
                ShippingDate value is "S"
                PaymentDate  value is "P"
                GlDate       value is "G"
                    default label is "GlobalLedgerDate"
		VendorGroup
        AccrualCode            is a PayablesAccrualCode
            classic name is ACCR-CODE
        TaxTerms
        LandedCost             is Boolean
            classic name is LAND-COST-FLG
        AllowAccountChanges    is Boolean
            classic name is ALLOW-CHANGE
        NumberOfPeriods        is Numeric size 2
            classic name is NBR-PERIODS
        IntrastatUsed          is Boolean
            classic name is INTRASTAT-IND
        VATRegistrationCountry is a Country
            classic name is VAT-REG-CTRY
        VATRegistrationNumber
            classic name is VAT-REG-NBR
        BranchID               is AlphaUpper size 3
        TaxableAmountEdit      is Boolean
            classic name is TAXABLE-CNTR



        TaxInputDueAccount     is a FinanceCodeBlockFull 
            classic name for TaxInputDueAccount.AccountingUnit is INPDU-ACT-UNIT
            classic name for TaxInputDueAccount.GeneralLedgerChartAccount is INPDU-ACCOUNT



        TaxOutputDueAccount    is a FinanceCodeBlockFull 
            classic name for TaxOutputDueAccount.AccountingUnit is OUTDU-ACT-UNIT
            classic name for TaxOutputDueAccount.GeneralLedgerChartAccount is OUTDU-ACCOUNT
		LastIntrastatNumber is a IntrastatNumber  
		PostOption	

		LastVertexLookupPostalAddress	is a PostalAddressV2	
			holds pii
		LastVertexLookupTaxAreaId		is like TaxCode				
        RecoverableAccount        		is a FinanceCodeBlockFull  	
        NonRecoverableAccount        	is a FinanceCodeBlockFull  	
        DefaultFilingCurrency          	is a Currency		   	   	
        ForeignRecoverableAccount  		is a FinanceCodeBlockFull  	
        ForeignNonRecoverableAccount    is a FinanceCodeBlockFull 

      	CallingSystem					
		FilterGroupName					
		FilterGroupOwner				
		HostSystem						
		IsAudited						is Boolean	
		ProductMappingGroupName			
		ProductMappingGroupOwner		
		CompanyRole						



 		UseAsLegalEntity		





		PassToProduceCode		is a PassToProductCode 




		ExternalCompanyId				
		ExternalCompanyIdName			
		VATValidation	



		VertexInvoiceVerificationRequest is Alpha 1	 				 
            States 
                Enabled  value is ""
                Disabled value is "D"
		VertexInvoiceRequest is Alpha 1	 				 
            States
                Enabled  value is ""
                Disabled value is "D"
		VertexAccrualRequest is Alpha 1	 				 
            States
                Enabled  value is ""
                Disabled value is "D"
		VertexQuotationRequest is Alpha 1	 				 
            States
                Enabled  value is ""
                Disabled value is "D"
		VertexPurchaseOrderRequest is Alpha 1	 				 
            States
                Enabled  value is ""
                Disabled value is "D"
		ApprovalRequired		is Boolean	
		TaxDistributionCode					
		DelayTaxProcessing		is Boolean  
		LandNonRecoverable 		is Boolean	
		ReceivablesTaxingLocation	is a TaxingLocation	
		PayablesTaxingLocation		is a TaxingLocation	
		TaxAttributeCode			is a TaxAttribute	
		OneSourceVersionType		is Alpha 1			
			States
				Original			value is blank		
				Generic				value is "G"		
		VertexCallMethod			is Numeric 1 
			States 
				ByLine 				value is 0
				ByTransaction 		value is 1

      	TaxAccrualOverride          is Alpha 1			
			States
				Default				value is blank		
				No					value is "N"		
				Yes					value is "Y"		
			restricted									
		SendAddressOrTaxAreaId is Alpha 1				
			States
				Both			value is blank			 
				AddressOnly		value is "A"
				TaxAreaIDOnly	value is "T"
		TaxAccountForSalesInvoices is Alpha 1 
			States
				TaxOutputAccount 	value is blank
				ARCode				value is "R"
					default label is "ReceivableGlobalLedgerCodeAccount"

	Context Fields
		FSMInboundBODTracker
		
    Derived Fields

        VATNumber is a StringField
            type is Alpha size 14
            classic name is VAT-NBR
            restricted
            VATRegistrationCountry
            VATRegistrationNumber





		RateTotal is a ComputeField
			type is Percent size 7.5
			restricted
			(sum TotalRatesRel.EffectiveRate)

		StateRateTotal is a ComputeField
			type is Percent size 7.5
			(sum StateRatesRel.EffectiveRate)

		CityRateTotal is a ComputeField
			type is Percent size 7.5
			(sum CityRatesRel.EffectiveRate)

		CountyRateTotal is a ComputeField
			type is Percent size 7.5
			(sum CountyRatesRel.EffectiveRate)

		DistrictRateTotal is a ComputeField
			type is Percent size 7.5
			(sum DistrictRatesRel.EffectiveRate)

		CountryRateTotal is a ComputeField
			type is Percent size 7.5
			(sum CountryRatesRel.EffectiveRate)
					
		DefaultLookupKey is a StringField
			type is Alpha 100
			restricted
			"TaxEntity"
			":"
			CurrentTimestamp
			
		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp

		DerivedLastSeqNumber is a DerivedField
			type is Numeric 12
			restricted
			return last LastIntrastatSeqNumberRel.LastIntrastatNumber

		DerivedTotalTaxRate is a DerivedField	
			type is Percent size 7.5
			restricted
			if (OutputTaxRate not entered
			and JurisdictionResultsRel exist)
				return sum JurisdictionResultsRel.EffectiveRate

		DerivedTotalTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (OutputTotalTaxAmount not entered
			and JurisdictionResultsRel exist)
				return sum JurisdictionResultsRel.CalculatedTax
				
		DerivedOutputTaxAreaId is a DerivedField	
			type is like TaxCode
			restricted
			if (ReturnedTaxAreaId not entered)
				return LastVertexLookupTaxAreaId

		GetCountOfTaxTransations	is a DerivedField			
			type is Numeric 10

			return (instance count of TaxTransactionsRel)

	    VatRequestXML is a DerivedField	
	        type is XMLDocument
	        restricted
			VatRequestXML = template.VatTemplate document for this instance

		DerivedAccountingEntity is a DerivedField
			type is Alpha 20
			restricted
			return FinanceEnterpriseGroup + DerivedDelimiter + TaxEntity
			
		DerivedVatReportingLineSource is a DerivedField
			type is Alpha 10
			restricted
			return BODVatReportingLineRel.Source
			
		DerivedVatReportingLineNumber is a DerivedField
			type is Numeric size 3
			restricted
			return LocalVAtBoxNumber
			
		DerivedVATBoxNumber is a DerivedField
			type is Alpha 10
			restricted
			return BODVatReportingLineRel.VATBoxNumber 	 
					
		DerivedBODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Create or action type.Update)
				return "Add"
			else 
			if (action type.Delete)
				return "Delete"
			else
				return "" 			
			
		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			DerivedBODCurrentTimeStamp = system current timestamp
			return DerivedBODCurrentTimeStamp
			
		DerivedBODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 30
			restricted
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"
		 
		DerivedBODItemStatus is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Create)
				return "Open"
			else 
			if (action type.Update)
				return "Open"
			else 
			if (action type.Delete)
				return "Deleted"
			else
				return "" 
				
		DerivedDisplayID is a DerivedField
			type is Alpha 20
			restricted
			return TaxEntity 
			
		DerivedReportType is a DerivedField
			type is Alpha 10
			restricted
			if (VATRegistrationCountry = "ES")
				return "C"
			else 
			if(LocalPrmCountryCode = "MX")
	    		return "Others"
			else
				return "VAT Report"  
			
		DerivedActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Create)
				return "Add"
			else 
			if (action type.Update)
				return "Replace"
			else 
			if (action type.Delete)
				return "Delete"
			else
				return "" 
				
		DerivedTaxUsageCode is a DerivedField
			type is Alpha 10
			restricted
			return BODVatUsageCodeRel.TaxUsageCode
			
		DerivedTaxPeriod is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.TaxPeriod
			
		DerivedTaxYear is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.TaxYear
			
		DerivedTaxTransaction is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.TaxTransaction
			
		DerivedTaxPointDate is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.TaxPointDate
			
		DerivedVendorCustomer is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.VendorCustomer
			
		DerivedTransactionTaxableAmount is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.TransactionTaxableAmount
			
		DerivedTransactionTaxAmount  is a DerivedField
			type is Decimal 8.2
			restricted
			return LocalTransactionTaxAmount
			
		DerivedTransactionInvoiceAmount is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.TransactionInvoiceAmount
			
		DerivedBODTaxID is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.TaxID
			
		DerivedStatus is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.Status
			
		DerivedProcessLevel is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.ProcessLevel
			
		DerivedBODName is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.Name
			
		DerivedCancelSequence is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.CancelSequence
			
		DerivedInvoice is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.Invoice
			
		DerivedSuffix is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.Suffix
			
		DerivedVendorCustomerName is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.VendorCustomerName
			
		DerivedTransactionCurrency is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.TransactionCurrency
			
		DerivedInvoicedOrCreditMemo is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.InvoicedOrCreditMemo
		
		DerivedBTATransactionAmount is a DerivedField
			type is Decimal 8.2
			restricted
			return LocalBTATransactionAmount
		
		DerivedCurrencyRate is a DerivedField
			type is Decimal 8.4
			restricted
			return BODTaxTransactionCalRel.CurrencyRate
			
		DerivedICOrigCompany is a DerivedField
			type is Alpha 10
			restricted
			return BODTaxTransactionCalRel.InvoiceCompany.OrigCompany
						
		DerivedFinalSUBTAXABLEAMT is a DerivedField
			type is Decimal 8.2
			restricted
			return LocalDerivedFinalSUBTAXABLEAMT
				
		DerivedFinalSUBTAXAMT is a DerivedField
			type is Decimal 8.2
			restricted
			return LocalDerivedFinalSUBTAXAMT
				
		DerivedFinalSUBINVAMT is a DerivedField
			type is Decimal 8.2
			restricted
			return LocalDerivedFinalSUBINVAMT
			
		DerivedEndDate is a DerivedField
			type is Alpha 5
			restricted
			if(LocalPrmToPeriod = 1)
				return "31"
			else 
			if(LocalPrmToPeriod = 2)
				return "28"
			else 
			if(LocalPrmToPeriod = 3)
				return "31"
			else 
			if(LocalPrmToPeriod = 4)
				return "30"
			else 
			if(LocalPrmToPeriod = 5)
				return "31"
			else 
			if(LocalPrmToPeriod = 6)
				return "30"
			else 
			if(LocalPrmToPeriod = 7)
				return "31"
			else 
			if(LocalPrmToPeriod = 8)
				return "31"
			else 
			if(LocalPrmToPeriod = 9)
				return "30"
			else 
			if(LocalPrmToPeriod = 10)
				return "31"
			else 
			if(LocalPrmToPeriod = 11)
				return "30"
			else 
			if(LocalPrmToPeriod = 12)
				return "31"
								
		DerivedEffectiveMonth is a DerivedField
			type is Alpha 5
			restricted
			if(LocalPrmFromPeriod = 1)
				return "01"
			else 
			if(LocalPrmFromPeriod = 2)
				return "02"
			else 
			if(LocalPrmFromPeriod = 3)
				return "03"
			else 
			if(LocalPrmFromPeriod = 4)
				return "04"
			else 
			if(LocalPrmFromPeriod = 5)
				return "05"
			else 
			if(LocalPrmFromPeriod = 6)
				return "06"
			else 
			if(LocalPrmFromPeriod = 7)
				return "07"
			else 
			if(LocalPrmFromPeriod = 8)
				return "08"
			else 
			if(LocalPrmFromPeriod = 9)
				return "09"
			else
				return LocalPrmFromPeriod
		
		DerivedEndMonth is a DerivedField
			type is Alpha 5
			restricted
			if(LocalPrmToPeriod = 1)
				return "01"
			else 
			if(LocalPrmToPeriod = 2)
				return "02"
			else 
			if(LocalPrmToPeriod = 3)
				return "03"
			else 
			if(LocalPrmToPeriod = 4)
				return "04"
			else 
			if(LocalPrmToPeriod = 5)
				return "05"
			else 
			if(LocalPrmToPeriod = 6)
				return "06"
			else 
			if(LocalPrmToPeriod = 7)
				return "07"
			else 
			if(LocalPrmToPeriod = 8)
				return "08"
			else 
			if(LocalPrmToPeriod = 9)
				return "09"
			else
				return LocalPrmToPeriod
			
		DerivedEffectiveTimePeriod 	is a DerivedField
			type is Alpha 40
			restricted
			return LocalPrmTaxYear using "%d" + "-" + DerivedEffectiveMonth  + "-" + "01"
			
		DerivedEndTimePeriod is a DerivedField
			type is Alpha 40
			restricted
			return LocalPrmTaxYear using "%d" + "-" + DerivedEndMonth + "-" + DerivedEndDate
				
		DerivedDifference is a DerivedField
			type is Numeric 5
			restricted
			return LocalPrmFromPeriod - LocalPrmToPeriod
			
		DerivedDurationRange is a DerivedField
			type is Alpha 40
			restricted
			if((DerivedDifference = 0) and (LocalPrmCountryCode = "FI"))
				return "P1M"
			else
			if((DerivedDifference <= 2) and (LocalPrmCountryCode = "FI"))
				return "P3M"
			else 
			if((DerivedDifference >= 11) and (LocalPrmCountryCode = "FI"))
				return "P1Y"
			else
			if(((LocalPrmFromPeriod = 1) and (LocalPrmToPeriod = 1)) and (LocalPrmCountryCode = "ES"))
				return "01"
			else
			if(((LocalPrmFromPeriod = 2) and (LocalPrmToPeriod = 2)) and (LocalPrmCountryCode = "ES"))
				return "02"
			else
			if(((LocalPrmFromPeriod = 3) and (LocalPrmToPeriod = 3)) and (LocalPrmCountryCode = "ES"))
				return "03"
			else
			if(((LocalPrmFromPeriod = 4) and (LocalPrmToPeriod = 4)) and (LocalPrmCountryCode = "ES"))
				return "04"
			else
			if(((LocalPrmFromPeriod = 5) and (LocalPrmToPeriod = 5)) and (LocalPrmCountryCode = "ES"))
				return "05"
			else
			if(((LocalPrmFromPeriod = 6) and (LocalPrmToPeriod = 6)) and (LocalPrmCountryCode = "ES"))
				return "06"
			else
			if(((LocalPrmFromPeriod = 7) and (LocalPrmToPeriod = 7)) and (LocalPrmCountryCode = "ES"))
				return "07"
			else
			if(((LocalPrmFromPeriod = 8) and (LocalPrmToPeriod = 8)) and (LocalPrmCountryCode = "ES"))
				return "08"
			else
			if(((LocalPrmFromPeriod = 9) and (LocalPrmToPeriod = 9)) and (LocalPrmCountryCode = "ES"))
				return "09"
			else
			if(((LocalPrmFromPeriod = 10) and (LocalPrmToPeriod = 10)) and (LocalPrmCountryCode = "ES"))
				return "10"
			else
			if(((LocalPrmFromPeriod = 11) and (LocalPrmToPeriod = 11)) and (LocalPrmCountryCode = "ES"))
				return "11"
			else
			if(((LocalPrmFromPeriod = 12) and (LocalPrmToPeriod = 12)) and (LocalPrmCountryCode = "ES"))
				return "12"
			else
			if(((LocalPrmFromPeriod = 1) and (LocalPrmToPeriod = 3)) and (LocalPrmCountryCode = "ES"))
				return "1T"
			else
			if(((LocalPrmFromPeriod = 4) and (LocalPrmToPeriod = 6)) and (LocalPrmCountryCode = "ES"))
				return "2T"
			else
			if(((LocalPrmFromPeriod = 7) and (LocalPrmToPeriod = 9)) and (LocalPrmCountryCode = "ES"))
				return "3T"
			else
			if(((LocalPrmFromPeriod = 10) and (LocalPrmToPeriod = 12)) and (LocalPrmCountryCode = "ES"))
				return "4T"
			else
				return ""
		
		DerivedTaxPeriod2 is a DerivedField
			type is Numeric 2
			restricted	
			if(LocalPrmFromPeriod = LocalPrmToPeriod)
				return LocalPrmFromPeriod
			else
				return LocalPrmFromPeriod+1
				
		DerivedTaxPeriod4 is a DerivedField
			type is Numeric 2
			restricted	
			if(DerivedTaxPeriod2 = LocalPrmToPeriod)
				return DerivedTaxPeriod2
			else
				return DerivedTaxPeriod2+1
				
		DerivedTaxPeriod5 is a DerivedField
			type is Numeric 2
			restricted	
			if(DerivedTaxPeriod4 = LocalPrmToPeriod)
				return DerivedTaxPeriod4
			else
				return DerivedTaxPeriod4+1
				
		DerivedTaxPeriod6 is a DerivedField
			type is Numeric 2
			restricted	
			if(DerivedTaxPeriod5 = LocalPrmToPeriod)
				return DerivedTaxPeriod5
			else
				return DerivedTaxPeriod5+1
				
		DerivedTaxPeriod7 is a DerivedField
			type is Numeric 2
			restricted	
			if(DerivedTaxPeriod6 = LocalPrmToPeriod)
				return DerivedTaxPeriod6
			else
				return DerivedTaxPeriod6+1
				
		DerivedTaxPeriod8 is a DerivedField
			type is Numeric 2
			restricted	
			if(DerivedTaxPeriod7 = LocalPrmToPeriod)
				return DerivedTaxPeriod7
			else
				return DerivedTaxPeriod7+1
				
		DerivedTaxPeriod9 is a DerivedField
			type is Numeric 2
			restricted	
			if(DerivedTaxPeriod8 = LocalPrmToPeriod)
				return DerivedTaxPeriod8
			else
				return DerivedTaxPeriod8+1
				
		DerivedTaxPeriod10 is a DerivedField
			type is Numeric 2
			restricted	
			if(DerivedTaxPeriod9 = LocalPrmToPeriod)
				return DerivedTaxPeriod9
			else
				return DerivedTaxPeriod9+1
				
		DerivedTaxPeriod11 is a DerivedField
			type is Numeric 2
			restricted	
			if(DerivedTaxPeriod10 = LocalPrmToPeriod)
				return DerivedTaxPeriod10
			else
				return DerivedTaxPeriod10+1
				
		DerivedTaxPeriod12 is a DerivedField
			type is Numeric 2
			restricted	
			if(DerivedTaxPeriod11 = LocalPrmToPeriod)
				return DerivedTaxPeriod11
			else
				return DerivedTaxPeriod11+1
					
		DerivedDocumentID is a DerivedField
			type is Alpha 40
			restricted
			return FinanceEnterpriseGroup + DerivedDelimiter + TaxEntity + DerivedDelimiter + LocalPrmTaxYear + DerivedDelimiter + LocalPrmFromPeriod
			
		SupplierPartyTaxIDFR is a DerivedField
			type is XMLDocument
			restricted
			SupplierPartyTaxIDFR = template.IONSyncLCLTaxReport_TaxEntity_SupplierParty_TaxIDFR_ST document for this instance
			
		SupplierPartyTaxIDDefault is a DerivedField
			type is XMLDocument
			restricted
			SupplierPartyTaxIDDefault = template.IONSyncLCLTaxReport_TaxEntity_SupplierParty_TaxIDDefault_ST document for this instance
			
		FinalSupplierPartyTaxIDFR is a DerivedField
			type is XMLDocument
			restricted 
			if(LocalSource = blank and LocalPrmCountryCode = "FR")
				return SupplierPartyTaxIDFR
			else
				if(LocalSource = blank and LocalPrmCountryCode != "FR")
					return SupplierPartyTaxIDDefault
				else
					return ""
					
		DerivedAmount is a DerivedField
			type is Alpha 10
			restricted
			return BODGeneralLedgerCompanyRel.Currency
			
		DerivedAddressCode is a DerivedField
			type is Alpha 40
			restricted
			return BODAccountingEntityRel.AddressCode

		DerivedPostalAddressCountry is a DerivedField
			type is Alpha 40
			restricted 
			return BODAddressCodeRel.PostalAddress.Country
			
		DerivedFinalPostalAddressCountry is a DerivedField
			type is Alpha 10
			restricted
			if (DerivedPostalAddressCountry = "US")
				return "DE"
			else
				return DerivedPostalAddressCountry
			
		DerivedPostalAddressCountryName is a DerivedField
			type is Alpha 40
			restricted
			return BODAddressCodeRel.PostalAddress.Municipality
			
		DerivedFinalPostalAddressCountryName is a DerivedField
			type is Alpha 10
			restricted
			if (DerivedPostalAddressCountryName = "USA")
				return "Malmo"
			else
				return DerivedPostalAddressCountryName
				
		InitiatingPartyTaxIDFR is a DerivedField
			type is XMLDocument
			restricted
			InitiatingPartyTaxIDFR = template.IONSyncLCLTaxReport_TaxEntity_InitiatingParty_TaxIDFR_ST document for this instance
			
		DeclaringPartyTaxIDFR is a DerivedField
			type is XMLDocument
			restricted
			DeclaringPartyTaxIDFR = template.IONSyncLCLTaxReport_TaxEntity_DeclaringParty_TaxIDFR_ST document for this instance
			
		InitiatingPartyTaxIDDefault is a DerivedField
			type is XMLDocument
			restricted
			InitiatingPartyTaxIDDefault = template.IONSyncLCLTaxReport_TaxEntity_InitiatingParty_TaxIDDefault_ST document for this instance
			
		DeclaringPartyTaxIDDefault is a DerivedField
			type is XMLDocument
			restricted
			DeclaringPartyTaxIDDefault = template.IONSyncLCLTaxReport_TaxEntity_DeclaringParty_TaxIDDefault_ST document for this instance		
				
		FinalInitiatingPartyTaxIDFR is a DerivedField
			type is XMLDocument
			restricted 
			if (LocalPrmCountryCode = "FR")
				return InitiatingPartyTaxIDFR + DeclaringPartyTaxIDFR
			else
				return InitiatingPartyTaxIDDefault + DeclaringPartyTaxIDDefault
			
		DerivedIdentificationNumber is a DerivedField
			type is XMLDocument
			restricted 
			if (LocalPrmCountryCode = "FR")
				return "Country/\JurisdictionIdentificationNumber"
			else
				return "TaxIdentificationNumber"
			
		DerivedAddressLine1 is a DerivedField
			type is Alpha 40
			restricted
			return BODAddressCodeRel.PostalAddress.DeliveryAddress.AddressLine1
			
		DerivedAddressLine2 is a DerivedField
			type is Alpha 40
			restricted
			return BODAddressCodeRel.PostalAddress.DeliveryAddress.AddressLine2
			
		DerivedAddressLine3 is a DerivedField
			type is Alpha 40
			restricted 
			return BODAddressCodeRel.PostalAddress.DeliveryAddress.AddressLine3
			
		DerivedAddressLine4 is a DerivedField
			type is Alpha 40
			restricted 
			return BODAddressCodeRel.PostalAddress.DeliveryAddress.AddressLine4
			
		DerivedPostalCode is a DerivedField
			type is Alpha 40
			restricted
			return BODAddressCodeRel.PostalAddress.PostalCode
						
		DerivedRegion is a DerivedField
			type is Alpha 40
			restricted
			return BODAddressCodeRel.PostalAddress.Region
						
		DerivedPersonResponsible is a DerivedField
			type is Alpha 40
			restricted
			return BODAddressCodeRel.PersonResponsible
						
		DerivedFamilyName is a DerivedField
			type is Alpha 40
			restricted
			return	BODEmployeeRel.Name.FamilyName
			
		DerivedGivenName is a DerivedField
			type is Alpha 40
			restricted
			return	BODEmployeeRel.Name.GivenName
				
		DerivedFullName is a DerivedField
			type is Alpha 40
			restricted
			return DerivedGivenName + " " + DerivedFamilyName
			
		DerivedDefaultBODLocation is a DerivedField
			type is AlphaUpper size 20
			return ""
			  
		PROPERTIESXML is a DerivedField
			type is XMLDocument
			restricted
			PROPERTIESXML = template.IONSyncLCLTaxReport_TaxEntity_PROPERTIES_ST document for this instance
			
		DerivedTaxReportLine is a DerivedField
			type is XMLDocument
			restricted
			return LocalTaxReportLine	
		
		DerivedVCountLine is a DerivedField 	
	    	type is Numeric 4
	    	restricted
	    	if(LocalPrmCountryCode = "MX")
	    		return LocalUniqueVendorLength
	    	else 
	    	if(BODVatReportingLineRel exists)
	    		return ( instance count of BODVatReportingLineRel )
	    	else
	    		return ""
	    
	    DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value	
		
		LCLTaxReportXMLBOD is a DerivedField
			type is XMLDocument	
			restricted
			LCLTaxReportXMLBOD = template.IONSyncLCLTaxReport_TaxEntity_ST document for this instance
			
		DerivedBODVariationId is a DerivedField
			type is Alpha 25
			restricted
			return bod id.VariationID 
			
		DerivedNativeBODID is a DerivedField
			type is Alpha 100
			restricted
			return "infor-nid:" + DerivedTenantID + ":" +DerivedAccountingEntity  + ":"+ DerivedDefaultBODLocation + ":" + DerivedDocumentID + ":" + "?LCLTaxReport&verb=Sync&TrackerID="+ LocalFSMInboundBODTracker	
		
		DerivedFunctionalCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			return BODAccountingEntityRel.FunctionalCurrency
			
		DerivedEntityTaxCodes is a DerivedField	
			type is Numeric 6
			restricted
			if (EntityTaxCodeRel exists)
				return instance count of EntityTaxCodeRel
			else
				return 0

		PartialValidationAddress is a StringField	 
			type is Alpha 60
			restricted
			ReturnedValidationAddress.DeliveryAddress.AddressLine1
			" "
			ReturnedValidationAddress.Municipality 
			","
			ReturnedValidationAddress.StateProvince 
			" "
			ReturnedValidationAddress.PostalCode
			" "
			ReturnedValidationAddress.County			
			" "
			ReturnedValidationAddress.Country

		DebugCommentsText  is a DerivedField	  
			type is Alpha 24
			if (TaxConfigurationRel.CommentText entered)
				return "Tax Configuration Comments"
			else
				return blank

		CapturedXmlText is a DerivedField	  
			type is Alpha 18
			if (TaxAreaIdLookupResultsLogRel exists)
				return "Captured Xml Results"
			else
				return blank

	Transient Fields	 
    	TaxCompany			 			is like Company 						
		ReturnedTaxJurisdictions		is a JurisdictionTable

        OutputTotalTaxAmount			is an InternationalAmount
        	derive value from DerivedTotalTaxAmount





		LookupPostalAddress				is a PostalAddressV2	
			holds pii

		LookupTaxCode					is like TaxCode					

		InputTaxCode					is a TaxCode					
		InputTaxCategory				is a ProductTaxCategory
		InputTaxable					is an InternationalAmount
		TaxCalcAndLookup				is Boolean
		EffectiveDate      
			derive value from current corporate date                   
		ObjectReference 				is BusinessObjectReference
			derive value from reference to this instance
		ReturnedTaxAreaId				is like TaxCode

		OutputTaxRate					is Percent size 7.5
			derive value from DerivedTotalTaxRate
		OutputErrorMessage 				is Alpha 200
		OutputErrorNumber 				is Numeric 3
		WebServiceError 				is Boolean
		WebServiceErrorMessage 			is Text
		MultTaxCodesIndicator			is Boolean
		ICountryCode 					is like Country					
		IVatNumber 						is like VATRegistrationNumber 
			holds pii
		IRequesterCountryCode 			is like Country					
		IRequesterVatNumber				is like VATRegistrationNumber 
			holds pii
		ClearLookupAddress				is Boolean
		ReturnedFaultString			is Alpha 50						
		ClientSideError                 is Boolean						


	Local Fields

		LocalBODCurrentTimeStamp		is a BODCurrentTimeStamp	  	 		
        OECompanyPrintOption    		is a TaxCalulationAndPrinting			
		CalculateTax
		VertexResponse 					is a SEnvelopeVertex

		NbrOfResultsRecords				is Numeric 3
		LocalLookupKey 					is Alpha 100 
		LocalTrigger 					is Alpha 1				



		OutputTotalTaxable				is an InternationalAmount
		OutputTotalTaxAmount5DP			is an InternationalAmount
		OutputTotalLandedTaxAmount		is an InternationalAmount
		OutputTotalLandedTaxAmount5DP	is an InternationalAmount
		OutputInvoiceTotal			 	is an InternationalAmount	
		LocalLastTransactionID			is a TransactionSequenceNumber	
		LocalEntityTaxCodeDefault 		is like TaxCode	
		LocalFinanceEnterpriseGroup		is like FinanceEnterpriseGroup
		LocalTaxEntity 					is like TaxEntity		
		ReturnedTaxRate					is Percent size 7.5
		LocalBODTaxPeriod		 		is AlphaUpper size 2
		LocalBODPrmTaxYear		     	is Numeric size 10
		LocalPrmFromPeriod				is Numeric 2
		LocalPrmToPeriod				is Numeric 2
		LocalPrmTaxYear				is Numeric size 10
		LocalPrmCountryCode	        is AlphaUpper size 5
		LocalPrmVatReportID		    is AlphaUpper size 10
		LocalFinalSUBINVAMT 			is Decimal 8.2
		LocalFinalSUBTAXAMT 			is Decimal 8.2
		LocalFinalSUBTAXABLEAMT			is Decimal 8.2
		LocalVatReportingLineSourceValue1 is Alpha 10
		LocalDerivedFinalSUBTAXABLEAMT	    is Decimal 8.2
		LocalDerivedFinalSUBINVAMT			is Decimal 8.2
		LocalDerivedFinalSUBTAXAMT		is Decimal 8.2
		LocalVatReportingLineNumber is Numeric size 3
		LocalVatReportingLineNumber2 is Numeric size 3
		LocalVatReportingLineSummarizeNo is Numeric size 3
		LocalBTATransactionAmount is Decimal 8.2
		LocalTransactionTaxAmount is Decimal 8.2
		LocalTaxReportLine is XMLDocument
		NativeLPLBODTrigger							is Boolean		
		LocalVatUsageCode is Alpha 20
		LocalEffectOnVatBox is Alpha size 5
		LocalVATSummarySequense is Alpha size 5
		LocalTransactionTaxAmount2 is Decimal 8.2
		LocalSubTotalRoundAmount2 is Decimal 8.2
		LocalSource						is Alpha 4
		LocalVAtBoxNumber				is Alpha 3

		LocalTaxInputAccount 					is a FinanceCodeBlockFull
		LocalTaxOutputAccount 					is a FinanceCodeBlockFull
		LocalInputDueAccount 				is a FinanceCodeBlockFull
		LocalOutputDueAccount 				is a FinanceCodeBlockFull
		LocalRecoverableAccount        		is a FinanceCodeBlockFull  	
		LocalNonRecoverableAccount        	is a FinanceCodeBlockFull  		
		LocalForeignRecoverableAccount  	is a FinanceCodeBlockFull  	
		LocalForeignNonRecoverableAccount	is a FinanceCodeBlockFull 		
		LocalNewTaxEntityKey				is like TaxEntity		
		ReturnedValidationAddress			is a PostalAddressV2	
			holds pii
		LocalIterator						is Numeric 9
		LocalICOrigCompany					is Numeric 4
		LocalInvoice						is AlphaUpper 22
		LocalVendorGroup					is AlphaUpper 5
		LocalVendorCustomer					is Numeric size 9 
		LocalInvoiceStatus					is Numeric 1
		LocalVendorName						is Alpha size up to 120
		LocalVendorTaxID					is AlphaUpper size 25
		LocalVendorCountry					is AlphaUpper 3
		LocalVendorCountryName 				is Alpha 40
		LocalTransactionType   				is Alpha 60
		LocalTaxTransInvAmt	   				is Decimal size 19.3 
		LocalTaxTransTaxableAmount 			is Decimal size 19.3
		LocalTaxTransTaxAmt					is Decimal size 19.3
		LocalTaxTransCurrencyRate  			is Decimal size 31.15
		LocalWithHoldAmt		   			is Decimal size 19.3
		LocalVendorArray		   			is an VendorCustomerArray
		LocalVendorExists		   			is Boolean
		LocalUniqueVendorLength	   			is Numeric 9
		LocalInstance			   			is Numeric 9
		LocalCounter			   			is Numeric 9
		LocalVendor				   			is Numeric size 9 
		LocalVatCodeArray 		   			is an VatUsageCodeArray
		LocalVatCodeExists		   			is Boolean
		LocalUniqueVatCodeLength   			is Numeric size 9 
		LocalUniqueTaxRateLength   			is Numeric size 9 
		LocalTaxRateArray          			is an TaxRateArray
		LocalTaxRateExists		   			is Boolean
		LocalTaxRateTrans		   			is Percent size 7.5
		LocalTaxRate			   			is Decimal size 7.2
		LocalTotalTaxTransInvAmt   							is Decimal size 19.3
		LocalTotalTaxTransTaxableAmount 					is Decimal size 19.3
		LocalTotalTaxTransTaxAmt   							is Decimal size 19.3
		LocalTotalZeroExemptTaxTransInvAmt 					is Decimal size 19.3
		LocalTotalZeroExemptTaxTransTaxableAmount 			is Decimal size 19.3
		LocalTotalZeroExemptTaxTransTaxAmt 					is Decimal size 19.3
		LocalTotalZeroExemptActivityTaxTransInvAmt 			is Decimal size 19.3
		LocalTotalZeroExemptActivityTaxTransTaxableAmount 	is Decimal size 19.3
		LocalTotalZeroExemptActivityTaxTransTaxAmt 			is Decimal size 19.3
		LocalTotalZeroExemptImportTaxTransInvAmt 			is Decimal size 19.3
		LocalTotalZeroExemptImportTaxTransTaxableAmount 	is Decimal size 19.3
		LocalTotalZeroExemptImportTaxTransTaxAmt 			is Decimal size 19.3
		LocalZeroTransExemptCount		   					is Numeric size 9
		LocalZeroTransExemptActivityCount		   			is Numeric size 9
		LocalZeroTransExemptImportCount		   				is Numeric size 9
		LocalNonZeroTransCount	   							is Numeric size 9
		LocalCreditReturnCount	   							is Numeric size 9
		LocalWithholdingCount	   							is Numeric size 9
		LocalReportableAmt		   							is Decimal size 19.3
		LocalCrediTransTaxAmount							is Decimal size 19.3
		LocalCrediTransTaxableAmount 						is Decimal size 19.3
		LocalVendorStateProvince   							is AlphaUpper 3
		LocalInvoiceType		   							is AlphaUpper size 1
		LocalVendorReturn		   							is Numeric size 10
		LocalTaxReportMXLine 								is XMLDocument
		LocalTaxReportLineTrans	  							is XMLDocument
		LocalTaxReportLineZeroTransExcempt 					is XMLDocument
		LocalTaxReportLineZeroTransExcemptActivity 			is XMLDocument
		LocalTaxReportLineZeroTransExcemptImport 			is XMLDocument
		LocalTaxReportLineWithHoldTrans  					is XMLDocument
		LocalTaxReportLineCreditTrans    					is XMLDocument
		LocalPayablesVoucherSequence 						is Numeric size 10
		LocalPayablesVoucherPrefix							is AlphaUpper size 4
		LocalHoldCode 										is AlphaUpper 10
		NewBODTracker  										is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker							is Numeric 15
		Error            									is Boolean
	    ErrorMessage     									is Alpha 300
	    LocalConfigurationParameter							is Alpha size up to 200	
	    LocalLookupUsingTaxAreaId							is Boolean
		LocalContinue										is Boolean
		LocalCommentText									is a CommentText
	Rule Blocks
	
		NativeLPLRuleblock
			initialize LocalDerivedFinalSUBTAXABLEAMT
			if (BODVatReportingLineRel exists)
				for each BODVatReportingLineRel
					LocalSource	= each.Source
					LocalVAtBoxNumber	= each.VATBoxNumber
					if(each.Source = "I" or each.Source = "O")
						if (each.Source = "I")
							LocalVatReportingLineSourceValue1 = "AP"
						else	
							if (each.Source = "O")
								LocalVatReportingLineSourceValue1 = "AR"
						LocalVatReportingLineNumber2 = each.VatReportingLine
						initialize LocalBTATransactionAmount
						initialize LocalTransactionTaxAmount
						LocalVatUsageCode  = BODVatUsageCodeRel.TaxUsageCode
						if (BODTaxTransactionCalRel exists)		
							for each BODTaxTransactionCalRel
								initialize LocalFinalSUBTAXABLEAMT
								initialize LocalFinalSUBINVAMT
								initialize LocalFinalSUBTAXAMT
								initialize LocalVatReportingLineNumber
								LocalVatReportingLineNumber = LocalVatReportingLineNumber2
								LocalFinalSUBTAXABLEAMT = (each.BaseTaxable.BaseAmount.TransactionAmount * each.CurrencyRate)
								LocalDerivedFinalSUBTAXABLEAMT += LocalFinalSUBTAXABLEAMT
								LocalFinalSUBINVAMT = (each.BaseInvoiceAmount.TransactionAmount * each.CurrencyRate)
								LocalDerivedFinalSUBINVAMT += LocalFinalSUBINVAMT 
								LocalFinalSUBTAXAMT = (each.BaseTaxAmount.TransactionAmount  * each.CurrencyRate)
								LocalDerivedFinalSUBTAXAMT += LocalFinalSUBTAXAMT
								LocalBTATransactionAmount += (each.BaseTaxable.BaseAmount.TransactionAmount * each.CurrencyRate)
								LocalTransactionTaxAmount += each.TransactionTaxAmount
							LocalTaxReportLine += template.IONSyncLCLTaxReport_TaxEntity_Line_ST document for this instance
					else
						if(each.Source = blank)
							LocalSource	= blank
							LocalVatReportingLineNumber2 = each.VatReportingLine
							initialize LocalBTATransactionAmount
							initialize LocalTransactionTaxAmount
							if (BODVatReportingDetail exists)
								for each BODVatReportingDetail
									LocalEffectOnVatBox = each.EffectOnVatBox
									LocalVATSummarySequense =  each.VatReportingDetail.VATSummarySequense
									LocalVatReportingLineNumber2 = LocalVATSummarySequense
									if (BODVatReportingLineForDetailsRel exists)
										for each BODVatReportingLineForDetailsRel
											if(each.Source = "I" or each.Source = "O")
												if (each.Source = "I")
													LocalVatReportingLineSourceValue1 = "AP"
												else
													if (each.Source =  "O")
														LocalVatReportingLineSourceValue1 = "AR"
												LocalVatUsageCode  = BODVatUsageCodeRel.TaxUsageCode
												if (BODTaxTransactionCalRel exists)		
													for each BODTaxTransactionCalRel
														initialize LocalVatReportingLineNumber
														LocalVatReportingLineNumber = LocalVatReportingLineSummarizeNo
														if(LocalEffectOnVatBox = "+")
															LocalBTATransactionAmount += (each.BaseTaxable.BaseAmount.TransactionAmount * each.CurrencyRate)
															LocalTransactionTaxAmount += each.TransactionTaxAmount
														if(LocalEffectOnVatBox = "-")
															LocalBTATransactionAmount -= (each.BaseTaxable.BaseAmount.TransactionAmount * each.CurrencyRate)
															LocalTransactionTaxAmount -= each.TransactionTaxAmount
											else
												if (each.Source = blank)	
													LocalVatReportingLineSummarizeNo = each.VatReportingLine
													if (BODVatReportingSummarizeDetail exists)
														for each BODVatReportingSummarizeDetail
															LocalEffectOnVatBox = each.EffectOnVatBox
															LocalVATSummarySequense =  each.VatReportingDetail.VATSummarySequense
															LocalVatReportingLineNumber2 = LocalVATSummarySequense
															if (BODVatReportingLineForSummarizeDetailsRel exists)
																for each BODVatReportingLineForSummarizeDetailsRel
																	if (each.Source = "I")
																		LocalVatReportingLineSourceValue1 = "AP"
																	if (each.Source = "O")	
																		LocalVatReportingLineSourceValue1 = "AR"
																	LocalVatUsageCode  = BODVatUsageCodeRel.TaxUsageCode
																	if (BODTaxTransactionCalRel exists)		
																		for each BODTaxTransactionCalRel
																			initialize LocalVatReportingLineNumber
																			LocalVatReportingLineNumber = LocalVatReportingLineSummarizeNo
																			if(LocalEffectOnVatBox = "+")
																				LocalBTATransactionAmount += (each.BaseTaxable.BaseAmount.TransactionAmount * each.CurrencyRate)
																				LocalTransactionTaxAmount += each.TransactionTaxAmount
																			if(LocalEffectOnVatBox = "-")
																				LocalBTATransactionAmount -= (each.BaseTaxable.BaseAmount.TransactionAmount * each.CurrencyRate)
																				LocalTransactionTaxAmount -= each.TransactionTaxAmount	
								LocalTaxReportLine += template.IONSyncLCLTaxReport_TaxEntity_Line_ST document for this instance
		
		NativeLPLMexicoCountryblock
			if (BODVatReportingLineRel exists and LocalPrmCountryCode = "MX")
				for each BODVatReportingLineRel
					LocalSource	= each.Source
					if (each.Source = "I")
						LocalVatReportingLineSourceValue1 = "AP"
					else	
					if (each.Source = "O")
						LocalVatReportingLineSourceValue1 = "AR"
					LocalVatReportingLineNumber2 = each.VatReportingLine
					initialize LocalVendorArray 
					initialize LocalTaxRateArray
					initialize LocalVatCodeArray
					LocalUniqueVendorLength = 0
					LocalUniqueVatCodeLength = 0
					LocalUniqueTaxRateLength = 0
					if(BODTaxTransactionMXCalRel exists)
						for each BODTaxTransactionMXCalRel
							LocalInvoice = each.Invoice
							LocalICOrigCompany	= each.InvoiceCompany.OrigCompany
							LocalVendorCustomer = each.VendorCustomer
							LocalTaxRateTrans = each.TaxRate
							LocalPayablesVoucherSequence = each.VoucherNumber.Sequence
							LocalPayablesVoucherPrefix = each.VoucherNumber.Prefix
							LocalVatUsageCode  = each.TaxCode
							LocalVendorExists = false
							LocalTaxRateExists = false
							LocalVatCodeExists = false
							LocalTaxRate = LocalTaxRateTrans
							if(BODPayablesCompanyRel exists)
								LocalVendorGroup = BODPayablesCompanyRel.VendorGroup
								if(BODPayablesInvoiceRel exists)
									for each BODPayablesInvoiceRel
										LocalIterator = 1
										LocalCounter = 1
										LocalInstance = 1
										while(LocalIterator <= LocalUniqueVendorLength)
											if(LocalVendorCustomer = LocalVendorArray.Vendor[LocalIterator])
												LocalVendorExists = true
											LocalIterator += 1
										if(LocalVendorExists = false)
											LocalUniqueVendorLength +=1
											LocalVendorArray.Vendor[LocalUniqueVendorLength] = LocalVendorCustomer
										while(LocalCounter <= LocalUniqueTaxRateLength)
											if(LocalTaxRate = LocalTaxRateArray.TaxRateArrayLine[LocalCounter])
												LocalTaxRateExists = true
											LocalCounter += 1
										if(LocalTaxRateExists = false)
											LocalUniqueTaxRateLength +=1
											LocalTaxRateArray.TaxRateArrayLine[LocalUniqueTaxRateLength] = LocalTaxRate
										while(LocalInstance <= LocalUniqueVatCodeLength)
											if(LocalVatUsageCode = LocalVatCodeArray.TaxCode[LocalInstance])
												LocalVatCodeExists = true
											LocalInstance += 1
										if(LocalVatCodeExists = false)
											LocalUniqueVatCodeLength +=1
											LocalVatCodeArray.TaxCode[LocalUniqueVatCodeLength] = LocalVatUsageCode
		
		NativeLPLMXVendordetailsXML
			if (LocalUniqueVatCodeLength >0 and LocalPrmCountryCode = "MX")
				LocalInstance =1
				initialize LocalTaxReportMXLine
				while(LocalInstance <= LocalUniqueVendorLength)
					LocalVendor = LocalVendorArray.Vendor[LocalInstance]
					initialize LocalTaxReportLineCreditTrans
					initialize LocalTaxReportLineWithHoldTrans
					initialize LocalTaxReportLineTrans
					initialize LocalTaxReportLineZeroTransExcempt
					initialize LocalTaxReportLineZeroTransExcemptActivity
					initialize LocalTaxReportLineZeroTransExcemptImport
					initialize LocalWithHoldAmt
					initialize LocalReportableAmt
					initialize LocalCrediTransTaxAmount
					initialize LocalCrediTransTaxableAmount
					if(BODVendorRel exists)	
						LocalVendorName = BODVendorRel.VendorName 
						LocalVendorTaxID = BODVendorRel.TaxID 
						LocalVendorCountry = BODVendorRel.CurrentAddressRel.PostalAddress.Country
						LocalVendorCountryName = BODVendorRel.CurrentAddressRel.PostalAddress.Country.Name
						LocalVendorStateProvince = BODVendorRel.VendorAddress.StateProvince
						LocalIterator = 1
						LocalCreditReturnCount = 1
						LocalWithholdingCount = 1
						while(LocalIterator <= LocalUniqueTaxRateLength)
							LocalTaxRate = LocalTaxRateArray.TaxRateArrayLine[LocalIterator]
							LocalNonZeroTransCount = 1
							LocalZeroTransExemptCount = 1
							LocalZeroTransExemptActivityCount = 1
							LocalZeroTransExemptImportCount = 1
							if(LocalTaxRate = "0.11" or LocalTaxRate = "0.10" or LocalTaxRate = "0.16" or LocalTaxRate = "0.15" or LocalTaxRate = "0.08" or LocalTaxRate = "0.00")
								LocalCounter = 1
								initialize LocalTransactionType 
								initialize LocalTaxTransInvAmt
								initialize LocalTaxTransTaxableAmount
								initialize LocalTaxTransTaxAmt
								initialize LocalTotalTaxTransInvAmt
								initialize LocalTotalTaxTransTaxableAmount
								initialize LocalTotalTaxTransTaxAmt
								initialize LocalTotalZeroExemptTaxTransInvAmt
								initialize LocalTotalZeroExemptTaxTransTaxableAmount
								initialize LocalTotalZeroExemptTaxTransTaxAmt
								initialize LocalTotalZeroExemptActivityTaxTransInvAmt
								initialize LocalTotalZeroExemptActivityTaxTransTaxableAmount
								initialize LocalTotalZeroExemptActivityTaxTransTaxAmt
								initialize LocalTotalZeroExemptImportTaxTransInvAmt
								initialize LocalTotalZeroExemptImportTaxTransTaxableAmount
								initialize LocalTotalZeroExemptImportTaxTransTaxAmt
								initialize LocalTaxTransCurrencyRate
								while(LocalCounter <= LocalUniqueVatCodeLength)
									LocalVatUsageCode = LocalVatCodeArray.TaxCode[LocalCounter]
									if(BODTaxTransactionMXRel exists)
										for each BODTaxTransactionMXRel
											LocalInvoice = each.Invoice
											LocalICOrigCompany	= each.InvoiceCompany.OrigCompany
											LocalTaxTransCurrencyRate = each.CurrencyRate
											LocalTaxTransInvAmt = each.TransactionInvoiceAmount
											LocalTaxTransTaxableAmount = each.TransactionTaxableAmount
											LocalTaxTransTaxAmt = each.TransactionTaxAmount
											LocalPayablesVoucherSequence = each.VoucherNumber.Sequence
											LocalPayablesVoucherPrefix = each.VoucherNumber.Prefix
											if(BODPayablesInvoiceRel exists)
												for each BODPayablesInvoiceRel
													LocalInvoiceType = each.InvoiceType 
													LocalVendorReturn = each.VendorReturn
													if(LocalInvoiceType = "C" and LocalVendorReturn != "")
														LocalCreditReturnCount +=1
														LocalCrediTransTaxAmount= LocalCrediTransTaxAmount+(LocalTaxTransCurrencyRate*LocalTaxTransTaxAmt)
														LocalCrediTransTaxableAmount = LocalCrediTransTaxableAmount+(LocalTaxTransCurrencyRate*LocalTaxTransTaxableAmount)
													else
													if(LocalVendorReturn = "0" and (LocalInvoiceType = "C" or LocalInvoiceType = "") and LocalTaxRate != "0.00")
														LocalNonZeroTransCount += 1
														LocalTotalTaxTransInvAmt = LocalTotalTaxTransInvAmt +(LocalTaxTransCurrencyRate * LocalTaxTransInvAmt)
														LocalTotalTaxTransTaxableAmount = LocalTotalTaxTransTaxableAmount + (LocalTaxTransCurrencyRate * LocalTaxTransTaxableAmount)
														LocalTotalTaxTransTaxAmt = LocalTotalTaxTransTaxAmt + (LocalTaxTransCurrencyRate * LocalTaxTransTaxAmt)
														if(LocalTaxRate = "0.16" or LocalTaxRate = "0.15")
															if(LocalVendorCountry ="MX")
																LocalTransactionType = "Standard Rate"
															else
																LocalTransactionType = "Standard Import"
														else 
														if(LocalTaxRate = "0.11" or LocalTaxRate = "0.10")
															if(LocalVendorCountry ="MX")
																LocalTransactionType = "Reduced Rate"
															else
																LocalTransactionType = "Reduced Import"
														else 
														if(LocalTaxRate = "0.08")
															if(LocalVendorCountry ="MX" and (LocalVendorStateProvince = "BC" or LocalVendorStateProvince = "CH" or
															LocalVendorStateProvince = "CO" or LocalVendorStateProvince = "NL" or LocalVendorStateProvince = "SO" or
															LocalVendorStateProvince = "TM"))
																LocalTransactionType = "Northern Region"
													else
													if(LocalVendorReturn = "0" and (LocalInvoiceType = "C" or LocalInvoiceType = "") and LocalTaxRate = "0.00")
														if((LocalVatUsageCode = "EXEMPT" or LocalVatUsageCode = "EXENTO" or LocalVatUsageCode = "IEPS") and (LocalVendorCountry = "MX"))
															LocalZeroTransExemptActivityCount +=1
															LocalTotalZeroExemptActivityTaxTransInvAmt = LocalTotalZeroExemptActivityTaxTransInvAmt +(LocalTaxTransCurrencyRate * LocalTaxTransInvAmt)
															LocalTotalZeroExemptActivityTaxTransTaxableAmount = LocalTotalZeroExemptActivityTaxTransTaxableAmount + (LocalTaxTransCurrencyRate * LocalTaxTransTaxableAmount)
															LocalTotalZeroExemptActivityTaxTransTaxAmt = LocalTotalZeroExemptActivityTaxTransTaxAmt + (LocalTaxTransCurrencyRate * LocalTaxTransTaxAmt)
														else 
														if((LocalVatUsageCode = "EXEMPT" or LocalVatUsageCode = "EXENTO") and (LocalVendorCountry != "MX"))
															LocalZeroTransExemptImportCount +=1
															LocalTotalZeroExemptImportTaxTransInvAmt = LocalTotalZeroExemptImportTaxTransInvAmt +(LocalTaxTransCurrencyRate * LocalTaxTransInvAmt)
															LocalTotalZeroExemptImportTaxTransTaxableAmount = LocalTotalZeroExemptImportTaxTransTaxableAmount + (LocalTaxTransCurrencyRate * LocalTaxTransTaxableAmount)
															LocalTotalZeroExemptImportTaxTransTaxAmt = LocalTotalZeroExemptImportTaxTransTaxAmt + (LocalTaxTransCurrencyRate * LocalTaxTransTaxAmt)
														else
															LocalZeroTransExemptCount +=1
															LocalTotalZeroExemptTaxTransInvAmt = LocalTotalZeroExemptTaxTransInvAmt +(LocalTaxTransCurrencyRate * LocalTaxTransInvAmt)
															LocalTotalZeroExemptTaxTransTaxableAmount = LocalTotalZeroExemptTaxTransTaxableAmount + (LocalTaxTransCurrencyRate * LocalTaxTransTaxableAmount)
															LocalTotalZeroExemptTaxTransTaxAmt = LocalTotalZeroExemptTaxTransTaxAmt + (LocalTaxTransCurrencyRate * LocalTaxTransTaxAmt)
													if(BODPayablesInvoiceWithholdingRel exists)
														for each BODPayablesInvoiceWithholdingRel
															LocalHoldCode = each.IncomeWithholdingCode[0:3]
															if(LocalHoldCode = "IVA")
																LocalWithholdingCount +=1
																LocalWithHoldAmt = LocalWithHoldAmt + (LocalTaxTransCurrencyRate * each.WithholdingAmount)
																LocalReportableAmt = LocalReportableAmt + (LocalTaxTransCurrencyRate * each.ReportableAmount)
									LocalCounter += 1
							LocalIterator += 1
							if(LocalNonZeroTransCount > 1)
								LocalTaxReportLineTrans += template.IONSyncLCLTaxReport_TaxEntity_MXLineTrans_ST document for this instance
							if(LocalZeroTransExemptCount > 1)
								LocalTaxReportLineZeroTransExcempt += template.IONSyncLCLTaxReport_TaxEntity_MXLineZeroTrans_Exempt_ST document for this instance
							if(LocalZeroTransExemptActivityCount > 1)
								LocalTaxReportLineZeroTransExcemptActivity += template.IONSyncLCLTaxReport_TaxEntity_MXLineZeroTrans_ExemptActivity_ST document for this instance
							if(LocalZeroTransExemptImportCount > 1)
								LocalTaxReportLineZeroTransExcemptImport += template.IONSyncLCLTaxReport_TaxEntity_MXLineZeroTrans_ExemptImport_ST document for this instance
						if(LocalWithholdingCount > 1)
							if(LocalWithHoldAmt < 0)
								LocalWithHoldAmt = -1 * LocalWithHoldAmt
							if(LocalReportableAmt < 0)
								LocalReportableAmt = -1 * LocalReportableAmt
							LocalTaxReportLineWithHoldTrans += template.IONSyncLCLTaxReport_TaxEntity_MXLineWithHoldTrans_ST document for this instance
						if(LocalCreditReturnCount > 1)
							if(LocalCrediTransTaxAmount < 0)
								LocalCrediTransTaxAmount = -1 * LocalCrediTransTaxAmount
							if(LocalCrediTransTaxableAmount < 0)
								LocalCrediTransTaxableAmount = -1 * LocalCrediTransTaxableAmount
							LocalTaxReportLineCreditTrans += template.IONSyncLCLTaxReport_TaxEntity_MXLineCreditTrans_ST document for this instance
						LocalTaxReportMXLine += template.IONSyncLCLTaxReport_TaxEntity_MXLine_ST document for this instance
					LocalInstance += 1	
																													
		CallVertexWebservice



			invoke Delete VertexTaxAreaIdResultsRel
			invoke Delete JurisdictionResultsRel
			invoke Delete TaxAreaIdLookupResultsLogRel
			initialize OutputErrorNumber
            initialize OutputErrorMessage
            initialize WebServiceErrorMessage
            MultTaxCodesIndicator = false	
            WebServiceError	= false
			if (EffectiveDate not entered)
				EffectiveDate = current corporate date
			if (LastVertexLookupPostalAddress entered
			or LastVertexLookupTaxAreaId entered)

				initialize CalculateTax
				CalculateTax.UniqueIdOfRelatedObject		= UniqueID
				CalculateTax.RelatedObjectReference         = reference to this instance
				CalculateTax.System							= "TX"
				CalculateTax.CallingModule					= "TaxEntity"			
				CalculateTax.VertexQuantumOption			= "G"

				CalculateTax.InFinanceEnterpriseGroup       = FinanceEnterpriseGroup
				initialize LocalLookupUsingTaxAreaId
				if (LastVertexLookupPostalAddress.Country not entered
				and	LastVertexLookupTaxAreaId entered)
					CalculateTax.TaxCode					= LastVertexLookupTaxAreaId
					CalculateTax.LookupUsingTaxAreaId		= true	
					LocalLookupUsingTaxAreaId				= true


				CalculateTax.PostalAddress					= LastVertexLookupPostalAddress
				ReturnedTaxAreaId							= CalculateTax.ReturnedGeoCode
				if (LastVertexLookupTaxAreaId not entered
				and ReturnedTaxAreaId entered)	
					LastVertexLookupTaxAreaId 				= ReturnedTaxAreaId
				 

				MultTaxCodesIndicator						= CalculateTax.MultipleTaxAreaIds
				OutputErrorMessage 							= CalculateTax.OutputErrorNumber 
				OutputErrorNumber 							= CalculateTax.OutputErrorMessage
				WebServiceError								= CalculateTax.WebServiceError 
				WebServiceErrorMessage						= CalculateTax.WebServiceErrorMessage
				if (CalculateTax.MyHTTPInfo.StatusCode = 500)
					ClientSideError                 		= true						
					ReturnedFaultString					    = CalculateTax.FaultString	











				OutputTotalTaxAmount 						= CalculateTax.OutputTotalTaxAmount 
				OutputTotalTaxable 							= CalculateTax.TaxableAmount 
				OutputTaxRate								= CalculateTax.OutputTaxRate
				OutputInvoiceTotal							= CalculateTax.ReturnedInvoiceTotal
				ReturnedTaxJurisdictions					= CalculateTax.OutputJurisdictions  




				if (LocalLookupUsingTaxAreaId)
					LastVertexLookupPostalAddress.Country		= "US"  
					LastVertexLookupPostalAddress.Municipality	= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].City
					LastVertexLookupPostalAddress.PostalCode  	= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].PostalCode
					LastVertexLookupPostalAddress.County  		= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].County
				else	
				if (LastVertexLookupPostalAddress.Country = "US"	// Reference jira: IEFIN-70318, Vertex is returning partial Zip for Canada issue, if zip is "ABC XYZ", only "ABC" returned. Test on V7. At that time, Address Cleansing is only for US
				or  LastVertexLookupPostalAddress.Country = "USA")
					if (CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].City entered)
						if (LastVertexLookupPostalAddress.Municipality not entered
						or (LastVertexLookupPostalAddress.Municipality entered
						and LastVertexLookupPostalAddress.Municipality	!= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].City))
							LastVertexLookupPostalAddress.Municipality	 = CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].City
	
					if (CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].StateProvince entered)
						if (LastVertexLookupPostalAddress.StateProvince not entered
						or (LastVertexLookupPostalAddress.StateProvince entered
						and LastVertexLookupPostalAddress.StateProvince	!= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].StateProvince))
							LastVertexLookupPostalAddress.StateProvince	 = CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].StateProvince
	
					if (CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].PostalCode entered)
						if (LastVertexLookupPostalAddress.PostalCode not entered
						or (LastVertexLookupPostalAddress.PostalCode   != CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].PostalCode))
							LastVertexLookupPostalAddress.PostalCode   = CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].PostalCode
					
					if (CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].County entered)
						if (LastVertexLookupPostalAddress.County not entered
						or (LastVertexLookupPostalAddress.County   	   != CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].County))						
							LastVertexLookupPostalAddress.County  		= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].County
							









			if (MultTaxCodesIndicator = false
			and WebServiceError       = false
			and OutputErrorNumber not entered
			and ReturnedTaxAreaId entered)




				include CallCalculateTax
				
		CallCalculateTax	

			if (EffectiveDate not entered)
				EffectiveDate = current corporate date	

			if (ThirdParty.VertexOSeries)		

				initialize ReturnedTaxJurisdictions


				CalculateTax.TaxEntity					= TaxEntity	 
				CalculateTax.InputVertexRequest			= "Q"
				CalculateTax.VertexQuantumOption        = "I"
				CalculateTax.TransactionType			= "S"	 
				CalculateTax.TaxCode					= ReturnedTaxAreaId



				CalculateTax.PostalAddress				= LastVertexLookupPostalAddress	

				CalculateTax.InvoiceAmount				= "100.00"
				CalculateTax.Quantity					= 1
				CalculateTax.LineNumber					= 1
				CalculateTax.JurisdictionResultsKey		= DefaultLookupKey	
				CalculateTax.RelatedObjectReference     = reference to this instance
				CalculateTax.System						= "TX"
				CalculateTax.CallingModule				= "TaxEntity"			
				CalculateTax.ResponseBusclassKey		= 1
    			CalculateTax.TaxDate 					= EffectiveDate
				CalculateTax.InvoiceDate 				= EffectiveDate

				CalculateTax.CurrencyRate				= 1



				LocalTrigger							= CalculateTax.QuotationRequest

			else	
			if (ThirdParty.InforTax)		
				CalculateTax.TaxEntity					= TaxEntity	 
				CalculateTax.Function					= "C"	
				CalculateTax.TaxCode					= InputTaxCode
				CalculateTax.ProductTaxCategory			= InputTaxCategory
				CalculateTax.TaxableAmount				= InputTaxable	 
				CalculateTax.InvoiceAmount				= InputTaxable
				CalculateTax.System						= "TX"
				CalculateTax.CallingModule				= "TaxEntity"			
				LocalTrigger							= CalculateTax.ExecuteCalculateTax                 






			MultTaxCodesIndicator						= CalculateTax.MultipleTaxAreaIds
			OutputErrorMessage 							= CalculateTax.OutputErrorNumber 
			OutputErrorNumber 							= CalculateTax.OutputErrorMessage
			WebServiceError								= CalculateTax.WebServiceError 
			WebServiceErrorMessage						= CalculateTax.WebServiceErrorMessage					      		
			OutputTotalTaxAmount 						= CalculateTax.OutputTotalTaxAmount 
			OutputTotalTaxable 							= CalculateTax.TaxableAmount 
			OutputTaxRate								= CalculateTax.OutputTaxRate
			OutputInvoiceTotal							= CalculateTax.ReturnedInvoiceTotal
			ReturnedTaxJurisdictions					= CalculateTax.OutputJurisdictions  

		InitializeValidationFields	
			initialize VATValidation.OCountryCode
			initialize VATValidation.OVatNumber
			initialize VATValidation.ORequestDate
			initialize VATValidation.OValid
			initialize VATValidation.OTraderName
			initialize VATValidation.OTraderCompanyType
			initialize VATValidation.OTraderAddress
			initialize VATValidation.ORequestIdentifier
			initialize VATValidation.RequestXML
			initialize VATValidation.ResponseXML
			initialize VATValidation.ValidationDate
			initialize VATValidation.VATNumberValid
			
		EditTaxDistributionCodeAccounts
			if (!action type.Delete	
			and TaxDistributionCode entered)


				invoke Update TaxDistributionCode
					invoked.ValidateTaxAccounts = true
					invoked.RequireAllInputOutputAccounts  = true		
							
		LoadTaxAccounts

			if (LocalTaxInputAccount.ToAccountingEntity entered)	
				LocalTaxInputAccount.ToAccountingEntity		= LocalNewTaxEntityKey 
			if (LocalTaxOutputAccount.ToAccountingEntity entered)	
				LocalTaxOutputAccount.ToAccountingEntity	= LocalNewTaxEntityKey
			if (LocalInputDueAccount.GeneralLedgerChartAccount entered)
				LocalInputDueAccount.ToAccountingEntity 	= LocalNewTaxEntityKey 		
			if (LocalOutputDueAccount.GeneralLedgerChartAccount entered)
				LocalOutputDueAccount.ToAccountingEntity 	= LocalNewTaxEntityKey 	
											

  	Field Rules

        Name
            required

		ThirdParty
			if (ThirdParty.VertexOSeries)
				constraint (VertexConfigVersionRel exist)		 
					"VertexConfigurationFileIsNotSetUpFor_\Finance_\Enterprise_\Group:<FinanceEnterpriseGroup>"		








			if (ThirdParty changed
			and ThirdParty not entered)
				if (VertexTaxAreaIdResultsRel exist)
					invoke Delete VertexTaxAreaIdResultsRel
				if (JurisdictionResultsRel exist)	
					invoke Delete JurisdictionResultsRel
				initialize LastVertexLookupPostalAddress	 
				initialize LastVertexLookupTaxAreaId		 
											
			if (OrderEntryCompanyLevelPrintingExists)
				if (BillingCompanyLevelPrintingRel.TaxCalulationAndPrinting = "T"
				or  BillingCompanyLevelPrintingRel.TaxCalulationAndPrinting = "B"				
				or  BillingCompanyLevelPrintingRel.TaxCalulationAndPrinting = "X")							
					constraint (ThirdParty changed
					and			ThirdParty not entered)
						"CannotChange;BillingCompanyOrBillingProcessLevelHasTaxPrintCodeOf<OECompanyPrintOption>"	


		 				
			if (TaxEntity.ThirdParty changed				
			and !TaxEntity.ThirdParty.Sabrix)
				OneSourceVersionType = blank
																 						
		UseTaxCodeAccounts	
  			default to "N"					   							    							             														            						               							

			if (!ThirdParty.VertexOSeries)													
				if (UseTaxCodeAccounts changed)


					constraint (!TaxTransactionsExist)				
						"CannotChange;TaxTransactionsExist"			



					constraint (!TxtaxcodeRel exists)
						"CannotChange;TaxCodesSetupForThisTaxEntity"													 	
					LocalLastTransactionID = GetCountOfTaxTransations
						
		VendorGroup							
			if (AccrualCode entered)
				required
									
		AccrualCode

			if (UseTaxCodeAccounts)				
				cannot be entered
					"APAccrualCodeMustBeBlankIfUsingTaxCodeAccounts"	

			if (ThirdParty.VertexOSeries
			and !UseTaxCodeAccounts)									 
				required
					"TaxAccrualCodeRequiredIfUsing_\Vertex"

		TaxInputAccount
			if (UseTaxCodeAccounts changed)
				if (UseTaxCodeAccounts)
					initialize TaxInputAccount		

			if (!UseTaxCodeAccounts)		
				required
					"InputAccountRequiredIfNotUsingTaxCodeAccounts"			
			else
			if (UseTaxCodeAccounts)		
				cannot be entered
					"InputAccountMustBeBlankIfUsingTaxCodeAccounts"			// 202	"Input acct must be blank if using tx cd accts" 					

			if (PostOption not entered	
			or  PostOption = "I")
				if (TaxInputAccount entered)	
					constraint (TaxInputAccount.ToAccountingEntity= TaxEntity)
						"CannotPostToADifferentAccountingEntityUsingThisPostOption"
					

		TaxInputDueAccount
			if (UseTaxCodeAccounts changed)
				if (UseTaxCodeAccounts)
					initialize TaxInputDueAccount	

			if 	(!UseTaxCodeAccounts		
			and   TaxPoint.PaymentDate)													
				required
					"InputDueAccountRequiredIfTaxPointIsPayment"	 		
			else
			if (UseTaxCodeAccounts)									
				cannot be entered
					"InputDueAccountBeBlankIfUsingTaxCodeAccounts"	 	// 203	"Input due acct must be blank if using tx cd accts"	

			if (PostOption not entered	
			or  PostOption = "I")
				if (TaxInputDueAccount entered)	
					constraint (TaxInputDueAccount.ToAccountingEntity= TaxEntity)
						"CannotPostToADifferentAccountingEntityUsingThisPostOption"
					

		TaxOutputAccount													
			if (UseTaxCodeAccounts changed)
				if (UseTaxCodeAccounts)
					initialize TaxOutputAccount		

			if (!UseTaxCodeAccounts)		
				required
					"OutputAccountRequiredIfNotUsingTaxCodeAccounts"	 	
			else
			if (UseTaxCodeAccounts)									
				cannot be entered
					"OutputAccountMustBeBlankIfUsingTaxCodeAccounts"	 	

			if (PostOption not entered	
			or  PostOption = "I")
				if (TaxOutputAccount entered)	
					constraint (TaxOutputAccount.ToAccountingEntity= TaxEntity)
						"CannotPostToADifferentAccountingEntityUsingThisPostOption"
						

		TaxOutputDueAccount
			if (UseTaxCodeAccounts changed)
				if (UseTaxCodeAccounts)
					initialize TaxOutputDueAccount 	

			if (!UseTaxCodeAccounts		
			and  TaxPoint.PaymentDate)						            		
				required
					"OutputDueAccountRequiredIfTaxPointIsPayment"	 		
			else
			if (UseTaxCodeAccounts)									
				cannot be entered
					"OutputDueAccountMustBeBlankIfUsingTaxCodeAccounts"	 	

			if (PostOption not entered	
			or  PostOption = "I")
				if (TaxOutputDueAccount entered)	
					constraint (TaxOutputDueAccount.ToAccountingEntity= TaxEntity)
						"CannotPostToADifferentAccountingEntityUsingThisPostOption"
					
		TaxID
			if (!UseTaxCodeAccounts)		
				required
					"TaxIdRequiredWhenNotUsingTaxCodeAccounts"				





		AccruedOrInvoiced
			if (!UseTaxCodeAccounts)		
				required
					"InvoiceOrAccruedRequiredIfNotUsingTaxCodeAccounts"		
			else
			if (UseTaxCodeAccounts)									
				cannot be entered
					"InvoiceOrAccruedMustBeBlankIfUsingTaxCodeAccounts"		

		TaxPoint
			if (!UseTaxCodeAccounts)		
				required
					"TaxPointRequiredIfNotUsingTaxCodeAccounts"				
				if (TaxPoint = "P")					
					constraint (ThirdParty not entered)				
						"TaxPointCannotBe_\PWhenUsingAThirdPartyTaxSystem"	
			else
			if (UseTaxCodeAccounts)									
				cannot be entered
					"TaxPointMustBeBlankIfUsingTaxCodeAccounts"				

		TaxTerms
			if (!UseTaxCodeAccounts)		
				required
					"TaxTermsRequiredIfNotUsingTaxCodeAccounts"				

		AllowAccountChanges
			if (UseTaxCodeAccounts)
				cannot be entered
					
		LandedCost
			if (UseTaxCodeAccounts)									          						
				cannot be entered	
					"LandedCostFlagCannotBeSetIfUsingTaxCodeAccounts"		






				
		TaxToleranceLimit
			if (UseTaxCodeAccounts)									          						
				cannot be entered
					"ToleranceLimitMustBeBlankIfUsingTaxCodeAccounts"		
														
		FromRate
			if (UseTaxCodeAccounts)
				cannot be entered
					"FromRateMustBeBlankIfUsingTaxCodeAccounts"				
			else
				if (ThruRate entered)
					required								
						"IfDefiningRateRange,DefineBoth_\FromAnd_\Thru"										

			constraint (FromRate < ThruRate)
				"FromRateMustBeLessThan_\ThruRate"												

		ThruRate
			if (UseTaxCodeAccounts)									          						
				cannot be entered
					"ThruRateMustBeBlankIfUsingTaxCodeAccounts"				

		TaxToleranceAmount
			if (UseTaxCodeAccounts)									          						
				cannot be entered
					"ToleranceAmountMustBeBlankIfUsingTaxCodeAccounts"		

		PostOption 




			if (PostOption not entered
			or  PostOption = "I")
				if (!LandedCost)					
					if (TaxInputAccount entered)	
						constraint (TaxInputAccount.ToAccountingEntity 		= TaxEntity)
							"CannotPostToADifferentAccountingEntityUsingSpecifiedPostOption"
					if (TaxInputDueAccount entered)	
						constraint (TaxInputDueAccount.ToAccountingEntity 	= TaxEntity)
							"CannotPostToADifferentAccountingEntityUsingSpecifiedPostOption"
					if (TaxOutputAccount entered)	
						constraint (TaxOutputAccount.ToAccountingEntity 	= TaxEntity)
							"CannotPostToADifferentAccountingEntityUsingSpecifiedPostOption"
					if (TaxOutputDueAccount entered)	
						constraint (TaxOutputDueAccount.ToAccountingEntity 	= TaxEntity)
							"CannotPostToADifferentAccountingEntityUsingSpecifiedPostOption"

		DefaultFilingCurrency
			if (ThirdParty.VertexOSeries)
				required
			if (DefaultFilingCurrency entered)	
				constraint (DefaultFilingCurrency.ISOCode entered
				or          DefaultFilingCurrency.ISOCodeNumber entered)
						"DefaultFilingCurrency_\I\S\O\_CodeOrNumberRequired"							

		VATRegistrationCountry
			if (ThirdParty.VertexOSeries)
				required
			if (VATRegistrationCountry entered)	
				constraint (VATRegistrationCountry.IsoCountryCode entered
				or          VATRegistrationCountry.IsoCountryNumber entered)
						"VATRegistrationCountry/\jurisdiction\I\S\O\_CodeOrNumberRequired"					
			if (VATRegistrationCountry changed)	
				include InitializeValidationFields

		VATRegistrationNumber	
			if (VATRegistrationNumber changed)
				include InitializeValidationFields

		TaxDistributionCode
			if (UseTaxCodeAccounts)									          						
				cannot be entered
					"TaxDistributionCodeMustBeBlankIfUsingTaxCodeAccounts"		




























				
		OneSourceVersionType												
			if (OneSourceVersionType.Generic)		
				constraint (TaxEntity.ThirdParty.Sabrix)
					"ThirdPartyOptionMustBe_\One\SourceForTheGenericVerson;\Solution:SwitchBackTo_\One\Source,Change_\One\SourceVersionTypeToOriginal;TryAgain"	
									

	Conditions

		OrderEntryCompanyLevelPrintingExists
			restricted
			when (BillingCompanyLevelPrintingRel exists)
			
		Testing
			restricted
			when (1 > 0)	

        IsCompanyAccts
        	restricted
            when (not UseTaxCodeAccounts)

        IsInputAccount
        	restricted
            when (TaxInputAccount entered)

        IsInputDueAcct
        	restricted
            when (TaxInputDueAccount entered)

        IsOutptDueAcct
        	restricted
            when (TaxOutputDueAccount entered)

        IsOutputAccount
        	restricted
            when (TaxOutputAccount entered)

        IsTaxCodeAccts
        	restricted
            when (UseTaxCodeAccounts)

        IsThirdParty
        	restricted
            when (not ThirdParty.InforTax)

        IsTxbcntrcond
        	restricted
            when (TaxableAmountEdit)

		MultipleResultsExist	
			restricted
			when (ThirdParty.VertexOSeries
			and   VertexTaxAreaIdResultsRel exist)	

		ErrorExist
			restricted
			when (OutputErrorNumber entered)

		NoErrors
			restricted
			when (OutputErrorNumber not entered
			and   !WebServiceError)
	
		WriteToLogFileOn
			restricted
			when (VertexConfigRel.WriteToLogFile)	

		LogFileRecordsExist
			restricted
			when (TaxLogHeaderRel exist)
			
		JurisResultsExists
			restricted
			when (ThirdParty.VertexOSeries
			and   JurisdictionResultsRel exist)

		TaxTransactionsExist
			when (EntityTaxCodeTransactionsRel exist)

		DefaultEntityTaxCodeExist
			when (DefaultEntityTaxCodeRel exist)

		VatRegistrationInvalidHereForVertex				
			when (ThirdParty.VertexOSeries				
			and   VATRegistrationNumber	entered)		
		NotUsingVertex									
			when (!ThirdParty.VertexOSeries)			
		UsingVertex										
			when (ThirdParty.VertexOSeries)				

		ValidateVAT	
			restricted
			when (FinanceEnterpriseGroup.TaxConfiguration.ValidateVAT)

		VATRegistrationInformationEntered	
			restricted
			when (VATRegistrationCountry entered
			and	  VATRegistrationNumber entered)

		VATRegistrationInformationChanged	
			restricted
			when (VATRegistrationCountry changed
			or	  VATRegistrationNumber changed)

		PerformVATValidation	
			restricted
			when (ValidateVAT
			and	  VATRegistrationInformationEntered)

		TaxDistributionCodeNotValid
			restricted
			when (!ThirdParty.VertexOSeries
			and   TaxDistributionCode entered)	

		TaxDistributionCodeValid	
			restricted
			when (TaxEntity.ThirdParty.VertexOSeries
			and   TaxDistributionCode entered)	
		OneSourceTaxAttributesExist							
			when (TaxEntity.ThirdParty.Sabrix
			and TaxAttributesRel.OneSourceTaxAttributeRel exist)


		OneSourceGeneric							
			when (TaxEntity.ThirdParty.Sabrix
			and   OneSourceVersionType.Generic)
		OneSourceOriginal							
			when (TaxEntity.ThirdParty.Sabrix
			and   OneSourceVersionType.Original)

		VertexVersion9							
			when (TaxEntity.ThirdParty.VertexOSeries
			and   TaxConfigurationRel.VertexVersion9)


		NoTaxTransationsExist	 			
			default label is untranslatable	 
			restricted
			when (GetCountOfTaxTransations = 0)
			
		ResetLastTransactionId	 			
			default label is untranslatable	 
			restricted
			when (NoTaxTransationsExist
			and LastTransactionID > 0)
			
		ResetLastTransactionIdForETCodes
			default label is untranslatable	 
			restricted
			when (UseTaxCodeAccounts
			and   NoTaxTransationsExist
			and   sum TxtaxcodeRel.LastTransactionID > 0)
			
		AccountingEntitySecurityGroupAllowsAccess
			when ((actor.context.AccountingEntitySecurityGroup = "")
			or    (actor.context.AccountingEntitySecurityGroup != ""
			and    AccountingEntitySecurityGroupMemberRel exists))

		OneSourceUseARCodeForTaxAccount
			restricted
			when (ThirdParty.Sabrix
			and   TaxAccountForSalesInvoices.ARCode)

		TaxLogForFixBaseAmountsExist					
			restricted									
 			when (TaxLogForFixBaseAmountsRel exist)

		VendorGroupRequired                             
			restricted
			when (AccrualCode entered
			and VendorGroup not entered)

		AccrualCodeRequired                             
 			restricted
			when (ThirdParty.VertexOSeries
			and UseTaxCodeAccounts not entered
			and AccrualCode not entered)

		TaxInputAccountRequired                         
			restricted
			when (UseTaxCodeAccounts not entered
			and TaxInputAccount not entered)

		TaxInputDueAccountRequired                      
			restricted
			when (TaxPoint.PaymentDate
			and UseTaxCodeAccounts not entered
			and TaxInputDueAccount not entered)

		TaxOutputAccountRequired                        
			restricted
			when (UseTaxCodeAccounts not entered
			and TaxOutputAccount not entered)

		TaxOutputDueAccountRequired                     
			restricted
			when (TaxPoint.PaymentDate
			and UseTaxCodeAccounts not entered
			and TaxOutputDueAccount not entered)

		TaxIDRequired                                   
			restricted 
			when (UseTaxCodeAccounts not entered
			and TaxID not entered)

		TaxPointRequired                                
			restricted
			when (UseTaxCodeAccounts not entered
			and TaxPoint not entered)

		TaxTermsRequired                                
			restricted
			when (UseTaxCodeAccounts not entered
			and TaxTerms not entered)

		FromRateRequired                                
			restricted
			when (ThruRate entered
			and FromRate not entered)

		TaxTransactionsIinErrorsExist				   
			restricted
			when (TaxTransactionsIinErrorRel exist)


	Relations

		BillingCompanyLevelPrintingRel
			one-to-many relation to BillingCompany
			Field Mapping uses symbolic key
				related.Company		= TaxCompany		
			Instance Selection
				where (related.InvoiceOption = "C")
							
        TxtaxcodeRel
            one-to-many relation to EntityTaxCode
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.TaxEntity				= TaxEntity

        DefaultEntityTaxCodeRel							
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
                related.TaxEntity				= LocalTaxEntity
                related.TaxCode					= LocalEntityTaxCodeDefault
                 
   		VertexConfigRel
        	one-to-one relation to VertexConfig
        	Field Mapping uses symbolic key
				related.VertexConfig = FinanceEnterpriseGroup		 

  		TaxConfigurationRel
        	one-to-one relation to TaxConfiguration
        	Field Mapping uses symbolic key
				related.TaxConfiguration = FinanceEnterpriseGroup

     	TaxConfigVersionRel		
        	one-to-many relation to TaxConfigVersion
        	Field Mapping uses symbolic key
				related.TaxConfiguration					= TaxConfigurationRel.TaxConfiguration
			Instance Selection
				where (related.TaxConfigVersion.ThirdParty 	= "S"
				and    related.TaxConfigVersion.Version 	= TaxConfigurationRel.SabrixVersion.Version
				and    related.TaxConfigVersion.Release 	= TaxConfigurationRel.SabrixVersion.Release)	

				 			
		VertexConfigVersionRel
        	one-to-many relation to VertexConfigVersion
        	Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup 
			Instance Selection
				where (related.VertexConfigVersion.Version 			= VertexConfigRel.DefaultVersion.Version
				and	   related.VertexConfigVersion.ServiceRelease 	= VertexConfigRel.DefaultVersion.ServiceRelease
				and	   related.VertexConfigVersion.ServerName 		= VertexConfigRel.DefaultVersion.ServerName)

    	VertexTaxAreaIdResultsRel
			one-to-many relation to VertexTaxAreaIdResults
			Field Mapping uses ByRelatedObjectReference												
				related.VertexConfig								= FinanceEnterpriseGroup 
				related.RelatedObjectReference 						= reference to this instance	

		TaxLogHeaderRel	 
			one-to-many relation to TaxLogHeader
			Field Mapping uses ByTaxEntity															
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.LogTaxEntity 								= TaxEntity						

		TaxAreaIdLookupResultsLogRel																
			one-to-many relation to TaxLogHeader
			Field Mapping uses ByRelatedObjectUniqueID	 
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.UniqueIdOfRelatedObject = UniqueID





  		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig								= FinanceEnterpriseGroup 
				related.CallingModuleKey 							= reference to this instance	
				
  		TotalRatesRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig								= FinanceEnterpriseGroup 
				related.CallingModuleKey 							= reference to this instance	
				
  		CityRatesRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig								= FinanceEnterpriseGroup 
				related.CallingModuleKey 							= reference to this instance	
			Instance Selection	
				where (related.JurisdictionLevel					= "CITY")
				
  		StateRatesRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig								= FinanceEnterpriseGroup 
				related.CallingModuleKey 							= reference to this instance
			Instance Selection	
				where (related.JurisdictionLevel					= "STATE")

  		CountyRatesRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig								= FinanceEnterpriseGroup 
				related.CallingModuleKey 							= reference to this instance
			Instance Selection	
				where (related.JurisdictionLevel					= "COUNTY")

 		DistrictRatesRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig								= FinanceEnterpriseGroup 
				related.CallingModuleKey 							= reference to this instance
			Instance Selection	
				where (related.JurisdictionLevel					= "DISTRICT")																				

		CountryRatesRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig								= FinanceEnterpriseGroup 
				related.CallingModuleKey 							= reference to this instance
			Instance Selection	
				where (related.JurisdictionLevel					= "COUNTRY")						

		OtherRatesRel	 
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig								= FinanceEnterpriseGroup 
				related.CallingModuleKey 							= reference to this instance
			Instance Selection	
				where (related.JurisdictionLevel					= "APO"   
				or     related.JurisdictionLevel					= "BOROUGH"   
				or     related.JurisdictionLevel					= "FPO"   
				or     related.JurisdictionLevel					= "LOCAL_IMPROVEMENT_DISTRICT"   
				or     related.JurisdictionLevel					= "PARISH"   
				or     related.JurisdictionLevel					= "PROVINCE"   
				or     related.JurisdictionLevel					= "SPECIAL_PURPOSE_DISTRICT"   
				or     related.JurisdictionLevel					= "TERRITORY"   
				or     related.JurisdictionLevel					= "TOWNSHIP"   
				or     related.JurisdictionLevel					= "TRADE_BLOCK"   
				or     related.JurisdictionLevel					= "TRANSIT_DISTRICT") 
				
		LastIntrastatSeqNumberRel				 
            one-to-many relation to IntrastatSequenceNumber
  			Field Mapping uses symbolic key
  				related.FinanceEnterpriseGroup			= TaxEntity.FinanceEnterpriseGroup
                related.TaxEntity 						= TaxEntity
 
        TaxTransactionsRel										
            one-to-many relation to TaxTransaction 
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= TaxEntity.FinanceEnterpriseGroup	 
                related.TaxEntity 						= TaxEntity

        TaxTransactionsIinErrorRel								
            one-to-many relation to TaxTransaction 
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= TaxEntity.FinanceEnterpriseGroup	 
                related.TaxEntity 						= TaxEntity 
			Instance Selection
				where (related.Status					= 3)				
        EntityTaxCodeTransactionsRel					 
            one-to-many relation to TaxTransaction 
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= TaxEntity.FinanceEnterpriseGroup	 
                related.TaxEntity 						= TaxEntity




        EntityTaxCodeRel	 							
            one-to-many relation to EntityTaxCode
          	Field Mapping uses symbolic key
		    	related.FinanceEnterpriseGroup			= TaxEntity.FinanceEnterpriseGroup
                related.TaxEntity 						= TaxEntity

                 
        TaxCodeRel										
            one-to-one relation to TaxCode
          	Field Mapping uses symbolic key
		    	related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TaxCode 						= EntityTaxCodeRel.TaxCode		    	

        AllTaxCodesRel									
            one-to-many relation to TaxCode
          	Field Mapping uses symbolic key
		    	related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup

                
        TaxRatesRel										
            one-to-many relation to TaxRate
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
                related.TaxCode 		    			= EntityTaxCodeRel.TaxCode 
 
        AllTaxRatesRel									
            one-to-many relation to TaxRate
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
                related.TaxCode 						= AllTaxCodesRel.TaxCode 
                 
        1SourceDummyTaxCodeRel							
            one-to-one relation to TaxCode
          	Field Mapping uses symbolic key
		    	related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TaxCode 						= "1S"

 		TaxDistributionoCodeDetailsRel				
			one-to-many relation to TaxDistributionCodeDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup	
				related.TaxEntity 				= TaxEntity		
				related.TaxDistributionCode	  	= TaxDistributionCode	

 		TaxAttributesRel								
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
 				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup	 
 				related.TaxAttribute	        = TaxAttributeCode
								                                                               
		
		BODVatReportingLineRel 
			one-to-many relation to VatReportingLine
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TaxEntity                       = TaxEntity
				related.VatReportIDForCountry.VatReportID = LocalPrmVatReportID
				related.VatReportIDForCountry.CountryCode = LocalPrmCountryCode
				
		BODVatReportingDetail
			one-to-many relation to VatReportingDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				  = FinanceEnterpriseGroup
				related.TaxEntity                         = TaxEntity
				related.VatReportIDForCountry.VatReportID = LocalPrmVatReportID
				related.VatReportIDForCountry.CountryCode = LocalPrmCountryCode
				related.VatReportingLine				  = LocalVatReportingLineNumber2
				
		BODVatReportingSummarizeDetail
			one-to-many relation to VatReportingDetail
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				  = FinanceEnterpriseGroup
				related.TaxEntity                         = TaxEntity
				related.VatReportIDForCountry.VatReportID = LocalPrmVatReportID
				related.VatReportIDForCountry.CountryCode = LocalPrmCountryCode
				related.VatReportingLine				  = LocalVatReportingLineNumber2
				
				
				
		BODVatUsageCodeRel 
			one-to-many relation to VatUsageCode
			Field Mapping uses symbolic key 
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TaxEntity                       = TaxEntity
				related.VatReportIDForCountry.VatReportID = LocalPrmVatReportID
				related.VatReportIDForCountry.CountryCode = LocalPrmCountryCode
				related.VatReportingLine = LocalVatReportingLineNumber2
				
				
		BODTaxTransactionCalRel  
			one-to-many relation to TaxTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TaxEntity                       = TaxEntity
				related.TaxCode							=   LocalVatUsageCode
			Instance Selection                   
				where (related.SystemCode						= LocalVatReportingLineSourceValue1
				and related.TaxYear                         = LocalPrmTaxYear
				and (related.TaxPeriod                       >= LocalPrmFromPeriod
				and   related.TaxPeriod                      <= LocalPrmToPeriod))
				
	
		BODGeneralLedgerCompanyRel 
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company                = DerivedICOrigCompany

		BODAccountingEntityRel
			one-to-one relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AccountingEntity                = TaxEntity
				
		BODAddressCodeRel
			one-to-one relation to AddressCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
				related.AddressCode              = DerivedAddressCode
		
	
		BODEmployeeRel
			one-to-one relation to Employee
			Field Mapping uses symbolic key
				related.HROrganization	 = FinanceEnterpriseGroup.HROrganization
				related.Employee              = DerivedPersonResponsible	
				
        FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
            			
		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "LCLTaxReport"
            	related.FSMBODConfiguration.Direction 	= 1
				
		BODVatReportingLineForDetailsRel 
			one-to-many relation to VatReportingLine
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TaxEntity                       = TaxEntity
				related.VatReportIDForCountry.VatReportID = LocalPrmVatReportID
				related.VatReportIDForCountry.CountryCode = LocalPrmCountryCode
				related.VatReportingLine   					= LocalVatReportingLineNumber2
				
		BODVatReportingLineForSummarizeDetailsRel 
			one-to-many relation to VatReportingLine
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TaxEntity                       = TaxEntity
				related.VatReportIDForCountry.VatReportID = LocalPrmVatReportID
				related.VatReportIDForCountry.CountryCode = LocalPrmCountryCode
				related.VatReportingLine   					= LocalVatReportingLineNumber2

		NewTaxEntityRel	
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key	 	 
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TaxEntity 					= LocalNewTaxEntityKey	
				
		AccountingEntitySecurityGroupMemberRel
			one-to-one relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.AccountingEntityGroup       = actor.context.AccountingEntitySecurityGroup.FinanceDimensionStructure
				related.AccountingEntity            = TaxEntity

		TaxLogForFixBaseAmountsRel	
			one-to-many relation to TaxLogHeader

			Field Mapping uses ByTaxEntity												
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.LogTaxEntity 			= TaxEntity								
				
		BODPayablesInvoiceRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses Set4
				related.Company		=  LocalICOrigCompany
				related.VoucherNumber.Prefix = LocalPayablesVoucherPrefix
				related.VoucherNumber.Sequence = LocalPayablesVoucherSequence
				related.Status = 9 
				
		BODPayablesCompanyRel
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company = LocalICOrigCompany
				
		BODVendorRel
			one-to-one relation to Vendor
			Field Mapping uses symbolic key
				related.VendorGroup = LocalVendorGroup
				related.Vendor		= LocalVendor
				
		BODPayablesInvoiceWithholdingRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses symbolic key
				related.Company = LocalICOrigCompany
			Instance Selection
				where (related.InvoiceNumber =  LocalInvoice
				and related.Vendor = LocalVendor)
				
		BODTaxTransactionMXRel  
			one-to-many relation to TaxTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TaxEntity                       = TaxEntity
				related.TaxCode							=   LocalVatUsageCode
			Instance Selection                   
				where (related.SystemCode						= LocalVatReportingLineSourceValue1
				and related.VendorCustomer						= LocalVendor
				and related.TaxRate								= LocalTaxRate
				and related.TaxYear                         = LocalPrmTaxYear
				and (related.TaxPeriod                       >= LocalPrmFromPeriod
				and   related.TaxPeriod                      <= LocalPrmToPeriod))
		
		VendorReturnRel
			one-to-one relation to VendorReturn
			Field Mapping uses symbolic key
				related.Company			= LocalICOrigCompany
				related.VendorReturn    = LocalVendorReturn	
				
		BODTaxTransactionMXCalRel  
			one-to-many relation to TaxTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TaxEntity                       = TaxEntity
			Instance Selection                   
				where (related.SystemCode						= LocalVatReportingLineSourceValue1
				and related.TaxYear                         = LocalPrmTaxYear
				and (related.TaxPeriod                       >= LocalPrmFromPeriod
				and   related.TaxPeriod                      <= LocalPrmToPeriod))
				
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker
													                                                               
	Sets







								

    Actions

        Create is a Create Action
        	Entrance Rules   	
			Action Rules
			Exit Rules
				if (PerformVATValidation)	
					invoke ValidateVATRegistrationNumber
					
				if(TaxID entered)
					invoke TriggerAccountingEntityRules BODAccountingEntityRel


					
		T2VCreate is a Create Action 
			restricted 
			default label is untranslatable 
			bypass field rules 

    	Update is an Update Action
    		Entrance Rules
				include EditTaxDistributionCodeAccounts   


			Action Rules			









				if (ClearLookupAddress)
					initialize LastVertexLookupPostalAddress
				    ClearLookupAddress = false
				else		 
				if (TaxCalcAndLookup)
					constraint (LastVertexLookupPostalAddress.Country entered
					or          LastVertexLookupTaxAreaId entered)		 
						"AddressOr_\Tax_\Area_\IdRequiredToPerformLookup"				
					if (ThirdParty.VertexOSeries)


						if (LastVertexLookupPostalAddress.Country entered)
							include CallVertexWebservice
						else

							ReturnedTaxAreaId = LastVertexLookupTaxAreaId


							include CallVertexWebservice
					TaxCalcAndLookup = false
									
			    if (OrderEntryCompanyLevelPrintingExists)
                    OECompanyPrintOption = first BillingCompanyLevelPrintingRel.TaxCalulationAndPrinting               
			Exit Rules
				if (!ThirdParty.VertexOSeries)												
					if (!UseTaxCodeAccounts
					and LocalLastTransactionID entered)										
						LastTransactionID = LocalLastTransactionID   	
						
				if (LastVertexLookupPostalAddress not entered)
					invoke Delete VertexTaxAreaIdResultsRel
					invoke Delete JurisdictionResultsRel	

					initialize OutputErrorNumber
		            initialize OutputErrorMessage
		            initialize MultTaxCodesIndicator	
		            initialize WebServiceError	
		            initialize WebServiceErrorMessage
		            initialize OutputTotalTaxAmount	
					initialize ReturnedTaxAreaId				 
					initialize OutputTaxRate

				if (PerformVATValidation
				and	VATRegistrationInformationChanged)	
					invoke ValidateVATRegistrationNumber
				
				if(TaxID changed and TaxID != blank)
					invoke TriggerAccountingEntityRules BODAccountingEntityRel


								
																																		
        Delete is a Delete Action
			Entrance Rules

				constraint (!TaxTransactionsExist)								
					"CannotDelete;CompanyTaxTransactionsHaveBeenPosted"			
				invoke Delete VertexTaxAreaIdResultsRel
				invoke Delete JurisdictionResultsRel


		UpdateSystemTaxCodesWithVertex is a Set Action	  


			completion message is "VertexTaxCodeUpdateSuccessfullyCompleted"		
			Parameters



				PrmProcessGroup				is Alpha 50		
					default label is "ProcessGroup"		 
				PrmVertexConfig				is a VertexConfig				 
					default label is "FinanceEnterpriseGroup"
				PrmTaxEntity				is a TaxEntity				 
					default label is "TaxEntity"
					context of PrmVertexConfig		



				EntityTaxCodeDefault		is a TaxCode		
					context of PrmVertexConfig					
				PrmReadOnly					is Boolean
					default label is "ReadOnly"



				PrmVendorGroup				is a VendorGroup
					default label is "VendorGroup"
				PrmVendorRange				is a VendorRange	
					default label is "VendorRange"
				PrmDateRange				is a DateRange5	
					default label is "VendorCreateDateRange"
				PrmVdrLocationRange			is a VendorLocationRange
					default label is "FromVendorLocation"
				PrmPayablesCompany			is a PayablesCompany	
					default label is "PayablesCompany"
				PrmUpdateAPProcessLevels	is Boolean	
					default label is "UpdatePayablesProcessLevels"



				PrmARCompany				is a ReceivableCompany
					default label is "ReceivableCompany"
				PrmCustomerGroup			is a CustomerGroup
					default label is "CustomerGroup"
				PrmCompanyCustomer			is like CompanyCustomer
				PrmCustomerRange			is a CustomerRangeNoEdit
					default label is "CustomerRange"

				PrmCustomerShipToRange		is a CustomerShipToRange
					default label is "CustomerShipToRange"



				PrmBillingCompany			is a BillingCompany	 
					default label is "BillingCompany"
				PrmBillingProcessLevelRange	is a BillingProcessLevelRange
					default label is "BillingProcessLevelRange"					



				PrmInventoryCompany 		is a InventoryCompany	 
					default label is "InventoryCompany"
				PrmICLocationRange			is a InventoryLocationRange	 
					default label is "InventoryLocationRange"					
				PrmUpdateRequestingLocations	is Boolean	
					default label is "UpdateRequestingLocations"
				PrmItemLocationType			is AlphaUpper 1	
					States
						BothSellAndPurchasing	value is blank
						SellTaxCodeOnly 		value is "S"
						PurchasingTaxCodeOnly	value is "P"	
					default label is "ItemLocationType"
				PrmUpdateProjectTaxLocations	is Boolean
					default label is "UpdateProjectTaxLocations"

			Parameter Rules
				PrmVertexConfig
					initial value is actor.context.FinanceEnterpriseGroup


					default to actor.context.FinanceEnterpriseGroup
					required
					if (PrmVertexConfig entered)
						constraint (PrmVendorGroup entered
						or			PrmARCompany entered
						or 			PrmBillingCompany entered
						or 			PrmInventoryCompany entered
						or			PrmUpdateAPProcessLevels		
						or			PrmUpdateProjectTaxLocations
						or			PrmUpdateRequestingLocations)	
							"MustSelectOneOrMoreOfTheseParameterOptionsToBeginProcessing:\Vendor_\Group,\Receivables_\Company,\Billing_\Company,\Inventory_\Company,\Payables_\Process_\Levels,_\Or_\Project_\Locations." 	 			
				PrmTaxEntity
					constraint (PrmTaxEntity.ThirdParty.VertexOSeries)
						"Tax\EntityEnteredIsNotSetUpToUseVertex"
					if (PrmTaxEntity entered)
						constraint (PrmTaxEntity.FinanceEnterpriseGroup = PrmVertexConfig)
							"Invalid\Finance\Enterprise\GroupForThe_\Tax\EntityEntered;<PrmTaxEntity.FinanceEnterpriseGroup>"	

				EntityTaxCodeDefault		
					constraint (PrmTaxEntity.UseTaxCodeAccounts)
						"EntityTaxCodeDefaultOnlyValidIfUseTaxCodeAccounts=true"
					LocalFinanceEnterpriseGroup = PrmVertexConfig
					LocalTaxEntity				= PrmTaxEntity
					LocalEntityTaxCodeDefault 	= EntityTaxCodeDefault
					constraint (DefaultEntityTaxCodeRel exist)
						"DefaultEntityTaxCodeDoesNotExist"							
					constraint (EntityTaxCodeDefault.TaxType.StandAlone)
						"TaxCodeTypeMustBeStandAlone"		
					constraint (EntityTaxCodeDefault.Status.Active)
						"DefaultingTaxCodeMustBeActive"																

				PrmVendorGroup
					if (PrmVendorRange.ToVendor entered
					or PrmVendorRange.FromVendor entered)
						required
					if (PrmVendorGroup entered)
						if (PrmVendorRange.ToVendor not entered)
							PrmVendorRange.ToVendor = "999999999999999999999999999999999999"


				PrmARCompany	 
					if (PrmCustomerRange.ToCustomer entered
					or PrmCustomerRange.FromCustomer entered)
						required
					if (PrmARCompany entered)
						constraint (PrmCustomerGroup entered)
							"CustomerGroupRequiredToProcessReceivablesCustomers"
					if (PrmARCompany entered
					and PrmCustomerRange.ToCustomer not entered)
						PrmCustomerRange.ToCustomer  = "99999999999999999999999999999"													







				PrmBillingCompany			
					if (PrmBillingProcessLevelRange.ToBillingProcessLevel entered
					or PrmBillingProcessLevelRange.FromBillingProcessLevel entered)
						required
						
					if (PrmBillingCompany entered
					and PrmBillingProcessLevelRange.ToBillingProcessLevel not entered)
						PrmBillingProcessLevelRange.ToBillingProcessLevel = "99999999999999999999999999999"
								

				PrmItemLocationType
					if (PrmItemLocationType entered)
						constraint (PrmInventoryCompany entered)
							"ItemLocationTypeOnlyValidWithInventoryLocationOptions" 

				PrmInventoryCompany	 
					if (PrmICLocationRange.FromInventoryLocation entered
					or PrmICLocationRange.ToInventoryLocation entered)
						required
					if (PrmICLocationRange.FromInventoryLocation entered
					and PrmICLocationRange.ToInventoryLocation not entered)
						PrmICLocationRange.FromInventoryLocation = PrmICLocationRange.ToInventoryLocation				

				PrmICLocationRange
					if (PrmInventoryCompany entered
					and PrmICLocationRange.FromInventoryLocation not entered
					and PrmICLocationRange.ToInventoryLocation not entered)

						PrmICLocationRange.ToInventoryLocation = "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ" 	

			Local Fields
				RecordCount				is Numeric 10
				CompletionMessage		is Alpha 150

 				
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmVertexConfig
				and    ThirdParty.VertexOSeries							
				and   (TaxEntity				= PrmTaxEntity			
				or     PrmTaxEntity      		not entered))

			Sort Order

				FinanceEnterpriseGroup
				TaxEntity

			Accumulators
				


				
			Action Rules
				Empty Set Rules
					CompletionMessage = "NoRecordsFoundForProcessing"
							
				Set Rules
					Entrance Rules




					Exit Rules
						
				FinanceEnterpriseGroup Set Rules
					Entrance Rules

					Exit Rules				

						
				TaxEntity Set Rules
					Entrance Rules

					Exit Rules		
					
				Instance Rules





					if (TaxEntity	= PrmTaxEntity	
					or PrmTaxEntity not entered
					and ThirdParty.VertexOSeries)				

						if (PrmVendorRange.ToVendor entered
						or PrmDateRange entered)
							invoke BatchUpdateWithVertexTaxAreaId Vendor in background
								invoked.PrmEnterpriseGroup			= PrmVertexConfig
								invoked.PrmProcessGroup				= PrmProcessGroup
								invoked.PrmVendorGroup				= PrmVendorGroup


								invoked.PrmVendorRange				= PrmVendorRange


								invoked.PrmReadOnly					= PrmReadOnly
								invoked.PrmDateRange				= PrmDateRange
								invoked.EntityTaxCodeDefault		= EntityTaxCodeDefault	 
								invoked.PrmTaxEntity				= PrmTaxEntity			
	
						if (PrmVdrLocationRange.ToVendorLocation entered)
							invoke BatchUpdateTaxCodeUsingVertex VendorLocation in background
								invoked.PrmEnterpriseGroup			= PrmVertexConfig
								invoked.PrmProcessGroup				= PrmProcessGroup
								invoked.PrmVendorGroup				= PrmVendorGroup
								invoked.PrmFromVendor				= PrmVendorRange.FromVendor	
								invoked.PrmToVendor					= PrmVendorRange.ToVendor	
								invoked.PrmFromLocation				= PrmVdrLocationRange.FromVendorLocation
								invoked.PrmToLocation				= PrmVdrLocationRange.ToVendorLocation
								invoked.PrmReadOnly					= PrmReadOnly
								invoked.EntityTaxCodeDefault		= EntityTaxCodeDefault	
								invoked.PrmTaxEntity				= PrmTaxEntity			
	 
						if (PrmARCompany entered)
							invoke BatchUpdateTaxUsingVertex CustomerShipTo in background
								invoked.PrmEnterpriseGroup			= PrmVertexConfig
								invoked.PrmProcessGroup				= PrmProcessGroup
								invoked.PrmCustomerGroup			= PrmCustomerGroup		 
								invoked.PrmARCompany				= PrmARCompany	
								invoked.PrmCompanyCustomer			= PrmCompanyCustomer	
								invoked.PrmFromCustomer				= PrmCustomerRange.FromCustomer	
								invoked.PrmToCustomer				= PrmCustomerRange.ToCustomer	
								invoked.BeginCustomerShipTo			= PrmCustomerShipToRange.FromCustomerShipTo	
								invoked.EndCustomerShipTo			= PrmCustomerShipToRange.ToCustomerShipTo									
								invoked.PrmReadOnly					= PrmReadOnly
								invoked.EntityTaxCodeDefault		= EntityTaxCodeDefault	
								invoked.PrmTaxEntity				= PrmTaxEntity			
									
						if (PrmBillingCompany entered)
							invoke BatchUpdateWithVertexTaxAreaId BillingProcessLevel in background
								invoked.PrmEnterpriseGroup			= PrmVertexConfig
								invoked.PrmProcessGroup				= PrmProcessGroup
								invoked.PrmBillingCompany			= PrmBillingCompany
								invoked.PrmBeginBillingProcLevel	= PrmBillingProcessLevelRange.FromBillingProcessLevel
								invoked.PrmEndBillingProcLevel		= PrmBillingProcessLevelRange.ToBillingProcessLevel
								invoked.PrmReadOnly					= PrmReadOnly
								invoked.EntityTaxCodeDefault		= EntityTaxCodeDefault	
								invoked.PrmTaxEntity				= PrmTaxEntity			

						if (PrmUpdateAPProcessLevels)	
							invoke BatchUpdateTaxCodeUsingVertex PayablesProcessLevel in background
								invoked.PrmEnterpriseGroup			= PrmVertexConfig
								invoked.PrmProcessGroup				= PrmProcessGroup
								invoked.PrmPayablesCompany			= PrmPayablesCompany
								invoked.PrmReadOnly					= PrmReadOnly
								invoked.EntityTaxCodeDefault		= EntityTaxCodeDefault
								invoked.PrmTaxEntity				= PrmTaxEntity

						if (PrmInventoryCompany entered)
							invoke BatchUpdateTaxCodeUsingVertex InventoryLocation in background
								invoked.PrmEnterpriseGroup			= PrmVertexConfig
								invoked.PrmProcessGroup				= PrmProcessGroup
								invoked.PrmInventoryCompany			= PrmInventoryCompany							
								invoked.PrmBeginICLocation			= PrmICLocationRange.FromInventoryLocation
								invoked.PrmEndICLocation			= PrmICLocationRange.ToInventoryLocation	
								invoked.ItemLocationType			= PrmItemLocationType	 
								invoked.PrmReadOnly					= PrmReadOnly
								invoked.EntityTaxCodeDefault		= EntityTaxCodeDefault	
								invoked.PrmTaxEntity				= PrmTaxEntity			

						if (PrmUpdateRequestingLocations)	
							invoke BatchUpdateTaxCodeUsingVertex RequestingLocation in background	
								invoked.PrmEnterpriseGroup			= PrmVertexConfig
								invoked.PrmProcessGroup				= PrmProcessGroup
								invoked.PrmInventoryCompany			= PrmInventoryCompany							
								invoked.PrmReadOnly					= PrmReadOnly
								invoked.EntityTaxCodeDefault		= EntityTaxCodeDefault
								invoked.PrmTaxEntity				= PrmTaxEntity

						if (PrmUpdateProjectTaxLocations)
							invoke BatchUpdateTaxCodeUsingVertex ProjectServiceLocation in background
								invoked.PrmEnterpriseGroup			= PrmVertexConfig
								invoked.PrmProcessGroup				= PrmProcessGroup






		DeleteVertexResultsFiles is an Instance Action			 

			valid when (ThirdParty.VertexOSeries)	

			Parameters


			Local Fields
			Action Rules

				if (TaxAreaIdLookupResultsLogRel exist)					
					invoke Delete TaxAreaIdLookupResultsLogRel			
				if (VertexTaxAreaIdResultsRel exist)
					invoke Delete VertexTaxAreaIdResultsRel
				if (JurisdictionResultsRel exist)	
					invoke Delete JurisdictionResultsRel


		UpdateLastIntrastatSequenceNumber is an Instance Action		


			Parameters
			Local Fields
				LocalIntrastatNumber is a IntrastatNumber 
			Action Rules
				LocalIntrastatNumber = LastIntrastatSeqNumberRel.LastIntrastatNumber
				if (LocalIntrastatNumber > LastIntrastatNumber
				or  LastIntrastatNumber not entered)
					LastIntrastatNumber = LastIntrastatSeqNumberRel.LastIntrastatNumber


      	IncrementLastIntrastatNumber is an Instance Action

			restricted
			Action Rules
				LastIntrastatNumber = LastIntrastatNumber + 1


      	FixLastTransactionID is an Instance Action		

			restricted
			Parameters
				PrmLastTransactionId is Numeric 10
			Action Rules
				LastTransactionID = PrmLastTransactionId
				




        TriggerTaxReport is an Instance Action  
	  	 	restricted
	  	 	Parameters
	  	 		PrmTaxEntity              is a TaxEntity
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
				PrmFromPeriod		 is AlphaUpper size 2
				PrmToPeriod		 is AlphaUpper size 2
				PrmTaxYear		     is Numeric size 10
				PrmCountryCode	     is AlphaUpper size 5
				PrmVatReportID		 is AlphaUpper size 10

	  	 	Local Fields
				ActionCode			 is Alpha size 1
					States
						Create  value is "C"
						Update	value is "U"
						Delete	value is "D"
			Action Rules
				if (FinanceEnterpriseGroup.BODTrigger)
					ActionCode = ActionCode.Create
					increment bod id.VariationID

					trigger "TaxReportService" PA service
						resume on error
						title is "EG:<FinanceEnterpriseGroup>AE:<TaxEntity>"
						Criteria
							FinanceEnterpriseGroup
							TaxEntity

						Variables
						
							ActionCode
							LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
								variable name is CurrentTimeStamp
							PrmTaxEntity
								variable name is TaxEntity
							PrmFromPeriod
								variable name is FromPeriod
							PrmToPeriod
								variable name is ToPeriod
							PrmTaxYear
								variable name is TaxYear
							PrmCountryCode
								variable name is CountryCode
							PrmVatReportID
								variable name is VatReportID
							bod id.VariationID
								variable name is BODVariationId																			
					






															

		UpdateTaxCodeAndAddress is an Instance Action

			restricted
			Parameters
				PrmTaxCode			is like TaxCode
				PrmPostalAddress	is a PostalAddressV2	
					holds pii
			Parameter Rules
			Action Rules




				if (LastVertexLookupPostalAddress not entered
				and PrmPostalAddress entered)
					LastVertexLookupPostalAddress = PrmPostalAddress
					if (LastVertexLookupPostalAddress.DeliveryAddress.AddressLine1 not entered)
						LastVertexLookupPostalAddress.DeliveryAddress.AddressLine1	= "1"		
							
				if (PrmTaxCode entered)
					LastVertexLookupTaxAreaId 		= PrmTaxCode
					ReturnedTaxAreaId				= PrmTaxCode	
					include CallCalculateTax





		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location" 
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"	
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
				PrmVariationID       is Alpha size 22
					default label is "VariationID"	
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord
				if (bod id.VariationID != PrmVariationID)
					bod id.VariationID			= PrmVariationID				

		ValidateOneSourceConnection  is an Instance Action

			valid when (OneSourceOriginal)


			completion message is "One\SourceConnectionSuccessfull...ReturnedTaxRate:<ReturnedTaxRate>.<PartialValidationAddress>"					
			Parameters
			Local Fields
				LocalTrigger is Alpha 1
			Parameter Rules
			Action Rules
				
				if (TaxConfigVersionRel.ValidationPostalAddress.Country entered)					
					ReturnedValidationAddress = TaxConfigVersionRel.ValidationPostalAddress
					
				if (1SourceDummyTaxCodeRel not exist)
					invoke Create TaxCode	 
						invoked.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
						invoked.TaxCode						= "1S"
						invoked.TaxType						= "S"
						invoked.Description					= "Saint Paul" + "/" + "Ramsey" + "/" + "MN"  
											
				CalculateTax.TaxEntity						= TaxEntity
				CalculateTax.InputReference					= "Action:ValidateOneSourceConnection" 
				CalculateTax.InvoiceCompany					= "2078"
				CalculateTax.UniqueIdOfRelatedObject		= "187881859"
				CalculateTax.BaseCurrency					= "USD"
				CalculateTax.Vendor							= "44857"
				CalculateTax.VendorCustomerName				= "SHELL TRD CAN"
				CalculateTax.Invoice						= "187881859"
				CalculateTax.InvoiceDate					= current corporate date
				CalculateTax.InvoiceAmount					= 100.00
				CalculateTax.TaxCode						= "1S"		
				if (ReturnedValidationAddress.Country entered)
					CalculateTax.FromPostalAddress			= ReturnedValidationAddress					
					CalculateTax.PostalAddress				= ReturnedValidationAddress					
				else	
					CalculateTax.FromPostalAddress			= "US^Street1^^^^Saint Paul^MN^55102^^^2^0.00000000^0.00000000^0.00000000"		 
					CalculateTax.PostalAddress				= "US^Street1^^^^Saint Paul^MN^55102^^^2^0.00000000^0.00000000^0.00000000"	//"CA^Street1^^^^TORONTO^ON^M3J 1P1^^^2^0.00000000^0.00000000^0.00000000"
				CalculateTax.Function            			= "C"	
				CalculateTax.BypassEditing 					= true
				LocalTrigger								= CalculateTax.SabrixThirdParty 
				constraint (CalculateTax.OutputErrorNumber not entered)   
		      		"<CalculateTax.OutputErrorMessage>" 
				ReturnedTaxRate								= CalculateTax.ReturnedTotalRate


		ValidateVATRegistrationNumber is an Instance Action
			valid when (PerformVATValidation)
			Action Rules
				ICountryCode		= VATRegistrationCountry
				IVatNumber			= VATRegistrationNumber
				initialize IRequesterCountryCode
				initialize IRequesterVatNumber
				invoke CheckVatService ValidateVAT						
					invoked.SoapRequest					= VatRequestXML	
					VATValidation.ResponseXML 			= result.SoapResponse
				VATValidation.RequestXML			= VatRequestXML
				VATValidation.OCountryCode 			= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/countryCode"		
				VATValidation.OVatNumber 			= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/vatNumber"
                VATValidation.ORequestDate 			= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/requestDate"
				VATValidation.OValid 				= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/valid"
				VATValidation.OTraderName 			= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/traderName"
				VATValidation.OTraderCompanyType 	= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/traderCompanyType"
                VATValidation.OTraderAddress 		= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/traderAddress"
                VATValidation.ORequestIdentifier	= VATValidation.ResponseXML select "//Envelope/Body/checkVatApproxResponse/requestIdentifier"
                VATValidation.ValidationDate		= current timestamp
                if (VATValidation.VATValid)
                	VATValidation.VATNumberValid		= true
                else
                	VATValidation.VATNumberValid		= false

		LoadOneSourceDefaults is an Instance Action

			valid when (ThirdParty.Sabrix)	
			Action Rules
				constraint (OneSourceVersionType = TaxConfigurationRel.OneSourceVersionType)
					"OneSourceVersionTypesAreNotTheSame.ChangeOneSourceVersionTypeToMatch_\Tax\Configuration"		
		      	CallingSystem				= TaxConfigurationRel.CallingSystem	 
				FilterGroupName				= TaxConfigurationRel.FilterGroupName	 
				FilterGroupOwner			= TaxConfigurationRel.FilterGroupOwner	 
				HostSystem					= TaxConfigurationRel.HostSystem	 
				IsAudited					= TaxConfigurationRel.IsAudited	 
				ProductMappingGroupName		= TaxConfigurationRel.ProductMappingGroupName	 
				ProductMappingGroupOwner	= TaxConfigurationRel.ProductMappingGroupOwner	 
				CompanyRole					= TaxConfigurationRel.CompanyRole	 
				ExternalCompanyId			= TaxConfigurationRel.ExternalCompanyId	 
				ExternalCompanyIdName		= TaxConfigurationRel.ExternalCompanyIdName	 		
				UseAsLegalEntity			= TaxConfigurationRel.UseAsLegalEntity	
				OneSourceVersionType		= TaxConfigurationRel.OneSourceVersionType	 










		ValidateOneSourceGenericConnection is an Instance Action	 
			completion message is "One\SourceGenericConnectionSuccessfull;IsSuccess<IsSuccess>;TaxRate:<ReturnedTaxRate>.<PartialValidationAddress>"					
			valid when (OneSourceGeneric)			
			Local Fields											 
				IsSuccess				is Boolean
				LocalErrorNumber		is Numeric 3
				WebServiceErrorMessage 	is Text	
				
			Parameter Rules											 
			Action Rules	
				initialize ReturnedTaxRate
				CalculateTax.CallingModule				= "TaxEntity"
				CalculateTax.UniqueIdOfRelatedObject	= UniqueID
				CalculateTax.RelatedObjectReference		= reference to this instance
				CalculateTax.InFinanceEnterpriseGroup   = FinanceEnterpriseGroup 
				CalculateTax.HostSystem					= HostSystem			
				CalculateTax.CallingSystem				= CallingSystem		
				CalculateTax.ExternalCompany			= ExternalCompanyId		
				CalculateTax.ExternalCompanyName		= ExternalCompanyIdName
				CalculateTax.FilterGroupName			= FilterGroupName	 
				CalculateTax.FilterGroupOwner			= FilterGroupOwner	 
				CalculateTax.ProductMappingGroupName	= ProductMappingGroupName	 
				CalculateTax.ProductMappingGroupOwner	= ProductMappingGroupOwner	 
 
				LocalTrigger							= CalculateTax.ValidateOneSourceGeneric
				IsSuccess								= CalculateTax.IsSuccess	
				WebServiceErrorMessage 					= CalculateTax.WebServiceErrorMessage
				LocalErrorNumber						= CalculateTax.LocalErrorNumber
				
				constraint (CalculateTax.LocalErrorNumber not entered)   
					"ReturnedError:<CalculateTax.OutputErrorMessage>" 

				constraint (IsSuccess)   
					"OneSourceVersionType:<CalculateTax.OneSourceVersionType>WebServiceError:<CalculateTax.WebServiceError>,ValidateConnectionFailed;IsSuccess<IsSuccess>,WebServiceError:<WebServiceErrorMessage>,LocalErrorNumber:<LocalErrorNumber>,HttpStatusCode:<CalculateTax.HttpStatusCode>,LocalErrorCategory:<CalculateTax.LocalErrorCategory>,SabrixReturnMessage:<CalculateTax.SabrixReturnMessage>"	//,DerivedErrorMessage:<CalculateTax.DerivedErrorMessage>" 







				ReturnedTaxRate							= CalculateTax.OutputTaxRate
				ReturnedValidationAddress				= CalculateTax.ReturnedValidationAddress
													

						
		SendTaxReportNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is LCLTaxReportXMLBOD
					bod type is "Sync.LCLTaxReport"
					accounting entity is DerivedAccountingEntity
					document id is DerivedDocumentID
					variation id is DerivedBODVariationId
											
		TriggerTaxReportNativeLPLBOD is an Instance Action
			restricted
			Parameters
				PrmFromPeriod		 is Numeric 2
				PrmToPeriod          is Numeric 2
				PrmTaxYear		     is Numeric size 10
				PrmCountryCode	     is AlphaUpper size 5
				PrmVatReportID		 is AlphaUpper size 10
				
			Action Rules		
					LocalPrmFromPeriod    = PrmFromPeriod
					LocalPrmToPeriod      = PrmToPeriod
					LocalPrmTaxYear    	  = PrmTaxYear	
					LocalPrmCountryCode   = PrmCountryCode
					LocalPrmVatReportID   = PrmVatReportID
					invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
						invoked.PrmVerb 					= 1
						invoked.PrmNoun						= "LCLTaxReport"
						invoked.PrmDirection				= 1
						invoked.PrmTriggerFrom				= "TaxEntity"
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmAccountingEntity			= TaxEntity
						invoked.PrmMainUserTemplate			= "IONSyncLCLTaxReport_TaxEntity_ST"
					NativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
					if(FinanceEnterpriseGroup.BODTrigger and NativeLPLBODTrigger)
						include NativeLPLRuleblock
						include NativeLPLMexicoCountryblock
						include NativeLPLMXVendordetailsXML
						if(FSMInboundBODTracker not entered)
							invoke Create FSMInboundBODTracker
								assign result to NewBODTracker
								invoked.Verb 					= 1
								invoked.Noun 					= "LCLTaxReport"					
								invoked.BODDocumentID			= DerivedDocumentID
								invoked.BODVariationID			= DerivedBODVariationId
								invoked.Status					= 1
								invoked.StartDate				= system current timestamp
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.Direction				= 1
								invoked.BODAccountingEntity		= DerivedAccountingEntity
								invoked.RunGroup				= TaxEntity
								invoked.Reference1				= LocalPrmFromPeriod
								invoked.Reference2              = LocalPrmToPeriod 
								invoked.Reference3				= LocalPrmTaxYear 	
								invoked.Reference4				= LocalPrmCountryCode 
								invoked.Reference5				= LocalPrmVatReportID 
								initialize invoked.Error			
								initialize invoked.ErrorMessage					
							LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
						else 
							LocalFSMInboundBODTracker		= FSMInboundBODTracker
							invoke Update FSMInboundBODTrackerRel
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.BODDocumentID			= DerivedDocumentID
								invoked.BODVariationID			= DerivedBODVariationId
								invoked.Status					= 1
								invoked.StartDate				= system current timestamp
								invoked.Direction				= 1
								invoked.BODAccountingEntity		= DerivedAccountingEntity
								invoked.RunGroup				= TaxEntity
								invoked.Reference1				= LocalPrmFromPeriod
								invoked.Reference2              = LocalPrmToPeriod 
								invoked.Reference3				= LocalPrmTaxYear 	
								invoked.Reference4				= LocalPrmCountryCode 
								invoked.Reference5				= LocalPrmVatReportID 
								initialize invoked.Error			
								initialize invoked.ErrorMessage
						invoke SendTaxReportNativeLPLBOD
							resume on error
		                   		Error            							= true
		                        ErrorMessage     							= error message
		                if(Error)
							invoke Update FSMInboundBODTrackerRel
								invoked.Error 								= Error
								invoked.ErrorMessage 						= ErrorMessage
								invoked.Status								= 2
								invoked.CloseDate							= system current timestamp
								invoked.BODID								= DerivedNativeBODID
								invoked.BODXML								= LCLTaxReportXMLBOD
						else
							invoke Update FSMInboundBODTrackerRel
								invoked.Status									= 3
								invoked.CloseDate								= system current timestamp
								invoked.BODID									= DerivedNativeBODID
								invoked.BODXML									= LCLTaxReportXMLBOD

		CopyFromExisting is an Instance Action	 
			Parameters
				CopyFromTaxEntity 	is a TaxEntity
				ToAccountingEntity
				NewTaxEntityTaxID	is a TaxID 
					holds pii
				CopyEntityTaxCodes	is Boolean
			Local Fields											 
			Parameter Rules
				CopyFromTaxEntity
					initial value is TaxEntity
					required
				ToAccountingEntity
					required
			Action Rules



				LocalNewTaxEntityKey = ToAccountingEntity 	
				if (!UseTaxCodeAccounts)	

					LocalTaxInputAccount 	= TaxInputAccount 
					LocalTaxOutputAccount	= TaxOutputAccount

					LocalInputDueAccount 	= TaxInputDueAccount
					LocalOutputDueAccount 	= TaxOutputDueAccount
					include LoadTaxAccounts	
								

				if (RecoverableAccount.ToAccountingEntity entered)
		        	LocalRecoverableAccount = RecoverableAccount
		        	LocalRecoverableAccount.ToAccountingEntity = ToAccountingEntity
		        if (NonRecoverableAccount.ToAccountingEntity entered) 	       		  	
		        	LocalNonRecoverableAccount = NonRecoverableAccount  
		        	LocalNonRecoverableAccount.ToAccountingEntity = ToAccountingEntity
		        if (ForeignRecoverableAccount.ToAccountingEntity entered)      	  		
		        	LocalForeignRecoverableAccount = ForeignRecoverableAccount
		        	LocalForeignRecoverableAccount.ToAccountingEntity = ToAccountingEntity 
		        if (ForeignNonRecoverableAccount.ToAccountingEntity entered) 	  	
		        	LocalForeignNonRecoverableAccount = ForeignNonRecoverableAccount
		        	LocalForeignNonRecoverableAccount.ToAccountingEntity = ToAccountingEntity	 	

				LocalNewTaxEntityKey = ToAccountingEntity 							        			
				if (CopyFromTaxEntity exist
				and NewTaxEntityRel not exist)	
					invoke Create TaxEntity
						fill in fields from this instance
							except invoked.LastTransactionID	
							except invoked.LastIntrastatNumber
							except invoked.TaxDistributionCode
						invoked.TaxEntity						= ToAccountingEntity	
						if (!UseTaxCodeAccounts)
							invoked.TaxInputAccount 			= LocalTaxInputAccount	
							invoked.TaxOutputAccount 			= LocalTaxOutputAccount  
							if (LocalInputDueAccount.ToAccountingEntity entered)
								invoked.TaxInputDueAccount 						= LocalInputDueAccount
							if (LocalOutputDueAccount.ToAccountingEntity entered)	
								invoked.TaxOutputDueAccount 					= LocalOutputDueAccount
						if (NewTaxEntityTaxID entered)
							invoked.TaxID 							= NewTaxEntityTaxID		
						if (LocalRecoverableAccount.ToAccountingEntity entered)
				        	invoked.RecoverableAccount 				= LocalRecoverableAccount
				        if (LocalNonRecoverableAccount.ToAccountingEntity entered) 	       		  	
				        	invoked.NonRecoverableAccount 			= LocalNonRecoverableAccount  
				        if (LocalForeignRecoverableAccount.ToAccountingEntity entered)      	  		
				        	invoked.ForeignRecoverableAccount 		= LocalForeignRecoverableAccount
				        if (LocalForeignNonRecoverableAccount.ToAccountingEntity entered) 	  	
				        	invoked.ForeignNonRecoverableAccount 	= LocalForeignNonRecoverableAccount
						invoked.LastTransactionID 	= blank	
						invoked.LastIntrastatNumber = blank
						
				if (NewTaxEntityRel exist	

				and CopyEntityTaxCodes)			 		
					for each EntityTaxCodeRel
						LocalTaxInputAccount 	= each.TaxInputAccount 
						LocalTaxOutputAccount	= each.TaxOutputAccount
						LocalInputDueAccount 	= each.TaxInputDueAccount
						LocalOutputDueAccount 	= each.TaxOutputDueAccount		
	 					include LoadTaxAccounts
						invoke Create EntityTaxCode
							fill in fields from each					 
			                  	except invoked.LastTransactionID
								except invoked.Status			  
								except invoked.TaxDistributionCode 	
							invoked.EntityTaxCode.TaxEntity	= ToAccountingEntity	
							invoked.TaxInputAccount 		= LocalTaxInputAccount 	 
							invoked.TaxOutputAccount 		= LocalTaxOutputAccount	 
							invoked.TaxInputDueAccount 		= LocalInputDueAccount 	 
							invoked.TaxOutputDueAccount		= LocalOutputDueAccount 		


		DeleteEntityTaxCodes is an Instance Action	 
			completion message is "<RecordCount>RecordsSuccessfullyDeleted"										
	 		Parameters
	 		Local Fields
	 			RecordCount is Numeric 6
			Action Rules
				if (EntityTaxCodeRel exist)
					RecordCount = DerivedEntityTaxCodes
					invoke Delete EntityTaxCodeRel

		ResetTransactionId is an Instance Action	 
        	valid when (ResetLastTransactionId)	
			Action Rules
				if (NoTaxTransationsExist)
					initialize LastTransactionID

		ResetTransactionIdForEntityTaxCodes is an Instance Action	 
			valid when (ResetLastTransactionIdForETCodes)	
			Action Rules		
				if (UseTaxCodeAccounts
				and EntityTaxCodeRel exists)
					for each EntityTaxCodeRel
						invoke ResetTransactionId each	
		
		DeleteTaxLogForFixBaseAmountEntries is an Instance Action	

			restricted												
			Parameters
				PrmSystemCode		is AlphaUpper size 2	 
		            States
		                Billing            value is "BL"
		                BillingAndRevenue  value is "BR"
		                CashLedger         value is "CB"
		                CashReceipts       value is "CR"
		                AccountsPayable    value is "AP"
							default label is "Payables"
		                AccountsReceivable value is "AR"
							default label is "Receivables"
		            default label is "SystemCode"        			
				PrmTaxCode			is a TaxCode	
					default label is "TaxCode"	
				CutOffDateRange is a DateRange	  				
			Action Rules
				if (TaxLogForFixBaseAmountsRel exist)
					for each TaxLogForFixBaseAmountsRel
						if  (each.LogTaxEntity = TaxEntity
						and (CutOffDateRange not entered
						or	((CutOffDateRange entered
						and	 each.CreateDate within CutOffDateRange))  							
					    and ((PrmSystemCode entered
					    and   PrmSystemCode = each.SystemCode)							 
					    or    PrmSystemCode not entered))				 				 					 						 
					    and ((PrmTaxCode entered
					    and   PrmTaxCode = each.LogToTaxCode)							 
					    or    PrmTaxCode not entered))
							invoke Delete each 
			

		ClearTaxConfigurationCommentText is an Instance Action	
			restricted		
			Parameters
			Local Fields
			Parameter Rules	
			Action Rules
				invoke Update TaxConfigurationRel				
					initialize invoked.CommentText
