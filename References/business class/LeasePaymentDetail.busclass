LeasePaymentDetail is a BusinessClass
    owned by lm
    prefix is LPD
    classic name is LMPAYDTL

    Ontology
        symbolic key is LeasePaymentDetail
            classic set name is LPDSET1
            classic name for LeasePaymentDetail.PaymentNumber is PMT-NBR
            classic name for LeasePaymentDetail.ExecutoryCostCode is EXEC-CODE
            classic name for Vendor is PMT-VENDOR

    Patterns
        implements StaticJava
            has attachments
        disable AuditIndex
		implements Archivable

    Persistent Fields

        Suffix
        LeaseInvoiceDistribution    is Numeric size 6
            classic name is DIST-SEQ-NBR
        Description
        Currency					is a FromCurrency
            classic name is CURRENCY-CODE
        CurrencyNumberOfDecimals
            classic name is CURR-ND
        RecurringLeasePaymentDetail
            classic name is RECUR-NBR
        AuthorityCode               is a PayablesAuthorityCode
            classic name is AUTH-CODE
        DueDate
        PaymentAmount               is like InternationalAmount
        	precision is Lease.CurrencyNumberOfDecimals
            classic name is PAYMENT-AMT
        VendorInvoiceNumber
            classic name is VENDOR-INV-NBR
        Released                    is Boolean
            classic name is RELEASED-FL
        Terminated					is Boolean 
        BaseCurrency                is a ToCurrency
        BasePaymentAmount           is an InternationalAmount
            classic name is BASE-PMT-AMT
        BaseCurrencyRate
            classic name is BASE-CURR-RATE
        BaseNumberOfDecimals
            classic name is BASE-ND

		LeaseCompute	
		ComputeGroup	




        ComputeBaseAmount           is an InternationalAmount
            classic name is CMP-PMT-AMT
        AccrueFlag                  is Boolean                             
        AccrueReverseFlag           is Boolean							   
            classic name is ACCRUE-RVRS
        Taxable	 					is Boolean							   
        TaxCode
        TaxUsageCode
            classic name is TAX-USAGE-CD
        PercentTaxable              is a Percent
            classic name is PCNT-TAXABLE
        BaseTaxable                 is an InternationalAmount
        TransactionTaxableAmount    is an InternationalAmount
        	precision is CurrencyNumberOfDecimals
            classic name is TRAN-TAXABLE
        BaseLandTax                 is an InternationalAmount
        TransactionLandTax          is an InternationalAmount
            classic name is TRAN-LAND-TAX
        MaximumPayment              is an InternationalAmount
            classic name is MAXIMUM-PMT
        AdvancedComputeOption
            classic name is COMPUTE-OPT
        GeneralLedgerBudgetNumber   is a BudgetNbr                          
            classic name is GL-BUDGET-NBR
            default label is "GlobalLedgerBudgetNumber"
        Period                      is Numeric 2 							
        Year	







        AccountingUnitList										  			
            classic name is AU-MATRIX-LIST




        AccountGroup                                              			
        SubAccountGroup             is a SubAcctGrp				  			
            classic name is SUB-ACCT-GRP
		NetChangeToPresentValue		is an InternationalAmount
		ResidualPayment	 			is Boolean
		PurchaseOptionPayment       is Boolean
		DeferredRent 				is like InternationalAmount
			precision is CurrencyNumberOfDecimals
		BalanceSheetAmount       	is like InternationalAmount
			precision is CurrencyNumberOfDecimals
		BaseDeferredRent 			is like InternationalAmount
			precision is BaseNumberOfDecimals
		BaseBalanceSheetAmount      is like InternationalAmount
			precision is BaseNumberOfDecimals
		CombineWithLeasePayment		is Boolean
		DoNotCreateAPInvoice		is Boolean
			default label is "DoNotCreatePayablesInvoice"
		
	Local Fields
		LocalCurrencyExchangeGroup			is a CurrencyExchangeGroup
		CalculateTax
		LocalCalculateTaxExecuted			is Alpha 1
		LocalTotalTaxAmount					is an InternationalAmount
		I1									is Numeric size 1
		LocalCompletionMessage				is Text
		LocalFirstDueDate                   is Date

		LocalLeaseComputeAmount				is an InternationalAmount 
		LocalLeaseModification				is a LeaseModification
		LocalModificationDate				is Date
		LocalModificationMonth				is Numeric size 2
		LocalTempDate						is Date
		LocalTaxTableOutput					is a TaxTableOutput 
		LocalDeferredRent           		is an InternationalAmount
		LocalAdjustment             		is an InternationalAmount
		LocalDueDate 						is Date
		LocalLastPaymentNumber      		is Numeric size 6
		LocalBeginDate						is Date
		LocalEndDate						is Date
		LocalEOMDays						is Numeric size 2
		LocalDueDateMonth					is Numeric size 2
		LocalBaseStraightLineAmount			is an InternationalAmount
			
	Transient Fields
		TransientLeaseComputeAmount	is Decimal 18.6		
			derive value from LeaseComputeAmount
		TransientDateRange						is a ProjectDateRange

		TransientReportOption					is AlphaUpper size 1
			States
                ReportOnly  	value is "R"
                Update 			value is "U"
		TransientRightToUser					is a FinanceCodeBlock
		TransientLeaseLiability					is a FinanceCodeBlock
		TransientEquity							is a FinanceCodeBlock
		TransientDepreciation					is a FinanceCodeBlock


	Context Fields
		TransitionDateRange						is a DateRange
		


	Derived Fields
		PaymentPlusTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (PaymentAmount + TransactionLandTax)

		BasePaymentPlusTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (BasePaymentAmount + BaseLandTax)

		TotalTaxAmount is a DerivedField		
			type is like InternationalAmount
			initialize CalculateTax
			CalculateTax.TaxEntity										= Company.AccountingEntity
			CalculateTax.System											= "AP"
			CalculateTax.Vendor											= LeasePayment.Vendor
			CalculateTax.TaxCode 										= TaxCode
			CalculateTax.FromTaxCode									= LeasePayment.Vendor.TaxCode
			CalculateTax.ProcessLevel									= LeasePayment.ProcessLevel
			CalculateTax.PostalAddress									= LeasePayment.ProcessLevel.PostalAddress
			CalculateTax.FromPostalAddress								= LeasePayment.Vendor.VendorAddress

			CalculateTax.Function										= "C"
			CalculateTax.ThirdPartyFunction								= "I"
			if (LeasePayment.Lease.Ownership)
				CalculateTax.TransactionType							= "P"
			else
				CalculateTax.TransactionType							= "L"		//In S3, it is passing "L"
			if (PercentTaxable entered)
				CalculateTax.TaxableAmount 								= (PaymentAmount * PercentTaxable)
			else
				CalculateTax.TaxableAmount								= TransactionTaxableAmount
			CalculateTax.TaxDate										= DueDate
			CalculateTax.DontCreateLogFile								= true
			LocalCalculateTaxExecuted									= CalculateTax.ExecuteCalculateTax
			return CalculateTax.OutputTotalTaxAmount
			
		TotalInvoiceTaxAmount is a DerivedField
			type is like InternationalAmount
			initialize LocalTotalTaxAmount
			initialize CalculateTax
			CalculateTax.TaxEntity										= Company.AccountingEntity
			CalculateTax.System											= "AP"
			CalculateTax.Vendor											= LeasePayment.Vendor
			CalculateTax.TaxCode 										= TaxCode
			CalculateTax.FromTaxCode									= LeasePayment.Vendor.TaxCode
			CalculateTax.ProcessLevel									= LeasePayment.ProcessLevel
			CalculateTax.PostalAddress									= LeasePayment.ProcessLevel.PostalAddress
			CalculateTax.FromPostalAddress								= LeasePayment.Vendor.VendorAddress

			CalculateTax.Function										= "C"
			CalculateTax.ThirdPartyFunction								= "I"
			if (LeasePayment.Lease.Ownership)
				CalculateTax.TransactionType							= "P"
			else
				CalculateTax.TransactionType							= "L"		//In S3, it is passing "L"
			if (PercentTaxable entered)
				CalculateTax.TaxableAmount 								= (PaymentAmount * PercentTaxable)
			else
				CalculateTax.TaxableAmount								= TransactionTaxableAmount
			CalculateTax.TaxDate										= DueDate
			CalculateTax.DontCreateLogFile								= true
			LocalCalculateTaxExecuted									= CalculateTax.ExecuteCalculateTax
			LocalTaxTableOutput											= CalculateTax.TaxTable.TaxTableOutput
			I1 = 1
			while (I1 <= 8)
				LocalTotalTaxAmount									   += LocalTaxTableOutput.TaxAmount
				I1 += 1
				if (CalculateTax.TaxTable.TaxTableOutput[I1].TaxCode not entered)
					I1 = 9
			return LocalTotalTaxAmount

		TotalPaymentAmount is a DerivedField
			type is like InternationalAmount
			return (PaymentAmount + TotalInvoiceTaxAmount)


		LeaseComputeAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return LeaseCompute.TransientLeaseComputeAmount


		CreateLeasePayementDetailWithStraightLineMessage	is a MessageField
			restricted
			"CreateComplete;StraightLineAmountNeedsToBeReviewed"
		
		UpdateLeasePayementDetailWithStraightLineMessage	is a MessageField
			restricted
			"UpdateComplete;StraightLineAmountNeedsToBeReviewed"
		
		DeleteLeasePayementDetailWithStraightLineMessage	is a MessageField
			restricted
			"DeleteComplete;StraightLineAmountNeedsToBeReviewed"
		
		CreateLeasePayementDetail							is a MessageField
			restricted
			"LeasePaymentDetailCreated"
		
		UpdateLeasePayementDetail							is a MessageField
			restricted
			"UpdatedCompletedSucessfully"
		
		DeleteLeasePayementDetail							is a MessageField
			restricted
			"DeleteCompletedSuccesfully"

		CreateLeasePayementDetailWithAmortizationMessage	is a MessageField
			restricted
			"CreateComplete;AmortizationNeedsToBeRecalculated"
		
		UpdateLeasePayementDetailWithAmortizationMessage	is a MessageField
			restricted
			"UpdateComplete;AmortizationNeedsToBeRecalculated"
		
		DeleteLeasePayementDetailWithAmortizationMessage	is a MessageField
			restricted
			"DeleteComplete;AmortizationNeedsToBeRecalculated"



		TransitionReportYear is a DerivedField
			type is Numeric size 4
			return DueDate year

		TransitionReportPeriod is a DerivedField
			type is Numeric size 2
			return DueDate month			

		TransitionReportNetChangeAsset is a DerivedField
			type is like InternationalAmount
			return NetChangeToPresentValue
			
		TransitionReportNetChangeLiability is a DerivedField
			type is like InternationalAmount
			return TransitionReportNetChangeAsset * -1
			
		TransitionReportNetChangeEquity is a DerivedField
			type is like InternationalAmount
			return "0"

		BaseNetChangeToPresentValue is a DerivedField
			type is like InternationalAmount
			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= NetChangeToPresentValue
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= LeasePayment.Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= BaseCurrency
			return LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount			

		PreviousDueDate is a DerivedField
			type is Date
			if (!LeasePaymentDetail.ExecutoryCostCode entered)
				return first PreviousNonExecutoryLeasePaymentDetailRel.DueDate
		
		NextDueDate is a DerivedField
			type is Date
			if (!LeasePaymentDetail.ExecutoryCostCode entered)
				if (PreviousNonExecutoryLeasePaymentDetailRel exists)
					return PreviousDueDate + 1 month
				else
					return DueDate
				
		DateDifference is a DerivedField
			type is Numeric 3
			if (!LeasePaymentDetail.ExecutoryCostCode entered
			and !ResidualPayment
			and !PurchaseOptionPayment)
				return (((NextDueDate year - DueDate year) * 12) + (NextDueDate month - DueDate month))
		
		DerivedActualModificationDate is a DerivedField
			type is Date
			default label is "ModificationDate"
			if (Lease.Status.Modify)
				return first UnreleasedLeaseModificationRel.ModificationDate

		LeaseRepresentativeText is a StringField
			type is Text
			default label is "Lease"
			Lease " - " Lease.Description
			
		CompanyRepresentativeText is a StringField
			type is Text
			default label is "Company"
			Company " - " Company.Name
			
		VendorRepresentativeText is a StringField
			type is Text
			default label is "Vendor"
			Vendor " - " Vendor.VendorName	
			
		DerivedFinalAdjustment is a DerivedField
			type is like InternationalAmount
				precision is CurrencyNumberOfDecimals
			initialize LocalAdjustment
			if (Lease.EndingResidual
			or  Lease.HasEndingBargainPurchaseOption)
				if (DueDate month = Lease.EndDate month
				and DueDate year = Lease.EndDate year)	
					for each LeasePaymentDetailForBalanceSheetRel	
						LocalAdjustment += each.DeferredRent
					LocalAdjustment += DerivedEndingResidualAmount - LeasePayment.StraightLineAmount
					LocalAdjustment += DerivedUpFrontLeaseCost
				return LocalAdjustment
			else
				if (DueDate month = Lease.EndDate month
				and DueDate year = Lease.EndDate year)
					for each LeasePaymentDetailForBalanceSheetRel
						LocalAdjustment += each.DeferredRent
					LocalAdjustment += PaymentAmount - LeasePayment.StraightLineAmount
					LocalAdjustment += DerivedUpFrontLeaseCost
				return LocalAdjustment	
				
		DerivedUpFrontLeaseCost is a DerivedField
			type is like InternationalAmount
			return ((Lease.DerivedLeaseIncentiveLeaseCurrency * -1) + Lease.InitialDirectCost.TransactionAmount + LeaseInitialDirectCostRel.InitialDirectCostTotal + Lease.DownPayment.TransactionAmount)

		DerivedBaseUpFrontLeaseCost is a DerivedField
			type is like InternationalAmount
			return ((Lease.DerivedLeaseIncentiveBaseCurrency * -1) + Lease.InitialDirectCost.BaseAmount.EnteredCurrencyAmount + LeaseInitialDirectCostRel.InitialDirectCostBaseTotal + Lease.DownPayment.BaseAmount.EnteredCurrencyAmount)
						
		DerivedStraightLineAmount is a DerivedField
			type is like InternationalAmount
				precision is CurrencyNumberOfDecimals 
			if (Lease.BeginningResidual
			or  Lease.HasBeginningBargainPurchaseOption)
				if (DueDate month = Lease.EndDate month
				and DueDate year = Lease.EndDate year
				and DueDate day = Lease.EndDate day)
					return LeasePayment.StraightLineAmount + DerivedFinalAdjustment
				else 
					return LeasePayment.StraightLineAmount 	
			else
				if (Lease.EndingResidual
				or  Lease.HasEndingBargainPurchaseOption)
					if (DueDate month = Lease.EndDate month
					and DueDate year = Lease.EndDate year
					and DueDate day = Lease.EndDate day)
						return ((LeasePayment.StraightLineAmount + DerivedFinalAdjustment) * DerivedPercent)
					else 
						return LeasePayment.StraightLineAmount 
				else
					if (DueDate month = Lease.EndDate month
					and DueDate year = Lease.EndDate year)
						return LeasePayment.StraightLineAmount + DerivedFinalAdjustment
					else 
						return LeasePayment.StraightLineAmount 		
					
		DerivedEndingResidualAmount is a DerivedField
			type is like InternationalAmount
			for each LeasePaymentDetailRel
				if (DueDate = each.DueDate)	
					DerivedEndingResidualAmount += each.PaymentAmount
			return DerivedEndingResidualAmount		
		
		DerivedPercent is a DerivedField
			type is Percent size 5.2
			return (PaymentAmount / DerivedEndingResidualAmount)

		InvoiceZeroPayment	is a DerivedField  
			type is Boolean
			restricted
			if (PaymentAmount = 0 and Lease.InvoiceZeroPayment)
				if (Lease.IsFinance
				and Lease.PaymentTiming.BeginningOfPeriod
				and LeasePaymentDetail.ExecutoryCostCode not entered
				and DueDate month = Lease.BeginDate month
				and DueDate year = Lease.BeginDate year)
					return false
				else
					return true
			else
				return false

		DerivedRoundTo					is a DerivedField
    		type is Decimal 5.4
			restricted
    		if (Currency.NumberOfDecimals = 2)
    			return .01
    		else
    		if (Currency.NumberOfDecimals = 0)
    			return 1
    		else
    		if (Currency.NumberOfDecimals = 3)
    			return .001
    		else
    		if (Currency.NumberOfDecimals = 4)
    			return .0001

		DerivedBaseRoundTo					is a DerivedField
    		type is Decimal 5.4
			restricted
    		if (BaseCurrency.NumberOfDecimals = 2)
    			return .01
    		else
    		if (BaseCurrency.NumberOfDecimals = 0)
    			return 1
    		else
    		if (BaseCurrency.NumberOfDecimals = 3)
    			return .001
    		else
    		if (BaseCurrency.NumberOfDecimals = 4)
    			return .0001

		DerivedShortTermLiabilityAmount	is a DerivedField
			type is Decimal 24.8
			if (Lease.ShortTermLiabilityAccounting)
				DerivedShortTermLiabilityAmount	= LeaseCurrencyPaymentPeriodBalanceRel.ShortTermLiabilityReduction
				round DerivedShortTermLiabilityAmount to nearest DerivedRoundTo
				return DerivedShortTermLiabilityAmount

		DerivedLongTermLiabilityAmount	is a DerivedField
			type is Decimal 24.8
			if (Lease.ShortTermLiabilityAccounting)
				DerivedLongTermLiabilityAmount	= LeaseCurrencyPaymentPeriodBalanceRel.LongTermLiabilityReduction
				round DerivedLongTermLiabilityAmount to nearest DerivedRoundTo
				return DerivedLongTermLiabilityAmount

		DerivedBaseShortTermLiabilityAmount	is a DerivedField
			type is Decimal 24.8
			if (Lease.ShortTermLiabilityAccounting)
				DerivedBaseShortTermLiabilityAmount	= LeasePaymentPeriodBalanceRel.ShortTermLiabilityReduction
				round DerivedBaseShortTermLiabilityAmount to nearest DerivedBaseRoundTo
				return DerivedBaseShortTermLiabilityAmount

		DerivedBaseLongTermLiabilityAmount	is a DerivedField
			type is Decimal 24.8
			if (Lease.ShortTermLiabilityAccounting)
				DerivedBaseLongTermLiabilityAmount	= LeasePaymentPeriodBalanceRel.LongTermLiabilityReduction
				round DerivedBaseLongTermLiabilityAmount to nearest DerivedBaseRoundTo
				return DerivedBaseLongTermLiabilityAmount

		DerivedGLYear  is a DerivedField
			type is Year
			restricted
			return (first GLClosePeriodRel.GeneralLedgerCloseYear)

		DerivedNextLeasePayment is a DerivedField  
			type is Alpha size 1
			if (first NextLeasePaymentDetailsRel.LeasePaymentDetail.PaymentNumber = this instance.LeasePaymentDetail.PaymentNumber)
				return 1
			return 0

        DerivedFiscalPeriod is a DerivedField
            type is Numeric size 2
            return FiscalYearAndPeriodRel.LeasePaymentPeriodBalance

        DerivedFiscalYear is a DerivedField
            type is Numeric size 4
            return FiscalYearAndPeriodRel.LeasePaymentPeriodBalance.LeasePaymentBalance.FiscalYear

    Conditions
    	IsStraightLineMessage
    		restricted
    		when (LeasePayment.StraightLine
			and   Lease.Status.Released
			and   LeasePaymentDetail.ExecutoryCostCode not entered
			and  (PaymentAmount changed
			or    Taxable changed
			or    TaxCode changed
			or    TransactionTaxableAmount changed
			or    PercentTaxable changed))
			
        IsComputeExists
        	restricted
            when (LeaseCompute.ComputeStatement entered)

        HasInvoiceDistribution
        	restricted
            when (LeaseInvoiceDistribution entered)

        IsLmcompute
        	restricted
            when (AdvancedComputeOption exists)

        VendorIsLessor
        	restricted
            when (Vendor = Lease.Lessor)

        VendorIsNotLessor
        	restricted
            when (Vendor != Lease.Lessor)
            
		PaymentOrComputeOrTaxableAmount
			restricted
			when (PaymentAmount entered
			or    LeaseCompute.ComputeStatement entered
			or    TransactionTaxableAmount entered)      

		WithinLeaseReportRange
			restricted
			when (TransitionDateRange not entered
			or   (TransitionDateRange entered
		    and   DueDate within TransitionDateRange))

		IsLandedTax
			restricted
			when  (TaxCode entered
			and	 ((TaxEntityRel.UseTaxCodeAccounts
			and    EntityTaxCodeRel.LandedCost)
			or 	 (!TaxEntityRel.UseTaxCodeAccounts
			and    TaxEntityRel.LandedCost)))
			
		RecordExists
			restricted
			when (LeasePaymentDetail exists)

		CanDeleteLeasePaymentDetail
			when (Lease.Status.Modify
			or	  LeasePaymentDetail.ExecutoryCostCode entered
			or 	  !SubsequentNonExecutoryLeasePaymentDetailRel exists
			or    Lease.IsMonthToMonthRenewal
			or    ResidualPayment = false
			or    PurchaseOptionPayment = false)
			
		AllowUpdate
			when (!ResidualPayment)
			
		IsModificationAdd
			when (Lease.Status.Modify)


		AllowLandedTax
			when (LeasePaymentDetail.ExecutoryCostCode entered)

		LandedCostRedAlert
			restricted
			when (IsLandedTax
			and LeasePaymentDetail.ExecutoryCostCode not entered
			and !Released)
		
		HasInvoices
			restricted
			when (LeaseInvoiceRel exists)

		IsValidForActorContext
			restricted
			when (Company.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

		IsLeapYear
			when (DueDate is leap year )

        VariableCostPayment
            when (LeaseExecutoryCostCodeRel.VariableCost)
			
    Relations

        LeaseInvoiceRel
            one-to-many relation to LeaseInvoice
            Field Mapping uses symbolic key
                related.Company                    			= Company
                related.Lease                      			= Lease
				related.Vendor                     			= Vendor
			Instance Selection
                where (related.LeaseInvoice.PaymentNumber 			= LeasePaymentDetail.PaymentNumber)

        LeasePaymentRel
            one-to-one relation to LeasePayment
            Field Mapping uses symbolic key
                related.Company 							= Company
                related.Lease   							= Lease
                related.Vendor  							= Vendor

        RecurringLeasePaymentDetailRel
            one-to-one relation to RecurringLeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company                             = Company
                related.Lease                               = Lease
                related.Vendor                              = Vendor


                related.RecurringLeasePaymentDetail         = RecurringLeasePaymentDetail

        LastPaymentNumberDetailRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set2
                related.Company                    			= Company
                related.Lease                      			= Lease
                related.Vendor                     			= Vendor
		
		NextLeasePaymentDetailsRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company  = Company
                related.Lease     = Lease
                related.Vendor    = Vendor
            Instance Selection
                where (related.LeasePaymentDetail.ExecutoryCostCode not entered
				and    related.Released = false
				and    related.PaymentAmount != 0)

        LastDueDatePaymentDetailRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set3
                related.Company                    			= Company
                related.Lease                      			= Lease
            Instance Selection
            	where (related.Vendor = Vendor)
            	    
        SamePaymentNumberDetailRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses symbolic key
                related.Company                    			= Company
                related.Lease                      			= Lease
                related.Vendor                     			= Vendor
            Instance Selection
            	where (related.LeasePaymentDetail.PaymentNumber		= LeasePaymentDetail.PaymentNumber
            	and related.LeasePaymentDetail.ExecutoryCostCode	= LeasePaymentDetail.ExecutoryCostCode
            	and related.UniqueID								!= UniqueID)

        CombinePaymentlRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set2
                related.Company                    			= Company
                related.Lease                      			= Lease
                related.Vendor                     			= Vendor
				related.LeasePaymentDetail.PaymentNumber	= LeasePaymentDetail.PaymentNumber
            Instance Selection
            	where (related.UniqueID						!= UniqueID)

        ReleasedPaymentDetailRel
	        one-to-many relation to LeasePaymentDetail
	        Field Mapping uses symbolic key
	            related.Company                    			= Company
	            related.Lease                      			= Lease
	            related.Vendor                     			= Vendor
            Instance Selection
            	where (related.LeasePaymentDetail.PaymentNumber		= LeasePaymentDetail.PaymentNumber
            	and related.Released								= true)
                
		LeaseExecutoryCostCodeRel
			one-to-one relation to LeaseExecutoryCostCode
			Field Mapping uses Set1
				related.Company								= Company
				related.Lease								= Lease
				related.ExecutoryCostCode					= LeasePaymentDetail.ExecutoryCostCode

       	TaxEntityRel				 
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
                related.TaxEntity 							= Company.AccountingEntity

        EntityTaxCodeRel
            classic name is TAXCODE
            one-to-one relation to EntityTaxCode
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
                related.TaxEntity 							= Company.AccountingEntity
                related.TaxCode 							= TaxCode

		NonExecutoryLeasePaymentDetailRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set2
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
       		Instance Selection
                where (related.LeasePaymentDetail.ExecutoryCostCode not entered)

		LeasePaymentForTheMonthRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
       		Instance Selection
                where (related.DueDate > LocalBeginDate
				and    related.DueDate < LocalEndDate
            	and    related.ResidualPayment = false
            	and    related.PurchaseOptionPayment = false
				and    related.UniqueID							!= UniqueID
				and    related.LeasePaymentDetail.ExecutoryCostCode not entered)

        PreviousNonExecutoryLeasePaymentDetailRel
            one-to-many relation using NonExecutoryLeasePaymentDetailRel
            Instance Selection
            	where (related.DueDate < DueDate)
        
        SubsequentNonExecutoryLeasePaymentDetailRel
            one-to-many relation using NonExecutoryLeasePaymentDetailRel
            Instance Selection
            	where (related.DueDate > DueDate)
            	    	    
       	ExecutoryLeasePaymentDetailRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses Set2
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
            Instance Selection
                where (related.LeasePaymentDetail.ExecutoryCostCode entered
                and	   related.LeasePaymentDetail.ExecutoryCostCode = LeasePaymentDetail.ExecutoryCostCode)
        
        LeasePaymentDetailRel
            one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByExecutoryCode
                related.Company                     				= Company
                related.Lease                       				= Lease
                related.Vendor                      				= Vendor
       			related.LeasePaymentDetail.ExecutoryCostCode 		= LeasePaymentDetail.ExecutoryCostCode
       			
        LeasePaymentDetailDueDateRel
            one-to-many relation using LeasePaymentDetailRel
            Instance Selection
            	where (related.DueDate = DueDate
            	and    related.ResidualPayment = false
            	and    related.PurchaseOptionPayment = false
            	and    related.UniqueID != UniqueID)	

        LeasePaymentDetailExistRel
            one-to-many relation using LeasePaymentDetailRel
            Instance Selection
            	where (related.DueDate > Lease.BeginDate
				and    related.ResidualPayment = false 
            	and    related.PurchaseOptionPayment = false
            	and    related.UniqueID != UniqueID)

        LeasePaymentForDueDateRel
            one-to-many relation using 		LeasePaymentDetailLastPaymentRel
            Instance Selection
            	where (related.DueDate = DueDate
            	and    related.ResidualPayment = false
            	and    related.PurchaseOptionPayment = false
            	and    related.UniqueID != UniqueID)

        UnreleasedLeaseModificationRel
        	one-to-many relation to LeaseModification
			Field Mapping uses symbolic key
				related.Company 		= Company
				related.Lease			= Lease
				related.Vendor			= Vendor				
			Instance Selection
				where (related.Status.Unreleased)
				
		LeaseModificationPaymentDetailRel
			one-to-one relation to LeaseModificationPaymentDetail
			Field Mapping uses ByOriginatingTransaction
				related.Company 				= Company
				related.Lease					= Lease
				related.Vendor					= Vendor
				related.LeaseModification		= LocalLeaseModification				
				related.OriginatingTransaction	= reference to LeasePaymentDetail
		
		LeasePaymentDetailWithinDateRangeRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company					= Company
                related.Lease                   = Lease
                related.Vendor                  = Vendor
       		Instance Selection
                where (related.DueDate within TransientDateRange
                and    related.LeasePaymentDetail.ExecutoryCostCode not entered)
        
        LeasePaymentDetailAfterDateRangeRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company                 = Company
                related.Lease                   = Lease
                related.Vendor                  = Vendor
       		Instance Selection
                where (related.DueDate > TransientDateRange.EndDate
                and    related.LeasePaymentDetail.ExecutoryCostCode not entered)

		LeasePaymentDetailForBalanceSheetRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company					= Company
                related.Lease                   = Lease
                related.Vendor                  = Vendor
       		Instance Selection
                where (related.DueDate < DueDate
                and    related.LeasePaymentDetail.ExecutoryCostCode not entered)
            
		LeasePaymentDetailForBalanceSheetResidualRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company					= Company
                related.Lease                   = Lease
                related.Vendor                  = Vendor
       		Instance Selection
                where (related.LeasePaymentDetail.PaymentNumber != LocalLastPaymentNumber 
                and    related.LeasePaymentDetail.ExecutoryCostCode not entered)
                
		LeasePaymentDetailLastPaymentRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company					= Company
                related.Lease                   = Lease
                related.Vendor                  = Vendor
       		Instance Selection
                where (related.LeasePaymentDetail.ExecutoryCostCode not entered)           

		PurgeLeasePaymentDetailCommentRel is an LeasePaymentDetailComment set
			Instance Selection
				include deleted records

		LeasePaymentPeriodBalanceRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
                related.Vendor  = Vendor
            Instance Selection
                where (related.LeasePaymentBalance.ExecutoryCostCode not entered
                and  related.PaymentDueDate = DueDate)

		LeaseCurrencyPaymentPeriodBalanceRel
            one-to-many relation to LeaseCurrencyPaymentPeriodBalance
            Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
                related.Company = Company
                related.Lease   = Lease
                related.Vendor  = Vendor
            Instance Selection
                where (related.LeasePaymentBalance.ExecutoryCostCode not entered
                and  related.PaymentDueDate = DueDate)





		GLClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			 = Company.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 = Company.AccountingEntity.CloseConfiguration
			Instance Selection
				where (related.GeneralLedgerClosePeriod.DerivedPeriodMonth = DueDate month
				and    related.GeneralLedgerClosePeriod.DerivedPeriodYear = DueDate year)

        LeaseBaseCurrencyPaymentPeriodBalanceNoECCRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses Set3
                related.Company = Company
                related.Lease   = Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered)

		LeaseInitialDirectCostRel
			one-to-many relation to LeaseInitialDirectCost
			Field Mapping uses symbolic key
                related.Company = Company
                related.Lease   = Lease 

		FiscalYearAndPeriodRel
			one-to-many relation to LeasePaymentPeriodBalance
			Field Mapping uses ByCompanyLeaseVendorFiscalYearDueDate
				related.Company = Company
				related.Lease   = Lease
				related.Vendor  = Vendor
			Instance Selection
				where (related.PaymentDueDate month = DueDate month
				and    related.PaymentDueDate year  = DueDate year)

		FirstPaymentDueDateRel
			one-to-many relation to LeasePaymentDetail
            Field Mapping uses ByDueDate
                related.Company					= Company
                related.Lease                   = Lease
                related.Vendor                  = Vendor
				related.DueDate                 = LocalFirstDueDate
				related.LeasePaymentDetail.ExecutoryCostCode = blank

    Sets

        Set2
            indexed
            Sort Order
                Company
                Lease
                Vendor
                LeasePaymentDetail.PaymentNumber descending
                LeasePaymentDetail.ExecutoryCostCode

        Set3
            indexed
            Sort Order
                Company
                Lease
                DueDate
                Vendor
                LeasePaymentDetail

        Set5
            indexed
            Sort Order
                Company
                Lease
                LeasePaymentDetail.ExecutoryCostCode
                Vendor
                LeasePaymentDetail.PaymentNumber

        Set6
            indexed
            Sort Order
                Company
                Lease
                Vendor
                RecurringLeasePaymentDetail
                LeasePaymentDetail











		ByDueDate
			indexed
            Sort Order
                Company
                Lease
                Vendor
                DueDate
                LeasePaymentDetail.ExecutoryCostCode
                LeasePaymentDetail.PaymentNumber

		ByNextDueDate
			Sort Order
				DueDate
				Company
				Lease
				LeasePaymentDetail.ExecutoryCostCode
                LeasePaymentDetail.PaymentNumber
                
		ByExecutoryCode
            indexed
            Sort Order
                Company
                Lease
                Vendor
                LeasePaymentDetail.ExecutoryCostCode
                LeasePaymentDetail.PaymentNumber
                
	Rule Blocks
		CalculateBaseAmounts
			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= PaymentAmount
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= LeasePayment.Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= LeasePayment.Lease.BaseCurrency
			BasePaymentAmount											= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= TransactionTaxableAmount
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= LeasePayment.Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= LeasePayment.Lease.BaseCurrency
			BaseTaxable		 											= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= TransactionLandTax
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= LeasePayment.Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= LeasePayment.Lease.BaseCurrency
			BaseLandTax		 											= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

		CalculateBalanceSheetBaseAmounts
			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= DeferredRent
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= LeasePayment.Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= LeasePayment.Lease.BaseCurrency
			BaseDeferredRent				                            = LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

			initialize LocalCurrencyExchangeGroup
			LocalCurrencyExchangeGroup.TransactionAmount 				= BalanceSheetAmount
			LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= LeasePayment.Lease.BaseCurrencyRate
			LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= LeasePayment.Lease.BaseCurrency
			BaseBalanceSheetAmount		                                = LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
			





			
		TaxCalculation
			initialize CalculateTax
			CalculateTax.TaxEntity										= Company.AccountingEntity
			CalculateTax.System											= "AP"
			CalculateTax.Vendor											= LeasePayment.Vendor
			CalculateTax.TaxCode 										= TaxCode
			CalculateTax.FromTaxCode									= LeasePayment.Vendor.TaxCode
			CalculateTax.ThirdPartyFunction								= "I"
			CalculateTax.Function										= "I"
			CalculateTax.ProcessLevel									= LeasePayment.ProcessLevel
			CalculateTax.PostalAddress									= LeasePayment.ProcessLevel.PostalAddress
			CalculateTax.FromPostalAddress								= LeasePayment.Vendor.VendorAddress

			constraint (CalculateTax.OutputErrorNumber not entered) 
				"<CalculateTax.OutputErrorMessage>"
			CalculateTax.Function										= "C"
			CalculateTax.ThirdPartyFunction								= "I"
			if (LeasePayment.Lease.Ownership)
				CalculateTax.TransactionType							= "P"
			else
				CalculateTax.TransactionType							= "S"		//In S3, it is passing "L"
			if (PercentTaxable entered)
				CalculateTax.TaxableAmount 								= (PaymentAmount * PercentTaxable)
			else
				CalculateTax.TaxableAmount								= TransactionTaxableAmount
			CalculateTax.TaxDate										= DueDate
			LocalCalculateTaxExecuted									= CalculateTax.ExecuteCalculateTax
			if (IsLandedTax)
				if (LeasePaymentDetail.ExecutoryCostCode not entered
				and !Lease.IsShortTermLease)
					constraint (!IsLandedTax) 
						"TaxCodeHasLandedTaxes.LandedTaxesAreCurrentlyNotSupportedOnLeases"
				else
					TransactionLandTax									= CalculateTax.OutputTotalTaxAmount							

		CreateLeasePaymentDetail
			if (PaymentDateRange.BeginDate = FirstDueDate)
				LocalPeriodDate = FirstDueDate
			else
			if (FirstDueDate < PaymentDateRange.BeginDate + 1 month)
				LocalPeriodDate = FirstDueDate
			else
				LocalDateDifference = (((FirstDueDate year - PaymentDateRange.BeginDate year) * 12) + (FirstDueDate month - PaymentDateRange.BeginDate month))
				LocalPeriodDate = FirstDueDate - LocalDateDifference as months
			
			LocalDueDate = FirstDueDate
			
			while (LocalPeriodDate <= PaymentDateRange.EndDate)
				invoke Create LeasePaymentDetail
					invoked.DueDate			= LocalPeriodDate
					invoked.PaymentAmount	= PaymentAmount

					invoked.Currency					= Lease.Currency
					invoked.CurrencyNumberOfDecimals	= Lease.CurrencyNumberOfDecimals
					invoked.BaseCurrency				= Lease.BaseCurrency
					invoked.BaseCurrencyRate			= Lease.BaseCurrencyRate
					invoked.BaseNumberOfDecimals		= Lease.BaseNumberOfDecimals
					invoked.BasePaymentAmount			= BasePaymentAmount
					invoked.AuthorityCode               = AuthorityCode			
					if (LocalDueDate != LocalPeriodDate)
						initialize invoked.PaymentAmount
						
				if (Frequency.Weekly)
					if (LocalDueDate = LocalPeriodDate)
						LocalDueDate	+= 7 days
					LocalPeriodDate		+= 7 days
				else
				if (Frequency.Monthly)
					if (LocalDueDate = LocalPeriodDate)
						LocalDueDate	+= 1 month
					LocalPeriodDate		+= 1 month
				else
				if (Frequency.Quarterly)
					if (LocalDueDate = LocalPeriodDate)
						LocalDueDate	+= 3 months
					LocalPeriodDate		+= 1 month
				else
				if (Frequency.SemiAnnually)
					if (LocalDueDate = LocalPeriodDate)
						LocalDueDate	+= 6 months
					LocalPeriodDate		+= 1 month
				else
				if (Frequency.Yearly)
					if (LocalDueDate = LocalPeriodDate)
						LocalDueDate	+= 1 year
					LocalPeriodDate		+= 1 month	

		CheckLeasePaymentsPerMonth
			if (DueDate entered
			and LeasePaymentDetail.ExecutoryCostCode not entered
			and !ResidualPayment
			and !PurchaseOptionPayment)
				initialize LocalEOMDays
				initialize LocalDueDateMonth
				LocalBeginDate	= DueDate
				LocalEndDate = DueDate
				LocalBeginDate  = LocalBeginDate - DueDate day
				LocalDueDateMonth 	= DueDate month
				if (LocalDueDateMonth = 1
				or  LocalDueDateMonth = 3
				or  LocalDueDateMonth = 5
				or  LocalDueDateMonth = 7
				or  LocalDueDateMonth = 8
				or  LocalDueDateMonth = 10
				or  LocalDueDateMonth = 12)
					LocalEOMDays = 32
				else
					if (!LocalDueDateMonth = 2)
						LocalEOMDays = 31
					else
						if (DueDate is leap year)
							LocalEOMDays = "30"
						else
							LocalEOMDays = "29"
				LocalEndDate = LocalBeginDate + LocalEOMDays as days
				constraint (!LeasePaymentForTheMonthRel exists)
					"LeasePaymentAlreadyExistForTheMonth:<DueDate month>Year:<DueDate year>.CannotHaveTwoLeasePaymentsInTheSamePeriod."

		IncrementDueDate
			if (Frequency.Monthly)
				LocalModDate		+= 1 month
			else
			if (Frequency.Quarterly)
				LocalModDate		+= 3 months
			else
			if (Frequency.SemiAnnually)
				LocalModDate		+= 6 months
			else
			if (Frequency.Yearly)
				LocalModDate		+= 1 year

	Field Rules
    	Vendor
			initial value is LeasePayment.Vendor
			default to LeasePayment.Vendor
			
		Currency
			default to Lease.Currency
			
		CurrencyNumberOfDecimals
			initial value is Lease.CurrencyNumberOfDecimals
					
		BaseCurrency
			default to Lease.BaseCurrency

		BaseCurrencyRate
			default to Lease.BaseCurrencyRate
		
		BaseNumberOfDecimals
			default to Lease.CurrencyNumberOfDecimals
		
		AccrueFlag
			if (LeasePaymentDetail.AccrueFlag)
				constraint (LeaseCompute.ComputeStatement entered)
					"AccruePaymentSelected,ComputeStatementRequired"                            

				if (LeaseCompute.ComputeStatement entered)
					constraint (!Lease.LeaseClassification.Finance)
						"CannotHaveAccruePaymentsOnAFinanceLease"                               

					constraint (!LeasePaymentDetail.ExecutoryCostCode entered)
						"CannotHaveAccruePaymentsOnExecutoryCosts"                              

			if  (Lease.IsReleased)
				if (LeasePaymentDetail.PaymentNumber >= LastPaymentNumberDetailRel.LeasePaymentDetail.PaymentNumber)
					constraint (!AccrueFlag)
						"LastPaymentDetailCannotBeSetToAccruedIfLeaseIsReleased"                    
				

				if (DueDate >= LastDueDatePaymentDetailRel.DueDate)
					constraint (!AccrueFlag)
						"LastPaymentDetailCannotBeSetToAccruedIfLeaseIsReleased"
				

				if (Lease.LeaseClassification.Finance

				and AccrueFlag changed)
					constraint (Lease.AccruedAccount entered)
						"CannotAccruePaymentsIfNoAccrualAccountEnteredOnLease"
					
		Released
			cannot be entered

		PaymentAmount
			if (LeasePayment.Vendor != Lease.Lessor)
				constraint (LeasePaymentDetail.ExecutoryCostCode entered)
					"OnlyNonLeaseComponentPaymentsCanBeEnteredForNonLessorPaymentSchedules"
					
			if (Lease.IsReleased
			and Lease.HasAmortizationSchedule
			and LeasePaymentDetail.ExecutoryCostCode not entered
			and !Released)
				constraint (PaymentAmount not changed)
					"PaymentAmountCanOnlyBeChangedOnNonLeaseComponentPayments,AfterTheLeaseHasBeenReleased."

		DueDate
			required
			if (!LeasePaymentDetail.ExecutoryCostCode entered and !PurchaseOptionPayment and !ResidualPayment) 
				if (LeasePayment.LeasePaymentDueDay > Lease.EndDate day  
				and DueDate month 	= Lease.EndDate month
				and DueDate year 	= Lease.EndDate year)
					constraint (DueDate day = Lease.EndDate day)
						"<DueDate>:LeasePaymentInTheFinalMonthMustBeOnTheLeaseEndDate:<Lease.EndDate>"
				else
					if (LeasePayment.LeasePaymentDueDay < Lease.BeginDate day 
					and DueDate month 	= Lease.BeginDate month
					and DueDate year 	= Lease.BeginDate year)
						constraint (DueDate day = Lease.BeginDate day)
							"<DueDate>:LeasePaymentInTheBeginMonthMustBeOnTheLeaseBeginDate:<Lease.BeginDate>"
					else
						if (LeasePayment.LeasePaymentDueDay = "31")  
							if (DueDate month ="1" or DueDate month  = "3" or DueDate month  = "5" or DueDate month  = "7" or DueDate month  = "8" or DueDate month  = "10" or DueDate month  = "12")
								constraint (DueDate day = "31")
									"<DueDate>:AllLeasePaymentsMustBeOnTheEndOfTheMonth"
							else
								if (DueDate month ="4" or DueDate month  = "6" or DueDate month  = "9" or DueDate month  = "11")
									constraint (DueDate day = "30")
										"<DueDate>:AllLeasePaymentsMustBeOnTheEndOfTheMonth"
								else
									if (IsLeapYear)
										constraint (DueDate day = "29")
											"<DueDate>:AllLeasePaymentsMustBeOnTheEndOfTheMonth"
									else
										constraint (DueDate day = "28")
											"<DueDate>:AllLeasePaymentsMustBeOnTheEndOfTheMonth"
						else
							if (LeasePayment.LeasePaymentDueDay < "29") 
								constraint (DueDate day = LeasePayment.LeasePaymentDueDay)
									"<DueDate>:AllLeasePaymentsMustBeOnTheSameDueDay:<LeasePayment.LeasePaymentDueDay>"
							else
								if (DueDate month != "2") 
									constraint (DueDate day = LeasePayment.LeasePaymentDueDay)
										"<DueDate>:AllLeasePaymentsMustBeOnTheSameDueDay:<LeasePayment.LeasePaymentDueDay>"
								else
									if (IsLeapYear)
										constraint (DueDate day = "29")
											"<DueDate>:AllLeasePaymentsMustBeOnTheSameDueDay:<LeasePayment.LeasePaymentDueDay>"
									else
										constraint (DueDate day = "28")
											"<DueDate>:AllLeasePaymentsMustBeOnTheSameDueDay:<LeasePayment.LeasePaymentDueDay>"

				if (IsModificationAdd)  
					constraint (DateDifference = 0)
						"PaymentDetailDueDateMustBeInTheNextPeriodAfterTheLastLeasePayment"



			
			constraint (DueDate >= Lease.BeginDate)
				"PaymentDetailDueDateCannotBeBeforeTheLeaseBeginDate"
				
			if (!Lease.IsMonthToMonthRenewal)
				constraint (DueDate <= Lease.EndDate)
					"PaymentDetailDueDateCannotBeAfterTheLeaseEndDate"	
			
			if (!ResidualPayment
			and !PurchaseOptionPayment
			and LeasePaymentDetail.ExecutoryCostCode not entered)
				constraint (!LeasePaymentDetailDueDateRel exists)
					"CannotHaveMultiplePaymentsWithTheSameDueDate"
										
        Taxable
        	if (LeasePaymentDetail.ExecutoryCostCode entered)
        		default to LeaseExecutoryCostCodeRel.Taxable
        		
        TaxCode
        	if (LeasePaymentDetail.ExecutoryCostCode entered)
        		default to LeaseExecutoryCostCodeRel.TaxCode
        	else
        	if (Taxable)
        		default to LeasePayment.RemitToCode.TaxCode
        		default to LeasePayment.Vendor.TaxCode
			
			if (!Taxable)
				cannot be entered
					"CannotEnterTaxCodeIfLineIsNotTaxable"                                     
			else
				required	
					
		TransactionLandTax
			if (!Taxable)
				initialize TransactionLandTax
				initialize BaseLandTax	
								
        TaxUsageCode
        	if (LeasePaymentDetail.ExecutoryCostCode entered)
        		default to LeaseExecutoryCostCodeRel.TaxUsageCode
        	else
        	if (Taxable)
        		default to LeasePayment.RemitToCode.TaxUsageCode
        		default to LeasePayment.Vendor.TaxUsageCode
			else

				cannot be entered
					"TaxUsageCodeNotValidIfPaymentDetailIsNotTaxable"

		PercentTaxable
			if (!Taxable)
				cannot be entered
					"PercentTaxableNotValidIfPaymentDetailIsNotTaxable"
			else
				if (TransactionTaxableAmount entered)
					cannot be entered
						"CannotEnterBothTransactionTaxableAmountAndPercentTaxable"
				else
					required
						"MustEnterEitherTransactionTaxableAmountAndPercentTaxableIfPaymentSetToTaxable"
						
			constraint (PercentTaxable <= 100)
				"PercentTaxableMustBeBetween0And100"
			constraint (PercentTaxable >= 0)
				"PercentTaxableMustBeBetween0And100"	
				        						
		TransactionTaxableAmount
			if (!Taxable)
				cannot be entered
					"TaxableAmountNotValidIfPaymentDetailIsNotTaxable"
			else
				if (PercentTaxable entered)
					cannot be entered
						"CannotEnterBothTransactionTaxableAmountAndPercentTaxable"
				else
					required
						"MustEnterEitherTransactionTaxableAmountAndPercentTaxableIfPaymentSetToTaxable"
							        						        			      			        			       			

        GeneralLedgerBudgetNumber
        	if (LeaseCompute.ComputeStatement not entered)
        		cannot be entered
        			"ComputeStatementNotEntered,GlobalLedgerBudgetNumberNotAllowedInComputeParameters"  
        			        			
        Period



        			
        Year




		ComputeGroup
			if (LeaseCompute entered)
				required

        ComputeBaseAmount
        	if (LeaseCompute.ComputeStatement not entered)
        		cannot be entered
        			"ComputeStatementNotEntered,BaseAmountNotAllowedInComputeParameters"                
        			        			
        MaximumPayment
        	if (LeaseCompute.ComputeStatement not entered)
        		cannot be entered
        			"ComputeStatementNotEntered,MaximumPaymentNotAllowedInComputeParameters"            
        			
        AdvancedComputeOption
        	if (LeaseCompute.ComputeStatement not entered)
        		cannot be entered
        			"ComputeStatementNotEntered,AdvancedComputeOptionNotAllowedInComputeParameters"     

		CombineWithLeasePayment
			cannot be changed        	
			if (LeasePaymentDetail.ExecutoryCostCode entered)
				if (CombineWithLeasePayment)
					constraint (LeasePaymentForDueDateRel exists)
						"LeasePaymentMustBeCreatedForTheSameDueDate,ToBeCombinedWithNon-LeasePayments"
					constraint (LeasePaymentForDueDateRel.PaymentAmount > "0")
						"LeasePaymentMustBeForMoreThanAZeroAmountWhenCombinedWithNon-LeasePayments"
					if (LeasePaymentForDueDateRel exists)
						constraint (!LeasePaymentForDueDateRel.Released)
							"LeasePaymentHasAlreadyBeenReleased.CannotBeCombinedWithNon-LeasePayment"
			else
				initialize

        DoNotCreateAPInvoice

			if (LeasePaymentDetail.ExecutoryCostCode entered)
				default to LeaseExecutoryCostCodeRel.DoNotCreateAPInvoice
			else
				default to LeasePayment.DoNotCreateAPInvoice
			if (PaymentAmount not entered)
				DoNotCreateAPInvoice = false

	Actions

		Create is a Create Action
			completion message is "<LocalCompletionMessage>"
			Entrance Rules			
				constraint (!Released)
					"CannotAdd;InvoiceAlreadyCreated"
				if (Lease.IsReleased
				and Lease.HasAmortizationSchedule)
					constraint (LeasePaymentDetail.ExecutoryCostCode entered)
						"OnlyNonLeaseComponentPaymentsCanBeAddedToReleasedFinanceLease"
				if (LeasePaymentDetail.ExecutoryCostCode entered)
					constraint (LeaseExecutoryCostCodeRel exists)
						"LeaseNonLeaseComponentNotAssignedToThisLease"
				if (Lease.Status.Modify)
					LocalModificationDate = first UnreleasedLeaseModificationRel.DerivedModificationPeriodDate
					constraint (DueDate >= LocalModificationDate)
						"CannotAddPaymentsBeforeTheModificationDate"
				include CheckLeasePaymentsPerMonth

			Action Rules
				if (LeasePaymentDetail.ExecutoryCostCode not entered and LeasePayment.LessorPaymentSchedule)
					constraint (LeasePayment.LeasePaymentDueDayEntered)
						"MustEnterTheLeasePaymentDueDayOnTheLeasePaymentSchedule"
				if (LeasePaymentDetail.ExecutoryCostCode entered
				and CombineWithLeasePayment)
					LeasePaymentDetail.PaymentNumber = LeasePaymentForDueDateRel.LeasePaymentDetail.PaymentNumber
				else
					if (LeasePaymentDetail.ExecutoryCostCode entered)
						LeasePaymentDetail.PaymentNumber = LeasePayment.LastPaymentNumber + 1
						invoke RestrictedUpdate LeasePayment
							invoked.LastPaymentNumber	= LeasePaymentDetail.PaymentNumber
				if (LeasePayment.StraightLine
				and Lease.Status.Released
				and LeasePaymentDetail.ExecutoryCostCode not entered)
					LocalCompletionMessage = CreateLeasePayementDetailWithStraightLineMessage
				else
					LocalCompletionMessage = CreateLeasePayementDetail
						
				if (Taxable
				and LeaseCompute.ComputeStatement not entered)
					include TaxCalculation
				include CalculateBaseAmounts
			Exit Rules
				if (LeasePaymentDetail.ExecutoryCostCode not entered
            	and LeasePaymentDetail.PaymentNumber entered)
            		invoke StraightLineUpdate LeasePayment
				if (Lease.Status.Modify
				and LeasePaymentDetail.ExecutoryCostCode not entered)
					invoke Create LeaseModificationPaymentDetail
						fill in fields from this instance
						invoked.Company												= Company
						invoked.Lease												= Lease
						invoked.Vendor												= Vendor
						invoked.LeaseModification									= first UnreleasedLeaseModificationRel.LeaseModification
						invoked.LeaseModificationPaymentDetail.PaymentNumber		= LeasePaymentDetail.PaymentNumber
						invoked.LeaseModificationPaymentDetail.ExecutoryCostCode	= LeasePaymentDetail.ExecutoryCostCode
						invoked.LeasePayment										= LeasePayment
						invoked.OriginatingTransaction								= reference to this instance
						invoked.ModificationAction 									= 1 
						invoked.ModifiedAmount										= PaymentAmount
						initialize invoked.PaymentAmount

				if (Lease.HasAmortizationSchedule
				and Lease.IsUnreleased
				and LeasePaymentDetail.ExecutoryCostCode not entered)
					invoke RemoveAmortization Lease
					LocalCompletionMessage	= CreateLeasePayementDetailWithAmortizationMessage

		RestrictedCreate is a Create Action
			restricted
			bypass field rules
			
		Update is an Update Action
			valid when (AllowUpdate)
			completion message is "<LocalCompletionMessage>"
			
			Entrance Rules
				constraint (!ResidualPayment)
					"CannotUpdate;ResidualPayment"
				constraint (!PurchaseOptionPayment)
					"CannotUpdate;PurchaseOptionPayment"
				constraint (ReleasedPaymentDetailRel not exist)
					"CannotModify;PaymentNumberAlreadyInvoiced"


				constraint (!Released)
					"CannotModify;InvoiceAlreadyCreated"
				if (Lease.IsReleased
				and Lease.HasAmortizationSchedule)
					if (LeasePaymentDetail.ExecutoryCostCode not entered and !Released)
						constraint (PaymentAmount not changed)
							"PaymentAmountCanOnlyBeChangedOnNonLeaseComponentPayments,AfterTheLeaseHasBeenReleased."













			
			Action Rules
				if (LeasePaymentDetail.ExecutoryCostCode not entered and LeasePayment.LessorPaymentSchedule)
					constraint (LeasePayment.LeasePaymentDueDayEntered)
						"MustEnterTheLeasePaymentDueDayOnTheLeasePaymentSchedule"
				if (IsStraightLineMessage)
					LocalCompletionMessage = UpdateLeasePayementDetailWithStraightLineMessage
				else
					LocalCompletionMessage = UpdateLeasePayementDetail

				if (Taxable
				and LeaseCompute.ComputeStatement not entered)
					include TaxCalculation

				if ((PaymentAmount changed
				or  AuthorityCode changed)  
				and Lease.Status.Modify)
					LocalLeaseModification = first UnreleasedLeaseModificationRel.LeaseModification
					LocalModificationDate = first UnreleasedLeaseModificationRel.DerivedModificationPeriodDate
					constraint (DueDate >= LocalModificationDate)
						"CannotModifyPaymentsBeforeTheModificationDate"
					
					invoke Update LeaseModificationPaymentDetailRel
						if (!invoked.ModificationAction.Added)
							invoked.ModificationAction	= 2 
						invoked.ModifiedDate		= DueDate
						invoked.ModifiedAmount		= PaymentAmount
				include CalculateBaseAmounts
				include CheckLeasePaymentsPerMonth	
					
			Exit Rules	
            	if (LeasePaymentDetail.ExecutoryCostCode not entered
            	and LeasePaymentDetail.PaymentNumber entered)
            		invoke StraightLineUpdate LeasePayment

				if (Lease.HasAmortizationSchedule
				and Lease.IsUnreleased
				and LeasePaymentDetail.ExecutoryCostCode not entered)
					invoke RemoveAmortization Lease
					LocalCompletionMessage	= UpdateLeasePayementDetailWithAmortizationMessage

		RestrictedUpdate is an Update Action
			restricted
			bypass field rules
			Entrance Rules
				
		UpdateBaseAmounts is an Update Action
			restricted
			bypass field rules
			Action Rules
				include CalculateBaseAmounts

		UpdateNetChangePresentValue is an Instance Action
			restricted
			Parameters
				PrmNetChangeToPresentValue is an InternationalAmount
			Action Rules
				NetChangeToPresentValue = PrmNetChangeToPresentValue
				

		UpdateComputeAmount is an Instance Action
			Action Rules
				invoke ComputeValue
		
			
        ComputeValue 		is an Update Action
        	bypass field rules
        	Action Rules
        		LocalLeaseComputeAmount = TransientLeaseComputeAmount
        		PaymentAmount			= LocalLeaseComputeAmount
        		invoke Update


		UpdateStatusAfterDeleteLeaseInvoice  is an Instance Action
			restricted
			Action Rules
				invoke UpdateStatusAfterDeleteLeaseInvoice RecurringLeasePaymentDetailRel
				Released                = false
					
		Delete is a Delete Action
			valid when (CanDeleteLeasePaymentDetail)
			completion message is "<LocalCompletionMessage>"
			
			Entrance Rules


				constraint (!Released)
					"CannotDelete;InvoiceAlreadyCreated"
				constraint (!ResidualPayment)
					"CannotDelete;ResidualPayment"
				constraint (!PurchaseOptionPayment)
					"CannotDelete;PurchaseOptionPayment"
				if (Lease.IsReleased
				and Lease.HasAmortizationSchedule)
					constraint (LeasePaymentDetail.ExecutoryCostCode entered)
						"OnlyNonLeaseComponentPaymentsCanBeDeletedOnReleasedLease"
				if (LeasePaymentDetail.ExecutoryCostCode not entered)
					constraint (CombinePaymentlRel not exists)
						"CannotDelete;ThereAreNonLeasePaymentsThatAreBeingCombinedWithThisPayment"
				if (Lease.Status.Modify)
					LocalLeaseModification = first UnreleasedLeaseModificationRel.LeaseModification
					LocalModificationDate = first UnreleasedLeaseModificationRel.DerivedModificationPeriodDate
					constraint (DueDate >= LocalModificationDate)
						"CannotDeletePaymentsBeforeTheModificationDate"
						
					invoke Update LeaseModificationPaymentDetailRel
						invoked.ModificationAction = 3 
						initialize invoked.ModifiedAmount
						
				if (LeasePayment.StraightLine
				and Lease.Status.Released
				and LeasePaymentDetail.ExecutoryCostCode not entered)
					LocalCompletionMessage = DeleteLeasePayementDetailWithStraightLineMessage
				else
					LocalCompletionMessage = DeleteLeasePayementDetail
					
			Exit Rules
            	if (LeasePaymentDetail.ExecutoryCostCode not entered
            	and LeasePaymentDetail.PaymentNumber entered)
            		invoke StraightLineUpdate LeasePayment
            		





				if (Lease.HasAmortizationSchedule
				and Lease.IsUnreleased
				and LeasePaymentDetail.ExecutoryCostCode not entered)
					invoke RemoveAmortization Lease
					LocalCompletionMessage	= DeleteLeasePayementDetailWithAmortizationMessage
					
		RestrictedDelete is a Delete Action
			restricted
			
		Purge is a Purge Action
			restricted
			Entrance Rules


				constraint (!Released)
					"CannotDelete;InvoiceAlreadyCreated"
				if (Lease.IsReleased
				and Lease.HasAmortizationSchedule)
					constraint (LeasePaymentDetail.ExecutoryCostCode not entered)
						"OnlyExecutoryPaymentsCanBeDeletedOnReleasedLease"

				if (LeasePaymentDetail.ExecutoryCostCode not entered)
					constraint (CombinePaymentlRel not exists)
						"CannotDelete;ThereAreNonLeasePaymentsThatAreBeingCombinedWithThisPayment"

				if (Lease.Status.Modify)
					LocalLeaseModification = first UnreleasedLeaseModificationRel.LeaseModification
					LocalModificationDate = first UnreleasedLeaseModificationRel.DerivedModificationPeriodDate
					constraint (DueDate >= LocalModificationDate)
						"CannotDeletePaymentsBeforeTheModificationDate"
						
					invoke Update LeaseModificationPaymentDetailRel
						invoked.ModificationAction = 3 
						initialize invoked.ModifiedAmount
						
			Exit Rules
            	if (LeasePaymentDetail.ExecutoryCostCode not entered
            	and LeasePaymentDetail.PaymentNumber entered)
            		invoke StraightLineUpdate LeasePayment


		TerminatePayment is an Instance Action
			restricted
			Action Rules
				Terminated = true

		ModifyPayments is an Instance Action
			valid when (Lease.Status.Modify)
			Parameters
				PaymentDateRange		is a ProjectDateRange
				ActionType				is Numeric 1
					default label is "Action"
					States
						AddPayments			value is 1
						UpdateAmounts		value is 2
						DeletePayments		value is 3
				FirstDueDate			is Date
				Frequency				is AlphaUpper size 1
					States
			            Weekly       value is "W"
			            Monthly      value is "M"
			            Quarterly    value is "Q"
			            Yearly       value is "Y"
			            SemiAnnually value is "S"
			                default label is "Semi-annually"
				PaymentAmount			is an InternationalAmount
				AuthorityCode           is a  PayablesAuthorityCode          
			
			Parameter Rules
				PaymentDateRange
					required











													
				ActionType
					required
					
				FirstDueDate
					if (ActionType.AddPayments)
						required
					constraint (FirstDueDate within PaymentDateRange)
						"FirstDueDateMustBeWithinThePaymentDateRange"
							
				Frequency
					if (ActionType.AddPayments)
						required
				
				PaymentAmount
					if (!ActionType.DeletePayments)
						required
			
			Local Fields
				LocalDateDifference		is Numeric 3
				LocalDueDate			is Date
				LocalPeriodDate			is Date	
				LocalModDate			is Date

			Action Rules
				constraint (LeasePayment.LeasePaymentDueDayEntered)
					"MustEnterTheLeasePaymentDueDayOnTheLeasePaymentSchedule"
				TransientDateRange = PaymentDateRange
				LocalModDate = FirstDueDate
				LocalFirstDueDate  = FirstDueDate
				if(!ActionType.AddPayments)
					constraint(FirstPaymentDueDateRel exists)
						"FirstDueDateMustBeOnALeasePaymentDate"
				LocalModificationDate = first UnreleasedLeaseModificationRel.DerivedModificationPeriodDate
                constraint (PaymentDateRange.BeginDate >= LocalModificationDate)
                    "BeginDateMustBeAfterTheModificationDate"
                if (!ActionType.DeletePayments)
                    constraint (PaymentDateRange.EndDate <= Lease.EndDate)
                        "EndDateMustBeBeforeTheLeaseEndDate"
				if (ActionType.AddPayments)
					include CreateLeasePaymentDetail
				else
				if (ActionType.UpdateAmounts)
					constraint (LeasePaymentDetailWithinDateRangeRel exists)
						"PaymentsDoNotExistWithinThePaymentDateRange"
					for each LeasePaymentDetailWithinDateRangeRel
						each.AuthorityCode = AuthorityCode
						if (each.DueDate < FirstDueDate) 
							invoke Update each
								initialize invoked.PaymentAmount
								initialize invoked.BasePaymentAmount
						else
							if (each.DueDate = FirstDueDate) 
								invoke Update each
									invoked.PaymentAmount = PaymentAmount

									include IncrementDueDate
							else
									if (each.DueDate = LocalModDate) 
										invoke Update each
											invoked.PaymentAmount = PaymentAmount

											include IncrementDueDate
									else
										invoke Update each  
											initialize invoked.PaymentAmount
											initialize invoked.BasePaymentAmount

				else
				if (ActionType.DeletePayments)
					constraint (LeasePaymentDetailWithinDateRangeRel exists)
						"PaymentsDoNotExistWithinThePaymentDateRange"
					if (LeasePaymentDetailAfterDateRangeRel exists)
						for each LeasePaymentDetailWithinDateRangeRel
							invoke Update each
								initialize invoked.PaymentAmount
								initialize invoked.BasePaymentAmount	
					else
						invoke Delete LeasePaymentDetailWithinDateRangeRel

		CalculateBalanceSheetBalance is an Update Action
			
			Action Rules
				BaseCurrency = LeasePayment.Lease.BaseCurrency
				if (Lease.BeginningResidual
				or  Lease.HasBeginningBargainPurchaseOption)
					if (DueDate month = Lease.EndDate month
					and DueDate year = Lease.EndDate year
					and DueDate day = Lease.EndDate day)
						DeferredRent = PaymentAmount - DerivedStraightLineAmount
					else
						DeferredRent = PaymentAmount - LeasePayment.StraightLineAmount
						
					if (DueDate month = Lease.BeginDate month
					and DueDate year = Lease.BeginDate year)				
						BalanceSheetAmount = DeferredRent + DerivedUpFrontLeaseCost
					else			
						for each LeasePaymentDetailForBalanceSheetRel	
							LocalDeferredRent += each.DeferredRent
						LocalDeferredRent += DeferredRent
						LocalDeferredRent += DerivedUpFrontLeaseCost
						BalanceSheetAmount = LocalDeferredRent
				else
					if (Lease.EndingResidual
					or  Lease.HasEndingBargainPurchaseOption)
						LocalDueDate = DueDate
						LocalLastPaymentNumber = last LeasePaymentDetailLastPaymentRel.LeasePaymentDetail.PaymentNumber
						if (DueDate month = Lease.EndDate month
						and DueDate year  = Lease.EndDate year
						and DueDate day   = Lease.EndDate day)
							DeferredRent = PaymentAmount - DerivedStraightLineAmount
						else
							DeferredRent = PaymentAmount - LeasePayment.StraightLineAmount
							
						if (DueDate month = Lease.BeginDate month
						and DueDate year = Lease.BeginDate year)				
							BalanceSheetAmount = DeferredRent + DerivedUpFrontLeaseCost
						else
							if (LeasePaymentDetail.PaymentNumber = LocalLastPaymentNumber)
								LocalDueDate = LocalDueDate + 1 day
								for each LeasePaymentDetailForBalanceSheetResidualRel	
									LocalDeferredRent += each.DeferredRent	
							else						
								for each LeasePaymentDetailForBalanceSheetRel	
									LocalDeferredRent += each.DeferredRent
							LocalDeferredRent += DeferredRent
							LocalDeferredRent += DerivedUpFrontLeaseCost
							BalanceSheetAmount = LocalDeferredRent
					else
						if (DueDate month = Lease.EndDate month
						and DueDate year = Lease.EndDate year)
							DeferredRent = PaymentAmount - DerivedStraightLineAmount
						else
							DeferredRent = PaymentAmount - LeasePayment.StraightLineAmount
							
						if (DueDate month = Lease.BeginDate month
						and DueDate year = Lease.BeginDate year)				
							BalanceSheetAmount = DeferredRent + DerivedUpFrontLeaseCost
						else			
							for each LeasePaymentDetailForBalanceSheetRel	
								LocalDeferredRent += each.DeferredRent
							LocalDeferredRent += DeferredRent
							LocalDeferredRent += DerivedUpFrontLeaseCost
							BalanceSheetAmount = LocalDeferredRent		
											
				include CalculateBalanceSheetBaseAmounts
							

		ASC840OldLeaseDataPurge is a Purge Action
			restricted

			Entrance Rules
				invoke Purge PurgeLeasePaymentDetailCommentRel


		CreateLeasePaymentBalance is a Set Action   
			restricted
			Parameters
				PrmCompany						is a PayablesCompany
				PrmLease						is like Lease
				PrmVendor						is a Vendor
				PrmTempFiscalYear				is Numeric 4

			Set Is  
				PrmCompany
                PrmLease
                PrmVendor

			Local Fields
				LocalActor							is an Actor
				LocalLeasePaymentDueDate			is Date
				LocalTempFiscalYear					is Numeric 4
				LocalROUReduction					is an InternationalAmount
				LocalBeginningROUAmount				is an InternationalAmount			
				LocalBeginningBalanceAmount			is an InternationalAmount
				LocalBeginningPrincipalBalance		is an InternationalAmount
				LocalBeginningBalanceInterest		is an InternationalAmount
				LocalFinanceLeaseROUReduction		is an InternationalAmount
				LocalNetBasePaymentAmount			is an InternationalAmount

			Instance Selection
				where (Company 		= PrmCompany
				and    Lease		= PrmLease
				and    Vendor		= PrmVendor
				and    LeasePaymentDetail.ExecutoryCostCode not entered)

			Sort Order is Set3

			Rule Blocks

				CalculateBaseSLAmounts
					initialize LocalCurrencyExchangeGroup
					LocalCurrencyExchangeGroup.TransactionAmount 				= LeasePaymentRel.StraightLineAmount
					LocalCurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= BaseCurrencyRate
					LocalCurrencyExchangeGroup.BaseAmount.ToCurrency			= BaseCurrency
					LocalBaseStraightLineAmount									= LocalCurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

			Action Rules
				Empty Set Rules
					send notification
						to LocalActor
						description is "LeaseAmortization"
						priority is high
						detail is "Must_have_lease_payments_to_create"
	
				Set Rules
					Entrance Rules
						LocalTempFiscalYear		= PrmTempFiscalYear
						LocalActor 				= actor

					Exit Rules







				Instance Rules

					LocalLeasePaymentDueDate = DueDate
					if (BaseLandTax entered)
						LocalNetBasePaymentAmount = (BasePaymentAmount + BaseLandTax)
					else
						LocalNetBasePaymentAmount =  BasePaymentAmount
					if (LocalTempFiscalYear not entered)
						LocalTempFiscalYear 							= Year
						LocalBeginningROUAmount							= Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
						LocalBeginningBalanceAmount						= Lease.DerivedTotalBasePayments - Lease.DownPayment.BaseAmount.EnteredCurrencyAmount
						LocalBeginningPrincipalBalance					= Lease.LeaseObligation.BaseAmount.EnteredCurrencyAmount
						LocalBeginningBalanceInterest					= LocalBeginningBalanceAmount - LocalBeginningPrincipalBalance
						LocalFinanceLeaseROUReduction					= Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount / Lease.Term									
						invoke CreateLeaseAmortization LeasePaymentBalance
							invoked.LeasePaymentBalance.FiscalYear 		= Year
							invoked.Company								= Company
							invoked.Lease								= Lease
							invoked.Vendor								= Vendor
							invoked.BeginningROUAmount					= LocalBeginningROUAmount
							invoked.BeginningBalanceAmount				= LocalBeginningBalanceAmount
							invoked.BeginningPrincipalBalance			= LocalBeginningPrincipalBalance
							invoked.BeginningBalanceInterest			= LocalBeginningBalanceInterest
							invoked.BaseNumberOfDecimals				= BaseNumberOfDecimals
						include CalculateBaseSLAmounts
						if (!Lease.LeaseClassification.Finance)
							LocalROUReduction							= LocalBaseStraightLineAmount - (LocalNetBasePaymentAmount - BaseNetChangeToPresentValue)
						else
							LocalROUReduction							= LocalFinanceLeaseROUReduction
						LocalBeginningROUAmount							= LocalBeginningROUAmount - LocalROUReduction
						LocalBeginningBalanceAmount						= LocalBeginningBalanceAmount - LocalNetBasePaymentAmount
						LocalBeginningPrincipalBalance					= LocalBeginningPrincipalBalance - BaseNetChangeToPresentValue
						LocalBeginningBalanceInterest					= LocalBeginningBalanceInterest - (LocalNetBasePaymentAmount - BaseNetChangeToPresentValue)								
					else
						if (Year != LocalTempFiscalYear)
							LocalTempFiscalYear = Year
							LocalBeginningROUAmount		=	last LeaseBaseCurrencyPaymentPeriodBalanceNoECCRel.ROUBalance
							invoke CreateLeaseAmortization LeasePaymentBalance
								invoked.LeasePaymentBalance.FiscalYear 	= Year
								invoked.Company							= Company
								invoked.Lease							= Lease
								invoked.Vendor							= Vendor
								invoked.BeginningROUAmount				= LocalBeginningROUAmount
								invoked.BeginningBalanceAmount			= LocalBeginningBalanceAmount
								invoked.BeginningPrincipalBalance		= LocalBeginningPrincipalBalance
								invoked.BeginningBalanceInterest		= LocalBeginningBalanceInterest
								invoked.BaseNumberOfDecimals			= BaseNumberOfDecimals
						include CalculateBaseSLAmounts
						if (!Lease.LeaseClassification.Finance)
							LocalROUReduction							= LocalBaseStraightLineAmount - (LocalNetBasePaymentAmount - BaseNetChangeToPresentValue)
						else
							LocalROUReduction							= LocalFinanceLeaseROUReduction
						LocalBeginningROUAmount							= LocalBeginningROUAmount - LocalROUReduction
						LocalBeginningBalanceAmount						= LocalBeginningBalanceAmount - LocalNetBasePaymentAmount
						LocalBeginningPrincipalBalance					= LocalBeginningPrincipalBalance - BaseNetChangeToPresentValue
						LocalBeginningBalanceInterest					= LocalBeginningBalanceInterest - (LocalNetBasePaymentAmount - BaseNetChangeToPresentValue)
