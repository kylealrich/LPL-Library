BillingInvoice is a BusinessClass
	owned by bl
	prefix is OEI
	classic name is OEINVOICE

	Ontology
		symbolic key is BillingInvoice
			classic set name is OEISET1
			classic name for BillingInvoice.InvoiceNumber is INVC-NUMBER
			classic name for BillingInvoice.InvoicePrefix is INVC-PREFIX
	Patterns
		implements InlineUserFields
			size is 1000
		implements StaticJava
		disable AuditIndex 
		implements Archivable 

	Persistent Fields
		BatchNumber								is a BillingManualInvoiceHeader
			classic name is BATCH-NBR
			delete ignored
		BillingProcessLevel
			classic name is PROCESS-LEVEL
		Location								is an InventoryLocation
		OriginalBillingInvoice					is like BillingInvoice
			classic name for OriginalBillingInvoice.InvoicePrefix is ORIG-INVC-PRE
			classic name for OriginalBillingInvoice.InvoiceNumber is ORIG-INVC-NBR
		AutoApply								is Boolean
			classic name is AUTO-APP-FL
		Customer
		BillTo									is a CustomerBillTo

		CustomerShipTo
			classic name is SHIP-TO
		ReceivableDetailPosting
			classic name is AR-DETAIL
		BillingInvoiceType
			classic name is INVC-TYPE
		BillingInvoiceSource
			classic name is INVC-SOURCE
		CurrencyTable
		InvoiceDate								is a ExchangeDate
		TaxPointDate							is Date
			classic name is TAX-PNT-DATE
		PriceDate								is Date
		Status									is Numeric size 1
			protected
			States
				Unreleased	value is 0
				Released	value is 1
				Edited		value is 2
				Printed		value is 3
				ARGLUpdated	value is 9
					default label is "GlobalLedgerUpdated"
		GeneralLedgerDate						is Date
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		BookedDate								is Date
		InvoiceTypeCode
		TermsCode
			classic name is TERMS-CD
		TermsDiscount							is a CurrencyExchangeGroup
			protected
		BankTransactionCode
			classic name is BANK-INST-CODE
		HoldCode								is a ReceivableHoldCode
		ReasonCode								is an OrderCancelCreditReason
		ListName
		AuthorizationNumber
			classic name is AUTH-NO
		CustomerReturnReference
			classic name is CUST-RET-REF
		Reference
		LetterOfCredit
			classic name is LETTER-OF-CR
		CustomerOrder
			classic name is ORDER-NBR
		WarehouseShipment
			classic name is SHIPMENT-NBR
		EnteredDiscount							is a CurrencyExchangeGroup
			classic name for EnteredDiscount.TransactionAmount	is ENTERED-DISC
			classic name for EnteredDiscount.BaseAmount			is ADD-ON-DISC

		CashInAdvance							is a CurrencyExchangeGroup
			classic name for CashInAdvance.TransactionAmount is CIA-AMT	
			classic name for CashInAdvance.BaseAmount is CIA-AMT-BASE
		CashOnDeliveryPrint						is Boolean
			classic name is COD-PRINT-FL
		OpenOrderAmount							is an InternationalAmount
			protected
			classic name is OPEN-ORD-AMT
		TaxInterfaced							is Boolean
			classic name is TAX-FLAG
		Territory
		SalesRepresentative
			classic name is SALESMAN
		SalesRepresentative2					is a SalesRepresentative
		CommissionRate1							is a ChrgRate
			classic name is COMM-RATE-1
		CommissionRate2							is a ChrgRate
			classic name is COMM-RATE-2
		CommissionSplitPercentage	
			classic name is COMM-SPLIT
		LastAddOnChargeSequence					is a Sequence3
			classic name is LAST-MISC-SEQ
		LastLineNumber							is a LineNumber
			classic name is LAST-LINE-NBR
		LastTopCommentLine						is a Sequence3
			classic name is LAST-TP-SEQ
		LastBottomCommentLine					is a Sequence3
			classic name is LAST-BM-SEQ
		SalesAnalysisInterface					is Boolean
			classic name is SA-INVOICE-FL
		Currency								is a FromCurrency
			classic name is CURRENCY-CODE
		CurrencyMultiplicationOrDivision
			sql name is CMultiplicationOrDivision
			classic name is CURR-MUDV
		CurrencyRate							is a CurrencyExchangeRate
			classic name is CURR-RATE
		CurrencyNumberOfDecimals
			classic name is CURR-ND
		Revalue								is Boolean
			classic name is REVALUE-FL
		TotalInventoryGoodsAmount				is an InternationalAmount
			protected
			classic name is INV-GOODS
		TotalInventoryGoodsBaseAmount			is an InternationalAmount
			protected
			classic name is INV-GOODS-BSE
		TotalNoninventoryGoodsAmount			is an InternationalAmount
			protected
			classic name is NON-INV-GOODS
		TotalNoninventoryGoodsBaseAmount		is an InternationalAmount
			protected
			sql name is TNoninventoryGoodsBaseAmount
			classic name is NON-INV-GDS-B
		TotalAddOnAmount						is an InternationalAmount
			protected
			classic name is MISC-TOTAL
		TotalAddOnBaseAmount					is an InternationalAmount
			protected
			classic name is MISC-TOT-BASE
		FreightCode								is a BillingFreightCode
	
		FreightCharge							is a CurrencyExchangeGroup
			classic name for FreightCharge.TransactionAmount is FRT-CHARGE
			classic name for FreightCharge.BaseAmount		 is FRT-CHARGE-B
		FreightTaxable							is Boolean
			classic name is FRT-TAXABLE-FL
		Discountable							is an InternationalAmount
			protected
		OrderDiscount							is a CurrencyExchangeGroup
			protected
			classic name for OrderDiscount.TransactionAmount	is	ORD-DISCOUNT
			classic name for OrderDiscount.BaseAmount			is  ORD-DISC-BSE
		RecurringInvoiceParameter
		BillDate								is Date
		TaxableTotal							is an InternationalAmount
			protected
		TaxTotal								is a CurrencyExchangeGroup
			protected
			classic name for TaxTotal.TransactionAmount	is	TAX-TOTAL
			classic name for TaxTotal.BaseAmount		is  TAX-TOTAL-BSE

		CustomerPurchaseOrder
			classic name is CUST-PO-NBR
		ShipDate								is Date
		BillingElectronicPaymentType
			classic name is EP-TYPE
		ReceivableGeneralLedgerCode
			classic name is AR-CODE
			default label is "ReceivableGlobalLedgerCode"
		ReceivableLineLevelInterface			is Boolean
				sql name is RLineLevelInterfaceFlag
			classic name is AR-LINE-FL
		UserDefinedField1						is a TransUser1
			classic name is TRANS-USER1
		UserDefinedField2						is a S3Agent
			classic name is TRANS-USER2
		UserDefinedField3						is Date
			classic name is TRANS-USER3
		UserDefinedField4						is a TransUser4
			classic name is TRANS-USER4
		UserDefinedField5						is an InternationalAmount
			classic name is TRANS-USER5
		TaxExemptCode							is AlphaUpper size 1
			States
				Default	value is blank
				Exempt	value is "E"
				Taxable	value is "T"
			classic name is TAX-EXEMPT-CD
		TaxCode
		InvoiceObjID
			classic name is INV-OBJ-ID
		RequireElectronicPaymentSettlement		is AlphaUpper size 1
			sql name is RElectronicPaymentSettlement
			classic name is REQ-EP-SETTLE
		OrderReferenceNumber
			classic name is ORDER-REF-NBR
		OrderReferenceNumberUser
			classic name is REF-NBR-FLAG
		ElectronicPaymentTransactionID
			classic name is EP-TRANS-ID
		ElectronicPaymentTransactionID2			is Numeric size 12
			sql name is EPaymentTransactionID2
			classic name is EP-TRANS-ID-2
		ElectronicPaymentSettlementBaseAmount	is an InternationalAmount
			sql name is EPaymentSettlementBaseAmount
			classic name is EP-STTL-BASE
		ElectronicPaymentSettlementAmount		is an InternationalAmount
			sql name is EPaymentSettlementAmount
			classic name is EP-STTL-CURR
		ElectronicPaymentAccount				is a BillingCustomerCreditCard
			classic name is EP-ACCOUNT
		ElectronicPaymentExpirationDate			is Date
			sql name is EPaymentExpirationDate
			classic name is EP-EXP-DATE
		CheckNumber								is Numeric size 8
			classic name is CHECK-NBR
		MinimumMargin							is an EpMarginMin
			classic name is EP-MARGIN-MIN
		MinimumMarginPercent					is an EpMarginPct
			classic name is EP-MARGIN-PCT
		BillToCountry							is a Country
			classic name is BT-CTRY-CD
		BillToRegion							is a Region
			classic name is BT-REGION
			context of BillToCountry
		BillToEuropeanCommunityCountry			is Numeric size 3
			classic name is BT-EC-CTRY
		BillToISOCountry						is Numeric size 3
			classic name is BT-ISO-CTRY
		ShipToCountry							is a Country
			classic name is ST-CTRY-CD
		ShipToRegion							is a Region
			classic name is ST-REGION
			context of ShipToCountry
		ShipToEuropeanCommunityCountry			is Numeric size 3
			classic name is ST-EC-CTRY
		ShiptoISOCountry						is Numeric size 3
			classic name is ST-ISO-CTRY
		IntrastatNumber
			classic name is INTRASTAT-NBR
		Project									is a FinanceCodeBlockProjectOnly
			classic name is ACTIVITY
		CostProject								is a FinanceCodeBlockProjectOnly
			classic name is ACTIVITY-C
		OrderEntryOperator
			classic name is OPR-CODE
		GlobalDocumentType
			classic name is GLBL-DOC-TYPE
		FreightTotal							is an InternationalAmount
			protected
			classic name is FREIGHT-TOT
		InsuranceTotal							is an InternationalAmount
			protected
			classic name is INSURANCE-TOT
		CustomsTotal							is an InternationalAmount
			protected
			classic name is CSTMS-TOT
		OtherAddOnChargesTotal					is an InternationalAmount
			protected
			classic name is OTHER-AOC-TOT
		CompanyCustomer
		CustomerInvoiceTypeCode
		RegimeCode
		ProformaPrepayAmount					is an InternationalAmount
		EWayBillNumber
		ParallelReference						is AlphaUpper 100
		IDMUniqueID								is a DocumentPID
			protected
		IDMJob
			protected
			delete ignored
		InterfaceInProcess						is Boolean
		OriginatingInterfaceRun					is a BillingInterfaceResult
		CertificationNumber									
		CertificationDate						is Date		
		GlobalInvoiceNumber						is AlphaUpper size 22	
		InvoiceHold								is AlphaUpper size 1	
            States
                ApprovedByEngine value is "A"
                    default label is "Approved by Engine"
                SentForApproval  value is "S"
                    default label is "Sent for Approval"

		RemitToAddress                     is a PostalAddressV2	
        	holds pii
            classic name for RemitToAddress.DeliveryAddress.AddressLine1 is RMT-ADDR1
            classic name for RemitToAddress.DeliveryAddress.AddressLine2 is RMT-ADDR2
            classic name for RemitToAddress.DeliveryAddress.AddressLine3 is RMT-ADDR3
            classic name for RemitToAddress.DeliveryAddress.AddressLine4 is RMT-ADDR4
            classic name for RemitToAddress.Municipality is RMT-CITY
            classic name for RemitToAddress.StateProvince is RMT-STATE
            classic name for RemitToAddress.PostalCode is RMT-ZIP
            classic name for RemitToAddress.County is RMT-COUNTY
            classic name for RemitToAddress.Country is RMT-CTRY-CODE
            classic name for RemitToAddress.Region is RMT-REGION
		RemitToName                        is a Name	 
        	holds pii
		PointOfTitleTransfer
		ShipTerm
		IDMAssembledUniqueID					is a DocumentPID
			protected
		IDMJobAssembled							is like IDMJob
			protected
		FolioAuthorizationCode                  is Alpha 1000

	Transient Fields
		TransientConditionalInvoiceNumber		is AlphaUpper 40
			default label is "InvoiceNumber"
			derive value from ConditionalInvoiceNumber
		TransientDisplayBillingInvoiceNumber		is AlphaUpper 40
			default label is "Invoice"
			derive value from DerivedDisplayBillingInvoice

	Rule Blocks

		BatchIDMInvoicePrint
			invoke BatchDocumentPrint IDMJob
				invoked.PrmIDMUniqueIDs      = LocalInvoiceIDMUniqueIDs
				invoked.PrmPrinter     	     = LocalIDMPrinter
				invoked.PrmPrinterSettings   = LocalIDMPrinterSetting
				invoked.PrmDocumentType      = LocalDocumentType
				invoked.PrmFileName		     = DerivedInvoiceFileNamePerCustomer
				invoked.PrmDescription 	     = BatchIDMInvoicePrintMsg
				invoked.PrmAdditionalDetails = LocalInvoiceNumbers

			initialize LocalInvoiceNumbers
			initialize LocalInvoiceIDMUniqueIDs

		SetRecepientEmailAddress
			initialize LocalRecepientEmailAddress

			if (CompanyCustomer.BillingInvoiceEmailOption.CompanyCustomerAndContacts
			or CompanyCustomer.BillingInvoiceEmailOption.BillToOnly
			or CompanyCustomer.BillingInvoiceEmailOption.BillToAndContacts)
				if (SendToBillToEmailAddress)
					LocalRecepientEmailAddress = BillTo.EmailAddress
				else
					LocalRecepientEmailAddress += CompanyCustomer.EmailAddress

			if (CompanyCustomer.BillingInvoiceEmailOption.CompanyCustomerAndContacts
			or CompanyCustomer.BillingInvoiceEmailOption.ContactsOnly
			or CompanyCustomer.BillingInvoiceEmailOption.BillToAndContacts)
				for each CompanyCustomer.CompanyCustomerContactRel
					if (each.EmailBillingInvoice
					and each.EmailAddress entered)
						if (LocalRecepientEmailAddress entered)
							LocalRecepientEmailAddress += ","
						LocalRecepientEmailAddress += each.EmailAddress

		LoadOneSourceInputFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.CallingModule				= "Billing_Invoice"
				CalculateTax.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= BillingProcessLevel
				CalculateTax.Invoice					= DerivedInvoice
				CalculateTax.Suffix						= BillingInvoice.InvoicePrefix
				CalculateTax.InvoiceAmount				= InvoiceNetAmount
				CalculateTax.TaxCode					= TaxCode
				CalculateTax.PostalAddress				= CustomerShipTo.ShipToAddress
				CalculateTax.BypassEditing				= true
				CalculateTax.PointOfTitleTransfer		= PointOfTitleTransfer
				CalculateTax.DeliveryTerms				= ShipTerm
				CalculateTax.Customer					= Customer
				CalculateTax.VendorCustomerName			= Customer.Name
				CalculateTax.Description				= FreightCode.BillingFreightDescription
				CalculateTax.UniqueLineNumber			= UniqueID
				CalculateTax.ItemNumber					= FreightCode
				if (BillingInvoiceType.Credit)
					CalculateTax.InvoicedOrCreditMemo	= "C"
				else
					CalculateTax.InvoicedOrCreditMemo	= "I"
				if (LocalSkipHeaderTaxlog)
					CalculateTax.DontCreateLogFile			= true
					CalculateTax.DontCreateResultFiles		= true
		
		CreateTaxLineItemAndUserFields
			if ((TaxEntityRel.ThirdParty.Sabrix
			or   SingleCallToVertex)
			and TaxLineItemHeaderRel not exists)
				invoke Create TaxLineItem
					assign result to TaxLineItemView
					invoked.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.InvoiceNumber				= BillingInvoice.InvoiceNumber
					invoked.InvoiceDate					= InvoiceDate
					invoked.TaxEntity					= Company.AccountingEntity
					invoked.RelatedObjectReference		= reference to BillingInvoice
					invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
					invoked.RelatedLineItemUniqueId		= UniqueID
					if (SingleCallToOneSource
					or  SingleCallToVertex)
						LocalLineItemNumber				+= 1
					else
						LocalLineItemNumber				= 1
					invoked.LineItemNumber				= LocalLineItemNumber
					invoked.LineItemId					= FreightCode
					invoked.InvoiceAmount				= InvoiceNetAmount
					invoked.TaxableAmount				= LocalFreightCharge
					invoked.ShipToTaxCode				= TaxCode
					invoked.ShipToTaxCodeDescription	= TaxCode.Description
					invoked.ShipToAddress				= CustomerShipTo.ShipToAddress
					invoked.Description					= FreightCode.BillingFreightDescription
					if (IsHSNSACCodeEnabled)
						invoked.CommodityCodeType      	= "HSN"
						invoked.CommodityCode 			= FreightCode.HSNSACCode
					else
						invoked.CommodityCodeType      	= "UNSPSC"
						invoked.CommodityCode 			= FreightCode.UNSPSCCode.UNSPSCCodeDisplay

					if (TaxEntityUsesVertex)
						invoked.ProductTaxCategory		= FreightCode.ProductTaxCategory
						invoked.Quantity				= 1

				initialize AttributeCounter
				if (TaxEntityUsesSabrix
				and TaxAttributesRel exists)
					invoke Create TaxLineItemUserFields
						for each TaxAttributesRel.OneSourceTaxAttributeByNumberRel
							invoked.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.TaxLineItem.UniqueIdOfRelatedObject		= UniqueID
							invoked.TaxLineItem.Sequence					= TaxLineItemView.TaxLineItem.Sequence

							if (each.LoadDynamicField.ValueIs.TaxEntity)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= TaxEntityRel.TaxEntity
							else		
							if (each.LoadDynamicField.ValueIs.Company)	
								AttributeCounter +=1					
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Company
							else
							if (each.LoadDynamicField.ValueIs.Description)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= FreightCode.BillingFreightDescription
							else
							if (each.LoadDynamicField.ValueIs.Customer)
								if (Customer entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Customer
							else				
							if (each.LoadDynamicField.ValueIs.PostingDate)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= InvoiceDate
							else			
							if (each.LoadDynamicField.ValueIs.TaxDate)	
								AttributeCounter +=1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= InvoiceDate
							else			
							if (each.LoadDynamicField.ValueIs.GLAccount)
								if (EntityTaxCodeRel.TaxOutputAccount.GeneralLedgerChartAccount entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.GeneralLedgerChartAccount
							else			
							if (each.LoadDynamicField.ValueIs.Location)						
								if (Location entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Location
							else			
							if (each.LoadDynamicField.ValueIs.Currency)
								if (Currency entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Currency
							else
							if (each.LoadDynamicField.ValueIs.DiscountAmount)
								if (EnteredDiscount.TransactionAmount entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EnteredDiscount.TransactionAmount
							else
							if (each.LoadDynamicField.ValueIs.ContractType)
								if (Project.Project.ContractType entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Project.Project.ContractType
							else
							if (each.LoadDynamicField.ValueIs.WorkType)
								if (Project.Project.WorkType entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Project.Project.WorkType
							else
							if (each.LoadDynamicField.ValueIs.ServiceType)
								if (Project.Project.ServiceType entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Project.Project.ServiceType
							else
							if (each.LoadDynamicField.ValueIs.UsageType)
								if (Project.Project.UsageType entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Project.Project.UsageType	
							else
							if (each.LoadDynamicField.ValueIs.UNSPSC)
								if (FreightCode.UNSPSCCode entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= FreightCode.UNSPSCCode.UNSPSCCodeDisplay
							else			
							if (each.LoadDynamicField.ValueIs.ShipToName)
								if (CustomerShipTo.Name entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= CustomerShipTo.Name
							else
							if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
								if (FreightCode.FreightAccount.ToAccountingEntity entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= FreightCode.FreightAccount.ToAccountingEntity
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension1)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension1 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension1
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension2)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension2 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension2
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension3)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension3 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension3
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension4)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension4 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension4
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension5)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension5 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension5
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension6)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension6 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension6
							else				
							if (each.LoadDynamicField.ValueIs.FinanceDimension7)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension7 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension7
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension8)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension8 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension8
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension9)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension9 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension9
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension10)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension10 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension10	
							else
							if (each.LoadDynamicField.ValueIs.Project)
								if (EntityTaxCodeRel.TaxOutputAccount.Project entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.Project
							else	
								AttributeCounter +=1
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= each.Value				
				else
				if (TaxEntityUsesVertex
				and TaxAttributesRel.VertexFlexibleFieldExist
				and FreightCharge.TransactionAmount entered)
					Idx = 0
					invoke Create TaxLineItemUserFields
						invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.TaxLineItem.UniqueIdOfRelatedObject 			= UniqueID
						invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
							if (each.Code entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId 			= each.VertexFlexibleCode.FieldId
								if (each.ExternalValue.ValueIs.TaxEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= TaxEntityRel.TaxEntity
								else
								if (each.ExternalValue.ValueIs.Description)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= FreightCode.BillingFreightDescription
								else
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= Company
								else
								if (each.ExternalValue.ValueIs.Customer)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= Customer
								else
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= FreightCode.FreightAccount.GeneralLedgerChartAccount
								else
								if (each.ExternalValue.ValueIs.Location)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= Location
								else
								if (each.ExternalValue.ValueIs.Currency)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= Currency
								else
								if (each.ExternalValue.ValueIs.DiscountAmount)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= EnteredDiscount.TransactionAmount
								else
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= FreightCharge.TransactionAmount
								else
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= GeneralLedgerDate
								else
								if (each.ExternalValue.ValueIs.PaymentDate)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= GeneralLedgerDate
								else
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= InvoiceDate
								else
								if (each.ExternalValue.ValueIs.ContractType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.Project.ContractType
								else
								if (each.ExternalValue.ValueIs.WorkType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.Project.WorkType
								else
								if (each.ExternalValue.ValueIs.ServiceType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.Project.ServiceType
								else
								if (each.ExternalValue.ValueIs.UsageType)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.Project.UsageType
								else
								if (each.ExternalValue.ValueIs.ProductTaxCatagory)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.ProductTaxCategory
								else
								if (each.ExternalValue.ValueIs.UNSPSC)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= FreightCode.UNSPSCCode.UNSPSCCodeDisplay
								else
								if (each.ExternalValue.ValueIs.AccountingUnit)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.AccountingUnit
								else
								if (each.ExternalValue.ValueIs.Project)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.Project
								else
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.ToAccountingEntity
								else
								if (each.ExternalValue.ValueIs.FinanceDimension1)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.FinanceDimension1
								else
								if (each.ExternalValue.ValueIs.FinanceDimension2)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.FinanceDimension2
								else
								if (each.ExternalValue.ValueIs.FinanceDimension3)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.FinanceDimension3
								else
								if (each.ExternalValue.ValueIs.FinanceDimension4)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.FinanceDimension4
								else
								if (each.ExternalValue.ValueIs.FinanceDimension5)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.FinanceDimension5
								else
								if (each.ExternalValue.ValueIs.FinanceDimension6)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.FinanceDimension6
								else
								if (each.ExternalValue.ValueIs.FinanceDimension7)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.FinanceDimension7
								else
								if (each.ExternalValue.ValueIs.FinanceDimension8)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.FinanceDimension8
								else
								if (each.ExternalValue.ValueIs.FinanceDimension9)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.FinanceDimension9
								else
								if (each.ExternalValue.ValueIs.FinanceDimension10)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= FreightCode.FreightAccount.FinanceDimension10
								else
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code  			= each.Code

						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
							if (each.NumericValue entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId  						= each.VertexFlexibleNumeric.FieldId
								if (each.ExternalValue.ValueIs.TaxEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 				= TaxEntityRel.TaxEntity
								else
								if (each.ExternalValue.ValueIs.AccountingUnit)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 				= FreightCode.FreightAccount.AccountingUnit
								else
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 				= Company
								else
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 				= FreightCode.FreightAccount.GeneralLedgerChartAccount
								else
								if (each.ExternalValue.ValueIs.DiscountAmount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 				= EnteredDiscount.TransactionAmount
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals 			= 3
								else
								if (each.ExternalValue.ValueIs.UnitCost)
									if (FreightCharge.TransactionAmount entered)
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 			= FreightCharge.TransactionAmount
										invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals 		= 3
								else
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue  				= FreightCode.FreightAccount.ToAccountingEntity
								else
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 				= each.NumericValue

						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
							if (each.DateValue entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId 			= each.VertexFlexibleDate.FieldId
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= GeneralLedgerDate
								else
								if (each.ExternalValue.ValueIs.PaymentDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= GeneralLedgerDate
								else
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= InvoiceDate
								else
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= each.DateValue


		LoadVertexGlobalInputFields 
			if (TaxEntityUsesVertex)
				CalculateTax.TransactionSource				= "O"
				CalculateTax.CallingModule					= "BillingInvoice"
				CalculateTax.Vendor							= Customer
				CalculateTax.FromTaxCode					= Location.TaxCode
				if (CustomerShipTo.ShipToAddress.Country entered)
					CalculateTax.VATRegistrationCountry	 = CustomerShipTo.ShipToAddress.Country 
				else
					CalculateTax.VATRegistrationCountry	 = CompanyCustomer.VATRegistrationCountry
				if (CustomerShipTo.VATRegistrationNumber entered)
					CalculateTax.VATRegistrationNumber		= CustomerShipTo.VATRegistrationNumber 
				else
					CalculateTax.VATRegistrationNumber		= CompanyCustomer.VATRegistrationNumber
				CalculateTax.FromVATRegistrationCountry		= TaxEntityRel.VATRegistrationCountry 
				CalculateTax.FromVATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber 
				CalculateTax.DefaultFilingCurrency			= TaxEntityRel.DefaultFilingCurrency
				CalculateTax.CurrencyRate					= CurrencyRate
				CalculateTax.TransactionCurrency			= Currency
				CalculateTax.BaseCurrency					= Company.Currency
				if (LocalFreightCharge entered)
					CalculateTax.UnitCost					= LocalFreightCharge
				if (FreightCode.ProductTaxCategory entered)
					CalculateTax.ProductTaxCategory			= FreightCode.ProductTaxCategory
				if (BillingInvoiceType.Credit)
					CalculateTax.DocumentType				= "CreditMemo"
				else
					CalculateTax.DocumentType				= "Invoice"
				if (CustomerShipTo entered)
					CalculateTax.PostalAddress				= CustomerShipTo.ShipToAddress
				else
				if (Customer entered)
					CalculateTax.PostalAddress				= Customer.PostalAddress
				else
				if (BillTo entered)
					CalculateTax.PostalAddress				= BillTo.PostalAddress
				CalculateTax.Location						= Location
				if  (IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      	= "HSN"
					CalculateTax.HSNSACCode 				= FreightCode.HSNSACCode
				else
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode 				= FreightCode.UNSPSCCode.UNSPSCCodeDisplay
				include LoadVertexDebugOptions

		LoadVertexDebugOptions 
			if (TaxEntityUsesVertex)
				if (VertexConfigRel.DebugMode)				
					LocalJurisdictionLookupKey				= DefaultLookupKey
					CalculateTax.AppendToJurisFile			= true
					CalculateTax.JurisdictionResultsKey		= LocalJurisdictionLookupKey
					CalculateTax.RelatedObjectReference	 = reference to this instance
				else
				if (JurisdictionResultsRel exist)
					invoke Delete JurisdictionResultsRel

		VertexFlexibleFields
			if (TaxEntityUsesVertex
			and FreightCharge.TransactionAmount entered)
				if (TaxAttributesRel.VertexFlexibleFieldExist)
					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.Description)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.BillingFreightDescription
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else
							if (each.ExternalValue.ValueIs.Customer)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Customer
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Location
							else
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Currency
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredDiscount.TransactionAmount
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCharge.TransactionAmount
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerDate
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = InvoiceDate
							else
							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.Project.ContractType
							else
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.Project.WorkType
							else
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.Project.ServiceType
							else
							if (each.ExternalValue.ValueIs.UsageType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.ProductTaxCategory
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
							 	CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Project)
							 	CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.Project
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
							 	CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension2
							else
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension3
							else
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension4
							else
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension5
							else
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension6
							else
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension7
							else
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension8
							else
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension9
							else
							if (each.ExternalValue.ValueIs.FinanceDimension10)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension10
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = FreightCode.FreightAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = FreightCode.FreightAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredDiscount.TransactionAmount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								if (FreightCharge.TransactionAmount entered)
									CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = FreightCharge.TransactionAmount
									CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = FreightCode.FreightAccount.ToAccountingEntity
							else
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = GeneralLedgerDate
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = GeneralLedgerDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = InvoiceDate
							else
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue

		ProcessTaxHistoryVertexFlexibleFields
			if (TaxEntityUsesVertex)
				if (TaxAttributesRel.VertexFlexibleFieldExist)
					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered
						or  each.ExternalValue entered)
							Idx +=1
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue
							if (each.ExternalValue.ValueIs.TaxEntity)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.Company)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else
							if (each.ExternalValue.ValueIs.Description)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.BillingFreightDescription
							else
							if (each.ExternalValue.ValueIs.Customer)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Customer
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.Location)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Location
							else
							if (each.ExternalValue.ValueIs.Currency)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Currency
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredDiscount.TransactionAmount
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCharge.TransactionAmount
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = InvoiceDate
							else
							if (each.ExternalValue.ValueIs.ContractType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.Project.ContractType
							else
							if (each.ExternalValue.ValueIs.WorkType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.Project.WorkType
							else
							if (each.ExternalValue.ValueIs.ServiceType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.Project.ServiceType
							else
							if (each.ExternalValue.ValueIs.UsageType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.ProductTaxCategory
							else
							if (each.ExternalValue.ValueIs.UNSPSC)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
							 	ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Project)
							 	ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.Project
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension2
							else
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension3
							else
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension4
							else
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension5
							else
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension6
							else
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension7
							else
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension8
							else
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension9
							else
							if (each.ExternalValue.ValueIs.FinanceDimension10)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCode.FreightAccount.FinanceDimension10
							else
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered
						or  each.ExternalValue entered)
							Idx +=1
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue
							if (each.ExternalValue.ValueIs.Company)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = FreightCode.FreightAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredDiscount.TransactionAmount
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else
							if (each.ExternalValue.ValueIs.TaxEntity)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = FreightCode.FreightAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								if (FreightCharge.TransactionAmount entered)
									ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = FreightCharge.TransactionAmount
									ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = FreightCode.FreightAccount.ToAccountingEntity
							else
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered
						or  each.ExternalValue entered)
							Idx +=1
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue
							if (each.ExternalValue.ValueIs.PostingDate)
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = GeneralLedgerDate
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = GeneralLedgerDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = InvoiceDate
							else
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue

		CalculateTaxCommonInputParams
			initialize CalculateTax
			CalculateTax.TaxEntity					= Company.AccountingEntity
			CalculateTax.ProcessLevel				= BillingProcessLevel
			CalculateTax.TaxCode					= TaxCode
			if (IsCustomerOrder)
				CalculateTax.PostalAddress			= CustomerOrder.BillPostalAddress
			else
			if (IsBillToEnterd)
				CalculateTax.PostalAddress			= BillTo.PostalAddress
			else
				CalculateTax.PostalAddress			= Customer.PostalAddress
			CalculateTax.Invoice					= DerivedInvoice
			CalculateTax.FromTaxCode				= Location.TaxCode
			CalculateTax.FromPostalAddress			= Location.PostalAddress
			CalculateTax.InvoiceDate				= InvoiceDate
			CalculateTax.GeneralLedgerDate			= GeneralLedgerDate
			if (TaxPointDate entered)
				CalculateTax.TaxPointDate			= TaxPointDate
			else
				CalculateTax.TaxDate    			= InvoiceDate						
			CalculateTax.POAAddress					= BillingProcessLevel.CompanyAddress
			CalculateTax.POATaxCode					= BillingProcessLevel.TaxCode		
			CalculateTax.System						= "BL"

			if (!TaxEntityRel.ThirdParty.InforTax
			and !IsTaxEngine)
				if  (IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      	= "HSN"
					if (TaxEntityUsesVertex)
						CalculateTax.HSNSACCode 			= FreightCode.HSNSACCode
					else
						CalculateTax.CommodityCode 			= FreightCode.HSNSACCode
				else
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					if (TaxEntityUsesVertex)
						CalculateTax.UNSPSCCode 			= FreightCode.UNSPSCCode.UNSPSCCodeDisplay
					else
						CalculateTax.CommodityCode 			= FreightCode.UNSPSCCode.UNSPSCCodeDisplay


		ReleaseLogic

			if (TaxExemptCode.Exempt and BillingInvoiceLineRel exists)
				for each BillingInvoiceLineRel
					constraint (each.BillingInvoiceLine.TaxExemptCode.Exempt)
						"InvoiceIsTaxExempt,Line<each.BillingInvoiceLine>IsTaxable"





			if (BillingInvoiceAddOnChargesRel not exist
			and FreightCharge.TransactionAmount not entered)
				constraint (BillingInvoiceLineRel exist)
					"NoAddOnChargeOrInvoiceLineExistsForInvoice<DerivedBillingInvoice>"

			if (BillingInvoiceAddOnChargesRel not exist
			and (EnteredDiscount entered
			or  OrderDiscount entered))
				constraint (BillingInvoiceLineRel exist)
					"NoAddOnChargeOrInvoiceLineExistsForInvoice<DerivedBillingInvoice>"

			if (BillingInvoiceType.Credit)
				constraint (InvoiceTotal < 0)
					"Invoice<DerivedBillingInvoice>TotalMustBeLessThanZero"

			else
				constraint (InvoiceTotal >= 0)
					"Invoice<DerivedBillingInvoice>TotalMustBeGreaterThanZero"

			if (CashInAdvance.TransactionAmount entered)
				if (!BillingInvoiceType.Credit)
					constraint (CashInAdvance.TransactionAmount <= InvoiceNetAmount)
						"DownPaymentCannotBeGreaterThanInvoiceAmount<InvoiceNetAmount>"
				else
					constraint (CashInAdvance.TransactionAmount >= InvoiceNetAmount)
						"DownPaymentCannotBeLessThanInvoiceAmount<InvoiceNetAmount>"
			if (TaxPointDate not entered)
				TaxPointDate	= InvoiceDate

			include GetBaseAmount
			include CalculateTaxableAmountAndSalesTax

			if (Company.Rounding
			and BillingInvoice.BillingInvoiceSource.Manual)
				if (RoundingLineRel not exists)
					LocalRoundedAmount = (TotalInventoryGoodsAmount + TotalNoninventoryGoodsAmount + FreightCharge.TransactionAmount + TotalAddOnAmount - EnteredDiscount.TransactionAmount - OrderDiscount.TransactionAmount + TaxTotal.TransactionAmount)
					LocalRoundedAmount = LocalRoundedAmount * -1
					LocalRoundedAmount1 = LocalRoundedAmount
					round LocalRoundedAmount to nearest 1
					initialize LocalDecimalAmount
					round LocalRoundedAmount1 to nearest DerivedRoundToDecimals
					LocalDecimalAmount = LocalRoundedAmount1 - LocalRoundedAmount

					round OpenOrderAmount to nearest 1

					if (BillingInvoice.BillingInvoiceType.Credit)
						LocalCompareAmount = 0.50	
						if (LocalDecimalAmount < LocalCompareAmount)
							LocalDecimalAmount = LocalDecimalAmount * -1
						else
							LocalCompareAmount = 1
							LocalDecimalAmount = LocalCompareAmount - LocalDecimalAmount
					else
						LocalCompareAmount = 0.50
						if (LocalDecimalAmount < LocalCompareAmount)
							LocalDecimalAmount = LocalDecimalAmount * -1
						else
							LocalCompareAmount = 1
							LocalDecimalAmount = LocalCompareAmount - LocalDecimalAmount

					if (LocalDecimalAmount entered)
						increment BillingInvoice.LastLineNumber by 1
						invoke FastCreateBillingInvoiceLine BillingInvoiceLine
							invoked.Company							= Company
							invoked.BillingInvoice.InvoicePrefix		= BillingInvoice.InvoicePrefix
							invoked.BillingInvoice.InvoiceNumber		= BillingInvoice.InvoiceNumber
							invoked.BillingInvoiceLine				= BillingInvoice.LastLineNumber
							invoked.Item								= "ROUNDING"
							invoked.Description						= "ROUNDING"
							invoked.LineType							= BillingInvoiceLine.LineType.Special
							invoked.Quantity							= 1
							if (LocalDecimalAmount < 0.5)
								LocalDecimalAmount = LocalDecimalAmount * -1
							invoked.EnteredPrice						= LocalDecimalAmount
							invoked.UnitPrice							= LocalDecimalAmount
							invoked.SellingPrice						= LocalDecimalAmount
							invoked.PriceInSellingUnitOfMeasure			= LocalDecimalAmount
							invoked.LineGrossAmount						= LocalDecimalAmount
							invoked.LineGrossBaseAmount					= LocalDecimalAmount
							invoked.TaxExemptCode					= TaxExemptCode.Exempt
							invoked.FinalInvoice						= true
							invoked.Rounding							= true
							invoked.SellingPriceToStockConversionFactor = 1
							initialize invoked.NoCharge	 
							initialize invoked.OrderDiscount 
							initialize invoked.Territory
							initialize invoked.MultipleSellPrice
							if (Company.InvoiceOption.CompanyLevelInvoicing)
								invoked.SalesAccount					= Company.RoundingAccount
								invoked.OffsetAccount					= Company.RoundingAccount
								invoked.COGSAccount						= Company.RoundingAccount
							else
								invoked.SalesAccount					= BillingProcessLevel.RoundingAccount
								invoked.OffsetAccount					= BillingProcessLevel.RoundingAccount
								invoked.COGSAccount						= BillingProcessLevel.RoundingAccount

		CalculateTaxableAmountAndSalesTax			 

			if (TaxExemptCode.Taxable
			and TaxCode entered
			and !IsTaxEngine)
				initialize LocalGroupNetAmount
				initialize LocalGroupAOCAmount
				initialize TaxableTotal
				if (!(IsInvoicingAndTaxCalculation
				and IsManualOrRecurringSource))
					initialize TaxTotal.TransactionAmount
					initialize TaxTotal.BaseAmount.EnteredCurrencyAmount
				initialize LocalLineGroupAOCAmount
				initialize LocalFreightCharge
				initialize LocalLineGroupNetAmount
				initialize LocalTaxTotal

				include CalculateTaxCommonInputParams

				CalculateTax.Quantity					=  1
				CalculateTax.Customer					= Customer
				CalculateTax.ThirdPartyFunction			= CalculateTax.ThirdPartyFunction.Calculate
				CalculateTax.Function					= CalculateTax.Function.Inquire
				CalculateTax.ShipmentDate				= ShipDate

				include LoadVertexGlobalInputFields 
				include LoadOneSourceInputFields

				if (not TaxEntityRel.ThirdParty.Sabrix
				and not SingleCallToVertex)
					LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax

				constraint (CalculateTax.OutputErrorNumber not entered) 
					"<CalculateTax.OutputErrorMessage>"

				LocalDiscountAmount = (EnteredDiscount.TransactionAmount + OrderDiscount.TransactionAmount)

				for each BillingInvoiceLineRel
					LocalLineNumber  = each.BillingInvoiceLine
					if (each.OrderDiscount)
						LocalDiscountAmount -= each.AllocatedDiscount
					if (each.HasTaxCode)
						LocalLineGroupNetAmount += each.TaxableAmount
						LocalTaxTotal += each.TaxTotal
						round LocalTaxTotal to nearest DerivedRoundToDecimals
						LocalLineTaxable = true
						if (IsSourceShipmentOrManual
						and TermsCode entered)
							LocalTermsAmount = each.LineNetAmount.TransactionAmount
							include CalculateTermsDiscount
					else
						LocalLineTaxable = false
					for each AddOnChargesForBillingInvoiceLinesRel
						if (each.OrderDiscount
						and each.BillingInvoiceLine.OrderDiscount)
							LocalDiscountAmount -= each.AllocatedDiscount


						if (each.TaxExemptCode.Taxable)
							LocalLineGroupAOCAmount += each.TaxableAmount.TransactionAmount
							LocalTaxTotal += each.TaxableCurrencyAmount
							round LocalTaxTotal to nearest DerivedRoundToDecimals

				LocalGroupNetAmount = LocalLineGroupNetAmount

				for each BillingInvoiceAddOnChargesRel
					if (each.OrderDiscount)
						LocalDiscountAmount -= each.AllocatedDiscount
					if (each.TaxExemptCode.Taxable)
						LocalGroupAOCAmount += each.TaxableAmount.TransactionAmount
						LocalTaxTotal += each.TaxableCurrencyAmount
						round LocalTaxTotal to nearest DerivedRoundToDecimals

				round LocalTaxTotal to nearest DerivedRoundToDecimals
				LocalGroupAOCAmount += LocalLineGroupAOCAmount	

				LocalGroupNetAmount		+=	LocalGroupAOCAmount

				if (FreightCharge.TransactionAmount entered)
					LocalFreightCharge  = FreightCharge.TransactionAmount
					FreightCharge.BaseAmount.ToCurrency					= Company.Currency
					FreightCharge.BaseAmount.EnteredCurrencyRate		= CurrencyRate
					FreightCharge.BaseAmount.EnteredCurrencyAmount		= FreightCharge.BaseAmount.OutputCurrencyAmount
					if (CalculateTax.TaxTable.TaxTableOutput[1].TaxTerms.Taxafterterms
					and (IsCompanyInvoiceOption
					or  IsProcessLevelInvoiceOption))
						if (IsSourceShipmentOrManual
						and TermsCode entered)
							LocalFreightCharge  = FreightCharge.TransactionAmount
							LocalTermsAmount	= LocalFreightCharge
							include	CalculateTermsDiscount
							LocalFreightCharge	-= LocalTermsDiscount
					
					if (DoTaxCalculation)
						include CalculateTaxCommonInputParams
	
						CalculateTax.TaxableAmount			= LocalFreightCharge
						CalculateTax.ShipmentDate			= ShipDate
						CalculateTax.NumberOfDecimals		= CurrencyNumberOfDecimals
						CalculateTax.Function				= CalculateTax.Function.CalculateTax
						CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
						CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
						CalculateTax.ProductIsExempt		= TaxExemptCode
						if (LocalTermsDueDate entered)
							CalculateTax.PaymentDate			= LocalTermsDueDate
						else
							CalculateTax.PaymentDate			= InvoiceDate

						include LoadVertexGlobalInputFields 
						include LoadOneSourceInputFields

						if (not SingleCallToOneSource
						and not SingleCallToVertex)
							include VertexFlexibleFields
							include CreateTaxLineItemAndUserFields
							CalculateTax.UniqueIdOfRelatedObject	= UniqueID
							LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
							constraint (CalculateTax.OutputErrorNumber not entered)
								"<CalculateTax.OutputErrorMessage>"
							LocalTaxTotal						+= CalculateTax.OutputTotalTaxAmount
							LocalFreightTax						= CalculateTax.OutputTotalTaxAmount
					LocalGroupNetAmount				+= LocalFreightCharge
					if (LocalAddFreightTax)
						round LocalFreightTax to nearest DerivedRoundToDecimals
						TaxTotal.TransactionAmount					 += LocalFreightTax
						TaxTotal.BaseAmount.ToCurrency				 = Company.Currency
						TaxTotal.BaseAmount.EnteredCurrencyRate		 = CurrencyRate
						TaxTotal.BaseAmount.EnteredCurrencyAmount	 += TaxTotal.BaseAmount.OutputCurrencyAmount

				if (TaxEntityRel.ThirdParty.InforTax)
					initialize CalculateTax

				if (LocalDiscountAmount != 0
				and LocalDiscountAmount != (EnteredDiscount.TransactionAmount + OrderDiscount.TransactionAmount)
				and LocalAllocateExcess)
					if (BillingInvoiceLinesTaxDiscountableRel exists)
						CalculateTax.TaxCode = first BillingInvoiceLinesTaxDiscountableRel.TaxCode
						invoke UpdateTaxCalculation first BillingInvoiceLinesTaxDiscountableRel
							invoked.PrmExcessDiscount = LocalDiscountAmount
					else
					if (AddOnChargesTaxDiscountableRel exists)
						CalculateTax.TaxCode = first AddOnChargesTaxDiscountableRel.TaxCode
						invoke UpdateTaxCalculation first AddOnChargesTaxDiscountableRel
							invoked.PrmExcessDiscount = LocalDiscountAmount
					else
					if (BillingInvoiceLinesDiscountableRel exists)
						initialize CalculateTax.TaxCode
						invoke UpdateTaxCalculation first BillingInvoiceLinesDiscountableRel
							invoked.PrmExcessDiscount = LocalDiscountAmount
					else
					if (AddOnChargesDiscountableRel exists)
						initialize CalculateTax.TaxCode
						invoke UpdateTaxCalculation first AddOnChargesDiscountableRel
							invoked.PrmExcessDiscount = LocalDiscountAmount

				if (LocalDiscountAmount entered
				and CalculateTax.TaxCode entered
				and DoTaxCalculation)
					CalculateTax.TaxEntity				= Company.AccountingEntity
					CalculateTax.TaxableAmount			= LocalDiscountAmount
					CalculateTax.ShipmentDate			= ShipDate
					CalculateTax.GeneralLedgerDate		= GeneralLedgerDate
					CalculateTax.NumberOfDecimals		= CurrencyNumberOfDecimals
					CalculateTax.InvoiceDate			= BillingInvoice.InvoiceDate
					CalculateTax.Function				= CalculateTax.Function.CalculateTax
					CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
					CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
					CalculateTax.ProductIsExempt		= TaxExemptCode
					if (LocalTermsDueDate entered)									
						CalculateTax.PaymentDate			= LocalTermsDueDate
					else
						CalculateTax.PaymentDate			= InvoiceDate
					if (not SingleCallToOneSource
					and not SingleCallToVertex)
						CalculateTax.UniqueIdOfRelatedObject	= UniqueID
						LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"
						LocalTaxTotal						-= CalculateTax.OutputTotalTaxAmount

				if (!(IsInvoicingAndTaxCalculation
				and IsManualOrRecurringSource))
					round LocalTaxTotal to nearest DerivedRoundToDecimals
					TaxTotal.TransactionAmount					 = LocalTaxTotal
					TaxTotal.BaseAmount.ToCurrency				 = Company.Currency
					TaxTotal.BaseAmount.EnteredCurrencyRate		 = CurrencyRate
					TaxTotal.BaseAmount.EnteredCurrencyAmount	 += TaxTotal.BaseAmount.OutputCurrencyAmount

				TaxableTotal = LocalGroupNetAmount



		CalculateTermsDiscount
			if ((IsSourceShipmentOrManual
			or BillingInvoiceSource.Interfaced)
			and TermsCode entered)
				initialize CalculateTerms
				initialize LocalTermsDiscount
				initialize LocalTermsDueDate

				if (LocalTermsAmount entered)
					CalculateTerms.TransactionDate			= InvoiceDate
					CalculateTerms.TransactionAmount		= LocalTermsAmount

				LocalTermsCalTrigger = CalculateTerms.TermsCalTrigger
				constraint (CalculateTerms.OutputErrorNumber not entered)
					"<CalculateTerms.OutputErrorMessage>"

				if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount entered)
					LocalTermsDiscount		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
					LocalTermsDueDate		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate

		CalculateTermsDiscountAmount
			initialize TermsDiscount
			TermsDiscount.TransactionAmount					= TermsDiscountAmount
			TermsDiscount.BaseAmount.ToCurrency				= Company.Currency
			TermsDiscount.BaseAmount.EnteredCurrencyRate	= CurrencyRate
			TermsDiscount.BaseAmount.EnteredCurrencyAmount	= TermsDiscount.BaseAmount.OutputCurrencyAmount

		GetBaseAmount
			if (Company.Currency	= Currency)
				EnteredDiscount.BaseAmount.EnteredCurrencyAmount	= EnteredDiscount.TransactionAmount
				OrderDiscount.BaseAmount.EnteredCurrencyAmount		= OrderDiscount.TransactionAmount
				FreightCharge.BaseAmount.EnteredCurrencyAmount		= FreightCharge.TransactionAmount
				CashInAdvance.BaseAmount.EnteredCurrencyAmount		= CashInAdvance.TransactionAmount
			else
				if (EnteredDiscount.TransactionAmount entered)
					initialize EnteredDiscount.BaseAmount.EnteredCurrencyAmount
					EnteredDiscount.BaseAmount.ToCurrency					= Company.Currency
					EnteredDiscount.BaseAmount.EnteredCurrencyRate			= CurrencyRate
					EnteredDiscount.BaseAmount.EnteredCurrencyAmount		= EnteredDiscount.BaseAmount.OutputCurrencyAmount
				else
					initialize EnteredDiscount

				if (OrderDiscount.TransactionAmount entered)
					initialize OrderDiscount.BaseAmount.EnteredCurrencyAmount
					OrderDiscount.BaseAmount.ToCurrency						= Company.Currency
					OrderDiscount.BaseAmount.EnteredCurrencyRate			= CurrencyRate
					OrderDiscount.BaseAmount.EnteredCurrencyAmount			= OrderDiscount.BaseAmount.OutputCurrencyAmount
				else
					initialize OrderDiscount

				if (FreightCharge.TransactionAmount entered)
					initialize FreightCharge.BaseAmount.EnteredCurrencyAmount
					FreightCharge.BaseAmount.ToCurrency						= Company.Currency
					FreightCharge.BaseAmount.EnteredCurrencyRate			= CurrencyRate
					FreightCharge.BaseAmount.EnteredCurrencyAmount			= FreightCharge.BaseAmount.OutputCurrencyAmount
				else
					initialize FreightCharge

				if (CashInAdvance.TransactionAmount entered)
					initialize CashInAdvance.BaseAmount.EnteredCurrencyAmount
					CashInAdvance.BaseAmount.ToCurrency						= Company.Currency
					CashInAdvance.BaseAmount.EnteredCurrencyRate			= CurrencyRate	
					CashInAdvance.BaseAmount.EnteredCurrencyAmount			= CashInAdvance.BaseAmount.OutputCurrencyAmount	
				else
					initialize CashInAdvance

		CreateInvoice
			if (BillingInvoiceSource not entered)
				BillingInvoiceSource	= BillingInvoiceSource.Manual

			if (IsBillingInvoiceSource)
				constraint (BillingInvoice.InvoicePrefix not entered)
					"InvoicePrefixShouldBeBlank"

				constraint (BillingInvoice.InvoiceNumber not entered)
					"CannotEnterInvoiceNumber"

				if (Company.InvoiceOption.ProcessLevelInvoicing)
					LocalProcessLevel	= BillingProcessLevel

				if (BillingInvoiceType.Credit)
					if (Company.InvoiceOption.CompanyLevelInvoicing)
						initialize LocalProcessLevel
					if (CreditMemoBillingPrefixRel exists)
						BillingInvoice.InvoicePrefix	= CreditMemoBillingPrefixRel.Prefix
						increment CreditMemoBillingPrefixRel.LastDocNbr
						BillingInvoice.InvoiceNumber	= CreditMemoBillingPrefixRel.LastDocNbr
					if (Company.ManualInvoiceNumbering
					and BillingInvoiceSource.Return)
						if (!IsTaxEngine)
							GlobalInvoiceNumber             = BillingInvoice.InvoiceNumber
						
				else
				if (InvoiceBillingPrefixRel exists)
					BillingInvoice.InvoicePrefix	= InvoiceBillingPrefixRel.Prefix
					increment InvoiceBillingPrefixRel.LastDocNbr
					BillingInvoice.InvoiceNumber	= InvoiceBillingPrefixRel.LastDocNbr

				if (BillingInvoiceSource.RecurringInvoice)
					if (RecurringInvoiceBillingPrefixRel exists)
						BillingInvoice.InvoicePrefix	= RecurringInvoiceBillingPrefixRel.Prefix
						increment RecurringInvoiceBillingPrefixRel.LastDocNbr
						BillingInvoice.InvoiceNumber	= RecurringInvoiceBillingPrefixRel.LastDocNbr


		ReleaseBillingInvoiceLineTax
			if (FreightCharge.TransactionAmount entered
			and TaxExemptCode.Taxable)
				include CalculateTaxCommonInputParams
				CalculateTax.TaxableAmount			= FreightCharge.TransactionAmount
				CalculateTax.ShipmentDate			= ShipDate
				CalculateTax.NumberOfDecimals		= CurrencyNumberOfDecimals
				CalculateTax.Function				= CalculateTax.Function.CalculateTax
				CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
				CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
				CalculateTax.ProductIsExempt		= TaxExemptCode
				CalculateTax.PaymentDate			= LocalTermsDueDate
				CalculateTax.InputReturnVertexTaxIn	= "D"								
				CalculateTax.DontCreateLogFile		= true 
				include LoadVertexGlobalInputFields 
				include LoadOneSourceInputFields
				if (not SingleCallToOneSource
				and not SingleCallToVertex)
					include VertexFlexibleFields
					include CreateTaxLineItemAndUserFields
					CalculateTax.UniqueIdOfRelatedObject	= UniqueID
					LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
					constraint (CalculateTax.OutputErrorNumber not entered)
						"<CalculateTax.OutputErrorMessage>" 

					for each CalculateTax.TaxTable.TaxTableOutput
						if (each.TaxAmount entered)
							invoke Create BillingInvoiceLineTax
								invoked.Company										= Company
								invoked.BillingInvoice								= BillingInvoice
								invoked.ProductTaxCategory							= CalculateTax.ProductTaxCategory
								if (each.TaxPoint = "P")
									invoked.TaxAccount								= each.TaxOutputDueAccount
								else
									invoked.TaxAccount								 = each.TaxOutputAccount
								invoked.BillingInvoiceLineTax.TaxCode				 = each.TaxCode
								invoked.TaxRate										 = each.TaxRate
								invoked.TaxableCurrencyAmount.TransactionAmount		 = each.TaxAmount
								invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency	 = Company.Currency
								invoked.TransactionTaxable.TransactionAmount		 = each.TaxableAmount
								invoked.TransactionTaxable.BaseAmount.ToCurrency	 = Company.Currency
								invoked.TaxID										 = each.TaxID
								invoked.BillingInvoiceLineTax.TaxLevel				 = each.TaxLevel
								if (TaxEntityRel.OneSourceUseARCodeForTaxAccount
								and CalculateTax.SabrixReturnedTaxCode entered)
									LocalReceivableGeneralLedgerCode 				= CalculateTax.SabrixReturnedTaxCode
									constraint (LocalReceivableGeneralLedgerCodeRel exists)
										"Receivable_\Global_\Ledger_\Code<LocalReceivableGeneralLedgerCode>DoesNotExistFor_\Company<Company>"
									invoked.TaxAccount								= LocalReceivableGeneralLedgerCodeRel.DistributionAccount
							if (LocalReleasePrinted)
								include CreateTaxJournal

			for each BillingInvoiceLineRel
				invoke Release each
					invoked.PrmReleasePrinted = LocalReleasePrinted

			for each BillingInvoiceAddOnChargesRel	
				invoke Release each
					invoked.PrmReleasePrinted = LocalReleasePrinted
			
			if (SingleCallToOneSource)
				invoke ProcessOneSourceForHeader
					if (LocalReleasePrinted
					or  LocalReleaseAsPrintedFromBatch)
						invoked.PrmReleasePrinted = true
			else
			if (SingleCallToVertex)
				invoke ProcessVertexForHeader
					if (LocalReleasePrinted
					or  LocalReleaseAsPrintedFromBatch)
						invoked.PrmReleasePrinted = true
			else
				include CalculateTaxableAmountAndSalesTax
				if (LocalReleasePrinted
				and TaxEntityUsesSabrix)
					invoke RemoveTaxLineItemsAfterPrintingInvoice

		CalculateTaxAndTerms	
			if (not LocalTaxAndTermscalculated)
				initialize LocalTermsPaidMessage 
				if (TermsCode entered)
					CalculateTax.DontCreateLogFile			= true	
					CalculateTax.DontCreateResultFiles		= true 
					CalculateTax.TaxEntity					= Company.AccountingEntity	
					CalculateTax.ThirdPartyFunction			= CalculateTax.ThirdPartyFunction.Calculate
					CalculateTax.Function					= CalculateTax.Function.Inquire
					CalculateTax.TaxCode					= TaxCode
					LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
					CalculateTerms.TransactionDate			= InvoiceDate
					CalculateTerms.TransactionAmount		= InvoiceTotal
					LocalTermsCalTrigger					= CalculateTerms.TermsCalTrigger
					LocalTermsDueDate						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate
					if (CalculateTax.TaxTable.TaxTableOutput[1].TaxTerms.Taxafterterms)
						LocalTermsDiscount					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
						LocalCalculatedTotalAmount = InvoiceTotal - LocalTermsDiscount
						LocalTermsPaidMessage = "If paid by " + LocalTermsDueDate + " pay only " + LocalCalculatedTotalAmount
				else
					LocalTermsDueDate = InvoiceDate

				LocalTaxAndTermscalculated = true

		CreateTaxJournal 
			if (not LocalVertexTaxHistoryProcessed)
				initialize ProcessTaxHistory
				ProcessTaxHistory.UniqueIdOfRelatedObject 		= UniqueID
				ProcessTaxHistory.RelatedObjectReference    	= reference to this instance			
				ProcessTaxHistory.SystemCode					= "BL"
				ProcessTaxHistory.TransactionType				= "S"   
				ProcessTaxHistory.TransactionSource				= "O"	
				ProcessTaxHistory.InvoicedOrCreditMemo			= "I"			
				ProcessTaxHistory.InvoiceCompany            	= Company
				ProcessTaxHistory.TaxEntity						= Company.AccountingEntity	 
				ProcessTaxHistory.ProcessLevel					= BillingProcessLevel
				ProcessTaxHistory.Customer						= Customer
				ProcessTaxHistory.TaxID							= each.TaxID
				ProcessTaxHistory.Location						= Location
				ProcessTaxHistory.Invoice						= DerivedInvoice
				if (each.TaxPoint = "P")
					ProcessTaxHistory.TaxTransactionAccount		= each.TaxOutputDueAccount
				else
					ProcessTaxHistory.TaxTransactionAccount		= each.TaxOutputAccount
				ProcessTaxHistory.AccruedOrInvoiced 			= each.AccrualFlag
				ProcessTaxHistory.VendorOrCustomerName			= CompanyCustomer.Customer.Name				
				ProcessTaxHistory.ProductTaxCategory			= CalculateTax.ProductTaxCategory
				ProcessTaxHistory.TaxCode						= each.TaxCode
				ProcessTaxHistory.TaxRate						= each.TaxRate
				if (TaxEntityRel.ThirdParty.Sabrix)
					ProcessTaxHistory.ToAddress					= BillingInvoice.CustomerShipTo.ShipToAddress
				else
					if (BillingInvoice.IsCustomerOrder)
						ProcessTaxHistory.ToAddress				= BillingInvoice.CustomerOrder.BillPostalAddress
					else
					if (BillingInvoice.IsBillToEnterd)
						ProcessTaxHistory.ToAddress 			= BillingInvoice.BillTo.PostalAddress
					else
						ProcessTaxHistory.ToAddress				= BillingInvoice.Customer.PostalAddress	
				ProcessTaxHistory.FromTaxCode					= Location.TaxCode
				ProcessTaxHistory.FromAddress					= Location.PostalAddress
				ProcessTaxHistory.POATaxCode					= BillingProcessLevel.TaxCode				
				ProcessTaxHistory.DeliveryTerms					= BillingInvoice.ShipTerm
				ProcessTaxHistory.PointOfTitleTransfer			= BillingInvoice.PointOfTitleTransfer

				ProcessTaxHistory.InvoiceDate					= InvoiceDate
				ProcessTaxHistory.TaxPointDate					= TaxPointDate	

				ProcessTaxHistory.TransactionTaxAmount			= each.TaxAmount
				ProcessTaxHistory.TransactionTaxableAmount		= each.TaxableAmount      
				ProcessTaxHistory.TransactionInvoiceAmount		= InvoiceTotal	
				ProcessTaxHistory.TransactionNumberOfDecimals	= CurrencyNumberOfDecimals	
				
				if (TaxEntityUsesVertex)
					LocalVertexTaxHistoryProcessed				= true
					if (FreightCharge.TransactionAmount entered)
						ProcessTaxHistory.UnitCost					= FreightCharge.TransactionAmount
						if (BillingInvoiceType.Credit)
							ProcessTaxHistory.DocumentType			= "CreditMemo"
						else
							ProcessTaxHistory.DocumentType			= "Invoice"
						if (CustomerShipTo entered)
							ProcessTaxHistory.ToAddress				= CustomerShipTo.ShipToAddress
						else
						if (Customer entered)
							ProcessTaxHistory.ToAddress				= Customer.PostalAddress
						else
						if (BillTo entered)
							ProcessTaxHistory.ToAddress				= BillTo.PostalAddress

						include ProcessTaxHistoryVertexFlexibleFields

				if (TaxEntityUsesSabrix
				or TaxEntityUsesVertex)
					if (IsHSNSACCodeEnabled)
						ProcessTaxHistory.CommodityCodeType		= "HSN"
						ProcessTaxHistory.CommodityCode			= FreightCode.HSNSACCode
					else
						ProcessTaxHistory.CommodityCodeType		= "UNSPSC"
						ProcessTaxHistory.CommodityCode			= FreightCode.UNSPSCCode.UNSPSCCodeDisplay

				if (TaxEntityRel.ThirdParty.Sabrix)
					include CreateTaxLineItemAndUserFields
					ProcessTaxHistory.OneSourceTaxAttribute50		= first TaxLineItemHeaderRel.LineItemUserFieldsRel.UserElementGroup
					ProcessTaxHistory.UserElementLevel			    = "O"

					ProcessTaxHistory.Description					= FreightCode.BillingFreightDescription
					ProcessTaxHistory.UniqueLineNumber				= UniqueID
					ProcessTaxHistory.ItemNumber					= FreightCode


				ProcessTaxHistory.VATRegistrationCountry      	= TaxEntityRel.VATRegistrationCountry 			 
				ProcessTaxHistory.VATRegistrationNumber		 	= TaxEntityRel.VATRegistrationNumber			 
				ProcessTaxHistory.FromVATRegistrationCountry   	= CompanyCustomer.VATRegistrationCountry	 
				ProcessTaxHistory.FromVATRegistrationNumber		= CompanyCustomer.VATRegistrationNumber
				ProcessTaxHistory.DefaultFilingCurrency 		= TaxEntityRel.DefaultFilingCurrency	
				ProcessTaxHistory.BaseCurrency 					= Company.Currency	
				ProcessTaxHistory.TransactionCurrency			= BillingInvoice.Currency
				ProcessTaxHistory.CurrencyRate					= BillingInvoice.CurrencyRate
				
				ProcessTaxHistory.HistoryType					= "N"
				LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed
				constraint (ProcessTaxHistory.OutputErrorNumber not entered) 
					"<ProcessTaxHistory.OutputErrorMessage>"					


		IDMXMLDefinition
			if (not RetainIDMGenerateDocument)
				initialize IDMGenerateDocument
			IDMGenerateDocument.IDMXMLDefinition.Busclass										= reference to this instance
			IDMGenerateDocument.IDMXMLDefinition.ListName										= "BillingInvoicePrintListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.DocumentName									= "BillingInvoice"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName		= "PrintBillingInvoiceLinesRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName			= "BillingInvoiceLineListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1	= 1
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag			= "Lines"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag			= "Line"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].RelationName		= "BillingInvoiceAddOnChargesRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListName			= "BillingInvoiceAddOnChargeListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection1	= 1
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection2	= 1
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListTag			= "LineAddOnCharge"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ItemTag			= "AddOnCharge"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].RelationName		= "BillingInvoiceLineCommentsForIDMRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListName			= "BillingInvoiceCommentsForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].LevelSection1	= 1
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].LevelSection2	= 2
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListTag			= "LineComments"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ItemTag			= "LineComment"	

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].RelationName		= "BillingInvoiceAddOnChargesRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ListName			= "BillingInvoiceAddOnChargeListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].LevelSection1	= 2
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ListTag			= "HeaderAddOnCharge"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ItemTag			= "AddOnCharge"

			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].RelationName		= "BillingInvoiceCommentsForIDMPrintRel"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ListName			= "BillingInvoiceCommentsForIDM"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].LevelSection1	= 3
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ListTag			= "HeaderComments"
			IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[5].ItemTag			= "HeaderComment"


		ValidateInvoice
			if (Company.ManualInvoiceNumbering)
				LocalActionCode = "R"
				include ValidateGlobalInvoiceNumber

			if(Company.ParallelReferenceFormat entered)
				constraint (IsValidParallelReference)
					"NewConfigurationExists,RunTheUpdateParallelReferenceAction"
			else
				initialize ParallelReference
			
			for each BillingInvoiceLineRel
				LocalLineNumber = each.BillingInvoiceLine
				if (AllowMultipleSalesAccountEntry)
					constraint (each.BillingInvoiceLineSalesAccount set exists)
						"SalesAccountsAreRequiredForInvoiceLine<LocalLineNumber>"
					constraint (each.TotalDistributionsBalance)
						"TotalSalesAccountDistributionsDoNotBalanceForInvoiceLine<LocalLineNumber>"

				if (TaxExemptCode.Exempt)
					constraint (each.BillingInvoiceLine.TaxExemptCode.Exempt)
						"InvoiceIsTaxExempt,Line<LocalLineNumber>IsTaxable"
			
			if (BillingInvoiceAddOnChargesRel not exist
			and FreightCharge.TransactionAmount not entered)
				constraint (BillingInvoiceLineRel exist)
					"NoAddOnChargeOrInvoiceLineExistsForInvoice<DerivedBillingInvoice>"
			
			if (BillingInvoiceAddOnChargesRel not exist
			and (EnteredDiscount entered
			or   OrderDiscount entered))
				constraint (BillingInvoiceLineRel exist)
					"NoAddOnChargeOrInvoiceLineExistsForInvoice<DerivedBillingInvoice>"
			
			if (BillingInvoiceType.Credit)
				constraint (InvoiceTotal < 0)
					"Invoice<DerivedBillingInvoice>TotalMustBeLessThanZero"
			else
				constraint (InvoiceTotal >= 0)
					"Invoice<DerivedBillingInvoice>TotalMustBeGreaterThanZero"
			
			if (CashInAdvance.TransactionAmount entered)
				if (!BillingInvoiceType.Credit)
					constraint (CashInAdvance.TransactionAmount <= InvoiceNetAmount)
						"DownPaymentCannotBeGreaterThanInvoiceAmount<InvoiceNetAmount>"
				else
					constraint (CashInAdvance.TransactionAmount >= InvoiceNetAmount)
						"DownPaymentCannotBeLessThanInvoiceAmount<InvoiceNetAmount>"
		
		ReleaseInvoice
			initialize LocalTaxTotal
			initialize LocalFullTaxTotal

			if (Company.ParallelReferenceFormat entered)
				constraint (IsValidParallelReference)
					"NewConfigurationExists,RunTheUpdateParallelReferenceAction"
			else
				initialize ParallelReference
			
			ReceivableDetailPosting = ReceivableDetailPosting.NoDetail		
			if (LocalReleasePrinted)
				if (EnteredDiscount.BaseAmount entered)
					ReceivableDetailPosting = ReceivableDetailPosting.Summary
				else
				if (BillingInvoiceType.Credit)
					if (ReceivableDetailPosting != ReceivableDetailPosting.Summary)
						if (FreightCharge.TransactionAmount			> 0
						or (CashInAdvance.TransactionAmount 		> 0
						and BillingElectronicPaymentType		entered))
							ReceivableDetailPosting = ReceivableDetailPosting.Summary
				else
					if (ReceivableDetailPosting != ReceivableDetailPosting.Summary)
						if (FreightCharge.TransactionAmount			< 0
						or (CashInAdvance.TransactionAmount 		< 0
						and BillingElectronicPaymentType		entered))
							ReceivableDetailPosting = ReceivableDetailPosting.Summary
				
				if (ReceivableDetailPosting != ReceivableDetailPosting.Summary)
					for each BillingInvoiceAddOnChargesRel
						if (BillingInvoiceType.Credit)
							if (each.BillingCurrencyAddOnChargeAmount	> 0)
								ReceivableDetailPosting = ReceivableDetailPosting.Summary
						else
							if (each.BillingCurrencyAddOnChargeAmount	< 0)
								ReceivableDetailPosting = ReceivableDetailPosting.Summary
			if (!IsTaxEngine)			
				for each BillingInvoiceLineRel
					LocalLineNumber  = each.BillingInvoiceLine
					if (AllowMultipleSalesAccountEntry)
						constraint (each.BillingInvoiceLineSalesAccount set exists)
							"SalesAccountsAreRequiredForInvoiceLine<LocalLineNumber>"
						constraint (each.TotalDistributionsBalance)
							"TotalSalesAccountDistributionsDoNotBalanceForInvoiceLine<LocalLineNumber>"
					
					if (each.HasTaxCode
					and (not TaxEntityRel.ThirdParty.Sabrix or each.TaxableAmount entered))
						LocalTaxTotal += each.TaxTotal
						round LocalTaxTotal to nearest DerivedRoundToDecimals
						LocalLineTaxable = true
						invoke CalculateFullTaxTotal each
					else
						LocalLineTaxable = false
					
					if (LocalReleasePrinted							
					and ReceivableDetailPosting != ReceivableDetailPosting.Summary)
						if (BillingInvoiceType.Credit)
							if (each.LineNetAmount.TransactionAmount	> 0)
								ReceivableDetailPosting = ReceivableDetailPosting.Summary
						else
							if (each.LineNetAmount.TransactionAmount	< 0)
								ReceivableDetailPosting = ReceivableDetailPosting.Summary
					
					for each AddOnChargesForBillingInvoiceLinesRel
						if (each.TaxExemptCode.Taxable
						and LocalLineTaxable)
							LocalTaxTotal += each.TaxableCurrencyAmount
							round LocalTaxTotal to nearest DerivedRoundToDecimals
							invoke CalculateFullTaxTotal each
						
						if (LocalReleasePrinted						
						and ReceivableDetailPosting != ReceivableDetailPosting.Summary)
							if (BillingInvoiceType.Credit)
								if (each.BillingCurrencyAddOnChargeAmount	> 0)
									ReceivableDetailPosting = ReceivableDetailPosting.Summary
							else
								if (each.BillingCurrencyAddOnChargeAmount	< 0)
									ReceivableDetailPosting = ReceivableDetailPosting.Summary
				
				for each AddOnChargesTaxableRel
					if (each.TaxExemptCode.Taxable)
						LocalTaxTotal += each.TaxableCurrencyAmount
						round LocalTaxTotal to nearest DerivedRoundToDecimals
						invoke CalculateFullTaxTotal each
				
				round LocalTaxTotal to nearest DerivedRoundToDecimals
				LocalTaxTotal -= LocalFullTaxTotal
				if (LocalTaxTotal != 0)
					if (BillingInvoiceLinesForTaxRel exists)
						invoke CalculateFullTaxTotal last BillingInvoiceLinesForTaxRel
							invoked.PrmExcessTax = LocalTaxTotal
					else
					if (AddOnChargesTaxableRel exists)
						invoke CalculateFullTaxTotal last AddOnChargesTaxableRel
							invoked.PrmExcessTax = LocalTaxTotal

				if (!(IsInvoicingAndTaxCalculation
				and IsManualOrRecurringSource))
					TaxTotal.TransactionAmount					 -= LocalTaxTotal
					TaxTotal.BaseAmount.ToCurrency				 = Company.Currency
					TaxTotal.BaseAmount.EnteredCurrencyRate		 = CurrencyRate
					TaxTotal.BaseAmount.EnteredCurrencyAmount	 += TaxTotal.BaseAmount.OutputCurrencyAmount

			include ReleaseLogic
			if (DerivedRunInvoicePrintEdit)
				make transition to Released
			else
			if (LocalReleasePrinted)
				make transition to Printed
			else
				make transition to Edited


		ValidateGlobalInvoiceNumberPrefix					
			initialize ValidateReceivablePrefix
			ValidateReceivablePrefix.EditReceivableCompany			= Company
			ValidateReceivablePrefix.EditReceivableInvoice			= GlobalInvoiceNumber
			ValidateReceivablePrefix.EditReceivableInvoiceType		= DerivedBillingInvoiceType
			ValidateReceivablePrefix.EditAltReceivableInvoiceType	= DerivedBillingInvoiceType

			constraint (ValidateReceivablePrefix.ErrorNumber not entered)
				"<ValidateReceivablePrefix.ErrorMessage>"
			
		ValidateGlobalInvoiceNumber							
			if (Company.ManualInvoiceNumbering)
				constraint (GlobalInvoiceNumber entered)
					"FieldInvoiceIsRequired"
				
				if (LocalActionCode = "R")
					include ValidateGlobalInvoiceNumberPrefix
				else
					if (GlobalInvoiceNumber != old GlobalInvoiceNumber)
						constraint (!BillingInvoiceRel exists)
							"BillingInvoiceAlreadyExistsWithSameInvoiceNumber"
						
						include ValidateGlobalInvoiceNumberPrefix
						
		

	Context Fields
		InvoiceDateRange					is a DateRange
		GeneralLedgerDateRange				is a DateRange
			default label is "GlobalLedgerDateRange"
		FSMInboundBODTracker


	Derived Fields
		DerivedLineCount is a DerivedField
			type is Numeric size 3
			restricted
			if (FreightCharge.TransactionAmount entered)
				return LineCount + DerivedAOCCount + 1
			else
				return LineCount + DerivedAOCCount
		
		DerivedAOCCount is a DerivedField
			type is Numeric size 3
			restricted
			return instance count of TaxableAddOnChargesRel

		DerivedFromEmailAddress is a DerivedField 
			type is like EmailAddress
			holds pii
			if (CompanyCustomer.BillingInvoiceFromAndReplyToEmail entered)
				return CompanyCustomer.BillingInvoiceFromAndReplyToEmail
			else
				return config.DefaultFromEmailAddress
				
		DerivedToEmailAddress is a DerivedField 
			type is like MultipleEmailAddress 
			holds pii
			initialize LocalRecepientEmailAddress
			if (CompanyCustomer.BillingInvoiceEmailOption.ContactsOnly)
				for each CompanyCustomer.CompanyCustomerContactRel
					if (each.EmailBillingInvoice
					and each.EmailAddress entered)
						if (LocalRecepientEmailAddress entered)
							LocalRecepientEmailAddress += ", "
						LocalRecepientEmailAddress += each.EmailAddress
			else
				if (SendToBillToEmailAddress)
					LocalRecepientEmailAddress = BillTo.EmailAddress
				else
					LocalRecepientEmailAddress = CompanyCustomer.EmailAddress
			return LocalRecepientEmailAddress
				
		DerivedCcEmailAddress is a DerivedField 
			type is like MultipleEmailAddress
			holds pii
			restricted
			initialize LocalCcEmailAddress
			if (not DefaultFromEmailAddress)
				LocalCcEmailAddress += CompanyCustomer.BillingInvoiceFromAndReplyToEmail
			if (CompanyCustomer.BillingInvoiceEmailOption.CompanyCustomerAndContacts
			or CompanyCustomer.BillingInvoiceEmailOption.BillToAndContacts)
				for each CompanyCustomer.CompanyCustomerContactRel
					if (each.EmailBillingInvoice
					and each.EmailAddress entered)
						if (LocalCcEmailAddress entered)
							LocalCcEmailAddress += ", "
						LocalCcEmailAddress += each.EmailAddress
			return LocalCcEmailAddress
			
		DerivedVatRegistrationNumber is a DerivedField 
			type is like VATRegistrationNumber
			holds pii
			default label is "VatRegistrationNumber"
			if (CustomerOrderRel.VATRegistrationNumber entered)
				return CustomerOrderRel.VATRegistrationNumber
			else
			if (CustomerShipTo entered)
				return CustomerShipTo.VATRegistrationNumber
			else
				return CompanyCustomer.VATRegistrationNumber

		DerivedTransactionCount		is a DerivedField
			type is Numeric 7
			restricted
			return 1

		DerivedFormTitle is a DerivedField
			type is MessageField

			if (CustomerInvoiceEntered)
				if (ParallelReferenceEnabled)
					return ParallelInvoiceFormTitle
				else	
					return InvoiceFormTitle	
			else
			if (CustomerEntered)
				return FormTitleCustomerOnly
			else
				return CreateMessage

		CreateMessage is a LabelField
			restricted
			"CreateInvoice"
				
		FormTitleCustomerOnly is a LabelField
			restricted
			"Invoice_for_<Customer.Name>"
					
		ParallelInvoiceFormTitle is a LabelField
			restricted
			"Invoice<BillingInvoice.InvoicePrefix>-<DerivedZeroPaddedInvoiceNumber>_for_<Customer.Name>"
		
		InvoiceFormTitle is a LabelField
			restricted
			"Invoice<DerivedInvoiceFormTitle>_for_<Customer.Name>"
			
		InvoicePrintLabel is a MessageField
			"Invoice"

		CreditMemoPrintLabel is a MessageField
			"CreditMemo"

		DerivedInvoicePrintLabel is a DerivedField
			type is Alpha 50
			if (BillingInvoiceSource.Return)
				initialize LocalProcessLevel
				if (Company.InvoiceOption.ProcessLevelInvoicing)
					LocalProcessLevel	= BillingProcessLevel
				if (CreditMemoBillingPrefixRel exists
				and CreditMemoBillingPrefixRel.CreditMemoPrintOption entered)
					return CreditMemoBillingPrefixRel.CreditMemoPrintLabel
				else
					return CreditMemoPrintLabel
			else
				return InvoicePrintLabel
	
		DerivedRoundToDecimals is a DerivedField
			type is Decimal 5.4
			restricted
			if (Currency.NumberOfDecimals = 2)
				return .01
			else
			if (Currency.NumberOfDecimals = 0)
				return 1
			else
			if (Currency.NumberOfDecimals = 3)
				return .001
			else
			if (Currency.NumberOfDecimals = 4)
				return .0001

		BillingAmount				is a DerivedField
			type is like InternationalAmount
			return (InvoiceNetAmount + TaxTotal.TransactionAmount)

		SalesAccountAmount			is a DerivedField
			type is like InternationalAmount
			return ((BillingAmount * 100) / (100 + (CustomerOrder.DerivedVATRate * 100)))

		ProformaPercent				is a DerivedField
			type is like InternationalAmount
			return (CustomerOrder.ProformaCashInAdvanceRequiredPercent * 100)

		VATOutputAmount				is a DerivedField
			type is like InternationalAmount
			return ((100 - (CustomerOrder.ProformaCashInAdvanceRequiredPercent * 100)) * (BillingAmount - SalesAccountAmount) / 100)

		BaseVATOutputAmount			is a DerivedField
			type is like InternationalAmount
			return (VATOutputAmount * CurrencyRate)

		VATOutputOffsetAmount		is a DerivedField
			type is like InternationalAmount
			return (BillingAmount - SalesAccountAmount - VATOutputAmount)

		BaseVATOutputOffsetAmount	is a DerivedField
			type is like InternationalAmount
			return (VATOutputOffsetAmount * CurrencyRate)


		DerivedCustomerName is a DerivedField
			type is Alpha up to 30
			if (CustomerOrder entered
			and CustomerOrder.BillName entered)
				return CustomerOrder.BillName
			else
				return Customer.Name

		DerivedGrossBaseAmountForIDM is a DerivedField
			type is like InternationalAmount
				precision is Company.BaseNumberOfDecimals
			restricted
			return (TotalInventoryGoodsBaseAmount + TotalNoninventoryGoodsBaseAmount + TotalAddOnBaseAmount + FreightCharge.BaseAmount.EnteredCurrencyAmount + TaxTotal.BaseAmount.EnteredCurrencyAmount)

		DerivedInvoiceNetAmountForIDM is a DerivedField
			type is like InternationalAmount
				precision is Company.BaseNumberOfDecimals
			return (DerivedGrossBaseAmountForIDM - OrderDiscount.BaseAmount.EnteredCurrencyAmount - EnteredDiscount.BaseAmount.EnteredCurrencyAmount) 

		DerivedCustomerOrder is a DerivedField
			type is like CustomerOrder
			if (CustomerOrder entered)
				return CustomerOrder
			else
				return ""

		DerivedCustomerShipTo is a DerivedField
			type is Alpha size 4
			if (CustomerShipTo entered)
				return CustomerShipTo
			else
				return ""


		PrintDownpaymentMessage is a MessageField
			"<DerivedPrintDownpaymentMessage>"

		TermsPaidMessage is a MessageField
			"<DerivedTermsPaidMessage>"

		DerivedTermsPaidMessage is a DerivedField
			type is Text
			include CalculateTaxAndTerms
			return LocalTermsPaidMessage

		DerivedPrintDownpaymentMessage is a DerivedField
			type is Text
			if (CheckNumber entered)
				return "***Downpayment Via CheckNumber "+CheckNumber
			else
			if (CashInAdvance.TransactionAmount entered)
				return "Downpayment Via ElectronicPayment "+BillingElectronicPaymentType+" "+ElectronicPaymentAccount+" "+ElectronicPaymentExpirationDate
			else
				return blank

		DerivedFinalDueDate is a DerivedField
			type is Date

			include CalculateTaxAndTerms
			return LocalTermsDueDate

		FinalDueDate is a DerivedField
			type is Date
			if (TermsCode entered)
				CalculateTerms.TransactionDate			= InvoiceDate
				LocalTermsDueDate						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate
			else
				LocalTermsDueDate = InvoiceDate
			return LocalTermsDueDate 					

		PrintedInvoiceName is a MessageField
			restricted
			"<BillingInvoice.InvoicePrefix>-<BillingInvoice.InvoiceNumber>Document"

		PrintedInvoiceMessage is a MessageField
			restricted
			"PrintedInvoice<BillingInvoice.InvoicePrefix>-<BillingInvoice.InvoiceNumber>Document"

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforSalesInvoice"

		ContextMessageText is a MessageField
			restricted
			"InvoiceNumber<BillingInvoice.InvoiceNumber>"

		InvoiceNetDue  is a DerivedField
			type is like InternationalAmount
			return (InvoiceTotal - TermsDiscount.TransactionAmount - CashInAdvance.TransactionAmount)

		InvoiceNetPrepayDue  is a DerivedField
			type is like InternationalAmount
			return (InvoiceNetDue - ProformaPrepayAmount)

		InvoiceNetDueBase  is a DerivedField
			type is like InternationalAmount
			return (InvoiceTotalBaseAmount - TermsDiscount.BaseAmount.EnteredCurrencyAmount - CashInAdvance.BaseAmount.EnteredCurrencyAmount)

		InvoiceNetPrepayBaseDue  is a DerivedField
			type is like InternationalAmount
			return (InvoiceNetDueBase - ProformaPrepayAmount)

		TotalGoods  is a DerivedField
			type is like InternationalAmount
			if (RoundingLineRel exists
			and first RoundingLineRel.EnteredPrice entered)
				return (TotalInventoryGoodsAmount + TotalNoninventoryGoodsAmount + first RoundingLineRel.EnteredPrice)
			else
				return (TotalInventoryGoodsAmount + TotalNoninventoryGoodsAmount)

		TotalGoodsBaseAmount is a DerivedField
			type is like InternationalAmount
			if (RoundingLineRel exists
			and first RoundingLineRel.EnteredPrice entered)
				return (TotalInventoryGoodsBaseAmount + TotalNoninventoryGoodsBaseAmount + first RoundingLineRel.EnteredPrice)
			else
				return (TotalInventoryGoodsBaseAmount + TotalNoninventoryGoodsBaseAmount)

		GrossAmount   is a DerivedField
			type is like InternationalAmount
			return (TotalGoods + TotalAddOnAmount + FreightCharge.TransactionAmount)

		GrossBaseAmount   is a DerivedField
			type is like InternationalAmount
			return (TotalGoodsBaseAmount + TotalAddOnBaseAmount + FreightCharge.BaseAmount.EnteredCurrencyAmount)

		InvoiceNetAmount	 is a DerivedField
			type is like InternationalAmount
			return (GrossAmount - OrderDiscount.TransactionAmount - EnteredDiscount.TransactionAmount)

		InvoiceNetBaseAmount	 is a DerivedField
			type is like InternationalAmount
			return (GrossBaseAmount - OrderDiscount.BaseAmount.EnteredCurrencyAmount - EnteredDiscount.BaseAmount.EnteredCurrencyAmount)

		InvoiceTotal is a DerivedField
			type is like InternationalAmount
			return (InvoiceNetAmount + TaxTotal.TransactionAmount)

		InvoiceTotalBaseAmount is a DerivedField
			type is like InternationalAmount
			return (InvoiceNetBaseAmount + TaxTotal.BaseAmount.EnteredCurrencyAmount)

		AllocatedDiscount is a DerivedField
			type is like InternationalAmount
			restricted
			return ((OrderDiscount.TransactionAmount + EnteredDiscount.TransactionAmount) * (TotalAddOnAmount/Discountable))

		TermsDiscountAmount is a DerivedField
			type is like InternationalAmount
			restricted
			LocalTermsAmount = TotalGoods
			if (IsCompanyInvoiceOption or IsProcessLevelInvoiceOption)
				LocalTermsAmount += FreightCharge.TransactionAmount
			if (IsCompanyInvoiceOptionAndTermsAddOnCharge or IsProcessLevelInvoiceOptionAndTermsAddOnCharge)
				LocalTermsAmount += TotalAddOnAmount

			include CalculateTermsDiscount

			return LocalTermsDiscount

		Invoice			is a StringField
			type is Alpha size 13
			restricted
			BillingInvoice.InvoicePrefix
			BillingInvoice.InvoiceNumber

		TermsDescription1	 is a DerivedField
			type is like Description
			if (TermsCode entered)
				return TermsCode.Description.Desc[1]
		TermsDescription2	 is a DerivedField
			type is like Description
			if (TermsCode entered)
				return TermsCode.Description.Desc[2]

		AddOnChargeCount											is a ComputeField
			type is Numeric 6
			restricted
			(instance count of AddOnChargesRecordCountRel)

		LineCount													is a ComputeField
			type is Numeric 6
			restricted
			(instance count of BillingInvoiceLinesForTaxRel)

		DerivedBatchNumber	is a DerivedField
			type is like BillingManualInvoiceHeader
			restricted
			if (InvoiceBatchBillingPrefixRel exists)
				increment InvoiceBatchBillingPrefixRel.LastDocNbr
				return InvoiceBatchBillingPrefixRel.LastDocNbr
			else
				increment InvoiceBatchBillingPrefixWithoutProcessLevelRel.LastDocNbr
				return InvoiceBatchBillingPrefixWithoutProcessLevelRel.LastDocNbr

		DerivedBatchNumberForCopy	is a DerivedField
			type is like BillingManualInvoiceHeader
			restricted
			if (BatchNumber exists)
				return BatchNumber

		DerivedTaxableTotalBaseAmount is a DerivedField
			type is like InternationalAmount
			if (Company.Currency = Currency)
				return TaxableTotal
			else
				initialize CurrencyExchangeGroup
				CurrencyExchangeGroup.TransactionAmount			 = TaxableTotal
				CurrencyExchangeGroup.BaseAmount.ToCurrency		 = Company.Currency
				LocalFromCurrency									 = Currency
				CurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate = CurrencyRate
				return CurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount

		DerivedGrossBaseAmountForInvoiceAndRegisterIDM is a DerivedField
			type is like InternationalAmount
				precision is Company.BaseNumberOfDecimals
			return (TotalInventoryGoodsBaseAmount + TotalNoninventoryGoodsBaseAmount + TotalAddOnBaseAmount + FreightCharge.BaseAmount.EnteredCurrencyAmount + TaxTotal.BaseAmount.EnteredCurrencyAmount)

		DerivedAsOfDate	is a StringField
			type is Alpha 60
			current corporate date

		DerivedAsOfTime	is a StringField
			type is Alpha 60
			current corporate time

		DerivedXMLName is a StringField
			type is Alpha 100
			restricted
			Company
			BillingInvoice.InvoiceNumber
			CustomerOrder

		DerivedTemsCodeDesc1	is a StringField
			type is Alpha 60
			TermsCode.Description.Desc[1]

		DerivedTemsCodeDesc2	is a StringField
			type is Alpha 60
			TermsCode.Description.Desc[2]

		DerivedTaxVatRegistrationCountry is a StringField
			type is Alpha 3
			default label is "CompanyVatRegistrationCountry/\Jurisdiction"
			TaxEntityRel.VATRegistrationCountry

		DerivedTaxVatRegistrationNumber is a StringField
			type is Alpha 25
			default label is "CompanyVatRegistrationNumber"
			TaxEntityRel.VATRegistrationNumber

		DerivedInvoiceLineItem is a DerivedField
			type is Alpha 32
			restricted
			return ""

		DerivedInvoiceLineDesc	is a DerivedField
			type is Alpha 60
			restricted
			return ""

		DerivedInvoiceLineQty	is a DerivedField
			type is like Quantity
			restricted
			return ""

		DerivedInvoiceLineSellingUOM is a DerivedField
			type is Alpha 4
			restricted
			return ""

		DerivedInvoiceLineEnteredPrice	is a DerivedField
			type is like InternationalAmount
			restricted
			return ""

		DerivedInvoiceLineExtentedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return ""

		DerivedAddOnChargeMisc	is a DerivedField
			type is Alpha 16
			restricted
			return ""

		DerivedAddOnChargeDesc	is a DerivedField
			type is Alpha 60
			restricted
			return ""

		DerivedAddOnChargeAmount	is a DerivedField
			type is like InternationalAmount
			restricted
			return ""

		DerivedBillToName			is a DerivedField 
			type is like VendorName 
			holds pii
			if (BillTo entered)
				return BillTo.Name
			else
				return Customer.Name

		DerivedBillToAdd1			is a DerivedField
			type is Alpha 40
			if (BillTo entered)
				return BillTo.PostalAddress.DeliveryAddress.AddressLine1
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine1

		DerivedBillToAdd2			is a DerivedField
			type is Alpha 40
			if (BillTo entered)
				return BillTo.PostalAddress.DeliveryAddress.AddressLine2
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine2

		DerivedBillToAdd3			is a DerivedField
			type is Alpha 40
			if (BillTo entered)
				return BillTo.PostalAddress.DeliveryAddress.AddressLine3
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine3

		DerivedBillToAdd4			is a DerivedField
			type is Alpha 40
			if (BillTo entered)
				return BillTo.PostalAddress.DeliveryAddress.AddressLine4
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine4

		DerivedBillToMunicipality	is a DerivedField
			type is Alpha 58
			if (BillTo entered)
				return BillTo.PostalAddress.Municipality
			else
				return Customer.PostalAddress.Municipality

		DerivedBillToPostalCode	is a DerivedField
			type is like PostalCode
			if (BillTo entered)
				return BillTo.PostalAddress.PostalCode
			else
				return Customer.PostalAddress.PostalCode

		DerivedBillToCounty			is a DerivedField
			type is like County
			if (BillTo entered)
				return BillTo.PostalAddress.County
			else
				return Customer.PostalAddress.County

		DerivedBillToRegion			is a DerivedField
			type is like Region
			if (BillTo entered)
				return BillTo.PostalAddress.Region
			else
				return Customer.PostalAddress.Region

		DerivedBillToState			is a DerivedField
			type is Alpha 40
			if (BillTo entered)
				return BillTo.PostalAddress.StateProvince.Name
			else
				return Customer.PostalAddress.StateProvince.Name

		DerivedBillToZip			is a DerivedField
			type is Alpha 12
			if (BillTo entered)
				return BillTo.PostalAddress.PostalCode
			else
				return Customer.PostalAddress.PostalCode

		DerivedBillToCountry		is a DerivedField
			type is Alpha 40
			if (BillTo entered)
				return BillTo.PostalAddress.Country.Name
			else
				return Customer.PostalAddress.Country.Name

		DerivedTermsPaidMessageIDM			is a DerivedField
			type is Text
			if (DerivedTermsPaidMessage entered)
				return DerivedTermsPaidMessage
			else
				return blank

		DerivedDueDateIDM	is a DerivedField
			type is Date
			default label is "InvoiceDueDate"
			include CalculateTaxAndTerms
			return LocalTermsDueDate

		DerivedGoodsTotal is a DerivedField
			type is like InternationalAmount
			return TotalGoods

		DerivedStructuredParallelReference is a DerivedField
			type is AlphaUpper 100
			restricted
			if (Company.ParallelReferenceFormat entered)
				ParallelReferenceNumber.InParallelReferenceFormat		= Company.ParallelReferenceFormat
				ParallelReferenceNumber.InParallelReferenceCheckDigit	= Company.ParallelReferenceCheckDigit
				ParallelReferenceNumber.InBillingCompany				= Company
				ParallelReferenceNumber.InCustomer						= Customer
				ParallelReferenceNumber.InBillingInvoicePrefix			= BillingInvoice.InvoicePrefix
				ParallelReferenceNumber.InBillingInvoiceNumber			= BillingInvoice.InvoiceNumber
				ParallelReferenceNumber.InBillingInvoiceDate			= InvoiceDate
				ParallelReferenceNumber.InBillingProcessLevel			= BillingProcessLevel
				return ParallelReferenceNumber.DerivedBillingParallelReference
			else
				return blank

		ConditionalBillingInvoice is a ConditionalField
			type is AlphaUpper 13
			restricted
			if (ParallelReferenceEnabled
			or IsPrintFullInvoiceNumber)
				DerivedBillingInvoiceForParallelReference
			else
				Invoice

		ConditionalInvoiceNumber is a ConditionalField
			type is AlphaUpper 40	
			default label is "InvoiceNumber"
			if (IsManualInvoiceNumbering)
				if (GlobalInvoiceNumber not entered
				and CertificationNumber entered)
					CertificationNumber
				else
					GlobalInvoiceNumber
			else
			if (ParallelReferenceEnabled
			or  IsPrintFullInvoiceNumber)
				DerivedZeroPaddedInvoiceNumber
			else
				BillingInvoice.InvoiceNumber

		DerivedBillingInvoiceForParallelReference is a StringField
			type is AlphaUpper 13
			default label is "Invoice"
			BillingInvoice.InvoicePrefix
			DerivedZeroPaddedInvoiceNumber

		DerivedZeroPaddedInvoiceNumber is a DerivedField
			type is AlphaUpper 8
			restricted
			return com.lawson.apps.procurement.base.StringUtils.leadingZeros(DerivedAlphaRightInvoiceNumber)

		DerivedAlphaRightInvoiceNumber is a DerivedField
			type is AlphaRight 8
			restricted
			return BillingInvoice.InvoiceNumber

		DefaultLookupKey is a StringField
			type is Alpha 100
			restricted
			"BillingInvoiceLine"
			":"
			CurrentTimestamp

		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp

		DerivedInvoiceName is a MessageField
			"<BillingInvoice.InvoicePrefix>-<BillingInvoice.InvoiceNumber>"

		DerivedFileName is a DerivedField
			type is like IDMFileName
			restricted
			return "BillingInvoice_" + Company + "_" + ConditionalBillingInvoice + Company.BillingInvoiceTemplate.DerivedOutputFormat

		DerivedInvoiceFileNamePerCustomer is a StringField
			type is like IDMFileName
			restricted
			"Billing Invoice print for Customer "
			Customer.Name

		DerivedAssembledFileName is a DerivedField
			type is like IDMFileName
			restricted
			return "BillingInvoiceWithAttachment_" + Company + "_" + ConditionalBillingInvoice + Company.BillingInvoiceTemplate.DerivedOutputFormat

		DerivedOutputFileName is a DerivedField
			type is like IDMFileName
			restricted
			return "\"" + DerivedFileName + "\""

		DerivedVatID is a StringField
			type is Alpha 30
			default label is "VatID"
			TaxEntityRel.VATRegistrationCountry
			" "
			TaxEntityRel.VATRegistrationNumber

		DerivedStatusForIDM is a DerivedField
			type is Alpha 20
			if (Company.LocalIDMDocumentType.InvoiceAndRegisterPrint and Company.LocalEnteredInvoicePrefix not entered)
				return "Printed"
			else
				if (Status.Unreleased)
					return "Unreleased"
				else
				if (Status.Released)
					return "Released"
				else
				if (Status.Edited)
					return "Edited"
				else
				if (Status.Printed)
					return "Printed"
				else
				if (Status.ARGLUpdated)
					return "ARGLUpdated"

		DerivedTermsCodeDescription is a DerivedField
			type is Alpha 120
			return DerivedTemsCodeDesc1 + " " + DerivedTemsCodeDesc2

		DerivedCustomerVatRegistrationNumber is a DerivedField
			type is Alpha 25
			default label is "CustomerVatRegistrationNumber"
			if (CustomerShipTo entered)
				return CustomerShipTo.VATRegistrationNumber
			else
				return CompanyCustomer.VATRegistrationNumber

		DerivedCustomerVatRegistrationCountry is a DerivedField
			type is Alpha 2
			default label is "CustomerVatRegistrationCountry/\Jurisdiction"
			if (CustomerShipTo entered)
				return CustomerShipTo.ShipToAddress.Country
			else
				return CompanyCustomer.VATRegistrationCountry

		DerivedHasCustomerEDINumber is a DerivedField
			type is Alpha 3
			if (CompanyCustomer.EDINumber entered)
				return "Yes"
			else
				return "No"

		DerivedIDMInvoiceLink is a DerivedField
			type is Alpha 2083
			if (IDMUniqueID entered)
				IDMItem.DocumentType	= "FSM_BillingInvoice"
				IDMItem.IDMUniqueId		= IDMUniqueID 
				return IDMItem.GetLink
			return blank

		DerivedBillingInvoiceEmailSubject is a MessageField
			restricted
			"BillingInvoice<Company.Name>_<ConditionalBillingInvoice>_<InvoiceDate>"

		DerivedEmailSubject is a DerivedField
			type is Alpha size 255
			restricted
			if (BillingInvoiceType.BillingInvoiceEmailSubject entered)
				LocalIDMEmailSubject = BillingInvoiceType.BillingInvoiceEmailSubject
			else
			if (BillingProcessLevel.BillingInvoiceEmailSubject entered)
				LocalIDMEmailSubject = BillingProcessLevel.BillingInvoiceEmailSubject
			else
			if (Company.BillingInvoiceEmailSubject entered)
				LocalIDMEmailSubject = Company.BillingInvoiceEmailSubject

			return LocalIDMEmailSubject text
								
						

		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter	= "Generic_Delimiter"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedBODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup + DerivedDelimiter + Company.AccountingEntity
		
		DerivedBasisBaseAmount	is a DerivedField
			type is like InternationalAmount
			restricted
			return InvoiceNetAmount * CurrencyRate
			
		DerivedTaxRate is a DerivedField
			type is Decimal size 7.5
			restricted
			return TaxCode.TxtaxrateRel.Rate *100
			
		DerivedTaxExemptCode is a DerivedField 
			type is Alpha size 10
			restricted
			if(TaxExemptCode.Taxable)
				return "Taxable"
			else
			if(TaxExemptCode.Exempt)
				return "Exempt"
			else
				return ""
				
		DerivedBaseCurrency is a DerivedField
			type is Alpha size 5
			restricted
			return Company.Currency
			
		DerivedIntegrationApplication is a DerivedField
			type is Alpha size 15
			restricted
			LocalConfigurationParameter	= "IntegrationApplication"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedIntegrationApplicationLocally is a DerivedField
			type is Boolean
			restricted		
			if (DerivedIntegrationApplication = "Local.ly")
				return true
			else 
				return false
				
		DerivedBillingInvoiceTaxType is a DerivedField
			type is Alpha size 15
			restricted
			if(DerivedIntegrationApplicationLocally)
				return TaxCode
			else
				return "VAT"
						
		DerivedLCLPaymentMethod is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplicationLocally)
				return BankTransactionCode
			else
				return ""
				
		DerivedBLTaxExempAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedTaxExemptCode = "Exempt")
					return TotalGoodsBaseAmount
				else
					return 0	
			else
				return TaxTotal.BaseAmount.EnteredCurrencyAmount
				
		DerivedBLGrossAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedTaxExemptCode = "Exempt")
					return GrossAmount
				else
					return 0	
			else
				return GrossAmount
				


		EmailNotificationMsg is a MessageField
			restricted
			"Company<Company>Invoice<ConditionalBillingInvoice>WasSentToCustomer"

		DerivedHeaderAOCCheck is a DerivedField
			type is Alpha 3
			if (BillingInvoiceAddOnChargesRel exists)
				return "Yes"
			else
				return "No"

		DerivedRunInvoicePrintEdit	  is a DerivedField
			type is Boolean
			restricted
			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.InvoiceEditOption
			else
				return BillingProcessLevel.InvoiceEditOption


		DerivedBillingInvoice			is a DerivedField
			type is AlphaUpper 22		
			if (IsManualInvoiceNumbering)
				return GlobalInvoiceNumber
			else
				return DerivedInvoiceName			
		
		DerivedDisplayBillingInvoice	is a DerivedField
			type is AlphaUpper 40		
			if (IsManualInvoiceNumbering)
				if (GlobalInvoiceNumber not entered
				and CertificationNumber entered)
					return CertificationNumber
				else
					return GlobalInvoiceNumber
			else
				return BillingInvoice
		
		DerivedBillingInvoiceToPrint	is a DerivedField
			type is AlphaUpper 40		
			if (IsManualInvoiceNumbering)
				if (GlobalInvoiceNumber not entered
				and CertificationNumber entered)
					return CertificationNumber
				else
					return GlobalInvoiceNumber
			else
				if (ParallelReferenceEnabled
				or  IsPrintFullInvoiceNumber)
					return DerivedBillingInvoiceForParallelReference
				else
					return DerivedInvoiceName
				
		DerivedInvoiceFormTitle			is a DerivedField
			type is AlphaUpper 40		
			restricted
			if (IsManualInvoiceNumbering)
				if (GlobalInvoiceNumber not entered
				and CertificationNumber entered)
					return CertificationNumber
				else
					return GlobalInvoiceNumber
			else
				return DerivedInvoiceLabelField
		
		DerivedInvoiceLabelField		is a LabelField

			"<BillingInvoice.InvoicePrefix>-<BillingInvoice.InvoiceNumber>"
		
		DerivedBillingInvoiceType	is a DerivedField
			type is AlphaUpper size 1
			if (BillingInvoiceType.Credit)
				return "C"
			else
				return "I"
		
		DerivedInvoice					is a DerivedField
			type is AlphaUpper 22	
			restricted
			if (IsManualInvoiceNumbering)
				return GlobalInvoiceNumber
			else
				return Invoice
		


		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "releaseID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value		

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "tenantID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value	

		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "VersionID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "logicalID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		BODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return CurrentTimestamp[1:4] + "-" + CurrentTimestamp[5:6] + "-" + CurrentTimestamp[7:8] + "T" + CurrentTimestamp[9:10] + ":" + CurrentTimestamp[11:12] + ":" + CurrentTimestamp[13:14] + "Z"

		BODLastModificationDate is a DerivedField
			type is Alpha size 25
			restricted
			return update stamp.timestamp

		BODLastModificationDateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODLastModificationDate[1:4] + "-" + BODLastModificationDate[5:6] + "-" + BODLastModificationDate[7:8] + "T" + BODLastModificationDate[9:10] + ":" + BODLastModificationDate[11:12] + ":" + BODLastModificationDate[13:14] + "Z"

		DerivedAlphaTransactionDate is a DerivedField
			type is Alpha size 25
			restricted
			return InvoiceDate

		DerivedTransactionDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedAlphaTransactionDate[1:4] + "-" + DerivedAlphaTransactionDate[5:6] + "-" + DerivedAlphaTransactionDate[7:8] + "T" + CurrentTimestamp[9:10] + ":" + CurrentTimestamp[11:12] + ":" + CurrentTimestamp[13:14] + "Z"

		DerivedAlphaDueDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedFinalDueDate

		DerivedFinalDueDateTime is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedAlphaDueDate[1:4] + "-" + DerivedAlphaDueDate[5:6] + "-" + DerivedAlphaDueDate[7:8] + "T" + CurrentTimestamp[9:10] + ":" + CurrentTimestamp[11:12] + ":" + CurrentTimestamp[13:14] + "Z"
	
		DerivedDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			return Company using "%d" + DerivedDelimiter + DerivedBillingInvoiceForParallelReference

		DerivedOriginalInvoiceNumber is a DerivedField
			type is Alpha size 20
			restricted
			if(OriginalBillingInvoice.InvoiceNumber entered)
				return OriginalBillingInvoice.InvoiceNumber 
			else
				return ""
		
		DerivedOriginalInvNumber is a DerivedField
			type is Alpha size 30
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedOriginalInvoiceNumber entered)
				if (DerivedOriginalInvoiceNumber size = 8)
					LocalOrgInvoiceNumber = DerivedOriginalInvoiceNumber
				else
				if (DerivedOriginalInvoiceNumber size = 7)
					LocalOrgInvoiceNumber = "0" + DerivedOriginalInvoiceNumber
				else
				if (DerivedOriginalInvoiceNumber size = 6)
					LocalOrgInvoiceNumber = "00" + DerivedOriginalInvoiceNumber
				else
				if (DerivedOriginalInvoiceNumber size = 5)
					LocalOrgInvoiceNumber = "000" + DerivedOriginalInvoiceNumber
				else
				if (DerivedOriginalInvoiceNumber size = 4)
					LocalOrgInvoiceNumber = "0000" + DerivedOriginalInvoiceNumber
				else
				if (DerivedOriginalInvoiceNumber size = 3)
					LocalOrgInvoiceNumber = "00000" + DerivedOriginalInvoiceNumber
				else
				if (DerivedOriginalInvoiceNumber size = 2)
					LocalOrgInvoiceNumber = "000000" + DerivedOriginalInvoiceNumber
				else
				if (DerivedOriginalInvoiceNumber size = 1)
					LocalOrgInvoiceNumber = "0000000" + DerivedOriginalInvoiceNumber
				else
					LocalOrgInvoiceNumber = DerivedOriginalInvoiceNumber
				DerivedOriginalInvNumber = Company using "%d" + DerivedDelimiter + OriginalBillingInvoice.InvoicePrefix + LocalOrgInvoiceNumber
				return DerivedOriginalInvNumber
			else
				return ""
			
		DerivedBODID is a DerivedField
			type is Alpha size 100
			restricted 
			return	"infor-nid:" + DerivedTenantID +":" + DerivedBODAccountingEntity +":"+DerivedDocumentID +":" +"revision"+":" + "?Invoice&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker
		
		BODVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return CurrentTimestamp[1:4] + CurrentTimestamp[5:6] + CurrentTimestamp[7:8] + CurrentTimestamp[9:10] + CurrentTimestamp[11:12] + CurrentTimestamp[13:14] + CurrentTimestamp[15:16]
			
		DerivedActionCode is a DerivedField		
			type is Alpha 10
			restricted
			return "Add"

		DerivedBODtype is a DerivedField
			type is Alpha size 25
			restricted			
			if (BillingInvoiceType.Credit)
				return "CreditMemo"
			else 
				return "Invoice"

		DerivedRefType is a DerivedField
			type is Alpha size 25
			restricted
			if(BillingInvoiceRel exists)
				return "Shipment"

		DerivedFinanceEnterpriseGroup is a DerivedField
			type is AlphaUpper size 4
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup

		DerivedAlternateDocumentSchemeName	is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedCountryCode = "AR")
				return "lcl.Government"
			else			
				return ""	
			
		DerivedAlternateDocumentID	is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedCountryCode = "AR")
				return CertificationNumber		
			else
				return DerivedDocumentID

		DerivedDisplayID is a DerivedField
			type is Alpha size 60
			restricted			
			if(DerivedCountryCode = "AR")
				return CertificationNumber			
			else
				return DerivedBillingInvoiceForParallelReference

		DerivedOrgBaseAmt is a DerivedField
			type is like InternationalAmount
			restricted
			return InvoiceTotal * CurrencyRate

		DerivedTotalReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return InvoiceTotal * CurrExchangeRateRel.Rate
				
		DerivedBillToPartyID	is a DerivedField
			type is Alpha size 25
			restricted
			if (Customer entered and BillTo entered)
				return Customer using "%d" + DerivedDelimiter + BillTo using "%d"

		DerivedBillToStateProvince is a DerivedField
			type is Alpha 40
			restricted
			if (BillTo entered)
				return BillTo.PostalAddress.StateProvince
			else
				return Customer.PostalAddress.StateProvince

		DerivedBillToCountryName is a DerivedField
			type is Alpha 40
			restricted
			if (BillTo entered)
				return BillTo.PostalAddress.Country
			else
				return Customer.PostalAddress.Country

		DerivedCountryCode is a DerivedField
			type is Alpha size 5
			restricted
			if (Company.AccountingEntity.AddressCode entered)
				return Company.AccountingEntity.AddressCode.PostalAddress.Country
			else 
				return ""

		DerivedBLReportCurrency is a DerivedField
			type is Alpha size 5
			restricted
			return Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ReportCurrencyOne

		DerivedVendorGroup is a DerivedField
			type is Alpha size 5
			restricted
			if(Customer.VendorGroupAndVendor entered)
				return Customer.VendorGroupAndVendor.VendorGroup
		
		DerivedBODSupplierID	is a DerivedField
			type is Alpha size 25
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup + DerivedDelimiter + Company.AccountingEntity

		DerivedSupplierTaxID is a DerivedField
			type is AlphaUpper size 25
			restricted
			return TaxEntityRel.TaxID

		DerivedSupplierVATTaxID	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedCountryCode = "AR")
				return TaxEntityRel.VATRegistrationNumber
			else	
				return ""	

		DerivedSchemeAgencyNameARIIBB is a DerivedField
			type is Alpha size 12
			restricted
			if(DerivedCountryCode = "AR")
				return "AR:IIBB"
			else
				return ""
				
		DerivedSchemeAgencyNameARVAT is a DerivedField
			type is Alpha size 12
			restricted
			if(DerivedCountryCode = "AR")
				return "AR:VAT"
			else
				return ""		

		DerivedBLCustomerPartyschemeID is a DerivedField
			type is Alpha size 12
			restricted
			if (DerivedIntegrationApplicationLocally and DerivedCountryCode = "NZ")
				return "GLN"
			else
				return ""

		DerivedBLCustomerPartyschemeName is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedIntegrationApplicationLocally and DerivedCountryCode = "NZ")
				return "TaxIdentificationNumber"
			else
				return ""		

		DerivedVendorSwiftID	is a DerivedField
			type is AlphaUpper size 12
			restricted
			return ""

		DerivedVendorVATRegistrationNumber	is a DerivedField
			type is AlphaUpper size 25
			restricted
			return ""

		DerivedVendorName is a DerivedField
			type is Alpha size 120
			restricted
			return BillingCompanyRel.Name			

		DerivedVendorName1 is a DerivedField
			type is Alpha size 120
			restricted
			return Company.AccountingEntity.Name			

		DerivedVendorBankAccountNumber	is a DerivedField
			type is Alpha size 35
			restricted
			return ""			

		DerivedBankAccountNumber is a DerivedField
			type is Alpha size 35
			restricted
			return ""

		DerivedVendorAddressLine1	is a DerivedField
			type is Alpha size 40
			restricted
			return BillingCompanyRel.CompanyAddress.DeliveryAddress.AddressLine1			

		DerivedVendorAddressLine2	is a DerivedField
			type is Alpha size 40
			restricted
			return BillingCompanyRel.CompanyAddress.DeliveryAddress.AddressLine2

		DerivedVendorAddressLine3	is a DerivedField
			type is Alpha size 40
			restricted
			return BillingCompanyRel.CompanyAddress.DeliveryAddress.AddressLine3			

		DerivedVendorAddressLine4	is a DerivedField
			type is Alpha size 40
			restricted
			return BillingCompanyRel.CompanyAddress.DeliveryAddress.AddressLine4

		DerivedVendorMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			return BillingCompanyRel.CompanyAddress.Municipality

		DerivedVendorStateProvince is a DerivedField
			type is AlphaUpper size 3
			restricted
			return BillingCompanyRel.CompanyAddress.StateProvince

		DerivedVendorCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			return BillingCompanyRel.CompanyAddress.Country

		DerivedVendorPostalCode	is a DerivedField
			type is Alpha size 12
			restricted
			return BillingCompanyRel.CompanyAddress.PostalCode		

		DerivedPayFromPartyID	is a DerivedField
			type is Alpha size 20
			restricted
			return Company using "%d"+ DerivedDelimiter + Customer using "%d"	

		DerivedCustomerTaxID	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(Customer entered and BillTo entered)
				return Customer.TaxID

		DerivedCustomerPartyTaxID	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedCountryCode = "AR")
				return Customer.VATRegistrationNumber
			else
				return CompanyCustomer.VATRegistrationNumber

		DerivedCustomerPartyTaxID1	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedCountryCode = "AR")
				return Customer.TaxID
			else
				return ""

		DerivedCompanyCustomerVatRegistrationNumber	is a DerivedField
			type is AlphaUpper size 25
			restricted
			return CompanyCustomer.VATRegistrationNumber

		DerivedCompanyCustomerBicID	is a DerivedField
			type is AlphaUpper size 12
			restricted
			return ""

		DerivedBOEEFTBankAccount	is a DerivedField
			type is AlphaUpper size 35
			restricted
			return ""

		DerivedCustomerPartyName is a DerivedField
			type is Alpha size 120
			restricted
			return Customer.Name

		DerivedCustomerContact is a DerivedField
			type is Alpha size 20
			restricted
			return Customer.Contact

		DerivedCustomerAddressLine1	is a DerivedField
			type is Alpha 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCustomerAddressLine2	is a DerivedField
			type is Alpha 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCustomerAddressLine3	is a DerivedField
			type is Alpha 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCustomerAddressLine4	is a DerivedField
			type is Alpha 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCustomerMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			return Customer.PostalAddress.Municipality

		DerivedCustomerStateProvince is a DerivedField
			type is Alpha size 40
			restricted
			return Customer.PostalAddress.StateProvince

		DerivedCustomerCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			return Customer.PostalAddress.Country

		DerivedCustomerPostalCode	is a DerivedField
			type is AlphaUpper size 12
			restricted
			return Customer.PostalAddress.PostalCode

		DerivedCustomerEmail is a DerivedField
			type is Alpha 256
			restricted
			return Customer.EmailAddress

		DerivedCustomerContactTitle is a DerivedField
			type is Alpha 30
			restricted
			return Customer.ContactTitle

		DerivedCustomerInternationalPrefix is a DerivedField
			type is Alpha 6
			restricted
			return Customer.PhoneNumber.InternationalPrefix

		DerivedCustomerSubscriberNumber is a DerivedField
			type is Alpha 15
			restricted
			return Customer.PhoneNumber.SubscriberNumber

		DerivedDiscountPercent is a DerivedField
			type is Alpha size 20
			restricted
			return ""

		DerivedDiscountAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return TermsDiscount.TransactionAmount

		DerivedDiscountBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return TermsDiscount.TransactionAmount * CurrencyRate

		DerivedReportDiscountAmount is a DerivedField
			type is like InternationalAmount
			restricted
			DerivedReportDiscountAmount = DerivedDiscountAmount * (CurrExchangeRateRel.Rate)	
			return DerivedReportDiscountAmount

		DerivedBLBankTransactionCode is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedCountryCode ="MX")
				return LetterOfCredit
			else
				return BankTransactionCode

		DerivedInvoiceAllowanceOrderDiscSequence is a DerivedField
			type is Numeric 9
			restricted
			if(OrderDiscount.TransactionAmount > 0)
				return 1
			else 
				return 0

		DerivedInvoiceAllowanceEnteredDiscSequence is a DerivedField
			type is Numeric 9
			restricted
			if(EnteredDiscount.TransactionAmount > 0 and DerivedInvoiceAllowanceOrderDiscSequence > 0)
				return 2
			else 
			if (EnteredDiscount.TransactionAmount > 0)
				return 1
			else
				return 0	

		DerivedBLOrderDiscountCode is a DerivedField
			type is Alpha size 5
			restricted
			if(OrderDiscount.TransactionAmount > 0)
				return CompanyCustomer.TransientOrderDiscountCode
			else
				return ""

		DerivedBlInvAllowanceEnteredDiscount is a DerivedField
			type is Alpha size 25
			restricted
			if (EnteredDiscount.TransactionAmount > 0)
				return "EnteredDiscount"
			else
				return ""

		DerivedBLOrderDiscDescription is a DerivedField
			type is Alpha size 60
			restricted
			if(OrderDiscount.TransactionAmount > 0)
				return CompanyCustomer.TransientOrderDiscountCode.Description
			else
				return ""

		DerivedBLInvOrderDiscTransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(OrderDiscount.TransactionAmount > 0)
				return OrderDiscount.TransactionAmount
			else 
				return 0
				
		DerivedBLInvEnteredDiscTransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(EnteredDiscount.TransactionAmount > 0)
				return EnteredDiscount.TransactionAmount
			else
				return 0

		DerivedBLInvAllowanceOrderDiscountReasonCode is a DerivedField
			type is Alpha size 4
			restricted
			if(OrderDiscount.TransactionAmount > 0)
				return CompanyCustomer.TransientOrderDiscountCode.OrderDiscountCode
			else
				return ""

		DerivedFunctionalCurrency	is a DerivedField
			type is Alpha size 5
			restricted
			return Company.AccountingEntity.FunctionalCurrency

		DerivedAlternateCurrency	is a DerivedField
			type is Alpha size 5
			restricted
			return Company.AccountingEntity.AlternateCurrency

		DerivedAlternateCurrency2	is a DerivedField
			type is Alpha size 5
			restricted
			return Company.AccountingEntity.AlternateCurrency2

		DerivedBLPostingDate is a DerivedField
			type is Alpha size 60
			restricted
			if(GeneralLedgerDate entered)
				DerivedBLPostingDate = GeneralLedgerDate
				return DerivedBLPostingDate[1:4] + "-" + DerivedBLPostingDate[5:6] + "-" + DerivedBLPostingDate[7:8]
			else
				return ""	

		DerivedFiscalYear is a DerivedField
			type is Alpha size 5
			restricted
			return DerivedAlphaTransactionDate[1:4]

		DerivedFiscalPeriod is a DerivedField
			type is Alpha size 5
			restricted
			return DerivedAlphaTransactionDate[5:6]

		DerivedCertificationDate is a DerivedField
			type is Alpha size 20
			restricted
			if(CertificationDate entered)
				DerivedCertificationDate = CertificationDate
				return DerivedCertificationDate[1:4] + "-" + DerivedCertificationDate[5:6] + "-" + DerivedCertificationDate[7:8]+ "T" + CurrentTimestamp[9:10] + ":" + CurrentTimestamp[11:12] + ":" + CurrentTimestamp[13:14] + "Z"
			else			
				return ""	

		DerivedMXSATUseCode is a DerivedField
			type is Alpha size 20
			restricted
			if(LetterOfCredit entered and DerivedCountryCode ="MX")
				for each LetterOfCredit split on "-"
					DerivedMXSATUseCode = each
				return DerivedMXSATUseCode
			else
				return ""

		DerivedPaymentMethod is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedBLBankTransactionCode entered)
				return ""
			else
				return BankTransactionCode			

		DerivedSubInvoiceType is a DerivedField
			type is Alpha size 20
			restricted
			if(BillingInvoiceType.Credit and DerivedCountryCode = "MX")
				return ReasonCode
			else
			if(DerivedCountryCode = "AR" and GlobalDocumentType entered)
				return GlobalDocumentType
			else
				return ""
			
		DerivedStatus is a DerivedField
			type is Alpha 25
			restricted
			if (Status < 7)
				return "Open"
			else
				return "Paid"	

		DerivedShipToPartyID	is a DerivedField
			type is Alpha size 60
			restricted
			if(CompanyCustomer.CustomerShipToRel exist)
				return Company using "%d"+DerivedDelimiter+ Customer using "%d" + DerivedDelimiter + CompanyCustomer.CustomerShipToRel.CustomerShipTo using "%d"

		DerivedBLCustomerShipToTaxID is a DerivedField
			type is Alpha size 25
			restricted
			if(CompanyCustomer.CustomerShipToRel exist)
				return CompanyCustomer.last CustomerShipToRel.VATRegistrationNumber

		DerivedCustomerShipToName is a DerivedField
			type is Alpha size 120
			restricted
			if(CompanyCustomer.CustomerShipToRel exist)
				return CompanyCustomer.last CustomerShipToRel.Name

		DerivedCustomerShipToAddressLine1	is a DerivedField
			type is Alpha size 40
			restricted
			if(CompanyCustomer.CustomerShipToRel exist)
				return CompanyCustomer.last CustomerShipToRel.ShipToAddress.DeliveryAddress.AddressLine1

		DerivedCustomerShipToAddressLine2	is a DerivedField
			type is Alpha size 40
			restricted
			if(CompanyCustomer.CustomerShipToRel exist)
				return CompanyCustomer.last CustomerShipToRel.ShipToAddress.DeliveryAddress.AddressLine2

		DerivedCustomerShipToAddressLine3	is a DerivedField
			type is Alpha size 40
			restricted
			if(CompanyCustomer.CustomerShipToRel exist)
				return CompanyCustomer.last CustomerShipToRel.ShipToAddress.DeliveryAddress.AddressLine3

		DerivedCustomerShipToAddressLine4	is a DerivedField
			type is Alpha size 40
			restricted
			if(CompanyCustomer.CustomerShipToRel exist)
				return CompanyCustomer.last CustomerShipToRel.ShipToAddress.DeliveryAddress.AddressLine4

		DerivedCustomerShipToMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			if(CompanyCustomer.CustomerShipToRel exist)
				return CompanyCustomer.last CustomerShipToRel.ShipToAddress.Municipality

		DerivedCustomerShipToCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(CompanyCustomer.CustomerShipToRel exist)
				return CompanyCustomer.last CustomerShipToRel.ShipToAddress.Country

		DerivedCustomerShipToStateProvince	is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(CompanyCustomer.CustomerShipToRel exist)
				return CompanyCustomer.last CustomerShipToRel.ShipToAddress.StateProvince		

		DerivedCustomerShipToPostalCode	is a DerivedField
			type is AlphaUpper size 12
			restricted
			if(CompanyCustomer.CustomerShipToRel exist)
				return CompanyCustomer.last CustomerShipToRel.ShipToAddress.PostalCode

		DerivedBillToPartyTaxID is a DerivedField
			type is Alpha size 25
			restricted
			return CompanyCustomer.VATRegistrationNumber

		DerivedBLPretaxReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return InvoiceNetAmount * CurrExchangeRateRel.Rate
		
		DerivedUseCodeID is a DerivedField
			type is Alpha 25
			restricted
			return ""

		DerivedRegimeCodeID is a DerivedField
			type is Alpha 25
			restricted
			return ""

		DerivedItemGroup is a DerivedField
			type is Alpha 25
			restricted
			return Company.BusinessGroup

		DerivedBLAddOnChargeSeq is a DerivedField
			type is Numeric size 6
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.BillingInvoiceAddOnCharge.BillingInvoiceAddOnCharge
			else
				return 0

		DerivedBLAddOnChargeMisc is a DerivedField
			type is AlphaUpper size 16
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.BillingInvoiceAddOnCharge.Miscellaneous.Misc
			else
				return ""				

		DerivedBLAOCTaxCode is a DerivedField
			type is AlphaUpper size 15
			restricted
			if (BillingInvoiceAddOnChargesHeaderRel exist)
				return BillingInvoiceAddOnChargesHeaderRel.TaxCode
			else
				return ""

		DerivedBLAOCTaxRate is a DerivedField
			type is Decimal size 13.4
			restricted
			if(BillingInvoiceRel exists and BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.TaxCode.TxtaxrateRel.Rate * 100
			else
				return ""

		DerivedBLAOCTaxExemptCode is a DerivedField
			type is Alpha size 10
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel.TaxExemptCode.Taxable)
				return "Taxable"
			else
			if(TaxExemptCode.Exempt)
				return "Exempt"
			else
				return ""

		DerivedBLTotalAddOnAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exist)
				return BillingInvoiceAddOnChargesHeaderRel.BillingCurrencyAddOnChargeAmount
			else
				return 0

		DerivedBLInvoiceAOCOriginalBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.BaseCurrencyAddOnChargeAmount / CurrencyRate
			else
				return 0.0

		DerivedBLInvoiceAOCBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.BaseCurrencyAddOnChargeAmount
			else
				return 0.0

		DerivedBLInvoiceAOCReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.BillingCurrencyAddOnChargeAmount * (CurrExchangeRateRel.Rate)
			else
				return 0.0

		DerivedBLInvoiceAOCTaxCurrAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.TaxableCurrencyAmount
			else
				return 0.0		

		DerivedBLInvoiceAOCTaxBaseCurrAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.TaxableBaseCurrencyAmount
			else
				return 0.0

		DerivedBLInvoiceAOCTaxReportCurrAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.TaxableCurrencyAmount * (CurrExchangeRateRel.Rate)
			else
				return 0.0

		DerivedBLAddOnChargeCurrency is a DerivedField
			type is AlphaUpper size 5
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.BillingInvoiceAddOnCharge.Miscellaneous.Currency
			else
				return ""

		DerivedBLAddOnChargeTrackType is a DerivedField
			type is AlphaUpper size 1
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.BillingInvoiceAddOnCharge.Miscellaneous.TrackType	
			else
				return ""
	
		DerivedBLAOCTaxType is a DerivedField
			type is AlphaUpper size 1
			restricted
			if (BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.TaxCode.TaxType
			else
				return ""

		DerivedBLAddOnChargeTaxRate is a DerivedField
			type is Decimal size 13.4
			restricted
			if (BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.TaxCode.TxtaxrateRel.Rate * 100
			else
				return ""

		DerivedBLAddOnChargeType is a DerivedField
			type is Numeric size 1
			restricted
			if(BillingInvoiceAddOnChargesHeaderRel exists)
				return BillingInvoiceAddOnChargesHeaderRel.BillingInvoiceAddOnCharge.Miscellaneous.ChargeType	
			else
				return ""


		DerivedRemitToName is a DerivedField
			type is like Name



			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.RemitToName
			else
			if (Company.InvoiceOption.ProcessLevelInvoicing)
				return BillingProcessLevel.RemitToName
		
		DerivedRemitToAddressLine1 is a DerivedField
			type is like AddressLine
			if (RemitToAddress.DeliveryAddress.AddressLine1 entered)
				return RemitToAddress.DeliveryAddress.AddressLine1
			else
			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.RemitToAddress.DeliveryAddress.AddressLine1
			else
			if (Company.InvoiceOption.ProcessLevelInvoicing)
				return BillingProcessLevel.RemitToAddress.DeliveryAddress.AddressLine1

		DerivedRemitToAddressLine2 is a DerivedField
			type is like AddressLine
			if (RemitToAddress.DeliveryAddress.AddressLine2 entered)
				return RemitToAddress.DeliveryAddress.AddressLine2
			else
			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.RemitToAddress.DeliveryAddress.AddressLine2
			else
			if (Company.InvoiceOption.ProcessLevelInvoicing)
				return BillingProcessLevel.RemitToAddress.DeliveryAddress.AddressLine2

		DerivedRemitToAddressLine3 is a DerivedField
			type is like AddressLine
			if (RemitToAddress.DeliveryAddress.AddressLine3 entered)
				return RemitToAddress.DeliveryAddress.AddressLine3
			else
			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.RemitToAddress.DeliveryAddress.AddressLine3
			else
			if (Company.InvoiceOption.ProcessLevelInvoicing)
				return BillingProcessLevel.RemitToAddress.DeliveryAddress.AddressLine3		
										
		DerivedRemitToAddressLine4 is a DerivedField
			type is like AddressLine
			if (RemitToAddress.DeliveryAddress.AddressLine4 entered)
				return RemitToAddress.DeliveryAddress.AddressLine4
			else
			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.RemitToAddress.DeliveryAddress.AddressLine4
			else
			if (Company.InvoiceOption.ProcessLevelInvoicing)
				return BillingProcessLevel.RemitToAddress.DeliveryAddress.AddressLine4				

		DerivedRemitToMunicipality is a DerivedField
			type is like MunicipalityLarge
			if (RemitToAddress.Municipality entered)
				return RemitToAddress.Municipality
			else
			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.RemitToAddress.Municipality
			else
			if (Company.InvoiceOption.ProcessLevelInvoicing)
				return BillingProcessLevel.RemitToAddress.Municipality

		DerivedRemitToStateProvinceName is a DerivedField
			type is like Name
			if (RemitToAddress.StateProvince.Name entered)
				return RemitToAddress.StateProvince.Name
			else
			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.RemitToAddress.StateProvince.Name
			else
			if (Company.InvoiceOption.ProcessLevelInvoicing)
				return BillingProcessLevel.RemitToAddress.StateProvince.Name
			
		DerivedRemitToPostalCode is a DerivedField
			type is like PostalCode
			if (RemitToAddress.PostalCode entered)
				return RemitToAddress.PostalCode
			else
			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.RemitToAddress.PostalCode
			else
			if (Company.InvoiceOption.ProcessLevelInvoicing)
				return BillingProcessLevel.RemitToAddress.PostalCode
		
		DerivedRemitToCounty is a DerivedField
			type is like County
			if (RemitToAddress.County entered)
				return RemitToAddress.County
			else
			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.RemitToAddress.County
			else
			if (Company.InvoiceOption.ProcessLevelInvoicing)
				return BillingProcessLevel.RemitToAddress.County
		
		DerivedRemitToRegion is a DerivedField
			type is like Region
			if (RemitToAddress.Region entered)
				return RemitToAddress.Region
			else
			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.RemitToAddress.Region
			else
			if (Company.InvoiceOption.ProcessLevelInvoicing)
				return BillingProcessLevel.RemitToAddress.Region			

		DerivedRemitToCountryName is a DerivedField
			type is like Name
			if (RemitToAddress.Country.Name entered)
				return RemitToAddress.Country.Name
			else
			if (Company.InvoiceOption.CompanyLevelInvoicing)
				return Company.RemitToAddress.Country.Name
			else
			if (Company.InvoiceOption.ProcessLevelInvoicing)
				return BillingProcessLevel.RemitToAddress.Country.Name			

		BillingInvoiceXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedIntegrationApplicationLocally)
				BillingInvoiceXMLBOD = template.IONInvoiceXML_BillingInvoice_ST document for this instance
				return BillingInvoiceXMLBOD
			else
				return ""

		BillingInvoiceTaxXMLBOD is a DerivedField
			type is XMLDocument
			restricted 
			if(DerivedIntegrationApplicationLocally)
				if(TaxCode entered)
					BillingInvoiceTaxXMLBOD = template.IONInvoice_BillingInvoice_Tax_XML_ST document for this instance
				return BillingInvoiceTaxXMLBOD
			else
				return ""

		BillingInvoiceAOCXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists) 
				initialize LocalAOCCount
				for each BillingInvoiceAddOnChargesRel
					LocalAOCCount +=1
					each.LocalBLAOCTaxRate					= DerivedBLAOCTaxRate
					each.LocalBLAOCTaxCode					= DerivedBLAOCTaxCode
					each.LocalBLAOCTaxExemptCode			= DerivedBLAOCTaxExemptCode
					each.LocalBLAOCTotalAddOnAmount			= DerivedBLTotalAddOnAmount
					each.LocalInvoiceAOCOrgBaseAmount  	 	= DerivedBLInvoiceAOCOriginalBaseAmount
					each.LocalInvoiceAOCBaseAmount   		= DerivedBLInvoiceAOCBaseAmount
					each.LocalInvoiceAOCReportAmount 		= DerivedBLInvoiceAOCReportAmount
					each.LocalInvoiceAOCTaxCurrAmount		= DerivedBLInvoiceAOCTaxCurrAmount
					each.LocalInvoiceAOCTaxBaseCurrAmount 	= DerivedBLInvoiceAOCTaxBaseCurrAmount
					each.LocalInvoiceAOCTaxReportCurrAmount = DerivedBLInvoiceAOCTaxReportCurrAmount
					each.LocalBLAOCCurrency					= DerivedBLAddOnChargeCurrency
					each.LocalBLAOCTrackType 				= DerivedBLAddOnChargeTrackType
					each.LocalBLAOCMisc						= DerivedBLAddOnChargeMisc
					each.LocalBLAOCTaxType					= DerivedBLAOCTaxType
					each.LocalBLAOCTaxRate1					= DerivedBLAddOnChargeTaxRate
					each.LocalBLAOCSeq						= DerivedBLAddOnChargeSeq
					each.LocalBLAOCType						= DerivedBLAddOnChargeType	
					BillingInvoiceAOCXMLBOD += template.IONInvoice_BillingInvoiceAddOnCharge_Charge_XML_ST document for each
				return BillingInvoiceAOCXMLBOD
			else
				return ""

		BillingInvoiceAllowanceOrderDiscountXML is a DerivedField 
	        type is XMLDocument
	        restricted 
	        if (DerivedIntegrationApplicationLocally and OrderDiscount.TransactionAmount > 0)
				BillingInvoiceAllowanceOrderDiscountXML = template.IONInvoice_Billing_Invoice_Allowance_OrderDiscount_XML_ST document for this instance
				return BillingInvoiceAllowanceOrderDiscountXML
			else
				return ""
		
		BillingInvoiceAllowanceEnteredDiscountXML is a DerivedField 
	        type is XMLDocument
	        restricted 
	        if(DerivedIntegrationApplicationLocally and EnteredDiscount.TransactionAmount > 0)
				BillingInvoiceAllowanceEnteredDiscountXML = template.IONInvoice_Billing_Invoice_Allowance_EnteredDiscount_XML_ST document for this instance
				return BillingInvoiceAllowanceEnteredDiscountXML
			else
				return ""	

		BillingInvoiceLineXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (PrintBillingInvoiceLinesRel exist and DerivedIntegrationApplicationLocally)
				for each PrintBillingInvoiceLinesRel
					each.LocalOriginalCurrency			= Currency
					each.LocalBasecurrency				= ReceivableCompanyRel.Currency
					each.LocalDerivedRefType			= DerivedRefType
					each.LocalAlphaExtendedReportAmount	= each.ExtentedAmount * (CurrExchangeRateRel.Rate)
					each.LocalExtendedReportAmount			= each.LocalAlphaExtendedReportAmount
					each.LocalAlphaTotalPretaxReportAmount	= each.LineNetAmount.BaseAmount.EnteredCurrencyAmount * (CurrExchangeRateRel.Rate)
					each.LocalTotalPretaxReportAmount		= each.LocalAlphaTotalPretaxReportAmount
					each.LocalReportAmount					= each.TaxTotal * (CurrExchangeRateRel.Rate)
					BillingInvoiceLineXMLBOD += template.IONInvoice_BillingInvoiceLine_InvoiceLine_XML_ST document for each
				return BillingInvoiceLineXMLBOD		

		IDMStatusMessage is a DerivedField
			type is MessageField
			if (LatestIDMJobIsAssembled)
            	return "IDM Job " + IDMJobAssembledRel.Status
			else
            	return "IDM Job " + IDMJob.Status
				
		IDMJobMsg is a DerivedField
			type is MessageField
			if (WithIDMError)
				if (LatestIDMJobIsAssembled)
					return "IDM Email " + IDMJobAssembledRel.Status + ". View IDM job for more details."
				else
					if  (IDMJob.GenerationStatus.Submitted
					or	 IDMJob.GenerationStatus.Failed)
						return "IDM Generation " + IDMJob.Status + ". View IDM job for more details."
					else
					if (IDMJob.EmailStatus.Submitted
					or  IDMJob.EmailStatus.Failed)
						return "IDM Email " + IDMJob.Status + ". View IDM job for more details."
					else
					if (IDMJob.PrintStatus.Submitted 
					or  IDMJob.PrintStatus.Failed)
						return "IDM Print " + IDMJob.Status + ". View IDM job for more details."
			return blank
		OriginalBillingInvoiceGlobalInvoiceNumber	is a DerivedField
			type is AlphaUpper 22
			restricted
			if (OriginalBillingInvoiceRel exists)
				return OriginalBillingInvoiceRel.GlobalInvoiceNumber


		
		BatchIDMInvoicePrintMsg is a MessageField
			"BillingInvoicePrintForCustomer<Customer>:<LocalPrintedInvoices>Invoice(s)"

		DerivedPfiConfigIntegrationApplication is a DerivedField
    		type is Alpha size 15
    		restricted
    		return 	PfiConfigurationPropertyRel.Value

		BillToWarningMessage is a MessageField
			"Bill_ToEmailAddressIsBlank.InvoiceWillBeEmailedTo_Company_Customer."
		
		OpenInvoiceAmountInCompanyCustomerCurrency		is a DerivedField
			type is like InternationalAmount
			if (Currency != CompanyCustomer.Currency)
				initialize	LocalCurrencyExchange
				LocalCurrencyExchange.ToCurrency = CompanyCustomer.Currency
				return  InvoiceTotal * LocalCurrencyExchange.OutputCurrencyRate
			else
				return InvoiceTotal

		DerivedProjectedOpenInvoiceAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return sum BillingInvoiceTotalRel.OpenInvoiceAmountInCompanyCustomerCurrency + OpenInvoiceAmountInCompanyCustomerCurrency + CompanyCustomer.CurrentBalance

		DerivedReleasedInvoicesAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return sum BillingInvoiceTotalRel.OpenInvoiceAmountInCompanyCustomerCurrency + CompanyCustomer.CurrentBalance

		DerivedOtherInvoiceTotals is a DerivedField
			type is like InternationalAmount
			return sum OtherBillingInvoiceTotalsRel.OpenInvoiceAmountInCompanyCustomerCurrency

		DerivedReleasedCompletionMessage is a DerivedField
			type is MessageField
			restricted
			if (LocalLimit)
				return InvoiceAmountExceedingCreditLimitMessageField

		InvoiceAmountExceedingCreditLimitMessageField is a MessageField
			restricted
			"ReleaseCompleted.CreditLimitExceeded.InvoiceIsPutOnHold"

		DerivedInvoiceOnHold is a MessageField
			"InvoiceOnHold"

		DerivedInterfaceInvoiceMessage is a DerivedField
			type is MessageField
			if (IsInvoiceAmountExceedingCreditLimit
			and OriginatingInterfaceRun.ReleaseOption.ReleaseAndBypassInvoicePrint
			and Status.Unreleased)
				return DerivedCreditLimitMessage

		DerivedCreditLimitMessage is a MessageField
			restricted
			"CreditLimitExceeded.InvoiceIsInterfacedInUnreleasedState"

	Conditions
		IsTaxEngine
			restricted
			when (TaxEntityRel.ThirdParty.TaxEngine)

		IsManualInvoiceNumbering						
			restricted
			when (Company.ManualInvoiceNumbering)
			
		IsProcessInvoiceBods							
			restricted
			when (Company.ProcessInvoiceBods)
		
		IsProcessInvoiceBodsAndLocally
			restricted
			when (Company.ProcessInvoiceBods
			and DerivedPfiConfigIntegrationApplication = "Local.ly")

		HasIDMDocument
			restricted
			when (Company.UseIDM and IDMUniqueID entered)
		
		DisplayIDMInvoiceLink
			restricted
			when (HasIDMDocument
			and  (IDMJob.GenerationStatus.NotApplicable
			or    IDMJob.GenerationStatus.Finished))

		TaxEntityUsesVertex
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries)

		IsBillingInvoicePrefix
			restricted
			when (RecurringInvoiceBillingPrefixRel exists
			and   CreditMemoBillingPrefixRel exists
			and   InvoiceBillingPrefixRel exists)

		IsCheckNumber
			restricted
			when (BillingElectronicPaymentType		 not entered
			and   ElectronicPaymentAccount			 not entered
			and   ElectronicPaymentExpirationDate	 not entered)

		IsCashInAdvance
			restricted
			when (CheckNumber entered
			or	   BillingElectronicPaymentType entered)

		IsBillingInvoiceSource
			restricted
			when (BillingInvoiceSource.Manual
			or   BillingInvoiceSource.RecurringInvoice
			or   BillingInvoiceSource.Shipment
			or   BillingInvoiceSource.Return)

		IsCurrencyValueEntered
			restricted
			when (TotalInventoryGoodsAmount  entered
			or	  TotalNoninventoryGoodsAmount entered
			or	TotalAddOnAmount entered
			or	FreightCharge.TransactionAmount	entered)

		IsSourceShipmentOrReturn
			restricted
			when (BillingInvoiceSource.Shipment
			or	BillingInvoiceSource.Return)

		IsManualOrRecurringSource
			restricted
			when (BillingInvoiceSource.Manual
			or	BillingInvoiceSource.RecurringInvoice)

		IsSourceShipmentOrManual
			restricted
			when (BillingInvoiceSource.Shipment
			or	BillingInvoiceSource.Manual)

		IsCompanyInvoiceOption
			restricted
			when (Company.InvoiceOption.CompanyLevelInvoicing
			and   Company.TermsFreight)

		IsProcessLevelInvoiceOption
			restricted
			when (Company.InvoiceOption.ProcessLevelInvoicing
			and   BillingProcessLevel.TermsFreight)

		IsCompanyInvoiceOptionAndDiscountAddOnCharge
			restricted
			when (Company.InvoiceOption.CompanyLevelInvoicing
			and   Company.DiscountAddOnCharge)

		IsProcessLevelInvoiceOptionAndDiscountAddOnCharge
			restricted
			when (Company.InvoiceOption.ProcessLevelInvoicing
			and   BillingProcessLevel.DiscountAddOnCharge)


		IsCompanyInvoiceOptionAndTermsAddOnCharge
			restricted
			when (Company.InvoiceOption.CompanyLevelInvoicing
			and   Company.TermsAddOnCharge)

		IsProcessLevelInvoiceOptionAndTermsAddOnCharge
			restricted
			when (Company.InvoiceOption.ProcessLevelInvoicing
			and   BillingProcessLevel.TermsAddOnCharge)

		IsPrintFullInvoiceNumber
			restricted
			when ((Company.InvoiceOption.CompanyLevelInvoicing
			and    Company.PrintFullInvoiceNumber) 
			or    (Company.InvoiceOption.ProcessLevelInvoicing
			and    BillingProcessLevel.PrintFullInvoiceNumber))

		IsARGLUpdated
			classic name is "AR/GL-UPDATED"
			restricted
			when (Status.ARGLUpdated)

		ShowInvoiceLineDistributionsList 
			restricted
			when (Status.ARGLUpdated
			and   CompanyCustomer.Company.SelectFundDistributionSet)

		IsCompanyLevelInvoicingTaxCalulation
			restricted
			when (Company.InvoiceOption.CompanyLevelInvoicing
			and   Company.TaxCalulationAndPrinting.CalcAndPrintInSummary
			or	Company.TaxCalulationAndPrinting.CalcSummPrtDetailSumm)


		IsCompanyProcessLevelInvoicingTaxCalculation
			restricted
			when (Company.InvoiceOption.ProcessLevelInvoicing
			and   Company.TaxCalulationAndPrinting.CalcAndPrintInSummary
			or   Company.TaxCalulationAndPrinting.CalcSummPrtDetailSumm)

		IsTaxCalculationAndPrinting
			restricted
			when (Company.TaxCalulationAndPrinting.CalcAndPrintInSummary
			or	Company.TaxCalulationAndPrinting.CalcSummPrtDetailSumm)

		IsInvoicingAndTaxCalculation
            restricted
            when ((Company.InvoiceOption.CompanyLevelInvoicing
            and  (Company.TaxCalulationAndPrinting.CalcAndPrintInSummary
			or   Company.TaxCalulationAndPrinting.CalcSummPrtDetailSumm))
            or   (Company.InvoiceOption.ProcessLevelInvoicing
            and  (BillingInvoice.BillingProcessLevel.TaxCalulationAndPrinting.CalcAndPrintInSummary
			or   BillingInvoice.BillingProcessLevel.TaxCalulationAndPrinting.CalcSummPrtDetailSumm)))

		IsCalcFreightTaxForTaxOptionTAndX
			restricted
			when (IsInvoicingAndTaxCalculation
			and IsManualOrRecurringSource
			and TaxEntityRel.ThirdParty.InforTax)

		IsSystemInvoices
			restricted
			when (Territory				changed
			or	SalesRepresentative			changed
			or	SalesRepresentative2		changed
			or	CommissionRate1				changed
			or	CommissionRate2				changed
			or	CommissionSplitPercentage	changed)

		IsARGLupdateForDebit
			restricted
			when (Status.ARGLUpdated
			and   !BillingInvoiceType.Credit)

		IsARGLupdateForCredit
			restricted
			when (Status.ARGLUpdated
			and   BillingInvoiceType.Credit)


		IsBillToEnterd
			restricted
			when (BillTo entered)


		IsCustomerOrder
			restricted
			when (CustomerOrder entered)

		CustomerOrderExists
			restricted
			when (CustomerOrder entered
			and   CustomerOrderRel exists)

		IsNotGlUpdated
			restricted
			when (Status <  4)

		IsNotSalesAnalysisUpdated
			restricted
			when (not SalesAnalysisInterface
			and   Status.ARGLUpdated)

		IsNotARGLUpdated
			classic name is OEISET2
			restricted
			when (Status <  9)

		CanBePutOnHold
			restricted
			when (HoldCode not entered
			and   IsReleasedOrEdited)

		CanRemoveHoldCode
			restricted
			when (HoldCode entered
			and   IsReleasedOrEdited)

		IsHoldCode
			classic name is OEISET5
			restricted
			when (HoldCode entered)


		IsReleasedOrEdited
			classic name is OEISET9
			restricted
			when (Status.Released
			or	Status.Edited)


		IsUnreleased
			restricted
			when (Status.Unreleased)

		IsTermsDescription
			restricted
			when (TermsCode.Description.Desc[2] entered)

		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

		IsDropshipPoInvoice
			restricted
			when (BillingInvoiceSource.Shipment
			and   WarehouseShipment not entered)

		TaxOutputDueAccount
			restricted
			when (TaxExemptCode.Taxable
			and TaxCode entered 
			and EntityTaxCodeRel exists
			and EntityTaxCodeRel.TaxPoint.PaymentDate
			and not TaxEntityRel.OneSourceUseARCodeForTaxAccount)

		TaxOutputAccount
			restricted
			when (TaxExemptCode.Taxable
			and TaxCode entered
			and EntityTaxCodeRel exists
			and not EntityTaxCodeRel.TaxPoint.PaymentDate
			and not TaxEntityRel.OneSourceUseARCodeForTaxAccount)

		IsPrintedOrARGLUpdatedRecurring
			restricted
			when (RecurringInvoiceParameter entered
			and  (Status.Printed
			or	  Status.ARGLUpdated))

		AllowMultipleSalesAccountEntry
			restricted
			when (Company.MultipleSalesAccountEntry)

		WithinInvoiceDateRange
			restricted
			when (InvoiceDateRange not entered
			or   (InvoiceDateRange entered 
			and   InvoiceDate within InvoiceDateRange))

		WithinGeneralLedgerDateRange
			restricted
			when (GeneralLedgerDateRange not entered
			or   (GeneralLedgerDateRange entered
			and   GeneralLedgerDate within GeneralLedgerDateRange))

		IsValidParallelReference
			restricted
			when (DerivedStructuredParallelReference = ParallelReference)

		IsValidForUpdateParallelReference
			restricted
			when (IsUnreleased
			and   ParallelReferenceEnabled
			and   not IsValidParallelReference)

		ParallelReferenceEnabled
			restricted
			when (Company.ParallelReferenceFormat entered)

		IsValidForIDMPrint
			restricted
			when (Company.UseIDM
			and   CompanyCustomer.PrintBillingInvoice
			and   IDMUniqueID entered
			and  (IDMJob.GenerationStatus.NotApplicable
			or    IDMJob.GenerationStatus.Finished))

		IsValidForIDMEmail
			restricted
			when (Company.UseIDM
			and   CompanyCustomer.EmailBillingInvoice
			and   IDMUniqueID entered
			and  (IDMJob.GenerationStatus.NotApplicable
			or    IDMJob.GenerationStatus.Finished))

		HasIDMDocumentTemplate
			restricted
			when (BillingInvoiceType.BillingInvoiceTypeIDMTemplate entered
			or	  BillingProcessLevel.BillingInvoiceProcessLevelIDMTemplate entered
			or	Company.BillingInvoiceTemplate entered)

		HasDocumentTemplate
			restricted
			when (BillingInvoiceType.BillingInvoiceDocument entered
			or	BillingProcessLevel.BillingInvoiceDocument entered
			or	Company.BillingInvoiceDocument entered)

		NoDocumentTemplate
			restricted
			when ((!Company.UseIDM and !HasDocumentTemplate)
			or	  (Company.UseIDM  and !HasIDMDocumentTemplate))

		IsValidElectronicPaymentAccount
			restricted
			when ((BillingCustomerCreditCardListRel exists
			and	ElectronicPaymentAccount exists)
			or	 BillingCustomerCreditCardListRel not exists)

		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)

		IsBaseAndInvoiceCurrencySame
			restricted
			when (Currency = Company.Currency)
			
		CustomerInvoiceEntered
			restricted
			when (Customer entered
			and	  BillingInvoice entered)

		CustomerEntered
			restricted
			when (Customer entered)			
			
		IsBillingInvoiceLineExist
			restricted
			when (BillingInvoiceLineRel exist)
			
		IsBillingInvoiceAddOnChargesExist
			restricted
			when (BillingInvoiceAddOnChargesRel exist)
			
		IsReceivableInvoiceDebitExist
			restricted
			when (ReceivableInvoiceDebitWithZeroPaddingRel exist)
			
		IsReceivableInvoiceCreditExist
			restricted
			when (ReceivableInvoiceCreditWithZeroPaddingRel exist)
			
		IsBillingGLDistributionExist
			restricted
			when (BillingGLDistributionRel exist)
			
		DefaultFromEmailAddress
			restricted
			when (CompanyCustomer.BillingInvoiceFromAndReplyToEmail = config.DefaultFromEmailAddress)

		AllowFrontEndSplit
			restricted
			when (any PrintBillingInvoiceLinesRel.AllowCashFrontEndSplit)

		HasFrontEndSplit
			restricted
			when (any PrintBillingInvoiceLinesRel.HasFrontEndSplitDistributions)
			
		DoTaxCalculation
            restricted
            when (not TaxEntityRel.ThirdParty.Sabrix   
            or    not TaxEntityRel.DelayTaxProcessing  
            or	  Status.Released
			or	  Status.Edited
			or	  Status.Printed) 
		
		IsOneSourceTax
			restricted
			when (TaxExemptCode.Taxable
			and   TaxEntityRel.ThirdParty.Sabrix)
		
		TaxEntityUsesSabrix
			restricted
			when (TaxEntityRel.ThirdParty.Sabrix)

		HasStitchBillingInvoiceAttachment
			restricted
			when (StitchBillingInvoiceAttachmentRel exists)

		HasBillingInvoiceIncludeAsEmailAttachment
			restricted
			when (BillingInvoiceIncludeAsEmailAttachmentRel exists)
		
		IsEmailBillingInvoiceEnable
			restricted
			when (CompanyCustomer.EmailBillingInvoice)
		
		SingleCallToOneSource
			restricted
			when (IsOneSourceTax 
			and	  TaxEntityRel.DelayTaxProcessing
			and	  DerivedLineCount <= 200)
		
		IsVertexTax
			restricted
			when (TaxExemptCode.Taxable
			and   TaxEntityUsesVertex)

		SingleCallToVertex
			restricted
			when (IsVertexTax 
			and	  TaxEntityRel.VertexCallMethod.ByTransaction
			and	  DerivedLineCount <= 200)
		
		HasIDMJob
			restricted
			when (Company.UseIDM 
			and  (IDMJob entered
			or    IDMJobAssembledRel exists))

		LatestIDMJobIsAssembled
			restricted
			when (IDMJobAssembledRel.CreatedDate > IDMJob.CreatedDate)

		WithIDMError
			when (HasIDMJob
			and  (not LatestIDMJobIsAssembled
			and  (IDMJob.Status.TimedOut 
			or    IDMJob.Status.Failed))
			or   (LatestIDMJobIsAssembled
			and  (IDMJobAssembledRel.Status.TimedOut 
			or    IDMJobAssembledRel.Status.Failed)))

		ShowIDMJobNavigation
			restricted
			when (HasIDMJob
			and   not LatestIDMJobIsAssembled)
		
		ShowIDMJobAssembledNavigation
			restricted
			when (HasIDMJob
			and   LatestIDMJobIsAssembled)

		ShowIDMJobErrorLink
			restricted
			when (HasIDMJob
			and  not LatestIDMJobIsAssembled
			and  (IDMJob.Status.TimedOut
			or    IDMJob.Status.Failed))
		
		ShowIDMJobAssembledErrorLink
			restricted
			when (HasIDMJob
			and  LatestIDMJobIsAssembled
			and  (IDMJobAssembledRel.Status.TimedOut 
			or    IDMJobAssembledRel.Status.Failed))

		SendToBillToEmailAddress
			restricted
			when ((CompanyCustomer.BillingInvoiceEmailOption.BillToOnly
			or CompanyCustomer.BillingInvoiceEmailOption.BillToAndContacts)
			and BillTo.EmailAddress entered)

		ShowBillToWarningMessage
			restricted
			when ((CompanyCustomer.BillingInvoiceEmailOption.BillToOnly
			or CompanyCustomer.BillingInvoiceEmailOption.BillToAndContacts)
			and BillTo.EmailAddress not entered)

		IsAllowPurge
			restricted
			when (BillingGLDistributionNotToPurgeRel exists)

		TelexNumberExists
			restricted
			when (CompanyCustomer.TelexNbr entered)

		IsInvoiceWithinCreditLimit
			restricted
			when  (CompanyCustomer.CreditLimit not entered
			or	   DerivedProjectedOpenInvoiceAmount <= CompanyCustomer.CreditLimit)

		IsInvoiceAmountExceedingCreditLimit
			restricted
			when (OrderEntryCustomerRel.CreditLimitHoldCode.BillingInvoiceRelease
			and   not IsInvoiceWithinCreditLimit
			and  !BillingInvoiceSource.Shipment)

		InvoiceHoldCodeCheck
			restricted
			when (IsInvoiceAmountExceedingCreditLimit
			and  HoldCode entered
			and (Status.Released
			or Status.Edited))

		CurrencyCheck
			when (Currency != CompanyCustomer.Currency)

		CreditHoldCheck
			when (OrderEntryCustomerRel.CreditLimitHoldCode.BillingInvoiceRelease
			and HoldCode entered)

	Relations

		BillingInvoiceTotalRel
			one-to-many relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company = Company
			Instance Selection
				where (related.Customer = Customer
				and (related.Status.Released
				or related.Status.Edited
				or related.Status.Printed))

		OtherBillingInvoiceTotalsRel
			one-to-many relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company = Company
			Instance Selection
				where (related.UniqueID != UniqueID
				and related.Customer = Customer
				and (related.Status.Released
				or related.Status.Edited
				or related.Status.Printed))

		InvoiceTaxEngineTaxDetailRel
			one-to-many relation to TaxEngineTaxDetail
			Field Mapping uses ByCompanyInvoice
				related.Company						= Company
				related.Invoice						= GlobalInvoiceNumber

		BillingInvoiceImportLineRel
			one-to-one relation to BillingInvoiceImportLine
			Field Mapping uses ByCompanyPrefixNumberLine
				related.Company						= Company
				related.InvcPrefix					= BillingInvoice.InvoicePrefix
				related.InvoiceNumber				= BillingInvoice.InvoiceNumber
				related.LineNumber					= LocalBillingInvoiceImportLine

		PrintBillingInvoiceLinesRel
			one-to-many relation to BillingInvoiceLine
			Field Mapping uses symbolic key
				related.Company							= Company
				related.BillingInvoice.InvoicePrefix	= BillingInvoice.InvoicePrefix
				related.BillingInvoice.InvoiceNumber	= BillingInvoice.InvoiceNumber

		RoundingLineRel
			one-to-many relation to BillingInvoiceLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.BillingInvoice.InvoicePrefix	= BillingInvoice.InvoicePrefix
				related.BillingInvoice.InvoiceNumber	= BillingInvoice.InvoiceNumber
			Instance Selection
				where (related.Item		= "ROUNDING"
				and	related.Description	= "ROUNDING"
				and	related.Rounding	 = true)

		ProformaInvoiceRel
			one-to-one relation to ProformaInvoice
			Field Mapping uses symbolic key
				related.Company				 = Company
				related.ProformaInvoice			= CustomerOrder

		BillingInvoiceCORel
			one-to-many relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company				 = Company
			Instance Selection
				where (related.CustomerOrder = CustomerOrder
				and	related.UniqueID != UniqueID)

		BillingInvoiceCertificationNumberRel
			one-to-many relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company				 = Company
			Instance Selection
				where (related.CertificationNumber = CertificationNumber
				and	related.UniqueID != UniqueID)

		BillingInvoiceCommentsForPrintRel is a BillingInvoiceComments set
			Instance Selection
				where (related.CommentText = PrintedInvoiceMessage
				and	related.BillingInvoiceLine not entered)

		BillingInvoiceCommentsForIDMPrintRel is a BillingInvoiceComments set
			Instance Selection
				where (not related.PrintCode.DisplayOnly
				and	related.BillingInvoiceLine not entered)

		GroupPricingInvoiceLinesRel is a BillingInvoiceLine set	
			Instance Selection
				where (related.PriceStatus.AmalgamatedGroupPricing
				and	related.SellingPrice entered)

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		 = "BL"
				related.Company						 = Company

		CreditMemoBillingPrefixRel
			one-to-one relation to BillingInvoicePrefix
			Field Mapping uses symbolic key
				related.Company						= Company
				related.BillingProcessLevel			= LocalProcessLevel
				related.BillingInvoicePrefix			= "CM"

		InvoiceBatchBillingPrefixRel
			one-to-one relation to BillingInvoicePrefix
			Field Mapping uses symbolic key
				related.Company						= Company
				related.BillingProcessLevel			= LocalProcessLevel
				related.BillingInvoicePrefix			= "IB"

		InvoiceBatchBillingPrefixWithoutProcessLevelRel	
			one-to-one relation to BillingInvoicePrefix
			Field Mapping uses symbolic key
				related.Company						= Company
				related.BillingProcessLevel			= blank
				related.BillingInvoicePrefix			= "IB"

		InvoiceBillingPrefixRel
			one-to-one relation to BillingInvoicePrefix
			Field Mapping uses symbolic key
				related.Company						= Company
				related.BillingProcessLevel			= LocalProcessLevel
				related.BillingInvoicePrefix			= "IN"

		RecurringInvoiceBillingPrefixRel
			one-to-one relation to BillingInvoicePrefix
			Field Mapping uses symbolic key
				related.Company						= Company
				related.BillingProcessLevel			= LocalProcessLevel
				related.BillingInvoicePrefix			= "RI"








		BillingInvoiceLinesCopyRel
			one-to-many relation to BillingInvoiceLine
			Field Mapping uses symbolic key
				related.Company							= Company
				related.BillingInvoice.InvoicePrefix	= LocalInvoicePrefix
				related.BillingInvoice.InvoiceNumber	= LocalInvoiceNumber

		BillingInvoiceAddOnChargesCopyRel
			one-to-many relation to	BillingInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company						= Company
				related.BillingInvoice.InvoicePrefix	= LocalInvoicePrefix
				related.BillingInvoice.InvoiceNumber	= LocalInvoiceNumber

		BillingInvoiceCommentsRel is a BillingInvoiceComments set
			Instance Selection
				where (related.BillingInvoiceLine not entered)

		BillingInvoiceCommentsForCopyRel
			one-to-many relation to BillingInvoiceComments
			Field Mapping uses symbolic key
				related.Company						= Company
				related.BillingInvoice.InvoicePrefix	= LocalInvoicePrefix
				related.BillingInvoice.InvoiceNumber	= LocalInvoiceNumber
			Instance Selection
				where (related.BillingInvoiceLine not entered)

		BillingInvoiceCommentsForCopyLinesRel
			one-to-many relation to BillingInvoiceComments
			Field Mapping uses symbolic key
				related.Company						= Company
			Instance Selection
				where (related.BillingInvoice.InvoicePrefix	 = LocalInvoicePrefix
				and	related.BillingInvoice.InvoiceNumber	 = LocalInvoiceNumber
				and	related.BillingInvoiceLine				 = LocalInvoiceLine)

		BillingInvoiceLineGroupPricingRel
			one-to-many relation to BillingInvoiceLine
			Field Mapping uses Set2
				related.Company						= Company
				related.BillingInvoice.InvoicePrefix	= BillingInvoice.InvoicePrefix
				related.BillingInvoice.InvoiceNumber	= BillingInvoice.InvoiceNumber

		VertexConfigRel
			one-to-one relation to VertexConfig
			Field Mapping uses symbolic key
				related.VertexConfig						= Company.CustomerBusinessGroup.FinanceEnterpriseGroup

		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig						= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
			Instance Selection
				where (related.CallingModuleKey			= reference to this instance)

		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.TaxEntity						= Company.AccountingEntity

		CustomerOrderAddOnChargeRel
			one-to-many relation to CustomerOrderAddOnCharge
			Field Mapping uses symbolic key
				related.Company						= Company
				related.CustomerOrder					= LocalCustomerOrder

		OrderEntryCustomerRel
			one-to-one relation to OrderEntryCustomer
			Field Mapping uses symbolic key
				related.Company						= Company
				related.Customer						= Customer

		BillingInvoiceLineRel	is a BillingInvoiceLine set

		BillingInvoiceLinesForTaxRel	is a BillingInvoiceLine set
			Instance Selection
				where(related.HasTaxCode)

		BillingInvoiceLinesDiscountableRel	is a BillingInvoiceLine set
			Instance Selection
				where (related.OrderDiscount)

		BillingInvoiceLinesTaxDiscountableRel	is a BillingInvoiceLine set
			Instance Selection
				where (related.HasTaxCode
				and	related.OrderDiscount)

		AddOnChargesRecordCountRel	is a BillingInvoiceAddOnCharge set

		AddOnChargesDiscountableRel	is a BillingInvoiceAddOnCharge set
			Instance Selection
				where (related.OrderDiscount)

		AddOnChargesTaxDiscountableRel	is a BillingInvoiceAddOnCharge set
			Instance Selection
				where (related.TaxExemptCode.Taxable
				and	related.OrderDiscount)
		
		TaxableAddOnChargesRel	is a BillingInvoiceAddOnCharge set
			Instance Selection
				where (related.TaxExemptCode.Taxable)

		AddOnChargesTaxableRel
			one-to-many relation to BillingInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company						= Company
				related.BillingInvoice					= BillingInvoice
				related.BillingInvoiceLine				= blank
			Instance Selection
				where (related.TaxExemptCode.Taxable)

		BillingInvoiceAddOnChargesRel
			one-to-many relation to BillingInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company						= Company
				related.BillingInvoice					= BillingInvoice
				related.BillingInvoiceLine				= blank

		AddOnChargesForBillingInvoiceLinesRel
			one-to-many relation to BillingInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company						= Company
				related.BillingInvoice					= BillingInvoice
				related.BillingInvoiceLine				= LocalLineNumber

		WarehouseShipmentLineRel
			one-to-many relation to WarehouseShipmentLine
			Field Mapping uses symbolic key
				related.Company							= Company
				related.InventoryLocation				= Location
				related.WarehouseShipment				= WarehouseShipment
			Instance Selection
				where (related.PrintedQuantity > 0)

		CustomerOrderLineRel
			one-to-one relation to CustomerOrderLine
			Field Mapping uses symbolic key
				related.Company							= Company
				related.CustomerOrder					= CustomerOrder
				related.CustomerOrderLine				= LocalShipmentLine

		CustomerOrderRel
			one-to-one relation to CustomerOrder
			Field Mapping uses symbolic key
				related.Company							= Company
				related.CustomerOrder					= CustomerOrder

		CustomerOrderLineUOMRel
			one-to-one relation to CustomerOrderLineUOM
			Field Mapping uses symbolic key
				related.Company							= Company
				related.CustomerOrder					= LocalCustomerOrder
				related.CustomerOrderLine				= CustomerOrderLineRel.CustomerOrderLine


		ReceivableInvoiceDebitRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivableInvoiceType			= "I"
				related.ReceivableInvoice				= Invoice

		ReceivableInvoiceCreditRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivableInvoiceType			= "C"
				related.ReceivableInvoice				= Invoice
				
		ReceivableInvoiceDebitWithZeroPaddingRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company							= Company
				related.ReceivableInvoiceType			= "I"
				related.ReceivableInvoice				= DerivedBillingInvoiceForParallelReference	
		
		ReceivableInvoiceCreditWithZeroPaddingRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company							= Company
				related.ReceivableInvoiceType			= "C"
				related.ReceivableInvoice				= DerivedBillingInvoiceForParallelReference	
				
		ReceivableInvoiceDebitCertificationNumberRel	
			one-to-many relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivableInvoiceType		= "I"
			Instance Selection
				where (related.CertificationNumber	= CertificationNumber)

		ReceivableInvoiceCreditCertificationNumberRel	
			one-to-many relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivableInvoiceType			= "C"
			Instance Selection
				where (related.CertificationNumber	= CertificationNumber)

		BillingInvoiceLineTaxRel
			one-to-many relation to BillingInvoiceLineTax
			Field Mapping uses symbolic key
				related.Company							= Company
				related.BillingInvoice					= BillingInvoice

		BLSystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses symbolic key
				related.Company							= Company
				related.GeneralLedgerSystemCode			= "BL"

		InvoicesOnHoldRel
			one-to-many relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company						= Company
			Instance Selection
				where (related.HoldCode entered
				and	related.BillingProcessLevel		= BillingProcessLevel
				and	Status.Unreleased)

		BillingCompanyRel
			one-to-one relation to BillingCompany
			Field Mapping uses symbolic key
				related.Company							= Company

		BillingProcessLevelRel
			one-to-one relation to BillingProcessLevel
			Field Mapping uses symbolic key
				related.Company							= Company
				related.BillingProcessLevel			= BillingProcessLevel

		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.AccountingEntity.FinanceEnterpriseGroup
				related.TaxEntity						= Company.AccountingEntity
				related.TaxCode							= TaxCode

		CustomerInvoiceTypeCodeRel
			one-to-one relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.Customer						= Customer
				related.InvoiceTypeCode					= InvoiceTypeCode
				
		CustomerInvoiceTypeCodesRel
			one-to-many relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.Customer				 = Customer
			Instance Selection
				where (related.Default)

		CompanyCustomerInvoiceTypeCodesRel
			one-to-many relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.Customer				 = Customer

		AnyCustomerInvoiceTypeCodeRel
			one-to-one relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.Customer				 = Customer
				related.InvoiceTypeCode			 = InvoiceTypeCode

		CustomerDefaultBillToRel
			one-to-many relation to CustomerBillTo
			Field Mapping uses symbolic key
				related.CustomerGroup			 = Customer.CustomerGroup
				related.Customer				 = Customer
			Instance Selection
				where (related.DefaultBillTo)

		BillingStandardCommentHeaderRel
			one-to-many relation to BillingStandardCommentHeader
			Field Mapping uses symbolic key
				related.Company		= Company

		CustomerProcessLevelInclusionRel
			one-to-many relation to CustomerProcessLevelInclusion
			Field Mapping uses symbolic key
				related.Company					= Company
				related.Customer				= Customer

		CustomerProcessLevelInclusionValidRel
			one-to-many relation to CustomerProcessLevelInclusion
			Field Mapping uses symbolic key
				related.Company													= Company
				related.Customer												= Customer
				related.CustomerProcessLevelInclusion.ReceivableProcessLevel	= BillingProcessLevel
			Instance Selection
				where (related.IncludeProcessLevel								= true)

		BillingCustomerCreditCardListRel
			one-to-many relation to BillingCustomerCreditCard
			Field Mapping uses symbolic key
				related.Company							= Company
				related.Customer						= Customer
				related.BillingElectronicPaymentType	= BillingElectronicPaymentType

		BillingGLDistributionRel
			one-to-many relation to BillingGLDistribution
			Field Mapping uses symbolic key
				related.Company                			= Company
				related.BillingInvoice				    = BillingInvoice	

		BillingInvoiceAttachmentsRel is a BillingInvoiceAttachment set
			
		StitchBillingInvoiceAttachmentRel is a BillingInvoiceAttachment set
			Instance Selection
				where (related.EmailDistributionOption.StitchToBillingInvoice)

		StitchBillingInvoiceAttachmentWordRel is a BillingInvoiceAttachment set
			Instance Selection
				where (related.EmailDistributionOption.StitchToBillingInvoice
				and   related.Attachment.MimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document")

		StitchBillingInvoiceAttachmentWordPDFRel is a BillingInvoiceAttachment set
			Instance Selection
				where (related.EmailDistributionOption.StitchToBillingInvoice
				and   (related.Attachment.MimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
				or     related.Attachment.MimeType = "application/pdf"))

		BillingInvoiceIncludeAsEmailAttachmentRel is a BillingInvoiceAttachment set
			Instance Selection
				where (related.EmailDistributionOption.IncludeAsEmailAttachment)

		BillingGLDistributionARCodeRel	
			one-to-many relation to BillingGLDistribution
			Field Mapping uses SetARCode
				related.Company                			= Company
				related.BillingInvoice				    = BillingInvoice
				related.ReceivableGeneralLedgerCode		= ""
		
		OriginalBillingInvoiceRel
			one-to-one relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company							= Company
				related.BillingInvoice.InvoicePrefix	= OriginalBillingInvoice.InvoicePrefix
				related.BillingInvoice.InvoiceNumber	= OriginalBillingInvoice.InvoiceNumber
		
		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
	 			related.FinanceEnterpriseGroup 	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup	 
	 			related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode
		BillingInvoiceRel			
			one-to-many relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company							= Company
			Instance Selection
				where  (related.BillingInvoiceType		= BillingInvoiceType
				and		related.GlobalInvoiceNumber	    = GlobalInvoiceNumber)

		CurrExchangeRateRel 
			one-to-one relation to CurrExchangeRate	
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CurrencyTable					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CurrencyTable
				related.CurrExchangeRate.CurrencyRelationship.FromCurrency= Currency
				related.CurrExchangeRate.CurrencyRelationship.ToCurrency= DerivedBLReportCurrency
				related.ExchangeDate                   <= InvoiceDate

		ReceivableCompanyRel 
			one-to-one relation to ReceivableCompany
			Field Mapping uses symbolic key
				related.Company								 = Company	

		BillingGLDistributionNotToPurgeRel
			one-to-many relation to BillingGLDistribution
			Field Mapping uses symbolic key
				related.Company                			= Company
				related.BillingInvoice				    = BillingInvoice
			Instance Selection
				where (related.DistributionAccount.Project entered
				and !related.DistributionAccount.Project.ProjectStatus.AllowPurge)
				

		FSMBODConfigurationParameterRel
    		one-to-one relation to FSMBODConfigurationParameter
    		Field Mapping uses symbolic key
    			related.FSMBODConfigurationParameter	= LocalConfigurationParameter

		FSMBODConfigurationRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 1
				related.FSMBODConfiguration.Noun 		= "Invoice"
				related.FSMBODConfiguration.Direction 	= 1

		FSMInboundBODTrackerRel
			one-to-one relation to FSMInboundBODTracker
			Field Mapping uses symbolic key
				related.FSMInboundBODTracker				= LocalFSMInboundBODTracker


		IDMJobAssembledRel
			one-to-one relation to IDMJob
			Field Mapping uses symbolic key
				related.IDMJob = IDMJobAssembled
		
		TaxLineItemHeaderRel	
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
			Instance Selection
			    where (related.InvoiceNumber 				= BillingInvoice.InvoiceNumber
				and    related.RelatedObjectReference 		= reference to this instance)
		
		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject = LocalUniqueID
			Instance Selection
				where (related.InvoiceNumber				= BillingInvoice.InvoiceNumber)
		
		LocalReceivableGeneralLedgerCodeRel
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company					 			= Company
				related.ReceivableGeneralLedgerCode 		= LocalReceivableGeneralLedgerCode

		BillingInvoiceAddOnChargesHeaderRel
			one-to-one relation to BillingInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company 							= Company
				related.BillingInvoice.InvoicePrefix		= BillingInvoice.InvoicePrefix
				related.BillingInvoice.InvoiceNumber		= BillingInvoice.InvoiceNumber
				related.BillingInvoiceLine					= blank
				related.BillingInvoiceAddOnCharge			= LocalAOCCount

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		IDMAdditionalAttributesLinesRel
			one-to-many relation to IDMAdditionalAttributesLines
			Field Mapping uses symbolic key
				related.IDMAdditionalAttributesHeader = "FSM_BillingInvoice"
			Instance Selection
				where(related.IDMAdditionalAttributesHeader.ActivateAdditionalAttributes
				and	  related.ActivateAdditionalAttributes.Active)
		
		PfiConfigurationPropertyRel
			one-to-one relation to PfiConfigurationProperty
			Field Mapping uses symbolic key
				related.PfiConfiguration			= "FSM_ION_Connector"
				related.PfiConfigurationProperty	= "IntegrationApplication"

	Sets

        Set2
            indexed
            Instance Selection
                where (IsNotARGLUpdated)
            Sort Order
                Company
                Status
                BillingProcessLevel
                BillingInvoice

        Set3
            indexed
            Sort Order
                Company
                CustomerOrder
                WarehouseShipment
                BillingInvoice

        Set4
            indexed
            Sort Order
                Company
                Customer
                BillingInvoice

        Set5
            indexed
            Instance Selection
                where (IsHoldCode)
            Sort Order
                Company
                HoldCode
                BillingInvoice

        Set7
            indexed
            Instance Selection
                where (IsNotGlUpdated)
            Sort Order
                Company
                GeneralLedgerDate
                BillingInvoice

        Set8
            indexed
            Instance Selection
                where (IsUnreleased)
            Sort Order
                Company
                BatchNumber
                BillingInvoice
                
        Set9
        	indexed
        	Instance Selection
                where (IsARGLUpdated)
            Sort Order
                Company
                BillingProcessLevel
                BillingInvoice

		ByBillingProcessLevel
			indexed
			Sort Order
				Company
				BillingProcessLevel
				BatchNumber
				BillingInvoice


	Local Fields
		LocalLimit						is Boolean
		LocalInvoicePrefix				is like InvoicePrefix
		LocalInvoiceNumber				is like InvoiceNumber
		LocalInvoiceLine				is like BillingInvoiceLine
		LocalCurrencyExchange			is a CurrencyExchange
		CalculateTax
		CurrencyRelationship
		CurrencyExchangeGroup
		CalculateTerms
		BypassNegativeRateEdit		
		LocalTermsDiscount				is an InternationalAmount
		LocalTermsAmount				is an InternationalAmount
		LocalTermsDueDate				is Date
		LocalGroupNetAmount				is an InternationalAmount
		LocalGroupAOCAmount				is an InternationalAmount
		LocalProcessLevel				is a BillingProcessLevel
		LocalCurrency					is a Currency
		LocalTaxableTotal				is an InternationalAmount
		LocalShipmentLine				is like WarehouseShipmentLine
		LocalCustomerOrder				is a CustomerOrder
		LocalCalculateTaxExecuted		is Alpha 1
		LocalTermsCalTrigger			is Alpha 1
		ActionType						is AlphaUpper size 1
			States
				CreateType	value is "C"
				UpdateType	value is "U"
		LocalAddOnCopyCreated			is Boolean
		LocalAddonChargeTaxable			is Boolean
		LocalAddonChargeDelete			is Boolean
		LocalCompareAmount				is like InternationalAmount
		LocalRoundedAmount				is like InternationalAmount
		LocalDecimalAmount				is like InternationalAmount
		LocalRoundedAmount1				is like InternationalAmount
		LocalLineNumber					is like LineNumber
		LocalLineGroupNetAmount			is like InternationalAmount
		LocalFreightCharge				is like InternationalAmount
		LocalLineGroupAOCAmount			is like InternationalAmount
		LocalLineTaxable				is Boolean
		LocalLineDelete					is Boolean
		LocalFromCurrency				is a FromCurrency
		LocalReleasePrinted				is Boolean
		LocalReleaseAsPrintedFromBatch	is Boolean
		LocalDiscountAmount				is an InternationalAmount
		LocalTaxTotal					is an InternationalAmount
		LocalAllocateExcess				is Boolean
		LocalFullTaxTotal				is an InternationalCost
		LocalCalculatedTotalAmount		is an InternationalAmount
		LocalTaxAndTermscalculated		is Boolean
		LocalTermsPaidMessage			is Text
		ParallelReferenceNumber
		LocalJurisdictionLookupKey		is Alpha 200
		IDMItem
		IDMGenerateDocument
		IDMAttributes
		LocalIDMPrinter					is an IDMPrinter
		LocalRecepientEmailAddress		is like MultipleEmailAddress 
			holds pii
		LocalCcEmailAddress				is Text
			holds pii
		LocalIDMEmailSubject			is Alpha 255
			Text Variables
				CompanyName		value is Company.Name
				InvoiceNumber	value is ConditionalBillingInvoice
				InvoiceDate		value is InvoiceDate
		LocalBillingInvoiceImportLine	is Numeric size 6
		ValidateReceivablePrefix		
		LocalActionCode					is an ActionCode

		LocalOneSourceTaxAttribute				is a TaxAttributeGroup50
		LocalOneSourceTaxAttributeText			is Text
		AttributeCounter						is Numeric 2

		LocalReceivableGeneralLedgerCode		is like ReceivableGeneralLedgerCode
		LocalIDMAttachmentCtr					is Numeric size 3
		AsyncId									is a AsyncActionRequest
		LocalBackgroundGroup 					is AlphaUpper up to 200
		TaxLineItemView							is a TaxLineItem view
		LocalUniqueID							is like UniqueID
		LocalLineItemNumber						is like DistributionSequence
		LocalSkipHeaderTaxlog					is Boolean

		LocalAOCCount							is Numeric size 9
		LocalOrgInvoiceNumber 			        is Alpha size 30
		LocalFSMInboundBODTracker           	is Numeric 15
		NativeLPLBODTrigger						is Boolean
		NewBODTracker  							is a FSMInboundBODTracker view
		Error            						is Boolean
	    ErrorMessageTracker    					is Alpha 300

		LocalConfigurationParameter				is Alpha size up to 200
		ProcessTaxHistory
		LocalTaxHistoryProcessed				is Alpha 1
		LocalVertexTaxHistoryProcessed			is Boolean
		Idx										is Numeric 2
		AttributeCtr							is Numeric 2
		LocalExecute							is Boolean
		IDMXMLDefinition
		LocalDocumentType						is like IDMDocumentType 
		LocalInvoiceIDMUniqueIDs				is an IDMUniqueIDOccurs
		LocalPrintedInvoices					is Numeric 3
		LocalInvoiceNumbers						is Text
		LocalIDMPrinterSetting					is an IDMPrinterSettings
		RetainIDMGenerateDocument				is Boolean
		LocalFreightTax							is an InternationalAmount
		LocalAddFreightTax						is Boolean

	Field Rules

		CurrencyTable
			default to CompanySystemClosingControlRel.CurrencyTable
			default to GeneralLedgerCompanyRel.FinanceEnterpriseGroup.CurrencyTable


		BillingInvoice
			if (BillingInvoiceSource.Interfaced
			or  BillingInvoiceSource.Project)
				required

			if (BillingInvoiceSource.Shipment)
				cannot be changed
					"CannotChangeSystem-GeneratedInvoice"	

			constraint (IsBillingInvoicePrefix)
				"ProcessLevelSetupIncomplete;PrefixDoesNotExist"
			constraint (ReceivableInvoiceDebitRel not exist)
				"InvoiceAlreadyExistsInAccountReceivable"
			constraint (ReceivableInvoiceCreditRel not exist)
				"InvoiceAlreadyExistsInAccountReceivable"













		Company
			constraint (TaxEntityRel exist)
				"TaxEntityDoesnotExist"

		BillToRegion
			default to BillTo.PostalAddress.Region

		BillTo
			default to CustomerDefaultBillToRel.CustomerBillTo

		BillToCountry
			force default to BillTo.PostalAddress.Country

		ShipDate
			default to InvoiceDate

		CustomerShipTo
			if (IsBillingInvoiceSource)
				default to OrderEntryCustomerRel.DefaultCustomerShipTo
			if (BillingInvoiceSource.Shipment)
				cannot be changed
					"CannotChangeShipToOnSystemGeneratedInvoices"

		ShipToCountry
			if (CustomerShipTo entered)
				default to CustomerShipTo.ShipToAddress.Country
			else
				default to Customer.PostalAddress.Country

		ShipToRegion
			if (CustomerShipTo entered)
				default to CustomerShipTo.ShipToAddress.Region

		BatchNumber
			required
			cannot be changed

		SalesRepresentative
			default to CustomerShipTo.SalesRepresentative
			default to CompanyCustomer.SalesRepresentative
			required

		SalesRepresentative2
			default to CustomerShipTo.SalesRepresentative2
			default to CompanyCustomer.Salesman2

			constraint (SalesRepresentative != SalesRepresentative2)
				"SalesRepresentativeAndSalesRepresentative2CannotBeSame"

		BillingElectronicPaymentType
			if (action type.Create)
				default to CompanyCustomer.BillingCustomerCreditCardForDefaultAccountRel.BillingElectronicPaymentType

		ElectronicPaymentAccount
			if (action type.Create)
				default to CompanyCustomer.BillingCustomerCreditCardForDefaultAccountRel.BillingCustomerCreditCard

			if (BillingElectronicPaymentType entered)
				constraint (IsValidElectronicPaymentAccount)
					"AccountDoesNotExist" 
				required
					"AccountIsRequired"
			else
				cannot be entered

		ElectronicPaymentExpirationDate
			if (action type.Create)
				default to CompanyCustomer.BillingCustomerCreditCardForDefaultAccountRel.ExpirationDate

			if (ElectronicPaymentAccount entered)
				if (ElectronicPaymentAccount exists
				or ElectronicPaymentAccount changed)
					ElectronicPaymentExpirationDate = ElectronicPaymentAccount.BillingCustomerCreditCard.ExpirationDate
				required
					"ExpirationDateIsRequired"
			else
				cannot be entered

			if (BillingElectronicPaymentType.RequiresAuthorization
			or  BillingElectronicPaymentType.RequiresSettlement)
				constraint (ElectronicPaymentExpirationDate >= current corporate date)
					"ElectronicPaymentHasExpired"

		Customer
			required
			cannot be changed
				"CannotChangeCustomer"
			constraint (CompanyCustomer.ActiveStatus.Active)
				"CustomerIsInactive"
			constraint (OrderEntryCustomerRel exists)						
				"OrderEntryCustomerDoesNotExist"
			constraint (!OrderEntryCustomerRel.Incomplete)
				"BillingInformationForCustomerMustBeComplete"

		Currency
			if (!Company.MultipleCurrency)
				default to Company.Currency
				constraint (Currency = Company.Currency)
					"CompanyDoesNotAllowMultipleCurrencies;CurrencyMustBeBaseCurrency"
			else
				default to CompanyCustomer.Currency
			if (IsCurrencyValueEntered)
				cannot be changed
					"Line,ChargeOrFreightExistCannotChangeCurrency"
			
			if (Currency changed)
				initialize CurrencyRate
				
		CurrencyNumberOfDecimals
			default to Currency.NumberOfDecimals

		CurrencyMultiplicationOrDivision
			if (Currency = Company.Currency)
				default to CurrencyMultiplicationOrDivision.Multiply
			else
				initialize CurrencyRelationship
				CurrencyRelationship.FromCurrency = Currency
				CurrencyRelationship.ToCurrency   = Company.Currency
				if (CurrencyRelationship.MultDiv.Multiply)
					default to CurrencyMultiplicationOrDivision.Multiply
				else
					default to CurrencyMultiplicationOrDivision.Divide

		CurrencyRate
			if (Company.Currency = Currency)
				default to 1
			else
				initialize	LocalCurrencyExchange
				LocalCurrencyExchange.ToCurrency				= Company.Currency
				default to LocalCurrencyExchange.OutputCurrencyRate

			constraint (CurrencyRate >=0)
				"CurrencyRateCannotBeNegative"					

			if (Company.Currency != Currency)
				required
					"CannotHaveAZeroRateForCurrencyCode"

			if (IsBillingInvoiceSource)
				if (IsCurrencyValueEntered)
					cannot be changed
						"Line,Charge,OrFreightExists;CannotChangeRate"

				if (Currency not changed)
					if (Company.RateFreezeCode.FreezeRateAtEntry)
						cannot be changed
							"CurrencyRateFrozenAtEntryTime-CannotChange"

					if (!Company.RateOverride
					and Company.RateFreezeCode.FreezeRateWhenInvoiced)
						cannot be changed
							"CompanyOverrideFlagNotSet"

			if (IsSourceShipmentOrReturn
			and OrderEntryOperator.CurrencyRateOverride)
				cannot be changed
					"CannotChangeOperatorOverrideNotSet"

			if (Company.Currency = Currency)
				constraint (CurrencyRate = 1)
					"InvoiceCurrencyEqualtoCompanyCurrencyRateMustBe1"

		BillingInvoiceType
			required
			cannot be changed
				"CannotChangeInvoiceType"

		BillingProcessLevel
			required
			if (BillingInvoiceLineRel exists)
				cannot be changed
					"CannotChangeProcessLevelWhenBillingLinesExist"

			constraint (CustomerProcessLevelInclusionRel not exists
			or			CustomerProcessLevelInclusionValidRel exists)
				"CustomerIsExcludedFromProcessLevel"

		Territory
			default to CustomerShipTo.Territory
			default to OrderEntryCustomerRel.Territory
			required

		InvoiceDate
			initial value is current corporate date
			default to current corporate date

		PriceDate
			default to InvoiceDate

		Location
			if (CustomerShipTo entered)
				default to CustomerShipTo.DefaultLocation
			else
				default to OrderEntryCustomerRel.DefaultShippingLocation

			default to BillingProcessLevel.DefaultLocation
			required

		ReasonCode
			if (!BillingInvoiceSource.Shipment
			and BillingInvoiceType.Credit)
				required
					"ReasonCodeIsRequired"

			constraint (ReasonCode.Billing)
				"ReasonCodeIsInvalidForBilling"

		CashInAdvance
			if (CashInAdvance.TransactionAmount entered)
				if (BillingInvoiceType.Credit)
					if (CashInAdvance.TransactionAmount > 0)
						CashInAdvance.TransactionAmount *= -1
				else
					if (CashInAdvance.TransactionAmount < 0)
						CashInAdvance.TransactionAmount *= -1
				
				constraint (IsCashInAdvance)
					"EnterAPaymentNumberOrElectronicPaymentInformation"

		CommissionRate1
			default to SalesRepresentative.CommisionPercent

			constraint (CommissionRate1 <= 100%)
				"CommisionRateForSalesRepresentativeShouldNotBeGreaterThan100%"

		CommissionRate2
			if (SalesRepresentative2 entered)
				default to SalesRepresentative2.CommisionPercent
			else
				cannot be entered
					"CannotEnterCommissionRateWithoutSalesRepresentative2"

			constraint ((CommissionRate1 + CommissionRate2) <= 100%)
				"CommissionRatesForSalesrepresentative&SalesRepresentative2CannotBeGreaterThan100%"

		CommissionSplitPercentage
			if (CustomerShipTo entered)
				default to CustomerShipTo.CommissionSplitPercentage
			else
				default to OrderEntryCustomerRel.CommissionSplitPercentage


			if (SalesRepresentative2 entered)
				required
					"CommissionSplitPercentageIsRequired"

		Project
			if (BillingInvoiceSource.Shipment)
				cannot be changed
					"CannotChangeActivityOnSystemGeneratedInvoice"

		CostProject
			if (BillingInvoiceSource.Shipment)
				cannot be changed
					"CannotChangeActivityOnSystemGeneratedInvoice"

		CheckNumber
			constraint (IsCheckNumber)
				"CannotEnterBothPaymentNumberAndElectronicPaymentData"
			constraint (CashInAdvance.TransactionAmount entered)
				"EnterADownpayment"

		ReceivableGeneralLedgerCode
			if (BillingElectronicPaymentType entered)


				force default to BillingElectronicPaymentType.ReceivableGeneralLedgerCode
			else
				default to CompanyCustomer.ReceivableGeneralLedgerCode
				default to BillingProcessLevel.ReceivableProcessLevelRel.ReceivableGeneralLedgerCode

		EnteredDiscount
			if (EnteredDiscount.TransactionAmount entered
			and !BillingInvoiceSource.Shipment)
				if (BillingInvoiceType.Credit)
					if (EnteredDiscount.TransactionAmount > 0)
						EnteredDiscount.TransactionAmount *= -1


				else
					if (EnteredDiscount.TransactionAmount < 0)
						EnteredDiscount.TransactionAmount *= -1



		CustomerOrder
			if (BillingInvoiceSource.Shipment
			or	BillingInvoiceSource.Return
			or  BillingInvoiceSource.RecurringInvoice)
				cannot be changed
					"CannotChangeOrderNumberForThisInvoice"

		WarehouseShipment
			if (BillingInvoiceSource.Shipment
			or	BillingInvoiceSource.Return
			or  BillingInvoiceSource.RecurringInvoice)
				cannot be changed
					"CannotChangeShipmentNumberForThisInvoice"

		TaxExemptCode
			if (IsTaxEngine)
				if (BillingInvoiceSource.Manual)
					if (any InvoiceTaxEngineTaxDetailRel.TaxCode entered)
						TaxExemptCode = TaxExemptCode.Taxable
					else
						TaxExemptCode = TaxExemptCode.Exempt
			else
				if (CustomerShipTo entered)
					default to CustomerShipTo.TaxExemptCode	
				else
				if (!CompanyCustomer.TaxExempt)
					default to TaxExemptCode.Taxable
				default to TaxExemptCode.Exempt
				required
				if (TaxExemptCode changed
				and TaxExemptCode.Exempt)
					constraint (BillingInvoiceLinesForTaxRel not exists)
						"TaxExemptCodeCannotBeChangedToExemptAsBillingInvoiceLine(s)IsTaxable"

		TaxCode
			if (TaxExemptCode.Taxable)
				if (IsTaxEngine)
					if (BillingInvoiceSource.Manual)
						TaxCode = Location.TaxCode
				if (TaxEntityRel.ThirdParty.Sabrix)
					default to Location.TaxCode
				default to CustomerShipTo.TaxCode
				default to CompanyCustomer.TaxCode
				
				required
					"InvoiceIsTaxableTaxCodeIsRequired"
			else
				cannot be entered
					"CannotEnterTaxCodeInvoiceIsTaxExempt"
			if (TaxCode not entered)
					initialize	TaxableTotal
					initialize  TaxTotal.TransactionAmount
					initialize	TaxTotal.BaseAmount

		TermsCode
			default to CustomerInvoiceTypeCode.TermsCode
			default to InvoiceTypeCode.TermsCode

			if (BillingInvoiceType.Credit)
				if (CustomerShipTo entered)
					default to CustomerShipTo.MemoTerm
				else
					default to CompanyCustomer.DebitCreditMemoTermsCode
			else
				if (CustomerShipTo entered)
					default to CustomerShipTo.TermCode
				else
					default to	CompanyCustomer.TermsCode

		InvoiceTypeCode
			default to first CustomerInvoiceTypeCodesRel.InvoiceTypeCode

		BankTransactionCode
			default to	CompanyCustomer.BankTransactionCode

			if (Customer.CustomerGroup.BillOfExchangeProcessing)
				constraint (!BankTransactionCode.BankTransactionType.BankService)
					"PaymentCodeMustBeCashOrBillOfExchangeType"
			else
				constraint (BankTransactionCode.BankTransactionType.CashPayment)
					"PaymentCodeMustBeCashPaymentType"

			if (Customer.CustomerGroup.BillOfExchangeProcessing
			and BankTransactionCode.BankTransactionType.BillOfExchangePayment)
				constraint (BankTransactionCode.TransactionOrigin.Receivable)
					"BillOfExchangeOrginMustBeReceivable"

		FreightCharge
			if (BillingInvoiceSource.Shipment)

				if (FreightCode.BillingFreightCharge.Required)
					constraint (FreightCharge.TransactionAmount entered)
						"FreightChargeRequiredForFreightCode"

				if (FreightCode.BillingFreightCharge.NotAllowed)
					constraint (FreightCharge.TransactionAmount not entered)
						"FreightChargeNotAllowed"

		FreightCode
			if (BillingInvoiceSource.Manual
			or  BillingInvoiceSource.RecurringInvoice)
				if (CustomerShipTo entered)
					default to CustomerShipTo.FreightCode
				else
					default to OrderEntryCustomerRel.BillingFreightCode
			if (FreightCharge.TransactionAmount entered)
				required
					"FreightChargeInvalidWithoutFreightCode"

		ListName
			default to CustomerShipTo.ListName.ListName
			default to OrderEntryCustomerRel.PriceList.ListName

		BillToEuropeanCommunityCountry
			default to BillToCountry.EcCountryNumber

		BillToISOCountry
			default to BillToCountry.IsoCountryNumber


		ShipToEuropeanCommunityCountry
			default to ShipToCountry.EcCountryNumber


		ShiptoISOCountry
			default to ShipToCountry.IsoCountryNumber

		GeneralLedgerDate
			default to InvoiceDate
			if (BLSystemClosingControlRel.Control = true)
				if (BLSystemClosingControlRel.ValidEntryDate entered)
					constraint (GeneralLedgerDate within BLSystemClosingControlRel.ValidEntryDate)
						"Date<GeneralLedgerDate>IsNotWithinCompanySystemClosingControlValidEntryDateRange"

		ParallelReference
			if (Status.Unreleased
			and BillingInvoiceSource.Interfaced 
			or  BillingInvoiceSource.Manual
			or  BillingInvoiceSource.RecurringInvoice
			or  BillingInvoiceSource.Shipment)
				force default to DerivedStructuredParallelReference
		
		AutoApply
			constraint(BillingInvoiceType.Credit and not OriginalBillingInvoiceRel.BillingInvoiceType.Credit)
				"InvoiceMustBeTypeCreditMemoAndCrossReferencedToBeAutoApplied"
			
		OriginalBillingInvoice
			if (OriginalBillingInvoice.InvoicePrefix entered 
			and OriginalBillingInvoice.InvoiceNumber entered)
				constraint(OriginalBillingInvoiceRel exists)
					"Billing_InvoiceDoesNotExist"

				if (BillingInvoiceType.Credit
				and AutoApply)
					constraint (OriginalBillingInvoiceRel.Status.ARGLUpdated)
						"CrossReferencedInvoiceMustFirstBeProcessedThrough_\Sub_\System_\Update"
			else 
				constraint(OriginalBillingInvoice.InvoicePrefix not entered and OriginalBillingInvoice.InvoiceNumber not entered)
					"MustEnterBothInvoicePrefixAndInvoiceNumberOfOriginalInvoice"

		GlobalInvoiceNumber
			if (Company.ManualInvoiceNumbering)
				required
					"FieldInvoiceIsRequired"
				include ValidateGlobalInvoiceNumber
		
		PointOfTitleTransfer
			if (action type.Create)
				default to PointOfTitleTransfer.Destination
		
	Delete Rules
		decrement BatchNumber.DetailCount
		invoke CalculateDetailQuantity BatchNumber



	StateCycles
		BillingInvoiceTransaction is a StateCycle
			state field is Status

			Unreleased is a State 
				Create is a Create Action
					Local Fields
						NewBillingManualInvoiceHeader	is a BillingManualInvoiceHeader view
					Action Rules
						if (BillingInvoiceType.Credit)
							BypassNegativeRateEdit = true
						ActionType = ActionType.CreateType

						include CreateInvoice

						if (BatchNumber not entered)
							invoke Create BillingManualInvoiceHeader
								assign result to NewBillingManualInvoiceHeader
								invoked.Company							=  Company
								invoked.BillingManualInvoiceHeader			=  DerivedBatchNumber
								invoked.DetailCount							=  1
							BatchNumber = NewBillingManualInvoiceHeader.BillingManualInvoiceHeader
						else
							constraint (BatchNumber exists)
								"BatchDoesNotExist,OrHasAlreadyBeenReleased"
							increment BatchNumber.DetailCount

						include GetBaseAmount
					Exit Rules
						if (CompanyCustomerInvoiceTypeCodesRel exists)
							constraint (AnyCustomerInvoiceTypeCodeRel exists)
								"InvoiceTypeCodeFoundInCustomer'sInvoiceTypeCodes"
						if (IsCalcFreightTaxForTaxOptionTAndX)
							LocalAddFreightTax = true
						include CalculateTaxableAmountAndSalesTax
						include CalculateTermsDiscountAmount


				InterfaceCreate is a Create Action
					restricted
					Action Rules
						ActionType = ActionType.CreateType

						if (BillingElectronicPaymentType.ReceivableGeneralLedgerCode entered)
							ReceivableGeneralLedgerCode = BillingElectronicPaymentType.ReceivableGeneralLedgerCode
						else
						if (CompanyCustomer.ReceivableGeneralLedgerCode entered)
							ReceivableGeneralLedgerCode = CompanyCustomer.ReceivableGeneralLedgerCode
						else
						if (BillingProcessLevel.ReceivableProcessLevelRel.ReceivableGeneralLedgerCode entered)
							ReceivableGeneralLedgerCode = BillingProcessLevel.ReceivableProcessLevelRel.ReceivableGeneralLedgerCode

						if (BatchNumber entered)
							constraint (BatchNumber exists)
								"BatchDoesNotExist,OrHasAlreadyBeenReleased"

						include GetBaseAmount
					Exit Rules
						if (IsCalcFreightTaxForTaxOptionTAndX)
							LocalAddFreightTax = true
						include CalculateTaxableAmountAndSalesTax
						include CalculateTermsDiscountAmount


				CreateInvoiceFromInvoice is a Create Action
					default label is "CreateUsingCopyFromInvoice"
					Parameters
						BillingCompany
						PrmBatchNumber					is a BillingManualInvoiceHeader
						PrmInvoiceDate					is  Date
						Customer
						PrmCustomerShipTo				is a CustomerShipTo
						PrmCompanyCustomer				is a CompanyCustomer
						PrmBillingProcessLevel			is a BillingProcessLevel
						PrmBillingInvoiceType			is a BillingInvoiceType
						PrmReasonCode					is an OrderCancelCreditReason
						PrmBillingInvoice				is a BillingInvoice
						PrmAutoApply					is Boolean
						PrmOverride						is Boolean
						PrmGlobalInvoiceNumber			is AlphaUpper size 22	
							default label is "Invoice"  
					Parameter Rules
						BillingCompany
							initial value is PrmBillingInvoice.Company
							default to PrmBillingInvoice.Company

						PrmBatchNumber
							initial value is PrmBillingInvoice.DerivedBatchNumberForCopy
							if (PrmBillingInvoice.BatchNumber exists)
								default to PrmBillingInvoice.BatchNumber
						Customer
							initial value is PrmBillingInvoice.Customer
							default to PrmBillingInvoice.Customer
							required
								"CustomerIsRequired"
								
						PrmCustomerShipTo
							initial value is PrmBillingInvoice.CustomerShipTo
							default to PrmBillingInvoice.CustomerShipTo
							
						PrmBillingProcessLevel
							initial value is PrmBillingInvoice.BillingProcessLevel
							default to PrmBillingInvoice.BillingProcessLevel
							required
								"ProcessLevelIsRequired"

						PrmBillingInvoiceType
							initial value is PrmBillingInvoice.BillingInvoiceType
							default to PrmBillingInvoice.BillingInvoiceType
							required
								"InvoiceTypeIsRequired"

						PrmReasonCode
							initial value is PrmBillingInvoice.ReasonCode
							default to PrmBillingInvoice.ReasonCode	
							if (PrmBillingInvoiceType.Credit)
								required
									"ReasonCodeIsRequired"
							constraint (PrmReasonCode.Billing)
								"ReasonCodeIsInvalidForBilling"

						PrmInvoiceDate
							initial value is PrmBillingInvoice.InvoiceDate
							default to current corporate date

						PrmBillingInvoice
							if (PrmBillingInvoice.InvoicePrefix entered)
								constraint (PrmBillingInvoice.InvoiceNumber entered)
									"CopyFromInvoiceNumberIsRequired"

							if (PrmBillingInvoice.InvoiceNumber entered)
								constraint (PrmBillingInvoice.InvoicePrefix entered)
									"CopyFromInvoicePrefixIsRequired"

							if (PrmBillingInvoiceType.Credit
							and PrmAutoApply)
								constraint (PrmBillingInvoice.Status.ARGLUpdated)
									"CrossReferencedInvoiceMustFirstBeProcessedThrough_\Sub_\System_\Update"
						
						PrmAutoApply
							constraint(PrmBillingInvoiceType.Credit and not PrmBillingInvoice.BillingInvoiceType.Credit)
								"InvoiceMustBeTypeCreditMemoAndCrossReferencedToBeAutoApplied"
						
						PrmGlobalInvoiceNumber
							if (BillingCompany.ManualInvoiceNumbering)
								required
									"FieldInvoiceIsRequired"
							
					Action Rules
						if (PrmBillingInvoice entered)
							invoke Unreleased.Create this instance
								fill in fields from PrmBillingInvoice
									except invoked.BillingInvoice
									except invoked.BatchNumber
									except invoked.TotalAddOnAmount
									except invoked.TaxableTotal
									except invoked.TaxTotal
									except invoked.TermsDiscount
									except invoked.TotalInventoryGoodsAmount
									except invoked.TotalInventoryGoodsBaseAmount
									except invoked.TotalNoninventoryGoodsAmount
									except invoked.TotalNoninventoryGoodsBaseAmount
									except invoked.OpenOrderAmount
									except invoked.TotalAddOnBaseAmount
									except invoked.FreightTotal
									except invoked.InsuranceTotal
									except invoked.CustomsTotal
									except invoked.OtherAddOnChargesTotal
									except invoked.Discountable
									except invoked.BillingInvoiceSource
									except invoked.ParallelReference
									except invoked.IDMUniqueID
									except invoked.IDMJob
									except invoked.GeneralLedgerDate
									except invoked.ShipDate
									except invoked.BillToRegion
									except invoked.ShipToCountry
									except invoked.ShipToRegion
									except invoked.SalesRepresentative
									except invoked.SalesRepresentative2
									except invoked.Currency
									except invoked.CurrencyNumberOfDecimals
									except invoked.CurrencyMultiplicationOrDivision
									except invoked.CurrencyRate
									except invoked.Territory
									except invoked.PriceDate
									except invoked.CommissionRate1
									except invoked.CommissionRate2
									except invoked.CommissionSplitPercentage
									except invoked.ReceivableGeneralLedgerCode
									except invoked.ListName
									except invoked.CertificationNumber
									except invoked.CertificationDate
									except invoked.InvoiceHold
									except invoked.GlobalInvoiceNumber
									except invoked.OrderEntryOperator
									except invoked.ReceivableDetailPosting
									except invoked.TaxPointDate
									except invoked.FolioAuthorizationCode
								invoked.Company					= PrmBillingInvoice.Company
								invoked.BatchNumber				= PrmBatchNumber
								invoked.Customer				= Customer
								invoked.InvoiceDate				= PrmInvoiceDate
								invoked.CustomerShipTo			= PrmCustomerShipTo
								invoked.BillingProcessLevel		= PrmBillingProcessLevel
								invoked.BillingInvoiceType		= PrmBillingInvoiceType
								invoked.ReasonCode				= PrmReasonCode
								invoked.OriginalBillingInvoice	= PrmBillingInvoice
								invoked.AutoApply				= PrmAutoApply
								invoked.GlobalInvoiceNumber		= PrmGlobalInvoiceNumber

							LocalInvoicePrefix					= PrmBillingInvoice.InvoicePrefix
							LocalInvoiceNumber					= PrmBillingInvoice.InvoiceNumber

							for each BillingInvoiceCommentsForCopyRel
								invoke Create BillingInvoiceComments
									fill in fields from each
									invoked.BillingInvoice			= this instance.BillingInvoice

							for each BillingInvoiceLinesCopyRel
								LocalInvoiceLine = each.BillingInvoiceLine

								invoke Create BillingInvoiceLine
									fill in fields from each
										except invoked.TaxableAmount
										except invoked.TaxTotal
										except invoked.LineNetAmount
										except invoked.LineGrossAmount
									invoked.BillingInvoice			      = this instance.BillingInvoice
									invoked.LocalCreatedFromCopy		  = true
									if (PrmBillingInvoice.BillingInvoiceType.Credit != PrmBillingInvoiceType.Credit)
										invoked.LocalInvoiceTypeChanged = true

									if(PrmOverride and 
									(PrmBillingInvoice.BillingProcessLevel != PrmBillingProcessLevel))
										invoked.LocalProcessLevelOverride = true
										initialize invoked.SalesAccount
										initialize invoked.COGSAccount

								for each BillingInvoiceCommentsForCopyLinesRel
									invoke Create BillingInvoiceComments
										fill in fields from each
										invoked.BillingInvoice		= this instance.BillingInvoice
										invoked.BillingInvoiceLine	= LocalInvoiceLine







							for each BillingInvoiceAddOnChargesCopyRel
								invoke Create BillingInvoiceAddOnCharge
									fill in fields from each
										except invoked.BillingCurrencyAddOnChargeAmount
										except invoked.BaseCurrencyAddOnChargeAmount
										except invoked.TaxableCurrencyAmount
										except invoked.TaxableBaseCurrencyAmount
										except invoked.TaxableAmount
									invoked.BillingInvoice			= this instance.BillingInvoice
									invoked.LocalCreatedFromCopy	= true


				CreateInvoiceFromOrder is a Create Action
					default label is "CreateUsingCopyFromOrder"
					Parameters
						BillingCompany
						PrmBatchNumber					is a BillingManualInvoiceHeader
						PrmInvoiceDate					is an ExchangeDate
						Customer
						PrmCustomerShipTo				is a CustomerShipTo
						PrmCompanyCustomer				is a CompanyCustomer
						PrmBillingProcessLevel			is a BillingProcessLevel
						PrmBillingInvoiceType			is a BillingInvoiceType
						PrmReasonCode					is an OrderCancelCreditReason
						PrmCustomerOrder				is a CustomerOrder
						PrmInventoryLocation			is a InventoryLocation
						PrmWarehouseShipment			is a WarehouseShipment
						PrmOverride						is Boolean
						PrmGlobalInvoiceNumber			is AlphaUpper size 22	
							default label is "Invoice"

					Parameter Rules
						BillingCompany
							initial value is PrmCustomerOrder.Company
							default to PrmCustomerOrder.Company
						Customer
							initial value is PrmCustomerOrder.Customer
							default to PrmCustomerOrder.Customer
							required
								"CustomerIsRequired"

						PrmBillingProcessLevel
							initial value is PrmCustomerOrder.BillingProcessLevel
							default to PrmCustomerOrder.BillingProcessLevel
							required
								"ProcessLevelIsRquired"

						PrmBillingInvoiceType
							initial value is PrmCustomerOrder.OrderEntryOrderType.BillingInvoiceType	
							default to PrmCustomerOrder.OrderEntryOrderType.BillingInvoiceType
							required
								"InvoiceTypeIsRequired"
						PrmReasonCode
							initial value is PrmCustomerOrder.OrderCancelCreditReason
							default to PrmCustomerOrder.OrderCancelCreditReason	
							if (PrmBillingInvoiceType.Credit)
								required
									"ReasonCodeIsRequired"
							constraint (PrmReasonCode.Billing)
								"ReasonCodeIsInvalidForBilling"

						PrmInvoiceDate
							initial value is PrmCustomerOrder.OrderDate
							default to PrmCustomerOrder.OrderDate

						PrmWarehouseShipment
							if (PrmCustomerOrder entered)
								required
									"CopyFromShipmentNumberIsRequiredWhenOrderEntered"
									
							constraint (PrmWarehouseShipment = PrmCustomerOrder.WarehouseShipment)
								"ShipmentDoesNotExist"

						PrmInventoryLocation
							default to PrmCustomerOrder.InventoryLocation

						PrmGlobalInvoiceNumber
							if (BillingCompany.ManualInvoiceNumbering)
								required
									"FieldInvoiceIsRequired"

					Local Fields
						LocalSaveInvoice		is a BillingInvoice view
						I2						is Numeric size 2

					Action Rules
						invoke Unreleased.Create this instance

							invoked.Company							 = BillingCompany
							invoked.BatchNumber						 = PrmBatchNumber
							invoked.Customer						 = Customer
							invoked.InvoiceDate						 = PrmInvoiceDate
							invoked.BillingProcessLevel				 = PrmBillingProcessLevel
							invoked.BillingInvoiceType				 = PrmBillingInvoiceType
							invoked.ReasonCode						 = PrmReasonCode
							invoked.WarehouseShipment				 = PrmWarehouseShipment
							invoked.Location						 = PrmCustomerOrder.InventoryLocation
							invoked.CustomerOrder					 = PrmCustomerOrder
							invoked.Territory						 = PrmCustomerOrder.Territory
							invoked.SalesRepresentative				 = PrmCustomerOrder.SalesRepresentative
							invoked.SalesRepresentative2			 = PrmCustomerOrder.SalesRepresentative2
							invoked.CommissionRate1					 = PrmCustomerOrder.CommissionRate1
							invoked.CommissionRate2					 = PrmCustomerOrder.CommissionRate2
							invoked.CommissionSplitPercentage		 = PrmCustomerOrder.CommissionSplitPercentage
							invoked.CustomerPurchaseOrder			 = PrmCustomerOrder.CustomerPurchaseOrder
							invoked.LetterOfCredit					 = PrmCustomerOrder.LetterOfCredit
							invoked.BillingElectronicPaymentType	 = PrmCustomerOrder.BillingElectronicPaymentType
							invoked.ElectronicPaymentAccount		 = PrmCustomerOrder.BillingCustomerCreditCard
							invoked.ElectronicPaymentExpirationDate	 = PrmCustomerOrder.ElectronicPaymentExpirationDate
							invoked.CashInAdvance.TransactionAmount	 = PrmCustomerOrder.EnteredPayment
							invoked.MinimumMargin					 = PrmCustomerOrder.ElectronicPaymentMinimumMargin
							invoked.MinimumMarginPercent			 = PrmCustomerOrder.ElectronicPaymentMinimumMarginPercent
							invoked.CertificationNumber				 = PrmCustomerOrder.CertificationNumber	
							invoked.CertificationDate				 = PrmCustomerOrder.CertificationDate
							invoked.CheckNumber						 = PrmCustomerOrder.CheckNumber
							invoked.TermsCode						 = PrmCustomerOrder.TermsCode
							invoked.TaxExemptCode					 = PrmCustomerOrder.TaxStatus
							invoked.TaxCode							 = PrmCustomerOrder.TaxCode
							invoked.FreightCode						 = PrmCustomerOrder.BillingFreightCode
							invoked.FreightCharge					 = PrmCustomerOrder.FreightCharge
							if (PrmCustomerShipTo entered)										  
								invoked.CustomerShipTo					 = PrmCustomerShipTo
							else
								invoked.CustomerShipTo					 = PrmCustomerOrder.CustomerShipTo

							initialize invoked.LastAddOnChargeSequence
							initialize invoked.LastTopCommentLine
							initialize invoked.LastBottomCommentLine
							invoked.ListName										 = PrmCustomerOrder.ListName
							invoked.ShipDate										 = PrmWarehouseShipment.ShipDate
							invoked.EnteredDiscount									 = PrmCustomerOrder.EnteredDiscount
							invoked.OrderDiscount.BaseAmount.EnteredCurrencyAmount	 = PrmCustomerOrder.OrderDiscountBaseAmountForDiscountCode
							invoked.OrderDiscount.TransactionAmount					 = PrmCustomerOrder.OrderDiscountBaseAmountForDiscountCode
							invoked.BillTo											 = PrmCustomerOrder.CustomerBillTo
							invoked.BillToRegion									 = PrmCustomerOrder.BillPostalAddress.Region
							invoked.BillToCountry									 = PrmCustomerOrder.BillPostalAddress.Country
							invoked.BankTransactionCode								 = PrmCustomerOrder.BankPaymentCode	
							invoked.Currency										 = PrmCustomerOrder.Currency
							invoked.CurrencyMultiplicationOrDivision				 = PrmCustomerOrder.CurrencyMultiplicationOrDivision
							invoked.CurrencyRate									 = PrmCustomerOrder.CurrencyRate
							invoked.CurrencyNumberOfDecimals						 = PrmCustomerOrder.CurrencyNumberOfDecimals
							invoked.GlobalInvoiceNumber						 		 = PrmGlobalInvoiceNumber
						LocalSaveInvoice											 = this instance.BillingInvoice
						LocalCustomerOrder											 = PrmCustomerOrder

						for each WarehouseShipmentLineRel
							LocalShipmentLine = each.WarehouseShipmentLine
							invoke Create BillingInvoiceLine
								invoked.Company						 = LocalSaveInvoice.Company
								invoked.BillingInvoice.InvoicePrefix = LocalSaveInvoice.BillingInvoice.InvoicePrefix
								invoked.BillingInvoice.InvoiceNumber = LocalSaveInvoice.BillingInvoice.InvoiceNumber
								invoked.Item						 = each.Item
								invoked.UnitCost					 = each.UnitCost
								invoked.CustomerOrder				 = LocalSaveInvoice.CustomerOrder
								if (each.LineType.SpecialItem)
									invoked.Quantity				 = each.PrintedQuantity
								else
								if (each.CatchWeightQuantity entered)
									invoked.Quantity				 = each.PrintedQuantity
								else
								if (CustomerOrderLineRel.SellToStock entered)
									invoked.Quantity				 =  each.PrintedQuantity / CustomerOrderLineRel.SellToStock
								else
									initialize invoked.Quantity 
								invoked.InvoiceCatchWeightQuantity			 = each.CatchWeightQuantity
								invoked.Description							 = CustomerOrderLineRel.ItemDescription
								invoked.LineType							 = CustomerOrderLineRel.LineType
								invoked.Location							 = CustomerOrderLineRel.InventoryLocation
								invoked.SellingUnitOfMeasure				 = CustomerOrderLineRel.SellUOM
								invoked.SellingPriceUnitOfMeasure			 = CustomerOrderLineRel.SellingPriceUOM
								invoked.NoCharge							 = CustomerOrderLineRel.NoCharge
								invoked.PriceStatus							 = "O"
								invoked.PriceDiscountCode					 = CustomerOrderLineRel.DiscountCode
								invoked.SellingPriceToStockConversionFactor	 = CustomerOrderLineRel.SellPriceToStock
								invoked.SellToStock							 = CustomerOrderLineRel.SellToStock
								invoked.SecondaryUOM						 = CustomerOrderLineRel.SecondaryUOM
								invoked.TaxExemptCode						 = CustomerOrderLineRel.TaxStatus
								invoked.ProductTaxCategory					 = CustomerOrderLineRel.ProductTaxCategory
								invoked.TaxCode								 = CustomerOrderLineRel.TaxCode
								invoked.ReasonCode							 = LocalSaveInvoice.ReasonCode
								invoked.ContractNumber						 = CustomerOrderLineRel.ContractNumber
								invoked.Promotion							 = CustomerOrderLineRel.Promotion
								invoked.OrderDiscount						 = CustomerOrderLineRel.OrderDiscount
								invoked.CommissionRate1						 = CustomerOrderLineRel.CommissionRate1
								invoked.CommissionRate2						 = CustomerOrderLineRel.CommissionRate2
								invoked.SalesRepresentative					 = CustomerOrderLineRel.SalesRepresentative
								invoked.Territory							 = CustomerOrderLineRel.Territory
								invoked.CommissionSplitPercentage			 = CustomerOrderLineRel.CommissionSplitPercentage
								invoked.MajorSalesClass						 = CustomerOrderLineRel.MajorSalesClass
								invoked.MinorSalesClass						 = CustomerOrderLineRel.MinorSalesClass
								invoked.UnitPrice							 = CustomerOrderLineRel.UnitPrice
								invoked.EnteredPrice						 = CustomerOrderLineRel.EnteredPrice
								invoked.UnitCost							 = CustomerOrderLineRel.UnitCost
								invoked.PriceInSellingUnitOfMeasure			 = CustomerOrderLineRel.SellUnitPrice
								invoked.SellingPrice						 = CustomerOrderLineRel.SellPriceCurrency
								invoked.MultipleSellPrice					 = CustomerOrderLineRel.MultipleSellPrice
								invoked.SecondaryUOMMultiplier				 = CustomerOrderLineRel.SecondaryToStock
								invoked.CurrentCost							 = each.UnitCost
								invoked.EnteredDiscount						 = CustomerOrderLineRel.EnteredDiscount 
								invoked.LastAddOnChargeSequence				 = CustomerOrderLineRel.LastAddOnChargeSequence
								invoked.LastCommentSequence					 = CustomerOrderLineRel.LastCommentSequence
								invoked.GlobalLineType						 = CustomerOrderLineRel.GlobalLineType
								invoked.HSNSACCode							 = CustomerOrderLineRel.HSNSACCode
								invoked.UNSPSCCode                           = CustomerOrderLineRel.UNSPSCCode
								if (each.IsHSNSACCodeEnabled)
									initialize invoked.TaxCode

						if (CustomerOrderLineUOMRel exists)
							invoke Create BillingInvoiceLineMultipleUOM
								invoked.Company							 = LocalSaveInvoice.Company
								invoked.BillingInvoice.InvoicePrefix	 = LocalSaveInvoice.BillingInvoice.InvoicePrefix
								invoked.BillingInvoice.InvoiceNumber	 = LocalSaveInvoice.BillingInvoice.InvoiceNumber
								invoked.BillingInvoiceLineMultipleUOM	 = CustomerOrderLineUOMRel.CustomerOrderLine
								I2 = 1
								while (I2 <= 10)
									invoked.SellingPriceByMultipleUOM.SellingPriceMultipleUOM[I2].UnitOfMeasure	 = CustomerOrderLineUOMRel.Uoms.UnitOfMeasure[I2]
									invoked.SellingPriceByMultipleUOM.SellingPriceMultipleUOM[I2].UOMMultiplier	 = CustomerOrderLineUOMRel.UomMults.UomMult[I2]
									invoked.SellingPriceByMultipleUOM.SellingPriceMultipleUOM[I2].SellPrice		 = CustomerOrderLineUOMRel.SellPriceFls.SellPriceFl[I2]
									if (!LocalSaveInvoice.BillingInvoiceType.Credit)
										invoked.SellingPriceByMultipleUOM.SellingPriceMultipleUOM[I2].SellingPriceQuantity = CustomerOrderLineUOMRel.SprQtys.SprQty[I2] * -1

									I2 +=1
									invoked.SellingPriceByMultipleUOM.SellingPriceMultipleUOM[I2].UnitPrice		 = CustomerOrderLineUOMRel.UnitPrices.UnitPrice[I2]

						if (CustomerOrderAddOnChargeRel exists)
							for each CustomerOrderAddOnChargeRel
								invoke Create BillingInvoiceAddOnCharge
									fill in fields from each
										except invoked.UnitCost
										except invoked.Cost
										except invoked.PricePercent
										except invoked.CostPercent
										except invoked.EnteredPrice.TransactionAmount
										except invoked.EnteredUnitPrice.TransactionAmount

									if (each.CustomerOrderLine entered)
										invoked.BillingInvoiceLine								= each.CustomerOrderLine

									if (each.ChargeType.FlatAmount)
										invoked.Cost											= each.UnitCost
										invoked.EnteredPrice.TransactionAmount					= each.UnitPrice
									else
									if (each.ChargeType.Percentage)
										invoked.PricePercent									= each.PricePercent
										invoked.CostPercent										= each.CostPercent
									else
										invoked.EnteredUnitPrice.TransactionAmount				= each.UnitPrice
										invoked.UnitCost										= each.UnitCost

									invoked.BillingInvoice.InvoicePrefix = LocalSaveInvoice.BillingInvoice.InvoicePrefix
									invoked.BillingInvoice.InvoiceNumber = LocalSaveInvoice.BillingInvoice.InvoiceNumber



				Update is an Update Action
					Action Rules
						if (BillingInvoiceType.Credit)
							BypassNegativeRateEdit = true
						ActionType = ActionType.UpdateType
						LocalAddOnCopyCreated	= false

						if (InvoiceTypeCode changed
						and InvoiceTypeCode != old InvoiceTypeCode)
							confirmation required
								"ChangingInvoiceTypeCodeMayChangePaymentTerms;Proceed?"

							if (InvoiceTypeCode entered)
								if (CustomerInvoiceTypeCodeRel.TermsCode entered
								and TermsCode not changed)
									TermsCode	= CustomerInvoiceTypeCodeRel.TermsCode
								else
								if (InvoiceTypeCode.TermsCode entered
								and TermsCode not changed)
									TermsCode	= InvoiceTypeCode.TermsCode

						if (BillingInvoiceSource.Shipment
						and IsSystemInvoices)
							confirmation required
								"CannotChangeSalesRepresentativeInformationOnSystemGeneratedInvoice;Proceed?"
					Exit Rules
						if (CompanyCustomerInvoiceTypeCodesRel exists)
							constraint (AnyCustomerInvoiceTypeCodeRel exists)
								"InvoiceTypeCodeFoundInCustomer'sInvoiceTypeCodes"

						include GetBaseAmount
						include CalculateTaxableAmountAndSalesTax
						invoke UpdateDiscountSpread			
						if (IsCalcFreightTaxForTaxOptionTAndX)
							invoke UpdateTaxTotal



				Delete is a Delete Action



				ReleaseBatch is an Instance Action
					completion message is "<DerivedReleasedCompletionMessage>"
					valid when (not IsProcessInvoiceBods)
					Action Rules
						invoke Release BatchNumber



				ReleaseBatchAndBypassPrint is an Instance Action
					valid when (not IsProcessInvoiceBods)
					Action Rules
						constraint (not DerivedRunInvoicePrintEdit)
							"CannotUseThisReleaseOption.InvoiceEditMustBeRun"
						constraint (not IsInvoiceAmountExceedingCreditLimit)
							"CreditLimitExceeded;MustPerformReleaseOrReleaseBatchAction"
						
						if (FreightCharge.TransactionAmount entered)
							if (BillingInvoiceType.Credit)
								constraint (FreightCharge.TransactionAmount <= 0)
									"FreightChargeCannotBePositive"
				
							else
								constraint (FreightCharge.TransactionAmount >= 0)
									"FreightChargeCannotBeNegative"	
									
						invoke ReleaseAndBypassPrint BatchNumber



				ReleaseAndStatusToPrinted is an Instance Action
					restricted
					Action Rules
						if (!IsInvoiceAmountExceedingCreditLimit)
							LocalReleasePrinted = true
							invoke Release


				TriggerSyncInvoiceBOD is an Instance Action				
					default label is "Release"
					completion message is "SyncInvoiceBODTriggered"
					valid when (IsProcessInvoiceBodsAndLocally)
					Action Rules
						if(IsProcessInvoiceBodsAndLocally)
							if(AllowFrontEndSplit)
								invoke FrontEndSplitSalesAccounts
							include ValidateInvoice
							constraint (!InvoiceHold.SentForApproval)
								"CannotRelease;SyncInvoiceBODTriggered"
							
							InvoiceHold = "S"
							if(GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger) 
								trigger "BillingInvoiceService" PA service
									resume on error
									title is "EG:<Company.CustomerBusinessGroup.FinanceEnterpriseGroup>CO:<Company>INV:<BillingInvoice>"
									Criteria
										Company.CustomerBusinessGroup.FinanceEnterpriseGroup
										Company
										Company.GeneralLedgerCompany.AccountingEntity
									Variables
										include persistent fields from this instance



											
				
				ReleaseSyncInvoice is an Instance Action				
					restricted
					Entrance Rules
						InvoiceHold = "A"
					Action Rules
						include ReleaseInvoice
						
					Exit Rules
						include ReleaseBillingInvoiceLineTax
						
				Release is an Instance Action
					valid when (not IsProcessInvoiceBods)
					completion message is "<DerivedReleasedCompletionMessage>"
					Action Rules
						if(AllowFrontEndSplit)
							invoke FrontEndSplitSalesAccounts
						if (IsInvoiceAmountExceedingCreditLimit)
							if (OrderEntryCustomerRel.CreditLimitHoldCode entered)
								HoldCode = OrderEntryCustomerRel.CreditLimitHoldCode
								LocalLimit = true
						include ValidateInvoice
						include ReleaseInvoice

					Exit Rules	
						include ReleaseBillingInvoiceLineTax


				ReleaseAsPrintedFromBatch is an Instance Action
					restricted
					Action Rules
						LocalReleaseAsPrintedFromBatch = true
						invoke Unreleased.Release


				GroupPricing			 is an Instance Action
					Action Rules
						constraint (first BillingInvoiceLineGroupPricingRel exists)
							"NoAmalgamatedPricingLineItemsExistFor<DerivedBillingInvoice>"

						for each BillingInvoiceLineGroupPricingRel
							invoke GroupPricing  each



				RemoveHoldCode is an Instance Action
					valid when (IsHoldCode)
					completion message is "HoldCodeRemoved"
					Action Rules
						constraint (IsHoldCode)
							"RemoveHoldCodeIsNotValid"
						constraint (InvoiceNetAmount >= 0)
							"InvoiceIsNegativeMustDeleteInvoice"
						if (CustomerOrder.CashOnDelivery)
							constraint (CashOnDeliveryPrint)
								"CannotRemoveHoldCodeWhenCODInvoiceNotPrinted"
						initialize HoldCode
						
				UpdateHeaderAmountsFromBatch is an Instance Action
					restricted
					Action Rules
						include GetBaseAmount
						include CalculateTaxableAmountAndSalesTax
						invoke UpdateDiscountSpread	


				FrontEndSplitSalesAccounts	is an Instance Action
					valid when (AllowFrontEndSplit)
					Action Rules
						invoke FrontEndSplitAllLinesSalesAccounts BillingInvoiceLine in foreground
							invoked.PrmFinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.PrmCompany						= Company
							invoked.PrmBillingInvoice				= BillingInvoice

				DeleteFrontEndSplitSalesAccounts is an Instance Action
					valid when(HasFrontEndSplit)
					Action Rules
						invoke DeleteAllLinesFrontEndSplitDistributions BillingInvoiceLine
							invoked.PrmFinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.PrmCompany						= Company
							invoked.PrmBillingInvoice				= BillingInvoice

			Released	is a State
				Delete is a Delete Action
					valid when (not IsDropshipPoInvoice)

			Edited		is a State
				Delete is a Delete Action
					valid when (CreditHoldCheck)

			Printed		is a State

			ARGLUpdated	is a State



	Actions
		ProcessOneSourceForHeader is an Instance Action 
			restricted
			valid when (SingleCallToOneSource)
			Parameters
				PrmReleasePrinted is Boolean
			Entrance Rules
				if (SingleCallToOneSource)
					LocalUniqueID = UniqueID
					if (TaxLineItemsRel exists)
						for each TaxLineItemsRel
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each
			Action Rules
				include CalculateTaxableAmountAndSalesTax
				if (TaxExemptCode.Taxable
				and TaxCode entered
				and FreightCharge.TransactionAmount entered)
					include CreateTaxLineItemAndUserFields
			Exit Rules	
				invoke ProcessOneSourceForLine BillingInvoiceLine
					invoked.PrmCompany				= Company
					invoked.PrmBillingInvoice 		= BillingInvoice
					invoked.PrmReleasePrinted		= PrmReleasePrinted

				if (SingleCallToOneSource
				and BillingInvoiceLineRel not exists
				and AddOnChargesRecordCountRel not exists
				and TaxExemptCode.Taxable
				and TaxCode entered
				and FreightCharge.TransactionAmount entered)
					initialize CalculateTax.UniqueLineNumber
					CalculateTax.DeliveryTerms						= ShipTerm
					CalculateTax.SendMultLineItems					= true
					CalculateTax.UpdateLineItems					= true
					CalculateTax.UniqueIdOfRelatedObject			= UniqueID
					CalculateTax.UserElementLevel					= "L"
					LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax

					invoke UpdateBLTaxAmounts TaxLineItem
						invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.PrmCompany					= Company
						invoked.PrmInvoiceNumber			= BillingInvoice.InvoiceNumber
						invoked.PrmInvoicePrefix			= BillingInvoice.InvoicePrefix
						invoked.PrmReleasePrinted 			= PrmReleasePrinted
						invoked.PrmUniqueIdOfRelatedObject  = BillingInvoice.UniqueID

		ProcessVertexForHeader is an Instance Action 
			restricted
			valid when (SingleCallToVertex)
			Parameters
				PrmReleasePrinted is Boolean
			Entrance Rules
				if (SingleCallToVertex)
					LocalUniqueID = UniqueID
					if (TaxLineItemsRel exists)
						for each TaxLineItemsRel
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each
			Action Rules
				include CalculateTaxableAmountAndSalesTax
				if (TaxExemptCode.Taxable
				and TaxCode entered
				and FreightCharge.TransactionAmount entered)
					include CreateTaxLineItemAndUserFields

			Exit Rules	
				invoke ProcessVertexForLine BillingInvoiceLine
					invoked.PrmCompany				= Company
					invoked.PrmBillingInvoice 		= BillingInvoice
					invoked.PrmReleasePrinted		= PrmReleasePrinted 

				if (SingleCallToVertex
				and BillingInvoiceLineRel not exists
				and AddOnChargesRecordCountRel not exists
				and TaxExemptCode.Taxable
				and TaxCode entered
				and FreightCharge.TransactionAmount entered)
					initialize CalculateTax.UniqueLineNumber
					CalculateTax.POATaxCode							= BillingProcessLevel.TaxCode
					CalculateTax.POAAddress							= BillingProcessLevel.CompanyAddress
					CalculateTax.DeliveryTerms						= ShipTerm
					CalculateTax.SendMultLineItems					= true
					CalculateTax.UpdateLineItems					= true
					CalculateTax.UniqueIdOfRelatedObject			= UniqueID
					CalculateTax.UserElementLevel					= "L"
					CalculateTax.InputReturnVertexTaxIn		        = "D"
					CalculateTax.TaxCode							= TaxCode
					CalculateTax.AppendToJurisFile					= true					
					CalculateTax.JurisdictionResultsKey				= "BL:" + Company + ":" + BillingInvoice + ":" + current timestamp
					LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax

					invoke UpdateBLTaxAmounts TaxLineItem
						invoked.PrmFinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.PrmCompany							= Company
						invoked.PrmInvoiceNumber					= BillingInvoice.InvoiceNumber
						invoked.PrmInvoicePrefix					= BillingInvoice.InvoicePrefix
						invoked.PrmReleasePrinted 					= PrmReleasePrinted
						invoked.PrmUniqueIdOfRelatedObject  		= BillingInvoice.UniqueID

		UpdateTotalFromTaxLineItem is an Instance Action
			restricted
			Parameters
				PrmTaxTotalAmount		is an InternalAmount
			Action Rules
				round PrmTaxTotalAmount to nearest DerivedRoundToDecimals
				TaxTotal.TransactionAmount					 += PrmTaxTotalAmount
				TaxTotal.BaseAmount.ToCurrency				 = Company.Currency
				TaxTotal.BaseAmount.EnteredCurrencyRate		 = CurrencyRate
				TaxTotal.BaseAmount.EnteredCurrencyAmount	 = TaxTotal.BaseAmount.OutputCurrencyAmount

		UpdateTaxTotal is an Instance Action
			restricted
			Action Rules
				if (IsInvoicingAndTaxCalculation)
					initialize TaxTotal
					if (FreightCharge.TransactionAmount entered
					and TaxExemptCode.Taxable
					and TaxCode entered)
						include CalculateTaxCommonInputParams
						CalculateTax.Quantity						=  1
						CalculateTax.Customer						= Customer
						CalculateTax.Function						= CalculateTax.Function.Inquire
						CalculateTax.ShipmentDate					= ShipDate
						CalculateTax.ThirdPartyFunction				= CalculateTax.ThirdPartyFunction.Calculate
						LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
						LocalFreightCharge  						= FreightCharge.TransactionAmount
						if (CalculateTax.TaxTable.TaxTableOutput[1].TaxTerms.Taxafterterms
						and (IsCompanyInvoiceOption
						or  IsProcessLevelInvoiceOption))
							LocalTermsAmount	= LocalFreightCharge
							include	CalculateTermsDiscount
							LocalFreightCharge	-= LocalTermsDiscount

						CalculateTax.Function						= "C"
						CalculateTax.ShipmentDate					= ShipDate
						CalculateTax.TaxableAmount					= LocalFreightCharge
						CalculateTax.TransactionType				= "S"
						CalculateTax.ProductIsExempt				= TaxExemptCode
						CalculateTax.NumberOfDecimals				= CurrencyNumberOfDecimals
						CalculateTax.ThirdPartyFunction				= "I"
						if (LocalTermsDueDate entered)
							CalculateTax.PaymentDate				= LocalTermsDueDate
						else
							CalculateTax.PaymentDate				= InvoiceDate
						CalculateTax.UniqueIdOfRelatedObject		= UniqueID
						LocalCalculateTaxExecuted					= CalculateTax.ExecuteCalculateTax
						constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"
						LocalFreightTax								= CalculateTax.OutputTotalTaxAmount
						round LocalFreightTax to nearest DerivedRoundToDecimals

					TaxTotal.TransactionAmount					 = sum BillingInvoiceLineTaxRel.TaxableCurrencyAmount.TransactionAmount + LocalFreightTax
					TaxTotal.BaseAmount.ToCurrency				 = Company.Currency
					TaxTotal.BaseAmount.EnteredCurrencyRate		 = CurrencyRate
					TaxTotal.BaseAmount.EnteredCurrencyAmount	 = TaxTotal.BaseAmount.OutputCurrencyAmount

		InterfaceImportLine is an Instance Action
			restricted
			Parameters
				PrmBillingInvoiceImportLine	is Numeric size 6
			Action Rules
				LocalBillingInvoiceImportLine = PrmBillingInvoiceImportLine
				invoke InterfaceCreate BillingInvoiceLine
					fill in fields from BillingInvoiceImportLineRel
					invoked.Company							= Company
					invoked.BillingInvoice.InvoiceNumber	= BillingInvoice.InvoiceNumber
					invoked.BillingInvoice.InvoicePrefix	= BillingInvoice.InvoicePrefix
					if (BillingInvoiceImportLineRel.SalesAccount.Project not entered)
						invoked.SalesAccount.Project = BillingInvoiceImportLineRel.ContextBillingInvoiceImport.Project
					invoked.SalesRepresentative2			= BillingInvoiceImportLineRel.Salesman2
					invoked.CommissionRate1					= BillingInvoiceImportLineRel.CommisionRate1
					invoked.CommissionRate2					= BillingInvoiceImportLineRel.CommisionRate2



		UpdateProfromaPrePaymentAmount is an Update Action
			restricted
			bypass field rules
			Local Fields
				LocalPrepayAmount	is an InternationalAmount
			Entrance Rules
				LocalPrepayAmount	= (sum ProformaInvoiceRel.ReceivablePrepaymentRel.ReceivablePayment.TransactionAmount - sum BillingInvoiceCORel.ProformaPrepayAmount)
			Action Rules
				if (InvoiceNetDue < LocalPrepayAmount)
					ProformaPrepayAmount = InvoiceNetDue
				else
					ProformaPrepayAmount = LocalPrepayAmount


		CreateVertexTaxJournalFromBatch is an Instance Action
			restricted
			Action Rules
				if (TaxEntityRel.ThirdParty.VertexOSeries
				and not BillingInvoice.IsTaxEngine
				and not SingleCallToVertex)
					include CalculateTaxCommonInputParams
					CalculateTax.TaxableAmount			= FreightCharge.TransactionAmount
					CalculateTax.ShipmentDate			= ShipDate
					CalculateTax.NumberOfDecimals		= CurrencyNumberOfDecimals
					CalculateTax.Function				= CalculateTax.Function.CalculateTax
					CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
					CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
					CalculateTax.ProductIsExempt		= TaxExemptCode
					CalculateTax.PaymentDate			= LocalTermsDueDate
					CalculateTax.InputReturnVertexTaxIn	= "D"								
					CalculateTax.DontCreateLogFile		= true 
					include LoadVertexGlobalInputFields 
					include VertexFlexibleFields
					CalculateTax.UniqueIdOfRelatedObject	= UniqueID
					LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
					constraint (CalculateTax.OutputErrorNumber not entered)
						"<CalculateTax.OutputErrorMessage>" 
					for each CalculateTax.TaxTable.TaxTableOutput
						if (each.TaxAmount entered)
							include CreateTaxJournal

		NotifyOneSourceFromBatch is an Instance Action 
			restricted
			Action Rules
				if (IsOneSourceTax
				and not SingleCallToOneSource)
					include CalculateTaxCommonInputParams
					CalculateTax.TaxableAmount			= FreightCharge.TransactionAmount
					CalculateTax.ShipmentDate			= ShipDate
					CalculateTax.NumberOfDecimals		= CurrencyNumberOfDecimals
					CalculateTax.Function				= CalculateTax.Function.CalculateTax
					CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
					CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
					CalculateTax.ProductIsExempt		= TaxExemptCode
					CalculateTax.PaymentDate			= LocalTermsDueDate
					CalculateTax.InputReturnVertexTaxIn	= "D"								
					CalculateTax.DontCreateLogFile		= true 
					include LoadOneSourceInputFields
					CalculateTax.UniqueIdOfRelatedObject	= UniqueID
					LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
					constraint (CalculateTax.OutputErrorNumber not entered)
						"<CalculateTax.OutputErrorMessage>" 
					for each CalculateTax.TaxTable.TaxTableOutput
						if (each.TaxAmount entered)
							include CreateTaxJournal

		NotifyThirdPartyTaxSystemFromBatchPerInvoice is an Instance Action
			restricted
			Action Rules
				if (TaxEntityUsesVertex)
					invoke NotifyVertexFromBatchPerInvoice
					invoke RemoveTaxLineItemsAfterPrintingInvoice
				else
				if (TaxEntityUsesSabrix)
					invoke NotifyOneSourceFromBatchPerInvoice
					invoke RemoveTaxLineItemsAfterPrintingInvoice
		
		NotifyOneSourceFromBatchPerInvoice is an Instance Action 
			restricted
			Action Rules
				if (SingleCallToOneSource)
					LocalUniqueID = UniqueID
					if (TaxLineItemsRel exists)
						initialize ProcessTaxHistory		
						ProcessTaxHistory.SystemCode					= "BL"
						ProcessTaxHistory.TransactionType				= "S"   
						ProcessTaxHistory.TransactionSource				= "O"		
						if (BillingInvoiceType.Credit)	
							ProcessTaxHistory.InvoicedOrCreditMemo		= "C"
						else
							ProcessTaxHistory.InvoicedOrCreditMemo		= "I"		
						ProcessTaxHistory.InvoiceCompany            	= Company
						ProcessTaxHistory.TaxEntity						= Company.AccountingEntity	 
						ProcessTaxHistory.ProcessLevel					= BillingProcessLevel
						ProcessTaxHistory.Customer						= Customer
						ProcessTaxHistory.TaxID							= Customer.TaxID
						ProcessTaxHistory.Location						= Location
						ProcessTaxHistory.Invoice						= DerivedInvoice
						if (TaxEntityRel.UseTaxCodeAccounts)
							ProcessTaxHistory.AccruedOrInvoiced 		= EntityTaxCodeRel.AccruedOrInvoiced
						else
							ProcessTaxHistory.AccruedOrInvoiced 		= TaxEntityRel.AccruedOrInvoiced
						ProcessTaxHistory.VendorOrCustomerName			= CompanyCustomer.Customer.Name			
						ProcessTaxHistory.TaxCode						= TaxCode
						if (TaxEntityRel.ThirdParty.Sabrix)
							ProcessTaxHistory.ToAddress					= BillingInvoice.CustomerShipTo.ShipToAddress
						else
							if (BillingInvoice.IsCustomerOrder)
								ProcessTaxHistory.ToAddress				= BillingInvoice.CustomerOrder.BillPostalAddress
							else
							if (BillingInvoice.IsBillToEnterd)
								ProcessTaxHistory.ToAddress 			= BillingInvoice.BillTo.PostalAddress
							else
								ProcessTaxHistory.ToAddress				= BillingInvoice.Customer.PostalAddress	
						ProcessTaxHistory.FromTaxCode					= Location.TaxCode
						ProcessTaxHistory.FromAddress					= Location.PostalAddress
						ProcessTaxHistory.POATaxCode					= BillingProcessLevel.TaxCode				
						ProcessTaxHistory.DeliveryTerms					= BillingInvoice.ShipTerm
						ProcessTaxHistory.PointOfTitleTransfer			= BillingInvoice.PointOfTitleTransfer

						ProcessTaxHistory.InvoiceDate					= InvoiceDate
						ProcessTaxHistory.TaxPointDate					= TaxPointDate	

						ProcessTaxHistory.TransactionTaxAmount			= TaxTotal.TransactionAmount
						ProcessTaxHistory.TransactionTaxableAmount		= TaxableTotal 
						ProcessTaxHistory.TransactionInvoiceAmount		= InvoiceTotal	
						ProcessTaxHistory.TransactionNumberOfDecimals	= CurrencyNumberOfDecimals	


						ProcessTaxHistory.VATRegistrationCountry      	= TaxEntityRel.VATRegistrationCountry 			 
						ProcessTaxHistory.VATRegistrationNumber		 	= TaxEntityRel.VATRegistrationNumber			 
						ProcessTaxHistory.FromVATRegistrationCountry   	= CompanyCustomer.VATRegistrationCountry	 
						ProcessTaxHistory.FromVATRegistrationNumber		= CompanyCustomer.VATRegistrationNumber
						ProcessTaxHistory.DefaultFilingCurrency 		= TaxEntityRel.DefaultFilingCurrency	
						ProcessTaxHistory.BaseCurrency 					= Company.Currency	
						ProcessTaxHistory.TransactionCurrency			= BillingInvoice.Currency
						ProcessTaxHistory.CurrencyRate					= BillingInvoice.CurrencyRate

						ProcessTaxHistory.UniqueIdOfRelatedObject 		= UniqueID
						ProcessTaxHistory.RelatedObjectReference    	= reference to this instance	
						ProcessTaxHistory.TaxTransFunction				= "A"
						ProcessTaxHistory.SendMultLineItems				= true
						ProcessTaxHistory.UserElementLevel				= "L"
						
						ProcessTaxHistory.HistoryType					= "N"
						LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed
						if (!LocalTaxHistoryProcessed = "Y")
							constraint (ProcessTaxHistory.OutputErrorNumber not entered) 
								"<ProcessTaxHistory.OutputErrorMessage>"

						for each TaxLineItemsRel
							ProcessTaxHistory.InputTaxLineItemSequence	= each.TaxLineItem.Sequence
							if (TaxEntityRel.OneSourceUseARCodeForTaxAccount
							and each.ReturnedErpTaxCode entered)
								LocalReceivableGeneralLedgerCode 		= each.ReturnedErpTaxCode
								constraint (LocalReceivableGeneralLedgerCodeRel exists)
									"Receivable_\Global_\Ledger_\Code<LocalReceivableGeneralLedgerCode>DoesNotExistFor_\Company<Company>"
								ProcessTaxHistory.TaxTransactionAccount	= LocalReceivableGeneralLedgerCodeRel.DistributionAccount
							else
								ProcessTaxHistory.TaxTransactionAccount	= each.first TaxDetailOutRel.TaxOutputAccount
							LocalTaxHistoryProcessed					= ProcessTaxHistory.CreateTaxTransactionForInputTaxLineItem

		NotifyVertexFromBatchPerInvoice is an Instance Action 
			restricted
			Action Rules
				if (SingleCallToVertex)
					LocalUniqueID = UniqueID
					if (TaxLineItemsRel exists)
						initialize ProcessTaxHistory		
						ProcessTaxHistory.SystemCode					= "BL"
						ProcessTaxHistory.TransactionType				= "S"   
						ProcessTaxHistory.TransactionSource				= "O"			
						ProcessTaxHistory.InvoiceCompany            	= Company
						ProcessTaxHistory.TaxEntity						= Company.AccountingEntity	 
						ProcessTaxHistory.ProcessLevel					= BillingProcessLevel
						ProcessTaxHistory.Customer						= Customer
						ProcessTaxHistory.TaxID							= Customer.TaxID
						ProcessTaxHistory.Location						= Location
						ProcessTaxHistory.Invoice						= DerivedInvoice
						if (TaxEntityRel.UseTaxCodeAccounts)
							ProcessTaxHistory.AccruedOrInvoiced 		= EntityTaxCodeRel.AccruedOrInvoiced
						else
							ProcessTaxHistory.AccruedOrInvoiced 		= TaxEntityRel.AccruedOrInvoiced
						ProcessTaxHistory.VendorOrCustomerName			= CompanyCustomer.Customer.Name			
						ProcessTaxHistory.TaxCode						= TaxCode
						if (BillingInvoice.BillingInvoiceType.Credit)
							ProcessTaxHistory.DocumentType				= "CreditMemo"
						else
							ProcessTaxHistory.DocumentType				= "Invoice"
						if (BillingInvoice.CustomerShipTo entered)
							ProcessTaxHistory.ToAddress					= BillingInvoice.CustomerShipTo.ShipToAddress
						else
						if (BillingInvoice.Customer entered)
							ProcessTaxHistory.ToAddress					= BillingInvoice.Customer.PostalAddress
						else
						if (BillingInvoice.BillTo entered)
							ProcessTaxHistory.ToAddress					= BillingInvoice.BillTo.PostalAddress
						ProcessTaxHistory.FromTaxCode					= Location.TaxCode
						ProcessTaxHistory.FromAddress					= Location.PostalAddress
						ProcessTaxHistory.POATaxCode					= BillingProcessLevel.TaxCode
						ProcessTaxHistory.POAAddress					= BillingProcessLevel.CompanyAddress
						ProcessTaxHistory.DeliveryTerms					= BillingInvoice.ShipTerm
						ProcessTaxHistory.PointOfTitleTransfer			= BillingInvoice.PointOfTitleTransfer

						ProcessTaxHistory.InvoiceDate					= InvoiceDate
						ProcessTaxHistory.TaxPointDate					= TaxPointDate	


						ProcessTaxHistory.TransactionTaxAmount			= TaxTotal.TransactionAmount
						ProcessTaxHistory.TransactionTaxableAmount		= TaxableTotal 
						ProcessTaxHistory.TransactionInvoiceAmount		= InvoiceTotal	
						ProcessTaxHistory.TransactionNumberOfDecimals	= CurrencyNumberOfDecimals	


						ProcessTaxHistory.VATRegistrationCountry      	= TaxEntityRel.VATRegistrationCountry 			 
						ProcessTaxHistory.VATRegistrationNumber		 	= TaxEntityRel.VATRegistrationNumber			 
						ProcessTaxHistory.FromVATRegistrationCountry   	= CompanyCustomer.VATRegistrationCountry	 
						ProcessTaxHistory.FromVATRegistrationNumber		= CompanyCustomer.VATRegistrationNumber
						ProcessTaxHistory.DefaultFilingCurrency 		= TaxEntityRel.DefaultFilingCurrency	
						ProcessTaxHistory.BaseCurrency 					= Company.Currency	
						ProcessTaxHistory.TransactionCurrency			= BillingInvoice.Currency
						ProcessTaxHistory.CurrencyRate					= BillingInvoice.CurrencyRate

						ProcessTaxHistory.UniqueIdOfRelatedObject 		= UniqueID
						ProcessTaxHistory.RelatedObjectReference    	= reference to this instance	
						ProcessTaxHistory.TaxTransFunction				= "A"
						ProcessTaxHistory.SendMultLineItems				= true
						ProcessTaxHistory.UserElementLevel				= "L"
						if (IsHSNSACCodeEnabled)
							ProcessTaxHistory.CommodityCodeType			= "HSN"
							ProcessTaxHistory.CommodityCode				= FreightCode.HSNSACCode
						else
							ProcessTaxHistory.CommodityCodeType			= "UNSPSC"
							ProcessTaxHistory.CommodityCode				= FreightCode.UNSPSCCode.UNSPSCCodeDisplay

						ProcessTaxHistory.HistoryType					= "N"
						LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed
						if (!LocalTaxHistoryProcessed = "Y")
							constraint (ProcessTaxHistory.OutputErrorNumber not entered) 
								"<ProcessTaxHistory.OutputErrorMessage>"

		RemoveTaxLineItemsAfterPrintingInvoice is an Instance Action
			restricted
			Action Rules
				if (TaxEntityUsesSabrix
				or  SingleCallToVertex)
					LocalUniqueID = UniqueID
					for each TaxLineItemsRel 
						invoke Delete each.LineItemUserFieldsRel
						invoke Delete each

					for each BillingInvoiceLineRel
						LocalUniqueID = each.UniqueID
						for each TaxLineItemsRel 
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each

					for each BillingInvoiceAddOnCharge set
						LocalUniqueID = each.UniqueID
						for each TaxLineItemsRel 
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each

		PrintInvoice is an Instance Action
			default label is "GenerateInvoice"

			Action Rules
				if (Company.UseIDM)
					constraint (HasIDMDocumentTemplate)
						"CannotGenerateInvoiceDocument,NoIDMTemplateDefinedInCompany,ProcessLevelOrInvoiceType"
				else
					constraint (HasDocumentTemplate)
						"CannotGenerateInvoiceDocument,NoDocumentTemplateDefinedInCompany,ProcessLevelOrInvoiceType"

			Exit Rules
				if (Company.UseIDM)
					invoke CreateAndSendBillingInvoiceDocToIDM
						invoked.PrmIDMPrinter = ""
						invoked.PrmFromBatchProgram	= false

				else
					if (BillingInvoiceCommentsForPrintRel not exists)
						invoke Create BillingInvoiceComments
							fill in fields from this instance
							invoked.CommentText			= PrintedInvoiceMessage

					invoke Create BillingInvoiceCommentAttachment
						fill in fields from this instance
						invoked.BillingInvoiceComments	= first BillingInvoiceCommentsForPrintRel.BillingInvoiceComments
						invoked.Name					= PrintedInvoiceName
						if (Status.Unreleased)
							invoked.Type				= "D"
						else
							invoked.Type				= "R"
						invoked.Description				= PrintedInvoiceName

						if (BillingInvoiceType.BillingInvoiceDocument entered)
							invoked.Attachment.File		= BillingInvoiceType.BillingInvoiceDocument.BillingInvoiceDocumentTemplate.File document
							invoked.Attachment.Title	= PrintedInvoiceName
							invoked.Attachment.MimeType	= BillingInvoiceType.BillingInvoiceDocument.BillingInvoiceDocumentTemplate.MimeType
						else
						if (BillingProcessLevel.BillingInvoiceDocument entered)
							invoked.Attachment.File		= BillingProcessLevel.BillingInvoiceDocument.BillingInvoiceDocumentTemplate.File document
							invoked.Attachment.Title	= PrintedInvoiceName
							invoked.Attachment.MimeType	= BillingProcessLevel.BillingInvoiceDocument.BillingInvoiceDocumentTemplate.MimeType
						else
						if (Company.BillingInvoiceDocument entered)
							invoked.Attachment.File		= Company.BillingInvoiceDocument.BillingInvoiceDocumentTemplate.File document
							invoked.Attachment.Title	= PrintedInvoiceName
							invoked.Attachment.MimeType	= Company.BillingInvoiceDocument.BillingInvoiceDocumentTemplate.MimeType



		GeneratePrintedBillingInvoiceRegisterIDM is a Set Action
			restricted
			Parameters
				BillingCompany
				ProcessLevel
				InvoicePrefix
				FromInvoiceNumber		is a InvoiceNumber
				ToInvoiceNumber			is a InvoiceNumber
				IDMPrinter
				Generate				is Boolean
				BillingCustomer			is a Customer
				BypassEmail				is Boolean
				BillingInvoiceOutputHeader
				PrmBackgroundGroup 		is AlphaUpper up to 200
				PrmPrintInvoicesPerCustomer is Boolean
				PrmIDMPrinterSetting    is an IDMPrinterSettings

			Local Fields
				LocalAsyncID			is an AsyncActionRequest
				LocalBatchID			is an IDMPID

			Accumulators
				NumberOfRecords		

			Instance Selection
				where (Company = BillingCompany
				and	(Status.Printed  or Status.ARGLUpdated)
				and	(ProcessLevel not entered or BillingProcessLevel = ProcessLevel)
				and (BillingCustomer not entered or Customer = BillingCustomer)
				and	(InvoicePrefix not entered or BillingInvoice.InvoicePrefix = InvoicePrefix)
				and	(FromInvoiceNumber not entered or BillingInvoice.InvoiceNumber >= FromInvoiceNumber)
				and	(ToInvoiceNumber not entered or BillingInvoice.InvoiceNumber   <= ToInvoiceNumber))

			Action Rules
				Set Rules
					Entrance Rules
						LocalAsyncID = current async action request id
						LocalBatchID = current timestamp
						initialize NumberOfRecords
					Exit Rules
						LocalBackgroundGroup = PrmBackgroundGroup
						invoke GetStatusPrintedBillingInvoiceRegisterIDM in background group (LocalBackgroundGroup)
							run after LocalAsyncID
							invoked.BillingCompany    = BillingCompany
							invoked.ProcessLevel      = ProcessLevel
							invoked.InvoicePrefix     = InvoicePrefix
							invoked.FromInvoiceNumber = FromInvoiceNumber	
							invoked.ToInvoiceNumber	  = ToInvoiceNumber		
							invoked.IDMPrinter 		  = IDMPrinter
							invoked.Generate 		  = Generate				
							invoked.BillingCustomer	  = BillingCustomer		
							invoked.BypassEmail		  = BypassEmail		
							invoked.BillingInvoiceOutputHeader = BillingInvoiceOutputHeader
							invoked.PrmBatchID		  = LocalBatchID
							invoked.PrmPrintInvoicesPerCustomer = PrmPrintInvoicesPerCustomer
							invoked.PrmInstanceCount  		    = NumberOfRecords
							invoked.PrmIDMPrinterSetting        = PrmIDMPrinterSetting
					
				Instance Rules
					if (Generate)
						NumberOfRecords += 1
						invoke CreateAndSendBillingInvoiceDocToIDM
							invoked.PrmIDMPrinter			= IDMPrinter
							invoked.PrmFromBatchProgram		= true
							invoked.PrmBypassEmail			= BypassEmail
							invoked.PrmBillingInvoiceOutputHeader = BillingInvoiceOutputHeader
							invoked.PrmBatchID				= LocalBatchID
							invoked.PrmBypassPrint          = PrmPrintInvoicesPerCustomer


		GetStatusPrintedBillingInvoiceRegisterIDM is a Set Action
			restricted
			Parameters
				BillingCompany
				ProcessLevel
				InvoicePrefix
				FromInvoiceNumber		is a InvoiceNumber
				ToInvoiceNumber			is a InvoiceNumber
				IDMPrinter
				Generate				is Boolean
				BillingCustomer			is a Customer
				BypassEmail				is Boolean
				BillingInvoiceOutputHeader
				PrmBatchID				is an IDMPID
				PrmPrintInvoicesPerCustomer is Boolean
				PrmInstanceCount		is Numeric 6
				PrmIDMPrinterSetting    is an IDMPrinterSettings

			Local Fields
				LocalAsyncID			is an AsyncActionRequest
				InvoiceIDMUniqueIDs		is an IDMUniqueIDOccurs
				InvoiceNumbers			is Text
				Counter					is Numeric 6
			
			Accumulators
				NumberOfRecords

			Instance Selection
				where (Company = BillingCompany
				and	(Status.Printed  or Status.ARGLUpdated)
				and	(ProcessLevel not entered or BillingProcessLevel = ProcessLevel)
				and (BillingCustomer not entered or Customer = BillingCustomer)
				and	(InvoicePrefix not entered or BillingInvoice.InvoicePrefix = InvoicePrefix)
				and	(FromInvoiceNumber not entered or BillingInvoice.InvoiceNumber >= FromInvoiceNumber)
				and	(ToInvoiceNumber not entered or BillingInvoice.InvoiceNumber   <= ToInvoiceNumber)
				and  IDMJob entered)
			Action Rules
				Set Rules
					Entrance Rules
						initialize Counter
						initialize NumberOfRecords
						initialize InvoiceNumbers
						InvoiceNumbers = "Invoice Number(s): "						
						if (not BypassEmail)
							LocalAsyncID = current async action request id
					Exit Rules
						if (not BypassEmail)
							invoke AssembleAndEmailBillingInvoiceAttachmentToIDM in background
								run after LocalAsyncID
								invoked.PrmBillingCompany			  = BillingCompany
								invoked.PrmProcessLevel				  = ProcessLevel
								invoked.PrmBillingCustomer			  = BillingCustomer
								invoked.PrmBatchID					  = PrmBatchID
				Instance Rules
					invoke GetStatus IDMJob
						invoked.PrmFromGenerateDocument = true
					
					if (IDMJob.MDSID entered)
						IDMUniqueID = IDMJob.MDSID
						
					if (PrmPrintInvoicesPerCustomer
					and CompanyCustomer.PrintBillingInvoice
					and IDMPrinter entered)
						Counter += 1
						NumberOfRecords += 1
						InvoiceIDMUniqueIDs.IDMPID[Counter] = IDMUniqueID
						InvoiceNumbers += ConditionalInvoiceNumber

						if (NumberOfRecords = PrmInstanceCount
						or (config.IDM_BILLINGINVOICE_PRINT_LIMIT != blank 
						and Counter = config.IDM_BILLINGINVOICE_PRINT_LIMIT)
						or (config.IDM_BILLINGINVOICE_PRINT_LIMIT = blank
						and Counter = 50))
							LocalPrintedInvoices 	 = Counter
							LocalInvoiceIDMUniqueIDs = InvoiceIDMUniqueIDs
							LocalInvoiceNumbers      = InvoiceNumbers
							LocalIDMPrinter			 = IDMPrinter
							LocalIDMPrinterSetting   = PrmIDMPrinterSetting
							LocalDocumentType 		 = "FSM_BillingInvoice"

							include BatchIDMInvoicePrint	

							initialize Counter
							initialize InvoiceNumbers
							InvoiceNumbers = "Invoice Number(s): "						
						else
							InvoiceNumbers += ", "

		GenerateEditedBillingInvoiceRegisterIDM	is a Set Action
			restricted
			Parameters
				BillingCompany
				ProcessLevel
				CutOffDate				is Date
				FromInvoiceNumber		is a InvoiceNumber
				ToInvoiceNumber			is a InvoiceNumber
				InvoiceIsCOD			is Boolean
				PrintInvoicesOnly		is Boolean
				PrintCreditMemosOnly	is Boolean
				IDMPrinter
				Generate				is Boolean
				BillingCustomer			is a Customer	
				BypassEmail				is Boolean
				BillingInvoiceOutputHeader
				PrmBackgroundGroup 		is AlphaUpper up to 200
				PrmPrintInvoicesPerCustomer is Boolean
				PrmIDMPrinterSetting    is an IDMPrinterSettings

			Local Fields
				LocalAsyncID			is an AsyncActionRequest
				LocalBatchID			is an IDMPID

			Accumulators
				NumberOfRecords			

			Instance Selection
				where (Company	= BillingCompany
				and	Status.Edited
				and	HoldCode not entered
				and	(ProcessLevel not entered or BillingProcessLevel = ProcessLevel)
				and (BillingCustomer not entered or Customer = BillingCustomer)
				and	(CutOffDate not entered or InvoiceDate <= CutOffDate)
				and	(not InvoiceIsCOD or CustomerOrder.CashOnDelivery = InvoiceIsCOD)
				and	(not PrintInvoicesOnly or not BillingInvoice.BillingInvoiceType.Credit)
				and	(not PrintCreditMemosOnly or BillingInvoice.BillingInvoiceType.Credit))

			Action Rules
				Set Rules			
					Entrance Rules
						LocalAsyncID = current async action request id
						LocalBatchID = current timestamp
						initialize NumberOfRecords
					Exit Rules
						LocalBackgroundGroup = PrmBackgroundGroup
						invoke GetStatusEditedBillingInvoiceRegisterIDM in background group (LocalBackgroundGroup)
							run after LocalAsyncID
							invoked.BillingCompany		 = BillingCompany
							invoked.ProcessLevel		 = ProcessLevel
							invoked.CutOffDate			 = CutOffDate				
							invoked.FromInvoiceNumber	 = FromInvoiceNumber		
							invoked.ToInvoiceNumber		 = ToInvoiceNumber		
							invoked.InvoiceIsCOD		 = InvoiceIsCOD		
							invoked.PrintInvoicesOnly	 = PrintInvoicesOnly	
							invoked.PrintCreditMemosOnly = PrintCreditMemosOnly	
							invoked.IDMPrinter			 = IDMPrinter
							invoked.Generate			 = Generate			
							invoked.BillingCustomer		 = BillingCustomer				
							invoked.BypassEmail			 = BypassEmail			
							invoked.BillingInvoiceOutputHeader = BillingInvoiceOutputHeader
							invoked.PrmBatchID			 = LocalBatchID
							invoked.PrmPrintInvoicesPerCustomer = PrmPrintInvoicesPerCustomer
							invoked.PrmInstanceCount	 = NumberOfRecords
							invoked.PrmIDMPrinterSetting = PrmIDMPrinterSetting

				Instance Rules
					if (Generate)
						NumberOfRecords += 1
						invoke CreateAndSendBillingInvoiceDocToIDM
							invoked.PrmIDMPrinter			= IDMPrinter
							invoked.PrmFromBatchProgram		= true
							invoked.PrmBypassEmail			= BypassEmail
							invoked.PrmBillingInvoiceOutputHeader = BillingInvoiceOutputHeader      
							invoked.PrmBatchID				= LocalBatchID
							invoked.PrmBypassPrint          = PrmPrintInvoicesPerCustomer


		GetStatusEditedBillingInvoiceRegisterIDM is a Set Action
			restricted
			Parameters
				BillingCompany
				ProcessLevel
				CutOffDate				is Date
				FromInvoiceNumber		is a InvoiceNumber
				ToInvoiceNumber			is a InvoiceNumber
				InvoiceIsCOD			is Boolean
				PrintInvoicesOnly		is Boolean
				PrintCreditMemosOnly	is Boolean
				IDMPrinter
				Generate				is Boolean
				BillingCustomer			is a Customer	
				BypassEmail				is Boolean
				BillingInvoiceOutputHeader
				PrmBatchID				is an IDMPID
				PrmPrintInvoicesPerCustomer is Boolean
				PrmInstanceCount		is Numeric 6
				PrmIDMPrinterSetting    is an IDMPrinterSettings

			Local Fields
				LocalAsyncID			is an AsyncActionRequest
				InvoiceIDMUniqueIDs		is an IDMUniqueIDOccurs
				InvoiceNumbers			is Text
				Counter					is Numeric 6
			
			Accumulators
				NumberOfRecords

			Instance Selection
				where (Company	= BillingCompany
				and	Status.Edited
				and	HoldCode not entered
				and	(ProcessLevel not entered or BillingProcessLevel = ProcessLevel)
				and (BillingCustomer not entered or Customer = BillingCustomer)
				and	(CutOffDate not entered or InvoiceDate <= CutOffDate)
				and	(not InvoiceIsCOD or CustomerOrder.CashOnDelivery = InvoiceIsCOD)
				and	(not PrintInvoicesOnly or not BillingInvoice.BillingInvoiceType.Credit)
				and	(not PrintCreditMemosOnly or BillingInvoice.BillingInvoiceType.Credit)
				and  IDMJob entered)
				
			Action Rules
				Set Rules
					Entrance Rules
						initialize Counter
						initialize NumberOfRecords
						initialize InvoiceNumbers
						InvoiceNumbers = "Invoice Number(s): "
						if (not BypassEmail)
							LocalAsyncID = current async action request id
					
					Exit Rules
						if (not BypassEmail)
							invoke AssembleAndEmailBillingInvoiceAttachmentToIDM in background
								run after LocalAsyncID
								invoked.PrmBillingCompany			= BillingCompany
								invoked.PrmProcessLevel				= ProcessLevel
								invoked.PrmBillingCustomer			= BillingCustomer
								invoked.PrmBatchID					= PrmBatchID
				Instance Rules
					invoke GetStatus IDMJob
						invoked.PrmFromGenerateDocument = true
						
					if (IDMJob.MDSID entered)						
						IDMUniqueID = IDMJob.MDSID	
					
					if (PrmPrintInvoicesPerCustomer
					and	CompanyCustomer.PrintBillingInvoice
					and IDMPrinter entered)
						Counter += 1
						NumberOfRecords += 1
						InvoiceIDMUniqueIDs.IDMPID[Counter] = IDMUniqueID
						InvoiceNumbers += ConditionalInvoiceNumber

						if (NumberOfRecords = PrmInstanceCount
						or (config.IDM_BILLINGINVOICE_PRINT_LIMIT != blank
						and Counter = config.IDM_BILLINGINVOICE_PRINT_LIMIT)
						or (config.IDM_BILLINGINVOICE_PRINT_LIMIT = blank
						and Counter = 50))
							LocalPrintedInvoices 	 = Counter
							LocalInvoiceIDMUniqueIDs = InvoiceIDMUniqueIDs
							LocalInvoiceNumbers      = InvoiceNumbers
							LocalIDMPrinter			 = IDMPrinter
							LocalIDMPrinterSetting   = PrmIDMPrinterSetting
							LocalDocumentType 		 = "FSM_BillingInvoice"

							include BatchIDMInvoicePrint	

							initialize Counter
							initialize InvoiceNumbers
							InvoiceNumbers = "Invoice Number(s): "						
						else
							InvoiceNumbers += ", "

					Status = Status.Printed

		AssembleAndEmailBillingInvoiceAttachmentToIDM is a Set Action
			restricted
			Parameters
				PrmBillingCompany		   		is a BillingCompany
				PrmBatchID				   		is a IDMPID
				PrmProcessLevel					is a ProcessLevel
				PrmBillingCustomer				is a Customer
				PrmBillingInvoiceOutputHeader	is a BillingInvoiceOutputHeader
				
			Local Fields
				LocalActor		is an Actor
				LocalAsyncID	is an AsyncActionRequest
				IDMJobView		is an IDMJob view

			Instance Selection
				where 	(Company = PrmBillingCompany
					and	(PrmProcessLevel not entered or BillingProcessLevel = PrmProcessLevel)
					and (PrmBillingCustomer not entered or Customer = PrmBillingCustomer)
					and (IDMJob entered and IDMJob.Status.Finished and IDMJob.BatchID = PrmBatchID)
					and IsEmailBillingInvoiceEnable
					and HasStitchBillingInvoiceAttachment)

			Action Rules
				Empty Set Rules
					invoke IncludeAttachmentsToIDMEmail
						invoked.PrmBillingCompany	= PrmBillingCompany
						invoked.PrmBatchID			= PrmBatchID
						invoked.PrmProcessLevel		= PrmProcessLevel
						invoked.PrmBillingCustomer	= PrmBillingCustomer
				Set Rules
					Entrance Rules
						LocalAsyncID = current async action request id
					Exit Rules
						invoke GetStatusAssembledIDM in background
							run after LocalAsyncID
							invoked.PrmBillingCompany	= PrmBillingCompany
							invoked.PrmBatchID			= PrmBatchID
							invoked.PrmProcessLevel		= PrmProcessLevel
							invoked.PrmBillingCustomer	= PrmBillingCustomer

				Instance Rules
					initialize IDMGenerateDocument
					initialize IDMItem
					initialize AttributeCtr
					initialize RetainIDMGenerateDocument

					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName		= "Company"
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue		= Company
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName		= "InvoiceNumber"
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue		= BillingInvoice.InvoiceNumber
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName		= "InvoicePrefix"
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue		= BillingInvoice.InvoicePrefix
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName		= "Status"
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue		= DerivedStatusForIDM
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName		= "InvoiceDate"
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeDate		= InvoiceDate
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeName		= "Customer"
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeValue		= Customer
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeName		= "CompanyName"
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeValue		= Company.Name
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeName		= "CustomerName"
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeValue		= Customer.Name
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeName		= "BillingInvoiceOutputHeader"
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeValue		= PrmBillingInvoiceOutputHeader
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeName		= "MergedAttachment"
					IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeValue	= true

					if (IDMAdditionalAttributesLinesRel exists)
						AttributeCtr = 11
						include IDM.IDMAdditionalAttributes

					LocalIDMAttachmentCtr = 1
					if (Company.BillingInvoiceTemplate.OutputFormat.WordDocument
					and StitchBillingInvoiceAttachmentWordRel exists)
						for each StitchBillingInvoiceAttachmentWordRel
							if (each.Attachment.FSMAttachmentIDM.IDMUniqueId entered)
								IDMGenerateDocument.IDMUniqueIDOccurs.IDMPID[LocalIDMAttachmentCtr] = each.Attachment.FSMAttachmentIDM.IDMUniqueId 
								LocalIDMAttachmentCtr += 1			
					if (Company.BillingInvoiceTemplate.OutputFormat.PDF
					and StitchBillingInvoiceAttachmentWordPDFRel exists)
						for each StitchBillingInvoiceAttachmentWordPDFRel
							if (each.Attachment.FSMAttachmentIDM.IDMUniqueId entered)
								IDMGenerateDocument.IDMUniqueIDOccurs.IDMPID[LocalIDMAttachmentCtr] = each.Attachment.FSMAttachmentIDM.IDMUniqueId 
								LocalIDMAttachmentCtr += 1
					IDMGenerateDocument.SourceDocumentType   = "FSM_BillingInvoiceAttachment"	
					IDMGenerateDocument.IDMUniqueID		     = IDMUniqueID
					IDMGenerateDocument.DocumentType 	     = "FSM_BillingInvoice"
					IDMGenerateDocument.FileName 		     = DerivedAssembledFileName
					IDMGenerateDocument.IDMAccessControlList = "CSFDefined"

					if (not HasBillingInvoiceIncludeAsEmailAttachment)
						include SetRecepientEmailAddress


						if (DerivedEmailSubject entered)
							IDMGenerateDocument.IDMEmail.Subject = DerivedEmailSubject
						else
							IDMGenerateDocument.IDMEmail.Subject = DerivedBillingInvoiceEmailSubject


						if (BillingInvoiceType.BillingInvoiceEmailTemplate entered)
							IDMGenerateDocument.EmailTemplateUniqueID	 = BillingInvoiceType.BillingInvoiceEmailTemplate.IDMUniqueId
						else
						if (BillingProcessLevel.BillingInvoiceEmailTemplate entered)
							IDMGenerateDocument.EmailTemplateUniqueID	= BillingProcessLevel.BillingInvoiceEmailTemplate.IDMUniqueId
						else
						if (Company.BillingInvoiceEmailTemplate entered)
							IDMGenerateDocument.EmailTemplateUniqueID	 = Company.BillingInvoiceEmailTemplate.IDMUniqueId
						else
							IDMGenerateDocument.IDMEmail.Body	= blank
						if (IDMGenerateDocument.EmailTemplateUniqueID entered)
							RetainIDMGenerateDocument = true
							include IDMXMLDefinition
						IDMGenerateDocument.IDMEmail.From		 = CompanyCustomer.BillingInvoiceFromAndReplyToEmail
						IDMGenerateDocument.IDMEmail.To			 = LocalRecepientEmailAddress

					invoke CreateFromAssemble IDMJob
						assign result to IDMJobView
						invoked.Actor					= actor
						invoked.Description 			= "Billing Invoice With Attachments"
						invoked.IDMGenerateDocument 	= IDMGenerateDocument
						invoked.BatchID					= PrmBatchID
						invoked.BypassGetStatus			= true

					IDMJobAssembled = IDMJobView.IDMJob

		IncludeAttachmentsToIDMEmail is a Set Action
			restricted
			Parameters
				PrmBillingCompany		   		is a BillingCompany
				PrmBatchID				   		is a IDMPID
				PrmProcessLevel					is a ProcessLevel
				PrmBillingCustomer				is a Customer

			Local Fields
				IDMJobView		is an IDMJob view

			Instance Selection
				where (Company	= PrmBillingCompany
				and	  (PrmProcessLevel not entered or BillingProcessLevel = PrmProcessLevel)
				and	  (PrmBillingCustomer not entered or Customer = PrmBillingCustomer)
				and   (IDMJob entered and IDMJob.BatchID = PrmBatchID)
				and    IsEmailBillingInvoiceEnable
				and    HasBillingInvoiceIncludeAsEmailAttachment)
			Action Rules
				Instance Rules
					include SetRecepientEmailAddress

					initialize IDMItem
					initialize IDMGenerateDocument
					include IDMXMLDefinition
					IDMItem.DocumentType		 = "FSM_BillingInvoice"
					IDMItem.IDMEmail.From		 = CompanyCustomer.BillingInvoiceFromAndReplyToEmail
					IDMItem.IDMEmail.To			 = LocalRecepientEmailAddress
					IDMItem.IncludeRelDoc		 = true
					if (IDMAssembledUniqueID entered)
						IDMItem.IDMUniqueId			 = IDMAssembledUniqueID
					else
						IDMItem.IDMUniqueId			 = IDMUniqueID

					IDMItem.IDMXMLDefinition	 = IDMGenerateDocument.IDMXMLDefinition


					if (DerivedEmailSubject entered)
						IDMItem.IDMEmail.Subject = DerivedEmailSubject
					else
						IDMItem.IDMEmail.Subject = DerivedBillingInvoiceEmailSubject


					if (BillingInvoiceType.BillingInvoiceEmailTemplate entered)
						IDMItem.EmailTemplateUniqueID	 = BillingInvoiceType.BillingInvoiceEmailTemplate.IDMUniqueId
					else
					if (BillingProcessLevel.BillingInvoiceEmailTemplate entered)
						IDMItem.EmailTemplateUniqueID	= BillingProcessLevel.BillingInvoiceEmailTemplate.IDMUniqueId
					else
					if (Company.BillingInvoiceEmailTemplate entered)
						IDMItem.EmailTemplateUniqueID	 = Company.BillingInvoiceEmailTemplate.IDMUniqueId
					else
						IDMItem.IDMEmail.Body	= blank

					if (IDMItem.GetItemDetails)
	                    IDMItem.IDMPID = IDMItem.IDMItemDetails.PID
	
					invoke SendToEmail IDMJob
						assign result to IDMJobView
						invoked.Description	 = "Email Billing Invoice With Attachments"
						invoked.FileName	 = DerivedFileName
						invoked.IDMItem		 = IDMItem
						invoked.BatchID		 = PrmBatchID
					
					IDMJob = IDMJobView.IDMJob

		GetStatusAssembledIDM is a Set Action
			restricted
			Parameters
				PrmBillingCompany		   		is a BillingCompany
				PrmBatchID				   		is a IDMPID
				PrmProcessLevel					is a ProcessLevel
				PrmBillingCustomer				is a Customer
			Local Fields
				LocalAsyncID			is an AsyncActionRequest
			Instance Selection
				where (Company	= PrmBillingCompany
				and	  (PrmProcessLevel not entered or BillingProcessLevel = PrmProcessLevel)
				and	  (PrmBillingCustomer not entered or Customer = PrmBillingCustomer)
				and   (IDMJob entered and IDMJob.Status.Finished and IDMJob.BatchID = PrmBatchID)
				and    IsEmailBillingInvoiceEnable
				and    HasStitchBillingInvoiceAttachment)
				
			Action Rules
				Set Rules
					Entrance Rules
						LocalAsyncID = current async action request id
					Exit Rules
						invoke IncludeAttachmentsToIDMEmail in background
							run after LocalAsyncID
							invoked.PrmBillingCompany			= PrmBillingCompany
							invoked.PrmProcessLevel				= PrmProcessLevel
							invoked.PrmBillingCustomer			= PrmBillingCustomer
							invoked.PrmBatchID					= PrmBatchID
				Instance Rules
					invoke GetStatus IDMJobAssembledRel
						invoked.PrmFromGenerateDocument = true
					if (IDMJobAssembledRel.Status.Finished
					and	IDMJobAssembledRel.MDSID entered)
						IDMAssembledUniqueID = IDMJobAssembledRel.MDSID

		AssembleAndSendInvoiceToEmail is an Instance Action
			restricted
			Parameters
				PrmFrom				is an EmailAddress
					holds pii
				PrmTo				is like MultipleEmailAddress 
					holds pii
				PrmCc				is like MultipleEmailAddress 
					holds pii
			Local Fields
				IDMJobView			is an IDMJob view

			Action Rules
				initialize IDMGenerateDocument
				initialize AttributeCtr

				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName		= "Company"
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue		= Company
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName		= "InvoiceNumber"
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue		= BillingInvoice.InvoiceNumber
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName		= "InvoicePrefix"
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue		= BillingInvoice.InvoicePrefix
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName		= "Status"
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue		= DerivedStatusForIDM
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName		= "InvoiceDate"
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeDate		= InvoiceDate
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeName		= "Customer"
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeValue		= Customer
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeName		= "CompanyName"
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeValue		= Company.Name
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeName		= "CustomerName"
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeValue		= Customer.Name
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeName		= "MergedAttachment"
				IDMGenerateDocument.IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeValue		= true
				
				if (IDMAdditionalAttributesLinesRel exists)
					AttributeCtr = 10
					include IDM.IDMAdditionalAttributes
				
				initialize LocalIDMAttachmentCtr
				LocalIDMAttachmentCtr = 1
				if (Company.BillingInvoiceTemplate.OutputFormat.WordDocument
				and StitchBillingInvoiceAttachmentWordRel exists)
					for each StitchBillingInvoiceAttachmentWordRel
						if (each.Attachment.FSMAttachmentIDM.IDMUniqueId entered)
							IDMGenerateDocument.IDMUniqueIDOccurs.IDMPID[LocalIDMAttachmentCtr] = each.Attachment.FSMAttachmentIDM.IDMUniqueId 
							LocalIDMAttachmentCtr += 1
				if (Company.BillingInvoiceTemplate.OutputFormat.PDF
				and StitchBillingInvoiceAttachmentWordPDFRel exists)
					for each StitchBillingInvoiceAttachmentWordPDFRel
						if (each.Attachment.FSMAttachmentIDM.IDMUniqueId entered)
							IDMGenerateDocument.IDMUniqueIDOccurs.IDMPID[LocalIDMAttachmentCtr] = each.Attachment.FSMAttachmentIDM.IDMUniqueId 
							LocalIDMAttachmentCtr += 1
					if (not HasBillingInvoiceIncludeAsEmailAttachment)

						if (DerivedEmailSubject entered)
							IDMGenerateDocument.IDMEmail.Subject = DerivedEmailSubject
						else
							IDMGenerateDocument.IDMEmail.Subject = DerivedBillingInvoiceEmailSubject


						if (BillingInvoiceType.BillingInvoiceEmailTemplate entered)
							IDMGenerateDocument.EmailTemplateUniqueID	 = BillingInvoiceType.BillingInvoiceEmailTemplate.IDMUniqueId
						else
						if (BillingProcessLevel.BillingInvoiceEmailTemplate entered)
							IDMGenerateDocument.EmailTemplateUniqueID	= BillingProcessLevel.BillingInvoiceEmailTemplate.IDMUniqueId
						else
						if (Company.BillingInvoiceEmailTemplate entered)
							IDMGenerateDocument.EmailTemplateUniqueID	 = Company.BillingInvoiceEmailTemplate.IDMUniqueId
						else
							IDMGenerateDocument.IDMEmail.Body	= blank
						if (IDMGenerateDocument.EmailTemplateUniqueID entered)
							RetainIDMGenerateDocument = true
							include IDMXMLDefinition
						IDMGenerateDocument.IDMEmail.From	 = PrmFrom
						IDMGenerateDocument.IDMEmail.To		 = PrmTo
						if (PrmCc entered)
							IDMGenerateDocument.IDMEmail.Cc		 = PrmCc

				IDMGenerateDocument.SourceDocumentType   = "FSM_BillingInvoiceAttachment"
				IDMGenerateDocument.IDMUniqueID		     = IDMUniqueID
				IDMGenerateDocument.DocumentType 	     = "FSM_BillingInvoice"
				IDMGenerateDocument.FileName 		     = DerivedAssembledFileName
				IDMGenerateDocument.IDMAccessControlList = "CSFDefined"
				invoke CreateFromAssemble IDMJob
					assign result to IDMJobView
					invoked.Actor					= actor
					invoked.Description 			= "Billing Invoice With Attachments"
					invoked.IDMGenerateDocument 	= IDMGenerateDocument
				IDMJobAssembled = IDMJobView.IDMJob
				
				invoke UpdateAssembledUniqueID in background
					run after IDMJobAssembledRel.AsyncId
					invoked.PrmFrom = PrmFrom
					invoked.PrmTo   = PrmTo
					invoked.PrmCc   = PrmCc
			

		UpdateAssembledUniqueID is an Instance Action
			restricted
			Parameters
				PrmFrom				is an EmailAddress
					holds pii
				PrmTo				is like MultipleEmailAddress 
					holds pii
				PrmCc				is like MultipleEmailAddress 
					holds pii
			Action Rules
				if (IDMJobAssembledRel.Status.Finished
				and	IDMJobAssembledRel.MDSID entered)
					IDMAssembledUniqueID = IDMJobAssembledRel.MDSID
			Exit Rules
				if (HasBillingInvoiceIncludeAsEmailAttachment)
					invoke IncludeAttachmentsAndSendToEmail in background
						invoked.PrmFrom = PrmFrom
						invoked.PrmTo   = PrmTo
						invoked.PrmCc   = PrmCc

		IncludeAttachmentsAndSendToEmail is an Instance Action
			restricted
			Parameters
				PrmFrom is an EmailAddress
					holds pii
				PrmTo	is like MultipleEmailAddress 
					holds pii
				PrmCc	is like MultipleEmailAddress 
					holds pii
			Local Fields
				LocalAsyncID	is an AsyncActionRequest
				IDMJobView		is an IDMJob view
			Action Rules
				initialize IDMItem
				include IDMXMLDefinition
				IDMItem.DocumentType		 = "FSM_BillingInvoice"
				IDMItem.IDMXMLDefinition	 = IDMGenerateDocument.IDMXMLDefinition
				IDMItem.IDMEmail.From		 = PrmFrom
				IDMItem.IDMEmail.To			 = PrmTo
				IDMItem.IDMEmail.Cc			 = PrmCc
				IDMItem.IncludeRelDoc		 = true
				if (IDMAssembledUniqueID entered)
					IDMItem.IDMUniqueId			 = IDMAssembledUniqueID
				else
					IDMItem.IDMUniqueId			 = IDMUniqueID


				if (DerivedEmailSubject entered)
					IDMItem.IDMEmail.Subject = DerivedEmailSubject
				else
					IDMItem.IDMEmail.Subject = DerivedBillingInvoiceEmailSubject


				if (BillingInvoiceType.BillingInvoiceEmailTemplate entered)
					IDMItem.EmailTemplateUniqueID	 = BillingInvoiceType.BillingInvoiceEmailTemplate.IDMUniqueId
				else
				if (BillingProcessLevel.BillingInvoiceEmailTemplate entered)
					IDMItem.EmailTemplateUniqueID	= BillingProcessLevel.BillingInvoiceEmailTemplate.IDMUniqueId
				else
				if (Company.BillingInvoiceEmailTemplate entered)
					IDMItem.EmailTemplateUniqueID	 = Company.BillingInvoiceEmailTemplate.IDMUniqueId
				else
					IDMItem.IDMEmail.Body	= blank

				constraint (IDMItem.GetItemDetails)
					"DocumentDoesNotExistInIDM"

				IDMItem.IDMPID    = IDMItem.IDMItemDetails.PID
				
				invoke SendToEmail IDMJob
					assign result to IDMJobView
					invoked.Description	 = "Email Billing Invoice With Attachments"
					invoked.FileName	 = DerivedFileName
					invoked.IDMItem		 = IDMItem
				
				IDMJob = IDMJobView.IDMJob

		CreateAndSendBillingInvoiceDocToIDM is an Instance Action
			restricted

			Parameters
				PrmIDMPrinter		is an IDMPrinter
					default label is "IDM Printer"
				PrmFromBatchProgram	is Boolean
				PrmBypassEmail		is Boolean
				PrmBillingInvoiceOutputHeader is a BillingInvoiceOutputHeader
				PrmBatchID			is like IDMPID
				PrmBypassPrint		is Boolean

			Local Fields
				IDMJobView	 is an IDMJob view

			Action Rules
				include IDMXMLDefinition
				
				initialize AttributeCtr
				initialize IDMAttributes
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName							= "Company"
				IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue							= Company
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName							= "InvoiceNumber"
				IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue							= BillingInvoice.InvoiceNumber
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName							= "InvoicePrefix"
				IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue							= BillingInvoice.InvoicePrefix
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName							= "Status"
				IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue							= DerivedStatusForIDM
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName							= "InvoiceDate"
				IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeDate							= InvoiceDate
				IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeName							= "Customer"
				IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeValue							= Customer
				IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeName							= "BillingInvoiceOutputHeader"
				IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeValue							= PrmBillingInvoiceOutputHeader
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeName							= "CompanyName"
				IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeValue							= Company.Name
				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeName							= "CustomerName"
				IDMAttributes.SingleValue.IDMAttribute[9].IDMAttributeValue							= Customer.Name
				IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeName							= "MergedAttachment"
				IDMAttributes.SingleValue.IDMAttribute[10].IDMAttributeValue						= false
				
				if (IDMAdditionalAttributesLinesRel exists)
					AttributeCtr = 11
					include IDM.IDMAdditionalAttributes

				IDMGenerateDocument.IDMAttributes													= IDMAttributes

				if (BillingInvoiceType.BillingInvoiceTypeIDMTemplate entered)
					IDMGenerateDocument.TemplateUniqueId = BillingInvoiceType.BillingInvoiceTypeIDMTemplate.IDMUniqueId
				else
				if (BillingProcessLevel.BillingInvoiceProcessLevelIDMTemplate entered)
					IDMGenerateDocument.TemplateUniqueId = BillingProcessLevel.BillingInvoiceProcessLevelIDMTemplate.IDMUniqueId
				else
				if (Company.BillingInvoiceTemplate entered)
					IDMGenerateDocument.TemplateUniqueId = Company.BillingInvoiceTemplate.IDMUniqueId

				IDMGenerateDocument.DocumentType													= "FSM_BillingInvoice"
				IDMGenerateDocument.FileName														= DerivedFileName

				if (PrmFromBatchProgram)
					if (CompanyCustomer.EmailBillingInvoice
					and !PrmBypassEmail
					and (not HasStitchBillingInvoiceAttachment
					and  not HasBillingInvoiceIncludeAsEmailAttachment))
						include SetRecepientEmailAddress


						if (DerivedEmailSubject entered)
							IDMGenerateDocument.IDMEmail.Subject = DerivedEmailSubject
						else
							IDMGenerateDocument.IDMEmail.Subject = DerivedBillingInvoiceEmailSubject


						if (BillingInvoiceType.BillingInvoiceEmailTemplate entered)
							IDMGenerateDocument.EmailTemplateUniqueID	 = BillingInvoiceType.BillingInvoiceEmailTemplate.IDMUniqueId
						else
						if (BillingProcessLevel.BillingInvoiceEmailTemplate entered)
							IDMGenerateDocument.EmailTemplateUniqueID	= BillingProcessLevel.BillingInvoiceEmailTemplate.IDMUniqueId
						else
						if (Company.BillingInvoiceEmailTemplate entered)
							IDMGenerateDocument.EmailTemplateUniqueID	 = Company.BillingInvoiceEmailTemplate.IDMUniqueId
						else
							IDMGenerateDocument.IDMEmail.Body	= blank

						IDMGenerateDocument.IDMEmail.From		 = CompanyCustomer.BillingInvoiceFromAndReplyToEmail
						IDMGenerateDocument.IDMEmail.To			 = LocalRecepientEmailAddress

					if (CompanyCustomer.PrintBillingInvoice
					and not PrmBypassPrint)
						LocalIDMPrinter = PrmIDMPrinter
						if (LocalIDMPrinter entered)
							IDMGenerateDocument.IDMPrinter				= LocalIDMPrinter 

				IDMGenerateDocument.IDMAccessControlList = "CSFDefined"

				if (PrmBatchID entered)
					IDMGenerateDocument.BatchID = PrmBatchID

				invoke CreateFromGenerateDocument IDMJob
					assign result to IDMJobView
					invoked.Actor				= actor
					invoked.Description			= "Billing Invoice"
					invoked.IDMGenerateDocument = IDMGenerateDocument
					if (PrmFromBatchProgram)
						invoked.BypassGetStatus = true

				IDMJob = IDMJobView.IDMJob

				if (not PrmFromBatchProgram)
					invoke UpdateIDMUniqueID in background
						run after IDMJob.AsyncId



		GetStatusFromBatch is an Instance Action
			restricted
			Action Rules
				invoke GetStatus IDMJob
					invoked.PrmFromGenerateDocument = true
				IDMUniqueID = IDMJob.MDSID


		UpdateIDMUniqueID is an Instance Action
			restricted
			Action Rules
				if (IDMJob.GenerationStatus.Finished)
           			IDMUniqueID = IDMJob.MDSID


		AddOnChargesAmount	is an Instance Action
			restricted
			Parameters
				PrmTaxableTotal				is an InternationalAmount
				PrmTotalAddOnAmount			is an InternationalAmount
				PrmTotalAddOnBaseAmount		is an InternationalAmount
				PrmDiscountable				is an InternationalAmount
				PrmTaxable					is Boolean
				PrmTaxTotal					is an InternationalAmount
				PrmAddonChargeDelete		is Boolean
				PrmTrackType				is a TrackType
				PrmTrackTypeTotal			is an InternationalAmount
			Action Rules
				LocalGroupAOCAmount		 =	 PrmTaxableTotal
				LocalAddonChargeDelete	 =	 PrmAddonChargeDelete
				LocalTaxableTotal		 =	 PrmTaxableTotal
				TotalAddOnAmount		+=	 PrmTotalAddOnAmount
				TotalAddOnBaseAmount	+=	 PrmTotalAddOnBaseAmount

				if (PrmTrackType.Freight)
					FreightTotal			+=  PrmTrackTypeTotal
				else
				if (PrmTrackType.Insurance)
					InsuranceTotal			+=  PrmTrackTypeTotal
				else
				if (PrmTrackType.CustomsCharges)
					CustomsTotal			+=  PrmTrackTypeTotal
				else
				if (PrmTrackType.OtherAOC)
					OtherAddOnChargesTotal	+=  PrmTrackTypeTotal

				Discountable			+=  PrmDiscountable

				LocalAddonChargeTaxable	 = PrmTaxable
				if (LocalAddonChargeTaxable)
					TaxableTotal	+=PrmTaxableTotal

				LocalSkipHeaderTaxlog = true

				include CalculateTaxableAmountAndSalesTax
				include CalculateTermsDiscountAmount



		CalculateOpenAmount is an Instance Action
			restricted
			Parameters
				PrmTotalInventoryGoodsBaseAmount	is an InternationalAmount
				PrmTotalInventoryGoodsAmount		is an InternationalAmount
				PrmTotalNoninventoryGoodsAmount		is an InternationalAmount
				PrmTotalNoninventoryGoodsBaseAmount	is an InternationalAmount
				PrmOpenOrderAmount					is an InternationalAmount
				PrmDiscountable						is an InternationalAmount
				PrmTaxableTotal						is an InternationalAmount
				PrmTaxTotal							is an InternationalAmount
				PrmSkipTaxCalculation				is Boolean
				PrmLineTaxOnly						is Boolean
				PrmRecalculateAOC                   is Boolean
			Action Rules
				TotalInventoryGoodsAmount			 +=	 PrmTotalInventoryGoodsAmount
				TotalInventoryGoodsBaseAmount		 +=	 PrmTotalInventoryGoodsBaseAmount
				TotalNoninventoryGoodsAmount		 +=	 PrmTotalNoninventoryGoodsAmount
				TotalNoninventoryGoodsBaseAmount	 +=	 PrmTotalNoninventoryGoodsBaseAmount
				OpenOrderAmount						 +=	 PrmOpenOrderAmount
				Discountable						 +=	 PrmDiscountable
				TaxableTotal						 +=	 PrmTaxableTotal
				if (!(IsInvoicingAndTaxCalculation
				and IsManualOrRecurringSource))
					TaxTotal.TransactionAmount			 +=	 PrmTaxTotal
					if(IsTaxEngine)
						TaxTotal.BaseAmount.ToCurrency				 = Company.Currency
						TaxTotal.BaseAmount.EnteredCurrencyRate		 = CurrencyRate
						TaxTotal.BaseAmount.EnteredCurrencyAmount	 = TaxTotal.BaseAmount.OutputCurrencyAmount

				if (!PrmSkipTaxCalculation)
					LocalSkipHeaderTaxlog = true
					include CalculateTaxableAmountAndSalesTax
				if (BillingInvoiceAddOnChargesRel exists
				and not PrmLineTaxOnly)
					invoke CalculateAOC BillingInvoiceAddOnChargesRel
						invoked.PrmRecalculateAOC = PrmRecalculateAOC
				include CalculateTermsDiscountAmount



		UpdateBillingInvoice is an Instance Action
			restricted
			Parameters
				PrmLineTypeInventoried		is Boolean
				PrmLineNetAmount			is a CurrencyExchangeGroup
				PrmOpenOrderAmount			is an InternationalAmount
				PrmDiscountable				is an InternationalAmount
				PrmTaxableTotal				is an InternationalAmount
				PrmTaxTotal					is an InternationalAmount
				PrmLineTaxable				is Boolean
				PrmLineDelete				is Boolean

			Action Rules
				if (PrmLineTypeInventoried)
					TotalInventoryGoodsAmount			 -= PrmLineNetAmount.TransactionAmount
					TotalInventoryGoodsBaseAmount		 -= PrmLineNetAmount.BaseAmount.EnteredCurrencyAmount
				else
					TotalNoninventoryGoodsAmount		 -= PrmLineNetAmount.TransactionAmount
					TotalNoninventoryGoodsBaseAmount	 -= PrmLineNetAmount.BaseAmount.EnteredCurrencyAmount
				OpenOrderAmount							 -= PrmOpenOrderAmount
				Discountable							 -= PrmDiscountable
				TaxableTotal							 -= PrmTaxableTotal
				LocalLineDelete							 = PrmLineDelete
				LocalLineTaxable						 = PrmLineTaxable
				LocalSkipHeaderTaxlog 					 = true

				include CalculateTaxableAmountAndSalesTax
				include CalculateTermsDiscountAmount



		UpdateDiscountSpread is an Instance Action
			restricted
			Action Rules
				if (!IsTaxEngine)
					for each BillingInvoiceLinesDiscountableRel
						invoke UpdateTaxCalculation each

					for each AddOnChargesDiscountableRel
						invoke UpdateTaxCalculation each

			Exit Rules
				LocalSkipHeaderTaxlog = true
				if (!IsTaxEngine)
					LocalAllocateExcess = true
					include CalculateTaxableAmountAndSalesTax
					include CalculateTermsDiscountAmount



		StoreCalculatedTax is an Instance Action
			restricted
			Parameters
				PrmCalculatedTax is an InternationalCost
			Action Rules
				LocalFullTaxTotal += PrmCalculatedTax



		PutOnHold is an Instance Action
			valid when (CanBePutOnHold)
			completion message is "InvoicePutOnHold"
			Parameters
				PrmHoldCode		is a ReceivableHoldCode
			Action Rules
				constraint (PrmHoldCode entered)
					"MustEnterHoldCode"
				HoldCode = PrmHoldCode



		RemoveHoldCode is an Instance Action
			valid when (CanRemoveHoldCode)
			completion message is "HoldCodeRemoved"
			Action Rules
				HoldCode = blank
				if (OrderEntryCustomerRel.CreditLimitHoldCode.BillingInvoiceRelease
				and DerivedReleasedInvoicesAmount > CompanyCustomer.CreditLimit)
					confirmation required
						"Warning,CreditLimitExceeded;Proceed?"

		HoldCodeRemove is an Instance Action	
			restricted
			valid when (CanRemoveHoldCode)
			completion message is "HoldCodeRemoved"
			Action Rules
				HoldCode = blank
				if (OrderEntryCustomerRel.CreditLimitHoldCode.BillingInvoiceRelease
				and DerivedReleasedInvoicesAmount > CompanyCustomer.CreditLimit)
					confirmation required
						"Warning,CreditLimitExceeded;Proceed?"

		FastUpdate is an Update Action
			restricted
			bypass field rules



		UpdateParallelReference is an Instance Action
			valid when (IsValidForUpdateParallelReference)
			Action Rules
				invoke FastUpdate
					invoked.ParallelReference = DerivedStructuredParallelReference



		SendInvoiceToPrinter is an Instance Action
			valid when (IsValidForIDMPrint)
			Parameters
				PrmIDMPrinter		is an IDMPrinter
					default label is "IDM Printer"

			Parameter Rules
				PrmIDMPrinter
					initial value is Company.UserDefaultPrinterRel.IDMPrinter
					required

			Local Fields
				IDMJobView			is an IDMJob view			

			Action Rules
				initialize IDMItem
				IDMItem.DocumentType = "FSM_BillingInvoice"
				IDMItem.IDMUniqueId	 = IDMUniqueID
				IDMItem.IDMPrinter	 = PrmIDMPrinter 

				constraint (IDMItem.GetItemDetails)
					"DocumentDoesNotExistInIDM"
				
				IDMItem.IDMPID    = IDMItem.IDMItemDetails.PID
				
				invoke SendToPrinter IDMJob
					assign result to IDMJobView
					invoked.Description = "Billing Invoice"
					invoked.FileName	= DerivedFileName
					invoked.IDMItem		= IDMItem
				
				IDMJob = IDMJobView.IDMJob

		SendBillingInvoiceNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Action Rules
				send ion bod
					bod is BillingInvoiceXMLBOD
					bod type is "Sync.Invoice"
					accounting entity is DerivedBODAccountingEntity
					document id is DerivedDocumentID
					variation id is BODVariationID

		TriggerBillingInvoiceNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "Invoice"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "BillingInvoice"
					invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmCompany 					= Company
					invoked.PrmAccountingEntity 		= Company.GeneralLedgerCompany.AccountingEntity
					invoked.PrmMainUserTemplate 		= "IONInvoiceXML_BillingInvoice_ST"
				NativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				if(GeneralLedgerCompanyRel.FinanceEnterpriseGroup.BODTrigger and NativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "Invoice"					
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.BODAccountingEntity		= DerivedBODAccountingEntity
							invoked.Direction				= 1
							invoked.Status					= 1
							invoked.StartDate				= current timestamp
							invoked.Customer				= Customer
							invoked.Invoice					= BillingInvoice
							invoked.Reference1				= Company
							invoked.Reference2				= BillingInvoice.InvoicePrefix
							invoked.Reference3				= BillingInvoice.InvoiceNumber							
							invoked.Reference4				= "BillingInvoiceService"
							initialize invoked.Error			
							initialize invoked.ErrorMessage					
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else 
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
							invoked.BODAccountingEntity		= DerivedBODAccountingEntity
							invoked.Direction				= 1
							invoked.Status					= 1
							invoked.StartDate				= current timestamp
							invoked.Customer				= Customer
							invoked.Invoice					= BillingInvoice
							invoked.Reference1				= Company
							invoked.Reference2				= BillingInvoice.InvoicePrefix
							invoked.Reference3				= BillingInvoice.InvoiceNumber
							invoked.Reference4				= "BillingInvoiceService"
							initialize invoked.Error			
							initialize invoked.ErrorMessage							
					invoke SendBillingInvoiceNativeLPL
						resume on error
		                   	Error            							= true
		                    ErrorMessageTracker     					= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessageTracker
							invoked.Status								= 2
							invoked.CloseDate							= current timestamp
							invoked.BODXML								= BillingInvoiceXMLBOD
							invoked.BODID								= DerivedBODID
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status									= 3
							invoked.CloseDate								= current timestamp
							invoked.BODXML									= BillingInvoiceXMLBOD
							invoked.BODID									= DerivedBODID

		SendInvoiceToEmail is an Instance Action
			valid when (IsValidForIDMEmail)
			disable multiple instance selection
			Parameters
				PrmFrom is an EmailAddress
					default label is "From"
					holds pii
				PrmTo	is like MultipleEmailAddress 
					default label is "To"
					holds pii
				PrmCc	is like MultipleEmailAddress 
					default label is "Cc"
					holds pii
			Parameter Rules
				PrmFrom
					initial value is DerivedFromEmailAddress
					required
				PrmTo
					initial value is DerivedToEmailAddress
					required
				PrmCc
					initial value is DerivedCcEmailAddress

			Local Fields
				IDMJobView			is an IDMJob view	

			Action Rules
				if (HasStitchBillingInvoiceAttachment)
					invoke AssembleAndSendInvoiceToEmail
						invoked.PrmFrom   	   		= PrmFrom
						invoked.PrmTo 				= PrmTo
						invoked.PrmCc 				= PrmCc
				else
				if (HasBillingInvoiceIncludeAsEmailAttachment)
					invoke IncludeAttachmentsAndSendToEmail
						invoked.PrmFrom				= PrmFrom
						invoked.PrmTo 				= PrmTo
						invoked.PrmCc				= PrmCc
				else
					include IDMXMLDefinition

					initialize IDMItem
					IDMItem.DocumentType		 = "FSM_BillingInvoice"
					IDMItem.IDMXMLDefinition	 = IDMGenerateDocument.IDMXMLDefinition
					IDMItem.IDMUniqueId			 = IDMUniqueID
					IDMItem.IDMEmail.From		 = PrmFrom
					IDMItem.IDMEmail.To			 = PrmTo
					IDMItem.IDMEmail.Cc			 = PrmCc


					if (DerivedEmailSubject entered)
						IDMItem.IDMEmail.Subject = DerivedEmailSubject
					else
						IDMItem.IDMEmail.Subject = DerivedBillingInvoiceEmailSubject


					if (BillingInvoiceType.BillingInvoiceEmailTemplate entered)
						IDMItem.EmailTemplateUniqueID	= BillingInvoiceType.BillingInvoiceEmailTemplate.IDMUniqueId
					else
					if (BillingProcessLevel.BillingInvoiceEmailTemplate entered)
						IDMItem.EmailTemplateUniqueID	= BillingProcessLevel.BillingInvoiceEmailTemplate.IDMUniqueId
					else
					if (Company.BillingInvoiceEmailTemplate entered)
						IDMItem.EmailTemplateUniqueID   = Company.BillingInvoiceEmailTemplate.IDMUniqueId
					else
						IDMItem.IDMEmail.Body	= blank

					constraint (IDMItem.GetItemDetails)
						"DocumentDoesNotExistInIDM"

					IDMItem.IDMPID    = IDMItem.IDMItemDetails.PID
									
					invoke SendToEmail IDMJob
						assign result to IDMJobView
						invoked.Description	 = EmailNotificationMsg
						invoked.FileName	 = DerivedFileName
						invoked.IDMItem		 = IDMItem
					
					IDMJob = IDMJobView.IDMJob



		InvoicePurge is a Set Action			
			restricted
			Parameters
				PrmCompany		is a BillingCompany
				PrmGLDate		is Date	
				PrmAddSubtract	is Alpha size 1
					States
						Add			value is "A"
						Subtract	value is "S"
				PrmCutoffDays	is Numeric  size 3


			Parameter Rules
				PrmCompany
					required
					constraint (PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate entered)
		            	"PurgeCutOffDateMustBeSetFor_Finance_Enterprise_Group<PrmCompany.FinanceEnterpriseGroup>"

				PrmGLDate


						
					initial value is PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate
					default to PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate















			Local Fields
				BillingInvoiceRecordCount    is Numeric 10 
				LocalActor			         is an Actor
						
			Instance Selection	
				include deleted records		
				where  (Company    = PrmCompany
				and    (BillingInvoiceSource.Interfaced
				or  	BillingInvoiceSource.Manual
				or 		BillingInvoiceSource.RecurringInvoice 
				or 		BillingInvoiceSource.Project
				or 		BillingInvoiceSource.Franchise )
				and     Status 		= 9
				and	   (PrmGLDate not entered 
				or      GeneralLedgerDate < PrmGLDate))
			
			


			Action Rules

				Empty Set Rules
					LocalActor 		  = actor
					send notification
						to LocalActor
						description is "NoBillingInvoiceRecordsFoundToPurge"
						priority is high
						detail is "BillingInvoicesPurgeHasBeenCompletedFor<BillingInvoiceRecordCount>Records"

				Set Rules
					Entrance Rules
						initialize BillingInvoiceRecordCount
						LocalActor			= actor
					Exit Rules
						LocalActor   = actor
						send notification
							to LocalActor
							description is "BillingInvoicesPurgeHasBeenCompleted"
							priority is high
							detail is "BillingInvoicesPurgeHasBeenCompletedFor<BillingInvoiceRecordCount>Records"

				Instance Rules
					if (BillingGLDistributionNotToPurgeRel not exists)
						increment BillingInvoiceRecordCount
						invoke Purge 

		Purge is a Purge Action
			restricted
			Entrance Rules
				invoke Purge BillingInvoiceLineTaxRel
				invoke Purge BillingGLDistributionRel
				invoke Purge BillingInvoiceLineRel
				invoke Purge BillingInvoiceCommentsRel
				invoke Purge BillingInvoiceAddOnChargesRel 
				invoke Purge BillingInvoiceAttachmentsRel
