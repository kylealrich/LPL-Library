ReceivableApplicationSelect is a BusinessClass
	owned by ar
	prefix is ASG
	classic name is ARSAPPLIED

	Ontology
		symbolic key is ReceivableApplicationSelect
			classic set name is ASGSET1
			classic name for ReceivableApplicationSelect.TransactionCompany is COMPANY
			classic name for ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType is TRANS-TYPE
			classic name for Company is CR-COMPANY
			classic name for ReceivablePaymentHeader is CR-BATCH
			classic name for ReceivablePayment is CR-PYMNT-SEQ

	Patterns
		implements StaticJava
		disable AuditIndex
		enable explicit context override

	Persistent Fields
		ExchangeDate
		TransactionApplicationAmount			is an InternationalAmount
			classic name is ORIG-OPEN-AMT
		BaseApplicationAmount					is an InternationalAmount
			classic name is OPEN-AMT
			precision is Company.Currency.NumberOfDecimals
		PaymentApplicationAmount				is an InternationalAmount
			classic name is CR-ORIG-AP-AMT
		AdjustmentSequence
			classic name is ADJ-SEQ
		GeneralLedgerDate						is Date
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		ReceivableOperator
			classic name is OPR-CODE
		ElectronicFundsTransfer					is Boolean
			classic name is EFT-FL
		SelectSequence							is a SelectSeq
			classic name is SELECT-SEQ


	Transient Fields
		RecPaySw								is Boolean
		SelectedAdjustedAmount					is like InternationalAmount	
			derive value from TotalAdjustmentsDisplayCurrency
		SelectedAdjustmentReason				is an ApplicationAdjustmentReason
			derive value from FirstAdjustmentReason
			context of ReceivableApplicationSelect.TransactionCompany
		SelectedAdjustmentReasonARIncomeWithholdingCode				is AlphaUpper size 10
		SelectedAdjustmentReasonARIncomeWithholdingDocumentNumber	is AlphaUpper size 16
		ApplicationCurrency						is like Currency
		EnteredAmount							is an InternationalAmount
			derive value from DerivedEnteredAmount
		LineEnteredAmount						is an InternationalAmount
			derive value from DerivedLineEnteredAmount
		TransientInvoiceDetailTypeForApplication						is an InvoiceDetailTypeForApplication 
			derive value from DerivedInvoiceDetailTypeForApplication
		TransientInvoiceDetailSequenceForApplication					is an InvoiceDetailSequenceForApplication 
			derive value from DerivedInvoiceDetailSequenceForApplication
		TransientReceivableCompanyForContext	is a ReceivableCompanyForContext 
			derive value from DerivedReceivableCompanyForContext
		TransientReceivableBatchForContext	is a ReceivableBatchForContext 
			derive value from DerivedReceivableBatchForContext
		TransientReceivableInvoiceForContext 	is a ReceivableInvoiceForContext 
			derive value from DerivedReceivableInvoiceForContext
		TransientFundDistributionSetState		is a FundDistributionSetState 
			derive value from DerivedFundDistributionSetState
		TransientDistributionSetState			is Numeric size 1 
			States
				OutOfBalance		value is 1
				ReadyForProcessing 	value is 2
				NotApplicable		value is 3
			derive value from DerivedDistributionSetState
		TransientOverApplyInvoice				is Boolean


	Local Fields
		CurrencyWork1														is a ReceivableExchange
		LocalCurrencyTable													is a CurrencyTable
		LocalApplicationSequence											is Numeric 7
		LocalApplicationAmount												is an InternationalAmount
		LocalAdjustmentAmount												is an InternationalAmount

		I1																	is Numeric 3
		NextSentence														is Boolean	
		NewReceivableApplication											is a ReceivableApplication view
		AutoAdjustReason													is like ReceivableReason
		CurrencyWork														is a FromCurrencyExchangeGroup
		LocalCurrency														is like Currency
		LocalEnteredAmount													is an InternationalAmount
		LocalAdjustAmount													is an InternationalAmount
		CashApplicationResultView											is a CashApplicationResult view	

		LocalFinanceEnterpriseGroup											is like FinanceEnterpriseGroup
		LocalResult															is like CashApplicationResult
		WorkAmount															is like InternationalAmount
		AutoAdjustAmount													is an InternationalAmount
		LocalAnswer															is Boolean
		LocalPaymentCashDetailAccount										is a FinanceCodeBlock
		LocalPaymentAmountRemaining											is an InternationalAmount


		LocalSelectedAdjustedAmount											is like InternationalAmount
		LocalBaseAutoAdjustAmount											is like InternationalAmount
		LocalAutoAdjustAmount												is an InternationalAmount
		LocalInvoiceAdjustAmount											is an InternationalAmount

		SumOfReceivableApplicationAdjustmentSelectRelAmountsDone			is Boolean	
		SumOfSameInvoiceApplicationSelectRelAmountsDone						is Boolean	
		SumOfOpenReceivableInvoiceDetailRelAmountsDone						is Boolean	
		SumOfReceivableInvoiceRelOpenReceivableInvoiceDetailRelAmountsDone	is Boolean	
		SumOfReceivableApplicationSelectRelAmountsDone						is Boolean	
		SumOfEligibleOverApplyOpenReceivableInvoiceDetailRelAmountsDone		is Boolean

		SumOfReceivableApplicationAdjustmentSelectRelAdjustAmount			is an InternationalAmount	
		SumOfReceivableApplicationAdjustmentSelectRelCreditAdjustAmount		is an InternationalAmount	
		SumOfReceivableApplicationAdjustmentSelectRelBaseAdjustAmount		is an InternationalAmount	
		FirstOfReceivableApplicationAdjustmentSelectRelAdjustmentReason		is like ReceivableReason	

		SumOfSameInvoiceApplicationSelectRelBaseApplicationAmount			is an InternationalAmount	
		SumOfSameInvoiceApplicationSelectRelPaymentApplicationAmount		is an InternationalAmount	
		SumOfSameInvoiceApplicationSelectRelTransactionApplicationAmount	is an InternationalAmount	
		SumOfOpenReceivableInvoiceDetailRelDerivedApplicationDiscount		is an InternationalAmount	
		SumOfOpenReceivableInvoiceDetailRelOpenAmount						is an InternationalAmount	
		SumOfOpenReceivableInvoiceDetailRelDerivedSelectDiscountAmount		is an InternationalAmount	
		SumOfOpenReceivableInvoiceDetailRelOpenAmountDisplayCurrency		is an InternationalAmount	
		SumOfEligibleOverApplyReceivableInvoiceDetailRelOpenAmountDisplayCurrency is an InternationalAmount

		SumOfReceivableInvoiceRelOpenReceivableInvoiceDetailRelOpenAmount	is an InternationalAmount	
		SumOfReceivableApplicationSelectRelTransactionApplicationAmount		is an InternationalAmount	

		LocalSelectedAdjustAmount											is an InternationalAmount
		LocalGeneralLedgerCompanyGroup										is a GeneralLedgerCompanyGroup


		NativeLPLBODTrigger			is Boolean
		LocalTriggerFrom			is Alpha size 100


	Context Fields
		ReceivableInvoice
		ReceivableInvoiceDetail




	Field Rules

		ReceivableApplicationSelect.TransactionCompany
			default to ReceivableInvoiceDetailRel.Company


		ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
			default to ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType






		ReceivableApplicationSelect.ReceivableInvoiceDetail
			default to ReceivableInvoiceDetailRel.ReceivableInvoiceDetail






		GeneralLedgerDate						

			if  (GeneralLedgerDate not entered)
				if (Company.DefaultApplicationDate.LatestTransactionPostDate)	
					if (ReceivablePayment.GeneralLedgerDate	> ReceivableInvoiceDetailRel.GeneralLedgerDate)
						GeneralLedgerDate = ReceivablePayment.GeneralLedgerDate
					else
						GeneralLedgerDate = ReceivableInvoiceDetailRel.GeneralLedgerDate
				else
				if (Company.DefaultApplicationDate.PaymentCreditPostDate)
					GeneralLedgerDate = ReceivablePayment.GeneralLedgerDate	
				else
					GeneralLedgerDate = current corporate date

				if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
				and  GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)
					GeneralLedgerDate = CompanySystemClosingControlRel.ValidEntryDate.Begin

			required


			if (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange)
				constraint (GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
					"PostDate<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"



			if (Company != ReceivableApplicationSelect.TransactionCompany)
				if (RASelectTransactionCompanyCompanySystemClosingControlRel.Control and ReceivableApplicationSelect.TransactionCompany.VerifyGLDateWithinGLDateRange)
					constraint (GeneralLedgerDate within RASelectTransactionCompanyCompanySystemClosingControlRel.ValidEntryDate)
						"PostDate<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<ReceivableApplicationSelect.TransactionCompany>;ValidDateRangeIs<RASelectTransactionCompanyCompanySystemClosingControlRel.ValidEntryDate.Begin>-<RASelectTransactionCompanyCompanySystemClosingControlRel.ValidEntryDate.End>"











		ElectronicFundsTransfer					


		SelectSequence							
			autosequence using Set3


		SelectedAdjustedAmount
			if (NumberOfAdjustments > 1)
				cannot be changed
					"MultipleAdjustmentsExist;UseDetailScreenToChange"
			if (ReceivableInvoiceDetailRel.SummarizeDetail)
				cannot be changed
					"InvoiceHasSummarizeDetailForDisplay;MustUnselectandSelect"
			if (SelectedAdjustmentReason entered)
				required
					"AdjustmentAmountRequiredIfAdjustmentReasonEntered"







			if (ReceivablePayment.IsZeroPaymentAllowAdjustments
			and ReceivableInvoiceDetailRel.ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
				if (SelectedAdjustedAmount entered)
					constraint(SelectedAdjustedAmount >=0)
						"AdjustmentAmountMustBePositive"
				else
				if (SelectedAdjustmentReason entered
				and SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
						constraint (SelectedAdjustedAmount entered)
							"AdjustmentAmountRequiredIfAdjustmentReasonEntered"

			else
			if (ReceivablePayment.IsZeroPaymentAllowAdjustments
			and !ReceivableInvoiceDetailRel.ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					constraint (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
						"Invoice_\Company<ReceivableInvoiceDetailRel.ReceivableInvoiceRel.Company>DoesNotAllowZeroPaymentAdjustments"


		SelectedAdjustmentReason
			if (NumberOfAdjustments > 1)
				cannot be changed
					"MultipleAdjustmentsExist;UseDetailScreenToChange"
			if (ReceivableInvoiceDetailRel.SummarizeDetail)
				cannot be changed
					"InvoiceHasSummarizeDetailForDisplay;MustUnselectandSelect"
			if (SelectedAdjustedAmount entered)
				required
					"ReasonCodeRequiredIfAdjustAmountEntered"
			constraint (SelectedAdjustmentReason != "CURR")
				"CURRIsAReserved_\Reason_\Code."
			constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.Grouping)
				"CannotUse_\Grouping_\Reason_\Code."
			constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
				"CannotUse_\Payment_\Transfer_\Reason_\Code."




			if (ReceivablePayment.IsZeroPaymentAllowAdjustments
			and ReceivableInvoiceDetailRel.ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
				if (SelectedAdjustmentReason entered)
					constraint (SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
						"AdjustmentReasonCodeMustBeOverShortTypeForZeroPaymentAdjustments"
				else
				if (SelectedAdjustedAmount entered)
					constraint (SelectedAdjustmentReason entered)
						"AdjustmentReasonRequiredIfAdjustmentAmountEntered"
			else
			if (ReceivablePayment.IsZeroPaymentAllowAdjustments
			and !ReceivableInvoiceDetailRel.ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
				constraint (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					"Invoice_\Company<ReceivableInvoiceDetailRel.ReceivableInvoiceRel.Company>DoesNotAllowZeroPaymentAdjustments"


	Create Rules



		if (!RecPaySw)	
			if  (GeneralLedgerDate not entered)
				if (Company.DefaultApplicationDate.LatestTransactionPostDate)	
					if (ReceivablePayment.GeneralLedgerDate	> ReceivableInvoiceDetailRel.GeneralLedgerDate)
						GeneralLedgerDate = ReceivablePayment.GeneralLedgerDate
					else
						GeneralLedgerDate = ReceivableInvoiceDetailRel.GeneralLedgerDate
				else
				if (Company.DefaultApplicationDate.PaymentCreditPostDate)
					GeneralLedgerDate	 =	ReceivablePayment.ReceivablePaymentHeader.GeneralLedgerDate
				else
					GeneralLedgerDate	 =	current corporate date

				if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
				and  GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)
					GeneralLedgerDate	 =	CompanySystemClosingControlRel.ValidEntryDate.Begin

			if  (ReceivablePayment.IsZeroPaymentNotAllowAdjustments)
				initialize SelectedAdjustedAmount
				initialize SelectedAdjustmentReason

			if  (ReceivableApplicationSelect.TransactionCompany not entered) 
				ReceivableApplicationSelect.TransactionCompany	 =	ReceivablePayment.Company

				if  (ReceivablePayment.CompanyCustomerRel.NationalAccountIndicator.No
				and  !ReceivablePayment.CompanyCustomerRel.ThirdPartyPayer)

					if (ReceivablePaymentRel.ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies
					and !ReceivableInvoiceRel exists)
						ReceivableApplicationSelect.TransactionCompany = first OpenInvoiceTraverseAcrossCompanyRel.Company
				else
					if (!ReceivableInvoiceRel exists)
						ReceivableApplicationSelect.TransactionCompany	 =	first OpenInvoiceAnyCompanyRel.Company

			constraint (ReceivableInvoiceDetailRel exists)
				"TransactionDoesNotExist;Company=<ReceivableApplicationSelect.TransactionCompany>,Type=<ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType>,Invoice=<ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice>,Sequence=<ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq>"

			constraint (ReceivablePayment.Company.CustomerGroupField.CustomerGroup = ReceivableInvoiceDetailRel.Company.CustomerGroupField.CustomerGroup) 
				"Payment_\Company<ReceivablePayment.Company>AndInvoiceCompany<ReceivableApplicationSelect.TransactionCompany>MustBeInTheSameCustomerGroup<ReceivablePayment.Company.CustomerGroupField.CustomerGroup>ToApplyPayment"


















			if (!ReceivablePayment.CompanyCustomerRel.ThirdPartyPayer)
				if (ReceivablePayment.CompanyCustomerRel.NationalAccountIndicator.No)
					if (ReceivablePaymentRel.ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies)	
						constraint (ReceivablePayment.Customer  = ReceivableInvoiceDetailRel.Customer)	
							"Receivable_\Company<ReceivablePayment.Company>DoesHave_Apply_\Cash_\Across_\Receivable_\CompaniesFlagged._\However,_\Payment_\Customer<ReceivablePayment.Customer>For_\Payment<ReceivablePayment.PaymentNumber>DoesNotMatch_\Transaction_\Customer<ReceivableInvoiceDetailRel.Customer>For_\Transaction<ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice>."	
					else	
						constraint (ReceivablePayment.Company		= ReceivableInvoiceDetailRel.Company
						and		 ReceivablePayment.Customer			= ReceivableInvoiceDetailRel.Customer)
							"Payment_\Company-<ReceivablePayment.Company>_\Customer-<ReceivablePayment.Customer>For_\Payment<ReceivablePayment.PaymentNumber>DoesNotMatch_\Transaction_\Company-<ReceivableInvoiceDetailRel.Company>_\Customer-<ReceivableInvoiceDetailRel.Customer>For_\Transaction<ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice>."	




				else	
				if (ReceivablePaymentRel.ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies	
				and ReceivablePaymentRel.Customer			= ReceivableInvoiceDetailRel.Customer)	
					NextSentence = true	
				else
					constraint (ReceivablePayment.DerivedNationalCompany	= ReceivableInvoiceDetailRel.DerivedNationalCompany
					and		 ReceivablePayment.DerivedNationalCustomer	= ReceivableInvoiceDetailRel.DerivedNationalCustomer)
						"Payment_\Company-<ReceivablePayment.Company>_\Customer-<ReceivablePayment.Customer>IsA_\National_\Account._\However,_\No_\National_\AccountRelationshipExistsBetween_\Payment_\Company-<ReceivablePayment.Company>_\Customer-<ReceivablePayment.Customer>And_\Transaction_\Company-<ReceivableInvoiceDetailRel.Company>_\Customer-<ReceivableInvoiceDetailRel.Customer>"	
			else
				constraint (ReceivablePayment.CompanyCustomerRel.ReceivableProcessingMethod.OpenItem)
					"ThirdPartyPayerMustUseOpenItemProcessingForPaymentCustomer"
				constraint (ReceivableInvoiceDetailRel.CompanyCustomerRel.ReceivableProcessingMethod.OpenItem)
					"ThirdPartyPayerMustUseOpenItemProcessingForInvoiceCustomer"







			if (Company.VendorCreateAndInterfaceToAP)
				if (ReceivableInvoiceDetailRel.SummarizeDetail)
					constraint (!ReceivableInvoiceDetailRel.ARToAPApplicationSelectSumLineRel exists)
						"CannotSelect;UnreleasedARToAPInterfaceRecordsExist"
				else
					constraint (!ReceivableInvoiceDetailRel.ARToAPApplicationSelectRel exists)
						"CannotSelect;UnreleasedARToAPInterfaceRecordsExistForPaymentSequence<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq>"

				constraint (!ReceivablePayment.ARToAPApplicationSelectRel exists)
					"PaymentPendingTransferToAP;CannotSelectForApplication"


			constraint (!ReceivableInvoiceDetailRel.ReceivablePendingAdjustment2Rel exists)
				"CannotSelect;PendingAdjustmentExistsForInvoice<ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice>"

			constraint (ReceivablePayment.Status.Open or ReceivablePayment.Status.Unreleased)
				"PaymentIsNotInOpenOrUnreleasedStatus"

			if  (ReceivablePayment.IsZeroPayment)
				constraint (ReceivablePayment.Status	 < 7)
					"PaymentHasAlreadyBeenApplied"
			else
				constraint (ReceivablePayment.PaymentOpen	 > 0)
					"PaymentIsNotOpen"
				constraint (ReceivablePayment.CanApplyCash)
					"CannotApplyPayment"

			constraint (!ReceivablePayment.CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward)
				"BalanceForwardCustomer;CannotApplyCash"

			constraint (ReceivableInvoiceDetailRel.Status.OpenTransaction)
				"TransactionIsNotOpen"

			constraint (ReceivableInvoiceDetailRel.DerivedOpenAmount	 > 0)
				"TransactionIsNotOpen"

			if (ReceivableInvoiceDetailRel.BankTransactionCode.TransactionOrigin.Receivable)
				constraint (!ReceivableInvoiceDetailRel.BankTransactionCode.BankTransactionType.CashPayment)
					"EFTTransaction;NotAvailableForCashApplication"









			if (ReceivableApplicationSelect.TransactionCompany != Company
			and ReceivableApplicationSelect.TransactionCompany.AccountingEntity != GeneralLedgerCompanyRel.AccountingEntity)
				constraint (InterEntityInvoiceToPaymentRelationRel exists)
					"InterEntityRelationNotDefinedBetweenInvoiceCompany<ReceivableApplicationSelect.TransactionCompany>AndPaymentCompany<Company>"
				constraint (InterEntityPaymentToInvoiceRelationRel exists)
					"InterEntityRelationNotDefinedBetweenPaymentCompany<Company>AndInvoiceCompany<ReceivableApplicationSelect.TransactionCompany>"


	Rule Blocks

		ConvertAmounts

			ExchangeDate = ReceivablePayment.DepositDate


			if (LineEnteredAmount changed
			and LineEnteredAmount != DerivedLineEnteredAmount)

				EnteredAmount = LineEnteredAmount

			LocalEnteredAmount = EnteredAmount			
			LocalAdjustAmount = SelectedAdjustedAmount  





			if (!Company.MultiCurrencyProcessing)
				constraint (ReceivablePayment.OriginalCurrency = ReceivableInvoiceDetailRel.OriginalCurrency)
					"Company<Company>IsNotMultiCurrency"

			if (ApplicationCurrency not entered)
				ApplicationCurrency = DerivedDisplayCurrency

			if (ReceivablePayment.OriginalCurrency != ApplicationCurrency)
				CurrencyWork.TransactionAmount							= EnteredAmount
				CurrencyWork.FromCurrency								= ApplicationCurrency
				CurrencyWork.BaseAmount.ToCurrency						= ReceivablePayment.OriginalCurrency

				PaymentApplicationAmount								= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				PaymentApplicationAmount								= EnteredAmount



			if (ReceivableInvoiceDetailRel.OriginalCurrency != ApplicationCurrency)
				CurrencyWork.TransactionAmount							= EnteredAmount
				CurrencyWork.FromCurrency								= ApplicationCurrency
				CurrencyWork.BaseAmount.ToCurrency						= ReceivableInvoiceDetailRel.OriginalCurrency

				TransactionApplicationAmount							= CurrencyWork.BaseAmount.OutputCurrencyAmount

				if (SelectedAdjustedAmount entered)
					CurrencyWork.TransactionAmount							= SelectedAdjustedAmount
					CurrencyWork.FromCurrency								= ApplicationCurrency
					CurrencyWork.BaseAmount.ToCurrency						= ReceivableInvoiceDetailRel.OriginalCurrency
					LocalSelectedAdjustedAmount								= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				TransactionApplicationAmount							= EnteredAmount
				LocalSelectedAdjustedAmount								= SelectedAdjustedAmount



			if (Company.Currency != ReceivableInvoiceDetailRel.OriginalCurrency)
				CurrencyWork.TransactionAmount							= TransactionApplicationAmount
				CurrencyWork.FromCurrency								= ReceivableInvoiceDetailRel.OriginalCurrency
				CurrencyWork.BaseAmount.EnteredCurrencyRate			= ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				CurrencyWork.BaseAmount.ToCurrency						= Company.Currency

				BaseApplicationAmount									= CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				BaseApplicationAmount									= TransactionApplicationAmount





			if (TransactionApplicationAmount + TotalAdjustments =  ReceivableInvoiceDetailRel.OpenAmount
			and BaseApplicationAmount + TotalAdjustmentsBaseCurrency != ReceivableInvoiceDetailRel.BaseOpenAmount)
				BaseApplicationAmount = ReceivableInvoiceDetailRel.BaseOpenAmount - TotalAdjustmentsBaseCurrency
			else
			if (TransactionApplicationAmount + TotalAdjustments !=  ReceivableInvoiceDetailRel.OpenAmount
			and BaseApplicationAmount + TotalAdjustmentsBaseCurrency = ReceivableInvoiceDetailRel.BaseOpenAmount)
				TransactionApplicationAmount = ReceivableInvoiceDetailRel.OpenAmount - TotalAdjustments

			if (ReceivablePayment.OriginalCurrency != ApplicationCurrency
			and SelectedAdjustedAmount entered)
				CurrencyWork.TransactionAmount							= SelectedAdjustedAmount
				CurrencyWork.FromCurrency								= ApplicationCurrency
				CurrencyWork.BaseAmount.ToCurrency						= ReceivablePayment.OriginalCurrency

				SelectedAdjustedAmount									= CurrencyWork.BaseAmount.OutputCurrencyAmount



			constraint (PaymentApplicationAmount >= 0)
				"ApplicationAmountCannotBeNegative"


			if (ReceivableInvoiceDetailRel.OriginalCurrency != ApplicationCurrency)
				WorkAmount = ReceivableInvoiceDetailRel.DerivedOpenAmount - (TransactionApplicationAmount + LocalSelectedAdjustedAmount)



				if  (WorkAmount < 0
				and  WorkAmount >= -0.02)

					TransactionApplicationAmount							+= WorkAmount

			include EditDetailFinanceStructure

			if  (parentcontext.name = "ReceivableInvoiceDetail"
			and  ReceivableInvoiceDetailRel.SummarizeDetail)
				constraint ((TransactionApplicationAmount + LocalSelectedAdjustedAmount) <= ReceivableInvoiceDetailRel.DerivedOpenAmount)
					"AmountToApplyCannotExceedInvoiceOpenAmount"
			else
			if  (ReceivablePayment.IsZeroPayment)
				constraint ((TransactionApplicationAmount +LocalSelectedAdjustedAmount) <= ReceivableInvoiceDetailRel.DerivedOpenAmount)
					"CannotOverApplyInvoiceForZeroPayment"

			else
				if (!TransientOverApplyInvoice)
					constraint ((TransactionApplicationAmount + LocalSelectedAdjustedAmount) <= ReceivableInvoiceDetailRel.DerivedOpenAmount)
						"AmountToApplyAndAdjustCannotExceedInvoiceOpenAmount<LocalEnteredAmount>+<LocalAdjustAmount>IsGreaterThan<ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency>"


		EditDetailFinanceStructure
			if (Company != ReceivableApplicationSelect.TransactionCompany)
				constraint (Company.DetailedInvoiceAccrualDistributions = ReceivableApplicationSelect.TransactionCompany.DetailedInvoiceAccrualDistributions
				and			Company.DetailedCashDistributions = ReceivableApplicationSelect.TransactionCompany.DetailedCashDistributions
				and			Company.DetailedRNADistributions = ReceivableApplicationSelect.TransactionCompany.DetailedRNADistributions
				and			Company.DetailFinanceStructureOptions = ReceivableApplicationSelect.TransactionCompany.DetailFinanceStructureOptions)
					"Both_companies_must_have_the_same_Detail_Finance_Structure_selections"

			if (Company.DetailedRNADistributions)
				if (ReceivablePayment.ReceivablePaymentCashDetail set exists)
					LocalAnswer 										= ReceivableInvoiceDetailRel.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
					LocalPaymentCashDetailAccount 						= ReceivableInvoiceDetailRel.TransientAdditionalDimensions
					LocalPaymentAmountRemaining							= sum LocalPaymentCashDetailRel.OpenAmount
					for each OtherReceivableApplicationSelectForPaymentRel
						if (each.ReceivableInvoiceDetailRel.DerivedInvoiceFinanceCodeBlockAdditionalDimensions
						and LocalPaymentCashDetailAccount = each.ReceivableInvoiceDetailRel.TransientAdditionalDimensions)
							if (each.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
								LocalPaymentAmountRemaining += each.PaymentApplicationAmount
							else
								LocalPaymentAmountRemaining -= each.PaymentApplicationAmount
					constraint (ReceivablePayment.CashDetailState.Released)
						"Payment_\Cash_\DetailsMustBeReleased.UseThe_\Release_\Cash_\DetailsAction."
					if (ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						constraint (LocalPaymentCashDetailRel exists)
							"Payment_\Cash_\DetailsDoNotAlignWithThisCreditMemo"
					else
						constraint (LocalPaymentCashDetailRel exists)
							"Payment_\Cash_\DetailsDoNotAlignWithThisInvoice"
						constraint (LocalPaymentAmountRemaining >= PaymentApplicationAmount)
							"PaymentCashDetailsAvailableAmount<LocalPaymentAmountRemaining>IsLessThanApplicationAmount<PaymentApplicationAmount>"

		SumReceivableApplicationAdjustmentSelectRelAmounts	
			if (!SumOfReceivableApplicationAdjustmentSelectRelAmountsDone)	
				initialize SumOfReceivableApplicationAdjustmentSelectRelAdjustAmount	
				initialize SumOfReceivableApplicationAdjustmentSelectRelCreditAdjustAmount	
				initialize SumOfReceivableApplicationAdjustmentSelectRelBaseAdjustAmount	
				initialize FirstOfReceivableApplicationAdjustmentSelectRelAdjustmentReason	
					for each ReceivableApplicationAdjustmentSelectRel
						SumOfReceivableApplicationAdjustmentSelectRelAdjustAmount		 += each.AdjustAmount	
						SumOfReceivableApplicationAdjustmentSelectRelCreditAdjustAmount	 += each.CreditAdjustAmount	
						SumOfReceivableApplicationAdjustmentSelectRelBaseAdjustAmount	 += each.BaseAdjustAmount	
						FirstOfReceivableApplicationAdjustmentSelectRelAdjustmentReason	 = first ReceivableApplicationAdjustmentSelectRel.AdjustmentReason	
				SumOfReceivableApplicationAdjustmentSelectRelAmountsDone = true	


		SumSameInvoiceApplicationSelectRelAmounts	
			if (!SumOfSameInvoiceApplicationSelectRelAmountsDone)	
				initialize SumOfSameInvoiceApplicationSelectRelBaseApplicationAmount	
				initialize SumOfSameInvoiceApplicationSelectRelPaymentApplicationAmount	
				initialize SumOfSameInvoiceApplicationSelectRelTransactionApplicationAmount	
					for each SameInvoiceApplicationSelectRel
						SumOfSameInvoiceApplicationSelectRelBaseApplicationAmount			 += each.BaseApplicationAmount	
						SumOfSameInvoiceApplicationSelectRelPaymentApplicationAmount		 += each.PaymentApplicationAmount	
						SumOfSameInvoiceApplicationSelectRelTransactionApplicationAmount	 += each.TransactionApplicationAmount	
				SumOfSameInvoiceApplicationSelectRelAmountsDone = true	


		SumOpenReceivableInvoiceDetailRelAmounts	
			if (!SumOfOpenReceivableInvoiceDetailRelAmountsDone)	
				initialize SumOfOpenReceivableInvoiceDetailRelDerivedApplicationDiscount	
				initialize SumOfOpenReceivableInvoiceDetailRelOpenAmount	
				initialize SumOfOpenReceivableInvoiceDetailRelDerivedSelectDiscountAmount	
				initialize SumOfOpenReceivableInvoiceDetailRelOpenAmountDisplayCurrency	
					for each OpenReceivableInvoiceDetailRel
						SumOfOpenReceivableInvoiceDetailRelDerivedApplicationDiscount	 += each.DerivedApplicationDiscount	
						SumOfOpenReceivableInvoiceDetailRelOpenAmount					 += each.OpenAmount	
						SumOfOpenReceivableInvoiceDetailRelDerivedSelectDiscountAmount	 += each.DerivedSelectDiscountAmount	
						SumOfOpenReceivableInvoiceDetailRelOpenAmountDisplayCurrency	 += each.OpenAmountDisplayCurrency	
				SumOfOpenReceivableInvoiceDetailRelAmountsDone = true	

		SumEligibleOverApplyOpenReceivableInvoiceDetailRelAmounts
			if (!SumOfEligibleOverApplyOpenReceivableInvoiceDetailRelAmountsDone)
				initialize SumOfEligibleOverApplyReceivableInvoiceDetailRelOpenAmountDisplayCurrency
					for each EligibleOverApplyOpenReceivableInvoiceDetailRel
						SumOfEligibleOverApplyReceivableInvoiceDetailRelOpenAmountDisplayCurrency  += each.OpenAmountDisplayCurrency
				SumOfEligibleOverApplyOpenReceivableInvoiceDetailRelAmountsDone = true

		SumReceivableInvoiceRelOpenReceivableInvoiceDetailRelAmounts	
			if (!SumOfReceivableInvoiceRelOpenReceivableInvoiceDetailRelAmountsDone)	
				initialize SumOfReceivableInvoiceRelOpenReceivableInvoiceDetailRelOpenAmount	
					for each ReceivableInvoiceRel.OpenReceivableInvoiceDetailRel
						SumOfReceivableInvoiceRelOpenReceivableInvoiceDetailRelOpenAmount	 += each.OpenAmount	
				SumOfReceivableInvoiceRelOpenReceivableInvoiceDetailRelAmountsDone = true	


		SumReceivableApplicationSelectRelAmounts	
			if (!SumOfReceivableApplicationSelectRelAmountsDone)	
				initialize SumOfReceivableApplicationSelectRelTransactionApplicationAmount	
					for each ReceivableApplicationSelectRel
						SumOfReceivableApplicationSelectRelTransactionApplicationAmount	 += each.TransactionApplicationAmount	
				SumOfReceivableApplicationSelectRelAmountsDone = true	

		CreateSelectViaSpeedEntry
			if (LocalApplicationAmount	 >	0
			and !each.ARToAPApplicationSelectRel exists
			and this instance.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq	 !=	each.ReceivableInvoiceDetail.PaymentSeq)
				invoke Create ReceivableApplicationSelect
					invoked.Company																			 =	ReceivablePayment.Company
					invoked.ReceivablePaymentHeader															 =	ReceivablePaymentHeader
					invoked.ReceivablePayment																 =	ReceivablePayment
					invoked.ReceivableApplicationSelect.TransactionCompany									 =	each.ReceivableInvoiceDetail.Company
					invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 =	each.ReceivableInvoiceDetail.Invoice
					invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq					 =	each.ReceivableInvoiceDetail.PaymentSeq
					invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq					 =	each.ReceivableInvoiceDetail.PaymentSeq
					if (LocalAdjustmentAmount >= each.OpenAmountDisplayCurrency)
						initialize invoked.EnteredAmount
					else
					if ((LocalApplicationAmount + LocalAdjustmentAmount)	 <	each.OpenAmountDisplayCurrency)
						invoked.EnteredAmount													 =	LocalApplicationAmount
					else
						invoked.EnteredAmount													 =	each.OpenAmountDisplayCurrency - LocalAdjustmentAmount

					invoked.ApplicationCurrency													 =	ApplicationCurrency

					if (LocalAdjustmentAmount	 !=	0)
						invoked.SelectedAdjustmentReason										 =	SelectedAdjustmentReason
						if (LocalAdjustmentAmount	 >=	each.OpenAmountDisplayCurrency)
							invoked.SelectedAdjustedAmount										 =	each.OpenAmountDisplayCurrency
						else
							invoked.SelectedAdjustedAmount										 =	LocalAdjustmentAmount

				if (LocalAdjustmentAmount	 <	each.OpenAmountDisplayCurrency)
					if ((LocalApplicationAmount + LocalAdjustmentAmount)	 <	each.OpenAmountDisplayCurrency)
						LocalApplicationAmount	-=	LocalApplicationAmount
					else
						LocalApplicationAmount	-=	(each.OpenAmountDisplayCurrency - LocalAdjustmentAmount)

				if (LocalAdjustmentAmount		 !=	0)
					if (LocalAdjustmentAmount	 >=	each.OpenAmountDisplayCurrency)
						LocalAdjustmentAmount											 -=	each.OpenAmountDisplayCurrency
					else
						initialize LocalAdjustmentAmount

	Derived Fields

		CashAppMsg51 is a MessageField
			restricted
			"ReceivablePaymentBatchDoesNotExist"

		CashAppMsg55 is a MessageField
			restricted
			"SelectedApplicationsOnly=Y;NoOptionsCanBeEntered"

		CashAppMsg56 is a MessageField
			restricted
			"AllAlgorithmOptionsRequired"

		CashAppMsg57 is a MessageField
			restricted
			"Batchnbrcannotbeenteredwithlaststatementoption"

		CashAppMsg61 is a MessageField
			restricted
			"Variancecannotbenegative"

		CashAppMsg62 is a MessageField
			restricted
			"Reasoncodedoesnotexist"

		CashAppMsg63 is a MessageField
			restricted
			"Reasoncodereasoncodetypeisnotanadjustment"

		CashAppMsg64 is a MessageField
			restricted
			"Reasoncode;reasoncodetypecannotbechargeback"

		CashAppMsg67 is a MessageField
			restricted
			"CombinationInvoicesCannotBeGreaterThanMaximumInvoices"

		CashAppMsg68 is a MessageField
			restricted
			"OperatorRequired"

		CashAppMsg69 is a MessageField
			restricted
			"OperatorDoesNotExist"

		CashAppMsg70 is a MessageField
			restricted
			"OperatorDoesNotHaveActiveStatus"

		CashAppMsg71 is a MessageField
			restricted
			"Gain-lossreasoncodedoesnotexist"

		CashAppMsg72 is a MessageField
			restricted
			"Overrideapplymethodcannotenteralgorithmoptions"

		DerivedDistributionSetSum is a DerivedField 
			type is like InternationalAmount
			return sum PaymentApplyDistribution set.DistributionAmount.CurrencyAmount

		DerivedDisplayCurrency				is a DerivedField
			type is like Currency
			restricted
			LocalCurrency = actor.context.Currency
			if (LocalCurrency entered)
				return LocalCurrency
			return ReceivablePaymentRel.OriginalCurrency


		DerivedEnteredAmount				is a DerivedField	
			type is like InternationalAmount
			restricted
			if (ReceivableInvoiceDetailRel.SummarizeDetail)
				CurrencyWork.TransactionAmount				 = SumLineTransactionApplicationAmount
			else
				CurrencyWork.TransactionAmount				 = TransactionApplicationAmount
			CurrencyWork.FromCurrency						 = ReceivableInvoiceDetailRel.OriginalCurrency
			CurrencyWork.BaseAmount.ToCurrency				 = DerivedDisplayCurrency
			return CurrencyWork.BaseAmount.OutputCurrencyAmount


		DerivedLineEnteredAmount			is a DerivedField
			type is like InternationalAmount
			restricted
			CurrencyWork.TransactionAmount					 = TransactionApplicationAmount
			CurrencyWork.FromCurrency						 = ReceivableInvoiceDetailRel.OriginalCurrency
			CurrencyWork.BaseAmount.ToCurrency				 = DerivedDisplayCurrency
			return CurrencyWork.BaseAmount.OutputCurrencyAmount

		DerivedInvoiceDetailTypeForApplication is a DerivedField 
			type is AlphaUpper size 1
			restricted
			return ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType

		DerivedInvoiceDetailSequenceForApplication is a DerivedField 
			type is Numeric size 6
			restricted
			return ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq

		DerivedReceivableCompanyForContext is a DerivedField 
			type is Numeric size 12
			restricted
			return Company

		DerivedReceivableBatchForContext is a DerivedField 
			type is Numeric size 12
			restricted
			return ReceivablePaymentHeader

		DerivedReceivableInvoiceForContext is a DerivedField 
			type is Numeric size 6
			restricted
			return ReceivablePayment

		DerivedDistributionSetState is a DerivedField 
			type is Numeric size 1
			restricted
			if (!InvoiceOriginIsFundAccountingSupported)
				return 3
			else
			if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
				if (DerivedDistributionSetSum = TransactionApplicationAmount)
					return 2	
				else
					return 1	
			else
				if (DerivedDistributionSetSum = (TransactionApplicationAmount * -1))
					return 2
				else
					return 1

		DerivedDistributionSetDifference is a DerivedField 
			type is like InternationalAmount
			if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
				return TransactionApplicationAmount - DerivedDistributionSetSum
			else
				return ((TransactionApplicationAmount * -1) - DerivedDistributionSetSum)

		DerivedFundDistributionSetState is a DerivedField 
			type is AlphaUpper size 2
			if (AllowSelectDistributionSet)
				return "NP"
			else
				return ""

		TotalAdjustments					is a DerivedField	
			type is like InternationalAmount
			include SumReceivableApplicationAdjustmentSelectRelAmounts	

			return (SumOfReceivableApplicationAdjustmentSelectRelAdjustAmount)	


		TotalCreditAdjustments				is a DerivedField	
			type is like InternationalAmount
			include SumReceivableApplicationAdjustmentSelectRelAmounts	

			return (SumOfReceivableApplicationAdjustmentSelectRelCreditAdjustAmount)	


		TotalAdjustmentsBaseCurrency		is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			include SumReceivableApplicationAdjustmentSelectRelAmounts	

			return (SumOfReceivableApplicationAdjustmentSelectRelBaseAdjustAmount)	


		TotalAdjustmentsDisplayCurrency		is a DerivedField	
			type is like InternationalAmount
			if (ReceivableInvoiceDetailRel.OriginalCurrency	 != DerivedDisplayCurrency)
				CurrencyWork.TransactionAmount				 = TotalAdjustments
				CurrencyWork.FromCurrency					 = ReceivableInvoiceDetailRel.OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency			 = DerivedDisplayCurrency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				return TotalAdjustments


		FirstAdjustmentReason				is a DerivedField	
			type is like ReceivableReason
			restricted
			include SumReceivableApplicationAdjustmentSelectRelAmounts	

			return FirstOfReceivableApplicationAdjustmentSelectRelAdjustmentReason	


		SelectAmount						is a DerivedField	
			type is like InternationalAmount
			restricted
			return (TotalAdjustments + PaymentApplicationAmount)


		DerivedPaymentApplicationAmount		is a DerivedField	
			type is like InternationalAmount
			restricted
			if (ReceivableInvoiceDetailRel.SummarizeDetail)
				return SumLinePaymentApplicationAmount
			else
				return PaymentApplicationAmount


		SumLinePaymentApplicationAmount		is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumSameInvoiceApplicationSelectRelAmounts	

			return (SumOfSameInvoiceApplicationSelectRelPaymentApplicationAmount)	


		DerivedTransactionApplicationAmount	is a DerivedField	
			type is like InternationalAmount
			restricted
			if (ReceivableInvoiceDetailRel.SummarizeDetail)
				return SumLineTransactionApplicationAmount
			else
				return TransactionApplicationAmount


		SumLineTransactionApplicationAmount	is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumSameInvoiceApplicationSelectRelAmounts	

			return (SumOfSameInvoiceApplicationSelectRelTransactionApplicationAmount)	


		DerivedBaseApplicationAmount		is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			if (ReceivableInvoiceDetailRel.SummarizeDetail)
				return SumLineBaseApplicationAmount
			else
				return BaseApplicationAmount


		SumLineBaseApplicationAmount		is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			include SumSameInvoiceApplicationSelectRelAmounts	

			return (SumOfSameInvoiceApplicationSelectRelBaseApplicationAmount)	


		InvoiceHeaderDiscountAmount			is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumOpenReceivableInvoiceDetailRelAmounts	

			return (SumOfOpenReceivableInvoiceDetailRelDerivedApplicationDiscount)	


		InvoiceHeaderDiscountAmountDisplayCurrency	is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumOpenReceivableInvoiceDetailRelAmounts	

			return (SumOfOpenReceivableInvoiceDetailRelDerivedSelectDiscountAmount)	


		InvoiceHeaderOpenAmount				is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumOpenReceivableInvoiceDetailRelAmounts	

			return (SumOfOpenReceivableInvoiceDetailRelOpenAmount)	


		InvoiceHeaderOpenAmountDisplayCurrency		is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumOpenReceivableInvoiceDetailRelAmounts	

			return (SumOfOpenReceivableInvoiceDetailRelOpenAmountDisplayCurrency)	


		NumberOfAdjustments					is a DerivedField
			type is like InternationalAmount
			restricted
			return (instance count of ReceivableApplicationAdjustmentSelectRel)


		TotalOpenInvoice					is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumReceivableInvoiceRelOpenReceivableInvoiceDetailRelAmounts	

			return (SumOfReceivableInvoiceRelOpenReceivableInvoiceDetailRelOpenAmount)	


		NumberOfOpenInvoices				is a DerivedField
			type is like InternationalAmount
			restricted
			return (instance count of OpenReceivableInvoiceDetailRel)


		TotalOpenSelect						is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumReceivableApplicationSelectRelAmounts	

			return (SumOfReceivableApplicationSelectRelTransactionApplicationAmount)	


		DerivedRoundTo						is a DerivedField
			type is Decimal 5.4
			restricted
			if (ReceivablePayment.OriginalCurrency.NumberOfDecimals = 2)
				return .01
			else
			if (ReceivablePayment.OriginalCurrency.NumberOfDecimals = 0)
				return 1
			else
			if (ReceivablePayment.OriginalCurrency.NumberOfDecimals = 3)
				return .001
			else
			if (ReceivablePayment.OriginalCurrency.NumberOfDecimals = 4)
				return .0001

		DerivedOverApplyInvoiceHeaderOpenAmount				is a DerivedField
			type is like InternationalAmount
			restricted
			include SumEligibleOverApplyOpenReceivableInvoiceDetailRelAmounts
			return SumOfEligibleOverApplyReceivableInvoiceDetailRelOpenAmountDisplayCurrency

		DetailOpenAmountDisplayCurrency				is a DerivedField
			type is like InternationalAmount
			if (DerivedDisplayCurrency != ReceivableInvoiceDetailRel.OriginalCurrency)
				LocalCurrencyTable										= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.CurrencyTable
				CurrencyWork1.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork1.ExchangeDate								= DerivedExchangeDate
				CurrencyWork1.TransactionAmount							= ReceivableInvoiceDetailRel.OpenAmount
				CurrencyWork1.FromCurrency								= ReceivableInvoiceDetailRel.OriginalCurrency
				CurrencyWork1.BaseAmount.ToCurrency						= DerivedDisplayCurrency
				return CurrencyWork1.BaseAmount.OutputCurrencyAmount
			else
				return ReceivableInvoiceDetailRel.OpenAmount

		DerivedExchangeDate							is a DerivedField
			type is Date
			restricted
			if (ReceivablePaymentRel.DepositDate entered)
				return ReceivablePaymentRel.DepositDate

	Relations


		CompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = Company

		RASelectTransactionCompanyCompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = ReceivableApplicationSelect.TransactionCompany


		ReceivableInvoiceDetailRel
			classic name is AROITEMS
			one-to-one relation to ReceivableInvoiceDetail
			required
			Field Mapping uses symbolic key
				related.Company														 =	ReceivableApplicationSelect.TransactionCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType			 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceDetail.Invoice								 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq							 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq

		OpenInvoiceAnyCompanyRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses OpenByReceivableInvoiceDetail
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	related.ReceivableInvoiceDetail.Invoice							 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice)

		OpenInvoiceTraverseAcrossCompanyRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses OpenByCustomer
				related.Customer													 =  ReceivablePayment.Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	related.ReceivableInvoiceDetail.Invoice							 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice)

		ReceivablePaymentRel
			one-to-one relation to ReceivablePayment

			required
			Field Mapping uses symbolic key
				related.Company								 =	ReceivableApplicationSelect.ReceivablePayment.Company
				related.ReceivablePaymentHeader				 =	ReceivableApplicationSelect.ReceivablePayment.ReceivablePaymentHeader
				related.ReceivablePayment					 =	ReceivableApplicationSelect.ReceivablePayment.ReceivablePayment

		LocalPaymentCashDetailRel
			one-to-many relation to ReceivablePaymentCashDetail
			Field Mapping uses ByAdditionalDimensionsCodeBlock
				related.Company														= Company
				related.ReceivablePaymentHeader										= ReceivablePaymentHeader
				related.ReceivablePayment											= ReceivablePayment
				related.AdditionalDimensionsCodeBlock.ToAccountingEntity			= LocalPaymentCashDetailAccount.ToAccountingEntity
                related.AdditionalDimensionsCodeBlock.AccountingUnit				= LocalPaymentCashDetailAccount.AccountingUnit
                related.AdditionalDimensionsCodeBlock.GeneralLedgerChartAccount		= LocalPaymentCashDetailAccount.GeneralLedgerChartAccount
                related.AdditionalDimensionsCodeBlock.Project						= LocalPaymentCashDetailAccount.Project
                related.AdditionalDimensionsCode									= LocalPaymentCashDetailAccount.DimensionCode

		UnreleasedPaymentCashDetailRel
			one-to-many relation to ReceivablePaymentCashDetail
			Field Mapping uses ByAdditionalDimensionsCodeBlock
				related.Company														= Company
				related.ReceivablePaymentHeader										= ReceivablePaymentHeader
				related.ReceivablePayment											= ReceivablePayment
			Instance Selection
				where (related.Status.Unreleased)

		ReceivableInvoiceRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses Set6
				related.Company								 =	ReceivableApplicationSelect.TransactionCompany
				related.AlternateReceivableInvoiceType		 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoice					 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice







		OpenReceivableInvoiceDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//IEFIN-106354 replacing symbolic key with Set3, since it is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company														 =	ReceivableApplicationSelect.TransactionCompany
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	related.ReceivableInvoiceDetail.Invoice							 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice

				and	!related.HasReceivableApplicationSelect)










		ReceivableApplicationAdjustmentSelectRel
			classic name is ARSADJUST
			one-to-many relation to ReceivableApplicationAdjustmentSelect
			delete cascades
			Field Mapping uses Set2 
				related.Company = ReceivableApplicationSelect.TransactionCompany
				related.ReceivableApplicationAdjustmentSelect.TransType				 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplicationAdjustmentSelect.Invoice				 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
				related.ReceivableApplicationAdjustmentSelect.PaymentSeq			 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq

		NewReceivableApplicationRel
			one-to-one relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company											 =	ReceivableApplicationSelect.TransactionCompany
				related.ReceivableApplication.TransType					 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplication.Invoice					 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
				related.ReceivableApplication.PaymentSeq				 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableApplication.BatchNumber				 =	ReceivablePaymentHeader
				related.ReceivableApplication.ApplicationSequence		 =	LocalApplicationSequence

		AssociatedReceivableGLDistributionRel 
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = ReceivableApplicationSelect.TransactionCompany
				related.BatchNumber										 = ReceivableInvoiceDetailRel.ReceivableInvoiceRel.BatchNumber
				related.TransType										 = ReceivableInvoiceDetailRel.AlternateReceivableInvoiceType
				related.Invoice											 = ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
			Instance Selection
				where (related.AssociatedLine							 = ReceivableInvoiceDetailRel.AssociatedLine
				and	   related.AccumulationType.Detail
				and	   related.DistributionSource.AccountsReceivable
				and	   related.DistributionAmount.CurrencyAmount entered)

		SameInvoiceApplicationSelectRel
			one-to-many relation to ReceivableApplicationSelect
			Field Mapping uses symbolic key
				related.Company																					 =	Company	
				related.ReceivablePaymentHeader																	 =	ReceivablePaymentHeader	
				related.ReceivablePayment																		 =	ReceivablePayment	
			Instance Selection



				where (related.ReceivableApplicationSelect.TransactionCompany									 =	ReceivableApplicationSelect.TransactionCompany
				and	 related.ReceivableApplicationSelect.TransactionCompany										 =	ReceivableApplicationSelect.TransactionCompany
				and	 related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	 related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
				and	 related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ProjectContract				 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ProjectContract
				and	 related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Project						 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Project
				and	 related.ReceivableInvoiceDetailRel.Sign													 =	ReceivableInvoiceDetailRel.Sign)

		ReceivableApplicationSelectRel
			one-to-many relation to ReceivableApplicationSelect
			Field Mapping uses Set2
			Instance Selection
				where (related.ReceivableApplicationSelect.TransactionCompany									 =	ReceivableApplicationSelect.TransactionCompany
				and	related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice							 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice)

		OtherReceivableApplicationSelectForPaymentRel
			one-to-many relation to ReceivableApplicationSelect
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivablePaymentHeader		= ReceivablePaymentHeader
				related.ReceivablePayment			= ReceivablePayment
			Instance Selection
				where (related.UniqueID			   != UniqueID)

		ReceivableOperatorRel
			one-to-one relation to ReceivableOperator
			Field Mapping uses symbolic key
				related.Company							 =	Company
				related.ReceivableOperator				 =	ReceivableOperator

		LocalPaymentApplyDistributionDescendingRel 
			one-to-many relation to PaymentApplyDistribution
			Field Mapping uses PaymentApplyDistributionDescending
				related.Company													 							= Company
				related.ReceivablePaymentHeader									 							= ReceivablePaymentHeader
				related.ReceivablePayment										 							= ReceivablePayment
				related.ReceivableApplicationSelect.TransactionCompany									 	= ReceivableApplicationSelect.TransactionCompany
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 	= ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 	= ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq					 	= ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq

		LocalCashResultRel
			one-to-one relation to CashApplicationResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			 =	LocalFinanceEnterpriseGroup
				related.CashApplicationResult			 =	LocalResult

		InterEntityInvoiceToPaymentRelationRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity			= GeneralLedgerTransactionCompanyRel.AccountingEntity
				related.ToAccountingEntity			= GeneralLedgerCompanyRel.AccountingEntity

		InterEntityPaymentToInvoiceRelationRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity			= GeneralLedgerCompanyRel.AccountingEntity
				related.ToAccountingEntity			= GeneralLedgerTransactionCompanyRel.AccountingEntity

		EligibleOverApplyOpenReceivableInvoiceDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3	//IEFIN-106354 replacing symbolic key with Set3, since it is defined with an Instance Selection of "IsOpen", which is defined as "when (Status.OpenTransaction)"
				related.Company														 =	ReceivableApplicationSelect.TransactionCompany
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	related.ReceivableInvoiceDetail.Invoice							 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice

				and	related.IsEligibleForOverCashApplication)

		GLCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup						 = LocalGeneralLedgerCompanyGroup
				related.Company											 = Company

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company	

		GeneralLedgerTransactionCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= ReceivableApplicationSelect.TransactionCompany	

		CompanySecurityGroupMemberRel	
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company


	Conditions

		SecurityGroupAllowsAccess	
			when (actor.context.CompanySecurityGroup = blank
			or	   CompanySecurityGroupMemberRel exists)

		IsNationalAccountApplication
			restricted
			when (ReceivableApplicationSelect.ReceivableInvoiceDetail.Customer	 !=	ReceivableApplicationSelect.ReceivablePayment.Customer)

		AdjustmentsExist
			restricted
			when (ReceivableApplicationAdjustmentSelectRel exists)

		ShowAdjustments
			restricted
			when (!ReceivablePayment.IsZeroPaymentNotAllowAdjustments
			or	ElectronicFundsTransfer)

		AllowSelectDistributionSet 
			restricted
			when (Company.SelectFundDistributionSet
			and   Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting)

		AllowMatchDistributionsForFundAccounting 
			restricted
			when (AllowSelectDistributionSet
			and   ReceivableInvoiceDetailRel.IsBillingInvoice)

		InvoiceOriginIsFundAccountingSupported
			restricted
			when (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.OriginIsFundAccountingSupported
			and   ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel exists)

		ShowDistributionSet
			restricted
			when (AllowSelectDistributionSet
			and   InvoiceOriginIsFundAccountingSupported)

		IsOverApplied
			restricted
			when (first ReceivableApplicationAdjustmentSelectRel.AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)

		IsSummarizeDetail
			restricted
			when (any OpenReceivableInvoiceDetailRel.SummarizeDetail)

		IsOverAppliedInvoiceSelect
			restricted
			when (EnteredAmount > DetailOpenAmountDisplayCurrency
			and   ReceivableInvoiceDetailRel.IsEligibleForOverCashApplication)

		GLCompanyGroupMemberRelExists
			restricted
			when (GLCompanyGroupMemberRel exists)

		IsAttachmentRequired
			restricted
			when (ReceivableApplicationAdjustmentSelectRel.AdjustmentReason.AttachmentRequired)
			
		IsAttachmentEntered
			restricted
			when (ReceivableApplicationAdjustmentSelectRel.Attachment.File entered)
	
	Sets

		Set2
			indexed
			Sort Order
				ReceivableApplicationSelect

		Set3
			indexed
			Sort Order
				Company
				ReceivablePaymentHeader
				ReceivablePayment
				SelectSequence

		Set4			
			indexed
			Sort Order
				ReceivableApplicationSelect.TransactionCompany
				ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
				ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq


	Actions

		Create is a Create Action
			restricted
			Entrance Rules

				LocalCurrencyTable = Company.DerivedCurrencyTable
				include ConvertAmounts
				constraint (PaymentApplicationAmount entered)
					"AmountIsRequired"

			Exit Rules
				if  (!ReceivablePayment.IsZeroPaymentNotAllowAdjustments
				and (SelectedAdjustedAmount entered
				or   SelectedAdjustmentReason entered))

					invoke Create ReceivableApplicationAdjustmentSelect
						invoked.ReceivableApplicationAdjustmentSelect.Company			 =	ReceivableApplicationSelect.TransactionCompany
						invoked.ReceivableApplicationAdjustmentSelect.TransType			 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.ReceivableApplicationAdjustmentSelect.Invoice			 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
						invoked.ReceivableApplicationAdjustmentSelect.PaymentSeq		 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableApplicationAdjustmentSelect.BatchNumber		 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceRel.BatchNumber
						invoked.AdjustmentReason										 =	SelectedAdjustmentReason
						invoked.CreditAdjustAmount										 =	SelectedAdjustedAmount  
						if (SelectedAdjustmentReasonARIncomeWithholdingCode entered	
						or SelectedAdjustmentReasonARIncomeWithholdingDocumentNumber entered)	
							invoked.ARIncomeWithholdingCode					 = SelectedAdjustmentReasonARIncomeWithholdingCode	
							invoked.ARIncomeWithholdingDocumentNumber		 = SelectedAdjustmentReasonARIncomeWithholdingDocumentNumber	
						invoked.ReceivableOperator										 =	ReceivableOperator
						invoked.ApplicationCurrency										 =	ReceivablePayment.OriginalCurrency
						invoked.BypassExceedEdit										 =	true
						invoked.TransientToCurrency										 =	ReceivableInvoiceDetailRel.OriginalCurrency

		CreateFromEFT is a Create Action
			restricted

		Update is an Update Action
			Entrance Rules
				LocalCurrencyTable = Company.DerivedCurrencyTable
				include ConvertAmounts
			Action Rules
				if (!IsOverApplied)
					constraint (TransactionApplicationAmount + TotalAdjustments <= ReceivableInvoiceDetailRel.OpenAmount)
						"AmountToApplyCannotExceedInvoiceOpenAmount"
			Exit Rules	
				if (SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort
				and Company.PreventWriteOffBeforeTransactionGLDate
				and ReceivableInvoiceDetailRel exists)
					constraint (GeneralLedgerDate >= ReceivableInvoiceDetailRel.GeneralLedgerDate)
						"Adjustment_\Global_\Ledger_\Date<GeneralLedgerDate>MustBeGreaterThanOrEqualToInvoice_\Global_\Ledger_\Date<ReceivableInvoiceDetailRel.GeneralLedgerDate>"


		CashApplicationUpdate is an Update Action
			Entrance Rules
				LocalCurrencyTable = Company.DerivedCurrencyTable
				include ConvertAmounts

			Action Rules
				if (!ReceivablePayment.IsZeroPaymentAllowAdjustments)
					constraint (TransactionApplicationAmount + LocalSelectedAdjustedAmount <= ReceivableInvoiceDetailRel.OpenAmount)
						"AmountToApplyCannotExceedInvoiceOpenAmount"



				if (ReceivableApplicationAdjustmentSelectRel exists)
					constraint (NumberOfAdjustments <= 1)
						"MultipleAdjustmentsExist;UseDetailScreenToChange"
					if (SelectedAdjustedAmount = 0)

						invoke JustPurge ReceivableApplicationAdjustmentSelectRel
					else

					if (SelectedAdjustedAmount != ReceivableApplicationAdjustmentSelectRel.AdjustAmount)
						invoke JustUpdate ReceivableApplicationAdjustmentSelectRel
							invoked.AdjustmentReason							= SelectedAdjustmentReason
							invoked.CreditAdjustAmount							= SelectedAdjustedAmount
							invoked.ApplicationCurrency							= ReceivablePayment.OriginalCurrency
							if (SelectedAdjustmentReasonARIncomeWithholdingCode entered	
							or SelectedAdjustmentReasonARIncomeWithholdingDocumentNumber entered)	
								invoked.ARIncomeWithholdingCode							 = SelectedAdjustmentReasonARIncomeWithholdingCode	
								invoked.ARIncomeWithholdingDocumentNumber				 = SelectedAdjustmentReasonARIncomeWithholdingDocumentNumber	
				else
				if (SelectedAdjustedAmount != 0)
					invoke Create ReceivableApplicationAdjustmentSelect
						invoked.ReceivableApplicationAdjustmentSelect.Company			= ReceivableApplicationSelect.TransactionCompany
						invoked.ReceivableApplicationAdjustmentSelect.TransType			= ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.ReceivableApplicationAdjustmentSelect.Invoice			= ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
						invoked.ReceivableApplicationAdjustmentSelect.PaymentSeq		= ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableApplicationAdjustmentSelect.BatchNumber		= ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceRel.BatchNumber
						invoked.AdjustmentReason										= SelectedAdjustmentReason
						invoked.CreditAdjustAmount										= SelectedAdjustedAmount  
						if (SelectedAdjustmentReasonARIncomeWithholdingCode entered	
						or SelectedAdjustmentReasonARIncomeWithholdingDocumentNumber entered)	
							invoked.ARIncomeWithholdingCode							 = SelectedAdjustmentReasonARIncomeWithholdingCode	
							invoked.ARIncomeWithholdingDocumentNumber				 = SelectedAdjustmentReasonARIncomeWithholdingDocumentNumber	
						invoked.ReceivableOperator										= ReceivableOperator
						invoked.ApplicationCurrency										= ReceivablePayment.OriginalCurrency

			Exit Rules	
				if (SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort
				and Company.PreventWriteOffBeforeTransactionGLDate
				and ReceivableInvoiceDetailRel exists)
					constraint (GeneralLedgerDate >= ReceivableInvoiceDetailRel.GeneralLedgerDate)
						"Adjustment_\Global_\Ledger_\Date<GeneralLedgerDate>MustBeGreaterThanOrEqualToInvoice_\Global_\Ledger_\Date<ReceivableInvoiceDetailRel.GeneralLedgerDate>"

		Purge is a Purge Action
			default label is "Unselect"
			Entrance Rules
				invoke JustPurge ReceivableApplicationAdjustmentSelectRel

				if  (AllowSelectDistributionSet) 
					invoke Purge PaymentApplyDistribution set

		MatchDistributionsForFundAccounting is an Instance Action 
			default label is "MatchDistributions"
			valid when (AllowMatchDistributionsForFundAccounting)
			Local Fields
				LocalAmountRemaining		is like InternationalAmount
				LocalDistributionOpenAmount	is like InternationalAmount
				LocalSelectedAmount			is like InternationalAmount
				LocalMatchSuccessful		is Boolean
			Action Rules

				invoke Delete PaymentApplyDistribution set
				initialize LocalMatchSuccessful

				if (ReceivableInvoiceDetailRel.AssociatedLine entered)
					LocalMatchSuccessful = true

					if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
						LocalAmountRemaining = TransactionApplicationAmount
					else
						LocalAmountRemaining = TransactionApplicationAmount * -1

					for each AssociatedReceivableGLDistributionRel
						LocalDistributionOpenAmount = each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount

						if (each.DistributionAmount.CurrencyAmount > 0)
							if (LocalAmountRemaining < LocalDistributionOpenAmount)
								LocalSelectedAmount 	= LocalAmountRemaining
								LocalAmountRemaining 	= 0
							else
								LocalSelectedAmount 	= LocalDistributionOpenAmount
								LocalAmountRemaining   -= LocalDistributionOpenAmount
						else
							if (LocalAmountRemaining > LocalDistributionOpenAmount)
								LocalSelectedAmount 	= LocalAmountRemaining
								LocalAmountRemaining 	= 0
							else
								LocalSelectedAmount 	= LocalDistributionOpenAmount
								LocalAmountRemaining   -= LocalDistributionOpenAmount

						if (LocalSelectedAmount != 0)
							invoke Create PaymentApplyDistribution set
								invoked.OriginalLastDistributionSequence				= each.LastDistributionSequence
								invoked.OriginalReceivableGLDistribution				= each.ReceivableGLDistribution
								invoked.ApplyFundDistributionAccount					= each.GeneralLedgerAccount
								invoked.DistributionAmount.CurrencyAmount 				= LocalSelectedAmount
								invoked.DistributionAmount.ExchangeDate					= each.DistributionAmount.ExchangeDate
								invoked.OriginalCurrency								= each.OriginalCurrency

						if (LocalAmountRemaining = 0)
							end for each

					if (LocalAmountRemaining != 0)
						LocalMatchSuccessful = false

				constraint (LocalMatchSuccessful)
					"Distribution_MatchWasNotSuccessful.EitherProrateDistributionsOrSelectDistributionsManually."


		ProrateAndSelectAll is an Instance Action 
			default label is "ProrateDistributions"
			valid when (AllowSelectDistributionSet)
			Local Fields
				LocalAdjustmentPercent 		is a Percent
				LocalInvoiceOpenAmount 		is an InternationalAmount
				LocalSumInvoiceFundApplied 	is an InternationalAmount
				LocalApplyAmount 			is an InternationalAmount
				LocalSumApplyAmounts 		is an InternationalAmount
				LocalNewAmount 				is an InternationalAmount
				LocalPreviousFundApplied	is an InternationalAmount
				LocalApplicationAmount		is an InternationalAmount
				LocalDifference				is an InternationalAmount
				LocalSumRoundAmounts 		is an InternationalAmount
				LocalAmountToAdd			is an InternationalAmount
				LocalDistributionOpenAmount	is an InternationalAmount
				LocalOldAmount				is an InternationalAmount


			Action Rules

				invoke Delete PaymentApplyDistribution set

				LocalSumInvoiceFundApplied 	= sum ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel.FundAppliedAmount

				if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
					LocalInvoiceOpenAmount 	= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount - LocalSumInvoiceFundApplied
				else
					LocalInvoiceOpenAmount 	= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount + LocalSumInvoiceFundApplied

				if (LocalInvoiceOpenAmount = TransactionApplicationAmount)
					for each ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel
						if ((each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount) != 0)
							invoke Create PaymentApplyDistribution set
								invoked.OriginalLastDistributionSequence				= each.LastDistributionSequence
								invoked.OriginalReceivableGLDistribution				= each.ReceivableGLDistribution
								invoked.ApplyFundDistributionAccount					= each.GeneralLedgerAccount
								invoked.DistributionAmount.CurrencyAmount 				= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount
								invoked.DistributionAmount.ExchangeDate					= each.DistributionAmount.ExchangeDate
								invoked.OriginalCurrency								= each.OriginalCurrency
				else
					for each ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ProrateDistributionsRel
						LocalAdjustmentPercent 	= ((each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount) / LocalInvoiceOpenAmount)
						LocalApplyAmount		= TransactionApplicationAmount * LocalAdjustmentPercent

						round LocalApplyAmount to nearest DerivedRoundTo

						if (LocalApplyAmount > 0
						and LocalApplyAmount > (each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount))
							LocalApplyAmount	= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount

						if (LocalApplyAmount < 0
						and LocalApplyAmount < (each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount))
							LocalApplyAmount	= each.DistributionAmount.CurrencyAmount - each.FundAppliedAmount

						if (LocalApplyAmount != 0)
							LocalSumApplyAmounts += LocalApplyAmount
							invoke Create PaymentApplyDistribution set
								invoked.OriginalLastDistributionSequence				= each.LastDistributionSequence
								invoked.OriginalReceivableGLDistribution				= each.ReceivableGLDistribution
								invoked.ApplyFundDistributionAccount					= each.GeneralLedgerAccount
								invoked.DistributionAmount.CurrencyAmount 				= LocalApplyAmount
								invoked.DistributionAmount.ExchangeDate					= each.DistributionAmount.ExchangeDate
								invoked.OriginalCurrency								= each.OriginalCurrency

					if (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
						LocalApplicationAmount = TransactionApplicationAmount
					else
						LocalApplicationAmount = TransactionApplicationAmount * -1

					if (LocalSumApplyAmounts != LocalApplicationAmount)

						LocalDifference = LocalApplicationAmount - LocalSumApplyAmounts

						for each LocalPaymentApplyDistributionDescendingRel
							LocalDistributionOpenAmount  = each.ReceivableGLDistributionRel.DistributionAmount.CurrencyAmount - each.ReceivableGLDistributionRel.FundAppliedAmount

							if (each.ReceivableGLDistributionRel.DistributionAmount.CurrencyAmount > 0)
								if (LocalDifference <= LocalDistributionOpenAmount)
									LocalAmountToAdd	 = LocalDifference
									LocalDifference		 = 0
								else
									LocalAmountToAdd	 = LocalDistributionOpenAmount
									LocalDifference		-= LocalDistributionOpenAmount
							else
								if (LocalDifference >= LocalDistributionOpenAmount)
									LocalAmountToAdd	 = LocalDifference
									LocalDifference		 = 0
								else
									LocalAmountToAdd	 = LocalDistributionOpenAmount
									LocalDifference		-= LocalDistributionOpenAmount

							LocalOldAmount	= each.DistributionAmount.CurrencyAmount
							LocalNewAmount 	= LocalOldAmount + LocalAmountToAdd

							if (LocalNewAmount = 0)
								invoke Delete each
							else
								invoke Update each
									invoked.DistributionAmount.CurrencyAmount 				= LocalNewAmount
									invoked.TransientSupplyOldFundAppliedAmount				= true
									invoked.TransientOldFundAppliedAmount					= LocalOldAmount

							if (LocalDifference = 0)
								end for each



		Apply is an Instance Action  
			restricted
			Parameters
				CashApplicationResult

			Action Rules


				LocalCurrencyTable = Company.DerivedCurrencyTable
				invoke UnreleasedCashApplication.Create ReceivableApplication
					assign result to NewReceivableApplication
					invoked.Company													= ReceivableApplicationSelect.TransactionCompany
					invoked.ReceivableApplication.TransType							= ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.ReceivableApplication.Invoice							= ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
					invoked.ReceivableApplication.PaymentSeq						= ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq
					invoked.ReceivableApplication.BatchNumber						= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.BatchNumber
					invoked.CreditTransaction.CreditType							= "P"
					invoked.CreditTransaction.CreditCompany							= ReceivablePayment.Company
					invoked.CreditTransaction.CreditCustomer						= ReceivablePayment.Customer
					invoked.CreditTransaction.CreditBatch							= ReceivablePaymentHeader
					invoked.CreditTransaction.CreditSequence						= ReceivablePayment
					invoked.CreditTransaction.CreditType							= ReceivablePayment.TypeOfPayment
					invoked.CreditTransaction.CreditNumber							= ReceivablePayment.PaymentNumber

					invoked.ApplicationAmount.CurrencyAmount							= TransactionApplicationAmount
					invoked.CreditTransaction.CreditApplicationAmount.CurrencyAmount	= PaymentApplicationAmount
















					invoked.ApplicationCurrency										= ReceivablePayment.OriginalCurrency
					invoked.GeneralLedgerDate										= GeneralLedgerDate
					invoked.ReceivableOperator										= ReceivableOperator
					invoked.DepositDate												= ReceivablePaymentHeader.DepositDate
					if (ElectronicFundsTransfer)
						invoked.ApplicationSource									= "E"
					else
						invoked.ApplicationSource									= "M"

					invoked.ReceivableGeneralLedgerCode								= ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableGeneralLedgerCode
					invoked.GLOffsetCode											= ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode

					if (true = false) 
						invoked.Prepayment											= true
					else
						invoked.Prepayment											= false

					if (ReceivablePayment.OriginalCurrency = ReceivableApplicationSelect.ReceivableInvoiceDetail.OriginalCurrency)
						invoked.ApplicationCurrencyType								= "B"
					else
						invoked.ApplicationCurrencyType								= "N"

					invoked.BypassOpenAmountEdit									= true
					invoked.BypassAutoAdjust										= true

					if (AllowSelectDistributionSet) 
						invoked.DistributionSetState								= "CP"

					if  (ReceivablePayment.IsZeroPayment
					or	(Company.OverApplyInvoice
					and any ReceivableApplicationAdjustmentSelectRel.AdjustmentReason.ReceivableAdjustmentReasonType.OverApplied))
						invoked.SkipToleranceCheck									= true

					invoked.CashApplicationResult								= CashApplicationResult

					LocalApplicationSequence										= NewReceivableApplication.ReceivableApplication.ApplicationSequence


				for each ReceivableApplicationAdjustmentSelectRel
					invoke Apply each
						invoked.ParmCompany											= NewReceivableApplication.Company
						invoked.ParmReceivableApplication.TransType					= NewReceivableApplication.ReceivableApplication.TransType
						invoked.ParmReceivableApplication.Invoice					= NewReceivableApplication.ReceivableApplication.Invoice
						invoked.ParmReceivableApplication.PaymentSeq				= NewReceivableApplication.ReceivableApplication.PaymentSeq
						invoked.ParmReceivableApplication.BatchNumber				= NewReceivableApplication.ReceivableApplication.BatchNumber
						invoked.ParmReceivableApplication.ApplicationSequence		= NewReceivableApplication.ReceivableApplication.ApplicationSequence




				if (NewReceivableApplication.ReceivableApplication.TransType.Invoice
				or  NewReceivableApplication.ReceivableApplication.TransType.DebitMemo)
					if  (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.LastReceivableInvoiceDetail = 1
					or  (ReceivableInvoiceDetailRel.ReceivableInvoiceRel.LastReceivableInvoiceDetail = 0
					and  ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq = 1)
					or  (ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq = ReceivableInvoiceDetailRel.ReceivableInvoiceRel.LastReceivableInvoiceDetail))
						AutoAdjustAmount			 = ReceivableInvoiceDetailRel.DerivedOpenAmount
						LocalInvoiceAdjustAmount	 = AutoAdjustAmount
						if(ReceivableInvoiceDetailRel.OriginalCurrency != ReceivableInvoiceDetailRel.Company.Currency)
							CurrencyWork.TransactionAmount					= AutoAdjustAmount
							CurrencyWork.FromCurrency						= ReceivableInvoiceDetailRel.OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency				= ReceivableInvoiceDetailRel.Company.Currency
							LocalBaseAutoAdjustAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount
						else
							LocalBaseAutoAdjustAmount						= AutoAdjustAmount

						if(ReceivableInvoiceDetailRel.OriginalCurrency != ReceivablePayment.OriginalCurrency)








							CurrencyWork.TransactionAmount					= AutoAdjustAmount 
							CurrencyWork.FromCurrency						= ReceivableInvoiceDetailRel.OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency				= ReceivablePayment.OriginalCurrency
							AutoAdjustAmount								= CurrencyWork.BaseAmount.OutputCurrencyAmount
							round AutoAdjustAmount to nearest DerivedRoundTo


							CurrencyWork.TransactionAmount					= AutoAdjustAmount
							CurrencyWork.FromCurrency						= ReceivablePayment.OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency				= ReceivableInvoiceDetailRel.OriginalCurrency
							LocalAutoAdjustAmount							= CurrencyWork.BaseAmount.OutputCurrencyAmount
							round LocalAutoAdjustAmount to nearest DerivedRoundTo

						round AutoAdjustAmount to nearest DerivedRoundTo


						if (AutoAdjustAmount > 0)
							initialize AutoAdjustReason

							I1 = 1
							while (I1 < 4)
								if  (ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumShortReasonCode.AutoReasCd[I1] entered
								and  ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumShortReasonCode.AutoReasCd[I1].Active)
									if (ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumAutoAdjustAmount.MaxAutoAmt[I1] entered
									and LocalBaseAutoAdjustAmount <= ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumAutoAdjustAmount.MaxAutoAmt[I1])
										AutoAdjustReason = ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumShortReasonCode.AutoReasCd[I1]
										end while
									else
									if (ReceivableInvoiceDetailRel.CompanyCustomerRel.MaxAutoPcts.MaxAutoPct[I1] entered
									and ((ReceivableInvoiceDetailRel.DerivedOpenAmount / ReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount) <= ReceivableInvoiceDetailRel.CompanyCustomerRel.MaxAutoPcts.MaxAutoPct[I1]))
										AutoAdjustReason = ReceivableInvoiceDetailRel.CompanyCustomerRel.MaximumShortReasonCode.AutoReasCd[I1]
										end while

								I1 += 1


							if (AutoAdjustReason not entered)
								initialize AutoAdjustAmount


						if (AutoAdjustAmount > 0
						and LocalInvoiceAdjustAmount >= LocalAutoAdjustAmount)
							invoke Create ReceivableApplicationAdjustment
								invoked.Company												= NewReceivableApplication.Company
								invoked.ReceivableApplication									= NewReceivableApplication.ReceivableApplication
								invoked.AdjustmentReason										= AutoAdjustReason
								invoked.ReceivableAdjustType									= "N"
								invoked.CreditAdjustAmount										= AutoAdjustAmount
								invoked.ApplicationCurrency										= ReceivablePayment.OriginalCurrency


					if  (ElectronicFundsTransfer)
						invoke FastUpdate ReceivablePayment
							invoked.Status				= 7


				if (AllowSelectDistributionSet) 

					if (ElectronicFundsTransfer
					and PaymentApplyDistribution set not exists
					and CashApplicationResult entered)
						invoke ChangeDistributionSetNeedsReview NewReceivableApplication.ReceivableApplication
							invoked.PrmDistributionSetNeedsReview	= false
							invoked.PrmDistributionSetState			= "CP"
						invoke ProrateAndSelectAll NewReceivableApplication.ReceivableApplication
					else
						for each PaymentApplyDistribution set
							invoke Create FundApplyDistribution
								invoked.Company													= ReceivableApplicationSelect.TransactionCompany
								invoked.ReceivableApplication.TransType							= ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
								invoked.ReceivableApplication.Invoice							= ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
								invoked.ReceivableApplication.PaymentSeq						= ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq
								invoked.ReceivableApplication.BatchNumber						= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.BatchNumber
								invoked.ReceivableInvoiceType									= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.ReceivableInvoiceType
								invoked.Customer												= ReceivableInvoiceDetailRel.ReceivableInvoiceRel.Customer
								invoked.ReceivableApplication.ApplicationSequence				= NewReceivableApplication.ReceivableApplication.ApplicationSequence
								invoked.OriginalLastDistributionSequence						= each.OriginalLastDistributionSequence
								invoked.OriginalReceivableGLDistribution						= each.OriginalReceivableGLDistribution
								invoked.ApplyFundDistributionAccount							= each.ApplyFundDistributionAccount
								invoked.OriginalCurrency										= each.OriginalCurrency
								invoked.DistributionAmount										= each.DistributionAmount
								invoked.Type													= "T"

						invoke ChangeDistributionSetNeedsReview NewReceivableApplication.ReceivableApplication
							invoked.PrmDistributionSetState			= "CP"
							invoked.PrmDistributionSetNeedsReview	= false
			Exit Rules

				invoke TriggerReceivableTransactionForInvoice ReceivableInvoiceDetailRel
				invoke TriggerReceivableInvoice ReceivableInvoiceDetailRel.ReceivableInvoiceRel






				invoke Purge



		CreateViaSpeedEntry is a Create Action
			default label is "ManualEntry"	
			Entrance Rules
				LocalCurrencyTable	 =	Company.DerivedCurrencyTable
				EnteredAmount		 =	PaymentApplicationAmount

				if  (ReceivableApplicationSelect.TransactionCompany not entered)
					ReceivableApplicationSelect.TransactionCompany	 =	ReceivablePayment.Company

					if  (ReceivablePayment.CompanyCustomerRel.NationalAccountIndicator.No
					and  !ReceivablePayment.CompanyCustomerRel.ThirdPartyPayer)

						if (ReceivablePaymentRel.ReceivableCompanyRel.IsApplyCashAcrossReceivableCompanies 
						and !ReceivableInvoiceRel exists)
							ReceivableApplicationSelect.TransactionCompany = first OpenInvoiceTraverseAcrossCompanyRel.Company
					else
						if (!ReceivableInvoiceRel exists)
							ReceivableApplicationSelect.TransactionCompany	 =	first OpenInvoiceAnyCompanyRel.Company

				if (ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq not entered)
					ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq	 =	first OpenReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq

			Action Rules
				initialize LocalSelectedAdjustAmount
				if (ReceivablePayment.IsPrepaymentTaxWithHolding)	
					constraint (!ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						"PaymentHasThePrepaymentTax;CreditMemoCannotBeAppliedToAPayment"

				constraint (ReceivableInvoiceDetailRel.ReceivableInvoiceRel exists)
					"TransactionDoesNotExist;Company=<ReceivableApplicationSelect.TransactionCompany>,Type=<ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType>,Invoice=<ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice>,Sequence=<ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq>"

				constraint (!ReceivableInvoiceDetailRel.ReceivableInvoiceRel.Origin.IntercompanyBilling)
					"CannotSpecifyAnIntercompanyBillingTransaction"

				constraint (OpenReceivableInvoiceDetailRel exists)
					"EitherApplicationSelectRecordAlreadyExistsOrInvoiceIsNotOpen;Company=<ReceivableApplicationSelect.TransactionCompany>,Type=<ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType>,Invoice=<ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice>,Sequence=<ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq>"


				constraint (!ReceivableInvoiceDetailRel.PortalPaymentSelected)	
					"Invoice_\Number<ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice>HasBeenSelectedForPaymentViaThe_BillingAnd_Receivable_Portal"	

				if (!ReceivableApplicationSelect.TransactionCompany.OverApplyInvoice
				or  EnteredAmount not entered
				or (ReceivableApplicationSelect.TransactionCompany.OverApplyInvoice
				and EnteredAmount <= DerivedOverApplyInvoiceHeaderOpenAmount))
					constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
						"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."

				if (EnteredAmount not entered)
					EnteredAmount										 =	InvoiceHeaderOpenAmountDisplayCurrency
					ApplicationCurrency									 =	ReceivablePayment.OriginalCurrency

					if (ReceivableInvoiceDetailRel.CompanyCustomerRel.DiscountAdjustmentReason entered
					and ReceivableInvoiceDetailRel.DerivedDiscountAmount entered
					and SelectedAdjustedAmount not entered)
						SelectedAdjustedAmount							 =	InvoiceHeaderDiscountAmountDisplayCurrency
						SelectedAdjustmentReason						 =	ReceivableInvoiceDetailRel.CompanyCustomerRel.DiscountAdjustmentReason

					EnteredAmount										 -=	SelectedAdjustedAmount
				else
					if (ReceivableApplicationSelect.TransactionCompany.OverApplyInvoice
					and EnteredAmount > DerivedOverApplyInvoiceHeaderOpenAmount)
						constraint (!IsSummarizeDetail)
							"CannotBeOverApplied;InvoiceHasSummarizeDetailForDisplay"
						constraint (EnteredAmount <= ReceivablePayment.PendingOpenAmount)
							"InvoiceIsOverApplied;ExceedingPaymentOpenAmount"
						constraint (ReceivableInvoiceDetailRel.IsEligibleForOverCashApplication)
							"<ReceivableInvoiceDetailRel.OverApplicationConditionalErrorMessage>"
						LocalSelectedAdjustAmount						 =  DerivedOverApplyInvoiceHeaderOpenAmount - EnteredAmount
						if (SelectedAdjustedAmount != LocalSelectedAdjustAmount)
							constraint (SelectedAdjustedAmount not entered)
								"CannotEnterAdjustmentAmount,WillBeDerivedForOverAppliedInvoice"
						if (SelectedAdjustedAmount not entered)
								SelectedAdjustedAmount					 =	LocalSelectedAdjustAmount
						if (SelectedAdjustmentReason entered)
							constraint (SelectedAdjustmentReason exists)
								"ReceivableReason-<SelectedAdjustmentReason>NotDefinedForCompany-<Company>"
							constraint (SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
								"AdjustmentReasonCodeMustBe_\Over_\AppliedType."
							constraint (SelectedAdjustmentReason = ReceivableApplicationSelect.TransactionCompany.OverApplyReasonCode)
								"AdjustmentReasonCode-<SelectedAdjustmentReason>;MustBeSameAsCompanyOver/Apply/Reason/Code-<ReceivableApplicationSelect.TransactionCompany.OverApplyReasonCode>"
						else
							SelectedAdjustmentReason					 =	ReceivableApplicationSelect.TransactionCompany.OverApplyReasonCode
						TransientOverApplyInvoice						 =  true
				LocalApplicationAmount									 =	EnteredAmount
				LocalAdjustmentAmount									 =	SelectedAdjustedAmount
				if (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
					constraint (InvoiceHeaderOpenAmountDisplayCurrency	 >=	LocalApplicationAmount	 +	LocalAdjustmentAmount)
						"SumOfApplicationAmountAndAdjustmentsCannotExceedInvoiceOpenAmount"

				if (!Company.PaymentOverApplication)
					constraint (LocalApplicationAmount	 <=	ReceivablePayment.PendingOpenAmount)  
						"CannotOverApplyPayment;OverApplicationFlagSetToFalse"

				if (LocalAdjustmentAmount	 >=	ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency)
					initialize EnteredAmount
				else
				if ((LocalApplicationAmount + LocalAdjustmentAmount)	 <	ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency)
					EnteredAmount								 =	LocalApplicationAmount
				else
					EnteredAmount								 =	ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency - LocalAdjustmentAmount

				if (LocalAdjustmentAmount	 <	ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency)
					if ((LocalApplicationAmount + LocalAdjustmentAmount)	 <	ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency)
						LocalApplicationAmount	-=	LocalApplicationAmount
					else
						LocalApplicationAmount	-=	(ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency - LocalAdjustmentAmount)

				include ConvertAmounts
			Exit Rules

				if (SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort	
				and Company.PreventWriteOffBeforeTransactionGLDate
				and ReceivableInvoiceDetailRel exists)
					constraint (GeneralLedgerDate >= ReceivableInvoiceDetailRel.GeneralLedgerDate)
						"Adjustment_\Global_\Ledger_\Date<GeneralLedgerDate>MustBeGreaterThanOrEqualToInvoice_\Global_\Ledger_\Date<ReceivableInvoiceDetailRel.GeneralLedgerDate>"

				if (LocalAdjustmentAmount	 !=	0)
					invoke Create ReceivableApplicationAdjustmentSelect
						invoked.ReceivableApplicationAdjustmentSelect.Company			 =	ReceivableApplicationSelect.TransactionCompany
						invoked.ReceivableApplicationAdjustmentSelect.TransType			 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.ReceivableApplicationAdjustmentSelect.Invoice			 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice
						invoked.ReceivableApplicationAdjustmentSelect.PaymentSeq		 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableApplicationAdjustmentSelect.BatchNumber		 =	ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceRel.BatchNumber
						invoked.AdjustmentReason										 =	SelectedAdjustmentReason
						if (LocalAdjustmentAmount	 >=	ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency)
							invoked.CreditAdjustAmount									 =	ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency
						else
							invoked.CreditAdjustAmount									 =	LocalAdjustmentAmount
						invoked.ApplicationCurrency										 =	ReceivablePayment.OriginalCurrency
						invoked.GeneralLedgerDate										 =	GeneralLedgerDate
						if (SelectedAdjustmentReasonARIncomeWithholdingCode entered	
						or SelectedAdjustmentReasonARIncomeWithholdingDocumentNumber entered)	
							invoked.ARIncomeWithholdingCode							 = SelectedAdjustmentReasonARIncomeWithholdingCode	
							invoked.ARIncomeWithholdingDocumentNumber				 = SelectedAdjustmentReasonARIncomeWithholdingDocumentNumber	

					if (LocalAdjustmentAmount	 >=	ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency)
						SelectedAdjustedAmount											 =	ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency
						LocalAdjustmentAmount											 -=	ReceivableInvoiceDetailRel.OpenAmountDisplayCurrency
					else
						SelectedAdjustedAmount											 =	LocalAdjustmentAmount
						initialize LocalAdjustmentAmount
				if (TransientOverApplyInvoice)
					for each EligibleOverApplyOpenReceivableInvoiceDetailRel
						include CreateSelectViaSpeedEntry
				else
					for each OpenReceivableInvoiceDetailRel
							include CreateSelectViaSpeedEntry

		AutomaticCashApplication is a Set Action
			restricted
			default label is "AutomaticCashApplication"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmCompany					is a ReceivableCompany
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
				PrmSelectOnly				is Boolean
				PrmEFTOrigin				is Boolean
				PrmOperator					is a ReceivableOperator
				PrmGlDate					is Date
				PrmOverride					is Boolean
				PrmBatchNumber				is a ReceivablePaymentHeader
				PrmNatCredits				is Boolean
				PrmOverrideMethod			is AlphaUpper size 1
					States
						Algorithm				value is "A"
						BalanceForward			value is "B"
						LastStatement			value is "L"
						Remit					value is "R"
						UserDefined				value is "U"
						NoOverride				value is "N"
				PrmCurrencyOverride			  is Boolean
				PrmFirstAttemptRemittanceOnly is Boolean
				PrmVariance					is like InternationalAmount
				PrmReasonType				is a ReceivableReasonType
				PrmReasonCode				is a ReceivableReason
				PrmMaxInvoices				is Numeric size 1
				PrmCombination				is Numeric size 1
				PrmApplicationCode			is like AutomaticCashApplicationCode
				PrmPreCreatedResultID		is a CashApplicationResult
					context of PrmFinanceEnterpriseGroup


			Instance Selection
				where (((PrmCompany entered
				and		PrmCompany = Company)
				or	 (PrmCompanyGroup entered
				and	 GLCompanyGroupMemberRelExists))
				and   (PrmBatchNumber not entered
				or	 PrmBatchNumber = ReceivablePaymentHeader)
				and   (!ReceivablePayment.IsZeroPayment
				or	 ElectronicFundsTransfer)
				and (!PrmEFTOrigin
				or  ElectronicFundsTransfer)
				and (!AllowSelectDistributionSet 
				or  TransientDistributionSetState.ReadyForProcessing
				or  TransientDistributionSetState.NotApplicable
				or  ElectronicFundsTransfer)) 

			Parameter Rules
				PrmCompanyGroup
					LocalGeneralLedgerCompanyGroup	= PrmCompanyGroup

			Local Fields
				LocalCashApplicationResult is like CashApplicationResult
				LocalActor is Actor


			Action Rules
				Empty Set Rules
					if (PrmPreCreatedResultID entered)
						if (PrmSelectOnly)
							invoke Update PrmPreCreatedResultID
								invoked.Status					  = 1
						LocalCashApplicationResult				  = PrmPreCreatedResultID
					else
						invoke Create CashApplicationResult
							assign result to CashApplicationResultView
							invoked.FinanceEnterpriseGroup		  = PrmFinanceEnterpriseGroup
							invoked.RunTime						  = current timestamp
							invoked.PrmCompany					  = PrmCompany
							invoked.PrmCompanyGroup				  = PrmCompanyGroup
							invoked.PrmSelectOnly				  = PrmSelectOnly
							invoked.PrmEFTOrigin				  = PrmEFTOrigin
							invoked.PrmOperator					  = PrmOperator
							invoked.PrmGlDate					  = PrmGlDate
							invoked.PrmOverride					  = PrmOverride
							invoked.PrmBatchNumber				  = PrmBatchNumber
							invoked.PrmNatCredits				  = PrmNatCredits
							invoked.PrmOverrideMethod			  = PrmOverrideMethod
							invoked.PrmFirstAttemptRemittanceOnly = PrmFirstAttemptRemittanceOnly
							invoked.PrmApplicationCode			  = PrmApplicationCode
							invoked.PrmCurrencyOverride			  = PrmCurrencyOverride
							invoked.PrmVariance					  = PrmVariance
							invoked.PrmReasonType				  = PrmReasonType
							invoked.PrmReasonCode				  = PrmReasonCode
							invoked.PrmMaxInvoices				  = PrmMaxInvoices
							invoked.PrmCombination				  = PrmCombination
							invoked.PrmApplicationCode			  = PrmApplicationCode
							if (PrmSelectOnly)
								invoked.Status					  = 1

						LocalCashApplicationResult				  = CashApplicationResultView.CashApplicationResult

					if (!PrmSelectOnly)
						invoke AutomaticCashApplication ReceivablePayment
							invoked.PrmFinanceEnterpriseGroup	  = PrmFinanceEnterpriseGroup
							invoked.PrmCompany					  = PrmCompany
							invoked.PrmCompanyGroup				  = PrmCompanyGroup
							invoked.PrmSelectOnly				  = PrmSelectOnly
							invoked.PrmOperator					  = PrmOperator
							invoked.PrmGlDate					  = PrmGlDate
							invoked.PrmOverride					  = PrmOverride
							invoked.PrmBatchNumber				  = PrmBatchNumber
							invoked.PrmNatCredits				  = PrmNatCredits
							invoked.PrmOverrideMethod			  = PrmOverrideMethod
							invoked.PrmFirstAttemptRemittanceOnly = PrmFirstAttemptRemittanceOnly
							invoked.PrmCurrencyOverride			  = PrmCurrencyOverride
							invoked.PrmVariance					  = PrmVariance
							invoked.PrmReasonType				  = PrmReasonType
							invoked.PrmReasonCode				  = PrmReasonCode
							invoked.PrmMaxInvoices				  = PrmMaxInvoices
							invoked.PrmCombination				  = PrmCombination
							invoked.PrmApplicationCode			  = PrmApplicationCode
							invoked.PrmCashApplicationResult	  = LocalCashApplicationResult
					else
						LocalActor = actor
						send notification
							to LocalActor
							description is "AutomaticCashApplicationHasCompleted"
							priority is high
							detail is "ResultsCanBeSeenInCashApplicationResults"

				Set Rules

					Entrance Rules
						if (PrmPreCreatedResultID entered)
							LocalCashApplicationResult				  = PrmPreCreatedResultID
						else
							invoke Create CashApplicationResult
								assign result to CashApplicationResultView
								invoked.FinanceEnterpriseGroup		  = PrmFinanceEnterpriseGroup
								invoked.RunTime						  = current timestamp
								invoked.PrmCompany					  = PrmCompany
								invoked.PrmCompanyGroup				  = PrmCompanyGroup
								invoked.PrmSelectOnly				  = PrmSelectOnly
								invoked.PrmEFTOrigin				  = PrmEFTOrigin
								invoked.PrmOperator					  = PrmOperator
								invoked.PrmGlDate					  = PrmGlDate
								invoked.PrmOverride					  = PrmOverride
								invoked.PrmBatchNumber				  = PrmBatchNumber
								invoked.PrmNatCredits				  = PrmNatCredits
								invoked.PrmOverrideMethod			  = PrmOverrideMethod
								invoked.PrmFirstAttemptRemittanceOnly = PrmFirstAttemptRemittanceOnly
								invoked.PrmApplicationCode			  = PrmApplicationCode
								invoked.PrmCurrencyOverride			  = PrmCurrencyOverride
								invoked.PrmVariance					  = PrmVariance
								invoked.PrmReasonType				  = PrmReasonType
								invoked.PrmReasonCode				  = PrmReasonCode
								invoked.PrmMaxInvoices				  = PrmMaxInvoices
								invoked.PrmCombination				  = PrmCombination




							LocalCashApplicationResult				  = CashApplicationResultView.CashApplicationResult


					Exit Rules
						if (!PrmSelectOnly)
							invoke AutomaticCashApplication ReceivablePayment
								invoked.PrmFinanceEnterpriseGroup	  = PrmFinanceEnterpriseGroup
								invoked.PrmCompany					  = PrmCompany
								invoked.PrmCompanyGroup				  = PrmCompanyGroup
								invoked.PrmSelectOnly				  = PrmSelectOnly
								invoked.PrmOperator					  = PrmOperator
								invoked.PrmGlDate					  = PrmGlDate
								invoked.PrmOverride					  = PrmOverride
								invoked.PrmBatchNumber				  = PrmBatchNumber
								invoked.PrmNatCredits				  = PrmNatCredits
								invoked.PrmOverrideMethod			  = PrmOverrideMethod
								invoked.PrmFirstAttemptRemittanceOnly = PrmFirstAttemptRemittanceOnly
								invoked.PrmCurrencyOverride			  = PrmCurrencyOverride
								invoked.PrmVariance					  = PrmVariance
								invoked.PrmReasonType				  = PrmReasonType
								invoked.PrmReasonCode				  = PrmReasonCode
								invoked.PrmMaxInvoices				  = PrmMaxInvoices
								invoked.PrmCombination				  = PrmCombination
								invoked.PrmCashApplicationResult	  = LocalCashApplicationResult
						else
							LocalFinanceEnterpriseGroup				  = PrmFinanceEnterpriseGroup
							LocalResult								  = LocalCashApplicationResult
							invoke Update LocalCashResultRel
								invoked.Status						  = 1


				Instance Rules

					if  (ElectronicFundsTransfer
					and (ReceivablePayment.Status.Unreleased
					or   ReceivablePayment.Status.ReleasedUnassigned))
						invoke FastUpdate ReceivablePayment
							invoked.Status				 = 2

					invoke Apply
						invoked.CashApplicationResult	 = LocalCashApplicationResult














































































		ProcessSelectionsBatch is a Set Action
			restricted
			Parameters
				PrmCompany					is a ReceivableCompany
				PrmReceivablePaymentHeader	is a ReceivablePaymentHeader
				PrmReceivablePayment		is a ReceivablePayment

			Instance Selection
				where (Company = PrmCompany
				and	   ReceivablePaymentHeader	= PrmReceivablePaymentHeader
				and	   ReceivablePayment		= PrmReceivablePayment)

			Action Rules
				Empty Set Rules
					invoke ProcessMemoChargebackSelectionsBatch ReceivableApplicationAdjustmentSelect
						invoked.PrmCompany					= PrmCompany
						invoked.PrmReceivablePaymentHeader	= PrmReceivablePaymentHeader
						invoked.PrmReceivablePayment		= PrmReceivablePayment

				Set Rules
					Exit Rules
						invoke ProcessMemoChargebackSelectionsBatch ReceivableApplicationAdjustmentSelect
							invoked.PrmCompany					= PrmCompany
							invoked.PrmReceivablePaymentHeader	= PrmReceivablePaymentHeader
							invoked.PrmReceivablePayment		= PrmReceivablePayment

				Instance Rules
					invoke Apply
