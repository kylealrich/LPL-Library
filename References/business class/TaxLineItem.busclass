TaxLineItem is a BusinessClass	  
    owned by tx	 
	prefix is Txlin					  

    Ontology
        symbolic key is TaxLineItem

    Patterns
        disable Auditing

       	disable AuditIndex
       	disable EffectiveDated
       	disable DataTranslations
       	implements StaticJava
       	

	Persistent Fields	

		RelatedObjectReference			is BusinessObjectReference 		
		InvoiceNumber					is like Invoice				 	
		LineItemNumber 					is like DistributionSequence	
		RelatedLineItemUniqueId			is UniqueID						
		LineItemId 						is Alpha 32					 

		TaxEntity						 
		CompanyAddress					is a PostalAddressV2	
			holds pii

		ProductTaxCategory				 
		Usage 							is like TaxUsageCode		 

		VendorCode 						is like Vendor	 				
		VendorVATRegistrationCountry 	is a Country				 
		VendorVATRegistrationNumber 	is a VATRegistrationNumber	 
		CustomerCode					is Alpha 50	
		CustomerVATRegistrationCountry 	is a Country				 
		CustomerVATRegistrationNumber  	is a VATRegistrationNumber	 

		InvoiceDate						is Date
		TaxDate 						is Date	

		Freight 						is an InternationalAmount					 
		UnitPrice 						is an InternationalAmount
		ChargedTax 						is an InternationalAmount
		TaxableAmount					is an InternationalAmount
		InvoiceAmount 					is an InternationalAmount

		ShipToTaxCodeDescription		is a Description		
		ShipToTaxCode					is a TaxCode	 
		ShipToAddress					is a PostalAddressV2	
			holds pii
		ShipToCurrency 					is a Currency				 
	    ShipToCurrencyRate				is a CurrencyRate			
		BillToTaxCode					is a TaxCode	 
		BillToAddress					is a PostalAddressV2	
			holds pii
		BillToCurrency 					is a Currency					 
	    BillToCurrencyRate				is a CurrencyRate			
		ShipFromTaxCode					is a TaxCode	 
		ShipFromAddress					is a PostalAddressV2	
			holds pii
		ShipFromCurrency 				is a Currency				 
	    ShipFromCurrencyRate			is like CurrencyRate	
		BillFromTaxCode					is a TaxCode	 
		BillFromAddress					is a PostalAddressV2	
			holds pii
		BillFromCurrency 				is a Currency				 
	    BillFromCurrencyRate			is like CurrencyRate			

		ExcludeFromTaxEstimate			is Boolean		

		IsMulticomponent 				is Boolean
		TaxIncludedIndicator  			is Boolean
		CostCenter 						is Alpha 40						 
		DepartmentCode 					is Alpha 5					 		 
		GeneralLedgerAccount 			is Alpha 40
			default label is "GlobalLedgerAccount"
		MaterialCode 					is Alpha 5	
		MaterialOrigin 					is Alpha 60			 
		ProjectNumber  					is Alpha 20					 
		UsageClass 						is Alpha 10						 					
		VendorSKU 						is Alpha 40
		ModeOfTransport 				is a TransportMode	 				 																					
		NatureOfTransaction 			is a IntrastatNatureOfTransactionCode	 		 
		IntrastatCommodityCode 			is Alpha 5		 
		ExportProcedure  				is Alpha 5

		ProductClass 					is AlphaUpper 40				 					 				
		CommodityCode 					is like ICNCode	
		CommodityCodeType 				is Alpha 6						
        	States
				UNSPSC					value is "UNSPSC"				 
				NCM						value is "NCM"					 
				Service					value is "Service"				 
				Invalid					value is "InvalidType"			
				HSN                     value is "HSN"					
		Weight 							is Alpha 4
		WeightUnitOfMeasure 			is an IntrastatUnitOfMeasure	 			 	
		Volume 							is Alpha 4
		VolumeUnitOfMeasure 			is an IntrastatUnitOfMeasure	 				 
		SupplementaryUnit 				is an IntrastatUnitOfMeasure	 
		SuppUnitType 					is Alpha 50
		StatisticalValue 				is a IntrastatStatisticalProcedure	 				 
		StatisticalValueCurrency 		is a Currency	 
		Quantity 						 
		Exempt  						is Boolean









		Description						










		ThirdParty						is Alpha 1				 
			States
				VertexOSeries         value is "O"
				InforTax              value is blank
				Sabrix				  value is "S"      
					default label is "OneSource"		
		LineitemError					is Boolean	
		WebServiceError 				is Boolean
		WebServiceErrorMessage 			is Text


		CalculatedTaxAmt				is an InternationalAmount 

        Taxable 						is an InternationalAmount	 
		NonTaxable						is an InternationalAmount	

		TaxRate							is Percent 7.5
		ReturnedErrorNumber				is Numeric 3
		ReturnedErrorMessage			is Alpha 100






		VertexStatus					is Alpha 100
		VertexTaxCode					 
		UserDefinedTaxCode				is a VertexTaxCode	 
		Situs 							is Alpha 30
		TaxCollectedFromParty 			is Alpha 30 	
		TaxResult 						is Alpha 30		
		TaxType 						is Alpha 30	
		Jurisdiction 					is Alpha 30
		JurisdictionId 					is Alpha 30		
		JurisdictionLevel 				is Alpha 30
        Imposition 						is Alpha 30
        ImpositionType 					is Alpha 30
        TaxRuleId 						is Alpha 30

		OutsideThreshold				is Boolean
		VarianceAmount					is an InternationalAmount	 
		AdditionalTaxesDue				is an InternationalAmount	




		TaxingJurisdiction				 

		MoreResults						is RichText
		CapturedXml  					is Text
		ReturnedErpTaxCode				is like TaxCode				
		ReturnedTaxableBasis			is an InternationalAmount	
		ReturnedExemptTaxable			is an InternationalAmount	










	Transient Fields	

		ClearShipToAddress				is Boolean
		ClearShipFromAddress			is Boolean
		ClearBillToAddress				is Boolean
		ClearBillFromAddress			is Boolean						
		TransShipToTaxCodeDescription	is like Description
			derive value from ShipToTaxCode.Description
		TransientTaxTable				is a TaxTableField	

		TransientUserElement50 is a TaxAttributeGroup50		
		AttributeMissingProcess is Alpha 1
			States
				SkipAttribute		value is blank	 
				MissingMessage    value is "M"	 
				Halt				value is "H"	 
		AttributeMissingMessage 	is Alpha 30		 

		TransientVertexAttributes	is a VertexAttributeGroup	
		SendAddressOrTaxAreaId is Alpha 1						
			States
				Both			value is blank			 
				AddressOnly		value is "A"
				TaxAreaIDOnly	value is "T"

	Field Rules
		TaxEntity

		LineItemNumber
			default to TaxLineItem.Sequence

		ChargedTax
			if (ChargedTax changed)

				OutsideThreshold = false
				VarianceAmount = CalculatedTaxAmt - ChargedTax
		
		ShipToTaxCode
			if (ShipToTaxCode changed)
				if (ShipToTaxCode entered)
					ShipToTaxCodeDescription = ShipToTaxCode.Description
				else
					ShipToTaxCodeDescription = blank 	
										
		ShipToTaxCodeDescription
			default to ShipToTaxCode.Description

		CalculatedTaxAmt
			if (CalculatedTaxAmt changed)
				VarianceAmount = CalculatedTaxAmt - ChargedTax
				
		VarianceAmount
			VarianceAmount = CalculatedTaxAmt - ChargedTax
						
	Conditions
		ShipToAddressEntered
			when (ShipToAddress.Country entered)
		ShipFromAddressEntered
			when (ShipFromAddress.Country entered)
		BillToAddressEntered
			when (BillToAddress.Country entered)
		BillFromAddressEntered
			when (BillFromAddress.Country entered)
												
		VertexResultsExist	
			restricted
			when (VertexTaxAreaIdResultsRel exist
			and  !VertexTaxAreaIdResultsRel.WebServiceError)
		JurisdictionResultsExist				
			when (JurisdictionResultsRel exist)
		JurisdictionResults2Exist				
			when (JurisdictionResultsRel2 exist)
		FlexibleFieldsExist
			when (LineItemUserFieldsRel.FlexibleFields.FlexibleCodes.FlexibleCodeField[1] entered
			or    LineItemUserFieldsRel.FlexibleFields.FlexibleNumbers.FlexibleNumericField[1] entered
			or    LineItemUserFieldsRel.FlexibleFields.FlexibleDates.FlexibleDateField[1] entered)
		MoreResultsExist						
			when (MoreResults entered)	
		CapturedXmlExist
			when (CapturedXml entered)	
		UserElementsExist																						
			when (LineItemUserFieldsRel.UserElementGroup.UserElement[1].Number entered)							
		TaxDetailOutExists
			when (TaxDetailOutRel exist)
		OneSourceUserAttributesExist
			when (OneSourceUserAttributesRel exist
			and   OneSourceUserAttributesRel.OneSourceUserAttribute.Type = "O")	
		InputUserAttributesExist	
			when (InputUserAttributesRel exist)
		VertexInputFlexibleFieldsRelExist
			when (VertexInputFlexibleFieldsRel exist)
		VertexFlexibleFieldsOutRelExist
			when (VertexOutputFlexibleFieldsRel exist)
																																		
	Relations			
		LineItemUserFieldsRel2 is a TaxLineItemUserFields set
			Instance Selection 
				where (related.SequenceNumber = TaxLineItem.Sequence)						
				
		LineItemUserFieldsRel is a TaxLineItemUserFields set


  		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig								= FinanceEnterpriseGroup 
			Instance Selection

				where (related.CallingModuleKey 					= reference to this instance)	


  		JurisdictionResultsRel2
			one-to-many relation to JurisdictionResults
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig									= TaxLineItem.FinanceEnterpriseGroup
				related.CallingModuleKey								= TaxLineItem.RelatedObjectReference	
			Instance Selection
				where (related.JurisdictionResults.ResponseBusclassKey	= LineItemNumber)						 				

		PayablesInvoiceTaxRel						
			one-to-one relation to PayablesInvoiceTax
			Field Mapping uses symbolic key
				related.Company						= LocalCompany
				related.PayablesInvoice				= LocalPayablesInvoice
				related.PayablesInvoiceDistribution	= LocalPayablesInvoiceDistribution
		
		PayablesInvoiceDistributionRel						
			one-to-one relation to PayablesInvoiceDistribution
			Field Mapping uses Set9
				related.Company						= LocalCompany
				related.Vendor						= LocalVendor
				related.PayablesInvoice				= LocalPayablesInvoice
				related.PayablesInvoiceDistribution	= LocalPayablesInvoiceDistribution
						

    	VertexTaxAreaIdResultsRel
			one-to-many relation to VertexTaxAreaIdResults
			Field Mapping uses ByRelatedObjectReference	 
				related.VertexConfig								= TaxLineItem.FinanceEnterpriseGroup 
			Instance Selection	
				where (related.RelatedObjectReference				= reference to this instance)

		TaxDetailOutRel  
			one-to-many relation to TaxDetailOut
			delete cascades
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.TaxDetailOut.FinanceEnterpriseGroup 	= TaxLineItem.FinanceEnterpriseGroup	 
 				and    related.TaxDetailOut.UniqueIdOfRelatedObject	= TaxLineItem.UniqueID)				
 				 			

		OneSourceUserAttributesRel						
			one-to-many relation to OneSourceUserAttribute
			delete cascades
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= TaxLineItem.FinanceEnterpriseGroup	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= TaxLineItem.UniqueID) 				
		
		OutputUserAttributesRel 						
			one-to-many relation to OneSourceUserAttribute
			delete cascades
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= TaxLineItem.FinanceEnterpriseGroup	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= TaxLineItem.UniqueID 				
 				and    related.OneSourceUserAttribute.Type 						= "O")		

		InputUserAttributesRel 						
			one-to-many relation to OneSourceUserAttribute
			delete cascades
			Field Mapping uses symbolic key
 			Instance Selection	
 				where (related.OneSourceUserAttribute.FinanceEnterpriseGroup 	= TaxLineItem.FinanceEnterpriseGroup	 
 				and    related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= TaxLineItem.UniqueID 				
 				and    related.OneSourceUserAttribute.Type 						= blank)	 				
		TaxAttributeInstanceRel							 
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
 				related.FinanceEnterpriseGroup 	= TaxLineItem.FinanceEnterpriseGroup	 
 				related.TaxAttribute	        = LocalTaxAttributeCode
 	
 		CreateInputUserAttributeRel 											
			one-to-one relation to OneSourceUserAttribute
			Field Mapping uses ByAttributeNameNoDups							
 				related.FinanceEnterpriseGroup 							= TaxLineItem.FinanceEnterpriseGroup	 
 				related.OneSourceUserAttribute.UniqueIdOfRelatedObject	= UniqueID 				
 				related.OneSourceUserAttribute.LineNumber				= blank 					
 				related.OneSourceUserAttribute.Type 					= blank						
				related.UserAttributeName								= LocalUserAttributeName			

 		LocalAutoMatchResultInvoiceRel
			one-to-one relation to AutoMatchResultInvoice
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.AutoMatchResult			= LocalAutoMatchResult
				related.PayablesInvoice			= LocalPayablesInvoice


		VertexInputFlexibleFieldsRel							 											
			one-to-one relation to VertexFlexibleFields
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 									= FinanceEnterpriseGroup
				related.VertexFlexibleFields.UniqueIdOfRelatedObject			= UniqueID
				related.VertexFlexibleFields.TaxAttributeCode           		= blank	
				related.VertexFlexibleFields.Type								= "I"	

		VertexOutputFlexibleFieldsRel							 											
			one-to-one relation to VertexFlexibleFields
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 									= FinanceEnterpriseGroup
				related.VertexFlexibleFields.UniqueIdOfRelatedObject			= UniqueID
				related.VertexFlexibleFields.TaxAttributeCode           		= blank	
				related.VertexFlexibleFields.Type								= "O"	

		TaxEntityRel				 
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= TaxLineItem.FinanceEnterpriseGroup
				related.TaxEntity 				= TaxEntity

		TaxConfigurationRel						
        	one-to-one relation to TaxConfiguration
        	Field Mapping uses symbolic key
				related.TaxConfiguration		= FinanceEnterpriseGroup

		PurchaseOrderRel
			one-to-one relation to PurchaseOrder
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.PurchaseOrder			= InvoiceNumber
		PurchaseOrderLineRel
			one-to-one relation to PurchaseOrderLine
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.PurchaseOrder			= InvoiceNumber
				related.PurchaseOrderLine		= LineItemNumber

		PurchaseOrderAndLineAddOnChargeRel
			one-to-many relation to PurchaseOrderAndLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
				related.PurchaseOrder							= InvoiceNumber
			Instance Selection
				where (related.UniqueID							= RelatedLineItemUniqueId)
		
		RequisitionRel
			one-to-one relation to Requisition
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.Requisition				= InvoiceNumber
		RequisitionLineRel
			one-to-one relation to RequisitionLine
			Field Mapping uses symbolic key
				related.Company					= LocalCompany
				related.Requisition				= InvoiceNumber
				related.RequisitionLine			= LineItemNumber

		RequisitionLineAddOnChargeRel
			one-to-many relation to RequisitionLineAddOnCharge
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
				related.Requisition								= InvoiceNumber
			Instance Selection
				where (related.UniqueID							= RelatedLineItemUniqueId)

		LocalReceivableGeneralLedgerCodeRel
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company					 				= LocalCompany
				related.ReceivableGeneralLedgerCode 			= LocalReceivableGeneralLedgerCode

		BillingInvoiceRel
			one-to-one relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
				related.BillingInvoice.InvoicePrefix			= LocalInvoicePrefix
				related.BillingInvoice.InvoiceNumber			= InvoiceNumber

		LocalInvoiceNumberBillingInvoiceRel
			one-to-one relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
				related.BillingInvoice.InvoicePrefix			= LocalInvoicePrefix
				related.BillingInvoice.InvoiceNumber			= LocalInvoiceNumber

		TaxableBillingInvoiceHeaderRel
			one-to-many relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
				related.BillingInvoice.InvoicePrefix			= LocalInvoicePrefix
				related.BillingInvoice.InvoiceNumber			= InvoiceNumber
			Instance Selection
				where (related.FreightCharge.TransactionAmount	not= 0)
		
		BillingInvoiceLineRel
			one-to-many relation to BillingInvoiceLine
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
				related.BillingInvoice.InvoicePrefix			= LocalInvoicePrefix
				related.BillingInvoice.InvoiceNumber			= InvoiceNumber
			Instance Selection
				where (related.UniqueID							= RelatedLineItemUniqueId)
		
		BillingInvoiceAddOnChargeRel
			one-to-many relation to BillingInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
				related.BillingInvoice.InvoicePrefix			= LocalInvoicePrefix
				related.BillingInvoice.InvoiceNumber			= InvoiceNumber
			Instance Selection
				where (related.UniqueID							= RelatedLineItemUniqueId)

	Local Fields

		CalculateTax
		LocalTaxTable			is a TaxTableField		
		Idx 					is Numeric 6			
		ProcessTaxHistory
		LocalTaxHistoryProcessed is Alpha 1
		LocalSabrixUserElement50 is a TaxAttributeGroup50		
		LocalOneSourceTaxAttribute is a UserElementGroup
		LocalTaxAttributeCode 	is Alpha 50	
		LocalElementValue 		is Alpha 40 
		LocalUserAttributeName	is like UserAttributeName	
		LocalAttributeValue		is a UserAttributeValue		
		LocalContinueWithCreate is Boolean					
		GetFlds					is Numeric 2
		Trigger					is Alpha 1
		LocalTrigger			is Alpha 1
		LocalLevelUserFieldError is Alpha 20
		LocalMoreResults		is RichText
		LocalReceivableGeneralLedgerCode	is like ReceivableGeneralLedgerCode
		LocalCompany						is like PayablesCompany					
		LocalVendor							is like Vendor							
		LocalPayablesInvoice				is like PayablesInvoice					
		LocalPayablesInvoiceDistribution	is like PayablesInvoiceDistribution		
		SetLocalReturnedTaxAmount			is a InternationalAmount				
		LocalVertexAttributes				is a VertexAttributeGroup				
		LocalVertexFlexibleFieldsKey 		is a VertexFlexibleFields				
		LocalAutoMatchResult	is like AutoMatchResult
		LocalTrueInvoicedTaxAmount				is an InternalAmount
		LocalTrueAccruedTaxAmount				is an InternalAmount
		LocalLandedUnitCost						is an InternationalCost		
		LocalTaxAmount							is an InternationalCost
		LocalInvoicePrefix		is like InvoicePrefix
		LocalInvoiceNumber		is like Invoice
		LocalContinue					is Boolean		

	Derived Fields
		ShipToAddressSummary is a MessageField	
			"<ShipToAddress.Municipality >_<ShipToAddress.StateProvince>,<ShipToAddress.PostalCode>_<ShipToAddress.Country>"
		ShipFromAddressSummary is a MessageField	
			"<ShipFromAddress.Municipality >_<ShipFromAddress.StateProvince>,<ShipFromAddress.PostalCode>_<ShipFromAddress.Country>"
		BillToAddressSummary is a MessageField	
			"<BillToAddress.Municipality >_<BillToAddress.StateProvince>,<BillToAddress.PostalCode>_<BillToAddress.Country>"
		BillFromAddressSummary is a MessageField	
			"<BillFromAddress.Municipality >_<BillFromAddress.StateProvince>,<BillFromAddress.PostalCode>_<BillFromAddress.Country>"
		FlexibleFieldsExistInd is a DerivedField
			type is Alpha 1
			if (FlexibleFieldsExist)
				return "*"
			return blank
		ReturnedErrorMessageText is a DerivedField		
			type is MessageField
			restricted
			if (ReturnedErrorMessage entered)
				return ReturnedErrorMessageLabel
			return blank	
		
		ReturnedErrorMessageLabel is a MessageField                     
			"ReturnedErrorMessage"	

		TaxTableRecordsExist is a DerivedField
			type is Alpha 10
			if (TaxDetailOutRel exist)
				return "Exist"
			else
				return blank
		TaxDetailOutCount	is a DerivedField			 
			type is Numeric 1  
			return (instance count of TaxDetailOutRel)
			





		DerivedTaxDate is a DerivedField	  
			type is Alpha 10
			if (TaxDate entered)
				return TaxDateAlpha10




			return CurrentDateAlpha10

		TaxDateAlpha10 is a StringField	
			type is Alpha 10
			TaxDateAlpha8[1:4]	
			"-"
			TaxDateAlpha8[5:6]	
			"-"
			TaxDateAlpha8[7:8]	
			

		CurrentDateAlpha10 is a StringField	  
			type is Alpha 10
			CurrentDateAlpha8[1:4]
			"-"
			CurrentDateAlpha8[5:6]
			"-"
			CurrentDateAlpha8[7:8]	
			
		CurrentDateAlpha8 is a DerivedField
			type is Alpha 8
			return current date

		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp

		TaxDateAlpha8 is a DerivedField
			type is Alpha 8
			if (TaxDate entered)
				return TaxDate
			return CurrentDateAlpha10

		FormatedDateMMDDCCYY is a StringField	
			type is Alpha 10
			TaxDateMM	
			"-"
			TaxDateDD	
			"-"			
			TaxDateCCYY	 
		
		TaxDateMM is a StringField	 
			type is Alpha 2
			TaxDateAlpha8[5:6]	
		TaxDateDD is a StringField	  
			type is Alpha 2
			TaxDateAlpha8[7:8]	
		TaxDateCCYY is a StringField	  
			type is Alpha 4
			TaxDateAlpha8[1:4]	
		EditUserAttributeValue is a DerivedField			 				 
			type is Alpha 1
			LocalContinueWithCreate = true
			if (LocalAttributeValue not entered)
				if (AttributeMissingProcess.Halt)
					constraint (LocalAttributeValue entered)
						"ErrorAt<LocalLevelUserFieldError>,UserAttributeName<LocalUserAttributeName>"					
				if (AttributeMissingProcess.MissingMessage)
					LocalAttributeValue = AttributeMissingMessage		 	
				if (AttributeMissingProcess.SkipAttribute)
					LocalContinueWithCreate = false							

			return blank
			
		Load1SourceUserAttributesFrDerived is a DerivedField			 				
			type is Alpha 1	 
			initialize Idx
			initialize LocalSabrixUserElement50
			initialize TransientUserElement50

			if (InputUserAttributesRel exists)
				initialize LocalMoreResults			
				for each InputUserAttributesRel 
					if (each.UserAttributeName entered)		 
						Idx +=1
						LocalSabrixUserElement50.UserElement[Idx].Number	= Idx 	 
						LocalSabrixUserElement50.UserElement[Idx].Name		= each.UserAttributeName	
						LocalSabrixUserElement50.UserElement[Idx].Value		= each.UserAttributeValue
			else
			if (LineItemUserFieldsRel exist
			and UserElementsExist)

				LocalOneSourceTaxAttribute	= LineItemUserFieldsRel.UserElementGroup	 
				GetFlds = 1
				while (GetFlds <= 25) 
					if (LocalOneSourceTaxAttribute.UserElement[GetFlds].Number not entered)
						end while
					LocalMoreResults = LocalMoreResults + "[TaxLineItem370]GetFlds" + "[" + GetFlds + "]" 
					if (LocalOneSourceTaxAttribute.UserElement[GetFlds].Number entered)
						LocalMoreResults = LocalMoreResults + "Number:" + LocalOneSourceTaxAttribute.UserElement[GetFlds].Number + "<br>"
						LocalMoreResults = LocalMoreResults + "Name..:" + LocalOneSourceTaxAttribute.UserElement[GetFlds].Name + "<br>"
						LocalMoreResults = LocalMoreResults + "Value.:" + LocalOneSourceTaxAttribute.UserElement[GetFlds].Value + "<br>"
						LocalSabrixUserElement50.UserElement[GetFlds].Number	= GetFlds 	 
						LocalSabrixUserElement50.UserElement[GetFlds].Name		= LocalOneSourceTaxAttribute.UserElement[GetFlds].Name  	
						LocalSabrixUserElement50.UserElement[GetFlds].Value		= LocalOneSourceTaxAttribute.UserElement[GetFlds].Value
					GetFlds +=1

			initialize GetFlds
			TransientUserElement50 = LocalSabrixUserElement50	 
			while (GetFlds <= 25) 
				GetFlds +=1
				if (TransientUserElement50.UserElement[GetFlds].Number entered)
					LocalMoreResults = LocalMoreResults + "Number:" + TransientUserElement50.UserElement[GetFlds].Number + "<br>"
					LocalMoreResults = LocalMoreResults + "Name..:" + TransientUserElement50.UserElement[GetFlds].Name + "<br>"
					LocalMoreResults = LocalMoreResults + "Value.:" + TransientUserElement50.UserElement[GetFlds].Value + "<br>"					
			return blank


		LoadVertexDerivedFields is a DerivedField				
			type is Alpha 1	 
			restricted

			initialize LocalVertexAttributes 
			initialize TransientVertexAttributes

			if (VertexInputFlexibleFieldsRel exists)
				initialize LocalMoreResults		

				initialize Idx
				for each VertexInputFlexibleFieldsRel.VertexFlexibleCodeRel  
					if (each.VertexFlexibleCode.Code entered)		 
						Idx +=1
						LocalVertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= Idx	
						LocalVertexAttributes.VertexCodes.FlexibleCode[Idx].Code 			= each.Code
						LocalVertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue 
						LocalVertexAttributes.VertexCodes.FlexibleCode[Idx].Description 	= each.Description
			 

				initialize Idx				
				for each VertexInputFlexibleFieldsRel.VertexFlexibleNumericRel  
					if (each.VertexFlexibleNumeric.NumericValue entered)		 
						Idx +=1
						LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId 			= Idx	
						LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 		= each.NumericValue
						LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue 	= each.ExternalValue 
						LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals 	= each.NumberOfDecimals
						LocalVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].Description 		= each.Description


				initialize Idx				
				for each VertexInputFlexibleFieldsRel.VertexFlexibleDateRel
					if (each.VertexFlexibleDate.DateValue entered)		 
						Idx +=1
						LocalVertexAttributes.VertexDates.FlexibleDate[Idx].FieldId 		= Idx	
						LocalVertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= each.DateValue
						LocalVertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue 	= each.ExternalValue 
						LocalVertexAttributes.VertexDates.FlexibleDate[Idx].Description 	= each.Description
						
						
			LocalMoreResults = LocalMoreResults + "======================================================="
			initialize GetFlds
			TransientVertexAttributes = LocalVertexAttributes	 			
			return blank
			

		SendAddressOrTaxAreaIdLabel is a LabelField			
			"<SendAddressOrTaxAreaId>"
		DerivedLineCheckValues is a DerivedField			 				 
			type is Alpha 1
			if (SendAddressOrTaxAreaId.AddressOnly
			and ShipToAddress.Country not entered)
				ReturnedErrorMessage = PassAddressWarning
			if (SendAddressOrTaxAreaId.TaxAreaIDOnly	 
			and ShipToTaxCode not entered)	
				ReturnedErrorMessage = PassTAIDWarning
			return blank

		PassAddressWarning is a StringField	 
			type is Alpha 100
			"**Warning:PassAddressOrTAIDOptionsIs:" 															 
			SendAddressOrTaxAreaIdLabel
			" and no Address exist. CountryIs:"  
			ShipToAddress.Country		
		PassTAIDWarning is a StringField	 
			type is Alpha 100
			"Warning:PassAddressOrTAIDOptionsIs:" 															 
			SendAddressOrTaxAreaIdLabel
			" and no TaxAreaId exists."  
			" TaxCodeIs:" 
			ShipToTaxCode

    Sets
		ByUniqueIdOfRelatedObject
            indexed
			Sort Order
				FinanceEnterpriseGroup
				TaxLineItem.UniqueIdOfRelatedObject
				LineItemNumber						

				
		ByRelatedObjectReference
			duplicates
			Sort Order

				FinanceEnterpriseGroup
				TaxLineItem.RelatedObjectReference









	Rule Blocks
		ReturnTaxDetailOut

			initialize Idx 
			initialize LocalTaxTable
			if (TaxDetailOutRel exist)
				for each TaxDetailOutRel
					Idx +=1	
					LocalTaxTable.TaxTableOutput[Idx].JurisdictionLevel		= each.JurisdictionLevel		
					LocalTaxTable.TaxTableOutput[Idx].ImpositionType		= each.ImpositionType			 
					LocalTaxTable.TaxTableOutput[Idx].TaxCode 	 			= each.TaxCode 	 			
					LocalTaxTable.TaxTableOutput[Idx].Flag					= each.Flag					
					LocalTaxTable.TaxTableOutput[Idx].TaxRate				= each.TaxRate				
					LocalTaxTable.TaxTableOutput[Idx].SecondaryRate			= each.SecondaryRate			
					LocalTaxTable.TaxTableOutput[Idx].InTaxAmount 			= each.InTaxAmount 			
					LocalTaxTable.TaxTableOutput[Idx].TaxAmount 		 	= each.TaxAmount 		 	
					LocalTaxTable.TaxTableOutput[Idx].TaxableAmount 	 	= each.TaxableAmount 	 	
					LocalTaxTable.TaxTableOutput[Idx].AccrualFlag			= each.AccrualFlag			
					LocalTaxTable.TaxTableOutput[Idx].TaxInputAccount	 	= each.TaxInputAccount	 	
					LocalTaxTable.TaxTableOutput[Idx].TaxInputDueAccount	= each.TaxInputDueAccount	
					LocalTaxTable.TaxTableOutput[Idx].TaxOutputAccount	 	= each.TaxOutputAccount		
					LocalTaxTable.TaxTableOutput[Idx].TaxOutputDueAccount	= each.TaxOutputDueAccount	
					LocalTaxTable.TaxTableOutput[Idx].EffectiveDate			= each.EffectiveDate			
					LocalTaxTable.TaxTableOutput[Idx].TaxPointDate			= each.TaxPointDate			
					LocalTaxTable.TaxTableOutput[Idx].TaxPoint				= each.TaxPoint				
					LocalTaxTable.TaxTableOutput[Idx].AccountError			= each.AccountError			
					LocalTaxTable.TaxTableOutput[Idx].LandCostFlag			= each.LandCostFlag			
					LocalTaxTable.TaxTableOutput[Idx].TaxTerms				= each.TaxTerms				
					LocalTaxTable.TaxTableOutput[Idx].AllowAccountChange	= each.AllowAccountChange 	
					LocalTaxTable.TaxTableOutput[Idx].TaxID					= each.TaxID					
					LocalTaxTable.TaxTableOutput[Idx].AccrualCode			= each.AccrualCode			
					LocalTaxTable.TaxTableOutput[Idx].PostOption        	= each.PostOption        	
					LocalTaxTable.TaxTableOutput[Idx].TaxableToleranceLimit = each.TaxableToleranceLimit	
					LocalTaxTable.TaxTableOutput[Idx].TaxToleranceAmount    = each.TaxToleranceAmount    
					LocalTaxTable.TaxTableOutput[Idx].FromRate				= each.FromRate				
					LocalTaxTable.TaxTableOutput[Idx].ThruRate 				= each.ThruRate 	
			TransientTaxTable = LocalTaxTable
												
		CreateTaxDetailOutFile
			invoke Delete TaxDetailOutRel
			if (LocalTaxTable.TaxTableOutput[1].TaxCode entered)
				Idx = 1
				while (Idx <= 8)
					invoke Create TaxDetailOutRel	  												
						invoked.FinanceEnterpriseGroup					= TaxLineItem.FinanceEnterpriseGroup
						invoked.TaxDetailOut.UniqueIdOfRelatedObject	= TaxLineItem.UniqueID
						invoked.RelatedObjectReference					= reference to this instance				
						invoked.JurisdictionLevel			= LocalTaxTable.TaxTableOutput[Idx].JurisdictionLevel	
						invoked.ImpositionType				= LocalTaxTable.TaxTableOutput[Idx].ImpositionType								 
						if (ShipToTaxCode entered)			
							invoked.TaxCode 	 			= ShipToTaxCode	
						else	
							invoked.TaxCode 	 			= LocalTaxTable.TaxTableOutput[Idx].TaxCode 	 
						invoked.Flag						= LocalTaxTable.TaxTableOutput[Idx].Flag
						invoked.TaxRate						= LocalTaxTable.TaxTableOutput[Idx].TaxRate
						invoked.SecondaryRate				= LocalTaxTable.TaxTableOutput[Idx].SecondaryRate
						invoked.InTaxAmount 				= LocalTaxTable.TaxTableOutput[Idx].InTaxAmount 	
						invoked.TaxAmount 		 			= LocalTaxTable.TaxTableOutput[Idx].TaxAmount 		 
						invoked.TaxAmount5DP 	 			= LocalTaxTable.TaxTableOutput[Idx].TaxAmount5DP 	
						invoked.TaxableAmount 	 			= LocalTaxTable.TaxTableOutput[Idx].TaxableAmount 	 
						invoked.AccrualFlag					= LocalTaxTable.TaxTableOutput[Idx].AccrualFlag
						invoked.TaxInputAccount	 			= LocalTaxTable.TaxTableOutput[Idx].TaxInputAccount	 		 
						invoked.TaxInputDueAccount			= LocalTaxTable.TaxTableOutput[Idx].TaxInputDueAccount		 
						invoked.TaxOutputAccount			= LocalTaxTable.TaxTableOutput[Idx].TaxOutputAccount	 		 
						invoked.TaxOutputDueAccount			= LocalTaxTable.TaxTableOutput[Idx].TaxOutputDueAccount	
						invoked.EffectiveDate				= LocalTaxTable.TaxTableOutput[Idx].EffectiveDate
						invoked.TaxPointDate				= LocalTaxTable.TaxTableOutput[Idx].TaxPointDate
						invoked.TaxPoint					= LocalTaxTable.TaxTableOutput[Idx].TaxPoint
						invoked.AccountError				= LocalTaxTable.TaxTableOutput[Idx].AccountError
						invoked.LandCostFlag				= LocalTaxTable.TaxTableOutput[Idx].LandCostFlag			 
						invoked.TaxTerms					= LocalTaxTable.TaxTableOutput[Idx].TaxTerms
						invoked.AllowAccountChange 			= LocalTaxTable.TaxTableOutput[Idx].AllowAccountChange		 
						invoked.TaxID						= LocalTaxTable.TaxTableOutput[Idx].TaxID
						invoked.AccrualCode					= LocalTaxTable.TaxTableOutput[Idx].AccrualCode		
						invoked.AccrualCodeAccount			= LocalTaxTable.TaxTableOutput[Idx].AccrualCodeAccount		 
						invoked.PostOption        			= LocalTaxTable.TaxTableOutput[Idx].PostOption        	
						invoked.TaxableToleranceLimit		= LocalTaxTable.TaxTableOutput[Idx].TaxableToleranceLimit    
						invoked.TaxToleranceAmount    		= LocalTaxTable.TaxTableOutput[Idx].TaxToleranceAmount       
						invoked.FromRate					= LocalTaxTable.TaxTableOutput[Idx].FromRate				 
						invoked.ThruRate 					= LocalTaxTable.TaxTableOutput[Idx].ThruRate 
						invoked.VertexRuleId				= LocalTaxTable.TaxTableOutput[Idx].VertexRuleId
						invoked.InvoiceTextCodeOut			= LocalTaxTable.TaxTableOutput[Idx].InvoiceTextCodeOut	
						invoked.InputOutputType				= LocalTaxTable.TaxTableOutput[Idx].InputOutputType	
						invoked.TaxDistributionAccountCode 	= LocalTaxTable.TaxTableOutput[Idx].TaxDistributionAccountCode							
						invoked.Situs						= LocalTaxTable.TaxTableOutput[Idx].Situs				 
						invoked.RateClassification			= LocalTaxTable.TaxTableOutput[Idx].RateClassification				 
						invoked.IsService					= LocalTaxTable.TaxTableOutput[Idx].IsService							 
						invoked.RecoverablePercent			= LocalTaxTable.TaxTableOutput[Idx].RecoverablePercent 					 
						invoked.RecoverableAmount			= LocalTaxTable.TaxTableOutput[Idx].RecoverableAmount					 
						invoked.UnrecoverableAmount			= LocalTaxTable.TaxTableOutput[Idx].UnrecoverableAmount 	
						invoked.TaxResult					= LocalTaxTable.TaxTableOutput[Idx].TaxResult 						 
						invoked.VertexTaxType				= LocalTaxTable.TaxTableOutput[Idx].VertexTaxType						 
						invoked.TaxStructure				= LocalTaxTable.TaxTableOutput[Idx].TaxStructure 						 
						invoked.Variance					= LocalTaxTable.TaxTableOutput[Idx].Variance					 
						invoked.AdditionalTaxesDue			= LocalTaxTable.TaxTableOutput[Idx].AdditionalTaxesDue			 
						invoked.OutsideThreshold			= LocalTaxTable.TaxTableOutput[Idx].OutsideThreshold
					Idx +=1
					if (Idx > 8
					or  LocalTaxTable.TaxTableOutput[Idx].TaxCode not entered)						 
						end while 	
																				
		LoadElementValues2
			initialize Idx
			for each TaxAttributeInstanceRel.OneSourceTaxAttributeByNumberRel				 
				if (each.Value entered
				or  each.LoadDynamicField entered) 								
					Idx +=1
					LocalElementValue = each.Value
					MoreResults = MoreResults + "Index:" + Idx + "EachValue:" + LocalElementValue + "<br>"	 
					LocalOneSourceTaxAttribute.UserElement[Idx].Number	= Idx	 	 
					LocalOneSourceTaxAttribute.UserElement[Idx].Name	= each.UserAttributeName		 
					if (each.LoadDynamicField.ValueIs.TaxEntity)
						LocalOneSourceTaxAttribute.UserElement[Idx].Value	= TaxEntity
					else	
					if (each.LoadDynamicField.ValueIs.UNSPSC
					or  each.LoadDynamicField.ValueIs.CommodityCode)									
						LocalOneSourceTaxAttribute.UserElement[Idx].Value	= CommodityCode				
					else		
					if (each.LoadDynamicField.ValueIs.TaxDate)
						LocalOneSourceTaxAttribute.UserElement[Idx].Value	= DerivedTaxDate	 
					else	
						LocalOneSourceTaxAttribute.UserElement[Idx].Value	= LocalElementValue		 

					if (LocalOneSourceTaxAttribute.UserElement[Idx].Value not entered)
						LocalOneSourceTaxAttribute.UserElement[Idx].Value = "***Blank Value"



		DisplayCalculateTaxInput
			display "DisplayCalculateTaxInput"




























































































































		DisplayCalculateTaxOutput
			display "DisplayCalculateTaxOutput"









































































































































































	Form Invokes






					
    Actions
        Create is a Create Action
        	Entrance Rules

        	Action Rules

        	Exit Rules

        Update is an Update Action
			Action Rules

				if (ClearShipToAddress)
					initialize ShipToAddress
					ClearShipToAddress = false
				if (ClearBillToAddress)
					initialize BillToAddress
					ClearBillToAddress = false					
				if (ClearShipFromAddress)
					initialize ShipFromAddress
					ClearShipFromAddress = false						
				if (ClearBillFromAddress)
					initialize BillFromAddress
					ClearBillFromAddress = false
				if (TaxEntityRel.ThirdParty.VertexOSeries		
				and SendAddressOrTaxAreaId entered)
					LocalTrigger = DerivedLineCheckValues   								
			Exit Rules

        Delete is a Delete Action
		Purge is a Purge Action
			restricted

		OneSourceCreateTaxDistributionsForMatch is a Set Action
			restricted
			Parameters
				PrmCompany			is a PayablesCompany
				PrmPayablesInvoice	is a PayablesInvoice
				PrmAutoMatchResult  is like AutoMatchResult
				PrmFromRecon		is Boolean
				PrmReconMatchWork   is a MatchWork

			Parameter Rules
				PrmCompany
					required
				PrmPayablesInvoice
					required
					constraint (!PrmPayablesInvoice.CreditForRebill)
					    "CannotCreateTaxDistribsForCreditForRebillFromOneSource"

			Sort Order
				FinanceEnterpriseGroup
				TaxLineItem.UniqueIdOfRelatedObject
				LineItemNumber

			Local Fields
				LastDistribution				is like PayablesInvoiceDistribution
				SetDoShortPayProcess			is Boolean
			    LocalInvoiceEnteredTaxAmount	is a CurrencyAmount
			    OneSourceReturnedTaxAmount		is a CurrencyAmount
			    OneSourceReturnedTaxRate		is like ChrgRate
			    OneSourceCalculatedTaxAmount	is a CurrencyAmount
			    OneSourceCalculatedTaxRate		is like ChrgRate

				SetLocalReturnedTaxAmount		is a InternationalAmount
				SetLocalTaxDifference			is like InternationalAmount

				SumOfCalculatedTaxAmount		is an InternationalAmount
				SumOfLineTaxableAmount			is an InternationalAmount



				
				LocalInvoiceTaxableAmount		is a CurrencyAmount
				UserElementGroup
				
				
				OneSourceMatchWork				is a MatchWork view
				OneSourceAutoMatchError			is Alpha 200

				PayablesTaxTolerance									

				NextSentence					is Boolean
				LocalTrigger 					is Alpha 1
				CreateDistribError				is Boolean
						
			Instance Selection
				where (TaxLineItem.UniqueIdOfRelatedObject = PrmPayablesInvoice.UniqueID)

			Rule Blocks

				OSPopulateCalcTaxInputFields

					initialize CalculateTax
					CalculateTax.SendMultLineItems			= true
					CalculateTax.UpdateLineItems			= true
					CalculateTax.CallingModule				= "Payables_Invoice"
					CalculateTax.System						= "AP"
					CalculateTax.InFinanceEnterpriseGroup	= PrmPayablesInvoice.Company.FinanceEnterpriseGroup
					CalculateTax.TaxEntity					= PrmPayablesInvoice.Company.AccountingEntity
					CalculateTax.InvoiceCompany				= PrmPayablesInvoice.Company
					CalculateTax.VendorGrp					= PrmPayablesInvoice.Company.VendorGroup
					CalculateTax.ProcessLevel				= PrmPayablesInvoice.ProcessLevel
					CalculateTax.Vendor						= PrmPayablesInvoice.Vendor
					CalculateTax.VendorCustomerName			= PrmPayablesInvoice.Vendor.VendorName
					CalculateTax.VoucherNumber				= PrmPayablesInvoice.VoucherNumber
					CalculateTax.Invoice					= PrmPayablesInvoice.Invoice
					CalculateTax.Suffix						= PrmPayablesInvoice.Suffix
					CalculateTax.CancelSequence				= PrmPayablesInvoice.CancelSequence
					CalculateTax.InvoiceDate				= PrmPayablesInvoice.InvoiceDate
					CalculateTax.ShipmentDate				= PrmPayablesInvoice.InvoiceDate
					CalculateTax.PaymentDate				= PrmPayablesInvoice.InvoiceDate
					CalculateTax.TaxDate					= PrmPayablesInvoice.InvoiceDate
					CalculateTax.TaxPointDate				= PrmPayablesInvoice.DerivedTaxPointDate	
					CalculateTax.InvoiceAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount				
					CalculateTax.TaxableAmount				= LocalInvoiceTaxableAmount				
				   	CalculateTax.TransactionSource			= "I"	
					CalculateTax.DeliveryTerms          	= PrmPayablesInvoice.ShipTerm
					CalculateTax.VATRegistrationCountry    	= PrmPayablesInvoice.TaxEntityRel.VATRegistrationCountry 			
					CalculateTax.VATRegistrationNumber		= PrmPayablesInvoice.TaxEntityRel.VATRegistrationNumber			
					if (PrmPayablesInvoice.ProcessLevel.TaxCode entered)	
						if (PrmPayablesInvoice.RemitToCode.TaxCode entered)							
							CalculateTax.FromTaxCode		= PrmPayablesInvoice.RemitToCode.TaxCode	
						else														
							CalculateTax.FromTaxCode		= PrmPayablesInvoice.Vendor.TaxCode		
					

					if (PrmPayablesInvoice.RemitToCode.CurrentAddressRel exists	
					and PrmPayablesInvoice.RemitToCode.VATRegistrationNumber entered)
						CalculateTax.FromPostalAddress			= PrmPayablesInvoice.RemitToCode.CurrentAddressRel.PostalAddress
				    	CalculateTax.FromVATRegistrationCountry = PrmPayablesInvoice.RemitToCode.VATRegistrationCountry			
				    	CalculateTax.FromVATRegistrationNumber	= PrmPayablesInvoice.RemitToCode.VATRegistrationNumber				
					else
						CalculateTax.FromPostalAddress			= PrmPayablesInvoice.Vendor.CurrentAddressRel.PostalAddress		
				    	CalculateTax.FromVATRegistrationCountry = PrmPayablesInvoice.Vendor.VATRegistrationCountry					
				    	CalculateTax.FromVATRegistrationNumber	= PrmPayablesInvoice.Vendor.VATRegistrationNumber					
				    
				    
				    CalculateTax.DefaultFilingCurrency 			= PrmPayablesInvoice.Company.Currency 
					CalculateTax.CurrencyRate					= PrmPayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate 		
				    CalculateTax.TransactionCurrency 			= PrmPayablesInvoice.InvoiceCurrency								
				    if (PrmPayablesInvoice.PayCurrency entered)
						CalculateTax.BaseCurrency 				= PrmPayablesInvoice.PayCurrency					
					else	
						CalculateTax.BaseCurrency 				= PrmPayablesInvoice.PayGroup.BaseCurrency
					if (CalculateTax.BaseCurrency not entered)											
						CalculateTax.BaseCurrency				= PrmPayablesInvoice.ProcessLevel.PayGroup.BaseCurrency	

					CalculateTax.ReceiptSite					= PrmPayablesInvoice.ProcessLevel							
					CalculateTax.UniqueIdOfRelatedObject		= PrmPayablesInvoice.UniqueID								
					CalculateTax.UserElementLevel				= blank
					CalculateTax.CreateOutputUserFieldFile		= true
									

					if (PrmPayablesInvoice.Location.PostalAddress entered)									

						CalculateTax.PostalAddress 				= PrmPayablesInvoice.Location.PostalAddress	
					else
						CalculateTax.PostalAddress				= PrmPayablesInvoice.ProcessLevel.PostalAddress	
				

					if (PrmPayablesInvoice.BillToProcessLevel.PostalAddress entered)
						CalculateTax.BuyerAdminDestAddress		= PrmPayablesInvoice.BillToProcessLevel.PostalAddress		
					else
						CalculateTax.BuyerAdminDestAddress		= PrmPayablesInvoice.ProcessLevel.PostalAddress		
					

					if (PrmPayablesInvoice.PurchaseFromLocation entered)
						CalculateTax.FromPostalAddress			= PrmPayablesInvoice.PurchaseFromLocation.VendorAddress 	
					else	
						CalculateTax.FromPostalAddress			= PrmPayablesInvoice.Vendor.VendorAddress
					

					if (PrmPayablesInvoice.BillFromLocation entered)
						CalculateTax.POAAddress					= PrmPayablesInvoice.BillFromLocation.VendorAddress	 	
					else
						CalculateTax.POAAddress					= PrmPayablesInvoice.Vendor.VendorAddress	



				
					UserElementGroup.UserElement[1].Number 		= 1
					UserElementGroup.UserElement[1].Name		= "ATTRIBUTE1"
					UserElementGroup.UserElement[1].Value		= "INVC"
	
					UserElementGroup.UserElement[2].Number 		= 2
					UserElementGroup.UserElement[2].Name		= "ATTRIBUTE3"
					UserElementGroup.UserElement[2].Value		= PrmPayablesInvoice.FirstPurchaseOrder		
	
					if  (PrmPayablesInvoice.FirstPurchaseOrder.AribaPOType entered)
						UserElementGroup.UserElement[3].Number 	= 3
						UserElementGroup.UserElement[3].Name	= "ATTRIBUTE4"
						UserElementGroup.UserElement[3].Value	= PrmPayablesInvoice.FirstPurchaseOrder.AribaPOType		

					CalculateTax.SabrixUserElement				= UserElementGroup	
					CalculateTax.CreateOutputUserFieldFile		= true
			
					CalculateTax.ReceiptSite					= PrmPayablesInvoice.ProcessLevel							
					CalculateTax.UniqueIdOfRelatedObject		= PrmPayablesInvoice.UniqueID								
					CalculateTax.CreateOutputUserFieldFile		= true
									
					if (PrmPayablesInvoice.Location.PostalAddress entered)									
						CalculateTax.PostalAddress 				= PrmPayablesInvoice.Location.PostalAddress	
					else
						CalculateTax.PostalAddress				= PrmPayablesInvoice.ProcessLevel.PostalAddress	
				

					if (PrmPayablesInvoice.BillToProcessLevel.PostalAddress entered)
						CalculateTax.BuyerAdminDestAddress		= PrmPayablesInvoice.BillToProcessLevel.PostalAddress		
					else
						CalculateTax.BuyerAdminDestAddress		= PrmPayablesInvoice.ProcessLevel.PostalAddress		
					

					if (PrmPayablesInvoice.PurchaseFromLocation entered)
						CalculateTax.FromPostalAddress			= PrmPayablesInvoice.PurchaseFromLocation.VendorAddress 	
					else	
						CalculateTax.FromPostalAddress			= PrmPayablesInvoice.Vendor.VendorAddress
					

					if (PrmPayablesInvoice.BillFromLocation entered)
						CalculateTax.POAAddress					= PrmPayablesInvoice.BillFromLocation.VendorAddress	 	
					else
						CalculateTax.POAAddress					= PrmPayablesInvoice.Vendor.VendorAddress	



					initialize CalculateTax.TaxAmount
					CalculateTax.Function	= "C"
					CalculateTax.BypassEditing			= true  

 								
			Action Rules
				Set Rules
					Entrance Rules

					
					    LocalCompany 			= PrmCompany
					    LocalPayablesInvoice 	= PrmPayablesInvoice
					    LocalVendor 			= PrmPayablesInvoice.Vendor
					    
						if (PrmFromRecon)
							OneSourceMatchWork = PrmReconMatchWork.MatchWork
						else
							OneSourceMatchWork = PrmPayablesInvoice.MatchReconQueueRel.MatchWork
												
						LocalInvoiceEnteredTaxAmount = PrmPayablesInvoice.PayablesInvoiceTaxRel.EnteredTaxAmount

						if (PrmPayablesInvoice.TaxableAmount entered)
							LocalInvoiceTaxableAmount	= PrmPayablesInvoice.TaxableAmount
						else
						if (PrmPayablesInvoice.DerivedTaxMethodInvOrAcc.Accrued)
							LocalInvoiceTaxableAmount	= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
						else
							LocalInvoiceTaxableAmount	= (PrmPayablesInvoice.InvoiceAmount.CurrencyAmount - PrmPayablesInvoice.TaxAmount)

						LastDistribution	= PrmPayablesInvoice.last PayablesInvoiceDistributionRel.PayablesInvoiceDistribution


						include OSPopulateCalcTaxInputFields
	
						LocalTrigger	= CalculateTax.ExecuteCalculateTax



						    
						if  (CalculateTax.OutputErrorNumber entered)

							OneSourceAutoMatchError 		= CalculateTax.OutputErrorText 
							if  (CalculateTax.OutputErrorText not entered)
							    OneSourceAutoMatchError = "CalculateTaxError"

							if (CalculateTax.OutputErrorNumber = 700	
							or  CalculateTax.OutputErrorNumber = 701	
							or  CalculateTax.OutputErrorNumber = 702	
							or  CalculateTax.OutputErrorNumber = 703	
							or  CalculateTax.OutputErrorNumber = 704	
							or  CalculateTax.OutputErrorNumber = 705)	

								invoke Create PayablesInvoiceError
									invoked.Company			= PrmCompany
									invoked.PayablesInvoice	= PrmPayablesInvoice
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 57	//"SabrixTaxServerError"



					Exit Rules


		
						if  (CreateDistribError
						and  OneSourceAutoMatchError not entered)
						    OneSourceAutoMatchError = "ErrorCreatingOneSourceTaxDistributions"
						    


		
						if  (OneSourceAutoMatchError not entered)

							if  (OneSourceAutoMatchError not entered)

								invoke UpdateErrorRecordsAction PrmPayablesInvoice
									resume on error							
		    	           				OneSourceAutoMatchError = error message
	
							if  (OneSourceAutoMatchError not entered)
								if (PrmPayablesInvoice.InvoiceErrorsExists)
									OneSourceAutoMatchError = "InvoiceOutOfBalance:InvoiceAmount: " + PrmPayablesInvoice.InvoiceAmount.CurrencyAmount + "GoodsAmount: " + PrmPayablesInvoice.MatchAmount + "TaxAmount: " + PrmPayablesInvoice.TaxAmount + "DetailTaxAmount: " + PrmPayablesInvoice.POTaxAmount

						if (OneSourceAutoMatchError not entered
						and !PrmFromRecon)
	
							if  (OneSourceAutoMatchError not entered)

								invoke ValidateMatchInvoiceBalance PrmPayablesInvoice
									resume on error							
		    	           				OneSourceAutoMatchError = error message
	

		
							if  (!PrmFromRecon)
								if  (OneSourceAutoMatchError not entered)

									invoke BatchMatch OneSourceMatchWork.MatchWork
										resume on error							
			    	           				OneSourceAutoMatchError = error message
										invoked.PrmCompany 			= PrmCompany
										invoked.PrmInvoice 			= PrmPayablesInvoice
										invoked.PrmMatchWork 		= OneSourceMatchWork.MatchWork
										invoked.PrmAutoMatchResult	= PrmAutoMatchResult

	
						if  (OneSourceAutoMatchError entered)

							invoke Update OneSourceMatchWork.MatchWork
								invoked.VerifyMatchMessage = OneSourceAutoMatchError

							if (!PrmPayablesInvoice.CreditForRebill)
								if (PrmPayablesInvoice.TotalTaxAmount entered)
							

									invoke OneSourceResetDistributions PayablesInvoiceDistribution
										invoked.PrmCompany = PrmCompany
										invoked.PrmPayablesInvoice = PrmPayablesInvoice
								else

									invoke ResetAmounts PrmPayablesInvoice



							if (PrmAutoMatchResult entered)


								LocalCompany			= PrmCompany
								LocalPayablesInvoice	= PrmPayablesInvoice
								LocalAutoMatchResult 	= PrmAutoMatchResult

								invoke UpdateFromMatch LocalAutoMatchResultInvoiceRel 
									invoked.ErrorMessage 				= OneSourceAutoMatchError
									invoked.UnmatchedAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount

								invoke Update OneSourceMatchWork.MatchWork
									initialize invoked.LinkedAutoMatchResult
							else
								invoke FastUpdate PrmPayablesInvoice
									initialize invoked.BackgroundProcessing
						else
						if  (PrmFromRecon)
							invoke FastUpdate PrmPayablesInvoice.MatchReconQueueRel
								invoked.View = 3 
								
							invoke FinishMatch PrmReconMatchWork.MatchWork

				Instance Rules
				
				    LocalCompany 						= PrmCompany
				    LocalPayablesInvoice 				= PrmPayablesInvoice
				    LocalVendor 						= PrmPayablesInvoice.Vendor
				    LocalPayablesInvoiceDistribution 	= LineItemNumber





					
					if  (OneSourceAutoMatchError not entered
					and  !CreateDistribError)
						if (PrmPayablesInvoice.OneSourcePayAsBilled = "Y") 
							OneSourceReturnedTaxRate	= (LocalInvoiceEnteredTaxAmount / LocalInvoiceTaxableAmount)
							OneSourceReturnedTaxAmount 	= (PayablesInvoiceDistributionRel.DistributionAmount.CurrencyAmount * OneSourceReturnedTaxRate)
						else
							OneSourceReturnedTaxAmount	= CalculatedTaxAmt
							OneSourceReturnedTaxRate	= TaxRate
		


						initialize OneSourceCalculatedTaxAmount
						initialize OneSourceCalculatedTaxRate
						
						SetLocalReturnedTaxAmount = OneSourceReturnedTaxAmount
						round SetLocalReturnedTaxAmount to nearest PayablesInvoiceDistributionRel.DerivedRoundTo
						
						SumOfCalculatedTaxAmount += SetLocalReturnedTaxAmount 
						if (OneSourceReturnedTaxAmount entered)
							SumOfLineTaxableAmount	 += PayablesInvoiceDistributionRel.DistributionAmount.CurrencyAmount
			
	
						if (PrmPayablesInvoice.OneSourcePayAsBilled = "Y") 
							SetLocalTaxDifference  = SumOfCalculatedTaxAmount - LocalInvoiceEnteredTaxAmount
							if (SetLocalTaxDifference < 1 and SetLocalTaxDifference > -1)
								OneSourceReturnedTaxAmount -= SetLocalTaxDifference
	
						if  (PrmPayablesInvoice.UsePayablesTaxTolerance)

							PayablesTaxTolerance.InvoiceTaxAmount			= LocalInvoiceEnteredTaxAmount
							PayablesTaxTolerance.CalculatedTaxAmount		= SumOfCalculatedTaxAmount
							if (PayablesInvoiceDistributionRel.IsUseTaxCodeAccounts)
								PayablesTaxTolerance.OverchargeLimitAmount	= PayablesInvoiceDistributionRel.EntityTaxCodeRel.TaxToleranceAmount
							else
								PayablesTaxTolerance.OverchargeLimitAmount	= PrmPayablesInvoice.TaxEntityRel.TaxToleranceAmount
							PayablesTaxTolerance.AllowZeroTaxOverride		= true	
							

	





	

						if  (PrmPayablesInvoice.OneSourcePayAsBilled entered
						or  (!PrmPayablesInvoice.AllowShortPay)
						or  (!PrmPayablesInvoice.OneSourceDirectPay entered and PayablesTaxTolerance.InTolerance)
						or  (SumOfCalculatedTaxAmount not entered
						and  LocalInvoiceEnteredTaxAmount not entered))



							if (!PayablesInvoiceDistributionRel.PayablesTaxDetailRel exists)									

								invoke Create PayablesTaxDetail
									invoked.Company				= LocalCompany
									invoked.PayablesInvoice		= LocalPayablesInvoice
									invoked.PayablesInvoiceDistribution	= LocalPayablesInvoiceDistribution
									invoked.TaxingJurisdiction	= TaxingJurisdiction
									invoked.InformationMessage	= CalculateTax.OneSourceInformationMessage
									invoked.SentToTaxEngine		= not CalculateTax.NotSentToSabrix
									invoked.ShipToLocation		= PrmPayablesInvoice.Location
							else	

								invoke Update PayablesInvoiceDistributionRel.PayablesTaxDetailRel
									invoked.TaxingJurisdiction	= TaxingJurisdiction
									invoked.InformationMessage	= CalculateTax.OneSourceInformationMessage
									invoked.SentToTaxEngine		= not CalculateTax.NotSentToSabrix
									invoked.ShipToLocation		= PrmPayablesInvoice.Location
							
							if (TaxConfigurationRel.OneSourceVersionType.Generic)

								NextSentence = true					
							else
							if (PrmPayablesInvoice.OneSourcePayAsBilled = "Y" 
							or  CalculateTax.LocalExcludeFromSabrixCall)

								NextSentence = true					
							else
							if (OneSourceReturnedTaxRate entered
							and PayablesInvoiceDistributionRel.PayablesInvoiceDistribution != LastDistribution)

								OneSourceCalculatedTaxAmount = ((PayablesInvoiceDistributionRel.DistributionAmount.CurrencyAmount / SumOfLineTaxableAmount) * LocalInvoiceEnteredTaxAmount)
								OneSourceCalculatedTaxRate	= (OneSourceCalculatedTaxAmount / PayablesInvoiceDistributionRel.DistributionAmount.CurrencyAmount)
							else
							if (LocalInvoiceEnteredTaxAmount not entered)

								NextSentence = true					
							else
							if  (PayablesInvoiceDistributionRel.PayablesInvoiceDistribution = LastDistribution)

								OneSourceCalculatedTaxAmount = (LocalInvoiceEnteredTaxAmount - PrmPayablesInvoice.TransientActualTaxAmountSum)	
								OneSourceCalculatedTaxRate	= (OneSourceCalculatedTaxAmount / PayablesInvoiceDistributionRel.DistributionAmount.CurrencyAmount)
							

	
							if (OneSourceCalculatedTaxAmount != 0)

								invoke CreateLandedTaxDistribution PayablesInvoiceDistributionRel
									invoked.PrmOriginalDistribution		= PayablesInvoiceDistributionRel.PayablesInvoiceDistribution
									invoked.PrmLocalTaxSeqNbr			= 1								
									invoked.PrmTaxAmount				= OneSourceCalculatedTaxAmount
									invoked.PrmTaxRate					= OneSourceCalculatedTaxRate
									if (PrmPayablesInvoice.TaxAmount not entered)			
										invoked.PrmTaxTypeOverride		= "A"		
									invoked.PrmTaxJurisdiction			= CalculateTax.TaxingJurisdiction
									invoked.PrmInfoMessage				= CalculateTax.OneSourceInformationMessage	
									invoked.PrmSentToTaxEngine			= not CalculateTax.NotSentToSabrix		
							else
							if (OneSourceCalculatedTaxAmount not entered						
							and OneSourceReturnedTaxAmount entered)							

								SetLocalReturnedTaxAmount = OneSourceReturnedTaxAmount
								round SetLocalReturnedTaxAmount to nearest PayablesInvoiceDistributionRel.DerivedRoundTo
		
								invoke CreateLandedTaxDistribution PayablesInvoiceDistributionRel 							
									invoked.PrmOriginalDistribution		= PayablesInvoiceDistributionRel.PayablesInvoiceDistribution		
									invoked.PrmLocalTaxSeqNbr			= 1									
									invoked.PrmTaxAmount				= SetLocalReturnedTaxAmount 
									invoked.PrmTaxRate					= OneSourceReturnedTaxRate		
									if (PrmPayablesInvoice.TaxAmount not entered)			
										invoked.PrmTaxTypeOverride		= "A"		
									invoked.PrmTaxJurisdiction			= CalculateTax.TaxingJurisdiction
									invoked.PrmInfoMessage				= CalculateTax.OneSourceInformationMessage	
									invoked.PrmSentToTaxEngine			= not CalculateTax.NotSentToSabrix		
	
						else


							

	
							if (!PrmPayablesInvoice.DoShortPayProcess
							and !SetDoShortPayProcess
							and PrmPayablesInvoice.PayablesInvoiceTaxRel.EnteredTaxAmount entered)

								SetDoShortPayProcess = true
								invoke FastUpdate PrmPayablesInvoice
									invoked.DoShortPayProcess	= true
					
								if  (LocalInvoiceEnteredTaxAmount entered
								and  PrmPayablesInvoice.OneSourceDirectPay entered
								and  PrmPayablesInvoice.OneSourcePayAsBilled not entered)  
									invoke CreateShortPayCommentAction PrmPayablesInvoice
								else
								if ((OneSourceReturnedTaxRate > 0		
								and  LocalInvoiceEnteredTaxAmount entered)									
								or  (LocalInvoiceEnteredTaxAmount entered							
								and  SumOfCalculatedTaxAmount entered					
								and !PayablesTaxTolerance.InTolerance))					
									invoke CreateShortPayCommentAction PrmPayablesInvoice
								
								invoke OneSourceShortPayUpdate PrmPayablesInvoice
				
							if (!PayablesInvoiceDistributionRel.PayablesTaxDetailRel exists)									

								invoke Create PayablesTaxDetail
									invoked.Company				= LocalCompany
									invoked.PayablesInvoice		= LocalPayablesInvoice
									invoked.PayablesInvoiceDistribution	= LocalPayablesInvoiceDistribution
									invoked.TaxingJurisdiction	= TaxingJurisdiction
									invoked.InformationMessage	= CalculateTax.OneSourceInformationMessage
									invoked.SentToTaxEngine		= not CalculateTax.NotSentToSabrix
									invoked.ShipToLocation		= PrmPayablesInvoice.Location
							else	

								invoke Update PayablesInvoiceDistributionRel.PayablesTaxDetailRel
									invoked.TaxingJurisdiction	= TaxingJurisdiction
									invoked.InformationMessage	= CalculateTax.OneSourceInformationMessage
									invoked.SentToTaxEngine		= not CalculateTax.NotSentToSabrix
									invoked.ShipToLocation		= PrmPayablesInvoice.Location

							if (OneSourceReturnedTaxRate > 0)

								invoke CreateLandedTaxDistribution PayablesInvoiceDistributionRel
									invoked.PrmOriginalDistribution		= PayablesInvoiceDistributionRel.PayablesInvoiceDistribution
									invoked.PrmLocalTaxSeqNbr			= 1		
									invoked.PrmTaxAmount				= OneSourceReturnedTaxAmount
									invoked.PrmTaxRate					= OneSourceReturnedTaxRate
									if  (PrmPayablesInvoice.OneSourceDirectPay entered	
									and  PrmPayablesInvoice.OneSourcePayAsBilled not entered)
										invoked.PrmTaxTypeOverride	= "A"
									invoked.PrmTaxJurisdiction			= TaxingJurisdiction
									invoked.PrmInfoMessage				= CalculateTax.OneSourceInformationMessage
									invoked.PrmSentToTaxEngine			= not CalculateTax.NotSentToSabrix	
			

		PurgeLineItems is an Instance Action

			completion message is "LineItemPurged..."
			Action Rules	

				invoke Purge  




		UpdatePayablesInvoiceTax is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmUniqueIdOfRelatedObject		is a UniqueID				
				PrmPayablesCompany				is a PayablesCompany
				PrmPayablesInvoice				is a PayablesInvoice
				PrmSumOfCalculatedTaxAmount		is an InternationalAmount
				PrmSumOfLineTaxableAmount		is an InternationalAmount
				PrmLocalPTXTaxAmount			is a CurrencyAmount
				PrmAutoApprove					is Boolean
				PrmReleaseOrSubmit				is Numeric 1
					States	
						Release		value is 1
						Submit		value is 2
						RelAmended 	value is 3		
				PrmReversingDistrib				is like PayablesInvoiceDistribution		
				PrmReversingTaxRate				is a ChrgRate	
				PrmExcludeFromCall				is Boolean		

			Sort Order is ByUniqueIdOfRelatedObject

			Local Fields
				SetTaxError			is Boolean
				LocalTrigger 		is Alpha 1
				SetLocalReturnedTaxAmount		is a InternationalAmount	
				LocalResetTaxConfigBypassFlag	is Boolean		

			Rule Blocks

				CCTPopulateCalcTaxInputFields		


					initialize CalculateTax
					CalculateTax.CallingModule				= "Payables_Invoice"
					CalculateTax.System						= "AP"
					CalculateTax.InFinanceEnterpriseGroup	= PrmPayablesInvoice.Company.FinanceEnterpriseGroup
					CalculateTax.TaxEntity					= PrmPayablesInvoice.Company.AccountingEntity
					CalculateTax.InvoiceCompany				= PrmPayablesInvoice.Company
					CalculateTax.VendorGrp					= PrmPayablesInvoice.Company.VendorGroup
					CalculateTax.ProcessLevel				= PrmPayablesInvoice.ProcessLevel
					CalculateTax.Vendor						= PrmPayablesInvoice.Vendor
					CalculateTax.VendorCustomerName			= PrmPayablesInvoice.Vendor.VendorName
					CalculateTax.VoucherNumber				= PrmPayablesInvoice.VoucherNumber
					CalculateTax.Invoice					= PrmPayablesInvoice.Invoice
					CalculateTax.Suffix						= PrmPayablesInvoice.Suffix
					CalculateTax.CancelSequence				= PrmPayablesInvoice.CancelSequence
					CalculateTax.InvoiceAmount				= PrmPayablesInvoice.InvoiceAmount.CurrencyAmount
					CalculateTax.TaxAmount					= PrmPayablesInvoice.TaxAmount
					if (PrmPayablesInvoice.PayablesInvoiceTaxRel.EnteredTaxAmount entered)
						CalculateTax.ChargedTaxAmount		= PrmPayablesInvoice.PayablesInvoiceTaxRel.EnteredTaxAmount
					else
					if (PrmPayablesInvoice.TaxAmount entered)
						CalculateTax.ChargedTaxAmount		= PrmPayablesInvoice.TaxAmount
					CalculateTax.InvoiceDate				= PrmPayablesInvoice.InvoiceDate
					CalculateTax.ShipmentDate				= PrmPayablesInvoice.InvoiceDate
					CalculateTax.PaymentDate				= PrmPayablesInvoice.InvoiceDate
					CalculateTax.TaxDate					= PrmPayablesInvoice.InvoiceDate
					CalculateTax.TaxPointDate				= PrmPayablesInvoice.DerivedTaxPointDate
					CalculateTax.PointOfTitleTransfer		= PrmPayablesInvoice.DerivedPointOfTitleTransfer	
					if (PrmPayablesInvoice.CallVertexByDocument)	
						CalculateTax.InputReturnVertexTaxIn = "D"	
				   	if (PrmPayablesInvoice.IsCreditInvoice)			
						CalculateTax.InvoicedOrCreditMemo	= "C"	
					else											
						CalculateTax.InvoicedOrCreditMemo	= "I"	
				   		
				   	CalculateTax.TransactionSource			= "I"	
					CalculateTax.LineNumber					= (PrmPayablesInvoice.last PayablesInvoiceDistributionRel.PayablesInvoiceDistribution + 1)
					CalculateTax.DeliveryTerms          	= PrmPayablesInvoice.ShipTerm
					CalculateTax.VATRegistrationCountry    	= PrmPayablesInvoice.TaxEntityRel.VATRegistrationCountry 
					CalculateTax.VATRegistrationNumber		= PrmPayablesInvoice.TaxEntityRel.VATRegistrationNumber
					if (PrmPayablesInvoice.ProcessLevel.TaxCode entered)	
						if (PrmPayablesInvoice.RemitToCode.TaxCode entered)
							CalculateTax.FromTaxCode		= PrmPayablesInvoice.RemitToCode.TaxCode
						else
							CalculateTax.FromTaxCode		= PrmPayablesInvoice.Vendor.TaxCode	
					

					if (PrmPayablesInvoice.RemitToCode.CurrentAddressRel exists
					and PrmPayablesInvoice.RemitToCode.VATRegistrationNumber entered)
						CalculateTax.FromPostalAddress				= PrmPayablesInvoice.RemitToCode.CurrentAddressRel.PostalAddress
				    	CalculateTax.FromVATRegistrationCountry 	= PrmPayablesInvoice.RemitToCode.VATRegistrationCountry
				    	CalculateTax.FromVATRegistrationNumber		= PrmPayablesInvoice.RemitToCode.VATRegistrationNumber
					else
						CalculateTax.FromPostalAddress				= PrmPayablesInvoice.Vendor.CurrentAddressRel.PostalAddress
				    	CalculateTax.FromVATRegistrationCountry 	= PrmPayablesInvoice.Vendor.VATRegistrationCountry
				    	CalculateTax.FromVATRegistrationNumber		= PrmPayablesInvoice.Vendor.VATRegistrationNumber
				    
				    CalculateTax.DefaultFilingCurrency 				= PrmPayablesInvoice.Company.Currency 
					CalculateTax.CurrencyRate						= PrmPayablesInvoice.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate 		
				    CalculateTax.TransactionCurrency 				= PrmPayablesInvoice.InvoiceCurrency	
				    
				    if (PrmPayablesInvoice.PayCurrency entered)
						CalculateTax.BaseCurrency 					= PrmPayablesInvoice.PayCurrency		
					else	
						CalculateTax.BaseCurrency 					= PrmPayablesInvoice.PayGroup.BaseCurrency
					if (CalculateTax.BaseCurrency not entered)	
						CalculateTax.BaseCurrency					= PrmPayablesInvoice.ProcessLevel.PayGroup.BaseCurrency	
					
					CalculateTax.ReceiptSite						= PrmPayablesInvoice.ProcessLevel	
					CalculateTax.UniqueIdOfRelatedObject			= PrmPayablesInvoice.UniqueID
					CalculateTax.SabrixUserElement					= PrmPayablesInvoice.UserElementGroup
					CalculateTax.UserElementLevel					= "L"
					CalculateTax.CreateOutputUserFieldFile			= true		
					CalculateTax.CommodityCode						= CommodityCode
					if (PrmPayablesInvoice.TaxCode not entered					
					and PrmPayablesInvoice.TaxEntityUsesVertex)					
						CalculateTax.TaxCode						= "00"		
					else
						CalculateTax.TaxCode						= PrmPayablesInvoice.TaxCode
					CalculateTax.TaxableAmount						= PrmPayablesInvoice.TaxableAmount
					CalculateTax.UniqueLineNumber					= RelatedLineItemUniqueId

					CalculateTax.BypassEditing						= true		
					

					if (ShipToAddress entered)									
						CalculateTax.PostalAddress			= ShipToAddress	
					else
					if (PrmPayablesInvoice.Location.PostalAddress entered)
						CalculateTax.PostalAddress 			= PrmPayablesInvoice.Location.PostalAddress
					else
						if (PrmPayablesInvoice.ProcessLevel.PostalAddress entered)
							CalculateTax.PostalAddress		= PrmPayablesInvoice.ProcessLevel.PostalAddress
						else
							CalculateTax.PostalAddress		= PrmPayablesInvoice.Company.AccountingEntity.AddressCode.PostalAddress
				

					if (PrmPayablesInvoice.BillToProcessLevel.PostalAddress entered)
						CalculateTax.BuyerAdminDestAddress	= PrmPayablesInvoice.BillToProcessLevel.PostalAddress		
					else
						if (PrmPayablesInvoice.ProcessLevel.PostalAddress entered)
							CalculateTax.BuyerAdminDestAddress	= PrmPayablesInvoice.ProcessLevel.PostalAddress
						else
							CalculateTax.BuyerAdminDestAddress	= PrmPayablesInvoice.Company.AccountingEntity.AddressCode.PostalAddress
					

					if (PrmPayablesInvoice.PurchaseFromLocation entered)
						CalculateTax.FromPostalAddress		= PrmPayablesInvoice.PurchaseFromLocation.VendorAddress
					else	
						CalculateTax.FromPostalAddress		= PrmPayablesInvoice.Vendor.VendorAddress
					

					if (PrmPayablesInvoice.BillFromLocation entered)
						CalculateTax.POAAddress				= PrmPayablesInvoice.BillFromLocation.VendorAddress
					else
						CalculateTax.POAAddress				= PrmPayablesInvoice.Vendor.VendorAddress	
				

					CalculateTax.SendMultLineItems			= true
					CalculateTax.UpdateLineItems			= true
					CalculateTax.UniqueIdOfRelatedObject	= RelatedObjectReference
				


			
			Instance Selection
				where (FinanceEnterpriseGroup				= PrmFinanceEnterpriseGroup
				and    TaxLineItem.UniqueIdOfRelatedObject	= PrmUniqueIdOfRelatedObject)
			
				
			Action Rules
				Empty Set Rules


					invoke ClearBackgroundProcessing PrmPayablesInvoice
					invoke UpdateErrorRecordsAction PrmPayablesInvoice					
				
				Set Rules
					Entrance Rules			



						initialize CalculateTax		
						include CCTPopulateCalcTaxInputFields
						if (PrmPayablesInvoice.InvoiceAmount.CurrencyAmount	not entered
						and PrmPayablesInvoice.TaxableAmount 				not entered
						and CalculateTax.InvoiceAmount						not entered
						and CalculateTax.TaxableAmount 		 				not entered)
							if (CalculateTax.TaxCode 			 										entered
							or  PrmPayablesInvoice.first TaxablePayablesInvoiceDistributionRel.TaxCode 	entered)
								CalculateTax.TaxableAmount	= PrmPayablesInvoice.first TaxablePayablesInvoiceDistributionRel.TaxableAmount		
						include DisplayCalculateTaxInput
						CalculateTax.AppendToJurisFile	= true		
						CalculateTax.JurisdictionResultsKey	= "AP:" + PrmPayablesInvoice.Invoice + ":" + CurrentTimestamp	



						initialize CalculateTax.TaxAmount
						CalculateTax.ChargedTaxAmount	= PrmPayablesInvoice.TaxAmount
						CalculateTax.Function	= "C"

						if (!PrmExcludeFromCall)	
							LocalTrigger	= CalculateTax.ExecuteCalculateTax
						else
							CalculateTax.OutputTotalTaxAmount 	= CalculateTax.ChargedTaxAmount	
							CalculateTax.OutputTaxRate 			= CalculateTax.ChargedTaxAmount / CalculateTax.TaxableAmount	
							if (CalculateTax.OutputTaxRate < 0)
								CalculateTax.OutputTaxRate *= -1

						include DisplayCalculateTaxOutput









						if (CalculateTax.OutputErrorNumber = 700	

						or  CalculateTax.OutputErrorNumber = 702	
						or  CalculateTax.OutputErrorNumber = 703	
						or  CalculateTax.OutputErrorNumber = 704	
						or  CalculateTax.OutputErrorNumber = 705	
						or  CalculateTax.OutputErrorNumber = 706	
						or  CalculateTax.OutputErrorNumber = 707	
						or  CalculateTax.OutputErrorNumber = 708	
						or  CalculateTax.OutputErrorNumber = 709	
						or  CalculateTax.OutputErrorNumber = 710	
						or  CalculateTax.OutputErrorNumber = 711)	
							SetTaxError	= true
							invoke Create PrmPayablesInvoice.PayablesInvoiceError set			
								invoked.ErrorLevel		= 1		
								invoked.ErrorClass		= 1		
								invoked.ErrorType		= 57	//"SabrixTaxServerError"
							invoke ClearBackgroundProcessing PrmPayablesInvoice		
						else
							if  (CalculateTax.OutputErrorNumber = 701	
							and !PrmPayablesInvoice.ExcludeFromTaxEstimate												
							and !all PrmPayablesInvoice.PayablesInvoiceDistributionRel.ICNCode.ExcludeFromTaxEstimate)	
								SetTaxError	= true
								invoke Create PrmPayablesInvoice.PayablesInvoiceError set			
									invoked.ErrorLevel		= 1		
									invoked.ErrorClass		= 1		
									invoked.ErrorType		= 57	//"SabrixTaxServerError"
								invoke ClearBackgroundProcessing PrmPayablesInvoice		
							else	
								if (PrmPayablesInvoice.TaxEntityUsesVertex)
									if (CalculateTax.OutputTotalTaxable != CalculateTax.TaxableAmount)
										CalculateTax.OutputTotalTaxable 	= CalculateTax.TaxableAmount
										CalculateTax.OutputTotalTaxAmount 	= CalculateTax.TaxableAmount * CalculateTax.OutputTaxRate

								invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel
									invoked.TaxDetails.ReturnedTaxRate		= CalculateTax.OutputTaxRate
									invoked.TaxDetails.ReturnedTaxAmount	= CalculateTax.OutputTotalTaxAmount

						
					Exit Rules








						if (!SetTaxError)
							

							if (PrmPayablesInvoice.Status.Amended		
							and PrmSumOfCalculatedTaxAmount = 0)
								PrmSumOfCalculatedTaxAmount = PrmPayablesInvoice.TaxAmount





							if (PrmSumOfLineTaxableAmount entered)										
								invoke Update PrmPayablesInvoice.PayablesInvoiceTaxRel					
									invoked.TaxDetails.TaxableAmount	= PrmSumOfLineTaxableAmount		


							invoke CreateTaxDistributions PayablesInvoiceDistribution
								on error
									invoke ResetAfterError PrmPayablesInvoice
								invoked.PrmPayablesCompany			= PrmPayablesInvoice.Company
								invoked.PrmPayablesInvoice			= PrmPayablesInvoice
								invoked.PrmSumOfCalculatedTaxAmount	= PrmSumOfCalculatedTaxAmount
								invoked.PrmSumOfLineTaxableAmount	= PrmSumOfLineTaxableAmount
								invoked.PrmLocalPTXTaxAmount		= PrmLocalPTXTaxAmount
								invoked.PrmAutoApprove				= PrmAutoApprove
								invoked.PrmReleaseOrSubmit			= PrmReleaseOrSubmit
								invoked.PrmReversingDistrib			= PrmReversingDistrib		
								invoked.PrmExcludeFromCall			= PrmExcludeFromCall		
														
				Instance Rules


					


					if (!SetTaxError)

						LocalCompany						= PrmPayablesCompany
						LocalVendor							= PrmPayablesInvoice.Vendor
						LocalPayablesInvoice				= PrmPayablesInvoice
						LocalPayablesInvoiceDistribution	= LineItemNumber 	
						










						if  (!PrmExcludeFromCall		
						and ((PrmPayablesInvoice.DerivedTaxMethodInvOrAcc.Accrued
						and   CalculateTax.ExcludeFromTaxEstimate)
						or   (!PrmPayablesInvoice.ExcludeFromTaxEstimate
						and  this instance.PayablesInvoiceDistributionRel.ICNCode.ExcludeFromTaxEstimate)))	
							LocalContinue	= true

						else








							if (PrmExcludeFromCall)				
								invoke Update TaxDetailOutRel	
									invoked.TaxRate 		= CalculateTax.OutputTaxRate
									invoked.TaxableAmount 	= TaxableAmount
									invoked.TaxAmount 		= TaxableAmount * CalculateTax.OutputTaxRate
									invoked.TaxCode			= CalculateTax.TaxCode

							invoke UpdatePayablesInvoiceTax PayablesInvoiceDistributionRel 	
								invoked.PrmTaxCode				= TaxDetailOutRel.TaxCode
								invoked.PrmTaxTableOutput		= TaxDetailOutRel.TaxDetailOut
								invoked.PrmTaxableAmount		= TaxableAmount
								if  (!PrmExcludeFromCall		
								and (CalculateTax.ExcludeFromTaxEstimate
								or  (PrmPayablesInvoice.DerivedTaxMethodInvOrAcc.Invoiced 	
								and (PrmPayablesInvoice.ExcludeFromTaxEstimate				
								or   any PrmPayablesInvoice.PayablesInvoiceDistributionRel.ICNCode.ExcludeFromTaxEstimate))))	

									if (any PrmPayablesInvoice.PayablesInvoiceDistributionRel.ICNCode.ExcludeFromTaxEstimate	
									and !this instance.PayablesInvoiceDistributionRel.ICNCode.ExcludeFromTaxEstimate)			
										SetLocalReturnedTaxAmount				= TaxDetailOutRel.TaxAmount						
										invoked.PrmTaxDetails.ReturnedTaxRate	= TaxDetailOutRel.TaxRate						
										invoked.PrmTaxDetails.ReturnedTaxAmount	= SetLocalReturnedTaxAmount		

									else
										SetLocalReturnedTaxAmount				= ((TaxableAmount/PrmPayablesInvoice.TaxableAmount) * PrmPayablesInvoice.TaxAmount)
										invoked.PrmTaxDetails.ReturnedTaxRate	= (((TaxableAmount/PrmPayablesInvoice.TaxableAmount) * PrmPayablesInvoice.TaxAmount) / PrmPayablesInvoice.TaxableAmount)

								else





									if (PrmExcludeFromCall)		
										invoked.PrmTaxDetails.ReturnedTaxRate	= CalculateTax.OutputTaxRate	
										invoked.PrmTaxDetails.ReturnedTaxAmount	= ((TaxableAmount/PrmPayablesInvoice.TaxableAmount) * PrmPayablesInvoice.TaxAmount)	
									else
									if (PrmPayablesInvoice.CallVertexByDocument)										
										SetLocalReturnedTaxAmount				= CalculateTax.OutputTotalTaxAmount		
										invoked.PrmTaxDetails.ReturnedTaxRate	= PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxRate		
										invoked.PrmTaxDetails.ReturnedTaxAmount	= PrmPayablesInvoice.PayablesInvoiceTaxRel.TaxDetails.ReturnedTaxAmount	

									else

										if (PrmReversingTaxRate entered)													
											SetLocalReturnedTaxAmount				= TaxableAmount * PrmReversingTaxRate	
											invoked.PrmTaxDetails.ReturnedTaxRate	= PrmReversingTaxRate					

										else	
											SetLocalReturnedTaxAmount				= TaxDetailOutRel.TaxAmount
											invoked.PrmTaxDetails.ReturnedTaxRate	= TaxDetailOutRel.TaxRate

										invoked.PrmTaxDetails.ReturnedTaxAmount		= SetLocalReturnedTaxAmount
								invoked.PrmTaxDetails.DistributionAccount	= TaxDetailOutRel.TaxInputAccount
								invoked.PrmTaxDetails.TaxingJurisdiction	= TaxingJurisdiction

								if (CommodityCodeType not entered)	
									invoked.PrmICNCode						= CommodityCode					
								if (ReturnedErpTaxCode entered)																	
									invoked.PrmTaxDetails.TaxTableOutput.AccrualCode	= ReturnedErpTaxCode					
								else																							
								if (CalculateTax.SabrixReturnedTaxCode entered)													
									invoked.PrmTaxDetails.TaxTableOutput.AccrualCode	= CalculateTax.SabrixReturnedTaxCode	




						round SetLocalReturnedTaxAmount to nearest PrmPayablesInvoice.DerivedRoundTo							
						PrmSumOfCalculatedTaxAmount	+= SetLocalReturnedTaxAmount

						


						if (SetLocalReturnedTaxAmount entered
						and !this instance.PayablesInvoiceDistributionRel.ICNCode.ExcludeFromTaxEstimate)	

							PrmSumOfLineTaxableAmount	+= TaxableAmount


						initialize SetLocalReturnedTaxAmount	


						


						

		UpdatePOTaxAmounts is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
				PrmCompany					is like Company
				PrmInvoiceNumber			is like Invoice
				PrmUniqueIdOfRelatedObject  is like UniqueID 

			Local Fields
				LocalLineItemNumber		is like DistributionSequence
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	   TaxEntity				= PrmCompany
				and	   InvoiceNumber			= PrmInvoiceNumber
				and    TaxLineItem.UniqueIdOfRelatedObject = PrmUniqueIdOfRelatedObject)
			
			Action Rules
				Instance Rules
					LocalCompany = PrmCompany
					LocalLineItemNumber += 1
					if (LocalLineItemNumber <= PurchaseOrderRel.DerivedNumberOfTaxablePOLines)

						for each TaxDetailOutRel
							if (each.TaxCode entered)
								invoke Create PurchaseOrderLineTax
									invoked.Company			  = LocalCompany
									invoked.PurchaseOrder	  = PurchaseOrderRel.PurchaseOrder
									invoked.PurchaseOrderLine = PurchaseOrderLineRel.PurchaseOrderLine
									invoked.TaxCode 		  = each.TaxCode
									invoked.TaxRate			  = each.TaxRate
									invoked.TaxAmount		  = each.TaxAmount
									
							if (each.AccrualFlag = "A")
								LocalTrueAccruedTaxAmount    += each.TaxAmount
							else
								LocalTrueInvoicedTaxAmount   += each.TaxAmount
						
							if (each.LandCostFlag)
								LocalLandedUnitCost += (each.TaxAmount / PurchaseOrderLineRel.VendorPriceUOMQuantityToProcess)

						invoke UpdateFromTaxLineItem PurchaseOrderLineRel
							invoked.PrmAccruedTaxAmount		= LocalTrueAccruedTaxAmount
							invoked.PrmInvoicedTaxAmount 	= LocalTrueInvoicedTaxAmount
						
							if (LocalLandedUnitCost entered)
								invoked.PrmLandedUnitCost	= LocalLandedUnitCost

							if (TaxEntityRel.ThirdParty.VertexOSeries
							and this instance.PurchaseOrderLineRel.TaxCode = "00")
								invoked.PrmTaxCode 			= ShipToTaxCode 
					else
						for each TaxDetailOutRel
							if (each.AccrualFlag = "A")
								LocalTrueAccruedTaxAmount += each.TaxAmount
							else
								LocalTrueInvoicedTaxAmount += each.TaxAmount

							if (each.LandCostFlag)        				
								LocalLandedUnitCost += (each.TaxAmount / PurchaseOrderAndLineAddOnChargeRel.PurchaseOrderLine.VendorPriceUOMQuantityToProcess)
						
						invoke UpdateFromTaxLineItem PurchaseOrderAndLineAddOnChargeRel
							invoked.PrmAccruedTaxAmount		= LocalTrueAccruedTaxAmount
							invoked.PrmInvoicedTaxAmount 	= LocalTrueInvoicedTaxAmount
						
							if (LocalLandedUnitCost entered)
								invoked.PrmLandedUnitCost	= LocalLandedUnitCost

							if (TaxEntityRel.ThirdParty.VertexOSeries
							and this instance.PurchaseOrderAndLineAddOnChargeRel.TaxCode = "00")
								invoked.PrmTaxCode 			= ShipToTaxCode 

		UpdateRQTaxAmounts is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
				PrmCompany					is like Company
				PrmInvoiceNumber			is like Invoice
				PrmUniqueIdOfRelatedObject  is like UniqueID 

			Local Fields
				LocalLineItemNumber		is like DistributionSequence
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	   TaxEntity				= PrmCompany
				and	   InvoiceNumber			= PrmInvoiceNumber
				and    TaxLineItem.UniqueIdOfRelatedObject = PrmUniqueIdOfRelatedObject)
			
			Action Rules
				Instance Rules
					LocalCompany = PrmCompany
					LocalLineItemNumber += 1
					if (LocalLineItemNumber <= RequisitionRel.DerivedNumberOfTaxableRQLines)

						for each TaxDetailOutRel
							if (each.AccrualFlag = "A")
								LocalTrueAccruedTaxAmount    += each.TaxAmount
							else
								LocalTrueInvoicedTaxAmount   += each.TaxAmount
						
							if (each.LandCostFlag)
								LocalLandedUnitCost += (each.TaxAmount / RequisitionLineRel.Quantity)

						invoke UpdateFromTaxLineItem RequisitionLineRel
							invoked.PrmAccruedTaxAmount		= LocalTrueAccruedTaxAmount
							invoked.PrmInvoicedTaxAmount 	= LocalTrueInvoicedTaxAmount
						
							if (LocalLandedUnitCost entered)
								invoked.PrmLandedUnitCost	= LocalLandedUnitCost

							if (TaxEntityRel.ThirdParty.VertexOSeries
							and this instance.RequisitionLineRel.PurchaseTaxCode = "00")
								invoked.PrmTaxCode 	= ShipToTaxCode 

					else
						for each TaxDetailOutRel
							if (each.AccrualFlag = "A")
								LocalTrueAccruedTaxAmount += each.TaxAmount
							else
								LocalTrueInvoicedTaxAmount += each.TaxAmount

							if (each.LandCostFlag)        				
								LocalLandedUnitCost += (each.TaxAmount / RequisitionLineAddOnChargeRel.RequisitionLine.Quantity)
						
						invoke UpdateFromTaxLineItem RequisitionLineAddOnChargeRel
							invoked.PrmAccruedTaxAmount		= LocalTrueAccruedTaxAmount
							invoked.PrmInvoicedTaxAmount 	= LocalTrueInvoicedTaxAmount
						
							if (LocalLandedUnitCost entered)
								invoked.PrmLandedUnitCost	= LocalLandedUnitCost

							if (TaxEntityRel.ThirdParty.VertexOSeries
							and this instance.RequisitionLineAddOnChargeRel.TaxCode = "00")
								invoked.PrmTaxCode 			= ShipToTaxCode 

		UpdateBLTaxAmounts is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
				PrmCompany					is like Company
				PrmInvoiceNumber			is like Invoice
				PrmInvoicePrefix			is like InvoicePrefix
				PrmReleasePrinted			is Boolean
				PrmUniqueIdOfRelatedObject  is like UniqueID 
			Local Fields
				LocalLineItemNumber		is like DistributionSequence
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	   TaxEntity				= PrmCompany
				and	   InvoiceNumber			= PrmInvoiceNumber
				and    TaxLineItem.UniqueIdOfRelatedObject = PrmUniqueIdOfRelatedObject)
			
			Action Rules
				Set Rules
					Exit Rules
						if (PrmReleasePrinted)
							LocalCompany 		= PrmCompany
							LocalInvoicePrefix 	= PrmInvoicePrefix
							LocalInvoiceNumber	= PrmInvoiceNumber
							invoke NotifyThirdPartyTaxSystemFromBatchPerInvoice LocalInvoiceNumberBillingInvoiceRel in background
				
				Instance Rules
					LocalCompany = PrmCompany
					LocalInvoicePrefix = PrmInvoicePrefix
					LocalLineItemNumber += 1
					initialize LocalTaxAmount
					if (LocalLineItemNumber = 1
					and TaxableBillingInvoiceHeaderRel exists)
						for each TaxDetailOutRel
							LocalTaxAmount += each.TaxAmount
							if (each.TaxAmount entered)
								invoke Create BillingInvoiceLineTax
									invoked.Company										= LocalCompany
									invoked.BillingInvoice								= BillingInvoiceRel.BillingInvoice
									invoked.ProductTaxCategory							= ProductTaxCategory
									if (each.TaxPoint = "P")
										invoked.TaxAccount								= each.TaxOutputDueAccount
									else
										invoked.TaxAccount								 = each.TaxOutputAccount
									invoked.BillingInvoiceLineTax.TaxCode				 = each.TaxCode
									invoked.TaxRate										 = each.TaxRate
									invoked.TaxableCurrencyAmount.TransactionAmount		 = each.TaxAmount
									invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency	 = BillingInvoiceRel.Company.Currency
									invoked.TransactionTaxable.TransactionAmount		 = TaxableAmount
									invoked.TransactionTaxable.BaseAmount.ToCurrency	 = BillingInvoiceRel.Company.Currency
									invoked.TaxID										 = each.TaxID
									invoked.BillingInvoiceLineTax.TaxLevel				 = each.TaxLevel
									if (TaxEntityRel.OneSourceUseARCodeForTaxAccount
									and ReturnedErpTaxCode entered)
										LocalReceivableGeneralLedgerCode 				 = ReturnedErpTaxCode
										constraint (LocalReceivableGeneralLedgerCodeRel exists)
											"Receivable_\Global_\Ledger_\Code<LocalReceivableGeneralLedgerCode>DoesNotExistFor_\Company<LocalCompany>"
										invoked.TaxAccount								 = LocalReceivableGeneralLedgerCodeRel.DistributionAccount					
					else
					if (BillingInvoiceLineRel exists)
						for each TaxDetailOutRel
							LocalTaxAmount += each.TaxAmount
							invoke UpdateFromTaxLineItem BillingInvoiceLineRel
								invoked.PrmTaxAmount = each.TaxAmount
							if (each.TaxAmount entered)
								invoke Create BillingInvoiceLineTax
									invoked.Company													= LocalCompany
									invoked.BillingInvoice											= BillingInvoiceRel.BillingInvoice
									invoked.ProductTaxCategory										= ProductTaxCategory
									invoked.BillingInvoiceLineTax.BillingInvoiceLine 				= BillingInvoiceLineRel.BillingInvoiceLine
									invoked.LocalCurrencyTable										= BillingInvoiceRel.CurrencyTable
									invoked.LocalFromCurrency										= BillingInvoiceRel.Currency
									invoked.LocalExchangeDate										= BillingInvoiceRel.InvoiceDate
									if (each.TaxPoint = "P")
										invoked.TaxAccount											= each.TaxOutputDueAccount
									else
										invoked.TaxAccount											= each.TaxOutputAccount	
									invoked.BillingInvoiceLineTax.TaxCode 							= each.TaxCode
									invoked.TaxRate													= each.TaxRate
									invoked.TaxableCurrencyAmount.TransactionAmount					= each.TaxAmount
									invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 			= BillingInvoiceRel.Company.Currency
									invoked.TransactionTaxable.TransactionAmount					= TaxableAmount
									invoked.TransactionTaxable.BaseAmount.ToCurrency 				= BillingInvoiceRel.Company.Currency
									invoked.TaxID													= each.TaxID
									invoked.BillingInvoiceLineTax.TaxLevel							= each.TaxLevel
									if (TaxEntityRel.OneSourceUseARCodeForTaxAccount
									and ReturnedErpTaxCode entered)
										LocalReceivableGeneralLedgerCode 							= ReturnedErpTaxCode
										constraint (LocalReceivableGeneralLedgerCodeRel exists)
											"Receivable_\Global_\Ledger_\Code<LocalReceivableGeneralLedgerCode>DoesNotExistFor_\Company<LocalCompany>"
										invoked.TaxAccount											= LocalReceivableGeneralLedgerCodeRel.DistributionAccount
					else
					if (BillingInvoiceAddOnChargeRel exists)
						for each TaxDetailOutRel
							LocalTaxAmount += each.TaxAmount
							invoke UpdateFromTaxLineItem BillingInvoiceAddOnChargeRel
								invoked.PrmTaxAmount = each.TaxAmount
							if (each.TaxAmount entered)
								invoke Create BillingInvoiceLineTax
									fill in fields from first BillingInvoiceAddOnChargeRel
									invoked.ProductTaxCategory										= ProductTaxCategory
									if (each.TaxPoint = "P")
										invoked.TaxAccount											= each.TaxOutputDueAccount
									else
										invoked.TaxAccount											= each.TaxOutputAccount	
									invoked.BillingInvoiceLineTax.TaxCode 							= each.TaxCode
									invoked.TaxRate													= each.TaxRate
									invoked.TaxableCurrencyAmount.TransactionAmount					= each.TaxAmount
									if (BillingInvoiceRel.Company.CurrencyBasedPricing)
										invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 		= BillingInvoiceRel.Currency 
										invoked.TransactionTaxable.BaseAmount.ToCurrency 			= BillingInvoiceRel.Currency
									else
										invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 		= BillingInvoiceRel.Company.Currency 
										invoked.TransactionTaxable.BaseAmount.ToCurrency 			= BillingInvoiceRel.Company.Currency
									invoked.TransactionTaxable.TransactionAmount					= TaxableAmount
									invoked.TaxID													= each.TaxID
									invoked.BillingInvoiceLineTax.TaxLevel							= each.TaxLevel	
									if (TaxEntityRel.OneSourceUseARCodeForTaxAccount
									and ReturnedErpTaxCode entered)
										LocalReceivableGeneralLedgerCode 							= ReturnedErpTaxCode
										constraint (LocalReceivableGeneralLedgerCodeRel exists)
											"Receivable_\Global_\Ledger_\Code<LocalReceivableGeneralLedgerCode>DoesNotExistFor_\Company<LocalCompany>"
										invoked.TaxAccount											= LocalReceivableGeneralLedgerCodeRel.DistributionAccount

					if (LocalTaxAmount entered)
						invoke UpdateTotalFromTaxLineItem BillingInvoiceRel
							invoked.PrmTaxTotalAmount = LocalTaxAmount
					else
					if (!BillingInvoiceRel.TaxEntityUsesSabrix)
						invoke Delete LineItemUserFieldsRel
						invoke Delete


        CalculateTax is an Instance Action	
        	restricted  
        	Parameters
				Function					is AlphaUpper 1				 
					States	 
				        CalculateTax		   	value is "C"			 		 
						VerifyTax	            value is "V"	
			Local Fields
				LocalTrigger is Alpha 1
			Parameter Rules
				Function
					initial value is "C"
					default to "C"
					required
			Action Rules	

				ReturnedErrorNumber = blank
				ReturnedErrorMessage = blank
				
				CalculateTax.CallingModule					= "TaxLineItem"	
				CalculateTax.TaxEntity						= TaxEntity	
				CalculateTax.JurisdictionResultsKey			= "TaxLineItem"					
				CalculateTax.UniqueIdOfRelatedObject		= UniqueID
				CalculateTax.RelatedObjectReference			= reference to this instance 	
				CalculateTax.VertexFlexibleFields 			= LineItemUserFieldsRel.FlexibleFields
				CalculateTax.SabrixUserElement				= LineItemUserFieldsRel.UserElementGroup
				CalculateTax.Vendor							= VendorCode 
				CalculateTax.Invoice						= InvoiceNumber
				CalculateTax.TaxDate						= TaxDate	 
				CalculateTax.InvoiceDate					= InvoiceDate	 
				CalculateTax.TaxCode						= ShipToTaxCode

				CalculateTax.TaxAmount						= ChargedTax		
				CalculateTax.ChargedTaxAmount 				= ChargedTax			
				CalculateTax.TaxableAmount					= TaxableAmount

				CalculateTax.LineNumber						= TaxLineItem.Sequence
				CalculateTax.FromPostalAddress				= ShipFromAddress	 
				CalculateTax.PostalAddress					= ShipToAddress		 
				CalculateTax.Function            			= Function	//"C"	
				CalculateTax.ProcessingTaxLineItem			= true
				CalculateTax.SendMultLineItems				= false
				CalculateTax.UpdateLineItems				= false	
				LocalTrigger								= CalculateTax.ExecuteCalculateTax
				if (CalculateTax.ReturnedOutsideThreshold
				or  CalculateTax.ReturnedTaxVariance entered
				or  CalculateTax.ReturnedErrorNumber = 205
				or  CalculateTax.OutputlTaxToleranceDiff entered)
					AdditionalTaxesDue						= CalculateTax.ReturnedAdditionalTaxesDue
					OutsideThreshold						= CalculateTax.ReturnedOutsideThreshold
					VarianceAmount							= CalculateTax.ReturnedTaxVariance
				else
					OutsideThreshold = false
					initialize VarianceAmount				
					constraint (CalculateTax.OutputErrorNumber not entered)   
						"<CalculateTax.OutputErrorMessage>;<CalculateTax.OutputTaxCodeInError>"	
										
				ReturnedErrorNumber							= CalculateTax.OutputErrorNumber                 
				ReturnedErrorMessage						= CalculateTax.OutputErrorMessage
				CalculatedTaxAmt							= CalculateTax.OutputTotalTaxAmount
				TaxRate 									= CalculateTax.OutputTaxRate
				CapturedXml									= CalculateTax.CapturedXml
				ThirdParty									= CalculateTax.OutputThirdPartyProcessed
				MoreResults									= CalculateTax.RichTextDisplayCalcTax
				
				if (InvoiceAmount not entered)
					InvoiceAmount							= CalculateTax.ReturnedInvoiceTotal
				if (ShipToTaxCode not entered
				and ShipToAddress.Country entered)
					ShipToTaxCode = CalculateTax.OutputGeoCode	



				LocalTaxTable								= CalculateTax.TaxTable							 
				include CreateTaxDetailOutFile	
									
        ClearResults is an Instance Action

        	Action Rules

				OutsideThreshold = false	
				WebServiceError = false 
				LineitemError = false 
				MoreResults = blank	
				initialize ReturnedErpTaxCode		 
				initialize ReturnedExemptTaxable	 
				initialize ReturnedTaxableBasis						 
				initialize ReturnedErrorNumber  
				initialize ReturnedErrorMessage   	       	
        		initialize TaxResult 	
				initialize ReturnedErrorNumber		 
				initialize ReturnedErrorMessage    
				initialize TaxingJurisdiction      
    			initialize CalculatedTaxAmt				   							      							 
    			initialize TaxRate	
				initialize VarianceAmount					 	 
				initialize AdditionalTaxesDue						    			
				initialize WebServiceErrorMessage
				initialize CapturedXml	 	 
				initialize VertexStatus					 
				initialize VertexTaxCode					 
				initialize UserDefinedTaxCode				 
				initialize Situs 							 
				initialize TaxCollectedFromParty 			 
				initialize TaxType 						 
				initialize Jurisdiction 					 
				initialize JurisdictionId 					 
				initialize JurisdictionLevel 				 
				initialize Imposition 						 
				initialize ImpositionType 					 
				initialize TaxRuleId 						 		 
				invoke Delete JurisdictionResultsRel
				invoke Delete JurisdictionResultsRel2
				invoke Delete TaxDetailOutRel
				invoke Delete VertexOutputFlexibleFieldsRel
										
		GetTaxAreaId is an Instance Action	

			run in foreground	

			restricted


			Parameters
				GetTaxAreaIdFor	is AlphaUpper 2				 
					States	 
				        ShipTo	  	value is blank		 		 
						ShipFrom    value is "SF"
						BillTo	  	value is "B2"		 		 
						BillFrom    value is "BF"							
			Parameter Rules

			Local Fields
				LocalTaxCode			is a TaxCode 
				MultipleTaxCodes		is Boolean

          
			Action Rules								

	  			MultipleTaxCodes = false    				 
	    		WebServiceError  = false   	
	    		initialize WebServiceErrorMessage 				 
	        	initialize LocalTaxCode 						 	
				initialize CalculateTax
				CalculateTax.UniqueIdOfRelatedObject			= UniqueID
				CalculateTax.RelatedObjectReference         	= reference to this instance
				CalculateTax.System								= "TX"
				CalculateTax.CallingModule						= "TaxLineItem"			
				CalculateTax.VertexQuantumOption				= "G"
				CalculateTax.TaxEntity							= TaxEntity	
				CalculateTax.InFinanceEnterpriseGroup       	= FinanceEnterpriseGroup	 

				if (GetTaxAreaIdFor.ShipFrom)
					CalculateTax.PostalAddress					= ShipFromAddress
				else
				if (GetTaxAreaIdFor.BillFrom)
					CalculateTax.PostalAddress					= BillFromAddress
				else
				if (GetTaxAreaIdFor.BillTo)
					CalculateTax.PostalAddress					= BillToAddress
				else
					CalculateTax.PostalAddress					= ShipToAddress	
																			
				LocalTaxCode									= CalculateTax.ReturnedGeoCode
				MultipleTaxCodes								= CalculateTax.MultipleTaxAreaIds
				WebServiceError									= CalculateTax.WebServiceError 
				WebServiceErrorMessage							= CalculateTax.WebServiceErrorMessage

				if (LocalTaxCode entered)
					if (GetTaxAreaIdFor.ShipFrom)
						ShipFromTaxCode 						= LocalTaxCode
					else
					if (GetTaxAreaIdFor.BillFrom)
						BillFromTaxCode 						= LocalTaxCode
					else
					if (GetTaxAreaIdFor.BillTo)
						BillToTaxCode 							= LocalTaxCode
					else
						ShipToTaxCode 							= LocalTaxCode					
	
				if (LocalTaxCode entered
				and !MultipleTaxCodes				
				and CalculateTax.OutputErrorNumber not entered)	
					if (GetTaxAreaIdFor.ShipTo)				
						if (ShipToAddress.PostalCode not entered)
							ShipToAddress.PostalCode 	= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].PostalCode
						if (ShipToAddress.County not entered)	
							ShipToAddress.County 		= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].County
					if (GetTaxAreaIdFor.ShipFrom)				
						if (ShipFromAddress.PostalCode not entered)
							ShipFromAddress.PostalCode 	= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].PostalCode
						if (ShipFromAddress.County not entered)	
							ShipFromAddress.County 		= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].County
					if (GetTaxAreaIdFor.BillTo)				
						if (BillToAddress.PostalCode not entered)
							BillToAddress.PostalCode 	= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].PostalCode
						if (BillToAddress.County not entered)	
							BillToAddress.County 		= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].County
					if (GetTaxAreaIdFor.BillFrom)				
						if (BillFromAddress.PostalCode not entered)
							BillFromAddress.PostalCode 	= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].PostalCode
						if (BillFromAddress.County not entered)	
							BillFromAddress.County 		= CalculateTax.OutputMultipleGeoCodes.GeoCodeTable[1].County														

		ClearResultsSetAction is a Set Action	
			restricted
			completion message is "<RecordCount>Updated"
			run in foreground		 
			Parameters 
				PrmFinEntGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"			
				PrmTaxEntity is a TaxEntity
					default label is "TaxEntity"
				PrmInvoiceNumber is like Invoice
					default label is "Invoice"
			Parameter Rules
				PrmFinEntGroup
					initial value is actor.context.FinanceEnterpriseGroup	
					required	
				PrmTaxEntity
					required	
			Local Fields
				RecordCount			is Numeric 10
			Instance Selection			
				where (TaxLineItem.FinanceEnterpriseGroup = PrmFinEntGroup
				and   (TaxEntity = PrmTaxEntity
				and   (PrmInvoiceNumber not entered
				or	  (PrmInvoiceNumber entered
				and	   PrmInvoiceNumber = InvoiceNumber))))							
			Sort Order

			Accumulators



			Action Rules								
				Empty Set Rules
				
				Set Rules
					Entrance Rules
					Exit Rules
						
				Instance Rules
					increment RecordCount
					initialize TaxResult
					initialize ReturnedErrorNumber				 
					initialize ReturnedErrorMessage			 	
					initialize TaxingJurisdiction
					initialize InvoiceAmount		 	 		
					initialize CalculatedTaxAmt 		
					initialize TaxRate
					OutsideThreshold = false				 
					initialize VarianceAmount					 
					initialize AdditionalTaxesDue				 	
					WebServiceError			 = false

					initialize WebServiceErrorMessage
					initialize CapturedXml
					invoke Delete JurisdictionResultsRel
					invoke Delete JurisdictionResultsRel2	
					invoke Delete TaxDetailOutRel				


		GetTaxTableOut is an Instance Action


        	Action Rules

				initialize LocalTaxTable
				include ReturnTaxDetailOut
				MoreResults = TransientTaxTable

		CreateLineItemTaxTable is an Instance Action
			default label is untranslatable		 
			restricted
			Parameters
				PrmTaxTable is a TaxTableField
			Action Rules

				LocalTaxTable = PrmTaxTable


				include CreateTaxDetailOutFile

				if (TaxEntityRel.ThirdParty.VertexOSeries)
					if (ShipToTaxCode = "00" 
            		or ShipToTaxCode = blank)
						ShipToTaxCode = LocalTaxTable.TaxTableOutput[1].TaxCode


































		CreateInputUserElements2 is an Instance Action		  
			completion message is "OneSourceTaxAttributeSuccessfullyLoaded"	
			restricted						
			Parameters
				PrmTaxAttribute is a TaxAttribute
				FormatDate is Boolean
			Action Rules
				if (PrmTaxAttribute entered)
					LocalTaxAttributeCode = PrmTaxAttribute
					
				if (LocalTaxAttributeCode entered
				and TaxAttributeInstanceRel exists)
					if (InputUserAttributesRel exist)
						invoke Delete InputUserAttributesRel	
						 
					for each TaxAttributeInstanceRel.OneSourceTaxAttributeByNumberRel	   
						if (each.Value entered
						or  each.LoadDynamicField entered)

							LocalUserAttributeName 	= each.UserAttributeName		 
							initialize LocalAttributeValue
							if (each.LoadDynamicField.ValueIs.TaxEntity)
								LocalAttributeValue = TaxEntity
							else	
							if (each.LoadDynamicField.ValueIs.UNSPSC
							or  each.LoadDynamicField.ValueIs.CommodityCode)									
								LocalOneSourceTaxAttribute.UserElement[Idx].Value	= CommodityCode				
							else	
							if (each.LoadDynamicField.ValueIs.PaymentAmount)
								LocalAttributeValue	= TaxableAmount	
							else 
							if (each.LoadDynamicField.ValueIs.PostingDate
							or  each.LoadDynamicField.ValueIs.PaymentDate
							or  each.LoadDynamicField.ValueIs.TaxDate)
								if (FormatDate)
									LocalAttributeValue				= FormatedDateMMDDCCYY	
								else	
									LocalAttributeValue				= current corporate date	 				
							else	
								LocalAttributeValue					= each.Value
							
							LocalLevelUserFieldError = "Invoice"
							Trigger = EditUserAttributeValue

							if (LocalContinueWithCreate
							and CreateInputUserAttributeRel not exist)
								invoke Create CreateInputUserAttributeRel										
									invoked.Description							= each.Description				
									invoked.UserAttributeValue 					= LocalAttributeValue			
									
		TestLoadTaxAttributes is an Instance Action
			restricted	
			Action Rules			 	
				LocalMoreResults = "[TaxLineItem580]IAmHere"
				LocalTrigger = Load1SourceUserAttributesFrDerived		
				MoreResults = LocalMoreResults 
																			

		CreateInputVertexFlexibleFields is an Instance Action	
			completion message is "VertexFlexibleFieldSuccessfullyCreated"			
			Action Rules
				invoke Create VertexFlexibleFields  
					invoked.FinanceEnterpriseGroup 							= FinanceEnterpriseGroup
					invoked.VertexFlexibleFields.UniqueIdOfRelatedObject	= UniqueID
					invoked.VertexFlexibleFields.TaxAttributeCode           = blank	
					invoked.VertexFlexibleFields.Type						= "I"	
					
		CreateVertexFlexibleFieldsOutput is an Instance Action	 
			restricted
			completion message is "VertexFlexibleFieldSuccessfullyCreated"			
			Parameters
				ParmVertexAttributes is a VertexAttributeGroup
			Local Fields

			Action Rules
				initialize MoreResults
				MoreResults = MoreResults + "========================InParmAttributes===============================" + "<br>"
				MoreResults = MoreResults + ParmVertexAttributes			 
				invoke Delete VertexOutputFlexibleFieldsRel
				initialize TransientVertexAttributes
				TransientVertexAttributes = ParmVertexAttributes			 
				MoreResults = MoreResults + "========================TransAttributes===============================" + "<br>"
				MoreResults = MoreResults + TransientVertexAttributes		 
				invoke Create VertexFlexibleFields  
					assign result to LocalVertexFlexibleFieldsKey
						fill in fields from this instance
					invoked.FinanceEnterpriseGroup 							= FinanceEnterpriseGroup
					invoked.VertexFlexibleFields.UniqueIdOfRelatedObject	= UniqueID
					invoked.VertexFlexibleFields.TaxAttributeCode           = blank	
					invoked.VertexFlexibleFields.Type						= "O"	
					


				initialize Idx
				while (Idx <= 25)
					Idx +=1	
					if (TransientVertexAttributes.VertexCodes.FlexibleCode[Idx].Code not entered)
						end while
					else
						invoke Create VertexFlexibleCode  							 
							invoked.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup	
							invoked.VertexFlexibleFields		= LocalVertexFlexibleFieldsKey	
							invoked.VertexFlexibleCode.FieldId	= TransientVertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId									
							invoked.Code						= TransientVertexAttributes.VertexCodes.FlexibleCode[Idx].Code								 																	


				initialize Idx
				while (Idx <= 10)
					Idx +=1	
					if (TransientVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue not entered)
						end while
					else
						invoke Create VertexFlexibleNumeric  							
							invoked.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup	
							invoked.VertexFlexibleFields			= LocalVertexFlexibleFieldsKey	
							invoked.VertexFlexibleNumeric.FieldId	= TransientVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId									
							invoked.NumericValue					= TransientVertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue		
							

				initialize Idx
				while (Idx <= 5)
					Idx +=1	
					if (TransientVertexAttributes.VertexDates.FlexibleDate[Idx].DateValue not entered)
						end while
					else
						invoke Create VertexFlexibleDate  							
							invoked.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup	
							invoked.VertexFlexibleFields		= LocalVertexFlexibleFieldsKey	
							invoked.VertexFlexibleDate.FieldId	= TransientVertexAttributes.VertexDates.FlexibleDate[Idx].FieldId									
							invoked.DateValue					= TransientVertexAttributes.VertexDates.FlexibleDate[Idx].DateValue		
							
							
