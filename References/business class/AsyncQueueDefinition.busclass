AsyncQueueDefinition is a BusinessClass
    owned by async
    prefix is QD
    stored in environment
	contains environment data
	disable data area copy
		preserve target data






    Ontology
		symbolic key is AsyncQueueDefinition
		
    Patterns
        disable Auditing
        disable EffectiveDated
        implements DynamicCreation

    Persistent Fields
		Description 		    is Alpha 50
		SaveHistory 		    is Boolean



		MaxActiveActions 	    is Numeric 3   

		
		Suspended 			    is Boolean


		
		SystemQueue		    	is Boolean
		
		QueueAsBindingKey	    is Boolean
			default label is "UseQueueNameAsBindingKey"
			
		Priority 			    is a AsyncPriority		
		AsyncQueueGroup
			default label is "QueueGroup"	
			
		NotificationInformation is an AsyncTriggerNotification 
		
		IsIPAQueue is Boolean
		    default label is "IPAQueue"
			
	Local Fields
		LocalDataArea is a DataArea
		LocalWorkDataArea is a DataArea
		LocalDAReqOption is Numeric size 1 
		LocalDynCreate is Boolean
		TenantMaxExceeded is Boolean
		ProcQueuesCommit is Boolean

	Transient Fields
		AsyncLoadVersion 
		

		TransNoOfQueued is Numeric size 10
			default label is "NoOfQueued"
			derive value from NoOfQueued
		TransNoOfActive is Numeric size 10
			default label is "NoOfActive"
			derive value from NoOfActive
		TransNoOfFailed is Numeric size 10
			default label is "NoOfFailed"
			derive value from NoOfFailed
		TransNoOfFinished  is Numeric size 10
			default label is "NoOfFinished"
			derive value from NoOfFinished
			
	Rule Blocks
		LogSuspendStatus
			log "Queue_'<AsyncQueueDefinition>'_SuspendedSetTo<Suspended>.<CurrentActionInfo>"		
		
	Field Rules
		MaxActiveActions
			required
			initial value is 1
		SystemQueue
			default to false
			
		QueueAsBindingKey
			if (QueueAsBindingKey changed
			and QueueAsBindingKey
			and AsyncQueueDefinition = "DefaultQueue")
				cannot be changed
					"DefaultQueueCannotBeUsedAsQueueBinding"
					
		Priority
			required
			default to Priority.Normal
			initial value is 4 
			
		SaveHistory
			initial value is true			
			
		Suspended
			if (Suspended changed)
				include LogSuspendStatus			
							
    Derived Fields
    	TenantMaxWorkUnits is a NativeField
    		type is Numeric 4
    		
    	NoOfQueued is a ComputeField  
    		type is Numeric 10
    		(instance count of QueuedTriggers + instance count of IpaQueuedTriggers)
    	
    	NoOfQueuedAsyncOnly is a ComputeField  
    		type is Numeric 10
    		(instance count of QueuedTriggers)
    		
   		NoOfQueuedWorkUnits is a ComputeField  
    		type is Numeric 10
    		(instance count of IpaQueuedTriggers)    	

    	NoOfActive is a ComputeField  
    		type is Numeric 10
    		(instance count of ActiveTriggers + NoOfActiveWorkUnits)
    		
		NoOfActiveWorkUnits is a NativeField
			type is Numeric 10
			
		NoOfFailed	is a ComputeField 
    		type is Numeric 10
    		(instance count of FailedTriggers)
    		
		NoOfFinished is a ComputeField 
    		type is Numeric 10
    		(instance count of FinishedTriggers)
    	
		QueueSuspendedMessage is a MessageField
			restricted	
			"QueueIsSuspended"
			
		QueueGroupSuspendedMessage is a MessageField	
			restricted
			"QueueGroupIsSuspended"		
			
		QueueAndGroupSuspendedMessage is a MessageField	
			restricted
			"QueueAndGroupAreSuspended"					
			
		SuspendedMessage is a DerivedField
			type is MessageField
			
			if (Suspended)
				if (AsyncQueueGroup.Suspended)
					return QueueAndGroupSuspendedMessage
				else
					return QueueSuspendedMessage
			else
			if (AsyncQueueGroup.Suspended)
				return QueueGroupSuspendedMessage
			else
				return ""
				



		QueueSuspendedMessageWithPeriod is a MessageField
			restricted	
			"QueueIsSuspended."
			
		QueueGroupSuspendedMessageWithPeriod is a MessageField	
			restricted
			"QueueGroupIsSuspended."		
			
		QueueAndGroupSuspendedMessageWithPeriod is a MessageField	
			restricted
			"QueueAndGroupAreSuspended."					
			
		SuspendedMessageWithPeriod is a DerivedField
			type is MessageField
			
			if (Suspended)
				if (AsyncQueueGroup.Suspended)
					return QueueAndGroupSuspendedMessageWithPeriod
				else
					return QueueSuspendedMessageWithPeriod
			else
			if (AsyncQueueGroup.Suspended)
				return QueueGroupSuspendedMessageWithPeriod
			else
				return ""
				
		ValidDataAreaQueue is a DerivedField
			type is Boolean
			restricted
			if (AsyncQueueDefinition like "DefaultQueue-*")
				LocalDataArea = AsyncQueueDefinition - "DefaultQueue-"
				
				if (LocalDataArea exists)
					return true
			
			return false 
			
		QueuesByDataArea is a NativeField
			type is Boolean
			restricted

			
		DataAreaUpgadeRequests is a NativeField
			type is Numeric size 1  
			restricted

			
		AsyncAuditingEnabled is a NativeField
			type is Boolean
			default label is untranslatable
			restricted

			
		TenantMaxActions is a NativeField
    		type is Numeric 6
			default label is untranslatable
			restricted

			
		CurrentActionInfo is a NativeField
			type is Text
			default label is untranslatable
			restricted

			
	Conditions
		HasFailedTriggers
    		default label is "FailedTriggers"
    		when (NoOfFailed > 0)
		
		IsSuspended
			default label is "Suspended"
			when (Suspended or AsyncQueueGroup.Suspended)
			
		ValidForActorDataArea
			when (AsyncQueueDefinition = "DefaultQueue"
			or    QueueMappingByActorDataArea exists)
			
		LargeFinishedTriggers
			restricted
			when (NoOfFinished > 1000)		
			
		StatisticTriggersExists
   			when (StatisticTriggers exists)	
   				
		RequestsExist
   			when (AsyncActionRequest(ParentQueue) exists)	   				
   			
		QueueNameEntered 
		   	restricted
		   	when (AsyncQueueDefinition entered) 
		   	
		QueueGroupExists
   			when (AsyncQueueGroup exists)			   				
   			
		QueueGroupEntered
			restricted
   			when (AsyncQueueGroup entered)

		QueuedUpgradesExist
			restricted
			when (QueuedUpgradeTriggers exists or RetryUpgradeTriggers exists or SystemUpgradeRequests exists) 
			
		AtQueueMax
			restricted
			when (MaxActiveActions <= NoOfActive)
			
		AtQueueGroupMax
			restricted
			when (AsyncQueueGroup exists and AsyncQueueGroup.MaxActiveActions <= AsyncQueueGroup.NoOfActive)	
		
		HasAuditRecords
			default label is "AuditRecordsExist"
			when (AuditingRel exists)
		
		
	Dynamic Creation Rules
		constraint(AsyncQueueDefinition = "DefaultQueue" or AsyncQueueDefinition = "IpaDefaultWorkUnitDispatchQueue" or ValidDataAreaQueue or AsyncQueueDefinition = blank)
			"Queue<AsyncQueueDefinition>DoesNotExist"

		LocalDynCreate = true
		Description = "Automatically generated Default Queue"
		
		if (ValidDataAreaQueue and DefaultQueueRel exists)
			SaveHistory = DefaultQueueRel.SaveHistory
			MaxActiveActions = DefaultQueueRel.MaxActiveActions
			Priority = DefaultQueueRel.Priority
			Suspended = DefaultQueueRel.Suspended
			AsyncQueueGroup = DefaultQueueRel.AsyncQueueGroup
		else 
			if (AsyncQueueDefinition = "IpaDefaultWorkUnitDispatchQueue")
				MaxActiveActions = -1
				IsIPAQueue = true
				Priority = Priority.Normal
				Description = "Automatically generated Default IPA Work Unit Queue"
		
			else 
				SaveHistory = true
				MaxActiveActions = 4
				Priority = Priority.Normal
		
		log "Queue_'<AsyncQueueDefinition>'_dynamicallyCreatedWith_SuspendedSetTo<Suspended>.<CurrentActionInfo>"
				
	Create Exit Rules
		log "Queue_'<AsyncQueueDefinition>'_createdWith_SuspendedSetTo<Suspended>.<CurrentActionInfo>"
				
	Sets
    	Queues
    		indexed
    		Sort Order
    			AsyncQueueDefinition
    			
    	IpaQueues
    		indexed
    		Sort Order
    			IsIPAQueue
    			AsyncQueueDefinition


	Actions
		Create is a Create Action
			Exit Rules
				if (not LocalDynCreate and AsyncAuditingEnabled) 
					invoke Create AsyncAuditEntry  
				 
				LocalDynCreate = false
		
		Delete is a Delete Action
			Local Fields
				AnyRequest 			is Boolean
				AnyPendingRequests  is Boolean
			Entrance Rules
				for each AsyncActionRequest(ParentQueue) set
					if (each.PendingScheduling)
						AnyPendingRequests = true
					else
						AnyRequest = true
						
					if (AnyRequest
					and AnyPendingRequests)
						end for each
					
				constraint (not AnyPendingRequests)
					"CannotDelete.PendingRequestsReferenceThisQueue."
				
				if (AnyRequest)
					confirmation required
						"RequestsExistThatReferenceThisQueue.DoYouWantToRemoveThoseReferences?"
					
					for each AsyncActionRequest(ParentQueue) set
						if (not each.PendingScheduling)
							invoke Update each
								invoked.ParentQueue = blank
								invoked.TranDisableAudit = true
					
				if (AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry
					
				LocalDynCreate = false
				 		
		Update is an Update Action
			Action Rules
				if (AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry 
					
				LocalDynCreate = false
		
		SetIpaQueue is an Instance Action
			restricted
			Action Rules
				if (PfiAsyncQueueMapping set exists or AsyncQueueDefinition = "IpaDefaultWorkUnitDispatchQueue")
					IsIPAQueue = true
				else
					IsIPAQueue = false
									
		ProcessQueues is a Set Action
			run in foreground
			restricted
			disable checkpoint
			Parameters
				ParamCheckForUpgradeRequests is Boolean            
					default label is "CheckForUpgradeRequests"
				ParamLogQueued is Boolean
					default label is "LogQueuedTriggerCount"
			Local Fields
				DAReqOption is Numeric size 1 
				PreProcQueueTriggerRels is Boolean 
				LocalQueuedCount is Numeric 10
			Action Rules
				Set Rules
					Entrance Rules
						LocalDAReqOption = 0 
						DAReqOption = DataAreaUpgadeRequests 
						TenantMaxExceeded = false
						
						if (not config(async).PreprocessQueueTriggerRels = "false") 
							PreProcQueueTriggerRels = true
					
					Exit Rules
						LocalDAReqOption = 0 
						DAReqOption = DataAreaUpgadeRequests 
										
				Instance Rules

					if (PreProcQueueTriggerRels or (QueuedTriggers exists or RetryTriggers exists))
						ProcQueuesCommit = false
						
						if (not TenantMaxExceeded) 
							invoke ProcessTriggers
								invoked.ParamProcessUpgrades = QueuedUpgradesExist
							
						if (ProcQueuesCommit) 
							commit transaction 
						
						if (ParamLogQueued)
							LocalQueuedCount = NoOfQueuedAsyncOnly
							if (LocalQueuedCount > 0)
								log "Queue<AsyncQueueDefinition>AsyncTriggersQueuedCount:<LocalQueuedCount>,QueueMax:<MaxActiveActions>,TenantMax:<TenantMaxActions>" 
						else
						if (TenantMaxExceeded) 
							end set action instance loop
			Instance Selection                  

				where ((IsSuspended = false or ParamCheckForUpgradeRequests) and ((config(async).PreprocessQueueTriggerRels = "false") or (QueuedTriggers exists or RetryTriggers exists))) 

			Sort Order
				Priority
				AsyncQueueDefinition
				
		ProcessTriggers is an Instance Action
			restricted
			Parameters
				ParamProcessUpgrades is Boolean                         
					default label is "QueuedUpgradeRequestsExist"
		 	Local Fields
		 		NoOfActiveTriggersInQueue is Numeric 10
		 		GroupNoOfActiveTriggersInQueue is Numeric 10
		 		AnySystemUpgrade is Boolean
		 		DAReqOption is Numeric size 1
		 		QueueGroupExists is Boolean
		 		OrigStatus is a AsyncTriggerStatus // For some reason parser will not allow "each.Status changed"
		 	Action Rules
			    NoOfActiveTriggersInQueue = NoOfActive
			    AnySystemUpgrade = false
			    
			    if (AsyncQueueGroup entered and AsyncQueueGroup exists)
			    	QueueGroupExists = true 
			    	GroupNoOfActiveTriggersInQueue = AsyncQueueGroup.NoOfActive
			   
			    if (ParamProcessUpgrades
			    or  IsSuspended) 
			    	if (MaxActiveActions > NoOfActiveTriggersInQueue and ((not QueueGroupExists) or AsyncQueueGroup.MaxActiveActions > GroupNoOfActiveTriggersInQueue))
						for each RetryUpgradeTriggers
							if (not AnySystemUpgrade 
							and each.AsyncActionRequest.SystemRequest.UpgradeSystem)
								AnySystemUpgrade = true 
								
							if (each.AsyncActionRequest.IsDataAreaActive
							and not each.AsyncActionRequest.HoldOnSynchronizedGroupNoParam
							and not each.AsyncActionRequest.WaitingOnRequest)
								OrigStatus = each.Status
								invoke InRetry.RetryTrigger each
								if (each.RecordFastLocked)
									NoOfActiveTriggersInQueue = NoOfActiveTriggersInQueue + 1
									
									if (QueueGroupExists)
										GroupNoOfActiveTriggersInQueue = GroupNoOfActiveTriggersInQueue + 1
									
									if (not ProcQueuesCommit and each.Status != OrigStatus)
										ProcQueuesCommit = true
									
									if (MaxActiveActions <= NoOfActiveTriggersInQueue or IsSuspended or (QueueGroupExists and AsyncQueueGroup.MaxActiveActions <= GroupNoOfActiveTriggersInQueue))
										end for each
										
				    	if (MaxActiveActions > NoOfActiveTriggersInQueue and ((not QueueGroupExists) or AsyncQueueGroup.MaxActiveActions > GroupNoOfActiveTriggersInQueue))
							for each QueuedUpgradeTriggers
								if (not AnySystemUpgrade 
								and each.AsyncActionRequest.SystemRequest.UpgradeSystem)
									AnySystemUpgrade = true 
									
								if (each.AsyncActionRequest.IsDataAreaActive
								and not each.AsyncActionRequest.HoldOnSynchronizedGroupNoParam
								and not each.AsyncActionRequest.WaitingOnRequest)
									OrigStatus = each.Status
									invoke Queued.ProcessTrigger each
									if (each.RecordFastLocked)
										NoOfActiveTriggersInQueue = NoOfActiveTriggersInQueue + 1
										
										if (QueueGroupExists)
											GroupNoOfActiveTriggersInQueue = GroupNoOfActiveTriggersInQueue + 1
										
										if (not ProcQueuesCommit and each.Status != OrigStatus)
											ProcQueuesCommit = true
										
										if (MaxActiveActions <= NoOfActiveTriggersInQueue or IsSuspended or (QueueGroupExists and AsyncQueueGroup.MaxActiveActions <= GroupNoOfActiveTriggersInQueue))
											end for each
									
				if (not AnySystemUpgrade and not IsSuspended and MaxActiveActions > NoOfActiveTriggersInQueue and ((not QueueGroupExists) or AsyncQueueGroup.MaxActiveActions > GroupNoOfActiveTriggersInQueue))			    	
					for each RetryTriggers
						if (each.AsyncActionRequest.IsDataAreaActive
						and not each.AsyncActionRequest.HoldOnSynchronizedGroupNoParam
						and not each.AsyncActionRequest.WaitingOnRequest)
							LocalWorkDataArea = each.AsyncActionRequest.DataArea
							LocalDAReqOption = 3 
							DAReqOption = DataAreaUpgadeRequests 
						
							if (DAReqOption = 0) 
								if (each.AsyncActionRequest.UnfinishedSystemUpgradeDataAreaRequestsRel exists)
									LocalDAReqOption = 1 
									DAReqOption = DataAreaUpgadeRequests 
								else
									LocalDAReqOption = 2 
									DAReqOption = DataAreaUpgadeRequests 
							
							if (DAReqOption = 2 
							or  DAReqOption = 0) 
								OrigStatus = each.Status
								invoke InRetry.RetryTrigger each
								if (each.RecordFastLocked)
									NoOfActiveTriggersInQueue = NoOfActiveTriggersInQueue + 1
									
									if (QueueGroupExists)
										GroupNoOfActiveTriggersInQueue = GroupNoOfActiveTriggersInQueue + 1
									
									if (not ProcQueuesCommit and each.Status != OrigStatus)
										ProcQueuesCommit = true
										
									if (MaxActiveActions <= NoOfActiveTriggersInQueue or IsSuspended or (QueueGroupExists and AsyncQueueGroup.MaxActiveActions <= GroupNoOfActiveTriggersInQueue))
										end for each
										
								if (each.TenantMaxExceeded)
									TenantMaxExceeded = true
									end for each
										
					if (MaxActiveActions > NoOfActiveTriggersInQueue and ((not QueueGroupExists) or AsyncQueueGroup.MaxActiveActions > GroupNoOfActiveTriggersInQueue))
						for each QueuedTriggers
							if (each.AsyncActionRequest.IsDataAreaActive
							and not each.AsyncActionRequest.HoldOnSynchronizedGroupNoParam
							and not each.AsyncActionRequest.WaitingOnRequest)
								LocalWorkDataArea = each.AsyncActionRequest.DataArea
								LocalDAReqOption = 3 
								DAReqOption = DataAreaUpgadeRequests 
						
								if (DAReqOption = 0) 
									if (each.AsyncActionRequest.UnfinishedSystemUpgradeDataAreaRequestsRel exists)
										LocalDAReqOption = 1 
										DAReqOption = DataAreaUpgadeRequests 
									else
										LocalDAReqOption = 2 
										DAReqOption = DataAreaUpgadeRequests 
							
								if (DAReqOption = 2 
								or  DAReqOption = 0) 
									OrigStatus = each.Status
									invoke Queued.ProcessTrigger each
									if (each.RecordFastLocked)
										NoOfActiveTriggersInQueue = NoOfActiveTriggersInQueue + 1
										
										if (QueueGroupExists)
											GroupNoOfActiveTriggersInQueue = GroupNoOfActiveTriggersInQueue + 1
										
										if (not ProcQueuesCommit and each.Status != OrigStatus)
											ProcQueuesCommit = true
										
										if (MaxActiveActions <= NoOfActiveTriggersInQueue or IsSuspended or (QueueGroupExists and AsyncQueueGroup.MaxActiveActions <= GroupNoOfActiveTriggersInQueue))
											end for each
									if (each.TenantMaxExceeded)
										TenantMaxExceeded = true
										end for each
					
		StartAsyncProcessing is an Instance Action
			restricted
			Action Rules
				invoke StartSweeper AsyncStarter
		
		DeleteFinishedTriggers is an Instance Action
			valid when (not LargeFinishedTriggers)
			confirmation required
				"AreYouSureYouWantToDeleteAllFinishedTriggersInThisQueue?"
			Parameters
				CurrentDataAreaOnly	is Boolean				
			Action Rules
				if (NoOfFinished > 500)
					confirmation required
						"DueToTheLargeVolumeOfTriggersItIsRecommendedToUseDeleteFinishedTriggersBackground.ProceedAnyway?"
				
				if (AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry 
					
				LocalDynCreate = false
						
				for each FinishedTriggers
					if (not CurrentDataAreaOnly
					or  each.InRequestDataArea)
						if (each.CheckPointsExist)
							log "AsyncQueueDefinition-CheckPointExistedAndWasDeletedForFinishedTrigger:DataArea<each.AsyncActionRequest.DataArea>,Name<each.AsyncActionRequest.Name>,BusinessView<each.AsyncActionRequest.ImplementingClass>,Action<each.AsyncActionRequest.AsyncAction>,Trigger<each.AsyncActionTrigger>,UniqueID<each.UniqueID>"
			 				invoke DeleteForRunOnErrorRequest each.CheckPointRel		
						invoke Finished.DeleteInternal each
					
		DeleteFinishedTriggersBackground is an Instance Action
			completion message is "TriggerDeleteSubmittedToBackground"
			confirmation required
				"AreYouSureYouWantToDeleteAllFinishedTriggersInThisQueue?"
			Parameters
				CurrentDataAreaOnly	is Boolean
			Action Rules
				invoke DeleteFinishedTriggersForQueue AsyncActionTrigger
						invoked.PrmQueue 			= AsyncQueueDefinition
						invoked.CurrentDataAreaOnly = CurrentDataAreaOnly					

		DeleteFinishedTriggersInAllQueues is a Set Action
			disable checkpoint
			confirmation required
				"AreYouSureYouWantToDeleteAllFinishedTriggersInAllQueues?"
			Parameters
				CurrentDataAreaOnly	is Boolean
			Action Rules
				Instance Rules
					invoke DeleteFinishedTriggersForQueue AsyncActionTrigger
						invoked.PrmQueue			= AsyncQueueDefinition
						invoked.CurrentDataAreaOnly = CurrentDataAreaOnly
						
		ResetFailedTriggersForQueue is an Instance Action
			valid when (HasFailedTriggers)
			Parameters
				PrmLostWhilePending is Boolean
					default label is "IncludeLostWhilePendingTriggers"
				PrmFailedToStart is Boolean
					default label is "IncludeFailedToStartTriggers"
				PrmLostWhileInProgress is Boolean
					default label is "IncludeLostWhileInProgressTriggers"	
				PrmTerminatedAbnormally is Boolean
					default label is "IncludeTerminatedAbnormallyTriggers"	
				CreatedFrom 		is TimeStamp
				CreatedThrough 		is TimeStamp
				CurrentDataAreaOnly	is Boolean 

			Parameter Rules
				PrmLostWhilePending
					initial value is true
					
					if (not PrmLostWhilePending and not PrmFailedToStart and not PrmLostWhileInProgress and not PrmTerminatedAbnormally)
						required
							"MustChooseAtLeastOneStatus"
						
				PrmFailedToStart
					initial value is true							
						
				PrmLostWhileInProgress
					initial value is true
					
				PrmTerminatedAbnormally
					initial value is true	
					
				CurrentDataAreaOnly
					initial value is true	
					
			Action Rules
				invoke ResetFailedTriggersForQueue AsyncActionTrigger
					invoked.PrmQueue 				= AsyncQueueDefinition
					invoked.PrmLostWhilePending 	= PrmLostWhilePending
					invoked.PrmFailedToStart		= PrmFailedToStart
					invoked.PrmLostWhileInProgress	= PrmLostWhileInProgress
					invoked.PrmTerminatedAbnormally	= PrmTerminatedAbnormally
					invoked.CreatedFrom				= CreatedFrom
					invoked.CreatedThrough			= CreatedThrough	
					invoked.CurrentDataAreaOnly		= CurrentDataAreaOnly
					
		Suspend is an Instance Action
			Action Rules
				Suspended = true
			
				if (AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry 
					
				include LogSuspendStatus
					
				LocalDynCreate = false
					
		Resume is an Instance Action
			Action Rules
				Suspended = false
			
				if (AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry 
					
				include LogSuspendStatus
					
				LocalDynCreate = false
				 		
		SetMaxActiveActions is an Instance Action
			Parameters
				NewMaxActiveActions is Numeric 3
			Action Rules
				MaxActiveActions = NewMaxActiveActions

				if (AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry
				
				LocalDynCreate = false
				 		
		SetQueueGroup is an Instance Action
			Parameters
				ParamAsyncQueueGroup is an AsyncQueueGroup
					default label is "QueueGroup"
			
			Parameter Rules
				ParamAsyncQueueGroup
					initial value is AsyncQueueGroup
					
			Action Rules
				AsyncQueueGroup = ParamAsyncQueueGroup
			
				if (AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry
				
				LocalDynCreate = false 
				 		
		RemoveFromQueueGroup is an Instance Action
			valid when (QueueGroupEntered)
			
			Action Rules				
				initialize AsyncQueueGroup
				
				if (AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry
				
				LocalDynCreate = false 
				 		
		SuspendQueue is a Set Action
			disable checkpoint
			Parameters
				Queue is a AsyncQueueDefinition
			Action Rules
				Instance Rules
					invoke Suspend
			Instance Selection
				where (AsyncQueueDefinition = Queue)

		ResumeQueue is a Set Action
			disable checkpoint
			Parameters
				Queue is a AsyncQueueDefinition
			Action Rules
				Instance Rules
					invoke Resume
			Instance Selection
				where (AsyncQueueDefinition = Queue)

		SetMaxActiveActionsForQueue is a Set Action
			disable checkpoint
			Parameters
				Queue is a AsyncQueueDefinition
				NewMaxActiveActions is Numeric 3
			Action Rules
				Instance Rules
					invoke SetMaxActiveActions
						invoked.NewMaxActiveActions = NewMaxActiveActions
			Instance Selection
				where (AsyncQueueDefinition = Queue)
	
    Relations
    	IpaQueuedTriggers  
    		one-to-many relation to PfiAsyncWorkUnitTrigger
			Field Mapping uses Queued
				related.AsyncQueueDefinition = AsyncQueueDefinition
				
    	QueuedTriggers  
    		one-to-many relation to AsyncActionTrigger
			Field Mapping uses Queued
				related.AsyncQueueDefinition = AsyncQueueDefinition
				related.Status = 1

		
		QueuedUpgradeTriggers
    		one-to-many relation to AsyncActionTrigger
			Field Mapping uses QueuedRetryStart
				related.AsyncQueueDefinition = AsyncQueueDefinition
				related.UpgradeRequest = true
				related.Status = 1

    	ActiveTriggers
    		one-to-many relation to AsyncActionTrigger
			Field Mapping uses Queued
				related.AsyncQueueDefinition = AsyncQueueDefinition
			Instance Selection
				where ((related.Status.PendingStart)
				or (related.Status.InProgress))

		FailedTriggers
			one-to-many relation to AsyncActionTrigger
			Field Mapping uses Queued
				related.AsyncQueueDefinition = AsyncQueueDefinition
			Instance Selection
				where ((related.Status.LostWhilePending)
				or (related.Status.FailedToStart)
				or (related.Status.LostWhileInProgress)
				or (related.Status.TerminatedAbnormally))
		
		FinishedTriggers
			one-to-many relation to AsyncActionTrigger
			Field Mapping uses Queued
				related.AsyncQueueDefinition = AsyncQueueDefinition
				related.Status = 8

    	RetryTriggers
    		one-to-many relation to AsyncActionTrigger
			Field Mapping uses Queued
				related.AsyncQueueDefinition = AsyncQueueDefinition
				related.Status = 9
			Instance Selection
				where (related.RetryStart <= current timestamp) 
				
		RetryUpgradeTriggers
    		one-to-many relation to AsyncActionTrigger
			Field Mapping uses QueuedRetryStart
				related.AsyncQueueDefinition = AsyncQueueDefinition
				related.UpgradeRequest = true
				related.Status = 9
			Instance Selection
				where (related.RetryStart <= current timestamp) 
				
		StatisticTriggers
    		one-to-many relation to AsyncActionTrigger
			Field Mapping uses Queued
				related.AsyncQueueDefinition = AsyncQueueDefinition
			Instance Selection
				where (related.IsStatisticsState)	
				
		SystemUpgradeRequests
			one-to-many relation to AsyncActionRequest
			Field Mapping uses BySystemRequestPending
			Instance Selection
				where (related.SystemRequest >= 3 
				and    related.SystemRequest <= 4 
				and    related.PendingScheduling = true)
				
		QueueMappingByActorDataArea 
			one-to-many relation to AsyncQueueMapping
			Field Mapping uses MappingsByQueue
				related.AsyncQueueDefinition = AsyncQueueDefinition
			Instance Selection
				where ((related.Actor = actor	
				or      related.Actor = blank)
				and    (related.DataArea = parentcontext.dataarea
				or      related.DataArea = blank))				
		
		DefaultQueueRel
			one-to-one relation to AsyncQueueDefinition
			Field Mapping uses Queues
				related.AsyncQueueDefinition = "DefaultQueue"
				
		AuditingRel
			one-to-many relation to AsyncAuditEntry
			Field Mapping uses ByBusClassID
				related.Reference.BusinessClassName = "AsyncQueueDefinition"
				related.Reference.BusinessObjectKey = UniqueID
				
