CustomerOrderReturnLine is a BusinessClass
    owned by oe
    prefix is RTL
    classic name is RETURNLINE

    Ontology
        symbolic key is CustomerOrderReturnLine
            classic set name is RTLSET1
            classic name is LINE-NBR
            classic name for CustomerOrderReturn is AUTH-NO

    Patterns
        implements StaticJava

        disable AuditIndex

    Persistent Fields

        Customer
		OrderNumber					 is a CustomerOrder 
			classic name is ORDER-NBR		
        InventoryLocation
            classic name is LOCATION
        Date                         is Date
        Item
        Description
        LineType					 is a BillingLineType
        ReasonCode					 is a OrderCancelCreditReason			 
        CustomerShipTo
            classic name is SHIP-TO
        Quantity
		SellingUnitOfMeasure		 is a UnitOfMeasure
			classic name is SELL-UOM
		InvoiceCatchWeightQuantity   is a Quantity
			classic name is INVC-CW-QTY
        InventoryCatchWeightQuantity is a Quantity
            classic name is INVEN-CW-QTY
        EnteredPrice                 is an InternationalCost
        StandardCost                 is an InternationalCost
            classic name is STD-COST
        SellToStock
        UnitPrice                    is an InternationalCost
        BasePrice                    is an InternationalCost
		SellingPriceUnitOfMeasure    is a UnitOfMeasure
			classic name is SPR-UOM
		SellingPriceToStock			 is a SellToStock
			classic name is SPR-TO-STOCK
		EnteredUnitCost				 is an InternationalCost
			classic name is ENT-UNIT-COST
        UnitCost                     is an InternationalCost
        AtnObjIdC                    is an ObjId
		CustomerRequestedAction 	 is AlphaUpper size 1
	        States
	            Replacement value is "R"
	            CreditMemo  value is "C"	
		RestockCharge				 is an OrderEntryAddOnCharge
		InventoryDisposition 		 is AlphaUpper size 1
	        States
	            ReturnToStock value is "R"
	            Scrap         value is "S"
	            Ignore        value is "I"
	            Undecided     value is blank
		CreateCreditMemo			 is Boolean
			classic name is CREATE-CM-CD
        DetailQuantity               is a Quantity
            classic name is DETAIL-QTY
            protected





		PurchaseOrder
        POCode
        Status                       is Numeric size 1
            States
                Entered  value is 0
                Released value is 1
                Closed   value is 9
			protected
        AverageCost                  is an InternationalCost
        	protected
        StockOnHandQuantity          is a Quantity
            classic name is SOH-QTY
            protected
		LastAddOnChargeSequence		 is a Sequence3
			classic name is LAST-MISQ-SEQ
		LastCommentSequence			 is a Sequence3
			classic name is LAST-COMM-SEQ
        GlobalLineType
            classic name is GLBL-LINE-TYPE
        SalesAccount                 is a FinanceCodeBlockFull
            classic name for SalesAccount.AccountingUnit is SLS-ACCT-UNIT
            classic name for SalesAccount.GeneralLedgerChartAccount is SLS-ACCOUNT
            classic name for SalesAccount.Project is ACTIVITY
        OffsetAccount                is a FinanceCodeBlockFull
            classic name for OffsetAccount.AccountingUnit is OFF-ACCT-UNIT
            classic name for OffsetAccount.GeneralLedgerChartAccount is OFF-ACCOUNT
        CostOfGoodsSoldAccount       is a FinanceCodeBlockFull
            classic name for CostOfGoodsSoldAccount.AccountingUnit is CGS-ACCT-UNIT
            classic name for CostOfGoodsSoldAccount.GeneralLedgerChartAccount is CGS-ACCOUNT
            classic name for CostOfGoodsSoldAccount.Project is ACTIVITY-C
        CostVarianceAccount          is a FinanceCodeBlockFull
            classic name for CostVarianceAccount.AccountingUnit is CV-ACCT-UNIT
            classic name for CostVarianceAccount.GeneralLedgerChartAccount is CV-ACCOUNT
        FreightTotal					 is an InternationalAmount
            classic name is FREIGHT-TOT
            protected
        InsuranceTotal					 is an InternationalAmount
            classic name is INSURANCE-TOT
            protected
        CustomsTotal					 is an InternationalAmount
            classic name is CSTMS-TOT
            protected
        OtherAddOnChargesTotal			 is an InternationalAmount
            classic name is OTHER-AOC-TOT                   
            protected
        CompanyCustomer
        HSNSACCode
        TemporaryHold					 is AlphaUpper size 1
			classic name is TEMP-HOLD
            States
                ApprovedByEngine value is "A"
                    default label is "Approved by Engine"
                SentForApproval  value is "S"
                    default label is "Sent for Approval"
				RejectedByEngine value is "R"
					default label is "Rejected by Engine"

	Local Fields
		LocalTaxTotal						is an InternationalAmount
		LocalInventoryTransaction     		is an InventoryTransaction
		LocalTransactionSystemCode			is a TransactionSystemCode
		LocalInventoryTransactionLine 		is an InventoryTransactionLine
		NewInventoryTransactionLine			is an InventoryTransactionLine view
		LocalLineTotal						is an InternationalAmount
		LocalCatchWeightDetailQuantity		is a Quantity
		LocalDate							is Date
		LocalVariancePercent				is like CatchWeightVariancePercent
		LocalActionTypeCreate				is Boolean
		LocalMinorSalesClass				is like MinorSalesClass
		LocalGeneralLedgerSystemCode		is a GeneralLedgerSystemCode

		LocalAccountingEntity		is Alpha size 100
		LocalDocumentID				is Alpha size 100
		LocalDocID					is Alpha size 100
		LocalDelimiter				is Alpha size 5
		LocalCurrency				is Alpha size 5
		LocalLogicalID				is Alpha size 60

   
    Transient Fields
    	ItemLocation
    	TransientNoCharge					is Boolean
    		derive value from DerivedNoCharge
    
    Derived Fields
    	IncrementHeaderUndecidedItemCount is a DerivedField
    		type is Numeric size 1
    		restricted
    		if (InventoryDisposition.Undecided)
    			if (LocalActionTypeCreate or not old InventoryDisposition.Undecided)
    				return 1
    		else
    			if (old InventoryDisposition.Undecided)
    				return -1
    		return 0
    	
    	IncrementHeaderCommentCount is a DerivedField
    		type is Numeric size 1
    		restricted
    		if (CreateCreditMemo)
    			if(LocalActionTypeCreate or not old CreateCreditMemo)
    				return 1
    		else 
    			if (LocalActionTypeCreate or old CreateCreditMemo)
    				return -1
    		return 0
    				
    	DerivedNoCharge 					is a DerivedField
    		type is Boolean
    		restricted
    		if (BillingInvoiceLineRel.NoCharge)
    			return true
    		else
    			return false
    			
    	DerivedCustomerOrderReturnLine is a DerivedField
    		type is like CustomerOrderReturnLine
    		return CustomerOrderReturnLine    			
    			
		DerivedQuantityToProcessStockUOM        is a DerivedField
            type is like Quantity
			if (SellingUnitOfMeasure not = Item.StockUOM and Item exists)
				return (Quantity * SellToStock)
			else
				return Quantity

        DerivedCatchWeightVariancePercent         is a DerivedField
            type is Decimal size 5.2
            LocalVariancePercent = (((InventoryCatchWeightQuantity - DerivedQuantityToProcessStockUOM)/DerivedQuantityToProcessStockUOM) * 100)
            if (LocalVariancePercent < 0)
                LocalVariancePercent = LocalVariancePercent * -1
            return LocalVariancePercent     

        CatchWeightOutOfToleranceMessage         is a MessageField
            restricted
            "CatchWeightQuantityIsOutsideOfTolerance"
            

  		DerivedExtendedAmount is a DerivedField
            type is Numeric 40
            restricted
            DerivedExtendedAmount = Quantity * EnteredPrice + OtherAddOnChargesTotal
            return DerivedExtendedAmount	    		
        
        DerivedItem is a DerivedField
        	type is Alpha size 100
        	restricted
        	return Company.FinanceEnterpriseGroup + LocalDelimiter + Item.ItemGroup.BusinessGroup + LocalDelimiter + Item
           
        DerivedCustOrderReturnLocation is a DerivedField
        	type is Alpha size 100
        	restricted
        	return Company using "%d" + LocalDelimiter + InventoryLocation
        	
        DerivedCustOrderQuantity is a DerivedField
        	type is Decimal size 13.4
        	restricted
        	return CustomerOrderLineRel.OrderQuantity


    Conditions

        IsClosed
        	restricted
            when (Status.Closed)

        IsCommittedC
        	restricted
            when (AtnObjIdC entered)

        IsEntered
        	restricted
            when (Status.Entered)
		
		IsEnteredAndInventoried
			restricted
			when (IsEntered
			and  !LineType.Special)
		
		IsInventoriedAndNonStock
			restricted
			when (LineType.Inventoried
			or    LineType.NonStock)
				
        IsFullyReceived
        	restricted
            when (Status.Released)

        IsReasonEntered
        	restricted
            when (ReasonCode entered)

        IsReleased
        	restricted
            when (Status.Released)

        IsSalesAccount
        	restricted
            when (SalesAccount.AccountingUnit entered
            or    SalesAccount.GeneralLedgerChartAccount entered)

           
        IsLotTracked
        	restricted
            when (not ItemLocation.LotTracked.NotLotTracked)
		
		IsSerialTracked
			restricted
            when (not ItemLocation.SerialTracked.NotSerialTracked)                      

        IsMultipleUOMTracked
        	restricted
            when (first StockOnHandDetailRel exists
            and   ItemLocation.LotTracked.NotLotTracked
            and   ItemLocation.SerialTracked.NotSerialTracked
            and   not ItemLocation.BinTracked)
            	        
        HasItemDetail
        	restricted
        	when (LineType.Inventoried
        	and  (IsLotTracked
        	or    IsSerialTracked
        	or    ItemLocation.BinTracked
        	or    IsMultipleUOMTracked))
        
        IsValidForDetail
        	restricted
        	when (CustomerOrderReturn.IsEntered
        	and   HasItemDetail)
        	
		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)
	
		ItemIsCatchWeight
			restricted
			when (IsInventoriedAndNonStock
			and   Item.IsCatchWeightItem)
			
		IsCatchWeightQuantityOutOfTolerance
			restricted
			when (InventoryCatchWeightQuantity entered
			and   DerivedCatchWeightVariancePercent > Item.CatchWeightVariancePercent)

		IsOnHold
			restricted
			when (TemporaryHold = "S")

	Rule Blocks
		UpdateOrderLineTotal
			if (Quantity changed
			or  EnteredPrice changed)
				LocalLineTotal = (((Quantity - old Quantity) * (EnteredPrice - old EnteredPrice) * (SellToStock - old SellToStock)) / (SellingPriceToStock - old SellingPriceToStock))
			else
				LocalLineTotal = ((Quantity * EnteredPrice * SellToStock) / SellingPriceToStock)
		
    Relations
		TaxEngineTaxDetailRel
            one-to-many relation to TaxEngineTaxDetail
            Field Mapping uses ByCompanyOrder
				related.Company						= Company
                related.OrderNbr 					= OrderNumber
			Instance Selection
				where (related.PONumber				= CustomerOrderReturn
				and related.OrderLineNumber 		= CustomerOrderReturnLine)

		CustomerOrderLineRel
            one-to-one relation to CustomerOrderLine
            Field Mapping uses symbolic key
                related.Company           = Company
                related.CustomerOrder     = OrderNumber
                related.CustomerOrderLine = CustomerOrderReturnLine

		InventoryCompanyRel
            one-to-one relation to InventoryCompany
            Field Mapping uses symbolic key
                related.Company = Company

		CustomerOrderReturnLineDetailsRel is a CustomerOrderReturnLineDetail set

		CustomerOrderReturnLineAddOnChargesRel is a CustomerOrderReturnLineAddOnCharges set
		
		CustomerOrderReturnLineAttachmentRel is a CustomerOrderReturnLineAttachment set

		StockOnHandDetailRel
            one-to-many relation to StockOnHandDetail
            Field Mapping uses symbolic key
                related.Company           = Company
                related.InventoryLocation = InventoryLocation
                related.Item              = Item

		BillingInvoiceLineRel
            one-to-one relation to BillingInvoiceLine
            Field Mapping uses symbolic key
                related.Company                      = Company
                related.BillingInvoice.InvoicePrefix = CustomerOrderReturn.OriginalInvoice.InvoicePrefix
                related.BillingInvoice.InvoiceNumber = CustomerOrderReturn.OriginalInvoice.InvoiceNumber
                related.BillingInvoiceLine           = CustomerOrderReturnLine

		WarehouseShipmentLineDetailsRel
            one-to-many relation to WarehouseShipmentLineDetail
            Field Mapping uses symbolic key
                related.Company               = Company
                related.InventoryLocation     = InventoryLocation
                related.WarehouseShipment     = CustomerOrderReturn.WarehouseShipment
                related.WarehouseShipmentLine = CustomerOrderReturnLine
        
        BillingItemGeneralLedgerAccountRel
        	one-to-many relation to BillingItemGeneralLedgerAccount
        	Field Mapping uses symbolic key
        		related.Company				 			 					= Company
        		related.BillingItemGeneralLedgerAccount.BillingProcessLevel = CustomerOrderReturn.BillingProcessLevel
            	related.BillingItemGeneralLedgerAccount.MajorSalesClass		= Item.MajorSalesClass
            	related.BillingItemGeneralLedgerAccount.MinorSalesClass		= Item.MinorSalesClass

		BillingItemGeneralLedgerAccountsRel
        	one-to-one relation to BillingItemGeneralLedgerAccount
        	Field Mapping uses symbolic key
        		related.Company				 			 					= Company
        		related.BillingItemGeneralLedgerAccount.BillingProcessLevel = CustomerOrderReturn.BillingProcessLevel
            	related.BillingItemGeneralLedgerAccount.MajorSalesClass		= Item.MajorSalesClass
            	related.BillingItemGeneralLedgerAccount.MinorSalesClass		= LocalMinorSalesClass
        
        InventoryTransactionLineRel 
        	one-to-many relation to InventoryTransactionLine
        	Field Mapping uses ByOriginatingTransaction
        		related.OriginatingTransaction		= reference to this instance
        		related.TransactionSystemCode 		= "OE"
        		related.Company						= Company
        		related.InventoryLocation 			= InventoryLocation
			Instance Selection        		
        		where (related.InventoryTransactionLine.LineNumber = CustomerOrderReturnLine
        		and    related.InventoryTransaction.InventoryDocumentType.CustomerReturn)
    
		ItemSellUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= Item.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellingUnitOfMeasure
		
		ValidSellingUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= Item.ItemGroup
				related.Item				= Item
			Instance Selection
				where (related.ValidForSelling.Valid)
						
		ValidSellUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= Item.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellingUnitOfMeasure
			Instance Selection
				where (related.ValidForSelling.Valid)		
		
		ItemSellPriceUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= Item.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellingPriceUnitOfMeasure
		
		ValidSellingPriceUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= Item.ItemGroup
				related.Item				= Item
			Instance Selection
				where (related.ValidForSelling.Valid)
		
		ValidSellPriceUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup			= Item.ItemGroup
				related.Item				= Item
				related.UnitOfMeasure		= SellingPriceUnitOfMeasure
			Instance Selection
				where (related.ValidForSelling.Valid)		

		CustomerOrderLineAddOnChargesRel				
			one-to-many relation to CustomerOrderAddOnCharge
			Field Mapping uses symbolic key
				related.Company 				= Company
				related.CustomerOrder			= OrderNumber	
				related.CustomerOrderLine		= CustomerOrderReturnLine		

		BillingInvoiceLineAddOnChargesRel
			one-to-many relation to BillingInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company					= Company
				related.BillingInvoice			= CustomerOrderReturn.OriginalInvoice
				related.BillingInvoiceLine		= CustomerOrderReturnLine

    Sets

        Set3
            indexed
            Instance Selection
                where (IsCommittedC)
            Sort Order
                AtnObjIdC

        Set6
            indexed
            Sort Order
                Company
                CustomerOrderReturnLine
                CustomerOrderReturn
	
	
    Field Rules
    	CustomerOrderReturnLine
		    required
		    if (CustomerOrderReturn.OriginalInvoice entered)
		    	constraint (BillingInvoiceLineRel exists)
    				"OriginalInvoiceLineDoesNotExist" 				//OERTL.122"
    		
    		constraint (InventoryTransactionLineRel not exists)
    			"InventoryTransactionLineExistsForLine<CustomerOrderReturnLine>" //OERTN.236"
    			
        Customer
        	default to CustomerOrderReturn.Customer
        	
		OrderNumber		
			default to CustomerOrderReturn.OrderNumber
					
        InventoryLocation
        	default to CustomerOrderReturn.InventoryLocation
        	if (DetailQuantity entered)
        		cannot be changed   
        	
        Date
        	default to current corporate date
        	
        Item
            if (BillingInvoiceLineRel exists)
	        	default to BillingInvoiceLineRel.Item

            	constraint (Item = BillingInvoiceLineRel.Item)
            		"Item<Item>IsNotSameAsItemInInvoiceForLine<CustomerOrderReturnLine>"	
            required
            		
			if (!LineType.Special)


				
				constraint (!Item.AllowCustomerOrderReturns.No)
					"Item<Item>OnLine<CustomerOrderReturnLine>DoesNotAllowReturns"			
				LocalMinorSalesClass=Item.MinorSalesClass
				if( BillingItemGeneralLedgerAccountsRel not exists)
					LocalMinorSalesClass=blank
					constraint (BillingItemGeneralLedgerAccountsRel exists)
						"SalesAccountsDoesNotExistForLine<CustomerOrderReturnLine>Item<Item>"		//OERTL.203"
				
				if (LineType.Inventoried)	
					constraint (ItemLocation exists)
						"ItemLocationDoesNotExistForLine<CustomerOrderReturnLine>"   
				
					constraint (!ItemLocation.AllowCustomerOrderReturns.No)
						"ItemLocationForItem<Item>OnLine<CustomerOrderReturnLine>DoesNotAllowReturns"		//OERTL.141"
					
					if (Company.LimitReturns.SpecificDate
					and ItemLocation.AllowCustomerOrderReturns.Limit) 
						constraint (ItemLocation.CustomerOrderReturnDate >= current corporate date)
							"ReturnForLine<CustomerOrderReturnLine>Item<Item>IsNotAllowed;ItemLocationReturnDateIsExpired"		//OERTL.168"
					else
					if (Company.LimitReturns.Days
					and CustomerOrderReturn.OriginalInvoice entered
					and ItemLocation.AllowCustomerOrderReturns.Limit) 
						LocalDate = CustomerOrderReturn.OriginalInvoice.InvoiceDate + Company.ReturnDays
						constraint (LocalDate >= current corporate date)
							"ReturnForLine<CustomerOrderReturnLine>Item<Item>IsNotAllowed;CompanyReturnDateHasExpired"   //OERTL.170"
				else		
					if (CustomerOrderReturn.OriginalInvoice entered
					and Company.LimitReturns.SpecificDate				
					and Item.CustomerOrderReturnDate entered
					and Item.AllowCustomerOrderReturns.Limit)
						constraint (Item.CustomerOrderReturnDate >= current corporate date)
							"ReturnForLine<CustomerOrderReturnLine>Item<Item>IsNotAllowed;ItemReturnDateHasExpired" //OERTL.167"
					
					if (Company.LimitReturns.Days
					and CustomerOrderReturn.OriginalInvoice entered
					and Item.AllowCustomerOrderReturns.Limit) 
						LocalDate = CustomerOrderReturn.OriginalInvoice.InvoiceDate + Company.ReturnDays
						constraint (LocalDate >= current corporate date)
							"ReturnForLine<CustomerOrderReturnLine>Item<Item>IsNotAllowed;CompanyReturnDateHasExpired"   //OERTL.170"
				

		Description
			if (LineType.Special)
				required
			else
				default to Item.Description
						
		LineType
			if (BillingInvoiceLineRel exists)
				default to BillingInvoiceLineRel.LineType
				
				constraint (LineType = BillingInvoiceLineRel.LineType)
					"LineTypeForLine<CustomerOrderReturnLine>ShouldMatchWithInvoiceLineType"//OERTL.124"
			required	
			
			if (LineType.Inventoried)
				constraint (ItemLocation.InventoryTracked)
					"Item<Item>IsNotInventoryTracked"				
					
        ReasonCode
        	if (CreateCreditMemo)
            	required			
        			
        EnteredPrice
        	if (!BillingInvoiceLineRel.NoCharge)
        		default to BillingInvoiceLineRel.EnteredPrice
        		if (CreateCreditMemo)
        			required
       	UnitPrice
       		default to BillingInvoiceLineRel.UnitPrice
       		
       	BasePrice
       		default to BillingInvoiceLineRel.PriceInSellingUnitOfMeasure
       	
       	InventoryDisposition
       		if (!LineType.Inventoried)
	   			constraint (!InventoryDisposition.ReturnToStock)
	   				"CannotReturnToStockForSpecialOrNonStockItem"			//OERTL.220" , OERTL.391

        Quantity
        	default to BillingInvoiceLineRel.Quantity - CustomerOrderLineRel.ReturnedQuantity
			constraint (Quantity >= 0)
				"CannotEnterNegativeQuantity"
        	required
        	
        	if (CustomerOrderReturn.OriginalInvoice entered)
        		constraint (not CustomerOrderLineRel.IsFullyReturned)
					"OriginalOrderLineForReturnLine<CustomerOrderReturnLine>IsAlreadyFullyReturned"
					
				constraint (CustomerOrderLineRel.ReturnedQuantity + Quantity <= CustomerOrderLineRel.OrderQuantity)
					"TotalQuantityReturnedCannotBeGreaterThanOriginalOrderedQuantity"
        			
        InvoiceCatchWeightQuantity
        	default to BillingInvoiceLineRel.InvoiceCatchWeightQuantity
        	
		InventoryCatchWeightQuantity	
			if (!ItemIsCatchWeight)	
				cannot be entered
					"CannotEnterCatchWeightQuantity;ItemIsNotCatchWeightItem"
        
       	UnitCost
       		if (LineType.Inventoried
       		and CustomerOrderReturn.InventoryCompanyRel.CostingMethod.StandardCosting)	
       			default to ItemLocation.StandardCost			
       	
       	StandardCost
       		if (LineType.Inventoried
       		and InventoryCompanyRel.CostingMethod.StandardCosting)	
       			default to ItemLocation.StandardCost
       	
       	EnteredUnitCost
       		if (InventoryDisposition.Ignore)
       			cannot be entered	
       		else
       			default to BillingInvoiceLineRel.UnitCost
       		
       		if (LineType.Inventoried)
       			default to UnitCost
       		
        	
        SellingUnitOfMeasure
        	default to BillingInvoiceLineRel.SellingUnitOfMeasure
        	if (!LineType.Special)
        		default to Item.DefaultSellingUOM	
        		if (Item.DefaultSellingUOM not entered)	
        			constraint (ValidSellUOMRel exists)
        				"SellUOM<SellingUnitOfMeasure>IsNotValidForItem<Item>"	
        	else
        		required				
        
        SellingPriceUnitOfMeasure
        	default to BillingInvoiceLineRel.SellingPriceUnitOfMeasure
			if (!LineType.Special)        	
        		default to Item.DefaultSellPriceUOM
        		if (Item.DefaultSellPriceUOM not entered)
        			constraint (ValidSellPriceUOMRel exists)
        				"SellPriceUOM<SellingUnitOfMeasure>IsNotValidForItem<Item>"	
        	
        	if (BillingInvoiceLineRel.MultipleSellPrice)
        		default to Item.StockUOM
        		
        SellingPriceToStock
        	default to BillingInvoiceLineRel.SellingPriceToStockConversionFactor
        	if (Item exists and SellingPriceUnitOfMeasure != Item.StockUOM)
        		default to ItemSellPriceUOMRel.UOMConversion
        	else
        		default to 1
        
        SellToStock
        	if (Item exists and SellingUnitOfMeasure != Item.StockUOM)
        		default to ItemSellUOMRel.UOMConversion
        	else
        		default to 1
       	
       	SalesAccount
			if (LineType.Special)
        		default to CustomerOrderReturn.BillingProcessLevel.SpecialOrderSalesAccount
        	else
				default LocalMinorSalesClass to Item.MinorSalesClass
				if( BillingItemGeneralLedgerAccountsRel not exists)
					LocalMinorSalesClass=blank
				default to  BillingItemGeneralLedgerAccountsRel.SalesAccount
			LocalGeneralLedgerSystemCode = "OE"
			if (SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemCodeForAccount<SalesAccount.GeneralLedgerChartAccount.Account>"
			
			
				
        	       		
        OffsetAccount
        	if (LineType.Special)
        		default to BillingInvoiceLineRel.OffsetAccount
        		default to CustomerOrderReturn.BillingProcessLevel.ExpenseAccount
        	else
        		if (LineType.NonStock)
					default LocalMinorSalesClass to Item.MinorSalesClass
					if( BillingItemGeneralLedgerAccountsRel not exists)
						LocalMinorSalesClass = blank
					default to  BillingItemGeneralLedgerAccountsRel.ExpenseAccount
					
        	
        		else
        			if (InventoryDisposition.ReturnToStock)
        				default to ItemLocation.GeneralLedgerCategory.InventoryAccount
        			else
        			if (InventoryDisposition.Scrap)	
        				default to InventoryLocation.ScrapAccount
        	
        	if (InventoryDisposition.ReturnToStock
        	or  InventoryDisposition.Scrap)
        		required			
			LocalGeneralLedgerSystemCode = "OE"
			if (OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemCodeForAccount<OffsetAccount.GeneralLedgerChartAccount.Account>"
        		  
        	if (InventoryDisposition.Scrap)
        		constraint (OffsetAccount != ItemLocation.GeneralLedgerCategory.InventoryAccount)
        			"CannotUseInventoryAccountIfDispositionIsScrap"				
        		
        	if (InventoryDisposition.ReturnToStock)
        		constraint (OffsetAccount = ItemLocation.GeneralLedgerCategory.InventoryAccount)
        			"UseInventoryAccountIfDispositionIsReturnToStock"				
        	
        
        CostOfGoodsSoldAccount   
        	if (LineType.Special)
        		default to BillingInvoiceLineRel.COGSAccount   
        		default to CustomerOrderReturn.BillingProcessLevel.SpecialOrderCOGSAccount 
        	else
				default LocalMinorSalesClass to Item.MinorSalesClass
				if( BillingItemGeneralLedgerAccountsRel not exists)
					LocalMinorSalesClass = blank
				default to  BillingItemGeneralLedgerAccountsRel.COGSAccount 
				
        	
        	if (InventoryDisposition.ReturnToStock
        	or  InventoryDisposition.Scrap)
        		required			
			LocalGeneralLedgerSystemCode = "OE" 
			if (CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction)					
					"InvalidSystemCodeForAccount<CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account>"  

        CostVarianceAccount    
        	if (!LineType.Special)
				default to ItemLocation.GeneralLedgerCategory.CostVarianceAccount     

		CreateCreditMemo
			initial value is CustomerOrderReturn.CreateCreditMemo
			default to CustomerOrderReturn.CreateCreditMemo
			
			if (CustomerOrderReturnLineAddOnChargesRel exists)
				cannot be changed
					"AddOnChargesAreNotAllowedWhenLineDoesNotCreateCreditMemo"
	
		HSNSACCode
			if (IsHSNSACCodeEnabled)
    			required	
    				"HSN_/SACCodeIsRequired"
    		else
    			cannot be entered
    				"CannotEnter,HSN_/SACCodeFlagIsNotSetAtGlobalLedgerCompany"
				
	Action Exit Rules
		include UpdateOrderLineTotal
		if ((IncrementHeaderCommentCount entered
		or IncrementHeaderUndecidedItemCount entered)
		and not action type.Delete)
			invoke UpdateOrderReturn CustomerOrderReturn
				invoked.PrmUndecidedItemCount		= IncrementHeaderUndecidedItemCount
				invoked.PrmCommentCount				= IncrementHeaderCommentCount
				invoked.PrmLineTotal				= LocalLineTotal
		
	Actions
		UpdateReturnFromDetail is an Instance Action
			restricted
			Parameters
				PrmDetailQuantity is a Quantity
			Action Rules
				if (PrmDetailQuantity entered)
					DetailQuantity += PrmDetailQuantity
				
		Purge is a Purge Action
			restricted
			Entrance Rules
				invoke Purge CustomerOrderReturnLineDetailsRel
				invoke Purge CustomerOrderReturnLineAddOnChargesRel
				invoke Purge CustomerOrderReturnLineAttachmentRel			

		PutOnHold is an Instance Action
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.SentForApproval

		TaxEngineApprove is an Instance Action
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.ApprovedByEngine

		TaxEngineReject is an Instance Action
			restricted
			Action Rules
				TemporaryHold = TemporaryHold.RejectedByEngine

		CalculateDiscounts is an Instance Action				
			restricted
			Action Rules
				initialize LocalLineTotal
				LocalLineTotal = (((Quantity * EnteredPrice * SellToStock) / SellingPriceToStock) - BillingInvoiceLineRel.EnteredDiscount)
				invoke CalculateDiscountableAmount CustomerOrderReturn
					if (BillingInvoiceLineRel.OrderDiscount)
						invoked.PrmDiscountableAmount	= LocalLineTotal
					invoked.PrmLineTotal				= LocalLineTotal
				invoke CalculateDiscounts CustomerOrderReturnLineAddOnChargesRel
					invoked.PrmLineTotal = LocalLineTotal

	StateCycles
		CustomerReturnLineProcessing is a StateCycle
			state field is Status
			Entered is a State	
				Create is a Create Action
					valid when (CustomerOrderReturn.IsEntered)
					Action Rules
						if (CustomerOrderReturn.TaxEntityRel.ThirdParty.TaxEngine)
							if (CustomerOrderReturn.TemporaryHold entered)							
								constraint (CustomerOrderReturn.TemporaryHold.RejectedByEngine)
									"CreateNotAllowed;SentToApproval"

						constraint (CustomerOrderReturn.IsEntered)
							"CannotCreateReturnLine;ReturnIn<CustomerOrderReturn.Status>State"
						increment CustomerOrderReturn.LastLineNumber
					Exit Rules
						if (BillingInvoiceLineAddOnChargesRel exists)
							for each BillingInvoiceLineAddOnChargesRel
								invoke Create CustomerOrderReturnLineAddOnCharges
									invoked.Company								= Company
									invoked.CustomerOrderReturn 				= CustomerOrderReturn
									invoked.CustomerOrderReturnLine				= CustomerOrderReturnLine
									invoked.Miscellaneous						= each.Miscellaneous
									invoked.ChargeType 							= each.ChargeType
							        invoked.OrderDiscount 						= each.OrderDiscount
							        invoked.TrackType 							= each.TrackType
							        invoked.SalesAccount 						= each.SalesAccount
							        invoked.OffsetAccount 						= each.OffsetAccount
									invoked.CostOfGoodsSoldAccount 				= each.COGSAccount			
							        if (each.ChargeType.FlatAmount)
							        	invoked.EnteredPrice 	 = each.EnteredPrice.TransactionAmount
						        		invoked.Cost	         = each.UnitCost	
							        if (each.ChargeType.UnitPrice)
							        	invoked.EnteredUnitPrice = each.EnteredUnitPrice.TransactionAmount
							        	invoked.UnitCost		 = each.UnitCost
							        if (each.ChargeType.Percentage)
							        	invoked.PricePercent 	 = each.PricePercent
							        	invoked.CostPercent 	 = each.CostPercent
						
						LocalActionTypeCreate = true

				Update is an Update Action
					valid when (CustomerOrderReturn.IsEntered)
					Action Rules
						if (CustomerOrderReturn.TaxEntityRel.ThirdParty.TaxEngine)
							constraint (!IsOnHold)
								"CannotUpdate;SentForApproval"
						constraint (CustomerOrderReturn.IsEntered)
							"CannotUpdateReturnLine;ReturnIn<CustomerOrderReturn.Status>State"

				Delete is a Delete Action
					valid when (CustomerOrderReturn.IsEntered)
					Entrance Rules
						if (CustomerOrderReturn.TaxEntityRel.ThirdParty.TaxEngine)
							if (TemporaryHold entered)
								constraint (TemporaryHold.RejectedByEngine)
									"CannotDelete;SentForApproval"
								
						constraint (CustomerOrderReturn.IsEntered)
							"CannotDeleteReturnLine;ReturnIn<CustomerOrderReturn.Status>State"				
						
						constraint (DetailQuantity not entered)
							"CannotDeleteReturnLines;DetailsExists"				//"OERTL.119"
						include UpdateOrderLineTotal
						invoke UpdateOrderReturn CustomerOrderReturn
							if (InventoryDisposition.Undecided)
								invoked.PrmUndecidedItemCount		= -1
							invoked.PrmCommentCount					= -1
							invoked.PrmUndecidedCommentCount		= -1
							invoked.PrmLineTotal					= LocalLineTotal * -1
					
				Release is an Instance Action
					restricted
					Parameters
						PrmInventoryTransaction is like InventoryTransaction
						PrmBillingInvoice		is a BillingInvoice
					
					Action Rules
						LocalInventoryTransaction = PrmInventoryTransaction
						
						if (CustomerOrderReturn.OriginalInvoice entered)
							constraint (not CustomerOrderLineRel.IsFullyReturned)
								"OriginalOrderLineForReturnLine<CustomerOrderReturnLine>IsAlreadyFullyReturned"
							
							constraint (CustomerOrderLineRel.ReturnedQuantity + Quantity <= CustomerOrderLineRel.OrderQuantity)
								"TotalQuantityReturnedCannotBeGreaterThanOriginalOrderedQuantity"
						
						constraint (!InventoryDisposition.Undecided)
							"CannotRelease;InventoryDispositionIsRequiredForRelease"			
						
						if (ItemIsCatchWeight)
							constraint (InventoryCatchWeightQuantity entered)
								"CatchWeightQuantityRequiredForLine<CustomerOrderReturnLine>"
								 
						if (HasItemDetail)
							constraint (Quantity = DetailQuantity
							or (IsMultipleUOMTracked and DetailQuantity not entered))
								"ReturnLine<CustomerOrderReturnLine>QuantityIsOutOfBalance"		
							
							if (ItemIsCatchWeight)
								for each CustomerOrderReturnLineDetailsRel
									LocalCatchWeightDetailQuantity += each.CatchWeightQuantity
									
								constraint (InventoryCatchWeightQuantity = LocalCatchWeightDetailQuantity)
									"ReturnLine<CustomerOrderReturnLine>CatchWeightQuantityIsOutOfBalance"			
						
						LocalGeneralLedgerSystemCode = "OE"
						if (SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
							constraint (LocalGeneralLedgerSystemCode within SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
								"InvalidSystemCodeForAccount<SalesAccount.GeneralLedgerChartAccount.Account>"
						if (OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
							constraint (LocalGeneralLedgerSystemCode within OffsetAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
								"InvalidSystemCodeForAccount<OffsetAccount.GeneralLedgerChartAccount.Account>"
						if (CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
							constraint (LocalGeneralLedgerSystemCode within CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
								"InvalidSystemCodeForAccount<CostOfGoodsSoldAccount.GeneralLedgerChartAccount.Account>"
						if (CreateCreditMemo
						and CustomerOrderReturn.CommentCount > 0)
							invoke Create BillingInvoiceLine
								fill in fields from this instance
								invoked.BillingInvoice 		= PrmBillingInvoice
								invoked.BillingInvoiceLine	= CustomerOrderReturnLine
								invoked.PriceStatus	   		= PriceStatus.ManualOverrideOfPricing
								invoked.UnitCost			= EnteredUnitCost
								if (CustomerOrderReturn.OriginalInvoice.IsTaxEngine)
									LocalTaxTotal = sum TaxEngineTaxDetailRel.TaxAmount * -1
									if (any TaxEngineTaxDetailRel.TaxCode entered)
										invoked.TaxExemptCode			= "T"
										invoked.TaxCode					= InventoryLocation.TaxCode
										invoked.TaxTotal				= LocalTaxTotal
									else
										invoked.TaxExemptCode			= "E"
								else
									invoked.TaxExemptCode			= CustomerOrderLineRel.TaxStatus
									invoked.TaxCode					= CustomerOrderLineRel.TaxCode

								invoked.UNSPSCCode			= CustomerOrderLineRel.UNSPSCCode
								invoked.EnteredDiscount		= BillingInvoiceLineRel.EnteredDiscount * -1
								invoked.OrderDiscount		= BillingInvoiceLineRel.OrderDiscount
								if (InventoryDisposition.Ignore)
									initialize invoked.UnitCost
								
						if (LineType.Inventoried
						and InventoryDisposition.ReturnToStock)
							invoke Unreleased.Create InventoryTransactionLine
								assign result to NewInventoryTransactionLine
								fill in fields from this instance
								invoked.TransactionSystemCode 				= "OE"
								invoked.InventoryTransaction  				= LocalInventoryTransaction
								invoked.InventoryTransactionLine.LineNumber	= CustomerOrderReturnLine
								if (ItemIsCatchWeight)
									invoked.SecondaryUOM					= SellingUnitOfMeasure
									invoked.SecondaryUOMMultiplier			= SellToStock
									invoked.SecondaryQuantity				= Quantity
									invoked.Quantity						= InventoryCatchWeightQuantity
									invoked.TransactionUOM					= Item.StockUOM
									invoked.TransactionUOMMultiplier		= 1
									invoked.UnitPrice						= EnteredPrice 
								else									
									invoked.Quantity						= Quantity
									invoked.TransactionUOM					= SellingUnitOfMeasure
									invoked.TransactionUOMMultiplier		= SellToStock
									invoked.UnitPrice						= (EnteredPrice / SellingPriceToStock)
								if (ItemLocation.BinTracked)
									invoked.MultipleBins					= true
								invoked.UnitCost							= EnteredUnitCost
								invoked.OffsetAccount						= CostOfGoodsSoldAccount
								invoked.OriginatingTransaction				= reference to this instance
								invoked.Reference							= "RETURNS"
							LocalInventoryTransactionLine					= NewInventoryTransactionLine.InventoryTransactionLine
							
							invoke Release CustomerOrderReturnLineDetailsRel  
								invoked.PrmInventoryTransaction			    = LocalInventoryTransaction
								invoked.PrmInventoryTransactionLine 		= LocalInventoryTransactionLine	
								invoked.PrmBillingInvoice					= PrmBillingInvoice
								invoked.PrmBillingInvoiceLine				= CustomerOrderReturnLine	
							
							if (CustomerOrderReturn.InventoryCompanyRel.CostingMethod.StandardCosting)
								StandardCost = ItemLocation.StandardCost
							else
								if (CustomerOrderReturn.InventoryCompanyRel.CostingMethod.AverageCosting
								and ItemLocation.StockOnHandQuantity < 0)
									AverageCost  		= ItemLocation.DerivedItemAverageCost
									StockOnHandQuantity = ItemLocation.StockOnHandQuantity
								
						if (OrderNumber entered)
							invoke UpdateOrderFromReturn CustomerOrderLineRel
								invoked.PrmQuantity 	= Quantity
								invoked.PrmSellToStock	= SellToStock
								
						if (ItemIsCatchWeight)
							StockOnHandQuantity = ItemLocation.StockOnHandQuantity + InventoryCatchWeightQuantity
						else	
							StockOnHandQuantity = ItemLocation.StockOnHandQuantity + Quantity
						
						if(RestockCharge entered)
							invoke Create BillingInvoiceAddOnCharge
								fill in fields from this instance
								invoked.BillingInvoice               = PrmBillingInvoice
								invoked.BillingInvoiceLine  	     = CustomerOrderReturnLine
								invoked.Miscellaneous        		 = RestockCharge 
								invoked.LocalRestockChargeFromReturn = true
								
						if (InventoryDisposition.Ignore					
						and UnitCost not entered)
							make transition to Closed
						else
							make transition to Released
							
						invoke Release CustomerOrderReturnLineAddOnChargesRel
							invoked.PrmBillingInvoice = PrmBillingInvoice
							
			Released is a State
			
			Closed is a State
