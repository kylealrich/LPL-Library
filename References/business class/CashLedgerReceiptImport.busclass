CashLedgerReceiptImport is a BusinessClass
    owned by cb
    prefix is CRC
    classic name is CBRECLOAD

    Ontology
        symbolic key is CashLedgerReceiptImport
            classic set name is CRCSET1  
            classic name for CashLedgerReceiptImport.TransactionNumber is TRANS-NBR
            classic name for CashLedgerReceiptImport.BankTransactionCode is BANK-INST-CODE
            classic name for CashLedgerReceiptImport.SequenceNumber is SEQ-NBR

    Patterns
		implements InlineUserFields
			size is 1000	       
        implements StaticJava
        disable AuditIndex
		disable Auditing 
       	disable EffectiveDated
        enable explicit context override

    Persistent Fields
		CommentText	
        TransactionType					is AlphaUpper size 1
            classic name is TRANS-TYPE
            States
            	Manual       			value is blank
                WireTransfer            value is "1"
                CreditCard              value is "2"
                Lockbox                 value is "3"
                ElectronicFundsTransfer value is "4"
				Rebate       			value is "5"                    
        Status							is Numeric size 1
            classic name is REC-STATUS
            States
                Unreleased value is 0
                Released   value is 1
        Company							is a GeneralLedgerCompany
        TransactionDate					is Date
            classic name is TRANS-DATE
        PostDate						is Date
        Description

		CashProcessLevel	
			classic name is PROC-LEVEL            
        ACHPrenotification
            classic name is ACH-PRENOTE
        JournalBook
            classic name is JRNL-BOOK-NBR
            restricted
        CashLedgerStatement				is like CashLedgerStatement
            classic name is RECON-STMT-NBR
        CustomerName					is a SearchName
            classic name is CUST-NAME
        CustomerPostalAddress			is a PostalAddressV2	
        	holds pii
        BankEntity
            classic name is CUST-BANK
        BankAccountNumber
            classic name is CUST-ACCOUNT
        BankAccountValidationType
            classic name is VBANK-IDENT
        BankName											
        CrossBorderIdentifier                               
        SwiftID												
        	default label is "SWIFT/BIC"
        BankPostalAddress				is a PostalAddressV2	
        	holds pii
        ElectronicPaymentCode								
		FirstPartyReference				is Alpha 12			
		SecondPartyReference			is Alpha 12			
		TransactionData1                    is a TransactionData
            classic name is USER-FIELD1
		TransactionData2                    is a TransactionData
            classic name is USER-FIELD2
		TransactionData3                    is a TransactionData
            classic name is USER-FIELD3
		TransactionData4                    is a TransactionData
            classic name is USER-FIELD4
        ReceiptCompany					is a CompanyIsolated  
        	classic name is RCPT-COMPANY    

		CashCategory	
			classic name is PROD-TAX-CAT

        ReceiptAmount					is an InternationalAmount
        ReceiptAccount					is a FinanceCodeBlock
        	context of CashManagementGroup

            classic name for ReceiptAccount.AccountingUnit is RCPT-ACCT-UNIT
            classic name for ReceiptAccount.GeneralLedgerChartAccount is RCPT-ACCOUNT
            classic name for ReceiptAccount.Project is ACTIVITY
        TaxCode
            context of CashManagementGroup
        TaxableAmount					is an InternationalAmount
            classic name is TAXABLE-AMT
        TaxAmount						is an InternationalAmount
        GeneralLedgerSourceCode			is a GeneralLedgerEvent
        	context of CashManagementGroup
            classic name is SOURCE-CODE
            default label is "SourceCode"
        ContractRebateGroup
        PaymentNumber					is a PaymentNbr
            classic name is PAYMENT-NBR
		CatTaxEntity			      	is a ToAccountingEntity 
			context of CashManagementGroup 
        NumberOfFinancialInstruments	is Numeric 5		
		ApprovalCostCenter				is like AccountingUnit		
		ApprovalCategory				
			context of CashManagementGroup
		InterfaceAsPosted				is Boolean
		BypassCashFundUpdate			is Boolean 
		BankAccountType										
		GlobalBankAccountType								
		CashLedgerProcessGroup								
		AssignedTransactionNumber		is like TransactionNumber	
		CashAllocationCode									
		UnitsAmount						is an InternationalAmount	
			default label is "Units"

        ImportStatus					is Numeric 1
            States
                ReadyToImport			value is 0
                Error		   			value is 1
		ErrorMessage					is Alpha 150
		CashLedgerEFTInError			is a TransactionIDNumber
		CashReceiptDetailInError		is Boolean
		Reference
		
	Derived Fields
		PrenotificationErrorMessage			is a MessageField
			restricted
			"CannotRelease:PrenoteStatusIsNotAccepted"	
		DescriptionMessage					is a MessageField
			restricted
			"CreatedByCashLedgerReceiptInterface"		
		InterfaceAsPostedErrorMessage		is a MessageField
			restricted	
			"StatusMustBeReleasedToInterfaceAsPosted"
		InterfacePostingMessage is a LabelField 
			restricted
			"JournalCreatedByCashLedgerReceiptImport"
		PostDateErrorMessage				is a MessageField	
			restricted
			"PostDateMustEqualTransactionDateForEFTTransactions" 
		AllocationAndAccountErrorMessage	is a MessageField 
			restricted
			"CannotSpecifyBothCashAllocationCodeAndAccount"
		AccountOnlyTypeErrorMessage			is a MessageField 
			restricted
			"AccountOnlyCodeCannotBeUsedWithCreditCard,EFTOrWireTransferTypes"
		BypassWithoutPostedErrorMessage		is a MessageField	
			restricted
			"BypassCashFundUpdateRequiresSelectingInterfaceAsPosted"
			
	Transient Fields
		TransientFromCurrency		is a FromCurrency
			derive value from CashLedgerReceiptImport.CashCode.Currency

	Local Fields
		LocalRelTransactionIDNumber	is a TransactionIDNumber
		LocalFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
          
    Conditions
		RecordExists
    		restricted
    		when (CashLedgerReceiptImport exists)
    		
        IsUnreleased
        	restricted
            when (Status.Unreleased)
            
		IsRebatePaymentType
			restricted
			when (TransactionType = 5)

		HasRebates
			restricted
			when (ContractRebateGroup.ContractGroup entered)

		HasCashLedgerEFTInError
			restricted
			when (CashLedgerEFTInError entered)

		IsPartiallyImported
			when (HasCashLedgerCashReceiptImportInProcess	
			or    HasCashLedgerEFTImportInProcess)			



		HasCashLedgerCashReceiptImportInProcess	
			restricted
			when (CashLedgerCashReceiptInErrorRel.ImportInProcess = true)

		HasCashLedgerEFTImportInProcess	
			restricted
			when (CashLedgerEFTInErrorRel.ImportInProcess = true)

		AutoNumberingAllowedForTranNbr
			restricted
			when ((CashManagementGroup.AutoTranNumberByCompany
			and    Company.AutoTransactionNumbering)
			or    (CashManagementGroup.AutoTranNumberByCashCode
			and    CashLedgerReceiptImport.CashCode.AutoTransactionNumbering)
			or    (CashManagementGroup.AutoTranNumberByBankTransactionCode
			and    CashLedgerReceiptImport.BankTransactionCode.AutoTransactionNumbering)
			or    (CashManagementGroup.AutoTranNumberByCashCodeBankTranCode
			and    CashLedgerReceiptImport.BankTransactionCode.AutoTransactionNumbering
			and    CashLedgerReceiptImport.CashCode.AutoTransactionNumbering))

		AutoNumberingAllowedForRefNbr
			restricted
			when ((CashManagementGroup.AutoReferenceNumberByCompany
			and    Company.AutoTransactionNumbering)
			or    (CashManagementGroup.AutoReferenceNumberByCashCode
			and    CashLedgerReceiptImport.CashCode.AutoTransactionNumbering)
			or    (CashManagementGroup.AutoReferenceNumberByBankTransactionCode
			and    CashLedgerReceiptImport.BankTransactionCode.AutoTransactionNumbering)
			or    (CashManagementGroup.AutoReferenceNumberByCashCodeBankTranCode
			and    CashLedgerReceiptImport.BankTransactionCode.AutoTransactionNumbering
			and    CashLedgerReceiptImport.CashCode.AutoTransactionNumbering))
													
    Relations

		CashCategoryDetailRel
			one-to-one relation to CashCategoryDetail
			Field Mapping uses CategoryByEntity
				related.CashManagementGroup 				= CashManagementGroup
				related.CashCategory						= CashCategory
				related.CashProcessLevel					= CashProcessLevel
				related.RevenueAccount.ToAccountingEntity 	= CatTaxEntity

		CashLedgerEFTInErrorRel
			one-to-one relation to CashLedgerElectronicFundsTransferTransaction
			Field Mapping uses symbolic key
	           	related.CashManagementGroup													= CashManagementGroup	
                related.CashCode															= CashLedgerReceiptImport.CashCode
                related.CashLedgerElectronicFundsTransferTransaction.BankTransactionCode	= CashLedgerReceiptImport.BankTransactionCode
                related.CashLedgerElectronicFundsTransferTransaction.TransactionIDNumber	= CashLedgerEFTInError

		CashLedgerEFTRel
			one-to-one relation to CashLedgerElectronicFundsTransferTransaction
			Field Mapping uses symbolic key
	           	related.CashManagementGroup													= CashManagementGroup	
                related.CashCode															= CashLedgerReceiptImport.CashCode
                related.CashLedgerElectronicFundsTransferTransaction.BankTransactionCode	= CashLedgerReceiptImport.BankTransactionCode
                related.CashLedgerElectronicFundsTransferTransaction.TransactionIDNumber	= LocalRelTransactionIDNumber

		CashLedgerCashReceiptInErrorRel
			one-to-one relation to CashLedgerCashReceiptHeader
			Field Mapping uses symbolic key
	           	related.CashManagementGroup								= CashManagementGroup	
                related.CashCode										= CashLedgerReceiptImport.CashCode
                related.CashLedgerCashReceiptHeader.BankTransactionCode	= CashLedgerReceiptImport.BankTransactionCode
                related.CashLedgerCashReceiptHeader.TransactionNumber	= CashLedgerReceiptImport.AssignedTransactionNumber	











 		ReceiptImportByStatusRel
 			one-to-many relation to CashLedgerReceiptImport
 			Field Mapping uses ByStatus
 				related.CashManagementGroup									= CashManagementGroup
 			Instance Selection
            	where (related.CashLedgerReceiptImport.RunGroup				= CashLedgerReceiptImport.RunGroup
            	and    related.TransactionType								= TransactionType
            	and    related.CashLedgerReceiptImport.CashCode				= CashLedgerReceiptImport.CashCode
            	and    related.CashLedgerReceiptImport.BankTransactionCode	= CashLedgerReceiptImport.BankTransactionCode
            	and    related.Status										= Status)

		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "CB"

		CashLedgerReceiptImportRel
 			one-to-many relation to CashLedgerReceiptImport
 			Field Mapping uses symbolic key
 				related.CashManagementGroup								= CashManagementGroup
 			Instance Selection
            	where (related.CashLedgerReceiptImport.RunGroup				= CashLedgerReceiptImport.RunGroup
            	and	related.CashLedgerReceiptImport.CashCode				= CashLedgerReceiptImport.CashCode
            	and	related.CashLedgerReceiptImport.BankTransactionCode		= CashLedgerReceiptImport.BankTransactionCode
				and	related.CashLedgerReceiptImport.TransactionNumber		= CashLedgerReceiptImport.TransactionNumber)

	Sets
		ByTransactionType
			Sort Order
				CashManagementGroup
				CashLedgerReceiptImport.RunGroup
				TransactionType
				CashLedgerReceiptImport.CashCode
				CashLedgerReceiptImport.BankTransactionCode
				CashLedgerReceiptImport.TransactionNumber
				CashLedgerReceiptImport.SequenceNumber

		ByStatus
			Sort Order
				CashManagementGroup
				CashLedgerReceiptImport.RunGroup
				TransactionType
				CashLedgerReceiptImport.CashCode
				CashLedgerReceiptImport.BankTransactionCode
				Status
				CashLedgerReceiptImport.TransactionNumber
				CashLedgerReceiptImport.SequenceNumber
	
		ByCashLedgerReceiptInError
			indexed
			Sort Order
				CashManagementGroup
				CashLedgerReceiptImport.CashCode
				CashLedgerReceiptImport.BankTransactionCode
				CashLedgerReceiptImport.TransactionNumber
				CashLedgerReceiptImport.SequenceNumber
				CashLedgerReceiptImport.RunGroup
	
		ByCashLedgerTransferInError
			indexed
			Sort Order
				CashManagementGroup
				CashLedgerReceiptImport.CashCode
				CashLedgerReceiptImport.BankTransactionCode
				CashLedgerEFTInError
				CashLedgerReceiptImport.TransactionNumber
				CashLedgerReceiptImport.SequenceNumber
				CashLedgerReceiptImport.RunGroup
	

    Field Rules
        Company
            required

        TransactionDate
            required
            
		PostDate
			if (TransactionType.CreditCard
        	or  TransactionType.ElectronicFundsTransfer)
        		constraint (PostDate entered	
        		and         PostDate = TransactionDate)
        			"PostDateMustEqualTransactionDateForEFTTransactions"
        			


            
        ACHPrenotification
        	if (TransactionType.CreditCard
        	or  TransactionType.ElectronicFundsTransfer)
            	required

        CustomerName
        	if (TransactionType.CreditCard
        	or  TransactionType.ElectronicFundsTransfer)
            	required

		CashCategory
			if (CashCategory entered)				
				constraint (CatTaxEntity entered)
					"EntityRequiredWithCategory"				
				if (CashCategory changed)
					initialize ReceiptAccount 	

		ReceiptAmount 
            if     (UnitsAmount !entered
            and (!CashAllocationCode entered
            or   !CashAllocationCode.AllocationType.Amount))
                required
                    "ReceiptAmountOrUnitsAmountRequired"

		ReceiptAccount
			if (CatTaxEntity entered
			and CashCategory entered)
				constraint (CashCategoryDetailRel exist)
					"CashCategoryDetailDoesNotExistForEntity" 
				default to CashCategoryDetailRel.RevenueAccount
					default individual fields
        	if (CashAllocationCode entered)
        		constraint (ReceiptAccount.ToAccountingEntity not entered)
        			"CannotSpecifyBothCashAllocationCodeAndAccount"
			else
				required

		TaxCode
			if (CashCategory entered)
				default to CashCategoryDetailRel.TaxCode	

	Actions
		InterfaceCashReceipts is a Set Action
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmRunGroup					is AlphaUpper 30
					default label is "RunGroup"
				PrmMoveErrorsToNewRunGroup  is Boolean
					default label is "MoveErrorsToNewRunGroup"
				PrmErrorRunGroupPrefix		is AlphaUpper 15
					default label is "ErrorRunGroupPrefix"
				PrmCurrencyTable			is a CurrencyTable
					default label is "CurrencyTable"
				PrmJournalizeDistributions	is Boolean
					default label is "JournalizeReleasedDistributions"
				PrmAutoNumberingActionForRec		is Numeric 1
					States
						OverrideNumberWithAnAutoGeneratedNumber	value is 1
						BypassAutoTransactionNumbering			value is 2
					default label is "AutoTransactionNumberingActionForReceipt"
				PrmAutoNumberingActionForEFT		is Numeric 1
					States
						OverrideNumberWithAnAutoGeneratedNumber	value is 1
						BypassAutoTransactionNumbering	value is 2
					default label is "AutoTransactionNumberingActionForEFT"
												
			Parameter Rules
				PrmRunGroup
					required
						"RunGroupIsRequired"
				PrmAutoNumberingActionForRec
					if (PrmCashManagementGroup.AutoTranNumberForReceiptForm)
						required
							"AutoNumberingSelectionRequiredForReceipt"
				PrmAutoNumberingActionForEFT
					if (PrmCashManagementGroup.AutoReferenceNumberForEFTForm)
						required
							"AutoNumberingSelectionRequiredForEFT"	
				PrmJournalizeDistributions													
					LocalFinanceEnterpriseGroup	= PrmCashManagementGroup
					constraint (GeneralLedgerSystemCodeRel.EncumbranceOption.NotUsed)
						"JournalizeDistributionsNotAllowedWhenBudgetingSetToTrackOrTrackAndEdit"
																			
			Local Fields
				ErrorOccurred							is Boolean
				ReceiptError							is Boolean
				DistributionError						is Boolean
				LocalErrorMessage						is Alpha 150
				LocalCompletionMessage					is Alpha 150
				LocalErrorRunGroup						is AlphaUpper 30
				LocalErrorSequence						is Numeric 12
				LocalCashTransactionImportResultView 	is a CashTransactionImportResult view				
				PostingDateError						is Boolean
				LocalCashLedgerCashReceiptHeader		is a CashLedgerCashReceiptHeader view
				LocalCashLedgerCashReceiptDetail		is a CashLedgerCashReceiptDetail view
				LocalAppliedBaseAmount					is a DocumentCurrencyTotals
				LocalReceiptHeaderCreated				is Boolean
				LocalElectronicFundsTransfer			is a CashLedgerElectronicFundsTransferTransaction view
				LocalEFTTransaction						is Boolean
				LocalTransactionIDNumber				is a TransactionIDNumber
				CurrentTransactionIDNumber				is a TransactionIDNumber
				ErrorUpdate								is Boolean
				LocalInstanceCount						is Numeric 10
				LocalReleaseReceipt						is Boolean
				LocalPostDate							is Date
				LocalInterfaceAsPosted					is Boolean
				LocalBypassCashFundUpdate				is Boolean					
				GLTJournalizeGroup						is like JournalizeGroup
				CommitNow								is Boolean
				LocalInterfacedReceiptAmount			is an InternationalAmount	
				LocalInterfacedReceiptCount				is Numeric 7				
				LocalInterfacedElectronicFundsAmount	is an InternationalAmount	
				LocalInterfacedElectronicFundsCount		is Numeric 7				
				LocalAllocationCodeProcessing 			is Boolean					
				
			Instance Selection
				where (CashManagementGroup				= PrmCashManagementGroup
				and    CashLedgerReceiptImport.RunGroup	= PrmRunGroup)
			
			Sort Order
				CashManagementGroup
				CashLedgerReceiptImport.RunGroup
				TransactionType
				CashLedgerReceiptImport.CashCode
				Company
				CashLedgerReceiptImport.BankTransactionCode
				CashLedgerReceiptImport.TransactionNumber
				CashLedgerReceiptImport.SequenceNumber

  			Accumulators
				NetPaymentAmount
				NumberOfDistributions
				NumberOfIssuedReceipts
				NumberOfReconciledReceipts
				CurrentReconciledAmount
				UnreconciledAmount
				
			Action Rules
				Empty Set Rules
					LocalFinanceEnterpriseGroup = PrmCashManagementGroup 
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
                    or  GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)	
						invoke ProcessInterfaceBatchEdits BudgetEditBatch 
							invoked.PrmFinanceEnterpriseGroup	= PrmCashManagementGroup
							invoked.PrmBusinessClassName		= "CashLedgerCashReceiptHeader"

				Set Rules
					Exit Rules
						LocalFinanceEnterpriseGroup = PrmCashManagementGroup 
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
						or  GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)	
							invoke ProcessInterfaceBatchEdits BudgetEditBatch 
								invoked.PrmFinanceEnterpriseGroup	= PrmCashManagementGroup
								invoked.PrmBusinessClassName		= "CashLedgerCashReceiptHeader"
						if (ErrorOccurred)
							LocalCompletionMessage = PrmCashManagementGroup.FinanceEnterpriseGroup.InterfaceErrorsMovedMessage
							LocalCompletionMessage += (" " + LocalErrorRunGroup)
						else		
							LocalCompletionMessage = PrmCashManagementGroup.FinanceEnterpriseGroup.InterfaceCompleteMessage
				
				CashManagementGroup Set Rules
					Entrance Rules
						ErrorOccurred				= false
						if (PrmJournalizeDistributions)
							LocalFinanceEnterpriseGroup = PrmCashManagementGroup
							invoke IncrementLastJournalizeGroup GeneralLedgerSystemCodeRel
							GLTJournalizeGroup	= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
							CommitNow			= true

						invoke Create CashTransactionImportResult
							assign result to LocalCashTransactionImportResultView
							invoked.CashManagementGroup	= CashManagementGroup
							invoked.RunTime				= current timestamp
							invoked.RunGroup			= PrmRunGroup
							invoked.RunType				= 2 
							invoked.JournalizeGroup		= GLTJournalizeGroup

					Exit Rules
						if (PrmJournalizeDistributions)
							invoke JournalizeDistributionsForGroup CashLedgerGLDistribution in background
								invoked.PrmCashManagementGroup	= PrmCashManagementGroup
								invoked.PrmJournalizeGroup		= GLTJournalizeGroup
								invoked.PrmDescription			= InterfacePostingMessage
						invoke Update LocalCashTransactionImportResultView.CashTransactionImportResult
							if (ErrorOccurred)
								invoked.Status 		  = 2
								invoked.ErrorRunGroup = LocalErrorRunGroup
							else
								invoked.Status        = 1
							if (LocalEFTTransaction)	
								invoked.InterfacedElectronicFundsAmount	= LocalInterfacedElectronicFundsAmount	
								invoked.InterfacedElectronicFundsCount	= LocalInterfacedElectronicFundsCount	
							else	
								invoked.InterfacedReceiptAmount			= LocalInterfacedReceiptAmount			
								invoked.InterfacedReceiptCount			= LocalInterfacedReceiptCount			
				
				CashLedgerReceiptImport.CashCode Set Rules
					Entrance Rules

					Exit Rules
							
				Company Set Rules
					Entrance Rules

					Exit Rules

				CashLedgerReceiptImport.BankTransactionCode Set Rules
					Entrance Rules
						initialize LocalInstanceCount
						initialize CurrentTransactionIDNumber
					Exit Rules
						if (CurrentReconciledAmount	entered
						or  UnreconciledAmount		entered)
							invoke Create CashCodeConsolidatedUpdate
								invoked.CashManagementGroup								= PrmCashManagementGroup
								invoked.CashCode										= CashLedgerReceiptImport.CashCode
								invoked.CashCodeConsolidatedUpdate.Company				= Company
								invoked.CashCodeConsolidatedUpdate.BankTransactionCode	= CashLedgerReceiptImport.BankTransactionCode
								invoked.IssuedAmount									= (CurrentReconciledAmount + UnreconciledAmount)
								invoked.IssuedCount										= NumberOfIssuedReceipts
								invoked.UnreconciledAmount								= UnreconciledAmount
								invoked.ReconciledAmount								= CurrentReconciledAmount
								invoked.ReconciledCount									= NumberOfReconciledReceipts

				CashLedgerReceiptImport.TransactionNumber Set Rules
					Entrance Rules
						initialize LocalErrorMessage
						initialize LocalTransactionIDNumber
						initialize LocalAppliedBaseAmount
						initialize LocalElectronicFundsTransfer
						initialize LocalCashLedgerCashReceiptHeader
						NumberOfDistributions		= 1
						LocalEFTTransaction			= false
						LocalReceiptHeaderCreated	= false
						ReceiptError				= false
						DistributionError			= false
						LocalReleaseReceipt			= false
						LocalPostDate				= PostDate
						LocalInterfaceAsPosted		= InterfaceAsPosted
						LocalBypassCashFundUpdate	= BypassCashFundUpdate	
						
					Exit Rules
						if (!ReceiptError)
							if (LocalEFTTransaction)
								invoke Update LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction
									if (NetPaymentAmount < 0)	
										invoked.ReceiptAmount			= (NetPaymentAmount * -1)	
									else
										invoked.ReceiptAmount			= NetPaymentAmount	
									invoked.LastDistributionSequence	= (NumberOfDistributions -1)
									if (!DistributionError)
										invoked.ImportInProcess			= false
										invoked.OriginatingImportRun	= LocalCashTransactionImportResultView.CashTransactionImportResult
								if (LocalReleaseReceipt
								and !DistributionError)
									invoke ReleaseFromImport LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction
										resume on error
											DistributionError	= true
										invoked.PrmInterfaceAsPosted 	= LocalInterfaceAsPosted
										invoked.PrmJournalizeGroup	 	= GLTJournalizeGroup	
								LocalInterfacedElectronicFundsCount		+= 1				
								LocalInterfacedElectronicFundsAmount	+= NetPaymentAmount	
							else
								invoke Update LocalCashLedgerCashReceiptHeader.CashLedgerCashReceiptHeader
									invoked.DepositAmount				= NetPaymentAmount
                           			invoked.BypassNegativeRateEdit      = true
									if (!LocalAllocationCodeProcessing )	
										invoked.AppliedBankAmount			= NetPaymentAmount
										invoked.AppliedBaseAmount			= LocalAppliedBaseAmount
										invoked.LastDistributionSequence	= (NumberOfDistributions -1)

									if (!DistributionError)
										invoked.ImportInProcess			= false
										invoked.OriginatingImportRun	= LocalCashTransactionImportResultView.CashTransactionImportResult
								if (LocalReleaseReceipt
								and !DistributionError)
									invoke ReleaseFromImport LocalCashLedgerCashReceiptHeader.CashLedgerCashReceiptHeader
										resume on error
										invoked.PrmTransactionIDNumber	= LocalTransactionIDNumber
										invoked.PrmInterfaceAsPosted 	= LocalInterfaceAsPosted
										invoked.PrmJournalizeGroup	 	= GLTJournalizeGroup	
										invoked.PrmBypassCashFundUpdate	= LocalBypassCashFundUpdate	
									if (CashLedgerReceiptImport.BankTransactionCode.AutomaticReconciliation)
										CurrentReconciledAmount		+= NetPaymentAmount
										NumberOfIssuedReceipts		+= 1
										NumberOfReconciledReceipts	+= 1
									else
										UnreconciledAmount			+= NetPaymentAmount
										NumberOfIssuedReceipts		+= 1
								LocalInterfacedReceiptCount			+= 1				
								LocalInterfacedReceiptAmount		+= NetPaymentAmount	
						if (LocalEFTTransaction
						and DistributionError
						and PrmJournalizeDistributions)
							invoke UpdateJournalizeGroup LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction
								invoked.PrmJournalizeGroup	= blank
							
				Instance Rules
					if (CommitNow)
						commit transaction
						CommitNow = false

					if (ImportStatus.Error)
						ErrorOccurred	  = true
						DistributionError = true
					else						
						if (CashAllocationCode entered 			
						and CashAllocationCode.AllocationType.AccountOnly)	
							if (TransactionType.CreditCard
							or  TransactionType.ElectronicFundsTransfer
							or  TransactionType.WireTransfer)
								ErrorOccurred			= true
								ReceiptError			= true
								LocalErrorMessage		= AccountOnlyTypeErrorMessage	
															
						if (BypassCashFundUpdate	
						and !InterfaceAsPosted)
							ErrorOccurred		= true
							ReceiptError		= true
							LocalErrorMessage	= BypassWithoutPostedErrorMessage
															
						if (ReceiptError)
							if (PrmMoveErrorsToNewRunGroup)
								if (!LocalErrorRunGroup entered)
									increment PrmCashManagementGroup.LastErrorRunGroupNumber
									LocalErrorRunGroup = PrmErrorRunGroupPrefix + "ERRORS_" + PrmCashManagementGroup.LastErrorRunGroupNumber
							invoke UpdateError ReadyToImport this instance 
								invoked.PrmErrorMessage			= LocalErrorMessage
								if (PrmMoveErrorsToNewRunGroup)
									invoked.PrmErrorRunGroup	= LocalErrorRunGroup
						else
								
							if (TransactionType.CreditCard
							or  TransactionType.ElectronicFundsTransfer)
								LocalEFTTransaction	= true
							else
								LocalEFTTransaction	= false
							if (LocalEFTTransaction)






								if (CashLedgerEFTInError entered)
									LocalElectronicFundsTransfer	= CashLedgerEFTInErrorRel.CashLedgerElectronicFundsTransferTransaction
									LocalTransactionIDNumber		= CashLedgerEFTInError
									NumberOfDistributions			+= CashLedgerEFTInErrorRel.LastDistributionSequence
									NetPaymentAmount				+= CashLedgerEFTInErrorRel.ReceiptAmount
									if (Status.Released)
										LocalReleaseReceipt	= true
										if (PrmJournalizeDistributions)
											invoke UpdateJournalizeGroup CashLedgerEFTInErrorRel.CashLedgerElectronicFundsTransferTransaction
												invoked.PrmJournalizeGroup	= GLTJournalizeGroup
			
								if (!CashLedgerEFTInError		entered
								and LocalTransactionIDNumber 	!entered)
									if (Status.Released)
										if (!ACHPrenotification.Accepted)
											ReceiptError		= true
											LocalErrorMessage	= PrenotificationErrorMessage
									if (Status.Unreleased
									and InterfaceAsPosted)
										ErrorOccurred			= true
										ReceiptError			= true
										LocalErrorMessage		= InterfaceAsPostedErrorMessage			
									if (PostDate entered	
									and PostDate not = TransactionDate)
										ErrorOccurred			= true
										ReceiptError			= true
										LocalErrorMessage		= PostDateErrorMessage	
									if (!ReceiptError)
										invoke Create CashLedgerElectronicFundsTransferTransaction
											assign result to LocalElectronicFundsTransfer
											resume on error
												ErrorOccurred		= true
												ReceiptError		= true
												LocalErrorMessage	= error message
											fill in fields from this instance
												except invoked.Status
											invoked.CashManagementGroup						= CashManagementGroup
											invoked.CashCode								= CashLedgerReceiptImport.CashCode						
											invoked.CashLedgerElectronicFundsTransferTransaction.BankTransactionCode	= CashLedgerReceiptImport.BankTransactionCode

											invoked.Company.OrigCompany						= Company	
											if (PrmAutoNumberingActionForEFT.OverrideNumberWithAnAutoGeneratedNumber
											and AutoNumberingAllowedForRefNbr)
												invoked.Reference							= blank
											else	
												invoked.Reference							= CashLedgerReceiptImport.TransactionNumber
											if (Description not entered)
												invoked.Description							= DescriptionMessage
											else
												invoked.Description							= Description	
											invoked.OriginatingImportRun					= LocalCashTransactionImportResultView.CashTransactionImportResult
											invoked.ImportInProcess							= true						
											invoked.CurrencyTable							= PrmCurrencyTable
											invoked.AutoNumberingAction						= PrmAutoNumberingActionForEFT
											
										if (!ReceiptError)
											LocalTransactionIDNumber	= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.TransactionIDNumber

											if (Status.Released)
												LocalReleaseReceipt	= true
			
								if (ReceiptError)
									if (PrmMoveErrorsToNewRunGroup)
										if (!LocalErrorRunGroup entered)
											increment PrmCashManagementGroup.LastErrorRunGroupNumber
											LocalErrorRunGroup = PrmErrorRunGroupPrefix + "ERRORS_" + PrmCashManagementGroup.LastErrorRunGroupNumber
									invoke UpdateError ReadyToImport this instance 
										invoked.PrmErrorMessage			= LocalErrorMessage
										if (PrmMoveErrorsToNewRunGroup)
											invoked.PrmErrorRunGroup	= LocalErrorRunGroup
								else
									initialize LocalErrorMessage
									LocalRelTransactionIDNumber = LocalTransactionIDNumber
									invoke Create CashLedgerGLDistribution
										resume on error
											ErrorOccurred		= true
											DistributionError	= true
											LocalErrorMessage	= error message
										fill in fields from this instance
										invoked.CashCode										= CashLedgerReceiptImport.CashCode
										invoked.CashLedgerSourceRecord							= "CFT"
										invoked.CashLedgerGLDistribution.BankTransactionCode	= CashLedgerReceiptImport.BankTransactionCode
										invoked.CashLedgerGLDistribution.TransactionIDNumber	= LocalTransactionIDNumber
										invoked.CashLedgerGLDistribution.SequenceNumber			= NumberOfDistributions
										invoked.Company.OrigCompany								= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.Company.OrigCompany	
										invoked.CompanyAccountingEntity							= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.Company.OrigCompany.AccountingEntity
										invoked.Reference										= Reference	//"CashReceiptsLoad"
										if (Description not entered)
											invoked.Description									= DescriptionMessage
										else	
											invoked.Description									= Description

										invoked.TransactionNumber								= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.Reference	
										invoked.LocalControlDocumentNumber						= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.Reference	
										invoked.LocalDocumentNumber								= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.Reference	
										invoked.LocalExchangeDate								= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.TransactionDate
										if (LocalPostDate	!entered)
											invoked.LocalPostingDate							= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.TransactionDate
											invoked.PostDate									= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.TransactionDate
										else
											invoked.LocalPostingDate							= LocalPostDate
											invoked.PostDate									= LocalPostDate
										if (LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.GeneralLedgerSourceCode	entered
										and LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.GeneralLedgerSourceCode	!= "CB")
											invoked.LocalGeneralLedgerEvent						= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.GeneralLedgerSourceCode
											invoked.GeneralLedgerSourceCode						= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.GeneralLedgerSourceCode
										else
											invoked.LocalGeneralLedgerEvent						= "CL"
											invoked.GeneralLedgerSourceCode						= "CL"
										invoked.RecordType										= "E"
										invoked.LocalKeepRateOnly								= false
										invoked.GLFinanceCodeBlock								= ReceiptAccount
										invoked.GLTransactionAmount								= ReceiptAmount	

										invoked.TaxableBankAmount								= TaxableAmount 
										invoked.Status											= Status.Unreleased
										invoked.TaxAccountingEntity								= CatTaxEntity
										invoked.CreateFromBatchType								= 4	
										invoked.BypassBudgetEditing							 	= true
										invoked.LocalHeaderUniqueID								= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.UniqueID
										invoked.LocalHeaderBusinessObjectRef					= reference to LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction
										invoked.LocalCurrencyTable								= LocalElectronicFundsTransfer.CashLedgerElectronicFundsTransferTransaction.CurrencyTable
										if (Status.Released
										and PrmJournalizeDistributions)
											invoked.GLTJournalizeGroup							= GLTJournalizeGroup
										invoked.TransientUnitsAmount							= UnitsAmount	
										
									if (LocalErrorMessage entered)
										if (PrmMoveErrorsToNewRunGroup)
											if (!LocalErrorRunGroup entered)
												increment PrmCashManagementGroup.LastErrorRunGroupNumber
												LocalErrorRunGroup = PrmErrorRunGroupPrefix + "ERRORS_" + PrmCashManagementGroup.LastErrorRunGroupNumber
			
										CashLedgerEFTInError	= LocalTransactionIDNumber
										invoke UpdateError ReadyToImport this instance 
											invoked.PrmErrorMessage			= LocalErrorMessage
											if (PrmMoveErrorsToNewRunGroup)
												invoked.PrmErrorRunGroup	= LocalErrorRunGroup
									else
										NumberOfDistributions	+= 1
										NetPaymentAmount		+= ReceiptAmount	
		
										invoke Purge ReadyToImport this instance 
							else
								if (CashReceiptDetailInError
								and !LocalReceiptHeaderCreated)
									LocalReceiptHeaderCreated			= true
									LocalCashLedgerCashReceiptHeader	= CashLedgerCashReceiptInErrorRel.CashLedgerCashReceiptHeader
									NetPaymentAmount					+= CashLedgerCashReceiptInErrorRel.DepositAmount
									NumberOfDistributions				+= CashLedgerCashReceiptInErrorRel.LastDistributionSequence
									LocalAppliedBaseAmount				= CashLedgerCashReceiptInErrorRel.AppliedBaseAmount			
									if (Status.Released)
										LocalReleaseReceipt	= true
		
								if (!CashReceiptDetailInError
								and !LocalReceiptHeaderCreated)
									if (Status.Unreleased
									and InterfaceAsPosted)
										ErrorOccurred			= true
										ReceiptError			= true
										LocalErrorMessage		= InterfaceAsPostedErrorMessage
									if (!ReceiptError)		
										invoke Create CashLedgerCashReceiptHeader
											assign result to LocalCashLedgerCashReceiptHeader
											resume on error
												ErrorOccurred		= true
												ReceiptError		= true
												LocalErrorMessage	= error message
											fill in fields from this instance
												except invoked.Status
												except invoked.Description
											invoked.CashManagementGroup								= CashManagementGroup
											invoked.CashCode										= CashLedgerReceiptImport.CashCode						
											invoked.CashLedgerCashReceiptHeader.BankTransactionCode	= CashLedgerReceiptImport.BankTransactionCode
											if (PrmAutoNumberingActionForRec.OverrideNumberWithAnAutoGeneratedNumber
											and AutoNumberingAllowedForTranNbr)
												invoked.CashLedgerCashReceiptHeader.TransactionNumber	= blank
											else	
												invoked.CashLedgerCashReceiptHeader.TransactionNumber	= CashLedgerReceiptImport.TransactionNumber
											invoked.Company.OrigCompany								= Company	
											if (Description not entered)
												invoked.Description									= DescriptionMessage
											else
												invoked.Description									= Description	
											invoked.DepositDate										= TransactionDate
											invoked.CurrencyTable									= PrmCurrencyTable
											invoked.OriginatingImportRun							= LocalCashTransactionImportResultView.CashTransactionImportResult
											invoked.ImportInProcess									= true						
											invoked.AutoNumberingAction								= PrmAutoNumberingActionForRec
											
										if (!ReceiptError)
											LocalReceiptHeaderCreated	= true
											if (Status.Released)
												LocalReleaseReceipt	= true
												if (LocalInstanceCount !entered)
													for each distinct CashLedgerReceiptImport.TransactionNumber in ReceiptImportByStatusRel
														LocalInstanceCount	+= 1
													increment CashLedgerReceiptImport.BankTransactionCode.TransactionIDNumber by LocalInstanceCount
													CurrentTransactionIDNumber	= (CashLedgerReceiptImport.BankTransactionCode.TransactionIDNumber - LocalInstanceCount + 1)
													commit transaction
												LocalTransactionIDNumber	= CurrentTransactionIDNumber 
												CurrentTransactionIDNumber	+= 1
									
								if (ReceiptError)
									if (PrmMoveErrorsToNewRunGroup)
										if (!LocalErrorRunGroup entered)
											increment PrmCashManagementGroup.LastErrorRunGroupNumber
											LocalErrorRunGroup = PrmErrorRunGroupPrefix + "ERRORS_" + PrmCashManagementGroup.LastErrorRunGroupNumber
									invoke UpdateError ReadyToImport this instance 
										invoked.PrmErrorMessage			= LocalErrorMessage
										if (PrmMoveErrorsToNewRunGroup)
											invoked.PrmErrorRunGroup	= LocalErrorRunGroup
								else
									initialize LocalErrorMessage
									
									if (CashAllocationCode entered)				
										if (ReceiptAccount.ToAccountingEntity entered)
											ErrorOccurred		= true
											DistributionError	= true
											LocalErrorMessage 	= AllocationAndAccountErrorMessage
										else
											LocalAllocationCodeProcessing = true
											invoke ApplyAdditionalCashAllocations LocalCashLedgerCashReceiptHeader.CashLedgerCashReceiptHeader
												resume on error
													ErrorOccurred		= true
													DistributionError	= true
													LocalErrorMessage	= error message
												invoked.PrmCashAllocationCode 			= CashAllocationCode
												invoked.PrmCashAllocationAmount 		= ReceiptAmount
												invoked.PrmCashLedgerReceiptImport		= reference to this instance

											if (LocalErrorMessage !entered)
												if (CashAllocationCode.AllocationType.Percent)
													NetPaymentAmount		+= ReceiptAmount
												else
													if (CashAllocationCode.AllocationType.AccountOnly)
														NetPaymentAmount	+= (ReceiptAmount * instance count of CashAllocationCode.CashAllocationCodeDetail set)
													else
														NetPaymentAmount	+= CashAllocationCode.ControlTotal
									else
										invoke Create CashLedgerCashReceiptDetail
											assign result to LocalCashLedgerCashReceiptDetail
											resume on error
												ErrorOccurred		= true
												DistributionError	= true
												LocalErrorMessage	= error message
											fill in fields from this instance
												except invoked.Description
											invoked.CashCode										= CashLedgerReceiptImport.CashCode
											invoked.CashLedgerCashReceiptHeader.BankTransactionCode	= CashLedgerReceiptImport.BankTransactionCode
											invoked.CashLedgerCashReceiptHeader.TransactionNumber	= LocalCashLedgerCashReceiptHeader.CashLedgerCashReceiptHeader.CashLedgerCashReceiptHeader.TransactionNumber
											invoked.CashLedgerCashReceiptDetail						= NumberOfDistributions
											invoked.ReceiptBankAmount								= ReceiptAmount
											invoked.TaxableData.CurrencyAmount						= TaxableAmount
											invoked.TaxAmountData.CurrencyAmount					= TaxAmount
											invoked.Reference										= Reference
											if (Description not entered)
												invoked.Description									= DescriptionMessage
											else
												invoked.Description									= Description	
											invoked.CreatedFromImport								= true
											invoked.UnitsAmount										= UnitsAmount
			
									if (LocalErrorMessage entered)
										if (PrmMoveErrorsToNewRunGroup)
											if (!LocalErrorRunGroup entered)
												increment PrmCashManagementGroup.LastErrorRunGroupNumber
												LocalErrorRunGroup = PrmErrorRunGroupPrefix + "ERRORS_" + PrmCashManagementGroup.LastErrorRunGroupNumber
										CashReceiptDetailInError	= true
										AssignedTransactionNumber 	= LocalCashLedgerCashReceiptHeader.CashLedgerCashReceiptHeader.CashLedgerCashReceiptHeader.TransactionNumber	
										invoke UpdateError ReadyToImport this instance 
											invoked.PrmErrorMessage			= LocalErrorMessage
											if (PrmMoveErrorsToNewRunGroup)
												invoked.PrmErrorRunGroup	= LocalErrorRunGroup
									else
										if (!LocalAllocationCodeProcessing)
											NumberOfDistributions	+= 1
											NetPaymentAmount		+= ReceiptAmount
		
										LocalAppliedBaseAmount.FunctionalTotal		+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.FunctionalAmount.EnteredCurrencyAmount
										LocalAppliedBaseAmount.AlternateTotal		+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.AlternateAmount.EnteredCurrencyAmount
										LocalAppliedBaseAmount.AlternateTotal2		+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.AlternateAmount2.EnteredCurrencyAmount
										LocalAppliedBaseAmount.AlternateTotal3		+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.AlternateAmount3.EnteredCurrencyAmount
										LocalAppliedBaseAmount.ToFunctionalTotal	+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount
										LocalAppliedBaseAmount.ToAlternateTotal		+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.ToAlternateAmount.EnteredCurrencyAmount
										LocalAppliedBaseAmount.ToAlternateTotal2	+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount
										LocalAppliedBaseAmount.ToAlternateTotal3	+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount
										LocalAppliedBaseAmount.ProjectTotal			+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.ProjectAmount.EnteredCurrencyAmount
										LocalAppliedBaseAmount.ReportTotal1			+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.ReportAmount1.EnteredCurrencyAmount
										LocalAppliedBaseAmount.ReportTotal2			+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.ReportAmount2.EnteredCurrencyAmount
										LocalAppliedBaseAmount.ReportTotal3			+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.ReportAmount3.EnteredCurrencyAmount
										LocalAppliedBaseAmount.ReportTotal4			+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.ReportAmount4.EnteredCurrencyAmount
										LocalAppliedBaseAmount.ReportTotal5			+= LocalCashLedgerCashReceiptDetail.CashLedgerCashReceiptDetail.ReceiptBaseAmount.ReportAmount5.EnteredCurrencyAmount
		
										invoke Purge ReadyToImport this instance 

 		DeletePartiallyImportedTransaction is an Instance Action	
		 	valid when (IsPartiallyImported)	
			Action Rules
				if (CashReceiptDetailInError entered)
					invoke Delete CashLedgerCashReceiptInErrorRel
				else	
				if (CashLedgerEFTInError entered)
					invoke Delete CashLedgerEFTInErrorRel
    	









    	
		DeleteAllRelatedRecords is a Delete Action
			default label is untranslatable
			restricted

		DeleteAllTransactionsForRunGroup is a Set Action
			confirmation required
		
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmRunGroup				  	is AlphaUpper 30
					default label is "RunGroup"

			Parameter Rules

			Instance Selection
				where (CashManagementGroup				= PrmCashManagementGroup
				and    CashLedgerReceiptImport.RunGroup	= PrmRunGroup)
				
			Action Rules
				Instance Rules
					if (IsPartiallyImported)
						invoke DeletePartiallyImportedTransaction	





				    else	
				    	invoke RunGroupDelete

		RunGroupDelete is a Delete Action
			default label is untranslatable
			restricted
														
	StateCycles
		CashLedgerReceiptImportLifeCycle is a StateCycle
			state field is ImportStatus
			
			ReadyToImport	is a State
		 		Create is a Create Action

		 		CreateFromCopy is a Create Action
					default label is untranslatable
					restricted
					bypass field rules

		 		Update is an Update Action

		 		Delete is a Delete Action
					Entrance Rules



				UpdateError is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						PrmErrorMessage		is Alpha 150
							default label is "ErrorMessage"
						PrmErrorRunGroup    is AlphaUpper 30
							default label is "ErrorRunGroup"
					Action Rules
						if (PrmErrorRunGroup entered)
							CashLedgerReceiptImport.RunGroup 	  = PrmErrorRunGroup
						ErrorMessage 		= PrmErrorMessage
						make transition to Error

				Purge is a Purge Action
					restricted
			
			Error is a State
		 		Update is an Update Action
					Action Rules
						if (instance count of CashLedgerReceiptImportRel = 1)
							initialize ErrorMessage
							make transition to ReadyToImport
    						
		 		ResetErrorMessage is an Instance Action
					Action Rules
						if (CashLedgerEFTInError	!entered
						and AssignedTransactionNumber	!entered
              			and instance count of CashLedgerReceiptImportRel > 1)
							confirmation required
								"ResettingErrorMessageOnNonInterfacedRecordWillResetAllErrorsForTransactionNumber;Continue?"
									for each CashLedgerReceiptImportRel
										if (each.ImportStatus.Error)
											invoke Error.InvokedResetErrorMessage each
						else
							initialize ErrorMessage
							make transition to ReadyToImport

				InvokedResetErrorMessage is an Instance Action
					restricted
					default label is untranslatable
					Action Rules
			 			initialize ErrorMessage
						make transition to ReadyToImport

				ResetErrorsByRunGroup is a Set Action		
					Parameters
						PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
							default label is "FinanceEnterpriseGroup"
						PrmRunGroup						is AlphaUpper 30
							default label is "RunGroup"

					Parameter Rules
						PrmRunGroup
							required
								"RunGroupIsRequired"

					Instance Selection
						where (CashManagementGroup.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
						and    CashLedgerReceiptImport.RunGroup				= PrmRunGroup
						and    ErrorMessage entered)

					Action Rules
						Instance Rules
							invoke InvokedResetErrorMessage

		 		Delete is a Delete Action
		 			valid when (!IsPartiallyImported)
						
