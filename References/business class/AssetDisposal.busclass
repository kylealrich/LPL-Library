AssetDisposal is a BusinessClass
	owned by am
	prefix is ASD
	classic name is AMASSETDSP

	Ontology
		symbolic key is AssetDisposal
			classic set name is ASDSET1

	Patterns
		implements ContextualParent
		implements StaticJava
		disable AuditIndex

	Persistent Fields

		DisposalStatus
			classic name is DSP-STATUS
		DisposalDate                is Date
			classic name is DSP-DATE
		DisposalMethod
			classic name is DSP-METHOD
		DisposalProperty
			classic name is DSP-PROPERTY
		DisposalQuantity			is a TotalItemQuantity
			classic name is DSP-QUANTITY
		AssetLease
		AssetGroup
		FullOrPartial
			classic name is FULL-PARTIAL
		Proceeds                    is an InternationalAmount
	 		precision is Asset.TransactionNumberOfDecimals
		ProceedsCurrency            is a Currency
			classic name is PROCEEDS-CURR
		CostOfSale                  is an InternationalAmount
			precision is Asset.TransactionNumberOfDecimals
			classic name is COST-SALE
		CostOfSaleCurrency          is a Currency
			classic name is COST-SALE-CURR
		TotalItemQuantity
			classic name is ITEM-TOT-QTY
		ItemTotalBaseCost           is an InternationalAmount
			classic name is IT-TOT-CSTBASE
		ItemTotalTransactionCost    is an InternationalAmount
			classic name is IT-TOT-CSTTRAN
		ItemTotalBaseTax            is an InternationalAmount
			classic name is IT-TOT-TAXBASE
		ItemTotalTransactionTax     is an InternationalAmount
			classic name is IT-TOT-TAXTRAN
		BaseNumberOfDecimals
			classic name is BASE-ND
		TransactionNumberOfDecimals is a CurrencyNumberOfDecimals
			classic name is TRAN-ND
		Currency
			classic name is CURRENCY-CODE
		LastAssetItemPurchaseDate   is Date
			classic name is ITEM-LAST-DATE
		LastSequenceNumber          is a Sequence
			classic name is ITEM-LAST-SEQ
			disable Auditing
		CreationDate                is TimeStamp
		CreatedBy                   is an Operator 
			holds pii
			classic name is CREATOR-ID
		DisposalAsset				is an Asset
			delete ignored
		PostingDate					is Date
		BookDisposal				is Boolean	
		AssetDisposalCode	
		Voluntary					is Numeric 1 
			States
				Yes   value is 0
				No    value is 1
	Context Fields
		DisposalDateRange						is a DateRange

	Derived Fields

		DerivedCreateDate 					is a DerivedField
			type is Date
			restricted
			return DisposalDate

   		ContextMessageEntityType 			is a StringField
			type is Alpha 30
			restricted
			"InforAssetDisposal"

		ContextCompanyAsset					is a MessageField
			"Company_<Asset.Company>_Asset<Asset>"

		FullDisposalMessage					is a MessageField
			restricted
			"Full_Disposal"

		PartialDisposalMessage				is a MessageField
		 	restricted
		 	"Partial_Disposal"

		ConditionalDisposalAssetDisplay		is a DerivedField
			type is Alpha 30
			if (FullDisposal)
				return FullDisposalMessage
			else
				return PartialDisposalMessage

		ContextDisposedAsset				is a MessageField
			"DisposedAsset_<DisposalAsset>"

		ContextDisposalAsset				is a MessageField
			restricted
			"Asset<DisposalAsset>"

		ContextMethodDate					is a MessageField
			"<DisposalMethod>_<DisposalDate>"

		ContextDisposal						is a MessageField
			restricted
			"Disposal<AssetDisposal>"

		ContextUser							is a MessageField
			"User<CreatedBy>"

		ContextMessageText 					is a MessageField
			restricted
			"Asset<Asset>AssetDisposal<AssetDisposal>"

		DisposalCount						is a DerivedField
			type is Numeric 10
			restricted
			return (instance count of AssetRel8)

		TotalDisposalQuantity				is a DerivedField
			type is like TotalItemQuantity
			restricted
			return sum AssetItemDisposalRel.ItemQuantity

		TotalDisposalSelectedQuantity		is a DerivedField
			type is like TotalItemQuantity
			restricted
			return sum AssetItemDisposalRel.DisposalQuantity

		TotalDisposalSelectedBasis			is a DerivedField
			type is like InternationalAmount
			return (sum AssetItemDisposalRel.TransactionItemCost)

		AssetTagNumber          			is a StringField
			type is Alpha size 12
			restricted
			classic name is AST-TAG-NBR
			AssetRel.TagNumber

		AssetDisposalAssetGroup is a StringField
			type is Alpha size 10
			restricted
			classic name is AST-ASSET-GRP
			AssetGroup

		AssetDescription        is a StringField
			type is Alpha size 30
			classic name is AST-DESCRIP
			AssetRel.Description

		RoundedTransactionAmount is a DerivedField
			type is like InternationalAmount	
			restricted
			if (LocalAmount entered)
				RoundedTransactionAmount	      = LocalAmount
				round RoundedTransactionAmount to nearest DerivedRoundTo
				return RoundedTransactionAmount

		OutputNumberOfDecimals is a DerivedField
			type is Numeric 1
			return LocalNumberOfDecimals


		DerivedRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (OutputNumberOfDecimals = 2)
				return .01
			else
			if (OutputNumberOfDecimals = 0)
				return 1
			else
			if (OutputNumberOfDecimals = 3)
				return .001
			else
			if (OutputNumberOfDecimals = 4)
				return .0001
		DisposalMonth is a DerivedField
			type is Decimal 5.4
			T1=1
			while (T1 < 13)
				LocalEndDate = CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[T1]
				if (DisposalDate <= LocalEndDate)
					return CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[T1]
				else
					T1 = T1+1

		InserviceMonth is a DerivedField
			type is Decimal 5.4
			T1=1
			while (T1 < 13)
				LocalEndDate = CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[T1]
				if (LocalInsrvDate <= LocalEndDate)
					return CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[T1]
				else
					T1 = T1+1

		InserviceMonthEndDate is a DerivedField
			type is Date
			T1=1
			while (T1 < 13)
				LocalEndDate = CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[T1]
				if (LocalInsrvDate <= LocalEndDate)
					return LocalEndDate
				else
					T1 = T1+1


	Local Fields

		I1										is Numeric 2

		I3										is Numeric 2
		LocalDspCount							is Numeric 4
		LocalCurrFound							is Boolean
		LocalStatusFound						is Boolean
		LocalBook								is a Book
		LocalDisposalBook						is a Book
		LocalAsset								is an Asset
		LocalDspAsset							is an Asset
		LocalDisposalAsset						is an Asset
		LocalAssetItem							is like Sequence
		WSProcessSeq							is like Sequence
		WSDisposalCost							is an InternationalAmount
		WSNewCost								is an InternationalAmount

		LocalCreateTrans						is Boolean
		LocalPostTrans							is Boolean
		NewAsset								is an Asset view
		PTNewAsset								is like Asset
		SavedAsset								is an Asset view

		LocalPostingBook						is Boolean
		LocalHistoryRec							is Boolean
		LocalConsolidateDisposalJournalEntry	is Boolean
		LocalProcessSequence					is like SequenceNumber
		LocalProcessAsset						is like Asset
		LocalTransStatus						is AlphaUpper size 1
		LocalStatus								is Numeric size 1
		SavedAssetObjectID						is like AssetObjectID
		MXAssetObjectID							is like AssetObjectID

		NewItemQuantity							is like ItemQuantity




		NewItemCostBase							is an InternationalAmount
		NewItemTaxBase							is an InternationalAmount
		NewItemCostTran							is an InternationalAmount
		NewItemTaxTran							is an InternationalAmount
		LocalAmt1								is an InternationalAmount
		LocalAmt2								is an InternationalAmount
		LocalAmt3								is an InternationalAmount
























		LocalACMAmount							is an InternationalAmount






		LocalProgram							is Alpha size 8
		LocalSeqNumber							is like Sequence
		LocalTriggerMonths	 					is Decimal size 5.3
		NumberMonths
		FirstYearMonths							is Decimal size 5.3
		MonthsProcessed
		LocalPerformCreateDisposalBook 			is Alpha 1
		DisposalBook
		AnnualDepreciation
		LocalTriggerAnnualDepreciation			is an InternationalAmount
		CurrencyWork							is a FromCurrencyExchangeGroup
		LocalNumberOfDecimals					is Numeric 1
		LocalNumberOfDepreciationPeriodsClosed	is Numeric size 3

		LocalDepreciationPeriodsPerYear			is Numeric size 3
		LocalNumberOfPeriodCloseRuns			is Numeric size 2
		LocalYearEndDate						is Date
		LocalYearBeginDate						is Date


		LocalNumberCalPeriods					is Numeric 2
		LocalItTotalCostBase					is an InternationalAmount
		LocalItemTotalQty						is like ItemQuantity
		LocalAnnualDepreciation					is an InternationalAmount
		LocalRoundedDepreciation				is Decimal 18.6
		LocalSavedAnnualDepreciation			is an InternationalAmount

		LocalDepreciationStartDate				is Date
		LocalFromDate							is Date
		LocalToDate								is Date

		LocalDaysFirstYear						is Numeric size 3
		LocalDaysLastYear						is Numeric size 3
		LocalDaysInYear							is Numeric size 3
		LocalTaxCreditTable						is a AssetTaxCreditTable
		LocalMethod								is a Method
		LocalMethodSwitch						is Boolean
		LocalConvention							is a Convention
		LocalMethodTableYear					is like YearPlacedInService
		LocalPersonalUse						is AlphaUpper 10
		LocalBusPercent							is like BusinessPercent
		LocalInactiveMonths						is Decimal size 7.3
		LocalInactiveDays						is Numeric size 3
		LocalAvgDays							is Numeric size 3
		LocalInactiveYear						is Decimal size 5.3
		LocalInActiveYTD						is Decimal size 5.3
		LocalPrevYearEndDate					is Date
		LocalLastYrAdjustment					is Decimal size 7.3
		LocalNetBasis							is an InternationalAmount
		LocalBasis								is an InternationalAmount
		LocalNetProceeds						is an InternationalAmount
		LocalGainLoss							is an InternationalAmount
		LocalBDDeprOvrd							is an InternationalAmount
		LocalBDProceedOvrd						is an InternationalAmount
		LocalBDCSOvrd							is an InternationalAmount
		LocalBDGainLossOvrd						is an InternationalAmount
		LocalDeprCP								is an InternationalAmount
		LocalDeprLtd							is an InternationalAmount
		LocalDeprYtd							is an InternationalAmount
		LocalDeprLtdUpdate						is an InternationalAmount
		LocalDeprYtdUpdate						is an InternationalAmount
		LocalDeprCPAllow						is an InternationalAmount
		LocalDeprLTDAllow						is an InternationalAmount
		LocalDeprYtdAllow						is an InternationalAmount
		LocalBasisReductionPercentage			is an InternationalAmount


		LocalLife								is Decimal size 14.10
		LocalLifeRem							is Decimal size 14.10
		LocalBookBasis							is an InternationalAmount
		LocalYr1Exp								is an InternationalAmount
		LocalFirstLastFl						is a FirstAndLastYear
		LocalTransactionDate					is Date
		LocalDisposalDate						is Date
		LocalDeprStartDate						is Date
		LocalDeprEndDate						is Date
		LocalDepreciationEndDate				is Date
		LocalInsrvDate							is Date

		LocalProcessedMonths					is Decimal size 5.3
		LocalAvailMonths						is Decimal size 5.3 
		LocalCurrentAvailMonths					is Decimal size 5.3

		LocalDisposalMonths						is Decimal size 5.3
		LocalFirstMonthDays						is Decimal size 5.3
		LocalCurrentDisposalMonths				is Decimal size 5.3
		LocalDisposalMonthsNum					is Decimal size 5.3

		LocalInActiveDisposalMonths				is Decimal size 5.3
		LocalBegYrLife							is Decimal size 14.10
		LocalAnnualYearDays						is Numeric size 3
		LocalDeprBonus							is an InternationalAmount
		LocalDaysToDisposal						is Numeric size 3
		LocalTCRecapture						is an InternationalAmount
		LocalDisposalDepr						is an InternationalAmount
		LocalRoundedAmount						is an InternationalAmount
		LocalNewDeprYTD							is an InternationalAmount
		Year1									is Year
		Month1									is Numeric size 2




		LocalUpdateBookBasis 					is an InternationalAmount
		LocalUpdateDisposalDepr					is an InternationalAmount
		LocalCurrencyTable						is a CurrencyTable

		LocalExchangeDate						is an ExchangeDate
		LocalCurrency							is a FromCurrency
		LocalConvertFromCurrency                is like FromCurrency
		LocalCurrencyAmount						is a CurrencyAmount
		LocalBaseAmount							is a CurrencyExchange
		LocalFullItemDisposal					is Boolean
		LocalItemCount							is an InternationalAmount

		LocalTransactionAmount					is an InternationalAmount
		RoundedBasis							is like InternationalAmount
		LocalAmount								is like InternationalAmount
		LocalFirstYearExpense 					is like InternationalAmount
		LocalBookProceeds						is like InternationalAmount
		LocalBookCostOfSale						is like InternationalAmount
		LocalEndDate							is Date
		I6										is Numeric size 2
		I7										is Numeric size 2
		I8										is Numeric size 2
		NumOfAssetBooks							is Numeric size 2
		CurrentPeriod							is Date
		CurrentYear								is Year
		CurrentMonth							is Numeric size 2
		CurrentBookPeriod						is Date
		CurrentBookYear							is Year
		CurrentBookMonth						is Numeric size 2
		LocalMonthsToAdjust						is Decimal size 7.3
		P1										is Numeric size 2
		T1										is Numeric size 2
		LocalLastPeriodEndDate					is Date
		LastPeriodEnd							is Date
		LocalSkip								is Boolean
		LocalDisposalMonthsNumber				is Numeric 1
		LocalAddADay							is Numeric 1
		LocalBeginningLifeRemaining				is Decimal size 14.10
		LocalNetBeginningValue					is like InternationalAmount
		LocalPeriodsClosed						is Decimal size 5.3
		UpdateFromBatch							is Boolean
		LocalAssetItemDisposal					is an AssetItemDisposal view
		LocalAssetDisposal						is an AssetDisposal view
		BypassActiveCodeBlockEdit
		LocalYPIS								is Numeric 2
		LocalDisposal							is Numeric 10
		LocalToCurrency                         is a ToCurrency

	Transient Fields
		TransientCompany		is an AssetCompany
			derive value from Asset.Company
		TransientQuantity		is Numeric 10
		BookOverRide			is a BookOverRideDetail
		BookOverRideDetailWS	is a BookOverRideDetail
		QuickDisposal			is Boolean
		TransientTag			is a TagNumber
			derive value from Asset.TagNumber
		TransientAssetType		is an AssetType
			derive value from Asset.AssetType
		TransientAssetLocation  is an AssetLocation
			derive value from Asset.AssetLocation
		TransientAssetDivision	is an AssetDivision
			derive value from Asset.AssetDivision
		TransientAssetGroup		is an AssetGroup
			derive value from Asset.AssetGroup
		TransientAssetSummaryGroup is an AssetSummaryGroup
			derive value from Asset.AssetSummaryGroup
		TransientAssetStatus 	is Numeric size 1
			States
				Unreleased  value is 1
				Released    value is 2
				PostRelease value is 3
				Disposed    value is 9
		TransientClassification  is AlphaUpper size 1
			States
				Purchased   value is "P"
				Finance     value is "C"
				Operating   value is "O"
				All         value is "A"
				Leased      value is "L"
				Depreciable value is "D"
		TransientAssetReleaseResult is a AssetBatchUpdateResult
		TransientCompanyGroup	is a GeneralLedgerCompanyGroup
		TransientDetailView     is Numeric 2

	Sets
		Set7
			indexed
			Instance Selection
				where (UnReleased)
			Sort Order
				Asset
				AssetDisposal

		UnreleasedAssetDisposal
			Instance Selection
				where (UnReleased)
			Sort Order
				FinanceEnterpriseGroup
				Asset
				AssetDisposal

	 	ByDisposalAsset
			Sort Order
				FinanceEnterpriseGroup
				DisposalAsset
				Asset
				AssetDisposal

	Conditions
		RecordIsSelected
			restricted
			when (DisposalDateRange not entered
			or    DisposalDate within DisposalDateRange)

		IsDisposal
			restricted
			when (Asset entered
			and   DisposalStatus.Released)

		IsDspbooksExist
			restricted
			when (first AssetBookDisposalsRel exists
			and !DisposalQuantityError)

		IsExchanged
			restricted
			when (DisposalMethod.Exchanged
			and   DisposalStatus.Released)

		IsReleased
			restricted
			when (DisposalStatus.Released)

		UnReleased
			restricted
			when (DisposalStatus.Unreleased)

		PartialDisposal
			restricted
			when (FullOrPartial.Partial)

		UnReleasedPartial
			when (DisposalStatus.Unreleased
			and FullOrPartial.Partial)

		UnReleasedFull
			when (DisposalStatus.Unreleased
			and FullOrPartial.Full)

		AssetItemDisposalRelExists
			when (AssetItemDisposalRel exists)

		PartialDisposalWithDisposalItemsCreated
			when (FullOrPartial.Partial
			and !AssetItemDisposalRelExists)

		FullDisposal
			restricted
			when (FullOrPartial.Full)

		Disposal
			restricted
			when (DisposalStatus.Released)

		HasUnreleasedReinstatement
			restricted
			when (Asset.UnreleasedAssetReinstatementsRel exists)

		DisposalQuantityError
			when (DisposalQuantity not = TotalDisposalSelectedQuantity)


		DisposalBooksExist
			restricted
			when (AssetBookDisposalRel exists)
		DisposalItemExist
			restricted
			when (AssetItemDisposalRel exists)
		Exchanged
			restricted
			when (DisposalMethod.Exchanged
			and  DisposalStatus.Released)
		Retired
			restricted
			when (DisposalMethod.Retired)
		IsReleasedPartial
			restricted
			when (IsReleased
			and  PartialDisposal)
		ProceedsEntered
			restricted
			when (BookOverRide.BookOverRideTable.Proceeds entered
			or Proceeds entered)
		ExpenseEntered
			restricted
			when (BookOverRide.BookOverRideTable.Expense entered
				or CostOfSale entered)
		NotPurged
			restricted
			when (DisposalMethod.Abandoned
			or DisposalMethod.Donated
			or DisposalMethod.Exchanged
			or DisposalMethod.Other
			or DisposalMethod.Retired
			or DisposalMethod.Sold
			or DisposalMethod.Traded)

		NotPurgedPartial
			restricted
			when (!DisposalMethod.Purged
			and FullOrPartial.Partial
			and PartialAssetBookDisposalRel exists)

		NotPurgedFull
			restricted
			when (!DisposalMethod.Purged
			and FullOrPartial.Full
			and !BookDisposal)				

		NotPurgedBookFull
			restricted
			when (!DisposalMethod.Purged
			and FullOrPartial.Full)

		NotPurgedBook
			restricted
			when (!DisposalMethod.Purged
			and FullOrPartial.Full
			and BookDisposal)			

		WizardNotPurged
			restricted
			when (NotPurged
			and !AssetItemDisposalRelExists)

		TransActionsExists
			restricted
			when (AssetTransactionRel exists)

		IsPostingBook
			restricted
			when (BookCalendarRel.PostingBook)

		DisposalAssetEntered
			when (DisposalAsset entered)

		FundAccounting
			restricted
			when (Asset.FundAllocationRequired)

		DisposalTransactionsExist
			restricted
			when (DisposalAssetTransactionsRel exists)

		BookTransactionsExist
			restricted
			when (AssetBookTransactionsRel exists)

		ReinstatementTransactionsExist
			restricted
			when (ReinstatementTransactionsRel exists)

		DisplayDisposalTransactions
			restricted
			when (FullDisposal
			and DisposalTransactionsRel exists)

		DisplayDisposalBookTransactions
			restricted
			when (FullDisposal
			and DisposalBookTransactionsRel exists)

		IsBookDisposal 
			when (BookDisposal)	

		BookDisposalReinstateAvailable
			when (!CloseInProgress
			and BookDisposal)

		DisplayPartialTransactions

			when (PartialDisposal
			and PartialDisposalTransactionsRel exists)

		DisplayPartialBookTransactions

			when (PartialDisposal
			and PartialDisposalBookTransactionsRel exists)

		ReinstatementBookTransactionsExist
			restricted
			when (ReinstatementBookTransactionsRel exists)

		AssetUnreleasedOrReleased
			restricted
			when (AssetRel.Status.Unreleased
			or AssetRel.Status.Released)

		CloseInProgress
			restricted
			when (AssetCompanyRel.PendingYearEndCount entered
			or AssetCompanyRel.PeriodCloseRelease = "X")

	Relations
		ThisInstanceRel
			one-to-many relation to AssetDisposal
				Field Mapping uses symbolic key
					related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					related.Asset						= Asset
					related.AssetDisposal				= AssetDisposal

		AssetBookDisposalsRel
			classic name is AMASTBKDSP
			one-to-many relation to AssetBookDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= Asset
			Instance Selection
				where (related.IsCurrentDisposal)

		NonBookDisposalBooksRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= Asset
			Instance Selection
				where (related.IsNonBookDisposal)

		DisposedAssetBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset.DisposedAsset
				related.Book                            = LocalBook

		AssetItemsRel
			classic name is AMASTITEM
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= Asset

		NewAssetItemsRel
			classic name is AMASTITEM
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= Asset.DisposedAsset

		NewAssetItems2Rel
			classic name is AMASTITEM
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= NewAsset.Asset

		LocalAssetItemsRel
			classic name is AMASTITEM
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= LocalAsset

		AssetDisposalRel
			one-to-many relation to AssetDisposal
				Field Mapping uses symbolic key
					related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					related.Asset						= Asset

		OldAssetDisposalRel
			one-to-many relation to AssetDisposal
				Field Mapping uses symbolic key
					related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					related.Asset						= LocalAsset

		NewAssetDisposalRel
			one-to-many relation to AssetDisposal
				Field Mapping uses symbolic key
					related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					related.Asset						= LocalAsset.DisposedAsset

		MigratedOriginalAssetRel
			one-to-many relation to Asset
			Field Mapping uses ByDisposedAsset
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.DisposedAsset					= Asset

		LocalAssetItemDisposalRel
			one-to-many relation to AssetItemDisposal
				Field Mapping uses symbolic key
					related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					related.Asset 						= LocalAsset

		AssetItemDisposalSequenceRel
			one-to-many relation to AssetItemDisposal
				Field Mapping uses Set1
					related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
					related.Asset 								= Asset
					related.AssetItemDisposal.ProcessSequence	= AssetDisposal
				Instance Selection
					where (AssetDisposal.FullOrPartial.Full)

		AssetItemDisposalRel
			one-to-many relation to AssetItemDisposal
				Field Mapping uses symbolic key
					related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					related.Asset 						= Asset
					related.AssetDisposal 				= Asset.LastAssetSequence

		BookDisposalItemsRel
			one-to-many relation to AssetItemDisposal
				Field Mapping uses symbolic key
					related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					related.Asset 						= Asset
					related.AssetDisposal 				= LocalDisposal

		AssetRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= Asset

		AssetRel8
			one-to-many relation to Asset
			Field Mapping uses Set8
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= LocalAsset
				related.DisposedAsset					= LocalDspAsset

		AssetRel5
			one-to-many relation to Asset
			Field Mapping uses Set5
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup


		AssetRel9
			one-to-many relation to Asset
			Field Mapping uses Set9
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Status							= "3"
				related.Company							= AssetRel.Company
				related.DisposedAsset					= LocalAsset


		NewAssetRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= NewAsset.Asset

		NewAsset2Rel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset.DisposedAsset

		NewAssetItemDisposalRel
			one-to-many relation to AssetItemDisposal
				Field Mapping uses symbolic key
					related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					related.Asset 						= Asset.DisposedAsset

		PartialItemDisposalRel
			one-to-many relation to AssetItemDisposal
				Field Mapping uses symbolic key
					related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					related.Asset 						= NewAsset.Asset

		OriginalAssetRel
			one-to-many relation to Asset
			Field Mapping uses ByDisposedAsset
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.DisposedAsset					= NewAsset.Asset

		DspAssetRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset.DisposedAsset

		LocalAssetRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= LocalAsset

		RequiredCurrentBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set6
				related.Company							= AssetRel.Company

		CurrentBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set4
				related.Company							= AssetRel.Company

		CurrentBookCalendarsRel2
			one-to-many relation to BookCalendar
			Field Mapping uses Set5
				related.Book							= LocalBook
				related.Company							= AssetRel.Company

		CurrentBookCalendarsRel4
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company							= AssetRel.Company
				related.Book							= LocalBook

		BookCalendarRel
			classic name is AMCALENDAR
			one-to-one relation to BookCalendar
			Field Mapping uses Set5
				related.Book    						= LocalBook
				related.Company 						= Asset.Company

		DisposalPropertyRel
			one-to-one relation to DisposalProperty
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.DisposalProperty 				= DisposalProperty

		FutureBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Book							= LocalBook
				related.Company							= AssetRel.Company
			Instance Selection
				where (related.BookCalendar.YearEndDate >= DisposalDate)

		FutureBookCalendarsDateAscendingRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByCompanyBookStatus
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company					= Asset.Company
				related.Book					= LocalBook
				related.CalendarStatus			= "F"

		AssetBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= LocalAsset

		NotDisposedAssetBooksRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= LocalAsset
			Instance Selection	
				where (related.Disposed = false)

		OrignatingAssetBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset
				related.Book							= LocalBook

		NewAssetBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= NewAsset.Asset

		AssetBookRel2
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= LocalAsset
				related.Book							= LocalBook

		FromAssetInactiveBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.Book.Active	= false)


		BookRel
			one-to-one relation to Book
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Book							= LocalBook

		AssetCompanyRel
			one-to-one relation to AssetCompany
			Field Mapping uses symbolic key
				related.Company							= Asset.Company









		AssetItemRel
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= Asset

		NewAssetItemRel
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= Asset.DisposedAsset

		OldAssetItemRel
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= LocalAsset

		FullOldAssetItemRel
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= LocalAsset
				related.AssetItem						= LocalAssetItem

		AssetItemRel2
			one-to-many relation to AssetItem
			Field Mapping uses Set2
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset 							= LocalAsset

		AssetBookDisposalFullRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset
			Instance Selection	
				where (related.AssetDisposal			= AssetDisposal)

		OtherBookDisposalsRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset
			Instance Selection	
				where (related.AssetDisposal			!= AssetDisposal)


		BooksSelectedForDisposalRel		
			one-to-many relation to AssetBookDisposal
			Field Mapping uses ByAssetDisposal
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset
				related.AssetDisposal  					= AssetDisposal
			Instance Selection
				where (related.Dispose)

		BooksExcludedFromDisposalRel		
			one-to-many relation to AssetBookDisposal
			Field Mapping uses ByAssetDisposal
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset
				related.AssetDisposal  					= AssetDisposal
			Instance Selection
				where (!related.Dispose)				
	

		AssetBookDisposalPartialRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset.DisposedAsset

		PartialAssetBookDisposalRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= DisposalAsset

		AssetBookDisposalRel
			one-to-one relation to AssetBookDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= LocalAsset
				related.Book							= LocalBook

		AssetBookDisposalRel2
			one-to-many relation to AssetBookDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= LocalAsset

		NewAssetBookDisposalRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset.DisposedAsset

		AssetTaxCreditRel
			one-to-one relation to AssetTaxCreditTable
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AssetTaxCreditTable				= LocalTaxCreditTable

		AssetRecaptureRel
			one-to-many relation to AssetRecapture
			Field Mapping uses Set1
				related.AssetRecapture.RecaptureType	= "D"
				related.Asset							= LocalAsset

		AssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set4
				related.ProcessAsset					= LocalProcessAsset
				related.ProcessSequence					= LocalProcessSequence
				related.TransactionStatus				= LocalTransStatus
				related.Asset							= LocalAsset
				related.AssetTransaction				= LocalSeqNumber

		AssetTransactionRel1b
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
				related.Asset							= Asset
				related.TransactionStatus				= LocalTransStatus
				related.Company							= AssetRel.Company

		AssetTransactionDSPRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
				related.Asset							= Asset
				related.TransactionStatus				= "DSP"
				related.Company							= AssetRel.Company

		AssetTransactionDispRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
				related.Asset							= Asset
			Instance Selection
				where (related.AssetProcess 		= "Disposal"
				and related.Company					= AssetRel.Company)

		AssetControlTransactionRel
			one-to-one relation to AssetControlTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= LocalAsset

		MemoOrUnreleasedAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set4
				related.ProcessAsset					= Asset
				related.ProcessSequence					= Asset.LastAssetSequence
			Instance Selection
				where (related.IsMemoOrUnreleased)

		MemoOrUnreleasedNewAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set4
				related.ProcessAsset					= NewAsset.Asset
				related.ProcessSequence					= NewAsset.Asset.LastAssetSequence
			Instance Selection
				where (related.IsMemoOrUnreleased)

		UnreleasedAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= NewAsset.Asset
			Instance Selection
				where (related.TransactionStatus.Unreleased)

		AssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses Set6
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TransactionStatus				= "U"
				related.AssetProcess					= "DSP"
				related.Asset							= Asset.DisposedAsset

		ReinstatementTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set10
				related.Asset							= Asset
			Instance Selection
				where (related.ProcessSequence 			= AssetDisposal
				and related.AssetProcess				= "RAD")

		ReinstatementBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByAssetBookCompany
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset
			Instance Selection
				where (related.AssetProcess				= "RAD")

		DisposalAssetRel
			one-to-one relation to Asset
			Field Mapping uses ByAssetDescending
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= DisposalAsset

		PartialDisposalTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.Company							= Asset.Company
			Instance Selection
				where (related.Asset					= DisposalAsset)

		PartialDisposalBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= DisposalAsset

		DisposalTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.Company							= Asset.Company
			Instance Selection
				where (related.Asset					= Asset
				and (related.AssetProcess				= "RAD"
				or  related.AssetProcess				= "DSP")
				and related.ProcessSequence				= AssetDisposal)

		DisposalBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset.DisposedAsset
			Instance Selection


				where ((related.AssetProcess.ReAdd
				or related.AssetProcess.Disposal)
				and related.ProcessSequence	= AssetDisposal)

		DisposalAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
				related.Asset							= Asset.DisposedAsset
				related.TransactionStatus				= "U"
				related.Company							= Asset.Company
			Instance Selection
				where (related.AssetProcess.Addition
				or related.AssetProcess.Disposal)

		PartialDisposalAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
				related.Asset							= Asset.DisposedAsset
				related.TransactionStatus				= "U"
				related.Company							= Asset.Company
			Instance Selection
				where (related.AssetProcess.Disposal)

		ReinstatementAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
				related.Asset							= Asset
			Instance Selection
				where (related.AssetProcess				= "RIN")

		AssetTransaction4Rel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set4
				related.ProcessAsset					= Asset
				related.ProcessSequence					= Asset.LastAssetSequence

		AssetBookTransactionRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= LocalAsset
			Instance Selection
				where (related.TransactionStatus.Unreleased)

		UnreleasedAssetBookTransactionRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= LocalAsset
			Instance Selection
				where (related.TransactionStatus.Unreleased)

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode			= "AM"
				related.Company							= Asset.Company

	  	LocalDisposalAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= LocalDisposalAsset
				related.Book							= LocalDisposalBook

		AssetImpairmentRel
			one-to-one relation to AssetImpairment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetImpairment			= Asset.LastAssetImpairment

		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode     = "AM"

		PurgeAssetItemDisposalRel is an AssetItemDisposal set
			Instance Selection
				include deleted records

		AssetImpairmentBookRel
			one-to-many relation to AssetImpairmentBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.AssetImpairment				= Asset.LastAssetImpairment

		ToAssetImpairmentBookRel
			one-to-one relation to AssetImpairmentBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= LocalAsset
				related.AssetImpairment				= Asset.DisposedAsset.LastAssetImpairment
				related.Book						= LocalBook

		LocalAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= LocalBook

		UnreleasedBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByAssetBookCompany
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= LocalBook
				related.Company					= Asset.Company
				related.TransactionStatus		= "U"	

		UnreleasedDisposalTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByAssetManagementInterfaceResult
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetManagementInterfaceResult = 0
				related.Asset					= Asset
				related.Book					= LocalBook
				related.Company					= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased)				

		AssetReinstatementRel
			one-to-one relation to AssetReinstatement
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetReinstatement.CreationDate	= current date












	Field Rules

		AssetDisposal
			if (FullDisposal)
				default to Asset
			else
				default to NewAsset.Asset

		DisposalDate
			required
			LocalAsset 			= Asset
			PTNewAsset 			= Asset
			for each AssetBookRel   
				if (each.Book.CurrencyTable entered)
					LocalCurrencyTable	= each.Book.CurrencyTable
				else
					LocalCurrencyTable	= Asset.CurrencyTable
				constraint (DisposalDate >= each.InServiceDate)
					"DisposalDateCannotBePriorToInServiceDate"
				constraint (DisposalDate <= each.CurrentBookCalendarRel.YearEndDate
				and DisposalDate >= each.CurrentBookCalendarRel.YearBeginDate)
					"DisposalDateNotInTheCurrentYearOfAllBooks"
		
		PostingDate
			default to DisposalDate
			if (CompanySystemClosingControlRel exists
			and CompanySystemClosingControlRel.Control = true)
				constraint (PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
					"PostingDateIsOutsideSystemControlValidEntryDateRange"

		DisposalProperty
			constraint (DisposalPropertyRel exists)
				"DisposalPropertyDoesNotExist"
		FullOrPartial
			initial value is FullOrPartial.Full
			default to FullOrPartial.Full
			if (FullOrPartial.Partial)
				constraint (!QuickDisposal)
					"QuickDisposalNotValidWithPartialDisposal"
			else
				DisposalQuantity = Asset.EnteredQuantity
			if (AssetItemDisposalRel exists)
				cannot be changed
					"ThisFieldCannotBeChanged;PleaseResetTheDisposal"
		DisposalMethod
			required
			if (DisposalMethod.Purged)
				I1 = 1
				while (I1 < 11)
					constraint (BookOverRide.BookOverRideTable[I1].Book not entered
					and			BookOverRide.BookOverRideTable[I1].Proceeds not entered
					and			BookOverRide.BookOverRideTable[I1].Expense not entered)
						"CannotEnterBookOverrideInformationForPurgedDisposal"
					I1 += 1

				constraint (ProceedsCurrency not entered
				and 		CostOfSaleCurrency not entered
				and 		Proceeds not entered
				and 		CostOfSale not entered)
					"CannotEnterBookOverrideInformationForPurgedDisposal"
				constraint (FullOrPartial.Full)
					"PartialDisposalIsNotAllowedWithPurgeDisposalMethod"
				DisposalQuantity = Asset.EnteredQuantity
				LocalAsset = Asset
				for each AssetBookRel  
					LocalBook	= each.Book
					for each CurrentBookCalendarsRel
						LocalBook = each.Book

						if (LastAssetItemPurchaseDate < each.YearBeginDate
						and	AssetBookRel.YearToDateDepreciation != AssetBookRel.LifeToDateDepreciation)
							if (LastAssetItemPurchaseDate < each.YearBeginDate)
								constraint (!DisposalMethod.Purged)
									"PurgeTypeDisposalCannotBeDoneOnPriorYearAssets" //"AM40.514"

		Proceeds
			if (Proceeds entered)
				if (ProceedsCurrency not entered)
					ProceedsCurrency = Asset.Currency








		ProceedsCurrency
			if (any BookOverRide.BookOverRideTable.Proceeds entered)
				constraint (ProceedsCurrency entered)
						"ProceedsCurrencyCodeRequiredTableField"











		CostOfSale
			if (CostOfSale entered)
				if (CostOfSaleCurrency not entered)
					CostOfSaleCurrency = Asset.Currency








		CostOfSaleCurrency

			if (CostOfSale entered)
				required
					"ExpenseCurrencyCodeRequired"
			if (any BookOverRide.BookOverRideTable.Expense entered)
					constraint (CostOfSaleCurrency entered)
						"ExpenseCurrencyCodeRequiredTableField"












		BookOverRide.BookOverRideTable
			initialize I1
			while (I1 <= 10)
				I1 += 1
				if (BookOverRide.BookOverRideTable[I1].Proceeds entered)
					constraint (ProceedsCurrency entered)
						"ProceedsCurrencyCodeRequiredTable"

				if (BookOverRide.BookOverRideTable[I1].Expense entered)
					constraint (CostOfSaleCurrency entered)
						"ExpenseCurrencyCodeRequiredTable"


			initialize I1
			while (I1 <= 10)
				I1 += 1
				LocalBook = BookOverRide.BookOverRideTable[I1].Book
				if (LocalBook entered)
					for each AssetBookRel
						constraint (AssetBookRel exists)
							"BookDoesNotExistForThisAssetTable"
			initialize I1
			for each AssetBookDisposalRel
				while (I1 <= 10)
					I1 += 1
					LocalBook = each.Book
					if (BookRel.Currency !=  ProceedsCurrency
					and ProceedsCurrency entered)
						CurrencyWork.TransactionAmount				= BookOverRide.BookOverRideTable[I1].Proceeds
						CurrencyWork.FromCurrency					= BookRel.Currency
						CurrencyWork.BaseAmount.ToCurrency			= ProceedsCurrency
						BookOverRide.BookOverRideTable[I1].Proceeds	= CurrencyWork.BaseAmount.OutputCurrencyAmount
					else
						BookOverRide.BookOverRideTable[I1].Proceeds = each.ProceedsOverride

					if (BookRel.Currency !=  CostOfSaleCurrency
					and CostOfSaleCurrency entered)
						CurrencyWork.TransactionAmount				= BookOverRide.BookOverRideTable[I1].Proceeds
						CurrencyWork.FromCurrency					= BookRel.Currency
						CurrencyWork.BaseAmount.ToCurrency			= CostOfSaleCurrency
						BookOverRide.BookOverRideTable[I1].Expense	= CurrencyWork.BaseAmount.OutputCurrencyAmount
					else
						BookOverRide.BookOverRideTable[I1].Proceeds = each.CostOfSaleOverride

			initialize I1
			while (I1 <= 10)
				I1 += 1
				if (BookOverRide.BookOverRideTable[I1].Proceeds entered)
					constraint (AssetRel.LocalProceedsAccount entered)
						"ProceedsAccountNotInAssetGroup"

				if (BookOverRide.BookOverRideTable[I1].Expense entered)
					constraint (AssetRel.LocalDisposalExpenseAccount entered)
						"ExpenseAccountNotInAssetGroup"


		TotalItemQuantity
			default to AssetRel.TotalItemQuantity

		DisposalQuantity
			if (PartialDisposal)
				required
				if (action type.Create)
					constraint (DisposalQuantity not = 	Asset.EnteredQuantity)
						"DisposalQuantityEqualToEnteredQuantity;UseFullDisposal"

			else
				DisposalQuantity = Asset.EnteredQuantity

		ItemTotalBaseCost
			default to AssetRel.ItemTotalBaseCost

		ItemTotalBaseTax
			default to AssetRel.ItemTotalBaseTax

		ItemTotalTransactionCost
			default to AssetRel.ItemTotalTransactionCost

		ItemTotalTransactionTax
			default to AssetRel.ItemTotalTransactionTax

		Currency
			default to AssetRel.Currency

		LastAssetItemPurchaseDate
			default to AssetRel.LastAssetItemPurchaseDate

		LastSequenceNumber
			default to LastSequenceNumber

		CreationDate
			default to current timestamp

		CreatedBy
			default to actor

		AssetGroup
			default to AssetRel.AssetGroup

		AssetLease
			default to AssetRel.AssetLease

	Rule Blocks
		ChangeDisposalAsset443Rules

			invoke TransistiontoPostRelease Asset
				invoked.PrmAssetProcess			= "DSP"
				invoked.PrmProcessDate			= DisposalDate
				if (FullOrPartial.Full)
					invoked.PrmDisposedAsset 	= Asset
				else
					invoked.PrmDisposedAsset	= NewAsset.Asset


		CreateItemDisposal447and448Rules
			LocalAsset = PTNewAsset
			for each AssetItemRel
				invoke Create AssetItemDisposal
					invoked.Asset									= LocalAsset
					invoked.AssetDisposal							= LocalAsset
					invoked.AssetItem								= each.AssetItem
					invoked.AssetItemDisposal.ProcessSequence		= AssetRel.LastAssetSequence
					invoked.ItemNumber								= each.ItemNumber
					invoked.DisposalDate							= DisposalDate
					invoked.DisposalMethod							= DisposalMethod
					if (FullDisposal)
						invoked.ItemQuantity						= each.ItemQuantity
						invoked.BaseItemCost						= each.BaseItemCost
						invoked.BaseItemTax							= each.BaseItemTax
						invoked.TransactionItemCost					= each.TransactionItemCost
						invoked.TransactionItemTax					= each.TransactionItemTax
						invoked.BaseNumberOfDecimals				= each.BaseNumberOfDecimals
						invoked.TransactionNumberOfDecimals			= each.TransactionNumberOfDecimals
						invoked.DisposalQuantity					= each.ItemQuantity

		CheckForFullDisposeItems
			LocalFullItemDisposal = false

			initialize LocalItemCount
			for each AssetItemRel

				LocalItemCount	+= each.ItemQuantity

			if (LocalItemCount = 0)
				LocalFullItemDisposal = true

		DeleteAssetBook
			if (PartialDisposal)
				for each AssetBookDisposalRel2

					LocalAsset  = Asset
					LocalBook 	= each.Book

					if (AssetBookRel exists)
						invoke FastUpdate AssetBookRel2
							invoked.AdjustmentDate					= current corporate date
							invoked.Basis 							+= each.Basis
							invoked.YearToDateDepreciation 			+= each.YearToDateDepreciation
							invoked.YearToDateDepreciationAllowed	+= each.YearToDateDepreciationAllowed
							invoked.YearToDateDepreciationOverride	+= each.YearToDateDepreciationOverride
							invoked.LifeToDateDepreciation			+= each.LifeToDateDepreciation
							invoked.LifeToDateDepreciationAllowed	+= each.LifeToDateDepreciationAllowed
							invoked.SalvageValue					+= each.SalvageValue
							invoked.FirstYearExpenseAmount			+= each.FirstYearExpenseAmount
							invoked.TaxCreditPropertyAmount			+= each.TaxCreditPropertyAmount
							invoked.TaxCredit						+= each.TaxCredit
							invoked.ActualInsuranceValue			+= each.ActualInsuranceValue
							invoked.CalculatedInsuranceValue		+= each.CalculatedInsuranceValue
							invoked.CalculatedReplacementValue		+= each.CalculatedReplacementValue

					invoke Delete each
			else
				for each AssetBookDisposalRel2
					LocalAsset 	= each.Asset
					LocalBook 	= each.Book

					if (AssetBookRel2 exists)
						invoke FastUpdate AssetBookRel2
							invoked.AdjustmentDate					= current corporate date
							invoked.Basis 							= each.Basis
							if (CurrentBookCalendarsRel4.NumberOfDepreciationPeriodsClosed != 0)
								invoked.YearToDateDepreciation 			= each.YearToDateDepreciation
								invoked.YearToDateDepreciationAllowed	= each.YearToDateDepreciationAllowed
								invoked.YearToDateDepreciationOverride	= each.YearToDateDepreciationOverride
								invoked.LifeToDateDepreciation			= each.LifeToDateDepreciation
								invoked.LifeToDateDepreciationAllowed	= each.LifeToDateDepreciationAllowed
								invoked.SalvageValue					= each.SalvageValue
								invoked.FirstYearExpenseAmount			= each.FirstYearExpenseAmount
								invoked.TaxCreditPropertyAmount			= each.TaxCreditPropertyAmount
								invoked.TaxCredit						= each.TaxCredit
								invoked.ActualInsuranceValue			= each.ActualInsuranceValue
								invoked.CalculatedInsuranceValue		= each.CalculatedInsuranceValue
								invoked.CalculatedReplacementValue		= each.CalculatedReplacementValue
							else
								initialize invoked.YearToDateDepreciation
								initialize invoked.YearToDateDepreciationAllowed
								initialize invoked.YearToDateDepreciationOverride
								initialize invoked.LifeToDateDepreciation
								initialize invoked.LifeToDateDepreciationAllowed
								invoked.SalvageValue					= each.SalvageValue
								invoked.FirstYearExpenseAmount			= each.FirstYearExpenseAmount
								invoked.TaxCreditPropertyAmount			= each.TaxCreditPropertyAmount
								invoked.TaxCredit						= each.TaxCredit
								invoked.ActualInsuranceValue			= each.ActualInsuranceValue
								invoked.CalculatedInsuranceValue		= each.CalculatedInsuranceValue
								invoked.CalculatedReplacementValue		= each.CalculatedReplacementValue

					invoke Delete each


		RestoreDisposalItems
			LocalAsset = Asset
			MXAssetObjectID = NewAssetRel.AssetObjectID
			for each AssetItemDisposalRel
				NewItemQuantity 	= each.DisposalQuantity
				NewItemCostBase 	= each.BaseItemCost
				NewItemTaxBase 		= each.BaseItemTax
				NewItemCostTran		= each.TransactionItemCost
				NewItemTaxTran 		= each.TransactionItemTax
				LocalSeqNumber		= each.AssetItem
				LocalSerialNumber	= each.SerialNumber
				LocalAsset 			= Asset
				LocalAssetItem 		= each.AssetItem

				invoke UpdateFromDisposal FullOldAssetItemRel
					invoked.PrmItemQuantity				= each.DisposalQuantity
					invoked.PrmBaseItemCost				= each.BaseItemCost
					invoked.PrmBaseItemTax				= each.BaseItemTax
					invoked.PrmTransactionItemCost		= each.TransactionItemCost
					invoked.PrmTransactionItemTax		= each.TransactionItemTax
					invoked.PrmDisposalQuantity			= each.DisposalQuantity * -1
					LocalSeqNumber						= each.AssetItem
					LocalSerialNumber					= each.SerialNumber


		DeleteRecapRecords
			LocalAsset		= Asset
			if (AssetRecaptureRel exists)
				invoke Delete AssetRecaptureRel

		RestoreDspAsset

			invoke RemoveDisposal LocalAssetRel


		DeleteJE
			for each AssetTransactionDispRel
				invoke Delete AssetTransactionDispRel

			if (NewAsset entered)
				invoke Delete AssetBookTransactionRel
			else
				while (AssetBookTransactionRel exists)
					if (AssetBookTransactionRel.AssetProcess.Disposal
					and (AssetBookTransactionRel.AssetBookTransaction.TransactionStatus = "U"))
						invoke Delete AssetBookTransactionRel

			if (AssetControlTransactionRel exists)
				invoke Delete AssetControlTransactionRel



		AddEdits
			if (AssetRel.AssetCategory.Depreciable)
				constraint (AssetRel.AssetType.ASTDistributionAccount entered)
					"AssetAccountIsNotSetup"
				constraint (AssetRel.AssetType.ACMDistributionAccount entered)
					"AccumulatedDepreciationAccountIsNotSetup"
				constraint (AssetRel.AssetType.EXPDistributionAccount entered)
					"DepreciationExpenseAccountIsNotSetup"

			constraint (AssetRel.AssetAccountGroup.AssetAccountGANRel entered)
				"GainAccountNotSetupForAsset"
			constraint (AssetRel.AssetAccountGroup.AssetAccountLOSRel entered)
				"LossAccountNotSetupForAsset"

			if (DisposalMethod.Exchanged)
				constraint (AssetRel.AssetAccountGroup.AssetAccountDGNRel entered)
					"DefaultAccountingUnitRequiredForDeferredGainAccount"
				constraint (AssetRel.AssetAccountGroup.AssetAccountDLSRel entered)
					"DefaultAccountingUnitRequiredForDeferredLossAccount"




		ReleaseFunctions
			initialize LocalDspCount
			SavedAsset		= Asset
			LocalAsset		= Asset
			LocalDspAsset	= Asset.DisposedAsset
			if (DisposalCount > 1)
				for each AssetRel8
					if (PartialDisposal)
						invoke RestoreAsset each
							invoked.PrmAssetProcess 	= "DSP"
							initialize invoked.PrmRestoreDate

					initialize LocalProcessSequence
					LocalProcessAsset = LocalDspAsset
					initialize LocalSeqNumber
					LocalTransStatus					= "U"
					if (FundAccounting)
						for each AssetTransactionRel
							if (each.FundAccountType)
								invoke CreateFundTransactions each
									invoked.PrmTransactionDate	 	= each.TransactionDate											
					if (AssetTransactionRel exists)
						for each AssetTransactionRel
							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= TransientAssetReleaseResult
					else
						LocalTransStatus				= "M"
						if (FundAccounting)
							for each AssetTransactionRel
								if (each.FundAccountType)
									invoke CreateFundTransactions each
										invoked.PrmTransactionDate	 	= each.TransactionDate											
						if (AssetTransactionRel exists)
							for each AssetTransactionRel
								invoke Release each
									invoked.PrmAssetBatchUpdateResult	= TransientAssetReleaseResult

					LocalStatus							= 3
					if (AssetRel5 not exists)
						LocalStatus						= 1
						if (AssetRel5 not exists
						or AssetRel5.WorkInProcess		= "N")
							invoke SetPeriodCloseRelease AssetCompanyRel
								invoked.PrmPeriodCloseRelease	= "Y"

							if (CurrentBookCalendarsRel exists)
								for each CurrentBookCalendarsRel
									invoke SetDepreciationCalculated each
										invoked.PrmDepreciationCalculated	= false

				LocalAsset	= Asset
				if (FullOrPartial.Full)
					invoke TransistiontoDisposed Asset

			if (DisposalCount <= 1)
				LocalAsset						= Asset

				initialize LocalProcessSequence
				LocalTransStatus						= "U"
				LocalProcessAsset						= LocalAsset
				initialize LocalSeqNumber

				if (FullDisposal)
					if (MemoOrUnreleasedAssetTransactionsRel exists)
						if (FundAccounting)
							for each MemoOrUnreleasedAssetTransactionsRel
								if (each.FundAccountType)
									invoke CreateFundTransactions each
										invoked.PrmTransactionDate	 	= each.TransactionDate											
						for each MemoOrUnreleasedAssetTransactionsRel
							invoke Release each
								invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.PrmJournalizeGroup			= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
								invoked.PrmAssetBatchUpdateResult	= TransientAssetReleaseResult












				if (PartialDisposal)
					if (MemoOrUnreleasedNewAssetTransactionsRel exists)
						if (FundAccounting)
							for each MemoOrUnreleasedNewAssetTransactionsRel
								if (each.FundAccountType)
									invoke CreateFundTransactions each
										invoked.PrmTransactionDate	 	= each.TransactionDate											
						for each MemoOrUnreleasedNewAssetTransactionsRel
							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= TransientAssetReleaseResult












				if (UnreleasedAssetBookTransactionRel exists)
					if (FundAccounting)
						for each UnreleasedAssetBookTransactionRel
							if (each.FundAccountType)
								invoke CreateFundTransactions each
									invoked.PrmTransactionDate	 	= each.TransactionDate											
					for each UnreleasedAssetBookTransactionRel
						invoke Release each
							invoked.PrmAssetBatchUpdateResult	= TransientAssetReleaseResult
				else
					LocalTransStatus					= "M"
					if (MemoOrUnreleasedAssetTransactionsRel exists)
			 			if (FundAccounting)
							for each MemoOrUnreleasedAssetTransactionsRel
								if (each.FundAccountType)
									invoke CreateFundTransactions each
										invoked.PrmTransactionDate	 	= each.TransactionDate											
                		for each MemoOrUnreleasedAssetTransactionsRel
							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= TransientAssetReleaseResult

					if (UnreleasedAssetTransactionRel exists)
			 			if (FundAccounting)
							for each UnreleasedAssetTransactionRel
								if (each.FundAccountType)
									invoke CreateFundTransactions each
										invoked.PrmTransactionDate	 	= each.TransactionDate											
                		for each UnreleasedAssetTransactionRel
							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= TransientAssetReleaseResult











					if (UnreleasedAssetBookTransactionRel exists)
			 			if (FundAccounting)
							for each UnreleasedAssetBookTransactionRel
								if (each.FundAccountType)
									invoke CreateFundTransactions each
										invoked.PrmTransactionDate	 	= each.TransactionDate											
						for each UnreleasedAssetBookTransactionRel
							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= TransientAssetReleaseResult
				if (AssetRel5 exists
				and AssetRel5.Status.Unreleased
				or AssetRel5.Status.PostRelease
				or AssetRel5.WorkInProcess)
					LocalStatusFound= true

				if (!LocalStatusFound)
					if (AssetCompanyRel exists)
						invoke SetPeriodCloseRelease AssetCompanyRel
							invoked.PrmPeriodCloseRelease	= "Y"

						if (CurrentBookCalendarsRel exists)
							for each CurrentBookCalendarsRel
								invoke SetDepreciationCalculated each
									invoked.PrmDepreciationCalculated	= false

		200AnnualDepreciation
			initialize LocalBegYrLife
			if (!DisposalMethod.Purged)
				LocalBook 	= each.Book
				if (BookRel exists)
					LocalMethodSwitch = BookRel.MethodSwitch
					if (CurrentBookCalendarsRel2 exists)
						LocalNumberOfDepreciationPeriodsClosed	= CurrentBookCalendarsRel2.NumberOfDepreciationPeriodsClosed
						LocalDepreciationPeriodsPerYear 		= CurrentBookCalendarsRel2.DepreciationPeriodsPerYear
						LocalNumberOfPeriodCloseRuns			= CurrentBookCalendarsRel2.NumberOfPeriodCloseRuns
						I1										= CurrentBookCalendarsRel2.NumberOfPeriodCloseRuns +1
						LocalYearEndDate						= CurrentBookCalendarsRel2.YearEndDate
						LocalYearBeginDate						= CurrentBookCalendarsRel2.YearBeginDate
						LocalPrevYearEndDate					= CurrentBookCalendarsRel2.YearBeginDate - 1 day
						I1 = 1
						while (I1 <= 55)
							if (CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1] entered)
								LocalNumberCalPeriods = I1
							I1 += 1
						if (AssetRel exists)
							LocalItTotalCostBase			= Asset.ItemTotalBaseCost
							LocalItemTotalQty				= Asset.TotalItemQuantity

						if (AssetBookRel exists)
							LocalDeprYtdUpdate 				= each.YearToDateDepreciation
							LocalBook 	= each.Book


							LocalDeprYtdAllow  				= each.YearToDateDepreciationAllowed
							LocalDeprLtdUpdate				= each.LifeToDateDepreciation
							LocalDeprLTDAllow  				= each.LifeToDateDepreciationAllowed
							LocalDeprCP 	   				= each.CurrentPeriodDepreciation
							LocalDeprCPAllow  	 			= each.CurrentPeriodDepreciationAllowed

							LocalBook						= each.Book
							LocalMethod						= each.Method
							LocalMethodSwitch				= each.DepreciationMethodSwitched
							LocalConvention					= each.Convention
							LocalMethodTableYear			= each.YearPlacedInService
							LocalPersonalUse				= each.PersonalUseCode
							LocalBusPercent					= each.BusinessPercent
							LocalInactiveMonths				= each.LifeToDateInactiveMonths
							LocalInactiveYear				= each.YearToDateInactiveMonths
							LocalInActiveYTD				= each.YearToDateInactiveMonths
							LocalLife						= each.Life
							LocalLifeRem					= each.LifeRemaining



							LocalBookBasis					= each.Basis
							LocalYr1Exp						= each.FirstYearExpenseAmount
							LocalFirstLastFl				= each.FirstAndLastYear
							LocalDeprStartDate				= each.DepreciationStartDate
							LocalInsrvDate					= each.InServiceDate
							if ((each.Method = "100%BONUS")
							and (!each.InServiceDate < CurrentBookCalendarsRel2.YearBeginDate)
							and (!each.InServiceDate > CurrentBookCalendarsRel2.YearEndDate))
								LocalFirstLastFl	= "F"
							if (LocalFirstLastFl.CompletelyDepreciated)
								if (!each.YearToDateDepreciationOverride > each.YearToDateDepreciation
								and each.YearToDateDepreciationOverride entered)
									LocalAnnualDepreciation = each.YearToDateDepreciationOverride
								else
									LocalAnnualDepreciation = each.YearToDateDepreciation
							else
								if (LocalFirstLastFl.First
								and (each.Convention.HalfYear
								or each.Convention.ModifiedHalfYear
								or each.Convention.FullYear))
									initialize LocalAnnualDepreciation
								else
									initialize LocalAnnualDepreciation
									initialize AnnualDepreciation
									AnnualDepreciation.InAsset					= LocalAsset
									AnnualDepreciation.InBook					= LocalBook
									AnnualDepreciation.InBasis					= LocalBookBasis
									if (each.IsCustomMethod)
										invoke CustomMethodUpdate each
											invoked.LifeRemaining				= each.LifeRemaining
											invoked.LifeToDateDepreciation		= each.LifeToDateDepreciation
											invoked.YearToDateDepreciation		= each.YearToDateDepreciation
										LocalAnnualDepreciation					= each.CalculationAmount
									else
										AnnualDepreciation.InYearEndDate			= LocalYearEndDate
										AnnualDepreciation.InYearBeginDate			= LocalYearBeginDate
										AnnualDepreciation.LocalMethodSW			= each.Book.MethodSwitch
										AnnualDepreciation.Convention				= each.Convention
										AnnualDepreciation.InServiceDate			= each.InServiceDate
										AnnualDepreciation.InPrevYearEndDate		= LocalPrevYearEndDate
										AnnualDepreciation.InAnnualDepreciation		= LocalAnnualDepreciation
										AnnualDepreciation.InMethod					= each.Method
										LocalTriggerAnnualDepreciation				= AnnualDepreciation.ComputeAnnualDepreciation
										LocalAnnualDepreciation						= LocalTriggerAnnualDepreciation
							if (AssetRel.AssetCategory.NonDepreciable)
								initialize LocalAnnualDepreciation

		300CalcDispDepreciation
			initialize LocalDisposalDepr
			if (each.Active
			and !DisposalMethod.Purged)
				include 305DeprEndDate
				LocalDeprYtd = each.YearToDateDepreciation
				if (DisposalDate entered)







					if (each.Convention.FullMonth
					or each.Convention.ModifiedHalfMonth
					or each.Convention.NextMonth
					or each.Convention.MidMonth
					or each.Convention.ActualDaysFirstMonth)
						if (each.DepreciationStartDate > DisposalDate)
							if (LocalDeprLtd entered)
								LocalDisposalDepr  -= LocalDeprLtd
								initialize LocalDeprLtd
						else
							if (each.Convention.FullMonth
							or each.Convention.ModifiedHalfMonth
							and each.DepreciationStartDate <= each.InServiceDate)
								LocalInsrvDate				= each.InServiceDate
							else
								LocalInsrvDate 				= each.DepreciationStartDate
						include 310Months

					if (each.Convention.HalfYear)
						include 350HalfYear

					if (each.Convention.ModifiedHalfYear)
						if (DisposalDate > LocalDeprEndDate)
							LocalDisposalDepr = each.Basis - each.LifeToDateDepreciation
							LocalDeprYtdUpdate	+= LocalDisposalDepr
							LocalDeprLtdUpdate	+= LocalDisposalDepr
						else
							if (each.DepreciationStartDate > each.InServiceDate)
								include 360NextYear
							else
								include 370FullYear

					if (each.Convention.FullYear)
						if (DisposalDate > LocalDeprEndDate)
							LocalDisposalDepr = each.Basis - each.LifeToDateDepreciation
							LocalDeprYtdUpdate	+= LocalDisposalDepr
							LocalDeprLtdUpdate	+= LocalDisposalDepr
						else
							include 370FullYear

					if (each.Convention.ActualDays)
						include 380ActualDays

					if (each.Convention.MidQuarter)
						include 390MidQuarter


		305DeprEndDate
			LocalDepreciationStartDate = each.DepreciationStartDate + each.Life as months
			if (each.LifeToDateInactiveMonths entered)
				LocalInactiveMonths = each.LifeToDateInactiveMonths
				include 306AdjustDateForInact

			if (each.Convention.ActualDays)
				LocalDeprEndDate = LocalDepreciationStartDate
			else
				if (each.DepreciationEndDate entered)
					LocalDeprEndDate = each.DepreciationEndDate
				else
					LocalDeprEndDate = (LocalDepreciationStartDate - 1 day)
					LocalDeprEndDate += LocalInactiveMonths as months

		306AdjustDateForInact
			initialize I1
			initialize Year1
			initialize Month1
			while (LocalInactiveMonths >= 12)
				Year1 +=1
				LocalInactiveMonths -= 12

			while (LocalInactiveMonths >= 1)
				Month1 +=1
				LocalInactiveMonths -= 1
				if (Month1 >12)
					Month1 = 1
					Year1 +=1

			if (LocalInactiveMonths entered)
				LocalInactiveMonths *= 12
				LocalInactiveMonths /= 365
			else
				initialize LocalInactiveMonths

		310Months
			if (each.InServiceDate >= CurrentBookCalendarsRel2.YearBeginDate
			and each.InServiceDate <= CurrentBookCalendarsRel2.YearEndDate)
				include 320FirstYearMonths
			else
				if (LocalDeprEndDate >= CurrentBookCalendarsRel2.YearBeginDate
				and LocalDeprEndDate <= CurrentBookCalendarsRel2.YearEndDate
				or (LocalDeprEndDate < CurrentBookCalendarsRel2.YearBeginDate))
					include 330LastYearMonths
				else
					include 340MiddleYearMonths
				


			if (each.Method		= "SL"
			or each.Method 		= 	"SL20%"
			or each.Method 		= 	"SL30%"
			or each.Method 		=  	"SL40%"
			or each.Method 		=  	"SL50%"
			or each.Method 		=  	"SL60%"
			or each.Method 		=  	"SL75%"
			or each.Method 		=  	"SL80%")
				if (!each.FirstAndLastYear.CompletelyDepreciated
				and DisposalDate < LocalDeprEndDate)
					include CalculationCurrentYearAnnualDepreciation

				if (LocalLife < 12 
				and DisposalDate > LocalDeprEndDate)
					LocalAnnualDepreciation = (each.Basis * 12)
					LocalAnnualDepreciation /= LocalLife
			else
			if (each.Method 	= "200DB"
			or each.Method		= "175DB"
			or each.Method		= "150DB"
			or each.Method		= "125DB"
			or each.Method		= "0.30DB"
			or each.Method		= "200DB30"
			or each.Method		= "150DB30"
			or each.Method		= "200DB40"
			or each.Method		= "150DB30%"
			or each.Method		= "200DB30%"
			or each.Method		= "200DB40%"
			or each.Method		= "150DB40%"
			or each.Method		= "200DB50%"
			or each.Method		= "150DB50%"
			or each.Method		= "200DB20%"
			or each.Method		= "150DB20%"
			or each.Method		= "200DB60%"
			or each.Method		= "150DB60%"
			or each.Method		= "200DB75%"
			or each.Method		= "150DB75%"
			or each.Method		= "200DB80%"
			or each.Method		= "150DB80%")
				if (!each.FirstAndLastYear.CompletelyDepreciated
				and DisposalDate < LocalDeprEndDate)
					include CalculationCurrentYearDBAnnualDepreciation
				if (DisposalDate > LocalDeprEndDate)
					LocalAnnualDepreciation 		= each.Basis + each.YearToDateDepreciation - each.LifeToDateDepreciation
	
			if(LocalLife < 12)	
				if (CurrentBookCalendarsRel2 exists)
					T1	= CurrentBookCalendarsRel2.NumberOfPeriodCloseRuns
					CurrentPeriod	= CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[T1]
					LocalDisposalDate = CurrentPeriod
					P1 = T1
					if (DisposalDate > LocalDisposalDate)
						while (DisposalDate > LocalDisposalDate)
							P1 = P1 + 1
							LocalDisposalDate = CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[P1]
						LocalMonthsToAdjust	= P1 - T1
						if (each.Convention.FullMonth
						or (each.Convention.ModifiedHalfMonth
						and  each.DepreciationStartDate < each.InServiceDate))
							LocalMonthsToAdjust	= LocalMonthsToAdjust - 1
						else
							if (each.Convention.MidMonth)
								LocalMonthsToAdjust	= LocalMonthsToAdjust - 0.5
							else
								if (each.Convention.NextMonth
								or (each.Convention.ModifiedHalfMonth
								and  each.DepreciationStartDate > each.InServiceDate))
									LocalMonthsToAdjust	= LocalMonthsToAdjust
					else
						while (DisposalDate <= LocalDisposalDate)
							P1 = P1 - 1
							LocalDisposalDate = CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[P1]
						LocalDisposalDate = CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[P1+1]
						LocalMonthsToAdjust	= P1 - T1
						if (each.Convention.FullMonth
						or (each.Convention.ModifiedHalfMonth
						and  each.DepreciationStartDate < each.InServiceDate))
							LocalMonthsToAdjust	= LocalMonthsToAdjust - 1
						else
							if (each.Convention.MidMonth)
								LocalMonthsToAdjust	= LocalMonthsToAdjust - 0.5
							else
								if (each.Convention.NextMonth
								or (each.Convention.ModifiedHalfMonth
								and  each.DepreciationStartDate < each.InServiceDate))
									LocalMonthsToAdjust	= LocalMonthsToAdjust
				LocalDisposalDepr = (LocalAnnualDepreciation / LocalAvailMonths)
				LocalDisposalDepr = LocalDisposalDepr * LocalDisposalMonths
				LocalDisposalDepr = LocalDisposalDepr - LocalDeprYtdUpdate
			else
				if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
					LocalNewDeprYTD = ((LocalAnnualDepreciation / LocalCurrentAvailMonths) * LocalCurrentDisposalMonths - ((LocalAnnualDepreciation / LocalCurrentAvailMonths) * LocalInActiveYTD))
				else
					LocalNewDeprYTD = ((LocalAnnualDepreciation / LocalAvailMonths) * LocalDisposalMonths - ((LocalAnnualDepreciation / LocalAvailMonths) * LocalInActiveYTD))
				if ((each.Method = "200DB30%"
				or each.Method = "150DB30%"
				or each.Method = "SL30%"
				or each.Method = "200DB40%"
				or each.Method = "150DB40%"
				or each.Method =  "SL40%"
				or each.Method = "200DB50%"
				or each.Method = "150DB50%"
				or each.Method =  "SL50%"
				or each.Method =  "SL75%"
				or each.Method = "200DB75%"
				or each.Method = "150DB75%"
				or each.Method =  "SL20%"
				or each.Method = "200DB20%"
				or each.Method = "150DB20%"
				or each.Method =  "SL60%"
				or each.Method = "200DB60%"
				or each.Method = "150DB60%"
				or each.Method =  "SL80%"
				or each.Method = "200DB80%"
				or each.Method = "150DB80%")
				and (each.FirstAndLastYear.First
				and LocalNewDeprYTD entered))
					LocalNewDeprYTD += AnnualDepreciation.LocalDeprBonus
				if (each.Method = "100%BONUS"
				and each.FirstAndLastYear.First
				and LocalDisposalMonths entered)
					LocalNewDeprYTD += LocalDeprBonus
				round LocalNewDeprYTD to nearest DerivedRoundTo	
				if (LocalNewDeprYTD = LocalDeprYtdUpdate)
					initialize LocalDisposalDepr
				else
					if (each.LifeRemaining entered)
						LocalDisposalDepr = LocalNewDeprYTD - LocalDeprYtdUpdate
				if (LocalDisposalDepr >= -0.05
				and LocalDisposalDepr <= 0.05)
					initialize LocalDisposalDepr
				if (each.LifeToDateDepreciation = each.Basis
				or (each.Convention.FullMonth
				and DisposalDate > CurrentBookCalendarsRel2.LastPeriodDate
				and DisposalDate <= CurrentBookCalendarsRel2.CurrentPeriodDate))
					if (!LocalDepreciationPeriodsPerYear = CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[1])
						initialize LocalDisposalDepr
			LocalDeprYtdUpdate	+= LocalDisposalDepr
			LocalDeprLtdUpdate	+= LocalDisposalDepr

		320FirstYearMonths
			NumberMonths.InBook				= each.Book
			NumberMonths.InCompany			= Asset.Company
			if (each.Convention.MidMonth
			and !(each.Method	= "SL"
			or each.Method 		= 	"SL20%"
			or each.Method 		= 	"SL30%"
			or each.Method 		=  	"SL40%"
			or each.Method 		=  	"SL50%"
			or each.Method 		= 	"SL60%"
			or each.Method 		=  	"SL75%"
			or each.Method 		= 	"SL80%"))
				NumberMonths.InServiceDate 		= LocalYearBeginDate
			else
				NumberMonths.InServiceDate 		= LocalInsrvDate
			if (CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[1] = CurrentBookCalendarsRel2.DepreciationPeriodsPerYear)
				if (LocalYearBeginDate month <= CurrentBookCalendarsRel.YearEndDate month)
					LocalTriggerMonths = CurrentBookCalendarsRel.YearEndDate month - LocalYearBeginDate month + 1
				else
				if (LocalYearBeginDate month > CurrentBookCalendarsRel.YearEndDate month)
					LocalTriggerMonths = 13 - (LocalYearBeginDate month - CurrentBookCalendarsRel.YearEndDate month)
				LocalAvailMonths				= LocalTriggerMonths
			else
				NumberMonths.YearEndDate		= LocalYearEndDate
				NumberMonths.YearBeginDate		= LocalYearBeginDate
				NumberMonths.Convention			= each.Convention
				NumberMonths.LastPeriodEnd		= LocalYearEndDate
				NumberMonths.InPrevYearEndDate	= LocalYearBeginDate - 1 day
				LocalAvailMonths				= NumberMonths.ReturnNumberOfMonths
				if (each.Convention.ActualDaysFirstMonth)
					LocalAvailMonths -= 1
					LocalAnnualYearDays = CurrentBookCalendarsRel2.YearEndDate  - CurrentBookCalendarsRel2.YearBeginDate
					LocalAnnualYearDays += 1
					LocalDaysFirstYear		= InserviceMonthEndDate - each.InServiceDate
					LocalDaysFirstYear += 1
					LocalFirstMonthDays = (LocalDaysFirstYear * 12)
					LocalFirstMonthDays /= LocalAnnualYearDays
					LocalAvailMonths += LocalFirstMonthDays

			if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
				LocalCurrentAvailMonths	= CurrentBookCalendarsRel2.DepreciationPeriodsPerYear
			if (each.Convention.MidMonth
			and !(each.Method	= "SL"
			or each.Method 		= 	"SL20%"
			or each.Method 		= 	"SL30%"
			or each.Method 		=  	"SL40%"
			or each.Method 		=  	"SL50%"
			or each.Method 		= 	"SL60%"
			or each.Method 		=  	"SL75%"
			or each.Method 		= 	"SL80%"))
				NumberMonths.InServiceDate = LocalInsrvDate
			LocalDisposalDate 				= DisposalDate
			NumberMonths.LastPeriodEnd		= LocalDisposalDate
			if (CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[1] = CurrentBookCalendarsRel2.DepreciationPeriodsPerYear)
				if (LocalInsrvDate month <= DisposalDate month)
					LocalTriggerMonths = DisposalDate month - LocalInsrvDate month + 1
				else
				if (LocalInsrvDate month > DisposalDate month)
					LocalTriggerMonths = 13 - (LocalInsrvDate month - DisposalDate month)
			else
				LocalTriggerMonths				= NumberMonths.ReturnNumberOfMonths
			if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
				LocalCurrentDisposalMonths	= NumberMonths.LocalCurrentPeriodCount
			LocalDisposalMonths				= LocalTriggerMonths
			if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
				if (each.InServiceDate != DisposalDate)
					LocalCurrentDisposalMonths	= LocalCurrentDisposalMonths - DisposalMonth
				if (each.Convention.MidMonth)
					LocalCurrentDisposalMonths = LocalCurrentDisposalMonths + (DisposalMonth /2)
					LocalCurrentDisposalMonths -= (InserviceMonth / 2)
			else
				LocalDisposalMonths			-= 1
				if (each.Convention.ActualDaysFirstMonth)
					LocalDisposalMonths -= 1
					LocalDisposalMonths += LocalFirstMonthDays
			if (LocalLife < 12)
				LocalAnnualDepreciation = LocalAnnualDepreciation/LocalAvailMonths * LocalDisposalMonths
			else
				LocalAnnualDepreciation = LocalAnnualDepreciation/12 * LocalAvailMonths
			if (each.Convention.NextMonth
			or (each.Convention.ModifiedHalfMonth
			and  each.DepreciationStartDate > each.InServiceDate))
				if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
					LocalCurrentDisposalMonths = LocalCurrentDisposalMonths + DisposalMonth
				else
					LocalDisposalMonths += 1

			if (!each.Active)
				include 345InactMonthAdj

		330LastYearMonths
			LocalInsrvDate = CurrentBookCalendarsRel2.YearBeginDate
			if (each.FirstAndLastYear.First)
				LocalInsrvDate = each.DepreciationStartDate

			LocalYearEndDate = CurrentBookCalendarsRel2.YearEndDate
			if (LocalDeprEndDate > LocalYearBeginDate)
				if (!(each.Method	= "SL"
				or each.Method 		= 	"SL20%"
				or each.Method 		= 	"SL30%"
				or each.Method 		=  	"SL40%"
				or each.Method 		= 	"SL50%"
				or each.Method 		= 	"SL60%"
				or each.Method 		=  	"SL75%"
				or each.Method 		= 	"SL80%"))



					NumberMonths.LastPeriodEnd	= LocalDeprEndDate
				else
					if (each.Convention.MidMonth
					and LocalDeprEndDate > LocalYearBeginDate
					and LocalDeprEndDate < LocalYearEndDate)
						NumberMonths.LastPeriodEnd = LocalYearEndDate
					else
					if (DisposalDate > LocalDeprEndDate)
						NumberMonths.LastPeriodEnd = LocalYearEndDate
					else
						NumberMonths.LastPeriodEnd	= LocalDeprEndDate
			else
				NumberMonths.LastPeriodEnd	= LocalYearBeginDate
			if (CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[1] = CurrentBookCalendarsRel2.DepreciationPeriodsPerYear)
				if (LocalDeprEndDate > LocalYearBeginDate
				and LocalDeprEndDate < LocalYearEndDate)
					LocalDepreciationEndDate = LocalDeprEndDate
				else
					LocalDepreciationEndDate = CurrentBookCalendarsRel2.YearEndDate
				if (LocalInsrvDate month <= CurrentBookCalendarsRel2.YearEndDate month)
					LocalTriggerMonths = CurrentBookCalendarsRel2.YearEndDate month - LocalInsrvDate month + 1
				else
				if (LocalInsrvDate month > CurrentBookCalendarsRel2.YearEndDate month)
					LocalTriggerMonths = 13 - (LocalInsrvDate month - CurrentBookCalendarsRel2.YearEndDate month)
				LocalAvailMonths				= LocalTriggerMonths
			else
				NumberMonths.InBook				= each.Book
				NumberMonths.InCompany			= Asset.Company
				NumberMonths.InServiceDate 		= LocalInsrvDate
				NumberMonths.YearEndDate		= LocalYearEndDate
				NumberMonths.YearBeginDate		= LocalYearBeginDate
				NumberMonths.Convention			= each.Convention
				NumberMonths.InPrevYearEndDate	= LocalYearBeginDate - 1 day
				LocalTriggerMonths				= NumberMonths.ReturnNumberOfMonths
				LocalAvailMonths				= LocalTriggerMonths
			if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
				if (each.Method	= "SL"
				or each.Method 		= 	"SL20%"
				or each.Method 		= 	"SL30%"
				or each.Method 		=  	"SL40%"
				or each.Method 		= 	"SL50%"
				or each.Method 		= 	"SL60%"
				or each.Method 		=  	"SL75%"
				or each.Method 		= 	"SL80%")
					LocalCurrentAvailMonths		= CurrentBookCalendarsRel2.DepreciationPeriodsPerYear
				else
					LocalCurrentAvailMonths		= NumberMonths.LocalCurrentPeriodCount
			if (LocalInsrvDate day > 15
			and LocalInsrvDate month != LocalYearEndDate month)
				LocalAvailMonths -= 1

			if (each.Convention.MidMonth)
				if (!(each.Method	= "SL"
				or each.Method 		= 	"SL20%"
				or each.Method 		= 	"SL30%"
				or each.Method 		=  	"SL40%"
				or each.Method 		= 	"SL50%"
				or each.Method 		= 	"SL60%"
				or each.Method 		=  	"SL75%"
				or each.Method 		= 	"SL80%"))
					LocalAvailMonths -= .5




			if (!each.FirstAndLastYear.CompletelyDepreciated
			and !(CurrentBookCalendarsRel2.DepreciationPeriodsPerYear = 1))
				include CalculateLocalAnnualDepreciationLastYear
			LocalInsrvDate = CurrentBookCalendarsRel2.YearBeginDate
			if (each.FirstAndLastYear.First)
				LocalInsrvDate = each.DepreciationStartDate
			NumberMonths.InServiceDate 		= LocalInsrvDate
			if (DisposalDate > LocalDeprEndDate)
				NumberMonths.LastPeriodEnd	= LocalDeprEndDate







				LocalDisposalMonthsNumber 	= 0
			else
				NumberMonths.LastPeriodEnd	= LocalDisposalDate
				LocalDisposalMonthsNum 		= DisposalMonth
				LocalDisposalMonthsNumber 	= 1
			if (CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[1] = CurrentBookCalendarsRel2.DepreciationPeriodsPerYear)
				if (DisposalDate > LocalDeprEndDate)
					LocalDepreciationEndDate = LocalDeprEndDate
				else
					LocalDepreciationEndDate = DisposalDate
				if (LocalInsrvDate month <= LocalDepreciationEndDate month)
					LocalTriggerMonths = LocalDepreciationEndDate month - LocalInsrvDate month + 1
				else
				if (LocalInsrvDate month > LocalDepreciationEndDate month)
					LocalTriggerMonths = 13 - (LocalInsrvDate month - LocalDepreciationEndDate month)
			else
				LocalTriggerMonths				= NumberMonths.ReturnNumberOfMonths
			if (each.FirstAndLastYear.CompletelyDepreciated)
				LocalAvailMonths	 		= LocalTriggerMonths
				if (each.Convention.MidMonth)
					LocalAvailMonths		   -= 0.5
			if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
				LocalCurrentDisposalMonths	= NumberMonths.LocalCurrentPeriodCount
			LocalDisposalMonths				= LocalTriggerMonths
			if 	(each.Convention.MidMonth
			and !DisposalDate > LocalDeprEndDate
			and !each.FirstAndLastYear.First)
				if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
					LocalCurrentDisposalMonths = LocalCurrentDisposalMonths + (DisposalMonth / 2)
				else
					LocalDisposalMonths += .5
			if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
				LocalCurrentDisposalMonths -= LocalDisposalMonthsNum
			else
				LocalDisposalMonths				-= LocalDisposalMonthsNumber
				if (LocalDisposalMonthsNumber = 0)
					if (each.Convention.MidMonth
					and LocalDeprEndDate > LocalYearBeginDate
					and LocalDeprEndDate < LocalYearEndDate)
						LocalDisposalMonths 	-= .5
			if (each.Convention.FullMonth
			or  each.Convention.NextMonth
			or  each.Convention.ModifiedHalfMonth
			or 	each.Convention.MidMonth)
				if (LocalYearEndDate day < 15
				and LocalInsrvDate month != LocalYearEndDate month
				and LocalInsrvDate		 != LocalYearEndDate)
					if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
						LocalCurrentDisposalMonths = LocalCurrentDisposalMonths - DisposalMonth
					else
						LocalDisposalMonths += 1

			if (LocalInsrvDate day > 15
			and LocalInsrvDate month != LocalYearEndDate month)
				LocalDisposalMonths -= 1

			if ((each.Convention.NextMonth
			and !DisposalDate > LocalDeprEndDate)
			or	(each.Convention.ModifiedHalfMonth
			and  LocalDeprStartDate > each.InServiceDate))
				if (!(each.Convention.ModifiedHalfMonth
				and each.FirstAndLastYear.CompletelyDepreciated))
					if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
						LocalCurrentDisposalMonths = LocalCurrentDisposalMonths + DisposalMonth
					else
						LocalDisposalMonths += 1

			if (!each.Active)
				include 345InactMonthAdj

		340MiddleYearMonths
			if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
				LocalCurrentAvailMonths		= CurrentBookCalendarsRel2.DepreciationPeriodsPerYear
			LocalAvailMonths				= 12
			LocalDisposalDate 				= DisposalDate
			if (LocalYearEndDate not entered)
				LocalYearEndDate = CurrentBookCalendarsRel2.YearEndDate
			if (CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[1] = CurrentBookCalendarsRel2.DepreciationPeriodsPerYear)
				if (CurrentBookCalendarsRel2.YearBeginDate month <= DisposalDate month)
					LocalTriggerMonths = DisposalDate month - CurrentBookCalendarsRel2.YearBeginDate month + 1
				else
				if (CurrentBookCalendarsRel2.YearBeginDate month > DisposalDate month)
					LocalTriggerMonths = 13 - (CurrentBookCalendarsRel2.YearBeginDate month - DisposalDate month)
			else
				NumberMonths.InBook				= each.Book
				NumberMonths.InCompany			= Asset.Company
				NumberMonths.InServiceDate 		= LocalYearBeginDate
				NumberMonths.YearEndDate		= LocalYearEndDate
				NumberMonths.LastPeriodEnd		= LocalDisposalDate
				NumberMonths.YearBeginDate		= LocalYearBeginDate
				NumberMonths.Convention			= each.Convention
				NumberMonths.InPrevYearEndDate	= LocalYearBeginDate - 1 day
				LocalTriggerMonths				= NumberMonths.ReturnNumberOfMonths
			if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
				LocalCurrentDisposalMonths	= NumberMonths.LocalCurrentPeriodCount
			if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
				LocalCurrentDisposalMonths = LocalCurrentDisposalMonths - DisposalMonth
			else
				LocalDisposalMonths				= LocalTriggerMonths - 1
			if (each.Convention.MidMonth)
				if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
					LocalCurrentDisposalMonths = LocalCurrentDisposalMonths + (DisposalMonth / 2)
				else
					LocalDisposalMonths += .5
			if (each.Convention.NextMonth
			or  each.Convention.ModifiedHalfMonth
			and	each.DepreciationStartDate > each.InServiceDate)
				if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
					LocalCurrentDisposalMonths = LocalCurrentDisposalMonths + DisposalMonth
				else
					LocalDisposalMonths += 1

			if (!each.Active)
				include 345InactMonthAdj

		345InactMonthAdj
			LocalInActiveDisposalMonths		=  LocalBegYrLife - each.LifeRemaining
			if (LocalDisposalMonths >= LocalInActiveDisposalMonths)
				LocalDisposalMonths 		=  LocalInActiveDisposalMonths
			initialize LocalInActiveYTD

		350HalfYear
			if (!each.FirstAndLastYear.CompletelyDepreciated)

				if (!(each.FirstAndLastYear.Last
				and !(each.Method	= "SL"
				or each.Method 		= 	"SL20%"
				or each.Method 		= 	"SL30%"
				or each.Method 		=  	"SL40%"
				or each.Method 		= 	"SL50%"
				or each.Method 		= 	"SL60%"
				or each.Method 		=  	"SL75%"
				or each.Method 		= 	"SL80%")
				and each.LifeRemaining <= 6))
					include CalculateLocalAnnualDepreciationLastYear
			if ((each.FirstAndLastYear.CompletelyDepreciated
			and DisposalDate > LocalDeprEndDate)
			or AssetRel.AssetCategory.NonDepreciable)
				initialize LocalDisposalDepr
			else
				if (each.FirstAndLastYear.CompletelyDepreciated
				or each.FirstAndLastYear.Last
				and (LocalBegYrLife > 6))
					LocalDisposalDepr = (6/LocalBegYrLife)
					LocalDisposalDepr *= LocalAnnualDepreciation
					LocalDisposalDepr -= each.YearToDateDepreciation
				else
					if (each.FirstAndLastYear.CompletelyDepreciated
					or (each.FirstAndLastYear.Last
					and each.LifeRemaining <= 6)
					or  LocalLife <12)
						if (each.FirstAndLastYear.CompletelyDepreciated
						and each.YearToDateDepreciationOverride entered)
							LocalDisposalDepr = LocalAnnualDepreciation
							LocalDisposalDepr = LocalDisposalDepr * -1
						else
							LocalDisposalDepr = LocalAnnualDepreciation - LocalDeprYtdUpdate
					else
						LocalDisposalDepr = LocalAnnualDepreciation
						LocalDisposalDepr = LocalDisposalDepr - LocalDeprYtdUpdate
			if (LocalDisposalDepr >= -0.05
			and LocalDisposalDepr <= 0.05)
				initialize LocalDisposalDepr

			if (!each.Active
			and each.YearToDateDepreciation not entered)
				initialize LocalDisposalDepr

			if (each.LifeToDateDepreciation = each.Basis)
				initialize LocalDisposalDepr

			LocalDeprYtdUpdate	+= LocalDisposalDepr
			LocalDeprLtdUpdate	+= LocalDisposalDepr


		360NextYear
			LocalDisposalDepr = LocalAnnualDepreciation - LocalDeprYtdUpdate

			if (!each.Active
			and LocalDeprYtd not entered)
				initialize LocalDisposalDepr

			LocalDeprYtdUpdate	+= LocalDisposalDepr
			LocalDeprLtdUpdate	+= LocalDisposalDepr

		370FullYear
			initialize LocalDisposalDepr
			LocalDisposalDepr	-= LocalDeprYtd
			LocalDeprYtdUpdate	+= LocalDisposalDepr
			LocalDeprLtdUpdate	+= LocalDisposalDepr

		380ActualDays
			initialize LocalLastPeriodEndDate
			initialize LocalSkip
			if (CurrentBookCalendarsRel2.NumberOfPeriodCloseRuns not entered)
				LocalLastPeriodEndDate	= CurrentBookCalendarsRel2.YearBeginDate - 1 day
			else
				I8 = CurrentBookCalendarsRel2.NumberOfPeriodCloseRuns
				LocalLastPeriodEndDate = CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I8]

			if (DisposalDate = LocalLastPeriodEndDate)
				LocalDisposalDepr = 0
				LocalSkip 	= true
			if (!LocalSkip)
				if (each.FirstAndLastYear.First
				and LocalDeprEndDate >= CurrentBookCalendarsRel2.YearEndDate)
					include 381FirstYearDays
				else
					if (each.FirstAndLastYear.Last
					or  each.FirstAndLastYear.CompletelyDepreciated
					or  each.FirstAndLastYear.First
					and LocalDeprEndDate < CurrentBookCalendarsRel2.YearEndDate)
						include 382LastYearDays
					else
						include 383MiddleYearDays

				if (each.FirstAndLastYear.First)
					LocalNewDeprYTD		= LocalAnnualDepreciation

				if (each.FirstAndLastYear.Middle)
					LocalNewDeprYTD 	= ((LocalAnnualDepreciation / LocalDaysInYear) * LocalDaysToDisposal)

				if (each.FirstAndLastYear.CompletelyDepreciated)
					if (LocalDaysToDisposal > LocalDaysInYear)
						LocalNewDeprYTD	= LocalDeprYtdUpdate
					else
						LocalNewDeprYTD = ((LocalAnnualDepreciation / LocalDaysInYear) * LocalDaysToDisposal)

				if (each.FirstAndLastYear.Last)
					if (LocalDeprEndDate < CurrentBookCalendarsRel2.YearEndDate)
						LocalDaysLastYear = LocalDeprEndDate - CurrentBookCalendarsRel2.YearBeginDate
						LocalAnnualDepreciation = each.Basis - each.SalvageValue - each.LifeToDateDepreciation + each.YearToDateDepreciation
					else
						LocalDaysLastYear 	= CurrentBookCalendarsRel2.YearEndDate - CurrentBookCalendarsRel2.YearBeginDate
						LocalDaysLastYear	+= 1
					LocalNewDeprYTD 	= ((LocalAnnualDepreciation / LocalDaysLastYear) * LocalDaysToDisposal)
					round LocalNewDeprYTD to nearest DerivedRoundTo
					LocalDisposalDepr = LocalNewDeprYTD - LocalDeprYtdUpdate
					if ((LocalDisposalDepr > each.BookValue
					and !each.Book.Impairment)
					or (each.Book.Impairment
					and LocalDisposalDepr < each.BookValue))
						LocalNewDeprYTD = LocalNewDeprYTD	 - (LocalDisposalDepr - each.BookValue)

				if(!each.Active
				and each.YearToDateDepreciation not entered)
					initialize LocalNewDeprYTD

				LocalDisposalDepr = LocalNewDeprYTD - LocalDeprYtdUpdate
				if (LocalDisposalDepr >= -0.05
				and LocalDisposalDepr <= 0.05)
					initialize LocalDisposalDepr
				if (each.LifeToDateDepreciation = each.Basis
				or AssetRel.AssetCategory.NonDepreciable)
					initialize LocalDisposalDepr
			LocalDeprYtdUpdate	+= LocalDisposalDepr
			LocalDeprLtdUpdate	+= LocalDisposalDepr

		381FirstYearDays
			LocalAnnualYearDays = CurrentBookCalendarsRel2.YearEndDate  - CurrentBookCalendarsRel2.YearBeginDate
			LocalAnnualYearDays +=1
			LocalDaysFirstYear		= CurrentBookCalendarsRel2.YearEndDate - each.DepreciationStartDate

			if (LocalDeprEndDate < CurrentBookCalendarsRel2.YearEndDate)
				LocalToDate = LocalDeprEndDate
			else
				LocalToDate = CurrentBookCalendarsRel2.YearEndDate

			LocalDaysToDisposal = DisposalDate - each.DepreciationStartDate
			LocalDaysToDisposal +=1
			LocalAnnualDepreciation	= LocalAnnualDepreciation *(LocalDaysFirstYear/LocalAnnualYearDays)
			LocalAnnualDepreciation	= LocalAnnualDepreciation *(LocalDaysToDisposal/LocalDaysFirstYear)

		382LastYearDays
			LocalFromDate	= CurrentBookCalendarsRel2.YearBeginDate
			if (each.FirstAndLastYear.First)
				LocalFromDate	= each.DepreciationStartDate
			LocalToDate = LocalDeprEndDate
			LocalDaysInYear = LocalToDate - LocalFromDate
			LocalFromDate = CurrentBookCalendarsRel2.YearBeginDate
			if (each.FirstAndLastYear.First)
				LocalFromDate	 = each.DepreciationStartDate
			if (DisposalDate > 	LocalDeprEndDate)
				LocalToDate		= LocalDeprEndDate
				LocalAddADay	= 0
			else
				LocalToDate		= DisposalDate
				LocalAddADay	= 1
			LocalDaysToDisposal	= LocalToDate - LocalFromDate
			LocalDaysToDisposal = LocalDaysToDisposal + LocalAddADay
			if (LocalInActiveYTD entered)
				include 385InactDaysAdj

		383MiddleYearDays
			LocalFromDate	= CurrentBookCalendarsRel2.YearBeginDate
			LocalToDate	= CurrentBookCalendarsRel2.YearEndDate

			LocalDaysInYear = LocalToDate - LocalFromDate
			LocalDaysInYear += 1

			LocalFromDate		= CurrentBookCalendarsRel2.YearBeginDate
			LocalToDate			= DisposalDate
			LocalDaysToDisposal = LocalToDate - LocalFromDate
			LocalDaysToDisposal += 1

			if (LocalInActiveYTD entered)
				include 385InactDaysAdj

		385InactDaysAdj
			LocalFromDate	= CurrentBookCalendarsRel2.YearBeginDate
			LocalToDate		= CurrentBookCalendarsRel2.YearEndDate

			LocalAvgDays	= 	LocalToDate - LocalFromDate
			LocalAvgDays	+= 1
			if (LocalNumberCalPeriods entered)
				LocalAvgDays	/= LocalNumberCalPeriods

			LocalInactiveDays	= LocalAvgDays * LocalInActiveYTD

			if (!each.Active
			and DisposalDate > CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarsRel2.NumberOfPeriodCloseRuns])
				LocalFromDate		= CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarsRel2.NumberOfPeriodCloseRuns]
				LocalToDate			= DisposalDate
				LocalDaysToDisposal	= LocalToDate - LocalFromDate
				LocalDaysToDisposal	+= 1

			if (LocalInactiveDays < LocalDaysToDisposal)
				LocalDaysToDisposal -= LocalInactiveDays

			initialize LocalInActiveYTD

		390MidQuarter
			if (each.FirstAndLastYear.First)
				include 391FirstYearMidQtrs
			else
				if (each.FirstAndLastYear.Last
				or each.FirstAndLastYear.CompletelyDepreciated)
					include 393LastYearMidQtrs
				else
					include 392MiddleYearMidQtrs
			LocalNewDeprYTD = ((LocalAnnualDepreciation/LocalAvailMonths)* LocalDisposalMonths)
			if (!each.Active
			and each.YearToDateDepreciation not entered)
				initialize LocalNewDeprYTD

			if ((each.Method = "200DB30%"
			or each.Method = "150DB30%"
			or each.Method = "SL30%"
			or each.Method = "200DB40%"
			or each.Method = "150DB40%"
			or each.Method =  "SL40%"
			or each.Method = "200DB50%"
			or each.Method = "150DB50%"
			or each.Method =  "SL50%"
			or each.Method = "200DB75%"
			or each.Method = "150DB75%"
			or each.Method =  "SL75%"
			or each.Method = "200DB20%"
			or each.Method = "150DB20%"
			or each.Method =  "SL20%"
			or each.Method = "200DB60%"
			or each.Method = "150DB60%"
			or each.Method =  "SL60%"
			or each.Method = "200DB80%"
			or each.Method = "150DB80%"
			or each.Method =  "SL80%")
			and each.FirstAndLastYear.First
			and LocalNewDeprYTD entered)
				LocalNewDeprYTD += LocalDeprBonus
			round LocalNewDeprYTD to nearest DerivedRoundTo
			LocalDisposalDepr = LocalNewDeprYTD - each.YearToDateDepreciation
			if (LocalDisposalDepr >= -0.05
			and LocalDisposalDepr <= 0.05)
				initialize LocalDisposalDepr
			if (each.LifeToDateDepreciation = each.Basis)
				initialize LocalDisposalDepr
			LocalDeprLtdUpdate		+= LocalDisposalDepr
			LocalDeprYtdUpdate		+= LocalDisposalDepr

		391FirstYearMidQtrs
			LocalInsrvDate					= each.InServiceDate
			MonthsProcessed.InBook			= each.Book
			MonthsProcessed.InCompany		= Asset.Company
			MonthsProcessed.InServiceDate	= LocalInsrvDate
			MonthsProcessed.InDeprStartDate = each.DepreciationStartDate
			MonthsProcessed.InYearEndDate	= LocalYearEndDate
			MonthsProcessed.InYearBeginDate	= LocalYearBeginDate
			MonthsProcessed.Convention		= each.Convention
			MonthsProcessed.LastPeriodEnd	= LocalYearEndDate
			LocalTriggerMonths				= MonthsProcessed.ReturnNumberOfMonthsProcessed
			LocalAvailMonths				= LocalTriggerMonths 

			include CalculationCurrentYearAnnualDepreciationMidQuarter
			LocalDisposalDate				= DisposalDate
			if (LocalInsrvDate >= BookCalendarRel.YearBeginDate)
				MonthsProcessed.InServiceDate	= LocalDisposalDate
				MonthsProcessed.InDeprStartDate = LocalDisposalDate
				LocalTriggerMonths				= MonthsProcessed.ReturnNumberOfMonthsProcessed
				LocalDisposalMonths				= LocalAvailMonths - LocalTriggerMonths
				if (LocalDisposalMonths not entered)
					LocalDisposalMonths 		= 1.5
			else
				MonthsProcessed.LastPeriodEnd 	= LocalDisposalDate
				LocalTriggerMonths				= MonthsProcessed.ReturnNumberOfMonthsProcessed
				LocalDisposalMonths				= LocalTriggerMonths
				LocalDisposalMonths				-= 1.5

		392MiddleYearMidQtrs
			LocalAvailMonths					= 12
			if (each.Method 	= "200DB"
			or each.Method		= "175DB"
			or each.Method		= "150DB"
			or each.Method		= "125DB"
			or each.Method		= "0.30DB"
			or each.Method		= "200DB30"
			or each.Method		= "150DB30"
			or each.Method		= "200DB40"
			or each.Method		= "150DB40%"
			or each.Method		= "200DB50%"
			or each.Method		= "150DB50%")
				include CalculationCurrentYearDBAnnualDepreciation
			LocalDeprStartDate					= each.DepreciationStartDate
			MonthsProcessed.InBook				= each.Book
			MonthsProcessed.InCompany			= Asset.Company
			MonthsProcessed.InDeprStartDate		= LocalYearBeginDate
			MonthsProcessed.InYearEndDate		= LocalYearEndDate
			MonthsProcessed.InYearBeginDate		= LocalYearBeginDate
			MonthsProcessed.Convention			= each.Convention
			MonthsProcessed.InServiceDate		= LocalYearBeginDate
			LocalDisposalDate					= DisposalDate
			MonthsProcessed.LastPeriodEnd		= LocalDisposalDate
			LocalTriggerMonths					= MonthsProcessed.ReturnNumberOfMonthsProcessed
			LocalDisposalMonths					= LocalTriggerMonths

		393LastYearMidQtrs
			LocalInsrvDate						= each.InServiceDate
			MonthsProcessed.InBook				= each.Book
			MonthsProcessed.InCompany			= Asset.Company
			MonthsProcessed.InDeprStartDate		= LocalYearBeginDate
			MonthsProcessed.InYearEndDate		= LocalYearEndDate
			MonthsProcessed.InYearBeginDate		= LocalYearBeginDate
			MonthsProcessed.Convention			= each.Convention
			MonthsProcessed.LastPeriodEnd		= LocalDeprEndDate
			MonthsProcessed.InServiceDate		= LocalYearBeginDate
			LocalTriggerMonths					= MonthsProcessed.ReturnNumberOfMonthsProcessed
			LocalAvailMonths					= LocalTriggerMonths

			include CalculationCurrentYearAnnualDepreciationMidQuarter
			if ((each.Basis - each.LifeToDateDepreciation + each.YearToDateDepreciation) < LocalAnnualDepreciation)
				LocalAnnualDepreciation = each.Basis - each.LifeToDateDepreciation + each.YearToDateDepreciation
			LocalDisposalDate					= DisposalDate
			if (LocalDisposalDate > LocalDeprEndDate)
				MonthsProcessed.LastPeriodEnd	= LocalDeprEndDate
			else
				MonthsProcessed.LastPeriodEnd	= LocalDisposalDate
			LocalTriggerMonths					= MonthsProcessed.ReturnNumberOfMonthsProcessed
			LocalDisposalMonths					= LocalTriggerMonths 
			if (LocalDisposalMonths not entered
			and !each.FirstAndLastYear.CompletelyDepreciated)
				LocalDisposalMonths = 1.5

		CalculateLocalAnnualDepreciationLastYear
			if (each.Convention.FullMonth)
				LocalAnnualDepreciation		= LocalAnnualDepreciation/CurrentBookCalendarsRel2.DepreciationPeriodsPerYear
				LocalAnnualDepreciation		= LocalAnnualDepreciation * LocalAvailMonths
			if (each.Convention.HalfYear)
				LocalAnnualDepreciation		= LocalAnnualDepreciation/2

		CalculationCurrentYearAnnualDepreciation
			initialize LocalPeriodsClosed
			if (CurrentBookCalendarsRel2 exists)
				I3	= CurrentBookCalendarsRel2.NumberOfPeriodCloseRuns
				if (I3 > 0)
					LastPeriodEnd = CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I3]
				else
					LocalPeriodsClosed = 0
			if (!I3 = 0)
				if (LocalInsrvDate <=LocalYearBeginDate)
					LocalPeriodsClosed				= CurrentBookCalendarsRel2.NumberOfPeriodCloseRuns
				else
					NumberMonths.YearBeginDate		= LocalYearBeginDate
					NumberMonths.InServiceDate 		= LocalInsrvDate
					NumberMonths.LastPeriodEnd		= LastPeriodEnd
					NumberMonths.InBook				= each.Book
					NumberMonths.InCompany			= Asset.Company
					NumberMonths.YearEndDate		= LocalYearEndDate
					NumberMonths.Convention			= each.Convention
					NumberMonths.InPrevYearEndDate	= LocalYearBeginDate - 1 day
					LocalPeriodsClosed				= NumberMonths.ReturnNumberOfMonths
					if (each.Convention.MidMonth)
						if (LocalInsrvDate > CurrentBookCalendarsRel2.LastPeriodDate
						and LocalInsrvDate < CurrentBookCalendarsRel2.YearEndDate)
							LocalPeriodsClosed = LocalPeriodsClosed
						else
							LocalPeriodsClosed			-= 0.5
					if (each.Convention.NextMonth
					or (each.Convention.ModifiedHalfMonth 
					and each.Life > 12))
						if(each.DepreciationStartDate > DisposalDate)
							LocalPeriodsClosed           -= 1
			if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12
			and each.Method = "SL")
				LocalAnnualDepreciation		= ((each.Basis - each.SalvageValue) / each.Life)
				LocalAnnualDepreciation		= LocalAnnualDepreciation * 12
			else
				LocalTaxCreditTable		= each.AssetTaxCreditTable
				if (AssetTaxCreditRel exists
				and AssetTaxCreditRel.BasisReductionPercentage entered)
					LocalBasisReductionPercentage = each.Basis * (AssetTaxCreditRel.BasisReductionPercentage/100)
				LocalNetBeginningValue 		= each.LifeToDateDepreciation - each.YearToDateDepreciation
				LocalBeginningLifeRemaining	= each.LifeRemaining + LocalPeriodsClosed
				LocalNetBeginningValue		= ((each.Basis - each.SalvageValue) - LocalNetBeginningValue)
				LocalNetBeginningValue		-= LocalBasisReductionPercentage
				LocalAnnualDepreciation		= LocalNetBeginningValue / LocalBeginningLifeRemaining
				LocalAnnualDepreciation		= LocalAnnualDepreciation * LocalAvailMonths

		CalculationCurrentYearDBAnnualDepreciation
			initialize LocalPeriodsClosed
			initialize LocalRoundedDepreciation
			LocalTaxCreditTable		= each.AssetTaxCreditTable
			if (AssetTaxCreditRel exists
			and AssetTaxCreditRel.BasisReductionPercentage entered)
				LocalBasisReductionPercentage = each.Basis * (AssetTaxCreditRel.BasisReductionPercentage/100)
			if (each.FirstAndLastYear.First)
				LocalRoundedDepreciation 		= each.Basis - AnnualDepreciation.LocalDeprBonus
			else
				LocalRoundedDepreciation 		= each.Basis
			LocalRoundedDepreciation		-= LocalBasisReductionPercentage
			LocalRoundedDepreciation 		= LocalRoundedDepreciation + each.YearToDateDepreciation - each.LifeToDateDepreciation
			if (LocalDeprEndDate >= CurrentBookCalendarsRel2.YearEndDate)
				LocalRoundedDepreciation 	= LocalRoundedDepreciation * AnnualDepreciation.LocalDBPercent
				LocalRoundedDepreciation		= LocalRoundedDepreciation / each.Life
				if (each.Convention.MidQuarter)
					LocalAnnualDepreciation = LocalRoundedDepreciation * LocalAvailMonths
				else
					LocalAnnualDepreciation = LocalRoundedDepreciation * 12
			else
				LocalAnnualDepreciation = LocalRoundedDepreciation
			if (BookRel.MethodSwitch)
				LocalSavedAnnualDepreciation = LocalAnnualDepreciation
				include CalculationCurrentYearAnnualDepreciation
				if (!each.FirstAndLastYear.PostRecovery)
					if ((LocalAnnualDepreciation entered
					and LocalAnnualDepreciation <= LocalSavedAnnualDepreciation)
					or (LocalAnnualDepreciation not entered
					and LocalAnnualDepreciation >= LocalSavedAnnualDepreciation))
						LocalAnnualDepreciation = LocalSavedAnnualDepreciation

		CalculationCurrentYearAnnualDepreciationMidQuarter
			initialize LocalPeriodsClosed
			if (CurrentBookCalendarsRel2 exists)
				I3	= CurrentBookCalendarsRel2.NumberOfPeriodCloseRuns
				if (I3 > 0)
					LastPeriodEnd = CurrentBookCalendarsRel2.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I3]
				else
					LocalPeriodsClosed = 0
			if (!I3 = 0)
				if (LocalInsrvDate >=LocalYearBeginDate)
					LocalPeriodsClosed				= each.Life - each.LifeRemaining
				else
					if (CurrentBookCalendarsRel2.DepreciationPeriodsPerYear >12)
						LocalPeriodsClosed = ((12*CurrentBookCalendarsRel2.NumberOfDepreciationPeriodsClosed)/CurrentBookCalendarsRel2.DepreciationPeriodsPerYear)
					else
						LocalPeriodsClosed				= CurrentBookCalendarsRel2.NumberOfPeriodCloseRuns
			LocalNetBeginningValue 		= each.LifeToDateDepreciation - each.YearToDateDepreciation
			LocalBeginningLifeRemaining	= each.LifeRemaining + LocalPeriodsClosed
			LocalNetBeginningValue		= ((each.Basis - each.SalvageValue) - LocalNetBeginningValue)
			if (AnnualDepreciation.LocalDeprBonus entered)
				LocalDeprBonus			= AnnualDepreciation.LocalDeprBonus
				LocalNetBeginningValue	= LocalNetBeginningValue - LocalDeprBonus
			LocalAnnualDepreciation		= LocalNetBeginningValue / LocalBeginningLifeRemaining
			LocalAnnualDepreciation		= LocalAnnualDepreciation * LocalAvailMonths
			if (AnnualDepreciation.LocalDBPercent entered)
				LocalAnnualDepreciation = LocalAnnualDepreciation * AnnualDepreciation.LocalDBPercent


		GetLocalNumberOfDecimals
			if (each.Book.PostCurrency.Book)
				LocalNumberOfDecimals =  each.Book.Currency.NumberOfDecimals
			else
				LocalNumberOfDecimals =  each.Asset.Currency.NumberOfDecimals


		400CalcGainLoss


			include GetLocalNumberOfDecimals
			if (LocalDisposalDepr entered)
				LocalAmount				= LocalDisposalDepr
				LocalDisposalDepr		= RoundedTransactionAmount
			else
				if (LocalUpdateDisposalDepr entered)
					LocalAmount			= LocalUpdateDisposalDepr
					LocalUpdateDisposalDepr = RoundedTransactionAmount
			LocalAmount				= LocalBasis
			LocalBasis				= RoundedTransactionAmount
			LocalUpdateBookBasis	= LocalBasis


			LocalAmount 			= LocalDeprLtdUpdate
			LocalDeprLtdUpdate		= RoundedTransactionAmount
			LocalNetBasis			= LocalBasis - LocalDeprLtdUpdate
			LocalExchangeDate			= AssetDisposal.DisposalDate
			LocalBaseAmount.ToCurrency	= LocalConvertFromCurrency
			if (LocalConvertFromCurrency != ProceedsCurrency)
				LocalCurrency				= ProceedsCurrency
				LocalCurrencyAmount			= Proceeds
				LocalAmount                 = LocalBaseAmount.OutputCurrencyAmount
			else 
				LocalAmount                 = Proceeds
			LocalBDProceedOvrd		= RoundedTransactionAmount
			if (LocalConvertFromCurrency != CostOfSaleCurrency)
				LocalCurrency				= CostOfSaleCurrency
				LocalCurrencyAmount			= CostOfSale
				LocalAmount                 = LocalBaseAmount.OutputCurrencyAmount
			else
				LocalAmount                 = CostOfSale
			LocalBDCSOvrd		    = RoundedTransactionAmount
			LocalNetProceeds		= LocalBDProceedOvrd - LocalBDCSOvrd

			if (DisposalMethod.Purged)
				LocalGainLoss	= 0
			else

				LocalAmount 				= LocalNetProceeds
				LocalNetProceeds			= RoundedTransactionAmount
				LocalAmount 				= LocalNetBasis
				LocalNetBasis				= RoundedTransactionAmount
				LocalAmount			 		= each.FirstYearExpenseAmount
				LocalFirstYearExpense 		= RoundedTransactionAmount
				LocalGainLoss					= LocalNetProceeds - (LocalNetBasis - LocalFirstYearExpense)
			LocalBDDeprOvrd		= LocalDisposalDepr




			LocalBDGainLossOvrd	= LocalGainLoss

		410TaxCreditRecapture
			if (each.YearPlacedInService <= 60)
				LocalTaxCreditTable		= each.AssetTaxCreditTable
				LocalYPIS 				= each.YearPlacedInService
				if (AssetTaxCreditRel exists)
					LocalTCRecapture	= (each.TaxCredit * AssetTaxCreditRel.RecapturePercentageArray.RecapturePercentageGroup[LocalYPIS].RecapturePercentage/100)

			if (LocalTCRecapture entered
			and AssetTaxCreditRel.RecapturePercentageArray.RecapturePercentageGroup[LocalYPIS].RecapturePercentage < 100)
				LocalUpdateBookBasis	= each.Basis + (LocalTCRecapture * (AssetTaxCreditRel.BasisReductionPercentage / 100))
				LocalBasis = LocalUpdateBookBasis

		500CreateJETrans	
			include 595CheckHistory



			invoke PostRelease.DefaultAccounts Asset

			initialize LocalConsolidateDisposalJournalEntry
			if (!AssetCompanyRel exists
			or 	AssetCompanyRel.ConsolidateDisposalJournalEntry not entered)
				LocalConsolidateDisposalJournalEntry = true


			if (AssetBookDisposalRel.AssetASTAmt entered)
				invoke Create AssetTransaction
					LocalTransactionAmount			= AssetBookDisposalRel.AssetASTAmt
					include 580SetUpJe
					invoked.OnlineSystemCreate		= true
					invoked.AssetAccountType		= "AST"
					invoked.ProcessSequence			= Asset.LastAssetSequence
					invoked.DistributionAccount		= Asset.TranAssetAccount
					if (LocalCreateTrans)
						invoked.AssetTransaction.TransactionStatus = "U"

			if (LocalConsolidateDisposalJournalEntry)
				if (AssetBookDisposalRel.AssetACMAmt entered)
					invoke Create AssetTransaction
						LocalTransactionAmount			= AssetBookDisposalRel.AssetACMAmt
						include 580SetUpJe
						invoked.OnlineSystemCreate		= true
						invoked.AssetAccountType		= "ACM"
						invoked.ProcessSequence			= Asset.LastAssetSequence
						invoked.DistributionAccount		= Asset.TranAccumulatedDepreciationAccount
						if (LocalCreateTrans)
							invoked.AssetTransaction.TransactionStatus = "U"
			else
				LocalACMAmount = each.LifeToDateDepreciation
				if (LocalACMAmount entered)
					invoke Create AssetTransaction
						LocalTransactionAmount			= LocalACMAmount
						include 580SetUpJe
						invoked.OnlineSystemCreate		= true
						invoked.AssetAccountType		= "ACM"
						invoked.ProcessSequence			= Asset.LastAssetSequence
						invoked.DistributionAccount		= Asset.TranAccumulatedDepreciationAccount
						if (LocalCreateTrans)
							invoked.AssetTransaction.TransactionStatus = "U"
				else
					LocalACMAmount	= AssetBookDisposalRel.DepreciationExpense * -1
					if (LocalACMAmount entered)
						invoke Create AssetTransaction
							LocalTransactionAmount			= LocalACMAmount
							include 580SetUpJe
							invoked.OnlineSystemCreate		= true
							invoked.AssetAccountType		= "ACM"
							invoked.ProcessSequence			= Asset.LastAssetSequence
							invoked.DistributionAccount		= Asset.TranAccumulatedDepreciationAccount
							if (LocalCreateTrans)
								invoked.AssetTransaction.TransactionStatus = "U"


			if (AssetBookDisposalRel.AssetEXPAmt entered)
				invoke Create AssetTransaction
					LocalTransactionAmount			= AssetBookDisposalRel.AssetEXPAmt
					include 580SetUpJe
					invoked.OnlineSystemCreate		= true
					invoked.AssetAccountType		= "EXP"
					invoked.ProcessSequence			= Asset.LastAssetSequence
					invoked.DistributionAccount		= Asset.TranDepreciationExpenseAccount
					if (LocalCreateTrans)
						invoked.AssetTransaction.TransactionStatus = "U"

			if (AssetBookDisposalRel.AssetPROAmt entered)
				invoke Create AssetTransaction
					LocalTransactionAmount			= AssetBookDisposalRel.AssetPROAmt
					include 580SetUpJe
					invoked.OnlineSystemCreate		= true
					invoked.AssetAccountType		= "PRO"
					invoked.ProcessSequence			= Asset.LastAssetSequence
					invoked.DistributionAccount		= Asset.TranProceedsAccount
					if (LocalCreateTrans)
						invoked.AssetTransaction.TransactionStatus = "U"

			if (AssetBookDisposalRel.AssetCOSAmt entered)
				invoke Create AssetTransaction
					LocalTransactionAmount			= AssetBookDisposalRel.AssetCOSAmt
					include 580SetUpJe
					invoked.OnlineSystemCreate		= true
					invoked.AssetAccountType		= "COS"
					invoked.ProcessSequence			= Asset.LastAssetSequence
					invoked.DistributionAccount		= Asset.TranDisposalExpenseAccount
					if (LocalCreateTrans)
						invoked.AssetTransaction.TransactionStatus = "U"

			if (AssetBookDisposalRel.AssetGANAmt entered)
				invoke Create AssetTransaction
					LocalTransactionAmount			= AssetBookDisposalRel.AssetGANAmt
					include 580SetUpJe
					invoked.OnlineSystemCreate		= true
					invoked.AssetAccountType		= "GAN"
					invoked.ProcessSequence			= Asset.LastAssetSequence
					invoked.DistributionAccount		= Asset.TranGainAccount
					if (LocalCreateTrans)
						invoked.AssetTransaction.TransactionStatus = "U"

			if (AssetBookDisposalRel.AssetLOSAmt entered)
				invoke Create AssetTransaction
					LocalTransactionAmount			= AssetBookDisposalRel.AssetLOSAmt
					include 580SetUpJe
					invoked.OnlineSystemCreate		= true
					invoked.AssetAccountType		= "LOS"
					invoked.ProcessSequence			= Asset.LastAssetSequence
					invoked.DistributionAccount		= Asset.TranLossAccount
					if (LocalCreateTrans)
						invoked.AssetTransaction.TransactionStatus = "U"

			if (AssetBookDisposalRel.AssetDGNAmt entered)
				invoke Create AssetTransaction
					LocalTransactionAmount			= AssetBookDisposalRel.AssetDGNAmt
					include 580SetUpJe
					invoked.OnlineSystemCreate		= true
					invoked.AssetAccountType		= "DGN"
					invoked.ProcessSequence			= Asset.LastAssetSequence
					invoked.DistributionAccount		= Asset.TranDeferredGainAccount
					if (LocalCreateTrans)
						invoked.AssetTransaction.TransactionStatus = "U"

			if (AssetBookDisposalRel.AssetDGNAmt entered)
				invoke Create AssetTransaction
					LocalTransactionAmount			= AssetBookDisposalRel.AssetDLSAmt
					include 580SetUpJe
					invoked.OnlineSystemCreate		= true
					invoked.AssetAccountType		= "DLS"
					invoked.ProcessSequence			= Asset.LastAssetSequence
					invoked.DistributionAccount		= Asset.TranDeferredLossAccount
					if (LocalCreateTrans)
						invoked.AssetTransaction.TransactionStatus = "U"

			if (AssetBookDisposalRel.AssetCLRAmt entered
			and Asset.TranClearingAccount entered)
				invoke Create AssetTransaction
					LocalTransactionAmount			= AssetBookDisposalRel.AssetCLRAmt
					include 580SetUpJe
					invoked.OnlineSystemCreate		= true
					invoked.AssetAccountType		= "CLR"
					invoked.ProcessSequence			= Asset.LastAssetSequence
					invoked.DistributionAccount		= Asset.TranClearingAccount
					if (LocalCreateTrans)
						invoked.AssetTransaction.TransactionStatus = "U"

		580SetUpJe
			LocalDisposalBook					= each.Book
			if (Asset.DisposedAsset entered)
				LocalDisposalAsset				= Asset.DisposedAsset
				invoked.Asset					= Asset.DisposedAsset
				invoked.ProcessAsset			= Asset.DisposedAsset
			else
				LocalDisposalAsset				= Asset
				invoked.Asset					= Asset
				invoked.ProcessAsset			= Asset
			invoked.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
			invoked.Company						= Asset.Company
			invoked.Book						= LocalDisposalBook
			if (LocalDisposalBook.Impairment)
				invoked.AssetImpairment 		= LocalDisposalAssetBookRel.DerivedAssetImpairment
			invoked.AssetAccountGroup			= Asset.AssetAccountGroup
			invoked.AssetType					= Asset.AssetType  
			invoked.AssetLease.Lease			= Asset.AssetLease.Lease
			invoked.AssetLease.LeaseCompany		= Asset.AssetLease.LeaseCompany
			if (Book.PostCurrency.Asset
			and Asset.Currency != Book.Currency)
				LocalTransactionDate 			= Asset.LastAssetItemPurchaseDate
			else
				LocalTransactionDate			= LocalDisposalDate
			invoked.TransactionDate 			= LocalTransactionDate
			invoked.ProcessDate					= LocalDisposalDate
			if (LocalProgram = "AM145")
				invoked.Reference				= "Mass Asset Disposal"
			else
				invoked.Reference				= "Disposal"
			invoked.Description					= "Disposal"
			if ((LocalProgram	 	= "AM145"
			and LocalPostTrans)
			or	LocalProgram		= "AM154")
				invoked.AssetTransaction.TransactionStatus	="U"
			else
				if (LocalProgram	= "AM145"
				and LocalHistoryRec
				and !LocalPostTrans)
					invoked.AssetTransaction.TransactionStatus	="H"
				else
					invoked.AssetTransaction.TransactionStatus	="M"
			invoked.AssetProcess				= "DSP"

			invoked.TransactionAmount								= LocalTransactionAmount
   			if (each.Book.PostCurrency.Book)
				invoked.TransientBookCurrency						= each.Book.Currency
				invoked.TransactionNumberOfDecimals 				= each.Book.Currency.NumberOfDecimals
			else
				if (Asset.DisposedAsset entered)
					invoked.TransientBookCurrency					= Asset.DisposedAsset.Currency
					invoked.TransactionNumberOfDecimals				= Asset.DisposedAsset.Currency.NumberOfDecimals
				else
					invoked.TransientBookCurrency					= Asset.Currency
					invoked.TransactionNumberOfDecimals				= Asset.Currency.NumberOfDecimals
			invoked.AssetTransactionAmount.TransactionAmount 		= LocalTransactionAmount
			invoked.AssetTransactionAmount.ToCurrency				= each.Book.Currency
			invoked.AssetTransactionAmount.ExchangeDate	  			= LocalTransactionDate
			invoked.PostingDate										= LocalDisposalDate

		595CheckHistory
			LocalTransStatus = "H"
			while ((AssetTransactionRel1b exists
			or 		LocalHistoryRec))
				if (AssetTransactionRel1b.Book != each.Book)
					LocalBook = each.Book
					if (BookRel exists
					and BookRel.TrackDepreciationHistory)
						LocalHistoryRec = true

		501CreateHistTrans
			if (AssetBookDisposalRel.AssetASTAmt entered)
				invoke Create AssetBookTransaction
					invoked.TransactionAmount			= AssetBookDisposalRel.AssetASTAmt
					include 590SetUpBKJe
					invoked.AssetAccountType			= "AST"
					invoked.DistributionAccount			= Asset.AssetAccountAccount

			initialize LocalConsolidateDisposalJournalEntry
			if (!AssetCompanyRel exists
			or 	AssetCompanyRel.ConsolidateDisposalJournalEntry not entered)
				LocalConsolidateDisposalJournalEntry = true


			if (LocalConsolidateDisposalJournalEntry)
				if (AssetBookDisposalRel.AssetACMAmt entered)
					invoke Create AssetBookTransaction
						LocalTransactionAmount			= AssetBookDisposalRel.AssetACMAmt
						include 590SetUpBKJe
						invoked.AssetAccountType		= "ACM"
						invoked.DistributionAccount		= Asset.LocalAccumulatedDepreciationAccount
			else
				LocalACMAmount = each.LifeToDateDepreciation + each.FirstYearExpenseAmount
				if (LocalACMAmount entered)
					invoke Create AssetBookTransaction
						LocalTransactionAmount			= LocalACMAmount
						include 590SetUpBKJe
						invoked.AssetAccountType		= "ACM"
						invoked.DistributionAccount		= Asset.LocalAccumulatedDepreciationAccount
				LocalACMAmount = AssetBookDisposalRel.DepreciationExpense * -1
				if (LocalACMAmount entered)
					invoke Create AssetBookTransaction
						LocalTransactionAmount			= LocalACMAmount
						include 590SetUpBKJe
						invoked.AssetAccountType		= "ACM"
						invoked.DistributionAccount		= Asset.LocalAccumulatedDepreciationAccount

			if (AssetBookDisposalRel.AssetEXPAmt entered)
				invoke Create AssetBookTransaction
					LocalTransactionAmount				= AssetBookDisposalRel.AssetEXPAmt
					include 590SetUpBKJe
					invoked.AssetAccountType			= "EXP"
					invoked.DistributionAccount			= Asset.LocalDepreciationExpenseAccount

			if (AssetBookDisposalRel.AssetPROAmt entered)
				invoke Create AssetBookTransaction
					LocalTransactionAmount				= AssetBookDisposalRel.AssetPROAmt
					include 590SetUpBKJe
					invoked.AssetAccountType			= "PRO"
					invoked.DistributionAccount			= Asset.LocalProceedsAccount

			if (AssetBookDisposalRel.AssetCOSAmt entered)
				invoke Create AssetBookTransaction
					LocalTransactionAmount				= AssetBookDisposalRel.AssetCOSAmt
					include 590SetUpBKJe
					invoked.AssetAccountType			= "COS"
					invoked.DistributionAccount			= Asset.LocalDisposalExpenseAccount

			if (AssetBookDisposalRel.AssetGANAmt entered)
				invoke Create AssetBookTransaction
					LocalTransactionAmount				= AssetBookDisposalRel.AssetGANAmt
					include 590SetUpBKJe
					invoked.AssetAccountType			= "GAN"
					invoked.DistributionAccount			= Asset.LocalGainAccount

			if (AssetBookDisposalRel.AssetLOSAmt entered)
				invoke Create AssetBookTransaction
					LocalTransactionAmount				= AssetBookDisposalRel.AssetLOSAmt
					include 590SetUpBKJe
					invoked.AssetAccountType			= "LOS"
					invoked.DistributionAccount			= Asset.LocalLossAccount

			if (AssetBookDisposalRel.AssetDGNAmt entered)
				invoke Create AssetBookTransaction
					LocalTransactionAmount				= AssetBookDisposalRel.AssetDGNAmt
					include 590SetUpBKJe
					invoked.AssetAccountType			= "DGN"
					invoked.DistributionAccount			= Asset.LocalDeferredGainAccount

			if (AssetBookDisposalRel.AssetDLSAmt entered)
				invoke Create AssetBookTransaction
					LocalTransactionAmount				= AssetBookDisposalRel.AssetDLSAmt
					include 590SetUpBKJe
					invoked.AssetAccountType			= "DLS"
					invoked.DistributionAccount			= Asset.LocalDeferredLossAccount

			if (AssetBookDisposalRel.AssetCLRAmt entered)
				invoke Create AssetBookTransaction
					LocalTransactionAmount				= AssetBookDisposalRel.AssetCLRAmt
					include 590SetUpBKJe
					invoked.AssetAccountType			= "CLR"
					invoked.DistributionAccount			= Asset.LocalClearingAccount

		590SetUpBKJe
			LocalDisposalAsset					= Asset.Asset
			invoked.Asset						= LocalDisposalAsset
			invoked.Company						= Asset.Company
			LocalDisposalBook					= each.Book
			invoked.Book						= LocalDisposalBook
			if (LocalDisposalBook.Impairment)
				invoked.AssetImpairment 		= LocalDisposalAssetBookRel.DerivedAssetImpairment
			if (each.Book.PostCurrency.Asset
			and Asset.Currency != Book.Currency)
				LocalTransactionDate 			= Asset.LastAssetItemPurchaseDate
			else
				LocalTransactionDate			= LocalDisposalDate
			invoked.TransactionDate 			= LocalTransactionDate
			if (LocalProgram = "AM145")
				invoked.Reference				= "Mass Asset Disposal"
			else
				invoked.Reference				= "Disposal"
			invoked.AssetBookTransaction.TransactionStatus	= "U"
			invoked.AssetProcess				= "DSP"

			invoked.TransactionAmount								= LocalTransactionAmount
 	  		if (each.Book.PostCurrency.Book)
				invoked.TransientBookCurrency						= each.Book.Currency
				invoked.TransactionNumberOfDecimals 				= each.Book.Currency.NumberOfDecimals
			else
				invoked.TransientBookCurrency						= Asset.Asset.Currency
				invoked.TransactionNumberOfDecimals					= Asset.Asset.Currency.NumberOfDecimals
			invoked.AssetTransactionAmount.TransactionAmount 		= LocalTransactionAmount
			invoked.AssetTransactionAmount.ToCurrency				= each.Book.Currency
			invoked.AssetTransactionAmount.ExchangeDate	  			= LocalTransactionDate
			invoked.PostingDate										= LocalDisposalDate










		ProcessPurgeJE
			for each AssetBookRel
				LocalBook	= each.Book
				if (each.Basis != 0)
					invoke ProcessPurge AssetBookDisposalRel
						invoked.PrmBook		= each.Book









		ReleaseAssetDisposalEdits
			LocalAsset = Asset
			constraint (DisposalItemExist)
				"DisposalIncomplete;MustAddDisposalItems"
			constraint (DisposalQuantity = TotalDisposalSelectedQuantity)
					"DisposalQuantityMustBeEqualToTotalDisposalQuantity"


		ReleaseDeleteAssetDisposalEdits
			if (AssetRel.Status.PostRelease)
				constraint (AssetRel.AssetProcess.Disposal)
					"CannotDeleteOrRelease;NoDisposalExists"

		ReleasePartialUpdates
			if (IsReleasedPartial)
				invoke Unreleased.Create Asset
					assign result to NewAsset
					fill in fields from Asset
						except invoked.Asset

		CheckAMControlRules490
			if (Asset.Company exists)
				constraint (Asset.Company.PendingYearEndCount not entered)
					"CannotDisposeAsset;YearEndIsPending"
				constraint (!Asset.Company.PeriodCloseRelease.InProcess)
					"CannotDisposeAsset;PeriodOrYearEndCloseIsInProcess"
			if (CostOfSale entered)
				constraint (CostOfSaleCurrency entered)
					"CostOfSaleRule135"

			if (Proceeds entered)
				constraint (ProceedsCurrency entered)
					"ProceedsRule133"

			if (any BookOverRide.BookOverRideTable.Proceeds entered)
				constraint (ProceedsCurrency entered)
					"BookOverRideRuleProceeds133"

			if (any BookOverRide.BookOverRideTable.Expense entered)
				constraint (CostOfSaleCurrency entered)
					"BookOverRideRuleExpense135"

	Actions
		AssetReleaseDisposal is an Instance Action
			restricted

			Entrance Rules
				if (FullOrPartial.Full)
					constraint (BooksSelectedForDisposalRel exists)
						"NoBooksSelected,SelectABookToDisposeOrResetDisposal"
			Action Rules
				LocalAsset = Asset
				for each AssetBookDisposalFullRel
					if (!each.Dispose
					or OtherBookDisposalsRel exist)
						BookDisposal = true
					if (!each.Dispose)						
						LocalBook 	= each.Book

						invoke DisposalReset LocalAssetBookRel
						if (LocalAssetBookRel.IsPostingBook)
							invoke Delete UnreleasedDisposalTransactionsRel
						else 
							invoke Delete UnreleasedBookTransactionsRel						
						invoke Delete each
					else 
						LocalBook = each.Book
						invoke DefaultAccounts LocalAssetBookRel




				BypassActiveCodeBlockEdit = true
				if (DisposalStatus.Unreleased)
					if (PartialDisposalAssetTransactionsRel exists)
						constraint (first PartialDisposalAssetTransactionsRel.PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostingDateAssignedToDisposalTransactionsIsOutsideValidEntryDateRange"
					invoke PostRelease.ReleaseDisposal Asset

		SubmitForApproval is an Instance Action
			restricted
			Action Rules
				invoke SubmitForApproval Asset
		
		AssetResetDisposal is an Instance Action
			restricted
			Action Rules
				if (DisposalStatus.Unreleased)

					invoke PostRelease.ResetDisposal Asset

		UpdateBookDisposal is an Instance Action
			restricted
			Parameters
				BookDisposalPrm is Boolean
			Action Rules
				BookDisposal = BookDisposalPrm

		PurgeAssetDisposals is a Set Action
			restricted

			Parameters
				PrmCompany				is an AssetCompany
				PrmFromDate				is Date
				PrmToDate				is Date
				PrmAssetGroup			is like AssetGroup
				PrmAssetType			is like AssetType
				PrmAssetSubType			is like AssetType
				PrmPurgeSimulated		is Boolean

			Instance Selection

				where (((AssetRel.Simulated and PrmPurgeSimulated) or (not PrmPurgeSimulated and not AssetRel.Simulated))
				and    AssetRel.Company	=	PrmCompany
				and    (PrmFromDate not entered or DisposalDate >= PrmFromDate)
				and    (PrmToDate not entered or DisposalDate <= PrmToDate)
				and    (PrmAssetGroup not entered or AssetGroup = PrmAssetGroup)
				and    (PrmAssetType not entered or AssetRel.AssetType.Type = PrmAssetType)
				and    (PrmAssetSubType not entered or AssetRel.AssetType.SubType = PrmAssetSubType)
				and    DisposalStatus.Released)

			Action Rules
				Instance Rules
					invoke Purge

		PurgeDeletedAssetDisposals is a Set Action
			restricted

			Parameters
				PrmCompany				is an AssetCompany
				PrmFromDate				is Date
				PrmToDate				is Date
				PrmAssetGroup			is like AssetGroup
				PrmAssetType			is like AssetType
				PrmAssetSubType			is like AssetType
				PrmPurgeSimulated		is Boolean

			Instance Selection
				include only deleted records
				where (((AssetRel.Simulated and PrmPurgeSimulated) or (not PrmPurgeSimulated and not AssetRel.Simulated))
				and    AssetRel.Company	=	PrmCompany
				and    (PrmFromDate not entered or DisposalDate >= PrmFromDate)
				and    (PrmToDate not entered or DisposalDate <= PrmToDate)
				and    (PrmAssetGroup not entered or AssetGroup = PrmAssetGroup)
				and    (PrmAssetType not entered or AssetRel.AssetType.Type = PrmAssetType)
				and    (PrmAssetSubType not entered or AssetRel.AssetType.SubType = PrmAssetSubType))

			Action Rules
				Instance Rules
					invoke Purge

		FixMigratedAssetDisposals is a Set Action
			restricted
			default label is "FixMigratedAssetDisposals"
			run in background

			Instance Selection
				where (DisposalStatus.Released)
			Action Rules
				Instance Rules
					if (FullOrPartial.Full)

						for each AssetItemDisposalSequenceRel

							if (AssetDisposal != each.AssetDisposal)

								invoke DisposalDelete each

								invoke NoEditCreate each
									fill in fields from each
										except invoked.AssetDisposal
										except invoked.AssetItemDisposal.ProcessSequence
										except invoked.Asset
									invoked.FinanceEnterpriseGroup 				= each.FinanceEnterpriseGroup
									invoked.Asset		 						= each.Asset
									invoked.AssetItem	 						= each.AssetItem
									invoked.AssetDisposal 						= AssetDisposal
									invoked.AssetItemDisposal.ProcessSequence 	= each.AssetItemDisposal.ProcessSequence
									invoked.DisposalDate						= each.DisposalDate
									invoked.DisposalMethod						= each.DisposalMethod
									invoked.DisposalQuantity					= each.DisposalQuantity
									invoked.ItemNumber							= each.ItemNumber
									invoked.ItemQuantity						= each.ItemQuantity
									invoked.BaseItemCost						= each.BaseItemCost
									invoked.BaseItemTax							= each.BaseItemTax
									invoked.TransactionItemCost					= each.TransactionItemCost
									invoked.TransactionItemTax					= each.TransactionItemTax
									invoked.BaseNumberOfDecimals				= each.BaseNumberOfDecimals
									invoked.TransactionNumberOfDecimals			= each.TransactionNumberOfDecimals
									invoked.BarCode								= each.BarCode

					else
						if (DisposalAsset not entered)
							LocalAsset = Asset
							LocalAssetDisposal = AssetDisposal
							invoke DisposalDelete AssetDisposal
							invoke MigrationCreate AssetDisposal
								fill in fields from this instance
									except invoked.Asset
								invoked.Asset		 	= MigratedOriginalAssetRel.Asset
								invoked.AssetDisposal	= AssetDisposal
								invoked.DisposalDate	= LocalAssetDisposal.DisposalDate
								invoked.DisposalMethod  = LocalAssetDisposal.DisposalMethod
								invoked.DisposalAsset	= LocalAssetDisposal.Asset
								
							for each LocalAssetItemDisposalRel
								if (AssetDisposal != each.AssetDisposal)
									LocalAssetItemDisposal= each.AssetItemDisposal
									invoke DisposalDelete each

									invoke NoEditCreate each
										fill in fields from each
											except invoked.AssetDisposal
											except invoked.AssetItemDisposal.ProcessSequence
											except invoked.Asset
										invoked.FinanceEnterpriseGroup = LocalAssetItemDisposal.FinanceEnterpriseGroup
										invoked.Asset			 					= MigratedOriginalAssetRel.Asset
										invoked.AssetItem	 						= LocalAssetItemDisposal.AssetItem
										invoked.AssetDisposal 						= AssetDisposal
										invoked.AssetItemDisposal.ProcessSequence 	= LocalAssetItemDisposal.AssetItemDisposal.ProcessSequence
										invoked.DisposalDate						= LocalAssetItemDisposal.DisposalDate
										invoked.DisposalMethod						= LocalAssetItemDisposal.DisposalMethod
										invoked.DisposalQuantity					= LocalAssetItemDisposal.DisposalQuantity
										invoked.ItemNumber							= LocalAssetItemDisposal.ItemNumber
										invoked.ItemQuantity						= LocalAssetItemDisposal.ItemQuantity
										invoked.BaseItemCost						= LocalAssetItemDisposal.BaseItemCost
										invoked.BaseItemTax							= LocalAssetItemDisposal.BaseItemTax
										invoked.TransactionItemCost					= LocalAssetItemDisposal.TransactionItemCost
										invoked.TransactionItemTax					= LocalAssetItemDisposal.TransactionItemTax
										invoked.BaseNumberOfDecimals				= LocalAssetItemDisposal.BaseNumberOfDecimals
										invoked.TransactionNumberOfDecimals			= LocalAssetItemDisposal.TransactionNumberOfDecimals
										invoked.BarCode								= LocalAssetItemDisposal.BarCode

		Purge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke Purge PurgeAssetItemDisposalRel
		
		DisposalDelete is a Delete Action
			restricted

		RemovePurgedLeaseID is an Update Action  
			restricted
			bypass field rules











			Action Rules
				initialize AssetLease

		NewPostingDateUpdate is an Update Action
				restricted

		BookReinstateDelete is an Instance Action
			restricted
			Parameters
				PrmAssetDisposal is Numeric 10
			Action Rules
				LocalDisposal = PrmAssetDisposal
				for each BookDisposalItemsRel
					invoke DisposalDelete each
				invoke Released.Delete	
				invoke ChangeToBookDisposal NonBookDisposalBooksRel

	StateCycles
		AssetDisposalLifeCycle is a StateCycle
			state field is DisposalStatus
			Unreleased is a State
				Dispose is a Create Action
					Entrance Rules
						constraint (AssetUnreleasedOrReleased)
							"AssetIs_In-_Progress,CannotPerformADisposal"
						if (FromAssetInactiveBookRel exist)
							confirmation required
								"Warning:DisposingAnAssetWhichContainInactiveBooks,SelectYesToProceed"
						include ChangeDisposalAsset443Rules

					Action Rules
						BypassActiveCodeBlockEdit = true

					Exit Rules
						LocalPostTrans	= true
						if (LocalProgram = "AM154"
						or LocalProgram = "AM145")
							UpdateFromBatch = true
						else
							UpdateFromBatch = false
						LocalProgram	= "Disposal"
						if (FullDisposal)


							for each AssetRel.AssetItem set
								invoke Create AssetItemDisposal
									fill in fields from each
									invoked.Asset								= Asset
									invoked.AssetItemDisposal.ProcessSequence	= LastSequenceNumber
									invoked.AssetItem							= each.AssetItem
									invoked.DisposalDate						= DisposalDate
									invoked.DisposalMethod						= DisposalMethod
									invoked.DisposalQuantity					= each.ItemQuantity
							LocalAsset 							= Asset
							DisposalBook.DisposalAsset 			= Asset
							DisposalBook.NewAsset 				= Asset
							DisposalBook.Cost	 				= Asset.ItemTotalBaseCost
							DisposalBook.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
							DisposalBook.UpdateFromBatch		= UpdateFromBatch
							if (PartialDisposal)
								DisposalBook.PartialDsp			= true
							else
								DisposalBook.PartialDsp			= false
							DisposalBook.Company				= Asset.Company
							LocalPerformCreateDisposalBook 		= DisposalBook.PerformCreateDisposalBook

							if (QuickDisposal)
								LocalCreateTrans	= true
							else
								LocalCreateTrans	= false





							invoke Unreleased.ProcessDisposal AssetDisposal
								invoked.ProcessAsset	= Asset
								invoked.PrmDisposalDate = DisposalDate

							if (DisposalMethod.Purged
							and !AssetRel.Simulated)
								include ProcessPurgeJE
						else
							invoke PostRelease.CreateNewAsset Asset
							DisposalAsset 			= Asset.DisposedAsset
							if(AssetImpairmentRel exists)
								invoke CreateFromTransfer AssetImpairment
									fill in fields from AssetImpairmentRel
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.Asset					= DisposalAsset
									invoked.Status					= "U"


				MigrationCreate is a Create Action
					restricted
					bypass field rules
					Action Rules	
						BypassActiveCodeBlockEdit = true

					Exit Rules
						make transition to Released
					
				Update is an Update Action
					Action Rules
						BypassActiveCodeBlockEdit = true
						if (AssetDisposal.PartialDisposal)
							LocalAsset = Asset.DisposedAsset
						else
							LocalAsset = Asset
						if (AssetControlTransactionRel exists)
							invoke Update AssetControlTransactionRel
								invoked.CreditBalance		= 0
								invoked.DebitBalance		= 0
						else
							invoke BalanceUpdate AssetBookRel
								invoked.CreditBalance		= 0
								invoked.DebitBalance		= 0


						if ((Proceeds entered
						or Proceeds changed)
						or (CostOfSale entered
						or CostOfSale changed)
						or DisposalDate changed)
							invoke Delete MemoOrUnreleasedAssetTransactionsRel
							for each AssetBookRel
								invoke DisposalReset each


							if (AssetBookTransactionRel.AssetProcess.Disposal
							and (AssetBookTransactionRel.AssetBookTransaction.TransactionStatus = "U"
							or AssetBookTransactionRel.AssetBookTransaction.TransactionStatus = "M"))
								invoke Delete AssetBookTransactionRel

							if (FullDisposal)
								for each AssetBookRel
									if (each.IsCurrentDisposal)
										invoke DisposalReset each

								for each AssetBookDisposalFullRel
									invoke Delete each
							if (PartialDisposal)
								for each AssetBookRel
									LocalBook	= each.Book

									invoke UpdateFromDisposalProcess each
										invoked.PrmBasis					= OrignatingAssetBookRel.Basis
										invoked.PrmYearToDateDepreciation	= OrignatingAssetBookRel.YearToDateDepreciation
										invoked.PrmLifeToDateDepreciation	= OrignatingAssetBookRel.LifeToDateDepreciation
								for each AssetBookDisposalPartialRel
									invoke Delete each
					Exit Rules
						if (LocalProgram = "AM154"
						or LocalProgram = "AM145")
							UpdateFromBatch = true
						else
							UpdateFromBatch = false
						if (PostingDate changed)
							if (AssetDisposal.PartialDisposal)
								LocalAsset = Asset.DisposedAsset
							else
								LocalAsset = Asset
							for each AssetBookDisposalRel2
								invoke UpdatePostingDate each
									invoked.NewPostingDate	= PostingDate

						if ((Proceeds entered
						or Proceeds changed)
						or (CostOfSale entered
						or CostOfSale changed)
						or DisposalDate changed )
							if (AssetDisposal.PartialDisposal)
								LocalAsset = Asset.DisposedAsset
							else
								LocalAsset = Asset
							DisposalBook.DisposalAsset 			= Asset.DisposedAsset
							DisposalBook.NewAsset 				= Asset
							DisposalBook.DisposalCost			= ItemTotalTransactionCost - Asset.ItemTotalBaseCost
							DisposalBook.Cost	 				= ItemTotalTransactionCost
							DisposalBook.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
							DisposalBook.UpdateFromBatch		= UpdateFromBatch
							if (PartialDisposal)
								DisposalBook.PartialDsp			= true
							else
								DisposalBook.PartialDsp			= false
							DisposalBook.Company				= Asset.Company
							LocalPerformCreateDisposalBook 		= DisposalBook.PerformCreateDisposalBook
							invoke ProcessDisposal
								invoked.ProcessAsset		= LocalAsset
								invoked.PrmDisposalDate		= DisposalDate

				Delete is a Delete Action
					restricted
					Action Rules

				Release is an Update Action
					restricted
					bypass field rules
					valid when (DisposalItemExist)
					Entrance Rules
						constraint (TotalDisposalSelectedQuantity = DisposalQuantity)
							"CannotRelease;TotalDisposalQuantityMustEqualItemDisposalQuantity"

						include ReleaseFunctions

					Action Rules
						BypassActiveCodeBlockEdit = true
					Exit Rules
						make transition to Released


				RemoveAssetDisposal is a Delete Action
					restricted
					Action Rules

				ResetDisposal is an Instance Action
					restricted
					Parameters
						EnablePopUpActionform is Numeric 1  
					Action Rules
						BypassActiveCodeBlockEdit = true
						if (PartialDisposal)


							for each AssetItemDisposal set
								invoke ResetDisposal each
							if (AssetImpairmentBookRel exists)
								LocalAsset = Asset.DisposedAsset
								for each AssetImpairmentBookRel
									LocalBook = each.Book
									invoke UpdateFromTransfer each
										invoked.OriginalBasis		= each.OriginalBasis + ToAssetImpairmentBookRel.OriginalBasis
										invoked.ImpairmentAmount	= each.ImpairmentAmount + ToAssetImpairmentBookRel.ImpairmentAmount
										invoked.OriginalBookValue	= each.OriginalBookValue + ToAssetImpairmentBookRel.OriginalBookValue
						else
							for each AssetBookDisposalsRel

								LocalBook = each.Book
								if ((each.AssetDisposal = Asset.LastAssetSequence)
								or (each.AssetDisposal not entered))
									invoke Delete each

						invoke RemoveDisposal Asset

					Exit Rules
						LocalAsset	= Asset




						invoke Delete AssetDisposal

				ProcessDisposal is an Instance Action
					restricted
					Parameters
						ProcessAsset is like Asset
						PrmDisposalDate is Date

					Action Rules
						BypassActiveCodeBlockEdit = true
						if (DisposalMethod.Purged)
							NumOfAssetBooks	= instance count of NotDisposedAssetBooksRel 
							if (NumOfAssetBooks > 1)
								LocalBook		= first NotDisposedAssetBooksRel.Book
								I7				= CurrentBookCalendarsRel4.NumberOfPeriodCloseRuns + 1
								CurrentPeriod 	= CurrentBookCalendarsRel4.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I7]
								CurrentYear		= CurrentPeriod year
								CurrentMonth	= CurrentPeriod month

								for each NotDisposedAssetBooksRel
									LocalBook			= each.Book
									I6					= CurrentBookCalendarsRel4.NumberOfPeriodCloseRuns + 1
									CurrentBookPeriod	= CurrentBookCalendarsRel4.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I6]
									CurrentBookYear		= CurrentBookPeriod year
									CurrentBookMonth	= CurrentBookPeriod month

									constraint (CurrentYear = CurrentBookYear
									and CurrentMonth = CurrentBookMonth)
										"AllAssetBooksMustBeInTheSamePeriodForPurgeTypeDisposal"
							else
								for each NotDisposedAssetBooksRel
									LocalBook			= each.Book
									I6					= CurrentBookCalendarsRel4.NumberOfPeriodCloseRuns + 1
									CurrentBookPeriod	= CurrentBookCalendarsRel4.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I6]
									CurrentBookYear		= CurrentBookPeriod year
									CurrentBookMonth	= CurrentBookPeriod month

							constraint (DisposalDate = CurrentBookPeriod)
								"DisposalDateMustBeTheCurrentPeriodEndDateForPurgeTypeDisposal"

					Entrance Rules

						LocalAsset				= ProcessAsset
						LocalDisposalDate		= PrmDisposalDate
						for each NotDisposedAssetBooksRel
							LocalCurrency = each.PostingCurrency
							initialize LocalUpdateBookBasis
							initialize LocalDeprYtdUpdate
							initialize LocalDeprYtdAllow
							initialize LocalDeprLtdUpdate
							initialize LocalDeprLTDAllow
							initialize LocalDeprCP
							initialize LocalDeprCPAllow
							initialize LocalUpdateDisposalDepr
							initialize LocalDisposalDepr
							initialize LocalGainLoss
							initialize LocalBDProceedOvrd
							initialize LocalBDCSOvrd
							initialize LocalTCRecapture
							include GetLocalNumberOfDecimals
							LocalFirstLastFl = each.FirstAndLastYear
							if (each.Basis entered)
								include 200AnnualDepreciation
								include 300CalcDispDepreciation
							LocalAsset = ProcessAsset
							LocalBasis = each.Basis

							if (QuickDisposal)
								LocalCreateTrans	= true
							else
								LocalCreateTrans	= false

							LocalBook = each.Book
							if (LocalProgram = "AM145"
							or LocalProgram = "AM154"
							or LocalCreateTrans)
								initialize LocalPostingBook
								if (CurrentBookCalendarsRel2 exists)
									if (!CurrentBookCalendarsRel2.Book = each.Book)
										if (CurrentBookCalendarsRel4 exists)
											LocalPostingBook		= CurrentBookCalendarsRel4.PostingBook
									else
										if (CurrentBookCalendarsRel4 exists)
											LocalPostingBook		= CurrentBookCalendarsRel4.PostingBook
								else
									if (CurrentBookCalendarsRel4 exists)
										LocalPostingBook			= CurrentBookCalendarsRel4.PostingBook
							LocalBook = each.Book
							if (IsPostingBook
							and !Asset.Simulated)
								initialize LocalHistoryRec

							if (DisposalMethod.Purged)

								if (LocalProgram = "AM145"
								or LocalProgram = "AM154")
									initialize LocalDeprYtd
									initialize LocalDeprYtdAllow
									initialize LocalDeprLtd
									initialize LocalDeprLTDAllow
									initialize LocalDeprCP
									initialize LocalDeprCPAllow

							if (each.Method = "100%Bonus"
							and each.LifeToDateDepreciation = each.Basis)
								LocalFirstLastFl			= "C"
							if (each.TaxCredit entered)
								if (each.Basis entered)
									include 410TaxCreditRecapture
							LocalToCurrency = each.PostingCurrency
							if (!DisposalMethod.Purged
							and AssetDisposal.FullDisposal)

								invoke UpdateFromDisposalProcess each
									LocalAmount				= LocalDeprYtdUpdate
									LocalRoundedAmount		= RoundedTransactionAmount
									LocalDeprYtdUpdate		= LocalRoundedAmount
									invoked.PrmFirstAndLastYear						= LocalFirstLastFl
									invoked.PrmYearToDateDepreciation				= LocalDeprYtdUpdate
									LocalAmount				= LocalDeprYtdAllow
									LocalRoundedAmount		= RoundedTransactionAmount
									LocalDeprYtdAllow		= LocalRoundedAmount
									invoked.PrmYearToDateDepreciationAllowed		= LocalDeprYtdAllow
									LocalAmount				= LocalDeprLtdUpdate
									LocalRoundedAmount		= RoundedTransactionAmount
									LocalDeprLtdUpdate		= LocalRoundedAmount
									invoked.PrmLifeToDateDepreciation				= LocalDeprLtdUpdate
									LocalAmount				= LocalDeprLTDAllow
									LocalRoundedAmount		= RoundedTransactionAmount
									LocalDeprLTDAllow		= LocalRoundedAmount
									invoked.PrmLifeToDateDepreciationAllowed		= LocalDeprLTDAllow
									LocalAmount				= LocalDeprCP
									LocalRoundedAmount		= RoundedTransactionAmount
									LocalDeprCP				= LocalRoundedAmount
									invoked.PrmCurrentPeriodDepreciation			= LocalDeprCP
									LocalAmount				= LocalDeprCPAllow
									LocalRoundedAmount		= RoundedTransactionAmount
									LocalDeprCPAllow		= LocalRoundedAmount
									invoked.PrmCurrentPeriodDepreciationAllowed		= LocalDeprCPAllow
									LocalAmount				= each.Basis
									LocalRoundedAmount		= RoundedTransactionAmount
									RoundedBasis			= LocalRoundedAmount
									invoked.PrmBasis		= RoundedBasis
									if (LocalUpdateBookBasis entered)
										LocalAmount				= LocalUpdateBookBasis
										LocalRoundedAmount		= RoundedTransactionAmount
										LocalUpdateBookBasis	= LocalRoundedAmount
										invoked.PrmBasis		= LocalUpdateBookBasis
							else
								LocalTaxCreditTable		= each.AssetTaxCreditTable
								if (!AssetDisposal.FullDisposal
								and AssetTaxCreditRel exists)
									invoke UpdateFromReinstatement each
										if (LocalUpdateBookBasis entered)
											LocalAmount				= LocalUpdateBookBasis
											LocalRoundedAmount		= RoundedTransactionAmount
											LocalUpdateBookBasis	= LocalRoundedAmount
											invoked.PrmBasis		= LocalUpdateBookBasis
										invoked.PrmLifeToDateDepreciation = each.LifeToDateDepreciation
										invoked.PrmYearToDateDepreciation = each.YearToDateDepreciation
							LocalConvertFromCurrency = each.PostingCurrency
							include 400CalcGainLoss

							invoke Update AssetBookDisposalRel

								if (Asset.AssetCategory.NonDepreciable)
									invoked.TransientDisposalDate			= PrmDisposalDate
								else
									invoked.TransientDisposalDate			= LocalDisposalDate
								if (AssetDisposal.FullDisposal)
									LocalAmount								= LocalUpdateDisposalDepr
									LocalUpdateDisposalDepr					= RoundedTransactionAmount
									invoked.DepreciationExpense				= LocalUpdateDisposalDepr
								invoked.TaxCreditRecapture					= LocalTCRecapture
								if (DisposalMethod.Purged)
									initialize LocalGainLoss
									invoked.DepreciationExpenseOverride		= each.LifeToDateDepreciation * -1
								else
									if(LocalUpdateDisposalDepr entered)
										invoked.DepreciationExpense				= LocalUpdateDisposalDepr
									else
										if(LocalDisposalDepr entered)
											invoked.DepreciationExpense			= LocalDisposalDepr
									invoked.DepreciationExpenseOverride		= LocalBDDeprOvrd		

								invoked.GainOrLossOverride					= LocalGainLoss
								invoked.ProceedsOverride					= LocalBDProceedOvrd
								invoked.CostOfSaleOverride					= LocalBDCSOvrd
								invoked.GainOrLoss							= LocalGainLoss
								invoked.Basis								= each.Basis 

								invoked.SalvageValue						= each.SalvageValue
								if (AssetDisposal.FullDisposal)
									if (LocalProgram = "Disposal")
										invoked.YearToDateDepreciation				= each.YearToDateDepreciation
										invoked.LifeToDateDepreciation				= each.LifeToDateDepreciation
									else
										invoked.YearToDateDepreciation				= LocalDeprYtdUpdate
										invoked.LifeToDateDepreciation				= LocalDeprLtdUpdate

								else
									round LocalDeprYtdUpdate to nearest DerivedRoundTo
									round LocalDeprLtdUpdate to nearest DerivedRoundTo
									invoked.YearToDateDepreciation				= LocalDeprYtdUpdate
									invoked.LifeToDateDepreciation				= LocalDeprLtdUpdate

							if (!AssetDisposal.FullDisposal
							and LocalAsset = Asset.DisposedAsset)
								invoke UpdateFromDisposalProcess DisposedAssetBookRel
									invoked.PrmBasis                            = DisposedAssetBookRel.Basis
									invoked.PrmYearToDateDepreciation			= LocalDeprYtdUpdate
									invoked.PrmYearToDateDepreciationOverride	= DisposedAssetBookRel.YearToDateDepreciationOverride
									invoked.PrmYearToDateDepreciationAllowed	= DisposedAssetBookRel.YearToDateDepreciationAllowed 
									invoked.PrmLifeToDateDepreciation			= LocalDeprLtdUpdate
									invoked.PrmLifeToDateDepreciationAllowed	= DisposedAssetBookRel.LifeToDateDepreciationAllowed 
									invoked.PrmSalvageValue						= DisposedAssetBookRel.SalvageValue
									invoked.PrmFirstYearExpenseAmount			= DisposedAssetBookRel.FirstYearExpenseAmount
									invoked.PrmTaxCreditPropertyAmount			= DisposedAssetBookRel.TaxCreditPropertyAmount	
									invoked.PrmTaxCredit						= DisposedAssetBookRel.TaxCredit
									invoked.PrmActualInsuranceValue				= DisposedAssetBookRel.ActualInsuranceValue
									invoked.PrmCalculatedInsuranceValue			= DisposedAssetBookRel.CalculatedInsuranceValue	
									invoked.PrmCalculatedReplacementValue		= DisposedAssetBookRel.CalculatedReplacementValue



			Released is a State

				ReinstateBookDisposal is an Instance Action
					valid when (BookDisposalReinstateAvailable)
					Action Rules
						invoke CreateBookDisposalReinstatement AssetReinstatementRel

				BookReinstateDelete is an Instance Action
					restricted
					Parameters
						PrmAssetDisposal is Numeric 10
					Action Rules
						LocalAssetDisposal = PrmAssetDisposal
						for each BookDisposalItemsRel
							invoke DisposalDelete each
						invoke Released.Delete	

				Delete is a Delete Action
					restricted
