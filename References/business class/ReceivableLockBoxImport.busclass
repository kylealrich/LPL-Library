ReceivableLockBoxImport is a BusinessClass
	owned by ar
	prefix is ARB
	classic name is ARILOCKBOX
	default label is "ReceivableLockboxImport"	

	Ontology
		symbolic key is ReceivableLockBoxImport
			classic set name is ARBSET1

	Patterns
		disable AuditIndex
		disable Auditing 
		disable EffectiveDated
		disable DataTranslations

	Persistent Fields
		RunGroup
		LockFillera							is AlphaUpper size 5
		LockFillerb							is AlphaUpper size 97
		ErrorMessage						is Alpha 150
		RecordInError						is Boolean
		InterfaceRun						is a ReceivablesInterfaceResult
			delete ignored
		ReceivableCompany
		ReceivablePaymentHeader
			delete ignored
		ReceivablePayment
			delete ignored


	Transient Fields

		DepositDate					is AlphaUpper size 6
			derive value from DerivedDepositDate	
		NumberOfTransactions		is AlphaUpper size 3
			derive value from DerivedNumberOfTransactions
		TransactionAmount			is AlphaUpper size 10
			derive value from DerivedTransactionAmount
		PaymentAmount				is AlphaUpper size 10
			derive value from DerivedPaymentAmount
		Required					is AlphaUpper size 1
			derive value from DerivedRequired
			default label is "UseFranchiseManagement" 
			States
				DoNotUse	value is blank
				Use			value is 1
		BankIDNumber				is AlphaUpper size 15
			derive value from DerivedBankIDNumber
		ShipToAddress				is AlphaUpper size 4
			derive value from DerivedShipToAddress
		AccountID					is AlphaUpper size 35
			derive value from DerivedAccountID
		Contract					is AlphaUpper size 6
			derive value from DerivedContract
		CheckNumber					is AlphaUpper size 10
			derive value from DerivedCheckNumber
		BillingDate					is AlphaUpper size 6
			derive value from DerivedBillingDate
		SalesAmount					is AlphaUpper size 10
			derive value from DerivedSalesAmount
		RemittanceNumber			is AlphaUpper size 22
			derive value from DerivedRemittanceNumber
			default label is "Number"	
		RemittanceSign				is AlphaUpper size 1
			derive value from DerivedRemittanceSign
			States
				Invoice		value is blank
				Credit		value is 1
				Debit		value is 2
		AppliedAmount				is AlphaUpper size 10
			derive value from DerivedAppliedAmount

	Local Fields
		LocalSize						is Numeric 2
		InterfacedHeader				is a ReceivablePaymentHeader view
		InterfacedPayment				is a ReceivablePayment view
		InterfacedRemittance			is a ReceivablePaymentRemittance view

		LocalReceivablesInterfaceResult	is a ReceivablesInterfaceResult

		LocalRunGroup					is like RunGroup
		LocalLockBox					is like ReceivableLockBox
		LocalBatchNumber				is like BatchNumber
		LocalPaymentSeq					is like Sequence

		LockBoxHeader
		LockBoxPayment
		LockBoxRemit


		ErrorOccurred					is Boolean
		LocalErrorMessage				is Alpha 150





		LocalBankEntity					is like BankEntity 
		LocalBankAccountNumber			is a BankAccountNumber 
		ParameterDepositBankCode		is like BankTransactionCode
		UseDerivedValues				is Boolean
		LocalDate						is Date
		LocalDateAlpha					is Alpha 8

		SuccessfulRelease				is Boolean
		LocalProformaInvoice			is like ProformaInvoice
		LocalProformaPendingAmount		is an InternationalAmount
		LocalExtraAmount				is an InternationalAmount


	Conditions

		ProformaEligibe
			restricted
			when (ProformaInvoiceRel exists
			and	  ProformaInvoiceRel.Status.Open)

		IsPaymentDetailRemittance
			restricted
			classic name is TYPE4
			when (ReceivableLockBoxImport.LockType.RemittanceDetail)

		IsPaymentDetail
			restricted
			classic name is TYPE6
			when (ReceivableLockBoxImport.LockType.PaymentDetail)

		IsPaymentHeader
			restricted
			classic name is TYPE7
			when (ReceivableLockBoxImport.LockType.PaymentHeader)


	Derived Fields

		AutoBatchRequiredMsg is a MessageField
			restricted
			"LockboxCompanyMustBeSetToAutoBatchNumbering"	

		NoPaymentsForBatchMsg is a MessageField 
			restricted
			"NoPaymentsExistForBatch"

		LockBoxBatchNumberRequiredMsg is a MessageField 
			restricted
			"LockboxBatchNumberIsRequired"	

		LockBoxSequenceRequiredMsg is a MessageField
			restricted
			"LockboxSequenceIsRequired"	

		ApplicationAlreadyExistsMsg is a MessageField 
			restricted
			"ApplicationAlreadyExistsForBatch"

		PaymentSeqRequiredForRemitMsg is a MessageField
			restricted
			"PaymentSequenceRequiredForRemittance"

		NoHeaderMsg is a MessageField
			restricted
			"InterfaceBatchRecordHasNotBeenInterfaced"

		NoPaymentMsg is a MessageField
			restricted
			"InterfacePaymentRecordHasNotBeenInterfaced"

		DepositDateIsNotAValidDateMsg is a MessageField
			restricted
			"DepositDateIsNotAValidDate"

		DepositDateMustBe6CharactersYYMMDDMsg is a MessageField
			restricted
			"DepositDateMustBe6CharactersYYMMDD"

		NumberOfTransactionsMustBeNumeric3Msg is a MessageField
			restricted
			"NumberOfTransactionsMustBeNumeric3WithLeadingZeroes"

		TransactionAmountMustBeNumeric10Msg is a MessageField
			restricted
			"TransactionAmountMustBeNumeric10ImpliedDecimalWithLeadingZeroes"

		PaymentAmountMustBeNumeric10Msg is a MessageField
			restricted
			"PaymentAmountMustBeNumeric10ImpliedDecimalWithLeadingZeroes"

		BankIDNumberRequiredMsg is a MessageField
			restricted
			"BankIDNumberRequired"

		AccountIDRequiredMsg is a MessageField
			restricted
			"AccountIDRequired"

		RequiredMustBe1CharacterMsg is a MessageField
			restricted
			"RequiredMustBe1Character"

		RequiredMustBeBlankOr1Msg is a MessageField
			restricted
			"UseFranchiseManagementMustBeBlankOr1"

		ShipToAddressMustBeNumeric4Msg is a MessageField
			restricted
			"ShipToAddressMustBeNumeric4WithLeadingZeroes"

		ContractMustBeNumeric6Msg is a MessageField
			restricted
			"ContractMustBeNumeric6WithLeadingZeroes"

		BillingDateMustBeNumeric6Msg is a MessageField
			restricted
			"BillingDateMustBeNumeric6YYMMDD"

		SalesAmountMustBeNumeric10Msg is a MessageField
			restricted
			"SalesAmountMustBeNumeric10ImpliedDecimalWithLeadingZeroes"

		RemittanceSignMustBeMsg is a MessageField
			restricted
			"RemittanceSignMustBeBlank,1,or2"

		AppliedAmountMustBeNumeric10Msg is a MessageField
			restricted
			"AppliedAmountMustBeNumeric10ImpliedDecimalWithLeadingZeroes"

		BillingDateIsNotAValidDateMsg is a MessageField
			restricted
			"BillingDateIsNotAValidDate"

		FranchiseSalesImportAlreadyExistsMsg is a MessageField
			restricted
			"FranchiseSalesImportAlreadyExists"

		DerivedDepositDate is a DerivedField
			type is Alpha 6
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentHeader)
				return LockFillerb[1:6]
			else
				return blank

		CalendarDepositDate is a DerivedField
			type is Date
			LocalDateAlpha		= "20" + LockFillerb[1:6]
			LocalDate 			= LocalDateAlpha
			return LocalDate

		DerivedNumberOfTransactions is a DerivedField
			type is Alpha 3
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentHeader)
				return LockFillerb[7:9]
			else
				return blank

		NumericNumberOfTransactions is a DerivedField
			type is Numeric 3
			restricted
			if (DerivedNumberOfTransactions is numeric)
				return DerivedNumberOfTransactions

		DerivedTransactionAmount is a DerivedField
			type is Alpha 10
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentHeader)
				return LockFillerb[10:19]
			else
				return blank

		DerivedTransactionAmountWhole is a DerivedField
			type is Numeric 8
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentHeader)
				return LockFillerb[10:17]
			else
				return blank

		DerivedTransactionAmountDecimal is a DerivedField
			type is Numeric 10
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentHeader)
				return LockFillerb[18:19]
			else
				return blank

		NumericTransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (DerivedTransactionAmount is numeric)
				return (DerivedTransactionAmountWhole + DerivedTransactionAmountDecimal / 100)

		DerivedFillerSpace is a DerivedField
			type is Alpha 47
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentHeader)
				return LockFillerb[20:97]
			else
				if (ReceivableLockBoxImport.LockType.PaymentDetail)
					return blank
				else
					if (ReceivableLockBoxImport.LockType.RemittanceDetail)
						return LockFillerb[34:97]

		DerivedRemittanceNumber is a DerivedField
			type is Alpha 22
			restricted
			if (ReceivableLockBoxImport.LockType.RemittanceDetail)
				return LockFillerb[1:22]
			else
				return blank

		DerivedRemittanceSign is a DerivedField
			type is Alpha 1
			restricted
			if ((!action type.Create
			and  !action type.Update)
			or	UseDerivedValues)  
				if (ReceivableLockBoxImport.LockType.RemittanceDetail)
					return LockFillerb[23:23]
				else
					return blank

		DerivedAppliedAmount is a DerivedField
			type is Alpha 10
			restricted
			if (ReceivableLockBoxImport.LockType.RemittanceDetail)
				return LockFillerb[24:33]
			else
				return blank

		DerivedAppliedAmountWhole is a DerivedField
			type is Numeric 8
			restricted
			if (ReceivableLockBoxImport.LockType.RemittanceDetail)
				return LockFillerb[24:31]
			else
				return blank

		DerivedAppliedAmountDecimal is a DerivedField
			type is Numeric 10
			restricted
			if (ReceivableLockBoxImport.LockType.RemittanceDetail)
				return LockFillerb[32:33]
			else
				return blank

		NumericAppliedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (DerivedAppliedAmount is numeric)
				return (DerivedAppliedAmountWhole + DerivedAppliedAmountDecimal / 100)

		DerivedPaymentAmount is a DerivedField
			type is Alpha 10
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[1:10]
			else
				return blank

		DerivedPaymentAmountWhole is a DerivedField
			type is Numeric 8
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[1:8]
			else
				return blank

		DerivedPaymentAmountDecimal is a DerivedField
			type is Numeric 10
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[9:10]
			else
				return blank

		NumericPaymentAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (DerivedPaymentAmount is numeric)
				return (DerivedPaymentAmountWhole + DerivedPaymentAmountDecimal / 100)


		DerivedBankIDNumber is a DerivedField
			type is Alpha 15
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[11:25]
			else
				return blank

		DerivedAccountID is a DerivedField
			type is Alpha 35
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[26:60]
			else
				return blank

		DerivedCheckNumber is a DerivedField
			type is Alpha 10
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[61:70]
			else
				return blank

		DerivedRequired is a DerivedField
			type is Alpha 1
			restricted
			if ((!action type.Create
			and  !action type.Update)
			or	UseDerivedValues)  
				if (ReceivableLockBoxImport.LockType.PaymentDetail)
					return LockFillerb[71:71]
				else
					return blank

		DerivedShipToAddress is a DerivedField
			type is Alpha 4
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[72:75]
			else
				return blank

		DerivedContract is a DerivedField
			type is Alpha 6
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[76:81]
			else
				return blank

		DerivedBillingDate is a DerivedField
			type is Alpha 6
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[82:87]
			else
				return blank

		StringBillingDate is a StringField
			type is Numeric size 8
			restricted
			"20"
			LockFillerb[86:87]
			LockFillerb[82:83]
			LockFillerb[84:85]

		CalendarBillingDate is a DerivedField
			type is Date
			restricted
			if (StringBillingDate is numeric)
				return StringBillingDate

		DerivedSalesAmount is a DerivedField
			type is Alpha 10
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[88:97]
			else
				return blank

		DerivedSalesWhole is a DerivedField
			type is Numeric 8
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[88:95]
			else
				return blank

		DerivedSalesDecimal is a DerivedField
			type is Numeric 10
			restricted
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				return LockFillerb[96:97]
			else
				return blank

		NumericSalesAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (DerivedSalesAmount is numeric)
				return (DerivedSalesWhole + DerivedSalesDecimal / 100)


		DerivedFiller6b is a StringField
			type is Alpha 97
			restricted
			PaymentAmount
			BankIDNumber
			AccountID
			CheckNumber
			Required
			ShipToAddress
			Contract
			BillingDate
			SalesAmount

		DerivedFiller4b is a StringField
			type is Alpha 97
			restricted
			RemittanceNumber
			RemittanceSign
			AppliedAmount
			DerivedFillerSpace

		DerivedFiller7b is a StringField
			type is Alpha 97
			restricted
			DepositDate
			NumberOfTransactions
			TransactionAmount
			DerivedFillerSpace









	Relations

		ProformaInvoiceRel
			one-to-one relation to ProformaInvoice
			Field Mapping uses symbolic key  
				related.Company				= ReceivableLockBoxImport.LockBox.Company
				related.ProformaInvoice		= LocalProformaInvoice

		ReceivablePaymentRel
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key 
				related.Company					= ReceivableLockBoxImport.LockBox.Company
				related.ReceivablePaymentHeader	= HeaderImportRel.ReceivablePaymentHeader
				related.ReceivablePayment		= PaymentImportRel.ReceivablePayment

		LocalInterfaceResultsRel
			one-to-one relation to ReceivablesInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.ReceivablesInterfaceResult		= LocalReceivablesInterfaceResult

		LocalReceivableLockBoxRel	
			one-to-one relation to ReceivableLockBox
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= actor.context.FinanceEnterpriseGroup
				related.ReceivableLockBox				= LocalLockBox

		ReceivableLockBoxRel	
			one-to-one relation to ReceivableLockBox
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= actor.context.FinanceEnterpriseGroup
				related.ReceivableLockBox				= ReceivableLockBoxImport.LockBox


		HeaderImportRel
			one-to-one relation to ReceivableLockBoxImport 
			Field Mapping uses ByRunGroup 
				related.RunGroup								= RunGroup
				related.ReceivableLockBoxImport.LockBox			= ReceivableLockBoxImport.LockBox 
				related.ReceivableLockBoxImport.LockBatch		= ReceivableLockBoxImport.LockBatch
				related.ReceivableLockBoxImport.LockSeq			= blank
				related.ReceivableLockBoxImport.LockRemitSeq	= blank

		PaymentImportRel
			one-to-many relation to ReceivableLockBoxImport 
			Field Mapping uses ByRunGroup 
				related.RunGroup								= RunGroup
				related.ReceivableLockBoxImport.LockBox			= ReceivableLockBoxImport.LockBox 
				related.ReceivableLockBoxImport.LockBatch		= ReceivableLockBoxImport.LockBatch
				related.ReceivableLockBoxImport.LockSeq			= ReceivableLockBoxImport.LockSeq
			Instance Selection
				where (related.IsPaymentDetail)

		PaymentsForHeaderRel
			one-to-many relation to ReceivableLockBoxImport 
			Field Mapping uses ByRunGroup 
				related.RunGroup								= RunGroup
				related.ReceivableLockBoxImport.LockBox			= ReceivableLockBoxImport.LockBox 
				related.ReceivableLockBoxImport.LockBatch		= ReceivableLockBoxImport.LockBatch
			Instance Selection
				where (related.IsPaymentDetail)

		RemittancesForPaymentRel
			one-to-many relation to ReceivableLockBoxImport 
			Field Mapping uses ByRunGroup 
				related.RunGroup								= RunGroup
				related.ReceivableLockBoxImport.LockBox			= ReceivableLockBoxImport.LockBox 
				related.ReceivableLockBoxImport.LockBatch		= ReceivableLockBoxImport.LockBatch
				related.ReceivableLockBoxImport.LockSeq			= ReceivableLockBoxImport.LockSeq
			Instance Selection
				where (related.IsPaymentDetailRemittance)







		ReceivableApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
			Instance Selection
				where (related.Company = ReceivableLockBoxImport.LockBox.Company
				and	related.CreditTransaction.CreditCompany		= ReceivableLockBoxImport.LockBox.Company
				and	related.CreditTransaction.CreditBatch		= ReceivableLockBoxImport.LockBatch)

		PaymentsOrRemitsRel
			one-to-many relation to ReceivableLockBoxImport
			Field Mapping uses ByRunGroup
				related.RunGroup								= RunGroup
				related.ReceivableLockBoxImport.LockBox			= ReceivableLockBoxImport.LockBox 
				related.ReceivableLockBoxImport.LockBatch		= ReceivableLockBoxImport.LockBatch
			Instance Selection
				where (related.ReceivableLockBoxImport.LockSeq entered)
			
		CurrentHeaderRel
			one-to-one relation to ReceivableLockBoxImport
			Field Mapping uses ByRunGroup
				related.RunGroup								= LocalRunGroup
				related.ReceivableLockBoxImport.LockBox			= LocalLockBox
				related.ReceivableLockBoxImport.LockBatch		= LocalBatchNumber
				related.ReceivableLockBoxImport.LockSeq			= blank
				related.ReceivableLockBoxImport.LockRemitSeq	= blank

		CurrentPaymentRel
			one-to-one relation to ReceivableLockBoxImport
			Field Mapping uses ByRunGroup
				related.RunGroup								= LocalRunGroup
				related.ReceivableLockBoxImport.LockBox			= LocalLockBox
				related.ReceivableLockBoxImport.LockBatch		= LocalBatchNumber
				related.ReceivableLockBoxImport.LockSeq			= LocalPaymentSeq
				related.ReceivableLockBoxImport.LockRemitSeq	= blank

		RunGroupLockBoxRecordsRel
			one-to-many relation to ReceivableLockBoxImport
			Field Mapping uses ByRunGroup
				related.RunGroup								= LocalRunGroup
				related.ReceivableLockBoxImport.LockBox			= LocalLockBox

		RunGroupRecordsRel
			one-to-many relation to ReceivableLockBoxImport
			Field Mapping uses ByRunGroup
				related.RunGroup								= LocalRunGroup

		LocalBankAccountRel
			one-to-many relation to CompanyCustomerBankAccount
			Field Mapping uses symbolic key
				related.Company													= ReceivableLockBoxImport.LockBox.Company
				related.CompanyCustomerBankAccount.CustomerBankEntity			= LocalBankEntity
				related.CompanyCustomerBankAccount.CustomerBankAccountNumber	= LocalBankAccountNumber

		FranchiseSalesImportRel
			one-to-one relation to FranchiseSalesImport
			Field Mapping uses symbolic key
				related.Company									= ReceivableLockBoxImport.LockBox.Company
				related.Customer								= LocalBankAccountRel.Customer
				related.CustomerShipTo							= DerivedShipToAddress
				related.FranchiseContract						= DerivedContract
				related.FranchiseSalesImport.SalesType			= "A"
				related.FranchiseSalesImport.Date				= CalendarBillingDate
				related.FranchiseSalesImport.AdjustmentNumber	= blank

	Sets

		Set2
			indexed
			Instance Selection
				where (IsPaymentHeader)
			Sort Order
				ReceivableLockBoxImport.LockBox
				ReceivableLockBoxImport.LockBatch

		Set3
			indexed
			Instance Selection
				where (IsPaymentDetail)
			Sort Order
				ReceivableLockBoxImport.LockBox
				ReceivableLockBoxImport.LockBatch
				ReceivableLockBoxImport.LockSeq

		Set4
			indexed
			Instance Selection
				where (IsPaymentDetailRemittance)
			Sort Order
				ReceivableLockBoxImport.LockBox
				ReceivableLockBoxImport.LockBatch
				ReceivableLockBoxImport.LockSeq
				ReceivableLockBoxImport.LockRemitSeq

		ByRunGroup
			indexed
			Sort Order
				RunGroup
				ReceivableLockBoxImport.LockBox
				ReceivableLockBoxImport.LockBatch
				ReceivableLockBoxImport.LockSeq
				ReceivableLockBoxImport.LockRemitSeq

		ByRunGroupLockType
			indexed
			Sort Order
				RunGroup
				ReceivableLockBoxImport.LockType descending
				ReceivableLockBoxImport.LockBox
				ReceivableLockBoxImport.LockBatch
				ReceivableLockBoxImport.LockSeq
				ReceivableLockBoxImport.LockRemitSeq

		ByInterfaceRun
			Sort Order
				InterfaceRun
				RunGroup
				ReceivableLockBoxImport.LockBox
				ReceivableLockBoxImport.LockBatch
				ReceivableLockBoxImport.LockSeq
				ReceivableLockBoxImport.LockRemitSeq

	Field Rules
		RunGroup
			required


		DepositDate
			if (ReceivableLockBoxImport.LockType.PaymentHeader)
				required
				LocalSize = DepositDate size
				constraint (!LocalSize < 6)
					"<DepositDateMustBe6CharactersYYMMDDMsg>"
				constraint (DepositDate is numeric)
					"<DepositDateMustBe6CharactersYYMMDDMsg>"

		NumberOfTransactions
			if (ReceivableLockBoxImport.LockType.PaymentHeader)
				required
				LocalSize = NumberOfTransactions size
				constraint (!LocalSize < 3)
					"<NumberOfTransactionsMustBeNumeric3Msg>"	
				constraint (NumberOfTransactions is numeric)
					"<NumberOfTransactionsMustBeNumeric3Msg>"

		TransactionAmount
			if (ReceivableLockBoxImport.LockType.PaymentHeader)
				required
				LocalSize = TransactionAmount size
				constraint (!LocalSize < 10)
					"<TransactionAmountMustBeNumeric10Msg>"
				constraint (TransactionAmount is numeric)
					"<TransactionAmountMustBeNumeric10Msg>"


		PaymentAmount
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				required
				LocalSize = PaymentAmount size
				constraint (!LocalSize < 10)
					"<PaymentAmountMustBeNumeric10Msg>"
				constraint (PaymentAmount is numeric)
					"<PaymentAmountMustBeNumeric10Msg>"

		BankIDNumber
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				required

		AccountID
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				required

		CheckNumber
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				required

		Required
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				LocalSize = Required size
				constraint (Required = blank or Required = "1")
					"<RequiredMustBeBlankOr1Msg>"

		ShipToAddress
			if (ReceivableLockBoxImport.LockType.PaymentDetail
			and DerivedRequired = 1)
				default to "0000"
				LocalSize = ShipToAddress size
				constraint (!LocalSize < 4)
					"<ShipToAddressMustBeNumeric4Msg>"
				constraint (ShipToAddress is numeric)
					"<ShipToAddressMustBeNumeric4Msg>"

		Contract
			if (ReceivableLockBoxImport.LockType.PaymentDetail
			and DerivedRequired = 1)
				default to "000000"
				LocalSize = Contract size
				constraint (!LocalSize < 6)
					"<ContractMustBeNumeric6Msg>"
				constraint (Contract is numeric)
					"<ContractMustBeNumeric6Msg>"

		BillingDate
			if (ReceivableLockBoxImport.LockType.PaymentDetail
			and DerivedRequired = 1)
				default to "000000"
				LocalSize = BillingDate size
				constraint (!LocalSize < 6)
					"<BillingDateMustBeNumeric6Msg>"
				constraint (BillingDate is numeric)
					"<BillingDateMustBeNumeric6Msg>"

		SalesAmount
			if (ReceivableLockBoxImport.LockType.PaymentDetail
			and DerivedRequired = 1)
				default to "0000000000"
				LocalSize = SalesAmount size
				constraint (!LocalSize < 10)
					"<SalesAmountMustBeNumeric10Msg>"
				constraint (SalesAmount is numeric)
					"<SalesAmountMustBeNumeric10Msg>"

		RemittanceNumber
			if (ReceivableLockBoxImport.LockType.RemittanceDetail)
				required
				LocalSize = RemittanceNumber size

		RemittanceSign
			if (ReceivableLockBoxImport.LockType.RemittanceDetail)
				constraint (RemittanceSign = 1
				or		  RemittanceSign = 2
				or		  RemittanceSign  = blank)
					"<RemittanceSignMustBeMsg>"

		AppliedAmount
			if (ReceivableLockBoxImport.LockType.RemittanceDetail)
				required
				LocalSize = AppliedAmount size
				constraint (!LocalSize < 10)
					"<AppliedAmountMustBeNumeric10Msg>"
				constraint (AppliedAmount is numeric)
					"<AppliedAmountMustBeNumeric10Msg>"

	Rule Blocks
		InterfaceEdits
			ErrorOccurred = false

			if (!ErrorOccurred)
				if  (IsPaymentHeader)
					if  (!PaymentsOrRemitsRel exists)
						ErrorOccurred		= true
						LocalErrorMessage	= NoPaymentsForBatchMsg
					else
					if  (!ReceivableLockBoxImport.LockBox.Company.PaymentBatchNumbering)
						ErrorOccurred		= true
						LocalErrorMessage	= AutoBatchRequiredMsg
					else
					if  (ReceivableLockBoxImport.LockBatch not entered)
						ErrorOccurred		= true
						LocalErrorMessage	= LockBoxBatchNumberRequiredMsg
					else
					if  (!DerivedDepositDate is numeric)
						ErrorOccurred		= true
						LocalErrorMessage	= DepositDateIsNotAValidDateMsg
					else
					if  (!DerivedNumberOfTransactions is numeric)
						ErrorOccurred		= true
						LocalErrorMessage	= NumberOfTransactionsMustBeNumeric3Msg
					else
					if  (!DerivedTransactionAmount is numeric)
						ErrorOccurred		= true
						LocalErrorMessage	= TransactionAmountMustBeNumeric10Msg
				else
				if  (IsPaymentDetail)
					LocalBankEntity			= DerivedBankIDNumber
					LocalBankAccountNumber	= DerivedAccountID
					if (!HeaderImportRel exists)
						ErrorOccurred		= true
						LocalErrorMessage	= NoHeaderMsg
					else
					if  (ReceivableLockBoxImport.LockSeq not entered)
						ErrorOccurred		= true
						LocalErrorMessage	= LockBoxSequenceRequiredMsg
					else
					if  (!DerivedPaymentAmount is numeric)
						ErrorOccurred		= true
						LocalErrorMessage	= PaymentAmountMustBeNumeric10Msg
					else
					if  (DerivedBankIDNumber not entered)
						ErrorOccurred		= true
						LocalErrorMessage	= BankIDNumberRequiredMsg
					else
					if  (DerivedAccountID not entered)
						ErrorOccurred		= true
						LocalErrorMessage	= AccountIDRequiredMsg
					else
					if  (DerivedRequired = 1
					and  !DerivedBillingDate is numeric)
						ErrorOccurred		= true
						LocalErrorMessage	= BillingDateIsNotAValidDateMsg
					else
					if  (DerivedRequired = 1
					and !DerivedSalesAmount is numeric)
						ErrorOccurred		= true
						LocalErrorMessage	= SalesAmountMustBeNumeric10Msg
					else
					if (DerivedRequired != blank and DerivedRequired != "1")
						ErrorOccurred		= true
						LocalErrorMessage	= RequiredMustBeBlankOr1Msg
					else
					if (DerivedRequired = 1
					and !ShipToAddress is numeric)
						ErrorOccurred		= true
						LocalErrorMessage	= ShipToAddressMustBeNumeric4Msg
					else
					if (DerivedRequired = 1
					and !Contract is numeric)
						ErrorOccurred		= true
						LocalErrorMessage	= ContractMustBeNumeric6Msg
					else
					if  (DerivedRequired = 1
					and  FranchiseSalesImportRel exists)
						ErrorOccurred		= true
						LocalErrorMessage	= FranchiseSalesImportAlreadyExistsMsg
				else
					if (!HeaderImportRel exists)
						ErrorOccurred		= true
						LocalErrorMessage	= NoHeaderMsg
					else
					if (!PaymentImportRel exists)
						ErrorOccurred		= true
						LocalErrorMessage	= NoPaymentMsg
					else
					if (ReceivableLockBoxImport.LockRemitSeq entered
					and ReceivableLockBoxImport.LockSeq not entered)
						ErrorOccurred		= true
						LocalErrorMessage	= PaymentSeqRequiredForRemitMsg
					else
					if  (!DerivedAppliedAmount is numeric)
						ErrorOccurred		= true
						LocalErrorMessage	= AppliedAmountMustBeNumeric10Msg
					else
					if (DerivedRemittanceSign != "1" 
					and DerivedRemittanceSign != "2" 
					and DerivedRemittanceSign != blank)
						ErrorOccurred		= true
						LocalErrorMessage	= RemittanceSignMustBeMsg


		InterfaceThisPayment

			initialize ErrorOccurred

			if  (IsPaymentHeader
			and  ReceivablePaymentHeader entered)
				invoke FastUpdate ReceivablePaymentHeader
					invoked.OriginatingInterfaceRun			= LocalReceivablesInterfaceResult
			else
			if  (IsPaymentDetail
			and  ReceivablePayment entered)
				invoke FastUpdate ReceivablePayment
					invoked.OriginatingInterfaceRun			= LocalReceivablesInterfaceResult
			else
			if  (IsPaymentHeader
			or   !HeaderImportRel.RecordInError)
				include InterfaceEdits
				if (ErrorOccurred)
					invoke SetError
						invoked.PrmErrorMessage				= LocalErrorMessage
						invoked.InterfaceResults			= LocalReceivablesInterfaceResult
				else
				if  (IsPaymentHeader)


					invoke OpenBatchUnreleased.Create ReceivablePaymentHeader
						assign result to InterfacedHeader
						resume on error
							ErrorOccurred					= true
							LocalErrorMessage				= error message
						fill in user fields from this instance
						invoked.Company						= ReceivableLockBoxImport.LockBox.Company

						invoked.ReceivableProcessLevel		= ReceivableLockBoxImport.LockBox.ReceivableProcessLevel	
						invoked.ReceivableLockBox			= ReceivableLockBoxImport.LockBox
						invoked.LocBoxBatch					= ReceivableLockBoxImport.LockBatch
						invoked.DepositDate					= CalendarDepositDate
						invoked.GeneralLedgerDate			= CalendarDepositDate
						invoked.CashCode					= ReceivableLockBoxImport.LockBox.CashCode
						if (ReceivableLockBoxImport.LockBox.Currency entered)
							invoked.Currency				= ReceivableLockBoxImport.LockBox.Currency
						else
							invoked.Currency				= ReceivableLockBoxImport.LockBox.CashCode.Currency
						invoked.CbUserField1				= CashLedgerUserField1
						invoked.CbUserField2				= CashLedgerUserField2
						invoked.CbUserField3				= CashLedgerUserField3
						invoked.CbUserField4				= CashLedgerUserField4
						invoked.DepositBankCode 			= DepositBankCode
						invoked.BatchTotal					= NumericTransactionAmount
						invoked.BatchCount					= NumericNumberOfTransactions
						invoked.OriginatingInterfaceRun		= LocalReceivablesInterfaceResult
						invoked.Reference					= Reference		
                        invoked.Origin                      = "N"  
					if (ErrorOccurred)

						invoke SetError
							invoked.PrmErrorMessage				= LocalErrorMessage
							invoked.InterfaceResults			= LocalReceivablesInterfaceResult
					else
						ReceivableCompany					= InterfacedHeader.Company
						ReceivablePaymentHeader				= InterfacedHeader.ReceivablePaymentHeader
				else
				if  (IsPaymentDetail
				and  HeaderImportRel.ReceivablePaymentHeader exist)

					LocalBankEntity			= DerivedBankIDNumber
					LocalBankAccountNumber	= DerivedAccountID


					initialize LocalProformaInvoice
					initialize LocalProformaPendingAmount
					initialize LocalExtraAmount

					if (first RemittancesForPaymentRel.DerivedRemittanceNumber[1:2] = "PF")

						LocalProformaInvoice = first RemittancesForPaymentRel.DerivedRemittanceNumber[3:10]

					LocalProformaPendingAmount = (ProformaInvoiceRel.InvoiceAmount - sum ProformaInvoiceRel.ReceivablePrepaymentRel.ReceivablePayment.TransactionAmount)

					if (LocalProformaPendingAmount > 0)
						LocalExtraAmount = NumericPaymentAmount - LocalProformaPendingAmount



					invoke InterfaceCreate ReceivablePayment
						assign result to InterfacedPayment
						resume on error
							ErrorOccurred		= true
							LocalErrorMessage	= error message
						fill in user fields from this instance
						invoked.Company					= ReceivableLockBoxImport.LockBox.Company
						invoked.ReceivablePaymentHeader = HeaderImportRel.ReceivablePaymentHeader.ReceivablePaymentHeader
						invoked.TypeOfPayment			= "P"
						invoked.PaymentNumber			= DerivedCheckNumber
						if (LocalExtraAmount > 0)
							invoked.TransientSeparatePaymentAmount = LocalExtraAmount
							invoked.TransactionAmount	= NumericPaymentAmount - LocalExtraAmount
						else
							invoked.TransactionAmount	= NumericPaymentAmount

						invoked.DepositDate				= HeaderImportRel.CalendarDepositDate
						invoked.GeneralLedgerDate		= HeaderImportRel.CalendarDepositDate
						invoked.ReceivableProcessLevel	= HeaderImportRel.ReceivableLockBoxImport.LockBox.ReceivableProcessLevel
						invoked.CashCode				= HeaderImportRel.ReceivableLockBoxImport.LockBox.CashCode
						if (LocalBankAccountRel.ArcustomerRel.ActiveStatus.Active)
							invoked.Customer			= LocalBankAccountRel.Customer
							invoked.BankEntity			= DerivedBankIDNumber
							invoked.BankAccountNumber	= DerivedAccountID

						invoked.OriginatingInterfaceRun	= LocalReceivablesInterfaceResult
                        invoked.Origin                  = "N"  
	
					if (ErrorOccurred)

						invoke SetError
							invoked.PrmErrorMessage					= LocalErrorMessage
							invoked.InterfaceResults				= LocalReceivablesInterfaceResult
					else
						ReceivableCompany							= InterfacedPayment.Company
						ReceivablePaymentHeader						= InterfacedPayment.ReceivablePaymentHeader
						ReceivablePayment							= InterfacedPayment.ReceivablePayment



						if (LocalExtraAmount > 0)	
							invoke FastUpdate ReceivablePaymentHeader
								invoked.BatchTotal					-= LocalExtraAmount

						if  (DerivedRequired = 1)
							invoke CreateNoRules FranchiseSalesImport
								invoked.Company							= ReceivableLockBoxImport.LockBox.Company
								invoked.Customer						= LocalBankAccountRel.Customer
								invoked.CustomerShipTo					= DerivedShipToAddress
								invoked.FranchiseContract				= DerivedContract
								invoked.FranchiseSalesImport.SalesType	= "A"
								invoked.FranchiseSalesImport.Date		= CalendarBillingDate
								invoked.SalesClose						= NumericSalesAmount
				else
				if  (IsPaymentDetailRemittance
				and  PaymentImportRel.ReceivablePayment exist)




					if (DerivedRemittanceNumber[1:2] = "PF")
						LocalProformaInvoice = DerivedRemittanceNumber[3:10]
						if (ProformaEligibe)
							invoke Create ReceivablePrepayment
								resume on error
									ErrorOccurred		= true
									LocalErrorMessage	= error message
								invoked.Company							= ReceivableLockBoxImport.LockBox.Company
								invoked.ReceivablePaymentHeader			= HeaderImportRel.ReceivablePaymentHeader
								invoked.ReceivablePayment 				= PaymentImportRel.ReceivablePayment
								invoked.InputReferenceType				= "R"
								invoked.ProformaInvoice					= LocalProformaInvoice
						if (ErrorOccurred)
							invoke SetError
								invoked.PrmErrorMessage				= LocalErrorMessage
								invoked.InterfaceResults			= LocalReceivablesInterfaceResult


					invoke Create ReceivablePaymentRemittance
						assign result to InterfacedRemittance
						resume on error
							ErrorOccurred		= true
							LocalErrorMessage	= error message
						fill in user fields from this instance
						invoked.Company							= ReceivableLockBoxImport.LockBox.Company
						invoked.ReceivablePaymentHeader 		= HeaderImportRel.ReceivablePaymentHeader
						invoked.ReceivablePayment 				= PaymentImportRel.ReceivablePayment
						invoked.ReceivablePaymentRemittance		= ReceivableLockBoxImport.LockRemitSeq
						if (DerivedRemittanceSign = "1")
							invoked.ReceivableInvoiceType 		= "C"
						else
						if (DerivedRemittanceSign = "2")
							invoked.ReceivableInvoiceType 		= "D"
						else
							invoked.ReceivableInvoiceType 		= "I"

						invoked.ReceivableInvoice				= DerivedRemittanceNumber
						if (ProformaEligibe)
							invoked.AppldAmt					= ReceivablePaymentRel.TransactionAmount
							invoked.TransientProformaInterface	= true
							invoked.Status						= 2
						else
							invoked.AppldAmt					= NumericAppliedAmount
	
					if (ErrorOccurred)

						invoke SetError
							invoked.PrmErrorMessage				= LocalErrorMessage
							invoked.InterfaceResults			= LocalReceivablesInterfaceResult
					else
						invoke FastDelete

		MoveValues
		
			if (ReceivableLockBoxImport.LockType.PaymentHeader)
				LockBoxHeader.DepositDate 			= DepositDate
				LockBoxHeader.NumberOfTransactions	= NumberOfTransactions
				LockBoxHeader.TransactionAmount		= TransactionAmount
				LockFillerb							= LockBoxHeader
			else
			if (ReceivableLockBoxImport.LockType.PaymentDetail)
				LockBoxPayment.PaymentAmount		= PaymentAmount
				LockBoxPayment.Required				= Required
				LockBoxPayment.BankIDNumber			= BankIDNumber
				LockBoxPayment.ShipToAddress		= ShipToAddress
				LockBoxPayment.AccountID 			= AccountID
				LockBoxPayment.Contract				= Contract
				LockBoxPayment.CheckNumber			= CheckNumber
				LockBoxPayment.BillingDate			= BillingDate
				LockBoxPayment.SalesAmount			= SalesAmount
				LockFillerb							= LockBoxPayment
			else
			if (ReceivableLockBoxImport.LockType.RemittanceDetail)
				LockBoxRemit.RemittanceNumber		= RemittanceNumber
				LockBoxRemit.RemittanceSign			= RemittanceSign
				LockBoxRemit.AppliedAmount			= AppliedAmount
				LockFillerb							= LockBoxRemit

	Actions
		Create is a Create Action
			completion message is "ReceivableLockboxImportCreated"	
			Entrance Rules




			Action Rules
				include MoveValues


		PaymentCreate is a Create Action
			completion message is "ReceivableLockboxImportCreated"	
			Entrance Rules
				ReceivableLockBoxImport.LockType = 6
			Action Rules
				invoke Create this instance
				
		RemittanceCreate is a Create Action
			completion message is "ReceivableLockboxImportCreated"	
			Entrance Rules
				ReceivableLockBoxImport.LockType = 4
			Action Rules
				invoke Create this instance

		Update is an Update Action
			completion message is "ReceivableLockboxImportUpdated"	
			Action Rules
				include MoveValues

		Delete is a Delete Action
			completion message is "ReceivableLockboxImportDeleted"	
			Entrance Rules
				if  (ReceivableLockBoxImport.LockType.PaymentHeader)
					invoke Delete PaymentsForHeaderRel
				else
				if  (ReceivableLockBoxImport.LockType.PaymentDetail)
					invoke Delete RemittancesForPaymentRel

		DeleteAllTransactionsForRunGroup is a Set Action
			default label is "DeleteAllTransactionsForRunGroup"
			confirmation required

			Parameters
				PrmRunGroup				  is AlphaUpper 30
					default label is "RunGroup"

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	ReceivableLockBoxImport.LockBox.Company.FinanceEnterpriseGroup	= FinanceEnterpriseGroup)

			Action Rules
				Instance Rules
					invoke FastDelete

		InterfaceLockBox is a Set Action
			default label is "InterfaceLockbox"	
			completion message is "InterfaceLockboxImportCompleted"	
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				LockBox						is a ReceivableLockBox
					default label is "Lockbox"	
				DepositBankCode				is a BankTransactionCode
				ReleaseBatch				is Boolean
				CashLedgerUserField1		is AlphaUpper size 30
					default label is "TransactionData1"		
				CashLedgerUserField2		is AlphaUpper size 30
					default label is "TransactionData2"		
				CashLedgerUserField3		is AlphaUpper size 30
					default label is "TransactionData3"		
				CashLedgerUserField4		is AlphaUpper size 30
					default label is "TransactionData4"		
				Reference		
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup






				PrmRunGroup
					required
						"RunGroupIsRequired"
				ReleaseBatch
					initial value is true

			Local Fields
				LocalInstanceCount					is Numeric 10
				LocalInterfaceResultView			is a ReceivablesInterfaceResult view
				CurrentRunGroup						is like RunGroup
				CurrentBatch						is like ReceivablePaymentHeader
				CurrentLockBox						is like ReceivableLockBox
				CurrentPaymentSeq					is like Sequence
				LocalActor							is Actor
				LocalReceivablePaymentBatchCount	is Numeric 12	
				LocalReceivablePaymentCount			is Numeric 12	
				LocalReceivablePaymentDetailCount	is Numeric 12 

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and	(LockBox not entered
				or	  LockBox	= ReceivableLockBoxImport.LockBox))

			Sort Order
				RunGroup
				ReceivableLockBoxImport.LockBox
				ReceivableLockBoxImport.LockBatch
				ReceivableLockBoxImport.LockSeq
				ReceivableLockBoxImport.LockRemitSeq

			Action Rules
			
				Empty Set Rules

					invoke Create ReceivablesInterfaceResult
						assign result to LocalInterfaceResultView
						invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoked.RunTime						= current timestamp
						invoked.RunGroup					= PrmRunGroup
						invoked.RunType						= 3
						invoked.ReleaseBatch				= ReleaseBatch
						invoked.DepositBankCode				= DepositBankCode
						invoked.LockBox						= LockBox
						invoked.CashLedgerUserField1		= CashLedgerUserField1
						invoked.CashLedgerUserField2		= CashLedgerUserField2
						invoked.CashLedgerUserField3		= CashLedgerUserField3
						invoked.CashLedgerUserField4		= CashLedgerUserField4
						invoked.Status						= 1
						invoked.PrmReference				= Reference		

				RunGroup Set Rules
					Entrance Rules
						CurrentRunGroup							= RunGroup
						ErrorOccurred							= false

						invoke Create ReceivablesInterfaceResult
							assign result to LocalInterfaceResultView
							invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.RunTime						= current timestamp
							invoked.RunGroup					= PrmRunGroup
							invoked.RunType						= 3
							invoked.ReleaseBatch				= ReleaseBatch
							invoked.DepositBankCode				= DepositBankCode
							invoked.LockBox						= LockBox
							invoked.CashLedgerUserField1		= CashLedgerUserField1
							invoked.CashLedgerUserField2		= CashLedgerUserField2
							invoked.CashLedgerUserField3		= CashLedgerUserField3
							invoked.CashLedgerUserField4		= CashLedgerUserField4
							invoked.PrmReference				= Reference		

					Exit Rules

						invoke Update LocalInterfaceResultView.ReceivablesInterfaceResult
							invoked.RecordsProcessed		= LocalInstanceCount
							if (LocalInterfaceResultView.Status.InProcess)
								invoked.Status					= 1

							invoked.ReceivableInterfaceCounts.BatchCount			= LocalReceivablePaymentBatchCount
							invoked.ReceivableInterfaceCounts.PassedHeaderCount		= LocalReceivablePaymentCount		 
							invoked.ReceivableInterfaceCounts.AdditionalDetailCount	= LocalReceivablePaymentDetailCount

						LocalActor = actor
						send notification
							to LocalActor
							description is "ReceivableLockboxInterfaceHasCompleted"	
							priority is high
							detail is "ResultsCanBeSeenInInterfaceResults"

				ReceivableLockBoxImport.LockBox Set Rules
					Entrance Rules
						CurrentLockBox					= ReceivableLockBoxImport.LockBox

				ReceivableLockBoxImport.LockBatch Set Rules
					Entrance Rules
						CurrentBatch					= ReceivableLockBoxImport.LockBatch






					Exit Rules

						LocalRunGroup					= CurrentRunGroup
						LocalLockBox					= CurrentLockBox
						LocalBatchNumber				= CurrentBatch






						if  (!ErrorOccurred
						and  !CurrentHeaderRel.RecordInError
						and  !CurrentHeaderRel.PaymentsOrRemitsRel exists)
							invoke FastUpdate CurrentHeaderRel.ReceivablePaymentHeader
								invoked.InterfaceInProcess	= false

							if  (ReleaseBatch)
								SuccessfulRelease = true
								invoke OpenBatchUnreleased.Release CurrentHeaderRel.ReceivablePaymentHeader
									resume on error
										SuccessfulRelease = false

								if  (!SuccessfulRelease)
									invoke Update LocalInterfaceResultView.ReceivablesInterfaceResult
										if (invoked.Status.Incomplete)
											invoked.Status					= 4  
										else
											invoked.Status					= 3  

							invoke FastDelete CurrentHeaderRel

				ReceivableLockBoxImport.LockSeq Set Rules
					Entrance Rules
						CurrentPaymentSeq				= ReceivableLockBoxImport.LockSeq

					Exit Rules
						LocalRunGroup					= CurrentRunGroup
						LocalLockBox					= CurrentLockBox
						LocalBatchNumber				= CurrentBatch
						LocalPaymentSeq					= CurrentPaymentSeq
						
						if (CurrentPaymentRel.ReceivablePayment exists
						and !CurrentPaymentRel.RemittancesForPaymentRel exists)
							invoke FastDelete CurrentPaymentRel 

				Instance Rules


					UseDerivedValues = true

					ParameterDepositBankCode			= DepositBankCode
					ErrorOccurred						= false
					LocalReceivablesInterfaceResult 	= LocalInterfaceResultView.ReceivablesInterfaceResult
					InterfaceRun						= LocalInterfaceResultView.ReceivablesInterfaceResult
					RecordInError						= false
					initialize ErrorMessage

					include InterfaceThisPayment
					LocalInstanceCount			+= 1
					if (IsPaymentHeader)
						LocalReceivablePaymentBatchCount	+= 1
					if (IsPaymentDetail)
						LocalReceivablePaymentCount			+= 1
					if (IsPaymentDetailRemittance)
						LocalReceivablePaymentDetailCount	+= 1

		FastUpdate is an Update Action
			restricted
			bypass field rules

		FastDelete is a Delete Action
			restricted
			bypass relational integrity rules

		ResetErrorMessage is an Instance Action
			Action Rules
				initialize ErrorMessage


		SetError is an Instance Action
			restricted
			Parameters
				PrmErrorMessage			is Alpha 150
				InterfaceResults		is like ReceivablesInterfaceResult
			Action Rules
				RecordInError						= true
				ErrorMessage						= PrmErrorMessage

				LocalReceivablesInterfaceResult		= InterfaceResults

				invoke Update LocalInterfaceResultsRel
					invoked.Status					= 2



