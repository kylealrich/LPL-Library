ReportingChart is a BusinessClass
    owned by GeneralLedger
    prefix is GLRCT
    representative text is "<ReportingChart>-<Description>"
    
    Ontology
		symbolic key is ReportingChart  		
				    
    Patterns
		implements BODId

    Persistent Fields
    	Description
		ChartAccountNode			is a GeneralLedgerChartAccount
			delete ignored
		ChartSequence				is Numeric 4
		IsEnterpriseChart			is Boolean
		UnusedDimensionStructure	is Boolean
			restricted
		Active					
		DeleteInProgress 			is Boolean 
		
   	Context Fields
   		GeneralLedgerChartAccount
#ifdef module integration
   		FSMInboundBODTracker
#endif	

    Derived Fields
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforChartOfAccount"

		ContextMessageText is a MessageField
			restricted
			"ReportingChart<ReportingChart>"
			
		TopNodeString	    is a StringField
			type is AlphaUpper 26
			restricted
			ChartSequence
			"_TOP_NODE"

		DerivedOldPrefix	is a StringField
			type is AlphaUpper 26
			restricted
			ChartSequence
			"_"
			
		DerivedNewPrefix    is a StringField
			type is AlphaUpper 26
			restricted
			LocalNewChartSequence
			"_"
			
		DerivedNewAccount   is a DerivedField
			type is AlphaUpper 26
			restricted
			I1 = DerivedOldPrefix size
			I1 += 1
			DerivedNewAccount = DerivedNewPrefix + LocalCopyAccount[I1:26]
		
		DeleteInProgressCompletionMessage	is a MessageField
			restricted
			"DeleteInProgress."	
		DeleteCompletionMessage		is a MessageField 
			restricted 
			"ChartDeleted"	


#ifdef module integration
		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "appProdline"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value


		BODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Create or LocalActionCode.Create)
				return "Add"
			if (action type.Update)
				return "Replace"
			if (action type.Delete)
				return "Replace"
			else
				return ""
		
		DerivedReportingChart is a DerivedField
			type is Alpha 9
			restricted
			return ReportingChart using "%d"
		
		BODVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return bod id.VariationID
				
		DerivedSystemOfRecord is a DerivedField
			type is Alpha size 10
			restricted
			return 0
			
		BODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODCurrentTimeStamp = current timestamp
			return BODCurrentTimeStamp
			
		BODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODCurrentTimeStamp[1:4] + "-" + BODCurrentTimeStamp[5:6] + "-" + BODCurrentTimeStamp[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"
		
		BODCreateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODCreateTimeStamp =  create stamp.timestamp
			return BODCreateTimeStamp
			
		BODFormattedCreateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODCreateTimeStamp[1:4] + "-" + BODCreateTimeStamp[5:6] + "-" + BODCreateTimeStamp[7:8] + "T" + BODCreateTimeStamp[9:10] + ":" + BODCreateTimeStamp[11:12] + ":" + BODCreateTimeStamp[13:14] + "Z"
		
		BODUpdateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			BODUpdateTimeStamp = update stamp.timestamp
			return BODUpdateTimeStamp
			
		BODFormattedUpdateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODUpdateTimeStamp[1:4] + "-" + BODUpdateTimeStamp[5:6] + "-" + BODUpdateTimeStamp[7:8] + "T" + BODUpdateTimeStamp[9:10] + ":" + BODUpdateTimeStamp[11:12] + ":" + BODUpdateTimeStamp[13:14] + "Z"

		DerivedDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedCleanDocumentID = "Y")
				return ReportingChart
			else
				return FinanceEnterpriseGroup + DerivedDelimiter + ReportingChart
				
		DerivedBODID is a DerivedField
			type is Alpha 100
			restricted
			return "infor-nid:" + DerivedTenantID + ":" +DerivedDocumentID + ":" +"?AccountingChart&verb=Sync&TrackerID="+ LocalFSMInboundBODTracker
		
		DerivedMultipleFEG is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "IsMultipleFEG"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedCleanDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "RequiredCleanDocumentID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedTriggerBODBasedOnCrossReference is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "TriggerBODBasedOnCrossReference"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value																																															
	
		DerivedLastupdateBy is a DerivedField
			type is Alpha size 60
			restricted
			return update stamp.actor
			
		DerivedBODStatusCode is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Delete or LocalActionCode.Delete)
				return "Deleted"
			else
				if (Active)
					return "Open"
				else	
					return "Closed"
		DerivedAUOrder is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.AccountingUnitOrder = 0)
				return ""
			else
				return "1"
		DerivedProjectOrder is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.ProjectOrder = 0)
				return ""
			else
				return "2"
		DerivedFDim1Order is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension1Order = 0)
				return ""
			else
				return "3"
		DerivedFDim2Order is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension2Order = 0)
				return ""
			else
				return "4"
		DerivedFDim3Order is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension3Order = 0)
				return ""
			else
				return "5"
		DerivedFDim4Order is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension4Order = 0)
				return ""
			else
				return "6"
		DerivedFDim5Order is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension5Order = 0)
				return ""
			else
				return "7"
		DerivedFDim6Order is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension6Order = 0)
				return ""
			else
				return "8"
		DerivedFDim7Order is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension7Order = 0)
				return ""
			else
				return "9"
		DerivedFDim8Order is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension8Order = 0)
				return ""
			else
				return "10"
		DerivedFDim9Order is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension9Order = 0)
				return ""
			else
				return "11"
		DerivedFDim10Order is a DerivedField
			type is Numeric 2
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension10Order = 0)
				return ""
			else
				return "12"
		DerivedAULIstID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedAUOrder = 0)
				return ""
			else 
				return "Cost Centers"
		DerivedProjectListID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedProjectOrder = 0)
				return ""
			else
				return "Projects"
		DerviedFDim1ListID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedFDim1Order = 0)
				return ""
			else
				return "Finance 1 Dimensions"
		DerviedFDim2ListID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedFDim2Order = 0)
				return ""
			else
				return "Finance 2 Dimensions"
		DerviedFDim3ListID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedFDim3Order = 0)
				return ""
			else
				return "Finance 3 Dimensions"
		DerviedFDim4ListID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedFDim4Order = 0)
				return ""
			else
				return "Finance 4 Dimensions"
		DerviedFDim5ListID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedFDim5Order = 0)
				return ""
			else
				return "Finance 5 Dimensions"
		DerviedFDim6ListID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedFDim6Order = 0)
				return ""
			else
				return "Finance 6 Dimensions"
		DerviedFDim7ListID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedFDim7Order = 0)
				return ""
			else
				return "Finance 7 Dimensions"
		DerviedFDim8ListID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedFDim8Order = 0)
				return ""
			else
				return "Finance 8 Dimensions"
		DerviedFDim9ListID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedFDim9Order = 0)
				return ""
			else
				return "Finance 9 Dimensions"
		DerviedFDim10ListID is a DerivedField
			type is Alpha 50
			restricted
			if(DerivedFDim10Order = 0)
				return ""
			else
				return "Finance 10 Dimensions"
		DerivedAccountingUnitRequiredFlag is a DerivedField
			type is Alpha 30
			restricted
			if(FinanceEnterpriseGroup.AccountingUnitRequired = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.AccountingUnitLabel != "")
				return "Optional"
			else
				return ""
		DerivedProjectRequiredFlag is a DerivedField
			type is Alpha 30
			restricted
			if(FinanceEnterpriseGroup.ProjectRequired = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.ProjectLabel != "")
				return "Optional"
			else
				return ""
		DerivedFinanceDimension1RequiredFlag is a DerivedField
			type is Alpha 30
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension1Required = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.FinanceDimension1Label != "")
				return "Optional"
			else
				return ""
		DerivedFinanceDimension2RequiredFlag is a DerivedField
			type is Alpha 30
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension2Required = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.FinanceDimension2Label != "")
				return "Optional"
			else
				return ""
		DerivedFinanceDimension3RequiredFlag is a DerivedField
			type is Alpha 30
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension3Required = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.FinanceDimension3Label != "")
				return "Optional"
			else
				return ""
		DerivedFinanceDimension4RequiredFlag is a DerivedField
			type is Alpha 30
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension4Required = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.FinanceDimension4Label != "")
				return "Optional"
			else
				return ""
		DerivedFinanceDimension5RequiredFlag is a DerivedField
			type is Alpha 30
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension5Required = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.FinanceDimension5Label != "")
				return "Optional"
			else
				return ""
		DerivedFinanceDimension6RequiredFlag is a DerivedField
			type is Alpha 30
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension6Required = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.FinanceDimension6Label != "")
				return "Optional"
			else
				return ""
		DerivedFinanceDimension7RequiredFlag is a DerivedField
			type is Alpha 30
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension7Required = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.FinanceDimension7Label != "")
				return "Optional"
			else
				return ""
		DerivedFinanceDimension8RequiredFlag is a DerivedField
			type is Alpha 30
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension8Required = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.FinanceDimension8Label != "")
				return "Optional"
			else
				return ""
		DerivedFinanceDimension9RequiredFlag is a DerivedField
			type is Alpha 30
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension9Required = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.FinanceDimension9Label != "")
				return "Optional"
			else
				return ""
		DerivedFinanceDimension10RequiredFlag is a DerivedField
			type is Alpha 30 
			restricted
			if(FinanceEnterpriseGroup.FinanceDimension10Required = true)
				return "Mandatory"
			if(FinanceEnterpriseGroup.FinanceDimension10Label != "")
				return "Optional"
			else
				return ""
		AccountingChartXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			AccountingChartXMLBOD = template.IONSyncAccountingChart_ReportingChart_ST document for this instance
#endif		

		UndefinedMsg is a LabelField		
			restricted		
			"NotDefined"
			
		InactiveMF is a MessageField		
			restricted
			"Inactive"

		ActiveMF is a MessageField		
			restricted
			"Active"

		ReportingChartTitle is a LabelField
			"Chart_<ReportingChart>_<Description>"

		ReportingChartTitleNoRecord is a LabelField
			"CreateChart"

		ReportingChartFormTitle is a DerivedField
			type is Alpha size up to 80
			if (RecordExists)
				return ReportingChartTitle
			else
				return ReportingChartTitleNoRecord	

		StatusMessage is a ConditionalField		
			type is Alpha size 20
			if (Active)
				ActiveMF
			else
				InactiveMF

		IsEnterpriseChartMF is a MessageField		
			restricted
			"Enterprise_Structure"

		IsEnterpriseChartMessage is a ConditionalField		
			type is Alpha size 20
			if (IsEnterpriseChart)
				IsEnterpriseChartMF
			else
				blank

	Local Fields
		LocalNewChart		    is a ReportingChart
		LocalCopyAccount        is a GeneralLedgerChartAccount
		LocalNewAccount         is a GeneralLedgerChartAccount
		LocalNewChartSequence   is Numeric 4
		LocalParentAccount	    is a GeneralLedgerChartAccount
		LocalSubordinateAccount is AlphaUpper 26
		I1					    is Numeric 2		
 		LocalSystemAccount 		is a SystemAccount
 		LocalChartAccountNode	is a GeneralLedgerChartAccount
 		LocalGeneralLedgerChartAccount	is like GeneralLedgerChartAccount
		LocalActionCode					is an ActionCode
		LocalBODCurrentTimeStamp		is a BODCurrentTimeStamp
  		InvokedByUnusedStructure
  		NativeLPLBODTrigger				is Boolean
		NativeLPLBODTriggerExclude 		is Boolean
  		LocalAsyncID 			is an AsyncActionRequest
  		LocalBodAccountingEntity			is AlphaUpper size 12
		LocalCrossAccountingEntity 			is Alpha 40
		LocalCleanDocIDAccountingentity 	is Alpha 40
		LocalBODFormattedID					is Alpha 100
		AccountingChartCleanDocIDXMLBOD		is XMLDocument
		LocalBODTrigger						is Boolean
#ifdef module integration
		NewBODTracker  						is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker			is Numeric 15
		Error            					is Boolean
	    ErrorMessage     					is Alpha 300
	    LocalConfigurationParameter			is Alpha size up to 200
	    LocalSourceValue					is Alpha 20
#endif	
	    
	Relations
		ChartAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
			Instance Selection
				where (related.GeneralLedgerChartAccount	!= ChartAccountHierarchyDetailRel.GeneralLedgerChartAccount)
		ChartAccountHierarchyDetailRel  
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByParentAccount  
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
				related.ParentChartAccount		 = ChartAccountNode
		AccountsTopNodeRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TopNode					= ChartAccountNode 
		ReportingChartRel
			one-to-many relation to ReportingChart
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
			Instance Selection
				where (related.IsEnterpriseChart
			    and    related.UniqueID != UniqueID)
		GeneralLedgerChartAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
			Instance Selection
				where (related.GeneralLedgerChartAccount	= ReportingChartAccountHierarchyRel.GeneralLedgerChartAccount)
		ReportingChartAccountHierarchyRel  
			one-to-many relation to ReportingChartAccount
			Field Mapping uses ByChartParentAccount  
				related.FinanceEnterpriseGroup	 = FinanceEnterpriseGroup
				related.ReportingChart			 = ReportingChart
				related.ParentChartAccount		 = ChartAccountNode
		NotInReportingChartAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
			Instance Selection
				where (related.NotUsedInHierarchy)
		ReportingChartAccountRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
				related.ReportingChart			 	= ReportingChart
				related.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount
		UploadErrorsRel is a ReportingChartAccountUpload set
			Instance Selection
				where (related.ErrorMessage entered)
		UnrealizedGainAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
				related.ReportingChart			 	= ReportingChart
			Instance Selection
				where (related.GeneralLedgerChartAccount.ChartType.Posting
				and    related.Revalue
				and	   related.UnrealizedGainAccount entered)
		UnrealizedLossAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
				related.ReportingChart			 	= ReportingChart
			Instance Selection
				where (related.GeneralLedgerChartAccount.ChartType.Posting
				and    related.Revalue
				and	   related.UnrealizedLossAccount entered)
		TranslationGainAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
				related.ReportingChart			 	= ReportingChart
			Instance Selection
				where (related.GeneralLedgerChartAccount.ChartType.Posting
				and	   related.TranslationGainAccount entered)
		TranslationLossAccountRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 	= FinanceEnterpriseGroup
				related.ReportingChart			 	= ReportingChart
			Instance Selection
				where (related.GeneralLedgerChartAccount.ChartType.Posting
				and	   related.TranslationLossAccount entered)
		ContextDimensionHierarchyRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart				= ReportingChart
				related.GeneralLedgerChartAccount   = GeneralLedgerChartAccount

		SecurityGroupRel
			one-to-many relation to FinanceDimensionSecurityGroup
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		  = FinanceEnterpriseGroup
				related.DimensionGroupType			  = 14
				related.FinanceDimensionSecurityGroup = any SecurityGroupMemberRel.FinanceDimensionSecurityGroup
		SecurityGroupMemberRel
			one-to-many relation to FinanceDimensionSecurityGroupMember
			Field Mapping uses ByStructure
				related.FinanceEnterpriseGroup		  = FinanceEnterpriseGroup
				related.DimensionGroupType			  = 14
				related.FinanceDimensionStructure     = ReportingChart	
		SecurityGroupsRequiringRebuildRel
			one-to-many relation to FinanceDimensionSecurityGroupMember
			Field Mapping uses ByStructure
				related.FinanceEnterpriseGroup		  = FinanceEnterpriseGroup
				related.DimensionGroupType			  = 14
				related.FinanceDimensionStructure     = ReportingChart
			Instance Selection
				where (related.RequiresRebuild)
		SecurityGroupsNotRequiringRebuildRel
			one-to-many relation to FinanceDimensionSecurityGroup
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		  = FinanceEnterpriseGroup
				related.DimensionGroupType			  = 14
				related.FinanceDimensionSecurityGroup = any SecurityGroupMemberRel.FinanceDimensionSecurityGroup
			Instance Selection
				where (!related.RequiresRebuild)
		ChartToReportingBasisRel		
			one-to-many relation to ReportingBasis 
			Field Mapping uses symbolic key 
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection 	
				where (related.ReportingChart   	   = ReportingChart)
												

#ifdef module integration			
		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
        
        BODAccountingEntityRel
			one-to-many relation to AccountingEntity
			Field Mapping uses symbolic key
			Instance Selection
				where (related.FinanceEnterpriseGroup = FinanceEnterpriseGroup)
		
		BODCrossAccountingEntityRel
			one-to-one relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
				related.AccountingEntity 		= LocalBodAccountingEntity
		
		FSMBODAECrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
            	related.FSMBODCrossReference.SourceField 		= "CSFAE"
            	related.FSMBODCrossReference.DestinationField 	= "DESTAE"
            Instance Selection
				where (related.SourceValue	= LocalCleanDocIDAccountingentity )
		
		FSMCleanBODCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField 		= "CSFAE"
				related.FSMBODCrossReference.DestinationField 	= "DESTAE"
				
        FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "AccountingChart"
            	related.FSMBODConfiguration.Direction 	= 1
				
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker
#endif           	

    Conditions
		ActiveCondition
			when (Active)
		ValidForTranslationAndRevalue
			restricted
			when(FinanceEnterpriseGroup.CurrencyTranslationAndRevalue)
		UploadRecordsExist
			restricted
			when (ReportingChartAccountUpload set exists)
		UploadErrorsExist
			restricted
			when (UploadErrorsRel exists)
		AvailableChart
			restricted
			when ((!UnusedDimensionStructure)
			and   (!ContextDimensionHierarchyRel exists))
		UsedInASecurityGroup
			when (SecurityGroupMemberRel exists)
		SecurityGroupRequiresRebuild
			when (SecurityGroupsRequiringRebuildRel exists)
		RecordExists
			when (ReportingChart exists)
		DeleteAllowed
        	restricted
        	when (!Active)
						
	Sets
		ByChartSequence
			Sort Order
				FinanceEnterpriseGroup
				ChartSequence
		
		ByChartAccountNode
			Sort Order
				FinanceEnterpriseGroup
				ChartAccountNode
				ReportingChart
				
		ByEnterpriseChart
			Sort Order
				FinanceEnterpriseGroup
				IsEnterpriseChart descending
				ReportingChart
				
    Field Rules
		Description
			required
		ChartSequence
			autosequence using ByChartSequence
		IsEnterpriseChart
			constraint (Active)
				"EnterpriseChartMustBeActive"
			constraint (!UnusedDimensionStructure)
				"TheUnusedDimensionChartCannotBeTheEnterpriseChart"				
			constraint (!ReportingChartRel exists)
				"<first ReportingChartRel.ReportingChart>AlreadyDesignatedAsEnterpriseChart"
		Active
			if (UnusedDimensionStructure)
				Active = false
				
	Attach Rules
		if (!parentcontext.name = "ReportingChartAccount"
		and !parentcontext.name = "ReportingChartAccountUpload"
		and !parentcontext.name = "GLChartAccountShadow"
		and !parentcontext.name = "GeneralLedgerChartAccount"
		and !parentcontext.name = "FinanceEnterpriseGroup"
		and !parentcontext.name = "AccountAnalysisSettings"
		and !parentcontext.name = "ReportingBasis")
			constraint (Active)
				"ChartIsNotActive"
				
	Action Exit Rules
		if (FinanceEnterpriseGroup.BODTrigger and !LocalBODTrigger)
			if (!action type.Delete and action != "DeleteChartAccount")
				if (action != "UpdateBODIdFields") 
					LocalActionCode = LocalActionCode.Update
					if (action type.Create)
						LocalActionCode = LocalActionCode.Create
					else
						if (action type.Delete)
							LocalActionCode = LocalActionCode.Delete
					
					increment bod id.VariationID
	Rule Blocks
		TriggerAccountingChartRules
			trigger "ReportingChartService" PA service
				resume on error
				title is "EG:<FinanceEnterpriseGroup>RC:<ReportingChart>"
				Criteria
					FinanceEnterpriseGroup
					ReportingChart
				Variables
					LocalActionCode
						variable name is ActionCode
					include persistent fields from FinanceEnterpriseGroup
					include persistent fields from ReportingChart
					include persistent fields from ChartAccountNode
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp

							
	Apply Pending Effective Rules
		if (FinanceEnterpriseGroup.BODTrigger)
			if (!action type.Delete and action != "DeleteChartAccount")
				if (action != "UpdateBODIdFields") 
					LocalActionCode = LocalActionCode.Update
					if (action type.Create)
						LocalActionCode = LocalActionCode.Create
					else
						if (action type.Delete)
							LocalActionCode = LocalActionCode.Delete
		
					increment bod id.VariationID
					include TriggerAccountingChartRules



	
	Audit Entry Rules
		if(not audit period.Future)
			if (FinanceEnterpriseGroup.BODTrigger)
				if (!action type.Delete and action != "DeleteChartAccount")
					include TriggerAccountingChartRules



	
	Actions
		T2VCreate is a Create Action
			restricted
			default label is untranslatable

		Create is an Action
			Entrance Rules

			Action Rules

			Exit Rules
				
				InvokedByUnusedStructure = true
				
				invoke Create GeneralLedgerChartAccount
					invoked.FinanceEnterpriseGroup  		= FinanceEnterpriseGroup
					invoked.GeneralLedgerChartAccount		= TopNodeString
					invoked.TopNode							= TopNodeString
					invoked.AccountDescription				= Description + " Top Level"

					invoked.ChartSection					= 0
					invoked.ChartType						= ChartType.Node

					invoked.SkipHierarchy					= true
					invoked.IsTopNode						= true				
				
				if (IsEnterpriseChart)
					invoke SetEnterpriseChart FinanceEnterpriseGroup
						invoked.PrmEnterpriseChart = ReportingChart

				ChartAccountNode = TopNodeString

		Update is an Action
		
			Action Rules

				if (IsEnterpriseChart changed)
					invoke SetEnterpriseChart FinanceEnterpriseGroup
						if (!IsEnterpriseChart)
							invoked.PrmClearChart 	   = true
						else
							invoked.PrmEnterpriseChart = ReportingChart			

				invoke Update ChartAccountNode
					invoked.AccountDescription				= Description + " Top Level"
					initialize invoked.AccountType

		Delete is an Action
			restricted 
			completion message is "<DeleteCompletionMessage>"
			valid when (DeleteAllowed)
			Local Fields 
				LocalActor 		is an Actor 
			Entrance Rules
				constraint (!IsEnterpriseChart)
					"CannotDeleteEnterpriseChart"
				constraint (!UnusedDimensionStructure)
					"CannotDeleteUnusedDimensionStructure"
				constraint (!Active)
					"CannotDeleteActiveChartAccountStructure"	
										
				invoke Delete ReportingChartAccount set 
			
				if (ChartAccountNode entered)
					invoke DeleteAll AccountsTopNodeRel	
					
				if (FinanceEnterpriseGroup.BODTrigger)
					LocalActionCode = LocalActionCode.Delete
					increment bod id.VariationID
					include TriggerAccountingChartRules



				LocalActor = actor	
				send notification 
					to LocalActor 
					description is "Chart<ReportingChart>Deleted"
					
			Action Rules
			Exit Rules	

		DeleteChartAccount is an Instance Action
			default label is "Delete"
			completion message is "<DeleteInProgressCompletionMessage>"
			valid when (DeleteAllowed)
			
			Entrance Rules
				confirmation required
					"AreYouSureYouWantToPerformTheFollowingAction:_\Delete?"
				constraint (!IsEnterpriseChart)
					"CannotDeleteEnterpriseChart"
				constraint (!UnusedDimensionStructure)
					"CannotDeleteUnusedDimensionStructure"	
				constraint (ChartToReportingBasisRel not exist)
					"CannotDeleteAtleastOneAssociatedBusinessClassReportingBasisExist"
				constraint (!Active)
					"CannotDeleteActiveChartAccountStructure"				
				
				DeleteInProgress = true 
			
			Action Rules 
				if (ChartAccountNode entered)
					invoke ClearUsedByATransaction GeneralLedgerChartAccount in background
						assign async action request id to LocalAsyncID
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmChartAccountNode			= ChartAccountNode					
					invoke DeleteAll ReportingChartAccount 
						run after LocalAsyncID
						assign async action request id to LocalAsyncID
						invoked.PrmFinanceEnterpriseGroup  = FinanceEnterpriseGroup
						invoked.PrmReportingChart 		   = ReportingChart
					invoke DeleteAllChartAccount GeneralLedgerChartAccount
						run after LocalAsyncID
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmChartAccountNode			= ChartAccountNode					
						invoked.PrmReportingChart 			= ReportingChart
				else
					invoke DeleteAll ReportingChartAccount 
						invoked.PrmFinanceEnterpriseGroup  = FinanceEnterpriseGroup
						invoked.PrmReportingChart 		   = ReportingChart									
					
		RestrictedDelete is a Delete Action
			restricted
			valid when (DeleteAllowed)

			Entrance Rules
				constraint (!Active)
					"CannotDeleteActiveChartAccountStructure"

				if (ChartAccountNode entered)
					invoke DeleteAll AccountsTopNodeRel	

				
			Action Rules
			Exit Rules
					
		CopyChart is an Instance Action
			valid when (!UnusedDimensionStructure)
			completion message is "CopySubmitted"
				
			Parameters
				NewChart			is like ReportingChart
				NewDescription 		is like Description
				MakeNewChartActive  is Boolean
							
			Parameter Rules
				NewChart
					required
					LocalNewChart = NewChart
					constraint (!LocalNewChart exists)
						"ReportingChartAlreadyExists"
				NewDescription
					default to NewChart
				
			Local Fields
				LocalAsyncID			is an AsyncActionRequest
							
			Action Rules
				invoke Create ReportingChart
					invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.ReportingChart 		   = NewChart
					invoked.Description			   = NewDescription
					invoked.IsEnterpriseChart	   = false
					invoked.Active			       = MakeNewChartActive

			Exit Rules
				invoke ExportToUpload ChartAccountNode in background
					assign async action request id to LocalAsyncID
					invoked.PrmFinanceEnterpriseGroup         = FinanceEnterpriseGroup
					invoked.PrmReportingChart			      = ReportingChart
					invoked.PrmCopyToChart					  = NewChart
				
				LocalNewChart						= NewChart	
				
				invoke ScheduleUpload LocalNewChart in background
					run after LocalAsyncID					
				




		ScheduleUpload is an Instance Action
			restricted
			Action Rules
				invoke UploadHierarchy

		UploadHierarchy is an Instance Action
			valid when (UploadRecordsExist)
			run in background
						
			Parameters
				RetainDefaultValuesOnMove  		is Boolean
					
			Action Rules
				invoke UploadHierarchy ReportingChartAccountUpload
					invoked.PrmFinanceEnterpriseGroup  	   = FinanceEnterpriseGroup
					invoked.PrmReportingChart         	   = ReportingChart
					invoked.RetainDefaultValues        	   = RetainDefaultValuesOnMove
					
		ResetUploadErrors is an Instance Action
			valid when (UploadErrorsExist)
			
			Action Rules
				invoke ResetAllErrors ReportingChartAccountUpload
					invoked.PrmFinanceEnterpriseGroup  = FinanceEnterpriseGroup
					invoked.PrmReportingChart		   = ReportingChart
															
		BuildShadowFile is an Instance Action
			restricted
			
			Local Fields
				LocalAsyncId				is an AsyncActionRequest
						
			Action Rules
				invoke DeleteShadowForChart GLChartAccountShadow in background
					assign async action request id to LocalAsyncId				
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmReportingChart  		  = ReportingChart				
					
				invoke BuildShadowFile ReportingChartAccount in background
					run after LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmReportingChart		  = ReportingChart
					
		BuildShadowFileForAccount is an Instance Action
			restricted
			
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccount						is a GeneralLedgerChartAccount
					default label is "Account"
		
			Action Rules
				invoke BuildShadowFile ReportingChartAccount in foreground
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmReportingChart		  = ReportingChart
					invoked.PrmAccount				  = PrmAccount
		
		SetCurrencyAccountFlag is an Instance Action
			valid when (ValidForTranslationAndRevalue)

			Local Fields	
				AsyncId							is a AsyncActionRequest

			Action Rules
				invoke UpdateBlankCurrencyAccount ReportingChartAccount in background
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.PrmReportingChart				= ReportingChart

				invoke UpdateCurrencyAccountFlag ReportingChart in background
					run after AsyncId
					invoked.PrmFinanceEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.PrmReportingChart				= ReportingChart

		UpdateCurrencyAccountFlag is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingChart			is a ReportingChart
					default label is "ReportingChart"
				
			Local Fields	
				LocalRecordsNotFound	is Boolean				

			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    ReportingChart         = PrmReportingChart)

			Action Rules
			
				Set Rules

				Instance Rules
					initialize LocalRecordsNotFound
					for each distinct UnrealizedGainAccount in UnrealizedGainAccountRel
						LocalGeneralLedgerChartAccount	= each.UnrealizedGainAccount
						if (ReportingChartAccountRel exists)
			                invoke UpdateIsGainLossAccount ReportingChartAccountRel
						else
							LocalRecordsNotFound	= true
							end for each
					if (LocalRecordsNotFound)	
						constraint (!LocalGeneralLedgerChartAccount entered)
							"RecordNotFoundInChart:_<LocalGeneralLedgerChartAccount>_<FinanceEnterpriseGroup.AccountLabel>"

					initialize LocalRecordsNotFound
					for each distinct UnrealizedLossAccount in UnrealizedLossAccountRel
						LocalGeneralLedgerChartAccount	= each.UnrealizedLossAccount
						if (ReportingChartAccountRel exists)
			                invoke UpdateIsGainLossAccount ReportingChartAccountRel
						else
							LocalRecordsNotFound	= true
							end for each
					if (LocalRecordsNotFound)	
						constraint (!LocalGeneralLedgerChartAccount entered)
							"RecordNotFoundInChart:_<LocalGeneralLedgerChartAccount>_<FinanceEnterpriseGroup.AccountLabel>"
					initialize LocalRecordsNotFound
					for each distinct TranslationGainAccount in TranslationGainAccountRel
						LocalGeneralLedgerChartAccount	= each.TranslationGainAccount
						if (ReportingChartAccountRel exists)
			                invoke UpdateIsGainLossAccount ReportingChartAccountRel
						else
							LocalRecordsNotFound	= true
							end for each
					if (LocalRecordsNotFound)	
						constraint (!LocalGeneralLedgerChartAccount entered)
							"RecordNotFoundInChart:_<LocalGeneralLedgerChartAccount>_<FinanceEnterpriseGroup.AccountLabel>"
					initialize LocalRecordsNotFound
					for each distinct TranslationLossAccount in TranslationLossAccountRel
						LocalGeneralLedgerChartAccount	= each.TranslationLossAccount
						if (ReportingChartAccountRel exists)
			                invoke UpdateIsGainLossAccount ReportingChartAccountRel
						else
							LocalRecordsNotFound	= true
							end for each
					if (LocalRecordsNotFound)	
						constraint (!LocalGeneralLedgerChartAccount entered)
							"RecordNotFoundInChart:_<LocalGeneralLedgerChartAccount>_<FinanceEnterpriseGroup.AccountLabel>"

		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord

		CleanupUnusedDimensions is an Instance Action
			restricted
			
			Action Rules
				InvokedByUnusedStructure = true
				invoke CleanupUnusedAccounts GeneralLedgerChartAccount in background
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmReportingChart		  = ReportingChart
					
		AddAccountToUnusedChart is an Instance Action
			restricted
			
			Parameters
				GeneralLedgerChartAccount
					default label is "GlobalLedgerChartAccount"
				
			Action Rules
				constraint (UnusedDimensionStructure)
					"ActionNotValidForChart<ReportingChart>"
					
				InvokedByUnusedStructure = true
				invoke AddPostingAccountToChart GeneralLedgerChartAccount
					invoked.PrmChart			  = ReportingChart
					invoked.PrmParentChartAccount = ChartAccountNode
					
		RemoveAccountFromUnusedChart is an Instance Action
			restricted
			
			Parameters
				GeneralLedgerChartAccount
					default label is "GlobalLedgerChartAccount"
				
			Action Rules
				constraint (UnusedDimensionStructure)
					"ActionNotValidForChart<ReportingChart>"
					
				InvokedByUnusedStructure = true
				invoke RemoveFromChart GeneralLedgerChartAccount
	
		ExportToUpload is an Instance Action
			completion message is "ExportInitiated"
						
			Parameters
				PrmGeneralLedgerChartAccountGroup   is a GeneralLedgerChartAccount group
					default label is "CustomGroup"
				PrmSummaryAccount 		            is a GeneralLedgerChartAccount
					default label is "Summary<FinanceEnterpriseGroup.AccountLabel>"					
				PrmPostingAccount					is a GeneralLedgerChartAccount
					default label is "Posting<FinanceEnterpriseGroup.AccountLabel>"
						
			Parameter Rules	
								
				PrmGeneralLedgerChartAccountGroup
					constraint ((!PrmSummaryAccount entered)
					and         (!PrmPostingAccount entered))
						"CannotBeUsedWithSummaryOrPosting<FinanceEnterpriseGroup.AccountLabel>"
										
				PrmSummaryAccount
					constraint ((!PrmGeneralLedgerChartAccountGroup entered)
					and         (!PrmPostingAccount entered))
						"CannotBeUsedWithCustomGroupOrPosting<FinanceEnterpriseGroup.AccountLabel>"					
				
				PrmPostingAccount
					constraint ((!PrmGeneralLedgerChartAccountGroup entered)
					and         (!PrmSummaryAccount entered))
						"CannotBeUsedWithCustomGroupOrSummary<FinanceEnterpriseGroup.AccountLabel>"					
									
			Action Rules
				constraint (!ReportingChartAccountUpload set exists)
					"RecordsAlreadyExistsInUpload"

				if ((!PrmGeneralLedgerChartAccountGroup entered)
				and (!PrmSummaryAccount entered)
				and (!PrmPostingAccount entered))
					invoke ExportToUpload ChartAccountNode in background
						invoked.PrmFinanceEnterpriseGroup         = FinanceEnterpriseGroup
						invoked.PrmReportingChart			      = ReportingChart			
				else
					if (PrmSummaryAccount entered)
						invoke ExportToUpload PrmSummaryAccount in background
							invoked.PrmFinanceEnterpriseGroup         = FinanceEnterpriseGroup
							invoked.PrmReportingChart			      = ReportingChart
					else
						if (PrmPostingAccount entered)
							invoke ExportToUpload PrmPostingAccount
								invoked.PrmFinanceEnterpriseGroup     = FinanceEnterpriseGroup
								invoked.PrmReportingChart			  = ReportingChart
						else
							invoke ExportToUpload ReportingChartAccount in background
								invoked.PrmFinanceEnterpriseGroup         = FinanceEnterpriseGroup
								invoked.PrmReportingChart			      = ReportingChart
								invoked.PrmGeneralLedgerChartAccountGroup = PrmGeneralLedgerChartAccountGroup
				
		DeleteUploadRecords is an Instance Action
			valid when (UploadRecordsExist)
			confirmation required
			completion message is "DeleteSubmitted"
			
			Action Rules
				invoke DeleteAll ReportingChartAccountUpload in background
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmReportingChart		  = ReportingChart

#ifdef module integration		
		SendAccountingChartNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				if(DerivedCleanDocumentID = "Y")
					send ion bod
						bod is AccountingChartCleanDocIDXMLBOD
						bod type is "Sync.AccountingChart"
						document id is DerivedDocumentID
						variation id is BODVariationID
				else
					send ion bod
						bod is AccountingChartXMLBOD
						bod type is "Sync.AccountingChart"
						document id is DerivedDocumentID
						variation id is BODVariationID			
										
		TriggerAccountingChartNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
				RestartFlag is Boolean
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "AccountingChart"
					invoked.PrmTriggerFrom				= "ReportingChart"
					invoked.PrmDirection				= 1
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmMainUserTemplate         = "IONSyncAccountingChart_ReportingChart_ST"
				NativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				LocalBODTrigger = true
				if(FinanceEnterpriseGroup.BODTrigger and NativeLPLBODTrigger)
					if(DerivedCleanDocumentID = "Y")
						if(RestartFlag)
							if(BODAccountingEntityRel exist)
								initialize LocalBodAccountingEntity
								initialize LocalCrossAccountingEntity
								initialize LocalCleanDocIDAccountingentity
								LocalBodAccountingEntity = FSMInboundBODTracker.Reference2
								if(LocalBodAccountingEntity entered)
									if(DerivedMultipleFEG = "Y")
										LocalCleanDocIDAccountingentity = FinanceEnterpriseGroup + DerivedDelimiter + LocalBodAccountingEntity
									else
										LocalCleanDocIDAccountingentity = LocalBodAccountingEntity
								if(DerivedTriggerBODBasedOnCrossReference = "Y")
									if(FSMBODAECrossReferenceDetailRel.DestinationValue entered)
										LocalCrossAccountingEntity = FSMBODAECrossReferenceDetailRel.DestinationValue	
								else
								if(DerivedTriggerBODBasedOnCrossReference = "N")
									LocalCrossAccountingEntity = LocalCleanDocIDAccountingentity

								if(LocalCrossAccountingEntity entered)	
									LocalFSMInboundBODTracker			= FSMInboundBODTracker
									invoke Update FSMInboundBODTrackerRel
										invoked.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
										invoked.BODDocumentID			= DerivedDocumentID
										invoked.BODVariationID			= BODVariationID
										invoked.Status					= 1
										invoked.StartDate				= system current timestamp
										invoked.Direction				= 1
										invoked.Reference1				= ReportingChart
										invoked.BODAccountingEntity		= LocalCrossAccountingEntity
										invoked.Reference2				= LocalBodAccountingEntity
										initialize invoked.Error			
										initialize invoked.ErrorMessage
									initialize LocalBODFormattedID
									LocalBODFormattedID = "infor-nid:" + DerivedTenantID + ":" + LocalCrossAccountingEntity + "::" + DerivedDocumentID + ":" + "?AccountingChart&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker
									AccountingChartCleanDocIDXMLBOD = template.IONSyncAccountingChart_ReportingChartCleanDocID_ST document for this instance
									invoke SendAccountingChartNativeLPL
										resume on error
					               			Error            							= true
					                    	ErrorMessage     							= error message	
					       			if(Error)
										invoke Update FSMInboundBODTrackerRel
											invoked.Error 								= Error
											invoked.ErrorMessage 						= ErrorMessage
											invoked.Status								= 2
											invoked.CloseDate							= system current timestamp
											invoked.BODID								= LocalBODFormattedID
											invoked.BODXML								= AccountingChartCleanDocIDXMLBOD
									else
										invoke Update FSMInboundBODTrackerRel
											invoked.Status									= 3
											invoked.CloseDate								= system current timestamp
											invoked.BODID									= LocalBODFormattedID
											invoked.BODXML									= AccountingChartCleanDocIDXMLBOD		
						else
						if(DerivedTriggerBODBasedOnCrossReference = "Y")
							if(FSMCleanBODCrossReferenceDetailRel exists)
								for each FSMCleanBODCrossReferenceDetailRel
									initialize AccountingChartCleanDocIDXMLBOD
									initialize LocalCrossAccountingEntity
									initialize LocalBODFormattedID
									initialize LocalSourceValue
									LocalSourceValue = each.SourceValue
									if (LocalSourceValue entered)
										for each LocalSourceValue split on "<DerivedDelimiter>"
											initialize LocalBodAccountingEntity
											LocalBodAccountingEntity = each
									if(BODCrossAccountingEntityRel exists)
										LocalCrossAccountingEntity = each.DestinationValue
										if(LocalCrossAccountingEntity entered)
											if(FSMInboundBODTracker not entered)
												invoke Create FSMInboundBODTracker
													assign result to NewBODTracker
													invoked.Verb 					= 1
													invoked.Noun 					= "AccountingChart"					
													invoked.BODDocumentID			= DerivedDocumentID
													invoked.BODVariationID			= BODVariationID
													invoked.Status					= 1
													invoked.StartDate				= system current timestamp
													invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
													invoked.Direction				= 1
													invoked.Reference1				= ReportingChart
													invoked.BODAccountingEntity		= LocalCrossAccountingEntity
													invoked.Reference2				= LocalBodAccountingEntity
													initialize invoked.Error			
													initialize invoked.ErrorMessage	
												LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
											LocalBODFormattedID = "infor-nid:" + DerivedTenantID + ":" + LocalCrossAccountingEntity + "::" + DerivedDocumentID + ":" + "?AccountingChart&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker
											AccountingChartCleanDocIDXMLBOD = template.IONSyncAccountingChart_ReportingChartCleanDocID_ST document for this instance
											invoke SendAccountingChartNativeLPL
												resume on error
						                   			Error            							= true
						                        	ErrorMessage     							= error message
						                	if(Error)
												invoke Update FSMInboundBODTrackerRel
													invoked.Error 								= Error
													invoked.ErrorMessage 						= ErrorMessage
													invoked.Status								= 2
													invoked.CloseDate							= system current timestamp
													invoked.BODID								= LocalBODFormattedID
													invoked.BODXML								= AccountingChartCleanDocIDXMLBOD
											else
												invoke Update FSMInboundBODTrackerRel
													invoked.Status									= 3
													invoked.CloseDate								= system current timestamp
													invoked.BODID									= LocalBODFormattedID
													invoked.BODXML									= AccountingChartCleanDocIDXMLBOD
						else
						if(DerivedTriggerBODBasedOnCrossReference = "N")
							if (BODAccountingEntityRel exist)
								for each BODAccountingEntityRel
									initialize LocalCrossAccountingEntity
									initialize LocalBodAccountingEntity
									initialize AccountingChartCleanDocIDXMLBOD
									initialize LocalBODFormattedID
									LocalBodAccountingEntity = each.AccountingEntity
									if(DerivedMultipleFEG = "Y")
										LocalCrossAccountingEntity = FinanceEnterpriseGroup + DerivedDelimiter + LocalBodAccountingEntity
									else
										LocalCrossAccountingEntity = LocalBodAccountingEntity	
									if(LocalCrossAccountingEntity entered)
										if(FSMInboundBODTracker not entered)
											invoke Create FSMInboundBODTracker
												assign result to NewBODTracker
												invoked.Verb 					= 1
												invoked.Noun 					= "AccountingChart"					
												invoked.BODDocumentID			= DerivedDocumentID
												invoked.BODVariationID			= BODVariationID
												invoked.Status					= 1
												invoked.StartDate				= system current timestamp
												invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
												invoked.Direction				= 1
												invoked.Reference1				= ReportingChart
												invoked.BODAccountingEntity		= LocalCrossAccountingEntity
												invoked.Reference2				= LocalBodAccountingEntity
												initialize invoked.Error			
												initialize invoked.ErrorMessage	
											LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
										LocalBODFormattedID = "infor-nid:" + DerivedTenantID + ":" + LocalCrossAccountingEntity + "::" + DerivedDocumentID + ":" + "?AccountingChart&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker
										AccountingChartCleanDocIDXMLBOD = template.IONSyncAccountingChart_ReportingChartCleanDocID_ST document for this instance
										invoke SendAccountingChartNativeLPL
											resume on error
					                   			Error            							= true
					                        	ErrorMessage     							= error message
					                	if(Error)
											invoke Update FSMInboundBODTrackerRel
												invoked.Error 								= Error
												invoked.ErrorMessage 						= ErrorMessage
												invoked.Status								= 2
												invoked.CloseDate							= system current timestamp
												invoked.BODID								= LocalBODFormattedID
												invoked.BODXML								= AccountingChartCleanDocIDXMLBOD
										else
											invoke Update FSMInboundBODTrackerRel
												invoked.Status									= 3
												invoked.CloseDate								= system current timestamp
												invoked.BODID									= LocalBODFormattedID
												invoked.BODXML									= AccountingChartCleanDocIDXMLBOD
					else
					if(FSMInboundBODTracker not entered)							
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "AccountingChart"
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Direction				= 1
							invoked.Reference1				= ReportingChart
							initialize invoked.Error			
							initialize invoked.ErrorMessage
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.Reference1				= ReportingChart
							initialize invoked.Error			
							initialize invoked.ErrorMessage
					invoke SendAccountingChartNativeLPL
						resume on error
	                   		Error            							= true
	                        ErrorMessage     							= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedBODID
							invoked.BODXML								= AccountingChartXMLBOD
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status								= 3
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedBODID
							invoked.BODXML								= AccountingChartXMLBOD
#endif					
				
		BODDataInitialLoadReportingChartCriteria1 is a Set Action
			restricted
			Parameters
				PrmFEG					is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmFromReportingChart			is a ReportingChart
				PrmToReportingChart				is a ReportingChart
			Parameter Rules				
			Instance Selection
				where  (((PrmFEG entered
				and		  PrmFEG = FinanceEnterpriseGroup)
				or		  PrmFEG not entered)				
				and    ((PrmFromReportingChart entered
				and		 PrmFromReportingChart <= ReportingChart)
				or		 PrmFromReportingChart not entered)				
				and    ((PrmToReportingChart entered
				and		 PrmToReportingChart >= ReportingChart)
				or		 PrmToReportingChart not entered)
				and    (Active = true))
			Sort Order	
				FinanceEnterpriseGroup
				
			Local Fields
				
			Action Rules								
				Empty Set Rules	
				
				Set Rules
					Entrance Rules	
				
					Exit Rules
				
				Instance Rules	
					if (FinanceEnterpriseGroup.BODTrigger)
						LocalActionCode	= LocalActionCode.Create		
						increment bod id.VariationID
						include TriggerAccountingChartRules



							
