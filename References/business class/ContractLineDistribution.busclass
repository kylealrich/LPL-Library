ContractLineDistribution is a BusinessClass
    owned by po
    prefix is CLDI

    Ontology
    	symbolic key is ContractLineDistribution

    Patterns
		implements ContextualParent
		implements StaticJava
		        
    Persistent Fields
		DistributionAccount         	is a RQHeaderDefaultCodeBlock
    	Percent							is Percent size 6.3				
    	ReportCurrencyAmount        	is a FinanceCurrencyAmount
    	GltObjId						is a ObjId
    	AtnObjId						is a ObjId
		ContractDistributionAggregation is like ContractDistributionAggregation

	Local Fields
		LocalAmountUpdateDate           is Date
		LocalPostingDate                is a PostingDate
		LocalNewCommit                  is Boolean
		LocalPurgeCommitment            is Boolean
		LocalUpdateCommitment           is Boolean 
		LocalInternalChange             is Boolean
		LocalUsedAmount                 is an InternationalAmount
		LocalFromCancelOrDelete         is Boolean
		LocalAccountChanged             is Boolean
		LocalEndDate                    is a GeneralLedgerCalendarPeriod
		LocalLedger                     is a Ledger
		LocalFromUpdateAmount           is Boolean
		LocalCurrencyExchange			is a CurrencyExchange
		ConvertedAmount					is an InternationalAmount
		OutAmount                       is an InternationalAmount
		LocalFromCompany                is like Company
		LocalFromInvoice                is like PayablesInvoice
		LocalFromDistribution           is like PayablesInvoiceDistribution
		LocalFromCopy                   is Boolean	
		LocalDistributionAmount         is an InternationalAmount
		LocalFromPORelease              is Boolean
		SkipAddOtherCommitments         is Boolean
		LocalFromUpdateForCommitments   is Boolean
		LocalFromRecalculate            is Boolean
		LocalGeneralLedgerSystemCode 	is a GeneralLedgerSystemCode
		BypassProjectDateEdit			is Boolean
		BypassActiveCodeBlockEdit       is Boolean 
		LocalBoolean                    is Boolean 
		LocalMatrixDimensionAccount		is a MatrixApprovalLevelDimension		
		LocalFinanceCodeBlock           is a FinanceCodeBlock 

	Transient Fields
		TransientAccountingEntity           is an AccountingEntity 
		TransientDistributionAccount		is a TransactionCodeBlock
			derive value from DistributionAccount
		TransientCurrencyTable              is a CurrencyTable
			derive value from ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CurrencyTable
		TransientExchangeDate               is an ExchangeDate
			derive value from current corporate date
		TransientFromCurrency               is a FromCurrency
			derive value from Contract.CurrencyCode
		TransientCurrencyAmount             is a CurrencyAmount
			derive value from ChangeOrderAmountRemaining
		TransientEnterpriseGroup            is an EnterpriseGroup
		SavedFinanceEnterpriseGroup			is like FinanceEnterpriseGroup
		LocalForceCalculation               is Boolean
		UnitsAmount
			derive value from DerivedUnitsAmount
		TransientSkipActionExitRules		is Boolean 
	
	Context Fields
		PayablesCompany
		PayablesInvoice
		PayablesInvoiceDetail
			
	Rule Blocks
		
		ManageCommitments
			
			if  (TrackCommitments     
			and  Contract.NotContractTemplate
			and (CanCreateCommitments
			or   CanUpdateActivatedCommitment)   
			and (LineCommitments
			or   UseSpreadCommitments))  
				
				if (LocalNewCommit
				and Contract.CreateCommitments.Line
				and !ContractLine.CommitmentsClosed
				and !Contract.CommitmentsClosed)
					invoke CreateCommitment GLCommit
						invoked.FinanceEnterpriseGroup  = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
						invoked.OriginatingTransaction  = reference to this instance
						invoked.System			 		= "PO"
						invoked.FinanceCodeBlock	 	= DistributionAccount
						invoked.CurrencyCode		 	= Contract.CurrencyCode
						invoked.TransactionAmount       = ChangeOrderAmountRemaining
						invoked.ReportCurrencyAmount	= ReportCurrencyAmount
						invoked.TransactionDate		    = ContractLine.EffectiveDate
						invoked.IsContractManagement    = true
						invoked.AccountingEntity        = Contract.CommitmentCompany
						invoked.HeaderUniqueID          = Contract.UniqueID
						invoked.TransBusinessObjectRef	= reference to Contract
					
					if (CreateOtherCommitments
					and !SkipAddOtherCommitments)
						for each OtherDistributionsNoCommitmentRel
						 	invoke AddOtherCommitments each
							
				if  (LocalUpdateCommitment)
				
					if (Contract.CreateCommitments.Line)
						if (ReleasedCommitmentExists
						or  HistoryCommitmentExists)
							if ((LocalInternalChange
							and !Contract.CommitmentsClosed)
							or  (HistoryCommitmentExists
							and  LocalFromUpdateAmount = false)
							or  (LocalFromRecalculate))
								invoke ChangeReleasedCommitment GLCommitRel
									if (LocalAccountChanged)
               							invoked.PrmCodeBlock                        = DistributionAccount
               							invoked.PrmDimensionCode					= DistributionAccount.DimensionCode		
								
									invoked.PrmChangedCurrAmount.FunctionalAmount 	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
									invoked.PrmChangedCurrAmount.ProjectAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
									invoked.PrmChangedCurrAmount.ReportAmount1      = ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
									invoked.PrmChangedCurrAmount.ReportAmount2      = ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
							 		invoked.PrmChangedCurrAmount.ReportAmount3      = ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
									invoked.PrmChangedCurrAmount.ReportAmount4      = ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
									invoked.PrmChangedCurrAmount.ReportAmount5      = ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
									invoked.PrmChangedCurrAmount.AlternateAmount    = ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
									invoked.PrmChangedCurrAmount.AlternateAmount2   = ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
									invoked.PrmChangedCurrAmount.AlternateAmount3   = ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
									invoked.PrmLastTransAmount                  	= ChangeOrderAmountRemaining
									invoked.PrmTransDate                            = ContractLine.EffectiveDate
									invoked.PrmChangedCurrAmount.ToFunctionalAmount = ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
									invoked.PrmChangedCurrAmount.ToAlternateAmount  = ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
									invoked.PrmChangedCurrAmount.ToAlternateAmount2 = ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
									invoked.PrmChangedCurrAmount.ToAlternateAmount3 = ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
									if (LocalFromCancelOrDelete = true
									and HistoryCommitmentExists)
										invoked.ParmIsCancelOrDelete = true  
							
								if (CreateOtherCommitments
								and !SkipAddOtherCommitments)
									for each OtherDistributionsNoCommitmentRel
						 				invoke AddOtherCommitments each
						 				
								if (ReleasedCommitmentExists
								and LocalFromUpdateForCommitments)  
									invoke UpdateToReleased GLCommit
										invoked.PrmFinanceEnterpriseGroup           = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
										invoked.PrmUniqueID                         = UniqueID
										invoked.PrmAccountingEntity                 = Contract.CommitmentCompany	
										invoked.PrmFromPurchaseOrderInvoiceCancel   = true					 				
							
							else
								invoke ModifyReleasedCommitment GLCommitRel in background
									run outside of action background group
									invoked.PrmTransactionAmount    	= ChangeOrderAmountRemaining
									invoked.PrmReportCurrencyAmount     = ReportCurrencyAmount
									invoked.PrmFromContractUpdate		= true
									invoked.PrmTransactionDate          = ContractLine.EffectiveDate
									invoked.PrmAccountingEntity         = Contract.CommitmentCompany
									invoked.PrmFinanceCodeBlock         = DistributionAccount
									invoked.PrmCurrencyCode             = Contract.CurrencyCode
						else
							invoke MaintainUnreleasedCommitment GLCommitRel
								invoked.TransactionAmount    	= ChangeOrderAmountRemaining
								invoked.ReportCurrencyAmount     = ReportCurrencyAmount
								invoked.TransactionDate          = ContractLine.EffectiveDate
								invoked.AccountingEntity         = Contract.CommitmentCompany
								invoked.FinanceCodeBlock         = DistributionAccount
								invoked.CurrencyCode             = Contract.CurrencyCode
								
							if (CreateOtherCommitments
							and !SkipAddOtherCommitments)
								for each OtherDistributionsNoCommitmentRel
						 			invoke AddOtherCommitments each
						 	 
					if (UseSpreadCommitments)
						for each CurrentContractLineDistSpreadRel
							if (LocalAmountUpdateDate >= each.SpreadDate)
								invoke UpdateUsedAmount each
									invoked.InUsedAmount 		= LocalUsedAmount
									if (LocalFromCancelOrDelete = true)
										invoked.FromCancelOrDelete = true
									invoked.FromPORelease       = LocalFromPORelease
								end for each
				
				else			
				if (UseSpreadCommitments)  
					for each CurrentContractLineDistSpreadRel
						invoke Update each
							invoked.TransientAccountChanged  = LocalAccountChanged
			
			if (LocalPurgeCommitment)
				if (GLCommitRel.Status.Released)
					invoke UpdateTemplateTotals BudgetTemplate 
						invoked.PrmFinanceEnterpriseGroup			= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
						invoked.PrmTransactionCodeBlock				= DistributionAccount
						invoked.PrmDate					    		= GLCommitRel.EntityYearPeriod.Date
						invoked.PrmReportAmounts.FunctionalAmount   = GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1	     		
						invoked.PrmReportAmounts.AlternateAmount    = GLCommitRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1   			
						invoked.PrmReportAmounts.AlternateAmount2   = GLCommitRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1			
						invoked.PrmReportAmounts.AlternateAmount3	= GLCommitRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1			
						invoked.PrmReportAmounts.ToFunctionalAmount = GLCommitRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1      		
						invoked.PrmReportAmounts.ToAlternateAmount  = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1     		
						invoked.PrmReportAmounts.ToAlternateAmount2 = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1      		
						invoked.PrmReportAmounts.ToAlternateAmount3	= GLCommitRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1			
						invoked.PrmReportAmounts.ProjectAmount		= GLCommitRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1			
						invoked.PrmReportAmounts.ReportAmount1      = GLCommitRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1				
						invoked.PrmReportAmounts.ReportAmount2      = GLCommitRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1				
						invoked.PrmReportAmounts.ReportAmount3		= GLCommitRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1			
						invoked.PrmReportAmounts.ReportAmount4		= GLCommitRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1			
						invoked.PrmReportAmounts.ReportAmount5		= GLCommitRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
						invoked.PrmBusinessClassName                = "Contract"
						invoked.PrmEditContext                      = "Delete"
				invoke Purge GLCommitRel
				if (UseSpreadCommitments)
					for each CurrentContractLineDistSpreadRel
						invoke Delete each
				
		EditFullAccount	
			
			if (Contract.ServicePurchaseType     
			or  (ContractLine.UseCommitments
			and  Contract.UseLineCommitments))
				constraint (DistributionAccount.ToAccountingEntity entered)
					"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.AccountingEntityLabel>ForDistributionOnLine<ContractLine>"
				constraint (DistributionAccount.GeneralLedgerChartAccount entered)
					"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.AccountLabel>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
					constraint (DistributionAccount.AccountingUnit entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.AccountingUnitLabel>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ProjectRequired
				or  DistributionAccount.GeneralLedgerChartAccount.RequireProject
				or (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ValidationDimensionRequiresProject
				and ContractGroup.BusinessGroup.FinanceEnterpriseGroup.StructureValidationDimension.Dimension3
				and DistributionAccount.FinanceDimension3 entered)
				or (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ValidationDimensionRequiresProject
				and ContractGroup.BusinessGroup.FinanceEnterpriseGroup.StructureValidationDimension.Dimension4
				and DistributionAccount.FinanceDimension4 entered))
					constraint (DistributionAccount.Project entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ProjectLabel>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
					constraint (DistributionAccount.FinanceDimension1 entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension1Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
					constraint (DistributionAccount.FinanceDimension2 entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension2Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
					constraint (DistributionAccount.FinanceDimension3 entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension3Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
					constraint (DistributionAccount.FinanceDimension4 entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension4Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
					constraint (DistributionAccount.FinanceDimension5 entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension5Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
					constraint (DistributionAccount.FinanceDimension6 entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension6Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
					constraint (DistributionAccount.FinanceDimension7 entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension7Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
					constraint (DistributionAccount.FinanceDimension8 entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension8Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
					constraint (DistributionAccount.FinanceDimension9 entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension9Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
					constraint (DistributionAccount.FinanceDimension10 entered)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension10Label>ForDistributionOnLine<ContractLine>"
			
			if (Contract.StandingPurchaseType)
				constraint (DistributionAccount.ToAccountingEntity entered
				or          AllParticipantsHaveAccountingEntity)
					"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.AccountingEntityLabel>ForDistributionOnLine<ContractLine>"
				constraint (DistributionAccount.GeneralLedgerChartAccount entered)
					"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.AccountLabel>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
					constraint (DistributionAccount.AccountingUnit entered
					or 			AllParticipantsHaveAccountingUnit)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.AccountingUnitLabel>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ProjectRequired
				or  DistributionAccount.GeneralLedgerChartAccount.RequireProject
				or (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ValidationDimensionRequiresProject
				and ContractGroup.BusinessGroup.FinanceEnterpriseGroup.StructureValidationDimension.Dimension3
				and DistributionAccount.FinanceDimension3 entered)
				or (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ValidationDimensionRequiresProject
				and ContractGroup.BusinessGroup.FinanceEnterpriseGroup.StructureValidationDimension.Dimension4
				and DistributionAccount.FinanceDimension4 entered))
					constraint (DistributionAccount.Project entered
					or 			AllParticipantsHaveProject)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ProjectLabel>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension1Required)
					constraint (DistributionAccount.FinanceDimension1 entered
					or 			AllParticipantsHaveFinanceDimension1)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension1Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension2Required)
					constraint (DistributionAccount.FinanceDimension2 entered
					or 			AllParticipantsHaveFinanceDimension2)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension2Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension3Required)
					constraint (DistributionAccount.FinanceDimension3 entered
					or 			AllParticipantsHaveFinanceDimension3)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension3Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension4Required)
					constraint (DistributionAccount.FinanceDimension4 entered
					or 			AllParticipantsHaveFinanceDimension4)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension4Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension5Required)
					constraint (DistributionAccount.FinanceDimension5 entered
					or 			AllParticipantsHaveFinanceDimension5)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension5Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension6Required)
					constraint (DistributionAccount.FinanceDimension6 entered
					or 			AllParticipantsHaveFinanceDimension6)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension6Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension7Required)
					constraint (DistributionAccount.FinanceDimension7 entered
					or 			AllParticipantsHaveFinanceDimension7)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension7Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension8Required)
					constraint (DistributionAccount.FinanceDimension8 entered
					or 			AllParticipantsHaveFinanceDimension8)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension8Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension9Required)
					constraint (DistributionAccount.FinanceDimension9 entered
					or 			AllParticipantsHaveFinanceDimension9)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension9Label>ForDistributionOnLine<ContractLine>"
				if (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension10Required)
					constraint (DistributionAccount.FinanceDimension10 entered
					or 			AllParticipantsHaveFinanceDimension10)
						"MustEnter<ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension9Label>ForDistributionOnLine<ContractLine>"
			 
	Derived Fields
		DistributionAmount is a DerivedField
			type is like InternationalAmount
			LocalDistributionAmount =  (ContractLine.LifetimeMaximumAmount * Percent)
			return LocalDistributionAmount

		StandingDistributionAmount is a DerivedField 
			type is like InternationalAmount
			LocalDistributionAmount = ((ContractLine.BaseCost * ContractLine.Quantity * Contract.MaximumReleaseNumber) * Percent)
			return LocalDistributionAmount

		TotalUsedAmount is a DerivedField
			type is like InternationalAmount
			return (sum CurrentContractLineDistSpreadRel.UsedAmount)
		
		TotalAmountInUse is a DerivedField
			type is like InternationalAmount
			return (ContractLine.MaximumLineAmountInUseForCommitmentUpdate * Percent)
		
		RemainingToBeSpread is a DerivedField	
			type is like InternationalAmount
			restricted 		
			if (Contract.CreateCommitments.LineSpread)
				return ((DistributionAmount) - (sum ContractLineDistSpreadRel.SpreadAmount))
			else
				return 0

		DerivedEntityCalendarPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			return first GeneralLedgerCalendarPeriodRel.GeneralLedgerCalendarPeriod
		
		DerivedUnitsAmount is a DerivedField
			type is like UnitsAmount
			restricted
			if (DistributionAccount.GeneralLedgerChartAccount.AllowUnits.Required)
				return 1
			else
				return 0
		
		DerivedSpread is a DerivedField
			type is Alpha size 20
			if (AvailableToSpread)
				return "Commitment Spreads"
			else
				return blank
		
		ParticipantCount is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ContractParticipantRel)
		
		DerivedCommittedAllowanceTotal                  is a DerivedField
			type is like UnsignedInternationalAmount 
			default label is "CommittedAllowanceTotal"
			return (sum CommittedAllowancesRel.DerivedExtendedAmount * Percent)	

		AmountRemaining is a DerivedField
			type is like InternationalAmount
			restricted
			if (Contract.CommitmentsClosed = true)
				return 0
			else
			if (ContractLine.CommitmentsClosed = true)
				return 0
			else
			if ((DistributionAmount - (ContractLine.MaximumLineAmountInUse * Percent)) >= 0) 
				return (DistributionAmount - (ContractLine.MaximumLineAmountInUse * Percent))
			else
				return 0

		ChangeOrderAmountRemaining is a DerivedField
			type is like InternationalAmount
			restricted
			if (Contract.CommitmentsClosed = true)
				return 0
			else
			if (ContractLine.CommitmentsClosed = true)
				return 0
			else
			if (Contract.HasBeenActivated
			and Contract.AllowChangeOrder
			and (DerivedCommittedAllowanceTotal + DistributionAmount - (ContractLine.MaximumLineAmountInUseForCommitmentUpdate * Percent)) >= 0) 
				return (DerivedCommittedAllowanceTotal + DistributionAmount - (ContractLine.MaximumLineAmountInUseForCommitmentUpdate * Percent))
			else 
			if ((DistributionAmount - (ContractLine.MaximumLineAmountInUseForCommitmentUpdate * Percent)) >= 0) 
				return (DistributionAmount - (ContractLine.MaximumLineAmountInUseForCommitmentUpdate * Percent))			
			else
				return 0

    Conditions

   		AvailableToSpread
   			restricted
   			when (ContractLineDistribution != 0
			and   ContractLine.LineCommitments
			and  (ContractLine.CanUseForCostDefaulting
			or    ContractLine.CanUseForInvoicePayment)
			and  !ContractLine.LineErrorsExist
			and   Contract.CreateCommitments.LineSpread
			and   Contract.NotContractTemplate)
			
   		AvailableToCreateSpread
   			restricted
			when (!ContractLineDistributionSpread set exists
			and   AvailableToSpread)
			
   		AvailableToUpdateSpread
   			restricted
   			when (ContractLineDistributionSpread set exists
			and   AvailableToSpread)
			
		CanDisplaySpread
			restricted
			when (Contract.UseLineSpreadCommitments
			and   Contract.NotContractTemplate)

   		HasSpread
   			restricted
   			when (CurrentContractLineDistSpreadRel exists)
   		
   		AvailableToCreateOrDelete
   			restricted
			when (ContractLine.CanAddLineAndNotUsingHeaderCommitments
			and   !ContractLine.ContractLineState.Closed
			and   !Contract.InMatrixApprovalProcess
			and   !ContractLine.OnHold
			and   !Contract.BudgetEditInProgress)

   		AvailableToUpdate
   			restricted
			when (ContractLine.CanAddLine
			and  !Contract.InMatrixApprovalProcess
			and  !ContractLine.OnHold
			and  !ContractLine.ContractLineState.Closed
			and  !Contract.BudgetEditInProgress)

		NotFullySpread
			restricted
			when (ContractLineDistSpreadRel exists
			and  !ContractLine.LineClosed
			and  (ContractLine.CanUseForCostDefaulting
			or    ContractLine.CanUseForInvoicePayment)
			and  (RemainingToBeSpread > .01
			or    RemainingToBeSpread < (0 - .01)))

		ExcessSpread
			restricted
			when (ContractLineDistSpreadRel exists
			and  !ContractLine.LineClosed
			and  (ContractLine.CanUseForCostDefaulting
			or    ContractLine.CanUseForInvoicePayment)
			and   RemainingToBeSpread < (0 - .01))

		NoSpreadForEffectiveDate
			restricted
			when (ContractLineDistSpreadRel exists
			and  (ContractLine.CanUseForCostDefaulting
			or    ContractLine.CanUseForInvoicePayment)
			and   ContractLine.UseCommitments
			and  !ContractLine.LineClosed 
			and   ContractLine.EffectiveDate != all ContractLineDistSpreadRel.SpreadDate)
			
		MissingSpread
			restricted
			when (LineSpreadCommitments
			and  (ContractLine.CanUseForCostDefaulting
			or    ContractLine.CanUseForInvoicePayment)
			and   ContractLine.UseCommitments
			and  !ContractLine.LineClosed
			and  !DistSpreadExists)
		
		IncompleteGLInformation
			restricted
			when (DistributionAccount.ToAccountingEntity = blank
			or 	  DistributionAccount.AccountingUnit = blank
			or 	  DistributionAccount.GeneralLedgerChartAccount = blank)		
		
		ComplateDistributionEntered
			restricted
			when (DistributionAccount.ToAccountingEntity entered
			and	  DistributionAccount.GeneralLedgerChartAccount entered
			and ((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.AccountingUnitRequired
			and   DistributionAccount.AccountingUnit entered)
			or    !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.AccountingUnitRequired)
			and (((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ProjectRequired
			or    DistributionAccount.GeneralLedgerChartAccount.RequireProject
			or   (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ValidationDimensionRequiresProject
			and   ContractGroup.BusinessGroup.FinanceEnterpriseGroup.StructureValidationDimension.Dimension3
			and   DistributionAccount.FinanceDimension3 entered)
			or   (ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ValidationDimensionRequiresProject
			and   ContractGroup.BusinessGroup.FinanceEnterpriseGroup.StructureValidationDimension.Dimension4
			and   DistributionAccount.FinanceDimension4 entered))
			and   DistributionAccount.Project entered)
			or   (!ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ProjectRequired
			and   !DistributionAccount.GeneralLedgerChartAccount.RequireProject
			and   !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ValidationDimensionRequiresProject))
			and ((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension1Required
			and   DistributionAccount.FinanceDimension1 entered)
			or    !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension1Required)			
			and ((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension2Required
			and   DistributionAccount.FinanceDimension2 entered)
			or    !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension2Required)	
			and ((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension3Required
			and   DistributionAccount.FinanceDimension3 entered)
			or    !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension3Required)	
			and ((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension4Required
			and   DistributionAccount.FinanceDimension4 entered)
			or    !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension4Required)	
			and ((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension5Required
			and   DistributionAccount.FinanceDimension5 entered)
			or    !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension5Required)	
			and ((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension6Required
			and   DistributionAccount.FinanceDimension6 entered)
			or    !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension6Required)			
			and ((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension7Required
			and   DistributionAccount.FinanceDimension7 entered)
			or    !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension7Required)	
			and ((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension8Required
			and   DistributionAccount.FinanceDimension8 entered)
			or    !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension8Required)	
			and ((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension9Required
			and   DistributionAccount.FinanceDimension9 entered)
			or    !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension9Required)	
			and ((ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension10Required
			and   DistributionAccount.FinanceDimension10 entered)
			or    !ContractGroup.BusinessGroup.FinanceEnterpriseGroup.FinanceDimension10Required))
						
		DistributionCodeExists
			restricted
			when (ContractLine.PayablesDistributionCode entered)
			
		DistributionCreated
			restricted
			when (ContractLineDistribution exists)
			
		DistAmountEntered
			restricted
			when (DistributionAmount > 0)
					   
		ContractInterfacedLineStillDraft
			restricted
			when (Contract.HasBeenActivated
			and   ContractLine.ContractLineState.Draft)
							   
		ProjectEntered
			restricted
			when (DistributionAccount.Project entered)
			
		DistSpreadExists
			restricted
			when (ContractLineDistSpreadRel exists)
		
		HeaderCommitments
			restricted
			when (Contract.UseHeaderCommitments)
			
		LineCommitments
			restricted
			when (ContractLine.UseCommitments
			and   Contract.UseOnlyLineCommitments)
			
		LineSpreadCommitments
			restricted
			when (Contract.CreateCommitments.LineSpread)
		
		UseSpreadCommitments
			restricted
			when (ContractLine.UseCommitments
			and   Contract.UseLineSpreadCommitments)
		
		CanCreateCommitments
			restricted
			when ((ContractLine.CanUseForCostDefaulting
			or     ContractLine.CanUseForInvoicePayment)
			and   !ContractLine.LineErrorsExist
			and    ContractLine.LineNotClosed
			and   !ContractLine.CommitmentsClosed)
		
		CanUpdateActivatedCommitment
			restricted
			when ((ContractLine.CanUseForCostDefaulting
			or     ContractLine.CanUseForInvoicePayment)
			and    ContractLine.HasBeenActivated)
		
		CommitmentsExist
			restricted
			when (GLCommitRel exists)
		
		ReleasedCommitmentExists
			restricted
			when (CommitmentsExist
			and   GLCommitRel.Status = 3)
		
		HistoryCommitmentExists
			restricted
			when (CommitmentsExist
			and   GLCommitRel.Status = 1)
		
		OpenCommitmentExists 
			restricted 
			when (CommitmentsExist
			and  (GLCommitRel.Status = 0
			or    GLCommitRel.Status = 3))
		
		ContractLineHasErrors
			restricted
			when (ContractLine.LineErrorsExist)
		
		TrackCommitments
			restricted
			when (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
	        or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
	        
	    CreateOtherCommitments
	    	when (OtherDistributionsNoCommitmentRel exists)
	    	
	    NoDistSpreadForEffectiveDate
	    	restricted
	    	when (!ContractLine.LineClosed
	    	and   DistSpreadExists
	    	and   ContractDistSpreadForEffectiveDateRel !exists)

		AllParticipantsHaveAccountingUnit
			restricted
			when (ContractParticipantNoAccountingUnitRel !exists)
			
		AllParticipantsHaveAccountingEntity
			restricted
			when (ContractParticipantNoAccountingEntityRel !exists)
			
		AllParticipantsHaveProject
			restricted
			when (ContractParticipantNoProjectRel !exists)
		
		AllParticipantsHaveFinanceDimension1
			restricted
			when (ContractParticipantNoFinanceDimension1Rel !exists)
			
		AllParticipantsHaveFinanceDimension2
			restricted
			when (ContractParticipantNoFinanceDimension2Rel !exists)
		AllParticipantsHaveFinanceDimension3
			restricted
			when (ContractParticipantNoFinanceDimension3Rel !exists)
		AllParticipantsHaveFinanceDimension4
			restricted
			when (ContractParticipantNoFinanceDimension4Rel !exists)
		AllParticipantsHaveFinanceDimension5
			restricted
			when (ContractParticipantNoFinanceDimension5Rel !exists)
		AllParticipantsHaveFinanceDimension6
			restricted
			when (ContractParticipantNoFinanceDimension6Rel !exists)
		AllParticipantsHaveFinanceDimension7
			restricted
			when (ContractParticipantNoFinanceDimension7Rel !exists)
		AllParticipantsHaveFinanceDimension8
			restricted
			when (ContractParticipantNoFinanceDimension8Rel !exists)
		AllParticipantsHaveFinanceDimension9
			restricted
			when (ContractParticipantNoFinanceDimension9Rel !exists)
		AllParticipantsHaveFinanceDimension10
			restricted
			when (ContractParticipantNoFinanceDimension10Rel !exists)
			 
    Relations
		PoCompanyRel
			one-to-many relation to PurchasingCompany
			Field Mapping uses Set2
				related.ProcurementGroup = ContractGroup

		ContractDistributionAggregationRel 
			one-to-many relation to ContractDistributionAggregation
			Field Mapping uses BySummaryAccount
				related.ContractGroup	= ContractGroup 
				related.Contract        = Contract 
				related.SummaryAccount  = LocalMatrixDimensionAccount
		
		ContractParticipantNoAccountingUnitRel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.AccountingUnitNotEntered)       			
		
		ContractParticipantNoAccountingEntityRel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.AccountingEntityNotEntered)     
				
		PayablesInvoiceDistributionRel
			one-to-one relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company       				= LocalFromCompany
				related.PayablesInvoice				= LocalFromInvoice
				related.PayablesInvoiceDistribution	= LocalFromDistribution

		ContractParticipantNoProjectRel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.ProjectNotEntered)     
		
		ContractParticipantNoFinanceDimension1Rel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.FinanceDimension1NotEntered)     

		ContractParticipantNoFinanceDimension2Rel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.FinanceDimension2NotEntered)    
				
		ContractParticipantNoFinanceDimension3Rel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.FinanceDimension3NotEntered)    
				
		ContractParticipantNoFinanceDimension4Rel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.FinanceDimension4NotEntered) 
				
		ContractParticipantNoFinanceDimension5Rel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.FinanceDimension5NotEntered)    
				
		ContractParticipantNoFinanceDimension6Rel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.FinanceDimension6NotEntered) 
				
		ContractParticipantNoFinanceDimension7Rel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.FinanceDimension7NotEntered) 
				
		ContractParticipantNoFinanceDimension8Rel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.FinanceDimension8NotEntered)    
				
		ContractParticipantNoFinanceDimension9Rel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.FinanceDimension9NotEntered)    
				
		ContractParticipantNoFinanceDimension10Rel
       		one-to-many relation to ContractParticipant
       		Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
			Instance Selection
				where (related.FinanceDimension10NotEntered)             		
		
		ContractParticipantRel is a ContractParticipant set

		ContractLineDistSpreadRel is a ContractLineDistributionSpread set
		
		CommittedAllowancesRel
			one-to-many relation to ContractAllowance
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.Contract            = Contract
				related.ContractLine        = ContractLine
			Instance Selection
				where (related.Committed)		

		CurrentContractLineDistSpreadRel 
			one-to-many relation to ContractLineDistributionSpread
			Field Mapping uses BySpreadDate
				related.ContractGroup              = ContractGroup
				related.Contract                   = Contract
				related.ContractLine               = ContractLine
				related.ContractLineDistribution   = ContractLineDistribution
		
		ContractDistSpreadForEffectiveDateRel
			one-to-many relation to ContractLineDistributionSpread 
			Field Mapping uses BySpreadDate 
				related.ContractGroup = ContractGroup
				related.Contract      = Contract
				related.ContractLine  = ContractLine 
				related.ContractLineDistribution = ContractLineDistribution
				related.SpreadDate    = ContractLine.EffectiveDate
		
		OtherDistributionsNoCommitmentRel  
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup              = ContractGroup
				related.Contract                   = Contract
				related.ContractLine               = ContractLine
			Instance Selection
				where (related.UniqueID         != UniqueID
				and    !related.CommitmentsExist)
		
		OtherDistributionsForLineRel 
			one-to-many relation to ContractLineDistribution
			Field Mapping uses symbolic key
				related.ContractGroup              = ContractGroup
				related.Contract                   = Contract
				related.ContractLine               = ContractLine
			Instance Selection
				where (related.UniqueID         != UniqueID)		
		GLCommitRel
			one-to-one relation to GLCommit
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction  = reference to this instance
				
		GeneralLedgerSystemCodeRel 
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode	= "PO"	
				
		GeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
			Instance Selection
				where (related.Date 			not < ContractLine.EffectiveDate
				and	   related.PeriodType.EndDate)
		
		EntityLedgerPeriodRel
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				related.AccountingEntity			= DistributionAccount.ToAccountingEntity 
				related.Ledger						= LocalLedger
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	not < LocalEndDate)
				
		GLCommitxRel
			one-to-one relation to GLCommitx
			Field Mapping uses symbolic key
				related.GLCommitx				= GltObjId        

		ACCommitxRel
			one-to-one relation to LegacyAccommitx
			Field Mapping uses symbolic key
				related.LegacyAccommitx			= AtnObjId        
				

		PurgeContractLineDistributionSpreadRel is a ContractLineDistributionSpread set
			Instance Selection
				include deleted records

    Field Rules
    	ContractLineDistribution
			autosequence
				minimize contention
		
		DistributionAccount                       	
			if (ParticipantCount = 1)
				default to first ContractParticipantRel.AccountingUnit
					default individual fields

			LocalGeneralLedgerSystemCode = "PO"
			if (DistributionAccount.GeneralLedgerChartAccount entered
			and	DistributionAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered) 
				constraint (LocalGeneralLedgerSystemCode within DistributionAccount.GeneralLedgerChartAccount.Account.SystemRestriction) 
					"InvalidSystemForAccount"					

		Percent
			constraint (Percent <= 100%)
				"PercentMustBeLessThanOrEqualTo100%"
			constraint (Percent > 0)
				"PercentMustBeGreaterThanZero"
 					
 		ReportCurrencyAmount
			
			if (DistributionAccount.Project entered)
				TransientExchangeDate = ContractLine.EffectiveDate
				LocalPostingDate  = ContractLine.EffectiveDate
			
		TransientAccountingEntity
			if (!HeaderCommitments)
				TransientAccountingEntity = DistributionAccount.ToAccountingEntity 
			else
			if (HeaderCommitments)
				TransientAccountingEntity = Contract.CommitmentCompany 

		TransientDistributionAccount
			if (LineCommitments
			or  Contract.ServicePurchaseType
			or  ComplateDistributionEntered)
				TransientDistributionAccount = DistributionAccount
			else
				initialize TransientDistributionAccount

	Sets
		ByChanged
			Sort Order
				ContractGroup
				Contract
				ContractLine
				ContractLineDistribution
	
	Actions
		Create is a Create Action
			valid when (AvailableToCreateOrDelete)
			
			Entrance Rules


				if (!HeaderCommitments)
					TransientAccountingEntity = DistributionAccount.ToAccountingEntity 
				else
				if (HeaderCommitments)
					TransientAccountingEntity = Contract.CommitmentCompany	
						 
			Action Rules

				LocalGeneralLedgerSystemCode = "PO"
				invoke UpdateReportCurrencyAmountInstance
				
				if (Contract.CreateCommitments.LineSpread)
					constraint (ContractLine.ContractLineSpreadWithUsedAmountRel !exists)
						"CannotAddADistributionToAContractLineThatHasALineSpreadWithAUsedAmount"
				
				if (Contract.CreateCommitments.Line
				and ContractLine.UseCommitments)
					LocalLedger  = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CoreLedger
					LocalEndDate = DerivedEntityCalendarPeriod
					constraint (DerivedEntityCalendarPeriod entered
					and         EntityLedgerPeriodRel exists)
						"ContractUsesLineCommitments;CalendarYearNotProperlyDefinedForTheCommitmentDate_(LineEffectiveDate)"	
				
				if (DistributionAccount.Project entered)
					if (ContractLine.EffectiveDate entered)
						TransientExchangeDate = ContractLine.EffectiveDate
						LocalPostingDate  = ContractLine.EffectiveDate
					else 
						BypassProjectDateEdit = true
				
				if (Percent not entered)
					default Percent to ContractLine.RemainingPercentToBeDistributed

				constraint (Percent entered) 
					"DistributionPercentIsRequired"

				constraint (Percent > 0% and Percent <= 100%)
					"DistributionPercentMustBeGreaterThan0AndCannotExceed100Percent"
					
				if  (ContractLine.ContractLineState.Active
				and (Contract.SetActiveLineToAmendment
				or   OtherDistributionsForLineRel exists
				or   Percent != 100%))
					invoke TransitionToAmendment Active ContractLine

				if (DistributionAccount.GeneralLedgerChartAccount entered)
					constraint (DistributionAccount.GeneralLedgerChartAccount.Active)
						"AccountIsInactive"

				if (!ContractLine.FromImport)
					include EditFullAccount
		
			Exit Rules
			
            	LocalNewCommit = true
            	include ManageCommitments

          		if (ContractLine.DistributionLineEditsRel exists
           		or  DistributionAccount.Project entered)
           			invoke CheckForErrorsFromDistributions ContractLine

		CreateForHeaderCommitments is a Create Action   
			restricted
			
			
			Entrance Rules
				TransientEnterpriseGroup = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
				if (ContractLine.ContractLineState.Active
				and Contract.SetActiveLineToAmendment)
					invoke TransitionToAmendment Active ContractLine
				
				if (!HeaderCommitments)
					TransientAccountingEntity = DistributionAccount.ToAccountingEntity 
				else
				if (HeaderCommitments)
					TransientAccountingEntity = Contract.CommitmentCompany	

			Action Rules
				
				LocalGeneralLedgerSystemCode = "PO"
				invoke UpdateReportCurrencyAmountInstance
				
				if (DistributionAccount.Project entered)
					TransientExchangeDate = ContractLine.EffectiveDate
					LocalPostingDate  = ContractLine.EffectiveDate

		CreateFromCopyOrTemplate is a Create Action	
			restricted
			

			Entrance Rules
				TransientEnterpriseGroup = ContractGroup.BusinessGroup.FinanceEnterpriseGroup

			Action Rules 
				LocalGeneralLedgerSystemCode = "PO"

			Exit Rules
				
				invoke UpdateReportCurrencyAmountInstance
				
				LocalNewCommit = true
            	include ManageCommitments
		
		AddOtherCommitments is an Instance Action
			restricted
			
			Action Rules
				
				LocalGeneralLedgerSystemCode = "PO"
				invoke UpdateReportCurrencyAmountInstance
				LocalNewCommit = true
            	include ManageCommitments
		
		CreateFromDistCodeOrDefaultAccount is a Create Action
			restricted
			
			Entrance Rules
				if (ContractLine.ContractLineState.Active
				and Contract.SetActiveLineToAmendment)
					invoke TransitionToAmendment Active ContractLine
					
				if (!HeaderCommitments)
					TransientAccountingEntity = DistributionAccount.ToAccountingEntity 
				else
				if (HeaderCommitments)
					TransientAccountingEntity = Contract.CommitmentCompany	

			Action Rules
				LocalGeneralLedgerSystemCode = "PO"
				invoke UpdateReportCurrencyAmountInstance

				LocalNewCommit = true

			Exit Rules
            	if (ContractLine.DistributionLineEditsRel exists
            	or  DistributionAccount.Project entered)
           			invoke CheckForErrorsFromDistributions ContractLine
            	
            	include ManageCommitments
            	LocalNewCommit = false
            	
            	if (Contract.CreateCommitments.Line
				and ContractLine.UseCommitments)
					LocalLedger  = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CoreLedger
					LocalEndDate = DerivedEntityCalendarPeriod
					constraint (DerivedEntityCalendarPeriod entered
					and         EntityLedgerPeriodRel exists)
						"ContractUsesLineCommitments;CalendarYearNotProperlyDefinedForTheCommitmentDate_(LineEffectiveDate)"	

		CreateCommitmentFromRebuild is an Instance Action
			restricted
			Action Rules
				if (ContractLine.HasBeenActivated = false)
					invoke Purge GLCommitRel
						
						invoked.PrmPurgeRecalculate = true
					LocalNewCommit = true
					include ManageCommitments
				else
				if (GLCommitRel.LastCurrAmountDiff > 0)
					
					invoke ClearLastCurrencyAmount GLCommitRel
					LocalFromRecalculate = true
					include ManageCommitments

		UpdateHeaderCommitmentAccount is a Set Action
			restricted
			
			Parameters
				ParmContractGroup   	is a ContractGroup
				ParmContract        	is a Contract
				ParmDistributionAccount is a FinanceCodeBlock
				
			Instance Selection
				where (ContractGroup = ParmContractGroup
				and    Contract      = ParmContract)
				
			Action Rules
				Instance Rules
					LocalGeneralLedgerSystemCode = "PO"
					DistributionAccount = ParmDistributionAccount
		
		CreateCommitmentFromLine is an Instance Action
			restricted
			Parameters
				ParmSkipAddOtherCommitments is Boolean
			
			Action Rules
				LocalGeneralLedgerSystemCode = "PO"
				if (DistributionAccount.Project entered)
					TransientExchangeDate = ContractLine.EffectiveDate
					LocalPostingDate  = ContractLine.EffectiveDate
				invoke UpdateReportCurrencyAmountInstance
				LocalNewCommit = true
				SkipAddOtherCommitments = ParmSkipAddOtherCommitments
				
			Exit Rules	
				include ManageCommitments
				LocalNewCommit = false
		
		Update is an Update Action
			valid when (AvailableToUpdate)
			      
			Entrance Rules
				if  (ContractLine.ContractLineState.Active
				and (Contract.SetActiveLineToAmendment
				or   Percent changed))
					invoke TransitionToAmendment Active ContractLine

			Action Rules

				LocalGeneralLedgerSystemCode = "PO"
				invoke UpdateReportCurrencyAmountInstance
				
				if (DistributionAccount.Project entered)
					TransientExchangeDate = ContractLine.EffectiveDate
					LocalPostingDate  = ContractLine.EffectiveDate
				
				if (Contract.CreateCommitments.Line
				and ContractLine.UseCommitments)
					LocalLedger  = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CoreLedger
					LocalEndDate = DerivedEntityCalendarPeriod
					constraint (DerivedEntityCalendarPeriod entered
					and         EntityLedgerPeriodRel exists)
						"ContractUsesLineCommitments;CalendarYearNotProperlyDefinedForTheCommitmentDate_(LineEffectiveDate)"	
				
				if (Percent not entered)
					default Percent to ContractLine.RemainingPercentToBeDistributed
				else
				if (Percent changed)
					constraint (!Contract.UseHeaderCommitments)
						"CannotChangeDistributionPercentWhenDoingHeaderCommitments"
	
				constraint (Percent entered) 
					"DistributionPercentIsRequired"

				constraint (Percent > 0% and Percent <= 100%)
					"DistributionPercentMustBeGreaterThan0AndCannotExceed100Percent"

				if (DistributionAccount changed) 
					constraint (!Contract.CreateCommitments.Header)
						"CannotChangeAccountInformationWhenDoingHeaderCommitments"

					if (Contract.CreateCommitments.Line
					or  Contract.CreateCommitments.LineSpread)
						if (ContractLine.HasBeenActivated)
							constraint (ChangeOrderAmountRemaining > 0)	
								"CannotChangeAccountWhenRemainingCommitmentAmountIsZero"				

					include EditFullAccount
					
					LocalAccountChanged = true
					
			Exit Rules			
				
				if (Contract.CreateCommitments.Line
				or  Contract.CreateCommitments.LineSpread
				or  DistributionAccount.Project entered
				or  ContractLine.DistributionLineEditsRel exists)
           			invoke CheckForErrorsFromDistributions ContractLine
           			
           			if (ContractLine.ErrorsExist
           			and !ContractLine.HasBeenActivated
           			and (CommitmentsExist
           			or   DistSpreadExists))
           				LocalPurgeCommitment = true
					
					if (CommitmentsExist)
						LocalUpdateCommitment = true
					if (!CommitmentsExist
					and CanCreateCommitments)
						LocalNewCommit = true
					LocalInternalChange = true	
					if (Contract.CreateCommitments.Line
					or  Contract.CreateCommitments.LineSpread)
						include ManageCommitments
							
		Delete is a Delete Action
			valid when (AvailableToCreateOrDelete)
		
			Entrance Rules

				if (ContractLine.ContractLineState.Active
				and	OtherDistributionsForLineRel exists)
					invoke TransitionToAmendment Active ContractLine

				LocalPurgeCommitment    = true
				include ManageCommitments
				
				invoke DeleteFromLineOrDist ContractLineDistSpreadRel 
				
       			invoke CheckForErrorsFromDistributions ContractLine
			
		DeleteCommitment is a Delete Action  
			restricted
			
			Action Rules
				LocalPurgeCommitment    = true
				include ManageCommitments
		
		DeleteCommitmentOnly is an Instance Action  
			restricted
		
			Action Rules
				LocalPurgeCommitment    = true
				include ManageCommitments
				
				invoke UpdateReportCurrencyAmountInstance
		
		EditSpreads is an Instance Action
			restricted
			
			Parameters
				InUsedAmount      is an InternationalAmount
				InTransactionDate is Date
				
			Action Rules
				
				LocalAmountUpdateDate = InTransactionDate
				if (CurrentContractLineDistSpreadRel exists)
					for each CurrentContractLineDistSpreadRel
						if (LocalAmountUpdateDate >= each.SpreadDate)
							invoke EditUpdateUsedAmount each
								invoked.InUsedAmount 		= InUsedAmount *Percent
							end for each		
			
					
		
		UpdateForCommitments is an Instance Action            
			restricted
			Parameters 
				FromDateChange	is Boolean 
			
			Action Rules
				if (DistributionAccount.Project entered)
					TransientExchangeDate = ContractLine.EffectiveDate
					LocalPostingDate  = ContractLine.EffectiveDate
				if (!HeaderCommitments)
					TransientAccountingEntity = DistributionAccount.ToAccountingEntity 
				else
				if (HeaderCommitments)
					TransientAccountingEntity = Contract.CommitmentCompany 
				invoke UpdateReportCurrencyAmountInstance
			
			Exit Rules
				
				LocalUpdateCommitment 			= true
				LocalInternalChange   			= true
				LocalAmountUpdateDate 			= current date
				if (FromDateChange)
					LocalFromUpdateForCommitments = true 	
				include ManageCommitments
				
		UpdateOrCreateSpreadFromChangeOrder is an Instance Action  
			restricted
			Parameters
				ChangeAmount is an UnsignedInternationalAmount
				
			Action Rules

				if (HasSpread)

					for each CurrentContractLineDistSpreadRel
						if (current date >= each.SpreadDate)

							invoke UpdateFast each
								if (ChangeAmount != 0)
									invoked.SpreadAmount 		+= (ChangeAmount * Percent) 
								else
									invoked.SpreadAmount         = (ContractLine.LifetimeMaximumAmount * Percent)
							end for each
				
				else

					invoke Create ContractLineDistributionSpread
						invoked.ContractGroup 			 = ContractGroup
						invoked.Contract      			 = Contract
						invoked.ContractLine  			 = ContractLine
						invoked.ContractLineDistribution = ContractLineDistribution
						if (ChangeAmount > 0)
							invoked.SpreadAmount         = (ChangeAmount * Percent)
						else
							invoked.SpreadAmount         = (ContractLine.LifetimeMaximumAmount * Percent)
						invoked.SpreadDate               = current date	

		UpdateCommitmentsFromUpdateAmount is an Instance Action
			restricted
			
			Parameters
				InUsedAmount       is an InternationalAmount
				InTransactionDate  is Date
				FromCancelOrDelete is Boolean
				FromPORelease      is Boolean
			
			Action Rules
				if (DistributionAccount.Project entered)
					TransientExchangeDate = ContractLine.EffectiveDate
					LocalPostingDate  = ContractLine.EffectiveDate
				if (!HeaderCommitments)
					TransientAccountingEntity = DistributionAccount.ToAccountingEntity 
				else
				if (HeaderCommitments)
					TransientAccountingEntity = Contract.CommitmentCompany 
				invoke UpdateReportCurrencyAmountInstance
				
			Exit Rules
				
				LocalUsedAmount         = InUsedAmount * Percent
				LocalAmountUpdateDate   = InTransactionDate
				LocalUpdateCommitment   = true
				LocalFromCancelOrDelete = FromCancelOrDelete
				LocalFromUpdateAmount   = true
				LocalFromPORelease      = FromPORelease
				include ManageCommitments
		
		FinishUpdateCommitments is an Instance Action
			restricted
			Parameters 
				ParmFromUnmatch  is Boolean 
			Action Rules

				if (CommitmentsExist)
					invoke UpdateReportCurrencyAmountInstance
					LocalUpdateCommitment = true			
					if (ParmFromUnmatch)
						LocalFromCancelOrDelete	= true
					include ManageCommitments

					if (UseSpreadCommitments)
                        if (invoking action = "MatchWork.FinishMatch")
                            for each CurrentContractLineDistSpreadRel
                                invoke FinishUpdateUsedAmount each					

		UpdateReportCurrencyAmount is an Update Action 
			restricted
			
		UpdateReportCurrencyAmountInstance is an Instance Action
			restricted
			Action Rules
				initialize ReportCurrencyAmount

				TransientCurrencyTable         						= ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CurrencyTable
				TransientAccountingEntity      						= Contract.CommitmentCompany
				TransientExchangeDate          						= current corporate date
				TransientFromCurrency          						= Contract.CurrencyCode
				TransientCurrencyAmount                         	= ChangeOrderAmountRemaining
				ReportCurrencyAmount.ReportAmount1.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyOne
				ReportCurrencyAmount.ReportAmount2.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyTwo
				ReportCurrencyAmount.ReportAmount3.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyThree
				ReportCurrencyAmount.ReportAmount4.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyFour
				ReportCurrencyAmount.ReportAmount5.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyFive
				ReportCurrencyAmount.UseDerivedCalculations         = true
				LocalForceCalculation 	       						= ReportCurrencyAmount.DerivedCalculationsComplete
		RecalculateReportCurrencyAmount is an Instance Action   
			restricted
			Action Rules
				initialize ReportCurrencyAmount
				
				TransientCurrencyTable         						= ContractGroup.BusinessGroup.FinanceEnterpriseGroup.CurrencyTable
				TransientAccountingEntity      						= Contract.CommitmentCompany
				TransientExchangeDate          						= current corporate date
				TransientFromCurrency          						= Contract.CurrencyCode
				TransientCurrencyAmount                         	= DistributionAmount
				ReportCurrencyAmount.ReportAmount1.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyOne
				ReportCurrencyAmount.ReportAmount2.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyTwo
				ReportCurrencyAmount.ReportAmount3.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyThree
				ReportCurrencyAmount.ReportAmount4.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyFour
				ReportCurrencyAmount.ReportAmount5.ToCurrency       = ContractGroup.BusinessGroup.FinanceEnterpriseGroup.ReportCurrencyFive
				ReportCurrencyAmount.UseDerivedCalculations         = true
				LocalForceCalculation 	       						= ReportCurrencyAmount.DerivedCalculationsComplete

				LocalUpdateCommitment = true
				include ManageCommitments

		CloseCommitments is an Instance Action
			restricted
				
			Action Rules
				invoke UpdateReportCurrencyAmountInstance
			
			Exit Rules	
				if (Contract.CreateCommitments.Line)
					if (GLCommitRel.Status.Released)
						invoke UpdateTemplateTotals BudgetTemplate 
							invoked.PrmFinanceEnterpriseGroup			= ContractGroup.BusinessGroup.FinanceEnterpriseGroup
							invoked.PrmTransactionCodeBlock				= DistributionAccount
							invoked.PrmDate					    		= GLCommitRel.EntityYearPeriod.Date
							invoked.PrmReportAmounts.FunctionalAmount   = GLCommitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1	     		
							invoked.PrmReportAmounts.AlternateAmount    = GLCommitRel.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1   			
							invoked.PrmReportAmounts.AlternateAmount2   = GLCommitRel.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1			
							invoked.PrmReportAmounts.AlternateAmount3	= GLCommitRel.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1			
							invoked.PrmReportAmounts.ToFunctionalAmount = GLCommitRel.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1      		
							invoked.PrmReportAmounts.ToAlternateAmount  = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1     		
							invoked.PrmReportAmounts.ToAlternateAmount2 = GLCommitRel.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1      		
							invoked.PrmReportAmounts.ToAlternateAmount3	= GLCommitRel.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1			
							invoked.PrmReportAmounts.ProjectAmount		= GLCommitRel.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1			
							invoked.PrmReportAmounts.ReportAmount1      = GLCommitRel.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1				
							invoked.PrmReportAmounts.ReportAmount2      = GLCommitRel.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1				
							invoked.PrmReportAmounts.ReportAmount3		= GLCommitRel.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1			
							invoked.PrmReportAmounts.ReportAmount4		= GLCommitRel.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1			
							invoked.PrmReportAmounts.ReportAmount5		= GLCommitRel.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
							invoked.PrmBusinessClassName                = "Contract"
							invoked.PrmEditContext                      = "Close"
					if (GLCommitRel.Status.Released)
						if (GLCommitRel.LastCurrAmountDiff ! entered)
							invoke UpdateReleasedCommitment GLCommitRel
								invoked.TransactionAmount        = ChangeOrderAmountRemaining
								invoked.ReportCurrencyAmount     = ReportCurrencyAmount
								invoked.TransactionDate          = ContractLine.EffectiveDate
								invoked.AccountingEntity         = Contract.CommitmentCompany
								invoked.FinanceCodeBlock         = DistributionAccount
								invoked.CurrencyCode             = Contract.CurrencyCode
								invoked.TransientDistribCanceled = true
						else
							invoke FreeUpAllocatedBudgetAmounts GLCommitRel
					else
					if (GLCommitRel.Status.Unreleased)
						invoke Purge GLCommitRel	
				else
				if (Contract.CreateCommitments.LineSpread)
					for each ContractLineDistSpreadRel
						invoke CloseSpreadCommitments each
						
		EditFullAccounts is an Instance Action
			restricted
			Action Rules
			
				include EditFullAccount
				TransientSkipActionExitRules = true
		
		FastUpdate is an Update Action
			restricted
			bypass field rules
			
			Entrance Rules
				if (ContractLine.ContractLineState.Active
				and Contract.SetActiveLineToAmendment)
					invoke TransitionToAmendment Active ContractLine

		UpdateCommitmentFromAllowance is an Instance Action
			restricted
			Action Rules
			
				LocalUpdateCommitment = true
				if (ContractLine.HasBeenActivated)
					LocalInternalChange = true
				if (Contract.CreateCommitments.Line)
					invoke UpdateReportCurrencyAmountInstance
					include ManageCommitments
				if (Contract.CreateCommitments.LineSpread)
					for each ContractDistSpreadForEffectiveDateRel
						invoke UpdateCommitmentFromAllowance each
						end for each 

		CalculateDistributionSummary is an Instance Action 
			restricted 
			Local Fields 
				DistributionAggregationView is a ContractDistributionAggregation view 	

			
			Action Rules 
				BypassActiveCodeBlockEdit = true
				LocalFinanceCodeBlock = DistributionAccount 
                LocalBoolean = LocalMatrixDimensionAccount.SetMatrixDimensions				
				if (ContractDistributionAggregationRel exists)
					invoke CalculateAggregationUpdate first ContractDistributionAggregationRel 						
						if (Contract.ServicePurchaseType)
							invoked.InputAmount   = DistributionAmount
						else 
						if (Contract.StandingPurchaseType)
							invoked.InputAmount   = StandingDistributionAmount
					ContractDistributionAggregation = first ContractDistributionAggregationRel.ContractDistributionAggregation 
				else 
					invoke Create ContractDistributionAggregation 
						assign result to DistributionAggregationView
						invoked.ContractGroup 		= ContractGroup  
						invoked.Contract            = Contract 
						invoked.SummaryAccount      = LocalMatrixDimensionAccount 
						if (Contract.ServicePurchaseType)
							invoked.SummaryAmount   = DistributionAmount
						else 
						if (Contract.StandingPurchaseType)
							invoked.SummaryAmount   = StandingDistributionAmount
					ContractDistributionAggregation = DistributionAggregationView.ContractDistributionAggregation 

				TransientSkipActionExitRules = true

		MigrateContractCommitments is a Set Action
			restricted
			completion message is "<CompletionMessage>"
			run in background	 

			Parameters
				PrmContractGroup		is a ContractGroup
				PrmContract				is a Contract

			Parameter Rules
				PrmContractGroup
					constraint (!PrmContract entered)
						"CannotSelectContractWhenContractGroupIsEntered"
						
				PrmContract
					constraint (!PrmContractGroup entered)
						"CannotSelectContractGroupWhenContractIsEntered"
																	
			Local Fields
				RecordCount					is Numeric 10
				LocalTranAmount				is a CurrencyAmount
				CompletionMessage			is Alpha 150
				LocalGLCommitView			is a GLCommit view
				LocalMigrationResultView	is a MigrationResult view
				LocalErrorMessage 			is Alpha 150
				LocalErrorOccurred			is Boolean
				LocalMigrationJobType		is a MigrationJobType

			Instance Selection
				where ((ContractGroup = PrmContractGroup
				and     PrmContractGroup entered
				and		!PrmContract entered)
				or	   (Contract = PrmContract
				and	    PrmContract entered
				and     !PrmContractGroup entered)
				or	   (!PrmContractGroup entered
				and     !PrmContract entered)
				and	   (!GLCommitRel exists))

			Sort Order
				GltObjId
				
			Action Rules								
				Empty Set Rules
					CompletionMessage = "ContractCommitmentMigration;NoRecordsFoundToProcess"
				
					LocalMigrationJobType = MigrationJobType.MigrateContractCommitments
					include Migration.CreateMigrationResult
						replace POCompany with blank
						replace RQCompany with blank
						replace ContractGroup with PrmContractGroup
						replace Contract with PrmContract
						replace CashManagementGroup with blank
						replace PayablesCompany with blank
					invoke SetAsCompleted LocalMigrationResultView.MigrationResult

				Set Rules
					Entrance Rules
						LocalMigrationJobType = MigrationJobType.MigrateContractCommitments
						include Migration.CreateMigrationResult
							replace POCompany with blank
							replace RQCompany with blank
							replace ContractGroup with PrmContractGroup
							replace Contract with PrmContract
							replace CashManagementGroup with blank
							replace PayablesCompany with blank

					Exit Rules
						CompletionMessage = "MigrationOfContractCommitmentsComplete;RecordsProcessed<RecordCount>"

						invoke SetAsCompleted LocalMigrationResultView.MigrationResult

				Instance Rules
					LocalErrorOccurred			= false

					if ((CanCreateCommitments
					or   CanUpdateActivatedCommitment)
					and (LineCommitments
					or   UseSpreadCommitments))
						initialize LocalTranAmount
						if (GLCommitxRel exists
						and GLCommitxRel.TransactionAmount > 0)
							LocalTranAmount			= GLCommitxRel.TransactionAmount
						else
							if (!GltObjId entered
							and ACCommitxRel exists
							and ACCommitxRel.TransactionAmount > 0)
								LocalTranAmount		= ACCommitxRel.TransactionAmount
						if (LocalTranAmount entered)
							invoke UpdateReportCurrencyAmount
							invoke CreateCommitment GLCommit
								assign result to LocalGLCommitView
								resume on error
									LocalErrorMessage 					= error message
									LocalErrorOccurred					= true
								invoked.FinanceEnterpriseGroup  = ContractGroup.BusinessGroup.FinanceEnterpriseGroup
								invoked.OriginatingTransaction  = reference to this instance
								invoked.System			 		= "PO"
								invoked.FinanceCodeBlock	 	= DistributionAccount
								invoked.CurrencyCode		 	= Contract.CurrencyCode
								invoked.TransactionAmount	 	= LocalTranAmount		
								invoked.ReportCurrencyAmount	= ReportCurrencyAmount
								invoked.TransactionDate		    = ContractLine.EffectiveDate
								invoked.IsContractManagement    = true
								invoked.AccountingEntity        = Contract.CommitmentCompany
								invoked.HeaderUniqueID          = Contract.UniqueID
								invoked.TransBusinessObjectRef	= reference to Contract
								invoked.TransientMigrateAsReleased	= true
									
							include Migration.CreateMigrationResultDetail

							RecordCount += 1

		Purge is a Purge Action
			restricted
			Entrance Rules
				invoke Purge PurgeContractLineDistributionSpreadRel
				
	Action Exit Rules  
		if (Contract.ContractUsesMatrixApprovals
		and !TransientSkipActionExitRules)
			if (Contract.ContractStatus.Active)
				invoke CreateAmendment Active Contract
			else
			if (Contract.ContractStatus.ReadyToActivate)
				if (Contract.CanDisapprove)
					invoke Disapprove ReadyToActivate Contract
				else 
				if (Contract.CanDisapproveAddendum)
					invoke DisapproveAddendum ReadyToActivate Contract 
				else 
				if (Contract.CanDisapproveAmendment)
					invoke DisapproveAmendment ReadyToActivate Contract 
