CashLedgerTransaction is a BusinessClass
    owned by cb
    prefix is CBT
    classic name is CBTRANS

    Ontology
        symbolic key is CashLedgerTransaction
            classic set name is CBTSET1
            classic name is TRANS-IDENT
            classic name for BankTransactionCode is BANK-INST-CODE

    Patterns
		implements InlineUserFields
			size is 1000	       
        implements StaticJava
        implements BODId
        disable AuditIndex

    Persistent Fields
		TransactionIdentifierSequenceNumber
        CashLedgerTransactionIdentifier							
		CommentText
        CashCode
        CashManagementAccount
		Type                                    is a CashLedgerTranRecordType  
            classic name is REC-TYPE
        TransactionNumber
            classic name is TRANS-NBR
        TransactionNumberSuffix                 is a Suffix
            classic name is SUFFIX
        BankTransactionType                     is a BankInstType
            classic name is BANK-INST-TYPE
        SourceCode                              is a GeneralLedgerSystemCode 
        Company                                 is a CompanyIsolated  
        Currency
            classic name is CURRENCY-CODE

        IssueDate                               is an ExchangeDate
		CurrencyTable							
        CompanyCustomer                         is a Customer
            classic name is CUSTOMER
            context of ReceivablesCompanyProcessLevel.CustomerGroup
        Employee
        CashLedgerProcessLevel                  is a CashProcessLevel	
            classic name is PROC-LEVEL
        IssuedBankAmount                        is a CurrencyAmount 
            classic name is ISSUE-BNK-AMT
            	precision is CashCode.BankAccountNumber.Currency.NumberOfDecimals   
		IssuedBaseAmount 						is a FinanceCurrencyAmount 
            classic name is ISSUE-BASE-AMT


		ReconciliationData						is a FinanceCurrencyAmountGroup  
       		classic name for ReconciliationData.ExchangeDate is RECON-DATE
        	classic name for ReconciliationData.CurrencyAmount is RECON-BNK-AMT  
        	classic name for ReconciliationData.FunctionalAmount.EnteredCurrencyAmount is RECON-BASE-AMT 
		ReconciledDetailAmount 					is an InternationalAmount
		TotalDetailAmount 						is an InternationalAmount









        BankTransactionSign                     is AlphaUpper size 2
            classic name is BNK-TRANS-SIGN
            States
                BankCredit value is "CR"
                BankDebit  value is "DR"
        IssueTranAmt                            is an InternationalAmount
			precision is TransactionCurrencyNumberOfDecimals        
        BankAccountCurrencyExchangeRate         is a CurrencyRate
            sql name is BAccountCurrencyExchangeRate
            classic name is BNK-CNV-RATE
        TransactionCurrencyNumberOfDecimals     is an AcctNd
            sql name is TCurrencyNumberOfDecimals
            classic name is TRAN-ND
        BaseCurrencyNumberOfDecimals            is a BaseNumberOfDecimals
            classic name is BASE-ND
        BankAccountCurrencyNumberOfDecimals     is an AcctNd
            sql name is BACurrencyNumberOfDecimals
            classic name is BANK-ND
        Description
        Reference
        PeriodDate                              is Date
        LastDistributionSequence                is a SequenceNumber
            classic name is LAST-DIST-SEQ
        	disable Auditing
		Status									is Numeric size 1
			classic name is REC-STATUS
			States
				Unreleased					value is 0
				Open						value is 1
				Reconciled					value is 2
				Voided						value is 3
				StopPayment					value is 4
					default label is "StopPayment"
				StaleDated					value is 5
				 	default label is "StaleDated"
				Escheated					value is 6
				PendingApproval				value is 7
				PendingStopPayConfirmation	value is 8		
				WriteOff					value is 9		
        ReinstateStatus                         is Boolean
            classic name is REINSTATE-FL
        BankReconciliationStatus                is Boolean
            classic name is PRINT-STATUS
        AppliedDistributionBankAmount           is an InternationalAmount
            classic name is DIST-APPLIED
        AppliedDistributionBaseAmount           is a DocumentCurrencyTotals  
            classic name is BASE-APPLIED
        GeneralLedgerPostDate                   is a PostingDate
            classic name is DIST-DATE
            default label is "GlobalLedgerPostDate"
        LastElectronicPaymentSerialNumber       is a SerialNum
            sql name is LElectronicPaymentSerialNumber
            classic name is SERIAL-NUM
        SummaryOption                           is AlphaUpper size 1
            States
                NoSummary  value is blank
                Summarized value is "Y"













        PayGroup								is like PayGroup
        JournalBook
        	context of Company.OrigCompany  
            classic name is JRNL-BOOK-NBR
            restricted
        CashLedgerStatement						is like CashLedgerStatement
            classic name is RECON-STMT-NBR
        StatementStatus                         is Numeric size 1
            classic name is STMT-STATUS
            States
                Open   value is 1
                Closed value is 9
        JournalBookSequenceNumber               is a JbkSeqNbr
            classic name is JBK-SEQ-NBR
            restricted
        Source                                  is AlphaUpper size 1
            States
                InputAp  value is "I"
                    default label is "InputAP"
                OutputAr value is "O"
                    default label is "OutputAR"
        TaxInterface                            is AlphaUpper size 1
            classic name is TAX-FLAG
            States
                NotInterfaced value is "~"
                    default label is "NotInterfaced"
                Interface     value is "I"
        LastMaintenanceDate                     is TimeStamp
            classic name is MAINT-DATE
		TransactionData1                    is a TransactionData
            classic name is USER-FIELD1
		TransactionData2                    is a TransactionData
            classic name is USER-FIELD2
		TransactionData3                    is a TransactionData
            classic name is USER-FIELD3
		TransactionData4                    is a TransactionData
            classic name is USER-FIELD4
        StaleDate                               is Date
        ReconciliationStatementNumber
            classic name is CSR-STMT-NBR
        ReconciliationStatementSuffix           is a SuffixCode
            classic name is CSR-STMT-SUFF
        ReconciliationStatementLineNumber       is a LineNumber
            sql name is RStatementLineNumber
            classic name is CSR-LINE-NBR
        ReconciliationStatementDescription      is a Description
            sql name is RStatementDescription
            classic name is CSR-RECON-DESC
        ReconciliationStatementTransactionNumber is like TransactionNumber
            sql name is RStatementTransactionNumber
            classic name is CSR-TRANS-NBR
        CreatedUser                             is an Operator 
        	holds pii
            classic name is CREATED-BY
        LastUpdateDate                          is TimeStamp
            classic name is LAST-UPDT-DATE
        LastUpdateUser                          is an Operator 
        	holds pii
            classic name is LAST-UPDATE-BY
        StaleDateAccount                        is a FinanceCodeBlock
            classic name for StaleDateAccount.AccountingUnit is STL-ACCT-UNIT
            classic name for StaleDateAccount.GeneralLedgerChartAccount is STL-ACCOUNT
		CompanyCashCode
			context of Company.OrigCompany  
		PayablesCompanyVendorProcLevel	
		ReceivablesCompanyProcessLevel
		CashCodeTransactionCode
		ApprovalCode
		ApprovalLevel						is Numeric 8
		ReassignToApprovalLevel				is an ApprovalCodeResource
		Approver							is a FinanceResource
		ApproverTeam						is a FinanceTeamField
        ApprovalRequestType                 is Numeric 2
            States
                Release			value is 0
                StopPayment		value is 1
                Void	        value is 2
		OriginalSubmittingResource			is like Actor 
		CreatedFromBankStatement			is a BankStatement
			delete ignored
		CreatedFromBankStatementLine		is a BankStatementLine
			delete ignored
		CreatedFromBankStatementLineDetail		is a BankStatementLineDetail
			delete ignored
		BudgetEditProcessing 				is Numeric size 1
			States
                NotInProcessing value is 0
                InProcess  		value is 1
                Failure    		value is 2
                Success    		value is 3
		OriginatingImportRun				is a CashTransactionImportResult
			delete ignored
		ImportInProcess						is Boolean
		ImportStatus						is Numeric size 1
			States
				Open			value is 1
				Reconcile		value is 2
				Void			value is 3
				StaleDated		value is 5  
		ImportErrorMessage					is Alpha 150
		DistribUserFieldsSearch				is Text	
 			sql name is DISTRIBUSERFIELDSSEARCH
 			text searchable
 			disable Auditing
		StaleDateProcessingStatus			is Numeric size 1
			States
				NotProcessed	value is 0
				Selected		value is 1
				InError			value is 2
				Reported		value is 3
		StaleDateOutputFileHeader			is Numeric 10
		EscheatmentProcessingStatus			is Numeric size 1
			States
				NotProcessed	value is 0
				Selected		value is 1
				InError			value is 2
				Reported		value is 3
		EscheatmentOutputFileHeader			is Numeric 10
		CashLedgerMassReleaseResult			is Numeric size 12
		GeneralLedgerEvent		
		VoidStopPayAttachment				is an AlternateAttachment		
			default label is "Void/\StopPayAttachment"
		TransactionAttachment				is an AlternateAttachment		

		PayeeName                           is a VendorName 
			holds pii
        MailingName 	                    is a VendorName 
        	holds pii
        ConfirmationNumber					
        PayCurrency                         is a Currency   			
        PaymentAmount                       is an InternationalAmount	
        PayeePostalAddress                  is a PostalAddressV2	
        	holds pii
        BankName
        BankPostalAddress					is a PostalAddressV2	
        	holds pii
		BankAccountNumber
		BankEntity
		BankAccountType
		GlobalBankAccountType	
		CrossBorderIdentifier
		SwiftID
			default label is "SWIFT/BIC"
		ChargeCode
		IntermediaryBankName				is a BankName
        IntermediaryBankPostalAddress		is a PostalAddressV2	
        	holds pii
        IntermediaryBankEntity				is a BankEntity
        IntermediaryCrossBorderIdentifier	is a CrossBorderIdentifier
        IntermediarySwiftID					is a SwiftID
        	default label is "SWIFT/BIC"

		PayeeFirstName						is a FirstName			
		PayeeMiddleName						is a MiddleName			
		WriteOffProcessed					is Boolean				
		AmendedDistributions				is Boolean 
		ReportedAsOpenByPositivePay         is Boolean
		CashLedgerBatchApproval					
			default label is "ApprovalBatch"            	
	Rule Blocks
		
			
		ProcessReopenUpdates
			if (first GLReconcileDistributionsRel exists)
				if (first GLReconcileDistributionsRel.Status.Released)
					invoke ReopenReconciledReleasedDistributions GLReconcileDistributionsReleasedRel	
				else
				if (first GLReconcileDistributionsRel.Status.Posted)
					invoke ReopenReconciledPostedDistributions GLReconcileDistributionsPostedRel	
			if (CashLedgerReconciliationAdjustmentRel exists)
				invoke ReopenDelete CashLedgerReconciliationAdjustmentRel

		UpdateCashCodeBalances
			if (LocalActionOpenToStopPayment
			or  LocalActionOpenToVoid
			or  LocalActionOpenToStaleDated)
				if (BankTransactionSign.BankDebit)
					invoke BypassRulesUpdate CashCode
						invoked.UnreconciledBalance 	+= IssuedBankAmount
						invoked.UnreconciledRecordCount	-= 1				
				else
					invoke BypassRulesUpdate CashCode
					 	invoked.UnreconciledBalance 	-= IssuedBankAmount
						invoked.UnreconciledRecordCount	-= 1				
			else
			if (LocalActionStaleDatedToReopen
			or  LocalActionStopPaymentToReopen
			or  LocalActionVoidToReopen)
				if (BankTransactionSign.BankDebit)
					invoke BypassRulesUpdate CashCode
						invoked.UnreconciledBalance 	-= IssuedBankAmount
						invoked.UnreconciledRecordCount	+= 1				
				else
					invoke BypassRulesUpdate CashCode
					 	invoked.UnreconciledBalance 	+= IssuedBankAmount
						invoked.UnreconciledRecordCount	+= 1				
			else
			if (LocalActionUnreleaseToRelease)
				if (BankTransactionSign.BankDebit)
					if (BankTransactionCode.AutomaticReconciliation
					and CreatedFromBankStatementLine !entered)
						invoke BypassRulesUpdate CashCode
							invoked.CurrentReconciledBalance	-= IssuedBankAmount
					else
						invoke BypassRulesUpdate CashCode
						 	invoked.UnreconciledBalance			-= IssuedBankAmount
							invoked.UnreconciledRecordCount		+= 1		
				else
					if (BankTransactionCode.AutomaticReconciliation
					and CreatedFromBankStatementLine !entered)
						invoke BypassRulesUpdate CashCode
							invoked.CurrentReconciledBalance 	+= IssuedBankAmount
					else
						invoke BypassRulesUpdate CashCode
							invoked.UnreconciledBalance 		+= IssuedBankAmount
							invoked.UnreconciledRecordCount		+= 1		
			else
			if (LocalActionOpenToReconcile)		
				if (BankTransactionSign.BankDebit)
					invoke BypassRulesUpdate CashCode
						invoked.UnreconciledBalance 		+= IssuedBankAmount
						invoked.CurrentReconciledBalance 	-= ReconciliationData.CurrencyAmount
						invoked.UnreconciledRecordCount		-= 1				
				else
					invoke BypassRulesUpdate CashCode
					 	invoked.UnreconciledBalance 		-= IssuedBankAmount
						invoked.CurrentReconciledBalance 	+= ReconciliationData.CurrencyAmount
						invoked.UnreconciledRecordCount		-= 1				
			else
			if (LocalActionReconcileToReopen)
				if (BankTransactionSign.BankDebit)
					invoke BypassRulesUpdate CashCode
						invoked.UnreconciledBalance 		-= IssuedBankAmount
						invoked.CurrentReconciledBalance 	+= ReconciliationData.CurrencyAmount
						invoked.UnreconciledRecordCount		+= 1				
				else
					invoke BypassRulesUpdate CashCode
					 	invoked.UnreconciledBalance 		+= IssuedBankAmount
						invoked.CurrentReconciledBalance 	-= ReconciliationData.CurrencyAmount
						invoked.UnreconciledRecordCount		+= 1				

		ProcessCashLedgerConsolidation

			include InitializeLocalConsolidationFields
			if (CashLedgerConsolidationCurrentDayRel exists)
				include PopulateLocalConsolidationFields
				include ComputeLocalConsolidationBalances
				include ComputeLocalConsolidationAdjustments
				include UpdateCashLedgerConsolidation
			else
				if (first CashLedgerConsolidationsPreviousDayRel exists)
					include ForwardPreviousDayConsolidationBalances
				include ComputeLocalConsolidationBalances
				include ComputeLocalConsolidationAdjustments


				include CreateCashLedgerConsolidation

			include InitializeLocalConsolidationFields
			LocalCompany 	= Company.OrigCompany
			LocalNewCompany = Company.OrigCompany
			if (CashLedgerConsolidationCurrentDayRel exists)
				include PopulateLocalConsolidationFields
				include ComputeLocalConsolidationBalances
				include ComputeLocalConsolidationAdjustments
				include UpdateCashLedgerConsolidation
			else				
				if (first CashLedgerConsolidationsPreviousDayRel exists)
					include ForwardPreviousDayConsolidationBalances
				include ComputeLocalConsolidationBalances
				include ComputeLocalConsolidationAdjustments


				include CreateCashLedgerConsolidation

			include InitializeLocalConsolidationFields
			LocalCompany = Company.OrigCompany
			if (first CashLedgerConsolidationsOtherCompaniesRel exists)
				for each CashLedgerConsolidationsOtherCompaniesRel
					LocalOtherCompany 				= each.CashLedgerConsolidation.Company
					LocalOtherBankTransactionCode	= each.CashLedgerConsolidation.BankTransactionCode
					if (LocalOtherCompany not = LocalNewCompany)
						if (CashLedgerConsolidationOtherCurrentDayRel not exists)
							if (first CashLedgerConsolidationsOtherPreviousDayRel exists)
								include ForwardPreviousOtherDayConsolidationBalances


								include CreateCashLedgerConsolidation

			include InitializeLocalConsolidationFields
			LocalCompany 			 	= Company.OrigCompany
			LocalNewCompany 			= Company.OrigCompany
			LocalBankTransactionCode 	= CashLedgerTransaction.BankTransactionCode
			LocalNewBankTransactionCode = CashLedgerTransaction.BankTransactionCode
			if (CashLedgerConsolidationCurrentDayRel exists)
				include PopulateLocalConsolidationFields
				include ComputeLocalConsolidationBalances

				initialize LocalBankBeginningBalance
				initialize LocalBankEndingBalance
				initialize LocalAccountBeginningBalance
				initialize LocalAccountEndingBalance
				include ComputeLocalConsolidationAdjustments
				include UpdateCashLedgerConsolidation
			else
				if (first CashLedgerConsolidationsPreviousDayRel exists)
					include ForwardPreviousDayConsolidationBalances
				include ComputeLocalConsolidationBalances

				initialize LocalBankBeginningBalance
				initialize LocalBankEndingBalance
				initialize LocalAccountBeginningBalance
				initialize LocalAccountEndingBalance
				include ComputeLocalConsolidationAdjustments


				include CreateCashLedgerConsolidation

			include InitializeLocalConsolidationFields
			LocalCompany = Company.OrigCompany
			LocalBankTransactionCode = CashLedgerTransaction.BankTransactionCode
			if (first CashLedgerConsolidationsOtherBankTransactionCodesRel exists)
				for each CashLedgerConsolidationsOtherBankTransactionCodesRel
					LocalOtherCompany 				  = each.CashLedgerConsolidation.Company
					LocalOtherBankTransactionCode 	  = each.CashLedgerConsolidation.BankTransactionCode
					if (LocalOtherCompany 			  not = LocalNewCompany
					or  LocalOtherBankTransactionCode not = LocalNewBankTransactionCode)
						if (CashLedgerConsolidationOtherCurrentDayRel not exists)
							if (first CashLedgerConsolidationsOtherPreviousDayRel exists)
								include ForwardPreviousOtherDayConsolidationBalances


								include CreateCashLedgerConsolidation


		InitializeLocalConsolidationFields
			initialize LocalBankBeginningBalance
			initialize LocalBankEndingBalance
			initialize LocalOpenBeginningBalance
			initialize LocalOpenEndingBalance
			initialize LocalAccountBeginningBalance
			initialize LocalAccountEndingBalance
			initialize LocalIssuedAmount
			initialize LocalIssuedCount
			initialize LocalReconciledAmount
			initialize LocalReconciledCount
			initialize LocalVoidedAmount
			initialize LocalVoidedCount
			initialize LocalStopPaidAmount
			initialize LocalStopPaidCount
			initialize LocalStaleDatedAmount
			initialize LocalStaleDatedCount
			initialize LocalEscheatedAmount
			initialize LocalEscheatedCount
			initialize LocalAdjustmentsAmount
			initialize LocalDiff
			initialize LocalCompany
			initialize LocalNewCompany
			initialize LocalOtherCompany
			initialize LocalBankTransactionCode
			initialize LocalNewBankTransactionCode
			initialize LocalOtherBankTransactionCode

		PopulateLocalConsolidationFields
			LocalBankBeginningBalance		= CashLedgerConsolidationCurrentDayRel.BankBeginningBalance
			LocalBankEndingBalance			= CashLedgerConsolidationCurrentDayRel.BankEndingBalance
			LocalOpenBeginningBalance		= CashLedgerConsolidationCurrentDayRel.OpenBeginningBalance
			LocalOpenEndingBalance			= CashLedgerConsolidationCurrentDayRel.OpenEndingBalance
			LocalAccountBeginningBalance	= CashLedgerConsolidationCurrentDayRel.AccountBeginningBalance
			LocalAccountEndingBalance		= CashLedgerConsolidationCurrentDayRel.AccountEndingBalance
			LocalIssuedAmount 				= CashLedgerConsolidationCurrentDayRel.IssuedAmount
			LocalIssuedCount                = CashLedgerConsolidationCurrentDayRel.IssuedCount
			LocalReconciledAmount           = CashLedgerConsolidationCurrentDayRel.ReconciledAmount
			LocalReconciledCount            = CashLedgerConsolidationCurrentDayRel.ReconciledCount
			LocalVoidedAmount               = CashLedgerConsolidationCurrentDayRel.VoidedAmount
			LocalVoidedCount                = CashLedgerConsolidationCurrentDayRel.VoidedCount
			LocalStopPaidAmount             = CashLedgerConsolidationCurrentDayRel.StopPaidAmount
			LocalStopPaidCount              = CashLedgerConsolidationCurrentDayRel.StopPaidCount
			LocalStaleDatedAmount           = CashLedgerConsolidationCurrentDayRel.StaleDatedAmount
			LocalStaleDatedCount            = CashLedgerConsolidationCurrentDayRel.StaleDatedCount
			LocalEscheatedAmount            = CashLedgerConsolidationCurrentDayRel.EscheatedAmount
			LocalEscheatedCount				= CashLedgerConsolidationCurrentDayRel.EscheatedCount
			LocalAdjustmentsAmount          = CashLedgerConsolidationCurrentDayRel.AdjustmentsAmount

		ForwardPreviousDayConsolidationBalances
			LocalBankBeginningBalance		= first CashLedgerConsolidationsPreviousDayRel.BankEndingBalance
			LocalBankEndingBalance			= first CashLedgerConsolidationsPreviousDayRel.BankEndingBalance
			LocalOpenBeginningBalance		= first CashLedgerConsolidationsPreviousDayRel.OpenEndingBalance
			LocalOpenEndingBalance			= first CashLedgerConsolidationsPreviousDayRel.OpenEndingBalance
			LocalAccountBeginningBalance	= first CashLedgerConsolidationsPreviousDayRel.AccountEndingBalance
			LocalAccountEndingBalance		= first CashLedgerConsolidationsPreviousDayRel.AccountEndingBalance
			LocalNewCompany                 = first CashLedgerConsolidationsPreviousDayRel.CashLedgerConsolidation.Company
			LocalNewBankTransactionCode     = first CashLedgerConsolidationsPreviousDayRel.CashLedgerConsolidation.BankTransactionCode

		ForwardPreviousOtherDayConsolidationBalances
			LocalBankBeginningBalance		= first CashLedgerConsolidationsOtherPreviousDayRel.BankEndingBalance
			LocalBankEndingBalance			= first CashLedgerConsolidationsOtherPreviousDayRel.BankEndingBalance
			LocalOpenBeginningBalance		= first CashLedgerConsolidationsOtherPreviousDayRel.OpenEndingBalance
			LocalOpenEndingBalance			= first CashLedgerConsolidationsOtherPreviousDayRel.OpenEndingBalance
			LocalAccountBeginningBalance	= first CashLedgerConsolidationsOtherPreviousDayRel.AccountEndingBalance
			LocalAccountEndingBalance		= first CashLedgerConsolidationsOtherPreviousDayRel.AccountEndingBalance
			LocalNewCompany                 = first CashLedgerConsolidationsOtherPreviousDayRel.CashLedgerConsolidation.Company
			LocalNewBankTransactionCode     = first CashLedgerConsolidationsOtherPreviousDayRel.CashLedgerConsolidation.BankTransactionCode

		ComputeLocalConsolidationBalances
			if (LocalActionUnreleaseToRelease)
				LocalIssuedCount							+= 1
				if (BankTransactionSign.BankDebit)
					LocalIssuedAmount						-= IssuedBankAmount
					LocalAccountEndingBalance 				-= IssuedBankAmount
					if (BankTransactionCode.AutomaticReconciliation
					and CreatedFromBankStatementLine !entered)
						LocalReconciledAmount				-= IssuedBankAmount
						LocalBankEndingBalance 				-= IssuedBankAmount
						LocalReconciledCount				+= 1
					else
						LocalOpenEndingBalance				-= IssuedBankAmount
				else
					LocalIssuedAmount						+= IssuedBankAmount
					LocalAccountEndingBalance 				+= IssuedBankAmount
					if (BankTransactionCode.AutomaticReconciliation
					and CreatedFromBankStatementLine !entered)
						LocalReconciledAmount				+= IssuedBankAmount
						LocalBankEndingBalance 				+= IssuedBankAmount
						LocalReconciledCount				+= 1
					else
						LocalOpenEndingBalance				+= IssuedBankAmount
			else
			if (LocalActionOpenToReconcile)
				LocalReconciledCount						+= 1
				if (BankTransactionSign.BankDebit)
					LocalReconciledAmount 					-= ReconciliationData.CurrencyAmount
					LocalBankEndingBalance 					-= ReconciliationData.CurrencyAmount
					LocalOpenEndingBalance					+= IssuedBankAmount
				else
					LocalReconciledAmount					+= ReconciliationData.CurrencyAmount
					LocalBankEndingBalance 					+= ReconciliationData.CurrencyAmount
					LocalOpenEndingBalance					-= IssuedBankAmount
			else
			if (LocalActionOpenToStopPayment)
				LocalStopPaidCount							+= 1
				if (BankTransactionSign.BankDebit)
					LocalStopPaidAmount 					-= IssuedBankAmount
					LocalAccountEndingBalance 				+= IssuedBankAmount
					LocalOpenEndingBalance					+= IssuedBankAmount
				else
					LocalStopPaidAmount						+= IssuedBankAmount
					LocalAccountEndingBalance 				-= IssuedBankAmount
					LocalOpenEndingBalance					-= IssuedBankAmount
			else
			if (LocalActionOpenToVoid)
				LocalVoidedCount							+= 1
				if (BankTransactionSign.BankDebit)
					LocalVoidedAmount 						-= IssuedBankAmount
					LocalAccountEndingBalance 				+= IssuedBankAmount
					LocalOpenEndingBalance					+= IssuedBankAmount
				else
					LocalVoidedAmount						+= IssuedBankAmount
					LocalAccountEndingBalance 				-= IssuedBankAmount
					LocalOpenEndingBalance					-= IssuedBankAmount
			else
			if (LocalActionOpenToStaleDated)
				LocalStaleDatedCount						+= 1
				if (BankTransactionSign.BankDebit)
					LocalStaleDatedAmount 					-= IssuedBankAmount
					LocalAccountEndingBalance 				+= IssuedBankAmount
					LocalOpenEndingBalance					+= IssuedBankAmount
				else
					LocalStaleDatedAmount					+= IssuedBankAmount
					LocalAccountEndingBalance 				-= IssuedBankAmount
					LocalOpenEndingBalance					-= IssuedBankAmount
			else
			if (LocalActionReconcileToReopen)
				LocalReconciledCount						-= 1
				if (BankTransactionSign.BankDebit)
					LocalReconciledAmount 					+= ReconciliationData.CurrencyAmount
					LocalBankEndingBalance 					+= ReconciliationData.CurrencyAmount
					LocalOpenEndingBalance					-= IssuedBankAmount
				else
					LocalReconciledAmount					-= ReconciliationData.CurrencyAmount
					LocalBankEndingBalance 					-= ReconciliationData.CurrencyAmount
					LocalOpenEndingBalance					+= IssuedBankAmount
			else
			if (LocalActionVoidToReopen)
				LocalVoidedCount							-= 1
				if (BankTransactionSign.BankDebit)
					LocalVoidedAmount 						+= IssuedBankAmount
					LocalOpenEndingBalance					-= IssuedBankAmount
					LocalAccountEndingBalance 				-= IssuedBankAmount
				else
					LocalVoidedAmount						-= IssuedBankAmount
					LocalOpenEndingBalance					+= IssuedBankAmount
					LocalAccountEndingBalance 				+= IssuedBankAmount
			else
			if (LocalActionStopPaymentToReopen)
				LocalStopPaidCount							-= 1
				if (BankTransactionSign.BankDebit)
					LocalStopPaidAmount 					+= IssuedBankAmount
					LocalOpenEndingBalance					-= IssuedBankAmount
					LocalAccountEndingBalance 				-= IssuedBankAmount
				else
					LocalStopPaidAmount						-= IssuedBankAmount
					LocalOpenEndingBalance					+= IssuedBankAmount
					LocalAccountEndingBalance 				+= IssuedBankAmount
			else
			if (LocalActionStaleDatedToReopen)
				LocalStaleDatedCount						-= 1
				if (BankTransactionSign.BankDebit)
					LocalStaleDatedAmount 					+= IssuedBankAmount
					LocalOpenEndingBalance					-= IssuedBankAmount
					LocalAccountEndingBalance 				-= IssuedBankAmount
				else
					LocalStaleDatedAmount					-= IssuedBankAmount
					LocalOpenEndingBalance					+= IssuedBankAmount
					LocalAccountEndingBalance 				+= IssuedBankAmount
			else
			if (LocalActionStaleDatedToVoid)
				LocalVoidedCount							+= 1
				LocalStaleDatedCount						-= 1
				if (BankTransactionSign.BankDebit)
					LocalVoidedAmount 						-= IssuedBankAmount
					LocalStaleDatedAmount 					+= IssuedBankAmount
				else
					LocalVoidedAmount						+= IssuedBankAmount
					LocalStaleDatedAmount 					-= IssuedBankAmount
			else
			if (LocalActionStaleDatedToStopPayment)
				LocalStopPaidCount							+= 1
				LocalStaleDatedCount						-= 1
				if (BankTransactionSign.BankDebit)
					LocalStopPaidAmount 					-= IssuedBankAmount
					LocalStaleDatedAmount 					+= IssuedBankAmount
				else
					LocalStopPaidAmount						+= IssuedBankAmount
					LocalStaleDatedAmount 					-= IssuedBankAmount
			else
			if (LocalActionStaleDatedToEscheat)
				LocalEscheatedCount							+= 1
				if (BankTransactionSign.BankDebit)
					LocalEscheatedAmount 					-= IssuedBankAmount
				else
					LocalEscheatedAmount					+= IssuedBankAmount

		ComputeLocalConsolidationAdjustments
			if (ReconciliationData.CurrencyAmount != 0)
				LocalDiff = ReconciliationData.CurrencyAmount - IssuedBankAmount
				if (BankTransactionSign.BankDebit)
					LocalDiff = LocalDiff * -1
				if (LocalDiff != 0)
					if (LocalActionReconcileToReopen)
						LocalAdjustmentsAmount 				= LocalAdjustmentsAmount 	- LocalDiff
						LocalAccountEndingBalance			= LocalAccountEndingBalance - LocalDiff
					else
						LocalAdjustmentsAmount 				= LocalAdjustmentsAmount 	+ LocalDiff
						LocalAccountEndingBalance			= LocalAccountEndingBalance + LocalDiff

		CreateCashLedgerConsolidation
			invoke Create CashLedgerConsolidation
				invoked.CashLedgerConsolidation.BankTransactionCode = LocalNewBankTransactionCode
				invoked.CashLedgerConsolidation.Company				= LocalNewCompany
				invoked.CashLedgerConsolidation.LastMaintenanceDate = current corporate date
				invoked.CashLedgerConsolidation.LastMaintenanceTime	= current timestamp
				invoked.CashCode									= CashCode
				invoked.CashManagementGroup							= CashManagementGroup
				invoked.IssuedAmount								= LocalIssuedAmount
				invoked.IssuedCount									= LocalIssuedCount
				invoked.ReconciledAmount							= LocalReconciledAmount
				invoked.ReconciledCount								= LocalReconciledCount
				invoked.VoidedAmount								= LocalVoidedAmount
				invoked.VoidedCount									= LocalVoidedCount
				invoked.StopPaidAmount								= LocalStopPaidAmount
				invoked.StopPaidCount								= LocalStopPaidCount
				invoked.StaleDatedAmount							= LocalStaleDatedAmount
				invoked.StaleDatedCount								= LocalStaleDatedCount
				invoked.EscheatedAmount								= LocalEscheatedAmount
				invoked.EscheatedCount								= LocalEscheatedCount
				invoked.AdjustmentsAmount 							= LocalAdjustmentsAmount
				invoked.BankBeginningBalance		 				= LocalBankBeginningBalance
				invoked.BankEndingBalance 							= LocalBankEndingBalance
				invoked.OpenBeginningBalance		 				= LocalOpenBeginningBalance
				invoked.OpenEndingBalance							= LocalOpenEndingBalance
				invoked.AccountBeginningBalance		 				= LocalAccountBeginningBalance
				invoked.AccountEndingBalance		 				= LocalAccountEndingBalance


		UpdateCashLedgerConsolidation
			invoke Update CashLedgerConsolidationCurrentDayRel
				invoked.IssuedAmount								= LocalIssuedAmount
				invoked.IssuedCount									= LocalIssuedCount
				invoked.ReconciledAmount							= LocalReconciledAmount
				invoked.ReconciledCount								= LocalReconciledCount
				invoked.VoidedAmount								= LocalVoidedAmount
				invoked.VoidedCount									= LocalVoidedCount
				invoked.StopPaidAmount								= LocalStopPaidAmount
				invoked.StopPaidCount								= LocalStopPaidCount
				invoked.StaleDatedAmount							= LocalStaleDatedAmount
				invoked.StaleDatedCount								= LocalStaleDatedCount
				invoked.EscheatedAmount								= LocalEscheatedAmount
				invoked.EscheatedCount								= LocalEscheatedCount
				invoked.AdjustmentsAmount 							= LocalAdjustmentsAmount
				invoked.AccountBeginningBalance		 				= LocalAccountBeginningBalance
				invoked.AccountEndingBalance		 				= LocalAccountEndingBalance
				invoked.BankBeginningBalance		 				= LocalBankBeginningBalance
				invoked.BankEndingBalance 							= LocalBankEndingBalance
				invoked.OpenBeginningBalance		 				= LocalOpenBeginningBalance
				invoked.OpenEndingBalance							= LocalOpenEndingBalance

		CreateCashAcctDistribution
			if (BankTransactionSign.BankCredit)
				LocalIssuedBankAmount									= IssuedBankAmount * -1
				LocalFinanceCurrencyAmount								= IssuedBaseAmount
				include ReverseBaseDistributionAmounts
			else
				LocalIssuedBankAmount									= IssuedBankAmount
				LocalFinanceCurrencyAmount								= IssuedBaseAmount
			invoke Create CashLedgerGLDistribution
				fill in fields from CashLedgerTransaction
				invoked.CashCode										= CashCode
				invoked.CashLedgerSourceRecord							= CashLedgerSourceRecord
				invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
				invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
				invoked.TransactionNumberSuffix						 	= 0
				invoked.GeneralLedgerSourceCode                         = "CL"
				invoked.CashLedgerGLDistribution.DistributionType    	= "R"
				invoked.RecordType									 	= ""
				invoked.Status	 									 	= 1
				invoked.PostDate									 	= GeneralLedgerPostDate
				invoked.GLFinanceCodeBlock							    = CompanyCashCode.CashAccount
				invoked.BaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
				invoked.ToBaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
				invoked.ToTransactionCurrencyNumberOfDecimals		 	= TransactionCurrencyNumberOfDecimals
				invoked.TransactionCurrencyNumberOfDecimals				= TransactionCurrencyNumberOfDecimals
				invoked.GLTransactionAmount								= LocalIssuedBankAmount
				invoked.DistributionToBankAmount 						= LocalIssuedBankAmount
				invoked.GLBaseAmount									= LocalFinanceCurrencyAmount
				invoked.GLTJournalizeGroup							 	= LocalJournalizeGroup
				invoked.LocalReleaseGlTransactionDetail					= true
				invoked.ReconcileGeneralLedgerEntry						= LocalReconcileGeneralLedgerEntry
				invoked.BypassStatusEdit							 	= true

		CreateReconcileGLAcctDistribution  
			if (BankTransactionSign.BankCredit)
				if (LocalCreateOffset)
					LocalFinanceCurrencyAmountGroup						= ReconciliationData
					include ReverseReconBaseDistributionAmounts
					LocalFinanceCurrencyAmountGroup.CurrencyAmount		= ReconciliationData.CurrencyAmount * -1
				else
					LocalFinanceCurrencyAmountGroup						= ReconciliationData
			else
				if (LocalCreateOffset)
					LocalFinanceCurrencyAmountGroup						= ReconciliationData
				else
					LocalFinanceCurrencyAmountGroup						= ReconciliationData
					include ReverseReconBaseDistributionAmounts
					LocalFinanceCurrencyAmountGroup.CurrencyAmount		= ReconciliationData.CurrencyAmount * -1
			invoke CreateReconcileAcctDistribution CashLedgerGLDistribution
				fill in fields from CashLedgerTransaction
				invoked.CashCode										= CashCode
				invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
				invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
				invoked.TransactionNumberSuffix						 	= 0
				invoked.GeneralLedgerSourceCode                         = "CL"
				invoked.CashLedgerGLDistribution.DistributionType	 	= "R"
				invoked.Status	 									 	= 1
				invoked.Reference										= LocalReference
				invoked.Description										= LocalDescription
				invoked.PostDate									 	= LocalPostDate	
				invoked.BaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
				invoked.ToBaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
				invoked.ToTransactionCurrencyNumberOfDecimals		 	= TransactionCurrencyNumberOfDecimals
				invoked.TransactionCurrencyNumberOfDecimals			 	= TransactionCurrencyNumberOfDecimals
				invoked.CompanyAccountingEntity							= Company.OrigCompany.AccountingEntity			
				invoked.GLBaseAmount									= LocalFinanceCurrencyAmountGroup
				invoked.GLTransactionAmount								= LocalFinanceCurrencyAmountGroup.CurrencyAmount
				invoked.DistributionToBankAmount 						= LocalFinanceCurrencyAmountGroup.CurrencyAmount
				if (LocalCreateOffset)
					invoked.RecordType									= "C"
					invoked.GLFinanceCodeBlock							= CompanyCashCode.CashAccount
				else
					invoked.RecordType									= blank
					invoked.GLFinanceCodeBlock							= CompanyCashCode.ReconciliationAccount
				invoked.BypassBudgetAndCommitmentProcessing 			= true
				invoked.ReconcileGeneralLedgerEntry						= LocalReconcileGeneralLedgerEntry

		CreateReconcileVarianceAcctDistribution  
			LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= ReconciliationData.FunctionalAmount.EnteredCurrencyRate		
			LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyRate	= ReconciliationData.AlternateAmount.EnteredCurrencyRate		
			LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyRate	= ReconciliationData.AlternateAmount2.EnteredCurrencyRate		
			LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyRate	= ReconciliationData.AlternateAmount3.EnteredCurrencyRate		
			LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= ReconciliationData.ReportAmount1.EnteredCurrencyRate			
			LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= ReconciliationData.ReportAmount2.EnteredCurrencyRate			
			LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= ReconciliationData.ReportAmount3.EnteredCurrencyRate			
			LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= ReconciliationData.ReportAmount4.EnteredCurrencyRate			
			LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= ReconciliationData.ReportAmount5.EnteredCurrencyRate			
			if (BankTransactionSign.BankCredit)
				if (LocalCreateOffset)
					LocalReconcileVarianceData								= ((IssuedBankAmount - ReconciliationData.CurrencyAmount) * -1)		
					LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= ((IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount - ReconciliationData.FunctionalAmount.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= ((IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount - ReconciliationData.AlternateAmount.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= ((IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount - ReconciliationData.AlternateAmount2.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= ((IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount - ReconciliationData.AlternateAmount3.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= ((IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount - ReconciliationData.ReportAmount1.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= ((IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount - ReconciliationData.ReportAmount2.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= ((IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount - ReconciliationData.ReportAmount3.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= ((IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount - ReconciliationData.ReportAmount4.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= ((IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount - ReconciliationData.ReportAmount5.EnteredCurrencyAmount) * -1)	
				else
					LocalReconcileVarianceData								= (IssuedBankAmount - ReconciliationData.CurrencyAmount)			
					LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= (IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount - ReconciliationData.FunctionalAmount.EnteredCurrencyAmount)	
					LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= (IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount - ReconciliationData.AlternateAmount.EnteredCurrencyAmount)	
					LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= (IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount - ReconciliationData.AlternateAmount2.EnteredCurrencyAmount)	
					LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= (IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount - ReconciliationData.AlternateAmount3.EnteredCurrencyAmount)	
					LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= (IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount - ReconciliationData.ReportAmount1.EnteredCurrencyAmount)		
					LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= (IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount - ReconciliationData.ReportAmount2.EnteredCurrencyAmount)		
					LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= (IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount - ReconciliationData.ReportAmount3.EnteredCurrencyAmount)		
					LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= (IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount - ReconciliationData.ReportAmount4.EnteredCurrencyAmount)		
					LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= (IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount - ReconciliationData.ReportAmount5.EnteredCurrencyAmount)		
			else
				if (LocalCreateOffset)
					LocalReconcileVarianceData								= (IssuedBankAmount - ReconciliationData.CurrencyAmount)			
					LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= (IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount - ReconciliationData.FunctionalAmount.EnteredCurrencyAmount)	
					LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= (IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount - ReconciliationData.AlternateAmount.EnteredCurrencyAmount)	
					LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= (IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount - ReconciliationData.AlternateAmount2.EnteredCurrencyAmount)	
					LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= (IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount - ReconciliationData.AlternateAmount3.EnteredCurrencyAmount)	
					LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= (IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount - ReconciliationData.ReportAmount1.EnteredCurrencyAmount)		
					LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= (IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount - ReconciliationData.ReportAmount2.EnteredCurrencyAmount)		
					LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= (IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount - ReconciliationData.ReportAmount3.EnteredCurrencyAmount)		
					LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= (IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount - ReconciliationData.ReportAmount4.EnteredCurrencyAmount)		
					LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= (IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount - ReconciliationData.ReportAmount5.EnteredCurrencyAmount)		
				else
					LocalReconcileVarianceData								= ((IssuedBankAmount - ReconciliationData.CurrencyAmount) * -1)		
					LocalReconCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= ((IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount - ReconciliationData.FunctionalAmount.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= ((IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount - ReconciliationData.AlternateAmount.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= ((IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount - ReconciliationData.AlternateAmount2.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= ((IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount - ReconciliationData.AlternateAmount3.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= ((IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount - ReconciliationData.ReportAmount1.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= ((IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount - ReconciliationData.ReportAmount2.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= ((IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount - ReconciliationData.ReportAmount3.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= ((IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount - ReconciliationData.ReportAmount4.EnteredCurrencyAmount) * -1)	
					LocalReconCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= ((IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount - ReconciliationData.ReportAmount5.EnteredCurrencyAmount) * -1)	
			invoke CreateReconcileAcctDistribution CashLedgerGLDistribution
				fill in fields from CashLedgerTransaction
				invoked.CashCode										= CashCode
				invoked.CashLedgerGLDistribution.BankTransactionCode	= BankTransactionCode
				invoked.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
				invoked.TransactionNumberSuffix							= 0
				invoked.GeneralLedgerSourceCode							= "CL"
				invoked.CashLedgerGLDistribution.DistributionType		= "R"
				invoked.Status	 										= 1
				invoked.Reference										= LocalReference
				invoked.Description										= LocalDescription
				invoked.PostDate										= LocalPostDate	
				invoked.BaseCurrencyNumberOfDecimals					= BaseCurrencyNumberOfDecimals
				invoked.ToBaseCurrencyNumberOfDecimals					= BaseCurrencyNumberOfDecimals
				invoked.ToTransactionCurrencyNumberOfDecimals			= TransactionCurrencyNumberOfDecimals
				invoked.TransactionCurrencyNumberOfDecimals				= TransactionCurrencyNumberOfDecimals
				if (LocalCreateOffset)
					invoked.RecordType									= "C"
					invoked.GLFinanceCodeBlock							= CompanyCashCode.CashAccount
				else
					invoked.RecordType									= blank
					invoked.GLFinanceCodeBlock							= CompanyCashCode.VarianceAccount
				invoked.CompanyAccountingEntity							= Company.OrigCompany.AccountingEntity	
				invoked.GLTransactionAmount								= LocalReconcileVarianceData			
				invoked.DistributionToBankAmount						= LocalReconcileVarianceData 			
				invoked.GLBaseAmount									= LocalReconCurrencyAmount		
				invoked.BypassUnitAndAmountEdit							= true		

		CreateOffsetDistribution

			if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
				if (instance count of EnteredCashLedgerGLDistributionsRel > TransactionOffsetBackgroundDistQty)			
					invoke CreateTransactionOffsetDistributionBackground CashLedgerGLDistribution
						invoked.PrmCashManagementGroup				= CashManagementGroup
						invoked.PrmCashCode							= CashCode
						invoked.PrmBankTransactionCode				= BankTransactionCode
						invoked.PrmCashLedgerSourceRecord			= CashLedgerSourceRecord
						invoked.PrmCashLedgerTransaction			= CashLedgerTransaction
						if (CompanyCashCode.ReconcileGeneralLedgerEntry
						and BankTransactionCode.AutomaticReconciliation
						and CreatedFromBankStatementLine !entered)
							invoked.PrmInputFinanceCodeBlock		= CompanyCashCode.ReconciliationAccount
						else
							invoked.PrmInputFinanceCodeBlock		= CompanyCashCode.CashAccount
						invoked.PrmBypassCashFundUpdate				= LocalBypassCashFundUpdate
				else
					for each EnteredCashLedgerGLDistributionsRel		
						LocalIssuedBankAmount									= each.GLTransactionAmount * -1
						LocalFinanceCurrencyAmount								= each.GLBaseAmount
						include ReverseBaseDistributionAmounts

						initialize LocalCalculateCashFinanceStructure
						LocalCalculateCashFinanceStructure.InputCashManagementGroup				= each.CashManagementGroup
						LocalCalculateCashFinanceStructure.InputCashCode						= each.CashCode
						LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= each.CashLedgerSourceRecord
						LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= each.CashLedgerGLDistribution
						LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= each.CashLedgerGLDistribution.GLFinanceCodeBlock
						LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.CashCodeDistribution
						if (CompanyCashCode.ReconcileGeneralLedgerEntry
						and BankTransactionCode.AutomaticReconciliation
						and CreatedFromBankStatementLine !entered)
							LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= CompanyCashCode.ReconciliationAccount
						else
							LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= CompanyCashCode.CashAccount
						LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

						invoke Create CashLedgerGLDistribution
							fill in fields from CashLedgerTransaction
							invoked.CashCode										= CashCode
							invoked.CashLedgerSourceRecord							= CashLedgerSourceRecord
							invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
							invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
							invoked.TransactionNumberSuffix						 	= 0
							if (GeneralLedgerEvent !entered)		
								invoked.GeneralLedgerSourceCode						= "CL"
							else
								invoked.GeneralLedgerSourceCode						= GeneralLedgerEvent
							invoked.CashLedgerGLDistribution.DistributionType	 	= "E"
							invoked.RecordType									 	= "C"
							invoked.Status 										 	= 1
							invoked.PostDate									 	= GeneralLedgerPostDate
							invoked.GLFinanceCodeBlock								= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock
							invoked.BaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
							invoked.ToBaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
							invoked.ToTransactionCurrencyNumberOfDecimals		 	= TransactionCurrencyNumberOfDecimals
							invoked.TransactionCurrencyNumberOfDecimals			 	= TransactionCurrencyNumberOfDecimals
							invoked.GLTransactionAmount								= LocalIssuedBankAmount
							invoked.DistributionToBankAmount 						= LocalIssuedBankAmount
							invoked.GLBaseAmount									= LocalFinanceCurrencyAmount
							invoked.CashLedgerTransactionOffsetDistrib				= true
							invoked.GLTJournalizeGroup							 	= LocalJournalizeGroup
							invoked.BypassStatusEdit							 	= true
							invoked.BypassCashFundUpdate							= LocalBypassCashFundUpdate	
			else
				if (BankTransactionSign.BankDebit)
					LocalIssuedBankAmount									= IssuedBankAmount * -1
					LocalFinanceCurrencyAmount								= IssuedBaseAmount
					include ReverseBaseDistributionAmounts
				else
					LocalIssuedBankAmount									= IssuedBankAmount
					LocalFinanceCurrencyAmount								= IssuedBaseAmount

				invoke Create CashLedgerGLDistribution
					fill in fields from CashLedgerTransaction
					invoked.CashCode										= CashCode
					invoked.CashLedgerSourceRecord							= CashLedgerSourceRecord
					invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
					invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
					invoked.TransactionNumberSuffix						 	= 0
					if (GeneralLedgerEvent !entered)		
						invoked.GeneralLedgerSourceCode						= "CL"
					else
						invoked.GeneralLedgerSourceCode						= GeneralLedgerEvent
					invoked.CashLedgerGLDistribution.DistributionType	 	= "E"
					invoked.RecordType									 	= "C"
					invoked.Status 										 	= 1
					invoked.PostDate									 	= GeneralLedgerPostDate
					if (CompanyCashCode.ReconcileGeneralLedgerEntry
					and BankTransactionCode.AutomaticReconciliation
					and CreatedFromBankStatementLine !entered)
						invoked.GLFinanceCodeBlock							= CompanyCashCode.ReconciliationAccount
					else
						invoked.GLFinanceCodeBlock				            = CompanyCashCode.CashAccount
					invoked.BaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
					invoked.ToBaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
					invoked.ToTransactionCurrencyNumberOfDecimals		 	= TransactionCurrencyNumberOfDecimals
					invoked.TransactionCurrencyNumberOfDecimals			 	= TransactionCurrencyNumberOfDecimals
					invoked.GLTransactionAmount								= LocalIssuedBankAmount
					invoked.DistributionToBankAmount 						= LocalIssuedBankAmount
					invoked.GLBaseAmount									= LocalFinanceCurrencyAmount
					invoked.CashLedgerTransactionOffsetDistrib				= true
					invoked.GLTJournalizeGroup							 	= LocalJournalizeGroup
					invoked.BypassStatusEdit							 	= true

		CreateamendedOffsetDistribution                            
		
			if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
				for each GLEntryDistributionsUnreleasedRel
					LocalIssuedBankAmount									= each.GLTransactionAmount * -1
					LocalFinanceCurrencyAmount								= each.GLBaseAmount
					include ReverseBaseDistributionAmounts

					initialize LocalCalculateCashFinanceStructure
					LocalCalculateCashFinanceStructure.InputCashManagementGroup				= each.CashManagementGroup
					LocalCalculateCashFinanceStructure.InputCashCode						= each.CashCode
					LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= each.CashLedgerSourceRecord
					LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= each.CashLedgerGLDistribution
					LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= each.CashLedgerGLDistribution.GLFinanceCodeBlock
					LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.CashCodeDistribution
					if (CompanyCashCode.ReconcileGeneralLedgerEntry
					and BankTransactionCode.AutomaticReconciliation
					and CreatedFromBankStatementLine !entered)
						LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= CompanyCashCode.ReconciliationAccount
					else
						LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= CompanyCashCode.CashAccount
					LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

					invoke Create CashLedgerGLDistribution
						fill in fields from CashLedgerTransaction
						invoked.CashCode										= CashCode
						invoked.CashLedgerSourceRecord							= CashLedgerSourceRecord
						invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
						invoked.TransactionNumberSuffix						 	= 0
						if (GeneralLedgerEvent !entered)		
							invoked.GeneralLedgerSourceCode						= "CL"
						else
							invoked.GeneralLedgerSourceCode						= GeneralLedgerEvent
						invoked.CashLedgerGLDistribution.DistributionType	 	= "E"
						invoked.RecordType									 	= "C"
						invoked.Status 										 	= 1
						invoked.PostDate									 	= GeneralLedgerPostDate
						invoked.GLFinanceCodeBlock								= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock
						invoked.BaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
						invoked.ToBaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
						invoked.ToTransactionCurrencyNumberOfDecimals		 	= TransactionCurrencyNumberOfDecimals
						invoked.TransactionCurrencyNumberOfDecimals			 	= TransactionCurrencyNumberOfDecimals
						invoked.GLTransactionAmount								= LocalIssuedBankAmount
						invoked.DistributionToBankAmount 						= LocalIssuedBankAmount
						invoked.GLBaseAmount									= LocalFinanceCurrencyAmount
						invoked.CashLedgerTransactionOffsetDistrib				= true
						invoked.BypassStatusEdit							 	= true
						invoked.BypassCashFundUpdate							= LocalBypassCashFundUpdate	

		CreateStaleDateProcessingDistributions
			invoke Create CashLedgerGLDistribution
				fill in fields from CashLedgerTransaction
				invoked.CashCode										= CashCode
				invoked.CashLedgerSourceRecord							= CashLedgerSourceRecord
				invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
				invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
				invoked.TransactionNumberSuffix						 	= 0
				invoked.GeneralLedgerSourceCode                         = "CL"
				invoked.CashLedgerGLDistribution.DistributionType    	= "S"
				invoked.RecordType									 	= "S"
				invoked.Status	 									 	= 1
				invoked.PostDate									 	= LocalPostingDate
				invoked.GLFinanceCodeBlock								= LocalGLFinanceCodeBlock
				invoked.BaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
				invoked.ToBaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
				invoked.ToTransactionCurrencyNumberOfDecimals		 	= TransactionCurrencyNumberOfDecimals
				invoked.TransactionCurrencyNumberOfDecimals				= TransactionCurrencyNumberOfDecimals
				invoked.GLTransactionAmount								= LocalIssuedBankAmount
				invoked.DistributionToBankAmount 						= LocalIssuedBankAmount
				invoked.GLBaseAmount									= LocalFinanceCurrencyAmount
				invoked.Reference										= TransactionNumber
				invoked.Description										= LocalDescription
				invoked.LocalPostingDate							 	= LocalPostingDate
				invoked.LocalExchangeDate								= LocalExchangeDate
				invoked.LocalGeneralLedgerEvent							= "CL"
				invoked.LocalControlDocumentNumber						= TransactionNumber
				invoked.LocalDocumentNumber								= TransactionNumber
				invoked.LocalCurrencyTable								= CurrencyTable
				invoked.TransientCreateFromBatchType				 	= 6
				invoked.BypassStatusEdit							 	= true
				if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
					invoked.Company										= LocalCompany

		DistributionRoundingOffSet
			initialize LocalDistributionFinanceCurrAmt
			for each CashLedgerGLDistributionsRel
				LocalDistributionFinanceCurrAmt.FunctionalAmount.EnteredCurrencyAmount		+= each.GLBaseAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.AlternateAmount.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.AlternateAmount2.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.AlternateAmount3.EnteredCurrencyAmount		+= each.GLBaseAmount.AlternateAmount3.EnteredCurrencyAmount





				LocalDistributionFinanceCurrAmt.ReportAmount1.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount1.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount2.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount2.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount3.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount3.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount4.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount4.EnteredCurrencyAmount
				LocalDistributionFinanceCurrAmt.ReportAmount5.EnteredCurrencyAmount			+= each.GLBaseAmount.ReportAmount5.EnteredCurrencyAmount

			invoke AdjustDistributionCurrencyAmounts last CashLedgerGLDistributionsRel
				if (BankTransactionSign.BankCredit)
					invoked.PrmCurrencyAmountAdjustment.FunctionalTotal		= ((IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount		* -1)	- LocalDistributionFinanceCurrAmt.FunctionalAmount.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal		= ((IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount		* -1)	- LocalDistributionFinanceCurrAmt.AlternateAmount.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal2		= ((IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount		* -1)	- LocalDistributionFinanceCurrAmt.AlternateAmount2.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal3		= ((IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount		* -1)	- LocalDistributionFinanceCurrAmt.AlternateAmount3.EnteredCurrencyAmount)





					invoked.PrmCurrencyAmountAdjustment.ReportTotal1		= ((IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount		* -1)	- LocalDistributionFinanceCurrAmt.ReportAmount1.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal2		= ((IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount		* -1)	- LocalDistributionFinanceCurrAmt.ReportAmount2.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal3		= ((IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount		* -1)	- LocalDistributionFinanceCurrAmt.ReportAmount3.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal4		= ((IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount		* -1)	- LocalDistributionFinanceCurrAmt.ReportAmount4.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal5		= ((IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount		* -1)	- LocalDistributionFinanceCurrAmt.ReportAmount5.EnteredCurrencyAmount)
				else
					invoked.PrmCurrencyAmountAdjustment.FunctionalTotal		= (IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount				- LocalDistributionFinanceCurrAmt.FunctionalAmount.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal		= (IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount				- LocalDistributionFinanceCurrAmt.AlternateAmount.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal2		= (IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount				- LocalDistributionFinanceCurrAmt.AlternateAmount2.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.AlternateTotal3		= (IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount				- LocalDistributionFinanceCurrAmt.AlternateAmount3.EnteredCurrencyAmount)





					invoked.PrmCurrencyAmountAdjustment.ReportTotal1		= (IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount					- LocalDistributionFinanceCurrAmt.ReportAmount1.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal2		= (IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount					- LocalDistributionFinanceCurrAmt.ReportAmount2.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal3		= (IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount					- LocalDistributionFinanceCurrAmt.ReportAmount3.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal4		= (IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount					- LocalDistributionFinanceCurrAmt.ReportAmount4.EnteredCurrencyAmount)
					invoked.PrmCurrencyAmountAdjustment.ReportTotal5		= (IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount					- LocalDistributionFinanceCurrAmt.ReportAmount5.EnteredCurrencyAmount)

		ReverseBaseDistributionAmounts
			LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount 	*= -1
			LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	*= -1
			LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount 	*= -1
			LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount 	*= -1
			LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	*= -1
			LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount 	 	*= -1
			LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount 		*= -1
			LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount 		*= -1

		ReverseReconBaseDistributionAmounts
			LocalFinanceCurrencyAmountGroup.FunctionalAmount.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount.EnteredCurrencyAmount	 *= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount2.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.AlternateAmount3.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ToFunctionalAmount.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount.EnteredCurrencyAmount	 *= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount2.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmountGroup.ToAlternateAmount3.EnteredCurrencyAmount *= -1
			LocalFinanceCurrencyAmountGroup.ProjectAmount.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount1.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount2.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount3.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount4.EnteredCurrencyAmount 	 *= -1
			LocalFinanceCurrencyAmountGroup.ReportAmount5.EnteredCurrencyAmount 	 *= -1

		VoidEntranceRules
			if (CashCode.EnforceDateEditOnVoidStopPaid)						
				constraint (ReconciliationData.ExchangeDate >= IssueDate)	
					"VoidOrStopPaymentDateCannotBeLessThanPaymentTransactionDate"	
			constraint (SourceCode != "AR")
				"Cannot<Status>AnAccountsReceivableTransaction"	
			if (!(ImportStatus entered)
			or !ImportStatus.Void)		
				if  (SourceCode = "AP"
				and  !Type.CashLedgerPayment)
					if (APCompanySystemClosingControlRel.Control)
						constraint (ReconciliationData.ExchangeDate within APCompanySystemClosingControlRel.ValidEntryDate)
							"VoidOrStopPaymentDateNotWithinValidEntryDatesForSystemCode_'\A\P'_andCompany<PayablesCompanyVendorProcLevel.PayablesCompany>;ValidDateRangeIs<APCompanySystemClosingControlRel.ValidEntryDate.Begin>-<APCompanySystemClosingControlRel.ValidEntryDate.End>"
				else			
					if (CBCompanySystemClosingControlRel.Control)
						constraint (ReconciliationData.ExchangeDate within CBCompanySystemClosingControlRel.ValidEntryDate)
							"VoidOrStopPaymentDateNotWithinValidEntryDatesForSystemCode_'\C\B'_andCompany<Company>;ValidDateRangeIs<CBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CBCompanySystemClosingControlRel.ValidEntryDate.End>"

		VoidAndStopPaymentRules
			if (SourceCode = "AP"		
			and initiating action != "CashLedgerPayablesPayment.ReopenCashLedgerPayment")	
				constraint (BankTransactionSign.BankDebit)
					"CannotVoidOrStopPaymentCashLedgerTransactionCreatedFromRejectedPayment"
			if (SummaryOption.Summarized)
				constraint (CashLedgerPayablesPaymentsRejectedRel not exist)
					"CannotVoidOrStopPaymentAssociatedPaymentsAlreadyRejected" 
			if (BankTransactionCode.AllowDetailPaymentReject)		
				constraint (CashLedgerPayablesPaymentRel not exist
						or  CashLedgerPayablesPaymentRel.Status.PaymentCycleClosed)
					"CannotVoidOrStopPaymentAssociatedPaymentAlreadyRejected"
			if (IsCashLedgerReconciliationAdjustmentExist)
				constraint (CashLedgerReconciliationAdjustmentRel.Status.ReleasedReconciled)
					"CannotApplyUnreleasedAdjustmentsExist"					
			if (Type.ElectronicFundsExtract)
				constraint (CashLedgerElectronicFundsTransferTransactionsRejectedRel not exist)
					"CannotVoidOrStopPaymentAssociatedPaymentsAlreadyRejected" 
			if (BankStatementReconciliation set exists)
				constraint (first BankStatementReconciliation set.ReconMatchNumber !entered)
					"CannotVoidOrStopPayment;TransactionMatchedToBankStatement<first BankStatementReconciliation set.ReconMatchNumber.BankStatement>Dated<first BankStatementReconciliation set.ReconMatchNumber.BankStatement.StatementDate>LineMatchField<first BankStatementReconciliation set.ReconMatchNumber.LineMatchField>;MustBeUnmatchedFromTheBankStatementPriorToVoidOrStopPayment"						

		UpdateReconcileDate
			if (ReconciliationData.ExchangeDate not entered)
				if (LocalActionUnreleaseToRelease)
					ReconciliationData.ExchangeDate = IssueDate
				else
					ReconciliationData.ExchangeDate = current corporate date

		SetReconciliationAmounts	
			LocalCurrencyCalculationGroup.FinanceEnterpriseGroup				= CashManagementGroup
			LocalCurrencyCalculationGroup.ExchangeDate							= IssueDate		
			LocalCurrencyCalculationGroup.FromCurrency							= TransientFromCurrency
			LocalCurrencyCalculationGroup.CurrencyAmount						= ReconciliationData.CurrencyAmount
			LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency			= Company.OrigCompany.AccountingEntity.FunctionalCurrency
			LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency			= Company.OrigCompany.AccountingEntity.AlternateCurrency
			LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency			= Company.OrigCompany.AccountingEntity.AlternateCurrency2
			LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency			= Company.OrigCompany.AccountingEntity.AccountingEntity.AlternateCurrency3
			LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency				= CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyOne
			LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency				= CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyTwo
			LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency				= CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyThree
			LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency				= CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyFour
			LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency				= CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyFive

			if (ReconciliationData.FunctionalAmount.EnteredCurrencyAmount not entered)

				ReconciliationData.FunctionalAmount								= IssuedBaseAmount.FunctionalAmount		
			else		
				LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyAmount	= ReconciliationData.FunctionalAmount.EnteredCurrencyAmount
				ReconciliationData.FunctionalAmount.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate

			if (Company.OrigCompany.AccountingEntity.AlternateCurrency entered)
				if (ReconciliationData.AlternateAmount.EnteredCurrencyAmount not entered)

					ReconciliationData.AlternateAmount							= IssuedBaseAmount.AlternateAmount		
				else		
					LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyAmount	= ReconciliationData.AlternateAmount.EnteredCurrencyAmount
					ReconciliationData.AlternateAmount.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (Company.OrigCompany.AccountingEntity.AlternateCurrency2 entered)
				if (ReconciliationData.AlternateAmount2.EnteredCurrencyAmount not entered)

					ReconciliationData.AlternateAmount2							= IssuedBaseAmount.AlternateAmount2		
				else		
					LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyAmount	= ReconciliationData.AlternateAmount2.EnteredCurrencyAmount
					ReconciliationData.AlternateAmount2.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (Company.OrigCompany.AccountingEntity.AlternateCurrency3 entered)
				if (ReconciliationData.AlternateAmount3.EnteredCurrencyAmount not entered)

					ReconciliationData.AlternateAmount3							= IssuedBaseAmount.AlternateAmount3		
				else		
					LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyAmount	= ReconciliationData.AlternateAmount3.EnteredCurrencyAmount
					ReconciliationData.AlternateAmount3.EnteredCurrencyRate					= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate

			if (CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				if (ReconciliationData.ReportAmount1.EnteredCurrencyAmount not entered)

					ReconciliationData.ReportAmount1							= IssuedBaseAmount.ReportAmount1		
				else		
					LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyAmount	= ReconciliationData.ReportAmount1.EnteredCurrencyAmount
					ReconciliationData.ReportAmount1.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				if (ReconciliationData.ReportAmount2.EnteredCurrencyAmount not entered)

					ReconciliationData.ReportAmount2							= IssuedBaseAmount.ReportAmount2		
				else		
					LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyAmount	= ReconciliationData.ReportAmount2.EnteredCurrencyAmount
					ReconciliationData.ReportAmount2.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				if (ReconciliationData.ReportAmount3.EnteredCurrencyAmount not entered)

					ReconciliationData.ReportAmount3							= IssuedBaseAmount.ReportAmount3		
				else		
					LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyAmount	= ReconciliationData.ReportAmount3.EnteredCurrencyAmount
					ReconciliationData.ReportAmount3.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				if (ReconciliationData.ReportAmount4.EnteredCurrencyAmount not entered)

					ReconciliationData.ReportAmount4							= IssuedBaseAmount.ReportAmount4		
				else		
					LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyAmount	= ReconciliationData.ReportAmount4.EnteredCurrencyAmount
					ReconciliationData.ReportAmount4.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				if (ReconciliationData.ReportAmount5.EnteredCurrencyAmount not entered)

					ReconciliationData.ReportAmount5							= IssuedBaseAmount.ReportAmount5		
				else		
					LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyAmount	= ReconciliationData.ReportAmount5.EnteredCurrencyAmount
					ReconciliationData.ReportAmount5.EnteredCurrencyRate				= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate

		ReconcileEntranceRules
			constraint (ReconciliationData.ExchangeDate not entered)
				"ReconciliationDateMustBeBlank"						
			constraint (ReconciliationData.CurrencyAmount not entered)
				"ReconciliationAmountMustBeBlank"					
			constraint (ReconciliationData.FunctionalAmount.EnteredCurrencyAmount not entered)
				"ReconciliationBaseAmountMustBeBlank"				
			constraint (ReconciliationData.FunctionalAmount.EnteredCurrencyRate not entered)
				"ReconciliationExchangeRateMustBeBlank"				




































		SetAppliedDistributionAmounts 
			if (AppliedDistributionBankAmount not entered) 
				AppliedDistributionBankAmount = IssuedBankAmount 
			if (AppliedDistributionBaseAmount.FunctionalTotal not entered) 
				AppliedDistributionBaseAmount.FunctionalTotal 	= IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount 
				AppliedDistributionBaseAmount.AlternateTotal 	= IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount
				AppliedDistributionBaseAmount.AlternateTotal2	= IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount
				AppliedDistributionBaseAmount.AlternateTotal3	= IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount
				AppliedDistributionBaseAmount.ReportTotal1 		= IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount
				AppliedDistributionBaseAmount.ReportTotal2 		= IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount
				AppliedDistributionBaseAmount.ReportTotal3 		= IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount
				AppliedDistributionBaseAmount.ReportTotal4 		= IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount
				AppliedDistributionBaseAmount.ReportTotal5 		= IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount

		CheckForRelatedChanges
			if (GeneralLedgerPostDate changed
			or  IssueDate changed
			or  CurrencyTable changed
			or  TransactionNumber changed)	
				if (first GLEntryDistributionsRel exists)
					for each GLEntryDistributionsRel

						invoke UpdateAllDistributions each	
							if (TransactionNumber changed)
								invoked.PrmTransactionNumber		= TransactionNumber
								invoked.PrmTransactionNumberChanged	= true
							if (GeneralLedgerPostDate changed
							or  IssueDate changed
							or  CurrencyTable changed)
								invoked.PrmRecalcAmounts			= true


		VerifyProcessingMonitorRule
			initialize VerifyCashLedgerMonitor
			VerifyCashLedgerMonitor.CashCode	= CashCode
			VerifyCashLedgerMonitor.PayGroup	= PayGroup
			VerifyCashLedgerMonitor.RunProgram	= LocalRunProgram
			LocalCheckCBMonitor					= VerifyCashLedgerMonitor.CallVerifyCashLedgerMonitor
			constraint (VerifyCashLedgerMonitor.NoErrors)
				"<VerifyCashLedgerMonitor.CBMonitorProcessingMessage>"

		InitiateApprovalProcessFlow
			LocalCashManagementGroup		= CashManagementGroup
			LocalBankTransactionCode		= BankTransactionCode
			LocalCashLedgerSourceRecord		= CashLedgerSourceRecord
			LocalCashLedgerTransaction		= CashLedgerTransaction
			if (config.CLTUseApproverWebapp = true)
				LocalLinkback				= ApproverLinkback
			else
				LocalLinkback				= CashManagerLinkback
			
			initiate CashLedgerTransactionApproval process
				title is "<ApprovalRequestType>OfCashTransaction<TransactionNumber>WaitingForApproval"
				Variables
					LocalCashManagementGroup
					LocalBankTransactionCode
					LocalCashLedgerSourceRecord
					LocalCashLedgerTransaction
				URLs
					"<LocalLinkback>"

		BuildTeamApproverActorList
			LocalApproverList = ""
			LocalFirstApproverAssigned = false
			for each FinanceTeamMembersFromCurrentApprovalLevelRel
				if (LocalFirstApproverAssigned)
					LocalApproverList = LocalApproverList + "," + each.FinanceTeamMember.TeamMember.FinanceResourceActor
				else
					LocalApproverList = each.FinanceTeamMember.TeamMember.FinanceResourceActor
					LocalFirstApproverAssigned = true
		
		GetNextEscalationApprovalLevel
			LocalApprovalLevel		= ApprovalLevel
			if (first LocalApprovalCodeLevelRel.EscalateTo.NextApprovalLevel)
				LocalApprovalLevel	= ApprovalLevel + 1
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
			else
				LocalApprovalLevel	= first LocalApprovalCodeLevelRel.EscalationApprovalLevel.ApprovalLevel
				LocalApprover		= first LocalApprovalCodeLevelRel.Approver
				LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam

		GetNextApprovalLevel
			if (ApprovalLevel < 1)
				LocalApprovalLevel	= first ApprovalCodeResourceRel.ApprovalLevel
				LocalApprover		= first ApprovalCodeResourceRel.Approver
				LocalApproverTeam	= first ApprovalCodeResourceRel.ApprovalTeam
			else
				LocalApprovalLevel		= ApprovalLevel + 1
				if (LocalApprovalCodeLevelRel exists)
					LocalApprovalLevel	= first LocalApprovalCodeLevelRel.ApprovalLevel
					LocalApprover		= first LocalApprovalCodeLevelRel.Approver
					LocalApproverTeam	= first LocalApprovalCodeLevelRel.ApprovalTeam
				else 
					if (CashManagementGroup.EnforceProcessorCannotBeApprover
					and OriginalSubmittingResource = LocalActor)
						include SendNotApprovedTransactionMessage
						LocalApprovalLevel 	= ApprovalLevel
						LocalApprover		= Approver
						LocalApproverTeam	= ApproverTeam
					else
						initialize LocalApprovalLevel
						initialize LocalApprover
						initialize LocalApproverTeam
						
		SendNotApprovedTransactionMessage		
			if (PfiConfigurationFromEmailPropertyRel.Value entered
			and LocalActor.ContactInfo.EmailAddress entered)
				send email
					to LocalActor.ContactInfo.EmailAddress
					from PfiConfigurationFromEmailPropertyRel.Value
					subject "Transaction<CashLedgerTransactionIdentifier>HasNotBeenApproved"		
					Attachments
						if (HasTransactionAttachment)
							attachment TransactionAttachment
								name is TransactionAttachment.Title
								mime type is TransactionAttachment.MimeType
					Contents
						"TransactionWasNotApproved;ReassignToOtherApprover."	


		CheckForEFTGainLoss
			GainLossCurrency												= Currency
			GainLossDate													= GeneralLedgerPostDate
			TransientAccountingEntity										= PrmAccountingEntity
			GainLossCalculation.DefaultSystemAccount						= PrmDefaultSystemAccount
			
			initialize LocalFinanceCurrencyAmount
			for each CashLedgerElectronicFundsTransferTransactionRel
				LocalFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		+= each.ReceiptBaseAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		+= each.ReceiptBaseAmount.AlternateAmount.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		+= each.ReceiptBaseAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		+= each.ReceiptBaseAmount.AlternateAmount3.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount		+= each.ReceiptBaseAmount.ToFunctionalAmount.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount		+= each.ReceiptBaseAmount.ToAlternateAmount.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount		+= each.ReceiptBaseAmount.ToAlternateAmount2.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount		+= each.ReceiptBaseAmount.ToAlternateAmount3.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount			+= each.ReceiptBaseAmount.ProjectAmount.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount			+= each.ReceiptBaseAmount.ReportAmount1.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount			+= each.ReceiptBaseAmount.ReportAmount2.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount			+= each.ReceiptBaseAmount.ReportAmount3.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount			+= each.ReceiptBaseAmount.ReportAmount4.EnteredCurrencyAmount
				LocalFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount			+= each.ReceiptBaseAmount.ReportAmount5.EnteredCurrencyAmount

			GainLossAmount 												= IssuedBankAmount
			GainLossCalculation.OrigCurrencyAmount.FunctionalAmount		= LocalFinanceCurrencyAmount.FunctionalAmount
			GainLossCalculation.OrigCurrencyAmount.AlternateAmount		= LocalFinanceCurrencyAmount.AlternateAmount
			GainLossCalculation.OrigCurrencyAmount.AlternateAmount2		= LocalFinanceCurrencyAmount.AlternateAmount2
			GainLossCalculation.OrigCurrencyAmount.AlternateAmount3		= LocalFinanceCurrencyAmount.AlternateAmount3
			GainLossCalculation.OrigCurrencyAmount.ToFunctionalAmount	= LocalFinanceCurrencyAmount.ToFunctionalAmount
			GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount	= LocalFinanceCurrencyAmount.ToAlternateAmount
			GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount2	= LocalFinanceCurrencyAmount.ToAlternateAmount2
			GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount3	= LocalFinanceCurrencyAmount.ToAlternateAmount3
			GainLossCalculation.OrigCurrencyAmount.ProjectAmount		= LocalFinanceCurrencyAmount.ProjectAmount
			GainLossCalculation.OrigCurrencyAmount.ReportAmount1		= LocalFinanceCurrencyAmount.ReportAmount1
			GainLossCalculation.OrigCurrencyAmount.ReportAmount2		= LocalFinanceCurrencyAmount.ReportAmount2
			GainLossCalculation.OrigCurrencyAmount.ReportAmount3		= LocalFinanceCurrencyAmount.ReportAmount3
			GainLossCalculation.OrigCurrencyAmount.ReportAmount4		= LocalFinanceCurrencyAmount.ReportAmount4
			GainLossCalculation.OrigCurrencyAmount.ReportAmount5		= LocalFinanceCurrencyAmount.ReportAmount5
			GainLossCalculation.OriginFinanceCodeBlock					= CompanyCashCode.ElectronicPaymentAccount	

			LocalBoolean = GainLossCalculation.DerivedCalculateAmount

			if (GainLossCalculation.GainLossFound)
				if (GainLossCalculation.SingleSystemAccount)

					invoke CreateGainLossDistrib CashLedgerGLDistribution
						fill in fields from CashLedgerTransaction
						invoked.CashManagementGroup							 = CashManagementGroup
						invoked.CashCode									 = CashCode
						invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerTransaction.BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerTransaction
						invoked.CashLedgerGLDistribution.DistributionType    = "E"
						invoked.Company                                      = Company.OrigCompany
						invoked.RecordType									 = "C"
						invoked.Status 	 									 = 1
						invoked.Reference                                    = PrmReference
						invoked.PostDate									 = GeneralLedgerPostDate
						invoked.Description									 = EFTPaymentMessage 
						invoked.GLFinanceCodeBlock							 = CompanyCashCode.ElectronicPaymentAccount
						invoked.TransactionNumber                            = TransactionNumber
						invoked.GeneralLedgerSourceCode						 = "CL"
						invoked.GLBaseAmount					 		 	 = GainLossCalculation.GainAmount
						invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
						invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
						invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
						invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
						invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType

					NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount 
					LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
					invoke CreateGainLossDistrib CashLedgerGLDistribution
						fill in fields from CashLedgerTransaction
						invoked.CashManagementGroup							 = CashManagementGroup
						invoked.CashCode									 = CashCode
						invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerTransaction.BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerTransaction
						invoked.CashLedgerGLDistribution.DistributionType    = "E"
						invoked.Company                                      = Company.OrigCompany
						invoked.RecordType									 = "C"
						invoked.Status 	 									 = 1
						invoked.Reference                                    = PrmReference
						invoked.PostDate									 = GeneralLedgerPostDate
						invoked.Description									 = RealizedCurrencyGainLossMessage 
						invoked.GLFinanceCodeBlock							 = GainLossCalculation.GainAccount
						invoked.TransactionNumber                            = TransactionNumber
						invoked.GeneralLedgerSourceCode						 = "CL"
						invoked.GLBaseAmount					 		 	 = NegativeFinanceCurrencyAmount
						invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
						invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
						invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
						invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
						invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType
				else
					if (GainLossCalculation.AmountType.Positive
					or  GainLossCalculation.AmountType.NegativeAndPositive)

						invoke CreateGainLossDistrib CashLedgerGLDistribution
							fill in fields from CashLedgerTransaction
							invoked.CashManagementGroup							 = CashManagementGroup
							invoked.CashCode									 = CashCode
							invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerTransaction.BankTransactionCode
							invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerTransaction
							invoked.CashLedgerGLDistribution.DistributionType    = "E"
							invoked.Company                                      = Company.OrigCompany
							invoked.RecordType									 = "C"
							invoked.Status 	 									 = 1
							invoked.Reference                                    = PrmReference
							invoked.PostDate									 = GeneralLedgerPostDate
							invoked.Description									 = EFTPaymentMessage 
							invoked.GLFinanceCodeBlock							 = CompanyCashCode.ElectronicPaymentAccount
							invoked.TransactionNumber                            = TransactionNumber
							invoked.GeneralLedgerSourceCode						 = "CL"
							invoked.GLBaseAmount					 		 	 = GainLossCalculation.GainAmount
							invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
							invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
							invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
							invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
							invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType

						NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount 
						LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
						invoke CreateGainLossDistrib CashLedgerGLDistribution
							fill in fields from CashLedgerTransaction
							invoked.CashManagementGroup							 = CashManagementGroup
							invoked.CashCode									 = CashCode
							invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerTransaction.BankTransactionCode
							invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerTransaction
							invoked.CashLedgerGLDistribution.DistributionType    = "E"
							invoked.Company                                      = Company.OrigCompany
							invoked.RecordType									 = "C"
							invoked.Status 	 									 = 1
							invoked.Reference                                    = PrmReference
							invoked.PostDate									 = GeneralLedgerPostDate
							invoked.Description									 = RealizedCurrencyGainMessage 
							invoked.GLFinanceCodeBlock							 = GainLossCalculation.GainAccount
							invoked.TransactionNumber                            = TransactionNumber
							invoked.GeneralLedgerSourceCode						 = "CL"
							invoked.GLBaseAmount					 		 	 = NegativeFinanceCurrencyAmount
							invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
							invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
							invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
							invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
							invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType
					if (GainLossCalculation.AmountType.Negative
					or  GainLossCalculation.AmountType.NegativeAndPositive)

						invoke CreateGainLossDistrib CashLedgerGLDistribution
							fill in fields from CashLedgerTransaction
							invoked.CashManagementGroup							 = CashManagementGroup
							invoked.CashCode									 = CashCode
							invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerTransaction.BankTransactionCode
							invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerTransaction
							invoked.CashLedgerGLDistribution.DistributionType    = "E"
							invoked.Company                                      = Company.OrigCompany
							invoked.RecordType									 = "C"
							invoked.Status 	 									 = 1
							invoked.Reference                                    = PrmReference
							invoked.PostDate									 = GeneralLedgerPostDate
							invoked.Description									 = EFTPaymentMessage 
							invoked.GLFinanceCodeBlock							 = CompanyCashCode.ElectronicPaymentAccount
							invoked.TransactionNumber                            = TransactionNumber
							invoked.GeneralLedgerSourceCode						 = "CL"
							invoked.GLBaseAmount					 		 	 = GainLossCalculation.LossAmount
							invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
							invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
							invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
							invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
							invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType

						NegativeFinanceCurrencyAmount = GainLossCalculation.LossAmount 
						LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
						invoke CreateGainLossDistrib CashLedgerGLDistribution
							fill in fields from CashLedgerTransaction
							invoked.CashManagementGroup							 = CashManagementGroup
							invoked.CashCode									 = CashCode
							invoked.CashLedgerGLDistribution.BankTransactionCode = CashLedgerTransaction.BankTransactionCode
							invoked.CashLedgerGLDistribution.TransactionIDNumber = CashLedgerTransaction
							invoked.CashLedgerGLDistribution.DistributionType    = "E"
							invoked.Company                                      = Company.OrigCompany
							invoked.RecordType									 = "C"
							invoked.Status 	 									 = 1
							invoked.Reference                                    = PrmReference
							invoked.PostDate									 = GeneralLedgerPostDate
							invoked.Description									 = RealizedCurrencyLossMessage 
							invoked.GLFinanceCodeBlock							 = GainLossCalculation.LossAccount
							invoked.TransactionNumber                            = TransactionNumber
							invoked.GeneralLedgerSourceCode						 = "CL"
							invoked.GLBaseAmount					 		 	 = NegativeFinanceCurrencyAmount
							invoked.BaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
							invoked.ToBaseCurrencyNumberOfDecimals				 = BaseCurrencyNumberOfDecimals
							invoked.TransactionCurrencyNumberOfDecimals			 = BankAccountCurrencyNumberOfDecimals
							invoked.ToTransactionCurrencyNumberOfDecimals		 = BankAccountCurrencyNumberOfDecimals
							invoked.TransientCreateFromBatchType				 = PrmCreateFromBatchType


		ReleaseExitRules

			if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
				invoke UpdateToReleased GLCommit
					invoked.PrmFinanceEnterpriseGroup	= CashManagementGroup
					if (AmendedDistributions and IsCashLedgerPayment)
						invoked.PrmUniqueID					= CashLedgerPaymentOTORel.UniqueID
					else
						invoked.PrmUniqueID					= UniqueID
					invoked.PrmAccountingEntity			= Company.OrigCompany.AccountingEntity



		PerformBudgetEditsForApprovalOrRelease






			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
			and  GLCommitRelExists)
				BudgetEditProcessing = BudgetEditProcessing.InProcess
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel
				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    								= CashManagementGroup
					invoked.PrmBudgetEditGroup           								= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBTran.BankTransactionCode 		= BankTransactionCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBTran.CashLedgerSourceRecord 	= CashLedgerSourceRecord
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBTran.CashLedgerTransaction	= CashLedgerTransaction
					invoked.PrmBusinessClassName  					              					= "CashLedgerTransaction"	
					if (LocalActionUnreleaseToRelease)
						invoked.PrmActionCode											= "R"  
						invoked.PrmEditContext                      					= "Release"	
						if  (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						and  !BypassBudgetEditing) 
							invoked.PrmMode												= BudgetEditMode.Hard
						else
							invoked.PrmMode												= BudgetEditMode.UpdateOnly
					else
					if (LocalActionSubmitForApproval)
						invoked.PrmActionCode											= "A" 	
						invoked.PrmEditContext                      					= "SubmitForApproval"	
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)
							invoked.PrmMode												= BudgetEditMode.Hard
						else
							invoked.PrmMode												= BudgetEditMode.UpdateOnly
					if (initiating action	= "CashLedgerTransactionImport.InterfaceCashLedgerTransactions")	
						invoked.PrmIsBatch	= true
			else
				BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
				if (LocalActionUnreleaseToRelease)
					invoke FinalRelease
				else
				if (LocalActionSubmitForApproval)
					invoke FinalApproval


		PerformBudgetEditsForVoids	

			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
			and  GLCommitRelExists)
 				BudgetEditProcessing = BudgetEditProcessing.InProcess
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel
				invoke EditTotalsRoute BudgetTemplateGroupTotal
					invoked.PrmFinanceEnterpriseGroup    											= CashManagementGroup
					invoked.PrmBudgetEditGroup           											= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBTran.BankTransactionCode 		= BankTransactionCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBTran.CashLedgerSourceRecord 	= CashLedgerSourceRecord
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBTran.CashLedgerTransaction	= CashLedgerTransaction
					invoked.PrmActionCode															= "V"	
					invoked.PrmMode																	= BudgetEditMode.UpdateOnly
					invoked.PrmBusinessClassName													= "CashLedgerTransaction"	
					invoked.PrmEditContext															= "VoidOrStopPay"			//IEFIN-87517	"Void"	
					if (initiating action	= "CashLedgerTransactionImport.InterfaceCashLedgerTransactions")	
						invoked.PrmIsBatch	= true
				invoke UpdateToReleased GLCommit								
					invoked.PrmFinanceEnterpriseGroup	= CashManagementGroup
					invoked.PrmUniqueID					= UniqueID
					invoked.PrmAccountingEntity			= Company.OrigCompany.AccountingEntity

		RejectBudgetCommitments		
			if ((GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
			or   GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
			and  GLCommitRelExists)
				invoke RejectInvoice GLCommit
					invoked.PrmFinanceEnterpriseGroup	= CashManagementGroup
					invoked.PrmUniqueID					= UniqueID
					invoked.PrmAccountingEntity			= Company.OrigCompany.AccountingEntity
					invoked.PrmEditContext				= "RejectCashLedgerTransaction"					
						


		PerformFundAmountEdit

			invoke Delete CashCodeFundEditRel
			for each GLEntryDistributionsUnreleasedRel             
				initialize LocalCalculateCashFinanceStructure
				LocalCalculateCashFinanceStructure.InputCashManagementGroup				= each.CashManagementGroup
				LocalCalculateCashFinanceStructure.InputCashCode						= each.CashCode
				LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= each.CashLedgerSourceRecord
				LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= each.CashLedgerGLDistribution
				LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= each.CashLedgerGLDistribution.GLFinanceCodeBlock
				LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.CashCodeDistribution
				if (CompanyCashCode.ReconcileGeneralLedgerEntry
				and BankTransactionCode.AutomaticReconciliation
				and CreatedFromBankStatementLine !entered)
					LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= CompanyCashCode.ReconciliationAccount
				else
					LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= CompanyCashCode.CashAccount
				LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

				LocalToAccountingEntity		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
				if (CashManagementGroup.FinanceEnterpriseGroup.FundDimension.AccountingUnit)
					LocalAccountingUnit			= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.AccountingUnit
				else
					LocalFinanceDimension1		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.FinanceDimension1

				if (CashCode.EditAvailableFunds)
					invoke Update CashCodeFundEditByFundRel
						invoked.EditAmount += each.GLTransactionAmount
				else
					if (CashCodeFundRel !exists)
						invoke Update CashCodeFundEditByFundRel
								




#ifdef module cam
		PerformCustodialAmountEdit			
			invoke Delete CustodialAccountEditRel
			for each GLEntryDistributionsUnreleasedRel            
				initialize LocalCalculateCashFinanceStructure
				LocalCalculateCashFinanceStructure.InputCashManagementGroup				= each.CashManagementGroup
				LocalCalculateCashFinanceStructure.InputCashCode						= each.CashCode
				LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= each.CashLedgerSourceRecord
				LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= each.CashLedgerGLDistribution
				LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= each.CashLedgerGLDistribution.GLFinanceCodeBlock
				LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.CashCodeDistribution
				if (CompanyCashCode.ReconcileGeneralLedgerEntry
				and BankTransactionCode.AutomaticReconciliation
				and CreatedFromBankStatementLine !entered)
					LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= CompanyCashCode.ReconciliationAccount
				else
					LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= CompanyCashCode.CashAccount
				LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

				LocalToAccountingEntity		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.ToAccountingEntity
				LocalFinanceDimension10		= LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock.FinanceDimension10

				if (LocalFinanceDimension10 entered)
					invoke Update CustodialAccountEditByPostingRel
						invoked.EditAmount += each.GLTransactionAmount
#endif

		GetAutoNumberByLevel
			if (CashManagementGroup.AutoTranNumberByCompany)
				AutoNumberByCompany 				= Company
			else
			if (CashManagementGroup.AutoTranNumberByCashCode)
				AutoNumberByCashCode				= CashCode
			else
			if (CashManagementGroup.AutoTranNumberByBankTransactionCode)
				AutoNumberByBankTransactionCode		= BankTransactionCode
			else
			if (CashManagementGroup.AutoTranNumberByCashCodeBankTranCode)
				AutoNumberByCashCode				= CashCode
				AutoNumberByBankTransactionCode		= BankTransactionCode

		StripLeadingSpaces	
			while (TransactionNumber[1:1] = blank)
				TransactionNumber = TransactionNumber[2:22]

		CheckForDuplicates
			constraint (first CashLedgerTransactionsRel not exists)
				"TransactionAlreadyExists"	
			if (CashCode.BankAccountNumber.EditDuplicatesByAccount)				
				constraint (CashLedgerTransactionsByAccountRel not exists)
					"TransactionNumberAlreadyExistsForCashCode<first CashLedgerTransactionsByAccountRel.CashCode>"
			if (CashLedgerFundTransferHeaderRel exists)
				constraint (CashLedgerFundTransferHeaderRel.BankTransactionCode != BankTransactionCode)
					"TransactionNumberAlreadyInUseAsBankFundsTransfer"	
			constraint (first CashLedgerFundTransferDetailsRel not exists)
				"TransactionNumberAlreadyInUseAsBankFundsTransfer"		
			constraint (CashLedgerCashReceiptHeaderRel not exists)
				"TransactionNumberAlreadyInUseAsCashReceiptDeposit"		
			constraint (first CashLedgerPayablesPaymentsByTranNbrRel not exists)
				"TransactionNumberAlreadyInUseByAccountsPayable"		

		CheckForCLTPayeeData	
			if (PayablesCompanyVendorProcLevel.PayablesCompany.VendorGroup entered)	
				LocalVendorGroup		= PayablesCompanyVendorProcLevel.PayablesCompany.VendorGroup
			if (PayablesCompanyVendorProcLevel.Vendor entered)
				LocalVendor				= PayablesCompanyVendorProcLevel.Vendor
			if (PayeeName entered)
				LocalVendorName 		= PayeeName
				LocalVendorLegalName	= PayeeName
			if (PayeePostalAddress entered)
				LocalVendorAddress 		= PayeePostalAddress
			if (PayeePostalAddress.StateProvince entered)
				LocalStateProvince 		= PayeePostalAddress.StateProvince
			if (PayeeFirstName entered)						
				LocalFirstName     		= PayeeFirstName	
			if (PayeeMiddleName entered)					
				LocalMiddleName     	= PayeeMiddleName	
			
		GetCBPaymentPayeeData	
			if (LocalVendorGroup 	not entered)
				LocalVendorGroup	= CashLedgerPaymentOTORel.PayablesData.PayablesCompany.VendorGroup
			if (LocalVendor 		not entered)
				LocalVendor			= CashLedgerPaymentOTORel.PayablesData.Vendor
			if (LocalVendorName 	not entered)
				LocalVendorName     = CashLedgerPaymentOTORel.PayeeName
			if (LocalVendorAddress	not entered)
				LocalVendorAddress	= CashLedgerPaymentOTORel.PayeePostalAddress
			if (LocalStateProvince	not entered)
				LocalStateProvince	= CashLedgerPaymentOTORel.PayeePostalAddress.StateProvince
			if (LocalFirstName		not entered)								
				LocalFirstName     	= CashLedgerPaymentOTORel.PayeeFirstName	
			if (LocalMiddleName		not entered)								
				LocalMiddleName     = CashLedgerPaymentOTORel.PayeeMiddleName	

		GetPayablesVendorData	
			if (LocalVendorGroup 	not entered	
			or	LocalVendor 		not entered
			or	LocalVendorName 	not entered
			or	LocalVendorAddress	not entered
			or	LocalStateProvince	not entered)
				if (PayablesInvoicePaymentRel exists)
					if (LocalVendorGroup 	not entered)
						LocalVendorGroup		= first PayablesInvoicePaymentRel.Company.VendorGroup
					if (LocalVendor		 	not entered)
						LocalVendor         	= first PayablesInvoicePaymentRel.PayVendor
					if (LocalVendorName 	not entered
					or	LocalVendorAddress	not entered
					or	LocalStateProvince	not entered)
						LocalVendorLocation 	= first PayablesInvoicePaymentRel.RemitToCode
						if (LocalVendorLocation entered)
							if (LocalVendorName 	not entered)
								LocalVendorName 	= VendorLocationRel.VendorName
							if (LocalVendorAddress 	not entered)
								LocalVendorAddress	= VendorLocationRel.CurrentAddressRel.PostalAddress
							if (LocalStateProvince	not entered)
								LocalStateProvince	= VendorLocationRel.CurrentAddressRel.PostalAddress.StateProvince	
						else
							if (LocalVendorName 	not entered)
								LocalVendorName		= VendorRel.VendorName
							if (LocalVendorAddress 	not entered)
								LocalVendorAddress	= VendorRel.CurrentAddressRel.PostalAddress
							if (LocalStateProvince	not entered)
								LocalStateProvince	= VendorRel.CurrentAddressRel.PostalAddress.StateProvince
						if (LocalVendorName 	not entered)
							LocalVendorLegalName 	= VendorRel.LegalName
				else
					if (PayablesInvoicePaymentHistoryRel exists)
						if (LocalVendorGroup 	not entered)
							LocalVendorGroup    	= first PayablesInvoicePaymentHistoryRel.Company.VendorGroup
						if (LocalVendor		 	not entered)
							LocalVendor         	= first PayablesInvoicePaymentHistoryRel.PayVendor
						if (LocalVendorName 	not entered
						or	LocalVendorAddress	not entered
						or	LocalStateProvince	not entered)
							LocalVendorLocation 	= first PayablesInvoicePaymentHistoryRel.RemitToCode
							if (LocalVendorLocation entered)
								if (LocalVendorName 	not entered)
									LocalVendorName 	= VendorLocationRel.VendorName
								if (LocalVendorAddress 	not entered)
									LocalVendorAddress	= VendorLocationRel.CurrentAddressRel.PostalAddress
								if (LocalStateProvince	not entered)
									LocalStateProvince	= VendorLocationRel.CurrentAddressRel.PostalAddress.StateProvince
							else
								if (LocalVendorName 	not entered)
									LocalVendorName		= VendorRel.VendorName
								if (LocalVendorAddress 	not entered)
									LocalVendorAddress	= VendorRel.CurrentAddressRel.PostalAddress
								if (LocalStateProvince	not entered)
									LocalStateProvince	= VendorRel.CurrentAddressRel.PostalAddress.StateProvince
							if (LocalVendorName 	not entered)
								LocalVendorLegalName 	= VendorRel.LegalName
					else
						if (LocalVendorGroup 	not entered)
							LocalVendorGroup		= PayablesCompanyVendorProcLevel.PayablesCompany.VendorGroup
						if (LocalVendor 		not entered)
							LocalVendor				= PayablesCompanyVendorProcLevel.Vendor
						if (LocalVendorName 	not entered)
							LocalVendorName			= Description
							LocalVendorLegalName	= Description

		StaleDateProcessingEdits	
			initialize LocalStaleDateAccount
			initialize LocalTransactionErrorFound	
			if (CBCompanySystemClosingControlRel.Control
			and PrmPostDate not within CBCompanySystemClosingControlRel.ValidEntryDate)
				LocalTransactionErrorFound	= true
				invoke Create CashLedgerTransactionError 
					fill in fields from this instance
						except invoked.CashLedgerMassReleaseResult
					invoked.StaleDateOutputFileHeader	= LocalStaleDateOutputFileHeaderView.StaleDateOutputFileHeader
					invoked.ErrorLevel					= 1		
					invoked.ErrorClass					= 3		
					invoked.ErrorType					= 15	
					invoked.ErrorSource					= 1		
			if (IsUnreleasedCashLedgerReconciliationAdjustmentExist)
				LocalTransactionErrorFound	= true
				invoke Create CashLedgerTransactionError 
					fill in fields from this instance
						except invoked.CashLedgerMassReleaseResult
					invoked.StaleDateOutputFileHeader	= LocalStaleDateOutputFileHeaderView.StaleDateOutputFileHeader
					invoked.ErrorLevel					= 1		
					invoked.ErrorClass					= 3		
					invoked.ErrorType					= 1		
					invoked.ErrorSource					= 1		
			if (TransactionMatchedToBankStatement)
				LocalTransactionErrorFound	= true
				invoke Create CashLedgerTransactionError 
					fill in fields from this instance
						except invoked.CashLedgerMassReleaseResult
					invoked.StaleDateOutputFileHeader	= LocalStaleDateOutputFileHeaderView.StaleDateOutputFileHeader
					invoked.ErrorLevel					= 1		
					invoked.ErrorClass					= 3		
					invoked.ErrorType					= 4		
					invoked.ErrorSource					= 1		
			if (Status.Open)
				if (PayablesCompanyVendorProcLevel.PayablesProcessLevel entered)
					if (StaleDatingGLAccountByProcessLevelRel.StaleDateAccount entered)
						LocalStaleDateAccount	= StaleDatingGLAccountByProcessLevelRel.StaleDateAccount
						if (LocalStaleDateAccount.Project entered)	
							include StaleDateAccountProjectEdits		
					else
						LocalTransactionErrorFound = true
						invoke Create CashLedgerTransactionError 
							fill in fields from this instance
								except invoked.CashLedgerMassReleaseResult
							invoked.StaleDateOutputFileHeader	= LocalStaleDateOutputFileHeaderView.StaleDateOutputFileHeader
							invoked.ErrorLevel					= 1		
							invoked.ErrorClass					= 1		
							invoked.ErrorType					= 3		
							invoked.ErrorSource					= 1		
				else
					if (StaleDatingGLAccountRel.StaleDateAccount entered)
						LocalStaleDateAccount	= StaleDatingGLAccountRel.StaleDateAccount
						if (LocalStaleDateAccount.Project entered)	
							include StaleDateAccountProjectEdits		
					else
						LocalTransactionErrorFound = true
						invoke Create CashLedgerTransactionError 
							fill in fields from this instance
								except invoked.CashLedgerMassReleaseResult
							invoked.StaleDateOutputFileHeader	= LocalStaleDateOutputFileHeaderView.StaleDateOutputFileHeader
							invoked.ErrorLevel					= 1		
							invoked.ErrorClass					= 1		
							invoked.ErrorType					= 2		
							invoked.ErrorSource					= 1		
					

		EscheatmentProcessingEdits	
			initialize LocalEscheatmentAccount
			initialize LocalTransactionErrorFound			
			if (CBCompanySystemClosingControlRel.Control
			and PrmPostDate not within CBCompanySystemClosingControlRel.ValidEntryDate)
				LocalTransactionErrorFound	= true
				invoke Create CashLedgerTransactionError 
					fill in fields from this instance
						except invoked.CashLedgerMassReleaseResult
					invoked.EscheatmentOutputFileHeader	= LocalEscheatmentOutputFileHeaderView.EscheatmentOutputFileHeader
					invoked.ErrorLevel					= 1		
					invoked.ErrorClass					= 3		
					invoked.ErrorType					= 15	
					invoked.ErrorSource					= 2		
			if (PayablesCompanyVendorProcLevel.PayablesProcessLevel entered)
				if (StaleDatingGLAccountByProcessLevelRel.EscheatmentAccount entered)
					LocalEscheatmentAccount	= StaleDatingGLAccountByProcessLevelRel.EscheatmentAccount
					if (LocalEscheatmentAccount.Project entered)	
						include EscheatmentAccountProjectEdits	
				else
					LocalTransactionErrorFound = true
					invoke Create CashLedgerTransactionError 
						fill in fields from this instance
							except invoked.CashLedgerMassReleaseResult
						invoked.EscheatmentOutputFileHeader	= LocalEscheatmentOutputFileHeaderView.EscheatmentOutputFileHeader
						invoked.ErrorLevel					= 1		
						invoked.ErrorClass					= 1		
						invoked.ErrorType					= 7		
						invoked.ErrorSource					= 2		
			else
				if (StaleDatingGLAccountRel.EscheatmentAccount entered)
					LocalEscheatmentAccount	= StaleDatingGLAccountRel.EscheatmentAccount
					if (LocalEscheatmentAccount.Project entered)	
						include EscheatmentAccountProjectEdits	
				else
					LocalTransactionErrorFound = true
					invoke Create CashLedgerTransactionError 
						fill in fields from this instance
							except invoked.CashLedgerMassReleaseResult
						invoked.EscheatmentOutputFileHeader	= LocalEscheatmentOutputFileHeaderView.EscheatmentOutputFileHeader
						invoked.ErrorLevel					= 1		
						invoked.ErrorClass					= 1		
						invoked.ErrorType					= 6		
						invoked.ErrorSource					= 2		
					
		StaleDateAccountProjectEdits	
			initialize LocalPeriodOfPerformanceProject
			initialize LocalPeriodOfPerformanceSystem
			initialize LocalDateRange
			if (LocalStaleDateAccount.Project.HasPeriodOfPerformance)
				LocalPeriodOfPerformanceProject	= LocalStaleDateAccount.Project
				LocalPeriodOfPerformanceSystem	= SourceCode	
				LocalDateRange.Begin			= ProjectPeriodOfPerformanceRel.ProjectBeginDate
				LocalDateRange.End				= ProjectPeriodOfPerformanceRel.ProjectEndDate
			if (!LocalDateRange entered)
				LocalDateRange.Begin			= LocalStaleDateAccount.Project.ProjectDateRange.BeginDate
				LocalDateRange.End				= LocalStaleDateAccount.Project.ProjectDateRange.EndDate
			if (CashManagementGroup.ProjectDateEdit.TransactionDate
			and IssueDate not within LocalDateRange)
				LocalTransactionErrorFound = true
    	   		invoke Create CashLedgerTransactionError 
    	   			fill in fields from this instance
    	   				except invoked.CashLedgerMassReleaseResult
    	   			invoked.StaleDateOutputFileHeader	= LocalStaleDateOutputFileHeaderView.StaleDateOutputFileHeader
					invoked.ErrorLevel					= 1		
					invoked.ErrorClass					= 2		
					invoked.ErrorType					= 10	
					invoked.ErrorSource					= 1		
			if (CashManagementGroup.ProjectDateEdit.PostingDate
			and GeneralLedgerPostDate not within LocalDateRange)				
				LocalTransactionErrorFound = true
    	   		invoke Create CashLedgerTransactionError 
    	   			fill in fields from this instance
    	   				except invoked.CashLedgerMassReleaseResult
    	   			invoked.StaleDateOutputFileHeader	= LocalStaleDateOutputFileHeaderView.StaleDateOutputFileHeader
					invoked.ErrorLevel					= 1		
					invoked.ErrorClass					= 2		
					invoked.ErrorType					= 11	
					invoked.ErrorSource					= 1		

		EscheatmentAccountProjectEdits	
			initialize LocalPeriodOfPerformanceProject
			initialize LocalPeriodOfPerformanceSystem
			initialize LocalDateRange
			if (LocalEscheatmentAccount.Project.HasPeriodOfPerformance)
				LocalPeriodOfPerformanceProject	= LocalEscheatmentAccount.Project
				LocalPeriodOfPerformanceSystem	= SourceCode	
				LocalDateRange.Begin			= ProjectPeriodOfPerformanceRel.ProjectBeginDate
				LocalDateRange.End				= ProjectPeriodOfPerformanceRel.ProjectEndDate
			if (!LocalDateRange entered)
				LocalDateRange.Begin			= LocalEscheatmentAccount.Project.ProjectDateRange.BeginDate
				LocalDateRange.End				= LocalEscheatmentAccount.Project.ProjectDateRange.EndDate
			if (CashManagementGroup.ProjectDateEdit.TransactionDate
			and IssueDate not within LocalDateRange)
				LocalTransactionErrorFound = true
    	   		invoke Create CashLedgerTransactionError 
    	   			fill in fields from this instance
    	   				except invoked.CashLedgerMassReleaseResult
    	   			invoked.EscheatmentOutputFileHeader	= LocalEscheatmentOutputFileHeaderView.EscheatmentOutputFileHeader
					invoked.ErrorLevel					= 1		
					invoked.ErrorClass					= 2		
					invoked.ErrorType					= 11	
					invoked.ErrorSource					= 2		
			if (CashManagementGroup.ProjectDateEdit.PostingDate
			and GeneralLedgerPostDate not within LocalDateRange)					
				LocalTransactionErrorFound = true
    	   		invoke Create CashLedgerTransactionError 
    	   			fill in fields from this instance
    	   				except invoked.CashLedgerMassReleaseResult
    	   			invoked.EscheatmentOutputFileHeader	= LocalEscheatmentOutputFileHeaderView.EscheatmentOutputFileHeader
					invoked.ErrorLevel					= 1		
					invoked.ErrorClass					= 2		
					invoked.ErrorType					= 12	
					invoked.ErrorSource					= 2		
												
		ResetLocalFieldsForRelease	
			LocalActionUnreleaseToRelease	= true
			if (ImportStatus entered)
				if (ImportStatus.Void
				or  SourceCode = "AP")
					LocalBypassRules = true	 
			LocalJournalizeGroup = first CashLedgerGLDistributionsRel.GLTransactionDetailRel.JournalizeGroup

		ResetLocalFieldsForApproval	
			LocalActionSubmitForApproval = true
			
		CashAllocationCodeEdits	
			if (TransientCashAllocationCode entered)
				if (TransientCashAllocationCode.AllocationType.Amount)
					constraint (TransientCashAllocationAmount not entered)
						"AllocationCodeIsAnAmountType;CannotEnterAnAmount"
				if (TransientCashAllocationCode.AllocationType.AccountOnly
				or  TransientCashAllocationCode.AllocationType.Percent)
					constraint (TransientCashAllocationAmount entered)
						"AllocationCodeRequiresAnAmount"
			else
				if (TransientCashAllocationAmount entered)
					constraint (TransientCashAllocationCode entered)
						"AllocationAmountRequiresAnAllocationCode"	

		CalculateStaleDateFundStructure
			initialize LocalCalculateCashFinanceStructure
			LocalCalculateCashFinanceStructure.InputCashManagementGroup				= each.CashManagementGroup
			LocalCalculateCashFinanceStructure.InputCashCode						= each.CashCode
			LocalCalculateCashFinanceStructure.InputCashLedgerSourceRecord			= each.CashLedgerSourceRecord
			LocalCalculateCashFinanceStructure.InputCashLedgerGLDistribution		= each.CashLedgerGLDistribution
			LocalCalculateCashFinanceStructure.InputGLFinanceCodeBlock				= each.CashLedgerGLDistribution.GLFinanceCodeBlock
			LocalCalculateCashFinanceStructure.InputCashLedgerFinanceStructureType	= CashLedgerFinanceStructureType.StaleDateDistributions
			if (LocalStaleDateAccount	entered)
				LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= LocalStaleDateAccount
			else
				LocalCalculateCashFinanceStructure.InputFinanceCodeBlock			= LocalEscheatmentAccount
			LocalAnswer = LocalCalculateCashFinanceStructure.CalculateCashFinanceStructure

			LocalGLFinanceCodeBlock = LocalCalculateCashFinanceStructure.OutputFinanceCodeBlock	

	Derived Fields

		NumberOfDaysSinceIssued is a ComputeField
			type is Numeric 3
			restricted
			(current corporate date - IssueDate)

		DerivedOver60Days is a DerivedField
			type is Numeric 3
			restricted
			return 60

		ComputeOver60Days is a ComputeField
			type is Date
			restricted
			(IssueDate - DerivedOver60Days)

		BalanceAmount is a DerivedField
			type is like InternationalAmount
			return  IssuedBankAmount - AppliedDistributionBankAmount

		BankSign      is a ConditionalField
			type is Decimal size 1
			if (IsBankTransactionDebitType)
				-1
			else
				1

		RptIssueAmt   is a DerivedField
			type is like InternationalAmount
			return (IssuedBankAmount * BankSign)

		RptReconAmt   is a DerivedField
			type is like InternationalAmount
			restricted
			return (ReconciliationData.CurrencyAmount * BankSign)

		DrillDownSts  is a ConditionalField
			type is Alpha size 5
			restricted
			if (IsUnreleased2)
				"Unrel"
			else
			if (IsOpen)
				"Open"
			else
			if (IsReconciled)
				"Recon"
			else
			if (IsVoid)
				"Void"
			else
			if (IsStopPayment)
				"Stop"
			else
				blank

		ReconVariance is a ConditionalField
			type is AlphaUpper size 4
			restricted
			if (IsReconciledVariance)
				"*"
			else
				blank

		UnreleasedAdjustmentExistsIndicator is a ConditionalField
			type is Alpha size 1
			if (IsUnreleasedCashLedgerReconciliationAdjustmentExist)
				"*"
			else
				blank

		DerivedBankDifferenceAmount 		is a DerivedField
			type is like InternationalAmount
			return (ReconciliationData.CurrencyAmount - IssuedBankAmount)

		DerivedReconcileDateMessage 		is a DerivedField
			type is Alpha size 30
			return ReconcileDateMessage

		ReconcileDateMessage				is a MessageField
			restricted
			"<Status>Date"

		DerivedVarianceExistsMessage		is a DerivedField
			type is Alpha size 30
			if (DerivedBankDifferenceAmount != 0)		
				return VarianceExistsMessage
			return CurrencyVarianceExistsMessage		

		VarianceExistsMessage				is a MessageField
			restricted
			"VarianceOf<DerivedBankDifferenceAmount>Exists"

		CurrencyVarianceExistsMessage		is a MessageField		
			restricted
			"CurrencyVarianceExists"

		ShortPayee is a StringField
			type is Alpha size 20
			restricted
			Description

		GreaterThan	is a StringField
			type is AlphaRight size 01
			restricted
			">"
		LessThan	is a StringField
			type is AlphaRight size 01
			restricted
			"<"

		TransactionUpdatedMessage				is a MessageField
			restricted
			"CashLedgerTransactionUpdated"

		TransactionCreatedMessage				is a MessageField
			restricted
			"CashLedgerTransactionCreated"

		TransactionOutOfBalanceMessage			is a MessageField
			restricted
			"ActionComplete,TransactionIsOutOfBalance"   

		StatementLineOverAppliedMessage			is a MessageField
			restricted
			"StatementLineOverAppliedAmountAdjustmentsRequired"

		ReconciliationEntryMessage				is a MessageField
			restricted
			"ReconciliationEntry"

		BankTransactionAdjustmentMessage		is a MessageField
			restricted
			"BankTransactionAdjustment"

		ReconciliationOutOfToleranceMessage		is a MessageField
			restricted
			"CannotReconcile;AmountOutOfTolerance.MakeAdjustmentInCashLedgerReconciliationAdjustment"	

		ActionCompleteMessage					is a MessageField
			restricted
			"ActionComplete"

		NumberOfTransactionsByStatus is a ComputeField
			type is Numeric 4
			restricted
			(instance count of TransactionsByStatusRel)

		IsFirstTransactionsByStatus is a ConditionalField
			type is Boolean
			restricted
			if (first TransactionsByStatusRel.Status					= Status
			and first TransactionsByStatusRel.BankTransactionCode		= BankTransactionCode
			and first TransactionsByStatusRel.CashLedgerTransaction	= CashLedgerTransaction)
				true
			else
				false

		DerivedRoundTo is a DerivedField 
			type is Decimal 5.4
			restricted
			if (TransactionCurrencyNumberOfDecimals= 2)
				return .01
			else
			if (TransactionCurrencyNumberOfDecimals= 0)
				return 1
			else
			if (TransactionCurrencyNumberOfDecimals= 3)
				return .001
			else
			if (TransactionCurrencyNumberOfDecimals= 4)
				return .0001
		
		DerivedPlainTextComment   is a DerivedField  
		    type is Text
		    return CommentText plain text
				
		TransactionOffsetBackgroundDistQty is a DerivedField	
			type is Numeric 4
			restricted
			if (config.CLTOffsetBackgroundDistQuantity > 50)
				return config.CLTOffsetBackgroundDistQuantity
			return 50


		DerivedNextApprovalLevel is a DerivedField
			type is Numeric 8
			restricted
			LocalApprovalLevel = ApprovalLevel
			include GetNextApprovalLevel
			return LocalApprovalLevel

		DerivedCurrentApprovalResource is a DerivedField
			type is like FinanceResource
			restricted
			return first CurrentApprovalCodeLevelRel.Approver

		DerivedCurrentApprovalActor is a DerivedField
			type is Actor
			restricted
			return first CurrentApprovalCodeLevelRel.Approver.FinanceResourceActor

		DerivedCurrentApprovalTeam is a DerivedField
			type is like FinanceTeam
			restricted
			return first CurrentApprovalCodeLevelRel.ApprovalTeam

		DerivedCurrentTeamActorList is a DerivedField
			type is Alpha 250
			restricted
			include BuildTeamApproverActorList
			return LocalApproverList

		DerivedCurrentApproverEscalationDays is a DerivedField
			type is Numeric 6
			restricted
			if (first CurrentApprovalCodeLevelRel.EscalationDays > 0)
				return first CurrentApprovalCodeLevelRel.EscalationDays	
			else
				return 10000

		DerivedCurrentApproverEscalationHours is a DerivedField
			type is Decimal 6.2
			restricted
			if (first CurrentApprovalCodeLevelRel.EscalationHours > 0)
				return first CurrentApprovalCodeLevelRel.EscalationHours
			else
				return 9999.99

		DisplayCurrentApproverDesc is a ConditionalField
			type is Alpha 100
			restricted
			if (Approver entered)
				Approver.PreferredSimplePresentationName
			else
				ApproverTeam.FinanceTeam.Description

		DerivedReceivablePaymentHeader is a StringField
			type is Alpha size 12
			restricted
			TransactionNumber[4:15]

		StatusAsOfSearchOption is a DerivedField	
			type is Boolean
			restricted
			if (PrmStatusAsOfDate entered)
				if (IssueDate > PrmStatusAsOfDate)
					return false
				if (PrmTransStatus.Open)
					if (ReconciliationData.ExchangeDate <= PrmStatusAsOfDate
					and !Status.Open)
						return false
					if (ReconciliationData.ExchangeDate > PrmStatusAsOfDate)
						if (StaleDate entered
						and StaleDate <= PrmStatusAsOfDate)
							return false
				if (PrmTransStatus.Reconciled)
					if (ReconciliationData.ExchangeDate > PrmStatusAsOfDate
					or  !Status.Reconciled)
						return false
				if (PrmTransStatus.Voided)
					if (ReconciliationData.ExchangeDate > PrmStatusAsOfDate
					or  !Status.Voided)
						return false
				if (PrmTransStatus.StopPayment)
					if (ReconciliationData.ExchangeDate > PrmStatusAsOfDate
					or  !Status.StopPayment)
						return false
				if (PrmTransStatus.StaleDated)
					if (StaleDate not entered)
						return false
					if (StaleDate = ReconciliationData.ExchangeDate
					and !Status.StaleDated)
						return false
					if  (PrmStatusAsOfDate >= StaleDate
					and (ReconciliationData.ExchangeDate <= StaleDate
					or 	 ReconciliationData.ExchangeDate > PrmStatusAsOfDate))

						return true
				if (PrmTransStatus.Escheated)
					if (ReconciliationData.ExchangeDate > PrmStatusAsOfDate
					or !Status.Escheated)
						return false
				if (PrmTransStatus.PendingStopPayConfirmation)		
					if (ReconciliationData.ExchangeDate > PrmStatusAsOfDate
					or !Status.PendingStopPayConfirmation)
						return false


















				return true







		StatusAsOfNotEnteredSearchOption is a DerivedField
			type is Boolean
			if (!PrmStatusAsOfDate entered)

				return true

		TransStatusEnteredSearchOption is a DerivedField	
			type is Boolean
			if (PrmTransStatus not entered
			or  PrmTransStatus.All)				
				return true
			if (PrmTransStatus entered)
				if (Status = (PrmTransStatus - 1))
					return true
				else
					return false

		DerivedAppsValue	is a DerivedField
			type is like PfiAppsValue
			return "CashLedgerTransactionApproval" + UniqueID			

		UserActionRoutingAsHtml	is a DerivedField
			type is RichText
			return first PfiWorkunitRel.UserActionRoutingAsHtml


		DerivedHeaderBudgetErrorCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (HeaderBudgetEditErrorExists)
				return "(" + instance count of HeaderBudgetEditErrorRel + ")"
			else
				return ""

		DerivedWarningBudgetErrorCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (DistributionBudgetEditErrorExists)
				return "(" + instance count of DistributionBudgetEditErrorRel + ")"
			else
				return ""

		DerivedTransactionCount is a DerivedField
			type is Numeric 7
			return 1

 		EFTPaymentMessage				is a MessageField
			restricted
			"EFTPayment"

		StaleDatingMessage				is a MessageField
			restricted
			"StaleDating"

		EscheatmentMessage				is a MessageField
			restricted
			"Escheatment"

		CashDisbursementMessage			is a MessageField
			restricted
			"CashDisbursement"

		RealizedCurrencyGainMessage		is a MessageField
			restricted
			"RealizedCurrencyGain"

		RealizedCurrencyLossMessage		is a MessageField
			restricted
			"RealizedCurrencyLoss"

		RealizedCurrencyGainLossMessage	is a MessageField
			restricted
			"RealizedCurrencyGainLoss"

		ReconciliationVarianceMessage	is a MessageField
			restricted
			"ReconciliationVariance"

		VoidStopPayClosedPeriodUpdateMessage	is a MessageField		
			restricted
			"Void/StopPayDateHasBeenUpdatedDueToBeingInAClosedPeriod"

		MyPFIApprovals is a DerivedField
			type is Boolean
			restricted
			for each PfiWorkunitRel
				for each each.PfiMetricsRel
					if (each.PfiMetrics.PfiUserProfile = actor)
						return true 

		DerivedFirstErrorMessage is a DerivedField
			type is Alpha size up to 200
			restricted
			if (HeaderBudgetEditErrorRel exists)
				return MouseOverBudgetErrorMessage
			if (DistributionBudgetEditErrorRel exists)
				return MouseOverBudgetErrorMessage

		MouseOverBudgetErrorMessage is a MessageField
			restricted
			"BudgetErrorsExist;SeeBudgetErrorTabForDetails"

		MassReleaseCompleteMessage is a MessageField
			restricted
			"MassReleaseComplete;SeeResultsRecord"

		DerivedCashLedgerTransactionErrorCount is a DerivedField	
			type is Alpha size up to 20
			restricted
			if (CashLedgerTransactionError set exists)
				return "(" + instance count of CashLedgerTransactionError set + ")"
			else
				return ""

		DerivedStateProvince is a DerivedField
			type is like StateProvince
			restricted
			if (PayeePostalAddress.StateProvince entered)	
				return PayeePostalAddress.StateProvince
			else	
			if (IsCashLedgerPayment)
				return CashLedgerPaymentOTORel.PayeePostalAddress.StateProvince
			else


				if (PayablesInvoicePaymentRel exists)	
					LocalVendorGroup		= first PayablesInvoicePaymentRel.Company.VendorGroup	
	                LocalVendor         	= first PayablesInvoicePaymentRel.PayVendor				
					LocalVendorLocation 	= first PayablesInvoicePaymentRel.RemitToCode
				else
					if (PayablesInvoicePaymentHistoryRel exists)	
						LocalVendorGroup    	= first PayablesInvoicePaymentHistoryRel.Company.VendorGroup	
                		LocalVendor         	= first PayablesInvoicePaymentHistoryRel.PayVendor				
						LocalVendorLocation 	= first PayablesInvoicePaymentHistoryRel.RemitToCode
				if (LocalVendorLocation entered)
					return VendorLocationRel.CurrentAddressRel.PostalAddress.StateProvince
				else
					return VendorRel.CurrentAddressRel.PostalAddress.StateProvince

		ReconcilingBankStatement is a DerivedField
			type is like BankStatement
			return first BankStatementReconciliation set.ReconMatchNumber.BankStatement

		MatchNumber is a DerivedField
			type is like BankStatementReconciliation
			return first BankStatementReconciliation set.ReconMatchNumber

		MatchField is a DerivedField
			type is AlphaUpper 200
			return first BankStatementReconciliation set.ReconMatchNumber.LineMatchField

		DerivedPeriodEndDate	is a DerivedField 
			type is Date
			restricted
			return CurrentGeneralLedgerCalendarPeriodRel.Date

		DerivedPayeeAddressLine1	is a DerivedField	
			type is like AddressLine
			if (PayeePostalAddress entered)
				return PayeePostalAddress.DeliveryAddress.AddressLine1
			if (LocalVendorAddress not entered)
				include CheckForCLTPayeeData
				if (IsCashLedgerPayment)	
				    include GetCBPaymentPayeeData	
				else
				   	include GetPayablesVendorData
			return LocalVendorAddress.DeliveryAddress.AddressLine1   	
			
		DerivedPayeeAddressLine2	is a DerivedField	
			type is like AddressLine
			if (PayeePostalAddress entered)
				return PayeePostalAddress.DeliveryAddress.AddressLine2
			if (LocalVendorAddress not entered)
				include CheckForCLTPayeeData
				if (IsCashLedgerPayment)	
				    include GetCBPaymentPayeeData	
				else
				   	include GetPayablesVendorData
			return LocalVendorAddress.DeliveryAddress.AddressLine2
			
		DerivedPayeeAddressLine3	is a DerivedField	
			type is like AddressLine
			if (PayeePostalAddress entered)
				return PayeePostalAddress.DeliveryAddress.AddressLine3
			if (LocalVendorAddress not entered)
				include CheckForCLTPayeeData
				if (IsCashLedgerPayment)	
				    include GetCBPaymentPayeeData	
				else
				   	include GetPayablesVendorData
			return LocalVendorAddress.DeliveryAddress.AddressLine3

		DerivedPayeeAddressLine4	is a DerivedField	
			type is like AddressLine
			if (PayeePostalAddress entered)
				return PayeePostalAddress.DeliveryAddress.AddressLine4
			if (LocalVendorAddress not entered)
				include CheckForCLTPayeeData
				if (IsCashLedgerPayment)	
				    include GetCBPaymentPayeeData	
				else
				   	include GetPayablesVendorData
			return LocalVendorAddress.DeliveryAddress.AddressLine4
			
		DerivedPayeeAddressMunicipality	is a DerivedField	
			type is like MunicipalityLarge
			if (PayeePostalAddress entered)
				return PayeePostalAddress.Municipality
			if (LocalVendorAddress not entered) 
				include CheckForCLTPayeeData
				if (IsCashLedgerPayment)	
				    include GetCBPaymentPayeeData	
				else
				   	include GetPayablesVendorData
			return LocalVendorAddress.Municipality

		DerivedPayeeAddressState	is a DerivedField	
			type is like StateProvince
			if (PayeePostalAddress entered)
				return PayeePostalAddress.StateProvince
			if (LocalStateProvince not entered)
				include CheckForCLTPayeeData
				if (IsCashLedgerPayment)	
				    include GetCBPaymentPayeeData	
				else
				   	include GetPayablesVendorData
			return LocalStateProvince

		DerivedPayeeAddressPostal	is a DerivedField	
			type is like PostalCode
			if (PayeePostalAddress entered)
				return PayeePostalAddress.PostalCode
			if (LocalVendorAddress not entered)
				include CheckForCLTPayeeData
				if (IsCashLedgerPayment)	
				    include GetCBPaymentPayeeData	
				else
				   	include GetPayablesVendorData
			return LocalVendorAddress.PostalCode   	

		DerivedPayeeAddressCountry	is a DerivedField	
			type is like Country
			if (PayeePostalAddress entered)
				return PayeePostalAddress.Country
			if (LocalVendorAddress not entered)
				include CheckForCLTPayeeData
				if (IsCashLedgerPayment)	
				    include GetCBPaymentPayeeData	
				else
				   	include GetPayablesVendorData
			return LocalVendorAddress.Country   

		DerivedPayeeName is a DerivedField	
			type is like VendorName
			default label is "Name"
			if (PayeeName entered) 				
				return PayeeName
			if (LocalVendorName not entered)	
				include CheckForCLTPayeeData
				if (IsCashLedgerPayment)
				    include GetCBPaymentPayeeData	
				else
				   	include GetPayablesVendorData
			return LocalVendorName   	

		DerivedCLTPayeeName is a DerivedField	
			type is like VendorName
			default label is "PayeeName"
			restricted
			if (PayeeFirstName not entered)
				return PayeeName
			else
				return DerivedPayeeNameStringField
			





						
		DerivedPayeeNameStringField is a StringField	
			type is Alpha 120
			default label is "PayeeName"
			restricted
			PayeeFirstName
			DerivedPayeeMiddleName
			" "
			PayeeName
			
    	DerivedPayeeMiddleName	is a DerivedField		
			type is like MiddleName
			restricted
			return " "+PayeeMiddleName
			
		DerivedDate is a DerivedField	
			type is Date
			if (SearchByStaleDateEscheatStatus.StaleDated)
		    	return StaleDate
			if (SearchByStaleDateEscheatStatus.Escheated)
		    	return ReconciliationData.ExchangeDate
			    	
		ReportDateRangeSearchOption is a DerivedField	
			type is Boolean
			if (SearchByReportDateRange not entered)
				return true
			if (SearchByStaleDateEscheatStatus.StaleDated)
			    if (StaleDate within SearchByReportDateRange)
			    	return true
			if (SearchByStaleDateEscheatStatus.Escheated)
			    if (ReconciliationData.ExchangeDate within SearchByReportDateRange)
			    	return true
			return false

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforCreditTransfer"

		CashManagementContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforCashLedgerTransaction"

		ContextMessageText is a MessageField
			restricted
			"CashLedgerTransaction<CashLedgerTransaction>"

		DerivedIssuedBankAmount is a DerivedField	
        	type is like InternationalAmount
            if (action type.Update					
			and initiating action != "CashLedgerTransactionImport.InterfaceCashLedgerTransactions")	
                return IssuedBankAmountUnsigned
            return IssuedBankAmount

		ApproverLinkback is a MessageField
			restricted
			"<linkback(webapp is Approver navigation is ProcessFlowForm text is \"ViewCashLedgerTransaction\")>"

		CashManagerLinkback is a MessageField
			restricted
			"<linkback(webapp is CashManager navigation is ProcessFlowForm text is \"ViewCashLedgerTransaction\")>"

	Transient Fields
		TransientAccountingEntity					is an AccountingEntity
			derive value from Company.OrigCompany.AccountingEntity
		TransientFromCurrency						is a FromCurrency
			derive value from CashCode.Currency
		CompletionMessage						is Alpha size 150

		IssuedBankAmountUnsigned				is an UnsignedInternationalAmount
			derive value from DerivedIssuedBankAmount	

		CreateFromBatchType						is Numeric 2
			States
				TransactionLoad					value is 2	
				EftExtractUpdate				value is 11 
				PaymentVoidStopPayment			value is 12 
				BOECashingUpdate				value is 13 
				BOEStatementUpdate				value is 14 
				EftPaymentCreation				value is 15 
				CashBatchReleaseReport			value is 16 
				BankPresentationCashingUpdate	value is 17 
				BankPresentationCashingUpdateWithRemitControl value is 18 
				ProcessDishonoredBillOfExchanges value is 19 
		CreateFromBatchStatus					is Numeric size 1
		RejectCode								is like BankTransactionCode
		ReleasedFromImport						is Boolean
		BypassBudgetEditing						is Boolean
		BypassBudgetProcessing					is Boolean
		TransientErrorDescription				is Alpha size up to 200	
			derive value from first CashLedgerTransactionErrorMassReleaseRel.ErrorDescription
		UseCashAllocationCode					is Boolean
		TransientCashAllocationCode				is a CashAllocationCode 
		TransientCashAllocationAmount			is an InternationalAmount
			
	Context Fields
		CashLedgerReturnedPayment
		DepositBankTransactionCode
		ContextCashCode							is a CashCode
		IssueDateRange							is a DateRange
		IssuedBankAmountRange					is an AmountRange
		IssuedBaseAmountRange					is an AmountRange2
		AppliedTransactionsFlag					is like FlagY
		TransactionNumberRange					is a TransNbrRange
		ReconcileDateRange						
		TempCashCodeGroup						is a CashCodeGroup
		PrmStatusAsOfDate						is a AsOfDate
		PrmTransStatus							is a CashLedgerStatusCode
		PrmDateOption							is a DateOption
		SearchByReportDateRange					is a ReportDateRange			
		SearchByStaleDateEscheatStatus			is a StaleDateEscheatStatus		
		SearchByState							is a StateProvince				
					
	Local Fields
		GainLossCalculation
		NegativeFinanceCurrencyAmount
		LocalGLFinanceCodeBlock					is a  TransactionCodeBlock
		GLBaseAmount			 				is a  FinanceCurrencyAmount
		LocalIssuedBaseAmount	 				is a  FinanceCurrencyAmount
		LocalIssuedBankAmount					is an InternationalAmount
		LocalReconBaseAmount	 				is a  FinanceCurrencyAmount
		LocalFinanceCurrencyAmount				is a  FinanceCurrencyAmount	
		LocalDistributionFinanceCurrAmt			is a  FinanceCurrencyAmount
		LocalFinanceCurrencyAmountGroup			is a  FinanceCurrencyAmountGroup
		LocalDocumentCurrencyTotals				is a  DocumentCurrencyTotals
		LocalBankBeginningBalance       		is an InternationalAmount
		LocalBankEndingBalance          		is an InternationalAmount
		LocalOpenBeginningBalance   	 		is an InternationalAmount
		LocalOpenEndingBalance		       		is an InternationalAmount
		LocalAccountBeginningBalance	 		is an InternationalAmount
		LocalAccountEndingBalance	    		is an InternationalAmount
		LocalIssuedAmount                  		is an InternationalAmount
		LocalIssuedCount                		is like NbrOfTrans
		LocalReconciledAmount              		is an InternationalAmount
		LocalReconciledCount            		is like NbrOfTrans
		LocalVoidedAmount               		is an InternationalAmount
		LocalVoidedCount                		is like NbrOfTrans
		LocalStopPaidAmount             		is an InternationalAmount
		LocalStopPaidCount              		is like NbrOfTrans
		LocalStaleDatedAmount           		is an InternationalAmount
		LocalStaleDatedCount            		is like NbrOfTrans
		LocalEscheatedAmount            		is an InternationalAmount
		LocalEscheatedCount             		is like NbrOfTrans
		LocalWriteOffAmount            			is an InternationalAmount	
		LocalWriteOffCount             			is like NbrOfTrans			
		LocalAdjustmentsAmount           		is an InternationalAmount

		LocalCompany							is like Company
		LocalNewCompany							is like Company
		LocalOtherCompany						is like Company
		LocalCashLedgerSourceRecord				is like CashLedgerSourceRecord
		LocalBankTransactionCode				is like BankTransactionCode
		LocalNewBankTransactionCode				is like BankTransactionCode
		LocalOtherBankTransactionCode			is like BankTransactionCode
		LocalDiff								is an InternationalAmount
		LocalBypassRules						is Boolean
		LocalBypassCashCodeUpd					is Boolean
		LocalActionSubmitForApproval			is Boolean
		LocalActionUnreleaseToRelease			is Boolean
		LocalActionOpenToReconcile				is Boolean
		LocalActionOpenToStopPayment			is Boolean
		LocalActionOpenToVoid					is Boolean
		LocalActionOpenToStaleDated				is Boolean
		LocalActionReconcileToReopen			is Boolean
		LocalActionVoidToReopen					is Boolean
		LocalActionStopPaymentToReopen			is Boolean
		LocalActionStaleDatedToReopen			is Boolean
		LocalActionStaleDatedToVoid				is Boolean
		LocalActionStaleDatedToStopPayment		is Boolean
		LocalActionStaleDatedToEscheat			is Boolean
		LocalStatementReconciliation			is Boolean




		LocalReconcileGeneralLedgerEntry		is Boolean
		LocalReconcileCashLedgerTransaction		is Boolean
		LocalReconcileWithAdjustment			is Boolean
		LocalReconcileAdjustmentCreated			is Boolean
		LocalPostDate							is Date		
		
		LocalReference							is like Reference
		LocalDescription						is like Description
		LocalReconcileVarianceData				is an InternationalAmount 		
		LocalCashPositionDate					is Date
		LocalReconcileDate						is Date
		LocalSummaryReconcileDate				is Date
		LocalStatus								is Numeric 1
		LocalCreateOffset              			is Boolean
		LocalStatementBalanceEntered            is an InternationalAmount
		LocalStatementEnteredDebit              is an InternationalAmount
		LocalStatementEnteredCredit             is an InternationalAmount
		LocalFunctionalAmountDiff				is an InternationalAmount
		LocalAlternateAmountDiff				is an InternationalAmount
		LocalAlternateAmount2Diff				is an InternationalAmount
		LocalAlternateAmount3Diff				is an InternationalAmount
		LocalReportAmount1Diff					is an InternationalAmount
		LocalReportAmount2Diff					is an InternationalAmount
		LocalReportAmount3Diff					is an InternationalAmount
		LocalReportAmount4Diff					is an InternationalAmount
		LocalReportAmount5Diff					is an InternationalAmount
		LocalRoundingAdjustment					is Boolean
		VerifyCashLedgerMonitor
		LocalRunProgram							is a RunProgram	
		LocalCheckCBMonitor						is Alpha 1	
		LocalActionDate							is Date
		LocalCashManagementGroup				is like CashManagementGroup
		LocalCashLedgerTransaction				is a CashLedgerTransaction
		LocalActor								is an Actor	
		LocalApprovalLevel						is Numeric 8
		LocalApprover							is a FinanceResource
		LocalApproverTeam						is a FinanceTeamField
		LocalApproverList						is Alpha 250
		LocalFirstApproverAssigned				is Boolean
		LocalRejectReason						is AlphaUpper 20
		LocalRejectComment						is Alpha size up to 500
		LocalCompanyGroup						is like GeneralLedgerCompanyGroup
		LocalCashCode							is like CashCode
		LocalCashCodeGroup						is like CashCodeGroup
		LocalRejectedEFT						is Boolean
		LocalReinstatedPaymentReject			is Boolean
		LocalAPBOE								is Boolean
		LocalExchangeDate			 			is an ExchangeDate
		LocalPostingDate			 			is a PostingDate
		LocalInterfaceAsPosted					is Boolean
		AutoNumberByCompany						is like GeneralLedgerCompany
		AutoNumberByCashCode					is like CashCode
		AutoNumberByBankTransactionCode			is like BankTransactionCode
		LocalCashLedgerAutoTranNumber			is a CashLedgerAutoTranNumber view
		LocalTransactionNumber					is a TransactionNumber
		DuplicateTranNumberFound				is Boolean
		AutoNumberingAction			 			is Numeric 1
			States
				OverrideNumberWithAnAutoGeneratedNumber	value is 1
				BypassAutoTransactionNumbering			value is 2
		LocalJournalizeGroup					is like JournalizeGroup
		LocalVendorGroup    					is like VendorGroup
		LocalVendor         					is like Vendor
		LocalVendorLocation                     is like VendorLocation
		LocalVendorAddress                      is a PostalAddressV2	
			holds pii
		LocalVendorName							is a VendorName 
			holds pii
		LocalVendorLegalName					is a VendorName 
			holds pii
		LocalStateProvince						is like StateProvince
		LocalStaleDateAccount					is a FinanceCodeBlock
		LocalEscheatmentAccount					is a FinanceCodeBlock
		LocalWriteOffAccount					is a FinanceCodeBlock		
		LocalStaleDateOutputFileHeaderView		is a StaleDateOutputFileHeader view
		LocalEscheatmentOutputFileHeaderView	is a EscheatmentOutputFileHeader view
		LocalStaleDateOutputFileHeader			is like StaleDateOutputFileHeader
		LocalStaleDateOutputFileDetail			is like StaleDateOutputFileDetail
		LocalEscheatmentOutputFileHeader		is like EscheatmentOutputFileHeader
		LocalEscheatmentOutputFileDetail		is like EscheatmentOutputFileDetail
		LocalTransactionErrorFound				is Boolean
		LocalStaleAgeDate						is Date
		LocalEscheatAgeDate						is Date
		LocalWriteOffAgeDate					is Date		

		LocalCalculateCashFinanceStructure		is a CalculateCashFinanceStructure
		LocalAnswer 							is Alpha size 1		
		LocalReconCurrencyAmount				is a FinanceCurrencyAmount		
		LocalCurrencyCalculationGroup			is a CurrencyCalculationGroup	
		LocalPeriodOfPerformanceProject			is like Project					
		LocalPeriodOfPerformanceSystem			is like GeneralLedgerSystemCode	
		LocalDateRange							is a DateRange					
		LocalToAccountingEntity					is like AccountingEntity
		LocalAccountingUnit						is like AccountingUnit
		LocalFinanceDimension1					is a FinanceDimension1
		LocalNativeLPLBODTrigger				is Boolean
		LocalTriggerFrom						is Alpha size 100
		LocalFirstName     						is a FirstName			
		LocalMiddleName     					is a MiddleName			
		LastDistribution						is a CashLedgerGLDistribution view
		DistributionRunningTotal		  		is an InternationalAmount
		LocalCashAllocationCode					is a CashAllocationCode		
		LocalAllocationAmount 					is an InternationalAmount	
		LocalCashLedgerJobResult				is a CashLedgerJobResult
		LocalTransactionCount           		is Numeric size 6
		LocalBypassCashFundUpdate				is Boolean				
		LocalOriginatingTransaction				is BusinessObjectReference
		LocalLinkback							is Alpha size 1000
		LocalFundHeaderCashCode 				is like CashCode    
#ifdef module cam
		LocalFinanceDimension10					is a FinanceDimension10
#endif
		LocalAttributeCtr  						is Numeric 2
				
	Field Rules
		CashLedgerSourceRecord
			default to "CBT"

		BankTransactionCode
			if (SourceCode					!= "AP"
			and SourceCode					!= "AR"
			and CashCodeTransactionCodeRel	exists)
				constraint (CashCodeTransactionCode exists
				and CashCodeTransactionCode.Active)
					"TransactionCode<BankTransactionCode>NotAuthorizedForCashCode<CashCode>"

		TransactionIdentifierSequenceNumber
			if ((IsPayablesPaymentDetail
			and !LocalReinstatedPaymentReject
			and !LocalAPBOE)
			or   LocalRejectedEFT
			or   Type.WireTransfer)
				initialize TransactionIdentifierSequenceNumber
			else
				autosequence using ByTransactionIdentifierSequenceNumber
					minimize contention







		CashLedgerTransactionIdentifier
			if (((!IsPayablesPaymentDetail
			and   !LocalRejectedEFT)
			or   (LocalReinstatedPaymentReject
			or    LocalAPBOE))
			and  !Type.WireTransfer)
				if (Type.ElectronicFundsExtract)
					CashLedgerTransactionIdentifier	= ("E" + TransactionIdentifierSequenceNumber)
				else
				if (Type.CashReceiptEntry)
					CashLedgerTransactionIdentifier	= ("D" + TransactionIdentifierSequenceNumber)
				else
				if (IsPayablesPaymentSummary)
					CashLedgerTransactionIdentifier	= ("S" + TransactionIdentifierSequenceNumber)
				else
				if (SourceCode = "AR")
					CashLedgerTransactionIdentifier	= ("R" + TransactionIdentifierSequenceNumber)
				else
				if (LocalAPBOE)
					CashLedgerTransactionIdentifier	= ("B" + TransactionIdentifierSequenceNumber)
				else
					CashLedgerTransactionIdentifier	= ("T" + TransactionIdentifierSequenceNumber)








        CashCode
            required
			if (CashCode changed)	
				constraint (OldCashCodeDistributionsRel not exist)
					"CannotChangeCashCode;DistributionsExist" 
					
     	CashManagementAccount
    		force default to CashCode.BankAccountNumber
 
        Company
           	required
			cannot be changed
				"CannotChangeCompany"
			TransientAccountingEntity = Company.OrigCompany.AccountingEntity

		Currency
			default to CashCode.Currency
			
		IssueDate
			default to current corporate date



			if (Status.Unreleased
			and SourceCode != "AP")											
				constraint (first BankAccountBalancesRel not exists
				or		    IssueDate > first BankAccountBalancesRel.BankAccountBalance)
					"TransactionDateIsForAClosedBankPeriod"					
			if (CreatedFromBankStatementLine entered)
				cannot be changed
			if (IssueDate changed)
				initialize IssuedBaseAmount
				
		CurrencyTable
			if (IsPayablesPaymentDetail)	//SourceCode = "AP"
				default to APCompanySystemClosingControlRel.CurrencyTable
				default to PayablesCompanyVendorProcLevel.PayablesCompany.CurrencyTable
			else
			if (SourceCode = "AR")
				default to ARCompanySystemClosingControlRel.CurrencyTable
				default to ReceivablesCompanyProcessLevel.ReceivableCompany.CurrencyTable
			else					
				default to CBCompanySystemClosingControlRel.CurrencyTable
				default to Company.OrigCompany.CurrencyTable

			if (CurrencyTable changed)
				initialize IssuedBaseAmount

        Description
            required

        IssuedBankAmount
        	TransientFromCurrency	= CashCode.Currency
        	IssuedBankAmount		= IssuedBankAmountUnsigned
















			if (CreatedFromBankStatementLine entered)
				cannot be changed
        	if (IssuedBankAmount changed)
        		constraint (Status.Unreleased)
        			"CanOnlyChangeAmountIfTransactionIsUnreleased"
        		initialize IssuedBaseAmount	
        	if (SourceCode not = "AP")	
        		BankAccountCurrencyExchangeRate 	= 1	
				TransactionCurrencyNumberOfDecimals = CashCode.BankAccountNumber.Currency.NumberOfDecimals  
        		IssueTranAmt 						= IssuedBankAmount
        			
		IssuedBaseAmount
           	required
			
        TransactionCurrencyNumberOfDecimals
			default to CashCode.BankAccountNumber.Currency.NumberOfDecimals
			        	
        BaseCurrencyNumberOfDecimals
			default to Company.OrigCompany.CurrencyNumberOfDecimals  
			        
        BankAccountCurrencyNumberOfDecimals		
			default to CashCode.BankAccountNumber.Currency.NumberOfDecimals
			  






		GeneralLedgerPostDate	
			if (GeneralLedgerPostDate not entered)
				default to IssueDate
			if (Status.Unreleased
				and !LocalInterfaceAsPosted	
				and SourceCode != "AP"
				and CBCompanySystemClosingControlRel.Control)		
				constraint (GeneralLedgerPostDate within CBCompanySystemClosingControlRel.ValidEntryDate)
					"PostDate<GeneralLedgerPostDate>NotWithinValidEntryDatesForSystemCode_'\C\B'_andCompany<Company>;ValidDateRangeIs<CBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CBCompanySystemClosingControlRel.ValidEntryDate.End>"

		PeriodDate
			if (PeriodDate entered)
				constraint (Status.Unreleased)
					"PeriodDateMustBeBlank"	
			cannot be changed
				"PeriodDateCannotBeChanged"	
														
		SourceCode
			default to "CB"
			cannot be changed
				"CannotChangeSourceCode"	

		GeneralLedgerEvent		
			initial value is "CL"
			default to "CL"
			if (GeneralLedgerEvent changed)
				constraint (CashLedgerGLDistributionsRel not exist)
					"CannotChangeGlobalLedgerEvent;DistributionsExist"

		BankTransactionSign
			if (BankTransactionSign not entered)	
				if (BankTransactionCode.TransactionType.CreditTransaction)
					BankTransactionSign = "CR"
				else
					BankTransactionSign = "DR"
							
		BankTransactionType
			default to BankTransactionCode.BankTransactionType
			
		ReinstateStatus
			default to false //"N"

		BankReconciliationStatus
			default to false //"N"

		LastMaintenanceDate
			default to current timestamp

		CreatedUser
			default to actor
				
		CompanyCashCode
           	required
           	
       	UseCashAllocationCode
       		if (TransientCashAllocationCode entered)
       			default to true
   			else
   				default to false

	Create Rules  

		if (TransactionAttachment.MimeType entered)
			include IDM.CreateRules
				replace AttachmentField with TransactionAttachment
							
	Delete Rules

		if (VoidStopPayAttachment.MimeType entered)
			include IDM.DeleteNoArchiveRules
				replace AttachmentField with VoidStopPayAttachment

		if (TransactionAttachment.MimeType entered)
			include IDM.DeleteNoArchiveRules
				replace AttachmentField with TransactionAttachment

	Commit Rules
	
		if (VoidStopPayAttachment.MimeType entered)
			include IDM.CommitRules
				replace AttachmentField with VoidStopPayAttachment
				
		if (TransactionAttachment.MimeType entered)
			include IDM.CommitRules
				replace AttachmentField with TransactionAttachment


    Conditions
        IsPendingApproval
        	restricted
            when (Status.PendingApproval)
    
		NotAPAndAR
			restricted
			when ((SourceCode 						!= "AP")
    	    and   (SourceCode 						!= "AR"))
    	    
		CurrentActorApprovals
            restricted
            when (MyPFIApprovals = true)
		
		IsClosedBankPeriod
			restricted
			when (first BankAccountBalancesRel exists
			and   LocalActionDate <= first BankAccountBalancesRel.BankAccountBalance)

			
        IsActiveCashCodeExist
        	restricted
            classic name is ACTIVE-CASH
            when (not CashCode.Active)

        IsCashLedgerReconciliationAdjustmentExist
        	restricted
            classic name is ADJUST-EXISTS
            when (CashLedgerReconciliationAdjustmentRel exists)

        IsUnreleasedCashLedgerReconciliationAdjustmentExist
        	restricted
            when (CashLedgerReconciliationAdjustmentUnReleasedRel exists)

        IsPayablesVendorExist
        	restricted
            classic name is AP-AND-VENDOR
            when (SourceCode = "AP"            
            and   PayablesCompanyVendorProcLevel.Vendor != "SPACES")

        IsBilOfExchangePayment
        	restricted
            classic name is AP-DRAFT-TRANS
            when (BankTransactionCode.BankTransactionType.BillOfExchangePayment)

        IsReceivableDeposit
        	restricted
            classic name is APHSET4-EXIST
            when (SourceCode = "AR"            
            and   ReceivablePaymentHeaderDepositsRel exists)

        IsRTMReceivablePayment
        	restricted
            classic name is APHSET5-EXIST
            when (SourceCode = "AR"            
            and   ReceivablePaymentHeaderAdjustmentsRel exists)

        IsAutoReconcile
        	restricted
            classic name is ARRTM-EXISTS
            when (RTMPaymentRel exists)

        IsReceivableAdjustment
        	restricted
            classic name is AUTO-RECON
            when (BankTransactionCode.AutomaticReconciliation)

        IsPeriodDate
        	restricted
            classic name is BL-PERIOD-DATE
            when (PeriodDate not entered)

        IsReconciledCompanyCurrencyAmount
        	restricted
            classic name is BL-REC-BAS-AMT
            when (ReconciliationData.FunctionalAmount.EnteredCurrencyAmount not entered)

        IsBankReconciledCompanyCurrencyAmount
        	restricted
            classic name is BL-REC-BNK-AMT
            when (ReconciliationData.FunctionalAmount.EnteredCurrencyAmount not entered)

        IsNoReconcileCurrencyExchangeRate
        	restricted
            classic name is BL-REC-CNV-RT
            when (ReconciliationData.FunctionalAmount.EnteredCurrencyRate not entered)

        IsNoReconciliationDate
        	restricted
            classic name is BL-REC-DATE
            when (ReconciliationData.ExchangeDate not entered)

        IsBankTransactionCreditType
        	restricted
            classic name is BNK-CREDIT
            when (BankTransactionSign.BankCredit)

        IsBankTransactionDebitType
        	restricted
            classic name is BNK-DEBIT
            when (BankTransactionSign.BankDebit)

        IsCashPayment
        	restricted
            when (BankTransactionSign.BankDebit
            and   BankTransactionCode.BankTransactionType.CashPayment)

        IsCashLedgerGLDistributionExist
        	restricted
            classic name is CB-DISTRIB
            when (first CashLedgerGLDistributionsRel exists)

        IsFundCashPaymentDistribution
        	restricted
            when (FundCashPaymentDistributionsRel exists)

        IsElectroniFundsExtractType
        	restricted
            classic name is CB-EFT-EXISTS
            when (Type.ElectronicFundsExtract)

        IsUnreleasedOutOfbalance
        	restricted
            classic name is CB-OUT-OF-BAL
            when (IssuedBankAmount != AppliedDistributionBankAmount
            and   Status.Unreleased)

        IsCashLedgerPayment
        	restricted
            classic name is CB-PMT-EXISTS
            when (Type.CashLedgerPayment
            and   SummaryOption.NoSummary)

        IsCashLedgerReturnedPaymentExist
        	restricted
            classic name is CB-RET-PMT-EXT
            when (CashLedgerReturnedPaymentRel exists)

        IsUnreleased2
        	restricted
            classic name is CB-UNRELEASED
            when (Status.Unreleased)

        IsPayablesPaymentDetail
        	restricted
            classic name is CBCHECK-DETAIL
            when (SourceCode = "AP"            
            and   SummaryOption.NoSummary)

        IsPayablesPaymentSummary
        	restricted
            classic name is CBCHECK-SUMM
            when (SourceCode = "AP"            
            and   SummaryOption.Summarized)

		IsPayablesPaymentSourcedFromIntercompanyBilling	
			restricted
			when (SourceCode = "AP"
			and first PayablesInvoicePaymentRel.IsFromIntercompanyBilling)

        IsTransferHeader
        	restricted
            classic name is CBH-EXISTS
            when (SourceCode = "CB"
            and   Type.TransferHeader)

        IsTransferDetail
        	restricted
            classic name is CBL-EXISTS
            when (SourceCode = "CB"
            and   Type.TransferDetail)

        IsCashReceiptEntry
        	restricted
            classic name is CBP-EXISTS
            when (SourceCode = "CB"
            and   Type.CashReceiptEntry)

        IsSameSignOfBankAmount
        	restricted
            classic name is CC-BANK-SIGN
            when (old BankSign = BankSign)

        IsSameTypeOfBankAmount
        	restricted
            classic name is CC-BNK-TRAN-SI
            when (old BankTransactionSign = BankTransactionSign)

        IsSameCompany
        	restricted
            classic name is CC-COMPANY
            when (old Company.OrigCompany = Company.OrigCompany)

        IsSameSourceCode
        	restricted
            classic name is CC-SOURCE-CODE
            when (old SourceCode = SourceCode)

        IsSameTransactionIDNumber
        	restricted
            classic name is CC-TRANS-IDENT
            when (old CashLedgerTransaction = CashLedgerTransaction)

        IsSameVendor
        	restricted
            classic name is CC-VENDOR
            when (old PayablesCompanyVendorProcLevel.Vendor = PayablesCompanyVendorProcLevel.Vendor)

        IsSameCompany2
        	restricted
            classic name is COMP-CHGED
            when (old Company.OrigCompany = Company.OrigCompany)

        IsBillOfExchangeBankCredit
        	restricted
            classic name is DRAFT-DEPOSIT
            when (BankTransactionSign.BankCredit
            and   BankTransactionCode.BankTransactionType.BillOfExchangePayment)

        IsBillOfExchangeBankDebit
        	restricted
            classic name is DRAFT-PAYMENT
            when (BankTransactionSign.BankDebit
            and   BankTransactionCode.BankTransactionType.BillOfExchangePayment)

        IsNonCompanyCurrency
        	restricted
            classic name is NON-BASE-TRAN
            when (CashCode.Currency != Company.OrigCompany.Currency)

        IsBankService
        	restricted
            classic name is NON-PAYMENT
            when (BankTransactionCode.BankTransactionType.BankService)

        IsOpen
        	restricted
            when (Status.Open)

        IsCashLedgerCashReceiptDetailExist
        	restricted
            classic name is RECEIPT-EXIST
            when (first CashLedgerCashReceiptDetailRel exists)

        IsReconciled2
        	restricted
            classic name is RECON-STATUS
            when (Status.Reconciled)

        IsReconciledVariance
        	restricted
            classic name is RECON-VARIANCE
            when (Status.Reconciled
            and   IssuedBankAmount != ReconciliationData.CurrencyAmount)

		VarianceExists
			restricted
			when (ReconciliationData.CurrencyAmount entered
			and   IssuedBankAmount != ReconciliationData.CurrencyAmount)



















		ReconcileDateExists
			restricted
            when (ReconciliationData.ExchangeDate entered
            and   !Status.Open)

        IsReconciled
        	restricted
            classic name is RECONCILE
            when (Status.Reconciled)

        IsCashLedgerCashReceiptHeaderExist
        	restricted
            classic name is RECPTHDR-EXIST
            when (CashLedgerCashReceiptHeaderRel exists)

        IsPayablesPayment
        	restricted
            classic name is RELATED-APP
            when (SourceCode = "AP"
            and   LastElectronicPaymentSerialNumber not entered)

        IsBankAmountAndAppliedAmount
        	restricted
            classic name is RELEASE
            when (IssuedBankAmount = AppliedDistributionBankAmount)

        IsStopPayment
        	restricted
            when (Status.StopPayment)

        IsElectronicPayment
        	restricted
            classic name is TAPE-PAYMENT
            when (LastElectronicPaymentSerialNumber entered)

        IsUnreleasedReceipt
        	restricted
            classic name is UNREL-RECEIPT
            when (CashLedgerCashReceiptHeaderRel exists
            and   CashLedgerCashReceiptHeaderRel.Status.Unreleased)

        IsUnreleased
        	restricted
            when (Status.Unreleased)

        IsUnreleasedForPeriodClose	
        	restricted
            when (Status.Unreleased
            and   GeneralLedgerPostDate <= CurrentGeneralLedgerCalendarPeriodRel.Date 

            and   SourceCode != "AP")
        
        CanSeeDistributionTotals 
        	restricted
            when (Status.Unreleased
            or	  AmendedDistributions)
                			
		IsVoidOrStopPaymentForPeriodClose	
        	restricted
            when ((Status.Voided
            or	   Status.StopPayment)  
            and    ReconciliationData.ExchangeDate <= CurrentGeneralLedgerCalendarPeriodRel.Date 

            and    !ReinstateStatus
            and    SourceCode != "AP")

        IsPendingApprovalForPeriodClose	
        	restricted
            when (Status.PendingApproval
            and ((ApprovalRequestType.Release 
			and   GeneralLedgerPostDate <= CurrentGeneralLedgerCalendarPeriodRel.Date) 
			or  ((ApprovalRequestType.StopPayment 
			or    ApprovalRequestType.Void)
			and   ReconciliationData.ExchangeDate <= CurrentGeneralLedgerCalendarPeriodRel.Date))
            and   SourceCode != "AP")
 
 		IsPendingStopPayConfirmationForPeriodClose	
 		    restricted
            when (Status.PendingStopPayConfirmation
			and   ReconciliationData.ExchangeDate <= CurrentGeneralLedgerCalendarPeriodRel.Date 
            and   SourceCode != "AP")
                   
		OutstandingTransactionsExist 
			restricted
			when (IsUnreleasedForPeriodClose
			or    IsPendingApprovalForPeriodClose
			or    IsPendingStopPayConfirmationForPeriodClose
			or    IsVoidOrStopPaymentForPeriodClose)
		            
        IsUnreconciledOver60Days
        	restricted

            when (NumberOfDaysSinceIssued > 60
            and  (Status.Unreleased
            or    Status.Open))

        IsVaildTypeOfBankAmount
        	restricted
            classic name is VALID-BNK-SRC
            when (BankTransactionSign.BankCredit
            or    BankTransactionSign.BankDebit)

        IsValidSource
        	restricted
			when (SourceCode = "AP"
            or    SourceCode = "AR"
            or    SourceCode = "CB")

        IsVoid
        	restricted
            when (Status.Voided)
            
		CanRejectOpenSummarizedTransactions
			restricted
			when ((SummaryOption.Summarized
			or     BankTransactionCode.AllowDetailPaymentReject)	
			and	  (Status.Open
			or     Status.Reconciled))

		CanRejectOpenEFTTransactions
			restricted
			when (Type.ElectronicFundsExtract
			and	 (Status.Open
			or    Status.Reconciled))
						
		ClosedPeriodTransactions
			restricted
			when (PeriodDate entered)
			
		TransactionAvailableForProcessing
			restricted
			when (not Status.Unreleased

			and	  PeriodDate not entered)

		TransactionAvailableForStatementReconciliationProcessing
			restricted
			when (not Status.Unreleased
			and   not Status.StaleDated
			and   not Status.Escheated
			and   not ReinstateStatus
			and   not Status.PendingStopPayConfirmation		
			and	  PeriodDate not entered)
			
		OpenTransactionAvailableForProcessing
			restricted
			when (TransactionAvailableForProcessing)
			
		CanVoidOrStopPayTransaction
			restricted
			when (OpenTransactionAvailableForProcessing
			and   not ReinstateStatus
			and   !CashManagementGroup.VoidStopPaymentApprovalRequired)
		
		CanRequestVoidOrStopPayment
			restricted
			when (OpenTransactionAvailableForProcessing
			and   not ReinstateStatus
			and   CashManagementGroup.VoidStopPaymentApprovalRequired)

		HasTransactionAttachment		
			restricted
			when (TransactionAttachment entered)

		HasVoidStopPayAttachment		
			restricted
			when (VoidStopPayAttachment entered)

		CanUpdateAttachment		
			restricted
			when (VoidStopPayAttachment entered
			or    Status.Voided
			or    Status.StopPayment
			or    Status.PendingStopPayConfirmation		
			or   (Status.PendingApproval
			and  (ApprovalRequestType.Void
			or    ApprovalRequestType.StopPayment)))

		CanStopPayTransaction		
			restricted
			when (OpenTransactionAvailableForProcessing
			and  !ReinstateStatus)

		CanReopenTransaction
			restricted
			when (!ReinstateStatus
			and   PeriodDate not entered	
			and	 (Status.Reconciled
			or    Status.StopPayment
			or    Status.Voided
			or    Status.StaleDated
			or    Status.PendingStopPayConfirmation) 
			and   !IsFundTransfer)		  

		CanReopenCashLedgerPayment			
			restricted
			when (IsCashLedgerPayment
			and   ReinstateStatus
			and   PeriodDate not entered
			and	 (Status.StopPayment
			or    Status.Voided))

		OpenTransactionAvailableForStatementReconciliationProcessing
			restricted
			when (TransactionAvailableForStatementReconciliationProcessing)
						
		StaleDatedTransactionAvailableForProcessing
			restricted
			when (TransactionAvailableForProcessing
			and   Status.StaleDated)

		CanStaleDateTransaction
			restricted
			when (TransactionAvailableForProcessing
			and   SummaryOption.NoSummary
			and   TransactionNumber entered	
			and   (Type = "C"		
			or     Type = blank))	
		
		OpenWithinDateRange	
			restricted
			when (Status.Open
			and	  IssueDate	<= LocalStaleAgeDate	
			and   StaleDateProcessingStatus.NotProcessed)

		StaleDatedOrOpenWithinDateRange	
			restricted
			when  ((Status.Open
			and    IssueDate	<= LocalStaleAgeDate)
			or	  (Status.StaleDated))
			
		WriteOffOrOpenWithinDateRange	
			restricted
			when  ((Status.Open
			and    IssueDate	<= LocalWriteOffAgeDate)
			or	  (Status.WriteOff))
	
		StaleDatedWithinDateRange	
			restricted
			when (TransactionAvailableForProcessing			
			and   Status.StaleDated
			and	  IssueDate	<= LocalEscheatAgeDate	
			and   EscheatmentProcessingStatus.NotProcessed)
			
		EscheatedOrStaleDatedWithinDateRange	
			restricted
			when ((TransactionAvailableForProcessing	
			and   Status.StaleDated		
			and	  IssueDate	<= LocalEscheatAgeDate)
			or   (Status.Escheated))
							
		WithinIssueDateRange
			restricted
			when (IssueDateRange not entered
			or    IssueDate within IssueDateRange)
			
		WithinIssuedBankAmountRange
			restricted
			when (IssuedBankAmountRange not entered
			or    IssuedBankAmount within IssuedBankAmountRange)
		
		WithinIssuedBaseAmountRange
			restricted
			when (IssuedBaseAmountRange not entered
			or    IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount within IssuedBaseAmountRange)
				
		WithinTransactionNumberRange
			restricted
			when (TransactionNumberRange not entered
			or    TransactionNumber within TransactionNumberRange)
			
		AppliedTransactions
			restricted
			when (AppliedTransactionsFlag not entered
			or   (AppliedTransactionsFlag.Yes
			and   CashLedgerReconciliationStatementRel exists))




		HasTransactionIdentifierSequenceNumber
			restricted
			when (TransactionIdentifierSequenceNumber entered)

 		RejectTransactionApprovalReasonCodeRequired
 			restricted
			when ((ApprovalRequestType.Release
			and    CashManagementGroup.RejectLedgerTransactionReasonCodeRequired)
			or   ((ApprovalRequestType.Void
			or     ApprovalRequestType.StopPayment)
			and    CashManagementGroup.RejectVoidStopPaymentReasonCodeRequired))

		HasApprovalComments
			restricted
			when (CashLedgerTransactionReasonCodeUsage set exists)

		CanViewPaymentDetails
			restricted
			when (SummaryOption.NoSummary
			and   CashLedgerPayablesPaymentRel exists)

		CanViewPaymentRecords				
			restricted
			when (SummaryOption.Summarized
			or    BankTransactionCode.AllowDetailPaymentReject)

		ReportedByPositivePay		
			when (PositivePayCreationRel exists
			and   LastMaintenanceDate <= PositivePayCreationRel.RunDate)






		DateAndAmountRangeSearchCondition	
			restricted
			when (IssuedBankAmountRangeSearch
			and   IssuedBaseAmountRangeSearch
			and   IssueDateRangeSearch
			and   ReconcileDateRangeSearch)

		IssuedBankAmountRangeSearch	
			restricted
			when ((IssuedBankAmountRange entered
			and   IssuedBankAmount within IssuedBankAmountRange)
			or    IssuedBankAmountRange not entered)
							
		IssuedBaseAmountRangeSearch	
			restricted
			when ((IssuedBaseAmountRange entered
			and   IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount within IssuedBaseAmountRange)
			or    IssuedBaseAmountRange not entered)
			
		IssueDateRangeSearch	
			restricted
			when ((IssueDateRange entered
			and   IssueDate within IssueDateRange)
			or    IssueDateRange not entered)

		ReconcileDateRangeSearch	
			restricted
			when ((ReconcileDateRange entered
			and   ReconciliationData.ExchangeDate within ReconcileDateRange)
			or    ReconcileDateRange not entered)















            
		DateOptionOrSearchCondition
			restricted
			when   (PrmDateOption.Or
			and   ((IssueDateRange not entered
			or     (IssueDateRange entered
			and     IssueDate within IssueDateRange))
			or     (ReconcileDateRange not entered
			or     (ReconcileDateRange entered
			and     ReconciliationData.ExchangeDate entered
			and     ReconciliationData.ExchangeDate within ReconcileDateRange))))

		DateOptionAndSearchCondition
			restricted
			when   (PrmDateOption.And
			and    (IssueDateRange not entered
			or     (IssueDateRange entered
			and     IssueDate within IssueDateRange))
			and    (ReconcileDateRange not entered
			or     (ReconcileDateRange entered
			and     ReconciliationData.ExchangeDate entered
			and     ReconciliationData.ExchangeDate within ReconcileDateRange)))

		StatusAsOfSearchCondition
			restricted

			when (OpenStatusSearchCondition				
			or    ReconciledStatusSearchCondition
			or    VoidedStatusSearchCondition
			or    StopPaymentStatusSearchCondition
			or    StaleDatedStatusSearchCondition
			or    EscheatedStatusSearchCondition
			or    PendingStopPayConfirmationStatusSearchCondition)

		BankHistoryNoDateSearchCondition
			restricted
			when   (!PrmDateOption entered
			and     !IssueDateRange entered
            and	    !ReconcileDateRange entered)

		TransStatusEnteredSearchCondition		
			restricted
			when (PrmTransStatus	!entered
			or   (PrmTransStatus	entered
			and   Status			= (PrmTransStatus - 1)))

		StatusAsOfNotEnteredSearchCondition		
			restricted
			when (PrmStatusAsOfDate	!entered)

		OpenStatusSearchCondition				
			restricted
			when (PrmStatusAsOfDate	entered
			and   PrmTransStatus.Open
			and   IssueDate		<= PrmStatusAsOfDate
			and  (Status.Open
			or   (!Status.Open
			and   ReconciliationData.ExchangeDate > PrmStatusAsOfDate
			and  (StaleDate		!entered
			or    StaleDate		> PrmStatusAsOfDate))))
	
		ReconciledStatusSearchCondition			
			restricted
			when (PrmStatusAsOfDate	entered
			and   PrmTransStatus.Reconciled
			and   IssueDate		<= PrmStatusAsOfDate
			and   Status.Reconciled
			and   ReconciliationData.ExchangeDate <= PrmStatusAsOfDate)
		
		VoidedStatusSearchCondition				
			restricted
			when (PrmStatusAsOfDate	entered
			and   PrmTransStatus.Voided
			and   IssueDate		<= PrmStatusAsOfDate
			and   Status.Voided
			and   ReconciliationData.ExchangeDate <= PrmStatusAsOfDate)

		StopPaymentStatusSearchCondition		
			restricted
			when (PrmStatusAsOfDate	entered
			and   PrmTransStatus.StopPayment
			and   IssueDate		<= PrmStatusAsOfDate
			and   Status.StopPayment
			and   ReconciliationData.ExchangeDate <= PrmStatusAsOfDate)

		StaleDatedStatusSearchCondition		
			restricted
			when (PrmStatusAsOfDate	entered
			and   PrmTransStatus.StaleDated
			and   IssueDate		<= PrmStatusAsOfDate
			and ((Status.StaleDated
			and   ReconciliationData.ExchangeDate <= PrmStatusAsOfDate)
			or   (!Status.StaleDated
			and   StaleDate		entered
			and   StaleDate		!= ReconciliationData.ExchangeDate
			and   StaleDate		<= PrmStatusAsOfDate
			and  (ReconciliationData.ExchangeDate < StaleDate
			or    ReconciliationData.ExchangeDate > PrmStatusAsOfDate))))

		EscheatedStatusSearchCondition		
			restricted
			when (PrmStatusAsOfDate	entered
			and   PrmTransStatus.Escheated
			and   IssueDate		<= PrmStatusAsOfDate
			and   Status.Escheated
			and   ReconciliationData.ExchangeDate <= PrmStatusAsOfDate)

		PendingStopPayConfirmationStatusSearchCondition		
			restricted
			when (PrmStatusAsOfDate	entered
			and   PrmTransStatus.PendingStopPayConfirmation
			and   IssueDate		<= PrmStatusAsOfDate
			and   Status.PendingStopPayConfirmation
			and   ReconciliationData.ExchangeDate <= PrmStatusAsOfDate)

		BudgetEditingInformationExists
			restricted
			when (BudgetTemplateGroupTotalRel exists)

		BudgetEditErrorExists
			when (HeaderBudgetEditErrorRel exists
			or    DistributionBudgetEditErrorRel exists)
			
		HeaderBudgetEditErrorExists
			restricted
			when (HeaderBudgetEditErrorRel exists)
			
		DistributionBudgetEditErrorExists
			restricted
			when (DistributionBudgetEditErrorRel exists)
					
		IsBatchApproved    
			restricted
			when (CashLedgerBatchApproval	entered)
							
		BudgetEditInProgress
			restricted
        	when (BudgetEditProcessing.InProcess)
        
        BudgetEditFailure
        	restricted
    		when (BudgetEditProcessing.Failure)

		GLCommitRelExists
			restricted
			when (GLCommitRel exists)

		OpenGLCommitRelExists
			restricted
			when (OpenGLCommitDrillRel exists)
			
		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   CashManagementGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

		IsReturnedPaymentDeposit
			restricted
			when (DepositBankTransactionCode entered
			and   CashLedgerTransaction.BankTransactionCode	= DepositBankTransactionCode
			and   CashCode									= ContextCashCode)

		IsReturnedPaymentImportDeposit	
			restricted
			when (DepositBankTransactionCode entered
			and   CashLedgerTransaction.BankTransactionCode	= DepositBankTransactionCode)
						
		TransactionRequiresApproval
			restricted
			when ((CreatedFromBankStatementLine	!entered
			and    CashManagementGroup.CashLedgerTransactionApprovalRequired)
			or    (CreatedFromBankStatementLine	entered
			and    CashManagementGroup.BankStatementDistribApprovalRequired))

		CanRelease
			restricted
			when (!ImportInProcess
			and   !BudgetEditInProgress			
			and   !TransactionRequiresApproval)

		
		CanReleaseAmendedDistributions 
			restricted
			when (AmendedDistributions
			and   !BudgetEditInProgress)		
				
		CanSubmitForApproval
			restricted
			when (!ImportInProcess
			and   !BudgetEditInProgress			
			and   TransactionRequiresApproval)


		TransactionApprovalCodeRequired
			restricted
			when (TransactionRequiresApproval
			and   !CashManagementGroup.ApprovalCodesNotUsedForCashTransactions)


			
		VoidStopPaymentApprovalCodeRequired
			restricted
			when (CashManagementGroup.VoidStopPaymentApprovalRequired
			and   !CashManagementGroup.ApprovalCodesNotUsedForVoidStopPayments)
			
		IsUnreleasedImportedTran
			restricted
			when (ImportStatus entered
			and	  Status.Unreleased)
			
		IsUnreleasedImportedTranWithMessage
			restricted
			when (ImportStatus entered
			and	  Status.Unreleased
			and   ImportErrorMessage entered)

		HasWorkunit
			restricted
			when (PfiWorkunitRel exists)

		DistributionsAreApplicable
			restricted
			when (CashLedgerGLDistributionsRel exists
			or    SourceCode = "CB")

		CurrentActorIsOnApproverTeam
        	restricted
			when (FinanceTeamMemberRel exists)

		CurrentActorIsApprover
        	restricted
			when (Approver	entered
			and	  CashManagementGroup.HROrganization = actor.agent(Employee).HROrganization
			and	  Approver = actor.agent(Employee).Employee)

		CurrentActorCanApprove
        	restricted
			when (CurrentActorIsApprover
			or	  CurrentActorIsOnApproverTeam)

		AllowUpdateOnApprove
        	restricted
			when (Status.PendingApproval
			and   ApprovalRequestType.Release
			and	  CurrentActorCanApprove)

		CanUpdateDistributions
			restricted
			when (!BudgetEditInProgress		
			and  (Status.Unreleased
			or    AllowUpdateOnApprove))	

		CanUpdateComments
			restricted
			when (!ImportInProcess)

		TempCashCodeGroupMatch
			restricted
			when (TempCashCodeGroup not entered
			or    TempCashCodeGroupDetailRel exists)

		TransactionMatchedToBankStatement
			restricted
			when (BankStatementReconciliation set exists
			and   first BankStatementReconciliation set.ReconMatchNumber entered)

		SummarizedTransactionWithRejectedPayments
			restricted
			when (SummaryOption.Summarized
			and   CashLedgerPayablesPaymentsRejectedRel exists)

		EFTWithRejectedPayments
			restricted
			when (Type.ElectronicFundsExtract					
			and   CashLedgerElectronicFundsTransferTransactionsRejectedRel exists)

		AutoNumberingAllowed
			restricted
			when ((CashManagementGroup.AutoTranNumberForTransactionForm
			and    BankTransactionCode.BankTransactionType.BankService)
			and   ((CashManagementGroup.AutoTranNumberByCompany
			and     Company.OrigCompany.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoTranNumberByCashCode
			and     CashCode.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoTranNumberByBankTransactionCode
			and     BankTransactionCode.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoTranNumberByCashCodeBankTranCode
			and     BankTransactionCode.AutoTransactionNumbering
			and     CashCode.AutoTransactionNumbering)))
		
		TransactionNumberRequiredIndicator 
			restricted
			when (!CashCode.AutoTransactionNumbering
			or    !BankTransactionCode.AutoTransactionNumbering)

		IsCLTSourceRecord
			when (CashLedgerSourceRecord.CashLedgerTransaction)

		CanReturnPayment
			restricted
			when (IsBankService
			and   IsReturnedPaymentDeposit
			and   IsCLTSourceRecord
			and   !ImportInProcess
			and   (Status.Open
			or     Status.Reconciled
			or     Status.Voided
			or     Status.PendingApproval))	

		CashLedgerTransactionErrorsExist	
			when (CashLedgerTransactionErrorRel exists)

		MassReleaseErrorExists	
			when (CashLedgerTransactionErrorMassReleaseRel exists)
						
		ReconciledToBankStatement
			when (Status.Reconciled
			and   BankStatementReconciliation set exists)

		ProcessForIDM
			restricted
			when (not Status.Voided
			and not Status.StopPayment
			and not Status.StaleDated
			and not Status.Escheated
			and not Status.PendingStopPayConfirmation)		

		HasApPayments
			restricted
			when (SummaryOption.NoSummary
			and   Type not entered						
			and   PayablesInvoicePaymentRel exists)

		StateSearchCondition
			restricted
			when ((SearchByState entered
			and   DerivedStateProvince = SearchByState)
			or    SearchByState not entered)
					
		HasNoPayeeAddressOnCLT	
			restricted
			when (PayeePostalAddress not entered)

        IsSourceCodeAP	
        	restricted
            when (SourceCode = "AP")
		
		RecordExists
			when (CashLedgerTransaction exists)

		UnreleasedRecordExists
			when (RecordExists
			and   IsUnreleased)
		
		DerivedCountryEntered
			when (DerivedPayeeAddressCountry entered)
		
		DerivedAddressLine1Entered
			when (DerivedPayeeAddressLine1 entered)
		
		DerivedAddressLine2Entered
			when (DerivedPayeeAddressLine2 entered)

		DerivedAddressLine3Entered
			when (DerivedPayeeAddressLine3 entered)
		
		DerivedAddressLine4Entered
			when (DerivedPayeeAddressLine4 entered)

		DerivedMunicipalityEntered
			when (DerivedPayeeAddressMunicipality entered)

		DerivedStateEntered
			when (DerivedPayeeAddressState entered)

		DerivedPostalEntered
			when (DerivedPayeeAddressPostal entered)

 		SecurityGroupAllowsAccess
			when ((actor.context.CashCodeSecurityGroup = "")
			or   (actor.context.CashCodeSecurityGroup != ""
			and   CashCodeSecurityGroupDetailRel exists))	

		CompanySecurityGroupAllowsAccess		
			when (actor.context.CompanySecurityGroup = blank
			or    CompanySecurityGroupMemberRel exists)
			
		DistributionsExist
			when (CashLedgerGLDistributionsRel exists)
			
		CanDeleteDistributions 
			restricted
			when (CanUpdateDistributions
			and   DistributionsExist)	
			
		CanApplyAdditionalAllocations 
			restricted
			when (CanUpdateDistributions
			and   DistributionsWithAnyCashAllocationCodesRel exists)	
			
		CanWriteOff 
			restricted
			when (((Status.Open
			and     SummaryOption.NoSummary)
			or     (Status.StaleDated
			and     SummaryOption.NoSummary)
			or     (Status.WriteOff
			and    !WriteOffProcessed
			and     SummaryOption.NoSummary))
			and    !CashManagementGroup.FinanceEnterpriseGroup.FundAccounting	//IEFIN-119816 wrapped "or" condition in parens to make sure FundAccounting condition was always applied
			and		CashLedgerReconciliationAdjustmentRel !exists)		
			

		FrontEndSplitsEnabled
			restricted
			when (CashManagementGroup.FinanceEnterpriseGroup.FrontEndSplits)

		ExecuteFrontEndSplits
			restricted
			when (FrontEndSplitsEnabled
			and CashLedgerTransaction.CashLedgerSourceRecord.CashLedgerTransaction)
			
		AllowFrontEndSplit
			restricted
			when (FrontEndSplitsEnabled
			and CashLedgerTransaction.CashLedgerSourceRecord.CashLedgerTransaction
			and GLEntryDistributionsUnreleasedRel exists
			and CanUpdateDistributions)

		HasFrontEndSplitDistributions
			restricted
			when (FESGLTransactionsRel exist
			and CanUpdateDistributions)

		OpenRecordsPreviouslyStaleDated			
        	when (Status.Open
            and   GLStaleDateDistributionsRel exists)

		HasTransactionDetails
			restricted
			when (CashLedgerTransactionDetailRel exists)

		LineAmountDoesNotEqualLineDetails
			restricted
			when (Status < 2	
			and   HasTransactionDetails
			and   IssuedBankAmount != TotalDetailAmount)

		DetailsOutOfBalance
			restricted
			when (CashLedgerTransactionDetailRel exists 
			and	  IssuedBankAmount != TotalDetailAmount)

		ValidForIDMUpload
			restricted
			when (VoidStopPayAttachment.ValidForIDMUpload
			or   TransactionAttachment.ValidForIDMUpload)
		
		IsFundTransfer           
			when (Type.TransferDetail 
			or    Type.TransferHeader)
		
		CanReopenTransferDetailOrHeader      
			restricted
			when (!ReinstateStatus
			and   PeriodDate not entered
			and	 (Status.Reconciled
			or    Status.StopPayment
			or    Status.Voided
			or    Status.StaleDated
			or    Status.PendingStopPayConfirmation)
			and   IsFundTransfer)
		
		MatchtoBankStatement 
			restricted
			when (first BankStatementReconciliation set.ReconMatchNumber entered)		

    Relations

		CashCodeSecurityGroupDetailRel
			one-to-one relation to CashCodeGroupDetail
			Field Mapping uses symbolic key
				related.CashManagementGroup         = actor.context.FinanceEnterpriseGroup
				related.CashCodeGroup				= actor.context.CashCodeSecurityGroup.FinanceDimensionStructure
				related.CashCode                    = CashCode

        CashLedgerReconciliationStatementRel
            classic name is CBSTMTREC
            one-to-one relation to CashLedgerReconciliationStatement
            required
            Field Mapping uses Set1	
                related.CashLedgerReconciliationStatement.StatementNumber = ReconciliationStatementNumber
                related.CashLedgerReconciliationStatement.StatementSuffix = ReconciliationStatementSuffix
                related.CashLedgerReconciliationStatement.LineNumber      = ReconciliationStatementLineNumber

        PayablesInvoicePaymentHistoryRel
            classic name is APAPPHIST
            one-to-many relation to PayablesInvoicePaymentHistory
            Field Mapping uses Set6
                related.PayGroup            = PayGroup
                related.BankTransactionCode = BankTransactionCode
                related.TransactionIDNumber = CashLedgerTransaction

		PositivePayCreationRel		
			one-to-one relation to PositivePayCreation
			Field Mapping uses symbolic key
				related.CashManagementGroup						= CashManagementGroup
				related.PositivePayCreation.CashCode			= CashCode
				related.PositivePayCreation.BankTransactionCode	= BankTransactionCode

        ReceivablePaymentHeaderDepositsRel
            classic name is APHSET4
            one-to-one relation to ReceivablePaymentHeader
            Field Mapping uses Set4
            	related.Company					= Company
            	related.ReceivablePaymentHeader	= DerivedReceivablePaymentHeader
                related.DepositBankCode     	= BankTransactionCode
                related.TransactionIDNumber 	= CashLedgerTransaction

        ReceivablePaymentHeaderAdjustmentsRel
            classic name is APHSET5
            one-to-one relation to ReceivablePaymentHeader
            Field Mapping uses Set5
            	related.Company							= Company
            	related.ReceivablePaymentHeader			= DerivedReceivablePaymentHeader
                related.DepositAdjustmentBankCode     	= BankTransactionCode
                related.AdjustmentTransactionIDNumber	= CashLedgerTransaction

        PayablesInvoicePaymentRel
            classic name is APPAYMENT
            one-to-many relation to PayablesInvoicePayment
            Field Mapping uses Set6
                related.PayGroup            = PayGroup
                related.BankTransactionCode = BankTransactionCode
                related.TransactionIDNumber = CashLedgerTransaction

		ValidPayablesInvoicePaymentRel
            one-to-many relation to PayablesInvoicePayment
            Field Mapping uses Set6
                related.PayGroup            = PayGroup
                related.BankTransactionCode = BankTransactionCode
                related.TransactionIDNumber = CashLedgerTransaction
			Instance Selection
				where (CashLedgerSourceRecord.CashLedgerPayablesPayment)

        RTMPaymentRel
            classic name is ARRTM
            one-to-one relation to RTMPayment
            Field Mapping uses Set5
                related.RTMBankCode         = BankTransactionCode
                related.TransactionIDNumber = CashLedgerTransaction

        CashLedgerReconciliationAdjustmentRel
            classic name is CBADJUST
            one-to-one relation to CashLedgerReconciliationAdjustment
            Field Mapping uses symbolic key
            	related.CashManagementGroup 			   = CashManagementGroup
                related.BankTransactionCode                = BankTransactionCode
                related.CashLedgerSourceRecord			   = CashLedgerSourceRecord
                related.CashLedgerReconciliationAdjustment = CashLedgerTransaction

        CashLedgerReconciliationAdjustmentUnReleasedRel
            classic name is CBADJUST
            one-to-one relation to CashLedgerReconciliationAdjustment
            Field Mapping uses Set4
            	related.CashManagementGroup 			   = CashManagementGroup
            	related.CashCode       	   				   = CashCode
                related.BankTransactionCode                = BankTransactionCode
                related.TransactionNumber				   = TransactionNumber
                related.TransactionNumberSuffix			   = TransactionNumberSuffix
                related.CashLedgerReconciliationAdjustment = CashLedgerTransaction
                related.CashLedgerSourceRecord			   = CashLedgerSourceRecord

        BankAccountBalanceRel
            classic name is CBBALANCE
            one-to-one relation to BankAccountBalance
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= CashManagementGroup	
                related.CashCode   				= CashCode
                related.BankAccountBalance 		= PeriodDate

        BankAccountBalancesRel
            one-to-many relation to BankAccountBalance
            Field Mapping uses Set2
            	related.CashManagementGroup 	= CashManagementGroup	
                related.CashCode  				= CashCode

		PreviousBankAccountBalanceRel
			one-to-many relation to BankAccountBalance
			Field Mapping uses Set2
				related.CashManagementGroup	= CashManagementGroup
				related.CashCode			= LocalCashCode
			Instance Selection
				where (related.BankAccountBalance < LocalCashPositionDate)

        CashPositionBankAccountBalanceRel
            one-to-one relation to BankAccountBalance
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= LocalCashManagementGroup
                related.CashCode   				= LocalCashCode
                related.BankAccountBalance 		= LocalCashPositionDate

        PreviousCashPositionBalanceRel
            one-to-many relation to CashCodeCashPosition
            Field Mapping uses ByCashCodeDescendingDate
            	related.CashManagementGroup 	= LocalCashManagementGroup
                related.CashCode   				= LocalCashCode
        	Instance Selection
        		where (related.CashCodeCashPosition 		< LocalCashPositionDate
        		and    related.ClosedPeriodBalance)

        PreviousCashPositionBalanceByCashCodeRel
            one-to-many relation to CashCodeCashPosition
            Field Mapping uses ByCashCodeDescendingDate
            	related.CashManagementGroup 	= LocalCashManagementGroup
                related.CashCode   				= LocalCashCode
                related.CashCodeCashPosition 	= first PreviousCashPositionBalanceRel.CashCodeCashPosition

        PreviousCashPositionBalanceByCompanyRel
            one-to-one relation to CashCodeCashPosition
            Field Mapping uses ByCashCodeDescendingDate
            	related.CashManagementGroup 	= LocalCashManagementGroup
                related.CashCode   				= LocalCashCode
                related.CashCodeCashPosition 	= first PreviousCashPositionBalanceRel.CashCodeCashPosition
                related.Company					= LocalCompany

        CashCodeCashPositionRel
            one-to-one relation to CashCodeCashPosition
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= LocalCashManagementGroup
                related.CashCode   				= LocalCashCode
                related.Company					= LocalCompany
                related.CashCodeCashPosition 	= LocalCashPositionDate

        CashCodeCashPositionByCashCodeRel
            one-to-many relation to CashCodeCashPosition
            Field Mapping uses ByCashCodeDescendingDate
            	related.CashManagementGroup 	= LocalCashManagementGroup
                related.CashCode   				= LocalCashCode
                related.CashCodeCashPosition 	= LocalCashPositionDate

        CompanyCashCodeRel
            one-to-one relation to CompanyCashCode
            required
            Field Mapping uses symbolic key
                related.Company  = Company.OrigCompany
                related.CashCode = CashCode

        CashLedgerGLDistributionsRel
            classic name is CBDISTRIB
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= CashCode.CashManagementGroup
                related.CashCode 				= CashCode
                related.CashLedgerSourceRecord	= CashLedgerSourceRecord
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = BankTransactionCode
                and    related.CashLedgerGLDistribution.TransactionIDNumber  = CashLedgerTransaction
                and   !related.CashLedgerGLDistribution.DistributionType.FundCashPayment)
                
    	DistributionsByCashAllocationCodeRel	
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup			= CashCode.CashManagementGroup	
                related.CashCode					= CashCode
                related.CashLedgerSourceRecord		= CashLedgerSourceRecord
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = BankTransactionCode
                and    related.CashLedgerGLDistribution.TransactionIDNumber  = CashLedgerTransaction
                and   !related.CashLedgerGLDistribution.DistributionType.FundCashPayment
                and	   related.CashAllocationCode = LocalCashAllocationCode)	 
                
        DistributionsWithAnyCashAllocationCodesRel  
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup			= CashCode.CashManagementGroup	
                related.CashCode					= CashCode
                related.CashLedgerSourceRecord		= CashLedgerSourceRecord
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = BankTransactionCode
                and    related.CashLedgerGLDistribution.TransactionIDNumber  = CashLedgerTransaction
                and   !related.CashLedgerGLDistribution.DistributionType.FundCashPayment
                and	   related.CashAllocationCode entered)	  

		PaymentCashAccountDistributionsRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "E"
            Instance Selection
            	where ((related.RecordType.APCashLedgerPaymentDistribution
            	or      related.RecordType.CashCodeDistribution)
            	and     related.GLFinanceCodeBlock.GeneralLedgerChartAccount = CompanyCashCode.CashAccount.GeneralLedgerChartAccount)

        FundCashPaymentDistributionsRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= CashCode.CashManagementGroup
                related.CashCode 				= CashCode
                related.CashLedgerSourceRecord	= CashLedgerSourceRecord
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber  = CashLedgerTransaction
                and   related.CashLedgerGLDistribution.DistributionType.FundCashPayment)

		CashCodeFundEditRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance

		CashCodeFundEditByFundRel
			one-to-one relation to CashCodeFundEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.CashManagementGroup		= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.CashCode				= CashCode
		 		related.AccountingEntity		= LocalToAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
		 		related.FinanceDimension1		= LocalFinanceDimension1

		ExceedesCashCodeFundBalanceRel
			one-to-many relation to CashCodeFundEdit
			Field Mapping uses ByExceedesFundBalance
		 		related.CashManagementGroup		= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.ExceedesFundBalance		= true

		CashCodeFundRel
			one-to-one relation to CashCodeFund
			Field Mapping uses ByAccountingEntityFund
				related.CashManagementGroup		= CashManagementGroup
				related.CashCode				= CashCode
				related.AccountingEntity		= LocalToAccountingEntity
		 		related.AccountingUnit			= LocalAccountingUnit
				related.FinanceDimension1		= LocalFinanceDimension1

        OldCashCodeDistributionsRel
            classic name is CBDISTRIB
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= CashCode.CashManagementGroup	
                related.CashCode				= old CashCode
                related.CashLedgerSourceRecord	= CashLedgerSourceRecord
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = BankTransactionCode
                and   related.CashLedgerGLDistribution.TransactionIDNumber  = CashLedgerTransaction)

        CashLedgerElectronicFundsTransferTransactionRel
            classic name is CBFTTRANS
            one-to-many relation to CashLedgerElectronicFundsTransferTransaction
            Field Mapping uses Set3
            	related.CashManagementGroup												 = CashCode.CashManagementGroup
                related.CashCode                                            			 = CashCode
                related.CashLedgerElectronicFundsTransferTransaction.BankTransactionCode = BankTransactionCode
                related.TransactionNumber                                                = TransactionNumber

        CashLedgerElectronicFundsTransferTransactionsRejectedRel
            classic name is CBFTTRANS
            one-to-many relation to CashLedgerElectronicFundsTransferTransaction
            Field Mapping uses Set3
            	related.CashManagementGroup												 = CashCode.CashManagementGroup
                related.CashCode                                            			 = CashCode
                related.CashLedgerElectronicFundsTransferTransaction.BankTransactionCode = BankTransactionCode
                related.TransactionNumber                                                = TransactionNumber
            Instance Selection
                where (related.Status.ElectronicFundsRejectedNotReinstated
                or     related.Status.ElectronicFundsRejectedReinstated)
                










        CashLedgerPaymentOTORel	
            classic name is CBPAYMENT
            one-to-one relation to CashLedgerPayment
            Field Mapping uses symbolic key
            	related.CashManagementGroup   					= CashManagementGroup
            	related.CashCode			   					= CashCode
                related.CashLedgerPayment.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerPayment.TransactionIDNumber 	= CashLedgerTransaction

        CashLedgerCashReceiptDetailRel
            classic name is CBRECPTDTL
            one-to-many relation to CashLedgerCashReceiptDetail
            Field Mapping uses symbolic key
            	related.CashManagementGroup		= CashCode.CashManagementGroup	
                related.CashCode 				= CashCode
            Instance Selection
                where (related.CashLedgerCashReceiptHeader.BankTransactionCode = BankTransactionCode
                and   related.CashLedgerCashReceiptHeader.TransactionNumber = TransactionNumber)

        CashLedgerCashReceiptHeaderRel
            classic name is CBRECPTHDR
            one-to-one relation to CashLedgerCashReceiptHeader
            valid when (IsCashReceiptEntry)

            Field Mapping uses symbolic key
            	related.CashManagementGroup 							= CashCode.CashManagementGroup
                related.CashCode                           				= CashCode
                related.CashLedgerCashReceiptHeader.BankTransactionCode = BankTransactionCode
                related.CashLedgerCashReceiptHeader.TransactionNumber   = TransactionNumber

        CashLedgerReturnedPaymentRel
            classic name is CBRETPMT
            one-to-one relation to CashLedgerReturnedPayment
            Field Mapping uses symbolic key
            	related.CashManagementGroup 						  = CashCode.CashManagementGroup
                related.CashCode                         			  = CashCode
                related.CashLedgerReturnedPayment.BankTransactionCode = BankTransactionCode
                related.CashLedgerReturnedPayment.TransactionIDNumber = CashLedgerTransaction

        CashLedgerFundTransferDetailRel
            classic name is CBTRFDTL
            one-to-many relation to CashLedgerFundTransferDetail
            Field Mapping uses Set3
            Instance Selection
                where (related.CashLedgerFundTransferDetail.DetailCashCode = CashCode
                and   related.CashLedgerFundTransferHeader = TransactionNumber)

        CashLedgerFundTransferHeaderRel
            classic name is CBTRFHDR
            one-to-one relation to CashLedgerFundTransferHeader
            valid when (IsTransferHeader)
            Field Mapping uses symbolic key
            	related.CashManagementGroup 		 = CashCode.CashManagementGroup
                related.CashCode        			 = CashCode
                related.CashLedgerFundTransferHeader = TransactionNumber

        PayablesBillOfExchangeRel
            classic name is APDRAFTS
            one-to-one relation to PayablesBillOfExchange
            valid when (IsBilOfExchangePayment)
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= CashManagementGroup
                related.BankTransactionCode    	= BankTransactionCode
                related.PayablesBillOfExchange 	= CashLedgerTransaction
                
        PayablesBillOfExchangeDistributionRel
        	one-to-many relation to PayablesBillOfExchangeDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup		= CashManagementGroup	
                related.BankTransactionCode    	= BankTransactionCode
                related.PayablesBillOfExchange 	= CashLedgerTransaction

        FinancialInstitutionBranchRel
            classic name is CBBANKENT
            one-to-one relation to FinancialInstitutionBranch
            required
            Field Mapping uses symbolic key
            	related.CashManagementGroup 		= CashManagementGroup
            	related.FinancialInstitution		= CashCode.FinancialInstitution
                related.FinancialInstitutionBranch 	= CashCode.FinancialInstitutionBranch
                
		GLEntryDistributionsRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "E"

		GLEntryDistributionsUnreleasedRel 
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "E"
         	Instance Selection
                where (related.Status.Unreleased)
                       
        GLEntryDistributionsReleasedRel
        	one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "E"
			Instance Selection
                where (related.Status.Released)
                
		GLEntryDistributionsPostedRel
        	one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "E"
     		Instance Selection
                where (related.Status.Posted)
                
		GLStaleDateDistributionsRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "S"

		GLStaleDateDistributionsReleasedRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "S"
			Instance Selection
                where (related.Status.Released)
                
		GLStaleDateDistributionsPostedRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "S"
			Instance Selection
                where (related.Status.Posted)
                
		GLReconcileDistributionsRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "R"

		GLReconcileDistributionsReleasedRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "R"
			Instance Selection
                where (related.Status					 				= 1)
                
		GLReconcileDistributionsPostedRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "R"
			Instance Selection
                where (related.Status					 				= 9)
                
		GLUnreleasedDistributionsRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
			Instance Selection
                where (related.Status					 				= 0)
 
 		ReleasedDistributionsRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1 
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
			Instance Selection
                where (related.Status					 				= 1)

        CashLedgerTransactionsRel
            one-to-many relation to CashLedgerTransaction
            Field Mapping uses Set6
			Instance Selection
				where (related.CashManagementGroup  	= CashManagementGroup
                and    related.CashCode 				= CashCode
                and    related.BankTransactionCode 	  	= BankTransactionCode
				and    related.TransactionNumber	  	= TransactionNumber
				and    related.CashLedgerTransaction   != CashLedgerTransaction)
		
		CashCodesForAccountRel														
			one-to-many relation to CashCode
			Field Mapping uses ByBankAccount
				related.CashManagementGroup		= CashManagementGroup
				related.BankAccountNumber		= CashCode.BankAccountNumber
		CashLedgerTransactionsByAccountRel											
            one-to-many relation to CashLedgerTransaction
            Field Mapping uses Set6
				related.CashManagementGroup  	= CashManagementGroup
                related.CashCode 				= CashCodesForAccountRel.CashCode
                related.BankTransactionCode  	= BankTransactionCode
				related.TransactionNumber	  	= TransactionNumber
			Instance Selection
				where (related.CashLedgerTransaction   != CashLedgerTransaction)
		CashLedgerTransactionsSummarizedAndReleasedRel
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses Set4	
				related.CashManagementGroup					= CashManagementGroup
				related.BankTransactionCode					= BankTransactionCode
				related.CashCode							= CashCode	
				related.LastElectronicPaymentSerialNumber	= LastElectronicPaymentSerialNumber
			Instance Selection

				where (related.Status.Open		
				and    related.PayGroup						= PayGroup
				and    related.CashLedgerTransaction		!= CashLedgerTransaction)

        CashLedgerTransactionsSummarizedAndProcessedRel
            one-to-many relation to CashLedgerTransaction
            Field Mapping uses Set4	
            	related.CashManagementGroup					= CashManagementGroup
                related.BankTransactionCode 	  			= BankTransactionCode
                related.CashCode 							= CashCode
				related.LastElectronicPaymentSerialNumber	= LastElectronicPaymentSerialNumber
			Instance Selection
				where (related.Status						> LocalStatus
				and    related.PayGroup						= PayGroup
				and    related.CashLedgerTransaction   	   != CashLedgerTransaction)

        CashLedgerPayablesPaymentRel
            one-to-one relation to CashLedgerPayablesPayment
            Field Mapping uses symbolic key
            	related.CashManagementGroup								= CashManagementGroup
                related.CashCode                        			  	= CashCode
                related.CashLedgerSourceRecord						  	= CashLedgerSourceRecord
                related.CashLedgerPayablesPayment.BankTransactionCode	= BankTransactionCode
                related.CashLedgerPayablesPayment.TransactionIDNumber	= CashLedgerTransaction

		CashLedgerPayablesPaymentsByTranNbrRel
			one-to-many relation to CashLedgerPayablesPayment
			Field Mapping uses Set4
			Instance Selection
				where (related.CashCode 						 			 = CashCode
				and    related.CashLedgerPayablesPayment.BankTransactionCode = BankTransactionCode
				and    related.TransactionNumber	  						 = TransactionNumber)
				
        CashLedgerPayablesPaymentsBySerialNbrRel
            classic name is CBCHECK-SUMM
            one-to-many relation to CashLedgerPayablesPayment
            Field Mapping uses Set5
            	related.CashManagementGroup 						  = CashManagementGroup
                related.CashCode                        			  = CashCode
                related.CashLedgerPayablesPayment.BankTransactionCode = BankTransactionCode
                related.LastElectronicPaymentSerialNumber             = LastElectronicPaymentSerialNumber

        CashLedgerPayablesPaymentsPayGroupRel
            classic name is CBCHECK-SUMM
            one-to-many relation to CashLedgerPayablesPayment
            Field Mapping uses Set5
            	related.CashManagementGroup 						  = CashManagementGroup
                related.CashCode                         			  = CashCode
                related.CashLedgerPayablesPayment.BankTransactionCode = BankTransactionCode
                related.LastElectronicPaymentSerialNumber             = LastElectronicPaymentSerialNumber
			Instance Selection
				where (related.PayGroup	 							  		= PayGroup
				and   (!BankTransactionCode.AllowDetailPaymentReject									
				or    (BankTransactionCode.AllowDetailPaymentReject
				and    related.CashLedgerPayablesPayment.TransactionIDNumber = CashLedgerTransaction)))

		CashLedgerPayablesPaymentsRejectedRel
            one-to-many relation to CashLedgerPayablesPayment
            Field Mapping uses Set5
            	related.CashManagementGroup 							 = CashManagementGroup
                related.CashCode 							 			 = CashCode
                related.CashLedgerPayablesPayment.BankTransactionCode	 = BankTransactionCode
                related.LastElectronicPaymentSerialNumber				 = LastElectronicPaymentSerialNumber
			Instance Selection
                where ((related.Status 									 = 3 
                or     related.Status									 = 4)
				and    related.PayGroup	  								 = PayGroup)

        CashLedgerFundTransferDetailsRel
            one-to-many relation to CashLedgerFundTransferDetail
            Field Mapping uses Set3
                related.CashLedgerFundTransferDetail.DetailCashCode	= CashCode
                related.CashLedgerFundTransferHeader                	= TransactionNumber
			Instance Selection            				
                where (related.BankTransactionCode 	  	            	= BankTransactionCode)

        CashLedgerConsolidationCurrentDayRel
            one-to-one relation to CashLedgerConsolidation
            Field Mapping uses Set4
            	related.CashManagementGroup 						= CashManagementGroup
                related.CashCode									= CashCode
                related.CashLedgerConsolidation.BankTransactionCode = LocalBankTransactionCode
				related.CashLedgerConsolidation.Company 			= LocalCompany
                related.CashLedgerConsolidation.LastMaintenanceDate = current corporate date

        CashLedgerConsolidationOtherCurrentDayRel
            one-to-one relation to CashLedgerConsolidation
            Field Mapping uses Set4
            	related.CashManagementGroup 						= CashManagementGroup
                related.CashCode									= CashCode
                related.CashLedgerConsolidation.BankTransactionCode = LocalOtherBankTransactionCode
				related.CashLedgerConsolidation.Company 			= LocalOtherCompany
                related.CashLedgerConsolidation.LastMaintenanceDate = current corporate date

        CashLedgerConsolidationsOtherCompaniesRel
            one-to-many relation to CashLedgerConsolidation
			Field Mapping uses Set4
				related.CashManagementGroup 						= CashManagementGroup
				related.CashCode									= CashCode
                related.CashLedgerConsolidation.BankTransactionCode = LocalBankTransactionCode 
			Instance Selection
				where (related.CashLedgerConsolidation.Company 		    	not = Company.OrigCompany
				and    related.CashLedgerConsolidation.Company				entered
				and    related.CashLedgerConsolidation.LastMaintenanceDate 	not = current corporate date
				and	  (related.CashLedgerConsolidation.BankEndingBalance 	entered
				or	   related.CashLedgerConsolidation.OpenEndingBalance 	entered
				or	   related.CashLedgerConsolidation.AccountEndingBalance entered))

		CashLedgerConsolidationsOtherBankTransactionCodesRel
			one-to-many relation to CashLedgerConsolidation
			Field Mapping uses Set4
				related.CashManagementGroup		= CashManagementGroup
				related.CashCode				= CashCode
			Instance Selection
				where  (related.CashLedgerConsolidation.LastMaintenanceDate 	not = current corporate date
				and	   ((related.CashLedgerConsolidation.BankTransactionCode 	not = CashLedgerTransaction.BankTransactionCode
				and		related.CashLedgerConsolidation.BankTransactionCode 	entered)
				or	   (related.CashLedgerConsolidation.BankTransactionCode 	    = CashLedgerTransaction.BankTransactionCode
				and	 	related.CashLedgerConsolidation.Company 		   		not = Company.OrigCompany))
				and   ((related.CashLedgerConsolidation.BankEndingBalance 		entered
				or      related.CashLedgerConsolidation.OpenEndingBalance 		entered
				or		related.CashLedgerConsolidation.AccountEndingBalance 	entered)))

        CashLedgerConsolidationsPreviousDayRel
            one-to-many relation to CashLedgerConsolidation
            Field Mapping uses Set5
            	related.CashManagementGroup		= CashManagementGroup
                related.CashCode				= CashCode
			Instance Selection            				
                where (related.CashLedgerConsolidation.LastMaintenanceDate 	< current corporate date
                and    related.CashLedgerConsolidation.BankTransactionCode 	= LocalBankTransactionCode
				and    related.CashLedgerConsolidation.Company 				= LocalCompany)

		CashLedgerConsolidationsOtherPreviousDayRel
            one-to-many relation to CashLedgerConsolidation
            Field Mapping uses Set5
            	related.CashManagementGroup		= CashManagementGroup
                related.CashCode				= CashCode
			Instance Selection
                where (related.CashLedgerConsolidation.LastMaintenanceDate 	< current corporate date
                and    related.CashLedgerConsolidation.BankTransactionCode 	= LocalOtherBankTransactionCode
				and    related.CashLedgerConsolidation.Company 				= LocalOtherCompany)

	    TransactionsByStatusRel	
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses Set5
				related.CashManagementGroup	= CashManagementGroup
				related.Status	  			= Status

		CashCodeTransactionCodeRel
			one-to-many relation to CashCodeTransactionCode
			Field Mapping uses symbolic key
				related.CashManagementGroup	= CashManagementGroup
				related.CashCode			= CashCode
			Instance Selection
				where (related.CashCodeTransactionCode.Active	 	= true)
				
        StaleDatingGLAccountRel
			one-to-many relation to StaleDatingGLAccount
            Field Mapping uses symbolic key
            	related.Company             = Company
                related.CashCode            = CashCode
			Instance Selection
            	where (related.PayablesCompanyProcessLevel !entered)

        StaleDatingGLAccountByProcessLevelRel
			one-to-one relation to StaleDatingGLAccount
            Field Mapping uses symbolic key
            	related.Company                                        		= Company.OrigCompany
                related.CashCode                                       		= CashCode
                related.PayablesCompanyProcessLevel.PayablesCompany    		= PayablesCompanyVendorProcLevel.PayablesCompany
                related.PayablesCompanyProcessLevel.PayablesProcessLevel    = PayablesCompanyVendorProcLevel.PayablesProcessLevel

		CurrentApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ApprovalCode
				related.ApprovalLevel			= ApprovalLevel

		ApprovalCodeResourceRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ApprovalCode

		LocalApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.ApprovalCode			= ApprovalCode
				related.ApprovalLevel			= LocalApprovalLevel
		
		FinanceTeamMembersFromCurrentApprovalLevelRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.FinanceTeam				= first CurrentApprovalCodeLevelRel.ApprovalTeam
							
		ApprovalCodeResourceByResourceRel					
			one-to-one relation to ApprovalCodeResource
			Field Mapping uses ByApprover
				related.FinanceEnterpriseGroup	= CashManagementGroup.FinanceEnterpriseGroup
				related.ApprovalCode			= ApprovalCode
				related.Approver				= LocalApprover

		FinanceTeamMemberRel
			one-to-one relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= CashManagementGroup
				related.FinanceTeam						= ApproverTeam
				related.FinanceTeamMember.TeamMember	= actor.agent(Employee).Employee

		PfiConfigurationFromEmailPropertyRel 
			one-to-one relation to PfiConfigurationProperty
			Field Mapping uses symbolic key
				related.PfiConfiguration			= "main"
				related.PfiConfigurationProperty	= "FinanceAdminFromEmailAddress"

		ReissuedCashLedgerPaymentRel
			one-to-one relation to CashLedgerPayment
			Field Mapping uses ByReissueOriginalIdentifier
				related.CashManagementGroup			= CashManagementGroup
				related.ReissueOriginalIdentifier	= CashLedgerTransactionIdentifier

		CompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= LocalCompanyGroup
				related.Company						= Company.OrigCompany

		CashCodeGroupDetailRel
			one-to-one relation to CashCodeGroupDetail
			Field Mapping uses symbolic key
				related.CashManagementGroup			= CashManagementGroup
				related.CashCodeGroup				= LocalCashCodeGroup
				related.CashCode					= CashCode

		TempCashCodeGroupDetailRel
			one-to-one relation to CashCodeGroupDetail
			Field Mapping uses symbolic key
				related.CashManagementGroup			= CashManagementGroup
				related.CashCodeGroup				= TempCashCodeGroup
				related.CashCode					= CashCode

		APCompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "AP"
				related.Company						= PayablesCompanyVendorProcLevel.PayablesCompany

		ARCompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "AR"
				related.Company						= ReceivablesCompanyProcessLevel.ReceivableCompany

		CBCompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode		= "CB"
				related.Company						= Company
				
		HeaderBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup			= CashManagementGroup
				related.BudgetEditError.BudgetEditGroup	= UniqueID

		DistributionBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByHeaderUniqueID
				related.FinanceEnterpriseGroup			= CashManagementGroup
				related.HeaderUniqueID                  = UniqueID
				
		GeneralLedgerSystemCodeRel		
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.GeneralLedgerSystemCode	= "CB"	

		GLCommitRel		
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID	
				related.FinanceEnterpriseGroup		= CashManagementGroup
				related.HeaderUniqueID	= UniqueID



		OpenGLCommitDrillRel	
			one-to-many relation to GLCommit
			Field Mapping uses BySystemAndHeaderUniqueID
				related.FinanceEnterpriseGroup    = CashManagementGroup
				related.HeaderUniqueID 			  = UniqueID
			Instance Selection
				where (related.Status = 0
				or     related.Status = 2
				or     related.Status = 3)

		GLCommitDocumentsRel	
			one-to-one relation to GLCommitDocument
			Field Mapping uses ByHeaderObjectReference
				related.HeaderObjectReference = reference to this instance







	
		BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup                    = CashManagementGroup
				related.BudgetTemplateGroupTotal.BudgetEditGroup  = UniqueID

		CashLedgerTransactionImportInErrorRel
			one-to-many relation to CashLedgerTransactionImport
			Field Mapping uses ByCashLedgerTransactionInError
	           	related.CashManagementGroup								= CashManagementGroup
                related.CashLedgerTransactionImport.CashCode			= CashCode
                related.CashLedgerTransactionImport.BankTransactionCode	= BankTransactionCode
                related.CashLedgerTransactionInError					= CashLedgerTransaction

		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "CASHLEDGERTRANSACTION"			
				related.AppsValue	= DerivedAppsValue











		CashLedgerAutoTranNumbersRel
			one-to-many relation to CashLedgerAutoTranNumber
            Field Mapping uses symbolic key
            	related.CashManagementGroup 				= CashManagementGroup
                related.CashLedgerDocumentType				= CashLedgerDocumentType.CashLedgerTransaction
            Instance Selection	
            	where (related.CashLedgerAutoTranNumber		= TransactionNumber
            	and    related.DocumentCashCode				= CashCode
            	and    related.DocumentBankTransactionCode	= BankTransactionCode
				and    related.AutoNumberStatus.NumberAssignedToDocument)

        VendorLocationRel	
            one-to-one relation to VendorLocation
            Field Mapping uses symbolic key
                related.VendorGroup    = LocalVendorGroup
                related.Vendor         = LocalVendor
                related.VendorLocation = LocalVendorLocation

        VendorRel	
            one-to-one relation to Vendor
            Field Mapping uses symbolic key
                related.VendorGroup    = LocalVendorGroup
                related.Vendor         = LocalVendor
		
		CashLedgerTransactionErrorRel is a CashLedgerTransactionError set	
		
		CashLedgerTransactionErrorMassReleaseRel	
			one-to-many relation to CashLedgerTransactionError
			Field Mapping uses ByMassReleaseTransactionsErrorSource
				related.CashManagementGroup			= CashManagementGroup
				related.ErrorSource					= 4	
				related.CashLedgerMassReleaseResult = CashLedgerMassReleaseResult
				related.CashLedgerTransaction		= CashLedgerTransaction

		StaleDateOutputFileDetailRel
			one-to-one relation to StaleDateOutputFileDetail
			Field Mapping uses symbolic key
				related.CashManagementGroup			= CashManagementGroup
				related.StaleDateOutputFileHeader	= LocalStaleDateOutputFileHeader
				related.StaleDateOutputFileDetail	= LocalStaleDateOutputFileDetail
				
		EscheatmentOutputFileDetailRel
			one-to-one relation to EscheatmentOutputFileDetail
			Field Mapping uses symbolic key
				related.CashManagementGroup			= CashManagementGroup
				related.EscheatmentOutputFileHeader	= LocalEscheatmentOutputFileHeader
				related.EscheatmentOutputFileDetail	= LocalEscheatmentOutputFileDetail
				
		SelectedForWriteOffRel	
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Status = Status.WriteOff
				and related.WriteOffProcessed = false)

		WireTransferBatchDetailRel	
			one-to-many relation to WireTransferBatchDetail
            Field Mapping uses ByCashLedgerTransactionIdentifier
            	related.CashManagementGroup				= CashManagementGroup
                related.CashLedgerTransactionIdentifier	= CashLedgerTransactionIdentifier

		GLTransactionDetailRel		
			one-to-one relation to GLTransactionDetail
			Field Mapping uses ByOriginatingTransaction		 
				related.OriginatingTransaction	= reference to first CashLedgerGLDistributionsRel

		ProjectPeriodOfPerformanceRel	
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= CashManagementGroup
				related.Project                 = LocalPeriodOfPerformanceProject
				related.GeneralLedgerSystemCode = LocalPeriodOfPerformanceSystem

		CurrentGeneralLedgerCalendarPeriodRel	
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= CashManagementGroup
				related.GeneralLedgerCalendarPeriod			= Company.OrigCompany.AccountingEntity.CurrentPeriod.GeneralLedgerCalendarPeriod	
		
		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "PayableTransaction"
            	related.FSMBODConfiguration.Direction 	= 1

		EnteredCashLedgerGLDistributionsRel
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses Alternate1
            	related.CashManagementGroup 							= CashManagementGroup
            	related.CashCode										= CashCode
            	related.CashLedgerSourceRecord							= CashLedgerSourceRecord
                related.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
                related.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
                related.CashLedgerGLDistribution.DistributionType		= "E"
            Instance Selection
            	where (related.RecordType.NotACashCodeDistribution)
            	
		UnreleasedCashLedgerTransactionsErrorRel
			one-to-many relation to CashLedgerJobResultError
            Field Mapping uses ByCompanyErrorType
            	related.CashManagementGroup 							= LocalCashManagementGroup
            	related.CashLedgerJobResult								= LocalCashLedgerJobResult
            	related.Company											= LocalCompany
            	related.ErrorType										= 1 
        
        PendingApprovalCashLedgerTransactionsErrorRel
			one-to-many relation to CashLedgerJobResultError
            Field Mapping uses ByCompanyErrorType
            	related.CashManagementGroup 							= LocalCashManagementGroup
            	related.CashLedgerJobResult								= LocalCashLedgerJobResult
            	related.Company											= LocalCompany
            	related.ErrorType										= 2 
       	
       	PendingStopPayConfirmationCashLedgerTransactionsErrorRel
			one-to-many relation to CashLedgerJobResultError
            Field Mapping uses ByCompanyErrorType
            	related.CashManagementGroup 							= LocalCashManagementGroup
            	related.CashLedgerJobResult								= LocalCashLedgerJobResult
            	related.Company											= LocalCompany
            	related.ErrorType										= 3 
            	
    	VoidOrStopPaymentCashLedgerTransactionsErrorRel
			one-to-many relation to CashLedgerJobResultError
            Field Mapping uses ByCompanyErrorType
            	related.CashManagementGroup 							= LocalCashManagementGroup
            	related.CashLedgerJobResult								= LocalCashLedgerJobResult
            	related.Company											= LocalCompany
            	related.ErrorType										= 4 

		CashLedgerGLDistributionsRequiringCustodialAccountRel		
            one-to-many relation to CashLedgerGLDistribution
            Field Mapping uses symbolic key
            	related.CashManagementGroup 	= CashCode.CashManagementGroup
                related.CashCode 				= CashCode
                related.CashLedgerSourceRecord	= CashLedgerSourceRecord
            Instance Selection
                where (related.CashLedgerGLDistribution.BankTransactionCode = BankTransactionCode
                and    related.CashLedgerGLDistribution.TransactionIDNumber  = CashLedgerTransaction
                and   !related.CashLedgerGLDistribution.DistributionType.FundCashPayment
				and    related.CustodialAccountRequiredForFund)       	
#ifdef module cam
		CustodialAccountEditRel							
			one-to-many relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.FinanceEnterpriseGroup	= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance

		CustodialAccountEditByPostingRel					
			one-to-one relation to CustodialAccountEdit
			Field Mapping uses ByOriginatingTransaction
		 		related.FinanceEnterpriseGroup	= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.AccountingEntity		= LocalToAccountingEntity
		 		related.FinanceDimension10		= LocalFinanceDimension10

		ExceedsCustodialAccountBalanceRel		
			one-to-many relation to CustodialAccountEdit
			Field Mapping uses ByExceedsBalance
		 		related.FinanceEnterpriseGroup	= CashManagementGroup
		  		related.OriginatingTransaction	= reference to this instance
		 		related.ExceedsBalance			= true
#endif

		FESGLTransactionsRel
			one-to-many relation using GLEntryDistributionsUnreleasedRel
			Instance Selection
				where (related.CreatedByFES)

		CashLedgerTransactionDetailRel
			one-to-many relation to CashLedgerTransactionDetail
			Field Mapping uses ByCashLedgerTransaction
				related.CashManagementGroup				= CashManagementGroup
				related.CashManagementAccount			= CashManagementAccount
				related.CashLedgerSourceRecord			= CashLedgerSourceRecord
				related.CashLedgerTransaction			= CashLedgerTransaction

		CompanySecurityGroupMemberRel		
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company                     = Company.OrigCompany
		
		LocalCashLedgerFundTransferHeaderRel			 
			one-to-one relation to CashLedgerFundTransferHeader
			Field Mapping uses symbolic key
				related.CashManagementGroup 		 = CashManagementGroup
				related.CashCode        			 = LocalFundHeaderCashCode
				related.CashLedgerFundTransferHeader = TransactionNumber

		RelatedFundTransferTransactionsRel				 
			one-to-many relation to CashLedgerTransaction
			Field Mapping uses Set6
				related.CashManagementGroup		= CashManagementGroup
				related.CashCode				= LocalCashCode
				related.BankTransactionCode		= LocalBankTransactionCode
				related.TransactionNumber		= TransactionNumber


    Sets













        Set2
            indexed
            Sort Order
            	CashManagementGroup
                CashCode
                PeriodDate
                BankTransactionCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerTransaction
                CashLedgerSourceRecord

        Set3
            indexed
            Sort Order
            	CashManagementGroup
                CashCode
                BankTransactionCode
                SourceCode
                TransactionNumber
                TransactionNumberSuffix
                Company.OrigCompany
                CashLedgerTransaction
                CashLedgerSourceRecord

        Set4
            indexed
            Instance Selection
                where (IsElectronicPayment)
            Sort Order
            	CashManagementGroup
                BankTransactionCode
                CashCode
                LastElectronicPaymentSerialNumber
                CashLedgerTransaction
                CashLedgerSourceRecord
				
        Set5
            indexed
            Sort Order
            	CashManagementGroup
                Status
                Company.OrigCompany
                CashCode
                BankTransactionCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerTransaction
                CashLedgerSourceRecord

        Set6
            indexed
            Sort Order
            	CashManagementGroup
                CashCode
                BankTransactionCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerTransaction
                CashLedgerSourceRecord

        Set7
            indexed
            Sort Order
            	CashManagementGroup
                CashCode
                IssueDate descending
                BankTransactionCode
                SourceCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerTransaction
                CashLedgerSourceRecord

        Set8
            indexed
            Sort Order
            	CashManagementGroup
                Company.OrigCompany
                Status
                BankTransactionCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerTransaction
                CashLedgerSourceRecord

        ByReference
            indexed
            Sort Order
            	CashManagementGroup
                CashCode
                Reference
                BankTransactionCode
                CashLedgerTransaction
                CashLedgerSourceRecord

		ByCashManagementAccount
			indexed
			Sort Order
				CashManagementGroup
				CashManagementAccount
				Status
				CashCode
                BankTransactionCode
                TransactionNumber
                CashLedgerTransaction
                CashLedgerSourceRecord

		ByCashLedgerTransactionIdentifier
			indexed


			Sort Order
				CashManagementGroup
				CashLedgerTransactionIdentifier
                TransactionNumber
                CashCode
                BankTransactionCode
                CashLedgerTransaction
                CashLedgerSourceRecord

		ByPayeeName				
			indexed
			Sort Order
				CashManagementGroup
				PayeeName
                TransactionNumber
                CashCode
                BankTransactionCode
                CashLedgerTransaction
                CashLedgerSourceRecord

		ByTransactionIdentifierSequenceNumber
			indexed
			Instance Selection
				where (HasTransactionIdentifierSequenceNumber)
			Sort Order
				CashManagementGroup
				TransactionIdentifierSequenceNumber

		ByCashLedgerBatchApproval	  
			Sort Order
				CashManagementGroup
				CashLedgerBatchApproval
				CashCode
				CashLedgerTransaction
				BankTransactionCode
				CashLedgerSourceRecord

		ByIssueDate
            Sort Order
                CashManagementGroup
                IssueDate
                CashCode
                BankTransactionCode
                SourceCode
                TransactionNumber
                TransactionNumberSuffix
                CashLedgerTransaction
                CashLedgerSourceRecord

	StateCycles
		CashLedgerTransactionLifeCycle is a StateCycle
			state field is Status

			Unreleased is a State
				Create is a Create Action
					completion message is "<CompletionMessage>"
					Entrance Rules
						if (TransactionNumber entered)
							if (AutoNumberingAllowed)
								constraint (AutoNumberingAction entered)
									"CannotEnterTransactionNumber;AutoNumberingSetup"
							else	
								include StripLeadingSpaces	
							include CheckForDuplicates
						else
							if (ImportStatus entered)
								constraint (SourceCode != "AP")
									"TransactionNumberRequiredForAPImportedTransactions"
							if (SourceCode != "AP")
								constraint (AutoNumberingAllowed)
									"TransactionNumberRequired"





						if (UseCashAllocationCode)	
							include CashAllocationCodeEdits	

					Action Rules
						if (SourceCode != "AP" 
						and AutoNumberingAllowed 
						and TransactionNumber not entered)
							include GetAutoNumberByLevel
							invoke AutoCreate CashLedgerAutoTranNumber
								assign result to LocalCashLedgerAutoTranNumber
								invoked.CashManagementGroup			= CashManagementGroup
								invoked.CashLedgerDocumentType		= CashLedgerDocumentType.CashLedgerTransaction
								invoked.OriginatingTransaction		= reference to this instance
								invoked.CreateOperator				= actor
								invoked.CreateDate					= current timestamp
								invoked.Company 					= AutoNumberByCompany
								invoked.CashCode					= AutoNumberByCashCode
								invoked.BankTransactionCode			= AutoNumberByBankTransactionCode
								invoked.DocumentCashCode			= CashCode
								invoked.DocumentBankTransactionCode	= BankTransactionCode
		
							LocalTransactionNumber			= LocalCashLedgerAutoTranNumber.CashLedgerAutoTranNumber
							if (LocalCashLedgerAutoTranNumber.AutoNumberStatus.CannotBeAssignedAlreadyInUse)
								DuplicateTranNumberFound 	= true
							
							while (DuplicateTranNumberFound)
								invoke AutoCreate CashLedgerAutoTranNumber
									assign result to LocalCashLedgerAutoTranNumber
									invoked.CashManagementGroup			= CashManagementGroup
									invoked.CashLedgerDocumentType		= CashLedgerDocumentType.CashLedgerTransaction
									invoked.OriginatingTransaction		= reference to this instance
									invoked.CreateOperator				= actor
									invoked.CreateDate					= current timestamp
									invoked.Company 					= AutoNumberByCompany
									invoked.CashCode					= AutoNumberByCashCode
									invoked.BankTransactionCode			= AutoNumberByBankTransactionCode
									invoked.DocumentCashCode			= CashCode
									invoked.DocumentBankTransactionCode	= BankTransactionCode
								LocalTransactionNumber			= LocalCashLedgerAutoTranNumber.CashLedgerAutoTranNumber
								DuplicateTranNumberFound		= false
								if (LocalCashLedgerAutoTranNumber.AutoNumberStatus.CannotBeAssignedAlreadyInUse)
									DuplicateTranNumberFound	= true
								
							TransactionNumber	= LocalTransactionNumber
								
						if (IssuedBankAmount = AppliedDistributionBankAmount)
							CompletionMessage = TransactionCreatedMessage
						else
							CompletionMessage = TransactionOutOfBalanceMessage
							
					Exit Rules
						if (TransientCashAllocationCode entered)	
							invoke AutoCreateDistributions			
						initialize TransientCashAllocationCode		
						initialize TransientCashAllocationAmount	
						initialize UseCashAllocationCode		

				CopyTransaction is an Instance Action
					Parameters
						PrmTransactionNumber			is a TransactionNumber
							default label is "NewTransactionNumber"
						PrmIssueDate					is Date
							default label is "IssueDate"
						PrmPostDate						is Date
						 	default label is "PostDate"	

					Parameter Rules
						PrmIssueDate					
							required
						PrmPostDate						
							required

					Action Rules
						invoke CreateFromTransaction
							invoked.PrmCashManagementGroup		= CashManagementGroup
							invoked.PrmCashCode					= CashCode
							invoked.PrmBankTransactionCode		= BankTransactionCode
							invoked.PrmCashLedgerSourceRecord	= CashLedgerSourceRecord
							invoked.PrmCashLedgerTransaction	= CashLedgerTransaction
							invoked.PrmTransactionNumber		= PrmTransactionNumber
							invoked.PrmIssueDate				= PrmIssueDate
							invoked.PrmPostDate					= PrmPostDate


		 		CreateFromTransaction is a Create Action		
					Parameters
						PrmCashManagementGroup			is a CashManagementGroup
							default label is "CashManagementGroup"
						PrmCashCode  				    is a CashCode
							default label is "CashCode"
						PrmBankTransactionCode			is a BankTransactionCode
							default label is "BankTransactionCode"
						PrmCashLedgerSourceRecord		is a CashLedgerSourceRecord
							default label is "CashLedgerSourceRecord"
						PrmCashLedgerTransaction		is a CashLedgerTransaction
							default label is "SelectCashLedgerTransaction"
						PrmTransactionNumber			is a TransactionNumber
							default label is "NewTransactionNumber"
						PrmIssueDate					is Date
							default label is "IssueDate"
						PrmPostDate						is Date
						 	default label is "PostDate"		
					Parameter Rules
						PrmCashCode
							required
						PrmBankTransactionCode
							required
						PrmCashLedgerSourceRecord
							required
							default to "CBT"
						PrmCashLedgerTransaction
							required
							constraint (PrmCashLedgerTransaction.CashLedgerSourceRecord = "CBT")
								"CanOnlyCopyTransactionGeneratedWithinCashLedger"
						PrmIssueDate
							required
						PrmPostDate
							default to PrmIssueDate
					Local Fields

					Action Rules
						invoke Create this instance	
							fill in fields from PrmCashLedgerTransaction
								except invoked.CashLedgerTransaction
								except invoked.CashCode
								except invoked.BankTransactionCode
								except invoked.TransactionIdentifierSequenceNumber
								except invoked.CashLedgerTransactionIdentifier
								except invoked.TransactionNumber
								except invoked.TransactionNumberSuffix
								except invoked.IssueDate
								except invoked.IssuedBaseAmount
								except invoked.ReconciliationData
								except invoked.BankAccountCurrencyExchangeRate
								except invoked.PeriodDate
								except invoked.LastDistributionSequence
								except invoked.Status
								except invoked.ReinstateStatus
								except invoked.BankReconciliationStatus
								except invoked.AppliedDistributionBankAmount
								except invoked.AppliedDistributionBaseAmount
								except invoked.GeneralLedgerPostDate
								except invoked.LastElectronicPaymentSerialNumber
								except invoked.SummaryOption
								except invoked.JournalBook
								except invoked.StatementStatus
								except invoked.JournalBookSequenceNumber
								except invoked.TaxInterface
								except invoked.LastMaintenanceDate
								except invoked.StaleDate
								except invoked.ReconciliationStatementNumber
								except invoked.ReconciliationStatementSuffix
								except invoked.ReconciliationStatementLineNumber
								except invoked.ReconciliationStatementDescription
								except invoked.ReconciliationStatementTransactionNumber
								except invoked.CreatedUser
								except invoked.LastUpdateDate
								except invoked.LastUpdateUser
								except invoked.StaleDateAccount
								except invoked.ApprovalCode
								except invoked.ApprovalLevel
								except invoked.ReassignToApprovalLevel
								except invoked.Approver
								except invoked.ApproverTeam
								except invoked.ApprovalRequestType
								except invoked.CreatedFromBankStatement
								except invoked.CreatedFromBankStatementLine
								except invoked.CreatedFromBankStatementLineDetail
								except invoked.BudgetEditProcessing
								except invoked.OriginatingImportRun
								except invoked.ImportInProcess
								except invoked.ImportStatus
								except invoked.ImportErrorMessage
								except invoked.DistribUserFieldsSearch
								except invoked.StaleDateProcessingStatus
								except invoked.StaleDateOutputFileHeader
								except invoked.EscheatmentProcessingStatus
								except invoked.EscheatmentOutputFileHeader
								except invoked.CashLedgerMassReleaseResult
								except invoked.VoidStopPayAttachment
								except invoked.ConfirmationNumber
							invoked.CashCode				= PrmCashCode
							invoked.BankTransactionCode	 	= PrmBankTransactionCode
							invoked.TransactionNumber		= PrmTransactionNumber
							invoked.IssueDate			 	= PrmIssueDate
							invoked.GeneralLedgerPostDate	= PrmPostDate
						
						for each PrmCashLedgerTransaction.EnteredCashLedgerGLDistributionsRel
							invoke Create CashLedgerGLDistribution
								fill in fields from each
									except invoked.CashCode
									except invoked.CashLedgerGLDistribution.BankTransactionCode
									except invoked.CashLedgerGLDistribution.TransactionIDNumber
									except invoked.CashLedgerGLDistribution.SequenceNumber
									except invoked.TransactionNumber
									except invoked.TransactionNumberSuffix
									except invoked.PostDate
									except invoked.Status
								invoked.CashCode										= PrmCashCode
								invoked.CashLedgerGLDistribution.BankTransactionCode	= PrmBankTransactionCode
								invoked.CashLedgerGLDistribution.TransactionIDNumber	= CashLedgerTransaction
								

				CreateFromCashLedgerWithoutEdits is a Create Action
					default label is untranslatable
					restricted
					Entrance Rules
						LocalBypassRules 		= true	
						BypassBudgetProcessing 	= true	
						if (CashLedgerReturnedPayment entered)
                    		LastDistributionSequence = CashLedgerReturnedPaymentRel.LastDistributionSequence
					Action Rules
					Exit Rules
						include SetAppliedDistributionAmounts
						invoke Unreleased.Release


				CreateFromBatch is a Create Action 
					default label is untranslatable
					restricted
					Parameters
						PrmCreateFromBatchType		is Numeric 2
					Action Rules
						invoke CreateFromBatchTransaction this instance
							invoked.CreateFromBatchType	= PrmCreateFromBatchType
							
				CreateFromEftPaymentCreation is a Create Action
					default label is untranslatable
					restricted
					Entrance Rules
						LocalBypassRules	= true
						BypassBudgetProcessing = true
					Action Rules
					Exit Rules
						include SetAppliedDistributionAmounts
						invoke Unreleased.Release
						
				CreateFromBatchTransaction is a Create Action
					default label is untranslatable
					restricted
					Entrance Rules
						LocalBypassRules	= true
						if (CreateFromBatchType.EftExtractUpdate)
							BypassBudgetEditing	= true	
						if (CreateFromBatchType.PaymentVoidStopPayment
						or  CreateFromBatchType.BOECashingUpdate
						or  CreateFromBatchType.BOEStatementUpdate
						or  CreateFromBatchType.EftPaymentCreation
						or  CreateFromBatchType.CashBatchReleaseReport
						or  CreateFromBatchType.BankPresentationCashingUpdate
				        or  CreateFromBatchType.BankPresentationCashingUpdateWithRemitControl
				        or  CreateFromBatchType.ProcessDishonoredBillOfExchanges)
							BypassBudgetProcessing = true
						if (CreateFromBatchType.PaymentVoidStopPayment)	
							LocalReinstatedPaymentReject = true
						if (CreateFromBatchType.BOECashingUpdate
						or  CreateFromBatchType.BOEStatementUpdate)	
							LocalAPBOE = true
					Action Rules
					Exit Rules
						include SetAppliedDistributionAmounts
						invoke Unreleased.Release

				CreateFromReceivables is a Create Action
					default label is untranslatable
					restricted
					Entrance Rules					
						LocalBypassRules 		= true
						BypassBudgetProcessing 	= true	
					Action Rules
					Exit Rules
						include SetAppliedDistributionAmounts
						invoke Unreleased.Release
							
				CreateFromPayables is a Create Action	
					default label is untranslatable
					restricted
					Entrance Rules					
						LocalBypassRules 		= true	
						LocalBypassCashCodeUpd 	= true
						BypassBudgetProcessing 	= true	
					Action Rules
					Exit Rules
						include SetAppliedDistributionAmounts
						invoke Unreleased.Release















				Update is an Update Action
					completion message is "<CompletionMessage>"
					Entrance Rules
						constraint (!BudgetEditInProgress)		
							"CannotUpdate;BudgetEditInProgress"
						if (ImportStatus not entered)
							if (TransactionNumber changed)
								constraint (TransactionNumber entered)
									"TransactionNumberRequired"
								constraint (!AutoNumberingAllowed)
									"CannotChangeTransactionNumber;AutoNumberingSetup"	
								include StripLeadingSpaces	
								include CheckForDuplicates



							constraint (SourceCode = "CB")
								"CanOnlyMaintainTransactionsWithSourceCodeOfCB"			
							include ReconcileEntranceRules
						if (UseCashAllocationCode)	
							include CashAllocationCodeEdits	
							
					Action Rules
						if (ImportStatus not entered)
							LocalRunProgram = RunProgram.CashLedgerBankTransactionEntry
							include VerifyProcessingMonitorRule
						if (TransientCashAllocationCode entered)	
							invoke AutoCreateDistributions	
					Exit Rules
						if (ImportStatus not entered)
							if (SourceCode = "CB")
								include CheckForRelatedChanges		
							if (IssuedBankAmount = AppliedDistributionBankAmount)
								CompletionMessage = TransactionUpdatedMessage
							else
								CompletionMessage = TransactionOutOfBalanceMessage
						initialize TransientCashAllocationCode		
						initialize TransientCashAllocationAmount
										
				Delete is a Delete Action
					Entrance Rules
						constraint (!BudgetEditInProgress)		
							"CannotDelete;BudgetEditInProgress"
						if (ImportStatus not entered)
							constraint (SourceCode = "CB")
								"CanOnlyDeleteTransactionsWithSourceCodeOfCB"		
						if (CreatedFromBankStatementLineDetail entered)
							invoke Update CreatedFromBankStatementLineDetail
								initialize invoked.CreatedCashLedgerTransaction
						else
						if (CreatedFromBankStatementLine entered)
							invoke Update CreatedFromBankStatementLine
								initialize invoked.CreatedCashLedgerTransaction
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
						or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
							invoke Delete HeaderBudgetEditErrorRel
							invoke Delete DistributionBudgetEditErrorRel 
						if (CashLedgerMassReleaseResult entered)	
							if (CashLedgerTransactionError set exists)
								invoke Delete CashLedgerTransactionError set
					Action Rules
						LocalRunProgram = RunProgram.CashLedgerBankTransactionEntry
						include VerifyProcessingMonitorRule
						if (ImportInProcess)
							confirmation required
								"DeletingAPartiallyImportedRecordWillDeleteAllRelatedCashLedgerTransactionImportRecords"
							invoke DeleteAllRelatedRecords CashLedgerTransactionImportInErrorRel
						else	
							if (ImportStatus entered
							and SourceCode = "AP")
								invoke Delete CashLedgerPayablesPaymentsByTranNbrRel	
						invoke Delete GLEntryDistributionsRel
						if (TransactionNumber is numeric)
							if (CashLedgerAutoTranNumbersRel exists)	
								invoke DocumentDeleteUpdate CashLedgerAutoTranNumbersRel
								
				SubmitForApproval is an Instance Action
					completion message is "SubmitForApprovalHasBeenSubmittedToTheQueueForProcessing"
				 	valid when (CanSubmitForApproval)
					Parameters
						PrmApprovalCode		is a ApprovalCode
							default label is "ApprovalCode"
						PrmCommentText		is a CommentText
							default label is "Comment"
		
					Parameter Rules
						PrmApprovalCode
							initial value is CashCode.ApprovalCode
							default to CashCode.ApprovalCode
							if (!CashManagementGroup.ApprovalCodesNotUsedForCashTransactions)
								required
									"ApprovalCodeIsRequired"
							constraint (!PrmApprovalCode.ApprovalCodeUsesMaximumAmounts)
								"CannotSelectApprovalCodesSetUpForNonBatchedCashLedgerPayments"
					Action Rules
						if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
						and CashLedgerGLDistributionsRequiringCustodialAccountRel exists)	
							confirmation required
								"OneOrMoreDistributionsMayRequireCustodialAccount;Continue?"								
						constraint (!BudgetEditInProgress)		
							"CannotSubmitForApproval;BudgetEditInProgress"
						constraint (IssuedBankAmount = AppliedDistributionBankAmount)
							"CannotSubmitForApproval;TransactionOutOfBalance"		
						if (NotAPAndAR) 
							constraint (CashLedgerGLDistributionsRel exists)
								"CannotRelease;NoDistributionsEntered"
						
						CommentText			+= PrmCommentText
						if (!CashManagementGroup.ApprovalCodesNotUsedForCashTransactions)
							ApprovalCode		 = PrmApprovalCode						
							constraint (ApprovalCode.HasApprovalLevels) 
								"CannotComplete;TheApprovalCodeHasNoApprovalLevels"
							constraint (!ApprovalCode.HasTeamWithNoMembers) 
								"CannotComplete;TheApprovalCodeHasATeamWithNoMembers"
							constraint (!ApprovalCode.HasInvalidEscalations)
								"CannotComplete:TheApprovalCodeHasInvalidEscalationSettings"
							constraint (!ApprovalCode.HasInactiveResources)
								"CannotComplete;TheApprovalCodeHasInactiveResources"
							if (CashManagementGroup.EnforceProcessorCannotBeApprover) 
								LocalApprover = actor.agent(Employee).Employee
								constraint (!ApprovalCodeResourceByResourceRel exists)
									"PersonSubmittingTransactionCannotBeTheApprover"
								OriginalSubmittingResource = actor 

						if(ExecuteFrontEndSplits)
							invoke ExecuteFrontEndSplitCashTransactions

						if (CashCode.EditAvailableFunds
						or  CashCode.RestrictedFunds)
							include PerformFundAmountEdit
							constraint (ExceedesCashCodeFundBalanceRel !exists)
								"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
							invoke Delete CashCodeFundEditRel
#ifdef module cam
						if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)		
							include PerformCustodialAmountEdit
							constraint (ExceedsCustodialAccountBalanceRel !exists)
								"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
							invoke Delete CustodialAccountEditRel
#endif
						LocalActionSubmitForApproval = true
						include PerformBudgetEditsForApprovalOrRelease
						
				FinalApproval is an Instance Action
					default label is untranslatable
					restricted	
					Action Rules
						if (!CashManagementGroup.ApprovalCodesNotUsedForCashTransactions)
							initialize ApprovalLevel
							initialize Approver
							initialize ApproverTeam	
							include GetNextApprovalLevel
							ApprovalLevel = LocalApprovalLevel
							Approver = LocalApprover
							ApproverTeam = LocalApproverTeam
						include InitiateApprovalProcessFlow
						make transition to PendingApproval	
						
				Release is an Instance Action
					valid when (CanRelease)
					Entrance Rules
						constraint (!BudgetEditInProgress)		
							"CannotRelease;BudgetEditInProgress"
						if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
						and CashLedgerGLDistributionsRequiringCustodialAccountRel exists)	
							confirmation required
								"OneOrMoreDistributionsMayRequireCustodialAccount;Continue?"
						if(ExecuteFrontEndSplits)
							invoke ExecuteFrontEndSplitCashTransactions
						if (ImportStatus entered)
							if (ImportStatus.Void
							or  SourceCode = "AP")
								LocalBypassRules = true
						if(CashLedgerTransactionDetailRel exists)
							constraint(!LineAmountDoesNotEqualLineDetails)
								"CannotRelease;TransactionAmountDoesnotMatchWithDetails"							
						if (not LocalBypassRules)
							constraint (IssuedBankAmount = AppliedDistributionBankAmount)
								"CannotRelease;TransactionOutOfBalance"		
							if (CashCode.EditAvailableFunds
							or  CashCode.RestrictedFunds)
								include PerformFundAmountEdit
								constraint (ExceedesCashCodeFundBalanceRel !exists)
									"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
								invoke Delete CashCodeFundEditRel
							if (NotAPAndAR) 
								constraint (CashLedgerGLDistributionsRel exists)
									"CannotRelease;NoDistributionsEntered"
								
#ifdef module cam
							if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
								include PerformCustodialAmountEdit
								constraint (ExceedsCustodialAccountBalanceRel !exists)
									"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
								invoke Delete CustodialAccountEditRel
#endif
					Action Rules
						LocalActionUnreleaseToRelease	= true
						if (BypassBudgetProcessing)
							invoke FinalRelease
						else	
							include PerformBudgetEditsForApprovalOrRelease

	
				ReleaseFromImport is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						PrmInterfaceAsPosted	is Boolean	
						PrmBypassCashFundUpdate is Boolean	
						PrmJournalizeGroup		is like JournalizeGroup	

					Parameter Rules
						PrmBypassCashFundUpdate	
							default to false
					Entrance Rules
						if(ExecuteFrontEndSplits)
							invoke ExecuteFrontEndSplitCashTransactions
						if (ImportStatus entered)
							if (ImportStatus.Void
							or  SourceCode = "AP")
								LocalBypassRules = true
						if (not LocalBypassRules)
							constraint (IssuedBankAmount = AppliedDistributionBankAmount)
								"CannotRelease;TransactionOutOfBalance"		
							if (!LocalBypassCashFundUpdate	
							and (CashCode.EditAvailableFunds
							or  CashCode.RestrictedFunds))
								include PerformFundAmountEdit
								constraint (ExceedesCashCodeFundBalanceRel !exists)
									"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
								invoke Delete CashCodeFundEditRel
							if (NotAPAndAR)
								constraint (CashLedgerGLDistributionsRel exists)
									"CannotRelease;NoDistributionsEntered"
#ifdef module cam
							if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
								include PerformCustodialAmountEdit
								constraint (ExceedsCustodialAccountBalanceRel !exists)
									"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
								invoke Delete CustodialAccountEditRel
#endif
					Action Rules
						ReleasedFromImport				= true
						LocalInterfaceAsPosted			= PrmInterfaceAsPosted
						LocalActionUnreleaseToRelease	= true
						LocalJournalizeGroup			= PrmJournalizeGroup
						LocalBypassCashFundUpdate		= PrmBypassCashFundUpdate	
						if (LocalInterfaceAsPosted)	
							BypassBudgetProcessing = true
							invoke FinalRelease
						else	
							include PerformBudgetEditsForApprovalOrRelease


				ReleaseFromMassRelease is an Instance Action	
					default label is untranslatable
					restricted
					Entrance Rules
						if(ExecuteFrontEndSplits)
							invoke ExecuteFrontEndSplitCashTransactions
						if (ImportStatus entered)
							if (ImportStatus.Void
							or  SourceCode = "AP")
								LocalBypassRules = true
						if (not LocalBypassRules)
							constraint (IssuedBankAmount = AppliedDistributionBankAmount)
								"CannotRelease;TransactionOutOfBalance"		
							if (CashCode.EditAvailableFunds
							or  CashCode.RestrictedFunds)
								include PerformFundAmountEdit
								constraint (ExceedesCashCodeFundBalanceRel !exists)
									"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
								invoke Delete CashCodeFundEditRel
							if (NotAPAndAR) 
								constraint (CashLedgerGLDistributionsRel exists)
									"CannotRelease;NoDistributionsEntered"
#ifdef module cam
							if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
								include PerformCustodialAmountEdit
								constraint (ExceedsCustodialAccountBalanceRel !exists)
									"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
								invoke Delete CustodialAccountEditRel
#endif
					Action Rules

						LocalActionUnreleaseToRelease	= true
						if (BypassBudgetProcessing)
							invoke FinalRelease
						else	
							include PerformBudgetEditsForApprovalOrRelease

		

























































								

				AutoReconcile is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						include UpdateReconcileDate
				        ReconciliationData.CurrencyAmount	= IssuedBankAmount
				        ReconciliationData					= IssuedBaseAmount
				        LocalReconcileGeneralLedgerEntry 	= false
    	    			if (SourceCode = "AP"
    	    			or  SourceCode = "AR")
							if (CompanyCashCode.ReconcileGeneralLedgerEntry
							and IssuedBankAmount	entered)
								LocalDescription	= Description
								LocalReference		= Reference
								LocalReconcileGeneralLedgerEntry = true
								LocalPostDate		= GeneralLedgerPostDate	
			        			include CreateCashAcctDistribution
								include CreateReconcileGLAcctDistribution
						LastMaintenanceDate = current timestamp
						make transition to Reconciled
				
				BatchApprovalRelease is a Set Action	
					default label is untranslatable
					restricted
					Parameters
						PrmCashManagementGroup			is a CashManagementGroup
						PrmCashLedgerBatchApproval		is a CashLedgerBatchApproval
					Instance Selection
						where (CashManagementGroup		= PrmCashManagementGroup
						and    CashLedgerBatchApproval	= PrmCashLedgerBatchApproval
						and    !BudgetEditInProgress						
						and    Status.Unreleased)
					Sort Order is ByCashLedgerBatchApproval
					Action Rules
						Instance Rules
							invoke Unreleased.Release

				RemoveFromBatch is an Instance Action				
					valid when (IsBatchApproved)
					Action Rules
						initialize CashLedgerBatchApproval
												

			Open is a State



					

				Entrance Rules
					if (CreatedFromBankStatementLine entered)
						invoke UpdateLineExceptionStatusFromTransactionRelease CreatedFromBankStatementLine
					if (BankStatementReconciliation set !exists
					and !CashManagementAccount.ReconcileToCashLedger.NotReconciled)
						invoke CreateFromCashLedgerTransactionRelease BankStatementReconciliation	
							fill in fields from this instance		
							invoked.CashManagementGroup				= CashManagementGroup
							invoked.CashManagementAccount			= CashManagementAccount
							invoked.CashCode						= CashCode
							invoked.CashLedgerSourceRecord			= CashLedgerSourceRecord
							invoked.BankTransactionCode				= BankTransactionCode
							invoked.SystemCode						= SourceCode	
							invoked.CashLedgerTransaction			= CashLedgerTransaction
							invoked.CashLedgerTransactionIdentifier	= CashLedgerTransactionIdentifier
							invoked.LineType						= 2 
							invoked.TransactionNumber				= com.lawson.apps.sharedfinance.base.StringUtils.trimLeadingSpaces(TransactionNumber)
							invoked.TransactionDate					= IssueDate
							invoked.TransactionAmount				= IssuedBankAmount
							if (BankTransactionSign.BankDebit)
								invoked.DebitCreditIndicator		= "D"
							else
								invoked.DebitCreditIndicator		= "C"
							invoked.Description						= Description
							invoked.Comment							= CommentText
							invoked.TransactionDataOne				= TransactionData1
							invoked.TransactionDataTwo				= TransactionData2
							invoked.TransactionDataThree			= TransactionData3
							invoked.TransactionDataFour				= TransactionData4
							if (CashManagementAccount.ReconcileToCashLedger.Secondary)
								invoked.SecondaryReconTransaction	= true
							invoked.CreatedFromBankStatement		= CreatedFromBankStatement
							invoked.CreatedFromBankStatementLine	= CreatedFromBankStatementLine
							invoked.CreatedFromBankStatementLineDetail = CreatedFromBankStatementLineDetail	

													
				RequestVoidOrStopPayment is an Instance Action
					completion message is "RequestForVoidOrStopPaymentHasBeenSubmittedToTheQueueForProcessing"
				 	valid when (CanRequestVoidOrStopPayment)
					Parameters
						PrmRequestDate				is Date
							default label is "RequestDate"
						PrmApprovalCode				is a ApprovalCode
							default label is "ApprovalCode"
						PrmVoidStopPayAttachment	is an Attachment		
							default label is "Void/\StopPayAttachment"
						PrmCommentText				is a CommentText
							default label is "Comment"
						PrmRequestType				is Numeric 2
							default label is "RequestType"
							States
								StopPayment		value is 1
								Void			value is 2

					Parameter Rules
						PrmRequestDate
							initial value is current corporate date
							default to current corporate date
						PrmApprovalCode
							initial value is CashCode.ApprovalCode
							default to CashCode.ApprovalCode
							if (!CashManagementGroup.ApprovalCodesNotUsedForVoidStopPayments)
								required
									"ApprovalCodeIsRequired"
							constraint (!PrmApprovalCode.ApprovalCodeUsesMaximumAmounts)
								"CannotSelectApprovalCodesSetUpForNonBatchedCashLedgerPayments"
						PrmRequestType
							required
								"RequestTypeIsRequired"

					Action Rules



						if (IsPayablesPaymentSourcedFromIntercompanyBilling)	
							constraint (initiating action = "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")	
								"ThisIsAnIntercompanyBillingSourcedTransaction;_\PleaseTransactActionsFrom_\Intercompany_\Billing."	
						ReconciliationData.ExchangeDate	= PrmRequestDate
						CommentText						+= PrmCommentText
						ApprovalRequestType				= PrmRequestType
						if (PrmVoidStopPayAttachment entered)		
							VoidStopPayAttachment = PrmVoidStopPayAttachment

						include VoidAndStopPaymentRules
						include VoidEntranceRules

						if (!CashManagementGroup.ApprovalCodesNotUsedForVoidStopPayments)
							ApprovalCode	= PrmApprovalCode
							constraint (ApprovalCode.HasApprovalLevels) 
								"CannotComplete;TheApprovalCodeHasNoApprovalLevels"
							constraint (!ApprovalCode.HasTeamWithNoMembers) 
								"CannotComplete;TheApprovalCodeHasATeamWithNoMembers"
							constraint (!ApprovalCode.HasInvalidEscalations)
								"CannotComplete:TheApprovalCodeHasInvalidEscalationSettings"
							constraint (!ApprovalCode.HasInactiveResources)
								"CannotComplete;TheApprovalCodeHasInactiveResources"
			
							initialize ApprovalLevel
							initialize Approver
							initialize ApproverTeam	
							include GetNextApprovalLevel
							ApprovalLevel = LocalApprovalLevel
							Approver = LocalApprover
							ApproverTeam = LocalApproverTeam
						include InitiateApprovalProcessFlow

						make transition to PendingApproval	
						include IDM.CreateRules 
							replace AttachmentField with VoidStopPayAttachment

				StopPayment is an Instance Action
					valid when (CanVoidOrStopPayTransaction)
					Parameters
						PrmReconcileDate			is Date
							default label is "StopPaymentDate"
						PrmVoidStopPayAttachment	is an Attachment		
							default label is "Void/\StopPayAttachment"
						PrmCommentText				is a CommentText
							default label is "Comment"
						PrmBankConfirmed			is Boolean		
						PrmRunPaymentVoidStopPayUpdate is Boolean			
							default label is "RunPaymentVoidStopPayUpdate"
						PrmStopRelatedFundTransfers is Boolean			 
							default label is "StopRelatedFundTransfers"
					Parameter Rules
						PrmReconcileDate
							initial value is current corporate date
							default to current corporate date
						PrmRunPaymentVoidStopPayUpdate						
							constraint (IsPayablesPaymentDetail)
								"RunningPaymentVoidStopPayUpdateOnlyValidForPayablesTransactions"
						PrmStopRelatedFundTransfers						 
							constraint (IsFundTransfer)
								"StopPaymentRelatedFundTransfersOnlyValidForTransactionsGeneratedFromFundTransfers"	
					Entrance Rules	
						constraint (PeriodDate not entered)
							"CannotStopPayment;TransactionHasBeenClosed"
						constraint (!ReinstateStatus)
							"CannotStopPayment;TransactionHasBeenReinstated"



						if (IsPayablesPaymentSourcedFromIntercompanyBilling)	
							constraint (initiating action = "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")	
								"ThisIsAnIntercompanyBillingSourcedTransaction;_\PleaseTransactActionsFrom_\Intercompany_\Billing."	

					Action Rules
						ReconciliationData.ExchangeDate	= PrmReconcileDate
						CommentText						+= PrmCommentText
						if (PrmStopRelatedFundTransfers)	
							if (Type.TransferDetail) 
								LocalCashCode				= first CashLedgerFundTransferDetailsRel.CashCode
								LocalFundHeaderCashCode		= first CashLedgerFundTransferDetailsRel.CashCode
								LocalBankTransactionCode	= first CashLedgerFundTransferDetailsRel.CashLedgerFundTransferHeader.BankTransactionCode
								constraint (first RelatedFundTransferTransactionsRel.Status.Open)
									"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotOpen;CannotStopPayment"

								invoke Open.StopPayment first RelatedFundTransferTransactionsRel 
									invoked.PrmReconcileDate				= PrmReconcileDate
									invoked.PrmVoidStopPayAttachment		= PrmVoidStopPayAttachment
									invoked.PrmCommentText					= PrmCommentText
									invoked.PrmRunPaymentVoidStopPayUpdate	= PrmRunPaymentVoidStopPayUpdate
							else
								LocalFundHeaderCashCode			= CashCode

							for each LocalCashLedgerFundTransferHeaderRel.CashLedgerFundTransferDetail set
								LocalCashCode 				= each.CashLedgerFundTransferDetail.DetailCashCode
								LocalBankTransactionCode	= each.BankTransactionCode

								if (first RelatedFundTransferTransactionsRel.CashLedgerTransaction  != CashLedgerTransaction)
									constraint (first RelatedFundTransferTransactionsRel.Status.Open)
										"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotOpen;CannotStopPayment"

									invoke Open.StopPayment first RelatedFundTransferTransactionsRel
										invoked.PrmReconcileDate				= PrmReconcileDate
										invoked.PrmVoidStopPayAttachment		= PrmVoidStopPayAttachment
										invoked.PrmCommentText					= PrmCommentText
										invoked.PrmRunPaymentVoidStopPayUpdate	= PrmRunPaymentVoidStopPayUpdate

						if (PrmVoidStopPayAttachment entered)		
							VoidStopPayAttachment = PrmVoidStopPayAttachment
						if (CashCode.StopPayBankConfirmRequired		
						and !PrmBankConfirmed)
							LastMaintenanceDate = current timestamp
							make transition to PendingStopPayConfirmation
						else
							invoke Open.StopPaymentUpdate
								invoked.PrmRunPaymentVoidStopPayUpdate = PrmRunPaymentVoidStopPayUpdate						
							if (SummaryOption.Summarized)

								LocalSummaryReconcileDate	= ReconciliationData.ExchangeDate
								if (CashLedgerTransactionsSummarizedAndReleasedRel exists)		
									for each CashLedgerTransactionsSummarizedAndReleasedRel
										each.ReconciliationData.ExchangeDate = LocalSummaryReconcileDate
										invoke Open.StopPaymentUpdate each 		
			
						if (initiating action != "ManualApprove"
						and initiating action != "Approve")
							include IDM.CreateRules 
								replace AttachmentField with VoidStopPayAttachment
						
				StopPaymentUpdate is an Instance Action	
					default label is untranslatable
					restricted
					Parameters
						PrmRunPaymentVoidStopPayUpdate is Boolean				
					Entrance Rules
						include VoidAndStopPaymentRules
						include VoidEntranceRules
						if (IsPayablesPaymentSourcedFromIntercompanyBilling)	
							constraint (initiating action = "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")	
								"ThisIsAnIntercompanyBillingSourcedTransaction;_\PleaseTransactActionsFrom_\Intercompany_\Billing."	

					Action Rules
						LocalActionOpenToStopPayment = true	
						include UpdateReconcileDate
						include UpdateCashCodeBalances
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						make transition to StopPayment
					Exit Rules
						if (PrmRunPaymentVoidStopPayUpdate)						
							if (IsCashLedgerPayment)
								LocalVendorGroup = CashLedgerPaymentOTORel.PayablesData.PayablesCompany.VendorGroup
							else 
								LocalVendorGroup = PayablesCompanyVendorProcLevel.PayablesCompany.VendorGroup
							invoke PaymentVoidStopPayUpdate PaymentVoidStopPayUpdate
								invoked.VendorGroup		= LocalVendorGroup
								invoked.PayGroup        = PayGroup       
								invoked.CashCode		= CashCode									
								invoked.CheckNum        = TransactionNumber  
								invoked.PaymentCode     = BankTransactionCode        
								invoked.UpdateOption    = "Y"     
								invoked.SkipMonitor		= true  

				Void is an Instance Action
					valid when (CanVoidOrStopPayTransaction)
					Parameters	
						PrmReconcileDate			is Date
							default label is "VoidDate"
						PrmVoidStopPayAttachment	is an Attachment		
							default label is "Void/\StopPayAttachment"
						PrmCommentText				is a CommentText
							default label is "Comment"
						PrmRunPaymentVoidStopPayUpdate is Boolean			
							default label is "RunPaymentVoidStopPayUpdate"
						PrmVoidRelatedFundTransfers is Boolean		 
							default label is "VoidRelatedFundTransfers"
					Parameter Rules
						PrmReconcileDate
							initial value is current corporate date
							default to current corporate date
						PrmRunPaymentVoidStopPayUpdate						
							constraint (IsPayablesPaymentDetail)
								"RunningPaymentVoidStopPayUpdateOnlyValidForPayablesTransactions"
						PrmVoidRelatedFundTransfers		 
							constraint (IsFundTransfer)
								"VoidRelatedFundTransfersOnlyValidForTransactionsGeneratedFromFundTransfers"
					Entrance Rules	
						constraint (PeriodDate not entered)
							"CannotVoid;TransactionHasBeenClosed"
						constraint (!ReinstateStatus)
							"CannotVoid;TransactionHasBeenReinstated"



						if (IsPayablesPaymentSourcedFromIntercompanyBilling)	
							constraint (initiating action = "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")	
								"ThisIsAnIntercompanyBillingSourcedTransaction;_\PleaseTransactActionsFrom_\Intercompany_\Billing."	
					Action Rules
						ReconciliationData.ExchangeDate		= PrmReconcileDate
						CommentText							+= PrmCommentText
						if (PrmVoidRelatedFundTransfers)		 
							if (Type.TransferDetail) 
								LocalCashCode				= first CashLedgerFundTransferDetailsRel.CashCode
								LocalFundHeaderCashCode		= first CashLedgerFundTransferDetailsRel.CashCode
								LocalBankTransactionCode	= first CashLedgerFundTransferDetailsRel.CashLedgerFundTransferHeader.BankTransactionCode

								constraint (first RelatedFundTransferTransactionsRel.Status.Open)
									"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotOpen;CannotVoid"

								invoke Open.Void first RelatedFundTransferTransactionsRel 
									invoked.PrmReconcileDate				= PrmReconcileDate
									invoked.PrmVoidStopPayAttachment		= PrmVoidStopPayAttachment
									invoked.PrmCommentText					= PrmCommentText
									invoked.PrmRunPaymentVoidStopPayUpdate	= PrmRunPaymentVoidStopPayUpdate
							else
								LocalFundHeaderCashCode			= CashCode

							for each LocalCashLedgerFundTransferHeaderRel.CashLedgerFundTransferDetail set
								LocalCashCode 				= each.CashLedgerFundTransferDetail.DetailCashCode
								LocalBankTransactionCode	= each.BankTransactionCode

								if (first RelatedFundTransferTransactionsRel.CashLedgerTransaction  != CashLedgerTransaction)
									constraint (first RelatedFundTransferTransactionsRel.Status.Open)
										"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotOpen;CannotVoid"

									invoke Open.Void first RelatedFundTransferTransactionsRel
										invoked.PrmReconcileDate				= PrmReconcileDate
										invoked.PrmVoidStopPayAttachment		= PrmVoidStopPayAttachment
										invoked.PrmCommentText					= PrmCommentText
										invoked.PrmRunPaymentVoidStopPayUpdate	= PrmRunPaymentVoidStopPayUpdate

						if (PrmVoidStopPayAttachment entered)		
							VoidStopPayAttachment = PrmVoidStopPayAttachment
						invoke Open.VoidUpdate
							invoked.PrmRunPaymentVoidStopPayUpdate = PrmRunPaymentVoidStopPayUpdate						
						if (SummaryOption.Summarized)

							LocalSummaryReconcileDate 	= ReconciliationData.ExchangeDate
							if (CashLedgerTransactionsSummarizedAndReleasedRel exists)		
								for each CashLedgerTransactionsSummarizedAndReleasedRel
									each.ReconciliationData.ExchangeDate = LocalSummaryReconcileDate
									invoke Open.VoidUpdate each		

						if (initiating action != "ManualApprove"
						and initiating action != "Approve")
							include IDM.CreateRules 
								replace AttachmentField with VoidStopPayAttachment

				VoidUpdate is an Instance Action	
					default label is untranslatable
					restricted
					Parameters
						PrmRunPaymentVoidStopPayUpdate is Boolean				
					Entrance Rules
						if (IsPayablesPaymentSourcedFromIntercompanyBilling)	
							constraint (initiating action = "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")	
								"ThisIsAnIntercompanyBillingSourcedTransaction;_\PleaseTransactActionsFrom_\Intercompany_\Billing."	
						include VoidAndStopPaymentRules
						include VoidEntranceRules
					Action Rules
						LocalActionOpenToVoid = true
						if (ImportStatus not entered) 
							include UpdateReconcileDate
						if (!ImportStatus.Void)	
							include UpdateCashCodeBalances
							if (CashCode.SummarizeLedgerBalances)
								include ProcessCashLedgerConsolidation
						else 	
							if (SourceCode = "CB")
								ReinstateStatus = true
						if (initiating action = "CashLedgerPayablesPayment.ReopenCashLedgerPayment")
							ReinstateStatus = true
						LastMaintenanceDate = current timestamp
						make transition to Voided
					Exit Rules
						if (PrmRunPaymentVoidStopPayUpdate)						
							if (IsCashLedgerPayment)
								LocalVendorGroup = CashLedgerPaymentOTORel.PayablesData.PayablesCompany.VendorGroup
							else 
								LocalVendorGroup = PayablesCompanyVendorProcLevel.PayablesCompany.VendorGroup
							invoke PaymentVoidStopPayUpdate PaymentVoidStopPayUpdate
								invoked.VendorGroup		= LocalVendorGroup
								invoked.PayGroup        = PayGroup       
								invoked.CashCode		= CashCode									
								invoked.CheckNum        = TransactionNumber  
								invoked.PaymentCode     = BankTransactionCode        
								invoked.UpdateOption    = "Y"
								invoked.SkipMonitor		= true  
								    
				Reconcile is an Instance Action
					valid when (OpenTransactionAvailableForProcessing)
					Parameters	
						PrmReconcileDate       is Date
							default label is "ReconciliationDate"
						PrmReconcileBankAmount is an UnsignedInternationalAmount
							default label is "ReconciliationAmount"
						PrmReconCurrencyAmount is a CurrencyAmountsGroup		
						PrmToCurrency		   is a ToCurrency	
							default label is "ToCurrency"
						PrmCommentText         is a CommentText
							default label is "Comment"
						PrmCurrencyAmtOverride is Boolean		
							default label is "CurrencyAmountOverride"
						PrmReconcileRelatedFundTransfers is Boolean		 
							default label is "ReconcileRelatedFundTransfers"
					Parameter Rules
						PrmReconcileDate
							initial value is current corporate date
							default to current corporate date
						PrmReconCurrencyAmount		
							constraint (PrmCurrencyAmtOverride = true)
								"Currency_\Amount_\OverrideMustBeFlaggedIfOverrideAmountsEntered"
						PrmToCurrency	
							initial value is CashCode.Currency
							default to CashCode.Currency		
						PrmReconcileRelatedFundTransfers		 
							constraint (IsFundTransfer)
								"ReconcileRelatedFundTransfersOnlyValidForTransactionsGeneratedFromFundTransfers"		
					Entrance Rules	
						constraint (PeriodDate not entered)
							"CannotReconcile;TransactionHasBeenClosed"
						if (PrmCurrencyAmtOverride)		
							constraint (CompanyCashCode.VarianceAccount entered)
								"CompanyCashCodeVarianceAccountMustBeEntered"
					Action Rules
						if (PrmReconcileRelatedFundTransfers)		 
							constraint (PrmReconcileBankAmount not entered)
								"ReconcileBankAmountCannotBeEnteredWhileReconcileRelatedFundTransfersIsSelected"
							constraint (!PrmCurrencyAmtOverride)
								"CurrencyAmountOverrideCannotBeSelectedWhileReconcileRelatedFundTransfersIsSelected"
							if (Type.TransferDetail) 
								LocalCashCode				= first CashLedgerFundTransferDetailsRel.CashCode
								LocalFundHeaderCashCode		= first CashLedgerFundTransferDetailsRel.CashCode
								LocalBankTransactionCode	= first CashLedgerFundTransferDetailsRel.CashLedgerFundTransferHeader.BankTransactionCode
								
								constraint (first RelatedFundTransferTransactionsRel.Status.Open)
									"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotOpen;CannotReconcile"

								invoke Open.Reconcile first RelatedFundTransferTransactionsRel 
									invoked.PrmReconcileDate			= PrmReconcileDate
									invoked.PrmReconcileBankAmount		= PrmReconcileBankAmount
									invoked.PrmReconCurrencyAmount		= PrmReconCurrencyAmount
									invoked.PrmToCurrency				= PrmToCurrency
									invoked.PrmCommentText				= PrmCommentText
									invoked.PrmCurrencyAmtOverride		= PrmCurrencyAmtOverride
							else
								LocalFundHeaderCashCode			= CashCode

							for each LocalCashLedgerFundTransferHeaderRel.CashLedgerFundTransferDetail set
								LocalCashCode 				= each.CashLedgerFundTransferDetail.DetailCashCode
								LocalBankTransactionCode	= each.BankTransactionCode

								if (first RelatedFundTransferTransactionsRel.CashLedgerTransaction  != CashLedgerTransaction)
									constraint (first RelatedFundTransferTransactionsRel.Status.Open)
										"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotOpen;CannotReconcile"

									invoke Open.Reconcile first RelatedFundTransferTransactionsRel
										invoked.PrmReconcileDate			= PrmReconcileDate
										invoked.PrmReconcileBankAmount		= PrmReconcileBankAmount
										invoked.PrmReconCurrencyAmount		= PrmReconCurrencyAmount
										invoked.PrmToCurrency				= PrmToCurrency
										invoked.PrmCommentText				= PrmCommentText
										invoked.PrmCurrencyAmtOverride		= PrmCurrencyAmtOverride
						if (BankStatementReconciliation set exists)
							constraint (first BankStatementReconciliation set.ReconMatchNumber !entered)
								"TransactionMatchedToBankStatement<first BankStatementReconciliation set.ReconMatchNumber.BankStatement>Dated<first BankStatementReconciliation set.ReconMatchNumber.BankStatement.StatementDate>LineMatchField<first BankStatementReconciliation set.ReconMatchNumber.LineMatchField>;MustBeReconciledFromTheBankStatement"						
							invoke Purge BankStatementReconciliation set
						ReconciliationData.ExchangeDate     = PrmReconcileDate
						ReconciliationData.CurrencyAmount	= PrmReconcileBankAmount
						if (PrmReconCurrencyAmount.FunctionalAmount entered)		
							constraint (IssuedBaseAmount.FunctionalAmount.EnteredCurrencyRate != 1)		
								"CannotOverride;_\Functional_\Currency<Company.OrigCompany.AccountingEntity.FunctionalCurrency>Equals_\Cash_\Code_\Currency<CashCode.Currency>"
							ReconciliationData.FunctionalAmount.EnteredCurrencyAmount	= PrmReconCurrencyAmount.FunctionalAmount
						if (PrmReconCurrencyAmount.AlternateAmount entered)			
							constraint (IssuedBaseAmount.AlternateAmount.EnteredCurrencyRate != 1)		
								"CannotOverride;_\Alternate_\Currency<Company.OrigCompany.AccountingEntity.AlternateCurrency>Equals_\Cash_\Code_\Currency<CashCode.Currency>"
							ReconciliationData.AlternateAmount.EnteredCurrencyAmount	= PrmReconCurrencyAmount.AlternateAmount
						if (PrmReconCurrencyAmount.AlternateAmount2 entered)		
							constraint (IssuedBaseAmount.AlternateAmount2.EnteredCurrencyRate != 1)		
								"CannotOverride;_\Alternate2_\Currency<Company.OrigCompany.AccountingEntity.AlternateCurrency2>Equals_\Cash_\Code_\Currency<CashCode.Currency>"
							ReconciliationData.AlternateAmount2.EnteredCurrencyAmount	= PrmReconCurrencyAmount.AlternateAmount2
						if (PrmReconCurrencyAmount.AlternateAmount3 entered)		
							constraint (IssuedBaseAmount.AlternateAmount3.EnteredCurrencyRate != 1)		
								"CannotOverride;_\Alternate3_\Currency<Company.OrigCompany.AccountingEntity.AlternateCurrency3>Equals_\Cash_\Code_\Currency<CashCode.Currency>"
							ReconciliationData.AlternateAmount3.EnteredCurrencyAmount	= PrmReconCurrencyAmount.AlternateAmount3
						if (PrmReconCurrencyAmount.ReportAmount1 entered)			
							constraint (IssuedBaseAmount.ReportAmount1.EnteredCurrencyRate != 1)		
								"CannotOverride;_\Report_\Currency<CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyOne>Equals_\Cash_\Code_\Currency<CashCode.Currency>"
							ReconciliationData.ReportAmount1.EnteredCurrencyAmount		= PrmReconCurrencyAmount.ReportAmount1
						if (PrmReconCurrencyAmount.ReportAmount2 entered)			
							constraint (IssuedBaseAmount.ReportAmount2.EnteredCurrencyRate != 1)		
								"CannotOverride;_\Report2_\Currency<CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyTwo>Equals_\Cash_\Code_\Currency<CashCode.Currency>"
							ReconciliationData.ReportAmount2.EnteredCurrencyAmount		= PrmReconCurrencyAmount.ReportAmount2
						if (PrmReconCurrencyAmount.ReportAmount3 entered)			
							constraint (IssuedBaseAmount.ReportAmount3.EnteredCurrencyRate != 1)		
								"CannotOverride;_\Report3_\Currency<CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyThree>Equals_\Cash_\Code_\Currency<CashCode.Currency>"
							ReconciliationData.ReportAmount3.EnteredCurrencyAmount		= PrmReconCurrencyAmount.ReportAmount3
						if (PrmReconCurrencyAmount.ReportAmount4 entered)			
							constraint (IssuedBaseAmount.ReportAmount4.EnteredCurrencyRate != 1)		
								"CannotOverride;_\Report4_\Currency<CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyFour>Equals_\Cash_\Code_\Currency<CashCode.Currency>"
							ReconciliationData.ReportAmount4.EnteredCurrencyAmount		= PrmReconCurrencyAmount.ReportAmount4
						if (PrmReconCurrencyAmount.ReportAmount5 entered)			
							constraint (IssuedBaseAmount.ReportAmount5.EnteredCurrencyRate != 1)		
								"CannotOverride;_\Report5_\Currency<CashManagementGroup.FinanceEnterpriseGroup.ReportCurrencyFive>Equals_\Cash_\Code_\Currency<CashCode.Currency>"
							ReconciliationData.ReportAmount5.EnteredCurrencyAmount		= PrmReconCurrencyAmount.ReportAmount5
						CommentText 						+= PrmCommentText
						invoke Open.ReconcileUpdate
						if (SummaryOption.Summarized)

							LocalSummaryReconcileDate 		= ReconciliationData.ExchangeDate
							if (CashLedgerTransactionsSummarizedAndReleasedRel exists)		
								for each CashLedgerTransactionsSummarizedAndReleasedRel
									initialize each.ReconciliationData 
									each.ReconciliationData.ExchangeDate = LocalSummaryReconcileDate
									invoke Open.ReconcileUpdate each		
									if (each.BankStatementReconciliation set exists)					
    									constraint (each.first BankStatementReconciliation set.ReconMatchNumber !entered)
        									"TransactionMatchedToBankStatement<each.first BankStatementReconciliation set.ReconMatchNumber.BankStatement>Dated<each.first BankStatementReconciliation set.ReconMatchNumber.BankStatement.StatementDate>LineMatchField<each.first BankStatementReconciliation set.ReconMatchNumber.LineMatchField>;MustBeReconciledFromTheBankStatement"
    									invoke Purge each.BankStatementReconciliation set
					Exit Rules
						if (Company.OrigCompany.AccountingEntity.FinanceEnterpriseGroup.BODTrigger)	
							if (instance count of PayablesInvoicePaymentRel < 100)
								invoke TriggerPayablesInvoicePayment PayablesInvoicePaymentRel



							
							else
								invoke TriggerPayablesInvoicePaymentBatch PayablesInvoicePayment
								  	invoked.PrmVendorGroup		   = first PayablesInvoicePaymentRel.Company.VendorGroup
								  	invoked.PrmPayGroup            = PayGroup
								  	invoked.PrmBankTransactionCode = BankTransactionCode
								  	invoked.PrmTransactionIDNumber = CashLedgerTransaction







									
				ReconcileFromCTMBankStatement is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						PrmReconcileDate 		is Date
						PrmReconcileBankAmount	is an UnsignedInternationalAmount
						PrmToCurrency		   is a ToCurrency	
					Parameter Rules
						PrmToCurrency	
							initial value is CashCode.Currency
							default to CashCode.Currency							
					Action Rules
						if(CashLedgerTransactionDetailRel exists)
							if (ReconciledDetailAmount = IssuedBankAmount)
								ReconciliationData.ExchangeDate     	= PrmReconcileDate
								invoke Open.ReconcileUpdate
						else
							ReconciliationData.ExchangeDate     	= PrmReconcileDate
							ReconciliationData.CurrencyAmount		= PrmReconcileBankAmount
							invoke Open.ReconcileUpdate










				ReconcileUpdate is an Instance Action	
					default label is untranslatable
					restricted				
					completion message is "<CompletionMessage>"	







					Entrance Rules
						if (first BankAccountBalancesRel exists)
							constraint (ReconciliationData.ExchangeDate > first BankAccountBalancesRel.BankAccountBalance)
								"ReconciliationIsForAClosedBankPeriod"				
						constraint (ReconciliationData.ExchangeDate <= current corporate date)
							"ReconciliationDateCannotBeGreaterThanCurrentDate"		
						constraint (CashLedgerReconciliationAdjustmentRel not exists)
							"CannotReconcileAdjustmentsExists"						
					Action Rules
						TransientAccountingEntity			= Company.OrigCompany.AccountingEntity	
						TransientFromCurrency				= CashCode.Currency 					
						LocalActionOpenToReconcile 			= true
						LocalReconcileGeneralLedgerEntry 	= false
						include UpdateReconcileDate
						if (ReconciliationData.CurrencyAmount not entered)
        					ReconciliationData.CurrencyAmount = IssuedBankAmount
        				include SetReconciliationAmounts	
        				if (CBCompanySystemClosingControlRel.Control												
						and !ReconciliationData.ExchangeDate within CBCompanySystemClosingControlRel.ValidEntryDate)
							LocalPostDate 						= current corporate date							
						else																						
							LocalPostDate						= ReconciliationData.ExchangeDate					
					Exit Rules
						if (ReconciliationData.CurrencyAmount > (IssuedBankAmount + CompanyCashCode.ReconcileToleranceOverAmount)
						or  ReconciliationData.CurrencyAmount < (IssuedBankAmount - CompanyCashCode.ReconcileToleranceUnderAmount))
							LocalReconcileAdjustmentCreated = true
    						initialize	LocalDocumentCurrencyTotals
							if (BankTransactionSign.BankDebit)
								LocalFinanceCurrencyAmount					= IssuedBaseAmount
								include ReverseBaseDistributionAmounts
								LocalIssuedBankAmount						= IssuedBankAmount * -1
								LocalFinanceCurrencyAmountGroup				= ReconciliationData
								include ReverseReconBaseDistributionAmounts
						        LocalFinanceCurrencyAmountGroup.CurrencyAmount = ReconciliationData.CurrencyAmount * -1
							else
								LocalFinanceCurrencyAmount					= IssuedBaseAmount
								LocalIssuedBankAmount						= IssuedBankAmount
								LocalFinanceCurrencyAmountGroup				= ReconciliationData
							invoke Create CashLedgerReconciliationAdjustment
    							fill in fields from CashLedgerTransaction
    							invoked.CashManagementGroup					= CashManagementGroup
						        invoked.IssuedBankAmount 					= LocalIssuedBankAmount
						        invoked.IssuedBaseAmount            		= LocalFinanceCurrencyAmount
								invoked.ReconciliationData		    		= LocalFinanceCurrencyAmountGroup
						        invoked.AppliedDistributionBaseAmount		= 0
						        invoked.AppliedDistributionBankAmount		= 0
					       		invoked.PostDate							= LocalPostDate	
						        invoked.Status								= CashLedgerReconciliationAdjustmentRel.Status.UnreleasedUnreconciled
								invoked.CashLedgerReconciliationAdjustment 	= CashLedgerTransaction

						if (!LocalReconcileAdjustmentCreated
						and ReconciliationData.CurrencyAmount != IssuedBankAmount
						and	CompanyCashCode.CreateAdjustmentsForInTolerance)
							initialize	LocalDocumentCurrencyTotals
							if (BankTransactionSign.BankDebit)
								LocalFinanceCurrencyAmount					= IssuedBaseAmount
								include ReverseBaseDistributionAmounts
								LocalIssuedBankAmount						= IssuedBankAmount * -1
								LocalFinanceCurrencyAmountGroup				= ReconciliationData
								include ReverseReconBaseDistributionAmounts
						        LocalFinanceCurrencyAmountGroup.CurrencyAmount = ReconciliationData.CurrencyAmount * -1
							else
								LocalFinanceCurrencyAmount					= IssuedBaseAmount
								LocalIssuedBankAmount						= IssuedBankAmount
								LocalFinanceCurrencyAmountGroup				= ReconciliationData

							invoke Create CashLedgerReconciliationAdjustment
								fill in fields from CashLedgerTransaction
								invoked.CashManagementGroup					= CashManagementGroup
								invoked.IssuedBankAmount 					= LocalIssuedBankAmount
								invoked.IssuedBaseAmount            		= LocalFinanceCurrencyAmount
								invoked.ReconciliationData		    		= LocalFinanceCurrencyAmountGroup
								invoked.AppliedDistributionBaseAmount		= 0
								invoked.AppliedDistributionBankAmount		= 0
								invoked.PostDate							= LocalPostDate
								invoked.Status								= CashLedgerReconciliationAdjustmentRel.Status.UnreleasedUnreconciled
								invoked.CashLedgerReconciliationAdjustment 	= CashLedgerTransaction
								invoked.AdjustmentWithTolerance				= true

							invoke Create CashLedgerGLDistribution
								fill in fields from CashLedgerReconciliationAdjustmentRel
								invoked.CashCode										= CashCode
								invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
								invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
								invoked.TransactionNumberSuffix						 	= 0
								invoked.GeneralLedgerSourceCode							= "CL"
								invoked.CashLedgerGLDistribution.DistributionType	 	= "R"
								invoked.RecordType									 	= blank
								invoked.Status 										 	= 0
								invoked.PostDate									 	= LocalPostDate
								invoked.GLFinanceCodeBlock								= CompanyCashCode.VarianceAccount
								invoked.GLTransactionAmount								= CashLedgerReconciliationAdjustmentRel.BalanceAmount
								invoked.DistributionToBankAmount 						= CashLedgerReconciliationAdjustmentRel.BalanceAmount
								invoked.GLBaseAmount									= CashLedgerReconciliationAdjustmentRel.BalanceAmount
								invoked.CompanyAccountingEntity							= Company.OrigCompany.AccountingEntity
								invoked.BaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
								invoked.ToBaseCurrencyNumberOfDecimals					= BaseCurrencyNumberOfDecimals
								invoked.ToTransactionCurrencyNumberOfDecimals		 	= TransactionCurrencyNumberOfDecimals
								invoked.TransactionCurrencyNumberOfDecimals				= TransactionCurrencyNumberOfDecimals
								invoked.CashLedgerTransactionOffsetDistrib				= true
								invoked.BypassBudgetAndCommitmentProcessing			 	= true

							LocalReconcileAdjustmentCreated = true
							invoke Release CashLedgerReconciliationAdjustmentRel
						else
							if (LocalReconcileAdjustmentCreated = true)
								initialize ReconciliationData
								CompletionMessage = ReconciliationOutOfToleranceMessage
							else
								if (IssuedBankAmount not = ReconciliationData.CurrencyAmount
								or  IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount	!= ReconciliationData.FunctionalAmount.EnteredCurrencyAmount	
								or  IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount	!= ReconciliationData.AlternateAmount.EnteredCurrencyAmount		
								or  IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount	!= ReconciliationData.AlternateAmount2.EnteredCurrencyAmount	
								or  IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount	!= ReconciliationData.AlternateAmount3.EnteredCurrencyAmount	
								or  IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount	!= ReconciliationData.ReportAmount1.EnteredCurrencyAmount		
								or  IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount	!= ReconciliationData.ReportAmount2.EnteredCurrencyAmount		
								or  IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount	!= ReconciliationData.ReportAmount3.EnteredCurrencyAmount		
								or  IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount	!= ReconciliationData.ReportAmount4.EnteredCurrencyAmount		
								or  IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount	!= ReconciliationData.ReportAmount5.EnteredCurrencyAmount)		
									invoke Open.ReconcileVarianceUpdate
								if (CompanyCashCode.ReconcileGeneralLedgerEntry
								and IssuedBankAmount	entered)
									LocalDescription 					= ReconciliationEntryMessage	
									LocalReference 						= BankTransactionAdjustmentMessage  //"CB80"	
									LocalReconcileGeneralLedgerEntry 	= true
									LocalCreateOffset					= false

									include CreateReconcileGLAcctDistribution
									LocalCreateOffset = true
									include CreateReconcileGLAcctDistribution
								include UpdateCashCodeBalances
								if (CashCode.SummarizeLedgerBalances)
									include ProcessCashLedgerConsolidation
								LastMaintenanceDate = current timestamp
								make transition to Reconciled
								CompletionMessage = ActionCompleteMessage

				ReconcileVarianceUpdate is an Instance Action		
					default label is untranslatable
					restricted				
					completion message is "<CompletionMessage>"	
					Action Rules
						LocalDescription	= ReconciliationVarianceMessage	
        				LocalCreateOffset 	= false	
	        			include CreateReconcileVarianceAcctDistribution
	        			LocalCreateOffset 	= true
	        			include CreateReconcileVarianceAcctDistribution

				ReconcileAdjustment is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						PrmFinanceCurrencyAmountGroup	is a FinanceCurrencyAmountGroup
						PrmAccountingEntity				is an AccountingEntity
						PrmFromCurrency					is a FromCurrency
					Action Rules
						ReconciliationData				= PrmFinanceCurrencyAmountGroup
						LocalActionOpenToReconcile 		= true
						include UpdateCashCodeBalances
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						make transition to Reconciled

























	
				ManualStaleDate is an Instance Action 	
					valid when (CanStaleDateTransaction)
					Parameters	
						PrmStaleDate   		is Date
						PrmPostDate			is Date
					Parameter Rules
						PrmStaleDate
							default to current corporate date
						PrmPostDate	
							default to current corporate date
							if (CBCompanySystemClosingControlRel.Control)
								constraint (PrmPostDate within CBCompanySystemClosingControlRel.ValidEntryDate)
									"PostDateNotWithinValidEntryDatesForSystemCode_'\C\B'_andCompany<Company>;ValidDateRangeIs<CBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CBCompanySystemClosingControlRel.ValidEntryDate.End>"
					Entrance Rules
						constraint (!StaleDateProcessingStatus.Selected
						and  		!StaleDateProcessingStatus.InError)
							"CannotStaleDate;TransactionAlreadyExistsInStaleDateOutputFileHeader<StaleDateOutputFileHeader>"
						constraint (!IsUnreleasedCashLedgerReconciliationAdjustmentExist)
							"CannotStaleDateVarianceAdjustmentExists"
						if (PayablesCompanyVendorProcLevel.PayablesProcessLevel entered)	
                        	constraint (StaleDatingGLAccountByProcessLevelRel.StaleDateAccount entered)
								"CannotStaleDate;StaleDateAccountNotDefinedInCompanyCashCodeForProcessLevel<PayablesCompanyVendorProcLevel.PayablesProcessLevel>"
                        else
                         	constraint (StaleDatingGLAccountRel.StaleDateAccount entered)
	                        	"CannotStaleDate;StaleDateAccountNotDefinedInCompanyCashCode"
						constraint (TransactionNumber entered)	
							"CannotStaleDateTransactionNumberDoesNotExist"
						constraint (Type = "C"		
					    or          Type = blank)	
					    	"CannotStaleDate<Type>TypeTransactions"
					    constraint (BankTransactionCode.BankTransactionType.CashPayment)	
							"BankTransactionCodeMustBeACashPayment"		
					Action Rules
						if (BankStatementReconciliation set exists)
							constraint (first BankStatementReconciliation set.ReconMatchNumber !entered)
								"CannotStaleDate;TransactionMatchedToBankStatement<first BankStatementReconciliation set.ReconMatchNumber.BankStatement>Dated<first BankStatementReconciliation set.ReconMatchNumber.BankStatement.StatementDate>LineMatchField<first BankStatementReconciliation set.ReconMatchNumber.LineMatchField>;MustBeUnmatchedFromTheBankStatementPriorToStaleDating"						
		        		LocalExchangeDate		= PrmStaleDate
		        		LocalPostingDate		= PrmPostDate
						invoke Open.ManualStaleDateUpdate	
									
				ManualStaleDateUpdate is an Instance Action	
					default label is untranslatable
					restricted
					Action Rules
						if   (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
						and ((PaymentCashAccountDistributionsRel exists
						and  (Type.CashLedgerPayment
						or    CashLedgerSourceRecord.CashLedgerTransaction))		
						or    FundCashPaymentDistributionsRel exists))
							if  (Type.CashLedgerPayment
							or   CashLedgerSourceRecord.CashLedgerTransaction)
								for each PaymentCashAccountDistributionsRel
									LocalDescription				= StaleDatingMessage
					        		LocalIssuedBankAmount			= each.GLTransactionAmount
									LocalFinanceCurrencyAmount		= each.GLBaseAmount
									LocalCompany					= each.Company

									if (PayablesCompanyVendorProcLevel.PayablesProcessLevel entered)	
										LocalStaleDateAccount	= StaleDatingGLAccountByProcessLevelRel.StaleDateAccount
			        	            else
			            	           	LocalStaleDateAccount	= StaleDatingGLAccountRel.StaleDateAccount
									include CalculateStaleDateFundStructure
									include CreateStaleDateProcessingDistributions	
								for each PaymentCashAccountDistributionsRel
									invoke UpdateCashCodeFundBalance each
									LocalDescription 				= CashDisbursementMessage
									LocalIssuedBankAmount			= each.GLTransactionAmount  * -1
									LocalFinanceCurrencyAmount		= each.GLBaseAmount
									LocalCompany					= each.Company
									LocalGLFinanceCodeBlock			= each.GLFinanceCodeBlock
									include ReverseBaseDistributionAmounts
									include CreateStaleDateProcessingDistributions	
							else
								for each FundCashPaymentDistributionsRel
									LocalDescription				= StaleDatingMessage
					        		LocalIssuedBankAmount			= each.GLTransactionAmount
									LocalFinanceCurrencyAmount		= each.GLBaseAmount
									LocalCompany					= each.Company

									if (PayablesCompanyVendorProcLevel.PayablesProcessLevel entered)	
										LocalStaleDateAccount	= StaleDatingGLAccountByProcessLevelRel.StaleDateAccount
									else
			            	           	LocalStaleDateAccount	= StaleDatingGLAccountRel.StaleDateAccount
									include CalculateStaleDateFundStructure
									include CreateStaleDateProcessingDistributions	
								for each FundCashPaymentDistributionsRel
									invoke UpdateCashCodeFundBalance each
									LocalDescription 				= CashDisbursementMessage
									LocalIssuedBankAmount			= each.GLTransactionAmount  * -1
									LocalFinanceCurrencyAmount		= each.GLBaseAmount
									LocalCompany					= each.Company
									LocalGLFinanceCodeBlock			= each.GLFinanceCodeBlock
									include ReverseBaseDistributionAmounts
									include CreateStaleDateProcessingDistributions	
						else
							LocalDescription				= StaleDatingMessage
			        		LocalIssuedBankAmount			= IssuedBankAmount * -1
							LocalFinanceCurrencyAmount		= IssuedBaseAmount
							include ReverseBaseDistributionAmounts

							if (PayablesCompanyVendorProcLevel.PayablesProcessLevel entered)	
								LocalGLFinanceCodeBlock		= StaleDatingGLAccountByProcessLevelRel.StaleDateAccount
	        	            else
	            	           	LocalGLFinanceCodeBlock		= StaleDatingGLAccountRel.StaleDateAccount
							include CreateStaleDateProcessingDistributions	
							LocalDescription 				= CashDisbursementMessage
							LocalIssuedBankAmount			= IssuedBankAmount
							LocalFinanceCurrencyAmount		= IssuedBaseAmount
							LocalGLFinanceCodeBlock			= CompanyCashCode.CashAccount
							include CreateStaleDateProcessingDistributions	
						LocalActionOpenToStaleDated 	= true
						StaleDate						= LocalExchangeDate
						ReconciliationData.ExchangeDate = LocalExchangeDate
                        if (StaleDatingGLAccountByProcessLevelRel exists)
							StaleDateAccount    		= StaleDatingGLAccountByProcessLevelRel.StaleDateAccount
                        else
                         	StaleDateAccount    		= StaleDatingGLAccountRel.StaleDateAccount
						include UpdateCashCodeBalances	
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						make transition to StaleDated
						if (CanViewPaymentDetails
                        and CashLedgerPayablesPaymentRel.IsBankIssuedPaymentNumber)
                            invoke FastUpdate CashLedgerPayablesPaymentRel
                                invoked.Status = 15 


				StaleDatedReopenPhase2 is an Instance Action	
					default label is untranslatable
					restricted
					Action Rules
						initialize StaleDate
						initialize StaleDateAccount



				EscheatFromBankUpdateFile is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						PrmEscheatDate	is Date
					Action Rules 
						ReconciliationData.ExchangeDate = PrmEscheatDate
						LastMaintenanceDate = current timestamp
						make transition to Escheated


				StaleDateFromBankUpdateFile is an Instance Action	
					default label is untranslatable
					restricted
					Parameters
						PrmStaleDate	is Date
					Action Rules
						ReconciliationData.ExchangeDate = PrmStaleDate
						LastMaintenanceDate 			= current timestamp
						StaleDate						= PrmStaleDate
						if (StaleDatingGLAccountByProcessLevelRel exists)
							StaleDateAccount			= StaleDatingGLAccountByProcessLevelRel.StaleDateAccount
                        else
                         	StaleDateAccount			= StaleDatingGLAccountRel.StaleDateAccount
						make transition to StaleDated


			Reconciled is a State




				Delete is an Instance Action
					restricted

				Reopen is an Instance Action
					valid when (CanReopenTransaction)
					Action Rules
						constraint (BankStatementReconciliation set !exists)
							"CannotReopen;TransactionMatchedToBankStatement<first BankStatementReconciliation set.ReconMatchNumber.BankStatement>Dated<first BankStatementReconciliation set.ReconMatchNumber.BankStatement.StatementDate>LineMatchField<first BankStatementReconciliation set.ReconMatchNumber.LineMatchField>;MustBeReOpenedFromTheBankStatement"						
						invoke Reconciled.ReopenUpdate
						if (SummaryOption.Summarized)
							LocalStatus	= Status
							if (CashLedgerTransactionsSummarizedAndProcessedRel exists)		
								for each CashLedgerTransactionsSummarizedAndProcessedRel
									invoke Reconciled.ReopenUpdate each		
				
				ReopenTransferDetailOrHeader is an Instance Action		 
					default label is "Reopen"
					valid when (CanReopenTransferDetailOrHeader)
					Parameters
						PrmReopenRelatedFundTransfers 	is Boolean
							default label is "ReopenRelatedFundTransfers"
					Parameter Rules
						PrmReopenRelatedFundTransfers
							constraint (IsFundTransfer)
								"ReopenRelatedFundTransfersOnlyValidForTransactionsGeneratedFromFundTransfers"
					Action Rules
						if (PrmReopenRelatedFundTransfers)
							if (Type.TransferDetail) 
								LocalCashCode				= first CashLedgerFundTransferDetailsRel.CashCode
								LocalFundHeaderCashCode		= first CashLedgerFundTransferDetailsRel.CashCode
								LocalBankTransactionCode	= first CashLedgerFundTransferDetailsRel.CashLedgerFundTransferHeader.BankTransactionCode
								constraint (first RelatedFundTransferTransactionsRel.Status.Reconciled)
									"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotReconciled;CannotReopen"

								invoke Reconciled.ReopenUpdate first RelatedFundTransferTransactionsRel 
							else
								LocalFundHeaderCashCode			= CashCode

							for each LocalCashLedgerFundTransferHeaderRel.CashLedgerFundTransferDetail set
								LocalCashCode 				= each.CashLedgerFundTransferDetail.DetailCashCode
								LocalBankTransactionCode	= each.BankTransactionCode

								if (first RelatedFundTransferTransactionsRel.CashLedgerTransaction  != CashLedgerTransaction)
									constraint (first RelatedFundTransferTransactionsRel.Status.Reconciled)
										"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotReconciled;CannotReopen"
									invoke Reconciled.ReopenUpdate first RelatedFundTransferTransactionsRel

						constraint (BankStatementReconciliation set !exists)
							"CannotReopen;TransactionMatchedToBankStatement<first BankStatementReconciliation set.ReconMatchNumber.BankStatement>Dated<first BankStatementReconciliation set.ReconMatchNumber.BankStatement.StatementDate>LineMatchField<first BankStatementReconciliation set.ReconMatchNumber.LineMatchField>;MustBeReOpenedFromTheBankStatement"						
						invoke Reconciled.ReopenUpdate
						if (SummaryOption.Summarized)
							LocalStatus	= Status
							if (CashLedgerTransactionsSummarizedAndProcessedRel exists)
								for each CashLedgerTransactionsSummarizedAndProcessedRel
									invoke Reconciled.ReopenUpdate each	

				ReopenFromCTMBankStatement is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						constraint (PeriodDate !entered)
							"Transaction:<TransactionNumber>ForCashCode:<CashCode>BankTransactionCode:<BankTransactionCode>HasBeenClosed;CannotReopen"
						invoke Reconciled.ReopenUpdate
						if (SummaryOption.Summarized)
							LocalStatus	= Status
							if (CashLedgerTransactionsSummarizedAndProcessedRel exists)		
								for each CashLedgerTransactionsSummarizedAndProcessedRel
									invoke Reconciled.ReopenUpdate each		

				ReopenUpdate is an Instance Action	
					default label is untranslatable
					restricted
					Entrance Rules
					Action Rules
						LocalActionReconcileToReopen = true
						include ProcessReopenUpdates
						include UpdateCashCodeBalances
						initialize ReconciliationData	
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						make transition to Open


				StaleDatedReopenPhase2 is an Instance Action	
					default label is untranslatable
					restricted
					Action Rules
						LocalActionStaleDatedToReopen = true
						initialize StaleDate
						initialize StaleDateAccount
						include UpdateCashCodeBalances
				 		

				PeriodClose is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						PrmPeriodDate	is Date
					Action Rules
						PeriodDate = PrmPeriodDate


			Voided is a State



				Entrance Rules
					invoke Purge BankStatementReconciliation set
					
				Reopen is an Instance Action
					valid when (CanReopenTransaction)
					Action Rules
						invoke Voided.ReopenUpdate
						if (SummaryOption.Summarized
						and CashLedgerPayablesPaymentsRejectedRel not exists)
							LocalStatus			 		= Status
							if (CashLedgerTransactionsSummarizedAndProcessedRel exists)		
								for each CashLedgerTransactionsSummarizedAndProcessedRel
									invoke Voided.ReopenUpdate each		
				
				ReopenTransferDetailOrHeader is an Instance Action  
					default label is "Reopen"
					valid when (CanReopenTransferDetailOrHeader)
					Parameters
						PrmReopenRelatedFundTransfers 	is Boolean
							default label is "ReopenRelatedFundTransfers"
					Parameter Rules
						PrmReopenRelatedFundTransfers
							constraint (IsFundTransfer)
								"ReopenRelatedFundTransfersOnlyValidForTransactionsGeneratedFromFundTransfers"
					Action Rules
						if (PrmReopenRelatedFundTransfers)
							if (Type.TransferDetail) 
								LocalCashCode				= first CashLedgerFundTransferDetailsRel.CashCode
								LocalFundHeaderCashCode		= first CashLedgerFundTransferDetailsRel.CashCode
								LocalBankTransactionCode	= first CashLedgerFundTransferDetailsRel.CashLedgerFundTransferHeader.BankTransactionCode
								constraint (first RelatedFundTransferTransactionsRel.Status.Voided)
									"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotVoided;CannotReopen"

								invoke Voided.ReopenUpdate first RelatedFundTransferTransactionsRel 
							else
								LocalFundHeaderCashCode			= CashCode

							for each LocalCashLedgerFundTransferHeaderRel.CashLedgerFundTransferDetail set
								LocalCashCode 				= each.CashLedgerFundTransferDetail.DetailCashCode
								LocalBankTransactionCode	= each.BankTransactionCode

								if (first RelatedFundTransferTransactionsRel.CashLedgerTransaction  != CashLedgerTransaction)
									constraint (first RelatedFundTransferTransactionsRel.Status.Voided)
										"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotVoided;CannotReopen"
									invoke Voided.ReopenUpdate first RelatedFundTransferTransactionsRel
						invoke Voided.ReopenUpdate
						if (SummaryOption.Summarized
						and CashLedgerPayablesPaymentsRejectedRel not exists)
							LocalStatus			 		= Status
							if (CashLedgerTransactionsSummarizedAndProcessedRel exists)
								for each CashLedgerTransactionsSummarizedAndProcessedRel
									invoke Voided.ReopenUpdate each

				ReopenUpdate is an Instance Action
					default label is untranslatable
					restricted
					Entrance Rules
						constraint (!ReinstateStatus) // != "Y")
							"VoidStopPayUpdateHasBeenRun,CannotReopen"	//@e.CBCBT.???" 4GL uses wrong msg number of 119
						LocalRunProgram = RunProgram.BankTransactionAdjustment
						if (SourceCode = "AP")							
							include VerifyProcessingMonitorRule
					Action Rules
						LocalActionVoidToReopen = true
						include UpdateCashCodeBalances
						initialize ReconciliationData
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						make transition to Open

				ReopenCashLedgerPayment is an Instance Action		
					valid when (CanReopenCashLedgerPayment)
					confirmation required
						"ThisActionReopensAReinstatedVoidedCashLedgerPayment;Continue"
					Parameters
						PrmPostDate		is Date
							default label is "ReopenPostDate"
					Parameter Rules
						PrmPostDate
							initial value is ReconciliationData.ExchangeDate
							default to ReconciliationData.ExchangeDate
							if (CBCompanySystemClosingControlRel.Control)
								constraint (PrmPostDate within CBCompanySystemClosingControlRel.ValidEntryDate)
									"PostDateNotWithinValidEntryDatesForSystemCode_'\C\B'_andCompany<Company>;ValidDateRangeIs<CBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CBCompanySystemClosingControlRel.ValidEntryDate.End>"
					Action Rules
						if (CashCode.NewCashLedgerPaymentForVoid)
							confirmation required
								"NewCashLedgerPaymentsAreCreatedWhenVoiding;OtherRecordsMayAlreadyBeProcessed;Continue"
						LocalActionVoidToReopen = true
						include UpdateCashCodeBalances
						initialize ReconciliationData
						ReinstateStatus	= false
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						invoke ReopenVoidedPayment CashLedgerPaymentOTORel
							invoked.PrmPostDate	= PrmPostDate 
						make transition to Open



















			StopPayment is a State
				Entrance Rules
					invoke Purge BankStatementReconciliation set

				Delete is an Instance Action
					restricted







				Reopen is an Instance Action
					valid when (CanReopenTransaction)
					Action Rules
						invoke StopPayment.ReopenUpdate
						if (SummaryOption.Summarized
						and CashLedgerPayablesPaymentsRejectedRel not exists)
							LocalStatus			 		= Status
							if (CashLedgerTransactionsSummarizedAndProcessedRel exists)		
								for each CashLedgerTransactionsSummarizedAndProcessedRel
									invoke StopPayment.ReopenUpdate each		
				
				ReopenTransferDetailOrHeader is an Instance Action  	 
					default label is "Reopen"
					valid when (CanReopenTransferDetailOrHeader)
					Parameters
						PrmReopenRelatedFundTransfers 	is Boolean
							default label is "ReopenRelatedFundTransfers"
					Parameter Rules
						PrmReopenRelatedFundTransfers
							constraint (IsFundTransfer)
								"ReopenRelatedFundTransfersOnlyValidForTransactionsGeneratedFromFundTransfers"
					Action Rules
						if (PrmReopenRelatedFundTransfers)
							if (Type.TransferDetail) 
								LocalCashCode				= first CashLedgerFundTransferDetailsRel.CashCode
								LocalFundHeaderCashCode		= first CashLedgerFundTransferDetailsRel.CashCode
								LocalBankTransactionCode	= first CashLedgerFundTransferDetailsRel.CashLedgerFundTransferHeader.BankTransactionCode
								constraint (first RelatedFundTransferTransactionsRel.Status.StopPayment)
									"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotStopPayment;CannotReopen"

								invoke StopPayment.ReopenUpdate first RelatedFundTransferTransactionsRel 
							else
								LocalFundHeaderCashCode			= CashCode

							for each LocalCashLedgerFundTransferHeaderRel.CashLedgerFundTransferDetail set
								LocalCashCode 				= each.CashLedgerFundTransferDetail.DetailCashCode
								LocalBankTransactionCode	= each.BankTransactionCode

								if (first RelatedFundTransferTransactionsRel.CashLedgerTransaction  != CashLedgerTransaction)
									constraint (first RelatedFundTransferTransactionsRel.Status.StopPayment)
										"RelatedCashLedgerTransactionForCashCode:<LocalCashCode>AndBankTransactionCode:<LocalBankTransactionCode>IsNotStopPayment;CannotReopen"
									invoke StopPayment.ReopenUpdate first RelatedFundTransferTransactionsRel
						invoke StopPayment.ReopenUpdate
						if (SummaryOption.Summarized
						and CashLedgerPayablesPaymentsRejectedRel not exists)
							LocalStatus			 		= Status
							if (CashLedgerTransactionsSummarizedAndProcessedRel exists)
								for each CashLedgerTransactionsSummarizedAndProcessedRel
									invoke StopPayment.ReopenUpdate each

				ReopenUpdate is an Instance Action	
					default label is untranslatable
					restricted
					Entrance Rules
						constraint (!ReinstateStatus) // != "Y")
							"VoidStopPayUpdateHasBeenRun,CannotReopen"	//"@e.CBCBT.???" 4GL uses wrong msg number of 119
						LocalRunProgram = RunProgram.BankTransactionAdjustment
						if (SourceCode = "AP")
							include VerifyProcessingMonitorRule
					Action Rules
						LocalActionStopPaymentToReopen = true
						if (StaleDateAccount entered)
							if (GLStaleDateDistributionsReleasedRel exists)
								invoke VoidReleasedDistributions GLStaleDateDistributionsReleasedRel
								if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
									if (Type.CashLedgerPayment
									or  CashLedgerSourceRecord.CashLedgerTransaction)		
										invoke UpdateCashCodeFundBalance PaymentCashAccountDistributionsRel
											invoked.AddToBalance	= true
									else									
										invoke UpdateCashCodeFundBalance FundCashPaymentDistributionsRel
											invoked.AddToBalance	= true
								LocalActionStaleDatedToReopen = true
								initialize StaleDate
								initialize StaleDateAccount	
								initialize StaleDateProcessingStatus
								initialize StaleDateOutputFileHeader
							else
								if   (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
								and ((PaymentCashAccountDistributionsRel exists
								and  (Type.CashLedgerPayment
								or    CashLedgerSourceRecord.CashLedgerTransaction))		
								or    FundCashPaymentDistributionsRel exists))
									LocalExchangeDate						= StaleDate
									if  (Type.CashLedgerPayment
									or   CashLedgerSourceRecord.CashLedgerTransaction)
										for each PaymentCashAccountDistributionsRel
											LocalDescription				= StaleDatingMessage
											LocalIssuedBankAmount			= each.GLTransactionAmount  * -1
											LocalFinanceCurrencyAmount		= each.GLBaseAmount
											LocalCompany					= each.Company


											LocalStaleDateAccount			= StaleDateAccount
											include CalculateStaleDateFundStructure
											include CreateStaleDateProcessingDistributions	
										for each PaymentCashAccountDistributionsRel
											invoke UpdateCashCodeFundBalance each
												invoked.AddToBalance	= true
											LocalDescription 				= CashDisbursementMessage
											LocalIssuedBankAmount			= each.GLTransactionAmount
											LocalFinanceCurrencyAmount		= each.GLBaseAmount
											LocalCompany					= each.Company
											LocalGLFinanceCodeBlock			= each.GLFinanceCodeBlock
											include ReverseBaseDistributionAmounts
											include CreateStaleDateProcessingDistributions	
									else
										for each FundCashPaymentDistributionsRel
											LocalDescription				= StaleDatingMessage
											LocalIssuedBankAmount			= each.GLTransactionAmount  * -1
											LocalFinanceCurrencyAmount		= each.GLBaseAmount
											LocalCompany					= each.Company


											LocalStaleDateAccount			= StaleDateAccount
											include CalculateStaleDateFundStructure 
											include CreateStaleDateProcessingDistributions	
										for each FundCashPaymentDistributionsRel
											invoke UpdateCashCodeFundBalance each
												invoked.AddToBalance	= true
											LocalDescription 				= CashDisbursementMessage
											LocalIssuedBankAmount			= each.GLTransactionAmount
											LocalFinanceCurrencyAmount		= each.GLBaseAmount
											LocalCompany					= each.Company
											LocalGLFinanceCodeBlock			= each.GLFinanceCodeBlock
											include ReverseBaseDistributionAmounts
											include CreateStaleDateProcessingDistributions	
								else
									LocalDescription				= StaleDatingMessage
									LocalIssuedBankAmount			= IssuedBankAmount
									LocalFinanceCurrencyAmount		= IssuedBaseAmount
									LocalCompany					= Company.OrigCompany
									LocalGLFinanceCodeBlock			= StaleDateAccount
									LocalExchangeDate				= StaleDate
		        					LocalPostingDate				= StaleDate
									include CreateStaleDateProcessingDistributions	
									LocalDescription 				= CashDisbursementMessage
									LocalIssuedBankAmount			= IssuedBankAmount * -1
									LocalFinanceCurrencyAmount		= IssuedBaseAmount
									LocalCompany					= Company.OrigCompany
									include ReverseBaseDistributionAmounts
									LocalGLFinanceCodeBlock			= CompanyCashCode.CashAccount
									LocalExchangeDate				= StaleDate
		        					LocalPostingDate				= StaleDate
									include CreateStaleDateProcessingDistributions	
							LocalActionStaleDatedToReopen = true
							initialize StaleDate
							initialize StaleDateAccount	
							initialize ReconciliationData
							initialize StaleDateProcessingStatus
							initialize StaleDateOutputFileHeader

						initialize ReconciliationData
						include UpdateCashCodeBalances
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						make transition to Open

				ReopenCashLedgerPayment is an Instance Action		
					valid when (CanReopenCashLedgerPayment)
					confirmation required
						"ThisActionReopensAReinstatedVoidedCashLedgerPayment;Continue"
					Parameters
						PrmPostDate		is Date
							default label is "ReopenPostDate"
					Parameter Rules
						PrmPostDate
							initial value is ReconciliationData.ExchangeDate
							default to ReconciliationData.ExchangeDate
							if (CBCompanySystemClosingControlRel.Control)
								constraint (PrmPostDate within CBCompanySystemClosingControlRel.ValidEntryDate)
									"PostDateNotWithinValidEntryDatesForSystemCode_'\C\B'_andCompany<Company>;ValidDateRangeIs<CBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CBCompanySystemClosingControlRel.ValidEntryDate.End>"
					Action Rules
						if (CashCode.NewCashLedgerPaymentForVoid)
							confirmation required
								"NewCashLedgerPaymentsAreCreatedWhenVoiding;OtherRecordsMayAlreadyBeProcessed;Continue"
						LocalActionStopPaymentToReopen = true
						include UpdateCashCodeBalances
						initialize ReconciliationData
						ReinstateStatus	= false
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						invoke ReopenVoidedPayment CashLedgerPaymentOTORel
							invoked.PrmPostDate	= PrmPostDate 
						make transition to Open














			StaleDated is a State
				Entrance Rules
					invoke Purge BankStatementReconciliation set

				ManualEscheat is an Instance Action		
					valid when (StaleDatedTransactionAvailableForProcessing)
					Parameters	
						PrmEscheatDate 		is Date
						PrmPostDate			is Date
					Parameter Rules
						PrmEscheatDate
							default to current corporate date
						PrmPostDate	
							default to current corporate date
							if (CBCompanySystemClosingControlRel.Control)
								constraint (PrmPostDate within CBCompanySystemClosingControlRel.ValidEntryDate)
									"PostDateNotWithinValidEntryDatesForSystemCode_'\C\B'_andCompany<Company>;ValidDateRangeIs<CBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CBCompanySystemClosingControlRel.ValidEntryDate.End>"
					Entrance Rules
						constraint (!EscheatmentProcessingStatus.Selected
						or  		!EscheatmentProcessingStatus.InError)
							"CannotEscheat;TransactionAlreadyExistsInEscheatmentOutputFileHeader<EscheatmentOutputFileHeader>"
						if (PayablesCompanyVendorProcLevel.PayablesProcessLevel entered)	
                        	constraint (StaleDatingGLAccountByProcessLevelRel.EscheatmentAccount entered)
								"CannotEscheat;EscheatmentAccountNotDefinedInCompanyCashCodeForProcessLevel<PayablesCompanyVendorProcLevel.PayablesProcessLevel>"
                        else
                         	constraint (StaleDatingGLAccountRel.EscheatmentAccount entered)
	                        	"CannotEscheat;EscheatmentAccountNotDefinedInCompanyCashCode"
						constraint (TransactionNumber entered)	
							"CannotEscheatTransactionNumberDoesNotExist"
					Action Rules


						LocalExchangeDate	= PrmEscheatDate
		        		LocalPostingDate	= PrmPostDate		
						invoke StaleDated.ManualEscheatUpdate	

				ManualEscheatUpdate is an Instance Action	
					default label is untranslatable
					restricted
					Action Rules
						if   (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
						and ((PaymentCashAccountDistributionsRel exists
						and  (Type.CashLedgerPayment
						or    CashLedgerSourceRecord.CashLedgerTransaction))		
						or    FundCashPaymentDistributionsRel exists))
							if  (Type.CashLedgerPayment
							or   CashLedgerSourceRecord.CashLedgerTransaction)
								for each PaymentCashAccountDistributionsRel
									LocalDescription				= StaleDatingMessage
					        		LocalIssuedBankAmount			= each.GLTransactionAmount  * -1
									LocalFinanceCurrencyAmount		= each.GLBaseAmount
									LocalCompany					= each.Company


									LocalStaleDateAccount			= StaleDateAccount
									include CalculateStaleDateFundStructure
									include ReverseBaseDistributionAmounts
									include CreateStaleDateProcessingDistributions	
								for each PaymentCashAccountDistributionsRel
									initialize LocalStaleDateAccount
									LocalDescription 				= EscheatmentMessage
									LocalIssuedBankAmount			= each.GLTransactionAmount
									LocalFinanceCurrencyAmount		= each.GLBaseAmount
									LocalCompany					= each.Company

									if (StaleDatingGLAccountByProcessLevelRel exists)
										LocalEscheatmentAccount 	= StaleDatingGLAccountByProcessLevelRel.EscheatmentAccount
			        	            else
			            	           	LocalEscheatmentAccount 	= StaleDatingGLAccountRel.EscheatmentAccount
									include CalculateStaleDateFundStructure
									include CreateStaleDateProcessingDistributions	
							else
								for each FundCashPaymentDistributionsRel
									LocalDescription				= StaleDatingMessage
					        		LocalIssuedBankAmount			= each.GLTransactionAmount  * -1
									LocalFinanceCurrencyAmount		= each.GLBaseAmount
									LocalCompany					= each.Company


									LocalStaleDateAccount			= StaleDateAccount
									include CalculateStaleDateFundStructure
									include ReverseBaseDistributionAmounts
									include CreateStaleDateProcessingDistributions	
								for each FundCashPaymentDistributionsRel
									initialize LocalStaleDateAccount
									LocalDescription 				= EscheatmentMessage
									LocalIssuedBankAmount			= each.GLTransactionAmount
									LocalFinanceCurrencyAmount		= each.GLBaseAmount
									LocalCompany					= each.Company

									if (StaleDatingGLAccountByProcessLevelRel exists)
										LocalEscheatmentAccount 	= StaleDatingGLAccountByProcessLevelRel.EscheatmentAccount
			        	            else
			            	           	LocalEscheatmentAccount 	= StaleDatingGLAccountRel.EscheatmentAccount
									include CalculateStaleDateFundStructure
									include CreateStaleDateProcessingDistributions	
						else
							LocalDescription				= StaleDatingMessage
			        		LocalIssuedBankAmount			= IssuedBankAmount
							LocalFinanceCurrencyAmount		= IssuedBaseAmount
		                    LocalGLFinanceCodeBlock			= StaleDateAccount
							include CreateStaleDateProcessingDistributions	
							LocalDescription 				= EscheatmentMessage	
							LocalIssuedBankAmount			= IssuedBankAmount * -1
							LocalFinanceCurrencyAmount		= IssuedBaseAmount
							include ReverseBaseDistributionAmounts
							if (StaleDatingGLAccountByProcessLevelRel exists)
								LocalGLFinanceCodeBlock		= StaleDatingGLAccountByProcessLevelRel.EscheatmentAccount
	        	            else
	            	           	LocalGLFinanceCodeBlock		= StaleDatingGLAccountRel.EscheatmentAccount
							include CreateStaleDateProcessingDistributions	
						LocalActionStaleDatedToEscheat = true
						ReconciliationData.ExchangeDate	= LocalExchangeDate
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						make transition to Escheated
						if (CanViewPaymentDetails
                        and CashLedgerPayablesPaymentRel.IsBankIssuedPaymentNumber)
                            invoke FastUpdate CashLedgerPayablesPaymentRel
                                invoked.Status = 16 


				EscheatFromBankUpdateFile is an Instance Action	
					default label is untranslatable
					restricted
					Parameters
						PrmEscheatDate	is Date
					Action Rules
						ReconciliationData.ExchangeDate = PrmEscheatDate
						LastMaintenanceDate = current timestamp
						make transition to Escheated

						










				Reopen is an Instance Action 	
					valid when (CanReopenTransaction)
					Parameters	
						PrmPostDate		is Date
					Parameter Rules
						PrmPostDate	
							if (PrmPostDate entered)
								if (CBCompanySystemClosingControlRel.Control)
									constraint (PrmPostDate within CBCompanySystemClosingControlRel.ValidEntryDate)
										"PostDateNotWithinValidEntryDatesForSystemCode_'\C\B'_andCompany<Company>;ValidDateRangeIs<CBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CBCompanySystemClosingControlRel.ValidEntryDate.End>"
					Entrance Rules	
						constraint (!ReinstateStatus)	
							"CannotReopen;StaleDatedTransactionHasBeenReinstated"
					Action Rules
						if (PrmPostDate entered)
		        			LocalExchangeDate	= PrmPostDate
		        			LocalPostingDate	= PrmPostDate
		        		else
		        			LocalExchangeDate	= StaleDate
		        			LocalPostingDate	= StaleDate
						invoke StaleDated.ReopenUpdate

				ReopenUpdate is an Instance Action	
					default label is untranslatable
					restricted



					Action Rules
						if (GLStaleDateDistributionsReleasedRel exists)
							invoke VoidReleasedDistributions GLStaleDateDistributionsReleasedRel
							if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
								if (Type.CashLedgerPayment
								or  CashLedgerSourceRecord.CashLedgerTransaction)		
									invoke UpdateCashCodeFundBalance PaymentCashAccountDistributionsRel
										invoked.AddToBalance	= true
								else									
									invoke UpdateCashCodeFundBalance FundCashPaymentDistributionsRel
										invoked.AddToBalance	= true
						else
							if   (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting
							and ((PaymentCashAccountDistributionsRel exists
							and  (Type.CashLedgerPayment
							or    CashLedgerSourceRecord.CashLedgerTransaction))		
							or    FundCashPaymentDistributionsRel exists))
								if  (Type.CashLedgerPayment
								or   CashLedgerSourceRecord.CashLedgerTransaction)
									for each PaymentCashAccountDistributionsRel
										LocalDescription				= StaleDatingMessage
						        		LocalIssuedBankAmount			= each.GLTransactionAmount  * -1
										LocalFinanceCurrencyAmount		= each.GLBaseAmount
										LocalCompany					= each.Company


										LocalStaleDateAccount			= StaleDateAccount
										include CalculateStaleDateFundStructure
										include CreateStaleDateProcessingDistributions	
									for each PaymentCashAccountDistributionsRel
										invoke UpdateCashCodeFundBalance each
											invoked.AddToBalance	= true
										LocalDescription 				= CashDisbursementMessage
										LocalIssuedBankAmount			= each.GLTransactionAmount
										LocalFinanceCurrencyAmount		= each.GLBaseAmount
										LocalCompany					= each.Company
										LocalGLFinanceCodeBlock			= each.GLFinanceCodeBlock
										include ReverseBaseDistributionAmounts
										include CreateStaleDateProcessingDistributions	
								else
									for each FundCashPaymentDistributionsRel
										LocalDescription				= StaleDatingMessage
						        		LocalIssuedBankAmount			= each.GLTransactionAmount  * -1
										LocalFinanceCurrencyAmount		= each.GLBaseAmount
										LocalCompany					= each.Company


										LocalStaleDateAccount			= StaleDateAccount
										include CalculateStaleDateFundStructure
										include CreateStaleDateProcessingDistributions	
									for each FundCashPaymentDistributionsRel
										invoke UpdateCashCodeFundBalance each
											invoked.AddToBalance	= true
										LocalDescription 				= CashDisbursementMessage
										LocalIssuedBankAmount			= each.GLTransactionAmount
										LocalFinanceCurrencyAmount		= each.GLBaseAmount
										LocalCompany					= each.Company
										LocalGLFinanceCodeBlock			= each.GLFinanceCodeBlock
										include ReverseBaseDistributionAmounts
										include CreateStaleDateProcessingDistributions	
							else
								LocalDescription				= StaleDatingMessage
				        		LocalIssuedBankAmount			= IssuedBankAmount
								LocalFinanceCurrencyAmount		= IssuedBaseAmount
			                    LocalGLFinanceCodeBlock			= StaleDateAccount
								include CreateStaleDateProcessingDistributions	
								LocalDescription 				= CashDisbursementMessage
								LocalIssuedBankAmount			= IssuedBankAmount * -1
								LocalFinanceCurrencyAmount		= IssuedBaseAmount
								include ReverseBaseDistributionAmounts
		           	           	LocalGLFinanceCodeBlock			= CompanyCashCode.CashAccount
								include CreateStaleDateProcessingDistributions	
						LocalActionStaleDatedToReopen = true
						include UpdateCashCodeBalances
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						initialize StaleDate
						initialize StaleDateAccount	
						initialize ReconciliationData  
						initialize StaleDateProcessingStatus	
						initialize StaleDateOutputFileHeader	
						LastMaintenanceDate = current timestamp
						make transition to Open
						if (CanViewPaymentDetails
                        and CashLedgerPayablesPaymentRel.IsBankIssuedPaymentNumber)
                            invoke FastUpdate CashLedgerPayablesPaymentRel
                                invoked.Status = 2 

				RequestVoidOrStopPayment is an Instance Action
					completion message is "RequestForVoidOrStopPaymentHasBeenSubmittedToTheQueueForProcessing"
				 	valid when (CanRequestVoidOrStopPayment)
					Parameters
						PrmRequestDate				is Date
							default label is "RequestDate"
						PrmApprovalCode				is a ApprovalCode
							default label is "ApprovalCode"
						PrmVoidStopPayAttachment	is an Attachment		
							default label is "Void/\StopPayAttachment"
						PrmCommentText				is a CommentText
							default label is "Comment"
						PrmRequestType				is Numeric 2
							default label is "RequestType"
							States
								StopPayment		value is 1
								Void			value is 2

					Parameter Rules
						PrmRequestDate
							initial value is current corporate date
							default to current corporate date	
						PrmApprovalCode
							initial value is CashCode.ApprovalCode
							default to CashCode.ApprovalCode
							if (!CashManagementGroup.ApprovalCodesNotUsedForVoidStopPayments)
								required
									"ApprovalCodeIsRequired"
							constraint (!PrmApprovalCode.ApprovalCodeUsesMaximumAmounts)
								"CannotSelectApprovalCodesSetUpForNonBatchedCashLedgerPayments"
						PrmRequestType
							required
								"RequestTypeIsRequired"

					Action Rules
						if (IsPayablesPaymentSourcedFromIntercompanyBilling)	
							constraint (initiating action = "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")	
								"ThisIsAnIntercompanyBillingSourcedTransaction;_\PleaseTransactActionsFrom_\Intercompany_\Billing."	

						ReconciliationData.ExchangeDate	= PrmRequestDate
						CommentText 					+= PrmCommentText	
						ApprovalRequestType				= PrmRequestType
						if (PrmVoidStopPayAttachment entered)		
							VoidStopPayAttachment = PrmVoidStopPayAttachment

						include VoidAndStopPaymentRules
						include VoidEntranceRules

						if (!CashManagementGroup.ApprovalCodesNotUsedForVoidStopPayments)
							ApprovalCode	= PrmApprovalCode
							constraint (ApprovalCode.HasApprovalLevels) 
								"CannotComplete;TheApprovalCodeHasNoApprovalLevels"
							constraint (!ApprovalCode.HasTeamWithNoMembers) 
								"CannotComplete;TheApprovalCodeHasATeamWithNoMembers"
							constraint (!ApprovalCode.HasInvalidEscalations)
								"CannotComplete:TheApprovalCodeHasInvalidEscalationSettings"
							constraint (!ApprovalCode.HasInactiveResources)
								"CannotComplete;TheApprovalCodeHasInactiveResources"
			
							initialize ApprovalLevel
							initialize Approver
							initialize ApproverTeam	
							include GetNextApprovalLevel
							ApprovalLevel = LocalApprovalLevel
							Approver = LocalApprover
							ApproverTeam = LocalApproverTeam
						include InitiateApprovalProcessFlow
						
						make transition to PendingApproval	
						include IDM.CreateRules 
							replace AttachmentField with VoidStopPayAttachment

				Void is an Instance Action
					valid when (CanVoidOrStopPayTransaction)
					Parameters
						PrmReconcileDate			is Date
							default label is "VoidDate"
						PrmVoidStopPayAttachment	is an Attachment		
							default label is "Void/\StopPayAttachment"
						PrmCommentText				is a CommentText
							default label is "Comment"
					Parameter Rules
						PrmReconcileDate
							initial value is current corporate date
							default to current corporate date
					Entrance Rules	
						constraint (PeriodDate not entered)
							"CannotVoid;TransactionHasBeenClosed"
						if (IsPayablesPaymentSourcedFromIntercompanyBilling)	
							constraint (initiating action = "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")	
								"ThisIsAnIntercompanyBillingSourcedTransaction;_\PleaseTransactActionsFrom_\Intercompany_\Billing."	

					Action Rules
						ReconciliationData.ExchangeDate	= PrmReconcileDate
						CommentText						+= PrmCommentText
						if (PrmVoidStopPayAttachment entered)		
							VoidStopPayAttachment = PrmVoidStopPayAttachment
						invoke StaleDated.VoidUpdate
						if (SummaryOption.Summarized)
							LocalStatus			 		= Status
							LocalSummaryReconcileDate	= ReconciliationData.ExchangeDate
							if (CashLedgerTransactionsSummarizedAndProcessedRel exists)		
								for each CashLedgerTransactionsSummarizedAndProcessedRel
									each.ReconciliationData.ExchangeDate = LocalSummaryReconcileDate
									invoke StaleDated.VoidUpdate each		
						
						if (initiating action != "ManualApprove"
						and initiating action != "Approve")
							include IDM.CreateRules 
								replace AttachmentField with VoidStopPayAttachment

				VoidUpdate is an Instance Action	
					default label is untranslatable
					restricted
					Entrance Rules
						include VoidEntranceRules
						constraint (!ReinstateStatus) // != "Y")
							"InvoiceHasBeenReinstatedCannot<Status>"	 
						if (IsPayablesPaymentSourcedFromIntercompanyBilling)	
							constraint (initiating action = "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")	
								"ThisIsAnIntercompanyBillingSourcedTransaction;_\PleaseTransactActionsFrom_\Intercompany_\Billing."	
					Action Rules
						LocalActionStaleDatedToVoid = true
						include UpdateReconcileDate
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						make transition to Voided

				StopPayment is an Instance Action
					valid when (CanVoidOrStopPayTransaction)
					Parameters
						PrmReconcileDate			is Date
							default label is "StopPaymentDate"
						PrmVoidStopPayAttachment	is an Attachment		
							default label is "Void/\StopPayAttachment"
						PrmCommentText				is a CommentText
							default label is "Comment"
					Parameter Rules
						PrmReconcileDate
							initial value is current corporate date
							default to current corporate date	
					Entrance Rules	
						constraint (PeriodDate not entered)
							"CannotStopPayment;TransactionHasBeenClosed"
						if (IsPayablesPaymentSourcedFromIntercompanyBilling)	
							constraint (initiating action = "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")	
								"ThisIsAnIntercompanyBillingSourcedTransaction;_\PleaseTransactActionsFrom_\Intercompany_\Billing."	

					Action Rules
						ReconciliationData.ExchangeDate	= PrmReconcileDate
						CommentText						+= PrmCommentText
						if (PrmVoidStopPayAttachment entered)		
							VoidStopPayAttachment = PrmVoidStopPayAttachment
						if (CashCode.StopPayBankConfirmRequired)		
							LastMaintenanceDate = current timestamp
							make transition to PendingStopPayConfirmation
						else
							invoke StaleDated.StopPaymentUpdate
							if (SummaryOption.Summarized)
								LocalStatus			 		= Status
								LocalSummaryReconcileDate 	= ReconciliationData.ExchangeDate
								if (CashLedgerTransactionsSummarizedAndProcessedRel exists)		
									for each CashLedgerTransactionsSummarizedAndProcessedRel
										each.ReconciliationData.ExchangeDate = LocalSummaryReconcileDate
										invoke StaleDated.StopPaymentUpdate each		
						
						if (initiating action != "ManualApprove"
						and initiating action != "Approve")
							include IDM.CreateRules 
								replace AttachmentField with VoidStopPayAttachment

				StopPaymentUpdate is an Instance Action	
					default label is untranslatable
					restricted
					Entrance Rules
						include VoidEntranceRules
						constraint (!ReinstateStatus) // != "Y")
							"InvoiceHasBeenReinstatedCannot<Status>"	
						if (IsPayablesPaymentSourcedFromIntercompanyBilling)	
							constraint (initiating action = "IntercompanyBillingSettlementHeader.ReverseSettlementInitialActionNotInBackgroundInvokedActionsNotInBackground")	
								"ThisIsAnIntercompanyBillingSourcedTransaction;_\PleaseTransactActionsFrom_\Intercompany_\Billing."	
					Action Rules
						LocalActionStaleDatedToStopPayment = true
						include UpdateReconcileDate
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						make transition to StopPayment



			Escheated is a State

















			PendingApproval is a State
				Entrance Rules										
					if (!CashCode.AllowReconciliationForVoidStopPaid)
						invoke Purge BankStatementReconciliation set	
						
				Update is an Update Action
					valid when (AllowUpdateOnApprove)
					Entrance Rules	
						if (ImportStatus not entered)
							if (TransactionNumber changed)
								constraint (TransactionNumber entered)
									"TransactionNumberRequired"
								constraint (!AutoNumberingAllowed)
									"CannotChangeTransactionNumber;AutoNumberingSetup"
								include StripLeadingSpaces
								include CheckForDuplicates
							constraint (SourceCode = "CB")
								"CanOnlyMaintainTransactionsWithSourceCodeOfCB"
							include ReconcileEntranceRules
					Action Rules		
						if (ImportStatus not entered)
							LocalRunProgram = RunProgram.CashLedgerBankTransactionEntry
							include VerifyProcessingMonitorRule
					Exit Rules		
						if (ImportStatus not entered)
							if (SourceCode = "CB")
								include CheckForRelatedChanges

				ReopenTransaction is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						initialize ReconciliationData
						LastMaintenanceDate = current timestamp
						make transition to Open

				OpenToReconcile is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						initialize ReconciliationData
						initialize ApprovalRequestType
						LastMaintenanceDate = current timestamp
						cancel CashLedgerTransactionApproval process
						make transition to Open
						
				MoveToUnreleased is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						LastMaintenanceDate = current timestamp
						make transition to Unreleased

				MoveToStaleDated is an Instance Action
					default label is untranslatable
					restricted
					Action Rules
						LastMaintenanceDate = current timestamp
						make transition to StaleDated
						
				BatchApprove is a Set Action		
					default label is untranslatable
					restricted
					Parameters
						PrmCashManagementGroup			is a CashManagementGroup		
						PrmCashLedgerBatchApproval		is a CashLedgerBatchApproval	
						PrmApprovalCode					is an ApprovalCode
					Instance Selection		
						where (CashManagementGroup		= PrmCashManagementGroup
						and    CashLedgerBatchApproval	= PrmCashLedgerBatchApproval
						and    !BudgetEditInProgress						
						and    Status.PendingApproval)
					Sort Order is ByCashLedgerBatchApproval		
					Action Rules
						Instance Rules
							ApprovalCode	= PrmApprovalCode
							if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit		
							or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
								make transition to Unreleased
								invoke Unreleased.Release
							else
								invoke PendingApproval.Approve

				BatchApprovalApprove is a Set Action		
					default label is untranslatable
					restricted
					Parameters
						PrmCashManagementGroup			is a CashManagementGroup
						PrmCashLedgerBatchApproval		is a CashLedgerBatchApproval
					Instance Selection
						where (CashManagementGroup		= PrmCashManagementGroup
						and    CashLedgerBatchApproval	= PrmCashLedgerBatchApproval
						and    Status.PendingApproval)
					Sort Order is ByCashLedgerBatchApproval
					Action Rules
						Instance Rules
							if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit		
							or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
								make transition to Unreleased
								invoke Unreleased.Release
							else
								invoke PendingApproval.Approve
				
				RemoveFromBatch is an Instance Action        
					valid when (IsBatchApproved)
					Action Rules
						initialize CashLedgerBatchApproval
						make transition to Unreleased


			PendingStopPayConfirmation is a State		
				Entrance Rules
					invoke Purge BankStatementReconciliation set

				Reopen is an Instance Action
					valid when (CanReopenTransaction)
					Action Rules
						LocalActionStopPaymentToReopen = true
						initialize ReconciliationData
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
						LastMaintenanceDate = current timestamp
						make transition to Open

				StopPayment is an Instance Action
					valid when (CanStopPayTransaction)
					Parameters
						PrmReconcileDate			is Date
							default label is "StopPaymentDate"
					Parameter Rules
						PrmReconcileDate
							initial value is ReconciliationData.ExchangeDate
							default to ReconciliationData.ExchangeDate
					Action Rules
						make transition to Open
						invoke Open.StopPayment
							invoked.PrmReconcileDate = PrmReconcileDate
							invoked.PrmBankConfirmed = true
							
			WriteOff is a State		
				Entrance Rules
					invoke Purge BankStatementReconciliation set

				Reopen is an Instance Action
					valid when (!WriteOffProcessed)
					Action Rules
						make transition to Open


	Actions
	
		UpdateTransactionNumber is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmTransactionNumber	is like TransactionNumber
			Action Rules
				TransactionNumber	= PrmTransactionNumber



				invoke UpdateTransactionNumber BankStatementReconciliation set	
					invoked.PrmTransactionNumber	= TransactionNumber

		UpdateConfirmationNumber is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				PrmConfirmationNumber	is like ConfirmationNumber
			Action Rules
				ConfirmationNumber		= PrmConfirmationNumber
										
		CreateVoidManualChecks is a Create Action	
			default label is untranslatable
			restricted
			bypass field rules
							
		UpdateDocumentTotals is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmDocumentCurrencyTotals		is a DocumentCurrencyTotals
			Action Rules
				AppliedDistributionBaseAmount = PrmDocumentCurrencyTotals

		MaintainAttachment is an Instance Action		
			default label is "MaintainVoidStopPayAttachment"
			valid when (CanUpdateAttachment)
			Parameters
				PrmVoidStopPayAttachment	is an Attachment
					default label is "Void/\StopPayAttachment"
			Action Rules
				include IDM.DeleteNoArchiveRules
					replace AttachmentField with VoidStopPayAttachment
				VoidStopPayAttachment = PrmVoidStopPayAttachment
				include IDM.CreateRules 
					replace AttachmentField with VoidStopPayAttachment

		MaintainTransactionAttachment is an Instance Action		
			valid when (!IsUnreleased2)
			Parameters
				PrmTransactionAttachmentt	is an Attachment
					default label is "TransactionAttachment"
			Action Rules
				include IDM.DeleteNoArchiveRules
					replace AttachmentField with TransactionAttachment
				TransactionAttachment = PrmTransactionAttachmentt
				include IDM.CreateRules 
					replace AttachmentField with TransactionAttachment

		ReleaseAmendedDistributions is an Instance Action 
			valid when (CanReleaseAmendedDistributions)
			Action Rules
				constraint (IssuedBankAmount = AppliedDistributionBankAmount)
					"CannotRelease;TransactionOutOfBalance"
				if (CashCode.EditAvailableFunds
				or  CashCode.RestrictedFunds)
					include PerformFundAmountEdit                                   
					constraint (ExceedesCashCodeFundBalanceRel !exists)
						"<first ExceedesCashCodeFundBalanceRel.ErrorMessage>"
					invoke Delete CashCodeFundEditRel
#ifdef module cam
				if (CashManagementGroup.FinanceEnterpriseGroup.CustodialAccountManagement)
					include PerformCustodialAmountEdit
					constraint (ExceedsCustodialAccountBalanceRel !exists)                
						"<first ExceedsCustodialAccountBalanceRel.ErrorMessage>"
					invoke Delete CustodialAccountEditRel
#endif
				if(ExecuteFrontEndSplits)
					invoke ExecuteFrontEndSplitCashTransactions
				if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
				or 	GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
					LocalActionUnreleaseToRelease = true
					include PerformBudgetEditsForApprovalOrRelease
				else
					BypassBudgetProcessing = true
					invoke FinalRelease

		UpdateAmendedDistributions is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmGeneralLedgerPostDate	is a PostingDate
				PrmAmendedDistributions		is Boolean
				
			Action Rules
				if (PrmGeneralLedgerPostDate entered)
					GeneralLedgerPostDate = PrmGeneralLedgerPostDate
					
				if (PrmAmendedDistributions)
					AmendedDistributions = true
				else
					AmendedDistributions = false
		
		LoadCBTransIntoReconciliation is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount
  				PrmBankStatement			is a BankStatement
				PrmMassStatementLoad		is Boolean
				PrmMassAccountLoad			is Boolean
				
			Parameter Rules
					
			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup
				and    CashManagementAccount	= PrmCashManagementAccount
				and   (Status 					= 1
				or	  (Status					= 7
				and    CashCode.AllowReconciliationForVoidStopPaid
				and    ApprovalRequestType 		entered))
				and   TotalDetailAmount !entered
				and	   !BankStatementReconciliation set exists
				and	   PrmBankStatement			= PrmBankStatement) 
				
			Local Fields
  				BackgroundGroup				is AlphaUpper up to 50
  				
			Sort Order
				CashManagementGroup
				CashManagementAccount
				Status
				CashCode
                BankTransactionCode
                CashLedgerTransaction

			Action Rules
				Empty Set Rules
					if (PrmBankStatement entered)
						increment PrmBankStatement.CompletedReconLoadProcesses
						if (PrmBankStatement.CompletedReconLoadProcesses = PrmBankStatement.TotalReconciliationProcesses)
							if (PrmMassStatementLoad)
								BackgroundGroup = PrmCashManagementGroup + current corporate date
							else
								BackgroundGroup = PrmCashManagementGroup + PrmCashManagementAccount + PrmBankStatement
							invoke ReconcileStatementLines BankStatementReconciliation in background group(BackgroundGroup)
								invoked.PrmCashManagementGroup		= PrmCashManagementGroup
								invoked.PrmCashManagementAccount	= PrmCashManagementAccount
								invoked.PrmBankStatement			= PrmBankStatement
					else
						increment PrmCashManagementAccount.CompletedReconLoadProcesses
						if (PrmCashManagementAccount.CompletedReconLoadProcesses = PrmCashManagementAccount.TotalReconciliationProcesses)
							if (PrmMassAccountLoad)
								BackgroundGroup = PrmCashManagementGroup + current corporate date
							else
								BackgroundGroup = PrmCashManagementGroup + PrmCashManagementAccount + current corporate date
							invoke ReconcileStatementLines PrmCashManagementAccount in background group(BackgroundGroup)
								invoked.PrmMassAccountLoad	= PrmMassAccountLoad
								
				Set Rules
					Exit Rules
						if (PrmBankStatement entered)
							increment PrmBankStatement.CompletedReconLoadProcesses
							if (PrmBankStatement.CompletedReconLoadProcesses = PrmBankStatement.TotalReconciliationProcesses)
								if (PrmMassStatementLoad)
									BackgroundGroup = PrmCashManagementGroup + current corporate date
								else
									BackgroundGroup = PrmCashManagementGroup + PrmCashManagementAccount + PrmBankStatement
								invoke ReconcileStatementLines BankStatementReconciliation in background group(BackgroundGroup)
									invoked.PrmCashManagementGroup		= PrmCashManagementGroup
									invoked.PrmCashManagementAccount	= PrmCashManagementAccount
									invoked.PrmBankStatement			= PrmBankStatement
						else
							increment PrmCashManagementAccount.CompletedReconLoadProcesses
							if (PrmCashManagementAccount.CompletedReconLoadProcesses = PrmCashManagementAccount.TotalReconciliationProcesses)
								if (PrmMassAccountLoad)
									BackgroundGroup = PrmCashManagementGroup + current corporate date
								else
									BackgroundGroup = PrmCashManagementGroup + PrmCashManagementAccount + current corporate date
								invoke ReconcileStatementLines PrmCashManagementAccount in background group(BackgroundGroup)
									invoked.PrmMassAccountLoad	= PrmMassAccountLoad
									
				Instance Rules

					invoke Create BankStatementReconciliation
						fill in fields from this instance
						invoked.CashManagementGroup				= PrmCashManagementGroup
						invoked.CashManagementAccount			= PrmCashManagementAccount
						invoked.CashCode						= CashCode
						invoked.BankTransactionCode				= BankTransactionCode
						invoked.SystemCode						= SourceCode
						invoked.CashLedgerTransaction			= CashLedgerTransaction
						invoked.CashLedgerTransactionIdentifier	= CashLedgerTransactionIdentifier
						invoked.LineType						= 2 
						invoked.TransactionNumber				= com.lawson.apps.sharedfinance.base.StringUtils.trimLeadingSpaces(TransactionNumber)
						invoked.TransactionDate					= IssueDate
						invoked.TransactionAmount				= IssuedBankAmount
						if (BankTransactionSign.BankDebit)
							invoked.DebitCreditIndicator		= "D"
						else
							invoked.DebitCreditIndicator		= "C"
						invoked.Description						= Description
						invoked.Comment							= CommentText
						invoked.TransactionDataOne				= TransactionData1
						invoked.TransactionDataTwo				= TransactionData2
						invoked.TransactionDataThree			= TransactionData3
						invoked.TransactionDataFour				= TransactionData4
						if (PrmCashManagementAccount.ReconcileToCashLedger.Secondary)
							invoked.SecondaryReconTransaction	= true
						invoked.CreatedFromBankStatement		= CreatedFromBankStatement
						invoked.CreatedFromBankStatementLine	= CreatedFromBankStatementLine
						if (CreatedFromBankStatementLine entered)
							invoked.LineMatchField				= (BankTransactionCode + TransactionNumber)


		UpdateApprovalLevel is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				ParmEscalate		is Boolean
				ParmReassign		is Boolean
				ParmCurrentActor	is an Actor 
			Action Rules

				LocalActor = ParmCurrentActor
				if (ParmReassign)
					if (ReassignToApprovalLevel entered)
						ApprovalLevel = ReassignToApprovalLevel.ApprovalLevel
						initialize ReassignToApprovalLevel
				else
				if (ParmEscalate)
					include GetNextEscalationApprovalLevel
					ApprovalLevel		= LocalApprovalLevel
					Approver			= LocalApprover
					ApproverTeam		= LocalApproverTeam
				else
					include GetNextApprovalLevel
					ApprovalLevel		= LocalApprovalLevel
					Approver			= LocalApprover
					ApproverTeam		= LocalApproverTeam


		UpdateApprovalFields is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCurrentApprover	is a FinanceResource
				PrmCurrentTeam		is a FinanceTeam
				PrmApprovalLevel	is Numeric 8
			Action Rules
				Approver		= PrmCurrentApprover
				ApproverTeam	= PrmCurrentTeam
				ApprovalLevel	= PrmApprovalLevel

		Approve is an Instance Action
			default label is untranslatable
			restricted
			Entrance Rules
			Action Rules
				if (ApprovalRequestType.StopPayment					
				or  ApprovalRequestType.Void)
					if (SourceCode = "AP"
					and !Type.CashLedgerPayment)
						if (ReconciliationData.ExchangeDate not within APCompanySystemClosingControlRel.ValidEntryDate)
							ReconciliationData.ExchangeDate = APCompanySystemClosingControlRel.ValidEntryDate.Begin
							CommentText += VoidStopPayClosedPeriodUpdateMessage
					else
						if (ReconciliationData.ExchangeDate not within CBCompanySystemClosingControlRel.ValidEntryDate)
							ReconciliationData.ExchangeDate = CBCompanySystemClosingControlRel.ValidEntryDate.Begin
							CommentText += VoidStopPayClosedPeriodUpdateMessage
				if (ApprovalRequestType.Release)
					constraint (IssuedBankAmount = AppliedDistributionBankAmount)
						"CannotApprove;TransactionOutOfBalance"
					invoke PendingApproval.MoveToUnreleased
					invoke Unreleased.Release
				else
					if  (IsCashLedgerPayment
					and  ReissuedCashLedgerPaymentRel.Status.PendingStopPaymentApproval)
						invoke PendingStopPaymentApproval.MoveToUnreleased ReissuedCashLedgerPaymentRel
						invoke Unreleased.ReleaseFromPendingStopPaymentApproval ReissuedCashLedgerPaymentRel
					if (StaleDate entered)
						invoke PendingApproval.MoveToStaleDated
						if (ApprovalRequestType.StopPayment)
							if (CashCode.StopPayBankConfirmRequired)		
								LastMaintenanceDate = current timestamp
								make transition to PendingStopPayConfirmation
							else
								invoke StaleDated.StopPayment
									invoked.PrmReconcileDate = ReconciliationData.ExchangeDate
						else
							invoke StaleDated.Void
								invoked.PrmReconcileDate = ReconciliationData.ExchangeDate
					else
						Status = Status.Open
						if (ApprovalRequestType.StopPayment)
							if (BankStatementReconciliation set exists)
								if (BankStatementReconciliation set.ReconMatchNumber entered)
									invoke UnselectTransaction BankStatementReconciliation set
								invoke Purge BankStatementReconciliation set
							if (CashCode.StopPayBankConfirmRequired)		
								LastMaintenanceDate = current timestamp
								make transition to PendingStopPayConfirmation
							else
								invoke Open.StopPayment
									invoked.PrmReconcileDate = ReconciliationData.ExchangeDate
						else
							if (BankStatementReconciliation set exists)
								if (BankStatementReconciliation set.ReconMatchNumber entered)
									invoke UnselectTransaction BankStatementReconciliation set
								invoke Purge BankStatementReconciliation set
							invoke Open.Void
								invoked.PrmReconcileDate = ReconciliationData.ExchangeDate
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam	
				
		Reject is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if (ApprovalRequestType.Release)
					include RejectBudgetCommitments	
					invoke PendingApproval.MoveToUnreleased
				else
					if  (IsCashLedgerPayment
					and  ReissuedCashLedgerPaymentRel.Status.PendingStopPaymentApproval)
						invoke PendingStopPaymentApproval.RejectPendingStopPayment ReissuedCashLedgerPaymentRel
					if (StaleDate entered)
						ReconciliationData.ExchangeDate = StaleDate
						invoke PendingApproval.MoveToStaleDated
					else
						invoke PendingApproval.ReopenTransaction
				
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam	


		RejectWithReasonCode is an Instance Action
			default label is untranslatable
			restricted
			subject is RejectCashLedgerTransactionApproval
			reason code required
			action comment required

			Action Rules
				if (ApprovalRequestType.Release)
					include RejectBudgetCommitments	
					invoke PendingApproval.MoveToUnreleased
				else
					if  (IsCashLedgerPayment
					and  ReissuedCashLedgerPaymentRel.Status.PendingStopPaymentApproval)
						invoke PendingStopPaymentApproval.RejectPendingStopPayment ReissuedCashLedgerPaymentRel
					if (StaleDate entered)
						ReconciliationData.ExchangeDate = StaleDate
						invoke PendingApproval.MoveToStaleDated
					else
						invoke PendingApproval.ReopenTransaction
				
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam	

			Exit Rules
				invoke Create CashLedgerTransactionReasonCodeUsage
					invoked.CashManagementGroup			= CashManagementGroup
					invoked.BankTransactionCode			= BankTransactionCode
					invoked.CashLedgerSourceRecord		= CashLedgerSourceRecord
					invoked.CashLedgerTransaction		= CashLedgerTransaction
					invoked.ReasonCode					= reason code
					invoked.Description					= reason code.Description
					invoked.Type						= 1 
					invoked.Comment						= action comment	
				
		ManualApprove is an Instance Action
			valid when (Status.PendingApproval)
			confirmation required
				"ThisWillBypassTheProcessFlowApprovalProcess;DoYouWantToContinue?"
			Entrance Rules
			Action Rules
				if (ApprovalRequestType.StopPayment					
				or  ApprovalRequestType.Void)
					if (SourceCode = "AP"
					and !Type.CashLedgerPayment)
						if (ReconciliationData.ExchangeDate not within APCompanySystemClosingControlRel.ValidEntryDate)
							ReconciliationData.ExchangeDate = APCompanySystemClosingControlRel.ValidEntryDate.Begin
							CommentText += VoidStopPayClosedPeriodUpdateMessage
					else
						if (ReconciliationData.ExchangeDate not within CBCompanySystemClosingControlRel.ValidEntryDate)
							ReconciliationData.ExchangeDate = CBCompanySystemClosingControlRel.ValidEntryDate.Begin
							CommentText += VoidStopPayClosedPeriodUpdateMessage
				if (ApprovalRequestType.Release)
					constraint (IssuedBankAmount = AppliedDistributionBankAmount)
						"CannotApprove;TransactionOutOfBalance"
					invoke PendingApproval.MoveToUnreleased
					invoke Unreleased.Release
				else
					if  (IsCashLedgerPayment
					and  ReissuedCashLedgerPaymentRel.Status.PendingStopPaymentApproval)
						invoke PendingStopPaymentApproval.MoveToUnreleased ReissuedCashLedgerPaymentRel
						invoke Unreleased.ReleaseFromPendingStopPaymentApproval ReissuedCashLedgerPaymentRel
					if (StaleDate entered)
						invoke PendingApproval.MoveToStaleDated
						if (ApprovalRequestType.StopPayment)
							if (CashCode.StopPayBankConfirmRequired)		
								LastMaintenanceDate = current timestamp
								make transition to PendingStopPayConfirmation
							else
								invoke StaleDated.StopPayment
									invoked.PrmReconcileDate = ReconciliationData.ExchangeDate
						else
							invoke StaleDated.Void
								invoked.PrmReconcileDate = ReconciliationData.ExchangeDate
					else
						Status = Status.Open 	
						if (ApprovalRequestType.StopPayment)
							if (BankStatementReconciliation set exists)
								if (BankStatementReconciliation set.ReconMatchNumber entered)
									invoke UnselectTransaction BankStatementReconciliation set
								invoke Purge BankStatementReconciliation set
							if (CashCode.StopPayBankConfirmRequired)		
								LastMaintenanceDate = current timestamp
								make transition to PendingStopPayConfirmation
							else
								invoke Open.StopPayment
									invoked.PrmReconcileDate = ReconciliationData.ExchangeDate
						else
							if (BankStatementReconciliation set exists)
								if (BankStatementReconciliation set.ReconMatchNumber entered)
									invoke UnselectTransaction BankStatementReconciliation set
								invoke Purge BankStatementReconciliation set
							invoke Open.Void
								invoked.PrmReconcileDate = ReconciliationData.ExchangeDate
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam	

				cancel CashLedgerTransactionApproval process

						
		ManualReject is an Instance Action
			valid when (Status.PendingApproval)
			subject is RejectCashLedgerTransactionApproval
			Parameters
				PrmComment		is Alpha size up to 500
			Action Rules
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam	
				
				if (ApprovalRequestType.Release)
					if (CashManagementGroup.RejectLedgerTransactionReasonCodeRequired)
						constraint (reason code entered)
							"ReasonCodeIsRequiredForRejectingTransactionApproval"
					include RejectBudgetCommitments	
					invoke PendingApproval.MoveToUnreleased
				else
					if (CashManagementGroup.RejectVoidStopPaymentReasonCodeRequired)
						constraint (reason code entered)
							"ReasonCodeIsRequiredForRejectingVoidOrStopPaymentRequests"
					if  (IsCashLedgerPayment
					and  ReissuedCashLedgerPaymentRel.Status.PendingStopPaymentApproval)
						invoke PendingStopPaymentApproval.RejectPendingStopPayment ReissuedCashLedgerPaymentRel
					if (StaleDate entered)
						ReconciliationData.ExchangeDate = StaleDate
						invoke PendingApproval.MoveToStaleDated
					else
						invoke PendingApproval.ReopenTransaction
				
				cancel CashLedgerTransactionApproval process

			Exit Rules
				invoke Create CashLedgerTransactionReasonCodeUsage
					invoked.CashManagementGroup			= CashManagementGroup
					invoked.BankTransactionCode			= BankTransactionCode
					invoked.CashLedgerSourceRecord		= CashLedgerSourceRecord
					invoked.CashLedgerTransaction		= CashLedgerTransaction
					invoked.ReasonCode					= reason code
					invoked.Description					= reason code.Description
					invoked.Type						= 1 
					invoked.Comment						= PrmComment	


		MassUpdate is a Set Action  //CB185, Run Option "M" (mass)
			completion message is "<CompletionMessage>"
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCashCode					is a CashCode
					default label is "CashCode"
				PrmCashCodeGroup			is a CashCodeGroup
					default label is "CashCodeGroup"
				PrmBankTransactionCode		is a BankTransactionCode
					default label is "BankTransactionCode"
				TransNbrRangeUsingLike		
				PrmAction					is AlphaUpper 1
					States
						Reconcile			value is "R"
						Void				value is "V"
						StopPayment			value is "S"
					default label is "Action"
				PrmActionDate				is Date
					default label is "ActionDate"
										
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					if (PrmCashCode entered)
						constraint (PrmCashCodeGroup not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"
					else
					if (PrmCashCodeGroup not entered)
						required
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"		
					LocalCashCodeGroup	= PrmCashCodeGroup
				PrmBankTransactionCode
					required
				TransNbrRangeUsingLike
					required
				PrmAction
					required
				PrmActionDate
					required
					if (PrmAction.Reconcile)
						constraint (PrmActionDate <= current corporate date)
							"ActionDateForReconcileCannotBeGreaterThanCurrentDate"
					LocalActionDate = PrmActionDate
											
			Local Fields
				CompletionMessage			is Alpha 150
				RecordCount					is Numeric 10
				BypassUpdate				is Boolean
				
			Instance Selection
				where (CashManagementGroup							= PrmCashManagementGroup
				and  ((PrmCashCode				entered	
				and    CashCode					= PrmCashCode)
				or     PrmCashCode				not entered)
				and  ((PrmCashCodeGroup			entered	
				and    CashCodeGroupDetailRel exists)
				or     PrmCashCodeGroup			not entered)
				and    CashLedgerTransaction.BankTransactionCode	= PrmBankTransactionCode
				and    Status 										= 1
				and    TransactionNumber 							within TransNbrRangeUsingLike
				and    !IsCashLedgerReconciliationAdjustmentExist
				and    !IsClosedBankPeriod
				and    !ImportInProcess
				and    !TransactionMatchedToBankStatement
				and    !SummarizedTransactionWithRejectedPayments
				and    !EFTWithRejectedPayments)
						
			Sort Order
				CashManagementGroup
				CashCode
                BankTransactionCode
                CashLedgerTransaction

				
			Action Rules
				Empty Set Rules
					CompletionMessage = "MassUpdateComplete...:NoRecordsFoundToProcess"

				Set Rules
					Entrance Rules
						initialize RecordCount
					
					Exit Rules
						CompletionMessage = "MassUpdateComplete...:;<RecordCount>...RecordsProcessed"	
				
				Instance Rules
					BypassUpdate = false
					if (PrmAction.Void
					or  PrmAction.StopPayment)
						if (PrmActionDate < IssueDate) 
							BypassUpdate = true
						if (CBCompanySystemClosingControlRel.Control
						and !PrmActionDate within CBCompanySystemClosingControlRel.ValidEntryDate)
							BypassUpdate = true
						if (SourceCode = "AP"
						and !Type.CashLedgerPayment
						and APCompanySystemClosingControlRel.Control
						and !PrmActionDate within APCompanySystemClosingControlRel.ValidEntryDate)
							BypassUpdate = true
					if (!BypassUpdate)
						increment RecordCount
						if (PrmAction.Reconcile)
							ReconciliationData.ExchangeDate     = PrmActionDate				
							invoke Open.ReconcileUpdate	in background						

						if (PrmAction.Void)
							ReconciliationData.ExchangeDate     = PrmActionDate				
							invoke Open.VoidUpdate	in background	

						if (PrmAction.StopPayment)
							ReconciliationData.ExchangeDate     = PrmActionDate				
							invoke Open.StopPaymentUpdate	in background		

						if (BankStatementReconciliation set exists)
							invoke Purge BankStatementReconciliation set



		MassRelease is a Set Action	
			completion message is "<MassReleaseCompleteMessage>"
			run in background		
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCashCode					is a CashCode
					default label is "CashCode"	
				PrmCashCodeGroup			is a CashCodeGroup
					default label is "CashCodeGroup"
				PrmUseSystemDate			is Boolean
					default label is "UseSystemDate"
				PrmEnterDate				is Date
					default label is "EnterDate"
				PrmDays						is Numeric 3
					default label is "Days"
				PrmBankTransactionCode		is a BankTransactionCode
					default label is "BankTransactionCode"
				TransNbrRangeUsingLike		
				PrmGeneralLedgerEvent		is a GeneralLedgerEvent		
					default label is "GlobalLedgerEvent"
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					if (PrmCashCode entered)
						constraint (PrmCashCodeGroup not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"	
					LocalCashCodeGroup	= PrmCashCodeGroup
				PrmUseSystemDate
					if (PrmUseSystemDate)
						constraint (PrmEnterDate not entered)
							"EnterDateMustBeBlankWhenSystemDateIsSelected"
						LocalDateRange.Begin = current corporate date	
				PrmEnterDate
					if (PrmEnterDate not entered)
						constraint (PrmUseSystemDate)
							"EnterDateRequiredWhenSystemDateIsNotSelected"
						LocalDateRange.Begin = current corporate date
					else
						LocalDateRange.Begin = PrmEnterDate
				PrmDays
					LocalDateRange.End = LocalDateRange.Begin + PrmDays as days
				TransNbrRangeUsingLike
					if (TransNbrRangeUsingLike.FromTransNbr entered)
						constraint (TransNbrRangeUsingLike.ToTransNbr entered)
							"MustDefineBothTransactionNumbersInRange"
					if (TransNbrRangeUsingLike.ToTransNbr entered)
						constraint (TransNbrRangeUsingLike.FromTransNbr entered)
							"MustDefineBothTransactionNumbersInRange"		

			Local Fields
				RecordCount						is Numeric 10
				LocalDateRange					is a DateRange
				MassReleaseError				is Boolean
				MassReleaseErrorMessage			is Alpha 150
				CashLedgerMassReleaseResultView	is a CashLedgerMassReleaseResult view
				
			Instance Selection
				where (CashManagementGroup	 	= PrmCashManagementGroup
				and	   GeneralLedgerPostDate	within LocalDateRange
				and    TransactionNumber 		within TransNbrRangeUsingLike
				and    Status.Unreleased
				and    CanRelease	
				and    !CashLedgerMassReleaseResult entered	

				and  ((PrmCashCode				entered	
				and    CashCode					= PrmCashCode)
				or     PrmCashCode				not entered)

				and  ((PrmCashCodeGroup			entered	
				and    CashCodeGroupDetailRel exists)
				or     PrmCashCodeGroup			not entered)

				and  ((PrmBankTransactionCode	entered	
				and    BankTransactionCode		= PrmBankTransactionCode)
				or     PrmBankTransactionCode	not entered)

				and  ((PrmGeneralLedgerEvent	entered		
				and    GeneralLedgerEvent		= PrmGeneralLedgerEvent)
				or     PrmGeneralLedgerEvent	not entered))

			Sort Order  
				CashManagementGroup
			    CashCode
			    BankTransactionCode
			    TransactionNumber
			    TransactionNumberSuffix
			    CashLedgerTransaction
			    
				
			Action Rules
				Empty Set Rules
					invoke Create CashLedgerMassReleaseResult	
						invoked.CashManagementGroup		= PrmCashManagementGroup
						invoked.CashCode				= PrmCashCode
						invoked.CashCodeGroup			= PrmCashCodeGroup
				    	invoked.BankTransactionCode		= PrmBankTransactionCode
						invoked.GeneralLedgerSourceCode	= PrmGeneralLedgerEvent		
				    	invoked.UseSystemDate			= PrmUseSystemDate
				    	invoked.EnterDate				= PrmEnterDate
				    	invoked.Days					= PrmDays
				    	invoked.ReleaseDateRange		= LocalDateRange
				    	invoked.TransNbrRangeUsingLike	= TransNbrRangeUsingLike
						invoked.Status					= 2 
						invoked.ReleaseType				= 1 
					
				Set Rules
					Entrance Rules
						initialize RecordCount
						
						invoke Create CashLedgerMassReleaseResult	
							assign result to CashLedgerMassReleaseResultView
							invoked.CashManagementGroup		= PrmCashManagementGroup
							invoked.CashCode				= PrmCashCode
							invoked.CashCodeGroup			= PrmCashCodeGroup
					    	invoked.BankTransactionCode		= PrmBankTransactionCode
							invoked.GeneralLedgerSourceCode	= PrmGeneralLedgerEvent		
					    	invoked.UseSystemDate			= PrmUseSystemDate
					    	invoked.EnterDate				= PrmEnterDate
					    	invoked.Days					= PrmDays
					    	invoked.ReleaseDateRange		= LocalDateRange
					    	invoked.TransNbrRangeUsingLike	= TransNbrRangeUsingLike
							invoked.Status					= 1 
							invoked.ReleaseType				= 1 
					Exit Rules
						invoke StatusUpdate CashLedgerMassReleaseResultView.CashLedgerMassReleaseResult	
				
				Instance Rules
					increment RecordCount
					initialize MassReleaseErrorMessage
					MassReleaseError					 = false
					invoke Unreleased.ReleaseFromMassRelease	
						resume on error
							MassReleaseError		= true
							MassReleaseErrorMessage	= error message
					if (MassReleaseError)	
						invoke Create CashLedgerTransactionError 
							fill in fields from this instance
							invoked.CashLedgerMassReleaseResult	= CashLedgerMassReleaseResultView.CashLedgerMassReleaseResult
							invoked.ErrorLevel					= 1		
							invoked.ErrorClass					= 3		
							invoked.ErrorType					= 9		
							invoked.ErrorSource					= 4		
							invoked.ErrorDescription			= MassReleaseErrorMessage
					CashLedgerMassReleaseResult	= CashLedgerMassReleaseResultView.CashLedgerMassReleaseResult
				
		RemoveCashLedgerMassReleaseResult is an Instance Action	
			default label is untranslatable
			restricted
			Entrance Rules					
			Action Rules
				initialize CashLedgerMassReleaseResult 

		RerunMassReleaseForErrors is a Set Action	
			default label is untranslatable
			restricted
			completion message is "<MassReleaseCompleteMessage>"
			run in background		
			Parameters
				PrmCashManagementGroup			is a CashManagementGroup
				PrmCashLedgerMassReleaseResult 	is a CashLedgerMassReleaseResult
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashLedgerMassReleaseResult
					required
			Local Fields
				RecordCount						is Numeric 10
				MassReleaseError				is Boolean
				MassReleaseErrorMessage			is Alpha 150
				
			Instance Selection
				where (CashManagementGroup	 		= PrmCashManagementGroup
				and    Status.Unreleased
				and    CanRelease
				and    CashLedgerMassReleaseResult 	= PrmCashLedgerMassReleaseResult)
	
			Sort Order  
			    CashManagementGroup
				CashLedgerMassReleaseResult
				
				
			Action Rules
				Empty Set Rules
					invoke Update PrmCashLedgerMassReleaseResult.CashLedgerMassReleaseResult
						invoked.Status	= 2 
						
				Set Rules
					Entrance Rules
						initialize RecordCount
						invoke Update PrmCashLedgerMassReleaseResult.CashLedgerMassReleaseResult
							invoked.Status	= 1 
						
					Exit Rules
						invoke StatusUpdate PrmCashLedgerMassReleaseResult.CashLedgerMassReleaseResult
				
				Instance Rules
					increment RecordCount
					initialize MassReleaseErrorMessage
					MassReleaseError					 = false
					invoke Unreleased.ReleaseFromMassRelease
						resume on error
							MassReleaseError		= true
							MassReleaseErrorMessage	= error message
					if (MassReleaseError)	
						invoke Update CashLedgerTransactionError set
							fill in fields from this instance
							invoked.ErrorDescription	= MassReleaseErrorMessage
				

		CreateGainLossFromBatch is an Instance Action  
			default label is untranslatable
			restricted
			Parameters
				PrmDescription				is a  Description
				PrmReference				is a  Reference
				PrmAccountingEntity			is like ToAccountingEntity
				PrmJournalizeGroup       	is like JournalizeGroup
				PrmCreateFromBatchType		is Numeric 2
				PrmDefaultSystemAccount		is Numeric 1  
					States
						None				value is 0
						UnrealizedGainLoss	value is 1
						RealizedGainLoss	value is 2
				PrmAmountType				is AlphaUpper size 1
					States
						Positive			value is "P"
						Negative			value is "N"
			Local Fields
				GainLossCurrency 			is a FromCurrency
				GainLossDate				is an ExchangeDate
				GainLossAmount				is a CurrencyAmount
				LocalBoolean				is Boolean
			Action Rules
				include CheckForEFTGainLoss
				
		ReinstateRejectedEftCashLedgerTransaction is a Create Action 
			default label is untranslatable
			restricted
			Action Rules

				LocalRejectedEFT	= true
			Exit Rules
				if (!CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
					include SetAppliedDistributionAmounts

			        LocalIssuedBankAmount										= IssuedBankAmount * -1
					LocalFinanceCurrencyAmount									= IssuedBaseAmount
				    include ReverseBaseDistributionAmounts 				
					invoke ReinstateRejectedCltDistributions CashLedgerGLDistribution
		    			fill in fields from CashLedgerTransaction
		    			invoked.CashManagementGroup								= CashManagementGroup
		    			invoked.CashCode										= CashCode
						invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
		    			invoked.TransactionNumberSuffix						 	= 0
		    			invoked.GeneralLedgerSourceCode                         = "CL"
						invoked.CashLedgerGLDistribution.DistributionType	 	= "E"
		    			invoked.RecordType									 	= "C"
						invoked.Status 										 	= 1
						invoked.PostDate									 	= GeneralLedgerPostDate
						invoked.GLFinanceCodeBlock				            	= CompanyCashCode.CashAccount
						invoked.BaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
				        invoked.ToBaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
				        invoked.ToTransactionCurrencyNumberOfDecimals		 	= TransactionCurrencyNumberOfDecimals
				        invoked.TransactionCurrencyNumberOfDecimals			 	= TransactionCurrencyNumberOfDecimals
						invoked.GLTransactionAmount								= LocalIssuedBankAmount
				        invoked.DistributionToBankAmount 						= LocalIssuedBankAmount
						invoked.GLBaseAmount									= LocalFinanceCurrencyAmount

			        LocalIssuedBankAmount										= IssuedBankAmount
					LocalFinanceCurrencyAmount									= IssuedBaseAmount
					invoke ReinstateRejectedCltDistributions CashLedgerGLDistribution
		    			fill in fields from CashLedgerTransaction
		    			invoked.CashManagementGroup								= CashManagementGroup
		    			invoked.CashCode										= CashCode
						invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
		    			invoked.TransactionNumberSuffix						 	= 0
		    			invoked.GeneralLedgerSourceCode                         = "CL"
						invoked.CashLedgerGLDistribution.DistributionType	 	= "E"
		    			invoked.RecordType									 	= "C"
						invoked.Status 										 	= 1
						invoked.PostDate									 	= GeneralLedgerPostDate
						invoked.GLFinanceCodeBlock								= CompanyCashCode.ElectronicPaymentAccount
						invoked.BaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
				        invoked.ToBaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
				        invoked.ToTransactionCurrencyNumberOfDecimals		 	= TransactionCurrencyNumberOfDecimals
				        invoked.TransactionCurrencyNumberOfDecimals			 	= TransactionCurrencyNumberOfDecimals
						invoked.GLTransactionAmount								= LocalIssuedBankAmount
				        invoked.DistributionToBankAmount 						= LocalIssuedBankAmount
						invoked.GLBaseAmount									= LocalFinanceCurrencyAmount
					
		VoidStopPayUpdate is a Set Action	
			completion message is "<CompletionMessage>"	
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCompany					is a GeneralLedgerCompany

					default label is "Company"
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
					default label is "CompanyGroup"	
				PrmCashCode					is a CashCode
					default label is "CashCode"	
					context of PrmCashManagementGroup	
				PrmCashCodeGroup			is a CashCodeGroup
					default label is "CashCodeGroup"
					context of PrmCashManagementGroup	
						
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCompany
					if (PrmCompany entered)
						constraint (PrmCompanyGroup not entered)
							"CannotEnterBothCompanyAndCompanyGroup"
				PrmCompanyGroup
					if (PrmCompanyGroup entered)
						constraint (PrmCompany not entered)
							"CannotEnterBothCompanyAndCompanyGroup"
					LocalCompanyGroup	= PrmCompanyGroup
				PrmCashCode
					if (PrmCashCode entered)
						constraint (PrmCashCodeGroup not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"
					LocalCashCodeGroup	= PrmCashCodeGroup

			Local Fields
				RecordCount						is Numeric 10
				OriginalEftTransactionIDNumber	is a TransactionIDNumber
				
			Instance Selection
				where (CashManagementGroup		 		= PrmCashManagementGroup
				and	   NotAPAndAR
				and   (Status.Voided
				or     Status.StopPayment)
				and   (!ReinstateStatus)
				and   (!ImportInProcess)

				and  ((PrmCompany						entered	
				and    Company.OrigCompany				= PrmCompany)
				or     PrmCompany						not entered)

				and  ((PrmCompanyGroup					entered	
				and    CompanyGroupMemberRel exists)
				or     PrmCompanyGroup					not entered)

				and  ((PrmCashCode						entered	
				and    CashCode							= PrmCashCode)
				or     PrmCashCode						not entered)

				and  ((PrmCashCodeGroup					entered	
				and    CashCodeGroupDetailRel exists)
				or     PrmCashCodeGroup					not entered))
			
			Sort Order  
				CashManagementGroup
			    Status
			    Company.OrigCompany
			    CashCode
			    BankTransactionCode
			    TransactionNumber
			    TransactionNumberSuffix
			    CashLedgerTransaction
			    
				
			Action Rules
				Empty Set Rules
					CompletionMessage = "VoidStopPayUpdateCompleted...:<RecordCount>...RecordsProcessed"
					
				Set Rules
					Entrance Rules
						initialize RecordCount
					Exit Rules
						CompletionMessage = "VoidStopPayUpdateCompleted...:<RecordCount>...RecordsProcessed"
			
			
				Instance Rules
					increment RecordCount
					if (first GLEntryDistributionsRel exists)
						if (first GLEntryDistributionsRel.Status.Released)
							invoke VoidReleasedDistributions GLEntryDistributionsReleasedRel	
								invoked.PrmActionType	= 2	
						else
						if (first GLEntryDistributionsRel.Status.Posted)
							invoke VoidPostedDistributions GLEntryDistributionsPostedRel	
								invoked.PrmActionType	= 2	
							 	invoked.PrmVoidDate		= ReconciliationData.ExchangeDate
					if (first GLStaleDateDistributionsRel exists)	
						if (first GLStaleDateDistributionsRel.Status.Released)
							invoke VoidReleasedDistributions GLStaleDateDistributionsReleasedRel	
								invoked.PrmActionType	= 2	
								invoked.PrmProcessingStaleDateDistribs = true		
						else
						if (first GLStaleDateDistributionsRel.Status.Posted)
							invoke VoidPostedDistributions GLStaleDateDistributionsPostedRel	
								invoked.PrmActionType	= 2	
							 	invoked.PrmVoidDate		= ReconciliationData.ExchangeDate
							 	invoked.PrmProcessingStaleDateDistribs = true		
							 			 	
					if (Type.ElectronicFundsExtract)
						if (first CashLedgerElectronicFundsTransferTransactionRel exists)
							for each CashLedgerElectronicFundsTransferTransactionRel
								if (CashCode.NewEFTTransactionForVoid)	
									invoke ReinstateEft CashLedgerElectronicFundsTransferTransaction
										fill in fields from each
		                				initialize invoked.CashLedgerTransactionIdentifier
		                				initialize invoked.LastDistributionSequence
		                				initialize invoked.TransactionNumber
										initialize invoked.CashLedgerElectronicFundsTransferTransaction.TransactionIDNumber
										invoked.OriginalEftTransactionIDNumber				= each.CashLedgerElectronicFundsTransferTransaction.TransactionIDNumber
										invoked.OriginalLastDistributionSequence			= each.CashLedgerElectronicFundsTransferTransaction.LastDistributionSequence 
										invoked.Status 	 				 					= Status.Unreleased




										
								invoke BackoutOriginalEFTDistributions each	
									invoked.PrmOriginalEftTransactionIDNumber		= each.CashLedgerElectronicFundsTransferTransaction.TransactionIDNumber
									invoked.PrmOriginalLastDistributionSequence		= each.CashLedgerElectronicFundsTransferTransaction.LastDistributionSequence 
									invoked.PrmVoidDate								= ReconciliationData.ExchangeDate
									invoked.PrmActionType							= 1 
									invoked.PrmStaleDate							= StaleDate
									invoked.PrmStaleDateAccount						= StaleDateAccount
								
								if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
								or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
									invoke BudgetUpdates each 

					if (Type.WireTransfer)	
						if (first WireTransferBatchDetailRel exists)
							for each WireTransferBatchDetailRel
								if (GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit
								or  GeneralLedgerSystemCodeRel.EncumbranceOption.Track)
									invoke BudgetUpdates each 

					ReinstateStatus = true
					
					if (CreatedFromBankStatementLineDetail entered)
						invoke Update CreatedFromBankStatementLineDetail
							initialize invoked.CreatedCashLedgerTransaction
						initialize CreatedFromBankStatementLineDetail
						initialize CreatedFromBankStatementLine
						initialize CreatedFromBankStatement
					else
					if (CreatedFromBankStatementLine entered)
						invoke Update CreatedFromBankStatementLine
							initialize invoked.CreatedCashLedgerTransaction
						initialize CreatedFromBankStatementLine
						initialize CreatedFromBankStatement
			
					if (!Type.ElectronicFundsExtract	
					and !Type.WireTransfer)				
						include PerformBudgetEditsForVoids	
						

			
		UpdateBudgetResults is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				ParmSuccess    	is Boolean
				ParmActionCode	is an ActionCode
			Action Rules
				if (ParmSuccess)
					BudgetEditProcessing = BudgetEditProcessing.Success
					if (ParmActionCode.Release)
						include ResetLocalFieldsForRelease	
						invoke FinalRelease
					else
					if (ParmActionCode.Approve)
						include ResetLocalFieldsForApproval	
						invoke FinalApproval
					else	
					if (ParmActionCode.Void) 
						BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
				else
					BudgetEditProcessing = BudgetEditProcessing.Failure

		RebuildCommitmentTotals is an Instance Action		
			default label is untranslatable
			restricted
			Parameters
				IsBatch        is Boolean
				BudgetEditMode
				BudgetEditTotalsProcessing
				ActionCode

			Action Rules
				invoke Delete HeaderBudgetEditErrorRel
				invoke Delete DistributionBudgetEditErrorRel
				invoke Delete BudgetTemplateGroupTotalRel
				for each CashLedgerGLDistributionsRel
					invoke RecalculateCommitmentAmounts each
					increment LocalTransactionCount
					if (LocalTransactionCount > 50)
						commit transaction
						initialize LocalTransactionCount
				invoke EditTotalsRoute BudgetTemplateGroupTotal 	
					invoked.PrmFinanceEnterpriseGroup    								= CashManagementGroup
					invoked.PrmBudgetEditGroup           								= UniqueID
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBTran.BankTransactionCode 		= BankTransactionCode
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBTran.CashLedgerSourceRecord 	= CashLedgerSourceRecord
					invoked.PrmBudgetEditCallBack.BudgetEditCallBackCBTran.CashLedgerTransaction	= CashLedgerTransaction
					invoked.PrmBusinessClassName  					              					= "CashLedgerTransaction"
					if (ActionCode.Release)
						invoked.PrmActionCode					= "R"  
						invoked.PrmEditContext                  = "Release"	
						invoked.PrmMode							= BudgetEditMode.Hard
					else
					if (ActionCode.Approve)
						invoked.PrmActionCode					= "A" 	
						invoked.PrmEditContext                  = "SubmitForApproval"
						invoked.PrmMode							= BudgetEditMode.Hard
					if (initiating action	= "CashLedgerTransactionImport.InterfaceCashLedgerTransactions")
						invoked.PrmIsBatch	= true

		Escheat is an Instance Action  
			default label is untranslatable
			restricted
			Action Rules
				LocalActionStaleDatedToEscheat = true
				if (CashCode.SummarizeLedgerBalances)
					include ProcessCashLedgerConsolidation
				LastMaintenanceDate = current timestamp
				if (Status.StaleDated)		
					make transition to Escheated

		UpdateBODIdFields is an Instance Action		
			default label is untranslatable
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location" 
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"	
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord
				

		ApplyComments is an Instance Action
			valid when (CanUpdateComments)
			Parameters
				PrmCommentText		is a CommentText
					default label is "Comment"
			Action Rules
				CommentText			+= PrmCommentText

		UpdateJournalizeGroup is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmJournalizeGroup		is like JournalizeGroup
			Action Rules 
				invoke UpdateJournalizeGroup CashLedgerGLDistributionsRel
					invoked.PrmJournalizeGroup		= PrmJournalizeGroup
				

		UpdateTextSearchIndexes is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				build text search field DistribUserFieldsSearch
   					Fields
   						CashLedgerGLDistributionsRel.DistribUserFields

		UpdateCashCodeCashPosition is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashCode					is like CashCode
				PrmCashPositionDate			is Date
				PrmPostingPeriodDate		is Date
				
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					required
				PrmCashPositionDate
					required
				PrmPostingPeriodDate
					required
					
			Instance Selection
				where (CashManagementGroup				= PrmCashManagementGroup
				and    CashCode							= PrmCashCode
				and   (PeriodDate						!entered
				or     PeriodDate						>= PrmCashPositionDate)
				and  ((Status.Open
				and    GeneralLedgerPostDate			<= PrmPostingPeriodDate)
				or    (Status.Reconciled
				and   (ReconciliationData.ExchangeDate	<= PrmCashPositionDate
				or     GeneralLedgerPostDate			<= PrmPostingPeriodDate))


				or   ((Status.Voided
				or     Status.StopPayment
				or     Status.StaleDated
				or     Status.Escheated
				or     Status.WriteOff)
				and    ReconciliationData.ExchangeDate	> PrmPostingPeriodDate
				and    GeneralLedgerPostDate			<= PrmPostingPeriodDate)))

			Local Fields
  				LocalPreviousBankAccountBalance		is a FinanceAmountOnlyGroup
 				LocalNetTransactionBalance			is a FinanceAmountOnlyGroup
				LocalNetDebitTransactionBalance		is a FinanceAmountOnlyGroup
				LocalNetCreditTransactionBalance	is a FinanceAmountOnlyGroup

  				
			Sort Order
				CashManagementGroup
				CashCode
				Company.OrigCompany
				PeriodDate
				Status
				ReconciliationData.ExchangeDate
				GeneralLedgerPostDate

			Accumulators
				NetTransactionAmount
		        NetFunctionalAmount
		        NetAlternateAmount
		        NetAlternateAmount2
		        NetAlternateAmount3
				NetProjectAmount
				NetReportAmount1
				NetReportAmount2
				NetReportAmount3
				NetReportAmount4
				NetReportAmount5
				NetDebitTransactionAmount
		        NetDebitFunctionalAmount
		        NetDebitAlternateAmount
		        NetDebitAlternateAmount2
		      	NetDebitAlternateAmount3
				NetDebitProjectAmount
				NetDebitReportAmount1
				NetDebitReportAmount2
				NetDebitReportAmount3
				NetDebitReportAmount4
				NetDebitReportAmount5
				NetCreditTransactionAmount
		        NetCreditFunctionalAmount
		        NetCreditAlternateAmount
		        NetCreditAlternateAmount2
		      	NetCreditAlternateAmount3
				NetCreditProjectAmount
				NetCreditReportAmount1
				NetCreditReportAmount2
				NetCreditReportAmount3
				NetCreditReportAmount4
				NetCreditReportAmount5
				PostedTransactionAmount
		        PostedFunctionalAmount
		        PostedAlternateAmount
		        PostedAlternateAmount2
		        PostedAlternateAmount3
				PostedProjectAmount
				PostedReportAmount1
				PostedReportAmount2
				PostedReportAmount3
				PostedReportAmount4
				PostedReportAmount5
				OpenTransactionAmount
		        OpenFunctionalAmount
		        OpenAlternateAmount
		        OpenAlternateAmount2
		        OpenAlternateAmount3
				OpenProjectAmount
				OpenReportAmount1
				OpenReportAmount2
				OpenReportAmount3
				OpenReportAmount4
				OpenReportAmount5
				OpenRecordCount					

			Action Rules
				Empty Set Rules
					LocalCashManagementGroup	= PrmCashManagementGroup
					LocalCashCode				= PrmCashCode
					LocalCashPositionDate		= PrmCashPositionDate
					if (CashCodeCashPositionByCashCodeRel	exists)
						invoke Delete CashCodeCashPositionByCashCodeRel
					if (PreviousCashPositionBalanceByCashCodeRel exists)
						for each PreviousCashPositionBalanceByCashCodeRel
	 						invoke Create CashCodeCashPosition
								invoked.CashManagementGroup				= PrmCashManagementGroup
								invoked.CashCode						= PrmCashCode
								invoked.Company							= each.Company
								invoked.CashCodeCashPosition			= PrmCashPositionDate
								if (CashPositionBankAccountBalanceRel exists)
									invoked.ClosedPeriodBalance			= true
								invoked.LastPeriodDate					= each.CashCodeCashPosition
								invoked.LastPeriodBalance				= each.EndingBalance
								invoked.EndingBalance					= each.EndingBalance
 								invoked.PeriodPostedBalance				= each.PeriodPostedBalance
 								
				Set Rules
					Entrance Rules
						LocalCashManagementGroup	= PrmCashManagementGroup
						LocalCashCode				= PrmCashCode
						LocalCashPositionDate		= PrmCashPositionDate
						if (CashCodeCashPositionByCashCodeRel	exists)
							invoke Delete CashCodeCashPositionByCashCodeRel
						if (PreviousCashPositionBalanceByCashCodeRel exists)
							for each PreviousCashPositionBalanceByCashCodeRel
		 						invoke Create CashCodeCashPosition
									invoked.CashManagementGroup				= PrmCashManagementGroup
									invoked.CashCode						= PrmCashCode
									invoked.Company							= each.Company
									invoked.CashCodeCashPosition			= PrmCashPositionDate
									if (CashPositionBankAccountBalanceRel exists)
										invoked.ClosedPeriodBalance			= true
									invoked.LastPeriodDate					= each.CashCodeCashPosition
									invoked.LastPeriodBalance				= each.EndingBalance
									invoked.EndingBalance					= each.EndingBalance
	 								invoked.PeriodPostedBalance				= each.PeriodPostedBalance


				Company.OrigCompany Set Rules
					Entrance Rules
						LocalCashManagementGroup		= PrmCashManagementGroup
						LocalCashCode					= PrmCashCode
						LocalCashPositionDate			= PrmCashPositionDate
						LocalCompany					= Company.OrigCompany
						if (CashCodeCashPositionRel	exists)
							invoke Delete CashCodeCashPositionRel
						LocalPreviousBankAccountBalance	= PreviousCashPositionBalanceByCompanyRel.EndingBalance

 						initialize LocalNetTransactionBalance
						initialize LocalNetDebitTransactionBalance
						initialize LocalNetCreditTransactionBalance
					Exit Rules
						LocalCashManagementGroup	= PrmCashManagementGroup
						LocalCashCode				= PrmCashCode
						LocalCashPositionDate		= PrmCashPositionDate
 						invoke Create CashCodeCashPosition
							invoked.CashManagementGroup						= PrmCashManagementGroup
							invoked.CashCode								= PrmCashCode
							invoked.Company									= Company.OrigCompany
							invoked.CashCodeCashPosition					= PrmCashPositionDate
							if (CashPositionBankAccountBalanceRel exists)
								invoked.ClosedPeriodBalance					= true
							invoked.LastPeriodDate							= first PreviousCashPositionBalanceRel.CashCodeCashPosition
							invoked.LastPeriodBalance						= LocalPreviousBankAccountBalance




							invoked.NetPeriodAmount.TransactionAmount		= NetTransactionAmount
					        invoked.NetPeriodAmount.FunctionalAmount		= NetFunctionalAmount
					        invoked.NetPeriodAmount.AlternateAmount			= NetAlternateAmount
					        invoked.NetPeriodAmount.AlternateAmount2		= NetAlternateAmount2
					        invoked.NetPeriodAmount.AlternateAmount3		= NetAlternateAmount3
							invoked.NetPeriodAmount.ProjectAmount			= NetProjectAmount
							invoked.NetPeriodAmount.ReportAmount1			= NetReportAmount1
							invoked.NetPeriodAmount.ReportAmount2			= NetReportAmount2
							invoked.NetPeriodAmount.ReportAmount3			= NetReportAmount3
							invoked.NetPeriodAmount.ReportAmount4			= NetReportAmount4
							invoked.NetPeriodAmount.ReportAmount5			= NetReportAmount5
							invoked.DebitPeriodAmount.TransactionAmount		= NetDebitTransactionAmount
					        invoked.DebitPeriodAmount.FunctionalAmount		= NetDebitFunctionalAmount
					        invoked.DebitPeriodAmount.AlternateAmount		= NetDebitAlternateAmount
					        invoked.DebitPeriodAmount.AlternateAmount2		= NetDebitAlternateAmount2
					      	invoked.DebitPeriodAmount.AlternateAmount3		= NetDebitAlternateAmount3
							invoked.DebitPeriodAmount.ProjectAmount			= NetDebitProjectAmount
							invoked.DebitPeriodAmount.ReportAmount1			= NetDebitReportAmount1
							invoked.DebitPeriodAmount.ReportAmount2			= NetDebitReportAmount2
							invoked.DebitPeriodAmount.ReportAmount3			= NetDebitReportAmount3
							invoked.DebitPeriodAmount.ReportAmount4			= NetDebitReportAmount4
							invoked.DebitPeriodAmount.ReportAmount5			= NetDebitReportAmount5
							invoked.CreditPeriodAmount.TransactionAmount	= NetCreditTransactionAmount
					        invoked.CreditPeriodAmount.FunctionalAmount		= NetCreditFunctionalAmount
					        invoked.CreditPeriodAmount.AlternateAmount		= NetCreditAlternateAmount
					        invoked.CreditPeriodAmount.AlternateAmount2		= NetCreditAlternateAmount2
					      	invoked.CreditPeriodAmount.AlternateAmount3		= NetCreditAlternateAmount3
							invoked.CreditPeriodAmount.ProjectAmount		= NetCreditProjectAmount
							invoked.CreditPeriodAmount.ReportAmount1		= NetCreditReportAmount1
							invoked.CreditPeriodAmount.ReportAmount2		= NetCreditReportAmount2
							invoked.CreditPeriodAmount.ReportAmount3		= NetCreditReportAmount3
							invoked.CreditPeriodAmount.ReportAmount4		= NetCreditReportAmount4
							invoked.CreditPeriodAmount.ReportAmount5		= NetCreditReportAmount5
							invoked.OpenBalance.TransactionAmount			= OpenTransactionAmount
					        invoked.OpenBalance.FunctionalAmount			= OpenFunctionalAmount
					        invoked.OpenBalance.AlternateAmount				= OpenAlternateAmount
					        invoked.OpenBalance.AlternateAmount2			= OpenAlternateAmount2
					        invoked.OpenBalance.AlternateAmount3			= OpenAlternateAmount3
							invoked.OpenBalance.ProjectAmount				= OpenProjectAmount
							invoked.OpenBalance.ReportAmount1				= OpenReportAmount1
							invoked.OpenBalance.ReportAmount2				= OpenReportAmount2
							invoked.OpenBalance.ReportAmount3				= OpenReportAmount3
							invoked.OpenBalance.ReportAmount4				= OpenReportAmount4
							invoked.OpenBalance.ReportAmount5				= OpenReportAmount5
							invoked.OpenRecordCount							= OpenRecordCount				
							invoked.EndingBalance.TransactionAmount			= LocalPreviousBankAccountBalance.TransactionAmount	+ NetTransactionAmount
					        invoked.EndingBalance.FunctionalAmount			= LocalPreviousBankAccountBalance.FunctionalAmount	+ NetFunctionalAmount
					        invoked.EndingBalance.AlternateAmount			= LocalPreviousBankAccountBalance.AlternateAmount	+ NetAlternateAmount
					        invoked.EndingBalance.AlternateAmount2			= LocalPreviousBankAccountBalance.AlternateAmount2	+ NetAlternateAmount2
					        invoked.EndingBalance.AlternateAmount3			= LocalPreviousBankAccountBalance.AlternateAmount3	+ NetAlternateAmount3
							invoked.EndingBalance.ProjectAmount				= LocalPreviousBankAccountBalance.ProjectAmount		+ NetProjectAmount
							invoked.EndingBalance.ReportAmount1				= LocalPreviousBankAccountBalance.ReportAmount1		+ NetReportAmount1
							invoked.EndingBalance.ReportAmount2				= LocalPreviousBankAccountBalance.ReportAmount2		+ NetReportAmount2
							invoked.EndingBalance.ReportAmount3				= LocalPreviousBankAccountBalance.ReportAmount3		+ NetReportAmount3
							invoked.EndingBalance.ReportAmount4				= LocalPreviousBankAccountBalance.ReportAmount4 	+ NetReportAmount4
							invoked.EndingBalance.ReportAmount5				= LocalPreviousBankAccountBalance.ReportAmount5 	+ NetReportAmount5
							invoked.PeriodPostedBalance.TransactionAmount	= LocalPreviousBankAccountBalance.TransactionAmount	+ PostedTransactionAmount
					        invoked.PeriodPostedBalance.FunctionalAmount	= LocalPreviousBankAccountBalance.FunctionalAmount	+ PostedFunctionalAmount
					        invoked.PeriodPostedBalance.AlternateAmount		= LocalPreviousBankAccountBalance.AlternateAmount	+ PostedAlternateAmount
					        invoked.PeriodPostedBalance.AlternateAmount2	= LocalPreviousBankAccountBalance.AlternateAmount2	+ PostedAlternateAmount2
					        invoked.PeriodPostedBalance.AlternateAmount3	= LocalPreviousBankAccountBalance.AlternateAmount3	+ PostedAlternateAmount3
							invoked.PeriodPostedBalance.ProjectAmount		= LocalPreviousBankAccountBalance.ProjectAmount		+ PostedProjectAmount
							invoked.PeriodPostedBalance.ReportAmount1		= LocalPreviousBankAccountBalance.ReportAmount1		+ PostedReportAmount1
							invoked.PeriodPostedBalance.ReportAmount2		= LocalPreviousBankAccountBalance.ReportAmount2		+ PostedReportAmount2
							invoked.PeriodPostedBalance.ReportAmount3		= LocalPreviousBankAccountBalance.ReportAmount3		+ PostedReportAmount3
							invoked.PeriodPostedBalance.ReportAmount4		= LocalPreviousBankAccountBalance.ReportAmount4		+ PostedReportAmount4
							invoked.PeriodPostedBalance.ReportAmount5		= LocalPreviousBankAccountBalance.ReportAmount5		+ PostedReportAmount5
									

				Instance Rules
					if (Status.Reconciled
					and ReconciliationData.ExchangeDate <= PrmCashPositionDate)
						if (BankTransactionSign.BankDebit)
							NetTransactionAmount			-= ReconciliationData.CurrencyAmount
					        NetFunctionalAmount				-= ReconciliationData.FunctionalAmount.EnteredCurrencyAmount
					        NetAlternateAmount				-= ReconciliationData.AlternateAmount.EnteredCurrencyAmount
					        NetAlternateAmount2				-= ReconciliationData.AlternateAmount2.EnteredCurrencyAmount
					        NetAlternateAmount3				-= ReconciliationData.AlternateAmount3.EnteredCurrencyAmount
							NetProjectAmount				-= ReconciliationData.ProjectAmount.EnteredCurrencyAmount
							NetReportAmount1				-= ReconciliationData.ReportAmount1.EnteredCurrencyAmount
							NetReportAmount2				-= ReconciliationData.ReportAmount2.EnteredCurrencyAmount
							NetReportAmount3				-= ReconciliationData.ReportAmount3.EnteredCurrencyAmount
							NetReportAmount4				-= ReconciliationData.ReportAmount4.EnteredCurrencyAmount
							NetReportAmount5				-= ReconciliationData.ReportAmount5.EnteredCurrencyAmount
							NetDebitTransactionAmount		+= ReconciliationData.CurrencyAmount	
					        NetDebitFunctionalAmount		+= ReconciliationData.FunctionalAmount.EnteredCurrencyAmount
					        NetDebitAlternateAmount			+= ReconciliationData.AlternateAmount.EnteredCurrencyAmount
					        NetDebitAlternateAmount2		+= ReconciliationData.AlternateAmount2.EnteredCurrencyAmount
					      	NetDebitAlternateAmount3		+= ReconciliationData.AlternateAmount3.EnteredCurrencyAmount
							NetDebitProjectAmount			+= ReconciliationData.ProjectAmount.EnteredCurrencyAmount
							NetDebitReportAmount1			+= ReconciliationData.ReportAmount1.EnteredCurrencyAmount
							NetDebitReportAmount2			+= ReconciliationData.ReportAmount2.EnteredCurrencyAmount
							NetDebitReportAmount3			+= ReconciliationData.ReportAmount3.EnteredCurrencyAmount
							NetDebitReportAmount4			+= ReconciliationData.ReportAmount4.EnteredCurrencyAmount
							NetDebitReportAmount5			+= ReconciliationData.ReportAmount5.EnteredCurrencyAmount
							if (GeneralLedgerPostDate <= PrmPostingPeriodDate)
								PostedTransactionAmount			-= ReconciliationData.CurrencyAmount
						        PostedFunctionalAmount			-= ReconciliationData.FunctionalAmount.EnteredCurrencyAmount
						        PostedAlternateAmount			-= ReconciliationData.AlternateAmount.EnteredCurrencyAmount
						        PostedAlternateAmount2			-= ReconciliationData.AlternateAmount2.EnteredCurrencyAmount
						        PostedAlternateAmount3			-= ReconciliationData.AlternateAmount3.EnteredCurrencyAmount
								PostedProjectAmount				-= ReconciliationData.ProjectAmount.EnteredCurrencyAmount
								PostedReportAmount1				-= ReconciliationData.ReportAmount1.EnteredCurrencyAmount
								PostedReportAmount2				-= ReconciliationData.ReportAmount2.EnteredCurrencyAmount
								PostedReportAmount3				-= ReconciliationData.ReportAmount3.EnteredCurrencyAmount
								PostedReportAmount4				-= ReconciliationData.ReportAmount4.EnteredCurrencyAmount
								PostedReportAmount5				-= ReconciliationData.ReportAmount5.EnteredCurrencyAmount
						else
							NetTransactionAmount			+= ReconciliationData.CurrencyAmount
					        NetFunctionalAmount				+= ReconciliationData.FunctionalAmount.EnteredCurrencyAmount
					        NetAlternateAmount				+= ReconciliationData.AlternateAmount.EnteredCurrencyAmount
					        NetAlternateAmount2				+= ReconciliationData.AlternateAmount2.EnteredCurrencyAmount
					        NetAlternateAmount3				+= ReconciliationData.AlternateAmount3.EnteredCurrencyAmount
							NetProjectAmount				+= ReconciliationData.ProjectAmount.EnteredCurrencyAmount
							NetReportAmount1				+= ReconciliationData.ReportAmount1.EnteredCurrencyAmount
							NetReportAmount2				+= ReconciliationData.ReportAmount2.EnteredCurrencyAmount
							NetReportAmount3				+= ReconciliationData.ReportAmount3.EnteredCurrencyAmount
							NetReportAmount4				+= ReconciliationData.ReportAmount4.EnteredCurrencyAmount
							NetReportAmount5				+= ReconciliationData.ReportAmount5.EnteredCurrencyAmount
							NetCreditTransactionAmount		+= ReconciliationData.CurrencyAmount	
					        NetCreditFunctionalAmount		+= ReconciliationData.FunctionalAmount.EnteredCurrencyAmount
					        NetCreditAlternateAmount		+= ReconciliationData.AlternateAmount.EnteredCurrencyAmount
					        NetCreditAlternateAmount2		+= ReconciliationData.AlternateAmount2.EnteredCurrencyAmount
					      	NetCreditAlternateAmount3		+= ReconciliationData.AlternateAmount3.EnteredCurrencyAmount
							NetCreditProjectAmount			+= ReconciliationData.ProjectAmount.EnteredCurrencyAmount
							NetCreditReportAmount1			+= ReconciliationData.ReportAmount1.EnteredCurrencyAmount
							NetCreditReportAmount2			+= ReconciliationData.ReportAmount2.EnteredCurrencyAmount
							NetCreditReportAmount3			+= ReconciliationData.ReportAmount3.EnteredCurrencyAmount
							NetCreditReportAmount4			+= ReconciliationData.ReportAmount4.EnteredCurrencyAmount
							NetCreditReportAmount5			+= ReconciliationData.ReportAmount5.EnteredCurrencyAmount
							if (GeneralLedgerPostDate <= PrmPostingPeriodDate)
								PostedTransactionAmount			+= ReconciliationData.CurrencyAmount				
						        PostedFunctionalAmount			+= ReconciliationData.FunctionalAmount.EnteredCurrencyAmount
						        PostedAlternateAmount			+= ReconciliationData.AlternateAmount.EnteredCurrencyAmount
						        PostedAlternateAmount2			+= ReconciliationData.AlternateAmount2.EnteredCurrencyAmount
						        PostedAlternateAmount3			+= ReconciliationData.AlternateAmount3.EnteredCurrencyAmount
								PostedProjectAmount				+= ReconciliationData.ProjectAmount.EnteredCurrencyAmount
								PostedReportAmount1				+= ReconciliationData.ReportAmount1.EnteredCurrencyAmount
								PostedReportAmount2				+= ReconciliationData.ReportAmount2.EnteredCurrencyAmount
								PostedReportAmount3				+= ReconciliationData.ReportAmount3.EnteredCurrencyAmount
								PostedReportAmount4				+= ReconciliationData.ReportAmount4.EnteredCurrencyAmount
								PostedReportAmount5				+= ReconciliationData.ReportAmount5.EnteredCurrencyAmount
					else
						if (BankTransactionSign.BankDebit)
							PostedTransactionAmount			-= IssuedBankAmount
					        PostedFunctionalAmount			-= IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
					        PostedAlternateAmount			-= IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount
					        PostedAlternateAmount2			-= IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount
					        PostedAlternateAmount3			-= IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount
							PostedProjectAmount				-= IssuedBaseAmount.ProjectAmount.EnteredCurrencyAmount
							PostedReportAmount1				-= IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount
							PostedReportAmount2				-= IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount
							PostedReportAmount3				-= IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount
							PostedReportAmount4				-= IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount
							PostedReportAmount5				-= IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount
							if (IssueDate <= PrmCashPositionDate)
								OpenTransactionAmount			-= IssuedBankAmount
						        OpenFunctionalAmount			-= IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
						        OpenAlternateAmount				-= IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount
						        OpenAlternateAmount2			-= IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount
						        OpenAlternateAmount3			-= IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount
								OpenProjectAmount				-= IssuedBaseAmount.ProjectAmount.EnteredCurrencyAmount
								OpenReportAmount1				-= IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount
								OpenReportAmount2				-= IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount
								OpenReportAmount3				-= IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount
								OpenReportAmount4				-= IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount
								OpenReportAmount5				-= IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount
						else
							PostedTransactionAmount			+= IssuedBankAmount				
					        PostedFunctionalAmount			+= IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
					        PostedAlternateAmount			+= IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount
					        PostedAlternateAmount2			+= IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount
					        PostedAlternateAmount3			+= IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount
							PostedProjectAmount				+= IssuedBaseAmount.ProjectAmount.EnteredCurrencyAmount
							PostedReportAmount1				+= IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount
							PostedReportAmount2				+= IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount
							PostedReportAmount3				+= IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount
							PostedReportAmount4				+= IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount
							PostedReportAmount5				+= IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount
							if (IssueDate <= PrmCashPositionDate)
								OpenTransactionAmount			+= IssuedBankAmount
						        OpenFunctionalAmount			+= IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount
						        OpenAlternateAmount				+= IssuedBaseAmount.AlternateAmount.EnteredCurrencyAmount
						        OpenAlternateAmount2			+= IssuedBaseAmount.AlternateAmount2.EnteredCurrencyAmount
						        OpenAlternateAmount3			+= IssuedBaseAmount.AlternateAmount3.EnteredCurrencyAmount
								OpenProjectAmount				+= IssuedBaseAmount.ProjectAmount.EnteredCurrencyAmount
								OpenReportAmount1				+= IssuedBaseAmount.ReportAmount1.EnteredCurrencyAmount
								OpenReportAmount2				+= IssuedBaseAmount.ReportAmount2.EnteredCurrencyAmount
								OpenReportAmount3				+= IssuedBaseAmount.ReportAmount3.EnteredCurrencyAmount
								OpenReportAmount4				+= IssuedBaseAmount.ReportAmount4.EnteredCurrencyAmount
								OpenReportAmount5				+= IssuedBaseAmount.ReportAmount5.EnteredCurrencyAmount
						OpenRecordCount						+= 1		


		DeleteBankStatementCreatedTransactions is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount
				PrmBankStatement			is like BankStatement
					
			Parameter Rules
				PrmCashManagementAccount	required
				PrmBankStatement			required
				
			Sort Order
				CashManagementGroup
				CashManagementAccount
				CreatedFromBankStatement

			Instance Selection
				where (CashManagementGroup			= PrmCashManagementGroup
				and    CashManagementAccount		= PrmCashManagementAccount
				and    CreatedFromBankStatement		= PrmBankStatement
				and    Status.Unreleased)
			
			Action Rules
				Instance Rules
					invoke Unreleased.Delete

		MassReleaseByBankStatement is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashManagementAccount	is a CashManagementAccount		
				PrmBankStatement			is like BankStatement

			Sort Order
				CashManagementGroup
				CreatedFromBankStatement

			Instance Selection
				where (CashManagementGroup			= PrmCashManagementGroup
				and    CashManagementAccount		= PrmCashManagementAccount		
				and   (PrmBankStatement !entered									
				or     CreatedFromBankStatement		= PrmBankStatement)
				and    CreatedFromBankStatement entered								
				and    Status.Unreleased)

			Action Rules
				Instance Rules
					invoke Unreleased.Release
						resume on error










		UpdateCashLedgerSourceRecord is a Set Action		
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup

			Parameter Rules

			Local Fields
				
			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup
				and    CashLedgerSourceRecord	!entered)

			Sort Order  
				CashManagementGroup
				BankTransactionCode
				CashLedgerSourceRecord
				CashLedgerTransaction

			Accumulators

				
			Action Rules
				Empty Set Rules
					
				Set Rules
					Entrance Rules

					Exit Rules
				
				CashLedgerTransaction Set Rules
					Entrance Rules
				

				Instance Rules
					if (SourceCode = "AP")
						if (SummaryOption.Summarized)
							invoke UpdateCashLedgerSourceRecord BankStatementReconciliation set
								invoked.PrmCashLedgerSourceRecord	= "CBT"
							invoke UpdateCashLedgerSourceRecord CashLedgerReconciliationAdjustmentRel
								invoked.PrmCashLedgerSourceRecord	= "CBT"
							invoke UpdateCashLedgerSourceRecord CashLedgerTransactionReasonCodeUsage set
								invoked.PrmCashLedgerSourceRecord	= "CBT"
							CashLedgerSourceRecord	= "CBT"
						else
							if (Type.CashLedgerPayment)
								invoke UpdateCashLedgerSourceRecord BankStatementReconciliation set
									invoked.PrmCashLedgerSourceRecord	= "CBM"
								invoke UpdateCashLedgerSourceRecord CashLedgerReconciliationAdjustmentRel
									invoked.PrmCashLedgerSourceRecord	= "CBM"
								invoke UpdateCashLedgerSourceRecord CashLedgerTransactionReasonCodeUsage set
									invoked.PrmCashLedgerSourceRecord	= "CBM"
								CashLedgerSourceRecord	= "CBM"
							else
								invoke UpdateCashLedgerSourceRecord BankStatementReconciliation set
									invoked.PrmCashLedgerSourceRecord	= "CHK"
								invoke UpdateCashLedgerSourceRecord CashLedgerReconciliationAdjustmentRel
									invoked.PrmCashLedgerSourceRecord	= "CHK"
								invoke UpdateCashLedgerSourceRecord CashLedgerTransactionReasonCodeUsage set
									invoked.PrmCashLedgerSourceRecord	= "CHK"
								CashLedgerSourceRecord	= "CHK"
					else
					if (CashLedgerReturnedPaymentRel exists)
						invoke UpdateCashLedgerSourceRecord BankStatementReconciliation set
							invoked.PrmCashLedgerSourceRecord	= "CRP"
						invoke UpdateCashLedgerSourceRecord CashLedgerReconciliationAdjustmentRel
							invoked.PrmCashLedgerSourceRecord	= "CRP"
						invoke UpdateCashLedgerSourceRecord CashLedgerTransactionReasonCodeUsage set
							invoked.PrmCashLedgerSourceRecord	= "CRP"
						CashLedgerSourceRecord	= "CRP"
					else
						invoke UpdateCashLedgerSourceRecord BankStatementReconciliation set
							invoked.PrmCashLedgerSourceRecord	= "CBT"
						invoke UpdateCashLedgerSourceRecord CashLedgerReconciliationAdjustmentRel
							invoked.PrmCashLedgerSourceRecord	= "CBT"
						invoke UpdateCashLedgerSourceRecord CashLedgerTransactionReasonCodeUsage set
							invoked.PrmCashLedgerSourceRecord	= "CBT"
						CashLedgerSourceRecord	= "CBT"

		StaleDateProcessing is a Set Action	
			completion message is "<CompletionMessage>"
			run in background		
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCashCode					is a CashCode
					default label is "CashCode"	
				PrmCashCodeGroup			is a CashCodeGroup
					default label is "CashCodeGroup"
				PrmBankTransactionCode		is a BankTransactionCode
					default label is "BankTransactionCode"
				PrmProcessLevelProcessing	is Boolean
					default label is "ProcessLevelProcessing"	
				PrmProcessLevel				is a ProcessLevel
					default label is "ProcessLevel"		
				PrmIncludeAllTransactions	is Boolean
					default label is "IncludeAllTransactions"


				PrmFileName					is Alpha size 50
					default label is "Filename"	
				PrmStaleDate				is Date
					default label is "StaleDate"
				PrmDays						is Numeric 4
					default label is "Days"
				PrmPostDate					is Date
					default label is "PostingDate"	
				PrmPerformStaleDate			is Boolean		
					default label is "PerformStaleDateIfStatusIsReadyToUpdate"
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					if (PrmCashCode entered)
						constraint (PrmCashCodeGroup not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"		
					LocalCashCodeGroup	= PrmCashCodeGroup
				PrmBankTransactionCode
					constraint (PrmBankTransactionCode.BankTransactionType.CashPayment)
						"BankTransactionCodeMustBeACashPayment"	
				PrmStaleDate
					if (PrmStaleDate not entered)
						PrmStaleDate		= current corporate date	
						LocalDateRange.End	= current corporate date
					else
						LocalDateRange.End 	= PrmStaleDate
				PrmDays
					required
					LocalDateRange.Begin	= LocalDateRange.End - PrmDays as days
					StaleAgeDate 			= LocalDateRange.Begin
					LocalStaleAgeDate		= StaleAgeDate
				PrmPostDate	
					default to current corporate date	
					if (CBCompanySystemClosingControlRel.Control)		
						constraint (PrmPostDate within CBCompanySystemClosingControlRel.ValidEntryDate)
							"PostDateNotWithinValidEntryDatesForSystemCode;ValidDateRangeIs<CBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CBCompanySystemClosingControlRel.ValidEntryDate.End>"

			Local Fields
				LocalDateRange					is a DateRange
				StaleAgeDate					is Date
				StaleDateOutputFileHeaderView	is a StaleDateOutputFileHeader view
				
			Instance Selection
				where (CashManagementGroup	 	= PrmCashManagementGroup
				and    CanStaleDateTransaction
				and    !ImportInProcess

				and  ((PrmIncludeAllTransactions
				and	   StaleDatedOrOpenWithinDateRange)
				or    (!PrmIncludeAllTransactions
				and    OpenWithinDateRange))

				and  ((PrmProcessLevel 			entered
				and    PayablesCompanyVendorProcLevel.PayablesProcessLevel = PrmProcessLevel)
				or     PrmProcessLevel          not entered)       

				and  ((PrmCashCode				entered	
				and    CashCode					= PrmCashCode)
				or     PrmCashCode				not entered)

				and  ((PrmCashCodeGroup			entered	
				and    CashCodeGroupDetailRel exists)
				or     PrmCashCodeGroup			not entered)

				and  ((PrmBankTransactionCode	entered	
				and    BankTransactionCode		= PrmBankTransactionCode)
				or     PrmBankTransactionCode	not entered))
									
			Sort Order
				CashManagementGroup
                CashCode
                BankTransactionCode
                PayablesCompanyVendorProcLevel.PayablesProcessLevel
                TransactionNumber
                CashLedgerTransaction

			Accumulators
				TotalNumberOfRecords
				TotalRecordAmount

			Action Rules
				Empty Set Rules
					invoke Create StaleDateOutputFileHeader
						invoked.CashManagementGroup		= PrmCashManagementGroup
						invoked.CashCode				= PrmCashCode
						invoked.CashCodeGroup			= PrmCashCodeGroup
				    	invoked.BankTransactionCode		= PrmBankTransactionCode
				    	invoked.ProcessLevelProcessing	= PrmProcessLevelProcessing	
				    	invoked.ProcessLevel			= PrmProcessLevel
				    	invoked.IncludeAllTransactions	= PrmIncludeAllTransactions

				    	invoked.StaleDate				= PrmStaleDate
				    	invoked.Days					= PrmDays
				    	invoked.PostDate				= PrmPostDate
						invoked.FileName				= PrmFileName	
						invoked.Status					= 5 
					CompletionMessage = "StaleDateSelectionProcessComplete...:NoRecordsFoundToProcess"	
					
				Set Rules
					Entrance Rules
						invoke Create StaleDateOutputFileHeader
							assign result to StaleDateOutputFileHeaderView
							invoked.CashManagementGroup		= PrmCashManagementGroup
							invoked.FileName				= PrmFileName	
							invoked.CashCode				= PrmCashCode
							invoked.CashCodeGroup			= PrmCashCodeGroup
					    	invoked.BankTransactionCode		= PrmBankTransactionCode
					    	invoked.ProcessLevelProcessing	= PrmProcessLevelProcessing	
					    	invoked.ProcessLevel			= PrmProcessLevel
					    	invoked.IncludeAllTransactions	= PrmIncludeAllTransactions

					    	invoked.StaleDate				= PrmStaleDate
					    	invoked.Days					= PrmDays
					    	invoked.PostDate				= PrmPostDate
							invoked.Status					= 1	
						
					Exit Rules
						invoke StatusUpdate StaleDateOutputFileHeaderView.StaleDateOutputFileHeader
							invoked.TransientPerformStaleDate	= PrmPerformStaleDate		
							invoked.TotalNumberOfRecords 		= TotalNumberOfRecords
							invoked.TotalRecordAmount	 		= TotalRecordAmount
			        	CompletionMessage = "StaleDateSelectionProcessComplete"
			        	
				Instance Rules
					LocalStaleDateOutputFileHeaderView = StaleDateOutputFileHeaderView
					include StaleDateProcessingEdits
					if (LocalTransactionErrorFound)
						StaleDateProcessingStatus	= 2 
        				StaleDateOutputFileHeader	= LocalStaleDateOutputFileHeaderView.StaleDateOutputFileHeader
					else
						if (Status.StaleDated)
							LocalStaleDateAccount	= StaleDateAccount
						TotalNumberOfRecords 		+= 1
						TotalRecordAmount 			+= IssuedBankAmount
						StaleDateProcessingStatus	= 1 
        				StaleDateOutputFileHeader	= LocalStaleDateOutputFileHeaderView.StaleDateOutputFileHeader
						initialize LocalVendorGroup
						initialize LocalVendor
						initialize LocalVendorName
						initialize LocalVendorLegalName
						initialize LocalVendorAddress
						initialize LocalFirstName			
						initialize LocalMiddleName			
						invoke Create StaleDateOutputFileDetail
							fill in fields from this instance
								except invoked.Status
							invoked.Status						= 1	
							invoked.TransactionStatus			= Status	
							invoked.StaleDateOutputFileHeader 	= StaleDateOutputFileHeaderView.StaleDateOutputFileHeader
							invoked.StaleDateAccount			= LocalStaleDateAccount
							invoked.CashAccount					= CompanyCashCode.CashAccount
							invoked.Company                 	= Company.OrigCompany
					        invoked.ProcessLevel				= PayablesCompanyVendorProcLevel.PayablesProcessLevel
							invoked.BankTransactionCode			= CashLedgerTransaction.BankTransactionCode
							invoked.PostDate					= PrmPostDate
							if (Status.StaleDated)
					        	invoked.StaleDate				= StaleDate
					        else
					        	invoked.StaleDate				= PrmStaleDate
					        include CheckForCLTPayeeData		
					        if (IsCashLedgerPayment)
					        	include GetCBPaymentPayeeData	
					        else
					        	include GetPayablesVendorData
				        	invoked.VendorGroup					= LocalVendorGroup
				        	invoked.Vendor              		= LocalVendor
			        		invoked.VendorName     				= LocalVendorName
			        		invoked.LegalName					= LocalVendorLegalName
			        		invoked.Address						= LocalVendorAddress
			        		invoked.PayeeFirstName				= LocalFirstName			
							invoked.PayeeMiddleName				= LocalMiddleName			
				
	
		WriteOffSelection is a Set Action	
			completion message is "<CompletionMessage>"
			valid when (!CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
			run in background		
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCashCode					is a CashCode
					default label is "CashCode"	
				PrmCashCodeGroup			is a CashCodeGroup
					default label is "CashCodeGroup"
				PrmBankTransactionCode		is a BankTransactionCode
					default label is "BankTransactionCode"
				PrmSelectionDateRange		is a DateRange
					default label is "SelectionDateRange"
				PrmSelectionFlag			is Numeric 1
					default label is "SelectionFlag"
					States
						SelectForWriteOff				value is 1
							default label is "SelectForWriteOff"
						UnselectForWriteOff				value is 0
							default label is "Unselect"
					
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					if (PrmCashCode entered)
						constraint (PrmCashCodeGroup not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"		
					LocalCashCodeGroup	= PrmCashCodeGroup
				PrmSelectionDateRange
					required
				PrmSelectionFlag
					initial value is true
				
			Instance Selection
				where (CashManagementGroup	 	= PrmCashManagementGroup
				and    ((PrmSelectionFlag.SelectForWriteOff
				and    CanWriteOff)
				or	   (PrmSelectionFlag.UnselectForWriteOff
				and    Status.WriteOff
				and	   WriteOffProcessed		= false))
				and    !ImportInProcess

				and    IssueDate within PrmSelectionDateRange

				and  ((PrmCashCode				entered	
				and    CashCode					= PrmCashCode)
				or     PrmCashCode				not entered)

				and  ((PrmCashCodeGroup			entered	
				and    CashCodeGroupDetailRel exists)
				or     PrmCashCodeGroup			not entered)

				and  ((PrmBankTransactionCode	entered	
				and    BankTransactionCode		= PrmBankTransactionCode)
				or     PrmBankTransactionCode	not entered))
									
			Sort Order is Set5
			    

			Action Rules
				Empty Set Rules
					CompletionMessage = "WriteOffSelectionProcessComplete...:NoRecordsFoundToProcess"	
					
				Set Rules
					Entrance Rules
						
					Exit Rules		
			        	CompletionMessage = "WriteOffSelectionProcessComplete"
			        	
				Instance Rules
					if (PrmSelectionFlag.SelectForWriteOff)
						make transition to WriteOff
					else
						make transition to Open
						
				
		WriteOffUpdate is a Set Action	
			completion message is "<CompletionMessage>"
			valid when (!CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)
			run in background		
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCashCode					is a CashCode
					default label is "CashCode"	
				PrmCashCodeGroup			is a CashCodeGroup
					default label is "CashCodeGroup"
				PrmBankTransactionCode		is a BankTransactionCode
					default label is "BankTransactionCode"
				PrmAccount					is a FinanceCodeBlock
					default label is "WriteOffAccount"
				PrmPostDate					is Date
					default label is "PostDate"
					
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					if (PrmCashCode entered)
						constraint (PrmCashCodeGroup not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"		
					LocalCashCodeGroup	= PrmCashCodeGroup
				PrmAccount
					required
				PrmPostDate 
					initial value is current corporate date
					default to current corporate date
					if (CBCompanySystemClosingControlRel.Control)
						constraint (PrmPostDate within CBCompanySystemClosingControlRel.ValidEntryDate)
							"PostDateNotWithinValidEntryDatesForSystemCode_'\C\B'_andCompany<Company>;ValidDateRangeIs<CBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CBCompanySystemClosingControlRel.ValidEntryDate.End>"

				
			Instance Selection
				where (CashManagementGroup	 	= PrmCashManagementGroup
				and    Status.WriteOff
				and    !WriteOffProcessed
				and    !ImportInProcess

				and  ((PrmCashCode				entered	
				and    CashCode					= PrmCashCode)
				or     PrmCashCode				not entered)

				and  ((PrmCashCodeGroup			entered	
				and    CashCodeGroupDetailRel exists)
				or     PrmCashCodeGroup			not entered)

				and  ((PrmBankTransactionCode	entered	
				and    BankTransactionCode		= PrmBankTransactionCode)
				or     PrmBankTransactionCode	not entered))
									
			Sort Order is Set5
			    

			Action Rules
				Empty Set Rules
					CompletionMessage = "NoRecordsFound"	
					
				Set Rules
					Entrance Rules
						
					Exit Rules		
			        	CompletionMessage = "WriteOffProcessingComplete"
				Instance Rules
					invoke WriteOffTransaction
						invoked.PrmAccount	= PrmAccount
						invoked.PrmPostDate = PrmPostDate
					
				
		UpdateSelectedStaleDateTransactions is an Instance Action 	
			default label is untranslatable
			restricted
			Parameters
				PrmStaleDate					is Date
				PrmPostDate						is Date
				PrmStaleDateOutputFileHeader	is Numeric 10
				PrmStaleDateOutputFileDetail	is Numeric 8
			Action Rules
				LocalStaleDateOutputFileHeader	= PrmStaleDateOutputFileHeader
				LocalStaleDateOutputFileDetail	= PrmStaleDateOutputFileDetail
				if (Status.Open)
					LocalExchangeDate			= PrmStaleDate		
	        		LocalPostingDate			= PrmPostDate		
					invoke Open.ManualStaleDateUpdate


	        	invoke Update StaleDateOutputFileDetailRel
	        		invoked.Status	= 2	
        		StaleDateProcessingStatus	= 3 
        		StaleDateOutputFileHeader	= PrmStaleDateOutputFileHeader
		
		RemoveTransactionFromStaleDateProcess is an Instance Action	
			default label is untranslatable
			restricted
			Entrance Rules					
			Action Rules
				initialize StaleDateProcessingStatus 
        		initialize StaleDateOutputFileHeader


											
		EscheatmentProcessing is a Set Action	
			completion message is "<CompletionMessage>"
			run in background		
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmCashCode					is a CashCode
					default label is "CashCode"	
				PrmCashCodeGroup			is a CashCodeGroup
					default label is "CashCodeGroup"
				PrmBankTransactionCode		is a BankTransactionCode
					default label is "BankTransactionCode"
				PrmProcessLevelProcessing	is Boolean
					default label is "ProcessLevelProcessing"	
				PrmProcessLevel				is a ProcessLevel
					default label is "ProcessLevel"		
				PrmIncludeAllTransactions	is Boolean
					default label is "IncludeAllTransactions"


				PrmCountry					is a Country
					default label is "Country/\Jurisdiction"	
				PrmState					is a StateProvince
					default label is "State"
				PrmFileName					is Alpha size 50
					default label is "Filename"	
				PrmEscheatDate				is Date
					default label is "EscheatDate"
				PrmDays						is Numeric 4
					default label is "Days"
				PrmPostDate					is Date
					default label is "PostingDate"	
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmCashCode
					if (PrmCashCode entered)
						constraint (PrmCashCodeGroup not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"
					LocalCashCodeGroup	= PrmCashCodeGroup
				PrmBankTransactionCode
					constraint (PrmBankTransactionCode.BankTransactionType.CashPayment)
						"BankTransactionCodeMustBeACashPayment"	
				PrmCountry
					if (PrmState entered)
						required
				PrmEscheatDate
					if (PrmEscheatDate not entered)
						PrmEscheatDate		= current corporate date	
						LocalDateRange.End	= current corporate date
					else
						LocalDateRange.End 	= PrmEscheatDate
				PrmDays
					required
					LocalDateRange.Begin	= LocalDateRange.End - PrmDays as days
					EscheatAgeDate 			= LocalDateRange.Begin
					LocalEscheatAgeDate		= EscheatAgeDate
				PrmPostDate	
					default to current corporate date
					if (CBCompanySystemClosingControlRel.Control)
						constraint (PrmPostDate within CBCompanySystemClosingControlRel.ValidEntryDate)
							"PostDateNotWithinValidEntryDatesForSystemCode;ValidDateRangeIs<CBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CBCompanySystemClosingControlRel.ValidEntryDate.End>"
			Local Fields
				LocalDateRange					is a DateRange
				EscheatAgeDate					is Date
				EscheatmentOutputFileHeaderView	is a EscheatmentOutputFileHeader view
				
			Instance Selection
				where (CashManagementGroup	 	= PrmCashManagementGroup
				and    !ImportInProcess
				and    TransactionNumber entered	

				and  ((PrmIncludeAllTransactions
				and	   EscheatedOrStaleDatedWithinDateRange)
				or    (!PrmIncludeAllTransactions
				and    StaleDatedWithinDateRange))

				and  ((PrmProcessLevel 			entered
				and    PayablesCompanyVendorProcLevel.PayablesProcessLevel = PrmProcessLevel)
				or     PrmProcessLevel          not entered)

				and  ((PrmCashCode				entered	
				and    CashCode					= PrmCashCode)
				or     PrmCashCode				not entered)

				and  ((PrmCashCodeGroup			entered	
				and    CashCodeGroupDetailRel exists)
				or     PrmCashCodeGroup			not entered)

				and  ((PrmBankTransactionCode	entered	
				and    BankTransactionCode		= PrmBankTransactionCode)
				or     PrmBankTransactionCode	not entered)

				and  ((PrmState entered	
				and    DerivedStateProvince		= PrmState)
				or     PrmState	not entered))
									
			Sort Order
				CashManagementGroup
                CashCode
                BankTransactionCode
                PayablesCompanyVendorProcLevel.PayablesProcessLevel
                TransactionNumber
                CashLedgerTransaction
			    

			Action Rules
				Empty Set Rules
					invoke Create EscheatmentOutputFileHeader
						assign result to EscheatmentOutputFileHeaderView
						invoked.CashManagementGroup		= PrmCashManagementGroup
						invoked.CashCode				= PrmCashCode
						invoked.CashCodeGroup			= PrmCashCodeGroup
				    	invoked.BankTransactionCode		= PrmBankTransactionCode
				    	invoked.ProcessLevelProcessing	= PrmProcessLevelProcessing	
				    	invoked.ProcessLevel			= PrmProcessLevel
				    	invoked.IncludeAllTransactions	= PrmIncludeAllTransactions

				    	invoked.StateProvince			= PrmState
				    	invoked.EscheatDate				= PrmEscheatDate
				    	invoked.Days					= PrmDays
				    	invoked.PostDate				= PrmPostDate
						invoked.FileName				= PrmFileName	
						invoked.Status					= 5	
					CompletionMessage = "EscheatmentSelectionProcessComplete...:NoRecordsFoundToProcess"
					
				Set Rules
					Entrance Rules
						invoke Create EscheatmentOutputFileHeader
							assign result to EscheatmentOutputFileHeaderView
							invoked.CashManagementGroup		= PrmCashManagementGroup
							invoked.FileName				= PrmFileName	
							invoked.CashCode				= PrmCashCode
							invoked.CashCodeGroup			= PrmCashCodeGroup
					    	invoked.BankTransactionCode		= PrmBankTransactionCode
					    	invoked.ProcessLevelProcessing	= PrmProcessLevelProcessing	
					    	invoked.ProcessLevel			= PrmProcessLevel
					    	invoked.IncludeAllTransactions	= PrmIncludeAllTransactions

					    	invoked.EscheatDate				= PrmEscheatDate
					    	invoked.Days					= PrmDays
					    	invoked.PostDate				= PrmPostDate
					    	invoked.StateProvince			= PrmState
							invoked.Status					= 1	
						
					Exit Rules
						invoke StatusUpdate EscheatmentOutputFileHeaderView.EscheatmentOutputFileHeader
			        	CompletionMessage = "EscheatmentSelectionProcessComplete"
			        	
				Instance Rules
					LocalEscheatmentOutputFileHeaderView = EscheatmentOutputFileHeaderView
					include EscheatmentProcessingEdits
					if (LocalTransactionErrorFound)
						EscheatmentProcessingStatus	= 2 
       					EscheatmentOutputFileHeader	= LocalEscheatmentOutputFileHeaderView.EscheatmentOutputFileHeader
					else
						EscheatmentProcessingStatus	= 1 
        				EscheatmentOutputFileHeader	= LocalEscheatmentOutputFileHeaderView.EscheatmentOutputFileHeader
						initialize LocalVendorGroup
						initialize LocalVendor
						initialize LocalVendorName
						initialize LocalVendorLegalName
						initialize LocalVendorAddress
						initialize LocalStateProvince
						initialize LocalFirstName			
						initialize LocalMiddleName			
						invoke Create EscheatmentOutputFileDetail
							fill in fields from this instance
								except invoked.Status
							invoked.Status						= 1	
							invoked.TransactionStatus			= Status	
							invoked.EscheatmentOutputFileHeader = EscheatmentOutputFileHeaderView.EscheatmentOutputFileHeader
							invoked.EscheatmentAccount			= LocalEscheatmentAccount
							invoked.StaleDateAccount			= StaleDateAccount
							invoked.Company                 	= Company.OrigCompany
					        invoked.ProcessLevel				= PayablesCompanyVendorProcLevel.PayablesProcessLevel
							invoked.BankTransactionCode			= CashLedgerTransaction.BankTransactionCode
							invoked.PostDate					= PrmPostDate
							if (Status.Escheated)
					        	invoked.EscheatDate				= ReconciliationData.ExchangeDate
					        else
					        	invoked.EscheatDate				= PrmEscheatDate
					        include CheckForCLTPayeeData		
					        if (IsCashLedgerPayment)
					        	include GetCBPaymentPayeeData	
					        else
					        	include GetPayablesVendorData
				        	invoked.VendorGroup					= LocalVendorGroup
				        	invoked.Vendor              		= LocalVendor
			        		invoked.VendorName     				= LocalVendorName
			        		invoked.LegalName					= LocalVendorLegalName
			        		invoked.Address						= LocalVendorAddress
			        		invoked.PayeeFirstName				= LocalFirstName			
							invoked.PayeeMiddleName				= LocalMiddleName			
				
		UpdateSelectedEscheatmentTransactions is an Instance Action 
			default label is untranslatable
			restricted
			Parameters
				PrmEscheatDate					is Date
				PrmPostDate						is Date
				PrmEscheatmentOutputFileHeader	is Numeric 10
				PrmEscheatmentOutputFileDetail	is Numeric 8
			Action Rules
				LocalEscheatmentOutputFileHeader	= PrmEscheatmentOutputFileHeader
				LocalEscheatmentOutputFileDetail	= PrmEscheatmentOutputFileDetail
				if (Status.StaleDated)
					LocalExchangeDate				= PrmEscheatDate	
	        		LocalPostingDate				= PrmPostDate		
					invoke StaleDated.ManualEscheatUpdate


        		invoke Update EscheatmentOutputFileDetailRel
	        		invoked.Status	= 2	
        		EscheatmentProcessingStatus	= 3 
        		EscheatmentOutputFileHeader	= PrmEscheatmentOutputFileHeader
		
		RemoveTransactionFromEscheatmentProcess is an Instance Action	
			default label is untranslatable
			restricted
			Entrance Rules					
			Action Rules
				initialize EscheatmentProcessingStatus 
        		initialize EscheatmentOutputFileHeader

		BankPeriodReopen is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashCode					is a CashCode
				PrmPeriodDate				is Date
					
			Parameter Rules
				PrmCashManagementGroup		required
				PrmCashCode					required
				PrmPeriodDate				required
				
			Sort Order
				CashManagementGroup
				CashCode
				PeriodDate
				
			Instance Selection
				where (CashManagementGroup			= PrmCashManagementGroup
				and    CashCode						= PrmCashCode
				and    PeriodDate					= PrmPeriodDate)
				
			Action Rules
				Instance Rules
					initialize PeriodDate
					
		CompanyPeriodClosePostDateUpdate	is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is like CashManagementGroup
				PrmNewPostDate				is Date
				PrmCashLedgerJobResult		is a CashLedgerJobResult
				PrmCompany					is a GeneralLedgerCompany
				PrmCloseDetail				is a CashLedgerJobResultDetail
						
			Parameter Rules
				PrmCashManagementGroup		
					required
				PrmNewPostDate				
					required
				PrmCompany					
					required
				PrmCloseDetail
					required
						
			Sort Order is Set8
				
			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup
				and    Company.OrigCompany		= PrmCompany
				and    OutstandingTransactionsExist)	
				
			Action Rules
				Empty Set Rules
					if (PrmCloseDetail.CanClose)
						invoke CloseCompany PrmCloseDetail	
					
				Set Rules
					Entrance Rules
												
					Exit Rules
						if (PrmCloseDetail.CanClose)
							invoke CloseCompany PrmCloseDetail	
			        	
				Instance Rules
					if (Status.Voided
		            or	Status.StopPayment
		            or  Status.PendingStopPayConfirmation)			
						ReconciliationData.ExchangeDate = PrmNewPostDate
					else
						GeneralLedgerPostDate			= PrmNewPostDate
						include CheckForRelatedChanges
		
		CompanyPeriodClosePostDateUpdateUnreleased is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is like CashManagementGroup
				PrmNewPostDate				is Date
				PrmPeriodEndDate			is Date
				PrmCashLedgerJobResult		is a CashLedgerJobResult
				PrmCompany					is a GeneralLedgerCompany
				PrmCloseDetail				is a CashLedgerJobResultDetail
						
			Parameter Rules
				PrmCashManagementGroup		required		
				PrmNewPostDate				required
				PrmPeriodEndDate			required
				PrmCompany					required
				PrmCloseDetail				required
						
			Sort Order is Set8
				
			Instance Selection
				where (CashManagementGroup	= PrmCashManagementGroup
				and    Company.OrigCompany	= PrmCompany

				and    Status.Unreleased
            	and    GeneralLedgerPostDate <= PrmPeriodEndDate 
            	and    SourceCode != "AP")	
				
			Action Rules
				Empty Set Rules
					if (PrmCloseDetail.CanClose)
						invoke CloseCompany PrmCloseDetail	
					
				Set Rules
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalCashLedgerJobResult = PrmCashLedgerJobResult
						LocalCompany = PrmCompany
						invoke Delete UnreleasedCashLedgerTransactionsErrorRel
						
						if (PrmCloseDetail.CanClose)
							invoke CloseCompany PrmCloseDetail	
			        	
				Instance Rules
					GeneralLedgerPostDate = PrmNewPostDate
					include CheckForRelatedChanges
						
		CompanyPeriodClosePostDateUpdatePendingApproval is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is like CashManagementGroup
				PrmNewPostDate				is Date
				PrmPeriodEndDate			is Date
				PrmCashLedgerJobResult		is a CashLedgerJobResult
				PrmCompany					is a GeneralLedgerCompany
				PrmCloseDetail				is a CashLedgerJobResultDetail
						
			Parameter Rules
				PrmCashManagementGroup		required		
				PrmNewPostDate				required
				PrmPeriodEndDate			required
				PrmCompany					required
				PrmCloseDetail				required
						
			Sort Order is Set8
				
			Instance Selection
				where (CashManagementGroup	= PrmCashManagementGroup
				and    Company.OrigCompany	= PrmCompany

				and    Status.PendingApproval
				and  ((ApprovalRequestType.Release 
				and    GeneralLedgerPostDate <= PrmPeriodEndDate) 
				or   ((ApprovalRequestType.StopPayment 
				or     ApprovalRequestType.Void)
				and    ReconciliationData.ExchangeDate <= PrmPeriodEndDate))
	            and    SourceCode != "AP")
 
			Action Rules
				Empty Set Rules
					if (PrmCloseDetail.CanClose)
						invoke CloseCompany PrmCloseDetail	
					
				Set Rules
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalCashLedgerJobResult = PrmCashLedgerJobResult
						LocalCompany = PrmCompany
						invoke Delete PendingApprovalCashLedgerTransactionsErrorRel
					
						if (PrmCloseDetail.CanClose)
							invoke CloseCompany PrmCloseDetail	
			        	
				Instance Rules
					if (ApprovalRequestType.Release)
						GeneralLedgerPostDate = PrmNewPostDate
						include CheckForRelatedChanges
					else
						ReconciliationData.ExchangeDate = PrmNewPostDate
		
		CompanyPeriodClosePostDateUpdatePendingStopPayConfirmation is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is like CashManagementGroup
				PrmNewPostDate				is Date
				PrmPeriodEndDate			is Date
				PrmCashLedgerJobResult		is a CashLedgerJobResult
				PrmCompany					is a GeneralLedgerCompany
				PrmCloseDetail				is a CashLedgerJobResultDetail
						
			Parameter Rules
				PrmCashManagementGroup		required		
				PrmNewPostDate				required
				PrmPeriodEndDate			required
				PrmCompany					required
				PrmCloseDetail				required
						
			Sort Order is Set8
				
			Instance Selection
				where (CashManagementGroup	= PrmCashManagementGroup
				and    Company.OrigCompany	= PrmCompany

				and    Status.PendingStopPayConfirmation
				and    ReconciliationData.ExchangeDate <= PrmPeriodEndDate 
            	and    SourceCode != "AP")
            	
			Action Rules
				Empty Set Rules
					if (PrmCloseDetail.CanClose)
						invoke CloseCompany PrmCloseDetail	
					
				Set Rules
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalCashLedgerJobResult = PrmCashLedgerJobResult
						LocalCompany = PrmCompany
						invoke Delete PendingStopPayConfirmationCashLedgerTransactionsErrorRel
						
						if (PrmCloseDetail.CanClose)
							invoke CloseCompany PrmCloseDetail	
			        	
				Instance Rules
					ReconciliationData.ExchangeDate = PrmNewPostDate
		
		CompanyPeriodClosePostDateUpdateVoidOrStopPayment is a Set Action	
			default label is untranslatable
			restricted
			Parameters
				PrmCashManagementGroup		is like CashManagementGroup
				PrmNewPostDate				is Date
				PrmPeriodEndDate			is Date
				PrmCashLedgerJobResult		is a CashLedgerJobResult
				PrmCompany					is a GeneralLedgerCompany
				PrmCloseDetail				is a CashLedgerJobResultDetail
						
			Parameter Rules
				PrmCashManagementGroup		required		
				PrmNewPostDate				required
				PrmPeriodEndDate			required
				PrmCompany					required
				PrmCloseDetail				required
						
			Sort Order is Set8
				
			Instance Selection
				where (CashManagementGroup	= PrmCashManagementGroup
				and    Company.OrigCompany	= PrmCompany

				and   (Status.Voided
	            or	   Status.StopPayment)  
	            and    ReconciliationData.ExchangeDate <= PrmPeriodEndDate 
	            and    !ReinstateStatus
	            and    SourceCode != "AP")
            
			Action Rules
				Empty Set Rules
					if (PrmCloseDetail.CanClose)
						invoke CloseCompany PrmCloseDetail	
					
				Set Rules
					Exit Rules
						LocalCashManagementGroup = PrmCashManagementGroup
						LocalCashLedgerJobResult = PrmCashLedgerJobResult
						LocalCompany = PrmCompany
						invoke Delete VoidOrStopPaymentCashLedgerTransactionsErrorRel
						
						if (PrmCloseDetail.CanClose)
							invoke CloseCompany PrmCloseDetail	
			        	
				Instance Rules
					ReconciliationData.ExchangeDate = PrmNewPostDate
					
		UpdateReconDate is an Instance Action	
			default label is untranslatable
			restricted
			Parameters
				PrmReconDate	is Date				
			Action Rules
				ReconciliationData.ExchangeDate = PrmReconDate
				                                                                                            
        AutoCreateDistributions is an Instance Action    
            default label is untranslatable
            restricted
            Action Rules
            	initialize DistributionRunningTotal
                for each TransientCashAllocationCode.CashAllocationCodeDetail set							
                	invoke Create CashLedgerGLDistribution
                		assign result to LastDistribution
						fill in fields from CashLedgerTransaction
							except invoked.CashManagementGroup
							except invoked.CashCode
							except invoked.CashLedgerSourceRecord
							except invoked.CashLedgerGLDistribution.BankTransactionCode
							except invoked.CashLedgerGLDistribution.TransactionIDNumber
							except invoked.CashLedgerGLDistribution.SequenceNumber
							except invoked.TransactionNumber
							except invoked.TransactionNumberSuffix
							except invoked.GLFinanceCodeBlock
							except invoked.PostDate
							except invoked.Status
						invoked.CashManagementGroup      						= CashManagementGroup		
						invoked.CashCode										= CashCode
						invoked.CashLedgerSourceRecord							= "CBT"
						invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
						invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
						invoked.CashLedgerGLDistribution.DistributionType    	= "E"
						invoked.RecordType									 	= ""
						invoked.TransactionNumberSuffix                     	= 0
						invoked.PostDate									 	= GeneralLedgerPostDate
						invoked.GLFinanceCodeBlock								= each.AllocationAccount
						invoked.CashAllocationCode								= TransientCashAllocationCode
						invoked.CompanyAccountingEntity							= Company.OrigCompany.AccountingEntity	
						if (TransientCashAllocationCode.AllocationType.AccountOnly)
							invoked.GLTransactionAmount			= TransientCashAllocationAmount
						if (TransientCashAllocationCode.AllocationType.Amount)
							invoked.GLTransactionAmount			= each.AllocationAmount
						if (TransientCashAllocationCode.AllocationType.Percent)
							LocalAllocationAmount				= (TransientCashAllocationAmount * each.AllocationPercent)
							round LocalAllocationAmount to nearest DerivedRoundTo
							invoked.GLTransactionAmount			= LocalAllocationAmount
						
					if (LocalOriginatingTransaction entered)
						invoke FastUpdate LastDistribution.CashLedgerGLDistribution
							fill in user fields from LocalOriginatingTransaction(CashLedgerTransactionImport).CashLedgerTransactionImport
													
					if (TransientCashAllocationCode.AllocationType.Percent)
						DistributionRunningTotal += LocalAllocationAmount
				
				if  (TransientCashAllocationCode.AllocationType.Percent
				and (TransientCashAllocationAmount - DistributionRunningTotal) != 0)
					invoke Update LastDistribution.CashLedgerGLDistribution
						invoked.GLTransactionAmount = (LastDistribution.GLTransactionAmount + TransientCashAllocationAmount - DistributionRunningTotal) 
						
		CashAllocationCodeDistributionDelete	is an Instance Action	
			valid when (CanDeleteDistributions)	
			Parameters
				PrmCashAllocationCode	is a CashAllocationCode
					default label is "CashAllocationCode"
			Action Rules
				LocalCashAllocationCode	= PrmCashAllocationCode
				if (PrmCashAllocationCode entered)
					if (DistributionsByCashAllocationCodeRel exists)
						invoke Delete DistributionsByCashAllocationCodeRel
				else		
					if (DistributionsWithAnyCashAllocationCodesRel exists)
						invoke Delete DistributionsWithAnyCashAllocationCodesRel	
						
		ApplyAdditionalAllocations is an Instance Action 
			valid when (CanApplyAdditionalAllocations)	
			Parameters
				PrmCashAllocationCode			is a CashAllocationCode
					default label is "CashAllocationCode"
				PrmCashAllocationAmount			is an InternationalAmount
					default label is "CashAllocationAmount"
				PrmCashLedgerTransactionImport	is BusinessObjectReference  
			Parameter Rules
				PrmCashAllocationCode
					required
			Action Rules
				LocalCashAllocationCode			= PrmCashAllocationCode
				TransientCashAllocationCode		= PrmCashAllocationCode
				TransientCashAllocationAmount	= PrmCashAllocationAmount
				LocalOriginatingTransaction		= PrmCashLedgerTransactionImport
				include CashAllocationCodeEdits
				if (DistributionsByCashAllocationCodeRel exists)
					confirmation required
						"DistributionsAlreadyExistForAllocationCode<PrmCashAllocationCode>;DoYouWantToContinue?"
				invoke AutoCreateDistributions	
				initialize TransientCashAllocationCode		
				initialize TransientCashAllocationAmount
						
		WriteOffTransaction is an Instance Action 
			valid when (CanWriteOff)
			confirmation required 
				"ThisWillPermanentlyWriteOffATransaction;Continue?"
			Parameters
				PrmCashManagementGroup 	is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmPostDate				is Date
					default label is "PostDate"
				PrmAccount				is a FinanceCodeBlock
					default label is "WriteOffAccount"
			Parameter Rules
				PrmAccount
					required
				PrmPostDate	
					initial value is current corporate date
					default to current corporate date
					if (CBCompanySystemClosingControlRel.Control)
						constraint (PrmPostDate within CBCompanySystemClosingControlRel.ValidEntryDate)
							"PostDateNotWithinValidEntryDatesForSystemCode_'\C\B'_andCompany<Company>;ValidDateRangeIs<CBCompanySystemClosingControlRel.ValidEntryDate.Begin>-<CBCompanySystemClosingControlRel.ValidEntryDate.End>"

			Action Rules
				ReconciliationData.ExchangeDate				= PrmPostDate
				ReconciliationData.CurrencyAmount      		= IssuedBankAmount
			
				LocalActionOpenToVoid = true
				include UpdateCashCodeBalances
				if (CashCode.SummarizeLedgerBalances)
					include ProcessCashLedgerConsolidation
				LastMaintenanceDate = current timestamp
				

				if (BankTransactionSign.BankCredit)
					LocalIssuedBankAmount									= IssuedBankAmount * -1
					LocalFinanceCurrencyAmount								= IssuedBaseAmount
					include ReverseBaseDistributionAmounts
				else
					LocalIssuedBankAmount									= IssuedBankAmount
					LocalFinanceCurrencyAmount								= IssuedBaseAmount

				invoke Create CashLedgerGLDistribution
					fill in fields from CashLedgerTransaction
						except invoked.CashManagementGroup
						except invoked.CashCode
						except invoked.CashLedgerSourceRecord
						except invoked.CashLedgerGLDistribution.BankTransactionCode
						except invoked.CashLedgerGLDistribution.TransactionIDNumber
						except invoked.CashLedgerGLDistribution.SequenceNumber
						except invoked.TransactionNumber
						except invoked.TransactionNumberSuffix
						except invoked.GLFinanceCodeBlock
						except invoked.PostDate
						except invoked.Status
					invoked.CashManagementGroup      						= CashManagementGroup
					invoked.CashCode										= CashCode
					invoked.CashLedgerSourceRecord							= CashLedgerSourceRecord // was "CBT" FSM-3666
					invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
					invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
					invoked.TransactionNumberSuffix						 	= 0
					invoked.CashLedgerGLDistribution.DistributionType	 	= "E"
					invoked.RecordType									 	= "C"
					invoked.Status 										 	= 1
					invoked.PostDate									 	= PrmPostDate
					if (StaleDateAccount entered)
						invoked.GLFinanceCodeBlock							= StaleDateAccount
					else
						invoked.GLFinanceCodeBlock				            = CompanyCashCode.CashAccount
					invoked.BaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
					invoked.ToBaseCurrencyNumberOfDecimals				 	= BaseCurrencyNumberOfDecimals
					invoked.ToTransactionCurrencyNumberOfDecimals		 	= TransactionCurrencyNumberOfDecimals
					invoked.TransactionCurrencyNumberOfDecimals			 	= TransactionCurrencyNumberOfDecimals
					invoked.GLTransactionAmount								= LocalIssuedBankAmount
					invoked.DistributionToBankAmount 						= LocalIssuedBankAmount
					invoked.GLBaseAmount									= LocalFinanceCurrencyAmount
					invoked.CashLedgerTransactionOffsetDistrib				= true
					invoked.BypassStatusEdit							 	= true
					invoked.CompanyAccountingEntity							= Company.OrigCompany.AccountingEntity	
				

				if (BankTransactionSign.BankDebit)
					LocalIssuedBankAmount									= IssuedBankAmount * -1
					LocalFinanceCurrencyAmount								= IssuedBaseAmount
					include ReverseBaseDistributionAmounts
				else
					LocalIssuedBankAmount									= IssuedBankAmount
					LocalFinanceCurrencyAmount								= IssuedBaseAmount
				invoke Create CashLedgerGLDistribution
					fill in fields from CashLedgerTransaction
						except invoked.CashManagementGroup
						except invoked.CashCode
						except invoked.CashLedgerSourceRecord
						except invoked.CashLedgerGLDistribution.BankTransactionCode
						except invoked.CashLedgerGLDistribution.TransactionIDNumber
						except invoked.CashLedgerGLDistribution.SequenceNumber
						except invoked.TransactionNumber
						except invoked.TransactionNumberSuffix
						except invoked.GLFinanceCodeBlock
						except invoked.PostDate
						except invoked.Status
					invoked.CashManagementGroup      						= CashManagementGroup		
					invoked.CashCode										= CashCode
					invoked.CashLedgerSourceRecord							= CashLedgerSourceRecord // was "CBT" FSM-3666
					invoked.CashLedgerGLDistribution.BankTransactionCode 	= BankTransactionCode
					invoked.CashLedgerGLDistribution.TransactionIDNumber 	= CashLedgerTransaction
					invoked.CashLedgerGLDistribution.DistributionType    	= "E"
					invoked.RecordType									 	= ""
                    invoked.Status                                          = 1
					invoked.TransactionNumberSuffix                     	= 0
					invoked.PostDate									 	= PrmPostDate
					invoked.GLFinanceCodeBlock								= PrmAccount
					invoked.CompanyAccountingEntity							= Company.OrigCompany.AccountingEntity	
					invoked.GLTransactionAmount								= LocalIssuedBankAmount
					invoked.DistributionToBankAmount 						= LocalIssuedBankAmount
					invoked.GLBaseAmount									= LocalFinanceCurrencyAmount
					invoked.BypassBudgetEditing                             = true
					invoked.BypassStatusEdit       							= true
					invoked.LocalReleaseGlTransactionDetail 				= true
				include PerformBudgetEditsForVoids
				
				Status = Status.WriteOff
				WriteOffProcessed = true
				invoke Purge BankStatementReconciliation set

		CashLedgerTransactionPurge is a Set Action
			restricted
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmCashCode					is a CashCode
				PrmCashCodeGroup            is a CashCodeGroup
				PrmBankTransactionCode		is a BankTransactionCode
				PrmCbtBankInstType          is a BankInstType
				PrmTransactionCutOffDate    is Date
				
			Parameter Rules
				PrmCashCodeGroup
					if (PrmCashCodeGroup entered)
						constraint (PrmCashCode not entered)
							"CannotEnterBothCashCodeAndCashCodeGroup"		
					LocalCashCodeGroup	= PrmCashCodeGroup
			Instance Selection
				where (CashManagementGroup		= PrmCashManagementGroup				
				and  ((PrmCashCode                entered	
				and    CashCode					= PrmCashCode)
				or     PrmCashCode                not entered)
				and  ((PrmCashCodeGroup			  entered	
				and    CashCodeGroupDetailRel     exists)
				or     PrmCashCodeGroup			  not entered)
				and   (PrmBankTransactionCode     entered 
				and    CashLedgerTransaction.BankTransactionCode	= PrmBankTransactionCode)
				and    BankTransactionType      = PrmCbtBankInstType
				and    IssueDate               <= PrmTransactionCutOffDate
				and   (Status.Reconciled
				or     Status.Voided
			    or     Status.StopPayment)
				and   (PrmBankTransactionCode      entered 
				and    CashLedgerTransaction.BankTransactionCode = PrmBankTransactionCode))
				
			Action Rules
				Instance Rules
					invoke Purge CashLedgerGLDistributionsRel
					if (SourceCode = "AP"
					and (BankTransactionCode.BankTransactionType.CashPayment
					or   BankTransactionCode.BankTransactionType.BillOfExchangePayment))
						if(BankTransactionCode.BankTransactionType.CashPayment)
							if(!IsElectronicPayment)
								invoke Purge CashLedgerPayablesPaymentRel
							else
								if (SummaryOption.Summarized)
									if(CashLedgerPayablesPaymentsBySerialNbrRel exists
									and CashLedgerPayablesPaymentsBySerialNbrRel.PaymentDate <= PrmTransactionCutOffDate
									and CashLedgerPayablesPaymentsBySerialNbrRel.PayCurrency = Currency)
										invoke Purge CashLedgerPayablesPaymentsBySerialNbrRel
								else
									invoke Purge CashLedgerPayablesPaymentRel
						if(PayablesBillOfExchangeRel exists)
							if(PayablesBillOfExchangeDistributionRel exists)
								invoke Purge PayablesBillOfExchangeDistributionRel
							invoke Purge PayablesBillOfExchangeRel
					invoke Purge CashLedgerReconciliationAdjustmentRel
					invoke Purge
				
		Purge is a Purge Action
			restricted
			
		FinalRelease is an Instance Action 
			default label is untranslatable
			restricted	
			Entrance Rules
			Action Rules
				BudgetEditProcessing = BudgetEditProcessing.NotInProcessing
				
				if (!AmendedDistributions)
					if (CashLedgerMassReleaseResult entered	
					and CashLedgerTransactionError set exists)
						invoke Delete CashLedgerTransactionError set


					if (!ImportStatus entered
					and !CreateFromBatchType.EftExtractUpdate
					and !CreateFromBatchType.PaymentVoidStopPayment
					and !CreateFromBatchType.BOECashingUpdate
					and !CreateFromBatchType.BOEStatementUpdate
					and !CreateFromBatchType.EftPaymentCreation
					and !CreateFromBatchType.CashBatchReleaseReport
					and !CreateFromBatchType.BankPresentationCashingUpdate	
			        and !CreateFromBatchType.BankPresentationCashingUpdateWithRemitControl
			        and !CreateFromBatchType.ProcessDishonoredBillOfExchanges)
						LocalRunProgram = RunProgram.CashLedgerBankTransactionEntry
						include VerifyProcessingMonitorRule	
					if (SourceCode = "CB")
						if (not LocalBypassRules) 
   	    					include DistributionRoundingOffSet
							invoke Release GLEntryDistributionsRel
							include CreateOffsetDistribution
					if (!ReleasedFromImport

					and ImportStatus !entered    
					and !LocalBypassCashCodeUpd)
						include UpdateCashCodeBalances
						if (CashCode.SummarizeLedgerBalances)
							include ProcessCashLedgerConsolidation
	        		if (ImportStatus.Void
					or  ImportStatus.StaleDated)		
						make transition to Open
					else
						if ((BankTransactionCode.AutomaticReconciliation
						and  CreatedFromBankStatementLine !entered)
						or   IssuedBankAmount = 0
						or   ImportStatus.Reconcile)
							if (ImportStatus.Reconcile)									
								make transition to Open
								invoke Purge BankStatementReconciliation set
								invoke Open.ReconcileUpdate
							else
								invoke Unreleased.AutoReconcile
						else
							LastMaintenanceDate = current timestamp
							make transition to Open
				else
					if (CashManagementGroup.FinanceEnterpriseGroup.FundAccounting)     
                        include CreateamendedOffsetDistribution
					invoke Release GLEntryDistributionsUnreleasedRel
					
			Exit Rules
				if (LocalInterfaceAsPosted
				and !AmendedDistributions)
					invoke InterfaceAsPosted ReleasedDistributionsRel
				if (!BypassBudgetProcessing)	
					include ReleaseExitRules
				if (ImportStatus.Void
				and !AmendedDistributions)
					invoke Open.VoidUpdate
				if (ImportStatus.StaleDated  
				and !AmendedDistributions)
					if (ReconciliationData.ExchangeDate not entered)
						ReconciliationData.ExchangeDate = current corporate date
					LocalExchangeDate		= ReconciliationData.ExchangeDate
					LocalPostingDate		= ReconciliationData.ExchangeDate				
					invoke Open.ManualStaleDateUpdate
				if (AmendedDistributions)
					invoke UpdateAmendedDistributions
						invoked.PrmAmendedDistributions = false 

		ExecuteFrontEndSplitCashTransactions is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				invoke FrontEndSplitDistribtions CashLedgerGLDistribution in foreground
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashCode					= CashCode
					invoked.PrmCashLedgerSourceRecord	= CashLedgerSourceRecord
					invoked.PrmBankTransactionCode		= BankTransactionCode
					invoked.PrmTransactionIDNumber		= CashLedgerTransaction
					invoked.PrmDistributionType			= DistType.Entry

		FrontEndSplitTransactions is an Instance Action
			valid when(AllowFrontEndSplit)
			Action Rules
				invoke ExecuteFrontEndSplitCashTransactions

		DeleteFrontEndSplitTransactions is an Instance Action
			valid when(HasFrontEndSplitDistributions)
			Action Rules
				invoke DeleteFrontEndSplitDistribtions CashLedgerGLDistribution
					invoked.PrmCashManagementGroup		= CashManagementGroup
					invoked.PrmCashCode					= CashCode
					invoked.PrmCashLedgerSourceRecord	= CashLedgerSourceRecord
					invoked.PrmBankTransactionCode		= BankTransactionCode
					invoked.PrmTransactionIDNumber		= CashLedgerTransaction
					invoked.PrmDistributionType			= DistType.Entry


		DeleteReleaseErrorTransaction is a Delete Action	
			default label is untranslatable
			restricted
			Action Rules
				LocalActionOpenToVoid = true	
				include UpdateCashCodeBalances
				invoke DeleteReleaseErrorDistributions CashLedgerGLDistributionsRel				

		CreateEscheatmentNoticeIDMNoVendorLines is a Set Action
			restricted
			Parameters
				PrmEscheatmentHeader 	is an EscheatmentNoticeIDMHeader
				PrmBatchID			 	is an IDMPID
				PrmCashManagementGroup	is a CashManagementGroup
				PrmCashCode				is a CashCode
				PrmCompany				is a Company
				PrmDateRange			is a DateRange
				PrmBankTransactionCode	is a BankTransactionCode
				PrmProcessLevel			is a ProcessLevel
				PrmStatus				is AlphaUpper size 1
					States
						Open			value is blank
						StaleDated		value is "S"

			Instance Selection
				where (CashManagementGroup = PrmCashManagementGroup
				and CashCode = PrmCashCode
				and Company.OrigCompany = PrmCompany
				and IssueDate within PrmDateRange
				and ((PrmBankTransactionCode entered
				and BankTransactionCode = PrmBankTransactionCode)
				or PrmBankTransactionCode not entered)
				and ((PrmProcessLevel entered
				and PayablesCompanyVendorProcLevel.PayablesProcessLevel = PrmProcessLevel)
				or  PrmProcessLevel not entered)
				and (PayablesCompanyVendorProcLevel.Vendor not entered
				or Type.CashLedgerPayment)
				and ((PrmStatus.Open and Status = Status.Open)
				or (PrmStatus.StaleDated and Status = Status.StaleDated))
				and BankTransactionCode.BankTransactionType.CashPayment
				and BankTransactionCode.TransactionType.DebitTransaction
				and SummaryOption.NoSummary)
			
			Action Rules
				Instance Rules
					invoke Create EscheatmentNoticeIDMLines
						invoked.EscheatmentNoticeIDMHeader		= PrmEscheatmentHeader
						invoked.CashCode						= CashCode
						invoked.Company							= Company.OrigCompany
						invoked.Status 							= "P" 
						invoked.CashLedgerTransaction			= CashLedgerTransaction
						invoked.BankTransactionCode				= BankTransactionCode
						invoked.CashLedgerSourceRecord			= CashLedgerSourceRecord
						invoked.BatchID							= PrmBatchID
		
		CreateBatchApproval is a Set Action   
			Parameters
				PrmCashManagementGroup			is a CashManagementGroup
				PrmCashLedgerTransactionGroup	is a CashLedgerTransaction group
				PrmCashManagementAccount		is a CashManagementAccount
				PrmCashCode						is a CashCode
				PrmBankTransactionCode			is a BankTransactionCode
				PrmGeneralLedgerSourceCode		is a GeneralLedgerEvent
					default label is "SourceCode"
				PrmDateRange					is a DateRange
				PrmSearchAmountRange			is a SearchAmountRange	
				PrmApprovalCode					is a ApprovalCode
				PrmCommentText					is a CommentText
				PrmAutoApprove					is Boolean
				PrmSubmitForApproval			is Boolean
				PrmCashLedgerBatchApproval		is a CashLedgerBatchApproval
				
			Parameter Rules
				PrmCashManagementGroup
					required
				PrmApprovalCode
					if (!PrmCashManagementGroup.CashLedgerTransactionApprovalRequired
					or  PrmCashManagementGroup.ApprovalCodesNotUsedForCashTransactions)
						cannot be entered
					if (PrmSubmitForApproval
					and !PrmCashManagementGroup.ApprovalCodesNotUsedForCashTransactions)
						required
							"ApprovalCodeIsRequired"
					constraint (!PrmApprovalCode.ApprovalCodeUsesMaximumAmounts)
						"CannotSelectApprovalCodesSetUpForNonBatchedCashLedgerPayments"
				PrmAutoApprove
					if (PrmAutoApprove)
						constraint (!PrmSubmitForApproval)
							"CannotSelectBothAutoApproveAndSubmitForApproval"
				PrmSubmitForApproval
					if (!PrmCashManagementGroup.CashLedgerTransactionApprovalRequired)
						constraint (!PrmSubmitForApproval)
							"SubmitForApprovalValidOnlyWhenReceiptApprovalIsRequired"
							
			Local Fields
				LocalCashLedgerBatchApproval is a CashLedgerBatchApproval view
				
			Instance Selection
				where  (PrmCashManagementGroup		= CashManagementGroup
				and   ((PrmCashLedgerTransactionGroup 	entered
	            and	    CashLedgerTransaction	within PrmCashLedgerTransactionGroup)
	            or	    PrmCashLedgerTransactionGroup 	!entered)
	            and   ((PrmCashManagementAccount 	entered
	            and	    PrmCashManagementAccount	= CashManagementAccount)
	            or	    PrmCashManagementAccount 	!entered)
				and   ((PrmCashCode					entered
	            and	    PrmCashCode					= CashCode)
	            or	    PrmCashCode 				!entered)
				and   ((PrmBankTransactionCode		entered
	            and	    PrmBankTransactionCode		= CashLedgerTransaction.BankTransactionCode)
	            or	    PrmBankTransactionCode 		!entered)
				and   ((PrmGeneralLedgerSourceCode	entered
	            and	    PrmGeneralLedgerSourceCode	= GeneralLedgerEvent)
	            or	    PrmGeneralLedgerSourceCode 	!entered)
				and   ((PrmDateRange				entered
	            and	    IssueDate within PrmDateRange)
	            or	    PrmDateRange			 	!entered)
				and   ((PrmSearchAmountRange		entered
	            and	    IssuedBankAmount within PrmSearchAmountRange)
	            or	    PrmSearchAmountRange	 	!entered)
	            and     Status.Unreleased
				and     !BudgetEditInProgress			
	            and     !ImportInProcess)
	            
	        Action Rules							
				Empty Set Rules
				
				Set Rules
					Entrance Rules
						initialize LocalCashLedgerBatchApproval
						if (PrmCashLedgerBatchApproval	entered)
							LocalCashLedgerBatchApproval	= PrmCashLedgerBatchApproval
						else
							invoke Create CashLedgerBatchApproval
								assign result to LocalCashLedgerBatchApproval
	    						invoked.CashManagementGroup			= PrmCashManagementGroup
	    						invoked.BatchApprovalType			= 4 
	    						invoked.CashLedgerTransactionGroup	= PrmCashLedgerTransactionGroup
	    						invoked.CashManagementAccount			= PrmCashManagementAccount
								invoked.CashCode					= PrmCashCode
								invoked.BankTransactionCode			= PrmBankTransactionCode
	        					invoked.GeneralLedgerSourceCode		= GeneralLedgerEvent
								invoked.DateRange					= PrmDateRange
								invoked.SearchAmountRange			= PrmSearchAmountRange
								invoked.CommentText					= PrmCommentText
								invoked.ApprovalCode				= PrmApprovalCode
								invoked.AutoApprove					= PrmAutoApprove
								
					Exit Rules
						if (PrmSubmitForApproval)
							invoke Open.SubmitForApproval LocalCashLedgerBatchApproval.CashLedgerBatchApproval
								invoked.PrmApprovalCode	= PrmApprovalCode
								
				Instance Rules
			    	if (IssuedBankAmount = AppliedDistributionBankAmount) 
			        	CashLedgerBatchApproval	= LocalCashLedgerBatchApproval.CashLedgerBatchApproval
						if (PrmAutoApprove)
							invoke Unreleased.Release
						else
							if (PrmCashManagementGroup.CashLedgerTransactionApprovalRequired)
								make transition to PendingApproval
		
		
		RemoveFromDeletedBatch is an Instance Action			
			default label is untranslatable
			restricted
			Action Rules
				initialize CashLedgerBatchApproval
				make transition to Unreleased	  

		UploadToIDM is an Instance Action 
			valid when (ValidForIDMUpload)
			Action Rules
				if (VoidStopPayAttachment.ValidForIDMUpload)
					include IDM.MoveAttachmentsToIDM
						replace AttachmentField   with VoidStopPayAttachment

				if (TransactionAttachment.ValidForIDMUpload)
					include IDM.MoveAttachmentsToIDM
						replace AttachmentField   with TransactionAttachment


									
		MoveAttachmentsToIDM is a Set Action
			restricted
			Instance Selection
				where (VoidStopPayAttachment.IsLocal
				or	 TransactionAttachment.IsLocal)

			Accumulators
				InstanceCount

			Action Rules
				Instance Rules
					increment InstanceCount	

					if (VoidStopPayAttachment.IsLocal)
						include IDM.MoveAttachmentsToIDM
							replace AttachmentField   with VoidStopPayAttachment

					if (TransactionAttachment.IsLocal)
						include IDM.MoveAttachmentsToIDM
							replace AttachmentField   with TransactionAttachment			

					commit transaction

					if (InstanceCount = config.IDM_MOVE_ATTACHMENTS_LIMIT)
						end set action instance loop
			        			
