PhysicalInventoryFreeze is a BusinessClass
    owned by ic
    prefix is ICF
    classic name is ICFREEZE

    Ontology
        symbolic key is PhysicalInventoryFreeze
            classic set name is ICFSET1
            classic name for PhysicalInventoryFreeze.PhysicalInventoryFreezePage is PAGE
            classic name for PhysicalInventoryFreeze.PhysicalInventoryFreezeLine is LINE
            classic name for PhysicalInventorySelect is SELECT-ID

    Patterns
        implements StaticJava
        disable AuditIndex
		implements ContextualParent
		
    Persistent Fields

        InventoryLocation
            classic name is LOCATION
            default label is "Location"
        BinGroup
        Bin
        Item
        UpdateInProcess                 is Boolean
        CreateInProcess                 is Boolean
        OriginatingInterfaceRun			is a PhysicalInventoryInterfaceResult          
			delete ignored
        UnitOfMeasure
            classic name is UOM
            default label is "UOM"
        LotSerial              is an ItemSerialNumber  
        EnteredUOM             is a UnitOfMeasure
        EnteredCount           is an UnsignedQuantity
         	precision is Item.NumberOfDecimalsQuantity
        FreezeQuantity         is Decimal size 13.4
            classic name is FREEZE-QTY
        	precision is Item.NumberOfDecimalsQuantity
        CountQuantity          is an UnsignedQuantity
            classic name is COUNT-QTY
        	precision is Item.NumberOfDecimalsQuantity
        UnitCost               is an InternationalCost
			precision is Item.NumberOfDecimalsCost
        SecondaryQuantity      is an UnsignedQuantity
            classic name is SECONDARY-QTY
        	precision is Item.NumberOfDecimalsQuantity
        SecondaryCountQuantity
            classic name is SEC-COUNT-QTY
        	precision is Item.NumberOfDecimalsQuantity
        	default label is "SecondaryCount"
        SecondaryUOM           is a UnitOfMeasure
            classic name is SEC-UOM
        SecondaryUOMMultiplier is an UOMMultiplier
            classic name is SEC-UOM-MULT
        InventoryReasonCode
            classic name is REASON-CODE
        MovementClassX         is AlphaUpper size 1
            classic name is MOVEX-CLASS
            States
                Class1            value is "1"
                Class2            value is "2"
                Class3            value is "3"
                SpecialCycleCount value is "X"
        CountEntered           is Boolean
            classic name is STATUS
        OperatorID             is an Operator 
        	holds pii
        	restricted
        Lot                    is an ItemLot
        Sublot
        Serial                 is an ItemSerialNumber
        ItemLocation

    Local Fields
    
        LocalCatchweightPercentage					is Decimal size 5.2	
		LocalConvertQuantity						is like Quantity
        	precision is Item.NumberOfDecimalsQuantity
		LocalVariance								is Boolean 
		LocalInventoryReasonCode					is like InventoryReasonCode 
        UOMCalculation
        LocalVarianceQuantity                       is like Quantity
        	precision is Item.NumberOfDecimalsQuantity
        LocalFreezeQuantity                         is like Quantity
        	precision is Item.NumberOfDecimalsQuantity
        LocalUpgradeQuantity                        is like Quantity
        LocalFreezePage								is Numeric size 4
        LocalFreezeLine								is like PhysicalInventoryFreezeLine 
		LocalPhysicalInventoryFreeze				is like PhysicalInventoryFreeze
		LocalNewPhysicalInventoryFreeze				is a PhysicalInventoryFreeze view
		LocalMassFreeze								is Boolean
		LocalDeleteFreezeLine						is like PhysicalInventoryFreezeLine
		LocalLineCount								is Numeric size 4
		LocalInputUnitCost							is an UnitCost
		LocalOutputUnitCost							is an UnitCost
		LocalDoRounding						  		is Boolean
		LocalFromFreezeBin							is Boolean

    Transient Fields
    	TransientFromInterface                      is Boolean
    	TransientDisplayUOM							is a UnitOfMeasure
			derive value from DerivedUOM
		TransientDisplayCount						is Decimal size 13.4
			derive value from DerivedCount
			precision is Item.NumberOfDecimalsQuantity
		TransientUnitCost							is a UnitCost
			derive value from DerivedUnitCostInTransactionUOM
			precision is Item.NumberOfDecimalsCost

	Context Fields
		
		InventoryControlResult
		    	    
    Relations

        StockOnHandDetailsRel
            one-to-many relation to StockOnHandDetail
            Field Mapping uses symbolic key
                related.Company           						= Company
                related.InventoryLocation 						= InventoryLocation
                related.Item              						= Item
                
        StockOnHandDetailRel
            one-to-one relation to StockOnHandDetail
            Field Mapping uses Set3
                related.Company           						= Company
                related.InventoryLocation 						= InventoryLocation
                related.Item              						= Item
                related.StockOnHandDetail.Bin					= Bin
                related.StockOnHandDetail.UnitOfMeasure			= DerivedUnitOfMeasure
                related.StockOnHandDetail.Lot					= Lot
                related.StockOnHandDetail.Sublot				= Sublot
				
		DuplicatePhysicalInventoryFreezeRel		
        	one-to-many relation to PhysicalInventoryFreeze
        	Field Mapping uses Set2
        		related.Company			  									= Company
        		related.PhysicalInventorySelect 							= PhysicalInventorySelect
        		related.InventoryLocation									= InventoryLocation
        		related.Item												= Item
        		related.Bin                                                 = Bin
        		related.Lot													= Lot
        		related.Sublot												= Sublot 
        		related.Serial                                              = Serial
        		related.UnitOfMeasure										= EnteredUOM
        		
		FreezeRecordsForAnotherLocationRel
        	one-to-many relation to PhysicalInventoryFreeze
        	Field Mapping uses Set2
        		related.Company			  									= Company
        		related.PhysicalInventorySelect 							= PhysicalInventorySelect
    		Instance Selection
				where (related.InventoryLocation						   = InventoryLocation)
        		 
		TrackedItemUOMRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup    = Company.ItemGroup
				related.Item         = Item
			Instance Selection
				where (related.TrackedIn = true)           
		
		PhysicalInventoryAccuracyRel
        	one-to-one relation to PhysicalInventoryAccuracy
    		Field Mapping uses symbolic key
    			related.Company												= Company
    			related.InventoryLocation 									= InventoryLocation
    			related.PhysicalInventoryAccuracy.Year						= Company.CurrentYear
    			related.PhysicalInventoryAccuracy.Period					= Company.CurrentPeriod
    			related.PhysicalInventoryAccuracy.InventoryReasonCode 		= LocalInventoryReasonCode  
    			
    	ItemTransactionUnitOfMeasureRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup											= Company.ItemGroup
				related.Item												= Item
				related.UnitOfMeasure										= EnteredUOM

    	AlternateTrackedInItemUOMsRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup											= Company.ItemGroup
				related.Item												= Item
			Instance Selection
				where (related.TrackedIn)

		PhysicalInventoryTagsRel
			one-to-many relation to PhysicalInventoryTags
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PhysicalInventorySelect								= PhysicalInventorySelect
		
		InventoryControlResultErrorsRel
			one-to-many relation to InventoryControlResultError
			Field Mapping uses ByCompanyLocationItem
				related.InventoryControlResult						= InventoryControlResult
				related.ErrorCompany								= Company
				related.ErrorLocation								= InventoryLocation
				related.ErrorItem									= Item
				
		InventoryControlResultErrorsSet								is an InventoryControlResultError set
		
	
		ItemLocationRel
			one-to-one relation to ItemLocation
			Field Mapping uses symbolic key
				related.Company                         = Company
				related.InventoryLocation               = InventoryLocation
				related.Item                            = Item
						

		FreezeRecordForFreezePagesRel
			one-to-one relation to PhysicalInventoryFreeze
			Field Mapping uses symbolic key
				related.Company												= Company
				related.PhysicalInventorySelect								= PhysicalInventorySelect
				related.PhysicalInventoryFreeze.PhysicalInventoryFreezePage	= LocalFreezePage
				related.PhysicalInventoryFreeze.PhysicalInventoryFreezeLine	= LocalFreezeLine





		FreezeLinesForThisPageRel
        	one-to-many relation to PhysicalInventoryFreeze
        	Field Mapping uses ByPage
        		related.PhysicalInventorySelect 							= PhysicalInventorySelect
        		related.Company			  									= Company
        		related.PhysicalInventoryFreeze.PhysicalInventoryFreezePage	= PhysicalInventoryFreeze.PhysicalInventoryFreezePage
        		 
		PhysicalInventoryBinRel
			one-to-many relation to PhysicalInventoryBin
			Field Mapping uses symbolic key
				related.Company					= Company
				related.InventoryLocation		= InventoryLocation
				related.Bin						= Bin
			Instance Selection
				where (related.Active)

		PhysicalInventoryFreezeBinRel
			one-to-many relation to PhysicalInventoryFreezeBin
			delete cascades
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PhysicalInventorySelect			= PhysicalInventorySelect
				related.PhysicalInventoryFreeze			= PhysicalInventoryFreeze

		PhysicalInventoryFreezeHasBinsRel
			one-to-many relation to PhysicalInventoryFreezeBin
			delete cascades
			Field Mapping uses symbolic key
				related.Company							= Company
				related.PhysicalInventorySelect			= PhysicalInventorySelect
				related.PhysicalInventoryFreeze			= LocalPhysicalInventoryFreeze

		LocationItemUOMRel
			one-to-many relation to LocationItemUOM
			Field Mapping uses symbolic key
				related.Company  							= Company
				related.InventoryLocation 					= InventoryLocation
				related.Item								= Item
				related.UnitOfMeasure						= EnteredUOM

		MobileSupplyChainResourceAccessCompanyAccessRel
    		one-to-many relation to MobileSupplyChainResourceAccess
    		Field Mapping uses symbolic key
    			related.HROrganization					= actor.agent(Employee).HROrganization
    			related.MobileSupplyChainResource		= actor.agent(Employee).Employee
    			related.Company							= Company
    			related.MobileSupplyChainLocation					= blank

        MobileSupplyChainResourceAccessRel
    		one-to-many relation to MobileSupplyChainResourceAccess
    		Field Mapping uses symbolic key
    			related.HROrganization					= actor.agent(Employee).HROrganization
    			related.MobileSupplyChainResource		= actor.agent(Employee).Employee
    			related.Company							= Company
				related.MobileSupplyChainLocation		= InventoryLocation

		MobileSupplyChainResourceRel
			one-to-one relation to MobileSupplyChainResource
			Field Mapping uses symbolic key
				related.HROrganization 				= actor.agent(Employee).HROrganization
				related.MobileSupplyChainResource   = actor.agent(Employee).Employee


	Sets
		Set2
			indexed
			Sort Order
				Company
				PhysicalInventorySelect
				InventoryLocation
				Item
				Bin
				Lot
				Sublot
				Serial
				UnitOfMeasure
				PhysicalInventoryFreeze.PhysicalInventoryFreezePage
				PhysicalInventoryFreeze.PhysicalInventoryFreezeLine

		ByPage
			indexed
			Sort Order
				PhysicalInventorySelect
				Company
				PhysicalInventoryFreeze.PhysicalInventoryFreezePage
				PhysicalInventoryFreeze.PhysicalInventoryFreezeLine
								
		ByLine			
			indexed
			Sort Order
				PhysicalInventorySelect
				Company
				PhysicalInventoryFreeze.PhysicalInventoryFreezeLine
				PhysicalInventoryFreeze.PhysicalInventoryFreezePage

	Conditions
	
		IsTrackedInAndAlternateStockUOM
			restricted
			when (ItemTransactionUnitOfMeasureRel.TrackedIn
			and   ItemTransactionUnitOfMeasureRel.ItemUOM.UnitOfMeasure != Item.StockUOM) 
		
		IsTrackedInMultipleUOM
			restricted
			when (instance count of AlternateTrackedInItemUOMsRel > 1)
			
		NotEnteredInStockUOM
			restricted
			when (EnteredUOM != UnitOfMeasure)
		
		IsLotSerialAndBinTracked	
			restricted
			when (ItemLocation.LotTracked.LotRequiredAtReceipt
			or 	 ItemLocation.SerialTracked.SerialRequiredAtReceipt
			or   ItemLocation.BinTracked)
			
		IsLotAndSerialTracked
			restricted
			when (ItemLocation.LotTracked.LotRequiredAtReceipt
			or 	  ItemLocation.SerialTracked.SerialRequiredAtReceipt)
			
		IsLotOrBinTracked
			restricted
			when (ItemLocation.LotTracked.LotRequiredAtReceipt
			or 	  ItemLocation.BinTracked)
			
		IsOnlyBinTracked
			restricted
			when (!IsLotAndSerialTracked
			and   ItemLocation.BinTracked)
			
		IsNotBinTracked
			restricted
			when (!ItemLocation.BinTracked)
			
		IsPlainItem
			restricted
			when (!ItemLocation.BinTracked
			and   !ItemLocation.IsLotTracked
			and   !ItemLocation.IsSerialTracked)
		

		RecordExists
			restricted
			when (PhysicalInventoryFreeze exists)
			
		RecordNotExists
			restricted
			when (PhysicalInventoryFreeze not exists)	
			
		RecordExistsForBinTracked
			restricted
			when (RecordExists 
			and   ItemLocation.BinTracked)
		
		RecordNotExistsForBinTracked
			restricted
			when (RecordNotExists
			and   ItemLocation.BinTracked)

		RecordExistsForLotTracked
			restricted
			when (RecordExists 
			and   ItemLocation.IsLotTracked)
		
		RecordNotExistsForLotTracked
			restricted
			when (RecordNotExists
			and   ItemLocation.IsLotTracked)
			
		RecordExistsForSerialTracked
			restricted
			when (RecordExists 
			and   ItemLocation.IsSerialTracked)
		
		RecordNotExistsForSerialTracked
			restricted
			when (RecordNotExists
			and   ItemLocation.IsSerialTracked)
			
		RecordExistsForCatchWeightItem
			restricted
			when (RecordExists 
			and   Item.IsCatchWeightItem)
		
		RecordNotExistsForCatchWeightItem
			restricted
			when (RecordNotExists
			and   Item.IsCatchWeightItem)
			
		HasAnotherInventoryLocation
			restricted
			when (FreezeRecordsForAnotherLocationRel exists) 
			
		DisplayUnitCost
			restricted
			when (RecordNotExists 
			or not PhysicalInventorySelect.Status.SelectIDNotInUse)
			
		UnitCostEntered
			restricted
			when (UnitCost entered)

		AllowRandomCountsAndDelete
			restricted
			when (PhysicalInventorySelect.Status.SelectIDInUse
			or    PhysicalInventorySelect.Status.CountInProgress)
			
		AllowRandomCountsAndDeleteAndNotInterfaceAndNotFirstLine
			restricted
			when (AllowRandomCountsAndDelete
			and   !UpdateInProcess
			and   !CreateInProcess
			and   !FirstLineOfFreezePage)		

		
		AllowCreateFromInterface
			restricted
			when (PhysicalInventorySelect.SelectIDForInterface)
			
		VariancesExist
			restricted
			when (CountQuantity - FreezeQuantity !=0)

		VariancesExistAndReasonNotEntered
			restricted
			when (VariancesExist
			and   InventoryReasonCode !entered)
		
		BeyondCatchWeightVariance
			restricted
			when (IsCatchWeightItem
			and	  SecondaryCountQuantity entered and EnteredCount entered
			and   DerivedCatchWeightVariancePercent > Item.CatchWeightVariancePercent)

		HasUnequalTransactionAndStockUOM
			restricted
			when (UnitOfMeasure != Item.StockUOM)

		CountInTransactionUOM
			restricted
			when (PhysicalInventorySelect.CountInTransactionUnitOfMeasure)
		
		DisplayFreezeQuantity
			restricted
			when (PhysicalInventorySelect.InventoryControlResult.ParametersPhysicalInventoryCountSheets.PrintFreezeQuantityOnDocuments)

		EnterUnitOfMeasure
			restricted
			when (PhysicalInventorySelect.RequireUnitOfMeasure)
		
		HasReportExceptions
			restricted
			when (InventoryControlResultErrorsRel exists)

		FirstLineOfFreezePage
			restricted
			when (PhysicalInventoryFreeze.PhysicalInventoryFreezeLine = 1)
			
		IsCatchWeightItem
			restricted
			when (Item.IsCatchWeightItem)

		HasItemLocationStockUOM
			when (ItemLocation.HasItemLocationStockUOM)
						
		MobileLotEntered
			restricted
			when (ItemLocation.LotTracked.LotRequiredAtReceipt 
			and Lot entered)

		MobileSublotEntered
			restricted
			when (ItemLocation.LotTracked.LotRequiredAtReceipt
			and Sublot entered)

		MobileSerialEntered
			restricted
			when (ItemLocation.SerialTracked.SerialRequiredAtReceipt
			and Serial entered)

		MobileAlertVariance
			restricted
			when (CountEntered
			and DerivedVariance not = 0)

		HasPhysicalInventoryBins
			restricted
			when (PhysicalInventoryBinRel exists)

		HasPhysicalInventoryFreezeBins
			restricted
			when (PhysicalInventoryFreezeBinRel exists)
		

		IsAccessibleByMobileSupplyChainResource
        	restricted
        	when (MSCMGlobalLocationAccess or  MobileSupplyChainResourceAccessCompanyAccessRel exists or MobileSupplyChainResourceAccessRel exists)

		MSCMGlobalLocationAccess
			restricted
			when (MobileSupplyChainResourceRel.GlobalLocationAccess)


	Derived Fields
			
    	VarianceQuantity         				is a DerivedField
            type is like Quantity
            	precision is Item.NumberOfDecimalsQuantity
            return (CountQuantity  - FreezeQuantity) 
            
        SecondaryVarianceQuantity				is a DerivedField
        	type is like Quantity
        		precision is Item.NumberOfDecimalsQuantity
        	return (SecondaryCountQuantity  - SecondaryQuantity)
        
        DerivedVarianceQuantity                         is a DerivedField
        	type is Alpha size 20
        	default label is "Variance"


        	if (!CountEntered)
        		return NotCountedMessage
        	else
        	if (EnteredUOM = UnitOfMeasure)
        		return VarianceQuantity
        	else
        		initialize UOMCalculation
				if (ItemLocation.HasItemLocationStockUOM)
					UOMCalculation.InputUOM							= DerivedLocationStockUOM	
				else
					UOMCalculation.InputUOM							= Item.StockUOM
				UOMCalculation.InputQuantity						= VarianceQuantity
				UOMCalculation.InputToUOM							= EnteredUOM
				UOMCalculation.Method								= UOMCalculation.Method.ConvertToAlternate
				LocalVarianceQuantity  								= UOMCalculation.OutputQuantity	
        		return LocalVarianceQuantity	

		DerivedCatchWeightVariancePercent 		is a DerivedField
			type is Decimal size 5.2
			if (IsCatchWeightItem)		
				LocalConvertQuantity			= SecondaryCountQuantity * SecondaryUOMMultiplier	
				LocalCatchweightPercentage 		= (((EnteredCount - LocalConvertQuantity) / LocalConvertQuantity) * 100)
				if (LocalCatchweightPercentage < 0)
					LocalCatchweightPercentage = LocalCatchweightPercentage * -1
				return LocalCatchweightPercentage	
			
		NotCountedMessage is a MessageField
			restricted
			"NotCounted"
		
		DerivedFreezeQuantity                          is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (EnteredUOM = UnitOfMeasure)
        		return FreezeQuantity	
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM    	 = Item.StockUOM
				UOMCalculation.InputToUOM  	 = EnteredUOM
				UOMCalculation.InputQuantity = FreezeQuantity
				UOMCalculation.Method      	 = UOMCalculation.Method.ConvertToAlternate
				LocalFreezeQuantity			 = UOMCalculation.OutputQuantity
				return LocalFreezeQuantity

		DerivedTotalFreezeForPage 					 is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			return sum FreezeLinesForThisPageRel.DerivedFreezeQuantity
			
		ItemRepresentativeText is a MessageField			
			"<Item>_-_<Item.Description>"

		DerivedUpgradeQuantity                       is a DerivedField
			type is like Quantity
				precision is Item.NumberOfDecimalsQuantity
			if (Item.StockUOM = UnitOfMeasure)
        		return CountQuantity	
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM    	 = Item.StockUOM
				UOMCalculation.InputToUOM  	 = UnitOfMeasure
				UOMCalculation.InputQuantity = CountQuantity
				UOMCalculation.Method      	 = UOMCalculation.Method.ConvertToAlternate
				LocalUpgradeQuantity		 = UOMCalculation.OutputQuantity
				return LocalUpgradeQuantity
				
		DerivedUnitCostInTransactionUOM                              is a DerivedField
			type is like UnitCost
				precision is Item.NumberOfDecimalsCost
			if (Item.StockUOM = EnteredUOM) 
				return UnitCost
			else
				initialize UOMCalculation
				initialize LocalOutputUnitCost
				UOMCalculation.InputUOM							= Item.StockUOM
				UOMCalculation.InputToUOM						= EnteredUOM
				UOMCalculation.InputUnitCost					= UnitCost
				UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate
				UOMCalculation.DoRounding						= LocalDoRounding
				LocalOutputUnitCost								= UOMCalculation.OutputUnitCost				
				return LocalOutputUnitCost
		
		CatchWeightVarianceMessage										is a MessageField					
			restricted
			"CatchWeightQuantityOutsideTolerance"
		
		DerivedCatchWeightVariance										is a DerivedField
			type is Alpha size up to 200
			if (BeyondCatchWeightVariance)
				return CatchWeightVarianceMessage
			else
				return blank
	
		TrackedCount is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of TrackedItemUOMRel)
			
		DerivedUOM is a DerivedField
			type is like UnitOfMeasure
			restricted
			if (action type.Update)
				return blank
			else
				if (Item.IsCatchWeightItem)
					return SecondaryUOM
				else
					return UnitOfMeasure
				
		DerivedCount is a DerivedField
			type is Decimal size 13.4
			restricted
			if (action type.Update)
				return 0
			else
				if (Item.IsCatchWeightItem)
					return SecondaryCountQuantity
				else
					return CountQuantity
				
		DerivedVariance is a DerivedField
			type is like Quantity
			default label is "Variance"
			return VarianceQuantity
				
		DerivedUnderscore												is a StringField
			type is Alpha size 11
			"___________"

		DerivedUnderscore2												is a StringField
			type is Alpha size 20
			"____________________"

		DerivedUnderscore3												is a StringField
			type is Alpha size 4
			"____"

		DerivedUnderscore4												is a DerivedField
			type is Alpha size 11
			if (Item.IsCatchWeightItem)
				return "___________"
			else
				return blank

		SecondaryUOMPrint												is a DerivedField
			type is like UnitOfMeasure
			if (Item.IsCatchWeightItem)
				return Item.SecondaryUOM
			else
				return blank

		DerivedNoTitle													is a StringField
			type is Alpha size 5
			restricted
			"     "

		DerivedLotSublot												is a DerivedField
			type is Alpha size up to 27
			restricted
			if (Lot entered)
				if (Sublot entered)
					return DerivedLotSublotSerialLabel + Lot + "/" + Sublot
				else
					return DerivedLotSublotSerialLabel + Lot
			else
				return blank

		DerivedLotSublotSerial											is a DerivedField
			type is Alpha size up to 27
			if (Lot entered)
				if (Sublot entered)
					return DerivedLotSublot
				else
					return DerivedLotSublot
			else
			if (Serial entered)
				return DerivedLotSublotSerialLabel + Serial
			else
				return blank
				
		DerivedLotSublotSerialLabel										is a DerivedField
			type is Alpha size up to 10
			if (Lot entered)
				if (Sublot entered)
					return "Lot/sublot:"
				else
					return "Lot:"
			else
			if (Serial entered)
				return "Serial:"
			else
				return blank
				
		DerivedLotSublotSerialForList									is a DerivedField
			type is Alpha size up to 17
			if (Lot entered)
				if (Sublot entered)
					return Lot + "/" + Sublot
				else
					return Lot
			else
			if (Serial entered)
				return Serial
			else
				return blank


				



				
		DerivedItem is a DerivedField 
            type is Alpha size 179 
            default label is untranslatable:"Item/Description" 
            DerivedItem = Item 
            if (Item.Description entered) 
                DerivedItem += (Item.ItemGroup.FinanceEnterpriseGroup.NewLine + Item.Description) 
            return DerivedItem 	
            



				
		DerivedManufacturerNumber is a DerivedField 
            type is Alpha size 179 
            default label is untranslatable:"ManufacturerNumber/Description2" 
            DerivedManufacturerNumber = Item.ManufacturerNumber 
            if (Item.Description entered) 
                DerivedManufacturerNumber += (Item.ItemGroup.FinanceEnterpriseGroup.NewLine + Item.Description2) 
            return DerivedManufacturerNumber 	
            
		DerivedCompany is a DerivedField
            type is Alpha size up to 40
			DerivedCompany = "      Company: "
			DerivedCompany += InventoryControlResult.ParametersPhysicalInventoryCountSheets.InventoryCompany
			DerivedCompany += " - "
			DerivedCompany += InventoryControlResult.ParametersPhysicalInventoryCountSheets.InventoryCompany.Name
			return DerivedCompany
			
		DerivedLocation is a DerivedField
            type is Alpha size up to 40 
			DerivedLocation = "      Location: "
			DerivedLocation += (first FreezeLinesForThisPageRel.InventoryLocation)
			DerivedLocation += " - "
			DerivedLocation += (first FreezeLinesForThisPageRel.InventoryLocation.Name)
			return DerivedLocation
			
		DerivedSelectId is a DerivedField
            type is Alpha size up to 45 
			DerivedSelectId = "       Select Id: "
			DerivedSelectId += InventoryControlResult.ParametersPhysicalInventoryCountSheets.PhysicalInventorySelect
			DerivedSelectId += " - "
			DerivedSelectId += InventoryControlResult.ParametersPhysicalInventoryCountSheets.PhysicalInventorySelect.Description
			return DerivedSelectId
			
		DerivedCounter is a DerivedField
            type is Alpha size up to 30
			DerivedCounter = "      Counter:________________"
			return DerivedCounter
			
		DerivedPage is a DerivedField
            type is Alpha size up to 17
			DerivedPage = "      Page: "
			DerivedPage += PhysicalInventoryFreeze.PhysicalInventoryFreezePage
			return DerivedPage

		DerivedTotalPageCount is a DerivedField
			type is Alpha size up to 45 
			if (DisplayFreezeQuantity)
				DerivedTotalPageCount  = "      Total Page Count: "
				DerivedTotalPageCount += DerivedTotalFreezeForPage
				DerivedTotalPageCount += " - __________"
			else
				return blank

		DerivedLocationStockUOM											is a DerivedField 
			type is like UnitOfMeasure
			return ItemLocation.ItemLocationStockUOM.UnitOfMeasure

		DerivedLocationStockUOMMultiplier								is a DerivedField  
			type is like UOMMultiplier
			return ItemLocation.ItemLocationStockUOM.ItemUOM.UOMConversion
			
		DerivedUnitOfMeasure											is a DerivedField  
			type is like UnitOfMeasure
			if (HasItemLocationStockUOM)
				return Item.StockUOM
			else
				return UnitOfMeasure

		CountLabel is a LabelField
			"Count"

		UOMLabel is a LabelField
			"UOM"

		VarianceLabel is a LabelField
			"Variance"
			
	Rule Blocks
		
		UpdatePhysicalInventorySelectUnexplainedLines
			if (InventoryReasonCode not entered)
				if (Item.IsCatchWeightItem)
					if (SecondaryQuantity 	!= SecondaryCountQuantity				
					and FreezeQuantity 		!= CountQuantity)
						if (CountEntered)
							invoke UpdateFreezePageAndLine PhysicalInventorySelect
								invoked.PrmUnexplainedLines = -1
								


						else
							invoke UpdateFreezePageAndLine PhysicalInventorySelect
								invoked.PrmUnexplainedLines = 1
				else
					if (FreezeQuantity != CountQuantity)
						if (CountEntered)
							invoke UpdateFreezePageAndLine PhysicalInventorySelect
								invoked.PrmUnexplainedLines = -1


						else
							invoke UpdateFreezePageAndLine PhysicalInventorySelect
								invoked.PrmUnexplainedLines = 1  
												 
			
		ConversionOfQuantityAndUnitCostToStock
			initialize UOMCalculation
			UOMCalculation.InputUOM							= EnteredUOM
			UOMCalculation.InputToUOM						= Item.StockUOM

			UOMCalculation.InputUnitCost					= LocalInputUnitCost
			UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
			UOMCalculation.DoRounding						= LocalDoRounding

			LocalOutputUnitCost								= UOMCalculation.OutputUnitCost
		
		UpdateDetailsFromTransient
			if (Item.IsCatchWeightItem)
				if (SecondaryUOM not changed)
					SecondaryUOM = TransientDisplayUOM
				if (SecondaryCountQuantity not changed)
					SecondaryCountQuantity = TransientDisplayCount
			else
				if (UnitOfMeasure not changed)
					UnitOfMeasure = TransientDisplayUOM
				if (CountQuantity not changed)
					CountQuantity = TransientDisplayCount
			
			initialize TransientDisplayUOM
			initialize TransientDisplayCount

    Field Rules
					
    	InventoryLocation
            required
			cannot be changed					
			
		InventoryReasonCode
			if (Item.IsCatchWeightItem)
				if (SecondaryQuantity = SecondaryCountQuantity
				and FreezeQuantity    = CountQuantity)
					cannot be entered					
						"NoVarianceExists;DoNotEnterReasonCode;FreezeQuantityEqualsSecondaryCountQuantityForCatchWeightItem<Item>"   									
			else	
				if (FreezeQuantity = CountQuantity)
					cannot be entered					
						"NoVarianceExists;DoNotEnterReasonCode;FreezeQuantityEqualsCountQuantityForItem<Item>"   
			
		Item
			required															
			cannot be changed		
			
			constraint (Item exists)	
				"Item<Item>DoesNotExist"																		
														
			constraint (ItemLocation.InventoryTracked)
				"ItemMustBeTrackedAtItemLocation"																//"IC74.115"
				
		ItemLocation
			constraint (ItemLocation exists)
				"ItemLocationDoesNotExist"
		
		Bin
			if (ItemLocation.BinTracked)
				if (!PhysicalInventorySelect.FreezeZeroStockOnHand)
					required
			else
				cannot be entered
					"CannotEnterBin,ItemIsNotBinTracked"														//"IC74.ICIE.6"	
				
		Lot
			if (ItemLocation.LotTracked.LotRequiredAtReceipt)
				if (!PhysicalInventorySelect.FreezeZeroStockOnHand)
					required																						//"IC74.112/113"
			else
				cannot be entered
					"CannotEnterLot;ItemIsNotLotTracked"															//"IC74.123"
		Serial			
			if (ItemLocation.SerialTracked.SerialRequiredAtReceipt)
				if (!PhysicalInventorySelect.FreezeZeroStockOnHand)
					required																						//"IC74.112/113"
			else
				cannot be entered	
					"CannotEnterSerial;ItemIsNotSerialTracked"				  										//"IC74.123"
						
		EnteredCount
					
			if (ItemLocation.SerialTracked.SerialRequiredAtReceipt)
				constraint (EnteredCount = 1 
				or 			EnteredCount = 0)
					"SerialTrackedItem;CountQuantityMustBeOneOrZero"  
					
			if  (EnteredCount != old EnteredCount
			and !LocalFromFreezeBin)
				constraint (PhysicalInventoryFreezeBinRel not exists)
					"CannotEnterCountOnThisTab,_Use_Enter_Counts_By_Physical_Inventory_Bin"

			if (EnteredUOM = UnitOfMeasure)
				CountQuantity = EnteredCount
			else
				initialize UOMCalculation
				UOMCalculation.InputUOM								= EnteredUOM
				UOMCalculation.InputQuantity						= EnteredCount
				if (ItemLocation.HasItemLocationStockUOM)
					UOMCalculation.InputToUOM						= DerivedLocationStockUOM
					UOMCalculation.Method							= UOMCalculation.Method.ConvertToAlternate	
				else
					UOMCalculation.InputToUOM						= Item.StockUOM
					UOMCalculation.Method							= UOMCalculation.Method.ConvertToStock
				CountQuantity       								= UOMCalculation.OutputQuantity	
	
		SecondaryCountQuantity
			if (Item.IsCatchWeightItem)
				if (CountQuantity entered)                
					required
						"CountQuantityEntered;SecondaryCountQuantityShouldBeEntered"										
				else
					cannot be entered
						"CountQuantityNotEntered;SecondaryCountQuantityCannotBeEntered"								
			else																									
				cannot be entered					
					"NotACatchWeightItem;SecondaryCountQuantityCannotBeEntered"
					
			if (SecondaryVarianceQuantity entered)
				constraint (VarianceQuantity entered)
					"CountQuantityMustAlsoBeChangedWhenChangingSecondaryCountQuantity"
					
					
		FreezeQuantity
			if (not invoking action = "UpdateVarianceOnly")
				if (IsOnlyBinTracked 
				or  ItemLocation.LotTracked.LotRequiredAtReceipt)
					if (StockOnHandDetailRel exists)
						if (HasItemLocationStockUOM)
							default to StockOnHandDetailRel.StockOnHandQuantityInLocationStockUOM
						else
							default to StockOnHandDetailRel.StockOnHandQuantity

				if (ItemLocation.SerialTracked.SerialRequiredAtReceipt)
					if  (Serial exists
					and (Serial.Status.OnHand
					or   Serial.Status.Allocated
					or   Serial.Status.Hold))
						default to 1

				if (IsPlainItem)
					default to ItemLocation.DerivedStockOnHandQuantity
				
		EnteredUOM
			if (not PhysicalInventorySelect.RequireUnitOfMeasure)
				if (PhysicalInventorySelect.CountInTransactionUnitOfMeasure)
					if (Item.IsCatchWeightItem)
						default to Item.StockUOM
					else
					if (ItemLocation.DefaultTransactionUOM entered)
						default to ItemLocationRel.DefaultTransactionUOM
					else 
						default to ItemLocation.LocationItemUOMDefaultForInventoryTransactionsRel.UnitOfMeasure
						default to Item.DefaultTransactionUOM
				else
					default to DerivedLocationStockUOM
					default to Item.StockUOM
			else
			if (action type.Update)	
				required
					"MustEnterUnitOfMeasure;SelectIDRequiresUnitOfMeasure"
			else
			if (action type.Create	
			and !LocalMassFreeze)
				required
					"MustEnterUnitOfMeasure;SelectIDRequiresUnitOfMeasure"
			
			if (Item.IsCatchWeightItem)
				constraint (EnteredUOM = Item.StockUOM) 
					"MustUseTheItemStock_U\O\MForCatchWeightItems" 

			if (HasItemLocationStockUOM)
				constraint (LocationItemUOMRel.OKForTransaction)
					"<EnteredUOM>IsNotAValidLocationTransactionUnitOfMeasureForThisItem"
			else
				constraint (ItemTransactionUnitOfMeasureRel.OKForTransaction)
					"<EnteredUOM>IsNotAValidTransactionUnitOfMeasureForThisItem"

			if (TrackedCount > 1)
				required
					"MustEnterUnitOfMeasure;ItemHasAlternateTrackingUnitsOfMeasure"
		
		UnitOfMeasure
			if (action type.Update
			and Item.IsTrackedInAlternateUOM
			and ItemTransactionUnitOfMeasureRel.TrackedIn
			and not HasItemLocationStockUOM)
				default to EnteredUOM
			else	
				default to DerivedLocationStockUOM
				default to Item.StockUOM

			if (PhysicalInventorySelect.RequireUnitOfMeasure
			or  Company.RequireUnitOfMeasure)
				required
					"MustEnterUnitOfMeasure;SelectIDRequiresUnitOfMeasure"
			
		SecondaryUOM
			if (Item.IsCatchWeightItem)
				default to Item.SecondaryUOM
				
				constraint (SecondaryUOM = Item.SecondaryUOM) 
					"SecondaryUnitOfMeasureInvalid"        													
			else
				cannot be entered
				
		TransientUnitCost
			if (TransientUnitCost entered)
				LocalInputUnitCost 	= TransientUnitCost							
				include ConversionOfQuantityAndUnitCostToStock
				UnitCost		 	= LocalOutputUnitCost
		
		MovementClassX
			if (ItemLocation.SelectForSpecialCycleCount)
				default to MovementClassX.SpecialCycleCount 
				 
			default to	ItemLocation.MovementClass

	Actions

		Create is a Create Action
			restricted
			Entrance Rules
				LocalMassFreeze			= true
				
			Exit Rules

				if (PhysicalInventoryBinRel exists)
					invoke Create PhysicalInventoryFreezeBin
						invoked.Bin							= Bin
						fill in fields from PhysicalInventoryFreeze

					for each PhysicalInventoryBinRel
						invoke Create PhysicalInventoryFreezeBin
							invoked.PhysicalInventoryBin		= each.PhysicalInventoryBin
							fill in fields from PhysicalInventoryFreeze
				else
					if (PhysicalInventorySelect.CreatePhysicalInventoryFreezeBinRecords)
						invoke Create PhysicalInventoryFreezeBin
							fill in fields from PhysicalInventoryFreeze

				if (PhysicalInventorySelect.LastFreezeLine	> 14)					
					invoke FastUpdateLastFreezeLinePage PhysicalInventorySelect
					
		RandomCounts is a Create Action
			valid when (AllowRandomCountsAndDelete)

			Entrance Rules
				LocalMassFreeze			= false
				
			Action Rules
					       
				constraint (DuplicatePhysicalInventoryFreezeRel not exists)
					"FreezeRecordAlreadyExistsForInventoryLocation<InventoryLocation>InUpdate"

				
				if (ItemLocation.BinTracked)
					constraint (Bin entered)
						"BinIsRequired"
			
				if (ItemLocation.LotTracked.LotRequiredAtReceipt)
					constraint (Lot entered)
						"LotIsRequired"
				
				if (ItemLocation.SerialTracked.SerialRequiredAtReceipt)
					constraint (Serial entered)
						"SerialIsRequired"

				LocalFreezePage									= PhysicalInventorySelect.FreezePages
				LocalFreezeLine									= 1

				if (FreezeRecordForFreezePagesRel exists)



					if (!FreezeRecordForFreezePagesRel.InventoryLocation	= InventoryLocation)  

						invoke UpdateFreezePageAndLine PhysicalInventorySelect	
							invoked.PrmFreezePages 	    					= 1
							invoked.PrmInitializeManualLineNumber			= true 
					else


					if (!PhysicalInventorySelect.LastManualLineNumber entered)				

						invoke UpdateFreezePageAndLine PhysicalInventorySelect	
							invoked.PrmFreezePages 	    					= 1
							invoked.PrmInitializeManualLineNumber			= true 

				invoke CreateFreezePageAndLine PhysicalInventorySelect


			   	PhysicalInventoryFreeze.PhysicalInventoryFreezePage  		= PhysicalInventorySelect.FreezePages

					   	

				invoke UpdateFreezePageAndLine PhysicalInventorySelect
					invoked.PrmEnteredLines	= 1

				CountEntered = true
				
			   	invoke UpdateFrozenForPhysicalInventory ItemLocation
			   		invoked.PrmFrozenForPhysicalInventory 					= true
			   		invoked.PrmFreezeDate									= current corporate date
			
			Exit Rules
				invoke UpdateSelectIDStatus PhysicalInventorySelect	

		CreateFromInterface is a Create Action 
			restricted

			Entrance Rules
				LocalMassFreeze			= false
				
			Action Rules
					       
				constraint (DuplicatePhysicalInventoryFreezeRel not exists)
					"FreezeRecordAlreadyExistsForInventoryLocation<InventoryLocation>InUpdate"

				
				LocalFreezePage									= PhysicalInventorySelect.FreezePages
				LocalFreezeLine									= 1

				if (FreezeRecordForFreezePagesRel exists)



					if (!FreezeRecordForFreezePagesRel.InventoryLocation	= InventoryLocation)  

						invoke UpdateFreezePageAndLine PhysicalInventorySelect	
							invoked.PrmFreezePages 	    					= 1
							invoked.PrmInitializeManualLineNumber			= true 
					else


					if (!PhysicalInventorySelect.LastManualLineNumber entered)				

						invoke UpdateFreezePageAndLine PhysicalInventorySelect	
							invoked.PrmFreezePages 	    					= 1
							invoked.PrmInitializeManualLineNumber			= true 

				invoke CreateFreezePageAndLine PhysicalInventorySelect

			   	PhysicalInventoryFreeze.PhysicalInventoryFreezePage  		= PhysicalInventorySelect.FreezePages

					   	

				invoke UpdateFreezePageAndLine PhysicalInventorySelect
					invoked.PrmEnteredLines	= 1

				CountEntered = true
				
			   	invoke UpdateFrozenForPhysicalInventory ItemLocation
			   		invoked.PrmFrozenForPhysicalInventory 					= true
			   		invoked.PrmFreezeDate									= current corporate date
			
			Exit Rules
				invoke UpdateSelectIDStatus PhysicalInventorySelect	
		
		CreateFromDelete is a Create Action
			restricted

		Update is an Update Action
			valid when (AllowRandomCountsAndDelete)
			
			Action Rules
				if (!TransientFromInterface)
					constraint (!UpdateInProcess and !CreateInProcess)
						"CannotUpdateFreezeRecord;RecordIsBeingProcessedFromInterface"
				
				if (EnteredCount entered)
					if (ItemLocation.BinTracked)
						constraint (Bin entered)
							"BinIsRequired;CreateNewFreezeRecordToEnterQuantityAndBin"
				
					if (ItemLocation.LotTracked.LotRequiredAtReceipt)
						constraint (Lot entered)
							"LotIsRequired;CreateNewFreezeRecordToEnterQuantityAndLot"
					
					if (ItemLocation.SerialTracked.SerialRequiredAtReceipt)
						constraint (Serial entered)
							"SerialIsRequired;CreateNewFreezeRecordToEnterQuantityAndSerial"
				else
					if  (old EnteredCount > 0
					and !LocalFromFreezeBin)
						constraint (PhysicalInventoryFreezeBinRel not exists)
							"CannotEnterCountOnThisTab,_Use_Enter_Counts_By_Physical_Inventory_Bin"


					
				include UpdateDetailsFromTransient
				
				if (!CountEntered)
					invoke UpdateFreezePageAndLine PhysicalInventorySelect
						invoked.PrmEnteredLines	= 1
						
				CountEntered = true
			
			Exit Rules
				invoke UpdateSelectIDStatus PhysicalInventorySelect		
						
		FastUpdate is an Update Action
			restricted
			bypass field rules
						
		UpdateVarianceOnly   is an Update Action
			valid when (PhysicalInventorySelect.Status.SelectIDUpdated)
			Action Rules
				include UpdateDetailsFromTransient
		
		UpdateVarianceReasons		is an Instance Action
			valid when (PhysicalInventorySelect.Status.SelectIDUpdated)

			Action Rules
				constraint (PhysicalInventorySelect.Status.SelectIDUpdated)
					"UpdateVarianceReasonsIsNotAValidActionForStatus<PhysicalInventorySelect.Status>" 
					
				LocalInventoryReasonCode = old  InventoryReasonCode

				if (InventoryReasonCode	changed
				and InventoryReasonCode != old  InventoryReasonCode)

					invoke UpdatePhysicalInventoryAccuracy PhysicalInventoryAccuracyRel
						if (MovementClassX.Class1)
		        			invoked.PrmCountMovementClass1Items					   = -1
		        			if (FreezeQuantity != CountQuantity)
		        				invoked.PrmErrorsMovementClass1Items               = -1
		        		else
		        		if (MovementClassX.Class2)
		        			invoked.PrmCountMovementClass2Items					   = -1
		        			if (FreezeQuantity != CountQuantity)
		        				invoked.PrmErrorsMovementClass2Items               = -1
		        		else
		        		if (MovementClassX.Class3)
		        			invoked.PrmCountMovementClass3Items					   = -1
		        			if (FreezeQuantity != CountQuantity)
		        				invoked.PrmErrorsMovementClass3Items               = -1
		        		else
		        		if (MovementClassX.SpecialCycleCount)
		        			invoked.PrmCountSpecialMovementClassItems			   = -1
		        			if (FreezeQuantity != CountQuantity)
		        				invoked.PrmErrorsSpecialMovementClassItems         = -1

					LocalInventoryReasonCode =  InventoryReasonCode
					if (PhysicalInventoryAccuracyRel exists)
						invoke UpdatePhysicalInventoryAccuracy PhysicalInventoryAccuracyRel
							if (MovementClassX.Class1)
			        			invoked.PrmCountMovementClass1Items					   = 1
			        			if (FreezeQuantity != CountQuantity)
			        				invoked.PrmErrorsMovementClass1Items               = 1
			        		else
			        		if (MovementClassX.Class2)
			        			invoked.PrmCountMovementClass2Items					   = 1
			        			if (FreezeQuantity != CountQuantity)
			        				invoked.PrmErrorsMovementClass2Items               = 1
			        		else
			        		if (MovementClassX.Class3)
			        			invoked.PrmCountMovementClass3Items					   = 1
			        			if (FreezeQuantity != CountQuantity)
			        				invoked.PrmErrorsMovementClass3Items               = 1
			        		else
			        		if (MovementClassX.SpecialCycleCount)
			        			invoked.PrmCountSpecialMovementClassItems			   = 1
			        			if (FreezeQuantity != CountQuantity)
			        				invoked.PrmErrorsSpecialMovementClassItems         = 1
					else
						invoke Create PhysicalInventoryAccuracy
							fill in fields from this instance
							invoked.PhysicalInventoryAccuracy.Year               	= Company.CurrentYear
		            		invoked.PhysicalInventoryAccuracy.Period 				= Company.CurrentPeriod
		            		invoked.PhysicalInventoryAccuracy.InventoryReasonCode	= InventoryReasonCode 
		            		if (MovementClassX.Class1)
		            			invoked.CountMovementClass1Items					= 1
		            			if (FreezeQuantity != CountQuantity)
		            				invoked.ErrorsMovementClass1Items               = 1
		            		else
		            		if (MovementClassX.Class2)
		            			invoked.CountMovementClass2Items					= 1
		            			if (FreezeQuantity != CountQuantity)
		            				invoked.ErrorsMovementClass2Items               = 1
		            		else
		            		if (MovementClassX.Class3)
		            			invoked.CountMovementClass3Items					= 1
		            			if (FreezeQuantity != CountQuantity)
		            				invoked.ErrorsMovementClass3Items               = 1
		            		else
		            		if (MovementClassX.SpecialCycleCount)
		            			invoked.CountSpecialMovementClassItems				= 1
		            			if (FreezeQuantity != CountQuantity)
		            				invoked.ErrorsSpecialMovementClassItems         = 1			

					if (InventoryReasonCode not entered)
						increment PhysicalInventorySelect.UnexplainedLines			
					
		Delete is a Delete Action
			valid when (AllowRandomCountsAndDelete)
			
			Entrance Rules
			
				LocalDeleteFreezeLine		= PhysicalInventoryFreeze.PhysicalInventoryFreezeLine
				LocalLineCount				= instance count of FreezeLinesForThisPageRel
					
				if (CountEntered)  
					invoke UpdateFreezePageAndLine PhysicalInventorySelect
						invoked.PrmEnteredLines = -1
						
					if (InventoryReasonCode not entered)
						if (Item.IsCatchWeightItem)
							if (SecondaryQuantity 	!= SecondaryCountQuantity				
							and FreezeQuantity 		!= CountQuantity)
								invoke UpdateFreezePageAndLine PhysicalInventorySelect
									invoked.PrmUnexplainedLines = -1 
						else
							if (FreezeQuantity != CountQuantity)
								invoke UpdateFreezePageAndLine PhysicalInventorySelect
									invoked.PrmUnexplainedLines = -1  
				
				invoke UpdateFreezePageAndLine PhysicalInventorySelect
					invoked.PrmFreezeLines = -1 		

						
				if (ItemLocation.LotTracked.LotRequiredAtReceipt)
					if (StockOnHandDetailRel exists
					and StockOnHandDetailRel.FrozenForPhysicalInventory)
						invoke UpdateFromPhysicalInventoryFreeze StockOnHandDetailRel
							invoked.PrmFrozenForPhysicalInventory = false
							
				invoke UpdateFrozenForPhysicalInventory ItemLocation
					invoked.PrmFrozenForPhysicalInventory = false
								
			Exit Rules
				invoke UpdateSelectIDStatus PhysicalInventorySelect
				


				if (LocalDeleteFreezeLine = 1)
					if (LocalLineCount > 1)
						LocalFreezePage		= first FreezeLinesForThisPageRel.PhysicalInventoryFreeze.PhysicalInventoryFreezePage
						LocalFreezeLine		= first FreezeLinesForThisPageRel.PhysicalInventoryFreeze.PhysicalInventoryFreezeLine
						LocalPhysicalInventoryFreeze	= first FreezeLinesForThisPageRel.PhysicalInventoryFreeze

						invoke CreateFromDelete PhysicalInventoryFreeze
							assign result to LocalNewPhysicalInventoryFreeze
							fill in fields from first FreezeLinesForThisPageRel
								except invoked.PhysicalInventoryFreeze.PhysicalInventoryFreezeLine
							invoked.PhysicalInventoryFreeze.PhysicalInventoryFreezeLine		= 1
						if (PhysicalInventoryFreezeHasBinsRel exists)
							for each PhysicalInventoryFreezeHasBinsRel
								invoke CreateFromDelete PhysicalInventoryFreezeBin
									fill in fields from each
									invoked.PhysicalInventoryFreezeBin.PhysicalInventoryFreeze	= LocalNewPhysicalInventoryFreeze.PhysicalInventoryFreeze

						invoke DeleteFreezeLine FreezeRecordForFreezePagesRel
									
		DeleteFreezeLine is a Delete Action
			restricted
							
		Purge is a Purge Action
			restricted
							
		Release is a Set Action
			restricted

			
			Parameters
				PrmCompany								is an InventoryCompany
				PrmPhysicalInventorySelect       		is a PhysicalInventorySelect

			Parameter Rules
				PrmCompany
					required
				PrmPhysicalInventorySelect
					required
					confirmation required	
						"AllFreezeLinesNotMarkedAsCountedWillBeMarkedAsCounted;Proceed?"
					
			Sort Order
				Company
				PhysicalInventorySelect
				PhysicalInventoryFreeze.PhysicalInventoryFreezePage
				PhysicalInventoryFreeze.PhysicalInventoryFreezeLine

			Instance Selection
				where (Company = PrmCompany
				and    PhysicalInventorySelect = PrmPhysicalInventorySelect
				and    !CountEntered)

			Action Rules
				Instance Rules
					CountEntered	= true
								
					invoke UpdateEnteredLinesByBatch PhysicalInventorySelect
						invoked.PrmEnteredLines	= 1
					


		DeleteFreezeRecords is a Set Action
			restricted
			completion message is "DeleteOfFreezeRecordsIsComplete.FreezeRecordsDeleted:<LocalDeleteCount>"
			
			Parameters
				PrmCompany							is an InventoryCompany
				PrmPhysicalInventorySelect			is a PhysicalInventorySelect
					default label is "SelectI\D"
				PrmDoNotSendNotification			is Boolean
				PrmActorGroup						is an ActorGroup
				
			Parameter Rules
				PrmCompany
					required
				PrmPhysicalInventorySelect
					required
					confirmation required
						"AllFreezeLinesForPhysicalInventorySelect<PrmPhysicalInventorySelect>WillBeDeleted;Proceed?"
			
		    Local Fields
				LocalDeleteCount							is Numeric size 9
				LocalActor									is an Actor
        
			Sort Order
				Company
				PhysicalInventorySelect
				PhysicalInventoryFreeze.PhysicalInventoryFreezePage
				PhysicalInventoryFreeze.PhysicalInventoryFreezeLine

			Instance Selection
				where (Company = PrmCompany
				and    PhysicalInventorySelect = PrmPhysicalInventorySelect)

			Action Rules
				Empty Set Rules
					invoke ResetFreezePageAndLine PrmPhysicalInventorySelect

					if (!PrmDoNotSendNotification)
						if (PrmActorGroup entered)
							send notification
								to PrmActorGroup
								description is "DeleteOfFreezeRecordsIsComplete.NoFreezeRecordsDeleted."
								priority is high
								detail is "DeleteOfFreezeRecordsIsComplete.NoFreezeRecordsDeleted."
						else			   								
							LocalActor	= actor
							send notification
								to LocalActor
								description is "DeleteOfFreezeRecordsIsComplete.NoFreezeRecordsDeleted."
								priority is high
								detail is "DeleteOfFreezeRecordsIsComplete.NoFreezeRecordsDeleted."
				
				Set Rules
					Entrance Rules
						LocalActor	= actor
					Exit Rules
						if (!PrmDoNotSendNotification)
							if (PrmActorGroup entered)
								send notification
									to PrmActorGroup
									description is "DeleteOfFreezeRecordsIsCompleteForSelectId<PrmPhysicalInventorySelect>.FreezeRecordsDeleted:<LocalDeleteCount>"
									priority is high
									detail is "DeleteOfFreezeRecordsIsCompleteForSelectId<PrmPhysicalInventorySelect>.FreezeRecordsDeleted:<LocalDeleteCount>"
							else			   								
								send notification
									to LocalActor
									description is "DeleteOfFreezeRecordsIsCompleteForSelectId<PrmPhysicalInventorySelect>.FreezeRecordsDeleted:<LocalDeleteCount>"
									priority is high
									detail is "DeleteOfFreezeRecordsIsCompleteForSelectId<PrmPhysicalInventorySelect>.FreezeRecordsDeleted:<LocalDeleteCount>"
							
				PhysicalInventorySelect Set Rules
					Entrance Rules
						invoke Delete PhysicalInventoryTagsRel 
					
					Exit Rules
						invoke ResetFreezePageAndLine PrmPhysicalInventorySelect
							
				Instance Rules

					invoke UpdateFrozenForPhysicalInventory ItemLocation
						initialize invoked.PrmFrozenForPhysicalInventory
						

					invoke UpdateFromPhysicalInventoryFreeze StockOnHandDetailRel
						initialize invoked.PrmFrozenForPhysicalInventory
						
					invoke DeleteFreezeLine
					LocalDeleteCount						+= 1
									
		CountSheetTags is a Set Action	
			restricted
			completion message is "CountSheetTagsIsComplete."

			Parameters
				ParametersPhysicalInventoryCountSheets
				PrmItemGroup						is an ItemGroup
				PrmInventoryControlResult			is an InventoryControlResult
				
		    Local Fields
				SetLocalInventoryCompany						is an InventoryCompany
				SetLocalPhysicalInventorySelect					is a PhysicalInventorySelect
				SetLocalItem1									is like Item
				SetLocalItem2									is like Item
				SetLocalItem3									is like Item
				SetLocalItemFreeze1								is a PhysicalInventoryFreeze
				SetLocalItemFreeze2								is a PhysicalInventoryFreeze
				SetLocalItemFreeze3								is a PhysicalInventoryFreeze
								
			Sort Order
				Company
				PhysicalInventorySelect
				InventoryLocation
				Item
				UnitOfMeasure
				Lot
				Sublot
				Bin
				
			Instance Selection
				where (Company = ParametersPhysicalInventoryCountSheets.InventoryCompany
				and    PhysicalInventorySelect = ParametersPhysicalInventoryCountSheets.PhysicalInventorySelect)
				
			Action Rules
			
				Company Set Rules
					Entrance Rules
						SetLocalInventoryCompany					= Company
						
				PhysicalInventorySelect Set Rules
					Entrance Rules
						SetLocalPhysicalInventorySelect				= PhysicalInventorySelect
						
						if (ParametersPhysicalInventoryCountSheets.PrintTags)
							initialize SetLocalItem1
							initialize SetLocalItem2
							initialize SetLocalItem3
							initialize SetLocalItemFreeze1
							initialize SetLocalItemFreeze2
							initialize SetLocalItemFreeze3
							invoke Delete PhysicalInventoryTagsRel
						
					Exit Rules
						if (ParametersPhysicalInventoryCountSheets.PrintTags)
							if (SetLocalItem1 entered)
								invoke Create PhysicalInventoryTags
									invoked.Company						= ParametersPhysicalInventoryCountSheets.InventoryCompany
									invoked.PhysicalInventorySelect		= ParametersPhysicalInventoryCountSheets.PhysicalInventorySelect
									invoked.Item1Freeze					= SetLocalItemFreeze1
									invoked.Item2Freeze					= SetLocalItemFreeze2
									invoked.Item3Freeze					= SetLocalItemFreeze3
						
				Instance Rules
						if (ParametersPhysicalInventoryCountSheets.PrintTags)
							if (!SetLocalItem1 entered)
								SetLocalItem1							= Item
								SetLocalItemFreeze1						= PhysicalInventoryFreeze
							else
							if (!SetLocalItem2 entered)
								SetLocalItem2							= Item
								SetLocalItemFreeze2						= PhysicalInventoryFreeze
							else
							if (!SetLocalItem3 entered)
								SetLocalItem3							= Item
								SetLocalItemFreeze3						= PhysicalInventoryFreeze
								invoke Create PhysicalInventoryTags
									invoked.Company						= Company
									invoked.PhysicalInventorySelect		= PhysicalInventorySelect
									invoked.Item1Freeze					= SetLocalItemFreeze1
									invoked.Item2Freeze					= SetLocalItemFreeze2
									invoked.Item3Freeze					= SetLocalItemFreeze3
								initialize SetLocalItem1
								initialize SetLocalItem2				        		
								initialize SetLocalItem3
								initialize SetLocalItemFreeze1
								initialize SetLocalItemFreeze2				        		
								initialize SetLocalItemFreeze3
							else
								initialize SetLocalItem1
								initialize SetLocalItem2				        		
								initialize SetLocalItem3
								initialize SetLocalItemFreeze1
								initialize SetLocalItemFreeze2				        		
								initialize SetLocalItemFreeze3
									
