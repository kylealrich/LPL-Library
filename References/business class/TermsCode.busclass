TermsCode is a BusinessClass
    owned by te
    prefix is TMS
    classic name is TERMS

    Ontology
        symbolic key is TermsCode
            classic set name is TMSSET1
            classic name is TERMS-CD

    Patterns
        implements StaticJava
        disable AuditIndex
        implements BODId

    Persistent Fields

        Description           is a DescX2InTerms
            classic name is DESC
        DiscountDueMonth      is Numeric size 2
            classic name is DISC-DUE-MNTH
        CutOffDay             is Numeric size 2
        ProxDays              is a ProxDayX2InTerms
            classic name is PROX-DAY
        NetDueEOM             is Boolean
            classic name is EOM-INDIC
        FinalDueDay           is Numeric size 2
        FirstNetDays          is Numeric size 3
        FirstFrom             is AlphaUpper size 1
            States
                LastDiscountDateCalculated value is "D"
                InvoiceDate                value is "I"
        FirstNetDay           is Numeric size 2
        FirstNetMonth         is AlphaUpper size 2
            classic name is FIRST-NET-MO
            States
                January   value is "01"
                February  value is "02"
                March     value is "03"
                April     value is "04"
                May       value is "05"
                June      value is "06"
                July      value is "07"
                August    value is "08"
                September value is "09"
                October   value is "10"
                November  value is "11"
                December  value is "12"
                M1        value is "M1"
                M2        value is "M2"
                M3        value is "M3"
                M4        value is "M4"
                M5        value is "M5"
                M6        value is "M6"
                M7        value is "M7"
                M8        value is "M8"
                M9        value is "M9"
        FirstPercent          is Percent size 7.5
        TotalNumberOfPayments is Numeric size 2
            classic name is TOTAL-NBR-PMTS
        IncrementByGroup
            classic name for IncrementByGroup.DaysIncrement is DAYS-INCR
            classic name for IncrementByGroup.MonthsIncrement is MONTH-INCR
        FixedDayOfMonth       is a FixedDaysMoX5InTerms
            classic name is FIXED-DAYS-MO
        FixedDayOfWeek        is a FixedDaysWkX2InTerms
            classic name is FIXED-DAYS-WK
        AdjustmentDays        is Numeric size 2
            classic name is ADJUST-DAYS
        Anticipation          is Boolean
        ProcessType           is AlphaUpper size 1
            default label is "TermsType"
            classic name is PROC-INDIC
            States
                Net             value is "N"
                Prox            value is "P"
                Multiple		value is "M"
                FixedDays       value is "F"
                Split           value is "S"
                Prepayment      value is "C"
        Active
            classic name is ACTIVE-STATUS


        TermsDiscountArray
            classic name for TermsDiscountArray.TermsDiscountGroup.DiscountPercent is DISC-PCT
            classic name for TermsDiscountArray.TermsDiscountGroup.MonthOfDiscount is DISC-MONTH
            classic name for TermsDiscountArray.TermsDiscountGroup.DayOfDiscount is DISC-DAY
            classic name for TermsDiscountArray.TermsDiscountGroup.DaysToCalcDiscount is DISCOUNT-DAY
        TermsSplitArray
		DiscountFromTransactionDate is Boolean  

	Attach Rules
		if (not BypassRuleForTheseFiles)
			constraint (Active)
				"TermsCodeIsNotActive"

	Local Fields
		I1							is Numeric 1
		I2							is Numeric 1
		I3							is Numeric 1
		I4							is Numeric 1
		Z1							is Numeric 1
		Z2							is Numeric 1
		LocalMonthCounter			is Numeric 1
		LocalDiscountEntered		is Numeric 1
		LocalDiscountFlag			is Boolean
		LocalDueDay					is Numeric 5
		LocalNetFlag				is Numeric 5
		LocalDaysFlag				is Numeric 5
		LastDiscount				is Numeric 3
		LocalNetMonth				is AlphaUpper size 2
		LocalFirstMonth				is AlphaUpper size 2
		LocalSecondMonth			is AlphaUpper size 2
		LocalThirdMonth				is AlphaUpper size 2
		LocalLocalNetMonth			is Numeric 1
		LocalFirstNetMonth			is Numeric 1
		TempTrigger 				is Alpha 1

		CalculateTerms

		LocalTestField 				is Numeric size 2
		ActionCode
		LocalBODCurrentTimeStamp	is a BODCurrentTimeStamp
		LocalNativeLPLBODTrigger  	is Boolean				
		NewBODTracker  				is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker	is Numeric 15
		Error            			is Boolean
	    ErrorMessage     			is Alpha 300
		LocalBODTrigger				is Boolean
		LocalConfigurationParameter		is Alpha size up to 200
		
	Context Fields
		FSMInboundBODTracker

	Transient Fields
		TransientFirstNetDays 		is Numeric size 3
			derive value from FirstNetDays
		TransientNetDays			is Numeric size 3
		TransientDueDays			is Numeric size 3
		
    Derived Fields

        Desc1 is an ArrayValueField
			type is like Description

            Description.Desc[1]

        Desc2 is an ArrayValueField
			type is like Description
            restricted
            Description.Desc[2]

		CountLocalNetMonthDays  is a ComputeField
			type is Numeric 5	
			restricted
			(28 * TermsSplitArray.TermsSplitGroup[1].SplitMoForw)
			
		CalcDueDay			is a ComputeField
			type is Numeric 5
			restricted
			(31 * TermsSplitArray.TermsSplitGroup[1].SplitMoForw)	
			

		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "appProdline"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		BODVariationID is a DerivedField
			type is Alpha 25
			restricted
			return bod id.VariationID
			
		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 20
			restricted
			DerivedBODCurrentTimeStamp = system current timestamp
			return DerivedBODCurrentTimeStamp
			
		DerivedBODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 30
			restricted
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"
		
		DerivedBODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Create or ActionCode.Create)
				return "Add"
			else
			if(action type.Update or action type.Delete)
				return "Replace"
			else
				return ""
				
		DerivedLastupdateBy is a DerivedField
			type is Alpha size 60
			restricted
			return update stamp.actor
			
		DerivedBODUpdateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			DerivedBODUpdateTimeStamp = update stamp.timestamp
			return DerivedBODUpdateTimeStamp
		
		DerivedBODFormattedUpdateTimeStamp is a DerivedField
			type is Alpha size 30
			restricted
			return DerivedBODUpdateTimeStamp[1:4] + "-" + DerivedBODUpdateTimeStamp[5:6] + "-" + DerivedBODUpdateTimeStamp[7:8] + "T" + DerivedBODUpdateTimeStamp[9:10] + ":" + DerivedBODUpdateTimeStamp[11:12] + ":" + DerivedBODUpdateTimeStamp[13:14] + "Z"
			
		DerivedDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			return FinanceEnterpriseGroup + DerivedDelimiter + TermsCode
		
		DerivedBODRevision is a DerivedField
			type is Alpha 25
			restricted
			return ""
				
		DerivedBODFormattedId is a DerivedField
			type is Alpha 100
			restricted
			return 	"infor-nid:" + DerivedTenantID + ":" + ":"  + ":" + DerivedDocumentID + ":" + DerivedBODRevision +"?CodeDefinition&verb=Sync&TrackerID="+LocalFSMInboundBODTracker
			
		DerivedBODStatusCode is a DerivedField
			type is Alpha 10
			restricted
			if (Active)
				return "Open"
			else
				return "Deleted"
			
		DerivedTermsDiscountDay is a DerivedField
			type is Numeric size 2
			restricted
			return 	TermsDiscountArray.TermsDiscountGroup[1].DayOfDiscount
			
		DerivedTermsDiscountMonth is a DerivedField
			type is Alpha size 20
			restricted
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.January)
				return "January"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.February)
				return "February"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.February)
				return "February"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.March)
				return "March"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.April)
				return "April"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.May)
				return "May"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.June)
				return "June"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.July)
				return "July"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.August)
				return "August"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.September)
				return "September"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.October)
				return "October"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.November)
				return "November"
			else 
			if(TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount.February)
				return "December"
			else
				return TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount
				
		DerivedTermsDiscountPercent is a DerivedField
			type is Numeric 4 
			restricted
			return TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent*100

		DerivedProxDay is a DerivedField
			type is Numeric 2
			restricted
			return ProxDays.ProxDay[1]
			
		DerivedFixedDaysofMonth is a DerivedField
			type is Numeric 2
			restricted
			return FixedDayOfMonth.FixedDaysMo[1]
			
		DerivedFirstFromType is a DerivedField
			type is Alpha 30
			restricted
			if(FirstFrom.LastDiscountDateCalculated)
				return "LastDiscountDateCalculated"
			else 
			if(FirstFrom.InvoiceDate)
				return "InvoiceDate"
		
		ProcessTypeNetXML is a DerivedField
			type is XMLDocument
	        restricted
	        ProcessTypeNetXML = template.IONSyncCodeDefination_TermsCode_ProcessTypeNet_ST document for this instance
	        
	    ProcessTypeProxXML is a DerivedField
			type is XMLDocument
	        restricted
	        ProcessTypeProxXML = template.IONSyncCodeDefination_TermsCode_ProcessTypeProx_ST document for this instance
	        
	   	ProcessTypeMultipleXML is a DerivedField
			type is XMLDocument
	        restricted
	        ProcessTypeMultipleXML = template.IONSyncCodeDefination_TermsCode_ProcessTypeMultiple_ST document for this instance
	        
	    ProcessTypeFixedDaysXML is a DerivedField
			type is XMLDocument
	        restricted
	        ProcessTypeFixedDaysXML = template.IONSyncCodeDefination_TermsCode_ProcessTypeFixedDays_ST document for this instance
	        
	    ProcesssTypeXML is a DerivedField
	    	type is XMLDocument
	        restricted
	        if(ProcessType.Net)
	        	return ProcessTypeNetXML
	        else 
	        if(ProcessType.Prox)
	        	return ProcessTypeProxXML
	        else 
	        if(ProcessType.Multiple)
	        	return ProcessTypeMultipleXML
	        else 
	        if(ProcessType.FixedDays)	
	        	return ProcessTypeFixedDaysXML
	        	
	    TermsCodeXML is a DerivedField
	    	type is XMLDocument
	        restricted
	        TermsCodeXML = template.IONSyncCodeDefination_TermsCode_TermsCode_ST document for this instance
		
		CreateMessage is a LabelField
			restricted
			"CreateTermsCode"
		
		FormLabel is a LabelField
			restricted
			"TermsCode:_"

		RepresentativeText is a StringField
			type is Text
			default label is "TermsCode"
			TermsCode " - " Description
		
		DerivedTermsCodeTitle	is a DerivedField
			type is Alpha size up to 132
			default label is "TermsCode"
			return RepresentativeText

		DerivedFormTitle is a DerivedField
			type is MessageField
			restricted
			if (RecordExists)
				return FormLabel + DerivedTermsCodeTitle
			else
				return CreateMessage
				
    Conditions
		RecordExists
			restricted
			when (TermsCode exists)

        IsCodTerms
        	restricted
            when (ProcessType.Prepayment)

        IsFixedTerms
        	restricted
            when (ProcessType.FixedDays)

        IsMultPayTerms
        	restricted
            when (ProcessType.Multiple)

        IsNetTerms
        	restricted
            when (ProcessType.Net)

        IsProxTerms
        	restricted
            when (ProcessType.Prox)

        IsSplitTerms
        	restricted
            when (ProcessType.Split)

		CanNotChange
			restricted
			when (TermsCode exists)

		IsNetTermsWithNoDiscounts
			restricted
			when (IsNetTerms
			and   TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent not entered
			and   TermsDiscountArray.TermsDiscountGroup[1].DaysToCalcDiscount not entered)

		BypassRuleForTheseFiles
			restricted
			when  (parentcontext.name = "PurchaseOrderEDIOutput")

        IsMultiplePaymentFixedTerms  
        	restricted
            when (ProcessType.FixedDays
			and   TotalNumberOfPayments > 1)


	Relations
		
		TermsCodePreviewRel
			one-to-many relation to TermsCodePreview
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.TermsCode				= TermsCode
				

		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
		
		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "CodeDefinition"
            	related.FSMBODConfiguration.Direction 	= 1

        FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker
		

	Sets

		Set2
			indexed
			Sort Order
				FinanceEnterpriseGroup
				ProcessType
				TermsCode

	Field Rules

        CutOffDay
            constraint (CutOffDay >= 1
            and   CutOffDay <= 31)
                "InvoiceCutoffDayValueMustBeBetween1And31"

        FirstNetDay
            constraint (FirstNetDay >= 1
            and   FirstNetDay <= 31)
                "DaysValueMustBeBetween1And31"

		ProcessType
			required
			cannot be changed
							
		Description
			required
			constraint (Description.Desc[1] entered)
				"FirstDescriptionLineRequired"                             
		
		IncrementByGroup
			if (IsFixedTerms
			or  IsMultPayTerms)
				required
					"EitherDaysOrMonthsRequired"                              
					
        ProxDays
            constraint (ProxDays >= 1
            and   ProxDays <= 31)
                "ProxDaysValueMustBeBetween1And30"		
	



	
	SubType IsNetTerms Field Rules
		
		FirstNetDays
			if (FirstNetDays entered
			and TermsSplitArray.TermsSplitGroup[1].SplitMoForw entered)
				cannot be entered
					"CannotEnterNetDaysAndNetMonths"                          

			if (!FirstNetDays entered
			and !TermsSplitArray.TermsSplitGroup[1].SplitMoForw entered
			and FixedDayOfWeek.FixedDaysWk[1] not entered)
				required
					"MustEnterNetDaysOrNetMonths"                             

		TransientNetDays					
			if (FixedDayOfWeek.FixedDaysWk[1] entered)
				cannot be entered
					"CannotEnterNetDaysIfDaysOfWeekEntered"

		FirstNetMonth
			if (FixedDayOfWeek.FixedDaysWk[1] entered)
				cannot be entered
					"CannotEnterNetMonthIfDaysOfWeekEntered"
					
		TransientFirstNetDays
			if (FixedDayOfWeek.FixedDaysWk[1] entered)
				required
					"DueDaysRequiredIfDaysOfWeekEntered"
				
		TransientDueDays
			if (FixedDayOfWeek.FixedDaysWk[1] entered)
				required
					"DueDaysRequiredIfDaysOfWeekEntered"
					
		FixedDayOfWeek
			if (TransientFirstNetDays entered)
				constraint (FixedDayOfWeek.FixedDaysWk[1] entered)
					"DaysOfWeekIsRequiredIfDueDaysEntered"









	SubType IsMultPayTerms Field Rules					
		
		TotalNumberOfPayments
			required
				"TotalNumberOfPaymentsFieldIsRequired"                      	
		 						 						 	
	 	FirstNetDays
	 		if (FirstNetDays entered
	 		and FirstFrom entered)
	 			if (FirstNetDay entered
	 			or  FirstNetMonth entered)
	 				cannot be entered
	 					"CannotEnterDueDaysAndDueDate"                          
	 			 					
	 		if (FirstNetDays not entered
	 		and FirstFrom not entered
	 		and FirstNetDay not entered
	 		and FirstNetMonth not entered)		
				required
					"DateOfFirstPaymentRequired"                              
					
			if (FirstNetDays not entered
			and FirstFrom entered)
				required
					"NumberOfDaysRequired"                                    

		FirstFrom
			if (FirstNetDays entered
			and FirstFrom not entered)
				required													  
									
		FirstNetDay
			if (FirstNetDay not entered
			and FirstNetMonth entered)
				required
					"DueDateRequired"                                         
				
			if (FirstNetDay entered
			and FirstNetMonth not entered)
				cannot be entered
					"MonthRequired"                                           
	 	
	 	FirstNetMonth
			if (CutOffDay entered)
				constraint (FirstNetMonth.M1
				or FirstNetMonth.M2
				or FirstNetMonth.M3
				or FirstNetMonth.M4
				or FirstNetMonth.M5
				or FirstNetMonth.M6
				or FirstNetMonth.M7
				or FirstNetMonth.M8
				or FirstNetMonth.M9)
					"CannotEnterSpecificMonths;InvoiceCutoffDayEntered"      
	 			 	 			
			if (FirstNetMonth[1] = "M")
				if (TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount entered) 			
					LocalNetMonth = TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount
					LocalDiscountEntered = 1
				if (TermsDiscountArray.TermsDiscountGroup[2].MonthOfDiscount entered)			
					LocalNetMonth = TermsDiscountArray.TermsDiscountGroup[2].MonthOfDiscount
					LocalDiscountEntered = 2
				if (TermsDiscountArray.TermsDiscountGroup[3].MonthOfDiscount entered)			
					LocalNetMonth = TermsDiscountArray.TermsDiscountGroup[3].MonthOfDiscount
					LocalDiscountEntered = 3
				if (LocalNetMonth[1] = "M")
					LocalFirstNetMonth = FirstNetMonth[2]
					LocalLocalNetMonth = LocalNetMonth[2]
					if (LocalFirstNetMonth = LocalLocalNetMonth)
						if (FirstNetDay !> TermsDiscountArray.TermsDiscountGroup[LocalDiscountEntered].DayOfDiscount)
							cannot be entered

								"FirstPaymentDateMustBeGreaterThanLastDiscoutDate"
					else
						if (LocalFirstNetMonth < LocalLocalNetMonth)
							cannot be entered

								"FirstPaymentDateMustBeGreaterThanLastDiscoutDate"			
		
		CutOffDay
			if (CutOffDay entered)
				constraint (IncrementByGroup.MonthsIncrement entered)
					"InvoiceCutoffDayEnteredIncrementByMonths"                       
					
		TermsDiscountArray
			I2 = 1
			while (I2 < 3)
				if (TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount entered)
					LocalFirstMonth = TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount
					if (TermsDiscountArray.TermsDiscountGroup[I2 + 1].MonthOfDiscount entered)
						LocalSecondMonth = TermsDiscountArray.TermsDiscountGroup[I2 + 1].MonthOfDiscount
						if (LocalFirstMonth[1] = "M")
							if (LocalSecondMonth[1] != "M")
								cannot be entered
									"CannotMix_\M9And_99InDiscountDueMonths"              
							else
								constraint (TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount < TermsDiscountArray.TermsDiscountGroup[I2 + 1].MonthOfDiscount)
									"MonthsMustBeInAscendingOrder"	                       
						if (LocalFirstMonth[1] != "M")
							if (LocalSecondMonth[1] = "M")
								cannot be entered
									"CannotMix_\M9And_99InDiscountDueMonths"              
							else
								constraint (TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount < TermsDiscountArray.TermsDiscountGroup[I2 + 1].MonthOfDiscount)
									"MonthsMustBeInAscendingOrder"                        
									
					if (I2 = 1)
						if (TermsDiscountArray.TermsDiscountGroup[I2 + 2].MonthOfDiscount entered)
							LocalThirdMonth = TermsDiscountArray.TermsDiscountGroup[I2 + 2].MonthOfDiscount
							if (LocalFirstMonth[1] = "M")
								if (LocalThirdMonth[1] != "M")
									cannot be entered
										"CannotMix_\M9And_99InDiscountDueMonths"             
								else
									constraint (TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount < TermsDiscountArray.TermsDiscountGroup[I2 + 2].MonthOfDiscount)
										"MonthsMustBeInAscendingOrder"                       
							if (LocalFirstMonth[1] != "M")
								if (LocalThirdMonth[1] = "M")
									cannot be entered
										"CannotMix_\M9And_99InDiscountDueMonths"             
								else
									constraint (TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount < TermsDiscountArray.TermsDiscountGroup[I2 + 2].MonthOfDiscount)
										"MonthsMustBeInAscendingOrder"                       
					
					if (CutOffDay entered)
						constraint (TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount.M1
						or TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount.M2
						or TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount.M3
						or TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount.M4
						or TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount.M5
						or TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount.M6
						or TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount.M7
						or TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount.M8
						or TermsDiscountArray.TermsDiscountGroup[I2].MonthOfDiscount.M9)
							"CannotEnterSpecificMonths;InvoiceCutoffDayEntered"            
							
				I2 += 1	

			I1 = 1
			while (I1 < 4)
				if (CutOffDay entered)
					if (FirstFrom = "I")
						constraint (TermsDiscountArray.TermsDiscountGroup[I1].DiscountPercent not entered)

							"Due_\D\ays_\F\romValueMustBe_\L\ast_\D\iscount_\D\ate_\C\alculatedIf_\I\nvoice_\C\utoff_\D\ayAnd_\D\iscountEntered"
											
					constraint (TermsDiscountArray.TermsDiscountGroup[I1].DaysToCalcDiscount not entered)
						"Invoice_\C\utoff_\D\ayInvalid;_\D\iscount_\D\ue_\D\aysEntered"             
						LocalDiscountFlag = false
						
				if (TermsDiscountArray.TermsDiscountGroup[I1].DaysToCalcDiscount entered
				and TermsDiscountArray.TermsDiscountGroup[I1].DayOfDiscount entered)
					cannot be entered
						"CannotMixDiscountDueDaysAndDueDates"                    
				
				I1 += 1

			if (TermsDiscountArray.TermsDiscountGroup[1].DaysToCalcDiscount not entered)
				if (TermsDiscountArray.TermsDiscountGroup[2].DaysToCalcDiscount entered
				or  TermsDiscountArray.TermsDiscountGroup[3].DaysToCalcDiscount entered)			
					cannot be entered
						"CannotEnterDataOutOfSequence"                           
			
			if (TermsDiscountArray.TermsDiscountGroup[1].DayOfDiscount not entered
			or  TermsDiscountArray.TermsDiscountGroup[1].MonthOfDiscount not entered)
				if (TermsDiscountArray.TermsDiscountGroup[2].DayOfDiscount entered
				or  TermsDiscountArray.TermsDiscountGroup[2].MonthOfDiscount entered
				or  TermsDiscountArray.TermsDiscountGroup[3].DayOfDiscount entered
				or  TermsDiscountArray.TermsDiscountGroup[3].MonthOfDiscount entered)			
					cannot be entered
						"CannotEnterDataOutOfSequence"                           
			
			if (TermsDiscountArray.TermsDiscountGroup[3].DayOfDiscount entered
			or  TermsDiscountArray.TermsDiscountGroup[3].MonthOfDiscount entered)
				if (TermsDiscountArray.TermsDiscountGroup[2].DayOfDiscount not entered
				or  TermsDiscountArray.TermsDiscountGroup[2].MonthOfDiscount not entered) 			
					cannot be entered
						"CannotEnterDataOutOfSequence"                           
										

			I3 = 1
			while (I3 < 4)
				if (TermsDiscountArray.TermsDiscountGroup[I3].DiscountPercent not entered
				and TermsDiscountArray.TermsDiscountGroup[I3].DaysToCalcDiscount not entered
				and TermsDiscountArray.TermsDiscountGroup[I3].DayOfDiscount not entered
				and TermsDiscountArray.TermsDiscountGroup[I3].MonthOfDiscount not entered)
					end while
				else
					LocalDiscountFlag = true
					if (TermsDiscountArray.TermsDiscountGroup[I3].DiscountPercent not entered)
						cannot be entered
							"DiscountPercentRequired"                               
							end while
					else
						if (TermsDiscountArray.TermsDiscountGroup[I3].DiscountPercent entered
						and TermsDiscountArray.TermsDiscountGroup[I3].DayOfDiscount not entered
						and FirstFrom = "D")
							cannot be entered
								"DiscountDateRequired;DueDateCalculatedFromDiscountDate"     
								end while
						else
							if (TermsDiscountArray.TermsDiscountGroup[I3].DiscountPercent entered)
								if (TermsDiscountArray.TermsDiscountGroup[I3].DaysToCalcDiscount not entered
								and TermsDiscountArray.TermsDiscountGroup[I3].DayOfDiscount not entered
								and TermsDiscountArray.TermsDiscountGroup[I3].MonthOfDiscount not entered)
									cannot be entered
										"Discount_\Due_\DaysOr_\DateIsRequired"              
										end while
								else
									if (TermsDiscountArray.TermsDiscountGroup[I3].DayOfDiscount entered
									and TermsDiscountArray.TermsDiscountGroup[I3].MonthOfDiscount not entered)
										cannot be entered
											"MonthRequired"                                     
											end while
									else
										if (TermsDiscountArray.TermsDiscountGroup[I3].DayOfDiscount not entered
										and TermsDiscountArray.TermsDiscountGroup[I3].MonthOfDiscount entered)
											cannot be entered
												"DayRequired"                                      
												end while
				if (I3 > 1)								
					if (TermsDiscountArray.TermsDiscountGroup[I3].DaysToCalcDiscount !> TermsDiscountArray.TermsDiscountGroup[I3 - 1].DaysToCalcDiscount
					and TermsDiscountArray.TermsDiscountGroup[I3].DaysToCalcDiscount entered)
						cannot be entered
							"DiscountDaysMustBeProgressive"                         
							end while
				
				I3 += 1
			
			if (LocalDiscountFlag = false
			and FirstFrom = "D")
				required
					"DiscountRequired"						                                  
			I4 = 1
			while (I4 < 4)
				if (TermsDiscountArray.TermsDiscountGroup[I4].DaysToCalcDiscount entered)
					LastDiscount = TermsDiscountArray.TermsDiscountGroup[I4].DaysToCalcDiscount
				I4 += 1
			if (TermsDiscountArray.TermsDiscountGroup.DaysToCalcDiscount entered
			and FirstNetDays entered
			and FirstFrom = "I"
			and FirstNetDays !> LastDiscount)
				cannot be entered

					"FirstPaymentDateMustBeGreaterThanLastDiscoutDate"
		
		NetDueEOM
			if (NetDueEOM)
				I1 = 2
				while (I1 < 4)
					if (TermsDiscountArray.TermsDiscountGroup[I1].MonthOfDiscount entered
					or  TermsDiscountArray.TermsDiscountGroup[I1].DaysToCalcDiscount entered
					or  TermsDiscountArray.TermsDiscountGroup[I1].DayOfDiscount entered
					or  TermsDiscountArray.TermsDiscountGroup[I1].DiscountPercent entered)
						cannot be entered

							"SplitDiscDatesCannotBeYWithMultDiscOptions"
					I1 += 1

				if (TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent not entered)
					cannot be entered
						"DiscountPercentRequired"                                
						









	SubType IsSplitTerms Field Rules

		TermsSplitArray
			required		
				"InvoiceDateRangeRequired"
			I1 = 1


























				
			I2 = 1
			I3 = 2
			while (I2 <=5)
				if (TermsSplitArray.TermsSplitGroup[I3].SplitBegDay not entered)
					I3 = 1
				TermsSplitArray.TermsSplitGroup[I2].SplitEndDay = TermsSplitArray.TermsSplitGroup[I3].SplitBegDay - 1
				if (TermsSplitArray.TermsSplitGroup[I2].SplitEndDay = 0)
					TermsSplitArray.TermsSplitGroup[I2].SplitEndDay = 31
				if (TermsSplitArray.TermsSplitGroup[I2].SplitBegDay not entered)
					initialize TermsSplitArray.TermsSplitGroup[I2].SplitEndDay
				I2 += 1
				I3 += 1
				if (I3 = 6)
					I3 = 1
			
			if (Description.Desc[1] entered)
				constraint (TermsSplitArray.TermsSplitGroup[1].SplitBegDay entered
				and TermsSplitArray.TermsSplitGroup[2].SplitBegDay entered)
					"MustEnterTwoOptions"                                     
						
			I4 = 1
			while (I4 < 6)
				if (TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent entered)
					if (TermsSplitArray.TermsSplitGroup[I4].SplitBegDay entered)
						constraint (TermsSplitArray.TermsSplitGroup[I4].SplitDiscDay entered)
							"DiscountPercentEntered;MustEnterDiscountDay"           
							end while
					if (TermsSplitArray.TermsSplitGroup[I4].SplitDiscDay entered)
						if (TermsSplitArray.TermsSplitGroup[I4].SplitDiscDay < TermsSplitArray.TermsSplitGroup[I4].SplitBegDay
						and TermsSplitArray.TermsSplitGroup[I4].SplitDiscDay < TermsSplitArray.TermsSplitGroup[I4].SplitEndDay)
							if (TermsSplitArray.TermsSplitGroup[I4].SplitEomFlag not entered)
								required
									"MonthsForwardMustEqual_1"                            
									end while						
				else
					if (TermsSplitArray.TermsSplitGroup[I4].SplitDiscDay entered)
						constraint (TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent entered)
							"DiscountPercentRequired"                               
							end while		
				
				I4 += 1

			Z1 = 1
			initialize LocalMonthCounter
			while (Z1 < 6)
				if (TermsSplitArray.TermsSplitGroup[Z1].SplitBegDay not entered
				and TermsSplitArray.TermsSplitGroup[Z1].SplitDiscDay not entered
				and TermsSplitArray.TermsSplitGroup[Z1].SplitNetDay not entered
				and TermsSplitArray.TermsSplitGroup[Z1].SplitEomFlag not entered
				and TermsSplitArray.TermsSplitGroup[Z1].SplitMoForw not entered)
					end while
					
				if (Z1 > 1)
					if (TermsSplitArray.TermsSplitGroup[Z1 - 1].SplitMoForw entered
					and TermsSplitArray.TermsSplitGroup[Z1].SplitBegDay entered)
						constraint (TermsSplitArray.TermsSplitGroup[Z1].SplitMoForw entered)
							"MonthsForwardMustEqual_1"                              
			
					if (TermsSplitArray.TermsSplitGroup[Z1].SplitBegDay entered
					and TermsSplitArray.TermsSplitGroup[Z1 - 1].SplitBegDay entered
					and TermsSplitArray.TermsSplitGroup[Z1].SplitBegDay < TermsSplitArray.TermsSplitGroup[Z1 - 1].SplitBegDay)
						LocalMonthCounter += 1
						if (LocalMonthCounter > 1)
							cannot be entered
								"DateRangeMayNotContainMoreThanTwoMonths"			           
				
					if (TermsSplitArray.TermsSplitGroup[Z1 - 1].SplitEomFlag entered
					and TermsSplitArray.TermsSplitGroup[Z1].SplitEomFlag entered)
						constraint (TermsSplitArray.TermsSplitGroup[Z1].SplitMoForw entered)
							"MonthsForwardMustEqual_1"                              
							
					if (TermsSplitArray.TermsSplitGroup[Z1].SplitNetDay entered
					and TermsSplitArray.TermsSplitGroup[Z1 - 1].SplitNetDay entered
					and TermsSplitArray.TermsSplitGroup[Z1].SplitMoForw = TermsSplitArray.TermsSplitGroup[Z1 - 1].SplitMoForw)
						constraint (TermsSplitArray.TermsSplitGroup[Z1].SplitNetDay > TermsSplitArray.TermsSplitGroup[Z1 - 1].SplitNetDay)
							"DueDatesMustBeProgressive"                             

					if (LocalMonthCounter = 1)
						constraint (TermsSplitArray.TermsSplitGroup[Z1].SplitBegDay < TermsSplitArray.TermsSplitGroup[1].SplitBegDay)
							"FromDateMustBeLessThanFirstDateEntered"					           
						
				if (TermsSplitArray.TermsSplitGroup[Z1].SplitNetDay entered
				or TermsSplitArray.TermsSplitGroup[Z1].SplitDiscDay entered
				or TermsSplitArray.TermsSplitGroup[Z1].SplitBegDay entered
				or TermsSplitArray.TermsSplitGroup[Z1].SplitEomFlag entered
				or TermsSplitArray.TermsSplitGroup[Z1].SplitMoForw entered)
					constraint (TermsSplitArray.TermsSplitGroup[Z1].SplitBegDay entered)
						"BeginningDateIsRequired"                                
						
				Z1 += 1
									
		FirstNetDays
		
			I1 = 1
			initialize LocalDueDay
			while (I1 <= 5)
				if (TermsSplitArray.TermsSplitGroup[I1].SplitNetDay entered	
				or	TermsSplitArray.TermsSplitGroup[I1].SplitEomFlag)
					if (FirstNetDays entered)
						cannot be entered

							"CannotEnterNetDueDays;OtherDueDateUsed"








				if (FirstNetDays entered)
					if (TermsSplitArray.TermsSplitGroup[I1].SplitBegDay not entered
					and TermsSplitArray.TermsSplitGroup[I1].SplitDiscDay not entered
					and TermsSplitArray.TermsSplitGroup[I1].SplitNetDay not entered
					and TermsSplitArray.TermsSplitGroup[I1].SplitEomFlag not entered
					and TermsSplitArray.TermsSplitGroup[I1].SplitMoForw not entered)
						end while									
					else
						if (TermsSplitArray.TermsSplitGroup[I1].SplitBegDay > TermsSplitArray.TermsSplitGroup[I1].SplitEndDay
						or 	TermsSplitArray.TermsSplitGroup[I1].SplitMoForw not entered)
							LocalDueDay = (TermsSplitArray.TermsSplitGroup[I1].SplitBegDay - 31 + TermsSplitArray.TermsSplitGroup[I1].SplitDiscDay)
						else
							LocalDueDay = TermsSplitArray.TermsSplitGroup[I1].SplitBegDay - TermsSplitArray.TermsSplitGroup[I1].SplitDiscDay
						constraint (LocalDueDay < FirstNetDays)

							"CalculatedDueDateNotGreaterThanLastDiscountDate"
				I1 += 1			










	SubType IsFixedTerms Field Rules
		
		TotalNumberOfPayments
			required
				"TotalNumberOfPaymentsFieldIsRequired"                                          
		
		FirstNetDays
			required
				"DaysBetweenInvoiceAndFirstDueDateFieldIsRequired"                                          
		
		IncrementByGroup
			if (IncrementByGroup.DaysIncrement not entered)
				required
					"Days_\B\etween_\P\aymentsFieldIsRequired"                                         

		FixedDayOfMonth
			I1 = 1
			while (I1 < 6)
				if (FixedDayOfMonth.FixedDaysMo[I1] entered)
					constraint (FixedDayOfMonth.FixedDaysMo[I1] >= 1
		            and   FixedDayOfMonth.FixedDaysMo[I1] <= 31)
		                "Days_\O\f_\M\onthValueMustBeBetween1And31"
                I1 += 1
			if (FixedDayOfWeek.FixedDaysWk[1] not entered)
				required
					"DaysOf_\MonthOr_\DaysOf_\WeekRequired" 

			if (FixedDayOfMonth.FixedDaysMo[1] entered)
				constraint (FixedDayOfWeek.FixedDaysWk[1] not entered)
					"CannotEnterBothDaysAndMonths" 

		AdjustmentDays
			if (FixedDayOfWeek.FixedDaysWk[1] entered
			and	FixedDayOfWeek.FixedDaysWk[2] entered
			and AdjustmentDays entered)
				LocalNetFlag = FixedDayOfWeek.FixedDaysWk[2] - FixedDayOfWeek.FixedDaysWk[1]
				if (AdjustmentDays !< LocalNetFlag)
					cannot be entered

						"AdjustmentDaysMustBeLessThanDifferenceBetweenDaysOfWeek"

			if (AdjustmentDays !< IncrementByGroup.DaysIncrement)
				cannot be entered

					"DaysForAdjustmentMustBeLessThanDaysBetweenPayments"												









				
	SubType IsProxTerms Field Rules
		
		CutOffDay
			required
				"InvoiceCutoffDayFieldIsRequired"                                          
				
		ProxDays						
			required
				"ProxDaysFieldIsRequired"                                          
	
		FirstNetDays
			if (FirstNetDay entered
			or 	NetDueEOM entered
			or 	TermsSplitArray.TermsSplitGroup[1].SplitMoForw entered)
				if (FirstNetDays entered
				or  FirstFrom entered)
					cannot be entered
						"CannotDefineMultipleDueDateOptions"                     
						
		FirstNetDay
			if (FirstNetDay entered
			and NetDueEOM)
				cannot be entered
					"CannotDefineMultipleDueDateOptions"                      
			
			if (TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent entered)
				if (FirstNetDay entered
				and TermsSplitArray.TermsSplitGroup[1].SplitMoForw not entered
				and FirstNetDay !> ProxDays.ProxDay[1]
				and FirstNetDay != ProxDays.ProxDay[1])
					cannot be entered
						"NetDueDateMustBeGreaterThanProxDay"                               

		TermsDiscountArray		
			if (TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent not entered)					
				if (FirstNetDay entered
				or  FirstNetDays entered
				or  FirstFrom entered)
					required
						"NetOptionsInvalid;NoDiscountPercentDefined"             
		
		IncrementByGroup
			if (TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent not entered)
				constraint (IncrementByGroup not entered)
					"DiscountPercentNotEntered;CannotDefineOptions"           
			else
				if (TermsSplitArray.TermsSplitGroup[1].SplitMoForw entered)
					constraint (IncrementByGroup not entered)
						"AdditionalDiscDaysOrMonthsInvalidWithMthsForward"       
	
			if (FirstNetDay entered)
				constraint (IncrementByGroup not entered)
					"CannotDefineAdditionalDiscountDaysOrMonths"              
					
		NetDueEOM
			if (NetDueEOM)
				constraint (IncrementByGroup not entered)
					"CannotDefineAdditionalDiscountDaysOrMonths"	             
		
		FirstFrom
			if (FirstNetDays entered
			and FirstFrom = "I")
				constraint (IncrementByGroup not entered)
					"CannotDefineAdditionalDiscountDaysOrMonths"              
			
			if (FirstNetDays entered
			and FirstFrom = "I")						
				LocalNetFlag = CutOffDay + FirstNetDays
				LocalDaysFlag = 62 + ProxDays.ProxDay[1] - CutOffDay
				if (LocalNetFlag < LocalDaysFlag)
					cannot be entered
						"NumberOfDaysIsInvalid"		                                




	Rule Blocks
		TriggerTermsCodeServiceRules
    		trigger "TermsCodeService" PA service
				resume on error
				title is "EG:<FinanceEnterpriseGroup>TermsCode:<TermsCode>"
				Criteria
					FinanceEnterpriseGroup
				Variables
					ActionCode
					FinanceEnterpriseGroup
					include persistent fields from TermsCode
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp





	Actions
		Create is a Create Action
			Action Rules


				TransientFirstNetDays = TransientDueDays

			Exit Rules
				if (TransientFirstNetDays entered)
					FirstNetDays = TransientFirstNetDays 			
				
				if (TransientNetDays entered)
					FirstNetDays = TransientNetDays

		Update is an Update Action
			Action Rules


				if (TransientNetDays entered)
					FirstNetDays 		= TransientNetDays
				








				
				

		Delete is a Delete Action
			Entrance Rules
        		if (FinanceEnterpriseGroup.BODTrigger)
					ActionCode	= ActionCode.Delete
					increment bod id.VariationID
					include TriggerTermsCodeServiceRules

		
		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmRevision          is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
			Action Rules
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord

		SendTermsCodeBODNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is TermsCodeXML
					bod type is "Sync.CodeDefinition"
					document id is DerivedDocumentID
					variation id is	BODVariationID

		TriggerTermsCodeNativeLPLBOD is an Instance Action			
			restricted
			Entrance Rules
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "CodeDefinition"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "TermsCode"
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmMainUserTemplate			= "IONSyncCodeDefination_TermsCode_TermsCode_ST"
				LocalNativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				LocalBODTrigger = true
				if(FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)								
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "CodeDefinition"					
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.Reference1				= TermsCode
							invoked.Reference2              = "TermsCode"
							initialize invoked.Error			
							initialize invoked.ErrorMessage					
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else 
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= BODVariationID
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1	
							invoked.Reference1				= TermsCode
							invoked.Reference2              = "TermsCode"
							initialize invoked.Error			
							initialize invoked.ErrorMessage
					invoke SendTermsCodeBODNativeLPL
						resume on error
							Error            							= true
							ErrorMessage     							= error message
					if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODXML								= TermsCodeXML
							invoked.BODID					            = DerivedBODFormattedId
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status									= 3
							invoked.CloseDate								= system current timestamp
							invoked.BODXML									= TermsCodeXML
							invoked.BODID					                = DerivedBODFormattedId
					
	Action Exit Rules
		if (FinanceEnterpriseGroup.BODTrigger and !LocalBODTrigger)
			if (!action type.Delete)
				if (action != "UpdateBODIdFields") 
					ActionCode	= ActionCode.Update
					if (action type.Create)
						ActionCode	= ActionCode.Create				
					else
						if (action type.Delete)
							ActionCode	= ActionCode.Delete
					increment bod id.VariationID
					include TriggerTermsCodeServiceRules

