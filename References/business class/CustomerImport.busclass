CustomerImport is a BusinessClass
	owned by ar
	prefix is CUSI

	Ontology
		symbolic key is CustomerImport

	Patterns
		disable AuditIndex
		disable Auditing 
		disable EffectiveDated
		disable DataTranslations
		implements InlineUserFields
			size is 1000

	Persistent Fields
		RunGroup
		NewCustomer										is like Customer
		Name											is a VendorName 
			holds pii
		SearchName
		LegalName
		CustomerCompanyGroup
		PostalAddress									is a PostalAddressV2	
		CustomerContact									is AlphaUpper size 20
		Title
		PhoneNumber										is a TelephoneNumber 
			holds pii
		CreditAgencyCode								is a DunnCd
		CreditAgencyDate								is Date
		CreditAgencyNumber								is a DunnNumber
		CustomerOrderLimit								is an OrderLim
		CustomerCreditLimit								is a CreditLim
		TaxID 
			holds pii
		ElectronicGovernmentID 
			holds pii		
		ReceivableHoldCode
		Contact
		EFTBankEntity									is like BankEntity 
		EFTBankAccountNumber							is a BankAccountNumber
		EFTRIBKey										is a RIBKey
		EFTBankAccountStartDate							is a StartDate
		EFTBankAccountEndDate							is Date
		EFTBankAccountPrenoteDate						is Date
		EFTBankAccountType
		EFTBankAccountPrenoteRequired					is Boolean
		EFTBankAccountPrenoteStatus						is a PrenoteStatus
		BankAccountType
		EFTCustomerPrenote								is AlphaUpper size 1
            States
            	Exempt			value is "E"
                No          	value is "N"
                Yes          	value is "Y"
		EFTCustomerPrenoteMethod						is AlphaUpper size 1
            States
                AlternateEdi value is "A"
                    default label is "Alternate EDI"
                Edi          value is "E"
                    default label is "EDI"
                Fax          value is "F"
		EFTCustomerAdjustmentMethod						is an AdjNoteMeth
		User1Field
		User2Field
		PaymentFormat
		BankAccountTransactionCode
		IBAN 				  							is Boolean
		BicID 				  							is AlphaUpper size 12
		MandateID			 							is AlphaUpper size 35
		MandateType			  							is AlphaUpper size 2
			States
				CORE 		value is 01
				B2B			value is 02
				COR1		value is 03
		CheckDigitType									is a TaxIDCheckDigitType
		MobileNumber									is a MobilePhone 
			holds pii
		TwitterID 
			holds pii
		SocialNetworkID2 
			holds pii
		SocialNetworkID3 
			holds pii
		SocialNetworkID4 
			holds pii
		SocialNetworkID5 
			holds pii
		FaxNumber 
			holds pii

		EmailAddress						is an EmailAddressMulti 
			holds pii
		URLAddress
		SystemAssignedCustomer							is a Customer
		ErrorOccurred									is Boolean
		ErrorLevel										is Numeric 1
			States
				Customer			value is 1
				CompanyCustomer		value is 2
				BillTo				value is 3
				EFTBank				value is 4
		ErrorMessage									is Alpha 150

	Local Fields
		InterfacedCustomer								is a Customer view
		LocalCustomerConversionResult					is a CustomerInterfaceResult view
		LastCustomerRun									is like CustomerInterfaceResult
		LastRun											is like CustomerInterfaceResult
		SaveLastCustomerNumber							is like Customer

	Derived Fields
		InterfaceCustomerAlreadyExistsMsg is a MessageField
			restricted
			"InterfaceCustomerAlreadyExists"

		CustomerGroupNotFoundMsg is a MessageField
			restricted
			"CustomerGroupNotFound"

	Field Groups
		EFTFields
			EFTBankEntity
			EFTBankAccountNumber
			EFTRIBKey
			EFTBankAccountStartDate
			EFTBankAccountEndDate
			EFTBankAccountPrenoteDate
			EFTBankAccountType
			EFTBankAccountPrenoteRequired
			EFTBankAccountPrenoteStatus
			EFTCustomerPrenote
			EFTCustomerPrenoteMethod
			EFTCustomerAdjustmentMethod
			User1Field
			User2Field
			PaymentFormat
			IBAN
			BicID
			MandateID
			MandateType


	Relations
		CustomerGroupRel
			one-to-one relation to CustomerGroup
			Field Mapping uses symbolic key
				related.CustomerGroup				= CustomerGroup

		CustomerRel
			one-to-one relation to Customer
			Field Mapping uses symbolic key
				related.CustomerGroup				= CustomerGroup
				related.Customer 					= SystemAssignedCustomer

		CustomerMappingTableInterfaceRel
			one-to-one relation to CustomerMappingTableInterface
			Field Mapping uses ByInterfacedCustomer
				related.CustomerGroup				= CustomerGroup
				related.InterfacedCustomer			= CustomerImport

		CustomerReferenceRel
			one-to-many relation to Customer
			Field Mapping uses ByCustomerReference
				related.CustomerReference			= CustomerImport
				related.CustomerGroup				= CustomerGroup

		EFTCustomerDraftBankRel
			one-to-one relation to CustomerDraftBank
			Field Mapping uses symbolic key
				related.CustomerGroup			  				= CustomerGroup
				related.Company  								= blank
				related.Customer 								= SystemAssignedCustomer
				related.CustomerDraftBank.BOEEFTBank			= EFTBankEntity
				related.CustomerDraftBank.BOEEFTBankAccount		= EFTBankAccountNumber

		EFTReceivableElectronicFundsTransferNotifyRel
			one-to-one relation to ReceivableElectronicFundsTransferNotify
			Field Mapping uses symbolic key
				related.CustomerGroup			  				= CustomerGroup
				related.Company  								= blank
				related.Customer 								= SystemAssignedCustomer

		BillToImportRel
			one-to-many relation to BillToImport
			delete cascades
			Field Mapping uses symbolic key
				related.CustomerGroup											 = CustomerGroup
			Instance Selection
				where (related.BillToImport.CustomerImport	 = CustomerImport)

		LastRunRel
			one-to-many relation to CustomerInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= actor.context.FinanceEnterpriseGroup

		LastCustomerRunRel
			one-to-many relation to CompanyCustomer
			Field Mapping uses ByOriginatingInterfaceRun

		CustomerCompanyGroupMemberRel
			one-to-many relation to CustomerCompanyGroupMember
			Field Mapping uses Set2
				related.CustomerCompanyGroup = CustomerCompanyGroup

	Conditions
		InterfaceInProcess
			when (SystemAssignedCustomer entered)

		CustomerMappingTableInterfaceExists
			when (CustomerMappingTableInterfaceRel exists)

		IsValidForActorContext	
			restricted	
			when (CustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

        CustomerBusinessGroupAllowsAccess
            when ((actor.context.CustomerBusinessGroup != ""
            and    actor.context.CustomerBusinessGroup = CustomerGroup)
            or    (actor.context.CustomerBusinessGroup = ""))


	Sets
		ByRunGroup
			indexed
			Sort Order
				RunGroup
				CustomerGroup
				CustomerImport

	Field Rules
		RunGroup
			required

		IBAN
			if (PaymentFormat.SEPA)
				force default to true

		BicID
			if (PaymentFormat.SEPA)
				required

		CustomerCompanyGroup	
				required
			
	Actions
		Create	is a Create Action

		Update	is an Update Action

		Delete	is a Delete Action



		FastDelete	is a Delete Action
			restricted
			bypass relational integrity rules

		DeleteAllTransactionsForRunGroup	is a Set Action
			default label is "DeleteAllTransactionsForRunGroup"
			confirmation required

			Parameters
				PrmRunGroup					is AlphaUpper 30
					default label is "RunGroup"

			Instance Selection
				where (RunGroup	= PrmRunGroup)

			Action Rules
				Instance Rules
					invoke FastDelete


		MassAddCustomers is a Set Action
			default label is "MassAddCustomers"
			run in background
			Parameters
				PrmRunGroup					is a RunGroup
					default label is "RunGroup"
				PrmCustomerGroup 			is a CustomerGroup
					default label is "CustomerGroup"

			Parameter Rules
				PrmRunGroup
					required

			Local Fields
				LocalInstanceCount			is Numeric 10
				LocalResultView				is a CustomerInterfaceResult view
				LocalProcessingMethod		is AlphaUpper size 1
				LocalCustomerCount			is Numeric 12
				LocalBillToCountCount		is Numeric 12

			Instance Selection
				where (RunGroup		= PrmRunGroup
				and	CustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup  
				and (PrmCustomerGroup entered 
				and	  PrmCustomerGroup = CustomerGroup
				or	  PrmCustomerGroup not entered))

			Sort Order
				RunGroup
				CustomerGroup
				CustomerImport

			Action Rules
				Empty Set Rules
					LastRun				= last LastRunRel.CustomerInterfaceResult
					LastCustomerRun		= last LastCustomerRunRel.OriginatingInterfaceRun

					invoke Create CustomerInterfaceResult
						assign result to LocalResultView
						invoked.FinanceEnterpriseGroup		= actor.context.FinanceEnterpriseGroup


						invoked.RunTime						= current timestamp
						invoked.RunType						= 3
						invoked.RunGroup					= PrmRunGroup
						invoked.CustomerGroup				= PrmCustomerGroup
						invoked.Status						= 1 

				RunGroup Set Rules
					Entrance Rules
						LastRun				= last LastRunRel.CustomerInterfaceResult
						LastCustomerRun		= last LastCustomerRunRel.OriginatingInterfaceRun

						invoke Create CustomerInterfaceResult
							assign result to LocalResultView
							invoked.FinanceEnterpriseGroup		= actor.context.FinanceEnterpriseGroup


							invoked.RunTime						= current timestamp
							invoked.RunType						= 3
							invoked.RunGroup					= PrmRunGroup
							invoked.CustomerGroup				= PrmCustomerGroup

					Exit Rules
						invoke Update LocalResultView.CustomerInterfaceResult
							invoked.RecordsProcessed						= LocalInstanceCount

							if  (LocalResultView.Status != 2)
								invoked.Status					= 1

				Instance Rules
					LocalCustomerConversionResult 	= LocalResultView.CustomerInterfaceResult
					LocalInstanceCount				+= 1


					
					ErrorOccurred					= false
					ErrorMessage					= blank
					ErrorLevel						= blank

					if  (CustomerGroup not entered
					or   !CustomerGroupRel exists)
						ErrorOccurred						= true
						ErrorMessage						= CustomerGroupNotFoundMsg
						ErrorLevel							= 1

					if  (!ErrorOccurred)
						if  (SystemAssignedCustomer not entered
						and  CustomerMappingTableInterfaceRel exists)
							SystemAssignedCustomer		= CustomerMappingTableInterfaceRel.Customer

							if  (CustomerRel exists)
								ErrorOccurred				= true
								ErrorMessage				= InterfaceCustomerAlreadyExistsMsg
								ErrorLevel					= 2

						if  (SystemAssignedCustomer not entered
						and  first CustomerReferenceRel.Customer entered)
							SystemAssignedCustomer		= first CustomerReferenceRel.Customer

						if  (SystemAssignedCustomer not entered)
							if  (NewCustomer not entered)
								SaveLastCustomerNumber = CustomerGroup.LastAutomaticCustomerNumber

							invoke Create Customer
								assign result to InterfacedCustomer
								resume on error
									ErrorOccurred						= true
									ErrorMessage						= error message
									ErrorLevel							= 1
								fill in fields from this instance

								invoked.CustomerGroup					= CustomerGroup
								if (NewCustomer entered)
									invoked.Customer					= NewCustomer
								invoked.OriginatingInterfaceRun 		= LocalResultView.CustomerInterfaceResult
								invoked.CustomerReference				= CustomerImport
								invoked.Contact							= CustomerContact
								invoked.ContactTitle					= Title
								invoked.OrderLimit						= CustomerOrderLimit
								invoked.CreditLimit						= CustomerCreditLimit
								invoked.ReceivableHoldCode				= ReceivableHoldCode

							if  (!ErrorOccurred)				
								SystemAssignedCustomer 			= InterfacedCustomer.Customer

							else
							if  (SaveLastCustomerNumber entered)	
								invoke FastUpdate CustomerGroup
									invoked.LastAutomaticCustomerNumber	= SaveLastCustomerNumber

					if  (!ErrorOccurred)
						for each BillToImportRel

							invoke Create CustomerBillTo
								resume on error
									ErrorOccurred			= true
									ErrorMessage			= error message
									ErrorLevel				= 3
								fill in fields from each
								invoked.Customer			= SystemAssignedCustomer
								invoked.CustomerBillTo		= each.BillToImport.BillTo

							if  (ErrorOccurred)
								end for each
							else
								invoke FastDelete each

					if (NewCustomer not entered
					and SystemAssignedCustomer entered)
						NewCustomer 									= SystemAssignedCustomer

					if  (!ErrorOccurred)
						if  ((EFTBankEntity entered
						or	EFTBankAccountNumber entered)
						and  !EFTReceivableElectronicFundsTransferNotifyRel exists)

								
						   	invoke Create ReceivableElectronicFundsTransferNotify
								resume on error
									ErrorOccurred					= true
									ErrorMessage					= error message
									ErrorLevel						= 4
								invoked.CustomerGroup						= CustomerGroup
								invoked.Customer							= SystemAssignedCustomer
								invoked.EFTPrenotification					= EFTCustomerPrenote
								invoked.EFTNotificationMethod				= EFTCustomerPrenoteMethod
								invoked.EFTAdjustmentNotificationMethod 	= EFTCustomerAdjustmentMethod
								invoked.User1Field							= User1Field
								invoked.User2Field							= User2Field
								invoked.PaymentFormat						= PaymentFormat
	

						if  ((EFTBankEntity entered
						or	EFTBankAccountNumber entered)
						and  !EFTCustomerDraftBankRel exists)
							invoke Create CustomerDraftBank
								resume on error
									ErrorOccurred			= true
									ErrorMessage			= error message
									ErrorLevel				= 4
								invoked.CustomerGroup			  				= CustomerGroup
								invoked.Customer 								= SystemAssignedCustomer
								invoked.CustomerDraftBank.BOEEFTBank			= EFTBankEntity
								invoked.CustomerDraftBank.BOEEFTBankAccount		= EFTBankAccountNumber
								invoked.BankAccountType							= BankAccountType								
								invoked.BankDateRange.StartDate					= EFTBankAccountStartDate
								invoked.BankDateRange.EndDate					= EFTBankAccountEndDate
								invoked.PrenotificationDate						= EFTBankAccountPrenoteDate
								invoked.PrenotificationRequired 				= EFTBankAccountPrenoteRequired
								invoked.PrenoteStatus 							= EFTBankAccountPrenoteStatus
								invoked.RIBKey									= EFTRIBKey
								invoked.IBAN									= IBAN
								invoked.BicID									= BicID
								invoked.MandateID								= MandateID
								invoked.MandateType								= MandateType
								invoked.DefaultBank								= false
								invoked.BankType								= "E" 

					if  (ErrorOccurred)
						invoke Update LocalResultView.CustomerInterfaceResult
							invoked.Status = 2

					if  (!ErrorOccurred)
						invoke FastDelete

