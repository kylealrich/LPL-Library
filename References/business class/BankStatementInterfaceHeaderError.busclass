BankStatementInterfaceHeaderError is a BusinessClass
	owned by cashmgmt
	prefix is BSIHE
	sql name is BankStatementImportError

	Ontology
		symbolic key is BankStatementInterfaceHeaderError

	Persistent Fields
		ErrorType 						is a BankStatementValidationErrorType
		BankStatementInterface
			delete ignored
		ImportAccountNumber				is like CashManagementAccount
		ImportCurrency					is like Currency
		CashManagementGroup
			delete ignored
		CashManagementAccount
			delete ignored
		BankStatement
			delete ignored
		FinancialInstitution
			delete ignored
		BankServiceStatement
			delete ignored
		BranchIdentifier				is AlphaUpper 50
		TransactionType					is like BankTransactionTypeCode
		Domain							is like ISO20022DomainCode
		Family							is like ISO20022FamilyCode
		SubFamily						is like ISO20022SubFamilyCode
		StatementDate					is Date
		BankEntity
		BankAccountNumber
		SkipErrorPending				is Boolean

	Local Fields
		LocalBankStatementInterface 	is a BankStatementInterface
		SkipBankStatementInterface  	is a BankStatementInterface
		UnskipBankStatementInterface	is a BankStatementInterface

	Context Fields	
		SkipCashAccountAttachRule

	Derived Fields
		ErrorMessage1 is a MessageField
			restricted
			"ImportAccountNumber<ImportAccountNumber>DoesNotExist"

		ErrorMessage2 is a MessageField
			restricted
			"BankStatement<BankStatement>IsAlreadyLoadedForAccount<CashManagementAccount>For<StatementDate>"

		ErrorMessage3 is a MessageField
			restricted
			"ImportAccountCurrency<ImportCurrency>DoesNotMatchAccountCurrency<CashManagementAccount.Currency>ForAccount<CashManagementAccount>"

		ErrorMessage4 is a MessageField
			restricted
			"TransactionType<TransactionType>DoesNotExist"

		ErrorMessage5 is a MessageField
			restricted
			"BalanceTransactionType<TransactionType>DoesNotExist"

		ErrorMessage6 is a MessageField
			restricted
			"FeeServiceStatement<BankServiceStatement>IsAlreadyLoadedForAccount<CashManagementAccount>For<StatementDate>"

		ErrorMessage7 is a MessageField
			restricted
			"FinancialInstitutionDoesNotExistWithTheBranchIdentifier<BranchIdentifier>"

		ErrorMessage8 is a MessageField
			restricted
			"Account<CashManagementAccount>IsDuplicatedWithinThe<BankStatementInterfaceHeader.FileFormat>ImportFileFor<StatementDate>"

		ErrorMessage9 is a MessageField
			restricted
			"Account<CashManagementAccount>IsDuplicatedWithinTheFeeStatementImportFileFor<StatementDate>"

		ErrorMessage10 is a MessageField	
			restricted
			"Account<CashOrImportAccount>IsInactive"

		ErrorMessage11 is a MessageField
			restricted
			"ISO20022DomainCode<Domain>DoesNotExist"

		ErrorMessage12 is a MessageField
			restricted
			"ISO20022FamilyCode<Family>DoesNotExist"

		ErrorMessage13 is a MessageField
			restricted
			"ISO20022SubFamilyCode<SubFamily>DoesNotExist"





		ErrorMessage15 is a MessageField	
			restricted
			"SystemCalendarDateNeedsToBeDefinedThru<StatementDatePlus6Days>InCalendar<CashManagementGroup.CorporateCalendar>"
			
		ErrorMessage16 is a MessageField
			restricted
			"BankTransactionCodeDomainOrProprietaryDoesNotExist"

		ErrorMessage17 is a MessageField  	
			restricted
			"BankStatementFileIsOutOfBalance"
			


		ErrorMessage is a DerivedField
			type is Alpha size up to 200
			if (ErrorType.ImportAccountDoesNotExist)
				return ErrorMessage1
			else
			if (ErrorType.StatementAlreadyExists)
				return ErrorMessage2
			else
			if (ErrorType.CurrencyDoesNotMatchAccount)
				return ErrorMessage3
			else
			if (ErrorType.TransactionTypeDoesNotExist)
				return ErrorMessage4
			else
			if (ErrorType.BalanceTransactionTypeDoesNotExist)
				return ErrorMessage5
			else
			if (ErrorType.FeeStatementAlreadyExists)
				return ErrorMessage6
			else
			if (ErrorType.FinancialInstitutionDoesNotExistForIdentifier)
				return ErrorMessage7
			else
			if (ErrorType.AccountAlreadyExistsWithinFile)
				return ErrorMessage8
			else
			if (ErrorType.FeeStatementAlreadyExistsWithinFile)
				return ErrorMessage9
			else
			if (ErrorType.ImportAccountIsInactive)	
				return ErrorMessage10
			else
			if (ErrorType.ISO20022DomainCodeDoesNotExist)
				return ErrorMessage11
			else
			if (ErrorType.ISO20022FamilyCodeDoesNotExist)
				return ErrorMessage12
			else
			if (ErrorType.ISO20022SubFamilyCodeDoesNotExist)
				return ErrorMessage13



			else	
			if (ErrorType.SystemCalendarDateNotDefined)	
				return ErrorMessage15
			else
			if (ErrorType.BankTransactionCodeDomainOrProprietaryDoesNotExist)
				return ErrorMessage16
			else
			if (ErrorType.BankStatementOutOfBalance) 
				return ErrorMessage17

		StatementDatePlus6Days is a DerivedField	
			type is Date
			return StatementDate + 6 days

		CashOrImportAccount is a DerivedField
			type is like CashManagementAccount
			if (CashManagementAccount entered)
				return CashManagementAccount
			else
				return ImportAccountNumber
		
	Sets
		ByBankStatementInterface
			Sort Order
				BankStatementInterfaceHeader
				BankStatementInterface
				BankStatementInterfaceHeaderError

	Conditions
		CanSkipError
			when (!SkipErrorPending
			and  (ErrorType.ImportAccountDoesNotExist
			or	  ErrorType.StatementAlreadyExists
			or	  ErrorType.FeeStatementAlreadyExists
			or	  ErrorType.CurrencyDoesNotMatchAccount
			or	  ErrorType.AccountAlreadyExistsWithinFile
			or	  ErrorType.FeeStatementAlreadyExistsWithinFile
			or	  ErrorType.ImportAccountIsInactive))	

	Relations
		NextBAIBankStatementRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByBAICode
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.Code 						 = "49"
			Instance Selection
				where (related.BankStatementInterface > BankStatementInterface)

		NextMT940BankStatementRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses symbolic key
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
			Instance Selection
				where (related.BankStatementInterface > BankStatementInterface
				and	   related.MT940Data like ":62*") //related.FirstThreeChars = ":62")

		NextCSVBankStatementRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses symbolic key
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
			Instance Selection
				where (related.BankStatementInterface > BankStatementInterface
				and	related.DataColArray.ColArray[1] = BankStatementInterface.DataColArray.ColArray[1]
				and	related.DataColArray.ColArray[3] = BankStatementInterface.DataColArray.ColArray[3])

		NextEDI822FeeStatementRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByBAICode
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.Code 						 = "ACT"
			Instance Selection
				where (related.BankStatementInterface > BankStatementInterface)

		NextCAMT05XBankStatementRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses ByCAMT053RecordType
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.CAMT053RecordType 			 = "10" 
			Instance Selection
				where (related.BankStatementInterface > BankStatementInterface)

		BankStatementInterfaceToSkipRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses symbolic key
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
			Instance Selection
				where (related.BankStatementInterface >= BankStatementInterface
				and	   related.BankStatementInterface <= SkipBankStatementInterface)

		BankStatementInterfaceToUnskipRel
			one-to-many relation to BankStatementInterface
			Field Mapping uses symbolic key
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
			Instance Selection
				where (related.BankStatementInterface >= BankStatementInterface
				and	   related.BankStatementInterface <= UnskipBankStatementInterface)

		BankStatementInterfaceRel
			one-to-one relation to BankStatementInterface
			Field Mapping uses symbolic key
				related.BankStatementInterfaceHeader = BankStatementInterfaceHeader
				related.BankStatementInterface 		 = LocalBankStatementInterface

	Actions
		Create is a Create Action
			restricted

		SkipError is an Instance Action
			valid when (CanSkipError)
			confirmation required
				"ErrorWillBeSkippedOnceImported;WouldYouLikeToContinue?"
			Action Rules
				if (BankStatementInterfaceHeader.BAIFormat)
					SkipBankStatementInterface = first NextBAIBankStatementRel.BankStatementInterface
				else
				if (BankStatementInterfaceHeader.MT94XFormat)
					LocalBankStatementInterface = first NextMT940BankStatementRel.BankStatementInterface + 2
					if (BankStatementInterfaceRel.MT940Data like ":65*") //BankStatementInterfaceRel.FirstThreeChars = ":65")
						SkipBankStatementInterface = LocalBankStatementInterface
					else
						LocalBankStatementInterface = first NextMT940BankStatementRel.BankStatementInterface + 1
						if (BankStatementInterfaceRel.MT940Data like ":64*"  //BankStatementInterfaceRel.FirstThreeChars = ":64"
						or  BankStatementInterfaceRel.MT940Data like ":65*") //BankStatementInterfaceRel.FirstThreeChars = ":65")
							SkipBankStatementInterface = LocalBankStatementInterface
						else
							SkipBankStatementInterface = first NextMT940BankStatementRel.BankStatementInterface
				else
				if (BankStatementInterfaceHeader.CSVFormat)
					if (last NextCSVBankStatementRel.BankStatementInterface exists)	
						SkipBankStatementInterface = last NextCSVBankStatementRel.BankStatementInterface
					else
						SkipBankStatementInterface = BankStatementInterface	
				else
				if (BankStatementInterfaceHeader.EDI822Format)
					if (NextEDI822FeeStatementRel exists)
						SkipBankStatementInterface = first NextEDI822FeeStatementRel.BankStatementInterface - 1
					else
						SkipBankStatementInterface = BankStatementInterfaceHeader.last BankStatementInterface set.BankStatementInterface
				else
				if (BankStatementInterfaceHeader.CAMT05XFormat)
					if (NextCAMT05XBankStatementRel exists)
						SkipBankStatementInterface = first NextCAMT05XBankStatementRel.BankStatementInterface - 1
					else
						SkipBankStatementInterface = BankStatementInterfaceHeader.last BankStatementInterface set.BankStatementInterface	

				invoke MarkAsSkipped BankStatementInterfaceToSkipRel

				SkipErrorPending = true

		UnskipError is an Instance Action
			valid when (SkipErrorPending)
			confirmation required
				"ErrorWillBeUnskipped;WouldYouLikeToContinue?"
			Action Rules
				if (BankStatementInterfaceHeader.BAIFormat)
					UnskipBankStatementInterface = first NextBAIBankStatementRel.BankStatementInterface
				else
				if (BankStatementInterfaceHeader.MT94XFormat)
					LocalBankStatementInterface = first NextMT940BankStatementRel.BankStatementInterface + 2
					if (BankStatementInterfaceRel.MT940Data like ":65*") //BankStatementInterfaceRel.FirstThreeChars = ":65")
						UnskipBankStatementInterface = LocalBankStatementInterface
					else
						LocalBankStatementInterface = first NextMT940BankStatementRel.BankStatementInterface + 1
						if (BankStatementInterfaceRel.MT940Data like ":64*"  //BankStatementInterfaceRel.FirstThreeChars = ":64"
						or  BankStatementInterfaceRel.MT940Data like ":65*") //BankStatementInterfaceRel.FirstThreeChars = ":65")
							UnskipBankStatementInterface = LocalBankStatementInterface
						else
							UnskipBankStatementInterface = first NextMT940BankStatementRel.BankStatementInterface
				else
				if (BankStatementInterfaceHeader.CSVFormat)
					if (last NextCSVBankStatementRel.BankStatementInterface exists)	
						UnskipBankStatementInterface = last NextCSVBankStatementRel.BankStatementInterface
					else
						UnskipBankStatementInterface = BankStatementInterface	
				else
				if (BankStatementInterfaceHeader.EDI822Format)
					if (NextEDI822FeeStatementRel exists)
						UnskipBankStatementInterface = first NextEDI822FeeStatementRel.BankStatementInterface - 1
					else
						UnskipBankStatementInterface = BankStatementInterfaceHeader.last BankStatementInterface set.BankStatementInterface
				else
				if (BankStatementInterfaceHeader.CAMT05XFormat)
					if (NextCAMT05XBankStatementRel exists)
						UnskipBankStatementInterface = first NextCAMT05XBankStatementRel.BankStatementInterface	- 1
					else
						UnskipBankStatementInterface = BankStatementInterfaceHeader.last BankStatementInterface set.BankStatementInterface

				invoke RemoveSkipped BankStatementInterfaceToUnskipRel

				initialize SkipErrorPending

		IgnoreOutOfBalance is an Instance Action
			valid when (ErrorType.BankStatementOutOfBalance)
			Action Rules
				invoke IgnoreOutOfBalanceStatement BankStatementInterfaceHeader
					invoked.PrmCashManagementGroup = CashManagementGroup

		IgnoreBankTransactionCodeError is an Instance Action
			valid when (ErrorType.BankTransactionCodeDomainOrProprietaryDoesNotExist)
			Action Rules
				invoke IgnoreBankTransactionCodeError BankStatementInterfaceHeader
					invoked.PrmCashManagementGroup = CashManagementGroup

		Update is an Update Action
			restricted

		Delete is a Delete Action
			restricted

		Purge is a Purge Action
			restricted

