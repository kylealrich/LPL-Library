AsyncActionRequest is a BusinessClass
    owned by async
    prefix is AAR
    stored in environment




    Ontology
    	symbolic key is AsyncActionRequest

    Patterns
        disable Auditing
        disable EffectiveDated
        disable AsOfDateProcessing
        implements UniqueID
        implements IncrementalReplication 
			indicator field is Archived
				replicate when false
					then set to true
 
    Persistent Fields
    	Name 						is Alpha 40
    	Group 						is Alpha 40					
    	CreatedStamp 				is TimeStamp
    	Actor													
    	AuthenticatedActor			is an Actor					
    	IsProxy						is Boolean					
    		default label is "SubmittedAsProxy" 
    	EmailAddress				is an EmailAddressMulti     
    	EmailAddressMultiple		is a MultipleEmailAddress
    		default label is "EmailAddress"
    	NotificationType			is Numeric size 1
    		States
    			Never 		value is 1
    			OnFailure 	value is 2
    			Always 		value is 3
    			ActionGroup value is 4   
    	DataArea												
    	TimeToExec 					is TimeStamp				
    		default label is "TimeToExecute"
    	LastTimeToExec 				is TimeStamp				
    		default label is "LastTimeToExecute"
    	ImplementingClass 			is a BusinessView 			
    		data area is DataArea
    		default label is "Class"




    		
    	SaveResultsOption			is Boolean					






    	
  		MimeType 					is MimeType					
  			default label is "MIME_Type"
    	ActionParameters 			is DataView					
    	AsyncAction 				is an BusinessAction 		
    		data area is DataArea
			default label is "Action"
    	ActionData					is Text
    	PendingScheduling 			is Boolean					
    	ErrorMessage 				is Alpha up to 256
    	MisfireThreshold 			is Numeric 5
    	MisfireStrategy 			is a AsyncMisfireStrategy
    	MisfireReportMode 			is a AsyncMisfireReportMode
    	ContinueOnMisfire 			is Boolean
    	NoOfRetries 				is Numeric size 2
    		default label is "NumberOfRetries"
    	ActionType 					is a AsyncActionType		
    
    	IsScheduled					is Boolean
    		default label is "Scheduled"
    	ScheduleYearType			is Numeric size 1
    		default label is "YearType"    						
    		States												
    			EveryYear		value is 0
    			OddYears		value is 1
        		EvenYears		value is 2
        		SpecificYear    value is 3
        		Range			value is 4
        		Multiple		value is 5
		ScheduleYear                is Year 
			restricted        		
    	AsyncScheduleYear
    		default label is "ScheduleDays"
    	ScheduleMonth				is a AsyncScheduleMonth
    	ScheduleMonthsArray			is a AsyncScheduleMonths
    		default label is "ScheduleMonths"
    	ScheduleDay					is a AsyncScheduleDay
    	ScheduleDaysArray			is a AsyncScheduleDays
    		default label is "ScheduleDays"
    	ScheduleWeekDay				is a AsyncScheduleWeekDay
    	ScheduleWeekDaysArray		is a AsyncScheduleWeekDays	
    		default label is "ScheduleDaysOfWeek"	
    	ScheduleWeekDayOccurence	is a AsyncScheduleWeekDayOccurence
    		default label is "ScheduleWeekDayOccurrence"
    	ScheduleWeekDayOccurenceArray is a AsyncScheduleWeekDayOccurences
    		default label is "ScheduleWeekOccurrence"
    	ScheduleWeekNumber			is a AsyncScheduleWeekNumber
    	ScheduleWeekNumbersArray	is a AsyncScheduleWeekNumbers
    		default label is "ScheduleWeekNumber"
    	ScheduleHour				is a AsyncScheduleHour
    	ScheduleHoursArray			is a AsyncScheduleHours
    		default label is "ScheduleHour"
    	ScheduleMinute				is a AsyncScheduleMinute
    	ScheduleMinutesArray		is a AsyncScheduleMinutes
    		default label is "ScheduleMinute"
    	ScheduleConcurrency			is a AsyncConcurrencyStrategy
    	ScheduleFrequencySeconds	is Numeric 9
    	SystemRequest				is Numeric size 1
    		States
    			No					value is 0
    			AutoDisable 		value is 1
    			Yes					value is 2
    			UpgradeDataArea		value is 3 
    			UpgradeSystem		value is 4 
    			NonBlockingUpgrade	value is 5 
    			Throttled			value is 7
    	ContextInformation			is Text
		ScheduleTimeZone			is a TimeZone
		InvokedFrom					is an AsyncActionRequest
			delete ignored
		SessionId					is an UserSessionId
		MappingField1				is an AsyncMappingField
		MappingField2				is an AsyncMappingField
		Locale



		BatchTask					is AlphaUpper size 30
		BackgroundGroup				is UniqueID 
		BackgroundGroupName			is LPLName
		ActionGroup					is UniqueID 
		WaitFor						is UniqueID 

		WaitForType					is Numeric size 1
			States
				None			value is 0
				BackgroundGroup value is 1
				ActionGroup 	value is 2
				Request			value is 3
		RunOnErrorAction			is an AsyncAction	
		SystemRequestStamp			is TimeStamp	
		SynchronizedGroup			is an AsyncSynchronizedGroup
		ParentQueue					is an AsyncQueueDefinition
			restricted
		UserTimeZone                is a TimeZone
		Archived					is Boolean 
		ScheduleExclusion 			is a AsyncScheduleExclusion
		InactiveInGroup				is Boolean 
		ActionGroupNotification		is an AsyncActionGroupNotification 
		ActionGroupStartTime		is TimeStamp 
		ScheduleChanged             is Boolean 
				
	Transient Fields
		ScheduleType 					is Numeric size 1
			States
				RunOnce						value is 0
				ByFrequency					value is 1

					default label is "Basic"
				ByDay						value is 3

					default label is "Hourly_or_Daily"
				ByWeekNumber 				value is 4

					default label is "Once_or_more_perWeek"
				ByDateInMonth				value is 2

					default label is "Once_or_more_perMonth"
				AdvancedSchedule 			value is 5
					default label is "Advanced"
				CopyFromTemplate			value is 6
					default label is "Template"
		EnterMisFireData				is Boolean
			default label is "EnterMisfireData"
		ScheduleFrequencyType			is Numeric size 1
			States
				Seconds					value is 1
				Minutes					value is 2
				Hours					value is 3
			derive value from DerivedFrequencyType
		TransScheduleFrequencySeconds  	is Numeric 9
			default label is "Frequency" 
			derive value from DerivedFrequency
		
		AsyncLoadVersion 
		AsyncLoadVersionType 
		AsyncDataAreaType	 
		ScheduleTemplate	is an AsyncScheduleTemplate
		TranEmailAddressMultiple is a MultipleEmailAddress 
    		default label is "EmailAddress"
    	TranAGEmailAddress is a AsyncActionGroupNotification 
    		default label is "ActionGroupNotification"
    	TranDisableAudit is Boolean
			default label is untranslatable:"DisableAuditing"
		
	Context Fields
		AsyncActionTrigger		
  
	Derived Fields


		NextScheduledExecution1 is a NativeField
			type is TimeStamp
		


		NextScheduledExecution2 is a NativeField
			type is TimeStamp
		


		NextScheduledExecution3 is a NativeField
			type is TimeStamp
		


		NextScheduledExecution4 is a NativeField
			type is TimeStamp
		


		NextScheduledExecution5 is a NativeField
			type is TimeStamp
			
		NextForecastScheduledExecution is a NativeField
			type is TimeStamp

				

		CurrentTime is a NativeField 
			type is TimeStamp
			
		BeginOfAsOfDate is a NativeField  
			type is TimeStamp			
			default label is "BeginningOfAsOfDate"
					
		BusinessClassModule is a NativeField
			type is LPLName
		
		AsOfDateTime is a NativeField  // If "current date" or "as of date" set, return this, otherwise true current
			type is TimeStamp		  
		
		AcceptsRequests is a NativeField
			type is Boolean
			
		IsDataAreaActive is a NativeField
			type is Boolean			
			default label is "DataAreaActive"
			
		IsTenantActive is a NativeField
			type is Boolean			
			default label is "TenantActive"
			
		IsDataAreaAccessible is a NativeField
			type is Boolean
			restricted 
			
		DerForceAllowRequestUpdate is a NativeField
			type is Boolean
			default label is untranslatable:"ForceAllowRequestUpdate"
			restricted 
			
		DerActiveSynchronizedGroupExcludingThisExists is a NativeField
			type is Boolean
			restricted

			
		DerPendingOrInProgressSynchronizedGroupExists is a NativeField
			type is Boolean
			restricted

			
		DerActiveSynchronizedGroupExists is a NativeField
			type is Boolean
			restricted

			
		ConcurrencyModeAllowMoreTriggers  is a ConditionalField
			type is Boolean
			if (SynchronizedGroup entered and not SyncGroupAllowConcurrency)



				if (NonFinishedNotInErrorTriggersExist or DerActiveSynchronizedGroupExcludingThisExists) 
					false
				else
					true 
			else
			if (ScheduleConcurrency = AsyncConcurrencyStrategy.FullConcurrency) 
				true
			else
			if (ScheduleConcurrency = AsyncConcurrencyStrategy.NoConcurrency 
			and NonFinishedTriggers exists)
				false
			else
			if (ScheduleConcurrency = AsyncConcurrencyStrategy.NoActionGroupConcurrency 
			and not ActionGroupSuccessfullyCompletedExcludeRootPending) 
				false
			else
				true
		
		IsUpdateEffective is a ConditionalField
			type is Boolean
			default label is "UpdateEffective"
			if ((ImplementingClass = "EffectiveDatedGroup"
			and AsyncAction = "ProcessNew")
			or  (ImplementingClass = "EffectiveDatedExecutor"
			and AsyncAction = "ExecuteEffectiveTransaction"))
				true
			else
				false
		
		ContextTimeZone is a NativeField
			type is Alpha size 30	
			
		ContextTimeZoneDisplayName is a NativeField
			type is Alpha size 30			
			
		DfltContextTimeZone is a DerivedField
			type is Alpha size 30	
			default label is "DefaultContextTimeZone"						
			return ContextTimeZone
		
		CurrentIsProxy is a NativeField
			type is Boolean

		ContextInfoSet is a NativeField
			type is Boolean
			restricted
			default label is "ContextInformationSet"
		
    	DBSessionDebugIsEnabled is a DerivedField
    		type is Boolean
    		
    		if (not LocalContextInfoSet)
    			LocalContextInfoSet = ContextInfoSet
    			
    		return LocalDBSessionDebugIsEnabled 
    		
    	LPLCodeCoverageIsEnabled is a DerivedField
    		type is Boolean
    		
    		if (not LocalContextInfoSet)
    			LocalContextInfoSet = ContextInfoSet
    			
    		return LocalLPLCodeCoverageIsEnabled 
    		
    	DBSessionDebugIsEnabledInThisContext is a NativeField
    		type is Boolean
    		
    	LPLCodeCoverageIsEnabledInThisContext is a NativeField
    		type is Boolean
    		
    	HasMingleLogicalId is a DerivedField
    		type is Boolean
    		restricted
    		
    		if (not LocalContextInfoSet)
    			LocalContextInfoSet = ContextInfoSet
    			
    		return LocalHasMingleLogicalId  
    		
    	MingleLogicalIDInThisContext is a NativeField
    		type is Boolean
    		restricted
    		default label is "Ming\.\leLogicalIDInThisContext"
    		
    	ContextUserSessionId is a NativeField
    		type is Alpha size up to 100  
    		
    	ActorLocale is a DerivedField
    		type is Alpha size 102
    		return Actor.IsoLocale    
    		
    	ActiveLocale is a DerivedField
    		type is Alpha size 102
    		
    		if (Locale entered)
    			return Locale
    		else
    			return Actor.IsoLocale    
    		
		BatchTaskId is a NativeField
			type is AlphaUpper size 30   

		RequestThresholdExceeded is a NativeField 
			type is Boolean    		    		 				
			
		NumberFinishedTriggers is a ComputeField 
    		type is Numeric 10
    		(instance count of FinishedTriggers)
    		
		NumberFailedTriggers is a ComputeField 
    		type is Numeric 10
    		(instance count of FailedTriggers)
    		
		NumberNonFinishedTriggers is a ComputeField 
    		type is Numeric 10
    		(instance count of NonFinishedTriggers)    		
    		
		NumberNonFinishedNotInErrorTriggers is a ComputeField 
    		type is Numeric 10
    		(instance count of NonFinishedNotInErrorTriggers)
    		
    	InvokeeSetCount is a ComputeField 
    		type is Numeric 10
    		(instance count of InvokedChildrenRel)
    		
		IsBatchTask is a ConditionalField 
			type is Boolean
			default label is "BatchStream"
			
			if (ImplementingClass = "BatchTask"
			and (AsyncAction = "Run"
			or   AsyncAction = "RunStream"))
				true
			else
				false
			
		IsSynchronousBatchStream is a DerivedField
			type is Boolean
			restricted
			if (IsBatchTask)
				LocBatchTask = BatchTask

				if (LocBatchTask.Type.TaskStream
				and not LocBatchTask.AsyncTasks) 
					return true 

			return false 				
				
		DependentSetHasKeptTriggers is a DerivedField
			type is Boolean
   			
   			for each DependentSetRel
   				if (each.TriggersThatShouldNotBeDeleted exists)
   					return true
   					
   			return false				









		SaveActionResults is a DerivedField
			type is Boolean
			if (AsyncAction.SaveActionResults)
				return true
			else
			if (IsBatchTask)
				LocBatchTask = BatchTask
				return LocBatchTask.ContainsSaveActionResults 

			return false
			
		DerWaitForActionGroupWaitingRelExists is a NativeField
			type is Boolean
			restricted

			
		DerWaitForWaitingRelExists is a NativeField
			type is Boolean
			restricted

			
		WaitingOnRequest is a DerivedField
			type is Boolean
			if (WaitForType = WaitForType.ActionGroup)

				if (DerWaitForActionGroupWaitingRelExists)
					return true
			else
			if (WaitForType = WaitForType.Request)

				if (DerWaitForRequestWaiting)
					return true
			else 

			if (WaitFor entered and DerWaitForWaitingRelExists)	
				return true
			
			return false
			
		DerWaitForRequestWaiting is a NativeField
			type is Boolean
			restricted

					
		SynchronizedGroupSuspendedMessage is a MessageField
			restricted
			"<SynchronizedGroup>isSuspended"
							
		WaitingOnSynchronizedMembersMessage is a MessageField
			restricted
			"WaitingFor<SynchronizedGroup>SynchronizedMembersToComplete"
			
		WaitingOnBackgroundGroupMessage is a MessageField
			restricted
			"WaitingFor<first WaitForBackgroundGroupRel.DerBackgroundGroupName>ToComplete"	

		WaitingOnActionGroupMessage is a MessageField
			restricted
			"WaitingFor<first WaitForActionGroupRel.Name>ToComplete"	
						
		WaitingOnRequestMessage is a MessageField
			restricted
			"WaitingFor<WaitForRequestWaitingRel.Name>ToComplete"						
			
		SuccessfullyCompletedMessage is a MessageField
			restricted
			"Complete"
		
		FailedTriggersExistMessage is a MessageField
			restricted
			"FailuresExist"
		
		NonFinishedTriggersExistMessage is a MessageField
			restricted
			"InProcess"
			
		WaitForActionGroupTriggersExistMessage is a MessageField
			restricted
			"WaitingOnActionGroupMembers"			
		
		PendingSchedulingMessage is a MessageField
			restricted
			"WaitingForNextScheduledExecution"

		StatusMessage is a DerivedField
    		type is MessageField
    		
    		if (SynchronizedGroupSuspended and not SuccessfullyCompleted and (FailedTriggersExist or not NonFinishedTriggersExist))
    			return SynchronizedGroupSuspendedMessage
    		else
    		if (WaitingOnSynchronizedMembers)
    			return WaitingOnSynchronizedMembersMessage
    		else
    		if (WaitingOnRequest)
    			if (WaitForType = WaitForType.ActionGroup)
    				return WaitingOnActionGroupMessage
    			else
    			if (WaitForType = WaitForType.Request)
    				return WaitingOnRequestMessage
    			else
    				return WaitingOnBackgroundGroupMessage
			else    			
    		if (SuccessfullyCompleted)
    			return SuccessfullyCompletedMessage
    		else
    		if (FailedTriggersExist)
   				return FailedTriggersExistMessage
			else	
   			if (NonFinishedTriggersExist)
   				return NonFinishedTriggersExistMessage
   			else	
   			if (WaitForActionGroupTriggersExist)
   				return WaitForActionGroupTriggersExistMessage
    		else
    		if (PendingScheduling)
    			return PendingSchedulingMessage
    		else
    			return ""
    			
		WaitForSingletonActionGroupExistsMessage is a MessageField
			restricted
			"WaitingOnActionGroup<WaitForName>"
			
		WaitForSingletonRequestExistsMessage is a MessageField
			restricted
			"WaitingOnRequest<WaitForName>"
			
		WaitForSingletonBackgroundGroupExistsMessage is a MessageField
			restricted
			"WaitingOnBackgroundGroup<WaitForName>"
		
		WaitForMultipleActionGroupsExistsMessage is a MessageField
			restricted
			"WaitingOnActionGroup<WaitForName>"
			
		WaitForMultipleBackgroundGroupsExistsMessage is a MessageField
			restricted
			"WaitingOnBackgroundGroup<WaitForName>"
			
		ActionYellowAlertMessage is a DerivedField
			type is MessageField
			
			if (PendingScheduling)
				if (WaitForSingletonActionGroupExists)
					return WaitForSingletonActionGroupExistsMessage
				else	
				if (WaitForSingletonRequestExists)
					return WaitForSingletonRequestExistsMessage
				else
				if (WaitForSingletonBackgroundGroupExists)
					return WaitForSingletonBackgroundGroupExistsMessage
				else
				if (WaitForMultipleActionGroupsExists)
					return WaitForMultipleActionGroupsExistsMessage
				else
				if (WaitForMultipleBackgroundGroupsExists)
					return WaitForMultipleBackgroundGroupsExistsMessage
			
			return "" 
			
		NumberOfActiveActionGroupMembers is a ComputeField 
    		type is Numeric 10
    		(instance count of ActionGroupActiveRel)			
    			
		GroupActiveAndFailedMessage is a MessageField
			restricted
			"ActiveWithFailedTriggers"						
		
		GroupFailedMessage is a MessageField
			restricted
			"Failed"	
		
		GroupFailedMoreMessage is a MessageField
			restricted
			"Failed.TooManyRecordsInGroupToFullyDetermineStatus_-_(<NumberOfActiveActionGroupMembers>)."						

		GroupActiveMessage is a MessageField
			restricted
			"Active"	
			
		GroupActiveMoreMessage is a MessageField
			restricted
			"Active.TooManyRecordsInGroupToFullyDetermineStatus_-_(<NumberOfActiveActionGroupMembers>)."						
			
		GroupPendingAndFailedMessage is a MessageField
			restricted
			"FailedWithPendingRequests"								
			
		GroupPendingAndFailedMoreMessage is a MessageField
			restricted
			"FailedWithPendingRequests.TooManyRecordsInGroupToFullyDetermineStatus_-_(<NumberOfActiveActionGroupMembers>)."	
			
		GroupPendingMessage is a MessageField
			restricted
			"Pending"	
			
		GroupPendingMoreMessage is a MessageField
			restricted
			"Pending.TooManyRecordsInGroupToFullyDetermineStatus_-_(<NumberOfActiveActionGroupMembers>)."	
		
		GroupCountExceededMessage is a MessageField
			restricted
			"TooManyRecordsInGroupToDetermineStatus_-_(<NumberOfActiveActionGroupMembers>)"					
    						    			
		ActionGroupStatus  is a DerivedField
    		type is MessageField
    		if (ActionGroupExists)
    			AnyPending = false
    			AnyFailed = false
    			AnyActive = false
    			WorkCountExceeded = false
    			WorkRecordCount = 0
    			
    			if (PendingScheduling) 
    				AnyPending = true
    			
    			for each ActionGroupActiveRel
    				if each.FailedTriggersExist
    					AnyFailed = true
   					if each.NonFinishedNotInErrorTriggersExist
   						AnyActive = true
    				if each.PendingScheduling
    					AnyPending = true
    			

    				if (AnyFailed and AnyActive)
    					return GroupActiveAndFailedMessage
    					
    				increment WorkRecordCount
    				
    				if (WorkRecordCount > 998 
    				or  (WorkRecordCount > 99 
    				and (AnyFailed
    				or   AnyActive
    				or   AnyPending)))
    					WorkCountExceeded = true
    					end for each
    				
    			if (AnyFailed)
    				if (AnyActive)
    					return GroupActiveAndFailedMessage
    					
    				if (AnyPending)
    					if (WorkCountExceeded)
    						return GroupPendingAndFailedMoreMessage
    					return GroupPendingAndFailedMessage
    				
    				if (WorkCountExceeded)
    					return GroupFailedMoreMessage
    				return GroupFailedMessage
    			else
    			if (AnyActive)
    				if (WorkCountExceeded)
    					return GroupActiveMoreMessage
    				return GroupActiveMessage
    			else
    			if (AnyPending)
    				if (WorkCountExceeded)
    					return GroupPendingMoreMessage
    				return GroupPendingMessage
    			else
    			if (WorkCountExceeded)
    				return GroupCountExceededMessage
    			
    			return SuccessfullyCompletedMessage
    						
    		return ""    
    		
    	ActionGroupActiveExcludingFailures is a DerivedField
    		type is Boolean
    		restricted
    		default label is untranslatable
    		
    		if (ActionGroupExists)
    			for each ActionGroupActiveRel
   					if each.NonFinishedNotInErrorTriggersExist
   						return true
   			else			
   				return NonFinishedNotInErrorTriggersExist
    		
		ActionGroupSuccessfullyCompleted  is a DerivedField
    		type is Boolean
    		restricted
    		if (ActionGroupExists)
    			for each ActionGroupActiveRel


   					if (each.NonFinishedTriggersExist)
   						return false
    				if (each.PendingSchedulingCurrent)
    					return false
    						
    		return true        			
    		
		ActionGroupSuccessfullyCompletedExcludeRootPending is a DerivedField
    		type is Boolean
    		restricted
			for each ActionGroupActiveRel
				if (each.NonFinishedTriggersExist)
					return false
				if (each.PendingSchedulingCurrent
				and each.AsyncActionRequest != ActionGroup) 
					return false
    						
    		return true        			    		
    		
		ActionGroupSuccessfullyCompletedExcludeCurrent is a DerivedField
    		type is Boolean
    		restricted
    		if (ActionGroupExists)
    			for each ActionGroupRelExcludeCurrentAsyncIdRel  
    				if (each.NonFinishedTriggersExist)
   						return false
    			
    			for each ActionGroupActiveRel
    				if (each.FailedTriggersExist)
    					return false
   					if (each.PendingSchedulingCurrent)
    					return false
    						
    		return true    
    		
		ActionGroupSuccessfullyCompletedExcludeThis is a DerivedField
    		type is Boolean
    		restricted
    		if (ActionGroupExists)
    			for each ActionGroupRelExcludeThisAsyncIdRel  
    				if (each.NonFinishedTriggersExist)
   						return false
    			
    			for each ActionGroupActiveRel
    				if (each.FailedTriggersExist)
    					return false
   					if (each.PendingSchedulingCurrent)
    					return false
    						
    		return true      

		DerRootActionGroupName is a DerivedField    			
			type is Alpha 40
			default label is "RootActionGroupName"
			if (ActionGroup entered)
				if (ActionGroup = AsyncActionRequest)
					return Name
					
				if (RootActionGroupRel exists)
					return RootActionGroupRel.Name
			
			LocalLoopCounter = 1
			

			while LocalLoopCounter <= sizeofarray Name
				if (Name[LocalLoopCounter] not entered
				or  Name[LocalLoopCounter] = "-")
					end while

				DerRootActionGroupName += Name[LocalLoopCounter]
				LocalLoopCounter += 1
			
			return DerRootActionGroupName
			
		 		
    	
		DerBackgroundGroupName is a DerivedField    			
			type is LPLName
			default label is "BackgroundGroupName"
			if (BackgroundGroupName entered)
				return BackgroundGroupName
		
			return Name
			
		WaitForName is a DerivedField
			type is LPLName
			if (WaitForType = WaitForType.ActionGroup)
				return first WaitForActionGroupRel.Name
			else
			if (WaitForType = WaitForType.Request)
				return WaitForRequestWaitingRel.Name
			else 
			if (WaitFor entered) 
    			return first WaitForBackgroundGroupRel.DerBackgroundGroupName
    		
		ConfigDefaultNoOfRetries is a NativeField
			type is Numeric size 2  
			default label is "ConfiguredDefaultNumberOfRetries"
			
		DefaultNoOfRetries is a DerivedField
			type is Numeric size 2
			default label is "DefaultNumberOfRetries"
			
			if (ConfigDefaultNoOfRetries > 0)
				return ConfigDefaultNoOfRetries
			else
				return 10
				
		ConfigDefaultNotification is a NativeField
			type is Numeric size 1
			restricted
		
		ConfigDefaultNotificationFromInvokedFrom is a NativeField
			type is Boolean
			default label is untranslatable
			restricted				
				
		ConfigCreateSynchGroupTriggers is a NativeField
			type is Boolean
			default label is untranslatable
			restricted				
			
		ConfigCheckSynchGroupTriggers is a NativeField
			type is Boolean
			default label is untranslatable
			restricted
		
		ConfigAllowSyncGroupConcurrency is a NativeField
			type is Boolean
			default label is untranslatable
			restricted	
		
		FrequencyMessage is a DerivedField
			type is MessageField
			
			if (ScheduleFrequencySeconds >= 3600)
				LocWorkFrequency = ScheduleFrequencySeconds
				LocWorkFrequency %= 3600
				
				if (LocWorkFrequency = 0)
					LocWorkFrequency = ScheduleFrequencySeconds / 3600
					
					if (LocWorkFrequency = 1)
						return FrequencyMessageHour
						
					return FrequencyMessageHours
					
			if (ScheduleFrequencySeconds >= 60)
				LocWorkFrequency = ScheduleFrequencySeconds
				LocWorkFrequency %= 60
				
				if (LocWorkFrequency = 0)
					LocWorkFrequency = ScheduleFrequencySeconds / 60
					
					if (LocWorkFrequency = 1)
						return FrequencyMessageMinute
					
					return FrequencyMessageMinutes
			
			if (ScheduleFrequencySeconds = 1)
				return FrequencyMessageSecond
				
			return FrequencyMessageSeconds
			
		FrequencyMessageHour is a MessageField
			restricted
			"Every<DerivedFrequency>Hour"	
			
		FrequencyMessageHours is a MessageField
			restricted
			"Every<DerivedFrequency>Hours"	
			
		FrequencyMessageMinute is a MessageField
			restricted
			"Every<DerivedFrequency>Minute"	
			
		FrequencyMessageMinutes is a MessageField
			restricted
			"Every<DerivedFrequency>Minutes"	
			
		FrequencyMessageSecond is a MessageField
			restricted
			"Every<DerivedFrequency>Second"									
														
		FrequencyMessageSeconds is a MessageField
			restricted
			"Every<DerivedFrequency>Seconds"				
						
		DerivedFrequency is a DerivedField
			type is Numeric 9
			restricted
			if (ScheduleFrequencySeconds >= 3600)
				LocWorkFrequency = ScheduleFrequencySeconds
				LocWorkFrequency %= 3600
				
				if (LocWorkFrequency = 0)
					return ScheduleFrequencySeconds / 3600
					
			if (ScheduleFrequencySeconds >= 60)
				LocWorkFrequency = ScheduleFrequencySeconds
				LocWorkFrequency %= 60
				
				if (LocWorkFrequency = 0)
					return ScheduleFrequencySeconds / 60
			
			return ScheduleFrequencySeconds		
			
		DerivedFrequencyType is a DerivedField
			type is Numeric 1
			restricted		
			if (ScheduleFrequencySeconds >= 3600)
				LocWorkFrequency = ScheduleFrequencySeconds
				LocWorkFrequency %= 3600
				
				if (LocWorkFrequency = 0)
					return 3 
					
			if (ScheduleFrequencySeconds >= 60)
				LocWorkFrequency = ScheduleFrequencySeconds
				LocWorkFrequency %= 60
				
				if (LocWorkFrequency = 0)
					return 2 
			
			return 1 
			
		DerivedScheduleString is a DerivedField
			type is MessageField
			restricted
			
			if (not IsScheduled)
				return DerivedRunOnceMessage
				
			if (IsScheduledByFrequency)
				return FrequencyMessage
			
			if (ScheduleYearType.EveryYear or ScheduleYearType.OddYears or ScheduleYearType.EvenYears)
				DerivedScheduleString = DerivedScheduleYearTypeMessage
			else
			if (ScheduleYearType.SpecificYear)
				DerivedScheduleString = DerivedYearMessage + " " + AsyncScheduleYear.ScheduleYear[1]
			else
				DerivedScheduleString = DerivedYearsMessage + DerivedSpaceMessage
				
				LocalLoopCounter = 1
				
				while LocalLoopCounter <= sizeofarray AsyncScheduleYear
					if (AsyncScheduleYear.ScheduleYear[LocalLoopCounter] not entered)
						end while
					if (LocalLoopCounter > 1)
						if (ScheduleYearType.Range)
							DerivedScheduleString += " - "
						else
							DerivedScheduleString += ", "
					
					DerivedScheduleString += AsyncScheduleYear.ScheduleYear[LocalLoopCounter]
					LocalLoopCounter += 1
			
			DerivedScheduleString += ", "
			
			if (ScheduleMonth.EveryMonth or ScheduleMonth.OddMonths or ScheduleMonth.EvenMonths or ScheduleMonth > 0)	
				DerivedScheduleString += ScheduleMonth
			else
				LocalLoopCounter = 1
				
				while LocalLoopCounter <= sizeofarray ScheduleMonthsArray
					if (ScheduleMonthsArray.AsyncScheduleMonthSelect[LocalLoopCounter] not entered)
						end while
					if (LocalLoopCounter > 1)
						if (ScheduleMonth.Range)
							DerivedScheduleString += " - "
						else
							DerivedScheduleString += ", "
					
					DerivedScheduleString += ScheduleMonthsArray.AsyncScheduleMonthSelect[LocalLoopCounter]
					LocalLoopCounter += 1
		
			DerivedScheduleString += ", "
			
			if (ScheduleDay.EveryDay or ScheduleDay.OddDays or ScheduleDay.EvenDays or ScheduleDay.LastInMonth or ScheduleDay.LastWeekdayInMonth or ScheduleDay.LastWeekendDayInMonth or ScheduleDay > 0)
				if (ScheduleDay > 0)
					DerivedScheduleString += DerivedDayMessage + DerivedSpaceMessage
				DerivedScheduleString += ScheduleDay
			else
				DerivedScheduleString += DerivedDaysMessage + DerivedSpaceMessage
				LocalLoopCounter = 1
				
				while LocalLoopCounter <= sizeofarray ScheduleDaysArray
					if (ScheduleDaysArray.AsyncScheduleDaySelect[LocalLoopCounter] not entered)
						end while
					if (LocalLoopCounter > 1)
						if (ScheduleDay.Range)
							DerivedScheduleString += " - "
						else
							DerivedScheduleString += ", "
					
					DerivedScheduleString += ScheduleDaysArray.AsyncScheduleDaySelect[LocalLoopCounter]
					LocalLoopCounter += 1
			
			DerivedScheduleString += ", "
			
			if (ScheduleWeekDay.MondayThruFriday or ScheduleWeekDay.WeekendOnly or ScheduleWeekDay.EveryWeekDay or ScheduleWeekDay > 0)	
				DerivedScheduleString += ScheduleWeekDay
			else
				LocalLoopCounter = 1
				
				while LocalLoopCounter <= sizeofarray ScheduleWeekDaysArray
					if (ScheduleWeekDaysArray.AsyncScheduleWeekDaySelect[LocalLoopCounter] not entered)
						end while
					if (LocalLoopCounter > 1)
						if (ScheduleWeekDay.Range)
							DerivedScheduleString += " - "
						else
							DerivedScheduleString += ", "
					
					DerivedScheduleString += ScheduleWeekDaysArray.AsyncScheduleWeekDaySelect[LocalLoopCounter]	
					LocalLoopCounter += 1	
					
			DerivedScheduleString += DerivedSpaceMessage
			
			if (ScheduleWeekDayOccurence.EveryOccurrence or ScheduleWeekDayOccurence.OddOccurrence or ScheduleWeekDayOccurence.EvenOccurrence or ScheduleWeekDayOccurence.Last or ScheduleWeekDayOccurence > 0)
				DerivedScheduleString += ScheduleWeekDayOccurence
				
				if (not ScheduleWeekDayOccurence.EveryOccurrence and not ScheduleWeekDayOccurence.OddOccurrence and not ScheduleWeekDayOccurence.EvenOccurrence)
					DerivedScheduleString += " "
					DerivedScheduleString += OccurrenceMessage
			else
				LocalLoopCounter = 1
				
				while LocalLoopCounter <= sizeofarray ScheduleWeekDayOccurenceArray
					if (ScheduleWeekDayOccurenceArray.AsyncScheduleWeekDayOccurenceSelect[LocalLoopCounter] not entered)
						end while
					if (LocalLoopCounter > 1)
						if (ScheduleWeekDayOccurence.Range)
							DerivedScheduleString += " - "
						else
							DerivedScheduleString += ", "
					
					DerivedScheduleString += ScheduleWeekDayOccurenceArray.AsyncScheduleWeekDayOccurenceSelect[LocalLoopCounter]	
					LocalLoopCounter += 1
				
				DerivedScheduleString += " "
				DerivedScheduleString += OccurrenceMessage
						
			DerivedScheduleString += ", "
			
			if (ScheduleWeekNumber.EveryWeek or ScheduleWeekNumber.OddWeeks or ScheduleWeekNumber.EvenWeeks or ScheduleWeekNumber.LastWeek or ScheduleWeekNumber.BiWeekly or ScheduleWeekNumber > 0)
				if (ScheduleWeekNumber > 0)
					DerivedScheduleString += DerivedWeekNumberMessage + DerivedSpaceMessage
				DerivedScheduleString += ScheduleWeekNumber
			else
				DerivedScheduleString += DerivedWeekNumbersMessage + DerivedSpaceMessage
				LocalLoopCounter = 1
				
				while LocalLoopCounter <= sizeofarray ScheduleWeekNumbersArray
					if (ScheduleWeekNumbersArray.AsyncScheduleWeekNumberSelect[LocalLoopCounter] not entered)
						end while
					if (LocalLoopCounter > 1)
						if (ScheduleWeekNumber.Range)
							DerivedScheduleString += " - "
						else
							DerivedScheduleString += ", "
					
					DerivedScheduleString += ScheduleWeekNumbersArray.AsyncScheduleWeekNumberSelect[LocalLoopCounter]
					LocalLoopCounter += 1
			
			DerivedScheduleString += ", "
			
			if (ScheduleHour.EveryHour or ScheduleHour.OddHours or ScheduleHour.EvenHours or ScheduleHour >= 0)
				if (ScheduleHour >= 0)
					DerivedScheduleString += DerivedHourMessage + DerivedSpaceMessage
				DerivedScheduleString += ScheduleHour
			else
				DerivedScheduleString += DerivedHoursMessage + DerivedSpaceMessage
				LocalLoopCounter = 1
				
				while LocalLoopCounter <= sizeofarray ScheduleHoursArray
					if (LocalLoopCounter > 1 and ScheduleHoursArray.AsyncScheduleHourSelect[LocalLoopCounter] not entered)
						end while
					if (LocalLoopCounter > 1)
						if (ScheduleHour.Range)
							DerivedScheduleString += " - "
						else
							DerivedScheduleString += ", "
					
					DerivedScheduleString += ScheduleHoursArray.AsyncScheduleHourSelect[LocalLoopCounter]
					LocalLoopCounter += 1
					
			DerivedScheduleString += ", "		

			if (ScheduleMinute.EveryMinute or ScheduleMinute.OddMinutes or ScheduleMinute.EvenMinutes or ScheduleMinute >= 0)
				if (ScheduleMinute >= 0)
					DerivedScheduleString += DerivedMinuteMessage + DerivedSpaceMessage
				DerivedScheduleString += ScheduleMinute
			else
				DerivedScheduleString += DerivedMinutesMessage + DerivedSpaceMessage
				LocalLoopCounter = 1
				
				while LocalLoopCounter <= sizeofarray ScheduleMinutesArray
					if (LocalLoopCounter > 1 and ScheduleMinutesArray.AsyncScheduleMinuteSelect[LocalLoopCounter] not entered)
						end while
					if (LocalLoopCounter > 1)
						if (ScheduleMinute.Range)
							DerivedScheduleString += " - "
						else
							DerivedScheduleString += ", "
					
					DerivedScheduleString += ScheduleMinutesArray.AsyncScheduleMinuteSelect[LocalLoopCounter]
					LocalLoopCounter += 1
					
			DerivedScheduleString += DerivedSpaceMessage
			DerivedScheduleString += ScheduleTimeZone
					
			return DerivedScheduleString
			
		DerivedSpaceMessage is a MessageField
			restricted
			"_"
			
		DerivedRunOnceMessage is a MessageField
			restricted
			"RunOnce"
			
		DerivedYearMessage is a MessageField
			restricted
			"Year"
		
		DerivedYearsMessage is a MessageField
			restricted
			"Years"
		
		DerivedDayMessage is a MessageField
			restricted
			"Day"
		
		DerivedDaysMessage is a MessageField
			restricted
			"Days"
		
		DerivedWeekNumberMessage is a MessageField
			restricted
			"WeekNumber"
		
		DerivedWeekNumbersMessage is a MessageField
			restricted
			"WeekNumbers"
			
		DerivedHourMessage is a MessageField
			restricted
			"Hour"
		
		DerivedHoursMessage is a MessageField
			restricted
			"Hours"
			
		DerivedMinuteMessage is a MessageField
			restricted
			"Minute"
		
		DerivedMinutesMessage is a MessageField
			restricted
			"Minutes"
			
		OccurrenceMessage is a MessageField
			restricted
			"OccurrenceInMonth"
			
		DerivedScheduleYearTypeMessage is a MessageField
			restricted
			"<ScheduleYearType>"	
		
		DataAreaSuspendedMessage is a MessageField
			restricted
			"<DataArea>IsSuspended"	
			
		TenantSuspendedMessage is a MessageField
			restricted
			"TenantIsSuspendedOrAsyncIsNotRunningForTenant"	
				
		FailedUpgradeRequestMessage is a MessageField
			restricted
			"FailedUpgradeRequestsMustBeResolvedBeforeProcessingCanContinue"	
			
		BlocklistMessageNoMap is a MessageField
			restricted
			"Action<ImplementingClass>.<AsyncAction>IsBlocklistedAndIsNotAllowedToExecute"	
		
		BlocklistMessageMap is a MessageField
			restricted
			"Action<ImplementingClass>.<AsyncAction>WithMappingFields_'<MappingField1>',_'<MappingField2>'_IsBlocklistedAndIsNotAllowedToExecute"

		BlocklistDocumentMessage is a MessageField
			restricted
			"Document_'<MappingField1>',_'<MappingField2>'_IsBlocklistedAndIsNotAllowedToGenerate"	
						
		BlocklistMessage is a DerivedField
			type is MessageField
			restricted
			if (ActionType = "DocumentAction")
				return BlocklistDocumentMessage
			if (AsyncBlockedAction.AsyncBlocklist.MappingField1 entered)
				return BlocklistMessageMap
			return BlocklistMessageNoMap
			
		RunOnErrorBlocklistMessageNoMap is a MessageField
			restricted
			"Action<RunOnErrorAction.ImplementingClass>.<RunOnErrorAction.AsyncAction>IsBlocklistedAndIsNotAllowedToExecute"	
		
		RunOnErrorBlocklistMessageMap is a MessageField
			restricted
			"Action<RunOnErrorAction.ImplementingClass>.<RunOnErrorAction.AsyncAction>WithMappingFields_'<MappingField1>',_'<MappingField2>'_IsBlocklistedAndIsNotAllowedToExecute"

		RunOnErrorBlocklistMessage is a DerivedField
			type is MessageField
			restricted
			if (AsyncBlockedAction.AsyncBlocklist.MappingField1 entered) 
				return RunOnErrorBlocklistMessageMap
			return RunOnErrorBlocklistMessageNoMap		
			
		AnyBlocklistMessage is a DerivedField
			type is MessageField
			if (ActionIsBlacklisted)
				return BlocklistMessage
			if (RunOnErrorActionIsBlacklisted)
				return RunOnErrorBlocklistMessage
			return blank					
			
		SuspendedMessage is a DerivedField
			type is MessageField
			if (not IsTenantActive)				
				return TenantSuspendedMessage
			else
			if (not IsDataAreaActive)
				return DataAreaSuspendedMessage
			else 
			if (ActionIsBlacklisted)
				return BlocklistMessage
			else
			if (RunOnErrorActionIsBlacklisted)
				return RunOnErrorBlocklistMessage
			else
			if (FailedSystemUpgradeDataAreaRequestsRel exists
			or  FailedSystemUpgradeSystemRequestsRel exists)
				return FailedUpgradeRequestMessage
			else 
				return ""
				
		TriggerUniqueID is a DerivedField
			type is UniqueID
			restricted
			
			if (AsyncActionTrigger in context)
				return AsyncActionTrigger.UniqueID		
				
			return blank		
			

		CreateSystemThrottleRequestsEnabled is a NativeField 
			type is Boolean	
			restricted
			
		ScheduleConcurrencyInitialValue is a DerivedField
			type is Numeric size 1
			default label is untranslatable
			restricted
			
			if (AsyncAction.ScheduleConcurrencyDefined
			and AsyncAction.ScheduleConcurrencyIsInitialValue)
				return AsyncAction.ScheduleConcurrencyType
			return 1
			
		ScheduleMisfireInitialValue is a DerivedField
			type is Numeric size 1
			default label is untranslatable
			restricted
			
			if (AsyncAction.ScheduleMisfireStrategyDefined
			and AsyncAction.ScheduleMisfireStrategyIsInitialValue)
				return AsyncAction.ScheduleMisfireStrategy
			
			return 1			
			
		DeriveAsyncStatus is a DerivedField
			type is Boolean
			restricted		
			if (not LocalAsyncStatusDerived)
				LocalAsyncStatusID = 1 
				
				if (AsyncStatusRel exists)
					LocalAsyncStatusMT = true
					
					if (AsyncStatusRel.Status.NotRunning) 
						LocalAsyncStatusMTRunning = false
					else
						LocalAsyncStatusMTRunning = true
				else
					LocalAsyncStatusMT = false
					LocalAsyncStatusMTRunning = false
				
				LocalAsyncStatusID = 2	
				LocalAsyncStatusTenantState = AsyncStatusRel.Status
				LocalAsyncStatusTenantMessage =  AsyncStatusRel.Message
				LocalAsyncStatusTenantWarn =  AsyncStatusRel.WarningState
				
				LocalAsyncStatusID = 3	
				LocalAsyncStatusDataAreaState = AsyncStatusRel.Status
				

									
				LocalAsyncStatusID = 6 
				LocalAsyncStatusActiveCount = AsyncStatusRel.Message 
				
				LocalAsyncStatusID = 7 
				LocalAsyncStatusProcReqsState = AsyncStatusRel.Status
				
				LocalAsyncStatusID = 8 
				LocalAsyncStatusProcQueuesState = AsyncStatusRel.Status
				
				LocalAsyncStatusID = 9 
				LocalAsyncStatusConstCheckState = AsyncStatusRel.Status
				


				
				LocalAsyncStatusID = 15 
				LocalAsyncStatusBatchState = AsyncStatusRel.Status
				
				LocalAsyncStatusID = 16 
				LocalAsyncStatusDocumentState = AsyncStatusRel.Status
				
				LocalAsyncStatusDerived = true
				
			return LocalAsyncStatusDerived
			
		DerivedAsyncStatusMT is a DerivedField	
			type is Boolean
			restricted			
			
			if (DeriveAsyncStatus)
				return LocalAsyncStatusMT
			else
				return false
			
		DerivedAsyncStatusMTRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DeriveAsyncStatus)
				return LocalAsyncStatusMTRunning
			else
				return false			
		
				
		DerivedAsyncStatusTenantState is a DerivedField	
			type is Numeric size 1
			restricted			
			
			if (DeriveAsyncStatus)
				return LocalAsyncStatusTenantState
			else
				return 9	
				
		DerivedAsyncStatusTenantMessage is a DerivedField	
			type is Text
			restricted			
			
			if (DeriveAsyncStatus)
				return LocalAsyncStatusTenantMessage
			else
				return blank	
				
		DerivedAsyncStatusTenantWarn is a DerivedField	
			type is Boolean
			restricted			
			
			if (DeriveAsyncStatus)
				return LocalAsyncStatusTenantWarn
			else
				return false			
						
		DerivedAsyncStatusTenantStateNotRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusTenantState = 1)
				return true
			return false
		
		DerivedAsyncStatusTenantStateRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusTenantState = 2)
				return true
			return false	
			
		DerivedAsyncStatusTenantStateSuspended is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusTenantState = 3)
				return true
			return false	
			
		DerivedAsyncStatusTenantStateError is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusTenantState = 4)
				return true
			return false						
				
		DerivedAsyncStatusDataAreaState is a DerivedField	
			type is Numeric size 1
			restricted			
			
			if (DeriveAsyncStatus)
				return LocalAsyncStatusDataAreaState
			else
				return 9	
				
		DerivedAsyncStatusDataAreaNotRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusDataAreaState = 1)
				return true
			return false
		
		DerivedAsyncStatusDataAreaRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusDataAreaState = 2)
				return true
			return false	
			
		DerivedAsyncStatusDataAreaSuspended is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusDataAreaState = 3)
				return true
			return false	
			
		DerivedAsyncStatusDataAreaError is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusDataAreaState = 4)
				return true
			return false				
							
		DerivedAsyncStatusProcessRequestsState is a DerivedField	
			type is Numeric size 1
			restricted			
			
			if (DeriveAsyncStatus)
				return LocalAsyncStatusProcReqsState
			else
				return 9	
				
		DerivedAsyncStatusProcReqsNotRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusProcessRequestsState = 1)
				return true
			return false
		
		DerivedAsyncStatusProcReqsRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusProcessRequestsState = 2)
				return true
			return false	
			
		DerivedAsyncStatusProcReqsSuspended is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusProcessRequestsState = 3)
				return true
			return false	
			
		DerivedAsyncStatusProcReqsError is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusProcessRequestsState = 4)
				return true
			return false		

		DerivedAsyncStatusProcessQueuesState is a DerivedField	
			type is Numeric size 1
			restricted			
			
			if (DeriveAsyncStatus)
				return LocalAsyncStatusProcQueuesState
			else
				return 9	

		DerivedAsyncStatusProcQueuesNotRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusProcessQueuesState = 1)
				return true
			return false
		
		DerivedAsyncStatusProcQueuesRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusProcessQueuesState = 2)
				return true
			return false	
			
		DerivedAsyncStatusProcQueuesSuspended is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusProcessQueuesState = 3)
				return true
			return false	
			
		DerivedAsyncStatusProcQueuesError is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusProcessQueuesState = 4)
				return true
			return false	

		DerivedAsyncStatusConsistencyCheckState is a DerivedField	
			type is Numeric size 1
			restricted			
			
			if (DeriveAsyncStatus)
				return LocalAsyncStatusConstCheckState
			else
				return 9	
				
		DerivedAsyncStatusConsCheckNotRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusConsistencyCheckState = 1)
				return true
			return false
		
		DerivedAsyncStatusConsCheckRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusConsistencyCheckState = 2)
				return true
			return false	
			
		DerivedAsyncStatusConsCheckSuspended is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusConsistencyCheckState = 3)
				return true
			return false	
			
		DerivedAsyncStatusConsCheckError is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusConsistencyCheckState = 4)
				return true
			return false		
			
		DerivedAsyncStatusBatchState is a DerivedField	
			type is Numeric size 1
			restricted			
			
			if (DeriveAsyncStatus)
				return LocalAsyncStatusBatchState
			else
				return 9	
				
		DerivedAsyncStatusBatchNotRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusBatchState = 1)
				return true
			return false
		
		DerivedAsyncStatusBatchRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusBatchState = 2)
				return true
			return false	
			
		DerivedAsyncStatusBatchError is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusBatchState = 4)
				return true
			return false	
	
		DerivedAsyncStatusDocumentState is a DerivedField	
			type is Numeric size 1
			restricted			
			
			if (DeriveAsyncStatus)
				return LocalAsyncStatusDocumentState
			else
				return 9	
				
		DerivedAsyncStatusDocumentNotRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusDocumentState = 1)
				return true
			return false
		
		DerivedAsyncStatusDocumentRunning is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusDocumentState = 2)
				return true
			return false	
			
		DerivedAsyncStatusDocumentError is a DerivedField	
			type is Boolean
			restricted			
			
			if (DerivedAsyncStatusDocumentState = 4)
				return true
			return false		
			
		ActionIsSystemBlocklisted is a NativeField
			type is Boolean

			 
		RunOnErrorActionIsSystemBlocklisted is a NativeField
			type is Boolean

		
		DerEmailAddressMulti is a DerivedField
    		type is MultiEmailAddressField
    		default label is "EmailAddress"
    		
    		if (EmailAddress entered)
				if (EmailAddressMultiple entered)
					return EmailAddress + "," + EmailAddressMultiple
				else 
					return EmailAddress
			else
				return EmailAddressMultiple		
				
		AsyncAuditingEnabled is a NativeField
			type is Boolean
			default label is untranslatable
			restricted

			
		AsyncAuditActionDisabled is a NativeField
    		type is Boolean
    		default label is untranslatable
    		restricted 

    	
    	DerivedForecastSliceKey is a NativeField
    		type is AlphaUpper size 12	
    		default label is untranslatable
    		restricted

			
		DerivedForecastSlicePeriod is a NativeField
    		type is TimeStamp	
    		default label is untranslatable
    		restricted	


		DerProcReqsCondition is a NativeField 
			type is LPLText
			default label is untranslatable
    		restricted	
    		
    	DerFullProcReqsCondition is a DerivedField
			type is LPLText
			default label is untranslatable
    		restricted	
    		is condition for "AsyncActionRequest"
    		return "EligibleForScheduling and (" + 	DerProcReqsCondition + ")"
    		
    	DerFullProcSysReqsCondition is a DerivedField
			type is LPLText
			default label is untranslatable
    		restricted	
    		is condition for "AsyncActionRequest"
    		return "SystemRequest >= SystemRequest.AutoDisable and SystemRequest <= SystemRequest.NonBlockingUpgrade and " + DerFullProcReqsCondition
    		
    	DataAreaExists is a NativeField
			type is Boolean
			default label is untranslatable
    		restricted	
			
    Local Fields
    	NextScheduledTime is TimeStamp  
    	
    	LocBatchTask is a BatchTask
    		data area is DataArea
    		
		AnyPending is Boolean
		AnyFailed is Boolean
		AnyActive is Boolean
		WorkCountExceeded is Boolean
		WorkRecordCount is Numeric size 3    
		
		LocWorkFrequency is Numeric size 9	
		
		LocalContextInfoSet 			is Boolean 
		LocalDBSessionDebugIsEnabled	is Boolean 
		LocalLPLCodeCoverageIsEnabled	is Boolean 
		LocalHasMingleLogicalId			is Boolean 

    	LocType		is Numeric size 1
    	
		RecordFastLocked is Boolean
		
		LocalAsyncStatusDerived is Boolean
		LocalAsyncStatusID is Numeric size 2
		LocalAsyncStatusMT is Boolean
		LocalAsyncStatusMTRunning is Boolean
		LocalAsyncStatusTenantState is an AsyncStatusState
		LocalAsyncStatusTenantMessage is Text
		LocalAsyncStatusTenantWarn is Boolean
		LocalAsyncStatusDataAreaState is an AsyncStatusState
		LocalAsyncStatusActiveCount is Numeric size 6
		LocalAsyncStatusProcReqsState is an AsyncStatusState
		LocalAsyncStatusProcQueuesState is an AsyncStatusState
		LocalAsyncStatusConstCheckState is an AsyncStatusState
		LocalAsyncStatusBatchState is an AsyncStatusState
		LocalAsyncStatusDocumentState is an AsyncStatusState
		
		LocalLoopCounter is Numeric size 2
		
		LocWorkSliceForecast is an AsyncSchedulingForecast
		LocWorkSliceKey	is AlphaUpper size 12
		LocWorkSliceTime is TimeStamp
		LocWorkSliceOption is a AsyncForecastTimeSliceSize
		LocWorkSliceTimeZone is a TimeZone
		LocWorkSliceInfoSet is Boolean
		LocalWorkSlicePeriodStart is TimeStamp
		
	Create Rules
		constraint (not ActionIsBlacklisted)
			untranslatable:"<BlocklistMessage>"
		
		constraint (not RunOnErrorAction.ActionEntered or not RunOnErrorActionIsBlacklisted)
			untranslatable:"<RunOnErrorBlocklistMessage>"
		
	Rule Blocks
		DataAreaConstraintBlock
			constraint (AcceptsRequests)
				"DataAreaIsNotCurrentlyDefinedToAcceptRequests"

		UpdateAsyncActionInvocation
			





			include SetLocTypeField
			





			include UpdateUnFinishedTriggerInvocations
			
			if (SaveResultsOption)
				if (PendingScheduling)
		            invoke Update AsyncActionInvocationRel
	            		invoked.LastModTime			= system current timestamp 
                    	invoked.AsyncActionInvocationStatus  = AsyncActionInvocationStatus.PendingScheduling
	                    invoked.Name				= Name
	                    invoked.Group				= Group
	                    invoked.Actor				= Actor
	                    invoked.DataArea			= DataArea
	                    invoked.TimeToExec			= TimeToExec
	                    invoked.ActionParameters	= ActionParameters
	                    invoked.ImplementingClass	= ImplementingClass
	                    invoked.AsyncAction			= AsyncAction
	                    
	                    if (InvokedFrom.AsyncActionInvocationRel exists)
	                   		invoked.InvokedFrom			= InvokedFrom.AsyncActionInvocationRel.AsyncActionInvocation
	                   		invoked.InvokedFromName		= InvokedFrom.AsyncActionInvocationRel.AsyncActionInvocation.Name
	                   	
	                    invoked.AsyncActionRequest	= AsyncActionRequest
	                    invoked.AsyncActionTrigger	= blank
	                    invoked.TriggerUniqueID		= blank
	                    invoked.StatusChanged		= system current timestamp
	                    invoked.Started				= blank
	                    invoked.Finished			= blank
	                    invoked.FailureCode			= blank
	                    invoked.Result				= blank
	                    invoked.RunOnErrorAction    = RunOnErrorAction
	                    invoked.RunOnErrorFailureCode = blank
						invoked.RunOnErrorResult	= blank
	                    
	                    if (LocType entered)
							invoked.Type				= LocType
							
				else
				if (AsyncActionInvocationRel exists) 
					invoke Delete AsyncActionInvocationRel

		SetLocTypeField
			if (BatchTaskRel exists)		
				LocType				= BatchTaskRel.Type
			else 

				if (!BatchTask entered)
					LocType				= 2		// default type to TaskAction, default label "Job"
				else
					if (AsyncActionInvocationRel exists)
						LocType				= AsyncActionInvocationRel.Type    
					else


						LocType				= blank		

		UpdateUnFinishedTriggerInvocations
			if (SaveResultsOption)
			
                for each UnFinishedNotInProgressStateTriggerInvocationsRel
                    invoke Update each
	            		invoked.LastModTime			= system current timestamp 
	                    invoked.Name				= Name
	                    invoked.Group				= Group
	                    invoked.Actor				= Actor
	                    invoked.DataArea			= DataArea
	                    invoked.ActionParameters	= ActionParameters
	                    invoked.ImplementingClass	= ImplementingClass
	                    invoked.AsyncAction			= AsyncAction
	                    
	                    if (InvokedFrom.AsyncActionInvocationRel exists)
		                    invoked.InvokedFrom			= InvokedFrom.AsyncActionInvocationRel.AsyncActionInvocation
		                    invoked.InvokedFromName		= InvokedFrom.AsyncActionInvocationRel.AsyncActionInvocation.Name

						if (LocType entered)
							invoked.Type				= LocType
							
						invoked.RunOnErrorAction    = RunOnErrorAction
		


		ActionGroupStartTimeReset
			if (AsyncActionRequest = ActionGroup)
				initialize ActionGroupStartTime
				
		UpdateForecastSliceInfo
			if (not AsyncForecastSliceRel exists)
				invoke Create AsyncForecastSlice
					invoked.AsyncSchedulingForecast = ParamSchedulingForecast
					invoked.SliceKey = DerivedForecastSliceKey
					invoked.PeriodStart = DerivedForecastSlicePeriod
					invoked.ForecastPeriodEnd = LocEndTime
					
			if (AsyncForecastSliceUniqueMemberRel exists)
				invoke AdjustRequestCount AsyncForecastSliceUniqueMemberRel
					invoked.AdjustCountValue = 1
			else
				invoke Create AsyncForecastSliceMember
					invoked.AsyncSchedulingForecast = ParamSchedulingForecast
					invoked.SliceKey = DerivedForecastSliceKey
					invoked.AsyncActionRequest = AsyncActionRequest
		
    Field Rules
    	MisfireThreshold
			initial value is 15
    		constraint (MisfireThreshold >= 1)
    			"MisfireThresholdHasToBeAtLeastOneMinute"
    			
		ContinueOnMisfire
			initial value is true
		    			
    	ActionType
    		default to "LandmarkAction"
    		initial value is "LandmarkAction"
    	
    	Actor
    		initial value is actor
    		
    	AuthenticatedActor
    		initial value is authenticated actor
    	
    	DataArea
    		initial value is parentcontext.dataarea
			default to parentcontext.dataarea
			
			if (DataArea changed) 
				for each AsyncActionTrigger set
					invoke SetDataArea each
			
		NoOfRetries
			initial value is DefaultNoOfRetries
			default to DefaultNoOfRetries

		EmailAddress
			if (EmailAddress entered)
				if (EmailAddressMultiple entered)
					EmailAddressMultiple = EmailAddress + "," + EmailAddressMultiple
				else
					EmailAddressMultiple = EmailAddress
				initialize EmailAddress
    	
    	EmailAddressMultiple

			
			if (EmailAddress entered)
				if (EmailAddressMultiple entered)
					EmailAddressMultiple = EmailAddress + "," + EmailAddressMultiple
				else
					EmailAddressMultiple = EmailAddress
				initialize EmailAddress    	
    	
    	Group
    		default to BusinessClassModule
    		
    	NotificationType
    		initial value is ConfigDefaultNotification
    		
    		if (InvokedFromExists
    		and (InvokedFrom.NotificationType = NotificationType.ActionGroup
    		or  (ConfigDefaultNotificationFromInvokedFrom
    		and  InvokedFrom.NotificationType entered)))
				NotificationType = InvokedFrom.NotificationType
				EmailAddressMultiple = InvokedFrom.DerEmailAddressMulti
    		else
	    		if (EmailAddress entered
	    		or  EmailAddressMultiple entered)
	    			default to NotificationType.OnFailure
	    		else
	    			default to ConfigDefaultNotification 
    	
		AsyncAction
			if (AsyncAction.SaveActionResults)
				SaveResultsOption = true
			else
			if (IsBatchTask)
				LocBatchTask = BatchTask
				SaveResultsOption = LocBatchTask.ContainsSaveActionResults
			else
				SaveResultsOption = false
				
			if (InvokedFromExists) 
    			if (InvokedFrom.ActionGroup = ActionGroup)
    				ActionGroupStartTime = InvokedFrom.ActionGroupStartTime 
    			
    			ActionGroupNotification = InvokedFrom.ActionGroupNotification 




		ContextTimeZone
			initial value is DfltContextTimeZone 
			
		MisfireStrategy
			initial value is ScheduleMisfireInitialValue	
			
			if (AsyncAction.ScheduleMisfireStrategyDefined
			and not AsyncAction.ScheduleMisfireStrategyIsInitialValue) 
				force default to AsyncAction.ScheduleMisfireStrategy
			
		ScheduleConcurrency
    		initial value is ScheduleConcurrencyInitialValue
    		
    		if ((SynchronizedGroup entered and not SyncGroupAllowConcurrency)
    		or  IsSynchronousBatchStream)
    			if (not ScheduleConcurrency.NoActionGroupConcurrency)
    				ScheduleConcurrency = 1 
    		else
    		if (AsyncAction.ScheduleConcurrencyDefined
			and not AsyncAction.ScheduleConcurrencyIsInitialValue) 
				force default to AsyncAction.ScheduleConcurrencyType
						
		ScheduleTimeZone
			initial value is ContextTimeZone
			default to ContextTimeZone

        UserTimeZone
            initial value is ContextTimeZone
            default to ContextTimeZone

		PendingScheduling
			include UpdateAsyncActionInvocation
			
			if (PendingScheduling changed)
				if (PendingScheduling
				or  NonFinishedTriggersExist)
					InactiveInGroup = false
				else
					InactiveInGroup = true
			
		Locale
			default to parentcontext.locale
			
		ActionParameters
			if (ActionParameters changed
			and NonFinishedTriggersExist)
				confirmation required
					"ActionHasUnfinishedTriggers.AreYouSureYouWantToChangeData?"
					
			if (IsBatchTask
			and ActionParameters entered)
				BatchTask = BatchTaskId
				
				if (not Name entered)
					Name = BatchTask 
			else
				initialize BatchTask	
				
			if (not Name entered)
				Name = ImplementingClass + "." + AsyncAction				
				

		BackgroundGroup
			default to AsyncActionRequest
			
		BackgroundGroupName
			default to Name			
			
		ActionGroup
			default to AsyncActionRequest	
			
		WaitFor
			constraint (WaitFor not entered 
			or         (WaitForType.Request and WaitFor != AsyncActionRequest)
			or         (WaitForType.ActionGroup and WaitFor != ActionGroup) 
			or         ((WaitForType.BackgroundGroup or WaitForType.None) and WaitFor != BackgroundGroup)) 
				"RequestCannotWaitOnItself"		
		
		ScheduleFrequencyType
			initial value is 1			
			
		SystemRequest
			if  (InvokedFromExists)
				if (InvokedFrom.SystemRequest.UpgradeDataArea)
					force default to SystemRequest.UpgradeDataArea 
				else
				if (InvokedFrom.SystemRequest.UpgradeSystem)
					force default to SystemRequest.UpgradeSystem 
				else
				if (InvokedFrom.SystemRequest.NonBlockingUpgrade)
					force default to SystemRequest.NonBlockingUpgrade 
				
			if (AnyTypeBlockingUpgradeRequest) 
				invoke NotifyAsyncOfUpgradeRequest
		
		AsyncScheduleYear
			if (ScheduleYearType.SpecificYear or ScheduleYearType.Range or ScheduleYearType.Multiple)
				required
					"YearIsRequired"
			else
				initialize AsyncScheduleYear
				
		ScheduleMonth
			if (not ScheduleMonth.Range and not ScheduleMonth.Multiple)
				initialize ScheduleMonthsArray
				
		ScheduleMonthsArray				
			if (ScheduleMonth.Range or ScheduleMonth.Multiple)
				required
				
		ScheduleDay
			if (not ScheduleDay.Range and not ScheduleDay.Multiple)
				initialize ScheduleDaysArray
				
		ScheduleDaysArray				
			if (ScheduleDay.Range or ScheduleDay.Multiple)
				required
				
		ScheduleWeekDay
			if (not ScheduleWeekDay.Range and not ScheduleWeekDay.Multiple)
				initialize ScheduleWeekDaysArray
				
		ScheduleWeekDaysArray						
			if (ScheduleWeekDay.Range or ScheduleWeekDay.Multiple)
				required
		
		ScheduleWeekDayOccurence
			if (not ScheduleWeekDayOccurence.Range and not ScheduleWeekDayOccurence.Multiple)
				initialize ScheduleWeekDayOccurenceArray
				
		ScheduleWeekDayOccurenceArray
			if (ScheduleWeekDayOccurence.Range or ScheduleWeekDayOccurence.Multiple)
				required
				
		ScheduleWeekNumber
			if (not ScheduleWeekNumber.Range and not ScheduleWeekNumber.Multiple)
				initialize ScheduleWeekNumbersArray

		ScheduleWeekNumbersArray
			if (ScheduleWeekNumber.Range or ScheduleWeekNumber.Multiple)
				required
						
		ScheduleHour
			if (not ScheduleHour.Range and not ScheduleHour.Multiple)
				initialize ScheduleHoursArray												
				
		ScheduleHoursArray
			if (ScheduleHour.Range or ScheduleHour.Multiple)
				required
			
		ScheduleMinute
			if (not ScheduleMinute.Range and not ScheduleMinute.Multiple)
				initialize ScheduleMinutesArray
				
		ScheduleMinutesArray								
			if (ScheduleMinute.Range or ScheduleMinute.Multiple)
				required
				
		InvokedFrom
			if (InvokedFrom entered
			and not InvokedFromExists)
				initialize InvokedFrom	
	
		SynchronizedGroup
			if (SynchronizedGroup changed) 
				for each AsyncActionTrigger set
					invoke SetSynchronizedGroup each
				
	Conditions
    	EligibleForScheduling 
   			when ((TimeToExec <= system current timestamp) and (PendingScheduling))

   		
   		FutureExecution
   			restricted
   			when (TimeToExec > system current timestamp)
   		
   		InvokedFromExists
   			when (not InvokedFrom = AsyncActionRequest
   			and   InvokedFrom exists)
   		
   		InvokeeSetExists
   			when (InvokedChildrenRel exists)
   		
   		FailedTriggersExist
   			when (FailedTriggers exists)
	
   		NonFinishedTriggersExist
   			when (NonFinishedTriggers exists)
   			
		WaitForActionGroupTriggersExist
			default label is "TriggersInWaitForActionGroupStatusExist"
   			when (WaitForActionGroupTriggers exists)   	
   			
		NonFinishedNotInErrorTriggersExist
			when (NonFinishedNotInErrorTriggers exists)  
		
		NonFinishedNotInErrorSynchGroupTriggersExist
			when (NonFinishedNotInErrorSynchGroupTriggers exists)  		
			
		PendingOrInProgressSynchGroupTriggersExist
			when (PendingOrInProgressSynchGroupTriggers exists)  				
   			
   		InProgress
   			when (InProgressStateTriggers exists)
   			
		NotSuccessfullyCompleted
			default label is "RequestNotSuccessfullyCompleted"
			when (PendingScheduling or NonFinishedTriggersExist or FailedTriggersExist)
		
		SuccessfullyCompleted
			default label is "RequestSuccessfullyCompleted"
			when (!PendingScheduling and !NonFinishedTriggersExist and !FailedTriggersExist)

   		DBSessionDebugIsEnabledAndExists
   			when (DBSessionDebugIsEnabled and DBSessionDebugRel exists)
   		
   		IsEffectiveDatedGroup
   			default label is "EffectiveDatedGroup"
   			when (ImplementingClass = "EffectiveDatedGroup")
	
		LargeFinishedTriggers
			restricted
			when (NumberFinishedTriggers > 1000)
			
		HasBatchTask
			default label is "BatchTaskEntered"
			when (BatchTask entered)	
			

		WaitForExists
			default label is "BackgroundGroupThisRequestMustWaitForExists"
   			when ((WaitForType = WaitForType.ActionGroup and WaitForActionGroupRel exists)
   			or    (WaitForType = WaitForType.Request and WaitFor entered and WaitForRequestWaitingRel exists)
   			or    (WaitForType != WaitForType.ActionGroup and WaitFor entered and WaitForBackgroundGroupRel exists)) 
   		
   		WaitForSingletonActionGroupExists
   			default label is "RequestThisRequestMustWaitForExists"  
   			when (WaitForType = WaitForType.ActionGroup and instance count of WaitForActionGroupRel = 1) 
   			
		WaitForSingletonBackgroundGroupExists
   			default label is "RequestThisRequestMustWaitForExists"  
   			when (WaitForType != WaitForType.ActionGroup and WaitForType != WaitForType.Request and WaitFor entered and instance count of WaitForBackgroundGroupRel = 1) 
   			
		WaitForSingletonRequestExists
   			default label is "RequestThisRequestMustWaitForExists"  
   			when (WaitForType = WaitForType.Request and WaitFor entered and WaitForRequestWaitingRel exists)
   			
   		WaitForMultipleActionGroupsExists
   			default label is "MultipleRequestsThisRequestMustWaitForExist"
   			when (WaitForType = WaitForType.ActionGroup and instance count of WaitForActionGroupRel > 1)
   			
		WaitForMultipleBackgroundGroupsExists
   			default label is "MultipleRequestsThisRequestMustWaitForExist"
   			when (WaitForType != WaitForType.ActionGroup and WaitForType != WaitForType.Request and WaitFor entered and instance count of WaitForBackgroundGroupRel > 1) 
   			
   		WaitingOnAnyType
   			default label is "RequestWaitingOnOtherRequests"
   			when (PendingScheduling and (WaitForSingletonActionGroupExists or WaitForSingletonBackgroundGroupExists or WaitForSingletonRequestExists or WaitForMultipleActionGroupsExists or WaitForMultipleBackgroundGroupsExists))
   			

		DependentSetExists
   			when (BackgroundGroup entered and DependentSetRel exists)
   			
   		CanDeleteDependentSetRel
   			default label is untranslatable
   			when (not DependentSetExists
   			or    not DependentSetHasKeptTriggers)   
   		
   		StatisticTriggersExists
   			when (StatisticTriggers exists)		
   						
   		DisplayBackgroundName
   			when (BackgroundGroupName entered
   			and   DependentSetExists)
   			
		BackgroundGroupSetExists
			when (BackgroundGroup entered
			and   BackgroundGroupRel exists)  
			
		ActionGroupSetExists
			when (ActionGroup entered
			and   ActionGroupRel exists) 
			
		HasTriggers
			default label is "TriggersExist"
   			when (AsyncActionTrigger set exists)

		HasGlobalBackgroundGroup
			default label is "GlobalBackgroundGroupExists"
			when (GlobalBackgroundGroupRel exists)  
			 			
		HasRunOnErrorAction
			default label is "RunOnErrorActionEntered"
			when (RunOnErrorAction.ActionEntered)		
			
		CanResumeStream
			restricted
			when (not ActionGroupActiveExcludingThisRel exists)    		
			
		HasSynchronizedGroup
			default label is "SynchronizedGroupEntered"
			when (SynchronizedGroup entered)
			
		WaitForRequestWaiting 
			default label is "Active_'WaitFor'_RequestExists"
			when (WaitFor entered and WaitForRequestWaitingRel exists and (WaitForRequestWaitingRel.PendingSchedulingCurrent or WaitForRequestWaitingRel.NonFinishedTriggersExist))
			
		ActionGroupExists					
			when (ActionGroup entered and (ActionGroup != AsyncActionRequest or instance count of ActionGroupRel > 1))
			
		IsScheduleYearSpecified
			default label is "ScheduleYearSpecified"
			when (not ScheduleYearType.EveryYear) 
			
		DisplayScheduleYear
			when (ScheduleYearType.SpecificYear or ScheduleYearType.Range or ScheduleYearType.Multiple) 	
			
		DisplayScheduleYearType
			when (ScheduleYearType.EvenYears or ScheduleYearType.OddYears)
			
		DisplayScheduleMonth
			when (ScheduleMonth.Range or ScheduleMonth.Multiple)			
			
		DisplayScheduleDay
			when (ScheduleDay.Range or ScheduleDay.Multiple)
			
		DisplayScheduleWeekDay
			when (ScheduleWeekDay.Range or ScheduleWeekDay.Multiple)			
			
		DisplayScheduleWeekDayOccurence
			default label is "DisplayScheduleWeekDayOccurrence"
			when (ScheduleWeekDayOccurence.Range or ScheduleWeekDayOccurence.Multiple)		
			
		DisplayScheduleWeekNumber
			when (ScheduleWeekNumber.Range or ScheduleWeekNumber.Multiple)			
		
		DisplayScheduleHour
			when (ScheduleHour.Range or ScheduleHour.Multiple)
			
		DisplayScheduleMinute
			when (ScheduleMinute.Range or ScheduleMinute.Multiple)			
						
		IsAsOfDateSet
			default label is "AsOfDateSet"





			when (AsOfDateTime > CurrentTime)
			
		IsScheduledByFrequency
			default label is "ScheduledByFrequency"
			when (ScheduleFrequencySeconds != blank)
		
		SynchronizedGroupSuspended
			when (SynchronizedGroup entered and SynchronizedGroup.Suspended)	
						
		WaitingOnSynchronizedMembers


			when (SynchronizedGroup entered and PendingScheduling and not ConfigCreateSynchGroupTriggers and DerActiveSynchronizedGroupExcludingThisExists)
			
		HoldOnSynchronizedGroup
			when (SynchronizedGroupSuspended or WaitingOnSynchronizedMembers)
			



		HoldOnSynchronizedGroupNoParam
			default label is "HoldOnSynchronizedGroup"
			when (SynchronizedGroupSuspended or (SynchronizedGroup entered and DerPendingOrInProgressSynchronizedGroupExists))
	
		IsAsyncActive
			default label is "AsyncIsActive"
			when (IsDataAreaActive and IsTenantActive)
			
		DataAreaRedAlert
			when (not IsAsyncActive or ActionIsBlacklisted or RunOnErrorActionIsBlacklisted or FailedSystemUpgradeDataAreaRequestsRel exists or FailedSystemUpgradeSystemRequestsRel exists)
			
		DataAreaYellowAlert
			when (not AnyTypeUpgradeRequest and (UnfinishedSystemUpgradeDataAreaRequestsRel exists or UnfinishedSystemUpgradeSystemRequestsRel exists))
			
		DataAreaGreenAlert
			when ((SystemRequest.UpgradeDataArea and UnfinishedSystemUpgradeDataAreaRequestsRel exists) or (SystemRequest.UpgradeSystem and UnfinishedSystemUpgradeSystemRequestsRel exists))		
			
		PendingSchedulingCurrent 
			restricted
			when (PendingScheduling and (not IsScheduled or (not SystemRequest.AutoDisable and (TimeToExec = blank or TimeToExec <= system current timestamp)))) 

    			
		AnyTypeUpgradeRequest
			restricted
			when (SystemRequest.UpgradeDataArea or SystemRequest.UpgradeSystem or SystemRequest.NonBlockingUpgrade)
			
		AnyTypeBlockingUpgradeRequest
			restricted
			when (SystemRequest.UpgradeDataArea or SystemRequest.UpgradeSystem)
						
		InCorrectDataArea
			default label is untranslatable
			restricted
			when (DataArea like parentcontext.dataarea)
						
		DisplayYearElement2
			default label is untranslatable
			when (ScheduleYearType.Range or ScheduleYearType.Multiple)
			
		DisplayMonthElement2
			default label is untranslatable
			when (ScheduleMonth.Range or ScheduleMonth.Multiple)
			
		DisplayDayElement2
			default label is untranslatable
			when (ScheduleDay.Range or ScheduleDay.Multiple)	
			
		DisplayDayOfWeekElement2
			default label is untranslatable
			when (ScheduleWeekDay.Range or ScheduleWeekDay.Multiple)	
			
		DisplayWeekDayOccurenceElement2
			default label is untranslatable
			when (ScheduleWeekDayOccurence.Range or ScheduleWeekDayOccurence.Multiple)								
			
		DisplayWeekNumberElement2
			default label is untranslatable
			when (ScheduleWeekNumber.Range or ScheduleWeekNumber.Multiple)			
			
		DisplayHourElement2
			default label is untranslatable
			when (ScheduleHour.Range or ScheduleHour.Multiple)	
			
		DisplayMinuteElement2
			default label is untranslatable
			when (ScheduleMinute.Range or ScheduleMinute.Multiple)		
			
		DisableConcurrency
			restricted
			default label is untranslatable 
			when (not IsDataAreaAccessible or (AsyncAction.ScheduleConcurrencyDefined and not AsyncAction.ScheduleConcurrencyIsInitialValue))
				
		DisableMisfire
			restricted
			default label is untranslatable 
			when (not IsDataAreaAccessible or (AsyncAction.ScheduleMisfireStrategyDefined and not AsyncAction.ScheduleMisfireStrategyIsInitialValue))
			
		UnfinishedSystemUpgradeDataAreaRequestsRelExists
			restricted
			default label is untranslatable
			when (UnfinishedSystemUpgradeDataAreaRequestsRel exists)			
			
		UnfinishedSystemUpgradeSystemRequestsRelExists
			restricted
			default label is untranslatable
			when (UnfinishedSystemUpgradeSystemRequestsRel exists)
			
		UnfinishedNonBlockingUpgradeRequestsRelExists
			restricted
			default label is untranslatable
			when (UnfinishedNonBlockingUpgradeRequestsRel exists)	
			

		DisplayExclusions 
			default label is untranslatable
			when (ScheduleExclusion entered or (not ScheduleFrequencySeconds entered and not ScheduleType.ByFrequency and not ScheduleType.RunOnce)) 
			

		DisplayExclusionsUpdate 
			default label is untranslatable
			when (ScheduleExclusion entered or (not ScheduleFrequencySeconds entered and IsScheduled)) 
			
		CondCheckSynchGroupTriggers
			restricted			
			default label is untranslatable
			when (ConfigCreateSynchGroupTriggers or ConfigCheckSynchGroupTriggers)
			
		CondActiveSynchronizedGroupExcludingThisRelExists 
			restricted			
			default label is untranslatable
			when ((CondCheckSynchGroupTriggers and ActiveSynchronizedGroupExcludingThisRel exists) or (not CondCheckSynchGroupTriggers and OldActiveSynchronizedGroupExcludingThisRel exists))
			
		CondPendingOrInProgessSynchronizedGroupRelExists 
			restricted			
			default label is untranslatable
			when ((CondCheckSynchGroupTriggers and ActiveNonQueuedSynchronizedGroupRel exists) or (not CondCheckSynchGroupTriggers and OldActiveNonQueuedSynchronizedGroupRel exists))
			
		CondActiveSynchronizedGroupRelExists 
			restricted			
			default label is untranslatable 
			when ((CondCheckSynchGroupTriggers and ActiveSynchronizedGroupRel exists) or (not CondCheckSynchGroupTriggers and OldActiveSynchronizedGroupExcludingThisRel exists))			
			 
		CondWaitForActionGroupWaitingRelExists 
			restricted			
			default label is untranslatable
			when (WaitForActionGroupWaitingRel exists)
			
		CondWaitForWaitingRelExists 
			restricted			
			default label is untranslatable
			when (WaitFor entered and WaitForWaitingRel exists)		
			
		SyncGroupAllowConcurrency
			restricted
			default label is untranslatable
			when (ConfigCreateSynchGroupTriggers and ConfigAllowSyncGroupConcurrency)		
	
		ActionIsBlacklisted
			default label is "ActionIsBlocklisted"
			when (ActionIsSystemBlocklisted or AsyncBlockedAction exists)
			
		ActionIsAutoBlocklisted
			default label is "ActionIsBlocklisted"
			restricted
			when (AsyncBlockedAction exists)			
			
		RunOnErrorActionIsBlacklisted
			default label is "RunOnErrorActionIsBlocklisted"
			when (RunOnErrorAction.ActionEntered and (RunOnErrorActionIsSystemBlocklisted or AsyncBlockedRunOnErrorAction exists))
			
		RunOnErrorActionIsAutoBlocklisted
			default label is "ActionIsBlocklisted"
			restricted
			when (AsyncBlockedRunOnErrorAction exists)	
			
		AnyActionIsBlocklisted
			default label is "ActionIsBlocklisted"
			when (ActionIsBlacklisted or RunOnErrorActionIsBlacklisted)
			
		HasAuditRecords
			default label is "AuditRecordsExist"
			when (AuditingRel exists)	
		
		AllowUpdate
			default label is untranslatable
			when (IsDataAreaAccessible or DerForceAllowRequestUpdate)
		
	Sets
		ByNameGroup
			indexed
			Sort Order
				Name
				Group
				DataArea
				AsyncActionRequest	    

		ByDataArea
			indexed
			Sort Order
				DataArea
				AsyncActionRequest

		ByTimeToExec
			indexed
			Sort Order
			    TimeToExec
				PendingScheduling
				AsyncActionRequest
		
		ByGroup
			indexed
			Sort Order
				Group
				ImplementingClass
				AsyncAction
			    TimeToExec
				AsyncActionRequest

		ByClass
			indexed
			Sort Order
				ImplementingClass
				AsyncAction
			    TimeToExec
				AsyncActionRequest

		ByAction
			indexed
			Sort Order
				AsyncAction
			    TimeToExec
				AsyncActionRequest
				
		ByInvokedFrom
			indexed
			Sort Order
				InvokedFrom
			    AsyncActionRequest				
			    
		BySessionId
			indexed
			Sort Order
				SessionId
				AsyncActionRequest
				
		ByDataAreaBatchTask
			indexed
			Sort Order
				DataArea
 				BatchTask
 				InactiveInGroup
 				AsyncActionRequest
 		
 		ByWaitFor
			indexed
			Sort Order
				WaitFor
			    AsyncActionRequest
			    
		ByCreatedStamp
			indexed
			Sort Order
				CreatedStamp descending
				AsyncActionRequest		
	    	
		ByBackgroundGroup
			indexed 
			Sort Order
				BackgroundGroup
				PendingScheduling 
				IsScheduled  
				TimeToExec  
				AsyncActionRequest					    				
				
		ByActionGroup
			indexed 
			Sort Order
				ActionGroup
				InactiveInGroup
				PendingScheduling 
				IsScheduled  
				TimeToExec  
				AsyncActionRequest
				
		ByDataAreaAction
			indexed
			Sort Order
				DataArea
				ImplementingClass
				AsyncAction
				AsyncActionRequest
				
		BySynchronizedGroupDataArea
			indexed
			Sort Order
				SynchronizedGroup
				DataArea
				InactiveInGroup
				AsyncActionRequest
				
		BySystemRequestPending
			indexed
			Sort Order			
				SystemRequest	
				PendingScheduling
			    TimeToExec
			    CreatedStamp
				AsyncActionRequest
				DataArea	
				
		ByForecastingFields
			indexed
			Sort Order		
				PendingScheduling
				IsScheduled
				TimeToExec
				LastTimeToExec
				AsyncActionRequest
									
    Relations
    	TriggersThatShouldNotBeDeleted
    		one-to-many relation to AsyncActionTrigger
			Field Mapping uses AsyncActionTriggerByRequest
				related.AsyncActionRequest = AsyncActionRequest
			Instance Selection
				where (related.Status != 8
				or (related.Status = 8
					and related.SaveHistory = true))	
								
    	NonFinishedTriggers
    		one-to-many relation to AsyncActionTrigger
			Field Mapping uses AsyncActionTriggerByRequest
				related.AsyncActionRequest = AsyncActionRequest
			Instance Selection
				where (related.Status != 8)
				
		WaitForActionGroupTriggers
    		one-to-many relation to AsyncActionTrigger
			Field Mapping uses AsyncActionTriggerByRequest
				related.AsyncActionRequest = AsyncActionRequest
			Instance Selection
				where (related.Status = 10)
	
		FailedTriggers
    		one-to-many relation to AsyncActionTrigger
			Field Mapping uses AsyncActionTriggerByRequest
				related.AsyncActionRequest = AsyncActionRequest
			Instance Selection
				where (related.Status = 3
				or related.Status = 4
				or related.Status = 6
				or related.Status = 7)
				
		NonFinishedNotInErrorTriggers
			one-to-many relation to AsyncActionTrigger
			Field Mapping uses AsyncActionTriggerByRequest
				related.AsyncActionRequest = AsyncActionRequest
			Instance Selection
				where (related.Status = 1 
				or related.Status = 2     
				or related.Status = 5	  
				or related.Status = 9	  
				or related.Status = 10	  
				or related.Status = 11)   
				
		NonFinishedNotInErrorSynchGroupTriggers
			one-to-many relation to AsyncActionTrigger
			Field Mapping uses AsyncActionTriggerByRequest
				related.AsyncActionRequest = AsyncActionRequest
			Instance Selection
				where (related.Status = 1 
				or related.Status = 2     
				or related.Status = 5	  
				or related.Status = 9	  
				or related.Status = 10)	  

				
		PendingOrInProgressSynchGroupTriggers
			one-to-many relation to AsyncActionTrigger
			Field Mapping uses AsyncActionTriggerByRequest
				related.AsyncActionRequest = AsyncActionRequest
			Instance Selection
				where (related.Status = 2     
				or related.Status = 5)	  
		
		StatisticTriggers
    		one-to-many relation to AsyncActionTrigger
			Field Mapping uses AsyncActionTriggerByRequest
				related.AsyncActionRequest = AsyncActionRequest
			Instance Selection
				where (related.IsStatisticsState)		
		
		InvokedChildrenRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByInvokedFrom
				related.InvokedFrom = AsyncActionRequest
			

		WaitForBackgroundGroupRel
			one-to-many relation to AsyncActionRequest

			Field Mapping uses ByBackgroundGroup
				related.BackgroundGroup = WaitFor
			Instance Selection			  		        
				where (related.BackgroundGroup entered) 
		

		WaitForWaitingRel
			one-to-many relation to AsyncActionRequest

			Field Mapping uses ByBackgroundGroup
				related.BackgroundGroup = WaitFor	
			Instance Selection			  		        
				where (related.BackgroundGroup entered  
				and   (related.PendingSchedulingCurrent 
				or     related.NonFinishedTriggersExist)) 
							

		DependentSetRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByWaitFor
				related.WaitFor = BackgroundGroup 
			Instance Selection					   
				where (related.WaitFor entered)  


		BackgroundGroupRel 
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByBackgroundGroup
				related.BackgroundGroup = BackgroundGroup  
			Instance Selection                        
				where (related.BackgroundGroup entered) 
		

		WaitForActionGroupRel
			one-to-many relation to AsyncActionRequest

			Field Mapping uses ByActionGroup
				related.ActionGroup = WaitFor
			Instance Selection			  		        
				where (related.ActionGroup entered) 
		

		WaitForActionGroupWaitingRel
			one-to-many relation to AsyncActionRequest

			Field Mapping uses ByActionGroup
				related.ActionGroup = WaitFor	
				related.InactiveInGroup = false 
			Instance Selection			  		        
				where (related.ActionGroup entered  
				and   (related.PendingSchedulingCurrent 
				or     related.NonFinishedTriggersExist)) 
				
		RootActionGroupRel
			one-to-many relation to AsyncActionRequest
				Field Mapping uses symbolic key
					related.AsyncActionRequest = ActionGroup	
				

		ActionGroupRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByActionGroup
				related.ActionGroup = ActionGroup  
			Instance Selection                     
				where (related.ActionGroup entered) 
				

		ActionGroupActiveRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses ByActionGroup
				related.ActionGroup = ActionGroup  
				related.InactiveInGroup = false    
			Instance Selection                     
				where (related.ActionGroup entered) 
		
		ActionGroupActiveExcludingThisRel
			one-to-many relation using ActionGroupActiveRel
			Instance Selection
				where (related.AsyncActionRequest != AsyncActionRequest
				and   (related.PendingSchedulingCurrent
				or     related.NonFinishedTriggersExist))
				
		ActionGroupRelExcludeCurrentAsyncIdRel
			one-to-many relation using ActionGroupActiveRel
			Instance Selection
				where (related.AsyncActionRequest != current async action request id) 
				
		ActionGroupRelExcludeThisAsyncIdRel
			one-to-many relation using ActionGroupActiveRel
			Instance Selection
				where (related.AsyncActionRequest != AsyncActionRequest)				
				

		WaitForRequestWaitingRel
			one-to-one relation to AsyncActionRequest

			Field Mapping uses symbolic key 
				related.AsyncActionRequest = WaitFor		
			
		DBSessionDebugRel
			one-to-one relation to DBSessionDebug
			Field Mapping uses BySessionId
				related.SessionId = SessionId

		AllDBSessionDebugIsEnabledRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses symbolic key
				related.AsyncActionRequest > blank
			Instance Selection
				where (related.DBSessionDebugIsEnabled)
				
		EffectiveDatedGroupRel
			one-to-one relation to EffectiveDatedGroup
			valid when (IsEffectiveDatedGroup)
			Field Mapping uses ByAsyncID
				related.AsyncID = AsyncActionRequest	
				
		FinishedTriggers
			one-to-many relation to AsyncActionTrigger
			Field Mapping uses AsyncActionTriggerByRequest
				related.AsyncActionRequest = AsyncActionRequest
				related.Status = 8				

		AsyncActionInvocationRel
			one-to-one relation to AsyncActionInvocation
			Field Mapping uses ByAsyncActionRequestTrigger
				related.AsyncActionRequest = AsyncActionRequest
				related.TriggerUniqueID = blank

		UnFinishedNotInProgressStateTriggerInvocationsRel
			one-to-many relation to AsyncActionInvocation
			Field Mapping uses ByAsyncActionRequestTrigger
				related.AsyncActionRequest = AsyncActionRequest
			Instance Selection
				where (related.TriggerUniqueID != blank
				and    related.AsyncActionInvocationStatus != 5		
				and    related.AsyncActionInvocationStatus != 8)	




		BatchTaskRel
			one-to-one relation to BatchTask
			Field Mapping uses symbolic key
				related.BatchTask = BatchTask
				
		CheckPointRel
			default label is "CheckpointRelation"
			one-to-many relation to CheckPoint
			Field Mapping uses ByAsyncActionRequestTrigger
				related.AsyncActionRequest = AsyncActionRequest
				
		InProgressStateTriggers
			one-to-many relation to AsyncActionTrigger
			Field Mapping uses AsyncActionTriggerByRequest
				related.AsyncActionRequest = AsyncActionRequest
				related.Status = 5			
				


		GlobalBackgroundGroupRel
			one-to-one relation to AsyncBackgroundGroup
			Field Mapping uses symbolic key					
				related.AsyncBackgroundGroup = BackgroundGroup
		
		SynchronizedGroupMembersRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses BySynchronizedGroupDataArea
				related.SynchronizedGroup = SynchronizedGroup
				related.DataArea = DataArea
			Instance Selection
				where (related.SynchronizedGroup entered) 
						
		OldActiveSynchronizedGroupExcludingThisRel
			one-to-many relation to AsyncActionRequest

			Field Mapping uses BySynchronizedGroupDataArea
				related.SynchronizedGroup = SynchronizedGroup
				related.DataArea = DataArea
				related.InactiveInGroup = false  
			Instance Selection
				where (related.SynchronizedGroup entered 
				and	   related.AsyncActionRequest != AsyncActionRequest
				and    related.NonFinishedNotInErrorSynchGroupTriggersExist) 
				
		ActiveSynchronizedGroupExcludingThisRel
			one-to-many relation to AsyncActionTrigger

			Field Mapping uses AsyncActionTriggerBySynchronizedGroup
				related.SynchronizedGroup = SynchronizedGroup
				related.DataArea = DataArea
			Instance Selection
				where ((related.Status = 1  
				or     related.Status = 2   
				or     related.Status = 5	
				or     related.Status = 9	
				or     related.Status = 10)	
				and	   related.AsyncActionRequest != AsyncActionRequest)
				
		OldActiveNonQueuedSynchronizedGroupRel
			one-to-many relation to AsyncActionRequest

			Field Mapping uses BySynchronizedGroupDataArea
				related.SynchronizedGroup = SynchronizedGroup
				related.DataArea = DataArea
				related.InactiveInGroup = false  
			Instance Selection
				where (related.SynchronizedGroup entered 
				and    related.PendingOrInProgressSynchGroupTriggersExist) 
		
		ActiveNonQueuedSynchronizedGroupRel 
			one-to-many relation to AsyncActionTrigger

			Field Mapping uses AsyncActionTriggerBySynchronizedGroup
				related.SynchronizedGroup = SynchronizedGroup
				related.DataArea = DataArea
			Instance Selection
				where (related.Status = 2   
				or     related.Status = 5)	
				
		ActiveSynchronizedGroupRel
			one-to-many relation to AsyncActionTrigger

			Field Mapping uses AsyncActionTriggerBySynchronizedGroup
				related.SynchronizedGroup = SynchronizedGroup
				related.DataArea = DataArea
			Instance Selection
				where (related.Status = 1   
				or     related.Status = 2   
				or     related.Status = 5	
				or     related.Status = 9	
				or     related.Status = 10)	
	
		UnfinishedSystemUpgradeDataAreaRequestsRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses BySystemRequestPending
				related.SystemRequest = SystemRequest.UpgradeDataArea
			Instance Selection
				where (related.DataArea = DataArea
				and   (related.PendingScheduling = true
				or	   related.NonFinishedTriggersExist))    
				
		UnfinishedSystemUpgradeSystemRequestsRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses BySystemRequestPending
				related.SystemRequest = SystemRequest.UpgradeSystem
			Instance Selection
				where (related.PendingScheduling = true
				or	   related.NonFinishedTriggersExist)
				
		UnfinishedNonBlockingUpgradeRequestsRel		
			one-to-many relation to AsyncActionRequest
			Field Mapping uses BySystemRequestPending
				related.SystemRequest = SystemRequest.NonBlockingUpgrade
			Instance Selection
				where (related.PendingScheduling = true
				or	   related.NonFinishedTriggersExist)
				
		FailedSystemUpgradeDataAreaRequestsRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses BySystemRequestPending
				related.SystemRequest = SystemRequest.UpgradeDataArea
			Instance Selection
				where (related.DataArea = DataArea
				and    related.FailedTriggersExist)    				 
				
		FailedSystemUpgradeSystemRequestsRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses BySystemRequestPending
				related.SystemRequest = SystemRequest.UpgradeSystem
			Instance Selection
				where (related.FailedTriggersExist)	
				
		FailedNonBlockingUpgradeRequestsRel
			one-to-many relation to AsyncActionRequest
			Field Mapping uses BySystemRequestPending
				related.SystemRequest = SystemRequest.NonBlockingUpgrade
			Instance Selection
				where (related.FailedTriggersExist)	
				
		AsyncStatusRel
			one-to-one relation to AsyncStatus
			Field Mapping uses Set1
				related.ID = LocalAsyncStatusID		
				
		AsyncBlockedAction
			one-to-many relation to AsyncBlocklist
			Field Mapping uses ByBlocklistMembersFields
				related.AsyncBlocklist.DataArea 		= DataArea
				related.AsyncBlocklist.BusinessView  	= ImplementingClass
        		related.AsyncBlocklist.BusinessAction   = AsyncAction
        	Instance Selection
				where (related.AsyncBlocklist.MappingField1 = MappingField1 and related.AsyncBlocklist.MappingField2 = MappingField2
				or    (ActionType != "DocumentAction" 
				and   related.AsyncBlocklist.MappingField1 = blank and related.AsyncBlocklist.MappingField2 = blank))
				
		AsyncBlockedRunOnErrorAction
			one-to-many relation to AsyncBlocklist
			Field Mapping uses ByBlocklistMembersFields
				related.AsyncBlocklist.DataArea 		= DataArea
				related.AsyncBlocklist.BusinessView  	= RunOnErrorAction.ImplementingClass
        		related.AsyncBlocklist.BusinessAction   = RunOnErrorAction.AsyncAction
        	Instance Selection 
				where (related.AsyncBlocklist.MappingField1 = MappingField1 and related.AsyncBlocklist.MappingField2 = MappingField2
				or    (ActionType != "DocumentAction" 
				and   related.AsyncBlocklist.MappingField1 = blank and related.AsyncBlocklist.MappingField2 = blank))	
				
		AuditingRel
			one-to-many relation to AsyncAuditEntry
			Field Mapping uses ByBusClassID
				related.Reference.BusinessClassName = "AsyncActionRequest"
				related.Reference.BusinessObjectKey = AsyncActionRequest  
	
		AsyncForecastSliceRel
			one-to-one relation to AsyncForecastSlice
			Field Mapping uses part of key
				related.AsyncSchedulingForecast = LocWorkSliceForecast
				related.SliceKey = DerivedForecastSliceKey	
				
		AsyncForecastSliceMemberRel 
			one-to-many relation to AsyncForecastSliceMember
			delete cascades
			Field Mapping uses ByAsyncRequest
				related.AsyncActionRequest = AsyncActionRequest 
				
		AsyncForecastSliceUniqueMemberRel
			one-to-one relation to AsyncForecastSliceMember
			Field Mapping uses ByAsyncRequest
				related.AsyncActionRequest = AsyncActionRequest 	
				related.AsyncSchedulingForecast = LocWorkSliceForecast
				related.SliceKey = DerivedForecastSliceKey	

	Actions
		Create is a Create Action	
			Field Rules
				
				MisfireThreshold
		    		constraint (MisfireThreshold >= 1)
		    			"MisfireThresholdHasToBeAtLeastOneMinute"
		    		default to 15
		    	TimeToExec
		    		if (IsAsOfDateSet) 
		    			if (not TimeToExec entered)
		    				required
			    				"AsOfDateSet.MustSpecifyStartTime."
		    			else
		    				constraint (TimeToExec >= BeginOfAsOfDate)
		    					"AsOfDateSet.MustSpecifyStartTimeOnOrAfterAsOfDate."
			


				LastTimeToExec
					if (LastTimeToExec entered)
						if (IsAsOfDateSet)
							constraint (LastTimeToExec >= BeginOfAsOfDate)
		    					"AsOfDateSet.LastTimeToExecuteMustBeOnOrAfterAsOfDate."
		    			else
		    				constraint (LastTimeToExec > system current timestamp)
		    					"LastTimeToExecuteMustBeGreaterThanCurrentTime"
		    					
		    			constraint (LastTimeToExec > TimeToExec)
		    				"LastTimeToExecuteMustBeGreaterThanFirstTimeToExecute"
			Action Rules	
				MimeType = "text/xml"
				Actor = actor
				AuthenticatedActor = authenticated actor
				IsProxy = CurrentIsProxy
				PendingScheduling = true
				InactiveInGroup = false
				CreatedStamp = system current timestamp   
				if (DBSessionDebugIsEnabledInThisContext) 
					SessionId = blank  
					invoke EnableDBSessionDebug
						invoked.EnableFor = 2 
						invoked.ForceContextLookup = true
				else
					SessionId = ContextUserSessionId
					
					if (MingleLogicalIDInThisContext)
						invoke SaveContextMingleLID
					else
						invoke SaveInvokeSecurity
				
			Exit Rules
				include DataAreaConstraintBlock
				
				if (not TranDisableAudit and AsyncAuditingEnabled) 
					invoke Create AsyncAuditEntry  
				 
				TranDisableAudit = false
			
		CreateRequest is a Create Action
			restricted


			
			Field Rules
				MisfireThreshold
		    		constraint (MisfireThreshold >= 1)
		    			"MisfireThresholdHasToBeAtLeastOneMinute"
		    		default to 15
		    	TimeToExec
		    		if (IsAsOfDateSet) 
		    			if (not TimeToExec entered)
		    				required
			    				"AsOfDateSet.MustSpecifyStartTime."
		    			else
		    				constraint (TimeToExec >= BeginOfAsOfDate)
		    					"AsOfDateSet.MustSpecifyStartTimeOnOrAfterAsOfDate."
				LastTimeToExec
					if (LastTimeToExec entered)
						if (IsAsOfDateSet)
							constraint (LastTimeToExec >= BeginOfAsOfDate)
		    					"AsOfDateSet.LastTimeToExecuteMustBeOnOrAfterAsOfDate."
		    			else
		    				constraint (LastTimeToExec > system current timestamp)
		    					"LastTimeToExecuteMustBeGreaterThanCurrentTime"
		    					
		    			constraint (LastTimeToExec > TimeToExec)
		    				"LastTimeToExecuteMustBeGreaterThanFirstTimeToExecute"		    					
				MimeType 
					default to "text/xml"		
					
				ScheduleTemplate
					if (ScheduleType.CopyFromTemplate)
						required    	
					
			Local Fields
				LocalPendingScheduling is Boolean

			Entrance Rules

				if (TranEmailAddressMultiple entered)
					EmailAddressMultiple = TranEmailAddressMultiple	
				
				if (TranAGEmailAddress entered)
					ActionGroupNotification = TranAGEmailAddress
				
			Action Rules	
				Actor = actor
				AuthenticatedActor = authenticated actor
				IsProxy = CurrentIsProxy
				
				if (SystemRequest.Throttled)
					LocalPendingScheduling = PendingScheduling or CreateSystemThrottleRequestsEnabled 
				else
					LocalPendingScheduling = true
					
				PendingScheduling = LocalPendingScheduling
					
				CreatedStamp = system current timestamp
				if (DBSessionDebugIsEnabledInThisContext) 
					SessionId = blank  
					invoke EnableDBSessionDebug
						invoked.EnableFor = 2 
						invoked.ForceContextLookup = true
				else
					SessionId = ContextUserSessionId
					
					if (MingleLogicalIDInThisContext)
						invoke SaveContextMingleLID
					else
						invoke SaveInvokeSecurity
						    		
				if (ScheduleType.ByDateInMonth)
					PendingScheduling = LocalPendingScheduling 
					IsScheduled = true					     
					ScheduleFrequencySeconds = blank 	     
					ScheduleWeekDay	= 0					     
					initialize ScheduleWeekDaysArray         
    				ScheduleWeekDayOccurence = 0		     
    				initialize ScheduleWeekDayOccurenceArray 
    				ScheduleWeekNumber = 0	 			     
    				initialize ScheduleWeekNumbersArray      
				else
				if (ScheduleType.ByDay)
					PendingScheduling = LocalPendingScheduling 
					IsScheduled = true				    
					ScheduleFrequencySeconds = blank    
    				ScheduleWeekNumber = 0			    
    				initialize ScheduleWeekNumbersArray 
    				ScheduleDay = 0					    
    				initialize ScheduleDaysArray        
    			else
    			if (ScheduleType.ByWeekNumber)
    				PendingScheduling = LocalPendingScheduling 
					IsScheduled = true				         
					ScheduleFrequencySeconds = blank         
					ScheduleMonth	= 0				         
					initialize ScheduleMonthsArray           
	    			ScheduleWeekDayOccurence = 0	         
	    			initialize ScheduleWeekDayOccurenceArray 
	    			ScheduleDay = 0					         
	    			initialize ScheduleDaysArray             
	    		else
	    		if (ScheduleType.AdvancedSchedule)
	    			PendingScheduling = LocalPendingScheduling	
					IsScheduled = true				
					ScheduleFrequencySeconds = blank 
				else
	    		if (ScheduleType.ByFrequency)
	    			if (ScheduleFrequencyType.Hours)
						ScheduleFrequencySeconds = TransScheduleFrequencySeconds * 3600
					else
					if (ScheduleFrequencyType.Minutes)
						ScheduleFrequencySeconds = TransScheduleFrequencySeconds * 60
					else
						ScheduleFrequencySeconds = TransScheduleFrequencySeconds
						
					ScheduleFrequencyType = ScheduleFrequencyType.Seconds	
	    			PendingScheduling = LocalPendingScheduling 
					IsScheduled = true					     
					ScheduleWeekDay	= 0					     
					initialize ScheduleWeekDaysArray         
    				ScheduleWeekDayOccurence = 0		     
    				initialize ScheduleWeekDayOccurenceArray 
    				ScheduleWeekNumber = 0				     
    				initialize ScheduleWeekNumbersArray      
    				ScheduleYearType = 0            	     
    				initialize AsyncScheduleYear		     

					ScheduleMonth	= 0					     
					initialize ScheduleMonthsArray  	     
	    			ScheduleDay = 0						     
	    			initialize ScheduleDaysArray    	     
	    			ScheduleHour = -3  			    	     
	    			initialize ScheduleHoursArray            
	    			ScheduleMinute = -3					     
	    			initialize ScheduleMinutesArray			 
	    			initialize ScheduleExclusion			 
	    		else
	    		if (ScheduleType.CopyFromTemplate)
	    			PendingScheduling 				= LocalPendingScheduling	
					IsScheduled 					= true						
					ScheduleFrequencySeconds 		= blank 					
	    			ScheduleYearType 				= ScheduleTemplate.ScheduleYearType
	    			AsyncScheduleYear 				= ScheduleTemplate.AsyncScheduleYear
	    			ScheduleMonth 					= ScheduleTemplate.ScheduleMonth
	    			ScheduleMonthsArray				= ScheduleTemplate.ScheduleMonthsArray
	    			ScheduleDay						= ScheduleTemplate.ScheduleDay
	    			ScheduleDaysArray				= ScheduleTemplate.ScheduleDaysArray
	    			ScheduleWeekDay					= ScheduleTemplate.ScheduleWeekDay
	    			ScheduleWeekDaysArray			= ScheduleTemplate.ScheduleWeekDaysArray		
	    			ScheduleWeekDayOccurence		= ScheduleTemplate.ScheduleWeekDayOccurence
	    			ScheduleWeekDayOccurenceArray	= ScheduleTemplate.ScheduleWeekDayOccurenceArray
	    			ScheduleWeekNumber				= ScheduleTemplate.ScheduleWeekNumber
	    			ScheduleWeekNumbersArray		= ScheduleTemplate.ScheduleWeekNumbersArray
	    			ScheduleHour					= ScheduleTemplate.ScheduleHour
	    			ScheduleHoursArray				= ScheduleTemplate.ScheduleHoursArray
	    			ScheduleMinute					= ScheduleTemplate.ScheduleMinute
	    			ScheduleMinutesArray			= ScheduleTemplate.ScheduleMinutesArray
	    			ScheduleTimeZone				= ScheduleTemplate.ScheduleTimeZone
	    			
				InactiveInGroup = not PendingScheduling 
					    			
			Exit Rules
				include DataAreaConstraintBlock
				
		Update is an Update Action
			valid when (AllowUpdate)
			
			Field Rules
				Actor
					cannot be changed
				AuthenticatedActor
					cannot be changed
				IsProxy
					cannot be changed
				CreatedStamp
    				cannot be changed
    				
    		Action Rules

    			if (not TranDisableAudit and AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry  
				
				TranDisableAudit = false
			
			Exit Rules
				include DataAreaConstraintBlock
				
				if (ScheduleFrequencySeconds entered
				and ScheduleFrequencySeconds changed)
					if (ScheduleFrequencyType.Hours)
						ScheduleFrequencySeconds = TransScheduleFrequencySeconds * 3600
					else
					if (ScheduleFrequencyType.Minutes)
						ScheduleFrequencySeconds = TransScheduleFrequencySeconds * 60
					else
						ScheduleFrequencySeconds = TransScheduleFrequencySeconds
						
					ScheduleFrequencyType = ScheduleFrequencyType.Seconds
					PendingScheduling = true			     
					InactiveInGroup = false           		 
					IsScheduled = true					     
					ScheduleWeekDay	= 0					     
					initialize ScheduleWeekDaysArray         
    				ScheduleWeekDayOccurence = 0		     
    				initialize ScheduleWeekDayOccurenceArray 
    				ScheduleWeekNumber = 0				     
    				initialize ScheduleWeekNumbersArray      
    				ScheduleYearType = 0            	     
    				initialize AsyncScheduleYear		     

					ScheduleMonth	= 0					     
					initialize ScheduleMonthsArray  	     
	    			ScheduleDay = 0						     
	    			initialize ScheduleDaysArray    	     
	    			ScheduleHour = -3  			    	     
	    			initialize ScheduleHoursArray            
	    			ScheduleMinute = -3					     
	    			initialize ScheduleMinutesArray			 
	    			initialize ScheduleExclusion			 

				if (old PendingScheduling != PendingScheduling)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = PendingScheduling
						invoked.ParamCallingAction = "Update"

    			include UpdateAsyncActionInvocation
    			
		ScheduleCopyFromTemplate is an Update Action
			restricted
			valid when (AllowUpdate)
			
			completion message is "ScheduleCopiedFromTemplate<ScheduleTemplate>"
			
			Field Rules
				ScheduleTemplate
					required
					
			Action Rules
				ScheduleYearType 				= ScheduleTemplate.ScheduleYearType
    			AsyncScheduleYear 				= ScheduleTemplate.AsyncScheduleYear
    			ScheduleMonth 					= ScheduleTemplate.ScheduleMonth
    			ScheduleMonthsArray				= ScheduleTemplate.ScheduleMonthsArray
    			ScheduleDay						= ScheduleTemplate.ScheduleDay
    			ScheduleDaysArray				= ScheduleTemplate.ScheduleDaysArray
    			ScheduleWeekDay					= ScheduleTemplate.ScheduleWeekDay
    			ScheduleWeekDaysArray			= ScheduleTemplate.ScheduleWeekDaysArray		
    			ScheduleWeekDayOccurence		= ScheduleTemplate.ScheduleWeekDayOccurence
    			ScheduleWeekDayOccurenceArray	= ScheduleTemplate.ScheduleWeekDayOccurenceArray
    			ScheduleWeekNumber				= ScheduleTemplate.ScheduleWeekNumber
    			ScheduleWeekNumbersArray		= ScheduleTemplate.ScheduleWeekNumbersArray
    			ScheduleHour					= ScheduleTemplate.ScheduleHour
    			ScheduleHoursArray				= ScheduleTemplate.ScheduleHoursArray
    			ScheduleMinute					= ScheduleTemplate.ScheduleMinute
    			ScheduleMinutesArray			= ScheduleTemplate.ScheduleMinutesArray
    			ScheduleTimeZone				= ScheduleTemplate.ScheduleTimeZone
			
			Exit Rules
				include DataAreaConstraintBlock
				if (not old PendingScheduling)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = true
						invoked.ParamCallingAction = "ScheduleCopyFromTemplate"
				PendingScheduling = true		
				InactiveInGroup = false   		
				TimeToExec = blank				
				IsScheduled = true				
				ScheduleFrequencySeconds = blank 
				ScheduleChanged = true          
				
    			include UpdateAsyncActionInvocation    			

		ScheduleAdvanced is an Update Action
			restricted
			valid when (AllowUpdate)
			
			Exit Rules
				include DataAreaConstraintBlock
				if (not old PendingScheduling)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = true
						invoked.ParamCallingAction = "ScheduleAdvanced"
				PendingScheduling = true		
				InactiveInGroup = false   		
				TimeToExec = blank				
				IsScheduled = true				
				ScheduleFrequencySeconds = blank 
				ScheduleChanged = true          
				
    			include UpdateAsyncActionInvocation
    			
    			if (not TranDisableAudit and AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry  
				
				TranDisableAudit = false

		MyScheduleAdvanced is an Update Action
			restricted
			valid when (AllowUpdate)
			
			Exit Rules
				invoke ScheduleAdvanced
				
		ScheduleDateTime is an Update Action
		    restricted
		    valid when (AllowUpdate)

			Exit Rules
				include DataAreaConstraintBlock
				if (not old PendingScheduling)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = true
						invoked.ParamCallingAction = "ScheduleDateTime"
				PendingScheduling = true			     
				InactiveInGroup = false            		
				TimeToExec = blank					     
				IsScheduled = true					     
				ScheduleWeekDay	= 0					     
				initialize ScheduleWeekDaysArray         
    			ScheduleWeekDayOccurence = 0		     
    			initialize ScheduleWeekDayOccurenceArray 
    			ScheduleWeekNumber = 0				     
    			initialize ScheduleWeekNumbersArray      
    			ScheduleFrequencySeconds = blank 	     
    			ScheduleChanged = true                   
				
    			include UpdateAsyncActionInvocation
    			
    			if (not TranDisableAudit and AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry  
				
				TranDisableAudit = false
	
		MyScheduleDateTime is an Update Action
		    restricted
		    valid when (AllowUpdate)
		    
		    Exit Rules
		    	invoke ScheduleDateTime

		ScheduleWeekNumber is an Update Action
		    restricted
		    valid when (AllowUpdate)
		    
			Exit Rules
				include DataAreaConstraintBlock
				if (not old PendingScheduling)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = true
						invoked.ParamCallingAction = "ScheduleWeekNumber"
				PendingScheduling = true		         
				InactiveInGroup = false           		 
				TimeToExec = blank				         
				IsScheduled = true				         
				ScheduleMonth	= 0				         
				initialize ScheduleMonthsArray           
    			ScheduleWeekDayOccurence = 0	         
    			initialize ScheduleWeekDayOccurenceArray 
    			ScheduleDay = 0					         
    			initialize ScheduleDaysArray             
    			ScheduleFrequencySeconds = blank         
				ScheduleChanged = true                   
				
    			include UpdateAsyncActionInvocation
    			
    			if (not TranDisableAudit and AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry  
				
				TranDisableAudit = false
				
		MyScheduleWeekNumber is an Update Action
		    restricted
		    valid when (AllowUpdate)
		    
			Exit Rules
				invoke ScheduleWeekNumber
		
		ScheduleWeekDay is an Update Action
		    restricted
		    valid when (AllowUpdate)
		    
			Exit Rules
				include DataAreaConstraintBlock
				if (not old PendingScheduling)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = true
						invoked.ParamCallingAction = "ScheduleWeekDay"
				PendingScheduling = true		    
				InactiveInGroup = false       		
				TimeToExec = blank				    
				IsScheduled = true				    
    			ScheduleWeekNumber = 0		    	
    			initialize ScheduleWeekNumbersArray 
    			ScheduleDay = 0					    
    			initialize ScheduleDaysArray        
    			ScheduleFrequencySeconds = blank    
				ScheduleChanged = true              
				
    			include UpdateAsyncActionInvocation
    			
    			if (not TranDisableAudit and AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry  
				
				TranDisableAudit = false
		
		MyScheduleWeekDay is an Update Action
		    restricted
		    valid when (AllowUpdate)
		    
		    Exit Rules
		    	invoke ScheduleWeekDay

		ScheduleFrequency is an Update Action
		    restricted
		    valid when (AllowUpdate)
		    
			Exit Rules
				include DataAreaConstraintBlock
				
				if (ScheduleFrequencyType.Hours)
					ScheduleFrequencySeconds = TransScheduleFrequencySeconds * 3600
				else
				if (ScheduleFrequencyType.Minutes)
					ScheduleFrequencySeconds = TransScheduleFrequencySeconds * 60
				else
					ScheduleFrequencySeconds = TransScheduleFrequencySeconds
				
				ScheduleFrequencyType = ScheduleFrequencyType.Seconds
				if (not old PendingScheduling)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = true
						invoked.ParamCallingAction = "ScheduleFrequency"
				PendingScheduling = true			     
				InactiveInGroup = false           		 
				IsScheduled = true					     
    			ScheduleWeekNumber = 0				     
    			initialize ScheduleWeekNumbersArray      
    			ScheduleWeekDayOccurence = 0		     
    			initialize ScheduleWeekDayOccurenceArray 
				ScheduleWeekDay	= 0				    	 
				initialize ScheduleWeekDaysArray         
    			ScheduleDay = 0						     
    			initialize ScheduleDaysArray   	 	     
				ScheduleMonth	= 0				 	     
				initialize ScheduleMonthsArray  	     
				ScheduleYearType = 0            	     
				initialize AsyncScheduleYear		     

				initialize ScheduleExclusion			 
				
    			include UpdateAsyncActionInvocation
    			
    			if (not TranDisableAudit and AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry  
				
				TranDisableAudit = false
 		
 		MyScheduleFrequency is an Update Action
		    restricted
		    valid when (AllowUpdate)
		    
			Exit Rules
				invoke ScheduleFrequency	
				
    	Delete is a Delete Action





    		Action Rules
				constraint (SystemRequest.No or (AnyTypeUpgradeRequest and not PendingScheduling))
					"SystemRequestsCannotBeDeleted."
    			
    			constraint (TriggersThatShouldNotBeDeleted not exists)
					"RequestHasTriggersThatShouldNotBeDeleted."
				
				if (DependentSetExists)
					confirmation required
						"DependentRequestsAreWaitingOnThisRequestToComplete.DeletingThisRequestWillAlsoDeleteDepenentRequests.AreYouSure?"
						
						invoke Delete DependentSetRel 
			
				if (AsyncActionMisfire set exists)
					confirmation required
						"MisfireReportsExist.DeletingThisRequestWillAlsoDeleteTheseReports.AreYouSure?"
				
				if (InvokeeSetCount > 99) 
					invoke ClearInvokedFrom in background 
						invoked.ParamInvokedFrom = AsyncActionRequest
				else
				if (InvokeeSetExists)
					invoke ClearInvokedFrom in foreground 
						invoked.ParamInvokedFrom = AsyncActionRequest
						
				if (not TranDisableAudit and AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry  
				
				TranDisableAudit = false
					
			Exit Rules
				if (AsyncActionInvocationRel exists) 
					invoke RequestInvocationDelete AsyncActionInvocationRel
				
				if (GlobalBackgroundGroupRel exists)
					invoke DeleteIfInactive GlobalBackgroundGroupRel 
						resume on error 
						invoked.RequestCreationTime = CreatedStamp

		DeleteInternal is an Instance Action 
			restricted
			Parameters
				CheckDependentSet is Boolean
				
			Local Fields
				LocNonFinishedExist is Boolean
				
			Action Rules
				if (NonFinishedTriggers exists)  
					LocNonFinishedExist = true 
				else
					LocNonFinishedExist = false
				
	    		if ((PendingScheduling = false) and (SystemRequest.No or AnyTypeUpgradeRequest) and (not LocNonFinishedExist))
	    			
	    			if (CheckDependentSet
	    			and DependentSetExists
	    			and CanDeleteDependentSetRel)
						invoke DeleteInternal DependentSetRel
							invoked.CheckDependentSet = CheckDependentSet
	    				
	    			invoke ActualDeleteInternal
	    		else
	    			InactiveInGroup = (not PendingScheduling and not LocNonFinishedExist)
	    			
		ActualDeleteInternal is a Delete Action
			restricted
			refresh and lock this instance


			Exit Rules
				if (AsyncActionInvocationRel exists) 
					invoke RequestInvocationDelete AsyncActionInvocationRel
				
				if (GlobalBackgroundGroupRel exists)
					invoke DeleteIfInactive GlobalBackgroundGroupRel
						resume on error 
						invoked.RequestCreationTime = CreatedStamp
				
		ClearInvokedFrom is a Set Action
			restricted
			disable checkpoint
			Parameters
				ParamInvokedFrom is UniqueID
					default label is "InvokedFromID"
			Instance Selection
				where (InvokedFrom = ParamInvokedFrom) 
			Sort Order is ByInvokedFrom	
			Action Rules
				Instance Rules
					InvokedFrom = blank
				
		ProcessRequests is a Set Action
			run in foreground
			restricted
			disable checkpoint
			Parameters
				ParamCheckForUpgradeRequests is Boolean          
					default label is "CheckForUpgradeRequests"  
			Instance Selection
				where (DerFullProcReqsCondition)
			Sort Order
			    PendingScheduling
			    TimeToExec
			    CreatedStamp
				AsyncActionRequest
			Action Rules
				Instance Rules
					if (DataAreaExists)
						invoke ProcessRequest
							invoked.ParamCheckForUpgradeRequests = ParamCheckForUpgradeRequests
					else
						log "RED_ALERT:DataArea<DataArea>IsInvalid.Request<AsyncActionRequest>,<Name>HasBeenDisabled."
						invoke SetPendingScheduling 
							resume on error 
							invoked.ParamPendingScheduling = false
						

		ProcessSystemRequests is a Set Action 
			run in foreground
			restricted
			disable checkpoint
			Parameters
				ParamCheckForUpgradeRequests is Boolean          
					default label is "CheckForUpgradeRequests"  
			Instance Selection
				where (DerFullProcSysReqsCondition)
			Sort Order is BySystemRequestPending
			Action Rules
				Instance Rules
					if (DataAreaExists)
						invoke ProcessRequest
							invoked.ParamCheckForUpgradeRequests = ParamCheckForUpgradeRequests
					else
						log "RED_ALERT:DataArea<DataArea>IsInvalid.SystemRequest<AsyncActionRequest>,<Name>HasBeenDisabled."
						invoke SetPendingScheduling 
							resume on error 
							invoked.ParamPendingScheduling = false
    	
    	ProcessRequest is an Instance Action
    		restricted
    		Parameters
				ParamCheckForUpgradeRequests is Boolean          
					default label is "CheckForUpgradeRequests"
			Local Fields
				GlobalUpgradeRequests is Numeric size 1
					States
						NotSet  value is 0
						True	value is 1
						False	value is 2
				DataAreaUpgradeRequests is Numeric size 1
					States
						True	value is 1
						False	value is 2
		
    		Action Rules
    		
    			if (RecordFastLocked) 
					include DataAreaConstraintBlock
					

					
					if (ParamCheckForUpgradeRequests
					and GlobalUpgradeRequests = GlobalUpgradeRequests.NotSet)
						if (UnfinishedSystemUpgradeSystemRequestsRel exists)
							GlobalUpgradeRequests = GlobalUpgradeRequests.True
						else
							GlobalUpgradeRequests = GlobalUpgradeRequests.False
							

					if (AnyTypeUpgradeRequest
					or  (not ParamCheckForUpgradeRequests)
					or  (DataAreaUpgradeRequests.False 
					and  GlobalUpgradeRequests.False))

						if (IsScheduled and not AnyTypeUpgradeRequest) 
		   					invoke ProcessScheduledRequest
		   				else
		   					invoke ProcessNonScheduledRequest

			Exit Rules
				if (RecordFastLocked) 
					if ((SystemRequest.No) and (SaveResultsOption))
						if (PendingScheduling)
							if (AsyncActionInvocationRel exists)	
					            invoke Update AsyncActionInvocationRel
				            		invoked.LastModTime			= system current timestamp 
			                    	invoked.AsyncActionInvocationStatus  = AsyncActionInvocationStatus.PendingScheduling
				                    invoked.TimeToExec			= TimeToExec
						else
						if (AsyncActionInvocationRel exists) 
							invoke Delete AsyncActionInvocationRel

    	ProcessNonScheduledRequest is an Instance Action
    		restricted
    		Local Fields
    			LocLogPendingSchedulingChange is Boolean
    		Action Rules
    			if (not HoldOnSynchronizedGroup
    			and not WaitingOnRequest
    			and ((not SystemRequest.No and not SystemRequest.Throttled)
    			or  not RequestThresholdExceeded))
    				include ActionGroupStartTimeReset
    				
    				if (SynchronizedGroup entered and DerActiveSynchronizedGroupExists) 
    					invoke WaitForSynchronizedGroup.Create AsyncActionTrigger
							invoked.AsyncActionRequest = AsyncActionRequest
							invoked.RequestedStart = CreatedStamp
							invoked.MaxRetries = NoOfRetries
							
							if (AnyTypeUpgradeRequest)
								invoked.UpgradeRequest = true
    					
    				else
	    				invoke Create AsyncActionTrigger
							invoked.AsyncActionRequest = AsyncActionRequest
							invoked.RequestedStart = CreatedStamp
							invoked.MaxRetries = NoOfRetries
							
							if (AnyTypeUpgradeRequest)
								invoked.UpgradeRequest = true

					LocLogPendingSchedulingChange = PendingScheduling
	 				PendingScheduling = false
	 				InactiveInGroup = false 
	 				
	 				TimeToExec = system current timestamp

			Exit Rules
				if (LocLogPendingSchedulingChange)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = false
						invoked.ParamCallingAction = "ProcessNonScheduledRequest"
    		    	

    	ProcessScheduledRequest is an Instance Action
    		restricted
    		Local Fields
    			NextTimeToExec is TimeStamp
    			Now is TimeStamp 	//Used to hold "now" so that "now" is the same throughout the action
    			NowMinusMisfireThreshold is TimeStamp
    			AtLeastOneMisfireTriggerCreated is Boolean
    			CurrentMisfireTriggerCreated is Boolean
    			HasMisfired is Boolean
    			MisfireThresholdSec is Numeric 7
    			CatchUpTime is Boolean
    			ActionGroupStartTimeCleared is Boolean
    			LocLogPendingSchedulingChange is Boolean
    		Action Rules
    			if (not HoldOnSynchronizedGroup
    			and not WaitingOnRequest
    			and ((not SystemRequest.No and not SystemRequest.Throttled)
    			or  not RequestThresholdExceeded))
    				AtLeastOneMisfireTriggerCreated = false
		    		CurrentMisfireTriggerCreated = false
		    		HasMisfired = false
	    			Now = system current timestamp
					if (TimeToExec = blank)


	    				invoke CalcNextScheduledTime
	    					if (ScheduleChanged) 
	    						invoked.FromTime = Now
	    					else
								invoked.FromTime = CreatedStamp
						NextTimeToExec = NextScheduledTime
					else



						NextTimeToExec = TimeToExec
						
					ScheduleChanged = false 
					


					MisfireThresholdSec = (MisfireThreshold * 60)
					NowMinusMisfireThreshold = Now - MisfireThresholdSec
					ActionGroupStartTimeCleared = false
					




					while ((NextTimeToExec != blank) and (NextTimeToExec < NowMinusMisfireThreshold))
						HasMisfired = true
						CurrentMisfireTriggerCreated = false
						CatchUpTime = false
						
						if (MisfireStrategy = MisfireStrategy.RunAllProcessesScheduled 
						or (MisfireStrategy = MisfireStrategy.RunOnce and not AtLeastOneMisfireTriggerCreated))


							if (ConcurrencyModeAllowMoreTriggers)
								if (not ActionGroupStartTimeCleared)
									include ActionGroupStartTimeReset
									ActionGroupStartTimeCleared = true
								if (SynchronizedGroup entered and DerActiveSynchronizedGroupExists) 
    								invoke WaitForSynchronizedGroup.Create AsyncActionTrigger
    									invoked.AsyncActionRequest = AsyncActionRequest
										invoked.RequestedStart = NextTimeToExec
										invoked.IsMisfire = true
										invoked.MaxRetries = NoOfRetries
    							else				
					 				invoke Create AsyncActionTrigger
										invoked.AsyncActionRequest = AsyncActionRequest
										invoked.RequestedStart = NextTimeToExec
										invoked.IsMisfire = true
										invoked.MaxRetries = NoOfRetries
								
								CurrentMisfireTriggerCreated = true 


								
								if  (IsScheduledByFrequency 
								and (Now - NextTimeToExec > ScheduleFrequencySeconds))
								  	CatchUpTime = true
							
							AtLeastOneMisfireTriggerCreated = true 
						else
						if  (IsScheduledByFrequency 
						and (Now - NextTimeToExec > ScheduleFrequencySeconds))
							CatchUpTime = true
							
						if (MisfireReportMode = MisfireReportMode.ReportAllProcesses)

							invoke Create AsyncActionMisfire
								invoked.AsyncActionRequest = AsyncActionRequest
								invoked.RequestedStart = NextTimeToExec
								invoked.TriggerCreated = CurrentMisfireTriggerCreated
						
						if (CatchUpTime)
							NextTimeToExec = Now - ScheduleFrequencySeconds 
						
	    				invoke CalcNextScheduledTime
							invoked.FromTime = NextTimeToExec
						NextTimeToExec = NextScheduledTime
					

					if (HasMisfired and ContinueOnMisfire = false)
						LocLogPendingSchedulingChange = PendingScheduling
						PendingScheduling = false  
						InactiveInGroup = not NonFinishedTriggersExist	
						if (NextTimeToExec = blank)
							TimeToExec = Now
						else
	    					TimeToExec = NextTimeToExec
					else



	


						while ((NextTimeToExec != blank) and (NextTimeToExec < Now)
						and   (LastTimeToExec = blank or LastTimeToExec >= NextTimeToExec))

							if (not ActionGroupStartTimeCleared)
								include ActionGroupStartTimeReset
								ActionGroupStartTimeCleared = true
							if (ConcurrencyModeAllowMoreTriggers)
								if (SynchronizedGroup entered and DerActiveSynchronizedGroupExists) 
    								invoke WaitForSynchronizedGroup.Create AsyncActionTrigger
    									invoked.AsyncActionRequest = AsyncActionRequest
										invoked.RequestedStart = NextTimeToExec
										invoked.IsMisfire = false
										invoked.MaxRetries = NoOfRetries
    							else
					 				invoke Create AsyncActionTrigger
										invoked.AsyncActionRequest = AsyncActionRequest
										invoked.RequestedStart = NextTimeToExec
										invoked.IsMisfire = false
										invoked.MaxRetries = NoOfRetries


								
								if (IsScheduledByFrequency 
								and (Now - NextTimeToExec > ScheduleFrequencySeconds))
									NextTimeToExec = Now - ScheduleFrequencySeconds
								
		    				invoke CalcNextScheduledTime
	    						invoked.FromTime = NextTimeToExec
	    					NextTimeToExec = NextScheduledTime
	    				


						if (NextTimeToExec = blank
						or (LastTimeToExec entered 
						and NextTimeToExec > LastTimeToExec))
							LocLogPendingSchedulingChange = PendingScheduling
							PendingScheduling = false
							InactiveInGroup = not NonFinishedTriggersExist
							TimeToExec = Now
						else
							TimeToExec = NextTimeToExec

			Exit Rules
				if (LocLogPendingSchedulingChange)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = false
						invoked.ParamCallingAction = "ProcessScheduledRequest"
    	
    	RequeueFailedTriggers is an Instance Action  
    		restricted

    		Action Rules
    			if (FailedTriggers exist)
    				for each FailedTriggers
    					if each.Status.LostWhilePending
    						invoke LostWhilePending.Requeue each
    					else 
    					if each.Status.FailedToStart
    						invoke FailedToStart.Requeue each
    					else 
    					if each.Status.LostWhileInProgress 
    						invoke LostWhileInProgress.Requeue each
    					else 
    					if each.Status.TerminatedAbnormally 
    						invoke TerminatedAbnormally.Requeue each
    				

    				if (AsyncAuditingEnabled) 
						invoke Create AsyncAuditEntry 
					
					TranDisableAudit = false
    						

    	ScheduledZoneConsistencyCheck is a Set Action  
			restricted
			run in foreground
			disable checkpoint
			Instance Selection
				where (ScheduleTimeZone not entered)
			Sort Order
				ScheduleTimeZone
    			AsyncActionRequest
 				
			Action Rules
				Instance Rules
					ScheduleTimeZone = "GMT"
									
    	Dump2 is an Instance Action
    		restricted
    		Parameters
    			Message is Alpha 40
    			NextTimeToExec is TimeStamp
    				default label is "NextTimeToExecute"
    		
    	Dump is an Instance Action
    		restricted
    			
    	CalcNextScheduledTime is an Instance Action
			default label is "CalculateNextScheduledTime"

    		restricted
    		Parameters
    			FromTime is TimeStamp
    			
	   	AddTrigger is an Instance Action
	   		restricted
    		Parameters 
    			AsyncPriority
			Action Rules
				include DataAreaConstraintBlock

				include ActionGroupStartTimeReset
				
				if (SynchronizedGroup entered and DerActiveSynchronizedGroupExists)
    				invoke WaitForSynchronizedGroup.Create AsyncActionTrigger
    					invoked.AsyncActionRequest = AsyncActionRequest
    			else
					invoke Create AsyncActionTrigger
						invoked.AsyncActionRequest = AsyncActionRequest
		
		DeleteAllMisfireReports is an Instance Action
			Action Rules
				for each AsyncActionMisfire set
					invoke Delete each

		DeleteAllFinishedTriggers is an Instance Action
			valid when (not LargeFinishedTriggers)
			Action Rules
				if (NumberFinishedTriggers > 500)
					confirmation required
						"DueToTheLargeVolumeOfTriggersItIsRecommendedToUseDeleteAllFinishedTriggersBackground.ProceedAnyway?"
						
				for each FinishedTriggers
					invoke Finished.DeleteInternal each
					
				if (AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry  
				
				TranDisableAudit = false
					
		DeleteAllFinishedTriggersBackground is an Instance Action	
			completion message is "TriggerDeleteSubmittedToBackground"
			
			Action Rules
				invoke DeleteFinishedTriggersForRequest AsyncActionTrigger
					invoked.PrmRequest = AsyncActionRequest	
							

    	EnableDBSessionDebug is an Instance Action

    		valid when (not DBSessionDebugIsEnabled)
	    	Parameters
				DBSessionDebugLevel
				LPLTrace
				EnableFor is Numeric size 1
    				default label is "EnableDatabaseSessionDebug"
    				States
    					All  value is 1
    					Next value is 2
    			ForceContextLookup is Boolean 
    				default label is "ForceParameterValueLookupViaContext"
			Parameter Rules
				DBSessionDebugLevel
					initial value is "standard"
				LPLTrace
					initial value is false
				EnableFor
					initial value is 2
					
    				if (AsyncActionTrigger not in context)
    					required
			Entrance Rules
				if (DBSessionDebugLevel.Minimal)
					LPLTrace = false
			
			Action Rules

				if (AsyncAuditingEnabled)
					invoke Create AsyncAuditEntry 
					
				TranDisableAudit = false
			Exit Rules
				SessionId = SessionId  


    	DisableDBSessionDebug is an Instance Action

    		valid when (DBSessionDebugIsEnabled)
    		Parameters
    			DisableFor is Numeric size 1
    				default label is "DisableDatabaseSessionDebug"
    				States
    					All  value is 1
    					Next value is 2
    		Parameter Rules
    			DisableFor
    				initial value is 1
    				if (AsyncActionTrigger not in context)
    					required
    		Action Rules

				if (AsyncAuditingEnabled and not AsyncAuditActionDisabled)
					invoke Create AsyncAuditEntry
					
				TranDisableAudit = false
			Exit Rules
				SessionId = SessionId  

				
		DisableAllDBSessionDebug is a Set Action
			run in foreground
			disable checkpoint
			Instance Selection
				where (DBSessionDebugIsEnabled)
			Sort Order
				AsyncActionRequest
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry 
				Instance Rules
					invoke DisableDBSessionDebug
						invoked.DisableFor = 1 
						
		EnableOrDisableMaintenanceRequests is a Set Action
			run in foreground
			disable checkpoint
			Parameters
				CurrentDataAreaOnly	is Boolean
				Option is Numeric size 1
					States
						Enable  value is 0
						Disable value is 1
			
			Instance Selection
				where (SystemRequest.Throttled and ((Option.Enable and not PendingScheduling) or (Option.Disable and PendingScheduling)) and (not CurrentDataAreaOnly or DataArea like parentcontext.dataarea))
			
			Sort Order is BySystemRequestPending
				
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
				Instance Rules
					invoke SetPendingScheduling
						if (Option.Enable)
							invoked.ParamPendingScheduling = true
						else
							invoked.ParamPendingScheduling = false
		
		EnableOrDisableMatchingRequests is a Set Action
			run in foreground
			disable checkpoint
			restricted
			default label is "EnableOrDisableMatchingRequests"
			Parameters
				CurrentDataAreaOnly	is Boolean
				Option is Numeric size 1
					States
						Enable  value is 0
						Disable value is 1
				ParamBusinessView is a BusinessView
					default label is untranslatable:"<ImplementingClass label>"
				ParamAction is a BusinessAction
					default label is untranslatable:"<AsyncAction label>"
			
			Parameter Rules
				ParamBusinessView
					required
				ParamAction
					required	
			
			Instance Selection
				where (ImplementingClass = ParamBusinessView and AsyncAction = ParamAction and ((Option.Enable and not PendingScheduling) or (Option.Disable and PendingScheduling)) and (not CurrentDataAreaOnly or DataArea like parentcontext.dataarea))
			
			Sort Order is ByClass
			
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
							
						TranDisableAudit = false
				Instance Rules
					invoke SetPendingScheduling
						resume on error 
						if (Option.Enable)
							invoked.ParamPendingScheduling = true
						else
							invoked.ParamPendingScheduling = false
							
		SetContextInformation is an Instance Action
			restricted
			Parameters
				ParamContextInformation is Text
					default label is "ContextInformation"						
				
			Action Rules
				ContextInformation = ParamContextInformation
					
		SaveContextMingleLID is an Instance Action
			restricted
			default label is "SaveContextMing\.\leLID" 

			
		SaveInvokeSecurity is an Instance Action
			restricted







		UpdateUnFinishedTriggerInvocations is an Instance Action
			restricted
			Action Rules
			


				include SetLocTypeField
			
				include UpdateUnFinishedTriggerInvocations		  
				
		SetPendingSchedulingTrueDelayed is an Instance Action   
			restricted
			refresh and lock this instance    	
			default label is untranslatable	
			Parameters 
				ParamTimeToExec is TimeStamp
					default label is untranslatable:"TimeToExecute"
			Parameter Rules
				ParamTimeToExec
					required
			Local Fields
				LocChangedPending is Boolean
				LocNow is TimeStamp
			Action Rules
				if (!PendingScheduling)
					PendingScheduling = true
					LocChangedPending = true
					
				InactiveInGroup = false
				




				if (ScheduleConcurrency.NoActionGroupConcurrency and MisfireStrategy.DoNothing and IsScheduledByFrequency)
					LocNow = system current timestamp
					

					if (ParamTimeToExec < LocNow)
						ParamTimeToExec = LocNow
					
				if (TimeToExec < ParamTimeToExec or TimeToExec = blank)
					TimeToExec = ParamTimeToExec 
				
				if (SystemRequest.AutoDisable)
					SystemRequestStamp = system current timestamp
						
					include UpdateAsyncActionInvocation

			Exit Rules
				if (LocChangedPending)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = PendingScheduling
						invoked.ParamCallingAction = "SetPendingScheduling"

		SetPendingScheduling is an Instance Action 
			restricted
			refresh and lock this instance
			Parameters 
				ParamPendingScheduling is Boolean
					default label is "PendingScheduling"
			Local Fields
				LocChangedPending is Boolean
				LocNow is TimeStamp
			Action Rules
				if (PendingScheduling != ParamPendingScheduling)
					PendingScheduling = ParamPendingScheduling
					LocChangedPending = true
				
				if (SystemRequest.AutoDisable)
					if (ParamPendingScheduling)
						SystemRequestStamp = system current timestamp
						




					if (ScheduleConcurrency.NoActionGroupConcurrency and MisfireStrategy.DoNothing and IsScheduledByFrequency)
						LocNow = system current timestamp
						
						if (TimeToExec < LocNow or TimeToExec = blank)
							TimeToExec = LocNow 
					
				if (LocChangedPending)
					if (PendingScheduling
					or  NonFinishedTriggersExist)
						InactiveInGroup = false
					else
						InactiveInGroup = true
	
					include UpdateAsyncActionInvocation

			Exit Rules
				if (LocChangedPending)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = PendingScheduling
						invoked.ParamCallingAction = "SetPendingScheduling"
						
		EnableScheduling is an Instance Action 
			valid when (not PendingScheduling)
			
			Action Rules
				invoke SetPendingScheduling
					invoked.ParamPendingScheduling = true
		
		
		DisableScheduling is an Instance Action 
			valid when (PendingScheduling)
			
			Action Rules
				invoke SetPendingScheduling
					invoked.ParamPendingScheduling = false
					
		CheckAutoDisablePendingScheduling is an Instance Action
			valid when (SystemRequest.AutoDisable)
			restricted
			refresh and lock this instance
			Local Fields
				LocLogPendingSchedulingChange is Boolean
			Parameters 
				RequestUpdateTime	is TimeStamp 
			Action Rules
				if (SystemRequest.AutoDisable
				and SystemRequestStamp <= RequestUpdateTime)
					LocLogPendingSchedulingChange = PendingScheduling
					PendingScheduling = false
					InactiveInGroup = not NonFinishedTriggersExist

			Exit Rules
				if (LocLogPendingSchedulingChange)
					invoke LogPendingSchedulingChange
						invoked.ParamNewPendingScheduling = false
						invoked.ParamCallingAction = "CheckAutoDisablePendingScheduling"
    			
		ResetFailedTriggersForRequest is an Instance Action
			valid when (FailedTriggersExist)
			Parameters
				PrmLostWhilePending is Boolean
					default label is "IncludeLostWhilePendingTriggers"
				PrmFailedToStart is Boolean
					default label is "IncludeFailedToStartTriggers"
				PrmLostWhileInProgress is Boolean
					default label is "IncludeLostWhileInProgressTriggers"	
				PrmTerminatedAbnormally is Boolean
					default label is "IncludeTerminatedAbnormallyTriggers"	
				CreatedFrom 		is TimeStamp
				CreatedThrough 		is TimeStamp
				CurrentDataAreaOnly	is Boolean 

			Parameter Rules
				PrmLostWhilePending
					initial value is true
					
					if (not PrmLostWhilePending and not PrmFailedToStart and not PrmLostWhileInProgress and not PrmTerminatedAbnormally)
						required
							"MustChooseAtLeastOneStatus"
						
				PrmFailedToStart
					initial value is true		
						
				PrmLostWhileInProgress
					initial value is true
					
				PrmTerminatedAbnormally
					initial value is true
					
				CurrentDataAreaOnly
					initial value is true	
					
			Action Rules
				invoke ResetFailedTriggersForRequest AsyncActionTrigger
					invoked.PrmRequest 				= AsyncActionRequest
					invoked.PrmLostWhilePending 	= PrmLostWhilePending
					invoked.PrmFailedToStart		= PrmFailedToStart
					invoked.PrmLostWhileInProgress	= PrmLostWhileInProgress
					invoked.PrmTerminatedAbnormally	= PrmTerminatedAbnormally
					invoked.CreatedFrom				= CreatedFrom
					invoked.CreatedThrough			= CreatedThrough	
					invoked.CurrentDataAreaOnly		= CurrentDataAreaOnly    			
	
		NotifyAsyncOfUpgradeRequest is an Instance Action 
			default label is untranslatable

    		restricted
    		
    		
		SetActionGroupStartTime is an Instance Action 
			restricted  
			Parameters
				PrmStartTime is TimeStamp
					default label is untranslatable:"<ActionGroupStartTime label>"
				
			Action Rules
				ActionGroupStartTime = PrmStartTime
		    		
    	CleanUpInactiveInGroup is a Set Action
    		restricted
    		disable checkpoint
			default label is untranslatable
			
			Instance Selection
				where (DataArea like parentcontext.dataarea and not InactiveInGroup)
			
			Sort Order is ByDataArea
				
			Action Rules
				Instance Rules
					if ((not ActionGroup entered
                    and  not SynchronizedGroup entered)				
					or  (not PendingScheduling
					and  not NonFinishedTriggersExist))
						invoke Update
							resume on error 
							invoked.InactiveInGroup = true
							invoked.TranDisableAudit = true
		
		CheckForInactiveInGroup is an Instance Action
    		restricted
    		refresh and lock this instance
    		Action Rules					
    			if (not InactiveInGroup
	    		and not PendingScheduling
				and not NonFinishedTriggersExist)	
					InactiveInGroup = true
					
		PurgeOrphanedRequests is a Set Action	
			disable checkpoint		
			Parameters
				CurrentDataAreaOnly	is Boolean
			
			Instance Selection
				where ((SystemRequest.No or SystemRequest.UpgradeDataArea or SystemRequest.UpgradeSystem or SystemRequest.NonBlockingUpgrade) and PendingScheduling = false and (not CurrentDataAreaOnly or DataArea like parentcontext.dataarea)
				and AsyncActionTrigger set not exists)
			
			Sort Order is BySystemRequestPending
			
			Action Rules
				Set Rules
					Exit Rules
						if (AsyncAuditingEnabled)
							invoke Create AsyncAuditEntry
						
						TranDisableAudit = false
				Instance Rules
					invoke DeleteInternal
						resume on error

		LogPendingSchedulingChange is an Instance Action
			restricted
			Parameters
				ParamNewPendingScheduling is Boolean
					default label is "NewPendingScheduling"
				ParamCallingAction is Alpha size 60
					default label is "CallingAction"
					
		BuildScheduleForecast is a Set Action
			synchronized on untranslatable:"<ParamSchedulingForecast>"
			run in background
				schedule concurrency is NoConcurrency

			Local Fields
				LocStartTime 		is TimeStamp
				LocEndTime 			is TimeStamp
				LocCurrentTime		is TimeStamp
				LocSliceOption		is a AsyncForecastTimeSliceSize
				LocIncludeOpt		is Numeric size 1 
				LocExcludeSysReq 	is Boolean
				
			Parameters
				ParamSchedulingForecast 	is an AsyncSchedulingForecast
					default label is "SchedulingForecast"
			
			Parameter Rules
				ParamSchedulingForecast
					required 
					
					if (ParamSchedulingForecast.LastForecastTime entered)
				 		confirmation required "ThisWillRebuildTheForecastFor<ParamSchedulingForecast>LastGenerated<ParamSchedulingForecast.LastForecastTime>.Continue?"
			
					LocCurrentTime = system current timestamp
					
					invoke SetTransTempTimeStamp ParamSchedulingForecast	
						invoked.TempTimeStamp = LocCurrentTime 
						
					LocStartTime = ParamSchedulingForecast.ExecutionStartTime 
					LocEndTime = ParamSchedulingForecast.ExecutionEndTime
					LocIncludeOpt = ParamSchedulingForecast.RequestsToInclude
					LocExcludeSysReq = ParamSchedulingForecast.ExcludeSystemRequests
			
			Queue Mapping Fields
				ParamSchedulingForecast
			

			Instance Selection
				where (PendingScheduling = true and (LastTimeToExec not entered or LastTimeToExec >= LocStartTime)
			    and (LocIncludeOpt = 2 or (LocIncludeOpt = 0 and IsScheduled) or (LocIncludeOpt = 1 and not IsScheduled))
			    and (not LocExcludeSysReq or SystemRequest.No) and (ScheduleFrequencySeconds = 0 or ScheduleFrequencySeconds > 59))
				
			Sort Order is ByForecastingFields
			
			Action Rules
				Set Rules
					Entrance Rules
						invoke Delete ParamSchedulingForecast.AsyncForecastSlice set 
						invoke Update ParamSchedulingForecast
							invoked.TransTempTimeStamp = blank
							invoked.LastForecastTime = LocCurrentTime
				
				Instance Rules

					LocWorkSliceForecast = ParamSchedulingForecast 
					LocWorkSliceOption = ParamSchedulingForecast.TimeSliceSize
					LocWorkSliceTimeZone = ParamSchedulingForecast.TimeZone
					
					if ((IsScheduled and TimeToExec entered) or (not IsScheduled and ParamSchedulingForecast.RequestsToInclude != 0))
						LocWorkSliceTime = TimeToExec
						
						if (LocWorkSliceTime = blank) 
							LocWorkSliceTime = LocCurrentTime
						
						if (LocWorkSliceTime >= LocStartTime and LocWorkSliceTime <= LocEndTime)
							LocWorkSliceInfoSet = false

							include UpdateForecastSliceInfo
					
					if (IsScheduled)	
						if (TimeToExec = blank) 
							if (ScheduleChanged)
	    						LocWorkSliceTime = LocCurrentTime 
	    					else
								LocWorkSliceTime = CreatedStamp
						else
							if (TimeToExec < LocCurrentTime)
								LocWorkSliceTime = LocCurrentTime
							else
								LocWorkSliceTime = TimeToExec 
								

						if (LocWorkSliceTime <= LocStartTime) 
							LocWorkSliceTime = (LocStartTime - 5) 
						
						if (LocWorkSliceTime < LocEndTime) 
							LocWorkSliceTime = NextForecastScheduledExecution
																
							while (LocWorkSliceTime != blank and LocWorkSliceTime >= LocStartTime and LocWorkSliceTime <= LocEndTime)
								
								LocWorkSliceInfoSet = false

								include UpdateForecastSliceInfo
								
								LocWorkSliceTime = NextForecastScheduledExecution
