ReceivableInvoiceDetail is a BusinessClass
	owned by ar
	prefix is ARO
	classic name is AROITEMS

	Ontology
		symbolic key is ReceivableInvoiceDetail
			classic set name is AROSET1
			classic name for ReceivableInvoiceDetail.ReceivableInvoiceDetailType is TRANS-TYPE

	Patterns

		implements StaticJava
		disable AuditIndex
		implements InlineUserFields
			size is 1000
		implements Archivable

	Persistent Fields
		Customer
		Status										is Numeric size 1
			States
				Unreleased					value is 0
				OpenTransaction				value is 1
				SelectForDraftApplication	value is 2
				ApplicationByDraftAcactNo	value is 5
					default label is "Application By Draft AcAct = No"
				ApplicationByDraftAcactYes	value is 6
					default label is "Application By Draft AcAct = Yes"
				FullyAppliedTransaction		value is 7
				ClosedTransaction			value is 8
				HistoricalTransaction		value is 9
		LastStatementDate							is Date
			classic name is LAST-STA-DATE
		TransactionDate								is Date  
			classic name is TRANS-DATE
			default label is "InvoiceDate"
		OriginalCurrency							is a FromCurrency
			classic name is ORIG-CURRENCY
			default label is "TransactionCurrency"	
		InvoiceAmount								is a FinanceCurrencyAmountGroup

			classic name for InvoiceAmount.CurrencyAmount is ORIG-AMT
			classic name for InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount is TRAN-AMT
		LastApplicationSequence
			disable Auditing
			classic name is APPLIED-SEQ
		DisputeSequence								is a DisputeSeq
			classic name is DISPUTE-SEQ
		DueDate
		LastFinanceChargeDate						is Date
			classic name is LAST-FC-DATE
		DiscountDate								is a DiscDateX3InAroitems
			classic name is DISC-DATE
		DiscountPercent								is a DiscPctX3InAroitems
			classic name is DISC-PCT
		ApplicationAmount is a FinanceCurrencyAmountGroup
			sql prefix is APP
			default label is "AppliedAmount"
			classic name for ApplicationAmount.CurrencyAmount is ORIG-APP-AMT
			classic name for ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount is APPLD-AMT
		AdjustmentAmount is a FinanceCurrencyAmountGroup
			default label is "AdjustAmount"
			sql prefix is ADJ
			classic name for AdjustmentAmount.CurrencyAmount is ORIG-ADJ-AMT
			classic name for AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount is ADJ-AMT
		Description
		ItemUser1
			classic name is ITEM-USER1
		LineNumber
			classic name is LINE-NBR
		LineType
		LineSequence								is a Sequence3
			classic name is LINE-SEQ
		AssociatedLine								is like UniqueID 
		ItemReference								is AlphaUpper size 32
			classic name is ITEM
		EFTNotification								is an EftNote
			classic name is EFT-NOTE
		EftExtract
		EftAction
		GainLossAmount								is an InternationalAmount
			classic name is GAINLOS-AMT
		AlternateReceivableInvoiceType
			classic name is ALT-TYPE
		HistoryPeriods								is a HistPer
			classic name is HIST-PER
		InvoiceLineObjID
			classic name is INVL-OBJ-ID
		CustomerPurchaseOrder
			classic name is CUST-PO-NBR
		TransactionUserField1						is a TransUser1
			classic name is TRANS-USER1
		ReceivableProcessLevel
			classic name is PROCESS-LEVEL
		SortAmount
		BankTransactionCode
			classic name is BANK-INST-CODE
		BankTransactionType							is a BankInstType
			classic name is BANK-INST-TYPE
		Sort1
		Sort2
		Sort3
		Sort4
		CurrencyDecimalsNumber						is an OrigNd
			classic name is ORIG-ND
		BatchNumber
			classic name is BATCH-NBR
		CurrencyMultiplicationOrDivision
			sql name is CMultiplicationOrDivision
			classic name is CURR-MUDV
		SummarizeDetail								is Boolean
			classic name is SUM-LINE
		GeneralLedgerDate							is Date
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		ReceivableGeneralLedgerCode
			classic name is AR-CODE
			default label is "ReceivableGlobalLedgerCode"
		RevalueCurrencyTransactions					is Boolean
			classic name is REVALUE-FL
		CancelFlag
		Desc										is a Description
		CurrencyRateToCustomerGroupCurrency
			sql name is CRateToCustomerGroupCurrency
			classic name is GROUP-RATE
		CustomerGroupCurrencyMultiplicationOrDivision
			sql name is CGCMultiplicationOrDivision
			classic name is GROUP-MUDV
		SalesRepresentative
			classic name is SALESMAN








		Origin										is AlphaUpper size 1
			classic name is ORIG-CODE
			States
				ManualInvoice				value is "B"
					default label is "Manual invoice"
				Chargeback					value is "C"
				FinanceLatePaymentCharge	value is "F"
					default label is "Finance late payment charge"
				GroupedMemo					value is "G"
					default label is "Grouped memo"
				Converted					value is "L"
				ManualMemo					value is "M"
					default label is "Manual memo"
				OrderProcessing				value is "O"
					default label is "Order processing"
				ReturnedPayment				value is "R"
					default label is "Returned payment"
				ClosingCreatedChargeback	value is "E"
					default label is "Closing created chargeback"
				PaymentCreatedCreditMemo	value is "P"
					default label is "Payment created credit memo"
				Obligation					value is "X"
				Projects					value is "J"
				IntercompanyBilling			value is "N"
				Sublease					value is "S"
				AccountsPayable				value is "A"
				ProformaInvoice				value is "I"
					default label is "Proforma created tax invoice"
				OverApplied 				value is "D"
		TermsCode
			classic name is TERMS-CD
		ProjectContractCustomer						is an AcCustomerId
			classic name is AC-CUSTOMER-ID
		ExemptProject								is Boolean
			classic name is ADJ-FL
		LatePaymentCharge							is Boolean
			classic name is LATE-CH-FL
		LastDunningLetter
			classic name is LST-DUNLTR-STM
		LastDunningLetterDate						is Date
			classic name is LAST-LTR-DATE
		LastDunningLetterTextCode					is like DunningTextCode
			classic name is LST-LTRTEXT-CD
		SentForCollection							is a SentForColl
			classic name is SENT-FOR-COLL
		AssessDunningFee							is an AssessDunFee
			classic name is ASSESS-DUN-FEE
		DunningLetterIndicator						is Boolean
			classic name is DUN-LTR-IND
		DiscountAmount								is an OrigDiscAmtX3InAroitems
			classic name is ORIG-DISC-AMT
		FinanceDimension2
		Project
		ProjectContract
			classic name is CONTRACT
		NationalAccountLastStatementDate			is Date
			sql name is NAccountLastStatementDate
			classic name is NA-LST-ST-DATE
		CreditDebitMemoReason						is a ReasonCode
			classic name is REASON-CODE
		DestinationIntrastatCountry					is a Country
			classic name is DEST-COUNTRY
		OriginIntrastatCountry						is a Country
			classic name is ORIGIN-COUNTRY
		CustomerBillTo								is a BillTo
			classic name is BILL-TO
		ForeignEconomicRegulatoryCode
			classic name is FOR-ECON-CODE
		TemporaryHold								is AlphaUpper size 1
			classic name is TEMP-HOLD
			States
				ApprovedByEngine	value is "A"
					default label is "Approved by Engine"
				SentForApproval		value is "S"
					default label is "Sent for Approval"
		GlobalLineType
			classic name is GLBL-LINE-TYPE
		ReceivableCrossReference
			classic name for ReceivableCrossReference.Company is XREF-COMPANY
			classic name for ReceivableCrossReference.ReceivableInvoiceType is XREF-TYPE
			classic name for ReceivableCrossReference.ReceivableInvoice is XREF-NBR
			classic name for ReceivableCrossReference.Customer is XREF-CUSTOMER
			classic name for ReceivableCrossReference.ReceivableInvoiceDetail is XREF-PYMT-SEQ
			classic name for ReceivableCrossReference.InvoiceDueDate is XREF-DUE-DATE
		InvoiceTypeCode
		Actor
		InvoiceFinanceCodeBlock						is a FinanceCodeBlock
		RegimeCode
		ApplicationCloseResult
			delete ignored
		CurrencyRate								is an OrigRate				
			classic name is ORIG-RATE
		TransactionAmount							is an InternationalAmount	
			classic name is ORIG-AMT
			restricted															
		BaseAmount									is an InternationalAmount	
			classic name is TRAN-AMT
			precision is Company.Currency.NumberOfDecimals
			restricted															
		BaseAppliedAmount							is an InternationalAmount	
			classic name is APPLD-AMT
			precision is Company.Currency.NumberOfDecimals
			restricted															
		BaseAdjustAmount							is an InternationalAmount	
			classic name is ADJ-AMT
			precision is Company.Currency.NumberOfDecimals
			restricted															
		AppliedAmount								is an InternationalAmount	
			classic name is ORIG-APP-AMT
			restricted															
		AdjustAmount								is an InternationalAmount	
			classic name is ORIG-ADJ-AMT
			restricted															
		HSNSACCode
		EFTNotificationExtractResult
			delete ignored
		EFTExtractResult
			delete ignored






		PortalPaymentSelected						is Boolean	
		PortalRequestedAppliedAmount				is an InternationalAmount	
			default label is "RequestedAppliedAmount"	





	Rule Blocks		

		UpdateReceivableProjectTransaction
			if  (Project not entered
			and  ProjectContract not entered
			and  FinanceDimension2 not entered)
				invoke Delete ReceivableProjectTransactionRel
			else
				if (ReceivableProjectTransactionRel not exists)
					invoke Create ReceivableProjectTransactionRel
						fill in fields from this instance
						invoked.BaseAmount				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.OpenBaseAmount			= BaseOpenAmount
						invoked.OpenSortBaseAmount		= BaseOpenAmount
						invoked.OpenTransactionAmount	= OpenAmount
						invoked.TransactionAmount 		= InvoiceAmount.CurrencyAmount
						if (CancelFlag.OpenItemHasBeenTransfered)
							invoked.CancelDate			= ReceivableInvoiceTransferRel.CancelDate
				else
					invoke UpdateFromReceivableInvoiceDetail ReceivableProjectTransactionRel
						fill in fields from this instance
						invoked.BaseAmount				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.OpenBaseAmount			= BaseOpenAmount
						invoked.OpenSortBaseAmount		= BaseOpenAmount
						invoked.OpenTransactionAmount	= OpenAmount
						invoked.TransactionAmount 		= InvoiceAmount.CurrencyAmount
						if (CancelFlag.OpenItemHasBeenTransfered)
							invoked.CancelDate			= ReceivableInvoiceTransferRel.CancelDate

		EditTransientOperator
			if (Company.CashOperatorRequired)
				if (TransientOperator not entered)
					if (ReceivablePayment.ReceivableOperator entered)
						TransientOperator = ReceivablePayment.ReceivableOperator
					else
						TransientOperator = actor
				constraint (TransientOperator entered)
					"OperatorIsRequired"
				constraint (TransientOperatorRel exists)
					"OperatorDoesNotExist"
				constraint (TransientOperatorRel.ActiveStatus.Active)
					"OperatorIsNotActive"

		EditAllowSelectDistributionSetForApplyCredit
			if (AllowSelectDistributionSet)
				constraint (CreditMemoCompanyAllowSelectDistributionSet)
					"BothCreditMemoAndInvoiceCompaniesMustHave_Specify_Distribution_MixChecked"
				constraint (CreditAndInvoiceAreBothFundAccountingOrBothNot)
					"BothCreditMemoAndInvoiceMustSupport_Fund_Accounting"

			if (CreditMemoCompanyAllowSelectDistributionSet)
				constraint (AllowSelectDistributionSet)
					"BothCreditMemoAndInvoiceCompaniesMustHave_Specify_Distribution_MixChecked"

		DeleteAllApplications
			constraint (ReceivableCreditApplicationRel exists)
				"NoApplicationsExistForThisTransaction"
			for each ReceivableCreditApplicationRel
				if (each.ApplicationAmount.CurrencyAmount < 0
				and each.ReceivableApplication.ApplicationSequence = 1)
					constraint (each.Status.UnreleasedCashApplication)
						"CannotProcess;MemoChargebackExists"

			for each UnpostedCreditApplicationRel

				LocalCreditCompany		= each.CreditTransaction.CreditCompany
				LocalCreditBatchNumber	= each.CreditTransaction.CreditBatch
				LocalCreditSequence		= each.CreditTransaction.CreditSequence

				if (LocalDelUnpostedReceivablePaymentRemittanceRel exists)
					invoke FastUpdate LocalDelUnpostedReceivablePaymentRemittanceRel
						invoked.Status				= 1

				if (each.Status.UnreleasedCashApplication)
					invoke UnreleasedCashApplication.Remove each
				else
				if (each.Status.RequiresAuditListing)
					invoke RequiresAuditListing.Remove each
				else
				if (each.Status.AvailableForPosting)
					invoke AvailableForPosting.Remove each



		CalculateOpenCurrencyAmounts
			LocalCurrencyCalculationGroup.FinanceEnterpriseGroup					= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			LocalCurrencyCalculationGroup.ExchangeDate								= ReceivableInvoiceRel.TransactionDate
			LocalCurrencyCalculationGroup.FromCurrency								= OriginalCurrency
			LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency				= Company.AccountingEntity.FunctionalCurrency
			LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate		= CurrencyRate
			LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency				= Company.AccountingEntity.AlternateCurrency

			LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency				= Company.AccountingEntity.AlternateCurrency2
			LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency				= Company.AccountingEntity.AlternateCurrency3
			LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency					= Company.FinanceEnterpriseGroup.ReportCurrencyOne
			LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency					= Company.FinanceEnterpriseGroup.ReportCurrencyTwo
			LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency					= Company.FinanceEnterpriseGroup.ReportCurrencyThree
			LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency					= Company.FinanceEnterpriseGroup.ReportCurrencyFour
			LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency					= Company.FinanceEnterpriseGroup.ReportCurrencyFive
			LocalCurrencyCalculationGroup.CurrencyAmount							= PrmOpenAmount

			LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount.EnteredCurrencyRate
			LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
			LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
			LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate			= InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate			= InvoiceAmount.ReportAmount2.EnteredCurrencyRate
			LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate			= InvoiceAmount.ReportAmount3.EnteredCurrencyRate
			LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate			= InvoiceAmount.ReportAmount4.EnteredCurrencyRate
			LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate			= InvoiceAmount.ReportAmount5.EnteredCurrencyRate
			LocalOrigOpenAmount.ExchangeDate										= ReceivableInvoiceRel.TransactionDate
			LocalOrigOpenAmount.CurrencyAmount										= PrmOpenAmount

			LocalOrigOpenAmount.FunctionalAmount.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount
			LocalOrigOpenAmount.FunctionalAmount.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyRate
			if (Company.AccountingEntity.AlternateCurrency entered)
				LocalOrigOpenAmount.AlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount
				LocalOrigOpenAmount.AlternateAmount.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyRate
			if (Company.AccountingEntity.AlternateCurrency2 entered)
				LocalOrigOpenAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount
				LocalOrigOpenAmount.AlternateAmount2.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyRate
			if (Company.AccountingEntity.AlternateCurrency3 entered)
				LocalOrigOpenAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount
				LocalOrigOpenAmount.AlternateAmount3.EnteredCurrencyRate		= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyRate
			if (Company.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				LocalOrigOpenAmount.ReportAmount1.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount
				LocalOrigOpenAmount.ReportAmount1.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyRate
			if (Company.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				LocalOrigOpenAmount.ReportAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount
				LocalOrigOpenAmount.ReportAmount2.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyRate
			if (Company.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				LocalOrigOpenAmount.ReportAmount3.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount
				LocalOrigOpenAmount.ReportAmount3.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyRate
			if (Company.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				LocalOrigOpenAmount.ReportAmount4.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount
				LocalOrigOpenAmount.ReportAmount4.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyRate
			if (Company.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				LocalOrigOpenAmount.ReportAmount5.EnteredCurrencyAmount			= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount
				LocalOrigOpenAmount.ReportAmount5.EnteredCurrencyRate			= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyRate


		ProrateGain
			if (LocalOpenDetailPercentage != 1)
				GainLossCalculation.GainAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.FunctionalAmount.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.AlternateAmount.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.AlternateAmount.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.AlternateAmount2.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.AlternateAmount3.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalOpenDetailPercentage * GainLossCalculation.GainAmount.ToFunctionalAmount.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.ToAlternateAmount.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.ToAlternateAmount.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalOpenDetailPercentage * GainLossCalculation.GainAmount.ToAlternateAmount2.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.ToAlternateAmount3.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.ProjectAmount.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.ProjectAmount.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.ReportAmount1.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.ReportAmount1.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.ReportAmount2.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.ReportAmount2.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.ReportAmount3.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.ReportAmount3.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.ReportAmount4.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.ReportAmount4.EnteredCurrencyAmount
				GainLossCalculation.GainAmount.ReportAmount5.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.GainAmount.ReportAmount5.EnteredCurrencyAmount

				LocalNumberOfDecimals = Company.AccountingEntity.FunctionalCurrency.NumberOfDecimals
				round GainLossCalculation.GainAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency.NumberOfDecimals
				round GainLossCalculation.GainAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency2.NumberOfDecimals
				round GainLossCalculation.GainAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency3.NumberOfDecimals
				round GainLossCalculation.GainAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
				round GainLossCalculation.GainAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
				round GainLossCalculation.GainAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
				round GainLossCalculation.GainAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
				round GainLossCalculation.GainAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.Project.Currency.NumberOfDecimals
				round GainLossCalculation.GainAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
				round GainLossCalculation.GainAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
				round GainLossCalculation.GainAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
				round GainLossCalculation.GainAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
				round GainLossCalculation.GainAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
				round GainLossCalculation.GainAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

		ProrateLoss
			if (LocalOpenDetailPercentage != 1)
				GainLossCalculation.LossAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.FunctionalAmount.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.AlternateAmount.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.AlternateAmount.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.AlternateAmount2.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.AlternateAmount2.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.AlternateAmount3.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.AlternateAmount3.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.ToFunctionalAmount.EnteredCurrencyAmount = LocalOpenDetailPercentage * GainLossCalculation.LossAmount.ToFunctionalAmount.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.ToAlternateAmount.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.ToAlternateAmount.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.ToAlternateAmount2.EnteredCurrencyAmount = LocalOpenDetailPercentage * GainLossCalculation.LossAmount.ToAlternateAmount2.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.ToAlternateAmount3.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.ProjectAmount.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.ProjectAmount.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.ReportAmount1.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.ReportAmount1.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.ReportAmount2.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.ReportAmount2.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.ReportAmount3.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.ReportAmount3.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.ReportAmount4.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.ReportAmount4.EnteredCurrencyAmount
				GainLossCalculation.LossAmount.ReportAmount5.EnteredCurrencyAmount		= LocalOpenDetailPercentage * GainLossCalculation.LossAmount.ReportAmount5.EnteredCurrencyAmount

				LocalNumberOfDecimals = Company.AccountingEntity.FunctionalCurrency.NumberOfDecimals
				round GainLossCalculation.LossAmount.FunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency.NumberOfDecimals
				round GainLossCalculation.LossAmount.AlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency2.NumberOfDecimals
				round GainLossCalculation.LossAmount.AlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.AccountingEntity.AlternateCurrency3.NumberOfDecimals
				round GainLossCalculation.LossAmount.AlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
				round GainLossCalculation.LossAmount.ToFunctionalAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
				round GainLossCalculation.LossAmount.ToAlternateAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
				round GainLossCalculation.LossAmount.ToAlternateAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
				round GainLossCalculation.LossAmount.ToAlternateAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = GainLossCalculation.OriginFinanceCodeBlock.Project.Currency.NumberOfDecimals
				round GainLossCalculation.LossAmount.ProjectAmount.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
				round GainLossCalculation.LossAmount.ReportAmount1.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
				round GainLossCalculation.LossAmount.ReportAmount2.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
				round GainLossCalculation.LossAmount.ReportAmount3.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
				round GainLossCalculation.LossAmount.ReportAmount4.EnteredCurrencyAmount to nearest DerivedLocalRoundTo
				LocalNumberOfDecimals = Company.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
				round GainLossCalculation.LossAmount.ReportAmount5.EnteredCurrencyAmount to nearest DerivedLocalRoundTo

		ProcessUnrealizedGainLossDistributions

			if (GainLossCalculation.GainLossFound)
				if (GainLossCalculation.SingleSystemAccount)
					LocalGainLossMessage		= UnrealizedCurrencyGainLossMessage

					if (ReceivableInvoiceRel.CanProrateDistributions)
						include ProrateGain
					invoke CreateGainLossFromBatch ReceivableGLDistribution
						invoked.ReceivableCompanyDataGroup.TransactionCompany = Company
						invoked.ReceivableCompanyDataGroup.Customer			  = Customer
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableProcessLevel
						invoked.BatchNumber									  = BatchNumber
						if(ReceivableInvoiceDetail.ReceivableInvoiceDetailType.Invoice)
							invoked.DocumentNumber							  = "11-"+ReceivableInvoiceDetail.Invoice
						else
							invoked.DocumentNumber							  = "12-"+ReceivableInvoiceDetail.Invoice
						invoked.TransType									  = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.Invoice										  = ReceivableInvoiceDetail.Invoice
						invoked.SequenceNumber								  = ReceivableInvoiceDetail.PaymentSeq
						if (PrmReversal.Yes)
							invoked.AutoReverseUnrealizedGainLoss				  = "N"
						else
							invoked.AutoReverseUnrealizedGainLoss				  = "Y"
						invoked.GeneralLedgerDate							  = PrmRevalueDate
						invoked.TransactionDate								  = PrmRevalueDate
						invoked.OriginalCurrency							  = OriginalCurrency
						invoked.Origin										  = "RU"
						invoked.AuditSummaryIndicator						  = "09"	
						invoked.Status										  = 2
						invoked.AccumulationType							  = "D"
						invoked.ReceivableCompanyGroup.GlCompany			  = Company
						invoked.Description									  = LocalGainLossMessage+" "+DerivedReceivableInvoiceDetailType+" " +ReceivableInvoiceDetail.Invoice
						invoked.DistributionAmount.ExchangeDate				  = PrmRevalueDate
						invoked.DistributionAmount.CurrencyAmount			  = blank
						if (ReceivableInvoiceRel.CanProrateDistributions
						or ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
							invoked.DistributionAmount.FunctionalAmount			  = GainLossCalculation.GainAmount.FunctionalAmount
							invoked.DistributionAmount.AlternateAmount		  	  = GainLossCalculation.GainAmount.AlternateAmount
							invoked.DistributionAmount.AlternateAmount2		  	  = GainLossCalculation.GainAmount.AlternateAmount2
							invoked.DistributionAmount.AlternateAmount3			  = GainLossCalculation.GainAmount.AlternateAmount3
							invoked.DistributionAmount.ToFunctionalAmount		  = GainLossCalculation.GainAmount.ToFunctionalAmount
							invoked.DistributionAmount.ToAlternateAmount		  = GainLossCalculation.GainAmount.ToAlternateAmount
							invoked.DistributionAmount.ToAlternateAmount2		  = GainLossCalculation.GainAmount.ToAlternateAmount2
							invoked.DistributionAmount.ToAlternateAmount3		  = GainLossCalculation.GainAmount.ToAlternateAmount3
							invoked.DistributionAmount.ProjectAmount			  = GainLossCalculation.GainAmount.ProjectAmount
							invoked.DistributionAmount.ReportAmount1			  = GainLossCalculation.GainAmount.ReportAmount1
							invoked.DistributionAmount.ReportAmount2			  = GainLossCalculation.GainAmount.ReportAmount2
							invoked.DistributionAmount.ReportAmount3			  = GainLossCalculation.GainAmount.ReportAmount3
							invoked.DistributionAmount.ReportAmount4			  = GainLossCalculation.GainAmount.ReportAmount4
							invoked.DistributionAmount.ReportAmount5			  = GainLossCalculation.GainAmount.ReportAmount5
						else
							initialize NegativeFinanceCurrencyAmount
							NegativeFinanceCurrencyAmount 						= GainLossCalculation.GainAmount
							LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
							invoked.DistributionAmount.FunctionalAmount			  = NegativeFinanceCurrencyAmount.FunctionalAmount
							invoked.DistributionAmount.AlternateAmount			  = NegativeFinanceCurrencyAmount.AlternateAmount
							invoked.DistributionAmount.AlternateAmount2			  = NegativeFinanceCurrencyAmount.AlternateAmount2
							invoked.DistributionAmount.AlternateAmount3			  = NegativeFinanceCurrencyAmount.AlternateAmount3
							invoked.DistributionAmount.ToFunctionalAmount		  = NegativeFinanceCurrencyAmount.ToFunctionalAmount
							invoked.DistributionAmount.ToAlternateAmount		  = NegativeFinanceCurrencyAmount.ToAlternateAmount
							invoked.DistributionAmount.ToAlternateAmount2		  = NegativeFinanceCurrencyAmount.ToAlternateAmount2
							invoked.DistributionAmount.ToAlternateAmount3		  = NegativeFinanceCurrencyAmount.ToAlternateAmount3
							invoked.DistributionAmount.ProjectAmount			  = NegativeFinanceCurrencyAmount.ProjectAmount
							invoked.DistributionAmount.ReportAmount1			  = NegativeFinanceCurrencyAmount.ReportAmount1
							invoked.DistributionAmount.ReportAmount2			  = NegativeFinanceCurrencyAmount.ReportAmount2
							invoked.DistributionAmount.ReportAmount3			  = NegativeFinanceCurrencyAmount.ReportAmount3
							invoked.DistributionAmount.ReportAmount4			  = NegativeFinanceCurrencyAmount.ReportAmount4
							invoked.DistributionAmount.ReportAmount5			  = NegativeFinanceCurrencyAmount.ReportAmount5
						invoked.GeneralLedgerAccount						  = GainLossCalculation.GainAccount


						invoked.DistributionAmount.KeepRateAndAmount		  = true

		 			if (ReceivableInvoiceRel.CanProrateDistributions
		 			or ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
		 				initialize NegativeFinanceCurrencyAmount
						NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount
						LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
						LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					else
						LocalDistributionAmount = GainLossCalculation.GainAmount

				else
					if (GainLossCalculation.AmountType.Positive
					or  GainLossCalculation.AmountType.NegativeAndPositive)



						if ((ReceivableInvoiceDetail.ReceivableInvoiceDetailType.Invoice
						or   ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo)
						and  !ReceivableInvoiceRel.CanProrateDistributions)
							NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount
							LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
							GainLossCalculation.GainAmount = NegativeFinanceCurrencyAmount

						LocalGainLossMessage	= UnrealizedCurrencyGainMessage



						if (ReceivableInvoiceRel.CanProrateDistributions)
							include ProrateGain

						invoke CreateGainLossFromBatch ReceivableGLDistribution
							invoked.ReceivableCompanyDataGroup.TransactionCompany = Company
							invoked.ReceivableCompanyDataGroup.Customer			  = Customer
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableProcessLevel
							invoked.BatchNumber									  = BatchNumber
							if(ReceivableInvoiceDetail.ReceivableInvoiceDetailType.Invoice)
								invoked.DocumentNumber							  = "11-"+ReceivableInvoiceDetail.Invoice
							else
								invoked.DocumentNumber							  = "12-"+ReceivableInvoiceDetail.Invoice
							invoked.TransType									  = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.Invoice										  = ReceivableInvoiceDetail.Invoice
							invoked.SequenceNumber								  = ReceivableInvoiceDetail.PaymentSeq
							if (PrmReversal.Yes)
								invoked.AutoReverseUnrealizedGainLoss				  = "N"
							else
								invoked.AutoReverseUnrealizedGainLoss				  = "Y"
							invoked.GeneralLedgerDate							  = PrmRevalueDate
							invoked.TransactionDate								  = PrmRevalueDate
							invoked.OriginalCurrency							  = OriginalCurrency
							invoked.Origin										  = "RU"
							invoked.AuditSummaryIndicator						  = "09"	
							invoked.Status										  = 2
							invoked.AccumulationType							  = "D"
							invoked.ReceivableCompanyGroup.GlCompany			  = Company
							invoked.Description									  = LocalGainLossMessage+" "+DerivedReceivableInvoiceDetailType+" " +ReceivableInvoiceDetail.Invoice
							invoked.DistributionAmount.ExchangeDate				  = PrmRevalueDate
							invoked.DistributionAmount.CurrencyAmount			  = blank
							invoked.DistributionAmount.FunctionalAmount			  = GainLossCalculation.GainAmount.FunctionalAmount
							invoked.DistributionAmount.AlternateAmount			  = GainLossCalculation.GainAmount.AlternateAmount
							invoked.DistributionAmount.AlternateAmount2			  = GainLossCalculation.GainAmount.AlternateAmount2
							invoked.DistributionAmount.AlternateAmount3			  = GainLossCalculation.GainAmount.AlternateAmount3
							invoked.DistributionAmount.ToFunctionalAmount		  = GainLossCalculation.GainAmount.ToFunctionalAmount
							invoked.DistributionAmount.ToAlternateAmount		  = GainLossCalculation.GainAmount.ToAlternateAmount
							invoked.DistributionAmount.ToAlternateAmount2		  = GainLossCalculation.GainAmount.ToAlternateAmount2
							invoked.DistributionAmount.ToAlternateAmount3		  = GainLossCalculation.GainAmount.ToAlternateAmount3
							invoked.DistributionAmount.ProjectAmount			  = GainLossCalculation.GainAmount.ProjectAmount
							invoked.DistributionAmount.ReportAmount1			  = GainLossCalculation.GainAmount.ReportAmount1
							invoked.DistributionAmount.ReportAmount2			  = GainLossCalculation.GainAmount.ReportAmount2
							invoked.DistributionAmount.ReportAmount3			  = GainLossCalculation.GainAmount.ReportAmount3
							invoked.DistributionAmount.ReportAmount4			  = GainLossCalculation.GainAmount.ReportAmount4
							invoked.DistributionAmount.ReportAmount5			  = GainLossCalculation.GainAmount.ReportAmount5




							invoked.GeneralLedgerAccount						  = GainLossCalculation.GainAccount


							invoked.DistributionAmount.KeepRateAndAmount		  = true

						NegativeFinanceCurrencyAmount = GainLossCalculation.GainAmount
						LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation

						LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount


					if (GainLossCalculation.AmountType.Negative
					or  GainLossCalculation.AmountType.NegativeAndPositive)



						if ((ReceivableInvoiceDetail.ReceivableInvoiceDetailType.Invoice
						or   ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo)
						and  !ReceivableInvoiceRel.CanProrateDistributions)
							NegativeFinanceCurrencyAmount = GainLossCalculation.LossAmount
							LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
							GainLossCalculation.LossAmount = NegativeFinanceCurrencyAmount

						LocalGainLossMessage		= UnrealizedCurrencyLossMessage



						if (ReceivableInvoiceRel.CanProrateDistributions)
							include ProrateLoss

						invoke CreateGainLossFromBatch ReceivableGLDistribution
							invoked.ReceivableCompanyDataGroup.TransactionCompany = Company
							invoked.ReceivableCompanyDataGroup.Customer			  = Customer
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableProcessLevel
							invoked.BatchNumber									  = BatchNumber
							if(ReceivableInvoiceDetail.ReceivableInvoiceDetailType.Invoice)
								invoked.DocumentNumber							  = "11-"+ReceivableInvoiceDetail.Invoice
							else
								invoked.DocumentNumber							  = "12-"+ReceivableInvoiceDetail.Invoice
							invoked.TransType									  = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.Invoice										  = ReceivableInvoiceDetail.Invoice
							invoked.SequenceNumber								  = ReceivableInvoiceDetail.PaymentSeq
							if (PrmReversal.Yes)
								invoked.AutoReverseUnrealizedGainLoss				  = "N"
							else
								invoked.AutoReverseUnrealizedGainLoss				  = "Y"
							invoked.GeneralLedgerDate							  = PrmRevalueDate
							invoked.TransactionDate								  = PrmRevalueDate
							invoked.OriginalCurrency							  = OriginalCurrency
							invoked.Origin										  = "RU"
							invoked.AuditSummaryIndicator						  = "09"	
							invoked.Status										  = 2
							invoked.AccumulationType							  = "D"
							invoked.ReceivableCompanyGroup.GlCompany			  = Company
							invoked.Description									  = LocalGainLossMessage+" "+DerivedReceivableInvoiceDetailType+" " +ReceivableInvoiceDetail.Invoice
							invoked.DistributionAmount.ExchangeDate				  = PrmRevalueDate
							invoked.DistributionAmount.CurrencyAmount			  = blank
							invoked.DistributionAmount.FunctionalAmount			  = GainLossCalculation.LossAmount.FunctionalAmount
							invoked.DistributionAmount.AlternateAmount			  = GainLossCalculation.LossAmount.AlternateAmount
							invoked.DistributionAmount.AlternateAmount2			  = GainLossCalculation.LossAmount.AlternateAmount2
							invoked.DistributionAmount.AlternateAmount3			  = GainLossCalculation.LossAmount.AlternateAmount3
							invoked.DistributionAmount.ToFunctionalAmount		  = GainLossCalculation.LossAmount.ToFunctionalAmount
							invoked.DistributionAmount.ToAlternateAmount		  = GainLossCalculation.LossAmount.ToAlternateAmount
							invoked.DistributionAmount.ToAlternateAmount2		  = GainLossCalculation.LossAmount.ToAlternateAmount2
							invoked.DistributionAmount.ToAlternateAmount3		  = GainLossCalculation.LossAmount.ToAlternateAmount3
							invoked.DistributionAmount.ProjectAmount			  = GainLossCalculation.LossAmount.ProjectAmount
							invoked.DistributionAmount.ReportAmount1			  = GainLossCalculation.LossAmount.ReportAmount1
							invoked.DistributionAmount.ReportAmount2			  = GainLossCalculation.LossAmount.ReportAmount2
							invoked.DistributionAmount.ReportAmount3			  = GainLossCalculation.LossAmount.ReportAmount3
							invoked.DistributionAmount.ReportAmount4			  = GainLossCalculation.LossAmount.ReportAmount4
							invoked.DistributionAmount.ReportAmount5			  = GainLossCalculation.LossAmount.ReportAmount5




							invoked.GeneralLedgerAccount						  = GainLossCalculation.LossAccount


							invoked.DistributionAmount.KeepRateAndAmount		  = true

						NegativeFinanceCurrencyAmount = GainLossCalculation.LossAmount
						LocalBoolean = NegativeFinanceCurrencyAmount.PerformCalculation
						LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount		+= NegativeFinanceCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount	+= NegativeFinanceCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ProjectAmount.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount1.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount2.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount3.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount4.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						LocalDistributionAmount.ReportAmount5.EnteredCurrencyAmount			+= NegativeFinanceCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

		SumAgingDisputeRelAmounts	
			if (!SumOfAgingDisputeRelAmountsDone)	
				initialize SumOfAgingDisputeRelDisputedAmount	
					for each AgingDisputeRel
						SumOfAgingDisputeRelDisputedAmount	 += each.DisputedAmount	
				SumOfAgingDisputeRelAmountsDone = true	

		SumSameInvoiceRelReceivableApplicationSelectRelAmounts	
			if (!SumOfSameInvoiceRelReceivableApplicationSelectRelAmountsDone)	
				initialize FirstSameInvoiceRelReceivableApplicationSelectRelGeneralLedgerDate	
				initialize SumOfSameInvoiceRelReceivableApplicationSelectRelPaymentApplicationAmount
				initialize SumOfSameInvoiceRelReceivableApplicationSelectRelTotalAdjustments
				initialize SumOfSameInvoiceRelReceivableApplicationSelectRelTotalCreditAdjustments	
					for each SameInvoiceRel
						FirstSameInvoiceRelReceivableApplicationSelectRelGeneralLedgerDate			 = first GeneralLedgerDate			
						SumOfSameInvoiceRelReceivableApplicationSelectRelPaymentApplicationAmount	 += each.ReceivableApplicationSelectRel.PaymentApplicationAmount	
						SumOfSameInvoiceRelReceivableApplicationSelectRelTotalAdjustments			 += each.ReceivableApplicationSelectRel.TotalAdjustments	
						SumOfSameInvoiceRelReceivableApplicationSelectRelTotalCreditAdjustments		 += each.ReceivableApplicationSelectRel.TotalCreditAdjustments	
				SumOfSameInvoiceRelReceivableApplicationSelectRelAmountsDone = true	

		SumSameInvoiceRelAmounts	
			if (!SumOfSameInvoiceRelAmountsDone)
				initialize SumOfSameInvoiceRelDerivedApplicationDiscount	
				initialize SumOfSameInvoiceRelOpenAmount	
				initialize SumOfSameInvoiceRelInvoiceAmountCurrencyAmount	
				initialize SumOfSameInvoiceRelApplicationAmountCurrencyAmount	
				initialize SumOfSameInvoiceRelAdjustmentAmountCurrencyAmount	
				LocalLowestStatus = Status
					for each SameInvoiceRel
						SumOfSameInvoiceRelDerivedApplicationDiscount		 += each.DerivedApplicationDiscount	
						SumOfSameInvoiceRelOpenAmount						 += each.OpenAmount	
						SumOfSameInvoiceRelInvoiceAmountCurrencyAmount		 += each.InvoiceAmount.CurrencyAmount	
						SumOfSameInvoiceRelApplicationAmountCurrencyAmount	 += each.ApplicationAmount.CurrencyAmount	
						SumOfSameInvoiceRelAdjustmentAmountCurrencyAmount	 += each.AdjustmentAmount.CurrencyAmount	
						if (each.Status < LocalLowestStatus)
							LocalLowestStatus = each.Status
				SumOfSameInvoiceRelAmountsDone = true	

		SumTransactionDetailAgePeriodRelAmounts	
			if (!SumOfTransactionDetailAgePeriodRelAmountsDone)
				initialize SumOfTransactionDetailAgePeriodRelInvoiceAmountCurrencyAmount
					for each TransactionDetailAgePeriodRel
						SumOfTransactionDetailAgePeriodRelInvoiceAmountCurrencyAmount	 += each.InvoiceAmount.CurrencyAmount
				SumOfTransactionDetailAgePeriodRelAmountsDone = true

		SumReceivableApplicationAdjustmentRelAmounts	
			if (!SumOfReceivableApplicationAdjustmentRelAmountsDone)	//IEFIN-80761 add missing "!"
				initialize SumOfReceivableApplicationAdjustmentRelBaseEarnedDiscountAmount
					for each ReceivableApplicationAdjustmentRel
						SumOfReceivableApplicationAdjustmentRelBaseEarnedDiscountAmount	 += each.BaseEarnedDiscountAmount
				SumOfReceivableApplicationAdjustmentRelAmountsDone = true

		SumMixedSignedApplicationRelAmounts	
			if (!SumOfMixedSignedApplicationRelAmountsDone)	//IEFIN-80761 add missing "!"
				initialize SumOfMixedSignedApplicationRelApplicationAmountCurrencyAmount
					for each MixedSignedApplicationRel
						SumOfMixedSignedApplicationRelApplicationAmountCurrencyAmount	 += each.ApplicationAmount.CurrencyAmount
				SumOfMixedSignedApplicationRelAmountsDone = true

		SumReceivableInvoiceDetailRelAmounts	
			if (!SumOfReceivableInvoiceDetailRelAmountsDone)	//IEFIN-80761 add missing "!"
				initialize SumOfReceivableInvoiceDetailRelSignedOpenAmount
				initialize SumOfReceivableInvoiceDetailRelSignedBaseOpenAmount
				initialize SumOfReceivableInvoiceDetailRelSignedOpenAmountAfterDiscount	
					for each ReceivableInvoiceDetailRel
						SumOfReceivableInvoiceDetailRelSignedOpenAmount	 += each.SignedOpenAmount
						SumOfReceivableInvoiceDetailRelSignedBaseOpenAmount	 += each.SignedBaseOpenAmount
						SumOfReceivableInvoiceDetailRelSignedOpenAmountAfterDiscount	+= each.DerivedPortalNetAmountAfterDiscount	
				SumOfReceivableInvoiceDetailRelAmountsDone = true

		SumReceivableInvoiceRelAmounts	
			if (!SumOfReceivableInvoiceRelAmountsDone)	//IEFIN-80761 add missing "!"
				initialize SumOfReceivableInvoiceRelInvoiceAmountCurrencyAmount
					for each ReceivableInvoiceRel
						SumOfReceivableInvoiceRelInvoiceAmountCurrencyAmount	 += each.InvoiceAmount.CurrencyAmount
				SumOfReceivableInvoiceRelAmountsDone = true

		SumReceivableInvoiceOpenDisputeRelAmounts	
			if (!SumOfReceivableInvoiceOpenDisputeRelDone)	//IEFIN-80761 add missing "!"
				initialize SumOfReceivableInvoiceOpenDisputeRelDisputedAmount
					for each ReceivableInvoiceOpenDisputeRel
						SumOfReceivableInvoiceOpenDisputeRelDisputedAmount	 += each.DisputedAmount
				SumOfReceivableInvoiceOpenDisputeRelDone = true

		SumUnappliedReceivablePaymentRemittanceDetailRelAmounts	
			if (!SumOfUnappliedReceivablePaymentRemitDetailRelAmountstDone)
				initialize SumOfUnappliedReceivablePaymentRemittanceDetailRelAppldAmt
					for each UnappliedReceivablePaymentRemittanceDetailRel
						SumOfUnappliedReceivablePaymentRemittanceDetailRelAppldAmt		 += each.AppldAmt
				SumOfUnappliedReceivablePaymentRemitDetailRelAmountstDone = true

		CreateApplicationSelectForSummarizeDetail
			if  (each.Status.OpenTransaction
			and  LocalApplicationAmount > 0)

				if (LocalDiscountAmount >= each.OpenAmountDisplayCurrency)
					initialize WorkAmount
					Work2Amount										= each.OpenAmountDisplayCurrency
				else
				if ((LocalApplicationAmount + LocalDiscountAmount) < each.OpenAmountDisplayCurrency)
					WorkAmount										= LocalApplicationAmount
					Work2Amount										= LocalDiscountAmount
				else
					WorkAmount										= each.OpenAmountDisplayCurrency - LocalDiscountAmount
					Work2Amount										= LocalDiscountAmount

				invoke Create ReceivableApplicationSelect
					invoked.Company													 = ReceivablePaymentGroup.Company
					invoked.ReceivablePaymentHeader									 = ReceivablePaymentGroup.ReceivablePaymentHeader
					invoked.ReceivablePayment										 = ReceivablePaymentGroup.ReceivablePayment
					invoked.ReceivableApplicationSelect.TransactionCompany			 = each.Company
					invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail		 = each.ReceivableInvoiceDetail
					invoked.ReceivableOperator										 = ApplyOperator


					invoked.GeneralLedgerDate										 = ApplicationGeneralLedgerDate









					invoked.EnteredAmount											 = WorkAmount
					invoked.ApplicationCurrency										 = PrmCurrency

					if (Work2Amount entered)
						invoked.SelectedAdjustmentReason							 = PrmAdjustReason
						invoked.SelectedAdjustedAmount								 = Work2Amount

				LocalApplicationAmount												 -= WorkAmount
				LocalDiscountAmount													 -= Work2Amount


		UpdatePortalPaymentSelectedAndPortalRequestedAppliedAmount	
			PortalPaymentSelected = false
			initialize PortalRequestedAppliedAmount


		CurrencyConversion
			CurrencyWork.FinanceEnterpriseGroup								= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			CurrencyWork.ExchangeDate										= TransactionDate
			CurrencyWork.TransactionAmount									= LocalTransactionAmount
			CurrencyWork.FromCurrency										= OriginalCurrency
			CurrencyWork.BaseAmount.ToCurrency								= EFTExtractResult.EFTBaseCurrency
			LocalOutputCurrencyAmount										= CurrencyWork.BaseAmount.OutputCurrencyAmount



	Derived Fields	

		AgeDays										is a DerivedField
			type is Numeric 9
			restricted
			return (current corporate date - TransactionDate)



















		AgePeriod									is a DerivedField
			type is Alpha 30
			if (AgeDays < CustomerGroupAgePeriod1)
				return "LessThan<CustomerGroupAgePeriod1>Days"
			else
			if (AgeDays < CustomerGroupAgePeriod2)
				return "<CustomerGroupAgePeriod1Plus1>To<CustomerGroupAgePeriod2>Days"
			else
			if (AgeDays < 90)
				return "61 To 90 Days"
			else
			if (AgeDays < 120)
				return "91 To 120 Days"
			else
				return "Over 120 Days"


		AgingBaseDisputeAmount						is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted

			include SumAgingDisputeRelAmounts	

			return (SumOfAgingDisputeRelDisputedAmount)	


		AgingBaseOpenAmount							is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			if (DisputeSequence not entered)
				return BaseOpenAmount
			else
				return (BaseOpenAmount - AgingBaseDisputeAmount)


		AgingCodeAgingPeriod						is a DerivedField
			type is Numeric 2
			restricted
			LocalCurrentDate = current corporate date
			if (CompanyCustomerRel.AgingCode entered)
				if  (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				or   !CompanyCustomerRel.AgingCode.AgeCreditsRule.AgedInCurrentColumn)
					if (CompanyCustomerRel.AgingCode.AgingMethod.AgeByTransactionDate)
						LocalDaysDifference = LocalCurrentDate - TransactionDate
					else
						LocalDaysDifference = LocalCurrentDate - DueDate

				if  ((ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				and   CompanyCustomerRel.AgingCode.AgeCreditsRule.AgedInCurrentColumn)
				or   LocalDaysDifference = 0)
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 3
					else
						return 2
				else
				if (LocalDaysDifference < 0)
					if (CompanyCustomerRel.AgingCode.CurrentAgingPeriod entered
					and CompanyCustomerRel.AgingCode.CurrentAgingPeriod >= (LocalDaysDifference * -1))
						if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
							return 3
						else
							return 2
					else
						if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
							if ((CompanyCustomerRel.AgingCode.CurrentAgingPeriod + CompanyCustomerRel.AgingCode.AgeFuture) >= (LocalDaysDifference * -1))
								return 2
							else
								return 1
						else
							return 1
				else
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[1])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 4
					else
						return 3
				else
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[2])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 5
					else
						return 4
				else
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[3])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 6
					else
						return 5
				else
				if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[4])
					if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
						return 7
					else
						return 6
				else
				if (CompanyCustomerRel.AgingCode.ExpandedAgingPeriods)
					if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[5])
						return 8
					else
					if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[6])
						return 9
					else
					if (LocalDaysDifference <= CompanyCustomerRel.AgingCode.AgingPeriods.AgePeriods[7])
						return 10
					else
						return 11
				else
					return 7
			else
				return 2


		AgingDisputeAmount							is a DerivedField	
			type is like InternationalAmount
			restricted

			include SumAgingDisputeRelAmounts	

			return (SumOfAgingDisputeRelDisputedAmount)	


		AgingOpenAmount								is a DerivedField
			type is like InternationalAmount
			restricted
			if (DisputeSequence not entered)
				return OpenAmount
			else
				return (OpenAmount - AgingDisputeAmount)


		ApplDisp									is a ConditionalField
			type is AlphaUpper size 1
			if (IsApplied)
				"*"
			else
				blank


		AppliedStatus								is a DerivedField
			type is Alpha size 20
			restricted
			if (Status.OpenTransaction)
				if (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount not entered)
					return "Open"
				if (AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered)
					return "Open"
			if (Status.OpenTransaction
			and ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered
			or AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount entered)
				return "Partialy Applied"
			if (Status.FullyAppliedTransaction
			or  Status.ClosedTransaction)
				return "Fully Applied"
			if (Status.HistoricalTransaction)
				return "Historical"


		ArCustPoNbr									is a StringField
			type is Alpha size 20
			restricted
			ReceivableInvoiceRel.CustomerPurchaseOrder


		ArTerm										is a DerivedField
			type is like TermsCode
			restricted
			return ReceivableInvoiceRel.TermsCode


		BaseOpenAmount								is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return (InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount))

		BatchDisplay					is a LabelField
			"Batch_-<BatchNumber>"

		TieBackBaseOpenAmount						is a DerivedField 
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			if (BaseOpenAmount = 0.01
			or BaseOpenAmount = 0.02)
				return 0.00
			else
				return BaseOpenAmount

		DerivedInvoiceFinanceCodeBlockAdditionalDimensions is a DerivedField
			type is Boolean
			initialize LocalGLAccount
			if (Company.DetailFinanceStructureOptions.ToAccountingEntity)
				LocalGLAccount.ToAccountingEntity = InvoiceFinanceCodeBlock.ToAccountingEntity
			if (Company.DetailFinanceStructureOptions.AccountingUnit)
				LocalGLAccount.AccountingUnit = InvoiceFinanceCodeBlock.AccountingUnit
			if (Company.DetailFinanceStructureOptions.Project)
				LocalGLAccount.Project = InvoiceFinanceCodeBlock.Project
			if (Company.DetailFinanceStructureOptions.FinanceDimension1)
				LocalGLAccount.FinanceDimension1 = InvoiceFinanceCodeBlock.FinanceDimension1
			if (Company.DetailFinanceStructureOptions.FinanceDimension2)
				LocalGLAccount.FinanceDimension2 = InvoiceFinanceCodeBlock.FinanceDimension2
			if (Company.DetailFinanceStructureOptions.FinanceDimension3)
				LocalGLAccount.FinanceDimension3 = InvoiceFinanceCodeBlock.FinanceDimension3
			if (Company.DetailFinanceStructureOptions.FinanceDimension4)
				LocalGLAccount.FinanceDimension4 = InvoiceFinanceCodeBlock.FinanceDimension4
			if (Company.DetailFinanceStructureOptions.FinanceDimension5)
				LocalGLAccount.FinanceDimension5 = InvoiceFinanceCodeBlock.FinanceDimension5
			if (Company.DetailFinanceStructureOptions.FinanceDimension6)
				LocalGLAccount.FinanceDimension6 = InvoiceFinanceCodeBlock.FinanceDimension6
			if (Company.DetailFinanceStructureOptions.FinanceDimension7)
				LocalGLAccount.FinanceDimension7 = InvoiceFinanceCodeBlock.FinanceDimension7
			if (Company.DetailFinanceStructureOptions.FinanceDimension8)
				LocalGLAccount.FinanceDimension8 = InvoiceFinanceCodeBlock.FinanceDimension8
			if (Company.DetailFinanceStructureOptions.FinanceDimension9)
				LocalGLAccount.FinanceDimension9 = InvoiceFinanceCodeBlock.FinanceDimension9
			if (Company.DetailFinanceStructureOptions.FinanceDimension10)
				LocalGLAccount.FinanceDimension10 = InvoiceFinanceCodeBlock.FinanceDimension10

			TransientAdditionalDimensions = LocalGLAccount
			return true

		WorkspaceDerivedAgingPeriod							is a DerivedField
			type is Numeric 2
			if (IsOpen)
				LocalCurrentDate = current corporate date
				LocalDaysDifference = LocalCurrentDate - DueDate
				if (LocalDaysDifference < -30)
					return 12 
				else
				if (LocalDaysDifference <= -22)
					return 1 
				else
				if (LocalDaysDifference <= -15)
					return 2 
				else
				if (LocalDaysDifference <= -8)
					return 3 
				else
				if (LocalDaysDifference <= 0)
					return 4 
				else
				if (LocalDaysDifference <= 30)
					return 5 
				else
				if (LocalDaysDifference <= 60)
					return 6 
				else
				if (LocalDaysDifference <= 90)
					return 7 
				else
				if (LocalDaysDifference <= 120)
					return 8 
				else
				if (LocalDaysDifference <= 150)
					return 9 
				else
				if (LocalDaysDifference <= 180)
					return 10 
				else
				if (LocalDaysDifference <= 365)
					return 11 
				else
					return blank 
			else
				return blank

		CompanyAgingPeriod							is a DerivedField
			type is Numeric 2
			restricted
			LocalCurrentDate = current corporate date
			if  (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
			or   !Company.AgeCreditsRule.AgedInCurrentColumn)
				if (Company.AgingMethod.AgeByTransactionDate)
					LocalDaysDifference = LocalCurrentDate - TransactionDate
				else
					LocalDaysDifference = LocalCurrentDate - DueDate

			if  ((ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
			and   Company.AgeCreditsRule.AgedInCurrentColumn)
			or   LocalDaysDifference = 0)
				if (Company.ExpandedAgingPeriods)
					return 3
				else
					return 2
			else
			if (LocalDaysDifference < 0)
				if (Company.CurrentAgingPeriod entered
				and Company.CurrentAgingPeriod >= (LocalDaysDifference * -1))
					if (Company.ExpandedAgingPeriods)
						return 3
					else
						return 2
				else
					if (Company.ExpandedAgingPeriods)
						if ((Company.CurrentAgingPeriod + Company.AgeFuture) >= (LocalDaysDifference * -1))
							return 2
						else
							return 1
					else
						return 1
			else
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[1])
				if (Company.ExpandedAgingPeriods)
					return 4
				else
					return 3
			else
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[2])
				if (Company.ExpandedAgingPeriods)
					return 5
				else
					return 4
			else
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[3])
				if (Company.ExpandedAgingPeriods)
					return 6
				else
					return 5
			else
			if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[4])
				if (Company.ExpandedAgingPeriods)
					return 7
				else
					return 6
			else
			if (Company.ExpandedAgingPeriods)
				if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[5])
					return 8
				else
				if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[6])
					return 9
				else
				if (LocalDaysDifference <= Company.AgePeriodses.AgePeriods[7])
					return 10
				else
					return 11
			else
				return 7


		CountOfReceivableApplicationSelectRecordsExistRel is a DerivedField	
			type is Numeric size 3
			return instance count of ReceivableApplicationSelectRecordsExistRel


		CurrencyIndicator							is a ConditionalField
			type is AlphaUpper size 1
			if (IsNonBaseCurrency)
				"*"
			else
				blank


		CustomerGroupAgePeriod1						is a DerivedField
			type is Numeric size 3
			restricted
			return (Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[1])


		CustomerGroupAgePeriod1Plus1				is a DerivedField
			type is Numeric size 3
			restricted
			return (Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[1] + 1)


		CustomerGroupAgePeriod2						is a DerivedField
			type is Numeric size 3
			restricted
			return (Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[2])


		CustomerGroupAgePeriod2Plus1				is a DerivedField
			type is Numeric size 3
			restricted
			return (Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[2] + 1)


		CustomerGroupAgingOpenAmount				is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return AgingOpenAmount
			else
			if (Company.Currency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return AgingBaseOpenAmount
			else

				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= TransactionDate
				CurrencyWork.TransactionAmount							= AgingOpenAmount
				CurrencyWork.FromCurrency								= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency						= Company.CustomerGroupField.CustomerGroup.Currency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		CustomerGroupAgingPeriod					is a DerivedField
			type is Numeric 2
			restricted
			if  (BuildAgingDate entered)
				LocalCurrentDate = BuildAgingDate
			else
				LocalCurrentDate = current corporate date
			if  (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
			or   !Company.CustomerGroupField.CustomerGroup.AgeCreditsRule.AgedInCurrentColumn)
				if (Company.CustomerGroupField.CustomerGroup.AgingMethod.AgeByTransactionDate)
					LocalDaysDifference = LocalCurrentDate - TransactionDate
				else
					LocalDaysDifference = LocalCurrentDate - DueDate

			if  ((ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
			and   Company.CustomerGroupField.CustomerGroup.AgeCreditsRule.AgedInCurrentColumn)
			or   LocalDaysDifference = 0)
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 3
				else
					return 2
			else
			if (LocalDaysDifference < 0)
				if (Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod entered
				and Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod >= (LocalDaysDifference * -1))
					if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
						return 3
					else
						return 2
				else
					if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
						if ((Company.CustomerGroupField.CustomerGroup.CurrentAgingPeriod + Company.CustomerGroupField.CustomerGroup.AgeFuture) >= (LocalDaysDifference * -1))
							return 2
						else
							return 1
					else
						return 1
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[1])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 4
				else
					return 3
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[2])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 5
				else
					return 4
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[3])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 6
				else
					return 5
			else
			if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[4])
				if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
					return 7
				else
					return 6
			else
			if (Company.CustomerGroupField.CustomerGroup.ExpandedAgingPeriods)
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[5])
					return 8
				else
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[6])
					return 9
				else
				if (LocalDaysDifference <= Company.CustomerGroupField.CustomerGroup.AgePeriodses.AgePeriods[7])
					return 10
				else
					return 11
			else
				return 7


		CustomerGroupAmount							is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return InvoiceAmount.CurrencyAmount
			else
			if (Company.Currency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
			else
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= TransactionDate
				CurrencyWork.TransactionAmount							= InvoiceAmount.CurrencyAmount
				CurrencyWork.FromCurrency								= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency						= Company.CustomerGroupField.CustomerGroup.Currency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		CustomerGroupOpenAmount						is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return OpenAmount
			else
			if (Company.Currency = first Company.CustomerGroupField.CustomerGroup.Currency)
				return BaseOpenAmount
			else
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= TransactionDate
				CurrencyWork.TransactionAmount							= OpenAmount
				CurrencyWork.FromCurrency								= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency						= Company.CustomerGroupField.CustomerGroup.Currency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount

		StandardizedOpenAmount						is a DerivedField
			type is like InternationalAmount
			if (IsCreditMemo)
				return (UnsignedStandardizedOpenAmount * -1)
			else
				return UnsignedStandardizedOpenAmount

		UnsignedStandardizedOpenAmount						is a DerivedField
			type is like InternationalAmount
			if (OpenAmount = 0)
				return 0
			else
			if (OriginalCurrency = first AllCustomerGroupRel.Currency)
				return OpenAmount
			else
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= TransactionDate
				CurrencyWork.TransactionAmount							= OpenAmount
				CurrencyWork.FromCurrency								= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency						= first AllCustomerGroupRel.Currency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		DaysFromTranDateToDueDate					is a ComputeField
			type is Numeric 9
			restricted
			(DueDate - TransactionDate)


		DaysPastDue									is a DerivedField
			type is Numeric 7
			if (DueDate < current corporate date)
				return (current corporate date - DueDate)


		DerivedAdjustAmount							is a DerivedField
			type is like InternationalAmount
			if (SummarizeDetail)
				include SumSameInvoiceRelAmounts	

				return (SumOfSameInvoiceRelAdjustmentAmountCurrencyAmount)	
			else
				return AdjustmentAmount.CurrencyAmount

		SignedDerivedAdjustAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			return DerivedAdjustAmount * -1

		DisplaySignedAdjustAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals



			return SignedDerivedAdjustAmount	


		DerivedApplicationDiscount					is a DerivedField
			type is like InternationalAmount
			restricted
			if (CalculateDiscountDate not entered)
				if (ReceivablePayment entered)
					CalculateDiscountDate = ReceivablePaymentHeader.DepositDate
				else
				if (OnCreditMemoApplicationForm)
					CalculateDiscountDate = ContextCreditMemo.TransactionDate
				else
					CalculateDiscountDate = current corporate date
			if  (AlternateReceivableInvoiceType.Mixed)
				PriorApplication	= false
				if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
					if (SummarizeDetail)
						if (MixedSignCreditMemoPriorApplicationSumLineRel exists)
							PriorApplication = true
					else
						if (MixedSignCreditMemoPriorApplicationRel exists)
							PriorApplication = true
				if (SummarizeDetail)
					if (MixedSignPriorApplicationSumLineRel exists)
						PriorApplication = true
				else
					if (MixedSignPriorApplicationRel exists)
						PriorApplication = true
			if  ((!AlternateReceivableInvoiceType.Mixed
			and   InvoiceAmount.CurrencyAmount != OpenAmount)
			or   (AlternateReceivableInvoiceType.Mixed
			and   PriorApplication))

				LocalReturnNoDiscount = false
				if (AlternateReceivableInvoiceType.Mixed)

					if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						if (SummarizeDetail)
							for each MixedSignCreditMemoPriorApplicationSumLineRel
								for each each.ReceivableApplicationAdjustmentRel
									if (!(each.ReceivableApplication.Reverse
									or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
										return 0
								I9 = 1
								while (I9 < 4)
									if (DiscountDate.DiscDate[I9] entered)
										if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
											if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
												LocalReturnNoDiscount = true
										else
											LocalReturnNoDiscount = false
											end while
									I9 += 1
								if (LocalReturnNoDiscount)
									return 0
						else
							for each MixedSignCreditMemoPriorApplicationRel
								for each each.ReceivableApplicationAdjustmentRel
									if (!(each.ReceivableApplication.Reverse
									or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
										return 0
								I9 = 1
								while (I9 < 4)
									if (DiscountDate.DiscDate[I9] entered)
										if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
											if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
												LocalReturnNoDiscount = true
										else
											LocalReturnNoDiscount = false
											end while
									I9 += 1
								if (LocalReturnNoDiscount)
									return 0

					if (SummarizeDetail)
						for each MixedSignPriorApplicationSumLineRel
							for each each.ReceivableApplicationAdjustmentRel
								if (!(each.ReceivableApplication.Reverse
								or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
									return 0
							I9 = 1
							while (I9 < 4)
								if (DiscountDate.DiscDate[I9] entered)
									if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
										if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
											LocalReturnNoDiscount = true
									else
										LocalReturnNoDiscount = false
										end while
								I9 += 1
							if (LocalReturnNoDiscount)
								return 0
					else
						for each MixedSignPriorApplicationRel
							for each each.ReceivableApplicationAdjustmentRel
								if (!(each.ReceivableApplication.Reverse
								or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
									return 0
							I9 = 1
							while (I9 < 4)
								if (DiscountDate.DiscDate[I9] entered)
									if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
										if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
											LocalReturnNoDiscount = true
									else
										LocalReturnNoDiscount = false
										end while
								I9 += 1
							if (LocalReturnNoDiscount)
								return 0
				else
					for each ReceivableApplicationRel
						I9 = 1
						while (I9 < 4)
							if (DiscountDate.DiscDate[I9] entered)
								if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays < each.DepositDate)
									if (!(each.Reverse or each.ApplicationSource.ReversalOfApplications))
										LocalReturnNoDiscount = true
								else
									LocalReturnNoDiscount = false
									end while
							I9 += 1

						if (LocalReturnNoDiscount)
							return 0

						for each each.ReceivableApplicationAdjustmentRel
							if (!(each.ReceivableApplication.Reverse
							or each.ReceivableApplication.ApplicationSource.ReversalOfApplications))
								return 0

			I9 = 1

			while (I9 < 4)
				if (DiscountDate.DiscDate[I9] + CompanyCustomerRel.ApplicationDiscountGraceDays >= CalculateDiscountDate) 
					if (DiscountAmount.OrigDiscAmt[I9] entered
					and not AlternateReceivableInvoiceType.Mixed)
						if (DiscountAmount.OrigDiscAmt[I9] >= OpenAmount)
							return 0
						else
							return DiscountAmount.OrigDiscAmt[I9]
					else
						if (DiscountPercent.DiscPct[I9] * InvoiceAmount.CurrencyAmount >= OpenAmount)
							return 0
						else
							if (AlternateReceivableInvoiceType.Mixed)	  
								return (DiscountPercent.DiscPct[I9] * OpenAmount)
							else
								return (DiscountPercent.DiscPct[I9] * InvoiceAmount.CurrencyAmount)
				I9 +=1

			if (Company.ApplyDisplayPastDueDiscount)
				I9 = 3
				while (I9 > 0)
					if (DiscountDate.DiscDate[I9] entered)
						if (DiscountAmount.OrigDiscAmt[I9] entered
						and not AlternateReceivableInvoiceType.Mixed)
							if (DiscountAmount.OrigDiscAmt[I9] >= OpenAmount)
								return 0
							else
								return DiscountAmount.OrigDiscAmt[I9]
						else
							if (DiscountPercent.DiscPct[I9] * InvoiceAmount.CurrencyAmount >= OpenAmount)
								return 0
							else
								if (AlternateReceivableInvoiceType.Mixed)	
									return (DiscountPercent.DiscPct[I9] * OpenAmount)
								else
									return (DiscountPercent.DiscPct[I9] * InvoiceAmount.CurrencyAmount)
					I9 -=1


		DerivedAppliedAmount						is a DerivedField
			type is like InternationalAmount
			if (SummarizeDetail)
				include SumSameInvoiceRelAmounts	

				return (SumOfSameInvoiceRelApplicationAmountCurrencyAmount)	
			else
				return ApplicationAmount.CurrencyAmount

		DerivedSignedAppliedAmount is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals

			return DerivedAppliedAmount * -1

		DisplaySignedAppliedAmount is a DerivedField	
			type is like InternationalAmount




			return DerivedSignedAppliedAmount


		DerivedChargebackReasonType					is a DerivedField
			type is Alpha 10
			LocalReceivableReason = ReceivableInvoiceRel.ChargebackReason
			if  (ReceivableInvoiceRel.ChargebackReason entered)
				if  (LocalReceivableReasonRel.ChargebackType = "D")
					return "Detail"
				else
				if  (LocalReceivableReasonRel.ChargebackType = "M")
					return "Memo"
				else
				if  (LocalReceivableReasonRel.ChargebackType = "S")
					return "Summary"
			else
				return "Summary"


		DerivedDescription							is a DerivedField	
			type is like Description
			default label is "Description"
			if (Description entered)
				return Description
			else
				if (Desc entered)
					return Desc
				else
					return ReceivableInvoiceRel.Description

		DerivedDiscount1Amount						is a DerivedField
			type is like InternationalAmount
			return (DiscountPercent.DiscPct[1] * ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount)


		DerivedDiscount1Date						is a DerivedField
			type is Date
			restricted
			if (DiscountDate.DiscDate[1] entered)
				return DiscountDate.DiscDate[1]


		DerivedDiscount1Percent						is a ComputeField
			type is Decimal size 7.5
			restricted
			(DiscountPercent.DiscPct[1] * 100)


		DerivedDiscount2Amount						is a DerivedField
			type is like InternationalAmount
			return (DiscountPercent.DiscPct[2] * ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount)


		DerivedDiscount2Date						is a DerivedField
			type is Date
			restricted
			if (DiscountDate.DiscDate[2] entered)
				return DiscountDate.DiscDate[2]


		DerivedDiscount2Percent						is a DerivedField
			type is Decimal size 7.5
			restricted
			return (DiscountPercent.DiscPct[2] * 100)


		DerivedDiscount3Amount						is a DerivedField
			type is like InternationalAmount
			return (DiscountPercent.DiscPct[3] * ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount)


		DerivedDiscount3Date						is a DerivedField
			type is Date
			restricted
			if (DiscountDate.DiscDate[3] entered)
				return DiscountDate.DiscDate[3]


		DerivedDiscount3Percent						is a DerivedField
			type is Decimal size 7.5
			restricted
			return (DiscountPercent.DiscPct[3] * 100)


		DerivedDiscountAmount						is a DerivedField
			type is like InternationalAmount
			default label is "CalculatedDiscount"
			if (SummarizeDetail)
				include SumSameInvoiceRelAmounts	

				return (SumOfSameInvoiceRelDerivedApplicationDiscount)	
			else
				return DerivedApplicationDiscount


		DerivedDiscountReason						is a DerivedField
			type is like ReceivableReason
			restricted
			if (DerivedDiscountAmount entered
			and CompanyCustomerRel.DiscountAdjustmentReason entered)
				return CompanyCustomerRel.DiscountAdjustmentReason


		DerivedDisplayCurrency						is a DerivedField
			type is like Currency
			restricted
			LocalCurrency = actor.context.Currency
			if (LocalCurrency entered)
				return LocalCurrency
			else
			if (ContextReceivablePaymentRel.OriginalCurrency entered)
				return ContextReceivablePaymentRel.OriginalCurrency
			else
			if (ReceivablePayment.OriginalCurrency entered)
				return ReceivablePayment.OriginalCurrency
			else
			if (ContextCreditMemo.OriginalCurrency entered)
				return ContextCreditMemo.OriginalCurrency



		DerivedDueDateDay is a DerivedField
			type is Numeric size 2
			restricted
			return DueDate day

		DerivedDueDateMonth is a DerivedField
			type is Numeric size 2
			restricted
			return DueDate month

		DerivedDueDateYear is a DerivedField
			type is Numeric size 4
			restricted
			return DueDate year

		DerivedExchangeDate							is a DerivedField
			type is Date
			restricted
			if (ReceivablePayment.DepositDate entered)
				return ReceivablePayment.DepositDate
			if (ContextCreditMemo.TransactionDate entered)
				return ContextCreditMemo.TransactionDate
			if (TransactionDate entered)
				return TransactionDate


		DerivedGeneralLedgerDate					is a DerivedField
			type is Date
			restricted
			if (HasApplicationSelect
			and SummarizeDetail)
				include SumSameInvoiceRelReceivableApplicationSelectRelAmounts
				return (FirstSameInvoiceRelReceivableApplicationSelectRelGeneralLedgerDate)
			else
			if (HasReceivableApplicationSelect)
				if (SummarizeDetail)
					include SumSameInvoiceRelReceivableApplicationSelectRelAmounts	

					return (FirstSameInvoiceRelReceivableApplicationSelectRelGeneralLedgerDate)	
				else
					return ReceivableApplicationSelectRel.GeneralLedgerDate
			else
			if (ReceivablePayment in context
			and ReceivablePayment exists)
				if (Company.DefaultApplicationDate.LatestTransactionPostDate)	
					if (ReceivablePayment.GeneralLedgerDate > GeneralLedgerDate)
						if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
						and  ReceivablePayment.GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)
							return CompanySystemClosingControlRel.ValidEntryDate.Begin
						else
							return ReceivablePayment.GeneralLedgerDate
					else
						if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
						and GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)
							return CompanySystemClosingControlRel.ValidEntryDate.Begin
						else
							return GeneralLedgerDate
				else
				if (Company.DefaultApplicationDate.PaymentCreditPostDate)
					if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
					and  ReceivablePayment.GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)	
						return CompanySystemClosingControlRel.ValidEntryDate.Begin
					else
						return ReceivablePayment.GeneralLedgerDate	
				else
					if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
					and  current corporate date not within CompanySystemClosingControlRel.ValidEntryDate)
						return CompanySystemClosingControlRel.ValidEntryDate.Begin
					else
						return current corporate date
			else
			if (ContextCreditMemo in context)
				if (Company.DefaultApplicationDate.LatestTransactionPostDate)	
					if (ContextCreditMemo.GeneralLedgerDate > GeneralLedgerDate)
						if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
						and  ContextCreditMemo.GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)
							return CompanySystemClosingControlRel.ValidEntryDate.Begin
						else
							return ContextCreditMemo.GeneralLedgerDate
					else
						if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
						and GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)
							return CompanySystemClosingControlRel.ValidEntryDate.Begin
						else
							return GeneralLedgerDate
				else
				if (Company.DefaultApplicationDate.PaymentCreditPostDate)
					if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
					and  ContextCreditMemo.GeneralLedgerDate not within CompanySystemClosingControlRel.ValidEntryDate)	
						return CompanySystemClosingControlRel.ValidEntryDate.Begin
					else
						return ContextCreditMemo.GeneralLedgerDate	
				else
					if  (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange
					and  current corporate date not within CompanySystemClosingControlRel.ValidEntryDate)
						return CompanySystemClosingControlRel.ValidEntryDate.Begin
					else
						return current corporate date


		DerivedIsSelectedForAP						is a DerivedField
			type is Alpha 3  
			restricted
			if (IsSelectedForAP)
				return "Yes"  
			else
				return blank


		DerivedIsUnresolvedDispute					is a DerivedField
			type is Alpha 3  
			restricted
			if (IsUnresolvedDispute)
				return "Yes"  
			else
				return blank


		DerivedLineSelectApplicationAmount			is a DerivedField	
			type is like InternationalAmount
			if (HasReceivableApplicationSelect)
				return ReceivableApplicationSelectRel.PaymentApplicationAmount
			else
			if  (OriginalCurrency = DerivedDisplayCurrency)
				return OpenAmount
			else
				CurrencyWork.TransactionAmount			= OpenAmount
				CurrencyWork.FromCurrency				= OriginalCurrency
				CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate					= DerivedExchangeDate
				CurrencyWork.BaseAmount.ToCurrency			= DerivedDisplayCurrency

				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		DerivedLineSelectDiscountAmount				is a DerivedField
			type is like InternationalAmount
			default label is "OpenAmount"
			if (HasReceivableApplicationSelect)
				return ReceivableApplicationSelectRel.TotalCreditAdjustments
			else
			if  (OriginalCurrency = DerivedDisplayCurrency)
				return DerivedApplicationDiscount
			else

				CurrencyWork.TransactionAmount			=  DerivedApplicationDiscount
				CurrencyWork.FromCurrency					= OriginalCurrency
				CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate					= DerivedExchangeDate
				CurrencyWork.BaseAmount.ToCurrency			= DerivedDisplayCurrency

				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		DerivedLocalRoundTo							is a DerivedField
			type is Decimal 5.4
			restricted
			if (LocalNumberOfDecimals = 2)
				return .01
			else
			if (LocalNumberOfDecimals = 0)
				return 1
			else
			if (LocalNumberOfDecimals = 3)
				return .001
			else
			if (LocalNumberOfDecimals = 4)
				return .0001


		DerivedInvoiceDetailTypeForContext is a DerivedField 
			type is AlphaUpper size 1
			restricted
			return ReceivableInvoiceDetail.ReceivableInvoiceDetailType

		DerivedInvoiceDetailSequenceForContext is a DerivedField 
			type is Numeric size 7
			restricted
			return ReceivableInvoiceDetail.PaymentSeq

		DerivedReceivableCompanyForContext is a DerivedField 
			type is Numeric size 12
			restricted
			return Company

		DerivedReceivableBatchForContext is a DerivedField 
			type is Numeric size 12
			restricted
			return BatchNumber

		DerivedReceivableInvoiceForContext is a DerivedField 
			type is AlphaUpper size 22
			restricted
			return ReceivableInvoiceDetail.Invoice

		DerivedFundDistributionSetState is a DerivedField 
			type is AlphaUpper size 2
			return "NR"

		DerivedDistributionSetState is a DerivedField 
			type is Numeric size 1
			restricted
			if (first ReceivablePaymentRemittanceDetailContextRel exists)
				return first ReceivablePaymentRemittanceDetailContextRel.DerivedDetailDistributionSetState
			else
				return 0

		DerivedSettlementDetailLineDistributionSetState is a DerivedField 
			type is Numeric size 1
			restricted
			if (ContextSettlementDetailLineRel exists)
				return ContextSettlementDetailLineRel.DerivedDistributionSetState
			else
				return 0

		DerivedSettlementDetailLineDistributionSetSum is a DerivedField 
			type is like InternationalAmount
			LocalDistributionSetSum = 0
			for each ContextSettlementDetailLineRel.ICBReceivableApplyDistribution set
				LocalDistributionSetSum += each.DistributionAmount.CurrencyAmount
			return LocalDistributionSetSum

		DerivedSettlementDetailLineDistributionDifference is a DerivedField 
			type is like InternationalAmount
			if (ContextSettlementDetailLineRel exists)
				return ((SettlementDetailLineSelectAmount * -1) - DerivedSettlementDetailLineDistributionSetSum)
			else
				return 0

		DerivedSignedSettlementDetailLineDistributionSetSum is a DerivedField 
			type is like InternationalAmount
			if (ContextSettlementDetailRel.IntercompanyBillingDocumentHeader.NetDueAmount < 0)
				return DerivedSettlementDetailLineDistributionSetSum * -1
			else
				return DerivedSettlementDetailLineDistributionSetSum

		DerivedDisplaySignedSettlementDetailLineSelectAmount is a DerivedField 
			type is like InternationalAmount
			if (ContextSettlementDetailRel.IntercompanyBillingDocumentHeader.NetDueAmount < 0)
				return SettlementDetailLineSelectAmount * -1
			else
				return SettlementDetailLineSelectAmount

		DerivedSignedLocalCurrentAmount is a DerivedField 
			type is like InternationalAmount
			if (ContextSettlementDetailRel.IntercompanyBillingDocumentHeader.NetDueAmount < 0)
				return LocalCurrentAmount * -1
			else
				return LocalCurrentAmount

		DerivedDistributionSetSum is a DerivedField 
			type is like InternationalAmount
			LocalDistributionSetSum = 0
			for each first ReceivablePaymentRemittanceDetailContextRel.RemittanceApplyDistribution set
				LocalDistributionSetSum += each.DistributionAmount.CurrencyAmount
			return LocalDistributionSetSum

		DerivedDistributionSetDifference is a DerivedField 
			type is like InternationalAmount
			if (ReceivablePaymentRemittanceDetailContextRelExists)
				if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
					return RemittanceApplyDistributionSelectAmount - DerivedDistributionSetSum
				else
					return ((RemittanceApplyDistributionSelectAmount * -1) - DerivedDistributionSetSum)
			else
				return 0

		DerivedRemittanceApplyDistributionSelectAmount is a DerivedField 
			type is like InternationalAmount
			restricted
			if (ReceivablePaymentRemittanceDetailContextRel exists)
				return first ReceivablePaymentRemittanceDetailContextRel.AppldAmt
			else
				return 0

		DerivedSettlementDetailLineSelectAmount is a DerivedField 
			type is like InternationalAmount
			restricted
			if (ContextSettlementDetailLineRel exists)
				if (ContextSettlementDetailRel.IntercompanyBillingDocumentHeader.NetDueAmount < 0)
					return ContextSettlementDetailLineRel.SelectedAmount * -1
				else
					return ContextSettlementDetailLineRel.SelectedAmount
			else
				return 0

		DerivedSettlementDetailLineSelectAvailableAmount is a DerivedField 
			type is like InternationalAmount
			restricted
			if (ContextSettlementDetailLineRel exists
			and ContextSettlementDetailRel.HeaderUnreleased)
				return DerivedSettlementDetailLineAmount - ContextSettlementDetailLineRel.SelectedAmount
			else
				return DerivedSettlementDetailLineAmount

		DerivedSignedAmount is a DerivedField 
			type is like InternationalAmount
			if (ContextSettlementDetailRel.IntercompanyBillingDocumentHeader.NetDueAmount < 0)
				return InvoiceAmount.CurrencyAmount * -1
			else
				return InvoiceAmount.CurrencyAmount

		DerivedSignedSettlementDetailLineSelectAvailableAmount is a DerivedField 
			type is like InternationalAmount
			if (ContextSettlementDetailRel.IntercompanyBillingDocumentHeader.NetDueAmount < 0)
				return DerivedSettlementDetailLineSelectAvailableAmount * -1
			else
				return DerivedSettlementDetailLineSelectAvailableAmount

		DerivedSettlementDetailLineAmount is a DerivedField 
			type is like InternationalAmount
			LocalUnappliedRemittanceTotalAmount = 0
			for each ReceivablePaymentRemittanceUnappliedForThisInvoiceDetailRel
				LocalUnappliedRemittanceTotalAmount += each.AppldAmt
			return OpenAmount - LocalUnappliedRemittanceTotalAmount

		DerivedRemittanceApplyOpenAmount is a DerivedField 
			type is like InternationalAmount
			LocalUnappliedRemittanceTotalAmount = 0
			for each ReceivablePaymentRemittanceUnappliedForThisInvoiceDetailRel
				LocalUnappliedRemittanceTotalAmount += each.AppldAmt
			if (ReceivableApplicationSelectRel exists)
				LocalUnappliedRemittanceTotalAmount += ReceivableApplicationSelectRel.TransactionApplicationAmount
			return OpenAmount - LocalUnappliedRemittanceTotalAmount

		DerivedMultipleDisputeFlag					is a DerivedField
			type is Alpha size 3  
			if (HasMultipleOpenReceivableInvoiceDisputes)
				return "Yes"  
			else
				return blank


		DerivedNationalCompany						is a DerivedField
			type is like Company
			restricted
			if (CompanyCustomerRel.NationalAccountIndicator.No)
				return Company
			else
			if (CompanyCustomerRel.NationalAccountIndicator.Child)
				return CompanyCustomerRel.NationalCompany
			else
				return CompanyCustomerRel.Company


		DerivedNationalCustomer						is a DerivedField
			type is like Customer
			restricted
			if (CompanyCustomerRel.NationalAccountIndicator.No)
				return Customer
			else
			if (CompanyCustomerRel.NationalAccountIndicator.Child)

				return NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCustomer
			else
				return CompanyCustomerRel.Customer


		DerivedOpenAmount							is a DerivedField
			type is like InternationalAmount
			default label is "OpenAmount"
			if (SummarizeDetail)
				include SumSameInvoiceRelAmounts	

				return (SumOfSameInvoiceRelOpenAmount)	
			else
				return OpenAmount

		DerivedSignedOpenAmountSummarized			is a DerivedField
			type is like InternationalAmount
			if (IsCreditMemo)
				return (DerivedOpenAmount * -1)
			else
				return DerivedOpenAmount

		DerivedOpenAmountLessDispute				is a DerivedField
			type is like InternationalAmount
			restricted
			return (OpenAmount - DerivedTotalDisputedAmount)


		DerivedPortalBaseCurrency					is a DerivedField
			type is like Currency
			restricted
			if (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.IsNationalAccountParent)
				return actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ReceivableCompany.CustomerGroupField.CustomerGroup.Currency
			else
				return actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ReceivableCompany.GeneralLedgerCompany.Currency


		DerivedPortalOpenAmount						is a DerivedField
			type is like InternationalAmount
			if (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.IsNationalAccountParent)
				return NationalAccountTransactionRel.FilteredAmountGroupCurrency
			else
				return SignedBaseOpenAmount

		DerivedPortalPaymentSelected is a DerivedField	
			type is Boolean
			if (PortalPaymentSelected
			and UnappliedReceivablePaymentRemittanceDetailRel not exists)
				return true

		DerivedAmountToApplyToXReferencedInvoice	is a DerivedField
			type is like InternationalAmount
			restricted
			return ReceivableInvoiceRel.IntercompanyBillingDocumentRel.CrossReferenceAmountToApply

		DerivedXReferencedInvoiceHasBeenApplied		is a DerivedField
			type is Boolean
			restricted
			return ReceivableInvoiceRel.IntercompanyBillingDocumentRel.CrossReferenceHasBeenApplied

		DerivedHasICBAutoApply						is a DerivedField
			type is Boolean
			restricted
			return ReceivableInvoiceRel.IntercompanyBillingDocumentRel.CrossReferenceAutoApply

		DerivedReceivableInvoiceDetailType			is a DerivedField
			type is AlphaUpper size 1
			restricted
			return ReceivableInvoiceDetail.ReceivableInvoiceDetailType


		DerivedSelectApplicationAmount				is a DerivedField
			type is like InternationalAmount
			restricted
			initialize CurrencyWork.TransactionAmount



			if (HasApplicationSelect
			and SummarizeDetail)
				include SumSameInvoiceRelReceivableApplicationSelectRelAmounts
				return (SumOfSameInvoiceRelReceivableApplicationSelectRelPaymentApplicationAmount)
			else
			if (HasReceivableApplicationSelect)
				if (SummarizeDetail)
					include SumSameInvoiceRelReceivableApplicationSelectRelAmounts	

					return (SumOfSameInvoiceRelReceivableApplicationSelectRelPaymentApplicationAmount)	
				else
					return ReceivableApplicationSelectRel.PaymentApplicationAmount
			else
			if  (OriginalCurrency = DerivedDisplayCurrency)
				return DerivedOpenAmount
			else
				CurrencyWork.TransactionAmount				= DerivedOpenAmount

				CurrencyWork.FromCurrency					= OriginalCurrency
				CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate					= DerivedExchangeDate
				CurrencyWork.BaseAmount.ToCurrency			= DerivedDisplayCurrency

				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		DerivedSelectDiscountAmount					is a DerivedField
			type is like InternationalAmount
			restricted
			default label is "OpenAmount"
			if (HasApplicationSelect
			and SummarizeDetail)
				include SumSameInvoiceRelReceivableApplicationSelectRelAmounts
				return (SumOfSameInvoiceRelReceivableApplicationSelectRelTotalAdjustments)
			else
			if (HasReceivableApplicationSelect)
				if (SummarizeDetail)
					include SumSameInvoiceRelReceivableApplicationSelectRelAmounts	

					return (SumOfSameInvoiceRelReceivableApplicationSelectRelTotalAdjustments)	
				else
					return ReceivableApplicationSelectRel.TotalCreditAdjustments
			else

			if  (ReceivablePayment in context
			and  ReceivablePayment.IsZeroPayment
			and !OnCreditMemoApplicationForm)
				return 0
			else
			if  (OriginalCurrency = DerivedDisplayCurrency)
				return DerivedDiscountAmount
			else
				if (SummarizeDetail)
					include SumSameInvoiceRelAmounts	

					CurrencyWork.TransactionAmount	=  (SumOfSameInvoiceRelDerivedApplicationDiscount)	
				else
					CurrencyWork.TransactionAmount	=  DerivedApplicationDiscount
				CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate					= DerivedExchangeDate
				CurrencyWork.FromCurrency					= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency			= DerivedDisplayCurrency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount








		DerivedSelectDiscountReason					is a DerivedField
			type is like ReceivableReason
			restricted
			if (HasReceivableApplicationSelect)
				return ReceivableApplicationSelectRel.FirstAdjustmentReason
			else
			if (DerivedDiscountAmount entered
			and CompanyCustomerRel.DiscountAdjustmentReason entered)
				return CompanyCustomerRel.DiscountAdjustmentReason


		DerivedSelectTotalCreditAdjustmentsAmount					is a DerivedField	
			type is like InternationalAmount


			if (HasApplicationSelect
			and SummarizeDetail)
				include SumSameInvoiceRelReceivableApplicationSelectRelAmounts
				return (SumOfSameInvoiceRelReceivableApplicationSelectRelTotalCreditAdjustments)	
			else
			if (HasReceivableApplicationSelect)
				if (SummarizeDetail)
					include SumSameInvoiceRelReceivableApplicationSelectRelAmounts
					return (SumOfSameInvoiceRelReceivableApplicationSelectRelTotalCreditAdjustments)	
				else
					return ReceivableApplicationSelectRel.TotalCreditAdjustments
			else
				return 0


		DerivedSignedBaseOpenAmount					is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			if (IsSummarizeDetailParticipant)
				include SumReceivableInvoiceDetailRelAmounts

				return (SumOfReceivableInvoiceDetailRelSignedBaseOpenAmount)
			else
			if (IsNotSummarized)
				return SignedBaseOpenAmount


		DerivedSignedOpenAmount						is a DerivedField
			type is like InternationalAmount
			if (IsSummarizeDetailParticipant)
				include SumReceivableInvoiceDetailRelAmounts

				return (SumOfReceivableInvoiceDetailRelSignedOpenAmount)
			else
			if (IsNotSummarized)
				return SignedOpenAmount

		DerivedPortalSignedOpenAmount				is a DerivedField	
			type is like InternationalAmount
			if (UnappliedReceivablePaymentRemittanceDetailRel not exists
			and not PartiallyApplied)
				return SignedOpenAmount - PortalRequestedAppliedAmount
			else
			if (UnappliedReceivablePaymentRemittanceDetailRel exists
			and not PartiallyApplied)
				return SignedOpenAmount - DerivedUnappliedReceivablePaymentRemittanceDetailAppldAmt	
			else
			if (PartiallyApplied)
				return SignedOpenAmount
			else
				return DerivedSignedOpenAmount

		DerivedPortalSummarizeDetailOpenAmount	is a DerivedField	
			type is like InternationalAmount
			return (SumOfReceivableInvoiceDetailRelSignedOpenAmount - DerivedPortalDiscountAmount)

		DerivedSelectSignedOpenAmount			is a DerivedField	
			type is like InternationalAmount
			if (ReceivablePortalPaymentDetailRel exists)
				return ReceivablePortalPaymentDetailRel.PortalRequestedAppliedAmount
			else
			if (UnappliedReceivablePaymentRemittanceDetailRel exists)	
				return DerivedPortalNetAmountAfterDiscount - DerivedUnappliedReceivablePaymentRemittanceDetailAppldAmt	







			else

				return DerivedPortalNetAmountAfterDiscount

		DerivedThirdPartyPaymentProcessingPaymentCurrency	is a DerivedField
			type is Alpha 5
			return ThirdPartyPaymentProcessingPaymentCurrencyConfigurationParameterRel.Value

		DerivedUnappliedReceivablePaymentRemittanceDetailAppldAmt is a DerivedField	
			type is like InternationalAmount
			include SumUnappliedReceivablePaymentRemittanceDetailRelAmounts
			return SumOfUnappliedReceivablePaymentRemittanceDetailRelAppldAmt

		DerivedTotalDisputedAmount					is a DerivedField
			type is like InternationalAmount
			restricted
			include SumReceivableInvoiceOpenDisputeRelAmounts

			return (SumOfReceivableInvoiceOpenDisputeRelDisputedAmount)

		DerivedStatus is a DerivedField
			type is Numeric size 1
			if (SummarizeDetail)
				include SumSameInvoiceRelAmounts
				return LocalLowestStatus
			else
				return Status

		DerivedTransactionAmount					is a DerivedField
			type is like InternationalAmount
			default label is "InvoiceAmount"
			if (SummarizeDetail)
				include SumSameInvoiceRelAmounts	

				return (SumOfSameInvoiceRelInvoiceAmountCurrencyAmount)	
			else
				return InvoiceAmount.CurrencyAmount

		DerivedSignedTransactionAmountSummarized 	is a DerivedField
			type is like InternationalAmount
			default label is "InvoiceAmount"
			if (IsCreditMemo)
				return (DerivedTransactionAmount * -1)
			else
				return DerivedTransactionAmount

		SignedDerivedTransactionAmount is a DerivedField	
			type is like InternationalAmount
			default label is "InvoiceAmount"
			return DerivedTransactionAmount * -1

		DisplaySignedTransactionAmount is a DerivedField	
			type is like InternationalAmount
			default label is "InvoiceAmount"



			return DerivedTransactionAmount

		DerivedTransactionAmountForMixed			is a DerivedField
			type is like InternationalAmount
			if (IsSummarizeDetailParticipant)
				include SumReceivableInvoiceRelAmounts

				return (SumOfReceivableInvoiceRelInvoiceAmountCurrencyAmount)
			else
				return InvoiceAmount.CurrencyAmount


		DerivedTransactionType						is a DerivedField
			type is AlphaUpper 1
			if (IsSummarizeDetailParticipant)
				return ReceivableInvoiceRel.AlternateReceivableInvoiceType
			else
				return ReceivableInvoiceDetail.ReceivableInvoiceDetailType


		DiscAmt1									is a DerivedField
			type is like InternationalAmount
			restricted
			classic name is DISC-AMT1
			return (InvoiceAmount.CurrencyAmount * DiscPct1)


		DiscAmt2									is a DerivedField
			type is like InternationalAmount
			restricted
			classic name is DISC-AMT2
			return (InvoiceAmount.CurrencyAmount * DiscPct2)


		DiscAmt3									is a DerivedField
			type is like InternationalAmount
			restricted
			classic name is DISC-AMT3
			return (InvoiceAmount.CurrencyAmount * DiscPct3)


		DiscPct1									is an ArrayValueField
			type is Percent size 7.5
			restricted
			classic name is DISC-PCT1
			DiscountPercent.DiscPct[1]


		DiscPct2									is an ArrayValueField
			type is Percent size 7.5
			restricted
			classic name is DISC-PCT2
			DiscountPercent.DiscPct[2]


		DiscPct3									is an ArrayValueField
			type is Percent size 7.5
			restricted
			classic name is DISC-PCT3
			DiscountPercent.DiscPct[3]


		FilteredAmountCompanyCurrency				is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (IsCreditMemo)
					return InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
				else
					return InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount


		FilteredAmountCustomerCurrency				is a DerivedField
			type is like InternationalAmount
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = CompanyCustomerRel.Currency)
					WorkAmount = InvoiceAmount.CurrencyAmount
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= TransactionDate
					CurrencyWork.TransactionAmount				= InvoiceAmount.CurrencyAmount
					CurrencyWork.FromCurrency					= OriginalCurrency
					CurrencyWork.BaseAmount.ToCurrency			= CompanyCustomerRel.Currency
					WorkAmount									= CurrencyWork.BaseAmount.OutputCurrencyAmount
				if (IsCreditMemo)
					return WorkAmount * -1
				else
					return WorkAmount


		FilteredAmountGroupCurrency					is a DerivedField
			type is like InternationalAmount
			restricted
			if (!ReceivableFilterMatch)
				return 0
			else
				if (OriginalCurrency = Company.CustomerGroupField.CustomerGroup.Currency)
					WorkAmount = InvoiceAmount.CurrencyAmount
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= TransactionDate
					CurrencyWork.TransactionAmount				= InvoiceAmount.CurrencyAmount
					CurrencyWork.FromCurrency					= OriginalCurrency
					CurrencyWork.BaseAmount.ToCurrency			= Company.CustomerGroupField.CustomerGroup.Currency
					WorkAmount									= CurrencyWork.BaseAmount.OutputCurrencyAmount
				if (IsCreditMemo)
					return WorkAmount * -1
				else
					return WorkAmount


		FirstDisputeCode							is a DerivedField
			type is AlphaUpper size 2

			if (HasMultipleOpenReceivableInvoiceDisputes)
				return blank
			else
				return first ReceivableInvoiceDisputeRel.DisputeCode


		HasCommentsIndicator						is a ConditionalField
			type is AlphaUpper size 1
			if (HasComments)
				"*"
			else
				blank


		MarkedAsPaid is a MessageField	
			restricted	
			"ReceivableInvoiceDetailMarkedAsPaid"	


		MiscAmount									is a DerivedField
			type is like InternationalAmount
			restricted
			return (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)


		NationalAccountAgingOpenAmount				is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency = first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.CustomerGroupField.CustomerGroup.Currency)
				return AgingOpenAmount
			else
			if (Company.Currency = first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.CustomerGroupField.CustomerGroup.Currency)
				return AgingBaseOpenAmount
			else
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= TransactionDate
				CurrencyWork.TransactionAmount							= AgingOpenAmount
				CurrencyWork.FromCurrency								= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency						= first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.CustomerGroupField.CustomerGroup.Currency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		NationalAccountAmount						is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency = first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.CustomerGroupField.CustomerGroup.Currency)
				return InvoiceAmount.CurrencyAmount
			else
			if (Company.Currency = first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.CustomerGroupField.CustomerGroup.Currency)
				return InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
			else
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= TransactionDate
				CurrencyWork.TransactionAmount							= InvoiceAmount.CurrencyAmount
				CurrencyWork.FromCurrency								= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency						= first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany.CustomerGroupField.CustomerGroup.Currency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount


		NationalCustomer							is a DerivedField
			type is like Customer
			restricted
			if (CompanyCustomerRel.NationalAccountIndicator.No)
				return Customer
			else
			if (CompanyCustomerRel.NationalAccountIndicator.Child)

				return NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCustomer
			else
				return CompanyCustomerRel.Customer


		NonMixedSignAppliedAmount					is a DerivedField
			type is like InternationalAmount
			restricted
			if (!action type.Create)
				include SumMixedSignedApplicationRelAmounts

				return (ApplicationAmount.CurrencyAmount - (SumOfMixedSignedApplicationRelApplicationAmountCurrencyAmount))	


		NumTransactionsForAgePeriod					is a ComputeField	
			type is Numeric 9
			(instance count of TransactionDetailAgePeriodRel)


		OpenAmount									is a DerivedField
			type is like InternationalAmount
			return (InvoiceAmount.CurrencyAmount - (ApplicationAmount.CurrencyAmount + AdjustmentAmount.CurrencyAmount))


		OpenAmountCustomerCurrency					is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency != CompanyCustomerRel.Currency)
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= DerivedExchangeDate
				CurrencyWork.TransactionAmount							= OpenAmount
				CurrencyWork.FromCurrency								= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency						= CompanyCustomerRel.Currency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				return OpenAmount

		AgingOpenAmountCustomerCurrency					is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency != CompanyCustomerRel.Currency)
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= DerivedExchangeDate
				CurrencyWork.TransactionAmount							= AgingOpenAmount
				CurrencyWork.FromCurrency								= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency						= CompanyCustomerRel.Currency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				return AgingOpenAmount

		OpenAmountDisplayCurrency					is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency != DerivedDisplayCurrency)
				CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate								= DerivedExchangeDate
				CurrencyWork.TransactionAmount							= OpenAmount
				CurrencyWork.FromCurrency								= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency						= DerivedDisplayCurrency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				return OpenAmount


		OverApplicationConditionalErrorMessage is a ConditionalField
			type is Text
			if (HasReceivableApplicationSelect)
				OverApplicationErrorMsg1
			else
			if (HasReceivableApplicationAdjustmentSelect)
				OverApplicationErrorMsg2
			else
			if (PartiallyApplied)
				OverApplicationErrorMsg3
			else
				OverApplicationErrorMsg4


		OverApplicationErrorMsg1 is a MessageField
			restricted
			"Invoice<ReceivableInvoiceDetail.Invoice>HasPendingSelectionRecords;NotEligibleForOverCashApplication"


		OverApplicationErrorMsg2 is a MessageField
			restricted
			"Invoice<ReceivableInvoiceDetail.Invoice>HasAdjustments;NotEligibleForOverCashApplication"


		OverApplicationErrorMsg3 is a MessageField
			restricted
			"Invoice<ReceivableInvoiceDetail.Invoice>IsPartiallyApplied;NotEligibleForOverCashApplication"


		OverApplicationErrorMsg4 is a MessageField
			restricted
			"NotEligibleForOverCashApplication"

		OverDueBy				is a DerivedField
			type is Alpha 30
			if (DaysPastDue > 1)
				return (DerivedDueDateMonth + "/" + DerivedDueDateDay + "/" + DerivedDueDateYear + " (" + DaysPastDue + ")" + "Days")
			else
				return (DerivedDueDateMonth + "/" + DerivedDueDateDay + "/" + DerivedDueDateYear + " (" + DaysPastDue + ")" + "Day")


		OverrideDunningIndicator					is a ConditionalField
			type is AlphaUpper size 1
			if (ReceivableInvoiceRel.OverrideDunningProcess entered)
				"*"
			else
				blank

		ProjectCashReceipts  is a DerivedField
			type is like InternationalAmount
			return (InvoiceAmount.CurrencyAmount - OpenAmount)

		ProjectSignedCashReceipts							is a DerivedField
			type is like InternationalAmount
			if (IsCreditMemo)
				return ((InvoiceAmount.CurrencyAmount - OpenAmount) * -1)
			else
				return (InvoiceAmount.CurrencyAmount - OpenAmount)

		RoundedDistAmountAlternate					is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.AlternateCurrency.NumberOfDecimals
				RoundedDistAmountAlternate		= LocalTotalDistributionAmount.AlternateAmount.EnteredCurrencyAmount
				round RoundedDistAmountAlternate to nearest DerivedLocalRoundTo
				return RoundedDistAmountAlternate


		RoundedDistAmountAlternate2					is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.AlternateCurrency2.NumberOfDecimals
				RoundedDistAmountAlternate2		= LocalTotalDistributionAmount.AlternateAmount2.EnteredCurrencyAmount
				round RoundedDistAmountAlternate2 to nearest DerivedLocalRoundTo
				return RoundedDistAmountAlternate2


		RoundedDistAmountAlternate3					is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.AlternateCurrency3.NumberOfDecimals
				RoundedDistAmountAlternate3		= LocalTotalDistributionAmount.AlternateAmount3.EnteredCurrencyAmount
				round RoundedDistAmountAlternate3 to nearest DerivedLocalRoundTo
				return RoundedDistAmountAlternate3


		RoundedDistAmountFunctional					is a DerivedField
			type is like InternationalAmount		
			if (LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.FunctionalCurrency.NumberOfDecimals
				RoundedDistAmountFunctional		= LocalDistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				round RoundedDistAmountFunctional to nearest DerivedLocalRoundTo
				return RoundedDistAmountFunctional


		RoundedDistAmountProject					is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals		= Company.AccountingEntity.FunctionalCurrency.NumberOfDecimals
				RoundedDistAmountProject	= LocalTotalDistributionAmount.ProjectAmount.EnteredCurrencyAmount
				round RoundedDistAmountProject to nearest DerivedLocalRoundTo
				return RoundedDistAmountProject


		RoundedDistAmountReport1					is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals		= Company.FinanceEnterpriseGroup.ReportCurrencyOne.NumberOfDecimals
				RoundedDistAmountReport1	= LocalTotalDistributionAmount.ReportAmount1.EnteredCurrencyAmount
				round RoundedDistAmountReport1 to nearest DerivedLocalRoundTo
				return RoundedDistAmountReport1


		RoundedDistAmountReport2					is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals		= Company.FinanceEnterpriseGroup.ReportCurrencyTwo.NumberOfDecimals
				RoundedDistAmountReport2	= LocalTotalDistributionAmount.ReportAmount2.EnteredCurrencyAmount
				round RoundedDistAmountReport2 to nearest DerivedLocalRoundTo
				return RoundedDistAmountReport2


		RoundedDistAmountReport3					is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals		= Company.FinanceEnterpriseGroup.ReportCurrencyThree.NumberOfDecimals
				RoundedDistAmountReport3	= LocalTotalDistributionAmount.ReportAmount3.EnteredCurrencyAmount
				round RoundedDistAmountReport3 to nearest DerivedLocalRoundTo
				return RoundedDistAmountReport3


		RoundedDistAmountReport4					is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals		= Company.FinanceEnterpriseGroup.ReportCurrencyFour.NumberOfDecimals
				RoundedDistAmountReport4	= LocalTotalDistributionAmount.ReportAmount4.EnteredCurrencyAmount
				round RoundedDistAmountReport4 to nearest DerivedLocalRoundTo
				return RoundedDistAmountReport4


		RoundedDistAmountReport5					is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals		= Company.FinanceEnterpriseGroup.ReportCurrencyFive.NumberOfDecimals
				RoundedDistAmountReport5	= LocalTotalDistributionAmount.ReportAmount5.EnteredCurrencyAmount
				round RoundedDistAmountReport5 to nearest DerivedLocalRoundTo
				return RoundedDistAmountReport5


		RoundedDistAmountToAlternate				is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.AlternateCurrency.NumberOfDecimals
				RoundedDistAmountToAlternate	= LocalTotalDistributionAmount.ToAlternateAmount.EnteredCurrencyAmount
				round RoundedDistAmountToAlternate to nearest DerivedLocalRoundTo
				return RoundedDistAmountToAlternate


		RoundedDistAmountToAlternate2				is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.AlternateCurrency2.NumberOfDecimals
				RoundedDistAmountToAlternate2	= LocalTotalDistributionAmount.ToAlternateAmount2.EnteredCurrencyAmount
				round RoundedDistAmountToAlternate2 to nearest DerivedLocalRoundTo
				return RoundedDistAmountToAlternate2


		RoundedDistAmountToAlternate3				is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.AlternateCurrency3.NumberOfDecimals
				RoundedDistAmountToAlternate3	= LocalTotalDistributionAmount.ToAlternateAmount3.EnteredCurrencyAmount
				round RoundedDistAmountToAlternate3 to nearest DerivedLocalRoundTo
				return RoundedDistAmountToAlternate3


		RoundedDistAmountToFunctional				is a DerivedField
			type is like InternationalAmount		
			if (LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount entered)
				LocalNumberOfDecimals			= Company.AccountingEntity.FunctionalCurrency.NumberOfDecimals
				RoundedDistAmountToFunctional	= LocalTotalDistributionAmount.ToFunctionalAmount.EnteredCurrencyAmount
				round RoundedDistAmountToFunctional to nearest DerivedLocalRoundTo
				return RoundedDistAmountToFunctional


		Selected									is a DerivedField
			type is Alpha 3  
			restricted
			if (HasReceivableApplicationSelect)
				return "Yes"  


		SelectedForGrouping							is a DerivedField
			type is Alpha 3   
			if (HasReceivableInvoiceObligationGroup)
				return "Yes"  


		Sign										is a DerivedField
			type is Alpha 1
			restricted
			if (IsCreditMemo)
				return "-"
			else
				return "+"


		SignedAppliedAmount							is a DerivedField
			type is like InternationalAmount
			if (IsCreditMemo)
				return ApplicationAmount.CurrencyAmount * -1
			else
				return ApplicationAmount.CurrencyAmount


		TotalSignedAppliedAmount					is a DerivedField	
			type is like InternationalAmount
			if (IsCreditMemo)
				return ((ApplicationAmount.CurrencyAmount + AdjustmentAmount.CurrencyAmount) * -1)
			else
				return (ApplicationAmount.CurrencyAmount + AdjustmentAmount.CurrencyAmount)


		SignedBaseAmount							is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			if (IsCreditMemo)
				return InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
			else
				return InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount


		SignedAlternateAmount							is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			default label is "AlternateAmount"
			if (IsCreditMemo)
				return InvoiceAmount.AlternateAmount.EnteredCurrencyAmount * -1
			else
				return InvoiceAmount.AlternateAmount.EnteredCurrencyAmount

		SignedAlternateAmount2							is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			default label is "AlternateAmount2"
			if (IsCreditMemo)
				return InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount * -1
			else
				return InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount

		SignedAlternateAmount3							is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			default label is "AlternateAmount3"
			if (IsCreditMemo)
				return InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount * -1
			else
				return InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount

		SignedReportAmount1							is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			default label is "ReportAmount1"
			if (IsCreditMemo)
				return InvoiceAmount.ReportAmount1.EnteredCurrencyAmount * -1
			else
				return InvoiceAmount.ReportAmount1.EnteredCurrencyAmount

		SignedReportAmount2							is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			default label is "ReportAmount2"
			if (IsCreditMemo)
				return InvoiceAmount.ReportAmount2.EnteredCurrencyAmount * -1
			else
				return InvoiceAmount.ReportAmount2.EnteredCurrencyAmount

		SignedReportAmount3							is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			default label is "ReportAmount3"
			if (IsCreditMemo)
				return InvoiceAmount.ReportAmount3.EnteredCurrencyAmount * -1
			else
				return InvoiceAmount.ReportAmount3.EnteredCurrencyAmount

		SignedReportAmount4							is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			default label is "ReportAmount4"
			if (IsCreditMemo)
				return InvoiceAmount.ReportAmount4.EnteredCurrencyAmount * -1
			else
				return InvoiceAmount.ReportAmount4.EnteredCurrencyAmount

		SignedReportAmount5							is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			default label is "ReportAmount5"
			if (IsCreditMemo)
				return InvoiceAmount.ReportAmount5.EnteredCurrencyAmount * -1
			else
				return InvoiceAmount.ReportAmount5.EnteredCurrencyAmount


		SignedBaseCurrentAmount						is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			CurrencyWork.ExchangeDate								= current corporate date
			CurrencyWork.TransactionAmount							= InvoiceAmount.CurrencyAmount
			CurrencyWork.FromCurrency								= OriginalCurrency
			CurrencyWork.BaseAmount.ToCurrency						= Company.Currency
			WorkAmount												= CurrencyWork.BaseAmount.OutputCurrencyAmount
			if (IsCreditMemo)
				return WorkAmount * -1
			else
				return WorkAmount


		SignedCustomerGroupAmount			is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			if (IsCreditMemo)
				return CustomerGroupAmount * -1
			else
				return CustomerGroupAmount


		SignedCustomerGroupAgingOpenAmount			is a DerivedField	
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			if (IsCreditMemo)
				return CustomerGroupAgingOpenAmount * -1
			else
				return CustomerGroupAgingOpenAmount


		SignedBaseOpenAmount						is a DerivedField
			type is like InternationalAmount
				precision is Company.Currency.NumberOfDecimals
			if (IsCreditMemo)
				return BaseOpenAmount * -1
			else
				return BaseOpenAmount

		DerivedPortalNetAmountAfterDiscount			is a DerivedField	
			type is like InternationalAmount
			restricted
			if (DerivedDiscount1Date entered
			and DerivedPortalDiscountPercent entered
			and SignedOpenAmount >0)
				return SignedOpenAmount - DerivedPortalDiscountAmount
			else
			if (DerivedDiscount1Date entered		
			and DerivedPortalDiscountPercent entered
			and SignedOpenAmount <0)
				return SignedOpenAmount + DerivedPortalDiscountAmount 
			else
				return SignedOpenAmount
		SignedOpenAmount							is a DerivedField
			type is like InternationalAmount
			if (IsCreditMemo)
				return OpenAmount * -1
			else
				return OpenAmount

		UnsignedOpenAmount 							is a DerivedField
			type is like InternationalAmount
			return OpenAmount

		SignedPortalRequestedAppliedAmount			is a DerivedField
			type is like InternationalAmount
			restricted
			if (IsCreditMemo)
				return PortalRequestedAppliedAmount * -1
			else
				return PortalRequestedAppliedAmount


		SignedOpenAmountLessPortalRequestedAppliedAmount			is a DerivedField
			type is like InternationalAmount
			restricted
			return (SignedOpenAmount - SignedPortalRequestedAppliedAmount)

		SignedTransactionAmount						is a DerivedField
			type is like InternationalAmount
			if (IsCreditMemo)
				return InvoiceAmount.CurrencyAmount * -1
			else
				return InvoiceAmount.CurrencyAmount


		SingleSpace									is a StringField
			type is Alpha 1
			" "

		DerivedReceivableInvoiceDetailSelectDistributionSetState is a DerivedField 
			type is AlphaUpper size 1
			restricted
			if (AllowSelectDistributionSet)
				if (SummarizeDetail)
					if (any SameInvoiceRel.ReceivableApplicationSelectRel exists)
						if (any SameInvoiceRel.ReceivableApplicationSelectRel.TransientDistributionSetState.OutOfBalance)
							return "I"
						else
							return "C"
					else
						return ""
				else
					if (ReceivableApplicationSelectRel exists)
						if (ReceivableApplicationSelectRel.TransientDistributionSetState.OutOfBalance)
							return "I"
						else
						if (ReceivableApplicationSelectRel.TransientDistributionSetState.NotApplicable)
							return "N"
						else
							return "C"
					else
						return ""
			else
				return ""

		DerivedReceivableInvoiceDetailSelectDistributionSetStateNoSummarize is a DerivedField 
			type is AlphaUpper size 1
			restricted
			if (AllowSelectDistributionSet)
				if (ReceivableApplicationSelectRel exists)
					if (ReceivableApplicationSelectRel.TransientDistributionSetState.OutOfBalance)
						return "I"
					else
					if (ReceivableApplicationSelectRel.TransientDistributionSetState.NotApplicable)
						return "N"
					else
						return "C"
				else
					return ""
			else
				return ""




		SumTransactionsForAgePeriod					is a DerivedField	
			type is like InternationalAmount
			if (!action type.Create)
				include SumTransactionDetailAgePeriodRelAmounts	

				return (SumOfTransactionDetailAgePeriodRelInvoiceAmountCurrencyAmount)	

		TransactionAmountDisplay		is a LabelField 
			"<OriginalCurrency>_<InvoiceAmount.CurrencyAmount>"

		TotalEarnedDiscount							is a DerivedField
			type is like InternationalAmount
			restricted
			if (!action type.Create)
				include SumReceivableApplicationAdjustmentRelAmounts	

				return (SumOfReceivableApplicationAdjustmentRelBaseEarnedDiscountAmount)	

		UnappliedCreditAmount	  is a LabelField	
			"<OriginalCurrency>_<DerivedOpenAmount>"

		UnrealizedCurrencyGainLossMessage			is a MessageField
			restricted
			"UnrealizedCurrencyGainLoss"


		UnrealizedCurrencyGainMessage				is a MessageField
			restricted
			"UnrealizedCurrencyGain"


		UnrealizedCurrencyLossMessage				is a MessageField
			restricted
			"UnrealizedCurrencyLoss"


		UnreleasedIndicator							is a DerivedField
			type is Alpha 3  
			default label is "Unreleased"
			if (Status.Unreleased)
				return "Yes"  

		DerivedActualBankDate	is a DerivedField
			type is Date
			if (LocalEFTDueDaysType = "M")
				LocalActualBankDayNumber = 1
				if (ActualBankDayNumberRel exists)
					for each ActualBankDayNumberRel
						if (LocalActualBankDayNumber <= LocalEFTDueDays)
							LocalActualBankDayNumber += 1
							LocalBankDate = each.SystemCalendarDate
						else
							end for each
				else
					return LocalFromDate
				return LocalBankDate
			else
				return LocalFromDate + LocalEFTDueDays

		EFTCompanyCurrencyOpenAmount				is a DerivedField
			type is like InternationalAmount
				precision is EFTNotificationExtractResult.EFTBaseCurrency.NumberOfDecimals
			restricted
			if (OriginalCurrency != EFTNotificationExtractResult.EFTBaseCurrency)
				initialize CurrencyWork
				CurrencyWork.TransactionAmount		= SignedTransactionAmount
				CurrencyWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate			= TransactionDate
				CurrencyWork.FromCurrency			= OriginalCurrency
				CurrencyWork.BaseAmount.ToCurrency	= EFTNotificationExtractResult.EFTBaseCurrency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				return SignedTransactionAmount

		EFTDiscountAmount								is a DerivedField
			type is like InternationalAmount
				precision is EFTNotificationExtractResult.EFTBaseCurrency.NumberOfDecimals
			restricted
			initialize LocalEFTDiscountAmount
			initialize LocalDepositeDate
			initialize CurrencyWork
			if (EFTNotificationExtractResult.ProcessDate entered)
				LocalDepositeDate = EFTNotificationExtractResult.ProcessDate
			else
				LocalDepositeDate = EFTNotificationExtractResult.FromDate

			if (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount not entered
			and AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered)
				I1 = 1
				while (I1 <= 3)
					if (LocalEFTDiscountAmount not entered
					and DiscountDate.DiscDate[I1] entered
					and DiscountDate.DiscDate[I1] + CompanyCustomerRel.ApplicationDiscountGraceDays >= LocalDepositeDate)
						if (DiscountAmount.OrigDiscAmt[I1] entered)
							if (OriginalCurrency != EFTNotificationExtractResult.EFTBaseCurrency)
								CurrencyWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								if (IsCreditMemo)
									CurrencyWork.TransactionAmount  = DiscountAmount.OrigDiscAmt[I1] * -1
								else
									CurrencyWork.TransactionAmount	= DiscountAmount.OrigDiscAmt[I1]
								CurrencyWork.ExchangeDate			= TransactionDate
								CurrencyWork.FromCurrency			= OriginalCurrency
								CurrencyWork.BaseAmount.ToCurrency	= EFTNotificationExtractResult.EFTBaseCurrency
								LocalEFTDiscountAmount				= CurrencyWork.BaseAmount.OutputCurrencyAmount
							else
								if (IsCreditMemo)
									LocalEFTDiscountAmount	= DiscountAmount.OrigDiscAmt[I1] * -1
								else
									LocalEFTDiscountAmount	= DiscountAmount.OrigDiscAmt[I1]
					I1 += 1
			return LocalEFTDiscountAmount

		EFTNPDiscountAmount								is a DerivedField	
			type is like InternationalAmount
			initialize LocalEFTDiscountAmount
			if (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount not entered
			and AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered)
				I1 = 1
				while (I1 <= 3)
					if (LocalEFTDiscountAmount not entered
					and DiscountDate.DiscDate[I1] entered
					and DiscountDate.DiscDate[I1] + CompanyCustomerRel.ApplicationDiscountGraceDays >= current corporate date)
						if (DiscountAmount.OrigDiscAmt[I1] entered)
							if (OriginalCurrency != EFTNotificationExtractResult.EFTBaseCurrency)
								CurrencyWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								if (IsCreditMemo)
									CurrencyWork.TransactionAmount  = DiscountAmount.OrigDiscAmt[I1] * -1
								else
									CurrencyWork.TransactionAmount	= DiscountAmount.OrigDiscAmt[I1]
								CurrencyWork.BaseAmount				= 0
								CurrencyWork.ExchangeDate			= TransactionDate
								CurrencyWork.FromCurrency			= OriginalCurrency
								CurrencyWork.BaseAmount.ToCurrency	= EFTNotificationExtractResult.EFTBaseCurrency
								LocalEFTDiscountAmount				= CurrencyWork.BaseAmount.OutputCurrencyAmount
							else
								if (IsCreditMemo)
									LocalEFTDiscountAmount	= DiscountAmount.OrigDiscAmt[I1] * -1
								else
									LocalEFTDiscountAmount	= DiscountAmount.OrigDiscAmt[I1]

					I1 += 1
			return LocalEFTDiscountAmount

		EFTNotificationPrintNetAmount		is a DerivedField		
			type is like InternationalAmount
			return 	(EFTCompanyCurrencyOpenAmount - EFTNPDiscountAmount)

		EFTDiscoutNetAmount		is a DerivedField
			type is like InternationalAmount
			initialize LocalEFTDiscountAmount
			if (EFTNotificationExtractResult.ProcessDate entered)
				LocalDepositeDate = EFTNotificationExtractResult.ProcessDate
			else
				LocalDepositeDate = EFTNotificationExtractResult.FromDate

			I1 = 1
			while (I1 <= 3)
				if (LocalEFTDiscountAmount not entered
				and DiscountDate.DiscDate[I1] entered
				and DiscountDate.DiscDate[I1] + CompanyCustomerRel.ApplicationDiscountGraceDays >= LocalDepositeDate)
					if (DiscountAmount.OrigDiscAmt[I1] entered)
						if (OriginalCurrency != Company.Currency)
								CurrencyWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								CurrencyWork.TransactionAmount		= DiscountAmount.OrigDiscAmt[I1]
								CurrencyWork.BaseAmount				= 0
								CurrencyWork.ExchangeDate			= TransactionDate
								CurrencyWork.FromCurrency			= OriginalCurrency
								CurrencyWork.BaseAmount.ToCurrency	= Company.Currency
								LocalEFTDiscountAmount				= CurrencyWork.BaseAmount.OutputCurrencyAmount
						else
							LocalEFTDiscountAmount	= DiscountAmount.OrigDiscAmt[I1]
				I1 += 1
			return LocalEFTDiscountAmount

		DerivedEFTNotificationPrintDiscountDate is a DerivedField
			type is Date
			if (CompanyCustomerRel.ApplicationDiscountGraceDays not entered)
				if (current corporate date <= DiscountDate.DiscDate[1]
				or  (DiscountDate.DiscDate[2] not entered
				and  DiscountDate.DiscDate[3] not entered))
					return DiscountDate.DiscDate[1]
				else
				if (current corporate date > DiscountDate.DiscDate[1]
				and current corporate date <= DiscountDate.DiscDate[2]
				or  (DiscountDate.DiscDate[3] not entered))
					return DiscountDate.DiscDate[2]
				else
				if (current corporate date > DiscountDate.DiscDate[2]
				and current corporate date <= DiscountDate.DiscDate[3])
					return DiscountDate.DiscDate[3]
			else
				if ((DiscountDate.DiscDate[1] + CompanyCustomerRel.ApplicationDiscountGraceDays) >= current corporate date
				or  (DiscountDate.DiscDate[2] not entered
				and  DiscountDate.DiscDate[3] not entered))
					return DiscountDate.DiscDate[1] + CompanyCustomerRel.ApplicationDiscountGraceDays
				else
				if ((DiscountDate.DiscDate[2] + CompanyCustomerRel.ApplicationDiscountGraceDays) >= current corporate date
				or  (DiscountDate.DiscDate[3] not entered))
					return DiscountDate.DiscDate[2] + CompanyCustomerRel.ApplicationDiscountGraceDays
				else
				if ((DiscountDate.DiscDate[3] + CompanyCustomerRel.ApplicationDiscountGraceDays) >= current corporate date)
					return DiscountDate.DiscDate[3] + CompanyCustomerRel.ApplicationDiscountGraceDays

		DerivedEFTNExtractDiscountDate is a DerivedField
			type is Date
			if (EFTNotificationExtractResult.ProcessDate entered)
				LocalDepositeDate = EFTNotificationExtractResult.ProcessDate
			else
				LocalDepositeDate = EFTNotificationExtractResult.FromDate

			if (CompanyCustomerRel.ApplicationDiscountGraceDays not entered)
				if (LocalDepositeDate <= DiscountDate.DiscDate[1]
				or  (DiscountDate.DiscDate[2] not entered
				and  DiscountDate.DiscDate[3] not entered))
					return DiscountDate.DiscDate[1]
				else
				if ((LocalDepositeDate > DiscountDate.DiscDate[1]
				and LocalDepositeDate <= DiscountDate.DiscDate[2])
				or  DiscountDate.DiscDate[3] not entered)
					return DiscountDate.DiscDate[2]
				else
				if (LocalDepositeDate > DiscountDate.DiscDate[2]
				and LocalDepositeDate <= DiscountDate.DiscDate[3])
					return DiscountDate.DiscDate[3]
			else
				if ((DiscountDate.DiscDate[1] + CompanyCustomerRel.ApplicationDiscountGraceDays) >= LocalDepositeDate
				or  (DiscountDate.DiscDate[2] not entered
				and  DiscountDate.DiscDate[3] not entered))
					return DiscountDate.DiscDate[1] + CompanyCustomerRel.ApplicationDiscountGraceDays
				else
				if ((DiscountDate.DiscDate[2] + CompanyCustomerRel.ApplicationDiscountGraceDays) >= LocalDepositeDate
				or  DiscountDate.DiscDate[3] not entered)
					return DiscountDate.DiscDate[2] + CompanyCustomerRel.ApplicationDiscountGraceDays
				else
				if ((DiscountDate.DiscDate[3] + CompanyCustomerRel.ApplicationDiscountGraceDays) >= LocalDepositeDate)
					return DiscountDate.DiscDate[3] + CompanyCustomerRel.ApplicationDiscountGraceDays

		EFTExtractCompanyCurrencyOpenAmount				is a DerivedField
			type is like InternationalAmount
			if (EFTExtractResult.Company entered)
				LocalOpenAmount = BaseOpenAmount
			else
				if (Company.Currency != EFTExtractResult.EFTBaseCurrency)
					LocalTransactionAmount				= InvoiceAmount.CurrencyAmount
					include CurrencyConversion
					LocalOriginalAmount					= LocalOutputCurrencyAmount
					LocalTransactionAmount				= ApplicationAmount.CurrencyAmount
					include CurrencyConversion
					LocalOriginalAppliedAmount			= LocalOutputCurrencyAmount
					LocalTransactionAmount				= AdjustmentAmount.CurrencyAmount
					include CurrencyConversion
					LocalOriginalAdjustmentAmount		= LocalOutputCurrencyAmount
					LocalOpenAmount = LocalOriginalAmount - (LocalOriginalAppliedAmount + LocalOriginalAdjustmentAmount)
				else
					LocalOpenAmount	= BaseOpenAmount
			if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType = "C")
				return LocalOpenAmount * -1
			else
				return LocalOpenAmount

		EFTExtractNetAmount		is a DerivedField
			type is like InternationalAmount
			return (EFTExtractCompanyCurrencyOpenAmount - EFTExtractBaseDiscountAmount)

		DerivedEFTExtractDiscountDate is a DerivedField
			type is Date
			if (EFTExtractResult.ProcessDate not entered)
				LocalDepositeDate = EFTExtractResult.FromOverrideDate
			else
				LocalDepositeDate = EFTExtractResult.ProcessDate

			if (CompanyCustomerRel.ApplicationDiscountGraceDays not entered)
				if (LocalDepositeDate <= DiscountDate.DiscDate[1])
					return DiscountDate.DiscDate[1]
				else
				if (LocalDepositeDate > DiscountDate.DiscDate[1]
				and LocalDepositeDate <= DiscountDate.DiscDate[2])
					return DiscountDate.DiscDate[2]
				else
				if (LocalDepositeDate > DiscountDate.DiscDate[2]
				and LocalDepositeDate <= DiscountDate.DiscDate[3])
					return DiscountDate.DiscDate[3]
			else
				if ((DiscountDate.DiscDate[1] + CompanyCustomerRel.ApplicationDiscountGraceDays) >= LocalDepositeDate)
					return DiscountDate.DiscDate[1] + CompanyCustomerRel.ApplicationDiscountGraceDays
				else
				if ((DiscountDate.DiscDate[2] + CompanyCustomerRel.ApplicationDiscountGraceDays) >= LocalDepositeDate)
					return DiscountDate.DiscDate[2] + CompanyCustomerRel.ApplicationDiscountGraceDays
				else
				if ((DiscountDate.DiscDate[3] + CompanyCustomerRel.ApplicationDiscountGraceDays) >= LocalDepositeDate)
					return DiscountDate.DiscDate[3] + CompanyCustomerRel.ApplicationDiscountGraceDays

		EFTExtractDiscoutNetAmount		is a DerivedField
			type is like InternationalAmount
			initialize LocalEFTDiscountAmount
			if (EFTExtractResult.ProcessDate entered)
				LocalDepositeDate = EFTExtractResult.ProcessDate
			else
				LocalDepositeDate = EFTExtractResult.FromDate
			I1 = 1
			while (I1 <= 3)
				if (LocalEFTDiscountAmount not entered
				and DiscountDate.DiscDate[I1] entered
				and DiscountDate.DiscDate[I1] + CompanyCustomerRel.ApplicationDiscountGraceDays >= LocalDepositeDate)
					if (DiscountAmount.OrigDiscAmt[I1] entered)
						if (OriginalCurrency != Company.Currency)
								CurrencyWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								CurrencyWork.TransactionAmount		= DiscountAmount.OrigDiscAmt[I1]
								CurrencyWork.BaseAmount				= 0
								CurrencyWork.ExchangeDate			= TransactionDate
								CurrencyWork.FromCurrency			= OriginalCurrency
								CurrencyWork.BaseAmount.ToCurrency	= Company.Currency
								LocalEFTDiscountAmount				= CurrencyWork.BaseAmount.OutputCurrencyAmount
						else
							LocalEFTDiscountAmount	= DiscountAmount.OrigDiscAmt[I1]
				I1 += 1
			return LocalEFTDiscountAmount

		EFTExtractBaseDiscountAmount								is a DerivedField
			type is like InternationalAmount
			restricted
			initialize LocalEFTDiscountAmount
			initialize LocalDepositeDate
			initialize CurrencyWork
			if (EFTExtractResult.ProcessDate entered)
				LocalDepositeDate = EFTExtractResult.ProcessDate
			else
				LocalDepositeDate = EFTExtractResult.FromDate

			if (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount not entered
			and AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered)
				I1 = 1
				while (I1 <= 3)
					if (LocalEFTDiscountAmount not entered
					and DiscountDate.DiscDate[I1] entered
					and DiscountDate.DiscDate[I1] + CompanyCustomerRel.ApplicationDiscountGraceDays >= LocalDepositeDate)
						if (DiscountAmount.OrigDiscAmt[I1] entered)
							if (OriginalCurrency != EFTExtractResult.EFTBaseCurrency)
								CurrencyWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								if (IsCreditMemo)
									CurrencyWork.TransactionAmount  = DiscountAmount.OrigDiscAmt[I1] * -1
								else
									CurrencyWork.TransactionAmount	= DiscountAmount.OrigDiscAmt[I1]
								CurrencyWork.ExchangeDate			= TransactionDate
								CurrencyWork.FromCurrency			= OriginalCurrency
								CurrencyWork.BaseAmount.ToCurrency	= EFTExtractResult.EFTBaseCurrency
								LocalEFTDiscountAmount				= CurrencyWork.BaseAmount.OutputCurrencyAmount
							else
								if (IsCreditMemo)
									LocalEFTDiscountAmount	= DiscountAmount.OrigDiscAmt[I1] * -1
								else
									LocalEFTDiscountAmount	= DiscountAmount.OrigDiscAmt[I1]
					I1 += 1
			return LocalEFTDiscountAmount

		EFTExtractTransactionAmount		is a DerivedField
			type is like InternationalAmount
			if (OriginalCurrency != EFTExtractResult.EFTBaseCurrency)
				initialize CurrencyWork
				CurrencyWork.TransactionAmount		= SignedTransactionAmount
				CurrencyWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				CurrencyWork.ExchangeDate			= TransactionDate
				CurrencyWork.FromCurrency			= OriginalCurrency.Currency
				CurrencyWork.BaseAmount.ToCurrency	= EFTExtractResult.EFTBaseCurrency
				return CurrencyWork.BaseAmount.OutputCurrencyAmount
			else
				return SignedTransactionAmount

		DerivedThirdPartyPaymentProcessingCompany is a DerivedField	
			type is like ReceivableCompany
			return CashManagementAccountSetupWithThirdPartyPaymentProcessingReceivableProcessLevelRel.LegalEntity


		PortalListTitleWithTotal is a LabelField
			restricted
			"Invoice_Detail_Available_For_Payment"	//_____Total_Selected_Value:_$_<CustomerRepresentativeContact.DerivedTotalPortalRequestedAppliedAmount>"

		DerivedPortalListTitle		is a DerivedField
			type is MessageField

			return PortalListTitleWithTotal

		DerivedPrefix 								is a DerivedField
			type is AlphaUpper 2
			restricted
			return ReceivableInvoiceDetail.Invoice[1:2]

		DerivedInvoiceNumber 						is a DerivedField
			type is Numeric 8
			restricted
			return ReceivableInvoiceDetail.Invoice[3:10]

		BatchInvoiceNumberAndCompanyTitleWithRecord is a LabelField	
			"-_Batch<BatchNumber>_-_<ReceivableInvoiceDetail.ReceivableInvoiceDetailType>_-_InvoiceNumber<ReceivableInvoiceDetail.Invoice>forCompany<Company>"	//FSM-6534 - Removing RepresentativeText as that took up too much space in the title//.RepresentativeText>"

		BatchInvoiceNumberAndCompanyTitle is a DerivedField	
			type is MessageField
			return BatchInvoiceNumberAndCompanyTitleWithRecord

		InvoiceNumberTitleWithRecord is a LabelField	
			"-_<ReceivableInvoiceDetail.ReceivableInvoiceDetailType>_-_<ReceivableInvoiceDetail.Invoice>"	//FSM-6534 - Removing RepresentativeText as that took up too much space in the title//.RepresentativeText>"

		InvoiceNumberTitle is a DerivedField	
			type is MessageField
			return InvoiceNumberTitleWithRecord

		InvoiceDetailGroupFieldWithRecord is a LabelField	
			"<ReceivableInvoiceDetail.ReceivableInvoiceDetailType>_-_<ReceivableInvoiceDetail.Invoice>_-_<ReceivableInvoiceDetail.PaymentSeq>"	//FSM-6534 - Removing RepresentativeText as that took up too much space in the title//.RepresentativeText>"

		InvoiceDetailGroupField is a DerivedField	
			type is MessageField
			return InvoiceDetailGroupFieldWithRecord

		InvoiceDetailAllowSummarizeFormTitleNotSummarized is a LabelField
			"Detail<ReceivableInvoiceDetail.PaymentSeq>_for_<ReceivableInvoiceDetail.AlternateReceivableInvoiceType>_<ReceivableInvoiceDetail.Invoice>"

		InvoiceDetailAllowSummarizeFormTitleSummarized is a LabelField
			"Details_for_<ReceivableInvoiceDetail.AlternateReceivableInvoiceType>_<ReceivableInvoiceDetail.Invoice>"

		DerivedInvoiceDetailAllowSummarizeFormTitle is a DerivedField
			type is MessageField
			if (SummarizeDetail)
				return InvoiceDetailAllowSummarizeFormTitleSummarized
			else
				return InvoiceDetailAllowSummarizeFormTitleNotSummarized

		SummarizedInvoiceNumberTitleWithRecord is a LabelField
			"<AlternateReceivableInvoiceType>_-_<ReceivableInvoiceDetail.Invoice>"

		SummarizedInvoiceNumberTitle is a DerivedField
			type is MessageField
			return SummarizedInvoiceNumberTitleWithRecord


		PendingReversalMessage is a MessageField
			restricted
			"Has_Pending_Reversal"

		PendingARToAPMessage is a MessageField
			restricted
			"AR_To_AP_Select_RecordsExist"

		PendingObligationGroupingMessage is a MessageField
			restricted
			"Selected_For_Obligation_Grouping"

		UnpostedApplicationMessage is a MessageField
			restricted
			"Has_Unposted_Applications"


		DerivedMessage is a DerivedField
			type is Alpha 30
			default label is "Note"

			if (HasPendingReversal)
				return PendingReversalMessage
			else
			if (HasARToAPApplicationSelectSearch)
				return PendingARToAPMessage
			else
			if (HasUnpostedApplicationsSearch)
				return UnpostedApplicationMessage
			else
			if (HasReceivableInvoiceObligationGroupSearch)
				return PendingObligationGroupingMessage


		DerivedApplicationDiscountDate is a DerivedField
			type is Date
			LocalPaymentDepositeDate = ReceivablePaymentHeader.DepositDate
			if (LocalPaymentDepositeDate <= DiscountDate.DiscDate[1]
			or  (DiscountDate.DiscDate[2] not entered
			and  DiscountDate.DiscDate[3] not entered))
				return DiscountDate.DiscDate[1]
			else
			if ((LocalPaymentDepositeDate > DiscountDate.DiscDate[1]
			and LocalPaymentDepositeDate <= DiscountDate.DiscDate[2])
			or  DiscountDate.DiscDate[3] not entered)
				return DiscountDate.DiscDate[2]
			else
			if (LocalPaymentDepositeDate > DiscountDate.DiscDate[2]
			and LocalPaymentDepositeDate <= DiscountDate.DiscDate[3])
				return DiscountDate.DiscDate[3]

		DerivedPortalDiscountDate	is a DerivedField		
			type is Date
			if (current date <= DiscountDate.DiscDate[1]
			or  (DiscountDate.DiscDate[2] not entered
			and  DiscountDate.DiscDate[3] not entered))
				return DiscountDate.DiscDate[1]
			else
			if ((current date > DiscountDate.DiscDate[1]
			and current date <= DiscountDate.DiscDate[2])
			or  DiscountDate.DiscDate[3] not entered)
				return DiscountDate.DiscDate[2]
			else
			if (current date > DiscountDate.DiscDate[2]
			and current date <= DiscountDate.DiscDate[3])
				return DiscountDate.DiscDate[3]
			else
			if (DiscountDate.DiscDate[3] entered)
				return DiscountDate.DiscDate[3]
			else
			if (DiscountDate.DiscDate[3] not entered
			and	DiscountDate.DiscDate[2] entered)
				return DiscountDate.DiscDate[2]
			else
			if (DiscountDate.DiscDate[3] not entered
			and	DiscountDate.DiscDate[2] not entered
			and	DiscountDate.DiscDate[1] entered)
				return DiscountDate.DiscDate[1]

		DerivedPortalDiscountAmount	is a DerivedField				
			type is like InternationalAmount
			if (!HasDiscountReceivableApplicationAdjustments)	
				if (DerivedPortalDiscountDate = DiscountDate.DiscDate[1])
					return (DiscountPercent.DiscPct[1] * InvoiceAmount.CurrencyAmount)





				else
				if (DerivedPortalDiscountDate = DiscountDate.DiscDate[2])
					return (DiscountPercent.DiscPct[2] * InvoiceAmount.CurrencyAmount)





				else
				if (DerivedPortalDiscountDate = DiscountDate.DiscDate[3])
					return (DiscountPercent.DiscPct[3] * InvoiceAmount.CurrencyAmount)





			else	
				return 0	

		DerivedSignedPortalDiscountAmount							is a DerivedField	
			type is like InternationalAmount	
			if (DerivedPortalDiscountPercent entered)
				if (IsCreditMemo)	
					return DerivedPortalDiscountAmount	
				else	
					return DerivedPortalDiscountAmount * -1	
			else
				return 0

		DerivedSignedPortalDiscountMessageAmount							is a DerivedField	
			type is like InternationalAmount	
			if (IsCreditMemo)	
				return DerivedPortalDiscountAmount	
			else	
				return DerivedPortalDiscountAmount * -1	


		DerivedPortalDiscountPercent is a DerivedField 
			type is Decimal size 7.5
			if (current corporate date <= DiscountDate.DiscDate[1])
				return (DiscountPercent.DiscPct[1] * 100)
			else
			if (current corporate date > DiscountDate.DiscDate[1]
			and current corporate date <= DiscountDate.DiscDate[2])
				return (DiscountPercent.DiscPct[2] * 100)
			else
			if (current corporate date > DiscountDate.DiscDate[2]
			and current corporate date <= DiscountDate.DiscDate[3])
				return (DiscountPercent.DiscPct[3] * 100)

		DerivedIsUnreleased is a DerivedField  
			type is Alpha 3
			if (IsUnreleased)
				return "Yes"

		DerivedHasPendingReversalHeader is a DerivedField  
			type is Alpha 3
			if (HasReverseHeader)
				return "Yes"

		DerivedHasPendingReversal is a DerivedField  
			type is Alpha 3
			if (HasPendingReversal)
				return "Yes"

		DerivedHasARToAPApplicationSelectSearch is a DerivedField  
			type is Alpha 3
			if (HasARToAPApplicationSelectSearch)
				return "Yes"

		DerivedHasReceivableApplicationSelect is a DerivedField  
			type is Alpha 3
			if (HasReceivableApplicationSelect)
				return "Yes"

		DerivedHasReceivableApplicationAdjustmentSelectSearch is a DerivedField  
			type is Alpha 3
			if (HasReceivableApplicationAdjustmentSelectSearch)
				return "Yes"

		DerivedHasReceivableInvoiceObligationGroupSearch is a DerivedField  
			type is Alpha 3
			if (HasReceivableInvoiceObligationGroupSearch)
				return "Yes"

		DerivedHasDistributionSetNeedsReviewApplications is a DerivedField  
			type is Alpha 3
			if (HasDistributionSetNeedsReviewApplications)
				return "Yes"
		
		DerivedRoundTo							is a DerivedField
			type is Decimal 5.4
			restricted
			if (CurrencyDecimalsNumber = 2)
				return .01
			else
			if (CurrencyDecimalsNumber = 0)
				return 1
			else
			if (CurrencyDecimalsNumber = 3)
				return .001
			else
			if (CurrencyDecimalsNumber = 4)
				return .0001
				
	Transient Fields

		TransientAccountingEntity					is an AccountingEntity
			derive value from GeneralLedgerCompanyRel.AccountingEntity
		Reset										is Boolean
		TransientSelectedForAP						is Alpha 3  
			derive value from DerivedIsSelectedForAP

		TransientUnresolvedDispute					is Alpha 3  
			derive value from DerivedIsUnresolvedDispute


		SelectedApplicationAmount					is like InternationalAmount
			derive value from DerivedSelectApplicationAmount
		SelectedAdjustedAmount						is like InternationalAmount
			derive value from DerivedSelectDiscountAmount
		SelectedAdjustmentReason					is an ApplicationAdjustmentReason
			derive value from DerivedSelectDiscountReason

		AmountToApply								is like InternationalAmount
			derive value from DerivedSelectApplicationAmount
		AmountToAdjust								is like InternationalAmount
			derive value from DerivedSelectDiscountAmount
		AmountToAdjustReason						is an ApplicationAdjustmentReason
			derive value from DerivedSelectDiscountReason

		LineSelectedApplicationAmount				is like InternationalAmount
			derive value from DerivedLineSelectApplicationAmount
		LineSelectedAdjustedAmount					is like InternationalAmount
			derive value from DerivedLineSelectDiscountAmount
		LineSelectedAdjustmentReason				is an ApplicationAdjustmentReason
			derive value from DerivedSelectDiscountReason


		WriteoffAmount								is like InternationalAmount
			derive value from DerivedSelectApplicationAmount
		WriteoffReason								is an ApplicationAdjustmentReason
		WriteoffAccount								is a TransactionCodeBlock	
		TransientAdditionalDimensions				is a FinanceCodeBlock
		WriteoffARIncomeWithholdingCode				is AlphaUpper size 10	
		WriteoffARIncomeWithholdingDocumentNumber	is AlphaUpper size 16	




		BypassProjectDateEdit	
		TransientGeneralLedgerDate					is Date
			default label is "GlobalLedgerDate"
			derive value from DerivedGeneralLedgerDate
		TransientOperator							is like ReceivableOperator



		IncludeNationalAccountTransactions			is Numeric 1
			States
				No							value is 1
				Yes							value is 2
		DisplayCurrency								is Numeric 1
			States
				Transaction					value is 1
					default label is "Trans"
				Base						value is 2
					default label is "Base"
				BothAmounts					value is 3
					default label is "Both Amt"
				BothOpenAmounts				value is 4
					default label is "Both Open"
				CurrentRateOpenAmount		value is 5
					default label is "Current Rate Open"
		TransientSignedTransactionAmount			is like InternationalAmount
			default label is "InvoiceAmount"
			derive value from SignedTransactionAmount
		TransientSignedOpenAmount					is like InternationalAmount
			default label is "OpenAmount"
			derive value from SignedOpenAmount
		TransientUnsignedOpenAmount					is like InternationalAmount
			derive value from UnsignedOpenAmount
		TransientSignedBaseAmount					is like InternationalAmount
			default label is "BaseAmount"	
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedBaseAmount
		TransientSignedBaseOpenAmount				is like InternationalAmount
			default label is "BaseOpenAmount"	
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedBaseOpenAmount
		TransientSignedBaseCurrentAmount			is like InternationalAmount
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedBaseCurrentAmount
		TransientSignedCustomerGroupAmount	is like InternationalAmount	
			default label is "Amount"
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedCustomerGroupAmount
		TransientSignedCustomerGroupAgingOpenAmount	is like InternationalAmount	
			default label is "OpenAmount"
			precision is Company.Currency.NumberOfDecimals
			derive value from SignedCustomerGroupAgingOpenAmount
		TransientUnreleasedIndicator				is Alpha 3  
			derive value from UnreleasedIndicator
		TransientEFTCompanyCurrencyOpenAmount		is like InternationalAmount
			precision is EFTNotificationExtractResult.EFTBaseCurrency.NumberOfDecimals
			derive value from EFTCompanyCurrencyOpenAmount
		TransientEFTNPDiscountAmount				is like InternationalAmount		
			precision is EFTNotificationExtractResult.EFTBaseCurrency.NumberOfDecimals
			derive value from EFTNPDiscountAmount
		TransientEFTNPDiscountDate 					is Date
			derive value from DerivedEFTNotificationPrintDiscountDate
		TransientEFTNExtractDiscountDate			is Date
			derive value from DerivedEFTNExtractDiscountDate
		TransientEFTNotificationPrintNetAmount		is like InternationalAmount			
			precision is EFTNotificationExtractResult.EFTBaseCurrency.NumberOfDecimals
			derive value from EFTNotificationPrintNetAmount
		TransientSignedOpenAmountLessPortalRequestedAppliedAmount	is like InternationalAmount	
			derive value from SignedOpenAmountLessPortalRequestedAppliedAmount	
		TransientAmountToApplyToXReferencedInvoice	is like InternationalAmount
			derive value from DerivedAmountToApplyToXReferencedInvoice
		TransientXReferencedInvoiceHasBeenApplied	is Boolean
			derive value from DerivedXReferencedInvoiceHasBeenApplied
		TransientHasICBAutoApply					is Boolean
			derive value from DerivedHasICBAutoApply
		TransientNotAutoApply						is Boolean
		TransientErrorApplyICBCreditToInvoice		is Boolean
		TransientCreditApplied						is like InternationalAmount
		TransientUpdateReceivableProjectTransaction is Boolean
		TransientProjectSignedCashReceipts			is like InternationalAmount
			default label is "CashReceipts"
			derive value from ProjectSignedCashReceipts	
		FlipAmounts									is Boolean
		BypassGLDateEdit							is Boolean

		IsUnreleasedIndicator						is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedIsUnreleased	
		ARToAPPendingIndicator						is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasARToAPApplicationSelectSearch

		TransactionReversalHeaderPendingIndicator			is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasPendingReversalHeader

		TransactionReversalPendingIndicator			is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasPendingReversal

		PendingApplicationAdjustmentsIndicator		is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasReceivableApplicationAdjustmentSelectSearch
		PendingApplicationsIndicator				is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasReceivableApplicationSelect
		UnpostedApplicationsIndicator				is Alpha 1		
		InvoiceObligationGroupIndicator				is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasReceivableInvoiceObligationGroupSearch
		UnpostedDistributionsIndicator				is Alpha 1	
		PastDueIndicator							is Alpha 1	
		DistributionSetNeedsReviewIndicator			is Alpha 3		
			States
				No			value is blank
					default label is "_"
				Yes			value is "Yes"
			derive value from DerivedHasDistributionSetNeedsReviewApplications
		TransientCalculateTerms						is Boolean
		TransientIsolatedReceivableCompany			is an IsolatedReceivableCompany 
			derive value from Company
		TransientDisplayCurrency					is a ToCurrency
			derive value from DerivedDisplayCurrency

		TransientEFTExtractCompanyCurrencyOpenAmount		is like InternationalAmount
			precision is EFTExtractResult.EFTBaseCurrency.NumberOfDecimals
			derive value from EFTExtractCompanyCurrencyOpenAmount
		TransientEFTExtractDiscountDate			is Date
			derive value from DerivedEFTExtractDiscountDate
		TransientEFTExtractDiscountAmount					is like InternationalAmount
			precision is EFTExtractResult.EFTBaseCurrency.NumberOfDecimals
			derive value from EFTExtractBaseDiscountAmount
		TransientEFTExtractNetAmount						is like InternationalAmount
			precision is EFTExtractResult.EFTBaseCurrency.NumberOfDecimals
			derive value from EFTExtractNetAmount
		TransientInvoiceDetailTypeForContext						is an InvoiceDetailTypeForContext 
			derive value from DerivedInvoiceDetailTypeForContext
		TransientInvoiceDetailSequenceForContext					is an InvoiceDetailSequenceForContext 
			derive value from DerivedInvoiceDetailSequenceForContext
		TransientDistributionSetState			is Numeric size 1 
			States
				OutOfBalance				value is 1
				ReadyForProcessing 			value is 2
				Processed					value is 3
			derive value from DerivedDistributionSetState
		TransientReceivableInvoiceDetailSelectDistributionSetState is AlphaUpper size 1 
			States
				Incomplete				value is "I"
				Complete				value is "C"
				NotApplicable			value is "N"
			derive value from DerivedReceivableInvoiceDetailSelectDistributionSetState
		TransientReceivableInvoiceDetailSelectDistributionSetStateNoSummarize is AlphaUpper size 1 
			States
				Incomplete				value is "I"
				Complete				value is "C"
				NotApplicable			value is "N"
			derive value from DerivedReceivableInvoiceDetailSelectDistributionSetStateNoSummarize
		TransientSettlementDetailLineDistributionSetState			is Numeric size 1 
			States
				OutOfBalance				value is 1
				ReadyForProcessing 			value is 2
				Processed					value is 3
			derive value from DerivedSettlementDetailLineDistributionSetState
		RemittanceApplyDistributionSelectAmount			is like InternationalAmount 
			derive value from DerivedRemittanceApplyDistributionSelectAmount
		SettlementDetailLineSelectAmount				is like InternationalAmount 
			derive value from DerivedSettlementDetailLineSelectAmount
		TransientSelectSignedOpenAmount	is like InternationalAmount	
			derive value from DerivedSelectSignedOpenAmount

		TransientDerivedPortalSignedOpenAmount	is like InternationalAmount	
			derive value from DerivedPortalSignedOpenAmount
		TransientDerivedPortalDiscountDate	is Date	
			derive value from DerivedPortalDiscountDate
		TransientDerivedSignedPortalDiscountAmount is like InternationalAmount	
			derive value from DerivedSignedPortalDiscountAmount

		TransientTransactionAmount			is like InternationalAmount
			derive value from DerivedTransactionAmount
		TransientSignedTransactionAmountSummarized is like InternationalAmount
			derive value from DerivedSignedTransactionAmountSummarized
		TransientOpenAmount					is like InternationalAmount
			derive value from DerivedOpenAmount
		TransientSignedOpenAmountSummarized is like InternationalAmount
			derive value from DerivedSignedOpenAmountSummarized
		TransientStatus						is Numeric size 1
			derive value from DerivedStatus
			States
				Unreleased					value is 0
				OpenTransaction				value is 1
					default label is "Open"
				SelectForDraftApplication	value is 2
				ApplicationByDraftAcactNo	value is 5
					default label is "Application By Draft AcAct = No"
				ApplicationByDraftAcactYes	value is 6
					default label is "Application By Draft AcAct = Yes"
				FullyAppliedTransaction		value is 7
					default label is "FullyApplied"
				ClosedTransaction			value is 8
					default label is "Closed"
				HistoricalTransaction		value is 9
					default label is "Historical"
		TransientTieBackOriginalAmount		is like InternationalAmount
		TransientTieBackOpenAmount			is like InternationalAmount
		TransientDistributionOpenAmount		is like InternationalAmount
		TransientApplicationDiscountDate			is Date	
			default label is "DiscountDate"
			derive value from DerivedApplicationDiscountDate


		TransientOpenOnlyStatus						is Numeric size 1	
			default label is "Status"
			derive value from DerivedStatus
			States
				OpenTransaction				value is 1
					default label is "Open"




	Local Fields

		LocalCurrencyTable								is a CurrencyTable
		I1												is Numeric 3

		I9												is Numeric 3
		PriorApplication								is Boolean
		LocalApplicationAmount							is like InternationalAmount
		LocalDiscountAmount								is like InternationalAmount
		CalculateDiscountDate							is Date



		WorkAmount										is like InternationalAmount
		Work2Amount										is like InternationalAmount
		LocalDistributionSetSum							is like InternationalAmount
		LocalReceivableReason							is like ReceivableReason
		LocalSequence									is a Sequence
		Done											is Boolean
		LocalGLAccount									is like FinanceCodeBlock
		CreditOpenAmount								is like InternationalAmount

		WorkTotal										is like InternationalAmount
		LocalCurrentAmount 								is an InternationalAmount
		LocalUnappliedRemittanceTotalAmount 			is an InternationalAmount
		LocalLastDistributionSequence					is a Sequence
		LocalReceivableGLDistribution					is like ReceivableGLDistribution
		NewReceivableApplication						is a ReceivableApplication view
		AutoAdjustReason								is like ReceivableReason
		CurrencyWork1									is a FromCurrencyExchangeGroup
		CurrencyWork									is a ReceivableExchange
		LocalCurrency									is like Currency
		NewCustomerDraft								is a CustomerDraft view
		LocalDrPmtSeq									is Numeric 6				
		LocalTransType									is AlphaUpper 1				
		LocalCurrentDate								is Date
		LocalDaysDifference								is Numeric size 9
		LocalOperator									is a ReceivableOperator
		LocalCustomerGroup								is like CustomerGroup
		LocalPeriod										is Numeric 2
		BuildAgingDate									is Date
		LocalICBCreditCompany							is like ReceivableCompany
		LocalICBCreditNumber							is a CrNbr
		LocalICBCreditSequence							is a CrPymntSeq
		GainLossCalculation
		LocalDistributionAmount							is a FinanceCurrencyAmountGroup



		LocalExchangeDate								is an ExchangeDate
		LocalReceivablesCompany							is like ReceivableCompany
		LocalCurrencyAmount								is a CurrencyAmount




		NegativeFinanceCurrencyAmount
		LocalDistributionDate							is Date
		LocalLowestStatus								is Numeric 1
		LocalReference									is a Reference
		LocalDistExchangeDate							is Date
		LocalGainLossMessage							is Alpha 100

		LocalTotalDistributionAmount					is a FinanceCurrencyAmountGroup
		LocalNumberOfDecimals							is Numeric 1
		LocalCurrencyCalculationGroup					is a CurrencyCalculationGroup
		LocalOrigOpenAmount								is a FinanceCurrencyAmountGroup

		LocalCreditCompany								is like ReceivableCompany
		LocalCreditBatchNumber							is a CrBatch
		LocalCreditSequence								is a CrPymntSeq
		LocalGeneralLedgerSystemCode					is a GeneralLedgerSystemCode	
		SumOfAgingDisputeRelAmountsDone															is Boolean	
		SumOfTransactionDetailAgePeriodRelAmountsDone											is Boolean	
		SumOfSameInvoiceRelReceivableApplicationSelectRelAmountsDone							is Boolean	
		SumOfSameInvoiceRelAmountsDone															is Boolean	
		SumOfReceivableApplicationAdjustmentRelAmountsDone										is Boolean	
		SumOfMixedSignedApplicationRelAmountsDone												is Boolean	
		SumOfReceivableInvoiceDetailRelAmountsDone												is Boolean	
		SumOfReceivableInvoiceRelAmountsDone													is Boolean	
		SumOfReceivableInvoiceOpenDisputeRelDone												is Boolean	
		SumOfUnappliedReceivablePaymentRemitDetailRelAmountstDone								is Boolean	


		SumOfAgingDisputeRelDisputedAmount													is an InternationalAmount	
		SumOfTransactionDetailAgePeriodRelInvoiceAmountCurrencyAmount						is an InternationalAmount	
		FirstSameInvoiceRelReceivableApplicationSelectRelGeneralLedgerDate					is Date						
		SumOfSameInvoiceRelReceivableApplicationSelectRelPaymentApplicationAmount			is an InternationalAmount	
		SumOfSameInvoiceRelReceivableApplicationSelectRelTotalAdjustments					is an InternationalAmount	
		SumOfSameInvoiceRelReceivableApplicationSelectRelTotalCreditAdjustments				is an InternationalAmount	
		SumOfSameInvoiceRelDerivedApplicationDiscount										is an InternationalAmount	
		SumOfSameInvoiceRelOpenAmount														is an InternationalAmount	
		SumOfSameInvoiceRelInvoiceAmountCurrencyAmount										is Decimal 19.3				
		SumOfSameInvoiceRelApplicationAmountCurrencyAmount									is Decimal 19.3				
		SumOfSameInvoiceRelAdjustmentAmountCurrencyAmount									is Decimal 19.3				
		SumOfReceivableApplicationAdjustmentRelBaseEarnedDiscountAmount						is an InternationalAmount	
		SumOfMixedSignedApplicationRelApplicationAmountCurrencyAmount						is Decimal 19.3				
		SumOfReceivableInvoiceDetailRelSignedOpenAmount										is an InternationalAmount	
		SumOfReceivableInvoiceDetailRelSignedBaseOpenAmount									is an InternationalAmount	
		SumOfReceivableInvoiceDetailRelSignedOpenAmountAfterDiscount						is an InternationalAmount	
		SumOfReceivableInvoiceRelInvoiceAmountCurrencyAmount								is Decimal 19.3				
		SumOfReceivableInvoiceOpenDisputeRelDisputedAmount									is an InternationalAmount	
		SumOfUnappliedReceivablePaymentRemittanceDetailRelAppldAmt							is like InternationalAmount	


		LocalDifferenceAmount																is like InternationalAmount
		LocalGeneralLedgerCompanyGroup					is a GeneralLedgerCompanyGroup
		IsLineSelect									is Boolean
		LocalDepositeDate								is Date
		LocalEFTDiscountAmount							is like InternationalAmount
		LocalPrmExemptPrenoteForImmediates				is Boolean
		LocalProcessDate								is Date
		LocalDueDate									is Date
		LocalPrmOverrideDateTo							is Date
		CurrencyRelationship
		LocalToCurrency									is a ToCurrency

		NativeLPLBODTrigger			is Boolean
		NativeLPLRTBODTrigger		is Boolean
		LocalTriggerFrom			is Alpha size 100
		CalculateTerms
		LocalTermsCalTrigger							is Alpha size 1
		LocalCurrencyRate								is a CurrencyExchangeRate
		LocalFEG										is like FinanceEnterpriseGroup
		LocalPrmCustomerGroup							is like CustomerGroup
		LocalCompany									is like Company
		LocalEFTCalendar								is a SystemCalendar
		LocalActualBankDayNumber						is Numeric size 2
		LocalEFTDueDays									is a DueDays
		LocalFromDate									is Date
		LocalEFTDueDaysType								is AlphaUpper size 1
		LocalBankDate									is Date
		LocalFromAccountingEntity						is an AccountingEntity
		LocalToAccountingEntity							is an AccountingEntity
		LocalCustomer									is like Customer
		LocalEFTNotification							is an EftNote
		LocalReceivableInvoiceDetailType 				is AlphaUpper size 1
		LocalInvoice 									is AlphaUpper size 22
		LocalReceivableInvoiceDetail					is like ReceivableInvoiceDetail
		LocalCreditCustomer								is like Customer
		LocalOutputCurrencyAmount						is like InternationalAmount
		LocalTransactionAmount   						is like InternationalAmount
		LocalToDate										is Date
		LocalTermsCode									is a TermsCode
		LocalEnteredCompany								is like Company
		LocalEFTPrenotification							is AlphaUpper size 1
		LocalEFTCompany									is like ReceivableCompany
		LocalDiscAmount									is like InternationalAmount
		LocalOpenAmount									is an InternationalAmount
		LocalOriginalAmount								is like InternationalAmount
		LocalOriginalAppliedAmount						is like InternationalAmount
		LocalOriginalAdjustmentAmount					is like InternationalAmount
		LocalClaimsAndLiabilitiesHeader					is a ClaimsAndLiabilitiesHeader
		LocalEFTTransactionWithTypeN					is an ElectronicFundsTransferTransaction
		LocalEFTTransactionWithTypeA					is an ElectronicFundsTransferTransaction
		LocalCustomerDraftBank							is a CustomerDraftBank
		LocalDraftBank									is a CustomerDraftBank
		LocalPaymentDepositeDate						is Date
		LocalReturnNoDiscount							is Boolean

		LocalCurrencyRelationship						is a CurrencyRelationship					

	Context Fields	
		BatchNumberRange								is a BatchRange
		CashCodeRange
		CompanyRange
		ContextCompany									is a ReceivableCompany
		ContextCompanyCustomer							is a CompanyCustomer
		ContextCreditMemo								is a ReceivableInvoiceDetail

		ContextReceivableApplicationSequenceForContext 	is a ReceivableApplicationSequenceForContext 
		ContextReceivableCompanyForContext				is a ReceivableCompanyForContext 
		ContextReceivableBatchForContext				is a ReceivableBatchForContext 
		ContextReceivableInvoiceForContext				is a ReceivableInvoiceForContext 
		ContextFundDistributionSetState					is a FundDistributionSetState 
		ContextDocumentHeaderForContext					is a DocumentHeaderForContext 
		ContextSettlementIDForContext					is a SettlementIDForContext 
		CreditMemoRange									is an InvoiceRange3	
		CurrencyRange
		CustomerPurchaseOrderRange
		CustomerRange
		CustomerRepresentative
		CustomerRepresentativeContact
		DiscountDateRange								is a DateRange5	
		DueDateRange									is a DateRange3

		NationalAccountTransaction
		OpenAmountRange									is an AmountRange3  
		ProjectRange
		ReceivableInvoiceRange							is an InvoiceRange
		ReceivablePayment
		ReceivablePaymentHeader
		ReceivableProcessLevelRange
		SalesRepresentativeRange
		SelectedForGroupingFilter						is a FlagYN
		ContextReceivablePaymentCashDetail 				is a ReceivablePaymentCashDetail
		TermsCodeRange

		TransactionAmountRange							is an AmountRange4
		TransactionDateRange							is a DateRange4	
		TransUser1Range
		XrefNbrRange									is an InvoiceRange2


	Conditions	

		ActorContextCustomerRepresentativeContactEqualsPortalSelectedCustomerRepresentativeContact	
			restricted
			when ((ReceivablePortalPaymentDetailRel exists
			and	  actor.context.CustomerRepresentativeContact = ReceivablePortalPaymentDetailRel.CustomerRepresentativeContact)
			or	  UnappliedReceivablePaymentRemittanceDetailsExists)	

		ActorContextCustomerRepresentativeContactNotEqualsPortalSelectedCustomerRepresentativeContact	
			restricted
			when (ReceivablePortalPaymentDetailRel exists
			and actor.context.CustomerRepresentativeContact != ReceivablePortalPaymentDetailRel.CustomerRepresentativeContact)

		ActorContextCustomerRepresentativeEqualsPortalSelectedCustomerRepresentative	
			restricted
			when ((ReceivablePortalPaymentDetailRel exists
			and	  actor.context.CustomerRepresentative = ReceivablePortalPaymentDetailRel.CustomerRepresentative)
			or	  UnappliedReceivablePaymentRemittanceDetailsExists)	

		ActorContextCustomerRepresentativeNotEqualsPortalSelectedCustomerRepresentative	
			restricted
			when (ReceivablePortalPaymentDetailRel exists
			and actor.context.CustomerRepresentative != ReceivablePortalPaymentDetailRel.CustomerRepresentative)

		ActorContextCustomerRepresentativeOrContactNotEqualsPortalSelectedCustomerRepresentativeOrContact	
			restricted
			when (ReceivablePortalPaymentDetailRel exists
			and (actor.context.CustomerRepresentative != ReceivablePortalPaymentDetailRel.CustomerRepresentative
			or actor.context.CustomerRepresentativeContact != ReceivablePortalPaymentDetailRel.CustomerRepresentativeContact))

		AllowCreateReversal	
			restricted
			when (AvailableForReversal
			and  !HasReverseHeader
			and  !HasMarkedAsPaidReceivableApplicationAdjustments)	

		ShowSelectAllForReversal
			restricted
			when (HasReverseHeader
			and   not ReceivableInvoiceApplyReverseHeaderRel.HasReceivableInvoiceApplyReverseDetail)

		AllowEFTAdjustmentAdd	
			restricted
			when (AvailableForEFTAdjustments
			and  !EFTAdjustmentPending
			and  !IsHoldAllProcessing)

		AllowEFTAdjustmentUnselect	
			restricted
			when (EFTAdjustmentPending
			and   !IsHoldAllProcessing)

		AllowSelectForApplication	
			restricted
			when (AvailableForApplication)	


		AllowSelectForGrouping	
			restricted
			when (ContextCompanyCustomer in context
			and   IsOpen
			and  !HasReceivableInvoiceObligationGroup)

		AllowUnSelectForGrouping	
			restricted
			when (ContextCompanyCustomer in context
			and   IsOpen
			and   HasReceivableInvoiceObligationGroup)

		AlwaysFalse	
			restricted
			when (!Customer entered)

		AlwaysTrue	
			restricted
			when (Customer entered)

		ApplyCashAcrossReceivableCompaniesFlagSameInBothAnalystAndThirdPartyCompanies 
			restricted
			when ((actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ThirdPartyPaymentProcessingCompanyRel.ApplyCashAcrossReceivableCompanies
			and	actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and	Customer = actor.agent(CustomerRepresentativeContact).Customer)
			or	(!actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ThirdPartyPaymentProcessingCompanyRel.ApplyCashAcrossReceivableCompanies
			and	!actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and		actor.agent(CustomerRepresentativeContact).ReceivableCompany = actor.agent(CustomerRepresentativeContact).DerivedThirdPartyPaymentProcessingCompany
			and	 Customer = actor.agent(CustomerRepresentativeContact).Customer
			and	 Company  = actor.agent(CustomerRepresentativeContact).ReceivableCompany))

		ApplyCashAcrossReceivableCompaniesFlagDiffersInAnalystAndThirdPartyCompanies 
			restricted
			when ((actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ThirdPartyPaymentProcessingCompanyRel.ApplyCashAcrossReceivableCompanies
			and	!actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and	 Customer = actor.agent(CustomerRepresentativeContact).Customer
			and	 Company  = actor.agent(CustomerRepresentativeContact).ReceivableCompany)
			or	 (!actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ThirdPartyPaymentProcessingCompanyRel.ApplyCashAcrossReceivableCompanies
			and	actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and	actor.agent(CustomerRepresentativeContact).ReceivableCompany = actor.agent(CustomerRepresentativeContact).DerivedThirdPartyPaymentProcessingCompany
			and	Customer = actor.agent(CustomerRepresentativeContact).Customer
			and	Company  = actor.agent(CustomerRepresentativeContact).ReceivableCompany))

		AvailableForApplication	
			restricted
			when ((ReceivablePayment entered or OnCreditMemoApplicationForm)
			and	Status.OpenTransaction)

		AvailableForCashApplication	
			restricted
			when (Status.OpenTransaction
			and   !Origin.IntercompanyBilling
			and   !BankTransactionCodeRel.IsBankServiceTransaction	
			and   !EFTTransaction
			and   !HasARToAPApplicationSelect
			and   !HasReceivableApplicationSelect)


		AvailableForCashApplicationIncludingEFTEligibleForWriteOff	
			restricted
			when (Status.OpenTransaction
			and   !Origin.IntercompanyBilling
			and   !BankTransactionCodeRel.IsBankServiceTransaction	
			and   !EFTTransactionEligibleForWriteOff
			and   !HasARToAPApplicationSelect
			and   !HasReceivableApplicationSelect)

		AvailableForCashApplicationSelect
			restricted
			when (Status.OpenTransaction
			and   !Origin.IntercompanyBilling
			and   !BankTransactionCodeRel.IsBankServiceTransaction	
			and   !EFTTransaction
			and   !HasARToAPApplicationSelect
			and   (!ReceivableApplicationSelectRel exists
			or	(ReceivableApplicationSelectRel.Company = ContextCompany
			and	ReceivableApplicationSelectRel.ReceivablePaymentHeader = ReceivablePaymentHeader
			and	ReceivableApplicationSelectRel.ReceivablePayment = ReceivablePayment)))

		AvailableForCreditApplication
			restricted
			when  (Status.OpenTransaction
			and   !ReceivableApplicationSelectRel exists)

		AvailableForEFTAdjustments
			restricted
			when (BankTransactionCodeRel.IsCashPaymentAndOriginReceivable	


			and  (EftExtract < 9
			or	TemporaryHold entered))

		AvailableForEFTAdjustmentsHold
			restricted
			when (AvailableForEFTAdjustments
			and   !IsHoldAllProcessing)

		AvailableForReversal
			restricted
			when (PostedApplicationsAvailableToInvoiceReverseRel exists
			and  (Status.OpenTransaction
			or	Status.FullyAppliedTransaction
			or 	  Status.ClosedTransaction
			or	Status.HistoricalTransaction) 
			and   !Origin.ProformaInvoice
			and   !BillOfExchangeInvoices)

		HasPostedApplicationsAvailableToInvoiceReverse
			restricted
			when (PostedApplicationsAvailableToInvoiceReverseRel exists)

		BillOfExchangeInvoices
			restricted
			when (BankTransactionCodeRel.IsBillOfExchangePayment	
			and   BankTransactionCodeRel.TransactionOrigin.Receivable
			and   CompanyCustomerRel.BillOfExchangeProcessing.Individual)

		CashApplicationOperatorRequired
			restricted
			when (ReceivablePayment.Company.CashOperatorRequired)	

		CreditApplicationOperatorRequired 
			restricted
			when (Company.CashOperatorRequired)

		CompanyCustomerRelAutomaticApplicationMethodRemittance
			restricted
			when (CompanyCustomerRel.AutomaticApplicationMethod.Remittance)

		CompanyCustomerRelEligibleForThirdPartyPaymentIntegration
			restricted
			when (CompanyCustomerRelAutomaticApplicationMethodRemittance
			and	CompanyCustomerRelReceivableProcessingMethodOpenItem)

		CompanyCustomerRelReceivableProcessingMethodOpenItem
			restricted
			when (CompanyCustomerRel.ReceivableProcessingMethod.OpenItem)

		CompanyInContext
			restricted
			when (ContextCompany in context)

		CreditDebitMemoReasonEntered	
			restricted
			when (CreditDebitMemoReason entered)

		CreditMemoHasApplications
			restricted
			when (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
			and   CreditMemoReceivableApplicationRel exists)

		CurrencyNotEqualToReceivablePaymentCurrency	
			when (OriginalCurrency != ReceivablePayment.OriginalCurrency)	

		CustomerInContext
			restricted
			when (ContextCompanyCustomer in context)

		InvoiceDetailAllowSummarizeShowAllInvoiceDetailsForThisInvoice
			restricted
			when (SummarizeDetail)

		InvoiceDetailAllowSummarizeShowMain
			restricted
			when (not SummarizeDetail)

		InvoiceDetailAllowSummarizeShowCurrencyAmounts
			restricted
			when (not SummarizeDetail)

		InvoiceDetailAllowSummarizeShowPriorCreditApplications
			restricted
			when (not SummarizeDetail
			and   CreditMemoHasApplications)

		InvoiceDetailAllowSummarizeShowPriorApplications
			restricted
			when (not SummarizeDetail
			and   HasReceivableApplications)






		DerivedAR58IncludeHistory
			when (IsIncludeHistory)

		DerivedAR58OnlyHistory
			when (Status > 6)

		DerivedAR58Open
			when (Status = 1)

		DerivedSignedOpenAmountEntered	
			restricted
			when (DerivedPortalSignedOpenAmount != 0)

		DestinationIntrastatCountryEntered	
			restricted
			when (DestinationIntrastatCountry entered)

		DisplayBaseAmountColumn
			restricted
			when (CompanyCustomerRel.CurrencyDisplay.BaseAmounts or CompanyCustomerRel.CurrencyDisplay.CompareAmounts)

		DisplayBaseOpenColumn
			restricted
			when (CompanyCustomerRel.CurrencyDisplay.BaseAmounts or CompanyCustomerRel.CurrencyDisplay.CompareOpenAmounts)

		HasReceivableUnpostedApplications
			restricted
			when (HasReceivableApplications
			and   HasUnpostedApplications)

		DisplayCurrentRateOpenColumn
			restricted
			when (CompanyCustomerRel.CurrencyDisplay.CurrentRateOpenAmounts)

		DisplayOnCreditApplicationList	
			restricted
			when (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
			and   AvailableForCashApplication)

		DisplayOnOpenCreditMemoList
			restricted
			when (DisplayOnCreditApplicationList
			and	NotSummarizedOrFirstSummarizedLine
			and IsOpenAndPortalPaymentUnSelected	
			and	WithinCompanyRange
			and	WithinCustomerRange
			and WithinCreditMemoRangeAndXrefNbrRange	

			and	WithinTransactionDateRange
			and	WithinDiscountDateRange
			and	WithinDueDateRange
			and	WithinOpenAmountRange
			and	WithinProjectRange
			and	WithinCustomerPurchaseOrderRange
			and	WithinTransUser1Range
			and	WithinCurrencyRange
			and	WithinProcessLevelRange
			and	IsValidForActorContext)

		DisplayOnCreditReview
			when (IsSummarizeDetailParticipant
			or	IsNotSummarized)

		DisplaySummarizedLines
			when (IsSummarizeDetailParticipant
			and	  ReceivableInvoiceRel.NumberOfLines > 1)

		DisplayTranAmountColumn
			restricted
			when (CompanyCustomerRel.CurrencyDisplay.TransactionAmounts or CompanyCustomerRel.CurrencyDisplay.CompareAmounts)

		DisplayTranOpenColumn
			restricted
			when (CompanyCustomerRel.CurrencyDisplay.TransactionAmounts or CompanyCustomerRel.CurrencyDisplay.CompareOpenAmounts)

		DueDateChangeAllowed
			restricted
			when (Company.TransactionDueDateChangeAllowed
			and   IsOpen)  

		EFTAdjustmentPending
			restricted
			when (ReceivableElectronicFundsTransferAdjustmentRel exists)

		EFTNotificationEntered
			restricted
			when (any ReceivableInvoiceDetailRel.EFTNotification entered
			or	any ReceivableInvoiceDetailRel.EftAction = 1)

		EFTNotificationExtractResultEntered	
			restricted
			when (EFTNotificationExtractResult entered)

		PaymentCreatedElectronicFundsTransferRelExists  
			restricted
			when (PaymentCreatedElectronicFundsTransferRel exists)

		EFTTransaction

			when (BankTransactionCodeRel.IsCashPaymentAndOriginReceivable)	



		EFTTransactionEligibleForWriteOff	
			restricted
			when (BankTransactionCodeRel.IsCashPaymentAndOriginReceivable	


			and   EFTNotification >2)	

		FinanceDimension2OrProjectContractOrProjectEntered	
			restricted
			when (FinanceDimension2 entered
			or ProjectContract entered
			or Project entered)

		ForeignEconomicRegulatoryCodeEntered	
			restricted
			when (ForeignEconomicRegulatoryCode entered)

		FromIntercompanyBilling	
			when (IntercompanyBillingDocumentRel exists)

		FromProjectContractInvoice	
			when (ProjectContractInvoiceRel exists)

		FromSubleaseBillingInvoice	
			when (SubleaseBillingInvoiceRel exists)

		HasApplications
			restricted
			when (ReceivableApplicationRel exists)

		TransactionHasApplications
			when (LastApplicationSequence entered)

		HasApplicationSelect
			when (ReceivableApplicationSelectRecordsExistRel exists)

		HasARToAPApplicationSelect
			restricted
			classic name is ARAPSEL-EXIST
			when (ARToAPApplicationSelectRel exists)

		HasARToAPApplicationSelectSearch	
			when (ARToAPApplicationSelectRel exists)

		HasComments
			when (CompanyCustomerCommentRel exists)

		HasCreditApplications
			restricted
			classic name is CRARAPPL-EXIST
			when (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
			and   ReceivableCreditApplicationRel exists)

		HasCustomerDraftCredits
			restricted
			when (CustomerDraftCreditRel exists)

		HasCustomerInvoiceDistribution
			restricted
			when (CustomerInvoiceDistributionRel exists)

		HasDiscountReceivableApplicationAdjustments	
			restricted
			when (first DiscountReceivableApplicationAdjustmentRel exists)

		HasDunningHistory
			restricted
			classic name is ARDUNHIS-EXIST
			when (first DunningHistoryRel exists)

		HasMarkedAsPaidReceivableApplicationAdjustments							
			restricted															
			when (ReceivableApplicationAdjustmentRel.HasMarkedAsPaidReceivableApplicationAdjustments)	//IEFIN-56617 - Updated... Thought about ReceivableApplicationAdjustmentRel.AdjustmentReason = Company.ReceivableCompany.MarkedAsPaidReceivableReason, but it wasn't exact.  IEFIN-40063 Was .AdjustmentReason = "MP")

		HasMultipleOpenReceivableInvoiceDisputes
			when (instance count of ReceivableInvoiceOpenDisputeRel > 1)

		HasPendingReversal	
			when (HasReverseDetail
			or	HasReceivablePaymentReverseDetail)





		HasReceivableApplicationAdjustments
			restricted
			classic name is ARADJUST-EXIST
			when (first ReceivableApplicationAdjustmentRel exists)

		HasReceivableApplicationAdjustmentSelect
			restricted
			classic name is ARSADJ-EXISTS
			when (first ReceivableApplicationAdjustmentSelectRel exists)

		HasReceivableApplicationAdjustmentSelectSearch	
			when (first ReceivableApplicationAdjustmentSelectRel exists)

		HasReceivableApplications
			restricted
			classic name is ARAPPL-EXISTS
			when (first ReceivableApplicationRel exists)

		HasReceivableApplicationSelect
			classic name is ARSAPL-EXISTS
			when (ReceivableApplicationSelectRel exists)

		HasReceivableApplicationSelectNotSumLine
			restricted
			when (ReceivableApplicationSelectRel exists
			and  !SummarizeDetail)

		HasReceivableApplicationSelectSumLine
			restricted
			when (ReceivableApplicationSelectRel exists
			and   SummarizeDetail)

		HasReceivableApplicationSelectSummarizeLine
			restricted
			when (ReceivableApplicationSelectRecordsExistRel exists
			and SummarizeDetail)

		HasReceivableApplicationSelectForInvoiceList	
			when ((ReceivableApplicationSelectRel exists)
			or SummarizeDetail and SameInvoiceRel.HasApplicationSelect)

		IsSummarizeDetailAndHasMultipleApplicationSelectRecords	
			when (SummarizeDetail
			and CountOfReceivableApplicationSelectRecordsExistRel >1)	





		HasReceivableInvoiceDisputes
			classic name is ARDSPUTE-EXIST
			when (ReceivableInvoiceDisputeRel exists
			and   any ReceivableInvoiceDisputeRel.ResolveDate not entered)

		HasReceivableInvoiceObligationGroup
			restricted
			when (ReceivableInvoiceObligationGroupRel exists)

		HasDistributionSetNeedsReviewApplications

			when (DistributionSetNeedsReviewDebitApplications exists
			or	DistributionSetNeedsReviewCreditApplications exists)

		HasReceivableInvoiceObligationGroupSearch	
			when (ReceivableInvoiceObligationGroupRel exists)

		HasReceivableInvoiceTransfers
			restricted
			classic name is ITEMAUD-EXISTS
			when (ReceivableInvoiceTransferRel exists)

		HasReceivablePaymentReverseDetail	
			restricted
			when (first ReceivablePaymentApplyReverseDetailRel exists)

		HasReverseDetail
			restricted
			when (ReceivableInvoiceApplyReverseDetailRel exists)

		HasReverseHeader
			restricted
			when (ReceivableInvoiceApplyReverseHeaderRel exists)

		HasSameInvoiceRel
			restricted
			when (first SameInvoiceRel exists)

		AllowSelectDistributionSet 
			restricted
			when (Company.SelectFundDistributionSet
			and   Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting)

		CreditMemoCompanyAllowSelectDistributionSet 
			restricted
			when (ContextCreditMemo.Company.SelectFundDistributionSet
			and   ContextCreditMemo.Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting)

		ContextCreditMemoIsFundAccountingSupported
			restricted
			when (ContextCreditMemo.ReceivableInvoiceRel.OriginIsFundAccountingSupported
			and   ContextCreditMemo.ReceivableInvoiceRel.ProrateDistributionsRel exists)

		InvoiceIsFundAccountingSupported
			restricted
			when (ReceivableInvoiceRel.OriginIsFundAccountingSupported
			and   ReceivableInvoiceRel.ProrateDistributionsRel exists)

		CreditAndInvoiceAreBothFundAccountingOrBothNot
			restricted
			when ((ContextCreditMemoIsFundAccountingSupported
			and	InvoiceIsFundAccountingSupported)
			or   (!ContextCreditMemoIsFundAccountingSupported
			and   !InvoiceIsFundAccountingSupported))

		ContextSettlementDetailLineRelExists 
			restricted
			when (ContextSettlementDetailLineRel exists)

		ReceivablePaymentRemittanceDetailContextRelExists 
			restricted
			when (ReceivablePaymentRemittanceDetailContextRel exists)

		DistributionSetNeedsReviewAllowSummarizeComplete 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetState.Complete)

		DistributionSetNeedsReviewAllowSummarizeIncomplete 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetState.Incomplete)

		DistributionSetNeedsReviewAllowSummarizeNotApplicable 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetState.NotApplicable)

		DistributionSetNeedsReviewNoSummarizeComplete 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetStateNoSummarize.Complete)

		DistributionSetNeedsReviewNoSummarizeIncomplete 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetStateNoSummarize.Incomplete)

		DistributionSetNeedsReviewNoSummarizeNotApplicable 
			restricted
			when (TransientReceivableInvoiceDetailSelectDistributionSetStateNoSummarize.NotApplicable)

		AllowProrateAndSelectAllForRemittanceApply 
			restricted
			when (AllowSelectDistributionSet
			and   Status.OpenTransaction
			and   OnRemittanceSelectSequenceForm
			and   ReceivablePaymentRemittanceDetailContextRel exists
			and   first ReceivablePaymentRemittanceHeaderContextRel.ReceivablePayment.Status.Unreleased
			and   ReceivablePaymentRemittanceDetailContextRel.DerivedDetailDistributionSetState != 2)

		AllowMatchDistributionsForRemittanceApply 
			restricted
			when (AllowProrateAndSelectAllForRemittanceApply
			and   AssociatedLine entered
			and   IsBillingInvoice)

		AllowProrateAndSelectAllForSettlementDetail 
			restricted
			when (AllowSelectDistributionSet
			and   Status.OpenTransaction
			and   OnSettlementDetailSelectSequenceForm
			and   ContextSettlementDetailLineRel exists
			and   ContextSettlementDetailRel.IntercompanyBillingSettlementHeader.Status.Unreleased
			and   ContextSettlementDetailLineRel.DerivedDistributionSetState != 2)

		AllowMatchDistributionsForSettlementDetail 
			restricted
			when (AllowProrateAndSelectAllForSettlementDetail
			and   AssociatedLine entered)

		AllowSelectOpenAmountForRemittanceApply 
			restricted
			when (AllowSelectDistributionSet
			and   Status.OpenTransaction
			and   OnRemittanceSelectSequenceForm
			and   OpenAmount entered
			and  !ReceivablePaymentRemittanceDetailContextRel exists
			and   first ReceivablePaymentRemittanceHeaderContextRel.ReceivablePayment.Status.Unreleased)

		AllowSelectOpenAmountForSettlementDetail 
			restricted
			when (AllowSelectDistributionSet
			and   Status.OpenTransaction
			and   OnSettlementDetailSelectSequenceForm
			and   DerivedSignedSettlementDetailLineSelectAvailableAmount entered
			and  !ContextSettlementDetailLineRel exists
			and   ContextSettlementDetailRel.IntercompanyBillingSettlementHeader.Status.Unreleased)

		AllowUnselectForRemittanceApply 
			restricted
			when (AllowSelectDistributionSet
			and   Status.OpenTransaction
			and   OnRemittanceSelectSequenceForm
			and   ReceivablePaymentRemittanceDetailContextRel exists
			and   first ReceivablePaymentRemittanceHeaderContextRel.ReceivablePayment.Status.Unreleased)

		AllowUnselectForSettlementDetail 
			restricted
			when (AllowSelectDistributionSet
			and   Status.OpenTransaction
			and   OnSettlementDetailSelectSequenceForm
			and   ContextSettlementDetailLineRel exists
			and   ContextSettlementDetailRel.IntercompanyBillingSettlementHeader.Status.Unreleased)

		AllowProrateAndSelectAll 
			restricted
			when (AllowSelectDistributionSet
			and  (HasReceivableApplicationSelect
			or   (HasApplicationSelect
			and   SummarizeDetail))
			and  !TransientReceivableInvoiceDetailSelectDistributionSetState.Complete
			and  !TransientReceivableInvoiceDetailSelectDistributionSetState.NotApplicable)

		AllowMatchDistributionsForFundAccounting 
			restricted
			when (AllowProrateAndSelectAll
			and  (IsBillingInvoice
			and   AssociatedLine entered))

		HasUnpostedApplications
			restricted
			when (UnpostedApplicationsRel exists)

		HasUnpostedApplicationsSearch	
			when (ReceivableApplicationSet4Rel exists)

		HasUnpostedCreditApplications
			restricted
			when (UnpostedCreditApplicationRel exists
			and !HasMarkedAsPaidReceivableApplicationAdjustments)	

		HasUnpostedDistributions	
			when (ReceivableInvoiceRel.UnpostedDistributionsRel exists)

		IntercompanyBilling
			restricted
			when (Origin.IntercompanyBilling)

		InvoicesForPortalCustomer
			restricted

			when  ((actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent	

			and		(DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).ReceivableCompany  
			and 	 DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).Customer))  

			or		(actor.agent(CustomerRepresentativeContact).IsActiveInvoiceCustomerAndNotAllowPortalApplyCashAcrossReceivableCompanies	
			and		ReceivableInvoiceDetail.Company.CustomerGroupField.CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup	
			and		Company = actor.agent(CustomerRepresentativeContact).ReceivableCompany
			and		Customer = actor.agent(CustomerRepresentativeContact).Customer)

			or		(actor.agent(CustomerRepresentativeContact).IsActiveInvoiceCustomerAndAllowPortalApplyCashAcrossReceivableCompanies	
			and		ReceivableInvoiceDetail.Company.CustomerGroupField.CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup	
			and		Customer = actor.agent(CustomerRepresentativeContact).Customer))	

		IsEligibleToShowInPortal 
			restricted
			when (ApplyCashAcrossReceivableCompaniesFlagSameInBothAnalystAndThirdPartyCompanies
			or	  ApplyCashAcrossReceivableCompaniesFlagDiffersInAnalystAndThirdPartyCompanies)

		NationalAccountCustomerCheck
			when 	(actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent  
			and		DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).ReceivableCompany  
 			and		DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).Customer)   

		IsCustomerRepresentativeApplyCashAcrossReceivableCompanies	
			restricted
			when (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.IsInvoiceCustomerAndAllowPortalApplyCashAcrossReceivableCompanies
			or   NationalAccountCustomerCheck)  

		IsAdjusted
			restricted
			when (AdjustmentAmount.CurrencyAmount entered)

		IsAnOpenTransaction
			restricted
			when (any ReceivableInvoiceDetailRel.Status = 1
			and   any ReceivableInvoiceDetailRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered
			or	any ReceivableInvoiceDetailRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount entered)

		IsApplied
			restricted
			when (ApplicationAmount.CurrencyAmount entered)

		IsAppliedOrAdjusted
			restricted
			when (AdjustmentAmount.CurrencyAmount entered
			or	ApplicationAmount.CurrencyAmount entered)

		IsARToAPInterfaceNotOkay
			restricted
			when (IsSelectedForAP
			and   ARToAPInterfaceIsSelectedRel.Status.Released)

		IsAvailableForQuickWriteoff
			restricted
			when (Status.OpenTransaction
			and !HasMarkedAsPaidReceivableApplicationAdjustments)

		IsCreditMemo
			restricted
			when (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)

		IsDebitMemo
			restricted
			when (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo)

		IsDiscount
			restricted
			when (DiscountDate.DiscDate[1] entered)

		IsDisputeEligible
			restricted
			when (Status.OpenTransaction
			and not Origin.IntercompanyBilling
			and !PortalPaymentSelected)	

		AllowModifyInvoiceAccrualAccount
			restricted
			when (Company.DetailedInvoiceAccrualDistributions
			and   Status.OpenTransaction)

		IsEligibleForOverCashApplication
			restricted
			when (Company.OverApplyInvoice
			and DerivedOpenAmount = DerivedTransactionAmount
			and (!HasReceivableApplicationSelect
			or  (HasReceivableApplicationSelect
			and !IsOverApplied)))

		IsHoldAllProcessing
			restricted
			when (ReceivableElectronicFundsTransferNotifyRel.HoldAllProcessing
			or	  ReceivableElectronicFundsTransferNotifyCustomerRel.HoldAllProcessing)

		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)

		IsIncludeHistory
			restricted
			when (Status >  blank
			and   Status <=  9)

		IsInvoice
			restricted
			when (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.Invoice)

		IsManualEntry	
			restricted	
			when (Origin.ManualInvoice
			or	Origin.ManualMemo)

		ShowDetailedFinanceStructure
			restricted
			when (ReceivableInvoiceRel.ShowDetailedFinanceStructure
			and   InvoiceFinanceCodeBlock entered)

		IsMultipleDiscount
			restricted
			when (DiscountDate.DiscDate[2] entered)

		IsNationalAccountParent  
			restricted
			when(CompanyCustomerRel.IsNationalAccountCustomer)

		IsNonBaseCurrency
			restricted
			when (OriginalCurrency != Company.Currency)

		IsNotApplied
			restricted
			when (ApplicationAmount.CurrencyAmount not entered)

		IsNotHistorical
			restricted
			classic name is AROSET4
			when (Status >  blank
			and   Status <  9)

		IsNotOpen
			restricted
			when (Status >  1)

		IsNotSummarized
			restricted
			classic name is MULTIPLE-DTL
			when (not ReceivableInvoiceRel.SummarizeDetail)

		IsOpen
			restricted
			classic name is AROSET3
			when (Status.OpenTransaction)

		IsOpenNotApplied
			restricted
			when (Status.OpenTransaction
			and ApplicationAmount.CurrencyAmount = 0)

		NotAllInvoiceDetailAreAppliedForThisInvoice
			restricted
			when (ReceivableInvoiceDetailPartiallyAppliedForThisInvoiceRel exists)

		IsOpenTransactionOrDraft
			restricted
			classic name is AROSET2
			when (Status.OpenTransaction
			or	Status.SelectForDraftApplication)

		IsOpenAndPortalPaymentSelected	
			restricted
			when (Status.OpenTransaction
			and PortalPaymentSelected)

		IsOpenAndPortalPaymentSelectedByThisCustomerRepresentativeContact	
			restricted
			when (Status.OpenTransaction
			and PortalPaymentSelected
			and ActorContextCustomerRepresentativeContactEqualsPortalSelectedCustomerRepresentativeContact	
			and ActorContextCustomerRepresentativeEqualsPortalSelectedCustomerRepresentative)	

		IsOpenAndPortalPaymentSelectedByThisCustomerRepresentativeContactOrUnSelected	
			restricted
			when (IsOpenAndPortalPaymentSelected
			or IsOpenAndPortalPaymentUnSelected)







		IsOpenAndPortalPaymentUnSelected	
			restricted
			when (Status.OpenTransaction
			and !PortalPaymentSelected)

		IsOverApplied
			restricted
			when (ReceivableApplicationSelectRel.IsOverApplied)

		IsPaid
			restricted
			when (Status >= 7)

		IsPastDue	
			when (IsOpenTransactionOrDraft
			and DueDate < current corporate date)

		IsProject
			restricted
			when (Project entered)

		IsProjectOrProjectContract
			restricted
			when (Project entered
			or	ProjectContract entered)

		IsSelectableForAPInterface
			restricted
			when  ((Status.OpenTransaction				
			or	  Status.SelectForDraftApplication)
			and	  ReceivableInvoiceRel.Status.Released
			and	  EFTNotification.PrenoteNotSent
			and	 !ReceivableApplicationSelectRel exists
			and	 !ReceivableApplicationAdjustmentSelectRel exists
			and	 !ReceivableApplicationSet4Rel exists
			and	 !ReceivableInvoiceApplyReverseHeaderRel exists
			and	 !ReceivablePendingAdjustmentRel exists
			and	 !IsSelectedForAP
			and  !IntercompanyBilling
			and  !PortalPaymentSelected)	

		IsSelectedForAP
			restricted
			when (ARToAPInterfaceIsSelectedRel exists)

		IsSummarizeDetailParticipant
			when (ReceivableInvoiceRel.SummarizeDetail = true
			and   ReceivableInvoiceRel.FirstReceivableInvoiceDetailInvoice	= ReceivableInvoiceDetail.Invoice
			and   ReceivableInvoiceRel.FirstReceivableInvoiceDetailType		= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
			and   ReceivableInvoiceRel.FirstReceivableInvoiceDetailSequence	= ReceivableInvoiceDetail.PaymentSeq)

		IsUnreleased	
			when (Status.Unreleased)

		IsUnresolvedDispute
			restricted
			when (ReceivableInvoiceUnresolvedDisputeRel exists)

		IsUsersortExist
			restricted
			when (Sort1 entered
			or	Sort2 entered
			or	Sort3 entered
			or	Sort4 entered)

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		SecurityGroupAllowsAccess
			when (actor.context.CompanySecurityGroup = blank
			or	  CompanySecurityGroupMemberRel exists)

		IsValidForPaymentCodeChange
			restricted
			when (!EFTNotificationEntered
			and   !IsAnOpenTransaction)

		IsValidForPaymentCodeChangeNew
			restricted
			when (IsOpen
			and   EFTNotification not entered
			and   EftAction != 1
			and   ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount not entered
			and   AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered
			and   !PortalPaymentSelected						
			and   !ReceivableApplicationSelectRel exists)		

		IsNotValidForPreNote
			restricted
			when (LocalPrmExemptPrenoteForImmediates entered
			and  ((LocalProcessDate entered
			and	LocalDueDate <= LocalProcessDate)
			or 	 (LocalPrmOverrideDateTo entered
			and   LocalDueDate <= LocalPrmOverrideDateTo))
			and   LocalEFTNotification = 0)

		LastNumbersEntered	
			restricted
			when (LastFinanceChargeDate entered
			or	LastStatementDate entered
			or	LastDunningLetterDate entered
			or	LastDunningLetter entered)

		LowestOpenSequence
			restricted
			when (!LowerOpenSequenceRel exists)

		LowestSequence
			restricted
			when (!LowerSequenceRel exists)

		MatchesSelectedForGroupingFilterCriteria
			when (SelectedForGroupingFilter not entered
			or   (SelectedForGroupingFilter entered
			and   SelectedForGroupingFilter.No
			and  !HasReceivableInvoiceObligationGroup)
			or   (SelectedForGroupingFilter entered
			and   SelectedForGroupingFilter.Yes
			and   HasReceivableInvoiceObligationGroup))

		NationalAccountTransactionInContext
			restricted
			when  (NationalAccountTransaction in context)

		NotSummarizedOrFirstSummarizedLine
			restricted
			when (!SummarizeDetail
			or	 LowestOpenSequence)

		NotSummarizedOrFirstSummarizedLineIncludeHistorical
			restricted
			when (!SummarizeDetail
			or	 LowestSequence)

		OnCreditMemoApplicationForm
			restricted
			when (ContextCreditMemo entered
			and   ContextCreditMemo.ReceivableInvoiceDetail != ReceivableInvoiceDetail)

		OnRemittanceSelectSequenceForm 
			restricted
			when (ContextReceivableApplicationSequenceForContext entered 
			and   ReceivablePaymentRemittanceContextRel exists)

		OnSettlementDetailSelectSequenceForm 
			restricted
			when (ContextSettlementIDForContext entered
			and   ContextSettlementDetailRel exists)

		OnTemporaryHold
			restricted
			when (TemporaryHold entered)

		OriginIntrastatCountryEntered	
			restricted
			when (OriginIntrastatCountry entered)

		OriginIntrastatCountryOrForeignEconomicRegulatoryCodeEnteredOrIsHSNSACCode	
			restricted
			when (OriginIntrastatCountry entered
			or ForeignEconomicRegulatoryCodeEntered
			or IsHSNSACCodeEnabled)


		PartiallyApplied
			when (DerivedOpenAmount != 0
			and (ApplicationAmount.CurrencyAmount != 0
			or 	 AdjustmentAmount.CurrencyAmount != 0))

		PartiallyAppliedCredit 
			restricted
			when (DisplaySignedAppliedAmount entered
			and Status.OpenTransaction)

		PortalThirdPartyPaymentProcessingPaymentCurrency	
			when (DerivedThirdPartyPaymentProcessingPaymentCurrency = OriginalCurrency)

		NoCorrespondingReceivablePortalPaymentDetailExist	
			restricted
			when (AnyReceivablePortalPaymentDetailExistRel !exists)

		PortalPaymentSelectedButNoCorrespondingReceivablePortalPaymentDetailExist	
			restricted
			when (PortalPaymentSelected
			and NoCorrespondingReceivablePortalPaymentDetailExist
			and NoReceivablePaymentRemittanceWithApplicationsAvailableForPostingExist
			and NoUnappliedReceivablePaymentRemittanceAcrossCompaniesRelExists)

		NoReceivablePaymentRemittanceWithApplicationsAvailableForPostingExist	
			restricted
			when (PortalReceivablePaymentRemittanceWithApplicationsAvailableForPostingRel !exists)

		NoUnappliedReceivablePaymentRemittanceAcrossCompaniesRelExists	
			when (UnappliedReceivablePaymentRemittanceAcrossCompaniesRel !exists)

		ProjectContractInvoiceEntered
			restricted
			when (ReceivableInvoiceRel.ProjectContractInvoiceEntered)

		ReceivableCrossReferenceEntered	
			restricted
			when (ReceivableCrossReference.Company entered)

		ReceivableFilterMatch
			restricted
			when ((ReceivableFilterRel.ReceivableProcessLevel not entered						
            or     ReceivableFilterRel.ReceivableProcessLevel = ReceivableProcessLevel)
            and   (ReceivableFilterRel.Currency not entered
            or     ReceivableFilterRel.Currency = OriginalCurrency)
            and   (ReceivableFilterRel.ProjectRange not entered
            or     Project within ReceivableFilterRel.ProjectRange)
            and   (ReceivableFilterRel.DueDateRange not entered
            or     DueDate within ReceivableFilterRel.DueDateRange)
            and   (ReceivableFilterRel.TransactionAmountRange not entered
            or     InvoiceAmount.CurrencyAmount within ReceivableFilterRel.TransactionAmountRange)
            and   (ReceivableFilterRel.OpenAmountRange not entered
            or     OpenAmount within ReceivableFilterRel.OpenAmountRange)
            and   (ReceivableFilterRel.TransactionDateRange not entered
            or     TransactionDate within ReceivableFilterRel.TransactionDateRange)
            and   (ReceivableFilterRel.XrefNbrRange not entered
            or     ReceivableCrossReference.ReceivableInvoice within ReceivableFilterRel.XrefNbrRange)
            and   (ReceivableFilterRel.TransUser1Range not entered
            or     TransactionUserField1 within ReceivableFilterRel.TransUser1Range)
            and   (ReceivableFilterRel.CustomerPurchaseOrderRange not entered
            or     CustomerPurchaseOrder within ReceivableFilterRel.CustomerPurchaseOrderRange)
            and   ((ReceivableFilterRel.HistoryFlag not entered
            and  Status = 1)    
            or   (ReceivableFilterRel.HistoryFlag.IncludeHistory)    
            or   (ReceivableFilterRel.HistoryFlag.OnlyShowHistory
            and  Status > 6)    
            or   (ReceivableFilterRel.HistoryFlag.NoHistory
            and  Status = 1)))  

		SelectForApplicationNoOperator
			restricted
			when (AllowSelectForApplication
			and   !CashApplicationOperatorRequired)

		SelectForApplicationOperator
			restricted
			when (AllowSelectForApplication
			and   CashApplicationOperatorRequired)

		SummarizeDetailInvoiceHasApplicationSelect
			restricted
			when (SummarizeDetail
			and   ReceivableInvoiceRel.ReceivableApplicationSelectForThisInvoiceRel exists)

		SummarizedDetailInvoiceHasPaymentApplication
			restricted
			when (SummarizeDetail
			and	  ReceivableInvoiceRel.ReceivableApplicationPaymentsRel exists)

		SummarizeDetailInvoiceHasCreditApplicationInvoice
			when (SummarizeDetail
			and ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
			and ReceivableCreditApplicationInvoiceRel exists)

		UnappliedReceivablePaymentRemittanceRelExists
			when (UnappliedReceivablePaymentRemittanceRel exists)

		UnappliedReceivablePaymentRemittanceDetailsExists		
			restricted
			when (UnappliedReceivablePaymentRemittanceDetailRel exists
			and   DerivedPortalNetAmountAfterDiscount - DerivedUnappliedReceivablePaymentRemittanceDetailAppldAmt != 0)	

		UnappliedReceivablePaymentRemittanceAcrossCompaniesRelExists	
			when (UnappliedReceivablePaymentRemittanceAcrossCompaniesRel exists)

		UnappliedReceivablePaymentRemittanceRelIncludingAcrossCompaniesExist	
			when (UnappliedReceivablePaymentRemittanceRelExists
			or UnappliedReceivablePaymentRemittanceAcrossCompaniesRelExists)

		ValidForQuickWriteOff
			restricted
			when (!IsOverApplied
			and   Status.OpenTransaction)

		ValidForUnselect
			when (HasReceivableApplicationSelect
			or (HasApplicationSelect
			and SummarizeDetail))

		WithinBatchNumberRange
			restricted
			when (BatchNumberRange not entered
			or   (BatchNumberRange entered
			and   BatchNumber within BatchNumberRange))

		WithinCompanyRange
			restricted
			when (CompanyRange not entered
			or	Company within CompanyRange)

		WithinCreditMemoRangeAndXrefNbrRange	
			restricted
			when ((CreditMemoRange not entered
			or	 ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice within CreditMemoRange)
			and   (XrefNbrRange not entered
			or	 ReceivableCrossReference.ReceivableInvoice within XrefNbrRange))

		WithinCurrencyRange
			restricted
			when (CurrencyRange not entered
			or	OriginalCurrency within CurrencyRange)

		WithinCustomerPurchaseOrderRange
			restricted
			when (CustomerPurchaseOrderRange not entered
			or   CustomerPurchaseOrder within CustomerPurchaseOrderRange)

		WithinCustomerRange
			restricted
			when (CustomerRange not entered
			or	Customer within CustomerRange)

		WithinDateRanges
			restricted
			when ((TransactionDateRange not entered
			or	 TransactionDate within TransactionDateRange)
			and   (DiscountDateRange not entered
			or	DiscountDate.DiscDate[1] within DiscountDateRange
			or	DiscountDate.DiscDate[2] within DiscountDateRange
			or	DiscountDate.DiscDate[3] within DiscountDateRange)
			and   (DueDateRange not entered
			or	 DueDate within DueDateRange))

		WithinDiscountDateRange
			restricted
			when (DiscountDateRange not entered
			or	DiscountDate.DiscDate[1] within DiscountDateRange
			or	DiscountDate.DiscDate[2] within DiscountDateRange
			or	DiscountDate.DiscDate[3] within DiscountDateRange)

		WithinDueDateRange
			restricted
			when (DueDateRange not entered
			or   (DueDateRange entered
			and   DueDate within DueDateRange))

		WithinInvoiceAndXrefNbrRange
			restricted
			when ((ReceivableInvoiceRange not entered
			or	 ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice within ReceivableInvoiceRange)
			and   (XrefNbrRange not entered
			or	 ReceivableCrossReference.ReceivableInvoice within XrefNbrRange))

		WithinInvoiceNumberRange
			restricted
			when (ReceivableInvoiceRange not entered
			or   (ReceivableInvoiceRange entered
			and   ReceivableInvoiceDetail.Invoice within ReceivableInvoiceRange))

		WithinInvoiceRange
			restricted
			when (ReceivableInvoiceRange not entered
			or	ReceivableInvoiceDetail.ReceivableInvoiceDetail.Invoice within ReceivableInvoiceRange)

		WithinObligationGroupingFilter
			restricted
			when ((TransactionDateRange not entered
			or	(TransactionDateRange entered
			and	TransactionDate within TransactionDateRange))
			and   (DueDateRange not entered
			or	(DueDateRange entered
			and	DueDate within DueDateRange))
			and   (OpenAmountRange not entered
			or	 DerivedOpenAmount within OpenAmountRange)
			and   (CurrencyRange not entered
			or	 OriginalCurrency within CurrencyRange)
			and   MatchesSelectedForGroupingFilterCriteria)

		WithinOpenAmountRange
			restricted
			when (OpenAmountRange not entered
			or   DerivedOpenAmount within OpenAmountRange)

		WithinProcessLevelRange
			restricted
			when (ReceivableProcessLevelRange not entered
			or	ReceivableProcessLevel within ReceivableProcessLevelRange)

		WithinProjectRange
			restricted
			when (ProjectRange not entered
			or	Project within ProjectRange)

		WithinSalesRepresentativeRange
			restricted
			when (SalesRepresentativeRange not entered
			or   (SalesRepresentativeRange entered
			and   SalesRepresentative within SalesRepresentativeRange))

		WithinTermsCodeRange
			restricted
			when (TermsCodeRange not entered
			or   (TermsCodeRange entered
			and   TermsCode within TermsCodeRange))

		WithinTransactionAmountRange
			restricted
			when (TransactionAmountRange not entered
			or   (TransactionAmountRange entered
			and   InvoiceAmount.CurrencyAmount within TransactionAmountRange))

		WithinTransactionDateRange
			restricted
			when (TransactionDateRange not entered
			or   (TransactionDateRange entered
			and   TransactionDate within TransactionDateRange))

		WithinTransUser1Range
			restricted
			when (TransUser1Range not entered
			or	TransactionUserField1 within TransUser1Range)

		WithinXrefNbrRange
			restricted
			when (XrefNbrRange not entered
			or	ReceivableCrossReference.ReceivableInvoice within XrefNbrRange)

		WriteoffReasonIsOverShortOrTaxWithholding	
			restricted	
			when (WriteoffReason.ReceivableReason.ReceivableAdjustmentReasonType.OverShort
			or WriteoffReason.ReceivableReason.ReceivableAdjustmentReasonType.TaxWithholding)

		WriteoffReasonIsTaxWithholding	
			restricted	
			when (WriteoffReason.ReceivableReason.ReceivableAdjustmentReasonType.TaxWithholding)

		IsBillingInvoice
			restricted
			when (ReceivableInvoiceRel.System = "BL")

		IsCustomerOrderExists
			restricted
			when (CustomerOrderRel exists
			and IsBillingInvoice)

		IsBillingBaseAndInvoiceCurrencyNotSame
			restricted
			when (!BillingInvoiceRel.IsBaseAndInvoiceCurrencySame
			and IsBillingInvoice)

		IsBillingInvoiceLineExist
			restricted
			when (BillingInvoiceLineRel exists
			and IsBillingInvoice)

		IsBillingInvoiceAddOnChargesExist
			restricted
			when (BillingInvoiceAddOnChargesRel exists
			and IsBillingInvoice)

		IsBillingInvoiceTaxExist
			restricted
			when (BillingInvoiceRel.TaxExemptCode.Taxable
			and IsBillingInvoice)

		IsReceivableInvoiceExist
			restricted
			when (ReceivableInvoiceRel exists
			and IsBillingInvoice)

		IsBillingGLDistributionExist
			restricted
			when (BillingGLDistributionRel exists
			and IsBillingInvoice)

		ShowPortalDiscountDateAlert		
			restricted
			when (DerivedPortalDiscountPercent not entered
			and	  DerivedPortalDiscountDate entered)

		ShowPortalDiscountDateYellowAlert		
			restricted
			when (DerivedPortalDiscountPercent not entered
			and	  DerivedPortalDiscountDate entered)

		ShowPortalPartialPaymentBlueAlert		
			restricted
			when ((OpenAmount != 0
			and	UnappliedReceivablePaymentRemittanceDetailsExists)	
			or	  ApplicationAmount.CurrencyAmount entered)

		ShowPortalNetAmountAlert		
			restricted
			when (TransientSelectSignedOpenAmount != DerivedPortalSignedOpenAmount 
			and	  DerivedPortalDiscountPercent not entered)









		IsAttachmentAlertRequired
			restricted
			when (IsValidForAddAttachment
			and ReceivableApplicationAdjustmentSelectRel.Attachment not entered)

		IsValidForAddAttachment
			restricted
			when (ReceivableApplicationAdjustmentSelectRel exists
			and ReceivableApplicationAdjustmentSelectRel.AdjustmentReason.AttachmentRequired)

	Field Rules

		GeneralLedgerDate
			if (action type.Create				
			or  GeneralLedgerDate changed)		
				if ((CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange) and !BypassGLDateEdit)
					constraint (GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
						"PostDate<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

		SelectedAdjustedAmount
			if (ReceivableApplicationSelectRel.NumberOfAdjustments > 1)
				cannot be changed
					"MultipleAdjustmentsExist;UseDetailScreenToChange"

			if ((old SelectedAdjustedAmount entered and SelectedAdjustedAmount changed)
			and  SummarizeDetail)
				cannot be changed
					"InvoiceHasSummarizeDetailForDisplay;MustUnselectandSelect"

		SelectedAdjustmentReason
			if (ReceivableApplicationSelectRel.NumberOfAdjustments > 1)
				cannot be changed
					"MultipleAdjustmentsExist;UseDetailScreenToChange"

			if ((old SelectedAdjustmentReason entered and SelectedAdjustmentReason changed)
			and  SummarizeDetail)
				cannot be changed
					"InvoiceHasSummarizeDetailForDisplay;MustUnselectandSelect"
			constraint (SelectedAdjustmentReason != "CURR")
				"CURRIsAReserved_\Reason_\Code."

			constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.Grouping)
				"CannotUse_\Grouping_\Reason_\Code."
			constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
				"CannotUse_\Payment_\Transfer_\Reason_\Code."
			if (!Company.OverApplyInvoice)
				constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
					"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."

			if (ReceivablePayment.IsZeroPaymentAllowAdjustments
			and ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
				if (SelectedAdjustmentReason entered)
					constraint (SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
						"AdjustmentReasonCodeMustBeOverShortTypeForZeroPaymentAdjustments"
				else
				if (SelectedAdjustedAmount entered)
					constraint (SelectedAdjustmentReason entered)
						"AdjustmentReasonRequiredIfAdjustmentAmountEntered"
			else
			if (ReceivablePayment.IsZeroPaymentAllowAdjustments
			and !ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
				constraint (ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					"Invoice_\Company<ReceivableInvoiceRel.Company>DoesNotAllowZeroPaymentAdjustments"




		LineSelectedAdjustmentReason
			constraint (LineSelectedAdjustmentReason != "CURR")
				"CURRIsAReserved_\Reason_\Code."

			constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.Grouping)
				"CannotUse_\Grouping_\Reason_\Code."
			constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
				"CannotUse_\Payment_\Transfer_\Reason_\Code."
			if (!Company.OverApplyInvoice)
				constraint (!LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
					"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."



			if (ReceivablePayment.IsZeroPaymentAllowAdjustments
			and ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
				if (LineSelectedAdjustmentReason entered)
					constraint (LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
						"AdjustmentReasonCodeMustBeOverShortTypeForZeroPaymentAdjustments"
				else
				if (LineSelectedAdjustedAmount entered)
					constraint (LineSelectedAdjustmentReason entered)
						"AdjustmentReasonRequiredIfAdjustmentAmountEntered"
			else
			if (ReceivablePayment.IsZeroPaymentAllowAdjustments
			and !ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
				constraint (ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					"Invoice_\Company<ReceivableInvoiceRel.Company>DoesNotAllowZeroPaymentAdjustments"


		AmountToAdjustReason
			constraint (AmountToAdjustReason != "CURR")
				"CURRIsAReserved_\Reason_\Code."
			constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.Grouping)
				"CannotUse_\Grouping_\Reason_\Code."
			constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
				"CannotUse_\Payment_\Transfer_\Reason_\Code."
			if (!Company.OverApplyInvoice)
				constraint (!AmountToAdjustReason.ReceivableAdjustmentReasonType.OverApplied)
					"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."



		WriteoffAccount	
			BypassProjectDateEdit = true	

		WriteoffAmount	
			BypassProjectDateEdit = true	

		WriteoffReason
			BypassProjectDateEdit = true	
			constraint (WriteoffReason != "CURR")
				"CURRIsAReserved_\Reason_\Code."
			constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.Grouping)
				"CannotUse_\Grouping_\Reason_\Code."
			constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.PaymentTransfer)
				"CannotUse_\Payment_\Transfer_\Reason_\Code."
			constraint (!WriteoffReason.ReceivableAdjustmentReasonType.OverApplied)
					"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."



		WriteoffARIncomeWithholdingCode	
			if (WriteoffReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				required	
					"AR_\Income_\Withholding_\CodeIsRequiredWith_\Adjustment_\Reason<WriteoffReason>,SinceItIsDefinedAs_\Tax_\Withholding"	
			constraint (WriteoffReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				"AR_\Income_\Withholding_\CodeCanNotBePopulatedWith_\Adjustment_\Reason<WriteoffReason>,SinceItIsNotDefinedAs_\Tax_\Withholding"	

		WriteoffARIncomeWithholdingDocumentNumber	
			if (WriteoffReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				required	
					"AR_\Income_\Withholding_\Document_\NumberIsRequiredWith_\Adjustment_\Reason<WriteoffReason>,SinceItIsDefinedAs_\Tax_\Withholding"	
			constraint (WriteoffReason.ReceivableAdjustmentReasonType.TaxWithholding)	
				"AR_\Income_\Withholding_\Document_\NumberCanNotBePopulatedWith_\Adjustment_\Reason<WriteoffReason>,SinceItIsNotDefinedAs_\Tax_\Withholding"	


		InvoiceAmount
			InvoiceAmount.ExchangeDate								= TransactionDate
			InvoiceAmount.FunctionalAmount.ToCurrency 				= ReceivableInvoiceRel.Company.Currency
			InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			InvoiceAmount.AlternateAmount.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
			InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
			InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
			InvoiceAmount.ReportAmount1.EnteredCurrencyRate			= ReceivableInvoiceRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			InvoiceAmount.ReportAmount2.EnteredCurrencyRate			= ReceivableInvoiceRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
			InvoiceAmount.ReportAmount3.EnteredCurrencyRate			= ReceivableInvoiceRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
			InvoiceAmount.ReportAmount4.EnteredCurrencyRate			= ReceivableInvoiceRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
			InvoiceAmount.ReportAmount5.EnteredCurrencyRate			= ReceivableInvoiceRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate


			if  ((action type.Update
			and  (!InvoiceAmount.FunctionalAmount.EnteredCurrencyRate changed
			or	  !InvoiceAmount.AlternateAmount.EnteredCurrencyRate changed
			or	  !InvoiceAmount.AlternateAmount2.EnteredCurrencyRate changed
			or	  !InvoiceAmount.AlternateAmount3.EnteredCurrencyRate changed
			or	  !InvoiceAmount.ReportAmount1.EnteredCurrencyRate changed
			or	  !InvoiceAmount.ReportAmount2.EnteredCurrencyRate changed
			or	  !InvoiceAmount.ReportAmount3.EnteredCurrencyRate changed
			or	  !InvoiceAmount.ReportAmount4.EnteredCurrencyRate changed
			or	  !InvoiceAmount.ReportAmount5.EnteredCurrencyRate changed))
			or   (action type.Create
			and  (InvoiceAmount.FunctionalAmount.EnteredCurrencyRate entered
			or	  InvoiceAmount.AlternateAmount.EnteredCurrencyRate entered
			or	  InvoiceAmount.AlternateAmount2.EnteredCurrencyRate entered
			or	  InvoiceAmount.AlternateAmount3.EnteredCurrencyRate entered
			or	  InvoiceAmount.ReportAmount1.EnteredCurrencyRate entered
			or	  InvoiceAmount.ReportAmount2.EnteredCurrencyRate entered
			or	  InvoiceAmount.ReportAmount3.EnteredCurrencyRate entered
			or	  InvoiceAmount.ReportAmount4.EnteredCurrencyRate entered
			or	  InvoiceAmount.ReportAmount5.EnteredCurrencyRate entered)))
				InvoiceAmount.KeepRateOnly = true

			if	(any ReceivableInvoiceDetailRel.Project entered
			and  Status > 0
			and InvoiceAmount.CurrencyAmount changed)
				cannot be changed
			if (!Origin.Projects)
				if  (!ReceivableInvoiceRel.FromInterface)
					required

		ApplicationAmount

			ApplicationAmount.ExchangeDate 							= TransactionDate
			ApplicationAmount.FunctionalAmount.ToCurrency 			= ReceivableInvoiceRel.Company.Currency
			ApplicationAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			ApplicationAmount.AlternateAmount.EnteredCurrencyRate	= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
			ApplicationAmount.AlternateAmount2.EnteredCurrencyRate	= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
			ApplicationAmount.AlternateAmount3.EnteredCurrencyRate	= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
			ApplicationAmount.ReportAmount1.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			ApplicationAmount.ReportAmount2.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
			ApplicationAmount.ReportAmount3.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
			ApplicationAmount.ReportAmount4.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
			ApplicationAmount.ReportAmount5.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate

			if  ((action type.Update
			and  (!ApplicationAmount.FunctionalAmount.EnteredCurrencyRate changed
			or	  !ApplicationAmount.AlternateAmount.EnteredCurrencyRate changed
			or	  !ApplicationAmount.AlternateAmount2.EnteredCurrencyRate changed
			or	  !ApplicationAmount.AlternateAmount3.EnteredCurrencyRate changed
			or	  !ApplicationAmount.ReportAmount1.EnteredCurrencyRate changed
			or	  !ApplicationAmount.ReportAmount2.EnteredCurrencyRate changed
			or	  !ApplicationAmount.ReportAmount3.EnteredCurrencyRate changed
			or	  !ApplicationAmount.ReportAmount4.EnteredCurrencyRate changed
			or	  !ApplicationAmount.ReportAmount5.EnteredCurrencyRate changed))
			or   (action type.Create
			and  (ApplicationAmount.FunctionalAmount.EnteredCurrencyRate entered
			or	  ApplicationAmount.AlternateAmount.EnteredCurrencyRate entered
			or	  ApplicationAmount.AlternateAmount2.EnteredCurrencyRate entered
			or	  ApplicationAmount.AlternateAmount3.EnteredCurrencyRate entered
			or	  ApplicationAmount.ReportAmount1.EnteredCurrencyRate entered
			or	  ApplicationAmount.ReportAmount2.EnteredCurrencyRate entered
			or	  ApplicationAmount.ReportAmount3.EnteredCurrencyRate entered
			or	  ApplicationAmount.ReportAmount4.EnteredCurrencyRate entered
			or	  ApplicationAmount.ReportAmount5.EnteredCurrencyRate entered)))
				ApplicationAmount.KeepRateOnly = true

		AdjustmentAmount

			AdjustmentAmount.ExchangeDate 							= TransactionDate
			AdjustmentAmount.FunctionalAmount.ToCurrency 			= ReceivableInvoiceRel.Company.Currency
			AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			AdjustmentAmount.AlternateAmount.EnteredCurrencyRate	= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
			AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate	= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
			AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate	= ReceivableInvoiceRel.InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
			AdjustmentAmount.ReportAmount1.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			AdjustmentAmount.ReportAmount2.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount2.EnteredCurrencyRate
			AdjustmentAmount.ReportAmount3.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount3.EnteredCurrencyRate
			AdjustmentAmount.ReportAmount4.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount4.EnteredCurrencyRate
			AdjustmentAmount.ReportAmount5.EnteredCurrencyRate		= ReceivableInvoiceRel.InvoiceAmount.ReportAmount5.EnteredCurrencyRate

			if  ((action type.Update
			and  (!AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate changed
			or	  !AdjustmentAmount.AlternateAmount.EnteredCurrencyRate changed
			or	  !AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate changed
			or	  !AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate changed
			or	  !AdjustmentAmount.ReportAmount1.EnteredCurrencyRate changed
			or	  !AdjustmentAmount.ReportAmount2.EnteredCurrencyRate changed
			or	  !AdjustmentAmount.ReportAmount3.EnteredCurrencyRate changed
			or	  !AdjustmentAmount.ReportAmount4.EnteredCurrencyRate changed
			or	  !AdjustmentAmount.ReportAmount5.EnteredCurrencyRate changed))
			or   (action type.Create
			and  (AdjustmentAmount.FunctionalAmount.EnteredCurrencyRate entered
			or	  AdjustmentAmount.AlternateAmount.EnteredCurrencyRate entered
			or	  AdjustmentAmount.AlternateAmount2.EnteredCurrencyRate entered
			or	  AdjustmentAmount.AlternateAmount3.EnteredCurrencyRate entered
			or	  AdjustmentAmount.ReportAmount1.EnteredCurrencyRate entered
			or	  AdjustmentAmount.ReportAmount2.EnteredCurrencyRate entered
			or	  AdjustmentAmount.ReportAmount3.EnteredCurrencyRate entered
			or	  AdjustmentAmount.ReportAmount4.EnteredCurrencyRate entered
			or	  AdjustmentAmount.ReportAmount5.EnteredCurrencyRate entered)))
				AdjustmentAmount.KeepRateOnly = true

		DueDate
			if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
				default to current corporate date
			if (DueDate changed)
				constraint (Company.TransactionDueDateChangeAllowed)
					"CompanyDoesNotAllowDueDateChange"						
				constraint (!SummarizeDetail)
					"InvoiceHasSummarizeDetailForDisplay,CannotChangeDueDate"
				constraint (DueDate >= TransactionDate)
					"Due_\DateCannotBeLessThan_\Trans_\Date"				
				constraint (DueDate >= DiscountDate)
					"Due_\DateCannotBeLessThan_\Discount_\Date"				
			required

		ReceivableInvoiceDetail
			if (ReceivableInvoiceDetail changed)
				constraint (!HasReceivableInvoiceDisputes)
					"CannotMaintain_-DisputesExist"							

		Customer
			required

		TransientOperator
			if  (Status.OpenTransaction
			and (OnCreditMemoApplicationForm or ReceivablePayment entered))
				if (SelectedApplicationAmount entered
				or  SelectedAdjustedAmount entered
				or  SelectedAdjustmentReason entered)
					if (SelectedApplicationAmount entered)
						if (!ReceivableApplicationSelectRel exists)
							if (Company.CashOperatorRequired)
								constraint (TransientOperator entered)
									"OperatorIsRequired"
								constraint (TransientOperatorRel exists)
									"OperatorDoesNotExist"
								constraint (TransientOperatorRel.ActiveStatus.Active)
									"OperatorIsNotActive"

		ReceivableGeneralLedgerCode
			required
			default to ReceivableInvoiceRel.ReceivableGeneralLedgerCode

		BankTransactionCode
			required
			default to ReceivableInvoiceRel.BankTransactionCode

		SalesRepresentative
			default to ReceivableInvoiceRel.SalesRepresentative

		CurrencyMultiplicationOrDivision
			if (OriginalCurrency = Company.Currency)
				CurrencyMultiplicationOrDivision = "M"

		CustomerGroupCurrencyMultiplicationOrDivision
			if (Company.Currency = Customer.CustomerGroup.Currency)
				CustomerGroupCurrencyMultiplicationOrDivision = "M"
			else														
				LocalCurrencyRelationship.FromCurrency				= Company.Currency
				LocalCurrencyRelationship.ToCurrency				= Customer.CustomerGroup.Currency
				if (LocalCurrencyRelationship.MultDiv.Multiply)
					CustomerGroupCurrencyMultiplicationOrDivision 	= "M"
				else
					CustomerGroupCurrencyMultiplicationOrDivision 	= "D"

		CurrencyRateToCustomerGroupCurrency
			required
			CurrencyWork1.FromCurrency				= Company.Currency
			CurrencyWork1.BaseAmount.ToCurrency		= Company.CustomerGroupField.CustomerGroup.Currency
			CurrencyRateToCustomerGroupCurrency		= CurrencyWork1.BaseAmount.OutputCurrencyRate

		InvoiceTypeCode
			default to ReceivableInvoiceRel.InvoiceTypeCode

		RegimeCode
			default to ReceivableInvoiceRel.RegimeCode

		CurrencyDecimalsNumber
			default to OriginalCurrency.NumberOfDecimals

		InvoiceFinanceCodeBlock
			if (Company.DetailedInvoiceAccrualDistributions
			and ReceivableInvoiceRel.FromInterface
			and action type.Create)
				if (InvoiceFinanceCodeBlock not entered
				and ReceivableInvoiceRel.InvoiceFinanceCodeBlock entered)
					InvoiceFinanceCodeBlock = ReceivableInvoiceRel.InvoiceFinanceCodeBlock
				if (InvoiceFinanceCodeBlock entered)
					default to ReceivableGeneralLedgerCode.DistributionAccount
						default individual fields

		Actor
			initial value is actor
			default to actor

		PortalRequestedAppliedAmount
			initial value is DerivedPortalSignedOpenAmount 




		RevalueCurrencyTransactions
			default to ReceivableInvoiceRel.RevalueCurrencyTransactions

	Create Rules

	Relations




		ARToAPApplicationSelectRel
			classic name is ARAPSELECT
			one-to-one relation to ARToAPApplicationSelect
			Field Mapping uses Set2
				related.Company									 = Company
				related.ARToAPApplicationSelect.TransactionType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ARToAPApplicationSelect.Invoice			 = ReceivableInvoiceDetail.Invoice
				related.ARToAPApplicationSelect.PaymentSeq		 = ReceivableInvoiceDetail.PaymentSeq

		ARToAPApplicationSelectSumLineRel
			one-to-many relation to ARToAPApplicationSelect
			Field Mapping uses Set2
				related.Company									 = Company
				related.ARToAPApplicationSelect.TransactionType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ARToAPApplicationSelect.Invoice			 = ReceivableInvoiceDetail.Invoice




















		ARToAPInterfaceIsSelectedRel						
			one-to-one relation to ARToAPApplicationSelect
			Field Mapping uses symbolic key
				related.Company									 = Company
				related.ARToAPApplicationSelect.BatchNumber		 = ReceivableInvoiceRel.BatchNumber
				related.ARToAPApplicationSelect.TransactionType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ARToAPApplicationSelect.Invoice			 = ReceivableInvoiceDetail.Invoice
				related.ARToAPApplicationSelect.PaymentSeq		 = ReceivableInvoiceDetail.PaymentSeq







		BankTransactionCodeRel	
			one-to-one relation to BankTransactionCode
			Field Mapping uses symbolic key
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.BankTransactionCode		= BankTransactionCode



		BillingGLDistributionRel
			one-to-many relation to BillingGLDistribution
			Field Mapping uses symbolic key
				related.Company							= Company
				related.BillingInvoice.InvoicePrefix	= DerivedPrefix
				related.BillingInvoice.InvoiceNumber	= DerivedInvoiceNumber



		BillingInvoiceRel
			one-to-one relation to BillingInvoice
			Field Mapping uses Set4
				related.Company							= Company
				related.Customer 						= Customer
				related.BillingInvoice.InvoicePrefix	= DerivedPrefix
				related.BillingInvoice.InvoiceNumber	= DerivedInvoiceNumber




		BillingInvoiceAddOnChargesRel
			one-to-many relation to BillingInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company							= Company
				related.BillingInvoice.InvoicePrefix	= DerivedPrefix
				related.BillingInvoice.InvoiceNumber	= DerivedInvoiceNumber
				related.BillingInvoiceLine				= blank



		BillingInvoiceLineRel
			one-to-many relation to BillingInvoiceLine
			Field Mapping uses symbolic key
				related.Company							= Company
				related.BillingInvoice.InvoicePrefix	= DerivedPrefix
				related.BillingInvoice.InvoiceNumber	= DerivedInvoiceNumber







		CompanyCustomerRel
			classic name is ARCUSTOMER
			one-to-one relation to CompanyCustomer
			required
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer 	= Customer



		CompanyCustomerCommentRel
			classic name is ARCOMMENT
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses Set2
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.Transaction = ReceivableInvoiceDetail.Invoice)




		CompanySystemClosingControlRel	
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = Company




		CustomerRel
			classic name is CUSTDESC
			one-to-one relation to Customer
			required
			Field Mapping uses symbolic key
				related.CustomerGroup	 = Company.CustomerGroupField.CustomerGroup
				related.Customer		 = Customer


		CustomerGroupRel
			one-to-one relation to CustomerGroup
			required
			Field Mapping uses symbolic key
				related.CustomerGroup	 = Company.CustomerGroupField.CustomerGroup


		AllCustomerGroupRel
			one-to-many relation to CustomerGroup
			Field Mapping uses symbolic key



		CustomerOrderRel
			one-to-one relation to CustomerOrder
			Field Mapping uses symbolic key
				related.Company							= Company
				related.CustomerOrder					= ReceivableInvoiceRel.CustomerOrder




		CustomerRepresentativeContactWithPaymentInProgressRel	
			one-to-many relation to CustomerRepresentativeContact
			Field Mapping uses symbolic key
				related.CustomerGroup					 = Company.CustomerGroupField.CustomerGroup
				related.CustomerRepresentative			 = CustomerRepresentative	
				related.CustomerRepresentativeContact	 = CustomerRepresentativeContact
			Instance Selection
				where (related.PaymentInProgress)






		DunningHistoryRel
			classic name is ARDUNHIST
			one-to-many relation to DunningHistory
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.DunningHistory.DunningHistoryGroup.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and   related.DunningHistory.DunningHistoryGroup.Invoice						 = ReceivableInvoiceDetail.Invoice
				and   related.DunningHistory.DunningHistoryGroup.PaymentSeq						 = ReceivableInvoiceDetail.PaymentSeq)






		PreNoteElectronicFundsTransferRel
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivableInvoiceDetail		= ReceivableInvoiceDetail
			Instance Selection
				where (related.ElectronicFundsTransferTransaction.EftType.Prenote)


		FinalNoteElectronicFundsTransferRel
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivableInvoiceDetail		= ReceivableInvoiceDetail
			Instance Selection
				where (related.ElectronicFundsTransferTransaction.EftType.FinalNote)


		PaymentCreatedElectronicFundsTransferRel  
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivableInvoiceDetail		= ReceivableInvoiceDetail
			Instance Selection
				where (related.ElectronicFundsTransferTransaction.EftType.Extracted
				and    related.ElectronicFundsTransferTransaction.EftCreated = "Y")

		ReverseDeletionFundsTransferRel
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.ReceivableInvoiceDetail		 = ReceivableInvoiceDetail
			Instance Selection
				where (related.CustomerGroup		 = Company.CustomerGroupField.CustomerGroup
				and	related.ProcessingCompany		 = Company)










		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company



		GeneralLedgerCompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= LocalGeneralLedgerCompanyGroup
				related.Company						= Company

		CompanySecurityGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company







		IntercompanyBillingDocumentRel	
			one-to-one relation to IntercompanyBillingDocumentHeader
			Field Mapping uses ByReceivableInvoice
				related.IntercompanyBillingGroup			 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ReceivableEntity.Company			 = Company
				related.ReceivableEntity.ReceivableInvoice	 = ReceivableInvoiceDetail.Invoice






















		NationalAccountInvoiceRel
			one-to-many relation to NationalAccount
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company		 = Company
				related.NationalAccount.InvoiceAccountGroup.Customer	 = Customer




		NationalAccountTransactionRel
			one-to-one relation to NationalAccountTransaction
			Field Mapping uses ByNationalAccountTransaction
				related.NationalAccount.Company									= DerivedNationalCompany
				related.NationalAccount.Customer								= DerivedNationalCustomer
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceDetail.Invoice							= ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq						= ReceivableInvoiceDetail.PaymentSeq
				related.Company													= Company
				related.Customer												= Customer












		ParentNationalAccountTransactionRel
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2
				related.NationalAccount.Company		 = Company
				related.NationalAccount.Customer	 = Customer


		ChildNationalAccountTransactionRel
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses ByChildNationalAccountTransaction
				related.Company		 = Company
				related.Customer	 = Customer


		DebitTransactionsForNationalAccountRel
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses Set2	
				related.NationalAccount.Company		 = DerivedNationalCompany
				related.NationalAccount.Customer	 = DerivedNationalCustomer
			Instance Selection


				where   (!related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)









		PayablesCompanyRel
			one-to-one relation to PayablesCompany
			Field Mapping uses symbolic key
				related.Company		= Company




		ProformaInvoiceRel
			one-to-one relation to ProformaInvoice
			Field Mapping uses symbolic key
				related.Company			 = Company
				related.ProformaInvoice	 = ReceivableInvoiceRel.CustomerOrder





		ProjectContractRel	
			one-to-one relation to ProjectContract
			Field Mapping uses symbolic key	
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ProjectContract				= ProjectContract




		ProjectContractInvoiceRel	
			one-to-one relation to ProjectContractInvoice
			Field Mapping uses symbolic key	
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ProjectContract				= ProjectContract
				related.FinanceDimension2			= FinanceDimension2
				related.ProjectContractInvoice		= ReceivableInvoiceRel.ProjectContractInvoice








		ReceivableApplicationAdjustmentSelectRel
			classic name is ARSADJUST
			one-to-many relation to ReceivableApplicationAdjustmentSelect
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ReceivableApplicationAdjustmentSelect.Company	 = Company
				and   related.ReceivableApplicationAdjustmentSelect.TransType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and   related.ReceivableApplicationAdjustmentSelect.Invoice		 = ReceivableInvoiceDetail.Invoice
				and   related.ReceivableApplicationAdjustmentSelect.PaymentSeq	 = ReceivableInvoiceDetail.PaymentSeq
				and   related.ReceivableApplicationAdjustmentSelect.BatchNumber	 = BatchNumber)



		ReceivableApplicationSelectRel
			classic name is ARSAPPLIED
			one-to-one relation to ReceivableApplicationSelect
			Field Mapping uses Set2
				related.ReceivableApplicationSelect.TransactionCompany									 = Company
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq


		ReceivableApplicationSelectRecordsExistRel
			one-to-many relation to ReceivableApplicationSelect
			Field Mapping uses Set2
			Instance Selection
				where (related.ReceivableApplicationSelect.TransactionCompany									 = ReceivableInvoiceDetail.Company
				and	   related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	   related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice)






		ReceivableInvoiceRel
			classic name is AROIHDR
			one-to-one relation to ReceivableInvoice
			required
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = AlternateReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoiceDetail.Invoice



		ReceivableInvoiceApplyReverseDetailRel
			classic name is ARTRNRVDTL
			one-to-many relation to ReceivableInvoiceApplyReverseDetail
			delete restricted
			Field Mapping uses symbolic key
				related.Company	 = Company
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and   related.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice
				and   related.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq)






		ReceivableInvoiceBatchRel	
			one-to-one relation to ReceivableInvoiceBatch
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceBatch	 = BatchNumber


















		InvoiceDetailUserSortsRel
			one-to-many relation to ReceivableInvoiceDetailUserSort
			delete cascades
			Field Mapping uses Set14
				related.Company														 = Company
				related.ReceivableInvoiceDetailUserSort.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceDetailUserSort.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetailUserSort.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq


		InvoiceDetailUserSort1Rel
			one-to-many relation to ReceivableInvoiceDetailUserSort
			Field Mapping uses Set14
				related.Company														 = Company
				related.ReceivableInvoiceDetailUserSort.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceDetailUserSort.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetailUserSort.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableInvoiceDetailUserSort.IndexNbr					 = "1"


		InvoiceDetailUserSort2Rel
			one-to-many relation to ReceivableInvoiceDetailUserSort
			Field Mapping uses Set14
				related.Company														 = Company
				related.ReceivableInvoiceDetailUserSort.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceDetailUserSort.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetailUserSort.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableInvoiceDetailUserSort.IndexNbr					 = "2"


		InvoiceDetailUserSort3Rel
			one-to-many relation to ReceivableInvoiceDetailUserSort
			Field Mapping uses Set14
				related.Company														 = Company
				related.ReceivableInvoiceDetailUserSort.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceDetailUserSort.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetailUserSort.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableInvoiceDetailUserSort.IndexNbr					 = "3"


		InvoiceDetailUserSort4Rel
			one-to-many relation to ReceivableInvoiceDetailUserSort
			Field Mapping uses Set14
				related.Company														 = Company
				related.ReceivableInvoiceDetailUserSort.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceDetailUserSort.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetailUserSort.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableInvoiceDetailUserSort.IndexNbr					 = "4"




		ReceivableInvoiceDisputeRel
			classic name is ARDISPUTE
			one-to-many relation to ReceivableInvoiceDispute
			delete cascades
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and   related.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice
				and   related.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq)




		ReceivableInvoiceTransferRel
			classic name is ARITEMAUD
			one-to-one relation to ReceivableInvoiceTransfer
			Field Mapping uses symbolic key
				related.Company												 = Company
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq




		ReceivablePaymentApplyReverseDetailRel
			classic name is ARPMTRVDTL
			one-to-many relation to ReceivablePaymentApplyReverseDetail
			delete restricted
			Field Mapping uses Set2
				related.Company			 = Company
				related.TransactionType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.Invoice			 = ReceivableInvoiceDetail.Invoice
				related.PaymentSequence	 = ReceivableInvoiceDetail.PaymentSeq



		ReceivablePendingAdjustmentRel
			classic name is ARPENDADJ
			one-to-many relation to ReceivablePendingAdjustment
			delete cascades
			Field Mapping uses symbolic key
				related.Company	 = Company
			Instance Selection
				where (related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and   related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice
				and   related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq
				and   related.ReceivablePendingAdjustment.BatchNumber											 = BatchNumber)


		ReceivableInvoiceUserSortRel
			classic name is ARUSERSORT
			one-to-one relation to ReceivableInvoiceUserSort
			Field Mapping uses symbolic key
				related.Company									 = Company
				related.ReceivableInvoiceUserSort.TransType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceUserSort.Invoice		 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceUserSort.PaymentSeq	 = ReceivableInvoiceDetail.PaymentSeq


		ReceivableApplicationAdjustmentRel
			classic name is ARADJUST
			one-to-many relation to ReceivableApplicationAdjustment
			delete restricted
			Field Mapping uses symbolic key
				related.Company	 = Company
			Instance Selection
				where (related.ReceivableApplication.TransType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and   related.ReceivableApplication.Invoice		 = ReceivableInvoiceDetail.Invoice
				and   related.ReceivableApplication.PaymentSeq	 = ReceivableInvoiceDetail.PaymentSeq
				and   related.ReceivableApplication.BatchNumber	 = ReceivableInvoiceRel.BatchNumber)

		DiscountReceivableApplicationAdjustmentRel	
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses Set3	
				related.Company	 = Company
				related.ReceivableApplication.TransType				= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplication.Invoice				= ReceivableInvoiceDetail.Invoice
				related.ReceivableApplication.PaymentSeq			= ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableApplication.BatchNumber			= ReceivableInvoiceRel.BatchNumber
				related.ReceivableApplication.ApplicationSequence	<= 9999999

		ReceivableApplicationRel
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			delete restricted
			Field Mapping uses symbolic key
				related.Company 									= Company
				related.ReceivableApplication.TransType				= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplication.Invoice				= ReceivableInvoiceDetail.Invoice
				related.ReceivableApplication.PaymentSeq			= ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableApplication.BatchNumber			= ReceivableInvoiceRel.BatchNumber
				related.ReceivableApplication.ApplicationSequence	<= 9999999	







		ReceivableApplicationsRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company = Company
			Instance Selection
				where (related.CanBeReversed
				and		((related.ReceivableApplication.TransType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and		related.ReceivableApplication.Invoice		 = ReceivableInvoiceDetail.Invoice
				and		related.ReceivableApplication.PaymentSeq	 = ReceivableInvoiceDetail.PaymentSeq
				and		related.ReceivableApplication.BatchNumber	 = ReceivableInvoiceRel.BatchNumber)
				or		(related.CreditTransaction.CreditType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and		related.CreditTransaction.CreditNumber		 = ReceivableInvoiceDetail.Invoice
				and		related.CreditTransaction.CreditSequence	 = ReceivableInvoiceDetail.PaymentSeq
				and		related.CreditTransaction.CreditBatch		 = ReceivableInvoiceRel.BatchNumber)))

		DistributionSetNeedsReviewDebitApplications
			one-to-many relation to ReceivableApplication
			Field Mapping uses SequenceDescending
				related.Company 									= Company
				related.ReceivableApplication.TransType	 			= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplication.Invoice		 		= ReceivableInvoiceDetail.Invoice
				related.ReceivableApplication.PaymentSeq	 		= ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableApplication.BatchNumber	 		= ReceivableInvoiceRel.BatchNumber
			Instance Selection
				where (related.DistributionSetNeedsReview)

		FundApplyDistributionTransactionRel
			one-to-many relation to FundApplyDistribution
			Field Mapping uses ByReceivableGLDistribution
				related.Company									  = Company
				related.ReceivableApplication.TransType			  = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplication.Invoice				= ReceivableInvoiceDetail.Invoice
				related.ReceivableApplication.PaymentSeq			 = ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableApplication.BatchNumber			= ReceivableInvoiceRel.BatchNumber
			Instance Selection
				where (related.OriginalLastDistributionSequence	  = LocalLastDistributionSequence
				and	related.OriginalReceivableGLDistribution	  = LocalReceivableGLDistribution)

		LocalReceivableGLDistributionRel
			one-to-one relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany				 = Company
				related.BatchNumber													 = ReceivableInvoiceRel.BatchNumber
				related.TransType													 = ReceivableInvoiceRel.ReceivableInvoiceType
				related.Invoice														 = ReceivableInvoiceDetail.Invoice
				related.ReceivableCompanyDataGroup.Customer							 = ReceivableInvoiceRel.Customer
				related.LastDistributionSequence									 = LocalLastDistributionSequence
				related.ReceivableGLDistribution									 = LocalReceivableGLDistribution

		LocalFundApplyDistributionByOriginalDistributionRel
			one-to-many relation to FundApplyDistribution
			Field Mapping uses ByOriginalDistribution
				related.OriginalReceivableGLDistribution			= LocalReceivableGLDistribution
				related.OriginalLastDistributionSequence			= LocalLastDistributionSequence
			Instance Selection
				where (related.GeneralLedgerCompanyRel.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup)

		PostedApplicationsAvailableToInvoiceReverseRel
			one-to-many relation to ReceivableApplication
			delete restricted
			Field Mapping uses symbolic key
				related.Company	 = Company
			Instance Selection
				where (related.PostedCanBeReversed
				and   ((related.ReceivableApplication.TransType	 =	ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	 related.ReceivableApplication.Invoice		 =	ReceivableInvoiceDetail.Invoice
				and	 related.ReceivableApplication.PaymentSeq	 =	ReceivableInvoiceDetail.PaymentSeq
				and	 related.ReceivableApplication.BatchNumber	 =	ReceivableInvoiceRel.BatchNumber)
				or	 (related.CreditTransaction.CreditCompany	 =	Company
				and	 related.CreditTransaction.CreditCustomer	 =	Customer
				and	 related.CreditTransaction.CreditType		 =	ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	 related.CreditTransaction.CreditNumber		 =	ReceivableInvoiceDetail.Invoice
				and	 related.CreditTransaction.CreditSequence	 =	ReceivableInvoiceDetail.PaymentSeq
				and	!related.Writeoff)))


		UnpostedApplicationsAvailableToReverseRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses SequenceDescending
				related.Company								=	Company
				related.ReceivableApplication.TransType		=	ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplication.Invoice		=	ReceivableInvoiceDetail.Invoice
				related.ReceivableApplication.PaymentSeq	=	ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableApplication.BatchNumber	=	ReceivableInvoiceRel.BatchNumber
			Instance Selection
				where (related.UnpostedCanBeReversed)

		LocalDelUnpostedReceivablePaymentRemittanceRel
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses symbolic key
				related.Company									= LocalCreditCompany
				related.ReceivablePaymentHeader					= LocalCreditBatchNumber
				related.ReceivablePayment						= LocalCreditSequence


		ReceivablePaymentRemittanceContextRel
			one-to-one relation to ReceivablePaymentRemittance
			Field Mapping uses symbolic key
				related.Company									= ContextReceivableCompanyForContext
				related.ReceivablePaymentHeader					= ContextReceivableBatchForContext
				related.ReceivablePayment						= ContextReceivableInvoiceForContext
				related.ReceivablePaymentRemittance				= ContextReceivableApplicationSequenceForContext

		ReceivablePaymentRemittanceDetailContextRel
			one-to-many relation to ReceivablePaymentRemittance		
			Field Mapping uses ByInvoice
				related.InvoiceCompany							= Company
				related.ReceivableInvoiceType					= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoice						= ReceivableInvoiceDetail.Invoice
				related.InvoiceDetail							= ReceivableInvoiceDetail.PaymentSeq
				related.Company									= ContextReceivableCompanyForContext
				related.ReceivablePaymentHeader					= ContextReceivableBatchForContext
				related.ReceivablePayment						= ContextReceivableInvoiceForContext

		ReceivablePaymentRemittanceUnappliedForThisInvoiceDetailRel
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses ByInvoice
				related.InvoiceCompany							= Company
				related.ReceivableInvoiceType					= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoice						= ReceivableInvoiceDetail.Invoice
				related.InvoiceDetail							= ReceivableInvoiceDetail.PaymentSeq
			Instance Selection
				where (related.Status.Unapplied
				or	   related.Status.ApplicationNotPerfomed)

		ReceivablePaymentRemittanceHeaderContextRel
			one-to-many relation to ReceivablePaymentRemittance		
			Field Mapping uses ByInvoice
				related.InvoiceCompany							= Company
				related.ReceivableInvoiceType					= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoice						= ReceivableInvoiceDetail.Invoice
				related.InvoiceDetail							= blank
				related.Company									= ContextReceivableCompanyForContext
				related.ReceivablePaymentHeader					= ContextReceivableBatchForContext
				related.ReceivablePayment						= ContextReceivableInvoiceForContext

		ContextSettlementDetailRel
			one-to-one relation to IntercompanyBillingSettlementDetail
			Field Mapping uses ByBillingDocument
				related.IntercompanyBillingGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.IntercompanyBillingDocumentHeader					= ContextDocumentHeaderForContext
				related.IntercompanyBillingSettlementHeader.SettlementID	= ContextSettlementIDForContext

		ContextSettlementDetailLineRel
			one-to-one relation to IntercompanyBillingSettlementDetailLine
			Field Mapping uses ByReceivableInvoiceLine
				related.IntercompanyBillingGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.IntercompanyBillingSettlementHeader.SettlementID	= ContextSettlementIDForContext
				related.IntercompanyBillingDocumentHeader					= ContextDocumentHeaderForContext
				related.InvoiceLine											= ReceivableInvoiceDetail.PaymentSeq



		UnappliedReceivablePaymentRemittanceRel
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses Set4	
				related.Company								=	Company
				related.ReceivableInvoiceType				=	ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoice					=	ReceivableInvoiceDetail.Invoice

		UnappliedReceivablePaymentRemittanceDetailRel	
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses Set4	
				related.Company								=	actor.context.CustomerGroup.DerivedThirdPartyPaymentProcessingCompany
				related.ReceivableInvoiceType				=	ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoice					=	ReceivableInvoiceDetail.Invoice
			Instance Selection
				where ((related.Company.ApplyCashAcrossReceivableCompanies
				and	   related.InvoiceCompany 				=	Company)
				and	   related.InvoiceDetail				=	ReceivableInvoiceDetail.PaymentSeq)

		UnappliedReceivablePaymentRemittanceAcrossCompaniesRel
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses Set4	
				related.Company								=	DerivedThirdPartyPaymentProcessingCompany
			Instance Selection
				where (related.InvoiceCompany				=	Company
				and	   related.ReceivableInvoiceType		=	ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	   related.ReceivableInvoice			=	ReceivableInvoiceDetail.Invoice
				and	   related.InvoiceDetail				=	ReceivableInvoiceDetail.PaymentSeq
				and	   related.Company.ApplyCashAcrossReceivableCompanies)

		PortalReceivablePaymentRemittanceWithApplicationsAvailableForPostingRel	
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses ByInvoice
				related.InvoiceCompany							= Company
				related.ReceivableInvoiceType					= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoice						= ReceivableInvoiceDetail.Invoice
				related.InvoiceDetail							= ReceivableInvoiceDetail.PaymentSeq
			Instance Selection
				where (related.ReceivableApplicationsAvailableForPostingExist)	





		ReceivableCreditApplicationRel
			classic name is CRAPPLIED
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set3
				related.CreditTransaction.CreditCompany		 = Company
				related.CreditTransaction.CreditCustomer	 = Customer
				related.CreditTransaction.CreditType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.CreditTransaction.CreditNumber		 = ReceivableInvoiceDetail.Invoice
				related.CreditTransaction.CreditSequence	 = ReceivableInvoiceDetail.PaymentSeq
				related.CreditTransaction.CreditBatch		 = ReceivableInvoiceRel.BatchNumber

		DistributionSetNeedsReviewCreditApplications
			one-to-many relation using ReceivableCreditApplicationRel
			Instance Selection
				where (related.DistributionSetNeedsReview)

		UnpostedCreditApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set3
				related.CreditTransaction.CreditCompany		 = Company
				related.CreditTransaction.CreditCustomer	 = Customer
				related.CreditTransaction.CreditType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.CreditTransaction.CreditNumber		 = ReceivableInvoiceDetail.Invoice
				related.CreditTransaction.CreditSequence	 = ReceivableInvoiceDetail.PaymentSeq
				related.CreditTransaction.CreditBatch		 = ReceivableInvoiceRel.BatchNumber
			Instance Selection
				where (!related.Status.ApplicationPosted)


		ReceivableCreditApplicationInvoiceRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set3
				related.CreditTransaction.CreditCompany		 = Company
				related.CreditTransaction.CreditCustomer	 = Customer
				related.CreditTransaction.CreditType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.CreditTransaction.CreditNumber		 = ReceivableInvoiceDetail.Invoice

		ReceivableApplicationInvoiceRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company 									= Company
			Instance Selection
				where (related.ReceivableApplication.TransType		= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	   related.ReceivableApplication.Invoice		= ReceivableInvoiceDetail.Invoice
				and	   related.ReceivableApplication.BatchNumber	= ReceivableInvoiceRel.BatchNumber)


		TransactionDetailAgePeriodRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set5
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.AgePeriod = AgePeriod)


		ReceivableInvoiceDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company							 = Company
				related.AlternateReceivableInvoiceType	 = AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice	 = ReceivableInvoiceDetail.Invoice


		ReceivableInvoiceDetailNoDisputeRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company							 = Company
				related.AlternateReceivableInvoiceType	 = AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice	 = ReceivableInvoiceDetail.Invoice
			Instance Selection
				where (related.Status.OpenTransaction
				and	!related.IsUnresolvedDispute)

		ReceivableInvoiceDetailPartiallyAppliedForThisInvoiceRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company							 = Company
				related.AlternateReceivableInvoiceType	 = AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice	 = ReceivableInvoiceDetail.Invoice
			Instance Selection
				where (!related.IsOpenNotApplied)

		ReceivableInvoiceObligationRel									
			one-to-many relation to ReceivableInvoiceObligation
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = AlternateReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoiceDetail.Invoice


		UnpostedApplicationsRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company = Company
			Instance Selection
				where (related.ReceivableApplication.TransType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and   related.ReceivableApplication.Invoice		 = ReceivableInvoiceDetail.Invoice
				and   related.ReceivableApplication.PaymentSeq	 = ReceivableInvoiceDetail.PaymentSeq
				and   related.ReceivableApplication.BatchNumber	 = ReceivableInvoiceRel.BatchNumber
				and   !related.Status.ApplicationPosted)


		ReceivableApplicationSet4Rel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set4
				related.Company	 = Company
			Instance Selection
				where (related.ReceivableApplication.TransType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	related.ReceivableApplication.Invoice		 = ReceivableInvoiceDetail.Invoice
				and	related.ReceivableApplication.PaymentSeq	 = ReceivableInvoiceDetail.PaymentSeq)



		ReceivablePendingAdjustment2Rel
			one-to-many relation to ReceivablePendingAdjustment
			delete restricted
			Field Mapping uses symbolic key
				related.Company = Company
			Instance Selection
				where (related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and   related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice
				and   related.ReceivablePendingAdjustment.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq)


		LowerOpenSequenceRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								 = Company
				related.AlternateReceivableInvoiceType		 = AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq	 < ReceivableInvoiceDetail.PaymentSeq
			Instance Selection
				where (related.Status.OpenTransaction
				and	 ((IsCreditMemo
				and    related.IsCreditMemo)
				or   (!IsCreditMemo
				and   !related.IsCreditMemo)))

		LowerSequenceRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								 = Company
				related.AlternateReceivableInvoiceType		 = AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq	 < ReceivableInvoiceDetail.PaymentSeq
			Instance Selection
				where ((IsCreditMemo
				and     related.IsCreditMemo)
				or     (!IsCreditMemo
				and     !related.IsCreditMemo))

		SameInvoiceRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								 = Company
				related.AlternateReceivableInvoiceType		 = AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		 = ReceivableInvoiceDetail.Invoice
			Instance Selection
				where ((IsCreditMemo
				and     related.IsCreditMemo)
				or     (!IsCreditMemo
				and     !related.IsCreditMemo))


		SameInvoiceWithPaymentSeqRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								 = Company
				related.AlternateReceivableInvoiceType		 = AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq   = ReceivableInvoiceDetail.PaymentSeq
			Instance Selection
				where ((IsCreditMemo
				and     related.IsCreditMemo)
				or     (!IsCreditMemo
				and     !related.IsCreditMemo))


		SameInvoiceOpenRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								 = Company
				related.AlternateReceivableInvoiceType		 = AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		 = ReceivableInvoiceDetail.Invoice
			Instance Selection
				where (related.Sign							 = Sign 
				and	   related.OpenAmount					 > 0)








		LocalSequenceInvoiceDetailRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								 = Company
				related.AlternateReceivableInvoiceType		 = AlternateReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq	 = LocalSequence


		ReceivableICBCreditInvoiceDetailRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company													= LocalICBCreditCompany
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		= "C"
				related.ReceivableInvoiceDetail.Invoice							= LocalICBCreditNumber
				related.ReceivableInvoiceDetail.PaymentSeq						= LocalICBCreditSequence


		SameInvoiceByCustomerProjectRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set7
				related.Company									 = Company
			Instance Selection
				where (related.AlternateReceivableInvoiceType	 = AlternateReceivableInvoiceType
				and	   related.ReceivableInvoiceDetail.Invoice	 = ReceivableInvoiceDetail.Invoice
				and	 ((IsCreditMemo
				and    related.IsCreditMemo)
				or   (!IsCreditMemo
				and   !related.IsCreditMemo)))


		SameInvoicePaymentSeqByCustomerProjectRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set7
				related.Company									 	= Company
			Instance Selection
				where (related.AlternateReceivableInvoiceType	 	= AlternateReceivableInvoiceType
				and	   related.ReceivableInvoiceDetail.Invoice	 	= ReceivableInvoiceDetail.Invoice
				and    related.ReceivableInvoiceDetail.PaymentSeq 	= ReceivableInvoiceDetail.PaymentSeq
				and	 ((IsCreditMemo
				and    related.IsCreditMemo)
				or   (!IsCreditMemo
				and   !related.IsCreditMemo)))



		MixedSignPriorApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses SequenceDescending
				related.Company								 = Company
				related.ReceivableApplication.TransType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplication.Invoice		 = ReceivableInvoiceDetail.Invoice
				related.ReceivableApplication.PaymentSeq	 = ReceivableInvoiceDetail.PaymentSeq
			Instance Selection
				where (!related.ApplicationSource.MixedSignedApplication)


		MixedSignCreditMemoPriorApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set3
				related.CreditTransaction.CreditCompany			 = Company
				related.CreditTransaction.CreditCustomer		 = Customer
				related.CreditTransaction.CreditType			 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.CreditTransaction.CreditNumber			 = ReceivableInvoiceDetail.Invoice
				related.CreditTransaction.CreditSequence		 = ReceivableInvoiceDetail.PaymentSeq
			Instance Selection
				where (!related.ApplicationSource.MixedSignedApplication)


		MixedSignPriorApplicationSumLineRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses SequenceDescending
				related.Company								 = Company
				related.ReceivableApplication.TransType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplication.Invoice		 = ReceivableInvoiceDetail.Invoice
			Instance Selection
				where (!related.ApplicationSource.MixedSignedApplication)


		MixedSignCreditMemoPriorApplicationSumLineRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set3
				related.CreditTransaction.CreditCompany			 = Company
				related.CreditTransaction.CreditCustomer		 = Customer
				related.CreditTransaction.CreditType			 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.CreditTransaction.CreditNumber			 = ReceivableInvoiceDetail.Invoice
			Instance Selection
				where (!related.ApplicationSource.MixedSignedApplication)


		ReceivableApplicationSelectPaymentRel
			classic name is ARSAPPLIED
			one-to-one relation to ReceivableApplicationSelect
			Field Mapping uses symbolic key
				related.Company																			 = ReceivablePayment.Company
				related.ReceivablePaymentHeader															 = ReceivablePaymentHeader
				related.ReceivablePayment																 = ReceivablePayment
				related.ReceivableApplicationSelect.TransactionCompany									 = Company
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq



		CustomerInvoiceDistributionRel
			classic name is ARDISTRIB
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set6
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.ReceivableCompanyDataGroup.Customer				 = Customer
				related.TransType										 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.Invoice											 = ReceivableInvoiceDetail.Invoice


		ReceivableInvoiceUnresolvedDisputeRel
			classic name is ARDISPUTE
			one-to-many relation to ReceivableInvoiceDispute
			delete cascades
			Field Mapping uses symbolic key
				related.Company  = Company
				related.Customer = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	related.ReceivableInvoiceDetail.Invoice							 = ReceivableInvoiceDetail.Invoice
				and	related.ReceivableInvoiceDetail.PaymentSeq						 = ReceivableInvoiceDetail.PaymentSeq
				and	related.ResolveDate	= blank)


		ReceivableInvoiceOpenDisputeRel
			one-to-many relation to ReceivableInvoiceDispute
			delete cascades
			Field Mapping uses Set5
				related.Company					 = Company
				related.Customer				 = Customer
				related.ReceivableInvoiceDetail	 = ReceivableInvoiceDetail

		ReceivableProjectTransactionRel
			one-to-one relation to ReceivableProjectTransaction
			Field Mapping uses symbolic key
				related.Company										 = Company
				related.ReceivableProjectTransaction.TransType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableProjectTransaction.BatchNumber	 = BatchNumber
				related.ReceivableProjectTransaction.Transaction	 = ReceivableInvoiceDetail.Invoice
				related.ReceivableProjectTransaction.PaymentSeq		 = ReceivableInvoiceDetail.PaymentSeq



		ReceivableInvoiceApplyReverseHeaderRel
			one-to-one relation to ReceivableInvoiceApplyReverseHeader
			Field Mapping uses symbolic key
				related.Company																					 = Company
				related.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq


		DebitTransactionsForCustomerRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Company		 = Company
				and	related.Customer		 = Customer
				and   !related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)






		CreditMemoReceivableApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set3
				related.CreditTransaction.CreditCompany		 = Company
				related.CreditTransaction.CreditCustomer	 = Customer
				related.CreditTransaction.CreditType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.CreditTransaction.CreditNumber		 = ReceivableInvoiceDetail.Invoice
				related.CreditTransaction.CreditSequence	 = ReceivableInvoiceDetail.PaymentSeq
			Instance Selection
				where (!related.Writeoff)


		LocalReceivableReasonRel
			one-to-one relation to ReceivableReason
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableReasonType	 = "AD"
				related.ReceivableReason		 = LocalReceivableReason


		ContextReceivablePaymentRel
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					 = ReceivablePaymentHeader.Company
				related.ReceivablePaymentHeader	 = ReceivablePaymentHeader
				related.ReceivablePayment		 = ReceivablePayment


		ReceivableFilterRel
			one-to-one relation to ReceivableFilter
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup			
				related.ReceivableFilter		 = actor


		ReceivableInvoiceObligationGroupRel
			one-to-one relation to ReceivableInvoiceObligationGroup
			Field Mapping uses symbolic key
				related.Company															 = Company
				related.ReceivableInvoiceObligationGroup.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableInvoiceObligationGroup.Invoice						 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceObligationGroup.PaymentSeq						 = ReceivableInvoiceDetail.PaymentSeq


		DebitTransactionsForCreditTransactionRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								 = Company
				related.AlternateReceivableInvoiceType		 = "M"
				related.ReceivableInvoiceDetail.Invoice		 = ReceivableInvoiceDetail.Invoice
			Instance Selection
				where  ((related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType = "D"
				or	  related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType = "I")
				and	 related.ReceivableInvoiceRel.Status.Released
				and	 related.Status = Status.OpenTransaction)


		MixedLocalCreditToDebitRel
			one-to-one relation to ReceivableInvoiceDetail
			Field Mapping uses Set5
				related.Company													 = Company
				related.Customer												 = Customer
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		 = LocalTransType
				related.ReceivableInvoiceDetail.Invoice							 = ReceivableInvoiceDetail.Invoice
				related.ReceivableInvoiceDetail.PaymentSeq						 = LocalDrPmtSeq


		ReceivableElectronicFundsTransferAdjustmentRel
			one-to-one relation to ReceivableElectronicFundsTransferAdjustment
			Field Mapping uses symbolic key


				related.Company														= Company
				related.ReceivableElectronicFundsTransferAdjustment.TransType		= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableElectronicFundsTransferAdjustment.Invoice			= ReceivableInvoiceDetail.Invoice
				related.ReceivableElectronicFundsTransferAdjustment.PaymentSeq		= ReceivableInvoiceDetail.PaymentSeq


		AgingDisputeRel
			one-to-many relation to ReceivableInvoiceDispute
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and	related.ReceivableInvoiceDetail.Invoice							 = ReceivableInvoiceDetail.Invoice
				and	related.ReceivableInvoiceDetail.PaymentSeq						 = ReceivableInvoiceDetail.PaymentSeq
				and	related.DisputeDate												 <= current corporate date
				and   (related.ResolveDate											 = blank
				or	 related.ResolveDate											 > current corporate date))


		MixedSignedApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company	 = Company
			Instance Selection
				where (related.ReceivableApplication.TransType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and   related.ReceivableApplication.Invoice		 = ReceivableInvoiceDetail.Invoice
				and   related.ReceivableApplication.PaymentSeq	 = ReceivableInvoiceDetail.PaymentSeq
				and   related.ReceivableApplication.BatchNumber	 = ReceivableInvoiceRel.BatchNumber
				and   related.ApplicationSource.MixedSignedApplication)


		TransientOperatorRel
			one-to-one relation to ReceivableOperator
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableOperator		 = TransientOperator


		ReceivableProcessLevelRel 
			one-to-one relation to ReceivableProcessLevel
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableProcessLevel	 = ReceivableProcessLevel


		LocalOperatorRel
			one-to-one relation to ReceivableOperator
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableOperator		 = LocalOperator


		ReceivableElectronicFundsTransferNotifyRel
			one-to-one relation to ReceivableElectronicFundsTransferNotify
			Field Mapping uses symbolic key
				related.CustomerGroup			 = Company.CustomerGroupField.CustomerGroup
				related.Company					 = Company
				related.Customer				 = Customer


		ReceivableElectronicFundsTransferNotifyCustomerRel
			one-to-one relation to ReceivableElectronicFundsTransferNotify
			Field Mapping uses symbolic key
				related.CustomerGroup			 = Company.CustomerGroupField.CustomerGroup
				related.Company					 = blank
				related.Customer				 = Customer


		CustomerGroupAgePeriodBalanceHeaderRel
			one-to-many relation to ReceivableAgePeriodBalanceHeader
			Field Mapping uses ByCustomerGroup
				related.CustomerGroup			 = LocalCustomerGroup


		SetAgePeriodBalanceHeaderRel
			one-to-one relation to ReceivableAgePeriodBalanceHeader
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.Customer				 = Customer



		SubleaseBillingInvoiceRel	
			one-to-many relation to SubleaseBillingInvoice
			Field Mapping uses symbolic key
				related.Company						 = Company
			Instance Selection
				where (related.Customer				 = Customer
				and related.ReceivableInvoiceType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				and related.InvoiceNumber			 = ReceivableInvoiceDetail.Invoice)


		CustomerDraftCreditRel
			one-to-many relation to CustomerDraftCredit
			Field Mapping uses Set2
				related.CreditTransaction.CreditCompany			 = Company
				related.CreditTransaction.CreditType			 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.CreditTransaction.CreditNumber			 = ReceivableInvoiceDetail.Invoice
				related.CreditTransaction.CreditBatch			 = ReceivableInvoiceRel.BatchNumber
				related.CreditTransaction.CreditSequence		 = ReceivableInvoiceDetail.PaymentSeq


		ElectronicFundsTransferRel
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses Set1
				related.CustomerGroup						= Company.CustomerGroupField.CustomerGroup
				related.ProcessingCompany					= Company
				related.Company								= Company
			Instance Selection
				where (related.ReceivableInvoiceDetail		= ReceivableInvoiceDetail)


		PurgeEligibleDebitApplicationsRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses SequenceDescending
				related.Company = Company
				related.ReceivableApplication.TransType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplication.Invoice		 = ReceivableInvoiceDetail.Invoice
				related.ReceivableApplication.PaymentSeq	 = ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableApplication.BatchNumber	 = ReceivableInvoiceRel.BatchNumber
			Instance Selection
				where (related.Status.ApplicationPosted
				and	related.Writeoff)


		CustomerDraftBankDateRangeRel
			one-to-many relation to CustomerDraftBank
			Field Mapping uses Set4
				related.CustomerGroup			= Company.CustomerGroupField.CustomerGroup
				related.Company					= LocalCompany
				related.Customer				= LocalCustomer
			Instance Selection
				where  (LocalDueDate within related.BankDateRange)


		CompanyWithDebitCashCodeRel
			one-to-many relation to ReceivableCompany
			Field Mapping uses Set2
				related.CustomerGroupField.CustomerGroup = LocalPrmCustomerGroup
			Instance Selection
				where (related.EFTDebitCashCode entered)










		ActualBankDayNumberRel
			one-to-many relation to SystemCalendarDate
			Field Mapping uses symbolic key
				related.EnterpriseGroup = LocalFEG
				related.SystemCalendar  = LocalEFTCalendar
			Instance Selection
				where (related.IsBankDay
				and	related.SystemCalendarDate > LocalFromDate)


		CustomerDraftBankRel
			one-to-many relation to CustomerDraftBank
			Field Mapping uses Set4
				related.CustomerGroup			= Company.CustomerGroupField.CustomerGroup
				related.Company					= LocalCompany
				related.Customer				= LocalCustomer
			Instance Selection
				where (related.ValidatePrenotification
				and	related.BankDateRange.StartDate entered)

		ElectronicFundsTransferCustomerGroupRel
			one-to-many relation to ElectronicFundsTransferCustomerGroup
			Field Mapping uses Set2
				related.ElectronicFundsTransferCustomerGroup.Customer	= Customer
				related.ElectronicFundsTransferCustomerGroup.Company	= LocalCompany
				related.CustomerGroup									= Company.CustomerGroupField.CustomerGroup

		CompanyCustomerExistsRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company					= LocalReceivablesCompany
				related.Customer				= LocalCustomer

		ReceivableEFTNotifyExistsRel
			one-to-many relation to ReceivableElectronicFundsTransferNotify
			Field Mapping uses symbolic key
				related.CustomerGroup		= Company.CustomerGroupField.CustomerGroup
				related.Company				= LocalCompany
				related.Customer			= LocalCustomer
			Instance Selection
				where (!related.HoldAllProcessing)

		EFTCustomerGroupRel
			one-to-many relation to ElectronicFundsTransferCustomerGroup
			Field Mapping uses symbolic key
				related.CustomerGroup		= Company.CustomerGroupField.CustomerGroup
			Instance Selection
				where (related.ElectronicFundsTransferCustomerGroup.Company			= LocalCompany
				and	related.ElectronicFundsTransferCustomerGroup.CreditCustomer	= Customer)

		GLInterEntityRelationRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= LocalFEG
				related.AccountingEntity		= LocalFromAccountingEntity
				related.ToAccountingEntity		= LocalToAccountingEntity

		ReceivableInvoiceDetailEFTRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses OpenByCustomer
				related.Customer = Customer
			Instance Selection
				where (related.Company.CustomerGroupField.CustomerGroup = Company.CustomerGroupField.CustomerGroup
				and	related.EftExtract.NotExtracted
				and	!related.EFTNotification.FinalNoteSent
				and	!related.EFTNotification.NotePrinted
				and	related.BankTransactionCode.TransactionOrigin.Receivable
				and	related.BankTransactionCode.BankTransactionType.CashPayment)

		ReceivableInvoiceForEFTRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company					 = LocalReceivablesCompany
				related.ReceivableInvoiceType	 = LocalReceivableInvoiceDetailType
				related.ReceivableInvoice		 = LocalInvoice

		CustomerDraftBankValidityRel
			one-to-many relation to CustomerDraftBank
			Field Mapping uses Set4
				related.CustomerGroup			= Company.CustomerGroupField.CustomerGroup
				related.Company					= LocalCompany
				related.Customer				= LocalCustomer
			Instance Selection
				where (LocalToDate within related.BankDateRange)

		CustomerDraftBankValidationRel
			one-to-many relation to CustomerDraftBank
			Field Mapping uses Set4
				related.CustomerGroup			= Company.CustomerGroupField.CustomerGroup
				related.Company					= LocalCompany
				related.Customer				= LocalCustomer
			Instance Selection
				where (LocalToDate within related.BankDateRange
				and	 related.ValidatePrenotification)

		EFTTransactionWithTypeNRel
			one-to-one relation to ElectronicFundsTransferTransaction
			Field Mapping uses Set1
				related.CustomerGroup								= Company.CustomerGroupField.CustomerGroup
				related.ProcessingCompany							= LocalEFTCompany
				related.Company										= LocalReceivablesCompany
				related.ReceivableInvoiceDetail						= ReceivableInvoiceDetail
				related.ElectronicFundsTransferTransaction.EftType 	= "N"
				related.ElectronicFundsTransferTransaction.EftSeq 	= 1

		EFTTransactionWithTypeARel
			one-to-many relation to ElectronicFundsTransferTransaction
			Field Mapping uses Set1
				related.CustomerGroup								= Company.CustomerGroupField.CustomerGroup
				related.ProcessingCompany							= LocalEFTCompany
				related.Company										= LocalReceivablesCompany
				related.ReceivableInvoiceDetail						= ReceivableInvoiceDetail
				related.ElectronicFundsTransferTransaction.EftType 	= "A"

		EFTTransactionWithTypeDRel
			one-to-one relation to ElectronicFundsTransferTransaction
			Field Mapping uses Set1
				related.CustomerGroup						= Company.CustomerGroupField.CustomerGroup
				related.ProcessingCompany					= LocalEFTCompany
				related.Company								= LocalReceivablesCompany
				related.ReceivableInvoiceDetail				= ReceivableInvoiceDetail
				related.ElectronicFundsTransferTransaction.EftType 	= "D"
				related.ElectronicFundsTransferTransaction.EftSeq 	= 1

		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity				 = GeneralLedgerCompanyRel.AccountingEntity

		ReceivableEFTNotifyExistsMethodRel
			one-to-many relation to ReceivableElectronicFundsTransferNotify
			Field Mapping uses symbolic key
				related.CustomerGroup		= Company.CustomerGroupField.CustomerGroup
				related.Company				= LocalCompany
				related.Customer			= LocalCreditCustomer
			Instance Selection
				where (!related.HoldAllProcessing)

		EFTExtractInvoiceDetailsRel
			one-to-one relation to EFTExtractInvoiceDetails
			Field Mapping uses Set1
				related.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.EFTExtractResult		= EFTExtractResult
				related.Customer				= LocalCustomer
				related.Company					= LocalReceivablesCompany
				related.ReceivableInvoiceDetail	= LocalReceivableInvoiceDetail

		EFTNotiExtractPrenoteInvoiceDetailsRel
			one-to-many relation to EFTNotiExtractPrenoteInvoiceDetails
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivableInvoiceDetail		= ReceivableInvoiceDetail
			Instance Selection
				where (related.IsSearch					= "Y")

		EFTNotiExtractFinalNoteInvoiceDetailsRel
			one-to-many relation to EFTNotiExtractFinalNoteInvoiceDetails
			Field Mapping uses symbolic key
				related.Company						= Company
				related.ReceivableInvoiceDetail		= ReceivableInvoiceDetail
			Instance Selection
				where (related.IsSearch					= "Y")

		ProcessingCompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company					= LocalEFTCompany
				related.Customer				= LocalCustomer

		ClaimsAndLiabilitiesRel
			one-to-many relation to ClaimsAndLiabilities
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.ClaimsAndLiabilitiesHeader	 = LocalClaimsAndLiabilitiesHeader
				related.Country						 = Customer.PostalAddress.Country

		AppliedPaymentRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses SequenceDescending
				related.Company						   = Company
				related.ReceivableApplication.TransType   = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.ReceivableApplication.Invoice	 = ReceivableInvoiceDetail.Invoice
				related.ReceivableApplication.PaymentSeq  = ReceivableInvoiceDetail.PaymentSeq
				related.ReceivableApplication.BatchNumber = ReceivableInvoiceRel.BatchNumber

		EligibleReceivableInvoiceDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses OpenByCustomer
				related.Customer	= Customer
			Instance Selection
				where (related.Company.CustomerGroupField.CustomerGroup = Company.CustomerGroupField.CustomerGroup
				and	related.EftExtract.NotExtracted
				and	related.EFTNotification.NotePrinted
				and	(related.EftAction != 2 and related.EftAction != 6 and related.EftAction != 3)
				and	related.BankTransactionCode.TransactionOrigin.Receivable
				and	related.BankTransactionCode.BankTransactionType.CashPayment
				and	(LocalTermsCode not entered
				or	 (LocalTermsCode entered
				and	 related.TermsCode = LocalTermsCode))
				and	((related.DueDate >= LocalFromDate
				and	related.DueDate <= LocalToDate)
				or	 (related.EftAction.Added
				or		related.EftAction.AddedPostponed)))

		EligibleCompanyReceivableInvoiceDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set7
				related.Company		= LocalEFTCompany
				related.Customer	= Customer
			Instance Selection
				where (related.Company.CustomerGroupField.CustomerGroup = Company.CustomerGroupField.CustomerGroup
				and	related.EftExtract.NotExtracted
				and	related.EFTNotification.NotePrinted
				and	(related.EftAction != 2 and related.EftAction != 6 and related.EftAction != 3)
				and	related.BankTransactionCode.TransactionOrigin.Receivable
				and	related.BankTransactionCode.BankTransactionType.CashPayment
				and	(LocalTermsCode not entered
				or	 (LocalTermsCode entered
				and	 related.TermsCode = LocalTermsCode))
				and	((related.DueDate >= LocalFromDate
				and	related.DueDate <= LocalToDate)
				or	 (related.EftAction.Added
				or		related.EftAction.AddedPostponed)))


		CashManagementAccountSetupWithThirdPartyPaymentProcessingReceivableProcessLevelRel	
			one-to-many relation to CashManagementAccount
			Field Mapping uses symbolic key
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.ThirdPartyPaymentProcessingReceivableProcessLevel exists)

		ReceivablePortalPaymentDetailRel	
			one-to-one relation to ReceivablePortalPaymentDetail
			Field Mapping uses Set2	
				related.ReceivablePortalPaymentHeader	 = actor.context.CustomerRepresentativeContact.ReceivablePortalPaymentHeader	
				related.Customer						 = Customer
				related.FromReceivableCompany			 = Company
				related.ReceivableInvoiceDetailType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.Invoice							 = ReceivableInvoiceDetail.Invoice
				related.PaymentSeq						 = ReceivableInvoiceDetail.PaymentSeq

		AnyReceivablePortalPaymentDetailExistRel	
			one-to-many relation to ReceivablePortalPaymentDetail
			Field Mapping uses Set3
				related.FromReceivableCompany			 = Company
				related.ReceivableInvoiceDetailType		 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				related.Invoice							 = ReceivableInvoiceDetail.Invoice
				related.PaymentSeq						 = ReceivableInvoiceDetail.PaymentSeq


		ThirdPartyPaymentProcessingPaymentCurrencyConfigurationParameterRel	
			one-to-one relation to ConfigurationParameter
			Field Mapping uses symbolic key
				related.ConfigurationParameter.ConfigurationID	= "config"
				related.ConfigurationParameter.Name				= "PAYACONNECT.PAYMENTCURRENCY"



	Sets

		Set10
			indexed
			Instance Selection
				where (IsOpen)	//IEFIN-106354 adding this comment - IsOpen is defined as "when (Status.OpenTransaction)"
			Sort Order
				Company
				Customer
				SortAmount descending
				ReceivableInvoiceDetail

		Set11
			indexed
			Instance Selection
				where (IsOpen)	//IEFIN-106354 adding this comment - IsOpen is defined as "when (Status.OpenTransaction)"
			Sort Order
				Company
				Customer
				CustomerPurchaseOrder
				ReceivableInvoiceDetail

		Set12
			indexed
			Instance Selection
				where (IsOpen)	//IEFIN-106354 adding this comment - IsOpen is defined as "when (Status.OpenTransaction)"
			Sort Order
				Company
				Customer
				TransactionUserField1
				ReceivableInvoiceDetail

		Set13
			indexed
			Instance Selection
				where (IsOpen)	//IEFIN-106354 adding this comment - IsOpen is defined as "when (Status.OpenTransaction)"
			Sort Order
				Company
				Customer
				ReceivableProcessLevel
				ReceivableInvoiceDetail

		Set14
			indexed
			Sort Order
				Project
				Status
				TransactionDate
				Company
				Customer
				ReceivableInvoiceDetail

		Set2
			indexed
			Instance Selection
				where (IsOpen)	//IEFIN-106354 adding this comment - IsOpen is defined as "when (Status.OpenTransaction)"
			Sort Order
				Company
				Customer
				DueDate
				ReceivableInvoiceDetail

		Set3
			indexed
			Instance Selection
				where (IsOpen)	//IEFIN-106354 adding this comment - IsOpen is defined as "when (Status.OpenTransaction)"
			Sort Order
				Company
				Customer
				ReceivableInvoiceDetail

		Set4
			indexed
			Instance Selection
				where (IsNotHistorical)
			Sort Order
				Company
				Customer
				TransactionDate
				ReceivableInvoiceDetail

		Set5
			indexed
			Sort Order
				Company
				Customer
				ReceivableInvoiceDetail

		Set6
			indexed
			Instance Selection
				where (IsNotHistorical)
			Sort Order
				Company
				Customer
				ReceivableInvoiceDetail

		Set7
			indexed
			Instance Selection
				where (IsOpen)	//IEFIN-106354 adding this comment - IsOpen is defined as "when (Status.OpenTransaction)"
			Sort Order
				Company
				Customer
				Project
				ReceivableInvoiceDetail

		Set8
			indexed
			Sort Order
				Company
				AlternateReceivableInvoiceType
				ReceivableInvoiceDetail.Invoice
				ReceivableInvoiceDetail.PaymentSeq

		Set9
			indexed
			Instance Selection
				where (IsOpen)	//IEFIN-106354 adding this comment - IsOpen is defined as "when (Status.OpenTransaction)"
			Sort Order
				Company
				ReceivableInvoiceDetail.ReceivableInvoiceDetailType
				DueDate
				ReceivableInvoiceDetail.Invoice
				ReceivableInvoiceDetail.PaymentSeq

		OpenByCustomer
			indexed
			Instance Selection
				where (IsOpen)	//IEFIN-106354 adding this comment - IsOpen is defined as "when (Status.OpenTransaction)"
			Sort Order
				Customer
				ReceivableInvoiceDetail
				Company

		ByApplicationCloseResult
			Sort Order
				ApplicationCloseResult
				Company
				Customer
				ReceivableInvoiceDetail

		OpenByReceivableInvoiceDetail
			indexed
			Instance Selection
				where (IsOpen)	//IEFIN-106354 adding this comment - IsOpen is defined as "when (Status.OpenTransaction)"
			Sort Order
				ReceivableInvoiceDetail
				Company
				Customer

		ByCustomerTransactionDate
			indexed
			Sort Order
				Company
				Customer
				TransactionDate
				ReceivableInvoiceDetail

		ByCustomerDueDate
			indexed
			Sort Order
				Company
				Customer
				DueDate
				ReceivableInvoiceDetail

		ByCustomerDueDateAcrossCompany
			indexed
			Sort Order
				Customer
				DueDate
				Company
				ReceivableInvoiceDetail


	Actions
		CreateFromBatch is a Create Action
			restricted
			Entrance Rules
				LocalCurrencyTable = ReceivableInvoiceRel.CurrencyTable
				LocalExchangeDate = DerivedExchangeDate


		CreateReversal is an Instance Action
			default label is "CreateReversalHeader"
			valid when (AllowCreateReversal)
			Parameters
				ReversalDate							is Date
				PrmReceivableOperator					is like ReceivableOperator
			Parameter Rules
				ReversalDate
					required
					default to current corporate date
					initial value is current corporate date
				PrmReceivableOperator
					initial value is actor
					default to actor
					if (Company.CashOperatorRequired)
						LocalOperator		= PrmReceivableOperator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"

			Action Rules
				constraint (!ReceivableInvoiceApplyReverseHeaderRel exists)
					"ReversalHeaderAlreadyCreated"
				if (Status.HistoricalTransaction) 
					constraint (Company.AllowHistoricalApplicationReversal)
						"InvoiceIsHistorical_-InvoiceCompanyDoesNotAllowHistoricalApplicationReversal"
				invoke Create ReceivableInvoiceApplyReverseHeaderRel
					invoked.GeneralLedgerDate																		 = ReversalDate
					invoked.ReceivableOperator																		 = PrmReceivableOperator
					invoked.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoiceDetail.Invoice
					invoked.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.PaymentSeq					 = ReceivableInvoiceDetail.PaymentSeq


		DeleteReversal is an Instance Action
			default label is "DeleteReversalHeader"
			valid when (HasReverseHeader)
			Action Rules
				invoke Delete ReceivableInvoiceApplyReverseHeaderRel


		ReleaseReversal is an Instance Action
			default label is "ProcessReversal"
			valid when (HasReverseDetail)
			Action Rules
				invoke Release ReceivableInvoiceApplyReverseHeaderRel


		SelectAllForReversal is an Instance Action
			default label is "SelectAllForReversal"
			valid when (ShowSelectAllForReversal)
			Action Rules
				constraint (ReceivableInvoiceApplyReverseHeaderRel exists)
					"ReversalHeaderNotYetCreated"
				for each PostedApplicationsAvailableToInvoiceReverseRel
					invoke ApplicationPosted.SelectForInvoiceReversal each


		ReverseAll is an Instance Action		
			default label is "CreateAndReverseAll"
			valid when (AllowCreateReversal)
			Parameters
				ReversalDate							is Date
				PrmReceivableOperator					is like ReceivableOperator
				PrmProcessReversals						is Boolean
					default label is "ProcessReversal"
			Parameter Rules
				ReversalDate
					required
					default to current corporate date
					initial value is current corporate date
				PrmReceivableOperator
					initial value is actor
					default to actor
					if (Company.CashOperatorRequired)
						LocalOperator		 = PrmReceivableOperator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"
				PrmProcessReversals
					initial value is true
			Action Rules
				constraint (!ReceivableInvoiceApplyReverseHeaderRel exists)
					"ReversalHeaderAlreadyCreated"

				invoke Create ReceivableInvoiceApplyReverseHeaderRel
					invoked.GeneralLedgerDate																		 =	ReversalDate
					invoked.ReceivableOperator																		 =	PrmReceivableOperator
					invoked.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 =	ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.Invoice						 =	ReceivableInvoiceDetail.Invoice
					invoked.ReceivableInvoiceApplyReverseHeader.ReceivableInvoiceDetail.PaymentSeq					 =	ReceivableInvoiceDetail.PaymentSeq

				for each PostedApplicationsAvailableToInvoiceReverseRel
					invoke ApplicationPosted.SelectForInvoiceReversal each

				if (PrmProcessReversals
				and ReceivableInvoiceApplyReverseHeaderRel.HasReceivableInvoiceApplyReverseDetail)
					invoke ReleaseReversal


		Create is a Create Action
			Entrance Rules
				LocalCurrencyTable = ReceivableInvoiceRel.CurrencyTable
				LocalExchangeDate = DerivedExchangeDate

				if (TransientCalculateTerms)
					CalculateTerms.TransactionDate				  = ReceivableInvoiceRel.TransactionDate
					CalculateTerms.TransactionAmount				= ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount
					LocalTermsCalTrigger							= CalculateTerms.TermsCalTrigger
					DueDate											= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate
					InvoiceAmount.CurrencyAmount					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].MultiplePayment
					DiscountDate.DiscDate[1]						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
					DiscountPercent.DiscPct[1]						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
					DiscountAmount.OrigDiscAmt[1]					= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount

			Action Rules

				ReceivableInvoiceDetail.PaymentSeq = ReceivableInvoiceRel.LastReceivableInvoiceDetail +1
				if (ReceivableInvoiceRel.ReceivableInvoiceUserSortRel.Sort1 entered
				and Sort1 not entered)
					Sort1 = ReceivableInvoiceRel.ReceivableInvoiceUserSortRel.Sort1
				if (ReceivableInvoiceRel.ReceivableInvoiceUserSortRel.Sort2 entered
				and Sort2 not entered)
					Sort2 = ReceivableInvoiceRel.ReceivableInvoiceUserSortRel.Sort2
				if (ReceivableInvoiceRel.ReceivableInvoiceUserSortRel.Sort3 entered
				and Sort3 not entered)
					Sort3 = ReceivableInvoiceRel.ReceivableInvoiceUserSortRel.Sort3
				if (ReceivableInvoiceRel.ReceivableInvoiceUserSortRel.Sort4 entered
				and Sort4 not entered)
					Sort4 = ReceivableInvoiceRel.ReceivableInvoiceUserSortRel.Sort4

			Exit Rules


				SortAmount = InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
				invoke FastUpdate ReceivableInvoiceRel
					invoked.LastReceivableInvoiceDetail = ReceivableInvoiceDetail.PaymentSeq

				if (CompanyCustomerRel.IsPartOfNationalAcount)
					invoke Create NationalAccountTransaction
						fill in fields from this instance


						if (CompanyCustomerRel.IsNationalAccountCustomer)
							invoked.NationalAccount.Company		= Company
							invoked.NationalAccount.Customer		= Customer
						if (CompanyCustomerRel.IsInvoicedCustomer)
							invoked.NationalAccount.Company		= CompanyCustomerRel.first NationalAccountInvoicedCustomerRel.NationalAccount.NationalAccountGroup.NatCompany
							invoked.NationalAccount.Customer		= CompanyCustomerRel.first NationalAccountInvoicedCustomerRel.NationalAccount.NationalAccountGroup.NatCustomer













						invoked.TransactionAmount					= InvoiceAmount.CurrencyAmount
						invoked.BaseAmount							= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.OpenBaseAmount						= BaseOpenAmount
						invoked.OpenTransactionAmount				= OpenAmount
						invoked.OpenSortBaseAmount					= BaseOpenAmount

				include UpdateReceivableProjectTransaction


				if  ((ReceivableInvoiceRel.ReceivableInvoiceType.MixedSignLines
				and  !ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
				or  (!ReceivableInvoiceRel.ReceivableInvoiceType.MixedSignLines
				and  !ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo))

					if  (BillOfExchangeInvoices)

						invoke Created.Create CustomerDraft
							assign result to NewCustomerDraft
							invoked.Company											= Company
							invoked.Customer										= Customer
							if (!Company.BillOfExchangeNumberingType.AutomaticNumbering)
								invoked.CustomerDraft.DraftNumber					= ReceivableInvoiceDetail.Invoice
								invoked.CustomerDraft.Suffix						= ReceivableInvoiceDetail.PaymentSeq
							invoked.ReceivableProcessLevel							= ReceivableProcessLevel
							invoked.BankTransactionCode								= BankTransactionCode
							invoked.CustomerDraft.DraftSource						= "R"
							invoked.CurrencyRate									= ReceivableInvoiceRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
							invoked.CurrencyMultiplicationOrDivision				= ReceivableInvoiceRel.CurrencyMultiplicationOrDivision
							invoked.CurrencyRateToCustomerGroupCurrency				= ReceivableInvoiceRel.CurrencyRateToCustomerGroupCurrency
							invoked.CustomerGroupCurrencyMultiplicationOrDivision	= ReceivableInvoiceRel.CustomerGroupCurrencyMultiplicationOrDivision
							invoked.BaseAmount										= SignedBaseAmount
							invoked.TransactionAmount								= SignedTransactionAmount
							invoked.OriginalCurrency								= ReceivableInvoiceRel.OriginalCurrency
							invoked.DraftDate										= TransactionDate
							invoked.MaturityDate									= DueDate
							invoked.ReceivableGeneralLedgerCode						= ReceivableGeneralLedgerCode

						invoke ApplicationPosted.BillOfExchangeCreate ReceivableApplication
							invoked.Company											= Company
							invoked.ReceivableApplication.TransType					= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.ReceivableApplication.Invoice					= ReceivableInvoiceDetail.Invoice
							invoked.ReceivableApplication.PaymentSeq				= ReceivableInvoiceDetail.PaymentSeq
							invoked.ReceivableApplication.BatchNumber				= ReceivableInvoiceDetail.BatchNumber

							invoked.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount	= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.ApplicationAmount.CurrencyAmount					= InvoiceAmount.CurrencyAmount
							invoked.CreditTransaction.CreditApplicationAmount.FunctionalAmount.EnteredCurrencyAmount= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.CreditTransaction.CreditApplicationAmount.CurrencyAmount			= InvoiceAmount.CurrencyAmount
							invoked.ApplicationCurrency								= Company.Currency

							invoked.ReceivableOperator								= TransientOperator			

							invoked.ApplicationSource								= "M"	
							invoked.ReceivableGeneralLedgerCode						= ReceivableGeneralLedgerCode

							invoked.CreditTransaction.CreditType					= "B"
							invoked.CreditTransaction.CreditCompany					= NewCustomerDraft.Company
							invoked.CreditTransaction.CreditCustomer				= NewCustomerDraft.Customer
							invoked.CreditTransaction.CreditBatch					= NewCustomerDraft.PaymentBatchNumber
							invoked.CreditTransaction.CreditSequence				= NewCustomerDraft.CustomerDraft.Suffix
							invoked.CreditTransaction.CreditNumber					= NewCustomerDraft.CustomerDraft.DraftNumber
							invoked.GeneralLedgerDate								= NewCustomerDraft.DraftDate
							invoked.DepositDate										= NewCustomerDraft.DraftDate
							invoked.ApplicationSource								= "B"	
							if (Company.BillOfExchAcceptAccounting.YesGeneralLedgerUpdateRequiredAtAcceptance)
								invoked.GLOffsetCode								= ReceivableProcessLevel.BOEAcceptanceReceivableGeneralLedgerCode
							else
								invoked.GLOffsetCode								= ReceivableProcessLevel.ReceivableGeneralLedgerCode

							if (NewCustomerDraft.OriginalCurrency = Company.Currency)
								invoked.ApplicationCurrencyType						= "B"
							else
								invoked.ApplicationCurrencyType						= "N"

				if (Sort1 entered)
					invoke Create InvoiceDetailUserSort1Rel
						fill in fields from this instance
						invoked.Company														= Company
						invoked.Customer													= Customer
						invoked.ReceivableInvoiceDetailUserSort.ReceivableInvoiceDetailType	= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.ReceivableInvoiceDetailUserSort.Invoice						= ReceivableInvoiceDetail.Invoice
						invoked.ReceivableInvoiceDetailUserSort.PaymentSeq					= ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableInvoiceDetailUserSort.IndexNbr					= "1"
						invoked.SortField													= Sort1
						if (CompanyCustomerRel.IsNationalAccountCustomer)
							invoked.NationalAccountIndicator	= "N"
							invoked.NationalAccountCompany		= Company
							invoked.NationalAccountCustomer	= Customer
				if (Sort2 entered)
					invoke Create InvoiceDetailUserSort2Rel
						fill in fields from this instance
						invoked.Company														= Company
						invoked.Customer													= Customer
						invoked.ReceivableInvoiceDetailUserSort.ReceivableInvoiceDetailType	= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.ReceivableInvoiceDetailUserSort.Invoice						= ReceivableInvoiceDetail.Invoice
						invoked.ReceivableInvoiceDetailUserSort.PaymentSeq					= ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableInvoiceDetailUserSort.IndexNbr					= "2"
						invoked.SortField													= Sort2
						if (CompanyCustomerRel.IsNationalAccountCustomer)
							invoked.NationalAccountIndicator	= "N"
							invoked.NationalAccountCompany		= Company
							invoked.NationalAccountCustomer	= Customer
				if (Sort3 entered)
					invoke Create InvoiceDetailUserSort3Rel
						fill in fields from this instance
						invoked.Company														= Company
						invoked.Customer													= Customer
						invoked.ReceivableInvoiceDetailUserSort.ReceivableInvoiceDetailType	= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.ReceivableInvoiceDetailUserSort.Invoice						= ReceivableInvoiceDetail.Invoice
						invoked.ReceivableInvoiceDetailUserSort.PaymentSeq					= ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableInvoiceDetailUserSort.IndexNbr					= "3"
						invoked.SortField													= Sort3
						if (CompanyCustomerRel.IsNationalAccountCustomer)
							invoked.NationalAccountIndicator	= "N"
							invoked.NationalAccountCompany		= Company
							invoked.NationalAccountCustomer	= Customer
				if (Sort4 entered)
					invoke Create InvoiceDetailUserSort4Rel
						fill in fields from this instance
						invoked.Company														= Company
						invoked.Customer													= Customer
						invoked.ReceivableInvoiceDetailUserSort.ReceivableInvoiceDetailType	= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.ReceivableInvoiceDetailUserSort.Invoice						= ReceivableInvoiceDetail.Invoice
						invoked.ReceivableInvoiceDetailUserSort.PaymentSeq					= ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableInvoiceDetailUserSort.IndexNbr					= "4"
						invoked.SortField													= Sort4
						if (CompanyCustomerRel.IsNationalAccountCustomer)
							invoked.NationalAccountIndicator	= "N"
							invoked.NationalAccountCompany		= Company
							invoked.NationalAccountCustomer	= Customer


		InterfaceCreate is a Create Action
			restricted
			Entrance Rules
				constraint (ReceivableInvoiceRel exists)
					"ReceivableInvoiceHeaderDoesNotExist"

				LocalCurrencyTable = ReceivableInvoiceRel.CurrencyTable
				LocalExchangeDate = DerivedExchangeDate

				if ((Status.FullyAppliedTransaction
				or   Status.ClosedTransaction
				or   Status.HistoricalTransaction)
				and  ApplicationAmount.CurrencyAmount not entered)
					ApplicationAmount.CurrencyAmount	= InvoiceAmount.CurrencyAmount

			Action Rules
				invoke Create this instance


		Update is an Update Action

			Entrance Rules

				LocalCurrencyTable = ReceivableInvoiceRel.CurrencyTable
				LocalExchangeDate = DerivedExchangeDate

				if (ReceivablePayment.IsPrepaymentTaxWithHolding)		
					constraint (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						"PaymentHasThePrepaymentTax;CreditMemoCannotBeSelectedForProcessing"

				if (ReceivablePayment.IsZeroPaymentAllowAdjustments
				and ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					if (SelectedAdjustedAmount entered)
						constraint (SelectedAdjustedAmount >=0)
							"AdjustmentAmountMustBePositive"
					else
					if (SelectedAdjustmentReason entered
					and SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
							constraint (SelectedAdjustedAmount entered)
								"AdjustmentAmountRequiredIfAdjustmentReasonEntered"
				else
				if (ReceivablePayment.IsZeroPaymentAllowAdjustments
				and !ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
						constraint (ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
							"Invoice_\Company<ReceivableInvoiceRel.Company>DoesNotAllowZeroPaymentAdjustments"

				if (ReceivablePayment.IsZeroPaymentAllowAdjustments
				and ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
					if (LineSelectedAdjustedAmount entered)
						constraint (LineSelectedAdjustedAmount >=0)
							"AdjustmentAmountMustBePositive"
					else
					if (LineSelectedAdjustmentReason entered
					and LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverShort)
							constraint (SelectedAdjustedAmount entered)
								"AdjustmentAmountRequiredIfAdjustmentReasonEntered"
				else
				if (ReceivablePayment.IsZeroPaymentAllowAdjustments
				and !ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
						constraint (ReceivableInvoiceRel.IsZeroPaymentAdjustmentsAllowed)
							"Invoice_\Company<ReceivableInvoiceRel.Company>DoesNotAllowZeroPaymentAdjustments"

				if  (Status.OpenTransaction
				and (OnCreditMemoApplicationForm or ReceivablePayment entered))
					if (SelectedApplicationAmount entered
					or  SelectedAdjustedAmount entered
					or  SelectedAdjustmentReason entered)
						constraint (ReceivableApplicationSelectRel.NumberOfAdjustments <= 1)
							"MultipleAdjustmentsExist;UseDetailScreenToChange"

						if (ReceivableApplicationSelectRel exists)
							constraint (!SummarizeDetail)
								"InvoiceHasSummarizeDetailForDisplay;MustUnselectandSelect"
				if (Company.OverApplyInvoice
				and !OnCreditMemoApplicationForm)
					initialize LocalDifferenceAmount
					if (SelectedApplicationAmount > OpenAmountDisplayCurrency
					or  AmountToApply > OpenAmountDisplayCurrency
					or  LineSelectedApplicationAmount > OpenAmountDisplayCurrency)
						constraint (IsEligibleForOverCashApplication)
							"<OverApplicationConditionalErrorMessage>"
					if (SelectedApplicationAmount != DerivedSelectApplicationAmount
					and SelectedApplicationAmount > OpenAmountDisplayCurrency)
						constraint (!SummarizeDetail)
							"CannotBeOverApplied;InvoiceHasSummarizeDetailForDisplay"
						constraint (SelectedApplicationAmount <= ReceivablePayment.PendingDifferenceDisplayCurrency)
							"InvoiceIsOverApplied;ExceedingPaymentOpenAmount"
						if (SelectedAdjustmentReason entered)
							constraint (SelectedAdjustmentReason exists)
								"ReceivableReason-<SelectedAdjustmentReason>NotDefinedForCompany-<Company>"
							constraint (SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
								"AdjustmentReasonCodeMustBe_\Over_\AppliedType."
							constraint (SelectedAdjustmentReason = Company.OverApplyReasonCode)
								"AdjustmentReasonCode-<SelectedAdjustmentReason>;MustBeSameAsCompanyOver/Apply/Reason/Code-<Company.OverApplyReasonCode>"
						LocalDifferenceAmount = OpenAmountDisplayCurrency - SelectedApplicationAmount
						if (SelectedAdjustedAmount != LocalDifferenceAmount)
							constraint (SelectedAdjustedAmount not entered)
								"CannotEnterAdjustmentAmount,WillBeDerivedForOverAppliedInvoice"
					else
						constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
							"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."
					if (AmountToApply != DerivedSelectApplicationAmount
					and AmountToApply > OpenAmountDisplayCurrency)
						constraint (!SummarizeDetail)
							"CannotBeOverApplied;InvoiceHasSummarizeDetailForDisplay"
						constraint (AmountToApply <= ReceivablePayment.PendingDifferenceDisplayCurrency)
							"InvoiceIsOverApplied;ExceedingPaymentOpenAmount"
						if (AmountToAdjustReason entered)
							constraint (AmountToAdjustReason exists)
								"ReceivableReason-<AmountToAdjustReason>NotDefinedForCompany-<Company>"
							constraint (AmountToAdjustReason.ReceivableAdjustmentReasonType.OverApplied)
								"AdjustmentReasonCodeMustBe_\Over_\AppliedType."
							constraint (AmountToAdjustReason = Company.OverApplyReasonCode)
								"AdjustmentReasonCode-<AmountToAdjustReason>;MustBeSameAsCompanyOver/Apply/Reason/Code-<Company.OverApplyReasonCode>"
						LocalDifferenceAmount = OpenAmountDisplayCurrency - AmountToApply
						if (AmountToAdjust != LocalDifferenceAmount)
							constraint (AmountToAdjust not entered)
								"CannotEnterAdjustmentAmount,WillBeDerivedForOverAppliedInvoice"
					else
						constraint (!AmountToAdjustReason.ReceivableAdjustmentReasonType.OverApplied)
							"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."
					if (LineSelectedApplicationAmount != DerivedLineSelectApplicationAmount
					and LineSelectedApplicationAmount > OpenAmountDisplayCurrency)
						constraint (!SummarizeDetail)
							"CannotBeOverApplied;LinesAreSummarized"
						constraint (LineSelectedApplicationAmount <= ReceivablePayment.PendingDifferenceDisplayCurrency)
							"InvoiceIsOverApplied;ExceedingPaymentOpenAmount"
						if (LineSelectedAdjustmentReason entered)
							constraint (LineSelectedAdjustmentReason exists)
								"ReceivableReason-<LineSelectedAdjustmentReason>NotDefinedForCompany-<Company>"
							constraint (LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
								"AdjustmentReasonCodeMustBe_\Over_\AppliedType."
							constraint (LineSelectedAdjustmentReason = Company.OverApplyReasonCode)
								"AdjustmentReasonCode-<LineSelectedAdjustmentReason>;MustBeSameAsCompanyOver/Apply/Reason/Code-<Company.OverApplyReasonCode>"
						LocalDifferenceAmount = OpenAmountDisplayCurrency - LineSelectedApplicationAmount
						if (LineSelectedAdjustedAmount != LocalDifferenceAmount)
							constraint (LineSelectedAdjustedAmount not entered)
								"CannotEnterAdjustmentAmount,WillBeDerivedForOverAppliedInvoice"
					else
						constraint (!LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
							"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."
				else
					constraint (!SelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
						"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."
					constraint (!AmountToAdjustReason.ReceivableAdjustmentReasonType.OverApplied)
						"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."
					constraint (!LineSelectedAdjustmentReason.ReceivableAdjustmentReasonType.OverApplied)
						"CannotUse_\Over_\Applied_\Reason_\Code;ReasonCodeIsReservedForOverApplicationOfInvoiceProcess."

				if  (FlipAmounts)
					InvoiceAmount.CurrencyAmount							*= -1
					InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount	*= -1
					InvoiceAmount.AlternateAmount.EnteredCurrencyAmount		*= -1
					InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount	*= -1
					InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount	*= -1
					InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount	*= -1
					InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount	*= -1
					InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount	*= -1
					InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount	*= -1
					InvoiceAmount.ProjectAmount.EnteredCurrencyAmount		*= -1
					InvoiceAmount.ReportAmount1.EnteredCurrencyAmount		*= -1
					InvoiceAmount.ReportAmount2.EnteredCurrencyAmount		*= -1
					InvoiceAmount.ReportAmount3.EnteredCurrencyAmount		*= -1
					InvoiceAmount.ReportAmount4.EnteredCurrencyAmount		*= -1
					InvoiceAmount.ReportAmount5.EnteredCurrencyAmount		*= -1
					InvoiceAmount.KeepRateOnly								= true

				if (Company.CustomerGroupField.CustomerGroup.UseBillingReceivablesPortal
				and (Customer  = actor.agent(CustomerRepresentativeContact).Customer
				or NationalAccountCustomerCheck)  
				and TransientSelectSignedOpenAmount changed)		
					if (DerivedPortalSignedOpenAmount <0)	
						constraint (TransientSelectSignedOpenAmount entered	
						and			TransientSelectSignedOpenAmount < 0)	
							"Since_\Open_\AmountIsLessThanZero,EnteredAmountShouldBeLessThanZero"	
						constraint (TransientSelectSignedOpenAmount >= DerivedPortalSignedOpenAmount)	
							"EnteredAmountCannotBeGreaterThan_\Open_\Amount"	
						if (TransientSelectSignedOpenAmount > DerivedSelectSignedOpenAmount)	
							if (DerivedPortalDiscountPercent entered)	
								if (DerivedDiscount1Date entered)
									confirmation required
										"DiscountIsNotEligibleForThe_\PartialAmount,Proceed?"
					else	
						constraint (TransientSelectSignedOpenAmount entered
						and			TransientSelectSignedOpenAmount > 0)
							"Since_\Open_\AmountIsGreaterThanZero,EnteredAmountShouldBeGreaterThanZero"	
						constraint (TransientSelectSignedOpenAmount <= DerivedPortalSignedOpenAmount)	
							"EnteredAmountCannotBeGreaterThan_\Open_\Amount"
						if (TransientSelectSignedOpenAmount < DerivedSelectSignedOpenAmount)	
							if (DerivedPortalDiscountPercent entered)	
								if (DerivedDiscount1Date entered)
									confirmation required
										"DiscountIsNotEligibleForThe_\PartialAmount,Proceed?"



			Action Rules

				constraint (!HasMarkedAsPaidReceivableApplicationAdjustments)	
					"Receivable_\Invoice<ReceivableInvoiceDetail.Invoice>Has_\MarkedAs_\Paid_\Application_\Adjustments.Cannot_\Update."	

				if (Company.CustomerGroupField.CustomerGroup.UseBillingReceivablesPortal
				and (Customer  = actor.agent(CustomerRepresentativeContact).Customer
				or DerivedNationalCustomer  = actor.agent(CustomerRepresentativeContact).Customer)  
				and TransientSelectSignedOpenAmount changed)	
					if (ReceivablePortalPaymentDetailRel exists)
						invoke Update ReceivablePortalPaymentDetailRel
							invoked.PortalRequestedAppliedAmount = TransientSelectSignedOpenAmount
					else
						invoke SelectForCreditCardOrACHPayment

				if  (Status.OpenTransaction
				and (OnCreditMemoApplicationForm or ReceivablePayment entered))


					if (SelectedApplicationAmount entered
					or  SelectedAdjustedAmount entered
					or  SelectedAdjustmentReason entered)

						if  (SelectedApplicationAmount = 0
						and  ReceivableApplicationSelectRel exists)
							invoke Unselect
						else
						if (!ReceivableApplicationSelectRel exists)
							include EditTransientOperator
							invoke InvoiceSelection
								invoked.ReceivablePaymentGroup.Company							= ContextCompany 
								invoked.ReceivablePaymentGroup.ReceivablePaymentHeader			= ReceivablePaymentHeader
								invoked.ReceivablePaymentGroup.ReceivablePayment				= ReceivablePayment.ReceivablePayment

								if  (SelectedAdjustmentReason entered
								and  SelectedApplicationAmount = DerivedSelectApplicationAmount)

									invoked.PrmAmount											= SelectedApplicationAmount - SelectedAdjustedAmount
								else

									invoked.PrmAmount											= SelectedApplicationAmount

								invoked.PrmCurrency												= DerivedDisplayCurrency
								invoked.ApplicationGeneralLedgerDate							= TransientGeneralLedgerDate
								if (!CashApplicationOperatorRequired)
									invoked.ApplyOperator										= actor
								else
									invoked.ApplyOperator										= TransientOperator
								if (IsEligibleForOverCashApplication
								and SelectedApplicationAmount > OpenAmountDisplayCurrency
								and !OnCreditMemoApplicationForm
								and !SummarizeDetail)
									invoked.PrmAdjustAmount										= OpenAmountDisplayCurrency - SelectedApplicationAmount
									invoked.PrmAdjustReason										= Company.OverApplyReasonCode
								else
								if  (SelectedAdjustedAmount entered
								or   SelectedAdjustmentReason entered)
									invoked.PrmAdjustAmount											= SelectedAdjustedAmount
									invoked.PrmAdjustReason											= SelectedAdjustmentReason
						else
							constraint (!SummarizeDetail)
								"CannotChangeInvoiceWhereInvoiceHasSummarizeDetailForDisplay,MustUnselectAndReselect"
							invoke CashApplicationUpdate ReceivableApplicationSelectRel
								invoked.EnteredAmount						= SelectedApplicationAmount
								invoked.ApplicationCurrency					= DerivedDisplayCurrency
								invoked.GeneralLedgerDate					= TransientGeneralLedgerDate






								if  (SelectedAdjustedAmount entered
								or   SelectedAdjustmentReason entered)
									invoked.SelectedAdjustedAmount			= SelectedAdjustedAmount
									invoked.SelectedAdjustmentReason		= SelectedAdjustmentReason




					else
					if (LineSelectedApplicationAmount entered
					or  LineSelectedAdjustedAmount entered
					or  LineSelectedAdjustmentReason entered)
						if  (LineSelectedApplicationAmount = 0
						and  ReceivableApplicationSelectRel exists)
							invoke Unselect
						else
						if (!ReceivableApplicationSelectRel exists)
							include EditTransientOperator
							IsLineSelect = true
							invoke InvoiceSelection
								invoked.ReceivablePaymentGroup.Company							= ContextCompany 
								invoked.ReceivablePaymentGroup.ReceivablePaymentHeader			= ReceivablePaymentHeader
								invoked.ReceivablePaymentGroup.ReceivablePayment				= ReceivablePayment.ReceivablePayment
								if  (LineSelectedApplicationAmount = DerivedLineSelectApplicationAmount
								and LineSelectedAdjustedAmount entered)
									invoked.PrmAmount											= LineSelectedApplicationAmount - LineSelectedAdjustedAmount
								else
									invoked.PrmAmount											= LineSelectedApplicationAmount
								invoked.PrmCurrency												= DerivedDisplayCurrency
								invoked.ApplicationGeneralLedgerDate							= TransientGeneralLedgerDate
								invoked.ApplyOperator											= TransientOperator
								if (IsEligibleForOverCashApplication
								and LineSelectedApplicationAmount > OpenAmountDisplayCurrency
								and !OnCreditMemoApplicationForm
								and !SummarizeDetail)
									invoked.PrmAdjustAmount										= OpenAmountDisplayCurrency - LineSelectedApplicationAmount
									invoked.PrmAdjustReason										= Company.OverApplyReasonCode

								else
								if  (LineSelectedAdjustedAmount entered
								or   LineSelectedAdjustmentReason entered)
									invoked.PrmAdjustAmount										= LineSelectedAdjustedAmount
									invoked.PrmAdjustReason										= LineSelectedAdjustmentReason
						else
							invoke CashApplicationUpdate ReceivableApplicationSelectRel
								invoked.EnteredAmount						= LineSelectedApplicationAmount
								invoked.ApplicationCurrency					= DerivedDisplayCurrency
								invoked.GeneralLedgerDate					= TransientGeneralLedgerDate






								if  (LineSelectedAdjustedAmount entered
								or   LineSelectedAdjustmentReason entered)
									invoked.SelectedAdjustedAmount				= LineSelectedAdjustedAmount
									invoked.SelectedAdjustmentReason			= LineSelectedAdjustmentReason

					else
					if (AmountToApply entered
					or  AmountToAdjust entered
					or  AmountToAdjustReason entered)
						constraint (ContextCreditMemo entered or ReceivablePayment entered)
							"CannotFindPaymentOrCreditMemoForApplication"

						if (ReceivablePayment entered)
							include EditTransientOperator
							invoke ApplyInvoiceToPayment
								invoked.ReceivablePaymentGroup.Company							= ContextCompany 
								invoked.ReceivablePaymentGroup.ReceivablePaymentHeader			= ReceivablePaymentHeader
								invoked.ReceivablePaymentGroup.ReceivablePayment				= ReceivablePayment
								if  (AmountToApply = DerivedSelectApplicationAmount
								and  AmountToAdjustReason entered)
									invoked.PrmAmount											= AmountToApply - AmountToAdjust
								else
									invoked.PrmAmount											= AmountToApply
								invoked.PrmCurrency												= DerivedDisplayCurrency
								invoked.ApplicationGeneralLedgerDate							= TransientGeneralLedgerDate
								invoked.ApplyOperator											= TransientOperator
								if (IsEligibleForOverCashApplication
								and AmountToApply > OpenAmountDisplayCurrency
								and !OnCreditMemoApplicationForm
								and !SummarizeDetail)
									invoked.PrmAdjustAmount										= OpenAmountDisplayCurrency - AmountToApply
									invoked.PrmAdjustReason										= Company.OverApplyReasonCode
								else
								if (AmountToAdjust entered)
									invoked.PrmAdjustAmount											= AmountToAdjust
									invoked.PrmAdjustReason											= AmountToAdjustReason
						else
						if (ContextCreditMemo.ReceivableInvoiceDetail.Invoice entered)

							include EditTransientOperator
							include EditAllowSelectDistributionSetForApplyCredit
							invoke ApplyInvoice
								invoked.ReceivableInvoiceDetailGroup.Company					= ContextCreditMemo.Company
								invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ContextCreditMemo.ReceivableInvoiceDetail
								if  (AmountToApply = DerivedSelectApplicationAmount)
									invoked.PrmAmount											= AmountToApply - AmountToAdjust
								else
									invoked.PrmAmount											= AmountToApply
								invoked.ApplicationGeneralLedgerDate							= TransientGeneralLedgerDate
								invoked.ApplyOperator											= TransientOperator
								if (AmountToAdjust entered)
									invoked.PrmAdjustAmount											= AmountToAdjust
									invoked.PrmAdjustReason											= AmountToAdjustReason
								invoked.PrmCreditAsFromAgent									= true 

				else
				if  (Status.OpenTransaction)

					if (WriteoffAmount entered
					or WriteoffReason entered
					or WriteoffAccount entered)
						constraint (WriteoffAmount entered
						and		 WriteoffReason entered)
							"MustEnterBothAmountAndReasonForWriteoff"
						constraint (TransientGeneralLedgerDate entered)
							"MustEnterAWrite-OffPostDate"
						constraint (WriteoffAmount > 0)
							"WriteOffAmountMustBeGreaterThanZero"
						if (SummarizeDetail)
							constraint (WriteoffAmount <= DerivedOpenAmount)
								"WriteOffAmountCannotExceedOpenAmount"
						else
							constraint (WriteoffAmount <= OpenAmount)
								"WriteOffAmountCannotExceedOpenAmount"
						constraint (WriteoffReasonIsOverShortOrTaxWithholding)	
							"ReasonCodeMustBeTypeOver_\ShortOrTax_\WithholdingForWriteOff"	//IEFIN-86538 added to allow TaxWithholding- was"ReasonCodeMustBeTypeOver/ShortForWriteOff"	
						constraint (!ReceivableApplicationSelectRel exists)
							"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"
						if (Company.VendorCreateAndInterfaceToAP)
							if (SummarizeDetail)
								constraint (!ARToAPApplicationSelectSumLineRel exists)
									"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"
							else
								constraint (!ARToAPApplicationSelectRel exists)
									"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"

						invoke ApplyInvoice
							invoked.Writeoff												= true
							invoked.ReceivableInvoiceDetailGroup.Company					= Company
							invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetail
							invoked.ApplicationGeneralLedgerDate							= TransientGeneralLedgerDate
							invoked.PrmAdjustAmount											= WriteoffAmount
							invoked.PrmAdjustReason											= WriteoffReason
							invoked.PrmAdjustAccount										= WriteoffAccount
							invoked.PrmWriteoffARIncomeWithholdingCode						= WriteoffARIncomeWithholdingCode	
							invoked.PrmWriteoffARIncomeWithholdingDocumentNumber			= WriteoffARIncomeWithholdingDocumentNumber	

				if (DueDate changed
				or  SummarizeDetail changed)
					invoke FastUpdate NationalAccountTransactionRel
						if (DueDate changed)
							invoked.DueDate			= DueDate
						if (SummarizeDetail changed)								
							invoked.SummarizeDetail	= SummarizeDetail

				if (AllowSelectDistributionSet) 

					if  (Status.OpenTransaction
					and  OnRemittanceSelectSequenceForm)

						constraint (first ReceivablePaymentRemittanceHeaderContextRel.ReceivablePayment.Status.Unreleased)
							"PaymentMustBeUnreleasedToEditDistributionSet"

						if (RemittanceApplyDistributionSelectAmount entered)

							LocalCurrentAmount = OpenAmount

							if (InvoiceAmount.CurrencyAmount > 0)
								constraint (RemittanceApplyDistributionSelectAmount > 0)
									"Selected_\AmountMustHaveTheSameSignAs_\Transaction_\Amount"
								constraint (RemittanceApplyDistributionSelectAmount <= LocalCurrentAmount)
									"Selected_\Amount<RemittanceApplyDistributionSelectAmount>CannotExceedThe_\Available_\Amount<LocalCurrentAmount>"
							else
							if (InvoiceAmount.CurrencyAmount < 0)
								constraint (RemittanceApplyDistributionSelectAmount < 0)
									"Selected_\AmountMustHaveTheSameSignAs_\Transaction_\Amount"
								constraint (RemittanceApplyDistributionSelectAmount >= LocalCurrentAmount)
									"Selected_\Amount<RemittanceApplyDistributionSelectAmount>CannotExceedThe_\Available_\Amount<LocalCurrentAmount>"

							if (first ReceivablePaymentRemittanceDetailContextRel exists)
								invoke Update first ReceivablePaymentRemittanceDetailContextRel
									invoked.AppldAmt = RemittanceApplyDistributionSelectAmount
							else
								invoke Create ReceivablePaymentRemittance
									invoked.Company						= ContextReceivableCompanyForContext
									invoked.ReceivablePaymentHeader		= ContextReceivableBatchForContext
									invoked.ReceivablePayment			= ContextReceivableInvoiceForContext
									invoked.ReceivableInvoiceType		= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
									invoked.ReceivableInvoice			= ReceivableInvoiceDetail.Invoice
									invoked.AppldAmt					= RemittanceApplyDistributionSelectAmount
									invoked.InvoiceCompany				= Company
									invoked.InvoiceDetail				= ReceivableInvoiceDetail.PaymentSeq

					if (Status.OpenTransaction
					and OnSettlementDetailSelectSequenceForm)

						constraint (ContextSettlementDetailRel.IntercompanyBillingSettlementHeader.Status.Unreleased)
							"SettlementMustBeUnreleasedToEditDistributionSet"

						if (SettlementDetailLineSelectAmount entered)

							if (ContextSettlementDetailRel.IntercompanyBillingDocumentHeader.NetDueAmount < 0)
								SettlementDetailLineSelectAmount *= -1

							LocalUnappliedRemittanceTotalAmount = sum ReceivablePaymentRemittanceUnappliedForThisInvoiceDetailRel.AppldAmt

							LocalCurrentAmount = OpenAmount  - LocalUnappliedRemittanceTotalAmount

							if (InvoiceAmount.CurrencyAmount > 0)
								constraint (SettlementDetailLineSelectAmount > 0)
									"Selected_\AmountMustHaveTheSameSignAs_\Transaction_\Amount"
								constraint (SettlementDetailLineSelectAmount <= LocalCurrentAmount)
									"Selected_\Amount<DerivedDisplaySignedSettlementDetailLineSelectAmount>CannotExceedThe_\Available_\Amount<DerivedSignedLocalCurrentAmount>"
							else
							if (InvoiceAmount.CurrencyAmount < 0)
								constraint (SettlementDetailLineSelectAmount < 0)
									"Selected_\AmountMustHaveTheSameSignAs_\Transaction_\Amount"
								constraint (SettlementDetailLineSelectAmount >= LocalCurrentAmount)
									"Selected_\Amount<DerivedDisplaySignedSettlementDetailLineSelectAmount>CannotExceedThe_\Available_\Amount<DerivedSignedLocalCurrentAmount>"

							if (ContextSettlementDetailLineRel exists)
								invoke Update ContextSettlementDetailLineRel
									invoked.SelectedAmount = SettlementDetailLineSelectAmount
							else
								invoke Create IntercompanyBillingSettlementDetailLine
									invoked.IntercompanyBillingGroup			= ContextSettlementDetailRel.IntercompanyBillingGroup
									invoked.IntercompanyBillingSettlementHeader	= ContextSettlementDetailRel.IntercompanyBillingSettlementHeader
									invoked.IntercompanyBillingSettlementDetail	= ContextSettlementDetailRel.IntercompanyBillingSettlementDetail
									invoked.IntercompanyBillingDocumentHeader	= ContextSettlementDetailRel.IntercompanyBillingDocumentHeader
									invoked.Type								= "R"
									invoked.InvoiceLine							= ReceivableInvoiceDetail.PaymentSeq
									invoked.SelectedAmount						= SettlementDetailLineSelectAmount
			Exit Rules
				include UpdateReceivableProjectTransaction
				if  (Status.FullyAppliedTransaction)
					invoke	TriggerReceivableInvoice ReceivableInvoiceRel








		UpdateAppliedAmounts is an Update Action

			restricted
			Entrance Rules
				LocalCurrencyTable = ReceivableInvoiceRel.CurrencyTable
				LocalExchangeDate = DerivedExchangeDate
			Exit Rules					




				SortAmount = InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)
				InvoiceAmount.KeepRateAndAmount = true





				if (Status.OpenTransaction
				and OpenAmount = 0)

					Status = Status.FullyAppliedTransaction


					if (CompanyCustomerRel.IsPartOfNationalAcount)
						if  (initiating action = "ReceivablePayment.TransactionRangeApplicationOpen"
						or   initiating action = "ReceivablePayment.ProcessSelectionsOpen"
						or   initiating action = "ReceivablePayment.TransactionRangeApplicationUnreleased"
						or   initiating action = "ReceivablePayment.AutomaticCashApplication"
						or   initiating action = "ReceivablePayment.ProcessSelectionsUnreleased"
						or   initiating action = "ReceivableInvoiceBatch.ReleaseUnreleased"
						or   initiating action = "ReceivableInvoice.Release"
						or   initiating action = "ReceivableInvoice.InterfaceRelease"
						or   initiating action = "ReceivableInvoiceDetail.ApplyMix")

							invoke Delete NationalAccountTransactionRel
						else
						if  (!NationalAccountTransactionInContext)

							invoke Delete NationalAccountTransactionRel
				else
				if ((Status.FullyAppliedTransaction
				or  Status.ClosedTransaction)
				and OpenAmount > 0)

					Status = Status.OpenTransaction

				if (Company.AllowHistoricalApplicationReversal  
				and Status.HistoricalTransaction
				and OpenAmount > 0)
					Status = Status.OpenTransaction


				if (!Status.FullyAppliedTransaction)
					if (CompanyCustomerRel.IsPartOfNationalAcount)
						if (!NationalAccountTransactionRel exists)

							invoke Create NationalAccountTransactionRel
								fill in fields from this instance

								if (CompanyCustomerRel.IsNationalAccountCustomer)
									invoked.NationalAccount.Company		= Company
									invoked.NationalAccount.Customer		= Customer
								if (CompanyCustomerRel.IsInvoicedCustomer)
									invoked.NationalAccount.Company		= CompanyCustomerRel.NationalAccountInvoicedCustomerRel.NationalAccount.NationalAccountGroup.NatCompany
									invoked.NationalAccount.Customer		= CompanyCustomerRel.NationalAccountInvoicedCustomerRel.NationalAccount.NationalAccountGroup.NatCustomer
								invoked.Company										= Company
								invoked.Customer										= Customer

								invoked.NationalAccountTransaction.ReceivableInvoiceDetail.ReceivableInvoiceDetailType			= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
								invoked.NationalAccountTransaction.ReceivableInvoiceDetail.Invoice								= ReceivableInvoiceDetail.Invoice
								invoked.NationalAccountTransaction.ReceivableInvoiceDetail.PaymentSeq							= ReceivableInvoiceDetail.PaymentSeq

								invoked.TransactionAmount								= InvoiceAmount.CurrencyAmount
								invoked.BaseAmount										= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.OpenBaseAmount																			= BaseOpenAmount
								invoked.OpenTransactionAmount																	= OpenAmount
								invoked.OpenSortBaseAmount																		= BaseOpenAmount
						else
							invoke FastUpdate NationalAccountTransactionRel
								fill in fields from this instance
								invoked.TransactionAmount								= InvoiceAmount.CurrencyAmount
								invoked.BaseAmount										= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.OpenBaseAmount																			= BaseOpenAmount
								invoked.OpenTransactionAmount																	= OpenAmount
								invoked.OpenSortBaseAmount																		= BaseOpenAmount

				include UpdateReceivableProjectTransaction
				if (PortalPaymentSelected = true	
				or PortalRequestedAppliedAmount !=0)	
					include UpdatePortalPaymentSelectedAndPortalRequestedAppliedAmount	


		NegotiatedDraftUpdate is an Update Action
			restricted
			bypass field rules
			Action Rules
				Status = Status.FullyAppliedTransaction
				invoke Delete ReceivableProjectTransactionRel


		FastUpdate is an Update Action
			restricted
			bypass field rules
			Exit Rules
				if  (TransientUpdateReceivableProjectTransaction)
					include UpdateReceivableProjectTransaction


		Delete is a Delete Action

			Entrance Rules
				constraint (!HasMarkedAsPaidReceivableApplicationAdjustments)	
					"Receivable_\Invoice<ReceivableInvoiceDetail.Invoice>Has_\MarkedAs_\Paid_\Application_\Adjustments.Cannot_\Delete."	
				invoke Delete ReceivableProjectTransactionRel


		ProrateAndSelectAllForFundApply is an Instance Action 
			default label is "ProrateThisLine"
			valid when (AllowProrateAndSelectAllForRemittanceApply)
			Action Rules
				invoke ProrateAndSelectAllForFundApply first ReceivablePaymentRemittanceDetailContextRel

		RemittanceMatchDistributionsForFundAccounting is an Instance Action 
			default label is "MatchDistributions"
			valid when (AllowMatchDistributionsForRemittanceApply)
			Action Rules
				invoke MatchDistributionsForFundAccounting first ReceivablePaymentRemittanceDetailContextRel

		ProrateAndSelectAllForSettlementDetail is an Instance Action 
			default label is "ProrateThisLine"
			valid when (AllowProrateAndSelectAllForSettlementDetail)
			Action Rules
				invoke ProrateAndSelectAllForSettlementDetail ContextSettlementDetailLineRel

		SettlementMatchDistributionsForFundAccounting is an Instance Action 
			default label is "MatchDistributions"
			valid when (AllowMatchDistributionsForSettlementDetail)
			Action Rules
				invoke SettlementMatchDistributionsForFundAccounting ContextSettlementDetailLineRel

		SelectForRemittanceApply is an Instance Action 
			default label is "SelectOpenAmount"
			valid when (AllowSelectOpenAmountForRemittanceApply)
			Action Rules
				invoke Create ReceivablePaymentRemittance
					invoked.Company						= ContextReceivableCompanyForContext
					invoked.ReceivablePaymentHeader		= ContextReceivableBatchForContext
					invoked.ReceivablePayment			= ContextReceivableInvoiceForContext
					invoked.ReceivableInvoiceType		= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.ReceivableInvoice			= ReceivableInvoiceDetail.Invoice
					invoked.AppldAmt					= OpenAmount
					invoked.InvoiceCompany				= Company
					invoked.InvoiceDetail				= ReceivableInvoiceDetail.PaymentSeq

		SelectForSettlementDetail is an Instance Action 
			default label is "SelectAvailableAmount"
			valid when (AllowSelectOpenAmountForSettlementDetail)
			Action Rules

				invoke Create IntercompanyBillingSettlementDetailLine
					invoked.IntercompanyBillingGroup			= ContextSettlementDetailRel.IntercompanyBillingGroup
					invoked.IntercompanyBillingSettlementHeader	= ContextSettlementDetailRel.IntercompanyBillingSettlementHeader
					invoked.IntercompanyBillingSettlementDetail	= ContextSettlementDetailRel.IntercompanyBillingSettlementDetail
					invoked.IntercompanyBillingDocumentHeader	= ContextSettlementDetailRel.IntercompanyBillingDocumentHeader
					invoked.Type								= "R"
					invoked.InvoiceLine							= ReceivableInvoiceDetail.PaymentSeq
					if (ContextSettlementDetailRel.IntercompanyBillingDocumentHeader.NetDueAmount < 0)
						invoked.SelectedAmount						= DerivedSignedSettlementDetailLineSelectAvailableAmount * -1
					else
						invoked.SelectedAmount						= DerivedSignedSettlementDetailLineSelectAvailableAmount


		UnselectForRemittanceApply is an Instance Action 
			default label is "Unselect"
			valid when (AllowUnselectForRemittanceApply)
			Action Rules
				invoke Delete first ReceivablePaymentRemittanceDetailContextRel


		UnselectForSettlementDetail is an Instance Action 
			default label is "Unselect"
			valid when (AllowUnselectForSettlementDetail)
			Action Rules
				invoke Delete ContextSettlementDetailLineRel


		SelectForApplicationNoOperator is an Instance Action
			default label is "SelectOpenAmountForApplication"
			valid when (SelectForApplicationNoOperator)
			Action Rules
				if (!HasReceivableApplicationSelect)	
					invoke SelectOpenAmountForApplication
						invoked.ApplyOperator = actor


		SelectForApplicationOperator is an Instance Action
			default label is "SelectOpenAmountForApplication"
			valid when (SelectForApplicationOperator)
			Parameters
				ApplyOperator	is like ReceivableOperator
			Action Rules
				if (!HasReceivableApplicationSelect)	
					invoke SelectOpenAmountForApplication
						invoked.ApplyOperator = ApplyOperator


		SelectOpenAmountForApplication is an Instance Action
			restricted

			Parameters
				ApplyGeneralLedgerDate	is Date
					default label is "ApplyGlobalLedgerDate"
				ApplyOperator			is a ReceivableOperator

			Parameter Rules
				ApplyOperator
					default to actor
					if (CashApplicationOperatorRequired)
						required
							"OperatorIsRequired"
						constraint (ApplyOperator exists)
							"OperatorDoesNotExist"
						constraint (ApplyOperator.ActiveStatus.Active)
							"OperatorIsNotActive"

			Action Rules
				if (ReceivablePayment.IsPrepaymentTaxWithHolding)			
					constraint (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						"PaymentHasThePrepaymentTax;CreditMemoCannotBeSelectedForProcessing"

				constraint (!ReceivableApplicationSelectRel exists)
					"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"

				constraint (ReceivablePayment.ReceivablePayment entered)
					"MustSelectPaymentForApplication"

				SelectedApplicationAmount					 = DerivedSelectApplicationAmount

				if  (CompanyCustomerRel.DiscountAdjustmentReason entered
				and  DerivedSelectDiscountAmount entered)
					SelectedApplicationAmount				-= DerivedSelectDiscountAmount

				if (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				and !Company.PaymentOverApplication
				and !Company.AllowZeroPayments
				and  SelectedApplicationAmount > ContextReceivablePaymentRel.CashApplicationPendingOpen)
					SelectedApplicationAmount				= ContextReceivablePaymentRel.CashApplicationPendingOpen

			Exit Rules
				invoke InvoiceSelection
					if  (ReceivablePayment exists)
						invoked.ReceivablePaymentGroup.Company						= ContextReceivablePaymentRel.Company 
						invoked.ReceivablePaymentGroup.ReceivablePaymentHeader		= ContextReceivablePaymentRel.ReceivablePaymentHeader
						invoked.ReceivablePaymentGroup.ReceivablePayment			= ContextReceivablePaymentRel.ReceivablePayment




					invoked.PrmAmount												= SelectedApplicationAmount
					invoked.PrmCurrency												= DerivedDisplayCurrency
					invoked.ApplicationGeneralLedgerDate							= DerivedGeneralLedgerDate
					invoked.ApplyOperator											= ApplyOperator
					if  (DerivedSelectDiscountAmount entered)
						invoked.PrmAdjustAmount										= DerivedSelectDiscountAmount
						invoked.PrmAdjustReason										= CompanyCustomerRel.DiscountAdjustmentReason


		LineItemSelectForApplicationNoOperator is an Instance Action
			default label is "SelectOpenAmountForApplication"
			valid when (SelectForApplicationNoOperator)
			Action Rules
				if (!HasReceivableApplicationSelect)	
					invoke LineItemSelection
						invoked.ApplyOperator = actor


		LineItemSelectForApplicationOperator is an Instance Action
			default label is "SelectOpenAmountForApplication"
			valid when (SelectForApplicationOperator)
			Parameters
				ApplyOperator			is like ReceivableOperator
			Action Rules
				if (!HasReceivableApplicationSelect)	
					invoke LineItemSelection
						invoked.ApplyOperator = ApplyOperator


		LineItemSelection is an Instance Action
			restricted

			Parameters
				ApplyGeneralLedgerDate is Date
					default label is "ApplyGlobalLedgerDate"
				ApplyOperator			is a ReceivableOperator
			Parameter Rules
				ApplyGeneralLedgerDate
					initial value is ReceivablePayment.GeneralLedgerDate 	
					initial value is current corporate date
				ApplyOperator
					default to actor
					if (CashApplicationOperatorRequired)	
						required
							"OperatorIsRequired"
						constraint (ApplyOperator exists)
							"OperatorDoesNotExist"
						constraint (ApplyOperator.ActiveStatus.Active)
							"OperatorIsNotActive"
			Action Rules
				if (ReceivablePayment.IsPrepaymentTaxWithHolding)	
					constraint (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						"PaymentHasThePrepaymentTax;CreditMemoCannotBeSelectedForProcessing"

				constraint (!ReceivableApplicationSelectRel exists)
					"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"

				constraint (ReceivablePayment entered)
					"MustSelectPaymentForApplication"

				LineSelectedApplicationAmount				 = DerivedLineSelectApplicationAmount

				if (CompanyCustomerRel.DiscountAdjustmentReason entered
				and DerivedLineSelectDiscountAmount entered)
					LineSelectedAdjustmentReason			 = CompanyCustomerRel.DiscountAdjustmentReason
					LineSelectedAdjustedAmount				 = DerivedLineSelectDiscountAmount

				if ((LineSelectedAdjustmentReason			 = CompanyCustomerRel.DiscountAdjustmentReason)
				and (LineSelectedAdjustedAmount				 = DerivedLineSelectDiscountAmount)
				and (LineSelectedApplicationAmount			 = DerivedLineSelectApplicationAmount))
					LineSelectedApplicationAmount			 -= LineSelectedAdjustedAmount

				if (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				and !Company.PaymentOverApplication
				and  LineSelectedApplicationAmount > ReceivablePayment.CashApplicationPendingOpen)
					LineSelectedApplicationAmount			 = ReceivablePayment.CashApplicationPendingOpen

				if (DerivedLineSelectDiscountAmount entered)
					constraint (DerivedSelectDiscountReason entered)
						"AdjustmentReasonRequiredIfAdjustmentAmountEntered"
				if (DerivedSelectDiscountReason entered)
					constraint (DerivedLineSelectDiscountAmount entered)
						"AdjustmentAmountRequiredIfAdjustmentReasonEntered"

			Exit Rules
				invoke Create ReceivableApplicationSelect
					invoked.Company													 = ContextCompany 
					invoked.ReceivablePaymentHeader									 = ReceivablePaymentHeader
					invoked.ReceivablePayment										 = ReceivablePayment
					invoked.ReceivableApplicationSelect.TransactionCompany			 = Company
					invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail		 = ReceivableInvoiceDetail
					invoked.EnteredAmount											 = LineSelectedApplicationAmount
					invoked.ApplicationCurrency										 = DerivedDisplayCurrency
					invoked.ReceivableOperator										 = ApplyOperator
					invoked.GeneralLedgerDate										 = ApplyGeneralLedgerDate








					if (LineSelectedAdjustedAmount entered
					or  LineSelectedAdjustmentReason entered)
						invoked.SelectedAdjustmentReason							 = LineSelectedAdjustmentReason
						invoked.SelectedAdjustedAmount								 = LineSelectedAdjustedAmount


		InvoiceSelection	is an Instance Action		
			restricted

			Parameters
				ReceivablePaymentGroup
				PrmAmount									is an InternationalAmount
				PrmCurrency									is a Currency
				PrmAdjustAmount								is an InternationalAmount
				PrmAdjustReason								is like ReceivableReason
				ApplicationGeneralLedgerDate				is Date
					default label is "ApplicationGlobalLedgerDate"
				ApplyOperator								is a ReceivableOperator
				RangeApplication							is Boolean
				CashApplicationOrder						is Alpha size 1
					States
						Transaction		value is "T"
						Project			value is "P"

			Parameter Rules
				PrmAdjustAmount
					if (PrmAdjustReason not entered)
						cannot be entered
							"ReasonCodeRequiredIfAdjustAmountEntered"
					else
						required
							"AdjustmentAmountRequiredIfAdjustmentReasonEntered"
				PrmAdjustReason
					if (PrmAdjustAmount entered)
						required
							"AdjustmentAmountRequiredIfAdjustmentReasonEntered"

			Action Rules


				constraint (PrmAmount entered)
					"ApplicationAmountNotEntered"







				LocalApplicationAmount				 = PrmAmount
				LocalDiscountAmount					 = PrmAdjustAmount

				if  (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				and  !ReceivablePaymentGroup.Company.PaymentOverApplication
				and  LocalApplicationAmount > ReceivablePaymentGroup.ReceivablePayment.CashApplicationPendingOpen)
					if (!ReceivablePaymentGroup.ReceivablePayment.IsZeroPayment)
						LocalApplicationAmount							= ReceivablePaymentGroup.ReceivablePayment.CashApplicationPendingOpen

				if (SummarizeDetail
				and !RangeApplication)

					if (CashApplicationOrder.Project
					and !AlternateReceivableInvoiceType.Mixed)
						if (IsLineSelect)
							for each SameInvoicePaymentSeqByCustomerProjectRel
								include CreateApplicationSelectForSummarizeDetail
						else
							for each SameInvoiceByCustomerProjectRel
								include CreateApplicationSelectForSummarizeDetail

					else
						if (IsLineSelect)
							for each SameInvoiceWithPaymentSeqRel
								include CreateApplicationSelectForSummarizeDetail
						else
							for each SameInvoiceRel
								include CreateApplicationSelectForSummarizeDetail

				else

					invoke Create ReceivableApplicationSelect
						invoked.Company													 = ReceivablePaymentGroup.Company
						invoked.ReceivablePaymentHeader									 = ReceivablePaymentGroup.ReceivablePaymentHeader
						invoked.ReceivablePayment										 = ReceivablePaymentGroup.ReceivablePayment
						invoked.ReceivableApplicationSelect.TransactionCompany			 = Company
						invoked.ReceivableApplicationSelect.ReceivableInvoiceDetail		 = ReceivableInvoiceDetail
						invoked.EnteredAmount											 = LocalApplicationAmount
						invoked.ApplicationCurrency										 = PrmCurrency
						invoked.ReceivableOperator										 = ApplyOperator


						invoked.GeneralLedgerDate										 = ApplicationGeneralLedgerDate









						if  (PrmAdjustAmount entered
						and  PrmAdjustReason entered)
							invoked.SelectedAdjustmentReason							 = PrmAdjustReason
							invoked.SelectedAdjustedAmount								 = LocalDiscountAmount
						if (Company.OverApplyInvoice
						and PrmAdjustReason = Company.OverApplyReasonCode)
							invoked.TransientOverApplyInvoice							 = true


		CreateReceivableInvoiceObligation	is an Instance Action
			restricted
			Parameters
				Company
				ReceivableInvoiceType
				ReceivableInvoice
			Action Rules
				invoke Create ReceivableInvoiceObligation
					fill in fields from this instance
					invoked.Company					 = Company
					invoked.ReceivableInvoiceType	 = ReceivableInvoiceType
					invoked.ReceivableInvoice		 = ReceivableInvoice
					Origin							 = Origin.Obligation


		Unselect	is an Instance Action
			valid when (ValidForUnselect)
			Action Rules
				if (SummarizeDetail)
					for each SameInvoiceRel
						invoke Purge each.ReceivableApplicationSelectRel
				else
					invoke Purge ReceivableApplicationSelectRel


		UnselectLineItem	is an Instance Action
			default label is "Unselect"
			valid when (HasReceivableApplicationSelect)
			Action Rules
				invoke Purge ReceivableApplicationSelectRel


		MatchDistributionsForFundAccounting is an Instance Action 
			default label is "MatchDistributions"
			valid when (AllowMatchDistributionsForFundAccounting)
			Action Rules
				if (SummarizeDetail)
					confirmation required
						"AllSelectionsForThisInvoiceWithAnIncompleteDistributionSetWillBeMatched.Continue?"
					for each SameInvoiceRel
						if (each.ReceivableApplicationSelectRel exists
						and each.ReceivableApplicationSelectRel.TransientDistributionSetState.OutOfBalance)
							invoke MatchDistributionsForFundAccounting each.ReceivableApplicationSelectRel
				else
					invoke MatchDistributionsForFundAccounting ReceivableApplicationSelectRel


		ProrateAndSelectAll is an Instance Action 
			default label is "ProrateDistributions"
			valid when (AllowProrateAndSelectAll)
			Action Rules
				if (SummarizeDetail)
					confirmation required
						"AllSelectionsForThisInvoiceWithAnIncompleteDistributionSetWillBeProrated.Continue?"
					for each SameInvoiceRel
						if (each.ReceivableApplicationSelectRel exists
						and each.ReceivableApplicationSelectRel.TransientDistributionSetState.OutOfBalance)
							invoke ProrateAndSelectAll each.ReceivableApplicationSelectRel
				else
					invoke ProrateAndSelectAll ReceivableApplicationSelectRel


		UpdateApplicationGeneralLedgerDates	is an Instance Action
			default label is "UpdateApplicationGlobalLedgerDates"
			completion message is "GlobalLedgerDatesHaveBeenUpdated"
			valid when (HasUnpostedCreditApplications)
			Parameters
				PrmGeneralLedgerDate		is Date
					default label is "GlobalLedgerDate"
			Action Rules
				for each UnpostedCreditApplicationRel
					if (each.Status.UnreleasedCashApplication)
						invoke UnreleasedCashApplication.Update each
							invoked.GeneralLedgerDate		 = PrmGeneralLedgerDate
					else
					if (each.Status.RequiresAuditListing)
						invoke RequiresAuditListing.Update each
							invoked.GeneralLedgerDate		 = PrmGeneralLedgerDate
					else
					if (each.Status.AvailableForPosting)
						invoke AvailableForPosting.Update each
							invoked.GeneralLedgerDate		 = PrmGeneralLedgerDate


		ApplyToPaymentNoOperator	is an Instance Action
			default label is "ApplyToPayment"
			valid when (SelectForApplicationNoOperator)
			Action Rules
				invoke ApplyToPayment
					invoked.ApplyOperator = actor


		ApplyToPaymentOperator	is an Instance Action
			default label is "ApplyToPayment"
			valid when (SelectForApplicationOperator)
			Parameters
				ApplyOperator		is like ReceivableOperator
			Action Rules
				invoke ApplyToPayment
					invoked.ApplyOperator = ApplyOperator


		ApplyToPayment	is an Instance Action
			restricted

			Parameters
				ApplyGeneralLedgerDate  is Date
					default label is "ApplyGlobalLedgerDate"
				ApplyOperator		is a ReceivableOperator

			Parameter Rules
				ApplyOperator
					default to actor
					if  (CashApplicationOperatorRequired)
						required
							"OperatorIsRequired"
						constraint (ApplyOperator exists)
							"OperatorDoesNotExist"
						constraint (ApplyOperator.ActiveStatus.Active)
							"OperatorIsNotActive"

			Action Rules
				if (ReceivablePayment.IsPrepaymentTaxWithHolding)			
					constraint (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						"PaymentHasThePrepaymentTax;CreditMemoCannotBeAppliedToAPayment"

				constraint (!ReceivableApplicationSelectRel exists)
					"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"

				constraint (ReceivablePayment entered)
					"MustSelectPaymentForApplication"

				if (CompanyCustomerRel.DiscountAdjustmentReason entered
				and DerivedSelectDiscountAmount entered)
					AmountToApply							= DerivedSelectApplicationAmount - DerivedSelectDiscountAmount
				else
					AmountToApply							= DerivedSelectApplicationAmount

				if (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo
				and !Company.PaymentOverApplication
				and  AmountToApply > ReceivablePayment.CashApplicationPaymentOpen)
					AmountToApply							= ReceivablePayment.CashApplicationPaymentOpen

				constraint (AmountToApply entered)
					"ApplicationAmountNotEntered"

				invoke ApplyInvoiceToPayment
					invoked.ReceivablePaymentGroup.Company							= ContextCompany 
					invoked.ReceivablePaymentGroup.ReceivablePaymentHeader			= ReceivablePaymentHeader
					invoked.ReceivablePaymentGroup.ReceivablePayment				= ReceivablePayment
					invoked.PrmAmount												= AmountToApply
					invoked.PrmCurrency												= DerivedDisplayCurrency
					invoked.ApplicationGeneralLedgerDate							= DerivedGeneralLedgerDate
					invoked.ApplyOperator											= ApplyOperator	
					if (CompanyCustomerRel.DiscountAdjustmentReason entered
					and DerivedSelectDiscountAmount entered)
						invoked.PrmAdjustAmount										= DerivedSelectDiscountAmount
						invoked.PrmAdjustReason										= CompanyCustomerRel.DiscountAdjustmentReason


		QuickWriteoff is an Instance Action
			valid when (ValidForQuickWriteOff) 
			Parameters
				Amount											is an InternationalAmount
				Type											is a ReceivableReasonType
				Reason											is a ReceivableReason
				PrmGeneralLedgerDate							is Date
				PrmOperator										is like ReceivableOperator
				PrmWriteoffARIncomeWithholdingCode				is AlphaUpper size 10	
					default label is "IncomeWithholdingCode"	
				PrmWriteoffARIncomeWithholdingDocumentNumber	is AlphaUpper size 16	
					default label is "IncomeWithholdingDocumentNumber"	
				PrmAttachment									is an Attachment
					default label is "Attachment"
			Parameter Rules
				Amount
					required
					initial value is DerivedOpenAmount
					constraint (Amount > 0)
						"WriteOffAmountMustBeGreaterThanZero"
					if (SummarizeDetail)
						constraint (Amount <= DerivedOpenAmount)
							"WriteOffAmountCannotExceedOpenAmount"
					else
						constraint (Amount <= OpenAmount)
							"WriteOffAmountCannotExceedOpenAmount"

				Type
					default to "AD"
					initial value is "AD"

				Reason
					required
					constraint (Reason != "CURR")
						"CURRIsAReservedReasonCode"
					constraint (Reason.ReceivableAdjustmentReasonType.OverShort or Reason.ReceivableAdjustmentReasonType.TaxWithholding)	
						"ReasonCodeMustBeType_\Over_\ShortOr_\Tax_\WithholdingForWriteOff"	//IEFIN-86538 added to allow TaxWithholding- was"ReasonCodeMustBeTypeOver/ShortForWriteOff"	

				PrmOperator
					default to actor
					if (Company.CashOperatorRequired)
						LocalOperator		= PrmOperator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"

				PrmWriteoffARIncomeWithholdingCode	
					if (Reason.ReceivableAdjustmentReasonType.TaxWithholding)	
						required	
							"AR_\Income_\Withholding_\CodeIsRequiredWith_\Adjustment_\Reason<Reason>,SinceItIsDefinedAs_\Tax_\Withholding"	
					constraint (Reason.ReceivableAdjustmentReasonType.TaxWithholding)	
						"AR_\Income_\Withholding_\CodeCanNotBePopulatedWith_\Adjustment_\Reason<Reason>,SinceItIsNotDefinedAs_\Tax_\Withholding"	

				PrmWriteoffARIncomeWithholdingDocumentNumber	
					if (Reason.ReceivableAdjustmentReasonType.TaxWithholding)	
						required	
							"AR_\Income_\Withholding_\Document_\NumberIsRequiredWith_\Adjustment_\Reason<Reason>,SinceItIsDefinedAs_\Tax_\Withholding"	
					constraint (Reason.ReceivableAdjustmentReasonType.TaxWithholding)	
						"AR_\Income_\Withholding_\Document_\NumberCanNotBePopulatedWith_\Adjustment_\Reason<Reason>,SinceItIsNotDefinedAs_\Tax_\Withholding"	

				PrmAttachment
					if (Reason.AttachmentRequired)
						required
							"Receivable_\Reason_\CodeIsSetForAttachmentRequired;AddAnAttachment"

					if (!Reason.AttachmentRequired)
						cannot be entered
							"Receivable_\Reason_\CodeIsNotSetForAttachmentRequired;RemoveTheAttachment"

			Action Rules
				constraint (!IsOverApplied)
					"CannotWriteOffWhenOverApplied"

				constraint (!Origin.IntercompanyBilling) 
					"CannotWriteoffIntercompanyBillingOriginTransaction,UseMarkAsPaidFunctionality"

				if (SummarizeDetail)
					constraint (!ARToAPApplicationSelectSumLineRel exists)
						"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"
				else
					constraint (!ARToAPApplicationSelectRel exists)
						"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"

				constraint (!PortalPaymentSelected)	
					"Cannot_\Quick_\Write_\Off_\Receivable_\Invoice_\Detail<ReceivableInvoiceDetail.Invoice>_-_<ReceivableInvoiceDetail.ReceivableInvoiceDetailType>_-_<ReceivableInvoiceDetail.PaymentSeq>AsItIsCurrently_\Portal_\Payment_\Selected.ConfirmIfPortalPaymentIsBeingProcessed.IfNot,Run_\Delete_\Idle_\Portal_\Payment_\Selected_\ActionFrom_Customer_Group's_\Portal_\Payment_\Selected_\Invoice_\Detail_\Records_\To_\Watch_\Panel"

				invoke ApplyInvoice
					invoked.Writeoff												= true
					invoked.ReceivableInvoiceDetailGroup.Company					= Company
					invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetail
					invoked.PrmAdjustAmount											= Amount
					invoked.PrmAdjustReason											= Reason
					invoked.ApplyOperator											= PrmOperator
					if (PrmGeneralLedgerDate not entered)




						invoked.ApplicationGeneralLedgerDate						= DerivedGeneralLedgerDate	
					else
						invoked.ApplicationGeneralLedgerDate						= PrmGeneralLedgerDate
					if (PrmWriteoffARIncomeWithholdingCode entered)	
						invoked.PrmWriteoffARIncomeWithholdingCode					= PrmWriteoffARIncomeWithholdingCode	
					if (PrmWriteoffARIncomeWithholdingDocumentNumber entered)	
						invoked.PrmWriteoffARIncomeWithholdingDocumentNumber		= PrmWriteoffARIncomeWithholdingDocumentNumber	
					if (Reason.AttachmentRequired
					and PrmAttachment entered)
						invoked.PrmAttachment										= PrmAttachment





























			Exit Rules
				invoke TriggerReceivableTransaction ReceivableInvoiceRel




		WriteOff is an Instance Action
			valid when (ValidForQuickWriteOff) 

			Parameters
				PrmOperator							is like ReceivableOperator
				PrmGeneralLedgerDate				is Date
				PrmReceivableDistributionArray		is a ReceivableDistributionArray

				PrmTransactionCodeBlock1			is a TransactionCodeBlock	
				PrmTransactionCodeBlock2			is a TransactionCodeBlock
				PrmTransactionCodeBlock3			is a TransactionCodeBlock
				PrmTransactionCodeBlock4			is a TransactionCodeBlock
				PrmTransactionCodeBlock5			is a TransactionCodeBlock
				PrmTransactionCodeBlock6			is a TransactionCodeBlock
				PrmTransactionCodeBlock7			is a TransactionCodeBlock
				PrmTransactionCodeBlock8			is a TransactionCodeBlock
				PrmTransactionCodeBlock9			is a TransactionCodeBlock
				PrmTransactionCodeBlock10			is a TransactionCodeBlock


			Local Fields
				I2 			is Numeric 3
				I3 			is Numeric 3

			Parameter Rules
				PrmOperator
					default to actor
					if (Company.CashOperatorRequired)
						LocalOperator		= PrmOperator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"

				PrmGeneralLedgerDate	
					initial value is DerivedGeneralLedgerDate	
					default to DerivedGeneralLedgerDate	











				PrmTransactionCodeBlock1	
					BypassProjectDateEdit = true	

				PrmReceivableDistributionArray
					LocalGeneralLedgerSystemCode = "AR"
					BypassProjectDateEdit = true

					initialize I1
					initialize I2
					I1 += 1
					while (I1 < 11)	
						if (I1=1)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock1
						else
						if (I1=2)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock2
						else
						if (I1=3)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock3
						else
						if (I1=4)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock4
						else
						if (I1=5)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock5
						else
						if (I1=6)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock6
						else
						if (I1=7)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock7
						else
						if (I1=8)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock8
						else
						if (I1=9)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock9
						else
						if (I1=10)
							PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock = PrmTransactionCodeBlock10

						if (I2 >= 1
						and PrmReceivableDistributionArray.ReceivableDistributionInput[I1] entered)
							initialize I3
							I3 = I2
							constraint ((PrmReceivableDistributionArray.ReceivableDistributionInput[I2].ReasonCode entered
							or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].TransactionAmount entered)
							or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].Description entered
							or PrmReceivableDistributionArray.ReceivableDistributionInput[I2].FinanceCodeBlock entered)
								"Occurrence<I3>MustHaveTheValueEntered"
						I2 = I1
						I1 += 1































































			Action Rules
				constraint (!IsOverApplied)
					"CannotWriteOffWhenOverApplied"

				constraint (!HasMarkedAsPaidReceivableApplicationAdjustments)	
					"Receivable_\Invoice<ReceivableInvoiceDetail.Invoice>Has_\MarkedAs_\Paid_\Application_\Adjustments.CannotWriteOff."	
				if (PrmGeneralLedgerDate not entered)




					PrmGeneralLedgerDate = DerivedGeneralLedgerDate	

				constraint (!Origin.IntercompanyBilling) 
					"CannotWriteoffIntercompanyBillingOriginTransaction,UseMarkAsPaidFunctionality"

				constraint (!PortalPaymentSelected)	
					"Cannot_\Write_\Off_\Receivable_\Invoice_\Detail<ReceivableInvoiceDetail.Invoice>_-_<ReceivableInvoiceDetail.ReceivableInvoiceDetailType>_-_<ReceivableInvoiceDetail.PaymentSeq>AsItIsCurrently_\Portal_\Payment_\Selected.ConfirmIfPortalPaymentIsBeingProcessed.IfNot,Run_\Delete_\Idle_\Portal_\Payment_\Selected_\ActionFrom_Customer_Group's_\Portal_\Payment_\Selected_\Invoice_\Detail_\Records_\To_\Watch_\Panel"

				constraint (!ReceivableApplicationSelectRel exists)
					"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"

				if (Company.VendorCreateAndInterfaceToAP)
					if (SummarizeDetail)
						constraint (!ARToAPApplicationSelectSumLineRel exists)
							"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"
					else
						constraint (!ARToAPApplicationSelectRel exists)
							"CannotWriteOff;UnreleasedARToAPInterfaceRecordsExist"

				initialize WorkTotal
				I1 = 1
				while (I1 < 11)
					if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode entered
					or PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
						constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode entered)
							"ReasonCodeIsRequired"
						constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
							"TransactionAmountIsRequired"
						constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount <= DerivedOpenAmount)
							"WriteOffsCannotExceedOpenAmountOf<DerivedOpenAmount>"
						constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode.ReceivableAdjustmentReasonType.OverShort)
							"ReasonCodeMustBeTypeOver/ShortForWriteOff"
						if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode.AttachmentRequired)
							constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Attachment entered)
								"Receivable_\Reason_\Code_\<PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode>AtOccurence[<I1>]IsSetForAttachmentRequired;AddAnAttachment"
						if (!PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode.AttachmentRequired)
							constraint (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Attachment not entered)
								"Receivable_\Reason_\Code_\<PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode>AtOccurence[<I1>]IsNotSetForAttachmentRequired;RemoveTheAttachment"
						WorkTotal += PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount

					I1 +=1

				constraint (WorkTotal <= DerivedOpenAmount)
					"TotalWriteOffsCannotExceedOpenAmount"

				I1 = 1
				while (I1 < 11)
					if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode entered
					or PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)

						invoke ApplyInvoice
							invoked.Writeoff												= true
							if (PrmGeneralLedgerDate not entered)
								invoked.ApplicationGeneralLedgerDate						= DerivedGeneralLedgerDate	
							else	
								invoked.ApplicationGeneralLedgerDate						= PrmGeneralLedgerDate	
							invoked.ApplyOperator											= PrmOperator
							invoked.ReceivableInvoiceDetailGroup.Company					= Company
							invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetail
							invoked.PrmAdjustAmount											= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount
							invoked.PrmAdjustReason											= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode
							invoked.PrmAdjustAccount										= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock
							invoked.PrmComment												= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Description	
							if (PrmReceivableDistributionArray.ReceivableDistributionInput[I1].ReasonCode.AttachmentRequired)
								invoked.PrmAttachment										= PrmReceivableDistributionArray.ReceivableDistributionInput[I1].Attachment
					I1 +=1

			Exit Rules
				invoke TriggerReceivableTransaction ReceivableInvoiceRel




		ApplyToCredit	is an Instance Action
			valid when (AvailableForCreditApplication)

			Action Rules
				constraint (!ReceivableApplicationSelectRel exists)
					"Invoice<ReceivableInvoiceDetail.Invoice>AlreadySelectedForProcessing"

				constraint (ContextCreditMemo entered)
					"MustSelectCreditMemoForApplication"

				constraint (!ContextCreditMemo.ReceivableApplicationSelectRel exists)
					"CreditMemoAlreadySelectedForProcessing"

				constraint (!ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
					"CannotApplyCreditMemoToCreditMemo"

				include EditAllowSelectDistributionSetForApplyCredit

				AmountToAdjust								= DerivedSelectDiscountAmount
				AmountToAdjustReason						= CompanyCustomerRel.DiscountAdjustmentReason
				if (AmountToAdjustReason not entered
				or  AmountToAdjust not entered)
					initialize AmountToAdjust
					initialize AmountToAdjustReason

				AmountToApply								= DerivedSelectApplicationAmount - AmountToAdjust 

				if (AmountToApply > ContextCreditMemo.DerivedOpenAmount)
					AmountToApply							= ContextCreditMemo.DerivedOpenAmount

				constraint (AmountToApply entered)
					"ApplicationAmountNotEntered"

				invoke ApplyInvoice



					invoked.ApplicationGeneralLedgerDate	= TransientGeneralLedgerDate	
					invoked.ReceivableInvoiceDetailGroup.Company					= ContextCreditMemo.Company
					invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ContextCreditMemo.ReceivableInvoiceDetail
					invoked.PrmAmount												= AmountToApply
					invoked.PrmAdjustAmount											= AmountToAdjust
					invoked.PrmAdjustReason											= AmountToAdjustReason
					invoked.PrmCreditAsFromAgent									= true 


		ApplyInvoiceToPayment	is an Instance Action
			restricted

			Parameters
				ReceivablePaymentGroup
				PrmAmount									is an InternationalAmount
				PrmAdjustAmount								is an InternationalAmount
				PrmAdjustReason								is like ReceivableReason
				RangeApplication							is Boolean
				ApplicationGeneralLedgerDate				is Date
					default label is "ApplicationGlobalLedgerDate"
				ApplyOperator								is a ReceivableOperator
				PrmCurrency									is a Currency
				CashApplicationOrder						is Alpha size 1
					States
						Transaction		value is "T"
						Project			value is "P"

			Action Rules

				LocalApplicationAmount		 = PrmAmount
				LocalDiscountAmount			 = PrmAdjustAmount

				if  (!ReceivablePaymentGroup.Company.PaymentOverApplication
				and   LocalApplicationAmount > ReceivablePaymentGroup.ReceivablePayment.CashApplicationPaymentOpen)
					LocalApplicationAmount							= ReceivablePaymentGroup.ReceivablePayment.CashApplicationPaymentOpen

				if (SummarizeDetail
				and !RangeApplication)
					if (ReceivablePaymentGroup entered
					and CashApplicationOrder.Project
					and !AlternateReceivableInvoiceType.Mixed)
						for each SameInvoiceByCustomerProjectRel
							if  (each.Status.OpenTransaction
							and (LocalApplicationAmount > 0
							or   LocalDiscountAmount	> 0))


								if (LocalDiscountAmount >= each.OpenAmount)
									initialize WorkAmount
									Work2Amount										= each.OpenAmountDisplayCurrency
								else
								if ((LocalApplicationAmount + LocalDiscountAmount) < each.OpenAmountDisplayCurrency)
									WorkAmount										= LocalApplicationAmount
									Work2Amount										= LocalDiscountAmount
								else
									WorkAmount										= each.OpenAmountDisplayCurrency - LocalDiscountAmount
									Work2Amount										= LocalDiscountAmount

								invoke CreateReceivableApplication each
									invoked.ReceivablePaymentGroup									= ReceivablePaymentGroup
									invoked.ApplicationGeneralLedgerDate							= ApplicationGeneralLedgerDate
									invoked.ApplyOperator											= ApplyOperator
									invoked.PrmAmount												= WorkAmount
									invoked.PrmCurrency												= PrmCurrency
									if (LocalDiscountAmount entered)
										invoked.PrmAdjustReason										= PrmAdjustReason
										invoked.PrmAdjustAmount										= Work2Amount

								LocalApplicationAmount												-= WorkAmount
								LocalDiscountAmount													-= Work2Amount
					else
						for each SameInvoiceRel
							if  (each.Status.OpenTransaction
							and (LocalApplicationAmount > 0
							or   LocalDiscountAmount	> 0))


								if (LocalDiscountAmount >= each.OpenAmountDisplayCurrency)
									initialize WorkAmount
									Work2Amount										= each.OpenAmountDisplayCurrency
								else
								if ((LocalApplicationAmount + LocalDiscountAmount) < each.OpenAmountDisplayCurrency)
									WorkAmount										= LocalApplicationAmount
									Work2Amount										= LocalDiscountAmount
								else
									WorkAmount										= each.OpenAmountDisplayCurrency - LocalDiscountAmount
									Work2Amount										= LocalDiscountAmount

								invoke CreateReceivableApplication each
									invoked.ReceivablePaymentGroup									= ReceivablePaymentGroup
									invoked.ApplicationGeneralLedgerDate							= ApplicationGeneralLedgerDate
									invoked.ApplyOperator											= ApplyOperator
									invoked.PrmAmount												= WorkAmount
									invoked.PrmCurrency												= PrmCurrency
									if (LocalDiscountAmount entered)
										invoked.PrmAdjustReason										= PrmAdjustReason
										invoked.PrmAdjustAmount										= Work2Amount

								LocalApplicationAmount												-= WorkAmount
								LocalDiscountAmount													-= Work2Amount
				else
					invoke CreateReceivableApplication
						invoked.ReceivablePaymentGroup									= ReceivablePaymentGroup
						invoked.ApplicationGeneralLedgerDate							= ApplicationGeneralLedgerDate
						invoked.ApplyOperator											= ApplyOperator
						invoked.PrmAmount												= LocalApplicationAmount
						invoked.PrmCurrency												= PrmCurrency
						if (PrmAdjustAmount entered
						or  PrmAdjustReason entered)
							invoked.PrmAdjustReason										= PrmAdjustReason
							invoked.PrmAdjustAmount										= LocalDiscountAmount




		ApplyInvoice is an Instance Action
			restricted

			Parameters
				ReceivableInvoiceDetailGroup
				PrmAmount										is an InternationalAmount
				PrmAdjustAmount									is an InternationalAmount
				PrmAdjustReason									is like ReceivableReason
				PrmReceivableReasonType							is a ReceivableReasonType	
				PrmReceivableAdjustmentReasonType				is a ReceivableAdjustmentReasonType	
				ApplicationGeneralLedgerDate					is Date
					default label is "ApplicationGlobalLedgerDate"
				ApplyOperator									is a ReceivableOperator
				Writeoff										is Boolean
				PrmCreditAsFromAgent							is Boolean 
				PrmMarkAsPaidQuickWriteoff						is Boolean 
				PrmAdjustAccount								is a FinanceCodeBlock
				PrmComment										is a Description
				PrmWriteoffARIncomeWithholdingCode				is AlphaUpper size 10	
				PrmWriteoffARIncomeWithholdingDocumentNumber	is AlphaUpper size 16	
				PrmAttachment									is an Attachment

			Action Rules
				if (!Writeoff)
					if  (ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.DerivedDiscountAmount entered
					and  ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.CompanyCustomerRel.DiscountAdjustmentReason entered)

						invoke CreateReceivableApplication LocalSequenceInvoiceDetailRel
							invoked.ReceivableInvoiceDetailGroup.Company						= ReceivableInvoiceDetailGroup.Company
							invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail		= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail
							invoked.ApplicationGeneralLedgerDate								= ApplicationGeneralLedgerDate
							invoked.ApplyOperator												= ApplyOperator
							invoked.PrmAmount													= WorkAmount
							if (AllowSelectDistributionSet) 
								if (PrmCreditAsFromAgent)
									invoked.PrmNeedsCreditMemoApplyDistributionSet				= true
							if (Work2Amount entered)
								invoked.PrmAdjustReason											= PrmAdjustReason
								invoked.PrmReceivableReasonType									= PrmReceivableReasonType	
								invoked.PrmReceivableAdjustmentReasonType						= PrmReceivableAdjustmentReasonType		
								invoked.PrmAdjustAmount											= Work2Amount
								invoked.PrmAdjustAccount										= PrmAdjustAccount
								if (PrmWriteoffARIncomeWithholdingCode entered)	
									invoked.PrmWriteoffARIncomeWithholdingCode					= PrmWriteoffARIncomeWithholdingCode	
								if (PrmWriteoffARIncomeWithholdingDocumentNumber entered)	
									invoked.PrmWriteoffARIncomeWithholdingDocumentNumber		= PrmWriteoffARIncomeWithholdingDocumentNumber	
								if (PrmComment entered)	
									invoked.PrmComment											= PrmComment	



				LocalApplicationAmount						= PrmAmount
				LocalDiscountAmount						= PrmAdjustAmount

				if (LocalApplicationAmount > ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.DerivedOpenAmount)
					LocalApplicationAmount							= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.DerivedOpenAmount

				Done = false


				while (!Done)

					if (!Writeoff)
						if (ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SummarizeDetail)
							CreditOpenAmount = first ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SameInvoiceOpenRel.OpenAmount
						else
							CreditOpenAmount = ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.OpenAmount



					if (SummarizeDetail)
						if (LocalDiscountAmount >= first SameInvoiceOpenRel.ReceivableInvoiceDetail.OpenAmountDisplayCurrency)
							initialize WorkAmount
							Work2Amount										= first SameInvoiceOpenRel.ReceivableInvoiceDetail.OpenAmountDisplayCurrency
						else
						if ((LocalApplicationAmount + LocalDiscountAmount) < first SameInvoiceOpenRel.ReceivableInvoiceDetail.OpenAmountDisplayCurrency)
							WorkAmount										= LocalApplicationAmount
							Work2Amount										= LocalDiscountAmount
						else
							WorkAmount										= first SameInvoiceOpenRel.ReceivableInvoiceDetail.OpenAmountDisplayCurrency - LocalDiscountAmount
							Work2Amount										= LocalDiscountAmount

						if (!Writeoff)
							if (WorkAmount > CreditOpenAmount)
								WorkAmount = CreditOpenAmount

						LocalSequence	= first SameInvoiceOpenRel.ReceivableInvoiceDetail.PaymentSeq

						invoke CreateReceivableApplication LocalSequenceInvoiceDetailRel
							invoked.ReceivableInvoiceDetailGroup.Company						= ReceivableInvoiceDetailGroup.Company
							if (ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SummarizeDetail)
								invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= first ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SameInvoiceOpenRel.ReceivableInvoiceDetail
							else
								invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail
							invoked.ApplicationGeneralLedgerDate								= ApplicationGeneralLedgerDate
							invoked.ApplyOperator												= ApplyOperator
							invoked.PrmAmount													= WorkAmount
							if (Work2Amount entered)
								invoked.PrmAdjustReason											= PrmAdjustReason
								invoked.PrmReceivableReasonType									= PrmReceivableReasonType	
								invoked.PrmReceivableAdjustmentReasonType						= PrmReceivableAdjustmentReasonType	
								invoked.PrmAdjustAmount											= Work2Amount
								invoked.PrmAdjustAccount										= PrmAdjustAccount
								if (PrmWriteoffARIncomeWithholdingCode entered)	
									invoked.PrmWriteoffARIncomeWithholdingCode					= PrmWriteoffARIncomeWithholdingCode	
								if (PrmWriteoffARIncomeWithholdingDocumentNumber entered)	
									invoked.PrmWriteoffARIncomeWithholdingDocumentNumber		= PrmWriteoffARIncomeWithholdingDocumentNumber	
								if (PrmComment entered)	
									invoked.PrmComment											= PrmComment	
								if (PrmAttachment entered)
									PrmAttachment												= PrmAttachment
							if (AllowSelectDistributionSet) 
								if (PrmMarkAsPaidQuickWriteoff)
									invoked.PrmMarkAsPaidQuickWriteoff								= true
								else
								if (Writeoff)
									invoked.PrmNeedsWriteoffDistributionSet							= true
								else
								if (PrmCreditAsFromAgent)
									invoked.PrmNeedsCreditMemoApplyDistributionSet					= true
					else
						if (LocalDiscountAmount >= OpenAmountDisplayCurrency)
							initialize WorkAmount
							Work2Amount										= OpenAmountDisplayCurrency
						else
						if ((LocalApplicationAmount + LocalDiscountAmount) < OpenAmountDisplayCurrency)
							WorkAmount										= LocalApplicationAmount
							Work2Amount										= LocalDiscountAmount
						else
							WorkAmount										= OpenAmountDisplayCurrency - LocalDiscountAmount
							Work2Amount										= LocalDiscountAmount

						if (!Writeoff)
							if (WorkAmount > CreditOpenAmount)
								WorkAmount = CreditOpenAmount

						invoke CreateReceivableApplication
							invoked.ReceivableInvoiceDetailGroup.Company					= ReceivableInvoiceDetailGroup.Company
							if (ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SummarizeDetail)
								invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= first ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.SameInvoiceOpenRel.ReceivableInvoiceDetail
							else
								invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail
							invoked.ApplicationGeneralLedgerDate							= ApplicationGeneralLedgerDate
							invoked.ApplyOperator											= ApplyOperator
							invoked.PrmAmount												= WorkAmount
							if (Work2Amount entered)
								invoked.PrmAdjustReason										= PrmAdjustReason
								invoked.PrmReceivableReasonType								= PrmReceivableReasonType	
								invoked.PrmReceivableAdjustmentReasonType					= PrmReceivableAdjustmentReasonType	
								invoked.PrmAdjustAmount										= Work2Amount
								invoked.PrmAdjustAccount									= PrmAdjustAccount
								if (PrmWriteoffARIncomeWithholdingCode entered)	
									invoked.PrmWriteoffARIncomeWithholdingCode					= PrmWriteoffARIncomeWithholdingCode	
								if (PrmWriteoffARIncomeWithholdingDocumentNumber entered)	
									invoked.PrmWriteoffARIncomeWithholdingDocumentNumber		= PrmWriteoffARIncomeWithholdingDocumentNumber	
								if (PrmComment entered)
									invoked.PrmComment										= PrmComment
								if (PrmAttachment entered)
									invoked.PrmAttachment									= PrmAttachment
							if (AllowSelectDistributionSet) 
								if (PrmMarkAsPaidQuickWriteoff)
									invoked.PrmMarkAsPaidQuickWriteoff								= true
								else
								if (Writeoff)
									invoked.PrmNeedsWriteoffDistributionSet							= true
								else
								if (PrmCreditAsFromAgent)
									invoked.PrmNeedsCreditMemoApplyDistributionSet					= true

					LocalApplicationAmount												-= WorkAmount
					LocalDiscountAmount													-= Work2Amount




					if  ((LocalApplicationAmount = 0
					and   LocalDiscountAmount	= 0)
					or	ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.DerivedOpenAmount = 0
					or	DerivedOpenAmount = 0)
						Done = true


		CreateReceivableApplication is an Instance Action
			restricted

			Parameters
				ReceivableInvoiceDetailGroup
				ReceivablePaymentGroup
				ApplicationGeneralLedgerDate					is Date
					default label is "ApplicationGlobalLedgerDate"
				ApplyOperator									is a ReceivableOperator
				PrmAmount										is an InternationalAmount
				PrmCurrency										is a Currency
				PrmAdjustAmount									is an InternationalAmount
				PrmAdjustReason									is like ReceivableReason
				PrmReceivableReasonType							is a ReceivableReasonType	
				PrmReceivableAdjustmentReasonType				is a ReceivableAdjustmentReasonType	
				AutoAdjustAmount								is an InternationalAmount
				PrmAdjustAccount								is a FinanceCodeBlock
				PrmComment										is a Description
				PrmWriteoffARIncomeWithholdingCode				is AlphaUpper size 10	
				PrmWriteoffARIncomeWithholdingDocumentNumber	is AlphaUpper size 16	
				PrmNeedsWriteoffDistributionSet					is Boolean 
				PrmNeedsCreditMemoApplyDistributionSet			is Boolean 
				PrmMarkAsPaidQuickWriteoff						is Boolean 
				PrmAttachment									is an Attachment
			
			Action Rules







				if (PrmCurrency not entered)
					PrmCurrency = DerivedDisplayCurrency


				invoke UnreleasedCashApplication.Create ReceivableApplication
					assign result to NewReceivableApplication
					invoked.Company												= Company
					invoked.ReceivableApplication.TransType						= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.ReceivableApplication.Invoice						= ReceivableInvoiceDetail.Invoice
					invoked.ReceivableApplication.PaymentSeq					= ReceivableInvoiceDetail.PaymentSeq
					invoked.ReceivableApplication.BatchNumber					= ReceivableInvoiceDetail.BatchNumber

					invoked.EnteredAmount										= PrmAmount
					invoked.ApplicationCurrency									= PrmCurrency

					invoked.ReceivableOperator									= ApplyOperator
					if PrmReceivableAdjustmentReasonType						 = "MP"//			= Company.ReceivableCompany.MarkedAsPaidReceivableReason //IEFIN-56617 Was "MP" Updated to Company.ReceivableCompany.MarkedAsPaidReceivableReason in order to accomodate the customer definablity of this code.
						invoked.ApplicationSource								= "P"	
					else
						invoked.ApplicationSource								= "M"	
					invoked.ReceivableGeneralLedgerCode							= ReceivableGeneralLedgerCode

					if (ReceivablePaymentGroup entered)
						invoked.CreditTransaction.CreditType					= "P"
						invoked.CreditTransaction.CreditCompany					= ReceivablePaymentGroup.Company
						invoked.CreditTransaction.CreditCustomer				= ReceivablePaymentGroup.ReceivablePayment.Customer
						invoked.CreditTransaction.CreditBatch					= ReceivablePaymentGroup.ReceivablePaymentHeader
						invoked.CreditTransaction.CreditSequence				= ReceivablePaymentGroup.ReceivablePayment
						invoked.CreditTransaction.CreditType					= ReceivablePaymentGroup.ReceivablePayment.TypeOfPayment
						invoked.CreditTransaction.CreditNumber					= ReceivablePaymentGroup.ReceivablePayment.PaymentNumber

						invoked.GeneralLedgerDate								= ApplicationGeneralLedgerDate









						invoked.DepositDate										= ReceivablePaymentGroup.ReceivablePaymentHeader.DepositDate
						invoked.GLOffsetCode									= ReceivablePaymentGroup.ReceivablePayment.ReceivedNotAppliedReceivableGeneralLedgerCode

						if (ReceivablePaymentGroup.ReceivablePayment.OriginalCurrency = Company.Currency)
							invoked.ApplicationCurrencyType						= "B"
						else
							invoked.ApplicationCurrencyType						= "N"
					else
					if (ReceivableInvoiceDetailGroup entered)
						invoked.CreditTransaction.CreditType					= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.CreditTransaction.CreditCompany					= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.Company
						invoked.CreditTransaction.CreditCustomer				= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.Customer
						invoked.CreditTransaction.CreditBatch					= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.BatchNumber
						invoked.CreditTransaction.CreditSequence				= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.PaymentSeq
						invoked.CreditTransaction.CreditNumber					= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.Invoice
						if (ApplicationGeneralLedgerDate entered)
							invoked.GeneralLedgerDate							= ApplicationGeneralLedgerDate
						else
							invoked.GeneralLedgerDate							= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.GeneralLedgerDate	

						invoked.DepositDate										= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.TransactionDate	
						invoked.ApplicationCurrency								= PrmCurrency
						if (ReceivableInvoiceDetail			 != ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail)
							invoked.GLOffsetCode								= ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail.ReceivableGeneralLedgerCode
						invoked.ApplicationCurrencyType							= "B"

					if (PrmAdjustAmount entered
					or  PrmAdjustReason entered)
						invoked.CreateAdjustReason										= PrmAdjustReason
						invoked.CreateAdjustAmount										= PrmAdjustAmount
						if (PrmReceivableReasonType entered)
							invoked.CreateReceivableReasonType							= PrmReceivableReasonType
						if (PrmAdjustAccount entered)
							invoked.AdjustAccount										= PrmAdjustAccount
						if (PrmComment entered)
							invoked.LocalPrmComment										= PrmComment
						if (PrmWriteoffARIncomeWithholdingCode entered)	
							invoked.TransientWriteoffARIncomeWithholdingCode			= PrmWriteoffARIncomeWithholdingCode	
						if (PrmWriteoffARIncomeWithholdingDocumentNumber entered)	
							invoked.TransientWriteoffARIncomeWithholdingDocumentNumber	= PrmWriteoffARIncomeWithholdingDocumentNumber	
						if (Company.OverApplyInvoice
						and PrmAdjustReason = Company.OverApplyReasonCode)
							invoked.TransientOverApplyInvoice							 = true
						if (PrmAttachment entered)
							invoked.TransientAttachment									 = PrmAttachment
					if (AllowSelectDistributionSet) 
						if (PrmMarkAsPaidQuickWriteoff)
							invoked.DistributionSetState									= "CW"
						else
						if (PrmNeedsWriteoffDistributionSet)
							invoked.DistributionSetNeedsReview								= true
							invoked.DistributionSetState									= "NW"
						else
						if (PrmNeedsCreditMemoApplyDistributionSet)
							invoked.DistributionSetNeedsReview								= true
							invoked.DistributionSetState									= "NC"



				if (AllowSelectDistributionSet) 
					if (PrmMarkAsPaidQuickWriteoff)
						invoke ProrateAndSelectAll NewReceivableApplication.ReceivableApplication


				if (AutoAdjustAmount entered)
					invoke Create ReceivableApplicationAdjustment
						invoked.Company										 = Company
						invoked.ReceivableApplication.TransType				 = NewReceivableApplication.ReceivableApplication.TransType
						invoked.ReceivableApplication.Invoice				 = NewReceivableApplication.ReceivableApplication.Invoice
						invoked.ReceivableApplication.PaymentSeq			 = NewReceivableApplication.ReceivableApplication.PaymentSeq
						invoked.ReceivableApplication.BatchNumber			 = NewReceivableApplication.ReceivableApplication.BatchNumber
						invoked.ReceivableApplication.ApplicationSequence	 = NewReceivableApplication.ReceivableApplication.ApplicationSequence
						invoked.AdjustmentReason							 = AutoAdjustReason
						invoked.ReceivableAdjustType						 = "N"
						invoked.CreditAdjustAmount							 = AutoAdjustAmount
						invoked.ApplicationCurrency							 = OriginalCurrency
						invoked.CheckAccrual								 = true




		ToleranceCheck	is an Instance Action
			restricted
			Parameters
				ApplicationGeneralLedgerDate				is Date
					default label is "ApplicationGlobalLedgerDate"
				ApplyOperator								is a ReceivableOperator
			Action Rules

				if (Status.OpenTransaction
				and CompanyCustomerRel.MaximumOverageReasonCode entered
				and CompanyCustomerRel.MaximumOverageReasonCode.Active
				and ((CompanyCustomerRel.MaximumOverageAmount entered
				and   CompanyCustomerRel.MaximumOverageAmount >= BaseOpenAmount) 
				or	(CompanyCustomerRel.MaximumOveragePercent entered
				and	CompanyCustomerRel.MaximumOveragePercent >= InvoiceAmount.CurrencyAmount / OpenAmount)))
					invoke UnreleasedCashApplication.Create ReceivableApplication
						assign result to NewReceivableApplication
						invoked.Company													= Company
						invoked.ReceivableApplication.TransType							= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.ReceivableApplication.Invoice							= ReceivableInvoiceDetail.Invoice
						invoked.ReceivableApplication.PaymentSeq						= ReceivableInvoiceDetail.PaymentSeq
						invoked.ReceivableApplication.BatchNumber						= ReceivableInvoiceDetail.BatchNumber
						invoked.CreditTransaction.CreditType							= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
						invoked.CreditTransaction.CreditCompany							= ReceivableInvoiceDetail.Company
						invoked.CreditTransaction.CreditCustomer						= ReceivableInvoiceDetail.Customer
						invoked.CreditTransaction.CreditBatch							= ReceivableInvoiceDetail.BatchNumber
						invoked.CreditTransaction.CreditSequence						= ReceivableInvoiceDetail.PaymentSeq
						invoked.CreditTransaction.CreditNumber							= ReceivableInvoiceDetail.Invoice

						if (ApplicationGeneralLedgerDate entered)
							invoked.GeneralLedgerDate									= ApplicationGeneralLedgerDate
						else
							invoked.GeneralLedgerDate									= TransientGeneralLedgerDate	
						invoked.ReceivableOperator										= ApplyOperator
						invoked.DepositDate												= TransactionDate	
						invoked.ApplicationCurrency										= OriginalCurrency
						invoked.ApplicationSource										= "M"	
						invoked.ReceivableGeneralLedgerCode								= ReceivableGeneralLedgerCode
						invoked.GLOffsetCode											= ReceivableGeneralLedgerCode
						invoked.SkipToleranceCheck										= true

						if (ReceivablePayment.OriginalCurrency = Company.Currency)
							invoked.ApplicationCurrencyType								= "B"
						else
							invoked.ApplicationCurrencyType								= "N"

					invoke Create ReceivableApplicationAdjustment
						fill in fields from this instance
						invoked.Company												= NewReceivableApplication.ReceivableApplication.Company
						invoked.ReceivableApplication.TransType							= NewReceivableApplication.ReceivableApplication.TransType
						invoked.ReceivableApplication.Invoice							= NewReceivableApplication.ReceivableApplication.Invoice
						invoked.ReceivableApplication.PaymentSeq						= NewReceivableApplication.ReceivableApplication.PaymentSeq
						invoked.ReceivableApplication.BatchNumber						= NewReceivableApplication.ReceivableApplication.BatchNumber
						invoked.ReceivableApplication.ApplicationSequence				= NewReceivableApplication.ReceivableApplication.ApplicationSequence
						invoked.AdjustmentReason										= CompanyCustomerRel.MaximumOverageReasonCode
						invoked.ReceivableAdjustType									= "N"
						invoked.CreditAdjustAmount										= OpenAmount
						invoked.ApplicationCurrency										= OriginalCurrency

					include UpdateReceivableProjectTransaction


		UnSelectForAPInterfacing	is an Instance Action
			default label is "UnselectForAPInterfacing"  
			valid when (HasARToAPApplicationSelect)
			Action Rules
				invoke Delete ARToAPApplicationSelectRel



		SelectForAPInterfacing	is an Instance Action
			valid when (IsSelectableForAPInterface)
			Action Rules		
				constraint (!IsSelectedForAP)
					"RecordIsAlreadySelected"		
				constraint (Company.VendorCreateAndInterfaceToAP)
					"A\RTo_\A\PInterfaceNotAllowedForThisCompany."			
				constraint (PayablesCompanyRel exists)
					"PayablesCompany<Company>DoesNotExist"
				if (Customer.VendorGroupAndVendor.VendorGroup entered)
					constraint (PayablesCompanyRel.VendorGroup = Customer.VendorGroupAndVendor.VendorGroup)

						"CustomerVendorGroup<Customer.VendorGroupAndVendor.VendorGroup>DoesNotMatchAPCompanyVendorGroup<PayablesCompanyRel.VendorGroup>"
				invoke Create ARToAPApplicationSelect
					invoked.Company									= Company
					invoked.ARToAPApplicationSelect.BatchNumber		= ReceivableInvoiceRel.BatchNumber
					invoked.TransactionDate							= ReceivableInvoiceRel.TransactionDate
					invoked.ARToAPApplicationSelect.TransactionType	= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.ARToAPApplicationSelect.Invoice			= ReceivableInvoiceDetail.Invoice
					invoked.ARToAPApplicationSelect.PaymentSeq		= ReceivableInvoiceDetail.PaymentSeq
					invoked.Customer								= Customer
					invoked.Status									= 0
					invoked.DueDate									= DueDate
					invoked.BaseAmount								= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount)
					invoked.TransactionAmount						= InvoiceAmount.CurrencyAmount - (ApplicationAmount.CurrencyAmount + AdjustmentAmount.CurrencyAmount)
					invoked.TransientToCurrency						= Company.Currency






					if (IsUnresolvedDispute)
						invoked.DisputeIndicator					= "Y"
					else
						invoked.DisputeIndicator					= "N"
					invoked.Currency								= OriginalCurrency



































		SuppressActions	is an Update Action
			valid when (AlwaysFalse)



		BatchUpdate	is an Update Action
			restricted
			Entrance Rules
				LocalCurrencyTable	 = ReceivableInvoiceRel.CurrencyTable
				LocalExchangeDate	 = DerivedExchangeDate



		DebitApplyInstanceAction	is an Instance Action
			restricted
			Parameters
				InstanceLastApplicationSequence		is Numeric size 7
			Action Rules
				LastApplicationSequence	 = InstanceLastApplicationSequence



		SelectForGrouping	is an Instance Action
			default label is "Select"
			valid when (AllowSelectForGrouping)
			Action Rules
				constraint (!ReceivablePendingAdjustment2Rel exists)
					"CannotProcess;PendingAdjustmentExistsForInvoice"
				invoke Create ReceivableInvoiceObligationGroupRel
					if (CompanyCustomerRel.NationalAccountIndicator.Child)
						invoked.NationalAccount.Company						 = Company
						invoked.NationalAccount.Customer					 = Customer
					else
						invoked.NationalAccount.Company						 = DerivedNationalCompany
						invoked.NationalAccount.Customer					 = DerivedNationalCustomer
					invoked.Customer										 = Customer
					invoked.TransactionAmount								 = InvoiceAmount.CurrencyAmount
					invoked.AppliedAmount									 = ApplicationAmount.CurrencyAmount
					invoked.AdjustAmount									 = AdjustmentAmount.CurrencyAmount
					invoked.Actor											 = Actor



		UnSelectForGrouping	is an Instance Action
			default label is "Unselect"  
			valid when (AllowUnSelectForGrouping)
			Action Rules
				constraint (!ReceivablePendingAdjustment2Rel exists)
					"CannotProcess;PendingAdjustmentExistsForInvoice"
				invoke Purge ReceivableInvoiceObligationGroupRel



		DeleteAllApplications is an Instance Action
			default label is "DeleteAllUnpostedApplications"
			valid when (HasUnpostedCreditApplications)
			Action Rules
				include DeleteAllApplications


		UpdateCustomer	is an Update Action
			restricted
			bypass field rules


			Action Rules

				invoke UpdateFromReceivableInvoiceDetail ReceivableProjectTransactionRel
					invoked.Customer = Customer


		FromInvoiceGetICBCreditAppliedAmount is an Instance Action
			restricted
			default label is untranslatable
			Parameters
				PrmCreditCompany							is like ReceivableCompany
				PrmCreditNumber								is a CrNbr
				PrmCreditSequence							is a CrPymntSeq

			Action Rules

				LocalICBCreditCompany	= PrmCreditCompany
				LocalICBCreditNumber	= PrmCreditNumber
				LocalICBCreditSequence	= PrmCreditSequence

				TransientCreditApplied = ReceivableICBCreditInvoiceDetailRel.ReceivableInvoiceRel.IntercompanyBillingDocumentRel.CreditAppliedAmount


		FromInvoiceCompletePayablesWorkForICBCreditAutoApply is an Instance Action
			restricted
			default label is untranslatable
			Parameters
				PrmCreditCompany							is like ReceivableCompany
				PrmCreditNumber								is a CrNbr
				PrmCreditSequence							is a CrPymntSeq
				PrmAppliedAmount							is like InternationalAmount
				PrmPostDate									is Date
				PrmCrossReferenceApplyPayablesTransNbr		is AlphaUpper 12

			Action Rules

				TransientNotAutoApply 					= false
				TransientErrorApplyICBCreditToInvoice 	= false

				LocalICBCreditCompany	= PrmCreditCompany
				LocalICBCreditNumber	= PrmCreditNumber
				LocalICBCreditSequence	= PrmCreditSequence

				if (!ReceivableICBCreditInvoiceDetailRel.ReceivableInvoiceRel.IntercompanyBillingDocumentRel.CrossReferenceAutoApply)
					TransientNotAutoApply = true
				else
					if (ReceivableICBCreditInvoiceDetailRel.ReceivableInvoiceRel.IntercompanyBillingDocumentRel.CrossReferenceHasBeenApplied)
						TransientErrorApplyICBCreditToInvoice = true
					else
						invoke CompletePayablesWorkForICBCreditAutoApply ReceivableICBCreditInvoiceDetailRel
							invoked.PrmAppliedAmount						= PrmAppliedAmount
							invoked.PrmPostDate								= PrmPostDate
							invoked.PrmCrossReferenceApplyPayablesTransNbr 	= PrmCrossReferenceApplyPayablesTransNbr
							invoked.PrmCreditSequence						= PrmCreditSequence
							invoked.PrmInvoiceSequence						= ReceivableInvoiceDetail.PaymentSeq

						if (ReceivableICBCreditInvoiceDetailRel.TransientErrorApplyICBCreditToInvoice)
							TransientErrorApplyICBCreditToInvoice = true


		CompletePayablesWorkForICBCreditAutoApply is an Instance Action 
			restricted
			default label is untranslatable
			Parameters
				PrmAppliedAmount							is like InternationalAmount
				PrmPostDate									is Date
				PrmCrossReferenceApplyPayablesTransNbr		is AlphaUpper 12
				PrmCreditSequence							is a CrPymntSeq
				PrmInvoiceSequence							is a CrPymntSeq
			Local Fields
				LocalErrorMessage							is Alpha 200
			Action Rules

				TransientErrorApplyICBCreditToInvoice = false

				invoke CompletePayablesWorkForICBCreditAutoApply ReceivableInvoiceRel.IntercompanyBillingDocumentRel
					resume on error
						TransientErrorApplyICBCreditToInvoice		= true
						LocalErrorMessage							= error message
					invoked.PrmAppliedAmount						= PrmAppliedAmount
					invoked.PrmPostDate								= PrmPostDate
					invoked.PrmCrossReferenceApplyPayablesTransNbr 	= PrmCrossReferenceApplyPayablesTransNbr
					invoked.PrmCreditSequence						= PrmCreditSequence
					invoked.PrmInvoiceSequence						= PrmInvoiceSequence

				if (TransientErrorApplyICBCreditToInvoice)
					invoke FastUpdate ReceivableInvoiceRel.IntercompanyBillingDocumentRel
						invoked.ErrorMessage = LocalErrorMessage
					if (ReceivableInvoiceRel.IntercompanyBillingDocumentRel.CashLedgerPayablesPaymentRel exists)
						invoke Delete ReceivableInvoiceRel.IntercompanyBillingDocumentRel.CashLedgerPayablesPaymentRel


		EFTUpdate	is an Update Action
			restricted
			bypass field rules



		PortalPaymentUpdate	is an Update Action	
			restricted	
			refresh and lock this instance	
			bypass field rules	


		InitializeOrphanedPortalPaymentSelectedRecords is an Instance Action	
			valid when (PortalPaymentSelectedButNoCorrespondingReceivablePortalPaymentDetailExist)	
			Action Rules
				if (PortalPaymentSelected = true
				or PortalRequestedAppliedAmount !=0)
					include UpdatePortalPaymentSelectedAndPortalRequestedAppliedAmount



		EFTAdjustmentAdd	is an Instance Action
			default label is "Add"
			valid when (AllowEFTAdjustmentAdd)
			completion message is "PendingAddCreated"
			Entrance Rules
				constraint (!EftAction.Added)
					"EFTWorkRecordHasAlreadyBeenAdded"
				if (EFTAdjustmentPending)
					constraint (!ReceivableElectronicFundsTransferAdjustmentRel.EftAction.Added)
						"EFTWorkRecordHasAlreadyBeenAdded"
			Action Rules
				invoke Update ReceivableElectronicFundsTransferAdjustmentRel
					invoked.CustomerGroup	= Company.CustomerGroupField.CustomerGroup
					invoked.WorkAction		= "A"


		EFTAdjustmentDelete	is an Instance Action
			default label is "Delete"
			valid when (AvailableForEFTAdjustmentsHold)
			completion message is "PendingDeleteCreated"
			Entrance Rules
				constraint (!EftAction.Deleted)
					"OpenItemHasAlreadyBeenDeleted"
				if (EFTAdjustmentPending)
					constraint (!ReceivableElectronicFundsTransferAdjustmentRel.EftAction.Deleted)
						"EFTWorkRecordWithDeleteActionAlreadyExists"
			Action Rules
				invoke Update ReceivableElectronicFundsTransferAdjustmentRel
					invoked.CustomerGroup	= Company.CustomerGroupField.CustomerGroup
					invoked.WorkAction		= "D"


		EFTAdjustmentHold	is an Instance Action
			default label is "Hold"
			valid when (AvailableForEFTAdjustmentsHold)
			completion message is "PendingHoldCreated"
			Entrance Rules
				constraint (!EftAction.Hold)
					"OpenItemHasAlreadyBeenHeld"
				if (EFTAdjustmentPending)
					constraint (!ReceivableElectronicFundsTransferAdjustmentRel.EftAction.Hold)
						"EFTWorkRecordWithHoldActionAlreadyExists"
			Action Rules
				invoke Update ReceivableElectronicFundsTransferAdjustmentRel
					invoked.CustomerGroup	= Company.CustomerGroupField.CustomerGroup
					invoked.WorkAction		= "C"


		EFTAdjustmentPostpone	is an Instance Action
			default label is "Postpone"
			valid when (AvailableForEFTAdjustmentsHold)
			completion message is "PendingPostponeCreated"
			Entrance Rules
				constraint (!EftAction.Postponed)
					"OpenItemHasAlreadyBeenPostponed"
				if (EFTAdjustmentPending)
					constraint (!ReceivableElectronicFundsTransferAdjustmentRel.EftAction.Postponed)
						"EFTWorkRecordWithPostponeActionAlreadyExists"
			Action Rules
				invoke Update ReceivableElectronicFundsTransferAdjustmentRel
					invoked.CustomerGroup	= Company.CustomerGroupField.CustomerGroup
					invoked.WorkAction		= "P"


		EFTAdjustmentUnselect	is an Instance Action
			default label is "Unselect"
			valid when (AllowEFTAdjustmentUnselect)
			Action Rules
				invoke Purge ReceivableElectronicFundsTransferAdjustmentRel


		ApplyMix	is an Instance Action
			restricted
			Parameters
				CashApplicationResult
			Local Fields
				LocalCrPmtSeq									is Numeric 6				
				LocalAppliedAmount								is an InternationalAmount

			Action Rules
				include UpdateReceivableProjectTransaction 
				LocalTransType								 = ReceivableInvoiceRel.AlternateReceivableInvoiceType
				LocalCrPmtSeq									= ReceivableInvoiceDetail.PaymentSeq

				for each DebitTransactionsForCreditTransactionRel
					if (OpenAmount != 0)
						if (OpenAmount - each.OpenAmount <= 0)
							LocalAppliedAmount		= OpenAmount
							invoke Create ReceivableApplication
								invoked.ReceivableApplication.Company								 = Company
								invoked.ReceivableApplication.TransType								 = each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
								invoked.ReceivableApplication.Invoice								 = ReceivableInvoiceDetail.Invoice
								invoked.ReceivableApplication.PaymentSeq							 = each.ReceivableInvoiceDetail.PaymentSeq
								invoked.ReceivableApplication.BatchNumber							 = BatchNumber
								invoked.SetToPosted													 = true
								invoked.CreditTransaction.CreditType								 = "C"
								invoked.CreditTransaction.CreditCompany								 = ReceivableInvoiceDetail.Company
								invoked.CreditTransaction.CreditCustomer							 = Customer
								invoked.CreditTransaction.CreditBatch								 = BatchNumber
								invoked.CreditTransaction.CreditSequence							 = LocalCrPmtSeq
								invoked.CreditTransaction.CreditNumber								 = ReceivableInvoiceDetail.Invoice
								invoked.CreditTransaction.CreditApplicationAmount.CurrencyAmount	 = LocalAppliedAmount
								invoked.GeneralLedgerDate											 = GeneralLedgerDate
								invoked.ReceivableGeneralLedgerCode									 = ReceivableGeneralLedgerCode
								invoked.GLOffsetCode												 = ReceivableGeneralLedgerCode
								invoked.ApplicationSource											 = "S"	
								invoked.EnteredAmount												 = LocalAppliedAmount
								invoked.ApplicationCurrency											 = OriginalCurrency
								invoked.SetToPosted													 = true
								if  (CashApplicationResult entered)
									invoked.CashApplicationResult									 = CashApplicationResult
						else
							LocalAppliedAmount			= each.OpenAmount
							invoke Create ReceivableApplication
								invoked.ReceivableApplication.Company							 = Company
								invoked.ReceivableApplication.TransType							 = each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
								invoked.ReceivableApplication.Invoice							 = ReceivableInvoiceDetail.Invoice
								invoked.ReceivableApplication.PaymentSeq						 = each.ReceivableInvoiceDetail.PaymentSeq
								invoked.ReceivableApplication.BatchNumber						 = BatchNumber
								invoked.Status													 = 5	
								invoked.CreditTransaction.CreditType							 = "C"
								invoked.CreditTransaction.CreditCompany							 = ReceivableInvoiceDetail.Company
								invoked.CreditTransaction.CreditCustomer						 = Customer
								invoked.CreditTransaction.CreditBatch							 = BatchNumber
								invoked.CreditTransaction.CreditSequence						 = LocalCrPmtSeq
								invoked.CreditTransaction.CreditNumber							 = ReceivableInvoiceDetail.Invoice
								invoked.CreditTransaction.CreditApplicationAmount.CurrencyAmount	 = LocalAppliedAmount
								invoked.GeneralLedgerDate										 = GeneralLedgerDate
								invoked.ReceivableGeneralLedgerCode								 = ReceivableGeneralLedgerCode
								invoked.GLOffsetCode											 = ReceivableGeneralLedgerCode
								invoked.ApplicationSource										 = "S"	
								invoked.SetToPosted												 = true
								invoked.EnteredAmount											 = LocalAppliedAmount
								invoked.ApplicationCurrency										 = OriginalCurrency
								if  (CashApplicationResult entered)
									invoked.CashApplicationResult					 = CashApplicationResult

						if  (CashApplicationResult entered)
							invoke FastUpdate CashApplicationResult
								invoked.MixedSelfApplied							 += LocalAppliedAmount
							if (LocalAppliedAmount > 0)				
								invoke FastUpdate ContextReceivablePaymentRel
									invoked.TransientMixedApplied	= true
					else
						end for each


		CreateDisputeFromReceivableInvoice	is an Instance Action
			restricted
			Parameters
				PrmInvoiceDisputeAmount				is an InternationalAmount
				PrmDisputeCode						is a ReceivableInvoiceDisputeCode
				PrmDisputeDate						is Date
				PrmDescription						is a Description
				PrmApplicationCloseResult			is like ApplicationCloseResult
				PrmSkipOpenDisputeCheck				is Boolean
				PrmOriginalDisputeAmount			is an InternationalAmount

			Action Rules

				invoke Create ReceivableInvoiceDispute
					invoked.Company													= Company
					invoked.Customer												= Customer
					invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.ReceivableInvoiceDetail.Invoice							= ReceivableInvoiceDetail.Invoice
					invoked.ReceivableInvoiceDetail.PaymentSeq						= ReceivableInvoiceDetail.PaymentSeq
					invoked.DisputedAmount											= PrmInvoiceDisputeAmount
					invoked.DisputeCode												= PrmDisputeCode
					invoked.DisputeDate												= PrmDisputeDate
					invoked.OriginalCurrency										= OriginalCurrency
						if (PrmDescription entered)
							invoked.Description										= PrmDescription
						else
							invoked.Description										= PrmDisputeCode.Description
					if  (PrmApplicationCloseResult entered)
						invoked.ApplicationCloseResult								= PrmApplicationCloseResult
					invoked.TransientSkipOpenDisputeCheck							= PrmSkipOpenDisputeCheck
					invoked.OriginalDisputeAmount									= PrmOriginalDisputeAmount

			Exit Rules
				include UpdateReceivableProjectTransaction


		CreateDetailDispute	is an Instance Action
			valid when (IsDisputeEligible)
			completion message is "DetailDisputeCreated"
			Parameters
				PrmInvoiceDisputeAmount				is an UnsignedInternationalAmount
					default label is "DisputeAmount"
				PrmDisputeCode						is a ReceivableInvoiceDisputeCode
					default label is "DisputeCode"
				PrmDisputeDate						is Date
					default label is "DisputeDate"
				PrmDescription						is a Description
					default label is "Description"

			Parameter Rules
				PrmInvoiceDisputeAmount
					required
				PrmDisputeCode
					required
				PrmDisputeDate
					required
				PrmDescription

			Local Fields
				LocalOpenAmount						is an InternationalAmount

			Entrance Rules
				LocalOpenAmount = (InvoiceAmount.CurrencyAmount - sum ReceivableInvoiceDisputeRel.DisputedAmount)
				constraint (PrmInvoiceDisputeAmount <= LocalOpenAmount)
					"DisputeAmountMustBeLessThanOrEqualToTheOpenInvoiceDetailTransactionAmount"
				constraint (PrmDisputeDate >= TransactionDate)
					"DisputeDateCannotBeLessThanTransactionDate"

			Action Rules
				invoke Create ReceivableInvoiceDispute
					invoked.TransientSkipOpenDisputeCheck						   = true
					invoked.Company													= Company
					invoked.Customer												= Customer
					invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.ReceivableInvoiceDetail.Invoice							= ReceivableInvoiceDetail.Invoice
					invoked.ReceivableInvoiceDetail.PaymentSeq						= ReceivableInvoiceDetail.PaymentSeq
					invoked.DisputedAmount											= PrmInvoiceDisputeAmount
					invoked.DisputeCode												= PrmDisputeCode
					invoked.DisputeDate												= PrmDisputeDate
					invoked.OriginalCurrency										= OriginalCurrency
						if (PrmDescription entered)
							invoked.Description										= PrmDescription
						else
							invoked.Description										= PrmDisputeCode.Description

			Exit Rules
				include UpdateReceivableProjectTransaction


		ModifyInvoiceAccrualAccount is an Instance Action
			valid when (AllowModifyInvoiceAccrualAccount)
			Parameters
				PrmGeneralLedgerDate is Date
					default label is "GlobalLedgerDate"
				PrmInvoiceFinanceCodeBlock	is a FinanceCodeBlockFull
					default label is "InvoiceAccrualAccount"
			
			Parameter Rules
				PrmGeneralLedgerDate
					required
					initial value is GeneralLedgerDate
					if (CompanySystemClosingControlRel.Control)
						constraint (PrmGeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostDate<PrmGeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
				
				PrmInvoiceFinanceCodeBlock
					initial value is InvoiceFinanceCodeBlock
						when (InvoiceFinanceCodeBlock entered)
					initial value is ReceivableGeneralLedgerCode.DistributionAccount
						when (InvoiceFinanceCodeBlock not entered)
			
			Action Rules
				if (PrmInvoiceFinanceCodeBlock not entered)
					confirmation required
						"Invoice_\Accrual_\AccountNotEntered.The_\Receivable_\Global_\Ledger_\Code's_\Distribution_\AccountWillBeUsed.Continue?"

				invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
					invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
					invoked.ReceivableCompanyGroup.GlCompany				= Company
					invoked.GeneralLedgerDate								= PrmGeneralLedgerDate
					if (InvoiceFinanceCodeBlock entered)
						invoked.GeneralLedgerAccount						= InvoiceFinanceCodeBlock
					else
						invoked.GeneralLedgerAccount						= ReceivableGeneralLedgerCode.DistributionAccount
					if (ReceivableInvoiceRel.IsInvoiceIdentity)
						invoked.Origin										= "RI"
					else
						invoked.Origin										= "RM"
					if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						invoked.DistributionAmount.CurrencyAmount			= OpenAmount
					else
						invoked.DistributionAmount.CurrencyAmount			= OpenAmount * -1	
					invoked.Description										= "Batch " + BatchNumber + ", " + AlternateReceivableInvoiceType + " " + ReceivableInvoiceDetail.Invoice
					invoked.BypassStructureRelationEdit						= true
					invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableProcessLevel
					invoked.TransactionDate									= TransactionDate
					invoked.BatchNumber										= BatchNumber
					invoked.ReceivableCompanyDataGroup.Customer				= Customer
					invoked.Invoice											= ReceivableInvoiceDetail.Invoice
					invoked.TransType										= AlternateReceivableInvoiceType	
					invoked.OriginalCurrency								= OriginalCurrency	
					invoked.AccumulationType								= "S"
					invoked.BypassStatusEdit								= true
					invoked.Status                                          = 2
				
				InvoiceFinanceCodeBlock = PrmInvoiceFinanceCodeBlock

				invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
					invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
					invoked.ReceivableCompanyGroup.GlCompany				= Company
					invoked.GeneralLedgerDate								= PrmGeneralLedgerDate
					if (InvoiceFinanceCodeBlock entered)
						invoked.GeneralLedgerAccount						= InvoiceFinanceCodeBlock
					else
						invoked.GeneralLedgerAccount						= ReceivableGeneralLedgerCode.DistributionAccount
					if (ReceivableInvoiceRel.IsInvoiceIdentity)
						invoked.Origin										= "RI"
					else
						invoked.Origin										= "RM"
					if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						invoked.DistributionAmount.CurrencyAmount			= OpenAmount * -1	
					else
						invoked.DistributionAmount.CurrencyAmount			= OpenAmount						
					invoked.Description										= "Batch " + BatchNumber + ", " + AlternateReceivableInvoiceType + " " + ReceivableInvoiceDetail.Invoice
					invoked.BypassStructureRelationEdit						= true
					invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableProcessLevel
					invoked.TransactionDate									= TransactionDate
					invoked.BatchNumber										= BatchNumber
					invoked.ReceivableCompanyDataGroup.Customer				= Customer
					invoked.Invoice											= ReceivableInvoiceDetail.Invoice
					invoked.TransType										= AlternateReceivableInvoiceType	
					invoked.OriginalCurrency								= OriginalCurrency	
					invoked.AccumulationType								= "S"
					invoked.BypassStatusEdit								= true
					invoked.Status                                          = 2


		LoadOpenReceiptDetails	is a Set Action 
			restricted
			Parameters
				PrmCashManagementGroup	 	is a CashManagementGroup
				PrmCompany				 	is a GeneralLedgerCompany
				PrmLoadDate					is Date
				PrmRunForGroup			 	is Boolean

			Parameter Rules
				PrmCashManagementGroup	required
				PrmCompany
					if (!PrmRunForGroup)
						required
				PrmLoadDate				required

			Instance Selection
				where (Company = PrmCompany
				and   (Status = 1
				or     Status = 2))

			Sort Order
				Company
				Status

			Action Rules
				Empty Set Rules
					increment PrmCashManagementGroup.DirectForecastProcessesCompleted

					if (PrmCashManagementGroup.NumberOfForecastProcessesLeft !entered)
						invoke SummarizeDirectForecastDetail DirectForecastDetail
							if (PrmRunForGroup)
								invoked.PrmCashManagementGroup	= PrmCashManagementGroup
							else
								invoked.PrmCompany = PrmCompany

				Set Rules
					Exit Rules
						increment PrmCashManagementGroup.DirectForecastProcessesCompleted

						if (PrmCashManagementGroup.NumberOfForecastProcessesLeft !entered)
							invoke SummarizeDirectForecastDetail DirectForecastDetail
								if (PrmRunForGroup)
									invoked.PrmCashManagementGroup	= PrmCashManagementGroup
								else
									invoked.PrmCompany = PrmCompany

				Instance Rules
					invoke Create DirectForecastDetail
						invoked.Company					= Company
						invoked.DueDate					= DueDate
						invoked.LoadDate				= PrmLoadDate
						invoked.SystemCode				= "AR"
						invoked.Vendor					= Customer
						invoked.Name					= Customer.Name		
						invoked.Invoice					= ReceivableInvoiceDetail.Invoice
						invoked.CashCode				= ReceivableProcessLevelRel.CashCode
						invoked.CashManagementAccount	= ReceivableProcessLevelRel.CashCode.BankAccountNumber
						invoked.ProcessLevel			= ReceivableProcessLevel
						invoked.TransactionCurrency		= OriginalCurrency
						if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
							invoked.Amount.TransactionAmount -= (InvoiceAmount.CurrencyAmount - (ApplicationAmount.CurrencyAmount + AdjustmentAmount.CurrencyAmount))
						else
							invoked.Amount.TransactionAmount  = (InvoiceAmount.CurrencyAmount - (ApplicationAmount.CurrencyAmount + AdjustmentAmount.CurrencyAmount))
						invoked.OriginatingTransaction	= reference to this instance


		UpdatePaymentCode	is an Instance Action
			restricted
			valid when (IsValidForPaymentCodeChangeNew) 
 			Parameters
				PrmNewBankTransactionCode			is like BankTransactionCode

			Parameter Rules
				PrmNewBankTransactionCode
					required

			Action Rules
				BankTransactionCode				= PrmNewBankTransactionCode

				if (ReceivableInvoiceRel.BankTransactionCode != BankTransactionCode)
					invoke UpdatePaymentCode ReceivableInvoiceRel
						invoked.PrmBankTransactionCode	= BankTransactionCode


		TriggerReceivableTransactionForInvoice	is an Instance Action
			restricted
			Action Rules
				invoke TriggerReceivableTransaction ReceivableInvoiceRel




		AgePeriodBalance is a Set Action	
			restricted
			Instance Selection
				where (false)

			Action Rules
				Empty Set Rules
					display "AgePeriodBalanceHasBeenDeprecated"


		CreateGainLossDistribution	is an Instance Action
			restricted
			Parameters
				PrmRevalueDate					is Date
				PrmDescription					is a Description
				PrmDistributionReference		is a Reference
				PrmDefaultSystemAccount			is Numeric 1
					States
						None					value is 0
						UnrealizedGainLoss		value is 1
						RealizedGainLoss		value is 2
				PrmReversal						is Numeric 1
					States
						No						value is 0
						Yes						value is 1

				PrmOpenAmount					is like InternationalAmount
			Local Fields
				LocalAccountingEntity			is an AccountingEntity
				GainLossCurrency				is a FromCurrency


				LocalBoolean					is Boolean
				LocalOpenDetailPercentage		is Decimal 5.4

			Action Rules
				initialize LocalDistributionAmount
				initialize LocalOpenDetailPercentage

				LocalCurrencyTable											= ReceivableInvoiceRel.CurrencyTable
				LocalAccountingEntity										= GeneralLedgerCompanyRel.AccountingEntity
				GainLossCurrency											= OriginalCurrency
				LocalExchangeDate											= PrmRevalueDate
				LocalReceivablesCompany										= Company
				LocalDistributionDate										= PrmRevalueDate
				LocalReference												= PrmDistributionReference
				LocalDistExchangeDate										= PrmRevalueDate

				if (ReceivableInvoiceRel.CanProrateDistributions)
					LocalOpenDetailPercentage = (PrmOpenAmount / ReceivableInvoiceRel.InvoiceAmount.CurrencyAmount)
					for each ReceivableInvoiceRel.ProrateDistributionsRel
						initialize LocalCurrencyCalculationGroup
						initialize GainLossCalculation
						GainLossCalculation.DefaultSystemAccount					= PrmDefaultSystemAccount
						GainLossCalculation.AccountType								= 1 
						GainLossCalculation.OrigCurrencyAmount.FunctionalAmount		= each.DistributionAmount.FunctionalAmount
						GainLossCalculation.OrigCurrencyAmount.AlternateAmount		= each.DistributionAmount.AlternateAmount
						GainLossCalculation.OrigCurrencyAmount.AlternateAmount2		= each.DistributionAmount.AlternateAmount2
						GainLossCalculation.OrigCurrencyAmount.AlternateAmount3		= each.DistributionAmount.AlternateAmount3
						GainLossCalculation.OrigCurrencyAmount.ToFunctionalAmount	= each.DistributionAmount.ToFunctionalAmount
						GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount	= each.DistributionAmount.ToAlternateAmount
						GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount2	= each.DistributionAmount.ToAlternateAmount2
						GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount3	= each.DistributionAmount.ToAlternateAmount3
						GainLossCalculation.OrigCurrencyAmount.ProjectAmount		= each.DistributionAmount.ProjectAmount
						GainLossCalculation.OrigCurrencyAmount.ReportAmount1		= each.DistributionAmount.ReportAmount1
						GainLossCalculation.OrigCurrencyAmount.ReportAmount2		= each.DistributionAmount.ReportAmount2
						GainLossCalculation.OrigCurrencyAmount.ReportAmount3		= each.DistributionAmount.ReportAmount3
						GainLossCalculation.OrigCurrencyAmount.ReportAmount4		= each.DistributionAmount.ReportAmount4
						GainLossCalculation.OrigCurrencyAmount.ReportAmount5		= each.DistributionAmount.ReportAmount5
						GainLossCalculation.OriginFinanceCodeBlock					= each.GeneralLedgerAccount

						initialize LocalCurrencyAmount
						LocalCurrencyAmount = each.DistributionAmount.CurrencyAmount
						LocalBoolean = GainLossCalculation.DerivedCalculateAmount
						include ProcessUnrealizedGainLossDistributions
				else
					include CalculateOpenCurrencyAmounts

					GainLossCalculation.DefaultSystemAccount					= PrmDefaultSystemAccount
					if(ReceivableInvoiceDetail.ReceivableInvoiceDetailType.Invoice
					or  ReceivableInvoiceDetail.ReceivableInvoiceDetailType.DebitMemo)
						GainLossCalculation.AccountType							= 0
					else
						GainLossCalculation.AccountType							= 1
					GainLossCalculation.OrigCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalOrigOpenAmount.FunctionalAmount.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalOrigOpenAmount.AlternateAmount.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalOrigOpenAmount.AlternateAmount2.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalOrigOpenAmount.AlternateAmount3.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	= LocalOrigOpenAmount.ToFunctionalAmount.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	= LocalOrigOpenAmount.ToAlternateAmount.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	= LocalOrigOpenAmount.ToAlternateAmount2.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	= LocalOrigOpenAmount.ToAlternateAmount3.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= LocalOrigOpenAmount.ProjectAmount.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalOrigOpenAmount.ReportAmount1.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalOrigOpenAmount.ReportAmount2.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalOrigOpenAmount.ReportAmount3.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalOrigOpenAmount.ReportAmount4.EnteredCurrencyAmount
					GainLossCalculation.OrigCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalOrigOpenAmount.ReportAmount5.EnteredCurrencyAmount
					GainLossCalculation.OriginFinanceCodeBlock					= ReceivableGeneralLedgerCode.DistributionAccount	

					GainLossCalculation.OrigCurrencyAmount.FunctionalAmount.EnteredCurrencyRate		= LocalOrigOpenAmount.FunctionalAmount.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.AlternateAmount.EnteredCurrencyRate		= LocalOrigOpenAmount.AlternateAmount.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.AlternateAmount2.EnteredCurrencyRate		= LocalOrigOpenAmount.AlternateAmount2.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.AlternateAmount3.EnteredCurrencyRate		= LocalOrigOpenAmount.AlternateAmount3.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate	= LocalOrigOpenAmount.ToFunctionalAmount.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate	= LocalOrigOpenAmount.ToAlternateAmount.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate	= LocalOrigOpenAmount.ToAlternateAmount2.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate	= LocalOrigOpenAmount.ToAlternateAmount3.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.ProjectAmount.EnteredCurrencyRate		= LocalOrigOpenAmount.ProjectAmount.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.ReportAmount1.EnteredCurrencyRate		= LocalOrigOpenAmount.ReportAmount1.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.ReportAmount2.EnteredCurrencyRate		= LocalOrigOpenAmount.ReportAmount2.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.ReportAmount3.EnteredCurrencyRate		= LocalOrigOpenAmount.ReportAmount3.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.ReportAmount4.EnteredCurrencyRate		= LocalOrigOpenAmount.ReportAmount4.EnteredCurrencyRate
					GainLossCalculation.OrigCurrencyAmount.ReportAmount5.EnteredCurrencyRate		= LocalOrigOpenAmount.ReportAmount5.EnteredCurrencyRate
					LocalCurrencyAmount = LocalOrigOpenAmount.CurrencyAmount

					LocalBoolean = GainLossCalculation.DerivedCalculateAmount
					include ProcessUnrealizedGainLossDistributions

				LocalReceivablesCompany	= Company
				LocalGainLossMessage	= UnrealizedCurrencyGainLossMessage
				invoke CreateGainLossFromBatch ReceivableGLDistribution

					invoked.ReceivableCompanyDataGroup.TransactionCompany = Company
					invoked.ReceivableCompanyDataGroup.Customer			  = Customer
					invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableProcessLevel
					invoked.BatchNumber									  = BatchNumber
					if(ReceivableInvoiceDetail.ReceivableInvoiceDetailType.Invoice)
						invoked.DocumentNumber							  = "11-"+ReceivableInvoiceDetail.Invoice
					else
						invoked.DocumentNumber							  = "12-"+ReceivableInvoiceDetail.Invoice
					invoked.TransType									  = ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					invoked.Invoice										  = ReceivableInvoiceDetail.Invoice
					invoked.SequenceNumber								  = ReceivableInvoiceDetail.PaymentSeq
					if (PrmReversal.Yes)
						invoked.AutoReverseUnrealizedGainLoss				  = "N"
					else
						invoked.AutoReverseUnrealizedGainLoss				  = "Y"
					invoked.GeneralLedgerDate							  = PrmRevalueDate
					invoked.TransactionDate								  = PrmRevalueDate
					invoked.OriginalCurrency							  = OriginalCurrency
					invoked.Origin										  = "RU"
					invoked.AuditSummaryIndicator						  = "09"	
					invoked.Status										  = 2
					invoked.AccumulationType							  = "D"
					invoked.ReceivableCompanyGroup.GlCompany			  = Company
					invoked.Description									  = LocalGainLossMessage+" "+DerivedReceivableInvoiceDetailType+" " +ReceivableInvoiceDetail.Invoice
					invoked.DistributionAmount.ExchangeDate				  = PrmRevalueDate
					invoked.DistributionAmount.CurrencyAmount			  = blank
					invoked.DistributionAmount.FunctionalAmount			  = LocalDistributionAmount.FunctionalAmount
					invoked.DistributionAmount.AlternateAmount			  = LocalDistributionAmount.AlternateAmount
					invoked.DistributionAmount.AlternateAmount2			  = LocalDistributionAmount.AlternateAmount2
					invoked.DistributionAmount.AlternateAmount3			  = LocalDistributionAmount.AlternateAmount3
					invoked.DistributionAmount.ToFunctionalAmount		  = LocalDistributionAmount.ToFunctionalAmount
					invoked.DistributionAmount.ToAlternateAmount		  = LocalDistributionAmount.ToAlternateAmount
					invoked.DistributionAmount.ToAlternateAmount2		  = LocalDistributionAmount.ToAlternateAmount2
					invoked.DistributionAmount.ToAlternateAmount3		  = LocalDistributionAmount.ToAlternateAmount3
					invoked.DistributionAmount.ProjectAmount			  = LocalDistributionAmount.ProjectAmount
					invoked.DistributionAmount.ReportAmount1			  = LocalDistributionAmount.ReportAmount1
					invoked.DistributionAmount.ReportAmount2			  = LocalDistributionAmount.ReportAmount2
					invoked.DistributionAmount.ReportAmount3			  = LocalDistributionAmount.ReportAmount3
					invoked.DistributionAmount.ReportAmount4			  = LocalDistributionAmount.ReportAmount4
					invoked.DistributionAmount.ReportAmount5			  = LocalDistributionAmount.ReportAmount5
					invoked.GeneralLedgerAccount						  = ReceivableGeneralLedgerCode.DistributionAccount

					invoked.DistributionAmount.KeepRateAndAmount		  = true



		MarkAsPaidQuickWriteoff is an Instance Action	
			restricted
			Parameters
				Type					is a ReceivableReasonType
				AdjustmentType			is a ReceivableAdjustmentReasonType
				Reason					is a ReceivableReason
				PrmGeneralLedgerDate	is an ExchangeDate	//Replacing "is Date" with "is ExchangeDate" to help allow Project fields to be populated.  Since we are using TransactionCodeBlock for PrmAdjAccount,  TransactionCodeBlock defines TransactionDate is ExchangeDate.  By updating this parameter with "is ExchangeDate" helps the TransactionCodeBlock definition.
				PrmOperator				is like ReceivableOperator
				PrmComment				is a Description
				PrmAdjAccount			is a TransactionCodeBlock	//Replacing FinanceCodeBlockFull with TransactionCodeBlock to help allow Project fields to be populated.  Since we are using TransactionCodeBlock for PrmAdjAccount,  TransactionCodeBlock defines TransactionDate is ExchangeDate.  By updating this parameter with "is ExchangeDate" helps the TransactionCodeBlock definition.

			Parameter Rules
				Type
					initial value is "AD"	
					default to "AD"	

				AdjustmentType
					initial value is "MP"
					default to "MP"

				Reason
					initial value is Company.ReceivableCompany.MarkedAsPaidReceivableReason	//IEFIN-56201 switched from "MP"
					default to Company.ReceivableCompany.MarkedAsPaidReceivableReason	//IEFIN-56201 switched from "MP"
					constraint (Reason.ReceivableAdjustmentReasonType.MarkAsPaid)
						"ReasonCodeMustBeType_\Mark_\As_\Paid"








				PrmOperator
					default to actor
					if (Company.CashOperatorRequired)
						LocalOperator		= PrmOperator
						constraint (LocalOperatorRel exists)
							"OperatorDoesNotExist"
						constraint (LocalOperatorRel.ActiveStatus.Active)
							"OperatorIsNotActive"

				PrmAdjAccount	
					BypassProjectDateEdit = true	

			Action Rules





				invoke ApplyInvoice
					invoked.Writeoff												= true
					invoked.ReceivableInvoiceDetailGroup.Company					= Company
					invoked.ReceivableInvoiceDetailGroup.ReceivableInvoiceDetail	= ReceivableInvoiceDetail
					invoked.PrmAdjustAmount											= InvoiceAmount.CurrencyAmount	
					invoked.PrmAdjustReason											= Reason
					invoked.PrmReceivableReasonType									= Type
					invoked.PrmReceivableAdjustmentReasonType						= AdjustmentType
					invoked.PrmAdjustAccount										= PrmAdjAccount
					invoked.ApplyOperator											= PrmOperator
					invoked.PrmComment												= PrmComment
					invoked.PrmMarkAsPaidQuickWriteoff								= true 
					if (PrmGeneralLedgerDate not entered)




						invoked.ApplicationGeneralLedgerDate						= DerivedGeneralLedgerDate	
					else
						invoked.ApplicationGeneralLedgerDate						= PrmGeneralLedgerDate





			Exit Rules
				invoke TriggerReceivableTransaction ReceivableInvoiceRel







		HistoricalDetailRecordsPurge is a Purge Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				invoke Purge CompanyCustomerCommentRel	 

				invoke Purge ReceivableInvoiceDisputeRel

				invoke ApplicationPosted.Purge PurgeEligibleDebitApplicationsRel

				invoke Purge ElectronicFundsTransferRel

				invoke Purge ReceivableInvoiceApplyReverseHeaderRel

				invoke Purge ARToAPApplicationSelectRel

				invoke Purge ReceivableInvoiceTransferRel



		UpdateReceivableProjectTransaction is an Instance Action
			restricted
			Action Rules
				include UpdateReceivableProjectTransaction


		TransactionStatusUpdate is a Set Action
			restricted
			Parameters
				PrmCompany					is a ReceivableCompany
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
					default label is "GlobalLedgerCompanyGroup"
			Parameter Rules
				PrmCompany
					if (PrmCompanyGroup not entered)
						required
							"CompanyOrGlobalLedgerCompanyGroupRequired"

				PrmCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterGlobalLedgerCompanyGroupIfCompanyEntered"
					LocalGeneralLedgerCompanyGroup = PrmCompanyGroup

			Instance Selection
				where	((Status.FullyAppliedTransaction
				or	  Status.ClosedTransaction)
				and		((PrmCompanyGroup not entered
				or		GeneralLedgerCompanyGroupRel exists)
				and		(PrmCompany not entered
				or 		PrmCompany = Company)))

			Sort Order is Set4

			Action Rules
				Set Rules
				Instance Rules
					increment HistoryPeriods

					if(Company.TransactionHistoryDeletePeriods not entered
					or Company.TransactionHistoryDeletePeriods < HistoryPeriods)
						initialize HistoryPeriods
						if (Status.ClosedTransaction)
							Status = Status.HistoricalTransaction
						if (Status.FullyAppliedTransaction)
							Status = Status.ClosedTransaction

					include UpdateReceivableProjectTransaction


		ReallocateDistributionsForFundAccounting is a Set Action
			restricted
			default label is untranslatable
			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required

			Instance Selection
				where	(IsOpen
				and	  GeneralLedgerCompanyRel.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup)

			Local Fields
				PerformCommit is Boolean

			Action Rules
				Set Rules
				Instance Rules
					PerformCommit	= false

					if (ReceivableInvoiceRel.FundReallocatedReceivableGLDistributionRel not exists
					and ReceivableInvoiceRel.ReallocateFundDistributions
					and ReceivableInvoiceRel.OriginIsFundAccountingSupported
					and !ReceivableInvoiceRel.ZeroAmountInvoice)
						invoke ReallocateDistributionsForFundAccounting ReceivableInvoiceRel
						PerformCommit = true

					if (PerformCommit)
						commit transaction


		EFTNotificationExtract is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
				PrmCompany							is a ReceivableCompany
				PrmCustomerGroup					is a CustomerGroup
				PrmProcessDate						is Date
				PrmOverrideDateFrom					is Date
				PrmOverrideDateTo					is Date
				PrmBankTransactionCode				is like BankTransactionCode
				PrmExemptPrenoteForImmediates		is Boolean
				PrmEFTNotificationExtractResult		is like EFTNotificationExtractResult
				PrmUpdateRecords					is AlphaUpper size 1
				PrmEFTCompany						is a ReceivableCompany

			Parameter Rules
				PrmCompany
					constraint (PrmCompany.EFTDebitCashCode entered)
						"NoCashCodeSetUpFor<PrmCompany>"

				PrmCustomerGroup
					LocalPrmCustomerGroup					= PrmCustomerGroup
					PrmEFTCompany							= first CompanyWithDebitCashCodeRel.Company
					constraint (PrmEFTCompany entered)
						"NoDefaultProcessingSetUpForGroup<PrmCustomerGroup>"

			Instance Selection
				where (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and   ((PrmCompany entered
				and	Company = PrmCompany)
				or	(PrmCustomerGroup entered
				and	Company.CustomerGroupField.CustomerGroup = PrmCustomerGroup))
				and   (PrmBankTransactionCode not entered
				or 	  (PrmBankTransactionCode entered
				and	BankTransactionCode 			= PrmBankTransactionCode))
				and	BankTransactionCode.TransactionOrigin.Receivable
				and	BankTransactionCode.BankTransactionType.CashPayment
				and	EftExtract.NotExtracted
				and	!EFTNotification.FinalNoteSent
				and	!EFTNotification.NotePrinted)

			Sort Order is OpenByCustomer

			Local Fields
				LocalEFTCompany						is a ReceivableCompany
				LocalEFTBaseCurrency				is a Currency
				EFTDueDaysType						is AlphaUpper size 1
				LocalToDate							is Date
				LocalFinanceEnterpriseGroup			is like FinanceEnterpriseGroup
				LocalEnteredCompany					is like Company
				EFTCalendar							is like SystemCalendar
				FromDate							is Date
				LocalOriginalCurrency				is a Currency
				LocalPaymentSeq 					is Numeric size 6
				LocalEftAction						is an EftAction
				PrevCustomer						is like Customer
				LocalEFTPrenotification				is AlphaUpper size 1
				LocalContinue						is Boolean
				LocalBaseOpenAmount					is like InternationalAmount
				LocalEFTDiscoutNetAmount			is like InternationalAmount
				LocalPrevDueDate					is a DueDate
				LocalBankDateRange					is a BankDateRange
				LocalExists							is Boolean
				LocalErrorOccured					is Boolean
				LocalRecordsFound					is Boolean
				LocalEFTTransNetAmount				is like InternationalAmount
				PreviousCustomer					is like Customer
				LocalErrorMessage					is Alpha 150
				LocalEFTNetAmount					is like InternationalAmount
				LocalTotalPreNoteCreditsCount				is Numeric 12
				LocalTotalPreNoteDebitsOrInvoicesCount		is Numeric 12
				LocalTotalPreNoteCount						is Numeric 12
				LocalTotalPreNoteDebitsOrInvoicesAmount		is like InternationalAmount
				LocalTotalPreNoteCreditsAmount				is like InternationalAmount
				LocalTotalPreNoteNetAmount					is like InternationalAmount
				LocalTotalFinalNoteDebitsOrInvoicesCount	is Numeric 12
				LocalTotalFinalNoteCreditsCount				is Numeric 12
				LocalTotalFinalNoteCount					is Numeric 12
				LocalTotalFinalNoteDebitsOrInvoicesAmount	is like InternationalAmount
				LocalTotalFinalNoteCreditsAmount			is like InternationalAmount
				LocalEFTCompanyCurrencyOpenAmount			is like InternationalAmount
				LocalEFTDiscountAmount						is like InternationalAmount
				LocalRecordsExists							is Boolean
				LocalEFTCreditCustomer  					is like Customer

			Rule Blocks
				CurrencyCheck
					if (LocalOriginalCurrency != LocalToCurrency)
						if (CurrencyRelationship.FromCurrency != LocalOriginalCurrency)
							CurrencyRelationship.FromCurrency				= LocalOriginalCurrency
							CurrencyRelationship.ToCurrency					= LocalToCurrency
							if (CurrencyRelationship exists)
								LocalExists 								= true
							else
								LocalExists	 								= false

						if (LocalExists)
							CurrencyWork1.FromCurrency						= LocalOriginalCurrency
							CurrencyWork1.BaseAmount.ToCurrency				= LocalToCurrency
							LocalExchangeDate								= LocalDueDate
							LocalCurrencyTable								= ReceivableInvoiceForEFTRel.CurrencyTable
							LocalCurrencyRate								= CurrencyWork1.BaseAmount.OutputCurrencyRate
							if (LocalCurrencyRate not entered)
								LocalErrorOccured 		= true
								invoke Create EFTNotificationExtractErrorResult
									invoked.EFTNotificationExtractResult	= PrmEFTNotificationExtractResult
									invoked.ErrorMessage					= "No Rate SetUp For InvoiceCurrency In EFTCompany"
									invoked.Company							= LocalReceivablesCompany
									invoked.Customer						= LocalCustomer
									invoked.CustomerGroup					= Company.CustomerGroupField.CustomerGroup
									invoked.ReceivableInvoiceDetail			= LocalReceivableInvoiceDetail
									invoked.FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
									invoked.IsSearch				 		= PrmUpdateRecords
						else
							LocalErrorOccured = true
							invoke Create EFTNotificationExtractErrorResult
								invoked.EFTNotificationExtractResult		= PrmEFTNotificationExtractResult
								invoked.ErrorMessage						= "No Relationship Between Transaction Currency And EFTBaseCurrency"
								invoked.Company								= LocalReceivablesCompany
								invoked.Customer							= LocalCustomer
								invoked.CustomerGroup						= Company.CustomerGroupField.CustomerGroup
								invoked.ReceivableInvoiceDetail				= LocalReceivableInvoiceDetail
								invoked.FinanceEnterpriseGroup				= PrmFinanceEnterpriseGroup
								invoked.IsSearch							= PrmUpdateRecords

				CreationEFTTransaction
					initialize LocalErrorOccured
					LocalToCurrency											= LocalEFTBaseCurrency
					if (LocalPrevDueDate != LocalDueDate)
						if (LocalRecordsExists)
							LocalCustomer									= LocalEFTCreditCustomer
						LocalBankDateRange									= first CustomerDraftBankDateRangeRel.BankDateRange
						LocalPrevDueDate									= LocalDueDate
						LocalCustomer										= Customer
					if (LocalBankDateRange entered)
						include CurrencyCheck
						if (!LocalErrorOccured)
							LocalPrmExemptPrenoteForImmediates				= PrmExemptPrenoteForImmediates
							LocalProcessDate								= PrmProcessDate
							LocalPrmOverrideDateTo							= PrmOverrideDateTo
							if (LocalEFTNotification.PrenoteNotSent
							and LocalEFTPrenotification != "E"
							and !IsNotValidForPreNote)
								LocalEFTCompanyCurrencyOpenAmount			= EFTCompanyCurrencyOpenAmount
								LocalEFTDiscountAmount						= EFTDiscountAmount
								LocalEFTNetAmount							= LocalEFTCompanyCurrencyOpenAmount - LocalEFTDiscountAmount
								if (PrmUpdateRecords = "Y")
									LocalEFTTransNetAmount 					= (LocalBaseOpenAmount - LocalEFTDiscoutNetAmount)
									invoke Create ElectronicFundsTransferTransaction
										invoked.ElectronicFundsTransferTransaction.EftType 				= "P"
										invoked.EftNote													= 1
										invoked.EftAction 												= "0"
										invoked.EftDate 												= blank
										invoked.CustomerGroup 											= Company.CustomerGroupField.CustomerGroup
										invoked.ProcessingCompany 										= LocalEFTCompany
										invoked.Company 												= LocalReceivablesCompany
										invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType 	= LocalReceivableInvoiceDetailType
										invoked.ReceivableInvoiceDetail.Invoice 						= LocalInvoice
										invoked.ReceivableInvoiceDetail.PaymentSeq 						= LocalPaymentSeq
										if (LocalEFTCreditCustomer entered)
											invoked.CrCustomer 											= LocalEFTCreditCustomer
										else
											invoked.CrCustomer 											= LocalCustomer
										invoked.ProcessDate 											= PrmProcessDate
										invoked.NetAmt 													= LocalEFTTransNetAmount
										invoked.BankEntity 												= blank
										invoked.BankAccountNumber 										= blank
										invoked.EftExtract 												= 0
										invoked.EftCreated 												= "N"
										invoked.ElectronicFundsTransferTransaction.EftSeq 				= 1
										invoked.EFTNotificationResult									= EFTNotificationExtractResult

									invoke EFTUpdate
										invoked.ReceivableInvoiceDetail.EFTNotification 				= 1

									invoke Create EFTNotiExtractPrenoteInvoiceDetails
										invoked.EFTNotificationExtractResult							= EFTNotificationExtractResult
										invoked.Customer												= LocalCustomer
										invoked.EFTCompany												= EFTNotificationExtractResult.Company
										invoked.Company													= LocalReceivablesCompany
										invoked.ReceivableInvoiceDetail									= LocalReceivableInvoiceDetail
										invoked.IsSearch												= PrmUpdateRecords
										invoked.EFTOpenAmount											= LocalEFTCompanyCurrencyOpenAmount
										invoked.DiscountAmount											= LocalEFTDiscountAmount
										invoked.NetAmount												= LocalEFTNetAmount
								else
									invoke Create EFTNotiExtractPrenoteInvoiceDetails
										invoked.EFTNotificationExtractResult							= EFTNotificationExtractResult
										invoked.Customer												= LocalCustomer
										invoked.EFTCompany												= EFTNotificationExtractResult.Company
										invoked.Company													= LocalReceivablesCompany
										invoked.ReceivableInvoiceDetail									= LocalReceivableInvoiceDetail
										invoked.IsSearch												= PrmUpdateRecords
										invoked.EFTOpenAmount											= LocalEFTCompanyCurrencyOpenAmount
										invoked.DiscountAmount											= LocalEFTDiscountAmount
										invoked.NetAmount												= LocalEFTNetAmount
								if (LocalReceivableInvoiceDetailType = "C")
									LocalTotalPreNoteCreditsCount				+= 1
									LocalTotalPreNoteCreditsAmount				+= LocalEFTNetAmount
								else
									LocalTotalPreNoteDebitsOrInvoicesCount 		+= 1
									LocalTotalPreNoteDebitsOrInvoicesAmount		+= LocalEFTNetAmount
							else
								if  ((LocalEftAction.Added
								or   LocalEftAction.AddedPostponed)
								or  (LocalDueDate >= FromDate
								and  LocalDueDate <= LocalToDate))
									LocalEFTCompanyCurrencyOpenAmount			= EFTCompanyCurrencyOpenAmount
									LocalEFTDiscountAmount						= EFTDiscountAmount
									LocalEFTNetAmount							= LocalEFTCompanyCurrencyOpenAmount - LocalEFTDiscountAmount
									if (PrmUpdateRecords = "Y")
										LocalEFTTransNetAmount 					= (LocalBaseOpenAmount - LocalEFTDiscoutNetAmount)
										invoke Create ElectronicFundsTransferTransaction
											invoked.ElectronicFundsTransferTransaction.EftType 			= "N"
											invoked.EftNote												= 2
											invoked.EftAction 											= LocalEftAction
											invoked.EftDate 											= LocalToDate
											invoked.CustomerGroup 										= Company.CustomerGroupField.CustomerGroup
											invoked.ProcessingCompany 									= LocalEFTCompany
											invoked.Company 											= LocalReceivablesCompany
											invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType = LocalReceivableInvoiceDetailType
											invoked.ReceivableInvoiceDetail.Invoice 					= LocalInvoice
											invoked.ReceivableInvoiceDetail.PaymentSeq 					= LocalPaymentSeq
											if (LocalEFTCreditCustomer entered)
												invoked.CrCustomer 										= LocalEFTCreditCustomer
											else
												invoked.CrCustomer 										= LocalCustomer
											invoked.ProcessDate 										= PrmProcessDate
											invoked.NetAmt 												= LocalEFTTransNetAmount
											invoked.BankEntity 											= blank
											invoked.BankAccountNumber 									= blank
											invoked.EftExtract 											= 0
											invoked.EftCreated 											= "N"
											invoked.ElectronicFundsTransferTransaction.EftSeq 			= 1
											invoked.EFTNotificationResult								= EFTNotificationExtractResult

										invoke EFTUpdate
											invoked.ReceivableInvoiceDetail.EFTNotification 			= 2

										invoke Create EFTNotiExtractFinalNoteInvoiceDetails
											invoked.EFTNotificationExtractResult					= EFTNotificationExtractResult
											invoked.Customer										= LocalCustomer
											invoked.EFTCompany										= EFTNotificationExtractResult.Company
											invoked.Company											= LocalReceivablesCompany
											invoked.ReceivableInvoiceDetail							= LocalReceivableInvoiceDetail
											invoked.IsSearch										= PrmUpdateRecords
											invoked.EFTOpenAmount											= LocalEFTCompanyCurrencyOpenAmount
											invoked.DiscountAmount											= LocalEFTDiscountAmount
											invoked.NetAmount												= LocalEFTNetAmount
									else
										invoke Create EFTNotiExtractFinalNoteInvoiceDetails
											invoked.EFTNotificationExtractResult						= EFTNotificationExtractResult
											invoked.Customer											= LocalCustomer
											invoked.EFTCompany											= EFTNotificationExtractResult.Company
											invoked.Company												= LocalReceivablesCompany
											invoked.ReceivableInvoiceDetail								= LocalReceivableInvoiceDetail
											invoked.IsSearch											= PrmUpdateRecords
											invoked.EFTOpenAmount											= LocalEFTCompanyCurrencyOpenAmount
											invoked.DiscountAmount											= LocalEFTDiscountAmount
											invoked.NetAmount												= LocalEFTNetAmount
									if (LocalReceivableInvoiceDetailType = "C")
										LocalTotalFinalNoteCreditsCount	+= 1
										LocalTotalFinalNoteCreditsAmount			+= LocalEFTNetAmount
									else
										LocalTotalFinalNoteDebitsOrInvoicesCount += 1
										LocalTotalFinalNoteDebitsOrInvoicesAmount	+= LocalEFTNetAmount
					else
						invoke Create EFTNotificationExtractErrorResult
							invoked.EFTNotificationExtractResult			= EFTNotificationExtractResult
							invoked.ErrorMessage							= "Due Date Not Within Bank Date Range Or Bank Not Prenoted"
							invoked.Company									= LocalReceivablesCompany
							if (LocalEFTCreditCustomer entered)
								invoked.Customer 							= LocalEFTCreditCustomer
							else
								invoked.Customer 							= LocalCustomer
							invoked.CustomerGroup							= Company.CustomerGroupField.CustomerGroup
							invoked.ReceivableInvoiceDetail					= LocalReceivableInvoiceDetail
							invoked.FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
							invoked.IsSearch								= PrmUpdateRecords

			Action Rules
				Empty Set Rules
					LocalFEG								= PrmFinanceEnterpriseGroup
					EFTNotificationExtractResult 			= PrmEFTNotificationExtractResult
					if (PrmCompany entered)
						LocalEFTCompany						= PrmCompany
						LocalPrmCustomerGroup				= PrmCompany.CustomerGroupField.CustomerGroup
						LocalEFTBaseCurrency				= PrmCompany.Currency
						LocalEFTDueDays						= PrmCompany.EFTDueDays
						LocalEFTDueDaysType					= PrmCompany.EFTDueDaysType
						LocalEFTCalendar					= PrmCompany.EFTCalendar
					else
						LocalEFTCompany						= PrmEFTCompany
						LocalPrmCustomerGroup				= PrmCustomerGroup
						LocalEFTBaseCurrency				= LocalEFTCompany.Currency
						LocalEFTDueDays						= PrmCustomerGroup.EFTDueDays
						LocalEFTDueDaysType					= PrmCustomerGroup.EFTDueDaysType
						LocalEFTCalendar					= PrmCustomerGroup.EFTCalendar

					if (PrmOverrideDateFrom entered)
						LocalFromDate						= PrmOverrideDateFrom
						LocalToDate							= PrmOverrideDateTo
					else
						if (PrmProcessDate entered)
							LocalFromDate					= PrmProcessDate
						else
							LocalFromDate					= current corporate date
						LocalToDate							= DerivedActualBankDate

					invoke FastUpdate EFTNotificationExtractResult
						invoked.ProcessingCompany		= LocalEFTCompany
						invoked.CustomerGroup			= PrmCustomerGroup
						invoked.EFTBaseCurrency			= LocalEFTBaseCurrency
						invoked.FromDate				= LocalFromDate
						invoked.ToDate					= LocalToDate

					invoke UpdateStatusOnResult EFTNotificationExtractResult
						invoked.PrmRecordsExists 			= false

				Set Rules
					Entrance Rules
						EFTNotificationExtractResult 		= PrmEFTNotificationExtractResult
						LocalFinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
						if (PrmCompany entered)
							LocalEnteredCompany				= PrmCompany
							LocalEFTCompany					= PrmCompany
							LocalEFTBaseCurrency			= PrmCompany.Currency
							LocalEFTDueDays					= PrmCompany.EFTDueDays
							EFTDueDaysType					= PrmCompany.EFTDueDaysType
							EFTCalendar						= PrmCompany.EFTCalendar
						else
							LocalEnteredCompany				= blank
							LocalEFTCompany					= PrmEFTCompany
							LocalEFTBaseCurrency			= LocalEFTCompany.Currency
							LocalEFTDueDays					= PrmCustomerGroup.EFTDueDays
							EFTDueDaysType					= PrmCustomerGroup.EFTDueDaysType
							EFTCalendar						= PrmCustomerGroup.EFTCalendar

						if (PrmOverrideDateFrom entered)
							FromDate						= PrmOverrideDateFrom
							LocalToDate						= PrmOverrideDateTo
						else
							if (PrmProcessDate entered)
								FromDate					= PrmProcessDate
							else
								FromDate					= current corporate date
							LocalEFTDueDaysType				= EFTDueDaysType
							LocalFEG						= PrmFinanceEnterpriseGroup
							LocalEFTCalendar				= EFTCalendar
							LocalFromDate					= FromDate
							LocalToDate						= DerivedActualBankDate

						invoke FastUpdate EFTNotificationExtractResult
							invoked.ProcessingCompany	= LocalEFTCompany
							invoked.CustomerGroup		= PrmCustomerGroup
							invoked.EFTBaseCurrency		= LocalEFTBaseCurrency
							invoked.FromDate			= FromDate
							invoked.ToDate				= LocalToDate
							invoked.Status				= 0

					Exit Rules
						EFTNotificationExtractResult		= PrmEFTNotificationExtractResult
						invoke FastUpdate EFTNotificationExtractResult
							invoked.PreNoteTotalCreditsCount				= LocalTotalPreNoteCreditsCount
							invoked.PreNoteTotalDebitsOrInvoicesCount		= LocalTotalPreNoteDebitsOrInvoicesCount
							LocalTotalPreNoteCount							= LocalTotalPreNoteCreditsCount + LocalTotalPreNoteDebitsOrInvoicesCount
							invoked.PreNoteTotalCount						= LocalTotalPreNoteCount
							invoked.PreNoteTotalDebitsOrInvoicesAmount		= LocalTotalPreNoteDebitsOrInvoicesAmount
							invoked.PreNoteTotalCreditsAmount				= LocalTotalPreNoteCreditsAmount
							invoked.PreNoteTotalNetAmount					= LocalTotalPreNoteDebitsOrInvoicesAmount + LocalTotalPreNoteCreditsAmount
							invoked.FinalNoteTotalDebitsOrInvoicesCount		= LocalTotalFinalNoteDebitsOrInvoicesCount
							invoked.FinalNoteTotalCreditsCount				= LocalTotalFinalNoteCreditsCount
							LocalTotalFinalNoteCount						= LocalTotalFinalNoteDebitsOrInvoicesCount + LocalTotalFinalNoteCreditsCount
							invoked.FinalNoteTotalCount						= LocalTotalFinalNoteCount
							invoked.FinalNoteTotalDebitsOrInvoicesAmount	= LocalTotalFinalNoteDebitsOrInvoicesAmount
							invoked.FinalNoteTotalCreditsAmount				= LocalTotalFinalNoteCreditsAmount
							invoked.FinalNoteTotalNetAmount					= LocalTotalFinalNoteDebitsOrInvoicesAmount + LocalTotalFinalNoteCreditsAmount
							invoked.CompanyTotalCount						= LocalTotalPreNoteCount + LocalTotalFinalNoteCount
						invoke UpdateStatusOnResult EFTNotificationExtractResult
							invoked.PrmRecordsExists 		= true

				Instance Rules
					initialize LocalErrorOccured
					EFTNotificationExtractResult 			= PrmEFTNotificationExtractResult
					LocalFEG								= LocalFinanceEnterpriseGroup
					LocalDueDate							= DueDate
					LocalReceivablesCompany					= Company
					LocalCustomer							= Customer
					LocalOriginalCurrency					= OriginalCurrency
					LocalReceivableInvoiceDetail			= ReceivableInvoiceDetail
					LocalReceivableInvoiceDetailType 		= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					LocalInvoice 							= ReceivableInvoiceDetail.Invoice
					LocalPaymentSeq 						= ReceivableInvoiceDetail.PaymentSeq
					LocalEFTNotification					= EFTNotification
					LocalEftAction							= EftAction
					LocalCompany							= LocalEnteredCompany
					if (Customer != PrevCustomer)
						initialize LocalPrevDueDate
						initialize LocalContinue
						initialize LocalRecordsExists
						initialize LocalEFTCreditCustomer
						PrevCustomer						= Customer
						if (ElectronicFundsTransferCustomerGroupRel not exists)		
							if (CustomerDraftBankRel exists
							and ReceivableEFTNotifyExistsRel exists)
								LocalEFTPrenotification		= ReceivableEFTNotifyExistsRel.EFTPrenotification
								LocalContinue				= true
						else
							LocalEFTCreditCustomer			= ElectronicFundsTransferCustomerGroupRel.ElectronicFundsTransferCustomerGroup.CreditCustomer
							LocalCustomer					= LocalEFTCreditCustomer
							if (CustomerDraftBankRel exists
							and ReceivableEFTNotifyExistsRel exists)
								LocalEFTPrenotification		= ReceivableEFTNotifyExistsRel.EFTPrenotification
								LocalRecordsExists			= true
								LocalCustomer 				= Customer
							else
								LocalContinue				= false
								LocalRecordsExists			= false

					if (LocalContinue
					or LocalRecordsExists)
						if (PrmCompany entered)
							LocalBaseOpenAmount									= BaseOpenAmount
							LocalEFTDiscoutNetAmount							= EFTDiscoutNetAmount
							include CreationEFTTransaction
						else
							if (PrmCompany not entered)
								LocalFromAccountingEntity						= LocalEFTCompany.AccountingEntity
								LocalToAccountingEntity							= GeneralLedgerCompanyRel.AccountingEntity
								LocalBaseOpenAmount								= BaseOpenAmount
								LocalEFTDiscoutNetAmount						= EFTDiscoutNetAmount
								if (LocalReceivablesCompany != LocalEFTCompany)
									if ((LocalFromAccountingEntity = LocalToAccountingEntity) or GLInterEntityRelationRel exists)
										LocalReceivablesCompany 				= LocalEFTCompany
										if (CompanyCustomerExistsRel exists)
											LocalReceivablesCompany 			= Company
											include CreationEFTTransaction
										else
											LocalErrorMessage 					= "Customer Has Not Been SetUp In Default EFTCompany"
											invoke Create EFTNotificationExtractErrorResult
												invoked.EFTNotificationExtractResult	= PrmEFTNotificationExtractResult
												invoked.ErrorMessage					= LocalErrorMessage
												invoked.Company							= LocalReceivablesCompany
												invoked.Customer						= LocalCustomer
												invoked.CustomerGroup					= PrmCustomerGroup
												invoked.FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
												invoked.IsSearch						= PrmUpdateRecords
									else
										LocalErrorMessage 						= "Inter Company Relationship Does Not Exist With EFTCompany"
										invoke Create EFTNotificationExtractErrorResult
											invoked.EFTNotificationExtractResult		= PrmEFTNotificationExtractResult
											invoked.ErrorMessage						= LocalErrorMessage
											invoked.Company								= LocalReceivablesCompany
											invoked.Customer							= LocalCustomer
											invoked.CustomerGroup						= PrmCustomerGroup
											invoked.FinanceEnterpriseGroup				= PrmFinanceEnterpriseGroup
											invoked.IsSearch							= PrmUpdateRecords
								else
									include CreationEFTTransaction

		EFTExtract is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup					is a FinanceEnterpriseGroup
				PrmCustomerGroup							is like CustomerGroup
				PrmCompany				 					is a ReceivableCompany
				PrmOverrideDateFrom							is Date
				PrmOverrideDateTo		  					is Date
				PrmProcessDate			 					is Date
				PrmFromDate									is Date
				PrmToDate									is Date
				PrmTermsCode								is a TermsCode
					context of PrmFinanceEnterpriseGroup
				PrmBankTransactionCode						is like BankTransactionCode
				PrmDataFileName								is AlphaUpper size 50
				PrmUpdateRecords							is AlphaUpper size 1
				PrmEFTExtractResult							is like EFTExtractResult
				PrmEFTCompany								is a ReceivableCompany

			Parameter Rules
				PrmCompany
					constraint (PrmCompany.EFTDebitCashCode entered)
						"NoCashCodeSetUpFor<PrmCompany>"

				PrmCustomerGroup
					LocalPrmCustomerGroup					= PrmCustomerGroup
					PrmEFTCompany							= first CompanyWithDebitCashCodeRel.Company
					constraint (PrmEFTCompany entered)
						"NoDefaultProcessingSetUpForGroup<PrmCustomerGroup>"

			Instance Selection
				where (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and   ((PrmCompany entered
				and	 Company = PrmCompany)
				or	 (PrmCustomerGroup entered
				and	 Company.CustomerGroupField.CustomerGroup = PrmCustomerGroup))
				and   (PrmBankTransactionCode not entered
				or 	  (PrmBankTransactionCode entered
				and	 BankTransactionCode 			= PrmBankTransactionCode))
				and	BankTransactionCode.TransactionOrigin.Receivable
				and	BankTransactionCode.BankTransactionType.CashPayment
				and   (EftExtract.NotExtracted
				or 	   EftExtract.AdjustmentMade)
				and   BaseOpenAmount > 0
				and   (PrmTermsCode not entered
				or	 (PrmTermsCode entered
				and	 TermsCode = PrmTermsCode))
				and   ((DueDate >= PrmFromDate
				and	DueDate <= PrmToDate)
				or	 (EftAction.Added
				or 		EftAction.AddedPostponed
				or	  EftAction.Postponed
				or	  EftAction.Hold)))

			Sort Order
				Customer
				CompanyCustomerRel.CreditAnalyst

			Local Fields
				EFTCompany										is a ReceivableCompany
				LocalEFTBaseCurrency							is a Currency
				LocalAmount										is an InternationalAmount
				LocalEntity										is like BankEntity
				LocalAccountNumber				  				is a BankAccountNumber
				LocalBankAccountType							is AlphaUpper size 2
				EFTTranNetAmt									is like InternationalAmount
				LocalEFTType									is AlphaUpper size 1
				LocalContinue									is Boolean
				LocalBrazilFlag									is Boolean
				LocalPaymentSeq 								is Numeric size 6
				LocalEFTSequence								is like Sequence
				LocalEFTAction									is like EftAction
				LocalExceptionsMessage							is Alpha 150
				PrevCustomer									is like Customer
				PreviousCustomer								is like Customer
				LocalEFTCreditCustomer  						is like Customer
				LocalEFTExtractDiscoutNetAmount  				is like InternationalAmount
				LocalEnteredCompany								is like Company
				LocalCreditAnalyst								is like CreditAnalyst
				PreviousCreditAnalyst							is like CreditAnalyst
				LocalBaseOpenAmount								is like InternationalAmount
				LocalException									is Boolean
				LocalSelectedRecords							is Boolean
				LocalSelected									is Boolean
				LocalExtractedAdjustmentCreditsCount			is Numeric 12
				LocalExtractedAdjustmentDebitsOrInvoicesCount	is Numeric 12
				LocalExtractedAdjustmentsCount					is Numeric 12
				LocalExtractedCreditsCount						is Numeric 12
				LocalExtractedDebitsOrInvoicesCount				is Numeric 12
				LocalExtractedCount								is Numeric 12
				LocalAdjustmentCreditsAmount					is like InternationalAmount
				LocalAdjustmentDebitsOrInvoicesAmount			is like InternationalAmount
				LocalExtractedCreditsAmount						is like InternationalAmount
				LocalExtractedDebitsOrInvoicesAmount			is like InternationalAmount
				LocalEFTExtractAmount							is like InternationalAmount
				LocalEFTExtractCompanyCurrencyOpenAmount		is like InternationalAmount
				LocalEFTExtractBaseDiscountAmount				is like InternationalAmount
				LocalEFTExtractTransactionAmount				is like InternationalAmount
				DiscAmount										is like InternationalAmount
				LocalHold										is Boolean
				LocalCustomerNetAmount							is like InternationalAmount
				LocalNetAmount									is like InternationalAmount
				LocalCustomerOpenAmount							is like InternationalAmount
				LocalPrmProcessDate								is Date
				LocalProcessDate								is Date
				LocalErrorMessage								is Alpha 150
				LocalPrenoteStatus								is Numeric size 1
				LocalPrenotificationRequired					is Boolean
				LocalPrenotificationDate						is Date
				LocalExtractInvoiceDetailExists					is Boolean
				LocalHoldRecords								is Boolean
				LocalFinalRecord								is Boolean
				LocalRecordsSelected							is Boolean
				LocalCreditBalanceRecord						is Boolean

			Rule Blocks
				CurrencyCalculation
					if (each.OriginalCurrency != LocalEFTBaseCurrency)
						initialize CurrencyWork
						CurrencyWork.TransactionAmount		= each.SignedTransactionAmount
						CurrencyWork.FinanceEnterpriseGroup	= each.GeneralLedgerCompanyRel.FinanceEnterpriseGroup 
						CurrencyWork.ExchangeDate			= each.TransactionDate
						CurrencyWork.FromCurrency			= each.OriginalCurrency.Currency
						CurrencyWork.BaseAmount.ToCurrency	= LocalEFTBaseCurrency
						LocalCustomerOpenAmount 			= CurrencyWork.BaseAmount.OutputCurrencyAmount
					else
						LocalCustomerOpenAmount 			= each.SignedTransactionAmount

					LocalDepositeDate = LocalPrmProcessDate
					initialize LocalEFTDiscountAmount
					if (each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount not entered
					and each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount not entered)
						I1 = 1
						while (I1 <= 3)
							if (LocalEFTDiscountAmount not entered
							and each.DiscountDate.DiscDate[I1] entered
							and each.DiscountDate.DiscDate[I1] + CompanyCustomerRel.ApplicationDiscountGraceDays >= LocalDepositeDate)
								if (each.DiscountAmount.OrigDiscAmt[I1] entered)
									if (each.OriginalCurrency != LocalEFTBaseCurrency)
										CurrencyWork.FinanceEnterpriseGroup	= each.GeneralLedgerCompanyRel.FinanceEnterpriseGroup  
										if (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType = "C")
											CurrencyWork.TransactionAmount  = each.DiscountAmount.OrigDiscAmt[I1] * -1
										else
											CurrencyWork.TransactionAmount	= each.DiscountAmount.OrigDiscAmt[I1]
										CurrencyWork.ExchangeDate			= each.TransactionDate
										CurrencyWork.FromCurrency			= each.OriginalCurrency
										CurrencyWork.BaseAmount.ToCurrency	= LocalEFTBaseCurrency
										LocalEFTDiscountAmount				= CurrencyWork.BaseAmount.OutputCurrencyAmount
									else
										if (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType = "C")
											LocalEFTDiscountAmount	= each.DiscountAmount.OrigDiscAmt[I1] * -1
										else
											LocalEFTDiscountAmount	= each.DiscountAmount.OrigDiscAmt[I1]
							I1 += 1
					LocalNetAmount				= LocalCustomerOpenAmount - LocalEFTDiscountAmount
					LocalCustomerNetAmount 	   += LocalNetAmount

				CreationOfEFTTransaction
					LocalEFTExtractCompanyCurrencyOpenAmount		= EFTExtractCompanyCurrencyOpenAmount
					LocalEFTExtractBaseDiscountAmount				= EFTExtractBaseDiscountAmount
					LocalEFTExtractAmount							= LocalEFTExtractCompanyCurrencyOpenAmount - LocalEFTExtractBaseDiscountAmount
					if (PrmUpdateRecords = "Y")
						EFTTranNetAmt 			= LocalBaseOpenAmount - LocalEFTExtractDiscoutNetAmount
						invoke Create ElectronicFundsTransferTransaction
							if (EftAction.Postponed or EftAction.Deleted or EftAction.Hold)
								invoked.EftExtract = 8
							else
								invoked.EftExtract = 9
							if(EftAction = blank)
								invoked.EftAction 											= "0"
							else
								invoked.EftAction 											= EftAction
							if (LocalEFTType = "D" and LocalBrazilFlag = true)
								invoked.TemporaryHold = "S"
								invoked.EftAction	 = "6"
							invoked.ElectronicFundsTransferTransaction.EftType 				= LocalEFTType
							invoked.ElectronicFundsTransferTransaction.EftSeq				= LocalEFTSequence
							invoked.CustomerGroup 											= Company.CustomerGroupField.CustomerGroup
							invoked.ProcessingCompany 										= LocalEFTCompany
							if (LocalEFTCreditCustomer entered)
								LocalCreditCustomer = LocalEFTCreditCustomer
							else
								LocalCreditCustomer = LocalCustomer
							invoked.CrCustomer	 											= LocalCreditCustomer
							invoked.Company 		  										= LocalReceivablesCompany
							invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType 	= LocalReceivableInvoiceDetailType
							invoked.ReceivableInvoiceDetail.Invoice							= LocalInvoice
							invoked.ReceivableInvoiceDetail.PaymentSeq						= LocalPaymentSeq
							invoked.ProcessDate												= LocalPrmProcessDate
							invoked.EftDate													= PrmToDate
							invoked.NetAmt													= EFTTranNetAmt
							invoked.BankEntity												= LocalEntity
							invoked.BankAccountNumber										= LocalAccountNumber
							invoked.EftCreated												= "N"
							invoked.EftNote													= EFTNotification
							invoked.EFTExtractResult										= EFTExtractResult
							invoked.EFTExtractOpenAmount									= LocalEFTExtractCompanyCurrencyOpenAmount
							invoked.EFTExtractDiscountAmount								= LocalEFTExtractBaseDiscountAmount
							invoked.EFTExtractNetAmount										= LocalEFTExtractAmount
						if (EftAction = 1 or  EftAction = 2 or  EftAction = 3 or  EftAction = 6)
							include CreationOfEFTExtractInvoiceDetail
							LocalExtractInvoiceDetailExists	= true
					else
						include CreationOfEFTExtractInvoiceDetail
						if (!LocalSelectedRecords
						and (EftAction != 6 and EftAction != 2 and EftAction != 3)
						and LocalReceivableInvoiceDetailType = "C")
							LocalSelectedRecords	= true
						if (EftAction = blank or EftAction = 0 or EftAction = 1 or EftAction = 5)
							if (LocalReceivableInvoiceDetailType = "C")
								LocalExtractedCreditsCount						+= 1
								LocalExtractedCreditsAmount						+= LocalEFTExtractAmount
							else
								LocalExtractedDebitsOrInvoicesCount				+= 1
								LocalExtractedDebitsOrInvoicesAmount			+= LocalEFTExtractAmount
						if (EftAction = 1 or EftAction = 2 or EftAction = 3 or EftAction = 6)
							if (LocalReceivableInvoiceDetailType = "C")
								LocalExtractedAdjustmentCreditsCount			+= 1
								LocalAdjustmentCreditsAmount 					+= LocalEFTExtractAmount
							else
								LocalExtractedAdjustmentDebitsOrInvoicesCount	+= 1
								LocalAdjustmentDebitsOrInvoicesAmount 			+= LocalEFTExtractAmount

				CreationOfEFTExtractInvoiceDetail
					invoke Create EFTExtractInvoiceDetails
						invoked.FinanceEnterpriseGroup						= LocalFEG
						invoked.ProcessingCompany							= LocalEFTCompany
						invoked.EFTExtractResult							= EFTExtractResult
						invoked.Customer									= Customer
						invoked.EFTCompany									= Company
						invoked.TransType 									= LocalReceivableInvoiceDetailType
						invoked.Invoice										= LocalInvoice
						invoked.ReceivableInvoiceDetail						= LocalReceivableInvoiceDetail
						invoked.NoteMethod									= ReceivableEFTNotifyExistsMethodRel.EFTNotificationMethod
						invoked.AltEdiType									= ProcessingCompanyCustomerRel.AlternateEDIType
						invoked.AltEdiNbr									= ProcessingCompanyCustomerRel.AlternateEDINumber
						invoked.FaxNumber									= ProcessingCompanyCustomerRel.FaxNumber
						invoked.EDINumber									= ProcessingCompanyCustomerRel.EDINumber
						invoked.CreditAnalyst								= LocalCreditAnalyst
						invoked.Contact										= ProcessingCompanyCustomerRel.Contact
						invoked.TransactionDate 							= TransactionDate
						invoked.DiscountDate 								= DerivedEFTExtractDiscountDate
						invoked.DueDate 									= DueDate
						if (LocalReceivableInvoiceDetailType = "C")
							LocalEFTExtractTransactionAmount				= EFTExtractTransactionAmount * -1
							DiscAmount 										= LocalEFTExtractBaseDiscountAmount * -1
						else
							LocalEFTExtractTransactionAmount				= EFTExtractTransactionAmount
							DiscAmount 										= LocalEFTExtractBaseDiscountAmount
						invoked.TransactionAmount							= LocalEFTExtractTransactionAmount
						invoked.DiscAmount 									= DiscAmount
						invoked.OpenAmount 									= LocalEFTExtractTransactionAmount - DiscAmount
						invoked.BankEntity									= LocalEntity
						invoked.BankAccountNumber							= LocalAccountNumber
						invoked.IsSearch									= PrmUpdateRecords
						invoked.EFTOpenAmount								= LocalEFTExtractCompanyCurrencyOpenAmount
						invoked.DiscountAmount								= LocalEFTExtractBaseDiscountAmount
						invoked.NetTotalAmount								= LocalEFTExtractAmount

				EFTExtractBlock
					if (EftExtract.AdjustmentMade)
						LocalEFTSequence					= 1
						LocalEFTTransactionWithTypeA		= last EFTTransactionWithTypeARel.ElectronicFundsTransferTransaction
						if (LocalEFTTransactionWithTypeA entered)
							LocalEFTAction	 				= LocalEFTTransactionWithTypeA.EftAction
							LocalEFTSequence				= LocalEFTTransactionWithTypeA.ElectronicFundsTransferTransaction.EftSeq
							LocalEFTSequence			   += 1
						if (!(EftAction = "6" and LocalEFTAction = "6"))
							LocalEFTType					= "A"
							include CreationOfEFTTransaction
							if (PrmUpdateRecords = "Y")
								if (EFTTransactionWithTypeDRel exists)
									invoke Delete EFTTransactionWithTypeDRel
								invoke EFTUpdate
									if (EftAction = 2)
										invoked.EftAction   = 5
									invoked.EftExtract	  = 0
									if (EftAction = 3)
										invoked.EftAction   = 0
										invoked.EftExtract  = 9
						else
							LocalHoldRecords = true
					else
						if (EftAction != "6" and LocalErrorMessage not entered)
							if (LocalEntity entered)
								if (OriginIntrastatCountry entered
								and OriginIntrastatCountry = DestinationIntrastatCountry
								and TaxEntityRel.ThirdParty = "B")
									LocalBrazilFlag = true
								LocalEFTType = "D"
								LocalEFTSequence = 1
								include CreationOfEFTTransaction
								if (PrmUpdateRecords = "Y")
									invoke EFTUpdate
										invoked.EftExtract = 9
										if (LocalBrazilFlag)
											invoked.TemporaryHold = "S"

					if (PrmUpdateRecords = "Y" and !LocalSelectedRecords
					and ((EftExtract = 8 or EftExtract = 9) and EftAction != 6)
					and LocalReceivableInvoiceDetailType = "C")
						LocalSelectedRecords	= true
					invoke Update EFTExtractInvoiceDetailsRel
						invoked.EftAction = EftAction

			Action Rules
				Empty Set Rules
					LocalFEG								= PrmFinanceEnterpriseGroup
					EFTExtractResult 						= PrmEFTExtractResult
					if (PrmCompany entered)
						EFTCompany							= PrmCompany
						LocalEFTBaseCurrency				= PrmCompany.Currency
					else
						EFTCompany							= PrmEFTCompany
						LocalEFTBaseCurrency				= EFTCompany.Currency
					invoke FastUpdate EFTExtractResult
						invoked.ProcessingCompany			= EFTCompany
						invoked.CustomerGroup				= PrmCustomerGroup
						invoked.EFTBaseCurrency				= LocalEFTBaseCurrency
						invoked.FromDate					= PrmFromDate
						invoked.ToDate						= PrmToDate
						invoked.Status						= 1
					invoke UpdateStatusOnResult EFTExtractResult
						invoked.PrmRecordsExists 			= false

				Set Rules
					Entrance Rules
						initialize LocalAmount
						initialize LocalExtractInvoiceDetailExists
						EFTExtractResult 						= PrmEFTExtractResult
						LocalFEG								= PrmFinanceEnterpriseGroup
						if (PrmCompany entered)
							LocalEnteredCompany					= PrmCompany
							EFTCompany							= PrmCompany
							LocalEFTBaseCurrency				= PrmCompany.Currency
						else
							LocalEnteredCompany					= blank
							EFTCompany							= PrmEFTCompany
							LocalEFTBaseCurrency				= EFTCompany.Currency
						invoke FastUpdate EFTExtractResult
							invoked.ProcessingCompany			= EFTCompany
							invoked.CustomerGroup				= PrmCustomerGroup
							invoked.EFTBaseCurrency				= LocalEFTBaseCurrency
							invoked.FromDate					= PrmFromDate
							invoked.ToDate						= PrmToDate
							invoked.Status						= 0

					Exit Rules
						EFTExtractResult						= PrmEFTExtractResult
						LocalFEG								= PrmFinanceEnterpriseGroup
						invoke FastUpdate EFTExtractResult
							invoked.ExtractedAdjustmentCreditsCount				= LocalExtractedAdjustmentCreditsCount
							invoked.ExtractedAdjustmentDebitsOrInvoicesCount	= LocalExtractedAdjustmentDebitsOrInvoicesCount
							LocalExtractedAdjustmentsCount		= LocalExtractedAdjustmentCreditsCount + LocalExtractedAdjustmentDebitsOrInvoicesCount
							invoked.ExtractedAdjustmentsCount					= LocalExtractedAdjustmentsCount
							invoked.ExtractedCreditsCount						= LocalExtractedCreditsCount
							invoked.ExtractedDebitsOrInvoicesCount				= LocalExtractedDebitsOrInvoicesCount
							LocalExtractedCount					= LocalExtractedCreditsCount + LocalExtractedDebitsOrInvoicesCount
							invoked.ExtractedCount								= LocalExtractedCount
							invoked.CompanyCount								= LocalExtractedAdjustmentsCount + LocalExtractedCount
							invoked.AdjustmentCreditsAmount						= LocalAdjustmentCreditsAmount
							invoked.AdjustmentDebitsOrInvoicesAmount			= LocalAdjustmentDebitsOrInvoicesAmount
							invoked.AdjustmentNetAmount							= LocalAdjustmentCreditsAmount + LocalAdjustmentDebitsOrInvoicesAmount
							invoked.ExtractedCreditsAmount						= LocalExtractedCreditsAmount
							invoked.ExtractedDebitsOrInvoicesAmount				= LocalExtractedDebitsOrInvoicesAmount
							invoked.ExtractedNetAmount							= LocalExtractedCreditsAmount + LocalExtractedDebitsOrInvoicesAmount
						if (PrmUpdateRecords = "Y")
							if (LocalExtractInvoiceDetailExists)
								invoke ProcessEFTExtractOutput EFTExtractInvoiceDetails
									invoked.PrmDataFileName				= PrmDataFileName
									invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
									invoked.PrmProcessingCompany		= EFTCompany
									invoked.PrmEFTExtractResult			= EFTExtractResult
									invoked.PrmEnteredCompany			= LocalCompany
							else
								invoke UpdateStatusOnResult EFTExtractResult
									invoked.PrmRecordsExists 			= true
						if (PrmUpdateRecords = "N")
							invoke UpdateStatusOnResult EFTExtractResult
								invoked.PrmRecordsExists 				= true

				Instance Rules
					EFTExtractResult 						 	= PrmEFTExtractResult
					LocalFEG								 	= PrmFinanceEnterpriseGroup
					LocalCompany							 	= LocalEnteredCompany
					LocalCustomer							 	= Customer
					LocalEFTCompany							 	= EFTCompany
					LocalReceivablesCompany					 	= Company
					LocalDueDate							 	= DueDate
					LocalFromDate							 	= PrmFromDate
					LocalToDate								 	= PrmToDate
					LocalReceivableInvoiceDetail			 	= ReceivableInvoiceDetail
					LocalReceivableInvoiceDetailType 		 	= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
					LocalInvoice 							 	= ReceivableInvoiceDetail.Invoice
					LocalPaymentSeq 						 	= ReceivableInvoiceDetail.PaymentSeq
					LocalCreditAnalyst							= CompanyCustomerRel.CreditAnalyst
					LocalPrmProcessDate							= PrmProcessDate

					initialize LocalException
					initialize LocalEFTSequence
					initialize LocalHoldRecords
					initialize LocalFinalRecord
					initialize LocalRecordsSelected

					if (Customer != PreviousCustomer
					or LocalCreditAnalyst != PreviousCreditAnalyst)
						initialize LocalSelectedRecords
						initialize LocalSelected
						initialize LocalHold
						initialize LocalCreditBalanceRecord
						LocalException 							= true
						PreviousCustomer	 			 		= Customer
						PreviousCreditAnalyst 					= LocalCreditAnalyst

					if (Customer != PrevCustomer)
						initialize LocalCustomerNetAmount
						initialize LocalErrorMessage
						initialize LocalPrenotificationRequired
						initialize LocalEFTPrenotification
						initialize LocalEntity
						initialize LocalAccountNumber
						initialize LocalBankAccountType
						initialize LocalPrenoteStatus
						initialize LocalPrenotificationDate
						initialize LocalEFTCreditCustomer
						PrevCustomer								= Customer
						LocalDraftBank								= first CustomerDraftBankValidationRel.CustomerDraftBank
						if (LocalDraftBank entered
						and ReceivableEFTNotifyExistsRel exists)
							LocalEFTPrenotification					= ReceivableEFTNotifyExistsRel.EFTPrenotification
							LocalBankAccountType					= LocalDraftBank.EFTBankAccountType
							LocalContinue 							= true
						else
							if (ElectronicFundsTransferCustomerGroupRel exists)
								LocalEFTCreditCustomer  			= ElectronicFundsTransferCustomerGroupRel.ElectronicFundsTransferCustomerGroup.CreditCustomer
								LocalCustomer						= LocalEFTCreditCustomer
								if (CustomerDraftBankValidationRel exists
								and ReceivableEFTNotifyExistsRel exists)
									LocalEFTPrenotification			= ReceivableEFTNotifyExistsRel.EFTPrenotification
									LocalBankAccountType			= first CustomerDraftBankValidationRel.EFTBankAccountType
									LocalContinue 					= true
							else
								LocalContinue 						= false
						LocalCustomerDraftBank						= first CustomerDraftBankValidityRel.CustomerDraftBank
						LocalEntity			 						= LocalCustomerDraftBank.BOEEFTBank
						LocalAccountNumber 							= LocalCustomerDraftBank.BOEEFTBankAccount
						LocalPrenoteStatus							= LocalCustomerDraftBank.PrenoteStatus
						LocalPrenotificationRequired				= LocalCustomerDraftBank.PrenotificationRequired
						LocalPrenotificationDate					= LocalCustomerDraftBank.PrenotificationDate

						if (LocalContinue)
							if (PrmCompany entered)
								for each EligibleCompanyReceivableInvoiceDetailRel
									include CurrencyCalculation
							else
								for each EligibleReceivableInvoiceDetailRel
									include CurrencyCalculation

					LocalEFTTransactionWithTypeN	= EFTTransactionWithTypeNRel.ElectronicFundsTransferTransaction

					if (LocalEFTTransactionWithTypeN entered)
						if (LocalEFTTransactionWithTypeN.EftNote.NotePrinted)
							LocalFinalRecord	= true
							if (LocalContinue)
								if (LocalException and LocalBankAccountType = "C" and LocalCustomerNetAmount > 0)
									LocalErrorMessage 		= "Total of EFT transactions are greater than zero and bank account is credit account"
									invoke Create EFTExtractErrorResult
										invoked.FinanceEnterpriseGroup			= LocalFEG
										invoked.EFTExtractResult				= EFTExtractResult
										invoked.ErrorMessage					= LocalErrorMessage
										invoked.CustomerGroup					= Company.CustomerGroupField.CustomerGroup
										invoked.Company							= LocalReceivablesCompany
										invoked.Customer 						= Customer
										invoked.IsSearch						= PrmUpdateRecords
										invoked.CreditAnalyst					= LocalCreditAnalyst
								else
									if (LocalException and LocalBankAccountType = "D" and LocalCustomerNetAmount < 0)
										LocalErrorMessage 		= "Total of EFT trans are less than or equal to zero and bank account is debit account"
										invoke Create EFTExtractErrorResult
											invoked.FinanceEnterpriseGroup			= LocalFEG
											invoked.EFTExtractResult				= EFTExtractResult
											invoked.ErrorMessage					= LocalErrorMessage
											invoked.CustomerGroup					= Company.CustomerGroupField.CustomerGroup
											invoked.Company							= LocalReceivablesCompany
											invoked.Customer						= Customer
											invoked.IsSearch						= PrmUpdateRecords
											invoked.CreditAnalyst					= LocalCreditAnalyst

								LocalCustomer							= Customer
								LocalBaseOpenAmount						= BaseOpenAmount
								LocalEFTExtractDiscoutNetAmount			= EFTExtractDiscoutNetAmount
								include EFTExtractBlock

								if (PrmUpdateRecords = "Y")
									if (EftAction = 1 or  EftAction = 3 or EftAction = 5 or  EftAction = 6)
										if (LocalReceivableInvoiceDetailType = "C")
											LocalExtractedAdjustmentCreditsCount			+= 1
											LocalAdjustmentCreditsAmount 					+= LocalEFTExtractAmount
										else
											LocalExtractedAdjustmentDebitsOrInvoicesCount	+= 1
											LocalAdjustmentDebitsOrInvoicesAmount 			+= LocalEFTExtractAmount

									if (EftExtract = 9)
										if (LocalReceivableInvoiceDetailType = "C")
											LocalExtractedCreditsCount						+= 1
											LocalExtractedCreditsAmount						+= LocalEFTExtractAmount
										else
											LocalExtractedDebitsOrInvoicesCount				+= 1
											LocalExtractedDebitsOrInvoicesAmount			+= LocalEFTExtractAmount
										LocalRecordsSelected = true
							else
								if (LocalException)
									LocalExceptionsMessage 		= "EFT items exist for this customer; bank attributes not valid"
									invoke Create EFTExtractErrorResult
										invoked.FinanceEnterpriseGroup		= LocalFEG
										invoked.EFTExtractResult			= EFTExtractResult
										invoked.Company						= LocalReceivablesCompany
										invoked.ErrorMessage				= LocalExceptionsMessage
										invoked.CustomerGroup				= Company.CustomerGroupField.CustomerGroup
										invoked.Customer 					= Customer
										invoked.IsSearch					= PrmUpdateRecords
										invoked.CreditAnalyst				= LocalCreditAnalyst
						else
							if (!LocalEFTTransactionWithTypeN.EftAction.Added and LocalException)
								LocalExceptionsMessage 			= "EFT items exist and have not been final noted in 'EFT Notification Print'"
								invoke Create EFTExtractErrorResult
									invoked.FinanceEnterpriseGroup			= LocalFEG
									invoked.EFTExtractResult				= EFTExtractResult
									invoked.ErrorMessage					= LocalExceptionsMessage
									invoked.Company							= LocalReceivablesCompany
									invoked.CustomerGroup					= Company.CustomerGroupField.CustomerGroup
									invoked.Customer 						= Customer
									invoked.IsSearch						= PrmUpdateRecords
									invoked.CreditAnalyst					= LocalCreditAnalyst

					if(LocalException and LocalPrenoteStatus = 0 and LocalPrenotificationRequired)
						LocalErrorMessage 		= "Bank Entity  " +LocalEntity+ " Account Number  " +LocalAccountNumber+ "  No prenote"
							invoke Create EFTExtractErrorResult
								invoked.FinanceEnterpriseGroup			= LocalFEG
								invoked.EFTExtractResult				= EFTExtractResult
								invoked.ErrorMessage					= LocalErrorMessage
								invoked.CustomerGroup					= Company.CustomerGroupField.CustomerGroup
								invoked.Company							= LocalReceivablesCompany
								invoked.Customer						= LocalCustomer
								invoked.IsSearch						= PrmUpdateRecords
								invoked.CreditAnalyst					= LocalCreditAnalyst

					if(LocalException and LocalPrenoteStatus = 1 and LocalPrenotificationRequired and LocalPrenotificationDate not entered)
						LocalErrorMessage 		= "Bank Entity  " +LocalEntity+ " Account Number  " +LocalAccountNumber+ "  Bank Account"
							invoke Create EFTExtractErrorResult
								invoked.FinanceEnterpriseGroup			= LocalFEG
								invoked.EFTExtractResult				= EFTExtractResult
								invoked.ErrorMessage					= LocalErrorMessage
								invoked.CustomerGroup					= Company.CustomerGroupField.CustomerGroup
								invoked.Company							= LocalReceivablesCompany
								invoked.Customer						= LocalCustomer
								invoked.IsSearch						= PrmUpdateRecords
								invoked.CreditAnalyst					= LocalCreditAnalyst

					if (LocalException and LocalErrorMessage not entered and LocalCustomerNetAmount < 0)
						LocalExceptionsMessage 		= "Net total of selected items is less than zero"
						invoke Create EFTExtractErrorResult
							invoked.FinanceEnterpriseGroup			= LocalFEG
							invoked.EFTExtractResult				= EFTExtractResult
							invoked.ErrorMessage					= LocalExceptionsMessage
							invoked.CustomerGroup					= Company.CustomerGroupField.CustomerGroup
							invoked.Customer						= LocalCustomer
							invoked.Company							= LocalReceivablesCompany
							invoked.IsSearch						= PrmUpdateRecords
							invoked.CreditAnalyst					= LocalCreditAnalyst

					if  ((!LocalHold or LocalException)
					and ((!LocalFinalRecord and EftExtract = 8 and EftAction = 6) or LocalHoldRecords)
					and LocalErrorMessage not entered)
						LocalExceptionsMessage 			= "An item on hold exists for this customer"
						invoke Create EFTExtractErrorResult
							invoked.FinanceEnterpriseGroup			= LocalFEG
							invoked.EFTExtractResult				= EFTExtractResult
							invoked.ErrorMessage					= LocalExceptionsMessage
							invoked.Company							= LocalReceivablesCompany
							invoked.CustomerGroup					= Company.CustomerGroupField.CustomerGroup
							invoked.Customer 						= Customer
							invoked.IsSearch						= PrmUpdateRecords
							invoked.CreditAnalyst					= LocalCreditAnalyst
						LocalHold = true

					if ((!LocalCreditBalanceRecord or LocalException) and Customer.CurrentReceivableBalance < 0)
						if (PrmCompany entered)
							LocalExceptionsMessage		 = "A credit balance exists for this customer at the company level"
							invoke Create EFTExtractErrorResult
								invoked.FinanceEnterpriseGroup	  = LocalFEG
								invoked.EFTExtractResult			= EFTExtractResult
								invoked.ErrorMessage				= LocalExceptionsMessage
								invoked.Company						= LocalReceivablesCompany
								invoked.CustomerGroup			   = Company.CustomerGroupField.CustomerGroup
								invoked.Customer 					= Customer
								invoked.IsSearch					= PrmUpdateRecords
								invoked.CreditAnalyst				= LocalCreditAnalyst
							LocalCreditBalanceRecord	= true
						else
							LocalExceptionsMessage		 = "A credit balance exists for this customer at the group level"
							invoke Create EFTExtractErrorResult
								invoked.FinanceEnterpriseGroup	  = LocalFEG
								invoked.EFTExtractResult			= EFTExtractResult
								invoked.ErrorMessage				= LocalExceptionsMessage
								invoked.Company						= LocalReceivablesCompany
								invoked.CustomerGroup			   = Company.CustomerGroupField.CustomerGroup
								invoked.Customer 					= Customer
								invoked.IsSearch					= PrmUpdateRecords
								invoked.CreditAnalyst				= LocalCreditAnalyst
						 	LocalCreditBalanceRecord	= true

					if ((!LocalSelected or LocalException) and LocalSelectedRecords)
						LocalExceptionsMessage 		= "Included in the selected items is a credit memo"
						invoke Create EFTExtractErrorResult
							invoked.FinanceEnterpriseGroup		= LocalFEG
							invoked.EFTExtractResult			= EFTExtractResult
							invoked.ErrorMessage				= LocalExceptionsMessage
							invoked.Company						= LocalReceivablesCompany
							invoked.CustomerGroup				= Company.CustomerGroupField.CustomerGroup
							invoked.Customer 					= Customer
							invoked.IsSearch					= PrmUpdateRecords
							invoked.CreditAnalyst				= LocalCreditAnalyst
						LocalSelected = true

					if (LocalException
					and (Customer.VendorGroupAndVendor.Vendor entered
					or  Customer.VendorGroupAndVendor.VendorGroup entered))
						LocalExceptionsMessage 			  = "A vendor record exists for this customer at the group level"
						invoke Create EFTExtractErrorResult
							invoked.FinanceEnterpriseGroup			= LocalFEG
							invoked.EFTExtractResult				= EFTExtractResult
							invoked.ErrorMessage					= LocalExceptionsMessage
							invoked.CustomerGroup					= Company.CustomerGroupField.CustomerGroup
							invoked.Company							= LocalReceivablesCompany
							invoked.Customer						= Customer
							invoked.IsSearch						= PrmUpdateRecords
							invoked.CreditAnalyst					= LocalCreditAnalyst


		ReceivableClaimsAndLiabilities is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmReceivableCompany		  is a ReceivableCompany
				PrmClaimsAndLiabilitiesHeader is a ClaimsAndLiabilitiesHeader
				PrmReportAsOfDate			  is Date
				PrmCountry					  is a Country
				PrmCurrency					  is a Currency
				PrmCurrencyTable			  is a CurrencyTable
			Instance Selection
				where (Company			   = PrmReceivableCompany
				and TransactionDate  	  <= PrmReportAsOfDate
				and Status > 0
				and (Customer.PostalAddress.Country entered
				and	 Customer.PostalAddress.Country not = PrmCountry))
			Sort Order is  Set5
			Local Fields
				LocalLiabilitiesLessThan1Year		is an InternationalAmount
				LocalClaimsLessThan1Year			is an InternationalAmount
				LocalClaimsGreaterThan1Year			is an InternationalAmount
				LocalTotal							is an InternationalAmount
				LocalLiabilitiesGreaterThan1Year	is an InternationalAmount
				LocalFunctionalAmount				is an InternationalAmount

			Action Rules
				Instance Rules
					if (Status < 7
					or (Status >=7 and first AppliedPaymentRel.DepositDate > PrmReportAsOfDate))

						initialize LocalClaimsLessThan1Year
						initialize LocalClaimsGreaterThan1Year
						initialize LocalLiabilitiesLessThan1Year
						initialize LocalLiabilitiesGreaterThan1Year
						initialize LocalTotal
						initialize LocalFunctionalAmount

						LocalClaimsAndLiabilitiesHeader = PrmClaimsAndLiabilitiesHeader

						if (OriginalCurrency = Company.Currency)
							LocalFunctionalAmount						= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						else
							initialize CurrencyWork
							CurrencyWork.CurrencyTable					= PrmCurrencyTable
							CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							CurrencyWork.ExchangeDate					= PrmReportAsOfDate
							CurrencyWork.TransactionAmount				= InvoiceAmount.CurrencyAmount
							CurrencyWork.FromCurrency					= OriginalCurrency
							CurrencyWork.BaseAmount.ToCurrency			= PrmCurrency
							LocalFunctionalAmount						= CurrencyWork.BaseAmount.OutputCurrencyAmount

						if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
							if (DaysFromTranDateToDueDate > 365)
								LocalLiabilitiesGreaterThan1Year = LocalFunctionalAmount
							else
								LocalLiabilitiesLessThan1Year 	= LocalFunctionalAmount
						else

						if (DaysFromTranDateToDueDate > 365)
							LocalClaimsGreaterThan1Year = LocalFunctionalAmount
						else
							LocalClaimsLessThan1Year 	= LocalFunctionalAmount

						LocalTotal = LocalFunctionalAmount

						if (ClaimsAndLiabilitiesRel exists)
							invoke Update ClaimsAndLiabilitiesRel
								if (CompanyCustomerRel.Affiliate)
									if (CompanyCustomerRel.AffiliateOwnership.ParentEnterprise)
										invoked.ClaimsLessThan1Year81			 = (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year81		 + LocalClaimsLessThan1Year)
										invoked.ClaimsGreaterThan1Year82		 = (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year82	  + LocalClaimsGreaterThan1Year)
										invoked.LiabilitiesLessThan1Year84		 = (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year84	+ LocalLiabilitiesLessThan1Year)
										invoked.LiabilitiesGreaterThan1Year85	 = (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year85 + LocalLiabilitiesGreaterThan1Year)
									else
									if (CompanyCustomerRel.AffiliateOwnership.SubsidiaryEnterprise)
										invoked.ClaimsLessThan1Year87			 = (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year87 		  + LocalClaimsLessThan1Year)
										invoked.ClaimsGreaterThan1Year88		 = (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year88 	  + LocalClaimsGreaterThan1Year)
										invoked.LiabilitiesLessThan1Year90		 = (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year90 	  + LocalLiabilitiesLessThan1Year)
										invoked.LiabilitiesGreaterThan1Year91	 = (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year91 + LocalLiabilitiesGreaterThan1Year)
									else
									if (CompanyCustomerRel.AffiliateOwnership.FellowEnterprise)
										invoked.ClaimsLessThan1Year93			 = (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year93 		  + LocalClaimsLessThan1Year)
										invoked.ClaimsGreaterThan1Year94		 = (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year94 	  + LocalClaimsGreaterThan1Year)
										invoked.LiabilitiesLessThan1Year96		 = (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year96	+ LocalLiabilitiesLessThan1Year)
										invoked.LiabilitiesGreaterThan1Year97	 = (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year97 + LocalLiabilitiesGreaterThan1Year)
								else
									invoked.ClaimsLessThan1Year41				 = (ClaimsAndLiabilitiesRel.ClaimsLessThan1Year41 		  + LocalClaimsLessThan1Year)
									invoked.ClaimsGreaterThan1Year42			 = (ClaimsAndLiabilitiesRel.ClaimsGreaterThan1Year42 	  + LocalClaimsGreaterThan1Year)
									invoked.LiabilitiesLessThan1Year44			 = (ClaimsAndLiabilitiesRel.LiabilitiesLessThan1Year44 	  + LocalLiabilitiesLessThan1Year)
									invoked.LiabilitiesGreaterThan1Year45		 = (ClaimsAndLiabilitiesRel.LiabilitiesGreaterThan1Year45 + LocalLiabilitiesGreaterThan1Year)

								invoked.RecordTotal								 = (ClaimsAndLiabilitiesRel.RecordTotal + LocalTotal)
						else
							invoke Create ClaimsAndLiabilities
								invoked.Company									 = Company
								invoked.ClaimsAndLiabilitiesHeader				 = PrmClaimsAndLiabilitiesHeader
								invoked.Country									 = Customer.PostalAddress.Country
								invoked.RecordTotal								 = LocalTotal

								if (CompanyCustomerRel.Affiliate)
									if (CompanyCustomerRel.AffiliateOwnership.ParentEnterprise)
										invoked.ClaimsLessThan1Year81			 = LocalClaimsLessThan1Year
										invoked.ClaimsGreaterThan1Year82		 = LocalClaimsGreaterThan1Year
										invoked.LiabilitiesLessThan1Year84		 = LocalLiabilitiesLessThan1Year
										invoked.LiabilitiesGreaterThan1Year85	 = LocalLiabilitiesGreaterThan1Year
									else
									if (CompanyCustomerRel.AffiliateOwnership.SubsidiaryEnterprise)
										invoked.ClaimsLessThan1Year87			 = LocalClaimsLessThan1Year
										invoked.ClaimsGreaterThan1Year88		 = LocalClaimsGreaterThan1Year
										invoked.LiabilitiesLessThan1Year90		 = LocalLiabilitiesLessThan1Year
										invoked.LiabilitiesGreaterThan1Year91	 = LocalLiabilitiesGreaterThan1Year
									else
									if (CompanyCustomerRel.AffiliateOwnership.FellowEnterprise)
										invoked.ClaimsLessThan1Year93			 = LocalClaimsLessThan1Year
										invoked.ClaimsGreaterThan1Year94		 = LocalClaimsGreaterThan1Year
										invoked.LiabilitiesLessThan1Year96		 = LocalLiabilitiesLessThan1Year
										invoked.LiabilitiesGreaterThan1Year97	 = LocalLiabilitiesGreaterThan1Year
								else
									invoked.ClaimsLessThan1Year41				 = LocalClaimsLessThan1Year
									invoked.ClaimsGreaterThan1Year42			 = LocalClaimsGreaterThan1Year
									invoked.LiabilitiesLessThan1Year44			 = LocalLiabilitiesLessThan1Year
									invoked.LiabilitiesGreaterThan1Year45		 = LocalLiabilitiesGreaterThan1Year

						if (LastApplicationSequence > 0)
							invoke ReceivableClaimsAndLiabilities ReceivableApplication in background
								invoked.PrmReceivableCompany			= PrmReceivableCompany
								invoked.PrmClaimsAndLiabilitiesHeader	= PrmClaimsAndLiabilitiesHeader
								invoked.PrmReportAsOfDate				= PrmReportAsOfDate
								invoked.PrmCustomerCountry				= Customer.PostalAddress.Country
								invoked.PrmCurrency						= PrmCurrency
								invoked.PrmCurrencyTable				= PrmCurrencyTable
								invoked.PrmTransType					= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
								invoked.PrmInvoice						= ReceivableInvoiceDetail.Invoice
								invoked.PrmPaymentSeq					= ReceivableInvoiceDetail.PaymentSeq
								invoked.PrmBatchNumber					= BatchNumber
								invoked.PrmDaysFromTranDateToDueDate	= DaysFromTranDateToDueDate



		SelectForCreditCardOrACHPayment is an Instance Action	
			valid when (IsOpenAndPortalPaymentUnSelected)

			completion message is "Selected"

			Local Fields
				NewReceivablePortalPaymentHeader	is a ReceivablePortalPaymentHeader view


			Action Rules

















				if (IsOpenAndPortalPaymentUnSelected)

					PortalPaymentSelected = true
					invoke InitializeThirdPartyPaymentProcessingGeneratedPayFormLink actor.context.CustomerRepresentativeContact.ReceivablePortalPaymentHeader1Rel
					if (!CustomerRepresentativeContactWithPaymentInProgressRel exists)



						invoke Create ReceivablePortalPaymentHeader
							assign result to NewReceivablePortalPaymentHeader
							invoked.CustomerGroup											= actor.context.CustomerGroup
							invoked.CustomerRepresentative									= actor.context.CustomerRepresentative
							invoked.CustomerRepresentativeContact							= actor.context.CustomerRepresentativeContact
							invoked.ThirdPartyPaymentProcessingCompany						= actor.context.CustomerGroup.DerivedThirdPartyPaymentProcessingCompany


							invoked.ThirdPartyPaymentProcessingCustomerId					= actor.context.CustomerRepresentativeContact.Customer	

							invoked.ThirdPartyPaymentProcessingLocationId					= actor.context.CustomerGroup.ThirdPartyPaymentProcessingLocationId
							invoked.ThirdPartyPaymentProcessingContactId					= actor.context.CustomerGroup.ThirdPartyPaymentProcessingContactId

							invoked.ThirdPartyPaymentProcessingUserApiKey					= actor.context.CustomerGroup.ThirdPartyPaymentProcessingUserApiKey
							invoked.ThirdPartyPaymentProcessingUserHashKey					= actor.context.CustomerGroup.ThirdPartyPaymentProcessingUserHashKey
							invoked.ThirdPartyPaymentProcessingUserId						= actor.context.CustomerGroup.ThirdPartyPaymentProcessingUserId
							invoked.ThirdPartyPaymentProcessingReceivableProcessLevel		= actor.context.CustomerGroup.DerivedThirdPartyPaymentProcessingCashManagementAccountSetupWithThirdPartyPaymentProcessingReceivableProcessLevelRelThirdPartyPaymentProcessingReceivableProcessLevel


















						invoke Update actor.context.CustomerRepresentativeContact	
							invoked.ReceivablePortalPaymentHeader			= NewReceivablePortalPaymentHeader.ReceivablePortalPaymentHeader	


						invoke Create ReceivablePortalPaymentDetail
							invoked.CustomerGroup							= actor.context.CustomerGroup
							invoked.CustomerRepresentative					= actor.context.CustomerRepresentative
							invoked.CustomerRepresentativeContact			= actor.context.CustomerRepresentativeContact
							invoked.ReceivablePortalPaymentHeader			= actor.context.CustomerRepresentativeContact.ReceivablePortalPaymentHeader
							invoked.FromReceivableCompany					= ReceivableInvoiceDetail.Company
							invoked.ReceivableInvoiceDetailType				= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.Invoice									= ReceivableInvoiceDetail.Invoice
							invoked.PaymentSeq								= ReceivableInvoiceDetail.PaymentSeq
							invoked.Description								= Description
							invoked.Customer								= Customer
							invoked.PortalRequestedAppliedAmount			= TransientSelectSignedOpenAmount	














					else
						invoke Create ReceivablePortalPaymentDetail
							invoked.CustomerGroup							= actor.context.CustomerGroup	
							invoked.CustomerRepresentative					= actor.context.CustomerRepresentative	
							invoked.CustomerRepresentativeContact			= actor.context.CustomerRepresentativeContact	
							invoked.ReceivablePortalPaymentHeader			= actor.context.CustomerRepresentativeContact.ReceivablePortalPaymentHeader	
							invoked.FromReceivableCompany					= ReceivableInvoiceDetail.Company
							invoked.ReceivableInvoiceDetailType				= ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.Invoice									= ReceivableInvoiceDetail.Invoice
							invoked.PaymentSeq								= ReceivableInvoiceDetail.PaymentSeq
							invoked.Description								= Description
							invoked.Customer								= Customer
							invoked.PortalRequestedAppliedAmount			= TransientSelectSignedOpenAmount	






















		UnSelectForCreditCardOrACHPayment is an Instance Action	
			valid when (IsOpenAndPortalPaymentSelected)

			completion message is "Unselected"
			Action Rules
				if (IsOpenAndPortalPaymentSelected)
					PortalPaymentSelected = false
					invoke InitializeThirdPartyPaymentProcessingGeneratedPayFormLink actor.context.CustomerRepresentativeContact.ReceivablePortalPaymentHeader1Rel



					if (!CustomerRepresentativeContact.MultipleReceivablePortalPaymentDetail1RelExist)
						invoke InitializeReceivablePortalPaymentHeader actor.context.CustomerRepresentativeContact
						invoke Delete CustomerRepresentativeContact.ReceivablePortalPaymentHeaderRel
					else
						invoke Delete ReceivablePortalPaymentDetailRel












		CalculateFundApplyTieBackReportAmounts is an Instance Action 
			restricted
			Parameters
				PrmLastDistributionSequence		is a Sequence
				PrmReceivableGLDistribution		is like ReceivableGLDistribution
				PrmTotalInvoiceOpenAmount		is like InternationalAmount
				PrmAsOfDate						is Date
			Local Fields
				LocalInvoiceDetailAppliedAmount	is like InternationalAmount
				LocalDistributionAppliedAmount	is like InternationalAmount
				LocalTieBackOpenAmount			is like InternationalAmount
				LocalTieBackAppliedAmount		is like InternationalAmount
			Action Rules
				LocalLastDistributionSequence	= PrmLastDistributionSequence
				LocalReceivableGLDistribution	= PrmReceivableGLDistribution

				initialize LocalInvoiceDetailAppliedAmount
				if (LastApplicationSequence != 0)
					for each ReceivableApplicationRel
						if (each.GeneralLedgerDate <= PrmAsOfDate)
							LocalInvoiceDetailAppliedAmount += each.ApplicationAmount.CurrencyAmount
							if (each.AdjustmentSequence != 0)
								for each each.ReceivableApplicationAdjustmentRel
									if (each.AdjustmentReason  != "CURR")
										LocalInvoiceDetailAppliedAmount += each.AdjustmentAmount.CurrencyAmount

					if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						for each ReceivableCreditApplicationRel
							if (each.GeneralLedgerDate <= PrmAsOfDate)
								LocalInvoiceDetailAppliedAmount += each.ApplicationAmount.CurrencyAmount

				initialize LocalDistributionAppliedAmount
				for each LocalFundApplyDistributionByOriginalDistributionRel
					if (each.ReceivableApplication.GeneralLedgerDate <= PrmAsOfDate)
						LocalDistributionAppliedAmount += each.DistributionAmount.CurrencyAmount
				TransientDistributionOpenAmount = LocalReceivableGLDistributionRel.DistributionAmount.CurrencyAmount - LocalDistributionAppliedAmount

				LocalTieBackOpenAmount = (((InvoiceAmount.CurrencyAmount - LocalInvoiceDetailAppliedAmount) / PrmTotalInvoiceOpenAmount) * TransientDistributionOpenAmount)

				initialize LocalTieBackAppliedAmount
				if (LastApplicationSequence != 0)
					for each FundApplyDistributionTransactionRel
						if (each.ReceivableApplication.GeneralLedgerDate <= PrmAsOfDate)
							LocalTieBackAppliedAmount += each.DistributionAmount.CurrencyAmount

					if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
						for each ReceivableCreditApplicationRel
							for each each.FundApplyDistributionCreditDescendingRel
								if (each.OriginalLastDistributionSequence = PrmLastDistributionSequence
								and each.OriginalReceivableGLDistribution = PrmReceivableGLDistribution)
									if (each.ReceivableApplication.GeneralLedgerDate <= PrmAsOfDate)
										LocalTieBackAppliedAmount += each.DistributionAmount.CurrencyAmount

				TransientTieBackOriginalAmount 	= LocalTieBackOpenAmount + LocalTieBackAppliedAmount
				TransientTieBackOpenAmount		= LocalTieBackOpenAmount

		UpdateDueDate is an Instance Action 
			valid when (DueDateChangeAllowed)
			completion message is "DueDateUpdated"
			Parameters
				NewDueDate			is Date

			Entrance Rules
				constraint (!SummarizeDetail)
					"InvoiceHasSummarizeDetailForDisplay,CannotChangeDueDate"
				constraint (NewDueDate >= TransactionDate)
					"NewDueDateCannotBeLessThanTransactionDate"
				if (DiscountDate.DiscDate[1] entered)
					constraint (NewDueDate >= DiscountDate.DiscDate[1])
						"NewDueDateCannotBeLessThanFirstDiscountDate"
				if (DiscountDate.DiscDate[2] entered)
					constraint (NewDueDate >= DiscountDate.DiscDate[2])
						"NewDueDateCannotBeLessThanSecondDiscountDate"
				if (DiscountDate.DiscDate[3] entered)
					constraint (NewDueDate >= DiscountDate.DiscDate[3])
						"NewDueDateCannotBeLessThanThirdDiscountDate"

			Action Rules
				DueDate = NewDueDate
				if (NationalAccountTransactionRel exists)
					invoke FastUpdate NationalAccountTransactionRel
						invoked.DueDate = DueDate
				if (ReceivableProjectTransactionRel exists)
					invoke UpdateFromReceivableInvoiceDetail ReceivableProjectTransactionRel
						invoked.DueDate = DueDate


		UpdateProjectData is a Set Action 
			restricted
			Instance Selection
				where (Origin.Projects
				and   (ProjectContract not entered
				or	 FinanceDimension2 not entered))
			Sort Order is primary
			Action Rules
				Instance Rules
					ProjectContract = ReceivableInvoiceRel.ProjectContract
					FinanceDimension2 = ReceivableInvoiceRel.FinanceDimension2

					invoke UpdateFromReceivableInvoiceDetail ReceivableProjectTransactionRel
						resume on error
						invoked.ProjectContract = ProjectContract
						invoked.FinanceDimension2 = FinanceDimension2


		AutoCash2071CreditSetAction is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmInvoiceCompany				is like ReceivableCompany
				PrmReceivableInvoiceDetailType	is like ReceivableInvoiceDetailType
				PrmInvoice						is like Invoice
				PrmCashApplicationResult		is like CashApplicationResult
				PrmPaymentCompany				is a ReceivableCompany
				PrmReceivablePaymentHeader 		is a ReceivablePaymentHeader
				PrmReceivablePayment 			is a ReceivablePayment
				PrmRemitSequence				is like ReceivablePaymentRemittance
				PrmRemitAmount					is like InternationalAmount
				PrmGlDate						is Date
				WorkGLDate						is Date
				PrmFirstAttemptRemittanceOnly 	is Boolean
				PrmCurrencyOverride			  	is Boolean
				PrmOperator						is a ReceivableOperator
				PrmOverride						is Boolean
			Local Fields
				LocalUseRemitAmount				is Boolean
				LocalDetailRNAAppliedStatus		is Numeric 3
				LocalCashDetailState			is AlphaUpper size 1

			Sort Order is Set9

			Instance Selection
				where (Company 												= PrmInvoiceCompany
				and	   ReceivableInvoiceDetail.ReceivableInvoiceDetailType 	= PrmReceivableInvoiceDetailType
				and	   ReceivableInvoiceDetail.Invoice 						= PrmInvoice)

			Action Rules
				Set Rules
					Entrance Rules
						if (PrmRemitAmount != 0)
							LocalUseRemitAmount = true

					Exit Rules
						LocalCashDetailState = PrmReceivablePayment.CashDetailState
						invoke UpdateRemittanceStatus PrmReceivablePayment
							invoked.PrmRemitSequence 						= PrmRemitSequence
							invoked.PrmCashApplicationResult				= PrmCashApplicationResult
							if (PrmPaymentCompany.DetailedRNADistributions)
								if (LocalDetailRNAAppliedStatus = 1)
									invoked.PrmCashApplicationMessageNumber = 0
								else
								if (LocalCashDetailState = "R"
								and LocalDetailRNAAppliedStatus = 2)
									invoked.PrmCashApplicationMessageNumber	= 126
								else
								if (LocalCashDetailState = "R")
									invoked.PrmCashApplicationMessageNumber	= 125
								else
									invoked.PrmCashApplicationMessageNumber	= 127

				Instance Rules
					invoke AutoCash2071CreditAction PrmReceivablePayment
						invoked.PrmDBCompany					= PrmInvoiceCompany
						invoked.PrmDBTransactionType			= PrmReceivableInvoiceDetailType
						invoked.PrmDBInvoice					= PrmInvoice
						invoked.PrmDBPaymentSeq					= ReceivableInvoiceDetail.PaymentSeq
						invoked.PrmRemitSequence 				= PrmRemitSequence
						invoked.PrmCashApplicationResult		= PrmCashApplicationResult
						invoked.PrmGlDate						= PrmGlDate
						invoked.PrmWorkGLDate					= WorkGLDate
						invoked.PrmCurrencyOverride				= PrmCurrencyOverride
						invoked.PrmOperator						= PrmOperator
						invoked.PrmOverride						= PrmOverride
						invoked.PrmRemitAmount					= PrmRemitAmount
					
					if (LocalUseRemitAmount)
						PrmRemitAmount -= PrmReceivablePayment.TransientAmountApplied

					if (PrmPaymentCompany.DetailedRNADistributions)
						if ((LocalDetailRNAAppliedStatus not entered
						or  LocalDetailRNAAppliedStatus = 2)
						and PrmReceivablePayment.TransientDetailRNAAppliedStatus = 1)
							LocalDetailRNAAppliedStatus = 1
						if (LocalDetailRNAAppliedStatus not entered
						and PrmReceivablePayment.TransientDetailRNAAppliedStatus = 2)
							LocalDetailRNAAppliedStatus = 2

					if (!PrmReceivablePayment.Status.Open
					or (LocalUseRemitAmount
					and PrmRemitAmount <= 0))
						end set action instance loop	


		FutureApplicationReportHeader is a Set Action  
			restricted
			Parameters
				PrmFinanceEnterpriseGroup			is like FinanceEnterpriseGroup
				PrmCompany							is a ReceivableCompany
				PrmGeneralLedgerEndDate				is Date
				PrmARCode							is a ReceivableGeneralLedgerCode
				PrmApplicationStatus				is Numeric size 1
					States
						ApplicationPosted			value is 0
						ApplicationNotPosted		value is 1
						All							value is 2
				PrmFutureApplicationReportHeader	is a FutureApplicationReportHeader

			Instance Selection
				where (Company = PrmCompany
				and	IsNotHistorical
				and	GeneralLedgerDate > PrmGeneralLedgerEndDate
				and	(PrmARCode not entered
				or	 (PrmARCode entered
				and	ReceivableGeneralLedgerCode = PrmARCode)))

			Sort Order is Set6

			Action Rules
				Empty Set Rules
					invoke UpdateStatus PrmFutureApplicationReportHeader
						invoked.PrmStatus					= false

				Set Rules
					Exit Rules
						if (!PrmFutureApplicationReportHeader.FutureApplicationDetailRecordExists)
							invoke UpdateStatus PrmFutureApplicationReportHeader
								invoked.PrmStatus				= false
						else
							invoke UpdateStatus PrmFutureApplicationReportHeader
								invoked.PrmStatus				= true

				Instance Rules
					for each ReceivableApplicationRel
						if (each.GeneralLedgerDate <= PrmGeneralLedgerEndDate)
							invoke FutureApplicationReportHeader ReceivableApplicationRel
								invoked.PrmFinanceEnterpriseGroup				= PrmFinanceEnterpriseGroup
								invoked.PrmCompany								= PrmCompany
								invoked.PrmGeneralLedgerEndDate					= PrmGeneralLedgerEndDate
								invoked.PrmARCode								= PrmARCode
								invoked.PrmFutureApplicationReportHeader		= PrmFutureApplicationReportHeader


		RefreshData is an Import Action
			Local Fields
				RepSet is a ReplicationSet
			Action Rules
				RepSet = "FSM_COLUMNAR_AR_ST"
				constraint (RepSet.ReplicationIsValid)
					"ReplicationIsCurrentlyReplicatingOrNotValidAtThisTime"
				invoke Replicate RepSet


		AddAttachment is an Instance Action
			default label is "AddAttachment"
			valid when (IsValidForAddAttachment)
			Parameters
				PrmAttachment	is an Attachment
			
			Parameter Rules
				PrmAttachment
					required
						"AttachmentIsRequired"

			Action Rules
				constraint (ReceivableApplicationSelectRel.NumberOfAdjustments <= 1)
					"MultipleAdjustmentsExist;UseDetailScreenToAddAttachments"
					
				invoke Update ReceivableApplicationAdjustmentSelectRel
					invoked.Attachment	= PrmAttachment
		
					
		InvoiceAmountTotal is a Set Action
			restricted
			Parameters
				PrmCustomerGroup is a CustomerGroup
				PrmCustomerRange is a CustomerRange
				PrmResult        is a ReceivablesJobResult
				PrmUpdate				is AlphaUpper size 1
					States
						ReportOnly		value is "R"
						UpdateAndReport	value is "U"
				PrmType				is AlphaUpper size 1
					States
						Invoice		value is "I"
						Payment  	value is "P"
				PrmNbrOfRunGroups       is Numeric 3
				PrmRunGroup             is Numeric 3
			
			Instance Selection
				where(PrmCustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup
				and Company.CustomerGroupField.CustomerGroup = PrmCustomerGroup
				and (PrmCustomerRange	not entered
				or	 Customer within PrmCustomerRange)
				and  IsOpen
				and (PrmNbrOfRunGroups <= 1
				or  (Customer % PrmNbrOfRunGroups) = PrmRunGroup))
				
			Sort Order is Set3
			
			Local Fields
				LocalCustomerGroupAmt is an InternationalAmount
				LocalCurrentBalance is an InternationalAmount
				LocalCheck          is  Boolean
			Action Rules
				Company Set Rules
					Exit Rules
						if (!LocalCheck)
							invoke InvoicesPaymentsCurrentBalances CompanyCustomerExistsRel
								invoked.PrmCurrentBalance   = LocalCurrentBalance
								invoked.PrmResult           = PrmResult
								invoked.PrmUpdate           = PrmUpdate
							if(PrmUpdate.UpdateAndReport)
								invoke UpdateCurrentBalance CustomerRel	
									invoked.ChangeAmount     = LocalCustomerGroupAmt
							initialize LocalCurrentBalance
							initialize LocalCustomerGroupAmt
						LocalCheck = false
						
				Customer Set Rules
					Exit Rules
						invoke InvoicesPaymentsCurrentBalances CompanyCustomerExistsRel
							invoked.PrmCurrentBalance   = LocalCurrentBalance
							invoked.PrmResult           = PrmResult
							invoked.PrmUpdate           = PrmUpdate
						if(PrmUpdate.UpdateAndReport)
							invoke UpdateCurrentBalance CustomerRel	
								invoked.ChangeAmount     = LocalCustomerGroupAmt
						initialize LocalCurrentBalance
						initialize LocalCustomerGroupAmt 
						LocalCheck = true
						
				Instance Rules
					LocalOpenAmount = (InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - (ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount + AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount))
					if (LocalOpenAmount > 0)
						round LocalOpenAmount to nearest DerivedRoundTo
						if (ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
							LocalCurrentBalance = LocalCurrentBalance - LocalOpenAmount
							LocalCustomerGroupAmt = LocalCustomerGroupAmt - CustomerGroupOpenAmount
						else
							LocalCurrentBalance = LocalCurrentBalance + LocalOpenAmount
							LocalCustomerGroupAmt = LocalCustomerGroupAmt + CustomerGroupOpenAmount
						
						LocalReceivablesCompany = Company
						LocalCustomer           = Customer
