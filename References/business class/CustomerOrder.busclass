CustomerOrder is a BusinessClass
	owned by oe
	prefix is COR
	classic name is CUSTORDER

	Ontology
		symbolic key is CustomerOrder
			classic set name is CORSET1
			classic name is ORDER-NBR

	Patterns
		implements InlineUserFields
			size is 1000

		implements StaticJava
		disable AuditIndex
		implements BODId
		implements Archivable

	Persistent Fields
		OrderEntryOperator
			classic name is OPR-CODE
		Status									is Numeric size 1
			States
				Unreleased		value is 1
				Released		value is 2
				Canceled		value is 8
				ReadyForPurge	value is 9
			protected
		BillingProcessLevel
			classic name is PROCESS-LEVEL
		OrderEntryOrderType
			classic name is ORDER-TYPE
		CurrencyTable
		OrderDate								is an ExchangeDate
			classic name is ORDER-DATE
		PriceDate								is Date
		OrderEntryChangeOperator				is an OrderEntryOperator
			classic name is CHG-OPR
		OrderEntryCreditOperator				is an OrderEntryOperator
			classic name is CRED-OPR
		CustomerPurchaseOrder
			classic name is CUST-PO-NBR
		LetterOfCredit
			classic name is LETTER-OF-CR
		CustomerBillTo
			classic name is BILL-TO
		Customer
		BillName								is a VendorName 
			holds pii
			classic name is BILL-NAME
		BillPostalAddress						is a PostalAddressV2	
			holds pii
			classic name for BillPostalAddress.DeliveryAddress.AddressLine1 is BILL-ADDR1
			classic name for BillPostalAddress.DeliveryAddress.AddressLine2 is BILL-ADDR2
			classic name for BillPostalAddress.DeliveryAddress.AddressLine3 is BILL-ADDR3
			classic name for BillPostalAddress.DeliveryAddress.AddressLine4 is BILL-ADDR4
			classic name for BillPostalAddress.Municipality is BILL-CITY
			classic name for BillPostalAddress.StateProvince is BILL-STATE
			classic name for BillPostalAddress.PostalCode is BILL-ZIP
			classic name for BillPostalAddress.County is BILL-COUNTY
			classic name for BillPostalAddress.Country is BILL-CNTRY-CD
			classic name for BillPostalAddress.Region is BILL-REGION
		ExpectedShipDate						is a ExchangeDate
			classic name is EXP-SHIP-DT
		RequestedDate							is Date
			classic name is RQST-DATE
		UserIdRelease							is a UserIdEntry
			classic name is USER-ID-RLS
		UserIdEntry
			classic name is USER-ID-ENTRY
		TaxStatus								is AlphaUpper size 1
			States
				Taxable	value is "T"
				Exempt	value is "E"
			classic name is TAX-EXEMPT-CD
		CustomerShipTo
			classic name is SHIP-TO
		ShipToName								is a VendorName 
			holds pii
			classic name is SHIP-TO-NAME
		ShipPostalAddress						is a PostalAddressV2	
			holds pii
			classic name for ShipPostalAddress.DeliveryAddress.AddressLine1 is SHIP-TO-ADDR1
			classic name for ShipPostalAddress.DeliveryAddress.AddressLine2 is SHIP-TO-ADDR2
			classic name for ShipPostalAddress.DeliveryAddress.AddressLine3 is SHIP-TO-ADDR3
			classic name for ShipPostalAddress.DeliveryAddress.AddressLine4 is SHIP-TO-ADDR4
			classic name for ShipPostalAddress.Municipality is SHIP-TO-CITY
			classic name for ShipPostalAddress.StateProvince is SHIP-TO-STATE
			classic name for ShipPostalAddress.PostalCode is SHIP-TO-ZIP
			classic name for ShipPostalAddress.County is SHIP-TO-COUNTY
			classic name for ShipPostalAddress.Country is TO-CNTRY-CD
			classic name for ShipPostalAddress.Region is SHIP-REGION
		HoldCode								is a ReceivableHoldCode
			classic name is HOLD-CODE
		HoldCodeApprove							is Boolean
			classic name is HOLD-APR-FL
		InventoryLocation
			classic name is INV-LOCATION
		Territory
		SalesRepresentative
			classic name is SALESMAN
		SalesRepresentative2					is a SalesRepresentative
			classic name is SALESMAN2
		CommissionSplitPercentage
			classic name is COMM-SPLIT
		CommissionRate1							is a ChrgRate
			classic name is COMM-RATE-1
		CommissionRate2							is a ChrgRate
			classic name is COMM-RATE-2
		CheckNumber								is Numeric size 8
			classic name is CHECK-NBR
		AuthorizationRequired					is Boolean
			classic name is AUTH-REQUIRED
		AuthorizationApproved					is Boolean
			classic name is AUTH-APPROVED
		TermsCode
			classic name is TERMS-CD
		BankPaymentCode							is a BankTransactionCode
			classic name is BANK-INST-CODE
		CashOnDelivery							is Boolean
			classic name is COD-FL
		CashInAdvanceRequired					is Boolean
			classic name is CIA-FL
		CashInAdvanceRequiredPercent
			classic name is CIA-PCT
		ProformaCashInAdvanceRequired			is Boolean
		ProformaCashInAdvanceRequiredPercent
		OnProformaPaymentHold					is Boolean
		Currency								is a FromCurrency
		OrderDiscountCode
			classic name is ORD-DISC-CODE
		OrderDiscountPercentage					is Percent size 5.2 
			classic name is PCT
			protected
		EnteredPayment							is an InternationalAmount
			classic name is ENTERED-PMNT
		PaymentInvoiced							is an InternationalAmount
			classic name is PMT-INVCED
		EnteredDiscount							is an InternationalAmount
			classic name is ENTERED-DISC
		DiscountTakenOnInvoices					is an InternationalAmount
			classic name is DISC-TKN-CURR
		TaxCode
		TaxDate									is Date
		OrderEntryOrderSource
			classic name is ORDER-SOURCE
		BillingFreightCode
			classic name is FREIGHT-CODE
		FreightCharge							is an InternationalAmount
			classic name is FRT-CHG-CURR
		FreightTaxable							is Boolean
			classic name is FRT-TAXABLE-FL
		ActualFreightCharge						is an InternationalAmount
			classic name is ACTUAL-FRT-CHG
		Carrier									is a Vendor
		ShippingMethod
			classic name is METHOD
		TransactionId
			classic name is TRANS-ID
		ListName
			classic name is LIST-NAME
		PickingPriority
			classic name is PK-PRIORITY
		ShipImmediate							is Boolean
			classic name is IMMEDIATE-FL
		EdiOeInterface							is Boolean
			classic name is EDI-OE-FLAG
		Acknowledgement							is Boolean
			classic name is ACKNWLDG-FL
		AcknowledgementPrinted					is Boolean
			classic name is ACKPRT-FL
		BackOrder								is Boolean
			classic name is BACK-ORD-FL
		ShipComplete							is a ShipCompleteFlag
		CreditWorkFlow							is Boolean
			classic name is CREDIT-WF-FL
		Project									is a FinanceCodeBlockProjectOnly
			classic name is ACTIVITY
		CostProject								is a FinanceCodeBlockProjectOnly
			classic name is ACTIVITY-C
		UserDate1								is Date
			classic name is USER-DATE1
		UserDate2								is Date
			classic name is USER-DATE2
		TransUser1
			classic name is TRANS-USER1
		TransUser2								is a S3Agent
			classic name is TRANS-USER2
		TransUser3								is Date
			classic name is TRANS-USER3
		TransUser4
			classic name is TRANS-USER4
		TransUser5								is an InternationalAmount
			classic name is TRANS-USER5
		StockVolume
			classic name is CUBIC-FEET
		StockWeight
			classic name is WEIGHT
		LastLineNumber							is a LineNumber
			classic name is LAST-LINE-NBR
			protected
		LastTopCommentSequence					is a Sequence3
			classic name is LAST-TP-SEQ
		LastBottomCommentSequence				is a Sequence3
			classic name is LAST-BM-SEQ
		LastAddOnChargeSequence					is a Sequence3
			classic name is LAST-MISC-SEQ
		WarehouseShipment
			classic name is SHIPMENT-NBR
			delete ignored
		LastReferenceNumberForRequisition		is like Requisition

		SalesQuote								is Boolean
			classic name is SLS-QUOTE-FL
		FutureOrder								is Boolean
			classic name is FUTURE-FL
		PickingListPrinted						is Boolean
			classic name is PK-PRT-FL
			protected
		ProofOfDeliveryRequired					is Boolean
			classic name is POD-REQ-FL
		ProofOfDeliveryGracePeriod				is an AgePeriods
			classic name is POD-GRACE-PER
		CancelledDate							is Date
			classic name is CXL-DATE
		OrderEntryCancelledOperator				is an OrderEntryOperator
			classic name is CXL-OPR
		OrderCancelCreditReason
			classic name is CXL-REASON
		SalesAnalysisUpdate						is AlphaUpper size 1
			States
				Yes		value is "Y"
				No		value is "N"
				Change	value is "C"
		CurrencyMultiplicationOrDivision
			sql name is CMultiplicationOrDivision
			classic name is CURR-MUDV
		CurrencyRate
			classic name is CURR-RATE
		CurrencyNumberOfDecimals
			classic name is CURR-ND
		CurrencyOveride							is Boolean
			classic name is CURR-OVR-FL
		RateFreeze								is a RateFreezeCode
			classic name is RATE-FRZ-CD
		OpenOrderAmount							is an InternationalAmount
			classic name is OPEN-ORD-AMT
			protected
		OpenOrderBaseAmount						is an InternationalAmount
			classic name is OPEN-ORD-CURR
			protected
		PassOrderAmount							is an InternationalAmount
			classic name is PASS-ORD-AMT
		InventoryGoodsAmount					is an InternationalAmount
			classic name is INV-GDS-CURR
			protected
		InventoryGoodsBaseAmount				is an InternationalAmount
			classic name is INV-GDS-BASE
		NonInventoryGoodsAmount					is an InternationalAmount
			classic name is NI-GDS-CURR
			protected
		NonInventoryGoodsBaseAmount				is an InternationalAmount
			classic name is NI-GDS-BASE
			protected
		TotalAddOnChargeAmount					is an InternationalAmount
			classic name is MISC-TTL-CURR
			protected
		DiscountableAmount						is an InternationalAmount
			classic name is DISCNTBL-CURR
			protected
		OrderDiscountAmount						is an InternationalAmount
			classic name is ORD-DISC-CURR
			protected
		TaxableAmount							is an InternationalAmount
			classic name is TXBL-TTL-CURR
			protected
		TaxTotal								is an InternationalAmount
			classic name is TAX-TTL-CURR
			protected
		IntrastatNumber
			classic name is INTRASTAT-NBR
		OrderReferenceNumber
			classic name is ORDER-REF-NBR
		OrderReferenceNumberUser
			classic name is REF-NBR-FLAG
		RequireElectronicPaymentAuthorization is Boolean
			classic name is REQ-EP-AUTH
		ElectronicPaymentAmount					is an InternationalAmount
			classic name is EP-AMT-CURR
		ElectronicPaymentBaseAmount				is an InternationalAmount
			classic name is EP-AMT-BASE
		ElectronicPaymentSettlementAmount		is an InternationalAmount
			classic name is EP-SETTLE-AMT
		ElectronicPaymentTransactionID
			classic name is EP-TRANS-ID
		BillingElectronicPaymentType
			classic name is EP-TYPE
		BillingCustomerCreditCard
			classic name is EP-ACCOUNT
		ElectronicPaymentExpirationDate			is Date
			classic name is EP-EXP-DATE
		ElectronicPaymentMinimumMargin			is a EpMarginMin
			classic name is EP-MARGIN-MIN
		ElectronicPaymentMinimumMarginPercent	is a EpMarginPct
			classic name is EP-MARGIN-PCT
		TotalOrderAmount						is an InternationalAmount
			classic name is ORDER-TTL-CURR
			protected
		TotalOrderBaseAmount					is an InternationalAmount
			classic name is ORDER-TTL-BASE
			protected
		BillECCountry
			classic name is BILL-EC-CTRY
		BillISOCountry
			classic name is BILL-ISO-CTRY
		ToECCountry
			classic name is TO-EC-CTRY
		ToISOCountry
			classic name is TO-ISO-CTRY
		NatureOfTransactionCode					is an IntrastatNatureOfTransactionCode
			classic name is NOTC
		StatisticalProcedure					is an IntrastatStatisticalProcedure
			classic name is STAT-PROC
		VATRegistrationNumber
			classic name is VAT-REG-NBR
		GlobalDocumentType
			classic name is GLBL-DOC-TYPE
		FreightTotal							is an InternationalAmount
			classic name is FREIGHT-TOT
			protected
		InsuranceTotal							is an InternationalAmount
			classic name is INSURANCE-TOT
			protected
		CustomsTotal							is an InternationalAmount
			classic name is CSTMS-TOT
			protected
		OtherAddOnChargesTotal					is an InternationalAmount
			classic name is OTHER-AOC-TOT
			protected
		OrderEntryCustomer
		CompanyCustomer
		CertificationNumber									
		CertificationDate						is Date		
		Reference1								is a Reference   
		Reference2								is a Reference   
		PointOfTitleTransfer
		ShipTerm



	Local Fields
		CurrencyRelationship
		LocalOriginalStandardOrder					is a OrderEntryStandardOrder
		LocalCustomerOrder							is a CustomerOrder
		LocalIntrastatProcessing					is a IntrastatProcessing
		LocalMainTrigger							is Boolean
		LocalCurrencyExchange						is a CurrencyExchange
		OrderEntryExchange
		LocalCalculateTerms							is a CalculateTerms
		LocalTermsCalTrigger						is Alpha 1
		CalculateTax
		LocalDoCreateTaxLog							is Boolean
		LocalExecuteCalculateTax					is Alpha 1
		IntrastatFiscalYear							is a FiscalYear
		LocalTaxPrint								is like TaxCalulationAndPrinting
		WorkNetAmount								is an InternationalAmount
		GroupNetAmount								is an InternationalAmount
		WorkAddonChargeDiscount						is an InternationalAmount
		GroupFreightAmount							is an InternationalAmount
		LocalTermsDiscount							is an InternationalAmount
		LocalTermsAmount							is an InternationalAmount
		LocalTermsDueDate							is Date
		LocalWorkAmount								is an InternationalAmount
		LocalCustomerOrderLine						is like CustomerOrderLine
		LocalStandardOrder							is a OrderEntryStandardOrder
		LocalTotalCancelQuantity					is like Quantity
		LoopCounter									is Numeric 2
		LocalOrderDiscountAmount					is like InternationalAmount
		LocalSalesTax								is like InternationalAmount
		LocalLineSalesTax							is like InternationalAmount
		LocalLineNumber								is like LineNumber
		LocalOrderQuantity							is like Quantity
		LocalSellPriceCurrency						is like InternationalAmount
		LocalDiscountAmountCurrency					is like InternationalAmount
		LocalEnteredDiscount						is like InternationalAmount
		LocalOrderLineOrAddOnChargeDiscount			is Boolean
		LocalTaxCode								is like TaxCode
		LocalPaymentDate							is Date
		AddOnChargeWorkNetAmountForCustomerOrder	is like InternationalAmount
		WorkNetAmountForCustomerOrderLine			is like InternationalAmount
		TotalWorkNetAmount							is like InternationalAmount
		LocalTaxComputed							is Boolean
		LocalOrderDiscountPercent					is Percent size 5.2
		LocalDiscountsCalculated					is Boolean
		LocalBODCurrentTimeStamp					is a BODCurrentTimeStamp
		LocalComputedDiscount						is an InternationalAmount
		LocalDiscountedAmount						is an InternationalAmount
		LocalDiscountDifference						is an InternationalAmount
		LocalTotalLineTaxableAmount					is an InternationalAmount
		LocalTotalAOCTaxableAmount					is an InternationalAmount
		LocalTotalTaxableAmount						is an InternationalAmount
		LocalLineAmount								is an InternationalAmount
		LocalAOCAmount								is an InternationalAmount
		LocalTaxTable								is a TaxTableField
		LocalProformaTaxSourceType					is a ProformaTaxSourceType
		LocalCustomerOrderAOC						is Numeric 6
		LocalCreateFromCopy							is Boolean
		LocalLastCustomerOrderLineForCopy			is like CustomerOrderLine
		LocalTaxableFreight							is an InternationalAmount
		LocalJurisdictionLookupKey					is Alpha 200

		LocalNativeLPLBODTrigger		is Boolean
		LocalAccountingEntity  			is Alpha 100
		LocalAEAlreadyExecuted			is Boolean
		NewBODTracker  					is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker		is Numeric 15
		Error            				is Boolean
	    ErrorMessage     				is Alpha 300
	    LocalConfigurationParameter		is Alpha size up to 200


		LocalAlert	    				is Alpha 100


		LocalOneSourceTaxAttribute				is a TaxAttributeGroup50
		LocalOneSourceTaxAttributeText			is Text
		AttributeCounter						is Numeric 2

		TaxLineItemView							is a TaxLineItem view
		LocalUniqueID							is like UniqueID
		LocalLineItemNumber						is like DistributionSequence
		LocalTaxLineItemCreated				is Boolean
		LocalTotalTaxLineItemAmount				is like InternationalAmount
		LocalSalesAccount						is a TransactionCodeBlock
		LocalSkipHeaderTaxLog					is Boolean
		LocalSkipAOCTaxLog						is Boolean
		Idx										is Numeric 2
		LocalAOCAmountAfterTermsDiscount		is an InternationalAmount
		LocalProductTaxCategory					is like ProductTaxCategory
		LocalDescription						is like Description
		LocalCommodityCode						is like ICNCode
		BackgroundGroup							is AlphaUpper up to 200


	Context Fields
		CreditLimitDateRange is a DateRange
		FSMInboundBODTracker


	Transient Fields

		CancelledAll				 is Boolean
		Limit1						 is like CreditLim
			derive value from DerivedLimit1
		Limit2						 is like CreditLim
			derive value from DerivedLimit2
		Limit3						 is like CreditLim
			derive value from DerivedLimit3
		Limit4						 is like CreditLim
			derive value from DerivedLimit4
		Limit5						 is like CreditLim
			derive value from DerivedLimit5


	Rule Blocks
		LoadOneSourceInputFieldsForLine
			if (TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.CallingModule				= "Customer_Order"
				CalculateTax.System						= "OE"
				CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= BillingProcessLevel
				CalculateTax.Invoice					= CustomerOrder
				CalculateTax.InvoiceAmount				= CustomerOrderLineRel.NetAmountCurrency
				CalculateTax.TaxCode					= CustomerOrderLineRel.TaxCode
				CalculateTax.PostalAddress				= CustomerShipTo.ShipToAddress
				CalculateTax.CommodityCode				= CustomerOrderLineRel.DerivedUNSPSCCodeNoDash
				CalculateTax.InvoiceAmount				= CustomerOrderLineRel.NetAmountCurrency
				CalculateTax.BypassEditing				= true
				CalculateTax.PointOfTitleTransfer		= PointOfTitleTransfer
				CalculateTax.DeliveryTerms				= ShipTerm
				if (OrderEntryOrderType.BillingInvoiceType.Credit)
					CalculateTax.InvoicedOrCreditMemo	= "C"
				else
					CalculateTax.InvoicedOrCreditMemo	= "I"
				

		LoadOneSourceInputFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.CallingModule				= "Customer_Order"
				CalculateTax.System						= "OE"
				CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= BillingProcessLevel
				CalculateTax.Invoice					= CustomerOrder
				CalculateTax.InvoiceAmount				= OriginalOpenOrderAmount
				CalculateTax.TaxCode					= TaxCode
				CalculateTax.PostalAddress				= CustomerShipTo.ShipToAddress
				CalculateTax.BypassEditing				= true
				CalculateTax.PointOfTitleTransfer		= PointOfTitleTransfer
				CalculateTax.DeliveryTerms				= ShipTerm
				CalculateTax.Customer					= Customer
				CalculateTax.VendorCustomerName			= Customer.Name
				CalculateTax.Description				= BillingFreightCode.BillingFreightDescription
				if (OrderEntryOrderType.BillingInvoiceType.Credit)
					CalculateTax.InvoicedOrCreditMemo	= "C"
				else
					CalculateTax.InvoicedOrCreditMemo	= "I"
		
		LoadOneSourceInputFieldsForAOC
			if (TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.CallingModule				= "Customer_Order"
				CalculateTax.System						= "OE"
				CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= BillingProcessLevel
				CalculateTax.Invoice					= CustomerOrder
				CalculateTax.InvoiceAmount				= OriginalOpenOrderAmount
				CalculateTax.TaxCode					= TaxCode
				CalculateTax.PostalAddress				= CustomerShipTo.ShipToAddress
				CalculateTax.BypassEditing				= true
				CalculateTax.PointOfTitleTransfer		= PointOfTitleTransfer
				CalculateTax.DeliveryTerms				= ShipTerm
				CalculateTax.Customer					= Customer
				CalculateTax.VendorCustomerName			= Customer.Name
				CalculateTax.Description				= each.Description
				if (OrderEntryOrderType.BillingInvoiceType.Credit)
					CalculateTax.InvoicedOrCreditMemo	= "C"
				else
					CalculateTax.InvoicedOrCreditMemo	= "I"

		CreateTaxLineItemAndUserFieldsForAOC
			if ((TaxEntityRel.ThirdParty.Sabrix
			or (SingleCallToVertex
			and (Status.Released
			or Status.ReadyForPurge)))
			and not each.IsTaxLineItemAOCExists)
				invoke Create TaxLineItem
					assign result to TaxLineItemView
					invoked.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
					invoked.InvoiceNumber				= CustomerOrder
					invoked.InvoiceDate					= current corporate date
					invoked.TaxEntity					= Company.AccountingEntity
					invoked.RelatedObjectReference		= reference to each.CustomerOrderAddOnCharge
					invoked.RelatedLineItemUniqueId		= each.UniqueID
					if (SingleCallToOneSource
					or SingleCallToVertex)
						LocalLineItemNumber 			= (last TaxLineItemsRel.LineItemNumber + 1)
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
						LocalUniqueID = UniqueID
					else
						LocalLineItemNumber 			= 1
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= each.UniqueID
						LocalUniqueID = each.UniqueID
					invoked.LineItemNumber				= LocalLineItemNumber
					invoked.LineItemId					= each.Miscellaneous
					invoked.InvoiceAmount				= OriginalOpenOrderAmount
					invoked.TaxableAmount				= WorkNetAmount
					invoked.ShipToTaxCode				= each.TaxCode
					invoked.ShipToTaxCodeDescription	= each.TaxCode.Description
					invoked.ShipToAddress				= CustomerShipTo.ShipToAddress
					invoked.Description					= each.Miscellaneous.Description
					if (TaxEntityUsesVertex)
						invoked.ProductTaxCategory		= LocalProductTaxCategory
						invoked.Quantity				= 1
						invoked.UnitPrice				= WorkNetAmount
					if  (IsHSNSACCodeEnabled)
						invoked.CommodityCodeType      	= "HSN"
						invoked.CommodityCode 			= each.Miscellaneous.HSNSACCode
					else
						invoked.CommodityCodeType      	= "UNSPSC"
						invoked.CommodityCode 			= LocalCommodityCode
				
				LocalSalesAccount = each.SalesAccount
				
				initialize AttributeCounter
				if (TaxEntityRel.ThirdParty.Sabrix
				and	TaxAttributesRel exists)
					invoke Create TaxLineItemUserFields
						for each TaxAttributesRel.OneSourceTaxAttributeByNumberRel
							invoked.FinanceEnterpriseGroup					= Company.FinanceEnterpriseGroup
							invoked.TaxLineItem.UniqueIdOfRelatedObject		= LocalUniqueID
							invoked.TaxLineItem.Sequence					= TaxLineItemView.TaxLineItem.Sequence

							if (each.LoadDynamicField.ValueIs.TaxEntity)
								if (each.LoadDynamicField.ValueIs.TaxEntity)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= TaxEntityRel.TaxEntity
							else
							if (each.LoadDynamicField.ValueIs.Company)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Company
							else
							if (each.LoadDynamicField.ValueIs.Customer)
								if (Customer entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Customer
							else
							if (each.LoadDynamicField.ValueIs.PostingDate)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= OrderDate
							else
							if (each.LoadDynamicField.ValueIs.TaxDate)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= OrderDate
							else
							if (each.LoadDynamicField.ValueIs.GLAccount)
								if (LocalSalesAccount.GeneralLedgerChartAccount entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.GeneralLedgerChartAccount
							else
							if (each.LoadDynamicField.ValueIs.Location)	
								if (InventoryLocation entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= InventoryLocation
							else
							if (each.LoadDynamicField.ValueIs.Currency)	
								if (Currency entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Currency
							else
							if (each.LoadDynamicField.ValueIs.DiscountAmount)
								if (EnteredDiscount entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EnteredDiscount
							else
							if (each.LoadDynamicField.ValueIs.ContractType)
								if (LocalSalesAccount.Project.ContractType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.Project.ContractType
							else
							if (each.LoadDynamicField.ValueIs.WorkType)
								if (LocalSalesAccount.Project.WorkType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.Project.WorkType
							else
							if (each.LoadDynamicField.ValueIs.ServiceType)
								if (LocalSalesAccount.Project.ServiceType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.Project.ServiceType
							else
							if (each.LoadDynamicField.ValueIs.UsageType)
								if (LocalSalesAccount.Project.UsageType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.Project.UsageType	
							else
							if (each.LoadDynamicField.ValueIs.Project)
								if (LocalSalesAccount entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.Project
							else			
							if (each.LoadDynamicField.ValueIs.UNSPSC)
								if (LocalCommodityCode entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalCommodityCode
							else			
							if (each.LoadDynamicField.ValueIs.ShipToName)
								if (CustomerShipTo.Name entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= CustomerShipTo.Name
							else
							if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
								if (LocalSalesAccount.ToAccountingEntity entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= LocalSalesAccount.ToAccountingEntity
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension1)						
								if (LocalSalesAccount.FinanceDimension1 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension1
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension2)						
								if (LocalSalesAccount.FinanceDimension2 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension2
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension3)						
								if (LocalSalesAccount.FinanceDimension3 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension3
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension4)						
								if (LocalSalesAccount.FinanceDimension4 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension4
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension5)						
								if (LocalSalesAccount.FinanceDimension5 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension5
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension6)						
								if (LocalSalesAccount.FinanceDimension6 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension6
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension7)						
								if (LocalSalesAccount.FinanceDimension7 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension7
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension8)						
								if (LocalSalesAccount.FinanceDimension8 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension8
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension9)						
								if (LocalSalesAccount.FinanceDimension9 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension9
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension10)						
								if (LocalSalesAccount.FinanceDimension10 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= LocalSalesAccount.FinanceDimension10
							else	
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= each.Value
				else
				if (TaxEntityUsesVertex
				and TaxAttributesRel.VertexFlexibleFieldExist
				and FreightCharge entered)
					Idx = 0
					invoke Create TaxLineItemUserFields
						invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.TaxLineItem.UniqueIdOfRelatedObject 			= LocalUniqueID
						invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
							if (each.Code entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId 	= each.VertexFlexibleCode.FieldId
							if (each.ExternalValue.ValueIs.TaxEntity)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.Company)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Company
							else
							if (each.ExternalValue.ValueIs.Customer)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Customer
							else
							if (each.ExternalValue.ValueIs.Description)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalDescription
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.Location)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = InventoryLocation
							else
							if (each.ExternalValue.ValueIs.Currency)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Currency
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = OrderDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = OrderDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = OrderDate
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = EnteredDiscount
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								if (LocalAOCAmountAfterTermsDiscount entered)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalAOCAmountAfterTermsDiscount
							else
							if (each.ExternalValue.ValueIs.ContractType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.Project.ContractType
							else
							if (each.ExternalValue.ValueIs.WorkType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.Project.WorkType
							else
							if (each.ExternalValue.ValueIs.ServiceType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.Project.ServiceType
							else
							if (each.ExternalValue.ValueIs.UsageType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalProductTaxCategory
							else
							if (each.ExternalValue.ValueIs.UNSPSC)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalCommodityCode
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Project)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.Project
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.FinanceDimension2
							else
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.FinanceDimension3
							else
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.FinanceDimension4
							else
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.FinanceDimension5
							else
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.FinanceDimension6
							else
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.FinanceDimension7
							else
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.FinanceDimension8
							else
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.FinanceDimension9
							else
							if (each.ExternalValue.ValueIs.FinanceDimension10)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = LocalSalesAccount.FinanceDimension10
							else
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = each.Code

						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
							if (each.NumericValue entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId = each.VertexFlexibleNumeric.FieldId
								if (each.ExternalValue.ValueIs.TaxEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = TaxEntityRel.TaxEntity
								else
								if (each.ExternalValue.ValueIs.AccountingUnit)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = LocalSalesAccount.AccountingUnit
								else
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = Company
								else
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = LocalSalesAccount.GeneralLedgerChartAccount
								else
								if (each.ExternalValue.ValueIs.DiscountAmount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = EnteredDiscount
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 3
								else
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = LocalAOCAmountAfterTermsDiscount
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals = 3
								else
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = LocalSalesAccount.ToAccountingEntity
								else
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue = each.NumericValue

						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
							if (each.DateValue entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId = each.VertexFlexibleDate.FieldId
								if (each.ExternalValue.ValueIs.PaymentDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = OrderDate
								else
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = OrderDate
								else
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = OrderDate
								else
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue = each.DateValue

		CreateTaxLineItemAndUserFieldsForHeader
			if ((TaxEntityRel.ThirdParty.Sabrix
			or (SingleCallToVertex
			and (Status.Released
			or Status.ReadyForPurge)))
			and TaxLineItemHeaderRel not exists)
				invoke Create TaxLineItem
					assign result to TaxLineItemView
					invoked.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
					invoked.InvoiceNumber				= CustomerOrder
					invoked.InvoiceDate					= current corporate date
					invoked.TaxEntity					= Company.AccountingEntity
					invoked.RelatedObjectReference		= reference to CustomerOrder
					invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
					invoked.RelatedLineItemUniqueId		= UniqueID
					if (SingleCallToOneSource
					or SingleCallToVertex)
						LocalLineItemNumber				+= 1
					else
						LocalLineItemNumber				= 1
					invoked.LineItemNumber				= LocalLineItemNumber
					invoked.LineItemId					= BillingFreightCode
					invoked.InvoiceAmount				= OriginalOpenOrderAmount
					invoked.TaxableAmount				= LocalTaxableFreight
					invoked.ShipToTaxCode				= TaxCode
					invoked.ShipToTaxCodeDescription	= TaxCode.Description
					invoked.ShipToAddress				= CustomerShipTo.ShipToAddress
					invoked.Description					= BillingFreightCode.BillingFreightDescription
					if (TaxEntityUsesVertex)
						invoked.ProductTaxCategory		= BillingFreightCode.ProductTaxCategory
						invoked.Quantity				= 1
						invoked.UnitPrice				= LocalTaxableFreight

					if  (IsHSNSACCodeEnabled)
						invoked.CommodityCodeType      	= "HSN"
						invoked.CommodityCode 			= BillingFreightCode.HSNSACCode
					else
						invoked.CommodityCodeType      	= "UNSPSC"
						invoked.CommodityCode 			= BillingFreightCode.UNSPSCCode.UNSPSCCodeDisplay
				
				initialize AttributeCounter
				if (TaxEntityRel.ThirdParty.Sabrix
				and	TaxAttributesRel exists)
					invoke Create TaxLineItemUserFields
						for each TaxAttributesRel.OneSourceTaxAttributeByNumberRel
							invoked.FinanceEnterpriseGroup					= Company.FinanceEnterpriseGroup
							invoked.TaxLineItem.UniqueIdOfRelatedObject		= UniqueID
							invoked.TaxLineItem.Sequence					= TaxLineItemView.TaxLineItem.Sequence

							if (each.LoadDynamicField.ValueIs.TaxEntity)
								if (each.LoadDynamicField.ValueIs.TaxEntity)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= TaxEntityRel.TaxEntity
							else
							if (each.LoadDynamicField.ValueIs.Company)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Company
							else
							if (each.LoadDynamicField.ValueIs.Customer)
								if (Customer entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Customer
							else
							if (each.LoadDynamicField.ValueIs.PostingDate)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= OrderDate
							else
							if (each.LoadDynamicField.ValueIs.TaxDate)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= OrderDate
							else
							if (each.LoadDynamicField.ValueIs.GLAccount)						
								if (EntityTaxCodeRel.TaxOutputAccount.GeneralLedgerChartAccount entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.GeneralLedgerChartAccount
							else
							if (each.LoadDynamicField.ValueIs.Location)	
								if (InventoryLocation entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= InventoryLocation
							else
							if (each.LoadDynamicField.ValueIs.Currency)	
								if (Currency entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Currency
							else
							if (each.LoadDynamicField.ValueIs.DiscountAmount)
								if (EnteredDiscount entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EnteredDiscount
							else
							if (each.LoadDynamicField.ValueIs.ContractType)
								if (Project.Project.ContractType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Project.Project.ContractType
							else
							if (each.LoadDynamicField.ValueIs.WorkType)
								if (Project.Project.WorkType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Project.Project.WorkType
							else
							if (each.LoadDynamicField.ValueIs.ServiceType)
								if (Project.Project.ServiceType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Project.Project.ServiceType
							else
							if (each.LoadDynamicField.ValueIs.UsageType)
								if (Project.Project.UsageType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Project.Project.UsageType	
							else
							if (each.LoadDynamicField.ValueIs.Project)
								if (EntityTaxCodeRel.TaxOutputAccount.Project entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.Project
							else
							if (each.LoadDynamicField.ValueIs.UNSPSC)
								if (BillingFreightCode.UNSPSCCode entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingFreightCode.UNSPSCCode.UNSPSCCodeDisplay
							else			
							if (each.LoadDynamicField.ValueIs.ShipToName)
								if (CustomerShipTo.Name entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= CustomerShipTo.Name
							else
							if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
								if (BillingFreightCode.FreightAccount.ToAccountingEntity entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= BillingFreightCode.FreightAccount.ToAccountingEntity
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension1)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension1 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension1
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension2)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension2 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension2
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension3)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension3 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension3
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension4)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension4 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension4
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension5)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension5 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension5
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension6)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension6 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension6
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension7)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension7 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension7
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension8)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension8 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension8
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension9)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension9 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension9
							else
							if (each.LoadDynamicField.ValueIs.FinanceDimension10)						
								if (EntityTaxCodeRel.TaxOutputAccount.FinanceDimension10 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= EntityTaxCodeRel.TaxOutputAccount.FinanceDimension10
							else	
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= each.Value
				else
				if (TaxEntityUsesVertex
				and TaxAttributesRel.VertexFlexibleFieldExist
				and FreightCharge entered)
					Idx = 0
					invoke Create TaxLineItemUserFields
						invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.TaxLineItem.UniqueIdOfRelatedObject 			= UniqueID
						invoked.TaxLineItem.Sequence 							= TaxLineItemView.TaxLineItem.Sequence
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
							if (each.Code entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId 	= each.VertexFlexibleCode.FieldId
							if (each.ExternalValue.ValueIs.TaxEntity)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.Company)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= Company
							else
							if (each.ExternalValue.ValueIs.Customer)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= Customer
							else
							if (each.ExternalValue.ValueIs.Description)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.BillingFreightDescription
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.Location)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= InventoryLocation
							else
							if (each.ExternalValue.ValueIs.Currency)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= Currency
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= EnteredDiscount
							else
							if (each.ExternalValue.ValueIs.UnitCost)

								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= FreightCharge
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= OrderDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= OrderDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= OrderDate
							else
							if (each.ExternalValue.ValueIs.ContractType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.Project.ContractType
							else
							if (each.ExternalValue.ValueIs.WorkType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.Project.WorkType
							else
							if (each.ExternalValue.ValueIs.ServiceType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.Project.ServiceType
							else
							if (each.ExternalValue.ValueIs.UsageType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.ProductTaxCategory
							else
							if (each.ExternalValue.ValueIs.UNSPSC)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Project)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.Project
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.FinanceDimension2
							else
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.FinanceDimension3
							else
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.FinanceDimension4
							else
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.FinanceDimension5
							else
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.FinanceDimension6
							else
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.FinanceDimension7
							else
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.FinanceDimension8
							else
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.FinanceDimension9
							else
							if (each.ExternalValue.ValueIs.FinanceDimension10)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingFreightCode.FreightAccount.FinanceDimension10
							else
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= each.Code

						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
							if (each.NumericValue entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId 				= each.VertexFlexibleNumeric.FieldId
								if (each.ExternalValue.ValueIs.TaxEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= TaxEntityRel.TaxEntity
								else
								if (each.ExternalValue.ValueIs.AccountingUnit)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= BillingFreightCode.FreightAccount.AccountingUnit
								else
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= Company
								else
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= BillingFreightCode.FreightAccount.GeneralLedgerChartAccount
								else
								if (each.ExternalValue.ValueIs.DiscountAmount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= EnteredDiscount
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals 	= 3
								else
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= FreightCharge
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals 	= 3
								else
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= BillingFreightCode.FreightAccount.ToAccountingEntity
								else
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= each.NumericValue

						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
							if (each.DateValue entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId 			= each.VertexFlexibleDate.FieldId
								if (each.ExternalValue.ValueIs.PaymentDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= OrderDate
								else
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= OrderDate
								else
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= OrderDate
								else
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= each.DateValue
				

		LoadVertexGlobalInputFields 
			if (TaxEntityUsesVertex)
				CalculateTax.TransactionSource				= "O"
				CalculateTax.CallingModule					= "CustomerOrder"
				CalculateTax.Vendor							= Customer
				CalculateTax.FromTaxCode					= InventoryLocation.TaxCode
				if (CustomerShipTo.ShipToAddress.Country entered)
					CalculateTax.VATRegistrationCountry		= CustomerShipTo.ShipToAddress.Country 
				else
					CalculateTax.VATRegistrationCountry		= CompanyCustomer.VATRegistrationCountry
				CalculateTax.VATRegistrationNumber			= VATRegistrationNumber 
				CalculateTax.FromVATRegistrationCountry		= TaxEntityRel.VATRegistrationCountry 
				CalculateTax.FromVATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber 
				CalculateTax.DefaultFilingCurrency			= TaxEntityRel.DefaultFilingCurrency
				CalculateTax.CurrencyRate					= CurrencyRate
				CalculateTax.TransactionCurrency			= Currency
				CalculateTax.BaseCurrency					= Company.Currency
				if (OrderEntryOrderType.BillingInvoiceType.Credit)
					CalculateTax.DocumentType				= "CreditMemo"
				else
					CalculateTax.DocumentType				= "Invoice"
				CalculateTax.Location						= InventoryLocation
				include LoadVertexDebugOptions

		LoadVertexDebugOptions 
			if (TaxEntityUsesVertex)
				if (VertexConfigRel.DebugMode)				
					LocalJurisdictionLookupKey				= DefaultLookupKey
					CalculateTax.AppendToJurisFile			= true
					CalculateTax.JurisdictionResultsKey		= LocalJurisdictionLookupKey
					CalculateTax.RelatedObjectReference	 = reference to this instance
				else
				if (JurisdictionResultsRel exist)
					invoke Delete JurisdictionResultsRel

		VertexFlexibleFieldsForAOC
			if (TaxEntityUsesVertex)
				if (TaxAttributesRel.VertexFlexibleFieldExist)
					LocalSalesAccount	= each.SalesAccount
					LocalDescription	= each.Description
					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else
							if (each.ExternalValue.ValueIs.Customer)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Customer
							else
							if (each.ExternalValue.ValueIs.Description)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalDescription
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = InventoryLocation
							else
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Currency
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = OrderDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = OrderDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = OrderDate
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredDiscount
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								if (LocalAOCAmountAfterTermsDiscount entered)
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalAOCAmountAfterTermsDiscount
							else
							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.Project.ContractType
							else
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.Project.WorkType
							else
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.Project.ServiceType
							else
							if (each.ExternalValue.ValueIs.UsageType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalProductTaxCategory
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Project)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.Project
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension2
							else
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension3
							else
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension4
							else
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension5
							else
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension6
							else
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension7
							else
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension8
							else
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension9
							else
							if (each.ExternalValue.ValueIs.FinanceDimension10)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = LocalSalesAccount.FinanceDimension10
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalSalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalSalesAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredDiscount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalAOCAmountAfterTermsDiscount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = LocalSalesAccount.ToAccountingEntity
							else
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = OrderDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = OrderDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = OrderDate
							else
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue

		VertexFlexibleFields
			if (TaxEntityUsesVertex)
				if (TaxAttributesRel.VertexFlexibleFieldExist)
					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Company
							else
							if (each.ExternalValue.ValueIs.Customer)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Customer
							else
							if (each.ExternalValue.ValueIs.Description)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.BillingFreightDescription
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.Location)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = InventoryLocation
							else
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Currency
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = EnteredDiscount
							else
							if (each.ExternalValue.ValueIs.UnitCost)

								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = FreightCharge
							else
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = OrderDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = OrderDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = OrderDate
							else
							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.Project.ContractType
							else
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.Project.WorkType
							else
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.Project.ServiceType
							else
							if (each.ExternalValue.ValueIs.UsageType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.ProductTaxCategory
							else
							if (each.ExternalValue.ValueIs.UNSPSC)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Project)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.Project
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.FinanceDimension2
							else
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.FinanceDimension3
							else
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.FinanceDimension4
							else
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.FinanceDimension5
							else
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.FinanceDimension6
							else
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.FinanceDimension7
							else
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.FinanceDimension8
							else
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.FinanceDimension9
							else
							if (each.ExternalValue.ValueIs.FinanceDimension10)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingFreightCode.FreightAccount.FinanceDimension10
							else
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId = each.VertexFlexibleNumeric.FieldId
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue = each.ExternalValue
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = TaxEntityRel.TaxEntity
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = BillingFreightCode.FreightAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = Company
							else
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = BillingFreightCode.FreightAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = EnteredDiscount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = FreightCharge
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = BillingFreightCode.FreightAccount.ToAccountingEntity
							else
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue = each.NumericValue

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered
						or  each.ExternalValue entered)
							Idx +=1
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId = each.VertexFlexibleDate.FieldId
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue = each.ExternalValue
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = OrderDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = OrderDate
							else
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = OrderDate
							else
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue = each.DateValue

		CalculateTaxAmountsProformaLineTax
			initialize CalculateTax
			CalculateTax.TaxEntity					= Company.AccountingEntity
			CalculateTax.ProcessLevel				= BillingProcessLevel
			CalculateTax.TaxCode					= TaxCode
			CalculateTax.PostalAddress				= BillPostalAddress
			CalculateTax.Invoice					= CustomerOrder
			CalculateTax.FromTaxCode				= InventoryLocation.TaxCode
			CalculateTax.FromPostalAddress			= InventoryLocation.PostalAddress
			CalculateTax.InvoiceDate				= current corporate date
			CalculateTax.GeneralLedgerDate			= current corporate date
			CalculateTax.POAAddress					= BillingProcessLevel.CompanyAddress
			CalculateTax.POATaxCode					= BillingProcessLevel.TaxCode
			CalculateTax.ShipmentDate			= ExpectedShipDate
			CalculateTax.NumberOfDecimals		= CurrencyNumberOfDecimals
			CalculateTax.Function				= CalculateTax.Function.CalculateTax
			CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
			CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale

			CalculateTax.PaymentDate			= current corporate date
			CalculateTax.InputReturnVertexTaxIn	= "D"								
		
		ProformaInvoiceLineTaxCreation
			for each CalculateTax.TaxTable.TaxTableOutput
				if (each.TaxAmount entered)
					invoke Create ProformaInvoiceLineTax
						invoked.Company										= Company
						invoked.CustomerOrder								= CustomerOrder
						invoked.CustomerOrderLine							= LocalCustomerOrderLine
						invoked.CustomerOrderAddOnCharge					= LocalCustomerOrderAOC
						invoked.ProductTaxCategory							= CalculateTax.ProductTaxCategory
						if (each.TaxPoint = "P")
							invoked.TaxAccount								= each.TaxOutputDueAccount
						else
							invoked.TaxAccount								= each.TaxOutputAccount
						invoked.ProformaInvoiceLineTax.TaxCode				= each.TaxCode
						invoked.TaxRate										= each.TaxRate
						invoked.TaxableCurrencyAmount.TransactionAmount		= each.TaxAmount
						invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency = Company.Currency
						invoked.TransactionTaxable.TransactionAmount		= each.TaxableAmount
						invoked.TransactionTaxable.BaseAmount.ToCurrency	= Company.Currency
						invoked.TaxID										= each.TaxID
						invoked.ProformaInvoiceLineTax.TaxLevel				= each.TaxLevel
						invoked.ProformaTaxSourceType						= LocalProformaTaxSourceType

		CalculateTaxAmounts
			if (not LocalTaxComputed
			and TaxCode entered)

				initialize CalculateTax
				initialize LocalSalesTax
				initialize LocalLineSalesTax
				initialize LocalDiscountedAmount
				initialize LocalTotalAOCTaxableAmount
				initialize LocalTotalLineTaxableAmount
				if (FreightCharge entered
				or  BillingFreightCode entered)
					WorkNetAmount		 = FreightCharge
					LocalTermsAmount	 = WorkNetAmount
					if ((IsTaxEntityTaxAfterTerms
					or IsPaymentTaxAfterTerms)
					and (IsCompanyTermsFreight or
					IsProcessLevelTermsFreight))
						include CalculateTermsDiscount
						WorkNetAmount -= LocalTermsDiscount
					LocalTaxableFreight = WorkNetAmount
					if (DoTaxCalculation) 
						CalculateTax.TaxEntity				= Company.AccountingEntity
						CalculateTax.System					= "OE"
						CalculateTax.Invoice				= CustomerOrder
						CalculateTax.TaxableAmount			= WorkNetAmount
						CalculateTax.ProductTaxCategory		= BillingFreightCode.ProductTaxCategory
						CalculateTax.NumberOfDecimals		= CurrencyNumberOfDecimals
						CalculateTax.Function				= CalculateTax.Function.CalculateTax
						CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
						CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
						CalculateTax.TransactionSubType		= CalculateTax.TransactionSubType.Freight
						CalculateTax.Quantity				= 1
						CalculateTax.TaxCode				= TaxCode
						CalculateTax.ShipmentDate			= ExpectedShipDate
						CalculateTax.InvoiceDate			= current corporate date
						CalculateTax.GeneralLedgerDate		= current corporate date
						CalculateTax.PaymentDate			= current corporate date
						CalculateTax.TaxDate				= TaxDate
						CalculateTax.PostalAddress			= ShipPostalAddress
						if (LocalSkipHeaderTaxLog)
							LocalDoCreateTaxLog 				= false
						if (LocalDoCreateTaxLog)
							CalculateTax.DontCreateLogFile		= false
							CalculateTax.DontCreateResultFiles	= false
						else
							CalculateTax.DontCreateLogFile		= true
							CalculateTax.DontCreateResultFiles	= true
						CalculateTax.FromPostalAddress			= InventoryLocation.PostalAddress 
						CalculateTax.UniqueIdOfRelatedObject	= UniqueID
						if (TaxEntityUsesVertex)
							CalculateTax.UnitCost				= FreightCharge
						if (IsHSNSACCodeEnabled)
							CalculateTax.CommodityCodeType		= "HSN"
							CalculateTax.HSNSACCode				= BillingFreightCode.HSNSACCode
						else 
							CalculateTax.CommodityCodeType		= "UNSPSC"
							CalculateTax.UNSPSCCode				= BillingFreightCode.UNSPSCCode.UNSPSCCodeDisplay
						include LoadVertexGlobalInputFields 
						include LoadOneSourceInputFields
						if (not LocalTaxLineItemCreated)
							include CreateTaxLineItemAndUserFieldsForHeader
						if (not SingleCallToOneSource
						and not SingleCallToVertex)
							include VertexFlexibleFields
							LocalExecuteCalculateTax			= CalculateTax.ExecuteCalculateTax
	
							LocalTaxTable = CalculateTax.TaxTable
							if (LocalTaxTable entered)
								for each LocalTaxTable.TaxTableOutput
									LocalSalesTax  += each.TaxAmount5DP
							else
								LocalSalesTax							+= CalculateTax.OutputTotalTaxAmount 
				

			
				for each CustomerOrderAddOnChargeRel
					if (each.OrderDiscount
					and (EnteredDiscount entered
					or OrderDiscountAmount entered))
						LocalComputedDiscount = ((EnteredDiscount + OrderDiscountAmount) * (each.DerivedAOCAmount / DiscountableAmount))
						LocalDiscountedAmount += LocalComputedDiscount
					else
						initialize LocalComputedDiscount

					if (each.TaxStatus.Taxable)
						if (each.OrderDiscount)	
							LocalAOCAmount					= (each.DerivedAOCAmount - LocalComputedDiscount)
						else
							LocalAOCAmount					= each.DerivedAOCAmount
						LocalTotalAOCTaxableAmount			+= LocalAOCAmount
						if (DoTaxCalculation)
							WorkNetAmount						= LocalAOCAmount
							LocalOrderLineOrAddOnChargeDiscount = each.OrderDiscount
							LocalTaxCode						= each.TaxCode
							LocalPaymentDate					= current corporate date
							LocalTermsAmount					= WorkNetAmount
							if ((IsTaxEntityTaxAfterTerms
							or each.EntityTaxCodeRel.TaxTerms.Taxafterterms) 
							and (IsCompanyInvoiceOptionAndTermsAddOnCharge
							or  IsProcessLevelInvoiceOptionAndTermsAddOnCharge))
								include CalculateTermsDiscount
								WorkNetAmount						-= LocalTermsDiscount
								LocalAOCAmountAfterTermsDiscount	 = WorkNetAmount
								LocalTotalAOCTaxableAmount			-= LocalTermsDiscount
							include CalculateSalesTaxAOC


			
				for each CustomerOrderLinesRel
					LocalCustomerOrderLine = each.CustomerOrderLine
					if (each.OrderDiscount
					and (EnteredDiscount entered
					or OrderDiscountAmount entered))
						LocalComputedDiscount = ((EnteredDiscount + OrderDiscountAmount) * (each.DerivedLineTaxableAmount / DiscountableAmount))
						LocalDiscountedAmount += LocalComputedDiscount
					else
						initialize LocalComputedDiscount
					
					if (each.TaxStatus.Taxable)
						if (each.OrderDiscount)
							LocalLineAmount					= (each.DerivedLineTaxableAmount - LocalComputedDiscount)
						else
							LocalLineAmount					= each.DerivedLineTaxableAmount

						LocalTotalLineTaxableAmount		+= LocalLineAmount

						WorkNetAmount						= LocalLineAmount
						LocalOrderLineOrAddOnChargeDiscount	= each.OrderDiscount
						LocalTaxCode						= each.TaxCode
						LocalPaymentDate					= current corporate date
						if (each.IsTaxAfterTerms)
							LocalTermsAmount = WorkNetAmount
							include CalculateTermsDiscount
							WorkNetAmount						-= LocalTermsDiscount
							LocalTotalLineTaxableAmount	-= LocalTermsDiscount
						if (TaxEntityRel.ThirdParty.Sabrix)
							if (not SingleCallToOneSource)
								if (DoTaxCalculation)
									include CalculateLineSalesTax
								if (CalculateTax.OutputTotalTaxAmount not entered
								and DoTaxCalculation)
									LocalTotalLineTaxableAmount		-= LocalLineAmount
						else
							if (DoTaxCalculation)
								include CalculateSalesTax
						
				if (DiscountableAmount entered)
					LocalDiscountDifference = ((EnteredDiscount + OrderDiscountAmount) - LocalDiscountedAmount)

				LocalUniqueID = UniqueID
				if (TaxLineItemsRel exists)
					initialize LocalTotalTaxLineItemAmount
					initialize LocalTotalTaxableAmount
					for each TaxLineItemsRel
						LocalTotalTaxLineItemAmount += each.CalculatedTaxAmt
				
				LocalTotalTaxableAmount = (LocalTaxableFreight + LocalTotalLineTaxableAmount + LocalTotalAOCTaxableAmount - LocalDiscountDifference)


				LocalTaxComputed = true

		CalculateOrderDiscounts
			if (OrderDiscountCode entered
			and not LocalDiscountsCalculated)
				initialize LoopCounter
				while (LoopCounter < 6)
					LoopCounter +=1
					if (OrderDiscountCode.DollarLimits.DollarLimit[LoopCounter] entered)
						if (DiscountableAmount <= OrderDiscountCode.DollarLimits.DollarLimit[LoopCounter])							
							end while
				LocalOrderDiscountAmount  = DiscountableAmount * OrderDiscountCode.Percents.Pct[LoopCounter]
				LocalOrderDiscountPercent = OrderDiscountCode.Percents.Pct[LoopCounter]				

				LocalDiscountsCalculated = true

		CalculateTermsDiscount
			if (TermsCode entered)
				initialize LocalCalculateTerms
				initialize LocalTermsDiscount
				initialize LocalTermsDueDate

				if (LocalTermsAmount entered)
					LocalCalculateTerms.TransactionDate			= ExpectedShipDate
					LocalCalculateTerms.TransactionAmount		= LocalTermsAmount

				LocalTermsCalTrigger					= LocalCalculateTerms.TermsCalTrigger
				constraint (LocalCalculateTerms.OutputErrorNumber not entered)
					"<LocalCalculateTerms.OutputErrorMessage>"

				if (LocalCalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount entered)
					LocalTermsDiscount					= LocalCalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
					LocalTermsDueDate					= LocalCalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate


		CalculateTaxByGroup
			for each AddOnChargesForCustomerOrderRel
				if (each.ChargeType.FlatAmount)
					WorkNetAmount				+= each.EnteredUnitPrice
				else
					if (each.ChargeType.Percentage)
						WorkNetAmount			+= GoodsAmount * each.PricePercent

				if ((EnteredDiscount entered
				or  OrderDiscountAmount entered)
				and each.OrderDiscount)
					WorkAddonChargeDiscount		+= ((EnteredDiscount + OrderDiscountAmount) *(WorkNetAmount/ DiscountableAmount))
				else
					initialize  WorkAddonChargeDiscount

			WorkNetAmount						-= WorkAddonChargeDiscount
			AddOnChargeWorkNetAmountForCustomerOrder = WorkNetAmount

			initialize WorkNetAmount

			for each CustomerOrderLinesRel
				if (!each.NoCharge)
					LocalCustomerOrderLine		= each.CustomerOrderLine
					LocalLineNumber				= each.CustomerOrderLine
					LocalOrderQuantity			= each.OrderQuantity
					LocalSellPriceCurrency		= each.SellPriceCurrency
					LocalDiscountAmountCurrency = each.DiscountAmountCurrency
					LocalEnteredDiscount		= each.EnteredDiscount
					initialize  WorkAddonChargeDiscount
					initialize  WorkNetAmount
					if (each.OverrideTaxable entered)
						WorkNetAmount			+= each.OverrideTaxable	
					else
						WorkNetAmount			+= ((each.OrderQuantity * each.SellPriceCurrency) - (each.DiscountAmountCurrency - each.EnteredDiscount))
					
					if ((EnteredDiscount entered
					or  OrderDiscountAmount entered)
					and each.OrderDiscount)
						WorkAddonChargeDiscount	+= ((EnteredDiscount + OrderDiscountAmount) *(WorkNetAmount/ DiscountableAmount))
					else
						initialize  WorkAddonChargeDiscount 
					WorkNetAmount				-= WorkAddonChargeDiscount
					WorkNetAmountForCustomerOrderLine += WorkNetAmount

					initialize  WorkAddonChargeDiscount
					initialize  WorkNetAmount
					for each AddOnChargesForCustomerOrderLineRel
						if (each.ChargeType.FlatAmount)
							WorkNetAmount		+= each.EnteredUnitPrice
						else
							if (each.ChargeType.Percentage)
								WorkNetAmount   += (((LocalOrderQuantity * LocalSellPriceCurrency) - LocalDiscountAmountCurrency - LocalEnteredDiscount) * each.PricePercent)  
							else
								if (each.ChargeType.UnitPrice)
									WorkNetAmount	+= LocalOrderQuantity * each.EnteredUnitPrice

						if ((EnteredDiscount entered
						or  OrderDiscountAmount entered)
						and each.OrderDiscount)
							WorkAddonChargeDiscount	+= ((EnteredDiscount + OrderDiscountAmount) *(WorkNetAmount/ DiscountableAmount))
						else
							initialize  WorkAddonChargeDiscount

					WorkNetAmount					-= WorkAddonChargeDiscount
					AddOnChargeWorkNetAmountForCustomerOrder += WorkNetAmount 

				TotalWorkNetAmount					= AddOnChargeWorkNetAmountForCustomerOrder
				if (not TaxEntityRel.ThirdParty.Sabrix)
					TotalWorkNetAmount += WorkNetAmountForCustomerOrderLine

				if (FreightCharge entered)
					if (IsCompanyTermsFreight
					or  IsProcessLevelTermsFreight)
						GroupNetAmount				= TotalWorkNetAmount + FreightCharge
					else
						GroupFreightAmount			+=  FreightCharge
				if (IsCompanyInvoiceOptionAndTermsAddOnCharge
				or  IsProcessLevelInvoiceOptionAndTermsAddOnCharge)
					LocalTermsAmount				= AddOnChargeWorkNetAmountForCustomerOrder
					include CalculateTermsDiscount
					GroupNetAmount					-= LocalTermsDiscount
				else
					GroupNetAmount					= TotalWorkNetAmount + GroupFreightAmount + AddOnChargeWorkNetAmountForCustomerOrder
				initialize CalculateTax
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.System					= "OE"
				CalculateTax.TaxCode				= TaxCode
				CalculateTax.ProcessLevel			= BillingProcessLevel
				CalculateTax.Invoice				= CustomerOrder
				CalculateTax.PostalAddress			= ShipPostalAddress
				CalculateTax.FromPostalAddress		= InventoryLocation.PostalAddress
				CalculateTax.Function				= "C"
				CalculateTax.ThirdPartyFunction		= "I"
				CalculateTax.TransactionType		= "S"
				CalculateTax.TaxableAmount			= GroupNetAmount
				CalculateTax.TaxDate				= TaxDate
				CalculateTax.ShipmentDate			= ExpectedShipDate
				if (TermsCode entered)
					CalculateTax.PaymentDate		= LocalTermsDueDate
				else
					CalculateTax.PaymentDate		= current corporate date
				CalculateTax.InvoiceDate			= current corporate date
				CalculateTax.GeneralLedgerDate		= current corporate date
				if (LocalDoCreateTaxLog)
					CalculateTax.DontCreateLogFile		= false
					CalculateTax.DontCreateResultFiles	= false
				else
					CalculateTax.DontCreateLogFile		= true
					CalculateTax.DontCreateResultFiles	= true
				include LoadVertexGlobalInputFields 
				include LoadOneSourceInputFields
				if (not SingleCallToOneSource
				and not SingleCallToVertex)
					include VertexFlexibleFields
					if (not LocalTaxLineItemCreated)
						include CreateTaxLineItemAndUserFieldsForHeader
					LocalExecuteCalculateTax			= CalculateTax.ExecuteCalculateTax
					LocalTaxTable = CalculateTax.TaxTable
					if (LocalTaxTable entered)
						for each LocalTaxTable.TaxTableOutput
							LocalSalesTax  += each.TaxAmount5DP
					else
						LocalSalesTax							+= CalculateTax.OutputTotalTaxAmount
				
					if (TaxEntityRel.ThirdParty.Sabrix)
						include CalculateLineSalesTax


		CalculateSalesTax
			initialize CalculateTax
			CalculateTax.TaxEntity				= Company.AccountingEntity
			CalculateTax.System					= "OE"
			CalculateTax.TaxCode				= LocalTaxCode
			CalculateTax.ProcessLevel			= BillingProcessLevel
			CalculateTax.Invoice				= CustomerOrder
			CalculateTax.PostalAddress			= ShipPostalAddress
			CalculateTax.FromPostalAddress		= InventoryLocation.PostalAddress
			CalculateTax.Function				= CalculateTax.Function.CalculateTax
			CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
			CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
			CalculateTax.TaxableAmount			= WorkNetAmount
			CalculateTax.TaxDate				= TaxDate
			CalculateTax.ShipmentDate			= ExpectedShipDate
			CalculateTax.InvoiceDate			= current corporate date
			CalculateTax.GeneralLedgerDate		= current corporate date
			CalculateTax.PaymentDate			= LocalPaymentDate
			CalculateTax.ProductTaxCategory		= each.ProductTaxCategory
			if (LocalDoCreateTaxLog)
				CalculateTax.DontCreateLogFile		= false
				CalculateTax.DontCreateResultFiles	= false
			else
				CalculateTax.DontCreateLogFile		= true
				CalculateTax.DontCreateResultFiles	= true

			if (IsHSNSACCodeEnabled)
				CalculateTax.CommodityCodeType			= "HSN"
				CalculateTax.HSNSACCode					= each.HSNSACCode
			else 
				CalculateTax.CommodityCodeType			= "UNSPSC"
				CalculateTax.HSNSACCode					= each.DerivedUNSPSCCodeNoDash

			include LoadVertexGlobalInputFields 
			include LoadOneSourceInputFields

			if (not SingleCallToVertex)
				LocalExecuteCalculateTax			= CalculateTax.ExecuteCalculateTax
				LocalTaxTable = CalculateTax.TaxTable
				if (LocalTaxTable entered)
					for each LocalTaxTable.TaxTableOutput
						LocalSalesTax  += each.TaxAmount5DP
		
		CalculateSalesTaxAOC
			initialize CalculateTax
			LocalProductTaxCategory				= each.ProductTaxCategory
			LocalCommodityCode					= each.Miscellaneous.UNSPSCCode.UNSPSCCodeDisplay
			CalculateTax.TaxEntity				= Company.AccountingEntity
			CalculateTax.System					= "OE"
			CalculateTax.TaxCode				= LocalTaxCode
			CalculateTax.ProcessLevel			= BillingProcessLevel
			CalculateTax.Invoice				= CustomerOrder
			CalculateTax.PostalAddress			= ShipPostalAddress
			CalculateTax.FromPostalAddress		= InventoryLocation.PostalAddress
			CalculateTax.Function				= CalculateTax.Function.CalculateTax
			CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
			CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
			CalculateTax.TaxableAmount			= WorkNetAmount
			CalculateTax.TaxDate				= TaxDate
			CalculateTax.ShipmentDate			= ExpectedShipDate
			CalculateTax.InvoiceDate			= current corporate date
			CalculateTax.GeneralLedgerDate		= current corporate date
			CalculateTax.PaymentDate			= LocalPaymentDate
			CalculateTax.ProductTaxCategory		= LocalProductTaxCategory
			CalculateTax.DontCreateLogFile		= true
			CalculateTax.DontCreateResultFiles	= true
			if (TaxEntityUsesVertex)
				if (LocalAOCAmountAfterTermsDiscount entered)
					CalculateTax.UnitCost					= LocalAOCAmountAfterTermsDiscount
			if (IsHSNSACCodeEnabled)
				CalculateTax.CommodityCodeType			= "HSN"
				CalculateTax.HSNSACCode					= each.Miscellaneous.HSNSACCode
			else 
				CalculateTax.CommodityCodeType			= "UNSPSC"
				CalculateTax.UNSPSCCode					= LocalCommodityCode
			include LoadVertexGlobalInputFields 
			include LoadOneSourceInputFieldsForAOC
			if (not LocalTaxLineItemCreated)
				include CreateTaxLineItemAndUserFieldsForAOC
			if (not SingleCallToOneSource
			and not SingleCallToVertex)
				include VertexFlexibleFieldsForAOC
				CalculateTax.UniqueIdOfRelatedObject	= UniqueID
				LocalExecuteCalculateTax				= CalculateTax.ExecuteCalculateTax
				LocalTaxTable = CalculateTax.TaxTable
				if (LocalTaxTable entered)
					for each LocalTaxTable.TaxTableOutput
						LocalSalesTax  += each.TaxAmount5DP

		CreatePurchaseOrderInterfaceAddOnCharge
			invoke Create PurchaseOrderInterfaceAddOnCharge
		 		fill in fields from this instance
				invoked.Company                                      					= Company
				invoked.PurchaseOrderInterfaceAddOnCharge.SourceDocumentOrigin  		= "OE"
				invoked.PurchaseOrderInterfaceAddOnCharge.SourceDocumentNumeric 		= CustomerOrder
				initialize invoked.PurchaseOrderInterfaceAddOnCharge.LineNumber
				invoked.PurchaseOrderInterfaceAddOnCharge.AddOnCharge      				= BillingFreightCode.AddOnCharge
				invoked.Quantity						 								= 1
				invoked.AddOnChargeEntryMethod							 				= AddOnChargeEntryMethod.TotalAmount
				invoked.TotalAddOnChargeAmount								 			= 0.01
				invoked.CustomerOrderAddOnChargeType									= "HA"
				invoked.Account															= BillingFreightCode.AddOnCharge.PostingAccount

		CalculateLineSalesTax
			initialize CalculateTax
			CalculateTax.TaxEntity				= Company.AccountingEntity
			CalculateTax.System					= "OE"
			CalculateTax.TaxCode				= CustomerOrderLineRel.TaxCode
			CalculateTax.ProcessLevel			= BillingProcessLevel
			CalculateTax.Invoice				= CustomerOrder
			CalculateTax.PostalAddress			= ShipPostalAddress
			CalculateTax.FromPostalAddress		= InventoryLocation.PostalAddress
			CalculateTax.Function				= CalculateTax.Function.CalculateTax
			CalculateTax.ThirdPartyFunction		= CalculateTax.ThirdPartyFunction.Calculate
			CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
			CalculateTax.TaxableAmount			= CustomerOrderLineRel.OverrideTaxable
			CalculateTax.TaxDate				= TaxDate
			CalculateTax.ShipmentDate			= ExpectedShipDate
			CalculateTax.InvoiceDate			= current corporate date
			CalculateTax.GeneralLedgerDate		= current corporate date
			CalculateTax.PaymentDate			= LocalPaymentDate
			CalculateTax.ProductTaxCategory		= CustomerOrderLineRel.ProductTaxCategory
			CalculateTax.DontCreateLogFile	= true
			include LoadVertexGlobalInputFields 
			include LoadOneSourceInputFieldsForLine
			LocalExecuteCalculateTax			= CalculateTax.ExecuteCalculateTax
			LocalTaxTable = CalculateTax.TaxTable
			if (LocalTaxTable entered)
				for each LocalTaxTable.TaxTableOutput
					LocalLineSalesTax  += each.TaxAmount5DP


		CalculateTermsDiscountAmount



			LocalTermsAmount = GoodsAmount

			if (IsCompanyTermsFreight
			or  IsProcessLevelTermsFreight)
				LocalTermsAmount += FreightCharge

			if (IsCompanyInvoiceOptionAndTermsAddOnCharge
			or IsProcessLevelInvoiceOptionAndTermsAddOnCharge)
				LocalTermsAmount += TotalAddOnChargeAmount

			include CalculateTermsDiscount


		CalculateTaxableAmount
			if (not LocalTaxComputed)
				if (Company.InvoiceOption.CompanyLevelInvoicing)
					LocalTaxPrint						= Company.TaxCalulationAndPrinting
				else
					LocalTaxPrint						= BillingProcessLevel.TaxCalulationAndPrinting
				if ((CashInAdvanceRequired or CashOnDelivery)
				and (LocalTaxPrint	= "T" or  LocalTaxPrint = "X"))


					if (TaxCode entered)
						include CalculateTaxByGroup
				else
					include CalculateTaxAmounts
				LocalTaxComputed = true	


		CalculateTotalAmounts
			if (TaxStatus.Taxable)
				if (not LocalTaxComputed)
					include CalculateTaxableAmount
					TaxTotal = LocalSalesTax + LocalLineSalesTax
			else
				initialize TaxTotal
			include CalculateTermsDiscountAmount
			OpenOrderAmount = InventoryGoodsAmount + NonInventoryGoodsAmount + TotalAddOnChargeAmount + FreightCharge - OrderDiscountAmount - EnteredDiscount
			TotalOrderAmount = OpenOrderAmount + TaxTotal - LocalTermsDiscount

		UpdateCustomerOpenOrderAmount
			invoke FastUpdate CompanyCustomer
				invoked.OpenOrderAmount += OriginalOpenOrderAmountInCompanyCustomerCurrency
				
			invoke FastUpdate Customer
				invoked.OpenOrderAmount += OriginalOpenOrderAmountInCustomerCurrency

	Conditions
		IsFullyInterfaced
			restricted
			when (PurchaseOrderInterfaceRel not exists)

		IsOrderWithinCustomerLimit
			restricted			
			when  ((CompanyCustomer.OrderLimit not entered or (DerivedProjectedCustomerOpenOrderAmount <= CompanyCustomer.OrderLimit))
			and    (CompanyCustomer.CreditLimit not entered or (DerivedProjectedCustomerOpenOrderAmount <= CompanyCustomer.CreditLimit)))
			
		HasCreatePOLineAndOrderAmountExceedingOrderLimit
			restricted
			when (CustomerOrderLinesCreatePurchaseOrderRel exists
			and   CompanyCustomer.OrderEntryCustomer.CheckCreditOnOrderAdd
			and   not IsOrderWithinCustomerLimit)
			
		IsOrderAmountExceedingOrderLimit
			restricted
			when (CompanyCustomer.OrderEntryCustomer.CheckCreditOnOrderAdd
			and   not IsOrderWithinCustomerLimit)

		TaxEntityUsesVertex
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries)

		HasProformaInvoice
			restricted
			when (ProformaInvoiceRel exists)

		HasNoPrePayments
			restricted
			when (ProformaInvoiceRel exists
			and   ProformaInvoiceRel.ReceivablePrepaymentRel not exists)

		HasPrePayments
			restricted
			when (ProformaInvoiceRel exists
			and   ProformaInvoiceRel.ReceivablePrepaymentRel exists)

		ShipImmediateAndOnProHold
			restricted
			when (!ShipImmediate
			and	  !OnProformaPaymentHold)

		ShipImmediateAndOnNotProHold
			restricted
			when (ShipImmediate
			and	  !OnProformaPaymentHold)

		TaxOutputDueAccount
			restricted
			when (TaxStatus.Taxable
			and TaxCode entered
			and EntityTaxCodeRel.TaxPoint.PaymentDate
			and not TaxEntityRel.OneSourceUseARCodeForTaxAccount)

		TaxOutputAccount
			restricted
			when (TaxStatus.Taxable
			and TaxCode entered
			and not EntityTaxCodeRel.TaxPoint.PaymentDate
			and not TaxEntityRel.OneSourceUseARCodeForTaxAccount)

		IsCompanyTermsFreight
			restricted
			when (Company.InvoiceOption.CompanyLevelInvoicing
			and   Company.TermsFreight)

		IsProcessLevelTermsFreight
			restricted
			when (Company.InvoiceOption.ProcessLevelInvoicing
			and   BillingProcessLevel.TermsFreight)

		IsCompanyInvoiceOptionAndDiscountAddOnCharge
			restricted
			when (Company.InvoiceOption.CompanyLevelInvoicing
			and   Company.DiscountAddOnCharge)

		IsProcessLevelInvoiceOptionAndDiscountAddOnCharge
			restricted
			when (Company.InvoiceOption.ProcessLevelInvoicing
			and   BillingProcessLevel.DiscountAddOnCharge)


		IsCompanyInvoiceOptionAndTermsAddOnCharge
			restricted
			when (Company.InvoiceOption.CompanyLevelInvoicing
			and   Company.TermsAddOnCharge)

		IsProcessLevelInvoiceOptionAndTermsAddOnCharge
			restricted
			when (Company.InvoiceOption.ProcessLevelInvoicing
			and   BillingProcessLevel.TermsAddOnCharge)

		IsPaymentTaxAfterTerms
			restricted
			when (EntityTaxCodeRel.TaxTerms.Taxafterterms)

		IsHoldCode
			restricted
			classic name is CORSET6
			when (HoldCode entered)

		IsNotSalesAnalysisUpdated
			restricted
			when (not SalesAnalysisUpdate.Yes
			and   Status >  1)

		NoElectronicDataEntered
			restricted
			when (BillingElectronicPaymentType	  not entered
			and   BillingCustomerCreditCard		  not entered
			and   ElectronicPaymentExpirationDate not entered)

		NoElectronicPayment
			restricted
			when (BillingElectronicPaymentType	  not entered
			and   BillingCustomerCreditCard		  not entered
			and   ElectronicPaymentExpirationDate not entered
			and   CheckNumber					  not entered)

		HasUserRestricted
			restricted
			when (OrderEntryOperator.RestrictToDefaults)

		IsReleased
			restricted
			when (Status.Released
			or	Status.Canceled
			or	Status.ReadyForPurge)

		IsUnreleased
			restricted
			when (Status.Unreleased)

		HasCompletedCanceledLines
			restricted
			when (CustomerOrderLinesCanceledCompleted exists)

		IsCanceled
			restricted
			when (Status.Canceled)

		IsLineExists
			when (CustomerOrderLinesRel exists)

		CancelCustomerOrder
			when (CustomerOrderLinesToCancelOrderRel not exists
			and OrderGrossAmount not entered)

		DisplayOnlyForLoggedInUser
			restricted

			when  ((actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent	
			and		DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ReceivableCompany
			and		DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).CustomerRepresentative.Customer)

			or		(actor.agent(CustomerRepresentativeContact).IsActiveInvoiceCustomer	
			and		Company = actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ReceivableCompany
			and		Customer = actor.agent(CustomerRepresentativeContact).CustomerRepresentative.Customer))

		HasShipToAddress
			restricted
			when (CustomerShipTo.ShipToAddress entered)

		HasBillToAddress
			restricted
			when (CustomerBillTo.PostalAddress entered)

		HasOpenOrders
			restricted
			when (PartiallyOrFullyNotShippedLinesRel exists)

		OrderCancelledOrLineCancelled
			restricted
			when ((Status.Canceled)
			or	(Status.Released
			and   CustomerOrderLinesCancelRel exists))

		PortalOpenOrders
			restricted
			when (Status.Unreleased
			or	  Status.Released)

		PortalCompletedOrders
			restricted
			when (Status.Canceled
			or	  Status.ReadyForPurge)

		CustomersOnHold
			restricted
			when (Customer.ReceivableHoldCode entered)

		WithinCreditLimitDateRange
			restricted
			when (CreditLimitDateRange not entered
			or	CompanyCustomer.CreditLimitDate  within CreditLimitDateRange)

		CreditOverrideHoldCode
			restricted
			when (HoldCode entered
			and   HoldCode = OrderEntryCustomer.CreditLimitHoldCode
			and   HoldCodeApprove
			and   WithinCreditLimitDateRange)

		CashDownPaymentsByCustomer
			restricted
			when (HasOpenOrders
			and  (CashInAdvanceRequired
			or EnteredPayment entered))

		IsTaxEntityTaxAfterTerms
			restricted
			when (TaxEntityRel.UseTaxCodeAccounts
			and TaxEntityRel.TaxTerms.Taxafterterms)

		IsValidElectronicPaymentAccount
			restricted
			when ((BillingCustomerCreditCardListRel exists
			and	BillingCustomerCreditCard exists)
			or	 BillingCustomerCreditCardListRel not exists)

		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)
		
		RecordExists
			restricted
			when (CustomerOrder exists)
		
		CurrencyEntered
			restricted
			when (Currency entered)
		
		TelexNumberExists
			restricted
			when (CompanyCustomer.TelexNbr entered)

		DoTaxCalculation
            restricted
            when (not TaxEntityRel.ThirdParty.Sabrix   
            or    not TaxEntityRel.DelayTaxProcessing  
            or	  Status.Released
			or    Status.ReadyForPurge) 			   
		
		IsOneSourceTax
			restricted
			when (TaxStatus.Taxable
			and	  TaxEntityRel.ThirdParty.Sabrix)
		
		TaxEntityUsesSabrix
			restricted
			when (TaxEntityRel.ThirdParty.Sabrix)
		
		SingleCallToOneSource
			restricted
			when (IsOneSourceTax 
			and	  TaxEntityRel.DelayTaxProcessing
			and	  DerivedLineCount <= 200)

		IsVertexTax
			restricted
			when (TaxStatus.Taxable
			and   TaxEntityUsesVertex)

		SingleCallToVertex
			restricted
			when (IsVertexTax 
			and	  TaxEntityRel.VertexCallMethod.ByTransaction
			and	  DerivedLineCount <= 200)

		OrdersShippedNotInvoiced
            when (WarehouseShipment entered
            and	  WarehouseShipment.Status.Released)

        OrdersReleasedNotShipped
            when ((Status.Released
			and WarehouseShipment not entered)
			or	(WarehouseShipment entered
            and   WarehouseShipment.Status <= 2))

		IsShipmentPending
            when (ExpectedShipDate < current corporate date)

		IsValidForActorContext
			restricted
			when ((actor.context.FinanceEnterpriseGroup != ""
			and   GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
			or   (actor.context.FinanceEnterpriseGroup = ""))

	Relations	


		BillingCompanyRel
			one-to-one relation to BillingCompany
			Field Mapping uses symbolic key
				related.Company					 = Company



		BillingCustomerCreditCardListRel
			one-to-many relation to BillingCustomerCreditCard
			Field Mapping uses symbolic key
				related.Company							= Company
				related.Customer						= Customer
				related.BillingElectronicPaymentType	= BillingElectronicPaymentType


		BillingCustomerCreditCardDefaultRel
			one-to-many relation to BillingCustomerCreditCard
			Field Mapping uses symbolic key
				related.Company						= Company
				related.Customer					= Customer
			Instance Selection
				where (related.DefaultAccount)



		BillingInvoiceRel
			one-to-many relation to BillingInvoice
			Field Mapping uses Set3
				related.Company					 = Company
				related.CustomerOrder			 = CustomerOrder


		BillingInvoiceCertificationNumberRel
			one-to-many relation to BillingInvoice
			Field Mapping uses Set3
				related.Company						 = Company
			Instance Selection
				where (related.CertificationNumber	 = CertificationNumber)


		BillingInvoicesRel
			one-to-many relation to BillingInvoice
			Field Mapping uses Set3
				related.Company					 = Company
				related.CustomerOrder			 = CustomerOrder



		BillingInvoiceTypeRel
			one-to-one relation to BillingInvoiceType
			Field Mapping uses symbolic key
				related.Company							=  Company
				related.BillingInvoiceType				=  OrderEntryOrderType.BillingInvoiceType



		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "OE"
				related.Company					 = Company



		CustomerBillToRel
			one-to-many relation to CustomerBillTo
			Field Mapping uses symbolic key
				related.CustomerGroup					= Customer.CustomerGroup
				related.Customer						= Customer
			Instance Selection
				where ( related.DefaultBillTo			= true)



		CustomerOrderCertificationNumberRel
			one-to-many relation to CustomerOrder
			Field Mapping uses symbolic key
				related.Company						 = Company
			Instance Selection
				where (related.CertificationNumber	 = CertificationNumber
				and	related.UniqueID				!= UniqueID)



		AllCustomerOrderAddOnChargesRel
			one-to-many relation to CustomerOrderAddOnCharge
			Field Mapping uses symbolic key
				related.Company						= Company
				related.CustomerOrder				= CustomerOrder


		CustomerOrderAddOnChargeForCopyRel
			one-to-many relation to CustomerOrderAddOnCharge
			Field Mapping uses symbolic key
				related.Company						= Company
				related.CustomerOrder				= LocalCustomerOrder
			Instance Selection
				where (related.CustomerOrderLine not entered)


		CustomerOrderLineAddOnChargesRel
			one-to-many relation to CustomerOrderAddOnCharge
			Field Mapping uses symbolic key
				related.Company						= Company
				related.CustomerOrder				= LocalCustomerOrder
				related.CustomerOrderLine			= LocalCustomerOrderLine


		AddOnChargesForCustomerOrderLineRel		is a CustomerOrderAddOnCharge set
			Instance Selection
				where (related.CustomerOrderLine	= LocalLineNumber)


		AddOnChargesForCustomerOrderRel			is a CustomerOrderAddOnCharge set
			Instance Selection
				where(related.CustomerOrderLine  not entered)


		CustomerOrderAddOnChargeRel				is a CustomerOrderAddOnCharge set


		CustomerOrderAddOnChargesRel			is a CustomerOrderAddOnCharge set
			Instance Selection
				where (related.CustomerOrderLine not entered)



		CustomerOrderLineForGroupPricingRel	
			one-to-many relation to CustomerOrderLine
			Field Mapping uses Set4
				related.Company						 = Company
				related.CustomerOrder				 = CustomerOrder


		CustomerOrderLinesForCopyRel
			one-to-many relation to CustomerOrderLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.CustomerOrder				= LocalCustomerOrder


		CustomerOrderLinesRel						is a CustomerOrderLine set

		CustomerOrderLineRel
			one-to-one relation to CustomerOrderLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.CustomerOrder				= CustomerOrder
				related.CustomerOrderLine			= LocalCustomerOrderLine

		TaxableCustomerOrderLinesRel
			one-to-many relation to CustomerOrderLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.CustomerOrder				= CustomerOrder
			Instance Selection
				where (related.TaxStatus.Taxable)
		
		TaxableCustomerOrderAOCRel
			one-to-many relation to CustomerOrderAddOnCharge
			Field Mapping uses symbolic key
				related.Company						= Company
				related.CustomerOrder				= CustomerOrder
			Instance Selection
				where (related.TaxStatus.Taxable)

		CustomerOrderLinesCanceledCompleted			is a CustomerOrderLine set
			Instance Selection
				where (!related.Status.Canceled)


		CustomerOrderLinesCancelRel					is a CustomerOrderLine set
			Instance Selection
				where (related.CancelQuantity entered)


		CustomerOrderLinesForDiscounableLineRel		is a CustomerOrderLine set
			Instance Selection
				where (related.HasDiscountable
				and	related.TaxCode entered)


		CustomerOrderLinesForNotDiscounableLineRel	is a CustomerOrderLine set
			Instance Selection
				where (related.HasNotDiscountable
				and	related.TaxCode entered)


		CustomerOrderLinesToCancelOrderRel			is a CustomerOrderLine set
			Instance Selection
				where (related.Status.ReadyForDelete
				or related.Status.Unreleased
				or related.Status.Released)


		CustomerOrderLinesDropship					is a CustomerOrderLine set
			Instance Selection
				where (related.Dropship)

		CustomerOrderLinesCreatePurchaseOrderRel    is a CustomerOrderLine set
			Instance Selection
				where (related.CreatePurchaseOrder)

		PartiallyOrFullyNotShippedLinesRel			is a CustomerOrderLine set
			Instance Selection
				where (related.ShippedQuantity != related.OrderQuantity)



		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = Company.AccountingEntity.FinanceEnterpriseGroup
				related.TaxEntity				 = Company.AccountingEntity
				related.TaxCode					 = TaxCode



		IntrastatHeaderRel
			one-to-one relation to IntrastatHeader
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			 = Company.CustomerBusinessGroup.FinanceEnterpriseGroup
				related.TaxEntity						 = Company.AccountingEntity
				related.IntrastatHeader.FiscalYear		 = IntrastatFiscalYear
				related.IntrastatHeader.IntrastatNumber	 = IntrastatNumber



		InventoryCompanyRel
			one-to-one relation to InventoryCompany
			Field Mapping uses symbolic key
				related.Company						= Company



		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig			 = Company.AccountingEntity.FinanceEnterpriseGroup
			Instance Selection
				where (related.CallingModuleKey	 = reference to this instance)



		NationalAccountInvoiceRel
			one-to-many relation to NationalAccount
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company		= Company
				related.NationalAccount.InvoiceAccountGroup.Customer	= Customer



		OrderEntryCustomerRel
			one-to-one relation to OrderEntryCustomer
			Field Mapping uses symbolic key
				related.Company						= Company
				related.Customer					= Customer



		LastStandardOrderCommentsRel
			one-to-many relation to OrderEntryOrderComment
			Field Mapping uses symbolic key
				related.Company						= Company
				related.Customer					= blank
				related.OrderEntryStandardOrder		= blank
				related.CustomerOrder				= CustomerOrder
			Instance Selection
				where (related.CustomerOrderLine = 999999)


		OrderEntryOrderCommentsRel
			one-to-many relation to OrderEntryOrderComment
			Field Mapping uses symbolic key
				related.Company						= Company
				related.Customer					= blank
				related.OrderEntryStandardOrder		= blank
				related.CustomerOrder				= CustomerOrder


		StandardOrderCommentsRel
			one-to-many relation to OrderEntryOrderComment
			Field Mapping uses symbolic key
				related.Company						= Company
				related.Customer					= blank
				related.OrderEntryStandardOrder		= blank
				related.CustomerOrder				= CustomerOrder
			Instance Selection
				where (related.CustomerOrderLine not entered)



		OrderEntryStandardOrderRel
			one-to-many relation to OrderEntryStandardOrder
			Field Mapping uses symbolic key
				related.Company						= Company
				related.Customer					= Customer
				related.OrderEntryStandardOrder		= LocalStandardOrder



		StandardOrderLinesCopyRel
			one-to-many relation to OrderEntryStandardOrderLine
			Field Mapping uses symbolic key
				related.Company						= Company
				related.Customer					= Customer
				related.OrderEntryStandardOrder		= LocalOriginalStandardOrder



		CustomerOrderPurchaseOrderRel
			one-to-one relation to PurchaseOrder
			Field Mapping uses symbolic key
				related.Company				= Company
				related.PurchaseOrder		= CustomerPurchaseOrder



		PurchaseOrderLineSourcesRel
			one-to-many relation to PurchaseOrderLineSource
			Field Mapping uses Set2
				related.PurchaseOrderLineSource.OperatingCompany		 = Company
				related.PurchaseOrderLineSource.SourceDocumentOrigin	 = "OE"
				related.PurchaseOrderLineSource.SourceDocumentNumeric	 = CustomerOrder

		PurchaseOrderInterfaceRel
			one-to-many relation to PurchaseOrderInterface
			Field Mapping uses Set10
				related.PurchaseOrderInterface.SourceDocumentOrigin      = "OE"
				related.PurchaseOrderInterface.OperatingCompany          = Company
				related.PurchaseOrderInterface.SourceDocumentNumeric     = CustomerOrder



		PriceDiscountCodeRel
			one-to-many relation to PriceDiscountCode
			Field Mapping uses symbolic key
				related.Company						= Company



		ProformaInvoiceRel
			one-to-one relation to ProformaInvoice
			delete cascades
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ProformaInvoice			 = CustomerOrder



		ProformaInvoiceLineTaxRel
			one-to-many relation to ProformaInvoiceLineTax
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.CustomerOrder			 = CustomerOrder



		ReceivableInvoiceCertificationNumberRel
			one-to-many relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company						 = Company
			Instance Selection
				where (related.CertificationNumber	 = CertificationNumber)



		ReceivableProcessLevelRel
			one-to-one relation to ReceivableProcessLevel
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableProcessLevel	 = BillingProcessLevel



		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = Company.AccountingEntity.FinanceEnterpriseGroup
				related.TaxEntity				 = Company.AccountingEntity 


		TaxConfigurationRel
        	one-to-one relation to TaxConfiguration
        	Field Mapping uses symbolic key
				related.TaxConfiguration = Company.AccountingEntity.FinanceEnterpriseGroup


		VertexConfigRel
			one-to-one relation to VertexConfig
			Field Mapping uses symbolic key
				related.VertexConfig			 = Company.AccountingEntity.FinanceEnterpriseGroup



		WarehouseDemandRel
			one-to-one relation to WarehouseDemand
			Field Mapping uses Set3
				related.Company								 = Company
				related.WarehouseDemand.DemandSystemCode	 = "OE"
				related.WarehouseDemand.DemandCompany		 = Company
				related.DocumentNumberNumeric				 = CustomerOrder



		WarehouseShipmentsRel
			one-to-many relation to WarehouseShipment
			Field Mapping uses Set7
				related.Company = Company
			Instance Selection
				where (related.WarehouseDemand.DemandSystemCode.CustomerOrder
				and   related.WarehouseDemand.DemandDocument = WarehouseDemandRel.WarehouseDemand.DemandDocument)


		FSMBODConfigurationParameterRel
        	one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
            	related.FSMBODConfigurationParameter 		= LocalConfigurationParameter
		
		FSMBODConfigurationRel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 1
            	related.FSMBODConfiguration.Noun 		= "SalesOrder"
            	related.FSMBODConfiguration.Direction 	= 1
            	


		FSMBODConfigurationPARel
        	one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 		= 2
            	related.FSMBODConfiguration.Noun 		= "PulseAlert"
            	related.FSMBODConfiguration.Direction 	= 1
        
        FSMBODConfigurationDetailPARel
        	one-to-many relation to FSMBODConfigurationDetail
			Field Mapping uses symbolic key
            	related.FSMBODConfiguration.Verb 			= 2	
            	related.FSMBODConfiguration.Noun 			= "PulseAlert"
            	related.FSMBODConfiguration.Direction 		= 1
            Instance Selection
				where (related.Alert						= LocalAlert
				and	   related.Enable)

		TaxAttributesRel
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = Company.FinanceEnterpriseGroup
				related.TaxAttribute           = TaxEntityRel.TaxAttributeCode

		BillingInvoicePurgeRel
            one-to-many relation to BillingInvoice
            Field Mapping uses Set3
                related.Company       					= Company
                related.CustomerOrder 					= CustomerOrder 
            Instance Selection
            	where (related.Status != 9
            	and    related.BillingInvoiceSource = "S")
            	
        CustomerOrderLinePurgeRel
			one-to-many relation to CustomerOrderLine
			Field Mapping uses symbolic key
				related.Company							= Company
				related.CustomerOrder					= CustomerOrder
			Instance Selection
				where (related.CustomerOrderLine entered)
				
		WarehouseShipmentRel
			one-to-many relation to WarehouseShipment
			Field Mapping uses Set7
				related.Company								= Company
				related.WarehouseDemand.DemandSystemCode	= "OE"
				related.WarehouseDemand.DemandDocument		= CustomerOrder
				related.WarehouseDemand.DemandCompany		= Company
				
		BillingInvoicesPurgeRel
            one-to-many relation to BillingInvoice
            Field Mapping uses Set3
                related.Company         				= Company
                related.CustomerOrder   				= CustomerOrder
            Instance Selection
            	where (related.BillingInvoiceSource.Shipment)
	
		BillingInvoiceAllowPurgeRel
            one-to-many relation to BillingInvoice
            Field Mapping uses Set3
                related.Company         				= Company
                related.CustomerOrder   				= CustomerOrder
            Instance Selection
            	where (related.IsAllowPurge)
            	
        BillingElectronicPaymentTransactionIDRel
			one-to-many relation to BillingElectronicPaymentTransactionID
			Field Mapping uses Set3
				related.Company							= Company
				related.CustomerOrder					= CustomerOrder
				
		CustomerOrderAttachmentRel is a CustomerOrderAttachment set

		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject = LocalUniqueID
			Instance Selection
				where (related.InvoiceNumber				= CustomerOrder)
		
		TaxLineItemHeaderRel	
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
				related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
			Instance Selection
			    where (related.InvoiceNumber 				= CustomerOrder
				and    related.LineItemNumber 				= 1)
				
		FSMBODCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField 		= "CSFGLC"
				related.FSMBODCrossReference.DestinationField 	= "DESTAE"
			Instance Selection
				where (related.SourceValue	= LocalAccountingEntity)
		
		FSMInboundBODTrackerRel
            one-to-one relation to FSMInboundBODTracker
            Field Mapping uses symbolic key
                related.FSMInboundBODTracker	= LocalFSMInboundBODTracker

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

    Derived Fields

		DerivedLineCount is a DerivedField
			type is Numeric size 3
			restricted
			if (FreightCharge entered)
				return instance count of TaxableCustomerOrderLinesRel + DerivedAOCCount + 1
			else
				return instance count of TaxableCustomerOrderLinesRel + DerivedAOCCount
		
		DerivedAOCCount is a DerivedField
			type is Numeric size 3
			restricted
			return instance count of TaxableCustomerOrderAOCRel
    	
    	DefaultLookupKey is a StringField
			type is Alpha 100
			restricted
			"CustomerOrderLine"
			":"
			CurrentTimestamp

		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp

		DerivedProformaInvoice			is a DerivedField
			type is Alpha 10
			restricted
			if (ProformaCashInAdvanceRequired)
				return ZeroPaddedProformaNumber
			else
				return blank

		ZeroPaddedProformaNumber is a NativeField
			type is Text

		COLinesSum						is a DerivedField
			type is like InternationalAmount
			return sum CustomerOrderLinesRel.LineExtendedAmount

		HeaderAOCSum					is a DerivedField
			type is like InternationalAmount
			return sum CustomerOrderAddOnChargesRel.DerivedAOCAmount

		LinesAOCSum			is a DerivedField
			type is like InternationalAmount
			return sum CustomerOrderLinesRel.LinesAOCSum

		TotalAOCSum					is a DerivedField
			type is like InternationalAmount
			return HeaderAOCSum + LinesAOCSum


		DerivedProformaAmount	is a DerivedField
			type is like InternationalAmount
			return	(OrderTotal * ProformaCashInAdvanceRequiredPercent)

		DerivedVATRate	is a DerivedField
			type is Percent size 8.5
			return ((SalesTax) / (OrderTotal - SalesTax))

		ProformaVATAmount	is a DerivedField
			type is like InternationalAmount
			return ((DerivedVATRate * (DerivedProformaAmount *100))/(100 + (DerivedVATRate * 100)))

		ProformaAdvanceAmount	is a DerivedField
			type is like InternationalAmount
			return (DerivedProformaAmount - ProformaVATAmount)

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforSalesOrder"

		ContextMessageText			is a MessageField
			restricted
			"CustomerOrder<CustomerOrder>ForCustomer<Customer>"

		DerivedDiscountableAmount						is a DerivedField
			type is like InternationalAmount
			restricted
			return (InventoryGoodsAmount + NonInventoryGoodsAmount + TotalAddOnChargeAmount)

		GoodsAmount										is a DerivedField
			type is like InternationalAmount
			return (InventoryGoodsAmount + NonInventoryGoodsAmount)

		GoodsBaseAmount									is a DerivedField
			type is like InternationalAmount
			return (GoodsAmount * CurrencyRate)

		OrderGrossAmount								is a DerivedField
			type is like InternationalAmount
			return (InventoryGoodsAmount + NonInventoryGoodsAmount	+ TotalAddOnChargeAmount + FreightCharge)

		OrderGrossBaseAmount							is a DerivedField
			type is like InternationalAmount
			return (OrderGrossAmount * CurrencyRate)

		OriginalOpenOrderAmount							is a DerivedField
			type is like InternationalAmount
			return (InventoryGoodsAmount + NonInventoryGoodsAmount + TotalAddOnChargeAmount + FreightCharge - OrderDiscountAmount - EnteredDiscount)

		OriginalOpenOrderBaseAmount						is a DerivedField
			type is like InternationalAmount
			return (OriginalOpenOrderAmount * CurrencyRate)

		DerivedWorkAmount								is a DerivedField
			type is like InternationalAmount
			restricted
			return (OriginalOpenOrderAmount * CashInAdvanceRequiredPercent)

		FreightChargeBase								is a DerivedField
			type is like InternationalAmount
			return (FreightCharge * CurrencyRate)

		TotalAddOnChargeBaseAmount						is a DerivedField
			type is like InternationalAmount
			return (TotalAddOnChargeAmount * CurrencyRate)

		TermsDiscountAmount								is a DerivedField
			type is like InternationalAmount
			include CalculateTermsDiscountAmount
			
			return LocalTermsDiscount
			
		TermsDiscountBaseAmount							is a DerivedField
			type is like InternationalAmount
			return (TermsDiscountAmount * CurrencyRate)

		DerivedTotalTaxableAmount						is a DerivedField
			type is like InternationalAmount
			default label is "TaxableAmount"
			LocalDoCreateTaxLog = false
			LocalTaxLineItemCreated = true
			if (DoTaxCalculation)
				include CalculateTaxAmounts
			return LocalTotalTaxableAmount

		DerivedTaxTotalBaseAmount						is a DerivedField
			type is like InternationalAmount
			return (TaxTotal * CurrencyRate)

		DerivedTotalTaxableBaseAmount					is a DerivedField
			type is like InternationalAmount
			return (DerivedTotalTaxableAmount * CurrencyRate)

		CashInAdvance									is a MessageField
			restricted
			"CannotChangeHoldCode,AddRequiredCashInAdvanceAmount"		

		NotCashInAdvance								is a MessageField
			restricted
			"CannotChangeHoldCode,ReleaseOnHoldOrders"					

		DerivedMessageForHoldCode						is a DerivedField
			type is MessageField
			restricted
			if (CashInAdvanceRequired)
				return CashInAdvance
			else
				return NotCashInAdvance

		OrderTotal										is a DerivedField
			type is like InternationalAmount
			return (OriginalOpenOrderAmount + SalesTax - TermsDiscountAmount)

		OrderTotalBase									is a DerivedField
			type is like InternationalAmount
			return (OrderTotal * CurrencyRate)

		TotalCancelQuantity								is a DerivedField
			type is like Quantity
			restricted
			initialize LocalTotalCancelQuantity
			if (IsReleased)
				for each CustomerOrderLinesRel
					LocalTotalCancelQuantity  += each.CancelQuantity
			return LocalTotalCancelQuantity

		OrderDiscountPercentForDiscountCode				is a DerivedField
			type is Percent size 5.2
			include CalculateOrderDiscounts
			return LocalOrderDiscountPercent

		OrderDiscountAmountForDiscountCode				is a DerivedField
			type is like InternationalAmount
			include CalculateOrderDiscounts
			return LocalOrderDiscountAmount

		OrderDiscountBaseAmountForDiscountCode			is a DerivedField
			type is like InternationalAmount
			return (OrderDiscountAmountForDiscountCode * CurrencyRate)

		EnteredDiscountBase								is a DerivedField
			type is like InternationalAmount
			return (EnteredDiscount * CurrencyRate)

		EnteredPaymentAmount							is a DerivedField
			type is like InternationalAmount
			restricted
			if (CashInAdvanceRequired)
				return (OrderTotal * CashInAdvanceRequiredPercent)

		SalesTax										is a DerivedField
			type is like InternationalAmount
			LocalDoCreateTaxLog = false
			LocalTaxLineItemCreated = true
			if (DoTaxCalculation)
				include CalculateTaxableAmount
				if (SingleCallToOneSource
				or SingleCallToVertex)
					return LocalTotalTaxLineItemAmount 
				else	
					return LocalLineSalesTax + LocalSalesTax

		SalesTaxBase													is a DerivedField
			type is like InternationalAmount
			return (SalesTax * CurrencyRate)

		DerivedLimit1		is a DerivedField
			type is like CreditLim
			restricted
			return (CompanyCustomer.CreditLimit * OrderEntryCustomer.AgeCredPcts.AgeCredPct[1])

		DerivedLimit2		is a DerivedField
			type is like CreditLim
			restricted
			return (CompanyCustomer.CreditLimit * OrderEntryCustomer.AgeCredPcts.AgeCredPct[2])

		DerivedLimit3		is a DerivedField
			type is like CreditLim
			restricted
			return (CompanyCustomer.CreditLimit * OrderEntryCustomer.AgeCredPcts.AgeCredPct[3])

		DerivedLimit4		is a DerivedField
			type is like CreditLim
			restricted
			return (CompanyCustomer.CreditLimit * OrderEntryCustomer.AgeCredPcts.AgeCredPct[4])

		DerivedLimit5		is a DerivedField
			type is like CreditLim	
			restricted
			return (CompanyCustomer.CreditLimit * OrderEntryCustomer.AgeCredPcts.AgeCredPct[5])

		DerivedDestinationCountry			is a DerivedField
			type is like Country
			restricted
			if (CustomerShipTo entered)
				return CustomerShipTo.ShipToAddress.Country
			else
				return CompanyCustomer.Customer.PostalAddress.Country

		DerivedDestinationRegion			is a DerivedField
			type is like Region
			restricted
			if (CustomerShipTo entered)
				return CustomerShipTo.ShipToAddress.Region
			else
				return CompanyCustomer.Customer.PostalAddress.Region


		DerivedIntrastatProcessing			is a DerivedField
			type is Boolean
			restricted
			LocalIntrastatProcessing.TaxEntity				= Company.AccountingEntity
			LocalIntrastatProcessing.OriginCountry			= InventoryLocation.PostalAddress.Country
			LocalIntrastatProcessing.OriginRegion			= InventoryLocation.PostalAddress.Region
			LocalIntrastatProcessing.FiscalYear				= IntrastatFiscalYear
			LocalIntrastatProcessing.DestinationCountry		= DerivedDestinationCountry
			LocalIntrastatProcessing.DestinationRegion		= DerivedDestinationRegion
			LocalMainTrigger								= LocalIntrastatProcessing.CheckCountries
			return LocalIntrastatProcessing.DoIntrastatReporting

		DerivedNationalCompany is a DerivedField
			type is like Company
			restricted
			if (CompanyCustomer.NationalAccountIndicator.No)
				return Company
			else
			if (CompanyCustomer.NationalAccountIndicator.Child)
				return CompanyCustomer.NationalCompany
			else
				return CompanyCustomer.Company

		DerivedNationalCustomer is a DerivedField
			type is like Customer
			restricted
			if (CompanyCustomer.NationalAccountIndicator.No)
				return Customer
			else
			if (CompanyCustomer.NationalAccountIndicator.Child)
				return NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCustomer
			else
				return CompanyCustomer.Customer

		OrderTotalGroupCurrency is a DerivedField
			type is like InternationalAmount
			restricted
			if (Currency = Company.CustomerGroupField.CustomerGroup.Currency)
				LocalWorkAmount = OrderTotal
			else
				OrderEntryExchange.FinanceEnterpriseGroup	= Company.CustomerGroupField.CustomerGroup.CustomerBusinessGroup.FinanceEnterpriseGroup
				OrderEntryExchange.ExchangeDate				= OrderDate
				OrderEntryExchange.TransactionAmount		= OrderTotal
				OrderEntryExchange.FromCurrency				= Currency 
				OrderEntryExchange.BaseAmount.ToCurrency	= Company.CustomerGroupField.CustomerGroup.Currency 
				LocalWorkAmount								= OrderEntryExchange.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		DerivedPortalBaseCurrency is a DerivedField
			type is like Currency
			restricted
			if (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.IsNationalAccountParent)
				return actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ReceivableCompany.CustomerGroupField.CustomerGroup.Currency
			else
				return actor.agent(CustomerRepresentativeContact).CustomerRepresentative.ReceivableCompany.GeneralLedgerCompany.Currency


		DerivedPortalBaseAmount is a DerivedField
			type is like InternationalAmount
			if (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.IsNationalAccountParent)
				return OrderTotalGroupCurrency
			else
				return OrderTotalBase



		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter = "Generic_Delimiter"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedTenantID is a DerivedField 
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "tenantID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "releaseID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "logicalID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "VersionID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedIntegratingApplication is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "IntegratingApplication"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
		
		DerivedMultipleFEG is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "IsMultipleFEG"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value
					
		DerivedCleanDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter = "RequiredCleanDocumentID"
			if (FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedBODCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			DerivedBODCurrentTimeStamp = current timestamp
			return DerivedBODCurrentTimeStamp[1:4] + "-" + DerivedBODCurrentTimeStamp[5:6] + "-" + DerivedBODCurrentTimeStamp[7:8] + "T" + DerivedBODCurrentTimeStamp[9:10] + ":" + DerivedBODCurrentTimeStamp[11:12] + ":" + DerivedBODCurrentTimeStamp[13:14] + "Z"
		
		DerivedBODID is a DerivedField
			type is Alpha size 200
			restricted
			return "infor-nid:"+DerivedTenantID+":"+DerivedAccountingEntity+":" + DerivedLocation +":"+DerivedDocumentID + ":?SalesOrder&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker
		
		DerivedAccountingEntity is a DerivedField
			type is Alpha size 100
			restricted
			if(LocalAEAlreadyExecuted != true)
				LocalAEAlreadyExecuted = true
				if(DerivedCleanDocumentID = "Y")
					if(DerivedMultipleFEG = "Y")
						LocalAccountingEntity = DerivedPrmFEG + DerivedDelimiter + Company using "%d"
					else
						LocalAccountingEntity= Company using "%d"
					if (FSMBODCrossReferenceDetailRel.DestinationValue entered)
						LocalAccountingEntity = FSMBODCrossReferenceDetailRel.DestinationValue
					return LocalAccountingEntity
				else
					LocalAccountingEntity= Company.FinanceEnterpriseGroup + DerivedDelimiter + Company.GeneralLedgerCompany.AccountingEntity
				return LocalAccountingEntity
			else
				return LocalAccountingEntity
		
		DerivedDocumentID is a DerivedField
			type is Alpha size 100
			restricted
			if(DerivedCleanDocumentID = "Y")
				return CustomerOrder using "%d"
			else
				return DerivedCompany + DerivedDelimiter + CustomerOrder using "%d"
		
		DerivedCompany is a DerivedField
			type is Alpha size 10
			restricted
			return Company using "%d"
		
		DerivedBODVariationID is a DerivedField
			type is Alpha size 60
			restricted
			return bod id.VariationID
			
		DerivedSOStatus is a DerivedField
			type is Alpha size 20
			restricted
			if (Status.Released)
				return "Approved" 
			if (Status.ReadyForPurge)
				return "Invoiced"
			else
				return "Deleted"
		
		DerivedLocation is a DerivedField
			type is Alpha size 30
			restricted
			if(DerivedCleanDocumentID = "Y")
				return InventoryLocation
			else
				return DerivedCompany + DerivedDelimiter + InventoryLocation
		
		DerivedLastMDDate is a DerivedField
			type is Alpha size 100
			restricted
			DerivedLastMDDate = update stamp.timestamp
			return DerivedLastMDDate[1:4] + "-" + DerivedLastMDDate[5:6] + "-" + DerivedLastMDDate[7:8] + "T" + DerivedLastMDDate[9:10] + ":" + DerivedLastMDDate[11:12] + ":" + DerivedLastMDDate[13:14] + "Z"
		
		DerivedCOCreateDate is a DerivedField
			type is Alpha size 100
			restricted
			DerivedCOCreateDate = create stamp.timestamp
			return DerivedCOCreateDate[1:4] + "-" + DerivedCOCreateDate[5:6] + "-" + DerivedCOCreateDate[7:8] + "T" + DerivedCOCreateDate[9:10] + ":" + DerivedCOCreateDate[11:12] + ":" + DerivedCOCreateDate[13:14] + "Z"
		
		DerivedCustPartyID is a DerivedField
			type is Alpha size 30
			restricted
			if(DerivedCleanDocumentID = "Y")
				return Customer using "%d"
			else
				return DerivedCompany + DerivedDelimiter + Customer using "%d"
				
		DerivedActionCode is a DerivedField
			type is Alpha size 10
			restricted
			return "Add"
			
		DerivedCustAddressLine1 is a DerivedField
			type is Alpha size 50
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine1
		
		DerivedCustAddressLine2 is a DerivedField
			type is Alpha size 50
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine2
			
		DerivedCustAddressLine3 is a DerivedField
			type is Alpha size 50
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine3
		
		DerivedCustAddressLine4 is a DerivedField
			type is Alpha size 50
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine4
			
		DerivedCustAddressMunicipality is a DerivedField
			type is Alpha size 50
			restricted
			return Customer.PostalAddress.Municipality

		DerivedCustAddressCountry is a DerivedField
			type is Alpha size 50
			restricted
			return Customer.PostalAddress.County
			
		DerivedCustAddressPostalCode is a DerivedField
			type is Alpha size 20
			restricted
			return Customer.PostalAddress.PostalCode
		
		DerivedContactTitle is a DerivedField
			type is Alpha size 30
			restricted
			return Customer.ContactTitle
			
		DerivedContactName is a DerivedField
			type is Alpha size 120
			restricted
			return Customer.Name
			
		DerivedCustInternationalPrefix is a DerivedField
			type is Alpha size 10
			restricted
			return Customer.PhoneNumber.InternationalPrefix
			
		DerivedCustSubcriberNumber is a DerivedField
			type is Alpha size 20
			restricted
			return Customer.PhoneNumber.SubscriberNumber
			
		DerivedCustPhoneExt is a DerivedField
			type is Alpha size 10
			restricted
			return Customer.PhoneNumber.Extension
		
		DerivedCustShipToTaxCode is a DerivedField
			type is Alpha size 15
			restricted
			return CustomerShipTo.TaxCode
			
		DerivedShipToName is a DerivedField
			type is Alpha size 120
			restricted
			return CustomerShipTo.Name
			
		DerivedShipToAddress1 is a DerivedField
			type is Alpha size 100
			restricted
			return CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine1
			
		DerivedShipToAddress2 is a DerivedField
			type is Alpha size 100
			restricted
			return CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine2
			
		DerivedShipToAddress3 is a DerivedField
			type is Alpha size 100
			restricted
			return CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine3
			
		DerivedShipToAddress4 is a DerivedField
			type is Alpha size 100
			restricted
			return CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine4
			
		DerivedShipToAddressMunicipality is a DerivedField
			type is Alpha size 100
			restricted
			return CustomerShipTo.ShipToAddress.Municipality
			
		DerivedShipToStateProvince is a DerivedField
			type is Alpha size 100
			restricted
			return CustomerShipTo.ShipToAddress.StateProvince
			
		DerivedShipToCountry is a DerivedField
			type is Alpha size 100
			restricted
			return CustomerShipTo.ShipToAddress.Country
			
		DerivedShipToAddressPostalCode is a DerivedField
			type is Alpha size 20
			restricted
			return CustomerShipTo.ShipToAddress.PostalCode
			
		DerivedBillToAddress1 is a DerivedField
			type is Alpha size 100
			restricted
			return BillPostalAddress.DeliveryAddress.AddressLine1
			
		DerivedBillToAddress2 is a DerivedField
			type is Alpha size 100
			restricted
			return BillPostalAddress.DeliveryAddress.AddressLine2
			
		DerivedBillToAddress3 is a DerivedField
			type is Alpha size 100
			restricted
			return BillPostalAddress.DeliveryAddress.AddressLine3
		
		DerivedBillToAddress4 is a DerivedField
			type is Alpha size 100
			restricted
			return BillPostalAddress.DeliveryAddress.AddressLine4
			
		DerivedBillToMunicipality is a DerivedField
			type is Alpha size 100
			restricted
			return BillPostalAddress.Municipality
			
		DerivedBillToPostalCode is a DerivedField
			type is Alpha size 100
			restricted
			return BillPostalAddress.PostalCode
			
		DerivedTaxExemptedIndicator is a DerivedField
			type is Alpha size 10
			restricted
			return "true"
		
		DerivedCompanyCurrency is a DerivedField
			type is Alpha size 5
			restricted
			return Company.Currency
				
		DerivedPrmFEG is a DerivedField
			type is Alpha size 20
			restricted
			return Company.FinanceEnterpriseGroup
		
		DerivedCreateActor is a DerivedField
			type is Alpha size 30
			restricted
			return create stamp.actor
		
		DerivedUpdateActor is a DerivedField
			type is Alpha size 30
			restricted
			return update stamp.actor
			
		DerivedPartialShipmentAllowIndicator is a DerivedField
			type is Alpha size 10
			restricted
			if (ShipComplete.AcceptsPartialShipments)
				return "true"
			else
			if (ShipComplete.DoesNotAcceptPartials)
				return "false"
			else
			if (ShipComplete.DeterminedByLine)
				return ""
		
		DerivedRequestedDate is a DerivedField
			type is Alpha size 40
			DerivedRequestedDate = RequestedDate
			return DerivedRequestedDate[1:4] + "-" + DerivedRequestedDate[5:6] + "-" + DerivedRequestedDate[7:8] 
		
		DerivedBillToPartyID is a DerivedField
			type is Alpha size 100
			restricted
			if(CustomerBillTo entered)
					return Customer + DerivedDelimiter + CustomerBillTo using "%d"
			else
				return ""
		
		DerivedShipToPartyID is a DerivedField
			type is Alpha size 100
			restricted
			if(CustomerShipTo entered)
				if(DerivedCleanDocumentID = "Y")
					return Customer using "%d" + DerivedDelimiter + CustomerShipTo using "%d"
				else
					return DerivedCompany + DerivedDelimiter + Customer using "%d" + DerivedDelimiter + CustomerShipTo using "%d"
			else
				return ""
		
		DerivedPayFromPartyID is a DerivedField
			type is Alpha size 100
			restricted
			if(DerivedCleanDocumentID = "Y")
					return Customer using "%d"
			else
				return DerivedCompany + DerivedDelimiter + Customer using "%d"
		
		DerivedCancelledDateTime is a DerivedField
			type is Alpha size 30
			restricted
			if (CancelledDate = "00000000" or CancelledDate not entered)
				return ""
			else
				if (DerivedIntegratingApplication = "GRC")
					DerivedCancelledDateTime = CancelledDate
					return DerivedCancelledDateTime[1:4] + "-" + DerivedCancelledDateTime[5:6] + "-" + DerivedCancelledDateTime[7:8]
				
		DerivedCustomerOrderCarrier	is a DerivedField
			type is Numeric size 9
			restricted
			if(Carrier entered)
				return Carrier
			else
				return ""
					 
		CustomerOrderLineXML is a DerivedField
			type is XMLDocument
			restricted
			if (CustomerOrderLinesRel exist)
				for each CustomerOrderLinesRel
					each.LocalDerivedCurrency = Currency
					each.LocalCompanyCurrency = DerivedCompanyCurrency
					each.LocalPrmFEG = DerivedPrmFEG
					each.LocalDelimiter = DerivedDelimiter
					CustomerOrderLineXML += template.IONSyncSalesOrder_CustomerOrderLine_ST document for each
				return CustomerOrderLineXML
			else
				return ""
				
		SyncSalesOrderXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			SyncSalesOrderXMLBOD = template.IONSyncSalesOrder_CustomerOrder_ST document for this instance
			return SyncSalesOrderXMLBOD							

		

		CustomerOrderCancelDescription is a DerivedField
			type is Alpha 100
			restricted
			return "Customer Order "+ OrderEntryOrderType + "-" + CustomerOrder +" has been cancelled"
					
		DerivedPABODID is a DerivedField
			type is Alpha 200
			restricted 
			return	"infor-nid:" + DerivedTenantID +":"+ Company.FinanceEnterpriseGroup +":"+ CustomerOrder +":"+ "?CustomerOrderCancelled&verb=Process"
			
		CustomerOrderCancelAlertXML is a DerivedField
			type is XMLDocument
			restricted
			CustomerOrderCancelAlertXML = template.IONCustomerOrderCancel_CustomerOrder_ST document for this instance


		DerivedLocalStatus is a DerivedField
			type is Alpha 50
			restricted	
			if(Status = 1)
				return "Unreleased"
			else
			if(Status = 2)
				return "Released"
			if(Status = 3)
				return "Canceled"	
					
		CustomerOrderHoldDescription is a DerivedField
			type is Alpha 100
			restricted
			return "Customer Order "+ OrderEntryOrderType + "-" + CustomerOrder +" has been placed on hold"
				
		DerivedCOHoldBODID is a DerivedField
			type is Alpha 200
			restricted 
			return	"infor-nid:" + DerivedTenantID +":"+ Company.FinanceEnterpriseGroup +":"+ CustomerOrder +":"+ "?CustomerOrderOnHold&verb=Process"
			
		CustomerOrderOnHoldAlertXML is a DerivedField
			type is XMLDocument
			restricted
			CustomerOrderOnHoldAlertXML = template.IONCustomerOrderOnHold_CustomerOrder_ST document for this instance

		DerivedCompanyName is a DerivedField
			type is Alpha 30
			restricted	
			return Company.Name

		CustomerOrderQuoteDescription is a DerivedField
			type is Alpha 100
			restricted
			return "CO Quote "+ OrderEntryOrderType + "-" + CustomerOrder +" has been created"
					
		DerivedCOQuoteBODID is a DerivedField
			type is Alpha 200
			restricted 
			return	"infor-nid:" + DerivedTenantID +":"+ Company.FinanceEnterpriseGroup +":"+ CustomerOrder +":"+ "?CustomerOrderQuote&verb=Process"
			
		CustomerOrderQuoteAlertXML is a DerivedField
			type is XMLDocument
			restricted
			CustomerOrderQuoteAlertXML = template.IONCustomerOrderQuote_CustomerOrder_ST document for this instance


		OriginalOpenOrderAmountInCompanyCustomerCurrency			is a DerivedField
			type is like InternationalAmount
			restricted
			if (Currency != CompanyCustomer.Currency)
				initialize	LocalCurrencyExchange
				LocalCurrencyExchange.ToCurrency = CompanyCustomer.Currency.Currency
				return  OriginalOpenOrderAmount * LocalCurrencyExchange.OutputCurrencyRate
			else
				return OriginalOpenOrderAmount
				
		OriginalOpenOrderAmountInCustomerCurrency			is a DerivedField
			type is like InternationalAmount
			restricted
			if (Currency != Customer.CustomerGroup.Currency)
				initialize	LocalCurrencyExchange
				LocalCurrencyExchange.ToCurrency = Customer.CustomerGroup.Currency
				return  OriginalOpenOrderAmount * LocalCurrencyExchange.OutputCurrencyRate
			else
				return OriginalOpenOrderAmount

		DerivedProjectedCustomerOpenOrderAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return OriginalOpenOrderAmountInCompanyCustomerCurrency + CompanyCustomer.OpenOrderAmount

		DerivedReleasedCompletionMessage is a DerivedField
			type is MessageField
			restricted	
			if (HasCreatePOLineAndOrderAmountExceedingOrderLimit)
				return CreatePOExceedingOrderLimitMessageField
			else
			if (IsOrderAmountExceedingOrderLimit)
				return OrderAmountExceedingOrderLimitMessageField
			else
				return ReleaseCompletedMessageField 
				
		CreatePOExceedingOrderLimitMessageField is a MessageField
			restricted
			"ReleaseCompleted.Order/CreditLimitExceeded.OrderOnHold.NoPurchaseOrderCreated"
			
		OrderAmountExceedingOrderLimitMessageField is a MessageField
			restricted
			"ReleaseCompleted.Order/CreditLimitExceeded.OrderOnHold"
			
		ReleaseCompletedMessageField is a MessageField
			restricted
			"ReleaseCompleted"

		ShipImmediateMessageTaxEgine 								is a MessageField
			restricted
			"OrderTypeShipImmediateNotAllowedWhenTaxEntitySetAsTaxEngine"

		ShipImmediateMessageProcessShipmentBods 					is a MessageField
			restricted
			"OrderTypeShipImmediateNotAllowedWhenBillingCompanySetWithProcessShipmentBods"

		DropshipMessageTaxEgine 									is a MessageField
			restricted
			"OrderTypeDropshipNotAllowedWhenTaxEntitySetAsTaxEngine"

		DropshipMessageProcessShipmentBods 							is a MessageField
			restricted
			"OrderTypeDropshipNotAllowedWhenBillingCompanySetWithProcessShipmentBods"

		CreatePOMessageTaxEgine 									is a MessageField
			restricted
			"OrderTypeCreatePurchaseOrderNotAllowedWhenTaxEntitySetAsTaxEngine"

		CreatePOMessageProcessShipmentBods 							is a MessageField
			restricted
			"OrderTypeCreatePurchaseOrderNotAllowedWhenBillingCompanySetWithProcessShipmentBods"

		CannotUpdateCustomerOrderTaxEgine 							is a MessageField
			restricted
			"CannotUpdateWhileAwaitingTaxApproval"

		CannotUpdateCustomerOrderProcessShipmentBods 				is a MessageField
			restricted
			"CannotUpdateWhileShipmentAwaitingTaxApproval"

		CannotCancelCustomerOrderMessageTaxEgine 					is a MessageField
			restricted
			"CannotCancelWhileAwaitingTaxApproval"

		CannotCancelCustomerOrderProcessShipmentBods 				is a MessageField
			restricted
			"CannotCancelWhileShipmentAwaitingTaxApproval"

		ShipImmediateOrderTypeError				is a DerivedField
			type is Alpha 150
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return ShipImmediateMessageTaxEgine
			else
				return ShipImmediateMessageProcessShipmentBods

		DropshipOrderTypeError					is a DerivedField
			type is Alpha 150
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return DropshipMessageTaxEgine
			else
				return DropshipMessageProcessShipmentBods

		CreatePOTypeError						is a DerivedField
			type is Alpha 150
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return CreatePOMessageTaxEgine
			else
				return CreatePOMessageProcessShipmentBods

		CannotUpdateCustomerOrderErrorMessage	is a DerivedField
			type is Alpha 100
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return CannotUpdateCustomerOrderTaxEgine
			else
				return CannotUpdateCustomerOrderProcessShipmentBods

		CannotCancelCustomerOrderErrorMessage	is a DerivedField
			type is Alpha 100
			restricted
			if (TaxEntityRel.ThirdParty.TaxEngine)
				return CannotCancelCustomerOrderMessageTaxEgine
			else
				return CannotCancelCustomerOrderProcessShipmentBods

		CustomerOrderFormTitle is a DerivedField
			type is Alpha size up to 80
			if (RecordExists)
				return CustomerOrderTitle
			else
				return CustomerOrderTitleNoRecord
		
		CustomerOrderTitleNoRecord is a LabelField
			restricted
			"CustomerOrder"
		
		CustomerOrderTitle is a LabelField
			restricted
			"CustomerOrder_<CustomerOrder>"

	Sets

		Set2
			indexed
			Sort Order
				Company
				Customer
				CustomerOrder

		Set3
			indexed
			Sort Order
				Company
				CustomerPurchaseOrder
				CustomerOrder

		Set5
			indexed
			Sort Order
				Company
				OrderEntryOperator
				CustomerOrder

		Set6
			indexed
			Instance Selection
				where (IsHoldCode)
			Sort Order
				Company
				Customer
				HoldCode
				CustomerOrder

		Set8
			indexed
			Sort Order
				Company
				OrderDate
				CustomerOrder

		ByCompany
			duplicates
			Sort Order
				Company

		ByProcessLevel
			duplicates
			Sort Order
				BillingProcessLevel

		ByCustomer
			duplicates
			Sort Order
				Customer

		ByOrderEntryOperator
			duplicates
			Sort Order
				OrderEntryOperator

		ByHoldCode
			duplicates
			Sort Order
				HoldCode



	Field Rules

		Status
			initial value is Status.Unreleased


		Company
			constraint (InventoryCompanyRel exists)
				"InventoryCompanyDoesNotExist"

			constraint (!Company.Incomplete)
				"SetupOfOrderEntryCompanyIsIncomplete" 


		CurrencyTable
			default to CompanySystemClosingControlRel.CurrencyTable
			default to Company.FinanceEnterpriseGroup.CurrencyTable



		BillingProcessLevel
			initial value is OrderEntryOperator.BillingProcessLevel
			default to OrderEntryOperator.BillingProcessLevel
			required   

			if (HasUserRestricted)
				constraint (BillingProcessLevel = OrderEntryOperator.BillingProcessLevel)
					"UserRestrictedToDefaults,CannotOverrideProcessLevel" 

			cannot be changed
				"CannotChangeProcessLevelOnExistingOrder" 


		Customer
			default to OrderEntryOperator.DefaultCustomer

			if (HasUserRestricted)
				constraint (Customer = OrderEntryOperator.DefaultCustomer)
					"UserRestrictedToDefaults,CannotOverrideCustomer" 

			required

			constraint (CompanyCustomer exists)
				"CustomerDoesNotExistInCompanyCustomer"

			cannot be changed  
				"CustomerCannotBeChangedForExistingCustomerOrder"

			constraint (CompanyCustomer.ActiveStatus.Active)
				"CustomerIsNotActive"												

			constraint (not CompanyCustomer.IsOrderEntryCustomerComplete)
				"OrderEntryInformationForCustomerMustBeComplete"

			constraint (not OrderEntryCustomer.Incomplete)
				"OrderEntryInformationForOrderEntryCustomerMustBeComplete"			


		OrderEntryOperator
			default to actor

			if (OrderEntryOperator ="CUST")   
				constraint(HasUserRestricted)
					"UserMustbeRestrictedForCustomerEntry"	

			if (HasUserRestricted
			and Company != OrderEntryOperator.Company)
				cannot be changed
					"UserRestrictedToDefaults,CannotOverrideCompany" 


		OrderEntryOrderType

			if (!HasUserRestricted)
				default to BillingProcessLevel.DefaultOrderType
			default to OrderEntryOperator.DefaultOrderType

			required

			if (HasUserRestricted)
				cannot be changed  
					"UserRestrictedToDefaults,CannotOverrideOrderType"	

			if (TaxEntityRel.ThirdParty.TaxEngine
			or BillingCompanyRel.ProcessShipmentBods)						
				constraint (!OrderEntryOrderType.ShipImmediate)
					"<ShipImmediateOrderTypeError>"

				constraint (!OrderEntryOrderType.Dropship)							
					"<DropshipOrderTypeError>"

				constraint (!OrderEntryOrderType.CreatePurchaseOrder)				
					"<CreatePOTypeError>"


		ShipImmediate
			initial value is OrderEntryOrderType.ShipImmediate
			force default to OrderEntryOrderType.ShipImmediate


		OrderDate
			default to OrderEntryOperator.DefaultOrderDate
			default to current corporate date

			constraint (OrderDate <= current corporate date)
				"OrderDateCannotBeGreaterThanToday'sDate" 

			if (HasUserRestricted)
				cannot be changed
					"UserRestrictedToDefaults,CannotOverrideOrderDate"  


		PriceDate
			default to	OrderDate


		ExpectedShipDate
			default to	OrderEntryOperator.DefaultShipDate
			default to OrderDate + BillingProcessLevel.ShipDays 

			IntrastatFiscalYear	= ExpectedShipDate year
			constraint (ExpectedShipDate >= OrderDate)
				"ExpectedShipDateCannotBeLessThanOrderDate"		

			if (HasUserRestricted)
				cannot be changed
					"UserRestrictedToDefaults,CannotOverrideExpectedShipDate"	


		RequestedDate
			default to ExpectedShipDate

			constraint (RequestedDate >= OrderDate)
				"RequestDateCannotBeLessThanOrderDate" 


		BillName
			default to CustomerBillTo.Name
			default to Customer.Name
			default to CompanyCustomer.CreditAgencyName	


		CustomerBillTo
			default to first CustomerBillToRel.CustomerBillTo
			if (CustomerBillTo changed)
				BillPostalAddress = CustomerBillTo.PostalAddress

			if (old CustomerBillTo entered
			and CustomerBillTo not entered)
				initialize BillPostalAddress




		BillPostalAddress
			default to CustomerBillTo.PostalAddress
			default to Customer.PostalAddress
			default to CompanyCustomer.CreditAgencyPostalAddress

			if  (!Customer.CustomerOrderAddressOverride
			and (CustomerBillTo = old CustomerBillTo
			and  CustomerBillTo entered))
				cannot be changed
					"CannotChangeBillToAddress"

			if  (!Customer.CustomerOrderAddressOverride
			and (CustomerBillTo = old CustomerBillTo
			and  old BillPostalAddress entered
			and  BillPostalAddress changed))
				cannot be changed
					"CannotChangeBillToAddress"


		ShipToName
			default to CustomerShipTo.Name
			default to Customer.Name


		CustomerShipTo
			default to OrderEntryCustomerRel.DefaultCustomerShipTo
			if (CustomerShipTo changed)
				ShipPostalAddress = CustomerShipTo.ShipToAddress

			if (old CustomerShipTo entered
			and CustomerShipTo not entered)
				initialize ShipPostalAddress


		ShipPostalAddress
			default to CustomerShipTo.ShipToAddress
			default to Customer.PostalAddress
			
			if ((CustomerShipTo entered
			and  CustomerShipTo not changed)
			and  ShipPostalAddress changed)
				cannot be changed
					"CannotChangeShipToAddress"


		TaxStatus   
			default to CustomerShipTo.TaxExemptCode	
			if (!CompanyCustomer.TaxExempt)
				default to TaxExemptCode.Taxable
			default to TaxExemptCode.Exempt
			required   

			if (PassOrderAmount entered)
				cannot be changed
					"CannotChangeTaxStatusWhenOrderHasBeenInvoiced"	

			if (TaxStatus changed
			and old TaxStatus.Taxable)
				for each CustomerOrderLinesRel
					constraint (!each.TaxStatus.Taxable)
						"CustomerOrderCannotBeExempt,CustomerOrderLine<each.CustomerOrderLine>IsTaxable"  


		TaxDate
			if (TaxStatus.Taxable)
				default to current corporate date


		TaxCode
			if (TaxStatus.Taxable)
				if (TaxEntityRel.ThirdParty.Sabrix)
					default to InventoryLocation.TaxCode
				default to CustomerShipTo.TaxCode
				default to CompanyCustomer.TaxCode
				required
					"OrderIsTaxable,TaxCodeIsRequired" 
				
				LocalDoCreateTaxLog = TaxConfigurationRel.WriteToLogFile
				
			else
				cannot be entered
					"TaxCodeCannotBeEnteredAsTaxStatusIsExempt"

			if (PassOrderAmount entered)
				cannot be changed
					"CannotChangeTaxCodeWhenOrderHasBeenInvoiced"	
			
			if (not TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.VertexQuantumOption		= "G"
				CalculateTax.PostalAddress				= ShipPostalAddress
				CalculateTax.TaxCode					= TaxCode
				if (not SingleCallToVertex)
					LocalExecuteCalculateTax				= CalculateTax.ExecuteCalculateTax
					constraint (CalculateTax.OutputErrorNumber not entered)
							"<CalculateTax.OutputErrorMessage>"				
				CalculateTax.ProcessLevel				= BillingProcessLevel
				CalculateTax.Quantity					=  1
				CalculateTax.Customer					= Customer
				CalculateTax.ThirdPartyFunction			= "I"
				CalculateTax.Function					= "I"
				CalculateTax.TaxCode					= TaxCode
				CalculateTax.PostalAddress				= ShipPostalAddress
				CalculateTax.Invoice					= CustomerOrder
				CalculateTax.FromTaxCode				= InventoryLocation.TaxCode
				CalculateTax.FromPostalAddress			= InventoryLocation.PostalAddress
				CalculateTax.ShipmentDate				= ExpectedShipDate
				CalculateTax.InvoiceDate				= current corporate date
				CalculateTax.GeneralLedgerDate			= current corporate date
				CalculateTax.PaymentDate				= current corporate date
				CalculateTax.TaxDate					= TaxDate
				CalculateTax.POAAddress					= BillingProcessLevel.CompanyAddress
				CalculateTax.POATaxCode					= BillingProcessLevel.TaxCode
				CalculateTax.DontCreateLogFile			= true
				include LoadVertexGlobalInputFields 
				include LoadOneSourceInputFields
				if (not SingleCallToVertex)
					LocalExecuteCalculateTax				= CalculateTax.ExecuteCalculateTax
					constraint (CalculateTax.OutputErrorNumber not entered)
						"<CalculateTax.OutputErrorMessage>"


		ListName
			default to CustomerShipTo.ListName.ListName
			default to OrderEntryCustomerRel.PriceList.ListName


		InventoryLocation

			default to CustomerShipTo.DefaultLocation
			default to OrderEntryCustomer.DefaultShippingLocation
			default to BillingProcessLevel.DefaultLocation
			default to OrderEntryOperator.DefaultLocation

			required

			if (HasUserRestricted)   
				cannot be changed
					"UserRestrictedToDefaults,CannotOverrideLocation"

			if (InventoryLocation changed
			and LastLineNumber entered
			and !OrderEntryOperator.AllowLocationTransfers)
				cannot be changed
					"MultipleLocationsNotAllowedOnOrderAfterLinesAdded"


		UserIdEntry
			if (OrderEntryOperator = "CUST")
				default to	OrderEntryOperator


		OrderEntryOrderSource
			default to OrderEntryOperator.DefaultOrderSource

			if (HasUserRestricted)
				cannot be changed
					"UserRestrictedToDefaults,CannotOverrideOrderSource" 


		Territory
			default to SalesRepresentative.Territory
			default to CustomerShipTo.Territory
			default to CompanyCustomer.Territory
			default to OrderEntryCustomer.Territory
			required  


		SalesRepresentative
			default to CustomerShipTo.SalesRepresentative
			default to CompanyCustomer.SalesRepresentative
			required   


		SalesRepresentative2
			default to CustomerShipTo.SalesRepresentative2
			default to OrderEntryCustomer.Salesman2

			constraint (SalesRepresentative != SalesRepresentative2)
				"SalesRepresentativeAndSalesRepresentative2CannotBeSame" 


		CommissionSplitPercentage
			if (SalesRepresentative2 entered)
				default to CustomerShipTo.CommissionSplitPercentage	
				default to OrderEntryCustomer.CommissionSplitPercentage
				default to SalesRepresentative.CommisionPercent
				required
					"CommissionSplitPercentageIsRequiredWhenSalesRepresentaticeIsPresent" 
			else
				cannot be entered


		CommissionRate1
			default to SalesRepresentative.CommisionPercent

			constraint (CommissionRate1 <= 100%)
				"CommisionRateForSalesRepresentativeShouldNotBeGreaterThan100%"


		CommissionRate2
			if (SalesRepresentative2 entered)
				default to SalesRepresentative2.CommisionPercent
			else
				cannot be entered
					"CannotEnterCommissionRateWithoutSalesRepresentative2"

			constraint ((CommissionRate1 + CommissionRate2) <= 100%)
				"CommissionRatesForSalesrepresentative&SalesRepresentative2CannotBeGreaterThan100%"


		TermsCode
			default to CustomerShipTo.TermCode
			default to CompanyCustomer.TermsCode
			required   

			if (TermsCode changed
			and PassOrderAmount entered)
				cannot be changed
					"CannotChangeCashOnDeliveryTermsAfterCreatingInvoice"

			LocalTermsCalTrigger				= LocalCalculateTerms.TermsCalTrigger
			constraint (LocalCalculateTerms.OutputErrorNumber not entered)
					"<LocalCalculateTerms.OutputErrorMessage>"


		CashOnDelivery
			if (LocalCalculateTerms.ProcIndicator ="C")
				default to true

			constraint (!OrderEntryOrderType.ShipImmediate)
				"CashOnDeliveryOrderCannotBeShipImmediateOrderType"		


		BillingElectronicPaymentType
			default to BillingCustomerCreditCardDefaultRel.BillingElectronicPaymentType


		BillingCustomerCreditCard
			default to BillingCustomerCreditCardDefaultRel.BillingCustomerCreditCard

			if (BillingElectronicPaymentType entered)
				constraint (IsValidElectronicPaymentAccount)
					"AccountDoesNotExist"
				required
			else
				cannot be entered

		ElectronicPaymentExpirationDate
			default to BillingCustomerCreditCardDefaultRel.ExpirationDate

			if (BillingCustomerCreditCard entered)
				required
			else
				cannot be entered

			constraint (ElectronicPaymentExpirationDate >= current corporate date)
				"ElectronicPaymentHasExpired"


		CheckNumber
			constraint (NoElectronicDataEntered)
				"CannotEnterBothPaymentNumberAndElectronicPaymentData"


		ElectronicPaymentMinimumMargin
			if (ElectronicPaymentMinimumMarginPercent entered)
				cannot be entered
					"CannotEnterMinimumMarginAndMarginPercentBoth"


			constraint (CashInAdvanceRequiredPercent = 100%)
				"MinimumMarginNotAllowedForDownPaymentsLessThan100%OfOrder"


		ElectronicPaymentMinimumMarginPercent
			if (ElectronicPaymentMinimumMargin entered)
				cannot be entered
					"CannotEnterMinimumMarginAndMarginPercentBoth"

			constraint (CashInAdvanceRequiredPercent = 100%)
				"MinimumMarginPercentNotAllowedForDownPaymentsLessThan100%OfOrder"


		BankPaymentCode
			default to CompanyCustomer.BankTransactionCode


		CashInAdvanceRequired
			default to OrderEntryCustomer.CashInAdvanceRequired
			if (ProformaCashInAdvanceRequired)
				cannot be entered
					"CannotEnterBothCashInAdvanceAndProformaCashInAdvance"


		CashInAdvanceRequiredPercent
			default to OrderEntryCustomer.CashInAdvanceRequiredPercent


		ProformaCashInAdvanceRequired
			initial value is CompanyCustomer.OrderEntryCustomer.ProformaCashInAdvanceRequired
			if (CashInAdvanceRequired)
				cannot be entered
					"CannotEnterBothCashInAdvanceAndProformaCashInAdvance"





			if (IsReleased)
				cannot be changed

			if	(ProformaCashInAdvanceRequired)
				constraint (BillingCompanyRel.VATOutputOffset entered)
					"VATOutputOffsetAccountRequiredOnBillingCompany"

				constraint (BillingCompanyRel.ProformaInvoiceDocument entered)
					"ProformaInvoiceTemplateDocumentRequiredOnBillingCompany"

				constraint (ReceivableProcessLevelRel.ProformaTaxInvoiceCode entered)
					"ProformaTaxInvoiceCodeRequiredOnReceivableProcessLevel"

				constraint (ReceivableProcessLevelRel.ProformaPrepaymentReceivableGeneralLedgerCode entered)
					"ProformaPrepaymentCodeRequiredOnReceivableCompany"

				constraint (!OrderEntryOrderType.ShipImmediate)	
					"CannotAllowProformaCashInAdvanceForOrderTypeShipImmediate"


		ProformaCashInAdvanceRequiredPercent
			initial value is CompanyCustomer.OrderEntryCustomer.ProformaCashInAdvanceRequiredPercent
			if (ProformaCashInAdvanceRequired)
				required
				constraint (ProformaCashInAdvanceRequiredPercent <= 1 and   ProformaCashInAdvanceRequiredPercent > 0)
					"ProformaCashInAdvancePercentCannotBeLessThanZeroOrGreaterThan100"
			if (IsReleased)
				cannot be changed


		OrderDiscountCode
			default to OrderEntryCustomer.OrderDiscountCode


		OrderDiscountAmount
			default to OrderDiscountAmountForDiscountCode


		Currency
			if (Company.MultipleCurrency)
				default to CompanyCustomer.Currency
			else
				default to Company.Currency


			if (Currency != CompanyCustomer.Currency)
				constraint (Company.DefaultCurrencyOverride)
					"BillingCompanyDoesNotAllowCurrencyOverride" 

			if (!Company.MultipleCurrency)
				constraint (Currency = Company.Currency)
					"CurrencyCodeMustEqualCompanyCurrencyCode" 

			if (!OrderEntryOperator.CurrencyOverride)
				cannot be changed
					"UserNotAllowedToChangeCurrencyCode" 

			if (InventoryGoodsAmount entered
			or  NonInventoryGoodsAmount entered)
				cannot be changed
					"CannotChangeOrderCurrency,DetailLinesExist" 

			if (TotalAddOnChargeAmount entered
			or  FreightCharge entered)
				cannot be changed
					"CannotChangeOrderCurrency,Add-OnChargesExist" 


		CurrencyRate
			if (Currency = Company.Currency)
				default to 1
				constraint (CurrencyRate = 1)
					"OrderCurrencyIsEqualToCompanyCurrency,RateMustBe1" 
			else
				initialize	LocalCurrencyExchange
				LocalCurrencyExchange.ToCurrency		= Company.Currency
				default to LocalCurrencyExchange.OutputCurrencyRate

				constraint (CurrencyRate entered)
					"CannotHaveAZeroConversionRateForCurrency" 
		
		CurrencyMultiplicationOrDivision
			if (Currency = Company.Currency)
				default to CurrencyMultiplicationOrDivision.Multiply
			else
				initialize CurrencyRelationship
				CurrencyRelationship.FromCurrency = Currency
				CurrencyRelationship.ToCurrency   = Company.Currency
				if (CurrencyRelationship.MultDiv.Multiply)
					default to CurrencyMultiplicationOrDivision.Multiply
				else
					default to CurrencyMultiplicationOrDivision.Divide		


		CurrencyNumberOfDecimals
			force default to Company.Currency.NumberOfDecimals


		VATRegistrationNumber
			default to CustomerShipTo.VATRegistrationNumber
			default to CompanyCustomer.VATRegistrationNumber


		ShippingMethod
			default to CustomerShipTo.DefaultMethod
			default to OrderEntryCustomer.DefaultShippingMethod


		BillingFreightCode
			default to CustomerShipTo.FreightCode

			default to OrderEntryCustomer.BillingFreightCode
			constraint (BillingFreightCode.Active)
				"FreightCodeIsInactive"


		Carrier	
			if (BillingFreightCode.BillingFreightCarrier.NotAllowed)
				cannot be entered
					"FreightCodeDoesNotAllowCarrier" 
			else
				default to CustomerShipTo.Carrier


		PickingPriority
			if (InventoryCompanyRel.AllocationBasis.ByDate)	
				cannot be entered
					"AllocationPriorityNotValidWhenAllocatingByDate"	
			else
				default to CustomerShipTo.PickingPriority
				default to OrderEntryCustomer.PickingPriority
				default to InventoryCompanyRel.DefaultOEPriority


		Acknowledgement	
			default to OrderEntryCustomer.CustomeOrderAcknowledgments


		BackOrder
			default to CustomerShipTo.AllowBackorder
			default to OrderEntryCustomer.BackorderAllowed


		ShipComplete
			if (action type.Create)
				if (OrderEntryOrderType.Dropship)
					default to ShipComplete.AcceptsPartialShipments
				else
				if (CustomerShipTo.ShipComplete)
					default to ShipComplete.DoesNotAcceptPartials
				else
					default to OrderEntryCustomer.ShipCompleteFlag

			if (ShipComplete.DoesNotAcceptPartials)
				constraint (!OrderEntryOrderType.Dropship)
					"ShipCompleteAndDropshipCannotBeUsedTogether" 


		ProofOfDeliveryRequired
			default to CustomerShipTo.ProofOfDeliveryRequired
			default to OrderEntryCustomer.ProofOfDeliveryRequired

			constraint (!CashOnDelivery)
				"OrderCannotBeBothCashOnDeliveryAndProofOfDelivery"		


		ProofOfDeliveryGracePeriod
			default to CustomerShipTo.ProofOfDeliveryGracePeriod
			default to OrderEntryCustomer.ProofOfDeliveryGracePeriod


		RateFreeze
			default to Company.RateFreezeCode


		HoldCode
			constraint(HoldCode.CustomerOrderApplicable)
				"CashInAdvanceHoldCodeIsInvalidForOrderHold"			

			if (old HoldCode entered
			and HoldCode changed)
				cannot be changed
					"CannotUpdateHoldCode;UseUpdateHoldCodeActionToUpdate"

			if (HoldCode entered or (HoldCode entered and HoldCode changed))
				trigger "CustomerOrderHoldService" PA service
					resume on error
					title is "CO:<Company>Customer:<Customer>"
					Criteria
						Company
					Variables
						Company
							variable name is Company
						Customer
							variable name is Customer
						CustomerOrder
							variable name is CustomerOrder
						OrderEntryOrderType
							variable name is OrderType
						BillName
							variable name is BillName
						HoldCode
							variable name is HoldCode
						Status
							variable name is Status
									
				invoke CustomerOrderOnHoldAlert		
					invoked.PrmAlertName = "FSM_ION_CustomerOrderHoldAlert"
				
		EnteredPayment
			if  (CashInAdvanceRequired 
			and (CheckNumber entered or not NoElectronicDataEntered))
				required

			constraint (EnteredPayment >= PaymentInvoiced)
				"PaymentEnteredCannotBeLessThanPaymentAmountInvoiced" 

			constraint (SalesQuote not entered)	
				"SalesQuoteCannotHaveDownpaymentEntered" 


		EnteredDiscount
			constraint (EnteredDiscount >= DiscountTakenOnInvoices)
				"DiscountEnteredCannotBeLessThanDiscountTakenOnInvoices"


		FreightCharge


			constraint (BillingFreightCode entered)
				"FreightCodeRequiredWhenEnteringFreightCharges" 

			if (BillingFreightCode.BillingFreightCharge.NotAllowed)
				cannot be entered
					"FreightCodeDoesNotAllowFreightCharges" 

			constraint (FreightCharge > 0)
				"FreightChargesMustBePositive" 

			if (WarehouseShipment entered)
				cannot be changed
					"CannotChangeFreightChargeAfterCreatingShipment" 


		FutureOrder
			constraint (SalesQuote not entered)
				"FutureOrderAndSalesQuoteCannotBeUsedTogether"		


		SalesQuote
			constraint (FutureOrder not entered)
				"FutureOrderAndSalesQuoteCannotBeUsedTogether"	

			if (IsReleased)
				cannot be changed
					"CannotChangeOrderToSalesQuoteAfterRelease"

			if(SalesQuote)
				trigger "CustomerOrderQuoteService" PA service
					resume on error
					title is "CO:<Company>Customer:<Customer>"
					Criteria
						Company
					Variables
						Company
							variable name is Company
						Company.Name
							variable name is CompanyName
						Customer
							variable name is Customer
						CustomerOrder
							variable name is CustomerOrder
						OrderEntryOrderType
							variable name is OrderType
						BillName
							variable name is BillName
						CustomerShipTo
							variable name is CustomerShipTo
						ShipToName
							variable name is ShipToName
						
				invoke CustomerOrderQuote
					invoked.PrmAlertName = "FSM_ION_CustomerOrderQuoteAlert"
							
			if (SalesQuote changed)
				if (SalesQuote)
					if (WarehouseShipment not entered)
						invoke Delete WarehouseDemandRel
				else
					for each CustomerOrderLinesRel
						if (each.IsWarehouseDemandRequired)
							invoke CreateOrderWarehouseDemand each

		IntrastatNumber
			constraint (IntrastatHeaderRel exist)
				"NotAllowedAfterPurchaseOrderCreated,HasAPurchaseOrderAddOnChargeAttached" 


		NatureOfTransactionCode
			default to IntrastatHeaderRel.NatureOfTransactionCode


		OrderDiscountPercentage
			force default to OrderDiscountPercentForDiscountCode












		
		PointOfTitleTransfer
			if (action type.Create)
				default to PointOfTitleTransfer.Destination



	StateCycles
		CustomerOrderTransaction is a StateCycle
			state field is Status

			Unreleased is a State
				Create is a Create Action
					valid when (!OnProformaPaymentHold)
					Action Rules
						if (OrderEntryCustomer.CashInAdvanceRequired)
							HoldCode = BillingProcessLevel.DefaultCashInAdvanceHoldCode
					Exit Rules


						if (FreightCharge > 0)
							LocalTaxComputed = false
							LocalSkipAOCTaxLog = true
						include CalculateTotalAmounts



				CreateByCopy is a Create Action
					valid when (!OnProformaPaymentHold)
					Local Fields
						LocalSaveCustomerOrder	 is a CustomerOrder view
					Parameters
						PrmBillingCompany		is a BillingCompany
						PrmCopyAddOnCharge		is Boolean
						PrmCopyUnitCost			is Boolean
						PrmCustomer				is a Customer
						PrmStandardOrder		is an OrderEntryStandardOrder
						PrmCustomerBillTo		is a CustomerBillTo
						PrmCustomerShipTo		is a CustomerShipTo
						PrmExpectedShipDate		is Date
						PrmRequestedDate		is Date
						PrmCustomerOrder		is a CustomerOrder
						CompanyCustomer
						PrmOrderNumber			is like CustomerOrder
						PrmBillingProcessLevel	is a BillingProcessLevel
						PrmOrderEntryOrderType	is a OrderEntryOrderType
						PrmInventoryLocation	is an InventoryLocation

					Parameter Rules
						PrmBillingCompany
							required

						PrmStandardOrder

							LocalOriginalStandardOrder = PrmStandardOrder

							if (PrmCustomerOrder not entered)
								required
									"MustEnterEitherCustomerOrderOrStandardOrder"
							else
								cannot be entered
									"CannotEnterBothCustomerOrderAndStandardOrder"

							constraint (!PrmCopyAddOnCharge)
								"CannotCopyAddOnChargeWhenCopyingStandardOrder"		

							if (OrderEntryStandardOrderRel.BegDate  entered)
								constraint (OrderEntryStandardOrderRel.BegDate < current corporate date)
									"StandardOrderBeginDateIsAfterCurrentDate" 

							if (OrderEntryStandardOrderRel.EndDate  entered)
								constraint (OrderEntryStandardOrderRel.EndDate > current corporate date)
									"StandardOrderEndDateIsBeforeCurrentDate"  

						PrmCustomer
							required

							default to PrmCustomerOrder.Customer
							default to PrmStandardOrder.Customer

						PrmCopyAddOnCharge
							default to true

						PrmCopyUnitCost
							default to true

					Action Rules
						LocalCreateFromCopy = true
						if (PrmCustomerOrder entered)
							invoke Unreleased.Create this instance
								fill in fields from PrmCustomerOrder
									except invoked.CustomerOrder
									except invoked.Status
									except invoked.RequestedDate
									except invoked.ExpectedShipDate
									except invoked.OrderDate
									except invoked.InventoryGoodsAmount
									except invoked.NonInventoryGoodsAmount
									except invoked.TotalAddOnChargeAmount
									except invoked.TaxableAmount
									except invoked.DiscountableAmount
									except invoked.InventoryGoodsBaseAmount
									except invoked.NonInventoryGoodsBaseAmount
									except invoked.OnProformaPaymentHold
									except invoked.WarehouseShipment
									except invoked.DiscountTakenOnInvoices
									except invoked.CertificationNumber
									except invoked.CertificationDate
									except invoked.PassOrderAmount
									except invoked.FreightTotal
									except invoked.InsuranceTotal
									except invoked.CustomsTotal
									except invoked.OtherAddOnChargesTotal
									
								invoked.Company					= PrmBillingCompany
								if(PrmCustomer entered)
									invoked.Customer		=	PrmCustomer
								if (PrmBillingCompany.ManuallyNumbered)
									invoked.CustomerOrder		= PrmOrderNumber
								if (PrmCustomerBillTo entered)
									invoked.CustomerBillTo	  = PrmCustomerBillTo
								if (PrmCustomerShipTo entered)
									invoked.CustomerShipTo	  = PrmCustomerShipTo
								else
									invoked.CustomerShipTo	  = PrmCustomerOrder.CustomerShipTo
								invoked.RequestedDate	   = PrmRequestedDate
								invoked.ExpectedShipDate	= PrmExpectedShipDate
								if (PrmInventoryLocation entered)								
									invoked.InventoryLocation	 = PrmInventoryLocation	
								initialize invoked.LastLineNumber
								initialize invoked.TotalAddOnChargeAmount

							LocalSaveCustomerOrder = this instance.CustomerOrder
							LocalCustomerOrder	 = PrmCustomerOrder
							if (PrmCopyAddOnCharge)	
								for each CustomerOrderAddOnChargeForCopyRel	
									if (!each.Status.Canceled)
										invoke Create CustomerOrderAddOnCharge
											fill in fields from each
												except invoked.CustomerOrderAddOnCharge
											invoked.CustomerOrder			 = LocalSaveCustomerOrder.CustomerOrder
											initialize invoked.CustomerOrderLine
											initialize invoked.Status
											initialize invoked.WarehouseShipment

							LocalLastCustomerOrderLineForCopy = last CustomerOrderLinesForCopyRel.CustomerOrderLine
							for each CustomerOrderLinesForCopyRel
								if (!each.Status.Canceled)
									LocalCustomerOrderLine	= each.CustomerOrderLine
									display "CreateCustomerOrderLine"
									invoke Unreleased.Create CustomerOrderLine
										fill in fields from each
											except invoked.CustomerOrder
											except invoked.CustomerOrderLine
											except invoked.Status
											except invoked.InvoiceQuantity
											except invoked.ShippedQuantity
											except invoked.ReturnedQuantity
											except invoked.EnteredPrice
											except invoked.DiscountTaken
											except invoked.FreightTotal
											except invoked.InsuranceTotal
											except invoked.CustomsTotal
											except invoked.OtherAddOnChargesTotal
										invoked.CustomerOrder			  = LocalSaveCustomerOrder.CustomerOrder
										if(!each.PriceStatus.SystemCalculatedPricing)
											invoked.EnteredPrice =  each.EnteredPrice
										if (!PrmCopyUnitCost)
											if (each.LineType.NonStock)
												invoked.UnitCost = each.UnitCost
											else
												initialize invoked.UnitCost	
										if (each.IsHSNSACCodeEnabled)
											initialize invoked.TaxCode
										if (PrmCustomerShipTo entered)				  
											invoked.CustomerShipTo = PrmCustomerShipTo
										if (PrmInventoryLocation entered)				
											invoked.InventoryLocation	 = PrmInventoryLocation
									if (PrmCopyAddOnCharge)	
										for each CustomerOrderLineAddOnChargesRel
											if (!each.Status.Canceled)
												invoke Create CustomerOrderAddOnCharge
													fill in fields from each
														except invoked.CustomerOrderAddOnCharge
													invoked.CustomerOrder		 = LocalSaveCustomerOrder.CustomerOrder
													invoked.CustomerOrderLine	= LocalCustomerOrderLine
													initialize invoked.Status
													initialize invoked.WarehouseShipment
						else
							invoke Unreleased.Create this instance
								fill in fields from PrmStandardOrder
								invoked.Company					= PrmBillingCompany
								if (PrmBillingCompany.ManuallyNumbered)
									invoked.CustomerOrder		 = PrmOrderNumber
								invoked.BillingProcessLevel	 = PrmBillingProcessLevel
								invoked.OrderEntryOrderType	 = PrmOrderEntryOrderType
								invoked.InventoryLocation	 = PrmInventoryLocation
								if (CompanyCustomer.TaxExempt)
									invoked.TaxStatus		 = CustomerOrder.TaxStatus.Exempt
								else
									invoked.TaxStatus		 = CustomerOrder.TaxStatus.Taxable
								invoked.TaxCode				 = CompanyCustomer.TaxCode
								invoked.Customer			 = PrmCustomer
								invoked.CustomerBillTo		 = PrmCustomerBillTo
								invoked.CustomerShipTo		 = PrmCustomerShipTo
								invoked.RequestedDate		 = PrmRequestedDate
								invoked.ExpectedShipDate	 = PrmExpectedShipDate

							LocalSaveCustomerOrder		= this instance.CustomerOrder
							for each StandardOrderLinesCopyRel
								invoke Unreleased.Create CustomerOrderLine
									fill in fields from each
									invoked.CustomerOrder	 = LocalSaveCustomerOrder.CustomerOrder
									invoked.OrderQuantity	 = each.Quantity
									invoked.Item			 = each.Item
									invoked.SellUOM			 = each.SellUom
									if (!PrmCopyUnitCost)
										initialize invoked.UnitCost
									if (each.Company.GeneralLedgerCompany.RequireHSNSACCode)
										initialize invoked.TaxCode
									if (PrmInventoryLocation entered)
										invoked.InventoryLocation	 = PrmInventoryLocation


				Update is an Update Action
					valid when (!OnProformaPaymentHold)
					Action Rules

						OrderDiscountAmount = OrderDiscountAmountForDiscountCode

					Exit Rules



						if ((TaxableAmount changed
							or TaxCode changed
							or TermsCode changed
							or FreightCharge changed
							or EnteredDiscount changed
							or InventoryGoodsAmount changed
							or NonInventoryGoodsAmount changed
							or TotalAddOnChargeAmount changed)
							and (TaxableAmount > 0 
							or FreightTotal > 0
							or FreightCharge > 0))
								LocalTaxComputed   = false
								LocalSkipAOCTaxLog = true
								initialize LocalTaxLineItemCreated

						include CalculateTotalAmounts

						if (FutureOrder changed)
							for each CustomerOrderLinesRel
								invoke Unreleased.Update each
									invoked.FutureOrder = FutureOrder

						if (HoldCode entered
						and WarehouseDemandRel exists)
							invoke Update WarehouseDemandRel
								invoked.OnHold = true

				Delete is a Delete Action
					valid when (!OnProformaPaymentHold)
					Entrance Rules
						if (OrderEntryOperator = "CUST")
							constraint (UserIdRelease entered)
								"CannotDeleteOrderThatCustomerDidNotRelease" 

						constraint (PaymentInvoiced not entered)
							"CannotDeleteOrderWithDownpaymentAmountInvoiced" 

						invoke Unreleased.Delete CustomerOrderLinesRel	
						invoke Unreleased.Delete AddOnChargesForCustomerOrderRel


				GroupPricing is an Instance Action
					valid when (!OnProformaPaymentHold)
					Action Rules
						constraint (first CustomerOrderLineForGroupPricingRel exist)
							"NoOrderLinesToAmalgamate" 

						invoke Unreleased.GroupPricing CustomerOrderLineForGroupPricingRel


				ReleaseFromCreditCheckWorkFlow is an Instance Action 
					valid when (!OnProformaPaymentHold)
					restricted
					Action Rules
						initialize HoldCode
						invoke Unreleased.Release

				Release is an Instance Action
					valid when (ShipImmediateAndOnProHold)
					completion message is "<DerivedReleasedCompletionMessage>"
					Action Rules
						constraint (!SalesQuote)
							"CannotReleaseSalesQuoteOrders" 

						constraint (HoldCode not entered)
							"CannotReleaseOrderThatIsOnHold,NoPOCreated"	

						constraint (CustomerOrderLinesRel  exists)
							"OrderCannotBeRelease;DoesNotHaveAnyLines"	

						constraint (OriginalOpenOrderAmount >= 0)
							"OrderTotalCannotBeLessThanZero"	

						if (OrderEntryCustomer.PORequiredForCustomerOrder)
							constraint (CustomerPurchaseOrder entered)
								"CustomerPurchaseOrderIsRequired"

						if (CashInAdvanceRequired)
							constraint (EnteredPayment >= DerivedWorkAmount)
								"PrepaymentAmountIsLessThanCashInAdvanceRequiredPercentOfTheTotalOrderAmount;MustChangePaymentAmount" 

							constraint (EnteredPayment <= OriginalOpenOrderAmount)
								"CannotHaveAnEnteredPaymentGreaterThanOrderTotal" 

							constraint (not NoElectronicPayment)
								"CheckNumberOrElectronicPaymentRequiredForDownpayment"

						if (CustomerOrderLinesDropship exists)
							constraint (ShipToName entered
							and			ShipPostalAddress entered)
								"DropshipRequiresShipToNameAndAddress"

						if (OrderEntryOperator ="CUST"
						and UserIdRelease not entered)
							UserIdRelease	= OrderEntryOperator

						
						for each CustomerOrderLinesRel
							if(each.TaxStatus.Taxable and each.TaxEntityUsesVertex)
								invoke CalculateFullTaxTotal each

						if(HasCreatePOLineAndOrderAmountExceedingOrderLimit
						or IsOrderAmountExceedingOrderLimit)
							if (CompanyCustomer.OrderEntryCustomer.CreditLimitHoldCode entered)
								HoldCode = CompanyCustomer.OrderEntryCustomer.CreditLimitHoldCode
							else
								HoldCode = CompanyCustomer.OrderEntryCustomer.OrderLimitHoldCode

						if (HoldCode entered)
							invoke Update WarehouseDemandRel
								invoked.OnHold = true

						invoke Release CustomerOrderLinesRel

						invoke Release AddOnChargesForCustomerOrderRel

						if (ProformaCashInAdvanceRequired)
							OnProformaPaymentHold = true

							invoke Create ProformaInvoice
								invoked.Company							= Company
								invoked.ProformaInvoice					= CustomerOrder
								invoked.Status							= 1
								invoked.ProformaPercent					= ProformaCashInAdvanceRequiredPercent
								invoked.InvoiceAmount					= DerivedProformaAmount
								invoked.InvoiceDate						= current corporate date

								invoked.Attachment.File					= Company.ProformaInvoiceDocument.ProformaInvoiceDocumentTemplate.File document
								invoked.Attachment.Title				= "ProformaInvoice"
								invoked.Attachment.MimeType				= Company.ProformaInvoiceDocument.ProformaInvoiceDocumentTemplate.MimeType
						else
							make transition to Released

					Exit Rules
						if (TaxEntityRel.DelayTaxProcessing)
							LocalDoCreateTaxLog = TaxConfigurationRel.WriteToLogFile
							
						if (SingleCallToOneSource)
							invoke ProcessOneSourceForHeader
						else
						if (SingleCallToVertex)
							invoke ProcessVertexForHeader
						else
							include CalculateTaxableAmount
							TaxTotal = LocalSalesTax + LocalLineSalesTax
					
						include UpdateCustomerOpenOrderAmount
					
						if (BillingFreightCode.AddOnCharge entered)
							include CreatePurchaseOrderInterfaceAddOnCharge

						if (ProformaCashInAdvanceRequired)
							if (FreightCharge entered
							and TaxStatus.Taxable)
								include CalculateTaxAmountsProformaLineTax
								CalculateTax.ProductTaxCategory		= BillingFreightCode.ProductTaxCategory
								CalculateTax.TaxableAmount			= FreightCharge * ProformaCashInAdvanceRequiredPercent

								LocalExecuteCalculateTax			= CalculateTax.ExecuteCalculateTax
								constraint (CalculateTax.OutputErrorNumber not entered)
									"<CalculateTax.OutputErrorMessage>"

								LocalProformaTaxSourceType			=	ProformaTaxSourceType.Freight
								include ProformaInvoiceLineTaxCreation

							if (CustomerOrderLinesRel exists)
								for each CustomerOrderLinesRel
									if (each.TaxStatus.Taxable)
										include CalculateTaxAmountsProformaLineTax
										CalculateTax.ProductTaxCategory			= each.ProductTaxCategory
										CalculateTax.TaxCode					= each.TaxCode
										CalculateTax.TaxableAmount				= each.NetAmountCurrency * ProformaCashInAdvanceRequiredPercent


										LocalExecuteCalculateTax				= CalculateTax.ExecuteCalculateTax
										constraint (CalculateTax.OutputErrorNumber not entered) 
											"<CalculateTax.OutputErrorMessage>" 
										LocalCustomerOrderLine					= each.CustomerOrderLine
										LocalProformaTaxSourceType				= ProformaTaxSourceType.Line
										include ProformaInvoiceLineTaxCreation

							if (CustomerOrderAddOnChargeRel exists)
								for each CustomerOrderAddOnChargeRel
									if (each.TaxStatus.Taxable)
										if (each.OrderDiscount
										and (EnteredDiscount entered
										or OrderDiscountAmount entered))
											LocalComputedDiscount = ((EnteredDiscount + OrderDiscountAmount) * (each.DerivedAOCAmount / DiscountableAmount))
											LocalDiscountedAmount += LocalComputedDiscount
										else
											initialize LocalComputedDiscount
										
										if (each.TaxStatus.Taxable)
											initialize LocalTotalAOCTaxableAmount
												if (each.OrderDiscount)
													LocalAOCAmount				= (each.DerivedAOCAmount - LocalComputedDiscount)
												else
													LocalAOCAmount				= each.DerivedAOCAmount
											LocalTotalAOCTaxableAmount			+= LocalAOCAmount
										
											WorkNetAmount						= LocalAOCAmount
											LocalOrderLineOrAddOnChargeDiscount = each.OrderDiscount
											LocalTaxCode						= each.TaxCode
											LocalPaymentDate					= current corporate date
											
											if (IsPaymentTaxAfterTerms)
												LocalTermsAmount				= WorkNetAmount
												include CalculateTermsDiscount
												WorkNetAmount					-= LocalTermsDiscount

										include CalculateTaxAmountsProformaLineTax
										CalculateTax.ProductTaxCategory			= each.ProductTaxCategory
										CalculateTax.TaxCode					= each.TaxCode
										CalculateTax.TaxableAmount				= WorkNetAmount * ProformaCashInAdvanceRequiredPercent

										LocalExecuteCalculateTax				= CalculateTax.ExecuteCalculateTax
										constraint (CalculateTax.OutputErrorNumber not entered) 
											"<CalculateTax.OutputErrorMessage>" 
										LocalCustomerOrderLine					= each.CustomerOrderLine
										LocalCustomerOrderAOC					= each.CustomerOrderAddOnCharge
										if (each.CustomerOrderLine entered)
											LocalProformaTaxSourceType					= ProformaTaxSourceType.LineAOC
										else
											LocalProformaTaxSourceType					= ProformaTaxSourceType.HeaderAOC
										include ProformaInvoiceLineTaxCreation
						invoke TriggerCustomerOrderService




								
				ReleaseFromProforma		is an Instance Action
					restricted
					Action Rules
						OnProformaPaymentHold = false
						invoke Released.ProformaReleasePostProcess CustomerOrderLinesRel
						make transition to Released


				PrintProformaInvoice	is an Instance Action
					valid when (HasProformaInvoice)
					Parameters
						PrmLocalPaidPercent	is like ProformaCashInAdvanceRequiredPercent
					Action Rules
						invoke Update ProformaInvoiceRel
							invoked.Attachment.File					= Company.ProformaInvoiceDocument.ProformaInvoiceDocumentTemplate.File document
							invoked.Attachment.Title				= "ProformaInvoice"
							invoked.Attachment.MimeType				= Company.ProformaInvoiceDocument.ProformaInvoiceDocumentTemplate.MimeType
							invoked.InvoiceAmount					= ProformaInvoiceRel.InvoiceAmount * (PrmLocalPaidPercent/ProformaCashInAdvanceRequiredPercent)


				DiscardProformaInvoice	is an Instance Action
					valid when (HasNoPrePayments)
					Action Rules
						invoke Purge ProformaInvoiceRel
						invoke Purge ProformaInvoiceLineTaxRel
						invoke Unreleased.Update
							ProformaCashInAdvanceRequired		= false
							ProformaCashInAdvanceRequiredPercent = 0
						invoke ReleaseFromProforma


				OverrideProformaInvoice	is an Instance Action
					valid when (HasProformaInvoice)
					Parameters
						PrmNoMoreIntended	is Boolean
						PrmPercent			is like ProformaCashInAdvanceRequiredPercent
					Parameter Rules
						PrmPercent
							if (PrmNoMoreIntended)
								cannot be entered
					Local Fields
						LocalAmount		is an InternationalAmount
						LocalPaidPercent	is like ProformaCashInAdvanceRequiredPercent

					Entrance Rules
						LocalAmount		 = sum ProformaInvoiceRel.ReceivablePrepaymentRel.ReceivablePayment.TransactionAmount
						LocalPaidPercent	 = LocalAmount/OrderTotal
					Action Rules
						if (PrmNoMoreIntended)
							initialize PrmPercent

							for each ProformaInvoiceLineTaxRel
								invoke Update each
									invoked.TaxableCurrencyAmount.TransactionAmount	= each.TaxableCurrencyAmount.TransactionAmount * (LocalPaidPercent/ProformaCashInAdvanceRequiredPercent)
									invoked.TransactionTaxable.TransactionAmount	= each.TransactionTaxable.TransactionAmount * (LocalPaidPercent/ProformaCashInAdvanceRequiredPercent)

							invoke PrintProformaInvoice
								invoked.PrmLocalPaidPercent	= LocalPaidPercent

							invoke Unreleased.Update
								ProformaCashInAdvanceRequiredPercent = LocalPaidPercent
							
							invoke ReleaseFromProforma

						else
							constraint (PrmPercent >= LocalPaidPercent and PrmPercent <= 1)
								"CannotBeLessThan<LocalPaidPercent>AndGreaterThan100%"

							for each ProformaInvoiceLineTaxRel
								invoke Update each
									invoked.TaxableCurrencyAmount.TransactionAmount	= each.TaxableCurrencyAmount.TransactionAmount * (PrmPercent/ProformaCashInAdvanceRequiredPercent)
									invoked.TransactionTaxable.TransactionAmount	= each.TransactionTaxable.TransactionAmount * (PrmPercent/ProformaCashInAdvanceRequiredPercent)

							invoke PrintProformaInvoice
								invoked.PrmLocalPaidPercent	= PrmPercent

							invoke Unreleased.Update
								ProformaCashInAdvanceRequiredPercent = PrmPercent


				ReleaseShipImmediates	is an Instance Action
					valid when (ShipImmediateAndOnNotProHold)
					Action Rules
						constraint (!SalesQuote)
							"CannotReleaseSalesQuoteOrders" 

						constraint (HoldCode not entered)
							"CannotReleaseOrderThatIsOnHold"	

						constraint (CustomerOrderLinesRel  exists)
							"OrderCannotBeRelease;DoesNotHaveAnyLines"	

						constraint (OriginalOpenOrderAmount > 0)
							"OrderTotalCannotBeLessThanZero"	


						if (CashInAdvanceRequired)
							constraint (EnteredPayment >= DerivedWorkAmount)
								"PrepaymentAmountIsLessThanCashInAdvanceRequiredPercentOfTheTotalOrderAmount;MustChangePaymentAmount" 

							constraint (EnteredPayment <= OriginalOpenOrderAmount)
								"CannotHaveAnEnteredPaymentGreaterThanOrderTotal" 

							constraint (not NoElectronicPayment)
								"CheckNumberOrElectronicPaymentRequiredForDownpayment"

						if (OrderEntryOperator ="CUST"
						and UserIdRelease not entered)
							UserIdRelease	= OrderEntryOperator

						if (CompanyCustomer.OrderEntryCustomer.CheckCreditOnOrderAdd)
							constraint (IsOrderWithinCustomerLimit)
								"Order/CreditLimitCheckFailed;CannotReleaseShipImmediateOrder"







						BackgroundGroup = "OrderEntryShipImmediatesForOrder "+CustomerOrder
						invoke OrderEntryShipImmediates	OrderEntryShipImmediates in background group(BackgroundGroup)
							invoked.Company	= Company
							invoked.OrderNbr	= CustomerOrder
					
					Exit Rules
						if (TaxEntityRel.DelayTaxProcessing)
							LocalDoCreateTaxLog = TaxConfigurationRel.WriteToLogFile
						if (SingleCallToOneSource)
							invoke ProcessOneSourceForHeader in background
								run after background group (BackgroundGroup)
						else
						if (SingleCallToVertex)
							invoke ProcessVertexForHeader in background
								run after background group (BackgroundGroup)
						else
							include CalculateTaxableAmount
							TaxTotal = LocalSalesTax + LocalLineSalesTax

						if (IsReleased)
							include UpdateCustomerOpenOrderAmount


			Released is a State

				Update is an Update Action
					Entrance Rules
						if ((TaxEntityRel.ThirdParty.TaxEngine
						or BillingCompanyRel.ProcessShipmentBods)
						and WarehouseShipment exists)
							constraint (WarehouseShipment.TemporaryHold.RejectedByEngine)
								"<CannotUpdateCustomerOrderErrorMessage>"

					Exit Rules
						invoke SetToCanceled
						
						if ((TaxableAmount changed
							or TaxCode changed
							or TermsCode changed
							or FreightCharge changed
							or EnteredDiscount changed
							or InventoryGoodsAmount changed
							or NonInventoryGoodsAmount changed
							or TotalAddOnChargeAmount changed)
							and (TaxableAmount > 0 
							or FreightTotal > 0
							or FreightCharge > 0))
								LocalTaxComputed = false
								LocalSkipAOCTaxLog = true
								initialize LocalTaxLineItemCreated
								
						include CalculateTotalAmounts
						
						if (FutureOrder changed)
							for each CustomerOrderLinesRel
								invoke Released.Update each
									invoked.FutureOrder = FutureOrder



				CancelCustomerOrder is an Instance Action
					valid when (!ProformaCashInAdvanceRequired)
					Entrance Rules
						if ((TaxEntityRel.ThirdParty.TaxEngine
						or BillingCompanyRel.ProcessShipmentBods)
						and WarehouseShipment exists)
							constraint (WarehouseShipment.TemporaryHold.RejectedByEngine)
								"<CannotCancelCustomerOrderErrorMessage>"

					Action Rules
						constraint (!ProformaCashInAdvanceRequired)
							"ActionNotValidWhenProformaCashInAdvance"

						constraint (IsReleased)
							"CancelActionIsNotValidFor"

						confirmation required
							"CustomerOrderWillBeCanceled.Continue?"

						invoke Released.CancellationUpdate  CustomerOrderLinesCanceledCompleted
						CancelledDate				= current corporate date
						if (Company.DefaultReason entered)
							OrderCancelCreditReason	= Company.DefaultReason
						else
							OrderCancelCreditReason		 = BillingProcessLevel.DefaultReason
						OrderEntryCancelledOperator  = actor
						constraint(OrderCancelCreditReason.Canceled)
							"CancelReasonInvalidForCancellationOfOrder"
						make transition to Canceled
						trigger "CustomerOrderCanceledService" PA service
							resume on error
							title is "CO:<Company>Customer:<Customer>"
							Criteria
								Company
							Variables
								Company
									variable name is Company
								Customer
									variable name is Customer
								CustomerOrder
									variable name is CustomerOrder
								OrderEntryOrderType
									variable name is OrderType
								BillName
									variable name is BillName
								OrderDate
									variable name is OrderDate
								
						invoke CustomerOrderCancelledAlert
							invoked.PrmAlertName = "FSM_ION_CustomerOrderCanceledAlert"

						invoke TriggerCustomerOrderService



				SetToCanceled is an Instance Action
					restricted
					Action Rules
						if (CancelCustomerOrder)
							CancelledDate				= current corporate date
							if (Company.DefaultReason entered)
								OrderCancelCreditReason	= Company.DefaultReason
							else
								OrderCancelCreditReason		 = BillingProcessLevel.DefaultReason
							OrderEntryCancelledOperator  = actor
							constraint(OrderCancelCreditReason.Canceled)
									"CancelReasonInvalidForCancellationOfOrder"
							make transition to Canceled

			Canceled is a State
				Purge is a Purge Action
					restricted
					bypass relational integrity rules

			ReadyForPurge is a State
				Purge is a Purge Action
					restricted
					bypass relational integrity rules

	Actions
		ProcessOneSourceForHeader is an Instance Action
			restricted
			valid when (SingleCallToOneSource)
			Entrance Rules
				if (SingleCallToOneSource)
					LocalUniqueID = UniqueID
					if (TaxLineItemsRel exists)
						for each TaxLineItemsRel
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each
			Action Rules
				LocalDoCreateTaxLog = TaxConfigurationRel.WriteToLogFile
				include CalculateTaxableAmount
			Exit Rules	
				invoke ProcessOneSourceForLine CustomerOrderLine
					invoked.PrmCompany				= Company
					invoked.PrmCustomerOrder 		= CustomerOrder
		
				if (CustomerOrderLinesRel not exists)
					CalculateTax.SendMultLineItems					= true
					CalculateTax.UpdateLineItems					= true
					CalculateTax.UniqueIdOfRelatedObject			= UniqueID
					CalculateTax.UserElementLevel					= "L"
					LocalExecuteCalculateTax						= CalculateTax.ExecuteCalculateTax


		ProcessVertexForHeader is an Instance Action
			restricted
			valid when (SingleCallToVertex)
			Entrance Rules
				if (SingleCallToVertex)
					LocalUniqueID = UniqueID
					if (TaxLineItemsRel exists)
						for each TaxLineItemsRel
							invoke Delete each.LineItemUserFieldsRel
							invoke Delete each

			Action Rules
				LocalDoCreateTaxLog = TaxConfigurationRel.WriteToLogFile
				include CalculateTaxableAmount

			Exit Rules
				invoke ProcessVertexForLine CustomerOrderLine
					invoked.PrmCompany				= Company
					invoked.PrmCustomerOrder 		= CustomerOrder

				if (CustomerOrderLinesRel not exists)
					initialize CalculateTax.UniqueLineNumber
					CalculateTax.POATaxCode							= BillingProcessLevel.TaxCode
					CalculateTax.POAAddress							= BillingProcessLevel.CompanyAddress
					CalculateTax.SendMultLineItems					= true
					CalculateTax.UpdateLineItems					= true
					CalculateTax.UniqueIdOfRelatedObject			= UniqueID
					CalculateTax.UserElementLevel					= "L"
					CalculateTax.InputReturnVertexTaxIn		        = "D"
					CalculateTax.TaxCode							= TaxCode
					CalculateTax.AppendToJurisFile					= true
					CalculateTax.JurisdictionResultsKey				= "OE:" + Company + ":" + CustomerOrder + ":" + current timestamp
					LocalExecuteCalculateTax						= CalculateTax.ExecuteCalculateTax

					if (TaxLineItemsRel exists)
						for each TaxLineItemsRel
							LocalTotalTaxLineItemAmount += each.CalculatedTaxAmt

						TaxTotal 			 = LocalTotalTaxLineItemAmount
						TotalOrderAmount	+= LocalTotalTaxLineItemAmount

		FastUpdate is an Update Action
    		restricted
    		bypass field rules


		UpdateHoldCode is an Instance Action
			valid when (IsHoldCode)
			Parameters
				PrmHoldCode					is a ReceivableHoldCode
				PrmHoldCodeApprove			is Boolean

			Parameter Rules
				PrmHoldCode
					initial value is HoldCode

			Action Rules
				if (PrmHoldCode not entered)

					if (CashInAdvanceRequired)
						constraint (EnteredPayment >= DerivedWorkAmount)
							"PrepaymentAmountIsLessThanCashInAdvanceRequiredPercentOfTheTotalOrderAmount;MustChangePaymentAmount" 

						constraint (EnteredPayment <= OriginalOpenOrderAmount)
							"CannotRemoveHoldCode;EnteredPaymentGreaterThanOrderTotal" 

					initialize HoldCode
				else
				if (PrmHoldCode != HoldCode)
					HoldCode = PrmHoldCode

				HoldCodeApprove = PrmHoldCodeApprove
				
				if (HoldCode not entered)
					invoke Update WarehouseDemandRel
						invoked.OnHold = false



		UpdateOrderFromAddOnCharge is an Instance Action
			restricted
			Parameters
				PrmFreightTotal						is an InternationalAmount
				PrmInsuranceTotal					is an InternationalAmount
				PrmOtherAddOnChargesTotal			is an InternationalAmount
				PrmCustomsTotal						is an InternationalAmount
				PrmTotalAddOnChargeAmount			is an InternationalAmount
				PrmDiscountableAmount				is an InternationalAmount
				PrmTaxableAmount					is an InternationalAmount
				PrmInventoryGoodsAmount				is an InternationalAmount
				PrmInventoryGoodsBaseAmount			is an InternationalAmount
				PrmNonInventoryGoodsAmount			is an InternationalAmount
				PrmNonInventoryGoodsBaseAmount		is an InternationalAmount
				PrmCreateTaxLogForAOC				is Boolean

			Action Rules
				if (PrmTotalAddOnChargeAmount entered)
					TotalAddOnChargeAmount	  += PrmTotalAddOnChargeAmount
				if (PrmFreightTotal entered)
					FreightTotal				+= PrmFreightTotal
				if (PrmInsuranceTotal entered)
					InsuranceTotal				+= PrmInsuranceTotal
				if (PrmCustomsTotal entered)
					CustomsTotal				+= PrmCustomsTotal
				if (PrmOtherAddOnChargesTotal entered)
					OtherAddOnChargesTotal		+= PrmOtherAddOnChargesTotal
				if (PrmDiscountableAmount entered)
					DiscountableAmount			+= PrmDiscountableAmount
					initialize LocalDiscountsCalculated
					OrderDiscountAmount		= OrderDiscountAmountForDiscountCode
					OrderDiscountPercentage		= OrderDiscountPercentForDiscountCode
				if (PrmTaxableAmount entered)
					TaxableAmount				+= PrmTaxableAmount
				if (PrmNonInventoryGoodsAmount entered)
					NonInventoryGoodsAmount	+= PrmNonInventoryGoodsAmount
				if (PrmNonInventoryGoodsBaseAmount entered)
					NonInventoryGoodsBaseAmount += PrmNonInventoryGoodsBaseAmount
				if (PrmInventoryGoodsBaseAmount entered)
					InventoryGoodsBaseAmount	+= PrmInventoryGoodsBaseAmount
				if (PrmInventoryGoodsAmount entered)
					InventoryGoodsAmount		+= PrmInventoryGoodsAmount
				if (CashInAdvanceRequired)
					EnteredPayment				+= EnteredPaymentAmount

				if (PrmCreateTaxLogForAOC)
					LocalSkipHeaderTaxLog 		= true
				include CalculateTotalAmounts



		UpdateCustomerOrderFromCustomerOrderLine is an Instance Action
			restricted
			Parameters
				PrmFreightTotal						is an InternationalCost	
				PrmInsuranceTotal					is an InternationalCost	
				PrmOtherAddOnChargesTotal			is an InternationalCost	
				PrmCustomsTotal						is an InternationalCost	
				PrmTotalAddOnChargeAmount		is an InternationalAmount
				PrmDiscountableAmount				is an InternationalAmount
				PrmTaxableAmount					is an InternationalAmount
				PrmInventoryGoodsAmount				is an InternationalAmount
				PrmInventoryGoodsBaseAmount			is an InternationalAmount
				PrmNonInventoryGoodsAmount			is an InternationalAmount
				PrmNonInventoryGoodsBaseAmount		is an InternationalAmount
			Action Rules
				if (PrmTotalAddOnChargeAmount entered)
					TotalAddOnChargeAmount	  += PrmTotalAddOnChargeAmount
				if (PrmFreightTotal entered)
					FreightTotal				+= PrmFreightTotal
				if (PrmInsuranceTotal entered)
					InsuranceTotal				+= PrmInsuranceTotal
				if (PrmCustomsTotal entered)
					CustomsTotal				+= PrmCustomsTotal
				if (PrmOtherAddOnChargesTotal entered)
					OtherAddOnChargesTotal		+= PrmOtherAddOnChargesTotal
				if (PrmDiscountableAmount entered)
					DiscountableAmount			+= PrmDiscountableAmount
					OrderDiscountAmount		= OrderDiscountAmountForDiscountCode
					OrderDiscountPercentage		= OrderDiscountPercentForDiscountCode
				if (PrmTaxableAmount entered)
					TaxableAmount				+= PrmTaxableAmount
				if (PrmNonInventoryGoodsAmount entered)
					NonInventoryGoodsAmount	+= PrmNonInventoryGoodsAmount
				if (PrmNonInventoryGoodsBaseAmount entered)
					NonInventoryGoodsBaseAmount += PrmNonInventoryGoodsBaseAmount
				if (PrmInventoryGoodsBaseAmount entered)
					InventoryGoodsBaseAmount	+= PrmInventoryGoodsBaseAmount
				if (PrmInventoryGoodsAmount entered)
					InventoryGoodsAmount		+= PrmInventoryGoodsAmount
				if (CashInAdvanceRequired)
					EnteredPayment				+= EnteredPaymentAmount

				include CalculateTotalAmounts



		UpdateCustomerOrderAmounts is an Instance Action
			restricted
			Parameters
				PrmTaxableAmount					is an InternationalAmount
				PrmDiscountableAmount				is an InternationalAmount
				PrmInventoryGoodsAmount				is an InternationalAmount
				PrmInventoryGoodsBaseAmount			is an InternationalAmount
				PrmNonInventoryGoodsAmount			is an InternationalAmount
				PrmNonInventoryGoodsBaseAmount		is an InternationalAmount
				PrmSkipTaxlogForHeaderAndAOC		is Boolean

			Action Rules
				if (PrmTaxableAmount entered)
					TaxableAmount						+= PrmTaxableAmount
				if (PrmDiscountableAmount entered)
					DiscountableAmount					+= PrmDiscountableAmount
					initialize LocalDiscountsCalculated
					OrderDiscountAmount					= OrderDiscountAmountForDiscountCode
					OrderDiscountPercentage				= OrderDiscountPercentForDiscountCode
				if (PrmInventoryGoodsAmount entered)
					InventoryGoodsAmount				+= PrmInventoryGoodsAmount
				if (PrmInventoryGoodsBaseAmount entered)
					InventoryGoodsBaseAmount			+= PrmInventoryGoodsBaseAmount
				if (PrmNonInventoryGoodsAmount entered)
					NonInventoryGoodsAmount				+= PrmNonInventoryGoodsAmount
				if (PrmNonInventoryGoodsBaseAmount entered)
					NonInventoryGoodsBaseAmount			+= PrmNonInventoryGoodsBaseAmount
				if (CashInAdvanceRequired)
					EnteredPayment						+= EnteredPaymentAmount
				
				if (PrmSkipTaxlogForHeaderAndAOC)
					LocalDoCreateTaxLog = false

				if (not LocalCreateFromCopy
				or  LocalCustomerOrderLine = LocalLastCustomerOrderLineForCopy)
					include CalculateTotalAmounts



		PostMigrateUtility is a Set Action
			restricted
			Parameters
				PrmCompany				is a BillingCompany
					default label is "Company"


			Parameter Rules
				Company
					required

			Sort Order
				Company
				CustomerOrder

			Instance Selection
				where (PrmCompany = Company
				and   ((OpenOrderAmount not entered
				or		OpenOrderBaseAmount not entered)
				or	 (TaxStatus.Taxable
				and	 TaxTotal not entered)))

			Action Rules
				Instance Rules
					if (TaxStatus.Taxable)
						if (not LocalTaxComputed)
							LocalDoCreateTaxLog = false
							include CalculateTaxableAmount
							TaxTotal = LocalSalesTax
					else
						initialize TaxTotal

					if (OpenOrderAmount not entered)
						OpenOrderAmount = InventoryGoodsAmount + NonInventoryGoodsAmount + TotalAddOnChargeAmount + FreightCharge - OrderDiscountAmount - EnteredDiscount

					if (OpenOrderBaseAmount not entered)
						OpenOrderBaseAmount = OpenOrderAmount * CurrencyRate

					TotalOrderAmount = OpenOrderAmount + TaxTotal - TermsDiscountAmount	

					TotalOrderBaseAmount =	TotalOrderAmount * CurrencyRate



		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation		  is Alpha size 22
					default label is "Location"
				PrmDocumentID		is Alpha size 100
					default label is "DocumentID"
				PrmRevision		  is Alpha size 22
					default label is "Revision"	
				PrmSystemOfRecord	is Alpha size 1
					default label is "SystemOfRecord"
				PrmVariationID	   is Alpha size 22
					default label is "VariationID"
			Action Rules
				if (bod id.AccountingEntity	 != PrmAccountingEntity)
					bod id.AccountingEntity	 = PrmAccountingEntity
				if (bod id.Location			 != PrmLocation)
					bod id.Location			 = PrmLocation
				if (bod id.DocumentID		 != PrmDocumentID)
					bod id.DocumentID		 = PrmDocumentID
				if (bod id.Revision			 != PrmRevision)
					bod id.Revision			 = PrmRevision
				if (bod id.SystemOfRecord	 != PrmSystemOfRecord)
					bod id.SystemOfRecord	 = PrmSystemOfRecord
				if (bod id.VariationID		 != PrmVariationID)
					bod id.VariationID		 = PrmVariationID



		TriggerCustomerOrderService is an Instance Action
			restricted
			Local Fields
				LocalActionCode					is an ActionCode
				LocalFinanceEnterpriseGroup		is like FinanceEnterpriseGroup
				LocalCompany					is like Company
				LocalAccountingEntity			is an AccountingEntity
			Action Rules
				LocalFinanceEnterpriseGroup	 = Company.FinanceEnterpriseGroup
				LocalAccountingEntity		 = Company.GeneralLedgerCompany.AccountingEntity
				LocalCompany = Company
				if (Company.FinanceEnterpriseGroup.BODTrigger)
						if (action != "UpdateBODIdFields") 
							LocalActionCode = LocalActionCode.Create
							increment bod id.VariationID
							trigger "CustomerOrderService" PA service
								resume on error
								title is "EG:<LocalFinanceEnterpriseGroup>CO:<LocalCompany>CO:<CustomerOrder>"
								Criteria
									LocalFinanceEnterpriseGroup
									LocalCompany

								Variables
									LocalActionCode
										variable name is ActionCode
									include persistent fields from CustomerOrder
									include persistent fields from CustomerShipTo
									include persistent fields from Customer
									bod id.VariationID
										variable name is BODVariationId
									LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
										variable name is CurrentTimeStamp
									LocalAccountingEntity
										variable name is AccountingEntity
									LocalCompany
										variable name is Company
									OriginalOpenOrderAmount
										variable name is OriginalOpenOrderAmount
									OriginalOpenOrderBaseAmount
										variable name is OriginalOpenOrderBaseAmount
									OrderTotal
										variable name is OrderTotal
									OrderTotalBase
										variable name is OrderTotalBase
									Company.Currency
										variable name is CompanyCurrency


		UpdateWarehouseShipment is an Instance Action
			restricted
			Parameters
				PrmWarehouseShipment is like WarehouseShipment
			Action Rules
				WarehouseShipment = PrmWarehouseShipment
		
		SendSalesOrderBODNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Parameters
			Action Rules
				send ion bod
					bod is SyncSalesOrderXMLBOD
					bod type is "Sync.SalesOrder"
					document id is  DerivedDocumentID
					variation id is DerivedBODVariationID
					accounting entity is DerivedAccountingEntity
					location is InventoryLocation
					
		TriggerSalesOrderNativeLPLBOD is an Instance Action
			restricted
			Action Rules
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "SalesOrder"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= "CustomerOrder"
					invoked.PrmFinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
					invoked.PrmCompany					= Company
					invoked.PrmMainUserTemplate 		= "IONSyncSalesOrder_CustomerOrder_ST"
				LocalNativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				if(Company.FinanceEnterpriseGroup.BODTrigger and LocalNativeLPLBODTrigger)
					if(FSMInboundBODTracker not entered)
						invoke Create FSMInboundBODTracker
							assign result to NewBODTracker
							invoked.Verb 					= 1
							invoked.Noun 					= "SalesOrder"					
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.FinanceEnterpriseGroup	= DerivedPrmFEG
							invoked.Direction				= 1
							invoked.Reference1				= Company
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.Reference2				= CustomerOrder
							invoked.Customer				= Customer
							initialize invoked.Error			
							initialize invoked.ErrorMessage					
						LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
					else 
						LocalFSMInboundBODTracker		= FSMInboundBODTracker
						invoke Update FSMInboundBODTrackerRel
							invoked.FinanceEnterpriseGroup	= DerivedPrmFEG
							invoked.BODDocumentID			= DerivedDocumentID
							invoked.BODVariationID			= DerivedBODVariationID
							invoked.Status					= 1
							invoked.StartDate				= system current timestamp
							invoked.Direction				= 1
							invoked.Reference1				= Company
							invoked.BODAccountingEntity		= DerivedAccountingEntity
							invoked.Reference2				= CustomerOrder
							invoked.Customer				= Customer
							initialize invoked.Error			
							initialize invoked.ErrorMessage
					invoke SendSalesOrderBODNativeLPLBOD
						resume on error
	                   		Error            							= true
	                        ErrorMessage     							= error message
	                if(Error)
						invoke Update FSMInboundBODTrackerRel
							invoked.Error 								= Error
							invoked.ErrorMessage 						= ErrorMessage
							invoked.Status								= 2
							invoked.CloseDate							= system current timestamp
							invoked.BODID								= DerivedBODID
							invoked.BODXML								= SyncSalesOrderXMLBOD
					else
						invoke Update FSMInboundBODTrackerRel
							invoked.Status									= 3
							invoked.CloseDate								= system current timestamp
							invoked.BODID									= DerivedBODID
							invoked.BODXML									= SyncSalesOrderXMLBOD
						

		CustomerOrderCancelledAlert is an Instance Action
			restricted
			Parameters
				PrmAlertName	is Alpha size 100
			Action Rules
				LocalAlert = PrmAlertName
				if (Company.FinanceEnterpriseGroup.BODTrigger  and FSMBODConfigurationPARel.Enable)
      				if(FSMBODConfigurationDetailPARel.Enable)		
						invoke TriggerPulseAlert FSMBODConfigurationPARel
							invoked.PrmActorGroup 	= "ORDERPROCESSINGMANAGER" 
							invoked.PrmMainXML 		= CustomerOrderCancelAlertXML	
							invoked.PrmDescription	= CustomerOrderCancelDescription
							invoked.PrmBODID		= DerivedPABODID	



		CustomerOrderOnHoldAlert is an Instance Action
			restricted
			Parameters
				PrmAlertName	is Alpha size 100
			Action Rules
				LocalAlert = PrmAlertName	
				if (Company.FinanceEnterpriseGroup.BODTrigger  and FSMBODConfigurationPARel.Enable)
      				if( FSMBODConfigurationDetailPARel.Enable)	
						invoke TriggerPulseAlert FSMBODConfigurationPARel
							invoked.PrmActorGroup 	= "ORDERPROCESSINGMANAGER" 
							invoked.PrmMainXML 		= CustomerOrderOnHoldAlertXML	
							invoked.PrmDescription	= CustomerOrderHoldDescription
							invoked.PrmBODID		= DerivedCOHoldBODID	



		CustomerOrderQuote is an Instance Action
			restricted
			Parameters
				PrmAlertName	is Alpha size 100
			Action Rules
				LocalAlert = PrmAlertName	
				if (Company.FinanceEnterpriseGroup.BODTrigger and FSMBODConfigurationPARel.Enable)
      				if(FSMBODConfigurationDetailPARel.Enable)	
						invoke TriggerPulseAlert FSMBODConfigurationPARel
							invoked.PrmActorGroup 	= "ORDERPROCESSINGMANAGER" 
							invoked.PrmMainXML 		= CustomerOrderQuoteAlertXML	
							invoked.PrmDescription	= CustomerOrderQuoteDescription
							invoked.PrmBODID		= DerivedCOQuoteBODID		

		
		OrderEntryHistoryPurge is a Set Action
            restricted
            Parameters
                PrmCompany                 is a BillingCompany
                PrmCutoffDate              is Date

            Parameter Rules
                PrmCompany
                    required
					constraint (PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate entered)
		            	"PurgeCutOffDateMustBeSetFor_Finance_Enterprise_Group<PrmCompany.FinanceEnterpriseGroup>"
                PrmCutoffDate
					initial value is PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate
					default to PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate		
                    required
            
            Local Fields
                RecordCount                    is Numeric 10
                LocalActor                    is an Actor
                   
            Instance Selection
                include deleted records
                where (PrmCompany = Company
                and    PrmCutoffDate >= OrderDate
                and    Status >= 8)
            
            
            Action Rules
                Empty Set Rules 
                    LocalActor = actor
                    send notification
                        to LocalActor
                        description is "NoCustomerOrderRecordsFoundToPurge"
                        priority is high
                        detail is "OrderEntryHistoryPurgeCompleted:<RecordCount>RecordsPurged"
                
                Set Rules
					Entrance Rules
                		initialize RecordCount
                    Exit Rules
                        LocalActor = actor
                        send notification
                            to LocalActor
                            description is "OrderEntryHistoryPurgeCompleted"
                            priority is high
                            detail is "OrderEntryHistoryPurgeCompleted:<RecordCount>RecordsPurged"
                        
                Instance Rules
                    if (Status = 9)
                        if (BillingInvoicePurgeRel not exists
						and BillingInvoiceAllowPurgeRel not exists)
                            invoke Purge BillingElectronicPaymentTransactionIDRel
                            invoke Purge BillingInvoicesPurgeRel
                            invoke Purge CustomerOrderAddOnChargesRel
                            invoke Purge CustomerOrderAttachmentRel
                            invoke ReadyForDelete.Purge CustomerOrderLinePurgeRel
							invoke Closed.Purge WarehouseShipmentRel
                            increment RecordCount
                            invoke ReadyForPurge.Purge
                    else
                    if (Status = 8)
                        invoke Purge CustomerOrderAddOnChargesRel
                        invoke Purge CustomerOrderAttachmentRel
                        invoke Canceled.Purge CustomerOrderLinePurgeRel
                        increment RecordCount
                        invoke Canceled.Purge
