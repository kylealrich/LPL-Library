BillingInvoiceAddOnCharge is a BusinessClass
    owned by bl
    prefix is OIM
    classic name is OEINVCMISC

    Ontology
        symbolic key is BillingInvoiceAddOnCharge
            classic set name is OIMSET1
            classic name is SEQ
            classic name for BillingInvoice.InvoiceNumber is INVC-NUMBER
            classic name for BillingInvoiceLine is LINE-NBR

    Patterns
        implements StaticJava
        disable AuditIndex
		implements ContextualParent
		implements Archivable

    Persistent Fields
		ChargeType
        Miscellaneous                    is a OrderEntryAddOnCharge
            classic name is MISC
        TaxExemptCode
            classic name is TAX-EXEMPT-CD
        TaxCode
      	TrackType                        
      	EnteredUnitPrice				is a UnitCostCurrencyExchangeGroup
			classic name for EnteredUnitPrice.TransactionAmount is ENT-UNIT-PRC
			classic name for EnteredUnitPrice.BaseAmount		is UNIT-PRICE
		
		EnteredPrice					is a CurrencyExchangeGroup
        	classic name for EnteredPrice.TransactionAmount is ENT-PRICE
			classic name for EnteredPrice.BaseAmount	is PRICE	
      	
        TaxableCurrencyAmount            is an InternationalAmount
        	protected
            classic name is TAX-AMT-CURR
            default label is "TaxAmount"
        TaxableBaseCurrencyAmount        is an InternationalAmount
        	protected
            classic name is TAX-AMT-BSE
            default label is "TaxAmountInBaseCurrency"
        CostPercent
            classic name is COST-PCT
        PricePercent                     is a CostPercent
            classic name is PRICE-PCT
        UnitCost                         is an InternationalCost
        Cost                             is an InternationalCost
        AllocatedDiscount                is an InternationalAmount
        	protected
            classic name is ALLOC-DISC
  		UpdateSalesAnalysis				is Boolean
            restricted
            classic name is UPD-SA-FL
        OrderDiscount  					is Boolean
            classic name is ORD-DISC-FL








        CostBase                         is an InternationalAmount
        BillingCurrencyAddOnChargeAmount is an InternationalAmount
        	protected
            sql name is BCurrencyAddOnChargeAmount
            classic name is CHARGE-CURR
       
        BaseCurrencyAddOnChargeAmount    is an InternationalAmount
        	protected
            classic name is CHARGE-BASE
        TaxableAmount					is a CurrencyExchangeGroup
        	protected
      		classic name for TaxableAmount.TransactionAmount is ENT-TAXABLE
      		classic name for TaxableAmount.BaseAmount is TAXABLE-BSE	
        
        ProductTaxCategory
            classic name is PROD-TAX-CAT
        SalesAccount                     is a FinanceCodeBlockFull
            classic name for SalesAccount.AccountingUnit is SLS-ACCT-UNIT
            classic name for SalesAccount.GeneralLedgerChartAccount is SLS-ACCOUNT
            classic name for SalesAccount.Project is ACTIVITY
        OffsetAccount                    is a FinanceCodeBlockFull
            classic name for OffsetAccount.AccountingUnit is OFF-ACCT-UNIT
            classic name for OffsetAccount.GeneralLedgerChartAccount is OFF-ACCOUNT
        COGSAccount                      is a FinanceCodeBlockFull
            classic name for COGSAccount.AccountingUnit is CGS-ACCT-UNIT
            classic name for COGSAccount.GeneralLedgerChartAccount is CGS-ACCOUNT
            classic name for COGSAccount.Project is ACTIVITY-C

	Derived Fields
		DerivedToCurrency 				is a DerivedField
			type is like ToCurrency
			if (Company.CurrencyBasedPricing)
				return BillingInvoice.Currency
			else
				return Company.Currency
		
		DerivedFromCurrency				is a DerivedField
			type is like FromCurrency
			if (Company.CurrencyBasedPricing)
				return Company.Currency
			else
				return BillingInvoice.Currency
				
		DerivedAddOnChargesDesc			is a DerivedField
			type is Alpha 60
			return Miscellaneous.Description			
		
		DefaultLookupKey is a StringField
			type is Alpha 100
			restricted
			"BillingInvoiceLine"
			":"
			CurrentTimestamp
		
		CurrentTimestamp is a DerivedField
			type is Alpha 20
			restricted
			return current timestamp
					
		DerivedCurrency is a DerivedField
			type is Alpha size 5
			restricted
			return BillingInvoice.Currency

		DerivedBaseCurrency is a DerivedField
			type is Alpha size 5
			restricted
			return Company.Currency

		DerivedBLReportCurrency is a DerivedField
			type is Alpha size 5
			restricted
			return Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ReportCurrencyOne

    Conditions
    	TaxEntityUsesVertex										
			restricted				 							
			when (TaxEntityRel.ThirdParty.VertexOSeries)
			
    	IsCreditMemo
    		when (BillingInvoice.BillingInvoiceType.Credit)
    		






		IsBillingInvoiceLine
			restricted
			when (BillingInvoiceLine entered)
		
		TaxOutputDueAccount
			restricted
			when (TaxExemptCode.Taxable
			and TaxCode entered 
			and EntityTaxCodeRel exists 
			and EntityTaxCodeRel.TaxPoint.PaymentDate
			and not TaxEntityRel.OneSourceUseARCodeForTaxAccount)
			
		TaxOutputAccount
			restricted
			when (TaxExemptCode.Taxable
			and TaxCode entered  
			and EntityTaxCodeRel exists 
			and not EntityTaxCodeRel.TaxPoint.PaymentDate
			and not TaxEntityRel.OneSourceUseARCodeForTaxAccount)
			
		IsTaxAfterTerms
			restricted
			when ((TaxEntityRel.UseTaxCodeAccounts and TaxEntityRel.TaxTerms.Taxafterterms)
	       	or EntityTaxCodeRel.TaxTerms.Taxafterterms)
	     
		DoTaxCalculation
			restricted
			when (not TaxEntityRel.ThirdParty.Sabrix  
			or    not TaxEntityRel.DelayTaxProcessing 
			or    BillingInvoice.Status.Released
			or    BillingInvoice.Status.Edited
			or    BillingInvoice.Status.Printed)
		
		IsOneSourceTax
			restricted
			when (TaxExemptCode.Taxable
			and   TaxEntityRel.ThirdParty.Sabrix)

		SingleCallToOneSource
			restricted
			when (IsOneSourceTax
			and	  TaxEntityRel.DelayTaxProcessing
			and	  BillingInvoice.DerivedLineCount <= 200)
		
		IsVertexTax
			restricted
			when (TaxExemptCode.Taxable
			and   TaxEntityUsesVertex)

		SingleCallToVertex
			restricted
			when (IsVertexTax
			and	  TaxEntityRel.VertexCallMethod.ByTransaction
			and	  BillingInvoice.DerivedLineCount <= 200)

		ThirdPartyTaxCallPerLine
			restricted
			when ((IsOneSourceTax
			and   !SingleCallToOneSource)
			or    (IsVertexTax
			and   !SingleCallToVertex))

		IsInvoicingAndTaxCalculation
            restricted
            when ((Company.InvoiceOption.CompanyLevelInvoicing
            and  (Company.TaxCalulationAndPrinting.CalcAndPrintInSummary
			or   Company.TaxCalulationAndPrinting.CalcSummPrtDetailSumm))
            or   (Company.InvoiceOption.ProcessLevelInvoicing
            and  (BillingInvoice.BillingProcessLevel.TaxCalulationAndPrinting.CalcAndPrintInSummary
			or   BillingInvoice.BillingProcessLevel.TaxCalulationAndPrinting.CalcSummPrtDetailSumm)))

	Relations
		
		VertexConfigRel
        	one-to-one relation to VertexConfig
        	Field Mapping uses symbolic key
				related.VertexConfig 						= Company.CustomerBusinessGroup.FinanceEnterpriseGroup
				
		JurisdictionResultsRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig						= Company.CustomerBusinessGroup.FinanceEnterpriseGroup 
			Instance Selection
				where (related.CallingModuleKey 			= reference to this instance)
        
        TaxEntityRel				 
            one-to-one relation to TaxEntity
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Company.AccountingEntity.FinanceEnterpriseGroup
                related.TaxEntity 						= Company.AccountingEntity      
             
		TaxAttributesRel			
			one-to-one relation to TaxAttribute
			Field Mapping uses symbolic key
	 			related.FinanceEnterpriseGroup 	= Company.FinanceEnterpriseGroup	 
	 			related.TaxAttribute	        = TaxEntityRel.TaxAttributeCode
	 			
		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.AccountingEntity.FinanceEnterpriseGroup
				related.TaxEntity				= Company.AccountingEntity
				related.TaxCode					= TaxCode
				
		OrderEntryAddOnChargeIDMRel
			one-to-one relation to OrderEntryAddOnCharge
            Field Mapping uses symbolic key
                related.Company                        				= Company
                related.OrderEntryAddOnCharge.Misc     				= Miscellaneous.Misc
                related.OrderEntryAddOnCharge.Currency				= Company.Currency
		
		LocalReceivableGeneralLedgerCodeRel
			one-to-one relation to ReceivableGeneralLedgerCode
			Field Mapping uses symbolic key
				related.Company					 					= Company
				related.ReceivableGeneralLedgerCode 				= LocalReceivableGeneralLedgerCode

		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject = BillingInvoice.UniqueID
			Instance Selection
				where (related.InvoiceNumber				= BillingInvoice.InvoiceNumber)
		
		TaxLineItemAOCRel	
			one-to-many relation to TaxLineItem
			Field Mapping uses ByUniqueIdOfRelatedObject		 
				related.FinanceEnterpriseGroup				= Company.FinanceEnterpriseGroup 
			Instance Selection
			    where ((related.TaxLineItem.UniqueIdOfRelatedObject	= BillingInvoice.UniqueID 
				or      related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID)
				and 	related.InvoiceNumber 						= BillingInvoice.InvoiceNumber
				and	    related.RelatedObjectReference				= reference to this instance)

		InvoiceLineTaxByTaxCodeRel
			one-to-many relation to BillingInvoiceLineTax
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.BillingInvoice 		= BillingInvoice
			Instance Selection
				where (related.TaxCode					= LocalTaxCode
				and   related.ProductTaxCategory		= LocalProductTaxCategory)

		InvoiceLineTaxByUpdatedTaxCodeRel
			one-to-many relation to BillingInvoiceLineTax
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.BillingInvoice 		= BillingInvoice
			Instance Selection
				where (related.TaxCode					= LocalUpdatedTaxCode
				and   related.ProductTaxCategory		= LocalProductTaxCategory)

		BillingInvoiceLinesByTaxCodeRel
			one-to-many relation to BillingInvoiceLine
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.BillingInvoice 		= BillingInvoice
			Instance Selection
				where (related.TaxCode					= LocalTaxCode
				and   related.ProductTaxCategory		= LocalProductTaxCategory)

		BillingInvoiceAddOnChargeByTaxCodeRel
			one-to-many relation to BillingInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company 			= Company
				related.BillingInvoice 		= BillingInvoice
			Instance Selection
				where (related.TaxCode					= LocalTaxCode
				and   related.ProductTaxCategory		= LocalProductTaxCategory)

    Sets















        Set4
            indexed
            Sort Order
                Company
                BillingInvoice
                TaxCode
                ProductTaxCategory
                BillingInvoiceLine
                BillingInvoiceAddOnCharge

        Set5
            indexed
            Sort Order
                Company
                BillingInvoice
                BillingInvoiceAddOnCharge
                BillingInvoiceLine

	Local Fields
    	CalculateTax
    	CurrencyExchangeGroup
		ProcessTaxHistory
		LocalTaxHistoryProcessed				is Alpha 1
		LocalVertexTaxHistoryProcessed			is Boolean
		LocalCalculateTaxExecuted				is AlphaUpper 1
		LocalBillingCurrencyAddOnChargeAmount 	is an InternationalAmount
		LocalTaxableAmountTransactionAmount     is an InternationalAmount
		LocalBaseCurrencyAddOnChargeAmount		is an InternationalAmount
		LocalExcessDiscount						is an InternationalAmount
		LocalExcessTax							is an InternationalAmount
		LocalCreatedFromCopy					is Boolean
		LocalTaxTotal									is an InternationalCost
		CalculateTerms
		LocalTermsCalTrigger					is Alpha size 1
		TermsCode
		LocalJurisdictionLookupKey  			is Alpha 200
		LocalRestockChargeFromReturn            is Boolean
		LocalCreatedFromReturn					is Boolean
		Idx										is Numeric 2
		LocalProductTaxCategory					is like ProductTaxCategory
		LocalAOCTaxableAmount					is like InternationalAmount
		LocalSalesTax							is like InternationalAmount
		LocalSubtractTaxableAmount				is Boolean
		LocalTaxCodeChanged						is Boolean
		LocalNoAOCsExist						is Boolean
		LocalCreateBillingInvoiceLineTax		is Boolean
		LocalTaxableAmountChangeAccounted		is Boolean
		LocalTaxCode							is like TaxCode
		LocalUpdatedTaxCode						is like TaxCode

		LocalOneSourceTaxAttribute				is a TaxAttributeGroup50
		LocalOneSourceTaxAttributeText			is Text
		AttributeCounter						is Numeric 2

		TaxLineItemView							is a TaxLineItem view
		LocalLineItemNumber						is like DistributionSequence
		LocalReceivableGeneralLedgerCode		is like ReceivableGeneralLedgerCode

		LocalBLAOCTaxRate						is Decimal size 13.4
		LocalBLAOCTaxCode						is AlphaUpper size 15
		LocalBLAOCTaxExemptCode 				is Alpha size 15
		LocalInvoiceAOCOrgBaseAmount            is like InternationalAmount
		LocalBLAOCTotalAddOnAmount				is like InternationalAmount
		LocalInvoiceAOCBaseAmount          		is like InternationalAmount
		LocalInvoiceAOCReportAmount				is like InternationalAmount
		LocalInvoiceAOCTaxCurrAmount			is like InternationalAmount
		LocalInvoiceAOCTaxBaseCurrAmount		is like InternationalAmount
		LocalInvoiceAOCTaxReportCurrAmount		is like InternationalAmount
		LocalBLAOCCurrency						is AlphaUpper size 5
		LocalBLAOCTrackType						is AlphaUpper size 1
		LocalBLAOCMisc							is AlphaUpper size 16
		LocalBLAOCTaxRate1						is Decimal size 13.4
		LocalBLAOCTaxType						is AlphaUpper size 1
		LocalBLAOCSeq							is Numeric 6
		LocalBLAOCType							is Numeric 1
		LocalGeneralLedgerSystemCode		    is a GeneralLedgerSystemCode
		LocalRecalculateAOC                     is Boolean


	Transient Fields
		TransientCurrency					is a ToCurrency
			derive value from DerivedToCurrency
		TransientFromCurrency				is a FromCurrency
			derive value from DerivedFromCurrency
		TransientCurrencyTable				is a CurrencyTable
			derive value from BillingInvoice.CurrencyTable
		TransientExchangeDate				is an ExchangeDate
			derive value from BillingInvoice.InvoiceDate

	Rule Blocks
	
		LoadVertexGlobalInputFields 
			if (TaxEntityUsesVertex)
		   		CalculateTax.TransactionSource				= "O"	
		   		CalculateTax.CallingModule					= "BillingInvoiceAddOnCharge"
				CalculateTax.Vendor							= BillingInvoice.Customer
				CalculateTax.Invoice 						= BillingInvoice.DerivedInvoice
				CalculateTax.FromTaxCode					= BillingInvoice.Location.TaxCode
				CalculateTax.FromPostalAddress				= BillingInvoice.Location.PostalAddress 
			    if (BillingInvoice.CustomerShipTo.ShipToAddress.Country entered)
			    	CalculateTax.VATRegistrationCountry     = BillingInvoice.CustomerShipTo.ShipToAddress.Country 
			    else
			    	CalculateTax.VATRegistrationCountry     = BillingInvoice.CompanyCustomer.VATRegistrationCountry
			    
			    if (BillingInvoice.CustomerShipTo.VATRegistrationNumber entered)
			    	CalculateTax.VATRegistrationNumber		= BillingInvoice.CustomerShipTo.VATRegistrationNumber 
			    else
			    	CalculateTax.VATRegistrationNumber		= BillingInvoice.CompanyCustomer.VATRegistrationNumber
			    CalculateTax.FromVATRegistrationCountry   	= TaxEntityRel.VATRegistrationCountry 
			    CalculateTax.FromVATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber 
			    CalculateTax.DefaultFilingCurrency 			= TaxEntityRel.DefaultFilingCurrency 
				CalculateTax.CurrencyRate					= BillingInvoice.CurrencyRate		
			    CalculateTax.TransactionCurrency 			= BillingInvoice.Currency						 
				CalculateTax.BaseCurrency 					= Company.Currency
				CalculateTax.ProductTaxCategory				= ProductTaxCategory
				if (BillingInvoice.BillingInvoiceType.Credit)
					CalculateTax.DocumentType				= "CreditMemo"
				else
					CalculateTax.DocumentType				= "Invoice"
				CalculateTax.UnitCost 						= TaxableAmount.TransactionAmount
				if (BillingInvoice.CustomerShipTo entered)
					CalculateTax.PostalAddress				= BillingInvoice.CustomerShipTo.ShipToAddress
				else
				if (BillingInvoice.Customer entered)
					CalculateTax.PostalAddress				= BillingInvoice.Customer.PostalAddress
				else
				if (BillingInvoice.BillTo entered)
					CalculateTax.PostalAddress				= BillingInvoice.BillTo.PostalAddress
				CalculateTax.Location						= BillingInvoice.Location
				if  (BillingInvoice.IsHSNSACCodeEnabled)
					CalculateTax.CommodityCodeType      	= "HSN"
					CalculateTax.HSNSACCode 				= Miscellaneous.HSNSACCode
				else
					CalculateTax.CommodityCodeType      	= "UNSPSC"
					CalculateTax.UNSPSCCode 				= Miscellaneous.UNSPSCCode.UNSPSCCodeDisplay
				include LoadVertexDebugOptions
				
		LoadVertexDebugOptions
			if (TaxEntityUsesVertex)					
				if (VertexConfigRel.DebugMode)				
					LocalJurisdictionLookupKey				= DefaultLookupKey	
					CalculateTax.AppendToJurisFile			= true					
					CalculateTax.JurisdictionResultsKey		= LocalJurisdictionLookupKey				 
					CalculateTax.RelatedObjectReference     = reference to this instance	
				else
				if (JurisdictionResultsRel exist)
					invoke Delete JurisdictionResultsRel
		
		VertexFlexibleFields
			if (TaxEntityUsesVertex)
				if (TaxAttributesRel.VertexFlexibleFieldExist)
					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 			= each.VertexFlexibleCode.FieldId
							CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 		= each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 			= TaxEntityRel.TaxEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 			= Company
							else    
							if (each.ExternalValue.ValueIs.Description)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 			= Miscellaneous.Description
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 			= SalesAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								if (BillingInvoiceLine.Location entered)
									CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= BillingInvoiceLine.Location
								else
									if (BillingInvoice.Location entered)
										CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 	= BillingInvoice.Location
							else    
							if (each.ExternalValue.ValueIs.Currency)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.Currency
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = AllocatedDiscount
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = TaxableAmount.TransactionAmount
							else    
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = BillingInvoice.InvoiceDate
							else    
							if (each.ExternalValue.ValueIs.ContractType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.WorkType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.ServiceType
							else    
							if (each.ExternalValue.ValueIs.AccountSubType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.GeneralLedgerChartAccount.AccountSubType
							else    
							if (each.ExternalValue.ValueIs.UsageType)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Project)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.Project
							else    
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = ProductTaxCategory
							else    
							if (each.ExternalValue.ValueIs.UNSPSC)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = Miscellaneous.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension1
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = SalesAccount.FinanceDimension10
							else    
								CalculateTax.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code = each.Code  

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId 				= each.VertexFlexibleNumeric.FieldId 
							CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue 		= each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 		= TaxEntityRel.TaxEntity
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 		= SalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Company)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 		= Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 		= SalesAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 		= AllocatedDiscount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals 	= 3
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue		= TaxableAmount.TransactionAmount
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals 	= 8
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue		= SalesAccount.ToAccountingEntity
							else    
								CalculateTax.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 		= each.NumericValue  

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId 			= each.VertexFlexibleDate.FieldId 
							CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue 		= each.ExternalValue     
							if (each.ExternalValue.ValueIs.PaymentDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= BillingInvoice.GeneralLedgerDate
							else
							if (each.ExternalValue.ValueIs.PostingDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= BillingInvoice.InvoiceDate
							else    
								CalculateTax.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= each.DateValue

		ProcessTaxHistoryVertexFlexibleFields
			if (TaxEntityUsesVertex)
				if (TaxAttributesRel.VertexFlexibleFieldExist)
					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
						if (each.Code entered            
						or  each.ExternalValue entered)
							Idx +=1   
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].FieldId 		= each.VertexFlexibleCode.FieldId
							ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].ExternalValue 	= each.ExternalValue     
							if (each.ExternalValue.ValueIs.TaxEntity)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code		= TaxEntityRel.TaxEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code		= Company
							else    
							if (each.ExternalValue.ValueIs.Customer)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code		= BillingInvoice.Customer
							else
							if (each.ExternalValue.ValueIs.Description)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code		= Miscellaneous.Description
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code		= SalesAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= BillingInvoice.Location
							else    
							if (each.ExternalValue.ValueIs.Currency)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= BillingInvoice.Currency
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= AllocatedDiscount
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= TaxableAmount.TransactionAmount
							else    
							if (each.ExternalValue.ValueIs.PostingDate)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.PaymentDate)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= BillingInvoice.InvoiceDate
							else    
							if (each.ExternalValue.ValueIs.ContractType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.Project.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.Project.WorkType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.Project.ServiceType
							else    
							if (each.ExternalValue.ValueIs.UsageType)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.Project.UsageType
							else    
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= ProductTaxCategory
							else 
							if (each.ExternalValue.ValueIs.UNSPSC)
							 	ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code		= Miscellaneous.UNSPSCCode.UNSPSCCodeDisplay
							else 
							if (each.ExternalValue.ValueIs.AccountingUnit)
							 	ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code		= SalesAccount.AccountingUnit
							else 
							if (each.ExternalValue.ValueIs.Project)
							 	ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.Project
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.ToAccountingEntity
							else
							if (each.ExternalValue.ValueIs.FinanceDimension1)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.FinanceDimension1
							else
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= SalesAccount.FinanceDimension10
							else    
								ProcessTaxHistory.VertexAttributes.VertexCodes.FlexibleCode[Idx].Code 		= each.Code  

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
						if (each.NumericValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].FieldId 				= each.VertexFlexibleNumeric.FieldId 
							ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].ExternalValue 		= each.ExternalValue     
							if (each.ExternalValue.ValueIs.Company)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 	= Company
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 	= SalesAccount.GeneralLedgerChartAccount
							else
							if (each.ExternalValue.ValueIs.TaxEntity)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 	= TaxEntityRel.TaxEntity
							else    
							if (each.ExternalValue.ValueIs.AccountingUnit)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 	= SalesAccount.AccountingUnit
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 	= AllocatedDiscount
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 	= TaxableAmount.TransactionAmount
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumberOfDecimals = 3
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 	= SalesAccount.ToAccountingEntity
							else    
								ProcessTaxHistory.VertexAttributes.VertexNumerics.FlexibleNumeric[Idx].NumericValue 	= each.NumericValue  

					Idx = 0
					for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
						if (each.DateValue entered            
						or  each.ExternalValue entered)
							Idx +=1   
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].FieldId 			= each.VertexFlexibleDate.FieldId 
							ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].ExternalValue 		= each.ExternalValue     
							if (each.ExternalValue.ValueIs.PostingDate)
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.PaymentDate)
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= BillingInvoice.InvoiceDate
							else    
								ProcessTaxHistory.VertexAttributes.VertexDates.FlexibleDate[Idx].DateValue 		= each.DateValue

		LoadOneSourceInputFields
			if (TaxEntityRel.ThirdParty.Sabrix)
				CalculateTax.CallingModule				= "Billing_Invoice"
				CalculateTax.InFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				CalculateTax.TaxEntity					= Company.AccountingEntity
				CalculateTax.InvoiceCompany				= Company
				CalculateTax.ProcessLevel				= BillingInvoice.BillingProcessLevel
				CalculateTax.Invoice					= BillingInvoice.DerivedInvoice
				CalculateTax.Suffix						= BillingInvoice.InvoicePrefix
				CalculateTax.InvoiceAmount				= TaxableAmount.TransactionAmount
				CalculateTax.TaxCode					= TaxCode
				CalculateTax.PostalAddress				= BillingInvoice.CustomerShipTo.ShipToAddress
				CalculateTax.BypassEditing				= true
				CalculateTax.Description				= Miscellaneous.Description
				CalculateTax.UniqueLineNumber			= UniqueID
				CalculateTax.ItemNumber					= Miscellaneous
				CalculateTax.Customer					= BillingInvoice.Customer
				CalculateTax.VendorCustomerName			= BillingInvoice.Customer.Name
				CalculateTax.PointOfTitleTransfer		= BillingInvoice.PointOfTitleTransfer
				CalculateTax.DeliveryTerms				= BillingInvoice.ShipTerm
				if (BillingInvoice.BillingInvoiceType.Credit)
					CalculateTax.InvoicedOrCreditMemo	= "C"
				else
					CalculateTax.InvoicedOrCreditMemo	= "I"	
		
		CreateTaxLineItemAndUserFields
			if ((TaxEntityRel.ThirdParty.Sabrix
			or   SingleCallToVertex)
			and TaxLineItemAOCRel not exists)
				invoke Create TaxLineItem
					assign result to TaxLineItemView
					invoked.FinanceEnterpriseGroup		= Company.FinanceEnterpriseGroup
					invoked.InvoiceNumber				= BillingInvoice.InvoiceNumber
					invoked.InvoiceDate					= BillingInvoice.InvoiceDate
					invoked.TaxEntity					= Company.AccountingEntity
					invoked.RelatedObjectReference		= reference to BillingInvoiceAddOnCharge
					invoked.RelatedLineItemUniqueId		= UniqueID
					if (SingleCallToOneSource
					or  SingleCallToVertex)
						LocalLineItemNumber 			= (last TaxLineItemsRel.LineItemNumber + 1)
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= BillingInvoice.UniqueID
					else
						LocalLineItemNumber 			= 1
						invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
					invoked.LineItemNumber				= LocalLineItemNumber
					invoked.LineItemId					= Miscellaneous
					invoked.InvoiceAmount				= TaxableAmount.TransactionAmount
					invoked.TaxableAmount				= TaxableAmount.TransactionAmount
					invoked.ShipToTaxCode				= TaxCode
					invoked.ShipToTaxCodeDescription	= TaxCode.Description
					invoked.ShipToAddress				= BillingInvoice.CustomerShipTo.ShipToAddress
					invoked.Description					= DerivedAddOnChargesDesc
					if  (BillingInvoice.IsHSNSACCodeEnabled)
						invoked.CommodityCodeType      		= "HSN"
						invoked.CommodityCode 				= Miscellaneous.HSNSACCode
					else
						invoked.CommodityCodeType      		= "UNSPSC"
						invoked.CommodityCode 				= Miscellaneous.UNSPSCCode.UNSPSCCodeDisplay

					if (TaxEntityUsesVertex)
						invoked.ProductTaxCategory			= ProductTaxCategory
						invoked.Quantity					= 1
						invoked.UnitPrice					= TaxableAmount.TransactionAmount

				initialize AttributeCounter
				if (TaxEntityRel.ThirdParty.Sabrix
				and TaxAttributesRel exists)
					invoke Create TaxLineItemUserFields
						for each TaxAttributesRel.OneSourceTaxAttributeByNumberRel
							invoked.FinanceEnterpriseGroup					= Company.FinanceEnterpriseGroup
							if (SingleCallToOneSource)
								invoked.TaxLineItem.UniqueIdOfRelatedObject	= BillingInvoice.UniqueID
							else
								invoked.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID
							invoked.TaxLineItem.Sequence					= TaxLineItemView.TaxLineItem.Sequence

							if (each.LoadDynamicField.ValueIs.TaxEntity)
								if (TaxEntityRel exists)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= TaxEntityRel.TaxEntity
							else		
							if (each.LoadDynamicField.ValueIs.Company)	
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Company
							else
							if (each.LoadDynamicField.ValueIs.Description)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= DerivedAddOnChargesDesc
							else
							if (each.LoadDynamicField.ValueIs.Customer)
								if (BillingInvoice.Customer entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.Customer
							else
							if (each.LoadDynamicField.ValueIs.PostingDate)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.InvoiceDate
							else
							if (each.LoadDynamicField.ValueIs.TaxDate)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.InvoiceDate
							else
							if (each.LoadDynamicField.ValueIs.GLAccount)
								if (SalesAccount.GeneralLedgerChartAccount entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.GeneralLedgerChartAccount
							else
							if (each.LoadDynamicField.ValueIs.Location)
								if (BillingInvoice.Location entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.Location
							else
							if (each.LoadDynamicField.ValueIs.Currency)
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.Currency
							else
							if (each.LoadDynamicField.ValueIs.DiscountAmount)
								if (OrderDiscount entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= OrderDiscount
							else
							if (each.LoadDynamicField.ValueIs.UnitCost)
								if (UnitCost entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= UnitCost
							else
							if (each.LoadDynamicField.ValueIs.ContractType)
								if (SalesAccount.Project.ContractType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.Project.ContractType
							else
							if (each.LoadDynamicField.ValueIs.WorkType)
								if (SalesAccount.Project.WorkType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.Project.WorkType
							else
							if (each.LoadDynamicField.ValueIs.AccountSubType)
								if (SalesAccount.GeneralLedgerChartAccount.AccountSubType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.GeneralLedgerChartAccount.AccountSubType
							else
							if (each.LoadDynamicField.ValueIs.ServiceType)
								if (SalesAccount.Project.ServiceType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.Project.ServiceType
							else
							if (each.LoadDynamicField.ValueIs.UsageType)
								if (SalesAccount.Project.UsageType entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.Project.UsageType
							else
							if (each.LoadDynamicField.ValueIs.Project)
								if (SalesAccount.Project entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.Project
							else
							if (each.LoadDynamicField.ValueIs.ProductTaxCatagory)
								if (ProductTaxCategory entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= ProductTaxCategory
							else			
							if (each.LoadDynamicField.ValueIs.UNSPSC)
								if (Miscellaneous.UNSPSCCode entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= Miscellaneous.UNSPSCCode.UNSPSCCodeDisplay
							else			
							if (each.LoadDynamicField.ValueIs.ShipToName)
								if (BillingInvoice.CustomerShipTo.Name entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= BillingInvoice.CustomerShipTo.Name
							else
							if (each.LoadDynamicField.ValueIs.ToAccountingEntity)
								if (SalesAccount.ToAccountingEntity entered)
									AttributeCounter +=1
									invoked.UserElementGroup.UserElement[AttributeCounter].Number		= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name			= each.UserAttributeName
									invoked.UserElementGroup.UserElement[AttributeCounter].Value		= SalesAccount.ToAccountingEntity
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension1)						
								if (SalesAccount.FinanceDimension1 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension1
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension2)						
								if (SalesAccount.FinanceDimension2 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension2
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension3)						
								if (SalesAccount.FinanceDimension3 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension3
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension4)						
								if (SalesAccount.FinanceDimension4 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension4
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension5)						
								if (SalesAccount.FinanceDimension5 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension5
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension6)						
								if (SalesAccount.FinanceDimension6 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension6
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension7)						
								if (SalesAccount.FinanceDimension7 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension7
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension8)						
								if (SalesAccount.FinanceDimension8 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension8
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension9)						
								if (SalesAccount.FinanceDimension9 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension9
							else			
							if (each.LoadDynamicField.ValueIs.FinanceDimension10)						
								if (SalesAccount.FinanceDimension10 entered)
									AttributeCounter +=1	
									invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
									invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
									invoked.UserElementGroup.UserElement[AttributeCounter].Value	= SalesAccount.FinanceDimension10
							else	
								AttributeCounter +=1	
								invoked.UserElementGroup.UserElement[AttributeCounter].Number	= AttributeCounter
								invoked.UserElementGroup.UserElement[AttributeCounter].Name		= each.UserAttributeName					
								invoked.UserElementGroup.UserElement[AttributeCounter].Value	= each.Value					
				else
				if (TaxEntityUsesVertex
				and TaxAttributesRel.VertexFlexibleFieldExist)
					Idx = 0
					invoke Create TaxLineItemUserFields
						invoked.FinanceEnterpriseGroup						= Company.FinanceEnterpriseGroup
						if (SingleCallToVertex)
							invoked.TaxLineItem.UniqueIdOfRelatedObject		= BillingInvoice.UniqueID
						else
							invoked.TaxLineItem.UniqueIdOfRelatedObject		= UniqueID
						invoked.TaxLineItem.Sequence 						= TaxLineItemView.TaxLineItem.Sequence
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleCodeRel
							if (each.Code entered
							or  each.ExternalValue entered)
								Idx +=1
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].FieldId 			= each.VertexFlexibleCode.FieldId
							if (each.ExternalValue.ValueIs.TaxEntity)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= TaxEntityRel.TaxEntity
							else    
							if (each.ExternalValue.ValueIs.Company)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= Company
							else    
							if (each.ExternalValue.ValueIs.Description)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= Miscellaneous.Description
							else    
							if (each.ExternalValue.ValueIs.GLAccount)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 			= SalesAccount.GeneralLedgerChartAccount
							else    
							if (each.ExternalValue.ValueIs.Location)
								if (BillingInvoiceLine.Location entered)
									invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 		= BillingInvoiceLine.Location
								else
									if (BillingInvoice.Location entered)
										invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code 	= BillingInvoice.Location
							else    
							if (each.ExternalValue.ValueIs.Currency)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = BillingInvoice.Currency
							else    
							if (each.ExternalValue.ValueIs.DiscountAmount)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = AllocatedDiscount
							else    
							if (each.ExternalValue.ValueIs.UnitCost)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = TaxableAmount.TransactionAmount
							else    
							if (each.ExternalValue.ValueIs.PaymentDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.PostingDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = BillingInvoice.GeneralLedgerDate
							else    
							if (each.ExternalValue.ValueIs.TaxDate)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = BillingInvoice.InvoiceDate
							else    
							if (each.ExternalValue.ValueIs.ContractType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.Project.ContractType
							else    
							if (each.ExternalValue.ValueIs.WorkType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.Project.WorkType
							else    
							if (each.ExternalValue.ValueIs.ServiceType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.Project.ServiceType
							else    
							if (each.ExternalValue.ValueIs.AccountSubType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.GeneralLedgerChartAccount.AccountSubType
							else    
							if (each.ExternalValue.ValueIs.UsageType)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.Project.UsageType
							else
							if (each.ExternalValue.ValueIs.AccountingUnit)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.AccountingUnit
							else
							if (each.ExternalValue.ValueIs.Project)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.Project
							else    
							if (each.ExternalValue.ValueIs.ProductTaxCatagory)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = ProductTaxCategory
							else 
							if (each.ExternalValue.ValueIs.UNSPSC)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = Miscellaneous.UNSPSCCode.UNSPSCCodeDisplay
							else
							if (each.ExternalValue.ValueIs.ToAccountingEntity)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.ToAccountingEntity
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension2)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.FinanceDimension2
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension3)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.FinanceDimension3
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension4)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.FinanceDimension4
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension5)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.FinanceDimension5
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension6)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.FinanceDimension6
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension7)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.FinanceDimension7
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension8)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.FinanceDimension8
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension9)
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.FinanceDimension9
							else    
							if (each.ExternalValue.ValueIs.FinanceDimension10) 
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = SalesAccount.FinanceDimension10
							else    
								invoked.FlexibleFields.FlexibleCodes.FlexibleCodeField[Idx].Code = each.Code  

						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleNumericRel
							if (each.NumericValue entered            
							or  each.ExternalValue entered)
								Idx +=1   
								invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].FieldId 				= each.VertexFlexibleNumeric.FieldId 
								if (each.ExternalValue.ValueIs.TaxEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= TaxEntityRel.TaxEntity
								else    
								if (each.ExternalValue.ValueIs.AccountingUnit)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= SalesAccount.AccountingUnit
								else
								if (each.ExternalValue.ValueIs.Company)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= Company
								else    
								if (each.ExternalValue.ValueIs.GLAccount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= SalesAccount.GeneralLedgerChartAccount
								else    
								if (each.ExternalValue.ValueIs.DiscountAmount)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= AllocatedDiscount
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals 	= 3
								else    
								if (each.ExternalValue.ValueIs.UnitCost)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue		= TaxableAmount.TransactionAmount
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumberOfDecimals 	= 8
								else
								if (each.ExternalValue.ValueIs.ToAccountingEntity)
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue		= SalesAccount.ToAccountingEntity
								else    
									invoked.FlexibleFields.FlexibleNumbers.FlexibleNumericField[Idx].NumericValue 		= each.NumericValue  

						Idx = 0
						for each TaxAttributesRel.VertexFlexibleFieldsRel.VertexFlexibleDateRel
							if (each.DateValue entered            
							or  each.ExternalValue entered)
								Idx +=1   
								invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].FieldId 			= each.VertexFlexibleDate.FieldId 
								if (each.ExternalValue.ValueIs.PaymentDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= BillingInvoice.GeneralLedgerDate
								else
								if (each.ExternalValue.ValueIs.PostingDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= BillingInvoice.GeneralLedgerDate
								else    
								if (each.ExternalValue.ValueIs.TaxDate)
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= BillingInvoice.InvoiceDate
								else    
									invoked.FlexibleFields.FlexibleDates.FlexibleDateField[Idx].DateValue 		= each.DateValue


		CalculateTaxCommonInputParams
			initialize CalculateTax
			CalculateTax.TaxEntity					= Company.AccountingEntity
			CalculateTax.ProcessLevel				= BillingInvoice.BillingProcessLevel
			CalculateTax.Customer					= BillingInvoice.Customer
			CalculateTax.TaxCode					= TaxCode
			CalculateTax.ShipmentDate				= BillingInvoice.ShipDate
			CalculateTax.GeneralLedgerDate			= BillingInvoice.GeneralLedgerDate
			CalculateTax.InvoiceDate				= BillingInvoice.InvoiceDate
			CalculateTax.Function					= CalculateTax.Function.CalculateTax
			CalculateTax.ThirdPartyFunction			= CalculateTax.ThirdPartyFunction.Calculate
			CalculateTax.FromPostalAddress			= BillingInvoice.Location.PostalAddress
			if (BillingInvoice.TaxPointDate entered)
				CalculateTax.TaxPointDate			= BillingInvoice.TaxPointDate	
			else
				CalculateTax.TaxDate                = BillingInvoice.InvoiceDate		
			CalculateTax.System						= "BL"

		UpdateBillingInvoice
			if (EnteredUnitPrice changed
			or  EnteredPrice changed
			or  PricePercent changed
			or  CostPercent	changed
			or  Cost		changed
			or  UnitCost changed
			or  TaxExemptCode.Exempt
			or 	TaxExemptCode.Taxable)
				
				if (action type.Create)
					
					if (BillingCurrencyAddOnChargeAmount entered)
						LocalBillingCurrencyAddOnChargeAmount	= BillingCurrencyAddOnChargeAmount 
					else
						initialize LocalBillingCurrencyAddOnChargeAmount
					if (BaseCurrencyAddOnChargeAmount entered)
						LocalBaseCurrencyAddOnChargeAmount		= BaseCurrencyAddOnChargeAmount 
					else
						initialize LocalBaseCurrencyAddOnChargeAmount
				else
					
					if (BillingCurrencyAddOnChargeAmount changed)
						LocalBillingCurrencyAddOnChargeAmount	= BillingCurrencyAddOnChargeAmount - old  BillingCurrencyAddOnChargeAmount
					else
						initialize LocalBillingCurrencyAddOnChargeAmount
					if (BaseCurrencyAddOnChargeAmount changed)
						LocalBaseCurrencyAddOnChargeAmount		= BaseCurrencyAddOnChargeAmount - old BaseCurrencyAddOnChargeAmount
					else
						initialize LocalBaseCurrencyAddOnChargeAmount

				invoke AddOnChargesAmount BillingInvoice 
					if (TaxExemptCode.Exempt)
						if (IsCreditMemo)
							TaxableAmount.TransactionAmount		= old TaxableAmount.TransactionAmount
						else
							TaxableAmount.TransactionAmount		= old TaxableAmount.TransactionAmount * -1
						LocalTaxableAmountTransactionAmount = TaxableAmount.TransactionAmount  
						TaxableAmount.TransactionAmount		= 0
						invoked.PrmTaxableTotal				= LocalTaxableAmountTransactionAmount
						invoked.PrmTaxable					= true
					else
						LocalTaxableAmountTransactionAmount = TaxableAmount.TransactionAmount
						invoked.PrmTaxableTotal				= LocalTaxableAmountTransactionAmount
				    if (LocalTaxableAmountTransactionAmount entered)
				    	invoked.PrmTaxable					= true


				    invoked.PrmTotalAddOnAmount			= LocalBillingCurrencyAddOnChargeAmount
				    invoked.PrmTotalAddOnBaseAmount		= LocalBaseCurrencyAddOnChargeAmount
					invoked.PrmTrackTypeTotal			= LocalBillingCurrencyAddOnChargeAmount
					invoked.PrmTrackType				= TrackType
					if (OrderDiscount)
						if (OrderDiscount changed)
							invoked.PrmDiscountable			= BillingCurrencyAddOnChargeAmount
						else
						if (BillingCurrencyAddOnChargeAmount changed)
							invoked.PrmDiscountable 		= LocalBillingCurrencyAddOnChargeAmount
					else
					if (OrderDiscount changed)
						if (BillingCurrencyAddOnChargeAmount changed)
							invoked.PrmDiscountable		= old BillingCurrencyAddOnChargeAmount * -1
						else
							invoked.PrmDiscountable		= BillingCurrencyAddOnChargeAmount * -1
		
		DeleteAddonChargeAmounts
			invoke AddOnChargesAmount BillingInvoice
				invoked.PrmAddonChargeDelete                = true
				invoked.PrmTaxableTotal						= TaxableAmount.TransactionAmount	* -1	
			    if (TaxableAmount.TransactionAmount entered)
					invoked.PrmTaxable					= true
			    invoked.PrmTotalAddOnAmount					= BillingCurrencyAddOnChargeAmount * -1
			    invoked.PrmTotalAddOnBaseAmount				= BaseCurrencyAddOnChargeAmount * -1 
				invoked.PrmTrackType						= TrackType
				invoked.PrmTrackTypeTotal					= BillingCurrencyAddOnChargeAmount * -1
				if (OrderDiscount)
					invoked.PrmDiscountable					= BillingCurrencyAddOnChargeAmount * -1
	
		GetBaseAmounts
			EnteredUnitPrice.BaseAmount.ToCurrency 					= TransientCurrency
			EnteredUnitPrice.BaseAmount.EnteredCurrencyRate			= BillingInvoice.CurrencyRate	
			EnteredUnitPrice.BaseAmount.EnteredCurrencyUnitCost 	= EnteredUnitPrice.BaseAmount.OutputCurrencyUnitCost
	
			TaxableAmount.BaseAmount.ToCurrency						= TransientCurrency
			TaxableAmount.BaseAmount.EnteredCurrencyRate			= BillingInvoice.CurrencyRate	
			TaxableAmount.BaseAmount.EnteredCurrencyAmount			= TaxableAmount.BaseAmount.OutputCurrencyAmount
	
			EnteredPrice.BaseAmount.ToCurrency 						= TransientCurrency
			EnteredPrice.BaseAmount.EnteredCurrencyRate				= BillingInvoice.CurrencyRate	
			EnteredPrice.BaseAmount.EnteredCurrencyAmount			= EnteredPrice.BaseAmount.OutputCurrencyAmount
	
			CurrencyExchangeGroup.BaseAmount.ToCurrency				= TransientCurrency
			CurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= BillingInvoice.CurrencyRate
			CurrencyExchangeGroup.TransactionAmount					= BillingCurrencyAddOnChargeAmount
	
			BaseCurrencyAddOnChargeAmount						 	= CurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount		
	
			
		CalculateAddOnChargeForBillingInvoice
			initialize BillingCurrencyAddOnChargeAmount
			initialize BaseCurrencyAddOnChargeAmount
			if (ChargeType.FlatAmount)
				BillingCurrencyAddOnChargeAmount 			= EnteredPrice.TransactionAmount
				LocalBillingCurrencyAddOnChargeAmount 		= EnteredPrice.TransactionAmount
			else
			if (ChargeType.Percentage)
				BillingCurrencyAddOnChargeAmount 			= ((BillingInvoice.TotalInventoryGoodsAmount + BillingInvoice.TotalNoninventoryGoodsAmount) * PricePercent)
				LocalBillingCurrencyAddOnChargeAmount 		= ((BillingInvoice.TotalInventoryGoodsAmount + BillingInvoice.TotalNoninventoryGoodsAmount) * PricePercent)
				
		CalculateAddOnChargeForBillingInvoiceLine
			initialize BillingCurrencyAddOnChargeAmount
			initialize BaseCurrencyAddOnChargeAmount
			if (ChargeType.FlatAmount)
				BillingCurrencyAddOnChargeAmount			= EnteredPrice.TransactionAmount
				LocalBillingCurrencyAddOnChargeAmount 		= EnteredPrice.TransactionAmount
			else				
			if (ChargeType.Percentage)
				BillingCurrencyAddOnChargeAmount			= BillingInvoiceLine.LineNetAmount.TransactionAmount * PricePercent			
				LocalBillingCurrencyAddOnChargeAmount 		=  BillingInvoiceLine.LineNetAmount.TransactionAmount * PricePercent
				if (IsCreditMemo and LocalRestockChargeFromReturn)
					BillingCurrencyAddOnChargeAmount		= BillingCurrencyAddOnChargeAmount * -1
					LocalBillingCurrencyAddOnChargeAmount	= LocalBillingCurrencyAddOnChargeAmount * -1
			else	
			if (ChargeType.UnitPrice)
				BillingCurrencyAddOnChargeAmount 			= ((BillingInvoiceLine.Quantity * BillingInvoiceLine.SellToStock)* EnteredUnitPrice.TransactionAmount)
				LocalBillingCurrencyAddOnChargeAmount 		= ((BillingInvoiceLine.Quantity * BillingInvoiceLine.SellToStock)* EnteredUnitPrice.TransactionAmount)
				if (IsCreditMemo and not LocalRestockChargeFromReturn)
					BillingCurrencyAddOnChargeAmount		= BillingCurrencyAddOnChargeAmount * -1
					LocalBillingCurrencyAddOnChargeAmount	= LocalBillingCurrencyAddOnChargeAmount * -1
		
		CalculateAddonChargeTax
			if (OrderDiscount 
			and (BillingInvoice.EnteredDiscount.TransactionAmount entered 
			or   BillingInvoice.OrderDiscount.TransactionAmount entered))
				AllocatedDiscount = (BillingInvoice.OrderDiscount.TransactionAmount + BillingInvoice.EnteredDiscount.TransactionAmount)
				if (BillingInvoice.Discountable != 0)
					AllocatedDiscount = AllocatedDiscount * (LocalBillingCurrencyAddOnChargeAmount/BillingInvoice.Discountable)
				AllocatedDiscount += LocalExcessDiscount
			
			if (TaxExemptCode.Taxable)
				TaxableAmount.TransactionAmount	= LocalBillingCurrencyAddOnChargeAmount - AllocatedDiscount
				
				if (BillingInvoice.IsSourceShipmentOrManual
				and BillingInvoice.TermsCode entered
				and (BillingInvoice.IsCompanyInvoiceOptionAndTermsAddOnCharge or BillingInvoice.IsProcessLevelInvoiceOptionAndTermsAddOnCharge)
				and IsTaxAfterTerms)
					TermsCode											= BillingInvoice.TermsCode
					if (TaxableAmount.TransactionAmount entered)
						CalculateTerms.TransactionDate 		= BillingInvoice.InvoiceDate
						CalculateTerms.TransactionAmount 	= TaxableAmount.TransactionAmount
					LocalTermsCalTrigger 							= CalculateTerms.TermsCalTrigger
					constraint (CalculateTerms.OutputErrorNumber not entered)
						"<CalculateTerms.OutputErrorMessage>"
					if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount entered)
						TaxableAmount.TransactionAmount -= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount			
					
				if (TaxableAmount.TransactionAmount entered
				and DoTaxCalculation)	
					include CalculateTaxCommonInputParams
					CalculateTax.InvoiceCompany			= Company
					CalculateTax.TaxableAmount			= TaxableAmount.TransactionAmount	
					CalculateTax.NumberOfDecimals		= BillingInvoice.CurrencyNumberOfDecimals
					CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
					CalculateTax.ProductIsExempt		= TaxExemptCode
					if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate  entered)
						CalculateTax.PaymentDate		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DueDate
					else
						CalculateTax.PaymentDate			= BillingInvoice.InvoiceDate	

					include LoadVertexGlobalInputFields 
					include LoadOneSourceInputFields

					if (not SingleCallToOneSource
					and not SingleCallToVertex
					and not (ChargeType.FlatAmount 
					and LocalRecalculateAOC))	
						include VertexFlexibleFields
						include CreateTaxLineItemAndUserFields
						CalculateTax.UniqueIdOfRelatedObject	= UniqueID
						LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
		
						constraint (CalculateTax.OutputErrorNumber not entered) 
							"<CalculateTax.OutputErrorMessage>" 								
						TaxableCurrencyAmount 				= CalculateTax.OutputTotalTaxAmount
					
						if (TransientCurrency != TransientFromCurrency)
							CurrencyExchangeGroup.BaseAmount.ToCurrency				= TransientCurrency
							CurrencyExchangeGroup.BaseAmount.EnteredCurrencyRate 	= BillingInvoice.CurrencyRate
							CurrencyExchangeGroup.TransactionAmount					= TaxableCurrencyAmount
							
							TaxableBaseCurrencyAmount = CurrencyExchangeGroup.BaseAmount.OutputCurrencyAmount
						else
							TaxableBaseCurrencyAmount = TaxableCurrencyAmount
						
						round TaxableCurrencyAmount to nearest BillingInvoice.DerivedRoundToDecimals					
			else
				initialize TaxableAmount.TransactionAmount
				initialize TaxableCurrencyAmount
				initialize TaxableBaseCurrencyAmount

		CreateBillingInvoiceLineTaxByTaxCodeAndProdTaxCat
			if (action type.Create)
				LocalTaxCode 				= TaxCode
				LocalProductTaxCategory 	= ProductTaxCategory
				if (InvoiceLineTaxByTaxCodeRel exists)
					LocalAOCTaxableAmount	= TaxableAmount.TransactionAmount + InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount
					LocalCreateBillingInvoiceLineTax = false
					include CalculateSalesTax
					invoke Update InvoiceLineTaxByTaxCodeRel
						invoked.TransactionTaxable.TransactionAmount 			= LocalAOCTaxableAmount
						invoked.TransactionTaxable.BaseAmount.ToCurrency 		= Company.Currency
						invoked.TaxableCurrencyAmount.TransactionAmount 		= LocalSalesTax
						invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
						invoked.LocalFromCurrency								= BillingInvoice.Currency
				else
					if (LocalTaxCode entered)
						LocalAOCTaxableAmount	= TaxableAmount.TransactionAmount
						LocalCreateBillingInvoiceLineTax = true
						include CalculateSalesTax
			else
			if (action type.Update)
				LocalProductTaxCategory 			= ProductTaxCategory
				if (TaxExemptCode changed)
					LocalTaxableAmountChangeAccounted = true
					if (TaxExemptCode.Exempt)
						LocalTaxCode 					= old TaxCode
						LocalAOCTaxableAmount			= old TaxableAmount.TransactionAmount
						LocalSubtractTaxableAmount		= true
					else
						LocalTaxCode 					= TaxCode
						LocalAOCTaxableAmount			= TaxableAmount.TransactionAmount
				else
				if (TaxCode changed
				and TaxExemptCode.Taxable)
					LocalTaxCodeChanged					= true
					LocalTaxableAmountChangeAccounted 	= true
					LocalTaxCode 						= old TaxCode
					LocalUpdatedTaxCode 				= TaxCode
				if (TaxableAmount.TransactionAmount changed
				and !LocalTaxableAmountChangeAccounted)
					if (TaxExemptCode.Taxable)
						LocalTaxCode 					= TaxCode
						LocalAOCTaxableAmount			= TaxableAmount.TransactionAmount - old TaxableAmount.TransactionAmount
				if (InvoiceLineTaxByTaxCodeRel exists)
					if  (BillingInvoiceLinesByTaxCodeRel not exists
					and BillingInvoiceAddOnChargeByTaxCodeRel not exists)
						LocalNoAOCsExist = true
						invoke Delete InvoiceLineTaxByTaxCodeRel

					if (LocalTaxCodeChanged)
						if (!LocalNoAOCsExist)
							if (TaxableAmount.TransactionAmount changed)
								LocalAOCTaxableAmount	= InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount - old TaxableAmount.TransactionAmount
							else
								LocalAOCTaxableAmount	= InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount - TaxableAmount.TransactionAmount
							include CalculateSalesTax
							invoke Update InvoiceLineTaxByTaxCodeRel
								invoked.TransactionTaxable.TransactionAmount 			= LocalAOCTaxableAmount
								invoked.TransactionTaxable.BaseAmount.ToCurrency 		= Company.Currency
								invoked.TaxableCurrencyAmount.TransactionAmount 		= LocalSalesTax
								invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
								invoked.LocalFromCurrency								= BillingInvoice.Currency
						if (InvoiceLineTaxByUpdatedTaxCodeRel exists)
							LocalTaxCode 						= LocalUpdatedTaxCode
							LocalAOCTaxableAmount				= InvoiceLineTaxByUpdatedTaxCodeRel.TransactionTaxable.TransactionAmount + TaxableAmount.TransactionAmount
							LocalCreateBillingInvoiceLineTax 	= false
							include CalculateSalesTax
							invoke Update InvoiceLineTaxByUpdatedTaxCodeRel
								invoked.TransactionTaxable.TransactionAmount 			= LocalAOCTaxableAmount
								invoked.TransactionTaxable.BaseAmount.ToCurrency 		= Company.Currency
								invoked.TaxableCurrencyAmount.TransactionAmount 		= LocalSalesTax
								invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
								invoked.LocalFromCurrency								= BillingInvoice.Currency
						else
							if (LocalUpdatedTaxCode entered)
								LocalTaxCode						= LocalUpdatedTaxCode
								LocalAOCTaxableAmount				= TaxableAmount.TransactionAmount
								LocalCreateBillingInvoiceLineTax 	= true
								include CalculateSalesTax
					else
						if (LocalSubtractTaxableAmount)
							LocalAOCTaxableAmount		= InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount - LocalAOCTaxableAmount
						else
							LocalAOCTaxableAmount		= InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount + LocalAOCTaxableAmount
						LocalCreateBillingInvoiceLineTax = false
						include CalculateSalesTax
						invoke Update InvoiceLineTaxByTaxCodeRel
							invoked.TransactionTaxable.TransactionAmount 			= LocalAOCTaxableAmount
							invoked.TransactionTaxable.BaseAmount.ToCurrency 		= Company.Currency
							invoked.TaxableCurrencyAmount.TransactionAmount 		= LocalSalesTax
							invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
							invoked.LocalFromCurrency								= BillingInvoice.Currency
				else
					if (LocalTaxCode entered)
						LocalAOCTaxableAmount	= TaxableAmount.TransactionAmount
						LocalCreateBillingInvoiceLineTax = true
						include CalculateSalesTax
			else
			if (action type.Delete)
				LocalTaxCode 			= TaxCode
				LocalProductTaxCategory = ProductTaxCategory
				if (InvoiceLineTaxByTaxCodeRel exists)
					if (instance count of BillingInvoiceAddOnChargeByTaxCodeRel = 1
					and BillingInvoiceLinesByTaxCodeRel not exists)
						invoke Delete InvoiceLineTaxByTaxCodeRel
					else
						LocalAOCTaxableAmount	= InvoiceLineTaxByTaxCodeRel.TransactionTaxable.TransactionAmount - TaxableAmount.TransactionAmount
						LocalCreateBillingInvoiceLineTax = false
						include CalculateSalesTax
						invoke Update InvoiceLineTaxByTaxCodeRel
							invoked.TransactionTaxable.TransactionAmount 			= LocalAOCTaxableAmount
							invoked.TransactionTaxable.BaseAmount.ToCurrency 		= Company.Currency
							invoked.TaxableCurrencyAmount.TransactionAmount 		= LocalSalesTax
							invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
							invoked.LocalFromCurrency								= BillingInvoice.Currency

			invoke UpdateTaxTotal BillingInvoice

		CalculateSalesTax
			initialize CalculateTax
			initialize LocalSalesTax
			CalculateTax.TaxEntity					= Company.AccountingEntity
			CalculateTax.ProcessLevel				= BillingInvoice.BillingProcessLevel
			CalculateTax.Customer					= BillingInvoice.Customer
			CalculateTax.Location					= BillingInvoice.Location
			if (BillingInvoice.TaxPointDate entered)
				CalculateTax.TaxDate				= BillingInvoice.TaxPointDate
			else
				CalculateTax.TaxDate                = BillingInvoice.InvoiceDate
			if (BillingInvoice.CustomerShipTo entered)
				CalculateTax.PostalAddress			= BillingInvoice.CustomerShipTo.ShipToAddress
			else
				if  (BillingInvoice.IsCustomerOrder
				and (BillingInvoice.IsSourceShipmentOrManual
				or  BillingInvoice.BillingInvoiceSource = "F"))
					CalculateTax.PostalAddress		= BillingInvoice.CustomerOrder.CustomerShipTo.ShipToAddress
				else
					CalculateTax.PostalAddress		= BillingInvoice.Customer.PostalAddress
			CalculateTax.Invoice					= BillingInvoice.DerivedInvoice
			CalculateTax.ShipmentDate				= BillingInvoice.ShipDate
			CalculateTax.InvoiceDate				= BillingInvoice.InvoiceDate
			CalculateTax.GeneralLedgerDate			= BillingInvoice.GeneralLedgerDate
			CalculateTax.TaxCode					= LocalTaxCode
			CalculateTax.ProductTaxCategory			= LocalProductTaxCategory
			CalculateTax.System						= "BL"
			CalculateTax.Function				    = "C"
			CalculateTax.ThirdPartyFunction			= "I"
			CalculateTax.TransactionType			= "S"
			CalculateTax.TaxableAmount		    	= LocalAOCTaxableAmount
			LocalCalculateTaxExecuted			    = CalculateTax.ExecuteCalculateTax
			for each CalculateTax.TaxTable.TaxTableOutput
				LocalSalesTax  	+= each.TaxAmount5DP
				if (each.TaxAmount5DP entered
				and LocalCreateBillingInvoiceLineTax)
					invoke Create BillingInvoiceLineTax
						invoked.Company											= Company
						invoked.BillingInvoice									= BillingInvoice
						invoked.ProductTaxCategory								= LocalProductTaxCategory
						if (each.TaxPoint = "P")
							invoked.TaxAccount									= each.TaxOutputDueAccount
						else
							invoked.TaxAccount									= each.TaxOutputAccount
						invoked.BillingInvoiceLineTax.TaxCode					= each.TaxCode
						invoked.TaxRate											= each.TaxRate
						invoked.TransactionTaxable.TransactionAmount			= each.TaxableAmount
						invoked.TransactionTaxable.BaseAmount.ToCurrency		= Company.Currency
						invoked.TaxableCurrencyAmount.TransactionAmount 		= each.TaxAmount5DP
						invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
						invoked.TaxID											= each.TaxID
						invoked.BillingInvoiceLineTax.TaxLevel					= each.TaxLevel
						invoked.LocalFromCurrency								= BillingInvoice.Currency

		CreateTaxJournal
			if (not LocalVertexTaxHistoryProcessed)
				initialize ProcessTaxHistory
				ProcessTaxHistory.UniqueIdOfRelatedObject 		= UniqueID
				ProcessTaxHistory.RelatedObjectReference    	= reference to this instance			
				ProcessTaxHistory.SystemCode					= "BL"
				ProcessTaxHistory.TransactionType				= "S"   
				ProcessTaxHistory.TransactionSource				= "O"	
				ProcessTaxHistory.InvoicedOrCreditMemo			= "I"			
				ProcessTaxHistory.InvoiceCompany            	= Company
				ProcessTaxHistory.TaxEntity						= Company.AccountingEntity	 
				ProcessTaxHistory.ProcessLevel					= BillingInvoice.BillingProcessLevel
				ProcessTaxHistory.Customer						= BillingInvoice.Customer
				ProcessTaxHistory.TaxID							= each.TaxID
				ProcessTaxHistory.Location						= BillingInvoice.Location
				ProcessTaxHistory.Invoice						= BillingInvoice.DerivedInvoice
				if (each.TaxPoint = "P")
					ProcessTaxHistory.TaxTransactionAccount		= each.TaxOutputDueAccount	
				else
					ProcessTaxHistory.TaxTransactionAccount		= each.TaxOutputAccount
				ProcessTaxHistory.AccruedOrInvoiced 			= each.AccrualFlag
				ProcessTaxHistory.VendorOrCustomerName			= BillingInvoice.CompanyCustomer.Customer.Name				
				ProcessTaxHistory.ProductTaxCategory			= ProductTaxCategory
				ProcessTaxHistory.LineNumber					= BillingInvoiceLine				
				ProcessTaxHistory.TaxCode						= each.TaxCode
				ProcessTaxHistory.TaxRate						= each.TaxRate
				if (TaxEntityRel.ThirdParty.Sabrix)
					ProcessTaxHistory.ToAddress					= BillingInvoice.CustomerShipTo.ShipToAddress
				else
					if (BillingInvoice.IsCustomerOrder)
						ProcessTaxHistory.ToAddress					= BillingInvoice.CustomerOrder.BillPostalAddress
					else
					if (BillingInvoice.IsBillToEnterd)
						ProcessTaxHistory.ToAddress 				= BillingInvoice.BillTo.PostalAddress
					else
						ProcessTaxHistory.ToAddress					= BillingInvoice.Customer.PostalAddress	
				ProcessTaxHistory.FromTaxCode					= BillingInvoice.Location.TaxCode
				ProcessTaxHistory.FromAddress					= BillingInvoice.Location.PostalAddress
				ProcessTaxHistory.POATaxCode					= BillingInvoice.BillingProcessLevel.TaxCode				
				ProcessTaxHistory.DeliveryTerms					= BillingInvoice.ShipTerm
				ProcessTaxHistory.PointOfTitleTransfer			= BillingInvoice.PointOfTitleTransfer


				ProcessTaxHistory.InvoiceDate					= BillingInvoice.InvoiceDate
				ProcessTaxHistory.TaxPointDate					= BillingInvoice.TaxPointDate	
				

				ProcessTaxHistory.TransactionTaxAmount			= each.TaxAmount
				ProcessTaxHistory.TransactionTaxableAmount		= TaxableAmount.TransactionAmount      
				ProcessTaxHistory.TransactionInvoiceAmount		= BillingInvoice.InvoiceTotal
				ProcessTaxHistory.TransactionNumberOfDecimals	= BillingInvoice.CurrencyNumberOfDecimals	

				if (TaxEntityUsesVertex)
					LocalVertexTaxHistoryProcessed				= true
					ProcessTaxHistory.UnitCost					= TaxableAmount.TransactionAmount
					if (BillingInvoice.BillingInvoiceType.Credit)
						ProcessTaxHistory.DocumentType			= "CreditMemo"
					else
						ProcessTaxHistory.DocumentType			= "Invoice"
					if (BillingInvoice.CustomerShipTo entered)
						ProcessTaxHistory.ToAddress				= BillingInvoice.CustomerShipTo.ShipToAddress
					else
					if (BillingInvoice.Customer entered)
						ProcessTaxHistory.ToAddress				= BillingInvoice.Customer.PostalAddress
					else
					if (BillingInvoice.BillTo entered)
						ProcessTaxHistory.ToAddress				= BillingInvoice.BillTo.PostalAddress

					include ProcessTaxHistoryVertexFlexibleFields

				if (IsOneSourceTax
				or TaxEntityUsesVertex)
					if  (BillingInvoice.IsHSNSACCodeEnabled)
						ProcessTaxHistory.CommodityCodeType     = "HSN"
						ProcessTaxHistory.HSNSACCode 			= Miscellaneous.HSNSACCode
					else
						ProcessTaxHistory.CommodityCodeType     = "UNSPSC"
						ProcessTaxHistory.UNSPSCCode 			= Miscellaneous.UNSPSCCode.UNSPSCCodeDisplay

				if (TaxEntityRel.ThirdParty.Sabrix)
                    include CreateTaxLineItemAndUserFields
					ProcessTaxHistory.OneSourceTaxAttribute50		= first TaxLineItemAOCRel.LineItemUserFieldsRel.UserElementGroup
					ProcessTaxHistory.UserElementLevel			    = "O"

					ProcessTaxHistory.Description					= DerivedAddOnChargesDesc
					ProcessTaxHistory.UniqueLineNumber				= UniqueID
					ProcessTaxHistory.ItemNumber					= Miscellaneous


				ProcessTaxHistory.VATRegistrationCountry      	= TaxEntityRel.VATRegistrationCountry 			 
				ProcessTaxHistory.VATRegistrationNumber		 	= TaxEntityRel.VATRegistrationNumber			 
				ProcessTaxHistory.FromVATRegistrationCountry   	= BillingInvoice.CompanyCustomer.VATRegistrationCountry	 
				ProcessTaxHistory.FromVATRegistrationNumber		= BillingInvoice.CompanyCustomer.VATRegistrationNumber
				ProcessTaxHistory.DefaultFilingCurrency 		= TaxEntityRel.DefaultFilingCurrency	
				ProcessTaxHistory.BaseCurrency 					= Company.Currency	
				ProcessTaxHistory.TransactionCurrency			= BillingInvoice.Currency
				ProcessTaxHistory.CurrencyRate					= BillingInvoice.CurrencyRate
				
				ProcessTaxHistory.HistoryType					= "N"
				LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed	
				constraint (ProcessTaxHistory.OutputErrorNumber not entered) 
					"<ProcessTaxHistory.OutputErrorMessage>"			

    Field Rules
		
        Miscellaneous
            required
			cannot be changed
				"CannotChangeBillingInvoiceAddOnChargeCode"	
			if (ChargeType.UnitPrice)
				constraint (BillingInvoiceLine  entered)
					"PerUnitChargesNotAllowedAtInvoiceLevel"	
	   
	    ChargeType
	    	default to Miscellaneous.ChargeType	
			
        OrderDiscount
            default to Miscellaneous.OrderDiscount
      
        TaxExemptCode
            default to Miscellaneous.TaxStatus
            default to TaxExemptCode.Taxable
           	
           	if (TaxExemptCode.Taxable)
           		if (BillingInvoice.TaxExemptCode.Exempt)
           			TaxExemptCode = BillingInvoice.TaxExemptCode

		TaxCode	
			default to Miscellaneous.TaxCode  
			if (BillingInvoiceLine entered
	        and BillingInvoiceLine.TaxCode entered)
	           	default to BillingInvoiceLine.TaxCode
	           
	       	else
	          	default to BillingInvoice.TaxCode	
	        
	       	if (TaxExemptCode.Exempt)
	        	initialize TaxCode
	        
	       	if (TaxCode entered)
	       		
	       		include CalculateTaxCommonInputParams
	       		CalculateTax.Quantity					=  1
				CalculateTax.Function					= CalculateTax.Function.Inquire
				if (BillingInvoice.IsCustomerOrder)
					CalculateTax.PostalAddress			= BillingInvoice.CustomerOrder.BillPostalAddress
				else
				if (BillingInvoice.IsBillToEnterd)
					CalculateTax.PostalAddress 			= BillingInvoice.BillTo.PostalAddress
				else
					CalculateTax.PostalAddress			= BillingInvoice.Customer.PostalAddress	
				CalculateTax.Invoice					= BillingInvoice.DerivedInvoice
				CalculateTax.FromTaxCode				= BillingInvoice.Location.TaxCode
				CalculateTax.FromPostalAddress			= BillingInvoice.Location.PostalAddress
				CalculateTax.TaxPointDate				= BillingInvoice.TaxPointDate
				CalculateTax.POAAddress					= BillingInvoice.BillingProcessLevel.CompanyAddress
				CalculateTax.POATaxCode					= BillingInvoice.BillingProcessLevel.TaxCode
				include LoadVertexGlobalInputFields 
				include LoadOneSourceInputFields
				if (not TaxEntityRel.ThirdParty.Sabrix 
				and not SingleCallToVertex)
					LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
	          	constraint (CalculateTax.OutputErrorNumber not entered) 
					"<CalculateTax.OutputErrorMessage>"  	
	          	
		EnteredPrice
			if (EnteredPrice.TransactionAmount entered)
				if (BillingInvoice.BillingInvoiceSource.Shipment)
					if (ChargeType.FlatAmount)
						constraint (EnteredPrice entered or Cost entered)
							"MustEnterAmountOrCostForFlatAmountType"	
				else
					if (ChargeType.FlatAmount)
						required
							"PriceIsRequired"
				
				if (ChargeType.UnitPrice)
					cannot be entered	
						"PriceMustBeBlank"
					
				if (ChargeType.Percentage)
	 				cannot be entered
	 					"PriceMustBeBlank"		
					
			if (EnteredPrice.TransactionAmount not entered)
					EnteredPrice.TransactionAmount				= Miscellaneous.Price 
		
			if (action type.Create)
				if (BillingInvoice.BillingInvoiceType.Credit 
				and not LocalCreatedFromCopy
				and not LocalRestockChargeFromReturn)
					if (BillingInvoice.BillingInvoiceSource.Return
					and LocalCreatedFromReturn) 
						EnteredPrice.TransactionAmount *=-1
					else
						if (EnteredPrice.TransactionAmount > 0)
							EnteredPrice.TransactionAmount *=-1
		
		EnteredUnitPrice
		 	if (EnteredUnitPrice.TransactionAmount entered)
		 		if (BillingInvoice.BillingInvoiceSource.Shipment)
		 			if (ChargeType.UnitPrice)
		 	 			constraint (EnteredUnitPrice entered or UnitCost entered)
		 	 				"MustEnterAmountOrCostForFlatAmountType"
		 		else
	 			if (ChargeType.UnitPrice)
	 				required
	 					"UnitPriceIsRequired"
	 		
	 			if (ChargeType.FlatAmount)
	 				cannot be entered
	 					"UnitPriceMustBeBlank"
	 				
		 		if (ChargeType.Percentage)
		 			cannot be entered
		 				"UnitPriceMustBeBlank"		
			 		
		 	if (EnteredUnitPrice.TransactionAmount not entered)
					EnteredUnitPrice.TransactionAmount				= Miscellaneous.UnitPrice 

			if (action type.Create
			and	BillingInvoice.BillingInvoiceType.Credit
			and not LocalCreatedFromCopy
			and not LocalRestockChargeFromReturn)
				if (BillingInvoice.BillingInvoiceSource.Return
				and LocalCreatedFromReturn)
					EnteredUnitPrice.TransactionAmount *= -1
				else
					if (EnteredUnitPrice.TransactionAmount > 0)
						EnteredUnitPrice.TransactionAmount *= -1
						
		TaxableAmount
			if (TaxExemptCode.Taxable)
				TaxableAmount.TransactionAmount	= LocalBillingCurrencyAddOnChargeAmount	 
			else
				initialize TaxableAmount.TransactionAmount
			
		CostPercent
			if ((BillingInvoice.BillingInvoiceSource.Shipment
			or  BillingInvoice.BillingInvoiceSource.Return)
			and not LocalRestockChargeFromReturn)
				default to Miscellaneous.CostPercent 
		
			if (ChargeType.FlatAmount)
				cannot be entered
					"CostPercentMustBeBlank"
		
			if (ChargeType.UnitPrice)
				cannot be entered	
					"CostPercentMustBeBlank"	
											 				
		PricePercent
			default to Miscellaneous.PricePercent
			if (BillingInvoice.BillingInvoiceSource.Shipment)
				if (ChargeType.Percentage)
					constraint (PricePercent entered or  CostPercent entered)
						"MustEnterCostPercentageOrPricePercentageForChargeTypePercentage"
			else
				if (ChargeType.Percentage)
					required
						"PricePercentageIsRequired"	
			
			if (ChargeType.FlatAmount)
				cannot be entered
					"PricePercentageMustBeBlank"
			
			if (ChargeType.UnitPrice)
				cannot be entered
					"PricePercentageMustBeBlank"

		Cost
			if ((BillingInvoice.BillingInvoiceSource.Shipment
			or  BillingInvoice.BillingInvoiceSource.Return)
			and not LocalRestockChargeFromReturn)
				default to Miscellaneous.Cost
			
			if (ChargeType.UnitPrice)
				cannot be entered	
					"CostMustBeBlank"	
			if (ChargeType.Percentage)
	 			cannot be entered
	 				"CostMustBeBlank"
			if (action type.Create
			and	BillingInvoice.BillingInvoiceType.Credit
			and not LocalCreatedFromCopy
			and not LocalRestockChargeFromReturn)
				if (BillingInvoice.BillingInvoiceSource.Return
				and LocalCreatedFromReturn)
					Cost *= -1
				else
					if (Cost > 0)
						Cost *= -1		
		
		UnitCost
			if ((BillingInvoice.BillingInvoiceSource.Shipment
			or  BillingInvoice.BillingInvoiceSource.Return)
			and not LocalRestockChargeFromReturn)
				default to Miscellaneous.UnitCost
		   
		   	if (ChargeType.FlatAmount)
				cannot be entered
					"UnitCostMustBeBlank"
			if (ChargeType.Percentage)
	 			cannot be entered
					"UnitCostMustBeBlank"	
			if (action type.Create
			and	BillingInvoice.BillingInvoiceType.Credit
			and not LocalCreatedFromCopy
			and not LocalRestockChargeFromReturn)
				if (BillingInvoice.BillingInvoiceSource.Return
				and LocalCreatedFromReturn)
					UnitCost *= -1
				else
					if (UnitCost > 0)
						UnitCost *= -1		
							
		ProductTaxCategory	
			default to 	Miscellaneous.ProductTaxCategory
           
		SalesAccount
			LocalGeneralLedgerSystemCode = "BL"
			default to Miscellaneous.SalesAccount
				default individual fields
			default to BillingInvoiceLine.SalesAccount
				default individual fields
			if (SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemCodeForAccount<SalesAccount.GeneralLedgerChartAccount.Account>"
			if (BillingInvoice.BillingInvoiceSource.Shipment)
				if (SalesAccount.Project changed)
					cannot be changed
						"CannotChangeActivityOnSystemGeneratedInvoice"
		COGSAccount
			LocalGeneralLedgerSystemCode = "BL"
			default to Miscellaneous.CostOfGoodsSoldAccount
				default individual fields
			default to BillingInvoiceLine.COGSAccount
				default individual fields
			if (COGSAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (LocalGeneralLedgerSystemCode within COGSAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemCodeForAccount<COGSAccount.GeneralLedgerChartAccount.Account>"	
							
			if (BillingInvoice.BillingInvoiceSource.Shipment)
				if (SalesAccount.Project changed)
					cannot be changed
						"CannotChangeProjectOnSystemGeneratedInvoice"
			
		TrackType
			default to Miscellaneous.TrackType				
	
		
	Actions
		ProcessOneSourceForAOC is a Set Action
			restricted
			valid when (SingleCallToOneSource)
			Parameters
				PrmCompany			is a BillingCompany
				PrmBillingInvoice	is a BillingInvoice
				PrmReleasePrinted	is Boolean
			Instance Selection
				where (Company	= PrmCompany
				and	   BillingInvoice = PrmBillingInvoice
				and    TaxExemptCode.Taxable)
			Sort Order
				Company
				BillingInvoice
			Action Rules
				BillingInvoice Set Rules
					Entrance Rules
					Exit Rules
						if (SingleCallToOneSource)
							initialize CalculateTax.UniqueLineNumber
							CalculateTax.DeliveryTerms						= BillingInvoice.ShipTerm
							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= BillingInvoice.UniqueID
							CalculateTax.UserElementLevel					= "L"
							LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax
							
							invoke UpdateBLTaxAmounts TaxLineItem
								invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
								invoked.PrmCompany					= Company
								invoked.PrmInvoiceNumber			= BillingInvoice.InvoiceNumber
								invoked.PrmInvoicePrefix			= BillingInvoice.InvoicePrefix
								invoked.PrmReleasePrinted			= PrmReleasePrinted
								invoked.PrmUniqueIdOfRelatedObject  = BillingInvoice.UniqueID
				Instance Rules
					if (BillingInvoiceLine entered)
						include CalculateAddOnChargeForBillingInvoiceLine	
					else
					if (BillingInvoice entered)
				 		include CalculateAddOnChargeForBillingInvoice
					include GetBaseAmounts
					include CalculateAddonChargeTax
					include LoadOneSourceInputFields
					include CreateTaxLineItemAndUserFields
		
		ProcessVertexForAOC is a Set Action
			restricted
			valid when (SingleCallToVertex)
			Parameters
				PrmCompany			is a BillingCompany
				PrmBillingInvoice	is a BillingInvoice
				PrmReleasePrinted	is Boolean
			Instance Selection
				where (Company	= PrmCompany
				and	   BillingInvoice = PrmBillingInvoice
				and    TaxExemptCode.Taxable)
			Sort Order
				Company
				BillingInvoice
			Action Rules
				BillingInvoice Set Rules
					Entrance Rules
					Exit Rules
						if (SingleCallToVertex)
							initialize CalculateTax.UniqueLineNumber
							CalculateTax.POATaxCode							= BillingInvoice.BillingProcessLevel.TaxCode
							CalculateTax.POAAddress							= BillingInvoice.BillingProcessLevel.CompanyAddress
							CalculateTax.DeliveryTerms						= BillingInvoice.ShipTerm
							CalculateTax.SendMultLineItems					= true
							CalculateTax.UpdateLineItems					= true
							CalculateTax.UniqueIdOfRelatedObject			= BillingInvoice.UniqueID
							CalculateTax.UserElementLevel					= "L"
							CalculateTax.InputReturnVertexTaxIn		        = "D"
							CalculateTax.TaxCode							= TaxCode
							CalculateTax.AppendToJurisFile					= true					
							CalculateTax.JurisdictionResultsKey				= "BL:" + Company + ":" + BillingInvoice + ":" + current timestamp
							LocalCalculateTaxExecuted						= CalculateTax.ExecuteCalculateTax

							invoke UpdateBLTaxAmounts TaxLineItem
								invoked.PrmFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
								invoked.PrmCompany					= Company
								invoked.PrmInvoiceNumber			= BillingInvoice.InvoiceNumber
								invoked.PrmInvoicePrefix			= BillingInvoice.InvoicePrefix
								invoked.PrmReleasePrinted			= PrmReleasePrinted
								invoked.PrmUniqueIdOfRelatedObject  = BillingInvoice.UniqueID
				Instance Rules
					if (BillingInvoiceLine entered)
						include CalculateAddOnChargeForBillingInvoiceLine	
					else
					if (BillingInvoice entered)
				 		include CalculateAddOnChargeForBillingInvoice
					include GetBaseAmounts
					include CalculateAddonChargeTax
					include LoadVertexGlobalInputFields
					include CreateTaxLineItemAndUserFields

		UpdateFromTaxLineItem is an Instance Action
			restricted
			Parameters
				PrmTaxAmount		is an InternalAmount
			Action Rules
				round PrmTaxAmount to nearest BillingInvoice.DerivedRoundToDecimals
				TaxableCurrencyAmount += PrmTaxAmount

		Create is a Create Action
			valid when (BillingInvoice.Status.Unreleased)
			Action Rules
				constraint (BillingInvoice.Status.Unreleased)
					"CreateAllowedOnlyWhenInvoiceIsUnreleased"	
			Exit Rules	
				if (BillingInvoiceLine entered)
					include CalculateAddOnChargeForBillingInvoiceLine	
				else
				if (BillingInvoice entered)
				 	include CalculateAddOnChargeForBillingInvoice
				include GetBaseAmounts
				include CalculateAddonChargeTax
				include UpdateBillingInvoice
				invoke UpdateDiscountSpread BillingInvoice
				if (IsInvoicingAndTaxCalculation
				and TaxEntityRel.ThirdParty.InforTax
				and BillingInvoice.IsManualOrRecurringSource)
					include CreateBillingInvoiceLineTaxByTaxCodeAndProdTaxCat
				
		Update is an Update Action
			valid when (BillingInvoice.Status.Unreleased)
			Action Rules
				constraint (BillingInvoice.Status.Unreleased)
					"UpdateAllowedOnlyWhenInvoiceIsUnreleased"
			Exit Rules
				if (BillingInvoiceLine entered)
					include CalculateAddOnChargeForBillingInvoiceLine	
				else
				if (BillingInvoice entered)
				 	include CalculateAddOnChargeForBillingInvoice
				include GetBaseAmounts
				include CalculateAddonChargeTax
				include UpdateBillingInvoice
				invoke UpdateDiscountSpread BillingInvoice
				if (IsInvoicingAndTaxCalculation
				and TaxEntityRel.ThirdParty.InforTax
				and BillingInvoice.IsManualOrRecurringSource)
					include CreateBillingInvoiceLineTaxByTaxCodeAndProdTaxCat
		
		Delete is a Delete Action
			valid when (BillingInvoice.Status.Unreleased)
			Entrance Rules
				if (IsInvoicingAndTaxCalculation
				and TaxEntityRel.ThirdParty.InforTax
				and BillingInvoice.IsManualOrRecurringSource)
					include CreateBillingInvoiceLineTaxByTaxCodeAndProdTaxCat
				constraint (BillingInvoice.Status.Unreleased)
					"CannotDeleteStatusIsReleased"
				include DeleteAddonChargeAmounts
			Exit Rules
				invoke UpdateDiscountSpread BillingInvoice	
				
		CalculateAOC is an Instance Action 
			restricted
			Parameters
				PrmRecalculateAOC                   is Boolean
			Parameter Rules
				PrmRecalculateAOC
					LocalRecalculateAOC = PrmRecalculateAOC
			Action Rules
				if (BillingInvoiceLine entered)
					include CalculateAddOnChargeForBillingInvoiceLine	
				else
				if (BillingInvoice entered)
				 	include CalculateAddOnChargeForBillingInvoice
				include GetBaseAmounts
				include CalculateAddonChargeTax
				include UpdateBillingInvoice
		
		UpdateBillingInvoiceLineTax is an Instance Action
			restricted
			Parameters
				PrmLinesAmount is an InternationalAmount
			Action Rules
				LocalTaxCode 				= TaxCode
				LocalProductTaxCategory		= ProductTaxCategory
				if (InvoiceLineTaxByTaxCodeRel exists)
					LocalAOCTaxableAmount	= sum BillingInvoiceAddOnChargeByTaxCodeRel.TaxableAmount.TransactionAmount + PrmLinesAmount
					LocalCreateBillingInvoiceLineTax = false
					include CalculateSalesTax
					invoke Update InvoiceLineTaxByTaxCodeRel
						invoked.TransactionTaxable.TransactionAmount 			= LocalAOCTaxableAmount
						invoked.TransactionTaxable.BaseAmount.ToCurrency 		= Company.Currency
						invoked.TaxableCurrencyAmount.TransactionAmount 		= LocalSalesTax
						invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 	= Company.Currency
						invoked.LocalFromCurrency								= BillingInvoice.Currency

		Release is an Instance Action
			restricted
			Parameters
				PrmReleasePrinted	is Boolean
			Action Rules
				LocalGeneralLedgerSystemCode = "BL"
				if (TaxCode entered 
				and not SingleCallToOneSource
				and not SingleCallToVertex)
					include CalculateTaxCommonInputParams
					CalculateTax.InvoiceCompany			= Company
					CalculateTax.TaxableAmount			= TaxableAmount.TransactionAmount		
					CalculateTax.NumberOfDecimals		= BillingInvoice.CurrencyNumberOfDecimals
					CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
					CalculateTax.ProductIsExempt		= TaxExemptCode
					CalculateTax.PaymentDate			= BillingInvoice.InvoiceDate
					CalculateTax.InputReturnVertexTaxIn	= "D"	
					CalculateTax.DontCreateLogFile		= true
					CalculateTax.UniqueIdOfRelatedObject	= UniqueID
					include LoadVertexGlobalInputFields 
					include VertexFlexibleFields
					include LoadOneSourceInputFields
					include CreateTaxLineItemAndUserFields
					LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax
					
					constraint (CalculateTax.OutputErrorNumber not entered) 
						"<CalculateTax.OutputErrorMessage>" 	
					for each CalculateTax.TaxTable.TaxTableOutput
						if (each.TaxCode entered
						and !(IsInvoicingAndTaxCalculation
						and BillingInvoice.IsManualOrRecurringSource))
							invoke Create BillingInvoiceLineTax
								fill in fields from this instance
								invoked.ProductTaxCategory										= CalculateTax.ProductTaxCategory
								if (each.TaxPoint = "P")
									invoked.TaxAccount											= each.TaxOutputDueAccount
								else
									invoked.TaxAccount											= each.TaxOutputAccount	
								invoked.BillingInvoiceLineTax.TaxCode 							= each.TaxCode
								invoked.TaxRate													= each.TaxRate
								invoked.TaxableCurrencyAmount.TransactionAmount					= each.TaxAmount
								invoked.TaxableCurrencyAmount.BaseAmount.ToCurrency 			= TransientCurrency 
								invoked.TransactionTaxable.TransactionAmount					= each.TaxableAmount
								invoked.TransactionTaxable.BaseAmount.ToCurrency 				= TransientCurrency
								invoked.TaxID													= each.TaxID
								invoked.BillingInvoiceLineTax.TaxLevel							= each.TaxLevel	
								if (TaxEntityRel.OneSourceUseARCodeForTaxAccount
								and CalculateTax.SabrixReturnedTaxCode entered)
									LocalReceivableGeneralLedgerCode 							= CalculateTax.SabrixReturnedTaxCode
									constraint (LocalReceivableGeneralLedgerCodeRel exists)
										"Receivable_\Global_\Ledger_\Code<LocalReceivableGeneralLedgerCode>DoesNotExistFor_\Company<Company>"
									invoked.TaxAccount											= LocalReceivableGeneralLedgerCodeRel.DistributionAccount			

							if (PrmReleasePrinted)
								include CreateTaxJournal
				if (SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
					constraint (LocalGeneralLedgerSystemCode within SalesAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
						"InvalidSystemCodeForAccount<SalesAccount.GeneralLedgerChartAccount.Account>"
				if (COGSAccount.GeneralLedgerChartAccount.Account.SystemRestriction entered)
					constraint (LocalGeneralLedgerSystemCode within COGSAccount.GeneralLedgerChartAccount.Account.SystemRestriction)
						"InvalidSystemCodeForAccount<COGSAccount.GeneralLedgerChartAccount.Account>"
					
		CreateVertexTaxJournalFromBatch is an Instance Action
			restricted
			Action Rules
				if (TaxCode entered 
				and TaxEntityRel.ThirdParty.VertexOSeries
				and not SingleCallToVertex)
					include CalculateTaxCommonInputParams
					CalculateTax.InvoiceCompany			= Company
					CalculateTax.TaxableAmount			= TaxableAmount.TransactionAmount		
					CalculateTax.NumberOfDecimals		= BillingInvoice.CurrencyNumberOfDecimals
					CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
					CalculateTax.ProductIsExempt		= TaxExemptCode
					CalculateTax.PaymentDate			= BillingInvoice.InvoiceDate
					CalculateTax.InputReturnVertexTaxIn	= "D"	
					CalculateTax.DontCreateLogFile		= true
					CalculateTax.UniqueIdOfRelatedObject	= UniqueID
					include LoadVertexGlobalInputFields 
					include VertexFlexibleFields
					include LoadOneSourceInputFields
					include CreateTaxLineItemAndUserFields
					LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax				
					constraint (CalculateTax.OutputErrorNumber not entered) 
						"<CalculateTax.OutputErrorMessage>" 		
					for each CalculateTax.TaxTable.TaxTableOutput
						if (each.TaxCode entered)
							include CreateTaxJournal

		NotifyOneSourceFromBatch is an Instance Action
			restricted
			Action Rules
				if (IsOneSourceTax
				and not SingleCallToOneSource)
					include CalculateTaxCommonInputParams
					CalculateTax.InvoiceCompany			= Company
					CalculateTax.TaxableAmount			= TaxableAmount.TransactionAmount		
					CalculateTax.NumberOfDecimals		= BillingInvoice.CurrencyNumberOfDecimals
					CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
					CalculateTax.ProductIsExempt		= TaxExemptCode
					CalculateTax.PaymentDate			= BillingInvoice.InvoiceDate
					CalculateTax.InputReturnVertexTaxIn	= "D"	
					CalculateTax.DontCreateLogFile		= true
					CalculateTax.UniqueIdOfRelatedObject	= UniqueID
					include LoadOneSourceInputFields
					include CreateTaxLineItemAndUserFields
					LocalCalculateTaxExecuted			= CalculateTax.ExecuteCalculateTax				
					constraint (CalculateTax.OutputErrorNumber not entered) 
						"<CalculateTax.OutputErrorMessage>" 		
					for each CalculateTax.TaxTable.TaxTableOutput
						if (each.TaxCode entered)
							include CreateTaxJournal


		UpdateTaxCalculation is an Instance Action
			restricted
			Parameters
				PrmExcessDiscount is an InternationalAmount
			Action Rules
				LocalExcessDiscount = PrmExcessDiscount
				initialize AllocatedDiscount
				
				if (BillingInvoiceLine entered)
					include CalculateAddOnChargeForBillingInvoiceLine	
				else
				if (BillingInvoice entered)
				 	include CalculateAddOnChargeForBillingInvoice
				
				include GetBaseAmounts
				include CalculateAddonChargeTax
				
		CalculateFullTaxTotal is an Instance Action
			restricted
			Parameters
				PrmExcessTax is an InternationalAmount
			Action Rules
				initialize LocalTaxTotal
				if (PrmExcessTax entered)
					TaxableCurrencyAmount -= PrmExcessTax
					LocalExcessTax = PrmExcessTax
				else
					initialize LocalExcessTax
					include CalculateTaxCommonInputParams
					CalculateTax.InvoiceCompany			= Company
					CalculateTax.TaxableAmount			= TaxableAmount.TransactionAmount		
					CalculateTax.NumberOfDecimals		= BillingInvoice.CurrencyNumberOfDecimals
					CalculateTax.TransactionType		= CalculateTax.TransactionType.Sale
					CalculateTax.ProductIsExempt		= TaxExemptCode
					CalculateTax.PaymentDate			= BillingInvoice.InvoiceDate
					if (not SingleCallToOneSource
					and not SingleCallToVertex)
						include LoadVertexGlobalInputFields 
						include VertexFlexibleFields
						include LoadOneSourceInputFields
						include CreateTaxLineItemAndUserFields
						CalculateTax.UniqueIdOfRelatedObject	= UniqueID
						LocalCalculateTaxExecuted				= CalculateTax.ExecuteCalculateTax
						constraint (CalculateTax.OutputErrorNumber not entered) 
							"<CalculateTax.OutputErrorMessage>" 	

						for each CalculateTax.TaxTable.TaxTableOutput
							LocalTaxTotal += each.TaxAmount5DP
							round LocalTaxTotal to nearest BillingInvoice.DerivedRoundToDecimals
						if (TaxEntityRel.ThirdParty.Sabrix
						and TaxEntityRel.DelayTaxProcessing)
							TaxableCurrencyAmount 				= CalculateTax.OutputTotalTaxAmount
						else
							invoke StoreCalculatedTax BillingInvoice
								invoked.PrmCalculatedTax = LocalTaxTotal						

		Purge is a Purge Action
			restricted
