ContractLineImport is a BusinessClass
    owned by po
    prefix is CLIM

	Ontology
  		symbolic key is ContractLineImport
  		
    Patterns
    	implements ContextualParent
        disable Auditing
        disable EffectiveDated
		
	Persistent Fields
 		ItemNumber						is an Item
 		ManualItemNumber                is like Item
 		ItemType						is Numeric size 1
    		States
    			Itemmast					value is 1
    			Service						value is 2
    			Special						value is 3
		ItemDescription					is a Description
		ItemDescription2				is a Description
		ItemDescription3                is a Description3
		VendorItem                      
    	ContractVendorItem              is like VendorItem
    	VendorItemDescription			is a Description
		ServiceCode						is Alpha size 1
			States
				NotServiceItem				value is blank
    			Amount						value is "A"
    			Quantity					value is "Q" 
		Quantity 							
		UOM 							is like UnitOfMeasure
		GPOUnitOfMeasure                is like UnitOfMeasure
		UOMConversion
			precision is 2
			default label is "UnitOfUseConversion"			
		BaseCost						is a ContractUnitCost	
			precision is DerivedNumberOfDecimalsCost
		CommodityCode					
		ManufacturerInformation
		ContractManufacturerInformation is a ManufacturerInformation
		Sku 							is an ItemSKU
		NdcNbr 							is a NationalDrugCode
			default label is "NDC"
		Upc								is an ItemUPC                     
			default label is "UPC"
		HibccUpn						is an HIBCCItemUPN                
			default label is "HIBCC-DI" 
		UccEanUpn						is a UCCEANItemUPN                
			default label is "UCC_/EAN_UP\N"
    	UNSPSCCode						is AlphaUpper 8
		CurrentNetCost					is a ContractUnitCost 
			precision is DerivedNumberOfDecimalsCost
			classic name is CURR-NET-CST
			restricted
		Priority						is Numeric size 1
		PayablesDistributionCode
			default label is "DistributionCode"
		BlanketStandingRequestingLocation  is a RequestingLocationGroup
			default label is "RequestingLocation"
		CurrentPercent 					is Percent size 6.3
		LifetimeMaximumAmount 			is an InternationalAmount
		LifetimeMaximumQuantity 		is Numeric size 10
		PerOrderMaximumQuantity 		is Numeric size 10
		PerOrderMaximumAmount 			is an InternationalAmount
		PerOrderMinimumQuantity 		is Numeric size 10
		PerOrderMinimumAmount 			is an InternationalAmount
		PurchaseOrderUserField2
        PurchaseOrderUserField4         is a UserFld2
        PurchaseOrderUserField6         is a UserFld3
		Taxable 						is Boolean
		TaxCode
		TaxUsageCode
		GenericName
    	EffectiveDate 					is Date
		ExpirationDate 					is Date
		LabelerIdentificationCode 		
		MajorPurchasingClass     		
		MinorPurchasingClass 			
			context of MajorPurchasingClass
		MajorInventoryClass
		MinorInventoryClass
			context of MajorInventoryClass
		UserField1 						is AlphaUpper size 30
		UserField2 						is AlphaUpper size 30
		UserField3 						is AlphaUpper size 30
		UserField4 						is AlphaUpper size 30
		UserField5 						is AlphaUpper size 30
		UserFieldN1 					is a ContractUnitCost			
			precision is DerivedNumberOfDecimalsCost
		UserFieldN2 					is a ContractUnitCost			
			precision is DerivedNumberOfDecimalsCost
		UserFieldN3 					is a ContractUnitCost			
			precision is DerivedNumberOfDecimalsCost
		BasePercent 					is Percent size 6.3
		ConsignmentPricingMarkupOrDiscount is a PricingMarkupOrDiscount
		ConsignmentLinePriceBreakOn		is a LinePriceBreakOn 	
    	ConsignmentPriceBreak			is a PriceBreakImport
		PricingMarkupOrDiscount		
		LinePriceBreakOn 					
		PriceBreakImport
		Retainage 						is Boolean
		RetainagePercent1 				is Percent size 5.2
		RetainageUpToPercent 			is Percent size 5.2
		RetainagePercent2 				is Percent size 5.2
		RetainageOverridePercent 		is Percent size 5.2
		CostOption 						is Numeric size 1
    		States
    			CostRequired				value is 1
    			NoCharge					value is 2
    			VendorDetermined			value is 3 		
		UseCommitments					is Boolean
    	UpdateFunction					is AlphaUpper size 1
    		States
    			Create						value is "C"
    			Update						value is "U"
    			Delete 						value is "D"
    	ContractLineCreateDate          is Date
    	CanUseForCostDefaulting			is Boolean
    		default label is "UseForCostDefaulting"
    	GlobalTradeItemNumber			is an ItemGTIN
    		default label is "GTIN"
		DefaultAccount                  is a FinanceCodeBlock
		GPOContractNumber
		LowUOMCode                   	is like UnitOfMeasure
		HSNSACCode
		HCPCSCode
		CriticalItem					is Boolean
		PersonalProtectiveEquipment		is Boolean
		MajorPPEClass
		MinorPPEClass
			context of MajorPPEClass
		GMDNPTCode
		UsageIdentifier                 is an ItemUsageIdentifier
		ClinicalSystemUse               is Boolean
		PatientChargeable               is Boolean
		ChargeNumber
		Latex					 is Numeric 1
			States
				Unspecified						value is 0
				PackageIndicatesLatex			value is 1
				LatexFree               		value is 2
				NotApplicable					value is 3
		Sterile                     is Boolean 
		SingleUse                   is Boolean 
		Reusable                    is Boolean
		Reprocessed                 is Boolean 
		Implantable                 is Boolean 
		ContainsHumanTissue         is Boolean 
		Pharmaceutical              is Boolean 
		Dressing                    is Boolean 
		Bioabsorbable               is Boolean  			
		Narcotic                    is Boolean 
		Instrument                  is Boolean 
		Drugs                       is Boolean 
		Analytics                   is Boolean 
		Contract                    is like Contract
		ContractLine                is like ContractLine 
		SelectedForCopy             is Boolean 
			default label is "Selected"

	Transient Fields
   		DefaultUom						is like UnitOfMeasureEdit
   		DefaultVendorItem				is AlphaUpper size 32
   		DefaultItemNumber 				is like Item
		CreateFromCopy					is Boolean
   		TransientTierCost1              is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		TransientTier1                  is a ContractImportTier
		TransientTierCost2              is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		TransientTier2                  is a ContractImportTier
		TransientTierCost3              is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		TransientTier3                  is a ContractImportTier
		TransientTierCost4              is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		TransientTier4                  is a ContractImportTier
		TransientTierCost5              is a ContractUnitCost
			precision is DerivedNumberOfDecimalsCost
		TransientTier5                  is a ContractImportTier
		TransientVendor                 is like Vendor
		
   	Local Fields
   		LocalBaseCostUpdatedFromZero	is Boolean
   		LocalBaseCostChanged			is Boolean
		LastQuantity    				is like Quantity
			precision is ItemNumber.NumberOfDecimalsQuantity
		LastUnitCost   					is like UnitCost
		LastUnitPercent 				is a UnitPercent
		HasUnitPercent  				is Boolean
		HasUnitCost  					is Boolean
		LocalContract					is a Contract
		LocalVendorItem					is AlphaUpper size 32
		LocalManufacturerInfo			is a ManufacturerInformation
		LocalManufacturerNumber         is a ManufacturerNumber
		LocalUom						is like UnitOfMeasureEdit
		LocalUpdatedBaseCost			is a ContractUnitCost	
		LocalOriginalBaseCost			is a ContractUnitCost
		ToleranceError					is Boolean	
		ToleranceAmtExceeded			is Boolean	
		TolerancePctExceeded			is Boolean
		PriceBreaksExist				is Boolean	
		LocalTolerancePercent			is Percent size 6.3
		LocalFutureCostDate				is Date
		LocalFutureCost					is a ContractUnitCost
		LocalEffectiveDate				is Date
		LocalCompareEffectiveDate       is Date
		LocalBaseCost					is a ContractUnitCost
		LocalOutUnitCost				is a ContractUnitCost
		LocalPriceChangeDate			is Date
		LocalItemNumber					is like Item
		LocalContractLine				is a ContractLine
		LocalUOMDefaultedFromVendorItem	is Boolean
		LocalTier                       is a ContractImportTier
		LocalOriginalLineStatus         is Numeric size 2
		LocalCostVariance               is Boolean
		GTINCheckDigit
		LocalValidCheckDigit            is Boolean
		UpdateContract                  is like Contract
		LocalUOMCalculation             is a UOMCalculation	
		ParameterCompareEffectiveDate   is Date
		ParameterCompareExpirationDate  is Date
		LocalGPOContractNumber          is a GPOContractNumber
		RoundedValue
		LocalVendorNumber               is Boolean
		LocalUseItemNumber              is Boolean
		LocalManufNumber                is Boolean
		LocalHaveContractLine           is Boolean

	Derived Fields
			
    	NumericUpdateFunction is a ConditionalField
    		type is Numeric size 2
    		restricted
    		if (UpdateFunction.Create)
    			"1"
    		else
    		if (UpdateFunction.Update)
    			"2"
    		else
    			"3"
    	
		ItemMasterUOMConversion is a DerivedField
			type is Alpha size 20
			if (ItemMasterItem
			and UOM = ItemNumber.StockUOM)
				return ItemNumber.UOMConversion
			else
			if (ItemMasterItem
			and ItemUOMExists)
				return ItemUOMRel.UOMConversion
			else
				return blank

		DerivedRelationUOM is a DerivedField 
			type is AlphaUpper size 4
			restricted 
			if (GPOUnitOfMeasure entered)
				return GPOUnitOfMeasure
			else
				return UOM

		DerivedDefaultBuyUnitCost is a DerivedField
			type is Numeric size 18
			restricted
			initialize LocalUOMCalculation
			if (ItemMasterItem
			and ItemNumber.DefaultBuyUOM != UOM)
				LocalUOMCalculation.InputUOM				= UOM
				LocalUOMCalculation.InputToUOM				= ItemNumber.DefaultBuyUOM
				LocalUOMCalculation.InputUnitCost			= LocalBaseCost
				LocalUOMCalculation.Method					= LocalUOMCalculation.Method.ConvertToAlternate
				return LocalUOMCalculation.OutputUnitCost * 100000
			else
				return LocalBaseCost * 100000
		
		DerivedNumberOfDecimalsCost is a ConditionalField
			type is Numeric size 1
			restricted
			if (ItemType.Itemmast
			or  ItemNumber exists)
				ItemNumber.NumberOfDecimalsCost
			else
			if (ItemType.Special
			or  ItemType.Service
			or  ItemType !entered)
				ItemGroupRel.DefaultNumberOfDecimalsCost
			else
				8

		DerivedRoundTo is a DerivedField
			type is like InternationalCost
			restricted
			if (DerivedNumberOfDecimalsCost = 8)
				return .00000001
			else
			if (DerivedNumberOfDecimalsCost = 7)
				return .0000001
			else
			if (DerivedNumberOfDecimalsCost = 6)
				return .000001
			else
			if (DerivedNumberOfDecimalsCost = 5)
				return .00001
			else
			if (DerivedNumberOfDecimalsCost = 4)
				return .0001
			else
			if (DerivedNumberOfDecimalsCost = 3)
				return .001
			else
			if (DerivedNumberOfDecimalsCost = 2)
				return .01
			else
			if (DerivedNumberOfDecimalsCost = 1)
				return .1
			else
			if (DerivedNumberOfDecimalsCost = 0)
				return 1
			else
				return 0

		BaseCostForLowestDivisibleCost is a DerivedField 
			type is like UnitCost
				precision is DerivedNumberOfDecimalsCost
			if (UOMConversion = 1
				or UOMConversion = 0)
				return BaseCost
			else
				return (BaseCost/UOMConversion)

		RoundedBaseCost is a DerivedField
			type is like InternationalCost
			restricted
			if (LocalBaseCost != 0)
				RoundedValue.RoundInput			= LocalBaseCost
				RoundedValue.RoundingType		= RoundedValue.RoundingType.Normal
				RoundedValue.RoundTo			= DerivedRoundTo
				RoundedValue.RoundingMethodFW	= RoundedValue.RoundingMethodFW.MultipleOf
				return RoundedValue.RoundResult
			else
				return 0

		InactiveItemByManufacturerCount         is a ComputeField
			type is Numeric 6
			restricted
			(instance count of InactiveItemByManufacturerRel)    			
		DerivedTolerancePercent is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocalTolerancePercent * 100)

		ChangePercent is a DerivedField
			type is like InternationalAmount
			restricted
			return (((LocalUpdatedBaseCost - LocalOriginalBaseCost) / (LocalOriginalBaseCost)) * 100)
			
		DerivedChangePercent is a DerivedField
			type is like InternationalAmount
			restricted
			if (LocalOriginalBaseCost not = 0)
				if (ChangePercent < 0)
					return ChangePercent * -1
				else
					return ChangePercent
			else
				return 0

		ChangeAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (LocalUpdatedBaseCost - LocalOriginalBaseCost)
			
		DerivedChangeAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (LocalOriginalBaseCost not = 0)
				if (ChangeAmount < 0)
					return ChangeAmount * -1
				else
					return ChangeAmount
			else
				return 0
				
						
		DerivedUOMDefault is a DerivedField
			type is Alpha 12
			restricted
			if (LocalUOMDefaultedFromVendorItem)
				return "Vendor Item"
			else
				return blank

		ItemByManufacturerCount         is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ItemByManufacturerRel)
		
		DerivedUccEanUpn is a DerivedField
			type is AlphaUpper size 32
			restricted
			return com.lawson.apps.procurement.base.StringUtils.trimLeadingSpaces(UccEanUpn)
			
		DerivedUccEanUpnWithLeadingZeros is a DerivedField
			type is Alpha size 25
			restricted
			return com.lawson.apps.procurement.base.StringUtils.leadingZeros(UccEanUpn)

		DerivedManufacturerContractLine is a DerivedField 
			type is Numeric 6
			restricted 
			if (ContractLineMainRel exists)
				return ContractLine 
			else 
			if (ContractLineItemNotClosedRel exists)
				return first ContractLineItemNotClosedRel.ContractLine
			else 
				return first ContractLineMfgNotClosedRel.ContractLine  

	Sets
	
		ByContract 
			Sort Order 
				ContractGroup 
				Contract 
				ContractLine 
				ContractImport 
				ContractLineImport 
		
		ByVendorItemItem
			Sort Order
				ContractGroup
				ContractImport
				VendorItem
				ItemNumber
				UOM
				ContractLineImport
				

		ByItemMfgInfo
			duplicates	
			Sort Order
				ContractGroup
				ContractImport
				ItemNumber
				ManufacturerInformation.Manufacturer

		ByCanUseForCostDefaulting
			Sort Order
				ContractGroup
				ContractImport
				CanUseForCostDefaulting
				ContractLineImport
		
		ByUpdateFunction
			Sort Order
				ContractGroup
				ContractImport
				UpdateFunction
				ContractLineImport

		ByRetainage
			Sort Order
				ContractGroup
				ContractImport
				Retainage
				ContractLineImport
		
		
		ByEffectiveDate
			Sort Order
				ContractGroup
				ContractImport
				EffectiveDate
				ContractLineImport
		
		ByExpirationDate
			Sort Order
				ContractGroup
				ContractImport
				ExpirationDate
				ContractLineImport
				
		ByItemVendorItem
			duplicates
			Sort Order
				ContractGroup
				ItemNumber
				VendorItem
		
		ByManufacturerNumberGPO
			Sort Order
				ContractGroup  								
				ContractImport 							
				ManufacturerInformation.Manufacturer
				ManufacturerInformation.ManufacturerNumber  						
				UOM
				ContractLineImport
			Instance Selection
				where (GPOContractNumberEntered)

		ByContractManufacturerNumber 
			Sort Order 
				ContractGroup  								
				GPOContractNumber 							
				ContractManufacturerInformation.ManufacturerNumber  						
				VendorItem  
				ContractImport
				ContractLineImport				
		
		ByGPOContractNumber
			Sort Order
				ContractGroup  								
				GPOContractNumber 							
				ManufacturerInformation.ManufacturerNumber  						
				VendorItem  
				ContractImport
				ContractLineImport
			Instance Selection
				where (GPOContractNumberEntered)
				   	                            
	Conditions
		ServiceItem
			restricted
			when (ContractImport.ServicePurchaseType
			or 	   ItemType.Service
			or     ServiceCode.Amount
			or     ServiceCode.Quantity)
		SpecialItem 
			restricted 
			when (ItemType.Special)
		HasTierMembersForManufacturer
			restricted 
			when (ManufacturerTierMembersRel exists)
		NoMembersExist
			restricted 
			when (!AnyTierMembersRel exists)			
		UOMIsStock
			restricted
			when (ItemNumber.StockUOM = UOM)
		NeedDescription
			restricted
			when ((ServiceItem)
			or   (!ServiceItem
			and   !ItemNumber exists))
		VendorItemExistsFromManufacturerNumber
			restricted
			when (VendorItemFromManufacturerNumberRel exists)
		ItemExists
			restricted
			when (ItemNumber exists)
		ManualItemNumbering
			restricted
			when (((ContractImport.ContractSubtype not entered)
			and    (ContractImport.ContractType.ItemCreationMethod.ManualInput))
			or    ((ContractImport.ContractSubtype entered)
			and    (ContractImport.ContractSubtype.ItemCreationMethod.ManualInput)))
		CanDisplayHealthcareInformation
			restricted
			when (ContractImport.DerivedShowHealthcareInformation
			or    HealthcareInformationExists)
		HealthcareInformationExists
			restricted
			when (Latex > 0
			or    ChargeNumber entered
			or    HCPCSCodeEntered
			or    CriticalItem = true		
			or    PersonalProtectiveEquipment = true
			or    PatientChargeable = true
			or    ClinicalSystemUse = true 	
			or    MajorPPEClass entered
			or    MinorPPEClass entered
			or    GMDNPTCode entered
			or    UsageIdentifier entered)
		HCPCSCodeEntered
			restricted
			when (HCPCSCode.HCPCS entered)
		IsDistributorContract
			when (ContractImport.ManufacturerOrDistributor.DistributorContract)
		IsManufacturerContract
			when (ContractImport.ManufacturerOrDistributor.ManufacturerContract)
		IsNotDistributorContract
			restricted
			when (!ContractImport.ManufacturerOrDistributor.DistributorContract)
		IsManufacturerOrDistributorContract
			restricted
			when (ContractImport.ManufacturerOrDistributor.ManufacturerContract
			or    ContractImport.ManufacturerOrDistributor.DistributorContract)
		IsNotDistributorAndNotManufacturer
			restricted
			when ((!ContractImport.ManufacturerOrDistributor.DistributorContract)
			and  (!ContractImport.ManufacturerOrDistributor.ManufacturerContract))
		CommMfgCodeAndNumber
			restricted
			when ((CommodityCode.Segment[1] entered)
			and   (ManufacturerInformation.Manufacturer.ManufacturerCode entered)
			and   (ManufacturerInformation.ManufacturerNumber entered))
		CommMfgCode
			restricted
			when ((CommodityCode.Segment[1] entered)
			and   (ManufacturerInformation.Manufacturer.ManufacturerCode entered))
		
		FixedTier
			restricted
			when (ContractFixedTierRel exists)
			
		IsManufacturerWithFixedTier
			restricted
			when (IsManufacturerContract
			and   FixedTier)	
		UnitCostRequired
			restricted
			when ((BaseCost = 0)
			and   (CostOption.CostRequired
			or     CostOption = blank)) 
		IsHSNSACCodeEnabled
			restricted
			when (ContractGroup.BusinessGroup.UseHSNSACCode)			
		CostOptionRequired
			restricted
			when (BaseCost > 0
			and   CostOption = blank)
		
		NonMatchingUOMExists
			restricted
			when (NonMatchingUOMExistsRel exists
			and   ContractImport.UOMSMustMatch = false
			and  !ContractImport.StandingPurchaseType)
		StandingNonMatchingUOMExists
			restricted
			when (NonMatchingUOMExistsRel exists
			and   ContractImport.UOMSMustMatch = false
			and   ContractImport.StandingPurchaseType)
		SameItemDifferentUOM
			restricted
			when (NonMatchingUOMExistsRel exists)
		InactiveVendorItem
			restricted
			when (!VendorItem.Active)
		NonServiceItem
			restricted
			when (ItemType.Itemmast
			or    ItemType.Special)
		
		LineCommitments
			restricted
			when (UseCommitments)
		
		RetainageTurnedOn
			restricted
			when (Retainage changed
			and	  old Retainage = false)
		RetainageExist
			restricted
			when (Retainage)

		MfgInfoChanged
			restricted
			when ((ManufacturerInformation.Manufacturer.ManufacturerCode changed
			and   old ManufacturerInformation.Manufacturer.ManufacturerCode not = blank)
			or	 (ManufacturerInformation.Manufacturer.ManufacturerDivision changed
			and   old ManufacturerInformation.Manufacturer.ManufacturerDivision not = blank)			
			or	 (ManufacturerInformation.ManufacturerNumber changed
			and   old ManufacturerInformation.ManufacturerNumber not = blank))
		ItemUOMExists
			restricted
			when (ItemUOMRel exists)
		NewItemNumber
			restricted
			when (!ItemNumber exists
			and   !ServiceItem)
		AmountTypeServiceItem
			restricted
			when (ServiceCode.Amount)
		QuantityTypeServiceItem
			restricted
			when (ServiceCode.Quantity)
		ServicePurchaseTypeContract
			restricted
			when (((ContractImport.ContractSubtype not entered)
			and    (ContractImport.ContractType.PurchaseType.Service))
			or    ((ContractImport.ContractSubtype entered)
			and    (ContractImport.ContractSubtype.PurchaseType.Service)))
		ByQuantityAllowed
			restricted
			when (!AmountTypeServiceItem
			and   !ServicePurchaseTypeContract)
		NotStandingPurchaseTypeType
			restricted
			when (((ContractImport.ContractSubtype not entered)
			and   (ContractImport.ContractType.PurchaseType.Contract
			or	   ContractImport.ContractType.PurchaseType.Blanket
			or     ContractImport.ContractType.PurchaseType.CatalogQuote
			or     ContractImport.ContractType.PurchaseType.Service))					
			or   ((ContractImport.ContractSubtype entered)
			and   (ContractImport.ContractSubtype.PurchaseType.Contract
			or     ContractImport.ContractSubtype.PurchaseType.Blanket
			or     ContractImport.ContractSubtype.PurchaseType.CatalogQuote
			or     ContractImport.ContractSubtype.PurchaseType.Service)))					
		AmountTypeItemOnServiceContract
			restricted
			when (AmountTypeServiceItem
			and   ServicePurchaseTypeContract)
		ServiceItemOnly
			restricted
			when (ItemType.Service
			or     ServiceCode.Amount
			or     ServiceCode.Quantity)		
		ServiceItemOnNonServiceContract
			restricted
			when (ServiceItemOnly
			and   !ServicePurchaseTypeContract)			
		PriceBreaksAllowed
			restricted
			when (!AmountTypeItemOnServiceContract
			and   NotStandingPurchaseTypeType)
		CsnPriceBreaksAllowed
			restricted
			when (!ServiceItemOnNonServiceContract
			and   !ServicePurchaseTypeContract
			and   NotStandingPurchaseTypeType)
		NoPriceBreaksAllowed
			restricted
			when (!PriceBreaksAllowed)
		NoCsnPriceBreaksAllowed
			restricted
			when (!CsnPriceBreaksAllowed)
		UpdateContractLineMfgExists
			restricted
			when (ContractLineMfgUpdateRel exists)
		UpdateContractLineVenExists
			restricted
			when (ContractLineVenUpdateRel exists)
		UpdateContractLineItemExists
			restricted
			when (ContractLineItemUpdateRel exists
			and   ItemMasterItem)		
        ContractEntered 
			restricted 
			when (Contract entered)
		UpdateContractLineDirectExists 
			restricted
			when (ContractEntered
			and   ContractLineMainRel exists)
		HasVendorItemUpdateFromAttributeUpdate 
			restricted 
			when (UpdateContractLineDirectExists
			and   ContractLineMainRel.HasVendorItemUpdatesFromAttributes)
		DistributionCodeEntered
        	restricted
        	when (PayablesDistributionCode entered)
        LinesForSameItemVendor
        	restricted
        	when (ContractLineSameItemRel exists)        
        VendorItemExists
        	restricted
        	when (GetVendorItemSetRel exists)
        MatchesManufacturerItem
        	restricted
        	when (VendorItem	= ManufacturerInformation.ManufacturerNumber)
        ManufacturerEquals
        	restricted
        	when (VendorItem.Manufacturer.ManufacturerCode		!= ManufacturerInformation.Manufacturer.ManufacturerCode
        	and   VendorItem.Manufacturer.ManufacturerDivision	!= ManufacturerInformation.Manufacturer.ManufacturerDivision
        	and   VendorItem.ManufacturerNumber					!= ManufacturerInformation.ManufacturerNumber)
    	
        NonDirectBuyItem
        	restricted
        	when (CanUseForCostDefaulting	= false
        	and   ContractImport.ManufacturerOrDistributor.ManufacturerContract)	
		ItemNumberExists
			restricted
			when (ItemNumber exists)
		ItemNumberExistsAndAvailableForUse
			restricted
			when (ItemNumberExists
			and   ItemNumber.AvailableForUse)
		GlobalTradeItemNumberExists
			restricted
			when (IcitemgtinGTINRel exists)
		ManufNumberEntered
			restricted
			when (ManufacturerInformation.ManufacturerNumber entered)
		TierCostsExist
			restricted
			when (ContractLineImportTierCostRel exists)
		VendorItemMismatchContractHasBeenActivatedExists
			restricted
            when (ContractLineMfgUpdateVenChgRel exists)
        ErrorsExistForContract
        	restricted
            when (ContractLineErrorsSingleContractRel exists)
		HasLineErrors
			when (AllLineErrorsRel exists)
        GPOItemDoesNotExist
        	restricted
        	when  (((ContractGroup.GPOUsed = 1
        	or       ContractGroup.GPOUsed = 4
        	or       ContractGroup.GPOUsed = 2)
        	and      ContractGPOItemUOMRel !exists)
        	or      (ContractGroup.GPOUsed = 5
        	and      GHXItemRel !exists))
        GPOItemExists
        	restricted
        	when  (((ContractGroup.GPOUsed = 1
        	or       ContractGroup.GPOUsed = 4
        	or       ContractGroup.GPOUsed = 2)
        	and      ContractGPOItemUOMRel exists)
        	or      (ContractGroup.GPOUsed = 5
        	and      GHXItemRel exists))
        GPOContractExists
        	restricted
        	when (ContractGPOHeaderRel exists)
        GPOContractNumberEntered
        	restricted
        	when (GPOContractNumber entered)
		CannotUpdateGPO
			restricted
			when (ContractGroup.DoNotAllowGPOUpdates
			and   ContractImport.GPONegotiated)
		CanReplaceAndInactivateVendorItem
			restricted
			when (UserField5 entered 
			and   ContractVendorItem entered
			and   VendorItemRel exists)
			
		CanUpdateVendorItemOnContract
			restricted
			when (UserField5 entered 
			and   ContractVendorItem entered
			and   VendorItemRel !exists)
        
 		UpdatedOrMismatchedVendorItem
 			restricted
 			when (UserField5 entered 
 			and   ContractVendorItem entered)

        ErrorsExist
        	restricted
            when (ContractLineImportError set exists)
		UOMErrorsExist
			when (LineUOMErrorsRel exists)
		UpdateableErrorsExist
			restricted
			when (UpdateableLineErrorRel exists)
		MainLineIsClosed
			restricted
			when (CloseLineErrorRel exists)
		ItemMasterItem
			restricted
			when (ItemNumber exists)
		AlwaysTrue
			restricted
			when (ItemNumber exists
			or    ItemNumber !exists)			
		LineWithDuplicateUOM
			when (DuplicateUOMErrorRel exists)

		LineWithClosedCreateNew
			restricted
			when (ClosedLineCreateNewRel exists)

		LinesWithClosedDoNotProcess
			restricted
			when (ClosedLineDoNotCreateNewRel exists)

		ReplenishmentExists
			restricted
			when (ItemReplenishmentRel exists)
		
		ContractLineExists
			restricted
			when (ContractLineMainRel exists
			or    ContractLineItemRel exists
			or    ContractLineMfgCostRel exists
			or    ContractLineRel exists)

		ContractLineExistsAndNotClosed
			restricted 
			when (ContractLineExists
			and  !LineWithClosedCreateNew
			and  !LinesWithClosedDoNotProcess)

		CanSelect 
			restricted 
			when (ContractImport.CanViewSingleContract
			and   SelectedForCopy = false)
		
		HasGPOItemsForManufacturer
			restricted 
			when ((ContractGroup.GPOUsed = 2
			or     ContractGroup.GPOUsed = 4)
			and    ContractGPOItemForManufacturerNumberRel exists)

		HasGHXItemsForManufacturer 
			restricted 
			when (ContractGroup.GPOUsed = 5
			and   ContractGPOGHXItemForManufacturerNumberRel exists)

		DifferentManufacturerInformation 
			restricted 
			when (ManufacturerInformation != ContractManufacturerInformation)

	Relations

		ManufacturerTierMembersRel
			one-to-many relation to ContractImportTierMember
			Field Mapping uses symbolic key
				related.ContractGroup 	= ContractGroup
				related.ContractImport  = ContractImport
			Instance Selection
				where (related.PurchaseMethodForDirectBuy)

		AnyTierMembersRel
			one-to-many relation to ContractImportTierMember
			Field Mapping uses symbolic key
				related.ContractGroup 		= ContractGroup
				related.ContractImport      = ContractImport


        PovenitemRel 
        	one-to-one relation to VendorItem
        	Field Mapping uses symbolic key
        		related.ProcurementGroup	= ContractGroup
        		related.Item		    	= ItemNumber
        		related.Vendor				= ContractImport.Vendor
        		related.VendorItem			= VendorItem
        		
        VendorItemRel 
        	one-to-one relation to VendorItem
        	Field Mapping uses symbolic key
        		related.ProcurementGroup	= ContractGroup
        		related.Item		    	= ItemNumber
        		related.Vendor				= ContractImport.Vendor
        		related.VendorItem			= ContractVendorItem

		ContractImportTierMemberRel
			one-to-many relation to ContractImportTierMember
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.ContractImport	= ContractImport

		ContractImportTierMemberUpdatedRel
			one-to-many relation to ContractImportTierMember
			Field Mapping uses symbolic key
				related.ContractGroup	= ContractGroup
				related.ContractImport	= ContractImport
			Instance Selection
				where (related.Updated = true)

		ItemReplenishmentRel
			one-to-many relation to ItemReplenishmentSource
			Field Mapping uses ByItem
				related.Item             = ItemNumber

        UOMRel
        	one-to-one relation to UnitOfMeasure
        	Field Mapping uses symbolic key
        		related.ItemGroup           = ContractGroup
        		related.UnitOfMeasure       = UOM
        
        DefaultPovenitemRel
        	one-to-many relation to VendorItem
        	Field Mapping uses Set4
        		related.ProcurementGroup	= ContractGroup
        		related.Vendor				= ContractImport.Vendor
        		related.Item			    = ItemNumber
        	Instance Selection
        		where (related.UseAsDefault)
        
		UNSPSCCodeRel
			one-to-many relation to UNSPSCCode
			Field Mapping uses symbolic key
				related.ItemGroup           		= ContractGroup
				related.UNSPSCCode.UNSPSCSegment 	= UNSPSCCode[1:2]
				related.UNSPSCCode.UNSPSCFamily  	= UNSPSCCode[3:4]
				related.UNSPSCCode.UNSPSCClass   	= UNSPSCCode[5:6]
				related.UNSPSCCode.UNSPSCCommodity	= UNSPSCCode[7:8]

		UNSPSCSegmentExistsRel 
			one-to-one relation to UNSPSCCode
			Field Mapping uses symbolic key
				related.ItemGroup           		= ContractGroup
				related.UNSPSCCode.UNSPSCSegment 	= UNSPSCCode[1:2]
				related.UNSPSCCode.UNSPSCFamily  	= "00"
				related.UNSPSCCode.UNSPSCClass   	= "00"
				related.UNSPSCCode.UNSPSCCommodity	= "00"	

		UNSPSCFamilyExistsRel 
			one-to-one relation to UNSPSCCode
			Field Mapping uses symbolic key
				related.ItemGroup           		= ContractGroup
				related.UNSPSCCode.UNSPSCSegment 	= UNSPSCCode[1:2]
				related.UNSPSCCode.UNSPSCFamily  	= UNSPSCCode[3:4]
				related.UNSPSCCode.UNSPSCClass   	= "00"
				related.UNSPSCCode.UNSPSCCommodity	= "00"					

		UNSPSCClassExistsRel 
			one-to-many relation to UNSPSCCode
			Field Mapping uses symbolic key
				related.ItemGroup           		= ContractGroup
				related.UNSPSCCode.UNSPSCSegment 	= UNSPSCCode[1:2]
				related.UNSPSCCode.UNSPSCFamily  	= UNSPSCCode[3:4]
				related.UNSPSCCode.UNSPSCClass   	= UNSPSCCode[5:6]
				related.UNSPSCCode.UNSPSCCommodity	= "00"	

        GetVendorItemSetRel
        	one-to-many relation to VendorItem
        	Field Mapping uses Set3
        		related.ProcurementGroup  	= ContractGroup
        		related.Vendor 				= ContractImport.Vendor
        		related.VendorItem			= VendorItem
        	Instance Selection
        		where (related.Active)
        		
		GetVendorItemAllRel
        	one-to-many relation to VendorItem
        	Field Mapping uses Set3
        		related.ProcurementGroup  	= ContractGroup
        		related.Vendor 				= ContractImport.Vendor
        		related.VendorItem			= VendorItem
        	Instance Selection
        		where (related.Item.AvailableForUse)
        		       		
		VendorItemFromManufacturerNumberRel
			one-to-many relation to VendorItem
        	Field Mapping uses Set2
        		related.ProcurementGroup	= ContractGroup
        		related.VendorItem          = ManufacturerInformation.ManufacturerNumber
        	Instance Selection
        		where (related.Vendor                     = ContractImport.Vendor
				and   (related.VendorBuyUOM.UnitOfMeasure !entered
				or     related.VendorBuyUOM.UnitOfMeasure = UOM))
		
		LineMemberTierRel
			one-to-many relation to ContractLineMember
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
				related.Contract	  = ContractImport
				related.ContractLine  = ContractLineImport
			Instance Selection
				where (related.MfgContractTierInfo.Tier != blank)

		NonMatchingUOMExistsRel
			one-to-many relation to ContractLineImport
			Field Mapping uses ByVendorItemItem 
				related.ContractGroup 	= ContractGroup
				related.ContractImport	= ContractImport
				related.VendorItem 		= VendorItem
				related.ItemNumber 		= ItemNumber
			Instance Selection
				where (related.UOM		 != UOM)
				
		InvalidItemUOMLineErrorRel
			one-to-many relation to ContractLineImportError
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.ContractImport		= ContractImport
				related.ContractLineImport	= ContractLineImport
			Instance Selection
				where (related.ErrorMessageNumber = 10)

		UpdateableLineErrorRel
			one-to-many relation to ContractLineImportError
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.ContractImport		= ContractImport
				related.ContractLineImport	= ContractLineImport
			Instance Selection
				where (related.ErrorMessageNumber != 17
				and    related.ErrorMessageNumber != 20
				and    related.ErrorMessageNumber != 19
				and    related.ErrorMessageNumber != 21
				and    related.ErrorMessageNumber != 2
				and    related.ErrorMessageNumber != 4
				and    related.ErrorMessageNumber != 24)

		CloseLineErrorRel
			one-to-many relation to ContractLineImportError
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.ContractImport		= ContractImport
				related.ContractLineImport	= ContractLineImport
			Instance Selection
				where (related.ErrorMessageNumber = 17)

		ClosedLineCreateNewRel
			one-to-many relation to ContractLineImportError
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.ContractImport		= ContractImport
				related.ContractLineImport	= ContractLineImport
			Instance Selection
				where (related.ErrorMessageNumber = 21)

		ClosedLineDoNotCreateNewRel
			one-to-many relation to ContractLineImportError
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.ContractImport		= ContractImport
				related.ContractLineImport	= ContractLineImport
			Instance Selection
				where (related.ErrorMessageNumber = 24)

		LineUOMErrorsRel 
			one-to-many relation to ContractLineImportError
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
        		related.ContractImport		= ContractImport
        		related.ContractLineImport	= ContractLineImport
        	Instance Selection
        		where (related.UOMErrorsExist)	

		AllLineErrorsRel
			one-to-many relation to ContractLineImportError
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.ContractImport		= ContractImport
				related.ContractLineImport	= ContractLineImport

		DuplicateUOMErrorRel
			one-to-many relation to ContractLineImportError
			Field Mapping uses symbolic key
				related.ContractGroup		= ContractGroup
				related.ContractImport		= ContractImport
				related.ContractLineImport	= ContractLineImport
			Instance Selection
				where (related.ErrorMessageNumber = 19
				or     related.ErrorMessageNumber = 20)
						
		VendorItemBuyUOMRel is a VendorItem set
			Instance Selection
				where (related.VendorBuyUOM		!= UOM
				and    related.VendorBuyUOM entered)
		
        ApCpyVndRel
        	one-to-many relation to VendorCompanyDefault
        	Field Mapping uses symbolic key
        		related.VendorGroup	    = ContractImport.Vendor.VendorGroup
        		related.Vendor		    = ContractImport.Vendor
        		related.VendorLocation	= ContractImport.ApPoPurchFrom

        ItemGroupRel
        	one-to-one relation to ItemGroup
        	Field Mapping uses symbolic key
        		related.ItemGroup  = ContractGroup
        
        ContractLineMfgUpdateRel
			one-to-many relation to ContractLine
			Field Mapping uses ByMfgInfoFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= LocalContract
				related.Manufacturer.ManufacturerCode        				= LocalManufacturerInfo.Manufacturer.ManufacturerCode	
				related.Manufacturer.ManufacturerDivision    				= LocalManufacturerInfo.Manufacturer.ManufacturerDivision
				related.ManufacturerNumber				    				= LocalManufacturerInfo.ManufacturerNumber
				related.UOM				 									= LocalUom
        		related.ManufacturerContract								= LocalContract
        	Instance Selection
        		where (related.LineNotClosed)
        
		ImportLineMfgSameUOMRel
			one-to-many relation to ContractLineImport
			Field Mapping uses symbolic key
				related.ContractGroup                                       		= ContractGroup
				related.ContractImport                                      		= ContractImport
			Instance Selection
				where (ManufacturerInformation.ManufacturerNumber entered
				and    ItemType.Special
				and    related.ManufacturerInformation.Manufacturer.ManufacturerCode 		= ManufacturerInformation.Manufacturer.ManufacturerCode
				and    related.ManufacturerInformation.Manufacturer.ManufacturerDivision	= ManufacturerInformation.Manufacturer.ManufacturerDivision
				and    related.ManufacturerInformation.ManufacturerNumber          			= ManufacturerInformation.ManufacturerNumber
				and    related.UOM 															= UOM
				and    related.ContractLineImport 										   != ContractLineImport)		

		ImportLineVendorItemSameUOMRel
			one-to-many relation to ContractLineImport
			Field Mapping uses ByVendorItemItem
				related.ContractGroup                                       = ContractGroup
				related.ContractImport                                      = ContractImport
				related.VendorItem                                          = VendorItem
			Instance Selection
				where (VendorItem entered
				and    related.UOM = UOM
				and    related.ContractLineImport != ContractLineImport)	
		
		ImportLineVendorItemDupUOMRel
			one-to-many relation to ContractLineImport
			Field Mapping uses ByVendorItemItem
				related.ContractGroup                                       = ContractGroup
				related.ContractImport                                      = ContractImport
				related.VendorItem                                          = VendorItem
			Instance Selection
				where (related.UOM != UOM)

		ImportLineMfgDupUOMRel   
			one-to-many relation to ContractLineImport
			Field Mapping uses ByManufacturerNumberGPO
				related.ContractGroup                                       = ContractGroup
				related.ContractImport                                      = ContractImport
				related.ManufacturerInformation.Manufacturer                = ManufacturerInformation.Manufacturer
				related.ManufacturerInformation.ManufacturerNumber          = ManufacturerInformation.ManufacturerNumber
			Instance Selection
				where (related.UOM != UOM)

        ContractLineVendorItemDupUOMRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVendorItemItemUom
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= LocalContract
				related.VendorItem                                          = LocalVendorItem
			Instance Selection
				where (related.UOM != UOM
				and    related.LineNotClosed
				and  ((ItemType.Special
				and    related.Contract.UOMSMustMatchForSpecials = false)
				or    (ItemType.Itemmast
				and    related.Contract.UOMSMustMatch =false)))

        ContractLineMfgDupUOMRel  
			one-to-many relation to ContractLine
			Field Mapping uses ByMfgInfoFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= LocalContract
				related.Manufacturer.ManufacturerCode        				= LocalManufacturerInfo.Manufacturer.ManufacturerCode	
				related.Manufacturer.ManufacturerDivision    				= LocalManufacturerInfo.Manufacturer.ManufacturerDivision
				related.ManufacturerNumber				    				= LocalManufacturerInfo.ManufacturerNumber
			Instance Selection
				where (related.UOM != UOM
				and    related.LineNotClosed
				and  ((ItemType.Special
				and    related.Contract.UOMSMustMatchForSpecials = false)
				or    (ItemType.Itemmast
				and    related.Contract.UOMSMustMatch =false)))

        ContractLineMfgCostRel
			one-to-many relation to ContractLine
			Field Mapping uses ByMfgInfoFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= ContractImport.DerivedToContract
				related.Manufacturer.ManufacturerCode        				= ContractManufacturerInformation.Manufacturer.ManufacturerCode	
				related.Manufacturer.ManufacturerDivision    				= ContractManufacturerInformation.Manufacturer.ManufacturerDivision
				related.ManufacturerNumber				    				= ContractManufacturerInformation.ManufacturerNumber
				related.UOM				 									= UOM
        		related.ManufacturerContract								= ContractImport.DerivedToContract

        ContractLineMfgClosedRel
			one-to-many relation to ContractLine
			Field Mapping uses ByMfgInfoFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= ContractImport.DerivedToContract
				related.Manufacturer.ManufacturerCode        				= ContractManufacturerInformation.Manufacturer.ManufacturerCode	
				related.Manufacturer.ManufacturerDivision    				= ContractManufacturerInformation.Manufacturer.ManufacturerDivision
				related.ManufacturerNumber				    				= ContractManufacturerInformation.ManufacturerNumber
				related.UOM				 									= UOM
        		related.ManufacturerContract								= ContractImport.DerivedToContract
        	Instance Selection
        		where (related.LineClosed)
        		        		
        ContractLineMfgNotClosedRel
			one-to-many relation to ContractLine
			Field Mapping uses ByMfgInfoFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= ContractImport.DerivedToContract
				related.Manufacturer.ManufacturerCode        				= ContractManufacturerInformation.Manufacturer.ManufacturerCode	
				related.Manufacturer.ManufacturerDivision    				= ContractManufacturerInformation.Manufacturer.ManufacturerDivision
				related.ManufacturerNumber				    				= ContractManufacturerInformation.ManufacturerNumber
				related.UOM				 									= UOM
        		related.ManufacturerContract								= ContractImport.DerivedToContract
        	Instance Selection
        		where (related.LineNotClosed)
        		
        ContractLineMfgUpdateVenChgRel
            one-to-many relation to ContractLine
            Field Mapping uses ByMfgInfoFromImport
                related.ContractGroup                                        = ContractGroup
                related.Contract                                             = LocalContract
                related.Manufacturer.ManufacturerCode        				 = LocalManufacturerInfo.Manufacturer.ManufacturerCode    
                related.Manufacturer.ManufacturerDivision    				 = LocalManufacturerInfo.Manufacturer.ManufacturerDivision
                related.ManufacturerNumber            						 = LocalManufacturerInfo.ManufacturerNumber
                related.UOM                                                  = LocalUom
                related.ManufacturerContract                                 = LocalContract
            Instance Selection
                where (related.VendorItem  !=LocalVendorItem
                and    related.HasBeenActivated
                and    related.CanUseForCostDefaulting)
        
        ContractLineItemUpdateRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= LocalContract
				related.ItemNumber		 									= LocalItemNumber	
				related.VendorItem                                          = LocalVendorItem
				related.UOM				 									= LocalUom
        		related.ManufacturerContract								= LocalContract
        	Instance Selection
        		where (related.LineNotClosed)
        		        
        ContractLineItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= ContractImport.DerivedToContract
				related.ItemNumber		 									= ItemNumber	
				related.VendorItem                                          = ContractVendorItem
				related.UOM				 									= UOM
        		related.ManufacturerContract								= ContractImport.DerivedToContract

        ContractLineItemNotClosedRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= ContractImport.DerivedToContract
				related.ItemNumber		 									= ItemNumber	
				related.VendorItem                                          = ContractVendorItem
				related.UOM				 									= UOM
        		related.ManufacturerContract								= ContractImport.DerivedToContract
			Instance Selection
				where (related.LineNotClosed)

        ContractLineItemClosedRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= ContractImport.DerivedToContract
				related.ItemNumber		 									= ItemNumber	
				related.VendorItem                                          = ContractVendorItem
				related.UOM				 									= UOM
        		related.ManufacturerContract								= ContractImport.DerivedToContract
			Instance Selection
				where (related.LineClosed)	
			
		ContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= ContractImport.DerivedToContract			

        ContractLineRel   
			one-to-many relation to ContractLine
			Field Mapping uses ByVenItemFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= ContractImport.DerivedToContract
				related.VendorItem		 									= ContractVendorItem	
				related.UOM				 									= UOM
        		related.ManufacturerContract								= ContractImport.DerivedToContract

		ContractLineVendorItemClosedRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVenItemFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= ContractImport.DerivedToContract
				related.VendorItem		 									= ContractVendorItem	
				related.UOM				 									= UOM
        		related.ManufacturerContract								= ContractImport.DerivedToContract
			Instance Selection
				where (related.LineClosed)	
		
		ContractLineVendorItemNotClosedRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVenItemFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= ContractImport.DerivedToContract
				related.VendorItem		 									= ContractVendorItem	
				related.UOM				 									= UOM
        		related.ManufacturerContract								= ContractImport.DerivedToContract
			Instance Selection
				where (related.LineNotClosed)	
				        		
		ContractLineVendorItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVenItemFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= ContractImport.DerivedToContract
				related.VendorItem		 									= ContractVendorItem	
				related.UOM				 									= UOM
        		related.ManufacturerContract								= ContractImport.DerivedToContract

        ContractLineVenUpdateRel
			one-to-many relation to ContractLine
			Field Mapping uses ByVenItemFromImport
				related.ContractGroup    									= ContractGroup
				related.Contract	     									= LocalContract
				related.VendorItem		 									= LocalVendorItem	
				related.UOM				 									= LocalUom
        		related.ManufacturerContract								= LocalContract
            Instance Selection
            	where (related.LineNotClosed)          
                      
		ContractLineSameItemRel
			one-to-many relation to ContractLine
			Field Mapping uses ByItemContractLine
				related.ContractGroup           = ContractGroup
				related.ItemNumber              = ItemNumber
			Instance Selection
				where (related.ContractSupplier = ContractImport.Supplier
				and    ItemNumber entered)

		ContractLineMainRel 
			one-to-one relation to ContractLine 
			Field Mapping uses symbolic key 
				related.ContractGroup            = ContractGroup 
				related.Contract                 = Contract 
				related.ContractLine             = ContractLine 
        ContractImportPriceChangeRel
        	one-to-one relation to ContractImportPriceChange
        	Field Mapping uses symbolic key
        		related.ContractGroup			  = ContractGroup
        		related.ContractImport			  = ContractImport
        		related.ContractImportPriceChange = LocalPriceChangeDate
        		
        ContractLinePriceChangeRel
        	one-to-many relation to ContractLinePriceChange
        	Field Mapping uses ByBaseCost
        		related.ContractGroup	= ContractGroup
        		related.Contract		= LocalContract
        		related.ContractLine 	= LocalContractLine
			Instance Selection
				where (related.ProcessingType = 1
				or     related.ProcessingType = 6)	
        		
        GetVendorItemFromManufacturerInformationRel
        	one-to-many relation to VendorItem
        	Field Mapping uses Set5
        		related.ProcurementGroup  				= ContractGroup
        		related.Vendor 							= ContractImport.Vendor
        		related.Manufacturer    				= LocalManufacturerInfo.Manufacturer
        		related.ManufacturerNumber				= LocalManufacturerInfo.ManufacturerNumber
        	Instance Selection
        		where (related.Active	
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM.UnitOfMeasure = UOM))
		GetVendorItemFromManufacturerInfoInactiveRel
			one-to-many relation to VendorItem
			Field Mapping uses Set5
				related.ProcurementGroup	= ContractGroup
				related.Vendor				= ContractImport.Vendor
				related.Manufacturer		= LocalManufacturerInfo.Manufacturer
				related.ManufacturerNumber	= LocalManufacturerInfo.ManufacturerNumber
			Instance Selection
				where (related.Active = false
				and    related.Item.AvailableForUse
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM.UnitOfMeasure = UOM))

		VenItemManfDflt
        	one-to-many relation to VendorItem
        	Field Mapping uses Set5
        		related.ProcurementGroup				= ContractGroup
        		related.Vendor							= ContractImport.Vendor
				related.Manufacturer        			= GlobalTradeItemNumber.Manufacturer
				related.ManufacturerNumber      		= GlobalTradeItemNumber.ManufacturerNumber
        		related.Item    						= ItemNumber
        	Instance Selection
        		where (related.Active	
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM.UnitOfMeasure = UOM))	
		VenItemLineManfDflt
        	one-to-many relation to VendorItem
        	Field Mapping uses Set5
        		related.ProcurementGroup				= ContractGroup
        		related.Vendor							= ContractImport.Vendor
				related.Manufacturer         			= ManufacturerInformation.Manufacturer
				related.ManufacturerNumber      		= ManufacturerInformation.ManufacturerNumber
        		related.Item    						= ItemNumber
        	Instance Selection
        		where (related.Active
				and   (related.VendorBuyUOM !entered
				or     related.VendorBuyUOM.UnitOfMeasure = UOM))	

		IcitemgtinManfRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup  			   	= ContractGroup
				related.Manufacturer         	= ManufacturerInformation.Manufacturer
        		related.ManufacturerNumber      = ManufacturerInformation.ManufacturerNumber
				related.Item  		    	   	= ItemNumber
        		related.UnitOfMeasure		   	= UOM

		IcitemgtinManfDefaultRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set7
				related.ItemGroup  			   	= ContractGroup
				related.Manufacturer         	= ManufacturerInformation.Manufacturer
        		related.ManufacturerNumber      = ManufacturerInformation.ManufacturerNumber
				related.Item  		    	   	= ItemNumber
        		related.UnitOfMeasure		   	= UOM
			Instance Selection
				where (related.UseAsDefaultPerUOM = true)

		IcitemgtinRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup 		 	= ContractGroup
				related.ItemGTIN 		 	= GlobalTradeItemNumber
			Instance Selection
				where (related.Item 		!= ItemNumber)

		IcitemgtinGTINRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup  			= ContractGroup
				related.ItemGTIN 			= GlobalTradeItemNumber

		ItemGTINInactiveRel
			one-to-many relation to ItemGTIN
			Field Mapping uses Set2
				related.ItemGroup	= ContractGroup
				related.ItemGTIN	= GlobalTradeItemNumber
			Instance Selection
				where (related.Active = false
				and    related.Item.AvailableForUse)	

		ContractLineDuplicateNewGTINRel
			one-to-many relation to ContractLineImport
			Field Mapping uses ByItemMfgInfo 
				related.ContractGroup 						= ContractGroup
				related.ContractImport	  					= ContractImport
				related.ItemNumber							= ItemNumber
			Instance Selection
				where (related.ManufacturerInformation.Manufacturer.ManufacturerCode		= ManufacturerInformation.Manufacturer.ManufacturerCode
				and	   related.ManufacturerInformation.Manufacturer.ManufacturerDivision	= ManufacturerInformation.Manufacturer.ManufacturerDivision
				and	   related.ManufacturerInformation.ManufacturerNumber		= ManufacturerInformation.ManufacturerNumber
				and	   related.UOM		 										= UOM
				and	   related.GlobalTradeItemNumber entered
				and	   !related.GlobalTradeItemNumber exists
				and	   related.GlobalTradeItemNumber							!= GlobalTradeItemNumber
				and	   related.UniqueID 	   != UniqueID)

		GTINExistsRel 
			one-to-many relation to ContractLineImport
			Field Mapping uses symbolic key 
				related.ContractGroup 	= ContractGroup
				related.ContractImport	= ContractImport
			Instance Selection
				where (related.GlobalTradeItemNumber = GlobalTradeItemNumber
				and    GlobalTradeItemNumber entered
				and    related.ContractLineImport	!= ContractLineImport)
				
		SkuExistsOnItemRel
			one-to-one relation to ItemSKU
			Field Mapping uses Set2 
				related.ItemSKU   = Sku
				related.ItemGroup = ContractGroup
				
		NdcNbrExistsOnItemRel
			one-to-one relation to NationalDrugCode
			Field Mapping uses Set2 
				related.NationalDrugCode   = NdcNbr
				related.ItemGroup          = ContractGroup
				
		HibccUpnExistsOnItemRel
			one-to-one relation to HIBCCItemUPN
			Field Mapping uses Set2 
				related.HIBCCItemUPN  = HibccUpn
				related.ItemGroup     = ContractGroup
				
		UccEanUpnExistsOnItemRel
			one-to-one relation to UCCEANItemUPN
			Field Mapping uses Set2 
				related.UCCEANItemUPN  = DerivedUccEanUpnWithLeadingZeros
				related.ItemGroup      = ContractGroup
				
		UPCExistsOnItemRel
			one-to-one relation to ItemUPC
			Field Mapping uses Set2 
				related.ItemUPC   = Upc
				related.ItemGroup = ContractGroup
				
		ContractFixedTierRel
			one-to-many relation to ContractImportTier
			Field Mapping uses symbolic key
				related.ContractGroup      = ContractGroup
				related.ContractImport     = ContractImport
			Instance Selection
				where (related.TierMarkupDiscount.Fixed)
				
		UpdateContractTierRel
			one-to-one relation to ContractTier
			Field Mapping uses symbolic key
				related.ContractGroup	    = ContractGroup
        		related.Contract    	    = LocalContract
				related.ContractTier        = LocalTier

		ContractLineImportTierCostRel
			one-to-many relation to ContractLineImportTierCost
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.ContractImport	    = ContractImport
				related.ContractLineImport  = ContractLineImport
				
		ContractLineImportTierCostCompareRel
			one-to-many relation to ContractLineImportTierCost
			delete cascades
			Field Mapping uses symbolic key
				related.ContractGroup       = ContractGroup
				related.ContractImport	    = ContractImport
				related.ContractLineImport  = ContractLineImport
			Instance Selection
				where (related.ContractImportTier = LocalTier)
		
		ContractLineErrorsSingleContractRel is a ContractLineImportError set
                
        ContractLineErrorsNotClosedLineRel is a ContractLineImportError set 
			Instance Selection 
				where (related.ErrorMessageNumber != 24)

		ItemByManufacturerRel
			one-to-many relation to Item
			Field Mapping uses Set8
				related.ItemGroup                   = ContractGroup
				related.Manufacturer                = LocalManufacturerInfo.Manufacturer
				related.ManufacturerNumber          = LocalManufacturerInfo.ManufacturerNumber
			Instance Selection
				where (related.Active
				and    related.Manufacturer entered
				and    related.ManufacturerNumber entered)
        
		InactiveItemByManufacturerRel
			one-to-many relation to Item
			Field Mapping uses Set8
				related.ItemGroup			= ContractGroup
				related.Manufacturer		= LocalManufacturerInfo.Manufacturer
				related.ManufacturerNumber	= LocalManufacturerInfo.ManufacturerNumber
			Instance Selection
				where (related.Active = false
				and    related.AvailableForUse
				and    related.Manufacturer entered
				and    related.ManufacturerNumber entered)

        ItemUOMRel
			one-to-one relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup               = ContractGroup
				related.Item                    = ItemNumber
				related.UnitOfMeasure           = UOM
				
		ItemUOMsRel
			one-to-many relation to ItemUOM
			Field Mapping uses symbolic key
				related.ItemGroup               = ContractGroup
				related.Item                    = ItemNumber
				
		ContractLineImportRel
        	one-to-many relation to ContractLineImport
        	Field Mapping uses symbolic key
        		related.ContractGroup       = ContractGroup
        		related.ContractImport      = ContractImport	
		
		InventoryCompaniesInGroupRel
        	one-to-many relation to InventoryCompany
        	Field Mapping uses Set2
        		related.ItemGroup	= ContractGroup
        		
		ContractGPOHeaderRel
			one-to-many relation to ContractGPOHeader
			Field Mapping uses ByGPOContractNumber
				related.GPOContractNumber    = GPOContractNumber		

		ContractGPOItemRel                              
			one-to-many relation to ContractGPOItem
			Field Mapping uses ByGPOContract
				related.GPOContractNumber    = GPOContractNumber
				related.TierLevel       	 = LocalTier
				related.ManufacturerPart     = ManufacturerInformation.ManufacturerNumber
			Instance Selection 
				where (related.StartDate !entered
				or     related.StartDate <= current date)
				
		ContractGPOItemConditionRel
			one-to-many relation to ContractGPOItem
			Field Mapping uses ByGPOContractItems
				related.GPOContractNumber    = GPOContractNumber
				related.ManufacturerPart     = ManufacturerInformation.ManufacturerNumber
				related.VendorPart           = VendorItem
			Instance Selection
				where (related.UOM           = DerivedRelationUOM)

		GHXItemRel
			one-to-many relation to ContractGPOGHXInterface   
			Field Mapping uses ByItem
				related.ContractNumber       	= GPOContractNumber
				related.ManufacturerPartNumber	= ManufacturerInformation.ManufacturerNumber
			Instance Selection
				where (related.UOM             	= DerivedRelationUOM)

		GHXDifferentItemRel
			one-to-many relation to ContractGPOGHXInterface   
			Field Mapping uses ByItem
				related.ContractNumber       	= GPOContractNumber
				related.ManufacturerPartNumber	= ManufacturerInformation.ManufacturerNumber
			Instance Selection
				where (related.UOM             != DerivedRelationUOM)		
		
		ContractGPOVendorItemRel
			one-to-many relation to ContractGPOItem
			Field Mapping uses ByGPOContractItems
				related.GPOContractNumber    = LocalGPOContractNumber
				related.ManufacturerPart     = LocalManufacturerNumber








		
		ContractGPOItemForManufacturerNumberRel 
			one-to-many relation to ContractGPOItem 
			Field Mapping uses symbolic key 
			Instance Selection 
				where (related.ManufacturerPart     = ManufacturerInformation.ManufacturerNumber 
				and    related.ManufacturerSupplier = related.ItemSupplier
				and    related.GPOContractNumber   != GPOContractNumber)

		ContractGPOGHXItemForManufacturerNumberRel 
			one-to-many relation to ContractGPOGHXInterface 
			Field Mapping uses ByPartNumberFirst 
				related.ManufacturerPartNumber     = ManufacturerInformation.ManufacturerNumber 
			Instance Selection 
				where (related.ManufacturerEID = related.VendorEID
				and    related.ContractNumber      != GPOContractNumber)

		ContractGPOItemFormRel
			one-to-many relation to ContractGPOItem
			Field Mapping uses ByGPOContractItems
				related.GPOContractNumber    = GPOContractNumber
				related.ManufacturerPart     = ManufacturerInformation.ManufacturerNumber			
		
		ContractGPOItemUOMRel
			one-to-many relation to ContractGPOItem
			Field Mapping uses ByGPOContractItems
				related.GPOContractNumber    = GPOContractNumber
				related.ManufacturerPart     = ManufacturerInformation.ManufacturerNumber
			Instance Selection
				where (related.UOM           = DerivedRelationUOM)

		ContractGHXItemFormRel
			one-to-many relation to ContractGPOGHXInterface
			Field Mapping uses ByItem
				related.ContractNumber      	   = GPOContractNumber
				related.ManufacturerPartNumber     = ManufacturerInformation.ManufacturerNumber	

		UpdatedDistributorLineRel
			one-to-many relation to ContractLineImportDistributor
			Field Mapping uses symbolic key
				related.ContractGroup        = ContractGroup
				related.ContractImport       = ContractImport
				related.ContractLineImport   = ContractLineImport
			Instance Selection
				where (related.LineChanged = true)

		ContractLineImportDistributorRel is a ContractLineImportDistributor set

		ContractLineImportDistributorNewItemRel is a ContractLineImportDistributor set
			Instance Selection 
				where (related.ContractVendorItem !entered
				and    related.ContractImportDistributorRel.ParticipantsExist)

		NewItemContractRel
			one-to-one relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup        = ContractGroup
				related.Contract             = LocalContract
	
			
	Field Rules
		

		ItemNumber
		
			if (ItemNumber exists)
				ItemDescription		= ItemNumber.Description
				ItemDescription2	= ItemNumber.Description2
				ItemDescription3    = ItemNumber.Description3		

		ItemDescription3
			constraint (!ItemType.Service)
				"CannotEnterLongDescriptionForServiceItem"
				
		ItemType
			if (ContractImport.ServicePurchaseType)
				ItemType = ItemType.Service

		ServiceCode
			if (ItemType.Service)
				required
			if (ServiceItem)
				default to ServiceCode.Quantity
				constraint (ServiceCode.Quantity
				or 	        ServiceCode.Amount)
					"ServiceCodeMustBeQuantityOrAmountWhenPurchaseTypeIsService"
			else
				ServiceCode = ServiceCode.NotServiceItem
			if (ItemType.Itemmast)
				constraint(ServiceCode.NotServiceItem)
					"ServiceItemsCannotExistOnTheItemMaster"
				
		VendorItem
			if (ContractImport.NoPurchaseType
			and !ContractImport.ManufacturerOrDistributor.ManufacturerContract)
				constraint (!VendorItem entered)
					"CannotEnterVendorItem;ContractHasNoPurchaseType"
			if (VendorItem !entered
			and ContractImport.HasAPurchaseType
			and ContractImport.Vendor entered) 
				if (ItemNumber exists)
					if (GlobalTradeItemNumber entered)
						if (VenItemManfDflt exists)
							VendorItem = first VenItemManfDflt.VendorItem
					if (VendorItem !entered)
						if (VenItemLineManfDflt exists
						and VenItemLineManfDflt.Manufacturer.ManufacturerCode entered) 
							VendorItem = first VenItemLineManfDflt.VendorItem
					if (VendorItem !entered)
						if (DefaultPovenitemRel exists)
							VendorItem = first DefaultPovenitemRel.VendorItem
				else
					if (ManufacturerInformation.ManufacturerNumber entered
					and !VendorItemExistsFromManufacturerNumber)
						VendorItem = ManufacturerInformation.ManufacturerNumber
			
			if (!VendorItem entered
			and !ManufNumberEntered
			and  NonServiceItem
			and  CanUseForCostDefaulting)
				required
					"VendorItemOrManufacturerNumberIsRequired"
							
			if (NonDirectBuyItem)
				if (VendorItem not entered)
					if (ItemNumber exists
					and ContractImport.Vendor entered
					and !GlobalTradeItemNumber entered
					and DefaultPovenitemRel exists)
						default to first DefaultPovenitemRel.VendorItem
										
					else
					if (ManufacturerInformation.ManufacturerNumber entered)
						if (ManufacturerInformation.Manufacturer entered)
							LocalManufacturerInfo		= ManufacturerInformation
						else
							LocalManufacturerInfo.ManufacturerNumber	= ManufacturerInformation.ManufacturerNumber
							LocalManufacturerInfo.Manufacturer			= ContractImport.ManufacturerCodeDivision
							
						if (GetVendorItemFromManufacturerInformationRel exists)
							ItemNumber		 		 	= first GetVendorItemFromManufacturerInformationRel.Item
							VendorItem 				 	= first GetVendorItemFromManufacturerInformationRel.VendorItem
						if (VendorItem not entered)
							VendorItem				= ManufacturerInformation.ManufacturerNumber

			if  (ContractImport.ServicePurchaseType)				
				force default to blank
					
		VendorItemDescription
			if  (ContractImport.ServicePurchaseType)				
				force default to blank					
        	constraint (VendorItem entered)
				"MustEnterVendorItem"
			if (PovenitemRel exists)
				VendorItemDescription = VendorItem.VendorItemDescription

		UOM
			if  (VendorItem entered)
		    	if (UOM != blank)
					if (VendorItem.VendorBuyUOM  != blank
					and VendorItem.VendorPriceUOM = blank)
						constraint (UOM = VendorItem.VendorBuyUOM)
							"EnteredUOMMustMatchTheVendorItemBuyUOMWhenItExists"
					if (VendorItem.VendorPriceUOM != blank)
						constraint (UOM = VendorItem.VendorPriceUOM)
							"EnteredUOMMustMatchTheVendorItemPriceUOMWhenItExists"
				else
					if (VendorItem.VendorPriceUOM = VendorItem.VendorBuyUOM
					or  VendorItem.VendorPriceUOM = blank)
						default to VendorItem.VendorBuyUOM
						LocalUOMDefaultedFromVendorItem = true
					else		
						default to VendorItem.VendorPriceUOM
						LocalUOMDefaultedFromVendorItem = true

			if (!UOM entered)
				if (GlobalTradeItemNumber exists)
	        		constraint (!GlobalTradeItemNumber.ItemUOMRel.ValidForBuying.Inactive)
	        			"GTIN_UOMOf<GlobalTradeItemNumber.UnitOfMeasure.UnitOfMeasure>IsAnInactiveBuyUOMForItem<ItemNumber>"
	        		constraint (GlobalTradeItemNumber.ItemUOMRel.OKForBuying)
	        			"GTIN_UOMOf<GlobalTradeItemNumber.UnitOfMeasure.UnitOfMeasure>IsNotAValidBuyUOMForItem<ItemNumber>"
					default to GlobalTradeItemNumber.UnitOfMeasure
				else
				if  (ItemNumberExists)
					if (!ItemNumber.IsCatchWeightItem)
						default to ItemNumber.DefaultBuyUOM
					if (ItemNumber.IsCatchWeightItem)
						default to ItemNumber.StockUOM
				else
					required
			else
				if (ItemNumber exists)
	        		constraint (!ItemUOMRel.ValidForBuying.Inactive)
	        			"<UOM>IsAnInactiveBuyUOMForThisItem"
			if 	(!UOM entered
			and (ItemType.Special
			or  (ItemType.Service
			and  ServiceCode.Quantity)))
				required
							
		CommodityCode	

			if (CommodityCode changed)
				if (ItemNumber exists 
				and ItemNumber.CommodityCode entered)
					constraint (CommodityCode = ItemNumber.CommodityCode) 		        
						"CommodityCodeMustBeMaintainedOnItemMaster"
	
		ManufacturerInformation
			
			if  (ContractImport.ServicePurchaseType
			and  !GlobalTradeItemNumber entered)				
				initialize
				
			if (ManufacturerInformation.Manufacturer not entered)
				if (!VendorItem entered
				or  !VendorItem exists
				or (VendorItem exists
				and !VendorItem.Manufacturer.ManufacturerCode entered))  
					ManufacturerInformation.Manufacturer		= ContractImport.ManufacturerCodeDivision

			if (ServiceItem)
				constraint (ManufacturerInformation.ManufacturerNumber not entered)
					"ServiceTypeItem;ManufacturerItemNumberMustBeBlank"

			if (GlobalTradeItemNumber exists)
				ManufacturerInformation.Manufacturer.ManufacturerCode	 = GlobalTradeItemNumber.Manufacturer.ManufacturerCode
				ManufacturerInformation.Manufacturer.ManufacturerDivision = GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
				ManufacturerInformation.ManufacturerNumber		 = GlobalTradeItemNumber.ManufacturerNumber
			else						
			if (VendorItem exists)
				if (ContractImport.ContractType.PurchaseType entered
				or   NonDirectBuyItem)
					if (ManufacturerInformation.Manufacturer !entered)
						ManufacturerInformation.Manufacturer.ManufacturerCode 		= VendorItem.Manufacturer.ManufacturerCode
						ManufacturerInformation.Manufacturer.ManufacturerDivision	= VendorItem.Manufacturer.ManufacturerDivision
					if (ManufacturerInformation.ManufacturerNumber !entered)
						ManufacturerInformation.ManufacturerNumber					= VendorItem.ManufacturerNumber
			else
			if (ItemNumber exists)
				if  (ManufacturerInformation.ManufacturerNumber !entered
				and (ContractImport.ContractType.PurchaseType entered
				or   NonDirectBuyItem))
					if (ItemNumber.Manufacturer entered
					and ManufacturerInformation.Manufacturer !entered)
						ManufacturerInformation.Manufacturer = ItemNumber.Manufacturer
					if (ItemNumber.ManufacturerNumber entered)
						ManufacturerInformation.ManufacturerNumber = ItemNumber.ManufacturerNumber
			
		Sku
			
	   		if (ServiceItem)
	   			force default to blank
						
			if (ItemNumber exists)
				constraint (!Sku changed)
					"SKUNumberMustBeMaintainedOnItemMaster"
					
			if (ItemType.Special
			and CanUseForCostDefaulting)
				constraint (!SkuExistsOnItemRel exists)
					"SKUNumber<Sku>IsAlreadyAssignedToItem<SkuExistsOnItemRel.Item>"
					
	  	NdcNbr 	
	   		
	   		if (ServiceItem)
	   			force default to blank
						
			if (ItemNumber exists)
				constraint (!NdcNbr changed)
					"NDCNumberMustBeMaintainedOnItemMaster"
					
			if (ItemType.Special
			and CanUseForCostDefaulting)
				constraint (!NdcNbrExistsOnItemRel exists)
					"NDCNumber<NdcNbr>IsAlreadyAssignedToItem<NdcNbrExistsOnItemRel.Item>"
					
	   	HibccUpn
	   		
	   		if (ServiceItem)
	   			force default to blank
						
			if (ItemNumber exists)
				constraint (!HibccUpn changed)
					"HibccUPNNumberMustBeMaintainedOnItemMaster"
					
			if (ItemType.Special
			and CanUseForCostDefaulting)
				constraint (!HibccUpnExistsOnItemRel exists)
					"HibccUpnNumber<HibccUpn>IsAlreadyAssignedToItem<HibccUpnExistsOnItemRel.Item>"
			
	   	UccEanUpn 
	   		
	   		if (ServiceItem)
	   			force default to blank
						
			if (ItemNumber exists)
				constraint (!UccEanUpn changed)
					"UCCEANUPNNumberMustBeMaintainedOnItemMaster"
					
			if (ItemType.Special
			and CanUseForCostDefaulting)
				constraint (!UccEanUpnExistsOnItemRel exists)
					"UccEanUpnNumber<DerivedUccEanUpn>IsAlreadyAssignedToItem<UccEanUpnExistsOnItemRel.Item>"
			
	   	Upc
	   		
	   		if (ServiceItem)
	   			force default to blank
						
			if (ItemNumber exists)
				constraint (!Upc changed)
					"UPCNumberMustBeMaintainedOnItemMaster"
					
			if (ItemType.Special
			and CanUseForCostDefaulting)
				constraint (!UPCExistsOnItemRel exists)
					"UpcNumber<Upc>IsAlreadyAssignedToItem<UPCExistsOnItemRel.Item>"
					
		GenericName
			if (ItemNumber exists)
				constraint (!GenericName changed)
					"GenericNameMustBeMaintainedOnItemMaster"
					
	   		if (ServiceItem)
				force default to blank
					
		LabelerIdentificationCode
			if (VendorItem exists)
				constraint (!LabelerIdentificationCode changed)
					"LabelerIdentificationCodeMustBeMaintainedOnVendorItem"

	   		if (ServiceItem)
	   			force default to blank

		BaseCost
			constraint (!BaseCost < 0)
				"BaseCostCannotBeLessThanZero"
			if (ContractImport.PerOrderMaximumAmount != 0)
				constraint (BaseCost <= ContractImport.PerOrderMaximumAmount)
					"BaseCostCannotBeGreaterThanTheContractPerOrderMaximumAmount"
			if (LifetimeMaximumAmount entered
			and !ContractImport.ServicePurchaseType)
				constraint (BaseCost <= LifetimeMaximumAmount)
					"BaseCostCannotBeGreaterThanTheContractLineMaximumAmount"
			if (ContractImport.MaximumAmount !=0)
				constraint (BaseCost <= ContractImport.MaximumAmount)
					"BaseCostCannotBeGreaterThanTheContractMaximumAmount"

		Quantity
			if  (!ContractImport.StandingPurchaseType
			and  old ContractImport.StandingPurchaseType)
				force default to 0
			
			if ((!ItemType.Service and ServiceCode.Amount)
			or  (!ContractImport.StandingPurchaseType))
				cannot be entered

			if (ItemType.Service and ServiceCode.Amount
			and ContractImport.StandingPurchaseType)
				constraint (!Quantity > 1)
					"CannotEnterStandingQuantityGreaterThanOneForItemTypeService,ServiceCodeAmount"
				default to 1 								
		
		UseCommitments
			if (ContractImport.CreateCommitments.No)
				cannot be entered
					"CannotUseCommitmentsOnThisLine;TheContractIsNotSetToUseCommitments"
		
		Retainage
			initial value is true
				when (ContractImport.UseRetainage)			
		
		RetainagePercent1
			initial value is (ContractImport.RetainagePercent1)
				when (ContractImport.UseRetainage)
					
		RetainageUpToPercent
			initial value is (ContractImport.RetainageUpToPercent)
				when (ContractImport.UseRetainage)
		
		RetainagePercent2
			initial value is (ContractImport.RetainagePercent2)
				when (ContractImport.UseRetainage)
										
		RetainageOverridePercent
			initial value is (ContractImport.RetainageOverridePercent)
				when (ContractImport.UseRetainage)
		
		LifetimeMaximumQuantity
			if (ServiceCode.Quantity)
				required
			if (ServiceCode.Amount)
				constraint (LifetimeMaximumQuantity not entered)
					"CannotDefineQuantityLimitsForAnAmountTypeServiceItem"
		LifetimeMaximumAmount
			if  (ContractImport.ServicePurchaseType
			and  ServiceCode.Amount)
				force default to BaseCost
			if  (ContractImport.ServicePurchaseType
			and  ServiceCode.Quantity)
				LifetimeMaximumAmount = (BaseCost * LifetimeMaximumQuantity)
			if (ContractImport.MaximumAmount != 0)
				constraint (LifetimeMaximumAmount <= ContractImport.MaximumAmount)
					"MaximumAmountCannotBeGreaterThanTheContractMaximumAmount"
		PerOrderMaximumQuantity
			if  (ContractImport.StandingPurchaseType)
				constraint (!PerOrderMaximumQuantity entered)
					"CannotEnterAPerOrderMaximumQuantityForStandingPurchaseTypes"		
			if (ServiceCode.Amount)
				initialize
			if (LifetimeMaximumQuantity != 0)
				constraint (PerOrderMaximumQuantity <= LifetimeMaximumQuantity)
					"PerOrderMaximumQuantityCannotBeGreaterThanTheContractLineMaximumQuantity"
		PerOrderMaximumAmount
			if (!ServiceCode.Amount)	
				constraint (BaseCost <= PerOrderMaximumAmount)
					"BaseCostCannotBeGreaterThanTheContractLinePerOrderMaximumAmount"
			if  (ContractImport.StandingPurchaseType)
				constraint (PerOrderMaximumAmount not entered)
					"CannotEnterAPerOrderMaximumAmountForStandingPurchaseTypes"		
			if (LifetimeMaximumAmount != 0)
				constraint (PerOrderMaximumAmount <= LifetimeMaximumAmount)
					"PerOrderMaximumAmountCannotBeGreaterThanTheContractLineMaximumAmount"
			if (ContractImport.PerOrderMaximumAmount != 0)
				constraint (PerOrderMaximumAmount <= ContractImport.PerOrderMaximumAmount)
					"PerOrderMaximumAmountCannotBeGreaterThanTheContractMaximumAmount"
			if (ContractImport.MaximumAmount != 0)
				constraint (PerOrderMaximumAmount <= ContractImport.MaximumAmount)
					"PerOrderMaximumAmountCannotBeGreaterThanContractLifetimeMaximumAmount"
					
		PerOrderMinimumQuantity
			if  (ContractImport.StandingPurchaseType)
				constraint (PerOrderMinimumQuantity not entered)
					"CannotEnterAPerOrderMinimumQuantityForStandingPurchaseTypes"		
			if (ServiceCode.Amount)
				initialize
			if (PerOrderMaximumQuantity != 0)
				constraint (PerOrderMinimumQuantity <= PerOrderMaximumQuantity)
					"PerOrderMinimumQuantityCannotBeGreaterThanTheContractLinePerOrderMaximumQuantity"
		PerOrderMinimumAmount
			if  (ContractImport.StandingPurchaseType)
				constraint (PerOrderMinimumAmount not entered)
					"CannotEnterAPerOrderMinimumAmountForStandingPurchaseTypes"		
			if (PerOrderMaximumAmount != 0)
				constraint (PerOrderMinimumAmount <= PerOrderMaximumAmount)
					"PerOrderMinimumAmountCannotBeGreaterThanTheContractLinePerOrderMaximumAmount"
			if (LifetimeMaximumAmount != 0)
				constraint (PerOrderMinimumAmount <= LifetimeMaximumAmount)
					"PerOrderMinimumAmountCannotBeGreaterThanTheContractLineMaximumAmount"
			if (ContractImport.PerOrderMinimumAmount != 0)
				constraint (PerOrderMinimumAmount >= ContractImport.PerOrderMinimumAmount)
					"PerOrderMinimumAmountCannotBeLessThanTheContractPerOrderMinimumAmount"
			if (ContractImport.PerOrderMaximumAmount != 0)
				constraint (PerOrderMinimumAmount <= ContractImport.PerOrderMaximumAmount)
					"PerOrderMinimumAmountCannotBeGreaterThanTheContractPerOrderMaximumAmount"
			if (ContractImport.MaximumAmount != 0)
				constraint (PerOrderMinimumAmount <= ContractImport.MaximumAmount)
					"PerOrderMinimumAmountCannotBeGreaterThanContractLifetimeMaximumAmount"
					
		Taxable
			default to ContractImport.DefaultTaxable
		TaxCode
			if (Taxable)
				default to ContractImport.TaxCode
				required
					"TaxCodeIsRequiredWhenTaxableFlagIsYes"
			constraint(Taxable)
				"CannotHaveATaxCodeIfTheTaxableFlagIsNo"
		TaxUsageCode 
			if (TaxUsageCode entered)		
				constraint(Taxable)
					"CannotHaveATaxUsageCodeIfTheTaxableFlagIsNo"

	    Priority
			if (ContractImport.StandingPurchaseType)				
				default to 0
				constraint (Priority = 0)
					"CannotEnterAValueForPriorityForStandingOrServicePurchaseTypes"
			else
			if  (ContractImport.ServicePurchaseType)				
				force default to 0
			else
				default to ContractImport.Priority		
		
		CostOption
			default to 1
			if (CostOption.NoCharge
			or  CostOption.VendorDetermined)
				constraint (BaseCost = 0)
					"BaseCostMustEqualZeroWhenCostOptionIsNoChargeOrVendorDetermined"
			else
				if (ContractImport.ContractImportSource.Manual)
					constraint (BaseCost not = 0)
						"BaseCostIsRequiredWhenCostOptionIsCostRequired"
		
			if (NonDirectBuyItem)
				if (VendorItem not entered)
					if (ManufacturerInformation.Manufacturer.ManufacturerCode not entered)
						constraint (ManufacturerInformation.Manufacturer.ManufacturerCode entered
						and         ManufacturerInformation.ManufacturerNumber entered)
							"VendorItemOrManufacturerCode/ManufacturerNumberAreRequired"
						if (ManufacturerInformation.ManufacturerNumber entered)
							constraint (ManufacturerInformation.Manufacturer.ManufacturerCode entered)
								"ManufacturerCodeIsRequiredWithManufacturerNumber"
					else
						constraint (ManufacturerInformation.ManufacturerNumber entered)
							"VendorItemOrManufacturerNumberIsRequired"

		ConsignmentPriceBreak
			edit contiguous
				"PriceBreakEntriesMustBeContiguous"
			
			LastUnitCost   	= BaseCost
			LastUnitPercent = BasePercent
			LastQuantity    = 0
			HasUnitPercent  = false
			HasUnitCost    	= false
			for each ConsignmentPriceBreak.QuantityPercentPrice
				if (each.UnitPercent > 0)
					HasUnitPercent = true
				else
				if (each.UnitPrice > 0)
					HasUnitCost = true
					
				if (HasUnitPercent or HasUnitCost)
					constraint ((HasUnitPercent and !HasUnitCost) 
							or (!HasUnitPercent and HasUnitCost))
								"MustEnterAllPercentOrAllCostTypeBreaksForALineItem"
				
			for each ConsignmentPriceBreak.QuantityPercentPrice
				if (each.Quantity entered)
					constraint (each.Quantity > LastQuantity)
						"BreakQuantitiesMustBeGreaterThanTheLastQuantity"
				if (!ContractImport.LineLevelBreaks.OrderTotals)					
					if (each.UnitPrice entered)
						constraint (each.UnitPrice < LastUnitCost)
							"EachHigherPriceBreakMustShowASmallerUnitCost"
				if (ConsignmentPricingMarkupOrDiscount.Markup)
					if (each.UnitPercent entered)
						constraint (each.UnitPercent < LastUnitPercent)
							"EachHigherPriceBreakMustIndicateASmallerMarkup"
				else	
					if (ConsignmentPricingMarkupOrDiscount.Discount)
						if (each.UnitPercent entered)
							constraint (each.UnitPercent > LastUnitPercent)
								"EachHigherPriceBreakMustIndicateAGreaterDiscount"
				LastQuantity    = each.Quantity
				LastUnitCost   	= each.UnitPrice
				LastUnitPercent = each.UnitPercent
		ConsignmentPricingMarkupOrDiscount
			if (ContractImport.IsManufacturerOrDistributorContract)
				cannot be entered
					"PriceBreaksNotAllowedForManufacturerOrDistributorContracts"
			if (ContractImport.StandingPurchaseType)
				cannot be entered
					"PriceBreaksNotAllowedForStandingPurchaseTypes"
			if (ConsignmentPriceBreak entered)
				required
					"MustEnterConsignmentPricingMarkupOrDiscountWhenEnteringPriceBreaks"			
			else
				cannot be entered		
					"CannotEnterConsignmentLinePriceBreakOnConsignmentPricingMarkupOrDiscountIfNoPriceBreaksExist"
		ConsignmentLinePriceBreakOn
			if (ContractImport.IsManufacturerOrDistributorContract)
				cannot be entered
					"PriceBreaksNotAllowedForManufacturerOrDistributorContracts"
			if (ContractImport.StandingPurchaseType)
				cannot be entered
					"PriceBreaksNotAllowedForStandingPurchaseTypes"
			if (ConsignmentPriceBreak entered)
				required
					"ConsignmentQuantityOrAmountBreakFlagMustBeEnteredWhenPriceBreaksExist"
			else
				cannot be entered		
					"CannotEnterValuesForTheConsignmentQuantityOrAmountBreakFlagIfNoPriceBreaksExist"
			if (ConsignmentLinePriceBreakOn.Amount)
				constraint (!ContractImport.LineLevelBreaks.OrderTotals)
					"CannotDoPurchaseOrderLevelBreaksByAmount"
		PriceBreakImport
			constraint (!ServiceCode.Amount)
				"CannotEnterPriceBreakInformationForAmountTypeService"
			edit contiguous
				"PriceBreakEntriesMustBeContiguous"
			
			LastUnitCost   	= BaseCost
			LastUnitPercent = BasePercent
			LastQuantity    = 0
			HasUnitPercent  = false
			HasUnitCost    	= false
			for each PriceBreakImport.QuantityPercentPrice
				if (each.UnitPercent > 0)
					HasUnitPercent = true
				else
				if (each.UnitPrice > 0)
					HasUnitCost = true
					
				if (HasUnitPercent or HasUnitCost)
					constraint ((HasUnitPercent and !HasUnitCost) 
							or (!HasUnitPercent and HasUnitCost))
								"MustEnterAllPercentOrAllCostTypeBreaksForALineItem"
				
			for each PriceBreakImport.QuantityPercentPrice
				if (each.Quantity entered)
					constraint (each.Quantity > LastQuantity)
						"BreakQuantitiesMustBeGreaterThanTheLastQuantity"
				if (!ContractImport.LineLevelBreaks.OrderTotals)					
					if (each.UnitPrice entered)
						constraint (each.UnitPrice < LastUnitCost)
							"EachHigherPriceBreakMustShowASmallerUnitCost"
				if (PricingMarkupOrDiscount.Markup)
					if (each.UnitPercent entered)
						constraint (each.UnitPercent < LastUnitPercent)
							"EachHigherPriceBreakMustIndicateASmallerMarkup"	
				else
					if (PricingMarkupOrDiscount.Discount)
						if (each.UnitPercent entered)
							constraint (each.UnitPercent > LastUnitPercent)
								"EachHigherPriceBreakMustIndicateAGreaterDiscount"
				LastQuantity    = each.Quantity
				LastUnitCost    = each.UnitPrice
				LastUnitPercent = each.UnitPercent
						
		PricingMarkupOrDiscount
			if (ContractImport.IsManufacturerOrDistributorContract)
				cannot be entered
					"PriceBreaksNotAllowedForManufacturerOrDistributorContracts"
			if (ContractImport.StandingPurchaseType)
				cannot be entered
					"PriceBreaksNotAllowedForStandingPurchaseTypes"
			if (PriceBreakImport entered)
				required
					"MustEnterPricingMarkupOrDiscountWhenEnteringPriceBreaks"
			else
				cannot be entered		
					"CannotEnterValuesForPricingMarkupOrDiscountIfNoPriceBreaksExist"
		LinePriceBreakOn
			if (ContractImport.IsManufacturerOrDistributorContract)
				cannot be entered
					"PriceBreaksNotAllowedForManufacturerOrDistributorContracts"
			if (ContractImport.StandingPurchaseType)
				cannot be entered
					"PriceBreaksNotAllowedForStandingPurchaseTypes"
			if (PriceBreakImport entered)
				required
					"QuantityOrAmountBreakFlagMustBeEnteredWhenPriceBreaksExist"
			else
				cannot be entered		
					"CannotEnterValuesForTheQuantityOrAmountBreakFlagIfNoPriceBreaksExist"
			if (LinePriceBreakOn.Quantity)
				constraint (ByQuantityAllowed)
					"ByQuantityFlagIsNotAllowedForServiceItemsOnNonServicePurchaseTypes"
			if (LinePriceBreakOn.Amount)
				constraint (!ContractImport.LineLevelBreaks.OrderTotals)
					"CannotDoPurchaseOrderLevelBreaksByAmount"
		LocalBaseCostUpdatedFromZero
			default to false
		LocalBaseCostChanged
			default to false

		DefaultAccount

			if (DefaultAccount entered)
				constraint (PayablesDistributionCode !entered)
					"CannotEnterDefaultAccountAndDistributionCode"	
					
		PayablesDistributionCode
			initial value is ContractImport.PayablesDistributionCode
			constraint (PayablesDistributionCode.IsPercentDistributionCode)
				"TheDistributionCodeMustBeDefinedWithPercents,NotAmounts"
		
			if (PayablesDistributionCode entered)
				constraint (DefaultAccount !entered)
					"CannotEnterDefaultAccountAndDistributionCode"

		BlanketStandingRequestingLocation
			initial value is ContractImport.BlanketStandingRequestingLocation
					
		CreateFromCopy
			default to false
    	EffectiveDate
    		default to ContractImport.EffectiveDate
    		if (EffectiveDate changed)
    			if (EffectiveDate not entered)
    				default to ContractImport.EffectiveDate
    			if (EffectiveDate > 0)
    				if (ContractImport.EffectiveDate > 0)
    					constraint (EffectiveDate >= ContractImport.EffectiveDate)
    						"ContractLineEffectiveDateCannotBePriorToContractEffectiveDate"
    				if (ContractImport.ExpirationDate > 0)
	    				constraint (EffectiveDate <= ContractImport.ExpirationDate)
	    					"ContractLineEffectiveDateCannotBeAfterToContractExpirationDate"
		ExpirationDate
    		default to ContractImport.ExpirationDate
    		if (ExpirationDate changed)
    			if (ExpirationDate not entered)
    				default to ContractImport.ExpirationDate
    			if (ExpirationDate > 0)
    				if (ContractImport.EffectiveDate > 0)
						constraint (ExpirationDate > ContractImport.EffectiveDate)
							"ExpirationDateMustBeGreaterThanContractEffectiveDate"			
    				if (EffectiveDate > 0)
						constraint (ExpirationDate > EffectiveDate)
							"ExpirationDateMustBeGreaterThanEffectiveDate"			
    				if (ContractImport.ExpirationDate > 0)
    					constraint (ExpirationDate <= ContractImport.ExpirationDate)
    						"ContractLineExpirationDateCannotBeAfterContractExpirationDate"
		UserField1 
			if (ItemNumber exists)
				constraint (!UserField1 changed)
					"ItemAlpha1MustBeMaintainedOnItemMaster"

	   		if (ServiceItem)
	   			force default to blank
					
		UserField2
			if (ItemNumber exists)
				constraint (!UserField2 changed)
					"ItemAlpha2MustBeMaintainedOnItemMaster"

	   		if (ServiceItem)
	   			force default to blank
						
		UserField3
			if (ItemNumber exists)
				constraint (!UserField3 changed)
					"ItemAlpha3MustBeMaintainedOnItemMaster"

	   		if (ServiceItem)
	   			force default to blank
						
		UserField4
			if (ItemNumber exists)
				constraint (!UserField4 changed)
					"ItemAlpha4MustBeMaintainedOnItemMaster"

	   		if (ServiceItem)
	   			force default to blank
						
		UserField5
			if (ItemNumber exists)
				constraint (!UserField5 changed)
					"ItemAlpha5MustBeMaintainedOnItemMaster"

	   		if (ServiceItem)
	   			force default to blank
						
		UserFieldN1 			
			if (ItemNumber exists)
				constraint (!UserFieldN1 changed)
					"ItemNumeric1MustBeMaintainedOnItemMaster"

	   		if (ServiceItem)
	   			force default to 0
						
		UserFieldN2			
			if (ItemNumber exists)
				constraint (!UserFieldN2 changed)
					"ItemNumeric2MustBeMaintainedOnItemMaster"

	   		if (ServiceItem)
	   			force default to 0
						
		UserFieldN3			
			if (ItemNumber exists)
				constraint (!UserFieldN3 changed)
					"ItemNumeric3MustBeMaintainedOnItemMaster"

	   		if (ServiceItem)
	   			force default to 0

		PurchaseOrderUserField2
			if  (ContractImport.ServicePurchaseType)				
				force default to blank
						
		PurchaseOrderUserField4
			if  (ContractImport.ServicePurchaseType)				
				force default to blank
						
		PurchaseOrderUserField6
			if  (ContractImport.ServicePurchaseType)				
				force default to blank
						
		MajorPurchasingClass
			if (ItemNumber exists)
				constraint (!MajorPurchasingClass changed)
					"MajorPurchasingClassMustBeMaintainedOnItemMaster"

	   		if (ServiceItem)
	   			initialize
					
		MinorPurchasingClass
			if (ItemNumber exists)
				constraint (!MinorPurchasingClass changed)
					"MinorPurchasingClassMustBeMaintainedOnItemMaster"

	   		if (ServiceItem)
	   			initialize
					
		MajorInventoryClass
	   		if (ServiceItem)
	   			initialize
						
		MinorInventoryClass
	   		if (ServiceItem)
	   			initialize
		
		UNSPSCCode
			
	   		if (ServiceItem)
	   			initialize
					
		GlobalTradeItemNumber

        	if (ItemNumber exists
        	and ManufacturerInformation entered
        	and GlobalTradeItemNumber entered
        	and !GlobalTradeItemNumber exists)
        		constraint (!ContractLineDuplicateNewGTINRel exists)
    				"ContractLineImport<first ContractLineDuplicateNewGTINRel.ContractLineImport>ExistsWithADifferentGTINForThisItem,ManufacturerInformation,AndUOM"

        	if (ItemNumber exists
        	and ManufacturerInformation entered)
				if (ItemGroupRel.AllowMultipleGTINs = false)
	        		if (IcitemgtinManfRel exists
    	    		and IcitemgtinManfRel.Active)
        				if (GlobalTradeItemNumber entered)
	        				constraint (GlobalTradeItemNumber = IcitemgtinManfRel.ItemGTIN)
	        					"GTIN<GlobalTradeItemNumber>DoesNotMatchExistingGTINForThisItem,ManufacturerInformation,AndUOM"
		        		default to first IcitemgtinManfRel.ItemGTIN
				else
					if (IcitemgtinManfDefaultRel exists
					and IcitemgtinManfDefaultRel.Active)
		        		default to first IcitemgtinManfDefaultRel.ItemGTIN

			if (GlobalTradeItemNumber exists)
				constraint (GlobalTradeItemNumber.Active)
					"GTIN<GlobalTradeItemNumber>IsInactive"

				if (UOM entered)
					constraint (GlobalTradeItemNumber.UnitOfMeasure = UOM)
						"GTINUnitOfMeasureOf<GlobalTradeItemNumber.UnitOfMeasure.UnitOfMeasure>MustBeTheSameAs<DerivedUOMDefault>UOMOf<UOM>"

				if (VendorItem exists
				and VendorItem.ManufacturerNumber entered)
					constraint (GlobalTradeItemNumber.Manufacturer.ManufacturerCode 		= 	VendorItem.Manufacturer.ManufacturerCode
					and         GlobalTradeItemNumber.Manufacturer.ManufacturerDivision 	= 	VendorItem.Manufacturer.ManufacturerDivision
					and         GlobalTradeItemNumber.ManufacturerNumber 					= 	VendorItem.ManufacturerNumber)
						"ManufacturerInformationMustBeTheSameOnGTIN<GlobalTradeItemNumber>AndVendorItem<VendorItem>"

				ManufacturerInformation.Manufacturer.ManufacturerCode		= GlobalTradeItemNumber.Manufacturer.ManufacturerCode
				ManufacturerInformation.Manufacturer.ManufacturerDivision	= GlobalTradeItemNumber.Manufacturer.ManufacturerDivision
				ManufacturerInformation.ManufacturerNumber					= GlobalTradeItemNumber.ManufacturerNumber

			if (GlobalTradeItemNumber entered)
				if (GetVendorItemSetRel exists)
					constraint (GlobalTradeItemNumber exists)
						"GTIN<GlobalTradeItemNumber>DoesNotExistForItem<ItemNumber>;MustMaintainOnItemMaster"

				if (GlobalTradeItemNumber !exists)
	       			initialize GTINCheckDigit
					GTINCheckDigit.ItemGTIN		= GlobalTradeItemNumber
					LocalValidCheckDigit        = GTINCheckDigit.ValidCheckDigit
					constraint (LocalValidCheckDigit = true)
						"GTINCheckDigitIsInvalid"
					
		UpdateFunction
		
			if (LinesWithClosedDoNotProcess)
				UpdateFunction = blank
			
			if (UpdateFunction.Delete
			or  UpdateFunction.Update)
				constraint (!ItemType.Service)
					"ServiceItemsCanOnlyCreateContractLines;CannotUpdateOrDelete"

			
	Rule Blocks
		
		DefaultItemNumbers
			
			if (VendorItem entered)
				if (ItemNumber !exists)
					if (GetVendorItemSetRel exists)
						if  (!ContractLineImport exists
						or  (ContractLineImport exists
						and (!NonDirectBuyItem
						or  (NonDirectBuyItem
						and  first GetVendorItemSetRel.ManufacturerNumber	= ManufacturerInformation.ManufacturerNumber))))
							ItemNumber = first GetVendorItemSetRel.Item
				if (ItemNumber !exists)
					if (GetVendorItemAllRel exists)
						if  (!ContractLineImport exists
						or  (ContractLineImport exists
						and (!NonDirectBuyItem
						or  (NonDirectBuyItem
						and  first GetVendorItemAllRel.ManufacturerNumber	= ManufacturerInformation.ManufacturerNumber))))
							ItemNumber = first GetVendorItemAllRel.Item
				
			if (ItemNumber !exists)
				if (GlobalTradeItemNumber entered)
					if (GlobalTradeItemNumberExists)
						ItemNumber = first IcitemgtinGTINRel.Item
					else
					if (ItemNumber !exists)
						if (ItemGTINInactiveRel exists)
							ItemNumber = first ItemGTINInactiveRel.Item			

			if (ItemNumber !exists)
				if (ManufacturerInformation.ManufacturerNumber entered)
					if (ContractManufacturerInformation entered)
						if (ContractManufacturerInformation.Manufacturer entered)
							LocalManufacturerInfo						= ContractManufacturerInformation
						else
							LocalManufacturerInfo.ManufacturerNumber	= ContractManufacturerInformation.ManufacturerNumber
							LocalManufacturerInfo.Manufacturer			= ContractImport.ManufacturerCodeDivision

					else
						if (ManufacturerInformation.Manufacturer entered)
							LocalManufacturerInfo						= ManufacturerInformation
						else
							LocalManufacturerInfo.ManufacturerNumber	= ManufacturerInformation.ManufacturerNumber
							LocalManufacturerInfo.Manufacturer			= ContractImport.ManufacturerCodeDivision
						
					if (GetVendorItemFromManufacturerInformationRel exists) 
						ItemNumber		 		 			= first GetVendorItemFromManufacturerInformationRel.Item
						if (VendorItem !entered)
							VendorItem 				 		= first GetVendorItemFromManufacturerInformationRel.VendorItem
					else
					if (ItemNumber not exists)
						if (GetVendorItemFromManufacturerInfoInactiveRel exists)  
							ItemNumber		 		 		= first GetVendorItemFromManufacturerInfoInactiveRel.Item
							if (VendorItem !entered)
								VendorItem 				 	= first GetVendorItemFromManufacturerInfoInactiveRel.VendorItem		

			if (ItemNumber not exists)
				if (ContractManufacturerInformation entered)
					if (ContractManufacturerInformation.Manufacturer entered)
						LocalManufacturerInfo						= ContractManufacturerInformation
					else
						LocalManufacturerInfo.ManufacturerNumber	= ContractManufacturerInformation.ManufacturerNumber
						LocalManufacturerInfo.Manufacturer			= ContractImport.ManufacturerCodeDivision

				else
					if (ManufacturerInformation.Manufacturer entered)
						LocalManufacturerInfo						= ManufacturerInformation
					else
						LocalManufacturerInfo.ManufacturerNumber	= ManufacturerInformation.ManufacturerNumber
						LocalManufacturerInfo.Manufacturer			= ContractImport.ManufacturerCodeDivision
				if (ItemByManufacturerCount = 1)
					ItemNumber = first ItemByManufacturerRel.Item
				
				if (ItemNumber not exists
				and InactiveItemByManufacturerCount = 1)
					ItemNumber = first InactiveItemByManufacturerRel.Item
						
			if (ItemNumberExists)
				ItemType = ItemType.Itemmast
				ItemDescription = ItemNumber.Description
			else
				if (ServiceItem)
					ItemType = ItemType.Service
				else
					ItemType = ItemType.Special						

		CreateUNSPSCCode 

			if (!UNSPSCSegmentExistsRel exists)
				invoke Create UNSPSCCode
					invoked.ItemGroup					= ContractGroup 
					invoked.UNSPSCCode.UNSPSCSegment  	= UNSPSCCode[1:2]
					invoked.ShortDescription             = "From_Interface_Contract"
			if (!UNSPSCFamilyExistsRel exists)
				invoke Create UNSPSCCode
					invoked.ItemGroup					= ContractGroup 
					invoked.UNSPSCCode.UNSPSCSegment  	= UNSPSCCode[1:2]
					invoked.UNSPSCCode.UNSPSCFamily   	= UNSPSCCode[3:4]
					invoked.ShortDescription             = "From_Interface_Contract"
			if (!UNSPSCClassExistsRel exists)
				invoke Create UNSPSCCode
					invoked.ItemGroup					= ContractGroup 
					invoked.UNSPSCCode.UNSPSCSegment  	= UNSPSCCode[1:2]
					invoked.UNSPSCCode.UNSPSCFamily   	= UNSPSCCode[3:4]
					invoked.UNSPSCCode.UNSPSCClass    	= UNSPSCCode[5:6]
					invoked.ShortDescription             = "From_Interface_Contract"
			invoke Create UNSPSCCode
				invoked.ItemGroup					= ContractGroup 
				invoked.UNSPSCCode.UNSPSCSegment  	= UNSPSCCode[1:2]
				invoked.UNSPSCCode.UNSPSCFamily   	= UNSPSCCode[3:4]
				invoked.UNSPSCCode.UNSPSCClass    	= UNSPSCCode[5:6]
				invoked.UNSPSCCode.UNSPSCCommodity 	= UNSPSCCode[7:8]
				invoked.ShortDescription             = "From_Interface_Contract"			
		
		CheckForLineErrors
        
            invoke Delete ContractLineErrorsNotClosedLineRel
            
            if (UpdateContract !entered)
            	UpdateContract = ContractImport.DerivedToContractForGPO
            
            LocalContract         = UpdateContract
			if (ContractVendorItem entered)
				LocalVendorItem	  = ContractVendorItem	
			else 
				LocalVendorItem   = VendorItem   
            if (ContractManufacturerInformation !entered)
				LocalManufacturerInfo = ManufacturerInformation
            else 
				LocalManufacturerInfo = ContractManufacturerInformation
			LocalUom              = UOM

            if (UpdateContract entered)
	            
	            if  (UpdateFunction = "U"
	            and !UpdateContractLineDirectExists
				and !UpdateContractLineMfgExists
	            and !UpdateContractLineVenExists
	            and !UpdateContractLineItemExists
				and  ContractLineItemClosedRel !exists
				and  ContractLineVendorItemClosedRel !exists
				and  ContractLineMfgClosedRel !exists)	                
	                    
					invoke FastUpdateWithoutEdits ContractLineImport
						invoked.UpdateUpdateFunction			= true
						if (!ItemType.Service)
							invoked.PrmUpdateFunction           = "C"
						invoked.FromCheckForLineErrors          = true	                
	            	        
	            else
	            if  (UpdateFunction = "C")
		            if  (UpdateContractLineDirectExists
					or   UpdateContractLineMfgExists
		            or   UpdateContractLineVenExists
		            or   UpdateContractLineItemExists)
		                if (UpdateContractLineDirectExists)
							LocalContractLine         = ContractLine 
						if (UpdateContractLineMfgExists)
		                    LocalContractLine         = first ContractLineMfgUpdateRel.ContractLine
		                else
		                if (UpdateContractLineVenExists)
		                    LocalContractLine         = first ContractLineVenUpdateRel.ContractLine
		                else
		                if (UpdateContractLineItemExists)
		                	LocalContractLine         = first ContractLineItemUpdateRel.ContractLine
	
						invoke FastUpdateWithoutEdits ContractLineImport
							invoked.UpdateUpdateFunction			= true
							invoked.FromCheckForLineErrors          = true
							invoked.PrmUpdateFunction           	= "U"	
		            if (ContractLineVendorItemDupUOMRel exists)
	                    LocalContractLine         = first ContractLineVendorItemDupUOMRel.ContractLine
		                invoke Create ContractLineImportError
		                    invoked.ContractGroup           = ContractGroup
		                    invoked.ContractImport          = ContractImport
		                    invoked.ContractLineImport      = ContractLineImport
		                    invoked.ErrorContract           = UpdateContract
		                    invoked.ErrorContractLine       = LocalContractLine
		                    if (ItemType.Itemmast)
		                    	invoked.ErrorMessageNumber	= 19
		                    else
	                    		invoked.ErrorMessageNumber  = 20   					
	            else        
	            if  (UpdateFunction = "D"
	            and !UpdateContractLineDirectExists
				and !UpdateContractLineMfgExists
	            and !UpdateContractLineVenExists
	            and !UpdateContractLineItemExists
				and  ContractLineItemClosedRel !exists
				and  ContractLineVendorItemClosedRel !exists
				and  ContractLineMfgClosedRel !exists)
	                invoke Create ContractLineImportError
	                    invoked.ContractGroup            = ContractGroup
	                    invoked.ContractImport            = ContractImport
	                    invoked.ContractLineImport      = ContractLineImport
	                    invoked.ErrorContract           = UpdateContract
	                    invoked.ErrorMessageNumber        = 3 
	                    
            if (ItemType.Special)
				if (!ManualItemNumbering)
					if (ManualItemNumber entered)
						invoke Create ContractLineImportError
		                    invoked.ContractGroup           	= ContractGroup
		                    invoked.ContractImport            	= ContractImport
		                    invoked.ContractLineImport      	= ContractLineImport
		                    invoked.ErrorMessageNumber        	= 5 
						   
				if (UNSPSCCode entered
				and ContractGroup.UseUNSPSCCode
				and !ContractGroup.AutoAddUNSPSCCode)
					if (UNSPSCCodeRel !exists)
						invoke Create ContractLineImportError
		                    invoked.ContractGroup           	= ContractGroup
		                    invoked.ContractImport            	= ContractImport
		                    invoked.ContractLineImport      	= ContractLineImport
		                    invoked.ErrorMessageNumber        	= 15							
			
			if (ItemType.Itemmast)
				if (ContractGroup.UseUNSPSCCode
				and UNSPSCCode entered
				and ItemNumber.UNSPSCCode entered
				and UNSPSCCodeRel.UNSPSCCode != ItemNumber.UNSPSCCode)
					invoke Create ContractLineImportError
	                    invoked.ContractGroup           	= ContractGroup
	                    invoked.ContractImport            	= ContractImport
	                    invoked.ContractLineImport      	= ContractLineImport
	                    invoked.ErrorMessageNumber        	= 16				
			
			if (GlobalTradeItemNumber entered)

				if (GTINExistsRel exists)
    				invoke Create ContractLineImportError
	                    invoked.ContractGroup           	= ContractGroup
	                    invoked.ContractImport            	= ContractImport
	                    invoked.ContractLineImport      	= ContractLineImport
	                    invoked.ErrorMessageNumber        	= 14 
	                    invoked.ErrorContractLine           = first GTINExistsRel.ContractLineImport
	                    invoked.ErrorCode1                  = GlobalTradeItemNumber   					

			if (UOM !entered)
				invoke Create ContractLineImportError
					invoked.ContractGroup           	= ContractGroup
                    invoked.ContractImport            	= ContractImport
                    invoked.ContractLineImport      	= ContractLineImport
                    invoked.ErrorMessageNumber        	= 6
                    
            if (UOM entered
            and UOMRel !exists)
            	invoke Create ContractLineImportError
					invoked.ContractGroup           	= ContractGroup
                    invoked.ContractImport            	= ContractImport
                    invoked.ContractLineImport      	= ContractLineImport
                    invoked.ErrorMessageNumber        	= 7
                    
            if (!VendorItem entered
			and !ManufNumberEntered
			and  NonServiceItem
			and  CanUseForCostDefaulting)
				invoke Create ContractLineImportError
					invoked.ContractGroup           	= ContractGroup
                    invoked.ContractImport            	= ContractImport
                    invoked.ContractLineImport      	= ContractLineImport
                    invoked.ErrorMessageNumber        	= 8
                    
            if (ItemDescription !entered)
            	invoke Create ContractLineImportError
					invoked.ContractGroup           	= ContractGroup
                    invoked.ContractImport            	= ContractImport
                    invoked.ContractLineImport      	= ContractLineImport
                    invoked.ErrorMessageNumber        	= 9 
		
			if (UOM entered
			and ItemType.Itemmast)
				if (ItemUOMRel !exists)
           			invoke Create ContractLineImportError
						invoked.ContractGroup           	= ContractGroup
                    	invoked.ContractImport            	= ContractImport
                    	invoked.ContractLineImport      	= ContractLineImport
                    	invoked.ErrorMessageNumber        	= 10 
                    	invoked.ErrorCode1                  = UOM	        		
	        			
	        	if (!ItemNumber.IsCatchWeightItem
	        	and !ItemUOMRel.OKForBuying
	        	and  ItemUOMRel exists)
           			invoke Create ContractLineImportError
						invoked.ContractGroup           	= ContractGroup
                    	invoked.ContractImport            	= ContractImport
                    	invoked.ContractLineImport      	= ContractLineImport
                    	invoked.ErrorMessageNumber        	= 11
                    	invoked.ErrorCode1                  = UOM
              	
              	if (ItemNumber.IsCatchWeightItem
              	and ItemNumber.StockUOM != UOM)
              		invoke Create ContractLineImportError
						invoked.ContractGroup           	= ContractGroup
                    	invoked.ContractImport            	= ContractImport
                    	invoked.ContractLineImport      	= ContractLineImport
                    	invoked.ErrorMessageNumber        	= 18
                    	invoked.ErrorCode1                  = UOM
		
				if  (ItemNumber.StockUOM != UOM
				and (ItemUOMRel.UOMConversion * ItemNumber.UOMConversion != UOMConversion)
				and  UOMConversion > 0
				and  ItemNumber.UOMConversion > 0
				and  ItemUOMRel exists)
          			invoke Create ContractLineImportError
						invoked.ContractGroup           	= ContractGroup
                    	invoked.ContractImport            	= ContractImport
                    	invoked.ContractLineImport      	= ContractLineImport
                    	invoked.ErrorMessageNumber        	= 12
                    	invoked.ErrorCode1                  = ItemUOMRel.UOMConversion
                if (ItemNumber.StockUOM = UOM
                and ItemNumber.UOMConversion != UOMConversion
                and UOMConversion > 0
				and ItemNumber.UOMConversion > 0)
          			invoke Create ContractLineImportError
						invoked.ContractGroup           	= ContractGroup
                    	invoked.ContractImport            	= ContractImport
                    	invoked.ContractLineImport      	= ContractLineImport
                    	invoked.ErrorMessageNumber        	= 13
                    	invoked.ErrorCode1                  = ItemNumber.UOMConversion              	 
				
			if (UOM entered
			and UOMRel exists 
			and !UOMRel.Active)
          		invoke Create ContractLineImportError
					invoked.ContractGroup           	= ContractGroup
                   	invoked.ContractImport            	= ContractImport
                   	invoked.ContractLineImport      	= ContractLineImport
                   	invoked.ErrorMessageNumber        	= 25
                   	invoked.ErrorCode1                  = UOM 

			if ((ContractLineItemClosedRel exists
			or   ContractLineVendorItemClosedRel exists
			or   ContractLineMfgClosedRel exists)
			and  ClosedLineDoNotCreateNewRel !exists)
       			if (!GPOItemExists
				and GPOContractNumberEntered)
	       			invoke Create ContractLineImportError
						invoked.ContractGroup           	= ContractGroup
        	           	invoked.ContractImport            	= ContractImport
            	       	invoked.ContractLineImport      	= ContractLineImport
                	   	invoked.ErrorMessageNumber        	= 17					
					initialize UpdateFunction
				else
				if (GPOItemExists)
					if (ContractLineItemNotClosedRel !exists
					and  ContractLineVendorItemNotClosedRel !exists
					and  ContractLineMfgNotClosedRel !exists)
	     	  			invoke Create ContractLineImportError
							invoked.ContractGroup           	= ContractGroup
        	    	       	invoked.ContractImport            	= ContractImport
            	    	   	invoked.ContractLineImport      	= ContractLineImport
                	   		invoked.ErrorMessageNumber        	= 21
						invoke FastUpdateWithoutEdits ContractLineImport
							invoked.UpdateUpdateFunction			= true
							if (!ItemType.Service)
								invoked.PrmUpdateFunction           = "C"
							invoked.FromCheckForLineErrors          = true
							
			if (ImportLineMfgSameUOMRel exists)
				invoke Create ContractLineImportError	
					invoked.ContractGroup           	= ContractGroup
       	           	invoked.ContractImport            	= ContractImport
           	       	invoked.ContractLineImport      	= ContractLineImport
           	       	invoked.ErrorContractLine           = ImportLineMfgSameUOMRel.ContractLineImport
               	   	invoked.ErrorMessageNumber        	= 22
               	   	
			if (ImportLineVendorItemSameUOMRel exists)
				invoke Create ContractLineImportError	
					invoked.ContractGroup           	= ContractGroup
       	           	invoked.ContractImport            	= ContractImport
           	       	invoked.ContractLineImport      	= ContractLineImport
           	       	invoked.ErrorContractLine           = ImportLineVendorItemSameUOMRel.ContractLineImport
               	   	invoked.ErrorMessageNumber        	= 23            	
		
		UpdateContractLine 
		
			if (LocalHaveContractLine)
				invoke FastUpdate ContractLineMainRel
					if (LocalEffectiveDate > current corporate date    
					and invoked.HasBeenActivated)
						invoked.effective date 		= LocalEffectiveDate
					invoked.FromImport              = true
					invoked.NonManualUpdate         = true
					invoked.FutureCost              = ContractLineMainRel.BaseCost
					invoked.BaseCost				= LocalBaseCost
					if (ItemNumber.Consignment)
						invoked.ConsignmentCurrentNetCost 	= LocalBaseCost
					else
						invoked.CurrentNetCost   			= LocalBaseCost
					invoked.DefaultBuyUnitCost		= DerivedDefaultBuyUnitCost	
					invoked.EffectiveDate			= LocalEffectiveDate 					
					invoked.LocalCostEffectiveDate  = LocalEffectiveDate
					if (ExpirationDate entered)
						invoked.ExpirationDate      = ExpirationDate	
					if (CostOption entered)
						invoked.CostOption 				= CostOption	
					if (!UpdateCostsOnly)
						fill in user fields from this instance 
						if (ItemNumber entered)
				 			invoked.ItemNumber				= ItemNumber
			 			invoked.ItemType				    = ItemType		
						invoked.ItemDescription			    = ItemDescription		
						if (ItemDescription2 entered)
							invoked.ItemDescription2		= ItemDescription2		
						if (ItemDescription3 entered)
							invoked.ItemDescription3        = ItemDescription3
						if (VendorItem entered
						and GPOContractNumber !entered)
							invoked.VendorItem              = VendorItem        
						if (VendorItemDescription entered)
				    		invoked.VendorItemDescription	= VendorItemDescription		
						if (GlobalTradeItemNumber entered)
				 			invoked.GlobalTradeItemNumber	= GlobalTradeItemNumber
						if (ServiceCode entered)
							invoked.ServiceCode				= ServiceCode		
						if (Quantity not = 0)
							invoked.Quantity 				= Quantity		
						invoked.UOM 					    = UOM		
						if (LowUOMCode entered)
							invoked.LowUOMCode              = LowUOMCode
						if (UOMConversion > 0)
							invoked.UOMConversion           = UOMConversion
						if (CommodityCode entered)
							invoked.CommodityCode			= CommodityCode		
						if (Sku entered)
							invoked.Sku                     = Sku 
						if (NdcNbr entered)
							invoked.NdcNbr                  = NdcNbr	 							
						if (Upc entered)
							invoked.Upc                     = Upc 				                     
						if (HibccUpn entered)
							invoked.HibccUpn                = HibccUpn						                
						if (UccEanUpn entered) 
							invoked.UccEanUpn               = UccEanUpn
						if (Priority not = 0)
							invoked.Priority				= Priority		
						if (PayablesDistributionCode entered)
							invoked.PayablesDistributionCode = PayablesDistributionCode
						if (BlanketStandingRequestingLocation entered)
							invoked.BlanketStandingRequestingLocation		= BlanketStandingRequestingLocation		
						if (CurrentPercent not = 0)
							invoked.CurrentPercent 			= CurrentPercent		
						if (PerOrderMaximumQuantity not = 0)
							invoked.PerOrderMaximumQuantity 			= PerOrderMaximumQuantity		
						if (PerOrderMaximumAmount not = 0)
							invoked.PerOrderMaximumAmount 			= PerOrderMaximumAmount		
						if (PerOrderMinimumQuantity not = 0)
							invoked.PerOrderMinimumQuantity 			= PerOrderMinimumQuantity		
						if (PerOrderMinimumAmount not =0)
							invoked.PerOrderMinimumAmount 			= PerOrderMinimumAmount		
						if (Taxable entered)
							invoked.Taxable		 			= Taxable		
						if (TaxCode entered)
							invoked.TaxCode					= TaxCode
						if (TaxUsageCode entered)
							invoked.TaxUsageCode			= TaxUsageCode
						if (ExpirationDate not = 0)
							invoked.ExpirationDate 			= ExpirationDate		
						if (BasePercent not = 0)
							invoked.BasePercent 			= BasePercent		
						if (ConsignmentPricingMarkupOrDiscount entered)
							invoked.ConsignmentPricingMarkupOrDiscount = ConsignmentPricingMarkupOrDiscount
						if (ConsignmentLinePriceBreakOn entered)
							invoked.ConsignmentLinePriceBreakOn = ConsignmentLinePriceBreakOn		
						if (ConsignmentPriceBreak entered)
				    		invoked.ConsignmentPriceBreak	= ConsignmentPriceBreak		
						if (PricingMarkupOrDiscount entered)
							invoked.PricingMarkupOrDiscount = PricingMarkupOrDiscount		
						if (LinePriceBreakOn entered)
							invoked.LinePriceBreakOn 			= LinePriceBreakOn		
						if (PriceBreakImport entered)
				    		invoked.PriceBreak				= PriceBreakImport		
						if (Retainage entered)
							invoked.Retainage 				= Retainage		
						if (RetainagePercent1 not = 0)
							invoked.RetainagePercent1 		= RetainagePercent1		
						if (RetainageUpToPercent not = 0)
							invoked.RetainageUpToPercent 	= RetainageUpToPercent		
						if (RetainagePercent2 not = 0)
							invoked.RetainagePercent2 		= RetainagePercent2		
						if (RetainageOverridePercent not = 0)
							invoked.RetainageOverridePercent = RetainageOverridePercent		
						if (LifetimeMaximumQuantity not = 0)
							invoked.LifetimeMaximumQuantity 				= LifetimeMaximumQuantity		
						if (HCPCSCode entered)
							invoked.HCPCSCode                = HCPCSCode 
						if (ClinicalSystemUse = true)
							invoked.ClinicalSystemUse        = ClinicalSystemUse 
						if (PatientChargeable = true)
							invoked.PatientChargeable        = PatientChargeable
						if (Latex > 0)
							invoked.Latex                    = Latex
						if (UsageIdentifier entered)
							invoked.UsageIdentifier          = UsageIdentifier 
						if (HSNSACCode entered)
							invoked.HSNSACCode               = HSNSACCode 
						if (CriticalItem = true)
							invoked.CriticalItem             = CriticalItem 					
						if (PersonalProtectiveEquipment = true) 
							invoked.PersonalProtectiveEquipment = PersonalProtectiveEquipment		
						if (GMDNPTCode entered)
							invoked.GMDNPTCode               = GMDNPTCode 
						if (UserField1 entered)
							invoked.UserField1 				= UserField1					
						if (UserField2 entered)
							invoked.UserField2 				= UserField2					
						if (UserField3 entered)	
							invoked.UserField3 				= UserField3					
						if (UserField4 entered)	
							invoked.UserField4 				= UserField4					
						if (UserField5 entered
						and UserField5 != VendorItem)
							invoked.UserField5 				= UserField5					
						if (UserFieldN1 entered)
							invoked.UserFieldN1 			= UserFieldN1					
						if (UserFieldN2 entered)	
							invoked.UserFieldN2 			= UserFieldN2								
						if (UserFieldN3 entered)
							invoked.UserFieldN3  			= UserFieldN3 
						if (ChargeNumber entered)
							invoked.ChargeNumber            = ChargeNumber
						if (UNSPSCCode entered
						and ContractGroup.UseUNSPSCCode)
							invoked.UNSPSCCode.UNSPSCSegment 	= UNSPSCCode[1:2]
							invoked.UNSPSCCode.UNSPSCFamily  	= UNSPSCCode[3:4]
							invoked.UNSPSCCode.UNSPSCClass   	= UNSPSCCode[5:6]
							invoked.UNSPSCCode.UNSPSCCommodity	= UNSPSCCode[7:8]  
						invoked.FutureCostDate = 0
			else
			if (LocalUseItemNumber)
				invoke FastUpdate first ContractLineItemUpdateRel
					if (LocalEffectiveDate > current corporate date    
					and invoked.HasBeenActivated)
						invoked.effective date 		= LocalEffectiveDate
					invoked.FromImport              = true
					invoked.NonManualUpdate         = true
					invoked.FutureCost              = first ContractLineItemUpdateRel.BaseCost
					invoked.BaseCost				= LocalBaseCost
					if (ItemNumber.Consignment)
						invoked.ConsignmentCurrentNetCost 	= LocalBaseCost
					else
						invoked.CurrentNetCost   			= LocalBaseCost
					invoked.DefaultBuyUnitCost		= DerivedDefaultBuyUnitCost	
					invoked.EffectiveDate			= LocalEffectiveDate 					
					invoked.LocalCostEffectiveDate  = LocalEffectiveDate
					if (ExpirationDate entered)
						invoked.ExpirationDate      = ExpirationDate	
					if (CostOption entered)
						invoked.CostOption 				= CostOption	
					if (!UpdateCostsOnly)
						fill in user fields from this instance 
						if (ItemNumber entered)
				 			invoked.ItemNumber				= ItemNumber
			 			invoked.ItemType				    = ItemType		
						invoked.ItemDescription			    = ItemDescription		
						if (ItemDescription2 entered)
							invoked.ItemDescription2		= ItemDescription2		
						if (ItemDescription3 entered)
							invoked.ItemDescription3        = ItemDescription3
						if (VendorItem entered
						and GPOContractNumber !entered)
							invoked.VendorItem              = VendorItem        
						if (VendorItemDescription entered)
				    		invoked.VendorItemDescription	= VendorItemDescription		
						if (GlobalTradeItemNumber entered)
				 			invoked.GlobalTradeItemNumber	= GlobalTradeItemNumber
						if (ServiceCode entered)
							invoked.ServiceCode				= ServiceCode		
						if (Quantity not = 0)
							invoked.Quantity 				= Quantity		
						invoked.UOM 					    = UOM		
						if (LowUOMCode entered)
							invoked.LowUOMCode              = LowUOMCode
						if (UOMConversion > 0)
							invoked.UOMConversion           = UOMConversion
						if (CommodityCode entered)
							invoked.CommodityCode			= CommodityCode		
						if (Sku entered)
							invoked.Sku                     = Sku 
						if (NdcNbr entered)
							invoked.NdcNbr                  = NdcNbr	 							
						if (Upc entered)
							invoked.Upc                     = Upc 				                     
						if (HibccUpn entered)
							invoked.HibccUpn                = HibccUpn						                
						if (UccEanUpn entered) 
							invoked.UccEanUpn               = UccEanUpn
						if (Priority not = 0)
							invoked.Priority				= Priority		
						if (PayablesDistributionCode entered)
							invoked.PayablesDistributionCode = PayablesDistributionCode
						if (BlanketStandingRequestingLocation entered)
							invoked.BlanketStandingRequestingLocation		= BlanketStandingRequestingLocation		
						if (CurrentPercent not = 0)
							invoked.CurrentPercent 			= CurrentPercent		
						if (PerOrderMaximumQuantity not = 0)
							invoked.PerOrderMaximumQuantity 			= PerOrderMaximumQuantity		
						if (PerOrderMaximumAmount not = 0)
							invoked.PerOrderMaximumAmount 			= PerOrderMaximumAmount		
						if (PerOrderMinimumQuantity not = 0)
							invoked.PerOrderMinimumQuantity 			= PerOrderMinimumQuantity		
						if (PerOrderMinimumAmount not =0)
							invoked.PerOrderMinimumAmount 			= PerOrderMinimumAmount		
						if (Taxable entered)
							invoked.Taxable		 			= Taxable		
						if (TaxCode entered)
							invoked.TaxCode					= TaxCode
						if (TaxUsageCode entered)
							invoked.TaxUsageCode			= TaxUsageCode
						if (ExpirationDate not = 0)
							invoked.ExpirationDate 			= ExpirationDate		
						if (BasePercent not = 0)
							invoked.BasePercent 			= BasePercent		
						if (ConsignmentPricingMarkupOrDiscount entered)
							invoked.ConsignmentPricingMarkupOrDiscount = ConsignmentPricingMarkupOrDiscount
						if (ConsignmentLinePriceBreakOn entered)
							invoked.ConsignmentLinePriceBreakOn = ConsignmentLinePriceBreakOn		
						if (ConsignmentPriceBreak entered)
				    		invoked.ConsignmentPriceBreak	= ConsignmentPriceBreak		
						if (PricingMarkupOrDiscount entered)
							invoked.PricingMarkupOrDiscount = PricingMarkupOrDiscount		
						if (LinePriceBreakOn entered)
							invoked.LinePriceBreakOn 			= LinePriceBreakOn		
						if (PriceBreakImport entered)
				    		invoked.PriceBreak				= PriceBreakImport		
						if (Retainage entered)
							invoked.Retainage 				= Retainage		
						if (RetainagePercent1 not = 0)
							invoked.RetainagePercent1 		= RetainagePercent1		
						if (RetainageUpToPercent not = 0)
							invoked.RetainageUpToPercent 	= RetainageUpToPercent		
						if (RetainagePercent2 not = 0)
							invoked.RetainagePercent2 		= RetainagePercent2		
						if (RetainageOverridePercent not = 0)
							invoked.RetainageOverridePercent = RetainageOverridePercent		
						if (LifetimeMaximumQuantity not = 0)
							invoked.LifetimeMaximumQuantity 				= LifetimeMaximumQuantity		
						if (HCPCSCode entered)
							invoked.HCPCSCode                = HCPCSCode 
						if (ClinicalSystemUse = true)
							invoked.ClinicalSystemUse        = ClinicalSystemUse 
						if (PatientChargeable = true)
							invoked.PatientChargeable        = PatientChargeable
						if (Latex > 0)
							invoked.Latex                    = Latex
						if (UsageIdentifier entered)
							invoked.UsageIdentifier          = UsageIdentifier 
						if (HSNSACCode entered)
							invoked.HSNSACCode               = HSNSACCode 
						if (CriticalItem = true)
							invoked.CriticalItem             = CriticalItem 					
						if (PersonalProtectiveEquipment = true) 
							invoked.PersonalProtectiveEquipment = PersonalProtectiveEquipment		
						if (GMDNPTCode entered)
							invoked.GMDNPTCode               = GMDNPTCode 
						if (UserField1 entered)
							invoked.UserField1 				= UserField1					
						if (UserField2 entered)
							invoked.UserField2 				= UserField2					
						if (UserField3 entered)	
							invoked.UserField3 				= UserField3					
						if (UserField4 entered)	
							invoked.UserField4 				= UserField4					
						if (UserField5 entered
						and UserField5 != VendorItem)
							invoked.UserField5 				= UserField5					
						if (UserFieldN1 entered)
							invoked.UserFieldN1 			= UserFieldN1					
						if (UserFieldN2 entered)	
							invoked.UserFieldN2 			= UserFieldN2								
						if (UserFieldN3 entered)
							invoked.UserFieldN3  			= UserFieldN3 
						if (ChargeNumber entered)
							invoked.ChargeNumber            = ChargeNumber
						if (UNSPSCCode entered
						and ContractGroup.UseUNSPSCCode)
							invoked.UNSPSCCode.UNSPSCSegment 	= UNSPSCCode[1:2]
							invoked.UNSPSCCode.UNSPSCFamily  	= UNSPSCCode[3:4]
							invoked.UNSPSCCode.UNSPSCClass   	= UNSPSCCode[5:6]
							invoked.UNSPSCCode.UNSPSCCommodity	= UNSPSCCode[7:8]  
						invoked.FutureCostDate = 0
			else
			if (LocalManufNumber)
				invoke FastUpdate first ContractLineMfgUpdateRel
					if (LocalEffectiveDate > current corporate date    
					and invoked.HasBeenActivated)
						invoked.effective date 		= LocalEffectiveDate
					invoked.FutureCost              = first ContractLineMfgUpdateRel.BaseCost
					invoked.BaseCost				= LocalBaseCost
					invoked.FromImport              = true
					invoked.NonManualUpdate         = true
					if (ItemNumber.Consignment)
						invoked.ConsignmentCurrentNetCost 	= LocalBaseCost
					else
						invoked.CurrentNetCost   			= LocalBaseCost
					invoked.DefaultBuyUnitCost		= DerivedDefaultBuyUnitCost		
					invoked.EffectiveDate			= LocalEffectiveDate 					
					invoked.LocalCostEffectiveDate  = LocalEffectiveDate
					if (ExpirationDate entered)
						invoked.ExpirationDate      = ExpirationDate
					if (CostOption entered)
						invoked.CostOption 				= CostOption	
					if (!UpdateCostsOnly)
						fill in user fields from this instance 
						if (ItemNumber entered)
				 			invoked.ItemNumber				= ItemNumber
			 			invoked.ItemType				    = ItemType		
						invoked.ItemDescription			    = ItemDescription		
						if (ItemDescription2 entered)
							invoked.ItemDescription2		= ItemDescription2		
						if (ItemDescription3 entered)
							invoked.ItemDescription3        = ItemDescription3
						if (VendorItem entered
						and GPOContractNumber !entered)
							invoked.VendorItem              = VendorItem        
						if (VendorItemDescription entered)
				    		invoked.VendorItemDescription	= VendorItemDescription		
						if (GlobalTradeItemNumber entered)
				 			invoked.GlobalTradeItemNumber	= GlobalTradeItemNumber
						if (ServiceCode entered)
							invoked.ServiceCode				= ServiceCode		
						if (Quantity not = 0)
							invoked.Quantity 				= Quantity		
						invoked.UOM 					    = UOM		
						if (LowUOMCode entered)
							invoked.LowUOMCode              = LowUOMCode
						if (UOMConversion > 0)
							invoked.UOMConversion           = UOMConversion
						if (CommodityCode entered)
							invoked.CommodityCode			= CommodityCode		
						if (Sku entered)
							invoked.Sku                     = Sku 
						if (NdcNbr entered)
							invoked.NdcNbr                  = NdcNbr	 							
						if (Upc entered)
							invoked.Upc                     = Upc 				                     
						if (HibccUpn entered)
							invoked.HibccUpn                = HibccUpn						                
						if (UccEanUpn entered) 
							invoked.UccEanUpn               = UccEanUpn
						if (Priority not = 0)
							invoked.Priority				= Priority		
						if (PayablesDistributionCode entered)
							invoked.PayablesDistributionCode = PayablesDistributionCode
						if (BlanketStandingRequestingLocation entered)
							invoked.BlanketStandingRequestingLocation		= BlanketStandingRequestingLocation		
						if (CurrentPercent not = 0)
							invoked.CurrentPercent 			= CurrentPercent		
						if (PerOrderMaximumQuantity not = 0)
							invoked.PerOrderMaximumQuantity 			= PerOrderMaximumQuantity		
						if (PerOrderMaximumAmount not = 0)
							invoked.PerOrderMaximumAmount 			= PerOrderMaximumAmount		
						if (PerOrderMinimumQuantity not = 0)
							invoked.PerOrderMinimumQuantity 			= PerOrderMinimumQuantity		
						if (PerOrderMinimumAmount not =0)
							invoked.PerOrderMinimumAmount 			= PerOrderMinimumAmount		
						if (Taxable entered)
							invoked.Taxable		 			= Taxable		
						if (TaxCode entered)
							invoked.TaxCode					= TaxCode
						if (TaxUsageCode entered)
							invoked.TaxUsageCode			= TaxUsageCode
						if (ExpirationDate not = 0)
							invoked.ExpirationDate 			= ExpirationDate		
						if (BasePercent not = 0)
							invoked.BasePercent 			= BasePercent		
						if (ConsignmentPricingMarkupOrDiscount entered)
							invoked.ConsignmentPricingMarkupOrDiscount = ConsignmentPricingMarkupOrDiscount
						if (ConsignmentLinePriceBreakOn entered)
							invoked.ConsignmentLinePriceBreakOn = ConsignmentLinePriceBreakOn		
						if (ConsignmentPriceBreak entered)
				    		invoked.ConsignmentPriceBreak	= ConsignmentPriceBreak		
						if (PricingMarkupOrDiscount entered)
							invoked.PricingMarkupOrDiscount = PricingMarkupOrDiscount		
						if (LinePriceBreakOn entered)
							invoked.LinePriceBreakOn 			= LinePriceBreakOn		
						if (PriceBreakImport entered)
				    		invoked.PriceBreak				= PriceBreakImport		
						if (Retainage entered)
							invoked.Retainage 				= Retainage		
						if (RetainagePercent1 not = 0)
							invoked.RetainagePercent1 		= RetainagePercent1		
						if (RetainageUpToPercent not = 0)
							invoked.RetainageUpToPercent 	= RetainageUpToPercent		
						if (RetainagePercent2 not = 0)
							invoked.RetainagePercent2 		= RetainagePercent2		
						if (RetainageOverridePercent not = 0)
							invoked.RetainageOverridePercent = RetainageOverridePercent		
						if (LifetimeMaximumQuantity not = 0)
							invoked.LifetimeMaximumQuantity 				= LifetimeMaximumQuantity		
						if (HCPCSCode entered)
							invoked.HCPCSCode                = HCPCSCode 
						if (ClinicalSystemUse = true)
							invoked.ClinicalSystemUse        = ClinicalSystemUse 
						if (PatientChargeable = true)
							invoked.PatientChargeable        = PatientChargeable
						if (Latex > 0)
							invoked.Latex                    = Latex
						if (UsageIdentifier entered)
							invoked.UsageIdentifier          = UsageIdentifier 
						if (HSNSACCode entered)
							invoked.HSNSACCode               = HSNSACCode 
						if (CriticalItem = true)
							invoked.CriticalItem             = CriticalItem 					
						if (PersonalProtectiveEquipment = true) 
							invoked.PersonalProtectiveEquipment = PersonalProtectiveEquipment		
						if (GMDNPTCode entered)
							invoked.GMDNPTCode               = GMDNPTCode 
						if (UserField1 entered)
							invoked.UserField1 				= UserField1					
						if (UserField2 entered)
							invoked.UserField2 				= UserField2					
						if (UserField3 entered)	
							invoked.UserField3 				= UserField3					
						if (UserField4 entered)	
							invoked.UserField4 				= UserField4					
						if (UserField5 entered
						and UserField5 != VendorItem)
							invoked.UserField5 				= UserField5					
						if (UserFieldN1 entered)
							invoked.UserFieldN1 			= UserFieldN1					
						if (UserFieldN2 entered)	
							invoked.UserFieldN2 			= UserFieldN2								
						if (UserFieldN3 entered)
							invoked.UserFieldN3  			= UserFieldN3 
						if (ChargeNumber entered)
							invoked.ChargeNumber            = ChargeNumber
						if (UNSPSCCode entered
						and ContractGroup.UseUNSPSCCode)
							invoked.UNSPSCCode.UNSPSCSegment 	= UNSPSCCode[1:2]
							invoked.UNSPSCCode.UNSPSCFamily  	= UNSPSCCode[3:4]
							invoked.UNSPSCCode.UNSPSCClass   	= UNSPSCCode[5:6]
							invoked.UNSPSCCode.UNSPSCCommodity	= UNSPSCCode[7:8]  
						invoked.FutureCostDate			= 0 					
			else

			if (LocalVendorNumber)
				invoke FastUpdate first ContractLineVenUpdateRel
					if (LocalEffectiveDate > current corporate date
					and invoked.HasBeenActivated)
						invoked.effective date 		= LocalEffectiveDate
					invoked.FutureCost              = first ContractLineVenUpdateRel.BaseCost
					invoked.BaseCost				= LocalBaseCost
					invoked.FromImport              = true
					invoked.NonManualUpdate         = true					
					if (ItemNumber.Consignment)
						invoked.ConsignmentCurrentNetCost 	= LocalBaseCost
					else
						invoked.CurrentNetCost   			= LocalBaseCost
					invoked.DefaultBuyUnitCost		= DerivedDefaultBuyUnitCost	
					invoked.EffectiveDate			= LocalEffectiveDate 					
					invoked.LocalCostEffectiveDate  = LocalEffectiveDate
					if (ExpirationDate entered)
						invoked.ExpirationDate      = ExpirationDate
					if (CostOption entered)
						invoked.CostOption 				= CostOption	
					if (!UpdateCostsOnly)
						fill in user fields from this instance 
						invoked.Manufacturer            	= ManufacturerInformation.Manufacturer
						invoked.ManufacturerNumber      	= ManufacturerInformation.ManufacturerNumber
						if (ItemNumber entered)
				 			invoked.ItemNumber				= ItemNumber
			 			invoked.ItemType				    = ItemType		
						invoked.ItemDescription			    = ItemDescription		
						if (ItemDescription2 entered)
							invoked.ItemDescription2		= ItemDescription2		
						if (ItemDescription3 entered)
							invoked.ItemDescription3		= ItemDescription3	
						if (VendorItem entered
						and GPOContractNumber !entered)
							invoked.VendorItem              = VendorItem        
						if (VendorItemDescription entered)
				    		invoked.VendorItemDescription	= VendorItemDescription		
						if (GlobalTradeItemNumber entered)
				 			invoked.GlobalTradeItemNumber	= GlobalTradeItemNumber
						if (ServiceCode entered)
							invoked.ServiceCode				= ServiceCode		
						if (Quantity not = 0)
							invoked.Quantity 				= Quantity		
						if (UOM entered)
							invoked.UOM 					= UOM		
						if (LowUOMCode entered)
							invoked.LowUOMCode              = LowUOMCode
						if (UOMConversion > 0)
							invoked.UOMConversion           = UOMConversion						
						if (CommodityCode entered)
							invoked.CommodityCode			= CommodityCode		
						if (Sku entered)
							invoked.Sku                     = Sku 
						if (NdcNbr entered)
							invoked.NdcNbr                  = NdcNbr	 							
						if (Upc entered)
							invoked.Upc                     = Upc 				                     
						if (HibccUpn entered)
							invoked.HibccUpn                = HibccUpn						                
						if (UccEanUpn entered) 
							invoked.UccEanUpn               = UccEanUpn
						if (Priority not = 0)
							invoked.Priority				= Priority		
						if (PayablesDistributionCode entered)
							invoked.PayablesDistributionCode = PayablesDistributionCode
						if (BlanketStandingRequestingLocation entered)
							invoked.BlanketStandingRequestingLocation		= BlanketStandingRequestingLocation			
						if (CurrentPercent not = 0)
							invoked.CurrentPercent 			= CurrentPercent		
						if (PerOrderMaximumQuantity not = 0)
							invoked.PerOrderMaximumQuantity 			= PerOrderMaximumQuantity		
						if (PerOrderMaximumAmount not = 0)
							invoked.PerOrderMaximumAmount 			= PerOrderMaximumAmount		
						if (PerOrderMinimumQuantity not = 0)
							invoked.PerOrderMinimumQuantity 			= PerOrderMinimumQuantity		
						if (PerOrderMinimumAmount not =0)
							invoked.PerOrderMinimumAmount 			= PerOrderMinimumAmount		
						if (Taxable entered)
							invoked.Taxable		 			= Taxable		
						if (TaxCode entered)
							invoked.TaxCode					= TaxCode
						if (TaxUsageCode entered)
							invoked.TaxUsageCode			= TaxUsageCode
						if (ExpirationDate not = 0)
							invoked.ExpirationDate 			= ExpirationDate		
						if (BasePercent not = 0)
							invoked.BasePercent 			= BasePercent		
						if (ConsignmentPricingMarkupOrDiscount entered)
							invoked.ConsignmentPricingMarkupOrDiscount = ConsignmentPricingMarkupOrDiscount
						if (ConsignmentLinePriceBreakOn entered)
							invoked.ConsignmentLinePriceBreakOn = ConsignmentLinePriceBreakOn		
						if (ConsignmentPriceBreak entered)
				    		invoked.ConsignmentPriceBreak	= ConsignmentPriceBreak		
						if (PricingMarkupOrDiscount entered)
							invoked.PricingMarkupOrDiscount	= PricingMarkupOrDiscount		
						if (LinePriceBreakOn entered)
							invoked.LinePriceBreakOn 			= LinePriceBreakOn		
						if (PriceBreakImport entered)
				    		invoked.PriceBreak				= PriceBreakImport		
						if (Retainage entered)
							invoked.Retainage 				= Retainage		
						if (RetainagePercent1 not = 0)
							invoked.RetainagePercent1 		= RetainagePercent1		
						if (RetainageUpToPercent not = 0)
							invoked.RetainageUpToPercent 	= RetainageUpToPercent		
						if (RetainagePercent2 not = 0)
							invoked.RetainagePercent2 		= RetainagePercent2		
						if (RetainageOverridePercent not = 0)
							invoked.RetainageOverridePercent = RetainageOverridePercent		
						if (LifetimeMaximumQuantity not = 0)
							invoked.LifetimeMaximumQuantity 				= LifetimeMaximumQuantity		
						if (HCPCSCode entered)
							invoked.HCPCSCode                = HCPCSCode 
						if (ClinicalSystemUse = true)
							invoked.ClinicalSystemUse        = ClinicalSystemUse 
						if (PatientChargeable = true)
							invoked.PatientChargeable        = PatientChargeable
						if (Latex > 0)
							invoked.Latex                    = Latex
						if (UsageIdentifier entered)
							invoked.UsageIdentifier          = UsageIdentifier 
						if (HSNSACCode entered)
							invoked.HSNSACCode               = HSNSACCode 
						if (CriticalItem = true)
							invoked.CriticalItem             = CriticalItem 					
						if (PersonalProtectiveEquipment = true) 
							invoked.PersonalProtectiveEquipment = PersonalProtectiveEquipment		
						if (GMDNPTCode entered)
							invoked.GMDNPTCode               = GMDNPTCode 
						if (UserField1 entered)
							invoked.UserField1 				= UserField1					
						if (UserField2 entered)
							invoked.UserField2 				= UserField2					
						if (UserField3 entered)	
							invoked.UserField3 				= UserField3					
						if (UserField4 entered)	
							invoked.UserField4 				= UserField4					
						if (UserField5 entered
						and UserField5 != VendorItem)
							invoked.UserField5 				= UserField5					
						if (UserFieldN1 entered)
							invoked.UserFieldN1 			= UserFieldN1					
						if (UserFieldN2 entered)	
							invoked.UserFieldN2 			= UserFieldN2								
						if (UserFieldN3 entered)
							invoked.UserFieldN3  			= UserFieldN3 
						if (ChargeNumber entered)
							invoked.ChargeNumber            = ChargeNumber
						if (UNSPSCCode entered
						and ContractGroup.UseUNSPSCCode)
							invoked.UNSPSCCode.UNSPSCSegment 	= UNSPSCCode[1:2]
							invoked.UNSPSCCode.UNSPSCFamily  	= UNSPSCCode[3:4]
							invoked.UNSPSCCode.UNSPSCClass   	= UNSPSCCode[5:6]
							invoked.UNSPSCCode.UNSPSCCommodity	= UNSPSCCode[7:8]  
						invoked.FutureCostDate			= 0 					
		
			if (LocalContract.HasBeenActivated
			or  (!LocalContract.HasBeenActivated
			and IsManufacturerContract
			and CanUseForCostDefaulting))		
				if (LocalFutureCostDate > 0)
					LocalPriceChangeDate = LocalFutureCostDate
				else
					LocalPriceChangeDate = LocalEffectiveDate
			
				if (!ContractImportPriceChangeRel exists)
					invoke Create ContractImportPriceChange          
						invoked.ContractGroup 			  = ContractGroup
						invoked.ContractImport 			  = ContractImport
						invoked.ContractImportPriceChange = LocalPriceChangeDate

		
		CreateContractLinePriceChange
			invoke Create ContractLinePriceChange
				if (LocalCostVariance)
					invoked.ProcessingType      = 1 
				else
					invoked.ProcessingType      = 2 
				invoked.FromImport		        = ContractImport
				invoked.FromLineNumber          = ContractLineImport
				invoked.ContractGroup			= ContractGroup
				invoked.Contract				= LocalContract
				invoked.ContractLine            = LocalContractLine
		 		invoked.ItemNumber				= ItemNumber		
				invoked.VendorItem              = VendorItem        
				invoked.UOM                     = UOM
				if (LocalCostVariance)
					invoked.EffectiveDate       = EffectiveDate
				else
					invoked.EffectiveDate       = ParameterCompareEffectiveDate
				if (LocalCostVariance)
					invoked.ExpirationDate 		= ExpirationDate
				else
					invoked.ExpirationDate      = ParameterCompareExpirationDate
				invoked.ManufacturerInformation = ManufacturerInformation		
				invoked.FutureCostDate			= LocalFutureCostDate 					
				invoked.FutureCost				= LocalFutureCost
				invoked.BaseCost				= LocalBaseCost
							
		InitializePriceBreaks
			invoke FastUpdate ContractLineImport
				if (!PriceBreaksAllowed and PricingMarkupOrDiscount entered)
					invoked.PricingMarkupOrDiscount = blank
					invoked.LinePriceBreakOn = blank
					invoked.PriceBreakImport.QuantityPercentPrice[1] = 0
					invoked.PriceBreakImport.QuantityPercentPrice[2] = 0
					invoked.PriceBreakImport.QuantityPercentPrice[3] = 0
					invoked.PriceBreakImport.QuantityPercentPrice[4] = 0
					invoked.PriceBreakImport.QuantityPercentPrice[5] = 0
				if (!CsnPriceBreaksAllowed and ConsignmentPricingMarkupOrDiscount entered)
					invoked.ConsignmentPricingMarkupOrDiscount = blank
					invoked.ConsignmentLinePriceBreakOn        = blank
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[1] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[2] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[3] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[4] = 0
					invoked.ConsignmentPriceBreak.QuantityPercentPrice[5] = 0


		CanUseForCostDefaultingRules

			if  (IsManufacturerContract
			and  HasTierMembersForManufacturer)
				if (ItemNumberExists)
					CanUseForCostDefaulting = true
				else
				if (SpecialItem)
					if (ContractImport.ContractSubtype not entered and ContractImport.ContractType.CanUseForCostDefaultingOptions.UseAllItems
					or  ContractImport.ContractSubtype entered and ContractImport.ContractSubtype.CanUseForCostDefaultingOptions.UseAllItems)
						CanUseForCostDefaulting = true
			else
			if (!IsManufacturerContract
			or ( IsManufacturerContract
			and  NoMembersExist))
				if (SpecialItem
				or (ServiceItem
				and !ServicePurchaseTypeContract))
					if (ContractImport.ContractSubtype not entered and ContractImport.ContractType.CanUseForCostDefaultingOptions.UseAllItems
					or  ContractImport.ContractSubtype entered and ContractImport.ContractSubtype.CanUseForCostDefaultingOptions.UseAllItems)
						CanUseForCostDefaulting = true
				else
				if (ItemType.Itemmast)
					if (ContractImport.ContractSubtype not entered and ContractImport.ContractType.CanUseForCostDefaultingOptions.UseAllItems
					or  ContractImport.ContractSubtype entered and ContractImport.ContractSubtype.CanUseForCostDefaultingOptions.UseAllItems
					or  ContractImport.ContractSubtype not entered and ContractImport.ContractType.CanUseForCostDefaultingOptions.UseOnlyItemMasterItems
					or  ContractImport.ContractSubtype entered and ContractImport.ContractSubtype.CanUseForCostDefaultingOptions.UseAllNonSpecialItems)
						CanUseForCostDefaulting = true
			else 
				CanUseForCostDefaulting = false 				
	Create Exit Rules
		if (ContractImport.CreateCommitments.Line
		or ContractImport.CreateCommitments.LineSpread)
			UseCommitments = true
		if (ItemNumber exists)
			Upc							= blank
			Sku							= blank
			HibccUpn					= blank
			UccEanUpn					= blank
			NdcNbr						= blank
			GenericName					= blank
	        CommodityCode 				= ItemNumber.CommodityCode

		if (VendorItem exists)
			LabelerIdentificationCode	= blank
		include CanUseForCostDefaultingRules

		if (GPOContractNumber !entered)
			GPOContractNumber = ContractImport.GPOContractNumber
		
		if (GPOContractNumberEntered)
			if (BaseCost = 0)
				if (!CostOption = 3)
					CostOption = 2 
			ContractVendorItem = VendorItem
		ContractManufacturerInformation = ManufacturerInformation

		if (!ItemNumber exists)
			if (CommodityCode !entered)
				CommodityCode = ContractImport.CommodityCode
			if (Taxable = false)
				Taxable = ContractImport.DefaultTaxable 
			if (TaxCode !entered)
				TaxCode = ContractImport.TaxCode 
				
	Actions
		Create is a Create Action
			Field Rules
				UpdateFunction
					default to "U"  
										
			Action Rules 
				include DefaultItemNumbers 
				
				if (IsManufacturerOrDistributorContract)
					constraint (!ServiceItem)
						"ManufacturerOrDistributorContractsCannotContainServiceItems"

				constraint (ItemDescription entered) 
					"ItemDescriptionIsRequired"		

				if (ContractImport.MaximumAmount entered)
					if (!ContractImport.ServicePurchaseType)
						constraint ((ContractImport.TotalLineMaximumAmount + LifetimeMaximumAmount) <= ContractImport.MaximumAmount)
							"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<ContractImport.MaximumAmount>AtTheContractHeader"		
					else
					if (ContractImport.ServicePurchaseType)
						if (ServiceCode.Amount)
							constraint ((ContractImport.TotalLineMaximumAmount + BaseCost) <= ContractImport.MaximumAmount)
								"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<ContractImport.MaximumAmount>AtTheContractHeader"
						if (ServiceCode.Quantity)
							constraint (ContractImport.TotalLineMaximumAmount + (BaseCost * LifetimeMaximumQuantity) <= ContractImport.MaximumAmount)
								"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<ContractImport.MaximumAmount>AtTheContractHeader"

			Exit Rules

				if (UNSPSCCode entered
				and UNSPSCCodeRel !exists
				and ContractGroup.AutoAddUNSPSCCode) 
				
					include CreateUNSPSCCode

				include CheckForLineErrors
				
				increment ContractImport.TotalLineMaximumAmount by LifetimeMaximumAmount
									
		CreateWithTierCosts is a Create Action
			valid when (IsManufacturerContract)
			
			Field Rules
				UpdateFunction
					default to "U"
			
			Action Rules
				include DefaultItemNumbers
				
				constraint (ItemDescription entered) 
					"ItemDescriptionIsRequired"		
				
				if (IsManufacturerContract)
					constraint (!ServiceItem)
						"ManufacturerOrDistributorContractsCannotContainServiceItems"
				
				if (TransientTierCost1 entered)
					constraint (TransientTier1 entered)
						"MustEnterTierIfTierCostEntered"
				if (TransientTierCost2 entered)
					constraint (TransientTier2 entered)
						"MustEnterTierIfTierCostEntered"
				if (TransientTierCost3 entered)
					constraint (TransientTier3 entered)
						"MustEnterTierIfTierCostEntered"
				if (TransientTierCost4 entered)
					constraint (TransientTier4 entered)
						"MustEnterTierIfTierCostEntered"
				if (TransientTierCost5 entered)
					constraint (TransientTier5 entered)
						"MustEnterTierIfTierCostEntered"

			Exit Rules

				if (UNSPSCCode entered
				and UNSPSCCodeRel !exists
				and ContractGroup.AutoAddUNSPSCCode) 
				
					include CreateUNSPSCCode

				include CheckForLineErrors

				if (TransientTier1 entered
				or  BaseCost !entered)
					invoke Create ContractLineImportTierCost
						invoked.ContractGroup 		= ContractGroup
						invoked.ContractImport      = ContractImport
						invoked.ContractLineImport  = ContractLineImport
						invoked.ContractImportTier  = TransientTier1
						invoked.TierCost      		= TransientTierCost1
				if (TransientTier2 entered)
					invoke Create ContractLineImportTierCost
						invoked.ContractGroup 		= ContractGroup
						invoked.ContractImport      = ContractImport
						invoked.ContractLineImport  = ContractLineImport
						invoked.ContractImportTier  = TransientTier2
						invoked.TierCost      		= TransientTierCost2
						
				if (TransientTier3 entered)
					invoke Create ContractLineImportTierCost
						invoked.ContractGroup 		= ContractGroup
						invoked.ContractImport      = ContractImport
						invoked.ContractLineImport  = ContractLineImport
						invoked.ContractImportTier  = TransientTier3
						invoked.TierCost      		= TransientTierCost3
						
				if (TransientTier4 entered)
					invoke Create ContractLineImportTierCost
						invoked.ContractGroup 		= ContractGroup
						invoked.ContractImport      = ContractImport
						invoked.ContractLineImport  = ContractLineImport
						invoked.ContractImportTier  = TransientTier4
						invoked.TierCost      		= TransientTierCost4
						
				if (TransientTier5 entered)
					invoke Create ContractLineImportTierCost
						invoked.ContractGroup 		= ContractGroup
						invoked.ContractImport      = ContractImport
						invoked.ContractLineImport  = ContractLineImport
						invoked.ContractImportTier  = TransientTier5
						invoked.TierCost      		= TransientTierCost5
				
		CreateNoRules is a Create Action
			restricted
			bypass field rules
			
			Entrance Rules
				ContractLineImport = last ContractLineImportRel.ContractLineImport +1
			
			Action Rules
			
				include DefaultItemNumbers
				
				constraint (ItemDescription entered) 
					"ItemDescriptionIsRequired"		
				
			Exit Rules
			
				if (UNSPSCCode entered
				and UNSPSCCodeRel !exists
				and ContractGroup.AutoAddUNSPSCCode) 
				
					include CreateUNSPSCCode

				include CheckForLineErrors
				
				if (TransientTierCost1 entered)
					invoke Create ContractLineImportTierCost
						invoked.ContractGroup 		= ContractGroup
						invoked.ContractImport      = ContractImport
						invoked.ContractLineImport  = ContractLineImport
						invoked.ContractImportTier  = TransientTier1
						invoked.TierCost      		= TransientTierCost1
						
				if (TransientTierCost2 entered)
					invoke Create ContractLineImportTierCost
						invoked.ContractGroup 		= ContractGroup
						invoked.ContractImport      = ContractImport
						invoked.ContractLineImport  = ContractLineImport
						invoked.ContractImportTier  = TransientTier2
						invoked.TierCost      		= TransientTierCost2
						
				if (TransientTierCost3 entered)
					invoke Create ContractLineImportTierCost
						invoked.ContractGroup 		= ContractGroup
						invoked.ContractImport      = ContractImport
						invoked.ContractLineImport  = ContractLineImport
						invoked.ContractImportTier  = TransientTier3
						invoked.TierCost      		= TransientTierCost3
						
				if (TransientTierCost4 entered)
					invoke Create ContractLineImportTierCost
						invoked.ContractGroup 		= ContractGroup
						invoked.ContractImport      = ContractImport
						invoked.ContractLineImport  = ContractLineImport
						invoked.ContractImportTier  = TransientTier4
						invoked.TierCost      		= TransientTierCost4
						
				if (TransientTierCost5 entered)
					invoke Create ContractLineImportTierCost
						invoked.ContractGroup 		= ContractGroup
						invoked.ContractImport      = ContractImport
						invoked.ContractLineImport  = ContractLineImport
						invoked.ContractImportTier  = TransientTier5
						invoked.TierCost      		= TransientTierCost5
		
		Update is an Update Action
			
			Field Rules
			
				VendorItem
				
					if (VendorItem changed)
						for each ContractLineImportTierCostRel
							invoke Update each
								each.VendorItem  = VendorItem
								
				ManufacturerInformation
					if (ManufacturerInformation.ManufacturerNumber changed)
						for each ContractLineImportTierCostRel
							invoke Update each
								each.ManufacturerNumber  = ManufacturerInformation.ManufacturerNumber										        
			
				ItemDescription
					constraint (ItemDescription entered) 
						"ItemDescriptionIsRequired"		
						
			Action Rules
			
				if (ContractManufacturerInformation !entered)
					ContractManufacturerInformation = ManufacturerInformation
				
				include DefaultItemNumbers
				
				if (UNSPSCCode entered
				and UNSPSCCodeRel !exists
				and ContractGroup.AutoAddUNSPSCCode) 
				
					include CreateUNSPSCCode

				include CheckForLineErrors
				
				if (IsManufacturerOrDistributorContract)
					constraint (!ServiceItem)
						"ManufacturerOrDistributorContractsCannotContainServiceItems"
						
				if  (ContractImport.MaximumAmount entered
				and (LifetimeMaximumAmount changed
				or   BaseCost changed
				or   LifetimeMaximumQuantity changed)
				and  LifetimeMaximumAmount > old LifetimeMaximumAmount)
					if (!ContractImport.ServicePurchaseType)
						constraint ((ContractImport.TotalLineMaximumAmount + (LifetimeMaximumAmount - old LifetimeMaximumAmount)) <= ContractImport.MaximumAmount)
							"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<ContractImport.MaximumAmount>AtTheContractHeader"		
					else
					if (ContractImport.ServicePurchaseType)
						if (ServiceCode.Amount)
							constraint (ContractImport.TotalLineMaximumAmount + (BaseCost - old BaseCost) <= ContractImport.MaximumAmount)
								"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<ContractImport.MaximumAmount>AtTheContractHeader"
						if (ServiceCode.Quantity)
							constraint (ContractImport.TotalLineMaximumAmount + ((BaseCost * LifetimeMaximumQuantity) - (old BaseCost * old LifetimeMaximumQuantity)) <= ContractImport.MaximumAmount)
								"TheTotalLineMaximumAmountCannotBeGreaterThanTheLifetimeMaximumAmount<ContractImport.MaximumAmount>AtTheContractHeader"

				if (ItemType changed)
					include CanUseForCostDefaultingRules

			Exit Rules
				
				if ((!PriceBreaksAllowed and PricingMarkupOrDiscount entered)
				or  (!CsnPriceBreaksAllowed and ConsignmentPricingMarkupOrDiscount entered))
					include InitializePriceBreaks
				
				if (LifetimeMaximumAmount changed)
					increment ContractImport.TotalLineMaximumAmount by (LifetimeMaximumAmount - old LifetimeMaximumAmount)
										
		Delete is a Delete Action
			valid when (!CannotUpdateGPO)
		  	Action Rules
                if (TierCostsExist)
                	invoke Delete ContractLineImportTierCostRel
				
			Exit Rules
				increment ContractImport.TotalLineMaximumAmount by (0 - LifetimeMaximumAmount)
		
		Select is an Instance Action 
			valid when (CanSelect)
			Action Rules 

				SelectedForCopy = true 

		Unselect is an Instance Action 
			valid when (SelectedForCopy)
			Action Rules 
				SelectedForCopy = false  

		UpdateUOMFromMapping is a Set Action 
			restricted 
			Parameters  
				NewUOM      		is like UnitOfMeasure 
				CurrentUOM  		is like UnitOfMeasure  	 
            	ParmSupplier        is like GPOSupplierID
				ParmContractGroup   is like ContractGroup 

			Instance Selection 
				where (ParmContractGroup                        = ContractGroup
				and    ItemType.Special
				and    ContractImport.ManufacturerSupplier	    = ParmSupplier
				and   (CurrentUOM 								= UOM
				or     CurrentUOM 								= NewUOM))
			Action Rules 

				Instance Rules 
					if (ContractLine entered)
						invoke FastUpdate ContractLineMainRel
							invoked.UOM.UnitOfMeasure	= NewUOM 
					else 
					if (ContractLineMfgNotClosedRel exists)
						invoke FastUpdate first ContractLineMfgNotClosedRel
							invoked.UOM.UnitOfMeasure	= NewUOM 							
					
					UOM					= NewUOM
					GPOUnitOfMeasure	= CurrentUOM 

		ProcessDiscontinuedLines is a Set Action 
			restricted 
			Parameters 
				ParmContractGroup				is a ContractGroup
				ParmContractImport  			is a ContractImport
				CreateAsManufacturerContract    is Boolean 
				CreateDistributorContracts      is Boolean 
				CreateNewContract               is Boolean 
				AddLinesToExistingContract      is Boolean 
				ExistingContractForLineAdd      is a Contract 
				CloseExistingLines              is Boolean 
				HoldExistingLines               is Boolean 
				ProcurementReasonCode
				NewName 						is a Description
				NewDescription 					is Text
				NewContact                      is an Employee
				NewSupplier						is a Supplier
				NewSupplierContact				is a SupplierSourceId
				NewContractType					is a ContractType
				NewContractSubtype				is a ContractSubtype
				NewContractClassification		is a ContractClassification
				NewContractSubclassification	is a ContractSubclassification
				NewContractHasNoParent			is Boolean
				NewParentContract				is a Contract
				NewEffectiveDate				is Date
				NewExpirationDate				is Date
				NewContractReviewDate			is Date
				NewTargetedPurchasesFromDate	is Date
				NewTargetedPurchasesToDate		is Date
				NewCurrencyCode					is a Currency
				CopySelectAll					is Boolean
				CopyTiersOrDistributorPricing	is Boolean
				CopyContractParticipants		is Boolean
				CopyContacts					is Boolean
				CopyManufacturerContracts		is Boolean
				CopyContractLines				is Boolean
				CopyArticlesAndTerms			is Boolean
				CopyContractComments			is Boolean
				CopyContractAttachments         is Boolean
				CopyContractLineComments		is Boolean
				CopyContractLineAttachments     is Boolean
				CopyManualQuestions				is Boolean
				CopyMilestones					is Boolean
				CopyDeliverables				is Boolean
				CopyHoldForLines                is Boolean
				CopyLocations                   is Boolean
				CopyCapitatedInformation        is Boolean	
				CopyQualifierContractsAndItems  is Boolean 	
				AllLinesSelected                is Boolean 		

			Instance Selection 
				where (ParmContractGroup	= ContractGroup
				and    ParmContractImport	= ContractImport
				and    SelectedForCopy)

			Sort Order 
				ContractGroup 
				ContractImport 
				ContractLineImport
			
			Action Rules 

				ContractImport Set Rules 

					Exit Rules 
			
						if (CreateNewContract)
							invoke CreateContractOrLinesFromSelectedLines ContractImport.GPOContractDirect.Contract
								invoked.CreateAsManufacturerContract 	= CreateAsManufacturerContract
								invoked.CreateDistributorContracts    	= CreateDistributorContracts
								invoked.CloseExistingLines           	= CloseExistingLines	
								invoked.HoldExistingLines               = HoldExistingLines 
								invoked.ProcurementReasonCode           = ProcurementReasonCode
								invoked.FromInterface                	= true 
								invoked.NewName 						= NewName 
								invoked.NewDescription 					= NewDescription
								invoked.NewContact                      = NewContact
								invoked.NewSupplier						= NewSupplier
								invoked.NewSupplierContact				= NewSupplierContact 
								invoked.NewContractType					= NewContractType 
								invoked.NewContractSubtype				= NewContractSubtype
								invoked.NewContractClassification		= NewContractClassification
								invoked.NewContractSubclassification	= NewContractSubclassification
								invoked.NewContractHasNoParent			= NewContractHasNoParent
								invoked.NewParentContract				= NewParentContract
								invoked.NewEffectiveDate				= NewEffectiveDate
								invoked.NewExpirationDate				= NewExpirationDate 
								invoked.NewContractReviewDate			= NewContractReviewDate
								invoked.NewTargetedPurchasesFromDate	= NewTargetedPurchasesFromDate
								invoked.NewTargetedPurchasesToDate		= NewTargetedPurchasesToDate
								invoked.NewCurrencyCode					= NewCurrencyCode
								invoked.CopySelectAll					= CopySelectAll
								invoked.CopyTiersOrDistributorPricing	= CopyTiersOrDistributorPricing
								invoked.CopyContractParticipants	    = CopyContractParticipants	
								invoked.CopyContacts					= CopyContacts 
								invoked.CopyManufacturerContracts		= CopyManufacturerContracts
								if (CopySelectAll = false)
									invoked.CopyContractLines           = true 								
								else 
									invoked.CopyContractLines            = false 
								invoked.CopyArticlesAndTerms			= CopyArticlesAndTerms
								invoked.CopyContractComments			= CopyContractComments
								invoked.CopyContractAttachments         = CopyContractAttachments
								invoked.CopyContractLineComments		= CopyContractLineComments
								invoked.CopyContractLineAttachments     = CopyContractLineAttachments
								invoked.CopyManualQuestions				= CopyManualQuestions
								invoked.CopyMilestones					= CopyMilestones
								invoked.CopyDeliverables				= CopyDeliverables
								invoked.CopyHoldForLines                = CopyHoldForLines
								invoked.CopyLocations                   = CopyLocations
								invoked.CopyCapitatedInformation        = CopyCapitatedInformation
								invoked.CopyQualifierContractsAndItems  = CopyQualifierContractsAndItems
								if (!AllLinesSelected)
									invoked.CreateFromPartial           = true  
						else 
						if (AddLinesToExistingContract)
							invoke CreateContractLinesFromContract ContractLine 
								invoked.PrmContractGroup                	= ContractGroup 
								invoked.PrmFromContract                 	= ContractImport.GPOContractDirect.Contract 
								invoked.PrmNewContractAndLine.NewContract	= ExistingContractForLineAdd
								invoked.PrmContractType						= ExistingContractForLineAdd.ContractType		
								invoked.PrmContractSubtype			    	= ExistingContractForLineAdd.ContractSubtype
								invoked.PrmCurrencyCode				    	= ExistingContractForLineAdd.CurrencyCode
								invoked.PrmSupplier					    	= ExistingContractForLineAdd.Supplier
								invoked.PrmCopyContractLineComments     	= CopyContractLineComments
								invoked.PrmCopyContractLineAttachments  	= CopyContractLineAttachments
								invoked.PrmCopySelectAll			    	= CopySelectAll
								invoked.PrmEffectiveDate			    	= ExistingContractForLineAdd.EffectiveDate
								invoked.PrmExpirationDate			    	= ExistingContractForLineAdd.ExpirationDate
								invoked.PrmCopyHoldForLines             	= CopyHoldForLines 
								invoked.PrmCopyLocations                	= CopyLocations
								invoked.PrmCopyCapitatedInformation    	 	= CopyCapitatedInformation 
								if (!AllLinesSelected)
									invoked.CreateFromPartial              	= true   
								invoked.CloseExistingLines              	= CloseExistingLines 
								invoked.HoldExistingLines                   = HoldExistingLines
								invoked.ProcurementReasonCode               = ProcurementReasonCode
								invoked.FromInterface                   	= true        
								invoked.CreateLinesOnly                     = true          

						if (!ContractImport.HasLines)
							invoke DeleteInterface ContractImport

				Instance Rules 

					if  (!ErrorsExist
					and (AddLinesToExistingContract
					or   CreateNewContract))
						if (ContractLineMainRel exists)
							invoke Select ContractLineMainRel  
						else
						if (ContractLineMfgCostRel exists)
							invoke Select first ContractLineMfgCostRel  
						else
						if (ContractLineItemRel exists)
							invoke Select first ContractLineItemRel
						else
						if (ContractLineVendorItemRel exists)
							invoke Select first ContractLineVendorItemRel

					else 
					if (!AddLinesToExistingContract
					and !CreateNewContract
					and (CloseExistingLines
					or   HoldExistingLines))
						if (ContractLineMainRel exists)
							if (CloseExistingLines)
								invoke DeleteOrClose ContractLineMainRel
							if (HoldExistingLines) 
								invoke HoldContractLine ContractLineMainRel
						else
						if (ContractLineMfgCostRel exists)
							if (CloseExistingLines)
								invoke DeleteOrClose first ContractLineMfgCostRel  
							if (HoldExistingLines)
								invoke HoldContractLine first ContractLineMfgCostRel  							
						else
						if (ContractLineItemRel exists)
							if (CloseExistingLines)
								invoke DeleteOrClose first ContractLineItemRel
							if (HoldExistingLines)					
								invoke HoldContractLine first ContractLineItemRel										
						else
						if (ContractLineVendorItemRel exists)
							if (CloseExistingLines)
								invoke DeleteOrClose first ContractLineVendorItemRel	
							if (HoldExistingLines)				
								invoke HoldContractLine first ContractLineVendorItemRel																	
					invoke Delete 

		SetToCleanMissingGPOItems is a Set Action  
			restricted
			Parameters
				ParmContractGroup	is a ContractGroup
				ParmContractImport  is a ContractImport
				
		FindDiscontinuedItems is a Set Action 
			restricted
			Parameters 
				ParmContractGroup	is a ContractGroup
				ParmContractImport  is a ContractImport  

			Instance Selection 	
				where (ParmContractGroup = ContractGroup
				and    ParmContractImport = ContractImport
				and    GPOContractNumber entered
				and    !UpdateFunction.Create
				and    !UpdateFunction.Delete
				and    !ContractImport.WholeContractDiscontinued
				and    GPOItemDoesNotExist)

			Action Rules 

				Instance Rules 

					UpdateFunction = "D"
		
		DeleteAllLines is a Set Action
			restricted
			Parameters
				ParmContractGroup     is a ContractGroup
				ParmContractImport    is a ContractImport
				
			Instance Selection
				where (ParmContractGroup 	= ContractGroup
				and    ParmContractImport   = ContractImport)
				
			Sort Order
				ContractGroup
				ContractImport
				ContractLineImport
			
			Action Rules
				Empty Set Rules
					invoke Delete ContractImport
				
				ContractImport Set Rules
					Exit Rules
						invoke Delete ContractImport
				
				Instance Rules
					invoke Delete

		FastUpdate is an Update Action
			bypass field rules
			restricted

			Action Rules 

				if (ContractManufacturerInformation !entered)
					ContractManufacturerInformation = ManufacturerInformation			
				
		FastUpdateWithoutEdits is an Instance Action
			restricted
			Parameters
				UpdateCanUseForCostDefaultingTrue	is Boolean
				UpdateCanUseForCostDefaultingFalse	is Boolean
				UpdateContractLineCreateDate	is Boolean			
				UpdateUpdateFunction			is Boolean			
				UpdateUOM						is Boolean			
				PrmContractLineCreateDate		is Date
				PrmUpdateFunction				is AlphaUpper size 1
				FromCheckForLineErrors          is Boolean
				PrmUOM							is AlphaUpper size 4
				NewItem                         is an Item
				NewVendorItem 					is like VendorItem
				NewVendorItemDescription        is a Description
				NewManufacturer                 is like Manufacturer
				NewManufacturerNumber           is like ManufacturerNumber
				UpdateWithReplacementVendorItem is Boolean
				UpdateManufacturerInformation   is Boolean
				FromManufacturerChange          is Boolean
				UpdateItemDescription1			is Boolean			
				UpdateItemDescription2			is Boolean			
				UpdateItemDescription3			is Boolean			
				NewItemDescription1				is a Description	
				NewItemDescription2				is a Description	
				NewItemDescription3				is a Description3	
				
			Action Rules

				if (UpdateCanUseForCostDefaultingTrue)
					CanUseForCostDefaulting	= true
				if (UpdateCanUseForCostDefaultingFalse)
					CanUseForCostDefaulting	= false
				if (UpdateContractLineCreateDate)
					ContractLineCreateDate			= current corporate date
				if (UpdateUpdateFunction)
					UpdateFunction					= PrmUpdateFunction
				if (UpdateUOM)
					UOM								= PrmUOM
				if (NewItem entered)
					ItemNumber                      = NewItem
					ItemDescription                 = NewItem.Description
					ItemDescription2                = NewItem.Description2
					ItemDescription3                = NewItem.Description3
					ItemType                        = 1
				if (UpdateWithReplacementVendorItem)
					if (ItemNumber = VendorItem
					and ItemType.Special)
						ItemNumber      = NewVendorItem
					ContractVendorItem		  								= NewVendorItem
					VendorItem              	        					= NewVendorItem
					VendorItemDescription           						= NewVendorItemDescription
					if (NewManufacturer entered)
						ContractManufacturerInformation.Manufacturer        = NewManufacturer
					if (NewManufacturerNumber entered)
						ContractManufacturerInformation.ManufacturerNumber  = NewManufacturerNumber
					for each ContractLineImportTierCostRel
						invoke Update each
							if (GPOContractNumberEntered)
								invoked.VendorItem  		= NewVendorItem
				if (UpdateManufacturerInformation)
					ContractManufacturerInformation.Manufacturer            = NewManufacturer
					if (!FromManufacturerChange)
						ContractManufacturerInformation.ManufacturerNumber  = NewManufacturerNumber 
					if (ItemType.Special
					and ContractLineMainRel exists
					and ContractLineMainRel.VendorItem = NewManufacturerNumber)
						ContractVendorItem                                  = NewManufacturerNumber
				if (UpdateItemDescription1)							
					ItemDescription  = NewItemDescription1			
				if (UpdateItemDescription2)							
					ItemDescription2 = NewItemDescription2			
				if (UpdateItemDescription3)							
					ItemDescription3 = NewItemDescription3			
				if (!FromCheckForLineErrors)
					include CheckForLineErrors
			
		CreateContractFromImportLines is a Set Action
			restricted
			completion message is "ContractCreationComplete"
			Parameters
				PrmContractGroup					is a ContractGroup
				ImportedContract					is a ContractImport
				NewContract         				is a Contract
				ParmAccountToDistContract       	is Boolean
				ParmDoNotCreateDistributorLines		is Boolean
				ParmSpecialItemsAccountDefaultOnly  is Boolean
					
			Local Fields
				LocalItemNumber 			is like Item
				LocalNewContractLine        is a ContractLine view
				UpdateContract              is a Contract 
			
			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    ContractImport		= ImportedContract
				and    UpdateFunction.Create)
				
			Sort Order
				ContractGroup
				ContractImport
				ContractLineImport
								
			Action Rules
					
				ContractImport Set Rules
				
					Exit Rules
					
						if (ContractImport.CanCreateDistributorContracts
						and ContractImport.IsManufacturerContract)
							invoke CreateAndUpdateDistributorContracts ContractImportDistributor
								invoked.ParmContractGroup   				= PrmContractGroup
								invoked.ParmContractImport  				= ContractImport			
								invoked.NewContract         				= NewContract
								invoked.FromContractCreation 				= true
								invoked.ParmAccountToDistContract       	= ParmAccountToDistContract
								invoked.ParmDoNotCreateDistributorLines		= ParmDoNotCreateDistributorLines
								invoked.ParmSpecialItemsAccountDefaultOnly  = ParmSpecialItemsAccountDefaultOnly
				
				Instance Rules

					initialize LocalItemNumber
					initialize LocalVendorItem
					if (NonDirectBuyItem)
						if (!ItemNumber exists
						or  !VendorItem exists)
							if (ManufacturerInformation entered)
								LocalManufacturerInfo		= ManufacturerInformation
								LocalItemNumber	 		 	= first GetVendorItemFromManufacturerInformationRel.Item
								LocalVendorItem 		 	= first GetVendorItemFromManufacturerInformationRel.VendorItem

					UpdateContract = NewContract
					include DefaultItemNumbers
					include CheckForLineErrors
					 
					if (!ErrorsExistForContract)
						invoke Create ContractLine
							assign result to LocalNewContractLine
							fill in fields from ContractLineImport
								except invoked.UNSPSCCode
							fill in user fields from ContractLineImport 
							invoked.Contract				  = NewContract
							if (ItemType.Special
							and ContractGroup.UseUNSPSCCode)
								invoked.UNSPSCCode.UNSPSCSegment 	= UNSPSCCode[1:2]
								invoked.UNSPSCCode.UNSPSCFamily  	= UNSPSCCode[3:4]
								invoked.UNSPSCCode.UNSPSCClass   	= UNSPSCCode[5:6]
								invoked.UNSPSCCode.UNSPSCCommodity	= UNSPSCCode[7:8]
							invoked.BaseCost				  = BaseCost
							invoked.PriceBreak				  = PriceBreakImport
							invoked.FutureCostDate			  = 0 					
							invoked.FutureCost				  = 0
							invoked.FromImport                = true
							invoked.Manufacturer              = ManufacturerInformation.Manufacturer
							invoked.ManufacturerNumber        = ManufacturerInformation.ManufacturerNumber
							invoked.TransientAccount          = DefaultAccount
							if (LocalItemNumber entered)
								invoked.ItemNumber			  = LocalItemNumber
								initialize invoked.UOM
							else
								invoked.ItemNumber			  = ItemNumber
							if (LocalVendorItem entered)
								invoked.VendorItem			  = LocalVendorItem
							else
								invoked.VendorItem			  = VendorItem
						
						if (ContractImport.MultiTierDistributor)
							ContractVendorItem = VendorItem
								
						if (ContractImport.IsManufacturerContract)
							for each ContractLineImportTierCostRel
								invoke Create ContractLineTierCost
									invoked.ContractGroup         = ContractGroup
									invoked.Contract              = NewContract
									invoked.ContractLine          = LocalNewContractLine.ContractLine
									invoked.ContractTier          = each.ContractImportTier
									invoked.TierCost              = each.TierCost
									invoked.EffectiveDate         = EffectiveDate
									invoked.ExpirationDate        = ExpirationDate
						
						invoke FastUpdateWithoutEdits ContractLineImport
							invoked.UpdateContractLineCreateDate	= true
							invoked.UpdateUpdateFunction			= true
							invoked.PrmUpdateFunction           	= blank
							if (LocalItemNumber entered)
								invoked.UpdateUOM					= true
								initialize invoked.PrmUOM
						if (GPOContractNumberEntered)
							Contract 				  = LocalContract 
							ContractLine              = LocalNewContractLine.ContractLine 			
		
		CleanUpLineErrorsLines is a Set Action
            restricted
            Parameters
                PrmContractGroup        is a ContractGroup
                ImportedContract        is a ContractImport
                UpdateContract            is a Contract
                
            Instance Selection
                where (ContractGroup        = PrmContractGroup
                and    ContractImport        = ImportedContract
                and    ErrorsExist)
                
            Sort Order
                ContractGroup
                ContractImport
                ContractLineImport
            
            Local Fields
                UpdateContractLine is a ContractLine view
            
            Action Rules
                
                Instance Rules
                
                    LocalContract         = UpdateContract
					if (ContractVendorItem entered)
						LocalVendorItem	  = ContractVendorItem	
					else 
						LocalVendorItem   = VendorItem    
                    LocalManufacturerInfo = ManufacturerInformation
                    LocalUom              = UOM
                    LocalContractLine     = UpdateContractLine
                
                    include CheckForLineErrors
		
		CompareContractImportLineCosts is a Set Action
			restricted
			Parameters
				PrmContractGroup		is a ContractGroup
				ImportedContract		is a ContractImport
				CompareContract			is a Contract
				CompareFromDate         is Date
				CompareToDate           is Date
				ShowZeroDifference 		is Boolean
				ShowZeroOrdered      	is Boolean
				CompareFromTier         is a ContractImportTier
				CompareToTier           is a ContractImportTier
			
			Instance Selection
				where (ContractGroup		= PrmContractGroup
				and    ContractImport		= ImportedContract)
				
			Sort Order
				ContractGroup
				ContractImport
				ContractLineImport
				
			Action Rules
				Instance Rules
					LocalContract		  = CompareContract
					if (ContractVendorItem entered)
						LocalVendorItem	  = ContractVendorItem	
					else 
						LocalVendorItem   = VendorItem 
					LocalManufacturerInfo = ManufacturerInformation
					LocalUom			  = UOM
					LocalItemNumber       = ItemNumber
					LocalFutureCostDate 	= 0
					LocalFutureCost			= 0
					LocalEffectiveDate  	= 0
					LocalBaseCost			= 0
					LocalOutUnitCost		= 0
					ParameterCompareEffectiveDate  = CompareFromDate
					ParameterCompareExpirationDate = CompareToDate
					if (UpdateContractLineMfgExists)
						LocalContractLine         = first ContractLineMfgUpdateRel.ContractLine
						LocalCompareEffectiveDate = CompareFromDate
						if (!CompareToTier entered)
							LocalOriginalBaseCost     = first ContractLineMfgUpdateRel.BaseCost
							LocalUpdatedBaseCost  	  = BaseCost   
							if  ((BaseCost != LocalOriginalBaseCost
							or   ShowZeroDifference)
							and  (first ContractLineMfgUpdateRel.DerivedQuantityOrderedWithDistributorQuantity > 0
							or   ShowZeroOrdered))
								if (EffectiveDate = 0)
									LocalFutureCostDate     = LocalCompareEffectiveDate
								else
									LocalFutureCostDate		= EffectiveDate 
								LocalFutureCost 		= BaseCost
								LocalEffectiveDate  	= LocalCompareEffectiveDate
								LocalBaseCost			= LocalOriginalBaseCost
								include CreateContractLinePriceChange
						else
						if  (CompareToTier entered
						and (first ContractLineMfgUpdateRel.DerivedQuantityOrderedWithDistributorQuantity > 0
						or   ShowZeroOrdered))	
							LocalTier = CompareToTier
							for each ContractLineImportTierCostCompareRel
								invoke CompareContractLineTierCost each
									invoked.CompareContract          = CompareContract
									invoked.CompareContractLine      = LocalContractLine
									invoked.ShowZeroDifference       = ShowZeroDifference
									invoked.CompareFromDate          = CompareFromDate
									invoked.CompareToDate            = CompareToDate
									invoked.CompareFromTier          = CompareFromTier
					if (!UpdateContractLineMfgExists
					and  UpdateContractLineVenExists)				
						LocalContractLine         = first ContractLineVenUpdateRel.ContractLine
						LocalCompareEffectiveDate = first ContractLineVenUpdateRel.EffectiveDate
						if (!CompareToTier entered)
							LocalOriginalBaseCost     = first ContractLineVenUpdateRel.BaseCost
							LocalUpdatedBaseCost  = BaseCost   
							if  ((BaseCost != LocalOriginalBaseCost
							or   ShowZeroDifference)
							and  (first ContractLineVenUpdateRel.DerivedQuantityOrderedWithDistributorQuantity > 0
							or   ShowZeroOrdered))
								if (EffectiveDate = 0)
									LocalFutureCostDate     = LocalCompareEffectiveDate
								else
									LocalFutureCostDate		= EffectiveDate 
								LocalFutureCost 		= BaseCost
								LocalEffectiveDate  	= LocalCompareEffectiveDate
								LocalBaseCost			= LocalOriginalBaseCost
								include CreateContractLinePriceChange
						else
						if  (CompareToTier entered
						and (first ContractLineVenUpdateRel.DerivedQuantityOrderedWithDistributorQuantity > 0
						or   ShowZeroOrdered))	
							LocalTier = CompareToTier
							for each ContractLineImportTierCostCompareRel
								invoke CompareContractLineTierCost each
									invoked.CompareContract          = CompareContract
									invoked.CompareContractLine      = LocalContractLine
									invoked.ShowZeroDifference       = ShowZeroDifference
									invoked.CompareFromDate          = CompareFromDate
									invoked.CompareToDate            = CompareToDate
									invoked.CompareFromTier          = CompareFromTier
									
		ProcessContractImportLinesUpdates is a Set Action
			restricted
			completion message is "ProcessingContractImportLinesCompleted"
			Parameters
				PrmContractGroup			is a ContractGroup
				ImportedContract			is a ContractImport
				UpdateContract				is a Contract
				TolerancePercent			is Percent size 6.3
				Connector
				ToleranceAmount				is an InternationalAmount
				RejectAllCostIncreases		is Boolean
				UpdateTier              	is Boolean
				FromContractCreation        is Boolean
				UpdateCostsOnly             is Boolean
				UnreleasedMembersToStart    is Boolean
				DeleteOnly                  is Boolean
				MultipleContracts           is Boolean
				ProcessItemMasterOnly       is Boolean
				MultipleUOMHandling         is Numeric size 1
					States
						SetUOMSMustMatchToTrue  value is 1
						CloseCurrentItem        value is 2
				DefaultTolerance            is Boolean				
				ClosedLineHandling           is Numeric size 1
					States 
						CreateNewContractLine 		value is 1
						DoNotCreateNewContractLine 	value is 2
			Instance Selection
				where (PrmContractGroup		= ContractGroup
				and    ImportedContract		= ContractImport
				and    UpdateFunction entered)
				
			Sort Order
				ContractGroup
				ContractImport
				ContractLineImport
			
			Local Fields
				UpdateContractLine is a ContractLine view
			
			Action Rules
				
				ContractImport Set Rules
					Entrance Rules
						if (ContractImport.IsManufacturerContract)
							for each ContractImport.ContractImportTier set
								LocalTier     = each.ContractImportTier
								LocalContract = UpdateContract
								if (!UpdateContractTierRel exists)
									invoke Create ContractTier
										fill in fields from each.ContractImportTier
										invoked.Contract		  		   = UpdateContract
										invoked.ContractTier               = each.ContractImportTier						

					Exit Rules
						
						for each ContractImport.ContractImportPriceChange set
							invoke FastUpdateWithoutEdits UpdateContract
								if (each.ContractImportPriceChange > current corporate date)
									invoked.effective date			  = each.ContractImportPriceChange
								invoked.ProcessPricingChangesTrue = true 
								
						invoke Delete ContractImport.ContractImportPriceChange set
						LocalContract = ContractImport.DerivedToContract
						if (NewItemContractRel.CanReleaseMembers
						and  !UnreleasedMembersToStart
						and (!ContractImport.DistributorsExist
						or    ContractGroup.DoNotAutoCreateDistributorLines
						or    UpdateCostsOnly))
							invoke ExternalReleaseMembers NewItemContractRel 
           				if (ContractImport.DistributorsExist
           				and !ContractGroup.DoNotAutoCreateDistributorLines
           				and !UpdateCostsOnly)
       						
       						invoke CreateAndUpdateDistributorContracts ContractImportDistributor 
       							invoked.ParmContractGroup  			= ContractGroup
								invoked.ParmContractImport 			= ContractImport			
								invoked.NewContract        			= LocalContract
       							invoked.FromContractCreation        = FromContractCreation
       							invoked.UnreleasedMembersToStart    = UnreleasedMembersToStart
       							invoked.MultipleContracts           = MultipleContracts
               					invoked.ProcessItemMasterOnly       = ProcessItemMasterOnly
               			
               			if  (NewItemContractRel.ManufacturerModificationsToPush
               			and  NewItemContractRel.DistributorContractUnreleasedPricingMemberRel !exists) 
               				invoke UpdateDistributorContract NewItemContractRel
               					invoked.UpdateOverrideLandedCost = true
               					invoked.FromInterfaceUpdates     = true
						
						if (UpdateTier)
							invoke UpdateTiers ContractImport

						
				Instance Rules
					LocalContract		  = UpdateContract
					LocalVendorItem		  = VendorItem	
					if (ContractManufacturerInformation entered)
						LocalManufacturerInfo = ContractManufacturerInformation
					else
						LocalManufacturerInfo = ManufacturerInformation
					LocalUom			  = UOM
					LocalItemNumber       = ItemNumber
					ToleranceError 		  = false
					ToleranceAmtExceeded  = false
					TolerancePctExceeded  = false
					PriceBreaksExist      = false
					LocalFutureCostDate 	= 0
					LocalFutureCost			= 0
					LocalEffectiveDate  	= 0
					LocalBaseCost			= 0
					LocalOutUnitCost		= 0
					if (DefaultTolerance
					and	ContractImport.ClassificationHasTolerances = true
					and ToleranceAmount !entered
					and TolerancePercent !entered
					and RejectAllCostIncreases = false)
						ToleranceAmount 	= ContractImport.DerivedDefaultToleranceAmount
						TolerancePercent	= ContractImport.DerivedDefaultTolerancePercent
						Connector           = ContractImport.DerivedDefaultConnector

					if (ItemType !entered)
						if (ItemNumber exists)
							ItemType = ItemType.Itemmast
						else 
							ItemType = ItemType.Special
					if (!DeleteOnly)
						if (UpdateFunction.Create)
							include DefaultItemNumbers
						include CheckForLineErrors

					if (LineWithDuplicateUOM
					and MultipleUOMHandling > 0
					and !UpdateCostsOnly
					and (ItemType.Itemmast
					or   ProcessItemMasterOnly = false))
						if (MultipleUOMHandling = 1)
							if ((ItemType.Itemmast
							and  UpdateContract.UOMSMustMatch = false)
							or  (ItemType.Special
							and  UpdateContract.UOMSMustMatchForSpecials = false))
								invoke FastUpdateWithoutEdits UpdateContract
									if (ItemType.Itemmast)
										invoked.AllowMultipleUOMsItemmast = true
									else
									if (ItemType.Special)
										invoked.AllowMultipleUOMsSpecial  = true
								invoke FastUpdate ContractImport
									if (ItemType.Itemmast)
										invoked.UOMSMustMatch = true
									else
									if (ItemType.Special)
										invoked.UOMSMustMatchForSpecials  = true									
						if (MultipleUOMHandling = 2)
							if ((first  ContractLineVendorItemDupUOMRel.IsManufacturerContract
							and  first ContractLineVendorItemDupUOMRel.NoUnreleasedDistPoLinesExist)
							or (!first ContractLineVendorItemDupUOMRel.IsManufacturerContract))						
								invoke CloseLine  first ContractLineVendorItemDupUOMRel							
							for each ImportLineVendorItemDupUOMRel
								invoke Delete each
							if (ContractGroup.GPOUsed = 5)
								for each GHXDifferentItemRel
									invoke Update each
										invoked.ItemEndDate = current date
						for each DuplicateUOMErrorRel
							invoke Delete each
					
					if (!UpdateableErrorsExist
					and !LineWithDuplicateUOM
					and (ItemType.Itemmast
					or   ProcessItemMasterOnly = false))
						if (UpdateFunction.Create
						and !DeleteOnly
						and !UpdateCostsOnly)
							if (!UpdateContractLineDirectExists
							and	!UpdateContractLineMfgExists
							and !UpdateContractLineItemExists
							and !UpdateContractLineVenExists)
								if ((LineWithClosedCreateNew
								and  ClosedLineHandling = 1)
								or  !LineWithClosedCreateNew)
									invoke Create ContractLine
										assign result to UpdateContractLine
										fill in fields from ContractLineImport
											except invoked.UNSPSCCode
										fill in user fields from ContractLineImport 
										invoked.ContractGroup			  = ContractGroup
										invoked.Contract				  = UpdateContract
										invoked.BaseCost				  = BaseCost
										invoked.PriceBreak				  = PriceBreakImport
										invoked.FutureCostDate			  = 0 					
										invoked.FutureCost				  = 0
										invoked.FromImport                = true
										invoked.Manufacturer              = ManufacturerInformation.Manufacturer
										invoked.ManufacturerNumber        = ManufacturerInformation.ManufacturerNumber
										invoked.FromNewImportLine         = true
										invoked.TransientAccount          = DefaultAccount
										if (ItemType.Special
										and ContractGroup.UseUNSPSCCode)
											invoked.UNSPSCCode.UNSPSCSegment 	= UNSPSCCode[1:2]
											invoked.UNSPSCCode.UNSPSCFamily  	= UNSPSCCode[3:4]
											invoked.UNSPSCCode.UNSPSCClass   	= UNSPSCCode[5:6]
											invoked.UNSPSCCode.UNSPSCCommodity	= UNSPSCCode[7:8]
									if (ContractImport.MultiTierDistributor)
										ContractVendorItem = VendorItem
									if (ContractLineImportTierCostRel exists)
										for each ContractLineImportTierCostRel
											invoke Create ContractLineTierCost  
												invoked.ContractGroup                 = ContractGroup
												invoked.Contract                      = LocalContract
												invoked.ContractLine                  = UpdateContractLine.ContractLine
												invoked.ContractTier                  = each.ContractImportTier
												invoked.TierCost                      = each.TierCost
												invoked.EffectiveDate                 = EffectiveDate
												invoked.ExpirationDate                = ExpirationDate
									ContractLineCreateDate    = current corporate date
									if (ContractImport.GPONegotiated)
										Contract 				  = LocalContract 
										ContractLine              = UpdateContractLine.ContractLine 
									if (ContractLineImportDistributorNewItemRel !exists
									or  ContractGroup.DoNotAutoCreateDistributorLines = true)
										UpdateFunction            = blank
									if (LineWithClosedCreateNew)
										invoke Delete ClosedLineCreateNewRel	 
								else 
								if (LineWithClosedCreateNew 
								and ClosedLineHandling = 2)
									invoke CreateClosedLineDoNotCreateError
								
						else
						if (UpdateFunction.Update
						and !DeleteOnly)
							if (UpdateContractLineDirectExists)
								LocalContractLine         = ContractLine
								LocalOriginalBaseCost     = ContractLineMainRel.BaseCost
								LocalCompareEffectiveDate = ContractLineMainRel.EffectiveDate
								LocalOriginalLineStatus   = ContractLineMainRel.ContractLineState
								LocalUpdatedBaseCost  = BaseCost   
								LocalTolerancePercent = TolerancePercent 
								if ((TolerancePercent > 0
								or   ToleranceAmount  > 0
								or   RejectAllCostIncreases) 
								and  BaseCost != LocalOriginalBaseCost)
									if (!RejectAllCostIncreases)
										if (TolerancePercent > 0)
											if (DerivedChangePercent > DerivedTolerancePercent)
												TolerancePctExceeded = true
										if (ToleranceAmount > 0)
											if (DerivedChangeAmount > ToleranceAmount)
												ToleranceAmtExceeded = true
										if (Connector = "O" or Connector = blank)
											if (TolerancePctExceeded or ToleranceAmtExceeded)
												ToleranceError = true
										else
											if (TolerancePctExceeded and ToleranceAmtExceeded)
												ToleranceError = true
									else
										if (DerivedChangePercent > DerivedTolerancePercent
										or  DerivedChangeAmount > ToleranceAmount)									
											ToleranceError = true
								
								if (TierCostsExist)
									for each ContractLineImportTierCostRel
										invoke UpdateContractLineTierCost each
											invoked.UpdateContract          = UpdateContract
											invoked.UpdateContractLine      = LocalContractLine
											invoked.TolerancePercent        = TolerancePercent
											invoked.ToleranceAmount         = ToleranceAmount
											invoked.Connector               = Connector
											invoked.RejectAllCostIncreases  = RejectAllCostIncreases
								if (ContractLinePriceChangeRel exists)
									invoke Delete ContractLinePriceChangeRel									
								if (ToleranceError)
									if (EffectiveDate = 0)
										LocalFutureCostDate     = LocalCompareEffectiveDate
									else
										LocalFutureCostDate		= EffectiveDate 
									LocalFutureCost 		= BaseCost
									LocalEffectiveDate  	= LocalCompareEffectiveDate
									LocalBaseCost			= LocalOriginalBaseCost
								else
									if (EffectiveDate  = 0)
										LocalEffectiveDate = LocalCompareEffectiveDate
									else
										LocalEffectiveDate  = EffectiveDate
									LocalBaseCost			= BaseCost
	
								if (!ToleranceError)
									LocalHaveContractLine = true
									include UpdateContractLine 
								else
									LocalCostVariance = true
									include CreateContractLinePriceChange
								LocalHaveContractLine     = false	
								UpdateFunction            = blank									
							else
							if (UpdateContractLineItemExists
							and first ContractLineItemUpdateRel.LineNotClosed)
								LocalContractLine         = first ContractLineItemUpdateRel.ContractLine
								LocalOriginalBaseCost     = first ContractLineItemUpdateRel.BaseCost
								LocalCompareEffectiveDate = first ContractLineItemUpdateRel.EffectiveDate
								LocalOriginalLineStatus   = first ContractLineItemUpdateRel.ContractLineState
								LocalUpdatedBaseCost  = BaseCost   
								LocalTolerancePercent = TolerancePercent 
								if ((TolerancePercent > 0
								or   ToleranceAmount  > 0
								or   RejectAllCostIncreases) 
								and  BaseCost != LocalOriginalBaseCost)
									if (!RejectAllCostIncreases)
										if (TolerancePercent > 0)
											if (DerivedChangePercent > DerivedTolerancePercent)
												TolerancePctExceeded = true
										if (ToleranceAmount > 0)
											if (DerivedChangeAmount > ToleranceAmount)
												ToleranceAmtExceeded = true
										if (Connector = "O" or Connector = blank)
											if (TolerancePctExceeded or ToleranceAmtExceeded)
												ToleranceError = true
										else
											if (TolerancePctExceeded and ToleranceAmtExceeded)
												ToleranceError = true
									else
										if (DerivedChangePercent > DerivedTolerancePercent
										or  DerivedChangeAmount > ToleranceAmount)									
											ToleranceError = true
								
								if (TierCostsExist)
									for each ContractLineImportTierCostRel
										invoke UpdateContractLineTierCost each
											invoked.UpdateContract          = UpdateContract
											invoked.UpdateContractLine      = LocalContractLine
											invoked.TolerancePercent        = TolerancePercent
											invoked.ToleranceAmount         = ToleranceAmount
											invoked.Connector               = Connector
											invoked.RejectAllCostIncreases  = RejectAllCostIncreases
								if (ContractLinePriceChangeRel exists)
									invoke Delete ContractLinePriceChangeRel									
								if (ToleranceError)
									if (EffectiveDate = 0)
										LocalFutureCostDate     = LocalCompareEffectiveDate
									else
										LocalFutureCostDate		= EffectiveDate 
									LocalFutureCost 		= BaseCost
									LocalEffectiveDate  	= LocalCompareEffectiveDate
									LocalBaseCost			= LocalOriginalBaseCost
								else
									if (EffectiveDate  = 0)
										LocalEffectiveDate = LocalCompareEffectiveDate
									else
										LocalEffectiveDate  = EffectiveDate
									LocalBaseCost			= BaseCost
	
								if (!ToleranceError)
									LocalUseItemNumber = true
									include UpdateContractLine 
								else
									LocalCostVariance = true
									include CreateContractLinePriceChange
								LocalUseItemNumber           = false	
								UpdateFunction            = blank							
							else 
							if (!UpdateContractLineItemExists
							and  UpdateContractLineVenExists
							and  first ContractLineVenUpdateRel.LineNotClosed)
								LocalContractLine         = first ContractLineVenUpdateRel.ContractLine
								LocalOriginalBaseCost     = first ContractLineVenUpdateRel.BaseCost
								LocalCompareEffectiveDate = first ContractLineVenUpdateRel.EffectiveDate
								LocalOriginalLineStatus   = first ContractLineVenUpdateRel.ContractLineState
								LocalUpdatedBaseCost  = BaseCost   
								LocalTolerancePercent = TolerancePercent 
								if  (TolerancePercent > 0
								or   ToleranceAmount  > 0
								or   RejectAllCostIncreases 
								and  BaseCost != LocalOriginalBaseCost)
									if (!RejectAllCostIncreases)
										if (TolerancePercent > 0)
											if (DerivedChangePercent > DerivedTolerancePercent)
												TolerancePctExceeded = true
										if (ToleranceAmount > 0)
											if (DerivedChangeAmount > ToleranceAmount)
												ToleranceAmtExceeded = true
										if (Connector = "O" or Connector = blank)
											if (TolerancePctExceeded or ToleranceAmtExceeded)
												ToleranceError = true
										else
											if (TolerancePctExceeded and ToleranceAmtExceeded)
												ToleranceError = true
									else
										if (DerivedChangePercent > DerivedTolerancePercent
										or  DerivedChangeAmount > ToleranceAmount)									
											ToleranceError = true
								if (TierCostsExist)
									for each ContractLineImportTierCostRel
										invoke UpdateContractLineTierCost each
											invoked.UpdateContract          = UpdateContract
											invoked.UpdateContractLine      = LocalContractLine
											invoked.TolerancePercent        = TolerancePercent
											invoked.ToleranceAmount         = ToleranceAmount
											invoked.Connector               = Connector
											invoked.RejectAllCostIncreases  = RejectAllCostIncreases
								if (ContractLinePriceChangeRel exists)
									invoke Delete ContractLinePriceChangeRel												
								if (ToleranceError)
									if (EffectiveDate = 0)
										LocalFutureCostDate     = LocalCompareEffectiveDate
									else
										LocalFutureCostDate		= EffectiveDate 
									LocalFutureCost 		= BaseCost
									LocalEffectiveDate  	= LocalCompareEffectiveDate
									LocalBaseCost			= LocalOriginalBaseCost
								else
									if (EffectiveDate  = 0)
										LocalEffectiveDate = LocalCompareEffectiveDate
									else
										LocalEffectiveDate  = EffectiveDate
									LocalBaseCost			= BaseCost
	
								if (!ToleranceError)
									LocalVendorNumber = true
									include UpdateContractLine 
								else
									LocalCostVariance = true
									include CreateContractLinePriceChange
								LocalVendorNumber 	= false
								UpdateFunction 		= blank	
							else
							if (UpdateContractLineMfgExists
							and !UpdateContractLineItemExists
							and !UpdateContractLineVenExists
							and first ContractLineMfgUpdateRel.LineNotClosed)
								LocalContractLine         = first ContractLineMfgUpdateRel.ContractLine
								LocalOriginalBaseCost     = first ContractLineMfgUpdateRel.BaseCost
								LocalCompareEffectiveDate = first ContractLineMfgUpdateRel.EffectiveDate
								LocalOriginalLineStatus   = first ContractLineMfgUpdateRel.ContractLineState
								LocalUpdatedBaseCost  = BaseCost   
								LocalTolerancePercent = TolerancePercent 
								if ((TolerancePercent > 0
								or   ToleranceAmount  > 0
								or   RejectAllCostIncreases) 
								and  BaseCost != LocalOriginalBaseCost)
									if (!RejectAllCostIncreases)
										if (TolerancePercent > 0)
											if (DerivedChangePercent > DerivedTolerancePercent)
												TolerancePctExceeded = true
										if (ToleranceAmount > 0)
											if (DerivedChangeAmount > ToleranceAmount)
												ToleranceAmtExceeded = true
										if (Connector = "O" or Connector = blank)
											if (TolerancePctExceeded or ToleranceAmtExceeded)
												ToleranceError = true
										else
											if (TolerancePctExceeded and ToleranceAmtExceeded)
												ToleranceError = true
									else
										if (DerivedChangePercent > DerivedTolerancePercent
										or  DerivedChangeAmount > ToleranceAmount)									
											ToleranceError = true
								
								if (TierCostsExist)
									for each ContractLineImportTierCostRel
										invoke UpdateContractLineTierCost each
											invoked.UpdateContract          = UpdateContract
											invoked.UpdateContractLine      = LocalContractLine
											invoked.TolerancePercent        = TolerancePercent
											invoked.ToleranceAmount         = ToleranceAmount
											invoked.Connector               = Connector
											invoked.RejectAllCostIncreases  = RejectAllCostIncreases
								if (ContractLinePriceChangeRel exists)
									invoke Delete ContractLinePriceChangeRel									
								if (ToleranceError)
									if (EffectiveDate = 0)
										LocalFutureCostDate     = LocalCompareEffectiveDate
									else
										LocalFutureCostDate		= EffectiveDate 
									LocalFutureCost 		= BaseCost
									LocalEffectiveDate  	= LocalCompareEffectiveDate
									LocalBaseCost			= LocalOriginalBaseCost
								else
									if (EffectiveDate  = 0)
										LocalEffectiveDate = LocalCompareEffectiveDate
									else
										LocalEffectiveDate  = EffectiveDate
									LocalBaseCost			= BaseCost
	
								if (!ToleranceError)
									LocalManufNumber = true
									include UpdateContractLine 
								else
									LocalCostVariance = true
									include CreateContractLinePriceChange
									
								LocalManufNumber = false
								UpdateFunction            = blank
							
 		UpdateAllContractLineImports is a Set Action
            restricted
            completion message is "ProcessingContractImportLinesCompleted"
            Parameters
                PrmContractGroup         is a ContractGroup
                PrmContractImport        is a ContractImport
                PrmUpdateType            is AlphaUpper size 1
                    States
                        Delete                 		      	value is "D"
                        Blank                       		value is "B"
                        Create                       		value is "C"
                        Update                       		value is "U"
                        CanUseForCostDefaultingToTrue    	value is "T"
                        CanUseForCostDefaultingToFalse      value is "F"
                UpdateContractFlag           is Boolean
                                                
            Parameter Rules
                PrmContractGroup
                    required
                PrmContractImport
                    required

            Instance Selection
                where (ContractGroup        = PrmContractGroup
                and    ContractImport        = PrmContractImport)

            Sort Order
                ContractGroup
                ContractImport
                ContractLineImport
            
            Action Rules

                ContractImport Set Rules
                	Exit Rules
                		if (UpdateContractFlag)
                			invoke ProcessContractImportLinesUpdates 
								invoked.PrmContractGroup    = PrmContractGroup
								invoked.ImportedContract    = PrmContractImport
								invoked.UpdateContract      = PrmContractImport.DerivedToContract
								
                Instance Rules

                    if (PrmUpdateType.Delete)
                        invoke Delete
                    else
                    if (PrmUpdateType.Blank)
                        UpdateFunction = blank
                    else
                    if (PrmUpdateType.Create)
                        UpdateFunction = "C"
                    else
                    if (PrmUpdateType.Update)
                        if (NonServiceItem)
                            UpdateFunction = "U"
                    else
                    if (PrmUpdateType.CanUseForCostDefaultingToTrue)
                        if (!CanUseForCostDefaulting)
                            invoke FastUpdateWithoutEdits
                                invoked.UpdateCanUseForCostDefaultingTrue = true
                    else
                    if (PrmUpdateType.CanUseForCostDefaultingToFalse)
                        if (CanUseForCostDefaulting)
                            invoke FastUpdateWithoutEdits
                                invoked.UpdateCanUseForCostDefaultingFalse = true

        UpdateCommitmentInformation is a Set Action
            restricted
            completion message is "ProcessingContractImportLinesCommitmentInformationCompleted"

            Parameters
                PrmContractGroup        is a ContractGroup
                PrmContractImport        is a ContractImport

            Parameter Rules
                PrmContractGroup
                    required

                PrmContractImport
                    required

            Instance Selection
                where (ContractGroup        = PrmContractGroup
                and    ContractImport        = PrmContractImport)

            Sort Order

                ContractGroup
                ContractImport
                ContractLineImport

            Action Rules

                Instance Rules
                    if (ContractImport.CreateCommitments.Line or ContractImport.CreateCommitments.LineSpread)
                        UseCommitments = true
                    if (ContractImport.CreateCommitments.No)
                        UseCommitments = false
                    if (ContractImport.UseHeaderCommitments)
                        PayablesDistributionCode   = blank

        UpdateContractManufacturerInformation is a Set Action
            restricted
            completion message is "ProcessingContractImportLinesCommitmentInformationCompleted"

            Sort Order

                ContractGroup
                ContractImport
                ContractLineImport

            Action Rules

                Instance Rules
					if (ContractManufacturerInformation !entered)
						ContractManufacturerInformation	= ManufacturerInformation

        UpdateTypeSubTypeRelatedInformation is a Set Action
            restricted
            completion message is "ProcessingContractImportLinesTypeSubTypeRelatedInformationCompleted"

            Parameters

                PrmContractGroup        is a ContractGroup
                PrmContractImport        is a ContractImport

            Parameter Rules

                PrmContractGroup
                    required

                PrmContractImport
                    required

            Instance Selection

                where (ContractGroup        = PrmContractGroup
                and    ContractImport        = PrmContractImport)

            Sort Order

                ContractGroup
                ContractImport
                ContractLineImport

            Action Rules

                Instance Rules

                    if (ContractImport.StandingOrService)
                        Priority = 0
                    if (!ContractImport.StandingPurchaseType
                    and !ServiceCode.Quantity)
                        Quantity   = 0        
                        LifetimeMaximumQuantity = 0        

                    if (ContractImport.StandingPurchaseType)
                        PerOrderMaximumQuantity = 0        
                        PerOrderMaximumAmount = 0        
                        PerOrderMinimumQuantity = 0        
                        PerOrderMinimumAmount = 0        

                    if (!ContractImport.BlanketOrStanding and BlanketStandingRequestingLocation != blank)
                        BlanketStandingRequestingLocation = blank
                    
        UpdateEffectiveExpirationDates is a Set Action
            restricted
            completion message is "ProcessingContractImportLinesEffectiveExpirationDatesCompleted"

            Parameters

                PrmContractGroup        is a ContractGroup
                PrmContractImport       is a ContractImport
                PrmNewEffectiveDate     is Date
                PrmOldEffectiveDate     is Date
                PrmNewExpirationDate    is Date
                PrmOldExpirationDate    is Date
				LineUpdateOption        is Numeric 1
					States
						UpdateIfCurrentDateSameAsHeaderDate value is 1
						UpdateAll                           value is 2
         				DoNotUpdate                         value is 3	
         				
            Parameter Rules

                PrmContractGroup
                    required

                PrmContractImport
                    required

            Instance Selection

                where (ContractGroup        = PrmContractGroup
                and    ContractImport        = PrmContractImport)

            Sort Order

                ContractGroup
                ContractImport
                ContractLineImport

            Action Rules

                Instance Rules

                    if (LineUpdateOption = 2)
                    	if (PrmNewEffectiveDate not = PrmOldEffectiveDate)
                    		EffectiveDate = PrmNewEffectiveDate
                    	if (PrmNewExpirationDate not = PrmOldExpirationDate)
                    		ExpirationDate = PrmNewExpirationDate  
                    if (LineUpdateOption = 3)
                    	if (PrmNewEffectiveDate > EffectiveDate)
                    		EffectiveDate = PrmNewEffectiveDate
                    	if (PrmNewExpirationDate < ExpirationDate
                    	and PrmNewExpirationDate entered)
                    		ExpirationDate = PrmNewExpirationDate	
                    if (LineUpdateOption = 1)
	                    if  (PrmNewEffectiveDate not = PrmOldEffectiveDate
	                    and (EffectiveDate = PrmOldEffectiveDate
	                    or   PrmNewEffectiveDate > EffectiveDate))
	                        EffectiveDate  = PrmNewEffectiveDate
	                    if  (PrmNewExpirationDate not = PrmOldExpirationDate
	                    and (ExpirationDate = PrmOldExpirationDate
	                    or  (PrmNewExpirationDate < ExpirationDate
	                    and  PrmNewExpirationDate entered)))
	                        ExpirationDate = PrmNewExpirationDate

        UpdateContractLineImportErrors is a Set Action
            restricted
            completion message is "ProcessingUpdatingContractLineImportErrorsCompleted"

            Parameters

                PrmContractGroup        is a ContractGroup
                PrmContractImport        is a ContractImport

            Parameter Rules

                PrmContractGroup
                    required

                PrmContractImport
                    required

            Instance Selection

                where (ContractGroup        = PrmContractGroup
                and    ContractImport        = PrmContractImport)

            Sort Order

                ContractGroup
                ContractImport
                ContractLineImport

            Action Rules

                Instance Rules

                	invoke FastUpdate
                    	resume on error         
 
		UpdateForNewItem is an Instance Action
			restricted
			Parameters
				PrmItemNumber               is like Item
				PrmMajorPurchasingClass     is like MajorPurchasingClass     
				PrmMinorPurchasingClass     is like MinorPurchasingClass
				PrmMajorInventoryClass      is like MajorInventoryClass
				PrmMinorInventoryClass      is like MinorInventoryClass
				PrmGenericName              is a GenericName
				PrmCommodityCode            is like CommodityCode
				PrmItemDescription          is a Description
				PrmItemDescription2         is a Description
				PrmItemDescription3         is a Description3 					
				PrmContractVendorItem       is like VendorItem
				
			Action Rules	
				ItemNumber				= PrmItemNumber
				ItemType                = ItemType.Itemmast
				MajorPurchasingClass    = PrmMajorPurchasingClass
				MinorPurchasingClass    = PrmMinorPurchasingClass
				MajorInventoryClass     = PrmMajorInventoryClass
				MinorInventoryClass     = PrmMinorInventoryClass
				GenericName             = PrmGenericName
				CommodityCode           = PrmCommodityCode
				ItemDescription         = PrmItemDescription
				ItemDescription2        = PrmItemDescription2
				ItemDescription3        = PrmItemDescription3
				if (PrmContractVendorItem entered)
					ContractVendorItem  = PrmContractVendorItem				

        FindVendorItemChanges is a Set Action
        	restricted
        	Parameters
        		ParmContractGroup    		is a ContractGroup
        		ParmGPOContractNumber       is a GPOContractNumber
        		ParmContractImport          is a ContractImport
				AutoUpdateContracts         is Boolean
				ProcessOnlyUpdatedRecords   is Boolean
        	Instance Selection
        		where (ContractGroup					= ParmContractGroup            
        		and    ContractImport.GPOContractNumber	= ParmGPOContractNumber)
        		
        	Sort Order
        	
        		ContractGroup
        		ContractImport
        		ContractLineImport
        	
        	Action Rules
        	
        		ContractImport Set Rules
        		
        			Exit Rules
        			
        				if (AutoUpdateContracts)
							if (ContractImport.VendorItemsToUpdate)
								invoke UpdateVendorItemsOnContract ContractImport

        		Instance Rules
        		
        			LocalGPOContractNumber 		= ParmGPOContractNumber
        			LocalManufacturerNumber  	= ManufacturerInformation.ManufacturerNumber
        			if (ContractGPOVendorItemRel exists)
        				if (ProcessOnlyUpdatedRecords = false
						or (ProcessOnlyUpdatedRecords = true
						and first ContractGPOVendorItemRel.OperationFlag = "Create"))
							if (first ContractGPOVendorItemRel.VendorPart != VendorItem)
    	    					VendorItem = first ContractGPOVendorItemRel.VendorPart	
								UserField5 = first ContractGPOVendorItemRel.VendorPart 
        ReplaceAndInactivateVendorItem is an Instance Action
        	valid when (CanReplaceAndInactivateVendorItem)
        	
        	Action Rules
        	
        		invoke ReplaceAndInactivate VendorItemRel
   					invoked.PrmProcurementGroup		            = ContractGroup			
    				invoked.PrmReplacementVendorItem			= VendorItem
    				invoked.ReplaceWithNewOrExistingItem        = 1

				ContractVendorItem = VendorItem

        UpdateVendorItemOnContract is an Instance Action
        	valid when (CanUpdateVendorItemOnContract)
        	
        	Action Rules
        	
    			if (HasVendorItemUpdateFromAttributeUpdate)
					confirmation required 
						"VendorItemHasAlreadyBeenUpdatedByAttributeUpdate;DoYouWantToContinue?"
						
				invoke FastUpdateWithoutEdits ContractLineRel
   					invoked.UpdateVendorItem                                = true
   					invoked.NewVendorItem                          			= VendorItem
   					invoked.NewManufacturer			= ManufacturerInformation.Manufacturer
   					invoked.NewManufacturerNumber	= ManufacturerInformation.ManufacturerNumber
					invoked.FromImport              = true					
        		
        		ContractVendorItem = VendorItem
				initialize UserField5 
				for each ContractLineImportTierCostRel
					invoke Update each
						each.VendorItem  = VendorItem        		

		CheckForManuallyChangedCosts is a Set Action
			restricted
			Parameters
				ParmContractGroup             is a ContractGroup
				ParmContractImport            is a ContractImport
				
			Instance Selection
				where (ParmContractGroup 	= ContractGroup
				and    ParmContractImport 	= ContractImport)
				
			Action Rules
			
				Instance Rules
				
					LocalContract             =  ParmContractImport.DerivedToContract 
					if (ContractManufacturerInformation entered)
						LocalManufacturerInfo = ContractManufacturerInformation
					else
						LocalManufacturerInfo =  ManufacturerInformation  
					LocalUom                  =  UOM  
					if (ContractLineMfgUpdateRel exists
					and first ContractLineMfgUpdateRel.BaseCost != BaseCost)
						UpdateFunction = "U" 
						
		LinkToContractVendorItem is a Set Action
			restricted
			Parameters
				ParmContractGroup           is like ContractGroup
				ParmContractImport          is like ContractImport
				
			Instance Selection
				where (ParmContractGroup    = ContractGroup
				and    ParmContractImport   = ContractImport)
				
			Action Rules
			
				Instance Rules
					
					LocalContract												= ContractImport.DerivedToContract
					if (ContractManufacturerInformation entered)
						LocalManufacturerInfo.Manufacturer.ManufacturerCode 		= ContractManufacturerInformation.Manufacturer.ManufacturerCode
						LocalManufacturerInfo.Manufacturer.ManufacturerDivision 	= ContractManufacturerInformation.Manufacturer.ManufacturerDivision
						LocalManufacturerInfo.ManufacturerNumber   					= ContractManufacturerInformation.ManufacturerNumber			
					else
						LocalManufacturerInfo.Manufacturer.ManufacturerCode 		= ManufacturerInformation.Manufacturer.ManufacturerCode
						LocalManufacturerInfo.Manufacturer.ManufacturerDivision 	= ManufacturerInformation.Manufacturer.ManufacturerDivision
						LocalManufacturerInfo.ManufacturerNumber   					= ManufacturerInformation.ManufacturerNumber
					LocalUom                  									= ContractLineImport.UOM
					if (ContractLineMfgUpdateRel exists)
						ContractVendorItem = first ContractLineMfgUpdateRel.VendorItem

		RemoveInvalidItemUOMError is an Instance Action  
			restricted

		RecheckErrorsAfterUOMChanges is an Instance Action 
			restricted 
			Action Rules 

				include CheckForLineErrors
		
		CreateClosedLineDoNotCreateError is an Instance Action 
			valid when (LineWithClosedCreateNew)
			default label is "DoNotCreateNewContractLineWhenClosed"
			Action Rules 
				invoke Delete ClosedLineCreateNewRel	

				invoke Create ContractLineImportError
					invoked.ContractGroup           	= ContractGroup
					invoked.ContractImport            	= ContractImport
					invoked.ContractLineImport      	= ContractLineImport
					invoked.ErrorMessageNumber        	= 24
				
				UpdateFunction = blank			

		CreateClosedLineError is an Instance Action
			restricted
			Parameters 
				ClearContractLine is Boolean
			Action Rules
				if (ClearContractLine)
					Contract     = blank
					ContractLine = blank						
				if (!GPOItemExists)
	       			invoke Create ContractLineImportError
						invoked.ContractGroup           	= ContractGroup
        	           	invoked.ContractImport            	= ContractImport
            	       	invoked.ContractLineImport      	= ContractLineImport
                	   	invoked.ErrorMessageNumber        	= 17					
					initialize UpdateFunction
				else
				if (GPOItemExists)
					if (ContractLineItemNotClosedRel !exists
					and  ContractLineVendorItemNotClosedRel !exists
					and  ContractLineMfgNotClosedRel !exists)
						invoke Create ContractLineImportError
							invoked.ContractGroup           	= ContractGroup
        	    	       	invoked.ContractImport            	= ContractImport
            	    	   	invoked.ContractLineImport      	= ContractLineImport
                	   		invoked.ErrorMessageNumber        	= 21
						invoke FastUpdateWithoutEdits ContractLineImport
							invoked.UpdateUpdateFunction			= true
							if (!ItemType.Service)
								invoked.PrmUpdateFunction           = "C"
							invoked.FromCheckForLineErrors          = true

		ClearContractAndLine is a Set Action 
			Parameters 
				ParmContractGroup            is a ContractGroup 
				ParmContractImport           is a ContractImport
		
			Instance Selection 
				where (ParmContractGroup  = ContractGroup
				and    ParmContractImport = ContractImport)	

			Action Rules 
				Instance Rules 
					Contract     = blank
					ContractLine = blank			

		LoadContractAndLine is a Set Action 
			restricted 
			Parameters 
				ParmContractGroup            is a ContractGroup 
				ParmContractImport           is a ContractImport
				ParmContract                 is a Contract 
		
			Instance Selection 
				where (ParmContractGroup = ContractGroup
				and    ParmContractImport = ContractImport
				and    Contract !entered)

			Action Rules 
				Instance Rules 

					Contract = ParmContract
					if (ContractLineItemNotClosedRel exists)
						ContractLine	= first ContractLineItemNotClosedRel.ContractLine
					else 
					if (ContractLineMfgNotClosedRel exists)
						ContractLine    = first ContractLineMfgNotClosedRel.ContractLine			
					else 
					if (ContractLineVendorItemNotClosedRel exists)
						ContractLine    = first ContractLineVendorItemNotClosedRel.ContractLine
		
		CheckForNewTierCosts is a Set Action          
			restricted
			Parameters
				ParmContractGroup             is a ContractGroup
				ParmContractImport            is a ContractImport
				AutoUpdateContracts           is Boolean
								
 			Instance Selection
 				where (ContractGroup  = ParmContractGroup
 				and    ContractImport = ParmContractImport)
 			
 			Sort Order
 				ContractGroup
 				ContractImport
 				ContractLineImport
 			
 			Action Rules
 			
 				ContractImport Set Rules
 				
 					Exit Rules
 						
						LocalContract = ContractImport.DerivedToContract
   						if (ContractImport.NonBlankContractLinesExist
   						and ContractImport.ContractsFromImport)							
							invoke ProcessContractLineUpdates ContractImport
								invoked.ContractGroup     				= ContractGroup
								invoked.ContractImport    				= ContractImport
								invoked.UpdateContract    				= LocalContract 
								invoked.FromCheckForNewTierCosts        = true
								if (AutoUpdateContracts)
									invoked.UpdateTier                  = true
						else
							if (AutoUpdateContracts)
								invoke UpdateTiers ContractImport 
 				
 				Instance Rules
 					for each ContractImportTierMemberUpdatedRel
 						LocalTier      = each.Tier
 						if (ContractLineImportTierCostCompareRel !exists
 						and ContractGPOItemRel exists)
 							invoke Create ContractLineImportTierCost
 								invoked.ContractGroup  		= ContractGroup
	 							invoked.ContractImport 		= ContractImport
 								invoked.ContractLineImport 	= ContractLineImport
 								invoked.ContractImportTier  = LocalTier
 								invoked.TierCost            = ContractGPOItemRel.Price
								invoked.ManufacturerNumber  = ContractGPOItemRel.ManufacturerPart
								invoked.VendorItem		    = ContractGPOItemRel.VendorPart
								invoked.GPOContractNumber   = GPOContractNumber 							 
 							BaseCost  		= ContractGPOItemRel.Price			
							UpdateFunction 	= "U"	
										
		


 

 
										
											
							
