ContractRebateDueQualifier is a BusinessClass
	owned by po
	prefix is CRDQr

	Ontology
		symbolic key is ContractRebateDueQualifier

	Patterns
		implements DynamicCreation

	Persistent Fields
		QualifierContractSpend								is an InternationalAmount	
		QualifierAllContractsSpend							is an InternationalAmount  //all contracts spend for qualifier items and/or qualifier codes - used only for "% of all spend" rebates 
		BaseOfPurchases										is an InternationalAmount	//Used by growth and loyalty rebates to measure growth and/or loyalty over this base amount of purchases, which pertains to the particular contract rebate due (time period) this growth or loyalty is "over". Same as CurrentBaseOfPurchases on ContractRebateDue as there is only one qualifier per ContractRebateDue for Growth and Loyalty rebates.
		CurrentPercentOfAllPurchasesAchievedForQualifier	is Percent size 10.3	//For the "percent-of-all-purchases"-type rebate reached so far this contract rebate due (time period)
		CurrentPercentAchieved								is Percent size 10.3	
		LoyaltyPercentToBePaid								is Percent size 10.3	
		QualifierContractSpendInUnits						is Numeric size 10		
		BaseOfPurchasesInUnits								is Numeric size 10		//For Unit-based qualifiers for growth and loyalty rebates to measure growth or loyalty over this base amount of purchases in units, which pertains to the particular contract rebate due (time period) this growth or loyalty is "over".
		AmountPerUnitEarned									is an InternationalAmount	
		ThresholdPercentToBePaid							is Percent size 10.3	
							
	Local Fields
		LocalContractRebateDue								is a ContractRebateDue
		
	Derived Fields
		DerivedGrowthAmount is a DerivedField
	        type is like InternationalAmount
	        restricted
			return (QualifierContractSpend		- BaseOfPurchases)
			
		DerivedLoyaltyAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return (BaseOfPurchases	- QualifierContractSpend)
			
		DerivedLoyaltySlice is a DerivedField
	        type is like InternationalAmount
	        restricted
	        if (DerivedLoyaltyAmount > 0)
	        	return DerivedLoyaltyAmount
	        else
	        	return 0

    	DerivedLoyaltyPercent is a ConditionalField
    		type is Percent size 6.2
    		restricted
			if (LoyaltyRebate)
				if (BaseOfPurchases > 0)
	   				(QualifierContractSpend / BaseOfPurchases)
	   			else
	   				0
			else
				0
   			
	Conditions
		QualifierIsPercentOfAllPurchases
			restricted
			when (ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered)
		
		QualifierIsAmountBased
			restricted
			when (ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
		
		QualifierIsUnitsBased
			restricted
			when (((NotGrowthAndNotLoyaltyRebate)
			and    (ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered))
			or    ((GrowthOrLoyaltyRebate)
			and    (ContractRebateQualifier.SpendType.Units)))
		
		GrowthRebate
			restricted
			when (ContractRebateType.RebateType.GrowthRebate)

		GrowthOnLastYearContractRebateDue
			restricted
			when (GrowthRebate
			and   ContractRebate.CalculateExpectedRebateForGrowth)

		GrowthOnPriorContractRebateDue
			restricted
			when (GrowthRebate
			and   !ContractRebate.CalculateExpectedRebateForGrowth)

		LoyaltyRebate
			restricted
			when (ContractRebateType.RebateType.LoyaltyRebate)
			
		MultipleThresholdRebate
			restricted
			when (ContractRebateType.RebateType.MultipleThresholdRebate)

		NotGrowthAndNotLoyaltyAndNotPercentOfAllRebate
			restricted
			when (!GrowthRebate
			and   !LoyaltyRebate
			and   !QualifierIsPercentOfAllPurchases)
			
		NotGrowthAndNotLoyaltyRebate
			restricted
			when (!GrowthRebate
			and   !LoyaltyRebate)
			
		NotGrowthAndNotLoyaltyAndNotMultipleThresholdRebate
			restricted
			when (!GrowthRebate
			and   !LoyaltyRebate
			and   !MultipleThresholdRebate)
			
		GrowthOrLoyaltyRebate
			restricted
			when (GrowthRebate
			or    LoyaltyRebate)
			
		HasQualifierSpend
			restricted
			when (QualifierContractSpend entered)
			
		ShowRebateBasis
			restricted
			when (NotGrowthAndNotLoyaltyRebate
			and   ContractRebateDue.HasCurrentBaseOfPurchases)
			
		CalculateRebatesEligible
			restricted
			when ((!ContractRebate.QualifierChanged
			or     ContractRebate.QualifierChanged not entered)
			and   Contract.RebateEligible
			and   NotFixedRebate
			and   ContractRebateDueInvoiceLinesRel exists)
			
		NotFixedRebate
			restricted
			when (!ContractRebateType.RebateType.FixedRebateAmount)	
			
		SupplementalRebate
			restricted
			when (ContractRebateType.RebateType.SupplementalRebate)
			
	Relations
		ContractRebateDueQualifierRelForCurrentBaseOfPurchases
			one-to-one relation to ContractRebateDueQualifier
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
				related.ContractRebateDue			= LocalContractRebateDue
				related.ContractRebateQualifier		= ContractRebateQualifier
				related.ContractRebateDueQualifier	= blank
				
		ContractRebateDueQualifiersRelForCurrentBaseOfPurchases
			one-to-many relation to ContractRebateDueQualifier
			Field Mapping uses ByQualifierRebateDue
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
				related.ContractRebateQualifier		= ContractRebateQualifier
			Instance Selection
				where (related.ContractRebateDue	> LocalContractRebateDue)
					
		ContractRebateDueRelForCurrentBaseOfPurchases
			one-to-one relation to ContractRebateDue
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
				related.ContractRebateDue			= LocalContractRebateDue
				
		ContractRebateDuesRelForCurrentBaseOfPurchases
			one-to-many relation to ContractRebateDue
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where (related.ContractRebateDue	> LocalContractRebateDue)
					
		ContractRebateDueQualifierChartsRel		is a ContractRebateDueQualifierChart set
		
		ContractRebateDueInvoiceLinesRel
			one-to-many relation to ContractRebateDueInvoiceLine
			Field Mapping uses symbolic key
				related.ContractGroup				= ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
				related.ContractRebateDue			= ContractRebateDue
				related.ContractRebateQualifier		= ContractRebateQualifier
				
		ContractRebateLoyaltyQualifiersDescendingPercentagesRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses ByLoyaltyPercentToReachDescending
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
    
		ContractRebateLoyaltyQualifiersDescendingAmountsRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses ByLoyaltyAmountToReachDescending
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
    
	Field Rules
		BaseOfPurchases
			if (BaseOfPurchases changed
			and BaseOfPurchases entered)
				CurrentPercentAchieved				= (DerivedGrowthAmount / BaseOfPurchases)
				if (CurrentPercentAchieved < 0)
					CurrentPercentAchieved = 0

	Sets
		ByQualifierRebateDue
			indexed
			Sort Order
				ContractGroup
				Contract
				ContractRebateType
				ContractRebate
				ContractRebateQualifier
				ContractRebateDue
				ContractRebateDueQualifier

	Create Rules
		if (NotGrowthAndNotLoyaltyAndNotPercentOfAllRebate)
			BaseOfPurchases			= ContractRebate.CurrentBaseOfPurchases			
							
	Rule Blocks

	
		SetQualifierConditionsMetFlagTrue
		
			if (LocalRebateType.GrowthRebate)
				CurrentTotalPurchases			= QualifierContractSpend - BaseOfPurchases
				CurrentTotalPurchasesInUnits	= QualifierContractSpendInUnits - BaseOfPurchasesInUnits
				if (BaseOfPurchases	entered)
					CurrentPercent			= CurrentTotalPurchases / BaseOfPurchases
				else
					CurrentPercent										= 0
				for each ContractRebateQualifier.ContractRebateGrowthQualifierRel
					if (each.FirstGrowthOperator.GreaterThanOrEqual
					and each.SecondGrowthOperator.LessThanOrEqual)
						if ((each.SecondGrowthAmount					entered
						and  CurrentTotalPurchases						>= each.FirstGrowthAmount
						and  CurrentTotalPurchases						<= each.SecondGrowthAmount)
						or  (each.SecondGrowthUnits						entered
						and  CurrentTotalPurchasesInUnits				>= each.FirstGrowthUnits
						and  CurrentTotalPurchasesInUnits				<= each.SecondGrowthUnits)
						or  (each.SecondGrowthPercent					entered
						and  BaseOfPurchases							entered
						and  CurrentPercent								>= each.FirstGrowthPercent
						and  CurrentPercent								<= each.SecondGrowthPercent))
							QualifierConditionsMet						= true
							if (each.PercentPaid	> 0)
								QualifiedGrowthRebatePercent				= each.PercentPaid
								initialize QualifiedGrowthRebateAmount
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								QualifiedGrowthRebateAmount					= each.RebateAmount
								initialize QualifiedGrowthRebatePercent
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								QualifiedGrowthRebateAmount					= (CurrentTotalPurchasesInUnits * each.RebateAmountPerUnit)
								LocalQualifiedGrowthRebateAmountPerUnit		= each.RebateAmountPerUnit
								initialize QualifiedGrowthRebatePercent
							end for each
					else
					if (each.FirstGrowthOperator.GreaterThanOrEqual
					and each.SecondGrowthOperator.LessThan)
						if ((each.SecondGrowthAmount					entered
						and  CurrentTotalPurchases						>= each.FirstGrowthAmount
						and  CurrentTotalPurchases						< each.SecondGrowthAmount)
						or  (each.SecondGrowthUnits						entered
						and  CurrentTotalPurchasesInUnits				>= each.FirstGrowthUnits
						and  CurrentTotalPurchasesInUnits				< each.SecondGrowthUnits)
						or  (each.SecondGrowthPercent					entered
						and  BaseOfPurchases							entered
						and  CurrentPercent								>= each.FirstGrowthPercent
						and  CurrentPercent								< each.SecondGrowthPercent))
							QualifierConditionsMet						= true
							if (each.PercentPaid	> 0)
								QualifiedGrowthRebatePercent				= each.PercentPaid
								initialize QualifiedGrowthRebateAmount
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								QualifiedGrowthRebateAmount					= each.RebateAmount
								initialize QualifiedGrowthRebatePercent
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								QualifiedGrowthRebateAmount					= (CurrentTotalPurchasesInUnits * each.RebateAmountPerUnit)
								LocalQualifiedGrowthRebateAmountPerUnit		= each.RebateAmountPerUnit
								initialize QualifiedGrowthRebatePercent
							end for each
					else
					if (each.FirstGrowthOperator.GreaterThan
					and each.SecondGrowthOperator.LessThanOrEqual)
						if ((each.SecondGrowthAmount					entered
						and  CurrentTotalPurchases						> each.FirstGrowthAmount
						and  CurrentTotalPurchases						<= each.SecondGrowthAmount)
						or  (each.SecondGrowthUnits						entered
						and  CurrentTotalPurchasesInUnits				> each.FirstGrowthUnits
						and  CurrentTotalPurchasesInUnits				<= each.SecondGrowthUnits)
						or  (each.SecondGrowthPercent					entered
						and  BaseOfPurchases							entered
						and  CurrentPercent								> each.FirstGrowthPercent
						and  CurrentPercent								<= each.SecondGrowthPercent))
							QualifierConditionsMet						= true
							if (each.PercentPaid	> 0)
								QualifiedGrowthRebatePercent				= each.PercentPaid
								initialize QualifiedGrowthRebateAmount
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								QualifiedGrowthRebateAmount					= each.RebateAmount
								initialize QualifiedGrowthRebatePercent
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								QualifiedGrowthRebateAmount					= (CurrentTotalPurchasesInUnits * each.RebateAmountPerUnit)
								LocalQualifiedGrowthRebateAmountPerUnit		= each.RebateAmountPerUnit
								initialize QualifiedGrowthRebatePercent
							end for each
					else
					if (each.FirstGrowthOperator.GreaterThan
					and each.SecondGrowthOperator.LessThan)
						if ((each.SecondGrowthAmount					entered
						and  CurrentTotalPurchases						> each.FirstGrowthAmount
						and  CurrentTotalPurchases						< each.SecondGrowthAmount)
						or  (each.SecondGrowthUnits						entered
						and  CurrentTotalPurchasesInUnits				> each.FirstGrowthUnits
						and  CurrentTotalPurchasesInUnits				< each.SecondGrowthUnits)
						or  (each.SecondGrowthPercent					entered
						and  BaseOfPurchases							entered
						and  CurrentPercent								> each.FirstGrowthPercent
						and  CurrentPercent								< each.SecondGrowthPercent))
							QualifierConditionsMet						= true
							if (each.PercentPaid	> 0)
								QualifiedGrowthRebatePercent				= each.PercentPaid
								initialize QualifiedGrowthRebateAmount
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								QualifiedGrowthRebateAmount					= each.RebateAmount
								initialize QualifiedGrowthRebatePercent
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								QualifiedGrowthRebateAmount					= (CurrentTotalPurchasesInUnits * each.RebateAmountPerUnit)
								LocalQualifiedGrowthRebateAmountPerUnit		= each.RebateAmountPerUnit
								initialize QualifiedGrowthRebatePercent
							end for each
					else
					if (each.FirstGrowthOperator.GreaterThanOrEqual
					and each.SecondGrowthOperator not entered)
						if ((each.FirstGrowthAmount						entered
						and  CurrentTotalPurchases						>= each.FirstGrowthAmount)
						or  (each.FirstGrowthUnits						entered
						and  CurrentTotalPurchasesInUnits				>= each.FirstGrowthUnits)
						or  (each.FirstGrowthPercent					entered
						and  CurrentRebateDueBaseOfPurchases			entered
						and  CurrentPercent								>= each.FirstGrowthPercent))
							QualifierConditionsMet						= true
							if (each.PercentPaid	> 0)
								QualifiedGrowthRebatePercent				= each.PercentPaid
								initialize QualifiedGrowthRebateAmount
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								QualifiedGrowthRebateAmount					= each.RebateAmount
								initialize QualifiedGrowthRebatePercent
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								QualifiedGrowthRebateAmount					= (CurrentTotalPurchasesInUnits * each.RebateAmountPerUnit)
								LocalQualifiedGrowthRebateAmountPerUnit		= each.RebateAmountPerUnit
								initialize QualifiedGrowthRebatePercent
							end for each
					else
					if (each.FirstGrowthOperator.GreaterThan
					and each.SecondGrowthOperator not entered)
						if ((each.FirstGrowthAmount						entered
						and  CurrentTotalPurchases						> each.FirstGrowthAmount)
						or  (each.FirstGrowthUnits						entered
						and  CurrentTotalPurchasesInUnits				> each.FirstGrowthUnits)
						or  (each.FirstGrowthPercent					entered
						and  BaseOfPurchases							entered
						and  CurrentPercent								> each.FirstGrowthPercent))
							QualifierConditionsMet						= true
							if (each.PercentPaid	> 0)
								QualifiedGrowthRebatePercent				= each.PercentPaid
								initialize QualifiedGrowthRebateAmount
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								QualifiedGrowthRebateAmount					= each.RebateAmount
								initialize QualifiedGrowthRebatePercent
								initialize LocalQualifiedGrowthRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								QualifiedGrowthRebateAmount					= (CurrentTotalPurchasesInUnits * each.RebateAmountPerUnit)
								LocalQualifiedGrowthRebateAmountPerUnit		= each.RebateAmountPerUnit
								initialize QualifiedGrowthRebatePercent
							end for each
			else
			if (LocalRebateType.LoyaltyRebate)
				CurrentTotalPurchases						= QualifierContractSpend
				CurrentTotalPurchasesInUnits				= QualifierContractSpendInUnits
				if (BaseOfPurchases							entered)
					CurrentPercent							= CurrentTotalPurchases / BaseOfPurchases
				else
					initialize CurrentPercent				
				for each ContractRebateQualifier.ContractRebateLoyaltyQualifiersByPercentDescendingRel
					if (CurrentPercent							>= each.LoyaltyPercentToReach)
						QualifierConditionsMet					= true
						LocalQualifiedLoyaltyPercentToBePaid	= each.RebatePercentToBePaid
						LocalQualifiedLoyaltyAmountToBePaid		= each.RebateAmountToBePaid
						initialize LocalQualifiedLoyaltyRebateAmountPerUnit
						end for each
				for each ContractRebateQualifier.ContractRebateLoyaltyQualifiersByAmountDescendingRel
					if (CurrentTotalPurchases					>= each.LoyaltyAmountToReach)
						QualifierConditionsMet					= true
						LocalQualifiedLoyaltyAmountToBePaid		= each.RebateAmountToBePaid
						LocalQualifiedLoyaltyPercentToBePaid	= each.RebatePercentToBePaid
						initialize LocalQualifiedLoyaltyRebateAmountPerUnit
						end for each
				for each ContractRebateQualifier.ContractRebateLoyaltyQualifiersByUnitsDescendingRel
					if (CurrentTotalPurchasesInUnits				>= each.LoyaltyUnitsToReach)
						QualifierConditionsMet						= true
						LocalQualifiedLoyaltyAmountToBePaid			= (CurrentTotalPurchasesInUnits * each.RebateAmountPerUnitToBePaid)
						LocalQualifiedLoyaltyPercentToBePaid		= each.RebatePercentToBePaid
						LocalQualifiedLoyaltyRebateAmountPerUnit	= each.RebateAmountPerUnitToBePaid
						end for each
			else
			if (LocalRebateType.MultipleThresholdRebate
			or  LocalRebateType.SupplementalRebate)
				for each ContractRebateQualifier.ContractRebateThresholdQualifiersRel
					if (each.FirstOperator.GreaterThanOrEqual
					and each.SecondOperator.LessThanOrEqual)
						if ((each.UpperAmount					entered
						and  QualifierContractSpend				>= each.LowerAmount
						and  QualifierContractSpend				<= each.UpperAmount)
						or  (each.UpperUnits					entered
						and  QualifierContractSpendInUnits		>= each.LowerUnits
						and  QualifierContractSpendInUnits		<= each.UpperUnits))
							QualifierConditionsMet						= true
							if (each.PercentPaid	> 0)
								LocalQualifiedThresholdRebatePercent		= each.PercentPaid
								initialize LocalQualifiedThresholdRebateAmount
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								LocalQualifiedThresholdRebateAmount			= each.RebateAmount
								initialize LocalQualifiedThresholdRebatePercent
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								LocalQualifiedThresholdRebateAmount			= (QualifierContractSpendInUnits * each.RebateAmountPerUnit)
								LocalQualifiedThresholdRebateAmountPerUnit	= each.RebateAmountPerUnit
								initialize LocalQualifiedThresholdRebatePercent
							end for each
					else
					if (each.FirstOperator.GreaterThanOrEqual
					and each.SecondOperator.LessThan)
						if ((each.UpperAmount					entered
						and  QualifierContractSpend				>= each.LowerAmount
						and  QualifierContractSpend				< each.UpperAmount)
						or  (each.UpperUnits					entered
						and  QualifierContractSpendInUnits		>= each.LowerUnits
						and  QualifierContractSpendInUnits		< each.UpperUnits))
							QualifierConditionsMet				= true
							if (each.PercentPaid	> 0)
								LocalQualifiedThresholdRebatePercent	= each.PercentPaid
								initialize LocalQualifiedThresholdRebateAmount
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								LocalQualifiedThresholdRebateAmount		= each.RebateAmount
								initialize LocalQualifiedThresholdRebatePercent
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								LocalQualifiedThresholdRebateAmount			= (QualifierContractSpendInUnits * each.RebateAmountPerUnit)
								LocalQualifiedThresholdRebateAmountPerUnit	= each.RebateAmountPerUnit
								initialize LocalQualifiedThresholdRebatePercent
							end for each
					else
					if (each.FirstOperator.GreaterThan
					and each.SecondOperator.LessThanOrEqual)
						if ((each.UpperAmount					entered
						and  QualifierContractSpend				> each.LowerAmount
						and  QualifierContractSpend				<= each.UpperAmount)
						or  (each.UpperUnits					entered
						and  QualifierContractSpendInUnits		> each.LowerUnits
						and  QualifierContractSpendInUnits		<= each.UpperUnits))
							QualifierConditionsMet				= true
							if (each.PercentPaid	> 0)
								LocalQualifiedThresholdRebatePercent		= each.PercentPaid
								initialize LocalQualifiedThresholdRebateAmount
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								LocalQualifiedThresholdRebateAmount			= each.RebateAmount
								initialize LocalQualifiedThresholdRebatePercent
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								LocalQualifiedThresholdRebateAmount			= (QualifierContractSpendInUnits * each.RebateAmountPerUnit)
								LocalQualifiedThresholdRebateAmountPerUnit	= each.RebateAmountPerUnit
								initialize LocalQualifiedThresholdRebatePercent
							end for each
					else
					if (each.FirstOperator.GreaterThan
					and each.SecondOperator.LessThan)
						if ((each.UpperAmount					entered
						and  QualifierContractSpend				> each.LowerAmount
						and  QualifierContractSpend				< each.UpperAmount)
						or  (each.UpperUnits					entered
						and  QualifierContractSpendInUnits		> each.LowerUnits
						and  QualifierContractSpendInUnits		< each.UpperUnits))
							QualifierConditionsMet				= true
							if (each.PercentPaid	> 0)
								LocalQualifiedThresholdRebatePercent		= each.PercentPaid
								initialize LocalQualifiedThresholdRebateAmount
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								LocalQualifiedThresholdRebateAmount			= each.RebateAmount
								initialize LocalQualifiedThresholdRebatePercent
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								LocalQualifiedThresholdRebateAmount			= (QualifierContractSpendInUnits * each.RebateAmountPerUnit)
								LocalQualifiedThresholdRebateAmountPerUnit	= each.RebateAmountPerUnit
								initialize LocalQualifiedThresholdRebatePercent
							end for each
					else
					if (each.FirstOperator.GreaterThanOrEqual
					and each.SecondOperator not entered)
						if ((each.LowerAmount					entered
						and  QualifierContractSpend				>= each.LowerAmount)
						or  (each.LowerUnits					entered
						and  QualifierContractSpendInUnits		>= each.LowerUnits))
							QualifierConditionsMet				= true
							if (each.PercentPaid	> 0)
								LocalQualifiedThresholdRebatePercent		= each.PercentPaid
								initialize LocalQualifiedThresholdRebateAmount
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								LocalQualifiedThresholdRebateAmount			= each.RebateAmount
								initialize LocalQualifiedThresholdRebatePercent
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								LocalQualifiedThresholdRebateAmount			= (QualifierContractSpendInUnits * each.RebateAmountPerUnit)
								LocalQualifiedThresholdRebateAmountPerUnit	= each.RebateAmountPerUnit
								initialize LocalQualifiedThresholdRebatePercent
							end for each
					else
					if (each.FirstOperator.GreaterThan
					and each.SecondOperator not entered)
						if ((each.LowerAmount					entered
						and  QualifierContractSpend				> each.LowerAmount)
						or  (each.LowerUnits					entered
						and  QualifierContractSpendInUnits		> each.LowerUnits))
							QualifierConditionsMet				= true
							if (each.PercentPaid	> 0)
								LocalQualifiedThresholdRebatePercent		= each.PercentPaid
								initialize LocalQualifiedThresholdRebateAmount
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmount	> 0)
								LocalQualifiedThresholdRebateAmount			= each.RebateAmount
								initialize LocalQualifiedThresholdRebatePercent
								initialize LocalQualifiedThresholdRebateAmountPerUnit
							else
							if (each.RebateAmountPerUnit	> 0)
								LocalQualifiedThresholdRebateAmount			= (QualifierContractSpendInUnits * each.RebateAmountPerUnit)
								LocalQualifiedThresholdRebateAmountPerUnit	= each.RebateAmountPerUnit
								initialize LocalQualifiedThresholdRebatePercent
							end for each
			else		
				QualifierPercentageAmount			= (ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent * QualifierAllContractsSpend)
				if  (ContractRebateQualifier.PurchaseOperator.LessThanOrEqualTo)
					if ((QualifierContractSpend					<= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
					or (QualifierContractSpend					<= QualifierPercentageAmount
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered))
						QualifierConditionsMet	= true
					else
					if (QualifierContractSpendInUnits			<= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered)
						QualifierConditionsMet	= true
						QualifiedBasicRebateAmountPerUnitAmount	+= (QualifierContractSpendInUnits * ContractRebate.PotentialRebateAmountPerUnit)
				else
				if  (ContractRebateQualifier.PurchaseOperator.GreaterThanOrEqualTo)
					if ((QualifierContractSpend					>= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
					or (QualifierContractSpend					>= QualifierPercentageAmount
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered
					and QualifierContractSpend                  >0))
						QualifierConditionsMet	= true
					else
					if (QualifierContractSpendInUnits			>= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered)
						QualifierConditionsMet	= true
						QualifiedBasicRebateAmountPerUnitAmount	+= (QualifierContractSpendInUnits * ContractRebate.PotentialRebateAmountPerUnit)
				else
				if  (ContractRebateQualifier.PurchaseOperator.EqualTo)
					if ((QualifierContractSpend					= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
					or (QualifierContractSpend					= QualifierPercentageAmount
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered
					and QualifierContractSpend                  > 0))
						QualifierConditionsMet	= true
					else
					if (QualifierContractSpendInUnits			= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered)
						QualifierConditionsMet	= true
						QualifiedBasicRebateAmountPerUnitAmount	+= (QualifierContractSpendInUnits * ContractRebate.PotentialRebateAmountPerUnit)
				else
				if  (ContractRebateQualifier.PurchaseOperator.LessThan)
					if ((QualifierContractSpend					< ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
					or (QualifierContractSpend					< QualifierPercentageAmount
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered))
						QualifierConditionsMet	= true
					if (QualifierContractSpendInUnits			< ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered)
						QualifierConditionsMet	= true
						QualifiedBasicRebateAmountPerUnitAmount	+= (QualifierContractSpendInUnits * ContractRebate.PotentialRebateAmountPerUnit)
				else
				if  (ContractRebateQualifier.PurchaseOperator.GreaterThan)
					if ((QualifierContractSpend					> ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
					or (QualifierContractSpend					> QualifierPercentageAmount
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered))
						QualifierConditionsMet	= true
					if (QualifierContractSpendInUnits			> ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits
					and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered)
						QualifierConditionsMet	= true
						QualifiedBasicRebateAmountPerUnitAmount	+= (QualifierContractSpendInUnits * ContractRebate.PotentialRebateAmountPerUnit)
	

 
		SetQualifierConditionsMetFlagFalse
		
			QualifierPercentageAmount			= ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent * QualifierAllContractsSpend
			if  (ContractRebateQualifier.PurchaseOperator.LessThanOrEqualTo)
				if ((QualifierContractSpend					> ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
				or (QualifierContractSpend					> QualifierPercentageAmount
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered)
				or (QualifierContractSpendInUnits			> ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered))
					QualifierConditionsMet	= false
					initialize QualifiedBasicRebateAmountPerUnitAmount
			else
			if  (ContractRebateQualifier.PurchaseOperator.GreaterThanOrEqualTo)
				if ((QualifierContractSpend					< ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
				or (QualifierContractSpend					< QualifierPercentageAmount
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered)
				or (QualifierContractSpendInUnits			< ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered))
					QualifierConditionsMet	= false
					initialize QualifiedBasicRebateAmountPerUnitAmount
			else
			if  (ContractRebateQualifier.PurchaseOperator.EqualTo)
				if ((QualifierContractSpend					!= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
				or (QualifierContractSpend					!= QualifierPercentageAmount
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered)
				or (QualifierContractSpendInUnits			!= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered))
					QualifierConditionsMet	= false
					initialize QualifiedBasicRebateAmountPerUnitAmount
			else
			if  (ContractRebateQualifier.PurchaseOperator.LessThan)
				if ((QualifierContractSpend					>= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
				or (QualifierContractSpend					>= QualifierPercentageAmount
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered)
				or (QualifierContractSpendInUnits			>= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered))
					QualifierConditionsMet	= false
					initialize QualifiedBasicRebateAmountPerUnitAmount
			else
			if  (ContractRebateQualifier.PurchaseOperator.GreaterThan)
				if ((QualifierContractSpend					<= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount entered)
				or (QualifierContractSpend					<= QualifierPercentageAmount
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchasePercent entered)
				or (QualifierContractSpendInUnits			<= ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits
				and ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits entered))
					QualifierConditionsMet	= false
					initialize QualifiedBasicRebateAmountPerUnitAmount

	Actions
		Create is a Create Action
			restricted
			
		Update is an Update Action
			restricted
			
		Delete is a Delete Action
			restricted
			
		FastUpdateQualifierCurrentPurchases is an Instance Action
			restricted
			Parameters
				PrmUpdateQualifierCurrentPurchases 					is an InternationalAmount
				PrmUpdateQualifierAllContractsCurrentPurchases 		is an InternationalAmount
				PrmUpdateQualifierCurrentPurchasesInUnits			is Numeric size 10
				
			Action Rules
				QualifierContractSpend 			= PrmUpdateQualifierCurrentPurchases
				QualifierAllContractsSpend		= PrmUpdateQualifierAllContractsCurrentPurchases
				QualifierContractSpendInUnits	= PrmUpdateQualifierCurrentPurchasesInUnits
				
				if (GrowthRebate)
					if (ContractRebateQualifier.CurrencyBasedQualifier)
						CurrentPercentAchieved = ((QualifierContractSpend - BaseOfPurchases) / BaseOfPurchases)
					else 						
						CurrentPercentAchieved = ((QualifierContractSpendInUnits - BaseOfPurchasesInUnits) / BaseOfPurchasesInUnits)
    			else
    			if (LoyaltyRebate)
					if (ContractRebateQualifier.CurrencyBasedQualifier)
						CurrentPercentAchieved = (QualifierContractSpend / BaseOfPurchases) 						
					else 						
						CurrentPercentAchieved = (QualifierContractSpendInUnits / BaseOfPurchasesInUnits) 						
				else
				if (QualifierIsPercentOfAllPurchases)
						CurrentPercentOfAllPurchasesAchievedForQualifier	= ((QualifierContractSpend - BaseOfPurchases) / QualifierAllContractsSpend)
				else
					if (ContractRebateQualifier.CurrencyBasedQualifier)
						CurrentPercentAchieved = ((QualifierContractSpend - BaseOfPurchases) / ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseAmount) 						
					else 						
						CurrentPercentAchieved = ((QualifierContractSpendInUnits - BaseOfPurchasesInUnits) / ContractRebateQualifier.RebatePurchaseAmtPct.PurchaseUnits) 						
    			
				if (CurrentPercentAchieved < 0)
					CurrentPercentAchieved = 0
				if (GrowthRebate)
					if (GrowthOnLastYearContractRebateDue)
						LocalContractRebateDue		= ContractRebateDue + 1 year
						if (LocalContractRebateDue exists)
							invoke FastUpdateQualifierCurrentBaseOfPurchases ContractRebateDueQualifierRelForCurrentBaseOfPurchases
								invoked.PrmUpdateQualifierCurrentBaseOfPurchases		= PrmUpdateQualifierCurrentPurchases
								invoked.PrmUpdateQualifierCurrentBaseOfPurchasesInUnits = PrmUpdateQualifierCurrentPurchasesInUnits
					else
						if (GrowthOnPriorContractRebateDue)
							LocalContractRebateDue		= ContractRebateDue
							for each ContractRebateDueQualifiersRelForCurrentBaseOfPurchases
								invoke FastUpdateQualifierCurrentBaseOfPurchases each
									invoked.PrmUpdateQualifierCurrentBaseOfPurchases		= PrmUpdateQualifierCurrentPurchases
									invoked.PrmUpdateQualifierCurrentBaseOfPurchasesInUnits = PrmUpdateQualifierCurrentPurchasesInUnits
								end for each
				else
				if (LoyaltyRebate)
					LocalContractRebateDue		= ContractRebateDue
					for each ContractRebateDueQualifiersRelForCurrentBaseOfPurchases
						invoke FastUpdateQualifierCurrentBaseOfPurchases each
							invoked.PrmUpdateQualifierCurrentBaseOfPurchases		= PrmUpdateQualifierCurrentPurchases
							invoked.PrmUpdateQualifierCurrentBaseOfPurchasesInUnits = PrmUpdateQualifierCurrentPurchasesInUnits
						end for each
					
		FastUpdateQualifierCurrentBaseOfPurchases is an Instance Action
			restricted
			Parameters
				PrmUpdateQualifierCurrentBaseOfPurchases 			is an InternationalAmount
				PrmUpdateQualifierCurrentBaseOfPurchasesInUnits		is Numeric size 10
				
			Action Rules
				BaseOfPurchases 							= PrmUpdateQualifierCurrentBaseOfPurchases
				BaseOfPurchasesInUnits						= PrmUpdateQualifierCurrentBaseOfPurchasesInUnits
				invoke FastUpdateCurrentBaseOfPurchases ContractRebateDue
					invoked.PrmUpdateCurrentBaseOfPurchases	= PrmUpdateQualifierCurrentBaseOfPurchases
					
		CalculateExpectedRebateDueAmount is a Set Action
			restricted
			completion message is "CalculateExpectedRebateDueAmountHasStarted;Check'MyScheduledActions'ForCompletion"
			valid when (CalculateRebatesEligible)
			
			Parameters
				PrmContractGroup		is a ContractGroup
				PrmContract				is a Contract
				PrmBeginDueDate			is Date
				PrmEndDueDate   		is Date
				
			Parameter Rules
				PrmContractGroup
					required
						"ContractGroupIsRequired"

				PrmContract
					if (PrmContract entered)
						constraint (PrmContract.RebateEligible)
							"ContractMustBeReleasedAndNotClosedOrInactive"
						constraint (PrmContract.HasNoRebateQualifiersChanged)
							"CannotRun;ContractHasARebateWithChangedQualifiers.RunReloadFirst"

				PrmBeginDueDate
					if (PrmContract entered)
						default to PrmContract.EffectiveDate
					else
						required
							"BeginDueDateIsRequired"

				PrmEndDueDate
					if (PrmContract entered)
						default to PrmContract.ExpirationDate
						if (PrmEndDueDate 	entered
						and PrmBeginDueDate entered)
							constraint (PrmEndDueDate >= PrmBeginDueDate)
								"EndDueDateCannotPrecedeBeginDueDate"
						else
						if (PrmEndDueDate	not entered
						and PrmBeginDueDate entered)
							constraint (PrmContract.ExpirationDate >= PrmBeginDueDate)				
								"EndDueDateCannotPrecedeBeginDueDate"
						else
						if (PrmEndDueDate entered
						and PrmBeginDueDate not entered)
							constraint (PrmEndDueDate >= PrmContract.EffectiveDate)
								"EndDueDateCannotPrecedeBeginDueDate"
					else
						required
						constraint (PrmEndDueDate >= PrmBeginDueDate)
							"EndDueDateCannotPrecedeBeginDueDate"

			Local Fields
				QualifierConditionsMet						is Boolean
				TotalExpectedAmount							is an InternationalAmount
				QualifierPercentageAmount   				is an InternationalAmount
				FirstQualifierFlag							is Boolean
				PreviousQualifierOrGroup    				is AlphaUpper size 1
				LocalCalculateExpectedRebateForGrowth		is Numeric 1
				CurrentTotalPurchases						is an InternationalAmount
				CurrentTotalPurchasesInUnits				is Numeric size 10
				CurrentPercent								is a Percent
				QualifiedGrowthRebatePercent				is a Percent
				LocalContractRebateType						is a ContractRebateType
				CurrentRebateDueBaseOfPurchases				is an InternationalAmount
				QualifiedGrowthRebateAmount					is an InternationalAmount
				LocalContractRebate							is a ContractRebate
				PreviousRebateDueCurrentPurchases			is an InternationalAmount
				LocalQualifiedLoyaltyPercentToBePaid		is a Percent
				LocalQualifiedLoyaltyAmountToBePaid			is an InternationalAmount
				LocalShowQualifierProgress					is Boolean
				LocalRebateWithNoQualifierChanges			is Boolean
				LocalQualifiedGrowthRebateAmountPerUnit 	is an InternationalAmount
				LocalQualifiedLoyaltyRebateAmountPerUnit 	is an InternationalAmount
				QualifiedBasicRebateAmountPerUnitAmount 	is an InternationalAmount
				LocalQualifiedThresholdRebatePercent		is a Percent
				LocalQualifiedThresholdRebateAmount			is an InternationalAmount
				LocalQualifiedThresholdRebateAmountPerUnit 	is an InternationalAmount
				LocalRebateType								is a RebateType
												
			Instance Selection
				where (((ContractRebateDueQualifier.ContractGroup 		= PrmContractGroup
				and      ContractRebateDueQualifier.Contract			= PrmContract)
				or       PrmContract									not entered)
				and      ContractRebateDueQualifier.ContractRebateDue	>= PrmBeginDueDate	
				and      ContractRebateDueQualifier.ContractRebateDue  	<= PrmEndDueDate)

			Sort Order
				ContractGroup
				Contract
				ContractRebateType
				ContractRebate
				ContractRebateDue
				ContractRebateQualifier
				
			Action Rules
			
				Empty Set Rules
					invoke ClearExpectedAmount ContractRebateDue in foreground
						invoked.PrmContractGroup		= PrmContractGroup
						invoked.PrmContract				= PrmContract
						invoked.PrmBeginDueDate			= PrmBeginDueDate
						invoked.PrmEndDueDate			= PrmEndDueDate
						
				Contract Set Rules
					Entrance Rules
						invoke FastUpdateWithoutEdits Contract
							invoked.UpdateLastRebateCalculationRunDate	= true
			
				ContractRebateType Set Rules
					Entrance Rules
						LocalRebateType							= ContractRebateType.RebateType
						LocalContractRebateType					= ContractRebateType
			
				ContractRebate Set Rules
					Entrance Rules
						LocalCalculateExpectedRebateForGrowth	= ContractRebate.CalculateExpectedRebateForGrowth	
						initialize PreviousRebateDueCurrentPurchases

						if (!ContractRebate.QualifierChanged
						or  ContractRebate.QualifierChanged not entered)
							LocalRebateWithNoQualifierChanges	= true
						else
							LocalRebateWithNoQualifierChanges	= false
						
					Exit Rules
						if (LocalRebateWithNoQualifierChanges)
							invoke UpdateTotalExpectedAmount ContractRebate			

				ContractRebateDue Set Rules
					Entrance Rules
						if (LocalRebateWithNoQualifierChanges)
							FirstQualifierFlag					= true
							QualifierConditionsMet				= false
							LocalShowQualifierProgress			= ContractRebateDue.ShowQualifierProgress
							initialize QualifiedGrowthRebatePercent
							initialize QualifiedGrowthRebateAmount
							initialize LocalQualifiedGrowthRebateAmountPerUnit
							initialize LocalQualifiedLoyaltyRebateAmountPerUnit
							initialize LocalQualifiedLoyaltyPercentToBePaid
							initialize LocalQualifiedLoyaltyAmountToBePaid
							initialize QualifiedBasicRebateAmountPerUnitAmount
							initialize LocalQualifiedThresholdRebateAmountPerUnit
							initialize LocalQualifiedThresholdRebatePercent
							initialize LocalQualifiedThresholdRebateAmount
							CurrentRebateDueBaseOfPurchases		= ContractRebateDue.CurrentBaseOfPurchases
							PreviousRebateDueCurrentPurchases	= ContractRebateDue.CurrentPurchases
													
					Exit Rules
						if (LocalRebateWithNoQualifierChanges)
							if (LocalShowQualifierProgress)
								invoke UpdateExpectedAmount ContractRebateDue
									invoked.QualifierConditionsMet      				= QualifierConditionsMet
									invoked.QualifiedGrowthRebatePercent				= QualifiedGrowthRebatePercent
									invoked.QualifiedGrowthRebateAmount					= QualifiedGrowthRebateAmount
									invoked.PrmQualifiedLoyaltyPercentToBePaid			= LocalQualifiedLoyaltyPercentToBePaid
									invoked.PrmQualifiedLoyaltyAmountToBePaid			= LocalQualifiedLoyaltyAmountToBePaid
									invoked.PrmQualifiedThresholdPercentToBePaid		= LocalQualifiedThresholdRebatePercent
									invoked.PrmQualifiedThresholdAmountToBePaid			= LocalQualifiedThresholdRebateAmount
									invoked.PrmQualifiedBasicRebateAmountPerUnitAmount	= QualifiedBasicRebateAmountPerUnitAmount
							
				Instance Rules
					if (LocalRebateWithNoQualifierChanges)

						if ((ContractRebate.NumberOfQualifiers = 1)
						or 	(ContractRebate.NumberOfQualifiers > 1
						and  FirstQualifierFlag						= true))

							include SetQualifierConditionsMetFlagTrue
							FirstQualifierFlag					= false
						else

						if  (ContractRebate.NumberOfQualifiers > 1
						and  ContractRebateQualifier.OrGroup		= PreviousQualifierOrGroup)
							if (QualifierConditionsMet				= true)
								include SetQualifierConditionsMetFlagFalse
						else

						if  (ContractRebate.NumberOfQualifiers > 1
						and  ContractRebateQualifier.OrGroup		!= PreviousQualifierOrGroup)
							if (QualifierConditionsMet				= false)
								include SetQualifierConditionsMetFlagTrue


						PreviousQualifierOrGroup					= ContractRebateQualifier.OrGroup
						if (LocalRebateWithNoQualifierChanges)
							if (LocalShowQualifierProgress)
								LoyaltyPercentToBePaid					= LocalQualifiedLoyaltyPercentToBePaid
								ThresholdPercentToBePaid				= LocalQualifiedThresholdRebatePercent
						if (LocalRebateType.GrowthRebate)
							if (LocalRebateWithNoQualifierChanges)
								if (LocalShowQualifierProgress)
									AmountPerUnitEarned					= LocalQualifiedGrowthRebateAmountPerUnit
						else
						if (LocalRebateType.LoyaltyRebate)
							if (LocalRebateWithNoQualifierChanges)
								if (LocalShowQualifierProgress)
									AmountPerUnitEarned					= LocalQualifiedLoyaltyRebateAmountPerUnit
						else
						if (LocalRebateType.MultipleThresholdRebate
						or  LocalRebateType.SupplementalRebate)
							if (LocalRebateWithNoQualifierChanges)
								if (LocalShowQualifierProgress)
									AmountPerUnitEarned					= LocalQualifiedThresholdRebateAmountPerUnit
													
		InitializePurchases is an Instance Action
			restricted
			Action Rules
				initialize QualifierContractSpend
				initialize QualifierAllContractsSpend
				initialize BaseOfPurchases
				initialize CurrentPercentOfAllPurchasesAchievedForQualifier
				initialize CurrentPercentAchieved
				initialize QualifierContractSpendInUnits
				initialize BaseOfPurchasesInUnits				
