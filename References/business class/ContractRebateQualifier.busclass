ContractRebateQualifier is a BusinessClass
    owned by po
    prefix is CORQ

    Ontology
    	symbolic key is ContractRebateQualifier

	Patterns
		implements ContextualParent
		
	Persistent Fields
		PurchaseType	 					is Numeric size 1
			States
				TotalPurchases					value is 1
				TargetedPurchases				value is 2		
    	PurchaseOperator					is AlphaUpper size 2
    		States
    			LessThanOrEqualTo   			value is "LE"
    			GreaterThanOrEqualTo			value is "GE"
    			EqualTo							value is "EQ"
    			LessThan						value is "LT"
    			GreaterThan						value is "GT"
    	RebatePurchaseAmtPct    									
    	OrGroup								is AlphaUpper size 1	
    	PercentOfTargetedPurchases			is a Percent
    	AmountOfTargetedPurchases			is an InternationalAmount
    	TargetedPurchasesFromDate			is Date
    	TargetedPurchasesToDate				is Date
    	RebateFromDate						is Date
    	RebateToDate						is Date
    	RebateAmount						is an InternationalAmount
		LastRebateGrowthSeq 				is Numeric size 3
			disable Auditing
		PriorYearPurchaseAmount				is an InternationalAmount
    	GrowthRebatePercent					is a Percent
    	AllInvoicesForSupplier				is Boolean
    	ProjectedRebateAmount				is an InternationalAmount
    	LoyaltyRebatePercent				is a Percent				
    	MultipleQualifierUpdate				is Boolean					
   		Vendor								is a snapshot of ContractRebate.Vendor
   		SpendType							is Numeric size 1
   			States
   				Amount							value is 0
   				Units							value is 1
			
	Local Fields
		LocalCompany					is like Company
		LocalOrGroup					is AlphaUpper size 1
		LocalContractRebateQualifier	is Numeric size 6
		LocalVendor						is like Vendor
		LocalVendorGroup				is like VendorGroup
		LocalContractRebateDue			is Date
		
	Context Fields
		ContextRebateDue				is a ContractRebateDue
		
	Field Groups
		UpdateQualifierChangedFlag
			PurchaseType
			PurchaseOperator
			RebatePurchaseAmtPct
    		TargetedPurchasesFromDate
    		TargetedPurchasesToDate	
    		OrGroup
    		AllInvoicesForSupplier
			
    Derived Fields
    	DerivedPurchaseTypeOperator is a DerivedField
    		type is Alpha size 100
    		
    		if (RebatePurchaseAmtPct.PurchasePercent entered)
    			return PurchaseType + " " + PurchaseOperator + " " + RebatePurchaseAmtPct.PurchasePercent
    		else
    		if (RebatePurchaseAmtPct.PurchaseAmount entered)
    			return PurchaseType + " " + PurchaseOperator + " " + RebatePurchaseAmtPct.PurchaseAmount
    		else
    			return PurchaseType + " " + PurchaseOperator + " " + RebatePurchaseAmtPct.PurchaseUnits
  		
    	DerivedParentContract is a ComputeField
    		type is Numeric size 15
    		restricted
   			(Contract.ParentContract)
   			
   		DerivedProjectedRebateAmount  is a DerivedField
    		type is like InternationalAmount
    		restricted
			if (GrowthRebate)
	   			return (GrowthRebatePercent * PriorYearPurchaseAmount)
	   		else
			if (LoyaltyRebate)
	   			return (LoyaltyRebatePercent * PriorYearPurchaseAmount)
	   		else
	   			return (PriorYearPurchaseAmount * ContractRebate.RebatePercent)	   		
			   		
    	ConvertedPercent is a ComputeField
    		type is Decimal size 4.2
    		restricted
   			(RebatePurchaseAmtPct.PurchasePercent * 100)
   			
    	ConvertedRebatePercent is a ComputeField
    		type is Decimal size 4.2
    		restricted
   			(ContractRebate.RebatePercent * 100)
   			
    	ConvertedGrowthRebatePercent is a ComputeField
    		type is Decimal size 4.2
    		restricted
   			(GrowthRebatePercent * 100)
   			
    	ConvertedAmount is a DerivedField
    		type is like InternationalCost
    		restricted
   			return (RebatePurchaseAmtPct.PurchaseAmount * 1)
   			
   		FormattedRebatePercent is a ConditionalField
   			type is Alpha size 6
   			restricted
			if (ConvertedRebatePercent > 0)
				ConvertedRebatePercent			
			else
				"     0"
   			
   		FormattedGrowthRebatePercent is a ConditionalField
   			type is Alpha size 6
   			restricted
			if (ConvertedGrowthRebatePercent > 0)
				ConvertedGrowthRebatePercent			
			else
				"     0"
			
    	TotalPurchasesMessage is a MessageField
    		restricted
    		"TotalPurchases"
    		
    	TargetedPurchasesMessage is a MessageField
    		restricted
    		"TargetedPurchases"
    	
    	CalculateRebateAmountOnAllContractSpend is a MessageField
    		"CalculateRebateAmountOnAllSpendForQualifyingContracts,NotJustSpendForQualifyingItems"
    	
    	DerivedMessageForCalculateOnAllItemsSpend is a MessageField
   			"ThisRebateAmountWillBeCalculatedOnSpendFromAllItemsOnQualifyingContracts-NotJustOnSpendFromQualifyingItems"
				
    	DerivedPurchaseType is a ConditionalField
			type is Alpha 18
			restricted
			if (PurchaseType.TotalPurchases)
				TotalPurchasesMessage			
			else
			if (PurchaseType.TargetedPurchases)
				TargetedPurchasesMessage				
			else
				blank
   			
		DerivedPercent is a StringField
			type is Alpha 8
			restricted			
			ConvertedPercent
			"%"
   			
		DerivedRebatePercent is a StringField
			type is Alpha 8
			FormattedRebatePercent
			"%"
   			
		DerivedGrowthRebatePercent is a StringField
			type is Alpha 8
			restricted
			FormattedGrowthRebatePercent
			"%"
   			
		DerivedAmount is a StringField
			type is Alpha 18
			restricted			
			ConvertedAmount
			
		DerivedPercentAmount is a StringField
			type is Alpha 30
			restricted
			DerivedPercent
			" Of "
			DerivedAmount
			
		NumberOfBlankOrGroups is a ComputeField
			type is Numeric 6
			restricted
			(instance count of BlankOrGroupRel)
				
		DuplicateNonBlankOrGroupsExist is a DerivedField
			type is Boolean
			restricted
			DuplicateNonBlankOrGroupsExist = false
			for each ContractRebate.ContractRebateQualifier set
				LocalOrGroup = each.OrGroup
				LocalContractRebateQualifier = each.ContractRebateQualifier
				if (DuplicateOrGroupQualifierRel exists)
					return true
     	
		DerivedSupplier is a StringField
			type is Numeric 9
			restricted
			Contract.Supplier
     	
		DerivedContractRebateDue is a DerivedField
			type is Date
			restricted
			return ContextRebateDue
			
	Conditions
		GrowthRebate
			when (ContractRebateTypeRel.RebateType.GrowthRebate)
		NotGrowthRebate
			when (!ContractRebateTypeRel.RebateType.GrowthRebate)
		LoyaltyRebate
			when (ContractRebateTypeRel.RebateType.LoyaltyRebate)
		NotGrowthAndNotLoyaltyAndNotMultipleThresholdRebate
			when (!ContractRebateTypeRel.RebateType.GrowthRebate
			and   !ContractRebateTypeRel.RebateType.LoyaltyRebate
			and   !ContractRebateTypeRel.RebateType.MultipleThresholdRebate)
		MultipleThresholdRebate
			when (ContractRebateType.RebateType.MultipleThresholdRebate)
		NotAllInvoicesForSupplier
			restricted
			when (AllInvoicesForSupplier = false)
		NoQualifierItemsExist
			restricted
			when (!QualifierItemsRel exists)
		NoQualifierCodesExist
			restricted
			when (!QualifierCodesRel exists)
		QualifierItemsExist
			restricted
			when (QualifierItemsRel exists)
		QualifierCodesExist
			restricted
			when (QualifierCodesRel exists)
		QualifierContractsExist
			restricted
			when (QualifierContractRel exists)
		MoreThanOneQualifier
			restricted
			when (ContractRebate.NumberOfQualifiers >= 2)			
		CanDisplay
			restricted
			when (AllInvoicesForSupplier = false
			and   !Contract.ServicePurchaseType)
		AllOrGroupsAreBlank
			restricted
			when (all ContractRebate.ContractRebateQualifierRel.OrGroup = blank)
		AllOrGroupsAreTheSame
			restricted
			when (all ContractRebate.ContractRebateQualifierRel.OrGroup = OrGroup)
		CanSetAllGroupsTheSame
			restricted
			when (!AllOrGroupsAreBlank and !AllOrGroupsAreTheSame and MoreThanOneQualifier)
		CanSetAllGroupsUnique
			restricted
			when ((AllOrGroupsAreBlank or AllOrGroupsAreTheSame) and MoreThanOneQualifier)
		RebatePurchaseAmtPctChanged
			restricted
			when ((RebatePurchaseAmtPct.PurchaseAmount changed
			and   old RebatePurchaseAmtPct.PurchaseAmount entered)
			or    (RebatePurchaseAmtPct.PurchasePercent changed
			and   old RebatePurchaseAmtPct.PurchasePercent entered))
		CurrencyBasedQualifier
			when (RebatePurchaseAmtPct.PurchaseAmount entered
			or    SpendType.Amount)
		PercentBasedQualifier
			restricted
			when (RebatePurchaseAmtPct.PurchasePercent entered)
		UnitsBasedQualifier
			when (RebatePurchaseAmtPct.PurchaseUnits entered
			or    SpendType.Units)
		ContractSupplierIsGPO
			restricted
			when (Contract.Supplier.GroupPurchasingOrganization)
		ShowContractSelection
			restricted
			when (AllInvoicesForSupplier = false
			and  !ContractSupplierIsGPO)
		CalculateOnAllContractItemsSpend
			restricted
			when (ContractRebate.CalculateRebateAmountOnAllSpendForQualifyingContracts)
		ShowSelectAllItemsOption
			restricted
    		when (!AllInvoicesForSupplier
	    	and   !CalculateOnAllContractItemsSpend)
		ShowOnlyQualifierItems
			restricted
    		when (!AllInvoicesForSupplier
	    	and   CalculateOnAllContractItemsSpend)
	    	
	    NoContractRebateDueInvoiceLinesExist
            when (!RebateInvoiceLinesRel exists)
		CanAmendAndNotSupplemental
    		when (Contract.CanAmend
	    	and  !ContractRebateType.RebateType.SupplementalRebate)
	    StandardRebate
	    	when (ContractRebateType.RebateType.StandardRebate)
			
	Relations
		QualifierItemsRel
			one-to-many relation to ContractRebateQualifierItem
			Field Mapping uses ByQualifierItemFlag
				related.ContractGroup			    		= ContractGroup
				related.Contract							= Contract
				related.ContractRebateType					= ContractRebateType
				related.ContractRebate						= blank
				related.ContractRebateQualifier				= ContractRebateQualifier
				related.UseThisItemForQualificationPurposes	= true
		
		QualifierCodesRel is a ContractRebateQualifierCode set
		
		QualifierContractRel is a RebateQualifierContract set
		
		AllContractLinesRel
			one-to-many relation to ContractLine
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
		ContractRebateTypeRel
			one-to-one relation to ContractRebateType
			Field Mapping uses symbolic key
				related.ContractGroup      = ContractGroup
				related.ContractRebateType = ContractRebateType
		AllContractsRel
			one-to-many relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
    	ManufacturersRel
    		one-to-many relation to Manufacturer
            Field Mapping uses  symbolic key
          		related.ItemGroup = ContractGroup
          		
  		CommodityCodeRel
  			one-to-many relation to CommodityCode
  			Field Mapping uses symbolic key
   				related.ItemGroup	= ContractGroup
  				
  		UNSPSCCodeRel
  			one-to-many relation to UNSPSCCode
  			Field Mapping uses symbolic key
  				related.ItemGroup	= ContractGroup
  				
  		MajorClassRel
  			one-to-many relation to MajorClass
  			Field Mapping uses symbolic key
  				related.ItemGroup	= ContractGroup
  				related.ClassType	= "P"
  				
  		MinorClassRel
  			one-to-many relation to MinorClass
  			Field Mapping uses symbolic key
  				related.ItemGroup	= ContractGroup
  				related.ClassType	= "P"
  				
		GPOContractsRel
			one-to-many relation to Contract
			Field Mapping uses OpenByGPOSupplier
				related.ContractGroup	= ContractGroup
				related.GPOSupplier		= Contract.Supplier
				
		HierarchicalContractsRel
			one-to-many relation to Contract
			Field Mapping uses symbolic key
				related.ContractGroup = ContractGroup
            Instance Selection
				where (related.Supplier.ParentSupplier = DerivedSupplier					
				or     related.Supplier                = DerivedSupplier)					
				
   		ContractRebateGrowthQualifierRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
				
		ContractRebateThresholdQualifiersRel
			one-to-many relation to ContractRebateThresholdQualifier
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
				
   		BlankOrGroupRel
			one-to-many relation to ContractRebateQualifier
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
            Instance Selection
				where (related.OrGroup 				= blank)				

   		SameGroupQualifierRel
			one-to-many relation to ContractRebateQualifier
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
            Instance Selection
				where (related.OrGroup 				    = OrGroup				
				and    related.ContractRebateQualifier != ContractRebateQualifier)					

   		DifferentGroupQualifierRel
			one-to-many relation to ContractRebateQualifier
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
            Instance Selection
				where (related.OrGroup 				   != OrGroup				
				and    related.ContractRebateQualifier != ContractRebateQualifier)					

   		DuplicateOrGroupQualifierRel
			one-to-many relation to ContractRebateQualifier
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
            Instance Selection
				where (related.OrGroup 				    = LocalOrGroup				
				and    related.ContractRebateQualifier != LocalContractRebateQualifier)	
				
		PayablesCompaniesRel
			one-to-many relation to PayablesCompany
			Field Mapping uses symbolic key
			Instance Selection
				where (related.VendorGroup 		= ContractGroup)
			
		ContractCompanyVendorsRel
			one-to-many relation to ContractCompanyVendor
			Field Mapping uses ByVendorGroup
				related.VendorGroup				= LocalVendorGroup

		PayablesInvoicesRel
			one-to-many relation to PayablesInvoice
			Field Mapping uses Set6
			Instance Selection
				where (related.Company 		= LocalCompany
				and    related.Vendor		= LocalVendor)
			
		RebateInvoiceLinesRel
			one-to-many relation to ContractRebateDueInvoiceLine
			Field Mapping uses ByBottomRebate
				related.ContractGroup			    		= ContractGroup
				related.Contract							= Contract
				related.ContractRebateType					= ContractRebateType
				related.ContractRebateQualifier				= ContractRebateQualifier
		
		ContractRebateDuesRel
			one-to-many relation to ContractRebateDue
			Field Mapping uses symbolic key 
				related.ContractGroup			    		= ContractGroup
				related.Contract							= Contract
				related.ContractRebateType					= ContractRebateType
				related.ContractRebate 						= blank
		
   		ContractRebateLoyaltyQualifiersByPercentDescendingRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses ByLoyaltyPercentToReachDescending
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where (related.LoyaltyPercentToReach	entered)
				
   		ContractRebateLoyaltyQualifiersByAmountDescendingRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses ByLoyaltyAmountToReachDescending
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where (related.LoyaltyAmountToReach	entered)
				
   		ContractRebateLoyaltyQualifiersByUnitsDescendingRel
			one-to-many relation to ContractRebateLoyaltyQualifier
			Field Mapping uses ByLoyaltyUnitsToReachDescending
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where (related.LoyaltyUnitsToReach	entered)
				
   		ContractRebateGrowthQualifiersByAmountRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where (related.FirstGrowthAmount	entered)
				
   		ContractRebateGrowthQualifiersByUnitsRel
			one-to-many relation to ContractRebateGrowthQualifier
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where (related.FirstGrowthUnits	entered)
				
   		ContractRebateThresholdQualifiersByAmountRel
			one-to-many relation to ContractRebateThresholdQualifier
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where (related.LowerAmount	entered)
				
   		ContractRebateThresholdQualifiersByUnitsRel
			one-to-many relation to ContractRebateThresholdQualifier
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebateType
				related.ContractRebate				= blank
			Instance Selection
				where (related.LowerUnits	entered)
				
		ContractRebateDueQualifiersForQualifierAndRebateDueRel
			one-to-one relation to ContractRebateDueQualifier
			Field Mapping uses ByQualifierRebateDue
				related.ContractGroup               = ContractGroup
				related.Contract                    = Contract
				related.ContractRebateType          = ContractRebateType
				related.ContractRebate              = blank
				related.ContractRebateQualifier		= ContractRebateQualifier
				related.ContractRebateDue			= LocalContractRebateDue
				related.ContractRebateDueQualifier	= blank

		RebateQualifierContractsForSupplementalBasisRebateRel
			one-to-many relation to RebateQualifierContract
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebate.SupplementalBasisRebate.ContractRebateType
				related.ContractRebate				= blank
				related.ContractRebateQualifier		= ContractRebateQualifier
					
		ContractRebateQualifierItemsForSupplementalBasisRebateRel
			one-to-many relation to ContractRebateQualifierItem
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebate.SupplementalBasisRebate.ContractRebateType
				related.ContractRebate				= blank
				related.ContractRebateQualifier		= ContractRebateQualifier
					
		ContractRebateQualifierCodesForSupplementalBasisRebateRel
			one-to-many relation to ContractRebateQualifierCode
			Field Mapping uses symbolic key
				related.ContractGroup			    = ContractGroup
				related.Contract					= Contract
				related.ContractRebateType			= ContractRebate.SupplementalBasisRebate.ContractRebateType
				related.ContractRebate				= blank
				related.ContractRebateQualifier		= ContractRebateQualifier
				

		PurgeContractRebateQualifierItemRel is a ContractRebateQualifierItem set
			Instance Selection
				include deleted records
					
	Field Rules
		PurchaseType
			required
				"PurchaseTypeIsRequired"

    		if (PriorYearPurchaseAmount > 0)
    			ProjectedRebateAmount = DerivedProjectedRebateAmount
    							
		PurchaseOperator
			initial value is "GT"
				when (StandardRebate)
			if (StandardRebate)
				required
					"PurchaseOperatorIsRequired"
			
	    TargetedPurchasesFromDate
	    	if (PurchaseType.TargetedPurchases)
	    		required
	    			"TargetedPurchasesFromDateIsRequiredWhenTargetedPurchasesIsSelected"
			else
				cannot be entered
	    			"TargetedPurchasesFromDateCannotBeEnteredUnlessTargetedPurchasesIsSelected"
			if (Contract.EffectiveDate > 0)	    		
	           	constraint (TargetedPurchasesFromDate >= Contract.EffectiveDate)
	                "TargetedPurchasesFromDateCannotBeLessThanContractEffectiveDate"
	        if (Contract.ExpirationDate > 0)
	            constraint (TargetedPurchasesFromDate <= Contract.ExpirationDate)
	                "TargetedPurchasesFromDateCannotBeGreaterThanContractExpirationDate"                
			
	    TargetedPurchasesToDate
	    	if (PurchaseType.TargetedPurchases)
	    		required
					"TargetedPurchasesToDateIsRequiredWhenTargetedPurchasesIsSelected"
			else
				cannot be entered	    		
	    			"TargetedPurchasesToDateCannotBeEnteredUnlessTargetedPurchasesIsSelected"
           	constraint (TargetedPurchasesToDate > TargetedPurchasesFromDate)
                "TargetedPurchasesToDateCannotBeLessThanFromDate"
           	if (Contract.ExpirationDate > 0)
	            constraint (TargetedPurchasesToDate <= Contract.ExpirationDate)
	                "TargetedPurchasesToDateCannotBeGreaterThanContractExpirationDate"   
	                
		AllInvoicesForSupplier
			default to false
			if (AllInvoicesForSupplier changed
			and AllInvoicesForSupplier)
				constraint (NoQualifierItemsExist)
					"CannotSelect'All_Invoices_For_A_Supplier';RebateQualifierItemsHaveBeenSelected"             
				constraint (NoQualifierCodesExist)
					"Cannot'SelectAllInvoicesForASupplier';RebateQualifierCodesHaveBeenSelected"             
    			constraint (ContractRebate.NumberOfQualifiers <= 1)
    				"OnlyOneRebateQualifierIsAllowedWhenAllInvoicesForSupplierIsSelected"
    		if (AllInvoicesForSupplier)
    			constraint (!CalculateOnAllContractItemsSpend)
    				"CannotSelect'All_Invoices_For_A_Supplier'_forRebateSetToUseQualifyingItems" 
    			constraint (!QualifierContractRel exists)
    				"CannotSelect'All_Invoices_For_A_Supplier';_rebateQualifierContractsHaveBeenAddedToThisQualifier"
				constraint (!ContractSupplierIsGPO)
					"CannotSelect_'All_Invoices_For_A_Supplier';_contractSupplierIs_aGPO_(GroupPurchasingOrganization)"
				constraint (SpendType.Amount)
					"CannotSelect_'All_Invoices_For_A_Supplier';_andUse_Amount_Type_of_Units"
				constraint (RebatePurchaseAmtPct.PurchaseUnits = 0)
					"CannotSelect_'All_Invoices_For_A_Supplier'_andEnter_Purchase_Amount_In_Units"
				    				 
			if (AllInvoicesForSupplier changed
            and !AllInvoicesForSupplier)
                constraint (NoContractRebateDueInvoiceLinesExist)
                    "CannotUn-check_'All_Invoices_For_Supplier';_capturedRebateInvoiceLinesExistForThisContract"
			
			if (AllInvoicesForSupplier changed)
				if (RebateInvoiceLinesRel exists)
					confirmation required
						"Warning;CapturedRebateInvoicesExistForThisQualifier;'Reload_Rebate_Invoices_For_Qualifier_Changes'_willNeedToBeRunForThisRebate;DoYouWantToContinue?"
    				
    	SpendType
    		if (SpendType.Units)
    			constraint (!AllInvoicesForSupplier)
					"CannotSelect_'All_Invoices_For_A_Supplier';_with_Amount_Type_of_Units"
					
			if (SpendType changed)
				if (SpendType.Units)
					if (GrowthRebate)
						if (ContractRebateGrowthQualifiersByAmountRel exists)
							cannot be changed
								"CannotChangeTo_UnitsSpendTypeWhenAmountGrowthQualifiersExist"
					else
					if (LoyaltyRebate)
						if (ContractRebateLoyaltyQualifiersByAmountDescendingRel exists)
							cannot be changed
								"CannotChangeTo_UnitsSpendTypeWhenAmountLoyaltyQualifiersExist"
					else
					if (MultipleThresholdRebate)
						if (ContractRebateThresholdQualifiersByAmountRel exists)
							cannot be changed
								"CannotChangeTo_UnitsSpendTypeWhenAmountThresholdQualifiersExist"
				else
				if (SpendType.Amount)
					if (GrowthRebate)
						if (ContractRebateGrowthQualifiersByAmountRel exists)
							cannot be changed
								"CannotChangeTo_AmountSpendTypeWhenUnitsGrowthQualifiersExist"
					else
					if (LoyaltyRebate)
						if (ContractRebateLoyaltyQualifiersByAmountDescendingRel exists)
							cannot be changed
								"CannotChangeTo_AmountSpendTypeWhenUnitsLoyaltyQualifiersExist"
					else
					if (MultipleThresholdRebate)
						if (ContractRebateThresholdQualifiersByAmountRel exists)
							cannot be changed
								"CannotChangeTo_AmountSpendTypeWhenUnitsThresholdQualifiersExist"
			
		RebatePurchaseAmtPct
			if (RebatePurchaseAmtPct.PurchaseUnits > 0)
				constraint (!AllInvoicesForSupplier)	
					"CannotEnter_Purchase_Amount_In_UnitsAndSelect_'All_Invoices_For_A_Supplier'"

			if (RebatePurchaseAmtPct.PurchaseUnits changed 
			and RebatePurchaseAmtPct.PurchaseUnits not entered)
				if (ContractRebate.PotentialRebateAmountPerUnit entered)
					cannot be changed
						"CannotClearOut_Purchase_Amount_In_Units_rebateHasA_Rebate_Amount_Per_Unit_defined"

	Sets
		AllForSupplier
			Sort Order
				ContractGroup
				Vendor
				Contract
				ContractRebateType
				ContractRebate
				ContractRebateQualifier
			Instance Selection
				where (AllInvoicesForSupplier)
				
		NotAllForSupplier
			Sort Order
				ContractGroup
				Contract
				ContractRebateType
				ContractRebate
				ContractRebateQualifier
			Instance Selection
				where (NotAllInvoicesForSupplier)
				
	Actions
    	Create is a Create Action
    		valid when (CanAmendAndNotSupplemental)
    		Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToAddRebateQualifiers"   	
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToAddRebateQualifiers" 
    			if (GrowthRebate)
    				constraint (ContractRebate.NoRebateQualifiersExist)
    					"OnlyOneQualifierIsAllowedForAGrowthRebate"
    			if (Contract.ServicePurchaseType)
    				constraint (RebatePurchaseAmtPct.PurchasePercent = 0)
    					"PurchasePercentOfAllPurchasesCannotBeEnteredForServiceContracts"
    			if (AllInvoicesForSupplier)  	
    				constraint (ContractRebate.NumberOfQualifiers < 1)
    					"OnlyOneRebateQualifierIsAllowedWhenAllInvoicesForSupplierIsSelected" 
    				constraint (RebatePurchaseAmtPct.PurchasePercent = 0)
    					"PurchasePercentOfAllPurchasesCannotBeEnteredWhenAllInvoicesForSupplierIsSelected" 
    			else
    				constraint (!ContractRebate.AllInvoicesForSupplierQualifierExists)
    					"RebateQualifierAlreadyExistsWithAllInvoicesForSupplierSelected;OnlyOneRebateQualifierIsAllowed"
    			if (ContractRebate.NumberOfQualifiers >= 2 and NumberOfBlankOrGroups > 1) 
    				constraint (OrGroup = blank)
						"AllQualifiersMustHaveTheSameGroupOrAllQualifiersMustHaveDifferentGroups" 
    			if (ContractRebate.NumberOfQualifiers >= 2 and SameGroupQualifierRel exists)
					constraint (!DifferentGroupQualifierRel exists)
						"AllQualifiersMustHaveTheSameGroupOrAllQualifiersMustHaveDifferentGroups" 
				if (ContractRebate.NumberOfQualifiers >= 2 and DuplicateNonBlankOrGroupsExist)
					constraint (AllOrGroupsAreTheSame)
						"AllQualifiersMustHaveTheSameGroupOrAllQualifiersMustHaveDifferentGroups" 
    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate

				for each ContractRebateDuesRel
					LocalContractRebateDue					= each.ContractRebateDue
					invoke Create ContractRebateDueQualifier
						invoked.ContractGroup				= ContractGroup
						invoked.Contract					= Contract
						invoked.ContractRebateType			= ContractRebateType
						invoked.ContractRebate				= blank
						invoked.ContractRebateQualifier		= ContractRebateQualifier 				
						invoked.ContractRebateDue			= LocalContractRebateDue
						invoked.ContractRebateDueQualifier	= blank
						
				if (ContractRebateType.RebateType.SupplementalRebate)
					for each RebateQualifierContractsForSupplementalBasisRebateRel
						invoke Create RebateQualifierContract
							invoked.ContractGroup			= ContractGroup
							invoked.Contract				= Contract
							invoked.ContractRebateType		= ContractRebateType
							invoked.ContractRebate			= blank
							invoked.ContractRebateQualifier	= ContractRebateQualifier
							fill in fields from each
					for each ContractRebateQualifierItemsForSupplementalBasisRebateRel
						invoke Create ContractRebateQualifierItem
							invoked.ContractGroup			= ContractGroup
							invoked.Contract				= Contract
							invoked.ContractRebateType		= ContractRebateType
							invoked.ContractRebate			= blank
							invoked.ContractRebateQualifier	= ContractRebateQualifier
							fill in fields from each
					for each ContractRebateQualifierCodesForSupplementalBasisRebateRel
						invoke Create ContractRebateQualifierCode
							invoked.ContractGroup			= ContractGroup
							invoked.Contract				= Contract
							invoked.ContractRebateType		= ContractRebateType
							invoked.ContractRebate			= blank
							invoked.ContractRebateQualifier	= ContractRebateQualifier
							fill in fields from each
							
    	Update is an Update Action
    		valid when (Contract.CanAmend)
    		Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToModifyRebateQualifiers"   	
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToModifyRebateQualifiers"   	
    			if (Contract.ServicePurchaseType)
    				constraint (RebatePurchaseAmtPct.PurchasePercent = 0)
    					"PurchasePercentOfAllPurchasesCannotBeEnteredForServiceContracts" 
    			if (AllInvoicesForSupplier)  	
    				constraint (ContractRebate.NumberOfQualifiers = 1)
    					"OnlyOneRebateQualifierIsAllowedWhenAllInvoicesForSupplierIsSelected" 
    				constraint (RebatePurchaseAmtPct.PurchasePercent = 0)
    					"PurchasePercentOfAllPurchasesCannotBeEnteredWhenAllInvoicesForSupplierIsSelected" 
    			else
    				constraint (!ContractRebate.AllInvoicesForSupplierQualifierExists)
    					"RebateQualifierAlreadyExistsWithAllInvoicesForSupplierSelected;OnlyOneRebateQualifierIsAllowed"
    			if (ContractRebate.NumberOfQualifiers >= 3 and NumberOfBlankOrGroups > 1) 
    				constraint (OrGroup = blank)
						"AllQualifiersMustHaveTheSameGroupOrAllQualifiersMustHaveDifferentGroups" 
    			if (ContractRebate.NumberOfQualifiers >= 3 and SameGroupQualifierRel exists)
					constraint (!DifferentGroupQualifierRel exists)
						"AllQualifiersMustHaveTheSameGroupOrAllQualifiersMustHaveDifferentGroups" 
				if (ContractRebate.NumberOfQualifiers >= 3 and DuplicateNonBlankOrGroupsExist)
					constraint (AllOrGroupsAreTheSame)
						"AllQualifiersMustHaveTheSameGroupOrAllQualifiersMustHaveDifferentGroups" 
    		
    		Exit Rules
    			if (UpdateQualifierChangedFlag changed or RebatePurchaseAmtPctChanged)
    				invoke SetQualifierChangedFlagToYes ContractRebate
    	
    	Delete is a Delete Action
    		valid when (Contract.CanAmend)
			Entrance Rules
				for each ContractRebateDuesRel
					LocalContractRebateDue					= each.ContractRebateDue
					invoke Delete ContractRebateDueQualifiersForQualifierAndRebateDueRel

    		Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToDeleteRebateQualifiers" 
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToDeleteRebateQualifiers"
    			constraint (!ContractRebate.RebateMoniesReceived)
    				"CannotDeleteRebateQualifiersAfterRebateMoniesHaveBeenReceived"   	
    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate
    				
    	SetAllGroupsTheSame is an Instance Action
    		valid when (CanSetAllGroupsTheSame)
    		Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToModifyRebateQualifiers"   	
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToModifyRebateQualifiers" 
    			for each ContractRebate.ContractRebateQualifier set
    				invoke FastUpdate each
    					invoked.OrGroup 				= blank
    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate		
    			
    	SetAllGroupsUnique is an Instance Action
    		valid when (CanSetAllGroupsUnique)
			Local Fields
				LocalCounter        	is Numeric size 2
				AlphabetAsArray
    		Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToModifyRebateQualifiers"   	
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToModifyRebateQualifiers"
    			AlphabetAsArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    			LocalCounter = 0 
    			for each ContractRebate.ContractRebateQualifier set
    				LocalCounter += 1   			
    				invoke FastUpdate each
    					invoked.OrGroup 			= AlphabetAsArray.SingleLetter[LocalCounter]
    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate		
    			
    	FastUpdate is an Update Action
    		restricted
    		Exit Rules
    			if (OrGroup changed)
    				invoke SetQualifierChangedFlagToYes ContractRebate
    	
		LoadSupplierRebateInvoices is a Set Action
			completion message is "LoadSupplierRebateInvoicesHasStarted;Check'MyScheduledActions'ForCompletion"
			restricted
			Parameters
				PrmVendorGroup				is like VendorGroup
				PrmContractGroup			is AlphaUpper size 4
				PrmContract					is Numeric size 15
				PrmInvoiceDateRange			is a DateRange
				PrmLastRunDate				is Date
				PrmNoDateRangeEntered		is Boolean
				
			Parameter Rules
				PrmVendorGroup
					required
						"VendorGroupIsRequired"
					if (PrmInvoiceDateRange not entered)
						PrmInvoiceDateRange.End			= current corporate date
				PrmContractGroup
					if (PrmContractGroup not entered)
						PrmContractGroup				= PrmVendorGroup	
				PrmInvoiceDateRange
					if (PrmInvoiceDateRange.Begin entered)
						constraint (PrmInvoiceDateRange.End entered)
							"EndInvoiceDateRequiredWhenBeginInvoiceDateIsEntered"
					constraint (PrmInvoiceDateRange.End	>= PrmInvoiceDateRange.Begin)
						"EndInvoiceDateCannotPrecedeBeginInvoiceDate"
					
			Local Fields
				LocalContractCompany			is a PurchasingCompany
				LocalContractVendor				is a Vendor
				LocalContractCompanyVendor		is a ContractCompanyVendor
				
			Instance Selection
				where (PrmContractGroup		= ContractGroup
				and   (((PrmContract		entered)
				and     (PrmContract		= Contract))
				or     (PrmContract			not entered))
				and    (AllInvoicesForSupplier))
				
			Sort Order
				ContractGroup
				Contract
				ContractRebate
				ContractRebateQualifier

			Action Rules

				ContractGroup Set Rules
					Entrance Rules
						LocalVendorGroup					= PrmVendorGroup
						
					Exit Rules
						invoke BuildSupplierRebateInvoices ContractCompanyVendor
							invoked.PrmVendorGroup			= PrmVendorGroup
							invoked.PrmInvoiceDateRange		= PrmInvoiceDateRange
							invoked.PrmNoDateRangeEntered	= PrmNoDateRangeEntered
							invoked.PrmContractGroup		= PrmContractGroup
							invoked.PrmContract				= PrmContract
							
				Instance Rules
					for each PayablesCompaniesRel
						LocalCompany					= each.Company
						LocalContractCompany			= each.Company
						LocalVendor						= Contract.Supplier.Vendor
						LocalContractVendor				= Contract.Supplier.Vendor
						if (PayablesInvoicesRel exists)		
							invoke Update LocalContractCompanyVendor
								invoked.Company				= each.Company
								invoked.VendorGroup			= PrmVendorGroup
								invoked.Vendor				= Contract.Supplier.Vendor

		SelectAllItemsAllContracts is an Instance Action
			valid when (QualifierContractsExist)
    		Action Rules
				for each QualifierContractRel
					invoke SelectAllItemsForRebateQualification each								

    	FastUpdateWithoutEdits is an Instance Action
    		restricted
    		Parameters
    			PrmUpdateVendor					is Boolean
    		Action Rules
    			if (PrmUpdateVendor)
    				Vendor 				= ContractRebate.Vendor
    				if (AllInvoicesForSupplier)
    					invoke SetQualifierChangedFlagToYes ContractRebate

    	Purge is a Purge Action
    		restricted
    			
