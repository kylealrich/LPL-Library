GeneralLedgerCalendar is a BusinessClass
	default label is "GlobalLedgerCalendar"
	owned by GeneralLedger
	prefix is GLCAL
	representative text is "<GeneralLedgerCalendar>-<Description>"
	
	Ontology
		symbolic key is GeneralLedgerCalendar
	
	Patterns
		implements BODId
	
	Persistent Fields
		Description
		CalendarSequence	is Numeric 4
		TopNode				is like GeneralLedgerCalendarPeriod 
		YTDTopNode			is like GeneralLedgerCalendarPeriod
		LTDTopNode			is like GeneralLedgerCalendarPeriod		
#ifdef module ad
		YAGTopNode			is like DailyCalendarPeriod
		MAGTopNode			is like DailyCalendarPeriod
		QAGTopNode			is like DailyCalendarPeriod
		CBTopNode			is like DailyCalendarPeriod
#endif
		CalendarType		is Numeric 2
			States
				Months				value is 1
				445        	        value is 2
				454                 value is 3
				544                 value is 4
				5253Week			value is 5
				4WeekPeriods		value is 6				
				Weeks				value is 7
				Days				value is 8
				Other				value is 99		
						
		YearEndMonth		is Numeric 2     
			States
				January				value is 1
				February			value is 2
				March				value is 3
				April				value is 4
				May					value is 5
				June				value is 6
				July				value is 7
				August				value is 8
				September			value is 9
				October				value is 10
				November			value is 11
				December			value is 12
				
		YearEndLastDay		is Numeric 1 
			States
				Sunday				value is 1
				Monday				value is 2
				Tuesday				value is 3
				Wednesday			value is 4
				Thursday			value is 5
				Friday				value is 6
				Saturday			value is 7
				
		YearEndLastDayMethod is Numeric 1
			States
				WithinYearEndMonth			value is 1
				NearestToEndOfYearEndMonth  value is 2			
				
		WeeksMethod			is Numeric 1
		    States
		    	ISO		   			value is 1
		    	Excel1     			value is 2
		    	Excel2     			value is 3
		    	Simple     			value is 4

		DaysHierarchy		is Numeric 1
			States
				DaysWithinYear		value is 1
				DaysWithinMonth 	value is 2
				DaysWithinWeek  	value is 3

		DefaultYearDisplayPeriod    is Alpha up to 100
    		Text Variables
				Year
				StartDateMM
				StartDateDD 
				StartDateYYYY
				StartDateMonthName
				StartDateMonthAbbreviation
				EndDateMM
				EndDateDD 
				EndDateYYYY
				EndDateMonthName
				EndDateMonthAbbreviation
				
		DefaultQuarterDisplayPeriod is Alpha up to 100
    		Text Variables
				Year
				Quarter
				StartDateMM
				StartDateDD 
				StartDateYYYY
				StartDateMonthName
				StartDateMonthAbbreviation
				EndDateMM
				EndDateDD 
				EndDateYYYY
				EndDateMonthName
				EndDateMonthAbbreviation

		DefaultMonthDisplayPeriod  is Alpha up to 100
    		Text Variables
				Year
				Month
				PaddedMonth  		
				StartDateMM
				StartDateDD 
				StartDateYYYY
				StartDateMonthName
				StartDateMonthAbbreviation
				EndDateMM
				EndDateDD 
				EndDateYYYY
				EndDateMonthName
				EndDateMonthAbbreviation
				
		DefaultWeekDisplayPeriod  is Alpha up to 100
    		Text Variables
				Year
				Week
				PaddedWeek
				StartDateMM
				StartDateDD 
				StartDateYYYY
				StartDateMonthName
				StartDateMonthAbbreviation
				EndDateMM
				EndDateDD 
				EndDateYYYY
				EndDateMonthName
				EndDateMonthAbbreviation	

		DefaultDayDisplayPeriod  is Alpha up to 100
    		Text Variables
				Year
				Day	
				PaddedDay
				DateMM
				DateDD 
				DateYYYY	
				MonthName
				MonthAbbreviation
				DayName	
				DayNameAbbreviation	
	
		DefaultEndDateDisplayPeriod  is Alpha up to 100
    		Text Variables
				Year
				DateMM
				DateDD 
				DateYYYY	
				MonthName
				MonthAbbreviation

		GenerationInProcess		is Boolean
			
	Local Fields
		LocalYear				is Year
		LocalQuarter			is Numeric 1
		LocalMonth				is Numeric 2
		LocalWeek				is Numeric 2
		LocalDay				is Numeric 3
		LocalDate				is Date
		LocalAlphaYear			is Alpha 4
		LocalAlphaDay			is Alpha 3
		LocalYearKey			is a GeneralLedgerCalendarPeriod
		LocalNextYearKey		is a GeneralLedgerCalendarPeriod
		LocalQuarterKey			is a GeneralLedgerCalendarPeriod
		LocalPeriodKey			is a GeneralLedgerCalendarPeriod
		TopNodeFound			is Boolean
		LocalSummaryPeriod		is a GeneralLedgerCalendarPeriod
		LocalPeriod				is a GeneralLedgerCalendarPeriod
		DatePeriod				is a GeneralLedgerCalendarPeriod
		LocalJulian				is Numeric 7
		LocalCreateWithinKey	is a GeneralLedgerCalendarPeriod
		SaveCreateWithinKey		is like GeneralLedgerCalendarPeriod
		LocalWeekAlpha			is Alpha 2
		LocalMonthAlpha			is Alpha 2
		LocalDayAlpha			is Alpha 3
		PeriodBegin				is like GeneralLedgerCalendarPeriod
		PeriodEnd				is like GeneralLedgerCalendarPeriod
		PeriodCount				is Numeric size 3
		WeekCount       		is Numeric size 2		
		Quarter					is Numeric size 1
		MaxPeriods				is Numeric size 3
		FirstOfMonth    		is Boolean
		FromDate				is Date
		ToDate					is Date
		LastDateBefore  		is Date
		LastDateAfter   		is Date
		NearestEndDate  		is Date
		StartDateMonth  		is Numeric 2
		YearMonthEnd			is Date
		YearEndDate				is Date
		WeekDate				is Date
		TempDay		    		is Numeric 1
		TempMonth				is Numeric 2
		TempYear				is Year
		TempYearPlus1   		is Year
		TempYearMinus1  		is Year
		WeekArray				is a GLCalendarWeekArray
		YearDiff				is Numeric 6
		DiffBeforeYearEnd 		is Numeric 2
		DiffAfterYearEnd  		is Numeric 2
		SkipPeriod				is Boolean
		LookupPeriod    		is a GeneralLedgerCalendarPeriod
		SkipShadow
		LocalPeriodType			is Numeric 2
		LocalActionCode				is an ActionCode
		LocalBODCurrentTimeStamp	is a BODCurrentTimeStamp
		LocalReportingBasis		is a ReportingBasis
		LocalPeriodArray		is a GeneralLedgerCalendarPeriodArray
		NewDateCount			is Numeric 3
		LocalParentPeriod		is a GeneralLedgerCalendarPeriod
		SaveMonth				is Numeric 2
		CurrentMonth			is Numeric 2
		SaveWeek				is Numeric 2
		CurrentWeek				is Numeric 2
		SaveStartDate			is Date
		SaveEndDate				is Date
		SaveOriginalYear		is Year
		CreatingWeeksWithinMonths
		LocalAsyncID			is an AsyncActionRequest
		BackgroundGroupAsyncId	is an AsyncActionRequest
		InvokedByCalendar		
		LocalOtherCalendarsExist is Boolean
		
#ifdef module analytics


#endif		 	
								  	
		TempDefaultYearDisplayPeriod    is Alpha 100
    		Text Variables
				Year						value is DerivedSampleYear
				StartDateMM					value is DerivedSampleDateMonth
				StartDateDD                 value is DerivedSampleDateDay 
				StartDateYYYY    		    value is DerivedSampleDate year
				StartDateMonthName			value is DerivedSampleDate month name
				StartDateMonthAbbreviation	value is DerivedSampleDate month short name
				EndDateMM					value is DerivedSampleDateMonth
				EndDateDD            	    value is DerivedSampleDateDay 
				EndDateYYYY    		        value is DerivedSampleDate year
				EndDateMonthName			value is DerivedSampleDate month name
				EndDateMonthAbbreviation	value is DerivedSampleDate month short name

		TempDefaultQuarterDisplayPeriod  is Alpha 100
    		Text Variables
				Year						value is DerivedSampleYear
				Quarter						value is DerivedNumericQuarter
				StartDateMM					value is DerivedSampleDateMonth
				StartDateDD                 value is DerivedSampleDateDay 
				StartDateYYYY    		    value is DerivedSampleDate year
				StartDateMonthName			value is DerivedSampleDate month name
				StartDateMonthAbbreviation	value is DerivedSampleDate month short name
				EndDateMM					value is DerivedSampleDateMonth
				EndDateDD            	    value is DerivedSampleDateDay 
				EndDateYYYY    		        value is DerivedSampleDate year
				EndDateMonthName			value is DerivedSampleDate month name
				EndDateMonthAbbreviation	value is DerivedSampleDate month short name

		TempDefaultMonthDisplayPeriod  is Alpha 100
    		Text Variables
				Year						value is DerivedSampleYear
				Month						value is DerivedNumericMonth
				PaddedMonth					value is DerivedPaddedMonth  		
				StartDateMM					value is DerivedSampleDateMonth
				StartDateDD                 value is DerivedSampleDateDay 
				StartDateYYYY    		    value is DerivedSampleDate year
				StartDateMonthName			value is DerivedSampleDate month name
				StartDateMonthAbbreviation	value is DerivedSampleDate month short name
				EndDateMM					value is DerivedSampleDateMonth
				EndDateDD            	    value is DerivedSampleDateDay 
				EndDateYYYY    		        value is DerivedSampleDate year
				EndDateMonthName			value is DerivedSampleDate month name
				EndDateMonthAbbreviation	value is DerivedSampleDate month short name
				
		TempDefaultWeekDisplayPeriod  is Alpha 100
    		Text Variables
				Year						value is DerivedSampleYear
				Week						value is DerivedNumericWeek
				PaddedWeek					value is DerivedPaddedWeek
				StartDateMM					value is DerivedSampleDateMonth
				StartDateDD                 value is DerivedSampleDateDay 
				StartDateYYYY    		    value is DerivedSampleDate year
				StartDateMonthName			value is DerivedSampleDate month name
				StartDateMonthAbbreviation	value is DerivedSampleDate month short name
				EndDateMM					value is DerivedSampleDateMonth
				EndDateDD            	    value is DerivedSampleDateDay 
				EndDateYYYY    		        value is DerivedSampleDate year
				EndDateMonthName			value is DerivedSampleDate month name
				EndDateMonthAbbreviation	value is DerivedSampleDate month short name	

		TempDefaultDayDisplayPeriod  is Alpha 100
    		Text Variables
				Year						value is DerivedSampleYear
				Day							value is DerivedNumericDay
				PaddedDay					value is DerivedPaddedDay
				DateMM						value is DerivedSampleDateMonth
				DateDD            	    	value is DerivedSampleDateDay 
				DateYYYY    		        value is DerivedSampleDate year   		
				MonthName					value is DerivedSampleDate month name
				MonthAbbreviation			value is DerivedSampleDate month short name
				DayName						value is DerivedSampleDate day name
				DayNameAbbreviation			value is DerivedSampleDate day name

		TempDefaultEndDateDisplayPeriod is Alpha up to 100
    		Text Variables
				Year						value is DerivedSampleYear
				DateMM						value is DerivedSampleDateMonth
				DateDD 						value is DerivedSampleDateDay
				DateYYYY					value is DerivedSampleDate year
				MonthName					value is DerivedSampleDate month name
				MonthAbbreviation			value is DerivedSampleDate month short name
																
	Derived Fields
		DerivedSampleYear is a DerivedField
			type is Numeric 4
			return 2017
		
		DerivedSampleDateString is a StringField
			type is Alpha 8
			DerivedSampleYear
			"0930"
				
		DerivedSampleDate is a DerivedField
			type is Date
			return DerivedSampleDateString

		DerivedSampleDateMonth is a DerivedField
			type is Alpha 2
			if (DerivedSampleDate month < 10)
				return "0" + DerivedSampleDate month
			else
				return DerivedSampleDate month
							
		DerivedSampleDateDay is a DerivedField
			type is Alpha 2
			if (DerivedSampleDate day < 10)
				return "0" + DerivedSampleDate day
			else
				return DerivedSampleDate day
							
		DerivedNumericQuarter is a DerivedField
			type is Numeric 1
			return 3
			
		DerivedNumericMonth is a DerivedField
			type is Numeric 2
			return 9
			
		DerivedNumericWeek is a DerivedField
			type is Numeric 2
			return 39
			
		DerivedNumericDay is a DerivedField
			type is Numeric 3
			return 273
			
		DerivedPaddedMonth is a DerivedField
			type is Alpha 2
			if (DerivedNumericMonth < 10)
				DerivedPaddedMonth	= "0" + DerivedNumericMonth
			else
				DerivedPaddedMonth 	= DerivedNumericMonth

		DerivedPaddedWeek is a DerivedField
			type is Alpha 2
			if (DerivedNumericWeek < 10)
				DerivedPaddedWeek	= "0" + DerivedNumericWeek
			else
				DerivedPaddedWeek   = DerivedNumericWeek

		DerivedPaddedDay is a DerivedField
			type is Alpha 3
			if (DerivedNumericDay < 10)
				DerivedPaddedDay = "00" + DerivedNumericDay
			else
			if (DerivedNumericDay < 100)
				DerivedPaddedDay = "0" + DerivedNumericDay
			else
				DerivedPaddedDay = DerivedNumericDay

     	SampleEndDateDisplayPeriod is a DerivedField
    		type is Alpha size 30
	    	TempDefaultEndDateDisplayPeriod = DefaultEndDateDisplayPeriod
	    	SampleEndDateDisplayPeriod 		= TempDefaultEndDateDisplayPeriod text
    			
    	SampleYearDisplayPeriod is a DerivedField
    		type is Alpha size 30
	    	TempDefaultYearDisplayPeriod 	= DefaultYearDisplayPeriod
	    	SampleYearDisplayPeriod  		= TempDefaultYearDisplayPeriod text

     	SampleQuarterDisplayPeriod is a DerivedField
    		type is Alpha size 30
	    	TempDefaultQuarterDisplayPeriod = DefaultQuarterDisplayPeriod
	    	SampleQuarterDisplayPeriod 		= TempDefaultQuarterDisplayPeriod text
    		
    	SampleMonthDisplayPeriod is a DerivedField
    		type is Alpha size 30
	    	TempDefaultMonthDisplayPeriod 	= DefaultMonthDisplayPeriod
	    	SampleMonthDisplayPeriod 		= TempDefaultMonthDisplayPeriod text
 
     	SampleWeekDisplayPeriod is a DerivedField
    		type is Alpha size 30
	  	  	TempDefaultWeekDisplayPeriod    = DefaultWeekDisplayPeriod
	    	SampleWeekDisplayPeriod 		= TempDefaultWeekDisplayPeriod text
	 
      	SampleDayDisplayPeriod is a DerivedField
    		type is Alpha size 30
	    	TempDefaultDayDisplayPeriod     = DefaultDayDisplayPeriod
	    	SampleDayDisplayPeriod  		= TempDefaultDayDisplayPeriod text
				
		GenerationLabel 	is a LabelField
			restricted
			"*DisplayPeriodGenerationInProcess*"

		DisplayPeriodLabel 	is a LabelField
			restricted
			"DisplayPeriod"
					
		DerivedDisplayPeriodLabel is a DerivedField
			type is Alpha 50
			if (GenerationInProcess)
				return GenerationLabel
			else
				return DisplayPeriodLabel

		TopNodeString	    is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_TOP_NODE"

		YTDTopNodeString	    is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_TOP_NODE_YTD"

		LTDTopNodeString	    is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_TOP_NODE_LTD"

		CBTopNodeString		is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_TOP_NODE_CB"

		YAGTopNodeString		is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_TOP_NODE_YAG"
		
		MAGTopNodeString		is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_TOP_NODE_MAG"

		QAGTopNodeString		is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_TOP_NODE_QAG"

		NewEndDateString is a DerivedField
			type is AlphaUpper 20
			restricted
			LocalAlphaYear = LocalDate year
			LocalAlphaDay  = LocalDate year day
			NewEndDateString = LocalAlphaYear
			if (LocalAlphaDay size = 1)
				NewEndDateString += "00"
			else
			if (LocalAlphaDay size = 2)
				NewEndDateString += "0"
			NewEndDateString += LocalAlphaDay 
									
		NewYearString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"			
			LocalYear
	
		DerivedYearKeyLike is a StringField
			type is AlphaUpper 20
			restricted
			LocalYearKey
			"*"
					
#ifdef module analytics






#endif						
			
		NewQuarterString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"		
			LocalYear
			"Q"	
			LocalQuarter
			
		NewMonthString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"	
			LocalYear
			"M"		
			LocalMonthAlpha				
		
		NewWeekString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"	
			LocalYear
			"W"		
			LocalWeekAlpha

		NewDayString is a StringField
			type is AlphaUpper 20
			restricted
			CalendarSequence
			"_"	
			LocalYear
			"D"		
			LocalDayAlpha
			
		DerivedBeginningBalanceString is a StringField
			type is AlphaUpper 20
			restricted
			LocalYear
			"000"
							
		DerivedBeginningBalanceDisplayPeriod is a StringField
			type is Alpha 30
			restricted
			LocalYear
			" Beginning Balance"
											
		StartDateJulian is a DerivedField
			type is AlphaUpper 7
			restricted
			return TopNodeRel.first ChildrenRel.GeneralLedgerCalendarPeriod.StartDateJulian

		EndDateJulian is a DerivedField
			type is AlphaUpper 7	
			restricted
			return (last GeneralLedgerPeriodShadow set.GeneralLedgerCalendarPeriod.EndDateJulian)				
		
		Description25 is a DerivedField
			type is Alpha 25
			restricted
			return Description
			
		Description21 is a DerivedField
			type is Alpha 21
			restricted
			return Description
			
		InProcessMessage is a MessageField
        	restricted
        	"Create_Calendar_YearInProcess"

		DerivedStatus is a DerivedField
        	type is Alpha 100
        	if (GenerationInProcess)
        		return InProcessMessage
						









	Conditions
		EligibleForYearCreation
			restricted
			when (!CalendarType.Other)
			
		EligibleForWeeksOption
			when (445OrVariant
			or    CalendarType.5253Week)
		
		ShowWeekTemplate
			when (CalendarType.Weeks
			or    CalendarType.Other
			or    EligibleForWeeksOption)
						
		NotWeeks
			restricted
			when (!CalendarType.Weeks)
			
		445OrVariant
			restricted
			when (CalendarType.445
			or    CalendarType.454
			or    CalendarType.544)

		PeriodDataExists
			restricted
			when (GeneralLedgerCalendarPeriodRel exists)

		ShowStartDate
			restricted
			when (!CalendarType.Weeks)

		TopNodeEntered
			restricted
			when (TopNode entered)
			
		YTDTopNodeEntered
			restricted
			when (YTDTopNode entered)

		LTDTopNodeEntered
			restricted
			when (LTDTopNode entered)
							
		CalendarExists
			restricted
			when (GeneralLedgerCalendar exists)
#ifdef module ad
		UsedForADBReportingBasis
			restricted
			when (ADBReportingBasisRel exists)
			
		ADBEnabledForAllDimensions
			restricted
			when (FinanceEnterpriseGroup.UseAverageDailyBalance
			and   ADBReportingBasisRel exists)
#endif
	Field Rules
		CalendarSequence
			autosequence using ByCalendarSequence

		CalendarType
			required
			
		WeeksMethod
			if (CalendarType.Weeks)
				default to WeeksMethod.ISO
				
		YearEndMonth
			if (CalendarType.5253Week)
				required
				
		YearEndLastDay
			if (CalendarType.5253Week)
				required
						
		YearEndLastDayMethod
			if (CalendarType.5253Week)
				required		
				
		TopNode
			TopNode 	= TopNodeString
		
		DaysHierarchy
			if (CalendarType.Days)
				default to DaysHierarchy.DaysWithinYear

		DefaultYearDisplayPeriod
			initial value is "{Year}"
			default to "{Year}"

		DefaultQuarterDisplayPeriod
			initial value is "{Year}Q{Quarter}"
			default to "{Year}Q{Quarter}"
			
		DefaultMonthDisplayPeriod
			initial value is "{Year}M{PaddedMonth}"
			default to "{Year}M{PaddedMonth}"
			
		DefaultWeekDisplayPeriod
			initial value is "{Year}W{PaddedWeek}"
			default to "{Year}W{PaddedWeek}"
			
		DefaultDayDisplayPeriod
			initial value is "{Year}D{PaddedDay}"
			default to "{Year}D{PaddedDay}"
		
		DefaultEndDateDisplayPeriod
			initial value is "{DateYYYY}{DateMM}{DateDD}"
			default to "{DateYYYY}{DateMM}{DateDD}"
																																								
	Relations
		TopNodeRel
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod = TopNode

		YTDTopNodeRel
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod = YTDTopNode

		LTDTopNodeRel
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup      = FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod = LTDTopNode

#ifdef module ad
		CBTopNodeRel
			one-to-one relation to DailyCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.DailyCalendarPeriod    = CBTopNode

		MAGTopNodeRel
			one-to-one relation to DailyCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.DailyCalendarPeriod    = MAGTopNode
				
		QAGTopNodeRel
			one-to-one relation to DailyCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.DailyCalendarPeriod    = QAGTopNode
				
		YAGTopNodeRel
			one-to-one relation to DailyCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.DailyCalendarPeriod    = YAGTopNode

		ADBReportingBasisRel
			one-to-many relation to ReportingBasis
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.GeneralLedgerCalendar     = GeneralLedgerCalendar
				and    related.AverageDailyBalanceStatus = related.AverageDailyBalanceStatus.Active)

#endif
		GeneralLedgerCloseConfigurationRel	is a GeneralLedgerCloseConfiguration set

		GeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.PeriodType.EndDate)

		PeriodsTopNodeRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = TopNode

		PeriodsYTDTopNodeRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = YTDTopNode

		PeriodsLTDTopNodeRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = LTDTopNode
										
		HierarchyTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = TopNode					

		HierarchyYTDTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = YTDTopNode

		HierarchyLTDTopNodeRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = LTDTopNode

		HierarchyYearTopNodeRel
			one-to-one relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod = TopNode
				related.SubordinatePeriod			= LocalYearKey
												
		EndDatesInCalendarRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = TopNode
			Instance Selection
				where (related.SubordinatePeriod.PeriodType.EndDate
				or     related.SubordinatePeriod.PeriodType.BeginningBalance)

		EndDateInPeriodRel
			one-to-one relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode				  		= TopNode
				related.SubordinatePeriod	   		= LocalPeriod
				related.GeneralLedgerCalendarPeriod = LocalSummaryPeriod
				
		EndDatesInYTDCalendarRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = YTDTopNode
			Instance Selection
				where (related.SubordinatePeriod.PeriodType.EndDate
				or     related.SubordinatePeriod.PeriodType.BeginningBalance)
				
		EndDatesInLTDCalendarRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode         	   = LTDTopNode
			Instance Selection
				where (related.SubordinatePeriod.PeriodType.EndDate
				or     related.SubordinatePeriod.PeriodType.BeginningBalance)
								
		PreviousEndDateRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod < DatePeriod)
		
		DatesWithinPeriodRangeRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod >= PeriodBegin
				and    related.GeneralLedgerCalendarPeriod <= PeriodEnd)
		
		SummaryPeriodsForYearRel
			one-to-many relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses SubordinatesByTopNode
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = TopNode
			Instance Selection
				where (related.SubordinatePeriod.Year 	     = LocalYear
				and    related.SubordinatePeriod.PeriodType  = LocalPeriodType)
		
		ShadowForLocalYearKeyRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriod
				related.FinanceEnterpriseGroup 			   = FinanceEnterpriseGroup
				related.GeneralLedgerCalendar  			   = GeneralLedgerCalendar
			Instance Selection
				where (related.SummaryGeneralLedgerCalendarPeriod like DerivedYearKeyLike
				and    related.GeneralLedgerCalendarPeriod.BegBalAndEndDate)																	
		
		DateWithinJulianRangeRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.TopNode				   = TopNode
				related.PeriodType			   = LocalPeriodType
			Instance Selection
				where (related.StartDateJulian <= LookupPeriod
				and    related.EndDateJulian   >= LookupPeriod)
		
		PeriodInHierarchyRel
			one-to-one relation to GeneralLedgerPeriodHierarchy
			Field Mapping uses ByParent
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod = LocalParentPeriod
				related.SubordinatePeriod			= LookupPeriod
		
		OtherCalendarsRel
			one-to-many relation to GeneralLedgerCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
			Instance Selection
				where (related.UniqueID			   != UniqueID)	
		
		CalendarContainsWeeksRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= TopNode
				related.PeriodType					= 4
		
		YearsInAllCalendarsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeAndType
				related.FinanceEnterpriseGroup  	= FinanceEnterpriseGroup
			Instance Selection
				where (related.YearNotYTDOrLTD)
																		
	Sets
		ByCalendarSequence
			Sort Order
				FinanceEnterpriseGroup
				CalendarSequence	
		
		ByTopNode
			Sort Order
				FinanceEnterpriseGroup
				TopNode
				
		ByYTDTopNode
			Instance Selection
				where (YTDTopNodeEntered)
			Sort Order
				FinanceEnterpriseGroup
				YTDTopNode

		ByLTDTopNode
			Instance Selection
				where (LTDTopNodeEntered)		
			Sort Order
				FinanceEnterpriseGroup
				LTDTopNode
													
	Action Exit Rules
		if (FinanceEnterpriseGroup.BODTrigger)
			if (!action type.Delete)
				if (action != "UpdateBODIdFields") 
					LocalActionCode = LocalActionCode.Update
					if (action type.Create)
						LocalActionCode = LocalActionCode.Create
					else
						if (action type.Delete)
							LocalActionCode = LocalActionCode.Delete
		
					increment bod id.VariationID
		
					trigger "GeneralLedgerCalendarService" PA service
						resume on error
						title is "EG:<FinanceEnterpriseGroup>"
						Criteria
							FinanceEnterpriseGroup
						Variables
							LocalActionCode
								variable name is ActionCode
							include persistent fields from FinanceEnterpriseGroup
							include persistent fields from GeneralLedgerCalendar
							LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
								variable name is CurrentTimeStamp

	Rule Blocks
 		DeleteRules
			if (FinanceEnterpriseGroup.BODTrigger)
				LocalActionCode = LocalActionCode.Delete
	
				increment bod id.VariationID
	
				trigger "GeneralLedgerCalendarService" PA service
					resume on error
					title is "EG:<FinanceEnterpriseGroup>"
					Criteria
						FinanceEnterpriseGroup
					Variables
						LocalActionCode
							variable name is ActionCode
						include persistent fields from FinanceEnterpriseGroup
						include persistent fields from GeneralLedgerCalendar
						LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
							variable name is CurrentTimeStamp

	Actions				
		T2VCreate is a Create Action
			restricted
			default label is untranslatable
			bypass field rules
		
		Create is an Action
			Action Rules		
						
			Exit Rules
				
				invoke CreateTopNode GeneralLedgerCalendarPeriod
					invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
					invoked.GeneralLedgerCalendarPeriod = TopNodeString
					invoked.DisplayPeriod				= (Description25 + " Node")
			
				if (!CalendarType.Other
				and !CalendarType.Days) 
					invoke CreateTopNode GeneralLedgerCalendarPeriod
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.GeneralLedgerCalendarPeriod = YTDTopNodeString
						invoked.DisplayPeriod				= (Description21 + " YTD Node")
	
					invoke CreateTopNode GeneralLedgerCalendarPeriod
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.GeneralLedgerCalendarPeriod = LTDTopNodeString
						invoked.DisplayPeriod				= (Description21 + " LTD Node")

					YTDTopNode  = YTDTopNodeString
					LTDTopNode  = LTDTopNodeString	
												
		Update is an Action
			Action Rules
			Exit Rules
					
				if (!CalendarType.Other
				and !CalendarType.Days) 
					if (!YTDTopNode entered)
						invoke CreateTopNode GeneralLedgerCalendarPeriod
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.GeneralLedgerCalendarPeriod = YTDTopNodeString
							invoked.DisplayPeriod				= (Description21 + " YTD Node")
						YTDTopNode = YTDTopNodeString
	
					if (!LTDTopNode entered)
						invoke CreateTopNode GeneralLedgerCalendarPeriod
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
							invoked.GeneralLedgerCalendarPeriod = LTDTopNodeString
							invoked.DisplayPeriod				= (Description21 + " LTD Node")	
						LTDTopNode = LTDTopNodeString
							
		Delete is an Action
			confirmation required
				"CalendarWillBeDeleted"
	
			Entrance Rules
				if (OtherCalendarsRel exists)
					LocalOtherCalendarsExist = true
					
				InvokedByCalendar = true
				for each EndDatesInCalendarRel
					invoke RemovePeriodFromHierarchy each.GeneralLedgerCalendarPeriod
				if (YTDTopNode entered)
					for each EndDatesInYTDCalendarRel
						invoke RemovePeriodFromHierarchy each.GeneralLedgerCalendarPeriod	
				if (LTDTopNode entered)
					for each EndDatesInLTDCalendarRel
						invoke RemovePeriodFromHierarchy each.GeneralLedgerCalendarPeriod										
				if (TopNode entered)
					invoke Delete HierarchyTopNodeRel
				if (YTDTopNode entered)
					invoke Delete HierarchyYTDTopNodeRel
				if (LTDTopNode entered)
					invoke Delete HierarchyLTDTopNodeRel
				if (TopNode entered)
					invoke Delete PeriodsTopNodeRel	
				if (YTDTopNode entered)
					invoke Delete PeriodsYTDTopNodeRel
				if (LTDTopNode entered)
					invoke Delete PeriodsLTDTopNodeRel					
				include DeleteRules
			Exit Rules
				if (!LocalOtherCalendarsExist)
					invoke DeleteEndDateCalendarPeriods GeneralLedgerCalendarPeriod in background
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
											
		CreateShortYear is an Instance Action
			valid when (EligibleForYearCreation)
			
			confirmation required
				"CreatingAnExistingYearWillDestroyAndRecreateIt"					

			Parameters
				Year					is Year
				StartDate				is Date	
				EndDate					is Date

			Parameter Rules
				StartDate
					required

					TempYear       = StartDate year
					TempYearPlus1  = (TempYear + 1)

					
					constraint (Year >= TempYear
					and			Year <= TempYearPlus1) 
						"StartDateOutOfRangeForYear"
								
				EndDate
					required

					constraint (EndDate <= (StartDate + 364))
						"InvalidEndDate"
												
			Action Rules
			
				invoke CreateCalendarYear
					invoked.Year 			= Year
					invoked.StartDate 		= StartDate
					invoked.EndDate 		= EndDate
					invoked.CreateShortYear = true
					
		CreateCalendarYear is an Instance Action
			valid when (EligibleForYearCreation)
		


				
			Parameters
				Year					is Year
				StartDate				is Date	
				EndDate					is Date 
				CreateShortYear			is Boolean				
				RecreatingFollowingYear	is Boolean
				CloseConfiguration		is a GeneralLedgerCloseConfiguration
				CreateWeekPeriods		is Boolean
				InvokedByFEGWizard		is Boolean




			Parameter Rules
				Year
					required
					LocalYear    = (Year + 1)
					LocalNextYearKey = NewYearString
					LocalYear    = Year
					LocalYearKey = NewYearString


			
				StartDate
					if (!CreateShortYear)
						if (CalendarType.Weeks)
							cannot be entered
						else
							required						
	
							TempYear       = StartDate year
							TempYearPlus1  = (TempYear + 1)

							
							constraint (Year >= TempYear
							and			Year <= TempYearPlus1) 
								"StartDateOutOfRangeForYear"
								
							if (StartDate month = 1
							and StartDate day = 1)
								constraint (Year = TempYear)
									"YearMustMatchYearOfDate"							
							
							if (CalendarType.5253Week)
								StartDateMonth = StartDate month
								if (StartDateMonth = 1
								and YearEndMonth   = 12)
									StartDateMonth = 13  
								constraint (StartDateMonth = YearEndMonth
								or          StartDateMonth = (YearEndMonth + 1))
									"StartDateInvalidForSpecifiedYearEndMonthOf<YearEndMonth>"
							
				EndDate
					if (!CreateShortYear)
						constraint (445OrVariant
						or			CalendarType.Days)
							"EndDateCannotBeSpecifiedForThisCalendarType"
							
						constraint (EndDate >= (StartDate + 358)
						and         EndDate <= (StartDate + 373))
							"InvalidEndDate"
					else
						constraint (EndDate <= (StartDate + 364))
							"InvalidEndDate"
												
					if (CalendarType.Days
					or  CreateShortYear)
						required
				
			Action Rules
				if(!RecreatingFollowingYear)
					if (LocalYearKey exists)
						confirmation required
							"CreatingAnExistingYearWillDestroyAndRecreateItAndSubsequentYears._AlsoBeSureToUpdateTheAppropriate_Close_ConfigurationsAccordinglyAfterUpdatingCalendars."
					else
					if (LocalNextYearKey exists)
						confirmation required
							"CreatingAYearWillDestroyAndRecreateTheSubsequentYears._AlsoBeSureToUpdateTheAppropriate_Close_ConfigurationsAccordinglyAfterUpdatingCalendars."
					else
						if (!InvokedByFEGWizard)
							confirmation required
								"BeSureToUpdateTheAppropriate_Close_ConfigurationsAccordinglyAfterUpdatingCalendars"										
				
				CreatingWeeksWithinMonths = CreateWeekPeriods
				SkipShadow 				  = true
				SkipPeriod  			  = false
				PeriodCount 			  = 0
							
				if (!CalendarType.Other
				and !CalendarType.Days) 
					if (!YTDTopNode entered)
						LookupPeriod = YTDTopNodeString
						if (!LookupPeriod exists)
							invoke CreateTopNode GeneralLedgerCalendarPeriod
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
								invoked.GeneralLedgerCalendarPeriod = YTDTopNodeString
								invoked.DisplayPeriod				= ("YTD Top Node for " + GeneralLedgerCalendar)
					
						YTDTopNode = YTDTopNodeString
	
					if (!LTDTopNode entered)
						LookupPeriod = LTDTopNodeString
						if (!LookupPeriod exists)
							invoke CreateTopNode GeneralLedgerCalendarPeriod
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
								invoked.GeneralLedgerCalendarPeriod = LTDTopNodeString
								invoked.DisplayPeriod				= ("LTD Top Node for " + GeneralLedgerCalendar)
					
						LTDTopNode = LTDTopNodeString
				
				InvokedByCalendar = true
																											
				if (!LocalYearKey exists)
					invoke Create GeneralLedgerCalendarPeriod
						invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.CreatePeriodType 	   = 1
						invoked.Year 			 	   = Year
				else
					invoke Update HierarchyYearTopNodeRel
						invoked.Weight = 1
					
					for each ShadowForLocalYearKeyRel
						invoke RemovePeriodFromHierarchy each.GeneralLedgerCalendarPeriod
					
					LocalPeriodType = 8 
					for each SummaryPeriodsForYearRel
						invoke Delete each.SubordinatePeriod						
					LocalPeriodType = 4 
					for each SummaryPeriodsForYearRel
						invoke Delete each.SubordinatePeriod
					LocalPeriodType = 3 
					for each SummaryPeriodsForYearRel
						invoke Delete each.SubordinatePeriod				
					invoke Delete LocalYearKey.ChildrenRel
					if (!CalendarType.Other
					and !CalendarType.Days) 
						LookupPeriod = LocalYearKey + "_YTD"
						if (LookupPeriod exists)
							invoke Delete LookupPeriod
						invoke CreateYTDYear GeneralLedgerCalendarPeriod
							fill in fields from LocalYearKey
							invoked.GeneralLedgerCalendarPeriod = LookupPeriod
							invoked.DisplayPeriod				= (LocalYearKey.DisplayPeriod + "_YTD")										
						LookupPeriod = LocalYearKey + "_LTD"
						if (LookupPeriod exists)
							invoke Delete LookupPeriod
						invoke CreateLTDYear GeneralLedgerCalendarPeriod
							fill in fields from LocalYearKey
							invoked.GeneralLedgerCalendarPeriod = LookupPeriod
							invoked.DisplayPeriod				= (LocalYearKey.DisplayPeriod + "_LTD")	
								
				LookupPeriod = DerivedBeginningBalanceString
				if (!LookupPeriod exists)
					invoke CreateBeginningBalanceKey GeneralLedgerCalendarPeriod
						invoked.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
						invoked.GeneralLedgerCalendarPeriod = LookupPeriod
						invoked.Year 			 	   		= Year
						invoked.DisplayPeriod				= DerivedBeginningBalanceDisplayPeriod
				







				if (CalendarType.Days)
					MaxPeriods = ((EndDate - StartDate) + 1)
				else				
				if (CalendarType.Weeks)
					MaxPeriods = 53
				else
				if (CalendarType.Months)
					MaxPeriods = 12
				else

				if (CalendarType.445)



					MaxPeriods = 12
					while (WeekCount < MaxPeriods)
						WeekCount +=1
						if (WeekCount = 3
						or  WeekCount = 6
						or  WeekCount = 9
						or  WeekCount = 12)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27
				else
				if (CalendarType.454)



					MaxPeriods = 12
					while (WeekCount < MaxPeriods)
						WeekCount +=1
						if (WeekCount = 2
						or  WeekCount = 5
						or  WeekCount = 8
						or  WeekCount = 11)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27					
				else
				if (CalendarType.544)



					MaxPeriods = 12
					while (WeekCount < MaxPeriods)
						WeekCount +=1					
						if (WeekCount = 1
						or  WeekCount = 4
						or  WeekCount = 7
						or  WeekCount = 10)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27					
				else
				if (CalendarType.5253Week)
					MaxPeriods     = 12
					YearMonthEnd   = (StartDate + 365)
					StartDateMonth = StartDate month
					TempMonth      = YearMonthEnd month	
					if (StartDateMonth = YearEndMonth)
						while (TempMonth = YearEndMonth)					
							YearMonthEnd += 1
						    TempMonth    = YearMonthEnd month							
						YearMonthEnd -= 1					
					else
						while (TempMonth != YearEndMonth)
							YearMonthEnd -= 1
						    TempMonth    = YearMonthEnd month								

					LastDateBefore		= YearMonthEnd
					TempDay			    = LastDateBefore week day
					while (TempDay != YearEndLastDay)
						LastDateBefore -= 1
						TempDay			= LastDateBefore week day
					
					LastDateAfter		= YearMonthEnd
					TempDay			    = LastDateAfter week day
					while (TempDay != YearEndLastDay)
						LastDateAfter  += 1
						TempDay			= LastDateAfter week day						
							
					DiffBeforeYearEnd = (YearMonthEnd - LastDateBefore)
					DiffAfterYearEnd  = (LastDateAfter - YearMonthEnd)		
								
					if (DiffBeforeYearEnd > DiffAfterYearEnd) 
						NearestEndDate	= LastDateAfter
					else
						NearestEndDate  = LastDateBefore
						
					if (YearEndLastDayMethod.WithinYearEndMonth)
						YearEndDate		= LastDateBefore
					else
						YearEndDate		= NearestEndDate																										 

					while (WeekCount < MaxPeriods)
						WeekCount +=1
						if (WeekCount = 3
						or  WeekCount = 6
						or  WeekCount = 9
						or  WeekCount = 12)
							WeekArray.DayCount[WeekCount] = 34
						else
							WeekArray.DayCount[WeekCount] = 27
				else
				if (CalendarType.4WeekPeriods)
					MaxPeriods = 13
					while (WeekCount < MaxPeriods)
						WeekCount +=1					
						WeekArray.DayCount[WeekCount] = 27						
					
				if (CalendarType.Months)
					FromDate = (StartDate - StartDate day + 1)
				else
				if (CalendarType.Weeks)
					FromDate = "20120101"
					YearDiff = (Year - FromDate year)
					FromDate += YearDiff as years
					if (WeeksMethod.ISO)
						while (FromDate week day != 5)
							FromDate += 1
						while (FromDate week day != 2)
							FromDate -= 1
					StartDate = FromDate						  
				else
					FromDate = StartDate
				
				LocalDate	 = StartDate
				PeriodBegin  = NewEndDateString
				WeekCount	 = 0
				
				if (!RecreatingFollowingYear)
					SaveStartDate = FromDate					
					




				if (CalendarType.Months
				or  CalendarType.445
				or  CalendarType.454
				or  CalendarType.544
				or  CalendarType.5253Week)
					if (!CreateShortYear)
						invoke CreatePeriodWithin LocalYearKey
							invoked.NewPeriodType		= 2
							invoked.CreateAll			= true
				else
				if (CalendarType.Days)
					if (!CreateShortYear)				
						if (DaysHierarchy.DaysWithinMonth) 
							invoke CreatePeriodWithin LocalYearKey
								invoked.NewPeriodType		= 3
								invoked.CreateAll			= true						
						else
						if (DaysHierarchy.DaysWithinWeek) 
							invoke CreatePeriodWithin LocalYearKey
								invoked.NewPeriodType		= 4
								invoked.CreateAll			= true
						else 
							invoke CreatePeriodWithin LocalYearKey				
								invoked.NewPeriodType		= 8
								invoked.NumberOfDays		= MaxPeriods						
								invoked.CreateAll			= true
					ToDate = StartDate
																
				while (PeriodCount < MaxPeriods)
					
					PeriodCount += 1
					
					if (CalendarType.Months
					or  CalendarType.445
					or  CalendarType.454
					or  CalendarType.544
					or  CalendarType.5253Week)
						if (PeriodCount < 4)
							LocalQuarter = 1
						else
						if (PeriodCount < 7)
							LocalQuarter = 2
						else
						if (PeriodCount < 10)
							LocalQuarter = 3
						else
							LocalQuarter = 4
						if (PeriodCount < 10)
							LocalMonthAlpha = ("0" + PeriodCount)
						else
							LocalMonthAlpha 	 = PeriodCount
						LocalCreateWithinKey 	 = NewMonthString
					else
					if (CalendarType.Weeks)
						if (PeriodCount < 10)
							LocalWeekAlpha = ("0" + PeriodCount)
						else
							LocalWeekAlpha 		 = PeriodCount
						LocalCreateWithinKey 	 = NewWeekString
					else
					if (CalendarType.Days)
						ToDate = FromDate					
						if (DaysHierarchy.DaysWithinMonth)
							if (ToDate month != SaveMonth)
								SaveMonth	  = ToDate month
								CurrentMonth += 1
							if (CurrentMonth < 10)
								LocalMonthAlpha = ("0" + CurrentMonth)
							else
								LocalMonthAlpha 	 = CurrentMonth
							LocalCreateWithinKey 	 = NewMonthString
							invoke CreatePeriodWithin LocalCreateWithinKey	
								invoked.NewPeriodType	= 8
								invoked.NewDay			= PeriodCount
						else
						if (DaysHierarchy.DaysWithinWeek)
							if (ToDate week != SaveWeek)
								SaveWeek	 = ToDate week
								CurrentWeek += 1
							if (CurrentWeek < 10)
								LocalWeekAlpha = ("0" + CurrentWeek)
							else
								LocalWeekAlpha 	 	= CurrentWeek
							LocalCreateWithinKey 	= NewWeekString
							if (CurrentWeek = 53)
								if (!LocalCreateWithinKey exists)
									invoke CreatePeriodWithin LocalYearKey
										invoked.NewPeriodType = 4
										invoked.NewWeek		  = 53
							invoke CreatePeriodWithin LocalCreateWithinKey				
								invoked.NewPeriodType	= 8
								invoked.NewDay			= PeriodCount																									
						if (PeriodCount < 10)
							LocalDayAlpha = ("00" + PeriodCount)
						else					
						if (PeriodCount < 100)
							LocalDayAlpha = ("0" + PeriodCount)
						else
							LocalDayAlpha 		 = PeriodCount
						LocalCreateWithinKey 	 = NewDayString
					else					
					if (!CalendarType.Other)
						if (PeriodCount < 10)
							LocalMonthAlpha = ("0" + PeriodCount)
						else
							LocalMonthAlpha 	 = PeriodCount
						LocalCreateWithinKey 	 = NewMonthString
					else
						LocalCreateWithinKey	 = NewYearString
						
					if (CalendarType.Weeks)
						if (PeriodCount = 1)
							if (WeeksMethod.ISO
							or  WeeksMethod.Excel2)
								ToDate = FromDate

								while (ToDate week day != 1)
									ToDate += 1
						    else
						    if (WeeksMethod.Excel1)
						    	ToDate = FromDate

								while (ToDate week day != 7)
									ToDate += 1
							else

								ToDate = (FromDate + 6)
						else
							ToDate = (FromDate + 6)
						if (ToDate year > Year)
							if (WeeksMethod.ISO)
								if (ToDate day > 3)



									while (ToDate week day != 1
									or     ToDate year != Year)
										ToDate -= 1
									if (ToDate < FromDate)
										SkipPeriod = true	
							else
								ToDate = "20121231"
								ToDate += YearDiff as years
							if (SkipPeriod)
								PeriodCount  = 53

						if (!SkipPeriod)
							invoke CreatePeriodWithin LocalYearKey
								invoked.NewPeriodType = 4
								invoked.NewWeek   	  = PeriodCount
					else
					if (CalendarType.Months)
						ToDate = (FromDate + FromDate days in month - 1)
						if (EndDate entered)
							if (ToDate > EndDate)
								ToDate = EndDate
							if (FromDate > EndDate)
								SkipPeriod = true
								MaxPeriods = PeriodCount						

						if (!SkipPeriod)
							if (!CreateShortYear) 
								LocalQuarterKey	= NewQuarterString
								invoke CreatePeriodWithin LocalQuarterKey
									invoked.NewPeriodType = 3
									invoked.NewMonth   	  = PeriodCount
							else
								invoke CreatePeriodWithin LocalYearKey
									invoked.NewPeriodType = 3
									invoked.NewMonth   	  = PeriodCount														


					if (EndDate entered)
						if (ToDate > EndDate)
							ToDate = EndDate
						if (FromDate > EndDate)
							SkipPeriod = true
							MaxPeriods = PeriodCount
													
					if (CalendarType.445
					or  CalendarType.454
					or  CalendarType.544
					or  CalendarType.5253Week
					or  CalendarType.4WeekPeriods)
						ToDate = (FromDate + WeekArray.DayCount[PeriodCount])
						if (PeriodCount = MaxPeriods)
							if (CalendarType.5253Week)
								ToDate = YearEndDate
							else
							if (445OrVariant)
								if (EndDate > ToDate)
									ToDate = EndDate
						if ((CalendarType.445
						or  CalendarType.454
						or  CalendarType.544
						or  CalendarType.5253Week)
						and !CreateShortYear) 

							LocalQuarterKey	= NewQuarterString
							invoke CreatePeriodWithin LocalQuarterKey
								invoked.NewPeriodType = 3
								invoked.NewMonth   	  = PeriodCount
						else

						if (!SkipPeriod)							
							invoke CreatePeriodWithin LocalYearKey
								invoked.NewPeriodType = 3
								invoked.NewMonth   	  = PeriodCount
						
					if (CalendarType.5253Week)
						if (ToDate > YearEndDate)
							ToDate = YearEndDate
						if (FromDate > YearEndDate)
							SkipPeriod = true
							
					if (!SkipPeriod)
						if ((445OrVariant
						or   CalendarType.5253Week)
						and  CreateWeekPeriods)
							WeekDate 			= (FromDate + 6)
							SaveCreateWithinKey	= LocalCreateWithinKey
							while (WeekDate <= ToDate)
								WeekCount += 1

								invoke CreatePeriodWithin LocalCreateWithinKey
									invoked.NewPeriodType = 4
									invoked.NewWeek   	  = WeekCount
								if (WeekCount < 10)
									LocalWeekAlpha = ("0" + WeekCount)
								else
									LocalWeekAlpha 		 = WeekCount
								LocalCreateWithinKey 	 = NewWeekString
								LocalDate	 			 = WeekDate
								LookupPeriod 			 = NewEndDateString

								invoke CreatePeriodWithin LocalCreateWithinKey
									if (!LookupPeriod exists)
										NewDateCount			+= 1
										LocalPeriodArray.EndDateJulian[NewDateCount] = LookupPeriod
										invoked.NewPeriodType	= 5							
										invoked.NewEndDate		= WeekDate
									else
										invoked.ExistingEndDateBegin = LookupPeriod
								LocalSummaryPeriod = LocalCreateWithinKey									
								PeriodEnd 	 	   = LookupPeriod	
								for each DatesWithinPeriodRangeRel
									LocalPeriod = each.GeneralLedgerCalendarPeriod
									if (!EndDateInPeriodRel exists)
										invoke CreatePeriodWithin LocalCreateWithinKey
											invoked.ExistingEndDateBegin = LocalPeriod
								LocalDate			 = WeekDate + 1
								PeriodBegin 		 = NewEndDateString
								WeekDate   			 += 7								
								LocalCreateWithinKey = SaveCreateWithinKey
						else					
							LocalDate	 = ToDate
							LookupPeriod = NewEndDateString
							invoke CreatePeriodWithin LocalCreateWithinKey
								if (!LookupPeriod exists)
									NewDateCount += 1
									LocalPeriodArray.EndDateJulian[NewDateCount] = LookupPeriod
									invoked.NewPeriodType		= 5							
									invoked.NewEndDate			= ToDate
								else
									invoked.ExistingEndDateBegin = LookupPeriod
																		
							PeriodEnd 	 = LookupPeriod								
							if (CloseConfiguration entered)
								invoke Create GeneralLedgerClosePeriod
									invoked.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
									invoked.GeneralLedgerCloseConfiguration = CloseConfiguration
									invoked.GeneralLedgerCloseYear 			= Year
									invoked.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod = LookupPeriod								
							LocalSummaryPeriod = LocalCreateWithinKey
							for each DatesWithinPeriodRangeRel
								LocalPeriod = each.GeneralLedgerCalendarPeriod
								if (!EndDateInPeriodRel exists)
									invoke CreatePeriodWithin LocalCreateWithinKey
										invoked.ExistingEndDateBegin = LocalPeriod


					FromDate 	= (ToDate + 1)
					LocalDate	= FromDate
					PeriodBegin = NewEndDateString									

			Exit Rules
				
				if ((!CalendarType.Days)
				and (!CalendarType.Other))
					if (!CreateShortYear)
						LocalYear    = (Year + 1)
						LocalYearKey = NewYearString				
				 		if (LocalYearKey.ParentRel exists)

				 			PeriodCount = 0
				 			SkipPeriod  = false
				 			commit transaction
							invoke CreateCalendarYear
								invoked.RecreatingFollowingYear = true						
								invoked.Year					= LocalYear
								if (!CalendarType.Weeks)
									invoked.StartDate			= FromDate
								invoked.CreateWeekPeriods		= CreateWeekPeriods
								if (445OrVariant
								or	CalendarType.Days)
									invoked.EndDate				= LocalYearKey.DerivedEndDate
				 		else
							SkipShadow = false
							if(!InvokedByFEGWizard)
								invoke UpdateGenerationStatus
									invoked.PrmGenerationInProcess = true
								commit transaction
								invoke BuildShadowFile in background
									assign async background group id to BackgroundGroupAsyncId
									if (NewDateCount > 0)
										invoked.BuildXref = true
			 		else
						SkipShadow = false
						if(!InvokedByFEGWizard)
							invoke UpdateGenerationStatus
								invoked.PrmGenerationInProcess = true
							commit transaction
							invoke BuildShadowFile in background
								assign async background group id to BackgroundGroupAsyncId
								if (NewDateCount > 0)
									invoked.BuildXref = true









				else
					SkipShadow = false
					if(!InvokedByFEGWizard)
						invoke UpdateGenerationStatus
							invoked.PrmGenerationInProcess = true
						commit transaction
						invoke BuildShadowFile in background
							assign async background group id to BackgroundGroupAsyncId
							if (NewDateCount > 0)
								invoked.BuildXref = true

				if (NewDateCount > 0)
					for each OtherCalendarsRel
						invoke PropagateNewDates each.GeneralLedgerCalendar
							invoked.PrmPeriodArray			  = LocalPeriodArray

#ifdef module ad
				if (FinanceEnterpriseGroup.UseAverageDailyBalance
				and UsedForADBReportingBasis
				and !InvokedByFEGWizard)
					invoke BuildDailyPeriod GeneralLedgerCalendarPeriod
						run after action background group BackgroundGroupAsyncId
						invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.PrmCalendar               = GeneralLedgerCalendar
						invoked.PrmYear                   = Year
						invoked.PrmEndYear				  = Year
						invoked.PrmCreateBeginningBalance = true
						invoked.PrmCreateDailyPeriods	  = true		
#endif
#ifdef module analytics

















#endif
										
		RebuildDisplayPeriods is an Instance Action
			confirmation required
				"All_Display_PeriodValuesWillBeRebuiltForThisCalendar"
			completion message is "Rebuild_Display_PeriodsSubmitted"
			Action Rules
				invoke UpdateGenerationStatus
					invoked.PrmGenerationInProcess = true
				invoke PersistJulianRange GeneralLedgerCalendarPeriod
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmCalendar				  = GeneralLedgerCalendar				
			
		BuildShadowFile is an Instance Action
			restricted
			run in background
			
			Parameters
				BuildXref			is Boolean
				
			Local Fields
			
				LoopCount			is Numeric 2
				TempAlpha			is Alpha 5
				TempAlpha2			is Alpha 1
				I1					is Numeric 2
				LocalDeleteShadowsAsyncID			is an AsyncActionRequest
				LocalBuildShadowFileAsyncID		is an AsyncActionRequest
			Action Rules
				invoke DeleteShadows GeneralLedgerPeriodShadow
					assign async action request id to LocalDeleteShadowsAsyncID
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmGeneralLedgerCalendar	= GeneralLedgerCalendar
				invoke BuildShadowFile GeneralLedgerPeriodHierarchy
					assign async action request id to LocalBuildShadowFileAsyncID
					run after LocalDeleteShadowsAsyncID
					invoked.PrmFinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.PrmGeneralLedgerCalendar 	= GeneralLedgerCalendar
			Exit Rules			
				invoke PersistJulianRange GeneralLedgerCalendarPeriod
					run after LocalBuildShadowFileAsyncID
					assign async action request id to LocalAsyncID
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmCalendar				  = GeneralLedgerCalendar
					if (BuildXref)
						invoked.PrmKeepInProcess	= true
				if (BuildXref)
					invoke RebuildPeriodCrossReference in background
						run after LocalAsyncID
						
		PropagateNewDates is an Instance Action
			restricted
			run in background
			
			Parameters
				PrmPeriodArray			  is a GeneralLedgerCalendarPeriodArray
					
			Local Fields
				I1						  is Numeric 3
				DatesAdded				  is Boolean
							
			Action Rules
			
				SkipShadow = true
				I1		   = 1
				
				while (I1 < 367)
					if (PrmPeriodArray.EndDateJulian[I1] = blank)
						I1 = 367
						end while 
						
					LookupPeriod 		= PrmPeriodArray.EndDateJulian[I1]
					if (CalendarType.Weeks)
						LocalPeriodType = 4 
					else
					if (CalendarType.Days)
						LocalPeriodType = 8
					else
					if (CalendarContainsWeeksRel exists)
						LocalPeriodType = 4
					else
						LocalPeriodType = 3
												
					if (DateWithinJulianRangeRel exists)
						LocalParentPeriod = first DateWithinJulianRangeRel.GeneralLedgerCalendarPeriod
						if (!PeriodInHierarchyRel exists)
							DatesAdded = true
							invoke CreatePeriodWithin LocalParentPeriod
								invoked.ExistingEndDateBegin = LookupPeriod			
					I1 += 1
						
				if (DatesAdded)
					SkipShadow = false
					invoke BuildShadowFile

		UpdateGenerationStatus is an Instance Action
			restricted
			Parameters
				PrmGenerationInProcess 	is Boolean
					default label is "GenerationInProcess" 
			Action Rules
				GenerationInProcess		= PrmGenerationInProcess

		RebuildPeriodCrossReference is an Instance Action
			run in background
			completion message is "RebuildActionSubmitted"
			
			Action Rules
				invoke DeleteAll GeneralLedgerCalendarPeriodXref
					assign async action request id to LocalAsyncID
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
				invoke BuildCrossReference in background
					run after LocalAsyncID
									
		BuildCrossReference is an Instance Action
			restricted
			run in background
			
			Local Fields
				LocalCounter					is Numeric 3
				LocalStartDate					is Date
				LocalEndDate					is Date
				LocalDateAlpha					is Alpha 8
				LocalDays						is Numeric 3
				LocalStartDateJulian			is Alpha 7
				LocalEndDateJulian				is Alpha 7
				GeneralLedgerCalendarPeriodXref

			Action Rules

				for each YearsInAllCalendarsRel
					if (!LocalStartDateJulian entered)
						LocalStartDateJulian 	= each.StartDateJulian
					else
						if (each.StartDateJulian entered
						and each.StartDateJulian < LocalStartDateJulian)
							LocalStartDateJulian = each.StartDateJulian
					if (each.EndDateJulian > LocalEndDateJulian)
						LocalEndDateJulian 		= each.EndDateJulian							

				LocalDateAlpha					= LocalStartDateJulian[1:4] + "0101"
				LocalDays						= LocalStartDateJulian[5:7]
				LocalStartDate					= LocalDateAlpha
				LocalStartDate					+= (LocalDays - 1)
				
				LocalDateAlpha					= LocalEndDateJulian[1:4] + "0101"
				LocalDays						= LocalEndDateJulian[5:7]
				LocalEndDate					= LocalDateAlpha
				LocalEndDate					+= (LocalDays - 1)								

				if (LocalStartDateJulian entered
				and LocalEndDateJulian entered)	
					while (LocalStartDate <= LocalEndDate)
						GeneralLedgerCalendarPeriodXref = LocalStartDate
						invoke Update GeneralLedgerCalendarPeriodXref
						LocalStartDate += 1
						LocalCounter   += 1
						if (LocalCounter > 100)
							commit transaction
							initialize LocalCounter
#ifdef module ad
				if (!(FinanceEnterpriseGroup.UseAverageDailyBalance
				and UsedForADBReportingBasis)
				and GenerationInProcess)
					invoke UpdateGenerationStatus
						invoked.PrmGenerationInProcess = false
#endif
#ifndef module ad
				if(GenerationInProcess)
					invoke UpdateGenerationStatus
						invoked.PrmGenerationInProcess = false
#endif

#ifdef module ad
		RebuildADBStructure is an Instance Action
			default label is "RebuildADBCalendarStructure"
			valid when (ADBEnabledForAllDimensions)
			run in background
			completion message is "RebuildActionSubmitted"
			Parameters
				Year			is a GeneralLedgerCalendarYear
			Parameter Rules
				Year
					required
			Action Rules
				invoke PurgeDayPeriodType DailyCalendarPeriod
					assign async action request id to LocalAsyncID
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmCalendarTopNode			= TopNode
					invoked.PrmYear						= Year
				
				invoke BuildDailyPeriod GeneralLedgerCalendarPeriod
					run after LocalAsyncID
					assign async action request id to LocalAsyncID
					invoked.PrmFinanceEnterpriseGroup = FinanceEnterpriseGroup
					invoked.PrmCalendar               = GeneralLedgerCalendar
					invoked.PrmYear                   = Year
					invoked.PrmEndYear				  = Year
					invoked.PrmCreateTopNodes		  = false
					invoked.PrmCreateBeginningBalance = false
					invoked.PrmCreateDailyPeriods	  = true
#endif
					























			
