AssetTransaction is a BusinessClass
	owned by am
	prefix is AMT
	classic name is AMTRANS

	Ontology
		symbolic key is AssetTransaction
			classic set name is AMTSET0
			classic name is SEQ-NUMBER

	Patterns
		implements StaticJava
		disable AuditIndex
		implements BODId
		implements AnalyticCube
			disable continuous update
			dynamically calculate totals

	Persistent Fields
		TransactionStatus
		AssetLease						is like AssetLease
		AssetGroup
		AssetProcess
		TransactionDate					is Date
			classic name is TRANS-DATE
		PostingDate						is Date
		ProcessDate						is Date
		Reference
		Description
		AssetAccountGroup				is like AssetAccountGroup
			classic name is ACCT-GRP
		AssetType
			classic name for AssetType.Type is ASSET-TYPE
		AssetAccountType
			classic name is ACCT-TYPE
		AssetTransactionAmount			is a CurrencyExchangeDateGroup
		TransactionNumberOfDecimals     is a CurrencyNumberOfDecimals
			classic name is TRAN-ND
		TransactionAmount               is an InternationalAmount
			classic name is TRANS-AMOUNT
			precision is TransientBookCurrency.NumberOfDecimals
		ProcessAsset                    is an Asset
		ProcessSequence                 is a Sequence
			classic name is PROCESS-SEQ
		JournalEntryTransactionObjectID is an ObjId
			sql name is JEntryTransactionObjectID
			classic name is GLT-OBJ-ID
		CreationDate                    is TimeStamp
		CreatedBy                       is an Operator 
			holds pii
			classic name is CREATOR-ID
		DistributionAccount             is a FinanceCodeBlock
			classic name for DistributionAccount.AccountingUnit is ACCT-UNIT
			classic name for DistributionAccount.GeneralLedgerChartAccount is ACCOUNT
			classic name for DistributionAccount.Project is ACTIVITY

		AssetManagementInterfaceResult
			delete ignored
		AssetImpairment
			context of Asset
		YearEndDate						is Date
		BatchUpdateResult				is like AssetBatchUpdateResult

	Context Fields
		AssetTransfer	
		DateRangeFilter	is a DateRange

	Transient Fields
		GLFinanceCodeBlock		 			is a  FinanceCodeBlock
			derive value from GLTransactionDetailRel.FinanceCodeBlock
		GLTransactionAmount		 			is a  CurrencyAmount
			derive value from GLTransactionDetailRel.TransactionAmount
		GLJournalizeGroup 					is like JournalizeGroup
			derive value from GLTransactionDetailRel.JournalizeGroup
		GLTJournalizeGroup					is like JournalizeGroup
		GLTSystem							is a GeneralLedgerSystemCode
   		TransientDistributionAccount		is a FinanceCodeBlock
   		TransientACMAccount					is a FinanceCodeBlock
		TransientEXPAccount					is a FinanceCodeBlock
		TransientBookCurrency				is a FromCurrency
			derive value from AssetBookRel.PostingCurrency
		TransientExchangeDate             	is an ExchangeDate
		TransientExchangeRate				is a CurrencyExchangeRate
   		TransientCurrencyTable				is a CurrencyTable
   		OnlineSystemCreate					is Boolean
   		TransientCreateFromBatch			is Boolean
   		TransientTransactionAmount			is an InternationalAmount
            derive value from TransactionAmount
            precision is OutputNumberOfDecimals
		TransientTransactionDate			is Date
		TransientTransferFromOrTo			is Numeric 1
			States
				From		value is 1
				To			value is 2
		TransientTransactionCurrency		is a Currency
			derive value from TransactionCurrency

	Local Fields
		I1									is Numeric 2
		F1									is Numeric 2
		F2									is Numeric 2
		LocalYearEndDate					is Date
		LocalHistoryBeginDate				is Date
		LocalCalendarPeriod					is Numeric 2
		LocalFullyDepreciated				is Boolean
		LocalSkipCheckACM					is Boolean
		AssetTransactionAssetProcess
		BookDepreciationDifference			is an InternationalAmount
		LocalDepreciationDifference			is an InternationalAmount
		TotalDepreciationDifference			is an InternationalAmount
		SavedDepreciationDifference			is an InternationalAmount
		LocalPreviousYTDAmount				is an InternationalAmount
		LocalSkipUpdateBookHistory			is Boolean
		LocalDepreciationPeriodDates		is a DepreciationPeriodDates
		LocalDepreciationPeriodBeginDate	is Date
		LocalBookCalendarEndDate			is Date
		LocalPostingDate					is Date
		LocalLifeRemaining					is like LifeRemaining
		LocalExpenseTransactionCreated		is Boolean
		SavedAsset							is a Asset
		LocalFinanceEnterpriseGroup			is like FinanceEnterpriseGroup
		LocalUpdateOrigin					is Numeric 1
		MyJournalizeGroup					is like JournalizeGroup
		LocalGLEvent						is like AssetProcess
		CreateFromBatch						is Boolean
		CreateFromAssetPeriodCloseBatch     is Boolean
		LocalCodeBlock						is a FinanceCodeBlockFull
		LocalAccountingEntity				is like AccountingEntity
  		LocalFinanceDimension1				is like FinanceDimension1
  		LocalFinanceDimension2				is like FinanceDimension2
  		LocalFinanceDimension3				is like FinanceDimension3
  		LocalFinanceDimension4				is like FinanceDimension4
  		LocalFinanceDimension5				is like FinanceDimension5
   		LocalFinanceDimension6				is like FinanceDimension6
   		LocalFinanceDimension7				is like FinanceDimension7
  		LocalFinanceDimension8				is like FinanceDimension8
  		LocalFinanceDimension9				is like FinanceDimension9
  		LocalFinanceDimension10				is like FinanceDimension10
		LocalLastProject					is like Project
  		LocalLastFinanceDimension1			is like FinanceDimension1
  		LocalLastFinanceDimension2			is like FinanceDimension2
  		LocalLastFinanceDimension3			is like FinanceDimension3
  		LocalLastFinanceDimension4			is like FinanceDimension4
  		LocalLastFinanceDimension5			is like FinanceDimension5
   		LocalLastFinanceDimension6			is like FinanceDimension6
   		LocalLastFinanceDimension7			is like FinanceDimension7
  		LocalLastFinanceDimension8			is like FinanceDimension8
  		LocalLastFinanceDimension9			is like FinanceDimension9
  		LocalLastFinanceDimension10			is like FinanceDimension10
		GetDefaultAccounts					is Boolean
		LocalCompanyGroup                   is like GeneralLedgerCompanyGroup
		LocalCompany						is like Company
		LocalBook				 			is like Book
		LocalDistributionAccount			is a FinanceCodeBlock
		LocalLedger							is like Ledger
		LocalToAccountingEntity				is like AccountingEntity
		LocalAccountingUnit					is like AccountingUnit
		LocalChartAccount					is like GeneralLedgerChartAccount
		LocalProject						is like Project
		LocalDimensionCode					is like DimensionCode
		LocalEditProject					is a Project
		LocalDateRange					    is a ProjectDateRange
		LocalCurrencyTable					is a CurrencyTable
		LocalEnterpriseGroup				is a EnterpriseGroup
		LocalBaseAmount						is a CurrencyExchange
		LocalCurrencyExchange				is a CurrencyExchangeGroup
		LocalCurrencyRate					is a CurrencyExchangeRate
		LocalFromCurrency					is a FromCurrency
		LocalAsset							is like Asset
		LocalAssetBook						is like Book
		LocalItem							is like AssetItem
		BypassActiveCodeBlockEdit
		BypassStructureRelationEdit
		LocalCreditChange					is an InternationalAmount
		LocalDebitChange					is an InternationalAmount
		BatchReleaseRecordCount				is Numeric 10
		LocalPeriodEndDate					is Date
		LocalCurrencyAmount					is like InternationalAmount
		FundTransactionTotal				is an InternationalAmount
		TotalAllocated						is an InternationalAmount
		LocalTransactionAmount				is an InternationalAmount
		LocalFundAmount						is an InternationalAmount
		TotalForLocalFund					is an InternationalAmount
		TotalNewFunds 						is an InternationalAmount
		LocalFundPercent					is Percent size 9.6
  		LocalFund 							is an AssetFundField
		LocalAssetFund						is like AssetFund
		LocalLastAssetFund					is like AssetFund
		LocalLastProcessedFund				is like AssetFund
		NumberOfFunds						is Numeric 3
  		FundCount							is Numeric 3
  		TempFundCount						is Numeric 3
		EachFundPercent						is Percent size 9.6
		EachFundTransactionAmount 			is an InternationalAmount
		LocalAdjustmentAmount				is an InternationalAmount
		LocalCreateFundFromBatch 				is Boolean
		LocalJournalizeGroup				is a JournalizeGroup
		LocalCurrency 						is a FromCurrency
		LocalAssetTransaction				is an AssetTransaction	view
		TransferBalancingTransactionView	is an AssetTransaction view
		LocalAssetTransactionRecord			is Numeric 6
		LocalDeprExpSum						is an InternationalAmount
		LocalLastAccountingEntity			is like AccountingEntity
		LocalLastAccountingUnit				is like AccountingUnit
  		LocalLastFund 						is an AssetFundField
		UpdateAssetBookEXP					is Boolean
		UpdateAssetBookACM					is Boolean
		ToFundAllocationRequired			is Boolean
		LocalIncrementalEXP					is an InternationalAmount
		LocalIncrementalACM					is an InternationalAmount
		LocalAccountType					is like AssetAccountType
		LocalTransferAsset					is like Asset
		LocalAdjustmentUpdate				is Boolean
		LocalCreateHistory					is Boolean
		LocalTransferOutAccount				is like GeneralLedgerChartAccount
		LocalTransferInAccount           	is like GeneralLedgerChartAccount
		LocalParentAssetType				is AlphaUpper size 10
		LocalAssetAccountType				is like AssetAccountType
		OriginalTransactionDeleted			is Boolean
		LocalConfigurationParameter			is Alpha size up to 200
		LocalCount							is Numeric 2
		LocalTransactionDate				is Date
		LocalAssetType						is like AssetType
		LocalAssetAccountGroup				is like AssetAccountGroup
		UseHistoryDate						is Boolean
		LocalBatchUpdateResult				is a AssetBatchUpdateResult
		LocalBeginDate						is Date
    Derived Fields

		CompanyCurrency is a StringField
            type is Alpha size 5
            classic name is GL-CURR-CODE
            Company.Currency

		AssetTransactionCreditAmount is a DerivedField
			type is like InternationalAmount
				precision is OutputNumberOfDecimals
			if (TransactionAmount < 0)
				return TransactionAmount

		AssetTransactionDebitAmount is a DerivedField
			type is like InternationalAmount
				precision is OutputNumberOfDecimals
			if (TransactionAmount > 0)
				return TransactionAmount

		AssetTransactionBaseCreditAmount is a DerivedField
			type is like InternationalAmount
				precision is Book.Currency.NumberOfDecimals
			if (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount < 0)
				return AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

		AssetTransactionBaseDebitAmount is a DerivedField
			type is like InternationalAmount
				precision is Book.Currency.NumberOfDecimals
			if (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount > 0)
				return AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

    	DerivedIntegrationApplication is a DerivedField
			type is Alpha size 15
			restricted
			LocalConfigurationParameter	= "IntegrationApplication"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

    	DerivedAssetBook is a DerivedField
       		type is Alpha size 30
       		restricted
       		if(DerivedIntegrationApplication="Local.ly")
       			return Book

		OutputNumberOfDecimals is a DerivedField
			type is Numeric 1
			if (Book.PostCurrency.Book)
				return Book.Currency.NumberOfDecimals
			else
				return Asset.Currency.NumberOfDecimals

		DerivedRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (OutputNumberOfDecimals = 2)
				return .01
			else
			if (OutputNumberOfDecimals = 0)
				return 1
			else
			if (OutputNumberOfDecimals = 3)
				return .001
			else
			if (OutputNumberOfDecimals = 4)
				return .0001

		RoundedCurrencyAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (LocalCurrencyAmount entered)
				RoundedCurrencyAmount	      = LocalCurrencyAmount
				round RoundedCurrencyAmount to nearest DerivedRoundTo
				return RoundedCurrencyAmount

		DerivedTransactionAmount is a DerivedField
	    	type is like InternationalAmount
	    		precision is OutputNumberOfDecimals
	    	return TransactionAmount

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforAssetTransaction"

		ContextMessageText is a MessageField
			restricted
			"AssetTransaction<AssetTransaction>"


		DerivedCompany is a DerivedField
			type is like Company
			default label is "Company"
			return Asset.Company

		DerivedAsset is a DerivedField
			type is like Asset
			default label is "Asset"
			return Asset

		DerivedTransactionStatus is a DerivedField
			type is like TransactionStatus
			return TransactionStatus

		DerivedAssetAccountType is a DerivedField
			type is Alpha 30
			default label is "AccountType"
			if (AssetAccountType = blank)
				return "Manual Entry"
			if (AssetAccountType = "AST")
				return "Asset"
			if (AssetAccountType = "ACM")
				return "Accumulated Depreciation"
			if (AssetAccountType = "EXP")
				return "Depreciation Expense"
			if (AssetAccountType = "PRO")
				return "Proceeds"
			if (AssetAccountType = "GAN")
				return "Gain"
			if (AssetAccountType = "LOS")
				return "Loss"
			if (AssetAccountType = "CLR")
				return "Clearing"
			if (AssetAccountType = "COS")
				return "Disposal Expense"
			if (AssetAccountType = "DGN")
				return "Deferred Gain"
			if (AssetAccountType = "DLS")
				return "Deferred Loss"
			if (AssetAccountType = "RVS")
				return "Revalue Surplus"
			if (AssetAccountType = "RVL")
				return "Revalue Loss"
			if (AssetAccountType = "ICO")
				return "Intercompany"
			if (AssetAccountType = "RVA")
				return "Revalue Amortization"
			if (AssetAccountType = "RRA")
				return "Revaluation Reserve"
			if (AssetAccountType = "IML")
	  			return "Impairment Charge/Reversal"
			if (AssetAccountType = "IMT")
				return "Accumulated Amortization"
			if (AssetAccountType = "IMA")
				return "Impairment Amortization"
			if (AssetAccountType = "IMW")
				return "Impairment Write Off"
			if (AssetAccountType = "EQU")
				return "Equity"
			if (AssetAccountType = "DEB")
				return "Lease Liability"
			if (AssetAccountType = "IMD")
				return "Impairment Disposal"
			if (AssetAccountType = "IGL")
				return "Impairment Disposal Gain Loss"
			if (AssetAccountType = "LIM")
				return "Lease Impairment"
			if (AssetAccountType = "LAD")
				return "Lease Adjustment"
			if (AssetAccountType = "DER")
				return "Deferred Rent"
			if (AssetAccountType = "ATI")
				return "Transfer In"
			if (AssetAccountType = "ATO")
				return "Transfer Out"
			if (AssetAccountType = "STL")
				return "Short Term Liability"
			if (AssetAccountType = "LTL")
				return "Long Term Liability"


		DerivedAssetProcess is a DerivedField
			type is like AssetProcess
			return (first AssetProcessSequenceRel.AssetProcess)

		DerivedTransactionDate is a DerivedField
			type is Date
			if (UnreleasedTransactionsRel exists)
				return (UnreleasedTransactionsRel.TransactionDate)
			else
				return Asset.LastAssetItemPurchaseDate

		DerivedCalendarEndDate is a DerivedField
			type is Date
			return first BookCalendarsRel.YearEndDate

		DisplayOnlyTransactionDate is a DerivedField
			type is Date
			return TransactionDate

		DisplayOnlyPostingDate is a DerivedField
			type is Date
			return PostingDate

		DisplayOnlyAssetAccountType is a DerivedField
			type is like AssetAccountType
			if (AssetAccountType = blank)
				return "Manual Entry"
			else
				return AssetAccountType

		AssetTagNumber is a StringField
			type is Alpha size 12
			restricted
			classic name is TAG
			Asset.TagNumber

		BookCurrency   is a StringField
			type is Alpha size 5
			Book.Currency

		AssetLocation  is a StringField
			type is Alpha size 15
			restricted
			classic name is AST-LOCATION
			Asset.AssetLocation

		AssetDivision  is a StringField
			type is Alpha size 15
			restricted
			classic name is AST-DIVISION
			Asset.AssetDivision

		AstType        is a StringField
			type is Alpha size 10
			restricted
			Asset.AssetType.Type

		AssetSubtype   is a StringField
			type is Alpha size 10
			restricted
			classic name is AST-SUBTYPE
			Asset.AssetType.SubType

		ThisProgramNameText is a MessageField
			restricted
			"<DerivedProgramText>"

		DerivedProgramText is a DerivedField
			type is Alpha size 40
			restricted
			if (Company.TransactionReference.Asset)
				return AssetMessage
			else
				return CompanyAssetMessage


		AssetMessage is a MessageField
			restricted
			"Asset_<Asset>_<AssetProcess>"


		CompanyAssetMessage is a MessageField
			restricted
			"Company<Company>:CompanyAsset<Asset.CompanyAsset>_<AssetProcess>"

		AssetJournalizationDescription is a MessageField
			restricted
			"Asset<Asset>PostingProcessedOn<current corporate date>"

		DerivedDimensionCode is a StringField
			type is Alpha 70
			restricted
			DistributionAccount.DimensionCode

 		GetHistoryTransCodeBlocks is a DerivedField
 			type is Boolean
 			restricted
 			if (GetDefaultAccounts)
 				invoke DefaultAccounts Asset
				TransientACMAccount 	= Asset.TranAccumulatedDepreciationAccount
				TransientEXPAccount 	= Asset.TranDepreciationExpenseAccount
				if (Book.Ledger not entered)
					TransientACMAccount.Ledger	= FinanceEnterpriseGroup.CoreLedger
					TransientEXPAccount.Ledger	= FinanceEnterpriseGroup.CoreLedger
				else
					TransientACMAccount.Ledger	= Book.Ledger
					TransientEXPAccount.Ledger	= Book.Ledger
			return true

 		DeriveCodeBlock is a DerivedField
 			type is Boolean
 			restricted
 			if (CreateFromBatch
 			or GetDefaultAccounts)
 				invoke DefaultAccounts Asset
			if (AssetAccountType.Asset)
				TransientDistributionAccount = Asset.TranAssetAccount
			if (AssetAccountType.AccumulatedDepreciation)
				TransientDistributionAccount = Asset.TranAccumulatedDepreciationAccount
			if (AssetAccountType.DepreciationExpense)
				TransientDistributionAccount = Asset.TranDepreciationExpenseAccount
			if (AssetAccountType.Proceeds)
				TransientDistributionAccount = Asset.TranProceedsAccount
			if (AssetAccountType.Gain)
				TransientDistributionAccount = Asset.TranGainAccount
			if (AssetAccountType.Loss)
				TransientDistributionAccount = Asset.TranLossAccount
			if (AssetAccountType.Clearing
			or	AssetAccountType.Intercompany)
				TransientDistributionAccount = Asset.TranClearingAccount
			if (AssetAccountType.DisposalExpense)
				TransientDistributionAccount = Asset.TranDisposalExpenseAccount
			if (AssetAccountType.DeferredGain)
				TransientDistributionAccount = Asset.TranDeferredGainAccount
			if (AssetAccountType.DeferredLoss)
				TransientDistributionAccount = Asset.TranDeferredLossAccount
			if (AssetAccountType.RevalueSurplus)
				TransientDistributionAccount = Asset.TranRevalueSurplusAccount
			if (AssetAccountType.RevalueLoss)
				TransientDistributionAccount = Asset.TranRevalueLossAccount
			if (AssetAccountType.RevalueAmortization)
				TransientDistributionAccount = Asset.TranRevalueAmortization
			if (AssetAccountType.RevaluationReserve)
				TransientDistributionAccount = Asset.TranRevalueReserve
			if (AssetAccountType.ImpairmentLoss)
				TransientDistributionAccount = Asset.TranImpairmentLoss
			if (AssetAccountType.AccumulatedImpairmentLoss)
				TransientDistributionAccount = Asset.TranAccumulatedImpairmentLoss
			if (AssetAccountType.ImpairmentAmortization)
				TransientDistributionAccount = Asset.TranImpairmentAmortization
			if (AssetAccountType.ImpairmentWriteOff)
				TransientDistributionAccount = Asset.TranImpairmentWriteOff
			if (Book.Ledger not entered)
				TransientDistributionAccount.Ledger	= FinanceEnterpriseGroup.CoreLedger
			else
				TransientDistributionAccount.Ledger	= Book.Ledger
			return true


		CurrentDate is a DerivedField
			type is Date
			restricted
			return PostingDate

		CurrentPeriod is a DerivedField
			type is Numeric 3
			restricted
			return CurrentDate month

		CurrentYear is a DerivedField
			type is Numeric 4
			restricted
			return CurrentDate year


		TransactionYear is a DerivedField
			type is Numeric 4
			restricted
			return PostingDate year

		TransactionMonth is a DerivedField
			type is Numeric 2
			restricted
			return PostingDate month

		TransactionDay is a DerivedField
			type is Numeric 3
			restricted
			default label is "Day/Year"
			return PostingDate year day





		DerivedAdditions is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Addition)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

		DerivedReinstatements is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Reinstatement)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

		DerivedRevaluations is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Revalue)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

 		DerivedReAdds is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.ReAdd)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

		DerivedDepreciation is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Depreciation)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

 		DerivedAdjustments is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Adjustment)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

		DerivedTransfers is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Transfer)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0

		DerivedDisposals is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Disposal)
				return (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return 0


		AssetCurrencyDerivedAdditions is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Addition)
				return (TransactionAmount)
			else
				return 0

		AssetCurrencyDerivedReinstatements is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Reinstatement)
				return (TransactionAmount)
			else
				return 0

		AssetCurrencyDerivedRevaluations is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Revalue)
				return (TransactionAmount)
			else
				return 0

 		AssetCurrencyDerivedReAdds is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.ReAdd)
				return (TransactionAmount)
			else
				return 0

		AssetCurrencyDerivedDepreciation is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Depreciation)
				return (TransactionAmount)
			else
				return 0

 		AssetCurrencyDerivedAdjustments is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Adjustment)
				return (TransactionAmount)
			else
				return 0

		AssetCurrencyDerivedTransfers is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Transfer)
				return (TransactionAmount)
			else
				return 0

		AssetCurrencyDerivedDisposals is a DerivedField
			type is like InternationalAmount
			if (AssetProcess.Disposal)
				return (TransactionAmount)
			else
				return 0

		DerivedBookAmount is a DerivedField
			type is like InternationalAmount
			return AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount


		CurrentMonth is a DerivedField
			type is Numeric 3
			restricted
			return CurrentDate month

		LastAssetImpairment is a DerivedField
			type is like AssetImpairment

			return (first AssetImpairmentBooksRel.AssetImpairment)

		DerivedAssetImpairment is a DerivedField
			type is like AssetImpairment
			return (first ImpairmentBooksRel.AssetImpairment)

		TransactionCurrency is a DerivedField
			type is like FromCurrency
			if (Book.PostCurrency.Book)
				return Book.Currency
			else
				return Asset.Currency



		DerivedDocRef is a DerivedField
			type is Alpha size 30
			restricted
			return DistributionAccount.AccountingUnit + Asset.DerivedDelimiter+ DistributionAccount.GeneralLedgerChartAccount

		DerivedBODAsset is a DerivedField
			type is Alpha size 10
			restricted
			return Asset.DerivedAsset

		DerivedDescription is a DerivedField
			type is Alpha size 60
			restricted
			return Asset.Description

		DerivedCurrency is a DerivedField
			type is Alpha size 10
			restricted
			return Asset.Currency

		DerivedFundAccountType is a DerivedField
			type is Boolean
			restricted
			return FundAccountType

		DerivedAssetEndBalance is a DerivedField
			type is like InternationalAmount
			restricted
			if((AssetProcess.Addition
			or AssetProcess.Adjustment
			or AssetProcess.Depreciation
			or AssetProcess.Transfer
			or AssetProcess.Disposal
			or AssetProcess.Revalue)
			and AssetAccountType.Asset)
				return AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

		DerivedDepreciationEndBalance is a DerivedField
			type is like InternationalAmount
			restricted
			if((AssetProcess.Addition
			or AssetProcess.Adjustment
			or AssetProcess.Depreciation
			or AssetProcess.Transfer
			or AssetProcess.Disposal
			or AssetProcess.Revalue)
			and AssetAccountType.AccumulatedDepreciation)
				return AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

		DerivedAssetBalance is a DerivedField
			type is like InternationalAmount
			restricted
			return (DerivedAssetEndBalance + DerivedDepreciationEndBalance)

		DerivedNumberOfYearsPrior      is a DerivedField
			type is Numeric size 3
			restricted
			return (CurrentBookCalendarRel.YearBeginDate year - PostingDate year)

		DerivedPeriodNumber			is a DerivedField
       	 	type is Numeric size 2
			restricted
       	 	LocalCount = 1
			if (BookCalendarsRel exists)
				while(BookCalendarsRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount] <= PostingDate)
					if(PostingDate <= BookCalendarsRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount])
						return (LocalCount)
					else
						LocalCount += 1
				return LocalCount
			else
				LocalPostingDate = PostingDate + DerivedNumberOfYearsPrior as years
				if(LocalPostingDate >= CurrentBookCalendarRel.YearBeginDate
				and LocalPostingDate <= CurrentBookCalendarRel.YearEndDate)
					while(CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount] <= LocalPostingDate)
						if(LocalPostingDate <= CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount])
							return (LocalCount)
						else
							LocalCount += 1
						if(LocalCount > 55)
							return
					return LocalCount
				if(LocalPostingDate >= CurrentBookCalendarRel.YearEndDate)
					return 1
				if(LocalPostingDate <= CurrentBookCalendarRel.YearBeginDate)
					while(CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount] <= CurrentBookCalendarRel.YearEndDate)
						if(CurrentBookCalendarRel.YearEndDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[LocalCount])
							return (LocalCount)
						else
							LocalCount += 1
						if(LocalCount > 55)
							return


	Conditions
		IsCoreLedger
			when (Book.Ledger = FinanceEnterpriseGroup.CoreLedger)

		IsReleased
			restricted
			classic name is AMTSET5
			when (TransactionStatus.Released)

		IsDisposed
			restricted
			when (Asset.Status.Disposed)

		IsPostedToGL
			when (GLTransactionDetailRel exists)

		IsPostHistory
			when (Book.PostHistory)

		AssetBookTransactionExists
			restricted
			classic name is BKTRANS-EXIST
			when (first AssetBookTransactionsRel exists)

		UnreleasedTransactionsExist
			when (UnreleasedTransactionsRel exists)

		DeleteAllowed
			restricted
			when (TransactionStatus.Unreleased)

		CreateAllowed
			restricted
			when ((Asset.Status.Unreleased
				or Asset.Status.PostRelease)
			and !ImpairmentInProgress)

		ApprovalCreateAllowed
			restricted
			when (CreateAllowed
			and !Asset.ApprovalStatus.Submitted)

		ApprovalImpairmentInProgress
			when (!ImpairmentInProgress
			and !Asset.ApprovalStatus.Submitted)

		ImpairmentInProgress
			when (first LastAssetImpairmentRel.Status.PostRelease
			and first LastAssetImpairmentRel.UnReleasedTransactionsExist)

		UpdatePostDateAllowed
			restricted
			when (!Asset.Status.Disposed)

		IsManualEntry
			restricted
			when (AssetAccountType = blank)

		IsHistory
			restricted
			classic name is HIST-TRANS
			when (TransactionStatus.History)

		IsHistoryOrReleased
			restricted
			when (TransactionStatus.History
			or TransactionStatus.Released)


		IsUnreleased
			restricted
			when (TransactionStatus.Unreleased)

		IsMemoOrUnreleased
			restricted
			classic name is MEMO-TRANS
			when (TransactionStatus.Memo
			or    TransactionStatus.Unreleased)

		IsPartial
			restricted
			when (Asset != ProcessAsset
			and   (AssetProcess.Disposal
				or    AssetProcess.Transfer))

		AssetEntered
			restricted
			classic name is TRANS-EXIST
			when (Asset entered)

		CanBeDeleted
			restricted
			when (TransactionStatus.Unreleased
			or    TransactionStatus.Memo)

		AssetIsUnreleased
			restricted
			when (Asset.Status.Unreleased)

		CanBeMaintained
			restricted
			when ((TransactionStatus.Unreleased
			or 	  CreateFromBatch)
			and !ImpairmentInProgress)

		ApprovalCanBeMaintained
			restricted
			when (CanBeMaintained
			and !Asset.ApprovalStatus.Submitted)

		ManualUpdateAllow
			restricted
			when (!Asset.ApprovalStatus.Submitted)

		PostingBookCalendar
			restricted
			when (CurrentBookCalendarRel.IsPostingBook)

		AssetDisposed
			restricted
			when (Asset.AssetProcess.Disposal
			and Asset.Status.PostRelease)

		DisplayDisposalTransactions
			restricted
			when (!AssetDisposed
			or (AssetDisposed
			and AssetBookDisposalRel.Dispose = true))

		DisplayUnreleasedTransactions

			when ((Asset.PostReleaseDisposal
			and AssetBookDisposalRel.Dispose = true
			and TransactionStatus.Unreleased)
			or (Asset.Status.PostRelease
			and Asset.DisplayUnreleasedToAssetTransactions
			and TransactionStatus.Unreleased)
			or (Asset.Status.PostRelease
			and !Asset.AssetProcess.Disposal
			and TransactionStatus.Unreleased)
			or AssetIsUnreleased
			and TransactionStatus.Unreleased)


		HasMemoDisplayJE
			restricted
		   	when (MemoAssetTransactionRel exists
		   	and (AssetCompanyRel.DisplayJournalEntries
		   	or !AssetCompanyRel exists))

		DisplayAdjustmentDate
			restricted
			when (Asset.Status.Released)

		IsWithinDateRange
			restricted
			when (PostingDate within DateRangeFilter)
		IsIncludedWithinRange
			restricted
			when (TransactionDate within DateRangeFilter)

		IsIncludedInListFilter
			restricted
			when ((TransactionStatus.Released
			or TransactionStatus.History)
			and (DateRangeFilter not entered
			or PostingDate within DateRangeFilter))


		IsIncludedInSearch
			restricted
			when ((TransactionStatus.Released)
			and (DateRangeFilter not entered
			or PostingDate within DateRangeFilter))

		IsIncludedInSearchWithHistory
			restricted
			when ((TransactionStatus.Released
			or TransactionStatus.History)
			and (DateRangeFilter not entered
			or PostingDate within DateRangeFilter))

		IsIncludedInDateRange
			restricted
			when (PostingDate <= DateRangeFilter.End
			and DateRangeFilter.End >= DateRangeFilter.Begin
			and IsHistoryOrReleased
			and (((AssetProcess.Addition
			or AssetProcess.Adjustment
			or AssetProcess.Disposal
			or AssetProcess.Transfer
			or AssetProcess.Revalue)
			and AssetAccountType.Asset)
			or ((AssetProcess.Depreciation
			or AssetProcess.Addition
			or AssetProcess.Adjustment
			or AssetProcess.Disposal
			or AssetProcess.Transfer
			or AssetProcess.Revalue)
			and AssetAccountType.AccumulatedDepreciation)))

		IsTrue
			restricted
			when (AssetCompanyRel exists)

		CalendarExists
			restricted
			when (first BookCalendarsRel exists)

		IsImpairmentTransaction
			restricted
			when (AssetAccountType.ImpairmentLoss
 			or AssetAccountType.AccumulatedImpairmentLoss
			or AssetAccountType.ImpairmentAmortization)

		IsImpairmentLossTransaction
			restricted
			when (AssetAccountType.ImpairmentLoss)

		IsImpairmentAmortizationTransaction
			restricted
			when (AssetAccountType.ImpairmentAmortization)

		IsCurrentYearTransaction
			restricted
			when (PostingDate >= CurrentBookCalendarRel.YearBeginDate
			and PostingDate <= CurrentBookCalendarRel.YearEndDate)

		DisplayUpdatePostingDateAction
			restricted
			when (DisplayUpdatePostingDateActionRel exists)

		AmortizeRevaluation
			restricted
			when (AssetType.AmortizeRevaluation)

		OtherImpairmentsExist
			restricted
			when (OtherAssetImpairmentsRel exist)

		IsFirstAssetImpairment
			restricted
			when (AssetProcess.Impairment
			and	 !OtherImpairmentsExist)

		IsFirstAssetImpairmentAdjustment
			restricted
			when (Book.Impairment
			and  AssetProcess.Adjustment
			and  !OtherImpairmentsExist)

		IsZeroImpairment
			restricted
			when (ImpairmentBooksRel exist
			and (first ImpairmentBooksRel.ImpairmentAmount = 0))

		PriorZeroImpairment
			restricted
			when (first PriorAssetImpairmentRel.HasZeroImpairmentBooks)

		IsAssetImpairmentExist
			restricted
			when (AssetImpairment entered)

		FundAccounting
			restricted
			when (FinanceEnterpriseGroup.FundAccounting
			and not AssetType.AllocateDepreciationExpense)

		FundAccountType
			restricted
			when ((AssetAccountType	= blank
			and AssetFundControlRel.FundAccountTypes.ManualEntry)
			or (AssetAccountType 	= "AST"
			and AssetFundControlRel.FundAccountTypes.Asset)
			or (AssetAccountType 	= "CLR"
			and AssetFundControlRel.FundAccountTypes.Clearing)
			or (AssetAccountType 	= "EXP"
			and AssetFundControlRel.FundAccountTypes.DepreciationExpense)
			or (AssetAccountType 	= "ACM"
			and AssetFundControlRel.FundAccountTypes.AccumulatedDepreciation)
			or ((AssetAccountType 	= "PRO"
			or  AssetAccountType 	= "COS")
			and AssetFundControlRel.FundAccountTypes.DisposalProceedsLoss)
			or ((AssetAccountType 	= "GAN"
			or  AssetAccountType 	= "LOS")
			and AssetFundControlRel.FundAccountTypes.GainLoss)
			or ((AssetAccountType 	= "DGN"
			or  AssetAccountType 	= "DGL")
			and AssetFundControlRel.FundAccountTypes.DeferredGainLoss)
			or ((AssetAccountType 	= "RVS"
			or  AssetAccountType 	= "RVL"
			or  AssetAccountType 	= "RVA"
			or  AssetAccountType 	= "RRA")
			and AssetFundControlRel.FundAccountTypes.Revaluation)
			or ((AssetAccountType 	= "IML"
			or  AssetAccountType 	= "IMT"
			or  AssetAccountType 	= "IMA"
			or  AssetAccountType 	= "IMW"
			or 	AssetAccountType 	= "AAD"
			or 	AssetAccountType 	= "ATD"
			or 	AssetAccountType 	= "ATC"
			or 	AssetAccountType 	= "ADD"
			or 	AssetAccountType 	= "ADC"
			or 	AssetAccountType 	= "IMD"
			or 	AssetAccountType 	= "IGL")
			and AssetFundControlRel.FundAccountTypes.Impairment)
			or (AssetAccountType 	= "EQU"
			and AssetFundControlRel.FundAccountTypes.LeaseEquity)
			or (AssetAccountType 	= "DEB"
			and AssetFundControlRel.FundAccountTypes.LeaseDebt)
			or (AssetAccountType 	= "LIM"
			and AssetFundControlRel.FundAccountTypes.LeaseImpairment)
			or (AssetAccountType 	= "LAD"
			and AssetFundControlRel.FundAccountTypes.LeaseAdjustment)
			or (AssetAccountType 	= "ICO"
			and AssetFundControlRel.FundAccountTypes.Intercompany)
			or (AssetAccountType 	= "STL"
			and AssetFundControlRel.FundAccountTypes.ShortTermLiability)
			or (AssetAccountType 	= "LTL"
			and AssetFundControlRel.FundAccountTypes.LongTermLiability))

		AssetFundAllocationRequired
			restricted
			when (Asset.FundAllocationRequired)

		LocalFundAccountType
			restricted
			when ((LocalAccountType	= blank
			and AssetFundControlRel.FundAccountTypes.ManualEntry)
			or (LocalAccountType 	= "AST"
			and AssetFundControlRel.FundAccountTypes.Asset)
			or (LocalAccountType 	= "CLR"
			and AssetFundControlRel.FundAccountTypes.Clearing)
			or (LocalAccountType 	= "EXP"
			and AssetFundControlRel.FundAccountTypes.DepreciationExpense)
			or (LocalAccountType 	= "ACM"
			and AssetFundControlRel.FundAccountTypes.AccumulatedDepreciation)
			or ((LocalAccountType 	= "PRO"
			or  LocalAccountType 	= "COS")
			and AssetFundControlRel.FundAccountTypes.DisposalProceedsLoss)
			or ((LocalAccountType 	= "GAN"
			or  LocalAccountType 	= "LOS")
			and AssetFundControlRel.FundAccountTypes.GainLoss)
			or ((LocalAccountType 	= "DGN"
			or  LocalAccountType 	= "DGL")
			and AssetFundControlRel.FundAccountTypes.DeferredGainLoss)
			or ((LocalAccountType 	= "RVS"
			or  LocalAccountType 	= "RVL"
			or  LocalAccountType 	= "RVA"
			or  LocalAccountType 	= "RRA")
			and AssetFundControlRel.FundAccountTypes.Revaluation)
			or ((LocalAccountType 	= "IML"
			or  LocalAccountType 	= "IMT"
			or  LocalAccountType 	= "IMA"
			or  LocalAccountType 	= "IMW"
			or 	LocalAccountType 	= "AAD"
			or 	LocalAccountType 	= "ATD"
			or 	LocalAccountType 	= "ATC"
			or 	LocalAccountType 	= "ADD"
			or 	LocalAccountType 	= "ADC"
			or 	LocalAccountType 	= "IMD"
			or 	LocalAccountType 	= "IGL")
			and AssetFundControlRel.FundAccountTypes.Impairment)
			or (LocalAccountType 	= "EQU"
			and AssetFundControlRel.FundAccountTypes.LeaseEquity)
			or (LocalAccountType 	= "DEB"
			and AssetFundControlRel.FundAccountTypes.LeaseDebt)
			or (AssetAccountType 	= "LIM"
			and AssetFundControlRel.FundAccountTypes.LeaseImpairment)
			or (AssetAccountType 	= "LAD"
			and AssetFundControlRel.FundAccountTypes.LeaseAdjustment)
			or (LocalAccountType 	= "ICO"
			and AssetFundControlRel.FundAccountTypes.Intercompany)
			or (LocalAccountType 	= "STL"
			and AssetFundControlRel.FundAccountTypes.ShortTermLiability)
			or (LocalAccountType 	= "LTL"
			and AssetFundControlRel.FundAccountTypes.LongTermLiability))

		IsFutureInServiceDate
			restricted
			when (AssetBookRel.InServiceDate > CurrentBookCalendarRel.LastPeriodDate
			and   AssetProcess.Adjustment
			and   UnreleasedAssetBookAdjustmentRel.IsInServiceDateAdjusted)

		IsBookDisposalTransaction
			restricted
			when (AssetBookRel.Disposed)

		BatchPostedToGL
			restricted
			when (GLTransactionDetailRel exists
			and GLJournalizeGroup =  AssetBatchUpdateResultRel.JournalizeGroup)

		RevalueTransactionExist
			restricted
			when (AssetProcess.Revalue
			or (AssetProcess.Revalue
			and TransactionStatus.Unreleased))

    Relations

    	FSMBODConfigurationParameterRel
    		one-to-one relation to FSMBODConfigurationParameter
    		Field Mapping uses symbolic key
    			related.FSMBODConfigurationParameter	= LocalConfigurationParameter

    	ThisInstanceRel
    		one-to-one relation to AssetTransaction
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
               	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction

		UnreleasedTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
		  	Instance Selection
		  		where (related.AssetTransaction	not = AssetTransaction
				and related.TransactionStatus = "U")


		AssetProcessSequenceRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
			Instance Selection
				where (related.ProcessSequence	= Asset.LastAssetSequence
				and AssetProcess entered)

		AssetCompanyRel
			one-to-one relation to AssetCompany
			Field Mapping uses symbolic key
				related.Company					= Company

		CompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup 	= LocalCompanyGroup
				related.Company						= Company

		AssetBookTransactionsRel
			classic name is AMBKTRANS
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset   				= Asset
				related.Book    				= Book
				related.Company 				= Company

		AllAssetBookTransactionsRel
			classic name is AMBKTRANS
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key

		CurrentBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company					= Company
				related.Book					= Book

		CurrentPostingBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses CompanyCurrentPostingBook
				related.Company					= Company
				related.PostingBook				= true
				related.Book					= Book


		FutureBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByCompanyBookStatus
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company					= Company
				related.Book					= Book
				related.CalendarStatus			= "F"

		CurrentBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByCompanyBookStatus
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company					= Company
				related.Book					= Book
				related.CalendarStatus			= "C"

		BookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByBeginDateDescending
				related.Book					= Book
				related.Company					= Company
		  	Instance Selection
		  		where (related.YearBeginDate <= PostingDate
		  		and related.YearEndDate	>= PostingDate)

		BookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Book					= Book
				related.Company					= Company
				related.YearEndDate 			= YearEndDate

		HistoryYearBookCalendarsRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set3
				related.CalendarStatus					= "H"
				related.Book 							= Book
				related.Company 			 			= Company
				related.YearEndDate						= LocalYearEndDate


		PostingDateBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByBeginDateDescending
				related.Book					= Book
				related.Company					= Company
		  	Instance Selection
		  		where (related.YearBeginDate <= PostingDate)

		LocalPostingDateBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByBeginDateDescending
				related.Book					= Book
				related.Company					= Company
		  	Instance Selection
		  		where (related.YearBeginDate <= LocalPostingDate)

		LocalCompanyBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByBeginDateDescending
				related.Book					= LocalBook
				related.Company					= LocalCompany
		  	Instance Selection
		  		where (related.YearBeginDate <= LocalPostingDate)

		BookRel
			one-to-one relation to Book
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Book					= Book

		AssetBookDisposalRel
			one-to-many relation to AssetBookDisposal
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset					= Asset
				related.Book					= Book
			Instance Selection
				where (related.AssetDisposalRel.DisposalStatus.Unreleased)

		AssetDisposalRel
			one-to-many relation to AssetDisposal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
		  	Instance Selection
		  		where (related.IsReleased = false)

		ToAssetDisposalRel
			one-to-many relation to AssetDisposal
			Field Mapping uses ByDisposalAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.DisposalAsset			= Asset
		  	Instance Selection
		  		where (related.IsReleased = false)

		AssetControlTransactionRel
			one-to-one relation to AssetControlTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
				related.Asset					= Asset

		AssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= Book

		CurrentAssetTypeAllocationsRel
			one-to-many relation to AssetTypeAllocation
			Field Mapping uses Set2
				related.Company					= Company
				related.AssetType				= Asset.AssetType
			Instance Selection
				where (related.Status.Released
				and    related.AssetTypeAllocation.StartDate <= current corporate date
				and   (related.EndDate not entered
				or     related.EndDate >= current corporate date))

		AssetTypeAllocationDetailsRel
			one-to-many relation to AssetTypeAllocationDetail
			Field Mapping uses symbolic key
				related.Company								= Company
				related.AssetType							= Asset.AssetType
				related.AssetTypeAllocation.StartDate		= first CurrentAssetTypeAllocationsRel.AssetTypeAllocation.StartDate
				related.AssetTypeAllocation.SequenceNumber	= first CurrentAssetTypeAllocationsRel.AssetTypeAllocation.SequenceNumber

		AllAssetTransactionSummariesRel
			one-to-many relation to AssetTransactionSummary
			Field Mapping uses Set0


		AssetTransactionSummariesRel
			one-to-many relation to AssetTransactionSummary
			Field Mapping uses Set0
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.AccountingEntity			= DistributionAccount.ToAccountingEntity
				related.AssetTransactionSummary.AccountingUnit				= DistributionAccount.AccountingUnit
				related.AssetTransactionSummary.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount
				related.AssetTransactionSummary.Ledger						= DistributionAccount.Ledger
			   	related.AssetTransactionSummary.Project						= DistributionAccount.Project
				related.AssetTransactionSummary.DimensionCode				= DistributionAccount.DimensionCode
			Instance Selection
				where (related.YearEndDate <= CurrentBookCalendarRel.YearEndDate)

		AssetPostingDateSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses symbolic key
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.Ledger						= DistributionAccount.Ledger
				related.AssetTransactionSummary.AccountingEntity			= DistributionAccount.ToAccountingEntity
				related.AssetTransactionSummary.AccountingUnit				= DistributionAccount.AccountingUnit
				related.AssetTransactionSummary.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount
			   	related.AssetTransactionSummary.Project						= DistributionAccount.Project
				related.AssetTransactionSummary.DimensionCode				= DistributionAccount.DimensionCode
				related.YearEndDate 										= YearEndDate

		ACMAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses symbolic key
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.Ledger						= LocalDistributionAccount.Ledger
				related.AssetTransactionSummary.AccountingEntity			= LocalDistributionAccount.ToAccountingEntity
				related.AssetTransactionSummary.AccountingUnit				= LocalDistributionAccount.AccountingUnit
				related.AssetTransactionSummary.GeneralLedgerChartAccount	= LocalDistributionAccount.GeneralLedgerChartAccount
			   	related.AssetTransactionSummary.Project						= LocalDistributionAccount.Project
				related.AssetTransactionSummary.DimensionCode				= LocalDistributionAccount.DimensionCode
				related.YearEndDate 										= LocalAssetTransaction.YearEndDate

		EXPAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses symbolic key
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.Ledger						= LocalDistributionAccount.Ledger
				related.AssetTransactionSummary.AccountingEntity			= LocalDistributionAccount.ToAccountingEntity
				related.AssetTransactionSummary.AccountingUnit				= LocalDistributionAccount.AccountingUnit
				related.AssetTransactionSummary.GeneralLedgerChartAccount	= LocalDistributionAccount.GeneralLedgerChartAccount
			   	related.AssetTransactionSummary.Project						= LocalDistributionAccount.Project
				related.AssetTransactionSummary.DimensionCode				= LocalDistributionAccount.DimensionCode
				related.YearEndDate 										= LocalAssetTransaction.YearEndDate

		LocalTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses symbolic key
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.Ledger						= LocalDistributionAccount.Ledger
				related.AssetTransactionSummary.AccountingEntity			= LocalDistributionAccount.ToAccountingEntity
				related.AssetTransactionSummary.AccountingUnit				= LocalDistributionAccount.AccountingUnit
				related.AssetTransactionSummary.GeneralLedgerChartAccount	= LocalDistributionAccount.GeneralLedgerChartAccount
			   	related.AssetTransactionSummary.Project						= LocalDistributionAccount.Project
				related.AssetTransactionSummary.DimensionCode				= LocalDistributionAccount.DimensionCode
				related.YearEndDate 										= LocalYearEndDate

		LocalAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses ByTransactionDimensions
				related.Company												= LocalCompany
				related.Book												= LocalBook
				related.AssetTransactionSummary.Ledger						= LocalLedger
				related.AssetTransactionSummary.AccountingEntity			= LocalToAccountingEntity
				related.AssetTransactionSummary.AccountingUnit				= LocalAccountingUnit
				related.AssetTransactionSummary.GeneralLedgerChartAccount	= LocalChartAccount
			   	related.AssetTransactionSummary.Project						= LocalProject
				related.AssetTransactionSummary.DimensionCode				= LocalDimensionCode
				related.YearEndDate 										= LocalBookCalendarEndDate

		AssetTransactionSummaryNavigationRel
			one-to-many relation to AssetTransactionSummary
			Field Mapping uses Set1
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.AccountingEntity			= DistributionAccount.ToAccountingEntity
				related.AssetTransactionSummary.AccountingUnit				= DistributionAccount.AccountingUnit
				related.AssetTransactionSummary.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount
				related.AssetTransactionSummary.Ledger						= DistributionAccount.Ledger


		AssetTransactionSummaryRel
			one-to-many relation to AssetTransactionSummary
			Field Mapping uses Set1
				related.Company												= Company
				related.Book												= Book
				related.AssetTransactionSummary.AccountingEntity			= DistributionAccount.ToAccountingEntity
				related.AssetTransactionSummary.AccountingUnit				= DistributionAccount.AccountingUnit
				related.AssetTransactionSummary.GeneralLedgerChartAccount	= DistributionAccount.GeneralLedgerChartAccount
				related.AssetTransactionSummary.Ledger								= DistributionAccount.Ledger
				related.AssetTransactionSummary.DimensionCode				= DistributionAccount.DimensionCode
			   	related.AssetTransactionSummary.Project						= DistributionAccount.Project
				related.YearEndDate											= LocalYearEndDate


		AssetBookHistoryRel
			one-to-one relation to AssetBookHistory
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.YearEndDate				= LocalYearEndDate

		AssetBookPeriodHistoryRel
			one-to-one relation to AssetBookPeriodHistory
			Field Mapping uses symbolic key
				related.Company							= Company
				related.Asset							= Asset
				related.Book							= Book
				related.YearEndDate						= LocalYearEndDate
				related.AssetBookPeriodHistory.Period	= LocalCalendarPeriod

		AssetBookPeriodHistoriesRel
			one-to-many relation to AssetBookPeriodHistory
			Field Mapping uses symbolic key
				related.Company							= Company
				related.Asset							= Asset
				related.Book							= Book
				related.YearEndDate						= LocalYearEndDate

		AssetTransactionRADRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
				related.Asset							= Asset
				related.TransactionStatus				= "U"
			 	related.Company							= Company
			Instance Selection
				where (related.AssetProcess				= "RAD")

		MemoAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set1
				related.Asset							= Asset
			Instance Selection
				where (related.TransactionStatus 		= "M")

	 	MemoOrUnreleasedAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses Set4
				related.ProcessAsset					= Asset
				related.ProcessSequence					= Asset.LastAssetSequence

		AMGeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= Asset.FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode			= "AM"

		GLTransactionDetailUnreleasedRel
			one-to-many relation to GLTransactionDetail
				Field Mapping uses ByJournalizeGroup
					related.FinanceEnterpriseGroup = LocalFinanceEnterpriseGroup
					related.JournalizeGroup		   = LocalJournalizeGroup
					related.Status				   =  0

		GLTransactionDetailRel
			one-to-one relation to GLTransactionDetail
			valid when (!action type.Create)
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction = reference to this instance


	  	GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup          = LocalFinanceEnterpriseGroup	
				related.GeneralLedgerSystemCode			= "AM"

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode			= "AM"
				related.Company							= Asset.Company

		AssetAdjustmentRel
			one-to-many relation to AssetAdjustment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
		  	Instance Selection
		  		where (related.IsReleased = false)

		AssetTransferRel
			one-to-many relation to AssetTransfer
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset					= Asset
	      	Instance Selection
	      		where (related.IsReleased = false)

        AssetLastSequenceTransferRel
			one-to-one relation to AssetTransfer
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset					= Asset
                related.AssetTransfer 			= Asset.LastAssetSequence

		FromAssetTransferRel	
			one-to-many relation to AssetTransfer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.Asset = Asset
			Instance Selection
				where (related.Company = Company
					and related.IsReleased = false)

		ToAssetTransferRel
			one-to-many relation to AssetTransfer
			Field Mapping uses ToAssetTransfer
				related.AssetTransferTo.ToAssetCompany	= Company
				related.AssetTransferTo.ToAsset			= Asset
			Instance Selection
				where (related.IsReleased = false)

		CompanyAssetTransferRel 
			one-to-many relation to AssetTransfer
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where ((related.Company = Company
						or related.AssetTransferTo.ToAssetCompany = Company)
					and related.AssetTransfer = AssetTransfer
					and related.IsReleased = false)

		AssetReinstatementRel
			one-to-many relation to AssetReinstatement
			Field Mapping uses Set7
				related.Asset					= Asset

		AssetRevaluationRel
			one-to-many relation to AssetRevaluation
			Field Mapping uses Set1
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetRevaluation		= Asset.LastAssetSequence

		UnreleasedAssetBookRevaluationRel
			one-to-many relation to AssetBookRevaluation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.RevalueStatus	= "U")

		AssetImpairmentRel
			one-to-many relation to AssetImpairment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetImpairment			= Asset.LastAssetSequence

		LastAssetImpairmentRel
			one-to-many relation to AssetImpairment
			Field Mapping uses ByAssetImpairmentDescending
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset

		PriorAssetImpairmentRel
			one-to-many relation to AssetImpairment
			Field Mapping uses ByAssetImpairmentDescending
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
			Instance Selection
				where (related.AssetImpairment not = AssetImpairment)

		OtherAssetImpairmentsRel
			one-to-many relation to AssetImpairment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.AssetImpairment	!= AssetImpairment)

		AssetImpairmentBooksRel
			one-to-many relation to AssetImpairmentBook
			Field Mapping uses ByAssetBook
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book


		ImpairmentBooksRel 
			one-to-many relation to AssetImpairmentBook
			Field Mapping uses ByAssetImpairmentBook
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.ImpairmentBook				= Book

		AssetRevaluationTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
			Instance Selection
				where (related.AssetAccountType.RevalueLoss
				or related.AssetAccountType.RevalueSurplus)

		DisplayUpdatePostingDateActionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup

		GeneralLedgerTotalCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "GeneralLedgerTotal"

		AssetRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset

		LocalAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	= LocalAsset
				related.Book	= LocalAssetBook

		PYIMADepreciationTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
			  	related.Company				= Company
			   	related.Book				= Book
			   	related.Asset				= Asset
				related.AssetAccountType	= "IMA"
			Instance Selection
				where (related.PostingDate = LocalYearEndDate)

		PYIMTDepreciationTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
			  	related.Company				= Company
			   	related.Book				= Book
			   	related.Asset				= Asset
				related.AssetAccountType	= "IMT"
			Instance Selection
				where (related.PostingDate = LocalYearEndDate)

		IMTImpairmentTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.Company					= Company
				related.Book					= Book
				related.Asset					= Asset
				related.AssetAccountType		= "IMT"
			Instance Selection
				where (related.AssetImpairment	= AssetImpairment)

		IMAImpairmentTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.Company					= Company
				related.Book					= Book
				related.Asset					= Asset
				related.AssetAccountType		= "IMA"
			Instance Selection
				where (related.AssetImpairment	= AssetImpairment)

		AssetFundsRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset
				related.RecordType				= 0

		NewAssetFundsRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetRecordFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset
				related.RecordType				= 0

		TransferAssetFundsRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset
				related.RecordType				= 0
			Instance Selection
				where (related.IsTransferred)

		AssetTransferFundsRel
			one-to-many relation to AssetTransferFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset

		FromAssetTransferFundsRel
			one-to-many relation to AssetTransferFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= LocalTransferAsset

		AssetItemTransferFundsRel
			one-to-many relation to AssetItemTransferFund
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset

		AssetFundRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset	 				= Asset

		NextAssetFundRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetRecordFund
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset	 					= Asset
				related.RecordType					= 0
			Instance Selection
				where (related.AssetFund > LocalLastProcessedFund)

		AdjustmentItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset				= Asset
				related.RecordType			= 0
				related.AccountingEntity	= LocalAccountingEntity
				related.AccountingUnit		= LocalAccountingUnit
				related.Project				= LocalProject
				related.FinanceDimension1	= LocalFinanceDimension1
				related.FinanceDimension2	= LocalFinanceDimension2
				related.FinanceDimension3	= LocalFinanceDimension3
				related.FinanceDimension4	= LocalFinanceDimension4
				related.FinanceDimension5	= LocalFinanceDimension5
				related.FinanceDimension6	= LocalFinanceDimension6
				related.FinanceDimension7	= LocalFinanceDimension7
				related.FinanceDimension8	= LocalFinanceDimension8
				related.FinanceDimension9	= LocalFinanceDimension9
				related.FinanceDimension10	= LocalFinanceDimension10
			Instance Selection
				where (related.NewAssetItemFund)

		AssetFundsByFundRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset	 					= Asset
				related.RecordType					= 0
				related.AccountingEntity			= DistributionAccount.ToAccountingEntity
				related.AccountingUnit				= DistributionAccount.AccountingUnit
				related.Project						= DistributionAccount.Project
				related.FinanceDimension1			= DistributionAccount.FinanceDimension1
				related.FinanceDimension2			= DistributionAccount.FinanceDimension2
				related.FinanceDimension3			= DistributionAccount.FinanceDimension3
				related.FinanceDimension4			= DistributionAccount.FinanceDimension4
				related.FinanceDimension5			= DistributionAccount.FinanceDimension5
				related.FinanceDimension6			= DistributionAccount.FinanceDimension6
				related.FinanceDimension7			= DistributionAccount.FinanceDimension7
				related.FinanceDimension8			= DistributionAccount.FinanceDimension8
				related.FinanceDimension9			= DistributionAccount.FinanceDimension9
				related.FinanceDimension10			= DistributionAccount.FinanceDimension10

		AssetFundControlRel
			one-to-one relation to AssetFundControl
			Field Mapping uses symbolic key
				related.AssetFundControl		= FinanceEnterpriseGroup

		UnreleasedAssetAdjustmentRel
			one-to-one relation to AssetAdjustment
			Field Mapping uses Set7
				related.Asset					= Asset

		UnreleaseAssetAdjustmentRel
			one-to-one relation to AssetAdjustment
			Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
                related.Asset					= Asset
                related.AssetAdjustment			= Asset.LastAssetSequence

		AssetItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetItemFund
				related.Asset					= Asset
				related.AssetItem				= LocalItem
				related.RecordType				= 0

		LocalItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= Asset
				related.RecordType				= 0
				related.AccountingEntity		= LocalAccountingEntity
				related.AccountingUnit			= LocalAccountingUnit
				related.Project					= LocalProject
				related.FinanceDimension1		= LocalFinanceDimension1
				related.FinanceDimension2		= LocalFinanceDimension2
				related.FinanceDimension3		= LocalFinanceDimension3
				related.FinanceDimension4		= LocalFinanceDimension4
				related.FinanceDimension5		= LocalFinanceDimension5
				related.FinanceDimension6		= LocalFinanceDimension6
				related.FinanceDimension7		= LocalFinanceDimension7
				related.FinanceDimension8		= LocalFinanceDimension8
				related.FinanceDimension9		= LocalFinanceDimension9
				related.FinanceDimension10		= LocalFinanceDimension10
			Instance Selection
				where (related.NewAssetItemFund)

		NewAssetItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= Asset
				related.RecordType				= 0
			Instance Selection
				where (related.NewAssetItemFund)

		EXPAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.Company					= Company
				related.Book					= Book
				related.Asset					= Asset
				related.AssetAccountType		= "EXP"


		AssetPeriodOfPerformanceRel
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Project					= LocalEditProject
				related.GeneralLedgerSystemCode	= "AM"

		UnreleasedAssetBookAdjustmentRel
			one-to-one relation to AssetBookAdjustment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetAdjustment			= UnreleaseAssetAdjustmentRel.AssetAdjustment
				related.Book					= Book

		AssetTransactionRel
    		one-to-one relation to AssetTransaction
    		Field Mapping uses symbolic key
    			related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
               	related.Asset					= Asset
				related.Book					= Book
		        related.Company					= Company
		        related.AssetTransaction		= LocalAssetTransactionRecord

		ParentAssetTypeRel
			one-to-one relation to AssetType
			Field Mapping uses symbolic key
				related.Company						= Company
				related.AssetType.Type 				= LocalParentAssetType
				related.AssetType.SubType        	= blank

		AssetBeginBalanceRel						
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where((related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Disposal
				or related.AssetProcess.Transfer
				or related.AssetProcess.Revalue)
				and related.PostingDate < DateRangeFilter.Begin
				and related.AssetAccountType.Asset)

		AssetAdditionBalanceRel						
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where((related.AssetProcess.Addition
				or related.AssetProcess.Adjustment)
				and related.AssetAccountType.Asset
				and related.PostingDate >= DateRangeFilter.Begin)

		AssetDisposalBalanceRel						
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where(related.AssetProcess.Disposal
				and related.AssetAccountType.Asset
				and related.PostingDate within DateRangeFilter)

		AssetTransferBalanceRel						
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where(related.AssetProcess.Transfer
				and related.AssetAccountType.Asset
				and related.PostingDate within DateRangeFilter)

		AssetEndBalanceRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where((related.AssetProcess.Revalue
				or related.AssetProcess.Disposal
				or related.AssetProcess.Transfer
				or related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Depreciation)
				and related.AssetAccountType.Asset)

		AssetDepreciationEndBalanceRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where((related.AssetProcess.Revalue
				or related.AssetProcess.Disposal
				or related.AssetProcess.Transfer
				or related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Depreciation)
				and related.AssetAccountType.AccumulatedDepreciation)

		AssetBalanceRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where((related.AssetProcess.Revalue
				or related.AssetProcess.Disposal
				or related.AssetProcess.Transfer
				or related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Depreciation)
				and (related.AssetAccountType.Asset
				or related.AssetAccountType.AccumulatedDepreciation))

		AssetRevalueBalanceRel						
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where(related.AssetProcess.Revalue
				and related.AssetAccountType.Asset
				and related.PostingDate within DateRangeFilter)

		DepreciationBeginBalanceRel				
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where((related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Depreciation
				or related.AssetProcess.Disposal
				or related.AssetProcess.Transfer
				or related.AssetProcess.Revalue)
				and related.PostingDate < DateRangeFilter.Begin
				and related.AssetAccountType.AccumulatedDepreciation)

		DepreciationAdditionBalanceRel				
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where((related.AssetProcess.Addition
				or related.AssetProcess.Adjustment
				or related.AssetProcess.Depreciation
				or (related.AssetProcess.Disposal
				and related.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount < 0))
				and related.PostingDate >= DateRangeFilter.Begin
				and related.AssetAccountType.AccumulatedDepreciation)

		DepreciationDisposalBalanceRel				
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where(related.AssetProcess.Disposal
				and related.AssetAccountType.AccumulatedDepreciation
				and related.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount > 0
				and related.PostingDate within DateRangeFilter)

		DepreciationTransferBalanceRel				
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where(related.AssetProcess.Transfer
				and related.AssetAccountType.AccumulatedDepreciation
				and related.PostingDate within DateRangeFilter)

		DepreciationRevalueBalanceRel				
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			   	related.Asset					= Asset
				related.Book					= Book
				related.Company					= Company
				related.AssetTransaction		= AssetTransaction
			Instance Selection
				where(related.AssetProcess.Revalue
				and related.AssetAccountType.AccumulatedDepreciation
				and related.PostingDate within DateRangeFilter)

		AssetBatchUpdateResultRel
			one-to-one relation to AssetBatchUpdateResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetBatchUpdateResult	= BatchUpdateResult
		SummaryRecordsRel
			one-to-many relation to AssetTransactionSummary
			Field Mapping uses Set0
				related.Company												= LocalCompany
				related.Book												= LocalBook
			Instance Selection
				where (related.AssetTransactionSummary.DimensionCode = blank
				or    (related.YearEndDate >= LocalBeginDate
				and    related.YearEndDate < LocalYearEndDate))

	Dimensions
		DistributionAccount.GeneralLedgerChartAccount
			dimension name is ChartAccount
			caption is representative text
			Attributes
				AccountDescription
		Company
			dimension name is AssetCompany
		Book
			caption is "(<Description>)"
			dimension name is AssetBook
		AssetAccountType
			dimension name is AccountType
		Asset

			dimension name is Asset
		TransactionMonth
			is a monthly period dimension with year of CurrentYear
				current year is CurrentYear
				current period is CurrentMonth

		TransactionStatus
			dimension name is Status
			Instance Selection
				where (TransactionStatus.Released)


	Measures

		DerivedAdditions
			measure name is Additions
		DerivedDepreciation
			measure name is Depreciation
 		DerivedAdjustments
			measure name is Adjustments
		DerivedTransfers
			measure name is Transfers
		DerivedDisposals
			measure name is Disposals


	Sets

		Set10
			bypass no duplicates validation
			indexed
			Sort Order
				Asset
				AssetTransaction descending
				Company
				Book
				TransactionStatus

		Set2
			bypass no duplicates validation
			indexed
			Sort Order
				Company
				TransactionStatus
				AssetProcess
				Asset
				AssetTransaction
				Book

		Set2ByAccount 
			bypass no duplicates validation
			indexed
			Sort Order
				Book
				Company
				DistributionAccount.GeneralLedgerChartAccount
				TransactionStatus
				AssetProcess
				Asset
				AssetTransaction


		ByCompanyBookAccountAndProcess
			duplicates
			Sort Order
				Company
				Book
				DistributionAccount.ToAccountingEntity
				DistributionAccount.AccountingUnit
				DistributionAccount.GeneralLedgerChartAccount
				DistributionAccount.Project
				DistributionAccount.FinanceDimension1
				DistributionAccount.FinanceDimension2
				DistributionAccount.FinanceDimension3
				DistributionAccount.FinanceDimension4
				DistributionAccount.FinanceDimension5
				DistributionAccount.FinanceDimension6
				DistributionAccount.FinanceDimension7
				DistributionAccount.FinanceDimension8
				DistributionAccount.FinanceDimension9
				DistributionAccount.FinanceDimension10
				YearEndDate
				AssetProcess
				TransactionStatus


		Set4
			bypass no duplicates validation
			indexed
			Instance Selection
				where (IsMemoOrUnreleased)
			Sort Order
				ProcessAsset
				ProcessSequence
				TransactionStatus
				Asset
				AssetTransaction
				Book
				Company

		Set5
			bypass no duplicates validation
			indexed
			Sort Order
				TransactionStatus
				Book
				Company
				DistributionAccount.AccountingUnit
				DistributionAccount.GeneralLedgerChartAccount
				PostingDate
				Asset
				AssetTransaction

		Set1
			bypass no duplicates validation
			Sort Order
				Asset
				TransactionStatus
				Company
				Book
				AssetTransaction

		Set11
			bypass no duplicates validation
			indexed
			Sort Order
				Company
				AssetType
				Asset
				Book
				PostingDate
				AssetTransaction


		ByCompanyBookAssetAccountType
			bypass no duplicates validation
			indexed
			Sort Order
				Company
				Book
				Asset
				AssetAccountType
				PostingDate
				AssetTransaction

		ByAssetManagementInterfaceResult
			indexed
			Sort Order
				FinanceEnterpriseGroup
				AssetManagementInterfaceResult
				Asset
				Book
				Company
				AssetTransaction

		ByPeriodEndDate
			Sort Order
				FinanceEnterpriseGroup
				PostingDate descending
				Company
				TransactionStatus
				Book
				Asset
				AssetTransaction

	Rule Blocks

		UpdateCreditAndDebitBalances
			initialize LocalCreditChange
			initialize LocalDebitChange
			if (TransactionAmount changed)
				if (old TransactionAmount 		> 0)
					if (TransactionAmount 		> 0)
						LocalDebitChange 	= (TransactionAmount - old TransactionAmount)
					else
						LocalDebitChange 		= (old TransactionAmount * -1)
						LocalCreditChange 		= TransactionAmount
					if (AssetControlTransactionRel not exists)
						invoke BalanceUpdate AssetBookRel
							invoked.DebitBalance  += LocalDebitChange
							invoked.CreditBalance += LocalCreditChange

				if (old TransactionAmount 		< 0)
					if (TransactionAmount 		< 0)
						LocalCreditChange 	= (old TransactionAmount - TransactionAmount)
					else
						LocalCreditChange 		= old TransactionAmount
						LocalDebitChange 		= TransactionAmount
					if (AssetControlTransactionRel not exists)
						invoke BalanceUpdate AssetBookRel
							invoked.DebitBalance  += LocalDebitChange
							invoked.CreditBalance -= LocalCreditChange

			else
				if (action type.Create)
					if (TransactionAmount		> 0)
						LocalDebitChange 		= TransactionAmount
					else
						LocalCreditChange 		= TransactionAmount

					invoke BalanceUpdate AssetBookRel
						if (TransactionAmount 	> 0)
							invoked.DebitBalance  += LocalDebitChange
						else
							invoked.CreditBalance += LocalCreditChange

			if (AssetControlTransactionRel exists)
				invoke Increment AssetControlTransactionRel
					invoked.InputDebitAmount 	= LocalDebitChange
					invoked.InputCreditAmount 	= LocalCreditChange



		CheckACM								
			initialize LocalSkipCheckACM
			initialize LocalFullyDepreciated
			AssetTransactionAssetProcess = AssetProcess
			if (AssetAccountType.Asset)
				if ((AssetBookRel.LifeToDateDepreciation not entered
				or  AssetBookRel.YearToDateDepreciation entered)
				and !LocalCreateHistory)
					LocalSkipCheckACM = true
				else
					if (AssetProcess.Addition)
						if (AssetBookRel.LifeToDateDepreciation entered
						and AssetBookRel.LifeToDateDepreciation = AssetBookRel.Basis)
							LocalFullyDepreciated = true

			if (Asset.FundAllocationRequired)
				LocalLastAssetFund = last NewAssetFundsRel.AssetFund
				if (LocalLastAssetFund = AssetBookRel.LastDepreciationFund)
					LocalSkipCheckACM = true

			if (!LocalSkipCheckACM)
				if (AssetProcess.Addition
				or IsFirstAssetImpairment
				or IsFirstAssetImpairmentAdjustment
				or IsZeroImpairment
				or PriorZeroImpairment
				or LocalAdjustmentUpdate)
					LocalYearEndDate = CurrentBookCalendarRel.YearBeginDate - 1 day
					initialize LocalAssetTransaction
					if (AssetBookRel.InServiceDate <= LocalYearEndDate
					or  IsFutureInServiceDate)
						if (AssetBookRel.LifeToDateDepreciation != AssetBookRel.YearToDateDepreciation
						or IsZeroImpairment
						or IsFutureInServiceDate)

							if	(Book.Impairment
							and (AssetProcess.Impairment
							or	 AssetProcess.Adjustment))
								if (AssetAccountType.ImpairmentLoss)
									if (IsZeroImpairment)
										if (AssetImpairment.Status.Released
										and OtherImpairmentsExist)
											LocalDepreciationDifference	= sum PYIMTDepreciationTransactionsRel.TransactionAmount
											LocalDepreciationDifference = LocalDepreciationDifference * -1
										else
											LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation
									else
									if (PriorZeroImpairment)
										LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation + (sum IMTImpairmentTransactionsRel.TransactionAmount)
										LocalDepreciationDifference = LocalDepreciationDifference * -1
									else
										LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation + (sum PYIMTDepreciationTransactionsRel.TransactionAmount)
										LocalDepreciationDifference = LocalDepreciationDifference * -1
								else
								if (AssetAccountType.ImpairmentWriteOff)
									if (IsZeroImpairment)
										if (AssetImpairment.Status.Released
										and OtherImpairmentsExist)
											LocalDepreciationDifference	= sum PYIMADepreciationTransactionsRel.TransactionAmount
											LocalDepreciationDifference = LocalDepreciationDifference * -1
										else
											LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation
											LocalDepreciationDifference	= LocalDepreciationDifference * -1
									else
									if (PriorZeroImpairment)
										LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation - (sum IMAImpairmentTransactionsRel.TransactionAmount)
									else
										LocalDepreciationDifference	= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation - (sum PYIMADepreciationTransactionsRel.TransactionAmount)
							else
								if (LocalAdjustmentUpdate)
									LocalDepreciationDifference		= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation - (UnreleasedAssetBookAdjustmentRel.LifeToDateDepreciation - UnreleasedAssetBookAdjustmentRel.YearToDateDepreciation)
								else
									LocalDepreciationDifference = AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation

							if (AssetAccountType.Asset
							or  AssetAccountType.AccumulatedDepreciation
							or  TransactionAmount < 1)
								if (!Book.Impairment)
									LocalDepreciationDifference = LocalDepreciationDifference * -1

							invoke DefaultAccounts Asset
						 	GetDefaultAccounts = true

							LocalCurrencyAmount 		= LocalDepreciationDifference
							LocalDepreciationDifference	= RoundedCurrencyAmount
							if (GetHistoryTransCodeBlocks = true
							and LocalDepreciationDifference entered)
								invoke Create AssetTransaction
									assign result to LocalAssetTransaction
									fill in fields from this instance
										except invoked.AssetTransaction
										except invoked.YearEndDate
									initialize invoked.AssetTransactionAmount
									invoked.OnlineSystemCreate					= true
									invoked.DistributionAccount					= TransientACMAccount
									invoked.TransactionStatus					= "H"
									if (!IsZeroImpairment)
										if ((AssetProcess.Addition
										or AssetProcess.Adjustment)
										and AssetBookRel.HistoryPostingDate.PriorYearEndDate)
											invoked.PostingDate						= LocalYearEndDate


										if ((AssetProcess.Addition
										or AssetProcess.Adjustment)
										and AssetBookRel.HistoryPostingDate.DefaultPostingDate
										and UnreleasedTransactionsRel exists)
											invoked.PostingDate					= PostingDate
										else
											if ((AssetProcess.Adjustment
											or  LocalAdjustmentUpdate)
											and AssetBookRel.HistoryPostingDate.DefaultPostingDate)
												invoked.PostingDate					= UnreleaseAssetAdjustmentRel.PostingDate


									invoked.ProcessDate							= LocalYearEndDate
									if (Book.Impairment)
										if (AssetAccountType.ImpairmentLoss)
											invoked.AssetAccountType				= "IMT"
											LocalAccountType 						= "IMT"
											invoked.DistributionAccount				= AssetBookRel.TranAccumulatedImpairmentLoss
											LocalDistributionAccount				= AssetBookRel.TranAccumulatedImpairmentLoss
										else
										if (AssetAccountType.ImpairmentWriteOff)
											invoked.AssetAccountType				= "IMA"
											LocalAccountType 						= "IMA"
											invoked.DistributionAccount				= AssetBookRel.TranImpairmentAmortization
											LocalDistributionAccount				= AssetBookRel.TranImpairmentAmortization

										if (Book.PostHistory)
											if (LocalYearEndDate within CompanySystemClosingControlRel.ValidEntryDate)
												invoked.Reference					= "Posted History Transaction"
											else
												confirmation required
													"ComputeWithPostHistoryOptionIsCreatingHistoryTransactionsOutsideTheValidEntryDateRange,SelectYesToContinue"
												invoked.Reference					= "Posted History Transaction"
										else
											invoked.Reference						= "Impairment History Transaction"
										invoked.ProcessSequence						= Asset.LastAssetImpairment
										if	(AssetProcess.Adjustment)
											invoked.AssetProcess					= "ADJ"
										else
											invoked.AssetProcess					= "IMA"
									else
										invoked.AssetAccountType					= "ACM"
										LocalAccountType 							= "ACM"
										invoked.DistributionAccount					= TransientACMAccount
										LocalDistributionAccount					= TransientACMAccount
										if (LocalAdjustmentUpdate)
											invoked.AssetProcess					= "ADJ"
											invoked.Description                  = "Asset " + Asset + " Adjustment"
											if(Book.PostHistory)
												invoked.Reference                 = "Posted History Transaction"
											else
												invoked.Reference                 = "Adjustment"
										if (Book.PostHistory)
											invoked.Reference						= "Posted History Transaction"



									if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
										TransientExchangeDate						= TransactionDate

										LocalCurrencyExchange.TransactionAmount		= LocalDepreciationDifference
										include ConvertLocalDepreciationDifference
									else
										initialize BookDepreciationDifference

									if (Book.PostCurrency.Book)
										invoked.TransientBookCurrency				= Book.Currency
									else
										invoked.TransientBookCurrency				= Asset.Currency
									invoked.BatchUpdateResult						= LocalBatchUpdateResult
									if (AssetFundAllocationRequired
									and LocalFundAccountType
									and AssetFundsRel exists)
										LocalLastAssetFund						= last NewAssetFundsRel.AssetFund
										LocalAssetFund							= first NewAssetFundsRel.AssetFund
										if (AssetBookRel.LastDepreciationFund entered)
											LocalLastProcessedFund				= AssetBookRel.LastDepreciationFund
											LocalAssetFund						= first NextAssetFundRel.AssetFund
											LocalFundPercent					= first NextAssetFundRel.PercentContribution
											LocalAccountingEntity				= first NextAssetFundRel.AccountingEntity
											LocalAccountingUnit					= first NextAssetFundRel.AccountingUnit
											LocalFund							= first NextAssetFundRel.Fund
											LocalProject						= first NextAssetFundRel.Project
									  		LocalFinanceDimension1				= first NextAssetFundRel.FinanceDimension1
									  		LocalFinanceDimension2				= first NextAssetFundRel.FinanceDimension2
									  		LocalFinanceDimension3				= first NextAssetFundRel.FinanceDimension3
									  		LocalFinanceDimension4				= first NextAssetFundRel.FinanceDimension4
									  		LocalFinanceDimension5				= first NextAssetFundRel.FinanceDimension5
									   		LocalFinanceDimension6				= first NextAssetFundRel.FinanceDimension6
									   		LocalFinanceDimension7				= first NextAssetFundRel.FinanceDimension7
									  		LocalFinanceDimension8				= first NextAssetFundRel.FinanceDimension8
									  		LocalFinanceDimension9				= first NextAssetFundRel.FinanceDimension9
									  		LocalFinanceDimension10				= first NextAssetFundRel.FinanceDimension10
										else
											LocalAssetFund						= first NewAssetFundsRel.AssetFund
											LocalFundPercent					= first NewAssetFundsRel.PercentContribution
											LocalAccountingEntity				= first NewAssetFundsRel.AccountingEntity
											LocalAccountingUnit					= first NewAssetFundsRel.AccountingUnit
											LocalFund							= first NewAssetFundsRel.Fund
											LocalProject						= first NewAssetFundsRel.Project
									  		LocalFinanceDimension1				= first NewAssetFundsRel.FinanceDimension1
									  		LocalFinanceDimension2				= first NewAssetFundsRel.FinanceDimension2
									  		LocalFinanceDimension3				= first NewAssetFundsRel.FinanceDimension3
									  		LocalFinanceDimension4				= first NewAssetFundsRel.FinanceDimension4
									  		LocalFinanceDimension5				= first NewAssetFundsRel.FinanceDimension5
									   		LocalFinanceDimension6				= first NewAssetFundsRel.FinanceDimension6
									   		LocalFinanceDimension7				= first NewAssetFundsRel.FinanceDimension7
									  		LocalFinanceDimension8				= first NewAssetFundsRel.FinanceDimension8
									  		LocalFinanceDimension9				= first NewAssetFundsRel.FinanceDimension9
									  		LocalFinanceDimension10				= first NewAssetFundsRel.FinanceDimension10

										if (LocalAccountingEntity entered)
											LocalDistributionAccount.ToAccountingEntity	= LocalAccountingEntity
										if (LocalAccountingUnit		entered)
											LocalDistributionAccount.AccountingUnit		= LocalAccountingUnit
										if (LocalProject			entered)
											LocalDistributionAccount.Project			= LocalProject
										if (LocalFinanceDimension1	entered)
											LocalDistributionAccount.FinanceDimension1	= LocalFinanceDimension1
										if (LocalFinanceDimension2	entered)
											LocalDistributionAccount.FinanceDimension2	= LocalFinanceDimension2
										if (LocalFinanceDimension3	entered)
											LocalDistributionAccount.FinanceDimension3	= LocalFinanceDimension3
										if (LocalFinanceDimension4	entered)
											LocalDistributionAccount.FinanceDimension4	= LocalFinanceDimension4
										if (LocalFinanceDimension5	entered)
											LocalDistributionAccount.FinanceDimension5	= LocalFinanceDimension5
										if (LocalFinanceDimension6	entered)
											LocalDistributionAccount.FinanceDimension6	= LocalFinanceDimension6
										if (LocalFinanceDimension7	entered)
											LocalDistributionAccount.FinanceDimension7	= LocalFinanceDimension7
										if (LocalFinanceDimension8	entered)
											LocalDistributionAccount.FinanceDimension8	= LocalFinanceDimension8
										if (LocalFinanceDimension9	entered)
											LocalDistributionAccount.FinanceDimension9	= LocalFinanceDimension9
										if (LocalFinanceDimension10	entered)
											LocalDistributionAccount.FinanceDimension10	= LocalFinanceDimension10
										if (LocalAssetFund		  						= LocalLastAssetFund)
											LocalDepreciationDifference 				= (LocalDepreciationDifference - AssetBookRel.IncrementalDepreciation)  
											BookDepreciationDifference                  = (BookDepreciationDifference * LocalFundPercent)
										else
											LocalDepreciationDifference 				= (LocalDepreciationDifference * LocalFundPercent)	
											BookDepreciationDifference                  = (BookDepreciationDifference * LocalFundPercent)
											LocalIncrementalACM							= LocalDepreciationDifference
											UpdateAssetBookACM			 				= true
										invoked.DistributionAccount 					= LocalDistributionAccount

										invoked.TransactionAmount						= LocalDepreciationDifference
									else

										invoked.TransactionAmount						= LocalDepreciationDifference
										LocalIncrementalACM								= LocalDepreciationDifference
										LocalAssetFund									= LocalLastAssetFund
										UpdateAssetBookACM			 					= true

									if (Book.PostCurrency.Book)
										invoked.TransientBookCurrency					= Book.Currency

									else
										invoked.TransientBookCurrency					= Asset.Currency

									invoked.AssetTransactionAmount.TransactionAmount 	= LocalDepreciationDifference
									invoked.AssetTransactionAmount.ExchangeDate 		= TransactionDate
									invoked.AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency

								if (UpdateAssetBookACM)			
									invoke IncrementHistoryAmount AssetBookRel
										invoked.PrmIncrementalDepreciation  			= LocalIncrementalACM
										invoked.PrmLastDepreciationFund					= LocalAssetFund
									initialize UpdateAssetBookACM

								if (LocalAssetTransaction.YearEndDate entered)




















									invoke Update ACMAssetTransactionSummaryRel  
										invoked.FinanceDimension1					= LocalDistributionAccount.FinanceDimension1
										invoked.FinanceDimension2					= LocalDistributionAccount.FinanceDimension2
										invoked.FinanceDimension3					= LocalDistributionAccount.FinanceDimension3
										invoked.FinanceDimension4					= LocalDistributionAccount.FinanceDimension4
										invoked.FinanceDimension5					= LocalDistributionAccount.FinanceDimension5
										invoked.FinanceDimension6					= LocalDistributionAccount.FinanceDimension6
										invoked.FinanceDimension7					= LocalDistributionAccount.FinanceDimension7
										invoked.FinanceDimension8					= LocalDistributionAccount.FinanceDimension8
										invoked.FinanceDimension9					= LocalDistributionAccount.FinanceDimension9
										invoked.FinanceDimension10					= LocalDistributionAccount.FinanceDimension10
										invoked.BaseNumberOfDecimals				= Book.Currency.NumberOfDecimals
										invoked.InputProcess = AssetProcess
										if (BookDepreciationDifference entered)
											invoked.InputAmount						= BookDepreciationDifference
										else
											invoked.InputAmount						= LocalDepreciationDifference

		UpdateBookHistory					
			if (!AssetProcess.Addition
			and !Book.TrackDepreciationHistory
			and !LocalAdjustmentUpdate)
				LocalSkipUpdateBookHistory = true

			if (AssetAccountType.Asset
			and !LocalFullyDepreciated
			and (AssetBookRel.LifeToDateDepreciation not entered
			or   AssetBookRel.YearToDateDepreciation entered)
			and !LocalCreateHistory)
				LocalSkipUpdateBookHistory = true

			if (Asset.FundAllocationRequired)
				LocalLastAssetFund = last NewAssetFundsRel.AssetFund
				if ((AssetBookRel.IncrementalExpense entered
				and AssetBookRel.LastExpenseFund = blank)
				or LocalLastAssetFund = AssetBookRel.LastExpenseFund)
					LocalSkipUpdateBookHistory = true
			if (!LocalSkipUpdateBookHistory)
				LocalYearEndDate = CurrentBookCalendarRel.YearEndDate

				if (AssetProcess.Addition
				or  AssetProcess.ReAdd
				or AssetProcess.Impairment
				or LocalAdjustmentUpdate)

					if (AssetProcess.Addition
					or AssetProcess.Impairment
					or LocalAdjustmentUpdate)
						LocalYearEndDate = CurrentBookCalendarRel.YearBeginDate - 1 day
						initialize LocalAssetTransaction

						if (AssetBookRel.InServiceDate <= LocalYearEndDate
						or  IsFutureInServiceDate)


							if ((AssetBookRel.LifeToDateDepreciation != AssetBookRel.YearToDateDepreciation
							and !LocalExpenseTransactionCreated)
							or   IsFutureInServiceDate)

								if (LocalAdjustmentUpdate)
									LocalDepreciationDifference		= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation - (UnreleasedAssetBookAdjustmentRel.LifeToDateDepreciation - UnreleasedAssetBookAdjustmentRel.YearToDateDepreciation)
								else
									LocalDepreciationDifference		= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation

								invoke DefaultAccounts Asset
							 	GetDefaultAccounts = true
								LocalCurrencyAmount 		= LocalDepreciationDifference
								LocalDepreciationDifference	= RoundedCurrencyAmount
								if (GetHistoryTransCodeBlocks = true
								and LocalDepreciationDifference entered)
									invoke Create AssetTransaction
										assign result to LocalAssetTransaction
										fill in fields from this instance
											except invoked.YearEndDate
										initialize invoked.AssetTransaction
										initialize invoked.AssetTransactionAmount
										invoked.OnlineSystemCreate					= true
										invoked.DistributionAccount					= TransientEXPAccount
										invoked.TransactionStatus					= "H"
										if ((AssetProcess.Addition
										or AssetProcess.Adjustment)
										and AssetBookRel.HistoryPostingDate.PriorYearEndDate)
											invoked.PostingDate						= LocalYearEndDate


										if ((AssetProcess.Addition
										or AssetProcess.Adjustment)
										and AssetBookRel.HistoryPostingDate.DefaultPostingDate
										and UnreleasedTransactionsRel exists)
												invoked.PostingDate					= PostingDate
										else
											if ((AssetProcess.Adjustment
											or  LocalAdjustmentUpdate)
											and AssetBookRel.HistoryPostingDate.DefaultPostingDate)
												invoked.PostingDate					= UnreleaseAssetAdjustmentRel.PostingDate


										invoked.ProcessDate							= LocalYearEndDate
										if (Book.Impairment)
											invoked.AssetAccountType				= "IMT"
											LocalAccountType 						= "IMT"
											invoked.DistributionAccount				= AssetBookRel.TranAccumulatedImpairmentLoss
											LocalDistributionAccount				= AssetBookRel.TranAccumulatedImpairmentLoss
											if (Book.PostHistory)
												invoked.Reference					= "Posted History Transaction"
											else
												invoked.Reference					= "Impairment History Transaction"
											invoked.ProcessSequence					= Asset.LastAssetImpairment
											invoked.AssetProcess					= "IMA"
											invoked.AssetImpairment					= AssetBookRel.DerivedAssetImpairment
										else
											invoked.AssetAccountType				= "EXP"
											LocalAccountType 						= "EXP"
											invoked.DistributionAccount				= TransientEXPAccount
											LocalDistributionAccount				= TransientEXPAccount
											if (LocalAdjustmentUpdate)
												if (Book.PostHistory)
													invoked.Reference						= "Posted History Transaction"
												else
													invoked.Reference						= "Adjustment"
												invoked.Description                     = "Asset " + Asset + " Adjustment"
												invoked.AssetProcess				= "ADJ"
											if (Book.PostHistory)
												invoked.Reference					= "Posted History Transaction"


										invoked.BatchUpdateResult					= LocalBatchUpdateResult
										if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
											TransientExchangeDate						= TransactionDate

											LocalCurrencyExchange.TransactionAmount		= LocalDepreciationDifference
											include ConvertLocalDepreciationDifference
										else
											initialize BookDepreciationDifference
										if (Asset.FundAllocationRequired
										and LocalFundAccountType
										and AssetFundsRel exists)
											LocalLastAssetFund					= last NewAssetFundsRel.AssetFund
											LocalAssetFund						= first NewAssetFundsRel.AssetFund
											if (AssetBookRel.LastExpenseFund entered)
												LocalLastProcessedFund				= AssetBookRel.LastExpenseFund
												LocalAssetFund						= first NextAssetFundRel.AssetFund
												LocalFundPercent					= first NextAssetFundRel.PercentContribution
												LocalAccountingEntity				= first NextAssetFundRel.AccountingEntity
												LocalAccountingUnit					= first NextAssetFundRel.AccountingUnit
												LocalFund							= first NextAssetFundRel.Fund
												LocalProject						= first NextAssetFundRel.Project
										  		LocalFinanceDimension1				= first NextAssetFundRel.FinanceDimension1
										  		LocalFinanceDimension2				= first NextAssetFundRel.FinanceDimension2
										  		LocalFinanceDimension3				= first NextAssetFundRel.FinanceDimension3
										  		LocalFinanceDimension4				= first NextAssetFundRel.FinanceDimension4
										  		LocalFinanceDimension5				= first NextAssetFundRel.FinanceDimension5
										   		LocalFinanceDimension6				= first NextAssetFundRel.FinanceDimension6
										   		LocalFinanceDimension7				= first NextAssetFundRel.FinanceDimension7
										  		LocalFinanceDimension8				= first NextAssetFundRel.FinanceDimension8
										  		LocalFinanceDimension9				= first NextAssetFundRel.FinanceDimension9
										  		LocalFinanceDimension10				= first NextAssetFundRel.FinanceDimension10
											else
												LocalAssetFund						= first NewAssetFundsRel.AssetFund
												LocalFundPercent					= first NewAssetFundsRel.PercentContribution
												LocalAccountingEntity				= first NewAssetFundsRel.AccountingEntity
												LocalAccountingUnit					= first NewAssetFundsRel.AccountingUnit
												LocalFund							= first NewAssetFundsRel.Fund
												LocalProject						= first NewAssetFundsRel.Project
										  		LocalFinanceDimension1				= first NewAssetFundsRel.FinanceDimension1
										  		LocalFinanceDimension2				= first NewAssetFundsRel.FinanceDimension2
										  		LocalFinanceDimension3				= first NewAssetFundsRel.FinanceDimension3
										  		LocalFinanceDimension4				= first NewAssetFundsRel.FinanceDimension4
										  		LocalFinanceDimension5				= first NewAssetFundsRel.FinanceDimension5
										   		LocalFinanceDimension6				= first NewAssetFundsRel.FinanceDimension6
										   		LocalFinanceDimension7				= first NewAssetFundsRel.FinanceDimension7
										  		LocalFinanceDimension8				= first NewAssetFundsRel.FinanceDimension8
										  		LocalFinanceDimension9				= first NewAssetFundsRel.FinanceDimension9
										  		LocalFinanceDimension10				= first NewAssetFundsRel.FinanceDimension10

											if (LocalAccountingEntity entered)
												LocalDistributionAccount.ToAccountingEntity	= LocalAccountingEntity
											if (LocalAccountingUnit		entered)
												LocalDistributionAccount.AccountingUnit		= LocalAccountingUnit
											if (LocalProject			entered)
												LocalDistributionAccount.Project			= LocalProject
											if (LocalFinanceDimension1	entered)
												LocalDistributionAccount.FinanceDimension1	= LocalFinanceDimension1
											if (LocalFinanceDimension2	entered)
												LocalDistributionAccount.FinanceDimension2	= LocalFinanceDimension2
											if (LocalFinanceDimension3	entered)
												LocalDistributionAccount.FinanceDimension3	= LocalFinanceDimension3
											if (LocalFinanceDimension4	entered)
												LocalDistributionAccount.FinanceDimension4	= LocalFinanceDimension4
											if (LocalFinanceDimension5	entered)
												LocalDistributionAccount.FinanceDimension5	= LocalFinanceDimension5
											if (LocalFinanceDimension6	entered)
												LocalDistributionAccount.FinanceDimension6	= LocalFinanceDimension6
											if (LocalFinanceDimension7	entered)
												LocalDistributionAccount.FinanceDimension7	= LocalFinanceDimension7
											if (LocalFinanceDimension8	entered)
												LocalDistributionAccount.FinanceDimension8	= LocalFinanceDimension8
											if (LocalFinanceDimension9	entered)
												LocalDistributionAccount.FinanceDimension9	= LocalFinanceDimension9
											if (LocalFinanceDimension10	entered)
												LocalDistributionAccount.FinanceDimension10	= LocalFinanceDimension10
											if (LocalAssetFund		  							= LocalLastAssetFund)
												LocalDepreciationDifference 					= (LocalDepreciationDifference - AssetBookRel.IncrementalExpense)  
												BookDepreciationDifference                  = (BookDepreciationDifference * LocalFundPercent)
											else
												LocalDepreciationDifference 					= (LocalDepreciationDifference * LocalFundPercent)	
												BookDepreciationDifference                  = (BookDepreciationDifference * LocalFundPercent)
												LocalIncrementalEXP								= LocalDepreciationDifference
												UpdateAssetBookEXP			 					= true
											invoked.DistributionAccount 						= LocalDistributionAccount

											invoked.TransactionAmount							= LocalDepreciationDifference
										else

											invoked.TransactionAmount							= LocalDepreciationDifference
											LocalIncrementalEXP									= LocalDepreciationDifference
											LocalAssetFund										= LocalLastAssetFund
											UpdateAssetBookEXP			 						= true
										if (Book.PostCurrency.Book)
											invoked.TransientBookCurrency						= Book.Currency
										else
											invoked.TransientBookCurrency						= Asset.Currency

										invoked.AssetTransactionAmount.TransactionAmount 		= LocalDepreciationDifference
										invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
										invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency

									if (UpdateAssetBookEXP)			
										invoke IncrementExpenseAmount AssetBookRel
											invoked.PrmIncrementalExpense  						= LocalIncrementalEXP
											invoked.PrmLastExpenseFund							= LocalAssetFund
										initialize UpdateAssetBookEXP


									if (LocalAssetTransaction.YearEndDate entered)



















										invoke Update EXPAssetTransactionSummaryRel
											invoked.FinanceDimension1							= LocalDistributionAccount.FinanceDimension1
											invoked.FinanceDimension2							= LocalDistributionAccount.FinanceDimension2
											invoked.FinanceDimension3							= LocalDistributionAccount.FinanceDimension3
											invoked.FinanceDimension4							= LocalDistributionAccount.FinanceDimension4
											invoked.FinanceDimension5							= LocalDistributionAccount.FinanceDimension5
											invoked.FinanceDimension6							= LocalDistributionAccount.FinanceDimension6
											invoked.FinanceDimension7							= LocalDistributionAccount.FinanceDimension7
											invoked.FinanceDimension8							= LocalDistributionAccount.FinanceDimension8
											invoked.FinanceDimension9							= LocalDistributionAccount.FinanceDimension9
											invoked.FinanceDimension10							= LocalDistributionAccount.FinanceDimension10
											invoked.BaseNumberOfDecimals						= Book.Currency.NumberOfDecimals

											invoked.InputProcess = AssetProcess
											if (BookDepreciationDifference entered)
												invoked.InputAmount								= BookDepreciationDifference
											else
												invoked.InputAmount								= LocalDepreciationDifference


								LocalExpenseTransactionCreated = true
								SavedAsset = Asset

								if (Book.TrackDepreciationHistory)
									invoke Update AssetBookHistoryRel
										invoked.Life	= AssetBookRel.Life

									LocalCalendarPeriod = CurrentBookCalendarRel.NumberOfPeriods

									initialize LocalLifeRemaining
									if (AssetBookRel.LifeRemaining entered)
										LocalLifeRemaining	= (((AssetBookRel.LifeRemaining * CurrentBookCalendarRel.DepreciationPeriodsPerYear) + (CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed * 12)) / CurrentBookCalendarRel.DepreciationPeriodsPerYear)

									if (AssetBookPeriodHistoryRel not exists)

										if (HistoryYearBookCalendarsRel exists)
											LocalHistoryBeginDate = HistoryYearBookCalendarsRel.YearBeginDate
										else
											LocalHistoryBeginDate = CurrentBookCalendarRel.YearBeginDate

										invoke Update AssetBookHistoryRel

											invoked.YearToDateDepreciation			= LocalDepreciationDifference
											if (Company.DefaultPostingDate.PurchaseDate
											and PostingDate < LocalHistoryBeginDate
											and !AssetAccountType.Asset)
												LocalDeprExpSum = (sum EXPAssetTransactionRel.DerivedTransactionAmount)
												invoked.LifeToDateDepreciation			= LocalDeprExpSum
												invoked.BeginningLifeToDateDepreciation	= DerivedTransactionAmount
											else
												invoked.LifeToDateDepreciation			= LocalDepreciationDifference


										invoke Create AssetBookPeriodHistory
											invoked.Asset							= Asset
											invoked.Book							= Book
											invoked.Company							= Company
											invoked.YearEndDate						= LocalYearEndDate
											invoked.AssetBookPeriodHistory.Period	= LocalCalendarPeriod
											invoked.CurrentPeriodDepreciation		= LocalDepreciationDifference
											if (Company.DefaultPostingDate.PurchaseDate
											and PostingDate < LocalYearEndDate
											and LocalHistoryBeginDate <= PostingDate
											and !AssetAccountType.Asset)
												invoked.YearToDatePeriodDepreciation	= (DerivedTransactionAmount + LocalDepreciationDifference)
											else
												invoked.YearToDatePeriodDepreciation	= LocalDepreciationDifference
											invoked.Basis							= AssetBookRel.Basis
											invoked.LifeRemaining					= LocalLifeRemaining


									else
										invoke Update AssetBookPeriodHistoryRel
											invoked.CurrentPeriodDepreciation		+= LocalDepreciationDifference
											invoked.YearToDatePeriodDepreciation	+= LocalDepreciationDifference
											invoked.Basis							= AssetBookRel.Basis
											invoked.LifeRemaining					= LocalLifeRemaining

										if (AssetBookPeriodHistoryRel.CurrentPeriodDepreciation not entered)
											invoke Delete AssetBookPeriodHistoryRel



				else		
					if (!AssetProcess.Adjustment)
						invoke Update AssetBookHistoryRel
							invoked.Life	= AssetBookRel.Life




				if (CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed !=0
				and AssetBookRel.YearToDateDepreciation !=0)
					if (Book.TrackDepreciationHistory)
						initialize LocalDepreciationPeriodDates
						initialize LocalDepreciationPeriodBeginDate
						initialize I1
						while (I1 <= 54)
							I1 += 1
							if (I1 = 1)
								LocalDepreciationPeriodDates.DepreciationPeriodNumbers.DepreciationPeriodNumber[I1]			= BookCalendarsRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[I1]
								LocalDepreciationPeriodDates.DepreciationPeriodBeginDates.DepreciationPeriodBeginDate[I1]	= BookCalendarsRel.YearBeginDate
								LocalDepreciationPeriodDates.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]		= BookCalendarsRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]
							else
								LocalDepreciationPeriodDates.DepreciationPeriodNumbers.DepreciationPeriodNumber[I1]			= BookCalendarsRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[I1]
								LocalDepreciationPeriodDates.DepreciationPeriodBeginDates.DepreciationPeriodBeginDate[I1]	= LocalDepreciationPeriodBeginDate
								LocalDepreciationPeriodDates.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]		= BookCalendarsRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]

							LocalDepreciationPeriodBeginDate = BookCalendarsRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1] + 1 day

						initialize I1
						I1 = 1
						while (I1 <= 54
						and LocalDepreciationPeriodDates.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1] entered)
							if (LocalDepreciationPeriodDates.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1] entered)
								if (PostingDate	>= LocalDepreciationPeriodDates.DepreciationPeriodBeginDates.DepreciationPeriodBeginDate[I1]
								and PostingDate <= LocalDepreciationPeriodDates.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1])

									LocalYearEndDate	= BookCalendarsRel.YearEndDate
									LocalCalendarPeriod	= I1

									if (AssetBookPeriodHistoryRel not exists)
										initialize LocalPreviousYTDAmount
										if (I1 = 1)
											initialize LocalPreviousYTDAmount
										else
											LocalPreviousYTDAmount	= last AssetBookPeriodHistoriesRel.YearToDatePeriodDepreciation
										if (AssetBookHistoryRel not exists
										and !(PostingDate < LocalHistoryBeginDate))
											LocalDeprExpSum = (sum EXPAssetTransactionRel.DerivedTransactionAmount)
											invoke Update AssetBookHistoryRel
												invoked.YearToDateDepreciation			+= DerivedTransactionAmount
												invoked.LifeToDateDepreciation			= LocalDeprExpSum
												invoked.BeginningLifeToDateDepreciation	= LocalDeprExpSum - DerivedTransactionAmount
												invoked.Life							= AssetBookRel.Life
										else
											invoke Update AssetBookHistoryRel
												invoked.YearToDateDepreciation			+= DerivedTransactionAmount
												invoked.LifeToDateDepreciation			+= DerivedTransactionAmount
												invoked.Life							= AssetBookRel.Life
										invoke Create AssetBookPeriodHistory
											invoked.Asset							= Asset
											invoked.Book							= Book
											invoked.Company							= Company
											invoked.AssetBookPeriodHistory.Period	= LocalCalendarPeriod
											invoked.YearEndDate						= LocalYearEndDate
											invoked.CurrentPeriodDepreciation		= DerivedTransactionAmount
											if (Company.DefaultPostingDate.PurchaseDate
											and PostingDate < CurrentBookCalendarRel.YearBeginDate)
												invoked.YearToDatePeriodDepreciation	= DerivedTransactionAmount
												invoked.LifeRemaining					= LocalLifeRemaining
											else
												invoked.YearToDatePeriodDepreciation	= (LocalPreviousYTDAmount + DerivedTransactionAmount)
												invoked.LifeRemaining					= AssetBookRel.LifeRemaining
											invoked.Basis							= AssetBookRel.Basis

									else
										invoke Update AssetBookHistoryRel
											invoked.YearToDateDepreciation			+= DerivedTransactionAmount
											invoked.LifeToDateDepreciation			+= DerivedTransactionAmount
										invoke Update AssetBookPeriodHistoryRel
											invoked.CurrentPeriodDepreciation		+= DerivedTransactionAmount
											if (!(Company.DefaultPostingDate.PurchaseDate
											and PostingDate < CurrentBookCalendarRel.YearBeginDate))
												invoked.YearToDatePeriodDepreciation	+= DerivedTransactionAmount
												invoked.LifeRemaining					= AssetBookRel.LifeRemaining
											invoked.Basis							= AssetBookRel.Basis

										if (AssetBookPeriodHistoryRel.CurrentPeriodDepreciation not entered)
											invoke Delete AssetBookPeriodHistoryRel
							I1 += 1







		CreateGLTransactionDetail
			GLTSystem 			= "AM"
			if (AssetProcess.Addition)
				LocalGLEvent 	= "AA"
			if (AssetProcess.Adjustment)
				LocalGLEvent 	= "AS"
			if (AssetProcess.Transfer)
				LocalGLEvent	= "AT"
			if (AssetProcess.TransferBalancing)
				LocalGLEvent	= "TB"
			if (AssetProcess.Disposal)
				LocalGLEvent 	= "DI"
			if (AssetProcess.Reinstatement
			or AssetProcess.ReAdd)
				LocalGLEvent 	= "DJ"
			if (AssetProcess.Depreciation)
				LocalGLEvent 	= "DE"
			if (AssetProcess.Revalue)
				LocalGLEvent 	= "CU"
			if (AssetProcess.RevalueAmortization)
				LocalGLEvent 	= "AM"
			if (AssetProcess.Impairment)
				LocalGLEvent 	= "IL"
			if (AssetProcess.ImpairmentAmortization)
				LocalGLEvent 	= "IA"


			if (TransactionStatus.Released
			and AssetTransactionAmount.TransactionAmount not = 0)
				if (GLTransactionDetailRel not exists)
					invoke Unreleased.Create GLTransactionDetail
						fill in fields from this instance
						invoked.JournalByJournalCode	= true
						invoked.JournalCode				= 1
						invoked.JournalizeGroup			= PrmJournalizeGroup
						invoked.OriginatingTransaction 	= reference to this instance
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.System					= GLTSystem
						invoked.Reference				= ThisProgramNameText
						if (ProcessAsset entered)
							invoked.AccountingEntity		= ProcessAsset.Company.AccountingEntity
						else
							invoked.AccountingEntity		= Company.AccountingEntity
						invoked.TransactionAmount											= AssetTransactionAmount.TransactionAmount


						invoked.ReportCurrencyAmount.KeepRateAndAmount 						= true
						if (BookRel.PostCurrency.Book)
							invoked.CurrencyCode		= BookRel.Currency
						else
							invoked.CurrencyCode		= AssetRel.Currency
						invoked.TransactionDate			= TransactionDate
						invoked.PostingDate				= PostingDate
						invoked.FinanceCodeBlock		= DistributionAccount
						invoked.ControlDocumentNumber 	= Asset
						invoked.DocumentNumber		  	= Asset
					   	invoked.GeneralLedgerEvent 		= LocalGLEvent
						invoked.Description			  	= Description
						invoked.AutoReverse 			= false
						invoked.Capitalize				= 1
						if (BypassActiveCodeBlockEdit)
							invoked.BypassActiveCodeBlockEdit	= true
					invoke Release GLTransactionDetailRel

		CreateGLTransactionDetailForHistoryTrans
			GLTSystem 			= "AM"



		   	LocalTransactionDate				= TransactionDate
			invoke Unreleased.Create GLTransactionDetail
				fill in fields from this instance
				invoked.JournalByJournalCode	= true
				invoked.JournalCode				= 2
				invoked.JournalizeGroup			= PrmJournalizeGroup
				invoked.OriginatingTransaction 	= reference to this instance
				invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				invoked.System					= GLTSystem
				invoked.Reference				= ThisProgramNameText + " History Transaction"
				if (ProcessAsset entered)
					invoked.AccountingEntity		= ProcessAsset.Company.AccountingEntity
				else
					invoked.AccountingEntity		= Company.AccountingEntity
				invoked.TransactionAmount		= TransactionAmount
				if (BookRel.PostCurrency.Book)
		   			invoked.CurrencyCode		= BookRel.Currency
		   		else
		   			invoked.CurrencyCode        = AssetRel.Currency
				invoked.TransactionDate			= LocalTransactionDate
				if (PostingDate not entered)
					if (UnreleasedTransactionsRel exists)
						PostingDate 			= first UnreleasedTransactionsRel.PostingDate
					else
						if (ProcessDate entered)
							PostingDate	= ProcessDate
						else
							PostingDate = TransactionDate
				invoked.PostingDate				= PostingDate
				invoked.FinanceCodeBlock		= DistributionAccount
				invoked.ControlDocumentNumber 	= Asset
				invoked.DocumentNumber		  	= Asset
			   	if (!AssetProcess.Adjustment)
			   		invoked.GeneralLedgerEvent 		= "AA"
			   	else
			   		invoked.GeneralLedgerEvent 		= "AS"
				invoked.Description			  	= Description
				invoked.AutoReverse 			= false
				invoked.Capitalize				= 1
			invoke Release GLTransactionDetailRel

		ReleaseGLTransactionDetail
			invoke Release GLTransactionDetailRel

		UpdateGLTransactionDetail
			invoke Update GLTransactionDetailRel
				invoked.TransactionAmount		= TransactionAmount
				invoked.FinanceCodeBlock		= DistributionAccount


		UpdateMemoTransToUnreleased
			if (CreateFromBatch)
				if (MemoAssetTransactionRel exists)
					invoke Update MemoAssetTransactionRel
						invoked.TransactionStatus 		= "U"
						if (invoked.AssetAccountType 	= "AST"
						or  invoked.AssetAccountType 	= "ACM"
						or  invoked.AssetAccountType	= "EXP")
							initialize invoked.AssetAccountGroup
						else
							initialize invoked.AssetType

			else
				if (TransactionStatus not = "H")
					if (AssetProcess 		= blank)
						TransactionStatus 	= "H"
						AssetProcess 		= "ADD"
					else
						if (!(AssetProcess.Disposal
						and	TransactionStatus 	= "R"))
							TransactionStatus 	= "U"
					if (AssetAccountType 	= "AST"
					or  AssetAccountType 	= "ACM"
					or  AssetAccountType	= "EXP")
						if (AssetProcess 	not = "TRF"
						or AssetProcess 	not = "DSP")
							initialize AssetAccountGroup
					else
						initialize AssetType

		ConvertLocalDepreciationDifference
			LocalFromCurrency           			= Asset.Currency
			LocalBaseAmount.ToCurrency				= Book.Currency
			LocalCurrencyExchange.BaseAmount.ToCurrency = Book.Currency
			LocalCurrencyRate						= LocalBaseAmount.OutputCurrencyRate
			if (Book.CurrencyTable entered)
				LocalCurrencyTable	= Book.CurrencyTable
			else
				LocalCurrencyTable	= Asset.CurrencyTable
			LocalEnterpriseGroup					= Asset.Company.FinanceEnterpriseGroup

			LocalBaseAmount.EnteredCurrencyRate	 	= LocalCurrencyRate
			TransientExchangeRate					= LocalCurrencyRate
			BookDepreciationDifference				= LocalCurrencyExchange.BaseAmount.OutputCurrencyAmount

		RefreshCurrencyExchangeRate
			if (Asset.Currency not = Book.Currency)
				if (Book.PostCurrency.Asset)
					initialize AssetTransactionAmount
					AssetTransactionAmount.TransactionAmount 		= TransactionAmount
					AssetTransactionAmount.ExchangeDate 			= Asset.LastAssetItemPurchaseDate
					AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency



	Field Rules
		Company
			initial value is Asset.Company
			default to Asset.Company

		AssetLease
			default to Asset.AssetLease

		AssetGroup
			initial value is Asset.AssetGroup
			default to Asset.AssetGroup

		AssetAccountGroup
			initial value is Asset.AssetAccountGroup
			default to Asset.AssetAccountGroup



			if (Book.PostCurrency.Book)
				TransientBookCurrency = Book.Currency
			else
				TransientBookCurrency = Asset.Currency

		AssetType
			initial value is Asset.AssetType
			default to Asset.AssetType

		AssetAccountType
			cannot be changed
				"AccountTypeCannotBeChanged"

		Reference
			if (Company.TransactionReference.Asset)
				default to Asset.Reference1
			else
				if (Company.TransactionReference.Asset)
					default to Asset.Reference1
			if (AssetAccountType = blank)
				if (AssetProcess = "DSP")
					default to "Disposal"
				if (AssetProcess = "TRF")
					if (TransientCreateFromBatch = true)
						if (TransientTransferFromOrTo.From)
							Reference 	= "Mass Transfer From"
						if (TransientTransferFromOrTo.To)
							Reference 	= "Mass Transfer To"
					else
						if (Reference not entered)
							Reference	= "Transfer"
			if (Asset.AssetProcess.Addition)
				Reference	= "Addition"
			else
				if (Asset.AssetProcess.Adjustment)
					if (CreateFromBatch = true)
						Reference 	= "Mass Asset Adjustment"
					else
						Reference	= "Adjustment"
					if ((Book.PostHistory
					or IsZeroImpairment)
					and TransactionStatus.History)
						Reference = "Posted History Transaction"
				else
					if (Asset.AssetProcess.Transfer)
						if (TransientCreateFromBatch = true)
							if (TransientTransferFromOrTo.From)
								Reference 	= "Mass Transfer From"
							if (TransientTransferFromOrTo.To)
								Reference 	= "Mass Transfer To"
						else
							if (Reference not entered)
								Reference	= "Transfer"
					else
						if (Asset.AssetProcess.Disposal)
							if (CreateFromBatch = true)
								Reference 	= "Mass Asset Disposal"
							else
								Reference	= "Disposal"
						else
							if (Asset.AssetProcess.Impairment)
								if (Book.PostHistory
								and TransactionStatus.History)
									Reference = "Posted History Transaction"
								else
									Reference = "Impairment"
							else
								if (Asset.AssetProcess.Reinstatement)
									Reference	= "Reinstatement"



		Description
			default to ThisProgramNameText
			required

		TransactionNumberOfDecimals
			if (Book.PostCurrency.Book)
				default to Book.Currency.NumberOfDecimals
			else
				default to Asset.Currency.NumberOfDecimals

		DistributionAccount
			constraint(DistributionAccount.GeneralLedgerChartAccount entered)
				"GeneralLedgerChartAccountIsRequired"
			if(FinanceEnterpriseGroup.AccountingUnitRequired)
				constraint(DistributionAccount.AccountingUnit entered)
					"<FinanceEnterpriseGroup.AccountingUnitLabel>IsRequired"
			if(FinanceEnterpriseGroup.ProjectRequired)
				constraint(DistributionAccount.Project entered)
					"<FinanceEnterpriseGroup.ProjectLabel>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension1Required)
				constraint(DistributionAccount.FinanceDimension1 entered)
					"<FinanceEnterpriseGroup.FinanceDimension1Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension2Required)
				constraint(DistributionAccount.FinanceDimension2 entered)
					"<FinanceEnterpriseGroup.FinanceDimension2Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension3Required)
				constraint(DistributionAccount.FinanceDimension3 entered)
					"<FinanceEnterpriseGroup.FinanceDimension3Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension4Required)
				constraint(DistributionAccount.FinanceDimension4 entered)
					"<FinanceEnterpriseGroup.FinanceDimension4Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension5Required)
				constraint(DistributionAccount.FinanceDimension5 entered)
					"<FinanceEnterpriseGroup.FinanceDimension5Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension6Required)
				constraint(DistributionAccount.FinanceDimension6 entered)
					"<FinanceEnterpriseGroup.FinanceDimension6Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension7Required)
				constraint(DistributionAccount.FinanceDimension7 entered)
					"<FinanceEnterpriseGroup.FinanceDimension7Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension8Required)
				constraint(DistributionAccount.FinanceDimension8 entered)
					"<FinanceEnterpriseGroup.FinanceDimension8Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension9Required)
				constraint(DistributionAccount.FinanceDimension9 entered)
					"<FinanceEnterpriseGroup.FinanceDimension9Label>IsRequired"
			if(FinanceEnterpriseGroup.FinanceDimension10Required)
				constraint(DistributionAccount.FinanceDimension10 entered)
					"<FinanceEnterpriseGroup.FinanceDimension10Label>IsRequired"
			required
				"DistributionAccountIsRequired"

		TransientCurrencyTable
			default to Book.CurrencyTable
			default to Asset.CurrencyTable

		TransactionDate
			if (Book.PostCurrency.Asset
			and Asset.Currency != Book.Currency)
				TransactionDate = Asset.LastAssetItemPurchaseDate
			else
				if (CreateFromAssetPeriodCloseBatch)
					if(PostingDate != CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1])
						TransactionDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
					else
						TransactionDate = PostingDate
				else
					if (Asset.AssetProcess.Addition)
						if (AssetManagementInterfaceResult not entered)
							TransactionDate = Asset.LastAssetItemPurchaseDate
					if (AssetProcess.Transfer
					and TransactionDate not entered)
						if (ToAssetTransferRel exists)
							TransactionDate = first ToAssetTransferRel.TransferDate  
						else
							if AssetTransferRel.TransferDate entered
								TransactionDate = AssetTransferRel.TransferDate
					if (AssetProcess.Disposal)
						if (ToAssetDisposalRel exists)
							TransactionDate = first ToAssetDisposalRel.DisposalDate
						else
							if (TransientTransactionDate not entered)
								TransactionDate = AssetDisposalRel.DisposalDate
					if (AssetProcess.Adjustment)
						TransactionDate = UnreleaseAssetAdjustmentRel.AdjustmentDate
					if 	(AssetProcess.Adjustment
					and (AssetAccountType.ImpairmentAmortization
					or  AssetAccountType.AccumulatedImpairmentLoss))
						if (first LastAssetImpairmentRel.Status.PostRelease)
							TransactionDate	= LastAssetImpairmentRel.ImpairmentDate
						else
							TransactionDate	= AssetAdjustmentRel.AdjustmentDate


					if (Asset.AssetProcess.ReAdd)
						TransactionDate = AssetReinstatementRel.ReinstatementDate
					if (Asset.AssetProcess.Revalue)
						if (TransactionDate not entered)
							TransactionDate = AssetRevaluationRel.RevalueDate
					if (Asset.AssetProcess.Impairment)
					 	TransactionDate = AssetImpairmentRel.ImpairmentDate
					if (Asset.AssetProcess.Depreciation
					or Asset.AssetProcess.RevalueAmortization
					or Asset.AssetProcess.ImpairmentAmortization)
						TransactionDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
			initial value is CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
			default to CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
			if (Asset.Status.Unreleased)
				if (TransactionStatus.Unreleased
				and TransactionDate changed)
					include RefreshCurrencyExchangeRate
			AssetTransactionAmount.ExchangeDate = TransactionDate

		PostingDate
			if (action type.Create
			and PostingDate not entered)
				if (!CreateFromBatch)
					if (UnreleasedTransactionsRel exists)
						PostingDate = first UnreleasedTransactionsRel.PostingDate
					else
						if (AssetProcess.Adjustment)
							if (AssetAdjustmentRel.PostingDate entered)
								PostingDate = AssetAdjustmentRel.PostingDate
							else
								PostingDate = AssetAdjustmentRel.AdjustmentDate
						if (AssetProcess.Transfer)
							if (ToAssetTransferRel exists)
								if (first ToAssetTransferRel.PostingDate entered)
									PostingDate = first ToAssetTransferRel.PostingDate
								else
									PostingDate = first ToAssetTransferRel.TransferDate
							else
								if (AssetTransferRel.PostingDate entered)
									PostingDate = AssetTransferRel.PostingDate
								else
									PostingDate = AssetTransferRel.TransferDate
						if (AssetProcess.Disposal)
							if (ToAssetDisposalRel exists)
								if (first ToAssetDisposalRel.PostingDate entered)
									PostingDate = first ToAssetDisposalRel.PostingDate
								else
									PostingDate = first ToAssetDisposalRel.DisposalDate
							else
								if (AssetDisposalRel.PostingDate entered)
									PostingDate = AssetDisposalRel.PostingDate
								else
									PostingDate = AssetDisposalRel.DisposalDate
						if (AssetProcess.ReAdd
						or AssetProcess.Reinstatement)
							if (AssetReinstatementRel.PostingDate entered)
								PostingDate = AssetReinstatementRel.PostingDate
							else
								PostingDate = AssetReinstatementRel.ReinstatementDate
						if (AssetProcess.Revalue)
							if (UnreleasedAssetBookRevaluationRel.PostingDate entered)
								PostingDate = UnreleasedAssetBookRevaluationRel.PostingDate
							else
								PostingDate = AssetRevaluationRel.RevalueDate
						if (AssetProcess.Impairment)
							if (AssetImpairmentRel.PostingDate entered)
								PostingDate = AssetImpairmentRel.PostingDate
							else
								PostingDate = AssetImpairmentRel.ImpairmentDate
						if (Book.Impairment
						and IsZeroImpairment)
							PostingDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
						if (AssetProcess.Addition)
							if (Company.DefaultPostingDate.PurchaseDate)
								PostingDate = TransactionDate
							else
								if (Company.DefaultPostingDate.CurrentDate)
									PostingDate	= current corporate date
								else
									PostingDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
						if (AssetProcess.Depreciation
						or  AssetProcess.RevalueAmortization
						or  AssetProcess.ImpairmentAmortization
						or  AssetAccountType.ImpairmentAmortization
						or  AssetAccountType.AccumulatedImpairmentLoss)
							PostingDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
						default to CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
			if (ProcessDate entered)
				if (PostingDate not entered)
					PostingDate = ProcessDate
			else
				if (PostingDate entered)
					ProcessDate = PostingDate

		TransactionAmount
			if (action type.Update
			and TransactionAmount changed)
				constraint (IsManualEntry)
					"TransactionAmountCannotBeChanged"
			required
				"TransactionAmountIsRequired"

		CreationDate
			default to current timestamp
			if (CreationDate != AssetDisposalRel.DisposalDate
			and !Asset.Status.Disposed)
				constraint (CurrentBookCalendarRel exists)
					"Book<AssetTransaction.Book>CalendarDoesNotExist"

		CreatedBy
			default to actor

		YearEndDate
			if (!BookCalendarsRel exists)
				YearEndDate = blank

		TransactionStatus
			default to "M"

		ProcessAsset
			if (AssetAccountType = blank)
				if (Asset.AssetProcess.Transfer
				and ToAssetTransferRel exists)
					default to ToAssetTransferRel.Asset
				else
					default to Asset

	Actions
		Create is a Create Action
			valid when (ApprovalCreateAllowed)
			Local Fields
				GetLocalCodeBlock				is Boolean
				LocalDisposalDate				is Date
				LocalGeneralLedgerChartAccount	is like GeneralLedgerChartAccount

			Entrance Rules
				if (AssetAccountType = blank)
					if (Asset.AssetProcess.Transfer
					and ToAssetTransferRel exists)
						ProcessSequence = ToAssetTransferRel.Asset.LastAssetSequence
					else
						ProcessSequence = Asset.LastAssetSequence

				if (Book.Ledger not entered)
					DistributionAccount.Ledger			= FinanceEnterpriseGroup.CoreLedger
				else
					DistributionAccount.Ledger			= Book.Ledger
				if (Book.PostCurrency.Book)
					TransientBookCurrency = Book.Currency
				else
					TransientBookCurrency = Asset.Currency
			Action Rules
				constraint (CurrentBookCalendarRel exists)
					"CalendarNotFound"
				constraint (CurrentBookCalendarRel.IsPostingBook)
					"Book<Book>MustBeAPostingBook"



				if (AssetProcess not entered)
					AssetProcess		= Asset.AssetProcess
				GetLocalCodeBlock		= DeriveCodeBlock
				LocalAccountingEntity 	= Company.AccountingEntity 
				GLTSystem 				= "AM"
				if (DistributionAccount not entered)
					DistributionAccount	= TransientDistributionAccount
				if (PostingDate not entered)
					if (TransactionStatus.Unreleased
					and (AssetAccountType.ImpairmentAmortization
					or  AssetAccountType.AccumulatedImpairmentLoss)
					and !AssetProcess.Disposal)
						PostingDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
				AssetTransactionAmount.TransactionAmount 	 = TransactionAmount
				AssetTransactionAmount.ExchangeDate			 = TransactionDate
				AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency

			Exit Rules
				if (YearEndDate not entered)
					YearEndDate			= DerivedCalendarEndDate
				if (AssetImpairment not entered)
					if (Book.Impairment)
						AssetImpairment	= AssetBookRel.DerivedAssetImpairment

				LocalAssetType = AssetType
				LocalAssetAccountGroup = AssetAccountGroup

				include UpdateMemoTransToUnreleased
				if (AssetAccountGroup not entered)
					if ((AssetProcess.Transfer
					and (Reference = "Transfer To"
					or  Reference = "Mass Transfer To"))
					and ToAssetTransferRel.FullOrPartial.Full)
						AssetAccountGroup 		= ToAssetTransferRel.AssetTransferTo.ToAssetAccountGroup
					else
						if (AssetProcess.Adjustment)
							AssetAccountGroup = LocalAssetAccountGroup
						else
							AssetAccountGroup 		= Asset.AssetAccountGroup
				if (AssetType not entered)
					if ((AssetProcess.Transfer
					and (Reference = "Transfer To"
					or  Reference = "Mass Transfer To"))
					and ToAssetTransferRel.FullOrPartial.Full)
						AssetType 				= ToAssetTransferRel.AssetTransferTo.ToAssetType
					else
						if (AssetProcess.Adjustment)
							AssetType = LocalAssetType
						else
							AssetType 				= Asset.AssetType
				if (!CreateFromBatch)
					LocalEditProject = DistributionAccount.Project
					if (LocalEditProject entered)
						if (AssetPeriodOfPerformanceRel exists)
							LocalDateRange.BeginDate = AssetPeriodOfPerformanceRel.ProjectBeginDate
							LocalDateRange.EndDate   = AssetPeriodOfPerformanceRel.ProjectEndDate
						else
							LocalDateRange.BeginDate = LocalEditProject.ProjectDateRange.BeginDate
							LocalDateRange.EndDate   = LocalEditProject.ProjectDateRange.EndDate
						constraint (PostingDate within LocalDateRange)
							"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalEditProject>DateRangeOf<LocalDateRange.BeginDate>Through<LocalDateRange.EndDate>"
					include UpdateCreditAndDebitBalances



		WizardCreate is a Create Action
			default label is "Create"
			valid when (ApprovalImpairmentInProgress)
			Local Fields
				GetLocalCodeBlock				is Boolean
				LocalDisposalDate				is Date
				LocalGeneralLedgerChartAccount	is like GeneralLedgerChartAccount
			Entrance Rules

				if (AssetTransfer entered
						and AssetTransfer != first FromAssetTransferRel.AssetTransfer
						and AssetTransfer != first ToAssetTransferRel.AssetTransfer)
					if (CompanyAssetTransferRel exists)	
						constraint (false)
							"Asset_<Asset>InvalidForThis_Asset_Transfer"
					else								
						constraint (false)
							"Company_<Company>InvalidForThis_Asset_Transfer"

				if (AssetAccountType = blank)
					if (Asset.AssetProcess.Transfer
					and ToAssetTransferRel exists)
						ProcessSequence = ToAssetTransferRel.Asset.LastAssetSequence
					else
						ProcessSequence = Asset.LastAssetSequence

				if (Book.Ledger not entered)
					DistributionAccount.Ledger			= FinanceEnterpriseGroup.CoreLedger
				else
					DistributionAccount.Ledger			= Book.Ledger
				if (Book.PostCurrency.Book)
					TransientBookCurrency = Book.Currency
				else
					TransientBookCurrency = Asset.Currency
			Action Rules
				if (TransientTransactionAmount entered)
					TransactionAmount		= TransientTransactionAmount
				constraint (CurrentBookCalendarRel exists)
					"CalendarNotFound"
				constraint (CurrentBookCalendarRel.IsPostingBook)
					"Book<Book>MustBeAPostingBook"



				if (AssetProcess not entered)
					AssetProcess		= Asset.AssetProcess
				GetLocalCodeBlock		= DeriveCodeBlock
				LocalAccountingEntity 	= Company.AccountingEntity 
				GLTSystem 				= "AM"
				if (DistributionAccount not entered)
					DistributionAccount	= TransientDistributionAccount
				if (PostingDate not entered)
					if (TransactionStatus.Unreleased
					and (AssetAccountType.ImpairmentAmortization
					or  AssetAccountType.AccumulatedImpairmentLoss)
					and !AssetProcess.Disposal)
						PostingDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1]
				AssetTransactionAmount.TransactionAmount 	 = TransactionAmount
				AssetTransactionAmount.ExchangeDate			 = TransactionDate
				AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency

			Exit Rules
				if (YearEndDate not entered)
					YearEndDate 			= DerivedCalendarEndDate
				if (AssetImpairment not entered)
					if (Book.Impairment)
						AssetImpairment  = AssetBookRel.DerivedAssetImpairment

				include UpdateMemoTransToUnreleased
				if (!CreateFromBatch)
					LocalEditProject = DistributionAccount.Project
					if (LocalEditProject entered)
						if (AssetPeriodOfPerformanceRel exists)
							LocalDateRange.BeginDate = AssetPeriodOfPerformanceRel.ProjectBeginDate
							LocalDateRange.EndDate   = AssetPeriodOfPerformanceRel.ProjectEndDate
						else
							LocalDateRange.BeginDate = LocalEditProject.ProjectDateRange.BeginDate
							LocalDateRange.EndDate   = LocalEditProject.ProjectDateRange.EndDate
						constraint (PostingDate within LocalDateRange)
							"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalEditProject>DateRangeOf<LocalDateRange.BeginDate>Through<LocalDateRange.EndDate>"
					include UpdateCreditAndDebitBalances

		RestrictedCreate is a Create Action
			restricted

		CreateTransactionPeriodClose is a Create Action
			restricted
			Entrance Rules
				if (Book.Ledger not entered)
					DistributionAccount.Ledger			= FinanceEnterpriseGroup.CoreLedger
				else
					DistributionAccount.Ledger			= Book.Ledger
				if (AssetAccountType = blank)
					if (Asset.AssetProcess.Transfer
					and ToAssetTransferRel exists)
						ProcessSequence = ToAssetTransferRel.Asset.LastAssetSequence
					else
						ProcessSequence = Asset.LastAssetSequence


			Action Rules
				BypassActiveCodeBlockEdit = true
				BypassStructureRelationEdit = true

			Exit Rules
				if (AssetImpairment not entered)
					if (Book.Impairment)
						AssetImpairment	= AssetBookRel.DerivedAssetImpairment

				invoke CreateGLTransDetailFromBatch
					invoked.PrmJournalizeGroup = LocalJournalizeGroup

		CreateAllocation is a Create Action
			restricted
			Entrance Rules
				if (Book.Ledger not entered)
					DistributionAccount.Ledger			= FinanceEnterpriseGroup.CoreLedger
				else
					DistributionAccount.Ledger			= Book.Ledger
			Action Rules
				include UpdateCreditAndDebitBalances

		UpdateReinstatementTransaction is a Create Action
			restricted
			Entrance Rules
				if (Book.Ledger not entered)
					DistributionAccount.Ledger			= FinanceEnterpriseGroup.CoreLedger
				else
					DistributionAccount.Ledger			= Book.Ledger
			Action Rules
				constraint (AssetDisposalRel exists)
					"CannotProcessJournalEntries;DisposalDeleted"  
				constraint (AssetTransactionRADRel not exists)
					"CannotAdd;JournalEntriesAlreadyExists" 	


		Update is an Update Action
			valid when (ApprovalCanBeMaintained)
			Action Rules
				if (!CreateFromBatch)


					constraint (AssetTransactionRADRel not exists)
						"CannotAdd;JournalEntriesAlreadyExists" 	
					constraint (PostingBookCalendar)
						"CannotCreateOrMaintainTransactionsForNonPostingBook"
					LocalEditProject = DistributionAccount.Project
					if (LocalEditProject entered)
						if (AssetPeriodOfPerformanceRel exists)
							LocalDateRange.BeginDate = AssetPeriodOfPerformanceRel.ProjectBeginDate
							LocalDateRange.EndDate   = AssetPeriodOfPerformanceRel.ProjectEndDate
						else
							LocalDateRange.BeginDate = LocalEditProject.ProjectDateRange.BeginDate
							LocalDateRange.EndDate   = LocalEditProject.ProjectDateRange.EndDate
						constraint (PostingDate within LocalDateRange)
							"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalEditProject>DateRangeOf<LocalDateRange.BeginDate>Through<LocalDateRange.EndDate>"
				if(IsManualEntry)
					if (TransactionAmount changed)
						initialize AssetTransactionAmount
						AssetTransactionAmount.TransactionAmount 	 = TransactionAmount
						AssetTransactionAmount.ExchangeDate			 = TransactionDate
						AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency

			Exit Rules
				if (PostingDate changed)
					YearEndDate	= DerivedCalendarEndDate
				include UpdateMemoTransToUnreleased
				if (AssetAccountGroup not entered)
					AssetAccountGroup 		= Asset.AssetAccountGroup
				if (AssetType not entered)
					AssetType 				= Asset.AssetType
				include UpdateCreditAndDebitBalances
				if (!(AssetProcess.Reinstatement
				and TransactionStatus = "U"))
					include UpdateGLTransactionDetail


		ManualTransactionEntry is an Update Action
			valid when (ManualUpdateAllow)
			restricted
			Action Rules


				constraint (AssetTransactionRADRel not exists)
					"CannotAdd;JournalEntriesAlreadyExists" 	
				constraint (PostingBookCalendar)
					"CannotCreateOrMaintainTransactionsForNonPostingBook"
				if (TransactionAmount changed)
					initialize AssetTransactionAmount
					AssetTransactionAmount.TransactionAmount 	 = TransactionAmount
					AssetTransactionAmount.ExchangeDate			 = TransactionDate
					AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency
			Exit Rules
				include UpdateCreditAndDebitBalances

		UpdateAssetGroup is an Instance Action
			restricted
			Parameters
				PrmAssetGroup           is an AssetGroup

			Action Rules
				AssetGroup	= PrmAssetGroup

		UpdateFromTransfer is an Instance Action
			restricted
			Parameters
				PrmTransactionAmount	is an InternationalAmount

			Action Rules
				if (AssetAccountType.Asset)
					TransactionAmount	+= PrmTransactionAmount
				else
					TransactionAmount	-= PrmTransactionAmount

		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation          is Alpha size 22
					default label is "Location"
				PrmDocumentID        is Alpha size 100
					default label is "DocumentID"
				PrmSystemOfRecord    is Alpha size 1
					default label is "SystemOfRecord"
				PrmVariationID       is Alpha size 22
					default label is "VariationID"
			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity 	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord
				if (bod id.VariationID != PrmVariationID)
					bod id.VariationID 			= PrmVariationID

		ReinstatementUpdate is an Update Action
			restricted
			bypass field rules
			Action Rules
				include UpdateMemoTransToUnreleased
				include UpdateCreditAndDebitBalances
				if (!(AssetProcess.Disposal
				and TransactionStatus = "R"))
					include UpdateGLTransactionDetail


		UpdateTransactionDate is an Update Action  
			restricted
			valid when (UpdatePostDateAllowed)

			Action Rules
				LocalEditProject = DistributionAccount.Project
				if (LocalEditProject entered)
					if (AssetPeriodOfPerformanceRel exists)
						LocalDateRange.BeginDate = AssetPeriodOfPerformanceRel.ProjectBeginDate
						LocalDateRange.EndDate   = AssetPeriodOfPerformanceRel.ProjectEndDate
					else
						LocalDateRange.BeginDate = LocalEditProject.ProjectDateRange.BeginDate
						LocalDateRange.EndDate   = LocalEditProject.ProjectDateRange.EndDate
					constraint (PostingDate within LocalDateRange)
						"PostingDate<PostingDate>IsOutsideOf<FinanceEnterpriseGroup.ProjectLabel>_<LocalEditProject>DateRangeOf<LocalDateRange.BeginDate>Through<LocalDateRange.EndDate>"
				YearEndDate	= DerivedCalendarEndDate

		DeleteReleasedTrans is a Delete Action
			restricted
			Entrance Rules
				if (GLTransactionDetailRel exist)
					invoke Delete GLTransactionDetailRel

		Delete is a Delete Action
			valid when (DeleteAllowed)
			Entrance Rules
				if (AssetControlTransactionRel exists)
					invoke Increment AssetControlTransactionRel
						if (TransactionAmount 	< 0)
							invoked.InputDebitAmount 	= (TransactionAmount)
						else
							invoked.InputCreditAmount 	= (TransactionAmount)
				else
					invoke BalanceUpdate AssetBookRel
						if (TransactionAmount 	> 0)
							invoked.DebitBalance 	-= TransactionAmount
						else
							invoked.CreditBalance 	-= TransactionAmount
				if (GLTransactionDetailRel exist)
					invoke Delete GLTransactionDetailRel

		Release is an Instance Action
			restricted
			Parameters
				PrmJournalizeGroup			is a JournalizeGroup

				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAssetBatchUpdateResult 	is like AssetBatchUpdateResult

			Action Rules
				LocalBatchUpdateResult	= PrmAssetBatchUpdateResult
				BatchUpdateResult		= PrmAssetBatchUpdateResult
				if (AssetAccountGroup not entered)
					AssetAccountGroup 		= Asset.AssetAccountGroup
				if (AssetType not entered)
					AssetType 				= Asset.AssetType

				if (TransactionStatus = "M")
					TransactionStatus = "H"
				else
					TransactionStatus = "R"

				initialize I1
				I1 = CurrentBookCalendarRel.NumberOfPeriodCloseRuns
				if (ProcessDate not entered)
					if (I1 entered
					and !AssetProcess.Disposal
					and !AssetProcess.ReAdd)
						ProcessDate	= CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]
					else
						ProcessDate			= PostingDate
				LocalPostingDate	 		= PostingDate
				if (!BookCalendarsRel exists)

					YearEndDate = blank

				if (YearEndDate entered)

					if(!AssetProcess.Reinstatement)
						invoke Update AssetPostingDateSummaryRel
							invoked.FinanceDimension1					= DistributionAccount.FinanceDimension1
							invoked.FinanceDimension2					= DistributionAccount.FinanceDimension2
							invoked.FinanceDimension3					= DistributionAccount.FinanceDimension3
							invoked.FinanceDimension4					= DistributionAccount.FinanceDimension4
							invoked.FinanceDimension5					= DistributionAccount.FinanceDimension5
							invoked.FinanceDimension6					= DistributionAccount.FinanceDimension6
							invoked.FinanceDimension7					= DistributionAccount.FinanceDimension7
							invoked.FinanceDimension8					= DistributionAccount.FinanceDimension8
							invoked.FinanceDimension9					= DistributionAccount.FinanceDimension9
							invoked.FinanceDimension10					= DistributionAccount.FinanceDimension10
							invoked.BaseNumberOfDecimals				= Book.Currency.NumberOfDecimals
							invoked.InputProcess = AssetProcess
							invoked.InputAmount = AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

				if (AssetProcess.Adjustment
				and UnreleaseAssetAdjustmentRel exists
				and (UnreleasedAssetBookAdjustmentRel.IsYearToDateDepreciationAdjusted
				or UnreleasedAssetBookAdjustmentRel.IsLifeToDateDepreciationAdjusted)
				and AssetBookRel.AdjustPriorYearHistoryTransactions.YesWithTransactions)
					LocalAdjustmentUpdate = true
				if	(AssetProcess.Impairment
				or 	(Book.Impairment
				and AssetProcess.Adjustment
				and (AssetAccountType.ImpairmentLoss
				or	AssetAccountType.ImpairmentWriteOff)))
					invoke GetDefaultAccounts AssetBookRel
					include CheckACM

				if (AssetAccountType.AccumulatedDepreciation
				and !AssetProcess.Reinstatement)
					include CheckACM
				if (AssetAccountType.DepreciationExpense
				and !AssetProcess.Reinstatement)
					if (Asset != SavedAsset)
						initialize LocalExpenseTransactionCreated
						initialize SavedAsset
					include UpdateBookHistory
				if (AssetAccountType.Asset
				and (AssetProcess.Addition
				or   AssetProcess.ReAdd
				or LocalAdjustmentUpdate))
					LocalLastAssetFund = last NewAssetFundsRel.AssetFund
					
					include CheckACM
					include UpdateBookHistory
				initialize LocalExpenseTransactionCreated
				initialize SavedAsset
				if (!AssetProcess.Transfer)
					invoke DefaultAccounts Asset
					GetDefaultAccounts = true
					if (DeriveCodeBlock = true
					and DistributionAccount not entered)
						DistributionAccount	= TransientDistributionAccount

				include CreateGLTransactionDetail

		CreateHistory is an Instance Action
			Parameters
				PrmJournalizeGroup			is a JournalizeGroup
				PrmAssetBatchUpdateResult 	is like AssetBatchUpdateResult

			Action Rules
				LocalAdjustmentUpdate = true
				LocalCreateHistory = true
				LocalBatchUpdateResult	= PrmAssetBatchUpdateResult
				include CheckACM
				if (LocalAssetTransaction.IsPostHistory
				and LocalAssetTransaction.TransactionStatus.History
				and !LocalAssetTransaction.IsPostedToGL
				and LocalAssetTransaction.Reference = "Posted History Transaction")
					LocalAssetTransactionRecord = LocalAssetTransaction.AssetTransaction
					invoke PostHistory AssetTransactionRel
						invoked.PrmJournalizeGroup 	= PrmJournalizeGroup
				include UpdateBookHistory
				if (LocalAssetTransaction.IsPostHistory
				and LocalAssetTransaction.TransactionStatus.History
				and !LocalAssetTransaction.IsPostedToGL
				and LocalAssetTransaction.Reference = "Posted History Transaction")
					LocalAssetTransactionRecord = LocalAssetTransaction.AssetTransaction
					invoke PostHistory AssetTransactionRel
						invoked.PrmJournalizeGroup	 = PrmJournalizeGroup

		ReleaseHistory is an Instance Action
			restricted
			Action Rules
				if (YearEndDate entered)   
					invoke Update AssetPostingDateSummaryRel
						invoked.FinanceDimension1					= DistributionAccount.FinanceDimension1
						invoked.FinanceDimension2					= DistributionAccount.FinanceDimension2
						invoked.FinanceDimension3					= DistributionAccount.FinanceDimension3
						invoked.FinanceDimension4					= DistributionAccount.FinanceDimension4
						invoked.FinanceDimension5					= DistributionAccount.FinanceDimension5
						invoked.FinanceDimension6					= DistributionAccount.FinanceDimension6
						invoked.FinanceDimension7					= DistributionAccount.FinanceDimension7
						invoked.FinanceDimension8					= DistributionAccount.FinanceDimension8
						invoked.FinanceDimension9					= DistributionAccount.FinanceDimension9
						invoked.FinanceDimension10					= DistributionAccount.FinanceDimension10
						invoked.BaseNumberOfDecimals				= Book.Currency.NumberOfDecimals
						invoked.InputProcess = AssetProcess
						invoked.InputAmount = AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount


		PostHistory is an Instance Action
			restricted
			Parameters
				PrmJournalizeGroup			is a JournalizeGroup

				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Action Rules
				include CreateGLTransactionDetailForHistoryTrans

		CreateFromBatch is a Create Action
			restricted
			Action Rules
				CreateFromBatch = true
				BypassActiveCodeBlockEdit = true
				BypassStructureRelationEdit = true
				invoke Create this instance

		CreateFromAssetPeriodCloseBatch is a Create Action
			restricted
			Action Rules
				CreateFromBatch = true
				CreateFromAssetPeriodCloseBatch = true
				BypassActiveCodeBlockEdit = true
				BypassStructureRelationEdit = true
				AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency
			Exit Rules
				if (Book.Impairment)
					if (AssetImpairment not entered)
						AssetImpairment  = DerivedAssetImpairment

		AttachToAsset is an Instance Action
			valid when (TransactionStatus.Memo)
			Parameters
				FinanceEnterpriseGroup
				Asset

			Parameter Rules
				Asset
					required

			Action Rules
				invoke Create AssetTransaction
					fill in fields from this instance
					invoked.OnlineSystemCreate	= true
					invoked.TransactionStatus	= "U"

					initialize invoked.AssetTransaction


		RestoreTransaction is an Instance Action
			restricted
			Action Rules
				invoke Create AssetTransaction
					fill in fields from this instance
					invoked.OnlineSystemCreate	= true
					invoked.TransactionStatus 	= "R"
					invoked.Reference			= "Disposal"
					invoked.AssetProcess		= "DSP"


		ReinstateTransaction is an Update Action
			restricted
			bypass field rules

		UpdateFromAssetItem is an Instance Action
			restricted
			Parameters
				PrmTransactionAmount			is an InternationalAmount

			Action Rules
				if (TransactionAmount < 0)
					TransactionAmount	= PrmTransactionAmount * -1
				else
					TransactionAmount	= PrmTransactionAmount

		CreateTransferBalancingTransactions is an Instance Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup   is a FinanceEnterpriseGroup
				PrmAsset                    is an Asset
				TransferOutAccount          is like GeneralLedgerChartAccount
				TransferInAccount           is like GeneralLedgerChartAccount

			Action Rules
				LocalAssetAccountType = AssetAccountType
				invoke RestrictedCreate AssetTransaction
					invoked.TransactionAmount   							= TransactionAmount * -1
					invoked.AssetTransactionAmount.TransactionAmount 		= TransactionAmount * -1
					invoked.AssetTransactionAmount.ExchangeDate 			= AssetTransactionAmount.ExchangeDate
					invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= AssetTransactionAmount.BaseAmount.ToCurrency
					invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount	= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount * -1
					invoked.DistributionAccount 							= DistributionAccount
					invoked.AssetProcess									= "ATB"
					invoked.TransactionStatus                               = "U"
					if (Reference = "Transfer From"
					or Reference = "Mass Transfer From")
						invoked.DistributionAccount.GeneralLedgerChartAccount = TransferOutAccount
						invoked.Reference         	= "Transfer From Balancing Entry"
						invoked.AssetAccountType	= "ATO"
					if (Reference = "Transfer To"
					or Reference = "Mass Transfer To")
						invoked.DistributionAccount.GeneralLedgerChartAccount = TransferInAccount
						invoked.Reference         	= "Transfer To Balancing Entry"
						invoked.AssetAccountType	= "ATI"
					fill in fields from this instance



		CreateAndReleaseGlTransDetailFromBatch is an Instance Action
			restricted
			Parameters
				PrmJournalizeGroup			is a JournalizeGroup

			Action Rules
				BypassActiveCodeBlockEdit = true
				BypassStructureRelationEdit = true
				if (Reference not = "Posted History Transaction")
					if (CompanySystemClosingControlRel exists
					and CompanySystemClosingControlRel.Control)
						constraint (PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinSystemClosingControlValidDateRange"
				include CreateGLTransactionDetail

		CreateGLTransDetailFromBatch is an Instance Action
			restricted
			Parameters
				PrmCurrency 				is a FromCurrency
				PrmJournalizeGroup			is a JournalizeGroup

			Parameter Rules
				PrmCurrency
					initial value is TransientBookCurrency

			Action Rules
				BypassActiveCodeBlockEdit = true
				BypassStructureRelationEdit = true


				GLTSystem 					= "AM"
				if (AssetProcess.Addition
				or AssetProcess.ReAdd)
					LocalGLEvent 	= "AA"
				if (AssetProcess.Adjustment)
					LocalGLEvent 	= "AS"
				if (AssetProcess.Transfer)
					LocalGLEvent	= "AT"
				if (AssetProcess.TransferBalancing)
					LocalGLEvent	= "TB"
				if (AssetProcess.Disposal)
					LocalGLEvent 	= "DI"
				if (AssetProcess.Reinstatement)
					LocalGLEvent 	= "DJ"
				if (AssetProcess.Depreciation)
					LocalGLEvent 	= "DE"
				if (AssetProcess.Revalue)
					LocalGLEvent 	= "CU"
				if (AssetProcess.RevalueAmortization)
					LocalGLEvent	= "AM"
				if (AssetProcess.Impairment)
					LocalGLEvent	= "IL"
				if (AssetProcess.ImpairmentAmortization)
					LocalGLEvent	= "IA"
				LocalFinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				if (PostingDate not entered)
					if (ProcessDate entered)
						PostingDate = ProcessDate
					else
						PostingDate = TransactionDate
					YearEndDate	= DerivedCalendarEndDate
				invoke Create GLTransactionDetail
					fill in fields from this instance
					if(LocalCreateFundFromBatch)
						invoked.OriginatingTransaction	= reference to LocalAssetTransaction.AssetTransaction
					else
						invoked.OriginatingTransaction 	= reference to this instance
					invoked.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
					invoked.System					= GLTSystem
					invoked.Reference				= ThisProgramNameText
					if (ProcessAsset entered)
						invoked.AccountingEntity		= ProcessAsset.Company.AccountingEntity
					else
						invoked.AccountingEntity		= Company.AccountingEntity
					if(LocalCreateFundFromBatch)


						invoked.TransactionAmount											= EachFundTransactionAmount
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= LocalAssetTransaction.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= LocalAssetTransaction.AssetTransactionAmount.BaseAmount.EnteredCurrencyRate
						invoked.FinanceCodeBlock											= LocalAssetTransaction.DistributionAccount
					else


						invoked.TransactionAmount											= AssetTransactionAmount.TransactionAmount
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate	= AssetTransactionAmount.BaseAmount.EnteredCurrencyRate
						invoked.FinanceCodeBlock											= DistributionAccount
					invoked.ReportCurrencyAmount.KeepRateAndAmount 						= true
					if (BookRel.PostCurrency.Book)
						invoked.CurrencyCode											= BookRel.Currency
					else
						invoked.CurrencyCode											= AssetRel.Currency
					invoked.TransactionDate			= TransactionDate
					invoked.PostingDate				= PostingDate
					invoked.ControlDocumentNumber	= Asset
					invoked.DocumentNumber			= Asset
					invoked.GeneralLedgerEvent 		= LocalGLEvent // "AA"
					invoked.Description			  	= Description
					invoked.JournalizeGroup			= PrmJournalizeGroup
					invoked.Capitalize				= 1
					invoked.BypassActiveCodeBlockEdit	= true
				if (LocalUpdateOrigin = blank)
					if(LocalCreateFundFromBatch)
						invoke Release GLTransactionDetailUnreleasedRel
					else
						invoke Release GLTransactionDetailRel

		JournalizeDistributionsForBatch is an Instance Action 
			restricted
			Parameters
				PrmOptions				is Numeric 1
				PrmUpdateOrigin			is Numeric 1
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmPostingDate			is Date
				PrmCompanyGroup         is a GeneralLedgerCompanyGroup
					default label is "GlobalLedgerCompanyGroup"
				PrmAssetCompany				is an AssetCompany
					default label is "AssetCompany"
				PrmAsset					is an Asset
					context of PrmFinanceEnterpriseGroup
				PrmDescription				is a Description
					default label is "Description"
				PrmJournalizeGroup      	is like JournalizeGroup
			Parameter Rules
				PrmPostingDate
					initial value is PostingDate
					default to PostingDate
			Action Rules
				if (PostingDate not entered)
					if (ProcessDate entered)
						PostingDate	= ProcessDate
					else
						PostingDate = TransactionDate
					YearEndDate	= DerivedCalendarEndDate
				if (Reference not = "Posted History Transaction")
					if (CompanySystemClosingControlRel exists
					and CompanySystemClosingControlRel.Control)
						constraint (PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostingDateMustBeWithinSystemClosingControlValidDateRange"
				invoke JournalizeDistributions AssetTransaction
					invoked.PrmOptions			 		= PrmOptions
					invoked.PrmUpdateOrigin		 		= PrmUpdateOrigin
					invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
					invoked.PrmPostingDate				= PrmPostingDate
					invoked.PrmCompanyGroup             = PrmCompanyGroup
					invoked.PrmAssetCompany   			= PrmAssetCompany
					invoked.PrmAsset					= PrmAsset
					invoked.PrmDescription		 		= PrmDescription
					invoked.PrmJournalizeGroup	 		= PrmJournalizeGroup


		JournalizeDistributions is an Instance Action 
			restricted
			completion message is "PostingComplete"

			Parameters
				PrmOptions					is Numeric 1
					States
						ReleaseTransactions value is blank
					   	ReportOnly	 		value is 1
				PrmUpdateOrigin				is Numeric 1
					States
						Online		value is blank
						Batch		value is 1
						PeriodClose	value is 2
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmPostingDate	  is Date
				PrmCompanyGroup   is a GeneralLedgerCompanyGroup
					default label is "GlobalLedgerCompanyGroup"
				PrmAssetCompany				is an AssetCompany
					default label is "AssetCompany"
				PrmAsset					is an Asset
					context of PrmFinanceEnterpriseGroup
				PrmDescription				is a Description
					default label is "Description"
				PrmJournalizeGroup      	is like JournalizeGroup

			Parameter Rules
				PrmOptions
					if (PrmOptions = blank)
						constraint (PrmAsset entered)
							"AssetIsRequiredForOnlineRelease"
					else
						constraint (PrmAsset not entered)
							"AnAssetCannotBeUsedAsAParameterInBatchRelease"
				PrmFinanceEnterpriseGroup
					required
				PrmDescription
					initial value is ThisProgramNameText
				PrmCompanyGroup
					LocalCompanyGroup = PrmCompanyGroup

			Local Fields
				CompletionMessage		is Alpha 150

			Action Rules
				if (PrmUpdateOrigin = 1)
					invoke BatchJournalizeReleasedTrans
						invoked.PrmFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup
						invoked.PrmAssetCompany				= PrmAssetCompany
						invoked.PrmCompanyGroup             = PrmCompanyGroup
						invoked.PrmDescription				= PrmDescription
						invoked.PrmJournalizeGroup			= PrmJournalizeGroup

				else
					if (PrmUpdateOrigin = 2)
						invoke BatchJournalizeForPeriodClose
							invoked.PrmFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup
							invoked.PrmPeriodEndDate			= PrmPostingDate
							invoked.PrmAssetCompany				= PrmAssetCompany
							invoked.PrmCompanyGroup             = PrmCompanyGroup
							invoked.PrmDescription				= PrmDescription
							invoked.PrmJournalizeGroup			= PrmJournalizeGroup
					else
						invoke OnlineJournalizeReleasedTrans
							invoked.PrmOptions			 		= PrmOptions
							invoked.PrmUpdateOrigin		 		= PrmUpdateOrigin
							invoked.PrmFinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							invoked.PrmCompanyGroup             = PrmCompanyGroup
							invoked.PrmAssetCompany   			= PrmAssetCompany
							invoked.PrmAsset					= PrmAsset
							invoked.PrmDescription		 		= PrmDescription
							invoked.PrmJournalizeGroup	 		= PrmJournalizeGroup

			Exit Rules
				if (BatchReleaseRecordCount = blank)
					CompletionMessage = "PostingComplete:NoRecordsFoundToJournalize<MyJournalizeGroup>"
				else
					CompletionMessage = "JournalizeAssetsCompleteJournalizeGroup:<MyJournalizeGroup>;<BatchReleaseRecordCount>RecordsProcessed"


		BatchJournalizeForPeriodClose is a Set Action
			restricted
			completion message is "PostingComplete"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmPeriodEndDate			is Date
				PrmAssetCompany				is an AssetCompany
					default label is "AssetCompany"
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
					default label is "GlobalLedgerCompanyGroup"
				PrmDescription				is a Description
					default label is "Description"
				PrmJournalizeGroup      	is like JournalizeGroup

			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmJournalizeGroup
					required
				PrmCompanyGroup
					LocalCompanyGroup = PrmCompanyGroup

			Sort Order is ByPeriodEndDate







			Instance Selection








				where (false)

			Action Rules
				Empty Set Rules
					invoke InitiateJournalizeForRunGroup PrmFinanceEnterpriseGroup in background
						invoked.PrmJournalizeGroup				= PrmJournalizeGroup
						invoked.PrmJournalizeGroupDescription	= PrmDescription















		BatchJournalizeReleasedTrans is a Set Action		
			restricted
			completion message is "PostingComplete"

			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAssetCompany				is an AssetCompany
					default label is "AssetCompany"
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
					default label is "GlobalLedgerCompanyGroup"
				PrmDescription				is a Description
					default label is "Description"
				PrmJournalizeGroup      	is like JournalizeGroup

			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmJournalizeGroup
					required
				PrmCompanyGroup
					LocalCompanyGroup = PrmCompanyGroup







			Instance Selection








				where(false)

			Sort Order
				FinanceEnterpriseGroup
				Company
				TransactionStatus


			Action Rules
				Empty Set Rules
					invoke InitiateJournalizeForRunGroup PrmFinanceEnterpriseGroup in background
						invoked.PrmJournalizeGroup				= PrmJournalizeGroup
						invoked.PrmJournalizeGroupDescription	= PrmDescription
					
















		OnlineJournalizeReleasedTrans is a Set Action		
			restricted
			completion message is "PostingComplete"

			Parameters
				PrmOptions					is Numeric 1
					States
						ReleaseTransactions value is blank
					   	ReportOnly	 		value is 1
				PrmUpdateOrigin				is Numeric 1
					States
						Online		value is blank
						Batch		value is 1
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmCompanyGroup   is a GeneralLedgerCompanyGroup
					default label is "GlobalLedgerCompanyGroup"
				PrmAssetCompany				is an AssetCompany
					default label is "AssetCompany"
				PrmAsset					is an Asset
					context of PrmFinanceEnterpriseGroup
				PrmDescription				is a Description
					default label is "Description"
				PrmJournalizeGroup      	is like JournalizeGroup

			Parameter Rules
				PrmOptions
					if (PrmOptions = blank)
						constraint (PrmAsset entered)
							"AssetIsRequiredForOnlineRelease"
					else
						constraint (PrmAsset not entered)
							"AnAssetCannotBeUsedAsAParameterInBatchRelease"
				PrmFinanceEnterpriseGroup
					required
				PrmDescription
					initial value is ThisProgramNameText
				PrmCompanyGroup
					LocalCompanyGroup = PrmCompanyGroup

			Local Fields
				CompletionMessage		is Alpha 150
				RecordCount				is Numeric 10
				MyJournalizeGroup		is like JournalizeGroup

			Instance Selection
				where ((Company = PrmAssetCompany or CompanyGroupRel exists)
				and   (Asset.AssetProcess = "ADD" or TransactionStatus.Released
				or	  (AssetProcess = "ADJ" and TransactionStatus.History and Reference = "Posted History Transaction" and IsPostedToGL))
				and   (Asset = PrmAsset	or PrmAsset not entered)
				and   (GLTransactionDetailRel.JournalizeGroup = PrmJournalizeGroup))


			Sort Order
				Company
				TransactionStatus

			Action Rules
				Set Rules
					Entrance Rules
						initialize RecordCount
						LocalFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup
						GLTSystem						= "AM"
						if (PrmJournalizeGroup entered)
							MyJournalizeGroup	= PrmJournalizeGroup
						else
							increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
							MyJournalizeGroup 	= GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
							PrmJournalizeGroup 	= MyJournalizeGroup

					Exit Rules
						invoke InitiateJournalizeForRunGroup PrmFinanceEnterpriseGroup in background
							invoked.PrmJournalizeGroup				= MyJournalizeGroup
							if (PrmDescription entered)
								invoked.PrmJournalizeGroupDescription	= PrmDescription
							else
								invoked.PrmJournalizeGroupDescription	= "Online Asset Release"
						BatchReleaseRecordCount = RecordCount
				Instance Rules
					increment RecordCount
					invoke UpdateJournalizeGroup GLTransactionDetailRel
						invoked.PrmJournalizeGroup 	= MyJournalizeGroup


		JournalizeInterCompanyDistributions is a Set Action		
			restricted
			completion message is "PostingComplete"

			Parameters
				PrmOptions					is Numeric 1
					States
						ReleaseTransactions value is blank
					   	ReportOnly	 		value is 1
				PrmUpdateOrigin				is Numeric 1
					States
						Online		value is blank
						Batch		value is 1
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAssetCompany				is an AssetCompany
					default label is "AssetCompany"
				PrmAsset					is an Asset
					context of PrmFinanceEnterpriseGroup
				PrmDescription				is a Description
					default label is "Description"
				PrmJournalizeGroup      	is like JournalizeGroup
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmDescription
					initial value is ThisProgramNameText
				PrmAssetCompany


			Local Fields
				CompletionMessage		is Alpha 150
				RecordCount				is Numeric 10
				MyJournalizeGroup		is like JournalizeGroup


			Instance Selection
				where (GLTransactionDetailRel.JournalizeGroup = PrmJournalizeGroup)

			Sort Order
				TransactionStatus
				Company
				DistributionAccount
				Asset

			Action Rules
				Empty Set Rules
					CompletionMessage = "PostingComplete:NoRecordsFoundToJournalize<MyJournalizeGroup>"


				Set Rules
					Entrance Rules
						initialize RecordCount
						LocalFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup
						GLTSystem						= "AM"
						MyJournalizeGroup				= PrmJournalizeGroup

					Exit Rules
						invoke InitiateJournalizeForRunGroup PrmFinanceEnterpriseGroup in background
							invoked.PrmJournalizeGroup				= MyJournalizeGroup
							invoked.PrmJournalizeGroupDescription	= PrmDescription
						CompletionMessage = "JournalizeAssetsCompleteForJournalizeGroup:<MyJournalizeGroup>"

				Instance Rules
					increment RecordCount
					TransactionStatus = "R"
					if (PrmJournalizeGroup entered)
						MyJournalizeGroup	= PrmJournalizeGroup
					if (GLTransactionDetailRel exist)
						MyJournalizeGroup = PrmJournalizeGroup
						invoke UpdateJournalizeGroup GLTransactionDetailRel
							invoked.PrmJournalizeGroup 	= MyJournalizeGroup


		JournalizeGLTrans is a Set Action   
			restricted						
			Parameters						

				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAssetCompany           is an AssetCompany
					default label is "AssetCompany"
				PrmDescription            is a Description
					default label is "Description"
				PrmJournalizeGroup        is AlphaUpper size 30
					default label is "JournalizeGroup"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmJournalizeGroup
					required
			Local Fields
				MyJournalizeGroup is AlphaUpper size 30
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and   (PrmAssetCompany entered
					and   Company = PrmAssetCompany
					or    PrmAssetCompany not entered
					and   CompanyGroupRel exists)
				and   TransactionStatus.Released
				and   GLTransactionDetailRel.JournalizeGroup = PrmJournalizeGroup)
			Sort Order
				FinanceEnterpriseGroup
				Company
				TransactionStatus
			Action Rules
				Set Rules
					Entrance Rules
						LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
						GLTSystem = "AM"
						MyJournalizeGroup = PrmJournalizeGroup
					Exit Rules
						invoke InitiateJournalizeForRunGroup PrmFinanceEnterpriseGroup in background
							invoked.PrmJournalizeGroup = MyJournalizeGroup
							invoked.PrmJournalizeGroupDescription = PrmDescription
						invoke JournalizeTransactions GLTransactionDetailRel 
							invoked.PrmEnterpriseGroup				= PrmFinanceEnterpriseGroup
							invoked.PrmJournalizeGroup				= PrmJournalizeGroup
							invoked.PrmJournalizeGroupDescription 	= PrmDescription
































		RebuildSummaryBalances is an Instance Action
			restricted
			Action Rules
				invoke RebuildAssetTransactionSummary

		RebuildAssetTransactionSummary is a Set Action	
			restricted
			completion message is "Rebuild_of_Asset_Transaction_Summary_Balances_Complete"

			Parameters				
				PrmSetAction				is Boolean
				PrmAssetBatchUpdateResult	is like AssetBatchUpdateResult
				PrmCompany					is like AssetCompany
				PrmBook						is like Book
				PrmUpdateDateFlag			is Boolean

			Local Fields
				LocalInCalendarEndDate		is Date	
				LocalInCompany				is an AssetCompany	
				LocalInBook				 	is a Book	
				LocalInDimensionCode		is Alpha 70
				LocalInLedger				is like Ledger
				LocalInAccountingEntity		is like AccountingEntity
				LocalInAccountingUnit		is like AccountingUnit
				LocalInChartAccount			is like GeneralLedgerChartAccount
				LocalInProject				is like Project
				LocalInDim1					is like FinanceDimension1
				LocalInDim2 				is like FinanceDimension2
				LocalInDim3 				is like FinanceDimension3
				LocalInDim4 				is like FinanceDimension4
				LocalInDim5 				is like FinanceDimension5
				LocalInDim6 				is like FinanceDimension6
				LocalInDim7 				is like FinanceDimension7
				LocalInDim8 				is like FinanceDimension8
				LocalInDim9 				is like FinanceDimension9
				LocalInDim10 				is like FinanceDimension10
				LocalInTransactionAmount	is an InternationalAmount	

			Instance Selection
				where ((PrmUpdateDateFlag
				and Company = PrmCompany
				and Book = PrmBook
				and YearEndDate entered)
				or	((TransactionStatus = "R"
						or TransactionStatus = "H")
					and YearEndDate entered
					and !PrmSetAction
					and !PrmUpdateDateFlag)
				or (PrmSetAction
					and BatchUpdateResult = PrmAssetBatchUpdateResult))

			Sort Order
				Company
				Book
				DistributionAccount.ToAccountingEntity
				DistributionAccount.AccountingUnit
				DistributionAccount.GeneralLedgerChartAccount
				DistributionAccount.Project
				DistributionAccount.FinanceDimension1
				DistributionAccount.FinanceDimension2
				DistributionAccount.FinanceDimension3
				DistributionAccount.FinanceDimension4
				DistributionAccount.FinanceDimension5
				DistributionAccount.FinanceDimension6
				DistributionAccount.FinanceDimension7
				DistributionAccount.FinanceDimension8
				DistributionAccount.FinanceDimension9
				DistributionAccount.FinanceDimension10
				YearEndDate

			Accumulators
				AdditionSummaryBalance
				AdjustmentSummaryBalance
				TransferSummaryBalance
				DisposalSummaryBalance
				ReinstatementSummaryBalance
				DepreciationSummaryBalance
				RevalueSummaryBalance
				RevalueAmortizationSummaryBalance
				ImpairmentSummaryBalance
				ImpairmentAmortizationSummaryBalance
				TransferBalancingSummaryBalance
				TransactionSummaryBalance

			Action Rules
				Set Rules
				YearEndDate Set Rules
					Entrance Rules
						initialize AdditionSummaryBalance
						initialize AdjustmentSummaryBalance
						initialize TransferSummaryBalance
						initialize DisposalSummaryBalance
						initialize ReinstatementSummaryBalance
						initialize DepreciationSummaryBalance
						initialize RevalueSummaryBalance
						initialize RevalueAmortizationSummaryBalance
						initialize ImpairmentSummaryBalance
						initialize ImpairmentAmortizationSummaryBalance
						initialize TransferBalancingSummaryBalance
						initialize TransactionSummaryBalance

						LocalInLedger				= DistributionAccount.Ledger
						LocalInAccountingEntity		= DistributionAccount.ToAccountingEntity
						LocalInAccountingUnit		= DistributionAccount.AccountingUnit
						LocalInChartAccount			= DistributionAccount.GeneralLedgerChartAccount
						LocalInProject				= DistributionAccount.Project
						LocalInDim1					= DistributionAccount.FinanceDimension1
						LocalInDim2 				= DistributionAccount.FinanceDimension2
						LocalInDim3 				= DistributionAccount.FinanceDimension3
						LocalInDim4 				= DistributionAccount.FinanceDimension4
						LocalInDim5 				= DistributionAccount.FinanceDimension5
						LocalInDim6 				= DistributionAccount.FinanceDimension6
						LocalInDim7 				= DistributionAccount.FinanceDimension7
						LocalInDim8 				= DistributionAccount.FinanceDimension8
						LocalInDim9 				= DistributionAccount.FinanceDimension9
						LocalInDim10 				= DistributionAccount.FinanceDimension10

					Exit Rules
						LocalCompany				= Company
						LocalBook					= Book
						LocalLedger					= LocalInLedger
						LocalToAccountingEntity		= LocalInAccountingEntity
						LocalAccountingUnit			= LocalInAccountingUnit
						LocalChartAccount 			= LocalInChartAccount
						LocalProject				= LocalInProject
						LocalDimensionCode			= LocalInDimensionCode
						LocalDistributionAccount	= DistributionAccount
						LocalBookCalendarEndDate	= YearEndDate
						invoke Update LocalAssetTransactionSummaryRel	
							invoked.Company										= LocalCompany
							invoked.Book										= LocalBook
							invoked.YearEndDate									= LocalBookCalendarEndDate
							invoked.AssetTransactionSummary.DimensionCode		= LocalDimensionCode
							invoked.AssetTransactionSummary.Ledger 				= LocalLedger
							invoked.AssetTransactionSummary.AccountingEntity	= LocalToAccountingEntity
							invoked.AssetTransactionSummary.AccountingUnit		= LocalAccountingUnit
							invoked.AssetTransactionSummary.GeneralLedgerChartAccount = LocalChartAccount
							invoked.AssetTransactionSummary.Project				= LocalProject
							invoked.FinanceDimension1							= LocalInDim1
							invoked.FinanceDimension2							= LocalInDim2
							invoked.FinanceDimension3							= LocalInDim3
							invoked.FinanceDimension4							= LocalInDim4
							invoked.FinanceDimension5							= LocalInDim5
							invoked.FinanceDimension6							= LocalInDim6
							invoked.FinanceDimension7							= LocalInDim7
							invoked.FinanceDimension8							= LocalInDim8
							invoked.FinanceDimension9							= LocalInDim9
							invoked.FinanceDimension10							= LocalInDim10
							invoked.BaseNumberOfDecimals						= Book.Currency.NumberOfDecimals


							if (!PrmSetAction)
								invoked.AdditionBalance						= AdditionSummaryBalance
								invoked.AdjustmentBalance					= AdjustmentSummaryBalance
								invoked.TransferBalance						= TransferSummaryBalance
								invoked.DisposalBalance						= DisposalSummaryBalance
								invoked.ReinstatementBalance				= ReinstatementSummaryBalance
								invoked.DepreciationBalance					= DepreciationSummaryBalance
								invoked.RevalueBalance						= RevalueSummaryBalance
								invoked.RevalueAmortizationBalance			= RevalueAmortizationSummaryBalance
								invoked.ImpairmentBalance					= ImpairmentSummaryBalance
								invoked.ImpairmentAmortizationBalance		= ImpairmentAmortizationSummaryBalance
								invoked.TransferBalancingBalance			= TransferBalancingSummaryBalance
								invoked.TransactionBalance					= TransactionSummaryBalance
							else
								invoked.DepreciationBalance					+= DepreciationSummaryBalance
								invoked.RevalueAmortizationBalance			+= RevalueAmortizationSummaryBalance
								invoked.ImpairmentAmortizationBalance		+= ImpairmentAmortizationSummaryBalance
								invoked.TransactionBalance					+= TransactionSummaryBalance




				Instance Rules
					if (AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount = blank)
						if (TransactionAmount entered)
							if (Book.PostCurrency 	= Book
							or Book.Currency 		= Asset.Currency)
								AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount = TransactionAmount
								AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency
							else
								if (Book.CurrencyTable entered)
									LocalCurrencyTable	= Book.CurrencyTable
								else
									LocalCurrencyTable	= Asset.CurrencyTable
								TransientExchangeDate							= TransactionDate
								LocalCurrencyExchange.TransactionAmount			= EachFundTransactionAmount
								LocalFromCurrency           					= Asset.Currency
								LocalBaseAmount.ToCurrency						= Book.Currency
								LocalCurrencyExchange.BaseAmount.ToCurrency 	= Book.Currency
								LocalCurrencyRate								= LocalBaseAmount.OutputCurrencyRate
								LocalEnterpriseGroup							= Asset.Company.FinanceEnterpriseGroup
								LocalBaseAmount.EnteredCurrencyRate	 			= LocalCurrencyRate
								TransientExchangeRate							= LocalCurrencyRate
								AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount = LocalBaseAmount.OutputCurrencyAmount
								AssetTransactionAmount.TransactionAmount 	 	= TransactionAmount
								AssetTransactionAmount.ExchangeDate			 	= TransactionDate
								AssetTransactionAmount.BaseAmount.ToCurrency 	= Asset.Currency

					LocalInDimensionCode = DistributionAccount.DimensionCode

					if (!PrmSetAction)
						if (AssetProcess.Addition)
							AdditionSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Adjustment)
							AdjustmentSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Transfer)
							TransferSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Disposal or AssetProcess.Reinstatement)
							DisposalSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.ReAdd)
							ReinstatementSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Depreciation)
							DepreciationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Revalue)
							RevalueSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.RevalueAmortization)
							RevalueAmortizationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.Impairment)
							ImpairmentSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.ImpairmentAmortization)
							ImpairmentAmortizationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.TransferBalancing)
							TransferBalancingSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
							AdditionSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
					else
						if (AssetProcess.Depreciation)
							DepreciationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.RevalueAmortization)
							RevalueAmortizationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount
						else
						if (AssetProcess.ImpairmentAmortization)
							ImpairmentAmortizationSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount

					TransactionSummaryBalance += AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount





		UpdatePostingDate is a Set Action
			default label is "PopulatePostingDate"
			restricted
			run in background
			Instance Selection
				where (PostingDate 	= blank)
			Action Rules
				Instance Rules
					PostingDate	= TransactionDate
					if (PostingDate changed)
						YearEndDate		= DerivedCalendarEndDate


		UpdateYearEndDate is a Set Action

			restricted
			Instance Selection
				where (YearEndDate 	= blank)
			Action Rules
				Set Rules
				Instance Rules
					YearEndDate = DerivedCalendarEndDate







		TransactionDateUpdate is an Instance Action
			restricted
			default label is "TransactionDateUpdate"
			Parameters
				PrmTransactionDate is Date
					default label is "NewTransactionDate"

			Action Rules
				TransactionDate = PrmTransactionDate


		AssetReleaseTransfer is an Instance Action

			valid when (Asset.UnreleasedAssetTransferExists)
			Action Rules
				invoke PostRelease.Release Asset

		AssetResetTransfer is an Instance Action

			valid when (Asset.UnreleasedAssetTransferExists)


			Action Rules
				invoke PostRelease.ResetTransfer Asset


		PurgeAssetTransactions is a Set Action
			restricted

			Parameters
				PrmCompany				is an AssetCompany
				PrmFromDate				is Date
				PrmToDate				is Date
				PrmAssetGroup			is like AssetGroup
				PrmAssetType			is like AssetType
				PrmAssetSubType			is like AssetType

			Instance Selection
				include deleted records
				where (Company = PrmCompany
				and    (PrmFromDate not entered or TransactionDate >= PrmFromDate)
				and    (PrmToDate not entered or TransactionDate <= PrmToDate)
				and    (PrmAssetGroup not entered or AssetGroup = PrmAssetGroup)
				and    (PrmAssetType not entered or AssetType.Type = PrmAssetType)
				and    (PrmAssetSubType not entered or AssetType.SubType = PrmAssetSubType))

			Action Rules
				Instance Rules
					invoke Purge

		PurgeDisposedAssetTransactions is a Set Action
			restricted
			Parameters
				PrmCompany					is an AssetCompany
				PrmAsset					is an Asset
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
				PrmLeaseCompany				is like GeneralLedgerCompany
				PrmLocationName				is like AssetLocation
				PrmDivision					is like AssetDivision
				PrmAssetGroup				is like AssetGroup
				PrmFromDate					is Date
				PrmToDate					is Date

			Instance Selection
				include deleted records
				where (Asset.Company = PrmCompany
				and   (PrmAsset not entered or (Asset = PrmAsset and Asset.Company.FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup))
				and   (PrmLeaseCompany not entered or Asset.AssetLease.LeaseCompany = PrmLeaseCompany)
				and   (PrmLocationName not entered or Asset.AssetLocation = PrmLocationName)
				and   (PrmDivision not entered or Asset.AssetDivision = PrmDivision)
				and   (PrmAssetGroup not entered or Asset.AssetGroup = PrmAssetGroup)
				and   (PrmFromDate not entered or Asset.AssetDisposalDate >= PrmFromDate)
				and   (PrmToDate not entered or Asset.AssetDisposalDate <= PrmToDate)
				and   Asset.Status.Disposed)

			Action Rules
				Instance Rules
					invoke Purge

		AssetTransactionsPurge is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmBook									is like Book
				PrmAsset								is like Asset
				PrmPurgeOption					is Numeric 1
					default label is "ActionOption"
					States
						PurgeRecords 	value is 1
						ReportOnly		value is 2
				PrmCompany                 				is an AssetCompany


			Instance Selection
				include deleted records
				where (FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
				and    Company									= PrmCompany
				and	   Book										= PrmBook
				and   (PrmAsset not entered
				or 	   Asset									= PrmAsset))
			Action Rules
				Set Rules
					Exit Rules
				Instance Rules
					if(PrmPurgeOption.PurgeRecords)
						if (PrmAsset entered
						and IsHistoryOrReleased)
							if (AssetPostingDateSummaryRel exists)
								invoke Update AssetPostingDateSummaryRel
									invoked.InputProcess = Asset.AssetProcess
									invoked.InputAmount = (-1 * AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
						invoke Purge

		Purge is a Purge Action
			restricted
			bypass relational integrity rules

		RemovePurgedLeaseID is an Update Action  
			restricted
			bypass field rules











			Action Rules
				initialize AssetLease

		CreateBatchHistoryFundTransaction is an Instance Action
			restricted
			Parameters
				PrmJournalizeGroup			is a JournalizeGroup
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
			Action Rules
				LocalCreateFundFromBatch		= true
				LocalJournalizeGroup		   	= PrmJournalizeGroup
				LocalFinanceEnterpriseGroup    	= PrmFinanceEnterpriseGroup
				LocalCurrencyAmount 			= TransactionAmount
				LocalDepreciationDifference		= RoundedCurrencyAmount
				LocalAccountType				= AssetAccountType
				if (TransactionAmount entered)
					if (FundAccountType)
						initialize F2
						LocalTransactionAmount				= LocalDepreciationDifference
						FundCount							= instance count of AssetFundsRel
						for each AssetFundsRel
							F2 += 1
							EachFundTransactionAmount 		= (each.PercentContribution * LocalTransactionAmount)
							LocalCurrencyAmount 			= EachFundTransactionAmount
							EachFundTransactionAmount		= RoundedCurrencyAmount
							if (F2 < FundCount)
								FundTransactionTotal		+= EachFundTransactionAmount
							else
								EachFundTransactionAmount 	= (LocalTransactionAmount - FundTransactionTotal)
							if (EachFundTransactionAmount != 0)
								invoke RestrictedCreate
									assign result to LocalAssetTransaction
									invoked.OnlineSystemCreate							= true
									invoked.DistributionAccount							= DistributionAccount
									invoked.DistributionAccount.ToAccountingEntity 		= each.AccountingEntity
									if (each.AccountingUnit entered)
										invoked.DistributionAccount.AccountingUnit	 	= each.AccountingUnit
									if (each.Project entered)
										invoked.DistributionAccount.Project 			= each.Project
									if (each.FinanceDimension1 entered)
										invoked.DistributionAccount.FinanceDimension1 	= each.FinanceDimension1
									if (each.FinanceDimension2 entered)
										invoked.DistributionAccount.FinanceDimension2	= each.FinanceDimension2
									if (each.FinanceDimension3 entered)
										invoked.DistributionAccount.FinanceDimension3 	= each.FinanceDimension3
									if (each.FinanceDimension4 entered)
										invoked.DistributionAccount.FinanceDimension4	= each.FinanceDimension4
									if (each.FinanceDimension5 entered)
										invoked.DistributionAccount.FinanceDimension5 	= each.FinanceDimension5
									if (each.FinanceDimension6 entered)
										invoked.DistributionAccount.FinanceDimension6	= each.FinanceDimension6
									if (each.FinanceDimension7 entered)
										invoked.DistributionAccount.FinanceDimension7 	= each.FinanceDimension7
									if (each.FinanceDimension8 entered)
										invoked.DistributionAccount.FinanceDimension8	= each.FinanceDimension8
									if (each.FinanceDimension9 entered)
										invoked.DistributionAccount.FinanceDimension9 	= each.FinanceDimension9
									if (each.FinanceDimension10 entered)
										invoked.DistributionAccount.FinanceDimension10 	= each.FinanceDimension10

									invoked.TransactionStatus							= "H"
									invoked.PostingDate									= PostingDate
									invoked.YearEndDate									= PostingDate
									invoked.ProcessDate									= PostingDate
									if (Book.Impairment)
										invoked.AssetAccountType						= "IMT"
										invoked.DistributionAccount						= AssetBookRel.TranAccumulatedImpairmentLoss

										invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
										if (each.AccountingUnit entered)
											invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
										if (each.Project entered)
											invoked.DistributionAccount.Project 				= each.Project
										if (each.FinanceDimension1 entered)
											invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
										if (each.FinanceDimension2 entered)
											invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
										if (each.FinanceDimension3 entered)
											invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
										if (each.FinanceDimension4 entered)
											invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
										if (each.FinanceDimension5 entered)
											invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
										if (each.FinanceDimension6 entered)
											invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
										if (each.FinanceDimension7 entered)
											invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
										if (each.FinanceDimension8 entered)
											invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
										if (each.FinanceDimension9 entered)
											invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
										if (each.FinanceDimension10 entered)
											invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10

										if (Book.PostHistory)
											invoked.Reference							= "Posted History Transaction"
										else
											invoked.Reference							= "Impairment History Transaction"
										invoked.ProcessSequence							= Asset.LastAssetImpairment
										invoked.AssetProcess							= "IMA"
										invoked.AssetImpairment							= AssetBookRel.DerivedAssetImpairment
									else
										invoked.AssetAccountType						= AssetAccountType
										if (Book.PostHistory)
											invoked.Reference							= "Posted History Transaction"
										else
											invoked.Reference							= "ADD"
									if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
										TransientExchangeDate							= TransactionDate
										LocalCurrencyExchange.TransactionAmount			= EachFundTransactionAmount
										include ConvertLocalDepreciationDifference
									else
										initialize BookDepreciationDifference
									invoked.TransactionAmount							= EachFundTransactionAmount
									if (Book.PostCurrency.Book)
										invoked.TransientBookCurrency					= Book.Currency
									else
										invoked.TransientBookCurrency					= Asset.Currency
									invoked.AssetTransactionAmount.TransactionAmount 	= EachFundTransactionAmount
									invoked.AssetTransactionAmount.ExchangeDate 		= TransactionDate
									invoked.AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency

									if (Book.PostHistory)
										invoked.Reference								= "Posted History Transaction"
									else
										invoked.Reference								= "ADD"
									fill in fields from this instance

							GLTSystem 			= "AM"
							if (Book.PostHistory)
								invoke Unreleased.Create GLTransactionDetail
									fill in fields from this instance
									invoked.JournalByJournalCode	= true
									invoked.JournalCode				= 2
									invoked.JournalizeGroup			= PrmJournalizeGroup
									invoked.OriginatingTransaction 	= reference to LocalAssetTransaction.AssetTransaction
									invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.System					= GLTSystem
									invoked.Reference				= ThisProgramNameText + "History Transaction"
									if (ProcessAsset entered)
										invoked.AccountingEntity		= ProcessAsset.Company.AccountingEntity
									else
										invoked.AccountingEntity		= Company.AccountingEntity
									invoked.TransactionAmount		= EachFundTransactionAmount
									if (BookRel.PostCurrency.Book)
							   			invoked.CurrencyCode		= BookRel.Currency
							   		else
							   		    invoked.CurrencyCode        = AssetRel.Currency
									invoked.TransactionDate			= TransactionDate
									if (PostingDate not entered)
										if (UnreleasedTransactionsRel exists)
											PostingDate 			= first UnreleasedTransactionsRel.PostingDate
										else
											if (ProcessDate entered)
												PostingDate	= ProcessDate
											else
												PostingDate = TransactionDate
									invoked.PostingDate				= PostingDate
									invoked.FinanceCodeBlock		= LocalAssetTransaction.DistributionAccount
									invoked.ControlDocumentNumber 	= Asset
									invoked.DocumentNumber		  	= Asset
						           	invoked.GeneralLedgerEvent 		= "AA"
									invoked.Description			  	= Description
									invoked.AutoReverse 			= false
									invoked.Capitalize				= 1
								invoke Release GLTransactionDetailUnreleasedRel

					else
						if (Book.PostHistory)
							invoke Unreleased.Create GLTransactionDetail
								fill in fields from this instance
								invoked.JournalByJournalCode	= true
								invoked.JournalCode				= 2
								invoked.JournalizeGroup			= PrmJournalizeGroup
								invoked.OriginatingTransaction 	= reference to LocalAssetTransaction.AssetTransaction
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.System					= GLTSystem
								invoked.Reference				= ThisProgramNameText + "History Transaction"
								if (ProcessAsset entered)
									invoked.AccountingEntity		= ProcessAsset.Company.AccountingEntity
								else
									invoked.AccountingEntity		= Company.AccountingEntity

								invoked.TransactionAmount		= TransactionAmount
								if (BookRel.PostCurrency.Book)
						   			invoked.CurrencyCode		= BookRel.Currency
						   		else
						   		    invoked.CurrencyCode        = AssetRel.Currency
								invoked.TransactionDate			= TransactionDate
								if (PostingDate not entered)
									if (UnreleasedTransactionsRel exists)
										PostingDate 			= first UnreleasedTransactionsRel.PostingDate
									else
										if (ProcessDate entered)
											PostingDate	= ProcessDate
										else
											PostingDate = TransactionDate
								invoked.PostingDate				= PostingDate
								invoked.FinanceCodeBlock		= LocalAssetTransaction.DistributionAccount
								invoked.ControlDocumentNumber 	= Asset
								invoked.DocumentNumber		  	= Asset
					           	invoked.GeneralLedgerEvent 		= "AA"
								invoked.Description			  	= Description
								invoked.AutoReverse 			= false
								invoked.Capitalize				= 1
							invoke Release GLTransactionDetailUnreleasedRel
			Exit Rules
				if (FundAccountType)
					invoke FundDelete



		CreateBatchFundTransaction is an Instance Action
			restricted
			Parameters
				PrmCurrency 				is a FromCurrency
				PrmJournalizeGroup			is a JournalizeGroup
				PrmReportMode				is AlphaUpper size 1
				PrmAPC						is an AssetBatchUpdateResult

			Action Rules
				LocalCreateFundFromBatch 	= true
				LocalJournalizeGroup		= PrmJournalizeGroup
				LocalCurrency		   	 	= PrmCurrency
				if (TransactionAmount entered
				and !Asset.AssetProcess.ReAdd
				and Asset.FundAllocationRequired
				and FundAccountType)
					invoke CreateFundTransactions
						invoked.PrmTransactionDate 	= TransactionDate
						invoked.ReportMode 	= PrmReportMode
						invoked.PrmAPC		= PrmAPC

		CreateFundTransactions is an Instance Action
			restricted
			Parameters
				AdjustmentItemsAdded 	is Numeric 3
				AdjustmentItemTotal   	is an InternationalAmount
				AdjustmentAmount		is an InternationalAmount
				ReportMode				is AlphaUpper size 1
				PrmAPC					is an AssetBatchUpdateResult
				LocalTransaction		is an AssetTransaction 
		        TransferFromAsset		is like Asset
		        PrmTransactionDate		is Date
				PrmBatchRelease 		is Numeric 1

			Action Rules
				TransientTransactionDate			= PrmTransactionDate
				LocalTransferAsset					= Asset
				LocalAccountType 					= AssetAccountType
				if (!Asset.FundOverride  			
				and AdjustmentItemsAdded entered)   






					if (AdjustmentItemsAdded = 1)
						NumberOfFunds 				= instance count of NewAssetItemFundsRel  
						for each NewAssetItemFundsRel                                         
							FundCount 				+= 1
							LocalAccountingEntity	= each.AccountingEntity
							LocalAccountingUnit		= each.AccountingUnit
							LocalFund 				= each.Fund
							LocalTransactionAmount	= each.TransactionAmount
							LocalFundPercent		= each.PercentContribution
							LocalFundAmount  		= each.TransactionAmount
							if (AssetAccountType.Asset
							or AssetAccountType.Clearing)
								EachFundTransactionAmount 		= LocalFundAmount
							else    									
								if (FundCount < NumberOfFunds)
									EachFundTransactionAmount 	= (TransactionAmount * LocalFundPercent)
									FundTransactionTotal		+= EachFundTransactionAmount
								else
									EachFundTransactionAmount 	= (TransactionAmount - FundTransactionTotal)
							if (AssetAccountType.Clearing)
								EachFundTransactionAmount 		= (EachFundTransactionAmount * -1)
							if (EachFundTransactionAmount != 0)
								invoke RestrictedCreate
									assign result to LocalTransaction
									invoked.TransactionAmount								= EachFundTransactionAmount
									if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
										TransientExchangeDate								= TransactionDate
										LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
										include ConvertLocalDepreciationDifference
									else
										initialize BookDepreciationDifference
									invoked.TransactionAmount								= EachFundTransactionAmount
									if (Book.PostCurrency.Book)
										invoked.TransientBookCurrency						= Book.Currency
									else
										invoked.TransientBookCurrency						= Asset.Currency
									invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
									invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
									invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
									if (PrmTransactionDate entered)
										invoked.TransactionDate								= PrmTransactionDate
									invoked.DistributionAccount								= DistributionAccount

									invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
									if (each.AccountingUnit entered)
										invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
									if (each.Project entered)
										invoked.DistributionAccount.Project 				= each.Project
									if (each.FinanceDimension1 entered)
										invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
									if (each.FinanceDimension2 entered)
										invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
									if (each.FinanceDimension3 entered)
										invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
									if (each.FinanceDimension4 entered)
										invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
									if (each.FinanceDimension5 entered)
										invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
									if (each.FinanceDimension6 entered)
										invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
									if (each.FinanceDimension7 entered)
										invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
									if (each.FinanceDimension8 entered)
										invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
									if (each.FinanceDimension9 entered)
										invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
									if (each.FinanceDimension10 entered)
										invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10
									fill in fields from this instance
								if (ReportMode entered
								and ReportMode = "Y"
								and PrmAPC entered)
									invoke Create AssetTransactionDetail
										invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
										invoked.AssetBatchUpdateResult					= PrmAPC
										invoked.AssetCompany							= Asset.Company
										invoked.Asset									= Asset
										invoked.Book									= Book
										invoked.AssetTransaction						= LocalTransaction
										invoked.RecordType								= 1

					TotalNewFunds 					= sum NewAssetItemFundsRel.TransactionAmount
					if (AdjustmentItemsAdded > 1)
						initialize FundCount
						initialize FundTransactionTotal
						initialize TotalForLocalFund
						for each distinct FundFieldGroup in NewAssetItemFundsRel
							NumberOfFunds						+= 1
						for each distinct FundFieldGroup in NewAssetItemFundsRel
							FundCount 							+= 1
							LocalAccountingEntity				= each.AccountingEntity
							LocalAccountingUnit					= each.AccountingUnit
							if (FinanceEnterpriseGroup.FundDimension.AccountingUnit)
								LocalFund						= each.AccountingUnit
							else
								LocalFund						= each.FinanceDimension1
							LocalProject						= each.Project
					  		LocalFinanceDimension1				= each.FinanceDimension1
					  		LocalFinanceDimension2				= each.FinanceDimension2
					  		LocalFinanceDimension3				= each.FinanceDimension3
					  		LocalFinanceDimension4				= each.FinanceDimension4
					  		LocalFinanceDimension5				= each.FinanceDimension5
					   		LocalFinanceDimension6				= each.FinanceDimension6
					   		LocalFinanceDimension7				= each.FinanceDimension7
					  		LocalFinanceDimension8				= each.FinanceDimension8
					  		LocalFinanceDimension9				= each.FinanceDimension9
					  		LocalFinanceDimension10				= each.FinanceDimension10
							TotalForLocalFund 					= sum LocalItemFundsRel.TransactionAmount
					  		if (FundCount = NumberOfFunds)
					  			EachFundTransactionAmount		= TransactionAmount - FundTransactionTotal
					  		else
								EachFundTransactionAmount		= TransactionAmount * (TotalForLocalFund / TotalNewFunds)
								FundTransactionTotal			+= EachFundTransactionAmount
							if (EachFundTransactionAmount != 0)
								invoke RestrictedCreate
									assign result to LocalTransaction
									invoked.TransactionAmount								= EachFundTransactionAmount
									if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
										TransientExchangeDate								= TransactionDate
										LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
										include ConvertLocalDepreciationDifference
									else
										initialize BookDepreciationDifference
									if (Book.PostCurrency.Book)
										invoked.TransientBookCurrency						= Book.Currency
									else
										invoked.TransientBookCurrency						= Asset.Currency
									invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
									invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
									invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
									if (PrmTransactionDate entered)
										invoked.TransactionDate								= PrmTransactionDate
									invoked.DistributionAccount								= DistributionAccount
									invoked.DistributionAccount.ToAccountingEntity			= LocalAccountingEntity
									if (LocalAccountingUnit entered)
										invoked.DistributionAccount.AccountingUnit			= LocalAccountingUnit
									if (LocalProject entered)
										invoked.DistributionAccount.Project					= LocalProject
									if (LocalFinanceDimension1 entered)
										invoked.DistributionAccount.FinanceDimension1		= LocalFinanceDimension1
									if (LocalFinanceDimension2 entered)
										invoked.DistributionAccount.FinanceDimension2		= LocalFinanceDimension2
									if (LocalFinanceDimension3 entered)
										invoked.DistributionAccount.FinanceDimension3		= LocalFinanceDimension3
									if (LocalFinanceDimension4 entered)
										invoked.DistributionAccount.FinanceDimension4		= LocalFinanceDimension4
									if (LocalFinanceDimension5 entered)
										invoked.DistributionAccount.FinanceDimension5		= LocalFinanceDimension5
									if (LocalFinanceDimension6 entered)
										invoked.DistributionAccount.FinanceDimension6		= LocalFinanceDimension6
									if (LocalFinanceDimension7 entered)
										invoked.DistributionAccount.FinanceDimension7		= LocalFinanceDimension7
									if (LocalFinanceDimension8 entered)
										invoked.DistributionAccount.FinanceDimension8		= LocalFinanceDimension8
									if (LocalFinanceDimension9 entered)
										invoked.DistributionAccount.FinanceDimension9		= LocalFinanceDimension9
									if (LocalFinanceDimension10 entered)
										invoked.DistributionAccount.FinanceDimension10		= LocalFinanceDimension10
									fill in fields from this instance
								if (ReportMode entered
								and ReportMode = "Y"
								and PrmAPC entered)
									invoke Create AssetTransactionDetail
										invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
										invoked.AssetBatchUpdateResult					= PrmAPC
										invoked.AssetCompany							= Asset.Company
										invoked.Asset									= Asset
										invoked.Book									= Book
										invoked.AssetTransaction						= LocalTransaction
										invoked.RecordType								= 1


				else
					if (!Reference = "Transfer To"
					and !Reference = "Mass Transfer To")
						if ((!Asset.FundOverride
						and !AssetProcess.Transfer)
						or (Asset.FundOverride)
						or (AssetLastSequenceTransferRel exists
						and AssetLastSequenceTransferRel.FullOrPartial.Full))

							LocalAccountType = AssetAccountType
							if (AssetFundAllocationRequired
							and LocalFundAccountType
							and AssetFundsRel exists)
								initialize F1
								LocalTransactionAmount				= TransactionAmount
								FundCount							= instance count of AssetFundsRel
								for each AssetFundsRel
									F1 += 1
									EachFundTransactionAmount 		= (each.PercentContribution * LocalTransactionAmount)
									LocalCurrencyAmount 			= EachFundTransactionAmount
									LocalAccountingEntity			= each.AccountingEntity
									LocalAccountingUnit				= each.AccountingUnit
									LocalFund						= each.Fund
									LocalFundPercent				= each.PercentContribution
									EachFundTransactionAmount		= RoundedCurrencyAmount
									if (F1 < FundCount)
										FundTransactionTotal		+= EachFundTransactionAmount
									else
										EachFundTransactionAmount 	= (LocalTransactionAmount - FundTransactionTotal)
									initialize LocalTransaction
									if (EachFundTransactionAmount != 0)
										invoke RestrictedCreate
											assign result to LocalAssetTransaction
											invoked.TransactionAmount								= EachFundTransactionAmount
											if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
												TransientExchangeDate								= TransactionDate
												LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
												include ConvertLocalDepreciationDifference
											else
												initialize BookDepreciationDifference
											invoked.TransactionAmount								= EachFundTransactionAmount
											if (Book.PostCurrency.Book)
												invoked.TransientBookCurrency						= Book.Currency
											else
												invoked.TransientBookCurrency						= Asset.Currency
											invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
											invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
											invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
											if (PrmTransactionDate entered)
												invoked.TransactionDate								= PrmTransactionDate
											invoked.DistributionAccount								= DistributionAccount
											invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
											if (each.AccountingUnit entered)
												invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
											if (each.Project entered)
												invoked.DistributionAccount.Project 				= each.Project
											if (each.FinanceDimension1 entered)
												invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
											if (each.FinanceDimension2 entered)
												invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
											if (each.FinanceDimension3 entered)
												invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
											if (each.FinanceDimension4 entered)
												invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
											if (each.FinanceDimension5 entered)
												invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
											if (each.FinanceDimension6 entered)
												invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
											if (each.FinanceDimension7 entered)
												invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
											if (each.FinanceDimension8 entered)
												invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
											if (each.FinanceDimension9 entered)
												invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
											if (each.FinanceDimension10 entered)
												invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10
											fill in fields from this instance

										LocalTransaction	= LocalAssetTransaction.AssetTransaction
										if (ReportMode entered
										and ReportMode = "Y"
										and PrmAPC entered)
											invoke Create AssetTransactionDetail
												invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
												invoked.AssetBatchUpdateResult					= PrmAPC
												invoked.AssetCompany							= Asset.Company
												invoked.Asset									= Asset
												invoked.Book									= Book
												invoked.AssetTransaction						= LocalTransaction
												invoked.RecordType								= 1
										if(LocalCreateFundFromBatch)
											invoke CreateGLTransDetailFromBatch
												invoked.PrmCurrency		   = LocalCurrency
												invoked.PrmJournalizeGroup = LocalJournalizeGroup
										initialize LocalTransaction

										if (Company.BalanceTransfers.Yes
										and (Reference = "Transfer From"
										or Reference = "Mass Transfer From"))   
											if (AssetType.TransferOutATORel.DistributionAccount entered)
												LocalTransferOutAccount  		= AssetType.ATOTransferAccount
											else
												LocalParentAssetType		= AssetType.Type
												LocalTransferOutAccount  	= ParentAssetTypeRel.ATOTransferAccount
											invoke RestrictedCreate AssetTransaction
												assign result to TransferBalancingTransactionView
												invoked.DistributionAccount								= LocalAssetTransaction.DistributionAccount
												invoked.DistributionAccount.GeneralLedgerChartAccount 	= LocalTransferOutAccount
												invoked.TransactionAmount  								= EachFundTransactionAmount * -1
												invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount * -1
												invoked.AssetTransactionAmount.ExchangeDate 			= AssetTransactionAmount.ExchangeDate
												invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= AssetTransactionAmount.BaseAmount.ToCurrency
												invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount	= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount * -1
												invoked.TransactionStatus                               = "U"
												invoked.Reference        								= "Transfer From Balancing Entry"
												invoked.AssetProcess									= "ATB"
												invoked.AssetAccountType 								= "ATO"
												fill in fields from LocalAssetTransaction.AssetTransaction

											LocalTransaction = TransferBalancingTransactionView.AssetTransaction
											if (ReportMode entered
											and ReportMode = "Y"
											and PrmAPC entered)
												invoke Create AssetTransactionDetail
													invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
													invoked.AssetBatchUpdateResult							= PrmAPC
													invoked.AssetCompany									= Asset.Company
													invoked.Asset											= Asset
													invoked.Book											= Book
													invoked.AssetTransaction								= LocalTransaction
													invoked.RecordType										= 1

											if(LocalCreateFundFromBatch)
												invoke CreateGLTransDetailFromBatch
													invoked.PrmCurrency		   = LocalCurrency
													invoked.PrmJournalizeGroup = LocalJournalizeGroup

									initialize LocalTransaction
									initialize LocalAssetTransaction
									initialize TransferBalancingTransactionView


						else 									
							initialize F1
							LocalTransactionAmount				= TransactionAmount
							FundCount							= instance count of TransferAssetFundsRel
							for each TransferAssetFundsRel
								if (each.TransferredAssetItemsRel exists)
									F1 += 1
									EachFundTransactionAmount 		= (each.TransferFundPercentOfTotal * LocalTransactionAmount)
									LocalCurrencyAmount 			= EachFundTransactionAmount
									LocalAccountingEntity			= each.AccountingEntity
									LocalAccountingUnit				= each.AccountingUnit
									LocalFund						= each.Fund
									LocalFundPercent				= each.PercentContribution
									EachFundTransactionAmount		= RoundedCurrencyAmount
									if (F1 < FundCount)
										FundTransactionTotal		+= EachFundTransactionAmount
									else
										EachFundTransactionAmount 	= (LocalTransactionAmount - FundTransactionTotal)
									initialize LocalTransaction
									invoke RestrictedCreate
										assign result to LocalAssetTransaction
										invoked.TransactionAmount								= EachFundTransactionAmount
										if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
											TransientExchangeDate								= TransactionDate
											LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
											include ConvertLocalDepreciationDifference
										else
											initialize BookDepreciationDifference
										invoked.TransactionAmount								= EachFundTransactionAmount
										if (Book.PostCurrency.Book)
											invoked.TransientBookCurrency						= Book.Currency
										else
											invoked.TransientBookCurrency						= Asset.Currency
										invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
										invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
										invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
										if (PrmTransactionDate entered)
											invoked.TransactionDate								= PrmTransactionDate
										invoked.DistributionAccount								= DistributionAccount
										invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
										if (each.AccountingUnit entered)
											invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
										if (each.Project entered)
											invoked.DistributionAccount.Project 				= each.Project
										if (each.FinanceDimension1 entered)
											invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
										if (each.FinanceDimension2 entered)
											invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
										if (each.FinanceDimension3 entered)
											invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
										if (each.FinanceDimension4 entered)
											invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
										if (each.FinanceDimension5 entered)
											invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
										if (each.FinanceDimension6 entered)
											invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
										if (each.FinanceDimension7 entered)
											invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
										if (each.FinanceDimension8 entered)
											invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
										if (each.FinanceDimension9 entered)
											invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
										if (each.FinanceDimension10 entered)
											invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10
										fill in fields from this instance
									LocalTransaction	= LocalAssetTransaction
									if (ReportMode entered
									and ReportMode = "Y"
									and PrmAPC entered)
										invoke Create AssetTransactionDetail
											invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
											invoked.AssetBatchUpdateResult					= PrmAPC
											invoked.AssetCompany							= Asset.Company
											invoked.Asset									= Asset
											invoked.Book									= Book
											invoked.AssetTransaction						= LocalTransaction
											invoked.RecordType								= 1
									if(LocalCreateFundFromBatch)
										invoke CreateGLTransDetailFromBatch
											invoked.PrmCurrency		   = LocalCurrency
											invoked.PrmJournalizeGroup = LocalJournalizeGroup
									initialize LocalTransaction


									if (Company.BalanceTransfers.Yes
									and (Reference = "Transfer From"
									or Reference = "Mass Transfer From"))
										if (AssetType.TransferOutATORel.DistributionAccount entered)
											LocalTransferOutAccount  	= AssetType.ATOTransferAccount
										else
											LocalParentAssetType		= AssetType.Type
											LocalTransferOutAccount  	= ParentAssetTypeRel.ATOTransferAccount
										invoke RestrictedCreate AssetTransaction
											assign result to TransferBalancingTransactionView
											invoked.DistributionAccount								= LocalAssetTransaction.DistributionAccount
											invoked.DistributionAccount.GeneralLedgerChartAccount 	= LocalTransferOutAccount
											invoked.TransactionAmount  								= EachFundTransactionAmount * -1
											invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount * -1
											invoked.AssetTransactionAmount.ExchangeDate 			= AssetTransactionAmount.ExchangeDate
											invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= AssetTransactionAmount.BaseAmount.ToCurrency
											invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount	= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount * -1
											invoked.TransactionStatus                               = "U"
											invoked.Reference        								= "Transfer From Balancing Entry"
											invoked.AssetProcess									= "ATB"
											invoked.AssetAccountType 								= "ATO"
											fill in fields from LocalAssetTransaction.AssetTransaction

										LocalTransaction	= TransferBalancingTransactionView.AssetTransaction
										if (ReportMode entered
										and ReportMode = "Y"
										and PrmAPC entered)
											invoke Create AssetTransactionDetail
												invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
												invoked.AssetBatchUpdateResult							= PrmAPC
												invoked.AssetCompany									= Asset.Company
												invoked.Asset											= Asset
												invoked.Book											= Book
												invoked.AssetTransaction								= LocalTransaction
												invoked.RecordType										= 1

										if(LocalCreateFundFromBatch)
											invoke CreateGLTransDetailFromBatch
												invoked.PrmCurrency		   = LocalCurrency
												invoked.PrmJournalizeGroup = LocalJournalizeGroup

								initialize LocalTransaction
								initialize LocalAssetTransaction
								initialize TransferBalancingTransactionView

							if (Reference = "Transfer From"
							or (Reference = "Mass Transfer From"
							and PrmBatchRelease != 1))
								OriginalTransactionDeleted = true
								invoke FundDelete
					if (Reference = "Transfer To"
					or (Reference = "Mass Transfer To"
					and PrmBatchRelease != 1))
						if (Asset.FundOverride)
							if (AssetTransferRel.FullOrPartial.Full)
								LocalTransferAsset					= Asset
							else
								LocalTransferAsset					= TransferFromAsset
						else
							LocalTransferAsset						= TransferFromAsset
						if (Reference = "Mass Transfer To")
							FundCount								= instance count of AssetFundsRel   
							if (FundCount > 0)
								ToFundAllocationRequired 				= true
								LocalAccountType 						= AssetAccountType
								if (AssetFundAllocationRequired
								and LocalFundAccountType)
									initialize F1
									LocalTransactionAmount				= TransactionAmount
									for each AssetFundsRel
										F1 += 1
										EachFundTransactionAmount 		= (each.PercentContribution * LocalTransactionAmount)
										LocalCurrencyAmount 			= EachFundTransactionAmount
										LocalAccountingEntity			= each.AccountingEntity
										LocalAccountingUnit				= each.AccountingUnit
										LocalFund						= each.Fund
										LocalFundPercent				= each.PercentContribution
										EachFundTransactionAmount		= RoundedCurrencyAmount
										if (F1 < FundCount)
											FundTransactionTotal		+= EachFundTransactionAmount
										else
											EachFundTransactionAmount 	= (LocalTransactionAmount - FundTransactionTotal)
										initialize LocalTransaction
										if (EachFundTransactionAmount != 0)
											invoke RestrictedCreate
												assign result to LocalAssetTransaction
												invoked.TransactionDate									= TransactionDate
												invoked.TransactionAmount								= EachFundTransactionAmount
												if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
													TransientExchangeDate								= TransactionDate
													LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
													include ConvertLocalDepreciationDifference
												else
													initialize BookDepreciationDifference
												if (Book.PostCurrency.Book)
													invoked.TransientBookCurrency						= Book.Currency
												else
													invoked.TransientBookCurrency						= Asset.Currency
												invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
												invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
												invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
												if (PrmTransactionDate entered)
													invoked.TransactionDate								= PrmTransactionDate
												invoked.DistributionAccount								= DistributionAccount
												invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
												if (each.AccountingUnit entered)
													invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
												if (each.Project entered)
													invoked.DistributionAccount.Project 				= each.Project
												if (each.FinanceDimension1 entered)
													invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
												if (each.FinanceDimension2 entered)
													invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
												if (each.FinanceDimension3 entered)
													invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
												if (each.FinanceDimension4 entered)
													invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
												if (each.FinanceDimension5 entered)
													invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
												if (each.FinanceDimension6 entered)
													invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
												if (each.FinanceDimension7 entered)
													invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
												if (each.FinanceDimension8 entered)
													invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
												if (each.FinanceDimension9 entered)
													invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
												if (each.FinanceDimension10 entered)
													invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10
												fill in fields from this instance

											LocalTransaction	= LocalAssetTransaction.AssetTransaction
											if (ReportMode entered
											and ReportMode = "Y"
											and PrmAPC entered)
												invoke Create AssetTransactionDetail
													invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
													invoked.AssetBatchUpdateResult							= PrmAPC
													invoked.AssetCompany									= Asset.Company
													invoked.Asset											= Asset
													invoked.Book											= Book
													invoked.AssetTransaction								= LocalTransaction
													invoked.RecordType										= 1

											if(LocalCreateFundFromBatch)
												invoke CreateGLTransDetailFromBatch
													invoked.PrmCurrency		   = LocalCurrency
													invoked.PrmJournalizeGroup = LocalJournalizeGroup
											initialize LocalTransaction


											if (Company.BalanceTransfers.Yes)
												if (AssetType.TransferInATIRel.DistributionAccount entered)
													LocalTransferInAccount  	= AssetType.ATITransferAccount
												else
													LocalParentAssetType		= AssetType.Type
													LocalTransferInAccount  	= ParentAssetTypeRel.ATITransferAccount
												invoke RestrictedCreate AssetTransaction
													assign result to TransferBalancingTransactionView
													invoked.DistributionAccount								= LocalAssetTransaction.DistributionAccount
													invoked.DistributionAccount.GeneralLedgerChartAccount 	= LocalTransferInAccount
													invoked.TransactionAmount  								= EachFundTransactionAmount * -1
													invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount * -1
													invoked.AssetTransactionAmount.ExchangeDate 			= AssetTransactionAmount.ExchangeDate
													invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= AssetTransactionAmount.BaseAmount.ToCurrency
													invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount	= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount * -1
													invoked.Reference        								= "Transfer To Balancing Entry"
													invoked.AssetProcess									= "ATB"
													invoked.AssetAccountType 								= "ATI"
													invoked.TransactionStatus                               = "U"
													fill in fields from LocalAssetTransaction.AssetTransaction

												LocalTransaction = LocalAssetTransaction
												if (ReportMode entered
												and ReportMode = "Y"
												and PrmAPC entered)
													invoke Create AssetTransactionDetail
														invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
														invoked.AssetBatchUpdateResult							= PrmAPC
														invoked.AssetCompany									= Asset.Company
														invoked.Asset											= Asset
														invoked.Book											= Book
														invoked.AssetTransaction								= LocalTransaction
														invoked.RecordType										= 1

												if(LocalCreateFundFromBatch)
													invoke CreateGLTransDetailFromBatch
														invoked.PrmCurrency		   = LocalCurrency
														invoked.PrmJournalizeGroup = LocalJournalizeGroup

										initialize LocalTransaction
										initialize LocalAssetTransaction
										initialize TransferBalancingTransactionView




						else
							FundCount								= instance count of FromAssetTransferFundsRel
							if (FundCount > 0)
								ToFundAllocationRequired 				= true
								LocalAccountType 						= AssetAccountType
								if (AssetFundAllocationRequired
								and LocalFundAccountType)
									initialize F1
									LocalTransactionAmount				= TransactionAmount
									for each FromAssetTransferFundsRel
										F1 += 1
										EachFundTransactionAmount 		= (each.PercentContribution * LocalTransactionAmount)
										LocalCurrencyAmount 			= EachFundTransactionAmount
										LocalAccountingEntity			= each.AccountingEntity
										LocalAccountingUnit				= each.AccountingUnit
										LocalFund						= each.Fund
										LocalFundPercent				= each.PercentContribution
										EachFundTransactionAmount		= RoundedCurrencyAmount
										if (F1 < FundCount)
											FundTransactionTotal		+= EachFundTransactionAmount
										else
											EachFundTransactionAmount 	= (LocalTransactionAmount - FundTransactionTotal)
										initialize LocalTransaction
										if (EachFundTransactionAmount != 0)
											invoke RestrictedCreate
												assign result to LocalAssetTransaction
												invoked.TransactionDate									= TransactionDate
												invoked.TransactionAmount								= EachFundTransactionAmount
												if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
													TransientExchangeDate								= TransactionDate
													LocalCurrencyExchange.TransactionAmount				= EachFundTransactionAmount
													include ConvertLocalDepreciationDifference
												else
													initialize BookDepreciationDifference
												if (Book.PostCurrency.Book)
													invoked.TransientBookCurrency						= Book.Currency
												else
													invoked.TransientBookCurrency						= Asset.Currency
												invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount
												invoked.AssetTransactionAmount.ExchangeDate 			= TransactionDate
												invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
												if (PrmTransactionDate entered)
													invoked.TransactionDate								= PrmTransactionDate
												invoked.DistributionAccount								= DistributionAccount
												invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
												if (each.AccountingUnit entered)
													invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
												if (each.Project entered)
													invoked.DistributionAccount.Project 				= each.Project
												if (each.FinanceDimension1 entered)
													invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
												if (each.FinanceDimension2 entered)
													invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
												if (each.FinanceDimension3 entered)
													invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
												if (each.FinanceDimension4 entered)
													invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
												if (each.FinanceDimension5 entered)
													invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
												if (each.FinanceDimension6 entered)
													invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
												if (each.FinanceDimension7 entered)
													invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
												if (each.FinanceDimension8 entered)
													invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
												if (each.FinanceDimension9 entered)
													invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
												if (each.FinanceDimension10 entered)
													invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10
												fill in fields from this instance

											LocalTransaction	= LocalAssetTransaction.AssetTransaction
											if (ReportMode entered
											and ReportMode = "Y"
											and PrmAPC entered)
												invoke Create AssetTransactionDetail
													invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
													invoked.AssetBatchUpdateResult							= PrmAPC
													invoked.AssetCompany									= Asset.Company
													invoked.Asset											= Asset
													invoked.Book											= Book
													invoked.AssetTransaction								= LocalTransaction
													invoked.RecordType										= 1

											if(LocalCreateFundFromBatch)
												invoke CreateGLTransDetailFromBatch
													invoked.PrmCurrency		   = LocalCurrency
													invoked.PrmJournalizeGroup = LocalJournalizeGroup
											initialize LocalTransaction


											if (Company.BalanceTransfers.Yes)
												if (AssetType.TransferInATIRel.DistributionAccount entered)
													LocalTransferInAccount  	= AssetType.ATITransferAccount
												else
													LocalParentAssetType		= AssetType.Type
													LocalTransferInAccount  	= ParentAssetTypeRel.ATITransferAccount
												invoke RestrictedCreate AssetTransaction
													assign result to TransferBalancingTransactionView
													invoked.DistributionAccount								= LocalAssetTransaction.DistributionAccount
													invoked.DistributionAccount.GeneralLedgerChartAccount 	= LocalTransferInAccount
													invoked.TransactionAmount  								= EachFundTransactionAmount * -1
													invoked.AssetTransactionAmount.TransactionAmount 		= EachFundTransactionAmount * -1
													invoked.AssetTransactionAmount.ExchangeDate 			= AssetTransactionAmount.ExchangeDate
													invoked.AssetTransactionAmount.BaseAmount.ToCurrency	= AssetTransactionAmount.BaseAmount.ToCurrency
													invoked.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount	= AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount * -1
													invoked.Reference        								= "Transfer To Balancing Entry"
													invoked.AssetProcess									= "ATB"
													invoked.AssetAccountType 								= "ATI"
													invoked.TransactionStatus                               = "U"
													fill in fields from LocalAssetTransaction.AssetTransaction

												LocalTransaction = LocalAssetTransaction
												if (ReportMode entered
												and ReportMode = "Y"
												and PrmAPC entered)
													invoke Create AssetTransactionDetail
														invoked.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
														invoked.AssetBatchUpdateResult							= PrmAPC
														invoked.AssetCompany									= Asset.Company
														invoked.Asset											= Asset
														invoked.Book											= Book
														invoked.AssetTransaction								= LocalTransaction
														invoked.RecordType										= 1

												if(LocalCreateFundFromBatch)
													invoke CreateGLTransDetailFromBatch
														invoked.PrmCurrency		   = LocalCurrency
														invoked.PrmJournalizeGroup = LocalJournalizeGroup

										initialize LocalTransaction
										initialize LocalAssetTransaction
										initialize TransferBalancingTransactionView



			Exit Rules

				initialize FundCount
				initialize AdjustmentItemsAdded
				LocalCreateFundFromBatch = false
				if (!OriginalTransactionDeleted
				and ((AssetFundAllocationRequired
				or (Reference = "Transfer To"
				and ToFundAllocationRequired))
				and LocalFundAccountType))
					invoke FundDelete

		CreateFundHistoryTransactions is an Instance Action
			restricted
			Action Rules
				LocalAccountType 		= AssetAccountType
				if (FundAccountType)
					LocalDepreciationDifference			= AssetBookRel.LifeToDateDepreciation - AssetBookRel.YearToDateDepreciation
					invoke DefaultAccounts Asset
				 	GetDefaultAccounts = true
					LocalCurrencyAmount 		= LocalDepreciationDifference
					LocalDepreciationDifference	= RoundedCurrencyAmount
					if (GetHistoryTransCodeBlocks = true
					and LocalDepreciationDifference entered)

						initialize F2
						LocalTransactionAmount				= LocalDepreciationDifference
						FundCount							= instance count of AssetFundsRel
						for each AssetFundsRel
							F2 += 1
							EachFundTransactionAmount 		= (each.PercentContribution * LocalTransactionAmount)
							if (F2 < FundCount)
								FundTransactionTotal		+= EachFundTransactionAmount
							else
								EachFundTransactionAmount 	= (LocalTransactionAmount - FundTransactionTotal)
							if (EachFundTransactionAmount != 0)
								invoke RestrictedCreate
									invoked.OnlineSystemCreate							= true
									invoked.TransactionDate								= TransactionDate
									invoked.DistributionAccount							= TransientEXPAccount
									invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
									if (each.AccountingUnit entered)
										invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
									if (each.Project entered)
										invoked.DistributionAccount.Project 				= each.Project
									if (each.FinanceDimension1 entered)
										invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
									if (each.FinanceDimension2 entered)
										invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
									if (each.FinanceDimension3 entered)
										invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
									if (each.FinanceDimension4 entered)
										invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
									if (each.FinanceDimension5 entered)
										invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
									if (each.FinanceDimension6 entered)
										invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
									if (each.FinanceDimension7 entered)
										invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
									if (each.FinanceDimension8 entered)
										invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
									if (each.FinanceDimension9 entered)
										invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
									if (each.FinanceDimension10 entered)
										invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10
									invoked.TransactionStatus							= "H"
									invoked.PostingDate									= LocalYearEndDate
									invoked.YearEndDate									= LocalYearEndDate  
									invoked.ProcessDate									= LocalYearEndDate
									if (Book.Impairment)
										invoked.AssetAccountType						= "IMT"
										invoked.DistributionAccount						= AssetBookRel.TranAccumulatedImpairmentLoss
										invoked.DistributionAccount.ToAccountingEntity 			= each.AccountingEntity
										if (each.AccountingUnit entered)
											invoked.DistributionAccount.AccountingUnit	 		= each.AccountingUnit
										if (each.Project entered)
											invoked.DistributionAccount.Project 				= each.Project
										if (each.FinanceDimension1 entered)
											invoked.DistributionAccount.FinanceDimension1 		= each.FinanceDimension1
										if (each.FinanceDimension2 entered)
											invoked.DistributionAccount.FinanceDimension2		= each.FinanceDimension2
										if (each.FinanceDimension3 entered)
											invoked.DistributionAccount.FinanceDimension3 		= each.FinanceDimension3
										if (each.FinanceDimension4 entered)
											invoked.DistributionAccount.FinanceDimension4		= each.FinanceDimension4
										if (each.FinanceDimension5 entered)
											invoked.DistributionAccount.FinanceDimension5 		= each.FinanceDimension5
										if (each.FinanceDimension6 entered)
											invoked.DistributionAccount.FinanceDimension6		= each.FinanceDimension6
										if (each.FinanceDimension7 entered)
											invoked.DistributionAccount.FinanceDimension7 		= each.FinanceDimension7
										if (each.FinanceDimension8 entered)
											invoked.DistributionAccount.FinanceDimension8		= each.FinanceDimension8
										if (each.FinanceDimension9 entered)
											invoked.DistributionAccount.FinanceDimension9 		= each.FinanceDimension9
										if (each.FinanceDimension10 entered)
											invoked.DistributionAccount.FinanceDimension10 		= each.FinanceDimension10

										if (Book.PostHistory)
											invoked.Reference							= "Posted History Transaction"
										else
											invoked.Reference							= "Impairment History Transaction"
										invoked.ProcessSequence							= Asset.LastAssetImpairment
										invoked.AssetProcess							= "IMA"
										invoked.AssetImpairment							= AssetBookRel.DerivedAssetImpairment
									else
										invoked.AssetAccountType						= "EXP"
										if (Book.PostHistory)
											invoked.Reference							= "Posted History Transaction"
										else
											invoked.Reference							= "ADD"
									if (Book.PostCurrency.Asset and (Book.Currency not = Asset.Currency))
										TransientExchangeDate							= TransactionDate
										LocalCurrencyExchange.TransactionAmount			= EachFundTransactionAmount
										include ConvertLocalDepreciationDifference
									else
										initialize BookDepreciationDifference
									invoked.TransactionAmount							= EachFundTransactionAmount

									if (Book.PostCurrency.Book)
										invoked.TransientBookCurrency					= Book.Currency
									else
										invoked.TransientBookCurrency					= Asset.Currency
									invoked.AssetTransactionAmount.TransactionAmount 	= EachFundTransactionAmount
									invoked.AssetTransactionAmount.ExchangeDate 		= TransactionDate
									invoked.AssetTransactionAmount.BaseAmount.ToCurrency = Book.Currency

									if (Book.PostHistory)
										invoked.Reference								= "Posted History Transaction"
									else
										invoked.Reference								= "ADD"
									fill in fields from this instance

							if(LocalCreateFundFromBatch)
								invoke PostHistory
									invoked.PrmJournalizeGroup		  = LocalJournalizeGroup
									invoked.PrmFinanceEnterpriseGroup = LocalFinanceEnterpriseGroup


			Exit Rules
				invoke FundDelete

		FundDelete is a Delete Action
			restricted

		RefreshData is an Import Action
			Local Fields
				RepSet is a ReplicationSet
			Action Rules
				RepSet = "FSM_COLUMNAR_AM_ST"

				constraint (RepSet.ReplicationIsValid)
					"ReplicationIsCurrentlyReplicatingOrNotValidAtThisTime"
				invoke Replicate RepSet

		UpdateTransDate is a Set Action
			restricted
			Parameters
				PrmCompany		is an AssetCompany
				PrmBook			is a Book
				PrmYearBeginDate	is Date
				PrmYearEndDate		is Date
				PrmQueue			is Numeric 2
				PrmThread			is Numeric 2
			Instance Selection
				where (Book = PrmBook
				and   Company = PrmCompany
				and   (PostingDate >= PrmYearBeginDate
				and   PostingDate <= PrmYearEndDate)
				and   YearEndDate != PrmYearEndDate
				and   (PrmQueue               <=1
                or  Asset % PrmQueue        = PrmThread))
			Action Rules
				Instance Rules
					YearEndDate = PrmYearEndDate

		UpdateCurrentYearTransDate is a Set Action
			restricted
			Parameters
				PrmCompany		is an AssetCompany
				PrmBook			is a Book
				PrmYearBeginDate	is Date
				PrmYearEndDate		is Date
			Instance Selection
				where (Book = PrmBook
				and   Company = PrmCompany
				and   (PostingDate >= PrmYearBeginDate
				and   PostingDate <= PrmYearEndDate))
			Action Rules
				Set Rules
					Entrance Rules
						LocalBeginDate	= PrmYearBeginDate
						LocalYearEndDate	= PrmYearEndDate
						LocalCompany		= PrmCompany
						LocalBook			= PrmBook
						invoke Delete SummaryRecordsRel
					Exit Rules
						invoke RebuildAssetTransactionSummary
							invoked.PrmCompany			= PrmCompany
							invoked.PrmBook				= PrmBook
							invoked.PrmUpdateDateFlag	= true
				Instance Rules
					YearEndDate = PrmYearEndDate
