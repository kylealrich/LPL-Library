CloseTask is a BusinessClass
	owned by closemgmt
	
	prefix is CTask
		
	Ontology
		symbolic key is CloseTask

    Patterns
		implements ContextualParent
						
		implements Resequence on DisplaySequence
			new sequence field is NewDisplaySequence
			set is ByDisplaySequence

	Persistent Fields




		DefaultCalendar				is a SystemCalendar
		DefaultPeriodGroup       	is a SystemCalendarPeriodGroup
		DefaultCompany              is a CompanyGroupField 
		ScheduleForWorkDaysOnly		is Boolean

		FinanceTeam										 
		TaskOwner					is a FinanceTeamMember
			delete ignored

		TaskLevel					is Numeric 1 
			States
				Summary				value is 0
				Detail		 		value is 1
		TaskName					is Alpha 100
		TaskDetail					is Text
		DisplaySequence				is Numeric 04	
		Priority					is Numeric 1
			States
				Low					value is 0
				Medium				value is 1
				High				value is 2
		Risk						is Numeric 1
			States
				Low					value is 0
				Medium				value is 1
				High				value is 2
		RequireSupportingDoco		is Boolean
		RequireJournalEntry         is Boolean
		RequiresApproval			is Boolean
		ApprovalCode
		FinancialForm				is Alpha 6 		

		BeginTime					is Time
		BeginDaysFromPeriodEnd 		is Numeric 3
		DueTime						is Time
       	DueDaysFromPeriodEnd   		is Numeric 3
		BeginDayOfMonth				is Unsigned Decimal 2
       	DueDayOfMonth				is Unsigned Decimal 2
		BeginLastDayOfMonth			is Boolean
       	DueLastDayOfMonth			is Boolean
       	BeginDayForNextMonth		is Boolean
       	DueDayForNextMonth			is Boolean
       	HoursRequired		   		is Unsigned Decimal size 10.2
       	ReconciliationTask			is Boolean
       	Active
       	
       	PrimaryTaskType				is a CloseTaskType
       	SecondaryTaskType			is a CloseTaskType
       	TertiaryTaskType			is a CloseTaskType
       	
       	HasInactiveDescendants		is Boolean
       	
       	DayOfClose
       	BeginTimeSensitive			is Boolean			
		DueTimeSensitive			is Boolean

		HasDayOfMonthDescendants	is Boolean

		UseExternalEmailNotification		is Boolean
		SendExternalEmailOnOpenOfPeriod		is Boolean
		ExternalToEmail						is an EmailAddressMulti 
			holds pii
		ExternalEmailSubject				is Alpha 100
			Text Variables
 				TaskName						value is ClosePeriodTask.TaskName
 				ScheduledBeginDate				value is ClosePeriodTask.ScheduleForTask.BeginDate
 				ScheduledDueDate				value is ClosePeriodTask.ScheduleForTask.DueDate
 				ClosePeriod						value is ClosePeriodTask.ClosePeriod
		ExternalEmailContent				is RichText
			Text Variables
 				TaskName						value is ClosePeriodTask.TaskName
 				ScheduledBeginDate				value is ClosePeriodTask.ScheduleForTask.BeginDate
 				ScheduledDueDate				value is ClosePeriodTask.ScheduleForTask.DueDate
 				ClosePeriod						value is ClosePeriodTask.ClosePeriod
 				TaskOwner						value is ClosePeriodTask.TaskOwner.TeamMember.PreferredSimplePresentationName

	Transient Fields
		PrmProcessOwner				is a FinanceTeamMember

		PrmSpecificToCompany        is Boolean





		PrmApprover					is a FinanceResource  
		PeriodEndDate 				is Date
		ScheduleFrom				is a SystemCalendarPeriod
		ScheduleThru				is a SystemCalendarPeriod		
		NewDisplaySequence 			is Numeric size 4

		NewParent					is a CloseTask
		ThisParent 					is a CloseTask
		SaveSequence				is Numeric 03
		ClosePeriodTaskView			is a ClosePeriodTask view	
		NewClosePeriodTask			is a ClosePeriodTask	
		ThisTask					is a CloseTask	
		ParentTask 					is a CloseTask

	Local Fields
		SaveTask					is a CloseTask view
		LocalReference				is BusinessObjectReference
		LocalPeriod 				is a SystemCalendarPeriod			
		LocalChildCalendar			is AlphaUpper 20
		LocalChildPeriodGroup		is AlphaUpper 20
		LocalPeriodEndDate			is Date
		QueryResultBeginDate		is Date
		QueryResultDueDate			is Date
		QueryResultNumberOfDays		is Numeric 3
		LocalQueryContext			is a CalendarQueryContextField
		LocalTeam					is AlphaUpper 20
		LocalGroupingForTeam		is Numeric 9
		LocalDate					is Date
		LocalNumberOfDays			is Numeric 3
		LocalUpdateParent			is Boolean
		LocalScheduleClosePeriod	is a ClosePeriod
		LocalTopLevelCloseManagementGroup	is AlphaUpper 4
		LocalTopLevelCloseTask		is Numeric 6
		LocalDateForDayOfMonth		is Date
		LocalScheduleUse			is Boolean
		LocalFindWorkingDay			is Boolean
		LocalWorkingDayFound		is Boolean
		LocalAlphaYear				is Alpha 4
		LocalAlphaDay				is Alpha 3
		LocalReconciliationAccountStructure is like ReconciliationAccountStructure
		LocalReconciliationAccount	is like ReconciliationAccount
		LocalCloseConfiguration		is like GeneralLedgerCloseConfiguration
		LocalSequenceNumber			is a SequenceNumber

	Context Fields
		FinanceResource
		ClosePeriodTask
				
	Field Rules	
		TaskName
			required
		FinanceTeam
			required
				"TeamIsRequired"
			initial value is ParentCloseTask.FinanceTeam
		TaskOwner
			if (TaskLevel.Summary)
				constraint (TaskOwner.TeamMember entered) 
					"ProcessOwnerMustBeMemberOfFinanceTeam"
				constraint (OwnerIsMemberOfTeam)
					"ProcessOwnerMustBeMemberOfFinanceTeam"
			else 
				if (TaskOwner entered) 
					constraint (OwnerIsMemberOfTeam)
						"TaskOwnerMustBeMemberOfFinanceTeam"
		DefaultCalendar
			required
			initial value is ParentCloseTask.DefaultCalendar
			default to ParentCloseTask.DefaultCalendar
		DefaultPeriodGroup
			required
			initial value is ParentCloseTask.DefaultPeriodGroup
			default to ParentCloseTask.DefaultPeriodGroup
		DefaultCompany
			initial value is ParentCloseTask.DefaultCompany	
		ScheduleForWorkDaysOnly
			initial value is true
		RequireSupportingDoco
			initial value is false
			default to false
		RequireJournalEntry
            initial value is false
            default to false 	
		RequiresApproval
			initial value is false
			default to false
		ApprovalCode
			if (RequiresApproval)
				required
					"AnApprovalCodeMustBeEnteredWhenTaskRequiresApproval"	
			constraint (ApprovalCode.HasApprovalLevels)
				"CannotUseThisApprovalCode;ItHasNoApprovalLevels"
			constraint (!ApprovalCode.HasTeamWithNoMembers)
				"CannotUseThisApprovalCode;ItContainsATeamWithNoMembers"
			constraint (!ApprovalCode.HasInvalidEscalations)
				"CannotUseThisApprovalCode;ItHasInvalidEscalationSettings"
			constraint (!ApprovalCode.HasInactiveResources)
				"CannotUseThisApprovalCode;ItHasInactiveResources"
		BeginTime
			initial value is 28800 
			if (TaskLevel.Detail)
				default to 28800 
		DueTime
			initial value is 61200 
			if (TaskLevel.Detail)
				default to 61200 
		BeginDaysFromPeriodEnd
			if (TaskLevel.Detail)
				constraint (ValidDetailLevelDates)
					"TaskMustStartBeforeItIsDue"					
		DueDaysFromPeriodEnd
			if (TaskLevel.Detail)
				constraint (ValidDetailLevelDates)
					"TaskMustStartBeforeItIsDue"					
		BeginDayOfMonth
			if (TaskLevel.Detail)
				constraint (!BeginDaysFromPeriodEnd entered and !DueDaysFromPeriodEnd entered)
					"CannotEnterNumberOfDaysAndDayOfMonth;MustUseOneMethodOrTheOtherForScheduling"
				constraint (!BeginLastDayOfMonth)
					"CannotEnterBeginDayOfMonthAndSelectBeginOnLastDayOfMonth"
				constraint (BeginDayOfMonth <= 28)
					"BeginDayOfMonthCannotBeGreaterThan28"	
				if (!DueLastDayOfMonth)
					constraint (DueDayOfMonth entered)
						"MustEnterDueDayOfMonthOrSelectDueOnLastDayOfMonthWhenBeginDayOfMonthEntered"
					constraint (BeginDayOfMonth <= DueDayOfMonth)
						"TaskMustStartBeforeItIsDue"
		DueDayOfMonth
			if (TaskLevel.Detail)
				constraint (!BeginDaysFromPeriodEnd entered and !DueDaysFromPeriodEnd entered)
					"CannotEnterNumberOfDaysAndDayOfMonth;MustUseOneMethodOrTheOtherForScheduling"
				constraint (!DueLastDayOfMonth)
					"CannotEnterDueDayOfMonthAndSelectDueOnLastDayOfMonth"
				constraint (!BeginLastDayOfMonth)
					"CanOnlySelectDueOnLastDayOfMonthWhenBeginOnLastDayOfMonthIsSelected;TaskMustStartBeforeItIsDue"
				constraint (DueDayOfMonth <= 28)
					"DueDayOfMonthCannotBeGreaterThan28"
		BeginLastDayOfMonth
			if (TaskLevel.Detail)
				constraint (!BeginDaysFromPeriodEnd entered and !DueDaysFromPeriodEnd entered)
					"CannotEnterNumberOfDaysAndSelectTheLastDayOfTheMonth;MustUseOneMethodOrTheOtherForScheduling"
				if (!DueLastDayOfMonth
				and DueDayOfMonth not entered)
					DueLastDayOfMonth = true
				constraint (DueLastDayOfMonth)
					"TaskMustStartBeforeItIsDue"
		DueLastDayOfMonth
			if (TaskLevel.Detail)
				constraint (!BeginDaysFromPeriodEnd entered and !DueDaysFromPeriodEnd entered)
					"CannotEnterNumberOfDaysAndSelectTheLastDayOfTheMonth;MustUseOneMethodOrTheOtherForScheduling"
				constraint (!DueDayOfMonth entered)
					"CannotSelectThisToBeDueOnTheLastDayOfTheMonthWhenASpecificDayOfTheMonthHasBeenEntered"
				constraint (BeginDayOfMonth entered or BeginLastDayOfMonth)
					"MustEnterBeginDayOfMonthOrSelectBeginOnLastDayOfMonthWhenDueOnLastDayOfMonthIsSelected"
		BeginDayForNextMonth
			if (TaskLevel.Detail)
				if (BeginDayOfMonth not entered
				and !BeginLastDayOfMonth)
					cannot be entered
						"CannotSelectBeginForTheMonthFollowingThePeriodUnlessASpecificBeginDayOfMonthHasBeenEnteredOrBeginLastDayOfMonthHasBeenSelected"
				DueDayForNextMonth = true
		DueDayForNextMonth
			if (TaskLevel.Detail)
				if (DueDayOfMonth not entered
				and !DueLastDayOfMonth)
					cannot be entered
						"CannotSelectDueForTheMonthFollowingThePeriodUnlessASpecificDueDayOfMonthHasBeenEnteredOrDueLastDayOfMonthHasBeenSelected"
		Active
			initial value is true
			default to true

		PrimaryTaskType
			initial value is DerivedDefaultPrimaryTaskType
			if (TaskLevel.Summary)
				initialize PrimaryTaskType
			constraint (PrimaryTaskType.IsPrimary)
				"<PrimaryTaskType>IsNotDefinedAsAPrimaryTaskType"
			constraint (!PrimaryTaskType.HasChild)
				"CannotAssignASummaryLevelTaskType"
		
		SecondaryTaskType
			initial value is DerivedDefaultSecondaryTaskType
			if (TaskLevel.Summary)
				initialize SecondaryTaskType
			constraint (SecondaryTaskType.IsSecondary)
				"<SecondaryTaskType>IsNotDefinedAsASecondaryTaskType"
			constraint (!SecondaryTaskType.HasChild)
				"CannotAssignASummaryLevelTaskType"

		TertiaryTaskType
			initial value is DerivedDefaultTertiaryTaskType
			if (TaskLevel.Summary)
				initialize TertiaryTaskType
			constraint (TertiaryTaskType.IsTertiary)
				"<TertiaryTaskType>IsNotDefinedAsATertiaryTaskType"
			constraint (!TertiaryTaskType.HasChild)
				"CannotAssignASummaryLevelTaskType"

		SendExternalEmailOnOpenOfPeriod
			initial value is CloseManagementGroup.SendExternalEmailsOnOpenOfPeriod
			
		ExternalToEmail
			if (UseExternalEmailNotification)
				required
					"MustEnterA_ToEmailAddressWhenUsingAnExternalEmailNotification"

		ExternalEmailSubject
			initial value is CloseManagementGroup.DefaultExternalEmailSubject
			if (UseExternalEmailNotification)
				required
					"MustEnterA_SubjectWhenUsingAnExternalEmailNotification"

		ExternalEmailContent
			initial value is CloseManagementGroup.DefaultExternalEmailContent
			if (UseExternalEmailNotification)
				required
					"MustEnter_ContentWhenUsingAnExternalEmailNotification"

	Derived Fields
		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforCloseTask"

		ContextMessageText is a MessageField
			restricted
			"CloseTask<CloseTask>"
		
		CountOfCloseTaskChildren is a ComputeField
			type is Numeric 04		
			restricted
			(instance count of CloseTask children)

		CountOfCloseTaskChildrenPlusOne is a DerivedField
			type is Numeric 04		
			restricted
			return (CountOfCloseTaskChildren + 1)

		UnassignedMessage is a MessageField
			"*TeamTask*"
 
 		InactiveMessage is a MessageField
			"*TaskIsInactive*"

 		ParentInactiveMessage is a MessageField
			"*ParentTaskIsInactive*"

		NumberOfDaysNote is a MessageField
			"(_Note:_UnlessTheSpecificDayOfTheMonthIsBeingUsed,Leaving_BeginNumberOfDaysBlankMeansTaskWillBeScheduledToBeginOnThePeriodEndDateAndLeaving_DueNumberOfDaysBlankMeansTaskWillBeScheduledToBeDueOnThePeriodEndDate)"

		ChangingParentNote is a MessageField
			"(_MovingToANewParentMayBeATwoStepProcess.TheTaskWillBecomeTheLastChildTaskUnderTheNewParent.)"







			








		DerivedHoursFromChildren is a DerivedField
			type is Decimal 10.2
			restricted
			return (sum ActiveChildrenRel.HoursRequired)

		DerivedHoursFromDetailDescendants is a DerivedField  
			type is Decimal 10.2
			restricted
			return (sum ActiveDetailTaskDescendantsRel.HoursRequired)








		DerivedBeginDaysFromChildren is a DerivedField
			type is Numeric 3
			restricted
			return (min ActiveChildrenRel.BeginDaysFromPeriodEnd)

		DerivedBeginDaysFromDetailDescendants is a DerivedField  
			type is Numeric 3
			restricted
			return (min ActiveDetailTaskDescendantsRel.BeginDaysFromPeriodEnd)








		DerivedDueDaysFromChildren is a DerivedField
			type is Numeric 3
			restricted
			return (max ActiveChildrenRel.DueDaysFromPeriodEnd)

		DerivedDueDaysFromDetailDescendants is a DerivedField  
			type is Numeric 3
			restricted
			return (max ActiveDetailTaskDescendantsRel.DueDaysFromPeriodEnd)

		TopLevelProcessName is a DerivedField
			type is Alpha 100
			return (first TopLevelAncestorRel.TaskName)
		
		TopLevelTask is a DerivedField
			type is Numeric 6
			restricted
			return (first TopLevelAncestorRel.CloseTask)

		DependentTaskName is a DerivedField
			type is Alpha 100
			restricted
			return (first DependentTaskRel.CloseTask.TaskName)

		ActiveDependentTaskName is a DerivedField
			type is Alpha 100
			return (first ActiveDependentTaskRel.CloseTask.TaskName)

		ActiveDependentParentTask is a DerivedField
			type is Numeric 6
			return (first ActiveDependentTaskRel.CloseTask.ParentCloseTask)

		ActiveDependentParentTaskName is a DerivedField
			type is Alpha 100
			return (first ActiveDependentTaskRel.CloseTask.ParentCloseTask.TaskName)

		PrerequisiteTaskName is a DerivedField
			type is Alpha 100
			restricted
			return (first PrerequisiteTaskRel.CloseTaskPrerequisite.PrerequisiteTask.TaskName)

		InactivePrerequisiteParentTask is a DerivedField
			type is Numeric 6
			return (first InactivePrerequisiteTaskRel.CloseTaskPrerequisite.PrerequisiteTask.ParentCloseTask)

		InactivePrerequisiteParentTaskName is a DerivedField
			type is Alpha 100
			return (first InactivePrerequisiteTaskRel.CloseTaskPrerequisite.PrerequisiteTask.ParentCloseTask.TaskName)

		InactivePrerequisiteTaskName is a DerivedField
			type is Alpha 100
			return (first InactivePrerequisiteTaskRel.CloseTaskPrerequisite.PrerequisiteTask.TaskName)

		CountOfPrerequisiteTasks is a ComputeField
			type is Numeric 03		
			restricted
			(instance count of PrerequisiteTaskRel)

		DerivedDateFromNumberOfDays is a DerivedField
			type is Date
			restricted
			return (LocalDate + LocalNumberOfDays)
			
		DerivedDefaultPrimaryTaskType is a DerivedField
			type is AlphaUpper 50
			restricted
			return (first CloseTaskTypeDefaultPrimaryRel.CloseTaskType)
			
		DerivedDefaultSecondaryTaskType is a DerivedField
			type is AlphaUpper 50
			restricted
			return (first CloseTaskTypeDefaultSecondaryRel.CloseTaskType)
			
		DerivedDefaultTertiaryTaskType is a DerivedField
			type is AlphaUpper 50
			restricted
			return (first CloseTaskTypeDefaultTertiaryRel.CloseTaskType)

		DerivedDayOfClose is a StringField
			type is Alpha 8
			restricted
			"Day "
			DueDaysFromPeriodEnd
						
		DerivedScheduleDayOfClose is a StringField
			type is Alpha 8
			"Day "
			QueryResultNumberOfDays

		DisplayDueTime is a ConditionalField
			type is Time
			if (DueTimeSensitive)
				DueTime
			else
				blank

		DerivedBeginDateForDayOfMonth is a DerivedField
			type is Date
			if (!LocalScheduleUse)
				return 0
			if (BeginDayForNextMonth)
				LocalDateForDayOfMonth = ((LocalPeriodEndDate - LocalPeriodEndDate day) + 1)
				LocalDateForDayOfMonth += 1 month
				if (BeginLastDayOfMonth)
					LocalDateForDayOfMonth = ((LocalDateForDayOfMonth - 1) + LocalDateForDayOfMonth days in month)
				else
					LocalDateForDayOfMonth = ((LocalDateForDayOfMonth - 1) + BeginDayOfMonth)
			else
				if (BeginLastDayOfMonth)
					LocalDateForDayOfMonth = ((LocalPeriodEndDate - LocalPeriodEndDate day) + LocalPeriodEndDate days in month)
				else
					LocalDateForDayOfMonth = ((LocalPeriodEndDate - LocalPeriodEndDate day) + BeginDayOfMonth)
			if (!ScheduleForWorkDaysOnly)
				return LocalDateForDayOfMonth
			else
				LocalFindWorkingDay = true
				LocalWorkingDayFound = false
				while (LocalFindWorkingDay)
					if (SystemCalendarDateRel exists)
						if (SystemCalendarDateRel.IsWorkingDay)
							LocalWorkingDayFound = true
							LocalFindWorkingDay = false
						else
							LocalDateForDayOfMonth = (LocalDateForDayOfMonth - 1)
					else
						LocalFindWorkingDay = false
						
				if (LocalWorkingDayFound)
					return LocalDateForDayOfMonth
				else
					return 0
											
		DerivedDueDateForDayOfMonth is a DerivedField
			type is Date
			if (!LocalScheduleUse)
				return 0
			if (DueDayForNextMonth)
				LocalDateForDayOfMonth = ((LocalPeriodEndDate - LocalPeriodEndDate day) + 1)
				LocalDateForDayOfMonth += 1 month
				if (DueLastDayOfMonth)
					LocalDateForDayOfMonth = ((LocalDateForDayOfMonth - 1) + LocalDateForDayOfMonth days in month)
				else
					LocalDateForDayOfMonth = ((LocalDateForDayOfMonth - 1) + DueDayOfMonth)
			else
				if (DueLastDayOfMonth)
					LocalDateForDayOfMonth = ((LocalPeriodEndDate - LocalPeriodEndDate day) + LocalPeriodEndDate days in month)
				else
					LocalDateForDayOfMonth = ((LocalPeriodEndDate - LocalPeriodEndDate day) + DueDayOfMonth)
			if (!ScheduleForWorkDaysOnly)
				return LocalDateForDayOfMonth
			else
				LocalFindWorkingDay = true
				LocalWorkingDayFound = false
				while (LocalFindWorkingDay)
					if (SystemCalendarDateRel exists)
						if (SystemCalendarDateRel.IsWorkingDay)
							LocalWorkingDayFound = true
							LocalFindWorkingDay = false
						else
							LocalDateForDayOfMonth = (LocalDateForDayOfMonth - 1)
					else
						LocalFindWorkingDay = false
						
				if (LocalWorkingDayFound)
					return LocalDateForDayOfMonth
				else
					return 0

		ExternalEmailUseMessage is a MessageField
			"UseThisOptionToSendAnEmailNotificationToAnExternalResourceWhenThePeriodIsOpenedForWorkOrFromAScheduledJob.AnExternalResourceCouldBeSomeoneWithinYourOrganizationThatDoesNotHaveAccessToThe_Close_ManagementApplicationOrItCouldBeSomeoneOutsideYourOrganization."

		DerivedEndDateString is a DerivedField
			type is AlphaUpper 20
			restricted
			LocalAlphaYear	= LocalDate year
			LocalAlphaDay	= LocalDate year day
			DerivedEndDateString	= LocalAlphaYear
			if (LocalAlphaDay size = 1)
				DerivedEndDateString += "00"
			else
			if (LocalAlphaDay size = 2)
				DerivedEndDateString += "0"
			DerivedEndDateString += LocalAlphaDay 

	Conditions

		HasChild
			restricted	
			when (CloseTask children exists)
		HasParent
			restricted	
			when (ParentCloseTask != 0) 				
		IsTopLevel
			restricted	
			when (ParentCloseTask = 0) 
		IsDetailLevel
			restricted	
			when (TaskLevel.Detail)	
		IsSummaryLevel
			restricted	
			when (TaskLevel.Summary
				and HasParent)		
		IsProcess
			restricted	
			when (!IsDetailLevel)
		MyCloseProcess
			restricted	
			when (TaskLevel.Summary
				and TaskOwner = actor.agent(Employee).Employee)
		MyCloseTask
			restricted	
			when (TaskLevel.Detail
				and TaskOwner = actor.agent(Employee).Employee)	
		AllowDeleteTask
			restricted	
			when (TaskLevel.Detail
				or (TaskLevel.Summary
				and !HasChild))
		ValidDetailLevelDates
			restricted	
			when (TaskLevel.Detail
				and BeginIsBeforeDue)
		BeginIsBeforeDue		
			restricted	
			when ((DueDaysFromPeriodEnd > BeginDaysFromPeriodEnd) 
				or  ((DueDaysFromPeriodEnd = BeginDaysFromPeriodEnd)
				and  (DueTime >= BeginTime)))
		HasPrerequisite
			restricted	
			when ((TaskLevel.Detail)
				and (PrerequisiteTaskRel exists))	
		HasInactivePrerequisite
			restricted	
			when ((TaskLevel.Detail)
				and (InactivePrerequisiteTaskRel exists))
		HasDependency
			restricted	
			when ((TaskLevel.Detail)
				and (DependentTaskRel exists))
		HasActiveDependency
			restricted	
			when ((TaskLevel.Detail)
				and (ActiveDependentTaskRel exists))
		OwnerIsMemberOfTeam
			restricted
			when (TaskOwner exists)
		AddTaskValid
			restricted	
			when (Active
			and	  TaskLevel.Summary)
		AddWizardTaskValid
			restricted	
			when (ParentCloseTask.TaskLevel.Summary)
		AddSubProcessValid
			restricted	
			when (Active
			and	  (TaskLevel.Summary 
			or	   ParentCloseTask = 0))	
		ClosePeriodTaskLink	
			restricted	
			when (ClosePeriodTaskLinkRel exists)			
		CloneProcessValid
			restricted	
			when (IsTopLevel or IsSummaryLevel)
		CloneTaskValid
			restricted	
			when (IsDetailLevel)
		CreateFirstProcessValid 
			restricted	
			when (!CloneTaskValid and !CloneProcessValid)
		HasFinanceResource
			restricted	
			when (TaskOwner entered)	
		ShowImage
			restricted	
			when (TaskOwner.TeamMember.ResourcePicture entered)
		ShowFinancialFormEntry	
			restricted	
			when (IsDetailLevel)

		IsHighRisk
			restricted	
			when (Risk.High)			
		IsMediumRisk
			restricted	
			when (Risk.Medium)			
		IsLowRisk
			restricted	
			when (Risk.Low)			
		IsHighPriority
			restricted	
			when (Priority.High)			
		IsMediumPriority
			restricted	
			when (Priority.Medium)			
		IsLowPriority
			restricted	
			when (Priority.Low)
		ScheduleValid
			restricted
			when (IsTopLevel
			and   ActiveDetailTaskDescendants
			and	  Active)
		LoadRebuildValid
			restricted
			when (IsTopLevel
			and   Active
			and   HasActiveChildren)
		IsDetailAndHasSameParent
			restricted
			when (TaskLevel.Detail
			and   ParentCloseTask = ParentTask)			
		AssignValid
			restricted
			when (Active
			and	  !TaskOwner entered)
		MoveTaskValid
			restricted
			when (Active
			and	  HasParent)
		LinkValid
			restricted
			when (Active
			and	  IsDetailLevel)
		InactivateDetailValid
			restricted
			when (Active
			and	  TaskLevel.Detail)
		InactivateSummaryValid
			restricted
			when (Active
			and	  TaskLevel.Summary)
		ActivateDetailValid
			restricted
			when (TaskLevel.Detail
			and  !Active
			and   ParentCloseTask.Active)
		ActivateSummaryValid
			restricted
			when ((TaskLevel.Summary
			and   !Active)
			and   (IsTopLevel
			or	   ParentCloseTask.Active))
		ShowInactiveMessageOnProcessing
			restricted
			when (!Active
			and	  !IsDetailLevel)
		ShowInactiveParentMessageOnProcessing
			restricted
			when (HasParent
			and	  !ParentCloseTask.Active
			and	  !IsDetailLevel)
		ShowInactiveParentMessageOnDetail
			restricted
			when (HasParent
			and	  !ParentCloseTask.Active)
		HasInactiveChildren
			restricted
			when (InactiveChildrenRel exists)
		HasChildrenWithInactiveDescendants
			restricted
			when (InactiveDescendantsChildrenRel exists)
		InactiveDescendantsRelExists
			restricted
			when (InactiveDetailDescendantsRel exists)
		ReassignValid
			restricted
			when (Active
			and	  TaskOwner entered)
		ActiveDetailTaskDescendants
			restricted
			when (ActiveDetailTaskDescendantsRel exists)
		HasActiveChildren
			restricted
			when (ActiveChildrenRel exists)
		UsingDueDayOfMonth
			restricted
			when (DueDayOfMonth entered
			or    DueLastDayOfMonth)
		HasDayOfMonthChildren
			restricted
			when (UsingDayOfMonthChildrenRel exists)
		HasChildrenWithDayOfMonthDescendants
			restricted
			when (UsingDayOfMonthDescendantsRel exists)




		HasAttachment
			when (ProcessDocumentationRel exists)
			
		InProcess
			when (InProcessRel exists)
		Scheduled
			when (ScheduledRel exists)
		HasDetailTasks
			restricted
			when (DetailTaskDescendantsRel exists)
		TaskOwnerInactive
			restricted
			when (TaskOwner entered
			and   !TaskOwner.TeamMember.Active)
		SecurityGroupAllowsAccess
			restricted
			when (DefaultCompany !entered
			or   (DefaultCompany entered
			and   DefaultCompany.FinanceCompanyField.SecurityGroupAllowsAccess))

		TaskResourceInactive
			restricted
			when  (TaskOwner entered	
			and	    not TaskOwner.ActiveResource) 								

		IsTaskForReconciliationAccountNotInConsolidatedGroup
			when (ReconciliationAccountNotInConsolidatedGroupRel exists)

		IsTaskForReconciliationConsolidatedGroup
			when (ReconciliationAccountConsolidatedGroupRel exists)

		IsTaskForReconciliationNonAccount
			when (ReconciliationNonAccountRel exists)

	Relations


		PrerequisiteTaskRel is a CloseTaskPrerequisite(CloseTask) set
		DependentTaskRel is a CloseTaskPrerequisite(CloseTaskPrerequisite.PrerequisiteTask) set

		ActiveDependentTaskRel is a CloseTaskPrerequisite(CloseTaskPrerequisite.PrerequisiteTask) set
			Instance Selection
				where (related.CloseTask.Active)

		InactivePrerequisiteTaskRel is a CloseTaskPrerequisite(CloseTask) set
			Instance Selection
				where (!related.CloseTaskPrerequisite.PrerequisiteTask.Active)

		ClosePeriodTaskLinkRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= CloseTask 

		PendingApprovalRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= CloseTask
			Instance Selection
				where (related.TaskStatus.PendingApproval)

		ScheduledRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= CloseTask
			Instance Selection
				where (related.TaskStatus.Scheduled)

		InProcessRel				
			one-to-many relation to ClosePeriodTask
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= CloseTask
			Instance Selection
				where (related.TaskStatus.InProcess) 
		








		SameSequenceRel
			one-to-many relation to CloseTask
			Field Mapping uses ByDisplaySequence
				related.CloseManagementGroup	= CloseManagementGroup
				related.ParentCloseTask			= ParentCloseTask
				related.DisplaySequence			= NewDisplaySequence
			Instance Selection
				where (related.CloseTask != CloseTask)		
				
		SystemCalendarPeriodRel 
			one-to-many relation to SystemCalendarPeriod
			Field Mapping uses symbolic key
				related.EnterpriseGroup				= CloseManagementGroup
				related.SystemCalendar				= DefaultCalendar
				related.SystemCalendarPeriodGroup	= DefaultPeriodGroup	
			Instance Selection
				where ((related.SystemCalendarPeriod >= ScheduleFrom)
					and (related.SystemCalendarPeriod <= ScheduleThru))

		CalendarPeriodEndDateChildRel 
			one-to-many relation to SystemCalendarPeriod
			Field Mapping uses symbolic key
				related.EnterpriseGroup				= CloseManagementGroup
				related.SystemCalendar				= LocalChildCalendar
				related.SystemCalendarPeriodGroup	= LocalChildPeriodGroup	
			Instance Selection
				where (related.SystemCalendarPeriod.DateRange.ToDate = LocalPeriodEndDate)
												
		GroupSystemCalendarPeriodRel
			one-to-one relation to SystemCalendarPeriod
			Field Mapping uses symbolic key
				related.EnterpriseGroup				= CloseManagementGroup
				related.SystemCalendar				= CloseManagementGroup.CorporateCalendar
				related.SystemCalendarPeriodGroup	= CloseManagementGroup.CorporatePeriodGroup
				related.SystemCalendarPeriod		= LocalScheduleClosePeriod	
		
		SystemCalendarDateRel
			one-to-one relation to SystemCalendarDate
			Field Mapping uses symbolic key
				related.EnterpriseGroup				= CloseManagementGroup
				related.SystemCalendar				= DefaultCalendar
				related.SystemCalendarDate			= LocalDateForDayOfMonth

		ClosePeriodTaskRel 
			one-to-many relation to ClosePeriodTask 
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= CloseTask
				related.ClosePeriod				= LocalPeriod

		ClosePeriodTopLevelTaskRel 
			one-to-many relation to ClosePeriodTask 
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= LocalTopLevelCloseManagementGroup
				related.CreatedFrom				= LocalTopLevelCloseTask
				related.ClosePeriod				= LocalScheduleClosePeriod
								
		AllWorkRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= CloseTask
			Instance Selection
				where (related.TaskStatus < 5) 
		AllFutureWorkRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= CloseTask
			Instance Selection
				where (related.TaskStatus.Scheduled) 					
		AllUnassignedFutureWorkRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= CloseTask
			Instance Selection
				where (related.TaskStatus.Scheduled
				and    related.TaskOwner !entered) 					

		ParentClosePeriodTaskRel
			one-to-many relation to ClosePeriodTask 
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= CloseTask.ParentCloseTask
				related.ClosePeriod				= LocalScheduleClosePeriod

		RelatedCloseTaskRel
			one-to-many relation to CloseTask
			Field Mapping uses symbolic key
				related.CloseManagementGroup = CloseManagementGroup
			Instance Selection
				where (related.CloseTask 		= CloseTask
				or     related.CloseTask 		= ParentCloseTask)

		ProcessDocumentationRel is a CloseTaskDocumentation set








		ReconciliationAccountRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByCloseTask
				related.ReconciliationManagementGroup = CloseManagementGroup
				related.CloseTask					  = CloseTask
				related.Active						  = true

		ReconciliationAccountNotInConsolidatedGroupRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByCloseTask
				related.ReconciliationManagementGroup = CloseManagementGroup
				related.CloseTask					  = CloseTask
				related.Active						  = true
			Instance Selection
				where (related.LevelType.Account
				and   !related.IsAccountWithinConsolidatedGroup)
				
		ReconciliationAccountConsolidatedGroupRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByCloseTask
				related.ReconciliationManagementGroup = CloseManagementGroup
				related.CloseTask					  = CloseTask
				related.Active						  = true
			Instance Selection
				where (related.IsConsolidatedGroup
				or     related.IsAccountWithinConsolidatedGroup)

		ReconciliationNonAccountRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByCloseTask
				related.ReconciliationManagementGroup = CloseManagementGroup
				related.CloseTask					  = CloseTask
				related.Active						  = true
			Instance Selection
				where (related.LevelType.NonAccount)
				
		ReconciliationAccountForAccountTypeRel
			one-to-many relation to ReconciliationAccount
			Field Mapping uses ByCloseTask
				related.ReconciliationManagementGroup = CloseManagementGroup
				related.CloseTask					  = CloseTask
				related.Active						  = true
			Instance Selection
				where (related.LevelType.Account
				or     related.LevelType.NonAccount)
				
		PeriodEndReconciliationRel 
			one-to-one relation to PeriodEndReconciliation
			Field Mapping uses symbolic key
				related.ReconciliationManagementGroup							= CloseManagementGroup
				related.ReconciliationAccountStructure							= LocalReconciliationAccountStructure
				related.PeriodEndReconciliation.ReconciliationAccount			= LocalReconciliationAccount
				related.PeriodEndReconciliation.GeneralLedgerCloseConfiguration	= LocalCloseConfiguration
				related.PeriodEndReconciliation.GeneralLedgerClosePeriod		= DerivedEndDateString
				related.PeriodEndReconciliation.SequenceNumber					= LocalSequenceNumber

		DetailTaskDescendantsRel 
			one-to-many relation to CloseTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.CloseTask				= CloseTask descendants.CloseTask			
			Instance Selection
				where (related.TaskLevel.Detail)

		ActiveDetailTaskDescendantsRel 
			one-to-many relation to CloseTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.CloseTask				= CloseTask descendants.CloseTask			
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.Active)

		ActiveChildrenRel 
			one-to-many relation to CloseTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.CloseTask				= CloseTask children.CloseTask			
			Instance Selection
				where (related.Active)

		InactiveDetailDescendantsRel 
			one-to-many relation to CloseTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.CloseTask				= CloseTask descendants.CloseTask			
			Instance Selection
				where (related.TaskLevel.Detail
				and   !related.Active)

		InactiveChildrenRel 
			one-to-many relation to CloseTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.CloseTask				= CloseTask children.CloseTask			
			Instance Selection
				where (!related.Active)

		InactiveDescendantsChildrenRel
			one-to-many relation to CloseTask
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.CloseTask				= CloseTask children.CloseTask
			Instance Selection
				where (related.HasInactiveDescendants)

		TopLevelAncestorRel 
			one-to-many relation to CloseTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.CloseTask				= CloseTask ancestors.CloseTask			
			Instance Selection
				where (related.ParentCloseTask = 0)
				
		TopLevelLinkAncestorRel 
			one-to-many relation to CloseTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.CloseTask				= ThisTask ancestors.CloseTask			
			Instance Selection
				where (related.ParentCloseTask = 0)
				
		UsingDayOfMonthChildrenRel
			one-to-many relation to CloseTask
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.CloseTask				= CloseTask children.CloseTask
			Instance Selection
				where (related.UsingDueDayOfMonth)
				
		UsingDayOfMonthDescendantsRel
			one-to-many relation to CloseTask
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.CloseTask				= CloseTask children.CloseTask
			Instance Selection
				where (related.HasDayOfMonthDescendants)

		SendToTeamMembersRel
			one-to-many relation to FinanceTeamMember 
			Field Mapping uses ByFinanceTeam
				related.FinanceEnterpriseGroup 	= CloseManagementGroup
				related.FinanceTeam 			= LocalTeam		

		FinanceTeamMemberRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= CloseManagementGroup
				related.FinanceTeam 			= FinanceTeam

		CloseTaskTypeDefaultPrimaryRel
			one-to-many relation to CloseTaskType
			Field Mapping uses symbolic key
				related.CloseManagementGroup = CloseManagementGroup
			Instance Selection
				where (related.IsPrimary
				and    related.IsDefault)

		CloseTaskTypeDefaultSecondaryRel
			one-to-many relation to CloseTaskType
			Field Mapping uses symbolic key
				related.CloseManagementGroup = CloseManagementGroup
			Instance Selection
				where (related.IsSecondary
				and    related.IsDefault)

		CloseTaskTypeDefaultTertiaryRel
			one-to-many relation to CloseTaskType
			Field Mapping uses symbolic key
				related.CloseManagementGroup = CloseManagementGroup
			Instance Selection
				where (related.IsTertiary
				and    related.IsDefault)

		ActiveTaskInactiveResourceRel  
			one-to-many relation to CloseTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup = CloseManagementGroup
			Instance Selection
				where (related.TaskResourceInactive
				and    related.Active
				and    related.TopLevelTask = CloseTask)

	Sets			
		ByDisplaySequence
			Sort Order
				CloseManagementGroup
				ParentCloseTask
				DisplaySequence
				CloseTask

		ByTeamMember
			Sort Order
				CloseManagementGroup
				FinanceTeam
				TaskOwner.TeamMember
				TaskLevel
				CloseTask		

		ByTeamAndOwner
			Sort Order
				CloseManagementGroup
				FinanceTeam
				TaskOwner.TeamMember
				CloseTask		

	Rule Blocks

	Actions	
		Create is a Create Action
			restricted
			Action Rules
				if (TaskLevel.Detail
				and !UsingDueDayOfMonth)
					DayOfClose = DerivedDayOfClose 
			Exit Rules
				LocalReference = reference to CloseTask

		Update is an Update Action
			valid when (Active)
			Action Rules
				if (TaskLevel.Detail)
					if (BeginDaysFromPeriodEnd changed
					or  DueDaysFromPeriodEnd changed
					or  HoursRequired changed)
						LocalUpdateParent = true
						
					if (DueDaysFromPeriodEnd changed)
						DayOfClose = DerivedDayOfClose 

				if (ParentCloseTask changed) 
					LocalUpdateParent = true

			Exit Rules
				if (LocalUpdateParent)
					invoke UpdateParentDaysEffort ParentCloseTask
						
		Delete is a Purge Action
			Entrance Rules
				if (TaskLevel.Detail)
					constraint (!HasDependency)
						"<TaskName>IsAPrerequisiteFor<DependentTaskName>;CannotBeDeleted"
				invoke Delete CloseTaskDocumentation set
				ThisParent = ParentCloseTask
			Exit Rules
				invoke UpdateParentDaysEffort ThisParent
					invoked.DeletingTask = true
			

		Purge is a Purge Action
			restricted
			Entrance Rules
				ThisParent = ParentCloseTask
			Exit Rules
				invoke UpdateParentDaysEffort ThisParent
					invoked.DeletingTask = true

		CreateProcess is a Create Action
			default label is "NewProcess"
			completion message is "<TaskName>SucessfullyAdded"
			Field Rules
				DefaultCalendar
					default to CloseManagementGroup.CorporateCalendar
				DefaultPeriodGroup
					default to CloseManagementGroup.CorporatePeriodGroup
			Action Rules
				TaskLevel = 0 
				DisplaySequence = 1
				Active = true
			Exit Rules
					
		CreateProcessWithWizard is a Create Action
			default label is "NewProcessWizard"
			completion message is "<TaskName>SucessfullyAdded"		
			Field Rules
				DefaultCalendar
					default to CloseManagementGroup.CorporateCalendar
				DefaultPeriodGroup
					default to CloseManagementGroup.CorporatePeriodGroup
			Action Rules
				TaskLevel = 0 
				DisplaySequence = 1
				Active = true
			Exit Rules
					
		CreateSubProcess is an Instance Action
			default label is "AddSubProcess"
			valid when (AddSubProcessValid)
			completion message is "SummaryLevelTaskSucessfullyAdded"	
			Parameters	
				FinanceCalendar				is a SystemCalendar
				FinancePeriodGroup          is a SystemCalendarPeriodGroup	
				FinanceCompany				is a CompanyGroupField
				WorkDaysOnly  				is Boolean
				Team						is a FinanceTeam
				ProcessOwner				is a FinanceTeamMember
				ProcessName					is Alpha 100
				Priority					is Numeric 1
					States
						Low					value is 0
						Medium				value is 1
						High				value is 2
				Risk						is Numeric 1
					States
						Low					value is 0
						Medium				value is 1
						High				value is 2
			Parameter Rules
				FinanceCalendar
					required
					initial value is CloseTask.DefaultCalendar
					default to CloseTask.DefaultCalendar
				FinancePeriodGroup
					required
					initial value is CloseTask.DefaultPeriodGroup
					default to CloseTask.DefaultPeriodGroup
				FinanceCompany
					initial value is CloseTask.DefaultCompany
				WorkDaysOnly
					initial value is CloseTask.ScheduleForWorkDaysOnly
				Team
					required
						"TeamIsRequired"
					initial value is CloseTask.FinanceTeam
					default to CloseTask.FinanceTeam
				ProcessOwner
					initial value is CloseTask.TaskOwner
				ProcessName
					required
				Priority
					initial value is CloseTask.Priority
					default to CloseTask.Priority
				Risk
					initial value is CloseTask.Risk
					default to CloseTask.Risk					
			Entrance Rules
				NewParent = this instance.CloseTask
			Action Rules

				invoke Create
					assign result to SaveTask
					fill in fields from this instance
						except invoked.BeginDaysFromPeriodEnd
						except invoked.BeginTime
						except invoked.BeginTimeSensitive
						except invoked.DueDaysFromPeriodEnd
						except invoked.DueTime
						except invoked.DueTimeSensitive
						except invoked.HoursRequired
						except invoked.HasInactiveDescendants
						except invoked.HasDayOfMonthDescendants
					invoked.DefaultCalendar			= FinanceCalendar
					invoked.DefaultPeriodGroup		= FinancePeriodGroup
					invoked.DefaultCompany			= FinanceCompany
					invoked.ScheduleForWorkDaysOnly	= WorkDaysOnly
					invoked.FinanceTeam				= Team
					invoked.TaskOwner.TeamMember	= ProcessOwner.TeamMember
					invoked.TaskName				= ProcessName
					invoked.TaskLevel				= 0 
					invoked.ParentCloseTask			= NewParent
					invoked.DisplaySequence			= CloseTask.CountOfCloseTaskChildrenPlusOne
       				invoked.Priority				= Priority      				
       				invoked.Risk					= Risk
       				invoked.Active					= true

		CreateSubProcessFromISD is a Create Action
			completion message is "SummaryLevelTaskSucessfullyAdded"	
			Action Rules
 				constraint (ParentCloseTask.TaskLevel.Summary)
					"ParentCloseTaskMustBeSummaryLevel"
    			invoke Create this instance
    				fill in blank fields from ParentCloseTask
						except invoked.BeginDaysFromPeriodEnd
						except invoked.BeginTime
						except invoked.BeginTimeSensitive
						except invoked.DueDaysFromPeriodEnd
						except invoked.DueTime
						except invoked.DueTimeSensitive
						except invoked.HoursRequired
						except invoked.HasInactiveDescendants
						except invoked.HasDayOfMonthDescendants
					invoked.TaskLevel = 0 
					invoked.DisplaySequence = ParentCloseTask.CountOfCloseTaskChildrenPlusOne

		CreateTask is an Instance Action
			default label is "AddTask"
			valid when (AddTaskValid)
			completion message is "DetailLevelTaskSucessfullyAdded"		
			Parameters	
				FinanceCalendar				is a SystemCalendar	
				FinancePeriodGroup          is a SystemCalendarPeriodGroup	
				FinanceCompany				is a CompanyGroupField
				WorkDaysOnly  				is Boolean
				Team						is a FinanceTeam
				PersonResponsible			is a FinanceTeamMember
				NameOfTask					is Alpha 100			
				Instructions				is Text
				PrimaryTaskType				is a CloseTaskType
				SecondaryTaskType			is a CloseTaskType
				TertiaryTaskType			is a CloseTaskType
				FinancialForm				is Alpha 6				
				StartDays 					is Numeric size 3
				StartDayOfMonth				is Unsigned Decimal 2
				StartLastDayOfMonth			is Boolean
				StartNextMonth				is Boolean
				StartTime					is Time
		       	EndDays   					is Numeric size 3
		       	EndDayOfMonth				is Unsigned Decimal 2
		       	EndLastDayOfMonth			is Boolean
		       	EndNextMonth				is Boolean
				EndTime						is Time
				DueTimeSensitive			is Boolean
		       	Hours				   		is Unsigned Decimal size 10.2
				Priority					is Numeric 1
					States
						Low					value is 0
						Medium				value is 1
						High				value is 2
				Risk						is Numeric 1
					States
						Low					value is 0
						Medium				value is 1
						High				value is 2
				RequiresApproval			is Boolean
				ApprovalCode			
				RequireSupportingDoco		is Boolean
				RequireJournalEntry         is Boolean
				PrmDescription				is Alpha 60
				PrmAttachment				is an Attachment
				PrmLinkToDocumentation		is an URL
				UseExternalEmailNotification		is Boolean
				SendExternalEmailOnOpenOfPeriod		is Boolean
				ExternalToEmail						is an EmailAddressMulti 
					holds pii
				ExternalEmailSubject				is Alpha 100
				ExternalEmailContent				is RichText

			Parameter Rules
				FinanceCalendar
					required
					initial value is CloseTask.DefaultCalendar
					default to CloseTask.DefaultCalendar
				FinancePeriodGroup
					required
					initial value is CloseTask.DefaultPeriodGroup
					default to CloseTask.DefaultPeriodGroup
				FinanceCompany
					initial value is CloseTask.DefaultCompany
				WorkDaysOnly
					initial value is CloseTask.ScheduleForWorkDaysOnly
				Team
					required
						"TeamIsRequired"
					initial value is CloseTask.FinanceTeam
					default to CloseTask.FinanceTeam
				PersonResponsible
					initial value is CloseTask.TaskOwner
					constraint (PersonResponsible.ActiveResource)
						"PersonResponsibleMustBeActive"
				NameOfTask
					required
				RequireSupportingDoco
					initial value is false
				RequireJournalEntry
                    initial value is false	
				PrmDescription
					if (PrmAttachment entered)
						required
							"PleaseEnterADescriptionForYourDocument"
					if (PrmLinkToDocumentation entered)
						required
							"PleaseEnterADescriptionForYourURLLink"
				StartTime

					initial value is 28800
					default to 28800
				EndTime

					initial value is 61200	
					default to 61200	
				Priority
					initial value is CloseTask.Priority
					default to CloseTask.Priority
				Risk
					initial value is CloseTask.Risk
					default to CloseTask.Risk
				PrimaryTaskType
					initial value is DerivedDefaultPrimaryTaskType
				SecondaryTaskType
					initial value is DerivedDefaultSecondaryTaskType
				TertiaryTaskType
					initial value is DerivedDefaultTertiaryTaskType
				SendExternalEmailOnOpenOfPeriod
					initial value is CloseManagementGroup.SendExternalEmailsOnOpenOfPeriod
				ExternalToEmail
					if (UseExternalEmailNotification)
						required
							"MustEnterA_ToEmailAddressWhenUsingAnExternalEmailNotification"
				ExternalEmailSubject
					initial value is CloseManagementGroup.DefaultExternalEmailSubject
					if (UseExternalEmailNotification)
						required
							"MustEnterA_SubjectWhenUsingAnExternalEmailNotification"
				ExternalEmailContent
					initial value is CloseManagementGroup.DefaultExternalEmailContent
					if (UseExternalEmailNotification)
						required
							"MustEnter_ContentWhenUsingAnExternalEmailNotification"
			Entrance Rules
				NewParent = this instance.CloseTask
			Action Rules

				invoke Create
					assign result to SaveTask
					invoked.CloseManagementGroup				= CloseManagementGroup
					invoked.DefaultCalendar						= FinanceCalendar
					invoked.DefaultPeriodGroup					= FinancePeriodGroup
					invoked.DefaultCompany						= FinanceCompany
					invoked.ScheduleForWorkDaysOnly				= WorkDaysOnly
					invoked.FinanceTeam							= Team
					invoked.TaskOwner.TeamMember				= PersonResponsible.TeamMember
					invoked.TaskName							= NameOfTask
					invoked.TaskLevel							= 1 
					invoked.TaskDetail							= Instructions
					invoked.DisplaySequence						= CloseTask.CountOfCloseTaskChildrenPlusOne
					invoked.FinancialForm						= FinancialForm
					invoked.BeginTime							= StartTime
					invoked.BeginDaysFromPeriodEnd				= StartDays
					invoked.BeginDayOfMonth						= StartDayOfMonth
					invoked.BeginLastDayOfMonth					= StartLastDayOfMonth
					invoked.BeginDayForNextMonth				= StartNextMonth
					invoked.DueTime								= EndTime
       				invoked.DueDaysFromPeriodEnd				= EndDays
       				invoked.DueDayOfMonth						= EndDayOfMonth
       				invoked.DueLastDayOfMonth					= EndLastDayOfMonth
       				invoked.DueDayForNextMonth					= EndNextMonth
       				invoked.HoursRequired						= Hours
       				invoked.Priority							= Priority      				
       				invoked.Risk								= Risk
       				invoked.RequiresApproval					= RequiresApproval
       				invoked.ApprovalCode						= ApprovalCode
       				invoked.RequireSupportingDoco				= RequireSupportingDoco
					invoked.RequireJournalEntry     			= RequireJournalEntry
					invoked.ParentCloseTask						= NewParent
					invoked.Active								= true
					invoked.PrimaryTaskType						= PrimaryTaskType
					invoked.SecondaryTaskType					= SecondaryTaskType
					invoked.TertiaryTaskType					= TertiaryTaskType
					invoked.DueTimeSensitive					= DueTimeSensitive
					invoked.UseExternalEmailNotification		= UseExternalEmailNotification
					invoked.SendExternalEmailOnOpenOfPeriod		= SendExternalEmailOnOpenOfPeriod
					invoked.ExternalToEmail						= ExternalToEmail
					invoked.ExternalEmailSubject				= ExternalEmailSubject
					invoked.ExternalEmailContent				= ExternalEmailContent
			Exit Rules
				if (PrmAttachment entered 
				or  PrmLinkToDocumentation entered)
					invoke Create CloseTaskDocumentation
						invoked.CloseManagementGroup	= CloseManagementGroup
						invoked.CloseTask				= SaveTask.CloseTask
						invoked.Description				= PrmDescription
						invoked.Attachment				= PrmAttachment
						invoked.Link					= PrmLinkToDocumentation
						invoked.Author					= actor.agent(Employee).Employee 	
							
				invoke UpdateParentDaysEffort SaveTask.ParentCloseTask















		CreateTaskFromISD is a Create Action
			completion message is "DetailLevelTaskSucessfullyAdded"		
			Action Rules
				constraint (ParentCloseTask.TaskLevel.Summary)
					"ParentCloseTaskMustBeSummaryLevel"

				if (PrimaryTaskType not entered)  
					PrimaryTaskType = DerivedDefaultPrimaryTaskType
				if (SecondaryTaskType not entered)
					SecondaryTaskType = DerivedDefaultSecondaryTaskType
				if (TertiaryTaskType not entered)
					TertiaryTaskType = DerivedDefaultTertiaryTaskType

    			invoke Create this instance
    				fill in blank fields from ParentCloseTask
						except invoked.BeginDaysFromPeriodEnd
						except invoked.BeginTime
						except invoked.BeginTimeSensitive
						except invoked.BeginDayOfMonth
						except invoked.BeginLastDayOfMonth
						except invoked.BeginDayForNextMonth						
						except invoked.DueDaysFromPeriodEnd
						except invoked.DueTime
						except invoked.DueTimeSensitive
						except invoked.DueDayOfMonth
						except invoked.DueLastDayOfMonth
						except invoked.DueDayForNextMonth						
						except invoked.HoursRequired
						except invoked.HasInactiveDescendants
						except invoked.HasDayOfMonthDescendants
					invoked.TaskLevel = 1 
					invoked.DisplaySequence = ParentCloseTask.CountOfCloseTaskChildrenPlusOne
					if (invoked.BeginTime < 1)
						invoked.BeginTime = 28800
					if (invoked.DueTime < 1)
						invoked.DueTime = 61200
			Exit Rules
				invoke UpdateParentDaysEffort ParentCloseTask
			
		CreateTaskFromOneTimeTask is a Create Action
			restricted
			Action Rules

				if (PrimaryTaskType not entered)  
					PrimaryTaskType = DerivedDefaultPrimaryTaskType
				if (SecondaryTaskType not entered)
					SecondaryTaskType = DerivedDefaultSecondaryTaskType
				if (TertiaryTaskType not entered)
					TertiaryTaskType = DerivedDefaultTertiaryTaskType

    			invoke Create this instance
    				fill in blank fields from ParentCloseTask
						except invoked.BeginDaysFromPeriodEnd
						except invoked.BeginTime
						except invoked.BeginTimeSensitive
						except invoked.BeginDayOfMonth
						except invoked.BeginLastDayOfMonth
						except invoked.BeginDayForNextMonth
						except invoked.DueDaysFromPeriodEnd
						except invoked.DueTime
						except invoked.DueTimeSensitive
						except invoked.DueDayOfMonth
						except invoked.DueLastDayOfMonth
						except invoked.DueDayForNextMonth
						except invoked.HoursRequired
						except invoked.HasInactiveDescendants
						except invoked.HasDayOfMonthDescendants
					invoked.TaskLevel = 1 
					invoked.DisplaySequence = ParentCloseTask.CountOfCloseTaskChildrenPlusOne
					if (invoked.BeginTime < 1)
						invoked.BeginTime = 28800
					if (invoked.DueTime < 1)
						invoked.DueTime = 61200
			Exit Rules
				invoke UpdateParentDaysEffort ParentCloseTask













































		UpdateParentDaysEffort is an Instance Action
			restricted
			Parameters
				ChangingActiveFlag	is Boolean
				DeletingTask		is Boolean
				
			Action Rules
				BeginDaysFromPeriodEnd	= DerivedBeginDaysFromChildren
				DueDaysFromPeriodEnd	= DerivedDueDaysFromChildren
				HoursRequired			= DerivedHoursFromChildren
				
				if (ChangingActiveFlag
				or  DeletingTask)
					if (HasInactiveChildren
					or  HasChildrenWithInactiveDescendants)
						HasInactiveDescendants = true
					else
						HasInactiveDescendants = false

				if (HasDayOfMonthChildren
				or  HasChildrenWithDayOfMonthDescendants)
					HasDayOfMonthDescendants = true
				else
					HasDayOfMonthDescendants = false

			Exit Rules			
				if (ParentCloseTask > 0)
					invoke UpdateParentDaysEffort ParentCloseTask
						invoked.ChangingActiveFlag	= ChangingActiveFlag
						invoked.DeletingTask		= DeletingTask

		CloneProcess is an Instance Action
			valid when (CloneProcessValid)
			default label is "Copy"
			completion message is "CopyComplete;RefreshView"
			Parameters
				CloneProcessName			is Alpha 100
				WhatToClone					is Numeric 1
					States
						JustThisProcess				value is 0
						ThisProcessAndItsChildren	value is 1
				NewParent   				is a CloseTask
				CloneAttachments			is Boolean
				BeingInvoked				is Boolean
			Parameter Rules
				CloneProcessName
					initial value is TaskName
					default to TaskName
			Action Rules
				invoke Create CloseTask
					assign result to SaveTask				
					fill in fields from this instance				
					invoked.TaskName = CloneProcessName					
					invoked.ParentCloseTask = NewParent
					invoked.Active = true
				if (CloneAttachments)
					for each ProcessDocumentationRel
						invoke Create CloseTaskDocumentation
							invoked.CloseManagementGroup	= CloseManagementGroup
							invoked.CloseTask				= SaveTask.CloseTask
							invoked.Description				= each.Description
							invoked.Notes					= each.Notes
							invoked.Attachment				= each.Attachment
							invoked.Link					= each.Link
							invoked.Author					= actor.agent(Employee).Employee







				if (!BeingInvoked
				and WhatToClone.ThisProcessAndItsChildren)
					ThisTask = SaveTask.CloseTask
			Exit Rules
				if (WhatToClone.ThisProcessAndItsChildren)
					for each CloseTask children
						if (each.CloseTask != ThisTask) 
							if (each.TaskLevel.Summary)
								invoke CloneProcess each
									invoked.CloneProcessName	= each.TaskName
									invoked.WhatToClone			= 1
									invoked.NewParent			= SaveTask.CloseTask
									invoked.CloneAttachments	= CloneAttachments
									invoked.BeingInvoked		= true
							else
								invoke CloneTask each
									invoked.CloneTaskName		= each.TaskName
									invoked.NewParent			= SaveTask.CloseTask
									invoked.CloneAttachments	= CloneAttachments
			
		CloneTask is an Instance Action
			valid when (CloneTaskValid)
			default label is "Copy"
			completion message is "CopyComplete;RefreshView"
			Parameters
				CloneTaskName		is Alpha 100
				NewParent   		is a CloseTask
				CloneAttachments	is Boolean
			Parameter Rules
				CloneTaskName
					initial value is TaskName
					default to TaskName
				NewParent
					initial value is ParentCloseTask
			Action Rules
				if (NewParent !entered)
					confirmation required
						"NoParentTaskEntered;NewTaskWillBeCreatedAsATopLevelTask.DoYouWantToContinue?"
				invoke Create CloseTask
					assign result to SaveTask				
					fill in fields from this instance				
					invoked.TaskName		= CloneTaskName					
					invoked.ParentCloseTask	= NewParent
					if (NewParent !entered)
						invoked.TaskLevel = 0
					invoked.Active = true
				if (CloneAttachments)
					for each ProcessDocumentationRel
						invoke Create CloseTaskDocumentation
							invoked.CloseManagementGroup	= CloseManagementGroup
							invoked.CloseTask				= SaveTask.CloseTask
							invoked.Description				= each.Description
							invoked.Notes					= each.Notes
							invoked.Attachment				= each.Attachment
							invoked.Link					= each.Link
							invoked.Author					= actor.agent(Employee).Employee







			Exit Rules
				invoke UpdateParentDaysEffort SaveTask.ParentCloseTask
			
		LinkToPrerequisiteTask is an Instance Action
			default label is "Link"
			valid when (LinkValid)
			completion message is "<TaskName>:<DisplayDependencyType>:<PrmPrerequisiteTask.TaskName>"
			Parameters
				PrmPrerequisiteTask 		is a CloseTask
				PrmDependencyType			is Numeric 02
					States
						CannotStart			value is 01
						CannotComplete		value is 02
				PrmWaitForApproval			is Boolean			
				PrmNotes 					is Alpha size up to 500
			Parameter Rules
				PrmPrerequisiteTask 		
					required
						"PrerequisiteTaskRequired"
					constraint (PrmPrerequisiteTask not = CloseTask)
						"CannotReferToTheSameTask"					
					constraint (PrmPrerequisiteTask.TaskLevel.Detail)
						"MustReferToDetailLevelTask"
					constraint (PrmPrerequisiteTask.Active)
						"TaskLinkingToMustBeActive"
				PrmDependencyType			
					required
						"DependencyTypeRequired"				
				PrmWaitForApproval
					initial value is false	
			Local Fields
				DisplayDependencyType is Alpha 22			
			Action Rules
				ThisTask = PrmPrerequisiteTask
				if (TopLevelAncestorRel exists)
					display "TopLevelFoundOnThisTaskIs:<first TopLevelAncestorRel.TaskName>"
				if (TopLevelLinkAncestorRel exists)
					display "TopLevelLinkFoundIs:<first TopLevelLinkAncestorRel.TaskName>"
				constraint (first TopLevelAncestorRel.CloseTask = first TopLevelLinkAncestorRel.CloseTask)
					"TasksThatAreBeingLinkedMustBeUnderTheSameTopLevelTask"
				
				if (PrmDependencyType = 1)
					DisplayDependencyType = " Cannot start before "
				else
					DisplayDependencyType = " Cannot finish before "					
				
				invoke Create CloseTaskPrerequisite  
					invoked.CloseManagementGroup					= CloseManagementGroup
					invoked.CloseTask								= CloseTask 
					invoked.CloseTaskPrerequisite.PrerequisiteTask	= PrmPrerequisiteTask
					invoked.DependencyType							= PrmDependencyType
					invoked.Notes									= PrmNotes
					invoked.WaitForApproval							= PrmWaitForApproval
								
		MoveTask is an Instance Action
			default label is "Move"
			completion message is "MoveComplete;RefreshView"
			valid when (MoveTaskValid)
			Parameters
				MoveToNewParent			is Boolean
				NewParent				is a CloseTask
				MoveDirection			is Alpha 5 
					States
						Above	value is "Above"
						Below	value is "Below"					
				ThisProcess 			is a CloseTask 
				ThisTask				is a CloseTask
			Parameter Rules
				NewParent
					if (MoveToNewParent)
						required
				MoveDirection
					if (!MoveToNewParent)
						required
					initial value is MoveDirection.Below
				ThisProcess
					if (!MoveToNewParent
					and IsSummaryLevel)
						required
				ThisTask
					if (!MoveToNewParent
					and IsDetailLevel)
						required
			Action Rules
				if (MoveToNewParent)
					constraint (NewParent.TaskLevel.Summary)
						"NewParentTaskMustBeASummaryTask"
					constraint (NewParent != ParentCloseTask)
						"NewParentTaskIsAlreadyTheParentTask"
					constraint (NewParent != CloseTask)
						"TaskCannotBeItsOwnParent"
					constraint (NewParent != all CloseTask descendants.CloseTask)
						"TaskMayNotBeMovedToADescendantOfItsOwnBranch"

					ParentTask = ParentCloseTask
					invoke Update 
						invoked.NewDisplaySequence = ParentCloseTask.CountOfCloseTaskChildrenPlusOne
					invoke Update 
						invoked.ParentCloseTask = NewParent
						invoked.NewDisplaySequence = NewParent.CountOfCloseTaskChildrenPlusOne	
				
				if (!MoveToNewParent)		
					if (IsSummaryLevel)
						SaveTask = ThisProcess 
					else 
						SaveTask = ThisTask 

					constraint (SaveTask.CloseTask.ParentCloseTask = ParentCloseTask)
						"ParentTaskIsDifferent;MustMoveToNewParentFirst"
					constraint (SaveTask.CloseTask != CloseTask)
						"YouCannotSelectTheSameTaskAsYouAreMoving"

					invoke Update
						if (MoveDirection.Above)
							invoked.NewDisplaySequence = SaveTask.CloseTask.DisplaySequence
						else
							invoked.NewDisplaySequence = SaveTask.CloseTask.DisplaySequence + 1

			Exit Rules
				if (MoveToNewParent)
					invoke UpdateParentDaysEffort ParentTask
				
		Schedule is an Instance Action
			default label is "Schedule"
			run in background
			valid when (ScheduleValid)
			completion message is "ScheduleHasBeenSubmittedToTheQueueForProcessing"
			Parameters
				PrmDefaultCalendar		is a SystemCalendar	
				PrmDefaultPeriodGroup	is a SystemCalendarPeriodGroup
				PrmScheduleFrom			is a SystemCalendarPeriod
				PrmScheduleThru			is a SystemCalendarPeriod
			Local Fields
				LocalClosePeriod	is a ClosePeriod
				LocalInactiveResource 	is Alpha 230

		
			Parameter Rules							
				PrmDefaultCalendar
					required
					initial value is DefaultCalendar
					cannot be changed
				PrmDefaultPeriodGroup
					required
					initial value is DefaultPeriodGroup
					cannot be changed
				PrmScheduleFrom
					required
				PrmScheduleThru
					required
					constraint (PrmScheduleThru >= PrmScheduleFrom)
						"InvalidScheduleDates"

					if (TaskOwner entered)
						constraint (TaskOwner.ActiveResource)
							"CannotBuildSchedule;InactiveResourceAsAFinanceResourceOrAsAnEmployeeExistsOnActiveTask:<TaskOwner.TeamMember.PreferredSimplePresentationName>"	
												
                    LocalInactiveResource = ActiveTaskInactiveResourceRel.TaskOwner.TeamMember.PreferredSimplePresentationName
					constraint (ActiveTaskInactiveResourceRel not exist)
						"CannotBuildSchedule;InactiveResourceAsAFinanceResourceOrAsAnEmployeeExistsOnActiveTask:<LocalInactiveResource>"												
						
			Action Rules
				ScheduleFrom = PrmScheduleFrom
				ScheduleThru = PrmScheduleThru
				for each SystemCalendarPeriodRel 
					LocalClosePeriod = each.SystemCalendarPeriod
					if (!LocalClosePeriod exists)
						invoke Create ClosePeriod 

							invoked.CloseManagementGroup	= each.EnterpriseGroup 
							invoked.ClosePeriod				= each.SystemCalendarPeriod
							invoked.CloseManagementStatus	= 0	
					else
						if (LocalClosePeriod.CloseManagementStatus.Scheduled)
							invoke Update LocalClosePeriod
								invoked.CloseManagementStatus = 0	

					if (LocalClosePeriod.CloseManagementStatus.Scheduled
					or  LocalClosePeriod.CloseManagementStatus.Unscheduled)
						LocalPeriod = each.SystemCalendarPeriod
						invoke Purge ClosePeriodTaskRel
						invoke ScheduleSet CloseTask
							invoked.ParmCloseManagementGroup			= CloseManagementGroup
							invoked.ParmTopLevelTask					= CloseTask
							invoked.ParmTopLevelCalendar				= each.SystemCalendar 
							invoked.ParmTopLevelPeriodGroup				= each.SystemCalendarPeriodGroup 
							invoked.ParmTopLevelPeriod					= each.SystemCalendarPeriod
							invoked.ParmTopLevelPeriodEndDate			= each.SystemCalendarPeriod.DateRange.ToDate
							initialize invoked.ParmTopLevelBeginDate
							initialize invoked.ParmTopLevelDueDate












		ScheduleSet is a Set Action
			restricted
			run in background
			valid when (Active)
			default label is "Schedule"
			completion message is "<TaskName>Processed"

			Local Fields
				LocalCreateClosePeriodTask	is Boolean
				LocalCreateBeginDate		is Date
				LocalCreateDueDate			is Date
				LocalClosePeriod			is a ClosePeriod

			Parameters
				ParmCloseManagementGroup	is a CloseManagementGroup
				ParmTopLevelTask			is a CloseTask
				ParmTopLevelCalendar		is AlphaUpper 20	
				ParmTopLevelPeriodGroup		is AlphaUpper 20
				ParmTopLevelPeriod			is a ClosePeriod
				ParmTopLevelPeriodEndDate	is Date
				ParmTopLevelBeginDate		is Date
				ParmTopLevelDueDate			is Date

			Instance Selection
				where (CloseManagementGroup		= ParmCloseManagementGroup
				and    CloseTask.Active
				and	  (CloseTask				= ParmTopLevelTask
				or	   CloseTask.TopLevelTask	= ParmTopLevelTask)
				and    ParmTopLevelPeriod		= ParmTopLevelPeriod)  

			Sort Order
				CloseManagementGroup
				TaskLevel
				ParentCloseTask
				DisplaySequence

			Action Rules
				Set Rules
					Exit Rules
						LocalScheduleClosePeriod			= ParmTopLevelPeriod
						LocalTopLevelCloseTask				= ParmTopLevelTask
						LocalTopLevelCloseManagementGroup	= ParmCloseManagementGroup
						LocalClosePeriod					= ParmTopLevelPeriod
						invoke UpdateSummaryScheduleDates ClosePeriodTopLevelTaskRel in background
						invoke CreatePrereqsFromSchedule ClosePeriodTopLevelTaskRel in background
						invoke ChangeStatusToScheduled LocalClosePeriod in background

				Instance Rules
					LocalScheduleUse = true
					LocalCreateClosePeriodTask = false
					LocalPeriodEndDate = ParmTopLevelPeriodEndDate

					if (IsTopLevel
					or (TaskLevel.Summary)  
					or (DefaultCalendar		= ParmTopLevelCalendar
					and DefaultPeriodGroup	= ParmTopLevelPeriodGroup)) 
						LocalCreateClosePeriodTask 	= true
						initialize LocalCreateBeginDate
						initialize LocalCreateDueDate
					else
						LocalChildCalendar			= DefaultCalendar
						LocalChildPeriodGroup		= DefaultPeriodGroup
						LocalPeriodEndDate			= ParmTopLevelPeriodEndDate
						LocalScheduleClosePeriod	= ParmTopLevelPeriod
						if (DefaultCalendar = ParmTopLevelCalendar)
							if (CalendarPeriodEndDateChildRel exists)
								LocalCreateClosePeriodTask 	= true
								initialize LocalCreateBeginDate
								initialize LocalCreateDueDate
						else
							if (CalendarPeriodEndDateChildRel exists)

								if (ScheduleForWorkDaysOnly)
									if (BeginDayOfMonth entered
									or  BeginLastDayOfMonth)
										QueryResultBeginDate						= DerivedBeginDateForDayOfMonth
									else	
										LocalQueryContext.Calendar					= DefaultCalendar
										LocalQueryContext.PeriodGroup				= DefaultPeriodGroup
										LocalQueryContext.CalendarQuery.QueryDate	= ParmTopLevelPeriodEndDate
										LocalQueryContext.CalendarQuery.Occurrence	= LocalQueryContext.CalendarQuery.Occurrence.First
										LocalQueryContext.CalendarQuery.NthDay		= BeginDaysFromPeriodEnd
										LocalQueryContext.CalendarQuery.WorkingDay	= ScheduleForWorkDaysOnly 
										QueryResultBeginDate						= LocalQueryContext.CalendarQuery.OutputDate
						
									if (DueDayOfMonth entered
									or  DueLastDayOfMonth)
										QueryResultDueDate							= DerivedDueDateForDayOfMonth
									else	
										LocalQueryContext.CalendarQuery.QueryDate	= ParmTopLevelPeriodEndDate
										LocalQueryContext.CalendarQuery.Occurrence	= LocalQueryContext.CalendarQuery.Occurrence.First
										LocalQueryContext.CalendarQuery.NthDay		= DueDaysFromPeriodEnd
										LocalQueryContext.CalendarQuery.WorkingDay	= ScheduleForWorkDaysOnly
							   			QueryResultDueDate							= LocalQueryContext.CalendarQuery.OutputDate
				         		else
									if (BeginDayOfMonth entered
									or  BeginLastDayOfMonth)
										QueryResultBeginDate	= DerivedBeginDateForDayOfMonth
									else
					         			LocalDate				= ParmTopLevelPeriodEndDate
					         			LocalNumberOfDays		= BeginDaysFromPeriodEnd
					         			QueryResultBeginDate	= DerivedDateFromNumberOfDays
				         			
									if (DueDayOfMonth entered
									or  DueLastDayOfMonth)
										QueryResultDueDate		= DerivedDueDateForDayOfMonth
									else
					         			LocalNumberOfDays		= DueDaysFromPeriodEnd
					         			QueryResultDueDate		= DerivedDateFromNumberOfDays

								LocalCreateClosePeriodTask 	= true
								LocalCreateBeginDate		= QueryResultBeginDate
								LocalCreateDueDate			= QueryResultDueDate

					if (LocalCreateClosePeriodTask)
						LocalScheduleClosePeriod = ParmTopLevelPeriod
						invoke Create ClosePeriodTask
							assign result to ClosePeriodTaskView
							fill in fields from this instance
							invoked.CloseManagementGroup	= CloseManagementGroup
							invoked.ClosePeriod				= ParmTopLevelPeriod
							invoked.TaskCompany				= DefaultCompany
							invoked.TaskStatus				= 0 
							if (TaskLevel.Detail)
								if (!LocalCreateBeginDate entered)
									if (ScheduleForWorkDaysOnly)

										if (BeginDayOfMonth entered
										or  BeginLastDayOfMonth)
											invoked.ScheduleForTask.BeginDate	= DerivedBeginDateForDayOfMonth
											invoked.ScheduleForTask.BeginTime	= BeginTime
										else	
											LocalQueryContext.Calendar					= DefaultCalendar
											LocalQueryContext.PeriodGroup				= DefaultPeriodGroup
											LocalQueryContext.CalendarQuery.QueryDate	= ParmTopLevelPeriodEndDate
											LocalQueryContext.CalendarQuery.Occurrence	= LocalQueryContext.CalendarQuery.Occurrence.First
											LocalQueryContext.CalendarQuery.NthDay		= BeginDaysFromPeriodEnd
											LocalQueryContext.CalendarQuery.WorkingDay	= ScheduleForWorkDaysOnly 
											invoked.ScheduleForTask.BeginDate			= LocalQueryContext.CalendarQuery.OutputDate
											invoked.ScheduleForTask.BeginTime			= BeginTime
		
										if (DueDayOfMonth entered
										or  DueLastDayOfMonth)
											invoked.ScheduleForTask.DueDate		= DerivedDueDateForDayOfMonth
						         			invoked.ScheduleForTask.DueTime		= DueTime
										else	
											LocalQueryContext.CalendarQuery.QueryDate	= ParmTopLevelPeriodEndDate
											LocalQueryContext.CalendarQuery.Occurrence	= LocalQueryContext.CalendarQuery.Occurrence.First
											LocalQueryContext.CalendarQuery.NthDay		= DueDaysFromPeriodEnd
											LocalQueryContext.CalendarQuery.WorkingDay	= ScheduleForWorkDaysOnly 
						         			invoked.ScheduleForTask.DueDate				= LocalQueryContext.CalendarQuery.OutputDate
						         			invoked.ScheduleForTask.DueTime				= DueTime
					         		else
										if (BeginDayOfMonth entered
										or  BeginLastDayOfMonth)
											invoked.ScheduleForTask.BeginDate	= DerivedBeginDateForDayOfMonth
											invoked.ScheduleForTask.BeginTime	= BeginTime
										else
						         			LocalDate							= ParmTopLevelPeriodEndDate
						         			LocalNumberOfDays					= BeginDaysFromPeriodEnd
						         			invoked.ScheduleForTask.BeginDate	= DerivedDateFromNumberOfDays
						         			invoked.ScheduleForTask.BeginTime	= BeginTime
		
										if (DueDayOfMonth entered
										or  DueLastDayOfMonth)
											invoked.ScheduleForTask.DueDate		= DerivedDueDateForDayOfMonth
						         			invoked.ScheduleForTask.DueTime		= DueTime
										else
						         			LocalNumberOfDays					= DueDaysFromPeriodEnd
						         			invoked.ScheduleForTask.DueDate		= DerivedDateFromNumberOfDays
						         			invoked.ScheduleForTask.DueTime		= DueTime
									
								if (LocalCreateBeginDate entered)
									invoked.ScheduleForTask.BeginDate	= LocalCreateBeginDate
									invoked.ScheduleForTask.BeginTime	= BeginTime
				         			invoked.ScheduleForTask.DueDate		= LocalCreateDueDate
				         			invoked.ScheduleForTask.DueTime		= DueTime
				         			
								if (DueDayOfMonth entered
								or  DueLastDayOfMonth)
									LocalQueryContext.Calendar						= DefaultCalendar
									LocalQueryContext.PeriodGroup					= DefaultPeriodGroup
									LocalQueryContext.CalendarQuery.QueryDate		= DerivedDueDateForDayOfMonth
									LocalQueryContext.CalendarQuery.QueryDateEnd	= ParmTopLevelPeriodEndDate
									LocalQueryContext.CalendarQuery.WorkingDay		= ScheduleForWorkDaysOnly 
									QueryResultNumberOfDays							= LocalQueryContext.CalendarQuery.OutputDays
									if (ParmTopLevelPeriodEndDate > DerivedDueDateForDayOfMonth)
										QueryResultNumberOfDays = (QueryResultNumberOfDays * -1)
									invoked.DayOfClose								= DerivedScheduleDayOfClose
								else
									invoked.DayOfClose					= DayOfClose 

		         			invoked.ScheduleForTask.LevelOfEffort	= HoursRequired
							invoked.CreatedFrom						= CloseTask
							invoked.CreatedFromReference			= reference to CloseTask
							invoked.ParentClosePeriodTask			= first ParentClosePeriodTaskRel.ClosePeriodTask
	

							if (HasPrerequisite)
								invoked.DependencyMetric = 1 
							else
								invoked.DependencyMetric = 0 
	
						if (ReconciliationTask
						and GroupSystemCalendarPeriodRel exists)
							LocalDate = ParmTopLevelPeriodEndDate
							for each ReconciliationAccountForAccountTypeRel
								LocalReconciliationAccountStructure	= each.ReconciliationAccountStructure
								LocalCloseConfiguration				= each.CloseConfiguration
								LocalReconciliationAccount			= each.ReconciliationAccount
								LocalSequenceNumber					= 1
								if (!PeriodEndReconciliationRel exists)
									if (each.ReconciliationAccount.ParentReconciliationAccount entered)
										invoke CreatePeriodReconciliations each.ReconciliationAccount.ParentReconciliationAccount 
											invoked.PrmGeneralLedgerClosePeriod		= DerivedEndDateString
									else
										invoke CreatePeriodReconciliations each 
											invoked.PrmGeneralLedgerClosePeriod		= DerivedEndDateString















































































































































		Attachment is an Instance Action
			valid when (Active)
			default label is "Attachment"
			completion message is "CompletedAttachment"
			Parameters
				PrmDescription				is Alpha 60
				PrmNotes					is Text
				PrmAttachment				is a Attachment
				PrmLinkToDocumentation		is an URL			
			Parameter Rules
				PrmAttachment
					if (!PrmLinkToDocumentation entered
					and !PrmNotes entered)
						required
							"MustEnterAnAttachment,Link,OrNotesWhenAddingProcessDocumentation"
			Action Rules			
				invoke Create CloseTaskDocumentation
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.CloseTask				= CloseTask
					invoked.Description				= PrmDescription
					invoked.Notes					= PrmNotes
					invoked.Attachment				= PrmAttachment
					invoked.Link					= PrmLinkToDocumentation
					invoked.Author					= actor.agent(Employee).Employee













						
		SendMessage is an Instance Action
			Parameters
				MessageFor						is Alpha 08
					States
						Resource				value is "Resource"
						Team					value is "Team"
				MessageTeam					is a FinanceTeam
				MessagePerson					is a FinanceResource
				DialogueTitle					is Alpha 60
				Dialogue 						is Text
				DialogueAttachment				is an Attachment
				DialogueLink					is an URL
				ResponseRequired				is Boolean
				PrmExternalToEmailAddress		is EmailAddressField with multiple addresses 
					holds pii
				PrmCcEmailAddress				is EmailAddressField with multiple addresses 
					holds pii
				PrmBccEmailAddress				is EmailAddressField with multiple addresses 
					holds pii
				PrmAddCcEmail					is Boolean
				PrmAddBccEmail					is Boolean
				PrmSendingLandmarkNotifications is Boolean
				PrmLocalActor					is an Actor

			Parameter Rules
				PrmExternalToEmailAddress
					if (PrmExternalToEmailAddress not entered)
						constraint(MessagePerson entered or MessageTeam entered)
							"MustEnter_a_Resource,_Team_and/or_Email_Address."
				PrmCcEmailAddress
					if (PrmCcEmailAddress entered)
						constraint(PrmExternalToEmailAddress entered)
							"MustEnter_To_E-mail_Address,_when_Cc_email_is_entered."
				PrmBccEmailAddress
					if (PrmBccEmailAddress entered)
						constraint(PrmExternalToEmailAddress entered)
							"MustEnter_To_E-mail_Address,_when_Bcc_email_is_entered."
				PrmSendingLandmarkNotifications
					if (MessagePerson not entered and MessageTeam not entered)
						constraint (not PrmSendingLandmarkNotifications entered)
							"MustEnterEither_Resource_and/or_TeamToSend_Notifications"
				DialogueTitle
					default to Dialogue
					initial value is TaskName
				Dialogue
					required
						"PleaseEnterYourMessage"
			Action Rules	
				if (MessagePerson entered)
					invoke Create FinanceResourceDialogue
						invoked.NavigateToThis		= reference to CloseTask				
						invoked.HROrganization		= CloseManagementGroup.HROrganization
						invoked.FinanceResource		= MessagePerson
						invoked.DialogueTitle		= DialogueTitle
						invoked.Dialogue			= Dialogue
						invoked.DialogueAttachment	= DialogueAttachment
						invoked.SendToContact		= MessagePerson
						invoked.Author				= actor.agent(Employee).Employee
						invoked.DialogueLink		= DialogueLink
						invoked.ResponseRequired	= ResponseRequired
						invoked.MessageType         = 0  

					invoke Create FinanceResourceDialogue
						invoked.NavigateToThis		= reference to CloseTask				
						invoked.HROrganization		= CloseManagementGroup.HROrganization
						invoked.FinanceResource		= actor.agent(Employee).Employee
						invoked.DialogueTitle		= DialogueTitle
						invoked.Dialogue			= Dialogue
						invoked.DialogueAttachment	= DialogueAttachment
						invoked.SendToContact		= MessagePerson
						invoked.Author				= actor.agent(Employee).Employee
						invoked.DialogueLink		= DialogueLink
						invoked.ResponseRequired	= ResponseRequired
						invoked.MessageType 		= 1  

					if (PrmSendingLandmarkNotifications)
						if (CloseManagementGroup.OverrideResourceLandmarkNotifications
						or  MessagePerson.SendUpdatesAsNotification)
							PrmLocalActor = MessagePerson.FinanceResourceActor
							send notification
								to PrmLocalActor
								description is "<DialogueTitle>"
								priority is high
								detail is "ForMoreDetailsPleaseSeeMessageSend"

				if (MessageTeam entered) 



					LocalTeam = MessageTeam
					for each SendToTeamMembersRel  
						if ((each.FinanceTeamMember.TeamMember != actor.agent(Employee).Employee)
						and (each.FinanceTeamMember.TeamMember != MessagePerson))
							invoke Create FinanceResourceDialogue
								invoked.NavigateToThis		= reference to CloseTask				
								invoked.HROrganization		= CloseManagementGroup.HROrganization
								invoked.FinanceResource		= each.FinanceTeamMember.TeamMember
								invoked.DialogueTitle		= DialogueTitle
								invoked.Dialogue			= Dialogue
								invoked.DialogueAttachment	= DialogueAttachment
								invoked.SendToTeam			= MessageTeam
								invoked.SendToContact		= each.FinanceTeamMember.TeamMember
								invoked.Author				= actor.agent(Employee).Employee
								invoked.DialogueLink		= DialogueLink
								invoked.GroupingForTeam		= LocalGroupingForTeam	
								invoked.ResponseRequired	= ResponseRequired												
								invoked.MessageType         = 0  


							invoke Create FinanceResourceDialogue
								invoked.NavigateToThis		= reference to CloseTask				
								invoked.HROrganization		= CloseManagementGroup.HROrganization
								invoked.FinanceResource		= actor.agent(Employee).Employee
								invoked.DialogueTitle		= DialogueTitle
								invoked.Dialogue			= Dialogue
								invoked.DialogueAttachment	= DialogueAttachment
								invoked.SendToTeam			= MessageTeam
								invoked.SendToContact		= each.FinanceTeamMember.TeamMember
								invoked.Author				= actor.agent(Employee).Employee
								invoked.DialogueLink		= DialogueLink
								invoked.GroupingForTeam		= LocalGroupingForTeam	
								invoked.ResponseRequired	= ResponseRequired												
								invoked.MessageType         = 1  

							if (PrmSendingLandmarkNotifications)
								PrmLocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor															
								send notification
									to PrmLocalActor
									description is "<DialogueTitle>"
									priority is high
									detail is "ForMoreDetailsPleaseSeeMessageSend"

				if (PrmExternalToEmailAddress entered)
					send email
						to PrmExternalToEmailAddress
						cc PrmCcEmailAddress
						bcc PrmBccEmailAddress
						from actor.agent(Employee).EmployeeWorkEmailAddress
						subject "<DialogueTitle>"
						Attachments
							attachment DialogueAttachment.File
						Contents
								"<Dialogue>"
								blank line
								"<DialogueLink>"		

		MassReassign is an Instance Action
			completion message is "TasksAreNowReassigned"
			
			Parameters
				PrmCloseTaskSelection	is a CloseTask group
				PrmFinanceTeam			is a FinanceTeam
				PrmTaskOwner			is a FinanceTeamMember
				PrmScopeOfChange		is Numeric 1
					States
						JustThisProcess					value is 0
						ThisProcessAndScheduledWork		value is 1
						ThisProcessAndAllWork			value is 2
				
			Parameter Rules
				PrmCloseTaskSelection
					required
						"CloseTaskSelectionIsRequired"
				PrmFinanceTeam
					required
						"TeamIsRequired"				
					
			Action Rules
				confirmation required
					"Caution:ThisActionWillReassignAllCloseTasksThatMeetTheTaskSelectionCriteria;WouldYouLikeToContinue?"
					
				invoke MassReassignSet
					invoked.PrmCloseManagementGroup	= CloseManagementGroup
					invoked.PrmCloseTaskSelection	= PrmCloseTaskSelection
					invoked.PrmFinanceTeam			= PrmFinanceTeam
					invoked.PrmTaskOwner			= PrmTaskOwner
					invoked.PrmScopeOfChange		= PrmScopeOfChange
					
		MassReassignSet is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmCloseTaskSelection	is a CloseTask group
				PrmFinanceTeam			is a FinanceTeam
				PrmTaskOwner			is a FinanceTeamMember
				PrmScopeOfChange		is Numeric 1
					States
						JustThisProcess					value is 0
						ThisProcessAndScheduledWork		value is 1
						ThisProcessAndAllWork			value is 2
				
			Sort Order
				CloseManagementGroup
				CloseTask
				
			Instance Selection
				where   (CloseManagementGroup = PrmCloseManagementGroup
				and	     CloseTask within PrmCloseTaskSelection)
				
			Action Rules
				Set Rules
					Exit Rules
						if (PrmCloseManagementGroup.AutoUpdateAnalyticCubeFile and PrmCloseManagementGroup.AutoRefreshReloadAnalyticCube)
							invoke Refresh PrmCloseManagementGroup.ClosePeriodTaskAnalyticCubeRel in background
							
				Instance Rules
					invoke Reassign
						invoked.PrmFinanceTeam			= PrmFinanceTeam								
						invoked.PrmTaskOwner			= PrmTaskOwner								
						invoked.PrmScopeOfChange		= PrmScopeOfChange


								
		Reassign is an Instance Action
			completion message is "<TaskName>Reassigned"
			Parameters
				PrmFinanceTeam								is a FinanceTeam
				PrmTaskOwner								is a FinanceTeamMember
				PrmScopeOfChange 							is Numeric 1
					States
						JustThisProcess						value is 0
						ThisProcessAndScheduledWork			value is 1
						ThisProcessAndAllWork				value is 2
			Parameter Rules
				PrmFinanceTeam
					initial value is FinanceTeam
					required
						"TeamIsRequired"
				PrmTaskOwner
					initial value is TaskOwner

			Action Rules
				if (PrmFinanceTeam = FinanceTeam)
					constraint (PrmTaskOwner != TaskOwner)
						"OwnershipHasNotBeenChanged.UpdateTheTeamAnd/OrTaskOwnerToReassign."
						
				if (PrmScopeOfChange.ThisProcessAndAllWork
				and PrmTaskOwner not entered
				and InProcessRel exists)
					confirmation required
						"The<first InProcessRel.ClosePeriod>PeriodHasThisTaskInProcessBy<first InProcessRel.TaskOwner.TeamMember.PreferredSimplePresentationName>.BlankingOutTheTaskOwnerWillChangeThePeriodTaskStatusToScheduled.DoYouWantToContinue?"
					
				FinanceTeam = PrmFinanceTeam
				TaskOwner   = PrmTaskOwner		

			Exit Rules
				if (PrmScopeOfChange.ThisProcessAndScheduledWork)						
					for each AllFutureWorkRel
						if (each.TaskOwner		!= PrmTaskOwner
						or  each.FinanceTeam	!= PrmFinanceTeam)
							invoke Reassign AllFutureWorkRel
								invoked.PrmFinanceTeam			= this instance.FinanceTeam
								invoked.PrmTaskOwner			= this instance.TaskOwner
								invoked.PrmScopeOfChange		= 0 
								invoked.PrmBypassInProcessEdit	= true
				
				if (PrmScopeOfChange.ThisProcessAndAllWork)
					for each AllWorkRel
						if (each.TaskOwner		!= PrmTaskOwner
						or  each.FinanceTeam	!= PrmFinanceTeam)
							invoke Reassign AllWorkRel
								invoked.PrmFinanceTeam			= this instance.FinanceTeam
								invoked.PrmTaskOwner			= this instance.TaskOwner
								invoked.PrmScopeOfChange		= 0 
								invoked.PrmBypassInProcessEdit	= true

		MassActivate is an Instance Action
			completion message is "SelectedTasksAreNowActivated"
			Parameters
				PrmCloseTaskSelection	is a CloseTask group
				PrmTaskLevel			is Numeric 1 
					States
						Summary		value is 1
						Detail		value is 2
						
			Parameter Rules
				PrmCloseTaskSelection
					required
						"CloseTaskSelectionIsRequired"
						
				PrmTaskLevel
					required
						"TaskLevelIsRequired"
							
			Action Rules
				if (PrmTaskLevel.Summary)
					confirmation required
						"Caution:ThisActionWillActivateAllSummaryCloseTasksThatMeetTheTaskSelectionCriteriaAndItsDescendants;WouldYouLikeToContinue?"
				else
					confirmation required
						"Caution:ThisActionWillActivateAllDetailCloseTasksThatMeetTheTaskSelectionCriteria;WouldYouLikeToContinue?"
							
				invoke MassActivateSet
					invoked.PrmCloseManagementGroup	= CloseManagementGroup
					invoked.PrmCloseTaskSelection	= PrmCloseTaskSelection
					if (PrmTaskLevel.Summary) 
						invoked.PrmTaskLevel			= 0 
					else
						invoked.PrmTaskLevel			= 1 
		
		MassActivateSet is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmCloseTaskSelection	is a CloseTask group
				PrmTaskLevel			is Numeric 1 
					States
						Summary		value is 0
						Detail		value is 1
				
			Sort Order
				CloseManagementGroup
				TaskLevel
				ParentCloseTask
				CloseTask
				
			Instance Selection
				where   (CloseManagementGroup = PrmCloseManagementGroup
				and		 TaskLevel = PrmTaskLevel
				and	     CloseTask within PrmCloseTaskSelection
				and		 !Active
				and	    ((TaskLevel.Detail
				and		  ParentCloseTask.Active)
				or		  TaskLevel.Summary))

			Local Fields
				HasParentWithinTaskSelection	is Boolean
				
			Action Rules
				Instance Rules
					if (PrmTaskLevel.Detail)
						if (!HasInactivePrerequisite)
							invoke ActivateDetail
					else
					if (PrmTaskLevel.Summary)
						initialize HasParentWithinTaskSelection
						
						if (IsTopLevel)
							invoke ActivateSummary
						else
							for each CloseTask ancestors
								if (each.CloseTask within PrmCloseTaskSelection)
									HasParentWithinTaskSelection = true
									end for each
									
							if (!HasParentWithinTaskSelection)
								invoke ActivateSummary			

		ActivateDetail is an Instance Action
			default label is "Activate"
			valid when (ActivateDetailValid)
			completion message is "<TaskName>Active"

			Action Rules
				constraint (!HasInactivePrerequisite)
					"CannotActivate.<TaskName>HasAnInactivePrerequisiteTask:<InactivePrerequisiteTaskName>"
				Active = true

			Exit Rules
				invoke UpdateParentDaysEffort ParentCloseTask
					invoked.ChangingActiveFlag = true

		ActivateSummary is an Instance Action
			default label is "Activate"
			valid when (ActivateSummaryValid)
			confirmation required
				"Warning:ActivatingASummaryLevelTaskWillAlsoActivateAllOfItsDescendants;DoYouWantToContinue?"
			completion message is "<TaskName>Active"

			Action Rules
				Active = true
				HasInactiveDescendants = false
				for each CloseTask descendants
					invoke ActivateDescendant each
						invoked.PrmSummaryTaskToActivate = CloseTask

			Exit Rules
				invoke UpdateParentDaysEffort ParentCloseTask
					invoked.ChangingActiveFlag = true

		ActivateDescendant is an Instance Action
			restricted
			Parameters
				PrmSummaryTaskToActivate	is a CloseTask

			Local Fields
				LocalPrerequisiteTask	is a CloseTask
				LocalUnderSummary		is Boolean

			Action Rules
				if (HasInactivePrerequisite)
					if (InactivePrerequisiteParentTask != PrmSummaryTaskToActivate)
						LocalPrerequisiteTask = first InactivePrerequisiteTaskRel.CloseTaskPrerequisite.PrerequisiteTask
						LocalUnderSummary = false
						for each LocalPrerequisiteTask ancestors
							if (each.ParentCloseTask = PrmSummaryTaskToActivate)
								LocalUnderSummary = true
						constraint (LocalUnderSummary)
							"CannotActivateTheSummaryTask.<TaskName>UnderThisSummaryHasAnInactivePrerequisiteTask<InactivePrerequisiteTaskName>WhichIsNotUnderThisSummary.<InactivePrerequisiteTaskName>BelongsToSummaryTask<InactivePrerequisiteParentTaskName>"

				Active = true
				if (TaskLevel.Summary)
					HasInactiveDescendants = false

		MassInactivate is an Instance Action
			completion message is "SelectedTasksAreNowInactivated"
			Parameters
				PrmCloseTaskSelection	is a CloseTask group
				PrmTaskLevel			is Numeric 1 
					States
						Summary		value is 1
						Detail		value is 2
						
			Parameter Rules
				PrmCloseTaskSelection
					required
						"CloseTaskSelectionIsRequired"
				
				PrmTaskLevel
					required
						"TaskLevelIsRequired"
					
			Action Rules
				if (PrmTaskLevel.Summary)
					confirmation required
						"Caution:ThisActionWillInactivateAllSummaryCloseTasksThatMeetTheTaskSelectionCriteriaAndItsDescendants;WouldYouLikeToContinue?"
				else
					confirmation required
						"Caution:ThisActionWillInactivateAllDetailCloseTasksThatMeetTheTaskSelectionCriteria;WouldYouLikeToContinue?"
					
				invoke MassInactivateSet
					invoked.PrmCloseManagementGroup	= CloseManagementGroup
					invoked.PrmCloseTaskSelection	= PrmCloseTaskSelection
					if (PrmTaskLevel.Summary)
						invoked.PrmTaskLevel			= 0 
					else
						invoked.PrmTaskLevel			= 1 
		
		MassInactivateSet is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmCloseTaskSelection	is a CloseTask group
				PrmTaskLevel			is Numeric 1 
					States
						Summary		value is 0
						Detail		value is 1
				
			Sort Order
				CloseManagementGroup
				TaskLevel
				ParentCloseTask
				CloseTask
				
			Instance Selection
				where   (CloseManagementGroup = PrmCloseManagementGroup
				and		 TaskLevel = PrmTaskLevel
				and	     CloseTask within PrmCloseTaskSelection
				and		 Active)
			
			Local Fields
				HasParentWithinTaskSelection	is Boolean
								
			Action Rules
				Instance Rules
					if (PrmTaskLevel.Detail)
						if (!HasActiveDependency)
							invoke InactivateDetail
					else
					if (PrmTaskLevel.Summary)
						initialize HasParentWithinTaskSelection
						
						if (IsTopLevel)
							invoke InactivateSummary
						else
							for each CloseTask ancestors
								if (each.CloseTask within PrmCloseTaskSelection)
									HasParentWithinTaskSelection = true
									end for each
									
							if (!HasParentWithinTaskSelection)
								invoke InactivateSummary
								
		InactivateDetail is an Instance Action
			default label is "Inactivate"
			valid when (InactivateDetailValid)
			completion message is "<TaskName>NotActive"

			Action Rules
				constraint (!HasActiveDependency)
					"CannotInactivate.<TaskName>IsAPrerequisiteForActiveTask<ActiveDependentTaskName>"

				Active = false

			Exit Rules
				invoke UpdateParentDaysEffort ParentCloseTask
					invoked.ChangingActiveFlag = true

		InactivateSummary is an Instance Action
			default label is "Inactivate"
			valid when (InactivateSummaryValid)
			confirmation required
				"Warning:InactivatingASummaryLevelTaskWillAlsoInactivateAllOfItsDescendants.DoYouWantToContinue?"
			completion message is "<TaskName>NotActive"

			Action Rules
				Active = false
				HasInactiveDescendants = true
				for each CloseTask descendants
					if (each.Active)
						invoke InactivateDescendant each
							invoked.PrmSummaryTaskToInactivate = CloseTask

			Exit Rules
				invoke UpdateParentDaysEffort ParentCloseTask
					invoked.ChangingActiveFlag = true

		InactivateDescendant is an Instance Action
			restricted
			Parameters
				PrmSummaryTaskToInactivate	is a CloseTask
			
			Local Fields
				LocalDependentTask		is a CloseTask
				LocalUnderSummary		is Boolean

			Action Rules
				if (HasActiveDependency)
					if (ActiveDependentParentTask != PrmSummaryTaskToInactivate)
						LocalDependentTask = first ActiveDependentTaskRel.CloseTask
						LocalUnderSummary = false
						for each LocalDependentTask ancestors
							if (each.ParentCloseTask = PrmSummaryTaskToInactivate)
								LocalUnderSummary = true
						constraint (LocalUnderSummary)
							"CannotInactivateTheSummaryTask.<TaskName>UnderThisSummaryIsAPrerequisiteForActiveTask<ActiveDependentTaskName>WhichIsNotUnderThisSummary.<ActiveDependentTaskName>BelongsToSummaryTask<ActiveDependentParentTaskName>"

				Active = false
				if (TaskLevel.Summary)
					HasInactiveDescendants = true

		Rename is an Instance Action
			valid when (Active)
			completion message is "<TaskName>Updated"
			Parameters
				NewTaskName				is Alpha 100
			Parameter Rules
				NewTaskName
					initial value is TaskName
					required
					constraint (NewTaskName != TaskName)
						"EnterNewNameForTask"			
			Action Rules
				TaskName = NewTaskName

		QuickUpdateFromRecon is an Instance Action
			restricted
			Parameters
				UpdateReconTaskToTrue	is Boolean
				UpdateReconTaskToFalse	is Boolean
				
			Action Rules
				if (UpdateReconTaskToTrue)
					ReconciliationTask = true
				if (UpdateReconTaskToFalse
				and !ReconciliationAccountRel exists)
					ReconciliationTask = false

		UpdateSummaryTasksDaysEffort is an Instance Action
			valid when (LoadRebuildValid)
			completion message is "UpdateOfSummaryTasksHasBeenSubmittedToTheQueueForProcessing"
 
 			Action Rules
 				invoke UpdateSummaryDaysEffort
					invoked.PrmCloseManagementGroup	= CloseManagementGroup
					invoked.PrmTopLevelTask			= CloseTask
 				
		UpdateSummaryDaysEffort is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmTopLevelTask			is a CloseTask

			Instance Selection
				where ((CloseManagementGroup	= PrmCloseManagementGroup
				and     TaskLevel.Summary)
				and    (CloseTask				= PrmTopLevelTask
				or      TopLevelTask			= PrmTopLevelTask))
				
			Action Rules
				Instance Rules
					if (Active)
						BeginDaysFromPeriodEnd	= DerivedBeginDaysFromDetailDescendants
						DueDaysFromPeriodEnd	= DerivedDueDaysFromDetailDescendants
						HoursRequired			= DerivedHoursFromDetailDescendants
					
					if (InactiveDescendantsRelExists)
						HasInactiveDescendants = true
					else
						HasInactiveDescendants = false

		LoadDayOfClose is a Set Action
			completion message is "LoadDayOfCloseHasBeenSubmittedToTheQueueForProcessing"

			Parameters
				PrmCloseManagementGroup		is a CloseManagementGroup
				
			Parameter Rules
				PrmCloseManagementGroup
					required

			Instance Selection
				where (CloseManagementGroup	= PrmCloseManagementGroup
				and    TaskLevel.Detail)
				
			Action Rules
				Instance Rules
					DayOfClose = DerivedDayOfClose 
					
					if (!DayOfClose exist)
						invoke Create DayOfClose
						
					for each ClosePeriodTaskLinkRel
						invoke Update each.ClosePeriodTask
							invoked.DayOfClose = DerivedDayOfClose 
						invoke Update each.ClosePeriodTask.ClosePeriodTaskFlatDetailRel
							invoked.DayOfClose = DerivedDayOfClose 

		MassUpdateProcess is an Instance Action
			Parameters
				PrmCloseTaskSelection				is a CloseTask group
				PrmCalendar							is a SystemCalendar
				PrmPeriodGroup						is a SystemCalendarPeriodGroup
				PrmCompany							is a CompanyGroupField 
				PrmRisk								is Numeric 1 
					States
						Low				value is 1
						Medium			value is 2
						High			value is 3
				PrmPriority							is Numeric 1 
					States
						Low				value is 1
						Medium			value is 2
						High			value is 3
				PrmChangeScheduleDetailNumberOfDays	is Boolean
				PrmChangeBeginNumberOfDays			is Boolean
				PrmChangeBeginNumberOfDaysTime		is Boolean
				PrmChangeDueNumberOfDays			is Boolean
				PrmChangeDueNumberOfDaysTime		is Boolean
				PrmChangeScheduleDetailDayOfMonth	is Boolean
				PrmChangeBeginDayofMonth			is Boolean
				PrmChangeBeginDayofMonthTime		is Boolean
				PrmChangeDueDayofMonth				is Boolean
				PrmChangeDueDayofMonthTime			is Boolean
				PrmBeginDaysFromPeriodEnd 			is Numeric 3
				PrmBeginTime			  			is Time
				PrmDueDaysFromPeriodEnd				is Numeric 3					
				PrmDueTime							is Time
				PrmDueTimeSensitive					is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmBeginDayOfMonth					is Unsigned Decimal 2
				PrmBeginLastDayOfMonth				is Boolean
				PrmBeginDayForNextMonth				is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmDueDayOfMonth					is Unsigned Decimal 2
				PrmDueLastDayOfMonth				is Boolean				
				PrmDueDayForNextMonth				is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmHoursRequired					is Unsigned Decimal size 10.2
				PrmScheduleForWorkDaysOnly      	is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmPrimaryTaskType					is a CloseTaskType
				PrmRemovePrimaryTaskType			is Boolean
				PrmSecondaryTaskType				is a CloseTaskType
				PrmRemoveSecondaryTaskType			is Boolean
				PrmTertiaryTaskType					is a CloseTaskType
				PrmRemoveTertiaryTaskType			is Boolean
				PrmRequiresApproval					is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmApprovalCode						is an ApprovalCode
				PrmRequireSupportingDoco			is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmRequireJournalEntry				is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmTaskDetail						is Text
				PrmFinancialForm					is Alpha 6
			
			Parameter Rules
				PrmCloseTaskSelection
					required
						"CloseTaskSelectionIsRequired"
				PrmCalendar
					if (PrmCalendar entered)
						HasSummaryTaskChanges = true
						HasDetailTaskChanges = true
				PrmPeriodGroup
					if (PrmPeriodGroup entered)
						HasSummaryTaskChanges = true
						HasDetailTaskChanges = true
				PrmCompany
					if (PrmCompany entered)
						HasSummaryTaskChanges = true
						HasDetailTaskChanges = true
				PrmRisk
					if (PrmRisk entered)
						HasSummaryTaskChanges = true
						HasDetailTaskChanges = true
				PrmPriority	
					if (PrmPriority entered)
						HasSummaryTaskChanges = true
						HasDetailTaskChanges = true

				PrmChangeScheduleDetailNumberOfDays
					if (PrmChangeScheduleDetailNumberOfDays)
						constraint (!PrmChangeScheduleDetailDayOfMonth)
							"CanChangeEitherTheNumberOfDaysOrTheDayOfMonth"
						constraint (PrmChangeBeginNumberOfDays
						or			PrmChangeBeginNumberOfDaysTime
						or			PrmChangeDueNumberOfDays
						or			PrmChangeDueNumberOfDaysTime)
							"MustSpecifyWhichNumberOfDayValuesToChange"
						HasDetailTaskChanges = true
				











					
				PrmChangeScheduleDetailDayOfMonth		
					if (PrmChangeScheduleDetailDayOfMonth)
						constraint (!PrmChangeScheduleDetailNumberOfDays)
							"CanChangeEitherTheNumberOfDaysOrTheDayOfMonth"
						constraint (PrmChangeBeginDayofMonth
						or			PrmChangeBeginDayofMonthTime
						or			PrmChangeDueDayofMonth
						or			PrmChangeDueDayofMonthTime)
							"MustSpecifyWhichDayOfMonthValuesToChange"
						HasDetailTaskChanges = true
						











								

				PrmBeginDaysFromPeriodEnd
					if (!PrmChangeScheduleDetailNumberOfDays)
						initialize
					else
						constraint ((PrmDueDaysFromPeriodEnd > PrmBeginDaysFromPeriodEnd) 
						or  		(PrmDueDaysFromPeriodEnd = PrmBeginDaysFromPeriodEnd
						and  		 PrmDueTime >= PrmBeginTime))
							"TaskMustStartBeforeItIsDue"
				PrmBeginTime

					if (PrmChangeBeginNumberOfDaysTime
					or	PrmChangeBeginDayofMonthTime)
						required
							"BeginTimeIsRequired"

				PrmDueDaysFromPeriodEnd
					if (!PrmChangeScheduleDetailNumberOfDays)
						initialize
					else
						constraint ((PrmDueDaysFromPeriodEnd > PrmBeginDaysFromPeriodEnd) 
						or  		(PrmDueDaysFromPeriodEnd = PrmBeginDaysFromPeriodEnd
						and  		 PrmDueTime >= PrmBeginTime))
							"TaskMustStartBeforeItIsDue"
				PrmDueTime

					if (PrmChangeDueNumberOfDaysTime
					or	PrmChangeDueDayofMonthTime)
						required
							"DueTimeIsRequired"

				PrmDueTimeSensitive
					if (PrmDueTimeSensitive entered)
						HasDetailTaskChanges = true


				PrmBeginDayOfMonth
					if (!PrmChangeScheduleDetailDayOfMonth)
						initialize
					else
						if (PrmChangeBeginDayofMonth)
							constraint (!PrmBeginLastDayOfMonth)
								"CannotEnterBeginDayOfMonthAndSelectBeginOnLastDayOfMonth"
							constraint (PrmBeginDayOfMonth <= 28)
								"BeginDayOfMonthCannotBeGreaterThan28"	
							if (!PrmDueLastDayOfMonth)


								if (PrmDueDayOfMonth entered)
									constraint (PrmBeginDayOfMonth <= PrmDueDayOfMonth)
										"TaskMustStartBeforeItIsDue"
				PrmBeginLastDayOfMonth
					if (!PrmChangeScheduleDetailDayOfMonth)
						initialize
					else
						if (PrmChangeBeginDayofMonth)
							if (!PrmDueLastDayOfMonth
							and PrmDueDayOfMonth not entered)
								PrmDueLastDayOfMonth = true
							constraint (PrmDueLastDayOfMonth)
								"TaskMustStartBeforeItIsDue"
				PrmBeginDayForNextMonth
					if (!PrmChangeScheduleDetailDayOfMonth)
						initialize
					else
						if (PrmBeginDayOfMonth not entered
						and !PrmBeginLastDayOfMonth)
							cannot be entered
								"CannotSelectBeginForTheMonthFollowingThePeriodUnlessASpecificBeginDayOfMonthHasBeenEnteredOrBeginLastDayOfMonthHasBeenSelected"
				PrmDueDayOfMonth
					if (!PrmChangeScheduleDetailDayOfMonth)
						initialize
					else
						if (PrmChangeDueDayofMonth)
							constraint (!PrmDueLastDayOfMonth)
								"CannotEnterDueDayOfMonthAndSelectDueOnLastDayOfMonth"


							constraint (PrmDueDayOfMonth <= 28)
								"DueDayOfMonthCannotBeGreaterThan28"
				PrmDueLastDayOfMonth
					if (!PrmChangeScheduleDetailDayOfMonth)
						initialize
					else
						if (PrmChangeDueDayofMonth)
							constraint (!PrmDueDayOfMonth entered)
								"CannotSelectThisToBeDueOnTheLastDayOfTheMonthWhenASpecificDayOfTheMonthHasBeenEntered"


				PrmDueDayForNextMonth
					if (!PrmChangeScheduleDetailDayOfMonth)
						initialize
					else
						if (PrmDueDayOfMonth not entered
						and !PrmDueLastDayOfMonth)
							cannot be entered
								"CannotSelectDueForTheMonthFollowingThePeriodUnlessASpecificDueDayOfMonthHasBeenEnteredOrDueLastDayOfMonthHasBeenSelected"
	
				PrmHoursRequired
					if (PrmHoursRequired entered)
						HasDetailTaskChanges = true
				PrmScheduleForWorkDaysOnly
					if (PrmScheduleForWorkDaysOnly entered)
						HasDetailTaskChanges = true
				PrmPrimaryTaskType
					if (PrmPrimaryTaskType entered)
						constraint (!PrmPrimaryTaskType.HasChild)
							"CannotAssignASummaryLevelTaskType"
						HasDetailTaskChanges = true
				PrmRemovePrimaryTaskType
					if (PrmPrimaryTaskType entered)
						constraint (!PrmRemovePrimaryTaskType)
							"CannotUpdateThePrimaryTaskTypeAndRemoveThePrimaryTaskType"
					if (PrmRemovePrimaryTaskType)
						HasDetailTaskChanges = true
				PrmSecondaryTaskType
					if (PrmSecondaryTaskType entered)
						constraint (!PrmSecondaryTaskType.HasChild)
							"CannotAssignASummaryLevelTaskType"
						HasDetailTaskChanges = true
				PrmRemoveSecondaryTaskType
					if (PrmSecondaryTaskType entered)
						constraint (!PrmRemoveSecondaryTaskType)
							"CannotUpdateTheSecondaryTaskTypeAndRemoveTheSecondaryTaskType"
					if (PrmRemoveSecondaryTaskType)
						HasDetailTaskChanges = true
				PrmTertiaryTaskType
					if (PrmTertiaryTaskType entered)
						constraint (!PrmTertiaryTaskType.HasChild)
							"CannotAssignASummaryLevelTaskType"
						HasDetailTaskChanges = true
				PrmRemoveTertiaryTaskType
					if (PrmTertiaryTaskType entered)
						constraint (!PrmRemoveTertiaryTaskType)
							"CannotUpdateTheTertiaryTaskTypeAndRemoveTheTertiaryTaskType"
					if (PrmRemoveTertiaryTaskType)
						HasDetailTaskChanges = true
				PrmRequiresApproval
					if (PrmRequiresApproval entered)
						HasDetailTaskChanges = true
				PrmApprovalCode
					if (PrmApprovalCode entered)
						if (PrmRequiresApproval.ChangeToTrue)
							required
								"ApprovalCodeIsRequired"
						else
							initialize
						HasDetailTaskChanges = true
				PrmRequireSupportingDoco
					if (PrmRequireSupportingDoco entered)
						HasDetailTaskChanges = true
				PrmRequireJournalEntry
					if (PrmRequireJournalEntry entered)
						HasDetailTaskChanges = true
				PrmTaskDetail
					if (PrmTaskDetail entered)
						HasDetailTaskChanges = true
				PrmFinancialForm
					if (PrmFinancialForm entered)
						HasDetailTaskChanges = true

			Local Fields
				HasSummaryTaskChanges					is Boolean
				HasDetailTaskChanges					is Boolean
				
			Action Rules
				constraint (HasSummaryTaskChanges
				or			HasDetailTaskChanges)
					"MustEnterACloseTaskValueToUpdate"
				
				if (PrmChangeScheduleDetailDayOfMonth
				and PrmBeginDayOfMonth not entered
				and	PrmBeginLastDayOfMonth not entered
				and PrmDueDayOfMonth not entered
				and PrmDueLastDayOfMonth not entered)			
					confirmation required
						"Note:ChangingTheDayOfMonthWithoutSpecifyingValuesWillCauseTheCloseTasksToUseTheSchedulingDetailsForTheNumberOfDays"
							
				if (PrmCloseTaskSelection entered)
					confirmation required
						"Caution:ThisActionWillUpdateAllCloseTasksSelectedWithTheUpdatedValues;WouldYouLikeToContinue?"
				
				if (HasSummaryTaskChanges
				or	HasDetailTaskChanges)
					invoke MassUpdateProcessSet
	    				invoked.PrmCloseManagementGroup				= CloseManagementGroup
						invoked.PrmCloseTaskSelection				= PrmCloseTaskSelection
						invoked.PrmHasSummaryTaskChanges			= HasSummaryTaskChanges
						invoked.PrmHasDetailTaskChanges				= HasDetailTaskChanges
						invoked.PrmCalendar							= PrmCalendar
						invoked.PrmPeriodGroup						= PrmPeriodGroup
						invoked.PrmCompany							= PrmCompany
						invoked.PrmRisk								= PrmRisk
						invoked.PrmPriority							= PrmPriority
						invoked.PrmChangeScheduleDetailNumberOfDays	= PrmChangeScheduleDetailNumberOfDays
						invoked.PrmChangeBeginNumberOfDays			= PrmChangeBeginNumberOfDays
						invoked.PrmChangeBeginNumberOfDaysTime		= PrmChangeBeginNumberOfDaysTime
						invoked.PrmChangeDueNumberOfDays			= PrmChangeDueNumberOfDays
						invoked.PrmChangeDueNumberOfDaysTime		= PrmChangeDueNumberOfDaysTime
						invoked.PrmChangeScheduleDetailDayOfMonth	= PrmChangeScheduleDetailDayOfMonth
						invoked.PrmChangeBeginDayofMonth			= PrmChangeBeginDayofMonth
						invoked.PrmChangeBeginDayofMonthTime		= PrmChangeBeginDayofMonthTime
						invoked.PrmChangeDueDayofMonth				= PrmChangeDueDayofMonth
						invoked.PrmChangeDueDayofMonthTime			= PrmChangeDueDayofMonthTime
						invoked.PrmBeginDaysFromPeriodEnd			= PrmBeginDaysFromPeriodEnd
						invoked.PrmBeginTime						= PrmBeginTime
						invoked.PrmDueDaysFromPeriodEnd				= PrmDueDaysFromPeriodEnd				
						invoked.PrmDueTime							= PrmDueTime
						invoked.PrmDueTimeSensitive					= PrmDueTimeSensitive
						invoked.PrmBeginDayOfMonth					= PrmBeginDayOfMonth
						invoked.PrmBeginLastDayOfMonth				= PrmBeginLastDayOfMonth
						invoked.PrmBeginDayForNextMonth				= PrmBeginDayForNextMonth
						invoked.PrmDueDayOfMonth					= PrmDueDayOfMonth
						invoked.PrmDueLastDayOfMonth				= PrmDueLastDayOfMonth			
						invoked.PrmDueDayForNextMonth				= PrmDueDayForNextMonth				
						invoked.PrmHoursRequired					= PrmHoursRequired
						invoked.PrmScheduleForWorkDaysOnly			= PrmScheduleForWorkDaysOnly
						invoked.PrmPrimaryTaskType					= PrmPrimaryTaskType
						invoked.PrmRemovePrimaryTaskType			= PrmRemovePrimaryTaskType
						invoked.PrmSecondaryTaskType				= PrmSecondaryTaskType
						invoked.PrmRemoveSecondaryTaskType			= PrmRemoveSecondaryTaskType
						invoked.PrmTertiaryTaskType					= PrmTertiaryTaskType
						invoked.PrmRemoveTertiaryTaskType			= PrmRemoveTertiaryTaskType
						invoked.PrmRequiresApproval					= PrmRequiresApproval
						invoked.PrmApprovalCode						= PrmApprovalCode
						invoked.PrmRequireSupportingDoco			= PrmRequireSupportingDoco
						invoked.PrmRequireJournalEntry				= PrmRequireJournalEntry
						invoked.PrmTaskDetail						= PrmTaskDetail
						invoked.PrmFinancialForm					= PrmFinancialForm
						
		MassUpdateProcessSet is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup				is a CloseManagementGroup
				PrmCloseTaskSelection				is a CloseTask group
				PrmHasSummaryTaskChanges			is Boolean
				PrmHasDetailTaskChanges				is Boolean
				PrmCalendar							is a SystemCalendar
				PrmPeriodGroup						is a SystemCalendarPeriodGroup
					context of PrmCalendar
				PrmCompany							is a CompanyGroupField 
				PrmRisk								is Numeric 1 
					States
						Low				value is 1
						Medium			value is 2
						High			value is 3
				PrmPriority							is Numeric 1 
					States
						Low				value is 1
						Medium			value is 2
						High			value is 3
				PrmChangeScheduleDetailNumberOfDays	is Boolean
				PrmChangeBeginNumberOfDays			is Boolean
				PrmChangeBeginNumberOfDaysTime		is Boolean
				PrmChangeDueNumberOfDays			is Boolean
				PrmChangeDueNumberOfDaysTime		is Boolean
				PrmChangeScheduleDetailDayOfMonth	is Boolean
				PrmChangeBeginDayofMonth			is Boolean
				PrmChangeBeginDayofMonthTime		is Boolean
				PrmChangeDueDayofMonth				is Boolean
				PrmChangeDueDayofMonthTime			is Boolean
				PrmBeginDaysFromPeriodEnd 			is Numeric 3
				PrmBeginTime			  			is Time
				PrmDueDaysFromPeriodEnd				is Numeric 3					
				PrmDueTime							is Time
				PrmDueTimeSensitive					is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmBeginDayOfMonth					is Unsigned Decimal 2
				PrmBeginLastDayOfMonth				is Boolean
				PrmBeginDayForNextMonth				is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmDueDayOfMonth					is Unsigned Decimal 2
				PrmDueLastDayOfMonth				is Boolean				
				PrmDueDayForNextMonth				is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmHoursRequired					is Unsigned Decimal size 10.2
				PrmScheduleForWorkDaysOnly      	is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmPrimaryTaskType					is a CloseTaskType
				PrmRemovePrimaryTaskType			is Boolean
				PrmSecondaryTaskType				is a CloseTaskType
				PrmRemoveSecondaryTaskType			is Boolean
				PrmTertiaryTaskType					is a CloseTaskType
				PrmRemoveTertiaryTaskType			is Boolean
				PrmRequiresApproval					is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmApprovalCode						is an ApprovalCode
				PrmRequireSupportingDoco			is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmRequireJournalEntry				is Numeric 1 
					States
						ChangeToTrue	value is 1
						ChangeToFalse	value is 2
				PrmTaskDetail						is Text
				PrmFinancialForm					is Alpha 6
			
			Sort Order
				CloseManagementGroup
				TaskLevel
				CloseTask
				
			Instance Selection
				where   (CloseManagementGroup = PrmCloseManagementGroup
				and	   ((PrmHasSummaryTaskChanges 
				and		 PrmHasDetailTaskChanges
				and		 TaskLevel >= 0)
				or		(PrmHasDetailTaskChanges 
				and		 !PrmHasSummaryTaskChanges
				and		 TaskLevel = 1))
				and 	 CloseTask within PrmCloseTaskSelection)

			Action Rules
				Instance Rules
					if (PrmCalendar entered
					and	DefaultCalendar != PrmCalendar)
						DefaultCalendar = PrmCalendar
					if (PrmPeriodGroup entered
					and	DefaultPeriodGroup != PrmPeriodGroup)
						DefaultPeriodGroup = PrmPeriodGroup
					if (PrmCompany entered
					and	DefaultCompany != PrmCompany)
						DefaultCompany = PrmCompany
					if (PrmRisk entered)
						if (PrmRisk.Low)
							Risk = Risk.Low 
						else
						if (PrmRisk.Medium)
							Risk = Risk.Medium
						else
						if (PrmRisk.High)
							Risk = Risk.High 
					if (PrmPriority entered)
						if (PrmPriority.Low)
							Priority = Priority.Low 
						else
						if (PrmPriority.Medium)
							Priority = Priority.Medium 
						else
						if (PrmPriority.High)
							Priority = Priority.High
							
					if (PrmChangeScheduleDetailNumberOfDays)
						if (PrmChangeBeginNumberOfDays)
							if (PrmBeginDaysFromPeriodEnd entered)
								if (BeginDaysFromPeriodEnd != PrmBeginDaysFromPeriodEnd)
									BeginDaysFromPeriodEnd = PrmBeginDaysFromPeriodEnd
									initialize BeginDayOfMonth
									initialize BeginLastDayOfMonth
									initialize BeginDayForNextMonth
							else
								initialize BeginDaysFromPeriodEnd
								initialize BeginDayOfMonth
								initialize BeginLastDayOfMonth
								initialize BeginDayForNextMonth
						if (PrmChangeBeginNumberOfDaysTime)
							if (PrmBeginTime entered)
								if (BeginTime != PrmBeginTime)
									BeginTime = PrmBeginTime
							else
								BeginTime = 28800
						if (PrmChangeDueNumberOfDays)
							if (PrmDueDaysFromPeriodEnd entered)
								if (DueDaysFromPeriodEnd != PrmDueDaysFromPeriodEnd)
									DueDaysFromPeriodEnd = PrmDueDaysFromPeriodEnd
									initialize DueDayOfMonth
									initialize DueLastDayOfMonth
									initialize DueDayForNextMonth
							else
								initialize DueDaysFromPeriodEnd
								initialize DueDayOfMonth
								initialize DueLastDayOfMonth
								initialize DueDayForNextMonth
						if (PrmChangeDueNumberOfDaysTime)
							if (PrmDueTime entered)
								if (DueTime != PrmDueTime)
									DueTime = PrmDueTime
							else
								DueTime = 61200
							
					if (PrmChangeScheduleDetailDayOfMonth)
						if (PrmChangeBeginDayofMonth)
							if (PrmBeginDayOfMonth entered)
								if (BeginDayOfMonth != PrmBeginDayOfMonth)
									BeginDayOfMonth = PrmBeginDayOfMonth
									initialize BeginLastDayOfMonth
									initialize BeginDaysFromPeriodEnd
							else
								initialize BeginDayOfMonth
								initialize BeginDaysFromPeriodEnd
							if (PrmBeginLastDayOfMonth)
								if (BeginLastDayOfMonth != PrmBeginLastDayOfMonth)
									BeginLastDayOfMonth = PrmBeginLastDayOfMonth
									initialize BeginDayOfMonth
									initialize BeginDaysFromPeriodEnd
							else
								if (PrmBeginDayOfMonth not entered)
									initialize BeginDayOfMonth
									initialize BeginLastDayOfMonth
									initialize BeginDaysFromPeriodEnd
						if (PrmChangeBeginDayofMonthTime)
							if (PrmBeginTime entered)
								if (BeginTime != PrmBeginTime)
									BeginTime = PrmBeginTime
							else
								BeginTime = 28800
							if (PrmBeginDayForNextMonth.ChangeToTrue
							and	BeginDayForNextMonth = false)
								BeginDayForNextMonth = true
							if (PrmBeginDayForNextMonth.ChangeToFalse
							and	BeginDayForNextMonth = true)
								BeginDayForNextMonth = false	
						if (PrmChangeDueDayofMonth)
							if (PrmDueDayOfMonth entered)
								if (DueDayOfMonth != PrmDueDayOfMonth)
									DueDayOfMonth = PrmDueDayOfMonth
									initialize DueLastDayOfMonth
									initialize DueDaysFromPeriodEnd
							else
								initialize DueDayOfMonth
								initialize DueDaysFromPeriodEnd
							if (PrmDueLastDayOfMonth)
								if (DueLastDayOfMonth != PrmDueLastDayOfMonth)
									DueLastDayOfMonth = PrmDueLastDayOfMonth
									initialize DueDayOfMonth
									initialize DueDaysFromPeriodEnd
							else
								if (PrmDueDayOfMonth not entered)
									initialize DueDayOfMonth
									initialize DueLastDayOfMonth
									initialize DueDaysFromPeriodEnd
						if (PrmChangeDueDayofMonthTime)
							if (PrmDueTime entered)
								if (DueTime != PrmDueTime)
									DueTime = PrmDueTime
							else
								DueTime = 61200
							if (PrmDueDayForNextMonth.ChangeToTrue
							and	DueDayForNextMonth = false)
								DueDayForNextMonth = true
							if (PrmDueDayForNextMonth.ChangeToFalse
							and	DueDayForNextMonth = true)
								DueDayForNextMonth = false

					if (PrmDueTimeSensitive.ChangeToTrue
					and	DueTimeSensitive = false)
						DueTimeSensitive = true
					if (PrmDueTimeSensitive.ChangeToFalse
					and	DueTimeSensitive = true)
						DueTimeSensitive = false
					if (PrmHoursRequired entered
					and	HoursRequired != PrmHoursRequired)
						HoursRequired = PrmHoursRequired
					if (PrmScheduleForWorkDaysOnly.ChangeToTrue
					and	ScheduleForWorkDaysOnly = false)
						ScheduleForWorkDaysOnly = true
					if (PrmScheduleForWorkDaysOnly.ChangeToFalse
					and	ScheduleForWorkDaysOnly = true)
						ScheduleForWorkDaysOnly = false
					if (PrmPrimaryTaskType entered
					and	PrimaryTaskType != PrmPrimaryTaskType)
						PrimaryTaskType = PrmPrimaryTaskType
					if (PrmRemovePrimaryTaskType)
						initialize PrimaryTaskType	
					if (PrmSecondaryTaskType entered
					and	SecondaryTaskType != PrmSecondaryTaskType)
						SecondaryTaskType = PrmSecondaryTaskType
					if (PrmRemoveSecondaryTaskType)
						initialize SecondaryTaskType
					if (PrmTertiaryTaskType entered
					and	TertiaryTaskType != PrmTertiaryTaskType)
						TertiaryTaskType = PrmTertiaryTaskType
					if (PrmRemoveTertiaryTaskType)
						initialize TertiaryTaskType
					if (PrmRequiresApproval.ChangeToTrue
					and	RequiresApproval = false)
						RequiresApproval = true
						ApprovalCode = PrmApprovalCode
					if (PrmRequiresApproval.ChangeToFalse
					and	RequiresApproval = true)
						RequiresApproval = false
						initialize ApprovalCode
					if (PrmRequireSupportingDoco.ChangeToTrue
					and	RequireSupportingDoco = false)
						RequireSupportingDoco = true
					if (PrmRequireSupportingDoco.ChangeToFalse
					and	RequireSupportingDoco = true)
						RequireSupportingDoco = false
					if (PrmRequireJournalEntry.ChangeToTrue
					and	RequireJournalEntry = false)
						RequireJournalEntry = true
					if (PrmRequireJournalEntry.ChangeToFalse
					and	RequireJournalEntry = true)
						RequireJournalEntry = false
					if (PrmTaskDetail entered
					and	TaskDetail != PrmTaskDetail)
						TaskDetail = PrmTaskDetail
					if (PrmFinancialForm entered
					and	FinancialForm != PrmFinancialForm)
						FinancialForm = PrmFinancialForm	
