ADBAccountMaster is a BusinessClass
	owned by ad
	prefix is ADBCA   
    
    Ontology
    	symbolic key is ADBAccountMaster

    Patterns

	Context Fields

    Persistent Fields
		ADBOrganizationDimension	is like AccountingUnit 
		Active
		NonChartAccount				is Boolean

    Transient Fields

	Derived Fields
		DerivedJulianDate is a DerivedField
			type is AlphaUpper 7
			restricted
			LocalAlphaYear = LocalDateType year
			LocalAlphaDay  = LocalDateType year day
			DerivedJulianDate = LocalAlphaYear
			if (LocalAlphaDay size = 1)
				DerivedJulianDate += "00"
			else
			if (LocalAlphaDay size = 2)
				DerivedJulianDate += "0"
			DerivedJulianDate += LocalAlphaDay 

		DerivedBeginBalancePeriod is a StringField
			type is AlphaUpper 20
			restricted
			LocalBasisYear
			"000"
						
	Local Fields
		LocalGeneralLedgerCalendar			is like GeneralLedgerCalendar
		LocalCloseLedger					is like Ledger
		LocalAccountingEntity				is like AccountingEntity
		LocalReportingChart					is like ReportingChart
		LocalBeginBalancePeriod				is like GeneralLedgerCalendarPeriod
		LocalReportingBasis					is a ReportingBasis
		LocalRunDate						is Date
		LocalDate							is Date
		LocalSummaryPeriodType	 			is Numeric 1
			States
				Year					    value is 1
				Quarter					    value is 2
				Month					    value is 3
				Week					    value is 4
				Day							value is 8					
				EndDate					    value is 5
				TopNode    	   				value is 7
		LocalInstADBOrganizationDimension	is like AccountingUnit 
		LocalInstGeneralLedgerChartAccount	is like GeneralLedgerChartAccount
		LocalInstGeneralLedgerCalendarPeriod is like GeneralLedgerCalendarPeriod
		LocalSystemAccount					is a SystemAccount
		LocalTopNode						is AlphaUpper 20
		LocalAlphaDay						is Alpha 3
		LocalAlphaYear						is Alpha 4
		LocalJulianDate						is Alpha 7
		LocalDateType						is Date
		LocalBasisYear						is like GeneralLedgerCloseYear
		LocalADBTransaction                 is a ADBTransaction
	
	Conditions
		UseAllBalanceSheetAccounts
			restricted
			when (FinanceEnterpriseGroup.AllBalanceSheetAccounts)

	Sets
		ByEntityAccount
			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				GeneralLedgerChartAccount
				AccountingUnit
				FinanceDimension1
		ByAccountingUnitAccount
			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				AccountingUnit
				GeneralLedgerChartAccount
				FinanceDimension1
		ByDimension1Account
			Sort Order
				FinanceEnterpriseGroup
				FinanceDimension1
				GeneralLedgerChartAccount
				AccountingEntity
				AccountingUnit
	Relations
		GeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
			Instance Selection
				where (related.Date 							   >=  LocalDate)
		GeneralLedgerPeriodShadowRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriodType
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.GeneralLedgerCalendar						= LocalGeneralLedgerCalendar
				related.GeneralLedgerCalendarPeriod					= first GeneralLedgerCalendarPeriodRel.GeneralLedgerCalendarPeriod
				related.SummaryPeriodType							= LocalSummaryPeriodType
		GeneralLedgerTotalForAccountRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByAccountPeriodUnitDim1
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.Scenario										= FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTotal.Ledger						= LocalCloseLedger
				related.AccountingEntity								= LocalAccountingEntity
				related.GeneralLedgerTotal.EntityYearPeriod				= LocalBeginBalancePeriod
				related.GeneralLedgerTotal.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
		GeneralLedgerTotalForAccountAndAccountingUnitRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByAccountPeriodUnitDim1
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.Scenario										= FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTotal.Ledger						= LocalCloseLedger
				related.AccountingEntity								= LocalAccountingEntity
				related.GeneralLedgerTotal.EntityYearPeriod				= LocalBeginBalancePeriod
				related.GeneralLedgerTotal.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
			Instance Selection
				where (related.GeneralLedgerTotal.AccountingUnit		= AccountingUnit)
		GeneralLedgerTotalForAccountAndDimension1Rel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses ByAccountPeriodUnitDim1
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.Scenario										= FinanceEnterpriseGroup.ActualsScenario
				related.GeneralLedgerTotal.Ledger						= LocalCloseLedger
				related.AccountingEntity								= LocalAccountingEntity
				related.GeneralLedgerTotal.EntityYearPeriod				= LocalBeginBalancePeriod
				related.GeneralLedgerTotal.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
			Instance Selection
				where (related.FinanceDimension1						= FinanceDimension1)
		ADBDailyAmountRel
			one-to-many relation to ADBDailyAmount
			Field Mapping uses ByEntityAccountRunDate
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.ReportingBasis									= LocalReportingBasis
				related.AccountingEntity								= LocalAccountingEntity
				related.ADBDailyAmount.ADBOrganizationDimension			= ADBOrganizationDimension
				related.ADBDailyAmount.GeneralLedgerChartAccount		= GeneralLedgerChartAccount

			Instance Selection
				where (related.ADBDailyAmount.RunDate 					<= LocalRunDate)
		ReportingChartAccountRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses AccountByChartType
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.ReportingChart					= LocalReportingChart
				related.ChartType						= 2 
				related.GeneralLedgerChartAccount		= GeneralLedgerChartAccount
		ADBTransactionRel
			one-to-many relation to ADBTransaction
			Field Mapping uses ByStatusEntityAccount
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.Status											= 0
				related.AccountingEntity								= AccountingEntity
			Instance Selection
				where (related.ADBTransaction.GeneralLedgerChartAccount	= GeneralLedgerChartAccount)
		UpdateADBDailyAmountRel
			one-to-one relation to ADBDailyAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.ReportingBasis									= LocalReportingBasis
				related.AccountingEntity								= LocalAccountingEntity
				related.ADBDailyAmount.ADBOrganizationDimension			= LocalInstADBOrganizationDimension
				related.ADBDailyAmount.GeneralLedgerChartAccount		= LocalInstGeneralLedgerChartAccount
				related.ADBDailyAmount.RunDate 							= LocalDate
		UpdateADBAggregateBalanceRel
			one-to-one relation to ADBAggregateBalance
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup							= FinanceEnterpriseGroup
				related.ReportingBasis									= LocalReportingBasis
				related.AccountingEntity								= LocalAccountingEntity
				related.ADBAggregateBalance.ADBOrganizationDimension	= LocalInstADBOrganizationDimension
				related.ADBAggregateBalance.GeneralLedgerChartAccount	= LocalInstGeneralLedgerChartAccount
				related.ADBAggregateBalance.GeneralLedgerCalendarPeriod	= LocalInstGeneralLedgerCalendarPeriod

		SystemAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.SystemAccount				= LocalSystemAccount

		JulianDateYearPeriodTypeRel
		    one-to-many relation to GeneralLedgerCalendarPeriod
		    Field Mapping uses ByTopNodeTypeAndJulianDates
		        related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
		        related.TopNode                = LocalTopNode
				related.PeriodType             = 1
				related.EndDateJulian         >= LocalJulianDate
			Instance Selection
				where (related.StartDateJulian <= LocalJulianDate)


		PreviousYearUnprocessedADBTransactionRel
			one-to-many relation to ADBTransaction
			Field Mapping uses ByStatusEntityAccount
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.Status                                      = 0									
				related.AccountingEntity							= AccountingEntity
				related.ADBTransaction.PostingDate				   	< LocalRunDate						
			Instance Selection
				where (related.ADBTransaction.GeneralLedgerChartAccount	= GeneralLedgerChartAccount		
				and    related.ADBTransaction.ADBOrganizationDimension	= ADBOrganizationDimension)

		StartDateUnprocessedADBTransactionRel
			one-to-many relation to ADBTransaction
			Field Mapping uses ByStatusEntityAccount
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.Status                                      = 0									
				related.AccountingEntity							= AccountingEntity
				related.ADBTransaction.PostingDate					= LocalRunDate						
			Instance Selection
				where (related.ADBTransaction.GeneralLedgerChartAccount	= GeneralLedgerChartAccount		
				and    related.ADBTransaction.ADBOrganizationDimension	= ADBOrganizationDimension)

		PostedGeneralLedgerTransactionForAccountRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.FinanceCodeBlock.GeneralLedgerChartAccount 	= GeneralLedgerChartAccount		
				related.PostingDate									= LocalRunDate					
				related.AccountingEntity							= AccountingEntity
			Instance Selection
				where (related.Status.Posted)

		PostedGeneralLedgerTransactionForAccountAndAccountingUnitRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.FinanceCodeBlock.GeneralLedgerChartAccount 	= GeneralLedgerChartAccount		
				related.PostingDate									= LocalRunDate					
				related.AccountingEntity							= AccountingEntity
			Instance Selection
				where (related.Status.Posted
                and    related.FinanceCodeBlock.AccountingUnit = ADBOrganizationDimension)

		PostedGeneralLedgerTransactionForAccountAndDimension1Rel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.FinanceCodeBlock.GeneralLedgerChartAccount 	= GeneralLedgerChartAccount		
				related.PostingDate									= LocalRunDate					
				related.AccountingEntity							= AccountingEntity
			Instance Selection
				where (related.Status.Posted
                and    related.FinanceCodeBlock.FinanceDimension1 = ADBOrganizationDimension)


	Field Rules
		GeneralLedgerChartAccount
			required
			constraint (GeneralLedgerChartAccount.ChartSection.BalanceSheet)
				"AccountMustBeBalanceSheet"

		AccountingEntity
			required

		AccountingUnit
			if (FinanceEnterpriseGroup.ADBSelection.AccountAndAccountingUnit
			and !FinanceEnterpriseGroup.AllBalanceSheetAccounts)
				required
				constraint (AccountingEntity.AverageDailyBalance)
					"<FinanceEnterpriseGroup.AccountingEntityLabel>NotSetForAverageDailyBalance"						

		FinanceDimension1
			if (FinanceEnterpriseGroup.ADBSelection.AccountAndDimension1
			and !FinanceEnterpriseGroup.AllBalanceSheetAccounts)
				required

		ADBOrganizationDimension
			if (FinanceEnterpriseGroup.ADBSelection.Account)
				force default to blank
			if (FinanceEnterpriseGroup.ADBSelection.AccountAndAccountingUnit)
				force default to AccountingUnit
			if (FinanceEnterpriseGroup.ADBSelection.AccountAndDimension1)
				force default to FinanceDimension1

	Rule Blocks
		GetCalendarPeriod
			LocalGeneralLedgerCalendar			= PrmReportingBasis.GeneralLedgerCalendar
			LocalSummaryPeriodType			= 1
			if (GeneralLedgerPeriodShadowRel exists)
				LocalYTDCalendarPeriod		= GeneralLedgerPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod
			LocalSummaryPeriodType			= 2
			if (GeneralLedgerPeriodShadowRel exists)
				LocalQTDCalendarPeriod		= GeneralLedgerPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod
			LocalSummaryPeriodType			= 3
			if (GeneralLedgerPeriodShadowRel exists)
				LocalMTDCalendarPeriod		= GeneralLedgerPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod
			LocalSummaryPeriodType			= 4
			if (GeneralLedgerPeriodShadowRel exists)
				LocalWTDCalendarPeriod		= GeneralLedgerPeriodShadowRel.SummaryGeneralLedgerCalendarPeriod

		GetBeginBalance	
			if (FinanceEnterpriseGroup.ADBSelection.Account)
				LocalDate				= first GeneralLedgerTotalForAccountRel.PeriodEndingDate
				LocalBalanceOnPostDate	= (sum GeneralLedgerTotalForAccountRel.NetFunctionalAmount)
			if (FinanceEnterpriseGroup.ADBSelection.AccountAndAccountingUnit)
				LocalDate				= first GeneralLedgerTotalForAccountAndAccountingUnitRel.PeriodEndingDate
				LocalBalanceOnPostDate	= (sum GeneralLedgerTotalForAccountAndAccountingUnitRel.NetFunctionalAmount)
			if (FinanceEnterpriseGroup.ADBSelection.AccountAndDimension1)
				LocalDate				= first GeneralLedgerTotalForAccountAndDimension1Rel.PeriodEndingDate
				LocalBalanceOnPostDate	= (sum GeneralLedgerTotalForAccountAndDimension1Rel.NetFunctionalAmount)

		UpdateAggregateAmounts	
			LocalReportingBasis							= PrmReportingBasis
			LocalAccountingEntity						= PrmAccountingEntity
			LocalInstADBOrganizationDimension			= ADBOrganizationDimension
			LocalInstGeneralLedgerChartAccount			= GeneralLedgerChartAccount
			if (LocalYTDCalendarPeriodOld entered
			and LocalYTDCalendarPeriod		!= LocalYTDCalendarPeriodOld)
				LocalInstGeneralLedgerCalendarPeriod					= LocalYTDCalendarPeriodOld
				invoke Update UpdateADBAggregateBalanceRel
					invoked.PrmBalanceOnPostDate						= LocalYTDAggregateOnPostDate
					invoked.PrmBalanceOnTransactionDate					= LocalYTDAggregateOnTranDate
				LocalRecordCount			+= 1
				LocalYTDCalendarPeriodOld								= LocalYTDCalendarPeriod
				initialize LocalYTDAggregateOnPostDate
				initialize LocalYTDAggregateOnTranDate
			if (LocalQTDCalendarPeriodOld entered
			and LocalQTDCalendarPeriod		!= LocalQTDCalendarPeriodOld)
				LocalInstGeneralLedgerCalendarPeriod					= LocalQTDCalendarPeriodOld
				invoke Update UpdateADBAggregateBalanceRel
					invoked.PrmBalanceOnPostDate						= LocalQTDAggregateOnPostDate
					invoked.PrmBalanceOnTransactionDate					= LocalQTDAggregateOnTranDate
				LocalRecordCount			+= 1
				LocalQTDCalendarPeriodOld								= LocalQTDCalendarPeriod
				initialize LocalQTDAggregateOnPostDate
				initialize LocalQTDAggregateOnTranDate
			if (LocalMTDCalendarPeriodOld entered
			and LocalMTDCalendarPeriod		!= LocalMTDCalendarPeriodOld)
				LocalInstGeneralLedgerCalendarPeriod					= LocalMTDCalendarPeriodOld
				invoke Update UpdateADBAggregateBalanceRel
					invoked.PrmBalanceOnPostDate						= LocalMTDAggregateOnPostDate
					invoked.PrmBalanceOnTransactionDate					= LocalMTDAggregateOnTranDate
				LocalRecordCount			+= 1
				LocalMTDCalendarPeriodOld								= LocalMTDCalendarPeriod
				initialize LocalMTDAggregateOnPostDate
				initialize LocalMTDAggregateOnTranDate
			if (LocalWTDCalendarPeriodOld entered
			and LocalWTDCalendarPeriod		!= LocalWTDCalendarPeriodOld)
				LocalInstGeneralLedgerCalendarPeriod					= LocalWTDCalendarPeriodOld
				invoke Update UpdateADBAggregateBalanceRel
					invoked.PrmBalanceOnPostDate						= LocalWTDAggregateOnPostDate
					invoked.PrmBalanceOnTransactionDate					= LocalWTDAggregateOnTranDate
				LocalRecordCount			+= 1
				LocalWTDCalendarPeriodOld								= LocalWTDCalendarPeriod
				initialize LocalWTDAggregateOnPostDate
				initialize LocalWTDAggregateOnTranDate

    Actions

		Create is a Create Action
			valid when (!UseAllBalanceSheetAccounts)
			Action Rules
										
			Exit Rules
			
		Update is an Update Action
			valid when (!UseAllBalanceSheetAccounts)
			Entrance Rules
				if (!Active)
					constraint (!ADBTransactionRel exists)
						"TransactionsExistsCannotInactivate<FinanceEnterpriseGroup.AccountLabel>"						
					
			Action Rules

			Exit Rules	

		Delete is a Delete Action

			valid when (!UseAllBalanceSheetAccounts)
			Entrance Rules
				constraint (!ADBTransactionRel exists)
					"TransactionsExistsCannotInactivate<FinanceEnterpriseGroup.AccountLabel>"						

			Exit Rules

		UpdateDailyAggregateAmount is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmReportingBasis				is a ReportingBasis
					default label is "ReportingBasis"
				PrmAccountingEntity				is a AccountingEntity
					default label is "<FinanceEnterpriseGroup.AccountingEntityLabel>"
				PrmLastRunDate					is Date
					default label is "LastRunDate"
				PrmRunDate				is Date
					default label is "RunDate"
				PrmNonChartAccountOnly			is Boolean
				PrmAccount                      is like GeneralLedgerChartAccount
				PrmAccountingUnit               is like AccountingUnit
				PrmFinanceDimension1            is like FinanceDimension1
				PrmFiscalYear					is like GeneralLedgerCloseYear
				PrmGetAccountBeginBalance		is Boolean

			Parameter Rules
				PrmReportingBasis
					LocalReportingBasis			= PrmReportingBasis
					LocalGeneralLedgerCalendar	= PrmReportingBasis.GeneralLedgerCalendar
					LocalCloseLedger			= PrmReportingBasis.DerivedCloseLedger
					LocalReportingChart			= PrmReportingBasis.ReportingChart
					LocalBeginBalancePeriod		= PrmReportingBasis.CurrentBeginBalancePeriod
				PrmAccountingEntity
					LocalAccountingEntity		= PrmAccountingEntity

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				
			Set Is
				PrmFinanceEnterpriseGroup
				PrmReportingBasis
				PrmAccountingEntity

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and    !GeneralLedgerChartAccount.SystemAccount.AverageDailyBalance
				and    AccountingEntity				= PrmAccountingEntity	
				and    (PrmAccount           not entered or PrmAccount           = GeneralLedgerChartAccount)
				and    (PrmAccountingUnit    not entered or PrmAccountingUnit    = AccountingUnit)
				and    (PrmFinanceDimension1 not entered or PrmFinanceDimension1 = FinanceDimension1)
				and    (NonChartAccount or (not PrmNonChartAccountOnly and ReportingChartAccountRel exists))
				and    Active)

			Sort Order
				FinanceEnterpriseGroup
				Active
				AccountingEntity
				ADBOrganizationDimension

			Accumulators
				FunctionalTotal

			Local Fields
				LocalYTDCalendarPeriod				is like GeneralLedgerCalendarPeriod
				LocalQTDCalendarPeriod				is like GeneralLedgerCalendarPeriod
				LocalMTDCalendarPeriod				is like GeneralLedgerCalendarPeriod
				LocalWTDCalendarPeriod				is like GeneralLedgerCalendarPeriod
				LocalYTDCalendarPeriodOld			is like GeneralLedgerCalendarPeriod
				LocalQTDCalendarPeriodOld			is like GeneralLedgerCalendarPeriod
				LocalMTDCalendarPeriodOld			is like GeneralLedgerCalendarPeriod
				LocalWTDCalendarPeriodOld			is like GeneralLedgerCalendarPeriod
				LocalBalanceOnPostDate				is an InternationalAmount
				LocalBalanceOnTransactionDate		is an InternationalAmount
				LocalYTDAggregateOnPostDate			is an InternationalAmount
				LocalQTDAggregateOnPostDate			is an InternationalAmount
				LocalMTDAggregateOnPostDate			is an InternationalAmount
				LocalWTDAggregateOnPostDate			is an InternationalAmount
				LocalYTDAggregateOnTranDate			is an InternationalAmount
				LocalQTDAggregateOnTranDate			is an InternationalAmount
				LocalMTDAggregateOnTranDate			is an InternationalAmount
				LocalWTDAggregateOnTranDate			is an InternationalAmount
				LocalRecordCount					is Numeric 4
				LocalUndistributedRetainEarnings	is like GeneralLedgerChartAccount

			Action Rules
				Empty Set Rules

				Set Rules
					Entrance Rules
						initialize LocalUndistributedRetainEarnings
						LocalSystemAccount  = SystemAccount.UndistributedRetainedEarnings
						LocalUndistributedRetainEarnings = first SystemAccountRel.GeneralLedgerChartAccount
				
				FinanceEnterpriseGroup Set Rules
					Entrance Rules
						initialize LocalRecordCount

					Exit Rules

				Instance Rules





					if (PrmGetAccountBeginBalance)	
						LocalCloseLedger			= PrmReportingBasis.DerivedCloseLedger
						LocalAccountingEntity       = PrmAccountingEntity
						LocalBasisYear              = PrmFiscalYear
						LocalBeginBalancePeriod		= DerivedBeginBalancePeriod
						include GetBeginBalance
						LocalReportingBasis							= PrmReportingBasis
						LocalAccountingEntity						= PrmAccountingEntity
						LocalInstADBOrganizationDimension			= ADBOrganizationDimension
						LocalInstGeneralLedgerChartAccount			= GeneralLedgerChartAccount
						invoke Update UpdateADBDailyAmountRel
							invoked.PrmBalanceOnPostDate			= LocalBalanceOnPostDate
							invoked.PrmBalanceOnTransactionDate		= LocalBalanceOnPostDate

					initialize LocalBalanceOnPostDate
					initialize LocalBalanceOnTransactionDate
					initialize LocalYTDAggregateOnPostDate
					initialize LocalYTDAggregateOnTranDate
					initialize LocalQTDAggregateOnPostDate
					initialize LocalQTDAggregateOnTranDate
					initialize LocalMTDAggregateOnPostDate
					initialize LocalMTDAggregateOnTranDate
					initialize LocalWTDAggregateOnPostDate
					initialize LocalWTDAggregateOnTranDate

					LocalReportingBasis			= PrmReportingBasis
					LocalAccountingEntity		= PrmAccountingEntity
					LocalRunDate				= PrmRunDate

					initialize LocalDate
					if (ADBDailyAmountRel exists)
						LocalDate						= last ADBDailyAmountRel.ADBDailyAmount.RunDate + 1
						LocalBalanceOnPostDate			= last ADBDailyAmountRel.BalanceOnPostDate
						LocalBalanceOnTransactionDate	= last ADBDailyAmountRel.BalanceOnTransactionDate

						if (GeneralLedgerChartAccount = LocalUndistributedRetainEarnings)
							initialize LocalYTDCalendarPeriodOld
							initialize LocalYTDCalendarPeriod
							LocalDate 					= last ADBDailyAmountRel.ADBDailyAmount.RunDate		
							include GetCalendarPeriod
							LocalYTDCalendarPeriodOld	= LocalYTDCalendarPeriod
							initialize LocalYTDCalendarPeriod
							LocalDate 					= last ADBDailyAmountRel.ADBDailyAmount.RunDate + 1	
							include GetCalendarPeriod
							if (LocalYTDCalendarPeriodOld entered
							and LocalYTDCalendarPeriodOld	not = LocalYTDCalendarPeriod)	
								initialize LocalBalanceOnPostDate
								initialize LocalBalanceOnTransactionDate

						if (PrmGetAccountBeginBalance
						or  (PrmLastRunDate not entered and FinanceEnterpriseGroup.AllBalanceSheetAccounts))
							LocalYTDAggregateOnPostDate			+= LocalBalanceOnPostDate
							LocalQTDAggregateOnPostDate			+= LocalBalanceOnPostDate
							LocalMTDAggregateOnPostDate			+= LocalBalanceOnPostDate
							LocalWTDAggregateOnPostDate			+= LocalBalanceOnPostDate
							LocalYTDAggregateOnTranDate			+= LocalBalanceOnTransactionDate
							LocalQTDAggregateOnTranDate			+= LocalBalanceOnTransactionDate
							LocalMTDAggregateOnTranDate			+= LocalBalanceOnTransactionDate
							LocalWTDAggregateOnTranDate			+= LocalBalanceOnTransactionDate
					else
						LocalCloseLedger			= PrmReportingBasis.DerivedCloseLedger
						LocalBeginBalancePeriod		= PrmReportingBasis.CurrentBeginBalancePeriod
						include GetBeginBalance
						LocalBalanceOnTransactionDate	= LocalBalanceOnPostDate
					if (!LocalDate entered)
						LocalDate			= LocalRunDate
					if (LocalBalanceOnPostDate entered
					or  LocalBalanceOnTransactionDate entered)
						initialize LocalYTDCalendarPeriod
						initialize LocalQTDCalendarPeriod
						initialize LocalMTDCalendarPeriod
						initialize LocalWTDCalendarPeriod
						include GetCalendarPeriod
						LocalYTDCalendarPeriodOld		= LocalYTDCalendarPeriod
						LocalQTDCalendarPeriodOld		= LocalQTDCalendarPeriod
						LocalMTDCalendarPeriodOld		= LocalMTDCalendarPeriod
						LocalWTDCalendarPeriodOld		= LocalWTDCalendarPeriod
						while (LocalDate	<= LocalRunDate)
							LocalReportingBasis							= PrmReportingBasis
							LocalAccountingEntity						= PrmAccountingEntity
							LocalInstADBOrganizationDimension			= ADBOrganizationDimension
							LocalInstGeneralLedgerChartAccount			= GeneralLedgerChartAccount
							invoke Update UpdateADBDailyAmountRel

								invoked.PrmBalanceOnPostDate			= LocalBalanceOnPostDate
								invoked.PrmBalanceOnTransactionDate		= LocalBalanceOnTransactionDate
							LocalRecordCount					+= 1
							include UpdateAggregateAmounts
							LocalDate	+= 1
							initialize LocalYTDCalendarPeriod
							initialize LocalQTDCalendarPeriod
							initialize LocalMTDCalendarPeriod
							initialize LocalWTDCalendarPeriod
							include GetCalendarPeriod
							LocalYTDAggregateOnPostDate			+= LocalBalanceOnPostDate
							LocalQTDAggregateOnPostDate			+= LocalBalanceOnPostDate
							LocalMTDAggregateOnPostDate			+= LocalBalanceOnPostDate
							LocalWTDAggregateOnPostDate			+= LocalBalanceOnPostDate
							LocalYTDAggregateOnTranDate			+= LocalBalanceOnTransactionDate
							LocalQTDAggregateOnTranDate			+= LocalBalanceOnTransactionDate
							LocalMTDAggregateOnTranDate			+= LocalBalanceOnTransactionDate
							LocalWTDAggregateOnTranDate			+= LocalBalanceOnTransactionDate
							if ((LocalYTDCalendarPeriodOld entered
							and  LocalYTDCalendarPeriodOld		not = LocalYTDCalendarPeriod)
							and LocalInstGeneralLedgerChartAccount	= LocalUndistributedRetainEarnings)
								end while	
						initialize LocalYTDCalendarPeriod
						initialize LocalQTDCalendarPeriod
						initialize LocalMTDCalendarPeriod
						initialize LocalWTDCalendarPeriod
						include UpdateAggregateAmounts



		UpdateADBBeginningBalance is a Set Action			
			restricted
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity				is a AccountingEntity
					default label is "<FinanceEnterpriseGroup.AccountingEntityLabel>"
				PrmReportingBasis				is a ReportingBasis
					default label is "ReportingBasis"
				PrmReportingBasisYear			is like ReportingBasisYear
					default label is "ReportingBasisYear"
				PrmCloseLedger					is a Ledger
					default label is "CloseLedger"
				PrmNewYear						is a GeneralLedgerCalendarPeriod
					default label is "NewYear"
				PrmNewYearDate					is Date
					default label is "NewYearDate"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					RetainedEarnings 			= PrmFinanceEnterpriseGroup.DisplayRetainedEarnings
				PrmReportingBasis
					LocalReportingChart			= PrmReportingBasis.ReportingChart

		    Local Fields
        	    RetainedEarnings				is like GeneralLedgerChartAccount
				LocalBalanceOnPostDate			is an InternationalAmount
				LocalBeginBalance				is a InternationalAmount
				LastBalanceOnPostDate			is a InternationalAmount
				LastBalanceOnTransactionDate	is a InternationalAmount
				LastADBDailyAmountRunDate		is Date
				LocalTimeStamp					is TimeStamp
				LocalGLPostedAmount						is a InternationalAmount
				ADBStartDateUnprocessedAmount			is a InternationalAmount
				ADBPreviousYearUnprocessedAmount		is a InternationalAmount

			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and    !GeneralLedgerChartAccount.SystemAccount.AverageDailyBalance
				and    AccountingEntity				= PrmAccountingEntity	
				and    GeneralLedgerChartAccount    = RetainedEarnings
				and    Active)

			Action Rules
				Empty Set Rules

				Set Rules
					Entrance Rules
						LocalTimeStamp = current timestamp

				Instance Rules
					initialize LocalRunDate
					initialize LocalBeginBalance
					initialize LastBalanceOnPostDate
					initialize LocalGLPostedAmount
					initialize ADBStartDateUnprocessedAmount
					initialize ADBPreviousYearUnprocessedAmount

					LocalReportingBasis                = PrmReportingBasis
					LocalAccountingEntity              = AccountingEntity
					LocalRunDate                       = PrmNewYearDate


					if (ADBDailyAmountRel exists)
						LastBalanceOnPostDate			= last ADBDailyAmountRel.BalanceOnPostDate
						LastADBDailyAmountRunDate		= last ADBDailyAmountRel.ADBDailyAmount.RunDate
						LastBalanceOnTransactionDate	= last ADBDailyAmountRel.BalanceOnTransactionDate


						LocalCloseLedger			= PrmCloseLedger
						LocalBeginBalancePeriod		= PrmNewYear
						include GetBeginBalance


						if (FinanceEnterpriseGroup.ADBSelection.Account)
							LocalGLPostedAmount			= (sum PostedGeneralLedgerTransactionForAccountRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
						else
						if (FinanceEnterpriseGroup.ADBSelection.AccountAndAccountingUnit)
							LocalGLPostedAmount			= (sum PostedGeneralLedgerTransactionForAccountAndAccountingUnitRel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)
						else
						if (FinanceEnterpriseGroup.ADBSelection.AccountAndDimension1)
							LocalGLPostedAmount			= (sum PostedGeneralLedgerTransactionForAccountAndDimension1Rel.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount)


						ADBPreviousYearUnprocessedAmount	= (sum PreviousYearUnprocessedADBTransactionRel.FunctionalAmount)
						ADBStartDateUnprocessedAmount		= ((sum StartDateUnprocessedADBTransactionRel.FunctionalAmount) - LocalGLPostedAmount)


						LocalBeginBalance	= (LocalBalanceOnPostDate - ADBPreviousYearUnprocessedAmount - LastBalanceOnPostDate - ADBStartDateUnprocessedAmount)

					
						LocalADBTransaction.ADBOrganizationDimension	= ADBOrganizationDimension
						LocalADBTransaction.GeneralLedgerChartAccount	= GeneralLedgerChartAccount
						LocalADBTransaction.PostingDate					= LocalRunDate
						LocalADBTransaction.TransactionDate				= LocalRunDate
						LocalADBTransaction.RunDate						= LocalTimeStamp
						invoke Update LocalADBTransaction
							invoked.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
							invoked.AccountingEntity				= AccountingEntity
							invoked.AccountingUnit					= AccountingUnit
							invoked.FinanceDimension1				= FinanceDimension1
							invoked.PrmFunctionalAmount				= LocalBeginBalance
							invoked.NonChartAccount					= true	
