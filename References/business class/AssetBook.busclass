AssetBook is a BusinessClass
    owned by am
    prefix is ASB
    classic name is AMASTBOOK

    Ontology
        symbolic key is AssetBook
            classic set name is ASBSET1

    Patterns
        implements ContextualParent
        implements StaticJava
        disable AuditIndex

    Persistent Fields

        Active                              is Boolean
            classic name is BOOK-STATUS
        BookRegulation
        Method
        Life
        InServiceDate                       is Date
            classic name is INSRV-DATE
        Basis                               is a CurrencyAmount
            classic name is BOOK-BASIS

        DepreciationMethodSwitched          is Boolean
            classic name is METH-SWITCHED
        YearPlacedInService
            classic name is METH-TABLE-YR
        Convention
        DepreciationStartDate               is Date
            classic name is DEPR-STARTDATE
        LifeInYears
            classic name is LIFE-YEARS
        CurrentPeriodDepreciationCalculated is Boolean
            sql name is CPeriodDepreciationCalculated
            classic name is STATUS-CP-CALC
            disable Auditing
        CurrentPeriodPortionOfLife
            classic name is LIFE-CP
            disable Auditing
        TransactionNumberOfDecimals         is a CurrencyNumberOfDecimals
            classic name is TRAN-ND
        CurrentPeriodDepreciation           is an InternationalAmount
            classic name is DEPR-CP
                precision is OutputNumberOfDecimals
            disable Auditing
        CurrentPeriodDepreciationAllowed    is an InternationalAmount
            sql name is CPeriodDepreciationAllowed
            classic name is DEPR-CP-ALLOW
                precision is OutputNumberOfDecimals
            disable Auditing
        LifeToDateDepreciation              is an InternationalAmount
            classic name is DEPR-LTD
                precision is OutputNumberOfDecimals
        YearToDateDepreciation              is an InternationalAmount
            classic name is DEPR-YTD
                precision is OutputNumberOfDecimals
        YearToDateDepreciationAllowed       is an InternationalAmount
            classic name is DEPR-YTD-ALLOW
                precision is OutputNumberOfDecimals
        YearToDateDepreciationOverride      is an InternationalAmount
            classic name is DEPR-YTD-OVRRD
                precision is OutputNumberOfDecimals
        LifeToDateDepreciationAllowed       is an InternationalAmount
            classic name is DEPR-LTD-ALLOW
                precision is OutputNumberOfDecimals
        LastClosedPeriodBalance             is an InternationalAmount
            classic name is LAST-CLOSE
        FirstAndLastYear
            classic name is FIRST-LAST-FL
        YearToDateInactiveMonths
            classic name is INACT-YTD
        LifeToDateInactiveMonths
            classic name is INACT-LTD
        LifeRemaining                       is Decimal size 14.10
            classic name is LIFE-REM
			precision is 3
		SalvageValue                        is an InternationalAmount
                precision is OutputNumberOfDecimals
        BusinessPercent
            classic name is BUS-PERCENT
        PersonalUseCode
            classic name is PERSONAL-USE
        FirstYearExpenseAmount              is an InternationalAmount
            classic name is YR1-EXP
                precision is OutputNumberOfDecimals
        AssetTaxCreditTable
            classic name is TC-TABLE
        TaxCreditPropertyAmount             is an InternationalAmount
            classic name is TC-PROPERTY
                precision is OutputNumberOfDecimals
        TaxCredit                           is an InternationalAmount
                precision is OutputNumberOfDecimals
        InsuranceCalculationMethod          is a Method
            classic name is INS-METHOD
        ActualInsuranceValue                is an InternationalAmount
            classic name is INS-ACT-VAL
                precision is OutputNumberOfDecimals
        CalculatedInsuranceValue            is an InternationalAmount
            classic name is INS-CMPTD-VAL
                precision is OutputNumberOfDecimals
        ReplacementCalculationMethod        is a Method
            classic name is RPL-METHOD
        CalculatedReplacementValue          is an InternationalAmount
            classic name is RPL-CMPTD-VAL
                precision is OutputNumberOfDecimals
        CreationDate                        is TimeStamp
        CreatedBy                           is an Operator 
        	holds pii
            classic name is CREATOR-ID
        YearToDateDisposedMonths
            classic name is DSP-YTD
        RvlLtd                              is an InternationalAmount
        RvlDate                             is Date
		AssetManagementInterfaceResult
			delete ignored
		AssetSummaryGroup
		ImpairmentBookOfOrigin				is like Book
			default label is "DepreciationBook"
		CreditBalance						is an InternationalAmount
		DebitBalance						is an InternationalAmount
		YearEndBalance						is an InternationalAmount
		DepreciationEndDate					is Date
		LastExpenseFund						is like AssetFund
		LastDepreciationFund				is like AssetFund
		IncrementalExpense					is an InternationalAmount
		IncrementalDepreciation				is an InternationalAmount
		IncludeAdjustmentPriorYearHistory	is Boolean
		AdjustPriorYearHistoryTransactions	is Numeric 1
			States
				YesWithoutTransactions	value is 0
				YesWithTransactions		value is 1
				NoPriorYearAdjustment	value is 2
		HistoryPostingDate					is Numeric 1
			States
				PriorYearEndDate			value is 0
				DefaultPostingDate			value is 1
		IndianReservation					is Boolean
		PropertyType						is Numeric 2
			States
				1245				value is 01 
					default label is "1245"
				1250				value is 02 
					default label is "1250"
		QualifiedImprovement		is Numeric 2
			States
				NotQualified			value is 00
				LeaseholdImprovement	value is 01
				NotLeaseholdImprovement	value is 02
		ForeignProperty						is Boolean
		CostRecoverySystem					is Numeric 2
			States
				ACRS				value is 1
				MACRS				value is 2


		ClassificationOfProperty	is AlphaUpper 5
			States
				Blank									value is " "
				3YearProperty							value is "03"
				5YearProperty							value is "05"
				7YearProperty							value is "07"
				10YearProperty							value is "10"
				12YearProperty							value is "12"
				15YearProperty							value is "15"
				RealProperty18							value is "18"
					default label is "Real Property (3/17/84 To 5/9/85)"
				RealProperty19 							value is "19"
					default label is "Real Property (3/10/85 To 12/31/86)"
				20YearProperty							value is "20"
				25YearProperty							value is "25"
				ResidentialReal27						value is "27"
					default label is "Residential Real 27.5"
			 	NonResidentialReal30					value is "31"
			 		default label is "NonResidential Real 31.5 (1/1/87 To 5/12/93)"
				NonResidentialReal40 					value is "39"
					default label is "NonResidential Real 39/40"
		MineralReserves						is Boolean
		LowIncomeHousing					is Boolean
		NonConforming						is Boolean
		Farming								is Boolean
		Section179							is Boolean
		Listed								is Boolean
		Used								is Boolean
		DepreciableIntangible				is Numeric 1
			States
				Blank					value is 0
				DepreciableIntangible	value is 1
				AmortizedIntangible		value is 2
		TransitionalRuleFlag				is Boolean
		BonusAmount							is an InternationalAmount
		Section179Expense					is an InternationalAmount
		SpreadOverRemainingLife				is Boolean
		Disposed							is Boolean
		AssetDisposal						is like AssetDisposal  	
		BatchUpdateResult					is like AssetBatchUpdateResult
		Company                     		is an AssetCompany
		DepreciationBatchUpdateResult		is like AssetBatchUpdateResult
		DepreciationBonus					is an InternationalAmount






	Local Fields

		LocaLine									is Alpha size 9

		LocalEnteredTransactionCost                 is an InternationalAmount
		LocalTransactionCost                        is an InternationalAmount
		LocalTransactionItemCost					is an InternationalAmount
		LocalAction									is AlphaUpper 1
		LocalTransactionDate						is Date
		LocalReference								is Alpha 30
		LocalCreateASTAssetTransaction				is Boolean
		LocalCreateCLRAssetTransaction				is Boolean
		LocalCreateACMAssetTransaction				is Boolean
		LocalCreateEXPAssetTransaction				is Boolean
		LocalCreateEQUAssetTransaction				is Boolean
		LocalCreateASTAssetBookTransaction			is Boolean
		LocalCreateCLRAssetBookTransaction			is Boolean
		LocalCreateACMAssetBookTransaction			is Boolean
		LocalCreateEXPAssetBookTransaction			is Boolean
		LocalCreateEQUAssetBookTransaction			is Boolean
		FromProjection								is Boolean
		LocalAllocationAccounts						is Numeric 2
		L1											is Numeric 2
		LocalComputeFromBatch						is Boolean
		LocalUpdateFromInterface					is Numeric 1
		LocalTransactionAmount						is an InternationalAmount
		LocalTransactionAccumulation				is an InternationalAmount
		LocalASTTransactionAmount					is an InternationalAmount
		LocalCLRTransactionAmount					is an InternationalAmount
		LocalACMTransactionAmount					is an InternationalAmount
		LocalEXPTransactionAmount					is an InternationalAmount
		LocalEQUTransactionAmount					is an InternationalAmount
		LocalDERTransactionAmount					is an InternationalAmount
		LocalCurrencyAmount							is like InternationalAmount
		RoundedTransactionAmount					is like InternationalAmount

		LocalDeprBonus								is an InternationalAmount
		LocalMonthsProcessed						is an InternationalAmount
		LocalOldBasis								is an InternationalAmount
		LocalNewBasis								is an InternationalAmount
		LocalOldASTTranAmt							is an InternationalAmount

		LocalAssetAccount							is a FinanceCodeBlock	
		LocalAccumulatedDepreciationAccount			is a FinanceCodeBlock	
		LocalDepreciationExpenseAccount				is a FinanceCodeBlock	
		LocalProceedsAccount						is a FinanceCodeBlock	
		LocalGainAccount							is a FinanceCodeBlock	
		LocalLossAccount							is a FinanceCodeBlock	
		LocalClearingAccount						is a FinanceCodeBlock	
		LocalDisposalExpenseAccount					is a FinanceCodeBlock	
		LocalDeferredGainAccount					is a FinanceCodeBlock	
		LocalDeferredLossAccount					is a FinanceCodeBlock	
		LocalRevalueSurplusAccount					is a FinanceCodeBlock
		LocalRevalueLossAccount						is a FinanceCodeBlock
		LocalImpairmentLossAccount					is a FinanceCodeBlock
		LocalAccumulatedImpairmentLossAccount		is a FinanceCodeBlock
		LocalImpairmentAmortizationAccount			is a FinanceCodeBlock
		LocalImpairmentWriteOffAccount				is a FinanceCodeBlock
		LocalRevalueAmortizationAccount				is a FinanceCodeBlock
		LocalRevalueReserveAccount					is a FinanceCodeBlock
		LocalASTTransactionDimensions              	is a FinanceCodeBlockNoAccountFull
		LocalEXPTransactionDimensions              	is a FinanceCodeBlockNoAccountFull
		LocalACMTransactionDimensions              	is a FinanceCodeBlockNoAccountFull
		I11											is Numeric 2
		I1   										is Numeric 2
		I2											is Numeric 2

		I64											is Numeric 2
		LocalAddDay									is Numeric size 2

		LocalPersonalUse							is AlphaUpper 10
		LocalMethTbYear								is like YearPlacedInService
		LocalBusPercent								is like BusinessPercent
		LocalMethodSwitch							is Boolean
		LocalMethod									is a Method
		LocalStartDate								is Date
		LocalPdPerYear								is Numeric 2
		LocalDeprSave								is an InternationalAmount

		LocalLife 									is like Life
		LocalDeprYTD								is an InternationalAmount
		LocalDeprLTD								is an InternationalAmount
		LocalSalvage								is an InternationalAmount
		LocalBeginningYearLife						is an InternationalAmount

		LocalRemainingLife							is like LifeRemaining
		LocalLifeRem								is like LifeRemaining
		LocalProcessedMonths						is like LifeRemaining
		LocalBasis									is an InternationalAmount
		OriginalBasis								is an InternationalAmount
		PreviousBasisAdjustment						is an InternationalAmount
		LocalYearToDateDepreciation					is an InternationalAmount
		PreviousACMAdjustment						is an InternationalAmount

		LocalConvention								is like Convention
		LocalInsDate								is Date
		LocalInServiceDate							is Date

		LocalOptMethod								is a Method
		LocalYearEndDate							is Date
		LocalYearBeginDate							is Date
		LocalPrevYearEndDate						is Date
		LocalDeprClsPd								is Numeric 2
		LocalCompany								is like Company
		AnnualDepreciation

		LocalAnnualDepreciation						is an InternationalAmount
		LocalRoundedAnnualDepreciation				is Decimal 18.6
		LocalDeprCompare							is an InternationalAmount

		LocalBook 									is like Book
		LocalCurrencyTable							is a CurrencyTable
		LocalEnterpriseGroup						is a EnterpriseGroup

		LocalComputeOption							is like Compute
		LocalAddMemoAccounts						is Boolean
		LocalBeginYearLife							is an InternationalAmount
		LocalProspDeprOvr							is an InternationalAmount
		LocalProspRemAmt							is an InternationalAmount
		LocalProspDeprYear							is an InternationalAmount
		LocalProspDeprPd							is an InternationalAmount

		LocalCurrencyRate							is a CurrencyExchangeRate
		LocalTranDesc								is a Description


		CreatingFromTemplate						is Boolean
		ItemAmountsUpdated							is Boolean
		LocalControlDebit 				 			is an InternationalAmount
		LocalControlCredit	 						is an InternationalAmount

		LoaclADInLTDDeprAllow						is an InternationalAmount
		LocalADInYTDDepr							is an InternationalAmount
		LocalADInYTDDeprAllow						is an InternationalAmount
		LocalStopProcessing							is Boolean
		ResetAdjustment								is Boolean

		LocalMonthlyDepreciation					is an InternationalAmount
		LocalProject								is like Project
		LocalProjectDateRange						is a DateRange

		LocalEditDate								is Date


		CalculationMonthlyAmount					is an InternationalAmount

		LocalAsset									is like Asset

		TempYearToDateDepreciation					is an InternationalAmount
		TempLifeToDateDepreciation					is an InternationalAmount
		TempLifeRemaining							is like LifeRemaining
		LocalBaseAmount								is a CurrencyExchange
		LocalCurrencyExchange						is a CurrencyExchangeGroup

		NumberOfPeriodsFirstYear					is Decimal 9.5

		TempLocalAnnualDepreciation					is an InternationalAmount
		LocalShortYearAmount						is an InternationalAmount
		LocalAnnualAddition							is an InternationalAmount
		LocalLifeInYrs								is Decimal size 8.4
		LocalSumOfYrs								is Decimal size 7.2
		LocalNumberYearsRemaining					is Decimal size 7.3
		LocalDigitsValueNumberYears					is Decimal size 7.3
		LocalDigitsValue							is Decimal size 7.3
		BonusDateRange								is a DateRange
		LocalCalledFromBatch                        is Boolean

		LocalCurrectYearProcessed					is Boolean
		LocalProjectionsLifeInYears					is Decimal size 5.2
		LocalProjectionsCurrentYear					is Decimal size 9.5
		LocalAccumulatedDepreciation				is Decimal 18.6
		LocalProjectionAdjustmentAmount				is an InternationalAmount
		LocalProjectionAmount						is an InternationalAmount
		LocalAccumulatedProjections					is an InternationalAmount
		LocalFirstYearProjectionAdjustmentAmount	is an InternationalAmount
		LocalPeriodRemainingCurrentYear				is Numeric 3
		LocalProjectionMonthlyAdjustmentAmount		is an InternationalAmount
		LocalMonthsFirstYear						is like LifeRemaining
		ComputedLifeRemaining						is like LifeRemaining
		LocalHistoryYearEndDate						is Date
		LocalHistoryYearBeginDate					is Date
		T1											is Decimal size 9.5
		T2											is Numeric 3
		T3											is Numeric 3
		LocalImpairmentParameter					is Numeric 1
		LocalFinanceEnterpriseGroup					is like FinanceEnterpriseGroup
		LocalGeneralLedgerCompanyGroup				is like GeneralLedgerCompanyGroup
		LocalDepreciationEndDate					is Date
		LocalCreateFromBatch						is Boolean
		LocalBookCurrencyAmount						is an InternationalAmount
		LocalEquityAmount							is an InternationalAmount
		LocalBalanceAmount							is an InternationalAmount
		LocalNetUpfrontCash							is an InternationalAmount
		LocalNetUpfrontCashEntries					is an InternationalAmount
		LocalBookGroup								is a BookGroup
		LocalCalendarPeriod							is Numeric 3
		InServiceYearEndDate						is Date
		LocalAllocStartDate							is Date
		LocalAllocSequence							is Numeric 6
		LocalTransaction							is like AssetTransaction
		LocalBookTransaction						is like AssetBookTransaction
		LocalClearingAmountAlreadyEntered			is an InternationalAmount
		LocalLeaseAsset								is like Asset
		LocalLifeRemaining							is Decimal size 14.10
		LocalDepreciationDate						is Date
		LocalDaysRemaining							is Decimal size 9.5
		LocalTotalLife								is Decimal size 7.3
		LocalBasisReductionPercentage				is Decimal size 19.3
		LocalSalvagePercentage						is like BusinessPercent
		LocalNumberOfDaysClosed						is Numeric size 12
		LocalNumberOfDaysYear						is Numeric size 12
		LocalTotalLimits							is an InternationalAmount
		TranLocalAnnualDepreciation					is an InternationalAmount
		LocalBookRegulation							is like BookRegulation
		LocalBookRegulationChanged					is Boolean
		LocalPersonalUseCode						is like PersonalUseCode
		LocalYTDDepreciation						is an InternationalAmount
		LocalAssetProcess							is like AssetProcess
		LocalTransactionStatus						is like TransactionStatus
		LocalAssetAccountType						is like AssetAccountType
		LocalShortTermLiabilityAmount				is an InternationalAmount
		LocalLongTermLiabilityAmount				is an InternationalAmount
		LocalReleasedShortTermLiabilityAmount		is an InternationalAmount
		LocalReleasedLongTermLiabilityAmount		is an InternationalAmount
		LocalShortTermLiabilityEntered				is an InternationalAmount
		LocalLongTermLiabilityEntered				is an InternationalAmount
		CurrencyWork								is a ReportCurrencyExchangeGroup
		LocalSTLiabilityPercentage					is Decimal size 7.5
		LocalLTLiabilityPercentage					is Decimal size 7.5
		LocalLiabilityAsset							is like Asset
		LocalCreditTotal							is an InternationalAmount
		LocalCreditDifference						is an InternationalAmount
		LocalArrayCount 							is Numeric size 2
		LocalModificationDate						is Date
		LocalTotalROUReduction						is an InternationalAmount
		LocalAssetPercent							is Percent 7.5
		LocalOriginalROUReduction					is an InternationalAmount
		LocalDifference                       		is Numeric size 2
		LocalRevalAmortizationAmount				is Decimal size 19.3
		LocalFlag                                   is Boolean
		LocalYearValue								is Decimal size 14.10
		LocalPortionOfYear							is Decimal size 14.10
		IsNotFirstProjection						is Boolean
		LocalDaysDiffMonth							is Numeric size 3
		LocalInServiceDiffDays						is Numeric size 3
		LocalFromDate								is Date
		LocalToDate									is Date
		LocalCurrency                               is like FromCurrency
		LocalAmount                                 is like InternationalAmount
		LocalFutureYearEndDate                      is Date
		LocalSkip									is Boolean
		LocalNumberOfPeriodCloseRuns				is Numeric size 2
		LocalDepreciationPeriodsPerYear				is Numeric size 3
		LocalSkipDefaulting							is Boolean
		LocalHistoryFlag                            is Boolean
		LocalAdjustPriorYearHistory                 is Alpha size 30
		LocalAssetDisposal							is like Sequence
		LocalNumberCalPd						        is Numeric size 2

	Context Fields

		DateRange
		PurchaseDateRange 							is a DateRange
		CreateDateRange								is a DateRange


	Transient Fields


		AdjustmentDate								is Date
		TransientBook								is a Book
			derive value from ThisInstanceRel.Book
		TransientAssetType							is like AssetType	
			derive value from AssetRel.AssetType
		TransientAssetCompany						is like AssetCompany	
			derive value from AssetRel.Company
        TransientAssetLocation						is an AssetLocation
			derive value from AssetRel.AssetLocation
        TransientAssetDivision 						is an AssetDivision
			derive value from AssetRel.AssetDivision
		TransientAssetGroup							is an AssetGroup
			derive value from AssetRel.AssetGroup
		TransientAssetStatus						is Numeric 1
			derive value from AssetRel.Status
            States
                Unreleased  value is 1
                Released    value is 2
                PostRelease value is 3
                Disposed    value is 9
		TransientPropertyType						is a Property
			derive value from AssetRel.AssetTypeProperty
		TransientCategory							is an AssetCategory
			derive value from AssetRel.AssetCategory
		TransientClassification						is AlphaUpper 1
			derive value from AssetRel.Classification
            States
                Purchased value is "P"
                Finance   value is "C"
                Operating value is "O"
		TransientAssetLease							is an AssetLease	
			derive value from AssetRel.AssetLease
		TransientTagNumber							is an TagNumber	
			derive value from AssetRel.TagNumber
		TransientSimulated							is Boolean
		    derive value from AssetRel.Simulated
		TransientWorkInProcess 						is Boolean
		   	derive value from AssetRel.WorkInProcess
        TransientTaxExempt							is Boolean
          	derive value from AssetRel.TaxExempt
  		TransientUsed								is Boolean
			derive value from AssetRel.Used
  		TransientSummaryGroup						is an AssetSummaryGroup
			derive value from AssetRel.AssetSummaryGroup
		TransientOwner								is an Employee
			derive value from AssetRel.AssetOwner
			context of FinanceEnterpriseGroup
		TransientDepreciationRate					is a DepreciationRate
			derive value from first ClassDepreciationsRel.DepreciationRate
		TransientDisposalMethod						is a DisposalMethod
			derive value from ReleasedAssetDisposalRel.DisposalMethod
		TranAssetAccount							is a FinanceCodeBlock
		TranAccumulatedDepreciationAccount			is a FinanceCodeBlock
		TranDepreciationExpenseAccount				is a FinanceCodeBlock
		TranProceedsAccount							is a FinanceCodeBlock
		TranGainAccount								is a FinanceCodeBlock
		TranLossAccount								is a FinanceCodeBlock
		TranClearingAccount							is a FinanceCodeBlock
		TranDisposalExpenseAccount					is a FinanceCodeBlock
		TranDeferredGainAccount						is a FinanceCodeBlock
		TranDeferredLossAccount						is a FinanceCodeBlock
		TranRevalueSurplus							is a FinanceCodeBlock
		TranRevalueLoss								is a FinanceCodeBlock
		TranRevalueAmortization			 			is a FinanceCodeBlock
		TranRevalueReserve 							is a FinanceCodeBlock
		TranImpairmentLoss				 			is a FinanceCodeBlock
		TranAccumulatedImpairmentLoss				is a FinanceCodeBlock
		TranImpairmentAmortization			 		is a FinanceCodeBlock
		TranImpairmentWriteOff				 		is a FinanceCodeBlock
		TranImpairmentEventDebit					is a FinanceCodeBlock
		TranImpairmentEventCredit					is a FinanceCodeBlock
		ComputeOption								is a Compute
		TransientMethodFormula						is a MethodFormula
			derive value from ThisInstanceRel.Method.MethodFormula
		TransientMethod								is a Method
			derive value from ThisInstanceRel.Method
		TransientLife								is like Life
			derive value from ThisInstanceRel.Life
		TransientLifeRemaining						is like LifeRemaining
			derive value from ThisInstanceRel.LifeRemaining
			precision is 3
		TransientInServiceDate						is Date
			derive value from ThisInstanceRel.InServiceDate
		TransientConvention							is a Convention
			derive value from ThisInstanceRel.Convention
		TransientBasis								is a CurrencyAmount
			derive value from ThisInstanceRel.Basis
                precision is OutputNumberOfDecimals
		TransientYearToDateDepreciation				is an InternationalAmount
			derive value from ThisInstanceRel.YearToDateDepreciation
                precision is OutputNumberOfDecimals
		TransientLifeToDateDepreciation				is an InternationalAmount
			derive value from ThisInstanceRel.LifeToDateDepreciation
                precision is OutputNumberOfDecimals
       	YearToDateResetAmount						is like InternationalAmount
        LifeToDateResetAmount        				is like InternationalAmount
        TotalHistoryExpensed						is an InternationalAmount
		LocalFromCurrency							is a FromCurrency
			derive value from PostingCurrency

		TransientSkipTransactionCreate				is Boolean
		TransientExchangeDate             			is an ExchangeDate
		TransientFromCurrency						is a FromCurrency
			derive value from PostingCurrency
		TransientExchangeRate						is a CurrencyExchangeRate
		TransientRefreshControlTimeStamp			is TimeStamp
		FirstYearMonths								is Decimal 9.2
		MonthsProcessed
		LastPeriodEnd								is Date
		I6											is Numeric 2
		TransientYearBeginDate						is Date
			derive value from ThisInstanceRel.BookYearBeginDate

		TranLeaseClearingAccount					is a FinanceCodeBlock
       	TransientPostHistory						is Boolean
		TransientIncrementalAccumulatedDepreciation is a FinanceCodeBlock
		TransientIncrementalExpense					is an InternationalAmount
		TransientIncrementalACM						is an InternationalAmount
		TransientLastFund							is like AssetFund
		TransientCreateDate							is Date
			derive value from ThisInstanceRel.DerivedCreateDate
		TransientPostingDate						is Date

		TranClearingAccountAmount					is an InternationalAmount
			derive value from DerivedNetUpfrontCash

		TransientCreateFromBookImport				is Boolean
		TransientYearPlacedInServiceEntered  		is Boolean
		TransientBookRegulation						is a BookRegulation
			derive value from BookRegulation
		TransientOtherPrograms						is Boolean
		TransientUpdateFromAsset					is Boolean
		TransientProgram                            is Alpha size 20
		TransientAllowZeroLifeRemaing				is Boolean

	Derived Fields

		BasisWithCurrency is a MessageField
			"<Basis>_<TransientFromCurrency>"

		LifeForCardView is a MessageField
			"Life:"

		DepreciationForCardView is a MessageField
			"Depreciation:"

        PercentDepreciationRemaining is a DerivedField
			type is Percent size 5.2
			if (LifeToDateDepreciation > 0)
				return ((BasisLessSalvageValue - LifeToDateDepreciation) / BasisLessSalvageValue)
			else
				return (1)

		PercentLifeRemaining is a DerivedField
			type is Percent size 5.2
			return (LifeRemaining / Life)

		CYPercentOfAccumulatedDepreciation is a DerivedField
			type is Percent size 6.3
			return (YearToDateDepreciation / LifeToDateDepreciation)

		CalculationAmount is a DerivedField
			type is like InternationalAmount
                precision is OutputNumberOfDecimals
			initialize CalculationMonthlyAmount
			if (Method.MethodFormula entered)
				CalculationMonthlyAmount = Method.MethodFormula.MethodComputeOutput
			else
				if (Method.RecordType.Percent)
					CalculationMonthlyAmount = (((Basis - SalvageValue) * Method.MethodPercents.MethodPercent[LocalMethTbYear]) / 100)
			return CalculationMonthlyAmount	

		ReplacementCalculationAmount is a DerivedField
			type is like InternationalAmount
                precision is OutputNumberOfDecimals
			initialize ReplacementCalculationAmount
			if (ReplacementCalculationMethod.MethodFormula entered)
				ReplacementCalculationAmount = ReplacementCalculationMethod.MethodFormula.MethodComputeOutput
			else
				ReplacementCalculationAmount = 0

		DerivedNetUpfrontCash is a DerivedField
			type is like InternationalAmount
			initialize LocalNetUpfrontCash
			initialize LocalNetUpfrontCashEntries
			initialize LocalClearingAmountAlreadyEntered
			if((Asset.AssetLease.Lease.LeaseROUAssetAmount.TransactionAmount - Asset.AssetLease.Lease.LeaseObligation.TransactionAmount = 0)
			or Asset.AssetLease.Lease.Status.Modify or Asset.AssetLease.Lease.Status.Impairment or Asset.AssetLease.Lease.Status.LeaseAdjustments)
				return LocalNetUpfrontCash  
			else

				if (UseBookCurrencyOnLeasedAsset)
					LocalNetUpfrontCash -= (Asset.AssetLease.Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount - Asset.AssetLease.Lease.LeaseObligation.BaseAmount.EnteredCurrencyAmount)
				else
					LocalNetUpfrontCash -= (Asset.AssetLease.Lease.LeaseROUAssetAmount.TransactionAmount - Asset.AssetLease.Lease.LeaseObligation.TransactionAmount)
				if (IsPostingBook)
					if (CLRAssetTransactionsRel exist)
						LocalNetUpfrontCashEntries = sum CLRAssetTransactionsRel.TransactionAmount 
						LocalNetUpfrontCashEntries = LocalNetUpfrontCashEntries * -1
					if (LeaseAssetRel exist)
						for each LeaseAssetRel
							if (each.Asset != Asset)
								LocalLeaseAsset = each.Asset
								LocalClearingAmountAlreadyEntered += sum AllLeaseCLRTransactionsRel.TransactionAmount 
						LocalClearingAmountAlreadyEntered	= LocalClearingAmountAlreadyEntered * -1
						LocalNetUpfrontCash = LocalNetUpfrontCash + LocalClearingAmountAlreadyEntered + LocalNetUpfrontCashEntries 
					return LocalNetUpfrontCash * -1
				else
					if (IsNonPostingBook and Book entered)
						if (CLRAssetBookTransactionsRel exist)
							LocalNetUpfrontCashEntries = sum CLRAssetBookTransactionsRel.TransactionAmount 
							LocalNetUpfrontCashEntries = LocalNetUpfrontCashEntries * -1
						if (LeaseAssetRel exist)
							for each LeaseAssetRel
								if (each.Asset != Asset)
									LocalLeaseAsset = each.Asset
									LocalClearingAmountAlreadyEntered += sum AllLeaseCLRBookTransactionsRel.TransactionAmount 
						LocalClearingAmountAlreadyEntered	= LocalClearingAmountAlreadyEntered * -1
						LocalNetUpfrontCash = LocalNetUpfrontCash + LocalClearingAmountAlreadyEntered + LocalNetUpfrontCashEntries 
					return LocalNetUpfrontCash * -1

		InsuranceCalculationAmount is a DerivedField
			type is like InternationalAmount
                precision is OutputNumberOfDecimals
			initialize InsuranceCalculationAmount
			if (InsuranceCalculationMethod.MethodFormula entered)
				InsuranceCalculationAmount = InsuranceCalculationMethod.MethodFormula.MethodComputeOutput
			else
				InsuranceCalculationAmount = 0

        BookDescription is a DerivedField
            type is like Description
            restricted
            classic name is BOOK-DESC
            return Book.Description

        TotalDepreciableBasis is a DerivedField
			type is like InternationalAmount
			return (BasisLessExpense - PersonalUseValue)

		PersonalUseValue is a DerivedField
			type is like InternationalAmount
			return (Basis - (Basis * (BusinessPercent/100)))

        BookValue is a DerivedField
            type is like InternationalAmount
                precision is OutputNumberOfDecimals
            return (Basis - LifeToDateDepreciation)

		OperatingBookValue is a DerivedField
			type is like InternationalAmount
				precision is OutputNumberOfDecimals
			if (Asset.AssetLease.Lease.Status.Modify or Asset.AssetLease.Lease.Status.Impairment or Asset.AssetLease.Lease.Status.LeaseAdjustments)
				return 0
			else
				if (Asset.AssetLease.Lease.NumberOfAssets <= 1 )
					if (Book.Currency = Asset.AssetLease.Lease.BaseCurrency)
						return (Asset.AssetLease.Lease.DerivedCurrentBaseLeaseROU)
					else
					if (Book.Currency = Asset.AssetLease.Lease.Currency)
						return (Asset.AssetLease.Lease.DerivedCurrentLeaseROU)
				else
				if (Asset.AssetLease.Lease.NumberOfAssets > 1)
					return ((Basis/Asset.AssetLease.Lease.LeaseROUAssetAmount.TransactionAmount) * (Asset.AssetLease.Lease.DerivedCurrentLeaseROU))

		BookCurrencyValue is a DerivedField
            type is like InternationalAmount
                precision is OutputNumberOfDecimals
            return (DerivedAdditions - DerivedLifeToDateDepreciationThreeDecimal)

		PreliminaryCloseYearToDate is a DerivedField
			type is like InternationalAmount
			return DerivedYearToDateDepreciationThreeDecimal + DerivedCurrentPeriodDepreciation

		PreliminaryCloseLifeToDate is a DerivedField
			type is like InternationalAmount
			return DerivedLifeToDateDepreciationThreeDecimal + DerivedCurrentPeriodDepreciation

		PreliminaryCloseBookValue is a DerivedField
			type is like InternationalAmount
				precision is OutputNumberOfDecimals
			return (BookCurrencyValue - DerivedCurrentPeriodDepreciation)

		BasisReductionBookValue is a DerivedField
            type is like InternationalAmount
            return (Basis - LifeToDateDepreciation - (Basis * (AssetTaxCreditRel.BasisReductionPercentage/100)))

        SalvagePercentage is a ComputeField
            type is Decimal size 5.2
            classic name is SALVAGE-PCT
            ((SalvageValue / Basis) * 100)

		BasisLessSalvageValue is a DerivedField
            type is like InternationalAmount
                precision is OutputNumberOfDecimals
            return (Basis - SalvageValue)

		ReplacementLessSalvage is a DerivedField
			type is like InternationalAmount
                precision is OutputNumberOfDecimals
			return (ReplacementCalculationAmount - SalvageValue)

		BasisLessExpense is a DerivedField
            type is like InternationalAmount
                precision is OutputNumberOfDecimals
            return (Basis - Section179Expense)

		MethodAndConvention is a MessageField
			"<Method>-<Convention>"

        BookYearEndDate is a DerivedField
            type is Date
            restricted
            classic name is BK-YR-END-DATE
            return BookCalendarRel.YearEndDate

        BookYearBeginDate is a DerivedField
            type is Date
            restricted
            classic name is BK-YR-BEG-DATE
            return BookCalendarRel.YearBeginDate

        AssetBookCompanyBookYearEndDate is a DerivedField
            type is Date
            restricted
            return AssetBookCompanyCurrentBookCalendarRel.YearEndDate

        AssetBookCompanyBookYearBeginDate is a DerivedField
            type is Date
            restricted
            return AssetBookCompanyCurrentBookCalendarRel.YearBeginDate

        BookDepreciationPeriodsPerYear is a DerivedField
            type is Numeric size 3
            classic name is BK-PD-PER-YR
            return BookCalendarRel.DepreciationPeriodsPerYear

        BookNumberOfDepreciationPeriodsClosed is a DerivedField
            type is Numeric size 3
            classic name is BK-DEPR-PD-CLS
            return BookCalendarRel.NumberOfDepreciationPeriodsClosed

        BookPeriodCloseDate is a DerivedField
            type is Date
            restricted
            classic name is BK-PD-CLOSE-DT
            return BookCalendarRel.PeriodCloseDate

        BookCurrentPeriodDate is a DerivedField
            type is Date
            restricted
            classic name is BK-PD-CURR-DT
            return BookCalendarRel.CurrentPeriodDate

        BookLastPeriodDate is a DerivedField
            type is Date
            restricted
            return BookCalendarRel.LastPeriodDate

        BookRequiredBook is a DerivedField
            type is Boolean
            restricted
            classic name is BK-REQ
            return BookCalendarRel.RequiredBook

        BookPostingBook is a DerivedField
            type is Boolean
            restricted
            classic name is BK-POSTING
            return BookCalendarRel.PostingBook

        DerivedCreateDate is a DerivedField
            type is Date
            return CreationDate date

        CoreLedger is a DerivedField
        	type is Boolean
        	restricted
        	if (Book.Ledger = FinanceEnterpriseGroup.CoreLedger)
	        	return true
			else
				return false

        BookCurrency is a DerivedField
            type is like Currency
            restricted
            classic name is BK-CURRENCY-CD
            return Book.Currency

        BookMethodSwitch is a DerivedField
            type is Boolean
            classic name is BK-METH-SWITCH
            return Book.MethodSwitch

        BookDepreciationType is a DerivedField
            type is AlphaUpper size 1
            restricted
            classic name is BK-DEPR-TYPE
            return Book.DepreciationType

        BookTrackDepreciationHistory is a DerivedField
            type is Boolean
            restricted
            classic name is BK-HISTORY
            return Book.TrackDepreciationHistory

        AssetTagNumber is a DerivedField
            type is like TagNumber
            classic name is TAG
            return Asset.TagNumber

        AssetGroup is a DerivedField
            type is like AssetGroup
            classic name is ASSET-GRP
            return Asset.AssetGroup

        DepreciationYearToDateOverrideLabel is a ConditionalField
            type is AlphaUpper size 8
            classic name is DEPR-YTD-OVER
            if (YearToDateDepreciationOverrideEntered)
                "Override"
            else
                blank

        AssetDescription is a DerivedField
            type is like Description
            restricted
            classic name is AST-DESC
            return Asset.Description

		AssetStatus is a DerivedField
			type is like AssetStatus
			classic name is AST-STATUS
			return Asset.Status

		DerivedAssetClassification is a DerivedField
			type is like AssetClassification
			default label is "AssetClassification"
			return Asset.Classification

        AssetLocation is a DerivedField
            type is like AssetLocation
            classic name is AST-LOCATION
            return Asset.AssetLocation

        AssetDivision is a DerivedField
            type is like AssetDivision
            classic name is AST-DIVISION
            return Asset.AssetDivision

        AstType is a DerivedField
            type is AlphaUpper size 10
            return Asset.AssetType.Type

        AssetSubType is a DerivedField
            type is like AssetSubType
            classic name is AST-SUBTYPE
            return Asset.AssetType.SubType

		ReplacementMessage is a MessageField
			restricted
			"CalculatedReplacementCostIs<ReplacementCalculationAmount>"

		HighPurchaseDate is a DerivedField
			type is Date
			restricted






			return (Asset.LastAssetItemPurchaseDate)

		DigitsValue       is a DerivedField
			type is Numeric 12
 			restricted
 			LocalDigitsValue = LocalDigitsValueNumberYears
 			round LocalDigitsValue down to nearest 1
 			return LocalDigitsValue

		RoundedCurrencyAmount is a DerivedField
			type is like InternationalAmount	
    		restricted
    		if (LocalCurrencyAmount entered)
	    		RoundedCurrencyAmount	      = LocalCurrencyAmount
	    		round RoundedCurrencyAmount to nearest DerivedRoundTo
	    		return RoundedCurrencyAmount

		OutputNumberOfDecimals is a DerivedField
			type is Numeric 1
			if (Book.PostCurrency.Book)
				return Book.Currency.NumberOfDecimals
			else
				return Asset.Currency.NumberOfDecimals

		PostingCurrency is a DerivedField
			type is like FromCurrency
			if (Book.PostCurrency.Book)
				return Book.Currency
			else
				return Asset.Currency

		DerivedRoundTo is a DerivedField
    		type is Decimal 5.4
    		restricted
    		if (OutputNumberOfDecimals = 2)
    			return .01
    		else
    		if (OutputNumberOfDecimals = 0)
    			return 1
    		else
    		if (OutputNumberOfDecimals = 3)
    			return .001
    		else
    		if (OutputNumberOfDecimals = 4)
    			return .0001

		DepreciationDerivedRoundTo is a DerivedField
    		type is Decimal 5.3
    		restricted
    		if (TransactionNumberOfDecimals = 2)
    			return .01
    		else
    		if (TransactionNumberOfDecimals = 0)
    			return 1
    		else
    		if (TransactionNumberOfDecimals = 3)
    			return .001

		DerivedAdditions is a DerivedField
			type is like InternationalAmount
			return DerivedAdditionsThreeDecimal

		DerivedAdditionsZeroDecimal is a DerivedField
			type is Numeric 18
			return DerivedAdditionsThreeDecimal

		DerivedAdditionsThreeDecimal is a DerivedField
			type is Decimal	18.3
			if (Book.PostCurrency.Book)
				return (Basis)
			else
				if (Book.Currency = Asset.Currency)
	 				return (Basis)
				else
					if (BookCalendarRel.PostingBook)
						return (sum AssetAdditionDecimalTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
					else
						return (sum AssetBookAdditionTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)

        DerivedLifeToDateDepreciation is a DerivedField
			type is like InternationalAmount
			return DerivedLifeToDateDepreciationThreeDecimal

		DerivedLifeToDateDepreciationZeroDecimal is a DerivedField
			type is Numeric 18
			return DerivedLifeToDateDepreciationThreeDecimal

		DerivedLifeToDateDepreciationThreeDecimal is a DerivedField
			type is Decimal	18.3
			if (Book.PostCurrency.Book)
				return (LifeToDateDepreciation)
			else
				if (Book.Currency = Asset.Currency)
	 				return (LifeToDateDepreciation)
 				else
					return (LifeToDateDepreciation * DerivedCurrencyRate)

        DerivedYearToDateDepreciation is a DerivedField
			type is like InternationalAmount
			return DerivedYearToDateDepreciationThreeDecimal

		DerivedYearToDateDepreciationZeroDecimal is a DerivedField
			type is Numeric 18
			return DerivedYearToDateDepreciationThreeDecimal

		DerivedYearToDateDepreciationThreeDecimal is a DerivedField
			type is Decimal 18.3
			if (Book.PostCurrency.Book)
				return (YearToDateDepreciation)
			else
				if (Book.Currency = Asset.Currency)
	 				return (YearToDateDepreciation)
 				else
 					return (YearToDateDepreciation * DerivedCurrencyRate)

		DerivedCurrentPeriodDepreciation is a DerivedField
			type is like InternationalAmount
			if (Book.PostCurrency.Book)
				return (CurrentPeriodDepreciation)
			else
				if (Book.Currency = Asset.Currency)
	 				return (CurrentPeriodDepreciation)
				else
					if (BookCalendarRel.PostingBook)
						return (CurrentPeriodDepreciation * first AssetTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyRate)
					else
						return (CurrentPeriodDepreciation * first AssetBookTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyRate)

		DerivedRevaluatizationAmount is a DerivedField
			type is like InternationalAmount
			if (Book.PostCurrency.Book)
				return (LocalRevalAmortizationAmount)
			else
				if (Book.Currency = Asset.Currency)
	 				return (LocalRevalAmortizationAmount)
				else
					if (BookCalendarRel.PostingBook)
						return (LocalRevalAmortizationAmount * first AssetTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyRate)
					else
						return (LocalRevalAmortizationAmount * first AssetBookTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyRate)

		DerivedAdjustments is a DerivedField
			type is like InternationalAmount
			if (BookCalendarRel.PostingBook)
				return (sum AssetAdjustmentTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return (sum AssetBookAdjustmentTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)

		DerivedTransfers is a DerivedField
			type is like InternationalAmount
			if (BookCalendarRel.PostingBook)
				return (sum AssetTransferTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return (sum AssetBookTransferTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)

		DerivedDisposals is a DerivedField
			type is like InternationalAmount
			if (BookCalendarRel.PostingBook)
				return (sum AssetDisposalTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return (sum AssetBookDisposalTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)

		DerivedNewBookFromAdjustment is a DerivedField
			type is Boolean
			return (AssetBookAdjustmentRel.Life not entered)

		DerivedRevaluationReserve is a DerivedField
			type is like InternationalAmount
			if (BookCalendarRel.PostingBook)
				return (sum RevaluationReserveTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)
			else
				return (sum BookRevaluationReserveTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)

		DerivedRevalueLTD		is a DerivedField
			type is like InternationalAmount
			if (BookCalendarRel.PostingBook)
				return (sum RevaluationReserveTransactionsRel.TransactionAmount)
			else
				return (sum BookRevaluationReserveTransactionsRel.TransactionAmount)

		BasisLessReservedRevaluation is a DerivedField
			type is like InternationalAmount
			return (Basis - DerivedRevaluationReserve)

		BookLessReservedRevaluation is a DerivedField
			type is like InternationalAmount
			return (Basis - LifeToDateDepreciation - DerivedRevaluationReserve)

		DerivedAccumulatedImpairment is a DerivedField
			type is like InternationalAmount
			if (BookCalendarRel.PostingBook)
				return (sum AccumulatedImpairmentTransactionsRel.TransactionAmount)
			else
				return (sum BookAccumulatedImpairmentTransactionsRel.TransactionAmount)

		DerivedImpairment is a DerivedField
			type is like InternationalAmount
			if (BookCalendarRel.PostingBook)
				return (sum ImpairmentLossTransactionsRel.TransactionAmount)
			else
				return (sum BookImpairmentLossTransactionsRel.TransactionAmount)

		DerivedAmortizedImpairment is a DerivedField
			type is like InternationalAmount
			if (BookCalendarRel.PostingBook)
				return (sum AmortizedImpairmentTransactionsRel.AssetTransactionAmount.TransactionAmount)
			else
				return (sum BookAmortizedImpairmentTransactionsRel.AssetTransactionAmount.TransactionAmount)

		DerivedDBPercent is a DerivedField
			type is like BusinessPercent
			if (LocalMethod		= "125DB")
				return 1.25
			if (LocalMethod		= "150DB"
			or	LocalMethod		= "150DB20%"
			or	LocalMethod		= "150DB30%"
			or	LocalMethod		= "150DB40%"
			or	LocalMethod		= "150DB50%"
			or	LocalMethod		= "150DB60%"
			or	LocalMethod		= "150DB75%"
			or	LocalMethod		= "150DB80%")
				return 1.50
			if (LocalMethod		= "200DB20%"
			or	LocalMethod		= "200DB30%"
			or	LocalMethod		= "200DB40%"
			or	LocalMethod		= "200DB50%"
			or	LocalMethod		= "200DB60%"
			or	LocalMethod		= "200DB75%"
			or	LocalMethod		= "200DB80%"
			or	LocalMethod		= "200DB")
				return 2.00
			if (LocalMethod		= "175DB")
				return 1.75
			if (LocalMethod		= "0.30DB")
				return 0.30

		DerivedLifeInYears	is a DerivedField
			type is Numeric 3
			restricted
 			LocalDigitsValue = LifeInYears
 			round LocalDigitsValue down to nearest 1
 			LocalDigitsValue += 1
 			return LocalDigitsValue

		DerivedProjectionsCurrentYear is a DerivedField
			type is Numeric 3
			restricted
			LocalHistoryYearEndDate 	= BookYearBeginDate
			LocalHistoryYearBeginDate	= BookYearBeginDate - 1 year
			LocalHistoryYearEndDate 	= LocalHistoryYearEndDate - 1 day
			LocalProjectionsCurrentYear = 1
			while LocalHistoryYearEndDate >= InServiceDate
				LocalProjectionsCurrentYear += 1
				LocalHistoryYearEndDate	= LocalHistoryYearEndDate - 1 year
				LocalHistoryYearBeginDate = LocalHistoryYearBeginDate - 1 year
			return LocalProjectionsCurrentYear

		DerivedNumberOfYearsPriorForHM is a DerivedField
			type is Numeric 3
			restricted
			LocalHistoryYearEndDate 	= BookYearBeginDate
			LocalHistoryYearBeginDate	= BookYearBeginDate - 1 year
			LocalHistoryYearEndDate 	= LocalHistoryYearEndDate - 1 day
			DerivedNumberOfYearsPriorForHM = 1
			while LocalHistoryYearEndDate >= DepreciationStartDate
				DerivedNumberOfYearsPriorForHM += 1
				LocalHistoryYearEndDate	= LocalHistoryYearEndDate - 1 year
				LocalHistoryYearBeginDate = LocalHistoryYearBeginDate - 1 year
			return DerivedNumberOfYearsPriorForHM

		RevalueAmount is a DerivedField
			type is like InternationalAmount
			return sum AssetRevaluationsRel.RevalueAmount

		RevaluationAmortized is a DerivedField
			type is like InternationalAmount
			return (TotalAmortizationPostingEntries + TotalAmortizationBookTransactionsRel)

		TotalAmortizationPostingEntries is a DerivedField
			type is like InternationalAmount
			return (sum AmortizationTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)

		TotalAmortizationBookTransactionsRel is a DerivedField
			type is like InternationalAmount
			return (sum AmortizationBookTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)

		DerivedDisposalBasis is a DerivedField
			type is like InternationalAmount
			return (ThisInstanceRel.Basis - NewAssetBookDisposalRel.Basis)

		DerivedDisposalYearToDateDepreciation is a DerivedField
			type is like InternationalAmount
			return (ThisInstanceRel.YearToDateDepreciation	- (NewAssetBookDisposalRel.YearToDateDepreciation - NewAssetBookDisposalRel.DepreciationExpense))

		DerivedDisposalLifeToDateDepreciation is a DerivedField
			type is like InternationalAmount
			return (ThisInstanceRel.LifeToDateDepreciation - (NewAssetBookDisposalRel.LifeToDateDepreciation - NewAssetBookDisposalRel.DepreciationExpense))

		DerivedAssetImpairment is a DerivedField
			type is like AssetImpairment
			return (first AssetImpairmentBooksRel.AssetImpairment)

		ImpairmentAmount is a DerivedField
			type is like InternationalAmount
			return first ImpairmentBooksRel.ImpairmentAmount

 		ImpairmentPeriodsProcessed is a DerivedField
 			type is Decimal 7.3
			MonthsProcessed.InDeprStartDate			= first LastAssetImpairmentRel.ImpairmentDate
			MonthsProcessed.InServiceDate			= first LastAssetImpairmentRel.ImpairmentDate
			MonthsProcessed.LastPeriodEnd			= CurrentBookCalendarRel.LastPeriodDate
			MonthsProcessed.Convention				= Convention
			MonthsProcessed.InBook					= Book
			MonthsProcessed.InCompany				= Asset.Company
			MonthsProcessed.InYearEndDate			= BookYearEndDate
			MonthsProcessed.InYearBeginDate			= BookYearBeginDate
			MonthsProcessed.InPrevYearEndDate		= HistoryYearBookCalendarsRel2.YearBeginDate - 1 day
			return MonthsProcessed.ReturnNumberOfMonthsProcessed

		BeginningYearBalance is a DerivedField
			type is like InternationalAmount
			return (BookValue + YearToDateDepreciation)

		DeprBonus is a DerivedField
			type is like InternationalAmount

			if(Method = "SL"
			or Method = "200DB"
			or Method = "150DB"
			or Method =	"125DB"
			or Method = "175DB")
				return
			else
				if 	(Method = "SL30%"
				or	Method 	= "200DB30%"
				or	Method 	= "150DB30%")
					LocalDeprBonus	= Basis * 0.30
				else
					if 	(Method	= "SL40%"
					or	Method	= "200DB40%"
					or	Method 	= "150DB40%")
						LocalDeprBonus	= Basis * 0.40
					else
						if 	(Method	= "SL50%"
						or	Method	= "200DB50%"
						or	Method 	= "150DB50%")
							LocalDeprBonus	= Basis * 0.50
						else
							if 	(Method	= "SL75%"
							or	Method	= "200DB75%"
							or	Method 	= "150DB75%")
								LocalDeprBonus	= Basis * 0.75
							else
								if 	(Method = "100%BONUS")
									LocalDeprBonus	= Basis * 1
								else
									if	(Method = "SL20%"
									or	Method 	= "200DB20%"
									or	Method 	= "150DB20%")
										LocalDeprBonus	= Basis * 0.20
									else
										if	(Method = "SL60%"
										or	Method 	= "200DB60%"
										or	Method 	= "150DB60%")
											LocalDeprBonus	= Basis * 0.60
										else
											if	(Method = "SL80%"
											or	Method 	= "200DB80%"
											or	Method 	= "150DB80%")
												LocalDeprBonus	= Basis * 0.80
				return  LocalDeprBonus

		DerivedBaseDeferredRents is a DerivedField
     		type is Decimal 24.8
     			precision is Asset.AssetLease.Lease.BaseNumberOfDecimals
			return LocalEQUTransactionAmount + LocalCLRTransactionAmount + LocalASTTransactionAmount

		IncludeFullyDepreciated is a DerivedField
			type is Boolean
			if (FirstAndLastYear = "C")
				return true
			else
				return false

		DerivedCurrencyDeferredRents is a DerivedField
     		type is Decimal 24.8
     			precision is Asset.AssetLease.Lease.CurrencyNumberOfDecimals
			return LocalEQUTransactionAmount + LocalCLRTransactionAmount + LocalASTTransactionAmount

		DerivedHistoryBalance is a DerivedField
			type is like InternationalAmount
				precision is OutputNumberOfDecimals
			LocalYearEndDate = first InServiceYearEndDateRel.YearEndDate
			return (AssetBookHistoryYearEndDateRel.YearToDateDepreciation)

		FirstYearDepreciation is a DerivedField
			type is like InternationalAmount
				precision is OutputNumberOfDecimals
			if (FirstAndLastYear = "F"
			and YearEndBalance entered)
				return (Basis - YearEndBalance)

		DerivedCurrencyRate is a DerivedField
			type is Decimal size 31.15
			if (BookCalendarRel.PostingBook)
				return (first AssetAdditionDecimalTransactionsRel.AssetTransactionAmount.BaseAmount.OutputCurrencyRate)
			else
				return (first AssetBookAdditionTransactionsRel.AssetTransactionAmount.BaseAmount.OutputCurrencyRate)

		TotalDepreciationExpense is a DerivedField
			type is like InternationalAmount
			return (sum ReleasedEXPTransactionsRel.AssetTransactionAmount.BaseAmount.EnteredCurrencyAmount)

		DerivedCompany is a DerivedField
			type is Numeric 9
			restricted
			return Asset.Company

		DerivedBookDisposal is a DerivedField
			type is like Sequence
			return AssetBookDisposalRel.AssetDisposal

		DerivedTotalBaseROUReduction is a DerivedField
			type is like InternationalAmount
			LocalModificationDate 	= first ModificationInProgressRel.ModificationEffectiveDate
			LocalTotalROUReduction 	= sum LeaseBaseCurrencyPaymentPeriodBalanceNoECCRel.ROUReduction
			LocalOriginalROUReduction = first ModificationInProgressRel.OriginalROUAssetAmount.BaseAmount.EnteredCurrencyAmount
			LocalAssetPercent 		= LocalOldBasis / LocalOriginalROUReduction
			DerivedTotalBaseROUReduction	=  LocalTotalROUReduction * LocalAssetPercent
			round DerivedTotalBaseROUReduction to nearest DerivedRoundTo
			return DerivedTotalBaseROUReduction

		DerivedTotalROUReduction is a DerivedField
			type is like InternationalAmount
			LocalModificationDate   = first ModificationInProgressRel.ModificationEffectiveDate
			LocalTotalROUReduction  = sum LeaseCurrencyPaymentPeriodBalanceNoECCRel.ROUReduction
			LocalOriginalROUReduction = first ModificationInProgressRel.OriginalROUAssetAmount.TransactionAmount
			LocalAssetPercent 		= LocalOldBasis / LocalOriginalROUReduction
			DerivedTotalROUReduction = LocalTotalROUReduction * LocalAssetPercent
			round DerivedTotalROUReduction to nearest DerivedRoundTo
			return DerivedTotalROUReduction


















































		InServiceYear is a DerivedField
			type is Alpha 4
			return (InServiceDate year)

		DerivedDepreciationRate is a DerivedField
			type is like DepreciationRate
			default label is "DepreciationRate"
			if (Method.MethodPercents.MethodPercent[1] entered)
				if (YearPlacedInService > 50)
					I1 = 50
					while (I1 > 0)
						if (Method.MethodPercents.MethodPercent[I1] entered)
							return Method.MethodPercents.MethodPercent[I1]
						else
							I1 -= 1
				else
					if (Method.MethodPercents.MethodPercent[YearPlacedInService] entered)
						return Method.MethodPercents.MethodPercent[YearPlacedInService]
					else
						I1 = YearPlacedInService
						while (I1 > 0)
							if (Method.MethodPercents.MethodPercent[I1] entered)
								return Method.MethodPercents.MethodPercent[I1]
							else
								I1 -= 1
			else
				return 0

		IsInPriorYearLastPeriod is a DerivedField
			type is Boolean
			restricted
			T3 = BookCalendarRel.NumberOfPeriods
			if (HistoryCalendarsForBookCompanyRel exists)
				LocalFromDate = first HistoryCalendarsForBookCompanyRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[T3-1]
				LocalToDate   = first HistoryCalendarsForBookCompanyRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[T3]
				if(InServiceDate > LocalFromDate
				and InServiceDate <= LocalToDate)
					LocalDaysDiffMonth = LocalToDate - LocalFromDate
					LocalInServiceDiffDays = LocalToDate - InServiceDate
			else
				LocalFromDate = BookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[T3-1] - 1 year
				LocalToDate   = BookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[T3] - 1 year
				if(InServiceDate > LocalFromDate
				and InServiceDate <= LocalToDate)
					LocalDaysDiffMonth = LocalToDate - LocalFromDate
					LocalInServiceDiffDays = LocalToDate - InServiceDate

			LocalDaysDiffMonth = LocalDaysDiffMonth / 2
			if (LocalInServiceDiffDays >= (LocalDaysDiffMonth))
				return false
			else
				return true

    Conditions
        ReplacementEntered
        	restricted
        	when (ReplacementCalculationAmount > 0)


        IsPostingBook
        	restricted
        	when (PostingBookCalendarRel exists)

      	IsRequiredBook
      		restricted
      		when (RequiredBookCalendarRel exists)

        AssetBookAdjustmentExists
        	restricted
            classic name is ADJ-EXIST
            when (first AssetBookAdjustmentsRel exists)

		AccountFieldsAdjusted
			restricted
			when(UnreleasedAssetAdjustmentRel.AssetType != UnreleasedAssetAdjustmentRel.AssetAdjustmentTo.AssetType
			or UnreleasedAssetAdjustmentRel.AssetAccountingUnitGroup != UnreleasedAssetAdjustmentRel.AssetAdjustmentTo.AssetAccountingUnitGroup
			or UnreleasedAssetAdjustmentRel.AssetAccountingUnit != UnreleasedAssetAdjustmentRel.AssetAdjustmentTo.AssetAccountingUnit)

        AssetTypeAllocationExists
        	restricted
            classic name is ALLOC-EXISTS
            when (first AssetTypeAllocationsRel exists)

        IsAssetLevelDepreciation
        	restricted
            classic name is ASSET-BOOKTYPE
            when (Book.DepreciationType.AssetLevel)

		DisplayBookCurrency

			when (Book.PostCurrency = 1 
			and Asset.Currency not = Book.Currency)

		BookCurrencyOnLeasedAsset

			when (Book.PostCurrency = 0 
			and Asset.Currency not = Book.Currency
			and Book.Currency not = Asset.AssetLease.Lease.BaseCurrency)

		UseBookCurrencyOnLeasedAsset

			when (Book.PostCurrency = 0 
			and Asset.Currency not = Book.Currency
			and Book.Currency = Asset.AssetLease.Lease.BaseCurrency)

        BookEntered
        	restricted
            classic name is BOOK-EXIST
            when (Book entered)

		BookCalendarExists
			restricted
			when (BookCalendarRel exists)

        ClassDepreciationExists
        	restricted
            classic name is CLASS-EXISTS
            when (ClassDepreciationsRel exists)

		HasClassDetailRates
			when (AssetBookTypeDepreciationsRel exists)

        YearToDateDepreciationOverrideEntered
        	restricted
            classic name is DEPR-YTD-OVRRD
            when (YearToDateDepreciationOverride entered)

        AssetBookDisposalExists
        	restricted
            classic name is DSP-EXIST
            when (AssetBookDisposalRel exists)

        AssetBookHistoryExists
        	restricted
            classic name is HISTORY-EXISTS
            when (first AssetBookHistoryRel exists)

        IsNonPostingBook
        	restricted
            classic name is NON-POST-BOOK
            when (not BookCalendarRel.PostingBook)

		DisposedOriginatingAssetEntered
			when (Asset.DisposedAssetOriginatingAsset entered)

        AssetBookTransferExists
        	restricted
            classic name is TRF-EXIST
            when (first AssetBookTransfersRel exists)

 		AssetProjectionExists
 			restricted
            when (first AssetProjectionRel exists)

		DisplayAdjustmentDate
			restricted
			when (Asset.Status.Released)

		DisplayAdjustmentPostHistory
			restricted
			when (DisplayAdjustmentDate
			or (Asset.Status.PostRelease
			and Asset.AssetProcess.Adjustment))

		AssetStatusAllowsBookUpdate
			when (Asset.Status.Unreleased
			or Asset.Status.PostRelease)

		NoBookUpdateWithRegulation
			when (BookRegulationsRel exists
			and (!AssetStatusAllowsBookUpdate))

		AllowsBookUpdateWithRegulation
			when (BookRegulationsRel exists
			and (Asset.Status.Unreleased
			or Asset.Status.Released
			or Asset.Status.PostRelease)
			and (!IsDisposed))

		BookRegulationsExist
			when (BookRegulationsRel exists)

		AllowBookUpdateWithRegulation
			when (!BookEntered
			and AllowsBookUpdateWithRegulation)

		DisplayBookRegulation
			when (BookEntered
			and AllowsBookUpdateWithRegulation)

		UnreleasedPartialAssetDisposalCreated
			restricted
			when (Asset.UnreleasedPartialAssetDisposalCreated)

		UnreleasedFullAssetDisposalCreated
			restricted
			when (AssetStatusAllowsBookUpdate
			and !UnreleasedPartialAssetDisposalCreated)

		UnreleasedDisposalExists
			restricted
			when (UnreleasedDisposalRel exists
			or UnreleasedAssetDisposalRel exists)

		AdjustmentAllowed
			restricted
			when (Asset.AssetProcess not entered
			or    Asset.AssetProcess.Addition
			or    Asset.AssetProcess.Adjustment
			or    Asset.AssetProcess.Disposal
			or    Asset.AssetProcess.Transfer
			or	  Asset.AssetProcess.Impairment)

		AllowProjections
			restricted
			when (((Asset.AssetProcess.Disposal
			or    	Asset.AssetProcess.Transfer)
			and		Asset.Status.PostRelease)
			or 		(Asset.Status.Unreleased
			and 	Asset.AssetProcess.Transfer))

		DeleteAllowed
			restricted
			when (Asset.Status.Unreleased
			or    Asset.Status.PostRelease)

		UpdateAllowed
			restricted
			when (AdjustmentAllowed
			and !Asset.AssetProcess.Disposal
			and !Asset.Status.Disposed
			and !ImpairmentInProgress
			and !Asset.AssetProcess.Transfer
			and !IsDisposed)

		AllowDelete
			restricted
			when (UpdateAllowed
			and !Asset.Status.Released
			and !Asset.AssetProcess.Transfer)

		ImpairmentInProgress
			when (first LastAssetImpairmentRel.Status.PostRelease
			and first LastAssetImpairmentRel.UnReleasedTransactionsExist)

		ZeroBasisChange
			restricted
			when (Asset.Status.Unreleased
			and IsNonPostingBook
			and Basis changed
			and Basis = 0)

		NoZeroBasisChange
			restricted
			when (Asset.Status.Unreleased
			and IsNonPostingBook
			and Basis changed
			and Basis != 0)

		IsNonDepreciable
			when (Asset.AssetCategory.NonDepreciable)

		BookDeprValueChanged
			restricted
			when (Convention changed
			or InServiceDate changed)

		ResetCPCalculatedFlag
			restricted
     		when (Basis changed
     		or YearToDateDepreciation changed
     		or LifeToDateDepreciation changed
     		or FirstYearExpenseAmount changed
     		or Life changed
     		or LifeRemaining changed
     		or SalvageValue changed
     		or PersonalUseCode changed
     		or BusinessPercent changed
     		or Method changed
     		or YearPlacedInService changed
			or Convention changed
			or InServiceDate changed)

		IsSelectedByFilter	
			restricted
			when (true)



		InFilterDateRange	
			restricted
			when  (DateRange not entered
			or	  InServiceDate within DateRange)

		InPurchaseDateRange
			restricted
			when (PurchaseDateRange not entered
			or	 Asset.LastAssetItemPurchaseDate within PurchaseDateRange)

		InCreateDateRange
			restricted
			when (CreateDateRange not entered
			or	 (TransientCreateDate >= CreateDateRange.Begin
			and   TransientCreateDate <= CreateDateRange.End))

		IsCustomMethod
			restricted
			when (Method.MethodCategoryType.User
			and Method.RecordType.Compute)

		IsPercentTable
			restricted
			when (Method.MethodCategoryType.User
			and Method.RecordType.Percent)

		HasBeenRevalued
			when (RevalueBookTransactionsRel exists
			or RevalueTransactionsRel exists)

		IsAnDBMethod
			when (Method	= "125DB"
			or 	Method		= "150DB"
			or	Method		= "175DB"
			or	Method		= "200DB"
			or	Method		= "150DB30%"
			or	Method		= "150DB40%"
			or	Method		= "150DB50%"
			or	Method		= "150DB20%"
			or	Method		= "150DB60%"
			or	Method		= "150DB75%"
			or	Method		= "150DB80%"
			or	Method		= "200DB30%"
			or	Method		= "200DB40%"
			or	Method		= "200DB50%"
			or	Method		= "200DB20%"
			or	Method		= "200DB60%"
			or	Method		= "200DB75%"
			or	Method		= "200DB80%")

		IsAnSLMethod
			when (Method	= "SL"
			or	Method		= "SL20%"
			or	Method		= "SL40%"
			or	Method		= "SL30%"
			or	Method		= "SL50%"
			or	Method		= "SL60%"
			or	Method		= "SL75%"
			or	Method		= "SL80%")

		HasRevaluationReserve
			when (RevaluationReserveTransactionsRel exists
			or BookRevaluationReserveTransactionsRel exists)

		HasRevaluation
			when (AssetBookRevaluationsRel exists)

		HasImpairment
			when (AssetImpairmentBooksRel exists)

		HasImpairmentBook
			restricted
			when (ImpairmentBooksRel exists)

		HasAdjustment
			when (AssetBookAdjustmentsRel exists)

		AdjustmentsExist
			when (AssetAdjustmentsRel exists)

		ClassRateExists
			when (AssetBookTypeRel exists)

		HasTransfer
			when (AssetBookTransfersRel exists)

		HasDisposal
			when (AssetBookDisposalsRel exists)

		HasAccumulatedImpairment
			when (AccumulatedImpairmentTransactionsRel exists
			or BookAccumulatedImpairmentTransactionsRel exists)

		IsLTOLAssetWithAllocationCode

			when (Asset.AssetLease.Lease.LeaseAllocationCode entered
			and Asset.AssetLease.Lease.LeaseAllocationCodeType.DebtOrExpense)

		UseLeaseDebitAccount
			when (Asset.AssetLease.Lease.LongTermOperatingLease
			or Asset.AssetLease.Lease.LeaseClassification.Finance)

		LeaseImpairmentInProgress
			when (ImpairmentInProgressRel exists)

		LeaseAdjustmentInProgress
			when (AdjustmentInProgressRel exists)

		NeedsClearingAccountEntries
			when (Asset.AssetLease.Lease.IsLeaseWithROU
			and  Asset.AssetLease.Lease.Status.Unreleased)

		IsImpairmentBook
			when (Book.Impairment entered)

		HasRelatedImpairmentBook
			when (Book.ImpairmentBook entered)

		ActiveDepreciationBook
			when (ImpairmentBookOfOrigin not entered
			and Active)

		ImpairmentBookLifeRemaining
			when ((IsImpairmentBook
			and Asset.AssetProcess.Impairment
			and Asset.Status.PostRelease)
			and LifeRemaining entered)

		AdjustmentImpairmentBook
			when (Book.Impairment
			and Asset.AssetProcess.Impairment
			and Asset.Status.PostRelease)

		UnreleasedImpairment
			when (first LastAssetImpairmentRel.Status.Unreleased
			and	 OtherAssetImpairmentsRel exist)

		IsZeroImpairment
			when (AssetImpairmentBooksRel exist
			and (first AssetImpairmentBooksRel.ImpairmentAmount = 0))

		IsLifeRemainingZero
			when ((LifeRemaining = 0
			and AnnualDepreciation.LocalDeprLTD != AnnualDepreciation.LocalDeprYTD)
			or LifeRemaining != 0
			or (LifeRemaining = 0
			and AnnualDepreciation.LocalDeprLTD = AnnualDepreciation.LocalDeprYTD
			and (DepreciationStartDate <= BookCalendarRel.YearEndDate
			and DepreciationStartDate >= BookCalendarRel.YearBeginDate)))

		ZeroImpairmentUpdate
			when (Book.Impairment
			and IsZeroImpairment
			and first LastAssetImpairmentRel.Status.Released
			and Asset.Status.PostRelease)

		FundAccounting
			restricted
			when (Asset.FundAllocationRequired)

		SecurityGroupAllowsAccess
			restricted
			when (Asset.SecurityGroupAllowsAccess)

		FromImport
			when (Asset.AssetManagementInterfaceResult entered
			and	 Asset.Status.Unreleased)

		AssetCategoryAdjusted
			when (UnreleasedAssetAdjustmentRel.IsAssetCategoryAdjusted
			and Asset.AssetCategory.Depreciable
			and Asset.AssetProcess.Adjustment
			and YearToDateDepreciation !changed
			and LifeToDateDepreciation !changed)

		IsNotWorkInProcess
			when (!Asset.WorkInProcess)

		AssetStatusAndNotWorkInProcess
			when (AssetStatusAllowsBookUpdate
			and IsNotWorkInProcess)

		ClassDepreciationBookExists
			when (ClassDepeciationBooksRel exists)

		IsThreeDecimal
			when (Book.Currency.NumberOfDecimals = 3)

		IsTwoDecimal
			when (Book.Currency.NumberOfDecimals = 2)

		IsZeroDecimal
			when (Book.Currency.NumberOfDecimals = 0)
		IsCurrentPeriodDepreciationExist
			restricted
			when (CurrentPeriodDepreciation !=0)

		IsBasisReductionBookValue
			restricted
			when (AssetTaxCreditRel.BasisReductionPercentage entered
			and BasisReductionBookValue entered)

		PromptForClearingAmount
			when (NeedsClearingAccountEntries)

		IsTaxBook
			restricted
			when (Book.TaxBook = false)

		CheckLTD
			when (LifeToDateDepreciation not = TotalDepreciationExpense)

		ClassRegulationAndUnreleased
			restricted
			when (Asset.Status.Unreleased
			and GuidelineClassRegulationsRel exists)

		BusinessPercentOver50
			restricted
			when (BusinessPercent > 50)

		IsFirstYear
			restricted
			when (FirstAndLastYear = "F")

		IsDepreciableIntangible
			restricted
			when (DepreciableIntangible = 1)

		IsListed
			restricted
			when (Listed)

		IsSection179
		 	restricted
			when (Section179)

		IsSection179OrListed
		 	restricted
			when (Section179
			or IsListed)





		IsModifiedAcceleratedCostRecoverySystem
			restricted
			when (CostRecoverySystem.MACRS)

		IsPriorYearMACRSAsset
			when (IndianReservation	= false
			and Farming				= false
            and CostRecoverySystem 	= "MACRS")

		IsAcceleratedCostRecoverySystem
			restricted
			when (CostRecoverySystem.ACRS)

		IsListedElected
			restricted
			when (Listed
			and Section179
			and Section179Expense entered)

		IsUnlistedElected
			restricted
			when (!Listed
			and Section179
			and Section179Expense entered)

		IsUnlistedBonusAsset
			restricted
			when (BonusAmount entered
			and !Listed)

		IsUnitOfProduction
			restricted
			when (Method.RecordType.UnitsOfProduction)

		IsAmortizedIntangible
			restricted
			when (DepreciableIntangible.AmortizedIntangible)

		AssetGuidelineClassesExist
			restricted
			when (AssetGuidelineClassesRel exists)

		IsDisposed
			restricted
			when (Disposed
			or Asset.Status.Disposed)

		IsBookDisposal
			restricted
			when (Disposed
			and BookTypeAssetDisposalRel.BookDisposal)

		ReinstatementIsAvailable
			restricted
			when (Disposed
			and AssetCompanyRel.PendingYearEndCount not entered
			and AssetCompanyRel.PeriodCloseRelease != "X"
			and AssetDisposal entered
			and !FuturePartialTransferOrDisposalExists) 

		FuturePartialTransferOrDisposalExists

			when (FuturePartialTransfersRel exists
			or FuturePartialDisposalsRel exists)

		IsCurrentDisposal
			restricted
			when (AssetDisposal = Asset.LastAssetSequence)

		IsDepreciationDeviation
			restricted
			when (CurrentPeriodDepreciation entered and AssetBookPeriodHistRel.CurrentPeriodDepreciation entered
			and CurrentPeriodDepreciation != AssetBookPeriodHistRel.CurrentPeriodDepreciation)

		IsValidForActorContext
			restricted
			when (GLCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)

		CloseInProgress
			restricted
			when (AssetCompanyRel.PendingYearEndCount entered
			or AssetCompanyRel.PeriodCloseRelease = "X")

		IsNotValidForOverride
			when ((FirstAndLastYear.CompletelyDepreciated
			and YearToDateDepreciation = 0)
			or !Asset.Status.Released
			or Disposed
			or Asset.AssetCategory.NonDepreciable
			or !Active
			or Book.Impairment)

		ApprovalUpdateAllowed
			restricted
			when (UpdateAllowed
			and !Asset.ApprovalStatus.Submitted)

		IsNonBookDisposal
			restricted
			when (AssetBookDisposalRel exists
			and !Disposed
			and AssetDisposal not entered)	

    Relations
		AssetBatchUpdateResultRel
			one-to-one relation to AssetBatchUpdateResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.AssetBatchUpdateResult	= DepreciationBatchUpdateResult

    	GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode     = "AM"

    	CompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup 	= LocalGeneralLedgerCompanyGroup
				related.Company						= Asset.Company

    	GeneralLedgerCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup 	= LocalGeneralLedgerCompanyGroup
				related.Company						= Company

		GeneralLedgerCompanyGroupRel
			one-to-many relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup 	= LocalGeneralLedgerCompanyGroup


		BookGroupImpairmentBookRel
			one-to-one relation to BookGroupBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.BookGroup 					= LocalBookGroup
				related.Book						= ImpairmentBookOfOrigin

		BookGroupBookRel
			one-to-one relation to BookGroupBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.BookGroup 					= LocalBookGroup
				related.Book						= Book

		BookGroupRel
			one-to-one relation to BookGroup
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.BookGroup 					= LocalBookGroup

		AllBookGroupBookRel
			one-to-many relation to BookGroupBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.BookGroup 					= LocalBookGroup
		AssetRel
			one-to-one relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset

		LeaseAssetRel
			one-to-many relation to Asset
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.AssetLease			= Asset.AssetLease)

		AssetItemRel
			one-to-many relation to AssetItem
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset 						= Asset
		AssetBooksRel
			one-to-many relation to Book
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup

		LocalBooksRel
			one-to-one relation to Book
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.Book						= LocalBook

		ClassDepeciationBooksRel
			one-to-many relation to Book
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.DepreciationType.ClassLevel)

		AssetItemsRel
            one-to-many relation to AssetItem
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset 						= Asset

        ThisInstanceRel
        	one-to-one relation to AssetBook
        	Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset 						= Asset
                related.Book						= Book

		BookAssetsRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
                related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Book						= Book

        AssetBookAdjustmentsRel
            classic name is AMASTBKADJ
            one-to-many relation to AssetBookAdjustment
            Field Mapping uses Set2
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset 						= Asset
                related.Book  						= Book

        PendingBookAdjustmentsRel
            one-to-many relation to AssetBookAdjustment
            Field Mapping uses Set2
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset 						= Asset
                related.Book  						= Book

        AssetBookDisposalRel
            classic name is AMASTBKDSP
            one-to-one relation to AssetBookDisposal
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
                related.Asset 						= Asset
                related.Book  						= Book

        BookTypeDisposalsRel
            one-to-many relation to AssetBookDisposal
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
                related.Asset 						= Asset
                related.Book  						= Book
			Instance Selection
				where (related.BookTypeAssetDisposalRel.NotPurgedBook)	
	


		BookLedgerRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
				related.Asset						= Asset
			Instance Selection
				where (related.Book		!= Book
				and related.Book.Ledger	= Book.Ledger)

		PostingBookLedgersRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
				related.Asset						= Asset
			Instance Selection
				where (related.IsPostingBook
				and related.Book		!= Book
				and related.Book.Ledger	= Book.Ledger)

        AssetBookTransfersRel
            classic name is AMASTBKTRF
            one-to-many relation to AssetBookTransfer
            Field Mapping uses Set2
                related.Asset 						= Asset
                related.Book  						= Book

		AssetTransfersRel is an AssetTransfer set
			Instance Selection
				where (related.TransferStatus.NotReleased)

		AssetDisposalRel is an AssetDisposal set
			Instance Selection
				where (related.DisposalStatus.Unreleased)
		FuturePartialDisposalsRel is an AssetDisposal set
			Instance Selection
				where (related.AssetDisposal > AssetDisposal
				and related.AssetDisposal.FullOrPartial.Partial)
		FuturePartialTransfersRel is an AssetTransfer set
			Instance Selection
				where (related.AssetTransfer > AssetDisposal
				and related.AssetTransfer.FullOrPartial.Partial)
				








		BookTypeAssetDisposalRel
			one-to-one relation to AssetDisposal
			Field Mapping uses ByDisposalAsset
				related.FinanceEnterpriseGroup  = Asset.FinanceEnterpriseGroup
				related.DisposalAsset			= Asset
				related.Asset					= Asset
				related.AssetDisposal			= AssetDisposal


		AssetAdjustmentsRel
			one-to-many relation to AssetAdjustment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
				related.Asset						= Asset

		ReleasedAssetDisposalRel is an AssetDisposal set
			Instance Selection
				where (related.DisposalStatus.Released)

		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	= "AM"
				related.Company					= Asset.Company

		LocalCompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	= "AM"
				related.Company					= LocalCompany

        AssetBookHistoryRel
            classic name is AMBKHIST
            one-to-many relation to AssetBookHistory
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
                related.Asset 						= Asset
                related.Book  						= Book

        AssetBookHistorysRel
            one-to-many relation to AssetBookHistory
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
                related.Asset 						= Asset
                related.Book  						= Book
                related.Company						= Asset.Company

        AssetBookHistoryYearEndDateRel
            one-to-one relation to AssetBookHistory
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
                related.Asset 						= Asset
                related.Book  						= Book
                related.Company						= Asset.Company
                related.YearEndDate					= LocalYearEndDate

		NewAssetBookHistoryYearEndDateRel
            one-to-one relation to AssetBookHistory
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
                related.Asset 						= Asset
                related.Book  						= Book.ImpairmentBook
                related.Company						= Asset.Company
                related.YearEndDate					= LocalYearEndDate

		NewAssetBookHistoryLastRel
            one-to-many relation to AssetBookHistory
            Field Mapping uses Set3
                related.Asset 						= Asset
                related.Book  						= Book.ImpairmentBook
                related.Company						= Asset.Company

        AssetBookHistoryLastRel
            one-to-many relation to AssetBookHistory
            Field Mapping uses Set3

                related.Asset 						= Asset
                related.Book  						= Book
                related.Company						= Asset.Company

        AssetBookPeriodHistoryYearEndDateRel
        	one-to-one relation to AssetBookPeriodHistory
			Field Mapping uses symbolic key
				related.Company							= Asset.Company
				related.Asset							= Asset
				related.Book							= Book
				related.YearEndDate						= LocalYearEndDate
				related.AssetBookPeriodHistory.Period	= LocalCalendarPeriod
			
		NewAssetBookPeriodHistoryYearEndDateRel
        	one-to-one relation to AssetBookPeriodHistory
			Field Mapping uses symbolic key
				related.Company							= Asset.Company
				related.Asset							= Asset
				related.Book							= Book.ImpairmentBook
				related.YearEndDate						= LocalYearEndDate
				related.AssetBookPeriodHistory.Period	= LocalCalendarPeriod

		EXPAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses Set1
            	related.Company												= Asset.Company
				related.Book												= Book
				related.AssetTransactionSummary.AccountingEntity			= TranDepreciationExpenseAccount.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= TranDepreciationExpenseAccount.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= TranDepreciationExpenseAccount.GeneralLedgerChartAccount
               	related.AssetTransactionSummary.Ledger						= TranDepreciationExpenseAccount.Ledger
               	related.AssetTransactionSummary.DimensionCode				= TranDepreciationExpenseAccount.DimensionCode
               	related.AssetTransactionSummary.Project						= TranDepreciationExpenseAccount.Project
				related.YearEndDate 										= LocalYearEndDate

		ACMAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses Set1
				related.Company												= Asset.Company
				related.Book												= Book
				related.AssetTransactionSummary.AccountingEntity			= TranAccumulatedDepreciationAccount.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= TranAccumulatedDepreciationAccount.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= TranAccumulatedDepreciationAccount.GeneralLedgerChartAccount
               	related.AssetTransactionSummary.Ledger						= TranAccumulatedDepreciationAccount.Ledger
               	related.AssetTransactionSummary.DimensionCode				= TranAccumulatedDepreciationAccount.DimensionCode
               	related.AssetTransactionSummary.Project						= TranAccumulatedDepreciationAccount.Project
				related.YearEndDate 										= LocalYearEndDate

		IMAAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses Set1
            	related.Company												= Asset.Company
				related.Book												= Book.ImpairmentBook
				related.AssetTransactionSummary.AccountingEntity			= TranImpairmentAmortization.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= TranImpairmentAmortization.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= TranImpairmentAmortization.GeneralLedgerChartAccount
               	related.AssetTransactionSummary.Ledger						= TranImpairmentAmortization.Ledger
               	related.AssetTransactionSummary.DimensionCode				= TranImpairmentAmortization.DimensionCode
               	related.AssetTransactionSummary.Project						= TranImpairmentAmortization.Project
				related.YearEndDate 										= LocalYearEndDate

		IMTAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses Set1
				related.Company												= Asset.Company
				related.Book												= Book.ImpairmentBook
				related.AssetTransactionSummary.AccountingEntity			= TranAccumulatedImpairmentLoss.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= TranAccumulatedImpairmentLoss.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= TranAccumulatedImpairmentLoss.GeneralLedgerChartAccount
               	related.AssetTransactionSummary.Ledger						= TranAccumulatedImpairmentLoss.Ledger
               	related.AssetTransactionSummary.DimensionCode				= TranAccumulatedImpairmentLoss.DimensionCode
               	related.AssetTransactionSummary.Project						= TranAccumulatedImpairmentLoss.Project
				related.YearEndDate 										= LocalYearEndDate

        RRAAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses Set1
            	related.Company												= Asset.Company
				related.Book												= Book
				related.AssetTransactionSummary.AccountingEntity			= TranRevalueReserve.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= TranRevalueReserve.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= TranRevalueReserve.GeneralLedgerChartAccount
               	related.AssetTransactionSummary.Ledger						= TranRevalueReserve.Ledger
               	related.AssetTransactionSummary.DimensionCode				= TranRevalueReserve.DimensionCode
               	related.AssetTransactionSummary.Project						= TranRevalueReserve.Project
				related.YearEndDate 										= LocalYearEndDate

		RVAAssetTransactionSummaryRel
			one-to-one relation to AssetTransactionSummary
			Field Mapping uses Set1
				related.Company												= Asset.Company
				related.Book												= Book
				related.AssetTransactionSummary.AccountingEntity			= TranRevalueAmortization.ToAccountingEntity
                related.AssetTransactionSummary.AccountingUnit				= TranRevalueAmortization.AccountingUnit
                related.AssetTransactionSummary.GeneralLedgerChartAccount	= TranRevalueAmortization.GeneralLedgerChartAccount
               	related.AssetTransactionSummary.Ledger						= TranRevalueAmortization.Ledger
               	related.AssetTransactionSummary.DimensionCode				= TranRevalueAmortization.DimensionCode
               	related.AssetTransactionSummary.Project						= TranRevalueAmortization.Project
				related.YearEndDate 										= LocalYearEndDate

		AssetBookPeriodHistoryRel
            classic name is AMBKHISTX
            one-to-many relation to AssetBookPeriodHistory
            Field Mapping uses symbolic key
                related.Company 					= Asset.Company

      	AssetCompanyCalendarsRel 
            classic name is AMCALENDAR
            one-to-many relation to BookCalendar
            Field Mapping uses Set4
                related.Company 					= Asset.Company

		AssetCompanyCloseBookCalendarsRel
            one-to-many relation to BookCalendar
            Field Mapping uses Set4
                related.Company 				= LocalCompany
			Instance Selection
				where (related.CloseBook		= 0
				and related.PostingBook			= true)

        BookCalendarRel
            classic name is AMCALENDAR
            one-to-one relation to BookCalendar
            Field Mapping uses Set5
                related.Book    					= Book
                related.Company 					= Asset.Company

        CompanyBookCalendarRel
            one-to-one relation to BookCalendar
            Field Mapping uses Set5
                related.Book    					= Book
                related.Company 					= Company

        LocalBookCalenarRel
        	one-to-one relation to BookCalendar
            Field Mapping uses Set5
                related.Book    					= LocalBook
                related.Company 					= LocalCompany

		HistoryCalendarForInServiceDateRel
            one-to-many relation to BookCalendar
            Field Mapping uses ByBeginDateDescending
                related.Book    					= Book
                related.Company 					= Asset.Company
			Instance Selection
				where (related.YearBeginDate <= InServiceDate)

		FutureCalendarForInServiceDateRel
            one-to-many relation to BookCalendar
            Field Mapping uses Set2
                related.Book    					= Book
                related.Company 					= Asset.Company
			Instance Selection
				where (related.YearEndDate >= InServiceDate)

		HistoryYearBookCalendarsRel2
			one-to-many relation to BookCalendar
			Field Mapping uses Set2
				related.Book 							= Book
				related.Company 			 			= Asset.Company
			Instance Selection
				where (related.YearBeginDate <= InServiceDate
				and related.YearEndDate >= InServiceDate)

        ClassDepreciationsRel
            classic name is AMCLASSDEP
            one-to-many relation to ClassDepreciation
            Field Mapping uses Set2
                related.Company 					= Asset.Company
                related.Book    					= Book
            Instance Selection
                where (related.AssetType.Type = Asset.AssetType.Type
                and   related.AssetType.SubType = Asset.AssetType.SubType)

        AssetBookTypeRel
        	one-to-one relation to AssetBookType
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
        		related.Book						= Book
	            related.AssetBookType				= Asset.AssetType

		AssetBookTypeDepreciationsRel
			one-to-many relation to AssetBookTypeDepreciation
			Field Mapping uses symbolic key
        		related.Company						= Asset.Company
        		related.Book						= Book
	            related.AssetType					= Asset.AssetType

        AssetTypeAllocationsRel
            classic name is AMTYPALLOC
            one-to-many relation to AssetTypeAllocation
            Field Mapping uses symbolic key
                related.Company 					= Asset.Company
            Instance Selection
                where (related.AssetType.Type = Asset.AssetType.Type
                and   related.AssetType.SubType = Asset.AssetType.SubType)

		AssetTypeAllocationRel
            one-to-many relation to AssetTypeAllocation
            Field Mapping uses Set2
                related.Company 					= Asset.Company
                related.AssetType.Type 				= Asset.AssetType.Type
                related.AssetType.SubType 			= Asset.AssetType.SubType
            Instance Selection
                where (related.Status.Released
                and related.AssetTypeAllocation.StartDate <= current corporate date
                and (related.EndDate						>= current corporate date
                or	related.EndDate not entered))

		AssetTypeAllocationExistsRel
			one-to-many relation to AssetTypeAllocation
            Field Mapping uses Set2
                related.Company 					= Asset.Company
            Instance Selection
                where (related.Status.Released)

        AssetTypeAllocationDetailsRel
            one-to-many relation to AssetTypeAllocationDetail
            Field Mapping uses symbolic key
                related.Company 						= Asset.Company
                related.AssetType						= Asset.AssetType
                related.AssetTypeAllocation.StartDate	= LocalAllocStartDate
              	related.AssetTypeAllocation.SequenceNumber	= LocalAllocSequence

        AssetBookTransactionsRel
            classic name is AMBKTRANS
            one-to-many relation to AssetBookTransaction
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset   					= Asset
                related.Book    					= Book
                related.Company 					= Asset.Company

		AssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company

        ShortTermLiabilityBookTransactionsRel
            one-to-many relation to AssetBookTransaction
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset   					= LocalLiabilityAsset
                related.Book    					= Book
                related.Company 					= Asset.Company
			Instance Selection
				where (related.AssetAccountType.ShortTermLiablity)

		ShortTermLiabilityTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= LocalLiabilityAsset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.AssetAccountType.ShortTermLiablity)

        LongTermLiabilityBookTransactionsRel
            one-to-many relation to AssetBookTransaction
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset   					= LocalLiabilityAsset
                related.Book    					= Book
                related.Company 					= Asset.Company
			Instance Selection
				where (related.AssetAccountType.LongTermLiablity)

		LongTermLiabilityTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= LocalLiabilityAsset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.AssetAccountType.LongTermLiablity)

        ReleasedASTBookTransactionsRel
            classic name is AMBKTRANS
            one-to-many relation using AssetBookTransactionsRel
            Instance Selection
            	where (related.AssetAccountType.Asset
            	and  related.TransactionStatus.History)

        ReleasedAssetTransactionsRel
            classic name is AMTRANS
            one-to-many relation to AssetTransaction
            Field Mapping uses Set1
                related.Asset                       = Asset
                related.TransactionStatus			= "R"
                related.Company                     = Asset.Company
                related.Book                        = Book

        ASTAssetTransactionsRel
        	one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset.DisposedAsset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.AssetAccountType.Asset)

		ASTAssetBookTransactionRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset.DisposedAsset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.AssetAccountType.Asset)

        ReleasedASTAssetTransactionsRel
            classic name is AMTRANS
            one-to-many relation using ReleasedAssetTransactionsRel
            Instance Selection
            	where (related.AssetAccountType.Asset)

        ReleasedIMLTransactionsRel
            classic name is AMTRANS
            one-to-many relation using ReleasedAssetTransactionsRel
            Instance Selection
            	where (related.AssetAccountType.ImpairmentLoss)

        ReleasedIMLBookTransactionsRel
            classic name is AMBKTRANS
            one-to-many relation using AssetBookTransactionsRel
            Instance Selection
            	where (related.AssetAccountType.ImpairmentLoss
            	and  related.TransactionStatus.History)

		UnreleasedASTTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.Asset)

		UnreleasedSTLTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.ShortTermLiablity)

		ReleasedSTLTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where ((related.TransactionStatus.Released
				or related.TransactionStatus.History)
				and related.AssetAccountType.ShortTermLiablity)

		UnreleasedLTLTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.LongTermLiablity)

		ReleasedLTLTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where ((related.TransactionStatus.Released
				or related.TransactionStatus.History)
				and related.AssetAccountType.LongTermLiablity)


		UnreleasedIMLTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.ImpairmentLoss)

		UnreleasedACMTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and	related.AssetAccountType.AccumulatedDepreciation)

		UnreleasedEXPTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and	related.AssetAccountType.DepreciationExpense)

		UnreleasedIMLBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.ImpairmentLoss)

		UnreleasedLIMTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.LeaseImpairment)

		UnreleasedLADTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.LeaseAdjustment)

		UnreleasedCLRTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.Clearing)

		UnreleasedDEBTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.LeaseDebt)

		AllLeaseCLRTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.Company						= Asset.Company
				related.Book						= Book
				related.Asset						= LocalLeaseAsset
				related.AssetAccountType			= "CLR"




		AllLeaseCLRBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Company						= Asset.Company
				related.Book						= Book
				related.Asset						= LocalLeaseAsset
				related.AssetAccountType			= "CLR"

		CLRAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.AssetAccountType.Clearing
				and    related.AssetLease = Asset.AssetLease)

		CLRAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.AssetAccountType.Clearing
				and    related.AssetLease = Asset.AssetLease)

		UnreleasedLIMBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.LeaseImpairment)

		UnreleasedLADBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.LeaseAdjustment)

		UnreleasedSTLBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.ShortTermLiablity)

		ReleasedSTLBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where ((related.TransactionStatus.Released
				or related.TransactionStatus.History)
				and related.AssetAccountType.ShortTermLiablity)


		UnreleasedLTLBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.LongTermLiablity)

		ReleasedLTLBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where ((related.TransactionStatus.Released
				or related.TransactionStatus.History)
				and related.AssetAccountType.LongTermLiablity)

		UnreleasedASTBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.Asset)

		UnreleasedCLRBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.Clearing)

		UnreleasedDEBBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and related.AssetAccountType.LeaseDebt)

		UnreleasedACMBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and	related.AssetAccountType.AccumulatedDepreciation)

		UnreleasedEXPBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and	related.AssetAccountType.DepreciationExpense)

		ReleasedEXPTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Released
				and	related.AssetAccountType.DepreciationExpense)

		UnreleasedIMTTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and	related.AssetAccountType.AccumulatedImpairmentLoss)

		UnreleasedIMTBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.TransactionStatus.Unreleased
				and	related.AssetAccountType.AccumulatedImpairmentLoss)

		CurrentBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company						= Asset.Company
				related.Book						= Book

		NewCurrentBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company						= Asset.Company
				related.Book						= Book.ImpairmentBook

		AssetBookCompanyCurrentBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company						= Company
				related.Book						= Book

		LocalCurrentBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company						= LocalCompany
				related.Book						= LocalBook

		InServiceYearEndDateRel
			one-to-many relation to BookCalendar
       		Field Mapping uses ByBeginDateDescending
            	related.Book			= Book
                related.Company			= Asset.Company
                related.YearBeginDate 	<= InServiceDate

		FutureBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses ByCompanyBookStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Company						= Asset.Company
				related.Book						= Book
				related.CalendarStatus				= "F"

		PostingBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses CompanyCurrentPostingBook
				related.Company						= Asset.Company
				related.PostingBook					= true
				related.Book						= Book

		RequiredBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set6
				related.Company						= Asset.Company
				related.Book						= Book

		NewAssetBookRel
			one-to-one relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
				related.Asset						= Asset.DisposedAsset
				related.Book						= Book

        NewAssetBookDisposalRel
            one-to-one relation to AssetBookDisposal
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
                related.Asset 						= Asset.DisposedAsset
                related.Book  						= Book

        FromAssetBookDisposalRel
            one-to-many relation to AssetBookDisposal
            Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= Asset.FinanceEnterpriseGroup
                related.Asset 						= Asset
                related.Book  						= Book
			Instance Selection
				where (related.AssetDisposal		= Asset.LastAssetSequence)

		AssetControlTransactionRel
			one-to-one relation to AssetControlTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset

		UnreleasedAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.AssetBookTransaction.TransactionStatus.Unreleased)

		FullTransferUnreleasedAssetBookTransactionsRel 
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset

			Instance Selection
				where (related.AssetBookTransaction.TransactionStatus.Unreleased)

		UnreleasedDisposalAssetBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset.DisposedAsset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.AssetBookTransaction.TransactionStatus.Unreleased)

		UnreleasedTransactionsForAllBooksRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
			Instance Selection
				where (related.AssetTransaction.TransactionStatus.Unreleased)

		UnreleasedBookTransactionsForAllBooksRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
			Instance Selection
				where (related.AssetBookTransaction.TransactionStatus.Unreleased)

		UnreleasedAssetTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.AssetTransaction.TransactionStatus.Unreleased)

		AssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup

		MemoAssetTransactionRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.AssetTransaction.TransactionStatus.Memo)

		UnreleasedAssetAdjustmentRel
			one-to-one relation to AssetAdjustment
			Field Mapping uses Set7
				related.Asset						= Asset

		UnreleasedAssetImpairmentRel
			one-to-one relation to AssetImpairment
			Field Mapping uses Set7
				related.Asset						= Asset

		UnreleasedAssetTransferRel
			one-to-one relation to AssetTransfer
			Field Mapping uses Set7
				related.Asset						= Asset
				related.AssetTransfer				= Asset.LastAssetSequence

		UnreleasedAssetDisposalRel
			one-to-one relation to AssetDisposal
			Field Mapping uses Set7
				related.Asset						= Asset
				related.AssetDisposal				= Asset.LastAssetSequence

		UnreleasedDisposalRel
			one-to-many relation to AssetDisposal
			Field Mapping uses ByDisposalAsset
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.DisposalAsset 			= Asset
			Instance Selection
				where (related.DisposalStatus.Unreleased)

		AssetRevaluationsRel
			one-to-many relation to AssetRevaluation
			Field Mapping uses symbolic key

		AssetImpairmentBooksRel 
			one-to-many relation to AssetImpairmentBook
			Field Mapping uses ByAssetImpairmentBook
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.ImpairmentBook				= Book

		ImpairmentBooksRel 
			one-to-many relation to AssetImpairmentBook
			Field Mapping uses ByAssetBook
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book

		AssetImpairmentRel 
			one-to-many relation to AssetImpairmentBook
			Field Mapping uses ByBookAsset
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Book						= Book
				related.Asset						= Asset

		LastAssetImpairmentRel
			one-to-many relation to AssetImpairment
			Field Mapping uses ByAssetImpairmentDescending
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset

		AssetBookAdjustmentRel
			one-to-one relation to AssetBookAdjustment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.AssetAdjustment				= UnreleasedAssetAdjustmentRel.AssetAdjustment
				related.Book						= Book

		PersonalUseHistoryRel
			one-to-many relation to PersonalUseHistory
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book

		ClassDepreciationRel
			one-to-many relation to ClassDepreciation
			Field Mapping uses symbolic key
				related.Company							= Asset.Company
				related.AssetType						= Asset.AssetType
				related.Book							= Book
			Instance Selection
				where (related.ClassDepreciation.YearEndDate = blank
				and related.ClassDepreciation.Period = blank)

		ClassDepreciationAssetRel
			one-to-many relation to ClassDepreciation
			Field Mapping uses symbolic key
				related.Company							= Asset.Company
				related.AssetType						= Asset.AssetType
				related.Book							= Book


		ClassDepreciationExpenseRel
			one-to-many relation to ClassDepreciation
			Field Mapping uses symbolic key
				related.Company							= Asset.Company
				related.AssetType						= Asset.AssetType
				related.Book							= Book

		ClassDepreciationPeriodRel
			one-to-many relation to ClassDepreciation
			Field Mapping uses Set4
				related.Company							= Asset.Company
				related.Book							= Book
				related.ClassDepreciation.YearEndDate	= LocalYearEndDate
				related.ClassDepreciation.Period		= CurrentBookCalendarRel.CurrentPeriod
				related.AssetType						= Asset.AssetType


		ClassAccumulatedDepreciationRel
			one-to-many relation to ClassDepreciation
			Field Mapping uses symbolic key
				related.Company							= Asset.Company
				related.AssetType						= Asset.AssetType
				related.Book							= Book


		UnreleasedAssetReinstatementRel
			one-to-many relation to AssetReinstatement
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
			Instance Selection
				where (related.DisposalStatus.Unreleased)

		BookRel
			one-to-one relation to Book
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Book						= Book

		MethodRel
			one-to-one relation to Method
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Method						= LocalMethod

		LimitCodeRel
			one-to-many relation to PersonalUseCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Book						= Book

		PersonalUseCodeRel
			one-to-many relation to PersonalUseCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Book						= Book
				related.PersonalUseCode				= PersonalUseCode
				related.EffectiveDate              <= InServiceDate

		RegulationPersonalUseCodeRel
			one-to-many relation to PersonalUseCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Book						= Book
				related.PersonalUseCode				= GuidelineClassRegulationsRel.PersonalUseCode
				related.EffectiveDate              <= InServiceDate
		AssetProjectionRel
			one-to-many relation to AssetProjection
			Field Mapping uses symbolic key
			Instance Selection
				where (related.Actor	= actor
				and related.Book		= Book
				and related.Asset		= Asset)

		RequiredCurrentBookCalendarsRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set6
				related.Company						= Asset.Company

		AssetCompanyRel
			one-to-one relation to AssetCompany
			Field Mapping uses symbolic key
				related.Company						= Asset.Company

		LocalCompanyRel
			one-to-one relation to AssetCompany
			Field Mapping uses symbolic key
				related.Company						= LocalCompany

		PeriodOfPerformanceDatesRel
			one-to-one relation to ProjectPeriodOfPerformance
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Project							= LocalProject
				related.GeneralLedgerSystemCode			= "AM"

		RevalueTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
                related.Company                     = Asset.Company
				related.Book						= Book
				related.Asset						= Asset
			Instance Selection
				where (related.AssetProcess.Revalue)

		RevalueBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup		= Book.FinanceEnterpriseGroup
                related.Company                     = Asset.Company
				related.Book						= Book
				related.Asset						= Asset
			Instance Selection
				where (related.AssetProcess.Revalue)

		DepreciationMethodsRel
			one-to-many relation to Method
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.MethodType.Depreciation)

		InsuranceMethodsRel
			one-to-many relation to Method
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.MethodType.Insurance)

		ReplacementMethodsRel
			one-to-many relation to Method
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.MethodType.Replacement)

		AssetAdditionTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "AST"
			Instance Selection
				where (related.TransactionStatus = "R"
				or related.TransactionStatus 	 = "H")

		AssetTransferTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "TRF"
			Instance Selection
				where (related.TransactionStatus = "R"
				or related.TransactionStatus 	 = "H")

		AssetDepreciationTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "EXP"
			Instance Selection
				where (related.TransactionStatus = "R"
				or related.TransactionStatus 	 = "H")

		CYDepreciationTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "EXP"
			Instance Selection
				where (related.PostingDate >= CurrentBookCalendarRel.YearBeginDate
				and related.PostingDate <= CurrentBookCalendarRel.YearEndDate)  

		BookCYDepreciationTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "EXP"
			Instance Selection
				where (related.PostingDate >= CurrentBookCalendarRel.YearBeginDate
				and related.PostingDate <= CurrentBookCalendarRel.YearEndDate)

		DepreciationExpenseTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "EXP"
			Instance Selection
				where (related.TransactionStatus = "R"
				or related.TransactionStatus 	 = "H")

		AssetDisposalTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "DSP"
			Instance Selection
				where (related.TransactionStatus = "R"
				or related.TransactionStatus 	 = "H")

		AssetAdjustmentTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "ADJ"
			Instance Selection
				where (related.TransactionStatus = "R"
				or related.TransactionStatus 	 = "H")

		AssetBookAdditionTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "AST"

		AssetBookAdjustmentTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "ADJ"

		AssetBookDisposalTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "DSP"

		AssetBookTransferTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "TRF"

		AssetBookDepreciationTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "EXP"

		CYBookDepreciationTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "EXP"
			Instance Selection
				where (related.TransactionDate >= BookYearBeginDate
				and related.TransactionDate <= BookYearEndDate)

 		BookDepreciationExpenseTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "EXP"

		AmortizationTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Asset						= Asset
				related.Book						= Book
				related.Company						= Asset.Company
			Instance Selection
				where (related.AssetAccountType = "RVA")

		CYIMADepreciationTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
              	related.Asset				= Asset
               	related.Book				= Book
			Instance Selection
				where (related.AssetAccountType.ImpairmentAmortization
				and related.PostingDate >= CurrentBookCalendarRel.YearBeginDate
				and related.PostingDate <= CurrentBookCalendarRel.YearEndDate)

		BookCYIMADepreciationTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
               	related.Asset					= Asset
               	related.Book					= Book
			Instance Selection
				where (related.AssetAccountType.ImpairmentAmortization
				and related.PostingDate >= CurrentBookCalendarRel.YearBeginDate
				and related.PostingDate <= CurrentBookCalendarRel.YearEndDate)

		LocalAssetTransactionsRel
			one-to-one relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
              	related.Asset					= Asset
               	related.Book					= Book
               	related.Company					= Asset.Company
				related.AssetTransaction		= LocalTransaction

		LocalAssetBookTransactionsRel
			one-to-one relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
              	related.Asset					= Asset
               	related.Book					= Book
               	related.Company					= Asset.Company
				related.AssetBookTransaction	= LocalBookTransaction

		AmortizationBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "RVA"

        RevaluationReserveTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "RRA"
			Instance Selection
				where (related.TransactionStatus = "R"
				or related.TransactionStatus 	 = "H")

       	BookRevaluationReserveTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "RRA"

        AccumulatedImpairmentTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "IMT"
			Instance Selection
				where (related.TransactionStatus = "R"
				or related.TransactionStatus 	 = "H")

       	BookAccumulatedImpairmentTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "IMT"

        ImpairmentLossTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "IML"
			Instance Selection
				where (related.TransactionStatus = "R"
				or related.TransactionStatus 	 = "H")

       	BookImpairmentLossTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "IML"
            Instance Selection
				where (related.TransactionStatus = "R"
				or related.TransactionStatus 	 = "H")

        AmortizedImpairmentTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "IMA"
			Instance Selection
				where (related.TransactionStatus = "R"
				or related.TransactionStatus 	 = "H")

		BookAmortizedImpairmentTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup	= Book.FinanceEnterpriseGroup
              	related.Company					= Asset.Company
               	related.Book					= Book
               	related.Asset					= Asset
                related.AssetAccountType		= "IMA"








		ImpairmentAssetBookRel
			one-to-one relation to AssetBook
        	Field Mapping uses symbolic key
            	related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
                related.Asset 						= Asset
                related.Book						= Book.ImpairmentBook

		AssetImpairmentBookRel
			one-to-many relation to AssetImpairmentBook
			Field Mapping uses ByBookAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Book					= Book
				related.Asset					= Asset

		ActiveImpairmentBookRel
			one-to-many relation to AssetImpairmentBook
			Field Mapping uses ByBookAsset
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Book					= Book
				related.Asset					= Asset
			Instance Selection
				where (related.IsActiveImpairment
				and related.ImpairmentAmount entered)


		LeaseAllocationCodeDetailsRel
			one-to-many relation to LeaseAllocationCodeDetail
            Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
                where (related.LeaseAllocationCode 	= Asset.AssetLease.Lease.LeaseAllocationCode)

		OtherAssetImpairmentsRel
       		one-to-many relation to AssetImpairment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
			Instance Selection
				where (related.AssetImpairment	!= DerivedAssetImpairment)

		AssetBookPurgeRel
			one-to-many relation to AssetBook
			Field Mapping uses Set2
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
		      	related.Book						= LocalBook
		    Instance Selection
		    	include deleted records

		CurrExchangeRateRel
			one-to-many relation to CurrExchangeRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		 					   = Asset.FinanceEnterpriseGroup
				related.CurrencyTable 									   = LocalCurrencyTable
				related.CurrExchangeRate.CurrencyRelationship.FromCurrency = LocalFromCurrency
				related.CurrExchangeRate.CurrencyRelationship.ToCurrency   = LocalBaseAmount.ToCurrency
			Instance Selection
				where (related.ExchangeDate <= TransientExchangeDate)

        GeneralLedgerCompanyRel
            one-to-one relation to GeneralLedgerCompany
            required
            Field Mapping uses symbolic key
                related.Company = Asset.Company

		NewAssetItemFundsRel
			one-to-many relation to AssetItemFund
			Field Mapping uses ByAssetFundItem
				related.Asset					= Asset
				related.RecordType				= 0
			Instance Selection
				where (related.NewAssetItemFund)

		AssetFundsRel
			one-to-many relation to AssetFund
			Field Mapping uses ByAssetFund
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.RecordType				= 0

		UnreleasedAssetBookAdjustmentRel	
			one-to-one relation to AssetBookAdjustment
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetAdjustment			= UnreleasedAssetAdjustmentRel.AssetAdjustment
				related.Book					= Book
		AssetBookRevaluationsRel
			one-to-many relation to AssetBookRevaluation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.Book					= Book

		AssetBookDisposalsRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses Set2
				related.Book					= Book
			Instance Selection
				where (related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				and related.DerivedDisposedAsset = Asset)

		LastFullBookDisposalsRel
			one-to-many relation to AssetBookDisposal
			Field Mapping uses ByAssetDisposal
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Asset					= Asset
				related.AssetDisposal			= Asset.LastAssetSequence











		AssetTaxCreditRel
			one-to-one relation to AssetTaxCreditTable
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AssetTaxCreditTable				= AssetTaxCreditTable

		ImpairmentInProgressRel
			one-to-many relation to LeaseImpairment
			Field Mapping uses symbolic key
				related.Company 		= Asset.Company
				related.Lease			= Asset.AssetLease.Lease
				related.Vendor			= Asset.AssetLease.Lease.Lessor
			Instance Selection
				where (related.Status.Unreleased)

		AdjustmentInProgressRel
			one-to-many relation to LeaseAdjustment
			Field Mapping uses symbolic key
				related.Company 		= Asset.Company
				related.Lease			= Asset.AssetLease.Lease
				related.Vendor			= Asset.AssetLease.Lease.Lessor
			Instance Selection
				where (related.Status.Unreleased)

		UnreleasedLeaseRenewalsRel
			one-to-many relation to Lease
			Field Mapping uses ByVendorCompany
				related.Lessor					= Asset.AssetLease.Lease.Lessor
				related.Company					= Asset.AssetLease.Lease.Company
			Instance Selection
				where (related.OriginalLease	= Asset.AssetLease.Lease
				and    related.Status			= "Unreleased")

		GuidelineClassRegulationsRel
			one-to-many relation to AssetGuidelineClassRegulation
			Field Mapping uses ByEffectiveDate
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetGuidelineClass		= Asset.AssetGuidelineClass
                related.BookRegulation          = BookRegulation
			Instance Selection
				where (related.EffectiveDate <= InServiceDate
				and related.Active = true)

		AssetGuidelineClassRegulationsRel
			one-to-many relation to AssetGuidelineClassRegulation
			Field Mapping uses ByEffectiveDate
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetGuidelineClass		= Asset.AssetGuidelineClass
                related.BookRegulation          = BookRegulation
			Instance Selection
				where (related.Active = true)

		LocalClassRegulationsRel
			one-to-many relation to AssetGuidelineClassRegulation
			Field Mapping uses ByEffectiveDate
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetGuidelineClass		= Asset.AssetGuidelineClass
                related.BookRegulation          = LocalBookRegulation
			Instance Selection
				where (related.EffectiveDate <= LocalInServiceDate
				and related.Active = true)

		BookRegulationsRel
			one-to-many relation to BookRegulation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
		AssetGuidelineClassesRel
			one-to-many relation to AssetGuidelineClass
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup

		AssetAdditionDecimalTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
              	related.Company				= Asset.Company
               	related.Book				= Book
               	related.Asset				= Asset
                related.AssetAccountType	= "AST"

        LeasePaymentBalancesRel
            one-to-many relation to LeasePaymentBalance
            Field Mapping uses Set2
                related.Company = Asset.Company
                related.Lease   = Asset.AssetLease.Lease
				related.Vendor  = Asset.AssetLease.Lease.Lessor
            	related.LeasePaymentBalance.ExecutoryCostCode = blank

        LeaseCurrencyPaymentBalancesRel
            one-to-many relation to LeaseCurrencyPaymentBalance
            Field Mapping uses symbolic key
                related.Company = Asset.Company
                related.Lease   = Asset.AssetLease.Lease
				related.Vendor  = Asset.AssetLease.Lease.Lessor
			Instance Selection
				where (related.LeasePaymentBalance.ExecutoryCostCode = blank)

		GLCompanyRel
            one-to-one relation to GeneralLedgerCompany
            required
            Field Mapping uses symbolic key
                related.Company = DerivedCompany

		AssetBookPeriodHistRel
		    one-to-one relation to AssetBookPeriodHistory
		    Field Mapping uses symbolic key
		        related.Company                         = Asset.Company
		        related.Asset                           = Asset
		        related.Book                            = Book
		        related.YearEndDate                     = BookYearEndDate
		        related.AssetBookPeriodHistory.Period   = BookCalendarRel.NumberOfPeriodCloseRuns

        LeaseBaseCurrencyPaymentPeriodBalanceNoECCRel
            one-to-many relation to LeasePaymentPeriodBalance
            Field Mapping uses Set3
                related.Company = Asset.Company
                related.Lease   = Asset.AssetLease.Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered
				and    related.PaymentDueDate < LocalModificationDate)

        LeaseCurrencyPaymentPeriodBalanceNoECCRel
            one-to-many relation to LeaseCurrencyPaymentPeriodBalance
            Field Mapping uses Set3
                related.Company = Asset.Company
                related.Lease   = Asset.AssetLease.Lease
            Instance Selection
            	where (related.LeasePaymentBalance.ExecutoryCostCode not entered
				and    related.PaymentDueDate < LocalModificationDate)

		ModificationInProgressRel
			one-to-many relation to LeaseModification
			Field Mapping uses symbolic key
				related.Company 		   = Asset.Company
				related.Lease			   = Asset.AssetLease.Lease
				related.Vendor			   = Asset.AssetLease.Lease.Lessor
			Instance Selection
				where (related.Status.Unreleased)

		HistoryCalendarsForBookCompanyRel
			one-to-many relation to BookCalendar
			Field Mapping uses Set2
				related.Book 							= Book
				related.Company 			 			= Asset.Company
			Instance Selection
				where (related.IsHistory)

		PersonalUseHistoryYrEndDateRel
			one-to-one relation to PersonalUseHistory
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Asset							= Asset
				related.Book							= Book
				related.PersonalUseHistory.YearEndDate	= LocalYearEndDate

    Sets

		ByDepreciationBatchUpdateResult
			Sort Order
				FinanceEnterpriseGroup
				DepreciationBatchUpdateResult
				Book
				Asset

        Set2
            indexed
            Sort Order
                FinanceEnterpriseGroup
                Book
                Asset

      	Set3
            indexed
            Sort Order
                FinanceEnterpriseGroup
                Convention
                Asset
                Book

        ByAssetManagementInterfaceResult
            indexed
            Sort Order
				FinanceEnterpriseGroup
				AssetManagementInterfaceResult
				Asset
				Book

		ByBook
			duplicates
			Sort Order
				AssetBook.Book

        ByAssetSummaryGroup
            indexed
            Sort Order
                FinanceEnterpriseGroup
       			AssetSummaryGroup
       			Book
                Asset



		ByBookRegulationClass
	        indexed
        	Sort Order
        		FinanceEnterpriseGroup
      			Book
           		BookRegulation
				ClassificationOfProperty
				InServiceDate
				Asset


    Attach Rules
		constraint (Active)
			"BookIsNotActive"
		constraint (BookCalendarExists)
			"BookCalendarIsRequired"


	Rule Blocks
		CreateAdjustment
			if (!Disposed)

				if (Asset.Status.Released)
					include RefreshAdjustmentDate
					invoke Released.Adjust Asset
						if (AdjustmentDate entered)
							invoked.AdjustmentDate					= AdjustmentDate
						else
							invoked.AdjustmentDate					= UnreleasedAssetAdjustmentRel.AdjustmentDate

				if (Asset.AssetProcess.Adjustment
				or UnreleasedAssetDisposalRel.FullOrPartial.Full)
					if (AssetBookAdjustmentRel not exists
					and ((UnreleasedAssetAdjustmentRel.AssetItemAdjustmentExists
					and Basis changed)
					or !LocalFlag))
						invoke Create AssetBookAdjustment
							invoked.Asset								= Asset
							invoked.FinanceEnterpriseGroup				= Asset.FinanceEnterpriseGroup
							invoked.AssetAdjustment						= UnreleasedAssetAdjustmentRel.AssetAdjustment
							invoked.Book								= Book
							if (AdjustmentDate entered)
								invoked.AdjustmentDate					= AdjustmentDate
							else

								invoked.AdjustmentDate					= UnreleasedAssetAdjustmentRel.AdjustmentDate
							invoked.Compute								= ComputeOption

							if (Active changed)
								invoked.Active							= old Active
							else
								invoked.Active							= Active
							invoked.ToActive							= Active

							if (SpreadOverRemainingLife changed)
								invoked.SpreadOverRemainingLife			= old SpreadOverRemainingLife
							else
								invoked.SpreadOverRemainingLife			= SpreadOverRemainingLife
							invoked.ToSpreadOverRemainingLife			= SpreadOverRemainingLife

							if (Life changed)
								invoked.Life							= old Life
							else
								invoked.Life							= Life
							invoked.ToLife								= Life

							if (LifeRemaining changed)
								invoked.LifeRemaining					= old LifeRemaining
							else
								invoked.LifeRemaining					= LifeRemaining
							invoked.ToLifeRemaining						= LifeRemaining

							if (Basis changed)
								invoked.Basis							= (old Basis)
							else
								invoked.Basis							= Basis
							invoked.ToBasis								= Basis

							if (Method changed)
								invoked.Method							= old Method
							else
								invoked.Method							= Method
							invoked.ToMethod							= Method

							if (DepreciationMethodSwitched changed)
								invoked.DepreciationMethodSwitched		= old DepreciationMethodSwitched
							else
								invoked.DepreciationMethodSwitched		= DepreciationMethodSwitched
							invoked.ToDepreciationMethodSwitched		= DepreciationMethodSwitched

							if (InServiceDate changed)
								invoked.InServiceDate					= old InServiceDate
							else
								invoked.InServiceDate					= InServiceDate
							invoked.ToInServiceDate						= InServiceDate

							if (YearPlacedInService changed)
								invoked.YearPlacedInService				= old YearPlacedInService
							else
								invoked.YearPlacedInService				= YearPlacedInService
							invoked.ToYearPlacedInService				= YearPlacedInService

							if (Convention changed)
								invoked.Convention						= old Convention
							else
								invoked.Convention						= Convention
							invoked.ToConvention						= Convention

							if (DepreciationStartDate changed)
								invoked.DepreciationStartDate			= old DepreciationStartDate
							else
								invoked.DepreciationStartDate			= DepreciationStartDate

							if (LifeInYears changed)
								invoked.LifeInYears						= old LifeInYears
							else
								invoked.LifeInYears						= LifeInYears
							invoked.ToLifeInYears						= LifeInYears

							if (CurrentPeriodDepreciationCalculated changed)
								invoked.CurrentPeriodDepreciationCalculated	= old CurrentPeriodDepreciationCalculated
							else
								invoked.CurrentPeriodDepreciationCalculated	= CurrentPeriodDepreciationCalculated

							if (CurrentPeriodPortionOfLife changed)
								invoked.CurrentPeriodPortionOfLife			= old CurrentPeriodPortionOfLife
							else
								invoked.CurrentPeriodPortionOfLife			= CurrentPeriodPortionOfLife

							if (TransactionNumberOfDecimals changed)
								invoked.TransactionNumberOfDecimals			= old TransactionNumberOfDecimals
							else
								invoked.TransactionNumberOfDecimals			= TransactionNumberOfDecimals

							if (CurrentPeriodDepreciation changed)
								invoked.CurrentPeriodDepreciation			= old CurrentPeriodDepreciation
							else
								invoked.CurrentPeriodDepreciation			= CurrentPeriodDepreciation

							if (CurrentPeriodDepreciationAllowed changed)
								invoked.CurrentPeriodDepreciationAllowed	= old CurrentPeriodDepreciationAllowed
							else
								invoked.CurrentPeriodDepreciationAllowed	= CurrentPeriodDepreciationAllowed

							if (YearToDateDepreciation changed)
								invoked.YearToDateDepreciation				= old YearToDateDepreciation
							else
								invoked.YearToDateDepreciation				= YearToDateDepreciation
							invoked.ToYearToDateDepreciation				= YearToDateDepreciation

							if (YearToDateDepreciationAllowed changed)
								invoked.YearToDateDepreciationAllowed		= old YearToDateDepreciationAllowed
							else
								invoked.YearToDateDepreciationAllowed		= YearToDateDepreciationAllowed

							if (YearToDateDepreciationOverride changed)
								invoked.YearToDateDepreciationOverride		= old YearToDateDepreciationOverride
							else
								invoked.YearToDateDepreciationOverride		= YearToDateDepreciationOverride
							invoked.ToYearToDateDepreciationOverride		= YearToDateDepreciationOverride

							if (LifeToDateDepreciation changed)
								invoked.LifeToDateDepreciation				= old LifeToDateDepreciation
							else
								invoked.LifeToDateDepreciation				= LifeToDateDepreciation
							invoked.ToLifeToDateDepreciation				= LifeToDateDepreciation

							if (LifeToDateDepreciationAllowed changed)
								invoked.LifeToDateDepreciationAllowed		= old LifeToDateDepreciationAllowed
							else
								invoked.LifeToDateDepreciationAllowed		= LifeToDateDepreciationAllowed

							if (LastClosedPeriodBalance changed)
								invoked.LastClosedPeriodBalance				= old LastClosedPeriodBalance
							else
								invoked.LastClosedPeriodBalance				= LastClosedPeriodBalance

							if (FirstAndLastYear changed)
								invoked.FirstAndLastYear					= old FirstAndLastYear
							else
								invoked.FirstAndLastYear					= FirstAndLastYear

							if (SalvageValue changed)
								invoked.SalvageValue						= old SalvageValue
							else
								invoked.SalvageValue						= SalvageValue
							invoked.ToSalvageValue							= SalvageValue

							if (BusinessPercent changed)
								invoked.BusinessPercent						= old BusinessPercent
							else
								invoked.BusinessPercent						= BusinessPercent
							invoked.ToBusinessPercent						= BusinessPercent

							if (PersonalUseCode changed)
								invoked.PersonalUseCode						= old PersonalUseCode
							else
								invoked.PersonalUseCode						= PersonalUseCode
							invoked.ToPersonalUseCode						= PersonalUseCode

							if (FirstYearExpenseAmount changed)
								invoked.FirstYearExpenseAmount				= old FirstYearExpenseAmount
							else
								invoked.FirstYearExpenseAmount				= FirstYearExpenseAmount
							invoked.ToFirstYearExpenseAmount				= FirstYearExpenseAmount

							if (AssetTaxCreditTable changed)
								invoked.AssetTaxCreditTable					= old AssetTaxCreditTable
							else
								invoked.AssetTaxCreditTable					= AssetTaxCreditTable
							invoked.ToAssetTaxCreditTable					= AssetTaxCreditTable

							if (TaxCreditPropertyAmount changed)
								invoked.TaxCreditPropertyAmount				= old TaxCreditPropertyAmount
							else
								invoked.TaxCreditPropertyAmount				= TaxCreditPropertyAmount
							invoked.ToTaxCreditPropertyAmount				= TaxCreditPropertyAmount

							if (TaxCredit changed)
								invoked.TaxCredit							= old TaxCredit
							else
								invoked.TaxCredit							= TaxCredit
							invoked.ToTaxCredit								= TaxCredit

							if (InsuranceCalculationMethod changed)
								invoked.InsuranceCalculationMethod			= old InsuranceCalculationMethod
							else
								invoked.InsuranceCalculationMethod			= InsuranceCalculationMethod
							invoked.ToInsuranceCalculationMethod			= InsuranceCalculationMethod

							if (ActualInsuranceValue changed)
								invoked.ActualInsuranceValue				= old ActualInsuranceValue
							else
								invoked.ActualInsuranceValue				= ActualInsuranceValue
							invoked.ToActualInsuranceValue					= ActualInsuranceValue

							if (CalculatedInsuranceValue changed)
								invoked.CalculatedInsuranceValue			= old CalculatedInsuranceValue
							else
								invoked.CalculatedInsuranceValue			= CalculatedInsuranceValue
							invoked.ToCalculatedInsuranceValue				= CalculatedInsuranceValue

							if (ReplacementCalculationMethod changed)
								invoked.ReplacementCalculationMethod		= old ReplacementCalculationMethod
							else
								invoked.ReplacementCalculationMethod		= ReplacementCalculationMethod
							invoked.ToReplacementCalculationMethod			= ReplacementCalculationMethod

							if (CalculatedReplacementValue changed)
								invoked.CalculatedReplacementValue			= old CalculatedReplacementValue
							else
								invoked.CalculatedReplacementValue			= CalculatedReplacementValue
							invoked.ToCalculatedReplacementValue			= CalculatedReplacementValue

							if (YearToDateDisposedMonths changed)
								invoked.YearToDateDisposedMonths			= old YearToDateDisposedMonths
							else
								invoked.YearToDateDisposedMonths			= YearToDateDisposedMonths

							if (BookRegulation changed)
								invoked.BookRegulation						= old BookRegulation
							else
								invoked.BookRegulation						= BookRegulation
							invoked.ToBookRegulation						= BookRegulation

							if (HistoryPostingDate changed)
								invoked.HistoryPostingDate					= old HistoryPostingDate
							else
								invoked.HistoryPostingDate					= HistoryPostingDate
							invoked.ToHistoryPostingDate					= HistoryPostingDate

							if (IndianReservation changed)
								invoked.IndianReservation					= old IndianReservation
							else
								invoked.IndianReservation					= IndianReservation
							invoked.ToIndianReservation						= IndianReservation

							if (PropertyType changed)
								invoked.PropertyType						= old PropertyType
							else
								invoked.PropertyType						= PropertyType
							invoked.ToPropertyType							= PropertyType

							if (QualifiedImprovement changed)
								invoked.QualifiedImprovement				= old QualifiedImprovement
							else
								invoked.QualifiedImprovement				= QualifiedImprovement
							invoked.ToQualifiedImprovement					= QualifiedImprovement

							if (ForeignProperty changed)
								invoked.ForeignProperty						= old ForeignProperty
							else
								invoked.ForeignProperty						= ForeignProperty
							invoked.ToForeignProperty						= ForeignProperty

							if (CostRecoverySystem changed)
								invoked.CostRecoverySystem					= old CostRecoverySystem
							else
								invoked.CostRecoverySystem					= CostRecoverySystem
							invoked.ToCostRecoverySystem					= CostRecoverySystem

							if (ClassificationOfProperty changed)
								invoked.ClassificationOfProperty			= old ClassificationOfProperty
							else
								invoked.ClassificationOfProperty			= ClassificationOfProperty
							invoked.ToClassificationOfProperty				= ClassificationOfProperty

							if (NonConforming changed)
								invoked.NonConforming						= old NonConforming
							else
								invoked.NonConforming						= NonConforming
							invoked.ToNonConforming							= NonConforming

							if (Used changed)
								invoked.Used								= old Used
							else
								invoked.Used								= Used
							invoked.ToUsed									= Used

							if (Farming changed)
								invoked.Farming								= old Farming
							else
								invoked.Farming								= Farming
							invoked.ToFarming								= Farming

							if (Section179 changed)
								invoked.Section179							= old Section179
							else
								invoked.Section179							= Section179
							invoked.ToSection179							= Section179

							if (Listed changed)
								invoked.Listed								= old Listed
							else
								invoked.Listed								= Listed
							invoked.ToListed								= Listed

							if (DepreciableIntangible changed)
								invoked.DepreciableIntangible				= old DepreciableIntangible
							else
								invoked.DepreciableIntangible				= DepreciableIntangible
							invoked.ToDepreciableIntangible					= DepreciableIntangible

							if (Section179Expense changed)
								invoked.Section179Expense					= old Section179Expense
							else
								invoked.Section179Expense					= Section179Expense
							invoked.ToSection179Expense						= Section179Expense

							if (MineralReserves changed)
								invoked.MineralReserves						= old MineralReserves
							else
								invoked.MineralReserves						= MineralReserves
							invoked.ToMineralReserves						= MineralReserves

							if (LowIncomeHousing changed)
								invoked.LowIncomeHousing					= old LowIncomeHousing
							else
								invoked.LowIncomeHousing					= LowIncomeHousing
							invoked.ToLowIncomeHousing						= LowIncomeHousing

							if (TransitionalRuleFlag changed)
								invoked.TransitionalRuleFlag				= old TransitionalRuleFlag
							else
								invoked.TransitionalRuleFlag				= TransitionalRuleFlag
							invoked.ToTransitionalRuleFlag					= TransitionalRuleFlag

							if (BonusAmount changed)
								invoked.BonusAmount							= old BonusAmount
							else
								invoked.BonusAmount							= BonusAmount
							invoked.ToBonusAmount							= BonusAmount

							if(LocalHistoryFlag)
								invoked.AdjustPriorYearHistoryTransactions = LocalAdjustPriorYearHistory
							else
							if(AdjustPriorYearHistoryTransactions changed)
								invoked.AdjustPriorYearHistoryTransactions	= old AdjustPriorYearHistoryTransactions
							else
								invoked.AdjustPriorYearHistoryTransactions	= AdjustPriorYearHistoryTransactions
							invoked.ToAdjustPriorYearHistoryTransactions	= AdjustPriorYearHistoryTransactions

							if (LocalAction = "A")
								initialize invoked.Active
								initialize invoked.Life
								initialize invoked.LifeRemaining
								initialize invoked.SpreadOverRemainingLife
								initialize invoked.Basis
								initialize invoked.Method
								initialize invoked.DepreciationMethodSwitched
								initialize invoked.InServiceDate
								initialize invoked.YearPlacedInService
								initialize invoked.Convention
								initialize invoked.DepreciationStartDate
								initialize invoked.LifeInYears
								initialize invoked.CurrentPeriodDepreciationCalculated
								initialize invoked.CurrentPeriodPortionOfLife
								initialize invoked.TransactionNumberOfDecimals
								initialize invoked.CurrentPeriodDepreciation
								initialize invoked.CurrentPeriodDepreciationAllowed
								initialize invoked.YearToDateDepreciation
								initialize invoked.YearToDateDepreciationAllowed
								initialize invoked.YearToDateDepreciationOverride
								initialize invoked.LifeToDateDepreciation
								initialize invoked.LifeToDateDepreciationAllowed
								initialize invoked.LastClosedPeriodBalance
								initialize invoked.FirstAndLastYear
								initialize invoked.InactivateDate
								initialize invoked.YearToDateInactiveMonths
								initialize invoked.LifeToDateInactiveMonths
								initialize invoked.SalvageValue
								initialize invoked.BusinessPercent
								initialize invoked.PersonalUseCode
								initialize invoked.FirstYearExpenseAmount
								initialize invoked.AssetTaxCreditTable
								initialize invoked.TaxCreditPropertyAmount
								initialize invoked.TaxCredit
								initialize invoked.InsuranceCalculationMethod
								initialize invoked.ActualInsuranceValue
								initialize invoked.CalculatedInsuranceValue
								initialize invoked.ReplacementCalculationMethod
								initialize invoked.CalculatedReplacementValue
								initialize invoked.YearToDateDisposedMonths
								initialize invoked.BookRegulation
								initialize invoked.HistoryPostingDate
								initialize invoked.IndianReservation
								initialize invoked.PropertyType
								initialize invoked.QualifiedImprovement
								initialize invoked.ForeignProperty
								initialize invoked.CostRecoverySystem
								initialize invoked.ClassificationOfProperty
								initialize invoked.NonConforming
								initialize invoked.Used
								initialize invoked.Farming
								initialize invoked.Section179
								initialize invoked.Listed
								initialize invoked.DepreciableIntangible
								initialize invoked.Section179Expense
								initialize invoked.MineralReserves
								initialize invoked.LowIncomeHousing
								initialize invoked.TransitionalRuleFlag
								initialize invoked.BonusAmount
								initialize invoked.AdjustPriorYearHistoryTransactions

							else
							if (LocalAction = "D")
								initialize invoked.ToActive
								initialize invoked.ToLife
								initialize invoked.ToLifeRemaining
								initialize invoked.ToSpreadOverRemainingLife
								initialize invoked.ToBasis
								initialize invoked.ToMethod
								initialize invoked.ToDepreciationMethodSwitched
								initialize invoked.ToInServiceDate
								initialize invoked.ToYearPlacedInService
								initialize invoked.ToConvention
								initialize invoked.ToLifeInYears
								initialize invoked.ToYearToDateDepreciation
								initialize invoked.ToYearToDateDepreciationOverride
								initialize invoked.ToLifeToDateDepreciation
								initialize invoked.ToSalvageValue
								initialize invoked.ToBusinessPercent
								initialize invoked.ToPersonalUseCode
								initialize invoked.ToFirstYearExpenseAmount
								initialize invoked.ToAssetTaxCreditTable
								initialize invoked.ToTaxCreditPropertyAmount
								initialize invoked.ToTaxCredit
								initialize invoked.ToInsuranceCalculationMethod
								initialize invoked.ToActualInsuranceValue
								initialize invoked.ToCalculatedInsuranceValue
								initialize invoked.ToReplacementCalculationMethod
								initialize invoked.ToCalculatedReplacementValue
								initialize invoked.ToBookRegulation
								initialize invoked.ToHistoryPostingDate
								initialize invoked.ToIndianReservation
								initialize invoked.ToPropertyType
								initialize invoked.ToQualifiedImprovement
								initialize invoked.ToForeignProperty
								initialize invoked.ToCostRecoverySystem
								initialize invoked.ToClassificationOfProperty
								initialize invoked.ToNonConforming
								initialize invoked.ToUsed
								initialize invoked.ToFarming
								initialize invoked.ToSection179
								initialize invoked.ToListed
								initialize invoked.ToDepreciableIntangible
								initialize invoked.ToSection179Expense
								initialize invoked.ToMineralReserves
								initialize invoked.ToLowIncomeHousing
								initialize invoked.ToTransitionalRuleFlag
								initialize invoked.ToBonusAmount
								initialize invoked.ToAdjustPriorYearHistoryTransactions
					else
						invoke Update AssetBookAdjustmentRel
							if (LocalAction = "D")
								initialize invoked.ToActive
								initialize invoked.ToLife
								initialize invoked.ToLifeRemaining
								initialize invoked.ToSpreadOverRemainingLife
								initialize invoked.ToBasis
								initialize invoked.ToMethod
								initialize invoked.ToDepreciationMethodSwitched
								initialize invoked.ToInServiceDate
								initialize invoked.ToYearPlacedInService
								initialize invoked.ToConvention
								initialize invoked.ToLifeInYears
								initialize invoked.ToYearToDateDepreciation
								initialize invoked.ToYearToDateDepreciationOverride
								initialize invoked.ToLifeToDateDepreciation
								initialize invoked.ToSalvageValue
								initialize invoked.ToBusinessPercent
								initialize invoked.ToPersonalUseCode
								initialize invoked.ToFirstYearExpenseAmount
								initialize invoked.ToAssetTaxCreditTable
								initialize invoked.ToTaxCreditPropertyAmount
								initialize invoked.ToTaxCredit
								initialize invoked.ToInsuranceCalculationMethod
								initialize invoked.ToActualInsuranceValue
								initialize invoked.ToCalculatedInsuranceValue
								initialize invoked.ToReplacementCalculationMethod
								initialize invoked.ToCalculatedReplacementValue
								initialize invoked.ToBookRegulation
								initialize invoked.ToHistoryPostingDate
								initialize invoked.ToIndianReservation
								initialize invoked.ToPropertyType
								initialize invoked.ToQualifiedImprovement
								initialize invoked.ToForeignProperty
								initialize invoked.ToCostRecoverySystem
								initialize invoked.ToClassificationOfProperty
								initialize invoked.ToNonConforming
								initialize invoked.ToUsed
								initialize invoked.ToFarming
								initialize invoked.ToSection179
								initialize invoked.ToListed
								initialize invoked.ToDepreciableIntangible
								initialize invoked.ToSection179Expense
								initialize invoked.ToMineralReserves
								initialize invoked.ToLowIncomeHousing
								initialize invoked.ToTransitionalRuleFlag
								initialize invoked.ToBonusAmount
								initialize invoked.ToAdjustPriorYearHistoryTransactions
							else
								invoked.Compute								= ComputeOption
								invoked.ToActive							= Active
								invoked.ToLife								= Life
								invoked.ToLifeRemaining						= LifeRemaining
								invoked.ToSpreadOverRemainingLife			= SpreadOverRemainingLife
								invoked.ToBasis								= Basis
								invoked.ToMethod							= Method
								invoked.ToDepreciationMethodSwitched		= DepreciationMethodSwitched
								invoked.ToInServiceDate						= InServiceDate
								invoked.ToYearPlacedInService				= YearPlacedInService
								invoked.ToConvention						= Convention
								invoked.ToLifeInYears						= LifeInYears
								invoked.ToYearToDateDepreciation			= YearToDateDepreciation
								invoked.ToYearToDateDepreciationOverride	= YearToDateDepreciationOverride
								invoked.ToLifeToDateDepreciation			= LifeToDateDepreciation
								invoked.ToSalvageValue						= SalvageValue
								invoked.ToBusinessPercent					= BusinessPercent
								invoked.ToPersonalUseCode					= PersonalUseCode
								invoked.ToFirstYearExpenseAmount			= FirstYearExpenseAmount
								invoked.ToAssetTaxCreditTable				= AssetTaxCreditTable
								invoked.ToTaxCreditPropertyAmount			= TaxCreditPropertyAmount
								invoked.ToTaxCredit							= TaxCredit
								invoked.ToInsuranceCalculationMethod		= InsuranceCalculationMethod
								invoked.ToActualInsuranceValue				= ActualInsuranceValue
								invoked.ToCalculatedInsuranceValue			= CalculatedInsuranceValue
								invoked.ToReplacementCalculationMethod		= ReplacementCalculationMethod
								invoked.ToCalculatedReplacementValue		= CalculatedReplacementValue
								invoked.ToBookRegulation					= BookRegulation
								invoked.ToHistoryPostingDate				= HistoryPostingDate
								invoked.ToIndianReservation					= IndianReservation
								invoked.ToPropertyType						= PropertyType
								invoked.ToQualifiedImprovement				= QualifiedImprovement
								invoked.ToForeignProperty					= ForeignProperty
								invoked.ToCostRecoverySystem				= CostRecoverySystem
								invoked.ToClassificationOfProperty			= ClassificationOfProperty
								invoked.ToNonConforming						= NonConforming
								invoked.ToUsed								= Used
								invoked.ToFarming							= Farming
								invoked.ToSection179						= Section179
								invoked.ToListed							= Listed
								invoked.ToDepreciableIntangible				= DepreciableIntangible
								invoked.ToSection179Expense					= Section179Expense
								invoked.ToMineralReserves					= MineralReserves
								invoked.ToLowIncomeHousing					= LowIncomeHousing
								invoked.ToTransitionalRuleFlag				= TransitionalRuleFlag
								invoked.ToBonusAmount						= BonusAmount
								invoked.ToAdjustPriorYearHistoryTransactions = AdjustPriorYearHistoryTransactions

		ApplyGuidelineClassDefaults
			if (BookRegulation entered
			and Asset.AssetGuidelineClass entered)
				if (first GuidelineClassRegulationsRel.Method entered)
					Method					= first GuidelineClassRegulationsRel.Method
				if (first GuidelineClassRegulationsRel.Life entered)
					Life					= first GuidelineClassRegulationsRel.Life
				if (first GuidelineClassRegulationsRel.Convention entered)
					Convention				= first GuidelineClassRegulationsRel.Convention
				else
					Convention = Book.Convention
				if (first GuidelineClassRegulationsRel.PersonalUseCode entered)
					constraint (RegulationPersonalUseCodeRel exists)
						"PersonalUseCode<PersonalUseCode>ForBook<Book>DoesnotExists"
					PersonalUseCode			= first GuidelineClassRegulationsRel.PersonalUseCode
				if (Used not entered)
					if (Asset.Used)
						Used = Asset.Used
					else
						Used = GuidelineClassRegulationsRel.Used
				if (first GuidelineClassRegulationsRel.ClassificationOfProperty entered)
					ClassificationOfProperty	= first GuidelineClassRegulationsRel.ClassificationOfProperty
				if (first GuidelineClassRegulationsRel.MineralReserves entered)
					MineralReserves		= first GuidelineClassRegulationsRel.MineralReserves
				if (first GuidelineClassRegulationsRel.LowIncomeHousing entered)
					LowIncomeHousing		= first GuidelineClassRegulationsRel.LowIncomeHousing
				if (first GuidelineClassRegulationsRel.AssetTaxCreditTable entered)
					AssetTaxCreditTable		= first GuidelineClassRegulationsRel.AssetTaxCreditTable
					TaxCreditPropertyAmount = Basis * AssetTaxCreditTable.QualifyingPercentage / 100
					TaxCredit = TaxCreditPropertyAmount * AssetTaxCreditTable.TaxCreditPercentage / 100
				if (first GuidelineClassRegulationsRel.FirstYearExpensePercent entered)
					FirstYearExpenseAmount	= Basis * (GuidelineClassRegulationsRel.FirstYearExpensePercent/100)
				if (first GuidelineClassRegulationsRel.BusinessPercent entered)
					BusinessPercent			= first GuidelineClassRegulationsRel.BusinessPercent
				else
					BusinessPercent			= 100
				if (first GuidelineClassRegulationsRel.SalvagePercent entered)
					SalvageValue			= Basis * (GuidelineClassRegulationsRel.SalvagePercent/100)


				if (GuidelineClassRegulationsRel.DepreciableIntangible entered)
					DepreciableIntangible		= GuidelineClassRegulationsRel.DepreciableIntangible
				IndianReservation			= first GuidelineClassRegulationsRel.IndianReservation
				PropertyType				= first GuidelineClassRegulationsRel.PropertyType
				QualifiedImprovement		= first GuidelineClassRegulationsRel.QualifiedImprovement
				ForeignProperty				= first GuidelineClassRegulationsRel.ForeignProperty
				CostRecoverySystem			= first GuidelineClassRegulationsRel.CostRecoverySystem
				NonConforming				= first GuidelineClassRegulationsRel.NonConforming
				Farming						= first GuidelineClassRegulationsRel.Farming
				Section179					= first GuidelineClassRegulationsRel.Section179
				Listed						= first GuidelineClassRegulationsRel.Listed
				TransitionalRuleFlag		= first GuidelineClassRegulationsRel.TransitionalRuleFlag

				if (DeprBonus entered)
					BonusAmount				= DeprBonus  


		AccountDefaulting
			initialize LocalAssetAccount
			initialize LocalAccumulatedDepreciationAccount
			initialize LocalDepreciationExpenseAccount
			initialize LocalProceedsAccount
			initialize LocalGainAccount
			initialize LocalLossAccount
			initialize LocalClearingAccount
			initialize LocalDisposalExpenseAccount
			initialize LocalDeferredGainAccount
			initialize LocalDeferredLossAccount
			initialize LocalRevalueSurplusAccount
			initialize LocalRevalueLossAccount
			initialize LocalImpairmentLossAccount
			initialize LocalAccumulatedImpairmentLossAccount
			initialize LocalImpairmentAmortizationAccount
			initialize LocalImpairmentWriteOffAccount
			initialize LocalRevalueAmortizationAccount
			initialize LocalRevalueReserveAccount

			if (Asset.AssetAccountingUnitGroup entered)  
				if (Asset.AssetAccountingUnitGroup.AssetAccountingUnit entered)
					LocalAssetAccount						= Asset.AssetAccountingUnitGroup.AssetAccountingUnit
				else
					constraint (Asset.AssetAccountingUnit entered)
						"AssetDefaultDimensionsAreRequired"
					LocalAssetAccount						= Asset.AssetAccountingUnit
				LocalASTTransactionDimensions = LocalAssetAccount

				if (Asset.AssetAccountingUnitGroup.AccumulatedDepreciationAccountingUnit entered)
					LocalAccumulatedDepreciationAccount		= Asset.AssetAccountingUnitGroup.AccumulatedDepreciationAccountingUnit
				else
					constraint (Asset.AssetAccountingUnit entered)
						"AssetAccumulatedDepreciationDefaultDimensionsAreRequired"
					LocalAccumulatedDepreciationAccount		= Asset.AssetAccountingUnit
				LocalACMTransactionDimensions = LocalAccumulatedDepreciationAccount

				if (Asset.AssetAccountingUnitGroup.DepreciationExpenseAccountingUnit entered)
					LocalDepreciationExpenseAccount			= Asset.AssetAccountingUnitGroup.DepreciationExpenseAccountingUnit
				else
					constraint (Asset.AssetAccountingUnit entered)
						"AssetDepreciationExpenseDefaultDimensionsAreRequired"
					LocalDepreciationExpenseAccount			= Asset.AssetAccountingUnit
				LocalEXPTransactionDimensions = LocalDepreciationExpenseAccount

				if (Asset.AssetAccountingUnitGroup.ProceedsAccountingUnit entered)
					LocalProceedsAccount					= Asset.AssetAccountingUnitGroup.ProceedsAccountingUnit
				else
					constraint (Asset.AssetAccountingUnit entered)
						"ProceedsDefaultDimensionsAreRequired"
					LocalProceedsAccount					= Asset.AssetAccountingUnit

				if (Asset.AssetAccountingUnitGroup.GainAccountingUnit entered)
					LocalGainAccount						= Asset.AssetAccountingUnitGroup.GainAccountingUnit
				else
					constraint (Asset.AssetAccountingUnit entered)
						"GainDefaultDimensionsAreRequired"
					LocalGainAccount						= Asset.AssetAccountingUnit

				if (Asset.AssetAccountingUnitGroup.LossAccountingUnit entered)
					LocalLossAccount						= Asset.AssetAccountingUnitGroup.LossAccountingUnit
				else
					constraint (Asset.AssetAccountingUnit entered)
						"LossDefaultDimensionsAreRequired"
					LocalLossAccount						= Asset.AssetAccountingUnit

				if (Asset.AssetLease entered
				and (Asset.Classification.Finance
				or  Asset.Classification.Purchased
				or  Asset.AssetLease.Lease.LongTermOperatingLease))

					if (LeaseImpairmentInProgress)
						LocalClearingAccount				= ImpairmentInProgressRel.ImpairmentAccount
					else
					if (LeaseAdjustmentInProgress)
						LocalClearingAccount				= AdjustmentInProgressRel.AdjustmentAccount
					else
						if (IsLTOLAssetWithAllocationCode)
							LocalClearingAccount								= first LeaseAllocationCodeDetailsRel.DistributionAccount
						else
							LocalClearingAccount								= Asset.AssetLease.Lease.DebtAccount
				else
					if (Asset.AssetAccountingUnitGroup.ClearingAccountingUnit entered)
						LocalClearingAccount				= Asset.AssetAccountingUnitGroup.ClearingAccountingUnit
					else
						constraint (Asset.AssetAccountingUnit entered)
							"ClearingDefaultDimensionsAreRequired"
						LocalClearingAccount				= Asset.AssetAccountingUnit

				if (Asset.AssetAccountingUnitGroup.DisposalExpenseAccountingUnit entered)
					LocalDisposalExpenseAccount				= Asset.AssetAccountingUnitGroup.DisposalExpenseAccountingUnit
				else
					constraint (Asset.AssetAccountingUnit entered)
						"DisposalExpenseDefaultDimensionsAreRequired"
					LocalDisposalExpenseAccount 			= Asset.AssetAccountingUnit

				if (Asset.AssetAccountingUnitGroup.DeferredGainAccountingUnit	entered)
					LocalDeferredGainAccount				= Asset.AssetAccountingUnitGroup.DeferredGainAccountingUnit
				else
					constraint (Asset.AssetAccountingUnit entered)
						"DeferredGainDefaultDimensionsAreRequired"
					LocalDeferredGainAccount				= Asset.AssetAccountingUnit

				if (Asset.AssetAccountingUnitGroup.DeferredLossAccountingUnit entered)
					LocalDeferredLossAccount				= Asset.AssetAccountingUnitGroup.DeferredLossAccountingUnit
				else
					constraint (Asset.AssetAccountingUnit entered)
						"DeferredLossDefaultDimensionsAreRequired"
					LocalDeferredLossAccount				= Asset.AssetAccountingUnit

				if (AssetCompanyRel.Revalue)
					if (Asset.AssetAccountingUnitGroup.RevalueSurplusAccountingUnit entered)
						LocalRevalueSurplusAccount				= Asset.AssetAccountingUnitGroup.RevalueSurplusAccountingUnit
					else
						constraint (Asset.AssetAccountingUnit entered)
							"RevalueSurplusDimensionsAreRequired"
						LocalRevalueSurplusAccount				= Asset.AssetAccountingUnit

					if (Asset.AssetAccountingUnitGroup.RevalueLossAccountingUnit entered)
						LocalRevalueLossAccount				= Asset.AssetAccountingUnitGroup.RevalueLossAccountingUnit
					else
						constraint (Asset.AssetAccountingUnit entered)
							"DeferredLossDefaultDimensionsAreRequired"
						LocalRevalueLossAccount				= Asset.AssetAccountingUnit

					if (Asset.AssetType.PostToAccount.RevaluationReserve)
						if (Asset.AssetAccountingUnitGroup.RevalueReserve entered)
							LocalRevalueReserveAccount				= Asset.AssetAccountingUnitGroup.RevalueReserve
						else
							constraint (Asset.AssetAccountingUnit entered)
								"RevalueReserveDimensionsAreRequired"
							LocalRevalueReserveAccount				= Asset.AssetAccountingUnit

						if (Asset.AssetAccountingUnitGroup.RevalueAmortization entered)
							LocalRevalueAmortizationAccount				= Asset.AssetAccountingUnitGroup.RevalueAmortization
						else
							constraint (Asset.AssetAccountingUnit entered)
								"RevalueAmortizationDefaultDimensionsAreRequired"
							LocalRevalueAmortizationAccount				= Asset.AssetAccountingUnit

				if (Asset.AssetType.Impairment)
					if (Asset.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentLoss entered)
						LocalImpairmentLossAccount	= Asset.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentLoss
					else
						constraint (Asset.AssetAccountingUnit entered)
							"ImpairmentDimensionsAreRequired"
						LocalImpairmentLossAccount	= Asset.AssetAccountingUnit
					if (Asset.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.AccumulatedImpairmentLoss entered)
						LocalAccumulatedImpairmentLossAccount	= Asset.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.AccumulatedImpairmentLoss
					else
						constraint (Asset.AssetAccountingUnit entered)
							"AccumulatedImpairmentDimensionsAreRequired"
						LocalAccumulatedImpairmentLossAccount	= Asset.AssetAccountingUnit

					if (Asset.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentAmortization entered)
						LocalImpairmentAmortizationAccount	= Asset.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentAmortization
					else
						constraint (Asset.AssetAccountingUnit entered)
							"ImpairmentAmortizationDimensionsAreRequired"
						LocalImpairmentAmortizationAccount				= Asset.AssetAccountingUnit


					if (Asset.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentWriteOff entered)
						LocalImpairmentWriteOffAccount		= Asset.AssetAccountingUnitGroup.AssetImpairmentAccountingUnitGroup.ImpairmentWriteOff
					else
						constraint (Asset.AssetAccountingUnit entered)
							"ImpairmentAmortizationDimensionsAreRequired"
						LocalImpairmentWriteOffAccount		= Asset.AssetAccountingUnit

			else
				constraint (Asset.AssetAccountingUnit entered)
					"EitherDefaultDimensionCodesOrAnAssetDimensionGroupIsRequired"

				LocalAssetAccount						= Asset.AssetAccountingUnit
				LocalAccumulatedDepreciationAccount		= Asset.AssetAccountingUnit
				LocalDepreciationExpenseAccount			= Asset.AssetAccountingUnit
				LocalProceedsAccount					= Asset.AssetAccountingUnit
				LocalGainAccount						= Asset.AssetAccountingUnit
				LocalLossAccount						= Asset.AssetAccountingUnit
				LocalClearingAccount					= Asset.AssetAccountingUnit
				LocalDisposalExpenseAccount 			= Asset.AssetAccountingUnit
				LocalDeferredGainAccount				= Asset.AssetAccountingUnit
				LocalDeferredLossAccount				= Asset.AssetAccountingUnit
				LocalRevalueSurplusAccount				= Asset.AssetAccountingUnit
				LocalRevalueLossAccount					= Asset.AssetAccountingUnit
			 	LocalRevalueAmortizationAccount			= Asset.AssetAccountingUnit
			 	LocalRevalueReserveAccount				= Asset.AssetAccountingUnit
			 	LocalImpairmentLossAccount				= Asset.AssetAccountingUnit
			 	LocalAccumulatedImpairmentLossAccount	= Asset.AssetAccountingUnit
			 	LocalImpairmentAmortizationAccount		= Asset.AssetAccountingUnit
				LocalImpairmentWriteOffAccount			= Asset.AssetAccountingUnit



			LocalAssetAccount.GeneralLedgerChartAccount 					= Asset.AssetType.ResolveASTDistributionAccount
			LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount 	= Asset.AssetType.ResolveACMDistributionAccount
			LocalDepreciationExpenseAccount.GeneralLedgerChartAccount		= Asset.AssetType.ResolveEXPDistributionAccount

			if (Asset.AssetLease entered
			and (Asset.Classification.Finance
			or  Asset.Classification.Purchased
			or  Asset.AssetLease.Lease.LongTermOperatingLease))

				if (LeaseImpairmentInProgress)
					LocalClearingAccount									= ImpairmentInProgressRel.ImpairmentAccount
				else
				if (LeaseAdjustmentInProgress)
					LocalClearingAccount				= AdjustmentInProgressRel.AdjustmentAccount
				else
					if (IsLTOLAssetWithAllocationCode)
						LocalClearingAccount								= first LeaseAllocationCodeDetailsRel.DistributionAccount
					else
						LocalClearingAccount								= Asset.AssetLease.Lease.DebtAccount
			else
				LocalClearingAccount.GeneralLedgerChartAccount 				= Asset.AssetAccountGroup.CLRDistributionAccount.GeneralLedgerChartAccount
			LocalProceedsAccount.GeneralLedgerChartAccount 					= Asset.AssetAccountGroup.PRODistributionAccount.GeneralLedgerChartAccount
			LocalDisposalExpenseAccount.GeneralLedgerChartAccount 			= Asset.AssetAccountGroup.COSDistributionAccount.GeneralLedgerChartAccount
			LocalGainAccount.GeneralLedgerChartAccount 						= Asset.AssetAccountGroup.GANDistributionAccount.GeneralLedgerChartAccount
			LocalLossAccount.GeneralLedgerChartAccount 						= Asset.AssetAccountGroup.LOSDistributionAccount.GeneralLedgerChartAccount
			LocalDeferredGainAccount.GeneralLedgerChartAccount 				= Asset.AssetAccountGroup.DGNDistributionAccount.GeneralLedgerChartAccount
			LocalDeferredLossAccount.GeneralLedgerChartAccount 				= Asset.AssetAccountGroup.DLSDistributionAccount.GeneralLedgerChartAccount
			LocalRevalueSurplusAccount.GeneralLedgerChartAccount			= Asset.AssetAccountGroup.RVSDistributionAccount.GeneralLedgerChartAccount
			LocalRevalueLossAccount.GeneralLedgerChartAccount				= Asset.AssetAccountGroup.RVLDistributionAccount.GeneralLedgerChartAccount
			LocalRevalueAmortizationAccount.GeneralLedgerChartAccount		= Asset.AssetAccountGroup.RVADistributionAccount.GeneralLedgerChartAccount
			LocalRevalueReserveAccount.GeneralLedgerChartAccount			= Asset.AssetAccountGroup.RRADistributionAccount.GeneralLedgerChartAccount
			LocalImpairmentLossAccount.GeneralLedgerChartAccount			= Asset.AssetAccountGroup.IMLDistributionAccount.GeneralLedgerChartAccount
			LocalAccumulatedImpairmentLossAccount.GeneralLedgerChartAccount	= Asset.AssetAccountGroup.IMTDistributionAccount.GeneralLedgerChartAccount
			LocalImpairmentAmortizationAccount.GeneralLedgerChartAccount	= Asset.AssetAccountGroup.IMADistributionAccount.GeneralLedgerChartAccount
			LocalImpairmentWriteOffAccount.GeneralLedgerChartAccount		= Asset.AssetAccountGroup.IMWDistributionAccount.GeneralLedgerChartAccount

			if (Asset.AssetType.Revalue)
				if (Asset.AssetType.ResolveRVSDistributionAccount entered)
					LocalRevalueSurplusAccount.GeneralLedgerChartAccount = Asset.AssetType.ResolveRVSDistributionAccount
				if (Asset.AssetType.ResolveRVLDistributionAccount entered)
					LocalRevalueLossAccount.GeneralLedgerChartAccount = Asset.AssetType.ResolveRVLDistributionAccount
				if (Asset.AssetType.ResolveRVADistributionAccount entered)
					LocalRevalueAmortizationAccount.GeneralLedgerChartAccount = Asset.AssetType.ResolveRVADistributionAccount
				if (Asset.AssetType.ResolveRRADistributionAccount entered)
					LocalRevalueReserveAccount.GeneralLedgerChartAccount = Asset.AssetType.ResolveRRADistributionAccount

			if (Asset.AssetType.ResolveIMLDistributionAccount entered)
				LocalImpairmentLossAccount.GeneralLedgerChartAccount			= Asset.AssetType.ResolveIMLDistributionAccount
			if (Asset.AssetType.ResolveIMTDistributionAccount entered)
				LocalAccumulatedImpairmentLossAccount.GeneralLedgerChartAccount	= Asset.AssetType.ResolveIMTDistributionAccount
			if (Asset.AssetType.ResolveIMADistributionAccount entered)
				LocalImpairmentAmortizationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ResolveIMADistributionAccount
			if (Asset.AssetType.ResolveIMWDistributionAccount entered)
				LocalImpairmentWriteOffAccount.GeneralLedgerChartAccount		= Asset.AssetType.ResolveIMWDistributionAccount
			TransientIncrementalAccumulatedDepreciation							= LocalAccumulatedDepreciationAccount

			if (Asset.Company.UseEventAccounts)
				if (Asset.AssetProcess.Addition)

					if (Asset.AssetType.ASTAdditionChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount							= Asset.AssetType.ASTAdditionAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ASTAdditionChartAccount entered
					and Asset.AssetType.AssetAccountASTRel.DistributionAccount not entered)
						LocalAssetAccount.GeneralLedgerChartAccount							= Asset.AssetType.ParentAssetTypeRel.ASTAdditionChartAccount
					if (Asset.AssetLease not entered
					or (not Asset.Classification.Finance
					and not Asset.AssetLease.Lease.LongTermOperatingLease))

						if (Asset.AssetType.ACMAdditionChartAccount entered)
							LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ACMAdditionAccount
						else
						if (Asset.AssetType.ParentAssetTypeRel.ACMAdditionChartAccount entered
						and Asset.AssetType.AssetAccountACMRel.DistributionAccount not entered)
							LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ParentAssetTypeRel.ACMAdditionAccount

				if (Asset.AssetProcess.Adjustment)
					if (Asset.AssetType.ASTAdjustmentChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ASTAdjustmentAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ASTAdjustmentChartAccount entered
					and Asset.AssetType.AssetAccountASTRel.DistributionAccount not entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ParentAssetTypeRel.ASTAdjustmentAccount
					if (Asset.AssetType.ACMAdjustmentChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ACMAdjustmentAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ACMAdjustmentChartAccount entered
					and Asset.AssetType.AssetAccountACMRel.DistributionAccount not entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ParentAssetTypeRel.ACMAdjustmentAccount
				if (Asset.AssetProcess.Transfer)
					if (Asset.AssetType.ASTTransferChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ASTTransferAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ASTTransferChartAccount entered
					and Asset.AssetType.AssetAccountASTRel.DistributionAccount not entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ParentAssetTypeRel.ASTTransferAccount
					if (Asset.AssetType.ACMTransferChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ACMTransferAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ACMTransferChartAccount entered
					and Asset.AssetType.AssetAccountACMRel.DistributionAccount not entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ParentAssetTypeRel.ACMTransferAccount
				if (Asset.AssetProcess.Disposal)
					if (Asset.AssetType.ASTDisposalChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ASTDisposalAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ASTDisposalChartAccount entered
					and Asset.AssetType.AssetAccountASTRel.DistributionAccount not entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ParentAssetTypeRel.ASTDisposalAccount
					if (Asset.AssetType.ACMDisposalChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ACMDisposalAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ACMDisposalChartAccount entered
					and Asset.AssetType.AssetAccountACMRel.DistributionAccount not entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ParentAssetTypeRel.ACMDisposalAccount
				if (Asset.AssetProcess.Reinstatement)
					if (Asset.AssetType.ASTReinstatementChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ASTReinstatementAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ASTReinstatementChartAccount entered
					and Asset.AssetType.AssetAccountASTRel.DistributionAccount not entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ParentAssetTypeRel.ASTReinstatementAccount
					if (Asset.AssetType.ACMReinstatementChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ACMReinstatementAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ACMReinstatementChartAccount entered
					and Asset.AssetType.AssetAccountACMRel.DistributionAccount not entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ParentAssetTypeRel.ACMReinstatementAccount
				if (Asset.AssetProcess.Revalue)
					if (Asset.AssetType.ASTRevalueChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ASTRevalueAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ASTRevalueChartAccount entered
					and Asset.AssetType.AssetAccountASTRel.DistributionAccount not entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ParentAssetTypeRel.ASTRevalueAccount
					if (Asset.AssetType.ACMRevalueChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ACMRevalueAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ACMRevalueChartAccount entered
					and Asset.AssetType.AssetAccountACMRel.DistributionAccount not entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ParentAssetTypeRel.ACMRevalueAccount
				if (Asset.AssetProcess.Impairment)
					if (Asset.AssetType.ASTImpairmentChartAccount entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ASTImpairmentAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ASTImpairmentChartAccount entered
					and Asset.AssetType.AssetAccountASTRel.DistributionAccount not entered)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ParentAssetTypeRel.ASTImpairmentAccount
					if (Asset.AssetType.ACMImpairmentChartAccount entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ACMImpairmentAccount
					else
					if (Asset.AssetType.ParentAssetTypeRel.ACMImpairmentChartAccount entered
					and Asset.AssetType.AssetAccountACMRel.DistributionAccount not entered)
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ParentAssetTypeRel.ACMImpairmentAccount
			if (Asset.AssetType.Impairment)
				if (Book.Impairment)
					TransientIncrementalAccumulatedDepreciation							= LocalAccumulatedImpairmentLossAccount
					if (Asset.AssetProcess.Adjustment)
						LocalImpairmentLossAccount.GeneralLedgerChartAccount			= Asset.AssetType.AADImpairmentAccount
						LocalAccumulatedImpairmentLossAccount.GeneralLedgerChartAccount	= Asset.AssetType.AACImpairmentAccount
					if (Asset.AssetProcess.Transfer)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ATDImpairmentAccount
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ATCImpairmentAccount
					if (Asset.AssetProcess.Disposal)
						LocalAssetAccount.GeneralLedgerChartAccount						= Asset.AssetType.ADDImpairmentAccount
						LocalAccumulatedDepreciationAccount.GeneralLedgerChartAccount	= Asset.AssetType.ADCImpairmentAccount
			if (Asset.DepreciationExpenseProject entered)
				LocalDepreciationExpenseAccount.Project = Asset.DepreciationExpenseProject.Project







			TranAssetAccount						= LocalAssetAccount
			TranAccumulatedDepreciationAccount		= LocalAccumulatedDepreciationAccount
			TranDepreciationExpenseAccount			= LocalDepreciationExpenseAccount
			TranClearingAccount						= LocalClearingAccount
			TranProceedsAccount						= LocalProceedsAccount
			TranDisposalExpenseAccount				= LocalDisposalExpenseAccount
			TranGainAccount							= LocalGainAccount
			TranLossAccount							= LocalLossAccount
			TranDeferredGainAccount					= LocalDeferredGainAccount
			TranDeferredLossAccount					= LocalDeferredLossAccount
			TranRevalueSurplus						= LocalRevalueSurplusAccount
			TranRevalueLoss							= LocalRevalueLossAccount
			TranRevalueAmortization			 		= LocalRevalueAmortizationAccount
			TranRevalueReserve 						= LocalRevalueReserveAccount
			TranImpairmentLoss				 		= LocalImpairmentLossAccount
			TranAccumulatedImpairmentLoss			= LocalAccumulatedImpairmentLossAccount
			TranImpairmentAmortization			 	= LocalImpairmentAmortizationAccount
			TranImpairmentWriteOff					= LocalImpairmentWriteOffAccount
			TranImpairmentEventDebit				= LocalAssetAccount
			TranImpairmentEventCredit				= LocalAccumulatedDepreciationAccount

		ProjectDateValidation
			if (TranAssetAccount.Project entered)
				LocalProject 				= TranAssetAccount.Project
				LocalProjectDateRange		= TranAssetAccount.Project.ProjectDateRange
				LocalEditDate				= InServiceDate
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (LocalEditDate 				within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange<LocalProjectDateRange>"
			if (TranAccumulatedDepreciationAccount.Project entered)
				LocalProject 				= TranAccumulatedDepreciationAccount.Project
				LocalProjectDateRange		= TranAccumulatedDepreciationAccount.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate 		within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranDepreciationExpenseAccount.Project entered)
				LocalProject 				= TranDepreciationExpenseAccount.Project
				LocalProjectDateRange		= TranDepreciationExpenseAccount.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate 	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranClearingAccount.Project entered)
				LocalProject 				= TranClearingAccount.Project
				LocalProjectDateRange		= TranClearingAccount.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate 	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranProceedsAccount.Project entered)
				LocalProject 				= TranProceedsAccount.Project
				LocalProjectDateRange		= TranProceedsAccount.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate 	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"


			if (TranDisposalExpenseAccount.Project entered)
				LocalProject 				= TranDisposalExpenseAccount.Project
				LocalProjectDateRange		= TranDisposalExpenseAccount.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranGainAccount.Project entered)
				LocalProject 				= TranGainAccount.Project
				LocalProjectDateRange		= TranGainAccount.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate 	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranLossAccount.Project entered)
				LocalProject 				= TranLossAccount.Project
				LocalProjectDateRange		= TranLossAccount.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate 	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranDeferredGainAccount.Project entered)
				LocalProject 				= TranDeferredGainAccount.Project
				LocalProjectDateRange		= TranDeferredGainAccount.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate 	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranDeferredLossAccount.Project entered)
				LocalProject 				= TranDeferredLossAccount.Project
				LocalProjectDateRange		= TranDeferredLossAccount.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate 	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranRevalueSurplus.Project entered)
				LocalProject 				= TranRevalueSurplus.Project
				LocalProjectDateRange		= TranRevalueSurplus.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate 	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranRevalueLoss.Project entered)
				LocalProject 				= TranRevalueLoss.Project
				LocalProjectDateRange		= TranRevalueLoss.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranRevalueAmortization.Project entered)
				LocalProject 				= TranRevalueAmortization.Project
				LocalProjectDateRange		= TranRevalueAmortization.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranRevalueReserve.Project entered)
				LocalProject 				= TranRevalueReserve.Project
				LocalProjectDateRange		= TranRevalueReserve.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranImpairmentLoss.Project entered)
				LocalProject 				= TranImpairmentLoss.Project
				LocalProjectDateRange		= TranImpairmentLoss.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"

			if (TranAccumulatedImpairmentLoss.Project entered)
				LocalProject 				= TranAccumulatedImpairmentLoss.Project
				LocalProjectDateRange		= TranAccumulatedImpairmentLoss.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"


			if (TranImpairmentAmortization.Project entered)
				LocalProject 				= TranImpairmentAmortization.Project
				LocalProjectDateRange		= TranImpairmentAmortization.Project.ProjectDateRange
				if (PeriodOfPerformanceDatesRel exists)
					LocalProjectDateRange.Begin			= PeriodOfPerformanceDatesRel.ProjectBeginDate
					LocalProjectDateRange.End			= PeriodOfPerformanceDatesRel.ProjectEndDate
				constraint (InServiceDate	within LocalProjectDateRange)
					"ItemPurchaseDateIsNotWithinProject<LocalProject>DateRange"


		CalculateProjection
			invoke Delete AssetProjectionRel
			initialize LocalPersonalUse
			initialize LocalProjectionAdjustmentAmount
			initialize LocalPeriodRemainingCurrentYear
			initialize LocalProjectionMonthlyAdjustmentAmount
			LocalCurrectYearProcessed = false
			FromProjection 		= true
			I64 = 1

			TempYearToDateDepreciation			= YearToDateDepreciation
			TempLifeToDateDepreciation			= LifeToDateDepreciation
			TempLifeRemaining					= LifeRemaining
			LocalProjectionsLifeInYears			= DerivedLifeInYears
			T2 = DerivedProjectionsCurrentYear
			LocalProjectionsCurrentYear			= LifeInYears - LifeRemaining /12

			LocalYearEndDate	= BookCalendarRel.YearEndDate
			LocalBusPercent		= 100
			LocalMethodSwitch	= Book.MethodSwitch
			LocalMethod			= Method

			initialize LocalDeprClsPd
			LocalPdPerYear 					= 1
			LocalLife 						= Life
			LocalDeprYTD					= YearToDateDepreciation
			LocalDeprLTD					= LifeToDateDepreciation
			LocalSalvage					= SalvageValue
			LocalRemainingLife				= LifeRemaining
			LocalBasis						= Basis
			LocalConvention					= Convention
			LocalMethTbYear					= YearPlacedInService
			LocalInServiceDate				= InServiceDate
			LocalAsset						= AssetBook.Asset
			LocalBook						= Book
			LocalCompany					= Asset.Company

			if (LocalRemainingLife not entered)
				LocalRemainingLife = LocalLife
			LocalOptMethod = MethodRel.DepreciationOptimizingMethod

			if (LocalMethTbYear not entered
			and MethodRel.RecordType != "C")
				LocalMethTbYear = 1

			LocalYearEndDate		= BookYearEndDate
			LocalYearBeginDate		= BookYearBeginDate
			LocalPrevYearEndDate	= BookYearBeginDate - 1 day
			include 550InsrDate
			LocalStartDate			= LocalInsDate

			if (PersonalUseCode entered)
				I2 = 1
				while (I2 < 21)
					LocalTotalLimits += PersonalUseCode.DepreciationLimitArray.DepreciationLimitGroup[I2].DepreciationLimit
					I2 +=1


			T1 = LifeInYears - LifeRemaining /12
			LocalAccumulatedDepreciation	= LifeToDateDepreciation - YearToDateDepreciation
			if (InServiceDate > CurrentBookCalendarRel.YearEndDate)
				FirstAndLastYear = "F"
			if (Convention.ActualDays)
				if (SpreadOverRemainingLife)
					LocalRemainingLife = LifeRemaining
				else
					if (CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed > 0)
						if (InServiceDate > CurrentBookCalendarRel.YearBeginDate
						and InServiceDate < CurrentBookCalendarRel.YearEndDate)
							LocalNumberOfDaysClosed = CurrentBookCalendarRel.LastPeriodDate - InServiceDate
						else
							LocalNumberOfDaysClosed = CurrentBookCalendarRel.LastPeriodDate - CurrentBookCalendarRel.YearBeginDate
							LocalNumberOfDaysClosed += 1
					LocalNumberOfDaysYear = CurrentBookCalendarRel.YearEndDate - CurrentBookCalendarRel.YearBeginDate
					LocalNumberOfDaysYear += 1
					if (CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed > 0)
						if (InServiceDate > CurrentBookCalendarRel.LastPeriodDate
						and InServiceDate <=CurrentBookCalendarRel.YearEndDate)
							LocalRemainingLife = LifeRemaining
						else
							if (!FirstAndLastYear = blank)
								LocalRemainingLife = LifeRemaining + ((LocalNumberOfDaysClosed * 12)/LocalNumberOfDaysYear)
							else
								LocalRemainingLife = LifeRemaining
					else
						LocalRemainingLife = LifeRemaining
			else
				if (SpreadOverRemainingLife)
					LocalRemainingLife = LifeRemaining
				else
					if (!(LifeRemaining not entered
					and PersonalUseCode entered
					and FirstAndLastYear.PostRecovery
					or FirstAndLastYear = blank))
						LocalRemainingLife				= (LifeRemaining + (CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed * 12)/CurrentBookCalendarRel.DepreciationPeriodsPerYear)
					else
						LocalRemainingLife				= LifeRemaining


			if(Method = "100%BONUS")
				if(InServiceDate > CurrentBookCalendarRel.LastPeriodDate)
                    LocalProjectionsLifeInYears = 1
				else
					LocalProjectionsLifeInYears = 0

			if(!Convention.ActualDays)
				round LocalRemainingLife to nearest 0.001
			while (T1 < LocalProjectionsLifeInYears
			or (Basis > LocalAccumulatedDepreciation

			and PersonalUseCode entered
			and PersonalUseCode.AllowPostRecoveryDeduction))
				if (FirstAndLastYear.First
				and LocalProjectionsCurrentYear = T1)
					AnnualDepreciation.LocalProgram = "Proj"
					include 640FirstYearDepr
					if (InServiceDate > CurrentBookCalendarRel.YearEndDate)
						FirstAndLastYear = ""
					if (IsCustomMethod
					or IsPercentTable)
						LocalAnnualDepreciation	= CalculationAmount
						YearToDateDepreciation	= TempYearToDateDepreciation
						LifeToDateDepreciation	= TempLifeToDateDepreciation

					if (!LocalProcessedMonths = 12
					and LocalMethod = "SYD")
						TempLocalAnnualDepreciation 	= LocalAnnualDepreciation
						include SYDCalculation
						LocalShortYearAmount			= LocalAnnualDepreciation - TempLocalAnnualDepreciation
						LocalAnnualAddition				= LocalShortYearAmount / (Life /12)
						LocalAnnualDepreciation			= TempLocalAnnualDepreciation

					if (LocalMethod 	= "SL30%"
					or LocalMethod		= "200DB30%"
					or LocalMethod		= "150DB30%"
					or LocalMethod		= "100%BONUS"
					or LocalMethod		= "SL50%"
					or LocalMethod		= "200DB50%"
					or LocalMethod		= "150DB50%"
					or LocalMethod		= "SL20%"
					or LocalMethod		= "200DB20%"
					or LocalMethod		= "150DB20%"
					or LocalMethod		= "SL40%"
					or LocalMethod		= "200DB40%"
					or LocalMethod		= "150DB40%"
					or LocalMethod		= "SL60%"
					or LocalMethod		= "200DB60%"
					or LocalMethod		= "150DB60%"
					or LocalMethod		= "SL75%"
					or LocalMethod		= "200DB75%"
					or LocalMethod		= "150DB75%"
					or LocalMethod		= "SL80%"
					or LocalMethod		= "200DB80%"
					or LocalMethod		= "150DB80%")
						LocalDeprBonus	= AnnualDepreciation.LocalDeprBonus
						LocalAnnualDepreciation = LocalAnnualDepreciation + LocalDeprBonus
					if(Convention.ModifiedHalfYear
					and DepreciationStartDate > InServiceDate)
						LocalAnnualDepreciation = 0
					LocalRemainingLife = Life - LocalMonthsFirstYear
					LocalAccumulatedDepreciation = LocalAnnualDepreciation
					LocalCurrectYearProcessed = true
					LocalProjectionAmount = LocalAccumulatedDepreciation - YearToDateDepreciation
					if (YearToDateDepreciation != LifeToDateDepreciation - LocalDeprBonus
					and !IsAnDBMethod)
						LocalPeriodRemainingCurrentYear 			= 12 - CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed
						LocalProjectionMonthlyAdjustmentAmount 		= LifeToDateDepreciation - YearToDateDepreciation
						LocalProjectionMonthlyAdjustmentAmount  	= LocalProjectionAdjustmentAmount / LifeRemaining
						LocalProjectionAdjustmentAmount				= LocalProjectionMonthlyAdjustmentAmount * 12
						LocalFirstYearProjectionAdjustmentAmount 	= LocalProjectionMonthlyAdjustmentAmount * LocalMonthsFirstYear
						LocalProjectionAmount	= LocalProjectionAmount - LocalFirstYearProjectionAdjustmentAmount
					LocalAccumulatedProjections += LocalProjectionAmount
					include CreateAssetProjection
					if (IsAnDBMethod)
						if (YearToDateDepreciation != LifeToDateDepreciation)
							LocalAccumulatedDepreciation += (LifeToDateDepreciation - YearToDateDepreciation)
				else
					LocalMethTbYear = T1
					initialize LocalBasisReductionPercentage
					if (AssetTaxCreditTable entered)
						if (AssetTaxCreditRel exists
						and AssetTaxCreditRel.BasisReductionPercentage entered)
							LocalBasisReductionPercentage = Basis * (AssetTaxCreditRel.BasisReductionPercentage/100)

					LocalBasis	= Basis - FirstYearExpenseAmount - LocalBasisReductionPercentage - SalvageValue
					if (IsAnDBMethod)
						if (!(PersonalUseCode entered
						and LocalRemainingLife <=0
						and PersonalUseCode.AllowPostRecoveryDeduction))
							include DBCalculation
							if (Convention.FullYear
							or (Convention.ModifiedHalfYear
							and DepreciationStartDate !> InServiceDate))
								if (T2 = LocalProjectionsLifeInYears-1)
									LocalAnnualDepreciation	= LocalBasis - LocalAccumulatedDepreciation
							else
								if (T2 = LocalProjectionsLifeInYears)
									LocalAnnualDepreciation	= LocalBasis - LocalAccumulatedDepreciation
							if (Book.MethodSwitch)
								LocalDeprCompare	= LocalAnnualDepreciation
								if (LocalAnnualDepreciation >= (LocalBasis - LocalAccumulatedDepreciation))
									LocalAnnualDepreciation	= LocalBasis - LocalAccumulatedDepreciation
								else
									LocalAnnualDepreciation		= ((Basis - LocalAccumulatedDepreciation) / LocalRemainingLife)
									LocalAnnualDepreciation		= LocalAnnualDepreciation * 12
									if (PersonalUseCode not entered)
										LocalRemainingLife = LocalRemainingLife - 12

								if (FirstAndLastYear != "P")
									if ((LocalAnnualDepreciation entered
									and LocalAnnualDepreciation not > LocalDeprCompare)
									or	(LocalAnnualDepreciation not entered
									and LocalAnnualDepreciation not < LocalDeprCompare))
										LocalAnnualDepreciation	=  LocalDeprCompare

						if (PersonalUseCode entered)
							if (LocalAnnualDepreciation >= (LocalBasis - LocalAccumulatedDepreciation))
								LocalAnnualDepreciation	= LocalBasis - LocalAccumulatedDepreciation
							else
								LocalRemainingLife = LocalRemainingLife - 12

					if (IsAnSLMethod)
						if (!(PersonalUseCode entered
						and LocalRemainingLife <=0
						and PersonalUseCode.AllowPostRecoveryDeduction))
							if (Convention.ActualDaysFirstMonth)
								include ADFMCalculation
							else
								include SLCalculation
						LocalRemainingLife = LocalRemainingLife - 12
						if (LocalBasis > 0)
							if (LocalAnnualDepreciation >= (LocalBasis - LocalAccumulatedDepreciation))
								LocalAnnualDepreciation	= LocalBasis - LocalAccumulatedDepreciation
						else
							if (LocalAnnualDepreciation <= (LocalBasis - LocalAccumulatedDepreciation))
								LocalAnnualDepreciation	= LocalBasis - LocalAccumulatedDepreciation

					if(LocalMethod = "SYD")
						if(!IsNotFirstProjection)
							if(Convention.ActualDays
							or Convention.MidQuarter)
								LocalPortionOfYear = (Life - LocalRemainingLife)
								LocalPortionOfYear /= 12
							else
								if(Convention.FullYear)
									LocalPortionOfYear = 1
								else
								if(Convention.HalfYear)
									LocalPortionOfYear = 0.5
								else
								if(Convention.ModifiedHalfYear)
									if(DepreciationStartDate > InServiceDate)
										LocalPortionOfYear					= 0
									else
										LocalPortionOfYear					= 1
								else
									AnnualDepreciation.InDepreciationStartDate	= DepreciationStartDate
									AnnualDepreciation.LocalProgram	= "Proj"
									AnnualDepreciation.InMethod	= "SYD"
									LocalPortionOfYear = AnnualDepreciation.FirstYearInServicePeriods
									if(CurrentBookCalendarRel.DepreciationPeriodsPerYear > 12)
										LocalPortionOfYear = AnnualDepreciation.LocalFirstYearCalcPeriods
									LocalPortionOfYear /= CurrentBookCalendarRel.DepreciationPeriodsPerYear
								if(Convention.ModifiedHalfMonth
								and !CurrentBookCalendarRel.DepreciationPeriodsPerYear > 12)
									if(IsInPriorYearLastPeriod)
										LocalPortionOfYear = 0
									if(DerivedNumberOfYearsPriorForHM>2)
										LocalPortionOfYear += (DerivedNumberOfYearsPriorForHM - 2)
								else
								if(T2>2)
									LocalPortionOfYear += (T2 - 2)

							LocalYearValue = LocalPortionOfYear
							IsNotFirstProjection = true
						else
							LocalYearValue += 1
						if (!(PersonalUseCode entered
						and LocalRemainingLife <=0
						and PersonalUseCode.AllowPostRecoveryDeduction))
							include SYDCalculation
						LocalRemainingLife = LocalRemainingLife - 12
						if(T2 = LocalProjectionsLifeInYears)
							LocalAnnualDepreciation	= LocalBasis - LocalAccumulatedDepreciation




					if (PersonalUseCode entered
					and LocalMethTbYear <= 20)
						TranLocalAnnualDepreciation = LocalAnnualDepreciation
						if (LocalRemainingLife  <= 0)
							if (PersonalUseCode.AllowAnnualDepreciationLimit
							and LocalTotalLimits entered
							and PersonalUseCode.DepreciationLimitArray.DepreciationLimitGroup[LocalMethTbYear].DepreciationLimit < (LocalBasis - LocalAccumulatedDepreciation))
								LocalAnnualDepreciation	= PersonalUseCode.DepreciationLimitArray.DepreciationLimitGroup[LocalMethTbYear].DepreciationLimit
							else
								LocalAnnualDepreciation	= LocalBasis - LocalAccumulatedDepreciation
						else
							include CalculatePUAnnualDepreciation
					if (IsCustomMethod
					or IsPercentTable)
						LifeToDateDepreciation			= LocalAccumulatedDepreciation
						YearToDateDepreciation			= "0"
						LifeRemaining					= LocalRemainingLife
						LocalAnnualDepreciation			= CalculationAmount
						LocalRemainingLife = LocalRemainingLife - 12
					if (LocalCurrectYearProcessed)
						if (IsCustomMethod
						or IsPercentTable)
							LocalProjectionAmount		= LocalAnnualDepreciation
						else
							LocalProjectionAmount		= LocalAnnualDepreciation - LocalProjectionAdjustmentAmount
						LocalAccumulatedProjections 	+= LocalProjectionAmount
						LocalAccumulatedDepreciation	= LocalAccumulatedDepreciation + LocalAnnualDepreciation
						include CreateAssetProjection
					else
						if (LocalProjectionsCurrentYear = T1)
							LocalCurrectYearProcessed = true
							if (IsCustomMethod
							or IsPercentTable)
								YearToDateDepreciation	= TempYearToDateDepreciation
								LifeToDateDepreciation	= TempLifeToDateDepreciation
							LocalProjectionAmount 			= LocalAnnualDepreciation - YearToDateDepreciation











							LocalAccumulatedProjections		+= LocalProjectionAmount
							LocalAccumulatedDepreciation 	+= LocalAnnualDepreciation
							include CreateAssetProjection



				T2 = T2 + 1
				T1 = T1 + 1
			if (IsCustomMethod
			or IsPercentTable)
				YearToDateDepreciation	= TempYearToDateDepreciation
				LifeToDateDepreciation	= TempLifeToDateDepreciation
			if (LocalCurrectYearProcessed
			and LocalBasisReductionPercentage entered
			and LocalAccumulatedProjections != BasisReductionBookValue - SalvageValue)
				LocalProjectionAmount = BasisReductionBookValue - LocalAccumulatedProjections - SalvageValue
				if (LocalProjectionAmount > 0.05)
					include CreateAssetProjection
			else
				if (LocalCurrectYearProcessed
				and LocalAccumulatedProjections != BookValue - SalvageValue)
					if (LocalBasis != LocalAccumulatedDepreciation)
						if (PersonalUseCode entered
						and !PersonalUseCode.AllowPostRecoveryDeduction
						and T1 <= 20)
							if (PersonalUseCode.AllowAnnualDepreciationLimit
							and LocalTotalLimits entered
							and PersonalUseCode.DepreciationLimitArray.DepreciationLimitGroup[T1].DepreciationLimit < (LocalBasis - LocalAccumulatedDepreciation - SalvageValue))
								LocalProjectionAmount = PersonalUseCode.DepreciationLimitArray.DepreciationLimitGroup[T1].DepreciationLimit
							else
								LocalProjectionAmount = BookValue - LocalAccumulatedProjections - SalvageValue
						else
							LocalProjectionAmount = BookValue - LocalAccumulatedProjections - SalvageValue
						if (LocalProjectionAmount > 0.05)
							include CreateAssetProjection

		CalculatePUAnnualDepreciation
			if (PersonalUseCode.AllowAnnualDepreciationLimit)
				if (LocalTotalLimits entered)
					if (TranLocalAnnualDepreciation entered)
						if (PersonalUseCodeRel.DepreciationLimitArray.DepreciationLimitGroup[LocalMethTbYear].DepreciationLimit < TranLocalAnnualDepreciation)
							LocalDeprCompare	= PersonalUseCodeRel.DepreciationLimitArray.DepreciationLimitGroup[LocalMethTbYear].DepreciationLimit
						else
							LocalDeprCompare	= TranLocalAnnualDepreciation
					else
						LocalDeprCompare		= PersonalUseCodeRel.DepreciationLimitArray.DepreciationLimitGroup[LocalMethTbYear].DepreciationLimit

					if ((TranLocalAnnualDepreciation entered
					and LocalDeprCompare		< TranLocalAnnualDepreciation)
					or  (TranLocalAnnualDepreciation <= 0
					and LocalDeprCompare		> TranLocalAnnualDepreciation))
						LocalAnnualDepreciation	= LocalDeprCompare
					else
						LocalAnnualDepreciation = TranLocalAnnualDepreciation

		PeriodsFirstYear
			initialize NumberOfPeriodsFirstYear
			MonthsProcessed.InServiceDate	 		= InServiceDate
			MonthsProcessed.InDeprStartDate			= InServiceDate
			MonthsProcessed.InYearBeginDate			= LocalYearBeginDate
			MonthsProcessed.InPrevYearEndDate		= LocalPrevYearEndDate
			MonthsProcessed.InYearEndDate			= LocalYearEndDate
			MonthsProcessed.Convention				= Convention
			MonthsProcessed.InLife					= Life
			MonthsProcessed.LastPeriodEnd			= LocalYearEndDate
			MonthsProcessed.InBook					= Book
			MonthsProcessed.InCompany				= Company
			NumberOfPeriodsFirstYear				= MonthsProcessed.ReturnNumberOfMonthsProcessed

		SYDCalculation
			LocalLifeInYrs				= Life /12
			LocalSumOfYrs				= ((LocalLifeInYrs * (LocalLifeInYrs +1)) / 2)
			LocalNumberYearsRemaining	= (LocalRemainingLife /12)
			LocalDigitsValueNumberYears	= LocalNumberYearsRemaining
			if(LocalYearValue < LocalLifeInYrs)
				LocalAnnualDepreciation		= ((LocalLifeInYrs-LocalYearValue)*LocalBasis)
				LocalAnnualDepreciation		/=	LocalSumOfYrs
			else
				LocalAnnualDepreciation     = 0

		SLCalculation
			LocalRoundedAnnualDepreciation		= LocalBasis - LocalAccumulatedDepreciation
			LocalRoundedAnnualDepreciation		= LocalRoundedAnnualDepreciation / LocalRemainingLife
			LocalAnnualDepreciation				= LocalRoundedAnnualDepreciation * 12

		ADFMCalculation
			LocalRoundedAnnualDepreciation		= Basis / Life
			LocalAnnualDepreciation				= LocalRoundedAnnualDepreciation * 12

		SLFurtureAnnualDepreciationCalculation
			if (AssetBookAdjustmentsRel exists)
				if (LocalCurrectYearProcessed
				or (LocalProjectionsCurrentYear = T1))
					LocalBasis					= last AssetBookAdjustmentsRel.Basis
					LocalLife 					= Life
					include SLCalculation
					LocalMonthlyDepreciation	= LocalAnnualDepreciation
					LocalBasis					= Basis - last AssetBookAdjustmentsRel.Basis
					LocalLife 					= LifeRemaining + CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed
					include SLCalculation
					LocalAnnualDepreciation 	+= LocalMonthlyDepreciation
				else
					LocalLife 	= Life
					LocalBasis	= last AssetBookAdjustmentsRel.Basis
					include SLCalculation
			else
				LocalLife 	= Life

				include SLCalculation

		DBCalculation
			LocalRoundedAnnualDepreciation 	= LocalBasis - LocalAccumulatedDepreciation
			LocalRoundedAnnualDepreciation	= LocalRoundedAnnualDepreciation / Life
			LocalRoundedAnnualDepreciation	= LocalRoundedAnnualDepreciation * 12
			LocalRoundedAnnualDepreciation	= LocalRoundedAnnualDepreciation * DerivedDBPercent
			LocalAnnualDepreciation 		= LocalRoundedAnnualDepreciation

		CreateAssetProjection
			if (LocalProjectionAmount != 0)
				invoke Create AssetProjection
					invoked.FinanceEnterpriseGroup						= Asset.FinanceEnterpriseGroup
					invoked.Actor										= actor
					invoked.Company										= LocalCompany
					invoked.Book										= LocalBook
					invoked.Asset										= LocalAsset
					invoked.Method										= LocalMethod
					invoked.AssetProjection.Period						= T2
					invoked.DepreciationAmount							= LocalProjectionAmount

		550InsrDate
			AnnualDepreciation.InBook					= Book
			AnnualDepreciation.InAsset					= Asset
			if (LocalInServiceDate entered)
				AnnualDepreciation.InServiceDate		= LocalInServiceDate
			else
				if (InServiceDate entered)
					AnnualDepreciation.InServiceDate	= InServiceDate
				else
					AnnualDepreciation.InServiceDate	= Asset.LastAssetItemPurchaseDate
			AnnualDepreciation.InYearEndDate			= LocalYearEndDate
			AnnualDepreciation.InYearBeginDate			= LocalYearBeginDate
			AnnualDepreciation.Convention				= LocalConvention
			AnnualDepreciation.InPrevYearEndDate		= LocalPrevYearEndDate
			AnnualDepreciation.InCompany				= LocalCompany
			LocalInsDate								= AnnualDepreciation.AdjustInsrvDate
			DepreciationStartDate						= AnnualDepreciation.AdjustInsrvDate

		580AnnualDepreciation
			AnnualDepreciation.InBook					= Book
			AnnualDepreciation.InMethod					= LocalMethod
			AnnualDepreciation.InTableYear				= LocalMethTbYear
			AnnualDepreciation.InYearBeginDate			= LocalYearBeginDate
			AnnualDepreciation.Convention				= LocalConvention
			AnnualDepreciation.InServiceDate			= LocalInsDatek
			AnnualDepreciation.InPrevYearEndDate		= LocalPrevYearEndDate
			AnnualDepreciation.InDepreciationStartDate	= InServiceDate
			AnnualDepreciation.InCompany				= LocalCompany
			AnnualDepreciation.InBasis					= LocalBasis
			AnnualDepreciation.InSalvageValue			= LocalSalvage
			AnnualDepreciation.InLife					= LocalLife
			AnnualDepreciation.InLifeRemaining			= LocalLifeRem
			AnnualDepreciation.InLTDDepr				= LocalDeprLTD
			AnnualDepreciation.InYTDDepr				= LocalDeprYTD
			AnnualDepreciation.InBusinessPercent		= LocalBusPercent
			AnnualDepreciation.FromProjection			= FromProjection
			LocalAnnualDepreciation						= AnnualDepreciation.ComputeAnnualDepreciation

		640FirstYearDepr

			if (HistoryYearBookCalendarsRel2 exists)
				LocalPrevYearEndDate					= HistoryYearBookCalendarsRel2.YearBeginDate
			else
				LocalPrevYearEndDate					= LocalHistoryYearEndDate
			LocalPrevYearEndDate						= LocalPrevYearEndDate - 1 day
			AnnualDepreciation.InFirstAndLastYear		= "F"
			AnnualDepreciation.InBook					= Book
			AnnualDepreciation.InAsset					= LocalAsset
			AnnualDepreciation.InCompany				= LocalCompany
			AnnualDepreciation.InServiceDate			= InServiceDate
			AnnualDepreciation.InDepreciationStartDate	= LocalInsDate
			if(HistoryYearBookCalendarsRel2 exists)
				AnnualDepreciation.InYearBeginDate		= HistoryYearBookCalendarsRel2.YearBeginDate
				AnnualDepreciation.InYearEndDate		= HistoryYearBookCalendarsRel2.YearEndDate
			else
				if (InServiceDate > CurrentBookCalendarRel.YearEndDate)
					LocalFutureYearEndDate = CurrentBookCalendarRel.YearEndDate
					while LocalFutureYearEndDate <= LocalInServiceDate
						LocalDifference += 1
						LocalFutureYearEndDate	= LocalFutureYearEndDate + 1 year				
					AnnualDepreciation.InYearBeginDate		= CurrentBookCalendarRel.YearBeginDate + LocalDifference as years
					AnnualDepreciation.InYearEndDate		= CurrentBookCalendarRel.YearEndDate + LocalDifference as years
				else
					AnnualDepreciation.InYearBeginDate		= LocalHistoryYearBeginDate + 1 year
					AnnualDepreciation.InYearEndDate		= LocalHistoryYearEndDate + 1 year
			AnnualDepreciation.InPrevYearEndDate		= LocalPrevYearEndDate
			AnnualDepreciation.InMethod					= LocalMethod
			AnnualDepreciation.Convention				= LocalConvention
			AnnualDepreciation.InLife					= LocalLife
			AnnualDepreciation.InBusinessPercent		= LocalBusPercent
			AnnualDepreciation.InStartDate				= InServiceDate
			if (AssetBookAdjustmentsRel exists
			and InServiceDate < last AssetBookAdjustmentsRel.AdjustmentDate)
				AnnualDepreciation.InBasis				= last AssetBookAdjustmentsRel.Basis
			else
				AnnualDepreciation.InBasis				= LocalBasis
			AnnualDepreciation.FromProjection			= FromProjection
			LocalRoundedAnnualDepreciation				= AnnualDepreciation.FirstYearDepreciation
			LocalAnnualDepreciation						= LocalRoundedAnnualDepreciation
			if (Convention.ActualDays
			and InServiceDate > CurrentBookCalendarRel.LastPeriodDate)
				LocalAnnualDepreciation					= AnnualDepreciation.LocalFirstYearDepreciation
			if (Convention.ModifiedHalfYear
			or Convention.FullYear)
				AnnualDepreciation.InServiceDate		= BookYearBeginDate
			LocalMonthsFirstYear						= AnnualDepreciation.FirstYearInServicePeriods
			if(Convention.ModifiedHalfYear)
				if(DepreciationStartDate > InServiceDate)
					LocalMonthsFirstYear					= 0
				else
					LocalMonthsFirstYear					= 12
			if (CurrentBookCalendarRel.DepreciationPeriodsPerYear > 12
			and !InServiceDate < CurrentBookCalendarRel.YearBeginDate)
				if (Convention.NextMonth
				or Convention.MidMonth
				or Convention.MidQuarter
				or Convention.ActualDays
				or Convention.ModifiedHalfMonth)
					LocalMonthsFirstYear					= AnnualDepreciation.NumberOfPeriodsFirstYear
				else
					LocalMonthsFirstYear = LocalMonthsFirstYear *12/CurrentBookCalendarRel.DepreciationPeriodsPerYear
					round LocalMonthsFirstYear to nearest 0.001
			if (Convention.HalfYear)
				LocalMonthsFirstYear					= 6

		DepreciationValues
			if (InServiceDate > CurrentBookCalendarRel.LastPeriodDate
			and !LocalSkipDefaulting)
				LifeRemaining = Life
			if (InServiceDate > BookLastPeriodDate)
				YearPlacedInService = AnnualDepreciation.CalcNumberOfYearsInService
			else
				LocalYearEndDate						= BookYearEndDate
				LocalYearBeginDate						= BookYearBeginDate
				LocalPrevYearEndDate					= BookYearBeginDate - 1 day
				LocalCompany							= Asset.Company
				LocalConvention							= Convention
				include 550InsrDate

				if (Asset.WorkInProcess
				or Asset.AssetCategory.NonDepreciable)
					if (YearToDateDepreciation entered
					or YearToDateDepreciationAllowed entered
					or LifeToDateDepreciation entered
					or LifeToDateDepreciationAllowed entered)
						if (Asset.TransientCategoryUpdate = false
						and !ResetAdjustment)
							if(!(UnreleasedAssetAdjustmentRel exists
							and Active changed))
								confirmation required
									"YearToDateAndOrLifeToDateDepreciationCannotBeEnteredOnA_WIPOrNonDepreciableAsset;ClearTheseValuesAndProceed?"
								initialize YearToDateDepreciation
								initialize YearToDateDepreciationAllowed
								initialize LifeToDateDepreciation
								initialize LifeToDateDepreciationAllowed
				else
					if (ComputeOption = "P")
						include ComputeProspectiveDepr
					if (!ComputeOption = "Y")
						if(!TransientYearPlacedInServiceEntered)
							YearPlacedInService =  AnnualDepreciation.CalcNumberOfYearsInService
					else
						if ((ComputeOption = "Y"
						or LocalAddMemoAccounts)
						and (UnreleasedAssetAdjustmentRel.NewAssetItemsAdded
						or YearToDateDepreciation not entered
						or LifeToDateDepreciation not entered))
							include ComputeDepreciation

		ComputeDepreciation
			if (Basis not entered
			and NoZeroBasisChange)
				Basis = Asset.ItemTotalTransactionCost
			if (Book.PostCurrency.Book)
				LocalFromCurrency           				= Book.Currency
			else
				LocalFromCurrency           				= Asset.Currency
			initialize LifeToDateDepreciation
			LocalPrevYearEndDate	= BookYearBeginDate - 1 day
			I2	= 1
			while (I2 <= 55)
				if (CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[I2] entered)
					LocalNumberCalPd	= I2
				I2 += 1
			if (Active)
				AnnualDepreciation.InFirstAndLastYear		= "F"
				AnnualDepreciation.InAsset					= Asset
				AnnualDepreciation.InBook					= Book
				AnnualDepreciation.Convention				= Convention
				AnnualDepreciation.InYearEndDate			= BookYearEndDate
				AnnualDepreciation.InYearBeginDate			= BookYearBeginDate
				AnnualDepreciation.InServiceDate			= InServiceDate
				AnnualDepreciation.InPersonalUseCode		= PersonalUseCode
				AnnualDepreciation.InPrevYearEndDate		= LocalPrevYearEndDate
				AnnualDepreciation.LocalMethodSW			= Book.MethodSwitch
				AnnualDepreciation.InBasis					= Basis	
				AnnualDepreciation.LocalProgram				= "AM20"	
				AnnualDepreciation.LocalSLCalculation		= MethodRel.StraightLineDepreciationMethod 
				AnnualDepreciation.InTableYear				= LocalMethTbYear
				AnnualDepreciation.InFirstAndLastYear		= FirstAndLastYear  
				AnnualDepreciation.DepreciationEndDate		= DepreciationEndDate
				AnnualDepreciation.LocalNbrCalPd			= LocalNumberCalPd
				LocalDeprSave								= AnnualDepreciation.ComputeBookDepreciation 
				if (!ImpairmentBookLifeRemaining)
					LifeRemaining							= AnnualDepreciation.LocalLifeRemaining
				YearPlacedInService							= AnnualDepreciation.CalcNumberOfYearsInService
				if (Convention.ModifiedHalfMonth)
					YearPlacedInService						= AnnualDepreciation.CalcNumberOfYearsInServiceForHM
				if ((Asset.Status.Released
				or Asset.Status.PostRelease)
				and ComputeOption = "Y"
				and !AssetBookAdjustmentRel.Active)
					LifeRemaining 				-= YearToDateInactiveMonths
					LifeToDateInactiveMonths	-= YearToDateInactiveMonths
					initialize YearToDateInactiveMonths
				if (!AssetCompanyRel.CalculateRemainingLife
				and LifeRemaining changed)
					LifeRemaining = old LifeRemaining
				if (Basis - SalvageValue - FirstYearExpenseAmount - AnnualDepreciation.LocalDeprLTD = 0
				and LifeRemaining = 0)
					if (Method entered)
						FirstAndLastYear = "C"
					else
						FirstAndLastYear = blank
				if (YearToDateInactiveMonths = BookNumberOfDepreciationPeriodsClosed
				and YearToDateInactiveMonths entered
				and YearToDateDepreciation entered)
					LifeToDateDepreciation -= YearToDateDepreciation
					initialize YearToDateDepreciation
				 	initialize YearToDateDepreciationAllowed
				else
					if (Asset.AssetProcess.Adjustment)
						if (!AssetCompanyRel.CalculateRemainingLife)
							LocalBeginYearLife	= (((LifeRemaining * BookDepreciationPeriodsPerYear) + (BookNumberOfDepreciationPeriodsClosed * 12))/ 12)
							if (LocalBeginYearLife > Life)
								LocalBeginYearLife = Life

							if (InServiceDate >= BookYearBeginDate)
								if (InServiceDate <= BookYearEndDate
								and LifeRemaining not entered)
									if (Method entered)
										FirstAndLastYear = "C"
									else
										FirstAndLastYear = blank
								else
									AnnualDepreciation.InAsset					= Asset
									AnnualDepreciation.InBook					= Book
									AnnualDepreciation.InYearEndDate			= BookYearEndDate
									AnnualDepreciation.InYearBeginDate			= BookYearBeginDate
									AnnualDepreciation.InServiceDate			= InServiceDate
									AnnualDepreciation.InPrevYearEndDate		= LocalPrevYearEndDate
									AnnualDepreciation.InLife					= LocalBeginYearLife
									LocalMonthsProcessed						= AnnualDepreciation.FirstYearMonths

									if (Convention.MidMonth)
										if ((Life < LocalMonthsProcessed)
										and (InServiceDate <= BookYearEndDate)
										and (LifeToDateDepreciation not entered)
										or ((LifeRemaining <= (((BookDepreciationPeriodsPerYear - BookNumberOfDepreciationPeriodsClosed)/BookDepreciationPeriodsPerYear)*12))
										and ((LifeToDateDepreciation entered)
										or	(YearToDateDepreciation entered))))
											FirstAndLastYear	= "L"
										else
											FirstAndLastYear	= "F"
									else
										if (((Life <= LocalMonthsProcessed)
										and (InServiceDate <= BookYearEndDate)
										and (LifeToDateDepreciation not entered))
										or  ((LifeRemaining <= (((BookDepreciationPeriodsPerYear - BookNumberOfDepreciationPeriodsClosed)/BookDepreciationPeriodsPerYear)*12))
										and ((LifeToDateDepreciation entered)
										and (YearToDateDepreciation entered))))
											FirstAndLastYear	= "L"
										else
											FirstAndLastYear	= "F"
							else
								if (PersonalUseCode.AllowPostRecoveryDeduction)
									FirstAndLastYear = "P"
								else
									if ((LifeRemaining not entered)
									and (!Method = "UOP"))
										FirstAndLastYear	= "C"
									else
										if ((!LocalBeginYearLife > 12)
										and (!Method = "UOP"))
											FirstAndLastYear	= "L"
										else
											FirstAndLastYear	= "M"

				if (FirstAndLastYear.First)
					if (Method.RecordType.Percent)
						YearToDateDepreciation = AnnualDepreciation.LocalDeprYTD
						LifeToDateDepreciation = AnnualDepreciation.LocalDeprLTD
					else
						initialize YearToDateDepreciation
						initialize LifeToDateDepreciation
						initialize YearToDateDepreciationAllowed
						initialize LifeToDateDepreciationAllowed
						YearToDateDepreciation				= AnnualDepreciation.LocalDeprYTD
						YearToDateDepreciationAllowed		= AnnualDepreciation.LocalDeprYTDAllow
						LifeToDateDepreciationAllowed		= AnnualDepreciation.LocalDeprLTDAllow
						LocalBeginningYearLife				= AnnualDepreciation.LocalBeginYrLife
						LifeToDateDepreciation				= AnnualDepreciation.LocalDeprLTD
						if (AssetCompanyRel.CalculateRemainingLife)
							LifeRemaining						= AnnualDepreciation.LocalLifeRemaining	
				else
					if (ComputeOption = "Y")
						AnnualDepreciation.LocalNumberOfDepreciationPeriodsClosed = LocalDeprClsPd
						AnnualDepreciation.InYTDDepr				= YearToDateDepreciation
						AnnualDepreciation.InYTDDeprAllow			= YearToDateDepreciationAllowed
						if (PersonalUseCode not entered)
							AnnualDepreciation.InLTDDepr			= LifeToDateDepreciation
							AnnualDepreciation.InLTDDeprAllow		= LifeToDateDepreciationAllowed
							if (FirstAndLastYear.Middle)

								LocalADInYTDDepr					= LocalAnnualDepreciation
								LocalADInYTDDepr					= LocalADInYTDDepr * AnnualDepreciation.LocalNumberOfDepreciationPeriodsClosed
								LocalADInYTDDeprAllow				= LocalAnnualDepreciation
								LocalADInYTDDeprAllow				= LocalADInYTDDeprAllow * AnnualDepreciation.LocalNumberOfDepreciationPeriodsClosed
						else
							AnnualDepreciation.InAsset				= Asset
							AnnualDepreciation.InBook				= Book
							if (PersonalUseHistoryRel exist)
								if (BusinessPercent < 100)
									LoaclADInLTDDeprAllow			= (LocalAnnualDepreciation * BusinessPercent)
									LoaclADInLTDDeprAllow			/= 100
								LoaclADInLTDDeprAllow				= LoaclADInLTDDeprAllow + YearToDateDepreciationAllowed
								AnnualDepreciation.InLTDDeprAllow	= LoaclADInLTDDeprAllow
							if (FirstAndLastYear.Middle)

								LocalADInYTDDepr					= (LocalAnnualDepreciation / AnnualDepreciation.LocalPUAnnualDepreciation)
								LocalADInYTDDepr					= LocalADInYTDDepr * AnnualDepreciation.LocalNumberOfDepreciationPeriodsClosed
								LocalADInYTDDeprAllow				= (AnnualDepreciation.LocalPUAnnualDepreciation / AnnualDepreciation.LocalPUAnnualDepreciation)
								LocalADInYTDDeprAllow				= LocalADInYTDDeprAllow * AnnualDepreciation.LocalNumberOfDepreciationPeriodsClosed
							else
								if (FirstAndLastYear.Last)
									LocalAnnualDepreciation			= AnnualDepreciation.LastYearDepreciation
									LocalBeginYearLife				= AnnualDepreciation.LocalBeginYrLife
									LocalADInYTDDepr				= AnnualDepreciation.LocalDeprCP
									LocalADInYTDDeprAllow			= AnnualDepreciation.LocalDeprCPAllow

						if (FirstAndLastYear.CompletelyDepreciated)
							LocalADInYTDDepr						= AnnualDepreciation.LocalAdjBasis - LifeToDateDepreciation + YearToDateDepreciation
							LocalADInYTDDeprAllow					= AnnualDepreciation.LocalAdjBasis - LifeToDateDepreciationAllowed + YearToDateDepreciationAllowed
						if (!AdjustPriorYearHistoryTransactions.NoPriorYearAdjustment)
							LifeToDateDepreciation					= AnnualDepreciation.LocalDeprLTD
						else
							if(Asset.AssetProcess.Adjustment)
								LifeToDateDepreciation					= AssetBookAdjustmentRel.LifeToDateDepreciation - AssetBookAdjustmentRel.YearToDateDepreciation + AnnualDepreciation.LocalDeprYTD
							else
								LifeToDateDepreciation					= AnnualDepreciation.LocalDeprLTD
						if (IsLifeRemainingZero)
							YearToDateDepreciation					= AnnualDepreciation.LocalDeprYTD
						YearToDateDepreciationAllowed				= AnnualDepreciation.LocalDeprYTDAllow
						LifeToDateDepreciationAllowed				= AnnualDepreciation.LocalDeprLTDAllow
						LocalBeginningYearLife						= AnnualDepreciation.LocalBeginYrLife
						if (LifeToDateDepreciation entered
						and AssetCompanyRel.CalculateRemainingLife
						and !ImpairmentBookLifeRemaining)
							LifeRemaining							= AnnualDepreciation.LocalLifeRemaining	

						if (YearToDateInactiveMonths entered)
							LifeToDateInactiveMonths				= LifeToDateInactiveMonths - LifeToDateInactiveMonths
							initialize LifeToDateInactiveMonths

						if (YearToDateDisposedMonths entered)
							initialize YearToDateDisposedMonths
							LifeToDateDepreciation						= LifeToDateDepreciation - YearToDateDepreciation + LocalADInYTDDepr
							YearToDateDepreciation						= LocalADInYTDDepr

							LifeToDateDepreciationAllowed				= LifeToDateDepreciationAllowed - YearToDateDepreciationAllowed + LocalADInYTDDeprAllow

							YearToDateDepreciationAllowed				= LocalADInYTDDeprAllow
							YearPlacedInService							= AnnualDepreciation.LocalYearPlacedInService

			if ((FirstAndLastYear 	= "P"
			or   FirstAndLastYear 	= "C")
			and Method				= "100%Bonus")







				if (AnnualDepreciation.LocalDeprYTD not entered
				and AnnualDepreciation.LocalDeprLTD not entered)
					FirstAndLastYear = "F"
					initialize CurrentPeriodDepreciation
					initialize CurrentPeriodDepreciationAllowed
					LocalStopProcessing = true
				else
					if (AnnualDepreciation.LocalDeprLTD = AnnualDepreciation.LocalDeprYTD)
						FirstAndLastYear = "C"
						initialize CurrentPeriodDepreciation
						initialize CurrentPeriodDepreciationAllowed
						LocalStopProcessing = true
			if (!LocalStopProcessing)
				if (((AssetCompanyRel.CalculateRemainingLife = "Y"
				and  ComputeOption = "Y")
				or   Asset.Status.Released)
				and  LifeToDateDepreciation entered
				and !ImpairmentBookLifeRemaining)
					LifeRemaining		= AnnualDepreciation.LocalLifeRemaining
				if ((Asset.Status.Released
				or   Asset.Status.PostRelease)
				and (LocalAction = "C"
				and  AssetCompanyRel.CalculateRemainingLife = "Y"
				and  ComputeOption = "Y")
				and (Active
				and  first AssetBookAdjustmentsRel.Active)
				and  LifeToDateDepreciation entered)
					LifeRemaining		= AnnualDepreciation.LocalLifeRemaining
		ComputeProspectiveDepr
			if (LifeRemaining entered)
				LocalProspDeprPd	=  ((Basis - SalvageValue - LifeToDateDepreciation) / LifeRemaining)
			else
				initialize LocalProspDeprPd

			LocalProspDeprYear		= LocalProspDeprPd * 12
			LocalProspDeprOvr		= LocalProspDeprYear *(1 - BookNumberOfDepreciationPeriodsClosed / BookDepreciationPeriodsPerYear)
			LocalProspDeprOvr		+= YearToDateDepreciation
			LocalProspRemAmt		= Basis - SalvageValue - LifeToDateDepreciation + YearToDateDepreciation

			if (Basis > 0)
				if (LocalProspDeprOvr > LocalProspRemAmt)
					YearToDateDepreciationOverride = LocalProspRemAmt
				else
					YearToDateDepreciationOverride = LocalProspDeprOvr
			else
				if (LocalProspDeprOvr < LocalProspRemAmt)
					YearToDateDepreciationOverride = LocalProspRemAmt
				else
					YearToDateDepreciationOverride = LocalProspDeprOvr

			LocalBeginYearLife	= (((LifeRemaining * BookDepreciationPeriodsPerYear) + (BookNumberOfDepreciationPeriodsClosed * 12))/ BookDepreciationPeriodsPerYear)

			if (LocalBeginYearLife > Life)
				LocalBeginYearLife = Life

			if (BookRel.DepreciationType 	= "C")
				FirstAndLastYear			= "M"
			else
				if (InServiceDate >= BookYearBeginDate
				and !Asset.AssetCategory.NonDepreciable)
					if (InServiceDate <= BookYearEndDate
					and LifeRemaining not entered)
						FirstAndLastYear	= "C"
					else
						AnnualDepreciation.InAsset					= Asset
						AnnualDepreciation.InBook					= Book
						AnnualDepreciation.InYearEndDate			= BookYearEndDate
						AnnualDepreciation.InYearBeginDate			= BookYearBeginDate
						AnnualDepreciation.InServiceDate			= InServiceDate
						AnnualDepreciation.InPrevYearEndDate		= LocalPrevYearEndDate
						LocalMonthsProcessed						= AnnualDepreciation.FirstYearMonths

						if ((Life <= LocalMonthsProcessed
						and InServiceDate <= BookYearBeginDate
						and LifeToDateDepreciation not entered)
						or (LifeRemaining <= BookDepreciationPeriodsPerYear - BookNumberOfDepreciationPeriodsClosed / BookDepreciationPeriodsPerYear * 12
						and (LifeToDateDepreciation entered
						or YearToDateDepreciation entered)))
							FirstAndLastYear	= "L"
						else
							FirstAndLastYear	= "F"
				else
					if (PersonalUseCode.AllowPostRecoveryDeduction)
						FirstAndLastYear	= "P"
					else
						if (LifeRemaining not entered
						and Method != "UOP"
						and !Asset.AssetCategory.NonDepreciable)
							FirstAndLastYear	= "C"
						else
							if (!LocalBeginYearLife > 12
							and Method != "UOP"
							and !Asset.AssetCategory.NonDepreciable)
								FirstAndLastYear	= "L"
							else
								FirstAndLastYear	= "M"

		CreateTransactions 
			increment I11 by 1
			initialize LocalTransactionDate
			initialize LocalCreateASTAssetTransaction
			initialize LocalCreateEXPAssetTransaction
			initialize LocalCreateACMAssetTransaction
			initialize LocalCreateCLRAssetTransaction
			initialize LocalCreateEQUAssetTransaction
			initialize LocalCreateASTAssetBookTransaction
			initialize LocalCreateEXPAssetBookTransaction
			initialize LocalCreateACMAssetBookTransaction
			initialize LocalCreateCLRAssetBookTransaction
			initialize LocalCreateEQUAssetBookTransaction
			initialize LocalASTTransactionAmount
			initialize LocalCLRTransactionAmount
			initialize LocalACMTransactionAmount
			initialize LocalEXPTransactionAmount
			initialize LocalEQUTransactionAmount
			initialize LocalDERTransactionAmount

			if (Book.CurrencyTable entered)
				LocalCurrencyTable	= Book.CurrencyTable
			else
				LocalCurrencyTable	= Asset.CurrencyTable
			if (Asset.AssetProcess.Transfer)
				LocalReference	= "Transfer"
			if (Asset.AssetProcess.Disposal)
				LocalReference	= "Disposal"
			if (Asset.AssetProcess.Adjustment)
				LocalReference	= "Adjustment"
			if (Asset.AssetProcess.Impairment)
				LocalReference 	= "Impairment"
			if (ImpairmentBookOfOrigin entered)
				LocalTransactionDate 	= first LastAssetImpairmentRel.ImpairmentDate
			else
				LocalTransactionDate	= Asset.LastAssetItemPurchaseDate




			if (Asset.AssetProcess.Adjustment)
				if (!ResetAdjustment)
					if (CompanySystemClosingControlRel exists
					and CompanySystemClosingControlRel.Control = true)
						constraint (UnreleasedAssetAdjustmentRel.PostingDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostingDateIsOutsideSystemControlValidEntryDateRange"

			if (IsPostingBook)
				if (!Asset.Status.Unreleased)
					if (ImpairmentBookOfOrigin entered)
						PreviousACMAdjustment	= sum UnreleasedIMTTransactionsRel.TransactionAmount
					else
						if(!AccountFieldsAdjusted
						and TransientProgram != "AssetCompute")
							PreviousACMAdjustment	= sum UnreleasedACMTransactionsRel.TransactionAmount

					if (Basis changed
					or  YearToDateDepreciation changed
					or  Basis not entered)
						if (!Asset.AssetProcess.Adjustment)
							invoke Delete MemoAssetTransactionRel
							invoke Delete UnreleasedAssetTransactionsRel

					if (LocalAction = "A"
					or Asset.AssetProcess.Adjustment)
						if(Basis changed
						or Basis not entered)
							if (ImpairmentBookOfOrigin entered)
								PreviousBasisAdjustment = sum UnreleasedIMLTransactionsRel.TransactionAmount
							else
								if(!AccountFieldsAdjusted
								and TransientProgram != "AssetCompute")
									PreviousBasisAdjustment = sum UnreleasedASTTransactionsRel.TransactionAmount
							if(!AccountFieldsAdjusted)
								if (ComputeOption = "Y")
									invoke Delete UnreleasedAssetTransactionsRel
								else
									invoke Delete UnreleasedASTTransactionsRel
									invoke Delete UnreleasedCLRTransactionsRel
									invoke Delete UnreleasedACMTransactionsRel
									invoke Delete UnreleasedEXPTransactionsRel
									invoke Delete UnreleasedDEBTransactionsRel
									invoke Delete UnreleasedLIMTransactionsRel
									invoke Delete UnreleasedLADTransactionsRel
									invoke Delete UnreleasedSTLTransactionsRel
									invoke Delete UnreleasedLTLTransactionsRel
						else
							if (!AccountFieldsAdjusted)
								if(Basis not changed
								and ComputeOption = "Y")
									invoke Delete UnreleasedACMTransactionsRel
									invoke Delete UnreleasedEXPTransactionsRel
								else
									if(Basis not changed)
										invoke Delete UnreleasedACMTransactionsRel
										invoke Delete UnreleasedEXPTransactionsRel
				else

					if (Basis changed)
						if (!Asset.AssetProcess.Adjustment)
							if (AssetControlTransactionRel exists)
								invoke Update AssetControlTransactionRel
									initialize invoked.CreditBalance
									initialize invoked.DebitBalance



							if (ComputeOption = "Y")
								invoke Delete UnreleasedAssetTransactionsRel
							else
								invoke Delete UnreleasedASTTransactionsRel
								invoke Delete UnreleasedCLRTransactionsRel
								invoke Delete UnreleasedDEBTransactionsRel
								invoke Delete UnreleasedLIMTransactionsRel
								invoke Delete UnreleasedLADTransactionsRel
								invoke Delete UnreleasedSTLTransactionsRel
								invoke Delete UnreleasedLTLTransactionsRel
								if (LocalUpdateFromInterface = 1)
									invoke Delete UnreleasedEXPTransactionsRel
									invoke Delete UnreleasedACMTransactionsRel
			else
				if (!Asset.Status.Unreleased)
					if (ImpairmentBookOfOrigin entered)
						PreviousACMAdjustment	= sum UnreleasedIMTBookTransactionsRel.TransactionAmount
					else
						if(!AccountFieldsAdjusted
						and TransientProgram != "AssetCompute")
							PreviousACMAdjustment	= sum UnreleasedACMBookTransactionsRel.TransactionAmount

					if (!Asset.AssetProcess.Adjustment
					and old Basis entered
					and (Basis changed
							or  YearToDateDepreciation changed
							or  Basis not entered))
						invoke Delete UnreleasedAssetBookTransactionsRel

					if (LocalAction = "A"
					or Asset.AssetProcess.Adjustment)
						if (Basis changed
						or  Basis not entered)
							if (ImpairmentBookOfOrigin entered)
								PreviousBasisAdjustment = sum UnreleasedIMLBookTransactionsRel.TransactionAmount
							else
								if(!AccountFieldsAdjusted
								and TransientProgram != "AssetCompute")
									PreviousBasisAdjustment = sum UnreleasedASTBookTransactionsRel.TransactionAmount
							if (!AccountFieldsAdjusted)
								if (ComputeOption = "Y")
									invoke Delete UnreleasedAssetBookTransactionsRel
								else
									invoke Delete UnreleasedASTBookTransactionsRel
									invoke Delete UnreleasedCLRBookTransactionsRel
									invoke Delete UnreleasedACMBookTransactionsRel
									invoke Delete UnreleasedEXPBookTransactionsRel
									invoke Delete UnreleasedDEBBookTransactionsRel
									invoke Delete UnreleasedLIMBookTransactionsRel
									invoke Delete UnreleasedSTLBookTransactionsRel
									invoke Delete UnreleasedLTLBookTransactionsRel
						else
							if (!AccountFieldsAdjusted)
								if(Basis not changed
								and ComputeOption = "Y")
									invoke Delete UnreleasedACMBookTransactionsRel
									invoke Delete UnreleasedEXPBookTransactionsRel
								else
									if(Basis not changed)
										invoke Delete UnreleasedACMBookTransactionsRel
										invoke Delete UnreleasedEXPBookTransactionsRel
				else

					if (!Asset.AssetProcess.Adjustment)


						if (Basis changed)
							if (ComputeOption = "Y")
								invoke Delete UnreleasedAssetBookTransactionsRel
							else
								invoke Delete UnreleasedASTBookTransactionsRel
								invoke Delete UnreleasedCLRBookTransactionsRel
								invoke Delete UnreleasedDEBBookTransactionsRel
								invoke Delete UnreleasedSTLBookTransactionsRel
								invoke Delete UnreleasedLTLBookTransactionsRel
								if (LocalUpdateFromInterface = true)
									invoke Delete UnreleasedACMBookTransactionsRel
									invoke Delete UnreleasedEXPBookTransactionsRel
			if (LocalAction = "A")
				if (!Asset.Simulated
				and !Asset.WorkInProcess
				and	(Asset.AssetProcess.Addition
				or   Asset.AssetProcess.Adjustment
				or   Asset.AssetProcess.Disposal
				or   Asset.AssetProcess.Transfer
				or 	 Asset.AssetProcess.Impairment))
					if (Basis changed)
						if (TransientProgram != "AssetAppend"
						and TransientProgram != "AssetCompute")
							LocalOldBasis	= (old Basis)
						LocalNewBasis	= Basis
						if (Asset.Status.Unreleased)
							if (!LocalCreateFromBatch)
								LocalASTTransactionAmount	= Basis
							else
								LocalASTTransactionAmount	= Basis - LocalOldBasis
						else
						if (Asset.Status.PostRelease
						and Asset.AssetProcess.Adjustment
						and !ResetAdjustment)
							if (IsPostingBook)
								if (ImpairmentBookOfOrigin entered)
									if (UnreleasedAssetImpairmentRel exists)
										LocalASTTransactionAmount 	= Basis
									else
										LocalASTTransactionAmount 	= (Basis - (LocalOldBasis - PreviousBasisAdjustment))
								else
								if (Asset.AssetLease entered
								and	Asset.AssetLease.Lease.Status.Modify
								and Asset.AssetLease.Lease.LongTermOperatingLease)
									if (UseBookCurrencyOnLeasedAsset)

										LocalASTTransactionAmount = (Basis - (LocalOldBasis - DerivedTotalBaseROUReduction))

										if (LocalASTTransactionAmount != Asset.AssetLease.Lease.BaseAssetAdjustmentAfterModification
										and LocalOldBasis = LocalOriginalROUReduction)
											LocalASTTransactionAmount = Asset.AssetLease.Lease.BaseAssetAdjustmentAfterModification
									else

										LocalASTTransactionAmount = (Basis - (LocalOldBasis - DerivedTotalROUReduction))

										if (LocalASTTransactionAmount != Asset.AssetLease.Lease.AssetAdjustmentAfterModification
										and LocalOldBasis = LocalOriginalROUReduction)
											LocalASTTransactionAmount = Asset.AssetLease.Lease.AssetAdjustmentAfterModification
								else
									LocalASTTransactionAmount 		= (Basis - (LocalOldBasis - PreviousBasisAdjustment))
							else
								if (ImpairmentBookOfOrigin entered)
									if (UnreleasedAssetImpairmentRel exists)
										LocalASTTransactionAmount 	= Basis
									else
										LocalASTTransactionAmount 	= (Basis - (LocalOldBasis - PreviousBasisAdjustment))
								else
									if (Asset.AssetLease entered
									and	Asset.AssetLease.Lease.Status.Modify
									and Asset.AssetLease.Lease.LongTermOperatingLease)
										if (UseBookCurrencyOnLeasedAsset)

											LocalASTTransactionAmount = (Basis - (LocalOldBasis - DerivedTotalBaseROUReduction))

											if (LocalASTTransactionAmount != Asset.AssetLease.Lease.BaseAssetAdjustmentAfterModification
											and LocalOldBasis = LocalOriginalROUReduction)
												LocalASTTransactionAmount = Asset.AssetLease.Lease.BaseAssetAdjustmentAfterModification
										else

											LocalASTTransactionAmount = (Basis - (LocalOldBasis - DerivedTotalROUReduction))

											if (LocalASTTransactionAmount != Asset.AssetLease.Lease.AssetAdjustmentAfterModification
											and LocalOldBasis = LocalOriginalROUReduction)
												LocalASTTransactionAmount = Asset.AssetLease.Lease.AssetAdjustmentAfterModification
									else
										if (action type.Create
										and AssetBookAdjustmentRel.Basis not entered)
											LocalASTTransactionAmount = Basis
										else
											LocalASTTransactionAmount 	= (Basis - (LocalOldBasis - PreviousBasisAdjustment))
							LocalCLRTransactionAmount	= LocalASTTransactionAmount * -1
						else
							if (ImpairmentBookOfOrigin entered)
								if (ReleasedIMLTransactionsRel exists
								or ReleasedIMLBookTransactionsRel exists)
									if (IsPostingBook)
										LocalASTTransactionAmount 	= (Basis - sum ReleasedIMLTransactionsRel.TransactionAmount)
									else
										LocalASTTransactionAmount 	= (Basis - sum ReleasedIMLBookTransactionsRel.TransactionAmount)
								else
									LocalASTTransactionAmount   = Basis
							else
								LocalASTTransactionAmount   = (Basis - old Basis)
						if (Asset.AssetProcess.Transfer)
							if (UnreleasedAssetTransferRel.TransferType.IntraCompany
							and UnreleasedAssetTransferRel.FullOrPartial.Partial)
								LocalCLRTransactionAmount = LocalCLRTransactionAmount
						else
							LocalCLRTransactionAmount	= LocalASTTransactionAmount * -1
					else
						if (Asset.AssetProcess.Adjustment)
							if (Basis entered 
							and DerivedNewBookFromAdjustment
							and !IsNonDepreciable)
								LocalASTTransactionAmount 	= Basis
							else
							if (AssetBookAdjustmentRel.Basis not entered
							and IsNonDepreciable)
								LocalASTTransactionAmount 	= Basis
							else
							if (old Basis entered)
								if (Basis not = old Basis)
									if (IsPostingBook)
										if (ReleasedASTAssetTransactionsRel exists)
											LocalASTTransactionAmount 	= (Basis - sum ReleasedASTAssetTransactionsRel.TransactionAmount)
									else
										if (ReleasedASTBookTransactionsRel exists)
											LocalASTTransactionAmount 	= (Basis - sum ReleasedASTBookTransactionsRel.TransactionAmount)
							else
								if (Basis entered)  
									if (action type.Create)
										LocalASTTransactionAmount 	= Basis
							if (IsZeroImpairment)
								LocalASTTransactionAmount	= Basis
								LocalASTTransactionAmount	= LocalASTTransactionAmount * -1
						else
							if (OtherAssetImpairmentsRel exist
							and InServiceDate changed)
								if (IsPostingBook)
									LocalASTTransactionAmount 	= (Basis - sum ReleasedIMLTransactionsRel.TransactionAmount)
								else
									LocalASTTransactionAmount 	= (Basis - sum ReleasedIMLBookTransactionsRel.TransactionAmount)
							else
								LocalASTTransactionAmount 	= Basis
							if (IsZeroImpairment)
								LocalASTTransactionAmount	= Basis
								LocalASTTransactionAmount	= LocalASTTransactionAmount * -1

					if (Asset.AssetProcess.Transfer
					and UnreleasedAssetTransferRel.TransferType.InterCompany
					and UnreleasedAssetTransferRel.FullOrPartial.Full)
						LocalCLRTransactionAmount	= ((LocalASTTransactionAmount - LifeToDateDepreciation) * -1)
						LocalACMTransactionAmount	= LifeToDateDepreciation * -1

						if (LocalACMTransactionAmount entered)
							LocalCreateACMAssetTransaction = true
					else
						if (Asset.AssetProcess.Transfer
						and UnreleasedAssetTransferRel.TransferType.InterCompany
						and UnreleasedAssetTransferRel.FullOrPartial.Partial)
							LocalCLRTransactionAmount 	= 0
						else
							if (Asset.AssetLease.Lease entered
							and !LeaseImpairmentInProgress
							and !LeaseAdjustmentInProgress)
								if (Asset.AssetLease.Lease.Status.Modify
								and Asset.AssetLease.Lease.LongTermOperatingLease)
									if (UseBookCurrencyOnLeasedAsset)

										LocalCLRTransactionAmount = (Basis - (LocalOldBasis - DerivedTotalBaseROUReduction))

										if (LocalCLRTransactionAmount != Asset.AssetLease.Lease.BaseAssetAdjustmentAfterModification
										and LocalOldBasis = LocalOriginalROUReduction)
											LocalCLRTransactionAmount = Asset.AssetLease.Lease.BaseAssetAdjustmentAfterModification
										LocalCLRTransactionAmount = LocalCLRTransactionAmount * -1
									else

										LocalCLRTransactionAmount = (Basis - (LocalOldBasis - DerivedTotalROUReduction))

										if (LocalCLRTransactionAmount != Asset.AssetLease.Lease.AssetAdjustmentAfterModification
										and LocalOldBasis = LocalOriginalROUReduction)
											LocalCLRTransactionAmount = Asset.AssetLease.Lease.AssetAdjustmentAfterModification
										LocalCLRTransactionAmount = LocalCLRTransactionAmount * -1
								else
									LocalCLRTransactionAmount	= LocalASTTransactionAmount - TranClearingAccountAmount
									LocalCLRTransactionAmount	= LocalCLRTransactionAmount * -1

									if (NeedsClearingAccountEntries)
										LocalCreateEQUAssetTransaction	= true
										LocalEQUTransactionAmount		= DerivedNetUpfrontCash * -1
										if (Asset.AssetAccountingUnitGroup entered)
											if (Asset.AssetAccountingUnitGroup.ClearingAccountingUnit entered)
												TranLeaseClearingAccount	= Asset.AssetAccountingUnitGroup.ClearingAccountingUnit
										else
											TranLeaseClearingAccount		= Asset.AssetAccountingUnit
									TranLeaseClearingAccount.GeneralLedgerChartAccount		= Asset.AssetAccountGroup.CLRDistributionAccount.GeneralLedgerChartAccount 

							else
								LocalCLRTransactionAmount	= LocalASTTransactionAmount * -1
						LocalEXPTransactionAmount	= YearToDateDepreciation
						LocalACMTransactionAmount	= LocalEXPTransactionAmount * -1

					if (IsPostingBook)
						if ((Basis changed
						or Basis entered)
						and (!Asset.Classification.Operating
						or Asset.AssetLease.Lease.LongTermOperatingLease))
							if (TransientProgram != "AssetAppend"
							and TransientProgram != "AssetCompute")
								LocalOldBasis 		= old Basis
							LocalOldASTTranAmt	= old LocalASTTransactionAmount
							if (Asset.AssetProcess.Adjustment)
								if (!DerivedNewBookFromAdjustment
								and (Basis changed
								or ComputeOption = "Y"))
									LocalASTTransactionAmount = LocalASTTransactionAmount - old LocalASTTransactionAmount
									if (Asset.AssetLease.Lease entered
									and !LeaseImpairmentInProgress
									and !LeaseAdjustmentInProgress)
										LocalCLRTransactionAmount	= LocalASTTransactionAmount - TranClearingAccountAmount
										LocalCLRTransactionAmount	= LocalCLRTransactionAmount * -1
									else
										LocalCLRTransactionAmount	= LocalASTTransactionAmount * -1
									LocalCurrencyAmount 		= LocalASTTransactionAmount
									RoundedTransactionAmount	= RoundedCurrencyAmount
									if (RoundedTransactionAmount entered)
										LocalCreateASTAssetTransaction		= true

									LocalCurrencyAmount 		= LocalCLRTransactionAmount
									RoundedTransactionAmount	= RoundedCurrencyAmount
									if (RoundedTransactionAmount entered)
										LocalCreateCLRAssetTransaction		= true
								else
								if (!action type.Create
								and Basis not changed
								and !IsNonDepreciable)
									LocalCreateASTAssetTransaction		= false
									LocalCreateCLRAssetTransaction		= false
								else
								if (DerivedNewBookFromAdjustment
								and Basis entered
								and !IsNonDepreciable)
									LocalCreateASTAssetTransaction		= true
									LocalCreateCLRAssetTransaction		= true
								else
									if (IsNonDepreciable
									and ((action type.Create
									and Basis entered)
									or  Basis changed))
										if (LocalASTTransactionAmount entered)
											LocalCreateASTAssetTransaction = true
										if (LocalCLRTransactionAmount entered)
											LocalCreateCLRAssetTransaction = true
									else
										LocalCreateASTAssetTransaction		= false
										LocalCreateCLRAssetTransaction		= false
							else
								LocalCurrencyAmount 		= LocalASTTransactionAmount
								RoundedTransactionAmount	= RoundedCurrencyAmount
								if (RoundedTransactionAmount entered)
									LocalCreateASTAssetTransaction		= true
								LocalCurrencyAmount 		= LocalCLRTransactionAmount
								RoundedTransactionAmount	= RoundedCurrencyAmount
								if (RoundedTransactionAmount entered)
									LocalCreateCLRAssetTransaction		= true
									if (NeedsClearingAccountEntries)
										LocalCreateEQUAssetTransaction	= true 
										LocalEQUTransactionAmount		= TranClearingAccountAmount * -1
										if (Asset.AssetAccountingUnitGroup entered)
											if (Asset.AssetAccountingUnitGroup.ClearingAccountingUnit entered)
												TranLeaseClearingAccount	= Asset.AssetAccountingUnitGroup.ClearingAccountingUnit
										else
											TranLeaseClearingAccount		= Asset.AssetAccountingUnit
										TranLeaseClearingAccount.GeneralLedgerChartAccount		= Asset.AssetAccountGroup.CLRDistributionAccount.GeneralLedgerChartAccount 


						if  (((YearToDateDepreciation entered
						and   Asset.AssetCategory.Depreciable)
						or 	  YearToDateDepreciation changed))

							if (TransientProgram != "AssetAppend"
							and TransientProgram != "AssetCompute")
								LocalYearToDateDepreciation = old YearToDateDepreciation

							if (!UnreleasedAssetImpairmentRel exists)
								if (Asset.Status.Unreleased
								or DerivedNewBookFromAdjustment)
									LocalEXPTransactionAmount	= YearToDateDepreciation
									LocalACMTransactionAmount	= LocalEXPTransactionAmount * -1
								else
									if (Book.Impairment)
										if (IsZeroImpairment)
											LocalACMTransactionAmount	= YearToDateDepreciation
											LocalEXPTransactionAmount	= LocalACMTransactionAmount * -1
										else
											LocalEXPTransactionAmount	= YearToDateDepreciation - (LocalYearToDateDepreciation + PreviousACMAdjustment)
											LocalACMTransactionAmount	= LocalEXPTransactionAmount * -1
									else
										LocalCurrencyAmount         = LocalYearToDateDepreciation
										LocalYearToDateDepreciation = RoundedCurrencyAmount
										LocalCurrencyAmount = YearToDateDepreciation
										LocalYTDDepreciation = RoundedCurrencyAmount
										LocalEXPTransactionAmount	= LocalYTDDepreciation - (LocalYearToDateDepreciation + PreviousACMAdjustment)
										LocalACMTransactionAmount	= LocalEXPTransactionAmount * -1
							if (UnreleasedAssetImpairmentRel exist
							and ImpairmentBookOfOrigin entered)
								if (IsZeroImpairment)
									if (OtherAssetImpairmentsRel exist)
										LocalACMTransactionAmount	= sum CYIMADepreciationTransactionsRel.TransactionAmount
										LocalEXPTransactionAmount	= LocalACMTransactionAmount * -1
									else
										LocalACMTransactionAmount	= YearToDateDepreciation
										LocalEXPTransactionAmount	= LocalACMTransactionAmount * -1
								else
									if (OtherAssetImpairmentsRel not exist)
										LocalEXPTransactionAmount	= YearToDateDepreciation
										LocalACMTransactionAmount	= LocalEXPTransactionAmount * -1
									else
										LocalEXPTransactionAmount	= YearToDateDepreciation - (LocalYearToDateDepreciation + PreviousACMAdjustment)
										LocalACMTransactionAmount	= LocalEXPTransactionAmount * -1

							if (!Asset.AssetProcess.Adjustment	
								or (!AssetBookAdjustmentRel exists
									or AssetBookAdjustmentRel.Basis != AssetBookAdjustmentRel.ToBasis
									or YearToDateDepreciation != AssetBookAdjustmentRel.YearToDateDepreciation
									or LifeToDateDepreciation != AssetBookAdjustmentRel.LifeToDateDepreciation)
							)

								LocalCurrencyAmount 		= LocalACMTransactionAmount
								RoundedTransactionAmount	= RoundedCurrencyAmount
								if (RoundedTransactionAmount entered)
									LocalCreateACMAssetTransaction		= true
								else
									LocalCreateACMAssetTransaction		= false


								LocalCurrencyAmount 		= LocalEXPTransactionAmount
								RoundedTransactionAmount	= RoundedCurrencyAmount
								if (RoundedTransactionAmount entered)
									LocalCreateEXPAssetTransaction		= true
								else
									LocalCreateEXPAssetTransaction		= false
							else
								LocalCreateACMAssetTransaction = false
								LocalCreateEXPAssetTransaction = false

					else
						if ((Basis changed
						or Basis entered)
						and (!Asset.Classification.Operating
						or Asset.AssetLease.Lease.LongTermOperatingLease))
							if (TransientProgram != "AssetAppend"
							and TransientProgram != "AssetCompute")
								LocalOldBasis	= (old Basis)
							LocalOldASTTranAmt	= old LocalASTTransactionAmount
							if (Asset.AssetProcess.Adjustment)
								if (!DerivedNewBookFromAdjustment
								and (Basis changed
								or ComputeOption = "Y"))
									LocalASTTransactionAmount = LocalASTTransactionAmount - old LocalASTTransactionAmount
									if (Asset.AssetLease.Lease entered
									and !LeaseImpairmentInProgress
									and !LeaseAdjustmentInProgress)
										LocalCLRTransactionAmount	= LocalASTTransactionAmount - TranClearingAccountAmount
										LocalCLRTransactionAmount	= LocalCLRTransactionAmount * -1
										if (NeedsClearingAccountEntries) 
											LocalCreateEQUAssetBookTransaction = true

									else
										LocalCLRTransactionAmount	= LocalASTTransactionAmount * -1

									LocalCurrencyAmount 		= LocalASTTransactionAmount
									RoundedTransactionAmount	= RoundedCurrencyAmount
									if (RoundedTransactionAmount entered)
										LocalCreateASTAssetBookTransaction	= true
									LocalCurrencyAmount 		= LocalCLRTransactionAmount
									RoundedTransactionAmount	= RoundedCurrencyAmount
									if (RoundedTransactionAmount entered)
										LocalCreateCLRAssetBookTransaction	= true
								else
								if (!action type.Create
								and Basis not changed
								and !IsNonDepreciable)
									LocalCreateASTAssetBookTransaction		= false
									LocalCreateCLRAssetBookTransaction		= false
								else
								if (DerivedNewBookFromAdjustment
								and Basis entered
								and !IsNonDepreciable)
									LocalCreateASTAssetBookTransaction		= true
									LocalCreateCLRAssetBookTransaction		= true
								else
									if (IsNonDepreciable
									and ((action type.Create
									and Basis entered)
									or  Basis changed))
										if (LocalASTTransactionAmount entered)
											LocalCreateASTAssetBookTransaction = true
										if (LocalCLRTransactionAmount entered)
											LocalCreateCLRAssetBookTransaction = true
									else
										LocalCreateASTAssetBookTransaction		= false
										LocalCreateCLRAssetBookTransaction		= false

							else
								LocalCurrencyAmount 		= LocalASTTransactionAmount
								RoundedTransactionAmount	= RoundedCurrencyAmount
								if (RoundedTransactionAmount entered)
									LocalCreateASTAssetBookTransaction	= true

								LocalCurrencyAmount 		= LocalCLRTransactionAmount
								RoundedTransactionAmount	= RoundedCurrencyAmount
								if (RoundedTransactionAmount entered)
									LocalCreateCLRAssetBookTransaction		= true
									if (NeedsClearingAccountEntries)
										LocalCreateEQUAssetBookTransaction	= true 
										LocalEQUTransactionAmount			= TranClearingAccountAmount * -1
										if (Asset.AssetAccountingUnitGroup entered)
											if (Asset.AssetAccountingUnitGroup.ClearingAccountingUnit entered)
												TranLeaseClearingAccount	= Asset.AssetAccountingUnitGroup.ClearingAccountingUnit
										else
											TranLeaseClearingAccount		= Asset.AssetAccountingUnit
										TranLeaseClearingAccount.GeneralLedgerChartAccount		= Asset.AssetAccountGroup.CLRDistributionAccount.GeneralLedgerChartAccount 

						if ((YearToDateDepreciation entered
						and  Asset.AssetCategory.Depreciable)
						or 	 YearToDateDepreciation changed)
							if (TransientProgram != "AssetAppend"
							and TransientProgram != "AssetCompute")
								LocalYearToDateDepreciation = old YearToDateDepreciation
							if (Asset.Status.Unreleased
							or DerivedNewBookFromAdjustment)
								LocalEXPTransactionAmount	= YearToDateDepreciation
								LocalACMTransactionAmount	= LocalEXPTransactionAmount * -1
							else
								if (Book.Impairment)
									if (IsZeroImpairment)
										LocalACMTransactionAmount	= YearToDateDepreciation
										LocalEXPTransactionAmount	= LocalACMTransactionAmount * -1
									else
										LocalEXPTransactionAmount	= YearToDateDepreciation - (LocalYearToDateDepreciation + PreviousACMAdjustment)
										LocalACMTransactionAmount	= LocalEXPTransactionAmount * -1

								else
									LocalCurrencyAmount         = LocalYearToDateDepreciation
									LocalYearToDateDepreciation = RoundedCurrencyAmount
									LocalCurrencyAmount = YearToDateDepreciation
									LocalYTDDepreciation = RoundedCurrencyAmount
									LocalEXPTransactionAmount	= LocalYTDDepreciation - (LocalYearToDateDepreciation + PreviousACMAdjustment)
									LocalACMTransactionAmount	= LocalEXPTransactionAmount * -1


							if (UnreleasedAssetImpairmentRel exist
							and ImpairmentBookOfOrigin entered)
								if (IsZeroImpairment)
									if (OtherAssetImpairmentsRel exist)
										LocalACMTransactionAmount	= sum BookCYIMADepreciationTransactionsRel.TransactionAmount
										LocalEXPTransactionAmount	= LocalACMTransactionAmount * -1

									else
										LocalACMTransactionAmount	= YearToDateDepreciation
										LocalEXPTransactionAmount	= LocalACMTransactionAmount * -1

								else
									if (OtherAssetImpairmentsRel not exist)
										LocalEXPTransactionAmount	= YearToDateDepreciation
										LocalACMTransactionAmount	= LocalEXPTransactionAmount * -1

									else
										LocalEXPTransactionAmount	= YearToDateDepreciation - (LocalYearToDateDepreciation + PreviousACMAdjustment)
										LocalACMTransactionAmount	= LocalEXPTransactionAmount * -1



							LocalCurrencyAmount 		= LocalACMTransactionAmount
							RoundedTransactionAmount	= RoundedCurrencyAmount
							LocalACMTransactionAmount = RoundedTransactionAmount

							LocalCurrencyAmount 		= LocalEXPTransactionAmount
							RoundedTransactionAmount	= RoundedCurrencyAmount
							LocalEXPTransactionAmount = RoundedTransactionAmount



							if (!Asset.AssetProcess.Adjustment	
								or (!AssetBookAdjustmentRel exists
									or AssetBookAdjustmentRel.Basis != AssetBookAdjustmentRel.ToBasis
									or YearToDateDepreciation != AssetBookAdjustmentRel.YearToDateDepreciation
									or LifeToDateDepreciation != AssetBookAdjustmentRel.LifeToDateDepreciation)
							)

								if (LocalACMTransactionAmount entered)
									LocalCreateACMAssetBookTransaction		= true
								else
									LocalCreateACMAssetBookTransaction		= false


								if (LocalEXPTransactionAmount entered)
									LocalCreateEXPAssetBookTransaction		= true
								else
									LocalCreateEXPAssetBookTransaction		= false
							else
								LocalCreateACMAssetBookTransaction = false
								LocalCreateEXPAssetBookTransaction = false

						if (Asset.AssetProcess.Transfer)

							LocalCurrencyAmount 		= LocalACMTransactionAmount
							RoundedTransactionAmount	= RoundedCurrencyAmount
							LocalACMTransactionAmount = RoundedTransactionAmount

							LocalCurrencyAmount 		= LocalEXPTransactionAmount
							RoundedTransactionAmount	= RoundedCurrencyAmount
							LocalEXPTransactionAmount = RoundedTransactionAmount


							if (LocalACMTransactionAmount entered)
								LocalCreateACMAssetBookTransaction		= true
							else
								LocalCreateACMAssetBookTransaction		= false


							if (LocalEXPTransactionAmount entered)
								LocalCreateEXPAssetBookTransaction		= true
							else
								LocalCreateEXPAssetBookTransaction		= false
			else
				if (!Asset.Simulated
				and	(Asset.AssetProcess.Addition
				or   Asset.AssetProcess.Adjustment
				or   Asset.AssetProcess.Transfer))
					if (Asset.Status.Unreleased
					or Basis not changed)
						LocalASTTransactionAmount		= Basis
					else
					if (Asset.AssetLease entered
					and	Asset.AssetLease.Lease.Status.Modify
					and Asset.AssetLease.Lease.LongTermOperatingLease)
						if (TransientProgram != "AssetAppend"
						and TransientProgram != "AssetCompute")
							LocalOldBasis	= (old Basis)
						if (UseBookCurrencyOnLeasedAsset)

							LocalASTTransactionAmount = (Basis - (LocalOldBasis - DerivedTotalBaseROUReduction))

							if (LocalASTTransactionAmount != Asset.AssetLease.Lease.BaseAssetAdjustmentAfterModification
							and LocalOldBasis = LocalOriginalROUReduction)
								LocalASTTransactionAmount = Asset.AssetLease.Lease.BaseAssetAdjustmentAfterModification
						else

							LocalASTTransactionAmount = (Basis - (LocalOldBasis - DerivedTotalROUReduction))

							if (LocalASTTransactionAmount != Asset.AssetLease.Lease.AssetAdjustmentAfterModification
							and LocalOldBasis = LocalOriginalROUReduction)
								LocalASTTransactionAmount = Asset.AssetLease.Lease.AssetAdjustmentAfterModification
					else

						if (TransientProgram != "AssetAppend"
						and TransientProgram != "AssetCompute")
							LocalOldBasis = old Basis
						LocalASTTransactionAmount 	= (Basis - (LocalOldBasis - PreviousBasisAdjustment))


					LocalCLRTransactionAmount			= LocalASTTransactionAmount - TranClearingAccountAmount 
					LocalCLRTransactionAmount           = LocalCLRTransactionAmount * -1



					if (YearToDateDepreciation changed)

						LocalEXPTransactionAmount		= (YearToDateDepreciation - old YearToDateDepreciation)
					else
						LocalEXPTransactionAmount		= YearToDateDepreciation
					LocalACMTransactionAmount			= LocalEXPTransactionAmount * -1
					if (IsPostingBook)
						if ((Basis changed
						or   Method changed
						or   Life changed
						or   InServiceDate changed
						or   Convention changed
						or   YearToDateDepreciation changed)
						and (!Asset.Classification.Operating
						or Asset.AssetLease.Lease.LongTermOperatingLease))
							LocalCreateASTAssetTransaction			= true
							LocalCreateCLRAssetTransaction			= true
							if (NeedsClearingAccountEntries)
								LocalCreateEQUAssetTransaction	= true 
								LocalEQUTransactionAmount		= TranClearingAccountAmount * -1
								if (Asset.AssetAccountingUnitGroup entered)
									if (Asset.AssetAccountingUnitGroup.ClearingAccountingUnit entered)
										TranLeaseClearingAccount	= Asset.AssetAccountingUnitGroup.ClearingAccountingUnit
								else
									TranLeaseClearingAccount		= Asset.AssetAccountingUnit
								TranLeaseClearingAccount.GeneralLedgerChartAccount		= Asset.AssetAccountGroup.CLRDistributionAccount.GeneralLedgerChartAccount 

							if (YearToDateDepreciation changed
							and Asset.AssetCategory.Depreciable
							and (!Asset.AssetProcess.Adjustment	
								or (!AssetBookAdjustmentRel exists
									or AssetBookAdjustmentRel.Basis != AssetBookAdjustmentRel.ToBasis
									or YearToDateDepreciation != AssetBookAdjustmentRel.YearToDateDepreciation
									or LifeToDateDepreciation != AssetBookAdjustmentRel.LifeToDateDepreciation)
							))
								LocalCreateACMAssetTransaction		= true
								LocalCreateEXPAssetTransaction		= true
					else
						if ((Basis changed
						or   Method changed
						or   Life changed
						or   LifeRemaining changed
						or   InServiceDate changed
						or   Convention changed
						or   YearToDateDepreciation changed)
						and (!Asset.Classification.Operating
						or Asset.AssetLease.Lease.LongTermOperatingLease))
							LocalCreateASTAssetBookTransaction		= true
							LocalCreateCLRAssetBookTransaction		= true
							if (NeedsClearingAccountEntries)
								LocalCreateEQUAssetBookTransaction	= true 
								LocalEQUTransactionAmount			= TranClearingAccountAmount * -1
								if (Asset.AssetAccountingUnitGroup entered)
									if (Asset.AssetAccountingUnitGroup.ClearingAccountingUnit entered)
										TranLeaseClearingAccount	= Asset.AssetAccountingUnitGroup.ClearingAccountingUnit
								else
									TranLeaseClearingAccount		= Asset.AssetAccountingUnit
								TranLeaseClearingAccount.GeneralLedgerChartAccount		= Asset.AssetAccountGroup.CLRDistributionAccount.GeneralLedgerChartAccount 

							if (YearToDateDepreciation changed
							and Asset.AssetCategory.Depreciable
							and (!Asset.AssetProcess.Adjustment	
								or (!AssetBookAdjustmentRel exists
									or AssetBookAdjustmentRel.Basis != AssetBookAdjustmentRel.ToBasis
									or YearToDateDepreciation != AssetBookAdjustmentRel.YearToDateDepreciation
									or LifeToDateDepreciation != AssetBookAdjustmentRel.LifeToDateDepreciation)
							))
								LocalCreateACMAssetBookTransaction	= true
								LocalCreateEXPAssetBookTransaction	= true
			if (IsPostingBook)










				if (AssetControlTransactionRel exists)
					invoke Update AssetControlTransactionRel
						invoked.TransactionDate				= LocalTransactionDate
						invoked.Description					= "Asset" + " " + Asset + " " + Asset.AssetProcess

						if (Asset.Status.Unreleased)
							invoked.Reference				= "ADDITION"
						else
							invoked.Reference				= "ADJUSTMENT"

				if (LocalCreateASTAssetTransaction
				and LocalASTTransactionAmount entered)
					invoke Create AssetTransaction
						invoked.OnlineSystemCreate					= true
						invoked.TransientCurrencyTable				= LocalCurrencyTable
						invoked.Asset								= Asset
						invoked.FinanceEnterpriseGroup				= Asset.FinanceEnterpriseGroup
						invoked.Company								= Asset.Company
						invoked.Book								= Book
						invoked.TransactionStatus					= "U"
						invoked.ProcessAsset						= Asset
						invoked.AssetLease							= Asset.AssetLease
						invoked.AssetGroup							= AssetGroup
						invoked.TransactionDate						= LocalTransactionDate
						invoked.Reference							= Asset.AssetProcess
						invoked.Description							= "Asset" + " " + Asset + " " + Asset.AssetProcess
						invoked.AssetAccountGroup					= Asset.AssetAccountGroup
						invoked.AssetType							= Asset.AssetType
						if (Asset.AssetProcess.Addition)
							initialize invoked.ProcessSequence
							if (TransientPostingDate entered)
								invoked.PostingDate					= TransientPostingDate
							invoked.AssetProcess					= "ADD"
						else
							if (Asset.AssetProcess.Adjustment)
								invoked.ProcessSequence				= UnreleasedAssetAdjustmentRel.AssetAdjustment
								invoked.PostingDate					= UnreleasedAssetAdjustmentRel.PostingDate
								invoked.AssetProcess				= "ADJ"
							else
								if (Asset.AssetProcess.Transfer)
									invoked.ProcessSequence			= UnreleasedAssetTransferRel.AssetTransfer
									invoked.PostingDate				= UnreleasedAssetTransferRel.PostingDate
									invoked.AssetProcess			= "TRF"

								else
									if (Asset.AssetProcess.Disposal)
										invoked.ProcessSequence		= UnreleasedAssetDisposalRel.AssetDisposal
										invoked.PostingDate			= UnreleasedAssetDisposalRel.PostingDate
										invoked.AssetProcess		= "DSP"
									else
										if (Asset.AssetProcess.Impairment)
											invoked.ProcessSequence	= Asset.LastAssetImpairment
											if (TransientPostingDate entered)
												invoked.PostingDate = TransientPostingDate
											invoked.AssetProcess	= "IMP"
						if (ImpairmentBookOfOrigin entered)  
							invoked.AssetAccountType				= "IML"
							invoked.DistributionAccount				= LocalImpairmentLossAccount
							invoked.AssetImpairment					= DerivedAssetImpairment

						else
							invoked.AssetAccountType				= "AST"
							invoked.DistributionAccount				= LocalAssetAccount
						invoked.TransactionNumberOfDecimals			= TransactionNumberOfDecimals
						invoked.TransactionAmount					= LocalASTTransactionAmount
						if (Book.PostCurrency.Book)
							invoked.TransientBookCurrency				= Book.Currency
						else
							invoked.TransientBookCurrency				= Asset.Currency
						invoked.AssetTransactionAmount.TransactionAmount 		= LocalASTTransactionAmount
						invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency

				if (LocalCreateCLRAssetTransaction
				and LocalCLRTransactionAmount entered)
					if (IsLTOLAssetWithAllocationCode)
						LocalTransactionAmount			= LocalCLRTransactionAmount
						LocalTransactionAccumulation	= 0
						LocalAllocationAccounts 		= instance count of LeaseAllocationCodeDetailsRel
						L1								= 0
						for each LeaseAllocationCodeDetailsRel
							L1								+= 1
							if (L1 = LocalAllocationAccounts)
								LocalCLRTransactionAmount	= LocalTransactionAmount - LocalTransactionAccumulation
							else
								LocalCLRTransactionAmount 	= (LocalTransactionAmount * each.AllocationPercent)
							round LocalCLRTransactionAmount to nearest DerivedRoundTo
							LocalTransactionAccumulation	+= LocalCLRTransactionAmount
							LocalClearingAccount 			= each.DistributionAccount
							include CreateCLRTransactionsOnLTOL
					else
						if (Asset.AssetLease.Lease entered
						and Asset.AssetLease.Lease.ShortTermLiabilityAccounting
						and !LeaseImpairmentInProgress
						and !LeaseAdjustmentInProgress)
							include CreateCLRTransactionsForShortTermLiability
						else
							include CreateCLRTransactionsOnLTOL

				if (LocalCreateEQUAssetTransaction
				and LocalEQUTransactionAmount entered)
					invoke Create AssetTransaction
						invoked.OnlineSystemCreate					= true
						invoked.TransientCurrencyTable				= LocalCurrencyTable
						invoked.Asset								= Asset
						invoked.FinanceEnterpriseGroup				= Asset.FinanceEnterpriseGroup
						invoked.Company								= Asset.Company
						invoked.Book								= Book
						invoked.AssetTransaction.TransactionStatus	= "U"
						invoked.ProcessAsset						= Asset
						invoked.AssetLease							= Asset.AssetLease
						invoked.AssetGroup							= AssetGroup
						invoked.TransactionDate						= LocalTransactionDate
						invoked.Reference							= Asset.AssetProcess
						invoked.Description							= "Asset" + " " + Asset + " " + Asset.AssetProcess
						if (Asset.AssetProcess.Addition)
							if (TransientPostingDate entered)
								invoked.PostingDate					= TransientPostingDate
						else
							if (Asset.AssetProcess.Adjustment)
								invoked.PostingDate					= UnreleasedAssetAdjustmentRel.PostingDate
							else
								if (Asset.AssetProcess.Transfer)
									invoked.PostingDate				= UnreleasedAssetTransferRel.PostingDate
								else
									if (Asset.AssetProcess.Disposal)
										invoked.PostingDate			= UnreleasedAssetDisposalRel.PostingDate
									else
										if (Asset.AssetProcess.Impairment)
											if (TransientPostingDate entered)
												invoked.PostingDate = TransientPostingDate
						if (Asset.AssetProcess.Addition)
							initialize invoked.ProcessSequence
							invoked.AssetProcess						= "ADD"
						invoked.AssetAccountGroup					= Asset.AssetAccountGroup
						invoked.AssetType							= Asset.AssetType
						if (NeedsClearingAccountEntries)
							invoked.DistributionAccount			= TranLeaseClearingAccount
							invoked.AssetAccountType			= "CLR"
							if (Asset.AssetProcess.Adjustment)
								invoked.ProcessSequence				= UnreleasedAssetAdjustmentRel.AssetAdjustment

						invoked.TransactionNumberOfDecimals			= TransactionNumberOfDecimals
						invoked.TransactionAmount					= LocalEQUTransactionAmount
						if (Book.PostCurrency.Book)
							invoked.TransientBookCurrency				= Book.Currency
						else
							invoked.TransientBookCurrency				= Asset.Currency
						invoked.AssetTransactionAmount.TransactionAmount 		= LocalEQUTransactionAmount
						invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency


				if (LocalCreateACMAssetTransaction
				and LocalACMTransactionAmount entered)


					invoke Create AssetTransaction
						invoked.OnlineSystemCreate					= true
						invoked.TransientCurrencyTable				= LocalCurrencyTable
						invoked.Asset								= Asset
						invoked.FinanceEnterpriseGroup				= Asset.FinanceEnterpriseGroup
						invoked.Company								= Asset.Company
						invoked.Book								= Book
						invoked.AssetTransaction.TransactionStatus	= "U"
						invoked.ProcessAsset						= Asset
						invoked.AssetLease							= Asset.AssetLease
						invoked.AssetGroup							= AssetGroup
						invoked.TransactionDate						= LocalTransactionDate
						invoked.Reference							= Asset.AssetProcess
						invoked.AssetAccountGroup					= Asset.AssetAccountGroup
						invoked.AssetType							= Asset.AssetType
						invoked.Description							= "Asset" + " " + Asset + " " + Asset.AssetProcess
						if (Asset.AssetProcess.Addition)
							initialize invoked.ProcessSequence
							if (TransientPostingDate entered)
								invoked.PostingDate					= TransientPostingDate
							invoked.AssetProcess					= "ADD"
						else
							if (Asset.AssetProcess.Adjustment)
								invoked.ProcessSequence				= UnreleasedAssetAdjustmentRel.AssetAdjustment
								invoked.PostingDate					= UnreleasedAssetAdjustmentRel.PostingDate
								invoked.AssetProcess				= "ADJ"
							else
								if (Asset.AssetProcess.Transfer)
									invoked.ProcessSequence			= UnreleasedAssetTransferRel.AssetTransfer
									invoked.PostingDate				= UnreleasedAssetTransferRel.PostingDate
									invoked.AssetProcess			= "TRF"

								else
									if (Asset.AssetProcess.Disposal)
										invoked.ProcessSequence		= UnreleasedAssetDisposalRel.AssetDisposal
										invoked.PostingDate			= UnreleasedAssetDisposalRel.PostingDate
										invoked.AssetProcess		= "DSP"
									else
										if (Asset.AssetProcess.Impairment)
											invoked.ProcessSequence	= Asset.LastAssetImpairment
											if (TransientPostingDate entered)
												invoked.PostingDate = TransientPostingDate
											invoked.AssetProcess = "IMA"
						if (ImpairmentBookOfOrigin entered)
							invoked.AssetAccountType				= "IMT"
							invoked.DistributionAccount				= LocalAccumulatedImpairmentLossAccount
							invoked.AssetImpairment					= DerivedAssetImpairment
						else
							invoked.AssetAccountType				= "ACM"
							invoked.DistributionAccount				= LocalAccumulatedDepreciationAccount
						invoked.TransactionNumberOfDecimals			= TransactionNumberOfDecimals
						invoked.TransactionAmount					= LocalACMTransactionAmount
						if (Book.PostCurrency.Book)
							invoked.TransientBookCurrency			= Book.Currency
						else
							invoked.TransientBookCurrency			= Asset.Currency
						invoked.AssetTransactionAmount.TransactionAmount 		= LocalACMTransactionAmount
						invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency

				if (LocalCreateEXPAssetTransaction
				and LocalEXPTransactionAmount entered)
					invoke Create AssetTransaction
						invoked.OnlineSystemCreate					= true
						invoked.TransientCurrencyTable				= LocalCurrencyTable
						invoked.Asset								= Asset
						invoked.FinanceEnterpriseGroup				= Asset.FinanceEnterpriseGroup
						invoked.Company								= Asset.Company
						invoked.Book								= Book
						invoked.AssetTransaction.TransactionStatus	= "U"
						invoked.ProcessAsset						= Asset
						invoked.AssetLease							= Asset.AssetLease
						invoked.AssetGroup							= AssetGroup
						invoked.TransactionDate						= LocalTransactionDate
						invoked.Reference							= Asset.AssetProcess
						invoked.AssetAccountGroup					= Asset.AssetAccountGroup
						invoked.AssetType							= Asset.AssetType
						invoked.Description							= "Asset" + " " + Asset + " " + Asset.AssetProcess
						if (Asset.Status.Unreleased)
							initialize invoked.ProcessSequence
							if (TransientPostingDate entered)
								invoked.PostingDate					= TransientPostingDate
							invoked.AssetProcess					= "ADD"
						else
						if (Asset.AssetProcess.Addition)
							initialize invoked.ProcessSequence
							if (TransientPostingDate entered)
								invoked.PostingDate					= TransientPostingDate
							invoked.AssetProcess					= "ADD"
						else
							if (Asset.AssetProcess.Adjustment)
								invoked.ProcessSequence				= UnreleasedAssetAdjustmentRel.AssetAdjustment
								invoked.PostingDate					= UnreleasedAssetAdjustmentRel.PostingDate
								invoked.AssetProcess				= "ADJ"
							else
								if (Asset.AssetProcess.Transfer)
									invoked.ProcessSequence			= UnreleasedAssetTransferRel.AssetTransfer
									invoked.PostingDate				= UnreleasedAssetTransferRel.PostingDate
									invoked.AssetProcess			= "TRF"

								else
									if (Asset.AssetProcess.Disposal)
										invoked.ProcessSequence		= UnreleasedAssetDisposalRel.AssetDisposal
										invoked.PostingDate			= UnreleasedAssetDisposalRel.PostingDate
										invoked.AssetProcess		= "DSP"
									else
										if (Asset.AssetProcess.Impairment)
											invoked.ProcessSequence	= Asset.LastAssetImpairment
											if (TransientPostingDate entered)
												invoked.PostingDate = TransientPostingDate
											invoked.AssetProcess	= "IMA"
						if (ImpairmentBookOfOrigin entered)
							invoked.AssetAccountType				= "IMA"
							invoked.DistributionAccount				= LocalImpairmentAmortizationAccount
							invoked.AssetImpairment					= DerivedAssetImpairment
						else
							invoked.AssetAccountType				= "EXP"
							invoked.DistributionAccount				= LocalDepreciationExpenseAccount
						invoked.TransactionNumberOfDecimals			= TransactionNumberOfDecimals
						invoked.TransactionAmount					= LocalEXPTransactionAmount
						if (Book.PostCurrency.Book)
							invoked.TransientBookCurrency				= Book.Currency
						else
							invoked.TransientBookCurrency				= Asset.Currency
						invoked.AssetTransactionAmount.TransactionAmount 		= LocalEXPTransactionAmount
						invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency

			else
				if (LocalCreateASTAssetBookTransaction
				and LocalASTTransactionAmount entered)
					invoke Create AssetBookTransaction
						invoked.TransientCurrencyTable					= LocalCurrencyTable
						invoked.Asset									= Asset
						invoked.FinanceEnterpriseGroup					= Asset.FinanceEnterpriseGroup
						invoked.Company									= Asset.Company
						invoked.Book									= Book
						invoked.AssetBookTransaction.TransactionStatus	= "U"
						invoked.TransactionDate							= LocalTransactionDate
						invoked.Reference								= Asset.AssetProcess
						if (Asset.AssetProcess.Transfer)
							invoked.AssetProcess					= "TRF"
							invoked.ProcessSequence					= UnreleasedAssetTransferRel.AssetTransfer
							invoked.PostingDate				= UnreleasedAssetTransferRel.PostingDate
						else
							if (Asset.Status.Unreleased)
								if (TransientPostingDate entered)
									invoked.PostingDate					= TransientPostingDate
								invoked.AssetProcess				= "ADD"
							else
							if (Asset.AssetProcess.Addition)
								if (TransientPostingDate entered)
									invoked.PostingDate					= TransientPostingDate
								invoked.AssetProcess				= "ADD"
							else
								if (Asset.AssetProcess.Adjustment)
									invoked.AssetProcess			= "ADJ"
									invoked.PostingDate					= UnreleasedAssetAdjustmentRel.PostingDate
									invoked.ProcessSequence			= UnreleasedAssetAdjustmentRel.AssetAdjustment
								else
									if (Asset.AssetProcess.Disposal)
										invoked.AssetProcess		= "DSP"
										invoked.PostingDate			= UnreleasedAssetDisposalRel.PostingDate
										invoked.ProcessSequence		= UnreleasedAssetDisposalRel.AssetDisposal
									else
										if (Asset.AssetProcess.Impairment)
											invoked.ProcessSequence	= Asset.LastAssetImpairment
											if (TransientPostingDate entered)
												invoked.PostingDate = TransientPostingDate
											invoked.AssetProcess	= "IMP"

						if (ImpairmentBookOfOrigin entered)  
							invoked.AssetAccountType					= "IML"
							invoked.DistributionAccount					= LocalImpairmentLossAccount
							invoked.AssetImpairment						= DerivedAssetImpairment
						else
							invoked.AssetAccountType					= "AST"
							invoked.DistributionAccount					= LocalAssetAccount
						invoked.TransactionNumberOfDecimals				= TransactionNumberOfDecimals
						invoked.TransactionAmount						= LocalASTTransactionAmount
						invoked.AssetTransactionAmount.TransactionAmount 		= LocalASTTransactionAmount
						invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency

				if (LocalCreateCLRAssetBookTransaction
				and LocalCLRTransactionAmount entered)
					if (IsLTOLAssetWithAllocationCode)
						LocalTransactionAmount			= LocalCLRTransactionAmount
						LocalTransactionAccumulation	= 0
						LocalAllocationAccounts 		= instance count of LeaseAllocationCodeDetailsRel
						L1								= 0
						for each LeaseAllocationCodeDetailsRel
							L1								+= 1
							if (L1 = LocalAllocationAccounts)
								LocalCLRTransactionAmount	= LocalTransactionAmount - LocalTransactionAccumulation
							else
								LocalCLRTransactionAmount 	= (LocalTransactionAmount * each.AllocationPercent)
							round LocalCLRTransactionAmount to nearest DerivedRoundTo
							LocalTransactionAccumulation	+= LocalCLRTransactionAmount
							LocalClearingAccount 			= each.DistributionAccount
							include CreateCLRBookTransactionsOnLTOL
					else
						if (Asset.AssetLease.Lease entered
						and Asset.AssetLease.Lease.ShortTermLiabilityAccounting
						and !LeaseImpairmentInProgress
						and !LeaseAdjustmentInProgress)
							include CreateCLRBookTransactionsForShortTermLiability
						else
							include CreateCLRBookTransactionsOnLTOL

				if (LocalCreateEQUAssetBookTransaction
				and LocalEQUTransactionAmount entered)
					invoke Create AssetBookTransaction
						invoked.TransientCurrencyTable					= LocalCurrencyTable
						invoked.Asset									= Asset
						invoked.FinanceEnterpriseGroup					= Asset.FinanceEnterpriseGroup
						invoked.Company									= Asset.Company
						invoked.Book									= Book
						invoked.AssetBookTransaction.TransactionStatus	= "U"
						invoked.TransactionDate							= LocalTransactionDate
						invoked.Reference								= Asset.AssetProcess
						invoked.AssetProcess							= "ADD"

						if (Asset.AssetProcess.Addition)
							if (TransientPostingDate entered)
								invoked.PostingDate					= TransientPostingDate
						else
							if (Asset.AssetProcess.Adjustment)
								invoked.PostingDate					= UnreleasedAssetAdjustmentRel.PostingDate
							else
								if (Asset.AssetProcess.Transfer)
									invoked.PostingDate				= UnreleasedAssetTransferRel.PostingDate
								else
									if (Asset.AssetProcess.Disposal)
										invoked.PostingDate			= UnreleasedAssetDisposalRel.PostingDate
									else
										if (Asset.AssetProcess.Impairment)
											if (TransientPostingDate entered)
												invoked.PostingDate = TransientPostingDate
						if (NeedsClearingAccountEntries)
							invoked.DistributionAccount				= TranLeaseClearingAccount
							invoked.AssetAccountType				= "CLR"
						invoked.TransactionNumberOfDecimals				= TransactionNumberOfDecimals
						invoked.TransactionAmount						= LocalEQUTransactionAmount
						invoked.AssetTransactionAmount.TransactionAmount 		= LocalEQUTransactionAmount
						invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency



				if (LocalCreateACMAssetBookTransaction
				and LocalACMTransactionAmount entered)
					invoke Create AssetBookTransaction
						invoked.TransientCurrencyTable					= LocalCurrencyTable
						invoked.Asset									= Asset
						invoked.FinanceEnterpriseGroup					= Asset.FinanceEnterpriseGroup
						invoked.Company									= Asset.Company
						invoked.Book									= Book
						invoked.AssetBookTransaction.TransactionStatus	= "U"
						invoked.TransactionDate							= LocalTransactionDate
						invoked.Reference								= Asset.AssetProcess
						if (Asset.AssetProcess.Transfer)
							invoked.AssetProcess					= "TRF"
							invoked.ProcessSequence					= UnreleasedAssetTransferRel.AssetTransfer
							invoked.PostingDate						= UnreleasedAssetTransferRel.PostingDate
						else
							if (Asset.Status.Unreleased)
								invoked.AssetProcess				= "ADD"
								if (TransientPostingDate entered)
									invoked.PostingDate				= TransientPostingDate
							else
							if (Asset.AssetProcess.Addition)
								invoked.AssetProcess				= "ADD"
								if (TransientPostingDate entered)
									invoked.PostingDate				= TransientPostingDate
							else
								if (Asset.AssetProcess.Adjustment)
									invoked.AssetProcess			= "ADJ"
									invoked.ProcessSequence			= UnreleasedAssetAdjustmentRel.AssetAdjustment
									invoked.PostingDate				= UnreleasedAssetAdjustmentRel.PostingDate
								else
									if (Asset.AssetProcess.Disposal)
										invoked.AssetProcess		= "DSP"
										invoked.ProcessSequence		= UnreleasedAssetDisposalRel.AssetDisposal
										invoked.PostingDate			= UnreleasedAssetDisposalRel.PostingDate
									else
										if (Asset.AssetProcess.Impairment)
											invoked.ProcessSequence	= Asset.LastAssetImpairment
											if (TransientPostingDate entered)
												invoked.PostingDate = TransientPostingDate
											invoked.AssetProcess	= "IMA"
						if (ImpairmentBookOfOrigin entered)
							invoked.AssetAccountType				= "IMT"
							invoked.DistributionAccount				= LocalAccumulatedImpairmentLossAccount
							invoked.AssetImpairment					= DerivedAssetImpairment
						else
							invoked.AssetAccountType				= "ACM"
							invoked.DistributionAccount				= LocalAccumulatedDepreciationAccount
						invoked.TransactionNumberOfDecimals			= TransactionNumberOfDecimals


						invoked.TransactionAmount						= LocalACMTransactionAmount
						invoked.AssetTransactionAmount.TransactionAmount 		= LocalACMTransactionAmount
						invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency




				if (LocalCreateEXPAssetBookTransaction
				and LocalEXPTransactionAmount entered)
					invoke Create AssetBookTransaction
						invoked.TransientCurrencyTable					= LocalCurrencyTable
						invoked.Asset									= Asset
						invoked.FinanceEnterpriseGroup					= Asset.FinanceEnterpriseGroup
						invoked.Company									= Asset.Company
						invoked.Book									= Book
						invoked.AssetBookTransaction.TransactionStatus	= "U"
						invoked.TransactionDate							= LocalTransactionDate
						invoked.Reference								= Asset.AssetProcess
						if (Asset.AssetProcess.Transfer)
							invoked.AssetProcess						= "TRF"

							invoked.ProcessSequence						= UnreleasedAssetTransferRel.AssetTransfer
							invoked.PostingDate				= UnreleasedAssetTransferRel.PostingDate
						else
							if (Asset.Status.Unreleased)
								invoked.AssetProcess				= "ADD"
								if (TransientPostingDate entered)
									invoked.PostingDate					= TransientPostingDate
							else
							if (Asset.AssetProcess.Addition)
								invoked.AssetProcess				= "ADD"
								if (TransientPostingDate entered)
									invoked.PostingDate					= TransientPostingDate
							else
								if (Asset.AssetProcess.Adjustment)
									invoked.AssetProcess			= "ADJ"
									invoked.ProcessSequence			= UnreleasedAssetAdjustmentRel.AssetAdjustment
									invoked.PostingDate					= UnreleasedAssetAdjustmentRel.PostingDate
								else
									if (Asset.AssetProcess.Disposal)
										invoked.AssetProcess		= "DSP"
										invoked.ProcessSequence		= UnreleasedAssetDisposalRel.AssetDisposal
										invoked.PostingDate			= UnreleasedAssetDisposalRel.PostingDate
									else
										if (Asset.AssetProcess.Impairment)
											invoked.ProcessSequence	= Asset.LastAssetImpairment
											if (TransientPostingDate entered)
												invoked.PostingDate = TransientPostingDate
											invoked.AssetProcess	= "IMA"
						if (ImpairmentBookOfOrigin entered)  
							invoked.AssetAccountType				= "IMA"
							invoked.DistributionAccount				= LocalImpairmentAmortizationAccount
							invoked.AssetImpairment					= DerivedAssetImpairment
						else
							invoked.AssetAccountType				= "EXP"
							invoked.DistributionAccount				= LocalDepreciationExpenseAccount
						invoked.TransactionNumberOfDecimals			= TransactionNumberOfDecimals
						invoked.TransactionAmount					= LocalEXPTransactionAmount
						if (Book.PostCurrency.Book)
							invoked.TransientBookCurrency			= Book.Currency
						else
							invoked.TransientBookCurrency			= Asset.Currency
						invoked.AssetTransactionAmount.TransactionAmount 		= LocalEXPTransactionAmount
						invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency


		CreateCLRTransactionsOnLTOL 
			invoke Create AssetTransaction
				invoked.OnlineSystemCreate					= true
				invoked.TransientCurrencyTable				= LocalCurrencyTable
				invoked.Asset								= Asset
				invoked.FinanceEnterpriseGroup				= Asset.FinanceEnterpriseGroup
				invoked.Company								= Asset.Company
				invoked.Book								= Book
				invoked.AssetTransaction.TransactionStatus	= "U"
				invoked.ProcessAsset						= Asset
				invoked.AssetLease							= Asset.AssetLease
				invoked.AssetGroup							= AssetGroup
				invoked.TransactionDate						= LocalTransactionDate
				if (UseLeaseDebitAccount)
					if (LeaseImpairmentInProgress)
						invoked.AssetAccountType			= "LIM"
					else
					if (LeaseAdjustmentInProgress)
						invoked.AssetAccountType            = "LAD"
					else
						invoked.AssetAccountType			= "DEB"
				else
					invoked.AssetAccountType				= "CLR"
				invoked.AssetAccountGroup					= Asset.AssetAccountGroup
				invoked.AssetType							= Asset.AssetType
				invoked.Reference							= Asset.AssetProcess
				if (ImpairmentBookOfOrigin entered)
					invoked.AssetAccountType				= "IMW"							// "IMT"
					invoked.DistributionAccount				= LocalImpairmentWriteOffAccount 
					invoked.AssetImpairment					= DerivedAssetImpairment
					invoked.AssetProcess					= "IMP"
					invoked.ProcessSequence					= Asset.LastAssetImpairment
				else
					invoked.DistributionAccount				= LocalClearingAccount
				invoked.TransactionNumberOfDecimals			= TransactionNumberOfDecimals
				invoked.TransactionAmount					= LocalCLRTransactionAmount
				if (Book.PostCurrency.Book)
					invoked.TransientBookCurrency				= Book.Currency
				else
					invoked.TransientBookCurrency				= Asset.Currency
				invoked.AssetTransactionAmount.TransactionAmount 		= LocalCLRTransactionAmount
				invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
				invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
				invoked.Reference							= Asset.AssetProcess
				invoked.Description							= "Asset" + " " + Asset + " " + Asset.AssetProcess
				if (Asset.AssetProcess.Addition)
					initialize invoked.ProcessSequence
					invoked.AssetProcess					= "ADD"
					if (TransientPostingDate entered)
						invoked.PostingDate					= TransientPostingDate
				else
					if (Asset.AssetProcess.Transfer)
						invoked.AssetAccountType 				= "ICO"
						invoked.AssetProcess					= "TRF"
						invoked.ProcessSequence					= UnreleasedAssetTransferRel.AssetTransfer
						invoked.PostingDate				= UnreleasedAssetTransferRel.PostingDate

					else
						if (Asset.AssetProcess.Adjustment)
							invoked.AssetProcess				= "ADJ"
							invoked.ProcessSequence				= UnreleasedAssetAdjustmentRel.AssetAdjustment
							invoked.PostingDate					= UnreleasedAssetAdjustmentRel.PostingDate
						else
							if (Asset.AssetProcess.Disposal)
								invoked.AssetProcess			= "DSP"
								invoked.ProcessSequence			= UnreleasedAssetDisposalRel.AssetDisposal
								invoked.PostingDate			= UnreleasedAssetDisposalRel.PostingDate
							else
								if (LocalImpairmentParameter = 1)
									invoked.ProcessSequence		= Asset.LastAssetImpairment
									if (TransientPostingDate entered)
										invoked.PostingDate = TransientPostingDate
									invoked.AssetProcess		= "IMP"


		CreateCLRTransactionsForShortTermLiability
			if (Asset.AssetLease.Lease.NumberOfAssets = 1)
				if (Asset.AssetLease.Lease.Status.Modify)
					if (UseBookCurrencyOnLeasedAsset)
						LocalShortTermLiabilityAmount			= first ModificationInProgressRel.DerivedBaseShortTermAdjustment
						LocalLongTermLiabilityAmount			= first ModificationInProgressRel.DerivedBaseLongTermAdjustment
					else
						LocalShortTermLiabilityAmount			= first ModificationInProgressRel.DerivedShortTermAdjustment
						LocalLongTermLiabilityAmount			= first ModificationInProgressRel.DerivedLongTermAdjustment
				else
					if (UseBookCurrencyOnLeasedAsset)
						LocalShortTermLiabilityAmount			= last LeasePaymentBalancesRel.BeginningShortTermLiability
						LocalLongTermLiabilityAmount			= last LeasePaymentBalancesRel.BeginningLongTermLiability
					else
						LocalShortTermLiabilityAmount			= first LeaseCurrencyPaymentBalancesRel.BeginningShortTermLiability
						LocalLongTermLiabilityAmount			= first LeaseCurrencyPaymentBalancesRel.BeginningLongTermLiability

				LocalShortTermLiabilityAmount					= LocalShortTermLiabilityAmount * -1
				LocalLongTermLiabilityAmount					= LocalLongTermLiabilityAmount * -1
				if (!Asset.AssetLease.Lease.Status.Modify)
					if (ReleasedSTLTransactionsRel exists)
						LocalReleasedShortTermLiabilityAmount		= sum ReleasedSTLTransactionsRel.TransactionAmount
						LocalShortTermLiabilityAmount				= LocalShortTermLiabilityAmount - LocalReleasedShortTermLiabilityAmount
					if (ReleasedLTLTransactionsRel exists)
						LocalReleasedLongTermLiabilityAmount		= sum ReleasedLTLTransactionsRel.TransactionAmount
						LocalLongTermLiabilityAmount				= LocalLongTermLiabilityAmount - LocalReleasedLongTermLiabilityAmount
			else
				include CalculateShortTermLiabilityForMultipleAssets
				if (ReleasedSTLTransactionsRel exists)
					LocalReleasedShortTermLiabilityAmount	= sum ReleasedSTLTransactionsRel.TransactionAmount
					LocalShortTermLiabilityAmount			= LocalShortTermLiabilityAmount + LocalReleasedShortTermLiabilityAmount
				if (ReleasedLTLTransactionsRel exists)
					LocalReleasedLongTermLiabilityAmount	= sum ReleasedLTLTransactionsRel.TransactionAmount
					LocalLongTermLiabilityAmount			= LocalLongTermLiabilityAmount + LocalReleasedLongTermLiabilityAmount
				LocalCurrencyAmount 				= LocalShortTermLiabilityAmount
				RoundedTransactionAmount			= RoundedCurrencyAmount
				LocalShortTermLiabilityAmount 		= RoundedTransactionAmount
				LocalCurrencyAmount 				= LocalLongTermLiabilityAmount
				RoundedTransactionAmount			= RoundedCurrencyAmount
				LocalLongTermLiabilityAmount 		= RoundedTransactionAmount
				LocalCreditTotal					= LocalShortTermLiabilityAmount + LocalLongTermLiabilityAmount + TranClearingAccountAmount
				if (!Asset.AssetLease.Lease.Status.Modify)
					if (ReleasedSTLTransactionsRel exists)
						LocalCurrencyAmount 			= LocalASTTransactionAmount
						RoundedTransactionAmount		= RoundedCurrencyAmount
						LocalASTTransactionAmount 		= RoundedTransactionAmount
						if (LocalCreditTotal != LocalASTTransactionAmount)
							LocalCreditDifference			= LocalASTTransactionAmount - LocalCreditTotal
							LocalShortTermLiabilityAmount	= LocalShortTermLiabilityAmount + LocalCreditDifference
					else														
						if (LocalCreditTotal != Basis)
							LocalCreditDifference				= Basis - LocalCreditTotal
							LocalShortTermLiabilityAmount		= LocalShortTermLiabilityAmount + LocalCreditDifference
				else
					LocalCreditDifference				= LocalASTTransactionAmount - (LocalShortTermLiabilityAmount + LocalLongTermLiabilityAmount)
					LocalShortTermLiabilityAmount		= LocalShortTermLiabilityAmount + LocalCreditDifference
				LocalShortTermLiabilityAmount				= LocalShortTermLiabilityAmount * -1
				LocalLongTermLiabilityAmount				= LocalLongTermLiabilityAmount * -1

			invoke Create AssetTransaction			
				invoked.OnlineSystemCreate					= true
				invoked.TransientCurrencyTable				= LocalCurrencyTable
				invoked.Asset								= Asset
				invoked.FinanceEnterpriseGroup				= Asset.FinanceEnterpriseGroup
				invoked.Company								= Asset.Company
				invoked.Book								= Book
				invoked.AssetTransaction.TransactionStatus	= "U"
				invoked.ProcessAsset						= Asset
				invoked.AssetLease							= Asset.AssetLease
				invoked.AssetGroup							= AssetGroup
				invoked.TransactionDate						= LocalTransactionDate
				if (UseLeaseDebitAccount)
					invoked.AssetAccountType				= "STL"
				else
					invoked.AssetAccountType				= "CLR"
				invoked.AssetAccountGroup					= Asset.AssetAccountGroup
				invoked.AssetType							= Asset.AssetType
				invoked.Reference							= Asset.AssetProcess
				invoked.DistributionAccount					= Asset.AssetLease.Lease.ShortTermLiabilityAccount
				invoked.TransactionNumberOfDecimals			= TransactionNumberOfDecimals
				invoked.TransactionAmount					= LocalShortTermLiabilityAmount
				if (Book.PostCurrency.Book)
					invoked.TransientBookCurrency				= Book.Currency
				else
					invoked.TransientBookCurrency				= Asset.Currency
				invoked.AssetTransactionAmount.TransactionAmount 		= LocalShortTermLiabilityAmount
				invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
				invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
				invoked.Reference							= Asset.AssetProcess
				invoked.Description							= "Asset" + " " + Asset + " " + Asset.AssetProcess
				if (Asset.AssetProcess.Addition)
					initialize invoked.ProcessSequence
					invoked.AssetProcess					= "ADD"
					if (TransientPostingDate entered)
						invoked.PostingDate					= TransientPostingDate
				else
					if (Asset.AssetProcess.Adjustment)
						invoked.AssetProcess				= "ADJ"
						invoked.ProcessSequence				= UnreleasedAssetAdjustmentRel.AssetAdjustment
						invoked.PostingDate					= UnreleasedAssetAdjustmentRel.PostingDate

			if (LocalLongTermLiabilityAmount entered)
				invoke Create AssetTransaction			
					invoked.OnlineSystemCreate					= true
					invoked.TransientCurrencyTable				= LocalCurrencyTable
					invoked.Asset								= Asset
					invoked.FinanceEnterpriseGroup				= Asset.FinanceEnterpriseGroup
					invoked.Company								= Asset.Company
					invoked.Book								= Book
					invoked.AssetTransaction.TransactionStatus	= "U"
					invoked.ProcessAsset						= Asset
					invoked.AssetLease							= Asset.AssetLease
					invoked.AssetGroup							= AssetGroup
					invoked.TransactionDate						= LocalTransactionDate
					if (UseLeaseDebitAccount)
						invoked.AssetAccountType				= "LTL"
					else
						invoked.AssetAccountType				= "CLR"
					invoked.AssetAccountGroup					= Asset.AssetAccountGroup
					invoked.AssetType							= Asset.AssetType
					invoked.Reference							= Asset.AssetProcess
					invoked.DistributionAccount					= Asset.AssetLease.Lease.LongTermLiabilityAccount
					invoked.TransactionNumberOfDecimals			= TransactionNumberOfDecimals
					invoked.TransactionAmount					= LocalLongTermLiabilityAmount
					if (Book.PostCurrency.Book)
						invoked.TransientBookCurrency				= Book.Currency
					else
						invoked.TransientBookCurrency				= Asset.Currency
					invoked.AssetTransactionAmount.TransactionAmount 		= LocalLongTermLiabilityAmount
					invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
					invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
					invoked.Reference							= Asset.AssetProcess
					invoked.Description							= "Asset" + " " + Asset + " " + Asset.AssetProcess
					if (Asset.AssetProcess.Addition)
						initialize invoked.ProcessSequence
						invoked.AssetProcess					= "ADD"
						if (TransientPostingDate entered)
							invoked.PostingDate					= TransientPostingDate
					else
						if (Asset.AssetProcess.Adjustment)
							invoked.AssetProcess				= "ADJ"
							invoked.ProcessSequence				= UnreleasedAssetAdjustmentRel.AssetAdjustment
							invoked.PostingDate					= UnreleasedAssetAdjustmentRel.PostingDate

		CreateCLRBookTransactionsOnLTOL
			invoke Create AssetBookTransaction
				invoked.TransientCurrencyTable					= LocalCurrencyTable
				invoked.Asset									= Asset
				invoked.FinanceEnterpriseGroup					= Asset.FinanceEnterpriseGroup
				invoked.Company									= Asset.Company
				invoked.Book									= Book
				invoked.AssetBookTransaction.TransactionStatus	= "U"
				invoked.TransactionDate							= LocalTransactionDate
				invoked.Reference								= Asset.AssetProcess
				if (Asset.AssetProcess.Addition)
					if (TransientPostingDate entered)
						invoked.PostingDate					= TransientPostingDate
				else
					if (Asset.AssetProcess.Adjustment)
						invoked.PostingDate					= UnreleasedAssetAdjustmentRel.PostingDate
					else
						if (Asset.AssetProcess.Transfer)
							invoked.PostingDate				= UnreleasedAssetTransferRel.PostingDate
						else
							if (Asset.AssetProcess.Disposal)
								invoked.PostingDate			= UnreleasedAssetDisposalRel.PostingDate
							else
								if (Asset.AssetProcess.Impairment)
									if (TransientPostingDate entered)
										invoked.PostingDate = TransientPostingDate
				if (ImpairmentBookOfOrigin entered)
					invoked.AssetAccountType					= "IMW"							// "IMT"
					invoked.DistributionAccount					= LocalImpairmentWriteOffAccount 
					invoked.AssetImpairment						= DerivedAssetImpairment
					if(Asset.AssetProcess.Impairment)
						invoked.AssetProcess						= "IMP"
						invoked.ProcessSequence						= Asset.LastAssetImpairment
				else
					if (Asset.AssetProcess.Transfer)
						invoked.AssetProcess					= "TRF"
						invoked.ProcessSequence					= UnreleasedAssetTransferRel.AssetTransfer
					else
						if (Asset.Status.Unreleased)
							invoked.AssetProcess				= "ADD"
						else
							invoked.AssetProcess				= "ADJ"
							invoked.ProcessSequence				= UnreleasedAssetAdjustmentRel.AssetAdjustment
					if (UseLeaseDebitAccount)
						if (LeaseImpairmentInProgress)
							invoked.AssetAccountType			= "LIM"
						else
						if (LeaseAdjustmentInProgress)
							invoked.AssetAccountType            = "LAD"
						else
							invoked.AssetAccountType			= "DEB"
					else
						invoked.AssetAccountType				= "CLR"
					invoked.DistributionAccount					= LocalClearingAccount
				invoked.TransactionNumberOfDecimals				= TransactionNumberOfDecimals
				invoked.TransactionAmount						= LocalCLRTransactionAmount
				invoked.AssetTransactionAmount.TransactionAmount 		= LocalCLRTransactionAmount
				invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
				invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency

		CreateCLRBookTransactionsForShortTermLiability
			if (Asset.AssetLease.Lease.NumberOfAssets = 1)
				if (Asset.AssetLease.Lease.Status.Modify)
					if (UseBookCurrencyOnLeasedAsset)
						LocalShortTermLiabilityAmount			= first ModificationInProgressRel.DerivedBaseShortTermAdjustment
						LocalLongTermLiabilityAmount			= first ModificationInProgressRel.DerivedBaseLongTermAdjustment
					else
						LocalShortTermLiabilityAmount			= first ModificationInProgressRel.DerivedShortTermAdjustment
						LocalLongTermLiabilityAmount			= first ModificationInProgressRel.DerivedLongTermAdjustment
				else
					if (UseBookCurrencyOnLeasedAsset)
						LocalShortTermLiabilityAmount			= last LeasePaymentBalancesRel.BeginningShortTermLiability
						LocalLongTermLiabilityAmount			= last LeasePaymentBalancesRel.BeginningLongTermLiability
					else
						LocalShortTermLiabilityAmount			= first LeaseCurrencyPaymentBalancesRel.BeginningShortTermLiability
						LocalLongTermLiabilityAmount			= first LeaseCurrencyPaymentBalancesRel.BeginningLongTermLiability
				LocalShortTermLiabilityAmount					= LocalShortTermLiabilityAmount * -1
				LocalLongTermLiabilityAmount					= LocalLongTermLiabilityAmount * -1
				if (!Asset.AssetLease.Lease.Status.Modify)
					if (ReleasedSTLBookTransactionsRel exists)
						LocalReleasedShortTermLiabilityAmount		= sum ReleasedSTLBookTransactionsRel.TransactionAmount
						LocalShortTermLiabilityAmount				= LocalShortTermLiabilityAmount - LocalReleasedShortTermLiabilityAmount
					if (ReleasedLTLBookTransactionsRel exists)
						LocalReleasedLongTermLiabilityAmount		= sum ReleasedLTLBookTransactionsRel.TransactionAmount
						LocalLongTermLiabilityAmount				= LocalLongTermLiabilityAmount - LocalReleasedLongTermLiabilityAmount
			else
				include CalculateBookShortTermLiabilityForMultipleAssets
				if (ReleasedSTLBookTransactionsRel exists)
					LocalReleasedShortTermLiabilityAmount	= sum ReleasedSTLBookTransactionsRel.TransactionAmount
					LocalShortTermLiabilityAmount			= LocalShortTermLiabilityAmount + LocalReleasedShortTermLiabilityAmount
				if (ReleasedLTLBookTransactionsRel exists)
					LocalReleasedLongTermLiabilityAmount	= sum ReleasedLTLBookTransactionsRel.TransactionAmount
					LocalLongTermLiabilityAmount			= LocalLongTermLiabilityAmount + LocalReleasedLongTermLiabilityAmount
				LocalCurrencyAmount 				= LocalShortTermLiabilityAmount
				RoundedTransactionAmount			= RoundedCurrencyAmount
				LocalShortTermLiabilityAmount 		= RoundedTransactionAmount
				LocalCurrencyAmount 				= LocalLongTermLiabilityAmount
				RoundedTransactionAmount			= RoundedCurrencyAmount
				LocalLongTermLiabilityAmount 		= RoundedTransactionAmount
				LocalCreditTotal					= LocalShortTermLiabilityAmount + LocalLongTermLiabilityAmount + TranClearingAccountAmount
				if (!Asset.AssetLease.Lease.Status.Modify)
					if (ReleasedSTLBookTransactionsRel exists)
						LocalCurrencyAmount 				= LocalASTTransactionAmount
						RoundedTransactionAmount			= RoundedCurrencyAmount
						LocalASTTransactionAmount 			= RoundedTransactionAmount
						if (LocalCreditTotal != LocalASTTransactionAmount)
							LocalCreditDifference			= LocalASTTransactionAmount - LocalCreditTotal
							LocalShortTermLiabilityAmount	= LocalShortTermLiabilityAmount + LocalCreditDifference
					else
						if (LocalCreditTotal != Basis)
							LocalCreditDifference			= Basis - LocalCreditTotal
							LocalShortTermLiabilityAmount	= LocalShortTermLiabilityAmount + LocalCreditDifference
				else
					LocalCreditDifference				= LocalASTTransactionAmount - (LocalShortTermLiabilityAmount + LocalLongTermLiabilityAmount)
					LocalShortTermLiabilityAmount		= LocalShortTermLiabilityAmount + LocalCreditDifference
				LocalShortTermLiabilityAmount				= LocalShortTermLiabilityAmount * -1
				LocalLongTermLiabilityAmount				= LocalLongTermLiabilityAmount * -1

			invoke Create AssetBookTransaction    
				invoked.TransientCurrencyTable							= LocalCurrencyTable
				invoked.Asset											= Asset
				invoked.FinanceEnterpriseGroup							= Asset.FinanceEnterpriseGroup
				invoked.Company											= Asset.Company
				invoked.Book											= Book
				invoked.AssetBookTransaction.TransactionStatus			= "U"
				invoked.TransactionDate									= LocalTransactionDate
				invoked.Reference										= Asset.AssetProcess
				if (Asset.AssetProcess.Addition)
					if (TransientPostingDate entered)
						invoked.PostingDate								= TransientPostingDate
				else
					if (Asset.AssetProcess.Adjustment)
						invoked.PostingDate								= UnreleasedAssetAdjustmentRel.PostingDate

				if (Asset.Status.Unreleased)
					invoked.AssetProcess								= "ADD"
				else
					invoked.AssetProcess								= "ADJ"
					invoked.ProcessSequence								= UnreleasedAssetAdjustmentRel.AssetAdjustment
				if (UseLeaseDebitAccount)
					invoked.AssetAccountType							= "STL"
				else
					invoked.AssetAccountType							= "CLR"
				invoked.DistributionAccount								= Asset.AssetLease.Lease.ShortTermLiabilityAccount
				invoked.TransactionNumberOfDecimals						= TransactionNumberOfDecimals
				invoked.TransactionAmount								= LocalShortTermLiabilityAmount
				invoked.AssetTransactionAmount.TransactionAmount 		= LocalShortTermLiabilityAmount
				invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
				invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency

			if (LocalLongTermLiabilityAmount entered)
				invoke Create AssetBookTransaction    
					invoked.TransientCurrencyTable							= LocalCurrencyTable
					invoked.Asset											= Asset
					invoked.FinanceEnterpriseGroup							= Asset.FinanceEnterpriseGroup
					invoked.Company											= Asset.Company
					invoked.Book											= Book
					invoked.AssetBookTransaction.TransactionStatus			= "U"
					invoked.TransactionDate									= LocalTransactionDate
					invoked.Reference										= Asset.AssetProcess
					if (Asset.AssetProcess.Addition)
						if (TransientPostingDate entered)
							invoked.PostingDate								= TransientPostingDate
					else
						if (Asset.AssetProcess.Adjustment)
							invoked.PostingDate								= UnreleasedAssetAdjustmentRel.PostingDate

					if (Asset.Status.Unreleased)
						invoked.AssetProcess								= "ADD"
					else
						invoked.AssetProcess								= "ADJ"
						invoked.ProcessSequence								= UnreleasedAssetAdjustmentRel.AssetAdjustment
					if (UseLeaseDebitAccount)
						invoked.AssetAccountType							= "LTL"
					else
						invoked.AssetAccountType							= "CLR"
					invoked.DistributionAccount								= Asset.AssetLease.Lease.LongTermLiabilityAccount
					invoked.TransactionNumberOfDecimals						= TransactionNumberOfDecimals
					invoked.TransactionAmount								= LocalLongTermLiabilityAmount
					invoked.AssetTransactionAmount.TransactionAmount 		= LocalLongTermLiabilityAmount
					invoked.AssetTransactionAmount.ExchangeDate 			= LocalTransactionDate
					invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency


		RefreshAdjustmentDate
			invoke Released.Update AssetRel
				if (AdjustmentDate entered)
					invoked.AdjustmentDate = AdjustmentDate
				else
					confirmation required
						"UseCurrentDateAsAdjustmentDate?"
					invoked.AdjustmentDate = current corporate date
					AdjustmentDate = AssetRel.AdjustmentDate

		FindFirstLastFlagValue
			if (action type.Create
			or (InServiceDate changed
			and YearToDateDepreciation not entered
			or LifeToDateDepreciation not entered)
			or (LifeRemaining changed))
				AnnualDepreciation.InAsset					= Asset
				AnnualDepreciation.InBook					= Book
				AnnualDepreciation.InYearEndDate			= BookYearEndDate
				AnnualDepreciation.InYearBeginDate			= BookYearBeginDate
				AnnualDepreciation.InServiceDate			= InServiceDate
				AnnualDepreciation.InPrevYearEndDate		= LocalPrevYearEndDate
				LocalMonthsProcessed						= AnnualDepreciation.FirstYearMonths
				if (BookDepreciationPeriodsPerYear = BookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[1])
					LocalBeginYearLife 	= LifeRemaining
				else
					LocalBeginYearLife	= (((LifeRemaining * BookDepreciationPeriodsPerYear) + (BookNumberOfDepreciationPeriodsClosed * 12))/ 12)
				if (LocalBeginYearLife > Life)
					LocalBeginYearLife = Life

				if (BookRel.DepreciationType 	= "C")
					FirstAndLastYear			= "M"
				else
				if (InServiceDate >= BookYearBeginDate
				and !Asset.AssetCategory.NonDepreciable)
					if (InServiceDate <= BookYearEndDate
					and LifeRemaining not entered)
						if (Method entered
						and ComputeOption != "Y")
							FirstAndLastYear	=  "C"  
						else
							FirstAndLastYear 	= blank
					else
						if (Convention.MidMonth)
							if ((Life < LocalMonthsProcessed)
							and (InServiceDate <= BookYearEndDate)
							and (LifeToDateDepreciation not entered)
							or ((LifeRemaining <= (((BookDepreciationPeriodsPerYear - BookNumberOfDepreciationPeriodsClosed)/BookDepreciationPeriodsPerYear)*12))
							and ((LifeToDateDepreciation entered)
							or	(YearToDateDepreciation entered))))
								FirstAndLastYear	= "L"
							else
								FirstAndLastYear	= "F"
						else
							if (((Life <= LocalMonthsProcessed)
							and (InServiceDate <= BookYearEndDate)
							and (LifeToDateDepreciation not entered))
							or  ((LifeRemaining <= (((BookDepreciationPeriodsPerYear - BookNumberOfDepreciationPeriodsClosed)/BookDepreciationPeriodsPerYear)*12))
							and ((LifeToDateDepreciation entered)
							and (YearToDateDepreciation entered))))
								FirstAndLastYear	= "L"
							else
								FirstAndLastYear	= "F"
				else
					if (PersonalUseCode.AllowPostRecoveryDeduction)
						FirstAndLastYear = "P"
					else
						if (LifeRemaining not entered
						and !Method = "UOP"
						and !Asset.AssetCategory.NonDepreciable)
							FirstAndLastYear	= "C"
						else
						if (!LocalBeginYearLife > 12
						and !Method = "UOP"
						and !Asset.AssetCategory.NonDepreciable)
							FirstAndLastYear	= "L"
						else
							FirstAndLastYear	= "M"

		ProjectDateEdit
			include AccountDefaulting
			if (InServiceDate entered)
				if (IsPostingBook)
					include ProjectDateValidation

		DepreciationEndDateCalc
			if (ComputeOption = "Y")
				DepreciationEndDate = DepreciationStartDate + Life as months
				DepreciationEndDate = DepreciationEndDate - 1 day

			else
			if (LifeRemaining entered
			or LifeRemaining changed)
				DepreciationEndDate = CurrentBookCalendarRel.LastPeriodDate + 1 day
				LocalLifeRemaining = LifeRemaining
				LocalTotalLife = LifeRemaining - LocalLifeRemaining
				if (LocalTotalLife < 0)
					LocalLifeRemaining -= 1
					DepreciationEndDate = DepreciationEndDate + LocalLifeRemaining as months
					LocalDepreciationDate = DepreciationEndDate + 1 month
					LocalDaysRemaining = LocalDepreciationDate - DepreciationEndDate
					LocalDaysRemaining = LocalDaysRemaining * (LocalTotalLife + 1)
					DepreciationEndDate = DepreciationEndDate + LocalDaysRemaining as days
					DepreciationEndDate = DepreciationEndDate - 1 day
				else
					if (Asset.Status.Unreleased
					or InServiceDate > CurrentBookCalendarRel.YearEndDate)
						DepreciationEndDate = DepreciationStartDate + LocalLifeRemaining as months
					else
						DepreciationEndDate = DepreciationEndDate + LocalLifeRemaining as months
					LocalDepreciationDate = DepreciationEndDate + 1 month
					LocalDaysRemaining = LocalDepreciationDate - DepreciationEndDate
					LocalDaysRemaining = LocalDaysRemaining * LocalTotalLife
					DepreciationEndDate = DepreciationEndDate + LocalDaysRemaining as days
					DepreciationEndDate = DepreciationEndDate - 1 day


		CreateExitRules
			LocalAction = "A"
			include AccountDefaulting
			if (Asset.AssetLease entered)
				if (BookCurrencyOnLeasedAsset)
					constraint (Book.Currency = Asset.Currency)
						"BookCurrency<Book.Currency>MustBeEqualToTheAssetCurrency<Asset.Currency>OrLeaseBaseCurrency<Asset.AssetLease.Lease.BaseCurrency>ForLeasedAssets"
			if (InServiceDate entered)
				if (IsPostingBook)
					include ProjectDateValidation
			if (!Asset.AssetProcess.Transfer)
				if (action type.Create
				and Book.Currency != Asset.Currency
				and Book.PostCurrency.Book)
					TransientExchangeDate = HighPurchaseDate
					if (!AdjustmentImpairmentBook)
						if(parentcontext.name != "MassAssetAdditions")
							if(!LocalTransactionCost entered)
								include CurrencyExchangeForBasis
				include DepreciationValues
				if (action type.Create
				and Asset.AssetProcess.Adjustment)
					include CreateAdjustment
				if (!LocalCalledFromBatch)
					if (!Asset.AssetProcess.Adjustment)
						if (!Asset.Status.Unreleased) 	
							if (!UnreleasedImpairment)
								if (IsPostingBook)
									invoke Delete UnreleasedAssetTransactionsRel
								else
									invoke Delete UnreleasedAssetBookTransactionsRel
						else
							if (Basis changed)
								initialize CreditBalance
								initialize DebitBalance
							if (Basis changed
							and ComputeOption = "Y")
								invoke Delete UnreleasedAssetTransactionsRel
								invoke Delete UnreleasedAssetBookTransactionsRel
							else
								if (Basis changed)
									invoke Delete UnreleasedASTTransactionsRel
									invoke Delete UnreleasedCLRTransactionsRel
									invoke Delete UnreleasedDEBTransactionsRel
									invoke Delete UnreleasedLIMTransactionsRel
									invoke Delete UnreleasedLADTransactionsRel
									invoke Delete UnreleasedSTLTransactionsRel
									invoke Delete UnreleasedLTLTransactionsRel
									invoke Delete UnreleasedASTBookTransactionsRel
									invoke Delete UnreleasedCLRBookTransactionsRel
									invoke Delete UnreleasedDEBBookTransactionsRel
									invoke Delete UnreleasedLIMBookTransactionsRel
									invoke Delete UnreleasedLADBookTransactionsRel
									invoke Delete UnreleasedSTLBookTransactionsRel
									invoke Delete UnreleasedLTLBookTransactionsRel



				LocalAction = "A"

				if (Basis entered
				and ((Life entered
						and Method entered)
					or IsNonDepreciable
					or Book.DepreciationType.ClassLevel)
				and not TransientSkipTransactionCreate)

					if (!FromImport)
						if(!AssetCategoryAdjusted)
							include CreateTransactions
					else
						confirmation required
							"Warning;TransactionsWillNotBeCreatedForAdjustmentsToAnImportedAssetPriorToRelease"
				invoke SetUsed CurrentBookCalendarRel
					invoked.PrmUsed	= true
				initialize ComputeOption
				ComputedLifeRemaining  = LifeRemaining

				if (LifeRemaining > 0)

					if (DepreciationEndDate not entered)
						LocalDepreciationEndDate = InServiceDate + Life as months
						LocalDepreciationEndDate = LocalDepreciationEndDate - 1
					else
						LocalDepreciationEndDate = DepreciationEndDate
					if (LocalDepreciationEndDate <= CurrentBookCalendarRel.YearEndDate
					and LocalDepreciationEndDate > CurrentBookCalendarRel.LastPeriodDate)
						FirstAndLastYear = "L"
					else
						if (LifeRemaining changed
						and LifeRemaining <= (CurrentBookCalendarRel.DepreciationPeriodsPerYear - CurrentBookCalendarRel.NumberOfPeriodCloseRuns)
						and CurrentBookCalendarRel.DepreciationPeriodsPerYear <= 12
						and UnreleasedAssetBookAdjustmentRel exists)
							FirstAndLastYear = "L"
						else
							if (InServiceDate >= CurrentBookCalendarRel.YearBeginDate
							and InServiceDate <= CurrentBookCalendarRel.BookCalendar.YearEndDate)
								FirstAndLastYear = "F"
							else
								FirstAndLastYear = "M"
							if (InServiceDate > CurrentBookCalendarRel.YearEndDate)
								FirstAndLastYear = blank
			round LifeToDateDepreciation to nearest DerivedRoundTo
			round YearToDateDepreciation to nearest DerivedRoundTo

		ImportCreateExitRules
			LocalAction = "A"
			if (!TransientCreateFromBookImport)
				invoke UpdateFromAssetItemTransfer Asset 
				include CreateAdjustment
			include FindFirstLastFlagValue
			include AccountDefaulting
			if (InServiceDate entered)
				if (IsPostingBook)
					include ProjectDateValidation

			LocalAction = "A"
			include DepreciationValues

			if (DepreciationEndDate not entered)
				LocalDepreciationEndDate = InServiceDate + Life as months
				LocalDepreciationEndDate = LocalDepreciationEndDate - 1
			else
				LocalDepreciationEndDate = DepreciationEndDate
			if (LifeRemaining > 0)
				if (LocalDepreciationEndDate <= CurrentBookCalendarRel.YearEndDate
				and LocalDepreciationEndDate > CurrentBookCalendarRel.LastPeriodDate)
					FirstAndLastYear = "L"
				else
					if (LifeRemaining changed
					and LifeRemaining <= (CurrentBookCalendarRel.DepreciationPeriodsPerYear - CurrentBookCalendarRel.NumberOfPeriodCloseRuns)
					and CurrentBookCalendarRel.DepreciationPeriodsPerYear <= 12
					and UnreleasedAssetBookAdjustmentRel exists)
						FirstAndLastYear = "L"
					else
						if (InServiceDate >= CurrentBookCalendarRel.YearBeginDate
						and InServiceDate <= CurrentBookCalendarRel.BookCalendar.YearEndDate)
							FirstAndLastYear = "F"
						else
							FirstAndLastYear = "M"
						if (InServiceDate > CurrentBookCalendarRel.YearEndDate)
							FirstAndLastYear = blank
			else
				if (LocalDepreciationEndDate < CurrentBookCalendarRel.LastPeriodDate)
					if (PersonalUseCode entered
		            and PersonalUseCode.AllowPostRecoveryDeduction
		            and LifeToDateDepreciation < Basis)
						FirstAndLastYear = "P"
					else
						FirstAndLastYear = "C"

			if (!TransientCreateFromBookImport)
				if   (Basis entered
				and  ((Life entered
				and    Method entered)
				or    IsNonDepreciable
				or    Book.DepreciationType.ClassLevel)
				and   not TransientSkipTransactionCreate)
					include CreateTransactions
			if (!CurrentBookCalendarRel.Used)
				invoke SetAsUsed CurrentBookCalendarRel
			initialize ComputeOption
			round LifeToDateDepreciation to nearest DerivedRoundTo
			round YearToDateDepreciation to nearest DerivedRoundTo

		CurrencyExchangeForIncrementAmount 

			CurrencyWork.FromCurrency			= Asset.Currency
			CurrencyWork.BaseAmount.ToCurrency	= Book.Currency
			LocalCurrencyRate					= CurrencyWork.BaseAmount.OutputCurrencyRate
			if (Book.CurrencyTable entered)
				CurrencyWork.CurrencyTable		= Book.CurrencyTable
			else
				CurrencyWork.CurrencyTable		= Asset.CurrencyTable
			CurrencyWork.FinanceEnterpriseGroup	= Asset.Company.FinanceEnterpriseGroup
			TransientExchangeRate				= LocalCurrencyRate


		CurrencyExchangeForBasis 		
			if (Asset.LeasedAsset
			and  Asset.AssetLease.Lease.NumberOfAssets = 1
			and !PromptForClearingAmount)
				Basis							= Asset.AssetLease.Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
			else
				LocalFromCurrency           			= Asset.Currency
				LocalBaseAmount.ToCurrency				= Book.Currency
				LocalCurrencyRate						= LocalBaseAmount.OutputCurrencyRate
				if (Book.CurrencyTable entered)
					LocalCurrencyTable	= Book.CurrencyTable
				else
					LocalCurrencyTable	= Asset.CurrencyTable
				LocalEnterpriseGroup					= Asset.Company.FinanceEnterpriseGroup
				LocalBaseAmount.EnteredCurrencyRate	 	= LocalCurrencyRate
				TransientExchangeRate					= LocalCurrencyRate
				Basis									= LocalBaseAmount.OutputCurrencyAmount

		CurrencyExchangeForCopyRow
			CurrencyWork.TransactionAmount    		= LocalAmount
			CurrencyWork.ExchangeDate         		= HighPurchaseDate
			CurrencyWork.FromCurrency				= TransientFromCurrency
			CurrencyWork.BaseAmount.ToCurrency		= LocalCurrency
			LocalCurrencyRate						= CurrencyWork.BaseAmount.OutputCurrencyRate
			if (PrmBook.CurrencyTable entered)
				invoked.CurrencyWork.CurrencyTable	= PrmBook.CurrencyTable
			else
				invoked.CurrencyWork.CurrencyTable	= Asset.CurrencyTable
			CurrencyWork.FinanceEnterpriseGroup		= Asset.Company.FinanceEnterpriseGroup
			TransientExchangeRate					= LocalCurrencyRate

		UpdateTransactionCosts
			initialize LocalTransactionItemCost
			if (action type.Create)
				LocalTransactionItemCost = (sum AssetItemRel.TransactionItemCost)
			invoke UpdateFromAssetItem ThisInstanceRel
				invoked.PrmBasis	= LocalTransactionItemCost

		DeleteRules
			constraint (DeleteAllowed or AdjustmentAllowed)
				"CannotDelete;AssetCannotBeAdjusted"

			if (DisplayAdjustmentDate)
				include RefreshAdjustmentDate

			LocalAction = "D"
			include CreateAdjustment

			if (IsPostingBook)
				invoke Delete MemoAssetTransactionRel
				invoke Delete UnreleasedAssetTransactionsRel
				if (AssetControlTransactionRel exists)
					if (UnreleasedTransactionsForAllBooksRel exists)
						invoke Update AssetControlTransactionRel
					else
						invoke Delete AssetControlTransactionRel
			else

				invoke Delete AssetBookTransactionsRel
				invoke Delete AssetBookHistorysRel















			if (PersonalUseCode entered)
				invoke Delete PersonalUseHistoryRel

		CreateGuidelineClassRegulation
			if (BookRegulation entered
			and Asset.AssetGuidelineClass entered)
				if (Method not entered)
					Method					= first GuidelineClassRegulationsRel.Method
				if (Life not entered)
					Life					= first GuidelineClassRegulationsRel.Life
				if (GuidelineClassRegulationsRel.Convention entered)
					Convention				= first GuidelineClassRegulationsRel.Convention
				if (GuidelineClassRegulationsRel.PersonalUseCode entered)
					LocalPersonalUseCode	= GuidelineClassRegulationsRel.PersonalUseCode
					constraint (RegulationPersonalUseCodeRel exists)
						"PersonalUseCode<PersonalUseCode>ForBook<Book>DoesnotExists"
				if (PersonalUseCode not entered)
					PersonalUseCode			= first GuidelineClassRegulationsRel.PersonalUseCode
				else
					LocalPersonalUseCode	= PersonalUseCode
					constraint (RegulationPersonalUseCodeRel exists)
						"PersonalUseCode<PersonalUseCode>ForBook<Book>DoesnotExists"
				if (ClassificationOfProperty not entered)
					ClassificationOfProperty	= first GuidelineClassRegulationsRel.ClassificationOfProperty

				if (AssetTaxCreditTable not entered)
					AssetTaxCreditTable		= first GuidelineClassRegulationsRel.AssetTaxCreditTable
					if (AssetTaxCreditTable entered)
						TaxCreditPropertyAmount = Basis * AssetTaxCreditTable.QualifyingPercentage / 100
						TaxCredit 				= TaxCreditPropertyAmount * AssetTaxCreditTable.TaxCreditPercentage / 100

				if (FirstYearExpenseAmount not entered)
					FirstYearExpenseAmount	= Basis * (GuidelineClassRegulationsRel.FirstYearExpensePercent/100)
				if (BusinessPercent not entered)
					BusinessPercent			= first GuidelineClassRegulationsRel.BusinessPercent
				if (SalvageValue not entered)
					SalvageValue			= Basis * (GuidelineClassRegulationsRel.SalvagePercent/100)


				if (Used not entered)
					if (Asset.Used)
						Used = Asset.Used
					else
						Used = GuidelineClassRegulationsRel.Used
				if (IndianReservation not entered)
					IndianReservation			= first GuidelineClassRegulationsRel.IndianReservation
				if (PropertyType not entered)
					PropertyType				= first GuidelineClassRegulationsRel.PropertyType
				if (QualifiedImprovement not entered)
					QualifiedImprovement		= first GuidelineClassRegulationsRel.QualifiedImprovement
				if (ForeignProperty not entered)
					ForeignProperty				= first GuidelineClassRegulationsRel.ForeignProperty
				if (CostRecoverySystem not entered)
					CostRecoverySystem			= first GuidelineClassRegulationsRel.CostRecoverySystem
				if (NonConforming not entered)
					NonConforming				= first GuidelineClassRegulationsRel.NonConforming
				if (Farming not entered)
					Farming						= first GuidelineClassRegulationsRel.Farming
				if (MineralReserves not entered)
					MineralReserves				= first GuidelineClassRegulationsRel.MineralReserves
				if (LowIncomeHousing not entered)
					LowIncomeHousing			= first GuidelineClassRegulationsRel.LowIncomeHousing
				if (Section179 not entered)
					Section179					= first GuidelineClassRegulationsRel.Section179
				if (Listed not entered)
					Listed						= first GuidelineClassRegulationsRel.Listed
				if (DepreciableIntangible not entered)
					DepreciableIntangible		= GuidelineClassRegulationsRel.DepreciableIntangible
				if (TransitionalRuleFlag not entered)
					TransitionalRuleFlag		= first GuidelineClassRegulationsRel.TransitionalRuleFlag
				if (DeprBonus entered)
					BonusAmount				= DeprBonus
		InitializeValues
			initialize Method
			initialize Life
			initialize Convention
			initialize PersonalUseCode
			initialize ClassificationOfProperty
			initialize AssetTaxCreditTable
			initialize FirstYearExpenseAmount
			initialize BusinessPercent
			initialize SalvageValue
			initialize Used
			initialize IndianReservation
			initialize PropertyType
			initialize QualifiedImprovement

			initialize ForeignProperty
			initialize CostRecoverySystem
			initialize NonConforming
			initialize Farming
			initialize MineralReserves
			initialize LowIncomeHousing
			initialize Section179
			initialize Section179Expense
			initialize Listed
			initialize DepreciableIntangible
			initialize TransitionalRuleFlag
			initialize BonusAmount

		CalculateShortTermLiabilityForMultipleAssets
			initialize LocalShortTermLiabilityEntered
			initialize LocalLongTermLiabilityEntered
			initialize LocalShortTermLiabilityAmount
			initialize LocalLongTermLiabilityAmount
			if (UseBookCurrencyOnLeasedAsset)
				if (Asset.AssetLease.Lease.Status.Modify)
					LocalShortTermLiabilityAmount			= first ModificationInProgressRel.DerivedBaseShortTermAdjustment
					LocalLongTermLiabilityAmount			= first ModificationInProgressRel.DerivedBaseLongTermAdjustment
					LocalSTLiabilityPercentage				= LocalASTTransactionAmount/ Asset.AssetLease.Lease.BaseAssetAdjustmentAfterModification
					LocalLTLiabilityPercentage				= LocalSTLiabilityPercentage
					LocalShortTermLiabilityAmount			= LocalShortTermLiabilityAmount * LocalSTLiabilityPercentage
					LocalLongTermLiabilityAmount			= LocalLongTermLiabilityAmount * LocalLTLiabilityPercentage
				else
					if (Asset.DerivedNumberOfAssets = Asset.AssetLease.Lease.NumberOfAssets and !ReleasedSTLTransactionsRel exists)
						for each Asset.AssetLease.Lease.AssetsRel
							LocalLiabilityAsset	= each.Asset
							if (LocalLiabilityAsset != Asset)
								LocalShortTermLiabilityEntered	+= sum ShortTermLiabilityTransactionsRel.TransactionAmount
								LocalLongTermLiabilityEntered	+= sum LongTermLiabilityTransactionsRel.TransactionAmount
						LocalShortTermLiabilityAmount	= last LeasePaymentBalancesRel.BeginningShortTermLiability + LocalShortTermLiabilityEntered
						LocalLongTermLiabilityAmount	= last LeasePaymentBalancesRel.BeginningLongTermLiability + LocalLongTermLiabilityEntered
					else
						LocalShortTermLiabilityAmount	= last LeasePaymentBalancesRel.BeginningShortTermLiability
						LocalLongTermLiabilityAmount	= last LeasePaymentBalancesRel.BeginningLongTermLiability
						if (ReleasedSTLTransactionsRel exists)
							LocalSTLiabilityPercentage		= Basis/Asset.AssetLease.Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
							LocalLTLiabilityPercentage		= Basis/Asset.AssetLease.Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
							LocalShortTermLiabilityAmount	= ((LocalShortTermLiabilityAmount - TranClearingAccountAmount) * LocalSTLiabilityPercentage)
							LocalLongTermLiabilityAmount	= ((LocalLongTermLiabilityAmount - TranClearingAccountAmount) * LocalLTLiabilityPercentage)			
						else
							LocalSTLiabilityPercentage		= LocalShortTermLiabilityAmount/Asset.AssetLease.Lease.LeaseObligation.BaseAmount.EnteredCurrencyAmount
							LocalLTLiabilityPercentage		= LocalLongTermLiabilityAmount/Asset.AssetLease.Lease.LeaseObligation.BaseAmount.EnteredCurrencyAmount
							LocalShortTermLiabilityAmount	= ((Basis - TranClearingAccountAmount) * LocalSTLiabilityPercentage)
							LocalLongTermLiabilityAmount	= ((Basis - TranClearingAccountAmount) * LocalLTLiabilityPercentage)
			else
				if (Asset.AssetLease.Lease.Status.Modify)
					LocalShortTermLiabilityAmount			= first ModificationInProgressRel.DerivedShortTermAdjustment
					LocalLongTermLiabilityAmount			= first ModificationInProgressRel.DerivedLongTermAdjustment
					LocalSTLiabilityPercentage				= LocalASTTransactionAmount/ Asset.AssetLease.Lease.AssetAdjustmentAfterModification
					LocalLTLiabilityPercentage				= LocalSTLiabilityPercentage
					LocalShortTermLiabilityAmount	= LocalShortTermLiabilityAmount * LocalSTLiabilityPercentage
					LocalLongTermLiabilityAmount	= LocalLongTermLiabilityAmount * LocalLTLiabilityPercentage
				else
					if (Asset.DerivedNumberOfAssets = Asset.AssetLease.Lease.NumberOfAssets and !ReleasedSTLTransactionsRel exists)
						for each Asset.AssetLease.Lease.AssetsRel
							LocalLiabilityAsset	= each.Asset
							if (LocalLiabilityAsset != Asset)
								LocalShortTermLiabilityEntered	+= sum ShortTermLiabilityTransactionsRel.TransactionAmount
								LocalLongTermLiabilityEntered	+= sum LongTermLiabilityTransactionsRel.TransactionAmount
						LocalShortTermLiabilityAmount	= first LeaseCurrencyPaymentBalancesRel.BeginningShortTermLiability + LocalShortTermLiabilityEntered
						LocalLongTermLiabilityAmount	= first LeaseCurrencyPaymentBalancesRel.BeginningLongTermLiability + LocalLongTermLiabilityEntered
					else
						LocalShortTermLiabilityAmount	= first LeaseCurrencyPaymentBalancesRel.BeginningShortTermLiability
						LocalLongTermLiabilityAmount	= first LeaseCurrencyPaymentBalancesRel.BeginningLongTermLiability
						if (ReleasedSTLTransactionsRel exists)
							LocalSTLiabilityPercentage		= Basis/Asset.AssetLease.Lease.LeaseROUAssetAmount.TransactionAmount
							LocalLTLiabilityPercentage		= Basis/Asset.AssetLease.Lease.LeaseROUAssetAmount.TransactionAmount
							LocalShortTermLiabilityAmount	= ((LocalShortTermLiabilityAmount - TranClearingAccountAmount) * LocalSTLiabilityPercentage)
							LocalLongTermLiabilityAmount	= ((LocalLongTermLiabilityAmount - TranClearingAccountAmount) * LocalLTLiabilityPercentage)
						else
							LocalSTLiabilityPercentage		= LocalShortTermLiabilityAmount/Asset.AssetLease.Lease.LeaseObligation.TransactionAmount
							LocalLTLiabilityPercentage		= LocalLongTermLiabilityAmount/Asset.AssetLease.Lease.LeaseObligation.TransactionAmount
							LocalShortTermLiabilityAmount	= ((Basis - TranClearingAccountAmount) * LocalSTLiabilityPercentage)
							LocalLongTermLiabilityAmount	= ((Basis - TranClearingAccountAmount) * LocalLTLiabilityPercentage)

		CalculateBookShortTermLiabilityForMultipleAssets
			initialize LocalShortTermLiabilityEntered
			initialize LocalLongTermLiabilityEntered
			initialize LocalShortTermLiabilityAmount
			initialize LocalLongTermLiabilityAmount
			if (UseBookCurrencyOnLeasedAsset)
				if (Asset.AssetLease.Lease.Status.Modify)
					LocalShortTermLiabilityAmount			= first ModificationInProgressRel.DerivedBaseShortTermAdjustment
					LocalLongTermLiabilityAmount			= first ModificationInProgressRel.DerivedBaseLongTermAdjustment
					LocalSTLiabilityPercentage				= LocalASTTransactionAmount/ Asset.AssetLease.Lease.BaseAssetAdjustmentAfterModification
					LocalLTLiabilityPercentage				= LocalSTLiabilityPercentage
					LocalShortTermLiabilityAmount			= LocalShortTermLiabilityAmount * LocalSTLiabilityPercentage
					LocalLongTermLiabilityAmount			= LocalLongTermLiabilityAmount * LocalLTLiabilityPercentage
				else
					if (Asset.DerivedNumberOfAssets = Asset.AssetLease.Lease.NumberOfAssets and !ReleasedSTLBookTransactionsRel exists)
						for each Asset.AssetLease.Lease.AssetsRel
							LocalLiabilityAsset	= each.Asset
							if (LocalLiabilityAsset != Asset)
								LocalShortTermLiabilityEntered	+= sum ShortTermLiabilityBookTransactionsRel.TransactionAmount
								LocalLongTermLiabilityEntered	+= sum LongTermLiabilityBookTransactionsRel.TransactionAmount
						LocalShortTermLiabilityAmount	= last LeasePaymentBalancesRel.BeginningShortTermLiability + LocalShortTermLiabilityEntered
						LocalLongTermLiabilityAmount	= last LeasePaymentBalancesRel.BeginningLongTermLiability + LocalLongTermLiabilityEntered
					else
						LocalShortTermLiabilityAmount	= last LeasePaymentBalancesRel.BeginningShortTermLiability
						LocalLongTermLiabilityAmount	= last LeasePaymentBalancesRel.BeginningLongTermLiability
						if (ReleasedSTLBookTransactionsRel exists)
							LocalSTLiabilityPercentage		= Basis/Asset.AssetLease.Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
							LocalLTLiabilityPercentage		= Basis/Asset.AssetLease.Lease.LeaseROUAssetAmount.BaseAmount.EnteredCurrencyAmount
							LocalShortTermLiabilityAmount	= ((LocalShortTermLiabilityAmount - TranClearingAccountAmount) * LocalSTLiabilityPercentage)
							LocalLongTermLiabilityAmount	= ((LocalLongTermLiabilityAmount - TranClearingAccountAmount) * LocalLTLiabilityPercentage)
						else
							LocalSTLiabilityPercentage		= LocalShortTermLiabilityAmount/Asset.AssetLease.Lease.LeaseObligation.BaseAmount.EnteredCurrencyAmount
							LocalLTLiabilityPercentage		= LocalLongTermLiabilityAmount/Asset.AssetLease.Lease.LeaseObligation.BaseAmount.EnteredCurrencyAmount
							LocalShortTermLiabilityAmount	= ((Basis - TranClearingAccountAmount) * LocalSTLiabilityPercentage)
							LocalLongTermLiabilityAmount	= ((Basis - TranClearingAccountAmount) * LocalLTLiabilityPercentage)						
			else
				if (Asset.AssetLease.Lease.Status.Modify)
					LocalShortTermLiabilityAmount			= first ModificationInProgressRel.DerivedShortTermAdjustment
					LocalLongTermLiabilityAmount			= first ModificationInProgressRel.DerivedLongTermAdjustment
					LocalSTLiabilityPercentage				= LocalASTTransactionAmount/ Asset.AssetLease.Lease.AssetAdjustmentAfterModification
					LocalLTLiabilityPercentage				= LocalSTLiabilityPercentage
					LocalShortTermLiabilityAmount	= LocalShortTermLiabilityAmount * LocalSTLiabilityPercentage
					LocalLongTermLiabilityAmount	= LocalLongTermLiabilityAmount * LocalLTLiabilityPercentage
				else
					if (Asset.DerivedNumberOfAssets = Asset.AssetLease.Lease.NumberOfAssets and !ReleasedSTLBookTransactionsRel exists)
						for each Asset.AssetLease.Lease.AssetsRel
							LocalLiabilityAsset	= each.Asset
							if (LocalLiabilityAsset != Asset)
								LocalShortTermLiabilityEntered	+= sum ShortTermLiabilityBookTransactionsRel.TransactionAmount
								LocalLongTermLiabilityEntered	+= sum LongTermLiabilityBookTransactionsRel.TransactionAmount
						LocalShortTermLiabilityAmount	= first LeaseCurrencyPaymentBalancesRel.BeginningShortTermLiability + LocalShortTermLiabilityEntered
						LocalLongTermLiabilityAmount	= first LeaseCurrencyPaymentBalancesRel.BeginningLongTermLiability + LocalLongTermLiabilityEntered
					else
						LocalShortTermLiabilityAmount	= first LeaseCurrencyPaymentBalancesRel.BeginningShortTermLiability
						LocalLongTermLiabilityAmount	= first LeaseCurrencyPaymentBalancesRel.BeginningLongTermLiability
						if (ReleasedSTLBookTransactionsRel exists)
							LocalSTLiabilityPercentage		= Basis/Asset.AssetLease.Lease.LeaseROUAssetAmount.TransactionAmount
							LocalLTLiabilityPercentage		= Basis/Asset.AssetLease.Lease.LeaseROUAssetAmount.TransactionAmount
							LocalShortTermLiabilityAmount	= ((LocalShortTermLiabilityAmount - TranClearingAccountAmount) * LocalSTLiabilityPercentage)
							LocalLongTermLiabilityAmount	= ((LocalLongTermLiabilityAmount - TranClearingAccountAmount) * LocalLTLiabilityPercentage)
						else
							LocalSTLiabilityPercentage		= LocalShortTermLiabilityAmount/Asset.AssetLease.Lease.LeaseObligation.TransactionAmount
							LocalLTLiabilityPercentage		= LocalLongTermLiabilityAmount/Asset.AssetLease.Lease.LeaseObligation.TransactionAmount
							LocalShortTermLiabilityAmount	= ((Basis - TranClearingAccountAmount) * LocalSTLiabilityPercentage)
							LocalLongTermLiabilityAmount	= ((Basis - TranClearingAccountAmount) * LocalLTLiabilityPercentage)						

	Field Rules









		Company
			default to Asset.Company
			if(Company entered)
				constraint(Company = Asset.Company)
					"CompanyShouldAlwaysBeEqualToAssetCompany"

		Book
			if (!Asset.AssetProcess.Disposal)
				constraint (CurrentBookCalendarRel exists)
					"CalendarHasNotBeenSetupForBook<Book>Company<Asset.Company>"
		Method
			if (IsPostingBook and Asset.AssetCategory.Depreciable and Asset.LeasedAsset) 
				if(Method not entered)			
					default to "SL"
				else
					if(Method entered)
						constraint (Method = "SL")
							"TheMethodMustBeStraightLineForAssetBooksOnAFinanceLease"
			else


				if (GuidelineClassRegulationsRel exists)
					if (LocalBookRegulationChanged)
						Method = GuidelineClassRegulationsRel.Method
					else
						if (!TransientOtherPrograms)
							if (action type.Create)
								if (Method not entered)
									default to GuidelineClassRegulationsRel.Method
			if (Asset.AssetCategory.Depreciable
			and !ResetAdjustment)
				if (Book.DepreciationType.AssetLevel
				and (not(Asset.Status.Unreleased
				and BookRegulation entered
				and TransientUpdateFromAsset)))
					required
						"MethodIsRequiredForADepreciableAsset"
			else
			if (Asset.AssetCategory.NonDepreciable
			and Asset.TransientCategoryUpdate = false
			and !ResetAdjustment)
				cannot be entered
					"MethodCannotBeEnteredForNonDepreciableAsset"

			if (Book.DepreciationType.ClassLevel)
				cannot be entered
					"MethodCannotBeEnteredForClassLevelDepreciation"
			else
				constraint (Method != "ACCT-LEVEL")
					"MethodCannotBe'ACCT-LEVEL'ForAssetLevelDepreciationBook"

			constraint (Method.MethodType.Depreciation)
				"MethodTypeForMethodMustBeDepreciation"

			if (Method = "SLBZERO")
				constraint (IsNonPostingBook)
					"SLBZEROMethodDoesNotAllowPostingBook"

			if (not TransientSkipTransactionCreate)
				if (Method = "100%BONUS")
					if (InServiceDate < "20170928")
						BonusDateRange.Begin	= "20100909"
						BonusDateRange.End		= "20111231"
					else
						BonusDateRange.Begin	= "20170928"
						BonusDateRange.End		= "20221231"
					constraint (Life >= 12)
						"100%BonusMethodNotValidWhenLifeIsLessThan12"
					constraint (InServiceDate within BonusDateRange)
						"100%BonusMethodIsNotValidForInServiceDate"
					if (InServiceDate < CurrentBookCalendarRel.YearBeginDate)
						constraint (HistoryCalendarForInServiceDateRel exists)
							"HistoryCalendarIsRequiredFor100%BonusMethod<InServiceDate>"
						if (!UnreleasedDisposalExists)
							if (ComputeOption = "N"
							or ComputeOption not entered)
								confirmation required
									"ComputeWillBeAppliedWhenAssetBookHasAPriorYearInServiceDateAndThe100%BonusMethod;Continue?"
								ComputeOption = "Y"
			if (Asset.AssetCategory.Depreciable
			and !Book.DepreciationType.ClassLevel
			and !Method.RecordType.UnitsOfProduction)
				if (IsPostingBook and Asset.LeasedAsset and Life not entered)		
					Life = Asset.AssetLease.Lease.DerivedROUAmortization + Asset.AssetLease.Lease.DerivedPriorRenewalsTerm
				else
					if (GuidelineClassRegulationsRel  exists)
						if (LocalBookRegulationChanged)
							Life = GuidelineClassRegulationsRel.Life
						else
							if (!TransientOtherPrograms)
								if (action type.Create)
									if (Life not entered)
										default to GuidelineClassRegulationsRel.Life
					else
						if (not(Asset.Status.Unreleased
						and BookRegulation entered
						and TransientUpdateFromAsset))
							constraint (Life > 0)
								"LifeIsRequiredForDepreciableAsset"

		Life
			if (IsPostingBook and Asset.LeasedAsset and Asset.AssetCategory.Depreciable) 
				if(Life not entered)						
					default to Asset.AssetLease.Lease.DerivedROUAmortization + Asset.AssetLease.Lease.DerivedPriorRenewalsTerm
				else
					if(Life entered and !Asset.AssetLease.Lease.IsARenewal)
						constraint (Life = Asset.AssetLease.Lease.DerivedROUAmortization)
							"DepreciationLifeForLeasedAssetsMustBeEqualToTheRightOfUseAmortizationOnTheLease:<Asset.AssetLease.Lease.DerivedROUAmortization>"
			if (Asset.AssetCategory.NonDepreciable
			and Asset.TransientCategoryUpdate = false
			and !ResetAdjustment)
				cannot be entered
					"LifeCannotBeEnteredForNonDepreciableAsset"

			if (Book.DepreciationType.ClassLevel)
				cannot be entered
					"LifeCannotBeEnteredForClassLevelDepreciation"

			if (Convention.HalfYear
			and LifeToDateDepreciation not entered)
				constraint (Life >= 12)
					"WhenConventionIsHalfYear,LifeCannotBeLessThan12"

			if (Convention.MidQuarter
			and LifeToDateDepreciation not entered)
				constraint (Life >= 3)
					"WhenConventionIsMidQuarter,LifeCannotBeLessThan3"

			initialize LocalBeginningYearLife
			LocalBeginningYearLife = (((LifeRemaining * CurrentBookCalendarRel.DepreciationPeriodsPerYear) + (CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed * 12)) / CurrentBookCalendarRel.DepreciationPeriodsPerYear)
			if (LocalBeginningYearLife > Life)
				LocalBeginningYearLife = Life

		LifeRemaining
			if ((Asset.Status.Unreleased
			or   (AdjustmentDate entered
			or   Asset.AssetProcess.Adjustment))
			and LifeToDateDepreciation not entered
			and (Basis entered
			or (Basis not entered
			and LifeRemaining not changed))
			and !LocalSkipDefaulting)
				default to Life

			constraint (LifeRemaining >= 0)
				"LifeRemainingCannotBeLessThan0"

			if (Method = "100%BONUS"
			and YearToDateDepreciation not entered
			and LifeToDateDepreciation not entered)
				default to Life

			constraint (LifeRemaining <= Life)
				"LifeRemaining<LifeRemaining>CannotBeGreaterThanLife<Life>"

			if (Asset.AssetCategory.NonDepreciable
			and Asset.TransientCategoryUpdate = false
			and !ResetAdjustment)
				constraint (LifeRemaining = Life)
					"LifeRemainingMustBeEqualToLifeForNonDepreciableAsset"

		Basis
			if (action type.Create
			and !Asset.AssetProcess.Disposal)
				LocalTransactionCost = Basis
				for each AssetItemsRel
					LocalEnteredTransactionCost		+= each.TransactionItemCost
				default to LocalEnteredTransactionCost








			if (Basis > 0)
				constraint (Basis >= (LifeToDateDepreciation - YearToDateDepreciation - SalvageValue))
					"BasisCannotBeLessThanPreviousYearDepreciation"
			else
				constraint (Basis <= (LifeToDateDepreciation - YearToDateDepreciation + SalvageValue))
					"BasisCannotBeLessThanPreviousYearDepreciation"

			if (Basis changed)
				initialize CurrentPeriodDepreciationCalculated
				if (Basis not entered)
					initialize YearToDateDepreciation
					initialize LifeToDateDepreciation
					initialize YearToDateDepreciationAllowed
					initialize LifeToDateDepreciationAllowed

		YearToDateDepreciation
			if (!(Asset.Status.PostRelease
			and UnreleasedDisposalExists)
			and Asset.AssetCategory.NonDepreciable
			and Asset.TransientCategoryUpdate = false
			and !ResetAdjustment)
				if(!(UnreleasedAssetAdjustmentRel exists
				and Active changed))
					cannot be entered
						"YearToDateDepreciationCannotBeEnteredForNonDepreciableAsset"

			if (Basis entered)
				if (Basis > 0)
					if (YearToDateDepreciation entered)
						constraint (YearToDateDepreciation > 0)
							"YearToDateDepreciationMustHaveSameSignAsBookBasis"
					constraint (LifeToDateDepreciation >= YearToDateDepreciation)
						"YearToDateDepreciationCannotBeGreaterThanLifeToDateDepreciation"
				else
					constraint (YearToDateDepreciation < 0)
						"YearToDateDepreciationMustHaveSameSignAsBookBasis"		//"YearTo_\DateMustHaveSameSignAs_\Book_\Basis"     
					constraint (LifeToDateDepreciation <= YearToDateDepreciation)
						"YearToDateDepreciationCannotBeGreaterThanLifeToDateDepreciation"	//"YearToDateCannotBeGreaterThanLifeToDate"    
			else
				cannot be entered
					"YearToDateDepreciationCannotBeEnteredWhenBasisIs0"

			if (CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed = 0)
				cannot be entered
					"YearToDateDepreciationMustBeZeroInTheFirstPeriodOfTheYear"

		LifeToDateDepreciation
			if (!(Asset.Status.PostRelease
			and UnreleasedDisposalExists)
			and Asset.AssetCategory.NonDepreciable
			and Asset.TransientCategoryUpdate = false
			and !ResetAdjustment)
				if(!(UnreleasedAssetAdjustmentRel exists
				and Active changed))
					cannot be entered
						"LifeToDateDepreciationCannotBeEnteredForNonDepreciableAsset"

			if (Basis entered)
				if (Basis >= 0)
					constraint (LifeToDateDepreciation >= 0)
						"LifeToDateDepreciationMustHaveSameSignAsBookBasis"
					constraint (LifeToDateDepreciation <= (Basis - SalvageValue))
						"LifeToDateDepreciationCannotBeGreaterThanBasisLessSalvageValue"
				else
					if (ImpairmentBookOfOrigin not entered)
						constraint (LifeToDateDepreciation <= 0)
							"LifeToDateDepreciationMustHaveSameSignAsBookBasis"
						constraint (LifeToDateDepreciation >= (Basis - SalvageValue))
							"LifeToDateDepreciationCannotBeGreaterThanBasisLessSalvageValue"
			else
				cannot be entered
					"LifeToDateDepreciationCannotBeEnteredWhenBasisIs0"


		InServiceDate
			initial value is HighPurchaseDate
			default to HighPurchaseDate
			if ((not(Asset.Status.Unreleased
			and BookRegulation entered
			and TransientUpdateFromAsset))
			or (not(Asset.Status.Unreleased
			and Asset.AssetItemsExist)))
				required
			if (InServiceDate changed
			and LifeToDateDepreciation = 0)
				initialize YearToDateInactiveMonths
				initialize LifeToDateInactiveMonths
			constraint (BookCalendarExists)
				"CurrentCalendarIsNotDefinedForBook<Book>"

		YearPlacedInService

			if (YearPlacedInService changed
			and old YearPlacedInService entered
			and !ResetAdjustment
			and !LocalCalledFromBatch)
				constraint (YearPlacedInService = 1
				and InServiceDate changed)
					"CanNotChange,YearPlacedInServiceAutomaticallyComputed"

		Convention
			if (IsPostingBook and Asset.AssetCategory.Depreciable and Asset.LeasedAsset)
				if(Convention not entered)					
					default to Convention.FullMonth
				else
					if(Convention entered)
						constraint (Convention.FullMonth)
							"TheConventionMustBeFullMonthForAssetBooksOnAFinanceLease"
			else

				if (GuidelineClassRegulationsRel exists)
					if (LocalBookRegulationChanged)
						if(not TransientSkipTransactionCreate)
							Convention = GuidelineClassRegulationsRel.Convention






			if (Book.DepreciationType.ClassLevel)
				cannot be entered
					"ConventionCannotBeEnteredForClassLevelDepreciation"
			else
				default to Book.Convention
				required
					"ConventionIsRequired"






			if (Convention.ActualDaysFirstMonth
			and Asset.AssetCategory.Depreciable)
				constraint (Method = "SL")
					"MethodMustBeStraightLineWhenConventionIsActualDaysFirstMonth"

		TransactionNumberOfDecimals
			if (Book.PostCurrency.Book)
				TransactionNumberOfDecimals = Book.Currency.NumberOfDecimals
			else
				TransactionNumberOfDecimals = Asset.Currency.NumberOfDecimals

		Active
			initial value is true
			default to true
			if (UnreleasedAssetTransactionsRel exists
			or UnreleasedAssetBookTransactionsRel exists)
				cannot be changed
					"ActiveCannotBeChangedAsThereAreUnreleasedTransactionsExists"
			if (!Active)
				initialize CurrentPeriodPortionOfLife
				initialize CurrentPeriodDepreciation
				initialize CurrentPeriodDepreciationAllowed

		FirstAndLastYear
			if (action type.Update
			and old Method not entered)
				include FindFirstLastFlagValue
			else
				if (Book.DepreciationType.ClassLevel)
					FirstAndLastYear = "M"
				else
				if (InServiceDate >= CurrentBookCalendarRel.YearBeginDate
				and !Asset.AssetCategory.NonDepreciable)
					if (InServiceDate <= CurrentBookCalendarRel.BookCalendar.YearEndDate
					and (Basis - SalvageValue - FirstYearExpenseAmount - LifeToDateDepreciation = 0)
					and LifeRemaining = 0)
						if (Method entered)
							FirstAndLastYear = "C"
						else
							FirstAndLastYear = blank
				else
				if (LifeRemaining not > 0
				and (Basis - SalvageValue - FirstYearExpenseAmount - LifeToDateDepreciation = 0)
				and Method != "UOP"
				and !Asset.AssetCategory.NonDepreciable)
					if (Method entered)
						FirstAndLastYear = "C"
					else
						FirstAndLastYear = blank
				else
				if (LocalBeginningYearLife not > 12
				and Method != "UOP"
				and !Asset.AssetCategory.NonDepreciable)
					FirstAndLastYear = "L"
				else
					FirstAndLastYear = "M"
				if (Basis - SalvageValue - FirstYearExpenseAmount - LifeToDateDepreciation = 0
				and Life != 0
				and LifeRemaining not > 0)
					FirstAndLastYear = "C"
				if (Life 		!= 0
				and LifeRemaining	= 0
				and Basis		!= 0
				and PersonalUseCode entered)
					if (PersonalUseCode.AllowPostRecoveryDeduction)
						FirstAndLastYear = "P"
			if (Method = "100%BONUS"
			and YearToDateDepreciation not entered
			and LifeToDateDepreciation not entered)
				FirstAndLastYear = "F"

		SalvageValue

			if (GuidelineClassRegulationsRel  exists)
				if (LocalBookRegulationChanged)
					SalvageValue = Basis * (GuidelineClassRegulationsRel.SalvagePercent/100)
			if (LocalSalvagePercentage entered
			or parentcontext.name = "AssetInterface")
				SalvageValue = Basis * (LocalSalvagePercentage/100)



			if (Asset.AssetCategory.NonDepreciable
			and Asset.TransientCategoryUpdate = false)
				cannot be entered
					"SalvageValueCannotBeEnteredForNonDepreciableAsset"

			if (Basis entered)
				if (Basis > 0)
					constraint (SalvageValue > 0)
						"SalvageValueMustHaveSameSignAsBookBasis"
				else
					constraint (SalvageValue < 0)
						"SalvageValueMustHaveSameSignAsBookBasis"

		BusinessPercent

			if (GuidelineClassRegulationsRel exists)
				if (LocalBookRegulationChanged)
					BusinessPercent = GuidelineClassRegulationsRel.BusinessPercent

			default to 100




			constraint (BusinessPercent >= 0)
				"BusinessPercentageCannotBeNegative"
			constraint (BusinessPercent <= 100)
				"BusinessPercentageCannotBeGreaterThan100%"

		FirstYearExpenseAmount

			if (GuidelineClassRegulationsRel  exists)
				if (LocalBookRegulationChanged)
					FirstYearExpenseAmount = Basis * (GuidelineClassRegulationsRel.FirstYearExpensePercent/100)



		ClassificationOfProperty

			if (GuidelineClassRegulationsRel  exists)
				if (LocalBookRegulationChanged)
					ClassificationOfProperty = GuidelineClassRegulationsRel.ClassificationOfProperty



		LifeInYears
			if (Life entered)
				LifeInYears = Life / 12

				if (Asset.AssetCategory.Depreciable
				and !Book.DepreciationType.ClassLevel)
					required
						"LifeInYearsIsRequiredForDepreciableAsset"
			else
				initialize

			if (Book.DepreciationType.ClassLevel)
				cannot be entered
					"LifeInYearsCannotBeEnteredForClassLevelDepreciation"

		InsuranceCalculationMethod
			constraint (InsuranceCalculationMethod.MethodType = "I")
				"MethodTypeForInsuranceCalculationMethodMustBeInsurance"
        	constraint (!InsuranceCalculationMethod.MethodType.Depreciation)
        		"ADepreciationTypeMethodCannotBeUsedAsAnInsuranceOrReplacementMethod"


		ActualInsuranceValue
			if (Basis entered)
				if (Basis > 0)
					constraint (ActualInsuranceValue > 0)
						"ActualInsuranceValueMustHaveSameSignAsBookBasis"
				else
					constraint (ActualInsuranceValue < 0)
						"ActualInsuranceValueMustHaveSameSignAsBookBasis"

		CalculatedInsuranceValue
			if (Basis entered)
				if (Basis > 0)
					constraint (CalculatedInsuranceValue > 0)
						"CalculatedInsuranceValueMustHaveSameSignAsBookBasis"
				else
					constraint (CalculatedInsuranceValue < 0)
						"CalculatedInsuranceValueMustHaveSameSignAsBookBasis"

		ReplacementCalculationMethod
			constraint (ReplacementCalculationMethod.MethodType = "R")
				"MethodTypeForReplacementCalculationMethodMustBeReplacement"
        	constraint (!InsuranceCalculationMethod.MethodType.Depreciation)
        		"ADepreciationTypeMethodCannotBeUsedAsAnInsuranceOrReplacementMethod"


		CalculatedReplacementValue
			if (Basis entered)
				if (Basis > 0)
					constraint (CalculatedReplacementValue > 0)
						"CalculatedReplacementValueMustHaveSameSignAsBookBasis"
				else
					constraint (CalculatedReplacementValue < 0)
						"CalculatedReplacementValueMustHaveSameSignAsBookBasis"

		AssetTaxCreditTable

			if (GuidelineClassRegulationsRel  exists)
				if (LocalBookRegulationChanged)
					AssetTaxCreditTable = GuidelineClassRegulationsRel.AssetTaxCreditTable




			if (TaxCredit entered)
				required
					"TaxCreditTableMustBeEnteredIfTaxCreditIsEntered"

		TaxCreditPropertyAmount
			if (AssetTaxCreditTable entered)
				if (TaxCreditPropertyAmount not entered
				or Basis changed
				or AssetTaxCreditTable changed)
					TaxCreditPropertyAmount = Basis * AssetTaxCreditTable.QualifyingPercentage / 100

		TaxCredit
			if (AssetTaxCreditTable entered)
				if (TaxCredit not entered
				or Basis changed
				or AssetTaxCreditTable changed)
					TaxCredit = TaxCreditPropertyAmount * AssetTaxCreditTable.TaxCreditPercentage / 100

		PersonalUseCode

			if (GuidelineClassRegulationsRel  exists)
				if (RegulationPersonalUseCodeRel exists)
					if (LocalBookRegulationChanged)
						PersonalUseCode = GuidelineClassRegulationsRel.PersonalUseCode




			if (PersonalUseCode entered)
				constraint (PersonalUseCodeRel exists)
					"PersonalUseCode<PersonalUseCode>IsNotDefinedForBook<Book>"
			if (Method = "SLBZERO")
				cannot be entered
					"SLBZEROMethodDoesNotAllowPersonalUse"

		ComputeOption
			default to "N"







		CreationDate
			default to current timestamp

		CreatedBy
			default to actor

		AssetSummaryGroup
			default to Asset.AssetSummaryGroup

		BookRegulation

			initial value is Book.BookRegulation
				when (Asset.AssetGuidelineClass entered)

		Used
			if (Asset.Used)
				if (action type.Update)
					if (Used changed
					and not Used)
						constraint (Used)
							"WhenAssetIsSetToUsedAllBooksMustBeSetToUsed"
				else
					default to Asset.Used
			else

				if (GuidelineClassRegulationsRel  exists)
					if (LocalBookRegulationChanged)
						Used = GuidelineClassRegulationsRel.Used




		PropertyType

			if (GuidelineClassRegulationsRel  exists)
				if (LocalBookRegulationChanged)
					PropertyType = GuidelineClassRegulationsRel.PropertyType
			if (PropertyType.1245 and !Asset.AssetType.Property.Personal)
				confirmation required
					"AssetType<Asset.AssetType>ForAsset<Asset>HasProperty<Asset.AssetType.Property>Assigned,PropertyType1245ShouldHaveAPropertyTypeOfPersonal"
			if (PropertyType.1250 and !Asset.AssetType.Property.Real)
				confirmation required
					"AssetType<Asset.AssetType>ForAsset<Asset>HasProperty<Asset.AssetType.Property>Assigned,PropertyType1250ShouldHaveAPropertyTypeOfReal"







		IndianReservation

			if (GuidelineClassRegulationsRel  exists)
				if (LocalBookRegulationChanged)
					IndianReservation = GuidelineClassRegulationsRel.IndianReservation





		QualifiedImprovement

			if (GuidelineClassRegulationsRel exists)
				if (LocalBookRegulationChanged)
					QualifiedImprovement = GuidelineClassRegulationsRel.QualifiedImprovement





		ForeignProperty

			if (GuidelineClassRegulationsRel exists)
				if (LocalBookRegulationChanged)
					ForeignProperty = GuidelineClassRegulationsRel.ForeignProperty





		CostRecoverySystem

			if (GuidelineClassRegulationsRel  exists)
				if (LocalBookRegulationChanged)
					CostRecoverySystem = GuidelineClassRegulationsRel.CostRecoverySystem















		NonConforming

			if (GuidelineClassRegulationsRel exists)
				if (LocalBookRegulationChanged)
					NonConforming = GuidelineClassRegulationsRel.NonConforming





		MineralReserves

			if (GuidelineClassRegulationsRel exists)
				if (LocalBookRegulationChanged)
					MineralReserves = GuidelineClassRegulationsRel.MineralReserves





		Farming

			if (GuidelineClassRegulationsRel exists)
				if (LocalBookRegulationChanged)
					Farming = GuidelineClassRegulationsRel.Farming





		LowIncomeHousing

			if (GuidelineClassRegulationsRel exists)
				if (LocalBookRegulationChanged)
					LowIncomeHousing = GuidelineClassRegulationsRel.LowIncomeHousing





		Section179

			if (GuidelineClassRegulationsRel exists)
				if (LocalBookRegulationChanged)
					Section179 = GuidelineClassRegulationsRel.Section179





		Listed

			if (GuidelineClassRegulationsRel exists)
				if (LocalBookRegulationChanged)
					Listed = GuidelineClassRegulationsRel.Listed





		DepreciableIntangible

			if (GuidelineClassRegulationsRel exists)
				if (LocalBookRegulationChanged)
					DepreciableIntangible = GuidelineClassRegulationsRel.DepreciableIntangible





		TransitionalRuleFlag

			if (GuidelineClassRegulationsRel exists)
				if (LocalBookRegulationChanged)
					TransitionalRuleFlag = GuidelineClassRegulationsRel.TransitionalRuleFlag	

		HistoryPostingDate
			initial value is Asset.Company.HistoryPostingDate
			if (!parentcontext.name = "AssetBook")
				default to Asset.Company.HistoryPostingDate

		AdjustPriorYearHistoryTransactions
			initial value is Asset.Company.AdjustmentPostHistory
			if (action type.Create)
				default to Asset.Company.AdjustmentPostHistory

	Actions
		UpdateBasisFromAsset is an Instance Action
			restricted
			Parameters
				PrmBasis             is an InternationalAmount
			Action Rules
				if (Book.Currency 						!= Asset.Currency
				and Book.PostCurrency.Book)
					CurrencyWork.ExchangeDate			= HighPurchaseDate
					CurrencyWork.TransactionAmount = PrmBasis
					include CurrencyExchangeForIncrementAmount
					Basis = CurrencyWork.BaseAmount.OutputCurrencyAmount
				else
					Basis = PrmBasis
				invoke Delete UnreleasedAssetTransactionsRel
				invoke Delete UnreleasedAssetBookTransactionsRel
				include CreateExitRules

		Create is a Create Action
			valid when (ApprovalUpdateAllowed)
			Entrance Rules
				if (ComputeOption.Yes
				or ComputeOption.Prospective)
					constraint (Book.Active)
						"Book<Book>Is_\Inactive,CannotCompute"
				if ((ComputeOption.Yes
				or ComputeOption.Prospective)
				and SpreadOverRemainingLife)
					confirmation required
						"ComputeOptionWillCalculateDepreciationUsing<Method>Method,_SelectOkToContinue"
				if (!Book.Active)
					confirmation required
						"Book<Book>Is_\Inactive,DoYouWantToContinue?"
				if (TransientBookRegulation entered)
					BookRegulation = TransientBookRegulation
				else
					if (BookRegulation not entered)
						BookRegulation = Book.BookRegulation
				if (BookRegulation entered
				and Asset.AssetGuidelineClass entered)


					if (InServiceDate entered)
						constraint (GuidelineClassRegulationsRel exists)
							"ActiveGuidelineClassRegulationDoesNotExistForBookRegulation<BookRegulation>_In-ServiceDate<InServiceDate>"

				if (DisplayAdjustmentDate
				and AdjustmentAllowed
				and !DeleteAllowed)
					include RefreshAdjustmentDate

				constraint (BookYearBeginDate entered)
					"CurrentCalendarIsNotDefinedForBook<Book>"
				if (Book.PostCurrency.Book)
					TransientFromCurrency = Book.Currency
				else
					TransientFromCurrency = Asset.Currency
				LocalYearEndDate		= BookYearEndDate
				LocalYearBeginDate		= BookYearBeginDate
				LocalPrevYearEndDate	= BookYearBeginDate - 1 day
				LocalCompany			= Asset.Company
				LocalConvention			= Convention
				include 550InsrDate
				DepreciationStartDate	= LocalInsDate

			Action Rules


				if(old AdjustPriorYearHistoryTransactions != AdjustPriorYearHistoryTransactions)
					LocalAdjustPriorYearHistory = old AdjustPriorYearHistoryTransactions
					LocalHistoryFlag = true
				if (IsPostingBook)
					if (ImpairmentBookOfOrigin not entered)
						constraint (PostingBookLedgersRel not exists)
							"APostingBookForLedger<Book.Ledger>IsAlreadyAssignedToThisAsset"

				constraint (AdjustmentAllowed)
					"CannotCreate;AssetCannotBeAdjusted"
				constraint (!ComputeOption.Prospective)
					"TheProspectiveComputeOptionIsOnlyAllowedOnAdjustments"
			Exit Rules
				if (!TransientOtherPrograms)
					if(not TransientSkipTransactionCreate)
						include CreateGuidelineClassRegulation
				include FindFirstLastFlagValue
				include DepreciationEndDateCalc
				LocalAction = "A"
				if (!Asset.AssetProcess.Transfer)
					include CreateAdjustment
				include CreateExitRules
				if (!Asset.AssetProcess.Transfer)
					LifeRemaining = ComputedLifeRemaining

		CopyToBook is an Instance Action
			valid when (Asset.Status.Unreleased)

			completion message is "CopyComplete"
			Parameters
				PrmBook		                is a Book
				PrmMethod             		is a Method
				PrmConvention         		is a Convention
				PrmLife               		is a Life
				PrmComputeOption      		is a Compute
				PrmBookRegulation     		is a BookRegulation
				PrmPersonalUseCode   		is a PersonalUseCode
			Parameter Rules
				PrmBook
					required
				PrmMethod
					initial value is Method
				PrmConvention
					initial value is Convention
				PrmLife
					initial value is Life
				PrmPersonalUseCode
					initial value is PersonalUseCode
				PrmBookRegulation
					initial value is BookRegulation
			Entrance Rules
			Action Rules
				invoke Create AssetBook
					fill in fields from this instance
					initialize invoked.AssetBook
					initialize invoked.Basis
					initialize invoked.YearToDateDepreciation
					initialize invoked.LifeToDateDepreciation
					initialize invoked.LifeRemaining
					initialize invoked.CalculatedInsuranceValue
					initialize invoked.CalculatedReplacementValue
					initialize invoked.TransientBookRegulation
					invoked.Book 			= PrmBook
					invoked.Method 			= PrmMethod
					invoked.Convention 		= PrmConvention
					invoked.Life 			= PrmLife
					invoked.ComputeOption 	= PrmComputeOption
					invoked.PersonalUseCode = PrmPersonalUseCode
					if(PrmBookRegulation entered)
						invoked.BookRegulation 	= PrmBookRegulation
						LocalBookRegulation		= PrmBookRegulation
					else
						invoked.BookRegulation = PrmBook.BookRegulation
						LocalBookRegulation    = PrmBook.BookRegulation

					if(LocalBookRegulation entered)
						initialize invoked.SalvageValue
						initialize invoked.FirstYearExpenseAmount
						initialize invoked.AssetTaxCreditTable

						initialize invoked.BusinessPercent
						initialize invoked.Used
						initialize invoked.IndianReservation
						initialize invoked.PropertyType
						initialize invoked.QualifiedImprovement
						initialize invoked.ForeignProperty
						initialize invoked.CostRecoverySystem
						initialize invoked.NonConforming
						initialize invoked.Farming
						initialize invoked.MineralReserves
						initialize invoked.LowIncomeHousing
						initialize invoked.Section179
						initialize invoked.Listed
						initialize invoked.IsDepreciableIntangible
						initialize invoked.TransitionalRuleFlag
						initialize invoked.TaxCredit
					if (PrmBook.PostCurrency.Book)
						LocalCurrency   = PrmBook.Currency
					else
						LocalCurrency = Asset.Currency
					if(LocalBookRegulation not entered
					and LocalCurrency != TransientFromCurrency)
						if(SalvageValue entered)
							LocalAmount	= SalvageValue
							include CurrencyExchangeForCopyRow
							invoked.SalvageValue			= CurrencyWork.BaseAmount.OutputCurrencyAmount
						if(FirstYearExpenseAmount entered)
							LocalAmount	= FirstYearExpenseAmount
							include CurrencyExchangeForCopyRow
							invoked.FirstYearExpenseAmount	= CurrencyWork.BaseAmount.OutputCurrencyAmount
					if(ActualInsuranceValue entered
					and LocalCurrency != TransientFromCurrency)
						LocalAmount	= FirstYearExpenseAmount
						include CurrencyExchangeForCopyRow
						invoked.ActualInsuranceValue		= CurrencyWork.BaseAmount.OutputCurrencyAmount

		ImportCreate is a Create Action
			restricted
			Entrance Rules
				constraint (CurrentBookCalendarRel exists)
					"ErrorOnAsset<Asset>ACurrentCalendarIsRequiredForBook<Book>"
				if (IsPostingBook)
					if (ImpairmentBookOfOrigin not entered)
						constraint (PostingBookLedgersRel not exists)
							"APostingBookForLedger<Book.Ledger>IsAlreadyAssignedToThisAsset"
				if (DisplayAdjustmentDate
				and AdjustmentAllowed
				and !DeleteAllowed)
					include RefreshAdjustmentDate

				LocalYearEndDate		= BookYearEndDate
				LocalYearBeginDate		= BookYearBeginDate
				LocalPrevYearEndDate	= BookYearBeginDate - 1 day
				LocalCompany			= Asset.Company
				LocalConvention			= Convention
				include 550InsrDate
				DepreciationStartDate	= LocalInsDate
				if((parentcontext.name = "AdditionalBookConversion"
				or parentcontext.name = "AssetBookImport")
				and !ComputeOption.Yes
				and LifeRemaining = 0
				and TransientAllowZeroLifeRemaing)
					LocalSkipDefaulting = true

			Action Rules
				constraint (AdjustmentAllowed)
					"CannotCreate;AssetCannotBeAdjusted"
				constraint (!ComputeOption.Prospective)
					"TheProspectiveComputeOptionIsOnlyAllowedOnAdjustments"
			Exit Rules
				include DepreciationEndDateCalc
				if (ComputeOption = "Y")
					initialize YearToDateDepreciation
					initialize LifeToDateDepreciation
					initialize YearToDateDepreciationAllowed
					initialize LifeToDateDepreciationAllowed
				include ImportCreateExitRules


		CreateFromTransfer is a Create Action
			restricted
			bypass field rules
			Action Rules

		Reset is an Instance Action
			restricted
			Action Rules
				invoke PostRelease.ResetAdjustment Asset

		CalcDepreciationEndDate is an Instance Action
			restricted
			Action Rules
				include DepreciationEndDateCalc

		ReleaseAdjustment	is an Instance Action
			restricted
			Action Rules
				invoke PostRelease.Release	Asset

		CreateRequiredBooks is a Create Action
			restricted
			bypass field rules
			Entrance Rules

				LocalAction				= "A"
				LocalAddDay				= 1
				LocalYearEndDate		= BookYearEndDate
				LocalYearBeginDate		= BookYearBeginDate
				LocalPrevYearEndDate	= BookYearBeginDate - 1 day
				LocalCompany			= Asset.Company
				LocalConvention			= Convention
				include 550InsrDate
				DepreciationStartDate	= LocalInsDate
				HistoryPostingDate		= Asset.Company.HistoryPostingDate
				AdjustPriorYearHistoryTransactions = Asset.Company.AdjustmentPostHistory

			Action Rules
				if (BookRegulation entered
				and Asset.AssetGuidelineClass entered)
					if (InServiceDate entered)
						if (!GuidelineClassRegulationsRel exists)
							confirmation required
								"ActiveGuidelineClassRegulationDoesn'tExistFor:_Book<Book>_Book_Regulation<BookRegulation>_In-ServiceDate<InServiceDate>"
					else
						if (!AssetGuidelineClassRegulationsRel exists)
							confirmation required
								"ActiveGuidelineClassRegulationDoesn'tExistFor:_Book<Book>_Book_Regulation<BookRegulation>"

		CreateFromDisposal is a Create Action
			restricted
			Exit Rules
				include FindFirstLastFlagValue
				invoke SetUsed CurrentBookCalendarRel
					invoked.PrmUsed	= true

		FastUpdate is an Update Action
			valid when (AdjustmentAllowed)
			restricted
			bypass field rules
			Entrance Rules
			Action Rules
				initialize LocalAction
				if (!ZeroImpairmentUpdate)
					include CreateAdjustment
				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated












			Exit Rules
				invoke Delete AssetProjectionRel

		BalanceUpdate is an Update Action
			restricted
			bypass field rules

		CustomMethodUpdate is an Update Action
			valid when (IsCustomMethod)
			restricted
			bypass field rules

		UpdateFromBatch is an Update Action
			restricted
			Entrance Rules
				LocalCalledFromBatch = true
			Action Rules
				invoke Update


		BookRegulationUpdate is an Instance Action
			valid when (AllowsBookUpdateWithRegulation)
			Parameters
				PrmBookRegulation 					is a BookRegulation
				PrmUpdateGuidelineClassDefaults 	is Boolean

			Parameter Rules
				PrmBookRegulation
					if (PrmBookRegulation entered
					and Asset.AssetGuidelineClass entered)
						if (InServiceDate not entered)
							LocalInServiceDate = HighPurchaseDate
						else
							LocalInServiceDate = InServiceDate
						LocalBookRegulation = PrmBookRegulation


						if (LocalInServiceDate entered)
							constraint (LocalClassRegulationsRel exists)
								"ActiveGuidelineClassRegulationDoesNotExistForBookRegulation<LocalBookRegulation>_In-ServiceDate<InServiceDate>"
				PrmUpdateGuidelineClassDefaults
					if (PrmUpdateGuidelineClassDefaults)
						constraint (PrmBookRegulation entered)
							"UpdateGuidelineClassDefaultsCannotBeCheckedWhenBookRegulationIsBlank"

			Action Rules
				BookRegulation = PrmBookRegulation
				if (PrmUpdateGuidelineClassDefaults)
					if (BookRegulation entered)
						if (Asset.Status.Released
						or Asset.Status.PostRelease
						or Asset.Status.Unreleased)
							LocalBookRegulationChanged = PrmUpdateGuidelineClassDefaults
						invoke Update

		Update is an Update Action
			valid when (ApprovalUpdateAllowed)
			Entrance Rules
				if (ComputeOption.Yes
				or ComputeOption.Prospective)
					constraint (Book.Active)
						"Book<Book>Is_\Inactive,CannotCompute"
				if (!Book.Active)
					confirmation required
						"Book<Book>Is_\Inactive,DoYouWantToContinue?"
				if ((ComputeOption.Yes
				or ComputeOption.Prospective)
				and SpreadOverRemainingLife)
					confirmation required
						"ComputeOptionWillCalculateDepreciationUsing<Method>Method_SelectOkToContinue."
				if (InServiceDate not entered)
					InServiceDate = HighPurchaseDate
				if (BookRegulation entered
				and Asset.AssetGuidelineClass entered)


					if (InServiceDate entered)
						if (!GuidelineClassRegulationsRel exists)
							confirmation required
								"ActiveGuidelineClassRegulationDoesn'tExistForBookRegulation<BookRegulation>_In-ServiceDate<InServiceDate>"
					else
						if (!AssetGuidelineClassRegulationsRel exists)
							confirmation required
								"ActiveGuidelineClassRegulationDoesn'tExistForBookRegulation<BookRegulation>"
				if (!TransientOtherPrograms
				and Asset.Status.Unreleased
				and (BookRegulation changed
				or (InServiceDate changed
				and GuidelineClassRegulationsRel.EffectiveDate <= InServiceDate)))
					LocalBookRegulationChanged = true
				if (!TransientOtherPrograms
				and Asset.Status.Unreleased
				and BookRegulation entered
				and TransientUpdateFromAsset)
					LocalBookRegulationChanged = true





				if (!LocalCalledFromBatch)
					if (ItemAmountsUpdated
					or (Basis not entered
					and Asset.AssetProcess.Addition))
						include UpdateTransactionCosts

				constraint (BookYearBeginDate entered)
					"CurrentCalendarIsNotDefinedForBook<Book>"
				if (DisplayAdjustmentDate
				and AdjustmentAllowed
				and !DeleteAllowed)
					include RefreshAdjustmentDate

				if (BookDeprValueChanged
				or InServiceDate changed)
					LocalYearEndDate		= BookYearEndDate
					LocalYearBeginDate		= BookYearBeginDate
					LocalPrevYearEndDate	= BookYearBeginDate - 1 day
					LocalCompany			= Asset.Company
					LocalConvention			= Convention
					include 550InsrDate
					DepreciationStartDate	= LocalInsDate

				if (TransientProgram = "AssetCompute")
					LocalFlag = true

			Field Rules
				AdjustmentDate
					if (UnreleasedAssetAdjustmentRel.AdjustmentDate entered)
						AdjustmentDate = UnreleasedAssetAdjustmentRel.AdjustmentDate
					if (ComputeOption.Prospective)
						constraint (Method.MethodFormula = "SL")
							"BookMethodMustBeSLForProspectiveComputeType"  
				Method
					if (BookRegulation not entered)
						if (Asset.AssetCategory.Depreciable
						and !ResetAdjustment)
							if (!Book.DepreciationType.ClassLevel)
								required
									"MethodIsRequiredForADepreciableAsset"
						else
						if (Asset.AssetCategory.NonDepreciable
						and Asset.TransientCategoryUpdate = false
						and !ResetAdjustment)
							cannot be entered
								"MethodCannotBeEnteredForNonDepreciableAsset"

					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingTheBookMethod"

				Life
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingTheBookLife"

				LifeRemaining
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingTheBookLifeRemaining"

				Convention
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingTheBookConvention"

				Basis
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist
						and !LocalFlag)
								cannot be changed
									"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingTheBasis"

				YearToDateDepreciation
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist
						and !LocalFlag)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingYearToDateDepreciation"

				LifeToDateDepreciation
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist
						and !LocalFlag)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingLifeToDateDepreciation"

			Action Rules


				if (AssetImpairmentBookRel	exists)
					if (Basis changed)
						if (Basis < (ImpairmentAssetBookRel.Basis * -1))
							constraint (BookValue >= (ImpairmentAssetBookRel.Basis * -1))
								"TheNewBasisMustBeGreaterThanOrEqualToTheImpairmentAmount"
						else
							confirmation required
								"Warning;UpdatesToAnImpairedAssetBookMayRequireAReviewOfTheRelatedImpairment"
				constraint (AdjustmentAllowed)
					"CannotUpdate;AssetCannotBeAdjusted"

				if (!Asset.Status.PostRelease)

					if (IsPostingBook)
						invoke Delete UnreleasedAssetTransactionsRel
					else
						invoke Delete UnreleasedAssetBookTransactionsRel

					if (!AssetControlTransactionRel.IsInBalance
					and Asset.AssetLease entered)
						LocalBalanceAmount = AssetControlTransactionRel.DebitBalance + AssetControlTransactionRel.CreditBalance
						invoke Increment AssetControlTransactionRel
							if (LocalBalanceAmount > 0)
								invoked.InputCreditAmount 	= LocalBalanceAmount * -1
							else
								invoked.InputDebitAmount 	= LocalBalanceAmount * -1
				initialize LocalAction
				include CreateAdjustment
				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated
					initialize CurrentPeriodDepreciation
					initialize CurrentPeriodDepreciationAllowed
					initialize CurrentPeriodPortionOfLife
			Exit Rules
				LocalAction = "A"
				include DepreciationEndDateCalc
				include AccountDefaulting
				if (Active)
					if (ComputeOption = "Y")
						if (!(InServiceDate > CurrentBookCalendarRel.CurrentPeriodDate
						and Asset.Status.Unreleased))
							initialize LifeRemaining
						initialize YearToDateDepreciation
						initialize LifeToDateDepreciation
						initialize YearToDateDepreciationAllowed
						initialize LifeToDateDepreciationAllowed
					else
						if (InServiceDate changed)
							if ((LifeToDateDepreciation entered
							or  YearToDateDepreciation entered)
							and	InServiceDate > CurrentBookCalendarRel.LastPeriodDate)
								confirmation required
									"UpdateToInServiceDateWillRevertTheDepreciation,WouldYouLikeToContinue?"
								YearToDateDepreciation = 0
								LifeToDateDepreciation = 0

				include FindFirstLastFlagValue
				include CreateExitRules
				if (AssetImpairmentBookRel exists)
					if (Life changed
					or Active changed)
						invoke UpdateImpairmentBookLife	ThisInstanceRel














				if (AdjustmentDate entered)
					include CreateAdjustment






				initialize ComputeOption
				invoke Delete AssetProjectionRel

		UpdateOverrideAmount is an Instance Action
			valid when (Asset.Status.Released)
			Parameters
				OverrideAmount is an InternationalAmount
			Action Rules
				if(Basis > 0)
					constraint (OverrideAmount <= (BookValue + YearToDateDepreciation))
						"OverrideAmountCannotBeGreaterThanBookValuePlusYearToDateDepreciation"
				else
					constraint (OverrideAmount >= (BookValue + YearToDateDepreciation))
						"OverrideAmountCannotBeLessThanBookValuePlusYearToDateDepreciation"
				YearToDateDepreciationOverride = OverrideAmount


		UpdateYearEndBalance is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
		    		default label is "FinanceEnterpriseGroup"
		        PrmBook						is a Book
		        	default label is "Book"
		        	context of PrmFinanceEnterpriseGroup
		        PrmCompany                 	is an AssetCompany
		        	default label is "Company"
		        PrmCompanyGroup            	is a GeneralLedgerCompanyGroup
		        	default label is "CompanyGroup"
		    Parameter Rules
		    	PrmBook
		    		if (PrmBook not entered)
				    	if (PrmCompany not entered
				    	and PrmCompanyGroup not entered)
							required
								"MustEnterEitherBookOrCompanyOrCompanyGroup"
				PrmCompanyGroup
					LocalGeneralLedgerCompanyGroup = PrmCompanyGroup
			Instance Selection
				where ((PrmBook not entered or Book = PrmBook)
				and (PrmCompany not entered or Asset.Company = PrmCompany)
				and (PrmCompanyGroup not entered or CompanyGroupRel exists))
			Action Rules
				Instance Rules
					if (Basis != LifeToDateDepreciation)
						LocalDeprBonus = DeprBonus
						if (Life < 12)
							LocalAnnualDepreciation		= Basis - LocalDeprBonus
						else
							if (InServiceDate >= CurrentBookCalendarRel.YearBeginDate
							and InServiceDate < CurrentBookCalendarRel.YearEndDate)
								LocalMethod			 = Method
								LocalLife 			 = Life
								LocalBasis			 = Basis
								LocalConvention		 = Convention
								LocalBusPercent		 = 100
								LocalAsset			 = Asset
								LocalCompany		 = Asset.Company
								LocalPrevYearEndDate = CurrentBookCalendarRel.YearBeginDate - 1 day
								LocalInsDate 		 = DepreciationStartDate

								include 640FirstYearDepr
								LocalAnnualDepreciation = LocalAnnualDepreciation
								if (InServiceDate > CurrentBookCalendarRel.YearBeginDate
								and InServiceDate < CurrentBookCalendarRel.LastPeriodDate)
									LocalAnnualDepreciation = LocalAnnualDepreciation + LocalDeprBonus
							else
								if (IsAnSLMethod)
									if (!Asset.Status.Disposed)
										if (LifeRemaining >= (CurrentBookCalendarRel.DepreciationPeriodsPerYear - CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed))
											LocalAnnualDepreciation		= Basis - LocalDeprBonus
											LocalAnnualDepreciation		= LocalAnnualDepreciation / Life
											LocalAnnualDepreciation		= LocalAnnualDepreciation * 12
								else
								if (IsAnDBMethod)
									if (!Asset.Status.Disposed)
										LocalMethod = Method
										if (LifeRemaining >= (CurrentBookCalendarRel.DepreciationPeriodsPerYear - CurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed))
											LocalAnnualDepreciation 	= Basis - LifeToDateDepreciation + YearToDateDepreciation
											LocalAnnualDepreciation		= LocalAnnualDepreciation / Life
											LocalAnnualDepreciation 	= LocalAnnualDepreciation * 12
											LocalAnnualDepreciation 	= LocalAnnualDepreciation * DerivedDBPercent
											if (InServiceDate > CurrentBookCalendarRel.YearBeginDate
											and InServiceDate < CurrentBookCalendarRel.LastPeriodDate)
												LocalAnnualDepreciation = LocalAnnualDepreciation + LocalDeprBonus
								else
								if (IsCustomMethod)
									if (!Asset.Status.Disposed)
										if (LifeRemaining >= CurrentBookCalendarRel.DepreciationPeriodsPerYear)
											LocalAnnualDepreciation	 = CalculationAmount
						if (!Asset.Status.Disposed)
							LocalAnnualDepreciation = Basis - LocalAnnualDepreciation - LifeToDateDepreciation + YearToDateDepreciation
						YearEndBalance = LocalAnnualDepreciation


		AssetPC is an Instance Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
		        PrmBook						is a Book
		        	context of PrmFinanceEnterpriseGroup
		        PrmBookGroup				is a BookGroup
		        	context of PrmFinanceEnterpriseGroup
		        PrmCompany                 	is an AssetCompany
		        PrmCompanyGroup            	is a GeneralLedgerCompanyGroup
		        PrmAssetGroup				is a AssetGroup
		        	context of PrmFinanceEnterpriseGroup
		        PrmAssetGroupSelection		is AlphaUpper size 1
		        PrmRelease					is AlphaUpper size 1
		        PrmAssetPeriodCloseResult	is an AssetBatchUpdateResult
		        	context of PrmFinanceEnterpriseGroup
		        PrmReportMode				is AlphaUpper size 1
				PrmThread					is Numeric 3
				PrmQueue					is Numeric 3
				PrmJournalizeGroup      	is like JournalizeGroup

			Action Rules
				while (PrmThread < PrmQueue)
					invoke AssetPeriodClose AssetBook 


						invoked.PrmFinanceEnterpriseGroup 	= PrmFinanceEnterpriseGroup
						invoked.PrmBook						= PrmBook
						invoked.PrmBookGroup 				= PrmBookGroup
						invoked.PrmCompany   				= PrmCompany
						invoked.PrmCompanyGroup  			= PrmCompanyGroup
						invoked.PrmRelease					= PrmRelease
						invoked.PrmAssetGroup				= PrmAssetGroup
						invoked.PrmAssetPeriodCloseResult	= PrmAssetPeriodCloseResult
						invoked.PrmReportMode				= PrmReportMode
						invoked.PrmThread					= PrmThread
						invoked.PrmQueue					= PrmQueue
						if (PrmJournalizeGroup entered)
							invoked.PrmJournalizeGroup		= PrmJournalizeGroup
					PrmThread += 1

		AssetPeriodClose is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
		    		default label is "FinanceEnterpriseGroup"
		        PrmBook						is a Book
		        	default label is "Book"
		        	context of PrmFinanceEnterpriseGroup
		        PrmBookGroup				is a BookGroup
		        	default label is "BookGroup"
		        	context of PrmFinanceEnterpriseGroup
		        PrmCompany                 	is an AssetCompany
		        	default label is "Company"
		        PrmCompanyGroup            	is a GeneralLedgerCompanyGroup
		        	default label is "CompanyGroup"
		        PrmAssetGroup				is a AssetGroup
		        	context of PrmFinanceEnterpriseGroup
		        PrmAssetGroupSelection		is AlphaUpper size 1
		        PrmRelease					is AlphaUpper size 1
		        PrmAssetPeriodCloseResult	is an AssetBatchUpdateResult
		        	context of PrmFinanceEnterpriseGroup
		        PrmReportMode				is AlphaUpper size 1
		        PrmThread					is Numeric 3
		        PrmQueue					is Numeric 3
				PrmPostingDate              is Date
				PrmJournalizeGroup      	is like JournalizeGroup
		    Parameter Rules
		    	PrmFinanceEnterpriseGroup
		    		LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup

		    	PrmBook
		    		if (PrmBook not entered
					and PrmBookGroup not entered)
						required
							"MustEnterEitherBookOrBookGroup"
					if (PrmBook entered)
						LocalBook = PrmBook
						constraint (LocalBooksRel exists)
							"BookNotFound"
						LocalCompany = PrmCompany









































				PrmBookGroup
					LocalBookGroup = PrmBookGroup
					if (PrmBookGroup entered)
						LocalBookGroup = PrmBookGroup
						constraint (BookGroupRel exists)
							"BookGroup<LocalBookGroup>NotFound"
						constraint (AllBookGroupBookRel exists)
							"BookGroupHasNoBooksDefined"

				PrmCompany
					if (PrmCompany entered)
						LocalCompany = PrmCompany
						constraint (LocalCompanyRel exists)
							"AssetCompanyNotFounds"


						if (LocalCompanyRel.UnreleasedAssetExists
						or LocalCompanyRel.PostReleaseAssetExists)
							constraint (LocalCompanyRel.ReleasedAssetsExist)
								"UnreleasedAssetExistsForCompany<PrmCompany>"
						constraint (!LocalCompanyRel.PeriodCloseRelease.No)
							"ReleaseAssetsHasNotRunForCompany<PrmCompany>"


















						if (PrmBookGroup entered)
							for each AllBookGroupBookRel
								LocalBook = each.Book
								constraint (LocalCurrentBookCalendarRel exists)
									"Book<LocalBook>Company<LocalCompany>NotInBookCalendar"
								constraint (PrmPostingDate not entered
								or (PrmPostingDate > LocalCurrentBookCalendarRel.LastPeriodDate
								and PrmPostingDate <= LocalCurrentBookCalendarRel.CurrentPeriodDate))
									"PostingDateMustBeInTheCurrentPeriodForBook<LocalBook>Company<LocalCompany>"









































				PrmCompanyGroup
					LocalGeneralLedgerCompanyGroup = PrmCompanyGroup
					if (PrmCompany not entered
					and PrmCompanyGroup not entered)
						required
							"MustEnterEitherCompanyOrCompanyGroup"
					if (PrmCompanyGroup entered)
						for each GeneralLedgerCompanyGroupRel
							LocalCompany = each.Company
							if (LocalCompanyRel.UnreleasedAssetExists
							or LocalCompanyRel.PostReleaseAssetExists)
								constraint (LocalCompanyRel.ReleasedAssetsExist)
									"UnreleasedAssetExistsForCompany<PrmCompany>"
							constraint (!LocalCompanyRel.PeriodCloseRelease.No)
								"ReleaseAssetsHasNotRunForCompany<PrmCompany>"


							if (PrmBook entered)
								LocalBook = PrmBook
								constraint (LocalCurrentBookCalendarRel exists)
									"Book<LocalBook>Company<LocalCompany>NotInBookCalendar"














































							if (PrmBookGroup entered)
								for each AllBookGroupBookRel
									LocalBook = each.Book
									constraint (LocalCurrentBookCalendarRel exists)
										"Book<LocalBook>Company<LocalCompany>NotInBookCalendar"
									constraint (PrmPostingDate not entered
									or (PrmPostingDate > LocalCurrentBookCalendarRel.LastPeriodDate
									and PrmPostingDate <= LocalCurrentBookCalendarRel.CurrentPeriodDate))
										"PostingDateMustBeInTheCurrentPeriodForBook<LocalBook>Company<LocalCompany>"












































			Instance Selection
        		where  ((PrmBook not entered or Book = PrmBook)
        		and (PrmBookGroup not entered or BookGroupBookRel exists)
				and (PrmCompany not entered or Asset.Company = PrmCompany)
				and (PrmCompanyGroup not entered or CompanyGroupRel exists)
				and (PrmAssetGroup not entered or AssetGroup = PrmAssetGroup)
				and Asset.AssetCategory.Depreciable
				and (PrmQueue not entered
				or (PrmQueue entered
				and (PrmQueue				<=1
				or	Asset % PrmQueue		= PrmThread))))

			Local Fields
				LocalPosting			is Boolean
				LocalPostingBook		is like Book
				ClassDepreciation		is Boolean
				ClassBook				is like Book
				AssetFundExist			is Boolean
				FundTransactionsCreated is Boolean
				LocalLifeRemainingBefore is Decimal size 7.3
				RevalAmortizationAmount	is Decimal size 19.3
				LocalRemainingAmount	is Decimal size 7.3
				PrmJournalizeGroup      is like JournalizeGroup
				LocalRvlLtd				is Decimal size 19.3
				LocalTransientFromCurrency is a FromCurrency
				LocalCurrentPeriodDate	is Date
				WsMonth					is Numeric 3
				IncrementJournalizeGroup is Boolean
				PendingYearEndOption	is Boolean
				LocalClassPeriodDepreciation	is Decimal size 19.3
				LocalTypeAllocationExist	is Boolean
				LocalAssetTransaction	is an AssetTransaction
					context of PrmFinanceEnterpriseGroup
				LocalAssetBookTransaction	is an AssetBookTransaction
					context of PrmFinanceEnterpriseGroup
				PeriodCloseError				is Boolean
				CloseControlError				is Boolean
				CloseRangeError					is Boolean
				PeriodClose						is Boolean
				PeriodCloseErrorMessage			is Alpha 150
				LocalNumberOfPeriodsClose		is Numeric size 2
				LocalAllocationCompany			is like Company
				LocalAllocationExists			is Boolean

			Rule Blocks

				UpdateBook
					YearToDateDepreciation += CurrentPeriodDepreciation
					LifeToDateDepreciation += CurrentPeriodDepreciation
					YearToDateDepreciationAllowed += CurrentPeriodDepreciationAllowed
					LifeToDateDepreciationAllowed += CurrentPeriodDepreciationAllowed
					LastClosedPeriodBalance = CurrentPeriodDepreciation
					LocalLifeRemainingBefore = LifeRemaining
					LifeRemaining -= CurrentPeriodPortionOfLife
					if (BusinessPercent = 100)
						LocalRemainingAmount = Basis - SalvageValue - LifeToDateDepreciation - FirstYearExpenseAmount
					else
						LocalRemainingAmount = Basis - SalvageValue - LifeToDateDepreciationAllowed - FirstYearExpenseAmount
					if ((Basis > 0
					and LocalRemainingAmount <= 0)
					or (Basis < 0
					and LocalRemainingAmount >=0))
						LifeRemaining = 0
						FirstAndLastYear = "C"
					else
						if (LifeRemaining <= 0
						and (Method = "ACR"
						or  Method = "ACS"))
							FirstAndLastYear = "C"
					if (LocalRemainingAmount > 0
					and (FirstAndLastYear = "C"
					or  FirstAndLastYear = "P")
					and  PersonalUseCode != 0)
						if (!PersonalUseCodeRel exists
						and PersonalUseCodeRel.AllowPostRecoveryDeduction)
							FirstAndLastYear = "C"
						else
							FirstAndLastYear = "P"
					if (!Asset.Simulated
					and CurrentPeriodDepreciation != 0)
						if (!LocalPosting)
							if (ImpairmentBookOfOrigin not entered)
								include CreateBookTransactions
								if (Book.TrackDepreciationHistory)
									include CreateBookHistory




						if (LocalPosting)
							if ((PrmRelease = "Y"
							or PrmRelease = "R")
							and IncrementJournalizeGroup = false)


								IncrementJournalizeGroup = true
							if (ImpairmentBookOfOrigin not entered)
								include CreateTransaction
								if (Book.TrackDepreciationHistory)
									include CreateBookHistory




					if (LocalPosting
					and CurrentPeriodDepreciation not entered
					and CurrentPeriodDepreciationCalculated
					and !Asset.Simulated)
						CurrentPeriodDepreciationCalculated = "N"
					if (LocalPosting
					and !Asset.Simulated
					and FirstAndLastYear = "C"
					and CurrentPeriodDepreciation not entered
					and LifeRemaining not entered)
						LastClosedPeriodBalance = 0
					if (FirstAndLastYear = "C"
					and LifeRemaining not entered
					and CurrentPeriodDepreciation not entered)
						LastClosedPeriodBalance = 0
					CurrentPeriodDepreciation = 0
					CurrentPeriodPortionOfLife = 0
					CurrentPeriodDepreciationAllowed = 0
					CurrentPeriodDepreciationCalculated = "N"

				UpdateImpairmentBook
					invoke BalanceUpdate ImpairmentAssetBookRel
						invoked.YearToDateDepreciation += ImpairmentAssetBookRel.CurrentPeriodDepreciation
						invoked.LifeToDateDepreciation += ImpairmentAssetBookRel.CurrentPeriodDepreciation
						invoked.YearToDateDepreciationAllowed += ImpairmentAssetBookRel.CurrentPeriodDepreciationAllowed
						invoked.LifeToDateDepreciationAllowed += ImpairmentAssetBookRel.CurrentPeriodDepreciationAllowed
						invoked.LastClosedPeriodBalance = ImpairmentAssetBookRel.CurrentPeriodDepreciation

						invoked.LifeRemaining -= ImpairmentAssetBookRel.CurrentPeriodPortionOfLife
					if (!Asset.Simulated
					and ImpairmentAssetBookRel.CurrentPeriodDepreciation != 0)
						if (!LocalPosting)





							include CreateImpairmentBookTransactions
							if (ImpairmentAssetBookRel.Book.TrackDepreciationHistory)
								include CreateImpairmentBookHistory
						if (LocalPosting)
							if ((PrmRelease = "Y"
							or PrmRelease = "R")
							and IncrementJournalizeGroup = false)
								increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
								PrmJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
								IncrementJournalizeGroup = true






							include CreateImpairmentEntries
							if (ImpairmentAssetBookRel.Book.TrackDepreciationHistory)
								include CreateImpairmentBookHistory
					if (LocalPosting
					and ImpairmentAssetBookRel.CurrentPeriodDepreciation not entered
					and ImpairmentAssetBookRel.CurrentPeriodDepreciationCalculated
					and !Asset.Simulated)
						CurrentPeriodDepreciationCalculated = "N"
					if (LocalPosting
					and !Asset.Simulated
					and FirstAndLastYear = "C"
					and ImpairmentAssetBookRel.CurrentPeriodDepreciation not entered
					and LifeRemaining not entered)
						LastClosedPeriodBalance = 0
					if (FirstAndLastYear = "C"
					and LifeRemaining not entered
					and ImpairmentAssetBookRel.CurrentPeriodDepreciation not entered)
						LastClosedPeriodBalance = 0
					invoke BalanceUpdate ImpairmentAssetBookRel
						invoked.CurrentPeriodDepreciation = 0
						invoked.CurrentPeriodPortionOfLife = 0
						invoked.CurrentPeriodDepreciationAllowed = 0
						invoked.CurrentPeriodDepreciationCalculated = "N"

				CreateTransaction
					include p4400CreateAmtrans
					if (!Asset.AssetType.PostToAccount.Asset
					and Asset.AssetType.AmortizeRevaluation
					and RvlLtd ! = 0)
						include CreateRevaluationEntries

				CreateRevaluationEntries
					LocalRvlLtd = RvlLtd * -1
					LocalRvlLtd = DerivedRevalueLTD
					if (LocalLifeRemainingBefore != 0)
						RevalAmortizationAmount = ((LocalRvlLtd / LocalLifeRemainingBefore) * -1)


					LocalRevalAmortizationAmount = RevalAmortizationAmount
					if (LocalPosting)
						invoke CreateTransactionPeriodClose AssetTransaction
							assign result to LocalAssetTransaction
							resume on error
								PeriodCloseError 		= true
								PeriodCloseErrorMessage = error message
							invoked.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							invoked.Asset						= Asset
							invoked.Book						= Book
							invoked.Company						= Asset.Company


							invoked.Description 				= "Revalue Amortization " + Asset
							invoked.AssetProcess 				= "RVA"
							invoked.AssetAccountType 			= "RVA"
							invoked.AssetAccountGroup			= Asset.AssetAccountGroup
							invoked.AssetType 					= Asset.AssetType
							invoked.TransactionStatus 			= "R"
							invoked.TransactionAmount 			= (RevalAmortizationAmount * -1)
							invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
							invoked.TransactionDate				= LocalCurrentPeriodDate
							invoked.YearEndDate					= LocalYearEndDate
							invoked.PostingDate					= PrmPostingDate
							invoked.Reference					= "AssetPeriodClose"
							invoked.DistributionAccount			= TranRevalueAmortization
							invoked.LocalJournalizeGroup 		= PrmJournalizeGroup

							if (Book.CurrencyTable entered)
								invoked.TransientCurrencyTable	= Book.CurrencyTable
							else
								invoked.TransientCurrencyTable	= Asset.CurrencyTable

							invoked.AssetGroup							= AssetGroup
							if (Book.PostCurrency.Book)
								invoked.TransientBookCurrency				= Book.Currency
							else
								invoked.TransientBookCurrency				= Asset.Currency
							invoked.AssetTransactionAmount.TransactionAmount 		= (RevalAmortizationAmount * -1)
							invoked.AssetTransactionAmount.ExchangeDate 			= LocalCurrentPeriodDate
							invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
							invoked.BatchUpdateResult								= PrmAssetPeriodCloseResult



						if (FinanceEnterpriseGroup.FundAccounting
						and !Asset.AssetType.AllocateDepreciationExpense)
							include FundAllocation










						initialize LocalAssetTransaction






































						invoke CreateTransactionPeriodClose AssetTransaction
							assign result to LocalAssetTransaction
							resume on error
								PeriodCloseError 		= true
								PeriodCloseErrorMessage = error message
							invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.Asset						= Asset
							invoked.Book						= Book
							invoked.Company						= Asset.Company


							invoked.Description 				= "Revaluation Reserve " + Asset
							invoked.AssetProcess 				= "RVA"
							invoked.AssetAccountType 			= "RRA"
							invoked.AssetAccountGroup			= Asset.AssetAccountGroup
							invoked.AssetType 					= Asset.AssetType
							invoked.TransactionStatus 			= "R"
							invoked.TransactionAmount 			= RevalAmortizationAmount
							invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
							invoked.TransactionDate				= LocalCurrentPeriodDate
							invoked.YearEndDate					= LocalYearEndDate
							invoked.PostingDate					= PrmPostingDate
							invoked.Reference					= "AssetPeriodClose"
							invoked.DistributionAccount			= TranRevalueReserve
							invoked.LocalJournalizeGroup 		= PrmJournalizeGroup

							if (Book.CurrencyTable entered)
								invoked.TransientCurrencyTable	= Book.CurrencyTable
							else
								invoked.TransientCurrencyTable	= Asset.CurrencyTable

							invoked.AssetGroup					= AssetGroup
							if (Book.PostCurrency.Book)
								invoked.TransientBookCurrency	= Book.Currency
							else
								invoked.TransientBookCurrency	= Asset.Currency
							invoked.AssetTransactionAmount.TransactionAmount 		= RevalAmortizationAmount
							invoked.AssetTransactionAmount.ExchangeDate 			= LocalCurrentPeriodDate
							invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
							invoked.BatchUpdateResult								= PrmAssetPeriodCloseResult


						if (FinanceEnterpriseGroup.FundAccounting
						and !Asset.AssetType.AllocateDepreciationExpense)
							include FundAllocation










						initialize LocalAssetTransaction





































					else
						invoke CreateTransactionPeriodClose AssetBookTransaction
							assign result to LocalAssetBookTransaction
							resume on error
								PeriodCloseError 		= true
								PeriodCloseErrorMessage = error message
							invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.Asset						= Asset
							invoked.Book						= Book
							invoked.Company						= Asset.Company
							invoked.AssetProcess 				= "RVA"
							invoked.AssetAccountType 			= "RVA"
							invoked.TransactionStatus 			= "H"
							invoked.TransactionAmount 			= (RevalAmortizationAmount * -1)
							invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
							invoked.TransactionDate				= LocalCurrentPeriodDate
							invoked.PostingDate					= PrmPostingDate
							invoked.Reference					= "AssetPeriodClose"
							invoked.DistributionAccount			= TranRevalueAmortization
							invoked.BatchUpdateResult			= PrmAssetPeriodCloseResult
						initialize LocalAssetBookTransaction





































						invoke CreateTransactionPeriodClose AssetBookTransaction
							assign result to LocalAssetBookTransaction
							resume on error
								PeriodCloseError 		= true
								PeriodCloseErrorMessage = error message
							invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.Asset						= Asset
							invoked.Book						= Book
							invoked.Company						= Asset.Company
							invoked.AssetProcess 				= "RVA"
							invoked.AssetAccountType 			= "RRA"
							invoked.TransactionStatus 			= "H"
							invoked.TransactionAmount 			= RevalAmortizationAmount
							invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
							invoked.TransactionDate				= LocalCurrentPeriodDate
							invoked.PostingDate					= PrmPostingDate
							invoked.Reference					= "AssetPeriodClose"
							invoked.DistributionAccount			= TranRevalueReserve
							invoked.BatchUpdateResult			= PrmAssetPeriodCloseResult
						initialize LocalAssetBookTransaction






































				CreateImpairmentEntries
					invoke CreateTransactionPeriodClose AssetTransaction
						assign result to LocalAssetTransaction
						resume on error
							PeriodCloseError 		= true
							PeriodCloseErrorMessage = error message
						invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoked.Asset						= Asset
						invoked.Book						= Book.ImpairmentBook
						invoked.Company						= Asset.Company


						invoked.Description 				= "Impairment Accumulation " + Asset
						invoked.AssetProcess 				= "IMA"
						invoked.AssetAccountType 			= "IMT"
						invoked.AssetAccountGroup			= Asset.AssetAccountGroup
						invoked.AssetType 					= Asset.AssetType
						invoked.TransactionStatus 			= "R"
						invoked.TransactionAmount 			= (ImpairmentAssetBookRel.CurrentPeriodDepreciation * -1)
						invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
						invoked.TransactionDate				= LocalCurrentPeriodDate
						invoked.YearEndDate					= LocalYearEndDate
						invoked.PostingDate					= PrmPostingDate
						invoked.Reference					= "AssetPeriodClose"
						invoked.DistributionAccount			= TranAccumulatedImpairmentLoss
						invoked.LocalJournalizeGroup 		= PrmJournalizeGroup

						if (Book.CurrencyTable entered)
							invoked.TransientCurrencyTable	= Book.CurrencyTable
						else
							invoked.TransientCurrencyTable	= Asset.CurrencyTable

						invoked.AssetGroup					= AssetGroup
						if (Book.PostCurrency.Book)
							invoked.TransientBookCurrency	= Book.Currency
						else
							invoked.TransientBookCurrency	= Asset.Currency
						invoked.AssetTransactionAmount.TransactionAmount 		= (ImpairmentAssetBookRel.CurrentPeriodDepreciation * -1)
						invoked.AssetTransactionAmount.ExchangeDate 			= LocalCurrentPeriodDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
						invoked.BatchUpdateResult								= PrmAssetPeriodCloseResult


					if (FinanceEnterpriseGroup.FundAccounting
					and !Asset.AssetType.AllocateDepreciationExpense)
						include FundAllocation










					initialize LocalAssetTransaction






































					invoke CreateTransactionPeriodClose AssetTransaction
						assign result to LocalAssetTransaction
						resume on error
							PeriodCloseError 		= true
							PeriodCloseErrorMessage = error message
						invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoked.Asset						= Asset
						invoked.Book						= Book.ImpairmentBook
						invoked.Company						= Asset.Company


						invoked.Description 				= "Impairment Amortization " + Asset
						invoked.AssetProcess 				= "IMA"
						invoked.AssetAccountType 			= "IMA"
						invoked.AssetAccountGroup			= Asset.AssetAccountGroup
						invoked.AssetType 					= Asset.AssetType
						invoked.TransactionStatus 			= "R"
						invoked.TransactionAmount 			= ImpairmentAssetBookRel.CurrentPeriodDepreciation
						invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
						invoked.TransactionDate				= LocalCurrentPeriodDate
						invoked.YearEndDate					= LocalYearEndDate
						invoked.PostingDate					= PrmPostingDate
						invoked.Reference					= "AssetPeriodClose"
						invoked.DistributionAccount			= TranImpairmentAmortization
						invoked.LocalJournalizeGroup 		= PrmJournalizeGroup

						if (Book.CurrencyTable entered)
							invoked.TransientCurrencyTable	= Book.CurrencyTable
						else
							invoked.TransientCurrencyTable	= Asset.CurrencyTable

						invoked.AssetGroup					= AssetGroup
						if (Book.PostCurrency.Book)
							invoked.TransientBookCurrency	= Book.Currency
						else
							invoked.TransientBookCurrency	= Asset.Currency
						invoked.AssetTransactionAmount.TransactionAmount 		= ImpairmentAssetBookRel.CurrentPeriodDepreciation
						invoked.AssetTransactionAmount.ExchangeDate 			= LocalCurrentPeriodDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
						invoked.BatchUpdateResult								= PrmAssetPeriodCloseResult


					if (FinanceEnterpriseGroup.FundAccounting
					and !Asset.AssetType.AllocateDepreciationExpense)
						include FundAllocation










					initialize LocalAssetTransaction







































				CreateBookTransactions
					LocalYearEndDate	= CurrentBookCalendarRel.YearEndDate
					invoke CreateTransactionPeriodClose AssetBookTransaction
						assign result to LocalAssetBookTransaction
						resume on error
							PeriodCloseError 		= true
							PeriodCloseErrorMessage = error message
						invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoked.Asset						= Asset
						invoked.Book						= Book
						invoked.Company						= Asset.Company
						invoked.TransactionStatus 			= "H"
						invoked.TransactionAmount 			= (CurrentPeriodDepreciation * -1)
						invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
						invoked.TransactionDate				= LocalCurrentPeriodDate
						invoked.PostingDate					= PrmPostingDate
						invoked.Reference					= "AssetPeriodClose"
						invoked.AssetAccountType 			= "ACM"
						invoked.DistributionAccount			= TranAccumulatedDepreciationAccount
						invoked.AssetProcess 				= "DPR"
						invoked.BatchUpdateResult			= PrmAssetPeriodCloseResult

					if (FinanceEnterpriseGroup.FundAccounting
					and !Asset.AssetType.AllocateDepreciationExpense)
						if (AssetFundsRel exists)
							LocalBookTransaction = LocalAssetBookTransaction
							invoke CreateFundTransactions LocalAssetBookTransactionsRel
								resume on error
									PeriodCloseError 		= true
									PeriodCloseErrorMessage = error message
								invoked.PrmTransactionDate	 	= LocalAssetBookTransactionsRel.TransactionDate
								invoked.AdjustmentItemsAdded	= 0
								invoked.AdjustmentAmount		= 0
								invoked.PrmReportMode			= PrmReportMode
								invoked.PrmAPC					= PrmAssetPeriodCloseResult










					initialize LocalAssetBookTransaction





































					if (!LocalTypeAllocationExist)
						invoke CreateTransactionPeriodClose AssetBookTransaction
							assign result to LocalAssetBookTransaction
							resume on error
								PeriodCloseError 		= true
								PeriodCloseErrorMessage = error message
							invoked.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
							invoked.Asset					= Asset
							invoked.Book					= Book
							invoked.Company					= Asset.Company
							invoked.TransactionStatus		= "H"
							invoked.TransactionAmount 		= CurrentPeriodDepreciation
							invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
							invoked.TransactionDate			= LocalCurrentPeriodDate
							invoked.PostingDate				= PrmPostingDate
							invoked.Reference				= "AssetPeriodClose"
							invoked.AssetAccountType 		= "EXP"
							invoked.DistributionAccount		= TranDepreciationExpenseAccount
							invoked.AssetProcess 			= "DPR"
							invoked.BatchUpdateResult		= PrmAssetPeriodCloseResult

						if (FinanceEnterpriseGroup.FundAccounting
						and !Asset.AssetType.AllocateDepreciationExpense)
							if (AssetFundsRel exists)
								LocalBookTransaction = LocalAssetBookTransaction
								invoke CreateFundTransactions LocalAssetBookTransactionsRel
									resume on error
										PeriodCloseError 		= true
										PeriodCloseErrorMessage = error message
									invoked.PrmTransactionDate	 	= LocalAssetBookTransactionsRel.TransactionDate
									invoked.AdjustmentItemsAdded	= 0
									invoked.AdjustmentAmount		= 0
									invoked.PrmReportMode			= PrmReportMode
									invoked.PrmAPC					= PrmAssetPeriodCloseResult










						initialize LocalAssetBookTransaction
					else
						for each AssetTypeAllocationDetailsRel
							LocalTransactionAmount = CurrentPeriodDepreciation * each.AllocationPercent
							invoke CreateTransactionPeriodClose AssetBookTransaction
								assign result to LocalAssetBookTransaction
								resume on error
									PeriodCloseError 		= true
									PeriodCloseErrorMessage = error message
								invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
								invoked.Asset						= Asset
								invoked.Book						= Book
								invoked.Company						= Asset.Company
								invoked.AssetProcess 				= "DPR"
								invoked.AssetAccountType 			= "EXP"
								invoked.TransactionStatus 			= "H"
								invoked.TransactionAmount 			= LocalTransactionAmount
								invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
								invoked.TransactionDate				= LocalCurrentPeriodDate
								invoked.PostingDate					= PrmPostingDate
								invoked.Reference					= "AssetPeriodClose"
								LocalDepreciationExpenseAccount 	= TranDepreciationExpenseAccount
								LocalDepreciationExpenseAccount 	= each.AccountingUnit
								LocalDepreciationExpenseAccount.GeneralLedgerChartAccount = TranDepreciationExpenseAccount.GeneralLedgerChartAccount
								invoked.DistributionAccount			= LocalDepreciationExpenseAccount
								if (Book.CurrencyTable entered)
									invoked.TransientCurrencyTable	= Book.CurrencyTable
								else
									invoked.TransientCurrencyTable	= Asset.CurrencyTable
								if (Book.PostCurrency.Book)
									invoked.TransientBookCurrency	= Book.Currency
								else
									invoked.TransientBookCurrency	= Asset.Currency
								invoked.AssetTransactionAmount.TransactionAmount 		= LocalTransactionAmount
								invoked.AssetTransactionAmount.ExchangeDate 			= LocalCurrentPeriodDate
								invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
								invoked.BatchUpdateResult								= PrmAssetPeriodCloseResult










							initialize LocalAssetBookTransaction





































					if (!Asset.AssetType.PostToAccount.Asset
					and Asset.AssetType.AmortizeRevaluation
					and RvlLtd ! = 0)
						include CreateRevaluationEntries

				CreateImpairmentBookTransactions
					invoke CreateTransactionPeriodClose AssetBookTransaction
						assign result to LocalAssetBookTransaction
						resume on error
							PeriodCloseError 		= true
							PeriodCloseErrorMessage = error message
						invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoked.Asset						= Asset
						invoked.Book						= Book.ImpairmentBook
						invoked.Company						= Asset.Company
						invoked.TransactionStatus 			= "H"
						invoked.TransactionAmount 			= (ImpairmentAssetBookRel.CurrentPeriodDepreciation * -1)
						invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
						invoked.TransactionDate				= LocalCurrentPeriodDate
						invoked.PostingDate					= PrmPostingDate
						invoked.Reference					= "AssetPeriodClose"
						invoked.AssetAccountType 			= "IMT"
						invoked.DistributionAccount			= TranAccumulatedImpairmentLoss
						invoked.AssetProcess 				= "IMA"
						invoked.BatchUpdateResult			= PrmAssetPeriodCloseResult










					initialize LocalAssetBookTransaction






































					invoke CreateTransactionPeriodClose AssetBookTransaction
						assign result to LocalAssetBookTransaction
						resume on error
							PeriodCloseError 		= true
							PeriodCloseErrorMessage = error message
						invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoked.Asset						= Asset
						invoked.Book						= Book.ImpairmentBook
						invoked.Company						= Asset.Company
						invoked.TransactionStatus 			= "H"
						invoked.TransactionAmount 			= ImpairmentAssetBookRel.CurrentPeriodDepreciation
						invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
						invoked.TransactionDate				= LocalCurrentPeriodDate
						invoked.PostingDate					= PrmPostingDate
						invoked.Reference					= "AssetPeriodClose"
						invoked.AssetAccountType 			= "IMA"
						invoked.DistributionAccount			= TranImpairmentAmortization
						invoked.AssetProcess 				= "IMA"
						invoked.BatchUpdateResult			= PrmAssetPeriodCloseResult










						initialize LocalAssetBookTransaction






































				CreateBookHistory
					if (Book.TrackDepreciationHistory)

						invoke Update AssetBookHistoryYearEndDateRel
							resume on error
								PeriodCloseError 		= true
								PeriodCloseErrorMessage = error message
							invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
							invoked.Asset									= Asset
							invoked.Book									= Book
							invoked.Company									= Asset.Company
							invoked.YearToDateDepreciation					+= CurrentPeriodDepreciation

							invoked.Life									= Life
							if (AssetBookHistoryLastRel exists)
								invoked.LifeToDateDepreciation 				= first AssetBookHistoryLastRel.LifeToDateDepreciation
								if (DepreciationMethodSwitched)
									if (AssetBookHistoryLastRel.DepreciationMethodSwitchDate entered)
										invoked.DepreciationMethodSwitchDate = AssetBookHistoryLastRel.DepreciationMethodSwitchDate
									else
										invoked.DepreciationMethodSwitchDate = LocalCurrentPeriodDate
							invoked.LifeToDateDepreciation					+= CurrentPeriodDepreciation
							invoked.YearEndDate									= LocalYearEndDate
							if (!AssetBookHistoryYearEndDateRel exists)
								invoked.BeginningLifeToDateDepreciation				= first AssetBookHistoryLastRel.LifeToDateDepreciation





















						LocalCalendarPeriod = CurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1

						if (AssetBookPeriodHistoryYearEndDateRel exists)
							invoke Update AssetBookPeriodHistoryYearEndDateRel
								resume on error
									PeriodCloseError 		= true
									PeriodCloseErrorMessage = error message
								invoked.CurrentPeriodDepreciation 		+= CurrentPeriodDepreciation
								invoked.YearToDatePeriodDepreciation 	= AssetBookHistoryYearEndDateRel.YearToDateDepreciation
								invoked.LifeRemaining 					= LifeRemaining
								invoked.Basis 							= Basis
								invoked.DepreciationMethodSwitched 		= DepreciationMethodSwitched
						else
							invoke Create AssetBookPeriodHistoryYearEndDateRel
								resume on error
									PeriodCloseError = true
									PeriodCloseErrorMessage = error message
								invoked.Asset							= Asset
								invoked.Book							= Book
								invoked.Company							= Asset.Company
								invoked.YearEndDate						= CurrentBookCalendarRel.YearEndDate
								invoked.CurrentPeriodDepreciation 		+= CurrentPeriodDepreciation
								invoked.YearToDatePeriodDepreciation 	= AssetBookHistoryYearEndDateRel.YearToDateDepreciation
								invoked.LifeRemaining 					= LifeRemaining
								invoked.Basis							= Basis
								invoked.DepreciationMethodSwitched 		= DepreciationMethodSwitched

				CreateImpairmentBookHistory
					if (ImpairmentAssetBookRel.Book.TrackDepreciationHistory)
						invoke Update NewAssetBookHistoryYearEndDateRel
							resume on error
								PeriodCloseError 							= true
								PeriodCloseErrorMessage 					= error message
							invoked.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
							invoked.Asset									= Asset
							invoked.Book									= Book.ImpairmentBook
							invoked.Company									= Asset.Company
							invoked.YearToDateDepreciation				   += ImpairmentAssetBookRel.CurrentPeriodDepreciation
							invoked.Life									= ImpairmentAssetBookRel.Life
							invoked.LifeToDateDepreciation				   += ImpairmentAssetBookRel.CurrentPeriodDepreciation
							invoked.YearEndDate								= LocalYearEndDate
							if (!NewAssetBookHistoryYearEndDateRel exists)
								invoked.BeginningLifeToDateDepreciation		= first NewAssetBookHistoryLastRel.LifeToDateDepreciation
								invoked.LifeToDateDepreciation			    = first NewAssetBookHistoryLastRel.LifeToDateDepreciation + ImpairmentAssetBookRel.CurrentPeriodDepreciation
	
						LocalCalendarPeriod = NewCurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1

						if (NewAssetBookPeriodHistoryYearEndDateRel exists)
							invoke Update NewAssetBookPeriodHistoryYearEndDateRel
								resume on error
									PeriodCloseError 					= true
									PeriodCloseErrorMessage 			= error message
								invoked.CurrentPeriodDepreciation 	   += ImpairmentAssetBookRel.CurrentPeriodDepreciation
								invoked.YearToDatePeriodDepreciation 	= NewAssetBookHistoryYearEndDateRel.YearToDateDepreciation
								invoked.LifeRemaining 					= ImpairmentAssetBookRel.LifeRemaining
								invoked.Basis 							= ImpairmentAssetBookRel.Basis
	
						else
							invoke Create NewAssetBookPeriodHistoryYearEndDateRel
								resume on error
									PeriodCloseError 					= true
									PeriodCloseErrorMessage 			= error message
								invoked.Asset							= Asset
								invoked.Book							= Book.ImpairmentBook
								invoked.Company							= Asset.Company
								invoked.YearEndDate						= NewCurrentBookCalendarRel.YearEndDate
								invoked.CurrentPeriodDepreciation 	   += ImpairmentAssetBookRel.CurrentPeriodDepreciation
								invoked.YearToDatePeriodDepreciation 	= NewAssetBookHistoryYearEndDateRel.YearToDateDepreciation
								invoked.LifeRemaining 					= ImpairmentAssetBookRel.LifeRemaining
								invoked.Basis							= ImpairmentAssetBookRel.Basis


				CreateGLTransactions
					if (IncrementJournalizeGroup)
						invoke JournalizeDistributionsForBatch first AssetTransactionRel
							invoked.PrmOptions					= "1"
							invoked.PrmUpdateOrigin				= "2"
							invoked.PrmFinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
							invoked.PrmPostingDate				= PrmPostingDate
							if (PrmCompany entered)
								invoked.PrmAssetCompany 		= PrmCompany
							else
							if (PrmCompanyGroup entered)
								invoked.PrmCompanyGroup			= PrmCompanyGroup
							invoked.PrmDescription				= "Asset Period Close"
							invoked.PrmJournalizeGroup			= PrmJournalizeGroup
						invoke Update PrmAssetPeriodCloseResult
							invoked.JournalizeGroup				= PrmJournalizeGroup


				p2000ProcessClassBooks
					if (ClassDepreciationPeriodRel exists)
						LocalClassPeriodDepreciation = ClassDepreciationPeriodRel.CurrentPeriodDepreciation
						if (ClassDepreciationPeriodRel.CurrentPeriodDepreciationCalculated)
							if (ClassDepreciationPeriodRel.CurrentPeriodDepreciation != 0)
								if (LocalPosting)
									invoke CreateTransactionPeriodClose AssetTransaction
										assign result to LocalAssetTransaction
										resume on error
											PeriodCloseError 		= true
											PeriodCloseErrorMessage = error message
										invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
										invoked.Asset						= Asset
										invoked.Book						= Book
										invoked.Company						= Asset.Company


										invoked.Description 				= "Depreciation Expense " + Asset
										invoked.AssetProcess 				= "DPR"
										invoked.AssetAccountType 			= "EXP"
										invoked.AssetAccountGroup			= Asset.AssetAccountGroup
										invoked.AssetType 					= ClassDepreciationPeriodRel.AssetType
										invoked.TransactionStatus 			= "R"
										invoked.TransactionAmount 			= LocalClassPeriodDepreciation
										invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
										invoked.TransactionDate				= LocalCurrentPeriodDate
										invoked.YearEndDate					= LocalYearEndDate
										invoked.PostingDate					= PrmPostingDate
										invoked.Reference					= "AssetPeriodClose"
										invoked.DistributionAccount			= TranDepreciationExpenseAccount
										invoked.LocalJournalizeGroup 		= PrmJournalizeGroup

										if (Book.CurrencyTable entered)
											invoked.TransientCurrencyTable	= Book.CurrencyTable
										else
											invoked.TransientCurrencyTable	= Asset.CurrencyTable

										invoked.AssetGroup					= AssetGroup
										if (Book.PostCurrency.Book)
											invoked.TransientBookCurrency	= Book.Currency
										else
											invoked.TransientBookCurrency	= Asset.Currency
										invoked.AssetTransactionAmount.TransactionAmount 		= CurrentPeriodDepreciation
										invoked.AssetTransactionAmount.ExchangeDate 			= LocalCurrentPeriodDate
										invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
										invoked.BatchUpdateResult								= PrmAssetPeriodCloseResult


									if (FinanceEnterpriseGroup.FundAccounting
									and !Asset.AssetType.AllocateDepreciationExpense)
										include FundAllocation










									initialize LocalAssetTransaction
									invoke CreateTransactionPeriodClose AssetTransaction
										assign result to LocalAssetTransaction
										resume on error
											PeriodCloseError 		= true
											PeriodCloseErrorMessage = error message
										invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
										invoked.Asset						= Asset
										invoked.Book						= Book
										invoked.Company						= Asset.Company


										invoked.Description 				= "Accumulated Depreciation-Class " + Asset
										invoked.AssetProcess 				= "DPR"
										invoked.AssetAccountType 			= "ACM"
										invoked.AssetAccountGroup			= Asset.AssetAccountGroup
										invoked.AssetType 					= ClassDepreciationPeriodRel.AssetType
										invoked.TransactionStatus 			= "R"
										invoked.TransactionAmount 			= (LocalClassPeriodDepreciation * -1)
										invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
										invoked.TransactionDate				= LocalCurrentPeriodDate
										invoked.YearEndDate					= LocalYearEndDate
										invoked.PostingDate					= PrmPostingDate
										invoked.Reference					= "AssetPeriodClose"
										invoked.DistributionAccount			= TranAccumulatedDepreciationAccount
										invoked.LocalJournalizeGroup 		= PrmJournalizeGroup

										if (Book.CurrencyTable entered)
											invoked.TransientCurrencyTable	= Book.CurrencyTable
										else
											invoked.TransientCurrencyTable	= Asset.CurrencyTable

										invoked.AssetGroup					= AssetGroup
										if (Book.PostCurrency.Book)
											invoked.TransientBookCurrency	= Book.Currency
										else
											invoked.TransientBookCurrency	= Asset.Currency
										invoked.AssetTransactionAmount.TransactionAmount 		= CurrentPeriodDepreciation
										invoked.AssetTransactionAmount.ExchangeDate 			= LocalCurrentPeriodDate
										invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
										invoked.BatchUpdateResult								= PrmAssetPeriodCloseResult


									if (FinanceEnterpriseGroup.FundAccounting
									and !Asset.AssetType.AllocateDepreciationExpense)
										include FundAllocation










									initialize LocalAssetTransaction
								else
									invoke CreateTransactionPeriodClose AssetBookTransaction
										assign result to LocalAssetTransaction
										resume on error
											PeriodCloseError 		= true
											PeriodCloseErrorMessage = error message
										invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
										invoked.Asset						= Asset
										invoked.Book						= Book
										invoked.Company						= Asset.Company



										invoked.AssetProcess 				= "DPR"
										invoked.AssetAccountType 			= "EXP"


										invoked.TransactionStatus 			= "H"
										invoked.TransactionAmount 			= ClassDepreciationPeriodRel.CurrentPeriodDepreciation
										invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
										invoked.TransactionDate				= LocalCurrentPeriodDate

										invoked.PostingDate					= PrmPostingDate
										invoked.Reference					= "AssetPeriodClose"
										invoked.DistributionAccount			= TranDepreciationExpenseAccount
										invoked.BatchUpdateResult			= PrmAssetPeriodCloseResult









									initialize LocalAssetTransaction
									invoke CreateTransactionPeriodClose AssetBookTransaction
										assign result to LocalAssetTransaction
										resume on error
											PeriodCloseError 		= true
											PeriodCloseErrorMessage = error message
										invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
										invoked.Asset						= Asset
										invoked.Book						= Book
										invoked.Company						= Asset.Company



										invoked.AssetProcess 				= "DPR"
										invoked.AssetAccountType 			= "ACM"


										invoked.TransactionStatus 			= "H"
										invoked.TransactionAmount 			= ClassDepreciationPeriodRel.CurrentPeriodDepreciation
										invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
										invoked.TransactionDate				= LocalCurrentPeriodDate

										invoked.PostingDate					= PrmPostingDate
										invoked.Reference					= "AssetPeriodClose"
										invoked.DistributionAccount			= TranAccumulatedDepreciationAccount
										invoked.BatchUpdateResult			= PrmAssetPeriodCloseResult









									initialize LocalAssetTransaction
								invoke Update ClassDepreciationPeriodRel
									resume on error
										PeriodCloseError 		= true
										PeriodCloseErrorMessage = error message
									invoked.YearToDateDepreciation 		+= ClassDepreciationPeriodRel.CurrentPeriodDepreciation
									invoked.LifeToDateDepreciation 		+= ClassDepreciationPeriodRel.CurrentPeriodDepreciation
									invoked.CurrentPeriodDepreciation 	= 0
									invoked.CurrentPeriodDepreciationCalculated = "N"

				p4400CreateAmtrans
					LocalYearEndDate	= CurrentBookCalendarRel.YearEndDate
					invoke CreateTransactionPeriodClose AssetTransaction
						assign result to LocalAssetTransaction
						resume on error
							PeriodCloseError 		= true
							PeriodCloseErrorMessage = error message
						invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
						invoked.Asset						= Asset
						invoked.Book						= Book
						invoked.Company						= Asset.Company


						invoked.Description 				= "Accumulated Depreciation " + Asset
						invoked.AssetProcess 				= "DPR"
						invoked.AssetAccountType 			= "ACM"
						invoked.AssetAccountGroup			= Asset.AssetAccountGroup
						invoked.AssetType 					= Asset.AssetType
						invoked.TransactionStatus 			= "R"
						invoked.TransactionAmount 			= (CurrentPeriodDepreciation * -1)
						invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
						invoked.TransactionDate				= LocalCurrentPeriodDate
						invoked.YearEndDate					= LocalYearEndDate
						invoked.PostingDate					= PrmPostingDate
						invoked.Reference					= "AssetPeriodClose"
						invoked.DistributionAccount			= TranAccumulatedDepreciationAccount
						invoked.LocalJournalizeGroup 		= PrmJournalizeGroup

						if (Book.CurrencyTable entered)
							invoked.TransientCurrencyTable	= Book.CurrencyTable
						else
							invoked.TransientCurrencyTable	= Asset.CurrencyTable

						invoked.AssetGroup					= AssetGroup
						if (Book.PostCurrency.Book)
							invoked.TransientBookCurrency	= Book.Currency
						else
							invoked.TransientBookCurrency	= Asset.Currency
						invoked.AssetTransactionAmount.TransactionAmount 		= (CurrentPeriodDepreciation * -1)
						invoked.AssetTransactionAmount.ExchangeDate 			= LocalCurrentPeriodDate
						invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
						invoked.BatchUpdateResult								= PrmAssetPeriodCloseResult


					if (FinanceEnterpriseGroup.FundAccounting
					and !Asset.AssetType.AllocateDepreciationExpense)
						include FundAllocation










					initialize LocalAssetTransaction












































					if (!LocalTypeAllocationExist)
						invoke CreateTransactionPeriodClose AssetTransaction
							assign result to LocalAssetTransaction
							resume on error
								PeriodCloseError 		= true
								PeriodCloseErrorMessage = error message
							invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
							invoked.Asset						= Asset
							invoked.Book						= Book
							invoked.Company						= Asset.Company


							invoked.Description 				= "Depreciation Expense " + Asset
							invoked.AssetProcess 				= "DPR"
							invoked.AssetAccountType 			= "EXP"
							invoked.AssetAccountGroup			= Asset.AssetAccountGroup
							invoked.AssetType 					= Asset.AssetType
							invoked.TransactionStatus 			= "R"
							invoked.TransactionAmount 			= CurrentPeriodDepreciation
							invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
							invoked.TransactionDate				= LocalCurrentPeriodDate
							invoked.YearEndDate					= LocalYearEndDate
							invoked.PostingDate					= PrmPostingDate
							invoked.Reference					= "AssetPeriodClose"
							invoked.DistributionAccount			= TranDepreciationExpenseAccount
							invoked.LocalJournalizeGroup 		= PrmJournalizeGroup

							if (Book.CurrencyTable entered)
								invoked.TransientCurrencyTable	= Book.CurrencyTable
							else
								invoked.TransientCurrencyTable	= Asset.CurrencyTable

							invoked.AssetGroup					= AssetGroup
							if (Book.PostCurrency.Book)
								invoked.TransientBookCurrency	= Book.Currency
							else
								invoked.TransientBookCurrency	= Asset.Currency
							invoked.AssetTransactionAmount.TransactionAmount 		= CurrentPeriodDepreciation
							invoked.AssetTransactionAmount.ExchangeDate 			= LocalCurrentPeriodDate
							invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
							invoked.BatchUpdateResult								= PrmAssetPeriodCloseResult


						if (FinanceEnterpriseGroup.FundAccounting
						and !Asset.AssetType.AllocateDepreciationExpense)
							include FundAllocation










						initialize LocalAssetTransaction
					else
						for each AssetTypeAllocationDetailsRel
							LocalTransactionAmount = CurrentPeriodDepreciation * each.AllocationPercent
							invoke CreateTransactionPeriodClose AssetTransaction
								assign result to LocalAssetTransaction
								resume on error
									PeriodCloseError 		= true
									PeriodCloseErrorMessage = error message
								invoked.FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
								invoked.Asset						= Asset
								invoked.Book						= Book
								invoked.Company						= Asset.Company


								invoked.Description 				= "Depreciation Expense " + Asset
								invoked.AssetProcess 				= "DPR"
								invoked.AssetAccountType 			= "EXP"
								invoked.AssetAccountGroup			= Asset.AssetAccountGroup
								invoked.AssetType 					= Asset.AssetType
								invoked.TransactionStatus 			= "R"
								invoked.TransactionAmount 			= LocalTransactionAmount
								invoked.TransactionNumberOfDecimals = TransactionNumberOfDecimals
								invoked.TransactionDate				= LocalCurrentPeriodDate
								invoked.YearEndDate					= LocalYearEndDate
								invoked.PostingDate					= PrmPostingDate
								invoked.Reference					= "AssetPeriodClose"
								LocalDepreciationExpenseAccount 	= TranDepreciationExpenseAccount
								LocalDepreciationExpenseAccount 	= each.AccountingUnit
								LocalDepreciationExpenseAccount.GeneralLedgerChartAccount = TranDepreciationExpenseAccount.GeneralLedgerChartAccount
								invoked.DistributionAccount			= LocalDepreciationExpenseAccount
								invoked.LocalJournalizeGroup 		= PrmJournalizeGroup

								if (Book.CurrencyTable entered)
									invoked.TransientCurrencyTable	= Book.CurrencyTable
								else
									invoked.TransientCurrencyTable	= Asset.CurrencyTable

								invoked.AssetGroup					= AssetGroup
								if (Book.PostCurrency.Book)
									invoked.TransientBookCurrency	= Book.Currency
								else
									invoked.TransientBookCurrency	= Asset.Currency
								invoked.AssetTransactionAmount.TransactionAmount 		= LocalTransactionAmount
								invoked.AssetTransactionAmount.ExchangeDate 			= LocalCurrentPeriodDate
								invoked.AssetTransactionAmount.BaseAmount.ToCurrency 	= Book.Currency
								invoked.BatchUpdateResult								= PrmAssetPeriodCloseResult











							initialize LocalAssetTransaction












































				FundAllocation
					if (FinanceEnterpriseGroup.FundAccounting
					and !Asset.AssetType.AllocateDepreciationExpense)
						AssetFundExist = false
						if (AssetFundsRel exists)
							AssetFundExist = true
							FundTransactionsCreated = true
							LocalTransaction = LocalAssetTransaction
							invoke CreateBatchFundTransaction LocalAssetTransactionsRel
								resume on error
									PeriodCloseError = true
									PeriodCloseErrorMessage = error message
								invoked.PrmJournalizeGroup	= PrmJournalizeGroup
								invoked.PrmCurrency 		= Book.Currency
								invoked.PrmReportMode		= PrmReportMode
								invoked.PrmAPC				= PrmAssetPeriodCloseResult
					if (Asset entered)
						invoke TriggerAssetTransaction Asset
							resume on error
								PeriodCloseError = true
								PeriodCloseErrorMessage = error message







			Action Rules
				Empty Set Rules








































































































































































































				Set Rules
					Entrance Rules










































































































































































































				Instance Rules

					LocalPosting = false
					ClassDepreciation = false
					PeriodCloseError = false
					PeriodCloseErrorMessage = ""
					BatchUpdateResult		= PrmAssetPeriodCloseResult





					if (LocalAllocationCompany != Asset.Company)
						if (AssetTypeAllocationExistsRel exists)
							LocalAllocationExists	= true
					if (LocalAllocationExists
					and AssetTypeAllocationRel exists)
						LocalTypeAllocationExist 		= true
						LocalAllocStartDate				= AssetTypeAllocationRel.AssetTypeAllocation.StartDate
						LocalAllocSequence				= AssetTypeAllocationRel.AssetTypeAllocation.SequenceNumber

					if (CurrentBookCalendarRel.IsPostingBook)
						LocalPosting = true
						LocalPostingBook = Book
					if (Book.DepreciationType.ClassLevel)
						ClassDepreciation = true
						ClassBook = Book
					LocalTransientFromCurrency = PostingCurrency
					LocalYearEndDate = CurrentBookCalendarRel.YearEndDate
					LocalCurrentPeriodDate = CurrentBookCalendarRel.CurrentPeriodDate
					if ((PrmPostingDate <= CurrentBookCalendarRel.LastPeriodDate
						or PrmPostingDate > CurrentBookCalendarRel.CurrentPeriodDate)
						or PrmPostingDate not entered)
						PrmPostingDate = LocalCurrentPeriodDate
					if (!ClassDepreciation)
						if (CurrentPeriodDepreciation entered
						and Active)
							include AccountDefaulting
						if (!Active)
							if (InServiceDate <= LocalYearEndDate)
								WsMonth = ((CurrentBookCalendarRel.NumberOfPeriodsInProcess /CurrentBookCalendarRel.DepreciationPeriodsPerYear) * 12)
								LifeToDateInactiveMonths += WsMonth
								YearToDateInactiveMonths += WsMonth
						else
							if (PrmRelease = "Y"
							or PrmRelease = "R")
								include UpdateBook
								if (HasImpairmentBook)
									include UpdateImpairmentBook

						if (TransientAssetStatus ="9"
						and (PrmRelease = "Y"
						or PrmRelease = "R"))
							YearToDateDisposedMonths += 1
					else
						if (ClassDepreciation)
							if (PrmRelease = "Y"
							or PrmRelease = "R")
								include p2000ProcessClassBooks
					if (PeriodCloseError)
						invoke Create AssetErrorResult
							invoked.FinanceEnterpriseGroup = Asset.FinanceEnterpriseGroup
							invoked.Company				   = Asset.Company
							invoked.ErrorClass			   = 2
							invoked.ErrorLevel             = 1
							invoked.Asset				   = Asset
							invoked.AssetBatchUpdateResult = PrmAssetPeriodCloseResult
							invoked.ErrorMessage		   = PeriodCloseErrorMessage

					LocalAllocationCompany = Asset.Company

		AdjustmentUpdate is an Update Action
			restricted
			Entrance Rules
				if (DisplayAdjustmentDate
				and AdjustmentAllowed
				and !DeleteAllowed)
					include RefreshAdjustmentDate

				if (BookDeprValueChanged)
					LocalYearEndDate		= BookYearEndDate
					LocalYearBeginDate		= BookYearBeginDate
					LocalPrevYearEndDate	= BookYearBeginDate - 1 day
					LocalCompany			= Asset.Company
					LocalConvention			= Convention
					include 550InsrDate
					DepreciationStartDate	= LocalInsDate

			Field Rules
				AdjustmentDate
					constraint (AdjustmentDate >= Asset.LastAssetItemPurchaseDate)
						"AdjustmentDateMustBeGreaterThanPurchaseDate"			//"AdjustmentDateMustBeGreaterThanPurchaseDate"       
					if (ComputeOption.Prospective)
						constraint (Method.MethodFormula = "SL")
							"BookMethodIs<Method.MethodFormula>;MustBeSLForProspectiveComputeType"  
				Method
					if (Asset.AssetCategory.Depreciable)
						if (!Book.DepreciationType.ClassLevel)
							required
								"MethodIsRequiredForADepreciableAsset"
					else
					if (Asset.AssetCategory.NonDepreciable
					and Asset.TransientCategoryUpdate = false)
						cannot be entered
							"MethodCannotBeEnteredForNonDepreciableAsset"
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingTheBookMethod"

				Life
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingTheBookLife"

				LifeRemaining
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingTheBookLifeRemaining"

				Convention
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingTheBookConvention"

				Basis
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingTheBasis"

				YearToDateDepreciation
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingYearToDateDepreciation"

				LifeToDateDepreciation
					if (FundAccounting)
						if (Asset.FundOverrideNotSelected
						and Asset.UnreleasedAssetAdjustmentRel.ItemCostAdjustments exist)
							cannot be changed
								"WhenUsingFundAccountingUnreleasedItemAdjustmentsMustBeReleasedBeforeUpdatingLifeToDateDepreciation"


			Action Rules
				constraint (AdjustmentAllowed)
					"CannotUpdate;AssetCannotBeAdjusted"
				if (IsPostingBook)
					invoke Delete UnreleasedAssetTransactionsRel
				else
					invoke Delete UnreleasedAssetBookTransactionsRel
				if (LifeRemaining changed
				or ComputeOption = "Y")
					include DepreciationEndDateCalc
				initialize LocalAction
				include CreateAdjustment
				LocalAction = "A"
				include AccountDefaulting
				if (InServiceDate entered)
					if (IsPostingBook)
						include ProjectDateValidation
				include CreateTransactions

				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated
			Exit Rules
				if (BookDeprValueChanged)
					LocalControlDebit 	= LocalASTTransactionAmount
					LocalControlCredit	= LocalASTTransactionAmount * -1


		AssetCategoryChangeInitializeFields is an Instance Action
			restricted
			Action Rules
				initialize Method
				initialize Life
				initialize LifeRemaining
				initialize LifeInYears
				initialize YearToDateDepreciation
				initialize LifeToDateDepreciation
				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated

		SimulatedChangeInitializeFields is an Instance Action
			restricted
			Action Rules
				LifeRemaining	= Life
				initialize YearToDateDepreciation
				initialize YearToDateDepreciationAllowed
				initialize LifeToDateDepreciation
				initialize LifeToDateDepreciationAllowed
				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated
				invoke CreateAssetTransactions

		CurrentPeriodInitializeFields is an Instance Action
			restricted
			Action Rules
				CurrentPeriodDepreciationCalculated = false
				initialize CurrentPeriodPortionOfLife
				initialize CurrentPeriodDepreciation
				initialize CurrentPeriodDepreciationAllowed

		UpdateFromTransfer is an Instance Action
			restricted
			Parameters
				PrmBasis			is an InternationalAmount
				PrmYTDDepr			is an InternationalAmount
				PrmLTDDepr			is an InternationalAmount
				PrmSalvageValue		is an InternationalAmount

			Action Rules
				Basis					= (Basis + PrmBasis)
				YearToDateDepreciation	= PrmYTDDepr
				LifeToDateDepreciation	= PrmLTDDepr
				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated
				if(PrmSalvageValue entered)
					SalvageValue			= PrmSalvageValue





				LocalAction = "A"
				include AccountDefaulting
				if (InServiceDate entered)
					if (IsPostingBook)
						include ProjectDateValidation

				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated

		UpdateFromTransferNoTransactionChange is an Instance Action
			restricted
			Parameters
				PrmBasis			is an InternationalAmount
				PrmLTD				is an InternationalAmount
				PrmYTD				is an InternationalAmount

			Action Rules
				Basis						+= PrmBasis
				YearToDateDepreciation		+= PrmYTD
				LifeToDateDepreciation		+= PrmLTD

		UpdateBookFromDisposal is an Instance Action
			restricted
			Parameters
				PrmPartialDisposal					is Boolean
				PrmBasis							is an InternationalAmount
				PrmOriginalBasis					is an InternationalAmount
				PrmDisposalPercent 					is a Percent
				PrmYearToDateDepreciation			is an InternationalAmount
				PrmOriginalYearToDateDepreciation	is an InternationalAmount
				PrmOriginalLifeToDateDepreciation	is an InternationalAmount
				PrmLifeToDateDepreciation			is an InternationalAmount
				PrmSalvageValue						is an InternationalAmount
				PrmDepreciationExpense		 		is an InternationalAmount
				PrmDepreciationExpenseOverride 		is an InternationalAmount
			Local Fields
				LocalDisposalPercent 				is a Percent
				LocalDisposedYTD					is an InternationalAmount
				LocalDisposedLTD					is an InternationalAmount

			Action Rules
				if (PrmPartialDisposal)
					if (FromAssetBookDisposalRel exists)
						Basis 					= Basis - PrmBasis


						SalvageValue			= SalvageValue - PrmSalvageValue
					else
						Basis 					= Basis - PrmBasis
						YearToDateDepreciation	= YearToDateDepreciation - PrmYearToDateDepreciation
						LifeToDateDepreciation	= LifeToDateDepreciation - PrmLifeToDateDepreciation
						SalvageValue			= SalvageValue - PrmSalvageValue
				else
					if (PrmOriginalBasis entered and PrmDisposalPercent not entered)
						LocalDisposalPercent 	= PrmBasis / PrmOriginalBasis
						Basis					+= PrmBasis
						LocalDisposedYTD		= PrmOriginalYearToDateDepreciation * (PrmBasis / PrmOriginalBasis)
						LocalDisposedLTD		= PrmOriginalLifeToDateDepreciation * (PrmBasis / PrmOriginalBasis)
						YearToDateDepreciation	+= LocalDisposedYTD
						LifeToDateDepreciation	+= LocalDisposedLTD
						SalvageValue      		+= PrmSalvageValue * (PrmBasis / PrmOriginalBasis)
					else
						if (PrmBasis entered)
							LocalDisposalPercent 	= PrmBasis / (Basis + PrmBasis)
							Basis					+= PrmBasis
							YearToDateDepreciation	= YearToDateDepreciation * LocalDisposalPercent
							LifeToDateDepreciation	= LifeToDateDepreciation * LocalDisposalPercent


						else
							if (PrmDisposalPercent entered)  
								LocalDisposalPercent	= PrmDisposalPercent
								Basis					= Basis + (PrmOriginalBasis * LocalDisposalPercent)
								YearToDateDepreciation	= YearToDateDepreciation + (PrmOriginalYearToDateDepreciation * LocalDisposalPercent)
								LifeToDateDepreciation	= LifeToDateDepreciation + (PrmOriginalLifeToDateDepreciation * LocalDisposalPercent)
								SalvageValue			= SalvageValue + (PrmSalvageValue * LocalDisposalPercent)


				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated


				round LifeToDateDepreciation to nearest DerivedRoundTo
				round YearToDateDepreciation to nearest DerivedRoundTo

		UpdateFromDisposalReq is an Instance Action
			restricted
			Parameters
				PrmBasis			is an InternationalAmount
				PrmConvention 		is a Convention
				PrmLife				is like Life
				PrmLifeRemaining	is like LifeRemaining
			Entrance Rules
			Action Rules
				Basis			+= PrmBasis
				Convention		= PrmConvention
				Life			= PrmLife
				LifeRemaining	= PrmLifeRemaining
				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated

		UpdateFromAssetItem is an Instance Action
			restricted
			Parameters
				PrmAction			is AlphaUpper 1
				PrmBasis			is an InternationalAmount
				PrmUpdateType		is Numeric 1
					States
						ResetAdjustment		value is 1
				PrmCreateFromBatch  is Boolean
				PrmPurchaseDate		is Date
				PrmComputeFromBatch is Boolean
				PrmUpdateFromInterface is Numeric 1
				PrmLocalProgram     is Alpha size 20
			Action Rules
				LocalUpdateFromInterface = PrmUpdateFromInterface
				LocalComputeFromBatch = PrmComputeFromBatch
				OriginalBasis 	= (old Basis)
				LocalCreateFromBatch = PrmCreateFromBatch
				initialize LocalCurrencyExchange
				if (PrmAction entered)
					LocalAction	= PrmAction
				if (Book.Currency 						!= Asset.Currency
				and Book.PostCurrency.Book)
					if (PrmPurchaseDate entered)
						CurrencyWork.ExchangeDate			= PrmPurchaseDate
					else
						CurrencyWork.ExchangeDate			= HighPurchaseDate
					CurrencyWork.TransactionAmount = PrmBasis
					include CurrencyExchangeForIncrementAmount
					Basis = CurrencyWork.BaseAmount.OutputCurrencyAmount
				else
					if (PrmLocalProgram = "AssetAppend")
						LocalOldBasis = Basis
						LocalYearToDateDepreciation = YearToDateDepreciation
						TransientProgram = "AssetAppend"
						LocalFlag = true

					else
						invoke UpdateAsset Asset
							invoked.AssetAppend = false
					Basis = PrmBasis
				if (Asset.Status.Unreleased)
					if (BookRegulation entered
					and Asset.AssetGuidelineClass entered
					or  Asset.AssetCategory.NonDepreciable)  
						InServiceDate = HighPurchaseDate
					include ApplyGuidelineClassDefaults
				AdjustmentDate = UnreleasedAssetAdjustmentRel.AdjustmentDate







				include AccountDefaulting
				if (InServiceDate entered)
					if (IsPostingBook)
						include ProjectDateValidation
				if   (((Basis changed and Basis = 0)
				or    Basis entered) 					
				and ((Life entered						
				and   Method entered)					
				or	  IsNonDepreciable 					
				or	  Book.DepreciationType.ClassLevel))
					if (!PrmUpdateType.ResetAdjustment)
						include CreateAdjustment
						if (!FromImport)
							if (AssetItemRel not exists)
								invoke AssetCategoryChangeInitializeFields
								initialize InServiceDate
								invoke Delete UnreleasedAssetTransactionsRel
								invoke Delete UnreleasedAssetBookTransactionsRel
							else
								include CreateTransactions  
						else
							if (AssetItemRel not exists)
								invoke AssetCategoryChangeInitializeFields
								initialize InServiceDate
							confirmation required
								"Warning;TransactionsWillNotBeCreatedForAdjustmentsToAnImportedAssetPriorToRelease"
				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated

		UpdateFromDisposalProcess is an Instance Action
			restricted
			Parameters
				PrmBasis							is an InternationalAmount
				PrmFirstAndLastYear					is a FirstAndLastYear
				PrmYearToDateDepreciation			is an InternationalAmount
				PrmYearToDateDepreciationOverride	is an InternationalAmount
				PrmYearToDateDepreciationAllowed	is an InternationalAmount
				PrmLifeToDateDepreciation			is an InternationalAmount
				PrmLifeToDateDepreciationAllowed 	is an InternationalAmount
				PrmCurrentPeriodDepreciation		is an InternationalAmount
				PrmCurrentPeriodDepreciationAllowed	is an InternationalAmount
				PrmSalvageValue						is an InternationalAmount
				PrmFirstYearExpenseAmount			is an InternationalAmount
				PrmTaxCreditPropertyAmount			is an InternationalAmount
				PrmTaxCredit						is an InternationalAmount
				PrmActualInsuranceValue				is an InternationalAmount
				PrmCalculatedInsuranceValue			is an InternationalAmount
				PrmCalculatedReplacementValue		is an InternationalAmount

			Action Rules
				if (PrmBasis entered)
					Basis							= PrmBasis
				YearToDateDepreciation				= PrmYearToDateDepreciation
				YearToDateDepreciationOverride		= PrmYearToDateDepreciationOverride
				YearToDateDepreciationAllowed 		= PrmYearToDateDepreciationAllowed
				LifeToDateDepreciation				= PrmLifeToDateDepreciation
				LifeToDateDepreciationAllowed		= PrmLifeToDateDepreciationAllowed


				CurrentPeriodDepreciation 			= PrmCurrentPeriodDepreciation
				CurrentPeriodDepreciationAllowed	= PrmCurrentPeriodDepreciationAllowed
				if (PrmSalvageValue entered)
					SalvageValue					= PrmSalvageValue
				if (PrmFirstYearExpenseAmount entered)
					FirstYearExpenseAmount 			= PrmFirstYearExpenseAmount
				if (PrmTaxCreditPropertyAmount entered)
					TaxCreditPropertyAmount 		= PrmTaxCreditPropertyAmount
				if (PrmTaxCredit entered)
					TaxCredit 						= PrmTaxCredit
				if (PrmActualInsuranceValue entered)
					ActualInsuranceValue 			= PrmActualInsuranceValue
				if (PrmCalculatedInsuranceValue entered)
					CalculatedInsuranceValue 		= PrmCalculatedInsuranceValue
				if (PrmCalculatedReplacementValue entered)
					CalculatedReplacementValue 		= PrmCalculatedReplacementValue
				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated
				round LifeToDateDepreciation to nearest DerivedRoundTo
				round YearToDateDepreciation to nearest DerivedRoundTo	


		UpdateFromReinstatement is an Instance Action
			restricted
			Parameters
				PrmCompany					is like Company
				PrmBasis					is an InternationalAmount
				PrmLifeRemaining			is an LifeRemaining
				PrmYTDDisposedMonths		is a YearToDateDisposedMonths
				PrmYearToDateDepreciation	is an InternationalAmount
				PrmLifeToDateDepreciation	is an InternationalAmount
				PrmSalvageValue				is an InternationalAmount
				PrmReinstateBookDisposal	is Boolean

			Action Rules
				if (PrmCompany entered)
					Company						= PrmCompany
				if (PrmBasis entered)
					Basis						= PrmBasis
				if (PrmLifeRemaining entered)
					LifeRemaining				= PrmLifeRemaining
				if (PrmYTDDisposedMonths entered)
					YearToDateDisposedMonths	= PrmYTDDisposedMonths

				LifeToDateDepreciation		= PrmLifeToDateDepreciation

				YearToDateDepreciation		= PrmYearToDateDepreciation


				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated
				if (PrmSalvageValue entered)
					SalvageValue			= PrmSalvageValue
				if (PrmReinstateBookDisposal)	
					initialize Disposed
					initialize AssetDisposal

					






		ImpairmentUpdate is an Instance Action
			restricted
			Parameters
				ImpairmentParameter			is Numeric 1
				ImpairmentAmountParameter	is an InternationalAmount
				ImpairmentDateParameter		is Date

			Action Rules
				LocalImpairmentParameter 	= ImpairmentParameter
				include AccountDefaulting
				AdjustmentDate				= ImpairmentDateParameter
				LifeToDateDepreciation		= LifeToDateDepreciation - ImpairmentAmountParameter
				YearToDateDepreciation		= YearToDateDepreciation - ImpairmentAmountParameter

		UpdateImpairmentBookLife is an Instance Action
			restricted
			Action Rules
				invoke Update ImpairmentAssetBookRel
					if (Life changed)
						invoked.AdjustmentDate 			= UnreleasedAssetAdjustmentRel.AdjustmentDate
						invoked.Life					= (LifeRemaining + ImpairmentPeriodsProcessed)
						invoked.LifeRemaining			= LifeRemaining
						invoked.ComputeOption			= "Y"
					if (Active changed)
							invoked.Active				= Active


		GetDefaultAccounts is an Instance Action
			restricted
			Action Rules
				include AccountDefaulting







































































































		CreateAssetTransactions is an Instance Action
			restricted
			Parameters
				NewPostingDate	is Date
			Action Rules
				if (NewPostingDate entered)
					TransientPostingDate	= NewPostingDate
				include AccountDefaulting
				LocalAction = "A"
				if (!FromImport)
					include CreateTransactions
				else
					confirmation required
    					"Warning;TransactionsWillNotBeCreatedForAdjustmentsToAnImportedAssetPriorToRelease"
				if (ResetCPCalculatedFlag)
					initialize CurrentPeriodDepreciationCalculated

		EditProjectDates is an Instance Action
			restricted
			Action Rules
				include ProjectDateEdit

		InitializeMethodAndLife is an Instance Action
			restricted
			Action Rules
				initialize Method
				initialize Life
				initialize LifeRemaining
				initialize CurrentPeriodDepreciation
				initialize CurrentPeriodDepreciationCalculated
				if (Asset.AssetProcess.Adjustment)
					include CreateAdjustment

		IncrementHistoryAmount is an Instance Action
			restricted
			Parameters
				PrmIncrementalDepreciation	is an InternationalAmount
				PrmLastDepreciationFund		is like AssetFund

			Action Rules
				IncrementalDepreciation		+= PrmIncrementalDepreciation
				LastDepreciationFund		= PrmLastDepreciationFund


		IncrementExpenseAmount is an Instance Action
			restricted
			Parameters
				PrmIncrementalExpense		is an InternationalAmount
				PrmLastExpenseFund			is like AssetFund

			Action Rules
				IncrementalExpense			+= PrmIncrementalExpense
				LastExpenseFund				= PrmLastExpenseFund 


		DefaultAccounts is an Instance Action
			restricted
			Action Rules
				include AccountDefaulting
		
		ChangeToBookDisposal is an Instance Action
			restricted
			Action Rules
				Disposed 		= true
				AssetDisposal 	= DerivedBookDisposal


		UpdateDisposedBook is an Instance Action
			restricted
			Parameters
				PrmDispose 	is Numeric 1
				PrmYearToDateDepreciation is an InternationalAmount
				PrmLifeToDateDepreciation is an InternationalAmount
				PrmDepreciationExpenseOverride is an InternationalAmount
			Action Rules
				if (PrmDispose 		= 1)
					Disposed 		= false



					initialize AssetDisposal
					if (PrmYearToDateDepreciation entered)
						YearToDateDepreciation = PrmYearToDateDepreciation
					if (PrmLifeToDateDepreciation entered)
						LifeToDateDepreciation = PrmLifeToDateDepreciation
				else
					if (PrmDispose 		= 2)
						Disposed 		= true
						AssetDisposal 	= AssetDisposalRel.AssetDisposal
						if (PrmYearToDateDepreciation entered)
							YearToDateDepreciation = PrmYearToDateDepreciation
						if (PrmLifeToDateDepreciation entered)
							LifeToDateDepreciation = PrmLifeToDateDepreciation
					else
						YearToDateDepreciation = PrmYearToDateDepreciation
						LifeToDateDepreciation = PrmLifeToDateDepreciation

		DeleteFromAsset is a Delete Action
			restricted
			Entrance Rules
				include DeleteRules

		Delete is a Delete Action
			valid when (AllowDelete)
			Entrance Rules
				constraint (!IsRequiredBook)
					"CannotDeleteRequiredBook"
				if (!IsImpairmentBook)
					constraint (!ReleasedAssetTransactionsRel exists)
						"APostingCannotBeDeletedAfterInterfacingTransactionsToTheGlobalLedger"
					include DeleteRules
				else
					if (!ReleasedAssetTransactionsRel exists)
						include DeleteRules

		DeleteFromTransfer is a Delete Action
			restricted
			Entrance Rules

		TransferResetDelete is a Delete Action
			restricted
			Entrance Rules
				if (IsPostingBook)
					invoke Delete MemoAssetTransactionRel
					invoke Delete UnreleasedAssetTransactionsRel
					if (AssetControlTransactionRel exists)
						if (UnreleasedTransactionsForAllBooksRel exists)
							invoke Update AssetControlTransactionRel
						else
							invoke Delete AssetControlTransactionRel
				else
					invoke DeleteAssetTransactions first AssetBookTransactionsRel
						invoked.PrmFinanceEnterpriseGroup 	= FinanceEnterpriseGroup
						invoked.PrmCompany					= Asset.Company
						invoked.PrmAsset					= Asset
						invoked.PrmBook						= Book

					invoke DeleteAssetBookHistory first AssetBookHistoryRel  
						invoked.PrmFinanceEnterpriseGroup 	= FinanceEnterpriseGroup
						invoked.PrmCompany					= Asset.Company
						invoked.PrmAsset					= Asset
						invoked.PrmBook						= Book


				if (PersonalUseCode entered)
					invoke Delete PersonalUseHistoryRel


		CreateProjections is an Instance Action
			valid when (!AllowProjections)
			Entrance Rules
				constraint (InServiceDate entered)
					"InServiceDateIsRequired"
			Action Rules
				constraint (BookYearBeginDate entered)
					"CurrentCalendarIsNotDefinedForBook<Book>"
				include CalculateProjection
			Exit Rules
				if (IsCustomMethod
				or IsPercentTable)
					YearToDateDepreciation			= TempYearToDateDepreciation
					LifeToDateDepreciation			= TempLifeToDateDepreciation
					LifeRemaining					= TempLifeRemaining

		ReinstateBook is an Instance Action
			valid when (ReinstatementIsAvailable)
			Parameters
				PrmReinstatementDate 	is Date
					default label is "ReinstatmentDate"

			Action Rules
				LocalAssetDisposal = BookTypeDisposalsRel.AssetDisposal
				invoke CreateBookDisposalReinstatement AssetReinstatement
					invoked.FinanceEnterpriseGroup 		= actor.context.FinanceEnterpriseGroup
					invoked.ReinstatementDate			= PrmReinstatementDate 	
					invoked.Asset 						= Asset
					invoked.TransientBook				= Book
					invoked.AssetDisposal 				= LocalAssetDisposal				

		DisposalReset is an Update Action
			restricted
			bypass field rules
			Entrance Rules


				initialize CreditBalance
				initialize DebitBalance
				if (AssetBookDisposalRel exist)
					if (AssetBookDisposalRel.Dispose
					and (AssetBookDisposalRel.AssetDisposal = Asset.LastAssetSequence))
						Disposed 		= false
						initialize 		AssetDisposal

						YearToDateDepreciation			= YearToDateDepreciation - AssetBookDisposalRel.DepreciationExpense
						LifeToDateDepreciation			= LifeToDateDepreciation - AssetBookDisposalRel.DepreciationExpense
						if (UnreleasedAssetDisposalRel.FullOrPartial.Partial)
							Basis						= AssetBookDisposalRel.Basis
						else
							if (AssetTaxCreditTable entered)
								if (ASTAssetTransactionsRel exists)
									LocalBasis 			= sum ASTAssetTransactionsRel.AssetTransaction.TransactionAmount
								else
									if (ASTAssetBookTransactionRel exists)
										LocalBasis 		= sum ASTAssetBookTransactionRel.AssetBookTransaction.TransactionAmount
								Basis					+= LocalBasis
				else
					if (NewAssetBookRel exist)
						YearToDateResetAmount 			= (NewAssetBookRel.YearToDateDepreciation - NewAssetBookDisposalRel.DepreciationExpense)
						YearToDateDepreciation			= (YearToDateDepreciation + YearToDateResetAmount)
						LifeToDateResetAmount			= (NewAssetBookRel.LifeToDateDepreciation - NewAssetBookDisposalRel.DepreciationExpense)
						LifeToDateDepreciation			= (LifeToDateDepreciation + LifeToDateResetAmount)
						Basis							+= NewAssetBookRel.Basis
			Action Rules

		DisposePartialReset is an Update Action
			restricted
			bypass field rules
			Entrance Rules
				YearToDateDepreciation 	= YearToDateDepreciation - AssetBookDisposalRel.DepreciationExpense
				LifeToDateDepreciation 	= LifeToDateDepreciation - AssetBookDisposalRel.DepreciationExpense

			Action Rules

		Release is an Instance Action
			restricted
			Parameters
				PrmAssetProcess							is like AssetProcess
				PrmPriorHistory							is Boolean
				PrmJournalizeGroup						is like JournalizeGroup
				PrmAssetBatchUpdateResult				is a AssetBatchUpdateResult
			Action Rules











				if (Book.DepreciationType.ClassLevel)
					include AccountDefaulting
					if (ClassDepreciationRel exists)
						for each ClassDepreciationRel
							if (each.AssetAccountingUnit = LocalASTTransactionDimensions)
								constraint (each.DepreciationExpenseAccountingUnit = LocalEXPTransactionDimensions)
									"AssetExistsWithTheSameAssetDimensionsButDifferentDepreciationExpenseDimensions" 		
								constraint (each.AccumulatedDepreciationAccountingUnit = LocalACMTransactionDimensions)
									"AssetExistsWithTheSameAssetDimensionsButDifferentAccumulatedDepreciationDimensions" 	
					else
						invoke Create ClassDepreciation
							initialize invoked.ClassDepreciation.YearEndDate
							initialize invoked.ClassDepreciation.Period
							initialize invoked.CurrentPeriodDepreciation
							initialize invoked.YearToDateDepreciation
							initialize invoked.LifeToDateDepreciation
							invoked.Company										= Asset.Company
							invoked.AssetType									= Asset.AssetType
							invoked.Book										= Book
							invoked.AssetAccountingUnit							= LocalASTTransactionDimensions
							invoked.DepreciationExpenseAccountingUnit       	= LocalEXPTransactionDimensions
							invoked.AccumulatedDepreciationAccountingUnit       = LocalACMTransactionDimensions

				if (Asset.AssetProcess.Disposal)
					initialize CurrentPeriodDepreciation
					initialize CurrentPeriodDepreciationAllowed
					initialize CurrentPeriodPortionOfLife

				if (UnreleasedAssetTransactionsRel exists)
					for each UnreleasedAssetTransactionsRel
						if (Asset.AssetProcess.ReAdd)
							if (each.AssetAccountType.DepreciationExpense)
								YearToDateDepreciation		+= each.TransactionAmount
								if (!UnreleasedAssetReinstatementRel.DisposalMethod.Purged)
									LifeToDateDepreciation	+= each.TransactionAmount
							else
							if (each.AssetAccountType.AccumulatedDepreciation)
								if (UnreleasedAssetReinstatementRel.DisposalMethod.Purged)
									LifeToDateDepreciation	= each.TransactionAmount * -1

						if (!each.AssetProcess.Transfer)
							invoke Release each
								invoked.PrmAssetBatchUpdateResult		= PrmAssetBatchUpdateResult
								if (each.AssetProcess.TransferBalancing)
									invoked.PrmFinanceEnterpriseGroup	= Asset.FinanceEnterpriseGroup
									invoked.PrmJournalizeGroup			= PrmJournalizeGroup



				else
					if (FundAccounting
					and AssetFundsRel exists)
						for each MemoAssetTransactionRel
							if (each.FundAccountType)
								invoke CreateFundTransactions each
									invoked.PrmTransactionDate	 		= each.TransactionDate
									if (UnreleasedAssetAdjustmentRel.NewAssetItemsAdded)
										invoked.AdjustmentItemsAdded 	= UnreleasedAssetAdjustmentRel.NumberOfItemsAdded
										invoked.AdjustmentAmount 		= (UnreleasedAssetBookAdjustmentRel.ToBasis - UnreleasedAssetBookAdjustmentRel.Basis)
					for each MemoAssetTransactionRel
						if (Asset.AssetProcess.ReAdd)
							if (each.AssetAccountType.DepreciationExpense)
								YearToDateDepreciation	+= each.TransactionAmount
								if (!AdjustPriorYearHistoryTransactions.NoPriorYearAdjustment)
									LifeToDateDepreciation	+= each.TransactionAmount
						invoke Release each
							invoked.PrmAssetBatchUpdateResult		= PrmAssetBatchUpdateResult
				invoke Delete MemoAssetTransactionRel

				if (FundAccounting)
					for each UnreleasedAssetBookTransactionsRel
						if (each.FundAccountType)
							LocalCompany		= each.Company
							invoke CreateFundTransactions each
								invoked.PrmTransactionDate	 			= each.TransactionDate
								if (Asset.AssetProcess.Adjustment)
									if (UnreleasedAssetAdjustmentRel.NewAssetItemsAdded)
										invoked.AdjustmentItemsAdded 	= UnreleasedAssetAdjustmentRel.NumberOfItemsAdded
										invoked.AdjustmentAmount 		= (UnreleasedAssetBookAdjustmentRel.ToBasis - UnreleasedAssetBookAdjustmentRel.Basis)
								else
									LocalAsset = first Asset.ToAssetTransferRel.Asset
									if (UnreleasedAssetTransferRel exists)
										invoked.TransferFromAsset = Asset
									else
										if (Asset.ToAssetTransferRel exists)
											invoked.TransferFromAsset = first Asset.ToAssetTransferRel.Asset

				for each UnreleasedAssetBookTransactionsRel
					if (Asset.AssetProcess.ReAdd)
						if (each.AssetAccountType.DepreciationExpense)
							YearToDateDepreciation		+= each.TransactionAmount
							if (!UnreleasedAssetReinstatementRel.DisposalMethod.Purged)
								LifeToDateDepreciation	+= each.TransactionAmount
						else
						if (each.AssetAccountType.AccumulatedDepreciation)
							if (UnreleasedAssetReinstatementRel.DisposalMethod.Purged)
								LifeToDateDepreciation	= each.TransactionAmount * -1
					invoke Release each
						invoked.PrmAssetBatchUpdateResult		= PrmAssetBatchUpdateResult
				if (Asset.AssetProcess.Transfer)
					if (FundAccounting)
						for each FullTransferUnreleasedAssetBookTransactionsRel
							LocalTransactionAmount 	= each.TransactionAmount
							LocalAsset				= each.Asset
							LocalAssetProcess		= each.AssetProcess
							LocalTransactionStatus	= each.TransactionStatus
							LocalAssetAccountType	= each.AssetAccountType
							LocalReference			= each.Reference



							if (each.FundAccountType)
								invoke CreateFundTransactions each
									invoked.PrmTransactionDate	 	= each.TransactionDate


							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= PrmAssetBatchUpdateResult
					else


						for each FullTransferUnreleasedAssetBookTransactionsRel
							LocalTransactionAmount 	= each.TransactionAmount
							LocalAsset				= each.Asset
							LocalAssetProcess		= each.AssetProcess
							LocalTransactionStatus	= each.TransactionStatus
							LocalAssetAccountType	= each.AssetAccountType
							LocalReference			= each.Reference

							invoke Release each
								invoked.PrmAssetBatchUpdateResult	= PrmAssetBatchUpdateResult

				if (PrmPriorHistory)
					if (IsPostingBook)
						invoke CreateHistory first AssetTransactionsRel
							invoked.PrmJournalizeGroup = PrmJournalizeGroup
							invoked.PrmAssetBatchUpdateResult	= PrmAssetBatchUpdateResult
					else
						invoke CreateHistory first AssetBookTransactionsRel
							invoked.PrmAssetBatchUpdateResult	= PrmAssetBatchUpdateResult


			Exit Rules
				initialize CreditBalance
				initialize DebitBalance
				initialize LastExpenseFund
				initialize LastDepreciationFund
				initialize IncrementalExpense
				initialize IncrementalDepreciation

		UpdateSummaryGroup is an Instance Action
			restricted
			Parameters
				AssetSummaryGroupParameter is like AssetSummaryGroup
					default label is "AssetSummaryGroup"

			Action Rules
				AssetSummaryGroup = AssetSummaryGroupParameter

		Purge is a Purge Action
			bypass relational integrity rules
			restricted
		
		CalculateDepreciation is an Instance Action
			restricted
			Action Rules
				include ComputeDepreciation

		AssetBookPurge is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmAsset								is like Asset
				PrmBook									is like Book
				PrmPurgeOption					is Numeric 1
					default label is "ActionOption"
					States
						PurgeRecords 	value is 1
						ReportOnly		value is 2
		        PrmCompany                 				is an AssetCompany

			Parameter Rules
				PrmFinanceEnterpriseGroup
					LocalFinanceEnterpriseGroup 		= PrmFinanceEnterpriseGroup
				PrmBook
					LocalBook 							= PrmBook
				PrmAsset
					LocalAsset 							= PrmAsset
			Local Fields
				LocalCounter							is Numeric 10
			Instance Selection
				include deleted records
				where (FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
				and    Asset.Company							= PrmCompany
				and	   Book										= PrmBook
				and   (PrmAsset not entered
				or 	   Asset									= PrmAsset))


			Action Rules
				Set Rules
					Exit Rules

				Instance Rules

					if(PrmPurgeOption.PurgeRecords)
						invoke Purge

		PopulateAdjustPriorYearHistoryTransactions is a Set Action
			restricted
			Instance Selection
				where (IncludeAdjustmentPriorYearHistory)
			Action Rules
				Instance Rules
					AdjustPriorYearHistoryTransactions = AdjustPriorYearHistoryTransactions.YesWithTransactions
					IncludeAdjustmentPriorYearHistory  = false

		RefreshData is an Import Action
			Local Fields
				RepSet is a ReplicationSet
			Action Rules
				RepSet = "FSM_COLUMNAR_AM_ST"

				constraint (RepSet.ReplicationIsValid)
					"A\M_ReplicationIsCurrentlyReplicatingOrNotValidAtThisTime"
				invoke Replicate RepSet

		DepreciationCalculation is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmAsset					is a Asset
					context of PrmFinanceEnterpriseGroup
				PrmBook						is a Book
					context of PrmFinanceEnterpriseGroup
				PrmBookGroup				is a BookGroup
					context of PrmFinanceEnterpriseGroup
				PrmCompany					is an AssetCompany
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
				PrmClassification			is AlphaUpper size 1
					States
						All           value is "A"
						Purchased     value is "P"
						FinanceLeased value is "C"
				PrmCompute					is AlphaUpper size 1
					States
						SinceLastRun             value is "S"
						AllAssets                value is "A"
						ListingOnlyNoCalculation value is "L"
							default label is "Listing Only - No Calculation"
				PrmSimulated				is AlphaUpper size 1
					States
						No   value is "N"
						Yes  value is "Y"
						Only value is "O"
				PrmLeaseOption				is AlphaUpper size 1
				    States
						No  value is "N"
						Yes value is "Y"
				PrmPropOption				is AlphaUpper size 1
					States
						No  value is "N"
						Yes value is "Y"
				PrmLocOption				is AlphaUpper size 1
					States
						No  value is "N"
						Yes value is "Y"
				PrmDivOption				is AlphaUpper size 1
					States
						No  value is "N"
						Yes value is "Y"
				PrmTypeOption				is AlphaUpper size 1
					States
						No  value is "N"
						Yes value is "Y"
				PrmAstgrpOption				is AlphaUpper size 1
					States
						No  value is "N"
						Yes value is "Y"
				PrmAssetOption				is AlphaUpper size 1
					States
						No  value is "N"
						Yes value is "Y"
				PrmDepreciationCalculationResult	is a AssetBatchUpdateResult
					context of PrmFinanceEnterpriseGroup
		        PrmThread					is Numeric 3
		        PrmQueue					is Numeric 3

			Parameter Rules
				PrmFinanceEnterpriseGroup
					if (PrmFinanceEnterpriseGroup entered)
						LocalFinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				PrmCompanyGroup
					LocalGeneralLedgerCompanyGroup 	= PrmCompanyGroup
				PrmBookGroup
					if (PrmBookGroup entered)
						LocalBookGroup	= PrmBookGroup

			Local Fields
				LocalCurrentPeriodDepreciation 		is an InternationalAmount
				LocalDepreciationBonus				is Decimal size 26.10
				LocalMethodTableYear				is Decimal size 2
				LocalDeprCP							is Decimal size 26.10
				LocalContinue						is Boolean
				LocalCurrentPeriod					is Numeric size 2
				I1									is Decimal size 2
				I2									is Numeric size 2
				LocalNbrCalPd						is Numeric size 2
				LocalMethodSwitched					is Alpha 1
				LocalDepreciationLimit				is an InternationalAmount 

			Instance Selection
				where  ((FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup)

				and	(PrmBook not entered or Book = PrmBook or Book = PrmBook.ImpairmentBook)				
				and (PrmCompany not entered or ((Company = PrmCompany) or (Asset.Company = PrmCompany)))
				and (PrmCompanyGroup not entered or (GeneralLedgerCompanyGroupMemberRel exists or CompanyGroupRel exists))
        		and (PrmBookGroup not entered or BookGroupBookRel exists or BookGroupImpairmentBookRel exists)
				and Active
				and !Disposed
				and BookRel.Active
				and BookRel.DepreciationType.AssetLevel
				and AssetRel.Status.Released
				and AssetRel.AssetCategory.Depreciable
				and !AssetRel.Status.Disposed
				and ((InServiceDate <= AssetBookCompanyCurrentBookCalendarRel.YearEndDate) or (InServiceDate <= CurrentBookCalendarRel.YearEndDate))
				and ((InServiceDate <= AssetBookCompanyCurrentBookCalendarRel.CurrentPeriodDate) or (InServiceDate <= CurrentBookCalendarRel.CurrentPeriodDate))
				and (PrmClassification.All or (PrmClassification.Purchased and AssetRel.Classification.Purchased) or (PrmClassification.FinanceLeased and AssetRel.Classification.Finance))
				and (((PrmSimulated.No or PrmSimulated not entered) and !AssetRel.Simulated) or PrmSimulated.Yes or (PrmSimulated.Only and AssetRel.Simulated))
				and ((PrmCompute.SinceLastRun and !CurrentPeriodDepreciationCalculated and !FirstAndLastYear.CompletelyDepreciated) or PrmCompute.AllAssets or PrmCompute.ListingOnlyNoCalculation)
				and (PrmQueue not entered
				or  (PrmQueue entered
				and (PrmQueue <=1
				or	Asset % PrmQueue = PrmThread)))
				)

			Sort Order is Set2

			Rule Blocks
				CreatePUH
					invoke Create PersonalUseHistory
						invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
						invoked.Asset = Asset
						invoked.Book = Book
						invoked.PersonalUseHistory.YearEndDate = LocalYearEndDate
						invoked.PersonalUseCode = PersonalUseCode
						invoked.BusinessPercent = BusinessPercent
						invoked.YearlyDepreciationAllowed = AnnualDepreciation.PUAnnualDepDetail
						if (PersonalUseCodeRel exists)
							if (last PersonalUseCodeRel.AllowAnnualDepreciationLimit)
								LocalDepreciationLimit = last PersonalUseCodeRel.DepreciationLimitArray.DepreciationLimitGroup[I1].DepreciationLimit
								invoked.DepreciationLimit = LocalDepreciationLimit
								if (LocalDeprCP > LocalDepreciationLimit)
									CurrentPeriodDepreciation = LocalDepreciationLimit
							else
								invoked.DepreciationLimit = 0
						else
							invoked.DepreciationLimit = 0

				UpdatePUH
					invoke Update PersonalUseHistoryYrEndDateRel
						invoked.PersonalUseCode = PersonalUseCode
						invoked.BusinessPercent = BusinessPercent
						invoked.YearlyDepreciationAllowed = AnnualDepreciation.PUAnnualDepDetail
						if (PersonalUseCodeRel exists)
							if (last PersonalUseCodeRel.AllowAnnualDepreciationLimit)
								LocalDepreciationLimit = last PersonalUseCodeRel.DepreciationLimitArray.DepreciationLimitGroup[I1].DepreciationLimit
								invoked.DepreciationLimit = LocalDepreciationLimit
								if (LocalDeprCP > LocalDepreciationLimit)
									CurrentPeriodDepreciation = LocalDepreciationLimit
							else
								invoked.DepreciationLimit = 0
						else
							invoked.DepreciationLimit = 0
			Action Rules
				Empty Set Rules

				Set Rules
					Entrance Rules

					Exit Rules



				Instance Rules
					LocalSkip 						= false
					LocalContinue					= true
					DepreciationBatchUpdateResult	= PrmDepreciationCalculationResult
					if (Company entered)
						LocalYearBeginDate			= CompanyBookCalendarRel.YearBeginDate
						LocalYearEndDate			= CompanyBookCalendarRel.YearEndDate
					else
						LocalYearBeginDate			= BookCalendarRel.YearBeginDate
						LocalYearEndDate			= BookCalendarRel.YearEndDate

					if (FirstAndLastYear = "C"
					and Method != "SLBZERO"
					or (LifeRemaining <= 0 and PersonalUseCodeRel exists and !(last PersonalUseCodeRel.AllowPostRecoveryDeduction)))
						initialize CurrentPeriodPortionOfLife
						initialize CurrentPeriodDepreciation
						initialize CurrentPeriodDepreciationAllowed
						LocalSkip = true

					if (!LocalSkip)
						if (FirstAndLastYear.CompletelyDepreciated
						and Method = "SLBZERO")
							LocalCurrentPeriodDepreciation = Basis / Life

						AnnualDepreciation.InservicePeriod = 0
						I2	= 1
						while (I2 <= 55)
							if (AnnualDepreciation.InservicePeriod = 0
							and InServiceDate <= CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I2])
								AnnualDepreciation.InservicePeriod = I2
							if (CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[I2] entered)
								LocalNbrCalPd	= I2
							I2 += 1
						if (Company not entered)
							LocalNumberOfPeriodCloseRuns				= CurrentBookCalendarRel.NumberOfPeriodCloseRuns
							LocalDepreciationPeriodsPerYear				= CurrentBookCalendarRel.DepreciationPeriodsPerYear
						else
							LocalNumberOfPeriodCloseRuns				= AssetBookCompanyCurrentBookCalendarRel.NumberOfPeriodCloseRuns
							LocalDepreciationPeriodsPerYear				= AssetBookCompanyCurrentBookCalendarRel.DepreciationPeriodsPerYear

						AnnualDepreciation.LocalAssetBook							= AssetBook
						AnnualDepreciation.NumberOfPeriodCloseRuns					= LocalNumberOfPeriodCloseRuns
						AnnualDepreciation.LocalDepreciationPeriodsPerYear			= LocalDepreciationPeriodsPerYear

						AnnualDepreciation.InTaxCreditTable 		= AssetTaxCreditTable
						AnnualDepreciation.InBasis					= Basis
						AnnualDepreciation.Convention				= Convention
						AnnualDepreciation.InServiceDate			= InServiceDate
						AnnualDepreciation.InDepreciationStartDate	= DepreciationStartDate
						AnnualDepreciation.InBook					= Book
						AnnualDepreciation.InLife					= Life
						AnnualDepreciation.InFirstLastFlag			= FirstAndLastYear
						AnnualDepreciation.InLifeRemaining			= LifeRemaining
						AnnualDepreciation.InPersonalUseCode		= PersonalUseCode
						AnnualDepreciation.InMethod					= Method
						AnnualDepreciation.LocalDeprCP				= CurrentPeriodDepreciation
						AnnualDepreciation.LocalDeprCPAllow			= CurrentPeriodDepreciationAllowed
						AnnualDepreciation.InLTDDepr				= LifeToDateDepreciation
						AnnualDepreciation.LocalDeprLTDAllow		= LifeToDateDepreciationAllowed
						AnnualDepreciation.InYTDDepr				= YearToDateDepreciation
						AnnualDepreciation.LocalDeprYTDAllow		= YearToDateDepreciationAllowed
						AnnualDepreciation.LocalLifeCP				= CurrentPeriodPortionOfLife
						AnnualDepreciation.LocalNbrCalPd			= LocalNbrCalPd
						AnnualDepreciation.LocalInactYear			= YearToDateInactiveMonths
						AnnualDepreciation.LocalMethodTableYear		= YearPlacedInService
						AnnualDepreciation.InAsset					= Asset
						AnnualDepreciation.LocalMethodSW			= Book.MethodSwitch
						if (Company not entered)
							AnnualDepreciation.InCompany			= Asset.Company
							AnnualDepreciation.InYearBeginDate		= BookYearBeginDate
							AnnualDepreciation.InYearEndDate		= BookYearEndDate
							AnnualDepreciation.InPrevYearEndDate	= BookYearBeginDate - 1 day
						else
							AnnualDepreciation.InCompany			= Company
							AnnualDepreciation.InYearBeginDate		= AssetBookCompanyBookYearBeginDate
							AnnualDepreciation.InYearEndDate		= AssetBookCompanyBookYearEndDate
							AnnualDepreciation.InPrevYearEndDate	= AssetBookCompanyBookYearBeginDate - 1 day

						if (DepreciationMethodSwitched)
							LocalMethodSwitched						= "Y"
						else
							LocalMethodSwitched						= "N"
						if (Method != "SLBZERO")
							initialize LocalCurrentPeriodDepreciation
							LocalDeprSave								= AnnualDepreciation.CalculateBookDepreciation
							LocalDeprCP									= AnnualDepreciation.LocalDeprCP

						if (Method = "SLBZERO")
							if (!FirstAndLastYear.CompletelyDepreciated)
								LocalDeprSave							= AnnualDepreciation.CalculateBookDepreciation
								LocalDeprCP								= AnnualDepreciation.LocalDeprCP
							else
								LocalDeprCP								= LocalCurrentPeriodDepreciation
						LocalCurrentPeriodDepreciation 	= LocalDeprCP
						LocalMethodSwitched				= AnnualDepreciation.LocalMethodSwitched
						if (FirstAndLastYear.First
						and (Method	= "200DB30%"
						or Method		= "150DB30%"
						or Method		= "SL30%"
						or Method		= "100%BONUS"
						or Method		= "200DB50%"
						or Method		= "150DB50%"
						or Method		= "SL50%"
						or Method		= "200DB20%"
						or Method		= "150DB20%"
						or Method		= "SL20%"
						or Method		= "SL60%"
						or Method		= "200DB60%"
						or Method		= "150DB60%"
						or Method		= "SL75%"
						or Method		= "200DB75%"
						or Method		= "150DB75%"
						or Method		= "SL40%"
						or Method		= "200DB40%"
						or Method		= "150DB40%"
						or Method		= "SL80%"
						or Method		= "200DB80%"
						or Method		= "150DB80%")
						and LifeToDateDepreciation = 0)
							LocalDepreciationBonus			= AnnualDepreciation.LocalDeprBonus
							LocalDeprCP 				   += LocalDepreciationBonus
						else
							initialize LocalDepreciationBonus
							if (AnnualDepreciation.LocalAnnualDepreciation = 0
							and Method		= "100%BONUS"
							and AnnualDepreciation.LocalDeprBonus entered)
								LocalDeprCP = AnnualDepreciation.LocalDeprBonus - LifeToDateDepreciation
								LocalMethodSwitched = "N"
						if (PersonalUseCode entered 
						and YearToDateDepreciation >= last PersonalUseCodeRel.DepreciationLimitArray.DepreciationLimitGroup[AnnualDepreciation.LocalMethodTableYear].DepreciationLimit)
							initialize LocalDeprCP
							LocalContinue	= false
						if (LocalContinue)
							if (PersonalUseCode entered	
							and YearToDateDepreciation != 0)
								LocalDeprCP += YearToDateDepreciation
								if (LocalDeprCP > last PersonalUseCodeRel.DepreciationLimitArray.DepreciationLimitGroup[AnnualDepreciation.LocalMethodTableYear].DepreciationLimit)
									LocalDeprCP = last PersonalUseCodeRel.DepreciationLimitArray.DepreciationLimitGroup[AnnualDepreciation.LocalMethodTableYear].DepreciationLimit - YearToDateDepreciation
								else
									LocalDeprCP -= YearToDateDepreciation
							if (PersonalUseCode entered
							and YearToDateDepreciation = 0
							and AnnualDepreciation.LocalNumberOfAdjDepreciationPeriodsPd != 1
							and AnnualDepreciation.LocalNumberOfDepreciationPeriodsPd != 1)
								LocalDeprCP	-= 	LocalDepreciationBonus
								LocalDeprCP *= AnnualDepreciation.LocalNumberOfAdjDepreciationPeriodsPd
								LocalDeprCP += LocalDepreciationBonus
							if (PersonalUseCode entered
							and YearToDateDepreciation = 0)
								if (LocalDeprCP > last PersonalUseCodeRel.DepreciationLimitArray.DepreciationLimitGroup[AnnualDepreciation.LocalMethodTableYear].DepreciationLimit)
									LocalDeprCP = last PersonalUseCodeRel.DepreciationLimitArray.DepreciationLimitGroup[AnnualDepreciation.LocalMethodTableYear].DepreciationLimit
									LocalContinue	= false
							if (LocalContinue)
								if (PersonalUseCode entered
								and YearToDateDepreciation = 0
								and AnnualDepreciation.LocalNumberOfAdjDepreciationPeriodsPd != 1)
									LocalDeprCP = LocalCurrentPeriodDepreciation
									LocalDeprCP += LocalDepreciationBonus
						if ((Method		= "200DB"
						or Method		= "175DB"
						or Method		= "150DB"
						or Method		= "125DB"
						or Method		= "SL"
						or Method		= "SYD"
						or Method		= "200DB30%"
						or Method		= "150DB30%"
						or Method		= "SL30%"
						or Method		= "200DB50%"
						or Method		= "150DB50%"
						or Method		= "SL50%"
						or Method		= "200DB20%"
						or Method		= "150DB20%"
						or Method		= "SL20%"
						or Method		= "SL60%"
						or Method		= "200DB60%"
						or Method		= "150DB60%"
						or Method		= "SL75%"
						or Method		= "200DB75%"
						or Method		= "150DB75%"
						or Method		= "SL60%"
						or Method		= "SL40%"
						or Method		= "200DB40%"
						or Method		= "150DB40%"
						or Method		= "SL80%"
						or Method		= "200DB80%"
						or Method		= "150DB80%")
						and AnnualDepreciation.LocalLife <= 12
						and (AnnualDepreciation.LocalLifeRemaining - AnnualDepreciation.LocalLifeCP) = 0)
							LocalDeprCP = Basis - SalvageValue - LifeToDateDepreciation
						round LocalDeprCP to nearest DepreciationDerivedRoundTo
						CurrentPeriodDepreciation = LocalDeprCP
						DepreciationBonus					= LocalDepreciationBonus
						
						if (PrmCompute != "L")
							round AnnualDepreciation.LocalDeprCPAllow to nearest DepreciationDerivedRoundTo
							CurrentPeriodDepreciationAllowed 	= AnnualDepreciation.LocalDeprCPAllow

							CurrentPeriodPortionOfLife 			= AnnualDepreciation.LocalLifeCP

							if (FirstAndLastYear = ""
							and InServiceDate >= LocalYearBeginDate
							and InServiceDate <= LocalYearEndDate)
								FirstAndLastYear = "F"
							I2 = LocalNumberOfPeriodCloseRuns
							if (DepreciationEndDate not entered)
								LocalLifeRemaining 	= LifeRemaining
								LocalTotalLife 		= LifeRemaining - LocalLifeRemaining
								if (LocalTotalLife < 0)
									LocalLifeRemaining -= 1
									if  (LocalNumberOfPeriodCloseRuns entered)
										DepreciationEndDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I2]
									else
										if (InServiceDate < LocalYearBeginDate)
											DepreciationEndDate = LocalYearBeginDate - 1 day
										else
											DepreciationEndDate = InServiceDate
									DepreciationEndDate = DepreciationEndDate + LocalLifeRemaining as months
									LocalDepreciationDate = DepreciationEndDate + 1 month
									LocalDaysRemaining = LocalDepreciationDate - DepreciationEndDate
									LocalDaysRemaining = LocalDaysRemaining * (LocalTotalLife + 1)
									DepreciationEndDate = DepreciationEndDate + LocalDaysRemaining as days
								else
									if  (LocalNumberOfPeriodCloseRuns entered)
										DepreciationEndDate = CurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I2]
									else
										if (InServiceDate < LocalYearBeginDate)
											DepreciationEndDate = LocalYearBeginDate - 1 day
										else
											DepreciationEndDate = InServiceDate
									DepreciationEndDate = DepreciationEndDate + LocalLifeRemaining as months
									LocalDepreciationDate = DepreciationEndDate + 1 month
									LocalDaysRemaining = LocalDepreciationDate - DepreciationEndDate
									LocalDaysRemaining = LocalDaysRemaining * (LocalTotalLife)
									DepreciationEndDate = DepreciationEndDate + LocalDaysRemaining as days
							if (PersonalUseCode entered
							and FirstAndLastYear != "P"
							and AnnualDepreciation.LocalMethodTableYear != 0)
								Life = AnnualDepreciation.LocalLife
								LifeRemaining = AnnualDepreciation.LocalLifeRemaining
								LocalCurrentPeriod = LocalNumberOfPeriodCloseRuns + 1
								if (LocalDepreciationPeriodsPerYear = LocalCurrentPeriod
								or (AnnualDepreciation.LocalLifeRemaining - AnnualDepreciation.LocalLifeCP) = 0)
									I1 = AnnualDepreciation.LocalMethodTableYear
									if (PersonalUseHistoryYrEndDateRel exists)
										include UpdatePUH
									else
										include CreatePUH
						else
							DepreciationMethodSwitched 			= LocalMethodSwitched

					if (PrmCompute != "L")
						CurrentPeriodDepreciationCalculated = true
						DepreciationMethodSwitched 			= LocalMethodSwitched


		UpdateAssetBookCompany is a Set Action
			restricted
			Parameters
				PrmThread is Numeric size 2
				PrmQueue  is Numeric size 2
			Parameter Rules

			Instance Selection
				where ((PrmQueue             <=1
				or  Asset % PrmQueue    = PrmThread)
				and	Company not entered)
			Action Rules
				Instance Rules
					Company  = Asset.Company

		CompanyBookUpdate is an Instance Action
			restricted
			Parameters
				PrmThread   is Numeric size 2
				PrmQueue    is Numeric size 2
			Parameter Rules
				PrmThread
					initialize PrmThread
				PrmQueue
                    default to config.AssetBookCompanyUpdateThreads
					default to 4

			Action Rules
				while (PrmThread < PrmQueue)
					invoke  UpdateAssetBookCompany
						invoked.PrmThread   = PrmThread
						invoked.PrmQueue    = PrmQueue
					PrmThread +=1
FileCreationLogic.AssetBook is a BusinessClass

	Persistent Fields
	
	Local Fields

		LocalFileCreationSetup		is like FileCreationSetup
					
	Relations

		FileCreationRecordNotProcessedRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 1
				related.Key1					= LocalAsset

		FileCreationRecordErrorRel
			one-to-many relation to FileCreationRecord
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup 	= LocalFinanceEnterpriseGroup
				related.FileCreationSetup		= LocalFileCreationSetup
				related.Status					= 2
				related.Key1					= LocalAsset
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"AssetBook_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"

			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
				FileCreationSetupPrm	is a FileCreationSetup
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3

			Local Fields
				InAssetGroup					is Boolean
				LocalAssetGroupSelection		is a Asset group in subject FileCreationAsset

			Instance Selection
				where (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      Asset % PrmNumberOfRunGroups = PrmRunGroup)
				and	   update stamp > BeginTimeStamp
				and	   update stamp <= EndTimeStamp)

			Action Rules
				Instance Rules
					LocalFinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
					LocalFileCreationSetup	= FileCreationSetupPrm
					LocalAsset		= Asset
					if (FileCreationRecordNotProcessedRel not exist
					and	FileCreationRecordErrorRel not exist)	
						LocalAssetGroupSelection = FileCreationSetupPrm.EligibilityGroup
						if (LocalAssetGroupSelection entered)
							InAssetGroup = false
							if (Asset within LocalAssetGroupSelection)
								InAssetGroup = true

						if (LocalAssetGroupSelection not entered
						or	InAssetGroup)											
							invoke Create FileCreationRecord
								invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
								invoked.FileCreationSetup	= FileCreationSetupPrm
								invoked.Key1				= Asset
								invoked.SystemTimeStamp		= EndTimeStamp
								invoked.EffectiveDate		= system current corporate date
								invoked.Status				= 1
