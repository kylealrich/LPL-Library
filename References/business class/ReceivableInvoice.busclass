ReceivableInvoice is a BusinessClass
	owned by ar
	prefix is ARH
	classic name is AROIHDR

	Ontology
		symbolic key is ReceivableInvoice
			classic set name is ARHSET1
			classic name is INVOICE
			classic name for ReceivableInvoiceType is TRANS-TYPE

	Patterns
		implements StaticJava
		disable AuditIndex
		implements BODId
		implements InlineUserFields
			size is 1000
		implements Archivable 

	Persistent Fields


		Status											is Numeric size 1
			States
				Unreleased	value is 0
				Released	value is 1
		Customer
		BatchNumber
			classic name is BATCH-NBR
		ReceivableProcessLevel
			classic name is PROCESS-LEVEL
		CurrencyTable									
		TransactionDate									is an ExchangeDate
			classic name is TRANS-DATE
			default label is "InvoiceDate"
		GeneralLedgerDate								is a PostingDate
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		OriginalCurrency								is a FromCurrency
			classic name is ORIG-CURRENCY
			default label is "TransactionCurrency"	
		CurrencyDecimalsNumber							is an OrigNd
			classic name is ORIG-ND
		InvoiceAmount				 					is a FinanceCurrencyAmountGroup
			default label is "InvoiceAmount"
		TransactionAmount								is a CurrencyAmount			
			restricted																
		BaseAmount										is an InternationalAmount	
			restricted																
		CustomerPurchaseOrder
			classic name is CUST-PO-NBR
		AutomaticCashApplication						is Boolean
			classic name is AUTO-APP-FL
		Description
			classic name is DESC
		TransactionUserField1							is a TransUser1
			classic name is TRANS-USER1
		TransactionUserField2							is a S3Agent
			classic name is TRANS-USER2
		TransactionUserField3							is Date
			classic name is TRANS-USER3
		TransactionUserField4							is a TransUser4
			classic name is TRANS-USER4
		TransactionUserField5							is an InternationalAmount
			classic name is TRANS-USER5
		ReceivableGeneralLedgerCode
			classic name is AR-CODE
			default label is "ReceivableGlobalLedgerCode"
		SalesRepresentative
			classic name is SALESMAN
		CurrencyRate									is an OrigRate				
			restricted																
		CurrencyMultiplicationOrDivision
			sql name is CMultiplicationOrDivision
			classic name is CURR-MUDV
		CurrencyRateToCustomerGroupCurrency
			sql name is CRateToCustomerGroupCurrency
			classic name is GROUP-RATE
		CustomerGroupCurrencyMultiplicationOrDivision
			sql name is CGCMultiplicationOrDivision
			classic name is GROUP-MUDV
		BalancingDistributionAmountCompanyCurrency		is an InternationalAmount
			sql name is BDAmountCompanyCurrency
			classic name is BASE-DETAIL
			precision is Company.Currency.NumberOfDecimals
		BankTransactionCode
			classic name is BANK-INST-CODE
		BankTransactionType								is a BankInstType
			classic name is BANK-INST-TYPE
		LastReceivableInvoiceDetail						is a Sequence
			disable Auditing
			classic name is PAYMENT-SEQ
		LastDistributionSequence						is a DistSeq
			disable Auditing
			classic name is DIST-SEQ
		Origin											is AlphaUpper size 1
			classic name is ORIG-CODE
			States
				ManualInvoice				value is "B"
					default label is "Manual invoice"
				Chargeback					value is "C"
				FinanceLatePaymentCharge	value is "F"
					default label is "Finance late payment charge"
				GroupedMemo					value is "G"
					default label is "Grouped memo"
				Converted					value is "L"
				ManualMemo					value is "M"
					default label is "Manual memo"
				External					value is "O"
					default label is "Order processing"
				ReturnedPayment				value is "R"
					default label is "Returned payment"
				ClosingCreatedChargeback	value is "E"
					default label is "Closing created chargeback"
				PaymentCreatedCreditMemo	value is "P"
					default label is "Payment created credit memo"
				Obligation					value is "X"
				Projects					value is "J"
				IntercompanyBilling			value is "N"
				Sublease					value is "S"
				AccountsPayable				value is "A"
				ZeroAmountInvoice			value is "Z"
				ProformaInvoice				value is "I"
					default label is "Proforma created tax invoice"
				OverApplied 				value is "D"
		CustomerBillTo
			classic name is BILL-TO
		RevalueCurrencyTransactions						is Boolean
			classic name is REVALUE-FL
		TaxExempt										is Boolean
			classic name is TAX-EXEMPT-CD
			default label is "PreventTaxCodeDefaulting"
		ChargebackPrinted								is AlphaUpper size 1
			classic name is NOTICE-FL
		ChargebackReason								is a CbReason
			classic name is CB-REASON
		ReceivableChargebackCompany




		ChargebackSequence								is Numeric size 4
			classic name is CB-SEQ-NBR
		CancelFlag
		CreditDebitMemoReason
			classic name is REASON-CODE
		JournalBook
			classic name is JRNL-BOOK-NBR
			restricted
		TaxInterface									is AlphaUpper size 1
			classic name is TAX-FL
			States
				No	value is "N"
				Yes	value is "Y"
		LatePaymentCharge								is Boolean
			classic name is LATE-CH-FL
		LatePaymentChargeTransactionNumber				is AlphaRight size 10
			sql name is LPChargeTransactionNumber
			classic name is LATE-CH-TR-NBR
		LatePaymentChargeAmountTransactionCurrency		is an InternationalAmount
			sql name is LPCAmountTransactionCurrency
			classic name is LATE-CH-OR-AMT
				precision is OriginalCurrency.NumberOfDecimals
		LatePaymentChargeAmountCompanyCurrency			is an InternationalAmount
			sql name is LPChargeAmountCompanyCurrency
			classic name is LATE-CH-TR-AMT
		AlternateReceivableInvoiceType					is AlphaUpper size 1
			classic name is ALT-TYPE
			States
				CreditMemo	value is "C"
					default label is "Credit memo"
				DebitMemo	value is "D"
					default label is "Debit memo"
				Invoice		value is "I"
		SummarizeDetail									is Boolean
			classic name is SUM-LINE
		System											is a GeneralLedgerSystemCode
		DunningLetterIndicator							is Boolean
			classic name is DUN-LTR-IND
		OverrideDunningProcess							is AlphaUpper size 1
			classic name is OVERIDE-DUNPRC
			States
				ProcessNormally			value is blank
				BypassDunningEntirely	value is "1"
				DoNotSendForCollection	value is "2"
		DunningProcessCode
			classic name is DUN-PROCESS-CD
		LastDunningLetter
			classic name is LST-DUNLTR-STM
		LastDunningLetterDate							is Date
			classic name is LAST-LTR-DATE
		LastDunningLetterTextCode						is like DunningTextCode
			classic name is LST-LTRTEXT-CD
		SentForDunningCollection						is a SentForColl
			classic name is SENT-FOR-COLL
		AssessDunningFee								is an AssessDunFee
			classic name is ASSESS-DUN-FEE
		ReceivableInvoiceObjectID						is an InvoiceObjID
			classic name is INV-OBJ-ID
		ProjectContractCustomer							is an AcCustomerId
			classic name is AC-CUSTOMER-ID
		TaxInterfaced									is AlphaUpper size 1
			classic name is TAX-FLAG
		ShipTerm
			classic name is FOB-CODE
		IntrastatPortCode
			classic name is PORT-CD
			context of OriginIntrastatCountry
		IntrastatNatureOfTransactionCode
			sql name is INatureOfTransactionCode
			classic name is NOTC
		IntrastatStatisticalProcedure
			classic name is STAT-PROC
		OriginIntrastatCountry							is a Country
			classic name is ORIGIN-COUNTRY
		DestinationIntrastatCountry						is a Country
			classic name is DEST-COUNTRY
		OriginIntrastatRegion							is a Region
			classic name is ORIGIN-REGION
			context of OriginIntrastatCountry
		DestinationIntrastatRegion						is a Region
			classic name is DEST-REGION
			context of DestinationIntrastatCountry
		DropShipIndicator								is a DropShipInd
			classic name is DROP-SHIP-IND
		TransportMode

		ForeignEconomicRegulatoryCode
			classic name is FOR-ECON-CODE
		GlobalDocumentType
			classic name is GLBL-DOC-TYPE
		TaxAmount										is an InternationalAmount
			classic name is TAX-AMT
				precision is OriginalCurrency.NumberOfDecimals
		ReceivableCrossReference
			classic name for ReceivableCrossReference.Company is XREF-COMPANY
			classic name for ReceivableCrossReference.ReceivableInvoiceType is XREF-TYPE
			classic name for ReceivableCrossReference.ReceivableInvoice is XREF-NBR
			classic name for ReceivableCrossReference.Customer is XREF-CUSTOMER
			classic name for ReceivableCrossReference.ReceivableInvoiceDetail is XREF-PYMT-SEQ
			classic name for ReceivableCrossReference.InvoiceDueDate is XREF-DUE-DATE
		ReceivableDistributionCategory
		TermsCode
			classic name is TERMS-CD
		ProjectContract
		ProjectContractInvoice
			delete ignored
		ProjectFundingSource
		FinanceDimension2
		OriginatingInterfaceRun							is like ReceivablesInterfaceResult
		InterfaceInProcess								is Boolean
		InvoiceTypeCode
		CustomerInvoiceTypeCode

		PointOfTitleTransfer
		ReceivableInvoiceShipToGroup
		DistributionCleanupNeeded						is Boolean
		BackgroundProcessing							is Numeric size 1
			States
				TaxProcessing							value is 1























		ErrorMessage									is Alpha size 150
		InvoiceFinanceCodeBlock							is a FinanceCodeBlockFull
		InvoiceEntryTemplate 							is Numeric 1 
			States
				Standard          		value is 0
                Expanded          		value is 1
		ReceivableLockBox 
			default label is "RemitTo"
		RegimeCode
		VoucherReferenceNumber							is AlphaUpper 50
			default label is "VoucherReference"
			protected

		DueDate
		DiscountDate									is Date
		DiscountAmount									is an InternationalAmount
		DiscountPercent
		CustomerOrder
		ParallelReference								is AlphaUpper 100
		EWayBillNumber
		CertificationNumber							
		CertificationDate				is Date		
		FromEFTPayment									is Boolean

		IDMUniqueID								is a DocumentPID
			protected
		IDMJob									is like IDMJob
			protected
		IDMPrinter
		GenerateIDMDocument				is Boolean





	Rule Blocks
		UpdateDistributionsGLDate
			if (GeneralLedgerDate changed)
				invoke FastUpdate ReceivableGLDistributionProjectRel
					invoked.ReceivableGLDistribution.GeneralLedgerDate	= GeneralLedgerDate
					invoked.ReceivableGLDistribution.CreateDate		= current timestamp

		TriggerReceivableInvoiceBOD
			if(LocalMassBODTrigger)
				LocalTitle ="MassBOD:"+MassBODTitleDate+": EG:"+Company.CustomerBusinessGroup.FinanceEnterpriseGroup+" CO:"+Company+" INV:"+ReceivableInvoice+" RT:"+ReceivableInvoiceType
			else
				LocalTitle ="EG:"+Company.CustomerBusinessGroup.FinanceEnterpriseGroup+" CO:"+Company+" INV:"+ReceivableInvoice+" RT:"+ReceivableInvoiceType
			trigger "ReceivableInvoiceService" PA service
				resume on error
				title is "<LocalTitle>"
				Criteria
					Company.CustomerBusinessGroup.FinanceEnterpriseGroup
					Company
					Company.GeneralLedgerCompany.AccountingEntity
				Variables
					include persistent fields from	ReceivableInvoice
					include persistent fields from  Customer
					include persistent fields from	CustomerBillTo
					include persistent fields from Company.AccountingEntity
					include persistent fields from Company.CustomerBusinessGroup.FinanceEnterpriseGroup
					ActionCode
					LocalBODCurrentTimeStamp.OutputBODCurrentTimeStamp
						variable name is CurrentTimeStamp
					Company.CustomerBusinessGroup.FinanceEnterpriseGroup
						variable name is FinanceEnterpriseGroup
					Company
						variable name is LawsonCompany
					Company.GeneralLedgerCompany.AccountingEntity
						variable name is Accountingentity
					OpenReceivableInvoiceAmount
						variable name is OpenRInvoiceAmount

		EditCrossReferenceData
			if (ReceivableInvoiceCrossReferenceRelExists)
				ReceivableCrossReference.Customer = ReceivableInvoiceCrossReferenceRel.Customer
			if (ReceivableCrossReference.Company	entered
			or  ReceivableCrossReference.InvoiceDueDate entered)
				constraint (ReceivableCrossReference.ReceivableInvoiceType entered)
					"FieldIsRequiredForCrossReferencing"							
				constraint (ReceivableCrossReference.ReceivableInvoice entered)
					"FieldIsRequiredForCrossReferencing"							

			if (ReceivableCrossReference.ReceivableInvoice	entered
			and ReceivableCrossReference.Company entered
			and ReceivableCrossReference.Company != Company)
				constraint (CompanyCustomerRel.NationalAccountIndicator entered)
					"NationalAccountRelationshipDoesNotExist"						
				constraint (ReceivableCrossReference.Company.CustomerGroupField.CustomerGroup = Company.CustomerGroupField.CustomerGroup)
					"CompaniesMustHaveSameCustGroup"								

			if (ReceivableCrossReference.Company	not entered
			and ReceivableCrossReference.ReceivableInvoice	entered
			and ReceivableCrossReference.ReceivableInvoiceType entered
			and !FromReceivablePayment)
				ReceivableCrossReference.Company = Company

			if (AutomaticCashApplication
			and !ReceivableCrossReference.ReceivableInvoiceType.Invoice
			and !ReceivableCrossReference.ReceivableInvoiceType.DebitMemo)
				constraint (false)
					"CrossReferenceTypeMustBe_\IOr_\D;AutoApply_=_\Y"				

			if (ReceivableCrossReference.ReceivableInvoiceType.Invoice
			or  ReceivableCrossReference.ReceivableInvoiceType.DebitMemo
			or  ReceivableCrossReference.ReceivableInvoiceType.CreditMemo)
				constraint (ReceivableInvoiceCrossReferenceRelExists)
					"CrossReferenceTransactionDoesNotExistFor_\Company<ReceivableCrossReference.Company>_\Transaction_\Type_\<ReceivableCrossReference.ReceivableInvoiceType>_\Transaction_\<ReceivableCrossReference.ReceivableInvoice>"							
				if (ReceivableInvoiceCrossReferenceRelExists
				and (ReceivableInvoiceCrossReferenceRel.Customer != Customer
				or  ReceivableInvoiceCrossReferenceRel.Company  != Company))
					constraint (CompanyCustomerRel.NationalAccountIndicator entered)

						"Invoice<ReceivableInvoice>_\Company<Company>_\Customer<Customer>IsNotInA_\National_\Account"	
					constraint (ReceivableInvoiceCrossReferenceRel.CompanyCustomerRel.NationalAccountIndicator entered)	
						"Cross_\Reference_\Invoice<ReceivableCrossReference.ReceivableInvoice>_\Company<ReceivableCrossReference.Company>_\Customer<ReceivableCrossReference.Customer>IsNotInA_\National_\Account."	

					if (CompanyCustomerRel.NationalAccountIndicator entered)
						if (CompanyCustomerRel.NationalAccountIndicator.Parent)
							constraint (IsNationalAccountToChild)

								"Invoice<ReceivableInvoice>_\Company<Company>_\Customer<Customer>IsTiedToA_\National_\Account_\Parent.However,_\Cross_\Reference_\Invoice<ReceivableCrossReference.ReceivableInvoice>_\Company<ReceivableCrossReference.Company>_\Customer<ReceivableCrossReference.Customer>IsNotOneOfItsChildren."	
						if (CompanyCustomerRel.NationalAccountIndicator.Child
						and ReceivableInvoiceCrossReferenceRel.CompanyCustomerRel.NationalAccountIndicator.Child)	

							constraint (HasSameNationalAccountParent)	

								"Cross_\Reference_\Invoice<ReceivableCrossReference.ReceivableInvoice>_\Company<ReceivableInvoiceCrossReferenceRel.Company>_\Customer<ReceivableInvoiceCrossReferenceRel.Customer>And_\Invoice<ReceivableInvoice>_\Company<Company>_\Customer<Customer>AreBothTiedTo_\National_\Account_\Children,ButDoNotHaveTheSame_\National_\Account_\Parent."	

					if (ReceivableInvoiceCrossReferenceRel.CompanyCustomerRel.NationalAccountIndicator entered)	
						if (ReceivableInvoiceCrossReferenceRel.CompanyCustomerRel.NationalAccountIndicator.Parent)	
							constraint (NationalAccountCrossRefCompanyCustomerRelExists)	
								"Cross_\Reference_\Invoice<ReceivableCrossReference.ReceivableInvoice>_\Company<ReceivableInvoiceCrossReferenceRel.Company>_\Customer<ReceivableInvoiceCrossReferenceRel.Customer>IsTiedToA_\National_\Account_\Parent.However,_\Invoice<ReceivableInvoice>_\Company<Company>_\Customer<Customer>IsNotOneOfItsChildren."	

			if (ReceivableCrossReference.Company entered
			and	ReceivableCrossReference.Company != Company
			and Company.AccountingEntity != ReceivableCrossReference.Company.AccountingEntity
			and AutomaticCashApplication)
				constraint (InterEntityInvoiceToCrossRefRelationRel exists)
					"InterEntityRelationNotDefinedBetweenInvoiceCompany<Company>AndCrossReferenceCompany<ReceivableCrossReference.Company>"
				constraint (InterEntityCrossRefToInvoiceRelationRel exists)
					"InterEntityRelationNotDefinedBetweenCrossReferenceCompany<ReceivableCrossReference.Company>AndInvoiceCompany<Company>"

			if (IsReleased)
				if (old ReceivableCrossReference.ReceivableInvoiceType != "P")
					constraint (ReceivableCrossReference.ReceivableInvoiceType != "P")
						"CannotAssignCrossReferenceType,SystemAssigned"
				if (old ReceivableCrossReference.ReceivableInvoiceType = "P")
					constraint (ReceivableCrossReference.ReceivableInvoiceType = "P")
						"CannotChange;_\SytemAssigned_\Xref_\Information"			

				if (IsOpenReceivableInvoiceDetailRel)
					if (ReceivableCrossReference.Company changed
					or  ReceivableCrossReference.ReceivableInvoiceType changed
					or  ReceivableCrossReference.ReceivableInvoice changed)





						for each OpenReceivableInvoiceDetailRel
							invoke Update OpenReceivableInvoiceDetailRel
								invoked.ReceivableCrossReference.Company					= ReceivableCrossReference.Company
								invoked.ReceivableCrossReference.ReceivableInvoiceType	= ReceivableCrossReference.ReceivableInvoiceType
								invoked.ReceivableCrossReference.ReceivableInvoice		= ReceivableCrossReference.ReceivableInvoice





			if (ReceivableInvoiceType.MixedSignLines)
				constraint (ReceivableCrossReference.InvoiceDueDate not entered)
					"CannotSpecify_\Due_\DateForMixedLineTransaction"				

			if (ReceivableInvoiceCrossReferenceRelExists)
				constraint (ReceivableInvoiceCrossReferenceRel.OriginalCurrency = OriginalCurrency)
					"CrossReferenceCurrencyCodesMustBeTheSame"						

			if (AutomaticCashApplication)
				if  (ReceivableInvoice.ReceivableInvoiceType.CreditMemo
				and (ReceivableCrossReference.ReceivableInvoiceType.Invoice
				or   ReceivableCrossReference.ReceivableInvoiceType.DebitMemo)
				and  ReceivableCrossReference.InvoiceDueDate entered)
					constraint (ReceivableInvoiceCrossReferenceWithDueDateRel exists)
						"NoReleasedInvoiceWithADueDateOf<ReceivableCrossReference.InvoiceDueDate>ExistsFor_\Company<ReceivableCrossReference.Company>_\Transaction_\Type_\<ReceivableCrossReference.ReceivableInvoiceType>_\Transaction_\<ReceivableCrossReference.ReceivableInvoice>"							
					constraint (first ReceivableInvoiceCrossReferenceWithDueDateRel.Status.OpenTransaction)
						"NoOpenInvoiceWithADueDateOf<ReceivableCrossReference.InvoiceDueDate>ExistsFor_\Company<ReceivableCrossReference.Company>_\Transaction_\Type_\<ReceivableCrossReference.ReceivableInvoiceType>_\Transaction_\<ReceivableCrossReference.ReceivableInvoice>"							

		CreateExitRules
			if (ReceivableInvoiceType.MixedSignLines)
				CreationCompleteMessage = AddCompleteLineItemsRequiredMessage



		EditTermsData


			initialize CalculateTerms
			if (TermsCode entered)
				CalculateTerms.TransactionDate = TransactionDate
				CalculateTerms.TransactionAmount = InvoiceAmount.CurrencyAmount
				if  (LocalLineItemAmount entered)
					CalculateTerms.TransactionAmount = LocalLineItemAmount
					initialize LocalLineItemAmount

				if (DueDate entered)
					CalculateTerms.OverrideDueDate			= DueDate
					CalculateTerms.OverrideDiscountRate		= DiscountPercent
					CalculateTerms.OverrideDiscountDate		= DiscountDate
					CalculateTerms.OverrideDiscountAmount	= DiscountAmount

				LocalTermsCalTrigger = CalculateTerms.TermsCalTrigger

				constraint (CalculateTerms.OutputErrorNumber not entered)
					"<CalculateTerms.OutputErrorMessage>"


		CreateDetailFromTermsArray

			LocalAmount	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
			if (InvoiceAmount.CurrencyAmount  < 0)
				LocalAmount = LocalAmount * -1

			invoke Create ReceivableInvoiceDetail
				fill in fields from this instance
				fill in user fields from this instance
				if (ReceivableInvoiceType = "I")
					invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "I"
				if (ReceivableInvoiceType = "D")
					invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
				if (ReceivableInvoiceType = "C")
					invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"
				if (ReceivableInvoiceType = "M")
					invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= AlternateReceivableInvoiceType
				invoked.ReceivableInvoiceDetail.Invoice					 		= ReceivableInvoice
				invoked.AlternateReceivableInvoiceType							= ReceivableInvoiceType
				invoked.Status													= 1
				invoked.CurrencyRate											= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				invoked.DueDate													= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DueDate
				invoked.InvoiceAmount.CurrencyAmount							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
				invoked.DiscountDate.DiscDate[1]								= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
				invoked.DiscountPercent.DiscPct[1]								= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
				invoked.DiscountDate.DiscDate[2]								= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountDate
				invoked.DiscountPercent.DiscPct[2]								= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent
				invoked.DiscountDate.DiscDate[3]								= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountDate
				invoked.DiscountPercent.DiscPct[3]								= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent

				if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount entered
				and (TermsCode.IsNetTerms
				or   TermsCode.IsProxTerms
				or   TermsCode.IsSplitTerms))
					invoked.DiscountAmount.OrigDiscAmt[1]						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
				else
					invoked.DiscountAmount.OrigDiscAmt[1]						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent * LocalAmount
				invoked.DiscountAmount.OrigDiscAmt[2]							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent * LocalAmount
				invoked.DiscountAmount.OrigDiscAmt[3]							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent * LocalAmount


				invoked.ReceivableInvoiceDetail.PaymentSeq						= LoopCounter
				if (Origin.PaymentCreatedCreditMemo)
					invoked.Project												= ReceivablePayment.Project
					invoked.ProjectContract										= ProjectContract
				invoked.TransientOperator										= ReceivableInvoiceBatchRel.TransientReceivableOperator	 

		CreateDetailFromLineItemTermsArray

			LocalAmount	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
			if (each.TransactionAmount  < 0)
				LocalAmount = LocalAmount * -1
			LocalThisReceivableInvoiceLineItem = each.ReceivableInvoiceLineItem  
			invoke Create ReceivableInvoiceDetail
				fill in fields from this instance
					except invoked.InvoiceFinanceCodeBlock
				fill in user fields from this instance 
				fill in user fields from ThisReceivableInvoiceLineItemRel

				invoked.ReceivableInvoiceDetail.Invoice				= ReceivableInvoice
				invoked.Company						 				= ReceivableInvoice.Company

				if (ReceivableInvoiceType != "M")
					invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceType
					invoked.AlternateReceivableInvoiceType						 = ReceivableInvoiceType
				else
				if (AlternateReceivableInvoiceType	 = "I"
				or  AlternateReceivableInvoiceType	 = "D")
					if (each.TransactionAmount  > 0)
						if (AlternateReceivableInvoiceType	 = "D")
							invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
						else
							invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "I"
					else
							invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"
					invoked.AlternateReceivableInvoiceType	 = "M"
				else
					if (each.TransactionAmount < 0)
						invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
					else
						invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"
					invoked.AlternateReceivableInvoiceType	 = "M"

				invoked.CurrencyRate					= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				invoked.Status						 	= 1
				if (each.Project entered)
					invoked.Project						= each.Project
				if (each.ProjectContract entered)
					invoked.ProjectContract				= each.ProjectContract
				if (each.FinanceDimension2	entered)
					invoked.FinanceDimension2			= each.FinanceDimension2
				if (each.InvoiceFinanceCodeBlock entered)
					invoked.InvoiceFinanceCodeBlock		= each.InvoiceFinanceCodeBlock
				else
				if (InvoiceFinanceCodeBlock entered)
					invoked.InvoiceFinanceCodeBlock		= InvoiceFinanceCodeBlock
				invoked.AssociatedLine					= each.AssociatedLine
				invoked.ItemReference				 	= each.ItemReference
				invoked.ItemUser1					 	= each.ItemUser1
				invoked.Sort1						 	= each.Sort1
				invoked.Sort2						 	= each.Sort2
				invoked.Sort3						 	= each.Sort3
				invoked.Sort4						 	= each.Sort4
				if (each.Description entered)
					invoked.Description				 	= each.Description
				if (each.TransactionUserField1 entered)
					invoked.TransactionUserField1	 	= each.TransactionUserField1
				else
					invoked.TransactionUserField1	 	= TransactionUserField1
				invoked.DueDate						 	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DueDate

				if (each.TransactionAmount  > 0)
					invoked.InvoiceAmount.CurrencyAmount  = CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
				else
					invoked.InvoiceAmount.CurrencyAmount  = CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment * -1

				invoked.DiscountDate.DiscDate[1]   		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
				invoked.DiscountPercent.DiscPct[1] 		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
				invoked.DiscountDate.DiscDate[2]   		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountDate
				invoked.DiscountPercent.DiscPct[2] 		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent
				invoked.DiscountDate.DiscDate[3]   		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountDate
				invoked.DiscountPercent.DiscPct[3] 		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent

				if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount entered
				and (TermsCode.IsNetTerms
				or   TermsCode.IsProxTerms
				or   TermsCode.IsSplitTerms)
				and not ReceivableInvoiceType.MixedSignLines)
					invoked.DiscountAmount.OrigDiscAmt[1]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
				else
					invoked.DiscountAmount.OrigDiscAmt[1]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent * LocalAmount

				invoked.DiscountAmount.OrigDiscAmt[2]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent * LocalAmount
				invoked.DiscountAmount.OrigDiscAmt[3]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent * LocalAmount
				invoked.HSNSACCode					  = TransientHSNSACCode

		CreateDetailFromReceivableInvoiceLineTermsArray
			initialize CalculateTerms
			if (TermsCode entered)
				CalculateTerms.TransactionDate = TransactionDate
				CalculateTerms.TransactionAmount = InvoiceAmount.CurrencyAmount
				if  (LocalLineItemAmount entered)
					CalculateTerms.TransactionAmount = LocalLineItemAmount

				if (DueDate entered)
					CalculateTerms.OverrideDueDate			= DueDate
					CalculateTerms.OverrideDiscountRate		= DiscountPercent
					CalculateTerms.OverrideDiscountDate		= DiscountDate
					CalculateTerms.OverrideDiscountAmount	= DiscountAmount

				LocalTermsCalTrigger = CalculateTerms.TermsCalTrigger

				constraint (CalculateTerms.OutputErrorNumber not entered)
					"<CalculateTerms.OutputErrorMessage>"

			LoopCounter = 1

			while (LoopCounter <= 99
			and	CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered) 
				
				LocalAmount	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
				if (LocalLineItemAmount  < 0)
					LocalAmount = LocalAmount * -1

				LocalReceivableInvoiceLine = each.ReceivableInvoiceLine

				invoke Create ReceivableInvoiceDetail
					fill in fields from this instance
						except invoked.InvoiceFinanceCodeBlock
						except invoked.FinanceDimension2
						except invoked.Project
						except invoked.ProjectContract
					fill in user fields from this instance
					fill in user fields from LocalReceivableInvoiceLineRel
					invoked.ReceivableInvoiceDetail.Invoice				= ReceivableInvoice
					invoked.Company						 				= ReceivableInvoice.Company

					if (ReceivableInvoiceType != "M")
						invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceType
						invoked.AlternateReceivableInvoiceType						 = ReceivableInvoiceType
					else
					if (AlternateReceivableInvoiceType	 = "I"
					or  AlternateReceivableInvoiceType	 = "D")
						if (LocalLineItemAmount  > 0)
							if (AlternateReceivableInvoiceType	 = "D")
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
							else
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "I"
						else
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"
						invoked.AlternateReceivableInvoiceType	 = "M"
					else
						if (LocalLineItemAmount < 0)
							invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
						else
							invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"
						invoked.AlternateReceivableInvoiceType	 = "M"

					invoked.CurrencyRate					= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.Status						 	= 1
					if (LocalProjectValue entered)
						invoked.Project						= LocalProjectValue
					if (LocalProjectContract entered)
						invoked.ProjectContract				= LocalProjectContract
					if (LocalFinanceDimension2 entered)
						invoked.FinanceDimension2			= LocalFinanceDimension2
					if (each.InvoiceFinanceCodeBlock entered)
						invoked.InvoiceFinanceCodeBlock		= each.InvoiceFinanceCodeBlock
					else
					if (InvoiceFinanceCodeBlock entered)
						invoked.InvoiceFinanceCodeBlock		= InvoiceFinanceCodeBlock
					invoked.AssociatedLine					= each.AssociatedLine
					invoked.ItemReference				 	= each.ItemReference
					invoked.ItemUser1					 	= each.ItemUser1
					invoked.Sort1						 	= each.Sort1
					invoked.Sort2						 	= each.Sort2
					invoked.Sort3						 	= each.Sort3
					invoked.Sort4						 	= each.Sort4
					if (each.Description entered)
						invoked.Description				 	= each.Description
					if (each.TransactionUserField1 entered)
						invoked.TransactionUserField1	 	= each.TransactionUserField1
					else
						invoked.TransactionUserField1	 	= TransactionUserField1
					invoked.DueDate						 	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DueDate
					if (LocalLineItemAmount  > 0)
						invoked.InvoiceAmount.CurrencyAmount  = CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
					else
						invoked.InvoiceAmount.CurrencyAmount  = CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment * -1

					invoked.DiscountDate.DiscDate[1]   		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
					invoked.DiscountPercent.DiscPct[1] 		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
					invoked.DiscountDate.DiscDate[2]   		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountDate
					invoked.DiscountPercent.DiscPct[2] 		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent
					invoked.DiscountDate.DiscDate[3]   		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountDate
					invoked.DiscountPercent.DiscPct[3] 		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent

					if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount entered
					and (TermsCode.IsNetTerms
					or   TermsCode.IsProxTerms
					or   TermsCode.IsSplitTerms)
					and not ReceivableInvoiceType.MixedSignLines)
						invoked.DiscountAmount.OrigDiscAmt[1]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
					else
						invoked.DiscountAmount.OrigDiscAmt[1]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent * LocalAmount

					invoked.DiscountAmount.OrigDiscAmt[2]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent * LocalAmount
					invoked.DiscountAmount.OrigDiscAmt[3]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent * LocalAmount
					invoked.HSNSACCode					  = TransientHSNSACCode

				increment LoopCounter

				if (LocalRecordCount = 50)
					commit transaction
					initialize LocalRecordCount
				LocalRecordCount += 1

		CreateDetailFromReceivableInvoiceAddOnChargeTermsArray
			initialize CalculateTerms
			if (TermsCode entered)
				CalculateTerms.TransactionDate = TransactionDate
				CalculateTerms.TransactionAmount = InvoiceAmount.CurrencyAmount
				if  (LocalLineItemAmount entered)
					CalculateTerms.TransactionAmount = LocalLineItemAmount

				if (DueDate entered)
					CalculateTerms.OverrideDueDate			= DueDate
					CalculateTerms.OverrideDiscountRate		= DiscountPercent
					CalculateTerms.OverrideDiscountDate		= DiscountDate
					CalculateTerms.OverrideDiscountAmount	= DiscountAmount

				LocalTermsCalTrigger = CalculateTerms.TermsCalTrigger

				constraint (CalculateTerms.OutputErrorNumber not entered)
					"<CalculateTerms.OutputErrorMessage>"

			LoopCounter = 1

			while (LoopCounter <= 99
			and	CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered) 
				
				LocalAmount	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
				if (LocalLineItemAmount  < 0)
					LocalAmount = LocalAmount * -1

				LocalReceivableInvoiceAddOnChargeUniqueID = each.UniqueID

				invoke Create ReceivableInvoiceDetail
					fill in fields from this instance
						except invoked.InvoiceFinanceCodeBlock
						except invoked.FinanceDimension2
						except invoked.Project
						except invoked.ProjectContract
					fill in user fields from this instance
					fill in user fields from first LocalReceivableInvoiceAddOnChargeRel
					invoked.ReceivableInvoiceDetail.Invoice				= ReceivableInvoice
					invoked.Company						 				= ReceivableInvoice.Company

					if (ReceivableInvoiceType != "M")
						invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceType
						invoked.AlternateReceivableInvoiceType						 = ReceivableInvoiceType
					else
					if (AlternateReceivableInvoiceType	 = "I"
					or  AlternateReceivableInvoiceType	 = "D")
						if (LocalLineItemAmount  > 0)
							if (AlternateReceivableInvoiceType	 = "D")
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
							else
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "I"
						else
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"
						invoked.AlternateReceivableInvoiceType	 = "M"
					else
						if (LocalLineItemAmount < 0)
							invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
						else
							invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"
						invoked.AlternateReceivableInvoiceType	 = "M"

					invoked.CurrencyRate					= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
					invoked.Status						 	= 1
					if (LocalProjectValue entered)
						invoked.Project						= LocalProjectValue
					if (LocalProjectContract entered)
						invoked.ProjectContract				= LocalProjectContract
					if (LocalFinanceDimension2 entered)
						invoked.FinanceDimension2			= LocalFinanceDimension2
					if (each.InvoiceFinanceCodeBlock entered)
						invoked.InvoiceFinanceCodeBlock		= each.InvoiceFinanceCodeBlock
					else
					if (InvoiceFinanceCodeBlock entered)
						invoked.InvoiceFinanceCodeBlock		= InvoiceFinanceCodeBlock
					invoked.AssociatedLine					= each.AssociatedLine
					invoked.ItemReference				 	= each.ItemReference
					invoked.ItemUser1					 	= each.ItemUser1
					invoked.Sort1						 	= each.Sort1
					invoked.Sort2						 	= each.Sort2
					invoked.Sort3						 	= each.Sort3
					invoked.Sort4						 	= each.Sort4
					if (each.ReceivableAddOnCharge.Description entered)
						invoked.Description				 	= each.ReceivableAddOnCharge.Description
					if (each.TransactionUserField1 entered)
						invoked.TransactionUserField1	 	= each.TransactionUserField1
					else
						invoked.TransactionUserField1	 	= TransactionUserField1
					invoked.DueDate						 	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DueDate
					if (LocalLineItemAmount  > 0)
						invoked.InvoiceAmount.CurrencyAmount  = CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
					else
						invoked.InvoiceAmount.CurrencyAmount  = CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment * -1

					invoked.DiscountDate.DiscDate[1]   		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
					invoked.DiscountPercent.DiscPct[1] 		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
					invoked.DiscountDate.DiscDate[2]   		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountDate
					invoked.DiscountPercent.DiscPct[2] 		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent
					invoked.DiscountDate.DiscDate[3]   		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountDate
					invoked.DiscountPercent.DiscPct[3] 		= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent

					if (CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount entered
					and (TermsCode.IsNetTerms
					or   TermsCode.IsProxTerms
					or   TermsCode.IsSplitTerms)
					and not ReceivableInvoiceType.MixedSignLines)
						invoked.DiscountAmount.OrigDiscAmt[1]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountAmount
					else
						invoked.DiscountAmount.OrigDiscAmt[1]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent * LocalAmount

					invoked.DiscountAmount.OrigDiscAmt[2]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent * LocalAmount
					invoked.DiscountAmount.OrigDiscAmt[3]	= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent * LocalAmount
					invoked.HSNSACCode					  = TransientHSNSACCode

				increment LoopCounter

				if (LocalRecordCount = 50)
					commit transaction
					initialize LocalRecordCount
				LocalRecordCount += 1

		OneSourceCalculateTax
			initialize CalculateTax
			CalculateTax.CallingModule				= "Receivable_Invoice"
			CalculateTax.System						= "AR"
			CalculateTax.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			CalculateTax.TaxEntity					= GeneralLedgerCompanyRel.AccountingEntity
			CalculateTax.InvoiceCompany				= Company
			CalculateTax.ProcessLevel				= ReceivableProcessLevel
			CalculateTax.Customer					= Customer
			CalculateTax.VendorCustomerName			= Customer.Name
			CalculateTax.VoucherNumber				= VoucherReferenceNumber
			CalculateTax.Invoice					= ReceivableInvoice
			CalculateTax.Suffix						= ReceivableInvoicePrefix
			CalculateTax.InvoiceAmount				= InvoiceAmount.CurrencyAmount
			CalculateTax.InvoiceDate				= TransactionDate
			CalculateTax.ShipmentDate				= TransactionDate
			CalculateTax.PaymentDate				= TransactionDate
			CalculateTax.TaxDate					= TransactionDate
			CalculateTax.GeneralLedgerDate			= GeneralLedgerDate

			if (AlternateReceivableInvoiceType.CreditMemo) 
				CalculateTax.InvoicedOrCreditMemo	= "C"
			else
				CalculateTax.InvoicedOrCreditMemo	= "I"

			CalculateTax.TransactionSource			= "O"
			CalculateTax.TransactionType			= "S"
			CalculateTax.LineNumber					= LastDistributionSequence + 1
			CalculateTax.DeliveryTerms				= ShipTerm
			CalculateTax.PointOfTitleTransfer		= PointOfTitleTransfer

			CalculateTax.VATRegistrationCountry			= CompanyCustomerRel.VATRegistrationCountry
			CalculateTax.VATRegistrationNumber			= CompanyCustomerRel.VATRegistrationNumber
			CalculateTax.FromVATRegistrationCountry 	= TaxEntityRel.VATRegistrationCountry
			CalculateTax.FromVATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber

			CalculateTax.DefaultFilingCurrency 				= Company.Currency
			CalculateTax.CurrencyRate						= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			CalculateTax.TransactionCurrency 				= OriginalCurrency
			CalculateTax.BaseCurrency						= Company.Currency

			CalculateTax.ReceiptSite						= ReceivableProcessLevel
			CalculateTax.UniqueIdOfRelatedObject			= UniqueID

			CalculateTax.BypassEditing						= true


			if (ReceivableProcessLevel.PostalAddress entered)
				CalculateTax.FromPostalAddress					= ReceivableProcessLevel.PostalAddress
			else
				CalculateTax.FromPostalAddress					= Company.PostalAddress


			if (ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
				CalculateTax.PostalAddress 					= ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress
			else
				CalculateTax.PostalAddress					= Customer.PostalAddress

			CalculateTax.SendMultLineItems			= true
			CalculateTax.UpdateLineItems			= true

			CalculateTax.Function	= "C"
			LocalTaxCalc			= CalculateTax.ExecuteCalculateTax

			if (CalculateTax.OutputErrorNumber = 700
			or  CalculateTax.OutputErrorNumber = 701
			or  CalculateTax.OutputErrorNumber = 702
			or  CalculateTax.OutputErrorNumber = 703
			or  CalculateTax.OutputErrorNumber = 704
			or  CalculateTax.OutputErrorNumber = 705)
				constraint(false)
					"OneSourceTaxServerOrWebserviceError;ContactAdministrator"


		CheckIntrastat

			if (OriginIntrastatCountry not entered)
				OriginIntrastatCountry = ReceivableProcessLevel.PostalAddress.Country
			if (OriginIntrastatCountry not entered)
				OriginIntrastatCountry = Company.PostalAddress.Country

			if (OriginIntrastatRegion not entered)
				OriginIntrastatRegion = ReceivableProcessLevel.PostalAddress.Region
			if (OriginIntrastatRegion not entered)
				OriginIntrastatRegion = Company.PostalAddress.Region

			if (DestinationIntrastatCountry not entered)
				DestinationIntrastatCountry = Customer.PostalAddress.Country

			if (DestinationIntrastatRegion not entered)
				DestinationIntrastatRegion = Customer.PostalAddress.Region

			if (IntrastatNatureOfTransactionCode not entered)
				IntrastatNatureOfTransactionCode = ReceivableProcessLevel.NatureOfTransactionCode

			IntrastatProcessing.TaxEntity				= Company.AccountingEntity
			IntrastatProcessing.DestinationCountry		= DestinationIntrastatCountry
			IntrastatProcessing.DestinationRegion		= DestinationIntrastatRegion
			IntrastatProcessing.OriginCountry			= OriginIntrastatCountry
			IntrastatProcessing.OriginRegion			= OriginIntrastatRegion
			IntrastatProcessing.VendorVATRegCountry		= CompanyCustomerRel.VATRegistrationCountry
			IntrastatProcessing.VendorVATRegNumber		= CompanyCustomerRel.VATRegistrationNumber

			LocalTrigger							 		= IntrastatProcessing.CheckCountries
			constraint (IntrastatProcessing.OutputErrorNumber not entered)
				"<IntrastatProcessing.OutputErrorMessage>"


		ExpandedInvoiceEntryTemplateReleaseEdits
			constraint (ReceivableInvoiceLine set exists)
				"MustEnterLinesWhenUsingThe_\Expanded_\Invoice_\Entry_\Template"

			constraint (all ReceivableGLDistributionRel.AssociatedLine entered)
				"AllDistributionsMustBeAssociatedWithA_\LineOr_\Add_\On_\Charge"

			if (ReceivableInvoiceType.CreditMemo)
				LocalHasLineExtendedAmountLessThanZero		= any ReceivableInvoiceLine set.ExtendedAmount < 0
				LocalHasLineExtendedAmountGreaterThanZero	= any ReceivableInvoiceLine set.ExtendedAmount > 0
				LocalHasAOCGrossAmountLessThanZero			= any ReceivableInvoiceAddOnCharge set.GrossAmount < 0
				LocalHasAOCGrossAmountGreaterThanZero		= any ReceivableInvoiceAddOnCharge set.GrossAmount > 0

				if (LocalHasLineExtendedAmountLessThanZero
				and LocalHasLineExtendedAmountGreaterThanZero)
					constraint (false)
						"MustEnterAllLinesWithTheSameSignFor_\Credit_\Memo<ReceivableInvoice>"

				if (LocalHasAOCGrossAmountLessThanZero
				and LocalHasAOCGrossAmountGreaterThanZero)
					constraint (false)
						"MustEnterAllAddOnChargesWithTheSameSignFor_\Credit_\Memo<ReceivableInvoice>"

				if (LocalHasLineExtendedAmountLessThanZero
				and LocalHasAOCGrossAmountGreaterThanZero)
					constraint (false)
						"MustEnterAllLinesAndAddOnChargesWithTheSameSignFor_\Credit_\Memo<ReceivableInvoice>"

				if (LocalHasLineExtendedAmountGreaterThanZero
				and LocalHasAOCGrossAmountLessThanZero)
					constraint (false)
						"MustEnterAllLinesAndAddOnChargesWithTheSameSignFor_\Credit_\Memo<ReceivableInvoice>"

			if (ReceivableInvoiceType.MixedSignLines)
				LocalHasLineExtendedAmountLessThanZero		= any ReceivableInvoiceLine set.ExtendedAmount < 0
				LocalHasLineExtendedAmountGreaterThanZero	= any ReceivableInvoiceLine set.ExtendedAmount > 0
				LocalHasAOCGrossAmountLessThanZero			= any ReceivableInvoiceAddOnCharge set.GrossAmount < 0
				LocalHasAOCGrossAmountGreaterThanZero		= any ReceivableInvoiceAddOnCharge set.GrossAmount > 0

				if ((LocalHasLineExtendedAmountLessThanZero
				or   LocalHasAOCGrossAmountLessThanZero)
				and (LocalHasLineExtendedAmountGreaterThanZero
				or   LocalHasAOCGrossAmountGreaterThanZero))
					NextSentence = true
				else
					constraint (false)
						"PositiveAndNegative_\LinesOr_\Add_\On_\ChargesRequiredForMixedSignLinesInvoice<ReceivableInvoice>"

			for each ReceivableInvoiceLine set
				constraint (each.DerivedDistributionTotalAmount = each.TotalAmount)
					"Line<each.ReceivableInvoiceLine>SumOfDistributions<each.DerivedDistributionTotalAmount>MustEqual_\Total_\Amount<each.TotalAmount>"
				constraint (each.DerivedDistributionTotalTaxAmount = each.TaxAmount)
					"Line<each.ReceivableInvoiceLine>SumOfTaxDistributions<each.DerivedDistributionTotalTaxAmount>MustEqual_\Tax_\Amount<each.TaxAmount>"
				constraint (each.DerivedDistributionTotalNonTaxAmount = each.ExtendedAmount)
					"Line<each.ReceivableInvoiceLine>SumOfNonTaxDistributions<each.DerivedDistributionTotalNonTaxAmount>MustEqual_\Extended_\Amount<each.ExtendedAmount>"

				if (each.Taxable)
					if (!each.TaxCode.TaxType.TaxTableCode)
						LocalTaxCode = each.TaxCode
						for each each.ReceivableGLDistributionTaxCodeEnteredRel   
							constraint (each.TaxCode = LocalTaxCode)
								"AllTaxDistributionsMustUseTheSameTaxCodeAsTheirAssociatedLine"
				else
					constraint (each.ReceivableGLDistributionTaxCodeEnteredRel not exists)
						"Line<each.ReceivableInvoiceLine>CannotHaveTaxDistributionsBecauseItIsNotTaxable"

				if (each.Project entered)
					constraint (each.ReceivableGLDistributionProjectEnteredRel exists)
						"Line<each.ReceivableInvoiceLine>HasProject<each.Project>.AtLeastOneDistributionForLine<each.ReceivableInvoiceLine>MustHaveProject<each.Project>"
					constraint (all each.ReceivableGLDistributionProjectEnteredRel.GeneralLedgerAccount.Project = each.Project)
						"Line<each.ReceivableInvoiceLine>EachDistributionWithAProjectMustUseProject<each.Project>"
				else
					constraint (each.ReceivableGLDistributionProjectEnteredRel not exists)
						"Line<each.ReceivableInvoiceLine>DoesNotHaveAProject.DistributionsForLine<each.ReceivableInvoiceLine>CannotHaveAProject."

			for each ReceivableInvoiceAddOnCharge set
				constraint (each.DerivedDistributionTotalAmount = each.TotalAmount)
					"Add_\On_\Charge<each.ReceivableAddOnCharge>SumOfDistributions<each.DerivedDistributionTotalAmount>MustEqual_\Total_\Amount<each.TotalAmount>"
				constraint (each.DerivedDistributionTotalTaxAmount = each.TaxAmount)
					"Add_\On_\Charge<each.ReceivableAddOnCharge>SumOfTaxDistributions<each.DerivedDistributionTotalTaxAmount>MustEqual_\Tax_\Amount<each.TaxAmount>"
				constraint (each.DerivedDistributionTotalNonTaxAmount = each.GrossAmount)
					"Add_\On_\Charge<each.ReceivableAddOnCharge>SumOfNonTaxDistributions<each.DerivedDistributionTotalNonTaxAmount>MustEqual_\Net_\Amount<each.GrossAmount>"

				if (each.Taxable)
					if (!each.TaxCode.TaxType.TaxTableCode)
						LocalTaxCode = each.TaxCode
						for each each.ReceivableGLDistributionTaxCodeEnteredRel   
							constraint (each.TaxCode = LocalTaxCode)
								"AllTaxDistributionsMustUseTheSameTaxCodeAsTheirAssociatedAddOnCharge"
				else
					constraint (each.ReceivableGLDistributionTaxCodeEnteredRel not exists)
						"Add_\On_\Charge<each.ReceivableAddOnCharge>CannotHaveTaxDistributionsBecauseItIsNotTaxable"

				if (each.Project entered)
					constraint (each.ReceivableGLDistributionProjectEnteredRel exists)
						"Add_\On_\Charge<each.ReceivableAddOnCharge>HasProject<each.Project>.AtLeastOneDistributionForAddOnCharge<each.ReceivableAddOnCharge>MustHaveProject<each.Project>"
					constraint (all each.ReceivableGLDistributionProjectEnteredRel.GeneralLedgerAccount.Project = each.Project)
						"Add_\On_\Charge<each.ReceivableAddOnCharge>EachDistributionWithAProjectMustUseProject<each.Project>"
				else
					constraint (each.ReceivableGLDistributionProjectEnteredRel not exists)
						"Add_\On_\Charge<each.ReceivableAddOnCharge>DoesNotHaveAProject.DistributionsForAddOnCharge<each.ReceivableAddOnCharge>CannotHaveAProject."

			if (first ReceivableInvoiceLine set.FlipAmounts
			or  first ReceivableInvoiceAddOnCharge set.FlipAmounts)
				LocalTotalAmount = InvoiceAmount.CurrencyAmount * -1
				constraint (DerivedExpandedInvoiceEntryTemplateTotalAmount = LocalTotalAmount)
					"SumOf_\Line_\ItemAnd_\Add_\On_\Charge_\Amounts<DerivedExpandedInvoiceEntryTemplateTotalAmount>DoesNotEqual_\Invoice_\Amount<LocalTotalAmount>For<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"
				
				LocalTotalAmount = DerivedReceivableGLDistributionAmount * -1
				constraint (DerivedExpandedInvoiceEntryTemplateTotalAmount = LocalTotalAmount)
					"SumOf_\Distribution_\Amounts<LocalTotalAmount>DoesNotEqualSumOf_\Line_\ItemAnd_\Add_\On_\Charge_\Amounts<DerivedExpandedInvoiceEntryTemplateTotalAmount>ForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"
			else
				constraint (DerivedExpandedInvoiceEntryTemplateTotalAmount = InvoiceAmount.CurrencyAmount)
					"SumOf_\Line_\ItemAnd_\Add_\On_\Charge_\Amounts<DerivedExpandedInvoiceEntryTemplateTotalAmount>DoesNotEqual_\Invoice_\Amount<InvoiceAmount.CurrencyAmount>For<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"
				
				constraint (DerivedExpandedInvoiceEntryTemplateTotalAmount = DerivedReceivableGLDistributionAmount)
					"SumOf_\Distribution_\Amounts<DerivedReceivableGLDistributionAmount>DoesNotEqualSumOf_\Line_\ItemAnd_\Add_\On_\Charge_\Amounts<DerivedExpandedInvoiceEntryTemplateTotalAmount>ForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"

		RefreshCurrencyAmounts
			if (InvoiceAmount.CurrencyAmount changed
			or	CurrencyTable changed
			or	TransactionDate	changed
			or	OriginalCurrency changed)
				initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
				initialize InvoiceAmount.AlternateAmount.EnteredCurrencyAmount
				initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount
				initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount
				initialize InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount
				initialize InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount
				initialize InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount
				initialize InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount
				initialize InvoiceAmount.ProjectAmount.EnteredCurrencyAmount
				initialize InvoiceAmount.ReportAmount1.EnteredCurrencyAmount
				initialize InvoiceAmount.ReportAmount2.EnteredCurrencyAmount
				initialize InvoiceAmount.ReportAmount3.EnteredCurrencyAmount
				initialize InvoiceAmount.ReportAmount4.EnteredCurrencyAmount
				initialize InvoiceAmount.ReportAmount5.EnteredCurrencyAmount
				if (TransactionDate != ReceivableInvoiceBatchRel.BatchDate)
					include RefreshCurrencyRates
				else
					InvoiceAmount.FunctionalAmount.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.FunctionalAmount.EnteredCurrencyRate
					InvoiceAmount.AlternateAmount.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount.EnteredCurrencyRate
					InvoiceAmount.AlternateAmount2.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount2.EnteredCurrencyRate
					InvoiceAmount.AlternateAmount3.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount3.EnteredCurrencyRate
					InvoiceAmount.ReportAmount1.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount1.EnteredCurrencyRate
					InvoiceAmount.ReportAmount2.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount2.EnteredCurrencyRate
					InvoiceAmount.ReportAmount3.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount3.EnteredCurrencyRate
					InvoiceAmount.ReportAmount4.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount4.EnteredCurrencyRate
					InvoiceAmount.ReportAmount5.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount5.EnteredCurrencyRate

			if (InvoiceAmount.FunctionalAmount.EnteredCurrencyRate changed)
				if (InvoiceAmount.FunctionalAmount.EnteredCurrencyRate not entered)
					initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
					if (TransactionDate != ReceivableInvoiceBatchRel.BatchDate)
						InvoiceAmount.FunctionalAmount.EnteredCurrencyRate = TransientInvoiceCurrencyRate.FunctionalAmount.OutputCurrencyRate
					else
						InvoiceAmount.FunctionalAmount.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.FunctionalAmount.EnteredCurrencyRate
				else
					initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

			if (InvoiceAmount.AlternateAmount.EnteredCurrencyRate changed)
				if (InvoiceAmount.AlternateAmount.EnteredCurrencyRate not entered)
					initialize InvoiceAmount.AlternateAmount.EnteredCurrencyAmount
					if (TransactionDate != ReceivableInvoiceBatchRel.BatchDate)
						InvoiceAmount.AlternateAmount.EnteredCurrencyRate = TransientInvoiceCurrencyRate.AlternateAmount.OutputCurrencyRate
					else
						InvoiceAmount.AlternateAmount.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount.EnteredCurrencyRate
				else
					initialize InvoiceAmount.AlternateAmount.EnteredCurrencyAmount

			if (InvoiceAmount.AlternateAmount2.EnteredCurrencyRate changed)
				if (InvoiceAmount.AlternateAmount2.EnteredCurrencyRate not entered)
					initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount
					if (TransactionDate != ReceivableInvoiceBatchRel.BatchDate)
						InvoiceAmount.AlternateAmount2.EnteredCurrencyRate = TransientInvoiceCurrencyRate.AlternateAmount2.OutputCurrencyRate
					else
						InvoiceAmount.AlternateAmount2.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount2.EnteredCurrencyRate
				else
					initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount

			if (InvoiceAmount.AlternateAmount3.EnteredCurrencyRate changed)
				if (InvoiceAmount.AlternateAmount3.EnteredCurrencyRate not entered)
					initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount
					if (TransactionDate != ReceivableInvoiceBatchRel.BatchDate)
						InvoiceAmount.AlternateAmount3.EnteredCurrencyRate = TransientInvoiceCurrencyRate.AlternateAmount3.OutputCurrencyRate
					else
						InvoiceAmount.AlternateAmount3.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount3.EnteredCurrencyRate
				else
					initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount

			if (InvoiceAmount.ReportAmount1.EnteredCurrencyRate changed)
				if (InvoiceAmount.ReportAmount1.EnteredCurrencyRate not entered)
					initialize InvoiceAmount.ReportAmount1.EnteredCurrencyAmount
					if (TransactionDate != ReceivableInvoiceBatchRel.BatchDate)
						InvoiceAmount.ReportAmount1.EnteredCurrencyRate = TransientInvoiceCurrencyRate.ReportAmount1.OutputCurrencyRate
					else
						InvoiceAmount.ReportAmount1.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount1.EnteredCurrencyRate
				else
					initialize InvoiceAmount.ReportAmount1.EnteredCurrencyAmount

			if (InvoiceAmount.ReportAmount2.EnteredCurrencyRate changed)
				if (InvoiceAmount.ReportAmount2.EnteredCurrencyRate not entered)
					initialize InvoiceAmount.ReportAmount2.EnteredCurrencyAmount
					if (TransactionDate != ReceivableInvoiceBatchRel.BatchDate)
						InvoiceAmount.ReportAmount2.EnteredCurrencyRate = TransientInvoiceCurrencyRate.ReportAmount2.OutputCurrencyRate
					else
						InvoiceAmount.ReportAmount2.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount2.EnteredCurrencyRate
				else
					initialize InvoiceAmount.ReportAmount2.EnteredCurrencyAmount

			if (InvoiceAmount.ReportAmount3.EnteredCurrencyRate changed)
				if (InvoiceAmount.ReportAmount3.EnteredCurrencyRate not entered)
					initialize InvoiceAmount.ReportAmount3.EnteredCurrencyAmount
					if (TransactionDate != ReceivableInvoiceBatchRel.BatchDate)
						InvoiceAmount.ReportAmount3.EnteredCurrencyRate = TransientInvoiceCurrencyRate.ReportAmount3.OutputCurrencyRate
					else
						InvoiceAmount.ReportAmount3.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount3.EnteredCurrencyRate
				else
					initialize InvoiceAmount.ReportAmount3.EnteredCurrencyAmount

			if (InvoiceAmount.ReportAmount4.EnteredCurrencyRate changed)
				if (InvoiceAmount.ReportAmount4.EnteredCurrencyRate not entered)
					initialize InvoiceAmount.ReportAmount4.EnteredCurrencyAmount
					if (TransactionDate != ReceivableInvoiceBatchRel.BatchDate)
						InvoiceAmount.ReportAmount4.EnteredCurrencyRate = TransientInvoiceCurrencyRate.ReportAmount4.OutputCurrencyRate
					else
						InvoiceAmount.ReportAmount4.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount4.EnteredCurrencyRate
				else
					initialize InvoiceAmount.ReportAmount4.EnteredCurrencyAmount

			if (InvoiceAmount.ReportAmount5.EnteredCurrencyRate changed)
				if (InvoiceAmount.ReportAmount5.EnteredCurrencyRate not entered)
					initialize InvoiceAmount.ReportAmount5.EnteredCurrencyAmount
					if (TransactionDate != ReceivableInvoiceBatchRel.BatchDate)
						InvoiceAmount.ReportAmount5.EnteredCurrencyRate = TransientInvoiceCurrencyRate.ReportAmount5.OutputCurrencyRate
					else
						InvoiceAmount.ReportAmount5.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount5.EnteredCurrencyRate
				else
					initialize InvoiceAmount.ReportAmount5.EnteredCurrencyAmount

		RefreshCurrencyRates
			LocalAssignToCurrency = TransientInvoiceCurrencyRate.AssignToCurrency
			InvoiceAmount.FunctionalAmount.EnteredCurrencyRate = TransientInvoiceCurrencyRate.FunctionalAmount.OutputCurrencyRate
			InvoiceAmount.AlternateAmount.EnteredCurrencyRate  = TransientInvoiceCurrencyRate.AlternateAmount.OutputCurrencyRate
			InvoiceAmount.AlternateAmount2.EnteredCurrencyRate = TransientInvoiceCurrencyRate.AlternateAmount2.OutputCurrencyRate
			InvoiceAmount.AlternateAmount3.EnteredCurrencyRate = TransientInvoiceCurrencyRate.AlternateAmount3.OutputCurrencyRate
			InvoiceAmount.ReportAmount1.EnteredCurrencyRate	   = TransientInvoiceCurrencyRate.ReportAmount1.OutputCurrencyRate
			InvoiceAmount.ReportAmount2.EnteredCurrencyRate    = TransientInvoiceCurrencyRate.ReportAmount2.OutputCurrencyRate
			InvoiceAmount.ReportAmount3.EnteredCurrencyRate    = TransientInvoiceCurrencyRate.ReportAmount3.OutputCurrencyRate
			InvoiceAmount.ReportAmount4.EnteredCurrencyRate    = TransientInvoiceCurrencyRate.ReportAmount4.OutputCurrencyRate
			InvoiceAmount.ReportAmount5.EnteredCurrencyRate    = TransientInvoiceCurrencyRate.ReportAmount5.OutputCurrencyRate

		MultiCurrencyProcessingEdit
			if (!Company.MultiCurrencyProcessing)
				constraint (InvoiceAmount.FunctionalAmount.EnteredCurrencyRate not entered
				or			InvoiceAmount.AlternateAmount.EnteredCurrencyRate not entered
				or			InvoiceAmount.AlternateAmount2.EnteredCurrencyRate not entered
				or			InvoiceAmount.AlternateAmount3.EnteredCurrencyRate not entered
				or			InvoiceAmount.ReportAmount1.EnteredCurrencyRate not entered
				or			InvoiceAmount.ReportAmount2.EnteredCurrencyRate not entered
				or			InvoiceAmount.ReportAmount3.EnteredCurrencyRate not entered
				or			InvoiceAmount.ReportAmount4.EnteredCurrencyRate not entered
				or			InvoiceAmount.ReportAmount5.EnteredCurrencyRate not entered)
					"CompanyIsNotMultiCurrencyProcessing;CannotEnterCurrencyRates"
				constraint (InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount not entered
				or			InvoiceAmount.AlternateAmount.EnteredCurrencyAmount not entered
				or			InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount not entered
				or			InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount not entered
				or			InvoiceAmount.ReportAmount1.EnteredCurrencyAmount not entered
				or			InvoiceAmount.ReportAmount2.EnteredCurrencyAmount not entered
				or			InvoiceAmount.ReportAmount3.EnteredCurrencyAmount not entered
				or			InvoiceAmount.ReportAmount4.EnteredCurrencyAmount not entered
				or			InvoiceAmount.ReportAmount5.EnteredCurrencyAmount not entered)
					"CompanyIsNotMultiCurrencyProcessing;CannotEnterCurrencyAmounts"

		CurrencyRateOverrideEdit
			if (Company.CurrencyRateOverride.No)
				constraint (InvoiceAmount.FunctionalAmount.EnteredCurrencyRate not changed
				and			InvoiceAmount.AlternateAmount.EnteredCurrencyRate not changed
				and			InvoiceAmount.AlternateAmount2.EnteredCurrencyRate not changed
				and			InvoiceAmount.AlternateAmount3.EnteredCurrencyRate not changed
				and			InvoiceAmount.ReportAmount1.EnteredCurrencyRate not changed
				and			InvoiceAmount.ReportAmount2.EnteredCurrencyRate not changed
				and			InvoiceAmount.ReportAmount3.EnteredCurrencyRate not changed
				and			InvoiceAmount.ReportAmount4.EnteredCurrencyRate not changed
				and			InvoiceAmount.ReportAmount5.EnteredCurrencyRate not changed)
					"CompanyDoesNotAllowCurrencyRateOverride"
				constraint (InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount not changed
				and			InvoiceAmount.AlternateAmount.EnteredCurrencyAmount not changed
				and			InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount not changed
				and			InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount not changed
				and			InvoiceAmount.ReportAmount1.EnteredCurrencyAmount not changed
				and			InvoiceAmount.ReportAmount2.EnteredCurrencyAmount not changed
				and			InvoiceAmount.ReportAmount3.EnteredCurrencyAmount not changed
				and			InvoiceAmount.ReportAmount4.EnteredCurrencyAmount not changed
				and			InvoiceAmount.ReportAmount5.EnteredCurrencyAmount not changed)
					"CompanyDoesNotAllowCurrencyAmountOverride"

		InitializeCurrencyAmountsAndRates
			initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ProjectAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount1.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount4.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount5.EnteredCurrencyAmount
			initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			initialize InvoiceAmount.AlternateAmount.EnteredCurrencyRate
			initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
			initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
			initialize InvoiceAmount.ToFunctionalAmount.EnteredCurrencyRate
			initialize InvoiceAmount.ToAlternateAmount.EnteredCurrencyRate
			initialize InvoiceAmount.ToAlternateAmount2.EnteredCurrencyRate
			initialize InvoiceAmount.ToAlternateAmount3.EnteredCurrencyRate
			initialize InvoiceAmount.ProjectAmount.EnteredCurrencyRate
			initialize InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			initialize InvoiceAmount.ReportAmount2.EnteredCurrencyRate
			initialize InvoiceAmount.ReportAmount3.EnteredCurrencyRate
			initialize InvoiceAmount.ReportAmount4.EnteredCurrencyRate
			initialize InvoiceAmount.ReportAmount5.EnteredCurrencyRate

		SumMixedReceivableInvoiceCreditDetailRelAmounts	
			if (!SumOfMixedReceivableInvoiceCreditDetailRelAmountsDone)
				initialize SumOfMixedReceivableInvoiceCreditDetailRelInvoiceAmountCurrencyAmount
				initialize SumOfMixedReceivableInvoiceCreditDetailRelApplicationAmountCurrencyAmount
				initialize SumOfMixedReceivableInvoiceCreditDetailRelAdjustmentAmountCurrencyAmount	
					for each MixedReceivableInvoiceCreditDetailRel
						SumOfMixedReceivableInvoiceCreditDetailRelInvoiceAmountCurrencyAmount += each.InvoiceAmount.CurrencyAmount
						SumOfMixedReceivableInvoiceCreditDetailRelApplicationAmountCurrencyAmount += each.ApplicationAmount.CurrencyAmount
						SumOfMixedReceivableInvoiceCreditDetailRelAdjustmentAmountCurrencyAmount += each.AdjustmentAmount.CurrencyAmount	
				SumOfMixedReceivableInvoiceCreditDetailRelAmountsDone = true

		SumMixedReceivableInvoiceDebitDetailRelAmounts	
			if (!SumOfMixedReceivableInvoiceDebitDetailRelAmountsDone)
				initialize SumOfMixedReceivableInvoiceDebitDetailRelInvoiceAmountCurrencyAmount
				initialize SumOfMixedReceivableInvoiceDebitDetailRelApplicationAmountCurrencyAmount
				initialize SumOfMixedReceivableInvoiceDebitDetailRelAdjustmentAmountCurrencyAmount	
					for each MixedReceivableInvoiceDebitDetailRel
						SumOfMixedReceivableInvoiceDebitDetailRelInvoiceAmountCurrencyAmount += each.InvoiceAmount.CurrencyAmount
						SumOfMixedReceivableInvoiceDebitDetailRelApplicationAmountCurrencyAmount += each.ApplicationAmount.CurrencyAmount
						SumOfMixedReceivableInvoiceDebitDetailRelAdjustmentAmountCurrencyAmount += each.AdjustmentAmount.CurrencyAmount	
				SumOfMixedReceivableInvoiceDebitDetailRelAmountsDone = true

		SumOpenReceivableInvoiceDetailRelInvoiceAmountCurrencyAmount	
			if (!SumOfOpenReceivableInvoiceDetailRelInvoiceAmountCurrencyAmountDone)
				initialize SumOfOpenReceivableInvoiceDetailRelInvoiceAmountCurrencyAmount
					for each OpenReceivableInvoiceDetailRel
						SumOfOpenReceivableInvoiceDetailRelInvoiceAmountCurrencyAmount += each.InvoiceAmount.CurrencyAmount
				SumOfOpenReceivableInvoiceDetailRelInvoiceAmountCurrencyAmountDone = true

		SumProrateDistributionsRelDistributionAmountCurrencyAmount	
			if (!SumOfProrateDistributionsRelDistributionAmountCurrencyAmountDone)
				initialize SumOfProrateDistributionsRelDistributionAmountCurrencyAmount
					for each ProrateDistributionsRel
						SumOfProrateDistributionsRelDistributionAmountCurrencyAmount += each.DistributionAmount.CurrencyAmount
				SumOfProrateDistributionsRelDistributionAmountCurrencyAmountDone = true

		SumReceivableInvoiceDetailRelAmounts	
			if (!SumOfReceivableInvoiceDetailRelAmountsDone)
				initialize SumOfReceivableInvoiceDetailRelInvoiceAmountCurrencyAmount
				initialize SumOfReceivableInvoiceDetailRelApplicationAmountCurrencyAmount
				initialize SumOfReceivableInvoiceDetailRelAdjustmentAmountCurrencyAmount
				initialize SumOfReceivableInvoiceDetailRelPortalRequestedAppliedAmount	
				initialize SumOfReceivableInvoiceDetailRelSignedOpenAmount	
				initialize SumOfReceivableInvoiceDetailRelTotalSignedAppliedAmount	
					for each ReceivableInvoiceDetailRel
						SumOfReceivableInvoiceDetailRelInvoiceAmountCurrencyAmount += each.InvoiceAmount.CurrencyAmount
						SumOfReceivableInvoiceDetailRelApplicationAmountCurrencyAmount += each.ApplicationAmount.CurrencyAmount
						SumOfReceivableInvoiceDetailRelAdjustmentAmountCurrencyAmount += each.AdjustmentAmount.CurrencyAmount
						SumOfReceivableInvoiceDetailRelPortalRequestedAppliedAmount += each.SignedPortalRequestedAppliedAmount	
						SumOfReceivableInvoiceDetailRelSignedOpenAmount += each.SignedOpenAmount	
						SumOfReceivableInvoiceDetailRelTotalSignedAppliedAmount += each.TotalSignedAppliedAmount	
				SumOfReceivableInvoiceDetailRelAmountsDone = true

		SumReceivableInvoiceLineItemRelTransactionAmount	
			if (!SumOfReceivableInvoiceLineItemRelTransactionAmountDone)
				initialize SumOfReceivableInvoiceLineItemRelTransactionAmount
					for each ReceivableInvoiceLineItemRel
						SumOfReceivableInvoiceLineItemRelTransactionAmount += each.TransactionAmount
				SumOfReceivableInvoiceLineItemRelTransactionAmountDone = true

		SumReceivableGLDistributionRelDistributionAmountCurrencyAmount	
			if (!SumOfReceivableGLDistributionRelDistributionAmountCurrencyAmountDone)
				initialize SumOfReceivableGLDistributionRelDistributionAmountCurrencyAmount
					for each ReceivableGLDistributionRel
						SumOfReceivableGLDistributionRelDistributionAmountCurrencyAmount += each.DistributionAmount.CurrencyAmount
				SumOfReceivableGLDistributionRelDistributionAmountCurrencyAmountDone = true

		SumReceivableGLDistributionWithTaxAmountRelDistributionAmountCurrencyAmount	
			if (!SumOfReceivableGLDistributionWithTaxAmountRelDistributionAmountCurrencyAmountDone)
				initialize SumOfReceivableGLDistributionWithTaxAmountRelDistributionAmountCurrencyAmount
					for each ReceivableGLDistributionWithTaxAmountRel
						SumOfReceivableGLDistributionWithTaxAmountRelDistributionAmountCurrencyAmount += each.DistributionAmount.CurrencyAmount
				SumOfReceivableGLDistributionWithTaxAmountRelDistributionAmountCurrencyAmountDone = true

		FirstReceivableInvoiceDetailRelReceivableInvoiceDetailIsSummarizeDetailParticipant	
			if SummarizeDetail = true
				if (!FirstReceivableInvoiceDetailRelReceivableInvoiceDetailIsSummarizeDetailParticipantDone)
					initialize FirstReceivableInvoiceDetailRelReceivableInvoiceDetailInvoice
					initialize FirstReceivableInvoiceDetailRelReceivableInvoiceDetailReceivableInvoiceDetailType
					initialize FirstReceivableInvoiceDetailRelReceivableInvoiceDetailPaymentSeq
						for each ReceivableInvoiceDetailRel
							FirstReceivableInvoiceDetailRelReceivableInvoiceDetailInvoice = first ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.Invoice
							FirstReceivableInvoiceDetailRelReceivableInvoiceDetailReceivableInvoiceDetailType = first ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							FirstReceivableInvoiceDetailRelReceivableInvoiceDetailPaymentSeq = first ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq
					FirstReceivableInvoiceDetailRelReceivableInvoiceDetailIsSummarizeDetailParticipantDone = true

		SumExpandedInvoiceEntryTemplateTotalAmount
			if (!SumExpandedInvoiceEntryTemplateTotalAmountDone)
				initialize SumOfExpandedInvoiceEntryTemplateTotalAmount
				initialize SumOfExpandedInvoiceEntryTemplateLineAmount
				initialize SumOfExpandedInvoiceEntryTemplateTaxAmount
				for each ReceivableInvoiceLine set
					SumOfExpandedInvoiceEntryTemplateTotalAmount 	+= each.TotalAmount
					SumOfExpandedInvoiceEntryTemplateLineAmount  	+= each.ExtendedAmount
					SumOfExpandedInvoiceEntryTemplateTaxAmount   	+= each.TaxAmount
				for each ReceivableInvoiceAddOnCharge set
					SumOfExpandedInvoiceEntryTemplateTotalAmount 	+= each.TotalAmount
					SumOfExpandedInvoiceEntryTemplateAOCAmount   	+= each.GrossAmount
					SumOfExpandedInvoiceEntryTemplateTaxAmount   	+= each.TaxAmount
				SumExpandedInvoiceEntryTemplateTotalAmountDone 		= true

		RefreshCurrenciesForConvertInvoices

			InvoiceAmount.ExchangeDate 		= TransactionDate
			InvoiceAmount.KeepRateOnly 		= true

			initialize InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ToFunctionalAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.ToAlternateAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ProjectAmount.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount1.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount2.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount3.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount4.EnteredCurrencyAmount
			initialize InvoiceAmount.ReportAmount5.EnteredCurrencyAmount

			LocalAssignToCurrency	= InvoiceAmount.AssignToCurrency

			InvoiceAmount.FunctionalAmount.EnteredCurrencyRate		= InvoiceAmount.FunctionalAmount.OutputCurrencyRate
			InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount	= InvoiceAmount.FunctionalAmount.OutputCurrencyAmount

			if (Company.AccountingEntity.AlternateCurrency entered)
				InvoiceAmount.AlternateAmount.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount.OutputCurrencyRate
				InvoiceAmount.AlternateAmount.EnteredCurrencyAmount		= InvoiceAmount.AlternateAmount.OutputCurrencyAmount

			if (Company.AccountingEntity.AlternateCurrency2 entered)
				InvoiceAmount.AlternateAmount2.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount2.OutputCurrencyRate
				InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount	= InvoiceAmount.AlternateAmount2.OutputCurrencyAmount

			if (Company.AccountingEntity.AlternateCurrency3 entered)
				InvoiceAmount.AlternateAmount3.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount3.OutputCurrencyRate
				InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount	= InvoiceAmount.AlternateAmount3.OutputCurrencyAmount


















			if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ReportCurrencyOne entered)
				InvoiceAmount.ReportAmount1.EnteredCurrencyRate			= InvoiceAmount.ReportAmount1.OutputCurrencyRate
				InvoiceAmount.ReportAmount1.EnteredCurrencyAmount		= InvoiceAmount.ReportAmount1.OutputCurrencyAmount

			if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ReportCurrencyTwo entered)
				InvoiceAmount.ReportAmount2.EnteredCurrencyRate			= InvoiceAmount.ReportAmount2.OutputCurrencyRate
				InvoiceAmount.ReportAmount2.EnteredCurrencyAmount		= InvoiceAmount.ReportAmount2.OutputCurrencyAmount

			if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ReportCurrencyThree entered)
				InvoiceAmount.ReportAmount3.EnteredCurrencyRate			= InvoiceAmount.ReportAmount3.OutputCurrencyRate
				InvoiceAmount.ReportAmount3.EnteredCurrencyAmount		= InvoiceAmount.ReportAmount3.OutputCurrencyAmount

			if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ReportCurrencyFour entered)
				InvoiceAmount.ReportAmount4.EnteredCurrencyRate			= InvoiceAmount.ReportAmount4.OutputCurrencyRate
				InvoiceAmount.ReportAmount4.EnteredCurrencyAmount		= InvoiceAmount.ReportAmount4.OutputCurrencyAmount

			if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ReportCurrencyFive entered)
				InvoiceAmount.ReportAmount5.EnteredCurrencyRate			= InvoiceAmount.ReportAmount5.OutputCurrencyRate
				InvoiceAmount.ReportAmount5.EnteredCurrencyAmount		= InvoiceAmount.ReportAmount5.OutputCurrencyAmount

		IDMXMLDefinition
			initialize IDMGenerateDocument
			IDMGenerateDocument.IDMXMLDefinition.Busclass										= reference to this instance
			IDMGenerateDocument.IDMXMLDefinition.ListName										= "ReceivableInvoiceListForIDM"
			IDMGenerateDocument.IDMXMLDefinition.DocumentName									= "ARInvoice"

			if (InvoiceEntryTemplate.Expanded
			and Company.ReceivableInvoiceExpandedTemplate entered)
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName		= "ReceivableInvoiceLineRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName			= "ReceivableInvoiceLineListForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1	= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag			= "Lines"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag			= "Line"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].RelationName		= "ReceivableInvoiceAddOnChargeRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListName			= "ReceivableInvoiceAddOnChargeListForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection1	= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection2	= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListTag			= "LineAddOnCharge"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ItemTag			= "AddOnCharge"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].RelationName		= "HeaderAddOnChargesRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListName			= "ReceivableInvoiceAddOnChargeListForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].LevelSection1	= 2
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ListTag			= "HeaderAddOnCharges"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[3].ItemTag			= "AddOnCharge"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].RelationName		= "CompanyCustomerCommentWithPrintCodeRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ListName			= "CompanyCustomerCommentIDMList"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].LevelSection1	= 3
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ListTag			= "Comments"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[4].ItemTag			= "Comment"	
			else
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].RelationName		= "ReceivableInvoiceDetailRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListName			= "ReceivableInvoiceDetailListForIDM"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].LevelSection1	= 1
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ListTag			= "InvoiceDetails"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[1].ItemTag			= "Details"

				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].RelationName		= "CompanyCustomerCommentWithPrintCodeRel"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListName			= "CompanyCustomerCommentIDMList"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].LevelSection1	= 2
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ListTag			= "Comments"
				IDMGenerateDocument.IDMXMLDefinition.IDMXMLChildren.IDMXMLChild[2].ItemTag			= "Comment"	

		IDMGenerateBlock
			include IDMXMLDefinition
			initialize AttributeCtr
			initialize IDMAttributes
			IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeName							= "Company"
			IDMAttributes.SingleValue.IDMAttribute[1].IDMAttributeValue							= Company
			IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeName							= "ReceivableInvoice"
			IDMAttributes.SingleValue.IDMAttribute[2].IDMAttributeValue							= ReceivableInvoice
			IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeName							= "ReceivableInvoiceType"
			IDMAttributes.SingleValue.IDMAttribute[3].IDMAttributeValue							= ReceivableInvoiceType
			IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeName							= "CompanyName"
			IDMAttributes.SingleValue.IDMAttribute[4].IDMAttributeValue							= Company.Name
			IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeName							= "Customer"
			IDMAttributes.SingleValue.IDMAttribute[5].IDMAttributeValue							= Customer
			IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeName							= "CustomerName"
			IDMAttributes.SingleValue.IDMAttribute[6].IDMAttributeValue							= Customer.Name
			IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeName							= "TransactionDate"
			IDMAttributes.SingleValue.IDMAttribute[7].IDMAttributeDate							= TransactionDate
			IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeName							= "DueDate"
			IDMAttributes.SingleValue.IDMAttribute[8].IDMAttributeDate							= DueDate

			if (IDMAdditionalAttributesLinesRel exists)
				AttributeCtr = 9
				include IDM.IDMAdditionalAttributes

			IDMGenerateDocument.IDMAttributes													= IDMAttributes

			if (InvoiceEntryTemplate.Expanded
			and Company.ReceivableInvoiceExpandedTemplate entered)
				IDMGenerateDocument.TemplateUniqueId = Company.ReceivableInvoiceExpandedTemplate.IDMUniqueId
			else
			if (InvoiceEntryTemplate.Standard
			and Company.ReceivableInvoiceTemplate entered)
				IDMGenerateDocument.TemplateUniqueId = Company.ReceivableInvoiceTemplate.IDMUniqueId

			IDMGenerateDocument.DocumentType													= "FSM_ReceivableInvoice"
			IDMGenerateDocument.FileName														= DerivedFileName

			if (CompanyCustomerRel.EmailReceivableInvoice)

				if (DerivedEmailSubject entered)
					IDMGenerateDocument.IDMEmail.Subject = DerivedEmailSubject
				else
					IDMGenerateDocument.IDMEmail.Subject = DerivedReceivableInvoiceIDMEmailSubject

				if (InvoiceEntryTemplate.Expanded
				and Company.ReceivableInvoiceExpandedIDMEmailTemplate entered)
					IDMGenerateDocument.EmailTemplateUniqueID = Company.ReceivableInvoiceExpandedIDMEmailTemplate.IDMUniqueId
				else
				if (InvoiceEntryTemplate.Standard
				and Company.ReceivableInvoiceIDMEmailTemplate entered)
					IDMGenerateDocument.EmailTemplateUniqueID	= Company.ReceivableInvoiceIDMEmailTemplate.IDMUniqueId

				IDMGenerateDocument.IDMEmail.From		 = DerivedReceivableInvoiceFromAndReplyToEmail
				IDMGenerateDocument.IDMEmail.To			 = DerivedToEmailAddress
				IDMGenerateDocument.IDMEmail.Cc		     = DerivedCcEmailAddress

				LocalIDMAttachmentCtr = 1
				for each ReceivableInvoiceAttachmentsRel
					if (LocalIDMAttachmentCtr > 100)
						end for each
					IDMGenerateDocument.IDMEmail.IDMAttachments.IDMAttachment[LocalIDMAttachmentCtr] = each.Attachment
					LocalIDMAttachmentCtr+=1

			if (LocalIDMPrinter entered)
				IDMGenerateDocument.IDMPrinter				= LocalIDMPrinter

			IDMGenerateDocument.IDMAccessControlList = "CSFDefined"

		IDMPrintBlock
			initialize IDMItem
			IDMItem.DocumentType = "FSM_ReceivableInvoice"
			IDMItem.IDMUniqueId	 = IDMUniqueID
			IDMItem.IDMPrinter	 = LocalIDMPrinter

			constraint (IDMItem.GetItemDetails)
				"DocumentDoesNotExistInIDM"

			IDMItem.IDMPID	= IDMItem.IDMItemDetails.PID

			invoke SendToPrinter IDMJob
				invoked.Description = IDMDescriptionMsg
				invoked.FileName	= DerivedFileName
				invoked.IDMItem		= IDMItem

		IDMEmailBlock

			include IDMXMLDefinition

			initialize IDMItem
			IDMItem.DocumentType		 = "FSM_ReceivableInvoice"
			IDMItem.IDMXMLDefinition	 = IDMGenerateDocument.IDMXMLDefinition
			IDMItem.IDMUniqueId			 = IDMUniqueID
			IDMItem.IDMEmail.From		 = LocalFromAndReplyToEmail
			IDMItem.IDMEmail.To			 = LocalRecipientEmailAddress
			IDMItem.IDMEmail.Cc			 = LocalCcEmailAddress

			if (DerivedEmailSubject entered)
				IDMItem.IDMEmail.Subject = DerivedEmailSubject
			else
				IDMItem.IDMEmail.Subject = DerivedReceivableInvoiceIDMEmailSubject

			if (InvoiceEntryTemplate.Expanded
			and Company.ReceivableInvoiceExpandedIDMEmailTemplate entered)
				IDMItem.EmailTemplateUniqueID   = Company.ReceivableInvoiceExpandedIDMEmailTemplate.IDMUniqueId
			else
			if (InvoiceEntryTemplate.Standard
			and Company.ReceivableInvoiceIDMEmailTemplate entered)
				IDMItem.EmailTemplateUniqueID   = Company.ReceivableInvoiceIDMEmailTemplate.IDMUniqueId

			LocalIDMAttachmentCtr = 1
				for each ReceivableInvoiceAttachmentsRel
					if (LocalIDMAttachmentCtr > 100)
						end for each
					IDMItem.IDMEmail.IDMAttachments.IDMAttachment[LocalIDMAttachmentCtr] = each.Attachment
					LocalIDMAttachmentCtr+=1

			constraint (IDMItem.GetItemDetails)
				"DocumentDoesNotExistInIDM"

			IDMItem.IDMPID	= IDMItem.IDMItemDetails.PID

			invoke SendToEmail IDMJob
				invoked.Description	 = EmailNotificationMsg
				invoked.FileName	 = DerivedFileName
				invoked.IDMItem		 = IDMItem



































		EditIntrastatDataForRelease
			if (DoIntrastat)
				constraint (IsIntrastatInvoice)
					"IntrastatHeaderInformationRequired"
				constraint (ReceivableGLIntrastatDetailRel exists)
					"IntrastatDetailFieldsMustBePopulated"
				if (ReceivableGLIntrastatDetailExistsRel exists)
					constraint (!OriginIntrastatRegion.ExcludeFromIntrastat
			  		and		 !DestinationIntrastatRegion.ExcludeFromIntrastat)
			  			"Specified/Countries/RegionsNotValidForIntrastatReporting"

		CreateIntrastatRecords				

			IntrastatFiscalYear = TransactionDate year
			initialize IntrastatProcessing

			IntrastatProcessing.HeaderFc					= "C"
			IntrastatProcessing.DetailFc					= blank
			IntrastatProcessing.TaxEntity					= GeneralLedgerCompanyRel.AccountingEntity
			IntrastatProcessing.FiscalYear					= IntrastatFiscalYear
			IntrastatProcessing.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			IntrastatProcessing.InvoiceCompany				= Company
			IntrastatProcessing.OriginCountry 				= OriginIntrastatCountry
			IntrastatProcessing.OriginRegion				= OriginIntrastatRegion
			IntrastatProcessing.DestinationCountry 			= DestinationIntrastatCountry
			IntrastatProcessing.DestinationRegion			= DestinationIntrastatRegion
			IntrastatProcessing.TransactionType				= "S"
			IntrastatProcessing.SystemCode					= "AR"
			IntrastatProcessing.NatureOfTransactionCode		= IntrastatNatureOfTransactionCode
			IntrastatProcessing.DocumentNumber				= ReceivableInvoice
			IntrastatProcessing.InvoiceDate					= TransactionDate
			IntrastatProcessing.CurrencyRate				= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			IntrastatProcessing.CustomerGrp					= Company.CustomerGroupField.CustomerGroup
			IntrastatProcessing.Customer					= Customer
			IntrastatProcessing.CustomerCurrency			= OriginalCurrency
			IntrastatProcessing.CustomerVATRegCountry		= CompanyCustomerRel.VATRegistrationCountry
			IntrastatProcessing.CustomerVATRegNumber 		= CompanyCustomerRel.VATRegistrationNumber
			IntrastatProcessing.StatisticalProcedure		= IntrastatStatisticalProcedure
			IntrastatProcessing.VendorGrp					= Company.GeneralLedgerCompany.BusinessGroup
			IntrastatProcessing.DeliveryTerms				= ShipTerm
			IntrastatProcessing.TransportMode				= TransportMode
			IntrastatProcessing.LoadingPort					= IntrastatPortCode
			IntrastatProcessing.DropShip 					= DropShipIndicator
			IntrastatProcessing.RelatedObjectReference		= reference to this instance
			LocalTrigger									= IntrastatProcessing.MainTrigger
			constraint (IntrastatProcessing.LocalErrorNumber not entered)
				"<IntrastatProcessing.OutputErrorMessage>"
			TransientIntrastatNumber							= IntrastatProcessing.OutputIntrastatNumber


			invoke CreateIntrastatDetail ReceivableGLDistributionLineTypeRel
				invoked.PrmIntrastatFiscalYear 				= IntrastatFiscalYear
				invoked.PrmIntrastatNumber					= TransientIntrastatNumber
				invoked.PrmOriginIntrastatCountry			= OriginIntrastatCountry
				invoked.PrmOriginIntrastatRegion			= OriginIntrastatRegion
				invoked.PrmDestinationIntrastatCountry		= DestinationIntrastatCountry
				invoked.PrmDestinationIntrastatRegion		= DestinationIntrastatRegion

	Derived Fields

		ProrateDistributionsRelCount is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of ProrateDistributionsRel)

		ContextMessageEntityType						is a StringField
			type is Alpha 30
			restricted
			"InforInvoice"

		ContextMessageText								is a MessageField
			restricted
			"ReceivableInvoice<ReceivableInvoice>"

		AddCompleteLineItemsRequiredMessage				is a MessageField
			restricted
			"AddComplete,LineItemsRequired"

		ZeroAmountTransactionMsg						is a MessageField
			restricted
			"ZeroAmountTransaction"

		DerivedReceivableInvoiceLineItemAmount			is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumReceivableInvoiceLineItemRelTransactionAmount	

			return (SumOfReceivableInvoiceLineItemRelTransactionAmount)	

		DerivedMixedReceivableInvoiceDetailAmount		is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumMixedReceivableInvoiceCreditDetailRelAmounts	
			include SumMixedReceivableInvoiceDebitDetailRelAmounts	
			if  (AlternateReceivableInvoiceType.CreditMemo)

				return (SumOfMixedReceivableInvoiceCreditDetailRelInvoiceAmountCurrencyAmount - SumOfMixedReceivableInvoiceDebitDetailRelInvoiceAmountCurrencyAmount)	
			else

				return (SumOfMixedReceivableInvoiceDebitDetailRelInvoiceAmountCurrencyAmount - SumOfMixedReceivableInvoiceCreditDetailRelInvoiceAmountCurrencyAmount)	

		DerivedReceivableInvoiceDetailAmount			is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumReceivableInvoiceDetailRelAmounts	

			return (SumOfReceivableInvoiceDetailRelInvoiceAmountCurrencyAmount)	

		DerivedReceivableGLDistributionAmount			is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumReceivableGLDistributionRelDistributionAmountCurrencyAmount	

			return (SumOfReceivableGLDistributionRelDistributionAmountCurrencyAmount)	

		NegativeDerivedReceivableGLDistributionAmount	is a DerivedField
			type is like InternationalAmount
			restricted
			return (DerivedReceivableGLDistributionAmount * -1)

		DerivedExpandedInvoiceEntryTemplateTotalAmount	is a DerivedField
			type is like InternationalAmount
			include SumExpandedInvoiceEntryTemplateTotalAmount
			return SumOfExpandedInvoiceEntryTemplateTotalAmount

		ForceRefreshDerivedExpandedInvoiceEntryTemplateTotalAmount is a DerivedField
            type is like InternationalAmount
			restricted
            initialize SumExpandedInvoiceEntryTemplateTotalAmountDone
            return DerivedExpandedInvoiceEntryTemplateTotalAmount

		DerivedExpandedInvoiceEntryTemplateTotalAmountForPrinting	is a DerivedField
			type is like InternationalAmount
			include SumExpandedInvoiceEntryTemplateTotalAmount
			if (ExpandedInvoiceEntryTemplateFlipAmountsForPrinting)
				return (SumOfExpandedInvoiceEntryTemplateTotalAmount * -1)
			else
				return SumOfExpandedInvoiceEntryTemplateTotalAmount

		DerivedExpandedInvoiceEntryTemplateLineAmountForPrinting	is a DerivedField
			type is like InternationalAmount
			include SumExpandedInvoiceEntryTemplateTotalAmount
			if (ExpandedInvoiceEntryTemplateFlipAmountsForPrinting)
				return (SumOfExpandedInvoiceEntryTemplateLineAmount * -1)
			else
				return SumOfExpandedInvoiceEntryTemplateLineAmount

		DerivedExpandedInvoiceEntryTemplateAOCAmountForPrinting		is a DerivedField
			type is like InternationalAmount
			include SumExpandedInvoiceEntryTemplateTotalAmount
			if (ExpandedInvoiceEntryTemplateFlipAmountsForPrinting)
				return (SumOfExpandedInvoiceEntryTemplateAOCAmount * -1)
			else
				return SumOfExpandedInvoiceEntryTemplateAOCAmount

		DerivedExpandedInvoiceEntryTemplateTaxAmountForPrinting		is a DerivedField
			type is like InternationalAmount
			include SumExpandedInvoiceEntryTemplateTotalAmount
			if (ExpandedInvoiceEntryTemplateFlipAmountsForPrinting)
				return (SumOfExpandedInvoiceEntryTemplateTaxAmount * -1)
			else
				return SumOfExpandedInvoiceEntryTemplateTaxAmount

		OneCharacterPrefix								is a ComputeField
			type is Alpha size 1
			restricted
			(ReceivableInvoice[0:1])

		ReceivableInvoicePrefix							is a ComputeField
			type is Alpha size 3
			restricted
			(ReceivableInvoice[1:3])

		PrefixForValidationProcess						is a ComputeField
			type is Alpha size 2
			restricted
			(ReceivableInvoice[1:2])

		ThreeCharacterPrefixForValidation				is a ComputeField
			type is Alpha size 3
			restricted
			(ReceivableInvoice[1:3])

		FourCharacterPrefixForValidation				is a ComputeField				
			type is Alpha size 4
			restricted
			(ReceivableInvoice[1:4])
		
		FiveCharacterPrefixForValidation				is a ComputeField				
			type is Alpha size 5
			restricted
			(ReceivableInvoice[1:5])

		DerivedProjectCreditMemoPrefixValidation		is a DerivedField				
			type is Alpha size 5
			restricted
			if (Company.ProjectCreditMemoPrefix size = 3)
				return ThreeCharacterPrefixForValidation
			if (Company.ProjectCreditMemoPrefix size = 4)
				return FourCharacterPrefixForValidation
			if (Company.ProjectCreditMemoPrefix size = 5)
				return FiveCharacterPrefixForValidation

		DerivedProjectInvoicePrefixValidation			is a DerivedField					
			type is Alpha size 5
			restricted
			if (Company.ProjectInvoicePrefix size = 3)
				return ThreeCharacterPrefixForValidation
			if (Company.ProjectInvoicePrefix size = 4)
				return FourCharacterPrefixForValidation
			if (Company.ProjectInvoicePrefix size = 5)
				return FiveCharacterPrefixForValidation

		ReceivableInvoiceLineItemRelCount				is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ReceivableInvoiceLineItemRel)

		ReceivableGLDistributionWithProjectRelCount		is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ReceivableGLDistributionWithProjectRel)

		ReceivableGLDistributionRelCount				is a ComputeField
			type is Numeric 6
			restricted
			(instance count of ReceivableGLDistributionRel)

		OriginalReceivableInvoiceDetailAmount			is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumOpenReceivableInvoiceDetailRelInvoiceAmountCurrencyAmount	

			return SumOfOpenReceivableInvoiceDetailRelInvoiceAmountCurrencyAmount	


		ProjectAppliedReceivableInvoiceDetailAmount		is a DerivedField	
			type is like InternationalAmount
			return (AppliedReceivableInvoiceDetailAmount)	








		AppliedReceivableInvoiceDetailAmount			is a DerivedField	
			type is like InternationalAmount
			restricted
			if (ReceivableInvoiceType.MixedSignLines)
				include SumMixedReceivableInvoiceCreditDetailRelAmounts	
				include SumMixedReceivableInvoiceDebitDetailRelAmounts	
				if  (AlternateReceivableInvoiceType.CreditMemo)

					return (SumOfMixedReceivableInvoiceCreditDetailRelApplicationAmountCurrencyAmount - SumOfMixedReceivableInvoiceDebitDetailRelApplicationAmountCurrencyAmount)	
				else

					return (SumOfMixedReceivableInvoiceDebitDetailRelApplicationAmountCurrencyAmount - SumOfMixedReceivableInvoiceCreditDetailRelApplicationAmountCurrencyAmount)	
			else
				include SumReceivableInvoiceDetailRelAmounts	

				return (SumOfReceivableInvoiceDetailRelApplicationAmountCurrencyAmount)	

		AdjustedReceivableInvoiceDetailAmount			is a DerivedField	
			type is like InternationalAmount
			restricted
			if (ReceivableInvoiceType.MixedSignLines)	
				include SumMixedReceivableInvoiceCreditDetailRelAmounts	
				include SumMixedReceivableInvoiceDebitDetailRelAmounts	
				if  (AlternateReceivableInvoiceType.CreditMemo)	
					return (SumOfMixedReceivableInvoiceCreditDetailRelAdjustmentAmountCurrencyAmount - SumOfMixedReceivableInvoiceDebitDetailRelAdjustmentAmountCurrencyAmount)	
				else
					return (SumOfMixedReceivableInvoiceDebitDetailRelAdjustmentAmountCurrencyAmount - SumOfMixedReceivableInvoiceCreditDetailRelAdjustmentAmountCurrencyAmount)	
			else
				include SumReceivableInvoiceDetailRelAmounts	
				return (SumOfReceivableInvoiceDetailRelAdjustmentAmountCurrencyAmount)	

		OpenReceivableInvoiceDetailAmount				is a DerivedField
			type is like InternationalAmount
			default label is "TotalAppliedReceivableInvoiceDetailAmount"
			restricted
			return (AppliedReceivableInvoiceDetailAmount + AdjustedReceivableInvoiceDetailAmount)

		OpenReceivableInvoiceAmount						is a DerivedField
			type is like InternationalAmount
			include SumReceivableInvoiceDetailRelAmounts	
			if  (AlternateReceivableInvoiceType.CreditMemo)
				return (SumOfReceivableInvoiceDetailRelSignedOpenAmount *-1)	
			else
				return (SumOfReceivableInvoiceDetailRelSignedOpenAmount)	

		TotalSignedAppliedAmount						is a DerivedField	
			type is like InternationalAmount
			include SumReceivableInvoiceDetailRelAmounts	
			return (SumOfReceivableInvoiceDetailRelTotalSignedAppliedAmount)	

		ReceivableInvoiceAmountLessTotalAppliedAmount			is a DerivedField	
			type is like InternationalAmount
			restricted
			return (InvoiceAmount.CurrencyAmount - OpenReceivableInvoiceDetailAmount)	//OpenReceivableInvoiceDetailAmount is actually "TotalAppliedReceivableInvoiceDetailAmount"

		OpenReceivableInvoiceAmountSigned				is a DerivedField
			type is like InternationalAmount
			default label is "OpenAmount"
			if (IsReleased)
				if  (AlternateReceivableInvoiceType.CreditMemo)
					return (OpenReceivableInvoiceAmount *-1)
				else
					return OpenReceivableInvoiceAmount
			else
				return OpenReceivableInvoiceAmount

		ReceivableInvoiceDetailPortalRequestedAppliedAmount			is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumReceivableInvoiceDetailRelAmounts
			return (SumOfReceivableInvoiceDetailRelPortalRequestedAppliedAmount)

		OpenReceivableInvoiceAmountLessPortalRequestedAppliedAmount			is a DerivedField	
			type is like InternationalAmount
			restricted
			return 	(OpenReceivableInvoiceAmount - ReceivableInvoiceDetailPortalRequestedAppliedAmount)

		OpenReceivableInvoiceAmountSignedLessPortalRequestedAppliedAmountSigned			is a DerivedField	
			type is like InternationalAmount
			restricted
			if (IsReleased)
				if  (AlternateReceivableInvoiceType.CreditMemo)
					return (OpenReceivableInvoiceAmountLessPortalRequestedAppliedAmount *-1)
				else
					return OpenReceivableInvoiceAmountLessPortalRequestedAppliedAmount
			else
				return OpenReceivableInvoiceAmountLessPortalRequestedAppliedAmount

		DerivedGLPeriod									is a DerivedField
			type is Numeric 2
			restricted
			return (first GLClosePeriodRel.PeriodNumber)

		DerivedGLYear									is a DerivedField
			type is Year
			restricted
			return (first GLClosePeriodRel.GeneralLedgerCloseYear)

		ParentContext									is a DerivedField
			type is Alpha 50
			restricted
			return parentcontext.name

		DerivedDueDate									is a DerivedField
			type is Date

			return (first ReceivableInvoiceDetailRel.DueDate)

		DerivedProject									is a DerivedField
			type is like Project

			return (any ReceivableInvoiceDetailRel.Project)

		DerivedDiscountDate								is a DerivedField
			type is Date
			restricted
			return (any ReceivableInvoiceDetailRel.DiscountDate)

		DerivedSort1									is a DerivedField
			type is Alpha 32
			restricted
			return (ReceivableInvoiceUserSortRel.Sort1)

		DerivedSort2									is a DerivedField
			type is Alpha 32
			restricted
			return (ReceivableInvoiceUserSortRel.Sort2)

		DerivedSort3									is a DerivedField
			type is Alpha 32
			restricted
			return (ReceivableInvoiceUserSortRel.Sort3)

		DerivedSort4									is a DerivedField
			type is Alpha 32
			restricted
			return (ReceivableInvoiceUserSortRel.Sort4)

		DerivedTransactionCount							is a DerivedField
			type is Numeric 7
			return 1

		FirstReceivableInvoiceDetailInvoice				is a DerivedField	
			type is AlphaUpper 22
			include FirstReceivableInvoiceDetailRelReceivableInvoiceDetailIsSummarizeDetailParticipant	

			return (FirstReceivableInvoiceDetailRelReceivableInvoiceDetailInvoice)	

		FirstReceivableInvoiceDetailType				is a DerivedField	
			type is AlphaUpper 1
			include FirstReceivableInvoiceDetailRelReceivableInvoiceDetailIsSummarizeDetailParticipant	

			return (FirstReceivableInvoiceDetailRelReceivableInvoiceDetailReceivableInvoiceDetailType)	

		FirstReceivableInvoiceDetailSequence			is a DerivedField	
			type is Numeric 6
			include FirstReceivableInvoiceDetailRelReceivableInvoiceDetailIsSummarizeDetailParticipant	

			return (FirstReceivableInvoiceDetailRelReceivableInvoiceDetailPaymentSeq)	

		NumberOfLines									is a ComputeField
			type is Numeric 3
			(instance count of ReceivableInvoiceDetailRel)

		DerivedReceivableInvoiceType					is a ConditionalField
			type is Alpha 10
			restricted
			if (AlternateReceivableInvoiceType.Invoice)
				"Invoice"
			else
			if (AlternateReceivableInvoiceType.CreditMemo)
				"Credit"
			else
			if (AlternateReceivableInvoiceType.DebitMemo)
				"Debit"
			else
				blank

		Reference										is a StringField
			type is Alpha 30
			restricted
			ReferenceOrigin					
			" "
			DerivedReceivableInvoiceType 
			" "
			ReceivableInvoice

		DerivedNationalCompany							is a DerivedField
			type is like Company
			restricted
			if (CompanyCustomerRel.NationalAccountIndicator.No)
				return Company
			else
			if (CompanyCustomerRel.NationalAccountIndicator.Child)
				return CompanyCustomerRel.NationalCompany
			else
				return CompanyCustomerRel.Company

		DerivedNationalCustomer							is a DerivedField
			type is like Customer
			restricted
			if (CompanyCustomerRel.NationalAccountIndicator.No)
				return Customer
			else
			if (CompanyCustomerRel.NationalAccountIndicator.Child)
				return NationalAccountRel.NationalAccount.NationalAccountGroup.NatCustomer
			else
				return CompanyCustomerRel.Customer

		SignedTransactionAmount							is a DerivedField
			type is like InternationalAmount
			if (IsReleased and IsCreditMemoIdentity)
				return InvoiceAmount.CurrencyAmount * -1
			else
				return InvoiceAmount.CurrencyAmount

		ExpandedInvoiceEntrySignedTransactionAmount		is a DerivedField
			type is like InternationalAmount
			if (IsCreditMemoIdentity)
				return InvoiceAmount.CurrencyAmount * -1
			else
				return InvoiceAmount.CurrencyAmount

		DerivedTaxAmount								is a DerivedField	//Action Rules of FastUpdate Update Action - Defining "Tax Amount"
			type is like InternationalAmount
			include SumReceivableGLDistributionWithTaxAmountRelDistributionAmountCurrencyAmount	

			return (SumOfReceivableGLDistributionWithTaxAmountRelDistributionAmountCurrencyAmount)	

		DerivedSignedTaxAmount							is a DerivedField 
			type is like InternationalAmount
			return (DerivedTaxAmount * -1)

		DerivedSubTotalForPrinting						is a DerivedField 
			type is like InternationalAmount
			return (SignedTransactionAmount - DerivedSignedTaxAmount)

		ProrateDistributionTotal						is a DerivedField	
			type is like InternationalAmount
			restricted
			include SumProrateDistributionsRelDistributionAmountCurrencyAmount	

			return (SumOfProrateDistributionsRelDistributionAmountCurrencyAmount)	

		NegativeProrateDistributionTotal				is a DerivedField
			type is like InternationalAmount
			restricted
			return (ProrateDistributionTotal * -1)

		DerivedYear										is a DerivedField
			type is AlphaUpper size 4
			restricted
			return GeneralLedgerDate year

		DerivedMonth									is a DerivedField
			type is Numeric size 2
			restricted
			return GeneralLedgerDate month

		DerivedSequence6								is a DerivedField
			type is AlphaRight size 6
			restricted
			return LocalSequenceNum6

		DerivedSequence12								is a DerivedField
			type is AlphaRight size 12
			restricted
			return LocalSequenceNum12

		DerivedPaddedMonth								is a DerivedField
			type is AlphaUpper 2
			restricted
			if (GeneralLedgerDate month < 10)
				DerivedPaddedMonth	= "0" + DerivedMonth
			else
				return GeneralLedgerDate month

		DerivedZeroPaddedSequenceNum12					is a DerivedField
			type is AlphaUpper size 12
			restricted
			return com.lawson.apps.procurement.base.StringUtils.leadingZeros(DerivedSequence12)

		DerivedZeroPaddedSequenceNum6					is a DerivedField
			type is AlphaUpper size 6
			restricted
			return com.lawson.apps.procurement.base.StringUtils.leadingZeros(DerivedSequence6)

		DerivedStructuredJournalReferenceNumber			is a DerivedField
			type is AlphaUpper size 50
			restricted
			DerivedStructuredJournalReferenceNumber = LocalTempJournalReference text


		DueDateBasicLabel								is a LabelField
			"DueDate"

		DueDateOverrideLabel							is a LabelField
			"DueDateOverride"

		DueDateLabel									is a ConditionalField
			type is Text
			if (ShowFirstDueDate)
				DueDateBasicLabel
			else
				DueDateOverrideLabel

		FirstDueDate									is a DerivedField
			type is Date
			return (first ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.DueDate)

		TermsFieldsOverridden							is a DerivedField
			type is Boolean
			restricted
			LDueDateOverride = false
			if (Status.Released)
				LReceivableInvoiceDetailFirstDue = first ReceivableInvoiceDetailRel.ReceivableInvoiceDetail
				if (TermsCode entered)
					if (TermsCode.IsNetTerms
					or TermsCode.IsProxTerms
					or TermsCode.IsSplitTerms)
						if (LReceivableInvoiceDetailFirstDue.DueDate entered
						and DueDate entered
						and LReceivableInvoiceDetailFirstDue.DueDate = DueDate)
							LDueDateOverride = true















				else
				if (DueDate entered)
					LDueDateOverride = true
			return LDueDateOverride

		DerivedTempYear									is a DerivedField
			type is AlphaUpper size 4
			restricted
			return TransactionDate year

		DerivedStructuredParallelReference				is a DerivedField
			type is AlphaUpper 100
			restricted
			if (Company.ParallelReferenceFormat entered)
				LocalTempParallelReference			=	Company.ParallelReferenceFormat
				DerivedStructuredParallelReference	=	LocalTempParallelReference text

				if (!Company.ParallelReferenceCheckDigit.NoCheckDigit)
					DerivedStructuredParallelReference = DerivedStructuredParallelReference +  DerivedParallelReferenceCheckDigit

		DerivedParallelReferenceCheckDigit				is a DerivedField
			type is Alpha 1
			restricted
			if (!Company.ParallelReferenceCheckDigit.NoCheckDigit)
				initialize GenerateCheckDigit
				GenerateCheckDigit.CheckDigitType   = Company.ParallelReferenceCheckDigit
				GenerateCheckDigit.NumberToGenerate = DerivedStructuredParallelReference
				DerivedParallelReferenceCheckDigit	= GenerateCheckDigit.DerivedCheckDigit

		DerivedPaymentType								is a DerivedField
			type is Numeric 1
			if (ForeignEconomicRegulatoryCode.FercType.ServicesOrTransfers)
				return 1
			else
			if (ForeignEconomicRegulatoryCode.FercType.CapitalFlows)
				return 3
			else
			if (ForeignEconomicRegulatoryCode.FercType.TradeInGoods)
				return 5

		DerivedPaymentTypeDesc							is a DerivedField
			type is MessageField
			if (ForeignEconomicRegulatoryCode.FercType.ServicesOrTransfers)
				return "Incoming services or transfers"
			else
			if (ForeignEconomicRegulatoryCode.FercType.CapitalFlows)
				return "Incoming capital flows"
			else
			if (ForeignEconomicRegulatoryCode.FercType.TradeInGoods)
				return "Incoming trade in goods"

		NumberOfTermsForBackgroundConfig				is a DerivedField
			type is Numeric 9
			return config.receivables_number_of_terms_for_background_action

		NumberOfTermsForBackgroundAction				is a DerivedField
			type is Numeric 9
			if (NumberOfTermsForBackgroundConfig not entered)
				return 13
			else
				return NumberOfTermsForBackgroundConfig

		MarkedAsPaid									is a MessageField	
			restricted	
			"ReceivableInvoiceDetailMarkedAsPaid"	

		DerivedFormTitle is a DerivedField
			type is MessageField
			if (InvoiceTypeEntered)
				return InvoiceFormTitle
			else
				return CreateMessage

		CreateMessage is a LabelField
			restricted
			"Create_Invoice_for_Batch<BatchNumber>"

		InvoiceFormTitle is a LabelField
			restricted
			"<ReceivableInvoiceType>_<ReceivableInvoice>_for_Batch<BatchNumber>"




		DerivedDelimiter is a DerivedField
			type is Alpha size 5
			restricted
			LocalConfigurationParameter	= "Generic_Delimiter"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedTenantID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "tenantID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedReleaseID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "releaseID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedLogicalID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "logicalID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedVersionID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "VersionID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedappProdline is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "appProdline"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedIntegrationApplication is a DerivedField
			type is Alpha size 15
			restricted
			LocalConfigurationParameter	= "IntegrationApplication"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedCleanDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "RequiredCleanDocumentID"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedMultipleFEG is a DerivedField
			type is Alpha size 60
			restricted
			LocalConfigurationParameter	= "IsMultipleFEG"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedIntegrationApplicationLocally is a DerivedField
			type is Boolean
			restricted
			if (DerivedIntegrationApplication = "Local.ly")
				return true
			else
				return false

		DerivedIntegratingApplication is a DerivedField
			type is Alpha size 15
			restricted
			LocalConfigurationParameter	= "IntegratingApplication"
			if(FSMBODConfigurationParameterRel exists)
				return FSMBODConfigurationParameterRel.Value

		DerivedIntegratingApplicationGRC is a DerivedField
			type is Boolean
			restricted
			if (DerivedIntegratingApplication = "GRC")
				return true
			else
				return false

		BODActionCode is a DerivedField
			type is Alpha 10
			restricted
			if (action type.Create or ActionCode.Create)
				return "Add"
			else
			if (action type.Update)
				return "Replace"
			else
				return "Delete"

		BODVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return bod id.VariationID

		BODCurrentTimeStamp is a DerivedField
			type is Alpha size 20
			restricted
			return system current timestamp

		BODFormattedCurrentTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODCurrentTimeStamp[1:4] + "-" + BODCurrentTimeStamp[5:6] + "-" + BODCurrentTimeStamp[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"

		MassBODTitleDate is a DerivedField
			type is Alpha size 25
			restricted
			return BODCurrentTimeStamp[7:8]+BODCurrentTimeStamp[5:6]+BODCurrentTimeStamp[1:4]

		BODLastModificationDate is a DerivedField
			type is Alpha size 25
			restricted
			return update stamp.timestamp

		BODLastModificationDateTimeStamp is a DerivedField
			type is Alpha size 25
			restricted
			return BODLastModificationDate[1:4] + "-" + BODLastModificationDate[5:6] + "-" + BODLastModificationDate[7:8] + "T" + BODLastModificationDate[9:10] + ":" + BODLastModificationDate[11:12] + ":" + BODLastModificationDate[13:14] + "Z"

		DerivedFinanceEnterpriseGroup is a DerivedField
			type is AlphaUpper size 4
			restricted
			return GeneralLedgerCompanyRel.FinanceEnterpriseGroup

		DerivedAccountingEntity is a DerivedField
			type is AlphaUpper size 12
			restricted
			if (DerivedCleanDocumentID = "Y")
				return DerivedCrossAccountingEntity
			else
				return GeneralLedgerCompanyRel.AccountingEntity

		DerivedCrossGLC is a DerivedField
			type is Alpha size 20
			restricted
			if (DerivedMultipleFEG = "Y")
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + Company using "%d"
			else
				return Company using "%d"

		DerivedCrossAccountingEntity is a DerivedField
			type is Alpha 20
			restricted
			if(LocalAEAlreadyExecuted != true)
				LocalAEAlreadyExecuted =true
				if (FSMBODGLCCrossReferenceDetailRel.DestinationValue entered)
					LocalAEValue = FSMBODGLCCrossReferenceDetailRel.DestinationValue
					return LocalAEValue
				else
					LocalAEValue = DerivedCrossGLC
					return LocalAEValue
			else
				return LocalAEValue

		DerivedBODAccountingEntity	is a DerivedField
			type is AlphaUpper size 22
			restricted
			if (DerivedCleanDocumentID = "Y")
				return DerivedCrossAccountingEntity
			else
				return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedAccountingEntity

		DerivedDocumentID	is a DerivedField
			type is Alpha size 60
			restricted
			if (DerivedCleanDocumentID = "Y")
				return ReceivableInvoice
			else
				if(System = "BL" and  DerivedIntegrationApplicationLocally and BillingCompanyRel.ManualInvoiceNumbering)
					return Company using "%d" + DerivedDelimiter + DerivedBLGlobalInvoiceNumber
				else
					return Company using "%d" + DerivedDelimiter + ReceivableInvoice

		DerivedRevision	is a DerivedField
			type is Alpha size 60
			restricted
			return ""

		DerivedBODID is a DerivedField
			type is Alpha size 100
			restricted
			return	"infor-nid:" + DerivedTenantID +":" + DerivedBODAccountingEntity +":"+DerivedDocumentID +":" +DerivedRevision + ":" + "?Invoice&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker

		DerivedBODtype is a DerivedField
			type is Alpha size 25
			restricted
			if (ReceivableInvoiceType = "I" or AlternateReceivableInvoiceType = "I")
				return "Invoice"
			else
			if (ReceivableInvoiceType = "C" or AlternateReceivableInvoiceType = "C")
				return "CreditMemo"
			else
			if (ReceivableInvoiceType = "D" or AlternateReceivableInvoiceType = "D")
				return "DebitMemo"
			else
				return ""

		DerivedRefType is a DerivedField
			type is Alpha size 25
			restricted
			if	(DerivedIntegrationApplicationLocally and System = "BL" and BillingInvoiceRel exists)
				return "Shipment"
			else
			if (ReceivableInvoiceType = "I" or AlternateReceivableInvoiceType = "I")
				return "Invoice"
			else
			if (ReceivableInvoiceType = "C" or AlternateReceivableInvoiceType = "C")
				return "CreditNote"
			else
			if (ReceivableInvoiceType = "D" or AlternateReceivableInvoiceType = "D")
				return "DebitMemo"
			else
				return ""

		DerivedReceivableCrossReference is a DerivedField
			type is Alpha size 60
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingCompanyRel.ManualInvoiceNumbering)
				return DerivedBLGlobalInvoiceNumber
			else
				if(ReceivableCrossReference.ReceivableInvoice entered)
					return ReceivableCrossReference.ReceivableInvoice
				else
					return ReceivableInvoice

		DerivedBaseCurrency	is a DerivedField
			type is Alpha size 5
			restricted
			return ReceivableCompanyRel.Currency

		DerivedFunctionalCurrency	is a DerivedField
			type is Alpha size 5
			restricted
			return Company.AccountingEntity.FunctionalCurrency

		DerivedAlternateCurrency	is a DerivedField
			type is Alpha size 5
			restricted
			return Company.AccountingEntity.AlternateCurrency

		DerivedAlternateCurrency2	is a DerivedField
			type is Alpha size 5
			restricted
			return Company.AccountingEntity.AlternateCurrency2

		DerivedBankAccountNumber is a DerivedField
			type is Alpha size 35
			restricted
			if(ReceivableCompanyRel.EFTCreditCashCode entered)
				return ReceivableCompanyRel.EFTCreditCashCode.BankAccountNumber

		DerivedAlphaTransactionDate is a DerivedField
			type is Alpha size 25
			restricted
			return TransactionDate

		DerivedTransactionDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedAlphaTransactionDate[1:4] + "-" + DerivedAlphaTransactionDate[5:6] + "-" + DerivedAlphaTransactionDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"

		DerivedFiscalYear is a DerivedField
			type is Alpha size 5
			restricted
			if(DerivedIntegrationApplicationLocally)
				return DerivedAlphaTransactionDate[1:4]
			else
				return ""

		DerivedFiscalPeriod is a DerivedField
			type is Alpha size 5
			restricted
			if(DerivedIntegrationApplicationLocally)
				return DerivedAlphaTransactionDate[5:6]
			else
				return ""

		DerivedAlphaDueDate is a DerivedField
			type is Alpha size 25
			restricted
			return ReceivableInvoiceDetailRel.DueDate

		DerivedInvoiceDueDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedAlphaDueDate[1:4] + "-" + DerivedAlphaDueDate[5:6] + "-" + DerivedAlphaDueDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"

		DerivedAlphaDiscountDate is a DerivedField
			type is Alpha size 25
			restricted
			if(ReceivableInvoiceDetailRel exist)
				return (first ReceivableInvoiceDetailRel.DiscountDate.DiscDate)

		DerivedReceivableDiscountDate is a DerivedField
			type is Alpha size 25
			restricted
			if(ReceivableInvoiceDetailRel exist and DerivedAlphaDiscountDate != "00000000")
				return DerivedAlphaDiscountDate[1:4] + "-" + DerivedAlphaDiscountDate[5:6] + "-" + DerivedAlphaDiscountDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"
			else
				return ""

		DerivedDiscountPercent is a DerivedField
			type is Alpha size 20
			restricted
			if(ReceivableInvoiceDetailRel exist)
				return ( first ReceivableInvoiceDetailRel.DiscountPercent.DiscPct)

		DerivedDiscountAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (System = "BL" and BillingInvoiceRel exists and BillingInvoiceRel.EnteredDiscount.TransactionAmount entered)
				return BillingInvoiceRel.EnteredDiscount.TransactionAmount
			else
				if(ReceivableInvoiceDetailRel exist)
					for each ReceivableInvoiceDetailRel
						DerivedDiscountAmount += each.DiscountAmount.OrigDiscAmt
					return DerivedDiscountAmount

		DerivedDiscountBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (System = "BL" and BillingInvoiceRel exists and BillingInvoiceRel.EnteredDiscount.TransactionAmount entered)
				return BillingInvoiceRel.EnteredDiscount.TransactionAmount * ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				if(ReceivableInvoiceDetailRel exist)
					return DerivedDiscountAmount * ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

		DerivedDiscountAmount1 is a DerivedField
			type is like InternationalAmount
			restricted
			if (DerivedIntegrationApplicationLocally and System = "BL" and BillingInvoiceRel exists)
				return BillingInvoiceRel.TermsDiscount.TransactionAmount
			else
				if (System = "BL" and BillingInvoiceRel exists)
					return BillingInvoiceRel.EnteredDiscount.TransactionAmount
				else
				if(ReceivableInvoiceDetailRel exist)
					return  ReceivableInvoiceDetailRel.DiscountAmount.OrigDiscAmt[1]
				else
					return 0

		DerivedDiscountBaseAmount1 is a DerivedField
			type is like InternationalAmount
			restricted
			if (DerivedIntegrationApplicationLocally and System = "BL" and BillingInvoiceRel exists)
				return BillingInvoiceRel.TermsDiscount.BaseAmount.EnteredCurrencyAmount
			else
				if (System = "BL" and BillingInvoiceRel exists)
					return BillingInvoiceRel.EnteredDiscount.TransactionAmount * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				else
				if(ReceivableInvoiceDetailRel exist)
					return DerivedDiscountAmount1 * ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
				else
					return 0

		DerivedReportDiscountAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally)
				DerivedReportDiscountAmount = DerivedDiscountAmount1 * InvoiceAmount.ReportAmount1.EnteredCurrencyRate
				return DerivedReportDiscountAmount
			else
				return DerivedDiscountAmount1

		DerivedDiscountAmountOverride is a DerivedField
			type is like InternationalAmount
			restricted
			if (DiscountAmount entered)
				return DiscountAmount
			else
			if (DiscountPercent entered)
				return DiscountPercent * InvoiceAmount.CurrencyAmount
			else
				return blank

		DerivedRegimeCode is a DerivedField
			type is Alpha size 10
			restricted
			if(ReceivableInvoiceDetailRel exist)
				return ReceivableInvoiceDetailRel.RegimeCode
			else
			if(System = "BL" and BillingInvoiceRel exists)
				return BillingInvoiceRel.RegimeCode
			else
				return ""

		DerivedInvoiceTypeCode is a DerivedField
			type is Alpha size 10
			restricted
			if(ReceivableInvoiceDetailRel exist)
				return ReceivableInvoiceDetailRel.InvoiceTypeCode


		DerivedVendorGroup is a DerivedField
			type is Alpha size 5
			restricted
			if(Customer.VendorGroupAndVendor entered)
				return Customer.VendorGroupAndVendor.VendorGroup

		DerivedVendor is a DerivedField
			type is Alpha size 10
			restricted
			if(Customer.VendorGroupAndVendor entered)
				return Customer.VendorGroupAndVendor.Vendor using "%d"

		DerivedBODVendorID	is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedCleanDocumentID = "Y")
				return DerivedVendor
			else
				if(DerivedIntegrationApplicationLocally)
					return Company.FinanceEnterpriseGroup+ DerivedDelimiter + Company.AccountingEntity
				else
					if(Customer.VendorGroupAndVendor entered)
						return Company.FinanceEnterpriseGroup+ DerivedDelimiter + DerivedVendorGroup + DerivedDelimiter + DerivedVendor
					else
						return ""

		DerivedVendorName is a DerivedField
			type is Alpha size 120
			restricted
			if(DerivedIntegrationApplicationLocally)
				return Company.AccountingEntity.Name
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.VendorName
				else
					return ""

		DerivedVendorTaxID	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedIntegrationApplicationLocally)
				return TaxEntityRel.TaxID
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.TaxID
				else
					return ""

		DerivedVendorSwiftID	is a DerivedField
			type is AlphaUpper size 12
			restricted
			if(DerivedIntegrationApplicationLocally)
				return ""
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.SwiftID
				else
					return ""

		DerivedVendorVATRegistrationNumber	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedIntegrationApplicationLocally)
				return ""
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.VATRegistrationNumber
				else
					return ""

		DerivedVendorAddressLine1	is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "IN")
					return ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine1
				else
					return Company.PostalAddress.DeliveryAddress.AddressLine1
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.VendorAddressLine1
				else
					return ""

		DerivedVendorAddressLine2	is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "IN")
					return ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine2
				else
					return Company.PostalAddress.DeliveryAddress.AddressLine2
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.VendorAddressLine2
				else
					return ""

		DerivedVendorAddressLine3	is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "IN")
					return ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine3
				else
					return Company.PostalAddress.DeliveryAddress.AddressLine3
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.VendorAddressLine3
				else
					return ""

		DerivedVendorAddressLine4	is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "IN")
					return ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine4
				else
					return Company.PostalAddress.DeliveryAddress.AddressLine4
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.VendorAddressLine4
				else
					return ""

		DerivedVendorMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "IN")
					return ReceivableProcessLevel.PostalAddress.Municipality
				else
					return Company.PostalAddress.Municipality
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.VendorAddress.Municipality
				else
					return ""

		DerivedVendorStateProvince is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "IN")
					return ReceivableProcessLevel.PostalAddress.StateProvince
				else
					return Company.PostalAddress.StateProvince
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.VendorAddress.StateProvince
				else
					return ""

		DerivedVendorCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "IN")
					return ReceivableProcessLevel.PostalAddress.Country
				else
					return Company.PostalAddress.Country
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.VendorAddress.Country
				else
					return ""

		DerivedVendorPostalCode	is a DerivedField
			type is Alpha size 12
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "IN")
					return ReceivableProcessLevel.PostalAddress.PostalCode
				else
					return Company.PostalAddress.PostalCode
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.VendorAddress.PostalCode
				else
					return ""

		DerivedCountryListID is a DerivedField
			type is Alpha size 25
			restricted
			if(Customer.VendorGroupAndVendor entered and DerivedVendorCountry entered )
				return  "ISO3166-1:Alpha2"


		DerivedBODSupplierID	is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedCleanDocumentID = "Y")
				return DerivedVendor
			else
				if(DerivedIntegrationApplicationLocally)
					return Company.FinanceEnterpriseGroup+ DerivedDelimiter + Company.AccountingEntity
				else
					if(Customer.VendorGroupAndVendor entered)
						return Company.FinanceEnterpriseGroup+ DerivedDelimiter + DerivedVendorGroup + DerivedDelimiter + DerivedVendor
					else
						return ""

		DerivedSupplierName is a DerivedField
			type is Alpha size 120
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "IN")
					return ReceivableProcessLevel.Name
				else
					return Company.Name
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.VendorName
				else
					return ""

		DerivedSupplierTaxID	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "IN")
					return ""
				else
					return TaxEntityRel.TaxID
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.TaxID
				else
					return ""

		DerivedSupplierTaxID1	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "IN")
					return ReceivableProcessLevel.PostalAddress.StateProvinceIDNumber
				else
				if(DerivedCountryCode = "AR")
					return TaxEntityRel.VATRegistrationNumber
				else
					return ""
			else
				return ""

		DerivedSupplierSwiftID	is a DerivedField
			type is AlphaUpper size 12
			restricted
			if(DerivedIntegrationApplicationLocally)
				return ""
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.SwiftID
				else
					return ""

		DerivedSchemeAgencyNameARIIBB is a DerivedField
			type is Alpha size 12
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				return "AR:IIBB"
			else
				return ""

		DerivedSchemeAgencyNameARVAT is a DerivedField
			type is Alpha size 12
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				return "AR:VAT"
			else
				return ""




		DerivedPayFromPartyID	is a DerivedField
			type is Alpha size 20
			restricted
			if (DerivedCleanDocumentID = "Y")
				return Customer using "%d"
			else
				return Company using "%d"+ DerivedDelimiter + Customer using "%d"

		DerivedCustomerName is a DerivedField
			type is Alpha size 120
			restricted
			return Customer.Name

		DerivedCustomerContact is a DerivedField
			type is Alpha size 20
			restricted
			return Customer.Contact

		DerivedCustomerTaxID	is a DerivedField
			type is AlphaUpper size 25
			restricted
			return Customer.TaxID

		DerivedCustomerAddressLine1	is a DerivedField
			type is Alpha size 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCustomerAddressLine2	is a DerivedField
			type is Alpha size 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCustomerAddressLine3	is a DerivedField
			type is Alpha size 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCustomerAddressLine4	is a DerivedField
			type is Alpha size 40
			restricted
			return Customer.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCustomerMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			return Customer.PostalAddress.Municipality

		DerivedCustomerCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			return Customer.PostalAddress.Country

		DerivedCustomerPostalCode	is a DerivedField
			type is AlphaUpper size 12
			restricted
			return Customer.PostalAddress.PostalCode

		DerivedCustomerInternationalPrefix is a DerivedField
			type is Alpha 6
			restricted
			return Customer.PhoneNumber.InternationalPrefix

		DerivedCustomerSubscriberNumber is a DerivedField
			type is Alpha 15
			restricted
			return Customer.PhoneNumber.SubscriberNumber

		DerivedCustomerExtension is a DerivedField
			type is Alpha 10
			restricted
			return Customer.PhoneNumber.Extension

		DerivedCustomerEmail is a DerivedField
			type is Alpha 256
			restricted
			return Customer.EmailAddress

		DerivedCustomerContactTitle is a DerivedField
			type is Alpha 30
			restricted
			return Customer.ContactTitle




		DerivedBillToPartyID	is a DerivedField
			type is Alpha size 25
			restricted
			if(CustomerBillTo entered)
				return Customer using "%d" + DerivedDelimiter + CustomerBillTo using "%d"

		DerivedCustomerBillToName is a DerivedField
			type is Alpha size 120
			restricted
			if(CustomerBillTo entered)
				return CustomerBillTo.Name

		DerivedCustomerBillToAddressLine1	is a DerivedField
			type is Alpha size 40
			restricted
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCustomerBillToAddressLine2	is a DerivedField
			type is Alpha size 40
			restricted
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCustomerBillToAddressLine3	is a DerivedField
			type is Alpha size 40
			restricted
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCustomerBillToAddressLine4	is a DerivedField
			type is Alpha size 40
			restricted
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCustomerBillToMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.Municipality

		DerivedCustomerBillToCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.Country



		DerivedCompanyCustomerVatRegistrationNumber	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(CompanyCustomerRel exist)
				return CompanyCustomerRel.VATRegistrationNumber

		DerivedCompanyCustomerBicID	is a DerivedField
			type is AlphaUpper size 12
			restricted
			if(CompanyCustomerRel exist)
				return CompanyCustomerRel.CustomerDraftBankRel.BicID

		DerivedBOEEFTBankAccount	is a DerivedField
			type is AlphaUpper size 35
			restricted
			if(CompanyCustomerRel exist)
				return CompanyCustomerRel.CustomerDraftBankRel.CustomerDraftBank.BOEEFTBankAccount



		DerivedShipToPartyID	is a DerivedField
			type is Alpha size 60
			restricted
			if (DerivedCleanDocumentID = "Y")
				return Customer using "%d" + DerivedDelimiter + CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.CustomerShipTo using "%d"
			else
				if(System = "BL" and DerivedIntegrationApplicationLocally  and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
					return Company using "%d"+DerivedDelimiter+ Customer using "%d" + DerivedDelimiter + BillingInvoiceRel.CustomerShipTo using "%d"
				else
					if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
						return Company using "%d"+DerivedDelimiter+ Customer using "%d" + DerivedDelimiter + CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.CustomerShipTo using "%d"

		DerivedCustomerShipToName is a DerivedField
			type is Alpha size 120
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally  and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
				return BillingInvoiceRel.CustomerShipTo.Name
			else
				if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
					return CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.Name

		DerivedCustomerShipToAddressLine1	is a DerivedField
			type is Alpha size 40
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
				return BillingInvoiceRel.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine1
			else
				if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
					return CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.ShipToAddress.DeliveryAddress.AddressLine1

		DerivedCustomerShipToAddressLine2	is a DerivedField
			type is Alpha size 40
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally  and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
				return BillingInvoiceRel.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine2
			else
				if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
					return CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.ShipToAddress.DeliveryAddress.AddressLine2

		DerivedCustomerShipToAddressLine3	is a DerivedField
			type is Alpha size 40
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
				return BillingInvoiceRel.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine3
			else
				if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
					return CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.ShipToAddress.DeliveryAddress.AddressLine3

		DerivedCustomerShipToAddressLine4	is a DerivedField
			type is Alpha size 40
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally  and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
				return BillingInvoiceRel.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine4
			else
				if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
					return CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.ShipToAddress.DeliveryAddress.AddressLine4

		DerivedCustomerShipToMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally  and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
				return BillingInvoiceRel.CustomerShipTo.ShipToAddress.Municipality
			else
				if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
					return CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.ShipToAddress.Municipality

		DerivedCustomerShipToCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
				return BillingInvoiceRel.CustomerShipTo.ShipToAddress.Country
			else
				if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
					return CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.ShipToAddress.Country

		DerivedCustomerShipToStateProvince	is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(System = "BL" and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
					return BillingInvoiceRel.CustomerShipTo.ShipToAddress.StateProvince
				else
					if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
						return CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.ShipToAddress.StateProvince
			else
				return ""

		DerivedCustomerShipToPostalCode	is a DerivedField
			type is AlphaUpper size 12
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
				return BillingInvoiceRel.CustomerShipTo.ShipToAddress.PostalCode
			else
				if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
					return CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.ShipToAddress.PostalCode

		DerivedBLCustomerShipToTaxID is a DerivedField
			type is Alpha size 25
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exists and DerivedCountryCode = "IN" )
				return BillingInvoiceRel.CustomerShipTo.VATRegistrationNumber
			else
				if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
					return CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.VATRegistrationNumber
				else
					return ""




		DerivedOrgAmt	is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedBODtype ="CreditMemo")
				return InvoiceAmount.CurrencyAmount * -1
			else
				return InvoiceAmount.CurrencyAmount

		DerivedOrgBaseAmt	is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedBODtype ="CreditMemo")
				return DerivedOrgAmt * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return InvoiceAmount.CurrencyAmount * (InvoiceAmount.FunctionalAmount.EnteredCurrencyRate)

		DerivedDistributionTaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableGLDistributionWithTaxAmountRel exist)
				for each ReceivableGLDistributionWithTaxAmountRel
					DerivedDistributionTaxAmount += each.DistributionAmount.CurrencyAmount
				return DerivedDistributionTaxAmount
			else
				return 0

		DerivedExtendedAmt	is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedBODtype ="CreditMemo")
				return	((InvoiceAmount.CurrencyAmount * -1) - DerivedDistributionTaxAmount - DerivedDiscountAmount)
			else
				if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exists)
					return BillingInvoiceRel.TotalGoods
				else
					return	InvoiceAmount.CurrencyAmount - (DerivedDistributionTaxAmount *-1) - ReceivableInvoiceDetailRel.DiscountAmount.OrigDiscAmt[1]

		DerivedExtendedBaseAmt is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedBODtype ="CreditMemo")
				return DerivedExtendedAmt * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exists)
					return BillingInvoiceRel.TotalGoodsBaseAmount
				else
					return DerivedExtendedAmt * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

		DerivedExtendedPretaxAmt is a DerivedField
			type is like InternationalAmount
			restricted
			if(System = "BL" and BillingInvoiceRel exists)
				return BillingInvoiceRel.InvoiceNetAmount
			else
				if(ReceivableGLDistributionNativeRel exist)
					for each ReceivableGLDistributionNativeRel
						if(each.DistributionAmount.CurrencyAmount < 0)
							DerivedExtendedPretaxAmt += each.DistributionAmount.CurrencyAmount
					return DerivedExtendedPretaxAmt * -1

		DerivedExtendedPretaxAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedBODtype ="CreditMemo")
				if(System = "BL" and BillingInvoiceRel exists)
					return  BillingInvoiceRel.InvoiceNetAmount
				else
					return DerivedExtendedPretaxAmt * -1
			else
				return DerivedExtendedPretaxAmt


		DerivedBLInvoiceNumber is a DerivedField
			type is Alpha size 25
			restricted
			if(System = "BL" and BillingCompanyRel.ManualInvoiceNumbering)
				DerivedBLInvoiceNumber = Description[3:12]
			else
				DerivedBLInvoiceNumber = ReceivableInvoice[3:12]

		DerivedBillingInvoiceNumber is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedBLInvoiceNumber[1:7] = "0000000")
				return DerivedBLInvoiceNumber[8]
			else
			if(DerivedBLInvoiceNumber[1:6] = "000000")
				return DerivedBLInvoiceNumber[7:8]
			else
			if(DerivedBLInvoiceNumber[1:5] = "00000")
				return DerivedBLInvoiceNumber[6:8]
			else
			if(DerivedBLInvoiceNumber[1:4] = "0000")
				return DerivedBLInvoiceNumber[5:8]
			else
			if(DerivedBLInvoiceNumber[1:3] = "000")
				return DerivedBLInvoiceNumber[4:8]
			else
			if(DerivedBLInvoiceNumber[1:2] = "00")
				return DerivedBLInvoiceNumber[3:8]
			else
			if(DerivedBLInvoiceNumber[1] = "0")
				return DerivedBLInvoiceNumber[2:8]
			else
				return DerivedBLInvoiceNumber

		DerivedBillingInvoicePrefix is a DerivedField
			type is Alpha size 25
			restricted
			if(System = "BL" and BillingCompanyRel.ManualInvoiceNumbering)
				return Description[1:2]
			else
				return ReceivableInvoice[1:2]

		DerivedCustomerPurchaseOrder is a DerivedField
			type is Alpha size 22
			restricted
			if (BillingInvoiceRel exist)
				return BillingInvoiceRel.CustomerPurchaseOrder

		DerivedBillingCurrency is a DerivedField
			type is Alpha size 5
			restricted
			if (BillingInvoiceRel exist)
				return BillingInvoiceRel.Currency

		DerivedContract is a DerivedField
			type is Alpha size 22
			restricted
			return ""

		DerivedBLAlphaPretaxBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exists)
				return BillingInvoiceRel.InvoiceNetBaseAmount
			else
				return 0

		DerivedBLPretaxBaseAmount is a DerivedField
			type is Alpha size 60
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exists)
				return DerivedBLAlphaPretaxBaseAmount
			else
				return ""

		DerivedBLPretaxReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and ReceivableInvoiceDetailRel exists)
				if(DerivedBODtype ="CreditMemo")
					return ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount1.EnteredCurrencyAmount * -1
				else
					return ReceivableInvoiceDetailRel.InvoiceAmount.ReportAmount1.EnteredCurrencyAmount
			else
				return 0

		DerivedBLReportCurrency is a DerivedField
			type is Alpha size 5
			restricted
			return Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ReportCurrencyOne



		DerivedBLAOCTaxCode is a DerivedField
			type is Alpha size 10
			restricted
			if (BillingInvoiceRel exist and BillingInvoiceAddOnChargesRel exist)
				return BillingInvoiceAddOnChargesRel.TaxCode
			else
				return ""

		DerivedBLAOCTaxRate is a DerivedField
			type is Decimal size 7.5
			restricted
			if (BillingInvoiceRel exist and BillingInvoiceAddOnChargesRel exist)
				return BillingInvoiceAddOnChargesRel.TaxCode.TxtaxrateRel.Rate  * 100
			else
				return ""

		DerivedBLAOCTaxExemptCode is a DerivedField
			type is Alpha size 10
			restricted
			if (BillingInvoiceRel exist)
				if(BillingInvoiceAddOnChargesRel.TaxExemptCode.Taxable)
					return "Taxable"
				else
				if(BillingInvoiceRel.TaxExemptCode.Exempt)
					return "Exempt"
				else
					return ""

		DerivedBLAddOnCharge is a DerivedField
			type is Alpha size 10
			restricted
			if(BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.BillingInvoiceAddOnCharge.Miscellaneous.Misc



		DerivedRIDFunctionalAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				for each ReceivableInvoiceDetailRel
					DerivedRIDFunctionalAmount += each.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
				return DerivedRIDFunctionalAmount
			else
				return 0

		DerivedRIDFunctionalCurrencyRate is a DerivedField
			type is Decimal size 31.15
			restricted
			if(ReceivableInvoiceDetailRel exists)
				return ReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate

		DerivedRIDAlternateAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				for each ReceivableInvoiceDetailRel
					DerivedRIDAlternateAmount += each.InvoiceAmount.AlternateAmount.EnteredCurrencyAmount
				return DerivedRIDAlternateAmount
			else
				return 0

		DerivedRIDAlternateCurrencyRate is a DerivedField
			type is Decimal size 31.15
			restricted
			if(ReceivableInvoiceDetailRel exists)
				return ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate

		DerivedRIDAlternateAmount2 is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				for each ReceivableInvoiceDetailRel
					DerivedRIDAlternateAmount2 += each.InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount
				return DerivedRIDAlternateAmount2
			else
				return 0

		DerivedRIDAlternateCurrencyRate2 is a DerivedField
			type is Decimal size 31.15
			restricted
			if(ReceivableInvoiceDetailRel exists)
				return ReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate

		DerivedRIDApplicationAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				for each ReceivableInvoiceDetailRel
					DerivedRIDApplicationAmount +=each.ReceivableInvoiceDetailRel.ApplicationAmount.CurrencyAmount
				return DerivedRIDApplicationAmount
			else
				return 0

		DerivedRIDAdjustmentAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				for each ReceivableInvoiceDetailRel
					DerivedRIDAdjustmentAmount +=each.ReceivableInvoiceDetailRel.AdjustmentAmount.CurrencyAmount
				return DerivedRIDAdjustmentAmount
			else
				return 0

		DerivedRIDTotalAppliedAndAdjustmentAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				return DerivedRIDApplicationAmount + DerivedRIDAdjustmentAmount
			else
				return 0

		DerivedStatus is a DerivedField
			type is Alpha 25
			restricted
			if(DerivedRIDTotalAppliedAndAdjustmentAmount = 0)
				return "Open"
			else
			if (DerivedRIDTotalAppliedAndAdjustmentAmount < InvoiceAmount.CurrencyAmount)
				return "PartialPaid"
			else
			if(DerivedRIDTotalAppliedAndAdjustmentAmount = InvoiceAmount.CurrencyAmount or ReceivableInvoiceDetailRel not exists)
				return "Paid"
			else
				return "Open"

		DerivedUseCodeID is a DerivedField
			type is Alpha 25
			restricted
			if(Company.AccountingEntity.AddressCode = "MX")
				return "SATUseCode"
			else
				return "UseCode"

		DerivedRegimeCodeID is a DerivedField
			type is Alpha 25
			restricted
			if(Company.AccountingEntity.AddressCode = "MX")
				return "SATRegimeCode"
			else
				return "RegimeCode"

		DerivedItemGroup is a DerivedField
			type is Alpha 25
			restricted
			if(System = "BL"  and BillingInvoiceRel exists)
				return Company.BusinessGroup
			else
				return ""

		DerivedBillToPartyTaxID is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally)
				return CompanyCustomerRel.VATRegistrationNumber
			else
				return ""

		DerivedBLDiscTransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and System = "BL"  and BillingInvoiceRel exists and BillingInvoiceRel.OrderDiscount.TransactionAmount > 0)
				return BillingInvoiceRel.OrderDiscount.TransactionAmount
			else
				return 0

		DerivedBLOrderDiscountCode is a DerivedField
			type is Alpha size 5
			restricted
			if(DerivedIntegrationApplicationLocally and System = "BL"  and BillingInvoiceRel exists)
				return BillingInvoiceRel.CompanyCustomer.TransientOrderDiscountCode
			else
				return ""

		DerivedBLOrderDiscDescription is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and System = "BL"  and BillingInvoiceRel exists)
				return BillingInvoiceRel.CompanyCustomer.TransientOrderDiscountCode.Description
			else
				return ""

		DerivedBLLetterOfCredit is a DerivedField
			type is Alpha size 20
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exists and BillingInvoiceRel.LetterOfCredit entered)
				for each BillingInvoiceRel.LetterOfCredit split on "-"
					DerivedBLLetterOfCredit = each
					end for each
				return DerivedBLLetterOfCredit
			else
				return ""

		DerivedPrePaymentInvoiceIndicator is a DerivedField
			type is Alpha 10
			restricted
			if(System = "AR" and DerivedIntegrationApplicationLocally and (DerivedCountryCode = "AU" or DerivedCountryCode = "DE" or DerivedCountryCode = "PL" or
				DerivedCountryCode = "NL" or DerivedCountryCode = "NZ" or DerivedCountryCode = "GB" or DerivedCountryCode = "SA"))
				return "false"
			else
				return ""

		DerivedBLBankTransactionCode is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplicationLocally and System = "BL"  and BillingInvoiceRel exists)
				if(DerivedCountryCode ="MX")
					return DerivedBLLetterOfCredit
				else
					return BillingInvoiceRel.BankTransactionCode
			else
			if(System = "AR" and DerivedIntegrationApplicationLocally and (DerivedCountryCode = "AU" or DerivedCountryCode = "DE" or DerivedCountryCode = "PL" or
				DerivedCountryCode = "NL" or DerivedCountryCode = "NZ" or DerivedCountryCode = "GB" or DerivedCountryCode = "SA"))
				return BankTransactionCode
			else
				return ""

		DerivedLCLPaymentMethod is a DerivedField
			type is Alpha size 10
			restricted
			if(DerivedIntegrationApplicationLocally and System = "BL"  and BillingInvoiceRel exists)
				if(DerivedBLBankTransactionCode entered)
					return ""
				else
					return BillingInvoiceRel.BankTransactionCode
			else
			if(System = "AR" and DerivedIntegrationApplicationLocally and (DerivedCountryCode = "AU" or DerivedCountryCode = "DE" or DerivedCountryCode = "PL" or
				DerivedCountryCode = "NL" or DerivedCountryCode = "NZ" or DerivedCountryCode = "GB" or DerivedCountryCode = "SA"))
					return BankTransactionCode
			else
				return ""

		DerivedBLTermsDescription1 is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally  and System = "BL"  and BillingInvoiceRel exists)
				return BillingInvoiceRel.TermsDescription1
			else
				return ""

		DerivedAlphaBLInvoiceDate is a DerivedField
			type is Alpha size 25
			restricted
			if (BillingInvoiceRel exists)
				return BillingInvoiceRel.InvoiceDate
			else
				return ""

		DerivedBLInvoiceDate is a DerivedField
			type is Alpha size 25
			restricted
			if	(DerivedIntegrationApplicationLocally and BillingInvoiceRel exists)
				return DerivedAlphaBLInvoiceDate[1:4] + "-" + DerivedAlphaBLInvoiceDate[5:6] + "-" + DerivedAlphaBLInvoiceDate[7:8]
			else
				return ""

		DerivedVendorBankAccountNumber	is a DerivedField
			type is Alpha size 35
			restricted
			if (DerivedIntegrationApplicationLocally)
				return ""
			else
				if(Customer.VendorGroupAndVendor entered)
					return Customer.VendorGroupAndVendor.Vendor.BankAccountNumber
				else
					return ""

		DerivedBLAddOnChargeCurrency is a DerivedField
			type is Alpha size 5
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.BillingInvoiceAddOnCharge.Miscellaneous.Currency
			else
				return ""

		DerivedBLTotalAddOnAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceRel exists and BillingInvoiceAddOnChargesRel exist)

				return BillingInvoiceAddOnChargesRel.BillingCurrencyAddOnChargeAmount
			else
				return 0

		DerivedBLInvoiceAddOnChargeBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.BaseCurrencyAddOnChargeAmount
			else
				return 0.0

		DerivedBLInvoiceAddOnChargeReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.BillingCurrencyAddOnChargeAmount * DerivedReportingCurrRate
			else
				return 0.0

		DerivedReportingCurrRate is a DerivedField
			type is Decimal size 31.15
			restricted
			if(BillingInvoiceRel.ReceivableInvoiceDebitWithZeroPaddingRel exist)
				return BillingInvoiceRel.ReceivableInvoiceDebitWithZeroPaddingRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			else
			if(BillingInvoiceRel.ReceivableInvoiceCreditWithZeroPaddingRel exist)
				return BillingInvoiceRel.ReceivableInvoiceCreditWithZeroPaddingRel.InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			else
				return 0.0

		DerivedBLInvoiceAddOnChargeTaxCurrAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.TaxableCurrencyAmount
			else
				return 0.0

		DerivedBLInvoiceAddOnChargeTaxBaseCurrAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.TaxableBaseCurrencyAmount
			else
				return 0.0

		DerivedBLInvoiceAddOnChargeTaxReportCurrAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.TaxableCurrencyAmount * DerivedReportingCurrRate
			else
				return 0.0

		DerivedBLAddOnChargeTrackType is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.BillingInvoiceAddOnCharge.Miscellaneous.TrackType
			else
				return ""

		DerivedBLAddOnChargeMisc is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.BillingInvoiceAddOnCharge.Miscellaneous.Misc
			else
				return ""

		DerivedBLAddOnChargeType is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.BillingInvoiceAddOnCharge.Miscellaneous.ChargeType
			else
				return ""

		DerivedBLAddOnChargeSeq is a DerivedField
			type is Alpha size 6
			restricted
			if(DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.BillingInvoiceAddOnCharge.BillingInvoiceAddOnCharge
			else
				return ""

		DerivedBLAOCTaxType is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.TaxCode.TaxType
			else
			if	(BillingInvoiceRel exist and BillingInvoiceAddOnChargesRel exists)
				return "VAT"
			else
				return ""

		DerivedBLAddOnChargeTaxRate is a DerivedField
			type is Decimal size 7.5
			restricted
			if (DerivedIntegrationApplicationLocally and BillingInvoiceAddOnChargesRel exists)
				return BillingInvoiceAddOnChargesRel.TaxCode.TxtaxrateRel.Rate * 100
			else
				return ""

		DerivedCountryCode is a DerivedField
			type is Alpha size 5
			restricted
			if (Company.AccountingEntity.AddressCode entered)
				return Company.AccountingEntity.AddressCode.PostalAddress.Country
			else
				return ""

		DerivedDescription is a DerivedField
			type is Alpha size 60
			restricted
			if (DerivedIntegrationApplication = "Local.ly" and BillingInvoiceRel exists )
				if (BillingInvoiceRel.CustomerPurchaseOrder entered and DerivedCountryCode = "ES" )
					return BillingInvoiceRel.CustomerPurchaseOrder
				else
					return Description
			else
				return Description

		DerivedTaxIdentificationNumber is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedIntegrationApplicationLocally)
				return "TaxIdentificationNumber"
			else
				return ""

		DerivedLastupdateBy is a DerivedField
			type is Alpha size 60
			restricted
			return update stamp.actor

		DerivedBLTermsCode is a DerivedField
			type is Alpha size 10
			restricted
			if(System = "BL"  and BillingInvoiceRel exists)
				return BillingInvoiceRel.TermsCode
			else
				return ""

		DerivedBLTCDescription1 is a DerivedField
			type is Alpha size 60
			restricted
			if(System = "BL"  and BillingInvoiceRel exists)
				return BillingInvoiceRel.TermsDescription1
			else
				return ""

		DerivedBatchNumber is a DerivedField
			type is Alpha size 60
			restricted
			if(System = "BL"  and BillingInvoiceRel exists)
				return BillingInvoiceRel.BatchNumber using "%d"
			else
				return ""

		DerivedBLHoldCode is a DerivedField
			type is Alpha size 4
			restricted
			if(System = "BL"  and BillingInvoiceRel exists)
				return BillingInvoiceRel.HoldCode
			else
				return ""

		DerivedBLPostingDate is a DerivedField
			type is Alpha size 60
			restricted
			if(System = "BL"  and BillingInvoiceRel exists and BillingInvoiceRel.GeneralLedgerDate entered)
				DerivedBLPostingDate = BillingInvoiceRel.GeneralLedgerDate
				return DerivedBLPostingDate[1:4] + "-" + DerivedBLPostingDate[5:6] + "-" + DerivedBLPostingDate[7:8]
			else
				return ""

		DerivedTotalReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if (DerivedIntegrationApplicationLocally)
				return DerivedOrgAmt  * InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			else
				return 0

		DerivedSubInvoiceType is a DerivedField
			type is Alpha size 20
			restricted
			if (DerivedIntegrationApplicationLocally)
				if(System = "BL" and BillingInvoiceRel exist and ReceivableInvoiceType = "C"   and DerivedCountryCode = "MX")
					return BillingInvoiceRel.ReasonCode
				else
				if(System = "BL" and BillingInvoiceRel exist and DerivedCountryCode = "AR" and BillingInvoiceRel.GlobalDocumentType entered)
					return BillingInvoiceRel.GlobalDocumentType
				else
				if(System = "AR" and DerivedCountryCode = "AR" and GlobalDocumentType entered)
					return GlobalDocumentType
				else
					return ""
			else
				return ""

		DerivedBLGlobalInvoiceNumber is a DerivedField
			type is Alpha size 20
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exists and BillingCompanyRel.ManualInvoiceNumbering)
				for each BillingInvoiceRel.GlobalInvoiceNumber split on "-"
					DerivedBLGlobalInvoiceNumber += each
				return DerivedBLGlobalInvoiceNumber
			else
				return ""

		DerivedAlternateDocumentID	is a DerivedField
			type is Alpha size 60
			restricted
			if (DerivedCleanDocumentID = "Y")
				return ReceivableInvoice
			else
				if(DerivedIntegrationApplicationLocally )
					if(System = "BL"  and BillingCompanyRel.ManualInvoiceNumbering)
						return DerivedBLGlobalInvoiceNumber
					else
					if(System = "BL" and DerivedCountryCode = "AR" and  BillingInvoiceRel exists)
						if(BillingInvoiceRel.CertificationNumber entered)
							return DerivedBLCertificationNumber
						else
							return ""
					else
					if(System = "BL" and DerivedCountryCode = "MX" and  BillingInvoiceRel exists)
						return BillingInvoiceRel.CertificationNumber
					else
					if(System = "BL" and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
						return DerivedWSBillOfLading
					else
					if(System = "AR" and DerivedCountryCode = "AR")
						if(CertificationNumber entered )
							return DerivedARCertificationNumber
						else
							return ""
					else
					if(System = "AR" and DerivedCountryCode = "MX")
						return CertificationNumber
					else
						return Company using "%d" + DerivedDelimiter + ReceivableInvoice
				else
					return Company using "%d" + DerivedDelimiter + ReceivableInvoice

		DerivedDisplayID	is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(System = "BL"  and BillingInvoiceRel exists and  BillingCompanyRel.ManualInvoiceNumbering)
					return DerivedBLGlobalInvoiceNumber
				else
				if(System = "BL"  and BillingInvoiceRel exists  and (DerivedCountryCode = "AR" or DerivedCountryCode = "CL"))
					if(BillingInvoiceRel.CertificationNumber entered)
						return DerivedBLCertificationNumber
					else
						return ""
				else
				if(System = "AR"  and DerivedCountryCode = "AR")
					if(CertificationNumber entered )
						return DerivedARCertificationNumber
					else
						return ""
				else
					return ReceivableInvoice
			else
				return ReceivableInvoice

		DerivedOriginalDocumentID is a DerivedField
			type is Alpha size 60
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exists)
				if(BillingCompanyRel.ManualInvoiceNumbering)
					return DerivedAccountingEntity + DerivedDelimiter + DerivedBLGlobalInvoiceNumber
				else
				if(BillingInvoiceRel.OriginalBillingInvoice.InvoiceNumber entered)
					return Company using "%d"+DerivedDelimiter + DerivedBillingOriginalDocumentID
				else
					return ""
			else
			if(System = "AR" and DerivedIntegrationApplicationLocally and (DerivedCountryCode = "AU" or DerivedCountryCode = "DE" or DerivedCountryCode = "PL" or
				DerivedCountryCode = "NL" or DerivedCountryCode = "NZ" or DerivedCountryCode = "GB" or DerivedCountryCode = "SA"))
				return Company using "%d" + DerivedDelimiter + ReceivableInvoice
			else
				return ""

		DerivedInvCorrectionReasonCode is a DerivedField
			type is Alpha size 12
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "SA")
				if(ReceivableInvoiceType = "C" or ReceivableInvoiceType = "D")
					if(System = "BL")
						return BillingInvoiceRel.ReasonCode
					else
						return CreditDebitMemoReason
				else
					return ""
			else
				return ""

		DerivedRInvGeneralLedgerDate is a DerivedField
			type is Alpha size 60
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" )
				DerivedRInvGeneralLedgerDate = GeneralLedgerDate
				return DerivedRInvGeneralLedgerDate[1:4] + "-" + DerivedRInvGeneralLedgerDate[5:6] + "-" + DerivedRInvGeneralLedgerDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"
			else
			if(System = "BL"  and DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				return DerivedBLPostingDate
			else
				return ""

		DerivedProcessLevelID	is a DerivedField
			type is Alpha size 25
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" )
				return Company using "%d" + DerivedDelimiter +  ReceivableProcessLevel
			else
				return ""

		DerivedProcessLevelName	is a DerivedField
			type is Alpha size 120
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ReceivableProcessLevel.Name
			else
				return ""

		DerivedPLevelStateProvinceIDNumber	is a DerivedField
			type is Alpha size 25
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ReceivableProcessLevel.PostalAddress.StateProvinceIDNumber
			else
				return ""

		DerivedProcessLevelAddress1	is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine1
			else
				return ""

		DerivedProcessLevelAddress2	is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine2
			else
				return ""

		DerivedProcessLevelAddress3	is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine3
			else
				return ""

		DerivedProcessLevelAddress4	is a DerivedField
			type is Alpha size 40
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ReceivableProcessLevel.PostalAddress.DeliveryAddress.AddressLine4
			else
				return ""

		DerivedProcessLevelMunicipality	is a DerivedField
			type is Alpha size 58
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ReceivableProcessLevel.PostalAddress.Municipality
			else
				return ""

		DerivedProcessLevelStateProvince is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ReceivableProcessLevel.PostalAddress.StateProvince
			else
				return ""

		DerivedProcessLevelCountry	is a DerivedField
			type is AlphaUpper size 3
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ReceivableProcessLevel.PostalAddress.Country
			else
				return ""

		DerivedProcessLevelPostalCode	is a DerivedField
			type is Alpha size 12
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return ReceivableProcessLevel.PostalAddress.PostalCode
			else
				return ""

		DerivedLineDescriptionIN is a DerivedField
			type is Alpha size 60
			restricted
			if	(DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN")
				return Description
			else
				return ""

		DerivedDummyQuantity is a DerivedField
			type is Decimal size 13.4
			restricted
			if(System = "AR" and DerivedIntegrationApplicationLocally and (DerivedCountryCode = "AU" or DerivedCountryCode = "DE" or DerivedCountryCode = "PL" or
				DerivedCountryCode = "NL" or DerivedCountryCode = "NZ" or DerivedCountryCode = "GB" or DerivedCountryCode = "SA") and (ReceivableInvoiceType.CreditMemo))
				return -1
			else
				return 0

		DerivedCustomerEndPointSchemeID is a DerivedField
			type is Alpha size 12
			restricted
			if (DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "AU")
					return "AU:ABN"
				else
				if(DerivedCountryCode = "GB")
					return "GB:VAT"
				else
				if(DerivedCountryCode = "NL")
					return "NL:KVK"
				else
				if(DerivedCountryCode = "DE")
					return "DE:VAT"
				else
				if(DerivedCountryCode = "NZ")
					return "GLN"
				else
					return ""
			else
				return ""

		DerivedCustomerPartySchemeName is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedIntegrationApplicationLocally and DerivedCountryCode = "NZ")
				return "TaxIdentificationNumber"
			else
				return ""

		DerivedAlternateDocumentSchemeName	is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(DerivedCountryCode = "MX" or (System = "BL" and DerivedCountryCode = "AR"))
					return "lcl.Government"
				else
				if (BillingInvoiceRel exist and DerivedCountryCode = "IN" and (BillingInvoiceRel.CustomerShipTo.ShipToAddress.Country != "IN" or BillingInvoiceRel.CustomerShipTo.TaxRegistrationType.SpecialEconomicZone))
					return "ExportID"
				else
					return ""
			else
				return ""

		DerivedCertificationDate	is a DerivedField
			type is Alpha size 20
			restricted
			if(DerivedIntegrationApplicationLocally)
				if(System = "BL" and BillingInvoiceRel exists and BillingInvoiceRel.CertificationDate entered)
					DerivedCertificationDate = BillingInvoiceRel.CertificationDate
					return DerivedCertificationDate[1:4] + "-" + DerivedCertificationDate[5:6] + "-" + DerivedCertificationDate[7:8]+ "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"
				else
				if(System = "AR" and  DerivedCountryCode = "MX" and CertificationDate entered )
					DerivedCertificationDate = CertificationDate
					return DerivedCertificationDate[1:4] + "-" + DerivedCertificationDate[5:6] + "-" + DerivedCertificationDate[7:8]+ "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"
				else
					return ""
			else
				return ""

		DerivedBLCertificationNumber is a DerivedField
			type is Alpha size 40
			restricted
			if(System = "BL" and  BillingInvoiceRel exists and BillingInvoiceRel.CertificationNumber entered)
				for each BillingInvoiceRel.CertificationNumber split on "-"
					DerivedBLCertificationNumber += each
				LocalBLCertificationNumber = DerivedBLCertificationNumber
				DerivedBLCertificationNumber =""
				for each LocalBLCertificationNumber split on "_"
					DerivedBLCertificationNumber += each
				return DerivedBLCertificationNumber
			else
				return ""

		DerivedARCertificationNumber is a DerivedField
			type is Alpha size 40
			restricted
			if(CertificationNumber entered)
				for each CertificationNumber split on "-"
					DerivedARCertificationNumber += each
				LocalARCertificationNumber = DerivedARCertificationNumber
				DerivedARCertificationNumber =""
				for each LocalARCertificationNumber split on "_"
					DerivedARCertificationNumber += each
				return DerivedARCertificationNumber
			else
				return ""

		DerivedBillingOriginalDocumentID is a DerivedField
			type is AlphaUpper 10
			restricted
			if(System = "BL" and BillingInvoiceRel exist and BillingInvoiceRel.OriginalBillingInvoice.InvoiceNumber entered)
				return BillingInvoiceRel.OriginalBillingInvoice.InvoicePrefix+DerivedZeroPaddedInvoiceNumber
			else
				return ""

		DerivedZeroPaddedInvoiceNumber is a DerivedField
			type is AlphaUpper 8
			restricted
			if(DerivedAlphaRightInvoiceNumber entered)
				return com.lawson.apps.procurement.base.StringUtils.leadingZeros(DerivedAlphaRightInvoiceNumber)
			else
				return ""

		DerivedAlphaRightInvoiceNumber is a DerivedField
			type is AlphaRight 8
			restricted
			if(System = "BL" and BillingInvoiceRel exist and BillingInvoiceRel.OriginalBillingInvoice.InvoiceNumber entered)
				return BillingInvoiceRel.OriginalBillingInvoice.InvoiceNumber
			else
				return ""

		DerivedCustomerPartyTaxID	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				return Customer.VATRegistrationNumber
			else
				if(CompanyCustomerRel exist)
					return CompanyCustomerRel.VATRegistrationNumber
				else
					return ""

		DerivedCustomerPartyTaxID1	is a DerivedField
			type is AlphaUpper size 25
			restricted
			if(DerivedIntegrationApplicationLocally and DerivedCountryCode = "AR")
				return Customer.TaxID
			else
				return ""

		DerivedMXSATUseCode is a DerivedField
			type is Alpha size 20
			restricted
			if(System = "BL" and DerivedIntegrationApplicationLocally and BillingInvoiceRel exists and BillingInvoiceRel.LetterOfCredit entered and DerivedCountryCode ="MX")
				for each BillingInvoiceRel.LetterOfCredit split on "-"
					DerivedMXSATUseCode = each
				return DerivedMXSATUseCode
			else
				return ""

		DerivedBLLastupdateBy is a DerivedField
			type is Alpha size 60
			restricted
			if(System = "BL")
				return update stamp.actor
			else
				return ""

		DerivedReportCurrency is a DerivedField
			type is Alpha size 5
			restricted
			if(DerivedIntegrationApplicationLocally)
				return Company.CustomerBusinessGroup.FinanceEnterpriseGroup.ReportCurrencyOne
			else
				return OriginalCurrency

		DerivedWSIntrastatPortCode is a DerivedField
			type is Alpha size 5
			restricted
			if (DerivedIntegrationApplicationLocally  and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
				if(BillingInvoiceRel.CustomerShipTo.ShipToAddress.Country != "IN" or BillingInvoiceRel.CustomerShipTo.TaxRegistrationType.SpecialEconomicZone)
					return BillingInvoiceRel.WarehouseShipment.TransientIntrastatPortCode
				else
					return ""
			else
				return ""

		DerivedWSBillOfLading is a DerivedField
			type is Alpha size 22
			restricted
			if (DerivedIntegrationApplicationLocally and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
				if(BillingInvoiceRel.CustomerShipTo.ShipToAddress.Country != "IN" or BillingInvoiceRel.CustomerShipTo.TaxRegistrationType.SpecialEconomicZone)
					return BillingInvoiceRel.WarehouseShipment.BillOfLading
				else
					return ""
			else
				return ""

		DerivedWShipDate is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedIntegrationApplicationLocally  and BillingInvoiceRel exist and DerivedCountryCode = "IN" )
				if(BillingInvoiceRel.CustomerShipTo.ShipToAddress.Country != "IN" or BillingInvoiceRel.CustomerShipTo.TaxRegistrationType.SpecialEconomicZone)
					if(BillingInvoiceRel.WarehouseShipment.ShipDate entered)
						DerivedWShipDate = BillingInvoiceRel.WarehouseShipment.ShipDate
						return DerivedWShipDate[1:4] + "-" + DerivedWShipDate[5:6] + "-" + DerivedWShipDate[7:8]
					else
						return ""
				else
					return ""
			else
				return ""

		DerivedInvoiceAllowanceOrderDiscSequence is a DerivedField
			type is Numeric 9
			restricted
			if(System = "BL" and BillingInvoiceRel exist and BillingInvoiceRel.OrderDiscount.TransactionAmount > 0)
				return 1
			else
				return 0

		DerivedInvoiceAllowanceEnteredDiscSequence is a DerivedField
			type is Numeric 9
			restricted
			if(System = "BL" and BillingInvoiceRel exist and BillingInvoiceRel.EnteredDiscount.TransactionAmount > 0 and DerivedInvoiceAllowanceOrderDiscSequence > 0)
				return 2
			else
			if (System = "BL" and BillingInvoiceRel exist  and BillingInvoiceRel.EnteredDiscount.TransactionAmount > 0)
				return 1
			else
				return 0

		DerivedBLInvOrderDiscTransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(System = "BL" and BillingInvoiceRel exist and BillingInvoiceRel.OrderDiscount.TransactionAmount > 0)
				return BillingInvoiceRel.OrderDiscount.TransactionAmount
			else
				return 0

		DerivedBLInvEnteredDiscTransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(System = "BL" and BillingInvoiceRel exist and BillingInvoiceRel.EnteredDiscount.TransactionAmount > 0)
				return BillingInvoiceRel.EnteredDiscount.TransactionAmount
			else
				return 0

		DerivedBLInvAllowanceOrderDiscountReasonCode is a DerivedField
			type is Alpha size 4
			restricted
			if(DerivedIntegrationApplicationLocally and System = "BL"  and BillingInvoiceRel exists )
				return BillingInvoiceRel.CompanyCustomer.TransientOrderDiscountCode.OrderDiscountCode
			else
				return ""

		DerivedBlInvAllowanceEnteredDiscount is a DerivedField
			type is Alpha size 25
			restricted
			if (DerivedIntegrationApplicationLocally)
				return "EnteredDiscount"
			else
				return ""


		ReceivableInvoiceXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			ReceivableInvoiceXMLBOD = template.IONInvoiceXML_ReceivableInvoice_ST document for this instance

		ReceivableInvoiceSupplierPartyXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedCleanDocumentID = "Y")
				ReceivableInvoiceSupplierPartyXMLBOD = template.IONInvoice_Vendor_SupplierParty_CleanDocIDXML_ST document for this instance
				return ReceivableInvoiceSupplierPartyXMLBOD
			else
				if (DerivedIntegrationApplicationLocally)
					ReceivableInvoiceSupplierPartyXMLBOD = template.IONInvoice_Vendor_SupplierParty_XML_ST document for this instance
					return ReceivableInvoiceSupplierPartyXMLBOD
				else
					if (DerivedVendor entered)
						ReceivableInvoiceSupplierPartyXMLBOD = template.IONInvoice_Vendor_SupplierParty_XML_ST document for this instance
						return ReceivableInvoiceSupplierPartyXMLBOD
					else
						return ""

		ReceivableInvoiceRemitToPartyXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedCleanDocumentID = "Y")
				ReceivableInvoiceRemitToPartyXMLBOD = template.IONInvoice_Vendor_RemitToParty_CleanDocIDXML_ST document for this instance
				return ReceivableInvoiceRemitToPartyXMLBOD
			else
				if(DerivedIntegrationApplicationLocally)
					ReceivableInvoiceRemitToPartyXMLBOD = template.IONInvoice_Vendor_RemitToParty_XML_ST document for this instance
					return ReceivableInvoiceRemitToPartyXMLBOD
				else
					if (DerivedVendorGroup entered and DerivedVendor entered)
						ReceivableInvoiceRemitToPartyXMLBOD = template.IONInvoice_Vendor_RemitToParty_XML_ST document for this instance
						return ReceivableInvoiceRemitToPartyXMLBOD
					else
						return ""

		ReceivableInvoiceCreditorPartyXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedCleanDocumentID = "Y")
				ReceivableInvoiceCreditorPartyXMLBOD = template.IONInvoice_Vendor_CreditorParty_CleanDocIDXML_ST document for this instance
				return ReceivableInvoiceCreditorPartyXMLBOD
			else
				if(DerivedIntegrationApplicationLocally)
					ReceivableInvoiceCreditorPartyXMLBOD = template.IONInvoice_Vendor_CreditorParty_XML_ST document for this instance
					return ReceivableInvoiceCreditorPartyXMLBOD
				else
					if (DerivedVendorGroup entered and DerivedVendor entered)
						ReceivableInvoiceCreditorPartyXMLBOD = template.IONInvoice_Vendor_CreditorParty_XML_ST document for this instance
						return ReceivableInvoiceCreditorPartyXMLBOD
					else
						return ""

		ReceivableInvoiceBillToPartyXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (Customer entered and CustomerBillTo entered)
				ReceivableInvoiceBillToPartyXMLBOD = template.IONInvoice_Vendor_BillToParty_XML_ST document for this instance
				return ReceivableInvoiceBillToPartyXMLBOD
			else
				return ""

		ReceivableInvoicePayFromPartyXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (Customer entered and CustomerBillTo entered)
				ReceivableInvoicePayFromPartyXMLBOD = template.IONInvoice_Vendor_PayFromParty_XML_ST document for this instance
				return ReceivableInvoicePayFromPartyXMLBOD
			else
				return ""

		ReceivableInvoiceShipFromPartyXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (DerivedIntegrationApplicationLocally and DerivedCountryCode = "IN" and ReceivableProcessLevel entered)
				ReceivableInvoiceShipFromPartyXMLBOD = template.IONInvoice_ReceivableInvoice_ShipFromParty_XML_ST document for this instance
				return ReceivableInvoiceShipFromPartyXMLBOD
			else
				return ""

		ReceivableInvoiceShipToPartyXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(DerivedCleanDocumentID = "Y")
				ReceivableInvoiceShipToPartyXMLBOD = template.IONInvoice_ReceivableInvoice_ShipToParty_CleanDocIDXML_ST document for this instance
				return ReceivableInvoiceShipToPartyXMLBOD
			else
				ReceivableInvoiceShipToPartyXMLBOD = template.IONInvoice_ReceivableInvoice_ShipToPartyXML_ST document for this instance
				return ReceivableInvoiceShipToPartyXMLBOD


		BillingInvoiceLineXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (BillingInvoiceLineRel exist)
				for each BillingInvoiceLineRel
					each.LocalOriginalCurrency			= OriginalCurrency
					each.LocalBasecurrency				= DerivedBaseCurrency
					each.LocalDerivedRefType			= DerivedRefType
					each.LocalAlphaExtendedReportAmount			= each.ExtentedAmount * InvoiceAmount.ReportAmount1.EnteredCurrencyRate
					each.LocalExtendedReportAmount				= each.LocalAlphaExtendedReportAmount
					if(DerivedIntegrationApplicationLocally)
						each.LocalAlphaTotalPretaxReportAmount	= each.LineNetAmount.BaseAmount.EnteredCurrencyAmount * InvoiceAmount.ReportAmount1.EnteredCurrencyRate
						each.LocalTotalPretaxReportAmount		= each.LocalAlphaTotalPretaxReportAmount
						each.LocalReportAmount					= each.TaxTotal * InvoiceAmount.ReportAmount1.EnteredCurrencyRate
						if(DerivedCountryCode = "IN")
							each.LocalLineDescriptionIN=DerivedLineDescriptionIN
					each.LocalShipToPartyID						= DerivedShipToPartyID
					BillingInvoiceLineXMLBOD += template.IONInvoice_BillingInvoiceLine_InvoiceLine_XML_ST document for each
				return BillingInvoiceLineXMLBOD


		BillingInvoiceTaxXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(System = "BL" and BillingInvoiceRel exists and BillingInvoiceRel.TaxCode entered)
				for each BillingInvoiceRel
					BillingInvoiceTaxXMLBOD = template.IONInvoice_BillingInvoice_Tax_XML_ST document for each
				return BillingInvoiceTaxXMLBOD
			else
				return ""


		BillingInvoiceAddOnChargeXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(System = "BL" and BillingInvoiceRel exists)
				if (BillingGLDistributionHeaderRel exist)
					initialize LocalAOCCount
					for each BillingGLDistributionHeaderRel
						if(each.PostingType.MiscellaneousSalesCr)
							LocalAOCCount +=1
							each.LocalAddOnCharge				= DerivedBLAddOnCharge
							each.LocalBODAccountingEntity 		= DerivedBODAccountingEntity
							each.LocalOriginalCurrency 			= DerivedBillingCurrency
							each.LocalBasecurrency				= Company.Currency
							each.LocalReportCurrency			= DerivedBLReportCurrency
							each.LocalTaxRate					= DerivedBLAOCTaxRate
							each.LocalBLTaxCode					= DerivedBLAOCTaxCode
							each.LocalTaxExemptCode				= DerivedBLAOCTaxExemptCode
							each.LocalTotalAddOnAmount			= DerivedBLTotalAddOnAmount
							each.LocalInvoiceAddOnChargeBaseAmount   = DerivedBLInvoiceAddOnChargeBaseAmount
							each.LocalInvoiceAddOnChargeReportAmount = DerivedBLInvoiceAddOnChargeReportAmount
							each.LocalInvoiceAddOnChargeTaxCurrAmount= DerivedBLInvoiceAddOnChargeTaxCurrAmount
							each.LocalInvoiceAddOnChargeTaxBaseCurrAmount = DerivedBLInvoiceAddOnChargeTaxBaseCurrAmount
							each.LocalInvoiceAddOnChargeTaxReportCurrAmount = DerivedBLInvoiceAddOnChargeTaxReportCurrAmount
							each.LocalBLAOCCurrency				= DerivedBLAddOnChargeCurrency
							each.LocalBLAddOnChargeTrackType 	= DerivedBLAddOnChargeTrackType
							each.LocalBLAddOnChargeMisc			= DerivedBLAddOnChargeMisc
							each.LocalBLAOCTaxType				= DerivedBLAOCTaxType
							each.LocalBLAddOnChargeTaxRate		= DerivedBLAddOnChargeTaxRate
							each.LocalBLAddOnChargeSeq			= DerivedBLAddOnChargeSeq
							each.LocalBLAddOnChargeType			= DerivedBLAddOnChargeType
							BillingInvoiceAddOnChargeXMLBOD += template.IONInvoice_BillingGLDistribution_Charge_XML_ST document for each
					return BillingInvoiceAddOnChargeXMLBOD
			else
				return ""



		ReceivableInvoiceDummyLineXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			initialize LocalInvoiceLineSequence
			if(DerivedIntegrationApplicationLocally and ReceivableGLDistributionInvoiceRel exist)
				if((DerivedCountryCode ="IN" and (System ="AR" or System ="IB")) or ((DerivedCountryCode = "AU" or DerivedCountryCode = "DE" or DerivedCountryCode = "PL" or
					DerivedCountryCode = "NL" or DerivedCountryCode = "NZ" or DerivedCountryCode = "GB" or DerivedCountryCode = "SA") and (System ="AR")))
					for each ReceivableGLDistributionInvoiceRel
						if (each.AccumulationType.Detail)
							if(each.TaxCode not entered)
								LocalInvoiceLineSequence +=1
								each.LocalInvoiceDummyLineSequence	=	LocalInvoiceLineSequence
								each.LocalBODAccountingEntity 		=	DerivedBODAccountingEntity
								each.LocalLineDescriptionIN			=	DerivedLineDescriptionIN
								each.LocalDummyQuantity				=   DerivedDummyQuantity
								ReceivableInvoiceDummyLineXMLBOD 	+=	template.IONInvoiceXML_ReceivableInvoiceDummyLineXML_ST document for each
					return ReceivableInvoiceDummyLineXMLBOD



		ProjectContractInvoiceLineXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(System = "PS" and DerivedIntegrationApplication = "Local.ly" and DerivedCountryCode = "IN")
				if(ProjectContractInvoiceLineRel exists)
					for each ProjectContractInvoiceLineRel
						ProjectContractInvoiceLineXMLBOD += template.IONInvoice_ProjectContractInvoiceLine_XML_ST document for each
					return ProjectContractInvoiceLineXMLBOD
			else
				return ""

		BillingInvoiceAllowanceOrderDiscountXML is a DerivedField
			type is XMLDocument
			restricted
			if (DerivedIntegrationApplicationLocally and System = "BL" and BillingInvoiceRel exists and BillingInvoiceRel.OrderDiscount.TransactionAmount > 0)
				BillingInvoiceAllowanceOrderDiscountXML = template.IONInvoice_BillingInvoice_Allowance_OrderDiscount_XML_ST document for this instance
				return BillingInvoiceAllowanceOrderDiscountXML
			else
				return ""

		BillingInvoiceAllowanceEnteredDiscountXML is a DerivedField
			type is XMLDocument
			restricted
			if (DerivedIntegrationApplicationLocally and System = "BL" and BillingInvoiceRel exists and BillingInvoiceRel.EnteredDiscount.TransactionAmount > 0)
				BillingInvoiceAllowanceEnteredDiscountXML = template.IONInvoice_BillingInvoice_Allowance_EnteredDiscount_XML_ST document for this instance
				return BillingInvoiceAllowanceEnteredDiscountXML
			else
				return ""




		DerivedRTAccountingEntity is a DerivedField
			type is AlphaUpper size 12
			restricted
			return GeneralLedgerCompanyRel.AccountingEntity

		DerivedRTBODAccountingEntity	is a DerivedField
			type is Alpha size 22
			restricted
			return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedRTAccountingEntity

		DerivedRTDocumentID	is a DerivedField
			type is Alpha size 60
			restricted
			return Company using "%d"+ DerivedDelimiter + ReceivableInvoice

		DerivedRTBODID is a DerivedField
			type is Alpha size 200
			restricted
			return	"infor-nid:" + DerivedTenantID +":" + DerivedRTBODAccountingEntity +":"+ DerivedLocation +":"+ DerivedRTDocumentID +":" +DerivedRevision + ":" + "?ReceivableTransaction&verb=Sync&TrackerID=" + LocalFSMInboundBODTracker

		BODRTVariationID is a DerivedField
			type is Alpha size 25
			restricted
			return bod id.VariationID

		DerivedRTLastupdateBy is a DerivedField
			type is Alpha size 60
			restricted
			return update stamp.actor

		DerivedRTTermsCodeDiscountPercent is a DerivedField
			type is Decimal size 13.5
			restricted
			return TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent

		DerivedLocation	is a DerivedField
			type is Alpha size 25
			restricted
			return ""

		DerivedCustomerBillToStateProvince is a DerivedField
			type is AlphaUpper size 40
			restricted
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.StateProvince

		DerivedCustomerBillToPostalCode	is a DerivedField
			type is AlphaUpper size 40
			restricted
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.PostalCode

		DerivedCustomerStateProvince is a DerivedField
			type is Alpha size 40
			restricted
			return Customer.PostalAddress.StateProvince

		DerivedReceivableStyle is a DerivedField
			type is Alpha size 25
			restricted
			if (ReceivableInvoiceType = "I")
				return "Invoice"
			else
			if (ReceivableInvoiceType = "C")
				return "CreditMemo"
			else
			if (ReceivableInvoiceType = "D")
				return "DebitMemo"
			else
			if (ReceivableInvoiceType = "M")
				if(AlternateReceivableInvoiceType = "I")
					return "MixedInvoce"
				else
				if(AlternateReceivableInvoiceType = "C")
					return "MixedCredit"
				else
				if(AlternateReceivableInvoiceType = "D")
					return "MixedDebit"

		DerivedRAReviewStatus is a DerivedField
			type is Alpha size 25
			restricted
			if (ReceivableApplicationAdjustmentRel exist)
				return ReceivableApplicationAdjustmentRel.ReviewStatus

		DerivedReviewStatus is a DerivedField
			type is Alpha size 40
			restricted
			if (DerivedRAReviewStatus = 0)
				return "UnreleasedAdjustment"
			else
			if (DerivedRAReviewStatus = 2)
				return "ReviewNeedsApproval"
			else
			if (DerivedRAReviewStatus = 4)
				return "ApprovalCompleteOrNotNeeded"
			else
			if (DerivedRAReviewStatus = 5)
				return "ChargebackProcessed"
			else
			if (DerivedRAReviewStatus = 6)
				return "PendingApproval"

		DerivedAlphaDepositDate is a DerivedField
			type is Alpha size 25
			restricted
			if (ReceivableApplicationRel exist)
				return last ReceivableApplicationRel.DepositDate

		DerivedDepositDate is a DerivedField
			type is Alpha size 25
			restricted
			if(ReceivableApplicationRel exist and DerivedAlphaDepositDate != "00000000")
				return DerivedAlphaDepositDate[1:4] + "-" + DerivedAlphaDepositDate[5:6] + "-" + DerivedAlphaDepositDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"

		DerivedAlphaPostDate is a DerivedField
			type is Alpha size 25
			restricted
			if (ReceivableInvoiceDetailRel exist)
				return last ReceivableInvoiceDetailRel.GeneralLedgerDate

		DerivedPostDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedAlphaPostDate[1:4] + "-" + DerivedAlphaPostDate[5:6] + "-" + DerivedAlphaPostDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"

		DerivedAlphaGeneralLedgerDate is a DerivedField
			type is Alpha size 25
			restricted
			if (ReceivableApplicationRel exist)
				return last ReceivableApplicationRel.GeneralLedgerDate

		DerivedGeneralLedgerDate is a DerivedField
			type is Alpha size 25
			restricted
			if(ReceivableApplicationRel exist and DerivedAlphaGeneralLedgerDate != "00000000")
				return DerivedAlphaGeneralLedgerDate[1:4] + "-" + DerivedAlphaGeneralLedgerDate[5:6] + "-" + DerivedAlphaGeneralLedgerDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"

		DerivedRTAlphaDiscountDate is a DerivedField
			type is Alpha size 25
			restricted
			if(ReceivableInvoiceDetailRel exist)
				return (last ReceivableInvoiceDetailRel.DiscountDate.DiscDate)

		DerivedRTReceivableDiscountDate is a DerivedField
			type is Alpha size 25
			restricted
			if(ReceivableInvoiceDetailRel exist and DerivedAlphaDiscountDate != "00000000")
				return DerivedRTAlphaDiscountDate[1:4] + "-" + DerivedRTAlphaDiscountDate[5:6] + "-" + DerivedRTAlphaDiscountDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"
			else
				return ""

		DerivedRTAlphaDueDate is a DerivedField
			type is Alpha size 25
			restricted
			return last ReceivableInvoiceDetailRel.DueDate

		DerivedRTInvoiceDueDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedRTAlphaDueDate[1:4] + "-" + DerivedRTAlphaDueDate[5:6] + "-" + DerivedRTAlphaDueDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"

		DerivedRTAlphaPostingDate is a DerivedField
			type is Alpha size 25
			restricted
			return last ReceivablePayment.GeneralLedgerDate

		DerivedRTPostingDate is a DerivedField
			type is Alpha size 25
			restricted
			return DerivedRTAlphaPostingDate[1:4] + "-" + DerivedRTAlphaPostingDate[5:6] + "-" + DerivedRTAlphaPostingDate[7:8] + "T" + BODCurrentTimeStamp[9:10] + ":" + BODCurrentTimeStamp[11:12] + ":" + BODCurrentTimeStamp[13:14] + "Z"

		DerivedApplicationCurrency is a DerivedField
			type is Alpha size 5
			restricted
			if (ReceivableApplicationRel exist)
				return last ReceivableApplicationRel.ApplicationCurrency

		DerivedPaymentNumberRel is a DerivedField
			type is Alpha size 22
			restricted
			if (ReceivablePaymentRel exist)
				return ReceivablePaymentRel.PaymentNumber

		DerivedAlphaPaymentNumber is a DerivedField
			type is Alpha size 22
			restricted
			return ReceivablePayment.PaymentNumber

		DerivedPaymentNumber is a DerivedField
			type is Alpha size 22
			restricted
			if (DerivedPaymentNumberRel entered)
				return DerivedPaymentNumberRel
			else
				return DerivedAlphaPaymentNumber

		DerivedRPHRelCurrencyRate is a DerivedField
			type is Decimal size 31.15
			restricted
			if (ReceivablePaymentHeaderRel exist)
				return ReceivablePaymentHeaderRel.CurrencyRate

		DerivedRPHCurrencyRate is a DerivedField
			type is Decimal size 31.15
			restricted
			return ReceivablePaymentHeader.CurrencyRate

		DerivedReceivablePaymentHeaderCurrRate is a DerivedField
			type is Decimal size 31.15
			restricted
			if (DerivedRPHRelCurrencyRate entered)
				return DerivedRPHRelCurrencyRate
			else
				return DerivedRPHCurrencyRate

		DerivedReceivablePHeaderRel is a DerivedField
			type is Numeric size 6
			restricted
			if (ReceivablePaymentHeaderRel exist)
				return ReceivablePaymentHeaderRel.ReceivablePaymentHeader

		DerivedReceivablePHeader is a DerivedField
			type is Numeric size 6
			restricted
			return ReceivablePaymentHeader.ReceivablePaymentHeader

		DerivedReceivablePaymentHeader is a DerivedField
			type is Numeric size 6
			restricted
			if (DerivedReceivablePHeaderRel entered)
				return DerivedReceivablePHeaderRel
			else
				return DerivedReceivablePHeader

		DerivedPTInstructionID is a DerivedField
			type is Alpha size 60
			restricted
			if (DerivedPaymentNumber entered and DerivedReceivablePaymentHeader entered)
				return DerivedPaymentNumber + DerivedDelimiter + DerivedReceivablePaymentHeader
			else
				return ""

		DerivedRTItemGroup is a DerivedField
			type is Alpha size 40
			restricted
			return Company.GeneralLedgerCompany.BusinessGroup

		DerivedItemID is a DerivedField
			type is Alpha 100
			restricted
			return DerivedFinanceEnterpriseGroup + DerivedDelimiter + DerivedRTItemGroup + DerivedDelimiter + DerivedLocalItemReference

		DerivedRTBaseCurrency is a DerivedField
			type is Alpha size 6
			restricted
			return Company.Currency

		DerivedReceivableTransType is a DerivedField
			type is Alpha size 25
			restricted
			if (ReceivableInvoiceType = "I")
				return "Invoice"
			else
			if (ReceivableInvoiceType = "C")
				return "CreditMemo"
			else
			if (ReceivableInvoiceType = "D")
				return "DebitMemo"
			else
				return ""

		DerivedAlphaDistBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(NativeReceivableGLDistributionWithTaxAmountRel exists)
				for each NativeReceivableGLDistributionWithTaxAmountRel
					DerivedAlphaDistBaseAmount += each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
				return DerivedAlphaDistBaseAmount
			else
				return 0

		DerivedDistBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedAlphaDistBaseAmount entered)
				return DerivedAlphaDistBaseAmount * -1
			else
				return 0

		DerivedAlphaDistTaxableBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(NativeReceivableGLDistributionWithTaxAmountRel exists)
				for each NativeReceivableGLDistributionWithTaxAmountRel
					DerivedAlphaDistTaxableBaseAmount +=each.BaseTaxableAmount
				return DerivedAlphaDistTaxableBaseAmount
			else
				return 0

		DerivedDistTaxableBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedAlphaDistTaxableBaseAmount entered)
				return DerivedAlphaDistTaxableBaseAmount * -1
			else
				return 0

		DerivedAlphaDistTransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(NativeReceivableGLDistributionWithTaxAmountRel exists)
				for each NativeReceivableGLDistributionWithTaxAmountRel
					DerivedAlphaDistTransactionAmount +=each.DistributionAmount.CurrencyAmount
				return DerivedAlphaDistTransactionAmount
			else
				return 0

		DerivedDistTransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedAlphaDistTransactionAmount entered)
				return DerivedAlphaDistTransactionAmount * -1
			else
				return 0

		DerivedAlphaDistTransactionTaxableAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(NativeReceivableGLDistributionWithTaxAmountRel exists)
				for each NativeReceivableGLDistributionWithTaxAmountRel
					DerivedAlphaDistTransactionTaxableAmount += each.TransactionTaxableAmount
				return DerivedAlphaDistTransactionTaxableAmount
			else
				return 0

		DerivedDistTransactionTaxableAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedAlphaDistTransactionTaxableAmount entered)
				return DerivedAlphaDistTransactionTaxableAmount * -1
			else
				return 0

		DerivedRTExtendedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(NativeReceivableGLDistributionWithTaxAmountRel exist)
				return InvoiceAmount.CurrencyAmount - DerivedDistTransactionAmount
			else
				return InvoiceAmount.CurrencyAmount

		DerivedRTExtendedBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(NativeReceivableGLDistributionWithTaxAmountRel exist)
				return InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount - DerivedDistBaseAmount
			else
				return InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount

		DerivedRTReportCurrency is a DerivedField
			type is Alpha size 10
			restricted
			return Company.FinanceEnterpriseGroup.ReportCurrencyOne

		DerivedRTExtendedReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedRTExtendedAmount entered)
				return DerivedRTExtendedAmount * InvoiceAmount.ReportAmount1.EnteredCurrencyRate
			else
				return 0

		DerivedWriteOffAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				for each ReceivableInvoiceDetailRel
					DerivedWriteOffAmount +=each.AdjustmentAmount.CurrencyAmount
				return DerivedWriteOffAmount
			else
				return 0

		DerivedRIDetailTransactionAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				for each ReceivableInvoiceDetailRel
					DerivedRIDetailTransactionAmount +=each.InvoiceAmount.CurrencyAmount
				return DerivedRIDetailTransactionAmount
			else
				return 0

		DerivedRIDetailAppliedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				for each ReceivableInvoiceDetailRel
					DerivedRIDetailAppliedAmount +=each.ApplicationAmount.CurrencyAmount
				return DerivedRIDetailAppliedAmount
			else
				return 0

		DerivedRIDetailBaseAppliedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedRIDetailAppliedAmount entered)
				return DerivedRIDetailAppliedAmount * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return 0

		DerivedRIDetailAdjustAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				for each ReceivableInvoiceDetailRel
					DerivedRIDetailAdjustAmount +=each.AdjustmentAmount.CurrencyAmount
				return DerivedRIDetailAdjustAmount
			else
				return 0

		DerivedRIDetailAppliedAdjustAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				return DerivedRIDetailAppliedAmount + DerivedRIDetailAdjustAmount
			else
				return 0

		DerivedRIDDiscAllowedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(ReceivableInvoiceDetailRel exists)
				for each ReceivableInvoiceDetailRel
					DerivedRIDDiscAllowedAmount +=each.DiscountAmount.OrigDiscAmt
				return DerivedRIDDiscAllowedAmount
			else
				return 0

		DerivedRIDDiscAllowedBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedRIDDiscAllowedAmount entered)
				return DerivedRIDDiscAllowedAmount * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return 0

		DerivedRIDDiscTakenBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedRIDetailAdjustAmount entered)
				return DerivedRIDetailAdjustAmount * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return 0

		DerivedOpenAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedRIDetailTransactionAmount entered)
				return DerivedRIDetailTransactionAmount - DerivedRIDetailAppliedAdjustAmount
			else
				return 0

		DerivedOpenBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(DerivedOpenAmount entered)
				return DerivedOpenAmount * InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return 0

		DerivedRIDLineType is a DerivedField
			type is Alpha 20
			restricted
			if(ReceivableInvoiceDetailRel exists)
				return ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
			else
				return ""

		DerivedLocalRIDetailBaseAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
			else
				return ""

		DerivedLocalRIDetailAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount
			else
				return ""

		DerivedLocalAlternateCurrencyAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyAmount
			else
				return ""

		DerivedLocalAlternateCurrencyAmount2 is a DerivedField
			type is like InternationalAmount
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount
			else
				return ""

		DerivedLocalFunctionalCurrencyRate is a DerivedField
			type is Decimal size 31.15
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
			else
				return ""

		DerivedLocalAlternateCurrencyRate is a DerivedField
			type is Decimal size 31.15
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount.EnteredCurrencyRate
			else
				return ""

		DerivedLocalAlternateCurrencyRate2 is a DerivedField
			type is Decimal size 31.15
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
			else
				return ""

		DerivedLocalReceivableProcessLevel is a DerivedField
			type is AlphaUpper size 5
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.ReceivableProcessLevel
			else
				return ""

		DerivedLocalRIDPaymentSeq is a DerivedField
			type is Numeric size 6
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq
			else
				return ""

		DerivedLocalStatus is a DerivedField
			type is Alpha 40
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.Status
			else
				return ""

		DerivedLocalDesc is a DerivedField
			type is Alpha 60
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.Desc
			else
				return ""

		DerivedLocalItemReference is a DerivedField
			type is AlphaUpper size 32
			restricted
			if(NativeReceivableInvoiceDetailRel exist)
				return NativeReceivableInvoiceDetailRel.ItemReference
			else
				return ""

		DerivedRTStatus is a DerivedField
			type is Alpha size 25
			restricted
			if ((DerivedRIDetailTransactionAmount <= DerivedOpenAmount) and DerivedRIDLineType = "C")
				return "WriteOff"
			else
			if (DerivedOpenAmount = 0)
				return "Paid"
			else
			if (DerivedRIDetailTransactionAmount > DerivedOpenAmount)
				return "PartialPaid"
			else
			if (DerivedRIDetailTransactionAmount = DerivedOpenAmount)
				return "Open"
			else
				return ""

		DerivedPayMethod is a DerivedField
			type is Alpha size 25
			restricted
			return "Cash"

		DerivedRTPayFromPartyID	is a DerivedField
			type is Alpha size 20
			restricted
			return Company using "%d"+ DerivedDelimiter + Customer using "%d"

		DerivedRTShipToPartyID	is a DerivedField
			type is Alpha size 20
			restricted
			return Company using "%d"+DerivedDelimiter+ Customer using "%d" + DerivedDelimiter + CompanyCustomerRel.CompanyCustomer.last CustomerShipToRel.CustomerShipTo using "%d"

		TaxXML is a DerivedField
			type is XMLDocument
			restricted
			if (ReceivableGLDistributionRel exist)
				for each ReceivableGLDistributionRel
					if(each.TaxCode entered)
						each.LocalOriginalCurrency 		= OriginalCurrency
						each.LocalBasecurrency 	   		= DerivedRTBaseCurrency
						TaxXML += template.IONReceivableTransaction_ReceivableInvoice_Tax_ST document for each

		DiscountStatusXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			DiscountStatusXMLBOD = template.IONReceivableTransaction_ReceivableInvoice_DiscountStatus_ST document for this instance

		RTBillToPartyXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if (Customer entered and CustomerBillTo entered)
				RTBillToPartyXMLBOD = template.IONReceivableTransaction_ReceivableInvoice_BillToParty_ST document for this instance
				return RTBillToPartyXMLBOD
			else
				return ""

		RTShipToXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			if(CompanyCustomerRel.CompanyCustomer.CustomerShipToRel exist)
					RTShipToXMLBOD = template.IONReceivableTransaction_ReceivableInvoice_ShipToParty_ST document for this instance
				return RTShipToXMLBOD
			else
				return ""

		DerivedLocalLineItemXML is a DerivedField
			type is XMLDocument
			restricted
			if (DerivedLocalItemReference entered)
				DerivedLocalLineItemXML = template.IONReceivableTransaction_ReceivableInvoice_LineItem_ST document for this instance
				return DerivedLocalLineItemXML
			else
				return ""

		ReceivableInvoiceDetailLineXML is a DerivedField
			type is XMLDocument
			restricted
			if (ReceivableApplicationRel exist)
				initialize LocalDetailLineCount
				for each ReceivableApplicationRel
					LocalPaymentSeq							= each.ReceivableApplication.PaymentSeq
					LocalDetailLineCount +=1
					each.LocalDetailLineNumber 				= LocalDetailLineCount
					each.LocalDelimiter						= DerivedDelimiter
					each.LocalRIDetailAmount				= DerivedLocalRIDetailAmount
					each.LocalRIDetailBaseAmount			= DerivedLocalRIDetailBaseAmount
					each.LocalAlternateCurrencyAmount		= DerivedLocalAlternateCurrencyAmount
					each.LocalAlternateCurrencyAmount2		= DerivedLocalAlternateCurrencyAmount2
					each.LocalFunctionalCurrencyRate		= DerivedLocalFunctionalCurrencyRate
					each.LocalAlternateCurrencyRate			= DerivedLocalAlternateCurrencyRate
					each.LocalAlternateCurrencyRate2		= DerivedLocalAlternateCurrencyRate2
					each.LocalReceivableProcessLevel		= DerivedLocalReceivableProcessLevel
					each.LocalRIDPaymentSeq					= DerivedLocalRIDPaymentSeq
					each.LocalStatus						= DerivedLocalStatus
					each.LocalDesc							= DerivedLocalDesc
					each.LocalOriginalCurrency				= OriginalCurrency
					each.LocalRTBaseCurrency				= DerivedRTBaseCurrency
					each.LocalFunctionalCurrency			= DerivedFunctionalCurrency
					each.LocalAlternateCurrency				= DerivedAlternateCurrency
					each.LocalAlternateCurrency2			= DerivedAlternateCurrency2
					each.LocalReceivableTransType			= DerivedReceivableTransType
					each.LocalLineItemXML					= DerivedLocalLineItemXML

					ReceivableInvoiceDetailLineXML += template.IONReceivableTransaction_ReceivableInvoice_Lines_ST document for each
				return ReceivableInvoiceDetailLineXML
			else
				return ""

		ReceivableTransactionXMLBOD is a DerivedField
			type is XMLDocument
			restricted
			ReceivableTransactionXMLBOD = template.IONReceivableTransaction_ReceivableInvoice_ST document for this instance



		DerivedReceivableInvoiceTypeForPrinting			is a DerivedField
			type is Alpha size 25
			if (ReceivableInvoiceType = "I")
				return "Invoice"
			else
			if (ReceivableInvoiceType = "C")
				return "Credit Memo"
			else
			if (ReceivableInvoiceType = "D")
				return "Debit Memo"
			else
			if (ReceivableInvoiceType = "M")
				if(AlternateReceivableInvoiceType = "I")
					return "Invoice"
				else
				if(AlternateReceivableInvoiceType = "C")
					return "Credit Memo"
				else
				if(AlternateReceivableInvoiceType = "D")
					return "Debit Memo"

		DerivedCustomerBillToNameForPrinting			is a DerivedField
			type is Alpha size 120
			if(CustomerBillTo.Name entered)
				return CustomerBillTo.Name
			else
				return Customer.Name

		DerivedCustomerBillToAddressLine1ForPrinting	is a DerivedField
			type is Alpha size 40
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.DeliveryAddress.AddressLine1
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCustomerBillToAddressLine2ForPrinting	is a DerivedField
			type is Alpha size 40
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.DeliveryAddress.AddressLine2
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCustomerBillToAddressLine3ForPrinting	is a DerivedField
			type is Alpha size 40
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.DeliveryAddress.AddressLine3
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCustomerBillToAddressLine4ForPrinting	is a DerivedField
			type is Alpha size 40
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.DeliveryAddress.AddressLine4
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCustomerBillToMunicipalityForPrinting	is a DerivedField
			type is Alpha size 58
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.Municipality
			else
				return Customer.PostalAddress.Municipality

		DerivedCustomerBillToStateProvinceForPrinting is a DerivedField
			type is AlphaUpper size 40
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.StateProvince
			else
				return Customer.PostalAddress.StateProvince

		DerivedCustomerBillToPostalCodeForPrinting	is a DerivedField
			type is AlphaUpper size 40
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.PostalCode
			else
				return Customer.PostalAddress.PostalCode

		DerivedCustomerBillToCountryForPrinting	is a DerivedField
			type is AlphaUpper size 40
			if(CustomerBillTo entered)
				return CustomerBillTo.PostalAddress.Country.Name
			else
				return Customer.PostalAddress.Country.Name

		DerivedCustomerShipToNameForPrinting			is a DerivedField
			type is Alpha size 120
			if (ReceivableInvoiceShipToGroup.CustomerShipTo entered)
				return ReceivableInvoiceShipToGroup.CustomerShipTo.Name
			else
				return Customer.Name

		DerivedCustomerShipToAddressLine1ForPrinting	is a DerivedField
			type is Alpha size 40
			if(ReceivableInvoiceShipToGroup.CustomerShipTo entered)
				return ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine1
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine1

		DerivedCustomerShipToAddressLine2ForPrinting	is a DerivedField
			type is Alpha size 40
			if(ReceivableInvoiceShipToGroup.CustomerShipTo entered)
				return ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine2
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine2

		DerivedCustomerShipToAddressLine3ForPrinting	is a DerivedField
			type is Alpha size 40
			if(ReceivableInvoiceShipToGroup.CustomerShipTo entered)
				return ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine3
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine3

		DerivedCustomerShipToAddressLine4ForPrinting	is a DerivedField
			type is Alpha size 40
			if(ReceivableInvoiceShipToGroup.CustomerShipTo entered)
				return ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.DeliveryAddress.AddressLine4
			else
				return Customer.PostalAddress.DeliveryAddress.AddressLine4

		DerivedCustomerShipToMunicipalityForPrinting	is a DerivedField
			type is Alpha size 58
			if(ReceivableInvoiceShipToGroup.CustomerShipTo entered)
				return ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.Municipality
			else
				return Customer.PostalAddress.Municipality

		DerivedCustomerShipToStateProvinceForPrinting is a DerivedField
			type is AlphaUpper size 40
			if(ReceivableInvoiceShipToGroup.CustomerShipTo entered)
				return ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.StateProvince
			else
				return Customer.PostalAddress.StateProvince

		DerivedCustomerShipToPostalCodeForPrinting	is a DerivedField
			type is AlphaUpper size 40
			if(ReceivableInvoiceShipToGroup.CustomerShipTo entered)
				return ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.PostalCode
			else
				return Customer.PostalAddress.PostalCode

		DerivedCustomerShipToCountryForPrinting	is a DerivedField
			type is AlphaUpper size 40
			if(ReceivableInvoiceShipToGroup.CustomerShipTo entered)
				return ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress.Country.Name
			else
				return Customer.PostalAddress.Country.Name

		DerivedRemitToNameForPrinting					is a DerivedField
			type is Alpha size 120
			if(ReceivableLockBox.Name entered)
				return ReceivableLockBox.Name
			else
				return Company.Name

		DerivedRemitToAddressLine1ForPrinting	is a DerivedField
			type is Alpha size 40
			if(ReceivableLockBox entered)
				return ReceivableLockBox.PostalAddress.DeliveryAddress.AddressLine1
			else
				return Company.PostalAddress.DeliveryAddress.AddressLine1

		DerivedRemitToAddressLine2ForPrinting	is a DerivedField
			type is Alpha size 40
			if(ReceivableLockBox entered)
				return ReceivableLockBox.PostalAddress.DeliveryAddress.AddressLine2
			else
				return Company.PostalAddress.DeliveryAddress.AddressLine2

		DerivedRemitToAddressLine3ForPrinting	is a DerivedField
			type is Alpha size 40
			if(ReceivableLockBox entered)
				return ReceivableLockBox.PostalAddress.DeliveryAddress.AddressLine3
			else
				return Company.PostalAddress.DeliveryAddress.AddressLine3

		DerivedRemitToAddressLine4ForPrinting	is a DerivedField
			type is Alpha size 40
			if(ReceivableLockBox entered)
				return ReceivableLockBox.PostalAddress.DeliveryAddress.AddressLine4
			else
				return Company.PostalAddress.DeliveryAddress.AddressLine4

		DerivedRemitToMunicipalityForPrinting	is a DerivedField
			type is Alpha size 58
			if(ReceivableLockBox entered)
				return ReceivableLockBox.PostalAddress.Municipality
			else
				return Company.PostalAddress.Municipality

		DerivedRemitToStateProvinceForPrinting is a DerivedField
			type is AlphaUpper size 40
			if(ReceivableLockBox entered)
				return ReceivableLockBox.PostalAddress.StateProvince
			else
				return Company.PostalAddress.StateProvince

		DerivedRemitToPostalCodeForPrinting	is a DerivedField
			type is AlphaUpper size 40
			if(ReceivableLockBox entered)
				return ReceivableLockBox.PostalAddress.PostalCode
			else
				return Company.PostalAddress.PostalCode

		DerivedRemitToCountryForPrinting	is a DerivedField
			type is AlphaUpper size 40
			if(ReceivableLockBox entered)
				return ReceivableLockBox.PostalAddress.Country.Name
			else
				return Company.PostalAddress.Country.Name

		DerivedFileName is a DerivedField
			type is Alpha 100
			restricted
			if (InvoiceEntryTemplate.Expanded
			and Company.ReceivableInvoiceExpandedTemplate entered)
				return "Receivable Invoice " + Company + " - " + Customer + " - " + ReceivableInvoice + " - " + TransactionDate + Company.ReceivableInvoiceExpandedTemplate.DerivedOutputFormat
			else
				return "Receivable Invoice " + Company + " - " + Customer + " - " + ReceivableInvoice + " - " + TransactionDate + Company.ReceivableInvoiceTemplate.DerivedOutputFormat

		DerivedIDMInvoiceLink is a DerivedField
			type is Alpha 2083
			restricted
			if (IDMUniqueID entered)
				IDMItem.DocumentType	= "FSM_ReceivableInvoice"
				IDMItem.IDMUniqueId		= IDMUniqueID
				return IDMItem.GetLink
			return blank










































		DerivedReceivableInvoiceIDMEmailSubject is a MessageField
			restricted
			"<Company.Name>_<Customer.Name>_<ReceivableInvoice>_<TransactionDate>"

		DerivedEmailSubject is a DerivedField
			type is Alpha size 255
			restricted
			if (Company.ReceivableInvoiceIDMEmailSubject entered)
				LocalReceivableInvoiceIDMEmailSubject = Company.ReceivableInvoiceIDMEmailSubject
			return LocalReceivableInvoiceIDMEmailSubject text

		EmailNotificationMsg is a MessageField
			restricted
			"Company<Company>Invoice<ReceivableInvoice>WasSentToCustomer"

		DerivedReceivableInvoiceFromAndReplyToEmail is a DerivedField
			type is like EmailAddress
			holds pii
			if (CompanyCustomerRel.ReceivableInvoiceFromAndReplyToEmail entered)
				return CompanyCustomerRel.ReceivableInvoiceFromAndReplyToEmail
			else
				return config.DefaultFromEmailAddress

		DerivedToEmailAddress is a DerivedField 
			type is like MultipleEmailAddress
			holds pii
			restricted
			initialize LocalRecipientEmailAddress
			if (CompanyCustomerRel.ReceivableInvoiceEmailContactsOnly)
				for each CompanyCustomerRel.CompanyCustomerContactRel
					if (each.EmailReceivableInvoice
					and each.EmailAddress entered)
						if (LocalRecipientEmailAddress entered)
							LocalRecipientEmailAddress += ", "
						LocalRecipientEmailAddress += each.EmailAddress
			else
				LocalRecipientEmailAddress  = CompanyCustomerRel.EmailAddress
			return LocalRecipientEmailAddress

		DerivedCcEmailAddress is a DerivedField 
			type is like MultipleEmailAddress
			holds pii
			restricted
			initialize LocalCcEmailAddress
			if (not DefaultFromEmailAddress)
				LocalCcEmailAddress += CompanyCustomerRel.ReceivableInvoiceFromAndReplyToEmail
			if (not CompanyCustomerRel.ReceivableInvoiceEmailContactsOnly)
				for each CompanyCustomerRel.CompanyCustomerContactRel
					if (each.EmailReceivableInvoice
					and each.EmailAddress entered)
						if (LocalCcEmailAddress entered)
							LocalCcEmailAddress += ", "
						LocalCcEmailAddress += each.EmailAddress
			return LocalCcEmailAddress

		DerivedLinesIndicator is a DerivedField
			type is Alpha 1
			if (ReceivableInvoiceLine set exists)
				return "*"
			else
				return ""

		DerivedHeaderAddOnChargesIndicator is a DerivedField
			type is Alpha 1
			if (HeaderAddOnChargesRel exists)
				return "*"
			else
				return ""

		DerivedCompanyCustomerAffiliate is a DerivedField
			type is Boolean
			return CompanyCustomerRel.Affiliate

		DerivedCustomerOrderVATRegistrationNumber is a DerivedField
			type is AlphaUpper size 25
			return CustomerOrderRel.VATRegistrationNumber

		IDMDescriptionMsg is a MessageField
			"Receivable_Invoice"

		DerivedPortalInvoicePaidAmount	is a DerivedField
			type is like InternationalAmount
			return sum ReceivableApplicationRel.ApplicationAmount.CurrencyAmount

		ReferenceOrigin	is a DerivedField  
			type is Alpha 10
			restricted
			if (invoking action = "RTMPayment.UnreleasedRtm.Release")
				return "RTM"



	Transient Fields
		FromDateParameter							is Date
		ToDateParameter								is Date
		ReceivableDistributionArray
		FromReceivablePayment						is Boolean
		TransientDueDate							is Date
			default label is "DueDate"
			derive value from						DerivedDueDate
		TransientProject							is like Project
			derive value from						DerivedProject
		TransientDiscountDate						is a DiscDateX3InAroitems
			derive value from						DerivedDiscountDate

		TransientSort1								is Alpha 32
			derive value from						DerivedSort1
		TransientSort2								is Alpha 32
			derive value from						DerivedSort2
		TransientSort3								is Alpha 32
			derive value from						DerivedSort3
		TransientSort4								is Alpha 32
			derive value from						DerivedSort4
		TransientSignedTransactionAmount			is like InternationalAmount
			default label is "InvoiceAmount"
			derive value from SignedTransactionAmount
				precision is TransientManagedContextCurrency.OutputNumberOfDecimals
		TransientOpenReceivableAmountSigned			is like InternationalAmount
			derive value from OpenReceivableInvoiceAmountSignedLessPortalRequestedAppliedAmountSigned
				precision is TransientManagedContextCurrency.OutputNumberOfDecimals
		TransientManagedContextCurrency				is a ManagedContextCurrency
		TransientYear								is Year
			default label is "Year"
			derive value from DerivedYear
		BypassGLDateEdit							is Boolean
		BypassProjectDateEdit	
		TransientTotalInvoiceOpenAmount				is like InternationalAmount
		TransientTotalSignedAppliedAmount			is like InternationalAmount	
			default label is "TotalSignedAppliedAmount"
			derive value from TotalSignedAppliedAmount
		TransientSpecifyDistributionMix				is Boolean
		TransientOriginIsFundAccountingSupported	is Boolean
		TransientNumberOfOpenDetail					is Numeric 7
		TransientFromEntity							is an AccountingEntity	
			derive value from GeneralLedgerCompanyRel.AccountingEntity
		TransientHSNSACCode							is a HSNSACCode
			default label is "HSN_/SACCode"
			derive value from first ReceivableGLDistributionRel.HSNSACCode
		IntrastatFiscalYear					is Year
			derive value from TransactionDate year
		TransientIntrastatNumber						is a IntrastatNumber
		TransientInvoiceCurrencyRate				is a FinanceCurrencyAmount

	Local Fields
		CurrencyWork								is a FromCurrencyExchangeGroup
		CreationCompleteMessage						is Alpha size 250

		LocalReceivableGLDistributionProjectAmount	is an InternationalAmount
		FirstRecord									is Boolean
		LastProject									is a Project
		LocalProject								is a Project

		LocalReceivableTransactionSummary			is AlphaUpper size 2
			States
				Invoiced			value is "01"
				DebitsCredits		value is "02"

		I1											is Numeric 3

		LocalRecordCount							is Numeric 3
		NextSentence								is Boolean
		TaxLineItemView								is a TaxLineItem view
		AttributeCounter							is Numeric 5
		Idx											is Numeric size 2
		LocalTaxableDistributions					is Numeric size 6
		LocalDistributionSequence					is a DistSeq
		LocalLastDistributionSequence				is a DistSeq
		CalculateTax
		LocalTaxCalc								is Alpha 1
		ProcessTaxHistory
		LocalTaxHistoryProcessed					is Alpha 1
		LocalTaxCode								is a TaxCode
		LocalCurrencyWork							is a ReceivableExchange

		LocalTermsCalTrigger						is Alpha size 1
		CalculateTerms

		LocalAmount									is an InternationalAmount
		LocalTotalAmount							is an InternationalAmount
		LoopCounter									is Numeric size 3
		NbrOfTerms									is Numeric size 3
		CreateTermsInBackground						is Boolean
		LocalLineItemAmount							is like InternationalAmount
		LocalSumLineItemAmounts						is a FinanceCurrencyAmountGroup
		LocalLastLineItem							is like ReceivableInvoiceLineItem

		FromCurrencyExchangeGroup

		ValidateReceivablePrefix
		LocalBypassManualInvoicePrefixValidation	is Boolean
		OldCustomer									is like Customer


		ActionCode									is Alpha size 1
			States
				Create				value is "C"
				Update				value is "U"
				Delete				value is "D"
		LocalBODCurrentTimeStamp					is a BODCurrentTimeStamp

		IntrastatProcessing
		LocalTrigger								is Alpha size 1
		BypassTotals								is Boolean
		LocalReassignCustomer						is like Customer
		LReleaseSetCompany							is like ReceivableCompany
		LReleaseSetBatchNbr							is like BatchNumber
		LocalSequenceNum6							is AlphaUpper 6
		LocalSequenceNum12							is AlphaUpper 12
		LocalTempJournalReference					is AlphaUpper 50
			Text Variables
				YearYYYY				value is GeneralLedgerDate year
				YearYY					value is DerivedYear[3:4]
				MonthMM					value is DerivedPaddedMonth
				999999999999			value is LocalSequenceNum12
				000000000009			value is DerivedZeroPaddedSequenceNum12
				999999					value is LocalSequenceNum6
				000009					value is DerivedZeroPaddedSequenceNum6
		LDueDateOverride							is Boolean
		LReceivableInvoiceDetailFirstDue			is a ReceivableInvoiceDetail

		LocalCurrencyCalculationGroup				is a CurrencyCalculationGroup
		LocalDistributionTotal						is a RoundedCurrencyAmountGroup
		LocalRoundedAmount							is a RoundedCurrencyAmountGroup
		LocalSetFinanceCodeBlockComponents			is a SetFinanceCodeBlockComponents
		LocalCompany								is like ReceivableCompany
		LocalPaymentHeader							is a ReceivablePaymentHeader
		LocalPayment								is a ReceivablePayment
		GenerateCheckDigit
		LocalTempParallelReference					is AlphaUpper 100
			Text Variables
				CustomerID				value is Customer
				InvoiceNumber			value is ReceivableInvoice
				Company					value is Company
				ProcessLevel			value is ReceivableProcessLevel
				YearYYYY				value is DerivedTempYear
				YearYY					value is DerivedTempYear[3:4]
		LocalClaimsAndLiabilitiesHeader				is a ClaimsAndLiabilitiesHeader


		SumOfMixedReceivableInvoiceCreditDetailRelAmountsDone									is Boolean	
		SumOfMixedReceivableInvoiceDebitDetailRelAmountsDone									is Boolean	
		SumOfOpenReceivableInvoiceDetailRelInvoiceAmountCurrencyAmountDone						is Boolean	
		SumOfProrateDistributionsRelDistributionAmountCurrencyAmountDone						is Boolean	
		SumOfReceivableInvoiceDetailRelAmountsDone												is Boolean	
		SumOfReceivableInvoiceLineItemRelTransactionAmountDone									is Boolean	
		SumOfReceivableGLDistributionRelDistributionAmountCurrencyAmountDone					is Boolean	
		SumOfReceivableGLDistributionWithTaxAmountRelDistributionAmountCurrencyAmountDone		is Boolean	
		FirstReceivableInvoiceDetailRelReceivableInvoiceDetailIsSummarizeDetailParticipantDone	is Boolean	
		SumExpandedInvoiceEntryTemplateTotalAmountDone											is Boolean




		SumOfMixedReceivableInvoiceCreditDetailRelInvoiceAmountCurrencyAmount				is an InternationalAmount	
		SumOfMixedReceivableInvoiceCreditDetailRelApplicationAmountCurrencyAmount			is an InternationalAmount	
		SumOfMixedReceivableInvoiceCreditDetailRelAdjustmentAmountCurrencyAmount			is an InternationalAmount	
		SumOfMixedReceivableInvoiceDebitDetailRelInvoiceAmountCurrencyAmount				is an InternationalAmount	
		SumOfMixedReceivableInvoiceDebitDetailRelApplicationAmountCurrencyAmount			is an InternationalAmount	
		SumOfMixedReceivableInvoiceDebitDetailRelAdjustmentAmountCurrencyAmount				is an InternationalAmount	
		SumOfOpenReceivableInvoiceDetailRelInvoiceAmountCurrencyAmount						is an InternationalAmount	
		SumOfProrateDistributionsRelDistributionAmountCurrencyAmount						is an InternationalAmount	
		SumOfReceivableInvoiceDetailRelInvoiceAmountCurrencyAmount							is an InternationalAmount	
		SumOfReceivableInvoiceDetailRelApplicationAmountCurrencyAmount						is an InternationalAmount	
		SumOfReceivableInvoiceDetailRelAdjustmentAmountCurrencyAmount						is an InternationalAmount	
		SumOfReceivableInvoiceDetailRelPortalRequestedAppliedAmount							is an InternationalAmount	
		SumOfReceivableInvoiceDetailRelSignedOpenAmount										is an InternationalAmount	
		SumOfReceivableInvoiceDetailRelTotalSignedAppliedAmount								is an InternationalAmount	
		SumOfReceivableInvoiceLineItemRelTransactionAmount									is an InternationalAmount	
		SumOfReceivableGLDistributionRelDistributionAmountCurrencyAmount					is an InternationalAmount	
		SumOfReceivableGLDistributionWithTaxAmountRelDistributionAmountCurrencyAmount		is an InternationalAmount	
		SumOfExpandedInvoiceEntryTemplateTotalAmount										is an InternationalAmount
		SumOfExpandedInvoiceEntryTemplateLineAmount											is an InternationalAmount
		SumOfExpandedInvoiceEntryTemplateAOCAmount											is an InternationalAmount
		SumOfExpandedInvoiceEntryTemplateTaxAmount											is an InternationalAmount
		FirstReceivableInvoiceDetailRelReceivableInvoiceDetailInvoice						is like Invoice	
		FirstReceivableInvoiceDetailRelReceivableInvoiceDetailReceivableInvoiceDetailType	is like ReceivableInvoiceDetailType	
		FirstReceivableInvoiceDetailRelReceivableInvoiceDetailPaymentSeq					is like Sequence	
		LocalAssignToCurrency																is Boolean
		CurrencyRelationship

		LocalCalculateReceivableFinanceStructure											is a CalculateReceivableFinanceStructure
		LocalAnswer 																		is Alpha size 1

		LocalFinanceDimension2						is like FinanceDimension2
		LocalProjectValue							is like Project
		LocalProjectContract						is like ProjectContract

		LocalGeneralLedgerCompanyGroup				is a GeneralLedgerCompanyGroup
		LocalMajClass								is a CustomerMajorClass
		LocalMinClass								is a CustomerMinorClass
		LocalCreditAnalyst							is a CreditAnalyst
		LocalSalesRepresentative					is a SalesRepresentative
		LocalActor									is Actor
		TotalOpenAmount								is like InternationalAmount
		TotalOpenPercentage							is Percent size 8.5
		AmountForDistribution						is like InternationalAmount
		LocalRoundAmount							is a RoundAmount


		LocalTaxCount									is Numeric size 9
		NativeLPLBODTrigger								is Boolean
		LocalTriggerFrom								is Alpha size 100
		LocalReceivableGLDistributionTaxXMLBOD			is XMLDocument
		LocalReceivableGLDistributionXMLBOD				is XMLDocument

		LocalAOCCount									is Numeric size 9
		LocalInvoiceLineSequence						is Numeric size 9
		LocalARCertificationNumber						is Alpha size 40
		LocalBLCertificationNumber						is Alpha size 40
		Error											is Boolean
		ErrorMessageTracker								is Alpha 300
		NewBODTracker  									is a FSMInboundBODTracker view
		LocalFSMInboundBODTracker						is Numeric 15

		LocalHasLineExtendedAmountLessThanZero			is Boolean
		LocalHasLineExtendedAmountGreaterThanZero		is Boolean
		LocalHasAOCGrossAmountLessThanZero				is Boolean
		LocalHasAOCGrossAmountGreaterThanZero			is Boolean
		LocalPaymentSeq									is Numeric size 6
		LocalDetailLineCount							is Numeric 15
		LocalNewReceivableGLDistribution				is a ReceivableGLDistribution
		LocalReceivableInvoiceLine						is like ReceivableInvoiceLine
		LocalReceivableInvoiceAddOnChargeUniqueID		is like UniqueID

		IDMItem
		IDMGenerateDocument
		IDMAttributes
		LocalIDMPrinter									is an IDMPrinter
		LocalRecipientEmailAddress						is like MultipleEmailAddress 
			holds pii
		LocalFromAndReplyToEmail						is an EmailAddress
			holds pii
		LocalCcEmailAddress								is like MultipleEmailAddress 
			holds pii
		LocalReceivableInvoiceIDMEmailSubject			is Alpha 255
			Text Variables
				CompanyName		value is Company.Name
				CustomerName	value is Customer.Name
				Transaction		value is ReceivableInvoice
				TransactionDate	value is TransactionDate
		LocalIDMAttachmentCtr							is Numeric size 3
		IDMJobView										is an IDMJob view
		LocalTransferCustomer							is like Customer
		LocalReceivableInvoiceDetailType			 	is like ReceivableInvoiceDetailType
		LocalReceivableInvoice						 	is like Invoice
		LocalReceivableInvoiceDetailPaymentSequence		is like Sequence
		LocalMassBODTrigger								is Boolean
		LocalTitle										is Alpha up to 255
		LocalSkipUpdateCurrentBalance					is Boolean
		LocalConfigurationParameter						is Alpha size up to 200
		LocalAEAlreadyExecuted							is Boolean
		LocalAEValue									is Alpha size 22
		LocalCurrencyRelationship						is a CurrencyRelationship		
		AttributeCtr									is Numeric 2
		LocalExecute									is Boolean
		IDMXMLDefinition
		LocalThisReceivableInvoiceLineItem				is like ReceivableInvoiceLineItem  
	Context Fields

		ReceivablePaymentHeader
		ReceivableInvoiceBatch
		ReceivablePayment

		CompanyRange
		CustomerRange
		ReceivableInvoiceRange						is an InvoiceRange
		TransactionAmountRange						is an AmountRange3
		OpenAmountRange								is an AmountRange3	
		ReceivableProcessLevelRange
		TransactionDateRange						is a DateRange
		DiscountDateRange							is a DateRange2
		DueDateRange								is a DateRange3
		TransUser1Range
		ProjectRange
		CustomerPurchaseOrderRange
		XrefNbrRange								is an InvoiceRange2
		CurrencyRange
		BatchNumberRange							is a BatchRange
		CashCodeRange
		SalesRepresentativeRange
		TermsCodeRange
		ReceivableOperator
		FilterGeneralLedgerCompanyGroup				is a GeneralLedgerCompanyGroup
			default label is "FilterGlobalLedgerCompanyGroup"	

		FSMInboundBODTracker

	Field Rules
















		CurrencyTable
			if (ReceivableInvoiceBatchRel exists
			and ReceivableInvoiceBatchRel.CurrencyTable entered)
				default to ReceivableInvoiceBatchRel.CurrencyTable 


			default to CompanySystemClosingControlRel.CurrencyTable
			default to Company.FinanceEnterpriseGroup.CurrencyTable

			if (CurrencyTable changed)
				constraint (!HasReceivableGLDistributions)
					"CannotChange;DistributionsExist"

		AlternateReceivableInvoiceType
			if (ReceivableInvoiceType.MixedSignLines)
				constraint (AlternateReceivableInvoiceType entered)
					"TransactionTypeOfMixedSignLinesRequiresAlternateTypeToBeEntered"
				constraint (AlternateReceivableInvoiceType not changed)
					"CannotChangeAlternateType"										
				if (AlternateReceivableInvoiceType changed)
					constraint (!ReceivableInvoiceRel exists)
						"TransactionAlreadExistsWithThisAlternateType"				

				if  (!AlternateReceivableInvoiceType.Invoice
				and (!Origin.External
				or (Origin.External
				and FromInterface)))
					constraint (CreditDebitMemoReason entered)
						"ReasonCodeRequiredForMemos"								

				if (AlternateReceivableInvoiceType.Invoice)
					constraint (CreditDebitMemoReason not entered)
						"ReasonCodeIsNotAllowedForInvoices"							

		CreditDebitMemoReason
			constraint (!ReceivableInvoiceType.Invoice)
					"ReasonCodeIsNotAllowedForInvoices"								
			if (Origin = "B"
			or	Origin = "M")
				if (ReceivableInvoiceType.MixedSignLines
				and !AlternateReceivableInvoiceType.Invoice)
					constraint (CreditDebitMemoReason entered)
						"ReasonCodeRequiredForMemos"								
				constraint (CreditDebitMemoReason.ReceivableReasonType = "ME")
					"ReasonCodeDoesNotExist"										
			if (!FromReceivablePayment)
				if (CreditDebitMemoReason not entered
				and !Origin.ClosingCreatedChargeback
				and !Origin.FinanceLatePaymentCharge
				and !Origin.OverApplied
				and !Origin.External)	 
					constraint (!ReceivableInvoiceType.CreditMemo and !ReceivableInvoiceType.DebitMemo)
						"ReasonCodeRequiredForMemos"								
			if (IsOpenReceivableInvoiceDetailRel
			and CreditDebitMemoReason changed)
				for each OpenReceivableInvoiceDetailRel
					invoke Update OpenReceivableInvoiceDetailRel
						invoked.CreditDebitMemoReason	= CreditDebitMemoReason

		Description

			if (InvoiceAmount.CurrencyAmount not entered
			and not InvoiceEntryTemplate.Expanded)
				default to ZeroAmountTransactionMsg

			if (ReceivableInvoiceType.MixedSignLines
			and AlternateReceivableInvoiceType.DebitMemo
			or  AlternateReceivableInvoiceType.CreditMemo)
				default to CreditDebitMemoReason.Description

			if (ReceivableInvoiceType.DebitMemo
			or  ReceivableInvoiceType.CreditMemo)
				default to CreditDebitMemoReason.Description

			if (IsOpenReceivableInvoiceDetailRel
			and IsOpenReceivableInvoiceDetailRelAndItsDescriptionNotEntered	
			and Description changed)
				for each OpenReceivableInvoiceDetailRel
					invoke Update OpenReceivableInvoiceDetailRel
						invoked.Description	= Description

		DueDate

			if (ReceivableInvoiceBatchRel.Status.Unreleased
			and  !FromInterface
			and DueDate entered)
				constraint (DueDate >= TransactionDate)
					"DueDateCannotBeLessThanTransactionDate"
				constraint (DueDate >= DiscountDate)
					"DueDateCannotBeLessThanDiscountDate"

				if (TermsCode entered)
					constraint (TermsCode.IsNetTerms or TermsCode.IsProxTerms or TermsCode.IsSplitTerms)
						"CannotOverrideDueDateIfTermsTypeIsNotOneOfNetOrProxOrSplit"

		DiscountDate
			constraint (DueDate entered)
				"DueDateIsNotEntered"
			if (ReceivableInvoiceBatchRel.Status.Unreleased
			and  !FromInterface
			and DiscountDate entered)
				if (DiscountAmount entered)
					constraint (DiscountPercent not entered)
						"OnlyOneOfDiscountAmountOrDiscountRateMayBeEntered"
				if (DiscountPercent entered)
					constraint (DiscountAmount not entered)
						"OnlyOneOfDiscountAmountOrDiscountRateMayBeEntered"

				constraint (DiscountDate >= TransactionDate)
					"DiscountDateCannotBeLessThanTransactionDate"

		DiscountAmount



			if (ReceivableInvoiceBatchRel.Status.Unreleased
			and  !FromInterface
			and DiscountAmount entered)
				constraint (DueDate entered and DiscountDate entered)
					"DiscountDateIsNotEntered"
				if (DiscountAmount entered)
					constraint(DiscountAmount >= 0)
						"DiscountAmountMustBePositive"
			if (ReceivableInvoiceBatchRel.Status.Released)
				cannot be changed
					"BatchIsReleased,CannotChange"

		DiscountPercent



			if (ReceivableInvoiceBatchRel.Status.Unreleased
			and  !FromInterface
			and DiscountPercent entered)
				constraint (DueDate entered and DiscountDate entered)
					"DiscountDateIsNotEntered"

		TermsCode
			if (TermsCode not entered)

				TermsCode = CustomerInvoiceTypeCode.TermsCode

				if (TermsCode not entered)
					TermsCode = InvoiceTypeCode.TermsCode

				if (TermsCode not entered
				and ReceivableInvoiceType.DebitMemo
				or  ReceivableInvoiceType.CreditMemo)
					TermsCode = CompanyCustomerRel.DebitCreditMemoTermsCode

				if  (TermsCode not entered
				and  ReceivableInvoiceType.MixedSignLines
				and (AlternateReceivableInvoiceType.DebitMemo
				or   AlternateReceivableInvoiceType.CreditMemo))
					TermsCode = CompanyCustomerRel.DebitCreditMemoTermsCode

				if (TermsCode not entered
				and ReceivableInvoiceType.MixedSignLines
				and AlternateReceivableInvoiceType.Invoice)
					TermsCode = CompanyCustomerRel.TermsCode

				if (TermsCode not entered
				and ReceivableInvoiceType.Invoice)
					TermsCode = CompanyCustomerRel.TermsCode









			if (SummarizeDetail)
				constraint (!TermsCode.IsMultPayTerms)
					"IfSummarizeDetailForDisplay;MultipleTypeTermsCodeCannotBeSelected"
				constraint (!TermsCode.IsMultiplePaymentFixedTerms)  
					"IfSummarizeDetailForDisplaySpecified;MultiplePaymentFixedTypeTermsCodeCannotBeSelected"


		InvoiceTypeCode
			default to first CustomerInvoiceTypeCodesRel.InvoiceTypeCode
			if (IsOpenReceivableInvoiceDetailRel
			and InvoiceTypeCode changed)
				for each OpenReceivableInvoiceDetailRel
					invoke Update OpenReceivableInvoiceDetailRel
						invoked.InvoiceTypeCode	= InvoiceTypeCode

		RegimeCode
			if (IsOpenReceivableInvoiceDetailRel
			and RegimeCode changed)
				for each OpenReceivableInvoiceDetailRel
					invoke Update OpenReceivableInvoiceDetailRel
						invoked.RegimeCode	= RegimeCode

		SalesRepresentative
			default to CompanyCustomerRel.SalesRepresentative
			if (IsOpenReceivableInvoiceDetailRel
			and SalesRepresentative changed)
				for each OpenReceivableInvoiceDetailRel
					invoke Update OpenReceivableInvoiceDetailRel
						invoked.SalesRepresentative	= SalesRepresentative

		CustomerBillTo
			default to DefaultBillToRel.CustomerBillTo
			if (IsOpenReceivableInvoiceDetailRel
			and CustomerBillTo changed)
				for each OpenReceivableInvoiceDetailRel
					invoke Update OpenReceivableInvoiceDetailRel
						invoked.CustomerBillTo	= CustomerBillTo

		ReceivableGeneralLedgerCode
			if (ReceivableGeneralLedgerCode not entered
			and CompanyCustomerRel.ReceivableGeneralLedgerCode entered)
				ReceivableGeneralLedgerCode = CompanyCustomerRel.ReceivableGeneralLedgerCode

			if (ReceivableGeneralLedgerCode not entered
			and ReceivableInvoiceBatchRel.Status.Unreleased
			and !FromInterface
			and CompanyCustomerRel.ReceivableGeneralLedgerCode not entered)
				ReceivableGeneralLedgerCode = ReceivableInvoiceBatchRel.ReceivableGeneralLedgerCode

			if (ReceivableGeneralLedgerCode not entered)
				ReceivableGeneralLedgerCode = ReceivableProcessLevel.ReceivableGeneralLedgerCode

			if (Status > 0)
				constraint (!ReceivableGeneralLedgerCode	 changed)
					"BatchHasBeenReleased;CannotChangeThisField"

		TransactionDate
			required
			if  (ReceivableInvoiceBatchRel.Status.Unreleased
			and  !FromInterface)
				default to ReceivableInvoiceBatchRel.BatchDate
			if (TransactionDate changed)
				constraint (Status = 0)
					"BatchHasBeenReleased;CannotChangeThisField"
			InvoiceAmount.ExchangeDate = TransactionDate

			if (Origin.IntercompanyBilling)
				cannot be changed
					"InvoiceIsFrom_\I\C\B;CannotChangeThisField"

		GeneralLedgerDate
			required
			if  (ReceivableInvoiceBatchRel.Status.Unreleased
			and  !FromInterface)
				default to ReceivableInvoiceBatchRel.GeneralLedgerDate
			if (Status > 0)
				constraint (!GeneralLedgerDate changed)
					"BatchHasBeenReleased;CannotChangeThisField"
			if (!Origin.Projects)
				if (action type.Create				
				or  GeneralLedgerDate changed)		
					if ((CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange) and !BypassGLDateEdit)
						constraint (GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
							"PostDate<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
			if (Origin.IntercompanyBilling)
				cannot be changed
					"InvoiceIsFrom_\I\C\B;CannotChangeThisField"

		OriginalCurrency
			if  (ReceivableInvoiceBatchRel.Status.Unreleased
			and  ReceivableInvoiceBatchRel.OriginalCurrency entered
			and IsManualEntry	
			and !FromInterface)
				force default to ReceivableInvoiceBatchRel.OriginalCurrency

			default to CompanyCustomerRel.Currency
			default to Company.Currency

			if (!Company.TransactionCurrencyOverride)
				constraint (OriginalCurrency = CompanyCustomerRel.Currency)
					"CurrencyDoesNotEqualCustomerDefaultTransactionCurrency,CompanyCurrencyOverrideIsFalse"

			if (OriginalCurrency changed)
				constraint (!ReceivableGLDistributionRel exists)
					"CannotChangeCurrencyCode;DistributionsExist"						 

			if (Status > 0)
				constraint (!OriginalCurrency changed)
					"BatchHasBeenReleased;CannotChangeThisField"

			if (!Company.MultiCurrencyProcessing)
				constraint (OriginalCurrency = Company.Currency)
					"CurrencyMustBeCompanyCurrency;CompanyIsNotSetForMultiCurrencyProcessing"

		AutomaticCashApplication
			if (AutomaticCashApplication)
				constraint (Company.AutomaticMemoApplication)
					"AutoApplyInvalid;CompDoesNotAllowAutoApply"			 
			if (ReceivableInvoiceType.Invoice
			or  ReceivableInvoiceType.DebitMemo)
				constraint (AutomaticCashApplication = false)
					"TransactionTypeMustBeCreditMemoOrMixedSignWhenSetForAutomaticCashApplication"

		RevalueCurrencyTransactions





			if (RevalueCurrencyTransactions)


				if(OriginalCurrency = Company.Currency)
					RevalueCurrencyTransactions = false

			if (IsReleased  
			and	OpenReceivableInvoiceAmount != InvoiceAmount.CurrencyAmount)
				constraint (!RevalueCurrencyTransactions changed)
					"RevalueFlagCannotBeChanged;AppliedRecordsExist"		 
			if (ReceivableApplicationSelectRel exists)
				constraint (!RevalueCurrencyTransactions changed)
					"RevalueFlagCannotBeChanged;SelectedApplicationsExist"	 
			if (IsOpenReceivableInvoiceDetailRel
			and RevalueCurrencyTransactions changed)
				if (any ReceivableInvoiceDetailRel.Status = 1
				and any ReceivableInvoiceDetailRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered
				or  any ReceivableInvoiceDetailRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount entered)
					constraint (false)
						"CannotChangeCurrencyRevaluation;TransactionHasApplications"
				for each OpenReceivableInvoiceDetailRel
					invoke Update OpenReceivableInvoiceDetailRel
						invoked.RevalueCurrencyTransactions	= RevalueCurrencyTransactions

		CurrencyMultiplicationOrDivision
			if (OriginalCurrency = Company.Currency)
				CurrencyMultiplicationOrDivision = "M"

		CustomerGroupCurrencyMultiplicationOrDivision
			if (Company.Currency = Customer.CustomerGroup.Currency)
				CustomerGroupCurrencyMultiplicationOrDivision = "M"
			else																								
				LocalCurrencyRelationship.FromCurrency			= Company.Currency
				LocalCurrencyRelationship.ToCurrency			= Customer.CustomerGroup.Currency
				if (LocalCurrencyRelationship.MultDiv.Multiply)
					CustomerGroupCurrencyMultiplicationOrDivision 	= "M"
				else
					CustomerGroupCurrencyMultiplicationOrDivision 	= "D"

		CurrencyRateToCustomerGroupCurrency
			required
				"CurrencyRateDoesNotExistBetween<Company.Currency>And<Company.CustomerGroupField.CustomerGroup.Currency>"
			FromCurrencyExchangeGroup.FromCurrency				 = Company.Currency
			FromCurrencyExchangeGroup.BaseAmount.ToCurrency		 = Company.CustomerGroupField.CustomerGroup.Currency
			CurrencyRateToCustomerGroupCurrency					 = FromCurrencyExchangeGroup.BaseAmount.OutputCurrencyRate

		SummarizeDetail
			initial value is Company.SummarizeMultiLineTransactions
			if (SummarizeDetail
			and IsReleasedSummarizeDetail)
				constraint (!TermsCode changed)
					"InvoiceHasSummarizeDetailForDisplay,CannotChangeTermsCode"
			if (SummarizeDetail changed)
				for each ReceivableInvoiceDetailRel
					invoke Update ReceivableInvoiceDetailRel
						invoked.SummarizeDetail = SummarizeDetail

		ReceivableProcessLevel
			required
			if  (ReceivableInvoiceBatchRel.Status.Unreleased)
				default to ReceivableInvoiceBatchRel.ReceivableProcessLevel
			if (CompanyCustomerRel.ProcessLevelRestrictions)
				constraint (CustomerProcessLevelInclusionRel exists
				and		 CustomerProcessLevelInclusionRel.IncludeProcessLevel)
					"CustomerExcludedFromProcessLevel"

		ReceivableCrossReference.Customer
			default to ReceivableInvoiceCrossReferenceRel.Customer

		BankTransactionCode
			required
			default to (CompanyCustomerRel.BankTransactionCode)

			if (BankTransactionCode entered)
				if (!Company.CustomerGroupField.CustomerGroup.BillOfExchangeProcessing)
					constraint (BankTransactionCode.BankTransactionType = "C")
						"BankTransactionCodeMustBeCashPaymentType,CustomerGroupNotSetForBillOfExchangeProcessing"

				constraint (BankTransactionCode.BankTransactionType = "C"
				or		  BankTransactionCode.BankTransactionType = "D")
					"BankTransactionCodeMustBeCashPaymentTypeOrBillOfExchangePaymentType"

				if (BankTransactionCode.BankTransactionType = "D")
					constraint (BankTransactionCode.TransactionOrigin = "R")
						"BankTransactionCodeOriginMustBeAccountsReceivable"

				if (BankTransactionCode.BankTransactionType = "C"
				and BankTransactionCode.TransactionOrigin = "R")
					if (Company.CustomerGroupField.CustomerGroup.EFTProcessingLevel.GroupLevelProcessing)
						if (EFTCustomerGroupsRel not exists)		
							constraint (CustomerRel.ReceivableElectronicFundsTransferNotifyRel exists)
								"ElectronicFundsTransferRecordDoesNotExist;MustBeAddedFirstInCustomerBeforeThisTypeOfPaymentCodeCanBeUsed"
							constraint (CustomerRel.HasCustomerEFTDraftBank)
								"ElectronicFundsTransferBankDoesNotExist;MustBeAddedFirstInCustomerBeforeThisTypeOfPaymentCodeCanBeUsed"
						if (Company != first EFTGroupProcessingCompanyRel.Company
						and Company.AccountingEntity != first EFTGroupProcessingCompanyRel.Company.AccountingEntity)
							constraint (InterEntityEFTRelationRel exists)
								"InterEntityRelationNotDefinedBetweenInvoiceCompany<Company>AndEFTPaymentCompany<first EFTGroupProcessingCompanyRel.Company>"
						if (Company.Currency != first EFTGroupProcessingCompanyRel.Currency)
							CurrencyRelationship.FromCurrency	= Company.Currency
							CurrencyRelationship.ToCurrency		= first EFTGroupProcessingCompanyRel.Currency
							constraint (CurrencyRelationship exist)
								"CurrencyRelationship<Company.Currency>ToEFTPaymentCompany<first EFTGroupProcessingCompanyRel.Currency>DoesNotExist"
							CurrencyWork.FromCurrency					= Company.Currency
							CurrencyWork.BaseAmount.ToCurrency			= first EFTGroupProcessingCompanyRel.Currency
							constraint (CurrencyWork.BaseAmount.IsRateDefined)
								"CurrencyRateDoesNotExistBetween<Company.Currency>ToEFTPaymentCompany<first EFTGroupProcessingCompanyRel.Currency>InRateTable<CurrencyTable>"

					if (Company.CustomerGroupField.CustomerGroup.EFTProcessingLevel.CompanyLevelProcessing
					and Company.EFTCalendar entered)
						if (EFTCustomerGroupsRel not exists)		
							constraint (CompanyCustomerRel.HasElectronicFundsTransferNotify)
								"ElectronicFundsTransferRecordDoesNotExist;MustBeAddedFirstInCompanyCustomerBeforeThisTypeOfPaymentCodeCanBeUsed"
							constraint (CompanyCustomerRel.HasCustomerEFTDraftBank)
								"ElectronicFundsTransferBankDoesNotExist;MustBeAddedFirstInCompanyCustomerBeforeThisTypeOfPaymentCodeCanBeUsed"


			if (IsOpenReceivableInvoiceDetail)
				if (BankTransactionCode changed)
					if (any ReceivableInvoiceDetailRel.EFTNotification entered
					or  any ReceivableInvoiceDetailRel.EftAction = 1)
						constraint (false)
							"CannotChange_-SelectedFor_\E\F\T"						
					if (any ReceivableInvoiceDetailRel.Status = 1
					and any ReceivableInvoiceDetailRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered
					or  any ReceivableInvoiceDetailRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount entered)
						constraint (false)
							"CannotChangePaymentCode;TransactionHasApplications"	
					if (any ReceivableInvoiceDetailRel.PortalPaymentSelected 								
					or  any ReceivableInvoiceDetailRel.ReceivableApplicationSelectRel exists)				
						constraint (false)																	
							"CannotChangePaymentCode;ApplicationSelectOrPortalPaymentSelectRecordExists"	

					for each OpenReceivableInvoiceDetailRel
						invoke Update OpenReceivableInvoiceDetailRel
							invoked.BankTransactionCode	= BankTransactionCode
							invoked.BankTransactionType	= BankTransactionCode.BankTransactionType

						if (each.NationalAccountTransactionRel exists)	
							invoke Update each.NationalAccountTransactionRel	
								invoked.BankTransactionCode	= each.BankTransactionCode	
								invoked.BankTransactionType	= each.BankTransactionCode.BankTransactionType	


		LatePaymentCharge
			if (LatePaymentChargeTransactionNumber entered)
				constraint (LatePaymentCharge not changed)
					"CannotChangeLatePaymentChargeIndicatorIfLatePaymentChargeHasBeenAssessed"

			if (IsOpenReceivableInvoiceDetailRel
			and LatePaymentCharge changed)
				for each OpenReceivableInvoiceDetailRel
					invoke Update OpenReceivableInvoiceDetailRel
						invoked.LatePaymentCharge = LatePaymentCharge
			initial value is true 
			default to true

		OverrideDunningProcess
			if (CompanyCustomerRel.DunningLetterIndicator)
				constraint (OverrideDunningProcess not entered)
					"MustBeBlank;_\CustomerNotSetFor_\Advanced_\Dunning_\Letter"	

		Customer

			required
			constraint (!Customer changed)
				"CannotChangeThisField;IfUnreleased,MustDeleteTransactionAndRe-Add"
			constraint (CompanyCustomerRel.ActiveStatus.Active)
				"ActionNotAllowedIfCustomerIsInactiveOrSetForDeletion"

		TransactionUserField1
			if (Status > 0)
				constraint (!TransactionUserField1 changed)
					"BatchHasBeenReleased;CannotChangeThisField"

			if (IsOpenReceivableInvoiceDetailRel
			and TransactionUserField1 changed)
				for each OpenReceivableInvoiceDetailRel
					invoke Update OpenReceivableInvoiceDetailRel
						invoked.TransactionUserField1	= TransactionUserField1

		TaxExempt
			if (Status > 0)
				constraint (!TaxExempt changed)
					"BatchHasBeenReleased;CannotChangeThisField"



		ForeignEconomicRegulatoryCode




			if (IsOpenReceivableInvoiceDetailRel
			and ForeignEconomicRegulatoryCode changed)
				for each OpenReceivableInvoiceDetailRel
					invoke Update OpenReceivableInvoiceDetailRel
						invoked.ForeignEconomicRegulatoryCode	= ForeignEconomicRegulatoryCode
			initial value is CompanyCustomerRel.ForeignEconomicRegulatoryCode

		CustomerPurchaseOrder
			if (IsOpenReceivableInvoiceDetailRel
			and CustomerPurchaseOrder changed)
				for each OpenReceivableInvoiceDetailRel
					invoke Update OpenReceivableInvoiceDetailRel
						invoked.CustomerPurchaseOrder	= CustomerPurchaseOrder

		BatchNumber
			required

		TransientSignedTransactionAmount
			if (IsUnreleased
			and (TransientSignedTransactionAmount entered	
			or  TransientSignedTransactionAmount changed))
				if (TransientSignedTransactionAmount < 0)
					constraint (IsCreditMemoIdentity)
						"TransactionAmountMustBePositive"

		InvoiceAmount
			if (Status > 0)
				InvoiceAmount.KeepRateAndAmount					= true
				constraint (!InvoiceAmount.FunctionalAmount.EnteredCurrencyRate changed
				and			!InvoiceAmount.AlternateAmount.EnteredCurrencyRate changed
				and			!InvoiceAmount.AlternateAmount2.EnteredCurrencyRate changed
				and			!InvoiceAmount.AlternateAmount3.EnteredCurrencyRate changed
				and			!InvoiceAmount.ReportAmount1.EnteredCurrencyRate changed
				and			!InvoiceAmount.ReportAmount2.EnteredCurrencyRate changed
				and			!InvoiceAmount.ReportAmount3.EnteredCurrencyRate changed
				and			!InvoiceAmount.ReportAmount4.EnteredCurrencyRate changed
				and			!InvoiceAmount.ReportAmount5.EnteredCurrencyRate changed)
					"BatchHasBeenReleased;CannotChangeThisField"

			if  (ReceivableInvoiceType.MixedSignLines
			and !Origin.Projects)
				required
					"InvoiceAmountRequiredForMixedSignInvoice"

			if  (action type.Update
			and  TransientSignedTransactionAmount changed
			and  TransientSignedTransactionAmount not entered)
				InvoiceAmount.KeepRateOnly	= true	
				initialize InvoiceAmount.CurrencyAmount
			else
			if  (IsUnreleased
			and (TransientSignedTransactionAmount entered
			or   TransientSignedTransactionAmount changed))
				InvoiceAmount.KeepRateOnly	= true	
				if (TransientSignedTransactionAmount > 0)
					InvoiceAmount.CurrencyAmount = TransientSignedTransactionAmount
				else
					InvoiceAmount.CurrencyAmount = TransientSignedTransactionAmount * -1

			constraint (InvoiceAmount.CurrencyAmount >= 0)
				"InvoiceAmountMustBePositive"

















			if (Status > 0)
				constraint (!InvoiceAmount.CurrencyAmount changed)
					"TransactionIsReleased;CannotChangeThisField"

			if (Origin.IntercompanyBilling)
				constraint (InvoiceAmount.CurrencyAmount not changed)
					"InvoiceIsFrom_\I\C\B;CannotChangeInvoiceAmount"

		BankTransactionType
			default to BankTransactionCode.BankTransactionType
			if (BankTransactionCode entered)
				BankTransactionType	= BankTransactionCode.BankTransactionType

		PointOfTitleTransfer
			default to "D"

		OriginIntrastatCountry
			if (DoIntrastat)
				default to ReceivableProcessLevel.PostalAddress.Country
				default to Company.PostalAddress.Country
				required
					"CustomerHasVATRegistrationNumberAndIntrastatFieldOriginIntrastatCountryIsRequired"
			else
				cannot be entered
					"OriginIntrastatCountryCannotBeEntered:TaxEntityIsNotSetupForIntrastatAnd/OrCustomerDoesNoteHaveVATRegistrationNumber"

		OriginIntrastatRegion
			if (DoIntrastat)
				default to ReceivableProcessLevel.PostalAddress.Region
				default to Company.PostalAddress.Region
				required
					"CustomerHasVATRegistrationNumberAndIntrastatFieldOriginIntrastatRegionIsRequired"
			else
				cannot be entered
					"OriginIntrastatRegionCannotBeEntered:TaxEntityIsNotSetupForIntrastatAnd/OrCustomerDoesNoteHaveVATRegistrationNumber"

		DestinationIntrastatCountry
			if (DoIntrastat)
				default to Customer.PostalAddress.Country
				required
					"CustomerHasVATRegistrationNumberAndIntrastatFieldDestinationIntrastatCountryIsRequired"
			else
				cannot be entered
					"DestinationIntrastatCountryCannotBeEntered:TaxEntityIsNotSetupForIntrastatAnd/OrCustomerDoesNoteHaveVATRegistrationNumber"

		DestinationIntrastatRegion
			if (DoIntrastat)
				default to Customer.PostalAddress.Region
				required
					"CustomerHasVATRegistrationNumberAndIntrastatFieldDestinationIntrastatRegionIsRequired"
			else
				cannot be entered
					"DestinationIntrastatRegionCannotBeEntered:TaxEntityIsNotSetupForIntrastatAnd/OrCustomerDoesNoteHaveVATRegistrationNumber"

		IntrastatNatureOfTransactionCode
			if (DoIntrastat)
				default to ReceivableProcessLevel.NatureOfTransactionCode
				required
					"CustomerHasVATRegistrationNumberAndIntrastatFieldIntrastatNatureOfTransactionCodeIsRequired"
			else
				cannot be entered
					"IntrastatNatureOfTransactionCodeCannotBeEntered:TaxEntityIsNotSetupForIntrastatAnd/OrCustomerDoesNoteHaveVATRegistrationNumber"

		IntrastatStatisticalProcedure
			if (!DoIntrastat)
				cannot be entered
					"IntrastatStatisticalProcedureCannotBeEntered:TaxEntityIsNotSetupForIntrastatAnd/OrCustomerDoesNoteHaveVATRegistrationNumber"

		ShipTerm
			if (!DoIntrastat
			and	!TaxEntityUsesOneSource)
				cannot be entered
					"ShipTermCannotBeEntered:TaxEntityIsNotSetupForIntrastatAnd/OrCustomerDoesNoteHaveVATRegistrationNumber"

		TransportMode
			if (!DoIntrastat)
				cannot be entered
					"TransportModeCannotBeEntered:TaxEntityIsNotSetupForIntrastatAnd/OrCustomerDoesNoteHaveVATRegistrationNumber"

		IntrastatPortCode
			if (!DoIntrastat)
				cannot be entered
					"IntrastatPortCodeCannotBeEntered:TaxEntityIsNotSetupForIntrastatAnd/OrCustomerDoesNoteHaveVATRegistrationNumber"

		DropShipIndicator
			if (DoIntrastat)
				default to "N"
			else
				cannot be entered
					"DropShipIndicatorCannotBeEntered:TaxEntityIsNotSetupForIntrastatAnd/OrCustomerDoesNoteHaveVATRegistrationNumber"

		GlobalDocumentType
			if (!DoIntrastat)
				cannot be entered
					"GlobalDocumentTypeCannotBeEntered:TaxEntityIsNotSetupForIntrastatAnd/OrCustomerDoesNoteHaveVATRegistrationNumber"

		DunningLetterIndicator
			default to CompanyCustomerRel.DunningLetterIndicator

		ParallelReference
			if (Status.Unreleased
			or FromInterface)
				if (ParallelReference not entered)
					ParallelReference = DerivedStructuredParallelReference
				else
					if (Company.ParallelReferenceFormat entered
					and FromInterface)
						constraint (IsValidParallelReference)
							"InvalidParallelReferenceNumber"

					ParallelReference = DerivedStructuredParallelReference

		System
			if (Origin.AccountsPayable)
				default to "AP"
			else
			if (Origin.Projects)
				default to "PS"
			else
			if (Origin.IntercompanyBilling)
				default to "IB"
			else
			if (Origin.Sublease)
				default to "LM"
			else
				default to "AR"

		InvoiceFinanceCodeBlock
			if (Company.DetailedInvoiceAccrualDistributions
			and action type.Create)
				if (IsManualEntry)
					default to ReceivableGeneralLedgerCodeRel.DistributionAccount
						default individual fields
				else
				if (FromInterface
				and InvoiceFinanceCodeBlock entered)
					default to ReceivableGeneralLedgerCodeRel.DistributionAccount
						default individual fields









		IDMPrinter
			initial value is Company.UserDefaultPrinterRel.IDMPrinter



	Conditions	

		AvailableForTransfer
			restricted
			when (Status.Released
			and   !CancelFlag.OpenItemHasBeenTransfered
			and   !Origin.IntercompanyBilling
			and   !ReceivableApplicationAdjustmentRel.ReceivableAdjustmentReasonType.MarkAsPaid		
			and	  PortalSelectedReceivableInvoiceDetailRel exists) 

		CanProrateDistributions
			when (Company.ProrateGainLossToDistributions
			and   ProrateDistributionsRel exists
			and   ProrateDistributionsEqualTransactionAmount)

		ReallocateFundDistributions
			restricted
			when (ProrateDistributionsRel exists
			and   ProrateDistributionsEqualTransactionAmount)

		DisplayOnlyForLoggedInUser
			restricted

			when  ((actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent	
			and	   Company.CustomerGroupField.CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup	
			and	   (DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).ReceivableCompany 
 			and		DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).Customer))  

			or		(actor.agent(CustomerRepresentativeContact).IsActiveInvoiceCustomerAndNotAllowPortalApplyCashAcrossReceivableCompanies	
			and		Company = actor.agent(CustomerRepresentativeContact).ReceivableCompany
			and		Company.CustomerGroupField.CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup	
			and		Customer = actor.agent(CustomerRepresentativeContact).Customer)

			or		(actor.agent(CustomerRepresentativeContact).IsActiveInvoiceCustomerAndAllowPortalApplyCashAcrossReceivableCompanies	
			and		Company.CustomerGroupField.CustomerGroup = actor.agent(CustomerRepresentativeContact).CustomerGroup	
			and		Customer = actor.agent(CustomerRepresentativeContact).Customer))	


		DisplayOnlyForLoggedInUserAndOpenReceivableInvoiceAmountNotEqualPortalRequestedAppliedAmount
			restricted
			when (OpenReceivableInvoiceAmountLessPortalRequestedAppliedAmountNotEqualZero
			and (DisplayOnlyForLoggedInUser
			or   NationalAccountCustomerCheck)) 

		NationalAccountCustomerCheck 
			when 	(actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent  
			and		(DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).ReceivableCompany  
 			and		DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).Customer)) 


		ApplyCashAcrossReceivableCompaniesFlagEnabledInCustomerRepresentative 
			restricted
			when ((actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and	   Customer = actor.agent(CustomerRepresentativeContact).Customer)
			or	   (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and		actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent	
			and	   (DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).ReceivableCompany   
 			and		DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).Customer)))	

		ApplyCashAcrossReceivableCompaniesFlagNotEnabledInCustomerRepresentative 
			restricted
			when ((!actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and	   Customer = actor.agent(CustomerRepresentativeContact).Customer
			and	   Company  = actor.agent(CustomerRepresentativeContact).ReceivableCompany)
			or	   (!actor.agent(CustomerRepresentativeContact).CustomerRepresentative.AllowPortalApplyCashAcrossReceivableCompanies
			and		actor.agent(CustomerRepresentativeContact).IsActiveNationalAccountParent	   
			and		DerivedNationalCompany = actor.agent(CustomerRepresentativeContact).ReceivableCompany	
 			and 	DerivedNationalCustomer = actor.agent(CustomerRepresentativeContact).Customer))	  


		ReceivableInvoiceTypeMatchRIDAlternateReceivableInvoiceType	
			restricted
			when (ReceivableInvoiceType= first ReceivableInvoiceDetailRel.AlternateReceivableInvoiceType)

		RIDUnappliedReceivablePaymentRemittanceDetailsExists	
			when (any ReceivableInvoiceDetailRel.UnappliedReceivablePaymentRemittanceDetailsExists)

		IsEligibleToShowInPortal 
			restricted
			when (ApplyCashAcrossReceivableCompaniesFlagEnabledInCustomerRepresentative
			or	  ApplyCashAcrossReceivableCompaniesFlagNotEnabledInCustomerRepresentative)

		IsCustomerRepresentativeApplyCashAcrossReceivableCompanies 
			restricted
			when (actor.agent(CustomerRepresentativeContact).CustomerRepresentative.IsInvoiceCustomerAndAllowPortalApplyCashAcrossReceivableCompanies
			or NationalAccountCustomerCheck)	

		DoIntrastat
			restricted
			when (TaxEntityRel.IntrastatUsed
			and   CompanyCustomerRel.VATRegistrationNumber entered)

		ErrorMessageEntered
			restricted
			when (ErrorMessage entered)

		FercTypeEntered
			restricted
			when   (ForeignEconomicRegulatoryCode.FercType entered)

		HasHeaderAddOnCharges
            when (HeaderAddOnChargesRel exists)

		ExpandedInvoiceEntryTemplateFlipAmountsForPrinting
			restricted
			when ((ReceivableInvoiceType.CreditMemo
			and  ((ReceivableInvoiceLineRel exists
			and   first ReceivableInvoiceLineRel.ExtendedAmount > 0)
			or   (ReceivableInvoiceAddOnCharge set exists
			and   first ReceivableInvoiceAddOnCharge set.GrossAmount > 0)))
			or   (ReceivableInvoiceType.MixedSignLines
			and   AlternateReceivableInvoiceType.CreditMemo
			and   DerivedExpandedInvoiceEntryTemplateTotalAmount > 0))

		FromIntercompanyBilling
			when (IntercompanyBillingDocumentRel exists)

		FromIntercompanyJournalControl
			when (IntercompanyBillingDocumentRel.OriginatedFrom.JournalControl)

		FromIntercompanyPayablesInvoice
			when (IntercompanyBillingDocumentRel.OriginatedFrom.PayablesInvoice)

		FromProjectContractInvoice	
			when (ProjectContractInvoiceRel exists)

		FromSubleaseBillingInvoice	
			when (SubleaseBillingInvoiceRel exists)

		FromInterface
			when (OriginatingInterfaceRun entered)

		HasAnyReceivableInvoiceDispute	
			restricted
			when (first ReceivableInvoiceDisputeRel exists)

		HasARtoAPSelect
			when (first UnreleasedARToAPApplicationSelectRel exists)

		TaxEntityUsesOneSource
			restricted
			when (TaxEntityRel.ThirdParty.Sabrix)

		HasOneSourceTaxableDistributions
			restricted
			when (LinkedTaxGroupTaxableDistributionsRel exists)

		HasOneSourceSourceOfLinkedTaxDistributions
			restricted
			when (LinkedTaxGroupSourceOfLinkedTaxDistributionRel exists)

		HasOneSourceLinkedTaxDistributions
			restricted
			when (LinkedTaxGroupLinkedTaxDistributionRel exists)

		TaxEntityUsesVertex
			restricted
			when (TaxEntityRel.ThirdParty.VertexOSeries)

		CallVertexByTransaction
			restricted
			when (TaxEntityUsesVertex
			and   TaxEntityRel.VertexCallMethod.ByTransaction) 

		HasVertexTaxableDistributions
			restricted
			when (LinkedTaxGroupTaxableDistributionsRel exists)

		HasVertexSourceOfLinkedTaxDistributions
			restricted
			when (LinkedTaxGroupSourceOfLinkedTaxDistributionRel exists)

		HasVertexLinkedTaxDistributions
			restricted
			when (LinkedTaxGroupLinkedTaxDistributionRel exists)

		HasCompanyCustomerComments
			restricted
			classic name is COMMENTS-EXIST
			when (first CompanyCustomerCommentRel exists)

		HasCompanyCustomerCommentsWithPrintCode
			when (CompanyCustomerCommentWithPrintCodeRel exists)

		HasCreditReceivableApplications
			restricted
			classic name is ARAPPLCR-EXIST
			when (SummarizeDetail
			and   not ReceivableInvoiceType.MixedSignLines
			and   first ReceivableCreditApplicationRel exists)

		HasCreditsAndDebits
			restricted
			when (MixedReceivableInvoiceDebitDetailRel exists
			and   MixedReceivableInvoiceCreditDetailRel exists)

		HasEFTRelatedApplicationSelect
			restricted
			when (EFTPaymentHeaderApplicationSelectRel exists)

		HasLineItems
			restricted
			when (first ReceivableInvoiceLineItemRel exists)

		HasPositiveAndNegativeLineItems
			restricted
			when (PositiveReceivableInvoiceLineItemRel exists
			and		NegativeReceivableInvoiceLineItemRel exists)

		HasReceivableApplicationAdjustments
			restricted
			classic name is ARADJUST-EXIST
			when (SummarizeDetail
			and   not ReceivableInvoiceType.MixedSignLines
			and   first ReceivableApplicationAdjustmentRel exists)

		HasReceivableApplications
			restricted
			classic name is ARAPPL-EXISTS
			when (SummarizeDetail
			and   not ReceivableInvoiceType.MixedSignLines
			and   first ReceivableApplicationRel exists)

		HasReceivableApplicationSelect
			restricted
			classic name is ARSAPPL-EXISTS
			when (SummarizeDetail
			and   not ReceivableInvoiceType.MixedSignLines
			and   first ReceivableApplicationSelectRel exists)

		HasReceivableGLDistributions
			restricted
			classic name is ARDIST-EXISTS
			when (first ReceivableGLDistributionRel exists)

		HasReceivableGLDistributionsNotMixed 
			restricted
			classic name is ARDIST-EXISTS
			when (first ReceivableGLDistributionRel exists
				and !ReceivableInvoiceType.MixedSignLines)

		HasSameNationalAccountParent	
			restricted
			when (DerivedNationalCompany = ReceivableInvoiceCrossReferenceRel.DerivedNationalCompany
			and DerivedNationalCustomer = ReceivableInvoiceCrossReferenceRel.DerivedNationalCustomer)

		HasVoucherReferenceNumber
			when (VoucherReferenceNumber entered)

		InterfaceIncomplete
			restricted
			when (Origin.External
			and   InterfaceInProcess)

		InvoiceTypeEntered
			restricted
			when (ReceivableInvoice entered
			and	  ReceivableInvoiceType entered)

		IsAlternateTypeCreditMemo
			restricted
			when (ReceivableInvoiceType.MixedSignLines
			and   AlternateReceivableInvoiceType.CreditMemo)

		IsAlternateTypeDebitMemo
			restricted
			when (ReceivableInvoiceType.MixedSignLines
			and   AlternateReceivableInvoiceType.DebitMemo)

		IsAlternateTypeInvoice
			restricted
			when (ReceivableInvoiceType.MixedSignLines
			and   AlternateReceivableInvoiceType.Invoice)

		IsApplicationSort
			restricted
			when (Customer.CustomerGroup.ApplicationSort1Label entered
			or	Customer.CustomerGroup.ApplicationSort2Label entered
			or	Customer.CustomerGroup.ApplicationSort3Label entered
			or	Customer.CustomerGroup.ApplicationSort4Label entered)

		IsApplicationSort1Label
			restricted
			when (Customer.CustomerGroup.ApplicationSort1Label entered)

		IsApplicationSort2Label
			restricted
			when (Customer.CustomerGroup.ApplicationSort2Label entered)

		IsApplicationSort3Label
			restricted
			when (Customer.CustomerGroup.ApplicationSort3Label entered)

		IsApplicationSort4Label
			restricted
			when (Customer.CustomerGroup.ApplicationSort4Label entered)

		IsCanCreateLineItem
			restricted
			when (first ReceivableGLDistributionProjectRel exists
			and   any ReceivableGLDistributionProjectRel.GeneralLedgerAccount.Project entered
			and   !HasLineItems
			and  (!ZeroAmountInvoice
			or	Origin.Projects))

		IsCertificationNumberOnCustomerOrder	
			restricted
			when (CertificationNumber entered
			and   CertificationNumberOnCustomerOrderRel exists)

		IsCompanyCurrency
			restricted
			when (OriginalCurrency = Company.Currency)

		IsCreated
			restricted
			when (ReceivableInvoice exists)

		IsCreditMemo
			restricted
			when (ReceivableInvoiceType.CreditMemo)

		IsCreditMemoIdentity
			restricted
			when (IsAlternateTypeCreditMemo
			or	IsCreditMemo)

		IsCustomerOrder
			restricted
			when (CustomerOrder entered
			and   CustomerOrderRel exists)

		IsDebitIdentity
			restricted
			when (IsDebitMemoIdentity
			or	IsInvoiceIdentity)

		IsDebitMemo
			restricted
			when (ReceivableInvoiceType.DebitMemo)

		IsDebitMemoIdentity
			restricted
			when (IsAlternateTypeDebitMemo
			or	IsDebitMemo)

		IsDisputeEligible
			restricted
			when (IsOpenReceivableInvoiceDetailRel

			and  !ZeroAmountInvoice
			and  !Origin.IntercompanyBilling)

		IsDistributions
			restricted
			when (first ReceivableGLDistributionProjectRel exists)

		IsGroupedMemo
			restricted
			when (Origin.GroupedMemo)

		IsHSNSACCodeEnabled
			restricted
			when (Company.GeneralLedgerCompany.RequireHSNSACCode)

		IsInvoice
			restricted
			when (ReceivableInvoiceType.Invoice)

		IsInvoiceBatchReleased
			restricted
			when (ReceivableInvoiceBatchRel exists
			and   ReceivableInvoiceBatchRel.Status.Released)

		IsInvoiceIdentity
			restricted
			when (IsAlternateTypeInvoice
			or	IsInvoice)

		IsLastInvoice
			restricted
			when (IsInvoiceIdentity
			and  CompanyCustomerRel.LastInvoiceDate < TransactionDate)

		IsManualEntry
			restricted
			when (Origin.ManualInvoice
			or	Origin.ManualMemo)

		AllowReleaseBatch
			restricted
			when ((IsManualEntry
			or 	  Origin.IntercompanyBilling)
			and   Status.Unreleased
			and   ReceivableInvoiceBatchRel exists
			and   ReceivableInvoiceBatchRel.Status.Unreleased)
		
		ShowDetailedFinanceStructure
			restricted
			when (Company.DetailedInvoiceAccrualDistributions
			and  (IsManualEntry
			or    Origin.Projects
			or    FromInterface))

		UnreleasedShowDetailedFinanceStructure
			restricted
			when (Status.Unreleased
			and   ShowDetailedFinanceStructure)

		IsMarkedAsPaidEligible	
			restricted
			when (Company.MarkedAsPaidOffsetAccount entered
			and IsReleased
			and (OpenReceivableInvoiceAmountEqualsInvoiceAmountCurrencyAmount)	
			and !ReceivableApplicationSelectRel exists
			and !UnappliedReceivablePaymentRemittanceRel exists	
			and (!IntercompanyBillingDocumentRel.PayablesInvoiceRel.PayablesInvoicePaymentRel exists
			or (IntercompanyBillingDocumentRel.PayablesInvoiceRel.PayablesInvoicePaymentRel exists
			and	!IntercompanyBillingDocumentRel.PayablesInvoiceRel.PayablesInvoicePaymentRel.MarkedAsPaid)))

		IsMemberOfFilterGeneralLedgerCompanyGroup
			restricted
			when (FilterGeneralLedgerCompanyGroup not entered
			or   (FilterGeneralLedgerCompanyGroup entered
			and   GeneralLedgerCompanyGroupMemberRel exists))






		IsNationalAccountToChild
			restricted
			when (NationalAccountCompanyCustomerRel exists)

		IsNationalAccountToParent
			restricted
			when (NationalAccountInvoiceCompanyCustomerRel exists)

		IsNotImported
			restricted
			classic name is ONLINE-INVOICE
			when (Origin.ManualInvoice
			or	Origin.ManualMemo)

		IsNotImportedMemo
			restricted
			classic name is ONLINE-MEMO
			when (Origin.ManualMemo)

		IsNotPrintedChargeback
			restricted
			classic name is NON-PRINTED-CB
			when (ChargebackPrinted not entered
			and   Origin.Chargeback
			or	Origin.ClosingCreatedChargeback)

		IsOpenDisputes
			restricted
			when (OpenReceivableInvoiceDisputeRel exists)

		IsOpenReceivableInvoiceDetail
			restricted
			when (IsReleased
			and   OpenReceivableInvoiceAmount > 0)

		IsOpenReceivableInvoiceDetailRel
			restricted
			when (OpenReceivableInvoiceDetailRel exists)

		IsOpenReceivableInvoiceDetailRelAndItsDescriptionNotEntered	
			restricted
			when (OpenReceivableInvoiceDetailRel exists
			and OpenReceivableInvoiceDetailRel.Description not entered)

		IsPortalParialOpenReceivableInvoiceDetail
			restricted
			when (PortalPartialOpenReceivableInvoiceDetailRel exists)





		IsReceivableGLDistributionRelNotBal
			restricted
			when (sum ReceivableGLDistributionDetailTypeRel.DistributionAmount.CurrencyAmount != InvoiceAmount.CurrencyAmount)

		IsReceivableInvoiceObligation
			restricted
			when (ReceivableInvoiceObligation set exists)

		IsReleased
			restricted
			when (Status.Released)

		IsReleasedAndObligationsNotExist
			restricted
			when (Status.Released
			and   !IsReceivableInvoiceObligation
			and   !Origin.IntercompanyBilling)









		IsReleasedSummarizeDetail
			restricted
			when (IsReleased
			and   SummarizeDetail)

		IsReservedManualDebitTransactionPrefix
			restricted
			when (ReceivableInvoicePrefix = Company.FinanceChargeTransactionPrefix)









		IsSignedAndUnsignedLineItems
			restricted
			when (any ReceivableInvoiceLineItemRel.TransactionAmount < 0
			and   any ReceivableInvoiceLineItemRel.TransactionAmount > 0)

		IsTermsFieldsOverridden
			restricted
			when (TermsFieldsOverridden)

		IsTransactionAmountDifferent
			restricted
			classic name is MANUAL-AMT
			when (old InvoiceAmount.CurrencyAmount != InvoiceAmount.CurrencyAmount)

		IsUnreleased
			restricted
			when (Status.Unreleased)

		IsUnreleasedDistributions
			restricted
			when  (IsUnreleased
			and	IsDistributions)

		AllowDeriveTransactionAmount
			restricted
			when (IsUnreleased
			and !Origin.IntercompanyBilling
			and  (IsDistributions
			or    InvoiceEntryTemplate.Expanded))

		ShowExpandedInvoiceEntryAmountOutOfBalance
			restricted
			when (InvoiceEntryTemplate.Expanded
			and   Status.Unreleased
			and ((IsCreditMemoIdentity
			and   DerivedExpandedInvoiceEntryTemplateTotalAmountForPrinting != (InvoiceAmount.CurrencyAmount * -1))
			or  (!IsCreditMemoIdentity
			and   DerivedExpandedInvoiceEntryTemplateTotalAmountForPrinting != InvoiceAmount.CurrencyAmount)))

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		SecurityGroupAllowsAccess	
			when (actor.context.CompanySecurityGroup = blank
			or	  CompanySecurityGroupMemberRel exists)

		IsValidParallelReference
			when (DerivedStructuredParallelReference = ParallelReference)

		IsZeroPaymentAdjustmentsAllowed
			when (ReceivableCompanyRel.AllowZeroPayments
			and   ReceivableCompanyRel.AllowZeroPaymentAdjustments)

		IsZeroPaymentAdjustmentsNotAllowed
			when (ReceivableCompanyRel.AllowZeroPayments
			and   !ReceivableCompanyRel.AllowZeroPaymentAdjustments)

		DefaultFromEmailAddress
			restricted
			when (CompanyCustomerRel.ReceivableInvoiceFromAndReplyToEmail = config.DefaultFromEmailAddress)

		MatchingOperatorCriteria
			restricted
			when (ReceivableOperator not entered
			or   (ReceivableOperator entered
			and   ReceivableInvoiceBatchRel.ReceivableOperator = ReceivableOperator))

		NationalAccountCrossRefCompanyCustomerRelExists
			restricted
			when (NationalAccountCrossRefCompanyCustomerRel exists)

		OpenProjectReceivableDetailRecords   
			restricted
			when (OpenReceivableInvoiceDetailWithProjectRel exists)

		OpenReceivableDetailRecords
			restricted
			when (OpenReceivableDetailRecordsRel exists)

		OpenReceivableInvoiceAmountEqualsInvoiceAmountCurrencyAmount	
			restricted
			when (OpenReceivableInvoiceAmount = InvoiceAmount.CurrencyAmount)

		OpenReceivableInvoiceAmountLessPortalRequestedAppliedAmountNotEqualZero	
			restricted
			when (OpenReceivableInvoiceAmountLessPortalRequestedAppliedAmount != 0)

		OriginatingICBIsFromGL
			restricted
			when (IntercompanyBillingDocumentRel.OriginatingJournalControlRel exists)

		OriginatingICBIsFromInvoice
			restricted
			when (IntercompanyBillingDocumentRel.OriginatingInvoiceRel exists)

		OriginIsFundAccountingSupported
			when (ReceivableInvoice.Origin.ManualInvoice
			or	ReceivableInvoice.Origin.ManualMemo
			or	ReceivableInvoice.Origin.Projects
			or	ReceivableInvoice.Origin.External
			or  ReceivableInvoice.Origin.IntercompanyBilling  
			or  ReceivableInvoice.Origin.Sublease) 

		AllowFundAccountingReallocations
			restricted
			when (OriginIsFundAccountingSupported
			and (!Origin.External
			or	  ProrateDistributionsRel exists))

		DoFundAccountingReallocationsInBackground
			restricted
			when (instance count of ProrateDistributionsRel > 5)

		ParallelReferenceEnabled
			restricted
			when (Company.ParallelReferenceFormat entered)

		ProjectContractInvoiceEntered
			restricted
			when (ProjectContractInvoice entered)

		ProjectContractEntered
			restricted
			when (ProjectContract entered)

		ProrateDistributionsEqualTransactionAmount
			restricted
			when (NegativeProrateDistributionTotal = SignedTransactionAmount)

		ReceivableInvoiceCrossReferenceRelExists
			restricted
			when (ReceivableInvoiceCrossReferenceRel exists)

		RecordExists
			restricted
			when (ReceivableInvoice exists)

		ShowFirstDueDate
			restricted
			when (Status.Released
			and !IsTermsFieldsOverridden)

		ShowIntrastat
			restricted
			when (DoIntrastat
			or	ReceivableInvoice not exist)

		ShowInvoiceDetail
			when (ReceivableInvoiceDetailRel exists)

		ShowLineItems
            when (Status.Unreleased
            and   not FromInterface
            and   not ShowReceivableInvoiceLinesAndAddOnCharges)

		ShowReceivableInvoiceLinesAndAddOnCharges
            when (InvoiceEntryTemplate.Expanded
            and   IsManualEntry)

		ShowOriginatingDocuments
			restricted
			when (FromIntercompanyBilling
			and  IntercompanyBillingDocumentRel.IntercompanyBillingGroup.ShowOriginatingDocument)

		UnappliedReceivablePaymentRemittanceRelExists
			when (UnappliedReceivablePaymentRemittanceRel exists)

		PortalUnappliedReceivablePaymentRemittanceRelExists	
			restricted
			when (PortalUnappliedReceivablePaymentRemittanceRel exists)

		UnreleasedInterfaceComplete
			restricted
			when (Origin.External
			and   !FromEFTPayment
			and   !InterfaceInProcess
			and   Status.Unreleased)

		UnreleasedInterfaceCompleteOrFromICB
			restricted
			when (UnreleasedInterfaceComplete
			or	Origin.IntercompanyBilling)

		UnreleasedOrMultipleDueDates
			restricted
			when (Status.Unreleased
			or   (any ReceivableInvoiceDetailRel.DueDate != first ReceivableInvoiceDetailRel.DueDate))

		UpdateCurrencyTableValid
			restricted
			when (!RecordExists
			or	  Status.Unreleased)

		UpdateParallelReferenceOn
			restricted
			when (IsUnreleased
			and   ParallelReferenceEnabled)

		VATRegistrationNumberEntered	
			restricted
			when (CompanyCustomerRel.VATRegistrationNumber entered)

		WithinCompanyRange
			restricted
			when (CompanyRange not entered
			or	Company within CompanyRange)





		WithinCustomerPurchaseOrderRange
			restricted
			when (CustomerPurchaseOrderRange not entered
			or	CustomerPurchaseOrder within CustomerPurchaseOrderRange)

		WithinCustomerRange
			restricted
			when (CustomerRange not entered
			or	Customer within CustomerRange)

		WithinDiscountDateRange
			restricted
			when (DiscountDateRange not entered
			or	TransientDiscountDate.DiscDate[1] within DiscountDateRange
			or	TransientDiscountDate.DiscDate[2] within DiscountDateRange
			or	TransientDiscountDate.DiscDate[3] within DiscountDateRange)

		WithinDueDateRange
			restricted
			when (DueDateRange not entered
			or	TransientDueDate within DueDateRange)











		WithinProjectRange
			restricted
			when (ProjectRange not entered
			or	TransientProject within ProjectRange)

		WithinReceivableInvoiceRange
			restricted
			when (ReceivableInvoiceRange not entered
			or	ReceivableInvoice within ReceivableInvoiceRange)

		WithinReceivableProcessLevelRange
			restricted
			when (ReceivableProcessLevelRange not entered
			or	ReceivableProcessLevel within ReceivableProcessLevelRange)

		WithinSalesRepresentativeRange
			restricted
			when (SalesRepresentativeRange not entered
			or	SalesRepresentative within SalesRepresentativeRange)

		WithinTermsCodeRange
			restricted
			when (TermsCodeRange not entered
			or	TermsCode within TermsCodeRange)

		WithinTransactionAmountRange
			restricted
			when (TransactionAmountRange not entered
			or	InvoiceAmount.CurrencyAmount within TransactionAmountRange)

		WithinTransactionDateRange
			restricted
			when (TransactionDateRange not entered
			or	TransactionDate within TransactionDateRange)







		WithinTransUser1Range
			restricted
			when (TransUser1Range not entered
			or	TransactionUserField1 within TransUser1Range)

		WithinXrefNbrRange
			restricted
			when (XrefNbrRange not entered
			or	ReceivableCrossReference.ReceivableInvoice within XrefNbrRange)

		ZeroAmountInvoice
			when (InvoiceAmount.CurrencyAmount not entered)

		IsAllocateForTaxPointPaymentSupported
			restricted
			when (Company.AllocateTaxPointPayment)

		HasFundReallocatedReceivableGLDistributions
			restricted
			when (first FundReallocatedReceivableGLDistributionRel exists)




		ShowIDMPrinter
			restricted
			when (Company.UseIDM)

		IsValidForGenerate
			restricted
			when (Status.Released
			and   Company.UseIDM
			and  (Origin.ManualMemo
			or	  Origin.ManualInvoice
			or	  Origin.Converted
			or    Origin.External)
			and	  System != "BL")

		IsValidForGenerateIDMDocumentUponRelease
			restricted
			when (Company.UseIDM
			and  (Company.GenerateIDMReceivableInvoiceUponRelease
			and  (Origin.ManualMemo
			or	  Origin.ManualInvoice)
			and	  System != "BL")
			or	 (Origin.External
			and	  GenerateIDMDocument))

		HasIDMDocument
			restricted
			when (Company.UseIDM
			and   IDMUniqueID entered)

		BillingInvoiceRelExists	
			restricted
			when (BillingInvoiceRel exists)





















		IsValidForIDMPrint
			restricted
			when (Company.UseIDM
			and   IDMUniqueID entered)

		IsValidForIDMEmail
			restricted
			when (Company.UseIDM
			and   IDMUniqueID entered
			and   CompanyCustomerRel.EmailReceivableInvoice)

		IsValidForIDMManualEmail
			restricted
			when (Company.UseIDM
			and   IDMUniqueID entered)

		HasIDMDocumentTemplate
			restricted
			when ((InvoiceEntryTemplate.Standard
			and    Company.ReceivableInvoiceTemplate entered)
			or    (InvoiceEntryTemplate.Expanded
			and    Company.ReceivableInvoiceExpandedTemplate entered))

		UnpostedApplicationsExist
			restricted
			when (any ReceivableInvoiceDetailRel.HasUnpostedApplications)

		AllowFrontEndSplit
			restricted
			when (Company.FinanceEnterpriseGroup.FrontEndSplits
			and Company.FrontEndSplitARDistributions
			and ReceivableGLDistributionNativeRel exists
			and (IsInvoice
			or IsDebitMemo)
			and Status.Unreleased)

		HasFrontEndSplitDistributions
			restricted
			when (FrontEndSplitReceivableGLDistributionRel exists
			and (IsInvoice
			or IsDebitMemo)
			and Status.Unreleased)


		DistributionGoodsLineExist
			restricted
			when (ReceivableGLDistributionLineTypeRel exists)

		IsIntrastatInvoice
			restricted
			when (IntrastatNatureOfTransactionCode entered
			or	  IntrastatStatisticalProcedure entered
			or	  TransportMode entered
			or	  IntrastatPortCode entered
			or	  ShipTerm entered)

		
		UpdateIsValid
			restricted
			when (!Origin.IntercompanyBilling
			or (Status.Unreleased
			and  Origin.IntercompanyBilling) )
			
		DeleteIsValid
			restricted
			when (IsUnreleased
			and !Origin.IntercompanyBilling)

		ReceivableInvoiceExists  
			restricted
			when (this instance exists)


	Relations	


		UnreleasedARToAPApplicationSelectRel
			one-to-many relation to ARToAPApplicationSelect
			Field Mapping uses Set2
				related.Company									 = Company
				related.ARToAPApplicationSelect.TransactionType	 = ReceivableInvoiceType
				related.ARToAPApplicationSelect.Invoice			 = ReceivableInvoice
			Instance Selection
				where (related.Status.Unreleased)



		BankTransactionCodeRel	
			one-to-one relation to BankTransactionCode
			Field Mapping uses symbolic key
				related.CashManagementGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.BankTransactionCode		= BankTransactionCode




		ClaimsAndLiabilitiesRel
			one-to-many relation to ClaimsAndLiabilities
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.ClaimsAndLiabilitiesHeader	 = LocalClaimsAndLiabilitiesHeader
				related.Country						 = Customer.PostalAddress.Country



		CompanyCustomerRel
			classic name is ARCUSTOMER
			one-to-one relation to CompanyCustomer
			required
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer

		ReassignCompanyCustomerRel
			one-to-one relation to CompanyCustomer
			required
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = LocalReassignCustomer



		CompanyCustomerCommentRel
			classic name is ARCOMMENT
			one-to-many relation to CompanyCustomerComment
			delete cascades
			Field Mapping uses Set2
				related.Company					 = Company
				related.Customer				 = Customer
				related.CommentType				 = "T"
				related.TransactionType			 = ReceivableInvoiceType
				related.Transaction				 = ReceivableInvoice

		CompanyCustomerCommentWithPrintCodeRel
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses Set2
				related.Company					 = Company
				related.Customer				 = Customer
				related.CommentType				 = "T"
				related.TransactionType			 = ReceivableInvoiceType
				related.Transaction				 = ReceivableInvoice
			Instance Selection
				where (related.PrintCode.Print
				or related.PrintCode.BothDisplayAndPrint)

		OldCompanyCustomerCommentRel
			classic name is ARCOMMENT
			one-to-many relation to CompanyCustomerComment
			delete cascades
			Field Mapping uses Set2
				related.Company					 = Company
				related.Customer				 = OldCustomer
				related.CommentType				 = "T"
				related.TransactionType			 = ReceivableInvoiceType
				related.Transaction				 = ReceivableInvoice



		CompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode
				related.GeneralLedgerSystemCode	 = "AR"
				related.Company					 = Company



		ReceivableCreditAnalystRel
			one-to-many relation to CreditAnalyst
			Field Mapping uses symbolic key
				related.Company	 		= Company
				related.CreditAnalyst	= LocalCreditAnalyst



		CustomerRel
			classic name is CUSTDESC
			one-to-one relation to Customer
			required
			Field Mapping uses symbolic key
				related.CustomerGroup = Company.CustomerGroupField.CustomerGroup
				related.Customer	  = Customer



		DefaultBillToRel
			one-to-many relation to CustomerBillTo
			Field Mapping uses Set2
				related.CustomerGroup	 = Customer.CustomerGroup
				related.Customer		 = Customer



		AnyCustomerInvoiceTypeCodeRel
			one-to-one relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company			 = Company
				related.Customer		 = Customer
				related.InvoiceTypeCode	 = InvoiceTypeCode

		CompanyCustomerInvoiceTypeCodesRel
			one-to-many relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company			 = Company
				related.Customer		 = Customer

		CustomerInvoiceTypeCodeRel
			one-to-one relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company			 = Company
				related.Customer		 = Customer
				related.InvoiceTypeCode	 = InvoiceTypeCode

		CustomerInvoiceTypeCodesRel
			one-to-many relation to CustomerInvoiceTypeCode
			Field Mapping uses symbolic key
				related.Company			 = Company
				related.Customer		 = Customer
			Instance Selection
				where (related.Default)



		CustomerMajorClassRel
			one-to-one relation to CustomerMajorClass
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CustomerMajorClass 		 = LocalMajClass



		CustomerMinorClassRel
			one-to-one relation to CustomerMinorClass
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.CustomerMajorClass 		 = LocalMajClass
				related.CustomerMinorClass 		 = LocalMinClass



		CertificationNumberOnCustomerOrderRel	
			one-to-many relation to CustomerOrder
			Field Mapping uses symbolic key
				related.Company						 = Company
			Instance Selection
				where (related.CertificationNumber	 = CertificationNumber)

		CustomerOrderRel
			one-to-one relation to CustomerOrder
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.CustomerOrder				 = CustomerOrder



		CustomerProcessLevelInclusionRel
			one-to-many relation to CustomerProcessLevelInclusion
			Field Mapping uses symbolic key
				related.Company													 = Company
				related.Customer												 = Customer
				related.CustomerProcessLevelInclusion.ReceivableProcessLevel	 = ReceivableProcessLevel
			Instance Selection
				where (related.IncludeProcessLevel)



		DunningHistoryRel
			one-to-many relation to DunningHistory
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = Customer
			Instance Selection
				where (related.DunningHistory.DunningHistoryGroup.ReceivableInvoiceDetailType	 = ReceivableInvoiceType
				and   related.DunningHistory.DunningHistoryGroup.Invoice						 = ReceivableInvoice)



		GLClosePeriodRel
			one-to-many relation to GeneralLedgerClosePeriod
			Field Mapping uses ByEndDate
				related.FinanceEnterpriseGroup			 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.GeneralLedgerCloseConfiguration	 = Company.AccountingEntity.CloseConfiguration
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date >= GeneralLedgerDate)


		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company


		GeneralLedgerCompanyGroupMemberRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	 = FilterGeneralLedgerCompanyGroup
				related.Company						 = Company

		GeneralLedgerCompanyGroupRel
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= LocalGeneralLedgerCompanyGroup
				related.Company						= Company

		CompanySecurityGroupMemberRel	
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company

		GeneralLedgerCompanyGroupMembersRel
            one-to-many relation to GeneralLedgerCompanyGroupMember
            Field Mapping uses Set2
                related.GeneralLedgerCompanyGroup = LocalGeneralLedgerCompanyGroup



		InterEntityCrossRefToInvoiceRelationRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity		 = ReceivableCrossReference.Company.AccountingEntity
				related.ToAccountingEntity		 = GeneralLedgerCompanyRel.AccountingEntity

		InterEntityEFTRelationRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity		 = GeneralLedgerCompanyRel.AccountingEntity
				related.ToAccountingEntity		 = first EFTGroupProcessingCompanyRel.Company.AccountingEntity

		InterEntityInvoiceToCrossRefRelationRel
			one-to-one relation to GLInterEntityRelation
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.AccountingEntity		 = GeneralLedgerCompanyRel.AccountingEntity
				related.ToAccountingEntity		 = ReceivableCrossReference.Company.AccountingEntity



		IntercompanyBillingDocumentRel
			one-to-one relation to IntercompanyBillingDocumentHeader
			Field Mapping uses ByReceivableInvoice
				related.IntercompanyBillingGroup			 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ReceivableEntity.Company			 = Company
				related.ReceivableEntity.ReceivableInvoice	 = ReceivableInvoice

		IntercompanyBillingDocumentByDateRel
			one-to-many relation to IntercompanyBillingDocumentHeader
			Field Mapping uses ByInvoiceDate
				related.IntercompanyBillingGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.InvoiceDate										= TransactionDate
			Instance Selection
				where 	(related.ReceivableEntity.Company				= Company
				and		 related.ReceivableEntity.ReceivableInvoice		= ReceivableInvoice)










		NationalAccountCompanyCustomerRel
			one-to-one relation to NationalAccount
			Field Mapping uses symbolic key
				related.CustomerGroup										= Customer.CustomerGroup
				related.NationalAccount.NationalAccountGroup.NatCompany		= Company
				related.NationalAccount.NationalAccountGroup.NatCustomer	= Customer
				related.NationalAccount.InvoiceAccountGroup.Company			= ReceivableCrossReference.Company
				related.NationalAccount.InvoiceAccountGroup.Customer		= ReceivableCrossReference.Customer


		NationalAccountCrossRefCompanyCustomerRel
			one-to-one relation to NationalAccount
			Field Mapping uses symbolic key
				related.CustomerGroup										 = Customer.CustomerGroup
				related.NationalAccount.NationalAccountGroup.NatCompany		 = ReceivableCrossReference.Company
				related.NationalAccount.NationalAccountGroup.NatCustomer	 = ReceivableCrossReference.Customer
				related.NationalAccount.InvoiceAccountGroup.Company			 = Company
				related.NationalAccount.InvoiceAccountGroup.Customer		 = Customer


		NationalAccountInvoiceCompanyCustomerRel
			one-to-one relation to NationalAccount
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company			 = Company
				related.NationalAccount.InvoiceAccountGroup.Customer		 = Customer
				related.NationalAccount.NationalAccountGroup.NatCompany		 = ReceivableCrossReference.Company
				related.NationalAccount.NationalAccountGroup.NatCustomer	 = ReceivableCrossReference.Customer

		NationalAccountInvoiceCrossRefCompanyCustomerRel
			one-to-one relation to NationalAccount
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company			 = ReceivableCrossReference.Company
				related.NationalAccount.InvoiceAccountGroup.Customer		 = ReceivableCrossReference.Customer
				related.NationalAccount.NationalAccountGroup.NatCompany		 = Company
				related.NationalAccount.NationalAccountGroup.NatCustomer	 = Customer

		NationalAccountRel
			one-to-many relation to NationalAccount
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company			 = Company
				related.NationalAccount.InvoiceAccountGroup.Customer		 = Customer














		ProjectContractRel	
			one-to-one relation to ProjectContract
			Field Mapping uses symbolic key	
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ProjectContract				= ProjectContract


		ProjectContractInvoiceRel	
			one-to-one relation to ProjectContractInvoice
			Field Mapping uses symbolic key	
				related.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ProjectContract				= ProjectContract
				related.FinanceDimension2			= FinanceDimension2
				related.ProjectContractInvoice		= ProjectContractInvoice

		ProjectContractInvoiceLineRel
			one-to-many relation to ProjectContractInvoiceLine
			Field Mapping uses ByProject
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ProjectContract			 = ProjectContract
				related.FinanceDimension2		 = FinanceDimension2
				related.ProjectContractInvoice	 = ProjectContractInvoice



		ReceivableApplicationPaymentRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company									 = Company
			Instance Selection
				where (related.ReceivableApplication.TransType	 = AlternateReceivableInvoiceType)

		ReceivableApplicationPaymentsRel				
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company									 = Company
			Instance Selection
				where (related.ReceivableApplication.Invoice	 = ReceivableInvoice)

		ReceivableApplicationRel
			classic name is ARAPPLIED
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company									 = Company
			Instance Selection
				where (related.ReceivableApplication.TransType	 = AlternateReceivableInvoiceType
				and   related.ReceivableApplication.Invoice		 = ReceivableInvoice)

		ReceivableCreditApplicationRel
			classic name is ARAPPLIEDCR
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set3
				related.CreditTransaction.CreditCompany			 = Company
				related.CreditTransaction.CreditCustomer		 = Customer
				related.CreditTransaction.CreditType			 = ReceivableInvoiceType
				related.CreditTransaction.CreditNumber			 = ReceivableInvoice

		UnpostedReceivableApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses symbolic key
				related.Company									 = Company
			Instance Selection
				where (related.ReceivableApplication.Invoice	 = ReceivableInvoice
				and   !related.Status.ApplicationPosted)



		ReceivableApplicationAdjustmentRel
			classic name is ARADJUST
			one-to-many relation to ReceivableApplicationAdjustment
			Field Mapping uses symbolic key
				related.Company	 = Company
			Instance Selection
				where (related.ReceivableApplication.TransType	 = ReceivableInvoiceType
				and   related.ReceivableApplication.Invoice		 = ReceivableInvoice)



		EFTPaymentHeaderApplicationSelectRel
			one-to-many relation to ReceivableApplicationSelect
			Field Mapping uses Set3
				related.Company									 = ReceivablePaymentHeader.Company 
				related.ReceivablePaymentHeader					 = ReceivablePaymentHeader	
			Instance Selection
				where	(related.ElectronicFundsTransfer
				and		related.ReceivableApplicationSelect.TransactionCompany									 = Company
				and		related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = AlternateReceivableInvoiceType
				and		related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoice)

		ReceivableApplicationSelectRel
			classic name is ARSAPPLIED
			one-to-many relation to ReceivableApplicationSelect
			Field Mapping uses Set2
			Instance Selection
				where	(related.ReceivableApplicationSelect.TransactionCompany									 = Company
				and		related.ReceivableApplicationSelect.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = ReceivableInvoiceType
				and		related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoice)

		ReceivableApplicationSelectForThisInvoiceRel 
			one-to-many relation to ReceivableApplicationSelect
			Field Mapping uses Set4
				related.ReceivableApplicationSelect.TransactionCompany									 		 = Company
				related.ReceivableApplicationSelect.ReceivableInvoiceDetail.Invoice					 			 = ReceivableInvoice
			Instance Selection
				where	(related.ReceivableInvoiceDetailRel.AlternateReceivableInvoiceType	 					 = ReceivableInvoiceType)


		EFTGroupProcessingCompanyRel
			one-to-many relation to ReceivableCompany
			Field Mapping uses Set2
				related.CustomerGroupField.CustomerGroup	= Company.CustomerGroupField.CustomerGroup
			Instance Selection
				where (related.EFTDebitCashCode entered)

		ReceivableCompanyRel
			one-to-one relation to ReceivableCompany
			Field Mapping uses symbolic key
				related.Company								 = Company



		ReceivableGeneralLedgerCodeRel
			classic name is ARCODE
			one-to-one relation to ReceivableGeneralLedgerCode
			required
			Field Mapping uses symbolic key
				related.Company						 = Company
				related.ReceivableGeneralLedgerCode	 = ReceivableGeneralLedgerCode


		LocalProjectDistributionRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
			Instance Selection
				where (related.GeneralLedgerAccount.Project				 = LocalProject)

		NonZeroDistributionInvoiceRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses ByReceivableInvoice
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
			Instance Selection
				where (related.DistributionAmount.CurrencyAmount entered)

		OldReceivableGLDistributionRel
			classic name is ARDISTRIB
			one-to-many relation to ReceivableGLDistribution
			delete cascades
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = OldCustomer

		ReceivableGLDistributionDetailTypeRel
			classic name is ARDISTRIB
			one-to-many relation to ReceivableGLDistribution
			delete cascades
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
			Instance Selection
				where (related.AccumulationType.Detail)

		ProrateDistributionsRel	
			one-to-many relation using ReceivableGLDistributionDetailTypeRel
			Instance Selection
				where (related.DistributionSource.AccountsReceivable
				and	   related.DistributionAmount.CurrencyAmount entered)

		ReceivableGLDistributionDetailTypeAmountEnteredRel
			one-to-many relation using ReceivableGLDistributionDetailTypeRel
			Instance Selection
				where (related.DistributionAmount.CurrencyAmount entered)

		ReceivableGLDistributionInvoiceRel
			classic name is ARDISTRIB
			one-to-many relation to ReceivableGLDistribution
			delete cascades
			Field Mapping uses ByReceivableInvoice
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice

		OneSourceTaxableDistributionsRel
			one-to-many relation using ReceivableGLDistributionInvoiceRel
			Instance Selection
				where (related.TaxCode entered)

		LinkedTaxGroupTaxableDistributionsRel
			one-to-many relation using ReceivableGLDistributionInvoiceRel
			Instance Selection
				where (related.LinkedTaxGroup.Indicator.Taxable)

		LinkedTaxGroupSourceOfLinkedTaxDistributionRel
			one-to-many relation using ReceivableGLDistributionInvoiceRel
			Instance Selection
				where (related.LinkedTaxGroup.Indicator.SourceDistribution)

		LinkedTaxGroupLinkedTaxDistributionRel
			one-to-many relation using ReceivableGLDistributionInvoiceRel
			Instance Selection
				where (related.LinkedTaxGroup.Indicator.CreatedTaxDistribution)
		
		ReceivableGLDistributionLastTaxableRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses ByReceivableInvoice
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
				related.LastDistributionSequence						 = LocalDistributionSequence

		ReceivableGLDistributionProjectRel
			classic name is ARDISTRIB
			one-to-many relation to ReceivableGLDistribution
			delete cascades
			Field Mapping uses ByReceivableInvoice
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice

		ReceivableGLDistributionRel
			classic name is ARDISTRIB
			one-to-many relation to ReceivableGLDistribution
			delete cascades
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer

		FundReallocatedReceivableGLDistributionRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
			Instance Selection
				where (related.Description = Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundReallocatedDescription)

		ReceivableGLDistributionWithProjectRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
			Instance Selection
				where (related.GeneralLedgerAccount.Project entered)

		GLDistributionsNotToPurgeRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
			Instance Selection
				where (related.IsProjectSetNotToAllowPurge)

		ReceivableGLDistributionWithTaxAmountRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
			Instance Selection
				where (related.TaxCode entered
				and	related.IsInvoiceBased)

		ReceivableGLDistributionWithTaxCodeRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
			Instance Selection
				where (related.TaxCode entered
				and	!related.TaxPoint.PaymentDate)

		OneSourceReceivableGLDistributionWithTaxCodeRel 
			one-to-many relation using ReceivableGLDistributionWithTaxCodeRel
			Instance Selection
				where (related.OneSourceCreatedTaxDistribution)

		ReleasedDistributionsRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
			Instance Selection
				where (related.Status.Released)

		UnpostedDistributionsRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
			Instance Selection
				where (!related.Status.Posted)



		ReceivableInvoiceCertificationNumberRel
			one-to-many relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivableInvoiceType			 = AlternateReceivableInvoiceType
			Instance Selection
				where (related.CertificationNumber		 = CertificationNumber
				and	related.UniqueID					 != UniqueID)

		ReceivableInvoiceCrossReferenceRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses Set6
				related.Company							 = ReceivableCrossReference.Company
				related.AlternateReceivableInvoiceType	 = ReceivableCrossReference.ReceivableInvoiceType 
				related.ReceivableInvoice				 = ReceivableCrossReference.ReceivableInvoice

		ReceivableInvoiceRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivableInvoiceType			 = AlternateReceivableInvoiceType
				related.ReceivableInvoice				 = ReceivableInvoice



		ReceivableInvoiceBatchRel
			classic name is BLINVHDR
			one-to-one relation to ReceivableInvoiceBatch
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceBatch	 = BatchNumber

		ReceivableInvoiceReleaseBatchRel
			one-to-one relation to ReceivableInvoiceBatch
			Field Mapping uses symbolic key
				related.Company					 = LReleaseSetCompany
				related.ReceivableInvoiceBatch	 = LReleaseSetBatchNbr



		AppliedInvoiceDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses symbolic key
				related.Company														 = Company
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = AlternateReceivableInvoiceType
				and	related.ReceivableInvoiceDetail.Invoice							 = ReceivableInvoice
				and	related.Status.FullyAppliedTransaction)

		HistoricalDetailRecordsRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
			Instance Selection
				where (related.Status												 = 9
				and	related.Customer												 = Customer)

		MixedReceivableInvoiceCreditDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = "M"
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = "C")

		MixedReceivableInvoiceDebitDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = "M"
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = "D"
				or	 related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = "I")

		NonHistoricalDetailRecordsRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
			Instance Selection
				where (related.Status												 != 9
				and	related.Customer												 = Customer)

		OpenReceivableDetailRecordsRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3
				related.Company														 = Company
				related.Customer													 = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = AlternateReceivableInvoiceType
				and	related.ReceivableInvoiceDetail.Invoice							 = ReceivableInvoice
				and	related.IsSelectableForAPInterface)

		OpenReceivableInvoiceCreditDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
			Instance Selection
				where (related.Status.OpenTransaction
				and	related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		 = "C")

		OpenReceivableInvoiceDetailNoDisputeRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
			Instance Selection
				where (related.Status.OpenTransaction
				and	!related.IsUnresolvedDispute)

		OpenReceivableInvoiceDetailNoPendingRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
			Instance Selection
				where (related.IsSelectableForAPInterface = true)

		OpenReceivableInvoiceDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
			Instance Selection
				where (related.Status.OpenTransaction)

		OpenReceivableInvoiceTypeDetailRel							
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType		 						 = ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
				related.ReceivableInvoiceDetail.PaymentSeq							 = blank
			Instance Selection
				where (related.Status.OpenTransaction)
		PortalPartialOpenReceivableInvoiceDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
			Instance Selection
				where (related.Status.OpenTransaction
				and	   related.ApplicationAmount.CurrencyAmount entered
				and	   related.OpenAmount entered)

		PortalSelectedReceivableInvoiceDetailRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
			Instance Selection
				where (!related.PortalPaymentSelected)

		ReceivableInvoiceCrossReferenceWithDueDateRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = ReceivableCrossReference.Company
				related.AlternateReceivableInvoiceType								 = ReceivableCrossReference.ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableCrossReference.ReceivableInvoice
			Instance Selection
				where (related.DueDate												 = ReceivableCrossReference.InvoiceDueDate)

		ReceivableInvoiceDetailObligationRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
			Instance Selection
				where (related.Origin.Obligation)

		ReceivableInvoiceDetailRel
			classic name is AROITEMS
			one-to-many relation to ReceivableInvoiceDetail
			delete cascades
			Field Mapping uses Set8
				related.Company														 = Company
				related.AlternateReceivableInvoiceType								 = ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice

		ReceivableInvoiceDetailSet3Rel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3
				related.Company														 = Company
				related.Customer													 = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = AlternateReceivableInvoiceType
				and	related.ReceivableInvoiceDetail.Invoice							 = ReceivableInvoice)

		UnpaidReceivableInvoiceDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set5
				related.Company														 = Company
				related.Customer													 = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoice
				and	 not related.IsPaid)



		OldReceivableInvoiceDisputeRel
			one-to-many relation to ReceivableInvoiceDispute
			Field Mapping uses symbolic key
				related.Company														 = Company
				related.Customer													 = OldCustomer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = AlternateReceivableInvoiceType
				and   related.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoice)

		OpenReceivableInvoiceDetailWithProjectRel  
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3
				related.Company														 = Company
				related.Customer													 = Customer
			Instance Selection
				where (related.AlternateReceivableInvoiceType						 = ReceivableInvoiceType
				and	related.ReceivableInvoiceDetail.Invoice							 = ReceivableInvoice
				and related.Project entered)


		OpenReceivableInvoiceDisputeRel
			one-to-many relation to ReceivableInvoiceDispute
			Field Mapping uses symbolic key
				related.Company														 = Company
				related.Customer													 = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = AlternateReceivableInvoiceType
				and   related.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoice
				and   related.ResolveDate											 = blank)

		ReceivableInvoiceDisputeRel
			one-to-many relation to ReceivableInvoiceDispute
			Field Mapping uses symbolic key
				related.Company														 = Company
				related.Customer													 = Customer
			Instance Selection
				where (related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	 = AlternateReceivableInvoiceType
				and   related.ReceivableInvoiceDetail.Invoice						 = ReceivableInvoice)



		ReceivableInvoiceImportRel
			one-to-one relation to ReceivableInvoiceImport
			Field Mapping uses ByInvoice
				related.Company			 = Company
				related.Invoice			 = ReceivableInvoice
				related.InvoiceType		 = ReceivableInvoiceType
				related.PaymentSeq		 = blank



		LocalLineItemProjectRel
			one-to-many relation to ReceivableInvoiceLineItem
			Field Mapping uses ByReceivableInvoiceLineItemProject
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoice
			Instance Selection
				where (related.Project			 = LocalProject)

		ThisReceivableInvoiceLineItemRel	
			one-to-one relation to ReceivableInvoiceLineItem
			Field Mapping uses symbolic key
				related.Company					 	= Company
				related.ReceivableInvoiceType	 	= ReceivableInvoiceType
				related.ReceivableInvoice		 	= ReceivableInvoice
				related.ReceivableInvoiceLineItem	= LocalThisReceivableInvoiceLineItem

		ReceivableInvoiceLineItemProjectRel
			one-to-many relation to ReceivableInvoiceLineItem
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoice
			Instance Selection
				where (related.Project entered)

		ReceivableInvoiceLineItemRel
			one-to-many relation to ReceivableInvoiceLineItem
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoice


		PositiveReceivableInvoiceLineItemRel
			one-to-many relation to ReceivableInvoiceLineItem
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoice
			Instance Selection
				where (related.TransactionAmount > 0)

		NegativeReceivableInvoiceLineItemRel
			one-to-many relation to ReceivableInvoiceLineItem
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoice
			Instance Selection
				where (related.TransactionAmount < 0)


		HeaderAddOnChargesRel
			one-to-many relation to ReceivableInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoice
				related.ReceivableInvoiceLine	 = blank

		LocalReceivableInvoiceAddOnChargeRel
			one-to-many relation to ReceivableInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoice
			Instance Selection
				where (related.UniqueID			 = LocalReceivableInvoiceAddOnChargeUniqueID)

		ReceivableInvoiceLineRel
			one-to-many relation to ReceivableInvoiceLine
			delete cascades
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoice

		LocalReceivableInvoiceLineRel
			one-to-one relation to ReceivableInvoiceLine
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoice
				related.ReceivableInvoiceLine	 = LocalReceivableInvoiceLine


		ReceivableInvoiceObligationRel
			one-to-many relation to ReceivableInvoiceObligation
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableInvoiceType	 = ReceivableInvoiceType
				related.ReceivableInvoice		 = ReceivableInvoice



		ReceivableInvoiceUserSortRel
			classic name is ARUSERSORT
			one-to-one relation to ReceivableInvoiceUserSort
			Field Mapping uses symbolic key
				related.Company = Company
				related.ReceivableInvoiceUserSort.TransType		 = ReceivableInvoiceType
				related.ReceivableInvoiceUserSort.Invoice		 = ReceivableInvoice
				related.ReceivableInvoiceUserSort.PaymentSeq	 = blank



		ReceivablePaymentRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					 = LocalCompany
				related.ReceivablePaymentHeader	 = LocalPaymentHeader
				related.ReceivablePayment		 = LocalPayment



		ReceivablePaymentHeaderRel
			one-to-many relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company					 = LocalCompany
				related.ReceivablePaymentHeader	 = LocalPaymentHeader



		UnappliedReceivablePaymentRemittanceRel	
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses Set4	
				related.Company					= Company
				related.ReceivableInvoiceType	= ReceivableInvoiceType
				related.ReceivableInvoice		= ReceivableInvoice

		PortalUnappliedReceivablePaymentRemittanceRel	
			one-to-many relation to ReceivablePaymentRemittance
			Field Mapping uses Set4	
				related.Company					= actor.agent(CustomerRepresentativeContact).CustomerGroup.DerivedThirdPartyPaymentProcessingCompany
				related.ReceivableInvoiceType	= ReceivableInvoiceType
				related.ReceivableInvoice		= ReceivableInvoice
			Instance Selection
				where (related.ReceivablePayment.Customer = Customer)


		ReceivableProcessLevelRel
			classic name is ARPROCLEVL
			one-to-one relation to ReceivableProcessLevel
			required
			Field Mapping uses symbolic key
				related.Company					 = Company
				related.ReceivableProcessLevel	 = ReceivableProcessLevel



		ReceivableTransactionSummaryRel
			one-to-one relation to ReceivableTransactionSummary
			Field Mapping uses symbolic key
				related.Company							 = Company
				related.ReceivableProcessLevel			 = ReceivableProcessLevel
				related.ReceivableTransactionSummary	 = LocalReceivableTransactionSummary



		ReceivableSalesRepresentativeRel
			one-to-many relation to SalesRepresentative
			Field Mapping uses symbolic key
				related.Company				 = Company
				related.SalesRepresentative	 = LocalSalesRepresentative


		SalesRepresentativeRel
			classic name is SALESREP
			one-to-one relation to SalesRepresentative
			required
			Field Mapping uses symbolic key
				related.Company				 = Company
				related.SalesRepresentative	 = SalesRepresentative


		SubleaseBillingInvoiceRel	
			one-to-many relation to SubleaseBillingInvoice
			valid when (Origin.Sublease)
			Field Mapping uses symbolic key
				related.Company						 = Company
			Instance Selection
				where (related.Customer				 = Customer
				and related.ReceivableInvoiceType	 = ReceivableInvoiceType
				and related.InvoiceNumber			 = ReceivableInvoice)



		TaxEntityRel
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxEntity				 = GeneralLedgerCompanyRel.AccountingEntity

		EntityTaxCodeRel
			one-to-one relation to EntityTaxCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= TaxEntityRel.FinanceEnterpriseGroup
				related.TaxEntity 						= TaxEntityRel.TaxEntity
				related.TaxCode							= LocalTaxCode

		TaxLineItemsRel
			one-to-many relation to TaxLineItem
			valid when (!action type.Create)
			Field Mapping uses ByUniqueIdOfRelatedObject
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.TaxLineItem.UniqueIdOfRelatedObject	= UniqueID

		JurisdictionResultsForInvoiceRel
			one-to-many relation to JurisdictionResults
			delete cascades
			Field Mapping uses ByCallingModuleKey
				related.VertexConfig						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.CallingModuleKey 			= reference to this instance)		

		TaxConfigurationRel
			one-to-one relation to TaxConfiguration
			Field Mapping uses symbolic key
				related.TaxConfiguration			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup


		FSMBODConfigurationParameterRel
			one-to-one relation to FSMBODConfigurationParameter
			Field Mapping uses symbolic key
				related.FSMBODConfigurationParameter	= LocalConfigurationParameter

		FSMBODConfigurationRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb 		= 1
				related.FSMBODConfiguration.Noun 		= "Invoice"
				related.FSMBODConfiguration.Direction 	= 1

		FSMBODGLCCrossReferenceDetailRel
			one-to-many relation to FSMBODCrossReferenceDetail
			Field Mapping uses symbolic key
				related.FSMBODCrossReference.SourceField 		= "CSFGLC"
				related.FSMBODCrossReference.DestinationField 	= "DESTAE"
			Instance Selection
				where (related.SourceValue	= DerivedCrossGLC )

		BillingCompanyRel
			one-to-one relation to BillingCompany
			Field Mapping uses symbolic key
				related.Company					= Company

		BillingGlobalInvoiceNumberRel
			one-to-many relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company								= Company
			Instance Selection
				where (related.GlobalInvoiceNumber			= ReceivableInvoice)

		BillingInvoiceRel
			one-to-many relation to BillingInvoice
			Field Mapping uses symbolic key
				related.Company								= Company
				related.BillingInvoice.InvoicePrefix		= DerivedBillingInvoicePrefix
				related.BillingInvoice.InvoiceNumber		= DerivedBillingInvoiceNumber

		BillingInvoiceLineRel
			one-to-many relation to BillingInvoiceLine
			Field Mapping uses symbolic key
				related.Company								= Company
				related.BillingInvoice.InvoicePrefix		= DerivedBillingInvoicePrefix
				related.BillingInvoice.InvoiceNumber		= DerivedBillingInvoiceNumber

		BillingGLDistributionHeaderRel
			one-to-many relation to BillingGLDistribution
			Field Mapping uses symbolic key
				related.Company									= Company
				related.BillingInvoice.InvoicePrefix			= DerivedBillingInvoicePrefix
				related.BillingInvoice.InvoiceNumber			= DerivedBillingInvoiceNumber
				related.BillingInvoiceLine						= blank

		BillingInvoiceAddOnChargesRel
			one-to-one relation to BillingInvoiceAddOnCharge
			Field Mapping uses symbolic key
				related.Company 							= Company
				related.BillingInvoice.InvoicePrefix		= DerivedBillingInvoicePrefix
				related.BillingInvoice.InvoiceNumber		= DerivedBillingInvoiceNumber
				related.BillingInvoiceLine					= blank
				related.BillingInvoiceAddOnCharge			= LocalAOCCount

		ReceivableGLDistributionNativeRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (	related.ReceivableCompanyDataGroup.TransactionCompany	= Company
				and 	related.BatchNumber										= BatchNumber
				and 	related.TransType										= ReceivableInvoiceType
				and 	related.Invoice											= ReceivableInvoice
				and 	related.ReceivableCompanyDataGroup.Customer				= Customer)

		FSMInboundBODTrackerRel
			one-to-one relation to FSMInboundBODTracker
			Field Mapping uses symbolic key
				related.FSMInboundBODTracker				= LocalFSMInboundBODTracker


		FSMBODConfigurationRTRel
			one-to-one relation to FSMBODConfiguration
			Field Mapping uses symbolic key
				related.FSMBODConfiguration.Verb		= 1
				related.FSMBODConfiguration.Noun		= "ReceivableTransaction"
				related.FSMBODConfiguration.Direction	= 1

		NativeReceivableInvoiceDetailRel
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set8
				related.Company								= Company
				related.AlternateReceivableInvoiceType		= ReceivableInvoiceType
				related.ReceivableInvoiceDetail.Invoice		= ReceivableInvoice
				related.ReceivableInvoiceDetail.PaymentSeq	= LocalPaymentSeq

		NativeReceivableGLDistributionWithTaxAmountRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
			Instance Selection
				where (related.TaxCode entered)



		ReceivableInvoiceAttachmentsRel is a ReceivableInvoiceAttachment set
			Instance Selection
				where	(related.SendToCustomer
				and		 related.Attachment entered)

		IDMJobRel
			one-to-one relation to IDMJob
			Field Mapping uses symbolic key
				related.IDMJob = IDMJob

		IDMAdditionalAttributesLinesRel
			one-to-many relation to IDMAdditionalAttributesLines
			Field Mapping uses symbolic key
				related.IDMAdditionalAttributesHeader = "FSM_ReceivableInvoice"
			Instance Selection
				where(related.IDMAdditionalAttributesHeader.ActivateAdditionalAttributes
				and	  related.ActivateAdditionalAttributes.Active)

		NationalAccountTransactionRel
			one-to-one relation to NationalAccountTransaction
			Field Mapping uses ByNationalAccountTransaction
				related.NationalAccount.Company									= DerivedNationalCompany
				related.NationalAccount.Customer								= DerivedNationalCustomer
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		= LocalReceivableInvoiceDetailType
				related.ReceivableInvoiceDetail.Invoice							= LocalReceivableInvoice
				related.ReceivableInvoiceDetail.PaymentSeq						= LocalReceivableInvoiceDetailPaymentSequence
				related.Company													= Company
				related.Customer												= OldCustomer

		OldCompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		 = Company
				related.Customer	 = OldCustomer

		DeleteNationalAccountTransactionRel
			one-to-one relation to NationalAccountTransaction
			Field Mapping uses ByNationalAccountTransaction
				related.NationalAccount.Company									= DerivedNationalCompany
				related.NationalAccount.Customer								= LocalTransferCustomer
				related.ReceivableInvoiceDetail.ReceivableInvoiceDetailType		= LocalReceivableInvoiceDetailType
				related.ReceivableInvoiceDetail.Invoice							= LocalReceivableInvoice
				related.ReceivableInvoiceDetail.PaymentSeq						= LocalReceivableInvoiceDetailPaymentSequence
				related.Company													= Company
				related.Customer												= OldCustomer

		GainLossReceivableReasonRel
			classic name is ARREASONS
			one-to-many relation to ReceivableReason
			Field Mapping uses symbolic key
				related.Company					 =	Company
				related.ReceivableReasonType	 =	"AD"
				related.ReceivableReason		 =	"CURR"
			Instance Selection
				where (related.ReceivableAdjustmentReasonType	 =	"OS")

		FrontEndSplitReceivableGLDistributionRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 =	Company
				related.BatchNumber										 =	BatchNumber
				related.TransType										 =	ReceivableInvoiceType
				related.Invoice											 =	ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 =  Customer
			Instance Selection
				where (related.CreatedByFES)


		ReceivableGLDistributionLineTypeRel
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses Set2
				related.ReceivableCompanyDataGroup.TransactionCompany	 = Company
				related.BatchNumber										 = BatchNumber
				related.TransType										 = ReceivableInvoiceType
				related.Invoice											 = ReceivableInvoice
				related.ReceivableCompanyDataGroup.Customer				 = Customer
			Instance Selection
				where (related.TaxCode not entered
				and related.IsInvoiceBased
				and related.LineType.Goods)

		ReceivableGLDistributionForInvoiceAllRel 
			one-to-many relation to ReceivableGLDistribution
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
			Instance Selection
				where (related.ReceivableCompanyDataGroup.TransactionCompany	= Company
				and	   related.TransType										= ReceivableInvoiceType
				and	   related.Invoice											= ReceivableInvoice)

		ReceivableGLIntrastatDetailRel
			one-to-many relation using ReceivableGLDistributionLineTypeRel
			Instance Selection
				where (related.IsIntrastatDetailEntered)

		ReceivableGLIntrastatDetailExistsRel
			one-to-many relation using ReceivableGLDistributionLineTypeRel
			Instance Selection
				where (related.IsIntrastatDetailExist)

		EFTCustomerGroupsRel
			one-to-many relation to ElectronicFundsTransferCustomerGroup
			Field Mapping uses symbolic key
				related.CustomerGroup									= Customer.CustomerGroup
			Instance Selection
				where (related.ElectronicFundsTransferCustomerGroup.Customer = Customer)

	Sets

		Set2
			indexed
			Sort Order
				CustomerPurchaseOrder
				Company
				Customer
				ReceivableInvoiceType
				ReceivableInvoice

		Set3
			indexed
			Sort Order
				Company
				BatchNumber
				Customer
				ReceivableInvoiceType
				ReceivableInvoice

		Set4
			indexed
			Sort Order
				Company
				Customer
				ReceivableInvoiceType
				ReceivableInvoice

		Set5
			indexed
			Sort Order
				AlternateReceivableInvoiceType
				ReceivableInvoice
				Company

		Set6
			indexed
			Sort Order
				Company
				AlternateReceivableInvoiceType
				ReceivableInvoice

		Set7
			indexed
			Instance Selection
				where (IsNotPrintedChargeback)
			Sort Order
				Company
				Customer
				ReceivableInvoiceType
				ReceivableInvoice

		ByCrossReference
			indexed
			Sort Order
				Company
				ReceivableInvoiceType
				Customer
				ReceivableCrossReference.ReceivableInvoiceType
				ReceivableCrossReference.ReceivableInvoice
				ReceivableInvoice

		ByProjectContractInvoice
			duplicates
			Sort Order
				ProjectContract
				FinanceDimension2
				ProjectContractInvoice
				Company
				ReceivableInvoice
			Instance Selection
				where (ProjectContractInvoiceEntered)

		ByTransactionDate
			duplicates
			Sort Order
				ProjectContract
				FinanceDimension2
				TransactionDate
				Company
				ReceivableInvoice



		ByCurrencyCompanyCustomer
			duplicates
			Sort Order
				OriginalCurrency
				Company
				Customer
				ReceivableProcessLevel









		ByGeneralLedgerDate
			duplicates
			Sort Order
				Company
				GeneralLedgerDate
				TransactionDate

	Create Rules











		if (ReceivableInvoiceType.MixedSignLines)
			constraint (AlternateReceivableInvoiceType entered)
				"TransactionTypeOfMixedSignLinesRequiresAlternateTypeToBeEntered"

		if (ReceivableInvoiceType.CreditMemo)
			AlternateReceivableInvoiceType = "C"
		if (ReceivableInvoiceType.DebitMemo)
			AlternateReceivableInvoiceType = "D"
		if (ReceivableInvoiceType.Invoice)
			AlternateReceivableInvoiceType = "I"

		if  (FromInterface)
			NextSentence		= true
		else
			if (ReceivableInvoiceBatchRel exists
			and Origin not entered
			and !FromReceivablePayment)
				if (ReceivableInvoiceType.Invoice
				or	AlternateReceivableInvoiceType.Invoice)
					Origin = "B"
				if (ReceivableInvoiceType.CreditMemo
				or	AlternateReceivableInvoiceType.CreditMemo)
					Origin = "M"
				if (ReceivableInvoiceType.DebitMemo
				or	AlternateReceivableInvoiceType.DebitMemo)
					Origin = "M"

		if (IsManualEntry
		and ReceivableInvoiceBatchRel exists)
			InvoiceEntryTemplate = Company.InvoiceEntryTemplate
			if (ReceivableInvoice not entered
			and Company.AutomaticManualInvoiceNumbering)
				if (AlternateReceivableInvoiceType = "I"
				and Company.ManualInvoicePrefix entered)
					increment Company.ManualInvoiceNumber
					ReceivableInvoice = Company.ManualInvoicePrefix + Company.ManualInvoiceNumber
					LocalBypassManualInvoicePrefixValidation = true

				if ((AlternateReceivableInvoiceType = "C"
				or   AlternateReceivableInvoiceType = "D")
				and  Company.ManualMemoPrefix entered)
					increment Company.ManualMemoNumber
					ReceivableInvoice = Company.ManualMemoPrefix + Company.ManualMemoNumber
					LocalBypassManualInvoicePrefixValidation = true

		if (BillingCompanyRel.ManualInvoiceNumbering
		and IsManualEntry)
			constraint (BillingGlobalInvoiceNumberRel not exists)
				"TransactionAlreadyExistsInBilling"

		constraint (CompanyCustomerRel exists)
			"CompanyCustomerDoesNotExist"

		constraint (ReceivableInvoice entered)
			"InvoiceNumberRequired"

		if (ReceivableApplicationRel exists)
			constraint (first ReceivableApplicationRel.ReceivableApplication.BatchNumber != BatchNumber)
				"ApplicationExistsForBatch/transactionNbr"				 

		if (InvoiceTypeCode not entered)
			if (CompanyCustomerInvoiceTypeCodesRel exists)
				InvoiceTypeCode	= first CustomerInvoiceTypeCodesRel.InvoiceTypeCode
				
			if (TermsCode not entered)
				TermsCode = first CustomerInvoiceTypeCodesRel.TermsCode

		if (InvoiceTypeCode entered)
			if (CompanyCustomerInvoiceTypeCodesRel exists)
				constraint (AnyCustomerInvoiceTypeCodeRel exists)
					"InvoiceTypeCodeNotFoundInCustomer'sInvoiceTypeCodes"

		if (ReceivableInvoiceShipToGroup.CustomerShipTo not entered)
			ReceivableInvoiceShipToGroup.CustomerShipTo = CompanyCustomerRel.OrderEntryCustomerRel.DefaultCustomerShipTo

		if  (FromInterface)
			NextSentence		= true
		else
			if (TermsCode not entered)
				TermsCode = CustomerInvoiceTypeCode.TermsCode

				if (TermsCode not entered)
					TermsCode = InvoiceTypeCode.TermsCode

				if  (TermsCode not entered
				and (ReceivableInvoiceType.DebitMemo
				or  ReceivableInvoiceType.CreditMemo))
					TermsCode = CompanyCustomerRel.DebitCreditMemoTermsCode

				if  (TermsCode not entered
				and  ReceivableInvoiceType.Invoice)
					TermsCode = CompanyCustomerRel.TermsCode

				if  (TermsCode not entered
				and  ReceivableInvoiceType.MixedSignLines)
					if (AlternateReceivableInvoiceType.DebitMemo
					or  AlternateReceivableInvoiceType.CreditMemo)
						TermsCode = CompanyCustomerRel.DebitCreditMemoTermsCode
					if (AlternateReceivableInvoiceType.Invoice)
						TermsCode = CompanyCustomerRel.TermsCode

		if (TaxExempt not entered)
			TaxExempt = CompanyCustomerRel.TaxExempt

		if (ParentContext = "ReceivableInvoice"
		or ParentContext not entered)
			initialize ValidateReceivablePrefix

			ValidateReceivablePrefix.EditReceivableCompany					= Company
			ValidateReceivablePrefix.EditReceivableInvoice					= ReceivableInvoice
			ValidateReceivablePrefix.EditReceivableInvoiceType				= ReceivableInvoiceType
			ValidateReceivablePrefix.EditAltReceivableInvoiceType			= AlternateReceivableInvoiceType
			ValidateReceivablePrefix.BypassManualInvoicePrefixValidation 	= LocalBypassManualInvoicePrefixValidation


			constraint (ValidateReceivablePrefix.ErrorNumber not entered)
				"<ValidateReceivablePrefix.ErrorMessage>"

		if (RevalueCurrencyTransactions not entered) 
			RevalueCurrencyTransactions	= CompanyCustomerRel.RevalueCurrencyTransactions


	StateCycles
		ReceivableInvoiceLifeCycle is a StateCycle
			state field is Status
			Unreleased is a State

				CreateLineItems is an Instance Action  //"L"

					valid when (IsCanCreateLineItem)
					completion message is "CreationOfLineItemsComplete"
					Local Fields
						LocalItemReference					is Numeric size 6
						LocalReceivableGLDistribution		is a ReceivableGLDistribution
					Action Rules




						LocalReceivableGLDistributionProjectAmount		= blank
						LastProject									= blank

						FirstRecord = true
						for each ReceivableGLDistributionProjectRel
							LocalReceivableGLDistribution = each.ReceivableGLDistribution
							if (!FirstRecord)
								if (each.ReceivableGLDistribution.GeneralLedgerAccount.Project != LastProject)

									invoke Create ReceivableInvoiceLineItem
										invoked.Company											= Company
										invoked.ReceivableInvoiceType							= ReceivableInvoiceType
										invoked.ReceivableInvoice								= ReceivableInvoice
										invoked.ItemReference									= LocalItemReference + 1




										invoked.TransactionAmount								= LocalReceivableGLDistributionProjectAmount

										invoked.Project											= LastProject
									LocalReceivableGLDistributionProjectAmount				  = 0
									LocalItemReference											= LocalItemReference + 1
							LastProject = each.ReceivableGLDistribution.GeneralLedgerAccount.Project
							LocalReceivableGLDistributionProjectAmount	+= each.DistributionAmount.CurrencyAmount
							FirstRecord = false

						if (!FirstRecord)
							invoke Create ReceivableInvoiceLineItem
								invoked.Company											= Company
								invoked.ReceivableInvoiceType							= ReceivableInvoiceType
								invoked.ReceivableInvoice								= ReceivableInvoice
								invoked.ItemReference									= LocalItemReference + 1




								if  (UnreleasedInterfaceCompleteOrFromICB
								and !FromReceivablePayment)
									invoked.TransactionAmount							= LocalReceivableGLDistributionProjectAmount * -1
								else
									invoked.TransactionAmount							= LocalReceivableGLDistributionProjectAmount

								invoked.Project											= LastProject



				DeriveTransactionAmount is an Instance Action
					default label is "DeriveInvoiceAmount"
					valid when (AllowDeriveTransactionAmount)
					Action Rules
						constraint (!Origin.IntercompanyBilling)
							"CannotDeriveTransactionAmount;InvoiceIsFrom_\I\C\B"













						if (InvoiceEntryTemplate.Expanded)
							invoke Update
								invoked.TransientSignedTransactionAmount = ForceRefreshDerivedExpandedInvoiceEntryTemplateTotalAmount
						else
							invoke Update
								invoked.TransientSignedTransactionAmount = sum ReceivableGLDistributionProjectRel.DistributionAmount.CurrencyAmount

							constraint (InvoiceAmount.CurrencyAmount > 0)
								"SummedDistributionsAmountsAreNegative/Zero;CannotDeriveTransactionAmount"















































				InterfaceRelease is an Instance Action
					default label is "Release"
					valid when (UnreleasedInterfaceComplete)
					Parameters
					Action Rules
						if  (!ReceivableInvoiceImportRel exists
						or   ReceivableInvoiceImportRel.Status.Open)
							invoke Release
						else


							if  (ReleasedDistributionsRel exists)

								if (AlternateReceivableInvoiceType.CreditMemo)
									constraint (NegativeDerivedReceivableGLDistributionAmount = InvoiceAmount.CurrencyAmount)
										"SumOfDistributionAmounts<DerivedReceivableGLDistributionAmount>DoesNotEqualTransactionAmount<InvoiceAmount.CurrencyAmount>ForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"

								if (AlternateReceivableInvoiceType.DebitMemo
								or  AlternateReceivableInvoiceType.Invoice)
									constraint (NegativeDerivedReceivableGLDistributionAmount = InvoiceAmount.CurrencyAmount)
										"SumOfDistributionAmounts<DerivedReceivableGLDistributionAmount>DoesNotEqualTransactionAmount<InvoiceAmount.CurrencyAmount>ForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"

							if  (ZeroAmountInvoice
							and  !Origin.Projects)
								constraint (!HasLineItems)
									"ZeroAmountInvoiceCannotContainLineItems"
							else
								if  (ReceivableInvoiceType.MixedSignLines)
									constraint (HasCreditsAndDebits)
										"CreditsAndDebitsRequiredForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"
									constraint (InvoiceAmount.CurrencyAmount = DerivedMixedReceivableInvoiceDetailAmount)
										"SumOfDetailsNot=InvoiceAmount<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"



								if (ParentContext != "ReceivableInvoiceImport")  
									if (AlternateReceivableInvoiceType.Invoice)
										LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.Invoiced
										if (!ReceivableTransactionSummaryRel exists)
											invoke Create ReceivableTransactionSummaryRel
										invoke AddAmount ReceivableTransactionSummaryRel
											invoked.Amount				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
									else
										LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.DebitsCredits
										if (!ReceivableTransactionSummaryRel exists)
											invoke Create ReceivableTransactionSummaryRel
										invoke AddAmount ReceivableTransactionSummaryRel
											if (AlternateReceivableInvoiceType.DebitMemo)
												invoked.Amount				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
											else
												invoked.Amount				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1

								if  (ReleasedDistributionsRel exists)
									if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting
									and (ReceivableInvoice.Origin.ManualInvoice
									or   ReceivableInvoice.Origin.ManualMemo
									or   ReceivableInvoice.Origin.Projects
									or   ReceivableInvoice.Origin.IntercompanyBilling  
									or   ReceivableInvoice.Origin.Sublease)) 
										for each ReleasedDistributionsRel 
											initialize LocalCalculateReceivableFinanceStructure
											LocalCalculateReceivableFinanceStructure.InputReceivableCompany			= Company
											LocalCalculateReceivableFinanceStructure.InputReceivableInvoiceType		= ReceivableInvoiceType
											LocalCalculateReceivableFinanceStructure.InputReceivableInvoice			= ReceivableInvoice
											LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution	= each.ReceivableGLDistribution
											LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock			= ReceivableGeneralLedgerCodeRel.DistributionAccount
											LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType = "R"
											LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

											invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution  
												invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
												invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
												invoked.ReceivableGLDistribution.ProgramSequence		= 1
												invoked.ReceivableCompanyGroup.GlCompany				= ReceivableInvoice.Company
												invoked.GeneralLedgerDate								= GeneralLedgerDate
												invoked.ReceivableGLDistribution.GeneralLedgerAccount	= LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
												if (IsInvoiceIdentity)
													invoked.Origin										= "RI"
												else
													invoked.Origin										= "RM"

												if (IsDebitIdentity)
													invoked.DistributionAmount.CurrencyAmount			= each.DistributionAmount.CurrencyAmount
												else
													invoked.DistributionAmount.CurrencyAmount			= each.DistributionAmount.CurrencyAmount * -1

												invoked.Description										= "Batch " + BatchNumber + ", " + ReceivableInvoiceType + " " + ReceivableInvoice
												invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel							= ReceivableProcessLevel
												invoked.ReceivableGLDistribution.GeneralLedgerDate		= GeneralLedgerDate
												invoked.TransactionDate									= TransactionDate
												invoked.BatchNumber										= BatchNumber
												invoked.ReceivableCompanyDataGroup.Customer				= Customer
												invoked.Invoice											= ReceivableInvoice
												invoked.TransType										= ReceivableInvoiceType
												invoked.OriginalCurrency								= OriginalCurrency
												invoked.AccumulationType 								= "S"
									else
									if (Company.DetailedInvoiceAccrualDistributions
									and FromInterface
									and !ZeroAmountInvoice
									and ReceivableInvoiceDetailRel exists
									and UnpostedDistributionsRel exists)
										initialize LocalSumLineItemAmounts
										LocalLastLineItem = last ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq
										for each ReceivableInvoiceDetailRel
											initialize LocalNewReceivableGLDistribution
											invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
												assign result to LocalNewReceivableGLDistribution
												invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
												invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
												invoked.ReceivableCompanyGroup.GlCompany				= Company
												invoked.GeneralLedgerDate								= GeneralLedgerDate
												if (each.InvoiceFinanceCodeBlock entered)
													invoked.GeneralLedgerAccount						= each.InvoiceFinanceCodeBlock
												else
													invoked.GeneralLedgerAccount						= ReceivableGeneralLedgerCodeRel.DistributionAccount
												if (IsInvoiceIdentity)
													invoked.Origin										= "RI"
												else
													invoked.Origin										= "RM"
												invoked.DistributionAmount.CurrencyAmount			    = each.SignedTransactionAmount							
												invoked.Description										= "Batch " + BatchNumber + ", " + ReceivableInvoiceType + " " + ReceivableInvoice
												invoked.BypassStructureRelationEdit						= true
												invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableProcessLevel
												invoked.GeneralLedgerDate		                        = GeneralLedgerDate
												invoked.TransactionDate									= TransactionDate
												invoked.BatchNumber										= BatchNumber
												invoked.ReceivableCompanyDataGroup.Customer				= Customer
												invoked.Invoice											= ReceivableInvoice
												invoked.TransType										= ReceivableInvoiceType	
												invoked.OriginalCurrency								= OriginalCurrency	
												invoked.AccumulationType								= "S"
												invoked.BypassStatusEdit								= true
											
											LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
											LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
											LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
											LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
											LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
											LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
											LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
											LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
											LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

											if (each.ReceivableInvoiceDetail.PaymentSeq = LocalLastLineItem)
												invoke RoundingUpdate LocalNewReceivableGLDistribution
													if (IsDebitIdentity)
														invoked.RoundAmount.FunctionalAmount	= ((InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.AlternateAmount		= ((InvoiceAmount.AlternateAmount.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.AlternateAmount2	= ((InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.AlternateAmount3	= ((InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.ReportAmount1		= ((InvoiceAmount.ReportAmount1.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.ReportAmount2		= ((InvoiceAmount.ReportAmount2.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.ReportAmount3		= ((InvoiceAmount.ReportAmount3.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.ReportAmount4		= ((InvoiceAmount.ReportAmount4.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.ReportAmount5		= ((InvoiceAmount.ReportAmount5.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount) * -1)
													else
														invoked.RoundAmount.FunctionalAmount	= (((InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.AlternateAmount		= (((InvoiceAmount.AlternateAmount.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.AlternateAmount2	= (((InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.AlternateAmount3	= (((InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.ReportAmount1		= (((InvoiceAmount.ReportAmount1.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.ReportAmount2		= (((InvoiceAmount.ReportAmount2.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.ReportAmount3		= (((InvoiceAmount.ReportAmount3.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.ReportAmount4		= (((InvoiceAmount.ReportAmount4.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount) * -1)
														invoked.RoundAmount.ReportAmount5		= (((InvoiceAmount.ReportAmount5.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount) * -1)
									else
										invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution  
											invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
											invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
											invoked.ReceivableGLDistribution.ProgramSequence		= 1
											invoked.ReceivableCompanyGroup.GlCompany				= ReceivableInvoice.Company
											invoked.GeneralLedgerDate								= GeneralLedgerDate
											invoked.ReceivableGLDistribution.GeneralLedgerAccount	= ReceivableGeneralLedgerCodeRel.DistributionAccount
											if (IsInvoiceIdentity)
												invoked.Origin										= "RI"
											else
												invoked.Origin										= "RM"

											if (IsDebitIdentity)

												invoked.DistributionAmount.CurrencyAmount			= InvoiceAmount.CurrencyAmount
											else

												invoked.DistributionAmount.CurrencyAmount			= InvoiceAmount.CurrencyAmount * -1

											invoked.Description										= "Batch " + BatchNumber + ", " + ReceivableInvoiceType + " " + ReceivableInvoice
											invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel		= ReceivableProcessLevel
											invoked.ReceivableGLDistribution.GeneralLedgerDate		= GeneralLedgerDate
											invoked.TransactionDate									= TransactionDate
											invoked.BatchNumber										= BatchNumber
											invoked.ReceivableCompanyDataGroup.Customer				= Customer
											invoked.Invoice											= ReceivableInvoice
											invoked.TransType										= ReceivableInvoiceType
											invoked.OriginalCurrency								= OriginalCurrency
											invoked.AccumulationType 								= "S"

							for each ReceivableGLDistributionDetailTypeRel
								invoke ReleaseGLTransactionDetailUpdate each

							make transition to Released

							invoke Delete ReceivableInvoiceImportRel

					Exit Rules
						if  (ZeroAmountInvoice
						and  !Origin.Projects)
							NextSentence = true
						else
						if  (ReceivableInvoiceType  = "M"
						and  CompanyCustomerRel.ApplyMixedSignedLineItemsAutomatically)
							for each MixedReceivableInvoiceCreditDetailRel
								invoke  ApplyMix each


				Release is an Instance Action 
					restricted
					refresh and lock this instance
					Parameters
						ProgramSequence
						PrmFromEFTPayment				is Boolean
					Local Fields

						LocalProjectCount				is Numeric size 6
						LocalNoProjectAccount			is Boolean
						ProjectAmountMismatch			is Boolean
						RecordCount						is Numeric size 3
						LocalDerivedDistributionAmount	is like InternationalAmount

					Entrance Rules

						if (InvoiceEntryTemplate.Expanded)
							include ExpandedInvoiceEntryTemplateReleaseEdits

						FromEFTPayment		= PrmFromEFTPayment
						if (HasLineItems)
							if (ReceivableInvoiceType.CreditMemo)	
								constraint (!HasPositiveAndNegativeLineItems)	
									"MustEnterAllLineItemsWithTheSameSignFor_Company<Company>And_Receivable_Invoice_Type<ReceivableInvoiceType>And_Receivable_Invoice<ReceivableInvoice>_Global_Ledger_Date<GeneralLedgerDate>."	

							if (ReceivableGLDistributionWithProjectRel exists
							and !Origin.Projects)
								initialize LocalProject
								for each distinct GeneralLedgerAccount.Project in ReceivableGLDistributionRel
									LocalProject = each.GeneralLedgerAccount.Project
									if (LocalLineItemProjectRel not exists)
										end for each
								if (LocalProject entered)
									constraint (LocalLineItemProjectRel exists)
										"LineItemsMissingFor_Project<LocalProject>For_Company<Company>And_Receivable_Invoice_Type<ReceivableInvoiceType>And_Receivable_Invoice<ReceivableInvoice>_Global_Ledger_Date<GeneralLedgerDate>."

						if (!HasLineItems
						and !FromInterface
						and !InvoiceEntryTemplate.Expanded)
							initialize LocalProjectCount
							initialize LocalNoProjectAccount

							for each distinct GeneralLedgerAccount.Project in ReceivableGLDistributionRel
								if (each.GeneralLedgerAccount.Project not entered)
									LocalNoProjectAccount = true
								LocalProjectCount = LocalProjectCount + 1
								if (LocalProjectCount > 1)
									end for each

							if (initiating action != "ReceivablePayment.PaymentIntoCreditOpen") 
								if (LocalProjectCount > 1)
									constraint (ReceivableInvoiceLineItemProjectRel exists)
										"MultipleProjectsExist.LineItemsMustBeEnteredFor_Company<Company>And_Receivable_Invoice_Type<ReceivableInvoiceType>And_Receivable_Invoice<ReceivableInvoice>."
							else 
								if (LocalProjectCount > 1) 
									constraint (ReceivableInvoiceLineItemProjectRel exists) 
										"Payment_Into_Credit_Action_requires_all_Distributions_to_have_same_project_value." 


							if (LocalProjectCount = 1
							and !LocalNoProjectAccount)
								invoke CreateLineItems

						if (!GainLossReceivableReasonRel exists
						and Company.HasAlternateOrReportCurrency )
							invoke CreateForReceivableReason GainLossReceivableReasonRel
								invoked.ReceivableAdjustmentReasonType  = "OS"
								invoked.Description						= "Currency Gain Loss"
								invoked.Active							= true

					Action Rules

						if (Origin.IntercompanyBilling 
						and invoking action = "ReceivableInvoiceBatch.ReleaseUnreleased" 
						and !AlternateReceivableInvoiceType.CreditMemo)
							LocalDerivedDistributionAmount  = -1 * DerivedReceivableGLDistributionAmount
						else
							LocalDerivedDistributionAmount  = DerivedReceivableGLDistributionAmount						

						if(IsDistributions)
							for each ReceivableGLDistributionInvoiceRel
								constraint (GeneralLedgerDate = each.GeneralLedgerDate)
									"Receivable_GL_Distribution's_Global_Ledger_Date<each.GeneralLedgerDate>IsNotTheSameAsOnInvoiceFor_Company<Company>And_Receivable_Invoice_Type<ReceivableInvoiceType>And_Receivable_Invoice<ReceivableInvoice>_Global_Ledger_Date<GeneralLedgerDate>."
								constraint (ReceivableProcessLevel = each.ReceivableCompanyDataGroup.ReceivableProcessLevel)
									"Receivable_GL_Distribution's_Receivable_Process_Level<each.ReceivableCompanyDataGroup.ReceivableProcessLevel>NotSameAsOnInvoiceFor_Company<Company>And_Receivable_Invoice_Type<ReceivableInvoiceType>And_Receivable_Invoice<ReceivableInvoice>Receivable_Process_Level<ReceivableProcessLevel>."
								constraint (OriginalCurrency = each.OriginalCurrency)
									"Receivable_GL_Distribution's_TransactionCurrency<each.OriginalCurrency>NotSameAsOnInvoiceFor_Company<Company>And_Receivable_Invoice_Type<ReceivableInvoiceType>And_Receivable_Invoice<ReceivableInvoice>_Transaction_Currency<OriginalCurrency>."
								constraint (TransactionDate = each.TransactionDate)
									"Receivable_GL_Distribution's_Transaction_Date<each.TransactionDate>IsNotTheSameAsOnInvoiceFor_Company<Company>And_Receivable_Invoice_Type<ReceivableInvoiceType>And_Receivable_Invoice<ReceivableInvoice>_Transaction_Date<TransactionDate>."
								constraint (TransactionDate = each.DistributionAmount.ExchangeDate)
									"Receivable_GL_Distribution's_Exchange_Date<each.DistributionAmount.ExchangeDate>IsNotTheSameAsOnInvoiceFor_Company<Company>And_Receivable_Invoice_Type<ReceivableInvoiceType>And_Receivable_Invoice<ReceivableInvoice>_Transaction_Date<TransactionDate>."

						if (ParentContext = "ReceivableInvoiceImport")
							BypassTotals			= true

						if (Company.ParallelReferenceFormat entered)
							constraint (IsValidParallelReference)
								"NewConfigurationExists,RunTheUpdateParallelReferenceActionForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"

						if (ReceivableInvoiceType.MixedSignLines)
							if (Company.FinanceEnterpriseGroup.FundAccounting 
							and Company.SelectFundDistributionSet)
								constraint (CompanyCustomerRel.ApplyMixedSignedLineItemsAutomatically)
									"Company<Company>_Customer<Customer>MustHave_Apply_Mixed_Signed_Line_Items_AutomaticallyCheckedToHaveInvoicesOfType_Mixed_Sign_Lines"

						if (CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange)
							constraint (GeneralLedgerDate within CompanySystemClosingControlRel.ValidEntryDate)
								"PostDate<GeneralLedgerDate>IsNotWithinValidEntryDatesForCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

						if (!Origin.Projects
						and (!Origin.External
						or   FromEFTPayment))
							constraint (HasReceivableGLDistributions)
								"DistributionsDoNotExistForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"

						if  (Origin.External
						and  !FromEFTPayment	
						and  !UnpostedDistributionsRel exists)
							NextSentence = true
						else
						if (HasReceivableGLDistributions
						and (!Origin.IntercompanyBilling 
						or (Origin.IntercompanyBilling 
						and invoking action = "ReceivableInvoiceBatch.ReleaseUnreleased"))
						and !Origin.Projects)
							if (AlternateReceivableInvoiceType.CreditMemo)
								constraint (DerivedReceivableGLDistributionAmount = InvoiceAmount.CurrencyAmount)
									"SumOfDistributionAmounts<DerivedReceivableGLDistributionAmount>DoesNotEqual_\Invoice_\Amount<InvoiceAmount.CurrencyAmount>ForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"

							if (AlternateReceivableInvoiceType.DebitMemo
							or  AlternateReceivableInvoiceType.Invoice)
								constraint (LocalDerivedDistributionAmount = InvoiceAmount.CurrencyAmount)
									"SumOfDistributionAmounts<LocalDerivedDistributionAmount>DoesNotEqual_\Invoice_\Amount<InvoiceAmount.CurrencyAmount>ForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"

						if  (ZeroAmountInvoice
						and  !Origin.Projects)
							constraint (!HasLineItems)
								"ZeroAmountInvoiceCannotContainLineItems"
						else
						if  (Origin.External
						and  !FromEFTPayment
						and  !UnpostedDistributionsRel exists)
							NextSentence = true
						else
						if  (FromInterface
						and  ReceivableInvoiceType.MixedSignLines)
							constraint (InvoiceAmount.CurrencyAmount = DerivedMixedReceivableInvoiceDetailAmount)
								"SumOfInvoiceDetails<DerivedMixedReceivableInvoiceDetailAmount>DoesNotEqual_\Invoice_\Amount<InvoiceAmount.CurrencyAmount>"
						else
						if  (FromInterface)
							constraint (InvoiceAmount.CurrencyAmount = DerivedReceivableInvoiceDetailAmount)
								"SumOfInvoiceDetails<DerivedReceivableInvoiceDetailAmount>DoesNotEqual_\Invoice_\Amount<InvoiceAmount.CurrencyAmount>"
						else
							if (HasReceivableGLDistributions
							and HasLineItems
							and (!Origin.IntercompanyBilling 
							or (Origin.IntercompanyBilling 
							and	invoking action = "ReceivableInvoiceBatch.ReleaseUnreleased"))
							and !Origin.Projects)
								if (AlternateReceivableInvoiceType.DebitMemo
								or  AlternateReceivableInvoiceType.Invoice
								or  AlternateReceivableInvoiceType.CreditMemo)
									constraint (DerivedReceivableInvoiceLineItemAmount = LocalDerivedDistributionAmount)
										"SumOf_\Distribution_\Amounts<LocalDerivedDistributionAmount>DoesNotEqualSumOf_\Line_\Item_\Amounts<DerivedReceivableInvoiceLineItemAmount>ForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"

							if  (!FromInterface
							and  ReceivableInvoiceType.MixedSignLines
							and  !InvoiceEntryTemplate.Expanded)
								constraint (ReceivableInvoiceLineItemRel exists)
									"LineDetailRequiredForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"
								constraint (IsSignedAndUnsignedLineItems)
									"SignedAndUnsignedLineItemsRequiredForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"
								if  (!Origin.IntercompanyBilling)  
									constraint (InvoiceAmount.CurrencyAmount = DerivedReceivableInvoiceLineItemAmount)
										"SumOfLineItems<DerivedReceivableInvoiceLineItemAmount>DoesNotEqual_\Invoice_\Amount<InvoiceAmount.CurrencyAmount>For<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"

						if (!Origin.Projects
						and (!Origin.External
						or   FromEFTPayment)
						and !InvoiceEntryTemplate.Expanded)
							for each ReceivableInvoiceLineItemProjectRel
								LocalProject = each.Project
								constraint (LocalProjectDistributionRel exists)
									"NoProjectDistributionsFoundForInvoiceLineItemWithProject<LocalProject>ForInvoice<ReceivableInvoice>"

							initialize LocalProject

							if  (ReceivableInvoiceLineItemProjectRel exists)
								for each distinct GeneralLedgerAccount.Project in ReceivableGLDistributionRel
									LocalProject = each.GeneralLedgerAccount.Project



									if (!Origin.IntercompanyBilling)
										if (sum LocalProjectDistributionRel.DistributionAmount.CurrencyAmount != sum LocalLineItemProjectRel.TransactionAmount)
											ProjectAmountMismatch = true
									end for each


								if (LocalProject not entered)
									constraint (!ProjectAmountMismatch)
										"NonProjectDistributionAmountDoesNotMatchNonProjectLineItemsAmountForInvoice<ReceivableInvoice>"
								else
									constraint (!ProjectAmountMismatch)
										"DistributionAmountDoesNotMatchProjectLineItemsAmountForProject<LocalProject>ForInvoice<ReceivableInvoice>"










						if (!BypassTotals
						and !ZeroAmountInvoice)

							if (BankTransactionCode.BankTransactionType.BillOfExchangePayment
							and  BankTransactionCode.TransactionOrigin.Receivable
							and  CompanyCustomerRel.BillOfExchangeProcessing.Individual
							and  !IsCreditMemoIdentity)
								LocalSkipUpdateCurrentBalance = true

							if (!LocalSkipUpdateCurrentBalance)
								invoke UpdateCurrentBalance CompanyCustomerRel 
									invoked.TransactionDate							= TransactionDate
									if (IsDebitIdentity or IsInvoiceIdentity)
										invoked.ChangeAmount						= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
									if (IsCreditMemoIdentity)
										invoked.ChangeAmount						= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
									if (IsLastInvoice)
										invoked.InvoiceLastInvoiceDate				= TransactionDate
										invoked.InvoiceLastInvoiceAmount			= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
									invoked.PrmBalanceType							= 1
									invoked.PrmReference							= Reference

							if (!AlternateReceivableInvoiceType.DebitMemo)
								invoke UpdatePeriodTotals CompanyCustomerRel
									if (AlternateReceivableInvoiceType.Invoice)
										invoked.Type								= "B"
									else
									if (AlternateReceivableInvoiceType.CreditMemo)
										if (Origin.PaymentCreatedCreditMemo)
											invoked.Type							= "C"
										else
											invoked.Type							= "M"

									invoked.Amount									= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
									invoked.EffectiveDate							= GeneralLedgerDate



						if  (ZeroAmountInvoice
						and  !Origin.Projects)
							NextSentence = true
						else
						if (!BypassTotals)
							if (AlternateReceivableInvoiceType.Invoice)
								LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.Invoiced
								if (!ReceivableTransactionSummaryRel exists)
									invoke Create ReceivableTransactionSummaryRel
								invoke AddAmount ReceivableTransactionSummaryRel
									invoked.Amount				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							else
								LocalReceivableTransactionSummary = LocalReceivableTransactionSummary.DebitsCredits
								if (!ReceivableTransactionSummaryRel exists)
									invoke Create ReceivableTransactionSummaryRel
								invoke AddAmount ReceivableTransactionSummaryRel
									if (AlternateReceivableInvoiceType.DebitMemo)
										invoked.Amount				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
									else
										invoked.Amount				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1



						if (!ZeroAmountInvoice)
							if (TaxEntityUsesVertex)
								if (CallVertexByTransaction)
									invoke VertexProcessTaxHistoryByTransaction
								else
									if (ReceivableGLDistributionWithTaxCodeRel exists)
										invoke UpdateTaxTransaction ReceivableGLDistributionWithTaxCodeRel
							else
							if (TaxEntityUsesOneSource)
								invoke OneSourceProcessTaxHistoryByTransaction
							else
								if (ReceivableGLDistributionWithTaxCodeRel exists)
									invoke UpdateTaxTransaction ReceivableGLDistributionWithTaxCodeRel

						if (!ZeroAmountInvoice
						and DistributionGoodsLineExist
						and IntrastatNatureOfTransactionCode entered
						and DoIntrastat)
							include CheckIntrastat
							include EditIntrastatDataForRelease
							include CreateIntrastatRecords


						if ((!Origin.External
						and  !Origin.Projects)

						or FromEFTPayment)

							initialize LocalCurrencyCalculationGroup
							LocalCurrencyCalculationGroup.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							LocalCurrencyCalculationGroup.ExchangeDate					= TransactionDate
							LocalCurrencyCalculationGroup.CurrencyAmount				= InvoiceAmount.CurrencyAmount
							LocalCurrencyCalculationGroup.FromCurrency					= OriginalCurrency

							LocalCurrencyCalculationGroup.FunctionalAmount.ToCurrency	= Company.AccountingEntity.FunctionalCurrency
							LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency	= Company.AccountingEntity.AlternateCurrency
							LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency	= Company.AccountingEntity.AlternateCurrency2
							LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency	= Company.AccountingEntity.AlternateCurrency3
							LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyOne
							LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyTwo
							LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyThree
							LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFour
							LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency		= Company.FinanceEnterpriseGroup.ReportCurrencyFive


							LocalCurrencyCalculationGroup.FunctionalAmount.EnteredCurrencyRate	= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount2.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.AlternateAmount3.EnteredCurrencyRate	= InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount1.EnteredCurrencyRate		= InvoiceAmount.ReportAmount1.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount2.EnteredCurrencyRate		= InvoiceAmount.ReportAmount2.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount3.EnteredCurrencyRate		= InvoiceAmount.ReportAmount3.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount4.EnteredCurrencyRate		= InvoiceAmount.ReportAmount4.EnteredCurrencyRate
							LocalCurrencyCalculationGroup.ReportAmount5.EnteredCurrencyRate		= InvoiceAmount.ReportAmount5.EnteredCurrencyRate


							initialize LocalDistributionTotal
							for each ReceivableGLDistributionDetailTypeRel
								LocalDistributionTotal.FunctionalAmount					+= each.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
								LocalDistributionTotal.AlternateAmount					+= each.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
								LocalDistributionTotal.AlternateAmount2					+= each.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
								LocalDistributionTotal.AlternateAmount3					+= each.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
								LocalDistributionTotal.ReportAmount1					+= each.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
								LocalDistributionTotal.ReportAmount2					+= each.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
								LocalDistributionTotal.ReportAmount3					+= each.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
								LocalDistributionTotal.ReportAmount4					+= each.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
								LocalDistributionTotal.ReportAmount5					+= each.DistributionAmount.ReportAmount5.EnteredCurrencyAmount


							initialize LocalRoundedAmount
							if ((LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount >=0 and LocalDistributionTotal.FunctionalAmount >= 0)
							or  (LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount <=0 and LocalDistributionTotal.FunctionalAmount <= 0))
								LocalRoundedAmount.FunctionalAmount					= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount - LocalDistributionTotal.FunctionalAmount
								LocalRoundedAmount.FunctionalAmount					= LocalRoundedAmount.FunctionalAmount * -1
							else
								LocalRoundedAmount.FunctionalAmount					= LocalCurrencyCalculationGroup.FunctionalAmount.OutputCurrencyAmount + LocalDistributionTotal.FunctionalAmount

							if (LocalCurrencyCalculationGroup.AlternateAmount.ToCurrency entered)
								if ((LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount >=0 and LocalDistributionTotal.AlternateAmount >= 0)
								or  (LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount <=0 and LocalDistributionTotal.AlternateAmount <= 0))
									LocalRoundedAmount.AlternateAmount							= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount - LocalDistributionTotal.AlternateAmount
									LocalRoundedAmount.AlternateAmount							= LocalRoundedAmount.AlternateAmount * -1
								else
									LocalRoundedAmount.AlternateAmount							= LocalCurrencyCalculationGroup.AlternateAmount.OutputCurrencyAmount + LocalDistributionTotal.AlternateAmount

							if (LocalCurrencyCalculationGroup.AlternateAmount2.ToCurrency entered)
								if ((LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount >= 0 and LocalDistributionTotal.AlternateAmount2 >= 0)
								or  (LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount <= 0 and LocalDistributionTotal.AlternateAmount2 <= 0))
									LocalRoundedAmount.AlternateAmount2							= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount - LocalDistributionTotal.AlternateAmount2
									LocalRoundedAmount.AlternateAmount2							= LocalRoundedAmount.AlternateAmount2 * -1
								else
									LocalRoundedAmount.AlternateAmount2							= LocalCurrencyCalculationGroup.AlternateAmount2.OutputCurrencyAmount + LocalDistributionTotal.AlternateAmount2

							if (LocalCurrencyCalculationGroup.AlternateAmount3.ToCurrency entered)
								if ((LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount >= 0 and LocalDistributionTotal.AlternateAmount3 >= 0)
								or  (LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount <= 0 and LocalDistributionTotal.AlternateAmount3 <= 0))
									LocalRoundedAmount.AlternateAmount3							= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount - LocalDistributionTotal.AlternateAmount3
									LocalRoundedAmount.AlternateAmount3							= LocalRoundedAmount.AlternateAmount3 * -1
								else
									LocalRoundedAmount.AlternateAmount3							= LocalCurrencyCalculationGroup.AlternateAmount3.OutputCurrencyAmount + LocalDistributionTotal.AlternateAmount3

							if (LocalCurrencyCalculationGroup.ReportAmount1.ToCurrency entered)
								if ((LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount >= 0 and LocalDistributionTotal.ReportAmount1 >= 0)
								or  (LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount <= 0 and LocalDistributionTotal.ReportAmount1 <= 0))
									LocalRoundedAmount.ReportAmount1							= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount - LocalDistributionTotal.ReportAmount1
									LocalRoundedAmount.ReportAmount1							= LocalRoundedAmount.ReportAmount1 * -1
								else
									LocalRoundedAmount.ReportAmount1							= LocalCurrencyCalculationGroup.ReportAmount1.OutputCurrencyAmount + LocalDistributionTotal.ReportAmount1

							if (LocalCurrencyCalculationGroup.ReportAmount2.ToCurrency entered)
								if ((LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount >=0 and LocalDistributionTotal.ReportAmount2 >= 0)
								or  (LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount <=0 and LocalDistributionTotal.ReportAmount2 <= 0))
									LocalRoundedAmount.ReportAmount2							= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount - LocalDistributionTotal.ReportAmount2
									LocalRoundedAmount.ReportAmount2							= LocalRoundedAmount.ReportAmount2 * -1
								else
									LocalRoundedAmount.ReportAmount2							= LocalCurrencyCalculationGroup.ReportAmount2.OutputCurrencyAmount + LocalDistributionTotal.ReportAmount2

							if (LocalCurrencyCalculationGroup.ReportAmount3.ToCurrency entered)
								if ((LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount >= 0 and LocalDistributionTotal.ReportAmount3 >= 0)
								or  (LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount <= 0 and LocalDistributionTotal.ReportAmount3 <= 0))
									LocalRoundedAmount.ReportAmount3							= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount - LocalDistributionTotal.ReportAmount3
									LocalRoundedAmount.ReportAmount3							= LocalRoundedAmount.ReportAmount3 * -1
								else
									LocalRoundedAmount.ReportAmount3							= LocalCurrencyCalculationGroup.ReportAmount3.OutputCurrencyAmount + LocalDistributionTotal.ReportAmount3

							if (LocalCurrencyCalculationGroup.ReportAmount4.ToCurrency entered)
								if ((LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount >= 0 and LocalDistributionTotal.ReportAmount4 >= 0)
								or  (LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount <= 0 and LocalDistributionTotal.ReportAmount4 <= 0))
									LocalRoundedAmount.ReportAmount4							= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount - LocalDistributionTotal.ReportAmount4
									LocalRoundedAmount.ReportAmount4							= LocalRoundedAmount.ReportAmount4 * -1
								else
									LocalRoundedAmount.ReportAmount4							= LocalCurrencyCalculationGroup.ReportAmount4.OutputCurrencyAmount + LocalDistributionTotal.ReportAmount4

							if (LocalCurrencyCalculationGroup.ReportAmount5.ToCurrency entered)
								if ((LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount >= 0 and LocalDistributionTotal.ReportAmount5 >= 0)
								or  (LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount <= 0 and LocalDistributionTotal.ReportAmount5 <= 0))
									LocalRoundedAmount.ReportAmount5							= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount - LocalDistributionTotal.ReportAmount5
									LocalRoundedAmount.ReportAmount5							= LocalRoundedAmount.ReportAmount5 * -1
								else
									LocalRoundedAmount.ReportAmount5							= LocalCurrencyCalculationGroup.ReportAmount5.OutputCurrencyAmount + LocalDistributionTotal.ReportAmount5


							if (LocalRoundedAmount.FunctionalAmount entered
							and	Company.AccountingEntity.FunctionalCurrency = last ReceivableGLDistributionDetailTypeAmountEnteredRel.GeneralLedgerAccount.ToAccountingEntity.FunctionalCurrency)
								LocalRoundedAmount.ToFunctionalAmount = LocalRoundedAmount.FunctionalAmount
							if (LocalRoundedAmount.AlternateAmount entered
							and	Company.AccountingEntity.AlternateCurrency = last ReceivableGLDistributionDetailTypeAmountEnteredRel.GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency)
								LocalRoundedAmount.ToAlternateAmount = LocalRoundedAmount.AlternateAmount
							if (LocalRoundedAmount.AlternateAmount2 entered
							and	Company.AccountingEntity.AlternateCurrency2 = last ReceivableGLDistributionDetailTypeAmountEnteredRel.GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency2)
								LocalRoundedAmount.ToAlternateAmount2 = LocalRoundedAmount.AlternateAmount2
							if (LocalRoundedAmount.AlternateAmount3 entered
							and	Company.AccountingEntity.AlternateCurrency3 = last ReceivableGLDistributionDetailTypeAmountEnteredRel.GeneralLedgerAccount.ToAccountingEntity.AlternateCurrency3)
								LocalRoundedAmount.ToAlternateAmount3 = LocalRoundedAmount.AlternateAmount3

							invoke RoundingUpdate last ReceivableGLDistributionDetailTypeAmountEnteredRel
								invoked.RoundAmount = LocalRoundedAmount



						if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundAccounting
						and OriginIsFundAccountingSupported)
							for each ProrateDistributionsRel 
								if (ZeroAmountInvoice)
									NextSentence = true
								else
									initialize LocalCalculateReceivableFinanceStructure
									LocalCalculateReceivableFinanceStructure.InputReceivableCompany			= Company
									LocalCalculateReceivableFinanceStructure.InputReceivableInvoiceType		= ReceivableInvoiceType
									LocalCalculateReceivableFinanceStructure.InputReceivableInvoice			= ReceivableInvoice
									LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution	= each.ReceivableGLDistribution
									LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType = "R"
									LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock			= ReceivableGeneralLedgerCodeRel.DistributionAccount
									LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

									if (IsManualEntry
									or	Origin.External
									and   first UnpostedDistributionsRel exists
									or	Origin.IntercompanyBilling
									or	Origin.AccountsPayable
									or	Origin.ProformaInvoice
									or	Origin.Sublease) 
										invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
											invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
											invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
											invoked.ReceivableGLDistribution.ProgramSequence		= ProgramSequence
											invoked.ReceivableCompanyGroup.GlCompany				= ReceivableInvoice.Company
											invoked.GeneralLedgerDate								= GeneralLedgerDate
											invoked.ReceivableGLDistribution.GeneralLedgerAccount	= LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
											if (IsInvoiceIdentity)
												invoked.Origin										= "RI"
											else
												invoked.Origin										= "RM"

											if (IsDebitIdentity)
												invoked.DistributionAmount.CurrencyAmount			= each.DistributionAmount.CurrencyAmount
											else
												invoked.DistributionAmount.CurrencyAmount			= each.DistributionAmount.CurrencyAmount * -1
											if (Origin.IntercompanyBilling)
												if (IsDebitIdentity)
													invoked.DistributionAmount.CurrencyAmount			= each.DistributionAmount.CurrencyAmount * -1
											invoked.Description										= "Batch " + BatchNumber + ", " + ReceivableInvoiceType + " " + ReceivableInvoice
											invoked.BypassStructureRelationEdit						= true 
											invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel							= ReceivableProcessLevel
											invoked.ReceivableGLDistribution.GeneralLedgerDate		= GeneralLedgerDate
											invoked.TransactionDate									= TransactionDate
											invoked.BatchNumber										= BatchNumber
											invoked.ReceivableCompanyDataGroup.Customer				= Customer
											invoked.Invoice											= ReceivableInvoice
											invoked.TransType										= ReceivableInvoiceType
											invoked.OriginalCurrency								= OriginalCurrency
											invoked.AccumulationType								= "S"
											invoked.BypassStatusEdit								= true
									else
										if (Origin.PaymentCreatedCreditMemo)
											invoke Create ReceivableGLDistribution
												invoked.FinanceEnterpriseGroup							 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
												invoked.BatchNumber										 = ReceivablePaymentHeader
												invoked.SequenceNumber									 = ReceivablePayment
												invoked.ReceivableCompanyGroup.GlCompany				 = ReceivablePayment.Company
												invoked.ReceivableCompanyDataGroup.TransactionCompany	 = Company
												invoked.ReceivableCompanyGroup.OriginCompany			 = ReceivablePayment.Company
												invoked.GeneralLedgerAccount							 = LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
												invoked.Origin											 = "RM"
												invoked.DistributionAmount.CurrencyAmount				 = (each.DistributionAmount.CurrencyAmount * -1)
												invoked.Description										 = ("Batch " + BatchNumber + blank + ReceivableInvoiceType + blank + ReceivableInvoice)
												invoked.BypassStructureRelationEdit						 = true 
												invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableProcessLevel
												invoked.GeneralLedgerDate								 = GeneralLedgerDate
												invoked.TransactionDate									 = GeneralLedgerDate
												invoked.TransactionDate									 = TransactionDate
												invoked.ReceivableCompanyDataGroup.Customer				 = Customer
												invoked.BatchNumber										 = BatchNumber
												invoked.Invoice											 = ReceivableInvoice
												invoked.TransType										 = ReceivableInvoiceType
												invoked.OriginalCurrency								 = OriginalCurrency
												invoked.CurrencyDecimalsNumber							 = CurrencyDecimalsNumber
												invoked.DistributionSource								 = "A"
												invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate = 1
												invoked.AccumulationType								 = "S"
												invoked.DocumentNumber									 = ("1-" + ReceivableInvoice)
												invoked.Status											 = 2
												invoked.BatchNumber										 = BatchNumber
												invoked.AuditSummaryIndicator							 = "01"
												invoked.BypassStatusEdit								 = true
						else
						if (Company.DetailedInvoiceAccrualDistributions
						and FromInterface
						and !ZeroAmountInvoice
						and ReceivableInvoiceDetailRel exists
						and UnpostedDistributionsRel exists)
							initialize LocalSumLineItemAmounts
							LocalLastLineItem = last ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq
							for each ReceivableInvoiceDetailRel
								initialize LocalNewReceivableGLDistribution
								invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
									assign result to LocalNewReceivableGLDistribution
									invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
									invoked.ReceivableCompanyGroup.GlCompany				= Company
									invoked.GeneralLedgerDate								= GeneralLedgerDate
									if (each.InvoiceFinanceCodeBlock entered)
										invoked.GeneralLedgerAccount						= each.InvoiceFinanceCodeBlock
									else
										invoked.GeneralLedgerAccount						= ReceivableGeneralLedgerCodeRel.DistributionAccount
									if (IsInvoiceIdentity)
										invoked.Origin										= "RI"
									else
										invoked.Origin										= "RM"
									invoked.DistributionAmount.CurrencyAmount			    = each.SignedTransactionAmount							
									invoked.Description										= "Batch " + BatchNumber + ", " + ReceivableInvoiceType + " " + ReceivableInvoice
									invoked.BypassStructureRelationEdit						= true
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableProcessLevel
									invoked.GeneralLedgerDate		                        = GeneralLedgerDate
									invoked.TransactionDate									= TransactionDate
									invoked.BatchNumber										= BatchNumber
									invoked.ReceivableCompanyDataGroup.Customer				= Customer
									invoked.Invoice											= ReceivableInvoice
									invoked.TransType										= ReceivableInvoiceType	
									invoked.OriginalCurrency								= OriginalCurrency	
									invoked.AccumulationType								= "S"
									invoked.BypassStatusEdit								= true
								
								LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

								if (each.ReceivableInvoiceDetail.PaymentSeq = LocalLastLineItem)
									invoke RoundingUpdate LocalNewReceivableGLDistribution
										if (IsDebitIdentity)
											invoked.RoundAmount.FunctionalAmount	= ((InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount		= ((InvoiceAmount.AlternateAmount.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount2	= ((InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount3	= ((InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount1		= ((InvoiceAmount.ReportAmount1.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount2		= ((InvoiceAmount.ReportAmount2.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount3		= ((InvoiceAmount.ReportAmount3.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount4		= ((InvoiceAmount.ReportAmount4.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount5		= ((InvoiceAmount.ReportAmount5.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount) * -1)
										else
											invoked.RoundAmount.FunctionalAmount	= (((InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount		= (((InvoiceAmount.AlternateAmount.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount2	= (((InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount3	= (((InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount1		= (((InvoiceAmount.ReportAmount1.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount2		= (((InvoiceAmount.ReportAmount2.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount3		= (((InvoiceAmount.ReportAmount3.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount4		= (((InvoiceAmount.ReportAmount4.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount5		= (((InvoiceAmount.ReportAmount5.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount) * -1)
						else
						if (Company.DetailedInvoiceAccrualDistributions
						and IsManualEntry
						and !ZeroAmountInvoice
						and HasLineItems)
							initialize LocalSumLineItemAmounts
							LocalLastLineItem = last ReceivableInvoiceLineItemRel.ReceivableInvoiceLineItem
							for each ReceivableInvoiceLineItemRel
								initialize LocalNewReceivableGLDistribution
								invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
									assign result to LocalNewReceivableGLDistribution
									invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
									invoked.ReceivableGLDistribution.ProgramSequence		= ProgramSequence
									invoked.ReceivableCompanyGroup.GlCompany				= ReceivableInvoice.Company
									invoked.GeneralLedgerDate								= GeneralLedgerDate
									if (each.InvoiceFinanceCodeBlock entered)
										invoked.GeneralLedgerAccount						= each.InvoiceFinanceCodeBlock
									else
									if (InvoiceFinanceCodeBlock entered)
										invoked.GeneralLedgerAccount						= InvoiceFinanceCodeBlock
									else
										invoked.GeneralLedgerAccount						= ReceivableGeneralLedgerCodeRel.DistributionAccount
									if (IsInvoiceIdentity)
										invoked.Origin										= "RI"
									else
										invoked.Origin										= "RM"

									if (IsDebitIdentity)
										invoked.DistributionAmount.CurrencyAmount			= each.TransactionAmount
									else
										invoked.DistributionAmount.CurrencyAmount			= each.TransactionAmount * -1							
									invoked.Description										= "Batch " + BatchNumber + ", " + ReceivableInvoiceType + " " + ReceivableInvoice
									invoked.BypassStructureRelationEdit						= true 
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel							= ReceivableProcessLevel
									invoked.ReceivableGLDistribution.GeneralLedgerDate		= GeneralLedgerDate
									invoked.TransactionDate									= TransactionDate
									invoked.BatchNumber										= BatchNumber
									invoked.ReceivableCompanyDataGroup.Customer				= Customer
									invoked.Invoice											= ReceivableInvoice
									invoked.TransType										= ReceivableInvoiceType	
									invoked.OriginalCurrency								= OriginalCurrency	
									invoked.AccumulationType								= "S"
									invoked.BypassStatusEdit								= true
								
								LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

								if (each.ReceivableInvoiceLineItem = LocalLastLineItem)
									invoke RoundingUpdate LocalNewReceivableGLDistribution
										if (IsDebitIdentity)
											invoked.RoundAmount.FunctionalAmount	= ((InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount		= ((InvoiceAmount.AlternateAmount.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount2	= ((InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount3	= ((InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount1		= ((InvoiceAmount.ReportAmount1.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount2		= ((InvoiceAmount.ReportAmount2.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount3		= ((InvoiceAmount.ReportAmount3.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount4		= ((InvoiceAmount.ReportAmount4.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount5		= ((InvoiceAmount.ReportAmount5.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount) * -1)
										else
											invoked.RoundAmount.FunctionalAmount	= (((InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount		= (((InvoiceAmount.AlternateAmount.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount2	= (((InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount3	= (((InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount1		= (((InvoiceAmount.ReportAmount1.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount2		= (((InvoiceAmount.ReportAmount2.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount3		= (((InvoiceAmount.ReportAmount3.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount4		= (((InvoiceAmount.ReportAmount4.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount5		= (((InvoiceAmount.ReportAmount5.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount) * -1)
						else
						if (Company.DetailedInvoiceAccrualDistributions
						and IsManualEntry
						and !ZeroAmountInvoice
						and InvoiceEntryTemplate.Expanded)
							initialize LocalSumLineItemAmounts
							for each ReceivableInvoiceAddOnCharge set
								initialize LocalNewReceivableGLDistribution
								invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
									assign result to LocalNewReceivableGLDistribution
									invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
									invoked.ReceivableGLDistribution.ProgramSequence		= ProgramSequence
									invoked.ReceivableCompanyGroup.GlCompany				= ReceivableInvoice.Company
									invoked.GeneralLedgerDate								= GeneralLedgerDate
									if (each.InvoiceFinanceCodeBlock entered)
										invoked.GeneralLedgerAccount						= each.InvoiceFinanceCodeBlock
									else
									if (InvoiceFinanceCodeBlock entered)
										invoked.GeneralLedgerAccount						= InvoiceFinanceCodeBlock
									else
										invoked.GeneralLedgerAccount						= ReceivableGeneralLedgerCodeRel.DistributionAccount
									if (IsInvoiceIdentity)
										invoked.Origin										= "RI"
									else
										invoked.Origin										= "RM"
									invoked.DistributionAmount.CurrencyAmount				= each.DerivedTotalAmountForPrinting			
									invoked.Description										= "Batch " + BatchNumber + ", " + ReceivableInvoiceType + " " + ReceivableInvoice
									invoked.BypassStructureRelationEdit						= true 
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel							= ReceivableProcessLevel
									invoked.ReceivableGLDistribution.GeneralLedgerDate		= GeneralLedgerDate
									invoked.TransactionDate									= TransactionDate
									invoked.BatchNumber										= BatchNumber
									invoked.ReceivableCompanyDataGroup.Customer				= Customer
									invoked.Invoice											= ReceivableInvoice
									invoked.TransType										= ReceivableInvoiceType	
									invoked.OriginalCurrency								= OriginalCurrency	
									invoked.AccumulationType								= "S"
									invoked.BypassStatusEdit								= true
								
								LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

							LocalLastLineItem = last ReceivableInvoiceLine set.ReceivableInvoiceLine
							for each ReceivableInvoiceLine set
								initialize LocalNewReceivableGLDistribution
								invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
									assign result to LocalNewReceivableGLDistribution
									invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
									invoked.ReceivableGLDistribution.ProgramSequence		= ProgramSequence
									invoked.ReceivableCompanyGroup.GlCompany				= ReceivableInvoice.Company
									invoked.GeneralLedgerDate								= GeneralLedgerDate
									if (each.InvoiceFinanceCodeBlock entered)
										invoked.GeneralLedgerAccount						= each.InvoiceFinanceCodeBlock
									else
									if (InvoiceFinanceCodeBlock entered)
										invoked.GeneralLedgerAccount						= InvoiceFinanceCodeBlock
									else
										invoked.GeneralLedgerAccount						= ReceivableGeneralLedgerCodeRel.DistributionAccount
									if (IsInvoiceIdentity)
										invoked.Origin										= "RI"
									else
										invoked.Origin										= "RM"

									invoked.DistributionAmount.CurrencyAmount				= each.DerivedTotalAmountForPrinting						
									invoked.Description										= "Batch " + BatchNumber + ", " + ReceivableInvoiceType + " " + ReceivableInvoice
									invoked.BypassStructureRelationEdit						= true 
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel							= ReceivableProcessLevel
									invoked.ReceivableGLDistribution.GeneralLedgerDate		= GeneralLedgerDate
									invoked.TransactionDate									= TransactionDate
									invoked.BatchNumber										= BatchNumber
									invoked.ReceivableCompanyDataGroup.Customer				= Customer
									invoked.Invoice											= ReceivableInvoice
									invoked.TransType										= ReceivableInvoiceType	
									invoked.OriginalCurrency								= OriginalCurrency	
									invoked.AccumulationType								= "S"
									invoked.BypassStatusEdit								= true
								
								LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
								LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
								LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

								if (each.ReceivableInvoiceLine = LocalLastLineItem)
									invoke RoundingUpdate LocalNewReceivableGLDistribution
										if (IsDebitIdentity)
											invoked.RoundAmount.FunctionalAmount	= ((InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount		= ((InvoiceAmount.AlternateAmount.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount2	= ((InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount3	= ((InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount1		= ((InvoiceAmount.ReportAmount1.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount2		= ((InvoiceAmount.ReportAmount2.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount3		= ((InvoiceAmount.ReportAmount3.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount4		= ((InvoiceAmount.ReportAmount4.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount5		= ((InvoiceAmount.ReportAmount5.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount) * -1)
										else
											invoked.RoundAmount.FunctionalAmount	= (((InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount		= (((InvoiceAmount.AlternateAmount.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount2	= (((InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.AlternateAmount3	= (((InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount1		= (((InvoiceAmount.ReportAmount1.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount2		= (((InvoiceAmount.ReportAmount2.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount3		= (((InvoiceAmount.ReportAmount3.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount4		= (((InvoiceAmount.ReportAmount4.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount) * -1)
											invoked.RoundAmount.ReportAmount5		= (((InvoiceAmount.ReportAmount5.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount) * -1)
						else 
							if  (ZeroAmountInvoice)
								NextSentence = true
							else
							if  (IsManualEntry
							or  (Origin.External
							and  UnpostedDistributionsRel exists)
							or   Origin.IntercompanyBilling	
							or   Origin.AccountsPayable
							or	 Origin.ProformaInvoice
							or	 Origin.Sublease)
								invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
									invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
									invoked.ReceivableGLDistribution.ProgramSequence		= ProgramSequence
									invoked.ReceivableCompanyGroup.GlCompany				= ReceivableInvoice.Company
									invoked.GeneralLedgerDate								= GeneralLedgerDate
									if (InvoiceFinanceCodeBlock entered)
										invoked.GeneralLedgerAccount						= InvoiceFinanceCodeBlock
									else
										invoked.GeneralLedgerAccount						= ReceivableGeneralLedgerCodeRel.DistributionAccount


									if (IsInvoiceIdentity)
										invoked.Origin										= "RI"
									else
										invoked.Origin										= "RM"

									if (IsDebitIdentity)

										invoked.DistributionAmount.CurrencyAmount			= InvoiceAmount.CurrencyAmount
									else

										invoked.DistributionAmount.CurrencyAmount			= InvoiceAmount.CurrencyAmount * -1

									invoked.Description										= "Batch " + BatchNumber + ", " + ReceivableInvoiceType + " " + ReceivableInvoice
									invoked.BypassStructureRelationEdit						= true 
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel							= ReceivableProcessLevel
									invoked.ReceivableGLDistribution.GeneralLedgerDate		= GeneralLedgerDate
									invoked.TransactionDate									= TransactionDate
									invoked.BatchNumber										= BatchNumber
									invoked.ReceivableCompanyDataGroup.Customer				= Customer
									invoked.Invoice											= ReceivableInvoice
									invoked.TransType										= ReceivableInvoiceType
									invoked.OriginalCurrency								= OriginalCurrency
									invoked.AccumulationType								= "S"
									invoked.BypassStatusEdit								= true

							else
								if  (Origin.PaymentCreatedCreditMemo)
									invoke Create ReceivableGLDistribution
										assign result to LocalNewReceivableGLDistribution
										invoked.ReceivableGLDistribution.ProgramSequence				= I1
										invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
										invoked.BatchNumber												= ReceivablePaymentHeader
										invoked.SequenceNumber											= ReceivablePayment
										invoked.ReceivableCompanyGroup.GlCompany						= ReceivablePayment.Company
										invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
										invoked.ReceivableCompanyGroup.OriginCompany					= ReceivablePayment.Company
										if (InvoiceFinanceCodeBlock entered)
											invoked.GeneralLedgerAccount								= InvoiceFinanceCodeBlock
										else
											invoked.GeneralLedgerAccount								= ReceivableGeneralLedgerCodeRel.DistributionAccount
										invoked.Origin													= "RM"
										invoked.DistributionAmount.CurrencyAmount						= InvoiceAmount.CurrencyAmount * -1
										invoked.Description												= "Batch " + BatchNumber + " " + ReceivableInvoiceType + " " + ReceivableInvoice
										invoked.BypassStructureRelationEdit								= true 
										invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel		= ReceivableProcessLevel
										invoked.ReceivableGLDistribution.GeneralLedgerDate				= GeneralLedgerDate
										invoked.TransactionDate											= GeneralLedgerDate
										invoked.TransactionDate											= TransactionDate


										invoked.ReceivableCompanyDataGroup.Customer						= Customer

										invoked.BatchNumber												= BatchNumber
										invoked.Invoice													= ReceivableInvoice
										invoked.TransType												= ReceivableInvoiceType
										invoked.OriginalCurrency										= OriginalCurrency
										invoked.CurrencyDecimalsNumber									= CurrencyDecimalsNumber
										invoked.DistributionSource										= "A"
										invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= 1
										invoked.AccumulationType										= "S"
										invoked.DocumentNumber											= "1-" + ReceivableInvoice
										invoked.Status													= 2
										invoked.BatchNumber												= BatchNumber
										invoked.AuditSummaryIndicator									= "01"	
										invoked.BypassStatusEdit										= true

									invoke ReleaseGLTransactionDetailForCreditMemo ReceivableGLDistributionDetailTypeRel
									invoke ReleaseGLTransactionDetailForCreditMemo LocalNewReceivableGLDistribution.ReceivableGLDistribution



						for each ReceivableGLDistributionDetailTypeRel
							if (each.Status.Unreleased)
								if  (each.ZeroAmountDistribution
								and !each.IsZeroAmountTaxDistribution)
									invoke FastUpdate each
										invoked.Status = 9
								else
									invoke ReleaseGLTransactionDetailUpdate each
										invoked.Status = 2
										if  (!Origin.IntercompanyBilling
										and (AlternateReceivableInvoiceType.Invoice
										or   AlternateReceivableInvoiceType.DebitMemo))
											invoked.FlipAmounts							= true

						if (IsManualEntry
						or  Origin.Projects
						or  Origin.PaymentCreatedCreditMemo)
							if (ReceivableInvoiceLineItemRelCount  < 2)
								SummarizeDetail									= false
							else
								SummarizeDetail									= SummarizeDetail




						CreateTermsInBackground 	= false

						include EditTermsData

						NbrOfTerms = 1
						while (NbrOfTerms <= 99
						and	CalculateTerms.CalculateTermsTable.CalculateTermsOutput[NbrOfTerms].MultiplePayment entered) 
							NbrOfTerms += 1
							if (NbrOfTerms >= NumberOfTermsForBackgroundAction)
								CreateTermsInBackground = true
								end while


						if  (ZeroAmountInvoice
						and !Origin.Projects)
							NextSentence = true
						else
						if (IsManualEntry
						or  Origin.PaymentCreatedCreditMemo
						or  Origin.IntercompanyBilling
						or  Origin.Projects
						or  FromEFTPayment)

							if (!CreateTermsInBackground)
								if (InvoiceEntryTemplate.Expanded)
									invoke CreateInvoiceDetailsForExpandedInvoiceEntryTemplate
								else
									if (!HasLineItems)

										LoopCounter = 1
										while (LoopCounter <= 99
										and	CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered) 
											include CreateDetailFromTermsArray
											increment LoopCounter

									else
										for each ReceivableInvoiceLineItemRel

											LocalLineItemAmount = each.TransactionAmount
											include EditTermsData

											LoopCounter = 1

											while (LoopCounter <= 99
											and	CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered) 
												include CreateDetailFromLineItemTermsArray
												increment LoopCounter

											invoke Delete each
											if (Origin.Projects)
												if (RecordCount = 50)
													commit transaction
													initialize RecordCount
												RecordCount += 1


						if  (ZeroAmountInvoice
						and  !Origin.Projects)
							NextSentence = true
						else
						if (FromInterface)
							for each ReceivableInvoiceDetailRel
								if (each.Status.Unreleased)
									invoke FastUpdate each
										invoked.Status = 1

							for each MixedReceivableInvoiceCreditDetailRel
								if (each.InvoiceAmount.CurrencyAmount < 0)
									invoke Update each
										invoked.FlipAmounts				 = true

						make transition to Released
						
						initialize ErrorMessage
					Exit Rules
						if  (CreateTermsInBackground)
							invoke CreateDetailFromTerms
						else
							if  (ZeroAmountInvoice
							and  !Origin.Projects)
								NextSentence = true
							else
							if  (ReceivableInvoiceType  = "M"
							and  CompanyCustomerRel.ApplyMixedSignedLineItemsAutomatically)
								for each MixedReceivableInvoiceCreditDetailRel
									invoke  ApplyMix each












							invoke TriggerReceivableInvoice
							invoke TriggerReceivableTransaction





							if  (IsValidForGenerateIDMDocumentUponRelease)
								invoke CreateAndSendReceivableInvoiceDocToIDM in background

				PaymentIntoCredit is a Create Action
					restricted

					Entrance Rules
						BypassProjectDateEdit = true	











					Exit Rules

						I1 = 1
						while (I1 <= 10)
							if (ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionCompany entered
							or  ReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock entered
							or ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount entered)
								invoke Create ReceivableGLDistribution
									invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
									invoked.ReceivableCompanyGroup.GlCompany				= Company 
									invoked.ReceivableCompanyGroup.OriginCompany			= Company 
									invoked.ReceivableGLDistribution.ProgramSequence		= I1
									invoked.BatchNumber										= ReceivablePaymentHeader
									invoked.SequenceNumber									= ReceivablePayment
									invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company 
									invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company 
									invoked.ReceivableGLDistribution.GeneralLedgerAccount 	= ReceivableDistributionArray.ReceivableDistributionInput[I1].FinanceCodeBlock
									invoked.ReceivableGLDistribution.GeneralLedgerDate		= ReceivableDistributionArray.ReceivableDistributionInput[I1].GeneralLedgerDate
									invoked.DistributionAmount.CurrencyAmount				= ReceivableDistributionArray.ReceivableDistributionInput[I1].TransactionAmount
									invoked.Description										= ReceivableDistributionArray.ReceivableDistributionInput[I1].Description
									invoked.Status											= 2
									invoked.BatchNumber										= BatchNumber
									invoked.TransType										= ReceivableInvoiceType
									invoked.Invoice											= ReceivableInvoice

									invoked.ReceivableCompanyDataGroup.Customer				= Customer
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivableProcessLevel
									invoked.OriginalCurrency								= OriginalCurrency
									invoked.TransactionDate									= GeneralLedgerDate
									invoked.CurrencyDecimalsNumber							= CurrencyDecimalsNumber
									invoked.Origin											= "RM"
									invoked.DistributionSource								= "A"
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= 1
									invoked.AccumulationType								= "D"
									invoked.DocumentNumber									= "3-" + ReceivableInvoice
									invoked.BypassStatusEdit								= true
									invoked.BypassProjectDateEdit							= true	
							I1 +=1

						invoke Unreleased.Release


				ReleaseBatch is an Instance Action
					valid when (AllowReleaseBatch)
					Action Rules
						invoke Unreleased.Release ReceivableInvoiceBatchRel


				ProcessVertex is an Instance Action
					valid when (CallVertexByTransaction)
					Action Rules
						constraint (!BackgroundProcessing.TaxProcessing)
							"Tax_processing_is_ongoing..._refresh_to_view_progress"

						if (IsManualEntry
						and ReceivableInvoiceBatchRel exists)
							constraint (!ReceivableInvoiceBatchRel.BackgroundProcessing.ReleaseInProcess)
								"AtLeastOneInvoiceIsStillCurrentlyBeingReleased"
						
						BackgroundProcessing = BackgroundProcessing.TaxProcessing

						invoke VertexCreateTaxLineItemsForTransaction ReceivableInvoice
							invoked.PrmCompany	 		            = Company
							invoked.PrmBatchNumber 		            = BatchNumber
							invoked.PrmReceivableInvoiceType	    = ReceivableInvoiceType
							invoked.PrmReceivableInvoice            = ReceivableInvoice
							invoked.PrmReleaseBatch					= false


				ProcessOneSource is an Instance Action
					valid when (TaxEntityUsesOneSource)
					Action Rules
						constraint (!BackgroundProcessing.TaxProcessing)
							"Tax_processing_is_ongoing..._refresh_to_view_progress"

						if (IsManualEntry
						and ReceivableInvoiceBatchRel exists)
							constraint (!ReceivableInvoiceBatchRel.BackgroundProcessing.ReleaseInProcess)
								"AtLeastOneInvoiceIsStillCurrentlyBeingReleased"
						
						BackgroundProcessing = BackgroundProcessing.TaxProcessing

						invoke OneSourceManualInvoicesCreateTaxLineItems ReceivableInvoice
							invoked.PrmCompany	 		            = Company
							invoked.PrmBatchNumber 		            = BatchNumber
							invoked.PrmReceivableInvoiceType	    = ReceivableInvoiceType
							invoked.PrmReceivableInvoice            = ReceivableInvoice
							invoked.PrmReleaseBatch					= false


				CallOneSource is an Instance Action
					restricted
					Action Rules
						include OneSourceCalculateTax


				OneSourceRoundLastTaxableDistribution is an Instance Action
					restricted
					Parameters
						PrmNumberOfTaxableDistributions		is Numeric 6
						PrmDistributionSequence				is a DistSeq
					Local Fields
						LocalSumOfDistributions			is like InternationalAmount
						LocalDifference					is like InternationalAmount
						AllowableToleranceAmount		is like InternationalAmount
						LocalDistributionAmount			is like InternationalAmount
						LocalLowerLimitRoundingAmount	is like InternationalAmount
						LocalUpperLimitRoundingAmount	is like InternationalAmount
					Action Rules

						constraint (InvoiceAmount.CurrencyAmount entered)
							"TransactionAmountIsEmpty"

						LocalSumOfDistributions 				= DerivedReceivableGLDistributionAmount
						if (LinkedTaxGroupLinkedTaxDistributionRel exists)

							if (HasLineItems)
								constraint (DerivedReceivableInvoiceLineItemAmount = InvoiceAmount.CurrencyAmount)
									"SumOfLineItemAmountsMustEqualInvoiceAmount"

							if (LocalSumOfDistributions != InvoiceAmount.CurrencyAmount)

								LocalDifference 				= InvoiceAmount.CurrencyAmount - LocalSumOfDistributions
								if (LocalDifference < 0)
									LocalDifference 			= -1 * LocalDifference

								AllowableToleranceAmount 		= 0.01 * PrmNumberOfTaxableDistributions

								LocalLowerLimitRoundingAmount 	= InvoiceAmount.CurrencyAmount - AllowableToleranceAmount
								LocalUpperLimitRoundingAmount 	= InvoiceAmount.CurrencyAmount + AllowableToleranceAmount

								constraint (LocalDifference <= AllowableToleranceAmount)
									"SumOfDistributions<LocalSumOfDistributions>IsNotWithinTheEstablishedRoundingToleranceRangeOf<LocalLowerLimitRoundingAmount>-<LocalUpperLimitRoundingAmount>ForTheInvoiceAmountOf<InvoiceAmount.CurrencyAmount>"

								LocalDistributionSequence		= PrmDistributionSequence
								LocalDistributionAmount 		= first ReceivableGLDistributionLastTaxableRel.DistributionAmount.CurrencyAmount
								LocalDistributionAmount 		= LocalDistributionAmount + (InvoiceAmount.CurrencyAmount - LocalSumOfDistributions)

								invoke Update first ReceivableGLDistributionLastTaxableRel
									invoked.DistributionAmount.CurrencyAmount 	= LocalDistributionAmount
									invoked.AllowLinkedTaxUpdate                = true

								if (first ReceivableGLDistributionLastTaxableRel.GeneralLedgerAccount.Project entered
								and not InvoiceEntryTemplate.Expanded)
									LocalProject = first ReceivableGLDistributionLastTaxableRel.GeneralLedgerAccount.Project
									constraint (sum LocalProjectDistributionRel.DistributionAmount.CurrencyAmount = sum LocalLineItemProjectRel.TransactionAmount)
										"DistributionAmountDoesNotMatchProjectLineItemsAmountForProject<LocalProject>AfterRounding.AdjustProjectAndNonProjectLineItemAmounts"
									initialize LocalProject

								SumOfReceivableGLDistributionRelDistributionAmountCurrencyAmountDone = false
						else
							constraint (LocalSumOfDistributions = InvoiceAmount.CurrencyAmount)
								"NoTaxDistributionsWereCreated;SumOfDistributionAmounts<LocalSumOfDistributions>DoesNotEqualTransactionAmount<InvoiceAmount.CurrencyAmount>ForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"

				FrontEndSplitARTransactionDistributions is an Instance Action
					default label is "FrontEndSplitDistributions"
					valid when(AllowFrontEndSplit)
					Action Rules
						if (IsInvoice or IsDebitMemo)
							invoke FrontEndSplitDistributions ReceivableGLDistribution in foreground
								invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.PrmCompany					= Company
								invoked.PrmBatchNumber				= BatchNumber
								invoked.PrmTransType				= ReceivableInvoiceType
								invoked.PrmInvoice					= ReceivableInvoice

				DeleteFrontEndSplitARTransactionDistributions is an Instance Action
					default label is "DeleteFrontEndSplitDistributions"
					valid when(HasFrontEndSplitDistributions)
					Action Rules
						invoke DeleteFrontEndSplitDistributions ReceivableGLDistribution
							invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.PrmCompany					= Company
							invoked.PrmBatchNumber				= BatchNumber
							invoked.PrmTransType				= ReceivableInvoiceType
							invoked.PrmInvoice					= ReceivableInvoice

			Released is a State



				CreateReleasedFromPayment is a Create Action
					restricted

					Action Rules
						if (invoking action = "RTMPayment.ReleaseUnreleasedRtm")				
							invoke UpdateCurrentBalance CompanyCustomerRel
								if (IsDebitMemoIdentity)
									invoked.ChangeAmount				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
								else
									invoked.ChangeAmount				= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
								invoked.TransactionDate					= TransactionDate
								invoked.PrmBalanceType					= 1
								invoked.PrmReference					= "RTM" + Reference  
						Status = 1

































				CreateFromApplicationClose is a Create Action
					restricted

					Action Rules


				Transfer is an Instance Action	 
					valid when (AvailableForTransfer)
					Parameters
						ReassignToCustomer		is a Customer
						ReassignDate			is Date
					Parameter Rules
						ReassignToCustomer
							required
							constraint (ReassignToCustomer != Customer)
								"CannotReassignToSameCustomer"
							LocalReassignCustomer = ReassignToCustomer
							constraint	(ReassignCompanyCustomerRel exists)
								"MustReassignToCustomerWithinSameCompany"
						ReassignDate
							default to current corporate date
							constraint (ReassignDate >= GeneralLedgerDate)
								"ReassignDateMustBeEqualToOrGreaterThanGlobalLedgerDate"
					Entrance Rules
						constraint (!Origin.Projects)
							"CannotTransfer;TransactionIsFromProjects"
						constraint (Status.Released)
							"InvoiceIsNotReleased;CannotTransfer"
						constraint (!CancelFlag.OpenItemHasBeenTransfered)
							"InvoiceAlreadyTransferred"
						constraint (!ReceivableApplicationSelectRel exists)
							"PendingApplicationsExist;CannotTransfer"
						for each ReceivableInvoiceDetailRel
							constraint (!each.ARToAPApplicationSelectRel exists)
								"PendingARToAPApplicationExists;CannotTransfer"
							constraint (each.NonMixedSignAppliedAmount not entered)
								"CannotTransfer;ApplicationExists"
							constraint (each.AdjustmentAmount.CurrencyAmount not entered)
								"CannotTransfer;AdjustmentExists"
							if (!each.Status.OpenTransaction)
								constraint (each.InvoiceAmount.CurrencyAmount not entered)
									"CannotTransfer;NonReleasedItemWithAmountExists"
							constraint (!each.PortalPaymentSelected)	
								"CannotTransfer;SelectedFor_Third_Party_Payment_Processing"
					Action Rules
						invoke UpdateCurrentBalance CompanyCustomerRel 
							if (IsDebitIdentity or IsInvoiceIdentity)
								invoked.ChangeAmount					= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							else
								invoked.ChangeAmount					= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.InvoiceLastInvoiceDate				= TransactionDate
							invoked.InvoiceLastInvoiceAmount			= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.PrmBalanceType						= 1
							invoked.PrmReference						= Reference

						if (!AlternateReceivableInvoiceType.DebitMemo)
							invoke UpdatePeriodTotals CompanyCustomerRel
								if (AlternateReceivableInvoiceType.Invoice)
									invoked.Type						= "B"
								else
								if (AlternateReceivableInvoiceType.CreditMemo)
									if (Origin.PaymentCreatedCreditMemo)
										invoked.Type					= "C"
									else
										invoked.Type					= "M"

								invoked.Amount							= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
								invoked.EffectiveDate					= GeneralLedgerDate

						OldCustomer										= Customer
						Customer										= ReassignToCustomer
						CancelFlag										= "Y"

						invoke UpdateCustomer ReceivableInvoiceDetailRel
							invoked.Customer							= ReassignToCustomer
							invoked.CancelFlag							= "Y"

						for each OldReceivableInvoiceDisputeRel
							invoke RestrictedCreate each
								fill in fields from each
								invoked.Customer						= ReassignToCustomer

							invoke Delete each

						for each OldCompanyCustomerCommentRel
							invoke RestrictedCreate CompanyCustomerComment
								fill in fields from each
								invoked.Customer						= ReassignToCustomer

							invoke Delete each

						invoke FastUpdate OldReceivableGLDistributionRel
							invoked.ReceivableCompanyDataGroup.Customer 							= ReassignToCustomer





						invoke UpdateCurrentBalance CompanyCustomerRel 
							if (IsDebitIdentity or IsInvoiceIdentity)
								invoked.ChangeAmount					= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.TransactionDate					= TransactionDate
							else
								invoked.ChangeAmount					= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1
								invoked.TransactionDate					= TransactionDate
							invoked.InvoiceLastInvoiceDate				= TransactionDate
							invoked.InvoiceLastInvoiceAmount			= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.PrmBalanceType						= 1
							invoked.PrmReference						= Reference

						if (!AlternateReceivableInvoiceType.DebitMemo)
							invoke UpdatePeriodTotals CompanyCustomerRel
								if (AlternateReceivableInvoiceType.Invoice)
									invoked.Type						= "B"
								else
								if (AlternateReceivableInvoiceType.CreditMemo)
									if (Origin.PaymentCreatedCreditMemo)
										invoked.Type					= "C"
									else
										invoked.Type					= "M"

								invoked.Amount							= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.EffectiveDate					= GeneralLedgerDate
						for each ReceivableInvoiceDetailRel
							LocalReceivableInvoiceDetailType			 = each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							LocalReceivableInvoice						 = each.ReceivableInvoiceDetail.Invoice
							LocalReceivableInvoiceDetailPaymentSequence	 = each.ReceivableInvoiceDetail.PaymentSeq

							invoke Create ReceivableInvoiceTransfer
								invoked.Company									= each.Company
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType = LocalReceivableInvoiceDetailType
								invoked.ReceivableInvoiceDetail.Invoice			= LocalReceivableInvoice
								invoked.ReceivableInvoiceDetail.PaymentSeq		= LocalReceivableInvoiceDetailPaymentSequence
								invoked.CancelDate								= ReassignDate
								invoked.Customer								= OldCustomer
								invoked.DueDate									= each.DueDate
								invoked.TransactionAmount						= each.InvoiceAmount.CurrencyAmount
								invoked.TranAmt									= each.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.Project									= each.Project

							if (CompanyCustomerRel.IsPartOfNationalAcount)
								if (!NationalAccountTransactionRel exists)
									invoke Create NationalAccountTransactionRel
										fill in fields from this instance
										if (CompanyCustomerRel.IsNationalAccountCustomer)
											invoked.NationalAccount.Company		= Company
											invoked.NationalAccount.Customer	= Customer
										if (CompanyCustomerRel.IsInvoicedCustomer)
											invoked.NationalAccount.Company		= CompanyCustomerRel.NationalAccountInvoicedCustomerRel.NationalAccount.NationalAccountGroup.NatCompany
											invoked.NationalAccount.Customer	= CompanyCustomerRel.NationalAccountInvoicedCustomerRel.NationalAccount.NationalAccountGroup.NatCustomer
										invoked.Company							= Company
										invoked.Customer						= Customer
										invoked.NationalAccountTransaction.ReceivableInvoiceDetail.ReceivableInvoiceDetailType			= 	LocalReceivableInvoiceDetailType
										invoked.NationalAccountTransaction.ReceivableInvoiceDetail.Invoice								= 	LocalReceivableInvoice
										invoked.NationalAccountTransaction.ReceivableInvoiceDetail.PaymentSeq							= 	LocalReceivableInvoiceDetailPaymentSequence
										invoked.CurrencyRate									= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
										invoked.DueDate											= each.DueDate
										invoked.TransactionAmount								= InvoiceAmount.CurrencyAmount
										invoked.BaseAmount										= InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
										invoked.OpenBaseAmount									= each.BaseOpenAmount
										invoked.OpenTransactionAmount							= each.OpenAmount
										invoked.OpenSortBaseAmount								= each.BaseOpenAmount
										invoked.DiscountDate									= each.DiscountDate
										invoked.DiscountPercent									= each.DiscountPercent
										invoked.DiscountAmount									= each.DiscountAmount
										invoked.TransientNationalAccountIndicator				= CompanyCustomerRel.NationalAccountIndicator
										invoked.CustomerMajorClass								= CompanyCustomerRel.CustomerMajorClass
										invoked.CustomerMinorClass								= CompanyCustomerRel.CustomerMinorClass
										invoked.LastApplicationSequence							= each.LastApplicationSequence
										invoked.RiskIndicator									= CompanyCustomerRel.RiskIndicator
										invoked.ProjectContractCustomer							= each.ProjectContractCustomer
										invoked.CurrencyDecimalsNumber							= each.CurrencyDecimalsNumber
								else
									invoke FastUpdate NationalAccountTransactionRel
										invoked.Customer										= Customer
										invoked.NationalAccountIndicator						= CompanyCustomerRel.NationalAccountIndicator
										invoked.CustomerMajorClass								= CompanyCustomerRel.CustomerMajorClass
										invoked.CustomerMinorClass								= CompanyCustomerRel.CustomerMinorClass
										invoked.RiskIndicator									= CompanyCustomerRel.RiskIndicator

							else
								if (OldCompanyCustomerRel.IsNationalAccountCustomer)
									LocalTransferCustomer = OldCustomer
								else
									LocalTransferCustomer = OldCompanyCustomerRel.TransientNationalAccountGroup.NatCustomer
								invoke Delete DeleteNationalAccountTransactionRel


				MarkAsPaid is an Instance Action	
					default label is "MarkAsPaid"
					valid when (IsMarkedAsPaidEligible)
					confirmation required
						"MarkAsPaidIsAPermanentActionAndIsNotReversible.DoYouWantToProceed?"
					completion message is "ReceivableInvoice<ReceivableInvoice>MarkedAsPaid"

					Parameters
						PrmPostDate				is an ExchangeDate	//Replacing "is Date" with "is an ExchangeDate" to help allow Project fields to be populated.  Since we are using TransactionCodeBlock for PrmAdjAccount,  TransactionCodeBlock defines TransactionDate is ExchangeDate.  By updating this parameter with "is ExchangeDate" helps the TransactionCodeBlock definition.  IEFIN-56201
							default label is "PostDate"
						PrmComment				is a Description
							default label is "Comment"
						PrmAdjAccount			is a TransactionCodeBlock	
							default label is "MarkedAsPaidOffsetAccount"
						PrmCalledFromPayables	is Boolean

					Parameter Rules
						PrmPostDate
							required
							initial value is current corporate date
							if ((CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange) and !BypassGLDateEdit)
								constraint (PrmPostDate within CompanySystemClosingControlRel.ValidEntryDate)
									"PostDate<PrmPostDate>IsNotWithinValidEntryDatesForReceivableCompany<Company>;ValidDateRangeIs<CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"
							if (Origin.IntercompanyBilling)
								constraint (PrmPostDate within IntercompanyBillingDocumentRel.PayablesInvoiceRel.CompanySystemClosingControlRel.ValidEntryDate)
									"PostDate<PrmPostDate>IsNotWithinValidEntryDatesForPayablesCompany<IntercompanyBillingDocumentRel.PayablesInvoiceRel.Company>;ValidDateRangeIs<IntercompanyBillingDocumentRel.PayablesInvoiceRel.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<CompanySystemClosingControlRel.ValidEntryDate.End>"

						PrmAdjAccount
							BypassProjectDateEdit = true	
							initial value is Company.ReceivableCompany.MarkedAsPaidOffsetAccount

					Entrance Rules



						constraint (OpenReceivableInvoiceAmountEqualsInvoiceAmountCurrencyAmount)	
							"ApplicationsExistAndDoNotNetToZero;CannotMarkAsPaid"	
						constraint (!ReceivableApplicationSelectRel exists)
							"PendingApplicationsExist;CannotMarkAsPaid"
						constraint (!UnappliedReceivablePaymentRemittanceRel exists)	
							"Unapplied_\Receivable_\Payment_\RemittanceRecordsExist;CannotMarkAsPaid.NextSteps:Run_\Automatic_\Cash_\Application;Run_\Application_\Close;VerifyTransactionStatus."	
						constraint (!CancelFlag.OpenItemHasBeenTransfered)
							"TransactionAlreadyTransferred;CannotMarkAsPaid"
						constraint (!IntercompanyBillingDocumentRel.AutoApplyInProgress) 
							"CannotMarkInvoiceAsPaidIfIntercompanyBillingAutoApplyCreditInProgress"


						for each OpenReceivableInvoiceDetailRel
							constraint (!each.ARToAPApplicationSelectRel exists)
								"PendingARToAPApplicationExists;CannotMarkAsPaid"
							constraint (each.NonMixedSignAppliedAmount not entered)
								"ApplicationExists;CannotMarkAsPaid"
							constraint (each.AdjustmentAmount.CurrencyAmount not entered)
								"AdjustmentExists;CannotMarkAsPaid"
							if (!each.Status.OpenTransaction)
								constraint (each.InvoiceAmount.CurrencyAmount not entered)
									"NonReleasedItemWithAmountExists;CannotMarkAsPaid"




					Action Rules






						invoke MarkAsPaidQuickWriteoff ReceivableInvoiceDetailRel
							invoked.PrmGeneralLedgerDate		= PrmPostDate
							invoked.PrmAdjAccount				= PrmAdjAccount
							if (PrmComment entered)
								invoked.PrmComment				= PrmComment
							invoked.PrmOperator					= ReceivableOperator



						if (FromIntercompanyBilling
						and !PrmCalledFromPayables)
							invoke Released.MarkAsPaid IntercompanyBillingDocumentRel.PayablesInvoiceRel		
								invoked.PrmPostDate							= PrmPostDate
								invoked.PrmOverrideDefaultAccount			= PrmAdjAccount
								invoked.PrmComment							= PrmComment
								invoked.PrmCalledFromReceivables			= true
							invoke UpdateStatusToMarkedAsPaid IntercompanyBillingDocumentRel


				Purge is a Purge Action
					restricted



	Actions
		BatchCreateAndSendReceivableInvoiceDocToIDM is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmIDMPrinter		is an IDMPrinter
				PrmCompany			is a Company
				PrmBatchNumber		is like BatchNumber

			Local Fields
				LocalAsyncID		is an AsyncActionRequest

			Instance Selection
				where (Company = PrmCompany
				and	   BatchNumber = PrmBatchNumber
				and	   IsValidForGenerate)

			Action Rules
				Set Rules
					Entrance Rules
						LocalAsyncID = current async action request id

					Exit Rules
						invoke BatchGetStatus in background
							run after LocalAsyncID
							invoked.PrmCompany = PrmCompany
							invoked.PrmBatchNumber = PrmBatchNumber

				Instance Rules
					if (CompanyCustomerRel.PrintReceivableInvoice)
						if (PrmIDMPrinter entered)
							LocalIDMPrinter = PrmIDMPrinter
						else
							LocalIDMPrinter = IDMPrinter

					include IDMGenerateBlock

					invoke CreateFromGenerateDocument IDMJob
						assign result to IDMJobView
						invoked.Actor				= actor
						invoked.Description			= IDMDescriptionMsg
						invoked.IDMGenerateDocument	= IDMGenerateDocument
						invoked.BypassGetStatus		= true

					IDMJob = IDMJobView.IDMJob


		BatchGetStatus is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a Company
				PrmBatchNumber		is like BatchNumber

			Local Fields
				LocalAsyncID		is an AsyncActionRequest

			Instance Selection
				where (Company = PrmCompany
				and	   BatchNumber = PrmBatchNumber
				and	   IsValidForGenerate)

			Action Rules
				Instance Rules
					invoke GetStatus IDMJobRel
						invoked.PrmFromGenerateDocument = true

					if (IDMJobRel.Status.Finished
					and IDMJobRel.MDSID entered)
						IDMUniqueID = IDMJobRel.MDSID


		BatchSendInvoiceToPrinter is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmIDMPrinter		is an IDMPrinter
				PrmCompany			is a Company
				PrmBatchNumber		is like BatchNumber

			Instance Selection
				where ((PrmIDMPrinter entered
				or		IDMPrinter entered)
				and		Company = PrmCompany
				and		BatchNumber = PrmBatchNumber
				and		IsValidForIDMPrint)

			Action Rules
				Instance Rules
					if(PrmIDMPrinter entered)
						LocalIDMPrinter = PrmIDMPrinter
					else
						LocalIDMPrinter = IDMPrinter

					include IDMPrintBlock


		BatchSendInvoiceToEmail is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmCompany			is a Company
				PrmBatchNumber		is like BatchNumber

			Instance Selection
				where (Company = PrmCompany
				and	   BatchNumber = PrmBatchNumber
				and	   IsValidForIDMEmail)

			Action Rules
				Instance Rules

					initialize LocalRecipientEmailAddress
					initialize LocalFromAndReplyToEmail
					initialize LocalCcEmailAddress

					LocalRecipientEmailAddress  = DerivedToEmailAddress 
					LocalFromAndReplyToEmail 	= CompanyCustomerRel.ReceivableInvoiceFromAndReplyToEmail 
					LocalCcEmailAddress 		= DerivedCcEmailAddress 
					include IDMEmailBlock


		CreateAndSendReceivableInvoiceDocToIDM is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmIDMPrinter		is an IDMPrinter

			Parameter Rules
				PrmIDMPrinter
					default to IDMPrinter

			Action Rules
				if (CompanyCustomerRel.PrintReceivableInvoice)
					LocalIDMPrinter = PrmIDMPrinter

				include IDMGenerateBlock

				invoke CreateFromGenerateDocument IDMJob
					assign result to IDMJobView
					invoked.Actor				= actor
					invoked.Description			= IDMDescriptionMsg
					invoked.IDMGenerateDocument = IDMGenerateDocument

				IDMJob = IDMJobView.IDMJob

				invoke UpdateIDMUniqueID in background
					run after IDMJobView.AsyncId


		UpdateIDMUniqueID is an Instance Action
			default label is untranslatable
			restricted

			Action Rules
				if (IDMJobRel.Status.Finished
				and IDMJobRel.MDSID entered)
					IDMUniqueID = IDMJobRel.MDSID


		GenerateInvoice is an Instance Action
			valid when (IsValidForGenerate)

			Action Rules
				constraint (HasIDMDocumentTemplate)
					"CannotCreateDocument,NoTemplateDefinedForTheReceivableCompany"

				invoke CreateAndSendReceivableInvoiceDocToIDM in background


		SendInvoiceToPrinter is an Instance Action
			default label is "Print Invoice"
			valid when (IsValidForIDMPrint)
			Parameters
				PrmIDMPrinter		is an IDMPrinter
					default label is "IDM Printer"

			Parameter Rules
				PrmIDMPrinter
					initial value is IDMPrinter
					required

			Action Rules
				LocalIDMPrinter = PrmIDMPrinter
				include IDMPrintBlock


		SendInvoiceToEmail is an Instance Action
			valid when (IsValidForIDMManualEmail)
			disable multiple instance selection
			default label is "Email Invoice To Customer"
			Parameters
				PrmFrom is an EmailAddress
					default label is "From"
					holds pii
				PrmTo is like MultipleEmailAddress 
					default label is "To"
					holds pii
				PrmCc is like MultipleEmailAddress 
					default label is "Cc"
					holds pii
			Parameter Rules
				PrmFrom
					initial value is DerivedReceivableInvoiceFromAndReplyToEmail
					required
				PrmTo
					initial value is DerivedToEmailAddress
					required
				PrmCc
					initial value is DerivedCcEmailAddress

			Action Rules
				LocalFromAndReplyToEmail	 = PrmFrom
				LocalRecipientEmailAddress 	 = PrmTo
				LocalCcEmailAddress 		 = PrmCc

				include IDMEmailBlock


		TriggerReceivableInvoice is an Instance Action
			restricted
			Action Rules
				if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger)
					if (Status.Released)
						ActionCode = ActionCode.Update
						increment bod id.VariationID
						include TriggerReceivableInvoiceBOD






		TriggerReceivableTransaction is an Instance Action
			restricted
			Parameters
				PrmReceivableCompany		is a ReceivableCompany
				PrmReceivablePaymentHeader	is a ReceivablePaymentHeader
				PrmReceivablePayment		is a ReceivablePayment
			Entrance Rules
				LocalCompany				= PrmReceivableCompany
				LocalPaymentHeader			= PrmReceivablePaymentHeader
				LocalPayment				= PrmReceivablePayment
			Action Rules
				if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger)
					ActionCode = ActionCode.Update
					increment bod id.VariationID
					trigger PayablesService.ReceivableTransactionService PA service
						resume on error
						title is "EG:<Company.CustomerBusinessGroup.FinanceEnterpriseGroup>CO:<Company>INV:<ReceivableInvoice>RT:<ReceivableInvoiceType>"
						Criteria
							Company.CustomerBusinessGroup.FinanceEnterpriseGroup
							Company
						Variables
							include persistent fields from	ReceivableInvoice
							include persistent fields from	Company
							include persistent fields from	Customer
							include persistent fields from  ReceivableInvoiceDetailRel
							include persistent fields from  ReceivableApplicationAdjustmentRel
							include persistent fields from  ReceivableApplicationRel
							include persistent fields from  CustomerBillTo
							include persistent fields from  CompanyCustomerRel.CompanyCustomer.CustomerShipToRel.CustomerShipTo
							include persistent fields from  ReceivableGLDistributionRel
							include persistent fields from  Company.GeneralLedgerCompany
							include persistent fields from  ReceivablePaymentHeaderRel
							include persistent fields from  ReceivablePaymentHeader
							include persistent fields from  ReceivablePaymentRel
							include persistent fields from  ReceivablePayment
							include persistent fields from  Company.AccountingEntity
							ActionCode
							Company.FinanceEnterpriseGroup
								variable name is FinanceEnterpriseGroup
							PrmReceivablePayment.ReceivablePayment
								variable name is PaymentSequence
							PrmReceivablePayment.Status
								variable name is PaymentStatus
							sum OpenReceivableInvoiceDetailRel.AdjustAmount
								variable name is DiscountAmount
							Company.GeneralLedgerCompany.AccountingEntity
								variable name is AccountingEntity
							Company
								variable name is ReceivableCompany
							ReceivableApplicationPaymentsRel.ReceivableApplication.ApplicationSequence
								variable name is ApplicationSequence
							ReceivableGLDistributionDetailTypeRel.ReceivableGLDistribution.ReceivableGLDistribution
								variable name is ReceivableGLDistribution
							ReceivableApplicationPaymentsRel.ReceivableApplication.ApplicationSequence
								variable name is PaymentApplicationSequence
							TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
								variable name is TermsCodeDiscountPercent








		Create is a Create Action
			valid when (!ReceivableInvoiceBatchRel.BatchHasICBInvoices)
			completion message is "<CreationCompleteMessage>"

			Entrance Rules
				constraint (!ReceivableInvoiceBatchRel.BatchHasICBInvoices)
					"CreateIsNotAValidAction;BatchHas_\I\C\BInvoice"
				if (ReceivableInvoiceBatchRel exists
				and Status.Released
				and (Origin = "B"
				or  Origin = "M"))
					constraint (ReceivableInvoiceBatchRel.Status.Released)
						"CannotAddReleasedInvoiceToUnreleasedBatch"
				include MultiCurrencyProcessingEdit
				include CurrencyRateOverrideEdit

			Action Rules


				include CreateExitRules


				if (DoIntrastat)
					include CheckIntrastat

				if  (FromInterface entered)
					NextSentence = true
				else
					if (ReceivableInvoiceBatchRel.OriginalCurrency entered
					and ReceivableInvoiceBatchRel.Status.Unreleased)
						OriginalCurrency 									= ReceivableInvoiceBatchRel.OriginalCurrency
						if (TransactionDate != ReceivableInvoiceBatchRel.BatchDate)
							include RefreshCurrencyRates
						else
							if (InvoiceAmount.FunctionalAmount.EnteredCurrencyRate not entered)
								InvoiceAmount.FunctionalAmount.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.FunctionalAmount.EnteredCurrencyRate
							if (InvoiceAmount.AlternateAmount.EnteredCurrencyRate not entered)
								InvoiceAmount.AlternateAmount.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount.EnteredCurrencyRate
							if (InvoiceAmount.AlternateAmount2.EnteredCurrencyRate not entered)
								InvoiceAmount.AlternateAmount2.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount2.EnteredCurrencyRate
							if (InvoiceAmount.AlternateAmount3.EnteredCurrencyRate not entered)
								InvoiceAmount.AlternateAmount3.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount3.EnteredCurrencyRate
							if (InvoiceAmount.ReportAmount1.EnteredCurrencyRate not entered)
								InvoiceAmount.ReportAmount1.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount1.EnteredCurrencyRate
							if (InvoiceAmount.ReportAmount2.EnteredCurrencyRate not entered)
								InvoiceAmount.ReportAmount2.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount2.EnteredCurrencyRate
							if (InvoiceAmount.ReportAmount3.EnteredCurrencyRate not entered)
								InvoiceAmount.ReportAmount3.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount3.EnteredCurrencyRate
							if (InvoiceAmount.ReportAmount4.EnteredCurrencyRate not entered)
								InvoiceAmount.ReportAmount4.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount4.EnteredCurrencyRate
							if (InvoiceAmount.ReportAmount5.EnteredCurrencyRate not entered)
								InvoiceAmount.ReportAmount5.EnteredCurrencyRate = ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount5.EnteredCurrencyRate
						CurrencyDecimalsNumber								= ReceivableInvoiceBatchRel.CurrencyDecimalsNumber
						CurrencyMultiplicationOrDivision					= ReceivableInvoiceBatchRel.CurrencyMultiplicationOrDivision

			Exit Rules

				if (parentcontext.name != "SubSystemUpdate")
					include EditCrossReferenceData  
				if (ReceivableDistributionCategory entered)
					InvoiceEntryTemplate = InvoiceEntryTemplate.Standard
					invoke CreateManualInvoiceDistribution ReceivableGLDistributionRel
						invoked.FinanceEnterpriseGroup											= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.DistributionAmount.CurrencyAmount								= InvoiceAmount.CurrencyAmount
						invoked.ReceivableCompanyDataGroup.ReceivableDistributionCategory 		= ReceivableDistributionCategory
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel				= ReceivableProcessLevel

						invoked.ReceivableCompanyGroup.GlCompany								= ReceivableInvoice.Company
						invoked.Invoice															= ReceivableInvoice
						invoked.TransType														= ReceivableInvoiceType
						invoked.Origin															= "RI"

				if (Customer.CustomerGroup.IsApplicationSort)
					invoke Create ReceivableInvoiceUserSortRel
						fill in fields from this instance
						invoked.ReceivableInvoiceUserSort.TransType		= ReceivableInvoiceType
						invoked.ReceivableInvoiceUserSort.Invoice		= ReceivableInvoice
						invoked.ReceivableInvoiceUserSort.PaymentSeq	= blank


		CreateFromBatch is a Create Action
			completion message is "<CreationCompleteMessage>"
			restricted
			Action Rules
				InvoiceAmount.KeepRateAndAmount	= true
				invoke Create this instance


		SpeedEntry is a Create Action
			default label is "Create"
			completion message is "<CreationCompleteMessage>"
			valid when (!ReceivableInvoiceBatchRel.BatchHasICBInvoices)
			Field Rules
				SummarizeDetail
					default to Company.SummarizeMultiLineTransactions
				ReceivableDistributionCategory
					required

			Entrance Rules
				if (ReceivableInvoiceBatchRel exists
				and Status.Released
				and (Origin = "B"
				or  Origin = "M"))
					constraint (ReceivableInvoiceBatchRel.Status.Released)
						"CannotAddReleasedInvoiceToUnreleasedBatch"

			Action Rules

				include CreateExitRules
				if (DoIntrastat)
					include CheckIntrastat

				if (ReceivableInvoiceBatchRel.OriginalCurrency entered
				and ReceivableInvoiceBatchRel.Status.Unreleased)
					OriginalCurrency									= ReceivableInvoiceBatchRel.OriginalCurrency
					InvoiceAmount.FunctionalAmount.EnteredCurrencyRate	= ReceivableInvoiceBatchRel.BatchCurrencyRate.FunctionalAmount.EnteredCurrencyRate
					InvoiceAmount.AlternateAmount.EnteredCurrencyRate	= ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount.EnteredCurrencyRate
					InvoiceAmount.AlternateAmount2.EnteredCurrencyRate	= ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount2.EnteredCurrencyRate
					InvoiceAmount.AlternateAmount3.EnteredCurrencyRate	= ReceivableInvoiceBatchRel.BatchCurrencyRate.AlternateAmount3.EnteredCurrencyRate
					InvoiceAmount.ReportAmount1.EnteredCurrencyRate		= ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount1.EnteredCurrencyRate
					InvoiceAmount.ReportAmount2.EnteredCurrencyRate		= ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount2.EnteredCurrencyRate
					InvoiceAmount.ReportAmount3.EnteredCurrencyRate		= ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount3.EnteredCurrencyRate
					InvoiceAmount.ReportAmount4.EnteredCurrencyRate		= ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount4.EnteredCurrencyRate
					InvoiceAmount.ReportAmount5.EnteredCurrencyRate		= ReceivableInvoiceBatchRel.BatchCurrencyRate.ReportAmount5.EnteredCurrencyRate
					CurrencyDecimalsNumber								= ReceivableInvoiceBatchRel.CurrencyDecimalsNumber
					CurrencyMultiplicationOrDivision					= ReceivableInvoiceBatchRel.CurrencyMultiplicationOrDivision


			Exit Rules
				include EditCrossReferenceData  
				if (ReceivableDistributionCategory entered)
					InvoiceEntryTemplate = InvoiceEntryTemplate.Standard
					invoke CreateManualInvoiceDistribution ReceivableGLDistributionRel
						invoked.FinanceEnterpriseGroup											= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.DistributionAmount.CurrencyAmount								= InvoiceAmount.CurrencyAmount
						invoked.ReceivableCompanyDataGroup.ReceivableDistributionCategory 		= ReceivableDistributionCategory
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel				= ReceivableProcessLevel

						invoked.ReceivableCompanyGroup.GlCompany								= ReceivableInvoice.Company
						invoked.Invoice															= ReceivableInvoice
						invoked.TransType														= ReceivableInvoiceType
						invoked.Origin															= "RI"
						invoked.HSNSACCode														= TransientHSNSACCode

				if (Customer.CustomerGroup.IsApplicationSort)
					invoke Create ReceivableInvoiceUserSortRel
						fill in fields from this instance
						invoked.ReceivableInvoiceUserSort.TransType		= ReceivableInvoiceType
						invoked.ReceivableInvoiceUserSort.Invoice		= ReceivableInvoice
						invoked.ReceivableInvoiceUserSort.PaymentSeq	= blank


		InterfaceCreate is a Create Action
			restricted
			Action Rules
				include EditCrossReferenceData
				if (DoIntrastat)
					include CheckIntrastat
				if (Company.CurrencyRateOverride.No)
					include InitializeCurrencyAmountsAndRates


		Update is an Update Action
			valid when (UpdateIsValid)
			Entrance Rules
				constraint (UpdateIsValid)
					"UpdateIsNotAValidAction;InvoiceIsFrom_\I\C\B"
				if (Origin.ManualInvoice
				and IsUnreleased
				and HasReceivableGLDistributions
				and (DerivedReceivableGLDistributionAmount != TransientSignedTransactionAmount))
					confirmation required
						"TransactionChanged,DistributionsOutOfBalance"
				if (InvoiceAmount changed)
					constraint (!ReceivableGLDistributionRel exists)
						"CannotChangeAmountOrRate;DistributionsExist"

				if (InvoiceTypeCode not entered)
					if (CompanyCustomerInvoiceTypeCodesRel exists)
						InvoiceTypeCode	= first CustomerInvoiceTypeCodesRel.InvoiceTypeCode
						
					if (TermsCode not entered)
						TermsCode = first CustomerInvoiceTypeCodesRel.TermsCode

				if (InvoiceTypeCode entered)
					if (CompanyCustomerInvoiceTypeCodesRel exists)
						constraint (AnyCustomerInvoiceTypeCodeRel exists)
							"InvoiceTypeCodeNotFoundInCustomer'sInvoiceTypeCodes"
				if (IsOpenReceivableInvoiceDetail) 
					if (TermsCode changed)
						constraint (!ReceivableApplicationSelectRel exists)
							"CannotChangeTermsCode,ApplicationSelectionsExists"
						constraint (!ReceivableApplicationRel exists)
							"CannotChangeTermsCode,ApplicationsExists"
						if (OpenProjectReceivableDetailRecords)	
							constraint (false)
								"CannotChangeTermsCodeForInvoiceWithProjectBasedReceivableInvoiceDetailRecords.IfCompanyDueDateChangeAllowed;UseUpdateDueDateActionInReceivableInvoiceDetailListToChangeDueDate."
						constraint (ReceivableInvoiceType   != "M")
							"CannotChangeTermsCodeIfMixedSignedType"
						if (any ReceivableInvoiceDetailRel.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount entered
						or  any ReceivableInvoiceDetailRel.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount entered)
							constraint (false)
								"CannotChangeTerms;Application/adjustmentsExist"		
						if (any ReceivableInvoiceDetailRel.EFTNotification >1 )
							constraint (false)
								"CannotChangeTerms;_\E\F\TProcessingInProgress"		 
						if (!Company.TransactionDueDateChangeAllowed)
							constraint (false)
								"CannotChangeTermsCodeWhichWillChangeDueDate;DueDateChangeAllowedRuleNotCheckedForCompany"	


			Action Rules
				if (Status.Unreleased)
					include RefreshCurrencyAmounts

				include EditCrossReferenceData
				include CurrencyRateOverrideEdit

				if  (DoIntrastat
				and (OriginIntrastatCountry changed
				or   OriginIntrastatRegion changed
				or   DestinationIntrastatCountry changed
				or   DestinationIntrastatRegion changed))
					include CheckIntrastat



				if (Status.Unreleased)
					if (TransactionDate changed)
						for each ReceivableGLDistributionProjectRel
							invoke Update each
								invoked.ReceivableGLDistribution.TransactionDate					= TransactionDate
								invoked.DistributionAmount.ExchangeDate								= TransactionDate
								invoked.DistributionAmount.CurrencyAmount							= each.DistributionAmount.CurrencyAmount
								invoked.OriginalCurrency										 	= each.OriginalCurrency
								invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate		= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
								invoked.DistributionAmount.AlternateAmount.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount.EnteredCurrencyRate
								invoked.DistributionAmount.AlternateAmount2.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount2.EnteredCurrencyRate
								invoked.DistributionAmount.AlternateAmount3.EnteredCurrencyRate		= InvoiceAmount.AlternateAmount3.EnteredCurrencyRate
								invoked.DistributionAmount.ToFunctionalAmount.EnteredCurrencyRate 	= InvoiceAmount.ToFunctionalAmount.EnteredCurrencyRate
								invoked.DistributionAmount.ToAlternateAmount.EnteredCurrencyRate  	= InvoiceAmount.ToAlternateAmount.EnteredCurrencyRate
								invoked.DistributionAmount.ToAlternateAmount2.EnteredCurrencyRate 	= InvoiceAmount.ToAlternateAmount2.EnteredCurrencyRate
								invoked.DistributionAmount.ToAlternateAmount3.EnteredCurrencyRate 	= InvoiceAmount.ToAlternateAmount3.EnteredCurrencyRate
								invoked.DistributionAmount.ProjectAmount.EnteredCurrencyRate	  	= InvoiceAmount.ProjectAmount.EnteredCurrencyRate
								invoked.DistributionAmount.ReportAmount1.EnteredCurrencyRate		= InvoiceAmount.ReportAmount1.EnteredCurrencyRate
								invoked.DistributionAmount.ReportAmount2.EnteredCurrencyRate		= InvoiceAmount.ReportAmount2.EnteredCurrencyRate
								invoked.DistributionAmount.ReportAmount3.EnteredCurrencyRate		= InvoiceAmount.ReportAmount3.EnteredCurrencyRate
								invoked.DistributionAmount.ReportAmount4.EnteredCurrencyRate		= InvoiceAmount.ReportAmount4.EnteredCurrencyRate
								invoked.DistributionAmount.ReportAmount5.EnteredCurrencyRate		= InvoiceAmount.ReportAmount5.EnteredCurrencyRate
								if (GeneralLedgerDate changed)
									invoked.ReceivableGLDistribution.GeneralLedgerDate					= GeneralLedgerDate
									invoked.ReceivableGLDistribution.CreateDate							= current timestamp
					else
						include UpdateDistributionsGLDate
				else
					include UpdateDistributionsGLDate

				if (InvoiceTypeCode changed
				and InvoiceTypeCode != old InvoiceTypeCode)
					confirmation required
						"ChangingInvoiceTypeCodeMayChangePaymentTerms;Proceed?"

					if (InvoiceTypeCode entered)
						if (CustomerInvoiceTypeCodeRel.TermsCode entered
						and TermsCode not changed)
							TermsCode	= CustomerInvoiceTypeCodeRel.TermsCode
						else
						if (InvoiceTypeCode.TermsCode entered
						and TermsCode not changed)
							TermsCode	= InvoiceTypeCode.TermsCode


				if (Status = 1
				and	TermsCode changed
				and !ZeroAmountInvoice)
					for each ReceivableInvoiceDetailRel
						invoke Delete each.ParentNationalAccountTransactionRel
						invoke Delete each.ChildNationalAccountTransactionRel
					invoke Delete ReceivableInvoiceDetailRel
					initialize CalculateTerms

					CalculateTerms.TransactionDate = TransactionDate
					CalculateTerms.TransactionAmount = InvoiceAmount.CurrencyAmount

					LocalTermsCalTrigger = CalculateTerms.TermsCalTrigger
					constraint (CalculateTerms.OutputErrorNumber not entered)
						"<CalculateTerms.OutputErrorMessage>"

					LoopCounter = 1

					while (LoopCounter <= 99
					and	CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered)
						invoke Create ReceivableInvoiceDetail
							fill in fields from this instance
							fill in user fields from this instance
							if (ReceivableInvoiceType = "I")
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "I"
							if (ReceivableInvoiceType = "D")
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
							if (ReceivableInvoiceType = "C")
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"
							invoked.ReceivableInvoiceDetail.Invoice						= ReceivableInvoice
							invoked.AlternateReceivableInvoiceType						= ReceivableInvoiceType
							invoked.Status												= 1
							invoked.CurrencyRate										= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
							invoked.DueDate 											= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].DueDate
							invoked.InvoiceAmount.CurrencyAmount						= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment
							if (LoopCounter = 	1)
								invoked.DiscountDate.DiscDate[1]							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountDate
								invoked.DiscountPercent.DiscPct[1] 							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[1].DiscountPercent
								invoked.DiscountDate.DiscDate[2]							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountDate
								invoked.DiscountPercent.DiscPct[2] 							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[2].DiscountPercent
								invoked.DiscountDate.DiscDate[3]							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountDate
								invoked.DiscountPercent.DiscPct[3] 							= CalculateTerms.CalculateTermsTable.CalculateTermsOutput[3].DiscountPercent
							if (TermsCode changed
							and GeneralLedgerDate not changed)
								invoked.BypassGLDateEdit								= true



						increment LoopCounter


				if (TransientSort1 entered)
					invoke Update ReceivableInvoiceUserSortRel
						invoked.Sort1 = TransientSort1
				if (TransientSort2 entered)
					invoke Update ReceivableInvoiceUserSortRel
						invoked.Sort2 = TransientSort2
				if (TransientSort3 entered)
					invoke Update ReceivableInvoiceUserSortRel
						invoked.Sort3 = TransientSort3
				if (TransientSort4 entered)
					invoke Update ReceivableInvoiceUserSortRel
						invoked.Sort4 = TransientSort4

				if (Status.Released)
					constraint (InvoiceEntryTemplate not changed)
						"Invoice_\Entry_\TemplateCannotBeChangedOnceTheInvoiceHasBeenReleased"
				else
				if (Status.Unreleased
				and InvoiceEntryTemplate changed)
					if (InvoiceEntryTemplate.Standard
					and old InvoiceEntryTemplate.Expanded)
						if (ReceivableInvoiceLine set exists
						or  ReceivableInvoiceAddOnCharge set exists)
							confirmation required
								"ExistingLinesAndAddOnChargesWillBeDeleted.Continue?"
						invoke Delete ReceivableGLDistributionRel
						invoke FastDelete ReceivableInvoiceLine set
						invoke FastDelete ReceivableInvoiceAddOnCharge set
						TransientSignedTransactionAmount = 0
					else
					if (InvoiceEntryTemplate.Expanded
					and old InvoiceEntryTemplate.Standard)
						if (ReceivableGLDistributionRel exists
						or  ReceivableInvoiceLineItemRel exists)
							confirmation required
								"ExistingDistributionsAndLineItemsWillBeDeleted.Continue?"
						invoke Delete ReceivableGLDistributionRel
						invoke Delete ReceivableInvoiceLineItemRel
						TransientSignedTransactionAmount = 0

			Exit Rules




		CreateDetailFromTerms is an Instance Action

			run in background
			restricted

			Action Rules
				if (InvoiceEntryTemplate.Expanded)
					invoke CreateInvoiceDetailsForExpandedInvoiceEntryTemplate
				else


					if (!HasLineItems)


						if  (ReceivableInvoiceDetailRel exists)
							if (CompanyCustomerRel.NationalAccountIndicator entered)
								for each ReceivableInvoiceDetailRel
									invoke Delete each.NationalAccountTransactionRel
							invoke Delete ReceivableInvoiceDetailRel

						include EditTermsData

						LoopCounter = 1

						while (LoopCounter <= 99
						and	CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered)

							include CreateDetailFromTermsArray
							increment LoopCounter


							if  (LoopCounter = 20
							or   LoopCounter = 40
							or   LoopCounter = 60
							or   LoopCounter = 80)

								commit transaction

					else




						for each ReceivableInvoiceLineItemRel

							LocalLineItemAmount = each.TransactionAmount
							include EditTermsData

							LoopCounter = 1
							while (LoopCounter <= 99
							and	CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered) 


								include CreateDetailFromLineItemTermsArray
								increment LoopCounter

								if  (LoopCounter = 20
								or   LoopCounter = 40
								or   LoopCounter = 60
								or   LoopCounter = 80)

									commit transaction

							invoke Delete each

				invoke TriggerReceivableInvoice
				invoke TriggerReceivableTransaction
				
				if  (IsValidForGenerateIDMDocumentUponRelease)
					invoke CreateAndSendReceivableInvoiceDocToIDM in background







		CreateInvoiceDetailsForExpandedInvoiceEntryTemplate is an Instance Action
			restricted
			Action Rules
				initialize LocalRecordCount
				if  (ReceivableInvoiceDetailRel exists)
					for each ReceivableInvoiceDetailRel
						invoke Delete each.NationalAccountTransactionRel
						invoke Delete each
						if (LocalRecordCount = 50)
							commit transaction
							initialize LocalRecordCount
						LocalRecordCount += 1

				if (Company.CreateInvoiceDetailsPerLine)
					if (ReceivableGLDistributionWithProjectRel exists)
						for each ReceivableInvoiceLine set

							initialize LocalLineItemAmount
							for each each.ReceivableGLDistributionProjectEnteredRel
								LocalLineItemAmount += each.DistributionAmount.CurrencyAmount
							if (not AlternateReceivableInvoiceType.CreditMemo)
								LocalLineItemAmount *= -1

							if (LocalLineItemAmount entered)
								LocalFinanceDimension2			= each.FinanceDimension2
								LocalProjectValue				= each.Project
								LocalProjectContract			= each.ProjectContract
								include CreateDetailFromReceivableInvoiceLineTermsArray

							initialize LocalLineItemAmount
							for each each.ReceivableGLDistributionProjectNotEnteredRel
								LocalLineItemAmount += each.DistributionAmount.CurrencyAmount
							if (not AlternateReceivableInvoiceType.CreditMemo)
								LocalLineItemAmount *= -1

							if (LocalLineItemAmount entered)
								initialize LocalFinanceDimension2
								initialize LocalProjectValue
								initialize LocalProjectContract
								include CreateDetailFromReceivableInvoiceLineTermsArray

						for each ReceivableInvoiceAddOnCharge set
							
							initialize LocalLineItemAmount
							for each each.ReceivableGLDistributionProjectEnteredRel
								LocalLineItemAmount += each.DistributionAmount.CurrencyAmount
							if (not AlternateReceivableInvoiceType.CreditMemo)
								LocalLineItemAmount *= -1

							if (LocalLineItemAmount entered)
								LocalFinanceDimension2			= each.FinanceDimension2
								LocalProjectValue				= each.Project
								LocalProjectContract			= each.ProjectContract
								include CreateDetailFromReceivableInvoiceAddOnChargeTermsArray

							initialize LocalLineItemAmount
							for each each.ReceivableGLDistributionProjectNotEnteredRel
								LocalLineItemAmount += each.DistributionAmount.CurrencyAmount
							if (not AlternateReceivableInvoiceType.CreditMemo)
								LocalLineItemAmount *= -1

							if (LocalLineItemAmount entered)
								initialize LocalFinanceDimension2
								initialize LocalProjectValue
								initialize LocalProjectContract
								include CreateDetailFromReceivableInvoiceAddOnChargeTermsArray
					else
						initialize LocalFinanceDimension2
						initialize LocalProjectValue
						initialize LocalProjectContract
						for each ReceivableInvoiceLine set
							if (each.FlipAmounts)
								LocalLineItemAmount = each.TotalAmount * -1
							else
								LocalLineItemAmount = each.TotalAmount
							include CreateDetailFromReceivableInvoiceLineTermsArray

						for each ReceivableInvoiceAddOnCharge set
							if (each.FlipAmounts)
								LocalLineItemAmount = each.TotalAmount * -1
							else
								LocalLineItemAmount = each.TotalAmount
							include CreateDetailFromReceivableInvoiceAddOnChargeTermsArray
				else
					include EditTermsData

					LoopCounter = 1
					while (LoopCounter <= 99
					and	CalculateTerms.CalculateTermsTable.CalculateTermsOutput[LoopCounter].MultiplePayment entered)
						include CreateDetailFromTermsArray
						increment LoopCounter

						if (LocalRecordCount = 50)
							commit transaction
							initialize LocalRecordCount
						LocalRecordCount += 1


		CreateInterfacedHistoricalInvoiceAccrualDistributionsForDetailedFinanceStructure is an Instance Action
			restricted
			default label is untranslatable
			Action Rules
				if (Company.DetailedInvoiceAccrualDistributions
				and FromInterface
				and !ZeroAmountInvoice
				and ReceivableInvoiceDetailRel exists)
					initialize LocalSumLineItemAmounts
					LocalLastLineItem = last ReceivableInvoiceDetailRel.ReceivableInvoiceDetail.PaymentSeq
					for each ReceivableInvoiceDetailRel
						initialize LocalNewReceivableGLDistribution
						invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
							assign result to LocalNewReceivableGLDistribution
							invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
							invoked.ReceivableCompanyGroup.GlCompany				= Company
							invoked.GeneralLedgerDate								= GeneralLedgerDate
							if (each.InvoiceFinanceCodeBlock entered)
								invoked.GeneralLedgerAccount						= each.InvoiceFinanceCodeBlock
							else
								invoked.GeneralLedgerAccount						= ReceivableGeneralLedgerCodeRel.DistributionAccount
							if (IsInvoiceIdentity)
								invoked.Origin										= "RI"
							else
								invoked.Origin										= "RM"
							invoked.DistributionAmount.CurrencyAmount			    = each.SignedTransactionAmount							
							invoked.Description										= "Batch " + BatchNumber + ", " + ReceivableInvoiceType + " " + ReceivableInvoice
							invoked.BypassStructureRelationEdit						= true
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableProcessLevel
							invoked.GeneralLedgerDate		                        = GeneralLedgerDate
							invoked.TransactionDate									= TransactionDate
							invoked.BatchNumber										= BatchNumber
							invoked.ReceivableCompanyDataGroup.Customer				= Customer
							invoked.Invoice											= ReceivableInvoice
							invoked.TransType										= ReceivableInvoiceType	
							invoked.OriginalCurrency								= OriginalCurrency	
							invoked.AccumulationType								= "S"
							invoked.BypassStatusEdit								= true
							invoked.Status											= 9
						
						LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.FunctionalAmount.EnteredCurrencyAmount
						LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount.EnteredCurrencyAmount
						LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount2.EnteredCurrencyAmount
						LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.AlternateAmount3.EnteredCurrencyAmount
						LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount1.EnteredCurrencyAmount
						LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount2.EnteredCurrencyAmount
						LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount3.EnteredCurrencyAmount
						LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount4.EnteredCurrencyAmount
						LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount 		+= LocalNewReceivableGLDistribution.DistributionAmount.ReportAmount5.EnteredCurrencyAmount

						if (each.ReceivableInvoiceDetail.PaymentSeq = LocalLastLineItem)
							invoke RoundingUpdate LocalNewReceivableGLDistribution
								if (IsDebitIdentity)
									invoked.RoundAmount.FunctionalAmount	= ((InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.AlternateAmount		= ((InvoiceAmount.AlternateAmount.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.AlternateAmount2	= ((InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.AlternateAmount3	= ((InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount 		- LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.ReportAmount1		= ((InvoiceAmount.ReportAmount1.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.ReportAmount2		= ((InvoiceAmount.ReportAmount2.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.ReportAmount3		= ((InvoiceAmount.ReportAmount3.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.ReportAmount4		= ((InvoiceAmount.ReportAmount4.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.ReportAmount5		= ((InvoiceAmount.ReportAmount5.EnteredCurrencyAmount 			- LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount) * -1)
								else
									invoked.RoundAmount.FunctionalAmount	= (((InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.FunctionalAmount.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.AlternateAmount		= (((InvoiceAmount.AlternateAmount.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.AlternateAmount.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.AlternateAmount2	= (((InvoiceAmount.AlternateAmount2.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.AlternateAmount2.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.AlternateAmount3	= (((InvoiceAmount.AlternateAmount3.EnteredCurrencyAmount * -1) - LocalSumLineItemAmounts.AlternateAmount3.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.ReportAmount1		= (((InvoiceAmount.ReportAmount1.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount1.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.ReportAmount2		= (((InvoiceAmount.ReportAmount2.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount2.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.ReportAmount3		= (((InvoiceAmount.ReportAmount3.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount3.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.ReportAmount4		= (((InvoiceAmount.ReportAmount4.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount4.EnteredCurrencyAmount) * -1)
									invoked.RoundAmount.ReportAmount5		= (((InvoiceAmount.ReportAmount5.EnteredCurrencyAmount * -1) 	- LocalSumLineItemAmounts.ReportAmount5.EnteredCurrencyAmount) * -1)


		UpdateBODIdFields is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity  is Alpha size 22
					default label is "AccountingEntity"
				PrmLocation		  is Alpha size 22
					default label is "Location"
				PrmDocumentID		is Alpha size 100
					default label is "DocumentID"
				PrmRevision		  is Alpha size 22
					default label is "Revision"
				PrmSystemOfRecord	is Alpha size 1
					default label is "SystemOfRecord"


			Action Rules
				if (bod id.AccountingEntity != PrmAccountingEntity)
					bod id.AccountingEntity	= PrmAccountingEntity
				if (bod id.Location != PrmLocation)
					bod id.Location				= PrmLocation
				if (bod id.DocumentID != PrmDocumentID)
					bod id.DocumentID			= PrmDocumentID
				if (bod id.Revision != PrmRevision)
					bod id.Revision				= PrmRevision
				if (bod id.SystemOfRecord != PrmSystemOfRecord)
					bod id.SystemOfRecord		= PrmSystemOfRecord


		FastUpdate is an Update Action
			restricted
			bypass field rules

			Action Rules










				if (Status.Unreleased)
					TaxAmount = DerivedTaxAmount

				if (invoking action = "ReceivableInvoiceImport.ConvertInvoices")
					include RefreshCurrenciesForConvertInvoices


		ValidateReleaseErrors is an Instance Action
			restricted
			Local Fields
				CanBeReleased is Boolean
			Action Rules
				CanBeReleased = true
				if (IsReceivableGLDistributionRelNotBal)
					CanBeReleased = false
			Exit Rules
				if (CanBeReleased)
					ErrorMessage = blank


		Delete is a Delete Action
			valid when (DeleteIsValid)
			confirmation required
				"TransactionAndAllDependentRecordsWillBeDeleted;PressEnterToDelete"
			Action Rules
				constraint (IsUnreleased)
					"CannotDeleteReleasedTransaction"
				constraint (!Origin.IntercompanyBilling)
					"CannotDelete;InvoiceIsFrom_\I\C\B"
				invoke Delete ReceivableInvoiceObligationRel
				invoke Delete ReceivableGLDistributionRel
				invoke Delete ReceivableInvoiceLineItemRel
				invoke Delete ReceivableInvoiceUserSortRel


		CreateReceivableInvoicePendingObligations is an Instance Action
			valid when (IsReleasedAndObligationsNotExist)
			completion message is "CreationOfReceivableInvoicePendingObligationsComplete"




			Entrance Rules
				constraint (!any ReceivableInvoiceDetailRel.PortalPaymentSelected)	
					"PaymentExists.ObligationsCannotBeCreated"
				constraint (Company.TransactionDueDateChangeAllowed)	
					"CannotCreateReceivableInvoicePendingObligationsWhichMayChangeDueDate;DueDateChangeAllowedRuleNotCheckedForCompany"
				constraint (!OpenProjectReceivableDetailRecords)			  
					"ProjectBasedReceivableInvoiceDetailExist;PendingObligationsCannotBeCreated.IfCompanyDueDateChangeAllowed;UseUpdateDueDateActionInReceivableInvoiceDetailListToChangeDueDate."


			Action Rules
				for each OpenReceivableInvoiceDetailRel
					invoke Create ReceivableInvoiceObligation
						fill in fields from each
						invoked.Company					= Company
						invoked.ReceivableInvoiceType	= ReceivableInvoiceType
						invoked.ReceivableInvoice		= ReceivableInvoice
						invoked.Origin					= Origin.Obligation
						invoked.TransactionAmount		= each.InvoiceAmount.CurrencyAmount
						invoked.BaseAmount				= each.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.AppliedAmount			= each.ApplicationAmount.CurrencyAmount
						invoked.BaseAppliedAmount		= each.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.AdjustAmount			= each.AdjustmentAmount.CurrencyAmount
						invoked.BaseAdjustAmount		= each.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount


		CreateInvoiceDetailFromPendingObligations is an Instance Action
			valid when (IsReceivableInvoiceObligation)
			completion message is "NewInvoiceDetailCreated"
			Entrance Rules
				constraint (!any ReceivableInvoiceDetailRel.PortalPaymentSelected)	
					"PaymentExists.ObligationsCannotBeCreated"
				if (first ReceivableInvoiceObligationRel.DueDate != all ReceivableInvoiceObligationRel.DueDate)
					constraint (SummarizeDetail != "Y")
						"IfSummarizeDetailForDisplay,AllObligationDueDatesMustBeTheSame"
				constraint (sum ReceivableInvoiceObligationRel.TransactionAmount = sum OpenReceivableInvoiceDetailRel.InvoiceAmount.CurrencyAmount)
					"SumOfPendingObligationTransactionAmountMustEqualSumOfOpenInvoiceDetailTransactionAmount"





			Action Rules
				if (TermsCode not changed)
					invoke Delete OpenReceivableInvoiceDetailRel

					for each ReceivableInvoiceObligationRel
						invoke Create ReceivableInvoiceDetail
							fill in fields from each
							fill in user fields from this instance
							invoked.ReceivableInvoiceDetail.Company								 = ReceivableInvoice.Company
							if (ReceivableInvoice.ReceivableInvoiceType = "I")
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "I"
							if (ReceivableInvoice.ReceivableInvoiceType = "D")
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "D"
							if (ReceivableInvoice.ReceivableInvoiceType = "C")
								invoked.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	= "C"
							invoked.ReceivableInvoiceDetail.Invoice								 = ReceivableInvoice
							invoked.CurrencyRate												 = InvoiceAmount.FunctionalAmount.EnteredCurrencyRate
							invoked.InvoiceAmount.CurrencyAmount								 = each.TransactionAmount
							invoked.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount		 = each.BaseAmount
							invoked.ApplicationAmount.CurrencyAmount							 = each.AppliedAmount
							invoked.ApplicationAmount.FunctionalAmount.EnteredCurrencyAmount	 = each.BaseAppliedAmount
							invoked.AdjustmentAmount.CurrencyAmount								 = each.AdjustAmount
							invoked.AdjustmentAmount.FunctionalAmount.EnteredCurrencyAmount		 = each.BaseAdjustAmount
							invoked.BypassGLDateEdit											 = true


						invoke Delete each

		UpdateCrossReferenceInvoiceFromICB is an Instance Action 
			restricted
			Parameters
				PrmCrossReferenceType				is AlphaUpper size 1
				PrmCrossReferenceInvoice			is a XrefNbr
				PrmCrossReferenceAutoApply			is Boolean
			Action Rules
				if (PrmCrossReferenceInvoice not entered)
					ReceivableCrossReference.Company					= blank
					ReceivableCrossReference.Customer					= blank

				ReceivableCrossReference.ReceivableInvoiceType		= PrmCrossReferenceType
				ReceivableCrossReference.ReceivableInvoice			= PrmCrossReferenceInvoice
				AutomaticCashApplication							= PrmCrossReferenceAutoApply

				include EditCrossReferenceData

		CreateDispute is an Instance Action
			valid when (IsDisputeEligible)
			completion message is "DisputeCreated"

			Parameters
				PrmDisputeAmount	is an UnsignedInternationalAmount
					default label is "DisputeAmount"
				PrmDisputeCode		is a ReceivableInvoiceDisputeCode
					default label is "DisputeCode"
				PrmDisputeDate		is Date
					default label is "DisputeDate"
				PrmDescription		is a Description
					default label is "Description"

			Parameter Rules
				PrmDisputeAmount
					required
				PrmDisputeCode
					required
				PrmDisputeDate
					required
				PrmDescription

			Local Fields
				LocalDisputeAmount								is an InternationalAmount
				LocalOpenAmount									is an InternationalAmount
				LocalAllowedDisputeAmount						is an InternationalAmount


			Entrance Rules
				LocalOpenAmount = (InvoiceAmount.CurrencyAmount - sum ReceivableInvoiceDisputeRel.DisputedAmount)
				constraint (PrmDisputeAmount <= LocalOpenAmount)
					"DisputeAmountMustBeLessThanOrEqualToTheSumOfOpenInvoiceDetailTransactionAmounts"
				constraint (PrmDisputeDate >= TransactionDate)
					"DisputeDateCannotBeLessThanTransactionDate"
				constraint (!any ReceivableInvoiceDetailRel.PortalPaymentSelected)	
					"PaymentExists.DisputeCannotBeCreated"
			Action Rules
				LocalDisputeAmount = PrmDisputeAmount

				for each ReceivableInvoiceDetailRel
					LocalOpenAmount = each.DerivedOpenAmountLessDispute

					if (LocalOpenAmount > 0)
						if (LocalDisputeAmount <= LocalOpenAmount)
							invoke CreateDisputeFromReceivableInvoice each
								invoked.PrmInvoiceDisputeAmount	= LocalDisputeAmount
								invoked.PrmDisputeCode			= PrmDisputeCode
								invoked.PrmDisputeDate			= PrmDisputeDate
								invoked.PrmDescription			= PrmDescription
							LocalDisputeAmount = 0
						else
							LocalAllowedDisputeAmount = LocalOpenAmount
							invoke CreateDisputeFromReceivableInvoice each
								invoked.PrmInvoiceDisputeAmount	= LocalAllowedDisputeAmount
								invoked.PrmDisputeCode			= PrmDisputeCode
								invoked.PrmDisputeDate			= PrmDisputeDate
								invoked.PrmDescription			= PrmDescription
							LocalDisputeAmount -= LocalAllowedDisputeAmount

					if (LocalDisputeAmount <= 0)
						end for each


		ReleaseSet is a Set Action
			restricted
			Parameters
				PrmCompany			is a ReceivableCompany
				PrmBatchNumber		is a BatchNumber
				PrmCallOneSource	is Boolean

			Local Fields
				LocalErrorOccurred		is Boolean
				LocalErrorMessage		is Alpha 150
				LocalErrorCount			is Numeric 8

			Instance Selection
				where (Company	= PrmCompany
				and	BatchNumber = PrmBatchNumber
				and	IsUnreleased
				and   (Origin.ManualInvoice
				or	 Origin.ManualMemo))

			Action Rules
				Set Rules
					Entrance Rules
						initialize LocalErrorCount
						LReleaseSetCompany	= PrmCompany
						LReleaseSetBatchNbr = PrmBatchNumber

					Exit Rules
						LReleaseSetCompany	= PrmCompany
						LReleaseSetBatchNbr = PrmBatchNumber
						if (LocalErrorCount > 0)
							invoke FastUpdate ReceivableInvoiceReleaseBatchRel
								invoked.BackgroundProcessing = 1
						else
							invoke MakeTransitionToRelease ReceivableInvoiceReleaseBatchRel

				Instance Rules
					initialize LocalErrorOccurred
					initialize LocalErrorMessage

					if (CallVertexByTransaction)
						if (ErrorMessage entered)
							LocalErrorCount	= LocalErrorCount + 1
						else
							invoke Release
								resume on error
									LocalErrorOccurred	= true
									LocalErrorMessage	= error message
									LocalErrorCount	= LocalErrorCount + 1
							if(LocalErrorOccurred)
								invoke FastUpdate
									if (LocalErrorMessage != blank)
										invoked.ErrorMessage	= LocalErrorMessage
									else
										invoked.ErrorMessage	= "ERROR"
					else
					if (TaxEntityUsesOneSource)
						if (PrmCallOneSource)
							if (!ErrorMessage entered)

								invoke EditReceivableInvoiceForOneSource
									resume on error
										LocalErrorOccurred	= true
										LocalErrorMessage	= error message
										LocalErrorCount	= LocalErrorCount + 1

								if (!LocalErrorOccurred)
									invoke Release
										resume on error
											LocalErrorOccurred	= true
											LocalErrorMessage	= error message
											LocalErrorCount	= LocalErrorCount + 1

								if(LocalErrorOccurred)
									invoke FastUpdate
										if (LocalErrorMessage != blank)
											invoked.ErrorMessage	= LocalErrorMessage
										else
											invoked.ErrorMessage	= "ERROR"
							else
								LocalErrorCount	= LocalErrorCount + 1
						else
							invoke Release
								resume on error
									LocalErrorOccurred	= true
									LocalErrorMessage	= error message
									LocalErrorCount	= LocalErrorCount + 1

							if(LocalErrorOccurred)
								invoke FastUpdate
									if (LocalErrorMessage != blank)
										invoked.ErrorMessage	= LocalErrorMessage
									else
										invoked.ErrorMessage	= "ERROR"
					else
						invoke Release
							resume on error
								LocalErrorOccurred	= true
								LocalErrorMessage	= error message
								LocalErrorCount	= LocalErrorCount + 1
						if(LocalErrorOccurred)
							invoke FastUpdate
								if (LocalErrorMessage != blank)
									invoked.ErrorMessage	= LocalErrorMessage
								else
									invoked.ErrorMessage	= "ERROR"


		DeriveLineAndAddOnChargeTaxAmounts is an Instance Action
			restricted
			Action Rules
				if  (InvoiceEntryTemplate.Expanded
				and (TaxEntityUsesOneSource
				or   CallVertexByTransaction))
					invoke DeriveTaxAmounts ReceivableInvoiceLine set
					invoke DeriveTaxAmounts ReceivableInvoiceAddOnCharge set
					invoke Update
						invoked.TransientSignedTransactionAmount = ForceRefreshDerivedExpandedInvoiceEntryTemplateTotalAmount


		VertexCreateTaxLineItemsForTransaction is a Set Action
			restricted
			default label is untranslatable
			Parameters
				PrmCompany			        is a ReceivableCompany
				PrmBatchNumber		        is a BatchNumber
				PrmReceivableInvoiceType    is like ReceivableInvoiceType
				PrmReceivableInvoice        is like ReceivableInvoice
				PrmReleaseBatch				is Boolean

			Instance Selection
				where (Company	= PrmCompany
				and	   BatchNumber = PrmBatchNumber
				and	   IsUnreleased
				and   (Origin.ManualInvoice
				or	   Origin.ManualMemo)
				and   (PrmReceivableInvoiceType not entered
				or     ReceivableInvoiceType = PrmReceivableInvoiceType)
				and   (PrmReceivableInvoice not entered
				or     ReceivableInvoice = PrmReceivableInvoice))

			Action Rules
				Set Rules
					Exit Rules
						invoke VertexProcessManualInvoicesForTransaction ReceivableInvoice
							invoked.PrmCompany	 	                = PrmCompany
							invoked.PrmBatchNumber 	                = PrmBatchNumber
							invoked.PrmReceivableInvoiceType	    = ReceivableInvoiceType
							invoked.PrmReceivableInvoice            = ReceivableInvoice
							invoked.PrmReleaseBatch					= PrmReleaseBatch
						
				Instance Rules
					ErrorMessage = blank
					if (HasVertexSourceOfLinkedTaxDistributions)
						invoke ResetSourceOfLinkedTaxDistributions LinkedTaxGroupSourceOfLinkedTaxDistributionRel
					if (HasVertexTaxableDistributions)
						invoke CreateTaxLineItem LinkedTaxGroupTaxableDistributionsRel


		VertexProcessManualInvoicesForTransaction is a Set Action
   			restricted
			default label is untranslatable
			Parameters
				PrmCompany			        is a ReceivableCompany
				PrmBatchNumber		        is a BatchNumber
				PrmReceivableInvoiceType    is like ReceivableInvoiceType
				PrmReceivableInvoice        is like ReceivableInvoice
				PrmReleaseBatch				is Boolean

			Local Fields
				LocalErrorOccurred			is Boolean

			Instance Selection
				where (Company	= PrmCompany
				and	   BatchNumber = PrmBatchNumber
				and	   IsUnreleased
				and   (Origin.ManualInvoice
				or	   Origin.ManualMemo)
				and   (PrmReceivableInvoiceType not entered
				or     ReceivableInvoiceType = PrmReceivableInvoiceType)
				and   (PrmReceivableInvoice not entered
				or     ReceivableInvoice = PrmReceivableInvoice))

			Action Rules
			
				Set Rules
					Exit Rules
						if (PrmReleaseBatch)
							invoke ReleaseSet ReceivableInvoice
							    invoked.PrmCompany	 		= PrmCompany
							    invoked.PrmBatchNumber 		= PrmBatchNumber
						
				Instance Rules
					if (HasVertexTaxableDistributions)
						initialize LocalErrorOccurred

						invoke CallVertex
							resume on error
								LocalErrorOccurred				= true
								ErrorMessage					= error message

						initialize LocalLastDistributionSequence
						initialize LocalTaxableDistributions

						if (!LocalErrorOccurred)
							for each LinkedTaxGroupTaxableDistributionsRel
								invoke VertexProcessDistributionForTax each
									resume on error
										LocalErrorOccurred				= true
										ErrorMessage					= error message
								LocalTaxableDistributions 		+= 1
								LocalLastDistributionSequence	= each.LastDistributionSequence

							if (InvoiceEntryTemplate.Expanded)
								invoke DeriveLineAndAddOnChargeTaxAmounts

							if (!LocalErrorOccurred
							and  PrmReleaseBatch)
								invoke VertexRoundLastTaxableDistribution
									resume on error
										LocalErrorOccurred				= true
										ErrorMessage					= error message
									invoked.PrmNumberOfTaxableDistributions		= LocalTaxableDistributions
									invoked.PrmDistributionSequence				= LocalLastDistributionSequence
						
					if (!PrmReleaseBatch)
						initialize BackgroundProcessing

		CallVertex is an Instance Action
			restricted
			default label is untranslatable
			Action Rules
				if (HasVertexTaxableDistributions)
					initialize CalculateTax
					CalculateTax.CallingModule				= "Receivable_Invoice"
					CalculateTax.System						= "AR"
					CalculateTax.InFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CalculateTax.TaxEntity					= GeneralLedgerCompanyRel.AccountingEntity
					CalculateTax.InvoiceCompany				= Company
					CalculateTax.ProcessLevel				= ReceivableProcessLevel
					CalculateTax.Customer					= Customer
					CalculateTax.Vendor						= Customer
					CalculateTax.VendorCustomerName			= Customer.Name
					CalculateTax.VoucherNumber				= VoucherReferenceNumber
					CalculateTax.Invoice					= ReceivableInvoice
					CalculateTax.Suffix						= ReceivableInvoicePrefix
					CalculateTax.InvoiceAmount				= InvoiceAmount.CurrencyAmount
					CalculateTax.InvoiceDate				= TransactionDate
					CalculateTax.ShipmentDate				= TransactionDate
					CalculateTax.PaymentDate				= TransactionDate
					CalculateTax.TaxDate					= TransactionDate
					CalculateTax.GeneralLedgerDate			= GeneralLedgerDate
					
					if (AlternateReceivableInvoiceType.CreditMemo)
						CalculateTax.InvoicedOrCreditMemo	= "C"
					else
						CalculateTax.InvoicedOrCreditMemo	= "I"
						
					CalculateTax.TransactionSource			= "O"	
					CalculateTax.LineNumber					= LastDistributionSequence + 1
					CalculateTax.DeliveryTerms				= ShipTerm
					CalculateTax.PointOfTitleTransfer		= PointOfTitleTransfer
					
					CalculateTax.VATRegistrationCountry			= CompanyCustomerRel.VATRegistrationCountry 
					CalculateTax.VATRegistrationNumber			= CompanyCustomerRel.VATRegistrationNumber
					CalculateTax.FromVATRegistrationCountry 	= TaxEntityRel.VATRegistrationCountry 
					CalculateTax.FromVATRegistrationNumber		= TaxEntityRel.VATRegistrationNumber
					
					CalculateTax.DefaultFilingCurrency 				= Company.Currency 
					CalculateTax.CurrencyRate						= InvoiceAmount.FunctionalAmount.EnteredCurrencyRate 		
					CalculateTax.TransactionCurrency 				= OriginalCurrency	
					CalculateTax.BaseCurrency						= Company.Currency
					
					CalculateTax.ReceiptSite						= ReceivableProcessLevel	
					CalculateTax.UniqueIdOfRelatedObject			= UniqueID

					CalculateTax.BypassEditing						= true
					

					if (ReceivableProcessLevel.PostalAddress entered)
						CalculateTax.FromPostalAddress					= ReceivableProcessLevel.PostalAddress
					else
						CalculateTax.FromPostalAddress					= Company.PostalAddress


					if (ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
						CalculateTax.PostalAddress 					= ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress
					else
						CalculateTax.PostalAddress					= Customer.PostalAddress
				
					CalculateTax.SendMultLineItems			= true
					CalculateTax.UpdateLineItems			= true



					CalculateTax.SendMultLineItems					= true
					CalculateTax.UpdateLineItems					= true
					CalculateTax.UniqueIdOfRelatedObject			= UniqueID
					CalculateTax.InputReturnVertexTaxIn		        = "D"
					CalculateTax.TaxCode							= "00" 
					CalculateTax.AppendToJurisFile					= true					
					CalculateTax.JurisdictionResultsKey				= "AR:" + Company + ":" + ReceivableInvoiceType + ":" + ReceivableInvoice + ":" + current timestamp
					CalculateTax.RelatedObjectReference				= reference to this instance



					CalculateTax.Function	= "C"
					LocalTaxCalc			= CalculateTax.ExecuteCalculateTax

					if (CalculateTax.OutputErrorNumber entered)
						constraint(false)
							"VertexTaxServerOrWebserviceError;ContactAdministrator"


		VertexRoundLastTaxableDistribution is an Instance Action
			restricted
			default label is untranslatable
			Parameters
				PrmNumberOfTaxableDistributions	is Numeric 6
				PrmDistributionSequence			is a DistSeq
			Local Fields
				LocalSumOfDistributions			is like InternationalAmount
				LocalDifference					is like InternationalAmount
				AllowableToleranceAmount		is like InternationalAmount
				LocalDistributionAmount			is like InternationalAmount
				LocalLowerLimitRoundingAmount	is like InternationalAmount
				LocalUpperLimitRoundingAmount	is like InternationalAmount
			Action Rules

				constraint (InvoiceAmount.CurrencyAmount entered)
					"TransactionAmountIsEmpty"

				LocalSumOfDistributions 				= DerivedReceivableGLDistributionAmount
				if (LinkedTaxGroupLinkedTaxDistributionRel exists)

					if (HasLineItems)
						constraint (DerivedReceivableInvoiceLineItemAmount = InvoiceAmount.CurrencyAmount)	
							"SumOfLineItemAmountsMustEqualInvoiceAmount"

					if (LocalSumOfDistributions != InvoiceAmount.CurrencyAmount)

						LocalDifference 				= InvoiceAmount.CurrencyAmount - LocalSumOfDistributions
						if (LocalDifference < 0)	
							LocalDifference 			= -1 * LocalDifference

						AllowableToleranceAmount 		= 0.01 * PrmNumberOfTaxableDistributions

						LocalLowerLimitRoundingAmount 	= InvoiceAmount.CurrencyAmount - AllowableToleranceAmount
						LocalUpperLimitRoundingAmount 	= InvoiceAmount.CurrencyAmount + AllowableToleranceAmount

						constraint (LocalDifference <= AllowableToleranceAmount)
							"SumOfDistributions<LocalSumOfDistributions>IsNotWithinTheEstablishedRoundingToleranceRangeOf<LocalLowerLimitRoundingAmount>-<LocalUpperLimitRoundingAmount>ForTheInvoiceAmountOf<InvoiceAmount.CurrencyAmount>"

						LocalDistributionSequence		= PrmDistributionSequence
						LocalDistributionAmount 		= first ReceivableGLDistributionLastTaxableRel.DistributionAmount.CurrencyAmount
						LocalDistributionAmount 		= LocalDistributionAmount + (InvoiceAmount.CurrencyAmount - LocalSumOfDistributions)
						
						invoke Update first ReceivableGLDistributionLastTaxableRel
							invoked.DistributionAmount.CurrencyAmount 	= LocalDistributionAmount
							invoked.AllowLinkedTaxUpdate                = true

						if (first ReceivableGLDistributionLastTaxableRel.GeneralLedgerAccount.Project entered
						and not InvoiceEntryTemplate.Expanded)
							LocalProject = first ReceivableGLDistributionLastTaxableRel.GeneralLedgerAccount.Project
							constraint (sum LocalProjectDistributionRel.DistributionAmount.CurrencyAmount = sum LocalLineItemProjectRel.TransactionAmount)
								"DistributionAmountDoesNotMatchProjectLineItemsAmountForProject<LocalProject>AfterRounding.AdjustProjectAndNonProjectLineItemAmounts"
							initialize LocalProject
						
						SumOfReceivableGLDistributionRelDistributionAmountCurrencyAmountDone = false	
				else
					constraint (LocalSumOfDistributions = InvoiceAmount.CurrencyAmount)
						"NoTaxDistributionsWereCreated;SumOfDistributionAmounts<LocalSumOfDistributions>DoesNotEqualTransactionAmount<InvoiceAmount.CurrencyAmount>ForTransaction<ReceivableInvoice>TransactionType=<ReceivableInvoiceType>"


		VertexProcessTaxHistoryByTransaction is an Instance Action
			restricted
			default label is untranslatable
			Action Rules
				if (HasVertexSourceOfLinkedTaxDistributions
				and TaxLineItemsRel exists)
					initialize ProcessTaxHistory
					ProcessTaxHistory.HistoryType					= "O"
					ProcessTaxHistory.InTransactionId				= blank
					ProcessTaxHistory.InvoiceCompany				= Company
					ProcessTaxHistory.TaxEntity						= Company.AccountingEntity
					ProcessTaxHistory.TaxCode						= "00"
					ProcessTaxHistory.SystemCode					= "AR"
					ProcessTaxHistory.VendorCustomer				= Customer
					ProcessTaxHistory.VendorOrCustomerName			= Customer.Name
					ProcessTaxHistory.Invoice						= ReceivableInvoice
					ProcessTaxHistory.TransactionInvoiceAmount      = InvoiceAmount.CurrencyAmount
					ProcessTaxHistory.ProcessLevel					= ReceivableProcessLevel
					ProcessTaxHistory.InvoiceDate					= TransactionDate
					ProcessTaxHistory.TransactionCurrency			= OriginalCurrency
					ProcessTaxHistory.TransactionNumberOfDecimals	= CurrencyDecimalsNumber
					ProcessTaxHistory.TaxPointDate					= TransactionDate
					ProcessTaxHistory.PostDate						= GeneralLedgerDate
					ProcessTaxHistory.TransactionSource				= "O"
					ProcessTaxHistory.UniqueIdOfRelatedObject		= UniqueID
					ProcessTaxHistory.RelatedObjectReference		= reference to this instance
					ProcessTaxHistory.AccruedOrInvoiced 			= "I"
























					if (Origin.IntercompanyBilling
					and IntercompanyBillingDocumentByDateRel exists)
						if (first IntercompanyBillingDocumentByDateRel.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress entered)
							ProcessTaxHistory.FromAddress 			= first IntercompanyBillingDocumentByDateRel.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress
						else
							ProcessTaxHistory.FromAddress 			= first IntercompanyBillingDocumentByDateRel.PayableEntity.Vendor.CurrentAddressRel.PostalAddress

						if (ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
							ProcessTaxHistory.ToAddress 			= ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress
						else
							ProcessTaxHistory.ToAddress 			= Customer.PostalAddress
					else
						if (ReceivableProcessLevel.PostalAddress entered)
							ProcessTaxHistory.FromAddress			= ReceivableProcessLevel.PostalAddress
						else
							ProcessTaxHistory.FromAddress			= Company.PostalAddress
						
						if (ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
							ProcessTaxHistory.ToAddress         	= ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress
						else
							ProcessTaxHistory.ToAddress             = Customer.PostalAddress
					
					if (AlternateReceivableInvoiceType.CreditMemo)
						ProcessTaxHistory.DocumentType				= "CreditMemo"
					else
					if (AlternateReceivableInvoiceType.DebitMemo)
						ProcessTaxHistory.DocumentType				= "DebitMemo"
					else
					if (AlternateReceivableInvoiceType.Invoice)
						ProcessTaxHistory.DocumentType				= "Invoice"

					if (AlternateReceivableInvoiceType.CreditMemo)
						ProcessTaxHistory.InvoicedOrCreditMemo		= "C"
					else
						ProcessTaxHistory.InvoicedOrCreditMemo		= "I"

					ProcessTaxHistory.SendMultLineItems				= true


					ProcessTaxHistory.TaxTransFunction				= "A"	
					LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed

					constraint (ProcessTaxHistory.OutputErrorMessage not entered)
						"<ProcessTaxHistory.OutputErrorMessage>"

					for each TaxLineItemsRel
						invoke Delete each.LineItemUserFieldsRel
						invoke Delete each

					if (!TaxConfigurationRel.DebugMode
					and !TaxConfigurationRel.WriteToLogFile)
						for each JurisdictionResultsForInvoiceRel
							invoke Purge each


		OneSourceProcessTaxHistoryByTransaction is an Instance Action
			restricted
			default label is untranslatable
			Action Rules
				if (HasOneSourceSourceOfLinkedTaxDistributions
				and TaxLineItemsRel exists)
					initialize ProcessTaxHistory
					ProcessTaxHistory.HistoryType					= "O"
					ProcessTaxHistory.InTransactionId				= blank
					ProcessTaxHistory.InvoiceCompany				= Company
					ProcessTaxHistory.TaxEntity						= Company.AccountingEntity
					ProcessTaxHistory.SystemCode					= "AR"
					ProcessTaxHistory.Customer						= Customer
					ProcessTaxHistory.VendorCustomer				= Customer
					ProcessTaxHistory.VendorOrCustomerName			= Customer.Name
					ProcessTaxHistory.Invoice						= ReceivableInvoice
					ProcessTaxHistory.ProcessLevel					= ReceivableProcessLevel
					ProcessTaxHistory.InvoiceDate					= TransactionDate
					ProcessTaxHistory.TransactionCurrency			= OriginalCurrency
					ProcessTaxHistory.TransactionNumberOfDecimals	= CurrencyDecimalsNumber
					ProcessTaxHistory.TaxPointDate					= TransactionDate
					ProcessTaxHistory.TransactionSource				= "O"
					ProcessTaxHistory.TransactionType				= "S"
					ProcessTaxHistory.UniqueIdOfRelatedObject		= UniqueID
					ProcessTaxHistory.RelatedObjectReference		= reference to this instance
					ProcessTaxHistory.AccruedOrInvoiced 			= "I"

					if (CompanyCustomerRel.TaxCode entered)
						ProcessTaxHistory.TaxCode					= CompanyCustomerRel.TaxCode
					else
						ProcessTaxHistory.TaxCode					= first TaxLineItemsRel.ShipToTaxCode

					if (AlternateReceivableInvoiceType.CreditMemo)
						ProcessTaxHistory.TransactionInvoiceAmount 	= InvoiceAmount.CurrencyAmount * -1
					else
						ProcessTaxHistory.TransactionInvoiceAmount 	= InvoiceAmount.CurrencyAmount

					if (Origin.IntercompanyBilling
					and IntercompanyBillingDocumentByDateRel exists)
						if (first IntercompanyBillingDocumentByDateRel.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress entered)
							ProcessTaxHistory.FromAddress 			= first IntercompanyBillingDocumentByDateRel.PayableEntity.VendorLocation.CurrentAddressRel.PostalAddress
						else
							ProcessTaxHistory.FromAddress 			= first IntercompanyBillingDocumentByDateRel.PayableEntity.Vendor.CurrentAddressRel.PostalAddress

						if (ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
							ProcessTaxHistory.ToAddress 			= ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress
						else
							ProcessTaxHistory.ToAddress 			= Customer.PostalAddress
					else
						if (ReceivableProcessLevel.PostalAddress entered)
							ProcessTaxHistory.FromAddress			= ReceivableProcessLevel.PostalAddress
						else
							ProcessTaxHistory.FromAddress			= Company.PostalAddress
						
						if (ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered)
							ProcessTaxHistory.ToAddress         	= ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress
						else
							ProcessTaxHistory.ToAddress             = Customer.PostalAddress
					
					if (AlternateReceivableInvoiceType.CreditMemo)
						ProcessTaxHistory.InvoicedOrCreditMemo		= "C"
					else
						ProcessTaxHistory.InvoicedOrCreditMemo		= "I"

					ProcessTaxHistory.DeliveryTerms					= ShipTerm
					ProcessTaxHistory.PointOfTitleTransfer			= PointOfTitleTransfer

					ProcessTaxHistory.SendMultLineItems				= true


					ProcessTaxHistory.TaxTransFunction				= "A"	
					LocalTaxHistoryProcessed						= ProcessTaxHistory.TaxHistoryProcessed

					constraint (ProcessTaxHistory.OutputErrorMessage not entered)
						"<ProcessTaxHistory.OutputErrorMessage>"

					for each LinkedTaxGroupSourceOfLinkedTaxDistributionRel
						ProcessTaxHistory.InputTaxLineItemSequence	= each.TaxLineItemRel.TaxLineItem.Sequence
						ProcessTaxHistory.TaxTransactionAccount		= each.first TaxOriginCrossReferenceGroupExceptSelfRel.GeneralLedgerAccount
						LocalTaxHistoryProcessed					= ProcessTaxHistory.CreateTaxTransactionForInputTaxLineItem

					for each TaxLineItemsRel
						invoke Delete each.LineItemUserFieldsRel
						invoke Delete each

		
		OneSourceManualInvoicesCreateTaxLineItems is a Set Action
			restricted
			Parameters
				PrmCompany					is a ReceivableCompany
				PrmBatchNumber				is a BatchNumber
				PrmReceivableInvoiceType    is like ReceivableInvoiceType
				PrmReceivableInvoice        is like ReceivableInvoice
				PrmReleaseBatch				is Boolean

			Instance Selection
				where (Company	= PrmCompany
				and	   BatchNumber = PrmBatchNumber
				and	   IsUnreleased
				and   (Origin.ManualInvoice
				or	   Origin.ManualMemo)
				and   (PrmReceivableInvoiceType not entered
				or     ReceivableInvoiceType = PrmReceivableInvoiceType)
				and   (PrmReceivableInvoice not entered
				or     ReceivableInvoice = PrmReceivableInvoice))

			Action Rules

				Set Rules
					Exit Rules
						invoke OneSourceProcessManualInvoices ReceivableInvoice
							invoked.PrmCompany	 	                = PrmCompany
							invoked.PrmBatchNumber 	                = PrmBatchNumber
							invoked.PrmReceivableInvoiceType	    = ReceivableInvoiceType
							invoked.PrmReceivableInvoice            = ReceivableInvoice
							invoked.PrmReleaseBatch					= PrmReleaseBatch

				Instance Rules
					ErrorMessage = blank
					if (HasOneSourceSourceOfLinkedTaxDistributions)
						invoke ResetSourceOfLinkedTaxDistributions LinkedTaxGroupSourceOfLinkedTaxDistributionRel
					if (HasOneSourceTaxableDistributions)
						invoke CreateTaxLineItem LinkedTaxGroupTaxableDistributionsRel


		OneSourceProcessManualInvoices is a Set Action
			restricted
			Parameters
				PrmCompany					is a ReceivableCompany
				PrmBatchNumber				is a BatchNumber
				PrmReceivableInvoiceType    is like ReceivableInvoiceType
				PrmReceivableInvoice        is like ReceivableInvoice
				PrmReleaseBatch				is Boolean

			Local Fields
				LocalErrorOccurred				is Boolean

			Instance Selection
				where (Company	= PrmCompany
				and	   BatchNumber = PrmBatchNumber
				and	   IsUnreleased
				and   (Origin.ManualInvoice
				or	   Origin.ManualMemo)
				and   (PrmReceivableInvoiceType not entered
				or     ReceivableInvoiceType = PrmReceivableInvoiceType)
				and   (PrmReceivableInvoice not entered
				or     ReceivableInvoice = PrmReceivableInvoice))

			Action Rules

				Set Rules
					Exit Rules
						if (PrmReleaseBatch)
							invoke ReleaseSet ReceivableInvoice
								invoked.PrmCompany	 		= PrmCompany
								invoked.PrmBatchNumber 		= PrmBatchNumber
								invoked.PrmCallOneSource	= true

				Instance Rules
					if (HasOneSourceTaxableDistributions)
						initialize LocalErrorOccurred

						invoke CallOneSource
							resume on error
								LocalErrorOccurred				= true
								ErrorMessage					= error message

						initialize LocalLastDistributionSequence
						initialize LocalTaxableDistributions

						if (!LocalErrorOccurred)
							for each LinkedTaxGroupTaxableDistributionsRel
								if (each.first TaxLineItemRel.TaxDetailOutRel.TaxAmount entered)
									LocalTaxableDistributions 		+= 1
									LocalLastDistributionSequence	= each.LastDistributionSequence
									invoke OneSourceProcessDistributionForTax each
										resume on error
											LocalErrorOccurred				= true
											ErrorMessage					= error message

							if (InvoiceEntryTemplate.Expanded)
								invoke DeriveLineAndAddOnChargeTaxAmounts

							if (!LocalErrorOccurred
							and PrmReleaseBatch)
								invoke OneSourceRoundLastTaxableDistribution
									resume on error
										LocalErrorOccurred				= true
										ErrorMessage					= error message
									invoked.PrmNumberOfTaxableDistributions		= LocalTaxableDistributions
									invoked.PrmDistributionSequence				= LocalLastDistributionSequence

					if (!PrmReleaseBatch)
						initialize BackgroundProcessing


		OneSourceCleanupDistributions is an Instance Action 
			restricted
			Action Rules

				for each ReceivableGLDistributionInvoiceRel
					if (ErrorMessage entered)
						if (each.OneSourceCreatedTaxDistribution)
							invoke ClearTaxCodeAndTaxableAmount each
							invoke Delete each
					else
						if (each.TaxCode entered
						and !each.OneSourceCreatedTaxDistribution)
							invoke ClearTaxCodeAndTaxableAmount each


		EditReceivableInvoiceForOneSource is an Instance Action
			restricted
			Action Rules

				constraint (TaxConfigurationRel.OneSourceVersionType.Generic)
					"One_\Source_\Version_\TypeMustBe_\Generic"

				constraint (ReceivableProcessLevel.PostalAddress entered
				or			Company.PostalAddress entered)
					"Company_\AddressIsRequiredIf_\Process_\Level_\AddressIsNotEntered"

				constraint (ReceivableInvoiceShipToGroup.CustomerShipTo.ShipToAddress entered
				or			Customer.PostalAddress entered)
					"Customer_\AddressIsRequiredIf_\Customer_\Ship_\ToIsNotEntered"


		OneSourceInterfaceInvoiceCreateTaxLineItems is an Instance Action
			restricted
			Local Fields
				LocalNumberOfDistributions		is Numeric 6
			Action Rules
				LocalNumberOfDistributions = instance count of LinkedTaxGroupTaxableDistributionsRel
				if (LocalNumberOfDistributions > 0)
					for each LinkedTaxGroupTaxableDistributionsRel
						invoke CreateTaxLineItem each


		OneSourceInterfaceInvoiceVerifyTaxTolerance is an Instance Action
			restricted
			Local Fields
				LocalNumberOfDistributions			is Numeric 6
				LocalToleranceAmountLimit			is an InternationalAmount
				LocalToleranceAmountLimitTransCurr	is an InternationalAmount
				LocalAmountVariance					is an InternationalAmount
				LocalCalculatedTaxAmount			is an InternationalAmount
				LocalGivenTaxAmount					is an InternationalAmount
				LocalLinkedTaxCode					is like TaxCode
				LocalLinkedTaxableAmount			is like InternationalAmount
			Action Rules

				LocalNumberOfDistributions = instance count of LinkedTaxGroupTaxableDistributionsRel

				if (LocalNumberOfDistributions > 0)
					include OneSourceCalculateTax

					for each LinkedTaxGroupTaxableDistributionsRel

						initialize LocalCalculatedTaxAmount
						for each each.first TaxLineItemRel.TaxDetailOutRel
							LocalCalculatedTaxAmount += each.TaxAmount

						if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
							LocalCalculatedTaxAmount *= -1

						constraint (LocalCalculatedTaxAmount entered)
							"Distribution_\Sequence<each.LastDistributionSequence>_\Error:_\DistributionReturnedAnExemptTaxResponse"

						initialize LocalGivenTaxAmount
						for each each.TaxOriginCrossReferenceGroupExceptSelfRel
							LocalGivenTaxAmount += each.DistributionAmount.CurrencyAmount

						if (TaxEntityRel.UseTaxCodeAccounts)
							LocalTaxCode 				= each.TaxCode
							LocalToleranceAmountLimit 	= EntityTaxCodeRel.TaxToleranceAmount
						else
							LocalToleranceAmountLimit 	= TaxEntityRel.TaxToleranceAmount

						if (LocalToleranceAmountLimit entered)

							if (Company.AccountingEntity.FunctionalCurrency entered
							and	each.OriginalCurrency != Company.AccountingEntity.FunctionalCurrency)
								initialize LocalCurrencyWork
								LocalCurrencyWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								LocalCurrencyWork.ExchangeDate				= TransactionDate
								LocalCurrencyWork.TransactionAmount			= LocalToleranceAmountLimit
								LocalCurrencyWork.FromCurrency				= Company.AccountingEntity.FunctionalCurrency
								LocalCurrencyWork.BaseAmount.ToCurrency		= each.OriginalCurrency
								LocalToleranceAmountLimitTransCurr			= LocalCurrencyWork.BaseAmount.OutputCurrencyAmount
							else
								LocalToleranceAmountLimitTransCurr			= LocalToleranceAmountLimit

							LocalAmountVariance			= LocalGivenTaxAmount - LocalCalculatedTaxAmount
							if (LocalAmountVariance < 0)
								LocalAmountVariance 	= LocalAmountVariance * -1

							if (LocalToleranceAmountLimitTransCurr entered)
								constraint (LocalAmountVariance <= LocalToleranceAmountLimitTransCurr)
									"Distribution_\Sequence<each.LastDistributionSequence>_\Error:_\TheDifference<LocalAmountVariance>BetweenGivenTaxAmount<LocalGivenTaxAmount>AndCalculatedAmount<LocalCalculatedTaxAmount>IsGreaterThanTheToleranceLimit<LocalToleranceAmountLimitTransCurr>"
						else
							constraint (LocalCalculatedTaxAmount = LocalGivenTaxAmount)
								"Distribution_\Sequence<each.LastDistributionSequence>_\Error:_\TaxTolerancesAreNotEstablished;DistributionAmount<LocalGivenTaxAmount>MustEqualCalculatedTaxAmount<LocalCalculatedTaxAmount>"

					for each LinkedTaxGroupTaxableDistributionsRel

						LocalLinkedTaxCode 							= each.TaxCode
						LocalLinkedTaxableAmount					= each.TransactionTaxableAmount

						invoke FastUpdate each
							invoked.LinkedTaxGroup.Indicator    	= "S"
							initialize invoked.TaxCode
							initialize invoked.TransactionTaxableAmount
						
						for each each.TaxOriginCrossReferenceGroupExceptSelfRel
							invoke FastUpdate each
								invoked.LinkedTaxGroup.Indicator 	= "T"
								invoked.TaxCode						= LocalLinkedTaxCode
								invoked.TransactionTaxableAmount	= LocalLinkedTaxableAmount


		VertexInterfaceInvoiceCreateTaxLineItems is an Instance Action
			restricted
			Local Fields
				LocalNumberOfDistributions		is Numeric 6
			Action Rules
				LocalNumberOfDistributions = instance count of LinkedTaxGroupTaxableDistributionsRel
				if (LocalNumberOfDistributions > 0)
					for each LinkedTaxGroupTaxableDistributionsRel
						invoke CreateTaxLineItem each


		VertexInterfaceInvoiceVerifyTaxTolerance is an Instance Action
			restricted
			Local Fields
				LocalNumberOfDistributions			is Numeric 6
				LocalToleranceAmountLimit			is an InternationalAmount
				LocalToleranceAmountLimitTransCurr	is an InternationalAmount
				LocalAmountVariance					is an InternationalAmount
				LocalCalculatedTaxAmount			is an InternationalAmount
				LocalGivenTaxAmount					is an InternationalAmount
				LocalLinkedTaxCode					is like TaxCode
				LocalLinkedTaxableAmount			is like InternationalAmount
			Action Rules

				LocalNumberOfDistributions = instance count of LinkedTaxGroupTaxableDistributionsRel

				if (LocalNumberOfDistributions > 0)
					invoke CallVertex

					for each LinkedTaxGroupTaxableDistributionsRel

						initialize LocalCalculatedTaxAmount
						for each each.first TaxLineItemRel.TaxDetailOutRel
							LocalCalculatedTaxAmount += each.TaxAmount

						if (ReceivableInvoiceRel.AlternateReceivableInvoiceType.CreditMemo)
							LocalCalculatedTaxAmount *= -1

						constraint (LocalCalculatedTaxAmount entered)
							"Distribution_\Sequence<each.LastDistributionSequence>_\Error:_\DistributionReturnedAnExemptTaxResponse"

						initialize LocalGivenTaxAmount
						for each each.TaxOriginCrossReferenceGroupExceptSelfRel
							LocalGivenTaxAmount += each.DistributionAmount.CurrencyAmount

						if (TaxEntityRel.UseTaxCodeAccounts)
							LocalTaxCode 				= each.TaxCode
							LocalToleranceAmountLimit 	= EntityTaxCodeRel.TaxToleranceAmount
						else
							LocalToleranceAmountLimit 	= TaxEntityRel.TaxToleranceAmount

						if (LocalToleranceAmountLimit entered)

							if (Company.AccountingEntity.FunctionalCurrency entered
							and	each.OriginalCurrency != Company.AccountingEntity.FunctionalCurrency)
								initialize LocalCurrencyWork
								LocalCurrencyWork.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								LocalCurrencyWork.ExchangeDate				= TransactionDate
								LocalCurrencyWork.TransactionAmount			= LocalToleranceAmountLimit
								LocalCurrencyWork.FromCurrency				= Company.AccountingEntity.FunctionalCurrency
								LocalCurrencyWork.BaseAmount.ToCurrency		= each.OriginalCurrency
								LocalToleranceAmountLimitTransCurr			= LocalCurrencyWork.BaseAmount.OutputCurrencyAmount
							else
								LocalToleranceAmountLimitTransCurr			= LocalToleranceAmountLimit

							LocalAmountVariance			= LocalGivenTaxAmount - LocalCalculatedTaxAmount
							if (LocalAmountVariance < 0)
								LocalAmountVariance 	= LocalAmountVariance * -1

							if (LocalToleranceAmountLimitTransCurr entered)
								constraint (LocalAmountVariance <= LocalToleranceAmountLimitTransCurr)
									"Distribution_\Sequence<each.LastDistributionSequence>_\Error:_\TheDifference<LocalAmountVariance>BetweenGivenTaxAmount<LocalGivenTaxAmount>AndCalculatedAmount<LocalCalculatedTaxAmount>IsGreaterThanTheToleranceLimit<LocalToleranceAmountLimitTransCurr>"
						else
							constraint (LocalCalculatedTaxAmount = LocalGivenTaxAmount)
								"Distribution_\Sequence<each.LastDistributionSequence>_\Error:_\TaxTolerancesAreNotEstablished;DistributionAmount<LocalGivenTaxAmount>MustEqualCalculatedTaxAmount<LocalCalculatedTaxAmount>"
					
					for each LinkedTaxGroupTaxableDistributionsRel

						LocalLinkedTaxCode 							= each.TaxCode
						LocalLinkedTaxableAmount					= each.TransactionTaxableAmount

						invoke FastUpdate each
							invoked.LinkedTaxGroup.Indicator    	= "S"
							initialize invoked.TaxCode
							initialize invoked.TransactionTaxableAmount
						
						for each each.TaxOriginCrossReferenceGroupExceptSelfRel
							invoke FastUpdate each
								invoked.LinkedTaxGroup.Indicator 	= "T"
								invoked.TaxCode						= LocalLinkedTaxCode
								invoked.TransactionTaxableAmount	= LocalLinkedTaxableAmount


		CalculateTotalOpenAmountAndFundAccountingTypeForTieBackReport is an Instance Action 
			restricted
			Parameters
				PrmAsOfDate 							is Date
				PrmNewInvoice							is Boolean
			Local Fields
				LocalInvoiceDetailAppliedAmount 		is like InternationalAmount
				LocalInvoiceAppliedAmount				is like InternationalAmount
			Action Rules
				if (PrmNewInvoice)
					initialize TransientTotalInvoiceOpenAmount
					initialize TransientSpecifyDistributionMix
					initialize TransientNumberOfOpenDetail
					initialize TransientOriginIsFundAccountingSupported

					TransientSpecifyDistributionMix 				= Company.SelectFundDistributionSet

					if (OriginIsFundAccountingSupported
					and ProrateDistributionsRel exists)
						TransientOriginIsFundAccountingSupported	= true

					if (TransientSpecifyDistributionMix)
						initialize LocalInvoiceAppliedAmount

						for each ReceivableInvoiceDetailRel
							if (each.LastApplicationSequence = 0)
								TransientNumberOfOpenDetail += 1
							else
								initialize LocalInvoiceDetailAppliedAmount

								for each each.ReceivableApplicationRel
									if (each.GeneralLedgerDate <= PrmAsOfDate)
										LocalInvoiceDetailAppliedAmount += each.ApplicationAmount.CurrencyAmount
										if (each.AdjustmentSequence != 0)
											for each each.ReceivableApplicationAdjustmentRel
												if (each.AdjustmentReason  != "CURR")
													LocalInvoiceDetailAppliedAmount += each.AdjustmentAmount.CurrencyAmount

								if (each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType.CreditMemo)
									for each each.ReceivableCreditApplicationRel
										if (each.GeneralLedgerDate <= PrmAsOfDate)
											LocalInvoiceDetailAppliedAmount += each.ApplicationAmount.CurrencyAmount

								if (each.InvoiceAmount.CurrencyAmount != LocalInvoiceDetailAppliedAmount) 
									TransientNumberOfOpenDetail += 1

								if (each.AlternateReceivableInvoiceType.Mixed
								and each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType != AlternateReceivableInvoiceType)
									LocalInvoiceAppliedAmount   -= LocalInvoiceDetailAppliedAmount
								else
									LocalInvoiceAppliedAmount   += LocalInvoiceDetailAppliedAmount

						TransientTotalInvoiceOpenAmount = InvoiceAmount.CurrencyAmount - LocalInvoiceAppliedAmount


		UpdatePaymentCode is an Instance Action
			restricted
			Parameters
				PrmBankTransactionCode			is a BankTransactionCode

			Action Rules
				BankTransactionCode				= PrmBankTransactionCode


		BODDataInitialLoadReceivableInvoiceCriteria is a Set Action
			restricted
			Parameters
				PrmCustomerGroup				is a CustomerGroup
				PrmFromCompany					is a ReceivableCompany
				PrmToCompany					is a ReceivableCompany
				PrmFromCustomer					is a Customer
					context of PrmCustomerGroup
				PrmToCustomer					is a Customer
					context of PrmCustomerGroup
				PrmReceivableInvoiceType		is a ReceivableInvoiceType
				PrmFromReceivableInvoice		is a ReceivableInvoice
					context of PrmFromCompany
				PrmToReceivableInvoice		  is a ReceivableInvoice
					context of PrmFromCompany
				PrmDate							is a DateRange
				PrmCreateDateRange				is a DateRange

			Parameter Rules
			Instance Selection
				where  (((PrmCustomerGroup entered
				and		  PrmCustomerGroup = Company.CustomerGroupField.CustomerGroup)
				or		PrmCustomerGroup not entered)
				and	 ((PrmFromCompany entered
				and		  PrmFromCompany <= Company)
				or		  PrmFromCompany not entered)
				and	 ((PrmToCompany entered
				and		  PrmToCompany >= Company)
				or		  PrmToCompany not entered)
				and		((PrmFromCustomer entered
				and		  PrmFromCustomer <= Customer)
				or		  PrmFromCustomer not entered)
				and		((PrmToCustomer entered
				and		  PrmToCustomer >= Customer)
				or		  PrmToCustomer not entered)
				and		((PrmReceivableInvoiceType entered
				and		  PrmReceivableInvoiceType = ReceivableInvoiceType)
				or		PrmReceivableInvoiceType not entered)
				and	 ((PrmFromReceivableInvoice entered
				and		  PrmFromReceivableInvoice <= ReceivableInvoice)
				or		  PrmFromReceivableInvoice not entered)
				and	 ((PrmToReceivableInvoice entered
				and		  PrmToReceivableInvoice >= ReceivableInvoice)
				or		  PrmToReceivableInvoice not entered)
				and	 (TransactionDate within PrmDate
				or	   PrmDate not entered)
				and  (create date within PrmCreateDateRange
				or	  PrmCreateDateRange not entered)
				and		(Status.Released))

			Sort Order
			Action Rules
				Instance Rules
					if (Company.CustomerBusinessGroup.FinanceEnterpriseGroup.BODTrigger and GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
						if (Status.Released)
							ActionCode = ActionCode.Create
							increment bod id.VariationID
							LocalMassBODTrigger = true
							include TriggerReceivableInvoiceBOD





							trigger PayablesService.ReceivableTransactionService PA service
								resume on error
								title is "EG:<Company.CustomerBusinessGroup.FinanceEnterpriseGroup>CO:<Company>INV:<ReceivableInvoice>RT:<ReceivableInvoiceType>"
								Criteria
									Company.CustomerBusinessGroup.FinanceEnterpriseGroup
									Company
								Variables
									include persistent fields from	ReceivableInvoice
									include persistent fields from	Company
									include persistent fields from	Customer
									include persistent fields from  ReceivableInvoiceDetailRel
									include persistent fields from  ReceivableApplicationAdjustmentRel
									include persistent fields from  ReceivableApplicationRel
									include persistent fields from  CustomerBillTo
									include persistent fields from  CompanyCustomerRel.CompanyCustomer.CustomerShipToRel.CustomerShipTo
									include persistent fields from  ReceivableGLDistributionRel
									include persistent fields from  Company.GeneralLedgerCompany
									include persistent fields from  Company.AccountingEntity
									ActionCode
									Company.FinanceEnterpriseGroup
										variable name is FinanceEnterpriseGroup
									sum OpenReceivableInvoiceDetailRel.AdjustmentAmount.CurrencyAmount
										variable name is DiscountAmount
									Company.GeneralLedgerCompany.AccountingEntity
										variable name is AccountingEntity
									Company
										variable name is ReceivableCompany
									ReceivableApplicationRel.ReceivableApplication.ApplicationSequence
										variable name is ApplicationSequence
									ReceivableGLDistributionDetailTypeRel.ReceivableGLDistribution.ReceivableGLDistribution
										variable name is ReceivableGLDistribution
									ReceivableApplicationPaymentRel.ReceivableApplication.ApplicationSequence
										variable name is PaymentApplicationSequence
									TermsCode.TermsDiscountArray.TermsDiscountGroup[1].DiscountPercent
										variable name is TermsCodeDiscountPercent


		AssignVoucherReferenceNumber is a Set Action
			restricted
			run in background

			Parameters
				PrmCompany			is a ReceivableCompany
				PrmPeriodStartDate	is Date
				PrmPeriodEndDate	is Date

			Local Fields
				LocalLineCounter12	is Numeric size 12
				LocalLineCounter6	is Numeric size 6
				LocalActor			is an Actor


			Instance Selection
				where (Company			  = PrmCompany
				and	Status.Released
				and   (GeneralLedgerDate >= PrmPeriodStartDate
				and	GeneralLedgerDate <= PrmPeriodEndDate))

			Sort Order
				Company
				GeneralLedgerDate
				TransactionDate




			Action Rules
				Instance Rules
					LocalLineCounter6  += 1
					LocalSequenceNum6   = LocalLineCounter6
					LocalLineCounter12 += 1
					LocalSequenceNum12  = LocalLineCounter12
					LocalTempJournalReference = PrmCompany.VoucherReferenceFormat

					invoke FastUpdate
						invoked.VoucherReferenceNumber = DerivedStructuredJournalReferenceNumber







		ReceivableClaimsAndLiabilities is a Set Action 
			default label is untranslatable
			restricted


		UpdateParallelReference is an Instance Action
			valid when (UpdateParallelReferenceOn)
			Action Rules
				invoke FastUpdate
					invoked.ParallelReference = DerivedStructuredParallelReference


		UpdateSystem is a Set Action
			restricted
			Instance Selection
				where (System not entered)
			Action Rules
				Instance Rules
					if (Origin.AccountsPayable)
						System = "AP"
					else
					if (Origin.Projects)
						System = "PS"
					else
					if (Origin.IntercompanyBilling)
						System = "IB"
					else
						System = "AR"


		RefreshData is an Import Action
			Local Fields
				RepSet is a ReplicationSet
			Action Rules
				RepSet = "FSM_COLUMNAR_AR_ST"
				constraint (RepSet.ReplicationIsValid)
					"ReplicationIsCurrentlyReplicatingOrNotValidAtThisTime"
				invoke Replicate RepSet


		ReceivableInvoiceRecordsPurge is a Set Action
			default label is "TransactionPurge"
			restricted
			Parameters
				PrmCompany					is a ReceivableCompany
				PrmCompanyGroup				is a GeneralLedgerCompanyGroup
				PrmInvoiceDate				is Date
					default label is "CutoffDate"
				PrmCustomer					is a Customer
				PrmMajClass					is a CustomerMajorClass
				PrmMinClass					is a CustomerMinorClass
				PrmCreditAnlyst				is a CreditAnalyst
				PrmSalesman					is a SalesRepresentative
				PrmInvoicesPurge			is Boolean
					default label is "InvoicesPurge"
				PrmInvoiceBatchPurge		is Boolean
					default label is "InvoiceBatchPurge"
				PrmPaymentsPurge			is Boolean
					default label is "PaymentsPurge"
				PrmGLRecordsPurge			is Boolean
					default label is "GLRecordsPurge"
				PrmCommentsPurge			is Boolean
					default label is "CommentsPurge"
				PrmCommentType				is AlphaUpper size 1
					States
						CustomerOrOrderComment value is "C"
							default label is "Customer\/\OrderComments"
						TransactionComment	   value is "T"
							default label is "TransactionComments"
						Both				   value is "B"
				PrmPaymentNoticeDetailPurge	is Boolean
					default label is "PaymentNoticeDetailPurge"

			Parameter Rules
				PrmCompany
					if (PrmCompanyGroup entered)
						cannot be entered
							"CannotEnterCompanyIfCompanyGroupEntered"
					
					constraint (PrmCompany.FinanceEnterpriseGroup.PurgeCutOffDate entered)
		            	"PurgeCutOffDateMustBeSetFor_Finance_Enterprise_Group<PrmCompany.FinanceEnterpriseGroup>"

				PrmCompanyGroup
					if (PrmCompany entered)
						cannot be entered
							"CannotEnterCompanyGroupIfCompanyEntered"
					if (PrmCompanyGroup entered)
						constraint (PrmCustomer not entered or PrmMajClass not entered or PrmCreditAnlyst not entered or PrmSalesman not entered)
							"CannotEnterCustomerSelectionsWhenCompanyGroupEntered"
					if (PrmCompany not entered and PrmCompanyGroup not entered)
						required
							"CompanyOrCompanyGroupIsRequired"
					LocalGeneralLedgerCompanyGroup = PrmCompanyGroup

					constraint (GeneralLedgerCompanyGroupMembersRel exists)
						"CompanyGroup<PrmCompanyGroup>ContainsNoCompanies"
					
					constraint (first GeneralLedgerCompanyGroupMembersRel.Company.FinanceEnterpriseGroup.PurgeCutOffDate entered)
						"PurgeCutOffDateMustBeSetFor_Finance_Enterprise_Group<first GeneralLedgerCompanyGroupMembersRel.Company.FinanceEnterpriseGroup>"

				PrmInvoiceDate
					initial value is actor.context.FinanceEnterpriseGroup.PurgeCutOffDate
					default to actor.context.FinanceEnterpriseGroup.PurgeCutOffDate

				PrmCustomer
					if (PrmCustomer entered)
						constraint (PrmMajClass not entered or PrmCreditAnlyst not entered or PrmSalesman not entered)
							"CustomerEntered-DoNotEnterAnalyst,MajClassOrSalesrep"

				PrmMajClass
					if (PrmMinClass entered)
						required
							"MajorClassRequired;MinorClassEntered"
						LocalMajClass = PrmMajClass
						constraint (CustomerMajorClassRel exists)
							"MajorClass<PrmMajClass>DoesNotExist"

				PrmMinClass
					if (PrmMinClass entered)
						LocalMinClass = PrmMinClass
						constraint (CustomerMajorClassRel exists)
								"MajorClass<PrmMajClass>DoesNotExist"

				PrmCreditAnlyst
					if (PrmCreditAnlyst entered)
						LocalCreditAnalyst = PrmCreditAnlyst
						constraint (ReceivableCreditAnalystRel exists)
								"CreditAnalystDoesNotExist"

				PrmSalesman
					if (PrmSalesman entered)
						LocalSalesRepresentative = PrmSalesman
						constraint (ReceivableSalesRepresentativeRel exists)
								"SalesRepDoesNotExist"

				PrmCommentType
					if (PrmCommentsPurge)
						required
							"CommentTypeIsRequired"

			Local Fields
				PurgeCurrentInvoice			is Boolean
				RecordCount					is Numeric 10
				DetailCount					is Numeric 10
				TotalDetailCount			is Numeric 10

			Instance Selection
				include deleted records
				where ((PrmCompany not entered or Company = PrmCompany)
				and   (PrmCompanyGroup not entered or GeneralLedgerCompanyGroupRel exists)
				and   (PrmCustomer not entered or Customer = PrmCustomer)
				and   (PrmInvoiceDate entered and GeneralLedgerDate <= PrmInvoiceDate)
				and  (PrmInvoicesPurge
				and	 Status.Released))

			Sort Order
				Company
				Customer
				ReceivableInvoiceType
				ReceivableInvoice




			Action Rules
				Empty Set Rules
					if (PrmInvoiceBatchPurge)
						invoke ReceivableInvoiceBatchRecordsPurge ReceivableInvoiceBatch
							invoked.PrmCompany			= PrmCompany
							invoked.PrmCompanyGroup 	= PrmCompanyGroup	
							invoked.PrmInvoiceHeader	= true	
					if (PrmPaymentsPurge)
						invoke ReceivablePaymentHeaderRecordsPurge ReceivablePaymentHeader
							invoked.PrmCompany			= PrmCompany
							invoked.PrmCompanyGroup 	= PrmCompanyGroup	
							invoked.PrmPaymentDate		= PrmInvoiceDate
					if (PrmGLRecordsPurge)
						invoke ReceivableGLDistributionRecordsPurge	ReceivableGLDistribution
							invoked.PrmCompany			= PrmCompany
							invoked.PrmCompanyGroup 	= PrmCompanyGroup	
							invoked.PrmDistribDate		= PrmInvoiceDate
							invoked.PrmCustomer			= PrmCustomer
							invoked.PrmMajClass 		= PrmMajClass	
							invoked.PrmMinClass			= PrmMinClass
							invoked.PrmCreditAnlyst		= PrmCreditAnlyst
							invoked.PrmSalesman 		= PrmSalesman	
					if (PrmCommentsPurge)
						invoke CompanyCustomerCommentRecordsPurge CompanyCustomerComment
							invoked.PrmCompany			= PrmCompany
							invoked.PrmCompanyGroup 	= PrmCompanyGroup
							if (PrmCommentType = "C")	
								invoked.PrmCommentDate	= PrmInvoiceDate
							else
							if (PrmCommentType = "T")
								invoked.TranCommentDate	= PrmInvoiceDate
							else
							if (PrmCommentType = "B")
								invoked.PrmCommentDate	= PrmInvoiceDate
								invoked.TranCommentDate	= PrmInvoiceDate
							invoked.PrmCommentType		= PrmCommentType	
							invoked.PrmCustomer			= PrmCustomer
							invoked.PrmMajClass 		= PrmMajClass	
							invoked.PrmMinClass			= PrmMinClass
							invoked.PrmCreditAnlyst		= PrmCreditAnlyst
							invoked.PrmSalesman 		= PrmSalesman
					if (PrmPaymentNoticeDetailPurge)
						invoke ReceivablePaymentNoticeDetailRecordsPurge ReceivablePaymentNoticeDetail
							invoked.PrmCompany			= PrmCompany
							invoked.PrmCompanyGroup 	= PrmCompanyGroup	
							invoked.PrmNoticeDate		= PrmInvoiceDate
							invoked.PrmCustomer			= PrmCustomer
							invoked.PrmMajClass 		= PrmMajClass	
							invoked.PrmMinClass			= PrmMinClass
							invoked.PrmCreditAnlyst		= PrmCreditAnlyst
							invoked.PrmSalesman 		= PrmSalesman
					
					if (PrmInvoicesPurge)
						LocalActor = actor
						send notification
							to LocalActor
							description is "NoReceivableInvoiceRecordsFoundToPurge"
							priority is high
							detail is "ReceivableInvoicesPurged=<RecordCount>;ReceivableInvoiceDetailRecordsPurged=<TotalDetailCount>"
					else
					if (!PrmInvoicesPurge
					and !PrmInvoiceBatchPurge
					and !PrmPaymentsPurge
					and !PrmGLRecordsPurge
					and !PrmCommentsPurge
					and !PrmPaymentNoticeDetailPurge)
						send notification
							to LocalActor
							description is "NoRecordsFoundToPurge"
							priority is high
							detail is "NoRecordsFoundToPurge"
				
				Set Rules
					Exit Rules
						
						if (PrmInvoiceBatchPurge)
							invoke ReceivableInvoiceBatchRecordsPurge ReceivableInvoiceBatch
								invoked.PrmCompany			= PrmCompany
								invoked.PrmCompanyGroup 	= PrmCompanyGroup	
								invoked.PrmInvoiceHeader	= true	
						if (PrmPaymentsPurge)
							invoke ReceivablePaymentHeaderRecordsPurge ReceivablePaymentHeader
								invoked.PrmCompany			= PrmCompany
								invoked.PrmCompanyGroup 	= PrmCompanyGroup	
								invoked.PrmPaymentDate		= PrmInvoiceDate
						if (PrmGLRecordsPurge)
							invoke ReceivableGLDistributionRecordsPurge	ReceivableGLDistribution
								invoked.PrmCompany			= PrmCompany
								invoked.PrmCompanyGroup 	= PrmCompanyGroup	
								invoked.PrmDistribDate		= PrmInvoiceDate
								invoked.PrmCustomer			= PrmCustomer
								invoked.PrmMajClass 		= PrmMajClass	
								invoked.PrmMinClass			= PrmMinClass
								invoked.PrmCreditAnlyst		= PrmCreditAnlyst
								invoked.PrmSalesman 		= PrmSalesman	
						if (PrmCommentsPurge)
							invoke CompanyCustomerCommentRecordsPurge CompanyCustomerComment
								invoked.PrmCompany			= PrmCompany
								invoked.PrmCompanyGroup 	= PrmCompanyGroup
								if (PrmCommentType = "C")	
									invoked.PrmCommentDate	= PrmInvoiceDate
								else
								if (PrmCommentType = "T")
									invoked.TranCommentDate	= PrmInvoiceDate
								else
								if (PrmCommentType = "B")
									invoked.PrmCommentDate	= PrmInvoiceDate
									invoked.TranCommentDate	= PrmInvoiceDate
								invoked.PrmCommentType		= PrmCommentType	
								invoked.PrmCustomer			= PrmCustomer
								invoked.PrmMajClass 		= PrmMajClass	
								invoked.PrmMinClass			= PrmMinClass
								invoked.PrmCreditAnlyst		= PrmCreditAnlyst
								invoked.PrmSalesman 		= PrmSalesman	
						if (PrmPaymentNoticeDetailPurge)
							invoke ReceivablePaymentNoticeDetailRecordsPurge ReceivablePaymentNoticeDetail
								invoked.PrmCompany			= PrmCompany
								invoked.PrmCompanyGroup 	= PrmCompanyGroup	
								invoked.PrmNoticeDate		= PrmInvoiceDate
								invoked.PrmCustomer			= PrmCustomer
								invoked.PrmMajClass 		= PrmMajClass	
								invoked.PrmMinClass			= PrmMinClass
								invoked.PrmCreditAnlyst		= PrmCreditAnlyst
								invoked.PrmSalesman 		= PrmSalesman
						
						if (PrmInvoicesPurge)
							LocalActor = actor
							send notification
								to LocalActor
								description is "ReceivableInvoicesPurgeHasCompleted"
								priority is high
								detail is "ReceivableInvoicesPurged=<RecordCount>;ReceivableInvoiceDetailRecordsPurged=<TotalDetailCount>"

				ReceivableInvoice Set Rules
					Exit Rules
						if (PurgeCurrentInvoice)
							invoke Released.Purge
							initialize PurgeCurrentInvoice
				Instance Rules
					if (GLDistributionsNotToPurgeRel not exists)
						if (PrmCreditAnlyst entered
						or  PrmMajClass entered
						or  PrmSalesman entered)
							if (PrmCreditAnlyst = CompanyCustomerRel.CreditAnalyst
							or  PrmMajClass = CompanyCustomerRel.CustomerMajorClass
							or  PrmSalesman = CompanyCustomerRel.SalesRepresentative)
								if (any NonHistoricalDetailRecordsRel exists
								or  UnpostedApplicationsExist)
									PurgeCurrentInvoice = false
								else
									increment RecordCount
									DetailCount = instance count of HistoricalDetailRecordsRel
									TotalDetailCount += DetailCount
									PurgeCurrentInvoice = true
									invoke HistoricalDetailRecordsPurge HistoricalDetailRecordsRel
									invoke Purge DunningHistoryRel
									invoke Purge ReceivableGLDistributionInvoiceRel
									invoke Purge ReceivableInvoiceLineRel
									invoke Purge ReceivableInvoiceLineItemRel
									invoke Purge ReceivableInvoiceAttachment set
									invoke Purge HeaderAddOnChargesRel
						else
							if (any NonHistoricalDetailRecordsRel exists
								or  UnpostedApplicationsExist)
								PurgeCurrentInvoice = false
							else
								increment RecordCount
								DetailCount = instance count of HistoricalDetailRecordsRel
								TotalDetailCount += DetailCount
								PurgeCurrentInvoice = true
								invoke HistoricalDetailRecordsPurge HistoricalDetailRecordsRel
								invoke Purge DunningHistoryRel
								invoke Purge ReceivableGLDistributionInvoiceRel
								invoke Purge ReceivableInvoiceLineRel
								invoke Purge ReceivableInvoiceLineItemRel
								invoke Purge ReceivableInvoiceAttachment set
								invoke Purge HeaderAddOnChargesRel






































































		TriggerReceivableInvoiceNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Parameters
				PrmTriggerFrom 			is Alpha size 100
				RestartFlag 			is Boolean
				PrmFSMInboundBODTracker	is Numeric 15
			Action Rules
				LocalTriggerFrom = PrmTriggerFrom
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "Invoice"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= LocalTriggerFrom
					invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmCompany 					= Company
					invoked.PrmAccountingEntity 		= GeneralLedgerCompanyRel.AccountingEntity
					invoked.PrmMainUserTemplate 		= "IONInvoiceXML_ReceivableInvoice_ST"
				NativeLPLBODTrigger = FSMBODConfigurationRel.NativeLPLBODTrigger
				if(Company.FinanceEnterpriseGroup.BODTrigger and NativeLPLBODTrigger)
					invoke TriggerReceivableInvoiceNativeLPLBOD
						invoked.PrmTriggerFrom 						= LocalTriggerFrom
						invoked.RestartFlag							= RestartFlag
						invoked.PrmFSMInboundBODTracker				= PrmFSMInboundBODTracker


		TriggerReceivableInvoiceNativeLPLBOD is an Instance Action
			restricted

			Entrance Rules
			Parameters
				PrmTriggerFrom 			is Alpha size 100
				RestartFlag 			is Boolean
				PrmFSMInboundBODTracker	is Numeric 15
			Action Rules
				initialize LocalFSMInboundBODTracker
				LocalTriggerFrom = PrmTriggerFrom
				if(RestartFlag)
					LocalFSMInboundBODTracker	= PrmFSMInboundBODTracker
				if(System != "BL")
					if (ReceivableGLDistributionNativeRel exist)
						initialize LocalTaxCount
						for each ReceivableGLDistributionNativeRel
							each.LocalOriginalCurrency 		= OriginalCurrency
							each.LocalBasecurrency 	   		= DerivedBaseCurrency
							each.LocalBODAccountingEntity	= DerivedBODAccountingEntity
							each.LocalTaxExempt 		 	= TaxExempt
							each.LocalFunctionalCurrency	= DerivedFunctionalCurrency
							each.LocalAlternateCurrency		= DerivedAlternateCurrency
							each.LocalAlternateCurrency2	= DerivedAlternateCurrency2
							each.LocalDistAccountingEntity	= DerivedAccountingEntity
							if(each.TaxCode entered)
								LocalTaxCount +=1
								each.LocalTaxSequenceCount =  LocalTaxCount
								LocalReceivableGLDistributionTaxXMLBOD += template.IONInvoice_ReceivableGLDistribution_Tax_XML_ST document for each
							else
								LocalReceivableGLDistributionXMLBOD += template.IONInvoice_ReceivableGLDistribution_XML_ST document for each

				if(LocalFSMInboundBODTracker not entered)
					invoke Create FSMInboundBODTracker
						assign result to NewBODTracker
						invoked.Verb 					= 1
						invoked.Noun 					= "Invoice"
						invoked.BODDocumentID			= DerivedDocumentID
						invoked.BODVariationID			= BODVariationID
						invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
						invoked.BODAccountingEntity		= DerivedBODAccountingEntity
						invoked.Direction				= 1
						invoked.Status					= 1
						invoked.StartDate				= system current timestamp
						invoked.Customer				= Customer
						invoked.Invoice					= ReceivableInvoice
						invoked.Reference1				= Company
						invoked.Reference2				= ReceivableInvoiceType
						invoked.Reference3				= ReceivableInvoice
						invoked.Reference4				= LocalTriggerFrom
						initialize invoked.Error
						initialize invoked.ErrorMessage
					LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
				else
					invoke Update FSMInboundBODTrackerRel
						invoked.BODDocumentID			= DerivedDocumentID
						invoked.BODVariationID			= BODVariationID
						invoked.FinanceEnterpriseGroup	= DerivedFinanceEnterpriseGroup
						invoked.BODAccountingEntity		= DerivedBODAccountingEntity
						invoked.Direction				= 1
						invoked.Status					= 1
						invoked.StartDate				= system current timestamp
						invoked.Customer				= Customer
						invoked.Invoice					= ReceivableInvoice
						invoked.Reference1				= Company
						invoked.Reference2				= ReceivableInvoiceType
						invoked.Reference3				= ReceivableInvoice
						invoked.Reference4				= LocalTriggerFrom
						initialize invoked.Error
						initialize invoked.ErrorMessage

				invoke SendReceivableInvoiceNativeLPL
					resume on error
						Error										= true
						ErrorMessageTracker							= error message
				if(Error)
					invoke Update FSMInboundBODTrackerRel
						invoked.Error 								= Error
						invoked.ErrorMessage 						= ErrorMessageTracker
						invoked.Status								= 2
						invoked.CloseDate							= system current timestamp
						invoked.BODXML								= ReceivableInvoiceXMLBOD
						invoked.BODID								= DerivedBODID
				else
					invoke Update FSMInboundBODTrackerRel
						invoked.Status									= 3
						invoked.CloseDate								= system current timestamp
						invoked.BODXML									= ReceivableInvoiceXMLBOD
						invoked.BODID									= DerivedBODID

		SendReceivableInvoiceNativeLPL is an Instance Action
			restricted
			Entrance Rules
			Action Rules
				send ion bod
					bod is ReceivableInvoiceXMLBOD
					bod type is "Sync.Invoice"
					accounting entity is DerivedBODAccountingEntity
					document id is DerivedDocumentID
					variation id is BODVariationID

		TriggerReceivableTransactionNativeLPL is an Instance Action 
			restricted
			Parameters
				PrmTriggerFrom 				is Alpha size 100
				PrmReceivableCompany		is a ReceivableCompany
				PrmReceivablePaymentHeader	is a ReceivablePaymentHeader
				PrmReceivablePayment		is a ReceivablePayment
				RestartFlag 				is Boolean
				PrmFSMInboundBODTracker		is Numeric 15
			Entrance Rules
			Action Rules
				LocalTriggerFrom 			= PrmTriggerFrom
				invoke NativeLPLBODTriggerChecks FSMBODConfigurationRTRel
					invoked.PrmVerb 					= 1
					invoked.PrmNoun						= "ReceivableTransaction"
					invoked.PrmDirection				= 1
					invoked.PrmTriggerFrom				= LocalTriggerFrom
					invoked.PrmFinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					invoked.PrmCompany 					= Company
					invoked.PrmAccountingEntity 		= GeneralLedgerCompanyRel.AccountingEntity
					invoked.PrmMainUserTemplate 		= "IONReceivableTransaction_ReceivableInvoice_ST"
				NativeLPLBODTrigger = FSMBODConfigurationRTRel.NativeLPLBODTrigger
				if(Company.FinanceEnterpriseGroup.BODTrigger and NativeLPLBODTrigger)
					invoke	TriggerReceivableTransactionNativeLPLBOD
						invoked.PrmTriggerFrom 						= LocalTriggerFrom
						invoked.PrmReceivableCompany				= PrmReceivableCompany
						invoked.PrmReceivablePaymentHeader			= PrmReceivablePaymentHeader
						invoked.PrmReceivablePayment				= PrmReceivablePayment
						invoked.RestartFlag							= RestartFlag
						invoked.PrmFSMInboundBODTracker				= PrmFSMInboundBODTracker



		TriggerReceivableTransactionNativeLPLBOD is an Instance Action 
			restricted

			Parameters
				PrmTriggerFrom 				is Alpha size 100
				PrmReceivableCompany		is a ReceivableCompany
				PrmReceivablePaymentHeader	is a ReceivablePaymentHeader
				PrmReceivablePayment		is a ReceivablePayment
				RestartFlag 				is Boolean
				PrmFSMInboundBODTracker		is Numeric 15
			Action Rules
				LocalTriggerFrom 			= PrmTriggerFrom
				LocalCompany				= PrmReceivableCompany
				LocalPaymentHeader			= PrmReceivablePaymentHeader
				LocalPayment				= PrmReceivablePayment
				initialize LocalFSMInboundBODTracker
				if(RestartFlag)
					LocalFSMInboundBODTracker	= PrmFSMInboundBODTracker
				if(LocalFSMInboundBODTracker not entered)
					invoke Create FSMInboundBODTracker
						assign result to NewBODTracker
						invoked.Verb 					= 1
						invoked.Noun 					= "ReceivableTransaction"
						invoked.Direction				= 1
						invoked.BODDocumentID			= DerivedRTDocumentID
						invoked.BODAccountingEntity		= DerivedRTBODAccountingEntity
						invoked.BODVariationID			= BODRTVariationID
						invoked.Status					= 1
						invoked.StartDate				= system current timestamp
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.Customer				= Customer
						invoked.Invoice					= ReceivableInvoice
						invoked.Reference1				= Company
						invoked.Reference2				= ReceivableInvoiceType
						invoked.Reference3				= ReceivableInvoice
						invoked.Reference4				= LocalTriggerFrom
						initialize invoked.Error
						initialize invoked.ErrorMessage
					LocalFSMInboundBODTracker	= NewBODTracker.FSMInboundBODTracker
				else
					invoke Update FSMInboundBODTrackerRel
						invoked.BODDocumentID			= DerivedRTDocumentID
						invoked.BODAccountingEntity		= DerivedRTBODAccountingEntity
						invoked.BODVariationID			= BODRTVariationID
						invoked.Status					= 1
						invoked.StartDate				= system current timestamp
						invoked.FinanceEnterpriseGroup	= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.Customer				= Customer
						invoked.Invoice					= ReceivableInvoice
						invoked.Reference1				= Company
						invoked.Reference2				= ReceivableInvoiceType
						invoked.Reference3				= ReceivableInvoice
						invoked.Reference4				= LocalTriggerFrom
						initialize invoked.Error
						initialize invoked.ErrorMessage
				invoke SendSyncReceivableTransactionNativeLPLBOD
					resume on error
						Error							= true
						ErrorMessageTracker				= error message
				if(Error)
					invoke Update FSMInboundBODTrackerRel
						invoked.Error 					= Error
						invoked.ErrorMessage 			= ErrorMessageTracker
						invoked.Status					= 2
						invoked.CloseDate				= system current timestamp
						invoked.BODID					= DerivedRTBODID
						invoked.BODXML					= ReceivableTransactionXMLBOD
				else
					invoke Update FSMInboundBODTrackerRel
						invoked.Status					= 3
						invoked.CloseDate				= system current timestamp
						invoked.BODXML					= ReceivableTransactionXMLBOD
						invoked.BODID					= DerivedRTBODID


		SendSyncReceivableTransactionNativeLPLBOD is an Instance Action
			restricted
			Entrance Rules
			Action Rules
				send ion bod
					bod is ReceivableTransactionXMLBOD
					bod type is "Sync.ReceivableTransaction"
					accounting entity is DerivedRTBODAccountingEntity
					document id is DerivedRTDocumentID
					variation id is BODRTVariationID

		ReallocateDistributionsForFundAccounting is an Instance Action
			restricted
			default label is untranslatable
			Local Fields
				LocalProgramSequence is like ProgramSequence
			Action Rules


				TotalOpenAmount = sum ReceivableInvoiceDetailRel.OpenAmount
				TotalOpenPercentage = TotalOpenAmount / SignedTransactionAmount
				if (TotalOpenPercentage < 0)
					TotalOpenPercentage = TotalOpenPercentage * -1

				LocalProgramSequence = 1

				if  (IsManualEntry
				or  (Origin.External
				and  UnpostedDistributionsRel exists)
				or   Origin.IntercompanyBilling	
				or   Origin.Sublease 
				or   Origin.AccountsPayable
				or	 Origin.ProformaInvoice)

					invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
						invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
						invoked.ReceivableGLDistribution.ProgramSequence		= LocalProgramSequence
						invoked.ReceivableCompanyGroup.GlCompany				= ReceivableInvoice.Company
						invoked.GeneralLedgerDate								= GeneralLedgerDate
						invoked.ReceivableGLDistribution.GeneralLedgerAccount	= ReceivableGeneralLedgerCodeRel.DistributionAccount


						if (IsInvoiceIdentity)
							invoked.Origin										= "RI"
						else
							invoked.Origin										= "RM"

						if (IsDebitIdentity)
							invoked.DistributionAmount.CurrencyAmount			= InvoiceAmount.CurrencyAmount * -1 * TotalOpenPercentage
						else
							invoked.DistributionAmount.CurrencyAmount			= InvoiceAmount.CurrencyAmount * TotalOpenPercentage

						invoked.Description										= Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundReallocatedDescription
						invoked.BypassStructureRelationEdit						= true 
						invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel	= ReceivableProcessLevel
						invoked.ReceivableGLDistribution.GeneralLedgerDate		= GeneralLedgerDate
						invoked.TransactionDate									= TransactionDate
						invoked.BatchNumber										= BatchNumber
						invoked.ReceivableCompanyDataGroup.Customer				= Customer
						invoked.Invoice											= ReceivableInvoice
						invoked.TransType										= ReceivableInvoiceType
						invoked.OriginalCurrency								= OriginalCurrency
						invoked.AccumulationType								= "S"
						invoked.BypassStatusEdit								= true

				else
					if  (Origin.PaymentCreatedCreditMemo)
						invoke Create ReceivableGLDistribution
							assign result to LocalNewReceivableGLDistribution
							invoked.ReceivableGLDistribution.ProgramSequence				= LocalProgramSequence
							invoked.FinanceEnterpriseGroup									= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.BatchNumber												= ReceivablePaymentHeader
							invoked.SequenceNumber											= ReceivablePayment
							invoked.ReceivableCompanyGroup.GlCompany						= ReceivablePayment.Company
							invoked.ReceivableCompanyDataGroup.TransactionCompany			= Company
							invoked.ReceivableCompanyGroup.OriginCompany					= ReceivablePayment.Company
							invoked.GeneralLedgerAccount									= ReceivableGeneralLedgerCodeRel.DistributionAccount
							invoked.Origin													= "RM"
							invoked.DistributionAmount.CurrencyAmount						= InvoiceAmount.CurrencyAmount * -1 * TotalOpenPercentage
							invoked.Description												= Company.CustomerBusinessGroup.FinanceEnterpriseGroup.FundReallocatedDescription
							invoked.BypassStructureRelationEdit								= true 
							invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel		= ReceivableProcessLevel
							invoked.ReceivableGLDistribution.GeneralLedgerDate				= GeneralLedgerDate
							invoked.TransactionDate											= GeneralLedgerDate
							invoked.TransactionDate											= TransactionDate


							invoked.ReceivableCompanyDataGroup.Customer						= Customer

							invoked.BatchNumber												= BatchNumber
							invoked.Invoice													= ReceivableInvoice
							invoked.TransType												= ReceivableInvoiceType
							invoked.OriginalCurrency										= OriginalCurrency
							invoked.CurrencyDecimalsNumber									= CurrencyDecimalsNumber
							invoked.DistributionSource										= "A"
							invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate	= 1
							invoked.AccumulationType										= "S"
							invoked.DocumentNumber											= "1-" + ReceivableInvoice
							invoked.Status													= 2
							invoked.BatchNumber												= BatchNumber
							invoked.AuditSummaryIndicator									= "01"	
							invoked.BypassStatusEdit										= true

						invoke ReleaseGLTransactionDetailForCreditMemo ReceivableGLDistributionDetailTypeRel
						invoke ReleaseGLTransactionDetailForCreditMemo LocalNewReceivableGLDistribution.ReceivableGLDistribution



				TotalOpenAmount = sum ReceivableInvoiceDetailRel.OpenAmount
				TotalOpenPercentage = TotalOpenAmount / SignedTransactionAmount
				if (TotalOpenPercentage < 0)
					TotalOpenPercentage = TotalOpenPercentage * -1

				for each ProrateDistributionsRel 

					if (each.ReceivableGLDistribution = last ProrateDistributionsRel.ReceivableGLDistribution)
						if (IsDebitIdentity)
							AmountForDistribution = TotalOpenAmount * -1
						else
							AmountForDistribution = TotalOpenAmount
					else

						LocalRoundAmount.Amount				= each.DistributionAmount.CurrencyAmount
						LocalRoundAmount.Rate				= TotalOpenPercentage
						LocalRoundAmount.NumberOfDecimals	= OriginalCurrency.NumberOfDecimals
						AmountForDistribution				= LocalRoundAmount.OutputAmount

						if (IsDebitIdentity)
							TotalOpenAmount += AmountForDistribution
						else
							TotalOpenAmount -= AmountForDistribution

					if (ZeroAmountInvoice)
						NextSentence = true
					else
						initialize LocalCalculateReceivableFinanceStructure
						LocalCalculateReceivableFinanceStructure.InputReceivableCompany			= Company
						LocalCalculateReceivableFinanceStructure.InputReceivableInvoiceType		= ReceivableInvoiceType
						LocalCalculateReceivableFinanceStructure.InputReceivableInvoice			= ReceivableInvoice
						LocalCalculateReceivableFinanceStructure.InputReceivableGLDistribution	= each.ReceivableGLDistribution
						LocalCalculateReceivableFinanceStructure.InputReceivableDistributionType = "R"
						LocalCalculateReceivableFinanceStructure.InputFinanceCodeBlock			= ReceivableGeneralLedgerCodeRel.DistributionAccount
						LocalAnswer = LocalCalculateReceivableFinanceStructure.CalculateReceivableOffsetFinanceStructure

						if (IsManualEntry
						or	Origin.External
						and   first UnpostedDistributionsRel exists
						or	Origin.IntercompanyBilling
						or	Origin.AccountsPayable
						or	Origin.ProformaInvoice)
							LocalProgramSequence += 1
							invoke CreateManualInvoiceDistributionOffset ReceivableGLDistribution
								invoked.FinanceEnterpriseGroup							= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
								invoked.ReceivableCompanyDataGroup.TransactionCompany	= Company
								invoked.ReceivableGLDistribution.ProgramSequence		= LocalProgramSequence
								invoked.ReceivableCompanyGroup.GlCompany				= ReceivableInvoice.Company
								invoked.GeneralLedgerDate								= GeneralLedgerDate
								invoked.ReceivableGLDistribution.GeneralLedgerAccount	= LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
								if (IsInvoiceIdentity)
									invoked.Origin										= "RI"
								else
									invoked.Origin										= "RM"

								if (!ReceivableInvoiceType.CreditMemo)
									if (IsDebitIdentity)
										invoked.DistributionAmount.CurrencyAmount			= AmountForDistribution * -1
									else
										invoked.DistributionAmount.CurrencyAmount			= AmountForDistribution
								else
									invoked.DistributionAmount.CurrencyAmount			= AmountForDistribution * -1

								invoked.Description										= "Batch " + BatchNumber + ", " + ReceivableInvoiceType + " " + ReceivableInvoice
								invoked.BypassStructureRelationEdit						= true 
								invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel							= ReceivableProcessLevel
								invoked.ReceivableGLDistribution.GeneralLedgerDate		= GeneralLedgerDate
								invoked.TransactionDate									= TransactionDate
								invoked.BatchNumber										= BatchNumber
								invoked.ReceivableCompanyDataGroup.Customer				= Customer
								invoked.Invoice											= ReceivableInvoice
								invoked.TransType										= ReceivableInvoiceType
								invoked.OriginalCurrency								= OriginalCurrency
								invoked.AccumulationType								= "S"
								invoked.BypassStatusEdit								= true
						else
							if (Origin.PaymentCreatedCreditMemo)
								invoke Create ReceivableGLDistribution
									invoked.FinanceEnterpriseGroup							 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup
									invoked.BatchNumber										 = ReceivablePaymentHeader
									invoked.SequenceNumber									 = ReceivablePayment
									invoked.ReceivableCompanyGroup.GlCompany				 = ReceivablePayment.Company
									invoked.ReceivableCompanyDataGroup.TransactionCompany	 = Company
									invoked.ReceivableCompanyGroup.OriginCompany			 = ReceivablePayment.Company
									invoked.GeneralLedgerAccount							 = LocalCalculateReceivableFinanceStructure.OutputFinanceCodeBlock
									invoked.Origin											 = "RM"
									invoked.DistributionAmount.CurrencyAmount				 = (AmountForDistribution * -1)
									invoked.Description										 = ("Batch " + BatchNumber + blank + ReceivableInvoiceType + blank + ReceivableInvoice)
									invoked.BypassStructureRelationEdit						 = true 
									invoked.ReceivableCompanyDataGroup.ReceivableProcessLevel = ReceivableProcessLevel
									invoked.GeneralLedgerDate					 = GeneralLedgerDate
									invoked.TransactionDate						 = GeneralLedgerDate
									invoked.TransactionDate						 = TransactionDate
									invoked.ReceivableCompanyDataGroup.Customer	 = Customer
									invoked.BatchNumber = BatchNumber
									invoked.Invoice = ReceivableInvoice
									invoked.TransType = ReceivableInvoiceType
									invoked.OriginalCurrency = OriginalCurrency
									invoked.CurrencyDecimalsNumber = CurrencyDecimalsNumber
									invoked.DistributionSource = "A"
									invoked.DistributionAmount.FunctionalAmount.EnteredCurrencyRate = 1
									invoked.AccumulationType = "S"
									invoked.DocumentNumber = ("1-" + ReceivableInvoice)
									invoked.Status = 2
									invoked.BatchNumber = BatchNumber
									invoked.AuditSummaryIndicator = "01"
									invoked.BypassStatusEdit = true


