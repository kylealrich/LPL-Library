ReceivablePaymentImport is a BusinessClass
	owned by ar
	prefix is ART
	classic name is ARIPMT

	Ontology
		symbolic key is ReceivablePaymentImport
			classic set name is ARTSET1

	Patterns
		disable AuditIndex
		disable Auditing
		disable EffectiveDated
		disable DataTranslations

	Persistent Fields
		RunGroup
		Company						is a ReceivableCompany
		BatchNumber					is like ReceivablePaymentHeader
			classic name is BATCH-NBR
		PaymentSeq					is a Sequence
		RemittanceSequence			is like LastRemittanceSequence
			classic name is REMIT-SEQ
		ReceivableLockBox
			classic name is LOCK-BOX
			default label is "ReceivableLockbox"	
		ReceivableProcessLevel
			classic name is PROCESS-LEVEL
		CashCode
		Currency
			classic name is CURRENCY-CD
		CurrencyRate				is an OrigRate
			classic name is ORIG-RATE
		DepositDate					is Date
		GeneralLedgerDate			is Date
			classic name is GL-DATE
			default label is "GlobalLedgerDate"
		Customer
		InterfacedCustomer
			default label is "ExternalCustomer"
		BankEntity					is like BankEntity 
		BankAccountNumber
			classic name is BANK-ACCT-NBR
		EDINumber
			classic name is EDI-NBR
		TransNbr					is a TransactionNumber
		TranAmt						is an InternationalAmount
		RemitType					is a ReceivableInvoiceDetailType
		TransRemNbr
		AppldAmt					is an InternationalAmount
		UserField01
			classic name is USR-FLD-01
			restricted
		UserField02
			classic name is USR-FLD-02
			restricted
		UserField03
			classic name is USR-FLD-03
			restricted
		UserField04
			classic name is USR-FLD-04
			restricted
		UserField05
			classic name is USR-FLD-05
			restricted
		RIBKey
			classic name is RIBKEY
		BankAccountValidationType
			classic name is VBANK-IDENT
		Project						is a FinanceCodeBlockProjectOnly
			classic name is ACTIVITY
		ProjectContract				is a FinanceCodeBlockProjectOnly
			classic name is CONTRACT
		CbUserField1				is AlphaUpper size 30
			classic name is CB-USER-FIELD1
			default label is "TransactionData1"		
		CbUserField2				is AlphaUpper size 30
			classic name is CB-USER-FIELD2
			default label is "TransactionData2"		
		CbUserField3				is AlphaUpper size 30
			classic name is CB-USER-FIELD3
			default label is "TransactionData3"		
		CbUserField4				is AlphaUpper size 30
			classic name is CB-USER-FIELD4
			default label is "TransactionData4"		

		ErrorMessage				is Alpha 150
		RecordInError				is Boolean
		InterfaceRun				is a ReceivablesInterfaceResult
			delete ignored
		ReceivablePaymentHeader
			delete ignored
		ReceivablePayment
			delete ignored
		CashManagementAccount		
		BankStatement				
		BankStatementLine			
		InvoiceCompany				is like ReceivableCompany
		InvoiceDetail				is a Sequence



	Local Fields
		InterfacedHeader							is a ReceivablePaymentHeader view
		InterfacedPayment							is a ReceivablePayment view
		InterfacedRemittance						is a ReceivablePaymentRemittance view
		InterfacedPrepayment						is a ReceivablePrepayment view
		LocalReceivablesInterfaceResult				is a ReceivablesInterfaceResult

		LocalRunGroup								is like RunGroup
		LocalCompany								is like ReceivableCompany
		LocalBatchNumber							is like BatchNumber
		LocalPaymentSeq								is like Sequence



		ErrorOccurred								is Boolean
		LocalErrorMessage							is Alpha 150








		ParameterReference							is like Reference
		ParameterDepositBankCode					is like BankTransactionCode
		LocalProformaInvoice						is like ProformaInvoice
		LocalProformaPendingAmount					is an InternationalAmount
		LocalExtraAmount							is an InternationalAmount
		LocalAssignCustomerBasedOnFirstInvoiceMatch	is Boolean
		LocalCustomer								is a Customer
		LocalAssignPaymentToInvoiceCompanyCustomer	is Boolean
		LocalReceivableCompany						is like ReceivableCompany
		LocalBeginDate								is Date
		LocalEndDate								is Date
		LocalRecCompany								is like ReceivableCompany
		LocalRecCustomer							is like Customer
		InterfacedInvoiceHeader						is a ReceivablePaymentHeader view
		InterfacedInvoicePayment					is a ReceivablePayment view
		LocalBankEntity								is like BankEntity
		LocalBankAccountNumber						is like BankAccountNumber 
			holds pii


	Field Groups
		SecondaryKeyFields
			RunGroup
			Company
			BatchNumber
			PaymentSeq
			RemittanceSequence


	Derived Fields
		CustomerMismatchMsg is a MessageField
			restricted
			"CustomerDoesNotMatchInterfacedCustomer"

		NoPaymentsForBatchMsg is a MessageField
			restricted
			"NoPaymentsExistForBatch"

		InvalidRecordMsg is a MessageField
			restricted
			"RecordFoundThatIsNotAHeader,Payment,OrRemitRecord"

		UnableToFindInterfacedPaymentBatchForPaymentMsg is a MessageField
			restricted
			"UnableToFindInterfacedPaymentBatchForPayment"

		UnableToFindInterfacedPaymentForRemitMsg is a MessageField
			restricted
			"UnableToFindInterfacedPaymentForRemit"

		NoEDIOnHeaderMsg is a MessageField
			restricted
			"EDINumberCannotBeEnteredOnHeaderRecord"

		NoTransNbrOnHeaderMsg is a MessageField
			restricted
			"TransactionNumberCannotBeEnteredOnHeaderRecord"

		NoTranAmtOnHeaderMsg is a MessageField
			restricted
			"TransactionAmountCannotBeEnteredOnHeaderRecord"

		NoTransRemNbrOnHeaderMsg is a MessageField 
			restricted
			"RemittanceNumberCannotBeEnteredOnHeaderRecord"

		NoRemitTypeOnHeaderMsg is a MessageField
			restricted
			"RemitTypeCannotBeEnteredOnHeaderRecord"

		NoAppldAmtOnHeaderMsg is a MessageField
			restricted
			"AppliedAmountCannotBeEnteredOnHeaderRecord"

		NoUserFieldsOnHeaderMsg is a MessageField
			restricted
			"UserFieldsCannotBeEnteredOnHeaderRecord"

		NoLockBoxOnPaymentMsg is a MessageField
			restricted
			"LockboxCannotBeEnteredOnPaymentRecord"	

		NoProcessLevelOnPaymentMsg is a MessageField
			restricted
			"ProcessLevelCannotBeEnteredOnPaymentRecord"

		NoCashCodeOnPaymentMsg is a MessageField
			restricted
			"CashCodeCannotBeEnteredOnPaymentRecord"

		NoCurrencyOnPaymentMsg is a MessageField
			restricted
			"CurrencyAndCurrencyRateCannotBeEnteredOnPaymentRecord"

		NoDepositDateOnPaymentMsg is a MessageField
			restricted
			"DepositDateAndGlobalLedgerCannotBeEnteredOnPaymentRecord"

		CashDetailsOutOfBalanceMsg is a MessageField
			restricted
			"SumOfCashDetailsDoesNotEqualPaymentAmount"

		NoLockBoxOnRemitMsg is a MessageField
			restricted
			"LockboxCannotBeEnteredOnRemitRecord"	

		NoProcessLevelOnRemitMsg is a MessageField
			restricted
			"ProcessLevelCannotBeEnteredOnPaymentRecord"

		NoCashCodeOnRemitMsg is a MessageField
			restricted
			"CashCodeCannotBeEnteredOnPaymentRecord"

		NoCurrencyOnRemitMsg is a MessageField
			restricted
			"CurrencyAndCurrencyRateCannotBeEnteredOnPaymentRecord"

		NoDepositDateOnRemitMsg is a MessageField
			restricted
			"DepositDateAndGlobalLedgerCannotBeEnteredOnPaymentRecord"

		NoCustomerOnRemitMsg is a MessageField
			restricted
			"CustomerCannotBeEnteredOnRemitRecord"

		NoEDINumberOnRemitMsg is a MessageField
			restricted
			"EDINumberCannotBeEnteredOnRemitRecord"

		NoBankInfoOnRemitMsg is a MessageField
			restricted
			"BankInformationCannotBeEnteredOnRemitRecord"

		NoTransInfoOnRemitMsg is a MessageField
			restricted
			"TransactionNumberAndAmountCannotBeEnteredOnRemitRecord"

		NoUserFieldsOnRemitMsg is a MessageField
			restricted
			"UserFieldsCannotBeEnteredOnRemitRecord"

		ApplicationAlreadyExistsMsg is a MessageField
			restricted
			"ApplicationAlreadyExistsForBatch"

		PaymentSeqRequiredForRemitMsg is a MessageField
			restricted
			"PaymentSequenceRequiredForRemittance"

		NoHeaderMsg is a MessageField
			restricted
			"InterfaceBatchRecordHasNotBeenInterfaced"

		NoPaymentMsg is a MessageField
			restricted
			"InterfacePaymentRecordHasNotBeenInterfaced"

		NoProcessLevelMsg is a MessageField
			restricted
			"Assign\Payment\To\Invoice\Company\CustomerFlagChecked;ProcessLevel-<ReceivableProcessLevel>NotExistsForCompany<LocalReceivableCompany>"

		NoComapnyCashCodeMsg is a MessageField
			restricted
			"Assign\Payment\To\Invoice\Company\CustomerFlagChecked;CompanyCashcode-<CashCode>NotExistsForCompany<LocalReceivableCompany>"

		NoLockBoxMsg is a MessageField
			restricted
			"Assign\Payment\To\Invoice\Company\CustomerFlagChecked;ReceivableLockbox-<ReceivableLockBox>NotExistsForCompany<LocalReceivableCompany>"

		NotInDateRangeMsg  is a MessageField
			restricted
			"PostDateIsNotWithinValidEntryDatesForCompany;ValidDateRangeIs<LocalBeginDate>-<LocalEndDate>"

		NoMultiCurrencyProcessingMsg is a MessageField
			restricted
			"Assign\Payment\To\Invoice\Company\CustomerFlagChecked;Company-<LocalReceivableCompany>NotSetUpForMultiCurrencyProcessing"

		NoAutomaticBatchNumberingMsg is a MessageField
			restricted
			"Assign\Payment\To\Invoice\Company\CustomerFlagChecked;Company-<LocalReceivableCompany>NotSetUpForAutomaticPaymentBatchNumbering"

		DerivedCustomer is a DerivedField
			type is like Customer
			if  (Customer not entered)
				if  (InterfacedCustomer entered
				and  CustomerMappingTableInterfaceRel exists)
					return CustomerMappingTableInterfaceRel.Customer
				else
				if  (TransRemNbr entered
				and  RemitInvoicePrimaryRel exists)
					return RemitInvoicePrimaryRel.Customer
				else
				if  (EDINumber entered
				and  CustomerEDIRel exists)
					return CustomerEDIRel.Customer
				else
				if  (RemitInvoiceAlternateRel exists)
					return RemitInvoiceAlternateRel.Customer
				else
				if (CompanyCustomerBankAccountRel not exists)
					if (LocalAssignCustomerBasedOnFirstInvoiceMatch
					and RemittancesForPaymentRel exists)
						LocalCustomer 		 = first ReceivableInvoiceRel.Customer
						if (LocalCompanyCustomerRel exists)
							return LocalCustomer
			else
				return Customer











	Field Rules
		RunGroup
			required
		Company
			required
		GeneralLedgerDate
			initial value is DepositDate
			default to DepositDate
		ReceivableProcessLevel
			if (IsHeaderRecord)
				default to Company.DefaultReceivableProcessLevel
		CashCode
			if (CashCode not entered)
				default to ReceivableProcessLevel.CashCode
		ReceivableLockBox






	Relations
		CompanyCustomerBankAccountRel
			one-to-one relation to CompanyCustomerBankAccount
			Field Mapping uses symbolic key
				related.Company													 = Company
				related.CompanyCustomerBankAccount.CustomerBankEntity			 = BankEntity
				related.CompanyCustomerBankAccount.CustomerBankAccountNumber	 = BankAccountNumber

		ProformaInvoiceRel
			one-to-one relation to ProformaInvoice
			Field Mapping uses symbolic key
				related.Company				= Company
				related.ProformaInvoice		= LocalProformaInvoice

		HeaderImportRel
			one-to-one relation to ReceivablePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= RunGroup
				related.Company				= Company
				related.BatchNumber			= BatchNumber
				related.PaymentSeq			= blank
				related.RemittanceSequence	= blank

		PaymentImportRel
			one-to-many relation to ReceivablePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= RunGroup
				related.Company				= Company
				related.BatchNumber			= BatchNumber
				related.PaymentSeq			= PaymentSeq
			Instance Selection
				where (related.IsPaymentRecord)

		ReceivablePaymentRel
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					= Company
				related.ReceivablePaymentHeader	= HeaderImportRel.ReceivablePaymentHeader
				related.ReceivablePayment		= PaymentImportRel.ReceivablePayment

		PaymentsForHeaderRel
			one-to-many relation to ReceivablePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= RunGroup
				related.Company				= Company
				related.BatchNumber			= BatchNumber
			Instance Selection
				where (related.IsPaymentRecord)

		RemittancesForPaymentRel
			one-to-many relation to ReceivablePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= RunGroup
				related.Company				= Company
				related.BatchNumber			= BatchNumber
				related.PaymentSeq			= PaymentSeq
			Instance Selection
				where (related.IsRemittanceRecord)

		CashDetailsForPaymentRel
			one-to-many relation to ReceivablePaymentCashDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= RunGroup
				related.Company				= Company
				related.BatchNumber			= BatchNumber
				related.PaymentSeq			= PaymentSeq

		OldCashDetailsForPaymentRel
			one-to-many relation to ReceivablePaymentCashDetailImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= old RunGroup
				related.Company				= old Company
				related.BatchNumber			= old BatchNumber
				related.PaymentSeq			= old PaymentSeq

		CompanyCashCodeRel
			one-to-one relation to CompanyCashCode
			Field Mapping uses symbolic key
				related.Company					= Company
				related.CashCode				= CashCode

		ReceivableApplicationRel
			one-to-many relation to ReceivableApplication
			Field Mapping uses Set2
			Instance Selection
				where (related.Company = Company
				and	related.CreditTransaction.CreditCompany		= Company
				and	related.CreditTransaction.CreditBatch		= BatchNumber)

		PaymentsOrRemitsRel
			one-to-many relation to ReceivablePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= RunGroup
				related.Company				= Company
				related.BatchNumber			= BatchNumber
			Instance Selection
				where (related.PaymentSeq entered)

		CurrentHeaderRel
			one-to-one relation to ReceivablePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= LocalRunGroup
				related.Company				= LocalCompany
				related.BatchNumber			= LocalBatchNumber
				related.PaymentSeq 			= 0
				related.RemittanceSequence	= 0

		CurrentPaymentRel
			one-to-one relation to ReceivablePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= LocalRunGroup
				related.Company				= LocalCompany
				related.BatchNumber			= LocalBatchNumber
				related.PaymentSeq 			= LocalPaymentSeq
				related.RemittanceSequence	= 0

		RunGroupCompanyRecordsRel
			one-to-many relation to ReceivablePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= LocalRunGroup
				related.Company				= LocalCompany

		RunGroupRecordsRel
			one-to-many relation to ReceivablePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= LocalRunGroup

		CustomerMappingTableInterfaceRel
			one-to-one relation to CustomerMappingTableInterface
			Field Mapping uses ByInterfacedCustomer
				related.CustomerGroup				= Company.CustomerGroupField.CustomerGroup
				related.InterfacedCustomer			= InterfacedCustomer

		CustomerEDIRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses Set9
				related.Company					= Company
				related.EDINumber				= EDINumber

		GeneralLedgerCompanyRel
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		LocalInterfaceResultsRel
			one-to-one relation to ReceivablesInterfaceResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ReceivablesInterfaceResult			= LocalReceivablesInterfaceResult

		ReceivableLockBoxRel
			one-to-many relation to ReceivableLockBox
			Field Mapping uses ByCompanyProcessLevel
				related.Company			= Company

		KeyReceivableLockBoxRel	
			one-to-one relation to ReceivableLockBox
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
				related.ReceivableLockBox				= ReceivableLockBox 

		RemitInvoicePrimaryRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses symbolic key
				related.Company							= Company
				related.ReceivableInvoiceType			= RemitType
				related.ReceivableInvoice				= TransRemNbr

		RemitInvoiceAlternateRel
			one-to-one relation to ReceivableInvoice
			Field Mapping uses Set6
				related.Company							= Company
				related.AlternateReceivableInvoiceType	= RemitType
				related.ReceivableInvoice				= TransRemNbr

		ReceivableInvoiceRel
			one-to-many relation to ReceivableInvoice
			Field Mapping uses Set5
				related.AlternateReceivableInvoiceType		= first RemittancesForPaymentRel.RemitType
				related.ReceivableInvoice					= first RemittancesForPaymentRel.TransRemNbr

		LocalCompanyCustomerRel
			one-to-one relation to CompanyCustomer
			Field Mapping uses symbolic key
				related.Company		= Company
				related.Customer	= LocalCustomer

		CompaniesForCustomerGroupRel
			one-to-many relation to ReceivableCompany
			Field Mapping uses Set2
				related.CustomerGroupField.CustomerGroup = Company.CustomerGroupField.CustomerGroup

		ReceivableProcessLevelRel
			one-to-one relation to ReceivableProcessLevel
			Field Mapping uses symbolic key
				related.Company					= LocalReceivableCompany
				related.ReceivableProcessLevel	= ReceivableProcessLevel

		LocalCompanyCashCodeRel
			one-to-one relation to CompanyCashCode
			Field Mapping uses symbolic key
				related.Company					= LocalReceivableCompany
				related.CashCode				= CashCode

		LocalReceivableLockBoxRel
			one-to-many relation to ReceivableLockBox
			Field Mapping uses ByCompanyProcessLevel
				related.Company			= LocalReceivableCompany

		AllCompanyCustomerBankAccountRel
			one-to-many relation to CompanyCustomerBankAccount
			Field Mapping uses Set3	
				related.CompanyCustomerBankAccount.CustomerBankAccountNumber		 = BankAccountNumber
				related.CompanyCustomerBankAccount.CustomerBankEntity				 = BankEntity




		ReceivablePaymentHeadersCreatedRel
			one-to-many relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company						= LocalRecCompany
			Instance Selection
				where (related.OriginatingInterfaceRun = LocalReceivablesInterfaceResult
				and related.InterfaceInProcess
				and related.Status.OpenBatchUnreleased)

		AllPaymentHeadersCreatedRel
			one-to-many relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key 
			Instance Selection
				where (related.OriginatingInterfaceRun = LocalReceivablesInterfaceResult
				and related.Status.OpenBatchUnreleased
				and related.InterfaceInProcess)

		CurrentPaymentHeaderRel
			one-to-one relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company						= LocalRecCompany
				related.ReceivablePaymentHeader		= ReceivablePaymentHeader

		CurrentReceivablePaymentRel
			one-to-one relation to ReceivablePayment
			Field Mapping uses symbolic key
				related.Company					= LocalRecCompany
				related.ReceivablePaymentHeader	= ReceivablePaymentHeader
				related.ReceivablePayment		= ReceivablePayment

		ReceivablePaymentCreatedRel
			one-to-many relation to ReceivablePayment
			Field Mapping uses symbolic key
			Instance Selection
				where (related.ReceivablePaymentHeader	= PaymentImportRel.ReceivablePaymentHeader
				and	related.ReceivablePayment			= PaymentImportRel.ReceivablePayment
				and	related.OriginatingInterfaceRun		 = LocalReceivablesInterfaceResult)

		PaymentsForBankEntityAccountNumberRel
			one-to-many relation to ReceivablePaymentImport
			Field Mapping uses ByRunGroup
				related.RunGroup			= RunGroup
				related.Company				= Company
				related.BatchNumber			= BatchNumber
			Instance Selection
				where (related.IsPaymentRecord
				and	related.BankEntity = LocalBankEntity
				and	related.BankAccountNumber = LocalBankAccountNumber )



	Conditions

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		ProformaEligibe
			restricted
			when (ProformaInvoiceRel exists
			and	  ProformaInvoiceRel.Status.Open)

		IsHeaderRecord
			restricted
			classic name is ARTSET3
			when (PaymentSeq not entered
			and   RemittanceSequence not entered)

		IsPaymentRecord
			restricted
			classic name is ARTSET2
			when (PaymentSeq entered
			and   RemittanceSequence not entered)

		IsRemittanceRecord
			restricted
			classic name is ARTSET2
			when (PaymentSeq entered
			and   RemittanceSequence entered)

		ShowCashDetails
			restricted
			when (IsPaymentRecord
			and   Company.DetailedCashDistributions)

		ErrorExists
			when (ErrorMessage entered)

		RecordExists
			when (Company entered)


		UpdateHeaderFields
			when (IsHeaderRecord
			or	!RecordExists)

		DisplayPaymentPanel
			when (IsPaymentRecord
			or	!RecordExists)

		DisplayRemittancePanel
			when (IsRemittanceRecord
			or	!RecordExists)

		AllowUpdate
			when ((IsHeaderRecord
			and	ReceivablePaymentHeader not entered)
			or	(IsPaymentRecord
			and	ReceivablePayment not entered)
			or	 IsRemittanceRecord)



	Sets

		Set2
			indexed
			Instance Selection
				where (IsPaymentRecord)
			Sort Order
				Company
				BatchNumber
				PaymentSeq
				RemittanceSequence
				RunGroup

		Set3
			indexed
			Instance Selection
				where (IsHeaderRecord)
			Sort Order
				Company
				BatchNumber
				PaymentSeq
				RemittanceSequence
				RunGroup

		Set4
			indexed
			Instance Selection
				where (IsHeaderRecord)
			Sort Order
				BatchNumber
				Company
				PaymentSeq
				RemittanceSequence
				RunGroup

		ByRunGroup
			indexed
			Sort Order
				RunGroup
				Company
				BatchNumber
				PaymentSeq
				RemittanceSequence

		ByInterfaceRun
			Sort Order
				InterfaceRun
				RunGroup
				Company
				BatchNumber
				PaymentSeq
				RemittanceSequence



	Rule Blocks
		InterfaceEdits
			ErrorOccurred = false

			if (!ErrorOccurred)
				if  (IsHeaderRecord)
					if  (!PaymentsOrRemitsRel exists)
						ErrorOccurred		= true
						LocalErrorMessage	= NoPaymentsForBatchMsg
					else
					if  (!Company.PaymentBatchNumbering
					and  ReceivableApplicationRel exists)
						ErrorOccurred		= true
						LocalErrorMessage	= ApplicationAlreadyExistsMsg
					else
					if  (EDINumber entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoEDIOnHeaderMsg
					else
					if  (TransNbr entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoTransNbrOnHeaderMsg
					else
					if  (TranAmt entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoTranAmtOnHeaderMsg
					else
					if  (RemitType entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoRemitTypeOnHeaderMsg
					else
					if  (AppldAmt entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoAppldAmtOnHeaderMsg
					else
					if  (UserField01 entered
					or   UserField02 entered
					or   UserField03 entered
					or   UserField04 entered
					or   UserField05 entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoUserFieldsOnHeaderMsg
				else
				if  (IsPaymentRecord)
					if (!HeaderImportRel exists)
						ErrorOccurred		= true
						LocalErrorMessage	= NoHeaderMsg
					else
					if  (Customer entered
					and  InterfacedCustomer entered
					and  Customer != CustomerMappingTableInterfaceRel.Customer)
						ErrorOccurred		= true
						LocalErrorMessage	= CustomerMismatchMsg
					else
					if  (ReceivableLockBox entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoLockBoxOnPaymentMsg
					else
					if  (ReceivableProcessLevel entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoProcessLevelOnPaymentMsg
					else
					if  (CashCode entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoCashCodeOnPaymentMsg
					else
					if  (Currency entered
					or   CurrencyRate entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoCurrencyOnPaymentMsg
					else
					if  (DepositDate entered
					or   GeneralLedgerDate entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoDepositDateOnPaymentMsg

					if (not ErrorOccurred
					and Company.DetailedCashDistributions
					and CashDetailsForPaymentRel exists)
						if (sum CashDetailsForPaymentRel.TransactionAmount != TranAmt)
							ErrorOccurred		= true
							LocalErrorMessage	= CashDetailsOutOfBalanceMsg
						if (not ErrorOccurred
						and HeaderImportRel.ReceivablePaymentHeader exists)
							for each CashDetailsForPaymentRel
								invoke ValidateFinanceCodeBlock each
									resume on error
										ErrorOccurred		= true
										LocalErrorMessage	= error message
									invoked.TransientCashCode				= HeaderImportRel.ReceivablePaymentHeader.CashCode
									invoked.TransientRNACode				= HeaderImportRel.ReceivablePaymentHeader.ReceivedNotAppliedReceivableGeneralLedgerCode
				else
					if (!HeaderImportRel exists)
						ErrorOccurred		= true
						LocalErrorMessage	= NoHeaderMsg
					else
					if (!PaymentImportRel exists)
						ErrorOccurred		= true
						LocalErrorMessage	= NoPaymentMsg
					else
					if (RemittanceSequence entered
					and PaymentSeq not entered)
						ErrorOccurred		= true
						LocalErrorMessage	= PaymentSeqRequiredForRemitMsg
					else
					if  (ReceivableLockBox entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoLockBoxOnRemitMsg
					else
					if  (ReceivableProcessLevel entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoProcessLevelOnRemitMsg
					else
					if  (CashCode entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoCashCodeOnRemitMsg
					else
					if  (Currency entered
					or   CurrencyRate entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoCurrencyOnRemitMsg
					else
					if  (DepositDate entered
					or   GeneralLedgerDate entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoDepositDateOnRemitMsg
					else
					if  (Customer entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoCustomerOnRemitMsg
					else
					if  (EDINumber entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoEDINumberOnRemitMsg
					else
					if  (BankEntity entered
					or   BankAccountNumber entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoBankInfoOnRemitMsg
					else
					if  (TransNbr entered
					or   TranAmt entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoTransInfoOnRemitMsg
					else
					if  (UserField01 entered
					or   UserField02 entered
					or   UserField03 entered
					or   UserField04 entered
					or   UserField05 entered)
						ErrorOccurred		= true
						LocalErrorMessage	= NoUserFieldsOnRemitMsg



		InterfaceThisPayment

			initialize ErrorOccurred

			if  (IsHeaderRecord
			and  ReceivablePaymentHeader entered)
				invoke FastUpdate ReceivablePaymentHeader
					invoked.OriginatingInterfaceRun			= LocalReceivablesInterfaceResult
			else
			if  (IsPaymentRecord
			and  ReceivablePayment entered)
				if (LocalAssignPaymentToInvoiceCompanyCustomer)
					initialize LocalRecCompany
					initialize LocalRecCustomer
					if (DerivedCustomer = blank)
						LocalRecCompany = first AllCompanyCustomerBankAccountRel.Company
						LocalRecCustomer= first AllCompanyCustomerBankAccountRel.Customer
					if (LocalRecCompany not entered)
						LocalRecCompany = Company
					invoke FastUpdate CurrentPaymentHeaderRel
						invoked.OriginatingInterfaceRun			= LocalReceivablesInterfaceResult
					invoke FastUpdate CurrentReceivablePaymentRel
						invoked.OriginatingInterfaceRun				= LocalReceivablesInterfaceResult
				else
					invoke FastUpdate ReceivablePayment
						invoked.OriginatingInterfaceRun			= LocalReceivablesInterfaceResult

			else
				include InterfaceEdits

				if (ErrorOccurred)
					invoke SetError
						invoked.PrmErrorMessage				= LocalErrorMessage
						invoked.InterfaceResults			= LocalReceivablesInterfaceResult
				else
				if  (IsHeaderRecord)

					invoke OpenBatchUnreleased.Create ReceivablePaymentHeader
						assign result to InterfacedHeader
						resume on error
							ErrorOccurred					= true
							LocalErrorMessage				= error message
						fill in user fields from this instance
						invoked.Company						= Company
						if  (!Company.PaymentBatchNumbering)
							invoked.ReceivablePaymentHeader		= BatchNumber
						invoked.ReceivableProcessLevel		= ReceivableProcessLevel
						invoked.ReceivableLockBox			= ReceivableLockBox
						invoked.DepositDate					= DepositDate
						invoked.GeneralLedgerDate			= GeneralLedgerDate
						invoked.Currency					= Currency
						invoked.CurrencyRate				= CurrencyRate
						invoked.CbUserField1				= CbUserField1
						invoked.CbUserField2				= CbUserField2
						invoked.CbUserField3				= CbUserField3
						invoked.CbUserField4				= CbUserField4
						if (TransRemNbr entered)
							invoked.Reference				= TransRemNbr
						else
							invoked.Reference				= ParameterReference
						invoked.DepositBankCode 			= ParameterDepositBankCode
						invoked.CashCode					= CashCode
						invoked.OriginatingInterfaceRun		= LocalReceivablesInterfaceResult
						if (first PaymentsForHeaderRel.BankStatement entered)   
							invoked.Origin					  = "B"		   
						else													
							invoked.Origin					  = "N"		   
						invoked.InterfaceInProcess			= true

					if (ErrorOccurred)
						invoke SetError
							invoked.PrmErrorMessage				= LocalErrorMessage
							invoked.InterfaceResults			= LocalReceivablesInterfaceResult

					else
						ReceivablePaymentHeader				= InterfacedHeader.ReceivablePaymentHeader
				else
				if  (IsPaymentRecord)

					if (LocalAssignPaymentToInvoiceCompanyCustomer)
						if (!HeaderImportRel.RecordInError )
							initialize LocalRecCompany
							initialize LocalRecCustomer
							if (DerivedCustomer = blank)
								LocalRecCompany = first AllCompanyCustomerBankAccountRel.Company
								LocalRecCustomer= first AllCompanyCustomerBankAccountRel.Customer
							if (LocalRecCompany not entered)
								LocalRecCompany = Company
							if  (ReceivablePaymentHeader entered)
								invoke FastUpdate CurrentPaymentHeaderRel
									invoked.OriginatingInterfaceRun			= LocalReceivablesInterfaceResult
							if  (ReceivablePayment entered)
								invoke FastUpdate CurrentReceivablePaymentRel
									invoked.OriginatingInterfaceRun			= LocalReceivablesInterfaceResult
							if (ReceivablePaymentHeadersCreatedRel not exists)
								invoke OpenBatchUnreleased.Create ReceivablePaymentHeader
									assign result to InterfacedInvoiceHeader
									resume on error
										ErrorOccurred					= true
										LocalErrorMessage				= error message
									fill in user fields from this instance
									invoked.Company						= LocalRecCompany
									if  (!Company.PaymentBatchNumbering)
										invoked.ReceivablePaymentHeader	= HeaderImportRel.BatchNumber
									invoked.ReceivableProcessLevel		= HeaderImportRel.ReceivableProcessLevel
									invoked.ReceivableLockBox			= HeaderImportRel.ReceivableLockBox
									invoked.DepositDate					= HeaderImportRel.DepositDate
									invoked.GeneralLedgerDate			= HeaderImportRel.GeneralLedgerDate
									invoked.Currency					= HeaderImportRel.Currency
									invoked.CurrencyRate				= HeaderImportRel.CurrencyRate
									invoked.CbUserField1				= HeaderImportRel.CbUserField1
									invoked.CbUserField2				= HeaderImportRel.CbUserField2
									invoked.CbUserField3				= HeaderImportRel.CbUserField3
									invoked.CbUserField4				= HeaderImportRel.CbUserField4
									if (HeaderImportRel.TransRemNbr entered)
										invoked.Reference				= HeaderImportRel.TransRemNbr
									else
										invoked.Reference				= HeaderImportRel.ParameterReference
									invoked.DepositBankCode 			= HeaderImportRel.ParameterDepositBankCode
									invoked.CashCode					= HeaderImportRel.CashCode
									invoked.OriginatingInterfaceRun		= LocalReceivablesInterfaceResult
									invoked.InterfaceInProcess			= true
									invoked.Origin					  = "N"		   
							if (ErrorOccurred)
								invoke SetError
									invoked.PrmErrorMessage				= LocalErrorMessage
									invoked.InterfaceResults			= LocalReceivablesInterfaceResult
							else
								if (InterfacedInvoiceHeader.ReceivablePaymentHeader entered)
									ReceivablePaymentHeader = InterfacedInvoiceHeader.ReceivablePaymentHeader
								else
									ReceivablePaymentHeader = first ReceivablePaymentHeadersCreatedRel.ReceivablePaymentHeader

								if  (ReceivablePayment not entered)
									invoke InterfaceCreate ReceivablePayment
										assign result to InterfacedInvoicePayment
										resume on error
											ErrorOccurred		= true
											LocalErrorMessage	= error message
										fill in user fields from this instance
										invoked.Company					= LocalRecCompany
										invoked.ReceivablePaymentHeader	= ReceivablePaymentHeader
										invoked.TypeOfPayment			= "P"
										invoked.PaymentNumber			= TransNbr
										invoked.TransactionAmount		= TranAmt
										invoked.DepositDate				= ReceivablePaymentHeader.DepositDate
										invoked.GeneralLedgerDate		= ReceivablePaymentHeader.GeneralLedgerDate
										invoked.ReceivableProcessLevel	= ReceivablePaymentHeader.ReceivableProcessLevel
										invoked.CashCode				= ReceivablePaymentHeader.CashCode
										invoked.Customer				= LocalRecCustomer
										invoked.BankEntity				= BankEntity
										invoked.BankAccountNumber		= BankAccountNumber
										invoked.OriginatingInterfaceRun	= LocalReceivablesInterfaceResult
										invoked.ReferenceNumber			= ParameterReference

										if (CashManagementAccount entered)	
											invoked.CashManagementAccount		= CashManagementAccount	

										if (BankStatement entered)		
											invoked.Origin				= "B"		
											invoked.BankStatement		= BankStatement		


										if (BankStatementLine entered)		
											invoked.BankStatementLine	= BankStatementLine		
										if (BankStatement not entered)			
											invoked.Origin				= "N"	

									if (ErrorOccurred)
										invoke SetError
											invoked.PrmErrorMessage				= LocalErrorMessage
											invoked.InterfaceResults			= LocalReceivablesInterfaceResult
									else
										ReceivablePaymentHeader				= InterfacedInvoicePayment.ReceivablePaymentHeader
										ReceivablePayment					= InterfacedInvoicePayment.ReceivablePayment
										invoke FastUpdate CurrentPaymentHeaderRel
											invoked.BatchCount				+= 1
											invoked.BatchTotal				+= TranAmt
					else
						initialize LocalProformaInvoice
						initialize LocalProformaPendingAmount
						initialize LocalExtraAmount
						if (first RemittancesForPaymentRel.TransRemNbr[1:2] = "PF")
							LocalProformaInvoice = first RemittancesForPaymentRel.TransRemNbr[3:10]
						LocalProformaPendingAmount = (ProformaInvoiceRel.InvoiceAmount - sum ProformaInvoiceRel.ReceivablePrepaymentRel.ReceivablePayment.TransactionAmount)
						if (LocalProformaPendingAmount > 0)
							LocalExtraAmount = TranAmt - LocalProformaPendingAmount

						invoke InterfaceCreate ReceivablePayment
							assign result to InterfacedPayment
							resume on error
								ErrorOccurred		= true
								LocalErrorMessage	= error message
							fill in user fields from this instance
							invoked.Company					= Company
							invoked.ReceivablePaymentHeader = HeaderImportRel.ReceivablePaymentHeader.ReceivablePaymentHeader
							invoked.TypeOfPayment			= "P"
							invoked.PaymentNumber			= TransNbr
							if (LocalExtraAmount > 0)
								invoked.TransientSeparatePaymentAmount = LocalExtraAmount
								invoked.TransactionAmount	= TranAmt - LocalExtraAmount
							else
								invoked.TransactionAmount	= TranAmt

							invoked.DepositDate				= HeaderImportRel.DepositDate
							invoked.GeneralLedgerDate		= HeaderImportRel.GeneralLedgerDate
							invoked.ReceivableProcessLevel	= HeaderImportRel.ReceivableProcessLevel
							invoked.CashCode				= HeaderImportRel.CashCode
							invoked.Customer				= DerivedCustomer
							invoked.BankEntity				= BankEntity
							invoked.BankAccountNumber		= BankAccountNumber
							invoked.OriginatingInterfaceRun	= LocalReceivablesInterfaceResult

							if (CashManagementAccount entered)	
								invoked.CashManagementAccount		= CashManagementAccount	

							if (BankStatement entered)		
								invoked.Origin				= "B"		
								invoked.BankStatement		= BankStatement		

							if (BankStatementLine entered)		
								invoked.BankStatementLine	= BankStatementLine		

							if (TransRemNbr entered)
								invoked.ReferenceNumber		= TransRemNbr
							else
								invoked.ReferenceNumber		= ParameterReference
							if (BankStatement not entered)			
								invoked.Origin				= "N"	

						if (ErrorOccurred)

							invoke SetError
								invoked.PrmErrorMessage				= LocalErrorMessage
								invoked.InterfaceResults			= LocalReceivablesInterfaceResult
						else
							ReceivablePaymentHeader				= InterfacedPayment.ReceivablePaymentHeader
							ReceivablePayment					= InterfacedPayment.ReceivablePayment
							invoke FastUpdate ReceivablePaymentHeader
								invoked.BatchCount				+= 1
								if (LocalExtraAmount > 0)
									invoked.BatchTotal				+= (TranAmt - LocalExtraAmount)
								else
									invoked.BatchTotal				+= TranAmt
					
					if (not ErrorOccurred
					and Company.DetailedCashDistributions
					and ReceivablePayment exists
					and CashDetailsForPaymentRel exists)
						for each CashDetailsForPaymentRel
							invoke Create ReceivablePaymentCashDetail
								invoked.Company													= Company
								invoked.ReceivablePaymentHeader									= ReceivablePaymentHeader
								invoked.ReceivablePayment										= ReceivablePayment
								invoked.DistributionAmount.CurrencyAmount 						= each.TransactionAmount
								invoked.DistributionAmount.ExchangeDate							= ReceivablePayment.DepositDate
								invoked.GlobalLedgerDate 										= ReceivablePayment.GeneralLedgerDate
								invoked.CashFinanceCodeBlock									= each.CashFinanceCodeBlock
							
							invoke FastDelete each
				else
				if  (IsRemittanceRecord)

					if (TransRemNbr[1:2] = "PF")
						LocalProformaInvoice = TransRemNbr[3:10]
						if (ProformaEligibe)
							invoke Create ReceivablePrepayment
								assign result to InterfacedPrepayment
								resume on error
									ErrorOccurred		= true
									LocalErrorMessage	= error message
								invoked.Company							= Company
								invoked.ReceivablePaymentHeader 		= HeaderImportRel.ReceivablePaymentHeader
								invoked.ReceivablePayment 				= PaymentImportRel.ReceivablePayment
								invoked.InputReferenceType				= "R"
								invoked.ProformaInvoice					= LocalProformaInvoice
						if (ErrorOccurred)
							invoke SetError
								invoked.PrmErrorMessage				= LocalErrorMessage
								invoked.InterfaceResults			= LocalReceivablesInterfaceResult

					invoke Create ReceivablePaymentRemittance
						assign result to InterfacedRemittance
						resume on error
							ErrorOccurred		= true
							LocalErrorMessage	= error message
						fill in user fields from this instance
						if(LocalAssignPaymentToInvoiceCompanyCustomer)
							invoked.Company						= first ReceivablePaymentCreatedRel.Company
							invoked.ReceivablePaymentHeader 	= PaymentImportRel.ReceivablePaymentHeader
						else
							invoked.Company						= Company
							invoked.ReceivablePaymentHeader 	= HeaderImportRel.ReceivablePaymentHeader
						invoked.ReceivablePayment 				= PaymentImportRel.ReceivablePayment
						invoked.ReceivablePaymentRemittance		= RemittanceSequence
						if (RemitType not entered)
							invoked.ReceivableInvoiceType 		= "I"
						else
							invoked.ReceivableInvoiceType 		= RemitType
						invoked.ReceivableInvoice				= TransRemNbr
						invoked.InvoiceCompany					= InvoiceCompany
						invoked.InvoiceDetail					= InvoiceDetail
						if (ProformaEligibe)
							invoked.AppldAmt					= ReceivablePaymentRel.TransactionAmount
							invoked.TransientProformaInterface	= true
							invoked.Status						= 2
						else
							invoked.AppldAmt					= AppldAmt

					if (ErrorOccurred)
						invoke SetError
							invoked.PrmErrorMessage				= LocalErrorMessage
							invoked.InterfaceResults			= LocalReceivablesInterfaceResult

					else
						invoke FastDelete



	Actions
		Create is a Create Action
			Entrance Rules




			Exit Rules	
				if (IsPaymentRecord)	
					if (RemitType entered)	
						initialize RemitType	
					if (TransRemNbr entered)	
						initialize TransRemNbr	


		Update is an Update Action
			valid when (AllowUpdate)
			Entrance Rules



			Action Rules
				if (SecondaryKeyFields changed)
					if (IsPaymentRecord)
						invoke FastUpdate OldCashDetailsForPaymentRel
							invoked.RunGroup			= RunGroup
							invoked.Company				= Company
							invoked.BatchNumber			= BatchNumber
							invoked.PaymentSeq			= PaymentSeq

			Exit Rules	
				if (IsPaymentRecord)	
					if (RemitType entered)	
						initialize RemitType	
					if (TransRemNbr entered)	
						initialize TransRemNbr	



		Delete is a Delete Action
			Entrance Rules
				if (IsPaymentRecord)
					invoke FastDelete CashDetailsForPaymentRel


		DeleteAllTransactionsForRunGroup is a Set Action
			default label is "DeleteAllTransactionsForRunGroup"
			confirmation required

			Parameters
				PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup	
					default label is "FinanceEnterpriseGroup"	
				PrmRunGroup				is AlphaUpper 30
					default label is "RunGroup"

			Parameter Rules
				PrmFinanceEnterpriseGroup	
					default to actor.context.FinanceEnterpriseGroup	

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup)	

			Action Rules
				Instance Rules
					invoke FastDelete


		InterfacePayments is a Set Action
			default label is "InterfacePayments"
			Parameters
				PrmFinanceEnterpriseGroup				is a FinanceEnterpriseGroup
				PrmRunGroup								is a RunGroup
					default label is "RunGroup"
				PrmCompany								is a ReceivableCompany
				PrmReference							is like Reference
				ReleaseBatch							is Boolean
				DepositBankCode							is a BankTransactionCode
					context of PrmCompany
				AssignCustomerBasedOnFirstInvoiceMatch	is Boolean
				AssignPaymentToInvoiceCompanyCustomer	is Boolean

			Parameter Rules
				PrmFinanceEnterpriseGroup
					default to actor.context.FinanceEnterpriseGroup

				PrmRunGroup
					required
						"RunGroupIsRequired"

				PrmCompany
					if (AssignPaymentToInvoiceCompanyCustomer)
						required

				ReleaseBatch
					initial value is true

				AssignPaymentToInvoiceCompanyCustomer
					if (AssignCustomerBasedOnFirstInvoiceMatch)
						cannot be entered
							"CannotCheckBothTheFlags;\Assign\Customer\On\First\Remit\Match&Assign\Payment\To\Invoice\Company\Customer"

			Local Fields
				LocalInstanceCount					is Numeric 10
				LocalInterfaceResultView			is a ReceivablesInterfaceResult view
				CurrentRunGroup						is like RunGroup
				CurrentBatch						is like ReceivablePaymentHeader
				CurrentCompany						is like ReceivableCompany
				CurrentPaymentSeq					is like Sequence
				LocalActor							is Actor
				LocalReceivablePaymentCount			is Numeric 12
				LocalReceivablePaymentDetailCount	is Numeric 12
				LocalReceivablePaymentBatchCount	is Numeric 12
				LocalAssignPaymetError				is Boolean
				LocalSimilarImportPayment			is Boolean
				LocalPaymentCount					is Numeric 12

			Instance Selection
				where (RunGroup	= PrmRunGroup
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	=	 PrmFinanceEnterpriseGroup	
				and	(PrmCompany							 not entered
				or	 Company						=	 PrmCompany))

			Sort Order
				RunGroup
				Company
				BatchNumber
				PaymentSeq
				RemittanceSequence

			Action Rules

				Empty Set Rules
					invoke Create ReceivablesInterfaceResult
						assign result to LocalInterfaceResultView
						invoked.FinanceEnterpriseGroup		 = PrmFinanceEnterpriseGroup
						invoked.RunTime						 = current timestamp
						invoked.RunGroup					 = PrmRunGroup
						invoked.RunType						 = 2
						invoked.Company						 = PrmCompany
						invoked.PrmReference				 = PrmReference
						invoked.ReleaseBatch				 = ReleaseBatch
						invoked.DepositBankCode				 = DepositBankCode
						invoked.Status						 = 1

				RunGroup Set Rules
					Entrance Rules
						CurrentRunGroup						 = RunGroup
						ErrorOccurred						 = false

						invoke Create ReceivablesInterfaceResult
							assign result to LocalInterfaceResultView
							invoked.FinanceEnterpriseGroup		 = PrmFinanceEnterpriseGroup
							invoked.RunTime						 = current timestamp
							invoked.RunGroup					 = PrmRunGroup
							invoked.RunType						 = 2
							invoked.Company						 = PrmCompany
							invoked.PrmReference				 = PrmReference
							invoked.ReleaseBatch				 = ReleaseBatch
							invoked.DepositBankCode				 = DepositBankCode
						LocalReceivablesInterfaceResult			 = LocalInterfaceResultView.ReceivablesInterfaceResult
						if (AssignPaymentToInvoiceCompanyCustomer)
							initialize RecordInError
							for each CompaniesForCustomerGroupRel
								LocalReceivableCompany				 = each.Company
								if (!each.PaymentBatchNumbering)
									ErrorOccurred					 = true
									LocalAssignPaymetError			 = true
									LocalErrorMessage				 = NoAutomaticBatchNumberingMsg
									end for each
								if (!each.MultiCurrencyProcessing)
									ErrorOccurred					 = true
									LocalErrorMessage				 = NoMultiCurrencyProcessingMsg
									LocalAssignPaymetError			 = true
									end for each
								if (ReceivableProcessLevel entered)
									if (!ReceivableProcessLevelRel exists)
										ErrorOccurred				 = true
										LocalErrorMessage			 = NoProcessLevelMsg
										LocalAssignPaymetError		 = true
										end for each
								if (CashCode entered)
									if (!LocalCompanyCashCodeRel exists)
										ErrorOccurred				 = true
										LocalErrorMessage			 = NoComapnyCashCodeMsg
										LocalAssignPaymetError		 = true
										end for each
								if (ReceivableLockBox entered)
									if (!LocalReceivableLockBoxRel exists)
										ErrorOccurred				 = true
										LocalErrorMessage			 = NoLockBoxMsg
										LocalAssignPaymetError		 = true
										end for each
								if (GeneralLedgerDate entered)
									if (each.CompanySystemClosingControlRel.Control and each.VerifyGLDateWithinGLDateRange)
										if (GeneralLedgerDate not within each.CompanySystemClosingControlRel.ValidEntryDate)
											LocalBeginDate			 = each.CompanySystemClosingControlRel.ValidEntryDate.Begin
											LocalEndDate			 = each.CompanySystemClosingControlRel.ValidEntryDate.End
											ErrorOccurred			 = true
											LocalErrorMessage		 = NotInDateRangeMsg
											LocalAssignPaymetError	 = true
											end for each
							if (ErrorOccurred)
								invoke SetError
									invoked.PrmErrorMessage			 = LocalErrorMessage
									invoked.InterfaceResults		 = LocalReceivablesInterfaceResult

					Exit Rules



						invoke Update LocalInterfaceResultView.ReceivablesInterfaceResult
							invoked.RecordsProcessed		= LocalInstanceCount
							if (LocalInterfaceResultView.Status != 2)
								invoked.Status					= 1

							invoked.ReceivableInterfaceCounts.BatchCount			= LocalReceivablePaymentBatchCount
							invoked.ReceivableInterfaceCounts.PassedHeaderCount		= LocalReceivablePaymentCount
							invoked.ReceivableInterfaceCounts.AdditionalDetailCount	= LocalReceivablePaymentDetailCount


						LocalActor = actor
						send notification
							to LocalActor
							description is "ReceivablePaymentInterfaceHasCompleted"
							priority is high
							detail is "ResultsCanBeSeenInInterfaceResults"

				Company Set Rules
					Entrance Rules
						CurrentCompany					= Company

				BatchNumber Set Rules
					Entrance Rules
						CurrentBatch					= BatchNumber






					Exit Rules

						LocalRunGroup					= CurrentRunGroup
						LocalCompany					= CurrentCompany
						LocalBatchNumber				= CurrentBatch






						ErrorOccurred = false
						if (AssignPaymentToInvoiceCompanyCustomer)
							for each AllPaymentHeadersCreatedRel
								if (each.PaymentsExist)
									if  (ReleaseBatch
									and  !CurrentHeaderRel.RecordInError
									and  !CurrentHeaderRel.PaymentsOrRemitsRel exists)
										invoke OpenBatchUnreleased.Release each
											resume on error
												ErrorOccurred		= true
												LocalErrorMessage	= error message

										if (ErrorOccurred)
											invoke FastUpdate CurrentHeaderRel
												invoked.RecordInError		= true
												invoked.ErrorMessage		= LocalErrorMessage
								else
									if  (!CurrentHeaderRel.RecordInError
									and  !CurrentHeaderRel.PaymentsOrRemitsRel exists)
										invoke OpenBatchUnreleased.FastUpdate each
											resume on error
												ErrorOccurred		= true
												LocalErrorMessage	= error message
											invoked.Reference	= "Payment Interface Working Batch"
											invoked.Status		= 1

								if  (!ErrorOccurred
								and  !CurrentHeaderRel.RecordInError
								and  !CurrentHeaderRel.PaymentsOrRemitsRel exists)
									invoke FastUpdate each
										invoked.InterfaceInProcess	= false
							if  (!ErrorOccurred
							and  !CurrentHeaderRel.RecordInError
							and  !CurrentHeaderRel.PaymentsOrRemitsRel exists)
									invoke FastDelete CurrentHeaderRel
						else
							if  (ReleaseBatch
							and  !CurrentHeaderRel.RecordInError
							and  !CurrentHeaderRel.PaymentsOrRemitsRel exists)

								invoke OpenBatchUnreleased.Release CurrentHeaderRel.ReceivablePaymentHeader
									resume on error
										ErrorOccurred		= true
										LocalErrorMessage	= error message

								if (ErrorOccurred)

									invoke FastUpdate CurrentHeaderRel
										invoked.RecordInError		= true
										invoked.ErrorMessage		= LocalErrorMessage

							if  (!ErrorOccurred
							and  !CurrentHeaderRel.RecordInError
							and  !CurrentHeaderRel.PaymentsOrRemitsRel exists)
								invoke FastUpdate CurrentHeaderRel.ReceivablePaymentHeader
									invoked.InterfaceInProcess	= false
								invoke FastDelete CurrentHeaderRel

				PaymentSeq Set Rules
					Entrance Rules
						CurrentPaymentSeq				= PaymentSeq

					Exit Rules
						LocalRunGroup					= CurrentRunGroup
						LocalCompany					= CurrentCompany
						LocalBatchNumber				= CurrentBatch
						LocalPaymentSeq					= CurrentPaymentSeq

						if (AssignPaymentToInvoiceCompanyCustomer)
							if (CurrentPaymentRel.ReceivablePayment entered
							and !CurrentPaymentRel.RemittancesForPaymentRel exists)
								for each AllPaymentHeadersCreatedRel
									if (each.PaymentsExist
									and each.ReceivablePaymentHeader = CurrentPaymentRel.ReceivablePaymentHeader)
										initialize LocalSimilarImportPayment
										initialize LocalBankAccountNumber
										initialize LocalBankEntity
										for each each.ReceivablePaymentsRel
											LocalBankEntity = each.BankEntity
											LocalBankAccountNumber = each.BankAccountNumber
											LocalPaymentCount = instance count of PaymentsForBankEntityAccountNumberRel
											if (LocalPaymentCount > 1)
												LocalSimilarImportPayment = true
										if (!LocalSimilarImportPayment)
											invoke OpenBatchUnreleased.Release each
												resume on error
													ErrorOccurred		= true
													LocalErrorMessage	= error message

									if (ErrorOccurred)
										invoke FastUpdate CurrentHeaderRel
											invoked.RecordInError		= true
											invoked.ErrorMessage		= LocalErrorMessage
								invoke FastDelete CurrentPaymentRel
						else
							if (CurrentPaymentRel.ReceivablePayment exists
							and !CurrentPaymentRel.RemittancesForPaymentRel exists)
								invoke FastDelete CurrentPaymentRel

				Instance Rules


					ParameterReference					= PrmReference
					ParameterDepositBankCode			= DepositBankCode
					LocalReceivablesInterfaceResult		= LocalInterfaceResultView.ReceivablesInterfaceResult
					InterfaceRun						= LocalInterfaceResultView.ReceivablesInterfaceResult
					LocalAssignCustomerBasedOnFirstInvoiceMatch = AssignCustomerBasedOnFirstInvoiceMatch
					LocalAssignPaymentToInvoiceCompanyCustomer  = AssignPaymentToInvoiceCompanyCustomer
					if (LocalAssignPaymentToInvoiceCompanyCustomer)
						if (!LocalAssignPaymetError)
							RecordInError						= false
							ErrorOccurred						= false
							initialize ErrorMessage
							include InterfaceThisPayment
					else
						RecordInError						= false
						ErrorOccurred						= false
						initialize ErrorMessage
						include InterfaceThisPayment
					LocalInstanceCount						+= 1
					if (IsHeaderRecord)
						LocalReceivablePaymentBatchCount	+= 1
					if (IsPaymentRecord)
						LocalReceivablePaymentCount			+= 1
						if (RemitType entered)	
							initialize RemitType	
						if (TransRemNbr entered)	
							initialize TransRemNbr	
					if (IsRemittanceRecord)
						LocalReceivablePaymentDetailCount	+= 1


		FastUpdate is an Update Action
			restricted
			bypass field rules


		FastDelete is a Delete Action
			restricted
			bypass relational integrity rules
			Entrance Rules
				if (IsPaymentRecord)
					invoke FastDelete CashDetailsForPaymentRel


		ResetErrorMessage is an Instance Action
			valid when (ErrorExists)					
			Entrance Rules	
				if (IsPaymentRecord)	
					if (RemitType entered)	
						initialize RemitType	
					if (TransRemNbr entered)	
						initialize TransRemNbr	
			Action Rules
				initialize ErrorMessage



		SetError is an Instance Action
			restricted
			Parameters
				PrmErrorMessage			is Alpha 150
				InterfaceResults		is like ReceivablesInterfaceResult
			Action Rules

				RecordInError						= true
				ErrorMessage						= PrmErrorMessage

				LocalReceivablesInterfaceResult 	= InterfaceResults




				invoke Update LocalInterfaceResultsRel
					invoked.Status 					= 2



