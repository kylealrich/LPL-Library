GLCommitInterface is a BusinessClass
	owned by GeneralLedger
	prefix is GLCIF
	default label is "GlobalLedgerCommitInterface"

	Ontology
		symbolic key is GLCommitInterface

	Patterns
		enable explicit context override
		disable Auditing
		disable EffectiveDated
		disable AsOfDateProcessing
				
	Persistent Fields
		AccountingEntity
        Status							is Numeric 1
            States
                Unreleased				value is 0
                Error		   			value is 1
                BudgetEdit	   			value is 2
		OrganizationCode				is a GeneralLedgerOrganizationCode
		ToAccountingEntity
		AccountingUnit
			context of ToAccountingEntity
		AccountCode						is a GeneralLedgerAccountCode
        TransactionDate					is an ExchangeDate
        CurrencyCode					is a FromCurrency
        UnitsAmount
        TransactionAmount				is a CurrencyAmount 
        	precision is CurrencyCode.NumberOfDecimals     
		ReportCurrencyAmount			is a FinanceCurrencyAmount
    	System							is a GeneralLedgerSystemCode
		Project
		FinanceDimension1
		FinanceDimension2
		FinanceDimension3
		FinanceDimension4
		FinanceDimension5
		FinanceDimension6
		FinanceDimension7
		FinanceDimension8
		FinanceDimension9
		FinanceDimension10
		Ledger
		DocumentNumber					is Alpha up to 30
		ErrorMessage					is Alpha 150

	Context Fields

	Derived Fields
		DerivedEntityCalendarPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			return first GeneralLedgerCalendarPeriodRel.GeneralLedgerCalendarPeriod
			
		DerivedRoundTo					is a DerivedField
    		type is Decimal 5.4
    		restricted
    		if (!CurrencyCode exists)
    			return .01
    		if (CurrencyCode.NumberOfDecimals = 2)
    			return .01
    		if (CurrencyCode.NumberOfDecimals = 0)
    			return 1
    		if (CurrencyCode.NumberOfDecimals = 3)
    			return .001
    		if (CurrencyCode.NumberOfDecimals = 4)
    			return .0001

		RoundedTransactionAmount	is a DerivedField
    		type is like InternationalAmount
    		restricted
    		if (TransactionAmount entered)
	    		RoundedTransactionAmount	   = TransactionAmount
	    		round RoundedTransactionAmount to nearest DerivedRoundTo
	    		return RoundedTransactionAmount
	    	else
	    		return 0
	
		DerivedOrganizationCode		is a DerivedField
			type is like GeneralLedgerOrganizationCode
			restricted
			LocalCount 		= 2
			LocalCount2		= 1
			if (!OrganizationCode[1] = "~")
				return OrganizationCode
			while (LocalCount  < 14)
				if (!OrganizationCode[LocalCount] = "~")
					LocalOrganizationCodeArray.AlphaElement[LocalCount2]	= OrganizationCode[LocalCount]
				else
					LocalCount 		+= 1
					end while
				LocalCount2		+= 1
				LocalCount 		+= 1
			LocalCount2 		= 13
			while (LocalCount  < 41)
				LocalOrganizationCodeArray.AlphaElement[LocalCount2]	= OrganizationCode[LocalCount]
				LocalCount 		+= 1
				LocalCount2		+= 1
			return LocalOrganizationCodeArray

		AccountingEntityErrorMessage	is a MessageField
			restricted
			"To<FinanceEnterpriseGroup.AccountingEntityLabel>Required"	
		OrgCodeAccountingEntityErrorMessage is a MessageField
			restricted
			"CannotEnterBoth_Organization_CodeAnd_To<FinanceEnterpriseGroup.AccountingEntityLabel>"
		AccountingUnitErrorMessage		is a MessageField
			restricted
			"<FinanceEnterpriseGroup.AccountingUnitLabel>Required"
		AccountErrorMessage				is a MessageField
			restricted
			"<FinanceEnterpriseGroup.AccountLabel>DoesNotExist"






		BudgetEditErrorMessage			is a MessageField
			restricted
			"BudgetError"
		AutoReverseDateErrorMessage		is a MessageField
			restricted
			"AutoReverseDateCannotBeLessThanPeriodEndDate"
		PostingProjectErrorMessage		is a MessageField
			restricted
			"<FinanceEnterpriseGroup.ProjectLabel>MustBePostingType"
		BillableProjectErrorMessage		is a MessageField
			restricted
			"<FinanceEnterpriseGroup.ProjectLabel>MustBeBillable"
		CapitalProjectErrorMessage		is a MessageField
			restricted
			"<FinanceEnterpriseGroup.ProjectLabel>MustBeCapital"
		ResourceRequiredErrorMessage	is a MessageField
			restricted
			"ResourceIsRequiredForLaborDistribution"
		ProjectRequiredMessage			is a MessageField
			restricted
			"<FinanceEnterpriseGroup.ProjectLabel>IsRequired"
			
	Transient Fields
		IsErrorTransaction				is Boolean
			derive value from ErrorTransaction
			
	Local Fields
		LocalCurrencyTable				is a CurrencyTable
		LocalPostingDate				is Date
		LocalFinanceCodeBlock			is a FinanceCodeBlock
		LocalTransactionInterface		is a GLCommitInterface
		BypassStructureRelationEdit
		LocalOrgCode					is a OrganizationCode
		LocalEntity						is a AccountingEntityField
		LocalEndDate					is a GeneralLedgerCalendarPeriod
		LocalLedger						is a Ledger
		LocalInstAccountingEntity		is like AccountingEntity
		LocalCount						is Numeric 2
		LocalCount2						is Numeric 2
		LocalOrganizationCodeArray		is an AlphaArray
		LocalOrganizationCode			is an OrganizationCode
		LocalFinanceEnterpriseGroup		is like FinanceEnterpriseGroup
		LocalRunGroup					is AlphaUpper 30
		LocalGLTDEntity					is like AccountingEntity
		LocalSystem						is like GeneralLedgerSystemCode
		LocalScenario					is a Scenario
		LocalGeneralLedgerTotal			is a GeneralLedgerTotal
		
  	Field Groups

	Sets
		ByRunGroupEntity
			Sort Order
				FinanceEnterpriseGroup
				GLCommitInterface.RunGroup
				AccountingEntity
				GLCommitInterface.SequenceNumber

		ByStatusAndRunGroup
			Sort Order
				FinanceEnterpriseGroup
				Status
				GLCommitInterface.RunGroup
				GLCommitInterface.SequenceNumber
				
	Relations
	
		GeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Date 			not < LocalPostingDate		
				and	   related.PeriodType.EndDate)
				
		GLCommitInterfaceRel
			one-to-many relation to GLCommitInterface
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.GLCommitInterface.RunGroup	= LocalRunGroup)
				
		UnprocessedRecordsRel
			one-to-many relation to GLCommitInterface
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
			Instance Selection
				where (Status						= Status.Unreleased
				or	   Status						= Status.Error)

			
		ErrorsInRunGroupRel
			one-to-many relation to GLCommitInterface
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			  = LocalFinanceEnterpriseGroup
			Instance Selection
				where (related.GLCommitInterface.RunGroup = LocalRunGroup
				and    related.Status.Error)
				
		GLCommitRunGroupRel
			one-to-one relation to GLCommitRunGroup
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= LocalFinanceEnterpriseGroup
				related.GLCommitRunGroup				= LocalRunGroup
				
		PriorPayPeriodExistsRel
			one-to-many relation to GLCommitRunGroup
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= LocalFinanceEnterpriseGroup
			Instance Selection
				where (related.Status					= 1)
				
		GeneralLedgerAccountCodeRel
			one-to-one relation to GeneralLedgerAccountCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerAccountCode	= AccountCode

		EntityLedgerCurrentPeriodRel
			one-to-one relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.Ledger						= LocalFinanceCodeBlock.Ledger
				related.GeneralLedgerClosePeriod	= LocalFinanceCodeBlock.ToAccountingEntity.CurrentPeriod
				
		EntityLedgerPeriodRel
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= AccountingEntity
				related.Ledger						= LocalLedger
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	not < LocalEndDate)
				
		BudgetEntityLedgerRel
			one-to-one relation to BudgetEntityLedger
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= LocalInstAccountingEntity
				related.Ledger						= LocalLedger
				
		AnyBudgetEntityLedgerRel
			one-to-many relation to BudgetEntityLedger
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup

 	Conditions
 		ErrorTransaction
 			restricted
 			when (ErrorMessage entered)
 		AnyBudgetEntityLedgersExist
 			when (AnyBudgetEntityLedgerRel exists)
 			
 		PayrollInterfaceExists
 			restricted
 			when (GLCommitInterfaceRel exists)
 			
 		UnprocessedInterfaceExists
 			restricted
 			when (UnprocessedRecordsRel exists)

 	Field Rules
 		Ledger
 			initial value is FinanceEnterpriseGroup.CoreLedger
 			default to FinanceEnterpriseGroup.CoreLedger


 		OrganizationCode
 			OrganizationCode		     = DerivedOrganizationCode
			LocalOrgCode				 = OrganizationCode
			LocalEntity.AccountingEntity = LocalOrgCode.AccountingEntity
					
 		ToAccountingEntity
 			if (OrganizationCode entered)
				cannot be entered
 					"CannotEnterBoth_Organization_CodeAnd_To<FinanceEnterpriseGroup.AccountingEntityLabel>"
 				 				
 		AccountingUnit
 			if (OrganizationCode entered)
				cannot be entered
 					"CannotEnterBoth_Organization_CodeAnd<FinanceEnterpriseGroup.AccountingUnitLabel>" 	
 		AccountCode
 			required

		CurrencyCode
			initial value is AccountingEntity.FunctionalCurrency
			default to AccountingEntity.FunctionalCurrency
			
		TransactionDate
			if (!Ledger entered)
				LocalLedger					= FinanceEnterpriseGroup.CoreLedger
			else
				LocalLedger					= Ledger
			LocalEndDate					= DerivedEntityCalendarPeriod


			required
			
		System
			default to "PR"
			
		TransactionAmount
			required
		




	Rule Blocks
		FindGLYearPeriod
			LocalEndDate				= DerivedEntityCalendarPeriod
			if (DerivedEntityCalendarPeriod entered
			and !first EntityLedgerPeriodRel.BackPostPeriod)
				while (!first EntityLedgerPeriodRel.OpenPeriod)
					LocalPostingDate = first GeneralLedgerCalendarPeriodRel.Date + 1
					LocalEndDate	 = DerivedEntityCalendarPeriod
			if (!EntityLedgerPeriodRel exists
			or  !DerivedEntityCalendarPeriod entered)
				LocalEndDate	 = EntityLedgerCurrentPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod
				LocalPostingDate = EntityLedgerCurrentPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod.Date

 	Actions
 	
		Create is a Create Action
			bypass field rules
		
			Action Rules
				if (!ToAccountingEntity entered)
					ToAccountingEntity	= AccountingEntity
				if (!CurrencyCode entered)
					CurrencyCode = AccountingEntity.FunctionalCurrency
				System = "PR"
			
			Exit Rules
			
		Update is an Update Action
		
			Action Rules
				if (!ErrorMessage entered)
					Status		= Status.Unreleased
					
				if (AccountingEntity changed)
					constraint (AccountingEntity exists)
						"<FinanceEnterpriseGroup.AccountingEntityLabel>DoesNotExist"
				if (OrganizationCode entered)
	 			    constraint (ToAccountingEntity entered)
	 					"CannotEnterBoth_Organization_CodeAnd_To<FinanceEnterpriseGroup.AccountingEntityLabel>"
		
		Delete is a Delete Action

			
		DeleteUnprocessedTransactionsForRunGroup is a Set Action
			confirmation required
		
			Parameters
				PrmEnterpriseGroup is like FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup		   is AlphaUpper 30
					default label is "RunGroup"
			
			Parameter Rules
				PrmRunGroup
					LocalFinanceEnterpriseGroup = PrmEnterpriseGroup
					LocalRunGroup 				= PrmRunGroup
							
			Instance Selection
				where (FinanceEnterpriseGroup			= PrmEnterpriseGroup
				and    GLCommitInterface.RunGroup		= PrmRunGroup
				and   (Status.Unreleased
				or     Status.Error))
				
			Set Is
				PrmEnterpriseGroup
				PrmRunGroup
				
			Action Rules
			
				Instance Rules
					invoke Delete GLCommitInterface
					
		InterfaceCommitments is a Set Action
			completion message is "PayrollEncumbranceInterfaceCompleteForRunGroup<PrmRunGroup>"
			
			Parameters
				PrmEnterpriseGroup			is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmRunGroup					is AlphaUpper 30
					default label is "RunGroup"
				PrmPayPeriod				is Date
					default label is "PayrollPeriod"


				PrmAccountingEntity			is an AccountingEntity
					default label is "AccountingEntity"
				PrmCurrencyTable			is a CurrencyTable
					default label is "CurrencyTable"


				PrmEditOnly					is Boolean
					default label is "EditOnlyNoUpdate"


				PrmByPassAccountCode		is Boolean
					default label is "ByPassAccountCode"
					
			Parameter Rules
				PrmRunGroup
					required
					
					constraint (!ErrorsInRunGroupRel exists)
						"FixOrResetErrorsBeforeInterfacing_Run_Group<PrmRunGroup>"
						
					if (GLCommitRunGroupRel exists)
						constraint (GLCommitRunGroupRel.Status = Status.Unreleased)
							"Run_GroupIsNotValidForInterface;StatusIs<GLCommitRunGroupRel.Status>"
							
					constraint (!PriorPayPeriodExistsRel exists)
						"PriorPayPeriodEncumbrancesExist;Run_Purge_Prior_Pay_Period"
						
				PrmCurrencyTable
					initial value is actor.context.FinanceEnterpriseGroup.CurrencyTable
					default to actor.context.FinanceEnterpriseGroup.CurrencyTable
					
				PrmByPassAccountCode
					initial value is actor.context.FinanceEnterpriseGroup.NoAccountCodesExist
					initial value is true
					if (!PrmEnterpriseGroup.GeneralLedgerAccountCode set exists)
						PrmByPassAccountCode = true
													
			Local Fields
				ErrorOccurred				is Boolean
				EntityErrorOccurred			is Boolean
				TransactionError			is Boolean
				LocalErrorMessage			is Alpha 150
				LocalAccountingEntity		is an AccountingEntity				
				LocalGeneralLedgerChartAccount	is a GeneralLedgerChartAccount
				LocalCompletionMessage		is Alpha 150
				LocalErrorRunGroup			is AlphaUpper 30
				LocalErrorSequence			is Numeric 12
				GoodRecordCount				is Numeric 12
				BudgetRecordCount			is Numeric 12
				LocalInterfaceBudgetGroupReference	is BusinessObjectReference
				LocalBudgetEditGroup		is UniqueID				
				CommitNow					is Boolean
				LocalInterfaceLedger		is like Ledger
				LocalReportCurrencyAmount	is a FinanceCurrencyAmount
				InstanceEndDate				is like GeneralLedgerCalendarPeriod
				LocalPeriodEndDate			is Date
				LocalTransactionCodeBlock	is a TransactionCodeBlock
				LocalCurrencyCalc			is Boolean
				LocalCurrencyCode			is a FromCurrency
                LocalEntityYearPeriod		is a GeneralLedgerCalendarPeriod
				AsyncId						is a AsyncActionRequest
				LocalHeaderUniqueID			is like UniqueID

			Instance Selection
				where ((FinanceEnterpriseGroup		= PrmEnterpriseGroup
				and     GLCommitInterface.RunGroup	= PrmRunGroup)
				and    ((PrmAccountingEntity entered 
				and      AccountingEntity			= PrmAccountingEntity)
				or      !PrmAccountingEntity entered))





				
			Sort Order
				FinanceEnterpriseGroup
				GLCommitInterface.RunGroup
				AccountingEntity





			Accumulators
				
			Action Rules
				Empty Set Rules
					constraint (false)
						"NoRecordsFoundToInterface"
						
				Set Rules
				
				FinanceEnterpriseGroup Set Rules
					Entrance Rules
					
						LocalFinanceEnterpriseGroup			= PrmEnterpriseGroup
						LocalRunGroup						= PrmRunGroup
						ErrorOccurred						= false
						if (!GLCommitRunGroupRel exists)		
							invoke Create GLCommitRunGroup
								invoked.FinanceEnterpriseGroup	= LocalFinanceEnterpriseGroup
								invoked.GLCommitRunGroup		= LocalRunGroup
								invoked.SystemCode				= "PR"
								invoked.PayPeriod				= PrmPayPeriod
								invoked.Status					= 0				

						LocalHeaderUniqueID						= GLCommitRunGroupRel.UniqueID
						GoodRecordCount							= 0
				        	
					Exit Rules
					
						LocalFinanceEnterpriseGroup			= FinanceEnterpriseGroup
						LocalRunGroup						= PrmRunGroup
						LocalHeaderUniqueID					= GLCommitRunGroupRel.UniqueID
						
						if (GoodRecordCount > 0
						and !PrmEditOnly)
							invoke EditTotalsRoute BudgetTemplateGroupTotal in background
								assign async action request id to AsyncId
								invoked.PrmFinanceEnterpriseGroup			= FinanceEnterpriseGroup
								invoked.PrmBudgetEditGroup					= LocalHeaderUniqueID
								invoked.PrmMode								= BudgetEditMode.UpdateOnly
								invoked.PrmBusinessClassName				= "GLCommitInterface"
								invoked.PrmEditContext						= "PayrollInterfaceCommitments"
								
			    			invoke UpdateToReleased GLCommit in background
								run after AsyncId
								assign async action request id to AsyncId
			    				invoked.PrmFinanceEnterpriseGroup           = FinanceEnterpriseGroup
			    				invoked.PrmUniqueID                         = LocalHeaderUniqueID
			    				invoked.PrmAccountingEntity                 = AccountingEntity
			    				
							if (GLCommitRunGroupRel exists)
								invoke Update GLCommitRunGroupRel

									invoked.Status							= 1				

								
				Instance Rules
					if (OrganizationCode entered)
						LocalOrganizationCode		= DerivedOrganizationCode
					
					if (!PrmByPassAccountCode)
						if (GeneralLedgerAccountCodeRel exists)	
							LocalGeneralLedgerChartAccount	= AccountCode.GeneralLedgerChartAccount
						else
							LocalGeneralLedgerChartAccount	= AccountCode
					else
						LocalGeneralLedgerChartAccount		= AccountCode

					if (!TransactionError)
					    if (!LocalGeneralLedgerChartAccount	exists)
							display "GLCOMMIT_INTERFACE:ACCOUNT_ERROR"
							TransactionError	= true
							LocalErrorMessage	= AccountErrorMessage
					
					if (!TransactionError)
						if (OrganizationCode entered)
							if (!LocalOrganizationCode.AccountingEntity entered)
								TransactionError	= true
								LocalErrorMessage	= AccountingEntityErrorMessage
							if (ToAccountingEntity entered)
								TransactionError    = true
								LocalErrorMessage   = OrgCodeAccountingEntityErrorMessage
						else
							if (!ToAccountingEntity entered)
								TransactionError	= true
								LocalErrorMessage	= AccountingEntityErrorMessage
												
					if (!TransactionError)
						if (FinanceEnterpriseGroup.AccountingUnitRequired)					
							if (OrganizationCode entered)
								if (!LocalOrganizationCode.AccountingUnit entered)
									TransactionError	= true
									LocalErrorMessage	= AccountingUnitErrorMessage
							else
								if (!AccountingUnit entered)
									TransactionError	= true
									LocalErrorMessage	= AccountingUnitErrorMessage
																						
					if (!TransactionError)
						if (Project entered)
							if (!Project.ProjectType.Posting)
								TransactionError	= true
								LocalErrorMessage	= PostingProjectErrorMessage
								
					if (!TransactionError)
						if (TransactionAmount entered)
							if ((ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount entered)
							or  (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate entered
							and !ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered))
								if (OrganizationCode entered)
									LocalTransactionCodeBlock.ToAccountingEntity	= LocalOrganizationCode.AccountingEntity
									LocalTransactionCodeBlock.AccountingUnit		= LocalOrganizationCode.AccountingUnit
								else
									LocalTransactionCodeBlock.ToAccountingEntity	= ToAccountingEntity
									LocalTransactionCodeBlock.AccountingUnit		= AccountingUnit
								LocalTransactionCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount
								LocalTransactionCodeBlock.Project					= Project
								LocalTransactionCodeBlock.FinanceDimension1			= FinanceDimension1
								LocalTransactionCodeBlock.FinanceDimension2			= FinanceDimension2
								LocalTransactionCodeBlock.FinanceDimension3			= FinanceDimension3
								LocalTransactionCodeBlock.FinanceDimension4			= FinanceDimension4
								LocalTransactionCodeBlock.FinanceDimension5			= FinanceDimension5
								LocalTransactionCodeBlock.FinanceDimension6			= FinanceDimension6
								LocalTransactionCodeBlock.FinanceDimension7			= FinanceDimension7
								LocalTransactionCodeBlock.FinanceDimension8			= FinanceDimension8
								LocalTransactionCodeBlock.FinanceDimension9			= FinanceDimension9
								LocalTransactionCodeBlock.FinanceDimension10		= FinanceDimension10
								LocalTransactionCodeBlock.Ledger					= LocalInterfaceLedger
	
								ReportCurrencyAmount.UseDerivedCalculations			= true
								LocalCurrencyCalc									= ReportCurrencyAmount.AssignToCurrency
								LocalCurrencyCalc									= ReportCurrencyAmount.DerivedCalculationsComplete
								if  (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate entered
								and !ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered)
									initialize ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
								if  (ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate entered
								and !ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered)
									initialize ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
								if  (ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate entered
								and !ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered)
									initialize ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
								if  (ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate entered
								and !ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered)
									initialize ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
								if (!AccountingEntity				= LocalOrganizationCode.AccountingEntity)
									if  (ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate entered
									and !ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount entered)
										initialize ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate
									if  (ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate entered
									and !ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount entered)
										initialize ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate
									if  (ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate entered
									and !ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount entered)
										initialize ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate
									if  (ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate entered
									and !ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount entered)
										initialize ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate
								if (Project entered)
									if  (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate entered
									and !ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered)
										initialize ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate
								if  (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate entered
								and !ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered)
									initialize ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate
								if  (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate entered
								and !ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered)
									initialize ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate
								if  (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate entered
								and !ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered)
									initialize ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate
								if  (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate entered
								and !ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered)
									initialize ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate
								if  (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate entered
								and !ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered)
									initialize ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate
								LocalCurrencyCalc									= ReportCurrencyAmount.DerivedCalculationsComplete
													
					if (!TransactionError
					and !PrmEditOnly)
						LocalFinanceCodeBlock.Ledger					= Ledger
				        LocalFinanceCodeBlock.ToAccountingEntity		= ToAccountingEntity
			        	LocalFinanceCodeBlock.AccountingUnit			= AccountingUnit
			            LocalFinanceCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount
			            LocalFinanceCodeBlock.Project					= Project
						LocalFinanceCodeBlock.FinanceDimension1			= FinanceDimension1
						LocalFinanceCodeBlock.FinanceDimension2			= FinanceDimension2
						LocalFinanceCodeBlock.FinanceDimension3			= FinanceDimension3
						LocalFinanceCodeBlock.FinanceDimension4			= FinanceDimension4
						LocalFinanceCodeBlock.FinanceDimension5			= FinanceDimension5
						LocalFinanceCodeBlock.FinanceDimension6			= FinanceDimension6
						LocalFinanceCodeBlock.FinanceDimension7			= FinanceDimension7
						LocalFinanceCodeBlock.FinanceDimension8			= FinanceDimension8
						LocalFinanceCodeBlock.FinanceDimension9			= FinanceDimension9
						LocalFinanceCodeBlock.FinanceDimension10		= FinanceDimension10
						
					if (!ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered)
						ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount = TransactionAmount
											
					if (!TransactionError)
						if (!PrmEditOnly)
							invoke CreatePayrollEncumbrance GLCommit
								resume on error
									TransactionError	= true
									LocalErrorMessage	= error message
								fill in fields from this instance
								if (OrganizationCode entered)
									invoked.TransientCodeBlock.ToAccountingEntity		= LocalOrganizationCode.AccountingEntity
									invoked.TransientCodeBlock.AccountingUnit			= LocalOrganizationCode.AccountingUnit
								else
									invoked.TransientCodeBlock.ToAccountingEntity		= AccountingEntity
									invoked.TransientCodeBlock.AccountingUnit			= AccountingUnit
								invoked.TransientCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount
								invoked.TransientCodeBlock.Project						= Project
								invoked.TransientCodeBlock.FinanceDimension1			= FinanceDimension1
								invoked.TransientCodeBlock.FinanceDimension2			= FinanceDimension2
								invoked.TransientCodeBlock.FinanceDimension3			= FinanceDimension3
								invoked.TransientCodeBlock.FinanceDimension4			= FinanceDimension4
								invoked.TransientCodeBlock.FinanceDimension5			= FinanceDimension5
								invoked.TransientCodeBlock.FinanceDimension6			= FinanceDimension6
								invoked.TransientCodeBlock.FinanceDimension7			= FinanceDimension7
								invoked.TransientCodeBlock.FinanceDimension8			= FinanceDimension8
								invoked.TransientCodeBlock.FinanceDimension9			= FinanceDimension9
								invoked.TransientCodeBlock.FinanceDimension10			= FinanceDimension10
								invoked.TransientCodeBlock.Ledger						= Ledger
								invoked.HeaderUniqueID									= LocalHeaderUniqueID
								invoked.TransientTransactionDate						= TransactionDate
								
							if (LocalErrorMessage entered)
								TransactionError = true
																
					if (TransactionError)
						ErrorOccurred		= true
						EntityErrorOccurred = true
						Status				= 1
						ErrorMessage		= LocalErrorMessage
						invoke Update GLCommitInterface
					else
						GoodRecordCount += 1
						if (!PrmEditOnly)
							invoke Delete GLCommitInterface
					
					
					
