ClosePeriodTask is a BusinessClass
	owned by closemgmt
	prefix is CPTas

	Ontology
		symbolic key is ClosePeriodTask

    Patterns
		implements Resequence on DisplaySequence
			new sequence field is NewDisplaySequence
			set is ByDisplaySequence



		
	Persistent Fields
		TaskCompany							is a CompanyGroupField
		TaskLevel							is Numeric 2
			States
				Summary				value is 0 
				Detail				value is 1 		

		FinanceTeam	 
		TaskOwner 							is a FinanceTeamMember
			delete ignored
		TaskOwnerSupervisor					is a FinanceResource 
		ProcessOwner						is a FinanceResource

		TaskName							is Alpha 100
		TaskDetail							is Text
		DisplaySequence						is Numeric 04	
		Priority							is Numeric 1
			States
				Low							value is 0
				Medium						value is 1
				High						value is 2
		Risk								is Numeric 1
			States	
				Low							value is 0
				Medium						value is 1
				High						value is 2
		RequireSupportingDoco				is Boolean
		RequireJournalEntry                 is Boolean
		RequiresApproval					is Boolean
		ApprovalCode
		ApprovalLevel						is Numeric 8
		Approver							is a FinanceResource
		ApproverTeam						is a FinanceTeamField
		ReassignToApprovalLevel				is Numeric 8
		TaskStatus							is Numeric 1
			States	
				Scheduled					value is 0
				InProcess					value is 2
				PendingApproval				value is 5
				Closed						value is 7
				Voided						value is 9		
		FinancialForm						is Alpha 6 		

		ScheduleForTask        		 		is a CloseTaskScheduleAndLOE
		ActualForTask						is a CloseTaskScheduleAndLOE
		EstimateForTask						is a CloseTaskScheduleAndLOE

		PercentComplete						is Percent 5.2

		CreatedFrom							is a CloseTask
		CreatedFromReference 				is BusinessObjectReference

		DependencyMetric					is Numeric 1
			States
				NoPrereq 					value is 0
				PrereqFuture				value is 1
				PrereqEarly 				value is 2
				PrereqOnTime 				value is 3
				PrereqLate	 				value is 4
		StartMetric							is Numeric 1
			States
				StartFuture					value is 0		
				StartedEarly				value is 1		
				StartedOnTime				value is 2		
				StartedLate					value is 3		
		DueMetric							is Numeric 1
			States
				DueFuture 					value is 0
				CompletedEarly				value is 1
				CompletedOnTime 			value is 2
				IsLate 						value is 3
				CompletedLate				value is 4
		TheClose							is Numeric 1
			States		
				OnTarget					value is 0
				InJeopardy					value is 1
				OverDue						value is 2
				PendingApproval				value is 3
				Closed						value is 4
		EffortMetric						is Numeric 1						
			States		
				NotEntered					value is 0
				FutureTask 					value is 1
				LessThanExpected 			value is 2
				AsExpected 					value is 3
				MoreThanExpected 			value is 4
		ApprovalMetric						is Numeric 1
			States
				NoApproval 					value is 0
				FutureApproval				value is 1
				PendingApproval 			value is 2
				Approved					value is 3
		Rejected							is Boolean
		Reopened							is Boolean
		Workunit							is a PfiWorkunit

		OneTimeTask							is Boolean
		OneTimeTaskCreator					is a FinanceResource
		OneTimeTaskApproved					is Boolean
		OneTimeTaskRejected					is Boolean
		AddOneTimeTaskToProcess				is Boolean
		OneTimeCalendar						is a SystemCalendar
		OneTimePeriodGroup					is a SystemCalendarPeriodGroup
		OneTimeTaskApprovalInfo
		OneTimeWorkunit						is a PfiWorkunit
		OneTimeAutoApproved					is Boolean

       	PrimaryTaskType						is a CloseTaskType
       	SecondaryTaskType					is a CloseTaskType
       	TertiaryTaskType					is a CloseTaskType
       	
       	DayOfClose
		BeginTimeSensitive					is Boolean
		HasBeginTimeSensitiveDescendants	is Boolean
		DueTimeSensitive					is Boolean
		HasDueTimeSensitiveDescendants		is Boolean
		DueTimeNotificationStamp			is TimeStamp

		UseExternalEmailNotification		is Boolean
		SendExternalEmailOnOpenOfPeriod		is Boolean
		ExternalToEmail						is an EmailAddressMulti 
			holds pii
		ExternalEmailSubject				is Alpha 100
			Text Variables
 				TaskName						value is ClosePeriodTask.TaskName
 				ScheduledBeginDate				value is ClosePeriodTask.ScheduleForTask.BeginDate
 				ScheduledDueDate				value is ClosePeriodTask.ScheduleForTask.DueDate
 				ClosePeriod						value is ClosePeriodTask.ClosePeriod
		ExternalEmailContent				is RichText
			Text Variables
 				TaskName						value is ClosePeriodTask.TaskName
 				ScheduledBeginDate				value is ClosePeriodTask.ScheduleForTask.BeginDate
 				ScheduledDueDate				value is ClosePeriodTask.ScheduleForTask.DueDate
 				ClosePeriod						value is ClosePeriodTask.ClosePeriod
 				TaskOwner						value is ClosePeriodTask.TaskOwner.TeamMember.PreferredSimplePresentationName
		ExternalEmailSentStamp				is TimeStamp
		TaskCompletedBy						is a FinanceResource
		JournalEntryReference

		OneTimeBeginDaysFromPeriodEnd		is Numeric 3
		OneTimeBeginDayOfMonth				is Unsigned Decimal 2
		OneTimeBeginLastDayOfMonth			is Boolean
		OneTimeBeginDayForNextMonth			is Boolean
		OneTimeBeginTime					is Time
		OneTimeDueDaysFromPeriodEnd			is Numeric 3
		OneTimeDueDayOfMonth				is Unsigned Decimal 2
		OneTimeDueLastDayOfMonth			is Boolean
		OneTimeDueDayForNextMonth			is Boolean
		OneTimeDueTime						is Time
		OneTimeDueTimeSensitive				is Boolean
		OneTimeHoursRequired				is Unsigned Decimal size 10.2
		OneTimeScheduleForWorkDaysOnly		is Boolean
		OneTimeCreatedCloseTask				is a CloseTask

	Transient Fields
		NewDisplaySequence 					is Numeric 4
		CalledFromOpenPeriodSetAction       is Boolean
		AttachmentFromWorkRequest			is an Attachment
		LinkFromWorkRequest					is an URL




























	Local Fields
		PrmDialogue 				is Text 
		Subject						is Alpha 255
		LocalTeam					is AlphaUpper 20
		LocalTeamMember				is Numeric 9
		LocalGroupingForTeam		is Numeric 9
		LocalBeginDate				is Date
		LocalBeginTime				is Time
		LocalDueDate				is Date
		LocalDueTime				is Time
		LocalCreatedFrom			is Numeric 6
		LocalDetailTask				is a ClosePeriodTask
		LocalClosePeriodTask		is a ClosePeriodTask view
		LocalApprovalCode			is AlphaUpper 30
		LocalApprovalLevel			is Numeric 8
		LocalApprover				is a FinanceResource  
		LocalApproverTeam			is a FinanceTeamField  
		LocalApproverList			is Alpha 250
		LocalFirstApproverAssigned	is Boolean
		LocalYear					is Year
		LocalPeriod					is Numeric 2
		LocalCloseManagementGroup	is AlphaUpper 4
		LocalCloseDate				is TimeStamp

		LocalCalcDone				is Boolean
		LocalTotalDetailCount		is Numeric 5
		LocalScheduledCount			is Numeric 5
		LocalInProcessCount			is Numeric 5
		LocalPendingApprovalCount	is Numeric 5
		LocalClosedCount			is Numeric 5
		LocalVoidedCount			is Numeric 5
		LocalOverdueCount			is Numeric 5
		LocalDueTodayCount			is Numeric 5
		LocalStartTodayCount		is Numeric 5
		LocalInJeopardyCount		is Numeric 5
		LocalLateToStartCount		is Numeric 5
		LocalOneTimeTaskCount		is Numeric 5
		LocalReopenedCount			is Numeric 5
		LocalStartEarlyCount		is Numeric 5
		LocalStartLateCount			is Numeric 5
		LocalDoneEarlyCount			is Numeric 5
		LocalDoneLateCount			is Numeric 5
		AppsValue					is a PfiAppsValue
		LocalSaveAction				is Alpha 50
		LocalActor                  is an Actor
        LocalFinanceResource        is a FinanceResource
		LocalAccountingEntity 		is like AccountingEntity
        LocalGLClosePeriod 			is like GeneralLedgerClosePeriod
        LocalJournalEntryNumber		is like GeneralLedgerJournalControl
		LocalUpdateApprovals		is Boolean
		LocalSaveCloseTask			is a CloseTask view
		LocalDate					is Date
		LocalAlphaYear				is Alpha 4
		LocalAlphaDay				is Alpha 3
                    
	Context Fields
		PrmFinanceResource 					is a FinanceResource
			default label is "FinanceResource"
		PrmDateRange						is a DateRange
			default label is "DateRange"
		ContextAccountingEntity				is an AccountingEntity
			default label is "AccountingEntity"
		ContextGeneralLedgerClosePeriod		is a GeneralLedgerClosePeriod
			default label is "GlobalLedgerClosePeriod"
		ContextGeneralLedgerJournalControl	is a GeneralLedgerJournalControl
			default label is "GlobalLedgerJournalControl"
				
	Field Rules



		TaskOwner
			if (TaskLevel.Summary)
				constraint (OwnerIsMemberOfTeam)
					"ProcessOwnerMustBeMemberOfFinanceTeam"
			else 
				if (TaskOwner entered) 
					constraint (OwnerIsMemberOfTeam)
						"TaskOwnerMustBeMemberOfFinanceTeam"
		TaskOwnerSupervisor

		ProcessOwner
			if (ParentClosePeriodTask not = 0)
				force default to ParentClosePeriodTask.TaskOwner.FinanceTeamMember.TeamMember

		OneTimeBeginTime
			initial value is 28800 
			default to 28800 

		OneTimeDueTime
			initial value is 61200 
			default to 61200 

		OneTimeBeginDaysFromPeriodEnd
			if (AllowCreationOfOneTimeTasks)
				constraint (ValidOneTimeDetailLevelDates)
					"TaskMustStartBeforeItIsDue"		

		OneTimeDueDaysFromPeriodEnd
			if (AllowCreationOfOneTimeTasks)
				constraint (ValidOneTimeDetailLevelDates)
					"TaskMustStartBeforeItIsDue"					

		OneTimeBeginDayOfMonth
			if (AllowCreationOfOneTimeTasks)
				constraint (not OneTimeBeginDaysFromPeriodEnd entered and not OneTimeDueDaysFromPeriodEnd entered)
					"CannotEnterNumberOfDaysAndDayOfMonth;MustUseOneMethodOrTheOtherForScheduling"
				constraint (not OneTimeBeginLastDayOfMonth)
					"CannotEnterBeginDayOfMonthAndSelectBeginOnLastDayOfMonth" 
				constraint (OneTimeBeginDayOfMonth <= 28)
					"BeginDayOfMonthCannotBeGreaterThan28"	
				if (not OneTimeDueLastDayOfMonth)
					constraint (OneTimeDueDayOfMonth entered)
						"MustEnterDueDayOfMonthOrSelectDueOnLastDayOfMonthWhenBeginDayOfMonthEntered"
					constraint (OneTimeBeginDayOfMonth <= OneTimeDueDayOfMonth)
						"TaskMustStartBeforeItIsDue"

		OneTimeDueDayOfMonth
			if (AllowCreationOfOneTimeTasks)
				constraint (not OneTimeBeginDaysFromPeriodEnd entered and not OneTimeDueDaysFromPeriodEnd entered)
					"CannotEnterNumberOfDaysAndDayOfMonth;MustUseOneMethodOrTheOtherForScheduling"
				constraint (not OneTimeDueLastDayOfMonth)
					"CannotEnterDueDayOfMonthAndSelectDueOnLastDayOfMonth"
				constraint (not OneTimeBeginLastDayOfMonth)
					"CanOnlySelectDueOnLastDayOfMonthWhenBeginOnLastDayOfMonthIsSelected;TaskMustStartBeforeItIsDue"
				constraint (OneTimeDueDayOfMonth <= 28)
					"DueDayOfMonthCannotBeGreaterThan28"

		OneTimeBeginLastDayOfMonth
			if (AllowCreationOfOneTimeTasks)
				constraint (not OneTimeBeginDaysFromPeriodEnd entered and not OneTimeDueDaysFromPeriodEnd entered)
					"CannotEnterNumberOfDaysAndSelectTheLastDayOfTheMonth;MustUseOneMethodOrTheOtherForScheduling"
				if (not OneTimeDueLastDayOfMonth
				and OneTimeDueDayOfMonth not entered)
					OneTimeDueLastDayOfMonth = true
				constraint (OneTimeDueLastDayOfMonth)
					"TaskMustStartBeforeItIsDue"

		OneTimeDueLastDayOfMonth
			if (AllowCreationOfOneTimeTasks)
				constraint (not OneTimeBeginDaysFromPeriodEnd entered and not OneTimeDueDaysFromPeriodEnd entered)
					"CannotEnterNumberOfDaysAndSelectTheLastDayOfTheMonth;MustUseOneMethodOrTheOtherForScheduling"
				constraint (not OneTimeDueDayOfMonth entered)
					"CannotSelectThisToBeDueOnTheLastDayOfTheMonthWhenASpecificDayOfTheMonthHasBeenEntered"
				constraint (OneTimeBeginDayOfMonth entered or OneTimeBeginLastDayOfMonth)
					"MustEnterBeginDayOfMonthOrSelectBeginOnLastDayOfMonthWhenDueOnLastDayOfMonthIsSelected"	

		OneTimeBeginDayForNextMonth
			if (AllowCreationOfOneTimeTasks)
				if (OneTimeBeginDayOfMonth not entered
				and not OneTimeBeginLastDayOfMonth)
					cannot be entered
						"CannotSelectBeginForTheMonthFollowingThePeriodUnlessASpecificBeginDayOfMonthHasBeenEnteredOrBeginLastDayOfMonthHasBeenSelected"
				OneTimeDueDayForNextMonth = true

		OneTimeDueDayForNextMonth
			if (AllowCreationOfOneTimeTasks)
				if (OneTimeDueDayOfMonth not entered
				and not OneTimeDueLastDayOfMonth)
					cannot be entered
						"CannotSelectDueForTheMonthFollowingThePeriodUnlessASpecificDueDayOfMonthHasBeenEnteredOrDueLastDayOfMonthHasBeenSelected"
				
	Rule Blocks			

		InitiateApprovalProcessFlow
			LocalYear						= ClosePeriod.Year
			LocalPeriod						= ClosePeriod.Period
			LocalCloseManagementGroup		= ClosePeriod.CloseManagementGroup
			
			initiate CloseApproval process
				title is "ApproveCloseTask<ClosePeriodTask.TaskName>For<ClosePeriod>"
				Variables
					CloseManagementGroup
					LocalYear
					LocalPeriod
					LocalCloseManagementGroup
					ClosePeriodTask
				URLs
					"<linkback(webapp is CloseResource navigation is ProcessFlowForm text is \"ViewCloseTask\")>"
				
		GetNextEscalationApprovalLevel

			LocalApprovalLevel		= ApprovalLevel
			if (first LocalTaskApprovalLevelRel.EscalateTo.NextApprovalLevel)
				LocalApprovalLevel	= ApprovalLevel + 1
				LocalApprover		= first LocalTaskApprovalLevelRel.Approver
				LocalApproverTeam	= first LocalTaskApprovalLevelRel.ApprovalTeam
			else
				LocalApprovalLevel	= first LocalTaskApprovalLevelRel.EscalationApprovalLevel.ApprovalLevel
				LocalApprover		= first LocalTaskApprovalLevelRel.Approver
				LocalApproverTeam	= first LocalTaskApprovalLevelRel.ApprovalTeam

			include ApproverEmailNotification  
			
		GetNextApprovalLevel
			if (ApprovalLevel < 1)
				LocalApprovalLevel	= first TaskApprovalResourceRel.ApprovalLevel
				LocalApprover		= first TaskApprovalResourceRel.Approver
				LocalApproverTeam	= first TaskApprovalResourceRel.ApprovalTeam
			else

				LocalApprovalLevel		= ApprovalLevel + 1
				if (LocalTaskApprovalLevelRel exists)
					LocalApprovalLevel	= first LocalTaskApprovalLevelRel.ApprovalLevel
					LocalApprover		= first LocalTaskApprovalLevelRel.Approver
					LocalApproverTeam	= first LocalTaskApprovalLevelRel.ApprovalTeam
				else

					initialize LocalApprovalLevel
					initialize LocalApprover
					initialize LocalApproverTeam

			if (LocalApprovalLevel entered)
				include ApproverEmailNotification  

		BuildTeamApproverActorList
			LocalApproverList = ""
			LocalFirstApproverAssigned = false
			for each FinanceTeamMembersFromCurrentApprovalLevelRel
				if (LocalFirstApproverAssigned)
					LocalApproverList = LocalApproverList + "," + each.FinanceTeamMember.TeamMember.FinanceResourceActor
				else
					LocalApproverList = each.FinanceTeamMember.TeamMember.FinanceResourceActor
					LocalFirstApproverAssigned = true

		ApproverEmailNotification
			if (LocalApprover entered)
				if (CloseManagementGroup.OverrideResourceEmailNotifications
				or  LocalApprover.SendUpdatesAsEmail)
					send email
						to		LocalApprover.EmailAddress
						from	TaskOwner.TeamMember.EmailAddress
						subject "CloseTask<ClosePeriodTask.TaskName>For<ClosePeriod>WaitingYourApproval"
						Contents
								"TaskCompleted<ActualForTask.DueDate>_<ActualForTask.DueTime>By<TaskOwner.TeamMember.PreferredSimplePresentationName>"
			else
				if (LocalApproverTeam entered)
					LocalTeam = LocalApproverTeam
					for each SendToTeamMembersRel
						if (CloseManagementGroup.OverrideResourceEmailNotifications
					  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
							send email
								to		each.FinanceTeamMember.TeamMember.EmailAddress
								from	TaskOwner.TeamMember.EmailAddress
								subject "CloseTask<ClosePeriodTask.TaskName>For<ClosePeriod>WaitingYourTeam'sApproval"
								Contents
										"TaskCompleted<ActualForTask.DueDate>_<ActualForTask.DueTime>By<TaskOwner.TeamMember.PreferredSimplePresentationName>"

		InitiateOneTimeTaskApprovalFlow
			LocalYear						= ClosePeriod.Year
			LocalPeriod						= ClosePeriod.Period
			LocalCloseManagementGroup		= ClosePeriod.CloseManagementGroup
			AppsValue						= LocalClosePeriodTask.ClosePeriodTask.DerivedAppsValue
			
			initiate OneTimeTaskApproval process
				title is "ApproveOneTimeTask<LocalClosePeriodTask.ClosePeriodTask.TaskName>For<ClosePeriod>"
				Variables
					AppsValue
					CloseManagementGroup
					LocalYear
					LocalPeriod
					LocalCloseManagementGroup
					LocalClosePeriodTask.ClosePeriodTask
				URLs
					"<LocalClosePeriodTask.ClosePeriodTask.OneTimeTaskLinkback>"
				
		GetNextOneTimeEscalationApprovalLevel

			LocalApprovalLevel		= OneTimeTaskApprovalInfo.ApprovalLevel
			if (first LocalOneTimeTaskApprovalLevelRel.EscalateTo.NextApprovalLevel)
				LocalApprovalLevel	= ApprovalLevel + 1
				LocalApprover		= first LocalOneTimeTaskApprovalLevelRel.Approver
				LocalApproverTeam	= first LocalOneTimeTaskApprovalLevelRel.ApprovalTeam
			else
				LocalApprovalLevel	= first LocalOneTimeTaskApprovalLevelRel.EscalationApprovalLevel.ApprovalLevel
				LocalApprover		= first LocalOneTimeTaskApprovalLevelRel.Approver
				LocalApproverTeam	= first LocalOneTimeTaskApprovalLevelRel.ApprovalTeam

			include OneTimeApproverEmailNotification  
			
		GetNextOneTimeApprovalLevel
			if (OneTimeTaskApprovalInfo.ApprovalLevel < 1)
				LocalApprovalLevel	= first OneTimeTaskApprovalResourceRel.ApprovalLevel
				LocalApprover		= first OneTimeTaskApprovalResourceRel.Approver
				LocalApproverTeam	= first OneTimeTaskApprovalResourceRel.ApprovalTeam
			else

				LocalApprovalLevel		= OneTimeTaskApprovalInfo.ApprovalLevel + 1
				if (LocalOneTimeTaskApprovalLevelRel exists)
					LocalApprovalLevel	= first LocalOneTimeTaskApprovalLevelRel.ApprovalLevel
					LocalApprover		= first LocalOneTimeTaskApprovalLevelRel.Approver
					LocalApproverTeam	= first LocalOneTimeTaskApprovalLevelRel.ApprovalTeam
				else
					initialize LocalApprovalCode
					initialize LocalApprovalLevel
					initialize LocalApprover
					initialize LocalApproverTeam

			if (LocalApprovalLevel entered)
				include OneTimeApproverEmailNotification  

		BuildTeamOneTimeApproverActorList
			LocalApproverList = ""
			LocalFirstApproverAssigned = false
			for each TeamMembersFromCurrentOneTimeApprovalLevelRel
				if (LocalFirstApproverAssigned)
					LocalApproverList = LocalApproverList + "," + each.FinanceTeamMember.TeamMember.FinanceResourceActor
				else
					LocalApproverList = each.FinanceTeamMember.TeamMember.FinanceResourceActor
					LocalFirstApproverAssigned = true

		OneTimeApproverEmailNotification
			if (LocalApprover entered)
				if (CloseManagementGroup.OverrideResourceEmailNotifications
				or  LocalApprover.SendUpdatesAsEmail)
					send email
						to		LocalApprover.EmailAddress
						from	TaskOwner.TeamMember.EmailAddress
						subject "OneTimeTask<ClosePeriodTask.TaskName>For<ClosePeriod>WaitingYourApproval"
						Contents
								"OneTimeTaskAdded<create stamp>By<OneTimeTaskCreator.PreferredSimplePresentationName>"
			else
				if (LocalApproverTeam entered)
					LocalTeam = LocalApproverTeam
					for each SendToTeamMembersRel
						if (CloseManagementGroup.OverrideResourceEmailNotifications
					  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
							send email
								to		each.FinanceTeamMember.TeamMember.EmailAddress
								from	TaskOwner.TeamMember.EmailAddress
								subject "OneTimeTask<ClosePeriodTask.TaskName>For<ClosePeriod>WaitingYourTeam'sApproval"
								Contents
										"OneTimeTaskAdded<create stamp>By<OneTimeTaskCreator.PreferredSimplePresentationName>"

		CalculateDetailCounts
			for each NewDetailTaskDescendantsRel  
				LocalTotalDetailCount += 1
				if (each.TaskStatus.Scheduled)
					LocalScheduledCount += 1
				if (each.TaskStatus.InProcess)
					LocalInProcessCount += 1
				if (each.TaskStatus.PendingApproval)
					LocalPendingApprovalCount += 1
				if (each.TaskStatus.Closed)
					LocalClosedCount += 1
				if (each.TaskStatus.Voided)
					LocalVoidedCount += 1
				if (each.Overdue)
					LocalOverdueCount += 1
				if (each.DueToday)
					LocalDueTodayCount += 1
				if (each.StartToday)
					LocalStartTodayCount +=1
				if (each.TaskInJeopardy)
					LocalInJeopardyCount += 1
				if (each.LateToStart)
					LocalLateToStartCount += 1
				if (each.OneTimeTask)
					LocalOneTimeTaskCount +=1
				if (each.HasReopenHistory)
					LocalReopenedCount += 1
				if (each.StartedEarly
				and each.TaskStatus.Closed)
					LocalStartEarlyCount += 1
				if (each.StartedLate
				and each.TaskStatus.Closed)
					LocalStartLateCount += 1
				if (each.DoneEarly
				and each.TaskStatus.Closed)
					LocalDoneEarlyCount += 1
				if (each.DoneLate
				and each.TaskStatus.Closed)
					LocalDoneLateCount += 1

			LocalCalcDone = true

		CalculateScheduledPeriodCounts
			for each DetailTaskDescendantsRel  
				LocalTotalDetailCount += 1
				if (each.StartToday)
					LocalStartTodayCount +=1
				if (each.LateToStart)
					LocalLateToStartCount += 1
				if (each.DueToday)
					LocalDueTodayCount += 1
				if (each.Overdue)
					LocalOverdueCount += 1
				if (each.OneTimeTask)
					LocalOneTimeTaskCount +=1
			
			LocalCalcDone = true

		CloseNotificationsForSummaryTasks
			if (TaskOwner entered)
				if (CloseManagementGroup.OverrideResourceEmailNotifications
				or  TaskOwner.TeamMember.SendUpdatesAsEmail)
					send email
						to		TaskOwner.TeamMember.EmailAddress
						from	actor.agent(Employee).EmployeeWorkEmailAddress
						subject "Process<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenCompleted"
						Contents
							"ScheduledBeginDateWas<ScheduleForTask.BeginDate>_<ScheduleForTask.BeginTime>"
							"ActualBeginDateWas<ActualForTask.BeginDate>_<ActualForTask.BeginTime>"
							"ScheduledCompletionDateWas<ScheduleForTask.DueDate>_<ScheduleForTask.DueTime>"
							"ActualCompletionDateWas<ActualForTask.DueDate>_<ActualForTask.DueTime>"
	
				if (CloseManagementGroup.OverrideResourceLandmarkNotifications
				or  TaskOwner.TeamMember.SendUpdatesAsNotification)
					LocalActor = TaskOwner.TeamMember.FinanceResourceActor
					if (LocalActor entered)
						send notification
							to	LocalActor
							description is	"Process<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenCompleted"
							priority is very high
							linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
			else
				LocalTeam = FinanceTeam
				for each SendToTeamMembersRel
					if (CloseManagementGroup.OverrideResourceEmailNotifications
				  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
						send email
							to		each.FinanceTeamMember.TeamMember.EmailAddress
							from	TaskOwner.TeamMember.EmailAddress
							subject "Process<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenCompleted"
							Contents
								"ScheduledBeginDateWas<ScheduleForTask.BeginDate>_<ScheduleForTask.BeginTime>"
								"ActualBeginDateWas<ActualForTask.BeginDate>_<ActualForTask.BeginTime>"
								"ScheduledCompletionDateWas<ScheduleForTask.DueDate>_<ScheduleForTask.DueTime>"
								"ActualCompletionDateWas<ActualForTask.DueDate>_<ActualForTask.DueTime>"

					if (CloseManagementGroup.OverrideResourceLandmarkNotifications
					or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
						LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
						if (LocalActor entered)
							send notification
								to	LocalActor				
								description is	"Process<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenCompleted"
								priority is high
								linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 						

	Derived Fields
	
		Count is a DerivedField
			type is Numeric 6
			return 1
	
		DerivedTaskCount is a DerivedField
			type is Numeric 6
			restricted
			default label is "Tasks"
			if (TaskLevel.Detail)
				return 1
	
		CloseTaskPeriod is a DerivedField
			type is Numeric 2
			restricted
			return ClosePeriod.Period
		
		CurrentOpenPeriodPeriod is a DerivedField
			type is Numeric 2
			restricted
			return (first OpenClosePeriodRel.ClosePeriod.Period)
			
		CurrentOpenPeriodYear is a DerivedField
			type is Numeric 4
			restricted
			return (first OpenClosePeriodRel.ClosePeriod.Year)

		ReportingPeriod is a DerivedField
			type is Numeric 2
			restricted
			return ClosePeriod.Period

		ReportingYear is a DerivedField
			type is Numeric 4
			restricted
			return ClosePeriod.Year
				
		DisplayDueOrCloseDate is a ConditionalField
			type is Date
			if (TaskStatus.Closed or TaskStatus.Voided)
				ActualForTask.DueDate
			else
				ScheduleForTask.DueDate
				
		DisplayDueOrCloseTime is a ConditionalField
			type is Time
			if (TaskStatus.Closed or TaskStatus.Voided)
				ActualForTask.DueTime
			else
				ScheduleForTask.DueTime

		DerivedScheduledHours is a DerivedField
			type is Decimal 10.2
			restricted
			return (sum DetailTaskDescendantsRel.ScheduleForTask.LevelOfEffort)
		DerivedEstimatedHours is a DerivedField
			type is Decimal 10.2
			restricted
			return (sum DetailTaskDescendantsRel.EstimateForTask.LevelOfEffort)
		DerivedActualHours is a DerivedField
			type is Decimal 10.2
			restricted
			return (sum DetailTaskDescendantsRel.ActualForTask.LevelOfEffort)
		CountOfCloseTaskDescendants is a ComputeField
			type is Numeric 03
			restricted
			(instance count of ClosePeriodTask descendants)
		CountOfCloseTaskDescendantsPlusOne is a DerivedField
			type is Numeric 03		
			restricted
			return (CountOfCloseTaskDescendants + 1)
			
		IsNotEmployee is a DerivedField
			type is Boolean
			restricted
			if (TaskOwner.FinanceTeamMember.TeamMember.Employee = 0)
				IsNotEmployee = true	
			else
				IsNotEmployee = false
				
        EmailAddress is a DerivedField	
			type is EmailAddressField
        	holds pii
			restricted
			if (IsNotEmployee)
				EmailAddress = TaskOwner.FinanceTeamMember.TeamMember.EmailAddress	









			

		DisplayDueDate is a DerivedField
			type is Date
			if (TaskStatus.Closed)
				return (ActualForTask.DueDate)
			else 
				if (EstimateForTask.DueDate entered)
					return (EstimateForTask.DueDate)
				else	
					return (ScheduleForTask.DueDate)
		DisplayDueTime is a DerivedField
			type is Time
			restricted
			if (TaskStatus.Closed)
				return (ActualForTask.DueTime)
			else 
				if (EstimateForTask.DueTime entered)
					return (EstimateForTask.DueTime)
				else	
					return (ScheduleForTask.DueTime)
		DisplayDueTimeIfSensitve is a DerivedField
			type is Time
			if (DueTimeSensitive)
				return (ScheduleForTask.DueTime)

		DisplayBeginDate is a DerivedField
			type is Date
			if (TaskStatus.Scheduled)
				if (EstimateForTask.BeginDate entered)	
					return (EstimateForTask.BeginDate)			 
				else
					return (ScheduleForTask.BeginDate)
			else
				return (ActualForTask.BeginDate)
		DisplayBeginTime is a DerivedField
			type is Time
			restricted
			if (TaskStatus.Scheduled)
				if (EstimateForTask.BeginTime entered)	
					return (EstimateForTask.BeginTime)			 
				else
					return (ScheduleForTask.BeginTime)
			else
				return (ActualForTask.BeginTime)

		DisplayLevelOfEffort is a DerivedField
			type is Unsigned Decimal size 10.2
			restricted
			if (TaskStatus.Scheduled
			or  TaskStatus.InProcess)
				if (EstimateForTask.LevelOfEffort entered)	
					return (EstimateForTask.LevelOfEffort)			 
				else
					return (ScheduleForTask.LevelOfEffort)
			else
				return (ActualForTask.LevelOfEffort)
		DisplayAssignedTo is a ConditionalField
			type is Alpha size 200
			if (!TaskOwner entered)
				FinanceTeam.Description
			else
				TaskOwner.TeamMember.FirstAndLastName
		
		ParentEstimateMessage is a MessageField
			"(*NotAllTasksForThisProcessHaveAnEstimate)"

		UnassignedMessage is a MessageField
			"TeamTask"
				
		RejectedMessage is a MessageField
			"TaskHasBeenRejected"
				
		UnresolvedClosePeriodTaskIssueMsg is a MessageField
			"_and_Unresolved_task_issue_exists"

		ResolvedClosePeriodTaskIssueMsg is a MessageField
			"_and_Resolved_task_issue_exists"

		OneTimeIssueMessage is a ConditionalField
			type is Alpha 50
			if (ResolvedClosePeriodTaskIssue)
				ResolvedClosePeriodTaskIssueMsg
			else
			if (HasUnresolvedClosePeriodTaskIssue)
				UnresolvedClosePeriodTaskIssueMsg
			else
				blank	

		ReopenCount is a DerivedField
			type is Numeric 3
			for each this instance.audit log records
				if (each.action = "Reopen")
					ReopenCount = ReopenCount + 1
			return ReopenCount

		RejectCount is a ComputeField 
			type is Numeric 3		
			(instance count of ReasonCodeUsageRejectRel)
			
		RejectOneTimeCount is a ComputeField
			type is Numeric 3
			restricted
			(instance count of ReasonCodeUsageRejectOneTimeRel)

		OriginalCloseDate is a DerivedField
			type is TimeStamp

			initialize LocalCloseDate
			for each this instance.audit log records
				if (each.action = "CloseTask")
					if (LocalCloseDate not entered)
						LocalCloseDate = each.entry stamp
					else
					if (each.entry stamp < LocalCloseDate)
						LocalCloseDate = each.entry stamp
			return LocalCloseDate

		ReopenedMessage is a MessageField
			"TaskHasBeenReopened"


		ReopenOneTimeMessage is a StringField
			type is Alpha 10
			restricted
			ReopenCount
			" Time"
			
		ReopenMultipleTimesMessage is a StringField
			type is Alpha 10
			restricted
			ReopenCount
			" Times"
			
		ReopenCountMessage is a ConditionalField
			type is Alpha 10
			if (ReopenCount = 1)
				ReopenOneTimeMessage
			else
				ReopenMultipleTimesMessage

		ReopenedByDerived is a DerivedField
			type is Alpha 100
			return (last ReasonCodeUsageReopenRel.UsedBy.FirstAndLastName)
			
		ReopenedDateDerived is a DerivedField
			type is TimeStamp
			return (last ReasonCodeUsageReopenRel.UsedDate)
			
		ReopenedCodeDerived is a DerivedField
			type is Alpha 20
			return (last ReasonCodeUsageReopenRel.ReasonCode)
			
		ReopenedDescDerived is a DerivedField
			type is Alpha 100
			return (last ReasonCodeUsageReopenRel.Description)

		ReopenedMessageDisplay is a MessageField
			"<ReopenedCodeDerived>_-_<ReopenedDescDerived>"

		ReopenedCommentDerived is a DerivedField
			type is Alpha size up to 500
			return (last ReasonCodeUsageReopenRel.Comment)
									
		RejectOneTimeMessage is a StringField
			type is Alpha 10
			restricted
			RejectCount
			" Time"
			
		RejectMultipleTimesMessage is a StringField
			type is Alpha 10
			restricted
			RejectCount
			" Times"
			
		RejectCountMessage is a ConditionalField
			type is Alpha 10
			if (RejectCount = 1)
				RejectOneTimeMessage
			else
				RejectMultipleTimesMessage

		RejectedByDerived is a DerivedField
			type is Alpha 100
			return (last ReasonCodeUsageRejectRel.UsedBy.FirstAndLastName)
			
		RejectedDateDerived is a DerivedField
			type is TimeStamp
			return (last ReasonCodeUsageRejectRel.UsedDate)
			
		RejectedCodeDerived is a DerivedField
			type is Alpha 20
			return (last ReasonCodeUsageRejectRel.ReasonCode)
			
		RejectedDescDerived is a DerivedField
			type is Alpha 100
			return (last ReasonCodeUsageRejectRel.Description)

		RejectedMessageDisplay is a MessageField
			"<RejectedDescDerived>_-_<RejectedDescDerived>"	
					
		RejectedCommentDerived is a DerivedField
			type is Alpha size up to 500
			return (last ReasonCodeUsageRejectRel.Comment)

		OneTimeRejectOnceMessage is a StringField
			type is Alpha 10
			restricted
			RejectOneTimeCount
			" Time"
			
		OneTimeRejectMultipleMessage is a StringField
			type is Alpha 10
			restricted
			RejectOneTimeCount
			" Times"
			
		OneTimeRejectCountMessage is a ConditionalField
			type is Alpha 10
			if (RejectOneTimeCount = 1)
				OneTimeRejectOnceMessage
			else
				OneTimeRejectMultipleMessage

		OneTimeRejectedByDerived is a DerivedField
			type is Alpha 100
			return (last ReasonCodeUsageRejectOneTimeRel.UsedBy.FirstAndLastName)
			
		OneTimeRejectedDateDerived is a DerivedField
			type is TimeStamp
			return (last ReasonCodeUsageRejectOneTimeRel.UsedDate)
			
		OneTimeRejectedCodeDerived is a DerivedField
			type is Alpha 20
			return (last ReasonCodeUsageRejectOneTimeRel.ReasonCode)
			
		OneTimeRejectedDescDerived is a DerivedField
			type is Alpha 100
			return (last ReasonCodeUsageRejectOneTimeRel.Description)

		OneTimeRejectedCommentDerived is a DerivedField
			type is Alpha size up to 500
			return (last ReasonCodeUsageRejectOneTimeRel.Comment)

		OneTimeRejectedDisplay is a MessageField
			"<OneTimeRejectedCodeDerived>_-_<OneTimeRejectedDescDerived>"
			
		OneTimeRejectedResubmitDateDerived is a DerivedField
			type is TimeStamp
			return (last ReasonCodeUsageRejectOneTimeRel.ResubmitDate)

		RejectReopenOneTimeAlertMessage is a ConditionalField
			type is Alpha 30
			if (Rejected)
				"Task was rejected and reopened"
			else
			if (Reopened)
				"Task was reopened"
			else
			if (OneTimeTaskRejected)
				"One time task was rejected"
			else
			if (OneTimeTaskWaitingApproval)
				"One time task pending approval"
			else
				blank

		VoidedMessage is a MessageField
			"TaskHasBeenVoided"

		VoidedByDerived is a DerivedField
			type is Alpha 100
			return (last ReasonCodeUsageVoidRel.UsedBy.FirstAndLastName)

		VoidedDateDerived is a DerivedField
			type is TimeStamp
			return (last ReasonCodeUsageVoidRel.UsedDate)

		VoidedCodeDerived is a DerivedField
			type is Alpha 20
			return (last ReasonCodeUsageVoidRel.ReasonCode)

		VoidedDescDerived is a DerivedField
			type is Alpha 100
			return (last ReasonCodeUsageVoidRel.Description)

		VoidedMessageDisplay is a MessageField
			"<VoidedCodeDerived>_-_<VoidedDescDerived>"

		VoidedCommentDerived is a DerivedField
			type is Alpha size up to 500
			return (last ReasonCodeUsageVoidRel.Comment)

		StartLateCodeDerived is a DerivedField
			type is Alpha 20
			return (first ReasonCodeUsageStartLateRel.ReasonCode)
			
		StartLateDescDerived is a DerivedField
			type is Alpha 100
			return (first ReasonCodeUsageStartLateRel.Description)

		StartLateCommentDerived is a DerivedField
			type is Alpha size up to 500
			default label is "Comments"
			return (first ReasonCodeUsageStartLateRel.Comment)

		StartLateDisplay is a MessageField
			"<StartLateCodeDerived>_-_<StartLateDescDerived>"

		CloseLateCodeDerived is a DerivedField
			type is Alpha 20
			return (first ReasonCodeUsageCloseLateRel.ReasonCode)
			
		CloseLateDescDerived is a DerivedField
			type is Alpha 100
			return (first ReasonCodeUsageCloseLateRel.Description)

		CloseLateCommentDerived is a DerivedField
			type is Alpha size up to 500
			return (first ReasonCodeUsageCloseLateRel.Comment)

		CloseLateDisplay is a MessageField
			"<CloseLateCodeDerived>_-_<CloseLateDescDerived>"

		OneTimeCalendarDisplay is a MessageField
			"<OneTimeCalendar>_-_<OneTimeCalendar.Description>"

		OneTimePeriodGroupDisplay is a MessageField
			"<OneTimePeriodGroup>_-_<OneTimePeriodGroup.Description>"

		CompanyDisplay is a MessageField
			"<TaskCompany.FinanceCompanyField>_-_<TaskCompany.FinanceCompanyField.Name>"

		DerivedNextApprovalLevel is a DerivedField
			type is Numeric 8
			restricted
			LocalApprovalLevel = ApprovalLevel
			include GetNextApprovalLevel
			return LocalApprovalLevel

		DerivedCurrentApprovalResource is a DerivedField
			type is Numeric 9
			restricted
			return first CurrentTaskApprovalLevelRel.Approver

		DerivedCurrentApprovalActor is a DerivedField
			type is Actor
			restricted
			return first CurrentTaskApprovalLevelRel.Approver.FinanceResourceActor

		DerivedCurrentApprovalTeam is a DerivedField
			type is AlphaUpper 20
			restricted
			return first CurrentTaskApprovalLevelRel.ApprovalTeam

		DerivedCurrentTeamActorList is a DerivedField
			type is Alpha 250
			restricted
			include BuildTeamApproverActorList
			return LocalApproverList

		DerivedCurrentApproverEscalationDays is a DerivedField
			type is Numeric 6
			restricted
			if (first CurrentTaskApprovalLevelRel.EscalationDays > 0)
				return first CurrentTaskApprovalLevelRel.EscalationDays	
			else
				return 10000

		DerivedCurrentApproverEscalationHours is a DerivedField
			type is Decimal 6.2
			restricted
			if (first CurrentTaskApprovalLevelRel.EscalationHours > 0)
				return first CurrentTaskApprovalLevelRel.EscalationHours
			else
				return 9999.99

		DisplayByCurrentApproverDesc is a StringField
			type is Alpha 100
			"by "
			DisplayCurrentApproverDesc

		DisplayCurrentApproverDesc is a ConditionalField
			type is Alpha 100
			restricted
			if (OneTimeTask
			and !OneTimeTaskApproved)
				DisplayCurrentOneTimeApproverDesc
			else
			if (TaskStatus.PendingApproval)
				if (Approver entered)
					Approver.FirstAndLastName
				else
					ApproverTeam.FinanceTeam.Description
			else
				blank

		DerivedNextOneTimeApprovalLevel is a DerivedField
			type is Numeric 8
			restricted
			LocalApprovalLevel = OneTimeTaskApprovalInfo.ApprovalLevel
			include GetNextOneTimeApprovalLevel
			return LocalApprovalLevel

		DerivedCurrentOneTimeApprovalResource is a DerivedField
			type is Numeric 9
			restricted
			return first CurrentOneTimeTaskApprovalLevelRel.Approver

		DerivedCurrentOneTimeApprovalActor is a DerivedField
			type is Actor
			restricted
			return first CurrentOneTimeTaskApprovalLevelRel.Approver.FinanceResourceActor

		DerivedCurrentOneTimeApprovalTeam is a DerivedField
			type is AlphaUpper 20
			restricted
			return first CurrentOneTimeTaskApprovalLevelRel.ApprovalTeam

		DerivedCurrentOneTimeTeamActorList is a DerivedField
			type is Alpha 250
			restricted
			include BuildTeamOneTimeApproverActorList
			return LocalApproverList

		DerivedCurrentOneTimeApproverEscalationHours is a DerivedField
			type is Decimal 6.2
			restricted
			if (first CurrentOneTimeTaskApprovalLevelRel.EscalationHours > 0)
				return first CurrentOneTimeTaskApprovalLevelRel.EscalationHours
			else
				return 9999.99

		DisplayByCurrentOneTimeApproverMsg is a StringField
			type is Alpha 125
			"Waiting on approval from "
			DisplayCurrentApproverDesc

		DisplayCurrentOneTimeApproverDesc is a ConditionalField
			type is Alpha 100
			restricted
			if (OneTimeTaskApprovalInfo.Approver entered)
				OneTimeTaskApprovalInfo.Approver.FirstAndLastName
			else
				OneTimeTaskApprovalInfo.ApproverTeam.FinanceTeam.Description

		DerivedOneTimeApprovalCode is a DerivedField
			type is AlphaUpper 30
			restricted
			return OneTimeTaskApprovalInfo.ApprovalCode

		DerivedOneTimeApprovalLevel is a DerivedField
			type is Numeric 8
			restricted
			return OneTimeTaskApprovalInfo.ApprovalLevel
			



		OneTimeTaskLinkback is a MessageField
			restricted
			"<linkback(webapp is CloseResource navigation is ProcessFlowForm text is \"ViewOneTimeTask\")>"

		CalendarBeginDate is a DerivedField
			type is Date
			restricted
			return ScheduleForTask.BeginDate
			
		CalendarDueDate is a DerivedField
			type is Date
			restricted
			return ScheduleForTask.DueDate

		TotalDetailCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalTotalDetailCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				else
					include CalculateScheduledPeriodCounts
				return LocalTotalDetailCount
			
		ScheduledCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalScheduledCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				return LocalScheduledCount
			
		InProcessCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalInProcessCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				return LocalInProcessCount
			
		PendingApprovalCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalPendingApprovalCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				return LocalPendingApprovalCount
			
		AllOpenCount is a ComputeField
			type is Numeric 5
			(ScheduledCount + InProcessCount + PendingApprovalCount)
			
		ClosedCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalClosedCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				return LocalClosedCount
			
		VoidedCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalVoidedCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				return LocalVoidedCount
			
		OverdueCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalOverdueCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				else
					include CalculateScheduledPeriodCounts
				return LocalOverdueCount
			
		DueTodayCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalDueTodayCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				else
					include CalculateScheduledPeriodCounts
				return LocalDueTodayCount
			
		StartTodayCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalStartTodayCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				else
					include CalculateScheduledPeriodCounts
				return LocalStartTodayCount
			
		InJeopardyCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalInJeopardyCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				return LocalInJeopardyCount
			
		LateToStartCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalLateToStartCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				else
					include CalculateScheduledPeriodCounts
				return LocalLateToStartCount

		OneTimeTaskCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalOneTimeTaskCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				else
					include CalculateScheduledPeriodCounts
				return LocalOneTimeTaskCount

		ReopenedCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalReopenedCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				return LocalReopenedCount
			
		StartEarlyCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalStartEarlyCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				return LocalStartEarlyCount
			
		StartLateCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalStartLateCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				return LocalStartLateCount
			
		DoneEarlyCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalDoneEarlyCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				return LocalDoneEarlyCount
			
		DoneLateCount is a DerivedField
			type is Numeric 5
			if (LocalCalcDone)
				return LocalDoneLateCount
			else
				if (PeriodIsOpenOrClosed)
					include CalculateDetailCounts
				return LocalDoneLateCount
			
		PercentCompleted is a ComputeField
			type is Percent 5.2
			((ClosedCount + VoidedCount) / TotalDetailCount)

		PercentScheduled is a ComputeField
			type is Percent 5.2
			(ScheduledCount / TotalDetailCount)

		PercentInProcess is a ComputeField
			type is Percent 5.2
			(InProcessCount / TotalDetailCount)

		PercentPendingApproval is a ComputeField
			type is Percent 5.2
			(PendingApprovalCount / TotalDetailCount)

		PercentClosed is a ComputeField
			type is Percent 5.2
			(ClosedCount / TotalDetailCount)

		PercentVoided is a ComputeField
			type is Percent 5.2
			(VoidedCount / TotalDetailCount)
			
		PercentReopened is a ComputeField
			type is Percent 5.2
			(ReopenedCount / TotalDetailCount)

		PercentStartEarly is a ComputeField
			type is Percent 5.2
			(StartEarlyCount / TotalDetailCount)

		PercentStartLate is a ComputeField
			type is Percent 5.2
			(StartLateCount / TotalDetailCount)

		PercentDoneEarly is a ComputeField
			type is Percent 5.2
			(DoneEarlyCount / TotalDetailCount)

		PercentDoneLate is a ComputeField
			type is Percent 5.2
			(DoneLateCount / TotalDetailCount)
			
		PercentOneTimeTask is a ComputeField
			type is Percent 5.2
			(OneTimeTaskCount / TotalDetailCount)
			
		PercentAllOpen is a ComputeField
			type is Percent 5.2
			(AllOpenCount / TotalDetailCount)

		PercentOverdue is a ComputeField
			type is Percent 5.2
			(OverdueCount / TotalDetailCount)

		PercentDueToday is a ComputeField
			type is Percent 5.2
			(DueTodayCount / TotalDetailCount)

		PercentInJeopardy is a ComputeField
			type is Percent 5.2
			(InJeopardyCount / TotalDetailCount)

		PercentLateToStart is a ComputeField
			type is Percent 5.2
			(LateToStartCount / TotalDetailCount)

		DerivedReassignedTo is a ConditionalField
			type is Alpha 100
			restricted
			if (TaskOwner entered)
				TaskOwner.TeamMember.PreferredSimplePresentationName
			else
				FinanceTeam.Description

		LocalTopLevelTask is a DerivedField
			type is Numeric 9
			restricted
			if (LocalDetailTask.ParentClosePeriodTask = 0)
				return LocalDetailTask
			else
				for each LocalDetailTask ancestors
					if (each.ParentClosePeriodTask = 0)
						return each.ClosePeriodTask
						
		TopLevelTask is a DerivedField
			type is Numeric 9
			restricted
			for each ClosePeriodTask ancestors
				if (each.ParentClosePeriodTask = 0)
					return each.ClosePeriodTask

		PeriodRedAlertMessage is a DerivedField
			type is Alpha 60
			if (Overdue)
				if (TaskStatus.Scheduled
				and CannotStartHasOpenPrereqs)
					return "Overdue; cannot start because of open prerequisites"
				else
					if (TaskStatus.InProcess
					and CannotCompleteHasOpenPrereqs)
						return "Overdue; cannot complete because of open prerequisites"
					else
						return "Overdue"

		PeriodYellowAlertMessage is a DerivedField
			type is Alpha 100
			if (TaskInJeopardy)
				if (TaskStatus.Scheduled	
				and CannotStartHasOpenPrereqs)
					return "In Jeopardy and cannot start because of open prerequisites"
				else
					if (TaskStatus.InProcess
					and CannotCompleteHasOpenPrereqs)
						return "In Jeopardy and cannot complete because of open prerequisites"
					else
						return JeopardyWithEstDueDateMsg
			else
				if (TaskStatus.Scheduled
				and CannotStartHasOpenPrereqs)
					return "Cannot start because of open prerequisites"
				else
					if (TaskStatus.InProcess
					and CannotCompleteHasOpenPrereqs)
						return "Cannot complete because of open prerequisites"
					else
						if (EstimateDueDateBeforeSchedule)
							return EarlyEstDueDateMsg
						
		JeopardyWithEstDueDateMsg is a MessageField
			restricted
			"InJeopardy;EstimatedCompletionIs<EstimateForTask.DueDate>__<EstimateForTask.DueTime>"
			
		EarlyEstDueDateMsg is a MessageField
			restricted
			"EstimatedEarlyCompletionIs<EstimateForTask.DueDate>__<EstimateForTask.DueTime>"
			
		OneTimeTaskMessage is a MessageField
			"OneTimeTask"
			
		DerivedAppsValue is a StringField
			type is Alpha 256
			restricted
			"OneTimeTaskApproval"
			UniqueID

		EstimateEnteredDateDerived is a DerivedField
			type is TimeStamp
			return (last ReasonCodeUsageEstimateRel.UsedDate)
			
		EstimateCodeDerived is a DerivedField
			type is Alpha 20
			return (last ReasonCodeUsageEstimateRel.ReasonCode)
			
		EstimateDescDerived is a DerivedField
			type is Alpha 100
			return (last ReasonCodeUsageEstimateRel.Description)

		EstimateReasonCodeDisplay is a MessageField
			"<EstimateCodeDerived>_-_<EstimateDescDerived>"

		EstimateCommentDerived is a DerivedField
			type is Alpha size up to 500
			return (last ReasonCodeUsageEstimateRel.Comment)
			
		EstimateEnteredByDerived is a DerivedField 
			type is Alpha 230
			return (last ReasonCodeUsageEstimateRel.UsedBy.FirstAndLastName)

		ActorIsTeamMemberOnApprovalsDerived is a DerivedField
			type is Boolean
			restricted
			LocalTeamMember = actor.agent(Employee).Employee
			for each ApprovalCodeResourceByTeamRel
				LocalTeam = each.ApprovalTeam
				if (LocalFinanceTeamMemberRel exists)
					return true

		PercentCompleteDerived is a DerivedField
			type is Percent 2
			default label is "PercentComplete"
			return (last TaskPercentCompleteRel.PercentComplete)
			
		PercentCompleteCommentDerived is a DerivedField
			type is Alpha size up to 500
			default label is "Comments"
			return (last TaskPercentCompleteRel.Comment)
			
		PercentCompleteDateDerived is a DerivedField
			type is TimeStamp
			default label is "Updated"
			return (last TaskPercentCompleteRel.DateCreated)
			
		PercentCompleteEnteredByDerived is a DerivedField
			type is Alpha 230
			default label is "By"
			return (last TaskPercentCompleteRel.CreatedByName)

		PercentCompleteForMsg is a ComputeField
			type is Numeric 2
			restricted
			(PercentCompleteDerived * 100)
			
		DisplayPercentCompleteMsg is a StringField
			type is Alpha 255
			restricted
			PercentCompleteForMsg
			"%  "
			PercentCompleteCommentDerived
			
		DisplayCurrentApproverMsg is a StringField
			type is Alpha 125
			restricted
			"Waiting on "
			DisplayCurrentApproverDesc
			" for approval"

		DisplayProcessingMessage is a DerivedField
			type is Alpha size up to 255
			if (DisplayCurrentApproverDesc entered)
				return (DisplayCurrentApproverMsg)
			if (ShowPercentComplete)
				if (PercentCompleteDerived = 0)
					return (PercentCompleteCommentDerived)
				else
					return (DisplayPercentCompleteMsg)
				
		TaskPercentCompleteRelCount is a ComputeField 
			type is Numeric 3
			restricted		
			(instance count of TaskPercentCompleteRel)

		TimeSensitiveFormMessage is a MessageField
			"*TimeSensitive"

		DerivedPreviousReopenAction is a DerivedField
			type is Alpha 50
			initialize LocalSaveAction
			for each this instance.audit log records
				if (each.action = "CloseTask"
				or  each.action = "VoidTask")
					LocalSaveAction = each.action
			return LocalSaveAction		

		DisplayDateStatus is a DerivedField
			type is Alpha 6
			if (TaskStatus.Scheduled
			or  TaskStatus.InProcess
			or  TaskStatus.PendingApproval)
				return "Due"
			else
				return "Closed"

		ExternalEmailUseMessage is a MessageField
			"UseThisOptionToSendAnEmailNotificationToAnExternalResourceWhenThePeriodIsOpenedForWorkOrFromAScheduledJob.AnExternalResourceCouldBeSomeoneWithinYourOrganizationThatDoesNotHaveAccessToThe_Close_ManagementApplicationOrItCouldBeSomeoneOutsideYourOrganization."

		DerivedExternalEmailSubject is a DerivedField
			type is Alpha 100
			return ExternalEmailSubject text
		
		DerivedExternalEmailContent is a DerivedField
			type is RichText
			return ExternalEmailContent text

		NumberOfDaysNote is a MessageField
			"(_Note:_UnlessTheSpecificDayOfTheMonthIsBeingUsed,Leaving_BeginNumberOfDaysBlankMeansTaskWillBeScheduledToBeginOnThePeriodEndDateAndLeaving_DueNumberOfDaysBlankMeansTaskWillBeScheduledToBeDueOnThePeriodEndDate)"

		NumberOfDaysNotePart1 is a MessageField
			"(_Note:_UnlessTheSpecificDayOfTheMonthIsBeingUsed,Leaving_BeginNumberOfDaysBlankMeansTaskWillBeScheduledToBeginOnThePeriodEndDate" //AndLeaving_DueNumberOfDaysBlankMeansTaskWillBeScheduledToBeDueOnThePeriodEndDate)"

		NumberOfDaysNotePart2 is a MessageField
			"AndLeaving_DueNumberOfDaysBlankMeansTaskWillBeScheduledToBeDueOnThePeriodEndDate)"

		DerivedSystemCalendar is a DerivedField  
			type is like SystemCalendar
			restricted
			if (OneTimeTask)
				if (OneTimeCalendar entered)
					return OneTimeCalendar
				else
					return ParentClosePeriodTask.CreatedFrom.DefaultCalendar
			else
				return CreatedFrom.DefaultCalendar

		DerivedWorkDaysOnly is a DerivedField  
			type is Boolean
			restricted
			if (OneTimeTask)
				if (OneTimeCalendar entered)
					return OneTimeScheduleForWorkDaysOnly
				else
					return ParentClosePeriodTask.CreatedFrom.ScheduleForWorkDaysOnly
			else
				return CreatedFrom.ScheduleForWorkDaysOnly

		DerivedEndDateString is a DerivedField
			type is AlphaUpper 20
			restricted
			LocalDate		= SystemCalendarPeriodRel.SystemCalendarPeriod.DateRange.ToDate
			LocalAlphaYear	= LocalDate year
			LocalAlphaDay	= LocalDate year day
			DerivedEndDateString	= LocalAlphaYear
			if (LocalAlphaDay size = 1)
				DerivedEndDateString += "00"
			else
			if (LocalAlphaDay size = 2)
				DerivedEndDateString += "0"
			DerivedEndDateString += LocalAlphaDay 

	Conditions

		IsMe
			restricted
			when (CloseManagementGroup = actor.agent(Employee).HROrganization		
			and   TaskOwner.TeamMember = actor.agent(Employee).Employee)	
		IsNotMe
			restricted
			when (CloseManagementGroup not = actor.agent(Employee).HROrganization		
			or    TaskOwner.TeamMember not = actor.agent(Employee).Employee)	
		IsReallyMeAndNotMyProxy
          	restricted
    		when (CloseManagementGroup not = authenticated actor.agent(Employee).HROrganization		
			or    TaskOwner.TeamMember not = authenticated actor.agent(Employee).Employee)	


		SummaryLevel
			restricted
			when (TaskLevel.Summary)
		DetailLevel
			restricted
			when (TaskLevel.Detail)	

		RedAlert
			restricted
			when (DetailLevel and Overdue)
		YellowAlert
			restricted
			when (DetailLevel and (TaskInJeopardy or ShowOpenPrereqAlertMessage or EstimateDueDateBeforeSchedule))
		GreenAlert
			restricted
			when (DetailLevel and TaskStatus.Scheduled and ScheduleForTask.BeginDate = current corporate date)
		ScheduledInProcess
			restricted
			when (DetailLevel and (TaskStatus.Scheduled or TaskStatus.InProcess))
		HasChild
			restricted
			when (ClosePeriodTask children exists)
		HasSummaryChild
			restricted
			when (SummaryTaskDescendantsRel exists)
		HasParent
			restricted
			when (ParentClosePeriodTask not = 0) 				
		IsTopLevel
			restricted
			when (ParentClosePeriodTask = 0) 
		ShowMyToDo 
			restricted
			when (DetailLevel and MyTask and OpenPeriodOpenTask) 
		MyTask 
			restricted
			when (DetailLevel and TaskOwner = actor.agent(Employee).Employee)






		StartWorkValid
			restricted
			when ((!StartingLate
			and   DetailLevel and TaskStatus.Scheduled and OpenPeriodTask
			and   IsNotTaskForPeriodReconciliations
			and   !OneTimeTaskNeedsApproval)
			and  (MyTask or UnassignedTaskForMyTeam))
		StartWorkLateValid
			restricted
			when ((StartingLate
			and   DetailLevel and TaskStatus.Scheduled and OpenPeriodTask
			and   IsNotTaskForPeriodReconciliations
			and   !OneTimeTaskNeedsApproval)
			and  (MyTask or UnassignedTaskForMyTeam))
		UnassignedTask
			restricted
			when (DetailLevel and TaskOwner = blank)
		Unassigned
			restricted
			when (TaskOwner.TeamMember not entered)
		UnassignedTaskForMyTeam
			restricted
			when (UnassignedTask
			and   TaskForMyTeam)
		ScheduledToBegin
			restricted
			when (OpenPeriodOpenTask and (ScheduleForTask.BeginDate >= current corporate date))
		TaskForMyTeam
			restricted
			when (MyTeamsRel exists)
		TaskForMyApprovalTeam
			restricted
			when (MyApprovalTeamsRel exists)
		TaskForMyOneTimeApprovalTeam
			restricted
			when (MyOneTimeApprovalTeamsRel exists)
		AllowUpdate
			restricted
			when (TaskStatus < 7)
		AllowToUpdateEstimate
			restricted
			when (OpenPeriodTask
			and   MyTask
			and   TaskStatus < TaskStatus.PendingApproval
			and   !OneTimeTaskNeedsApproval)
		AllowToUpdateJournalDetail
            restricted
            when (OpenPeriodTask
            and   MyTask
            and   TaskStatus < TaskStatus.PendingApproval
            and   !OneTimeTaskNeedsApproval)
        AllowAttachment
			restricted
			when (OpenPeriodTask and MyTask and (TaskStatus < TaskStatus.PendingApproval))
		AllowVoid
			restricted
			when (OpenPeriodTask
			and   TaskStatus < TaskStatus.Closed
			and   IsNotTaskForPeriodReconciliations
			and  !AllowOneTimeVoidByCreator)
		AllowOneTimeVoidByCreator
			restricted
			when (OpenPeriodTask
			and   TaskStatus < TaskStatus.Closed
			and   OneTimeTask 
			and   OneTimeTaskCreator = actor.agent(Employee).Employee)
		AllowReopen
			restricted
			when (OpenPeriodTask 
			and   IsNotTaskForPeriodReconciliations
			and  (TaskStatus = TaskStatus.Closed
			or    TaskStatus = TaskStatus.Voided))
		AllowResourceReopen
            restricted
            when (CloseManagementGroup.AllowResourceToReopenCompletedTasks
            and   MyTask
            and   OpenPeriodTask
            and   IsNotTaskForPeriodReconciliations
            and  (TaskStatus = TaskStatus.Closed
            or    TaskStatus = TaskStatus.Voided))
		AllowScheduleDelete
			restricted
			when (IsTopLevel
			and   ClosePeriod.CloseManagementStatus.Scheduled)
		AllowProcessDelete
			restricted
			when (IsTopLevel
			and  (ClosePeriod.CloseManagementStatus.Open
			or    ClosePeriod.CloseManagementStatus.Closed))
		Overdue

			when ((TaskStatus < TaskStatus.Closed)
			and   (ScheduleForTask.DueDate entered)
			and   ((ScheduleForTask.DueDate < current corporate date)
			or     (DueTimeSensitive
			and    (ScheduleForTask.DueDate = current corporate date)
			and    (ScheduleForTask.DueTime < current corporate time))))
		StartedLate
			restricted
			when (StartMetric.StartedLate and ActualForTask.BeginDate entered)
		CompletedLate
			restricted
			when (DueMetric.CompletedLate and ActualForTask.DueDate entered)
		EstimateOverdue
			restricted
			when (DetailLevel and (TaskStatus < TaskStatus.Closed) and (EstimateForTask.DueDate < current corporate date) and (EstimateForTask.DueDate entered))
		HasPrerequisite
			restricted
			when (DetailLevel and PrerequisiteTaskRel exists)
		HasDependent
			restricted
			when (DetailLevel and DependentTaskRel exists)
		ClosePeriodTaskHasPrerequisite
			restricted
			when (ClosePrereqClosePeriodTaskRel exists)				









		RevisedDueDate
			restricted
			when (DetailLevel 
				and ((EstimateForTask.DueDate entered and (EstimateForTask.DueDate not = ScheduleForTask.DueDate))
				or   ((EstimateForTask.DueDate = ScheduleForTask.DueDate) and (EstimateForTask.DueTime not = ScheduleForTask.DueTime))))
		ClosedTask
			restricted
			when (TaskStatus = TaskStatus.Closed)		
		VoidedTask
			when (TaskStatus = TaskStatus.Voided)		
		OpenPeriodUnassignedTask
			restricted
			when (DetailLevel and OpenPeriodOpenTask and (!TaskOwner entered))
		OpenPeriodVoidTask
			restricted
			when (DetailLevel and OpenPeriodTask and (TaskStatus = TaskStatus.Voided))
		ClosedOnTime
			restricted
			when (DetailLevel and ClosedTask and (ScheduleForTask.DueDate <= ActualForTask.DueDate))
		OpenPrerequisitesExist
			restricted
			when (DetailLevel and OpenPrerequisiteTaskRel exists)
		OpenPeriodTask
			restricted
			when (DetailLevel and ClosePeriod.CloseManagementStatus.Open)
		ScheduledPeriodTask
			restricted
			when (DetailLevel and ClosePeriod.CloseManagementStatus.Scheduled)
		PeriodIsOpenOrClosed
			restricted
			when (ClosePeriod.CloseManagementStatus.Open
			or    ClosePeriod.CloseManagementStatus.Closed)
		PeriodIsOpen
			restricted
			when (ClosePeriod.CloseManagementStatus.Open)			 
		PeriodIsScheduled
			restricted
			when (ClosePeriod.CloseManagementStatus.Scheduled)
		PeriodIsClosed
			restricted
			when (ClosePeriod.CloseManagementStatus.Closed)			 
		ReadyToBegin
			restricted
			when (OpenPeriodScheduledTask 
			and  (ScheduleForTask.BeginDate <= current corporate date)
			and   TaskOwner.TeamMember.Active
			and   !OpenPrerequisiteTaskRel exists)								
		OpenPeriodOpenTask
			restricted
			when (DetailLevel and (OpenPeriodScheduledTask or OpenPeriodInProcessTask))
		OpenPeriodScheduledTask 	
			restricted
			when (DetailLevel and OpenPeriodTask and TaskStatus = TaskStatus.Scheduled) 
		OpenPeriodInProcessTask
			restricted
			when (DetailLevel and OpenPeriodTask and TaskStatus = TaskStatus.InProcess) 
		OpenPeriodClosedTask
			restricted
			when (DetailLevel and OpenPeriodTask and TaskStatus = TaskStatus.Closed) 
		OpenPeriodClosedOnTime
			restricted
			when (DetailLevel and OpenPeriodClosedTask and ClosedOnTime)
		OpenPeriodClosedOverDue
			restricted
			when (DetailLevel and OpenPeriodClosedTask and !ClosedOnTime)				
		OpenPeriodClosedAndVoidTask
			restricted
			when (OpenPeriodTask and (TaskStatus.Closed or TaskStatus.Voided))  
		OpenPeriodAndTaskOnTime
			restricted
			when ((OpenPeriodScheduledTask
				or OpenPeriodInProcessTask)
				and (ExpectedOnTime
				or   CurrentlyOnTime))
		ExpectedOnTime
			restricted
			when (DetailLevel and (EstimateForTask.DueDate entered) and (EstimateForTask.DueDate <= ScheduleForTask.DueDate))
		CurrentlyOnTime
			restricted
			when (DetailLevel and (EstimateForTask.DueDate not entered) and (current corporate date <= ScheduleForTask.DueDate))
		OwnerIsMemberOfTeam
			restricted
			when (TaskOwner exists)
		Scheduled
			restricted
			when (TaskStatus.Scheduled)
		HasFinanceResource
			restricted
			when (TaskOwner entered)	
		ShowFinanceResourceNav
			restricted
			when (HasFinanceResource
				and !ItIsMe)
		AllowReassign
			restricted
			when (TaskStatus < 5
			and   !OneTimeTaskNeedsApproval)

		AllowReassignToTeam
			restricted
			when (!CloseManagementGroup.AllowResourceToReassignToResource
			and   TaskStatus < 5
			and   MyTask
			and   !OneTimeTaskNeedsApproval
			and   PeriodIsOpen)
		AllowResourceReassign
			restricted
			when (CloseManagementGroup.AllowResourceToReassignToResource
			and   MyTask
			and   TaskStatus < 5
			and   !OneTimeTaskNeedsApproval
			and   PeriodIsOpen)
		AllowAssign
			restricted
			when (TaskStatus < 5
			and   !TaskOwner entered)			
		ViewProcessValid
			restricted
			when (TaskLevel.Summary and HasChild)
		ItIsMe 
			restricted
			when (TaskOwner.TeamMember = actor.agent(Employee).Employee)
		ShowProcessDoco
			restricted
			when (ProcessDocumentationRel exists)
		ShowSupportingDoco
			restricted
			when (SupportingDocumentationRel exists)
		ShowNotes
			restricted
			when (NotesRel exists)
		ShowLibrary
			restricted
			when (LibraryRel exists)
		ShowImage
			restricted
			when (TaskOwner.TeamMember.ResourcePicture entered)
		ShowCompletionMessages
			restricted
			when (TaskLevel.Detail
			and  (RequireSupportingDoco
			or	  RequireJournalEntry
			or    RequiresApproval
			or    HasIssueTaskAssignTaskPrereq))	
		AllowTaskToBeClosed
			restricted
			when (DetailLevel and MyTask and TaskStatus.InProcess and IsNotTaskForPeriodReconciliations)
		AllowForceComplete
			restricted
			when((DetailLevel and TaskStatus.InProcess and IsNotTaskForPeriodReconciliations)
			and	(!ClosingLate
			or 	(ClosingLate
			and	!CloseManagementGroup.CloseLateReasonCodeRequired)))
		AllowForceCompleteLate
			restricted
			when((DetailLevel and TaskStatus.InProcess and IsNotTaskForPeriodReconciliations)
			and	ClosingLate
			and	CloseManagementGroup.CloseLateReasonCodeRequired)
		ValidForMetrics					
			restricted
			when (DetailLevel
			and     TaskStatus.Scheduled)
		ShowFinancialFormEntry
			restricted
			when (DetailLevel
			and   CreatedFrom.FinancialForm entered)
		IsHighRisk
			restricted
			when (Risk.High)			
		IsMediumRisk
			restricted
			when (Risk.Medium)			
		IsLowRisk
			restricted
			when (Risk.Low)			
		IsHighPriority
			restricted
			when (Priority.High)			
		IsMediumPriority
			restricted
			when (Priority.Medium)			
		IsLowPriority
			restricted
			when (Priority.Low)
		ShowInstructions
			restricted
			when (TaskDetail entered)
		ShowStartLateReason
			restricted
			when (StartMetric.StartedLate
			and  (StartLateCodeDerived entered
			or    StartLateCommentDerived entered))	
		ShowCloseLateReason
			restricted
			when (DueMetric.CompletedLate
			and  (CloseLateCodeDerived entered
			or    CloseLateCommentDerived entered))	

		DueToday

			when ((TaskStatus < TaskStatus.Closed)
			and   ((!DueTimeSensitive and (ScheduleForTask.DueDate = current corporate date))
			or     (DueTimeSensitive and (ScheduleForTask.DueDate = current corporate date) and (ScheduleForTask.DueTime > current corporate time)))) 
		EstimateDueToday
			restricted
			when (TaskLevel.Detail and (TaskStatus < 7) and (EstimateForTask.DueDate = current corporate date) and (EstimateForTask.DueDate entered))
		StartToday
			restricted
			when (TaskLevel.Detail and (TaskStatus < 7) and (ScheduleForTask.BeginDate = current corporate date))
		TaskInJeopardy
			restricted

			when (PeriodIsOpen 
			and  (TaskStatus.Scheduled or TaskStatus.InProcess)  
			and ((ScheduleForTask.DueDate < EstimateForTask.DueDate)
			or (DueTimeSensitive and (ScheduleForTask.DueDate = EstimateForTask.DueDate) and (ScheduleForTask.DueTime < EstimateForTask.DueTime))))

		LateToStart
			restricted
			when ((TaskStatus.Scheduled
			and   ScheduleForTask.BeginDate < current corporate date)
			or   (TaskStatus.InProcess
			and   StartMetric.StartedLate))
		EstimateDueDateBeforeSchedule
			restricted
			when (PeriodIsOpen 
			and  (TaskStatus.Scheduled or TaskStatus.InProcess)
			and  (EstimateForTask entered)  
			and ((ScheduleForTask.DueDate > EstimateForTask.DueDate)
			or (DueTimeSensitive and (ScheduleForTask.DueDate = EstimateForTask.DueDate) and (ScheduleForTask.DueTime > EstimateForTask.DueTime))))


		ShowMyMessages
			restricted
			when (MyMessagesRel exists)	
		ShowMyWorkRequests
			restricted
			when (MyWorkRequestsRel exists)	
		ShowMyReminders
			restricted
			when (MyRemindersRel exists)
		
		IsTaskForPeriodReconciliationNotInConsolidatedGroup
			when (PeriodEndReconciliationNotInConsolidatedGroupRel exists)

		IsTaskForPeriodReconciliationConsolidatedGroup
			when (PeriodEndReconciliationForConsolidatedGroupRel exists)

		IsTaskForPeriodReconciliationNonAccount
			when (PeriodEndReconciliationNonAccountRel exists)

		IsNotTaskForPeriodReconciliations
			when (!IsTaskForPeriodReconciliationConsolidatedGroup
			and   !IsTaskForPeriodReconciliationNotInConsolidatedGroup
			and   !IsTaskForPeriodReconciliationNonAccount)



		NoPrereq 			
			restricted
			when (!PrerequisiteTaskRel exists)	
		PrereqFuture
			restricted
			when (!NoPrereq)	
		PrereqEarly
			restricted
			when (false)	
		PrereqOnTime
			restricted
			when (false)	
		PrereqLate
			restricted
			when (false)	
		StartFuture  							
			restricted
			when (TaskStatus.Scheduled
			and   current corporate date < ScheduleForTask.BeginDate)
		StartEarly  				
			restricted
			when ((TaskStatus.InProcess
			or     TaskStatus.Closed)
			and   ActualForTask.BeginDate < ScheduleForTask.BeginDate) 	
		StartOnTime  			
			restricted
			when ((TaskStatus.InProcess
			or     TaskStatus.Closed)
			and   ActualForTask.BeginDate = ScheduleForTask.BeginDate) 	
		StartLate  				
			restricted
			when ((TaskStatus.Scheduled
			and    current corporate date > ScheduleForTask.BeginDate)
			or	  ((TaskStatus.InProcess
			or      TaskStatus.Closed)
			and    ActualForTask.BeginDate > ScheduleForTask.BeginDate)) 	
		DueFuture  				
			restricted
			when ((TaskStatus.Scheduled
			or	   TaskStatus.InProcess)
			and	  ScheduleForTask.DueDate > current corporate date)
		IsLate	
			restricted
			when ((TaskStatus.Scheduled
			or	   TaskStatus.InProcess)
			and   ScheduleForTask.DueDate < current corporate date)	
		DoneEarly  				
			restricted
			when ((TaskStatus.PendingApproval
			or	   TaskStatus.Closed)
			and   ActualForTask.DueDate < ScheduleForTask.DueDate)	
		DoneOnTime  				
			restricted
			when ((TaskStatus.PendingApproval
			or	   TaskStatus.Closed)
			and   ActualForTask.DueDate = ScheduleForTask.DueDate)	
		DoneLate  				
			restricted
			when ((TaskStatus.PendingApproval
			or	   TaskStatus.Closed)
			and   ActualForTask.DueDate > ScheduleForTask.DueDate)
		LOEFuture 				
			restricted
			when (!NoLOE
			and	  TaskStatus.Scheduled)	
		NoLOE 					
			restricted
			when (!ActualForTask.LevelOfEffort entered
			or    ActualForTask.LevelOfEffort = 0) 	
		LOELessThanExpected  	
			restricted
			when (!NoLOE
			and   ActualForTask.LevelOfEffort < ScheduleForTask.LevelOfEffort)	
		LOEAsExpected 			
			restricted
			when (!NoLOE
			and	  ActualForTask.LevelOfEffort = ScheduleForTask.LevelOfEffort)	
		LOEMoreThanExpected  	
			restricted
			when (!NoLOE
			and	  ActualForTask.LevelOfEffort > ScheduleForTask.LevelOfEffort)	
		ApprovalFuture 			
			restricted
			when (RequiresApproval
			and  (TaskStatus.Scheduled
			or    TaskStatus.InProcess))	
		ApprovalRequired  		
			restricted
			when (TaskStatus.PendingApproval)	
		NoApproval  			
			restricted
			when (!RequiresApproval)	
		NotInJeopardy  			
			restricted
			when (!TaskInJeopardy)	
		IsOnTarget
			restricted
			when (!TaskInJeopardy
			and   !IsClosed)
		IsPendingApproval
			restricted
			when (TaskStatus.PendingApproval
			and   TaskLevel.Detail)	
		IsClosed
			restricted
			when (TaskStatus.Closed
			or    TaskStatus.Voided)
		ReopenedOnce
			restricted
			when (ReopenCount = 1)
		ReopenedMultiples
			restricted
			when (ReopenCount > 1)
		RejectedOnce
			restricted
			when (RejectCount = 1)
		RejectedMultiples
			restricted
			when (RejectCount > 1)
		RejectReasonCodeRequired
			restricted
			when (CloseManagementGroup.RejectReasonCodeRequired)
		RejectedOneTimeOnce
			restricted
			when (RejectOneTimeCount = 1)
		RejectedOneTimeMultiples
			restricted
			when (RejectOneTimeCount > 1)
		RejectOneTimeTaskReasonCodeRequired
			restricted
			when (CloseManagementGroup.RejectOneTimeTaskReasonCodeRequired)
		ShowRejectedCommentOnly
			restricted
			when (RejectedCodeDerived not entered
			and   RejectedCommentDerived entered)
		HasMultipleRejectionHistory
			restricted
			when (RejectedMultiples
			or    RejectedOneTimeMultiples)	
		UpdateAnalyticCubeFile
			restricted
			when (CloseManagementGroup.AutoUpdateAnalyticCubeFile)						

		SupportingDocoIsOptional
			restricted
			when (!RequireSupportingDoco)

		JournalEntryDetailIsOptional
            restricted
            when (!RequireJournalEntry)
            
		SummaryMissingDetailEstimate
			restricted
			when (SummaryLevel
			and   DescendantsMissingEstimateRel exists)
			
		HasSupportingDoco
			restricted
			when (SupportingDocumentationRel exists)

		HasSupportingDocumentation
            when (SupportingDocumentationRel exists)
			
		PendingTeamApproval
			restricted
			when (IsPendingApproval
			and   ApproverTeam entered)
			
		HasClosedDependents
			restricted
			when (ClosedDependentRel exists)
			
		HasReasonCodes
			restricted
			when (TaskReasonCodeUsage set exists)
			
		HasReopenHistory
			restricted
			when (ReasonCodeUsageReopenRel exists)
			
		HasRejectHistory
			restricted
			when (ReasonCodeUsageRejectRel exists)
			
		HasOneTimeRejectHistory
			restricted
			when (ReasonCodeUsageRejectOneTimeRel exists)

		RejectedReopenedOneTimeStatus
			restricted
			when (Rejected
			or    Reopened
			or    OneTimeTaskRejected
			or    OneTimeTaskWaitingApproval)

		ClosingLate
			restricted
		 	when (ScheduleForTask.DueDate < current corporate date)



		
		ClosingLateRequireReasonCode
			restricted
			when (ClosingLate
			and	  CloseManagementGroup.CloseLateReasonCodeRequired)
				
		StartingLate
			restricted
			when (ScheduleForTask.BeginDate < current corporate date)
			
		HasOneTimeTasks
			restricted
			when (OneTimeTaskCount > 0)

		HasScheduledDetails
			restricted
			when (ScheduledTaskDescendantsRel exists)
		
		HasInProcessDetails
			restricted
			when (InProcessTaskDescendantsRel exists)
		
		HasPendingApprovalDetails
			restricted
			when (PendingApprovalTaskDescendantsRel exists)
		
		ShowAllOpen
			restricted
			when ((HasScheduledDetails and HasInProcessDetails)
			or    (HasScheduledDetails and HasPendingApprovalDetails)
			or    (HasInProcessDetails and HasPendingApprovalDetails))
			
		HasClosedDetails
			restricted
			when (ClosedTaskDescendantsRel exists)
		
		HasVoidedDetails
			restricted
			when (VoidTaskDescendantsRel exists)
			
		HasOverdueDetails
			restricted
			when (OverdueCount > 0)

		HasDueTodayDetails
			restricted
			when (DueTodayCount > 0)

		HasStartTodayDetails
			restricted
			when (StartTodayCount > 0)
			
		HasInJeopardyDetails
			restricted
			when (InJeopardyTaskDescendantsRel exists)

		HasLateToStartDetails
			restricted
			when (LateToStartCount > 0)
			
		HasReopenedDetails
			restricted
			when (ReopenedCount > 0)
			
		HasStartEarlyDetails
			restricted
			when (StartEarlyCount > 0)
			
		HasStartLateDetails
			restricted
			when (StartLateCount > 0)
			
		HasDoneEarlyDetails
			restricted
			when (DoneEarlyCount > 0)
			
		HasDoneLateDetails
			restricted
			when (DoneLateCount > 0)
			
		CannotStartHasOpenPrereqs
			restricted
			when (CannotStartPrereqTaskRel exists)
			
		CannotCompleteHasOpenPrereqs
			restricted
			when (CannotCompletePrereqTaskRel exists)
			
		ShowOpenPrereqAlertMessage
			restricted
			when ((TaskStatus.Scheduled
			and    CannotStartHasOpenPrereqs)
			or    (TaskStatus.InProcess
			and    CannotCompleteHasOpenPrereqs))
			
		ApprovalsNeeded
			when (OneTimeTaskRequiresApproval
			or    RequiresApproval)
			
		AllowCreationOfOneTimeTasks
			restricted
			when (CloseManagementGroup.AllowOneTimeTasks
			and   PeriodIsOpen)
			
		OneTimeTaskNeedsApprovalCode
			restricted
			when (CloseManagementGroup.RequireApprovalOfOneTimeTasks)
			
		OneTimeTaskRequiresApproval
			when (OneTimeTaskApprovalInfo.ApprovalCode entered)
		
		OneTimeTaskNeedsApproval
			restricted
			when (OneTimeTask
			and   OneTimeTaskRequiresApproval
			and   !OneTimeTaskApproved)

		OneTimeTaskWaitingApproval
			restricted
			when (OneTimeTask
			and   OneTimeTaskNeedsApproval
			and   !OneTimeTaskRejected
			and   !TaskStatus.Voided)
			
		AllowResubmitOfOneTimeTask
			restricted
			when (OneTimeTaskRejected
			and   OneTimeTaskCreator = actor.agent(Employee).Employee)

		AllowAddOfOneTimeTaskToTheProcess
			when (OneTimeTask
			and   OneTimeCreatedCloseTask not entered
			and  !OneTimeTaskWaitingApproval)

		OneTimeTaskAddedToProcess
			when (OneTimeCreatedCloseTask entered)
			
		ShowDetailEstimateReason
			restricted
			when (TaskLevel.Detail
			and   ReasonCodeUsageEstimateRel exists)
			
		ShowProcessFlowDetails
			restricted
			when (RequiresApproval
			and  (TaskStatus.PendingApproval
            or    TaskStatus.Closed))


		ActorIsCloseAdministrator
			restricted
			when (CloseAdministratorRoleRel exists)
			
		ActorIsCloseManager
			restricted
			when (CloseManagerRoleRel exists)

		ShowSummaryProgress
			restricted
			when (PeriodIsOpen
			and   SummaryLevel)
		
		ShowSummaryRecap
			restricted
			when (PeriodIsClosed
			and   SummaryLevel)
		
		ShowSummarySchedule
			restricted
			when (PeriodIsScheduled
			and   SummaryLevel)

		ShowPercentComplete
			restricted
			when (HasPercentComplete
			and  (TaskStatus.Scheduled
			or    TaskStatus.InProcess))

		HasPercentComplete
			restricted
			when (TaskPercentCompleteRel exists)
			
		ShowPercentCompleteHistory
			restricted
			when ((TaskStatus.InProcess
			and    TaskPercentCompleteRelCount > 1)
			or    (TaskStatus > TaskStatus.InProcess
			and    HasPercentComplete))
			
		HasTaskTypes
			restricted
			when (PrimaryTaskType entered
			or    SecondaryTaskType entered
			or    TertiaryTaskType entered)

		IsOpen
			when (TaskStatus < 7)
			
		HasCreatedFrom
			restricted
			when (CreatedFrom entered)

		OpenTimeSensitive
			restricted
			when (IsOpen
			and   DueTimeSensitive)

		DueTimeSensitiveNeedsNotification
			restricted
			when (OpenTimeSensitive
			and   DueTimeNotificationStamp not entered
			and ((ScheduleForTask.DueDate < current corporate date)
			or  ((ScheduleForTask.DueDate = current corporate date)
			and  (ScheduleForTask.DueTime < current corporate time))))

		HasEstimate
			restricted
			when (EstimateForTask entered)

		ReopenNeedsReassignment
			when (TaskOwner entered
			and   !OwnerIsMemberOfTeam)

		ReopenOfVoidedTask
			when (DerivedPreviousReopenAction = "VoidTask")

		OpenTaskRequiresApproval
            when ((TaskStatus.Scheduled
            or     TaskStatus.InProcess) 
            and    RequiresApproval)

        OpenTaskNoApprovalRequired
            when ((TaskStatus.Scheduled
            or     TaskStatus.InProcess)
            and    TaskLevel.Detail
            and    !RequiresApproval)

        HasTaskCompletionApprovalHistory
            when (TaskCompletionApprovalHistoryRel exists)

        HasOneTimeTaskApprovalHistory
            when (OneTimeTaskApprovalHistoryRel exists)

        HasApprovalHistory
            when (ClosePeriodTaskApprovalHistory set exists)

        AllowReassignApprover
            when (Workunit entered
            and      TaskStatus.PendingApproval)

        AllowReassignOneTimeTaskApprover
            when (OneTimeWorkunit entered
            and      OneTimeTaskNeedsApproval)

		ShowExternalEmail
			when (CloseManagementGroup.AllowExternalEmails
			and   UseExternalEmailNotification)
		
		HasJournalEntries
			when (ClosePeriodTaskJournal set exists)
			
		HasUnreleasedJournalEntries
			when (UnreleasedJournalEntryDetailRel exists)
		
		TaskIsOpenNoPrereqsNotLate
			when (ScheduledInProcess
			and   !CannotCompleteHasOpenPrereqs
			and   !ClosingLateRequireReasonCode)
				

		MyOpenPeriodSummaryTasks
			when (TaskLevel.Summary
			and   !IsTopLevel
			and   TaskOwner = actor.agent(FinanceResource).FinanceResource
			and   PeriodIsOpen)

		MyOpenPeriodOpenSummaryTasks
			when (MyOpenPeriodSummaryTasks
			and  (TaskStatus.Scheduled or TaskStatus.InProcess or TaskStatus.PendingApproval))

		MyOpenPeriodClosedSummaryTasks
			when (MyOpenPeriodSummaryTasks
			and   (TaskStatus.Closed or TaskStatus.Voided))

		MyOpenPeriodTeamSummaryTasks
			when (MyTeamsRel exists
			and   Unassigned
			and   TaskLevel.Summary
			and   !IsTopLevel
			and   PeriodIsOpen)

		MyOpenPeriodOpenTeamSummaryTasks
			when (MyOpenPeriodTeamSummaryTasks
			and  (TaskStatus.Scheduled or TaskStatus.InProcess or TaskStatus.PendingApproval))

		MyOpenPeriodClosedTeamSummaryTasks
			when (MyOpenPeriodTeamSummaryTasks
			and  (TaskStatus.Closed or TaskStatus.Voided))
			
		NotClosedByOwner
			when (TaskCompletedBy entered
			and   TaskCompletedBy != TaskOwner.TeamMember)	

		SecurityGroupAllowsAccess
			restricted
			when (TaskCompany !entered
			or   (TaskCompany entered
			and   TaskCompany.FinanceCompanyField.SecurityGroupAllowsAccess))

		ValidOneTimeDetailLevelDates
			restricted	
			when (TaskLevel.Detail
		    and   OneTimeBeginIsBeforeDue)
				
		OneTimeBeginIsBeforeDue		
			restricted	
			when ((OneTimeDueDaysFromPeriodEnd > OneTimeBeginDaysFromPeriodEnd)
			or   ((OneTimeDueDaysFromPeriodEnd = OneTimeBeginDaysFromPeriodEnd) 
			and   (OneTimeDueTime >= OneTimeBeginTime)))

		HasOpenCubeFileRecord
			restricted
			when (ClosePeriodTaskCubeRel.Open)


		HasIssueTaskAssignTaskPrereq 
			restricted
			when (PeriodIssueAssignedPrereqRel exists)

		HasClosePeriodTaskIssue
			restricted
			when (ClosePeriodTaskIssueRel exists)	
		HasUnresolvedClosePeriodTaskIssue
			restricted
			when (UnresolvedClosePeriodTaskIssueRel exists)
		ResolvedClosePeriodTaskIssue
			restricted
			when (ResolvedClosePeriodTaskIssueRel exists
			and   not HasUnresolvedClosePeriodTaskIssue)
	Relations

		ProcessDocumentationRel
			one-to-many relation to CloseTaskDocumentation
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.CloseTask				= CreatedFrom






		LibraryRel   
			one-to-many relation to ClosePeriodTask
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask and ancestors.ClosePeriodTask 
			Instance Selection	
				where (related.ShowProcessDoco)

		SupportingDocumentationRel is a ClosePeriodTaskDocumentation set







		NotesRel
			one-to-many relation to FinanceResourceDialogue
			Field Mapping uses ByNavigateToThis
				related.HROrganization	= CloseManagementGroup.HROrganization
				related.NavigateToThis	= reference to ClosePeriodTask
				related.DialogueType	= 2 

		AuditDocumentationRel
			one-to-many relation to FinanceResourceDialogue
			Field Mapping uses ByNavigateToThis
				related.HROrganization	= CloseManagementGroup.HROrganization
				related.NavigateToThis	= reference to ClosePeriodTask
				related.DialogueType	= 4 

		MyMessagesRel
			one-to-many relation to FinanceResourceDialogue		
			Field Mapping uses ByNavigateToThis
				related.HROrganization	= CloseManagementGroup.HROrganization
				related.NavigateToThis	= reference to ClosePeriodTask			
				related.DialogueType	= 0 
				related.FinanceResource	= actor.agent(Employee).Employee		
			Instance Selection
				where (related.HideFromNewView = false)
		MyWorkRequestsRel
			one-to-many relation to FinanceResourceSchedule
			Field Mapping uses ByNavigateToThis
				related.HROrganization	= CloseManagementGroup.HROrganization
				related.NavigateToThis	= reference to ClosePeriodTask			
				related.FinanceResource	= actor.agent(Employee).Employee		
				related.CreatedBy		= 2 
				related.WorkStatus		< 2 
		MyRemindersRel
			one-to-many relation to FinanceResourceSchedule
			Field Mapping uses ByNavigateToThis
				related.HROrganization	= CloseManagementGroup.HROrganization
				related.NavigateToThis	= reference to ClosePeriodTask			
				related.FinanceResource	= actor.agent(Employee).Employee		
				related.CreatedBy		= 0 
				related.WorkStatus		< 2 
		MyTeamsRel 
			one-to-many relation to FinanceTeamMember
			Field Mapping uses ByFinanceTeam
				related.FinanceEnterpriseGroup			= CloseManagementGroup
				related.FinanceTeam  					= FinanceTeam
				related.FinanceTeamMember.TeamMember 	= actor.agent(Employee).Employee			
		MyApprovalTeamsRel 
			one-to-many relation to FinanceTeamMember
			Field Mapping uses ByFinanceTeam
				related.FinanceEnterpriseGroup			= CloseManagementGroup
				related.FinanceTeam  					= ApproverTeam
				related.FinanceTeamMember.TeamMember 	= actor.agent(Employee).Employee			
		MyOneTimeApprovalTeamsRel 
			one-to-many relation to FinanceTeamMember
			Field Mapping uses ByFinanceTeam
				related.FinanceEnterpriseGroup			= CloseManagementGroup
				related.FinanceTeam  					= OneTimeTaskApprovalInfo.ApproverTeam
				related.FinanceTeamMember.TeamMember 	= actor.agent(Employee).Employee			


		PrerequisiteTaskRel is a ClosePeriodTaskPrerequisite(ClosePeriodTask) set
		DependentTaskRel is a ClosePeriodTaskPrerequisite(ClosePeriodTaskPrerequisite.PrerequisiteTask) set
		
		OpenPrerequisiteTaskRel is a ClosePeriodTaskPrerequisite(ClosePeriodTask) set
			Instance Selection
				where (related.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskStatus < 7) 
			
		CannotStartPrereqTaskRel is a ClosePeriodTaskPrerequisite(ClosePeriodTask) set
			Instance Selection
				where (related.DependencyType.CannotStart
				and    related.PrereqTaskIsOpen)
			
		CannotCompletePrereqTaskRel is a ClosePeriodTaskPrerequisite(ClosePeriodTask) set
			Instance Selection
				where (related.DependencyType.CannotComplete
				and    related.PrereqTaskIsOpen)
			
		LocalCannotStartPrereqTaskRel 
			one-to-many relation to ClosePeriodTaskPrerequisite
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= LocalDetailTask
			Instance Selection
				where (related.DependencyType.CannotStart
				and    related.PrereqTaskIsOpen)
			
		LocalCannotCompletePrereqTaskRel 
			one-to-many relation to ClosePeriodTaskPrerequisite
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= LocalDetailTask
			Instance Selection
				where (related.DependencyType.CannotComplete
				and    related.PrereqTaskIsOpen)

		AtRiskPrerequisiteTaskRel is a ClosePeriodTaskPrerequisite(ClosePeriodTask) set
			Instance Selection
				where (related.ClosePeriodTask != ClosePeriodTask
				and    related.ClosePeriodTask.TaskStatus < 7  
				and   (related.ClosePeriodTask.TaskInJeopardy
				or     related.ClosePeriodTask.IsLate))		

		ScheduledDependentRel is a ClosePeriodTaskPrerequisite(ClosePeriodTaskPrerequisite.PrerequisiteTask) set
			Instance Selection
				where (related.ClosePeriodTask.TaskStatus = TaskStatus.Scheduled)
		
		ClosedDependentRel is a ClosePeriodTaskPrerequisite(ClosePeriodTaskPrerequisite.PrerequisiteTask) set
			Instance Selection
				where (related.DependentTaskIsClosed)
		
		PeriodEndReconciliationNotInConsolidatedGroupRel
			one-to-many relation to PeriodEndReconciliation
			Field Mapping uses ByCloseTask
				related.ReconciliationManagementGroup							= CloseManagementGroup
				related.CloseTask					 							= CreatedFrom
				related.PeriodEndReconciliation.GeneralLedgerClosePeriod		= DerivedEndDateString
			Instance Selection
				where (related.LevelType.Account
				and   !related.IsAccountWithinConsolidatedGroup)

		PeriodEndReconciliationForConsolidatedGroupRel
			one-to-many relation to PeriodEndReconciliation
			Field Mapping uses ByCloseTask
				related.ReconciliationManagementGroup                           = CloseManagementGroup
				related.CloseTask                                               = CreatedFrom

			Instance Selection
				where (related.PeriodEndReconciliation.GeneralLedgerClosePeriod        = DerivedEndDateString  
				and    related.IsConsolidatedGroupOrAccountWithinConsolidatedGroup)

		PeriodEndReconciliationNonAccountRel
			one-to-many relation to PeriodEndReconciliation
			Field Mapping uses ByCloseTask
				related.ReconciliationManagementGroup							= CloseManagementGroup
				related.CloseTask					 							= CreatedFrom
				related.PeriodEndReconciliation.GeneralLedgerClosePeriod		= DerivedEndDateString
			Instance Selection
				where (related.LevelType.NonAccount)
				
		SystemCalendarPeriodRel
			one-to-one relation to SystemCalendarPeriod
			Field Mapping uses symbolic key
				related.EnterpriseGroup				= CloseManagementGroup
				related.SystemCalendar				= CreatedFrom.DefaultCalendar
				related.SystemCalendarPeriodGroup	= CreatedFrom.DefaultPeriodGroup
				related.SystemCalendarPeriod		= ClosePeriod

		ResourceScheduleRel 
			one-to-many relation to FinanceResourceSchedule
			Field Mapping uses ByNavigateToThis 
				related.HROrganization	= CloseManagementGroup.HROrganization
				related.NavigateToThis	= reference to ClosePeriodTask
				related.FinanceResource	= TaskOwner.TeamMember
		
		ThisTaskAllPeriodsRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= CreatedFrom
			Instance Selection
				where (related.TaskStatus < 5  
				and    related.UniqueID != UniqueID) 
		
		ThisTaskUnassignedAllPeriodsRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= CreatedFrom
			Instance Selection
				where (related.TaskStatus < TaskStatus.Closed
				and    related.TaskOwner not entered) 

		AllOpenPeriodTasksForATaskRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom		= LocalCreatedFrom
			Instance Selection
				where (related.ClosePeriod.CloseManagementStatus.Open) 
		
		FinanceResourceScheduleRel
			one-to-many relation to FinanceResourceSchedule
			Field Mapping uses ByNavigateToThis
				related.HROrganization	= CloseManagementGroup.HROrganization
				related.NavigateToThis	= reference to ClosePeriodTask
				related.FinanceResource	= TaskOwner.TeamMember
				related.CreatedBy		= 1 
		
		SendToTeamMembersRel
			one-to-many relation to FinanceTeamMember 
			Field Mapping uses ByFinanceTeam
				related.FinanceEnterpriseGroup 	= CloseManagementGroup
				related.FinanceTeam 			= LocalTeam		
												
		FinanceTeamMemberRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= CloseManagementGroup
				related.FinanceTeam 			= FinanceTeam
				

		RelatedFinanceResourceDialogueRel 
			one-to-many relation to FinanceResourceDialogue
			Field Mapping uses ByNavigateToThis
				related.HROrganization	= CloseManagementGroup.HROrganization
				related.NavigateToThis	= reference to ClosePeriodTask

		RelatedFinanceResourceScheduleRel 
			one-to-many relation to FinanceResourceSchedule
			Field Mapping uses ByNavigateToThis
				related.HROrganization	= CloseManagementGroup.HROrganization
				related.NavigateToThis	= reference to ClosePeriodTask


		ScheduledTaskDescendantsRel 
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.TaskStatus.Scheduled)

		InProcessTaskDescendantsRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.TaskStatus.InProcess)

		PendingApprovalTaskDescendantsRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.TaskStatus.PendingApproval)

		PendingApprovalForDeleteTaskDescendantsRel
			one-to-many relation to ClosePeriodTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask descendants.ClosePeriodTask			
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.TaskStatus.PendingApproval)

		OpenTaskDescendantsRel 
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.TaskStatus < 7)

		ClosedTaskDescendantsRel 
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.TaskStatus.Closed)

		VoidTaskDescendantsRel 
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.TaskStatus.Voided)

		SchedOverdueTaskDescendantsRel  
			one-to-many relation to ClosePeriodTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask descendants.ClosePeriodTask			
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.Overdue)

		OverdueTaskDescendantsRel 
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.Overdue)

		SchedDueTodayTaskDescendantsRel  
			one-to-many relation to ClosePeriodTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask descendants.ClosePeriodTask			
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.DueToday)

		DueTodayTaskDescendantsRel 
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.DueToday)

		SchedStartTodayTaskDescendantsRel  
			one-to-many relation to ClosePeriodTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask descendants.ClosePeriodTask			
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.StartToday)

		StartTodayTaskDescendantsRel 
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.StartToday)

		InJeopardyTaskDescendantsRel 
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and	   related.TaskInJeopardy)

		SchedLateToStartTaskDescendantsRel  
			one-to-many relation to ClosePeriodTask
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask descendants.ClosePeriodTask			
			Instance Selection
				where (related.TaskLevel.Detail
				and    related.LateToStart)

		TaskApprovalResourceRel
			one-to-many relation to TaskCompletionApprovalResource
			Field Mapping uses ByApprovalLevel 
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
 				related.ClosePeriodTask			= ClosePeriodTask

		LateToStartTaskDescendantsRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and    related.LateToStart)

		ReopenedTaskDescendantsRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and    related.HasReopenHistory)

		StartEarlyTaskDescendantsRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and    related.StartedEarly)

		StartLateTaskDescendantsRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and    related.StartedLate)

		DoneEarlyTaskDescendantsRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and    related.DoneEarly)

		DoneLateTaskDescendantsRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and    related.DoneLate)

		SchedOneTimeTaskDescendantsRel  
			one-to-many relation to ClosePeriodTask
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask descendants.ClosePeriodTask			
			Instance Selection
				where (related.TaskLevel.Detail
				and    related.OneTimeTask)

		OneTimeTaskDescendantsRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
			Instance Selection
				where (related.TaskLevel.Detail
				and    related.OneTimeTask)

		OneTimeTaskWaitingApprovalDescendantsRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask descendants.ClosePeriodTask
			Instance Selection
				where (related.OneTimeTaskWaitingApproval)

		OneTimeTaskApprovalResourceRel
            one-to-many relation to OneTimeTaskApprovalResource
            Field Mapping uses ByApprovalLevel 
                related.CloseManagementGroup   = CloseManagementGroup
                related.ClosePeriod 	       = ClosePeriod
                related.ClosePeriodTask       = ClosePeriodTask

		NewDetailTaskDescendantsRel 
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummary
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask
				
		DetailTaskDescendantsRel 
			one-to-many relation to ClosePeriodTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask descendants.ClosePeriodTask			
			Instance Selection
				where (related.TaskLevel.Detail)
				
		SummaryTaskDescendantsRel 
			one-to-many relation to ClosePeriodTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask descendants.ClosePeriodTask			
			Instance Selection
				where (related.TaskLevel.Summary)
				
		DescendantsMissingEstimateRel 
			one-to-many relation to ClosePeriodTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask descendants.ClosePeriodTask			
			Instance Selection
				where (related.EstimateForTask not entered)
				
		PrereqDetailDescendantsRel 
			one-to-many relation to ClosePeriodTask 
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask descendants.ClosePeriodTask			
			Instance Selection
				where (related.TaskLevel.Detail
				and    related.DependencyMetric = 1)
				
		ClosePrereqClosePeriodTaskRel
			one-to-many relation to ClosePeriodTask
			Field Mapping uses ByCreatedFrom
				related.CloseManagementGroup	= CloseManagementGroup
				related.CreatedFrom				= LocalCreatedFrom
				related.ClosePeriod				= ClosePeriod
				related.TaskStatus				= 0  

		OneTimeApprovalCodeResourceRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel 
				related.FinanceEnterpriseGroup	= CloseManagementGroup
				related.ApprovalCode			= OneTimeTaskApprovalInfo.ApprovalCode
		
		ApprovalCodeResourceRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel 
				related.FinanceEnterpriseGroup	= CloseManagementGroup
				related.ApprovalCode			= ApprovalCode
		
		LocalApprovalCodeResourceRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CloseManagementGroup
				related.ApprovalCode			= LocalApprovalCode 

		LocalApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CloseManagementGroup
				related.ApprovalCode			= LocalApprovalCode 
				related.ApprovalLevel			= LocalApprovalLevel

		LocalTaskApprovalLevelRel
            one-to-many relation to TaskCompletionApprovalResource
            Field Mapping uses ByApprovalLevel
                related.CloseManagementGroup	= CloseManagementGroup
                related.ClosePeriod			 	= ClosePeriod
                related.ClosePeriodTask         = ClosePeriodTask
                related.ApprovalLevel        	= LocalApprovalLevel

        LocalOneTimeTaskApprovalLevelRel
            one-to-many relation to OneTimeTaskApprovalResource
            Field Mapping uses ByApprovalLevel
                related.CloseManagementGroup 	= CloseManagementGroup
                related.ClosePeriod	        	= ClosePeriod
                related.ClosePeriodTask        	= ClosePeriodTask
                related.ApprovalLevel 			= LocalApprovalLevel








		CurrentApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CloseManagementGroup
				related.ApprovalCode			= ApprovalCode
				related.ApprovalLevel			= ApprovalLevel

		CurrentOneTimeApprovalCodeLevelRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalLevel
				related.FinanceEnterpriseGroup	= CloseManagementGroup
				related.ApprovalCode			= OneTimeTaskApprovalInfo.ApprovalCode
				related.ApprovalLevel			= OneTimeTaskApprovalInfo.ApprovalLevel

		CurrentTaskApprovalLevelRel
            one-to-many relation to TaskCompletionApprovalResource
            Field Mapping uses ByApprovalLevel
                related.CloseManagementGroup    = CloseManagementGroup
                related.ClosePeriod        		= ClosePeriod
                related.ClosePeriodTask         = ClosePeriodTask
                related.ApprovalLevel     		= ApprovalLevel

        CurrentOneTimeTaskApprovalLevelRel
            one-to-many relation to OneTimeTaskApprovalResource
            Field Mapping uses ByApprovalLevel
                related.CloseManagementGroup 	= CloseManagementGroup
                related.ClosePeriod        		= ClosePeriod
                related.ClosePeriodTask         = ClosePeriodTask
                related.ApprovalLevel     	    = OneTimeTaskApprovalInfo.ApprovalLevel

		ApprovalCodeResourceByResourceRel
			one-to-one relation to ApprovalCodeResource
			Field Mapping uses ByApprover
				related.FinanceEnterpriseGroup	= CloseManagementGroup
				related.ApprovalCode			= LocalApprovalCode
				related.Approver				= LocalApprover
				
		ApprovalCodeResourceByTeamRel
			one-to-many relation to ApprovalCodeResource
			Field Mapping uses ByApprovalTeam
				related.FinanceEnterpriseGroup	= CloseManagementGroup
				related.ApprovalCode			= LocalApprovalCode

		FinanceTeamMembersFromCurrentApprovalLevelRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CloseManagementGroup
				related.FinanceTeam				= first CurrentTaskApprovalLevelRel.ApprovalTeam

		TeamMembersFromCurrentOneTimeApprovalLevelRel
			one-to-many relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CloseManagementGroup
				related.FinanceTeam				= first CurrentOneTimeTaskApprovalLevelRel.ApprovalTeam

		ReasonCodeUsageRel is a TaskReasonCodeUsage set

		ReasonCodeUsageReopenRel is a TaskReasonCodeUsage set
			Instance Selection
				where (related.Type.Reopen)

		ReasonCodeUsageRejectRel is a TaskReasonCodeUsage set
			Instance Selection
				where (related.Type.Reject)

		ReasonCodeUsageRejectOneTimeRel is a TaskReasonCodeUsage set
			Instance Selection
				where (related.Type.RejectOneTimeTask)

		ReasonCodeUsageVoidRel is a TaskReasonCodeUsage set
			Instance Selection
				where (related.Type.Void)
				
		ReasonCodeUsageStartLateRel is a TaskReasonCodeUsage set
			Instance Selection
				where (related.Type.StartLate)
				
		ReasonCodeUsageCloseLateRel is a TaskReasonCodeUsage set
			Instance Selection
				where (related.Type.CloseLate)

		ReasonCodeUsageEstimateRel is a TaskReasonCodeUsage set
			Instance Selection
				where (related.Type.EstimateUpdated)

		ClosePeriodTaskFlatSummaryRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummaryDueDate
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask

		ClosePeriodTaskFlatDetailRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses ByDetail
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.DetailPeriodTask	= ClosePeriodTask

		ClosePeriodTaskFlatTopLevelRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses ByTopLevelTask
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.TopLevelTask			= ClosePeriodTask
				
		OneTimePfiWorkunitRel
			one-to-one relation to PfiWorkunit
			Field Mapping uses symbolic key
				related.PfiWorkunit	= OneTimeWorkunit
				
		OneTimePfiQueueTaskRel
			one-to-many relation to PfiQueueTask
			Field Mapping uses ByWorkunitStatusTaskActivityQueueAssignment
				related.PfiWorkunit	= OneTimeWorkunit

		PfiQueueTaskRel
			one-to-many relation to PfiQueueTask
			Field Mapping uses ByWorkunitStatusTaskActivityQueueAssignment
				related.PfiWorkunit	= Workunit

		CloseAdministratorRoleRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor					= actor
 				related.ActorRole.Role			= "CloseAdministrator_ST"
 				
		CloseManagerRoleRel
			one-to-one relation to ActorRole
			Field Mapping uses symbolic key
				related.Actor					= actor
 				related.ActorRole.Role			= "CloseManager_ST"		

		LocalFinanceTeamMemberRel
			one-to-one relation to FinanceTeamMember
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= CloseManagementGroup
				related.FinanceTeam						= LocalTeam
				related.FinanceTeamMember.TeamMember	= LocalTeamMember

		OpenClosePeriodRel
			one-to-many relation to ClosePeriod
			Field Mapping uses ByOpenPeriod
				related.CloseManagementGroup = CloseManagementGroup

		TaskPercentCompleteRel is a TaskPercentComplete set
		
		CloseTaskTypeDefaultPrimaryRel
			one-to-many relation to CloseTaskType
			Field Mapping uses symbolic key
				related.CloseManagementGroup = CloseManagementGroup
			Instance Selection
				where (related.IsPrimary
				and    related.IsDefault)

		CloseTaskTypeDefaultSecondaryRel
			one-to-many relation to CloseTaskType
			Field Mapping uses symbolic key
				related.CloseManagementGroup = CloseManagementGroup
			Instance Selection
				where (related.IsSecondary
				and    related.IsDefault)

		CloseTaskTypeDefaultTertiaryRel
			one-to-many relation to CloseTaskType
			Field Mapping uses symbolic key
				related.CloseManagementGroup = CloseManagementGroup
			Instance Selection
				where (related.IsTertiary
				and    related.IsDefault)

		ClosePeriodTaskCubeRel
			one-to-one relation to ClosePeriodTaskCube
			Field Mapping uses symbolic key
				related.CloseManagementGroup	= CloseManagementGroup
				related.ClosePeriod				= ClosePeriod
				related.ClosePeriodTask			= ClosePeriodTask

		ManagerMyOpenProcessesDetailRel
			one-to-many relation to ClosePeriodTaskFlat
			Field Mapping uses BySummaryDueDate
				related.CloseManagementGroup					= CloseManagementGroup
				related.ClosePeriod								= ClosePeriod
				related.ClosePeriodTaskFlat.SummaryPeriodTask	= ClosePeriodTask

		ClosePeriodTaskJournalRel
			one-to-one relation to ClosePeriodTaskJournal
			Field Mapping uses symbolic key
				related.CloseManagementGroup							= CloseManagementGroup
            	related.ClosePeriod										= ClosePeriod
				related.ClosePeriodTask									= ClosePeriodTask
				related.ClosePeriodTaskJournal.AccountingEntity 		= LocalAccountingEntity
            	related.ClosePeriodTaskJournal.GeneralLedgerClosePeriod	= LocalGLClosePeriod
            	related.ClosePeriodTaskJournal.JournalEntryNumber 		= LocalJournalEntryNumber
       
	    GeneralLedgerJournalControlRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= CloseManagementGroup
			Instance Selection
				where (!related.Status.Deleted
				and   (!TaskCompany.FinanceCompanyField entered
				or	   related.AccountingEntity = TaskCompany.FinanceCompanyField.AccountingEntity))
				
		UnreleasedJournalEntryDetailRel is a ClosePeriodTaskJournal set
			Instance Selection
				where (related.UnreleasedJournal)
		
		TaskCompletionApprovalHistoryRel is a ClosePeriodTaskApprovalHistory set
            Instance Selection
                where (related.Type.TaskCompletion)

        OneTimeTaskApprovalHistoryRel is a ClosePeriodTaskApprovalHistory set
            Instance Selection
                where (related.Type.OneTimeTask)

        FinanceResourceActorRel
            one-to-many relation to FinanceResource
            Field Mapping uses symbolic key
                related.HROrganization = CloseManagementGroup.HROrganization
            Instance Selection
                where (related.FinanceResourceActor = LocalActor)

		ClosePeriodTaskIssueRel is a ClosePeriodTaskIssue set 
		PeriodIssueAssignedPrereqRel is a ClosePeriodTaskIssue set 
			Instance Selection
				where (related.Status.Unresolved
				and    related.ResolutionRequiredForTaskCompletion = true)
		PeriodIssueSumaaryAssignedPrereqRel is a ClosePeriodTaskIssue(ClosePeriodTask) set 
			Instance Selection
				where (related.Status.Unresolved
				and    related.ResolutionRequiredForTaskCompletion = true)
		UnresolvedClosePeriodTaskIssueRel is a ClosePeriodTaskIssue set 
			Instance Selection
				where (related.Status.Unresolved)
		ResolvedClosePeriodTaskIssueRel is a ClosePeriodTaskIssue set 
			Instance Selection
				where (related.Status.Resolved)	
	Sets
		ByCreatedFrom
			Sort Order
				CloseManagementGroup
				CreatedFrom
				ClosePeriod
				TaskStatus
				ClosePeriodTask
			Instance Selection
				where (HasCreatedFrom)	

		ByOwnerTaskStatus
			Sort Order
				CloseManagementGroup
				TaskOwner.TeamMember
				TaskStatus
				ClosePeriod
				ClosePeriodTask
							       				
		ByBeginTimeStamp
			Sort Order
				CloseManagementGroup
				ScheduleForTask.BeginDate
				ScheduleForTask.BeginTime
				ScheduleForTask.DueDate
				ScheduleForTask.DueTime
				ClosePeriod
				ClosePeriodTask			

		ByDueTimeStamp
			Sort Order 
				CloseManagementGroup
				ScheduleForTask.DueDate
				ScheduleForTask.DueTime
				ClosePeriod
				ClosePeriodTask	
		
		UnassignedByTeam
			Sort Order 
				CloseManagementGroup
				TaskLevel
				FinanceTeam
				ClosePeriod 
				ScheduleForTask.DueDate
				ScheduleForTask.DueTime
				ClosePeriodTask
			Instance Selection
				where (Unassigned)	
				
		PendingApprovalByTeam
			Sort Order
				CloseManagementGroup
				TaskStatus
				Approver
				ClosePeriod
				ClosePeriodTask

		ByTeamMemberAndStatus
			Sort Order
				CloseManagementGroup
				FinanceTeam
				TaskOwner.TeamMember
				TaskLevel
				TaskStatus
				ClosePeriod 
				ClosePeriodTask		

		ByOneTimeApprovalTeam
			Sort Order
				CloseManagementGroup
				OneTimeTask
				TaskStatus
				OneTimeTaskApprovalInfo.Approver
				ClosePeriod
				ClosePeriodTask

		ByDisplaySequence
			Sort Order
				CloseManagementGroup
				ClosePeriod
				ParentClosePeriodTask
				DisplaySequence
				ClosePeriodTask

		ByOneTimeTaskCreator
			Sort Order
				CloseManagementGroup
				OneTimeTaskCreator
				ClosePeriod
				ClosePeriodTask
			Instance Selection
				where (OneTimeTask)	

		ByPeriodAndOwner
			Sort Order
				CloseManagementGroup
				ClosePeriod
				TaskOwner
				ParentClosePeriodTask
				DisplaySequence
				ClosePeriodTask

		ByTaskOwner
			Sort Order	
				CloseManagementGroup
				TaskOwner	
				TaskLevel
				TaskStatus	
				ClosePeriod
				ClosePeriodTask				  	

		ByTaskName
			Sort Order
				CloseManagementGroup
				TaskName
				ClosePeriod
				ClosePeriodTask
				
		ByTaskStatus
			Sort Order
				CloseManagementGroup
				TaskStatus
				ClosePeriod
				ClosePeriodTask

		ByTeam
			Sort Order
				CloseManagementGroup
				FinanceTeam
				ClosePeriod
				ClosePeriodTask

		ByOwner
			Sort Order
				CloseManagementGroup
				TaskOwner
				ClosePeriod
				ClosePeriodTask

		ByCompany
			Sort Order
				CloseManagementGroup
				TaskCompany
				ClosePeriod
				ClosePeriodTask

		ByPrimaryTaskType
			Sort Order
				CloseManagementGroup
				PrimaryTaskType
				ClosePeriod
				ClosePeriodTask

		BySecondaryTaskType
			Sort Order
				CloseManagementGroup
				SecondaryTaskType
				ClosePeriod
				ClosePeriodTask

		ByTertiaryTaskType
			Sort Order
				CloseManagementGroup
				TertiaryTaskType
				ClosePeriod
				ClosePeriodTask

	Actions	
		Create is a Create Action
			restricted
			Action Rules			
				if (ScheduleForTask.BeginDate < current corporate date)
					StartMetric = 3 
				else
					StartMetric = 0 
					EffortMetric = 1 
				if ((ScheduleForTask.DueDate < current corporate date)
				or  ((DueTimeSensitive
				and  (ScheduleForTask.DueDate = current corporate date)
				and  (ScheduleForTask.DueTime < current corporate time))))
					DueMetric = 3 
				else	
					TheClose = 0 
					DueMetric = 0 
				if (RequiresApproval)
					ApprovalMetric = 1
				else
					ApprovalMetric = 0 
			Exit Rules
				if (OneTimeTask)
					if (OneTimeTaskRequiresApproval)
						LocalApprovalCode	= OneTimeTaskApprovalInfo.ApprovalCode

						for each OneTimeApprovalCodeResourceRel
                            invoke Create OneTimeTaskApprovalResource
                                fill in fields from each
								invoked.CloseManagementGroup	= CloseManagementGroup
								invoked.ClosePeriod				= ClosePeriod
								invoked.ClosePeriodTask			= ClosePeriodTask
								if (each.EscalateTo.SpecificApprovalLevel)
									LocalUpdateApprovals = true
									invoked.EscalationLevelFromCode = each.EscalationApprovalLevel.ApprovalLevel
									invoked.EscalationApprovalLevel = 0
								invoked.CreateFromApprovalCode	= true

						if (LocalUpdateApprovals)
							invoke UpdateEscalationLevel OneTimeTaskApprovalResource
								invoked.PrmCloseManagementGroup	= CloseManagementGroup
								invoked.PrmClosePeriod			= ClosePeriod
								invoked.PrmClosePeriodTask		= ClosePeriodTask

						if (ActorIsCloseManager)

							LocalApprover = actor.agent(Employee).Employee
							if (ApprovalCodeResourceByResourceRel exists)
								OneTimeTaskApproved = true
								OneTimeAutoApproved = true
							else
								if (ActorIsTeamMemberOnApprovalsDerived)
									OneTimeTaskApproved = true
									OneTimeAutoApproved = true

							if (OneTimeAutoApproved)
                                invoke Create ClosePeriodTaskApprovalHistory
                                    invoked.CloseManagementGroup	= CloseManagementGroup
                                    invoked.ClosePeriod        		= ClosePeriod
                                    invoked.ClosePeriodTask        	= ClosePeriodTask
                                    invoked.Type                	= 2 
                                    invoked.ActionTaken           	= 4 
                                    invoked.ActionTakenBy        	= actor.agent(FinanceResource).FinanceResource
                            
						if (!OneTimeAutoApproved)
							LocalClosePeriodTask					= ClosePeriodTask						
							OneTimeTaskApprovalInfo.ApprovalLevel	= first LocalApprovalCodeResourceRel.ApprovalLevel
							OneTimeTaskApprovalInfo.Approver		= first LocalApprovalCodeResourceRel.Approver
							OneTimeTaskApprovalInfo.ApproverTeam	= first LocalApprovalCodeResourceRel.ApprovalTeam
							include InitiateOneTimeTaskApprovalFlow

							invoke Create ClosePeriodTaskApprovalHistory
                                invoked.CloseManagementGroup        = CloseManagementGroup
                                invoked.ClosePeriod       			= ClosePeriod
                                invoked.ClosePeriodTask        		= ClosePeriodTask
                                invoked.Type                		= 2 
                                invoked.ActionTaken            		= 1 
                                invoked.ActionTakenBy    		    = actor.agent(FinanceResource).FinanceResource

					if (AttachmentFromWorkRequest entered
					or  LinkFromWorkRequest entered)
						invoke Create ClosePeriodTaskDocumentation
							invoked.CloseManagementGroup		= CloseManagementGroup
							invoked.ClosePeriod			 	    = ClosePeriod
							invoked.ClosePeriodTask				= ClosePeriodTask
							invoked.Description					= "One Time Task Creation"
							invoked.Attachment					= AttachmentFromWorkRequest
							invoked.Link						= LinkFromWorkRequest
							invoked.Author						= actor.agent(FinanceResource).FinanceResource
						
					if (PeriodIsOpen)
						if (UpdateAnalyticCubeFile)
							invoke Create ClosePeriodTaskCube
								fill in fields from this instance
								invoked.CloseManagementGroup	= CloseManagementGroup
								invoked.ClosePeriod				= ClosePeriod
								invoked.ParentTask				= ParentClosePeriodTask
							
						for each ClosePeriodTask ancestors
							invoke Create ClosePeriodTaskFlat
								fill in fields from this instance
								invoked.CloseManagementGroup					= CloseManagementGroup
								invoked.ClosePeriod								= ClosePeriod
								invoked.ClosePeriodTaskFlat.SummaryPeriodTask	= each.ClosePeriodTask
								invoked.ClosePeriodTaskFlat.DetailPeriodTask	= ClosePeriodTask
								invoked.ParentTask								= ParentClosePeriodTask
								LocalDetailTask									= each.ClosePeriodTask
								invoked.TopLevelTask							= LocalTopLevelTask

					invoke UpdateParentStatusDates ParentClosePeriodTask
						invoked.UpdateStatus	= true
						invoked.UpdateDates		= true  
						invoked.NewBeginDate	= ScheduleForTask.BeginDate
						invoked.NewBeginTime	= ScheduleForTask.BeginTime
						invoked.NewDueDate		= ScheduleForTask.DueDate
						invoked.NewDueTime		= ScheduleForTask.DueTime
						invoked.DateToProcess	= 3


				if (TaskLevel.Detail
				and TaskOwner entered)
					invoke Create FinanceResourceSchedule
						invoked.HROrganization	= CloseManagementGroup.HROrganization
						invoked.FinanceResource	= TaskOwner.TeamMember
						invoked.BeginDate		= ScheduleForTask.BeginDate
						invoked.BeginTime		= ScheduleForTask.BeginTime
						invoked.DueDate			= ScheduleForTask.DueDate
						invoked.DueTime			= ScheduleForTask.DueTime
						invoked.Description		= TaskName
						invoked.NavigateToThis	= reference to ClosePeriodTask
						if (OneTimeTask)
							invoked.CreatedBy = 3 
						else
							invoked.CreatedBy = 1  
						invoked.FinancialForm = FinancialForm

				if (ApprovalCode entered)
                    for each ApprovalCodeResourceRel
                        invoke Create TaskCompletionApprovalResource
                            fill in fields from each
							invoked.CloseManagementGroup	= CloseManagementGroup
							invoked.ClosePeriod				= ClosePeriod
							invoked.ClosePeriodTask			= ClosePeriodTask
							if (each.EscalateTo.SpecificApprovalLevel)
								LocalUpdateApprovals = true
								invoked.EscalationLevelFromCode = each.EscalationApprovalLevel.ApprovalLevel
								invoked.EscalationApprovalLevel = 0
							invoked.CreateFromApprovalCode	= true

					if (LocalUpdateApprovals)
						invoke UpdateEscalationLevel TaskCompletionApprovalResource
							invoked.PrmCloseManagementGroup	= CloseManagementGroup
							invoked.PrmClosePeriod			= ClosePeriod
							invoked.PrmClosePeriodTask		= ClosePeriodTask

		Update is an Update Action

			valid when (AllowUpdate)
			Action Rules
				invoke UpdateCube

		DeleteSchedule is an Instance Action
			valid when (AllowScheduleDelete)
			confirmation required
				"AreYouSureYouWantToDeleteThisProcessSchedule?"	
			completion message is "DeleteOfScheduleHasBeenSubmittedToTheQueueForProcessing"

			Action Rules
				invoke DeleteProcessDetails
					invoked.PrmCloseManagementGroup	= CloseManagementGroup
					invoked.PrmClosePeriod			= ClosePeriod
					invoked.PrmTopProcess			= ClosePeriodTask
					invoked.PrmUpdateCube			= false
				
		Purge is a Purge Action
			restricted
			Entrance Rules
				invoke Purge RelatedFinanceResourceDialogueRel
				invoke Purge RelatedFinanceResourceScheduleRel
				
				if (OneTimeTask)  
					cancel OneTimeTaskApproval process


		DeleteProcess is an Instance Action
			valid when (AllowProcessDelete)
			completion message is "DeleteOfProcessHasBeenSubmittedToTheQueueForProcessing"
			
			Action Rules
				if (PeriodIsOpen)
					confirmation required
						"Warning:_PeriodIsOpenForWork.AnyPeriodInformationForThisProcessWillBeLost.AreYouSureYouWantToDelete?"
				if (PeriodIsClosed)
					confirmation required
						"Warning:_PeriodIsClosed.AllPeriodInformationForThisProcessWillBeLost.AreYouSureYouWantToDelete?"	

				invoke DeleteProcessDetails
					invoked.PrmCloseManagementGroup	= CloseManagementGroup
					invoked.PrmClosePeriod			= ClosePeriod
					invoked.PrmTopProcess			= ClosePeriodTask
					invoked.PrmUpdateCube			= true
				
		DeleteProcessDetails is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmClosePeriod			is a ClosePeriod
				PrmTopProcess			is a ClosePeriodTask
				PrmUpdateCube			is Boolean
				
			Local Fields
				LocalCloseManagementGroup	is a CloseManagementGroup
				
			Sort Order
				CloseManagementGroup
				ClosePeriod

			Instance Selection
				where (CloseManagementGroup	= PrmCloseManagementGroup
				and	   ClosePeriod			= PrmClosePeriod
				and	   TopLevelTask			= PrmTopProcess)

			Action Rules
				Empty Set Rules
					invoke PurgeForProcess PrmTopProcess
					invoke RevertToUnscheduled PrmClosePeriod

				Set Rules
					Exit Rules
						LocalCloseManagementGroup = PrmCloseManagementGroup
						invoke DeleteProcessSummary
							invoked.PrmCloseManagementGroup	= PrmCloseManagementGroup
							invoked.PrmClosePeriod			= PrmClosePeriod
							invoked.PrmTopProcess			= PrmTopProcess
						if (PrmUpdateCube)
							invoke Reload PrmCloseManagementGroup.ClosePeriodTaskAnalyticCubeRel in background
						
				Instance Rules
					if (TaskLevel.Detail)
						if (TaskStatus.PendingApproval)
							cancel CloseApproval process
						if (OneTimeTaskWaitingApproval)
							cancel OneTimeTaskApproval process
						invoke DeleteForRemoval TaskApprovalResourceRel
						invoke DeleteForRemoval OneTimeTaskApprovalResourceRel
						invoke Purge ClosePeriodTaskApprovalHistory set
						invoke Purge ClosePeriodTaskFlatDetailRel  
						invoke Purge RelatedFinanceResourceDialogueRel
						invoke Purge RelatedFinanceResourceScheduleRel
						invoke PurgeForProcess
			
					
		DeleteProcessSummary is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmClosePeriod			is a ClosePeriod
				PrmTopProcess			is a ClosePeriodTask
				
			Sort Order
				CloseManagementGroup
				ClosePeriod

			Instance Selection
				where (CloseManagementGroup	= PrmCloseManagementGroup
				and	   ClosePeriod			= PrmClosePeriod
				and	   TopLevelTask			= PrmTopProcess)

			Action Rules
				Empty Set Rules
					invoke PurgeForProcess PrmTopProcess
					invoke RevertToUnscheduled PrmClosePeriod

				Set Rules
					Exit Rules
						invoke PurgeForProcess PrmTopProcess
						invoke RevertToUnscheduled PrmClosePeriod
						
				Instance Rules
					invoke Purge RelatedFinanceResourceDialogueRel
					invoke PurgeForProcess			
			
		PurgeForProcess is a Purge Action
			restricted




		Approve is an Instance Action
			restricted
			Parameters
				ParmWorkUnit	is a PfiWorkunit
			Action Rules
				if (Workunit not entered)
					Workunit = ParmWorkUnit

				TaskStatus = TaskStatus.Closed
				TheClose = TheClose.Closed 
				ApprovalMetric = ApprovalMetric.Approved
				if  ((!DueTimeSensitive and (ScheduleForTask.DueDate = current corporate date))
				or    (DueTimeSensitive and (ScheduleForTask.DueDate = current corporate date) and (ScheduleForTask.DueTime > current corporate time)))
					DueMetric = DueMetric.CompletedOnTime 
				else
					if ((ScheduleForTask.DueDate < current corporate date)
					or  ((DueTimeSensitive
					and  (ScheduleForTask.DueDate = current corporate date)
					and  (ScheduleForTask.DueTime < current corporate time))))
						DueMetric = DueMetric.CompletedLate
					else
						DueMetric = DueMetric.CompletedEarly  
			Exit Rules
				invoke Purge ResourceScheduleRel
				if (UpdateAnalyticCubeFile)
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						invoked.TaskStatus	= TaskStatus.Closed 
				
				invoke Create ClosePeriodTaskApprovalHistory
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.Type					= 1 
					invoked.ActionTaken				= 2 
					invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource

				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateStatus = true
					invoked.UpdateDates = true  
					invoked.NewDueDate = ActualForTask.DueDate
					invoked.NewDueTime = ActualForTask.DueTime
					invoked.DateToProcess = 2

				if (ClosePeriod.ValidClose) 
					invoke CloseThePeriod ClosePeriod
							
		
    	ManualApprove is an Instance Action
    		valid when (TaskStatus.PendingApproval)
			confirmation required
				"ThisWillBypassTheProcessFlowApprovalProcess;DoYouWantToContinue?"
			Action Rules
				TaskStatus = TaskStatus.Closed
				TheClose = TheClose.Closed 
				ApprovalMetric = ApprovalMetric.Approved
				if  ((!DueTimeSensitive and (ScheduleForTask.DueDate = current corporate date))
				or    (DueTimeSensitive and (ScheduleForTask.DueDate = current corporate date) and (ScheduleForTask.DueTime > current corporate time)))
					DueMetric = DueMetric.CompletedOnTime 
				else
					if ((ScheduleForTask.DueDate < current corporate date)
					or  ((DueTimeSensitive
					and  (ScheduleForTask.DueDate = current corporate date)
					and  (ScheduleForTask.DueTime < current corporate time))))
						DueMetric = DueMetric.CompletedLate
					else
						DueMetric = DueMetric.CompletedEarly  
				
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam
				
				cancel CloseApproval process
				 
			Exit Rules
				invoke Purge ResourceScheduleRel
				if (UpdateAnalyticCubeFile)
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance

				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						invoked.TaskStatus	= TaskStatus.Closed

				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateStatus = true		
					invoked.UpdateDates = true   
					invoked.NewDueDate = ActualForTask.DueDate
					invoked.NewDueTime = ActualForTask.DueTime
					invoked.DateToProcess = 2

				if (ClosePeriod.ValidClose) 
					invoke CloseThePeriod ClosePeriod
				
				invoke Create ClosePeriodTaskApprovalHistory
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.Type					= 1 
					invoked.ActionTaken				= 7 
					invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource
				

		Reject is an Instance Action	
			restricted
			Action Rules
				Rejected = true
				TaskStatus = TaskStatus.InProcess
				ApprovalMetric = ApprovalMetric.FutureApproval
				if (ScheduleForTask.DueDate < current corporate date)
					TheClose = TheClose.OverDue
				else
					TheClose = TheClose.OnTarget
				initialize DueMetric
				initialize ActualForTask.DueDate
				initialize ActualForTask.DueTime
				initialize ActualForTask.LevelOfEffort
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam		

				if (CloseManagementGroup.OverrideResourceEmailNotifications
				or  TaskOwner.TeamMember.SendUpdatesAsEmail)
					send email
						to		TaskOwner.TeamMember.EmailAddress
						from	actor.agent(Employee).EmployeeWorkEmailAddress
						subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
						Contents
								"RejectedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"

				if (CloseManagementGroup.OverrideResourceLandmarkNotifications
				or  TaskOwner.TeamMember.SendUpdatesAsNotification)
					LocalActor = TaskOwner.TeamMember.FinanceResourceActor
					if (LocalActor entered)					
						send notification
							to	LocalActor
							description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
							priority is very high
							linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
															
			Exit Rules

				invoke Create TaskReasonCodeUsage
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.ReasonCode				= blank
					invoked.Type					= 1 
					invoked.Comment					= blank
				
				invoke Create ClosePeriodTaskApprovalHistory
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.Type					= 1 
					invoked.ActionTaken				= 5 
					invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource


				if (TaskLevel.Detail)
					invoke Create FinanceResourceSchedule
						invoked.HROrganization	= CloseManagementGroup.HROrganization
						invoked.FinanceResource	= TaskOwner.TeamMember
						invoked.BeginDate		= ScheduleForTask.BeginDate
						invoked.BeginTime		= ScheduleForTask.BeginTime
						invoked.DueDate			= ScheduleForTask.DueDate
						invoked.DueTime			= ScheduleForTask.DueTime
						invoked.Description		= TaskName
						invoked.NavigateToThis	= reference to ClosePeriodTask
						invoked.WorkStatus		= 1 
						invoked.CreatedBy		= 1 
						invoked.FinancialForm	= FinancialForm

				if (UpdateAnalyticCubeFile)
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						invoked.TaskStatus	= TaskStatus.InProcess 	
				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateStatus = true		
											

		RejectWithReasonCode is an Instance Action	
			restricted
			subject is RejectTaskApproval
			reason code required
			action comment required
			
			Action Rules
				Rejected = true
				TaskStatus = TaskStatus.InProcess
				ApprovalMetric = ApprovalMetric.FutureApproval
				if (ScheduleForTask.DueDate < current corporate date)
					TheClose = TheClose.OverDue
				else
					TheClose = TheClose.OnTarget
				initialize DueMetric
				initialize ActualForTask.DueDate
				initialize ActualForTask.DueTime
				initialize ActualForTask.LevelOfEffort
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam		

				if (CloseManagementGroup.OverrideResourceEmailNotifications
				or  TaskOwner.TeamMember.SendUpdatesAsEmail)
					send email
						to		TaskOwner.TeamMember.EmailAddress
						from	actor.agent(Employee).EmployeeWorkEmailAddress
						subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
						Contents
								"RejectedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
								"Reason:<reason code>_<reason code.Description>"
								"Comment:<action comment>"

				if (CloseManagementGroup.OverrideResourceLandmarkNotifications
				or  TaskOwner.TeamMember.SendUpdatesAsNotification)
					LocalActor = TaskOwner.TeamMember.FinanceResourceActor
					if (LocalActor entered)
						send notification
							to	LocalActor
							description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
							priority is very high
							linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
									
			Exit Rules

				invoke Create TaskReasonCodeUsage
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.ReasonCode				= reason code
					invoked.Description				= reason code.Description
					invoked.Type					= 1 
					invoked.Comment					= action comment
				
				invoke Create ClosePeriodTaskApprovalHistory
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.Type					= 1 
					invoked.ActionTaken				= 5 
					invoked.ReasonCode				= reason code
					invoked.Description				= reason code.Description
					invoked.Comment					= action comment
					invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource
				

				if (TaskLevel.Detail)
					invoke Create FinanceResourceSchedule
						invoked.HROrganization	= CloseManagementGroup.HROrganization
						invoked.FinanceResource	= TaskOwner.TeamMember
						invoked.BeginDate		= ScheduleForTask.BeginDate
						invoked.BeginTime		= ScheduleForTask.BeginTime
						invoked.DueDate			= ScheduleForTask.DueDate
						invoked.DueTime			= ScheduleForTask.DueTime
						invoked.Description		= TaskName
						invoked.NavigateToThis	= reference to ClosePeriodTask
						invoked.WorkStatus		= 1 
						invoked.CreatedBy		= 1 
						invoked.FinancialForm	= FinancialForm
				if (UpdateAnalyticCubeFile)		
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						invoked.TaskStatus	= TaskStatus.InProcess 	
				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateStatus = true		
											
		ManualReject is an Instance Action	
    		valid when (TaskStatus.PendingApproval)
			subject is RejectTaskApproval
			Parameters
				PrmComment		is Alpha size up to 500
			Local Fields
				LocalActor    				is an Actor	
			Action Rules
				if (CloseManagementGroup.RejectReasonCodeRequired)			
					constraint (reason code entered)
						"ReasonCodeIsRequiredForRejectingTheTask"												

				Rejected = true
				TaskStatus = TaskStatus.InProcess
				ApprovalMetric = ApprovalMetric.FutureApproval
				if (ScheduleForTask.DueDate < current corporate date)
					TheClose = TheClose.OverDue
				else
					TheClose = TheClose.OnTarget
				initialize DueMetric
				initialize ActualForTask.DueDate
				initialize ActualForTask.DueTime
				initialize ActualForTask.LevelOfEffort
				initialize ApprovalLevel
				initialize Approver
				initialize ApproverTeam		

				cancel CloseApproval process

				if (CloseManagementGroup.OverrideResourceEmailNotifications
				or  TaskOwner.TeamMember.SendUpdatesAsEmail)
					send email
						to		TaskOwner.TeamMember.EmailAddress
						from	actor.agent(Employee).EmployeeWorkEmailAddress
						subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
						Contents
								"RejectedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
								if (reason code entered)
									"Reason:<reason code>_<reason code.Description>"
								if (PrmComment entered)
									"Comment:<PrmComment>"

				if (CloseManagementGroup.OverrideResourceLandmarkNotifications
				or  TaskOwner.TeamMember.SendUpdatesAsNotification)
					LocalActor = TaskOwner.TeamMember.FinanceResourceActor
					if (LocalActor entered)
						send notification
							to	LocalActor
							description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
							priority is very high
							linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 					
									
			Exit Rules

				invoke Create TaskReasonCodeUsage
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.ReasonCode				= reason code
					invoked.Description				= reason code.Description
					invoked.Type					= 1 
					invoked.Comment					= PrmComment
				
				invoke Create ClosePeriodTaskApprovalHistory
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.Type					= 1 
					invoked.ActionTaken				= 8 
					invoked.ReasonCode				= reason code
					invoked.Description				= reason code.Description
					invoked.Comment					= PrmComment
					invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource


				if (TaskLevel.Detail)
					invoke Create FinanceResourceSchedule
						invoked.HROrganization	= CloseManagementGroup.HROrganization
						invoked.FinanceResource	= TaskOwner.TeamMember
						invoked.BeginDate		= ScheduleForTask.BeginDate
						invoked.BeginTime		= ScheduleForTask.BeginTime
						invoked.DueDate			= ScheduleForTask.DueDate
						invoked.DueTime			= ScheduleForTask.DueTime
						invoked.Description		= TaskName
						invoked.NavigateToThis	= reference to ClosePeriodTask
						invoked.WorkStatus		= 1 
						invoked.CreatedBy		= 1 
						invoked.FinancialForm	= FinancialForm
				if (UpdateAnalyticCubeFile)		
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						invoked.TaskStatus	= TaskStatus.InProcess 	
				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateStatus = true		
				


		OneTimeTaskApprove is an Instance Action
			restricted
			Parameters
				ParmWorkUnit	is a PfiWorkunit
			Action Rules
				if (OneTimeWorkunit not entered)
					OneTimeWorkunit = ParmWorkUnit

				OneTimeTaskApproved = true

				invoke Create ClosePeriodTaskApprovalHistory
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.Type					= 2 
					invoked.ActionTaken				= 2 
					invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource
		
    	OneTimeTaskManualApprove is an Instance Action
    		default label is "ManualApprove"
    		valid when (OneTimeTaskWaitingApproval)
			confirmation required
				"ThisWillBypassTheProcessFlowApprovalProcess;DoYouWantToContinue?"
			Action Rules
				OneTimeTaskApproved = true
				
				initialize OneTimeTaskApprovalInfo.ApprovalLevel
				initialize OneTimeTaskApprovalInfo.Approver
				initialize OneTimeTaskApprovalInfo.ApproverTeam
				
				initialize OneTimeWorkunit
				
				cancel OneTimeTaskApproval process

				invoke Create ClosePeriodTaskApprovalHistory
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.Type					= 2 
					invoked.ActionTaken				= 7 
					invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource
				 
				

		OneTimeTaskReject is an Instance Action	
			restricted
			Action Rules
				OneTimeTaskRejected = true

				initialize OneTimeTaskApprovalInfo.ApprovalLevel
				initialize OneTimeTaskApprovalInfo.Approver
				initialize OneTimeTaskApprovalInfo.ApproverTeam		

				if (CloseManagementGroup.OverrideResourceEmailNotifications
				or  OneTimeTaskCreator.SendUpdatesAsEmail)
					send email
						to		OneTimeTaskCreator.EmailAddress
						from	actor.agent(Employee).EmployeeWorkEmailAddress
						subject "OneTimeTask<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
						Contents
								"RejectedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"

				if (CloseManagementGroup.OverrideResourceLandmarkNotifications
				or  OneTimeTaskCreator.SendUpdatesAsNotification)
					LocalActor = OneTimeTaskCreator.FinanceResourceActor
					if (LocalActor entered)
						send notification
							to	LocalActor
							description is	"OneTimeTask<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
							priority is very high
							linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
									
			Exit Rules

				invoke Create TaskReasonCodeUsage
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.ReasonCode				= blank
					invoked.Type					= 8 
					invoked.Comment					= blank
				
				invoke Create ClosePeriodTaskApprovalHistory
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.Type					= 2 
					invoked.ActionTaken				= 5 
					invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource
											

		OneTimeTaskRejectWithReasonCode is an Instance Action	
			restricted
			subject is RejectOneTimeTask
			reason code required
			action comment required
			
			Action Rules
				OneTimeTaskRejected = true

				initialize OneTimeTaskApprovalInfo.ApprovalLevel
				initialize OneTimeTaskApprovalInfo.Approver
				initialize OneTimeTaskApprovalInfo.ApproverTeam		

				if (CloseManagementGroup.OverrideResourceEmailNotifications
				or  OneTimeTaskCreator.SendUpdatesAsEmail)
					send email
						to		OneTimeTaskCreator.EmailAddress
						from	actor.agent(Employee).EmployeeWorkEmailAddress
						subject "OneTimeTask<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
						Contents
								"RejectedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
								"Reason:<reason code>_<reason code.Description>"
								"Comment:<action comment>"

				if (CloseManagementGroup.OverrideResourceLandmarkNotifications
				or  OneTimeTaskCreator.SendUpdatesAsNotification)
					LocalActor = OneTimeTaskCreator.FinanceResourceActor
					if (LocalActor entered)
						send notification
							to	LocalActor
							description is	"OneTimeTask<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
							priority is very high
							linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
									
			Exit Rules

				invoke Create TaskReasonCodeUsage
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.ReasonCode				= reason code
					invoked.Description				= reason code.Description
					invoked.Type					= 8 
					invoked.Comment					= action comment
				
				invoke Create ClosePeriodTaskApprovalHistory
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.Type					= 2 
					invoked.ActionTaken				= 5 
					invoked.ReasonCode				= reason code
					invoked.Description				= reason code.Description
					invoked.Comment					= action comment
					invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource
											
		OneTimeTaskManualReject is an Instance Action	
    		default label is "ManualReject"
    		valid when (OneTimeTaskWaitingApproval)
			subject is RejectOneTimeTask
			Parameters
				PrmComment		is Alpha size up to 500

			Local Fields
				LocalActor    				is an Actor
			Action Rules
				if (CloseManagementGroup.RejectOneTimeTaskReasonCodeRequired)			
					constraint (reason code entered)
						"ReasonCodeIsRequiredForRejectingTheTask"												

				OneTimeTaskRejected = true

				initialize OneTimeTaskApprovalInfo.ApprovalLevel
				initialize OneTimeTaskApprovalInfo.Approver
				initialize OneTimeTaskApprovalInfo.ApproverTeam		

				initialize OneTimeWorkunit

				cancel OneTimeTaskApproval process

				if (CloseManagementGroup.OverrideResourceEmailNotifications
				or  OneTimeTaskCreator.SendUpdatesAsEmail)
					send email
						to		OneTimeTaskCreator.EmailAddress
						from	actor.agent(Employee).EmployeeWorkEmailAddress
						subject "OneTimeTask<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
						Contents
								"RejectedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
								if (reason code entered)
									"Reason:<reason code>_<reason code.Description>"
								if (PrmComment entered)
									"Comment:<PrmComment>"

				if (CloseManagementGroup.OverrideResourceLandmarkNotifications
				or  OneTimeTaskCreator.SendUpdatesAsNotification)
					LocalActor = OneTimeTaskCreator.FinanceResourceActor
					if (LocalActor entered)
						send notification
							to	LocalActor
							description is	"OneTimeTask<ClosePeriodTask.TaskName>For<ClosePeriod>WasRejected"
							priority is very high
							linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
									
			Exit Rules

				invoke Create TaskReasonCodeUsage
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.ReasonCode				= reason code
					invoked.Description				= reason code.Description
					invoked.Type					= 8 
					invoked.Comment					= PrmComment
				
				invoke Create ClosePeriodTaskApprovalHistory
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod			= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.Type					= 2 
					invoked.ActionTaken				= 8 
					invoked.ReasonCode				= reason code
					invoked.Description				= reason code.Description
					invoked.Comment					= PrmComment
					invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource
				
		ResubmitForApproval is an Instance Action
			valid when (AllowResubmitOfOneTimeTask)
			
			Action Rules
				OneTimeTaskRejected = false
				
				invoke Update last ReasonCodeUsageRejectOneTimeRel
					invoked.ResubmitDate = current timestamp
				
				initialize LocalApprovalLevel

				include GetNextOneTimeApprovalLevel

				OneTimeTaskApprovalInfo.ApprovalLevel	= LocalApprovalLevel
				OneTimeTaskApprovalInfo.Approver		= LocalApprover
				OneTimeTaskApprovalInfo.ApproverTeam	= LocalApproverTeam

				LocalClosePeriodTask = ClosePeriodTask
				
				include InitiateOneTimeTaskApprovalFlow

				invoke Create ClosePeriodTaskApprovalHistory
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.Type					= 2 
					invoked.ActionTaken				= 1 
					invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource
				

		Reset is an Instance Action 
			restricted
			Action Rules
				TaskStatus = TaskStatus.Scheduled 
				if (NoPrereq)
					DependencyMetric = DependencyMetric.NoPrereq
				else 
					DependencyMetric = DependencyMetric.PrereqFuture
				if (ScheduleForTask.BeginDate < current corporate date)
					StartMetric = StartMetric.StartedLate
				else
					StartMetric = StartMetric.StartFuture
				EffortMetric = EffortMetric.FutureTask 
				if ((ScheduleForTask.DueDate < current corporate date)
				or  ((DueTimeSensitive
				and  (ScheduleForTask.DueDate = current corporate date)
				and  (ScheduleForTask.DueTime < current corporate time))))
					DueMetric = DueMetric.IsLate 
					TheClose = TheClose.OverDue
				else	
					DueMetric = DueMetric.DueFuture  
					TheClose = TheClose.OnTarget
				if (RequiresApproval)
					ApprovalMetric = ApprovalMetric.FutureApproval 
				else
					ApprovalMetric = ApprovalMetric.NoApproval 

		MassForceComplete is an Instance Action
			valid when (ClosePeriod.CloseManagementStatus.Open)
			completion message is "SelectedDetailTasksForPeriod<ClosePeriod>AreNowClosed"
			subject is CloseTaskLate
			
			Parameters
				PrmTaskSelection	is a ClosePeriodTask group
				PrmLateComment		is Alpha size up to 500
				
			Parameter Rules
				PrmTaskSelection
					required
						"TaskSelectionIsRequired"
				
			Action Rules
				constraint (ClosePeriod.CloseManagementStatus.Open)
					"PeriodMustBeOpenToPerformMassForceComplete"
				
				if (CloseManagementGroup.CloseLateReasonCodeRequired)			
					constraint (reason code entered)			
						"ReasonCodeIsRequiredForClosingOfAnyTaskThatIsLate"	
				
				confirmation required
					"Caution:ThisActionWillForceCloseAllDetailedTasksWithStatusOf_In_ProcessForPeriod<ClosePeriod>ThatMeetTheTaskSelectionCriteria;WouldYouLikeToContinue?"
									
				invoke MassForceCompleteTaskSet
					invoked.PrmCloseManagementGroup	= CloseManagementGroup
					invoked.PrmClosePeriod			= ClosePeriod
					invoked.PrmTaskSelection		= PrmTaskSelection
					invoked.PrmLateComment			= PrmLateComment
					invoked.PrmReasonCode			= reason code
					
		MassForceCompleteTaskSet is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup		is a CloseManagementGroup
				PrmClosePeriod				is a ClosePeriod
				PrmTaskSelection			is a ClosePeriodTask group
				PrmLateComment				is Alpha size up to 500
				PrmReasonCode				is AlphaUpper 20
				
			Sort Order
				CloseManagementGroup
				ClosePeriod
				TaskStatus
				TaskLevel
				ClosePeriodTask
				
			Instance Selection
				where   (CloseManagementGroup = PrmCloseManagementGroup
				and		 ClosePeriod = PrmClosePeriod
				and		 TaskStatus = 2
				and		 TaskLevel.Detail
				and	     ClosePeriodTask within PrmTaskSelection)

			Action Rules
				Set Rules
					Exit Rules
						if (PrmCloseManagementGroup.AutoUpdateAnalyticCubeFile and PrmCloseManagementGroup.AutoRefreshReloadAnalyticCube)
							invoke Refresh PrmCloseManagementGroup.ClosePeriodTaskAnalyticCubeRel in background

						if (PrmClosePeriod.ValidClose)
							invoke CloseThePeriod PrmClosePeriod
					
				Instance Rules
					if (CloseManagementGroup.CloseLateReasonCodeRequired)
						reason code = PrmReasonCode
						
					invoke CloseTask
						invoked.PrmLateComment		= PrmLateComment
						invoked.CloseByManager		= true
						invoked.DoNotRefreshCube	= true

		ForceComplete is an Instance Action
			valid when (AllowForceComplete)			 	

			Action Rules
				if(RequiresApproval)
					confirmation required
						"TaskWillBePutToClosedStatusWithoutUpdatingTaskOwnerOrGoingThroughTheApprovalProcess.DoYouWantToContinue?"
				else
					confirmation required
						"TaskWillBePutToClosedStatusWithoutUpdatingTaskOwner.DoYouWantToContinue?"
				
				invoke CloseTask
					invoked.CloseByManager = true
					
		ForceCompleteLate is an Instance Action
			default label is "ForceComplete"
			subject is CloseTaskLate
			valid when (AllowForceCompleteLate)

			Parameters
				PrmLateComment				is Alpha size up to 500

			Action Rules
				if (RequiresApproval)
					confirmation required
						"TaskWillBePutToClosedStatusWithoutUpdatingTaskOwnerOrGoingThroughTheApprovalProcess.DoYouWantToContinue?"
				else
					confirmation required
						"TaskWillBePutToClosedStatusWithoutUpdatingTaskOwner.DoYouWantToContinue?"

				invoke CloseTask
					invoked.reason code		= reason code
					invoked.PrmLateComment	= PrmLateComment				
					invoked.CloseByManager	= true

		CloseTask is an Instance Action
			default label is "Complete"
			subject is CloseTaskLate 
			valid when (AllowTaskToBeClosed)
			completion message is "TaskCompleted"
			Parameters
				PrmActualHours				is Unsigned Decimal size 10.2
				PrmDialogue					is Text
				PrmAttachment				is a Attachment
				PrmLinkToDocumentation		is an URL
				PrmLateComment				is Alpha size up to 500
				CloseByManager				is Boolean
				DoNotRefreshCube			is Boolean

			Local Fields
				LocalActor    				is an Actor
			Parameter Rules
				PrmActualHours
					initial value is DisplayLevelOfEffort
					default to DisplayLevelOfEffort
				PrmAttachment
					if (RequireSupportingDoco
					and !HasSupportingDoco
					and	!CloseByManager)
						if (!PrmLinkToDocumentation entered
						and !PrmDialogue entered)
							required
								"SupportingDocumentationIsRequired;EitherAddAnAttachment,Link,OrNotes"
			Action Rules
				constraint (!CannotCompletePrereqTaskRel exists)
					"CannotCloseThisTask;ThereArePrerequisiteTasksThatMustBeCompletedFirst._Task'<first CannotCompletePrereqTaskRel.DerivedTaskName>'_needsToBeCompleted;PleaseCheckThePrerequisiteListForOthers."

				if (RequireJournalEntry)
					constraint (ClosePeriodTaskJournal set exists)
						"CannotCloseThisTask;JournalEntryDetailIsRequired"
	            
	            constraint (!HasUnreleasedJournalEntries)
					"CannotCloseThisTask;ThereAreUnreleasedJournalEntriesAttached"
					    
				constraint (!HasIssueTaskAssignTaskPrereq) 
					"The_<first PeriodIssueSumaaryAssignedPrereqRel.DerivedSummaryName>_mustBeResolvedBeforeCompletingTheTask"










				if (RequiresApproval
				and !CloseByManager)
					constraint (TaskApprovalResourceRel exists)
						"CannotCloseThisTask;TaskRequiresApprovalsButNoApprovalLevelsExist"
					for each TaskApprovalResourceRel
						constraint (!each.TeamHasNoMembers)
							"CannotCloseThisTask;ApprovalLevel<each.ApprovalLevel>HasATeamWithNoMembers"
						constraint (!each.InvalidEscalation)
							"CannotCloseThisTask:ApprovalLevel<each.ApprovalLevel>HasInvalidEscalationSettings"
						constraint (!each.HasInactiveResources)
							"CannotCloseThisTask;ApprovalLevel<each.ApprovalLevel>HasInactiveResources"

				if (ClosingLate
				and CloseManagementGroup.CloseLateReasonCodeRequired
				and IsNotTaskForPeriodReconciliations)
					constraint (reason code entered)			
						"ReasonCodeIsRequiredForClosingTaskLate"												
				
				if (Rejected or Reopened)
					invoke Update last ReasonCodeUsageRel
						invoked.RecloseDate = current timestamp
				
				ActualForTask.DueDate = current corporate date
				ActualForTask.DueTime = current corporate time
				ActualForTask.LevelOfEffort = PrmActualHours

				initialize Rejected
				initialize Reopened
				TheClose = TheClose.OnTarget

				if (TaskOwner.TeamMember not = actor.agent(FinanceResource).FinanceResource)
					TaskCompletedBy = actor.agent(FinanceResource).FinanceResource
				
				if  ((!DueTimeSensitive and (ScheduleForTask.DueDate = current corporate date))
				or    (DueTimeSensitive and (ScheduleForTask.DueDate = current corporate date) and (ScheduleForTask.DueTime > current corporate time)))
					DueMetric = DueMetric.CompletedOnTime 
				else
					if ((ScheduleForTask.DueDate < current corporate date)
					or  ((DueTimeSensitive
					and  (ScheduleForTask.DueDate = current corporate date)
					and  (ScheduleForTask.DueTime < current corporate time))))
						DueMetric = DueMetric.CompletedLate
					else
						DueMetric = DueMetric.CompletedEarly  

				if (ScheduleForTask.LevelOfEffort = 0
				and ActualForTask.LevelOfEffort = 0)
					EffortMetric = EffortMetric.NotEntered
				else
					if (ScheduleForTask.LevelOfEffort = ActualForTask.LevelOfEffort)
						EffortMetric = EffortMetric.AsExpected
					else
						if (ScheduleForTask.LevelOfEffort < ActualForTask.LevelOfEffort)
							EffortMetric = EffortMetric.MoreThanExpected
						else
							EffortMetric = EffortMetric.LessThanExpected
							

				if (RequiresApproval
				and	!CloseByManager)
					ApprovalMetric = ApprovalMetric.PendingApproval 
					TheClose = TheClose.PendingApproval   
					TaskStatus = TaskStatus.PendingApproval

					include GetNextApprovalLevel
					ApprovalLevel = LocalApprovalLevel
					Approver = LocalApprover
					ApproverTeam = LocalApproverTeam
					include InitiateApprovalProcessFlow
 				else	
					TheClose = TheClose.Closed 
					TaskStatus = TaskStatus.Closed

				if (PrmAttachment entered 
				or  PrmLinkToDocumentation entered
				or  PrmDialogue entered)
					invoke Create ClosePeriodTaskDocumentation
						invoked.ClosePeriod					= ClosePeriod
						invoked.ClosePeriodTask				= ClosePeriodTask
						invoked.Description					= "Task Closure"
						invoked.Notes						= PrmDialogue
						invoked.Attachment					= PrmAttachment
						invoked.Link						= PrmLinkToDocumentation
						invoked.CloseManagementGroup		= CloseManagementGroup
						invoked.Author						= actor.agent(Employee).Employee	
			Exit Rules
				if (DependentTaskRel exists)
					for each DependentTaskRel
						if (each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskOwner.TeamMember != actor.agent(Employee).Employee)

							if (each.ClosePeriodTaskPrerequisite.DependencyType.CannotStart)
								LocalDetailTask = each.ClosePeriodTaskPrerequisite.ClosePeriodTask
								if (LocalCannotStartPrereqTaskRel !exists)  
									if (each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskOwner entered)
										if (CloseManagementGroup.OverrideResourceEmailNotifications
										or  each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskOwner.TeamMember.SendUpdatesAsEmail)
											send email
												to		each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskOwner.TeamMember.EmailAddress
												from	actor.agent(Employee).EmployeeWorkEmailAddress
												subject "Task<each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskName>For<ClosePeriod>CanBeStarted"
												Contents
													"PrerequisiteTask<ClosePeriodTask.TaskName>HasBeenCompletedAndThereAreNoOtherOpenPrerequisiteTasks"
					
										if (CloseManagementGroup.OverrideResourceLandmarkNotifications
										or  each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskOwner.TeamMember.SendUpdatesAsNotification)
											LocalActor = each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskOwner.TeamMember.FinanceResourceActor
											if (LocalActor entered)
												send notification
													to	LocalActor
													description is	"Task<each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskName>For<ClosePeriod>CanBeStarted"
													priority is high

													detail is "PrerequisiteTask<ClosePeriodTask.TaskName>HasBeenCompletedAndThereAreNoOtherOpenPrerequisiteTasks"
									else
										LocalTeam = each.ClosePeriodTaskPrerequisite.ClosePeriodTask.FinanceTeam
										for each SendToTeamMembersRel
											if (CloseManagementGroup.OverrideResourceEmailNotifications
										  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
												send email
													to		each.FinanceTeamMember.TeamMember.EmailAddress
													from	actor.agent(Employee).EmployeeWorkEmailAddress
													subject "TeamTask<LocalDetailTask.TaskName>For<ClosePeriod>CanBeStarted"
													Contents
														"PrerequisiteTask<ClosePeriodTask.TaskName>HasBeenCompletedAndThereAreNoOtherOpenPrerequisiteTasks"
	
											if (CloseManagementGroup.OverrideResourceLandmarkNotifications
											or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
												LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
												if (LocalActor entered)
													send notification
														to	LocalActor
														description is	"TeamTask<LocalDetailTask.TaskName>For<ClosePeriod>CanBeStarted"
														priority is high
														detail is "PrerequisiteTask<ClosePeriodTask.TaskName>HasBeenCompletedAndThereAreNoOtherOpenPrerequisiteTasks"												

							if (each.ClosePeriodTaskPrerequisite.DependencyType.CannotComplete)
								LocalDetailTask = each.ClosePeriodTaskPrerequisite.ClosePeriodTask
								if (LocalCannotStartPrereqTaskRel !exists  
								and LocalCannotCompletePrereqTaskRel !exists)
									if (each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskOwner entered)
										if (CloseManagementGroup.OverrideResourceEmailNotifications
										or  each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskOwner.TeamMember.SendUpdatesAsEmail)
											send email
												to		each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskOwner.TeamMember.EmailAddress
												from	actor.agent(Employee).EmployeeWorkEmailAddress
												subject "Task<each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskName>For<ClosePeriod>CanBeCompleted"
												Contents
													"PrerequisiteTask<ClosePeriodTask.TaskName>HasBeenCompletedAndThereAreNoOtherOpenPrerequisiteTasks"
					
										if (CloseManagementGroup.OverrideResourceLandmarkNotifications
										or  each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskOwner.TeamMember.SendUpdatesAsNotification)
											LocalActor = each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskOwner.TeamMember.FinanceResourceActor
											if (LocalActor entered)
												send notification
													to	LocalActor
													description is	"Task<each.ClosePeriodTaskPrerequisite.ClosePeriodTask.TaskName>For<ClosePeriod>CanBeCompleted"
													priority is high

													detail is "PrerequisiteTask<ClosePeriodTask.TaskName>HasBeenCompletedAndThereAreNoOtherOpenPrerequisiteTasks"											
									else
										LocalTeam = each.ClosePeriodTaskPrerequisite.ClosePeriodTask.FinanceTeam
										for each SendToTeamMembersRel
											if (CloseManagementGroup.OverrideResourceEmailNotifications
										  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
												send email
													to		each.FinanceTeamMember.TeamMember.EmailAddress
													from	actor.agent(Employee).EmployeeWorkEmailAddress
													subject "TeamTask<LocalDetailTask.TaskName>For<ClosePeriod>CanBeCompleted"
													Contents
														"PrerequisiteTask<ClosePeriodTask.TaskName>HasBeenCompletedAndThereAreNoOtherOpenPrerequisiteTasks"
	
											if (CloseManagementGroup.OverrideResourceLandmarkNotifications
											or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
												LocalActor	=	each.FinanceTeamMember.TeamMember.FinanceResourceActor
												if (LocalActor entered)
													send notification
														to	LocalActor
														description is	"TeamTask<LocalDetailTask.TaskName>For<ClosePeriod>CanBeCompleted"
														priority is high
														detail is "PrerequisiteTask<ClosePeriodTask.TaskName>HasBeenCompletedAndThereAreNoOtherOpenPrerequisiteTasks"

				if (ClosingLate
				and IsNotTaskForPeriodReconciliations)
					invoke Create TaskReasonCodeUsage
						invoked.CloseManagementGroup	= CloseManagementGroup
						invoked.ClosePeriod				= ClosePeriod
						invoked.ClosePeriodTask			= ClosePeriodTask
						invoked.ReasonCode				= reason code
						invoked.Description				= reason code.Description
						invoked.Type					= 3 
						invoked.Comment					= PrmLateComment
				
				if (ClosePeriod.ValidClose) 
					invoke CloseThePeriod ClosePeriod
					

				invoke Purge ResourceScheduleRel
				if (DoNotRefreshCube)
					invoke QuickUpdateNoRefresh ClosePeriodTaskCubeRel
						fill in fields from this instance
				else
					if (UpdateAnalyticCubeFile)
						invoke Update ClosePeriodTaskCubeRel
							fill in fields from this instance

				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						if (RequiresApproval)
							invoked.TaskStatus = TaskStatus.PendingApproval
						else
							invoked.TaskStatus	= TaskStatus.Closed 	
				
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						if (RequiresApproval
						and !CloseByManager)
							invoked.TaskStatus = TaskStatus.PendingApproval
						else
							invoked.TaskStatus	= TaskStatus.Closed

				if (RequiresApproval
				and !CloseByManager)
					invoke Create ClosePeriodTaskApprovalHistory
						invoked.CloseManagementGroup	= CloseManagementGroup
						invoked.ClosePeriod				= ClosePeriod
						invoked.ClosePeriodTask			= ClosePeriodTask
						invoked.Type					= 1 
						invoked.ActionTaken				= 1 
						invoked.ActionTakenBy			= actor.agent(FinanceResource).FinanceResource

				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateStatus = true
					invoked.UpdateDates = true
					invoked.NewDueDate = ActualForTask.DueDate
					invoked.NewDueTime = ActualForTask.DueTime
					invoked.DateToProcess = 2


		Take is an Instance Action
			default label is "Take"
			valid when (UnassignedTaskForMyTeam)
			completion message is "<TaskName>IsNowTaken"
			
			Action Rules	
				TaskOwner = actor.agent(Employee).Employee 
				invoke Create FinanceResourceSchedule
					invoked.HROrganization	= CloseManagementGroup.HROrganization
					invoked.FinanceResource	= TaskOwner
					invoked.BeginDate		= ScheduleForTask.BeginDate
					invoked.BeginTime		= ScheduleForTask.BeginTime
					invoked.DueDate			= ScheduleForTask.DueDate
					invoked.DueTime			= ScheduleForTask.DueTime
					invoked.Description		= TaskName
					invoked.NavigateToThis	= reference to ClosePeriodTask
					invoked.FinancialForm	= FinancialForm
					invoked.CreatedBy		= 1  
					invoked.WorkStatus 		= 0
							
		StartWork is an Instance Action   
			default label is "Start"
			valid when (StartWorkValid)
			completion message is "<TaskName>IsNowInProcess"					
			Action Rules
				constraint (!CannotStartPrereqTaskRel exists)
					"CannotStartThisTask;ThereArePrerequisiteTasksThatMustBeCompletedFirst._Task'<first CannotStartPrereqTaskRel.DerivedTaskName>'_needsToBeCompleted;PleaseCheckThePrerequisiteListForOthers."
					
				TaskStatus = TaskStatus.InProcess
				ActualForTask.BeginDate = current corporate date
				ActualForTask.BeginTime = current corporate time
				if (UnassignedTask)
					TaskOwner = actor.agent(Employee).Employee 
					invoke Create FinanceResourceSchedule
						invoked.HROrganization	= CloseManagementGroup.HROrganization
						invoked.FinanceResource	= actor.agent(Employee).Employee
						invoked.BeginDate		= ScheduleForTask.BeginDate
						invoked.BeginTime		= ScheduleForTask.BeginTime
						invoked.DueDate			= ScheduleForTask.DueDate
						invoked.DueTime			= ScheduleForTask.DueTime
						invoked.Description		= TaskName
						invoked.NavigateToThis	= reference to ClosePeriodTask
						invoked.FinancialForm	= FinancialForm
						invoked.CreatedBy		= 1  
						invoked.WorkStatus 		= 1 
				if (ScheduleForTask.BeginDate = current corporate date)
					StartMetric = StartMetric.StartedOnTime 
				else						
				if (ScheduleForTask.BeginDate > current corporate date)
					StartMetric = StartMetric.StartedEarly 
				else
					StartMetric = StartMetric.StartedLate		
				if ((ScheduleForTask.DueDate < current corporate date)
				or  ((DueTimeSensitive
				and  (ScheduleForTask.DueDate = current corporate date)
				and  (ScheduleForTask.DueTime < current corporate time))))
					DueMetric = DueMetric.IsLate 
			Exit Rules

				if (TaskLevel.Detail)
					invoke Update ResourceScheduleRel
						invoked.WorkStatus = 1 

					if (CalledFromOpenPeriodSetAction)
						invoke QuickUpdateNoRefresh ClosePeriodTaskCubeRel
							fill in fields from this instance

					if (UpdateAnalyticCubeFile)
						invoke Update ClosePeriodTaskCubeRel
							fill in fields from this instance

					for each ClosePeriodTaskFlatDetailRel
						invoke Update each 
							invoked.TaskStatus	= TaskStatus.InProcess 	
							invoked.TaskOwner	= TaskOwner

				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateStatus	= true
					invoked.UpdateDates		= true
					invoked.NewBeginDate	= ActualForTask.BeginDate
					invoked.NewBeginTime	= ActualForTask.BeginTime
					invoked.DateToProcess	= 2


		StartWorkLate is an Instance Action   
			default label is "Start"
			valid when (StartWorkLateValid)
			completion message is "<TaskName>IsNowInProcess"
			subject is StartTaskLate

			Parameters
				PrmComment		is Alpha size up to 500
				
			Action Rules
				if (CloseManagementGroup.StartLateReasonCodeRequired)			
					constraint (reason code entered)			
						"ReasonCodeIsRequiredForStartingTheTaskLate"												

				constraint (!CannotStartPrereqTaskRel exists)
					"CannotStartThisTask;ThereArePrerequisiteTasksThatMustBeCompletedFirst._Task'<first CannotStartPrereqTaskRel.DerivedTaskName>'_needsToBeCompleted;PleaseCheckThePrerequisiteListForOthers."
					
				TaskStatus = TaskStatus.InProcess
				ActualForTask.BeginDate = current corporate date
				ActualForTask.BeginTime = current corporate time
				if (UnassignedTask)
					TaskOwner = actor.agent(Employee).Employee 
					invoke Create FinanceResourceSchedule
						invoked.HROrganization	= CloseManagementGroup.HROrganization
						invoked.FinanceResource	= actor.agent(Employee).Employee
						invoked.BeginDate		= ScheduleForTask.BeginDate
						invoked.BeginTime		= ScheduleForTask.BeginTime
						invoked.DueDate			= ScheduleForTask.DueDate
						invoked.DueTime			= ScheduleForTask.DueTime
						invoked.Description		= TaskName
						invoked.NavigateToThis	= reference to ClosePeriodTask
						invoked.FinancialForm	= FinancialForm
						invoked.CreatedBy		= 1  
						invoked.WorkStatus 		= 1 
				if (ScheduleForTask.BeginDate = current corporate date)
					StartMetric = StartMetric.StartedOnTime 
				else						
				if (ScheduleForTask.BeginDate > current corporate date)
					StartMetric = StartMetric.StartedEarly 
				else
					StartMetric = StartMetric.StartedLate		
				if ((ScheduleForTask.DueDate < current corporate date)
				or  ((DueTimeSensitive
				and  (ScheduleForTask.DueDate = current corporate date)
				and  (ScheduleForTask.DueTime < current corporate time))))
					DueMetric = DueMetric.IsLate 
			Exit Rules
				invoke Create TaskReasonCodeUsage
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.ReasonCode				= reason code
					invoked.Description				= reason code.Description
					invoked.Type					= 4 
					invoked.Comment					= PrmComment
				

				if (TaskLevel.Detail)
					invoke Update ResourceScheduleRel
						invoked.WorkStatus = 1 
					if (UpdateAnalyticCubeFile)	
						invoke Update ClosePeriodTaskCubeRel
							fill in fields from this instance
					for each ClosePeriodTaskFlatDetailRel
						invoke Update each 
							invoked.TaskStatus	= TaskStatus.InProcess 	
							invoked.TaskOwner	= TaskOwner
				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateStatus	= true
					invoked.UpdateDates		= true
					invoked.NewBeginDate	= ActualForTask.BeginDate
					invoked.NewBeginTime	= ActualForTask.BeginTime
					invoked.DateToProcess	= 2

		MassVoidTask is an Instance Action
			valid when (ClosePeriod.CloseManagementStatus.Open)
			completion message is "SelectedDetailTasksForPeriod<ClosePeriod>AreNowVoided"
			subject is VoidTask
			
			Parameters
				PrmTaskSelection	is a ClosePeriodTask group
				PrmComment			is Alpha size up to 500
				
			Parameter Rules
				PrmTaskSelection
					required
						"TaskSelectionIsRequired"
				
			Action Rules
				constraint (ClosePeriod.CloseManagementStatus.Open)
					"PeriodMustBeOpenToPerformMassVoidTask"
				
				if (CloseManagementGroup.VoidReasonCodeRequired)			
					constraint (reason code entered)			
						"ReasonCodeIsRequiredForVoidingTheTask"	
				
				confirmation required
					"Caution:ThisActionWillVoidAllDetailedTasksForPeriod<ClosePeriod>ThatMeetTheTaskSelectionCriteria;WouldYouLikeToContinue?"
									
				invoke MassVoidTaskSet
					invoked.PrmCloseManagementGroup	= CloseManagementGroup
					invoked.PrmClosePeriod			= ClosePeriod
					invoked.PrmTaskSelection		= PrmTaskSelection
					invoked.PrmComment				= PrmComment
					invoked.PrmReasonCode			= reason code
					
		MassVoidTaskSet is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmClosePeriod			is a ClosePeriod
				PrmTaskSelection		is a ClosePeriodTask group
				PrmComment				is Alpha size up to 500
				PrmReasonCode			is AlphaUpper 20
				
			Sort Order
				CloseManagementGroup
				ClosePeriod
				TaskStatus
				TaskLevel
				ClosePeriodTask
				
			Instance Selection
				where   (CloseManagementGroup = PrmCloseManagementGroup
				and		 ClosePeriod = PrmClosePeriod
				and		 TaskStatus < 7
				and		 TaskLevel.Detail
				and      IsNotTaskForPeriodReconciliations
				and	     ClosePeriodTask within PrmTaskSelection)

			Action Rules
				Set Rules
					Exit Rules
						if (PrmCloseManagementGroup.AutoUpdateAnalyticCubeFile and PrmCloseManagementGroup.AutoRefreshReloadAnalyticCube)
							invoke Refresh PrmCloseManagementGroup.ClosePeriodTaskAnalyticCubeRel in background
					
				Instance Rules
					if (CloseManagementGroup.VoidReasonCodeRequired)
						reason code = PrmReasonCode
						
					invoke VoidTask
						invoked.PrmComment		 = PrmComment
						invoked.DoNotRefreshCube = true


		VoidTask is an Instance Action
			valid when (AllowVoid)
			completion message is "TasksForThisPeriodIsNowVoided"
			subject is VoidTask

			Parameters
				PrmComment			is Alpha size up to 500
				DoNotRefreshCube	is Boolean

			Local Fields
				LocalActor    				is an Actor
				
			Action Rules
				if (CloseManagementGroup.VoidReasonCodeRequired)			
					constraint (reason code entered)			
						"ReasonCodeIsRequiredForVoidingTheTask"												

				if (OneTimeTaskWaitingApproval)
					initialize OneTimeTaskApprovalInfo.ApprovalLevel
					initialize OneTimeTaskApprovalInfo.Approver
					initialize OneTimeTaskApprovalInfo.ApproverTeam
					initialize OneTimeWorkunit
					cancel OneTimeTaskApproval process

				if (TaskStatus.PendingApproval)
					initialize ApprovalLevel
					initialize Approver
					initialize ApproverTeam
					initialize Workunit		
					cancel CloseApproval process
				
				if (ScheduleForTask.DueDate = current corporate date)
					DueMetric = DueMetric.CompletedOnTime 
				else
					if (ScheduleForTask.DueDate < current corporate date)
						DueMetric = DueMetric.CompletedLate 
					else
						DueMetric = DueMetric.CompletedEarly 
				ApprovalMetric = ApprovalMetric.NoApproval 		
				TheClose = TheClose.Closed 
				TaskStatus = TaskStatus.Voided	
				ActualForTask.DueDate = current corporate date
				ActualForTask.DueTime = current corporate time

				if (TaskOwner entered
				and TaskOwner.TeamMember != actor.agent(Employee).Employee)  
					if (CloseManagementGroup.OverrideResourceEmailNotifications
					or  TaskOwner.TeamMember.SendUpdatesAsEmail)
						send email
							to		TaskOwner.TeamMember.EmailAddress
							from	actor.agent(Employee).EmployeeWorkEmailAddress
							subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenVoided"
							Contents
									"VoidedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
									"Reason:<reason code>_<reason code.Description>"
									"Comment:<PrmComment>"
	
					if (CloseManagementGroup.OverrideResourceLandmarkNotifications
					or  TaskOwner.TeamMember.SendUpdatesAsNotification)
						LocalActor = TaskOwner.TeamMember.FinanceResourceActor
						if (LocalActor entered)
							send notification
								to	LocalActor
								description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenVoided"
								priority is high
								linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
				else
					LocalTeam = FinanceTeam
					for each SendToTeamMembersRel
						if (each.FinanceTeamMember.TeamMember != actor.agent(Employee).Employee)  
						  	if (CloseManagementGroup.OverrideResourceEmailNotifications
						  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
								send email
									to		each.FinanceTeamMember.TeamMember.EmailAddress
									from	TaskOwner.TeamMember.EmailAddress
									subject "TeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenVoided"
									Contents
										"VoidedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
										"Reason:<reason code>_<reason code.Description>"
										"Comment:<PrmComment>"

							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
								LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"TeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenVoided"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 								

			Exit Rules
				invoke Create TaskReasonCodeUsage
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.ReasonCode				= reason code
					invoked.Description				= reason code.Description
					invoked.Type					= 5 
					invoked.Comment					= PrmComment
				
				if (DoNotRefreshCube)
					invoke QuickUpdateNoRefresh ClosePeriodTaskCubeRel
						fill in fields from this instance

				if (ClosePeriod.ValidClose)
					invoke CloseThePeriod ClosePeriod

				invoke Purge ResourceScheduleRel

				if (UpdateAnalyticCubeFile)
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						invoked.TaskStatus	= TaskStatus.Voided 	
				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateStatus	= true
					invoked.UpdateDates		= true		
					invoked.NewDueDate		= ActualForTask.DueDate
					invoked.NewDueTime		= ActualForTask.DueTime
					invoked.DateToProcess	= 2


		VoidOneTimeTask is an Instance Action
			default label is "VoidTask"
			valid when (AllowOneTimeVoidByCreator)
			completion message is "OneTimeTaskForThisPeriodIsNowVoided"
			subject is VoidTask

			Parameters
				PrmComment		is Alpha size up to 500

			Local Fields
				LocalActor    				is an Actor	

			Action Rules
				if (CloseManagementGroup.VoidReasonCodeRequired)			
					constraint (reason code entered)			
						"ReasonCodeIsRequiredForVoidingTheTask"												

				if (OneTimeTaskWaitingApproval)
					initialize OneTimeTaskApprovalInfo.ApprovalLevel
					initialize OneTimeTaskApprovalInfo.Approver
					initialize OneTimeTaskApprovalInfo.ApproverTeam
					initialize OneTimeWorkunit
					cancel OneTimeTaskApproval process

				if (ScheduleForTask.DueDate = current corporate date)
					DueMetric = DueMetric.CompletedOnTime 
				else
					if (ScheduleForTask.DueDate < current corporate date)
						DueMetric = DueMetric.CompletedLate 
					else
						DueMetric = DueMetric.CompletedEarly 
				ApprovalMetric = ApprovalMetric.NoApproval 		
				TheClose = TheClose.Closed 
				TaskStatus = TaskStatus.Voided	
				ActualForTask.DueDate = current corporate date
				ActualForTask.DueTime = current corporate time

				if (TaskOwner entered
				and TaskOwner.TeamMember != actor.agent(Employee).Employee)  
					if (CloseManagementGroup.OverrideResourceEmailNotifications
					or  TaskOwner.TeamMember.SendUpdatesAsEmail)
						send email
							to		TaskOwner.TeamMember.EmailAddress
							from	actor.agent(Employee).EmployeeWorkEmailAddress
							subject "OneTimeTask<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenVoided"
							Contents
									"VoidedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
									"Reason:<reason code>_<reason code.Description>"
									"Comment:<PrmComment>"
	
					if (CloseManagementGroup.OverrideResourceLandmarkNotifications
					or  TaskOwner.TeamMember.SendUpdatesAsNotification)
						LocalActor = TaskOwner.TeamMember.FinanceResourceActor
						if (LocalActor entered)	
							send notification
								to	LocalActor
								description is	"OneTimeTask<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenVoided"
								priority is high
								linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
				else
					LocalTeam = FinanceTeam
					for each SendToTeamMembersRel
						if (each.FinanceTeamMember.TeamMember != actor.agent(Employee).Employee)  
						  	if (CloseManagementGroup.OverrideResourceEmailNotifications
						  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
								send email
									to		each.FinanceTeamMember.TeamMember.EmailAddress
									from	TaskOwner.TeamMember.EmailAddress
									subject "OneTimeTeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenVoided"
									Contents
										"VoidedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
										"Reason:<reason code>_<reason code.Description>"
										"Comment:<PrmComment>"

							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
								LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"OneTimeTeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenVoided"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 

			Exit Rules
				invoke Create TaskReasonCodeUsage
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod				= ClosePeriod
					invoked.ClosePeriodTask			= ClosePeriodTask
					invoked.ReasonCode				= reason code
					invoked.Description				= reason code.Description
					invoked.Type					= 5 
					invoked.Comment					= PrmComment

				if (ClosePeriod.ValidClose)
					invoke CloseThePeriod ClosePeriod
				
				invoke Purge ResourceScheduleRel

				if (UpdateAnalyticCubeFile)
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						invoked.TaskStatus	= TaskStatus.Voided 	
				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateStatus	= true
					invoked.UpdateDates		= true		
					invoked.NewDueDate		= ActualForTask.DueDate
					invoked.NewDueTime		= ActualForTask.DueTime
					invoked.DateToProcess	= 2

		MassReassign is an Instance Action
			valid when (!ClosePeriod.CloseManagementStatus.Closed)
			completion message is "TasksForThisPeriodAreNowReassigned"
			
			Parameters
				PrmTaskSelection		is a ClosePeriodTask group
				PrmFinanceTeam			is a FinanceTeam
				PrmTaskOwner			is a FinanceTeamMember
				PrmScopeOfChange		is Numeric 1
					States
						JustThisPeriod					value is 0
						AllPeriods						value is 1
						AllPeriodsAndTheCloseProcess	value is 2
				
			Parameter Rules
				PrmTaskSelection
					required
						"TaskSelectionIsRequired"
				PrmFinanceTeam
					required
						"TeamIsRequired"				
					
			Action Rules
				confirmation required
					"Caution:ThisActionWillReassignAllTasksThatMeetTheTaskSelectionCriteria;WouldYouLikeToContinue?"
					
				invoke MassReassignSet
					invoked.PrmCloseManagementGroup	= CloseManagementGroup
					invoked.PrmClosePeriod			= ClosePeriod
					invoked.PrmTaskSelection		= PrmTaskSelection
					invoked.PrmFinanceTeam			= PrmFinanceTeam
					invoked.PrmTaskOwner			= PrmTaskOwner
					invoked.PrmScopeOfChange		= PrmScopeOfChange
					
		MassReassignSet is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmClosePeriod			is a ClosePeriod
				PrmTaskSelection		is a ClosePeriodTask group
				PrmFinanceTeam			is a FinanceTeam
				PrmTaskOwner			is a FinanceTeamMember
				PrmScopeOfChange		is Numeric 1
					States
						JustThisPeriod					value is 0
						AllPeriods						value is 1
						AllPeriodsAndTheCloseProcess	value is 2
				
			Sort Order
				CloseManagementGroup
				ClosePeriod
				TaskStatus
				ClosePeriodTask
				
			Instance Selection
				where   (CloseManagementGroup = PrmCloseManagementGroup
				and		 ClosePeriod = PrmClosePeriod
				and		 TaskStatus < 5
				and 	 !OneTimeTaskNeedsApproval
				and	     ClosePeriodTask within PrmTaskSelection)
				
			Action Rules
				Set Rules
					Exit Rules
						if (PrmCloseManagementGroup.AutoUpdateAnalyticCubeFile and PrmCloseManagementGroup.AutoRefreshReloadAnalyticCube)
							invoke Refresh PrmCloseManagementGroup.ClosePeriodTaskAnalyticCubeRel in background
							
				Instance Rules
					invoke Reassign
						invoked.CloseManagementGroup	= PrmCloseManagementGroup						
						invoked.PrmFinanceTeam			= PrmFinanceTeam								
						invoked.PrmTaskOwner			= PrmTaskOwner								
						invoked.PrmScopeOfChange		= PrmScopeOfChange
						invoked.PrmBypassInProcessEdit 	= true
						invoked.DoNotRefreshCube 		= true

		Reassign is an Instance Action      
			valid when (AllowReassign)
			completion message is "<TaskName>Reassigned"
			Parameters
				CloseManagementGroup 							
				PrmFinanceTeam								is a FinanceTeam
				PrmTaskOwner								is a FinanceTeamMember
				PrmScopeOfChange    						is Numeric 1
					States
						JustThisPeriod					value is 0
						AllPeriods						value is 1
						AllPeriodsAndTheCloseProcess	value is 2
				PrmBypassInProcessEdit						is Boolean  
				DoNotRefreshCube							is Boolean

			Local Fields
				LocalActor    								is an Actor
			
			Parameter Rules
				CloseManagementGroup
					default to ClosePeriod.CloseManagementGroup
					cannot be changed
				PrmFinanceTeam
					initial value is FinanceTeam
					required
						"TeamIsRequired"				
				PrmTaskOwner
					initial value is TaskOwner

			Action Rules
				if (PrmFinanceTeam = FinanceTeam)
					if (!PrmBypassInProcessEdit)
						constraint (PrmTaskOwner != TaskOwner)
							"OwnershipHasNotBeenChanged.UpdateTheTeamAnd/OrTaskOwnerToReassign."
						
				if (TaskLevel.Detail)
					if (PrmTaskOwner not entered
					and TaskStatus.InProcess)
						if (!PrmBypassInProcessEdit)
							confirmation required
								"ThisTaskIsInProcessForThePeriod.BlankingOutTheTaskOwnerWillChangeTheStatusToScheduled.DoYouWantToContinue?"
	
						TaskStatus = 0 
						initialize ActualForTask.BeginDate
						initialize ActualForTask.BeginTime
						initialize StartMetric

					invoke Purge ResourceScheduleRel
					
				FinanceTeam = PrmFinanceTeam
				TaskOwner   = PrmTaskOwner

				if (TaskOwner changed)
					if (TaskOwner entered)
						if (TaskOwner.TeamMember != actor.agent(Employee).Employee) 
							if (CloseManagementGroup.OverrideResourceEmailNotifications
							or  TaskOwner.TeamMember.SendUpdatesAsEmail)
								send email
									to		TaskOwner.TeamMember.EmailAddress
									from	actor.agent(Employee).EmployeeWorkEmailAddress
									subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYou"
									Contents
											"ReassignedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
											"ScheduledBeginDateIs_<ClosePeriodTask.ScheduleForTask.BeginDate>_<ClosePeriodTask.ScheduleForTask.BeginTime>"
											"ScheduledDueDateIs_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
		
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  TaskOwner.TeamMember.SendUpdatesAsNotification)
								LocalActor = TaskOwner.TeamMember.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYou"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
						
						if (old TaskOwner entered)
							if (old TaskOwner.TeamMember != actor.agent(Employee).Employee) 
								if (CloseManagementGroup.OverrideResourceEmailNotifications
								or  old TaskOwner.TeamMember.SendUpdatesAsEmail)
									send email
										to		old TaskOwner.TeamMember.EmailAddress
										from	actor.agent(Employee).EmployeeWorkEmailAddress
										subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>NoLongerAssignedToYou"
										Contents
												if (TaskOwner entered)
													"ReassignedOn_<current timestamp>To_<TaskOwner.TeamMember.PreferredSimplePresentationName>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
												else
													"ReassignedOn_<current timestamp>To_<FinanceTeam>-<FinanceTeam.Description>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
				
								if (CloseManagementGroup.OverrideResourceLandmarkNotifications
								or  old TaskOwner.TeamMember.SendUpdatesAsNotification)
									LocalActor = old TaskOwner.TeamMember.FinanceResourceActor
									if (LocalActor entered)
										send notification
											to	LocalActor
											description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>NoLongerAssignedToYou"
											priority is high
											detail is "ReassignedOn_<current timestamp>To_<DerivedReassignedTo>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
					else
						if (old TaskOwner.TeamMember != actor.agent(Employee).Employee) 
							if (CloseManagementGroup.OverrideResourceEmailNotifications
							or  old TaskOwner.TeamMember.SendUpdatesAsEmail)
								send email
									to		old TaskOwner.TeamMember.EmailAddress
									from	actor.agent(Employee).EmployeeWorkEmailAddress
									subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>NoLongerAssignedToYou"
									Contents
											if (TaskOwner entered)
												"ReassignedOn_<current timestamp>To_<TaskOwner.TeamMember.PreferredSimplePresentationName>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
											else
												"ReassignedOn_<current timestamp>To_<FinanceTeam>-<FinanceTeam.Description>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
			
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  old TaskOwner.TeamMember.SendUpdatesAsNotification)
								LocalActor = old TaskOwner.TeamMember.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>NoLongerAssignedToYou"
										priority is high
										detail is "ReassignedOn_<current timestamp>To_<DerivedReassignedTo>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"

						LocalTeam = FinanceTeam
						for each SendToTeamMembersRel
							if ((each.FinanceTeamMember.TeamMember != actor.agent(Employee).Employee)  
							and (each.FinanceTeamMember.TeamMember != old TaskOwner.TeamMember)) 
							  	if (CloseManagementGroup.OverrideResourceEmailNotifications
							  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
									send email
										to		each.FinanceTeamMember.TeamMember.EmailAddress
										from	actor.agent(Employee).EmployeeWorkEmailAddress
										subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYourTeamOf<FinanceTeam>"
										Contents
											"ReassignedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
											"ScheduledBeginDateIs_<ClosePeriodTask.ScheduleForTask.BeginDate>_<ClosePeriodTask.ScheduleForTask.BeginTime>"
											"ScheduledDueDateIs_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
			
								if (CloseManagementGroup.OverrideResourceLandmarkNotifications
								or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
									LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
									if (LocalActor entered)
										send notification
											to	LocalActor
											description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYourTeamOf<FinanceTeam>"
											priority is high
											linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
				else
					LocalTeam = FinanceTeam
					for each SendToTeamMembersRel
						if (each.FinanceTeamMember.TeamMember != actor.agent(Employee).Employee)  
						  	if (CloseManagementGroup.OverrideResourceEmailNotifications
						  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
								send email
									to		each.FinanceTeamMember.TeamMember.EmailAddress
									from	actor.agent(Employee).EmployeeWorkEmailAddress
									subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYourTeamOf<FinanceTeam>"
									Contents
										"ReassignedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
										"ScheduledBeginDateIs_<ClosePeriodTask.ScheduleForTask.BeginDate>_<ClosePeriodTask.ScheduleForTask.BeginTime>"
										"ScheduledDueDateIs_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
	
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
								LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYourTeamOf<FinanceTeam>"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
								
			Exit Rules
				if (TaskLevel.Detail)
					if (TaskOwner entered)
						invoke Create FinanceResourceSchedule
							invoked.HROrganization	= CloseManagementGroup.HROrganization
							invoked.FinanceResource	= TaskOwner.TeamMember
							invoked.BeginDate		= ScheduleForTask.BeginDate
							invoked.BeginTime		= ScheduleForTask.BeginTime
							invoked.DueDate			= ScheduleForTask.DueDate
							invoked.DueTime			= ScheduleForTask.DueTime
							invoked.Description		= TaskName
							invoked.NavigateToThis	= reference to ClosePeriodTask
							invoked.FinancialForm	= FinancialForm
							if (OneTimeTask)
								invoked.CreatedBy	= 3  
							else
								invoked.CreatedBy	= 1  
							if (TaskStatus.InProcess)
								invoked.WorkStatus	= 1 
				if (DoNotRefreshCube)
					invoke QuickUpdateNoRefresh ClosePeriodTaskCubeRel
						fill in fields from this instance
				else
					if (UpdateAnalyticCubeFile)
						invoke Update ClosePeriodTaskCubeRel
							fill in fields from this instance
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each
						invoked.FinanceTeam	= FinanceTeam
						invoked.TaskOwner	= TaskOwner
						invoked.TaskStatus	= TaskStatus

					if (TaskStatus changed)
						invoke UpdateParentStatusDates ParentClosePeriodTask
							invoked.UpdateStatus = true
							invoked.UpdateDates = false		

				if (!OneTimeTask)
					if (PrmScopeOfChange > 0)

						for each ThisTaskAllPeriodsRel
							if (each.TaskOwner		!= PrmTaskOwner
							or  each.FinanceTeam	!= PrmFinanceTeam)
								invoke Reassign each 
									invoked.PrmFinanceTeam		= this instance.FinanceTeam
									invoked.PrmTaskOwner		= this instance.TaskOwner
									invoked.PrmScopeOfChange	= 0 
	
					if (PrmScopeOfChange.AllPeriodsAndTheCloseProcess) 

						invoke Reassign CreatedFrom
							invoked.PrmFinanceTeam		= this instance.FinanceTeam
							invoked.PrmTaskOwner		= this instance.TaskOwner
							invoked.PrmScopeOfChange	= 0 


		ReassignForResource is an Instance Action      
			valid when (AllowResourceReassign)
			default label is "Reassign"
			completion message is "<TaskName>Reassigned"
			Parameters
				CloseManagementGroup 							
				PrmFinanceTeam								is a FinanceTeam
				PrmTaskOwner								is a FinanceTeamMember
			Local Fields
				LocalActor    								is an Actor
			Parameter Rules
				CloseManagementGroup
					default to ClosePeriod.CloseManagementGroup
					cannot be changed
				PrmFinanceTeam
					initial value is FinanceTeam
					required
						"TeamIsRequired"				
				PrmTaskOwner
					initial value is TaskOwner

			Action Rules
				if (PrmFinanceTeam = FinanceTeam)
					constraint (PrmTaskOwner != TaskOwner)
						"OwnershipHasNotBeenChanged.UpdateTheTeamAnd/OrTaskOwnerToReassign."
						
				if (TaskLevel.Detail)
					if (PrmTaskOwner not entered
					and TaskStatus.InProcess)
						confirmation required
							"ThisTaskIsInProcessForThePeriod.BlankingOutTheTaskOwnerWillChangeTheStatusToScheduled.DoYouWantToContinue?"
	
						TaskStatus = 0 
						initialize ActualForTask.BeginDate
						initialize ActualForTask.BeginTime
						initialize StartMetric

					invoke Purge ResourceScheduleRel
					
				FinanceTeam = PrmFinanceTeam
				TaskOwner   = PrmTaskOwner

				if (TaskOwner changed)
					if (TaskOwner entered)
						if (TaskOwner.TeamMember != actor.agent(Employee).Employee) 
							if (CloseManagementGroup.OverrideResourceEmailNotifications
							or  TaskOwner.TeamMember.SendUpdatesAsEmail)
								send email
									to		TaskOwner.TeamMember.EmailAddress
									from	actor.agent(Employee).EmployeeWorkEmailAddress
									subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYou"
									Contents
											"ReassignedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
											"ScheduledBeginDateIs_<ClosePeriodTask.ScheduleForTask.BeginDate>_<ClosePeriodTask.ScheduleForTask.BeginTime>"
											"ScheduledDueDateIs_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
		
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  TaskOwner.TeamMember.SendUpdatesAsNotification)
								LocalActor = TaskOwner.TeamMember.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYou"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
						
						if (old TaskOwner entered)
							if (old TaskOwner.TeamMember != actor.agent(Employee).Employee) 
								if (CloseManagementGroup.OverrideResourceEmailNotifications
								or  old TaskOwner.TeamMember.SendUpdatesAsEmail)
									send email
										to		old TaskOwner.TeamMember.EmailAddress
										from	actor.agent(Employee).EmployeeWorkEmailAddress
										subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>NoLongerAssignedToYou"
										Contents
												if (TaskOwner entered)
													"ReassignedOn_<current timestamp>To_<TaskOwner.TeamMember.PreferredSimplePresentationName>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
												else
													"ReassignedOn_<current timestamp>To_<FinanceTeam>-<FinanceTeam.Description>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
				
								if (CloseManagementGroup.OverrideResourceLandmarkNotifications
								or  old TaskOwner.TeamMember.SendUpdatesAsNotification)
									LocalActor = old TaskOwner.TeamMember.FinanceResourceActor
									if (LocalActor entered)
										send notification
											to	LocalActor
											description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>NoLongerAssignedToYou"
											priority is high
											detail is "ReassignedOn_<current timestamp>To_<DerivedReassignedTo>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
					else
						if (old TaskOwner.TeamMember != actor.agent(Employee).Employee) 
							if (CloseManagementGroup.OverrideResourceEmailNotifications
							or  old TaskOwner.TeamMember.SendUpdatesAsEmail)
								send email
									to		old TaskOwner.TeamMember.EmailAddress
									from	actor.agent(Employee).EmployeeWorkEmailAddress
									subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>NoLongerAssignedToYou"
									Contents
											if (TaskOwner entered)
												"ReassignedOn_<current timestamp>To_<TaskOwner.TeamMember.PreferredSimplePresentationName>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
											else
												"ReassignedOn_<current timestamp>To_<FinanceTeam>-<FinanceTeam.Description>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
			
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  old TaskOwner.TeamMember.SendUpdatesAsNotification)
								LocalActor = old TaskOwner.TeamMember.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>NoLongerAssignedToYou"
										priority is high
										detail is "ReassignedOn_<current timestamp>To_<DerivedReassignedTo>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"

						LocalTeam = FinanceTeam
						for each SendToTeamMembersRel
							if ((each.FinanceTeamMember.TeamMember != actor.agent(Employee).Employee)  
							and (each.FinanceTeamMember.TeamMember != old TaskOwner.TeamMember)) 
							  	if (CloseManagementGroup.OverrideResourceEmailNotifications
							  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
									send email
										to		each.FinanceTeamMember.TeamMember.EmailAddress
										from	actor.agent(Employee).EmployeeWorkEmailAddress
										subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYourTeamOf<FinanceTeam>"
										Contents
											"ReassignedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
											"ScheduledBeginDateIs_<ClosePeriodTask.ScheduleForTask.BeginDate>_<ClosePeriodTask.ScheduleForTask.BeginTime>"
											"ScheduledDueDateIs_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
			
								if (CloseManagementGroup.OverrideResourceLandmarkNotifications
								or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
									LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
									if (LocalActor entered)
										send notification
											to	LocalActor
											description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYourTeamOf<FinanceTeam>"
											priority is high
											linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
				else
					LocalTeam = FinanceTeam
					for each SendToTeamMembersRel
						if (each.FinanceTeamMember.TeamMember != actor.agent(Employee).Employee)  
						  	if (CloseManagementGroup.OverrideResourceEmailNotifications
						  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
								send email
									to		each.FinanceTeamMember.TeamMember.EmailAddress
									from	actor.agent(Employee).EmployeeWorkEmailAddress
									subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYourTeamOf<FinanceTeam>"
									Contents
										"ReassignedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
										"ScheduledBeginDateIs_<ClosePeriodTask.ScheduleForTask.BeginDate>_<ClosePeriodTask.ScheduleForTask.BeginTime>"
										"ScheduledDueDateIs_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
	
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
								LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYourTeamOf<FinanceTeam>"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
								
			Exit Rules
				if (TaskLevel.Detail)
					if (TaskOwner entered)
						invoke Create FinanceResourceSchedule
							invoked.HROrganization	= CloseManagementGroup.HROrganization
							invoked.FinanceResource	= TaskOwner.TeamMember
							invoked.BeginDate		= ScheduleForTask.BeginDate
							invoked.BeginTime		= ScheduleForTask.BeginTime
							invoked.DueDate			= ScheduleForTask.DueDate
							invoked.DueTime			= ScheduleForTask.DueTime
							invoked.Description		= TaskName
							invoked.NavigateToThis	= reference to ClosePeriodTask
							invoked.FinancialForm	= FinancialForm
							if (OneTimeTask)
								invoked.CreatedBy = 3 
							else
								invoked.CreatedBy = 1  
							if (TaskStatus.InProcess)
								invoked.WorkStatus = 1 
					if (UpdateAnalyticCubeFile)									
						invoke Update ClosePeriodTaskCubeRel
							fill in fields from this instance
					for each ClosePeriodTaskFlatDetailRel
						invoke Update each
							invoked.FinanceTeam	= FinanceTeam
							invoked.TaskOwner	= TaskOwner
							invoked.TaskStatus	= TaskStatus

					if (TaskStatus changed)
						invoke UpdateParentStatusDates ParentClosePeriodTask
							invoked.UpdateStatus = true
							invoked.UpdateDates = false		


		ReassignToTeam is an Instance Action
			valid when (AllowReassignToTeam)
			completion message is "<TaskName>AssignedToTheTeamOf<FinanceTeam>"
			Action Rules
				invoke Purge ResourceScheduleRel
				TaskOwner = blank
				if (TaskStatus.InProcess)
					TaskStatus = 0 
					initialize ActualForTask.BeginDate
					initialize ActualForTask.BeginTime
					initialize StartMetric

				LocalTeam = FinanceTeam
				for each SendToTeamMembersRel
					if (each.FinanceTeamMember.TeamMember != actor.agent(Employee).Employee)  
					  	if (CloseManagementGroup.OverrideResourceEmailNotifications
					  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
							send email
								to		each.FinanceTeamMember.TeamMember.EmailAddress
								from	actor.agent(Employee).EmployeeWorkEmailAddress
								subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedBackToTeamOf<FinanceTeam>"
								Contents
									"ReassignedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
									"ScheduledBeginDateIs_<ClosePeriodTask.ScheduleForTask.BeginDate>_<ClosePeriodTask.ScheduleForTask.BeginTime>"
									"ScheduledDueDateIs_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"

						if (CloseManagementGroup.OverrideResourceLandmarkNotifications
						or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
							LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
							if (LocalActor entered)
								send notification
									to	LocalActor	
									description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedBackToTeamOf<FinanceTeam>"
									priority is high
									linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 

			Exit Rules
				if (UpdateAnalyticCubeFile)
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each
						invoked.TaskOwner		= TaskOwner
						invoked.TaskStatus		= TaskStatus

				if (TaskStatus changed)
					invoke UpdateParentStatusDates ParentClosePeriodTask
						invoked.UpdateStatus	= true
						invoked.UpdateDates		= false		

			
		Reopen is an Instance Action 			
			valid when (AllowReopen)
			subject is ReopenTask
			Parameters
				CloseManagementGroup
				PrmComment 					is Alpha size up to 500
				PrmReopenDependents			is Boolean
				PrmFinanceTeam				is a FinanceTeam
				PrmTaskOwner				is a FinanceTeamMember
			Local Fields
				LocalActor    				is an Actor	
			Parameter Rules
				CloseManagementGroup
					default to ClosePeriod.CloseManagementGroup
				PrmFinanceTeam
					initial value is FinanceTeam
					default to FinanceTeam
					required
						"TeamIsRequired"				
				PrmTaskOwner
					initial value is TaskOwner
					default to TaskOwner
			Action Rules
				if (CloseManagementGroup.ReopenTaskReasonCodeRequired			
				and IsNotTaskForPeriodReconciliations)
					constraint (reason code entered)			
						"ReasonCodeIsRequiredForReopeningTheTask"												

				if (OneTimeTaskNeedsApproval)
					TaskStatus = TaskStatus.Scheduled
					
					initialize LocalApprovalLevel
					include GetNextOneTimeApprovalLevel
					OneTimeTaskApprovalInfo.ApprovalLevel	= LocalApprovalLevel
					OneTimeTaskApprovalInfo.Approver		= LocalApprover
					OneTimeTaskApprovalInfo.ApproverTeam	= LocalApproverTeam
					LocalClosePeriodTask = ClosePeriodTask
					include InitiateOneTimeTaskApprovalFlow
				else
					if (TaskStatus.Closed)
						TaskStatus = TaskStatus.InProcess
					else
						if (TaskOwner not entered)
							TaskStatus = TaskStatus.Scheduled
						else
							for each this instance.audit log records
								if (each.action = "StartWork"
								or  each.action = "StartWorkLate")
									TaskStatus = 2 
									end for each


							if (TaskStatus.Voided)
								TaskStatus = TaskStatus.Scheduled
						
				if (TaskStatus > TaskStatus.Scheduled)
					constraint (PrmTaskOwner entered)
						"TaskBeingReopenedWithAnInProcessStatus;TaskMustHaveATaskOwner"
						

				FinanceTeam = PrmFinanceTeam
				TaskOwner   = PrmTaskOwner
				Reopened	= true
				initialize DueMetric
				initialize ActualForTask.DueDate
				initialize ActualForTask.DueTime
				initialize ActualForTask.LevelOfEffort		

				if (RequiresApproval)
					ApprovalMetric = ApprovalMetric.FutureApproval
					initialize ApprovalLevel
					initialize Approver
					initialize ApproverTeam		
					 
				if (ScheduleForTask.DueDate < current corporate date)
					TheClose = TheClose.OverDue
				else
					TheClose = TheClose.OnTarget
						
				if (!TaskOwner changed
				and  TaskOwner.TeamMember != actor.agent(Employee).Employee)  
					if (CloseManagementGroup.OverrideResourceEmailNotifications
					or  TaskOwner.TeamMember.SendUpdatesAsEmail)
						send email
							to		TaskOwner.TeamMember.EmailAddress
							from	actor.agent(Employee).EmployeeWorkEmailAddress
							subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasReopened"
							Contents
									"Reopened:<current timestamp>"
									"By:<actor.agent(Employee).Name.PreferredSimplePresentationName>"
									"Reason:<reason code>_<reason code.Description>"
									"Comment:<PrmComment>"
	
					if (CloseManagementGroup.OverrideResourceLandmarkNotifications
					or  TaskOwner.TeamMember.SendUpdatesAsNotification)
						LocalActor = TaskOwner.TeamMember.FinanceResourceActor	
						if (LocalActor entered)
							send notification
								to	LocalActor
								description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasReopened"
								priority is very high
								linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
									
				if (TaskOwner changed
				and TaskOwner.TeamMember != actor.agent(Employee).Employee)  
					if (CloseManagementGroup.OverrideResourceEmailNotifications
					or  TaskOwner.TeamMember.SendUpdatesAsEmail)
						send email
							to		TaskOwner.TeamMember.EmailAddress
							from	actor.agent(Employee).EmployeeWorkEmailAddress
							subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYou"
							Contents
									"ThisTaskHasBeenReopened"
									"Reopened:<current timestamp>"
									"By:<actor.agent(Employee).Name.PreferredSimplePresentationName>"
									"Reason:<reason code>_<reason code.Description>"
									"Comment:<PrmComment>"
									"TaskOwnerWas:<old TaskOwner.TeamMember.PreferredSimplePresentationName>"
	
					if (CloseManagementGroup.OverrideResourceLandmarkNotifications
					or  TaskOwner.TeamMember.SendUpdatesAsNotification)
						LocalActor = TaskOwner.TeamMember.FinanceResourceActor
						if (LocalActor entered)
							send notification
								to	LocalActor
								description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasReopened"
								priority is very high
								linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 

				if (TaskOwner not entered)
					LocalTeam = FinanceTeam
					for each SendToTeamMembersRel
						if (each.FinanceTeamMember.TeamMember != actor.agent(Employee).Employee)  
						  	if (CloseManagementGroup.OverrideResourceEmailNotifications
						  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
								send email
									to		each.FinanceTeamMember.TeamMember.EmailAddress
									from	TaskOwner.TeamMember.EmailAddress
									subject "TeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReopened"
									Contents
										"Reopened:<current timestamp>"
										"By:<actor.agent(Employee).Name.PreferredSimplePresentationName>"
										"Reason:<reason code>_<reason code.Description>"
										"Comment:<PrmComment>"
	
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
								LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"TeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReopened"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 

			Exit Rules

				if (IsNotTaskForPeriodReconciliations)
					invoke Create TaskReasonCodeUsage
						invoked.CloseManagementGroup	= CloseManagementGroup
						invoked.ClosePeriod				= ClosePeriod
						invoked.ClosePeriodTask			= ClosePeriodTask
						invoked.ReasonCode				= reason code
						invoked.Description				= reason code.Description
						invoked.Type					= 2 
						invoked.Comment					= PrmComment
				
				if (TaskOwner entered)
					invoke Create FinanceResourceSchedule
						invoked.HROrganization	= CloseManagementGroup.HROrganization
						invoked.FinanceResource	= TaskOwner.TeamMember
						if (EstimateForTask.BeginDate entered)
							invoked.BeginDate	= EstimateForTask.BeginDate
							invoked.BeginTime	= EstimateForTask.BeginTime
						else
							invoked.BeginDate	= ScheduleForTask.BeginDate
							invoked.BeginTime	= ScheduleForTask.BeginTime
						if (EstimateForTask.DueDate entered)
							invoked.DueDate		= EstimateForTask.DueDate
							invoked.DueTime		= EstimateForTask.DueTime
						else
							invoked.DueDate		= ScheduleForTask.DueDate
							invoked.DueTime		= ScheduleForTask.DueTime
						invoked.Description		= TaskName
						invoked.NavigateToThis	= reference to ClosePeriodTask
						if (TaskStatus.Scheduled)
							invoked.WorkStatus	= 0  
						else
							invoked.WorkStatus	= 1  
						invoked.FinancialForm	= FinancialForm
						invoked.CreatedBy		= 1  

				if (UpdateAnalyticCubeFile)
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance
					
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						invoked.TaskStatus	= TaskStatus 	
						invoked.FinanceTeam	= FinanceTeam
						invoked.TaskOwner	= TaskOwner 	

				if (PrmReopenDependents)
					for each ClosedDependentRel
						invoke ReopenDependentTasks each.ClosePeriodTask
							invoked.PrmDependencyType = each.DependencyType

				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateStatus = true

		ReopenForResource is an Instance Action      
            valid when (AllowResourceReopen)
            default label is "Reopen"
            completion message is "<TaskName>Reopened"
            subject is ReopenTask
            
            Parameters
                CloseManagementGroup
                PrmComment               	is Alpha size up to 500
                PrmReopenDependents       	is Boolean
                PrmFinanceTeam             	is a FinanceTeam
                PrmTaskOwner              	is a FinanceTeamMember
            Local Fields
            	LocalActor    				is an Actor    
            Parameter Rules
                CloseManagementGroup
                    default to ClosePeriod.CloseManagementGroup
                PrmFinanceTeam
                    initial value is FinanceTeam
                    required
                        "TeamIsRequired"                
                PrmTaskOwner
                    initial value is TaskOwner
            Action Rules
                if (CloseManagementGroup.ReopenTaskReasonCodeRequired            
                and IsNotTaskForPeriodReconciliations)
                    constraint (reason code entered)            
                        "ReasonCodeIsRequiredForReopeningTheTask"                                                

                if (OneTimeTaskNeedsApproval)
                    TaskStatus = TaskStatus.Scheduled
                    
                    initialize LocalApprovalLevel
                    include GetNextOneTimeApprovalLevel
                    OneTimeTaskApprovalInfo.ApprovalLevel  	= LocalApprovalLevel
                    OneTimeTaskApprovalInfo.Approver        = LocalApprover
                    OneTimeTaskApprovalInfo.ApproverTeam    = LocalApproverTeam
                    LocalClosePeriodTask = ClosePeriodTask
                    include InitiateOneTimeTaskApprovalFlow
                else
                    if (TaskStatus.Closed)
                        TaskStatus = TaskStatus.InProcess
                    else
                        if (TaskOwner not entered)
                            TaskStatus = TaskStatus.Scheduled
                        else
                            for each this instance.audit log records
                                if (each.action = "StartWork"
                                or  each.action = "StartWorkLate")
                                    TaskStatus = 2 
                                    end for each



                            if (TaskStatus.Voided)
                                TaskStatus = TaskStatus.Scheduled
                        
                if (TaskStatus > TaskStatus.Scheduled)
                    constraint (PrmTaskOwner entered)
                        "TaskBeingReopenedWithAnInProcessStatus;TaskMustHaveATaskOwner"
                
                FinanceTeam = PrmFinanceTeam
                TaskOwner   = PrmTaskOwner
                Reopened    = true
                initialize DueMetric
                initialize ActualForTask.DueDate
                initialize ActualForTask.DueTime
                initialize ActualForTask.LevelOfEffort        

                if (RequiresApproval)
                    ApprovalMetric = ApprovalMetric.FutureApproval
                    initialize ApprovalLevel
                    initialize Approver
                    initialize ApproverTeam        
                     
                if (ScheduleForTask.DueDate < current corporate date)
                    TheClose = TheClose.OverDue
                else
                    TheClose = TheClose.OnTarget
                        
                if (!TaskOwner changed
                and TaskOwner.TeamMember != actor.agent(FinanceResource).FinanceResource)  
                    if (CloseManagementGroup.OverrideResourceEmailNotifications
                    or  TaskOwner.TeamMember.SendUpdatesAsEmail)
                        send email
                            to        TaskOwner.TeamMember.EmailAddress
                            from    actor.agent(FinanceResource).EmailAddress
                            subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasReopened"
                            Contents
                                    "Reopened:<current timestamp>"
                                    "By:<actor.agent(FinanceResource).FinanceResource.PreferredSimplePresentationName>"
                                    "Reason:<reason code>_<reason code.Description>"
                                    "Comment:<PrmComment>"
                            
                    if (CloseManagementGroup.OverrideResourceLandmarkNotifications
                    or  TaskOwner.TeamMember.SendUpdatesAsNotification)
                    	LocalActor = TaskOwner.TeamMember.FinanceResourceActor
                    	if (LocalActor entered)
                        	send notification
                            	to	LocalActor
                            	description is    "Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasReopened"
                            	priority is very high
								linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
                                    
                if (TaskOwner changed
                and TaskOwner.TeamMember != actor.agent(FinanceResource).FinanceResource)  
                    if (CloseManagementGroup.OverrideResourceEmailNotifications
                    or  TaskOwner.TeamMember.SendUpdatesAsEmail)
                        send email
                            to        TaskOwner.TeamMember.EmailAddress
                            from    actor.agent(FinanceResource).EmailAddress
                            subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReassignedToYou"
                            Contents
                                    "ThisTaskHasBeenReopened"
                                    "Reopened:<current timestamp>"
                                    "By:<actor.agent(FinanceResource).FinanceResource.PreferredSimplePresentationName>"
                                    "Reason:<reason code>_<reason code.Description>"
                                    "Comment:<PrmComment>"
                                    "TaskOwnerWas:<old TaskOwner.TeamMember.PreferredSimplePresentationName>"
    
                    if (CloseManagementGroup.OverrideResourceLandmarkNotifications
                    or  TaskOwner.TeamMember.SendUpdatesAsNotification)
                    	LocalActor = TaskOwner.TeamMember.FinanceResourceActor
                    	if (LocalActor entered)
                        	send notification
                            	to	LocalActor
                            	description is    "Task<ClosePeriodTask.TaskName>For<ClosePeriod>WasReopenedAndAssignedToYou"
                            	priority is very high
								linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 

                if (TaskOwner not entered)
                    LocalTeam = FinanceTeam
                    for each SendToTeamMembersRel
						if (each.FinanceTeamMember.TeamMember != actor.agent(FinanceResource).FinanceResource)  
							if (CloseManagementGroup.OverrideResourceEmailNotifications
                        	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
								send email
									to each.FinanceTeamMember.TeamMember.EmailAddress
									from    TaskOwner.TeamMember.EmailAddress
									subject "TeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReopened"
									Contents
										"Reopened:<current timestamp>"
										"By:<actor.agent(FinanceResource).FinanceResource.PreferredSimplePresentationName>"
										"Reason:<reason code>_<reason code.Description>"
										"Comment:<PrmComment>"

							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
								LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to LocalActor
										description is    "TeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>HasBeenReopened"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 

            Exit Rules

                if (IsNotTaskForPeriodReconciliations)
                    invoke Create TaskReasonCodeUsage
                        invoked.CloseManagementGroup   	= CloseManagementGroup
                        invoked.ClosePeriod       		= ClosePeriod
                        invoked.ClosePeriodTask       	= ClosePeriodTask
                        invoked.ReasonCode           	= reason code
                        invoked.Description            	= reason code.Description
                        invoked.Type                	= 2 
                        invoked.Comment                	= PrmComment
                
                if (TaskOwner entered)
                    invoke Create FinanceResourceSchedule
                        invoked.HROrganization	= CloseManagementGroup.HROrganization
                        invoked.FinanceResource = TaskOwner.TeamMember
                        if (EstimateForTask.BeginDate entered)
                            invoked.BeginDate = EstimateForTask.BeginDate
                            invoked.BeginTime = EstimateForTask.BeginTime
                        else
                            invoked.BeginDate = ScheduleForTask.BeginDate
                            invoked.BeginTime = ScheduleForTask.BeginTime
                        if (EstimateForTask.DueDate entered)
                            invoked.DueDate = EstimateForTask.DueDate
                            invoked.DueTime = EstimateForTask.DueTime
                        else
                            invoked.DueDate = ScheduleForTask.DueDate
                            invoked.DueTime = ScheduleForTask.DueTime
                        invoked.Description = TaskName
                        invoked.NavigateToThis = reference to ClosePeriodTask
                        if (TaskStatus.Scheduled)
                            invoked.WorkStatus = 0  
                        else
                            invoked.WorkStatus = 1  
                        invoked.FinancialForm = FinancialForm
                        invoked.CreatedBy = 1  









				if (UpdateAnalyticCubeFile)
                	invoke Update ClosePeriodTaskCubeRel
                    	fill in fields from this instance
                    
                for each ClosePeriodTaskFlatDetailRel
                    invoke Update each 
                        invoked.TaskStatus		= TaskStatus
                        invoked.FinanceTeam    	= FinanceTeam
                        invoked.TaskOwner    	= TaskOwner     

                if (PrmReopenDependents)
                    for each ClosedDependentRel
                        invoke ReopenDependentTasks each.ClosePeriodTask
                            invoked.PrmDependencyType = each.DependencyType

                invoke UpdateParentStatusDates ParentClosePeriodTask
                    invoked.UpdateStatus = true
                                
					
		ReopenDependentTasks is an Instance Action
			restricted
			Parameters
				PrmDependencyType	is Numeric 2
					States
						CannotStart			value is 01
						CannotComplete		value is 02	
						
			Action Rules
				if (TaskStatus.PendingApproval)
					cancel CloseApproval process

				if (RequiresApproval)
					ApprovalMetric = ApprovalMetric.FutureApproval
					initialize ApprovalLevel
					initialize Approver
					initialize ApproverTeam		
					 
				if (PrmDependencyType.CannotStart)
					TaskStatus = TaskStatus.Scheduled
				else
					TaskStatus = TaskStatus.InProcess
					
				if (ScheduleForTask.DueDate < current corporate date)
					TheClose = TheClose.OverDue
				else
					TheClose = TheClose.OnTarget
						
				initialize DueMetric
				initialize ActualForTask.DueDate
				initialize ActualForTask.DueTime
				initialize ActualForTask.LevelOfEffort		
			
			Exit Rules
				invoke Create FinanceResourceSchedule
					invoked.HROrganization	= CloseManagementGroup.HROrganization
					invoked.FinanceResource	= TaskOwner.TeamMember
					if (EstimateForTask.BeginDate entered)
						invoked.BeginDate	= EstimateForTask.BeginDate
						invoked.BeginTime	= EstimateForTask.BeginTime
					else
						invoked.BeginDate	= ScheduleForTask.BeginDate
						invoked.BeginTime	= ScheduleForTask.BeginTime
					if (EstimateForTask.DueDate entered)
						invoked.DueDate		= EstimateForTask.DueDate
						invoked.DueTime		= EstimateForTask.DueTime
					else
						invoked.DueDate		= ScheduleForTask.DueDate
						invoked.DueTime		= ScheduleForTask.DueTime
					invoked.Description		= TaskName
					invoked.NavigateToThis	= reference to ClosePeriodTask
					if (TaskStatus.Scheduled)
						invoked.WorkStatus	= 0  
					else
						invoked.WorkStatus	= 1  
					invoked.FinancialForm	= FinancialForm
					invoked.CreatedBy		= 1  

				if (UpdateAnalyticCubeFile)
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance
					
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						invoked.TaskStatus	= TaskStatus
 	
		UpdateSummaryScheduleDates is an Instance Action
			restricted
			run in background
			Action Rules

				invoke UpdateEachSummaryLevel
			Exit Rules

				for each SummaryTaskDescendantsRel
					invoke UpdateEachSummaryLevel each


		UpdateEachSummaryLevel is an Instance Action
			restricted
			run in background
			Action Rules		
				for each DetailTaskDescendantsRel
					if (each.ScheduleForTask.BeginDate < LocalBeginDate
					or  LocalBeginDate not entered)
						LocalBeginDate = each.ScheduleForTask.BeginDate
						LocalBeginTime = each.ScheduleForTask.BeginTime
					else
						if (each.ScheduleForTask.BeginDate = LocalBeginDate
						and each.ScheduleForTask.BeginTime < LocalBeginTime)
							LocalBeginTime = each.ScheduleForTask.BeginTime
							
					if (each.ScheduleForTask.DueDate > LocalDueDate)
						LocalDueDate = each.ScheduleForTask.DueDate
						LocalDueTime = each.ScheduleForTask.DueTime
					else
						if (each.ScheduleForTask.DueDate = LocalDueDate
						and each.ScheduleForTask.DueTime > LocalDueTime)
							LocalDueTime = each.ScheduleForTask.DueTime
							
					if (each.DueTimeSensitive)
						HasDueTimeSensitiveDescendants = true
					
				ScheduleForTask.BeginDate = LocalBeginDate
				ScheduleForTask.BeginTime = LocalBeginTime
				ScheduleForTask.DueDate = LocalDueDate
				ScheduleForTask.DueTime = LocalDueTime
				ScheduleForTask.LevelOfEffort = DerivedScheduledHours
											
		UpdateEstimate is an Instance Action
			valid when (AllowToUpdateEstimate)	
			subject is UpdatingTaskEstimate
			completion message is "UpdateComplete"

			Parameters
				PrmPercentComplete				is Percent 2
				PrmComment						is Alpha size up to 250
				PrmNewBeginDate					is Date
				PrmNewBeginTime					is Time
				PrmNewDueDate					is Date
				PrmNewDueTime					is Time
				PrmNewLevelOfEffort				is Unsigned Decimal size 10.2
				PrmReason						is Alpha size up to 500 
				PrmAlreadyUpdatedSchedule		is Boolean
				
			Parameter Rules
				PrmNewBeginDate
					initial value is DisplayBeginDate 
					default to DisplayBeginDate
				PrmNewBeginTime
					initial value is DisplayBeginTime 				
					default to DisplayBeginTime
				PrmNewDueDate
					initial value is DisplayDueDate 
					default to DisplayDueDate
				PrmNewDueTime
					initial value is DisplayDueTime 				
					default to DisplayDueTime
				PrmNewLevelOfEffort
					initial value is DisplayLevelOfEffort
					default to DisplayLevelOfEffort
			Action Rules
			
				if (PrmNewBeginDate		!= DisplayBeginDate
				or  PrmNewBeginTime		!= DisplayBeginTime
				or  PrmNewDueDate		!= DisplayDueDate
				or  PrmNewDueTime		!= DisplayDueTime
				or  PrmNewLevelOfEffort	!= DisplayLevelOfEffort)
						
					constraint (PrmNewBeginDate <= PrmNewDueDate)
						"MustBeginTaskBeforeItIsDue"
	
					if (PrmNewBeginDate = PrmNewDueDate)
						constraint (PrmNewBeginTime < PrmNewDueTime) 
							"MustBeginTaskBeforeItIsDue"
	
					if (CloseManagementGroup.EstimateReasonCodeRequired)			
						constraint (reason code entered)			
							"ReasonCodeIsRequiredForUpdatingEstimates"												
	
					EstimateForTask.BeginDate = PrmNewBeginDate
					EstimateForTask.BeginTime = PrmNewBeginTime				
					EstimateForTask.DueDate = PrmNewDueDate
					EstimateForTask.DueTime = PrmNewDueTime
					EstimateForTask.LevelOfEffort = PrmNewLevelOfEffort
				else
					if (PrmPercentComplete not entered)
						constraint (PrmComment entered)
							"NoChangesHaveBeenMade"
						
			Exit Rules
				if  (TaskStatus.InProcess
				and (PrmPercentComplete entered
				or   PrmComment entered))
					invoke Create TaskPercentComplete
						invoked.CloseManagementGroup	= CloseManagementGroup
						invoked.ClosePeriod				= ClosePeriod
						invoked.ClosePeriodTask			= ClosePeriodTask
						invoked.PercentComplete			= PrmPercentComplete
						invoked.Comment					= PrmComment
						
				if (reason code entered
				or  PrmReason entered)
					invoke Create TaskReasonCodeUsage
						invoked.CloseManagementGroup	= CloseManagementGroup
						invoked.ClosePeriod				= ClosePeriod
						invoked.ClosePeriodTask			= ClosePeriodTask
						invoked.ReasonCode				= reason code
						invoked.Description				= reason code.Description
						invoked.Type					= 9 
						invoked.Comment					= PrmReason
				if (not PrmAlreadyUpdatedSchedule)
					invoke Update FinanceResourceScheduleRel
						invoked.BeginDate	= DisplayBeginDate
						invoked.BeginTime	= DisplayBeginTime
						invoked.DueDate		= DisplayDueDate	
						invoked.DueTime		= DisplayDueTime	
				if (UpdateAnalyticCubeFile)		
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance
				invoke UpdateParentStatusDates ParentClosePeriodTask
					invoked.UpdateDates		= true
					invoked.NewBeginDate	= PrmNewBeginDate
					invoked.NewBeginTime	= PrmNewBeginTime
					invoked.NewDueDate		= PrmNewDueDate
					invoked.NewDueTime		= PrmNewDueTime
					invoked.DateToProcess	= 1
											
		UpdateParentStatusDates is an Instance Action
			restricted
			Parameters
				UpdateStatus		is Boolean
				UpdateDates			is Boolean 
				NewBeginDate		is Date
				NewBeginTime		is Time
				NewDueDate			is Date
				NewDueTime			is Time
				DateToProcess		is Numeric 1
					States
						Estimate	value is 1
						Actual		value is 2
						Schedule	value is 3 
			Local Fields
				ProcessDatesHaveChanged		is Boolean	
			Action Rules
				if (UpdateStatus)
					if (InProcessTaskDescendantsRel exists)
						TaskStatus = TaskStatus.InProcess
					else 
						if (PendingApprovalTaskDescendantsRel exists)
							if (ScheduledTaskDescendantsRel exists)
								TaskStatus = TaskStatus.InProcess
							else
								TaskStatus = TaskStatus.PendingApproval
						else
							if (ClosedTaskDescendantsRel exists)
								if (ScheduledTaskDescendantsRel exists)
									TaskStatus = TaskStatus.InProcess
								else
									TaskStatus = TaskStatus.Closed
							else
								if (VoidTaskDescendantsRel exists)
									if (ScheduledTaskDescendantsRel exists)
										TaskStatus = TaskStatus.InProcess
									else
										TaskStatus = TaskStatus.Voided
								else
									TaskStatus = TaskStatus.Scheduled

					if (TaskStatus changed
					and old TaskStatus.Closed)
						initialize ActualForTask.DueDate
						initialize ActualForTask.DueTime
						initialize ActualForTask.LevelOfEffort

					if (TaskStatus changed
					and TaskStatus.Scheduled)
						initialize ActualForTask.BeginDate
						initialize ActualForTask.BeginTime

				if (UpdateDates)
					if (DateToProcess.Estimate)
						if (CountOfCloseTaskDescendants = 1) 
							EstimateForTask.BeginDate = NewBeginDate
							EstimateForTask.BeginTime = NewBeginTime
							EstimateForTask.DueDate = NewDueDate
							EstimateForTask.DueTime = NewDueTime
							ProcessDatesHaveChanged = true
						else
							if (EstimateForTask.BeginDate > NewBeginDate
							or  EstimateForTask.BeginDate not entered)
								EstimateForTask.BeginDate = NewBeginDate
								EstimateForTask.BeginTime = NewBeginTime
								ProcessDatesHaveChanged = true
							else
								if (EstimateForTask.BeginDate = NewBeginDate
								and	EstimateForTask.BeginTime > NewBeginTime)
									EstimateForTask.BeginTime = NewBeginTime
									ProcessDatesHaveChanged = true
							if (EstimateForTask.DueDate < NewDueDate)
								EstimateForTask.DueDate = NewDueDate
								EstimateForTask.DueTime = NewDueTime
								ProcessDatesHaveChanged = true
							else
								if (EstimateForTask.DueDate = NewDueDate
								and	EstimateForTask.DueTime > NewDueTime)
									EstimateForTask.DueTime = NewDueTime
									ProcessDatesHaveChanged = true

						EstimateForTask.LevelOfEffort = DerivedEstimatedHours
							
					if (DateToProcess.Actual)
						if (CountOfCloseTaskDescendants = 1) 
							if (NewBeginDate entered)
								ActualForTask.BeginDate = NewBeginDate
								ActualForTask.BeginTime = NewBeginTime
							if (NewDueDate entered)
								ActualForTask.DueDate = NewDueDate
								ActualForTask.DueTime = NewDueTime
							ProcessDatesHaveChanged = true
						else
							if (NewBeginDate entered)
								if (ActualForTask.BeginDate > NewBeginDate
								or  ActualForTask.BeginDate not entered)
									ActualForTask.BeginDate = NewBeginDate
									ActualForTask.BeginTime = NewBeginTime
									ProcessDatesHaveChanged = true
								else
									if (ActualForTask.BeginDate = NewBeginDate
									and	ActualForTask.BeginTime > NewBeginTime)
										ActualForTask.BeginTime = NewBeginTime
										ProcessDatesHaveChanged = true

								if (old ActualForTask.BeginDate not entered)
									if (ScheduleForTask.BeginDate = current corporate date)
										StartMetric = StartMetric.StartedOnTime 
									else						
										if (ScheduleForTask.BeginDate > current corporate date)
											StartMetric = StartMetric.StartedEarly 
										else
											StartMetric = StartMetric.StartedLate		
							
						if (TaskStatus.Closed)  
							if (NewDueDate entered)
								if (ActualForTask.DueDate < NewDueDate)
									ActualForTask.DueDate = NewDueDate
									ActualForTask.DueTime = NewDueTime
									ProcessDatesHaveChanged = true
								else
									if (ActualForTask.DueDate = NewDueDate
									and	ActualForTask.DueTime > NewDueTime)
										ActualForTask.DueTime = NewDueTime
										ProcessDatesHaveChanged = true

							if (ScheduleForTask.DueDate = current corporate date)
								DueMetric = DueMetric.CompletedOnTime 
							else
								if (ScheduleForTask.DueDate < current corporate date)
									DueMetric = DueMetric.CompletedLate
								else
									DueMetric = DueMetric.CompletedEarly  

							ActualForTask.LevelOfEffort = DerivedActualHours
						
							if (ScheduleForTask.LevelOfEffort = 0
							and ActualForTask.LevelOfEffort = 0)
								EffortMetric = EffortMetric.NotEntered
							else
								if (ScheduleForTask.LevelOfEffort = ActualForTask.LevelOfEffort)
									EffortMetric = EffortMetric.AsExpected
								else
									if (ScheduleForTask.LevelOfEffort < ActualForTask.LevelOfEffort)
										EffortMetric = EffortMetric.MoreThanExpected
									else
										EffortMetric = EffortMetric.LessThanExpected
							
							include CloseNotificationsForSummaryTasks
						else
							initialize ActualForTask.DueDate
							initialize ActualForTask.DueTime
							initialize ActualForTask.LevelOfEffort
							initialize DueMetric

					if (DateToProcess.Schedule)
						if (CountOfCloseTaskDescendants = 1) 
							ScheduleForTask.BeginDate = NewBeginDate
							ScheduleForTask.BeginTime = NewBeginTime
							ScheduleForTask.DueDate = NewDueDate
							ScheduleForTask.DueTime = NewDueTime
							ProcessDatesHaveChanged = true
						else
							if (ScheduleForTask.BeginDate > NewBeginDate
							or  ScheduleForTask.BeginDate not entered)
								ScheduleForTask.BeginDate = NewBeginDate
								ScheduleForTask.BeginTime = NewBeginTime
								ProcessDatesHaveChanged = true
							else
								if (ScheduleForTask.BeginDate = NewBeginDate
								and	ScheduleForTask.BeginTime > NewBeginTime)
									ScheduleForTask.BeginTime = NewBeginTime
									ProcessDatesHaveChanged = true
							if (ScheduleForTask.DueDate < NewDueDate)
								ScheduleForTask.DueDate = NewDueDate
								ScheduleForTask.DueTime = NewDueTime
								ProcessDatesHaveChanged = true
							else
								if (ScheduleForTask.DueDate = NewDueDate
								and	ScheduleForTask.DueTime > NewDueTime)
									ScheduleForTask.DueTime = NewDueTime
									ProcessDatesHaveChanged = true

						ScheduleForTask.LevelOfEffort = DerivedScheduledHours
						
				if (ProcessDatesHaveChanged
				or  TaskStatus changed)	
					if (ParentClosePeriodTask > 0)
						invoke UpdateParentStatusDates ParentClosePeriodTask
							invoked.UpdateStatus	= UpdateStatus
							invoked.UpdateDates		= UpdateDates
							invoked.NewBeginDate	= NewBeginDate
							invoked.NewBeginTime	= NewBeginTime
							invoked.NewDueDate		= NewDueDate
							invoked.NewDueTime		= NewDueTime
							invoked.DateToProcess	= DateToProcess						
				
		CreatePrereqsFromSchedule is an Instance Action
			restricted
			run in background
			Action Rules
				for each PrereqDetailDescendantsRel  
					LocalDetailTask = each.ClosePeriodTask
					for each each.CreatedFrom.PrerequisiteTaskRel  
						LocalCreatedFrom = each.CloseTaskPrerequisite.PrerequisiteTask
						if (ClosePeriodTaskHasPrerequisite)
							invoke Create ClosePeriodTaskPrerequisite
								invoked.CloseManagementGroup							= CloseManagementGroup
								invoked.ClosePeriod										= ClosePeriod
								invoked.ClosePeriodTask									= LocalDetailTask
								invoked.ClosePeriodTaskPrerequisite.PrerequisiteTask	= ClosePrereqClosePeriodTaskRel.ClosePeriodTask
								invoked.DependencyType									= each.DependencyType
								invoked.WaitForApproval									= each.WaitForApproval
								invoked.Notes											= each.Notes

		Attachment is an Instance Action
			valid when (AllowAttachment)
			default label is "Attachment"
			completion message is "CompletedAttachment"
			Parameters
				PrmDescription					is Alpha 60
				PrmNotes						is Text
				PrmAttachment					is a Attachment
				PrmLinkToDocumentation			is an URL			
			Parameter Rules
				PrmAttachment
					if (!PrmLinkToDocumentation entered
					and !PrmNotes entered)
						required
							"MustEnterAnAttachment,Link,OrNotesWhenAddingSupportingDocumentation"
			Action Rules
				invoke Create ClosePeriodTaskDocumentation
					invoked.ClosePeriod					= ClosePeriod
					invoked.ClosePeriodTask				= ClosePeriodTask
					invoked.Description					= PrmDescription
					invoked.Notes						= PrmNotes
					invoked.Attachment					= PrmAttachment
					invoked.Link						= PrmLinkToDocumentation
					invoked.CloseManagementGroup		= CloseManagementGroup
					invoked.Author						= actor.agent(Employee).Employee

		SendMessage is an Instance Action
			Parameters
				CloseManagementGroup
				MessageFor						is Alpha 08
					States
						Resource				value is "Resource"
						Team					value is "Team"
				MessageTeam						is a FinanceTeam
				MessagePerson					is a FinanceResource
				DialogueTitle					is Alpha 100
				Dialogue 						is Text
				DialogueAttachment				is an Attachment
				DialogueLink					is an URL
				ResponseRequired				is Boolean
				PrmExternalToEmailAddress		is EmailAddressField with multiple addresses 
					holds pii
				PrmCcEmailAddress				is EmailAddressField with multiple addresses 
					holds pii
				PrmBccEmailAddress				is EmailAddressField with multiple addresses 
					holds pii
				PrmAddCcEmail					is Boolean
				PrmAddBccEmail					is Boolean
				PrmSendingLandmarkNotifications is Boolean
				PrmLocalActor					is an Actor

			Parameter Rules
				CloseManagementGroup
					initial value is ClosePeriod.CloseManagementGroup
					cannot be changed			
				PrmExternalToEmailAddress
					if (PrmExternalToEmailAddress not entered)
						constraint(MessagePerson entered or MessageTeam entered)
							"MustEnter_a_Resource,_Team_and/or_Email_Address."
				PrmCcEmailAddress
					if (PrmCcEmailAddress entered)
						constraint(PrmExternalToEmailAddress entered)
							"MustEnter_To_E-mail_Address,_when_Cc_email_is_entered."
				PrmBccEmailAddress
					if (PrmBccEmailAddress entered)
						constraint(PrmExternalToEmailAddress entered)
							"MustEnter_To_E-mail_Address,_when_Bcc_email_is_entered."							
				PrmSendingLandmarkNotifications
					if (MessagePerson not entered and MessageTeam not entered)
						constraint (not PrmSendingLandmarkNotifications entered)
							"MustEnterEither_Resource_and/or_TeamToSend_Notifications"
				DialogueTitle
					default to Dialogue
					initial value is TaskName
				Dialogue
					required
						"PleaseEnterYourMessage"
			Action Rules	
				if (MessagePerson entered)
					invoke Create FinanceResourceDialogue
						invoked.NavigateToThis		= reference to ClosePeriodTask				
						invoked.HROrganization		= CloseManagementGroup.HROrganization
						invoked.FinanceResource		= MessagePerson
						invoked.DialogueTitle		= DialogueTitle
						invoked.Dialogue			= Dialogue
						invoked.DialogueAttachment	= DialogueAttachment
						invoked.SendToContact		= MessagePerson
						invoked.Author				= actor.agent(Employee).Employee
						invoked.DialogueLink		= DialogueLink
						invoked.ResponseRequired	= ResponseRequired
						invoked.MessageType         = 0  

					invoke Create FinanceResourceDialogue
						invoked.NavigateToThis		= reference to ClosePeriodTask				
						invoked.HROrganization		= CloseManagementGroup.HROrganization
						invoked.FinanceResource		= actor.agent(Employee).Employee
						invoked.DialogueTitle		= DialogueTitle
						invoked.Dialogue			= Dialogue
						invoked.DialogueAttachment	= DialogueAttachment
						invoked.SendToContact		= MessagePerson
						invoked.Author				= actor.agent(Employee).Employee
						invoked.DialogueLink		= DialogueLink
						invoked.ResponseRequired	= ResponseRequired
						invoked.MessageType         = 1  

					if (PrmSendingLandmarkNotifications)
						PrmLocalActor = MessagePerson.FinanceResourceActor
						send notification
							to PrmLocalActor
							description is "<DialogueTitle>"
							priority is high
							detail is "<Dialogue>"

				if (MessageTeam entered) 



					LocalTeam = MessageTeam
					for each SendToTeamMembersRel  
						if ((each.FinanceTeamMember.TeamMember != actor.agent(Employee).Employee)
						and (each.FinanceTeamMember.TeamMember != MessagePerson))
							invoke Create FinanceResourceDialogue
								invoked.NavigateToThis		= reference to ClosePeriodTask				
								invoked.HROrganization		= CloseManagementGroup.HROrganization
								invoked.FinanceResource		= each.FinanceTeamMember.TeamMember
								invoked.DialogueTitle		= DialogueTitle
								invoked.Dialogue			= Dialogue
								invoked.DialogueAttachment	= DialogueAttachment
								invoked.SendToTeam			= MessageTeam
								invoked.SendToContact		= each.FinanceTeamMember.TeamMember
								invoked.Author				= actor.agent(Employee).Employee
								invoked.DialogueLink		= DialogueLink
								invoked.GroupingForTeam		= LocalGroupingForTeam	
								invoked.ResponseRequired	= ResponseRequired												
								invoked.MessageType         = 0  

							invoke Create FinanceResourceDialogue
								invoked.NavigateToThis		= reference to ClosePeriodTask				
								invoked.HROrganization		= CloseManagementGroup.HROrganization
								invoked.FinanceResource		= actor.agent(Employee).Employee
								invoked.DialogueTitle		= DialogueTitle
								invoked.Dialogue			= Dialogue
								invoked.DialogueAttachment	= DialogueAttachment
								invoked.SendToTeam			= MessageTeam
								invoked.SendToContact		= each.FinanceTeamMember.TeamMember
								invoked.Author				= actor.agent(Employee).Employee
								invoked.DialogueLink		= DialogueLink
								invoked.GroupingForTeam		= LocalGroupingForTeam	
								invoked.ResponseRequired	= ResponseRequired												
								invoked.MessageType         = 1  

							if (PrmSendingLandmarkNotifications)
								PrmLocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor															
								send notification
									to PrmLocalActor
									description is "<DialogueTitle>"
									priority is high
									detail is "<Dialogue>"

				if (PrmExternalToEmailAddress entered)
					send email
						to PrmExternalToEmailAddress
						cc PrmCcEmailAddress
						bcc PrmBccEmailAddress
						from actor.agent(Employee).EmployeeWorkEmailAddress
						subject "<DialogueTitle>"
						Attachments
							attachment DialogueAttachment.File
						Contents
								"<Dialogue>"
								blank line
								"<DialogueLink>"		
					
		Reminder is an Instance Action 		
			Parameters
				ReminderBeginDate				is Date
				ReminderDueDate					is Date
				ReminderDescription				is Alpha 100
				ReminderNotes					is Text
				ReminderAttachment				is an Attachment
				ReminderLink					is an URL
				FinancialForm					is Alpha 6
			Parameter Rules
				ReminderBeginDate
					initial value is current corporate date
					default to current corporate date
					constraint (ReminderBeginDate >= current corporate date)
						"SelectFutureDateOrLeaveBlank"
				ReminderDueDate
					initial value is current corporate date
					default to ReminderDueDate
					initial value is ReminderBeginDate
					constraint (ReminderDueDate >= ReminderBeginDate)
						"BeginDateCanNotBeBeforeDueDate"
				ReminderDescription
					required
			Action Rules
				invoke Create FinanceResourceSchedule
					invoked.HROrganization	= CloseManagementGroup.HROrganization
					invoked.FinanceResource	= actor.agent(Employee).Employee
					invoked.BeginDate		= ReminderBeginDate		
					invoked.DueDate			= ReminderDueDate		
					invoked.Description		= ReminderDescription
					invoked.Notes			= ReminderNotes		
					invoked.NavigateToThis	= reference to ClosePeriodTask
					invoked.Attachment		= ReminderAttachment
					invoked.WebsiteLink		= ReminderLink
					invoked.CreatedBy		= 0 
					invoked.FinancialForm	= FinancialForm
					
		AddIssue is an Instance Action
			valid when (PeriodIsOpenOrClosed)		
			Parameters
				CloseManagementGroup
				PrmClosePeriodTask			is a ClosePeriodTask
				PrmIssueDateCreated			is TimeStamp
				PrmIssueDateUpdated			is TimeStamp
				PrmIssueCreatedBy			is a FinanceResource
				PrmIssueUpdatedBy			is a FinanceResource
				PrmIssueSummary				is Alpha 100
				PrmIssueDescription			is Text
				PrmIssueStatus				is Numeric 1
					States
						Unresolved     value is 0
						Resolved       value is 1
				PrmResolutionRequiredForTaskCompletion	is Boolean
				PrmTaskName					is a ClosePeriodTask
				PrmFinanceTeam				is a FinanceTeam
				PrmTaskIssueOwner			is a FinanceTeamMember

			Parameter Rules
				CloseManagementGroup
					default to ClosePeriod.CloseManagementGroup
					cannot be changed
				PrmIssueDateCreated
					initial value is current timestamp
					default to current timestamp	
				PrmIssueDateUpdated
					initial value is current timestamp
					default to current timestamp
				PrmIssueSummary
					required
				PrmIssueCreatedBy
					initial value is actor.agent(Employee).Employee
					force default to actor.agent(Employee).Employee	
				PrmIssueUpdatedBy
					initial value is actor.agent(Employee).Employee
					force default to actor.agent(Employee).Employee	
				PrmClosePeriodTask
					initial value is ClosePeriodTask
			Action Rules
				invoke Create ClosePeriodTaskIssue
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ClosePeriod  			= ClosePeriod
					invoked.ClosePeriodTask			= PrmClosePeriodTask
					invoked.DateCreated 			= PrmIssueDateCreated
					invoked.DateUpdated				= PrmIssueDateUpdated
					invoked.CreatedBy   			= PrmIssueCreatedBy
					invoked.UpdatedBy   			= PrmIssueUpdatedBy
					invoked.Summary      			= PrmIssueSummary
					invoked.Description	  			= PrmIssueDescription
					invoked.Status					= PrmIssueStatus
					invoked.ResolutionRequiredForTaskCompletion   = PrmResolutionRequiredForTaskCompletion
					invoked.TaskName                = PrmTaskName.TaskName
					invoked.TaskIssueOwner          = PrmTaskIssueOwner
					invoked.FinanceTeam             = PrmFinanceTeam

					if (PrmIssueStatus.Resolved)
						invoked.ResolvedBy = actor.agent(Employee).Employee
						invoked.DateResolved = current timestamp


				if (PrmFinanceTeam entered and PrmTaskIssueOwner entered)
					if (CloseManagementGroup.OverrideResourceEmailNotifications
					or  PrmTaskIssueOwner.TeamMember.SendUpdatesAsEmail)
						send email
							to		PrmTaskIssueOwner.TeamMember.EmailAddress
							from	actor.agent(Employee).EmployeeWorkEmailAddress
							subject "Issue:<PrmIssueSummary>_Task<ClosePeriodTask.TaskName>HasBeenAssignedToYou"
							Contents
									"AssignedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"

					if (CloseManagementGroup.OverrideResourceLandmarkNotifications
					or  PrmTaskIssueOwner.TeamMember.SendUpdatesAsNotification)
						LocalActor = PrmTaskIssueOwner.TeamMember.FinanceResourceActor
						if (LocalActor entered)
							send notification
								to	LocalActor
								description is	"Issue:<PrmIssueSummary>_Task<ClosePeriodTask.TaskName>HasBeenAssignedToYou"
								priority is high
				else	
					LocalTeam = PrmFinanceTeam
					for each SendToTeamMembersRel
						if (each.FinanceTeamMember.TeamMember != actor.agent(Employee).Employee)  
						  	if (CloseManagementGroup.OverrideResourceEmailNotifications
						  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
								send email
									to		each.FinanceTeamMember.TeamMember.EmailAddress
									from	actor.agent(Employee).EmployeeWorkEmailAddress
									subject "Issue:<PrmIssueSummary>_Task<ClosePeriodTask.TaskName>HasBeenAssignedToYourTeam_<PrmFinanceTeam>"
									Contents
										"AssignedOn_<current timestamp>By_<actor.agent(Employee).Name.PreferredSimplePresentationName>"
	
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
								LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"Issue:<PrmIssueSummary>_Task<ClosePeriodTask.TaskName>HasBeenAssignedToYourTeam_<PrmFinanceTeam>"
										priority is high	

		WorkRequest is an Instance Action 		
			Parameters
				PrmClosePeriod					is a ClosePeriod
				RequestTeam						is a FinanceTeam
				RequestTeamMember				is a FinanceTeamMember
				RequestPerson					is a FinanceResource
				RequestBeginDate				is Date
				RequestBeginTime				is Time
				RequestDueDate					is Date
				RequestDueTime					is Time
				RequestDescription				is Alpha 100
				RequestNotes					is Text
				RequestAttachment				is an Attachment
				RequestLink						is an URL
				FinancialForm					is Alpha 6
				CreateOneTimeTask				is Boolean
				OneTimeParentTask				is a ClosePeriodTask
				OneTimeApprovalCode				is an ApprovalCode
				AddOneTimeTaskToProcess			is Boolean
				OneTimeCompany					is a CompanyGroupField
				OneTimePriority					is Numeric 1
					States
						Low							value is 0
						Medium						value is 1
						High						value is 2
				OneTimeRisk						is Numeric 1
					States	
						Low							value is 0
						Medium						value is 1
						High						value is 2
				OneTimeRequireSupportingDoco	is Boolean
				OneTimeRequireJournalEntry      is Boolean
				OneTimeRequiresApproval			is Boolean
				OneTimeCompletionApprovalCode	is an ApprovalCode
				OneTimeLevelOfEffort			is Unsigned Decimal 10.2
				OneTimeCalendar					is a SystemCalendar
				OneTimePeriodGroup				is a SystemCalendarPeriodGroup
				OneTimePrimaryType				is a CloseTaskType
				OneTimeSecondaryType			is a CloseTaskType
				OneTimeTertiaryType				is a CloseTaskType
				OneTimeDueTimeSensitive			is Boolean
				OneTimeTaskAddOption			is Numeric 1
					States
						JustTheSelectedPeriod			value is 0
						AllOpenPeriodsForParentTask		value is 1
				OneTimeStartDays				is Numeric 3
				OneTimeStartDayOfMonth			is Unsigned Decimal 2
				OneTimeStartLastDayOfMonth		is Boolean
				OneTimeStartNextMonth			is Boolean
				OneTimeStartTime				is Time
				OneTimeEndDays					is Numeric 3
				OneTimeEndDayOfMonth			is Unsigned Decimal 2
				OneTimeEndLastDayOfMonth		is Boolean
				OneTimeEndNextMonth				is Boolean
				OneTimeEndTime					is Time
				OneTimeHours					is Unsigned Decimal size 10.2
				OneTimeWorkDaysOnly				is Boolean
				
			Parameter Rules
				PrmClosePeriod
					initial value is ClosePeriod
					if (CreateOneTimeTask)
						constraint (PrmClosePeriod exists)
							"PeriodDoesNotExist"
						constraint (PrmClosePeriod.CloseManagementStatus.Open)
							"PeriodMustBeOpenToAddAOneTimeTask"
				RequestTeam
					if (CreateOneTimeTask)
						required
							"TeamRequiredForOneTimeTask"
					initial value is FinanceTeam
				RequestTeamMember
					initial value is TaskOwner
				RequestPerson
					if (!CreateOneTimeTask)
						required
							"PersonResponsibleRequiredForWorkRequest"
				RequestBeginDate
					initial value is current corporate date
					default to current corporate date
					constraint (RequestBeginDate >= current corporate date)
						"SelectFutureDateOrLeaveBlank"
				RequestBeginTime
					initial value is 28800 
				RequestDueDate
					initial value is current corporate date
					default to current corporate date
					constraint (RequestDueDate >= RequestBeginDate)
						"BeginDateCannotBeBeforeDueDate"
				RequestDueTime
					initial value is 61200 
				RequestDescription
					required
				OneTimeParentTask
					if (CreateOneTimeTask)
						required
							"ParentTaskRequiredForAOneTimeTask"
						constraint (OneTimeParentTask.TaskLevel.Summary)
							"ParentCloseTaskMustBeSummaryLevel"
				OneTimeApprovalCode
					initial value is CloseManagementGroup.OneTimeTaskDefaultApprovalCode
					if (CreateOneTimeTask
					and CloseManagementGroup.RequireApprovalOfOneTimeTasks)
						required
							"ApprovalCodeRequiredForOneTimeTask"
				OneTimeCompany
					initial value is OneTimeParentTask.TaskCompany
				OneTimeCompletionApprovalCode
					if (OneTimeRequiresApproval)
						required
							"OneTimeTaskRequiresApprovalUponCompletion;CompletionApprovalCodeRequired"
				OneTimeCalendar
					initial value is OneTimeParentTask.CreatedFrom.DefaultCalendar
				OneTimePeriodGroup
					initial value is OneTimeParentTask.CreatedFrom.DefaultPeriodGroup
				OneTimePrimaryType
					initial value is first CloseTaskTypeDefaultPrimaryRel.CloseTaskType
					constraint (!OneTimePrimaryType.HasChild)
						"CannotAssignASummaryLevelTaskType"
				OneTimeSecondaryType
					initial value is first CloseTaskTypeDefaultSecondaryRel.CloseTaskType
					constraint (!OneTimeSecondaryType.HasChild)
						"CannotAssignASummaryLevelTaskType"
				OneTimeTertiaryType
					initial value is first CloseTaskTypeDefaultTertiaryRel.CloseTaskType
					constraint (!OneTimeTertiaryType.HasChild)
						"CannotAssignASummaryLevelTaskType"
				OneTimeStartTime
					initial value is 28800
					default to 28800
				OneTimeEndTime
					initial value is 61200
					default to 61200
				OneTimeHours
					initial value is OneTimeLevelOfEffort

			Action Rules
				if (CreateOneTimeTask)
					if (RequestDueDate > OneTimeParentTask.ScheduleForTask.DueDate)
						confirmation required
							"OneTimeTaskScheduledDueDateIsBeyondCurrentScheduledDueDateForParentProcess<OneTimeParentTask.TaskName>Of<OneTimeParentTask.ScheduleForTask.DueDate>.ThisParentScheduledDueDateWillBeChangedTo<RequestDueDate>.DoYouWantToContinue?"

					if (!ActorIsCloseAdministrator
					and !ActorIsCloseManager)
						constraint (RequestTeamMember entered)
							"PersonResponsibleIsRequiredForOneTimeTask;YouCanAssignItToYourselfOrSomeoneOnYourTeam"
							
						LocalTeam = RequestTeam
						LocalTeamMember = actor.agent(Employee).Employee
						constraint (LocalFinanceTeamMemberRel exists)
							"YouCanOnlyAssignAOneTimeTaskToATeamYouAreAMemberOf"
							
						if (RequestTeamMember != actor.agent(Employee).Employee)
							LocalTeamMember = RequestTeamMember
							constraint (LocalFinanceTeamMemberRel exists)
								"IfNotAssigningAOneTimeTaskToYourself,YouCanOnlyAssignItToAnotherMemberOfYourTeam"
					
					if (!AddOneTimeTaskToProcess)
						initialize OneTimeCalendar
						initialize OneTimePeriodGroup

					if (OneTimeTaskAddOption.JustTheSelectedPeriod)								
						invoke Create ClosePeriodTask  
							assign result to LocalClosePeriodTask
							invoked.CloseManagementGroup					= CloseManagementGroup
							invoked.ClosePeriod								= PrmClosePeriod
							invoked.ParentClosePeriodTask					= OneTimeParentTask										
							invoked.TaskCompany								= OneTimeCompany
							invoked.TaskLevel								= TaskLevel.Detail
							invoked.FinanceTeam								= RequestTeam
							invoked.TaskOwner								= RequestTeamMember
							invoked.TaskName								= RequestDescription
							invoked.TaskDetail								= RequestNotes
							invoked.DisplaySequence							= OneTimeParentTask.CountOfCloseTaskDescendantsPlusOne
							invoked.TaskStatus								= TaskStatus.Scheduled
							invoked.ScheduleForTask.BeginDate				= RequestBeginDate
							invoked.ScheduleForTask.BeginTime				= RequestBeginTime
		         			invoked.ScheduleForTask.DueDate					= RequestDueDate
	    	     			invoked.ScheduleForTask.DueTime					= RequestDueTime
	        	 			invoked.ScheduleForTask.LevelOfEffort			= OneTimeLevelOfEffort
	         				invoked.FinancialForm							= FinancialForm
	         				invoked.OneTimeTask								= true
	         				invoked.OneTimeTaskCreator						= actor.agent(Employee).Employee
		         			invoked.OneTimeTaskApprovalInfo.ApprovalCode	= OneTimeApprovalCode
		         			invoked.AddOneTimeTaskToProcess					= AddOneTimeTaskToProcess
		         			invoked.RequiresApproval						= OneTimeRequiresApproval
		         			invoked.RequireSupportingDoco					= OneTimeRequireSupportingDoco
		         			invoked.RequireJournalEntry                     = OneTimeRequireJournalEntry
		         			invoked.ApprovalCode							= OneTimeCompletionApprovalCode
		         			invoked.Priority								= OneTimePriority
		         			invoked.Risk									= OneTimeRisk
		         			invoked.OneTimeCalendar							= OneTimeCalendar
		         			invoked.OneTimePeriodGroup						= OneTimePeriodGroup
		         			invoked.PrimaryTaskType							= OneTimePrimaryType
		         			invoked.SecondaryTaskType						= OneTimeSecondaryType
	 	        			invoked.TertiaryTaskType						= OneTimeTertiaryType
	 	        			invoked.DueTimeSensitive						= OneTimeDueTimeSensitive
							invoked.OneTimeBeginDaysFromPeriodEnd			= OneTimeStartDays
							invoked.OneTimeBeginDayOfMonth					= OneTimeStartDayOfMonth
							invoked.OneTimeBeginLastDayOfMonth				= OneTimeStartLastDayOfMonth
							invoked.OneTimeBeginDayForNextMonth				= OneTimeStartNextMonth
							invoked.OneTimeBeginTime						= OneTimeStartTime
							invoked.OneTimeDueDaysFromPeriodEnd				= OneTimeEndDays
							invoked.OneTimeDueDayOfMonth					= OneTimeEndDayOfMonth
							invoked.OneTimeDueLastDayOfMonth				= OneTimeEndLastDayOfMonth
							invoked.OneTimeDueDayForNextMonth				= OneTimeEndNextMonth
							invoked.OneTimeDueTime							= OneTimeEndTime
							invoked.OneTimeDueTimeSensitive					= OneTimeDueTimeSensitive
							invoked.OneTimeHoursRequired					= OneTimeHours
							invoked.OneTimeScheduleForWorkDaysOnly			= OneTimeWorkDaysOnly
					else
						initialize LocalClosePeriodTask
						LocalCreatedFrom = OneTimeParentTask.CreatedFrom
						
						for each AllOpenPeriodTasksForATaskRel
							invoke Create ClosePeriodTask  
								assign result to LocalClosePeriodTask
								invoked.CloseManagementGroup					= CloseManagementGroup
								invoked.ClosePeriod							    = each.ClosePeriod
								invoked.ParentClosePeriodTask					= each.ClosePeriodTask										
								invoked.TaskCompany								= OneTimeCompany
								invoked.TaskLevel								= TaskLevel.Detail
								invoked.FinanceTeam								= RequestTeam
								invoked.TaskOwner								= RequestTeamMember
								invoked.TaskName								= RequestDescription
								invoked.TaskDetail								= RequestNotes
								invoked.DisplaySequence							= each.ClosePeriodTask.CountOfCloseTaskDescendantsPlusOne
								invoked.TaskStatus								= TaskStatus.Scheduled
								invoked.ScheduleForTask.BeginDate				= RequestBeginDate
								invoked.ScheduleForTask.BeginTime				= RequestBeginTime
			         			invoked.ScheduleForTask.DueDate					= RequestDueDate
			         			invoked.ScheduleForTask.DueTime					= RequestDueTime
			         			invoked.ScheduleForTask.LevelOfEffort			= OneTimeLevelOfEffort
			         			invoked.FinancialForm							= FinancialForm
			         			invoked.OneTimeTask								= true
			         			invoked.OneTimeTaskCreator						= actor.agent(FinanceResource).FinanceResource
			         			invoked.OneTimeTaskApprovalInfo.ApprovalCode	= OneTimeApprovalCode
			         			invoked.AddOneTimeTaskToProcess					= AddOneTimeTaskToProcess
			         			invoked.RequiresApproval						= OneTimeRequiresApproval
			         			invoked.RequireSupportingDoco					= OneTimeRequireSupportingDoco
			         			invoked.RequireJournalEntry						= OneTimeRequireJournalEntry
			         			invoked.ApprovalCode							= OneTimeCompletionApprovalCode
			         			invoked.Priority								= OneTimePriority
			         			invoked.Risk									= OneTimeRisk
			         			invoked.OneTimeCalendar							= OneTimeCalendar
			         			invoked.OneTimePeriodGroup						= OneTimePeriodGroup
			         			invoked.PrimaryTaskType							= OneTimePrimaryType
			         			invoked.SecondaryTaskType						= OneTimeSecondaryType
			         			invoked.TertiaryTaskType						= OneTimeTertiaryType
			         			invoked.DueTimeSensitive						= OneTimeDueTimeSensitive
								invoked.OneTimeBeginDaysFromPeriodEnd			= OneTimeStartDays
								invoked.OneTimeBeginDayOfMonth					= OneTimeStartDayOfMonth
								invoked.OneTimeBeginLastDayOfMonth				= OneTimeStartLastDayOfMonth
								invoked.OneTimeBeginDayForNextMonth				= OneTimeStartNextMonth
								invoked.OneTimeBeginTime						= OneTimeStartTime
								invoked.OneTimeDueDaysFromPeriodEnd				= OneTimeEndDays
								invoked.OneTimeDueDayOfMonth					= OneTimeEndDayOfMonth
								invoked.OneTimeDueLastDayOfMonth				= OneTimeEndLastDayOfMonth
								invoked.OneTimeDueDayForNextMonth				= OneTimeEndNextMonth
								invoked.OneTimeDueTime							= OneTimeEndTime
								invoked.OneTimeDueTimeSensitive					= OneTimeDueTimeSensitive
								invoked.OneTimeHoursRequired					= OneTimeHours
								invoked.OneTimeScheduleForWorkDaysOnly			= OneTimeWorkDaysOnly
								invoked.AttachmentFromWorkRequest				= RequestAttachment
								invoked.LinkFromWorkRequest						= RequestLink

				else
					invoke Create FinanceResourceSchedule
						invoked.HROrganization		= CloseManagementGroup.HROrganization
						invoked.FinanceResource 	= RequestPerson
						invoked.BeginDate			= RequestBeginDate
						invoked.BeginTime			= RequestBeginTime		
						invoked.DueDate				= RequestDueDate
						invoked.DueTime				= RequestDueTime
						invoked.Description			= RequestDescription
						invoked.Notes				= RequestNotes		
						invoked.NavigateToThis		= reference to ClosePeriodTask
						invoked.Attachment			= RequestAttachment
						invoked.WebsiteLink			= RequestLink
						invoked.FinancialForm		= FinancialForm
						if (RequestPerson = actor.agent(Employee).Employee)
							invoked.CreatedBy		= 0 
						else
							invoked.CreatedBy		= 2 
							invoked.WorkRequestedBy	= actor.agent(Employee).Employee
			Exit Rules
				if (CreateOneTimeTask
				and OneTimeTaskAddOption.JustTheSelectedPeriod)
					if (RequestAttachment entered
					or  RequestLink entered)
						invoke Create ClosePeriodTaskDocumentation
							invoked.CloseManagementGroup		= CloseManagementGroup
							invoked.ClosePeriod					= ClosePeriod
							invoked.ClosePeriodTask				= LocalClosePeriodTask.ClosePeriodTask
							invoked.Description					= "One Time Task Creation"
							invoked.Attachment					= RequestAttachment
							invoked.Link						= RequestLink
							invoked.Author						= actor.agent(Employee).Employee
					


		UpdateApprovalLevel is an Instance Action
			restricted
			Parameters
				ParmEscalate	is Boolean
				ParmReassign	is Boolean
				ParmWorkUnit	is a PfiWorkunit
				ParmActor		is an Actor

			Action Rules
				if (Workunit not entered)
					Workunit = ParmWorkUnit
					
				if (ParmReassign)
					LocalActor = ParmActor
					LocalFinanceResource = first FinanceResourceActorRel.FinanceResource
					if (ReassignToApprovalLevel entered)
						ApprovalLevel = ReassignToApprovalLevel
						initialize ReassignToApprovalLevel
					invoke Create ClosePeriodTaskApprovalHistory
						invoked.CloseManagementGroup	= CloseManagementGroup
						invoked.ClosePeriod				= ClosePeriod
						invoked.ClosePeriodTask			= ClosePeriodTask
						invoked.Type					= 1 
						invoked.ActionTaken				= 9 
						invoked.ActionTakenBy			= LocalFinanceResource
				else
					LocalActor = ParmActor
					LocalFinanceResource = first FinanceResourceActorRel.FinanceResource
					if (ParmEscalate)
						include GetNextEscalationApprovalLevel
						ApprovalLevel		= LocalApprovalLevel
						Approver			= LocalApprover
						ApproverTeam		= LocalApproverTeam
						invoke Create ClosePeriodTaskApprovalHistory
							invoked.CloseManagementGroup	= CloseManagementGroup
							invoked.ClosePeriod				= ClosePeriod
							invoked.ClosePeriodTask			= ClosePeriodTask
							invoked.Type					= 1 
							invoked.ActionTaken				= 6 
							invoked.ActionTakenBy			= blank 
							invoked.Comment					= "Escalation Time Out By Process Flow Administration"
					else
						include GetNextApprovalLevel
						ApprovalLevel		= LocalApprovalLevel
						Approver			= LocalApprover
						ApproverTeam		= LocalApproverTeam
						if (Approver entered
						or  ApproverTeam entered)  
							invoke Create ClosePeriodTaskApprovalHistory
								invoked.CloseManagementGroup	= CloseManagementGroup
								invoked.ClosePeriod				= ClosePeriod
								invoked.ClosePeriodTask			= ClosePeriodTask
								invoked.Type					= 1 
								invoked.ActionTaken				= 2 
								invoked.ActionTakenBy			= LocalFinanceResource


		UpdateWorkunitFromFlow is an Instance Action
			restricted
			Parameters
				ParmWorkUnit	is a PfiWorkunit
			Action Rules
				Workunit = ParmWorkUnit
				

		UpdateOneTimeApprovalLevel is an Instance Action
			restricted
			Parameters
				ParmEscalate	is Boolean
				ParmReassign	is Boolean
				ParmWorkUnit	is a PfiWorkunit
				ParmActor		is an Actor

			Action Rules
				if (OneTimeWorkunit not entered)
					OneTimeWorkunit = ParmWorkUnit
					
				if (ParmReassign)
					LocalActor = ParmActor
					LocalFinanceResource = first FinanceResourceActorRel.FinanceResource
					if (ReassignToApprovalLevel entered)
						OneTimeTaskApprovalInfo.ApprovalLevel = OneTimeTaskApprovalInfo.ReassignToApprovalLevel
						initialize OneTimeTaskApprovalInfo.ReassignToApprovalLevel
					invoke Create ClosePeriodTaskApprovalHistory
						invoked.CloseManagementGroup	= CloseManagementGroup
						invoked.ClosePeriod				= ClosePeriod
						invoked.ClosePeriodTask			= ClosePeriodTask
						invoked.Type					= 2 
						invoked.ActionTaken				= 9 
						invoked.ActionTakenBy			= LocalFinanceResource
				else
					LocalActor = ParmActor
					LocalFinanceResource = first FinanceResourceActorRel.FinanceResource
					if (ParmEscalate)
						include GetNextOneTimeEscalationApprovalLevel
						OneTimeTaskApprovalInfo.ApprovalLevel		= LocalApprovalLevel
						OneTimeTaskApprovalInfo.Approver			= LocalApprover
						OneTimeTaskApprovalInfo.ApproverTeam		= LocalApproverTeam
						invoke Create ClosePeriodTaskApprovalHistory
							invoked.CloseManagementGroup		= CloseManagementGroup
							invoked.ClosePeriod			= ClosePeriod
							invoked.ClosePeriodTask		= ClosePeriodTask
							invoked.Type				= 2 
							invoked.ActionTaken			= 6 
							invoked.ActionTakenBy		= blank 
							invoked.Comment				= "Escalation Time Out By Process Flow Administration"
					else
						include GetNextOneTimeApprovalLevel
						OneTimeTaskApprovalInfo.ApprovalLevel		= LocalApprovalLevel
						OneTimeTaskApprovalInfo.Approver			= LocalApprover
						OneTimeTaskApprovalInfo.ApproverTeam		= LocalApproverTeam
						if (OneTimeTaskApprovalInfo.Approver entered
						or  OneTimeTaskApprovalInfo.ApproverTeam entered)  
							invoke Create ClosePeriodTaskApprovalHistory
								invoked.CloseManagementGroup		= CloseManagementGroup
								invoked.ClosePeriod			= ClosePeriod
								invoked.ClosePeriodTask		= ClosePeriodTask
								invoked.Type				= 2 
								invoked.ActionTaken			= 2 
								invoked.ActionTakenBy		= LocalFinanceResource




		UpdateOneTimeUniqueIdOnFlow is an Instance Action
			restricted
			Parameters
				ParmWorkUnit	is a PfiWorkunit
			Action Rules
				OneTimeWorkunit = ParmWorkUnit
				
				invoke Update OneTimePfiWorkunitRel.PfiWorkunit
					invoked.AppsValue = DerivedAppsValue
			
		OpenPeriodDetailSet is a Set Action  
			restricted
			completion message is "OpenPeriodComplete"
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmClosePeriod			is a ClosePeriod

			Parameter Rules
				PrmCloseManagementGroup
					required
				PrmClosePeriod
					required

			Local Fields
				ThisTopLevelTask	is Numeric 9
				OpenTaskLate		is Boolean

			Sort Order
				CloseManagementGroup
				ClosePeriod
				TaskLevel

			Instance Selection
				where (CloseManagementGroup	= PrmCloseManagementGroup
				and	   ClosePeriod			= PrmClosePeriod
				and	   TaskLevel			= 1)

			Action Rules
				Set Rules
					Exit Rules
						invoke ChangeStatusToOpen PrmClosePeriod
						if (PrmCloseManagementGroup.AutoUpdateAnalyticCubeFile and PrmCloseManagementGroup.AutoRefreshReloadAnalyticCube)
							invoke Reload PrmCloseManagementGroup.ClosePeriodTaskAnalyticCubeRel in background

				Instance Rules
					initialize LocalDetailTask
					initialize ThisTopLevelTask
					initialize OpenTaskLate
					
					if (TaskStatus.Scheduled
					and not OneTimeTaskNeedsApproval
					and IsNotTaskForPeriodReconciliations)
						if (ScheduleForTask.BeginDate < current corporate date)

							if (DependencyMetric.NoPrereq			
							or  CannotStartPrereqTaskRel not exists) 
								if (TaskOwner entered)
									if (not CloseManagementGroup.StartLateReasonCodeRequired)
										OpenTaskLate 			= true
										TaskStatus 				= TaskStatus.InProcess
										ActualForTask.BeginDate = current corporate date
										ActualForTask.BeginTime = current corporate time
										StartMetric             = StartMetric.StartedLate		
	
										if ((ScheduleForTask.DueDate < current corporate date)
										or  ((DueTimeSensitive
										and  (ScheduleForTask.DueDate = current corporate date)
										and  (ScheduleForTask.DueTime < current corporate time))))
											DueMetric = DueMetric.IsLate 
									  
										invoke Update ResourceScheduleRel 
											invoked.WorkStatus = 1 

					if (UpdateAnalyticCubeFile)
						invoke Create ClosePeriodTaskCube
							fill in fields from this instance
							invoked.CloseManagementGroup	= CloseManagementGroup
							invoked.ClosePeriod				= ClosePeriod
							invoked.ParentTask				= ParentClosePeriodTask

					for each ClosePeriodTask ancestors
						invoke Create ClosePeriodTaskFlat
							fill in fields from this instance
							invoked.CloseManagementGroup					= CloseManagementGroup
							invoked.ClosePeriod								= ClosePeriod
							invoked.ClosePeriodTaskFlat.SummaryPeriodTask	= each.ClosePeriodTask
							invoked.ClosePeriodTaskFlat.DetailPeriodTask	= ClosePeriodTask
							invoked.ParentTask								= ParentClosePeriodTask
							if (LocalDetailTask not entered)
								LocalDetailTask								= each.ClosePeriodTask
							if (ThisTopLevelTask not entered)
								ThisTopLevelTask							= LocalTopLevelTask
							invoked.TopLevelTask							= ThisTopLevelTask

					if (OpenTaskLate) 
						invoke UpdateParentStatusDates ParentClosePeriodTask 
							invoked.UpdateStatus	= true
							invoked.UpdateDates		= true
							invoked.NewBeginDate	= ActualForTask.BeginDate
							invoked.NewBeginTime	= ActualForTask.BeginTime
							invoked.DateToProcess	= 2									  						

					if (CloseManagementGroup.AllowExternalEmails
					and UseExternalEmailNotification
					and SendExternalEmailOnOpenOfPeriod)
						ExternalEmailSentStamp = current timestamp
						send email
							to		ExternalToEmail
							from	CloseManagementGroup.ExternalFromEmailAddress
							subject "<DerivedExternalEmailSubject>"
							Contents
									"<DerivedExternalEmailContent>"

		LoadPeriodTaskCubeFile is a Set Action  
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmClosePeriod			is a ClosePeriod

			Sort Order
				ClosePeriod
				TaskLevel

			Instance Selection
				where (CloseManagementGroup	= PrmCloseManagementGroup
				and	   ClosePeriod			= PrmClosePeriod
				and	   TaskLevel			= 1)

			Action Rules
				Instance Rules
					if (ClosePeriodTaskCubeRel not exists)
						invoke Create ClosePeriodTaskCube
							fill in fields from this instance
							invoked.CloseManagementGroup	= CloseManagementGroup
							invoked.ClosePeriod				= ClosePeriod
							invoked.ParentTask				= ParentClosePeriodTask
					else
						invoke Update ClosePeriodTaskCubeRel
							fill in fields from this instance


		UpdateAnalyticCubeForClosedPeriod is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmClosePeriod			is a ClosePeriod

			Sort Order
				ClosePeriod
				TaskLevel

			Instance Selection
				where (CloseManagementGroup	= PrmCloseManagementGroup
				and	   ClosePeriod			= PrmClosePeriod
				and	   TaskLevel			= 1
				and    HasOpenCubeFileRecord)

			Action Rules
				Set Rules
					Exit Rules
						invoke UpdateClosePeriodTaskCube PrmCloseManagementGroup
							invoked.PrmRefreshReload = 1 
				Instance Rules
					invoke Update ClosePeriodTaskCubeRel
						fill in fields from this instance


		SendGeneralOverdueNotifications is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmClosePeriod			is a ClosePeriod

			Local Fields
				LocalActor    				is an Actor
				
			Sort Order
				ClosePeriod
				TaskLevel

			Instance Selection
				where (CloseManagementGroup	= PrmCloseManagementGroup
				and	   ClosePeriod			= PrmClosePeriod
				and	   TaskLevel			= 1
				and    Overdue)

			Action Rules
				Instance Rules
					if (DueTimeSensitive
					and DueTimeNotificationStamp not entered)
						DueTimeNotificationStamp = current timestamp

						for each ClosePeriodTaskFlatDetailRel
							invoke Update each
								invoked.DueTimeNotificationStamp = DueTimeNotificationStamp

					if (TaskStatus.PendingApproval)
						if (Approver entered)
							if (CloseManagementGroup.OverrideResourceEmailNotifications
							or  Approver.SendUpdatesAsEmail)
								send email
									to		Approver.EmailAddress
									from	actor.agent(Employee).EmployeeWorkEmailAddress
									subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
									Contents
											"TaskIsWaitingOnYourApproval"
											"ScheduledDueDateWas_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
			
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  Approver.SendUpdatesAsNotification)
								LocalActor = Approver.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
							
						else
							LocalTeam = ApproverTeam.FinanceTeam
							for each SendToTeamMembersRel
								if (CloseManagementGroup.OverrideResourceEmailNotifications
							  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
									send email
										to		each.FinanceTeamMember.TeamMember.EmailAddress
										from	actor.agent(Employee).EmployeeWorkEmailAddress
										subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
										Contents
											"TaskIsWaitingOnYourTeam'sApproval"
											"ScheduledDueDateWas_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
			
								if (CloseManagementGroup.OverrideResourceLandmarkNotifications
								or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
									LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
									if (LocalActor entered)
										send notification
											to	LocalActor
											description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
											priority is high
											linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
					else
						if (TaskOwner entered)
							if (CloseManagementGroup.OverrideResourceEmailNotifications
							or  TaskOwner.TeamMember.SendUpdatesAsEmail)
								send email
									to		TaskOwner.TeamMember.EmailAddress
									from	actor.agent(Employee).EmployeeWorkEmailAddress
									subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
									Contents
											"ScheduledDueDateWas_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
			
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  TaskOwner.TeamMember.SendUpdatesAsNotification)
								LocalActor = TaskOwner.TeamMember.FinanceResourceActor
								if (LocalActor entered)		
									send notification
										to	LocalActor
										description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
							
						else
							LocalTeam = FinanceTeam
							for each SendToTeamMembersRel
								if (CloseManagementGroup.OverrideResourceEmailNotifications
							  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
									send email
										to		each.FinanceTeamMember.TeamMember.EmailAddress
										from	actor.agent(Employee).EmployeeWorkEmailAddress
										subject "TeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
										Contents
											"ScheduledDueDateWas_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
			
								if (CloseManagementGroup.OverrideResourceLandmarkNotifications
								or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
									LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
									if (LocalActor entered)
										send notification
											to	LocalActor
											description is	"TeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
											priority is high
											linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 

		SendTimeSensitiveOverdueNotifications is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmClosePeriod			is a ClosePeriod

			Local Fields
				LocalActor    			is an Actor	
			Sort Order
				ClosePeriod
				TaskLevel
				DueTimeSensitive

			Instance Selection
				where (CloseManagementGroup	= PrmCloseManagementGroup
				and	   ClosePeriod			= PrmClosePeriod
				and	   TaskLevel			= 1
				and    DueTimeSensitiveNeedsNotification)

			Action Rules
				Set Rules
					Exit Rules
						if (PrmCloseManagementGroup.AutoUpdateAnalyticCubeFile and PrmCloseManagementGroup.AutoRefreshReloadAnalyticCube)
							invoke Reload PrmCloseManagementGroup.ClosePeriodTaskAnalyticCubeRel in background
						
				Instance Rules
					DueTimeNotificationStamp = current timestamp

					for each ClosePeriodTaskFlatDetailRel
						invoke Update each
							invoked.DueTimeNotificationStamp = DueTimeNotificationStamp

					if (TaskStatus.PendingApproval)
						if (Approver entered)
							if (CloseManagementGroup.OverrideResourceEmailNotifications
							or  Approver.SendUpdatesAsEmail)
								send email
									to		Approver.EmailAddress
									from	actor.agent(Employee).EmployeeWorkEmailAddress
									subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
									Contents
											"TaskIsWaitingOnYourApproval"
											"ScheduledDueDateWas_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
			
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  Approver.SendUpdatesAsNotification)
								LocalActor = Approver.FinanceResourceActor
								if (LocalActor entered)
									send notification
										to	LocalActor
										description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
							
						else
							LocalTeam = ApproverTeam.FinanceTeam
							for each SendToTeamMembersRel
								if (CloseManagementGroup.OverrideResourceEmailNotifications
							  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
									send email
										to		each.FinanceTeamMember.TeamMember.EmailAddress
										from	actor.agent(Employee).EmployeeWorkEmailAddress
										subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
										Contents
											"TaskIsWaitingOnYourTeam'sApproval"
											"ScheduledDueDateWas_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
			
								if (CloseManagementGroup.OverrideResourceLandmarkNotifications
								or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
									LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
									if (LocalActor entered)	
										send notification
											to	LocalActor
											description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
											priority is high
											linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
					else
						if (TaskOwner entered)
							if (CloseManagementGroup.OverrideResourceEmailNotifications
							or  TaskOwner.TeamMember.SendUpdatesAsEmail)
								send email
									to		TaskOwner.TeamMember.EmailAddress
									from	actor.agent(Employee).EmployeeWorkEmailAddress
									subject "Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
									Contents
											"ScheduledDueDateWas_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
			
							if (CloseManagementGroup.OverrideResourceLandmarkNotifications
							or  TaskOwner.TeamMember.SendUpdatesAsNotification)
								LocalActor = TaskOwner.TeamMember.FinanceResourceActor
								if (LocalActor entered)	
									send notification
										to	LocalActor
										description is	"Task<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
										priority is high
										linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 
							
						else
							LocalTeam = FinanceTeam
							for each SendToTeamMembersRel
								if (CloseManagementGroup.OverrideResourceEmailNotifications
							  	or  each.FinanceTeamMember.TeamMember.SendUpdatesAsEmail)
									send email
										to		each.FinanceTeamMember.TeamMember.EmailAddress
										from	actor.agent(Employee).EmployeeWorkEmailAddress
										subject "TeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
										Contents
											"ScheduledDueDateWas_<ClosePeriodTask.ScheduleForTask.DueDate>_<ClosePeriodTask.ScheduleForTask.DueTime>"
			
								if (CloseManagementGroup.OverrideResourceLandmarkNotifications
								or  each.FinanceTeamMember.TeamMember.SendUpdatesAsNotification)
									LocalActor = each.FinanceTeamMember.TeamMember.FinanceResourceActor
									if (LocalActor entered)	
										send notification
											to	LocalActor
											description is	"TeamTask<ClosePeriodTask.TaskName>For<ClosePeriod>IsOverdue"
											priority is high
											linkback (webapp is CloseResource navigation is ResourceNotificationNav text is "ViewClosePeriodTask") 

		SendExternalEmailNotifications is a Set Action
			restricted
			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmClosePeriod			is a ClosePeriod

			Sort Order
				CloseManagementGroup
				ClosePeriod
				TaskLevel
				UseExternalEmailNotification
				TaskStatus

			Instance Selection
				where (CloseManagementGroup	= PrmCloseManagementGroup
				and	   ClosePeriod			= PrmClosePeriod
				and	   TaskLevel			= 1
				and    UseExternalEmailNotification = true
				and    TaskStatus < 5)

			Action Rules
				Instance Rules
					ExternalEmailSentStamp = current timestamp
					send email
						to		ExternalToEmail
						from	CloseManagementGroup.ExternalFromEmailAddress
						subject "<DerivedExternalEmailSubject>"
						Contents
								"<DerivedExternalEmailContent>"	

		CreateClosePeriodTaskJournal is an Instance Action
			default label is "SelectTask"
			valid when (OpenPeriodOpenTask)
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is an AccountingEntity
				PrmGeneralLedgerClosePeriod		is a GeneralLedgerClosePeriod
					default label is "PrmGlobalLedgerClosePeriod"
				PrmGeneralLedgerJournalControl	is a GeneralLedgerJournalControl
					default label is "PrmGlobalLedgerJournalControl"
						
			Action Rules



                LocalAccountingEntity			= ContextAccountingEntity
				LocalGLClosePeriod				= ContextGeneralLedgerClosePeriod
				LocalJournalEntryNumber			= ContextGeneralLedgerJournalControl
				invoke Update ClosePeriodTaskJournalRel

		RemoveApprovals is an Instance Action
			valid when (OpenTaskRequiresApproval)
			confirmation required
				"ThisWillRemoveTheRequirementForApprovalsUponCompletionOfTheTask.DoYouWantToContinue?"
			Action Rules
				RequiresApproval = false
				
				invoke DeleteForRemoval TaskCompletionApprovalResource set
					 
			Exit Rules
				if (UpdateAnalyticCubeFile)
					invoke Update ClosePeriodTaskCubeRel
						invoked.RequiresApproval = false
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						invoked.RequiresApproval = false 	

		AddApprovals is an Instance Action
			valid when (OpenTaskNoApprovalRequired)
			Parameters
				PrmApprovalCode 	is an ApprovalCode
				PrmApprover			is a FinanceResource
				PrmApprovalTeam		is a FinanceTeam
			
			Parameter Rules
				PrmApprovalCode
					initial value is ApprovalCode
				PrmApprover
					constraint (!PrmApprovalCode entered)
						"CannotEnterApproverWhenApprovalCodeIsEntered"
				PrmApprovalTeam
					if (PrmApprovalCode not entered
					and PrmApprover not entered)
						required
							"MustEnterEitherAnApprovalCodeOrAnApproverOrAnApprovalTeam"
					constraint (!PrmApprovalCode entered)
						"CannotEnterApprovalTeamWhenApprovalCodeIsEntered"
					constraint (!PrmApprover entered)
						"CannotEnterApprovalTeamWhenApproverIsEntered"
						
			Action Rules
				RequiresApproval = true				
				ApprovalCode = PrmApprovalCode
				
				if (ApprovalCode entered)
					for each ApprovalCodeResourceRel
						invoke Create TaskCompletionApprovalResource
							fill in fields from each
							invoked.CloseManagementGroup	= CloseManagementGroup
							invoked.ClosePeriod				= ClosePeriod
							invoked.ClosePeriodTask			= ClosePeriodTask
							if (each.EscalateTo.SpecificApprovalLevel)
								LocalUpdateApprovals = true
								invoked.EscalationLevelFromCode = each.EscalationApprovalLevel.ApprovalLevel
								invoked.EscalationApprovalLevel = 0
							invoked.CreateFromApprovalCode	= true

					if (LocalUpdateApprovals)
						invoke UpdateEscalationLevel TaskCompletionApprovalResource
							invoked.PrmCloseManagementGroup	= CloseManagementGroup
							invoked.PrmClosePeriod			= ClosePeriod
							invoked.PrmClosePeriodTask		= ClosePeriodTask
				else
					invoke Create TaskCompletionApprovalResource
						invoked.CloseManagementGroup	= CloseManagementGroup
						invoked.ClosePeriod				= ClosePeriod
						invoked.ClosePeriodTask			= ClosePeriodTask
						invoked.Approver				= PrmApprover
						invoked.ApprovalTeam			= PrmApprovalTeam
				
			Exit Rules
				if (UpdateAnalyticCubeFile)
					invoke Update ClosePeriodTaskCubeRel
						invoked.RequiresApproval = true
				for each ClosePeriodTaskFlatDetailRel
					invoke Update each 
						invoked.RequiresApproval	= true
						invoked.ApprovalCode		= PrmApprovalCode

		ReassignApprover is an Instance Action
			valid when (AllowReassignApprover)
			Parameters
				PrmReassignTo	is a TaskCompletionApprovalResource
			
			Parameter Rules
				PrmReassignTo
					required
						"MustEnter_Reassign_To"
					constraint (!PrmReassignTo.ApprovalLevel = ApprovalLevel)
						"Reassign_ToIsCurrentApprover"
							
			Action Rules
				ApprovalLevel	= PrmReassignTo.ApprovalLevel
				Approver		= PrmReassignTo.Approver
				ApproverTeam	= PrmReassignTo.ApprovalTeam

				invoke TakeAction Workunit
					invoked.Action	= "Reassign"
					invoked.Subject = "Reassign Approver"
					invoked.Message = "Reassign Approver"

		ReassignOneTimeTaskApprover is an Instance Action
			valid when (AllowReassignOneTimeTaskApprover)
			default label is "ReassignApprover"
			Parameters
				PrmReassignTo	is a OneTimeTaskApprovalResource
			
			Parameter Rules
				PrmReassignTo
					required
						"MustEnter_Reassign_To"
					constraint (!PrmReassignTo.ApprovalLevel = OneTimeTaskApprovalInfo.ApprovalLevel)
						"Reassign_ToIsCurrentApprover"
							
			Action Rules
				OneTimeTaskApprovalInfo.ApprovalLevel	= PrmReassignTo.ApprovalLevel
				OneTimeTaskApprovalInfo.Approver		= PrmReassignTo.Approver
				OneTimeTaskApprovalInfo.ApproverTeam	= PrmReassignTo.ApprovalTeam

				invoke TakeAction OneTimeWorkunit
					invoked.Action	= "Reassign"
					invoked.Subject = "Reassign Approver"
					invoked.Message = "Reassign Approver"


		CreateTaskApprovalResourceRecords is a Set Action
			restricted

			Parameters
				PrmCloseManagementGroup	is a CloseManagementGroup
				PrmClosePeriod		is a ClosePeriod
				
			Sort Order
				CloseManagementGroup
				ClosePeriod
				TaskLevel

			Instance Selection
				where (CloseManagementGroup	= PrmCloseManagementGroup
				and    ClosePeriod			= PrmClosePeriod
				and    TaskLevel			= 1
				and   (RequiresApproval 	= true or OneTimeTaskRequiresApproval = true))

			Action Rules
				Instance Rules
					LocalUpdateApprovals = false
					
					if (RequiresApproval
					and !TaskApprovalResourceRel exists)
						for each ApprovalCodeResourceRel
							invoke Create TaskCompletionApprovalResource
								fill in fields from each
								invoked.CloseManagementGroup	= CloseManagementGroup
								invoked.ClosePeriod				= ClosePeriod
								invoked.ClosePeriodTask			= ClosePeriodTask
								if (each.EscalateTo.SpecificApprovalLevel)
									LocalUpdateApprovals = true
									invoked.EscalationLevelFromCode = each.EscalationApprovalLevel.ApprovalLevel
									invoked.EscalationApprovalLevel = 0
								invoked.CreateFromApprovalCode	= true
	
						if (LocalUpdateApprovals)
							invoke UpdateEscalationLevel TaskCompletionApprovalResource
								invoked.PrmCloseManagementGroup	= CloseManagementGroup
								invoked.PrmClosePeriod			= ClosePeriod
								invoked.PrmClosePeriodTask		= ClosePeriodTask

					LocalUpdateApprovals = false
				
					if (OneTimeTaskRequiresApproval
					and !OneTimeTaskApprovalResourceRel exists)
						for each OneTimeApprovalCodeResourceRel
							invoke Create OneTimeTaskApprovalResource
								fill in fields from each
								invoked.CloseManagementGroup	= CloseManagementGroup
								invoked.ClosePeriod				= ClosePeriod
								invoked.ClosePeriodTask			= ClosePeriodTask
								if (each.EscalateTo.SpecificApprovalLevel)
									LocalUpdateApprovals = true
									invoked.EscalationLevelFromCode = each.EscalationApprovalLevel.ApprovalLevel
									invoked.EscalationApprovalLevel = 0
								invoked.CreateFromApprovalCode	= true

						if (LocalUpdateApprovals)
							invoke UpdateEscalationLevel OneTimeTaskApprovalResource
								invoked.PrmCloseManagementGroup	= CloseManagementGroup
								invoked.PrmClosePeriod			= ClosePeriod
								invoked.PrmClosePeriodTask		= ClosePeriodTask

		AddOneTimeTaskToTheProcess is an Instance Action
			valid when (AllowAddOfOneTimeTaskToTheProcess)
			Parameters
				PrmParentTask							is a CloseTask
				PrmOneTimeCalendar						is a SystemCalendar
				PrmOneTimePeriodGroup					is a SystemCalendarPeriodGroup
				PrmTaskCompany							is a CompanyGroupField
				PrmOneTimeScheduleForWorkDaysOnly		is Boolean
				PrmFinanceTeam							is a FinanceTeam
				PrmTaskOwner							is a FinanceTeamMember
				PrmTaskName								is Alpha 100
				PrmTaskDetail							is Text
				PrmPriority								is Numeric 1
					States
						Low					value is 0
						Medium				value is 1
						High				value is 2
				PrmRisk									is Numeric 1
					States
						Low					value is 0
						Medium				value is 1
						High				value is 2
				PrmFinancialForm						is Alpha 6
				PrmOneTimeBeginTime						is Time
				PrmOneTimeBeginDaysFromPeriodEnd		is Numeric 3
				PrmOneTimeBeginDayOfMonth				is Unsigned Decimal 2
				PrmOneTimeBeginLastDayOfMonth			is Boolean
				PrmOneTimeBeginDayForNextMonth			is Boolean
				PrmOneTimeDueTime						is Time
				PrmOneTimeDueTimeSensitive				is Boolean
				PrmOneTimeDueDaysFromPeriodEnd			is Numeric 3
				PrmOneTimeDueDayOfMonth					is Unsigned Decimal 2
				PrmOneTimeDueLastDayOfMonth				is Boolean
				PrmOneTimeDueDayForNextMonth			is Boolean
				PrmOneTimeHoursRequired					is Unsigned Decimal size 10.2
				PrmRequiresApproval						is Boolean
				PrmApprovalCode							is an ApprovalCode
				PrmRequireSupportingDoco				is Boolean
				PrmRequireJournalEntry					is Boolean
				PrmPrimaryTaskType						is a CloseTaskType
				PrmSecondaryTaskType					is a CloseTaskType
				PrmTertiaryTaskType						is a CloseTaskType

			Parameter Rules
				PrmParentTask
					initial value is ParentClosePeriodTask.CreatedFrom
					required
						"ParentTaskIsRequired"
				PrmOneTimeCalendar
					initial value is OneTimeCalendar
				PrmOneTimePeriodGroup
					initial value is OneTimePeriodGroup
				PrmTaskCompany
					initial value is TaskCompany
				PrmOneTimeScheduleForWorkDaysOnly
					initial value is OneTimeScheduleForWorkDaysOnly
				PrmFinanceTeam
					initial value is FinanceTeam
				PrmTaskOwner
					initial value is TaskOwner
				PrmTaskName
					initial value is TaskName
				PrmTaskDetail
					initial value is TaskDetail
				PrmPriority
					initial value is Priority
				PrmRisk
					initial value is Risk
				PrmFinancialForm
					initial value is FinancialForm
				PrmOneTimeBeginTime
					initial value is OneTimeBeginTime
				PrmOneTimeBeginDaysFromPeriodEnd
					initial value is OneTimeBeginDaysFromPeriodEnd
				PrmOneTimeBeginDayOfMonth
					initial value is OneTimeBeginDayOfMonth
				PrmOneTimeBeginLastDayOfMonth
					initial value is OneTimeBeginLastDayOfMonth
				PrmOneTimeBeginDayForNextMonth
					initial value is OneTimeBeginDayForNextMonth
				PrmOneTimeDueTime
					initial value is OneTimeDueTime
				PrmOneTimeDueTimeSensitive
					initial value is OneTimeDueTimeSensitive
				PrmOneTimeDueDaysFromPeriodEnd
					initial value is OneTimeDueDaysFromPeriodEnd
				PrmOneTimeDueDayOfMonth
					initial value is OneTimeDueDayOfMonth
				PrmOneTimeDueLastDayOfMonth
					initial value is OneTimeDueLastDayOfMonth
				PrmOneTimeDueDayForNextMonth
					initial value is OneTimeDueDayForNextMonth
				PrmOneTimeHoursRequired
					initial value is OneTimeHoursRequired
				PrmRequiresApproval
					initial value is RequiresApproval
				PrmApprovalCode
					initial value is ApprovalCode
				PrmRequireSupportingDoco
					initial value is RequireSupportingDoco
				PrmRequireJournalEntry
					initial value is RequireJournalEntry
				PrmPrimaryTaskType
					initial value is PrimaryTaskType
				PrmSecondaryTaskType
					initial value is SecondaryTaskType
				PrmTertiaryTaskType
					initial value is TertiaryTaskType
 
 		    Action Rules
				invoke CreateTaskFromOneTimeTask CloseTask
					assign result to LocalSaveCloseTask
					invoked.CloseManagementGroup	= CloseManagementGroup
					invoked.ParentCloseTask			= PrmParentTask 
					invoked.DefaultCalendar			= PrmOneTimeCalendar
					invoked.DefaultPeriodGroup		= PrmOneTimePeriodGroup
					invoked.DefaultCompany			= PrmTaskCompany
					invoked.ScheduleForWorkDaysOnly	= PrmOneTimeScheduleForWorkDaysOnly
					invoked.FinanceTeam				= PrmFinanceTeam
					invoked.TaskOwner				= PrmTaskOwner
					invoked.TaskName				= PrmTaskName
					invoked.TaskDetail				= PrmTaskDetail
       				invoked.Priority				= PrmPriority      				
       				invoked.Risk					= PrmRisk
					invoked.FinancialForm			= PrmFinancialForm
					invoked.BeginTime				= PrmOneTimeBeginTime
					invoked.BeginDaysFromPeriodEnd	= PrmOneTimeBeginDaysFromPeriodEnd
					invoked.BeginDayOfMonth			= PrmOneTimeBeginDayOfMonth
					invoked.BeginLastDayOfMonth		= PrmOneTimeBeginLastDayOfMonth
					invoked.BeginDayForNextMonth	= PrmOneTimeBeginDayForNextMonth
					invoked.DueTime					= PrmOneTimeDueTime
					invoked.DueTimeSensitive		= PrmOneTimeDueTimeSensitive
       				invoked.DueDaysFromPeriodEnd	= PrmOneTimeDueDaysFromPeriodEnd
       				invoked.DueDayOfMonth			= PrmOneTimeDueDayOfMonth
       				invoked.DueLastDayOfMonth		= PrmOneTimeDueLastDayOfMonth
       				invoked.DueDayForNextMonth		= PrmOneTimeDueDayForNextMonth
       				invoked.HoursRequired			= PrmOneTimeHoursRequired
       				invoked.RequiresApproval		= PrmRequiresApproval
       				invoked.ApprovalCode			= PrmApprovalCode
       				invoked.RequireSupportingDoco	= PrmRequireSupportingDoco
					invoked.RequireJournalEntry		= PrmRequireJournalEntry
					invoked.PrimaryTaskType			= PrmPrimaryTaskType
					invoked.SecondaryTaskType		= PrmSecondaryTaskType
					invoked.TertiaryTaskType		= PrmTertiaryTaskType
   
				OneTimeCreatedCloseTask = LocalSaveCloseTask.CloseTask
		

		UpdateCube is an Instance Action

			valid when (DetailLevel)
			restricted
			Action Rules
				if (TaskStatus.Scheduled
				and !OneTimeTaskNeedsApproval
				and IsNotTaskForPeriodReconciliations)
					if (ScheduleForTask.BeginDate <= current corporate date)

						if (DependencyMetric.NoPrereq			
						or  !CannotStartPrereqTaskRel exists) 
							if (TaskOwner entered)
								if (!CloseManagementGroup.StartLateReasonCodeRequired)
									invoke StartWork
