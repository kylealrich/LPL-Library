GLTransactionDetail is a BusinessClass
	owned by GeneralLedger
	prefix is GLTRD
	default label is "GlobalLedgerTransactionDetail"

	Ontology
		symbolic key is GLTransactionDetail
		
	Patterns
		implements StaticJava
		implements InlineUserFields
			size is 1000	
		enable explicit context override
		implements IncrementalReplication
			index update stamp set
			indicator field is ColumnarReplicated
				replicate when false
					then set to true
		implements Archivable

	Persistent Fields
		FinanceEnterpriseGroup
		JournalizeGroup
			disable Auditing
		AccountingEntity
        Status							is Numeric 1
            States
                Unreleased				value is 0
                Released	   			value is 1
                NotToBePosted			value is 8
                History					value is 9
        	disable Auditing
		PostingDate
		ControlDocumentNumber			is Alpha up to 30
		FinanceCodeBlock				is a TransactionCodeBlock
		DimensionCode
		OrganizationKeyFields			is Alpha 75
    	System							is a GeneralLedgerSystemCode
    	JournalCode						is AlphaUpper 6
		GeneralLedgerEvent
			default label is "GlobalLedgerEvent"		
        TransactionDate					is an ExchangeDate
        CurrencyCode					is a FromCurrency
        TransactionAmount				is a CurrencyAmount 

		ReportCurrencyAmount			is a FinanceCurrencyAmount
		AutoReverse						is Boolean
		Resource						is an Employee
			sql name is "FinanceResource"
		VendorGroupAndVendor 			is a GlonlyVendorGroupAndVendor
        Reference
		Description						is Alpha up to 60
		DocumentNumber					is Alpha up to 30
        UnitsAmount						
		APPaid							is AlphaUpper 1
			States
				EligibleForBilling      value is blank
				HoldForBilling          value is "H" 
		RelatedJournalTransaction		is BusinessObjectReference
			disable Auditing
		OriginatingTransaction			is BusinessObjectReference
        BaseZoneAccountingUnit			is a AccountingUnit
        BaseZoneDimension1				is a FinanceDimension1
		ZoneSystemKeyFields				is Alpha 45
        ZoneAccountingUnit				is a AccountingUnit
        	context of FinanceCodeBlock.ToAccountingEntity
        ZoneDimension1					is a FinanceDimension1
		ZoneFields						is Alpha 40
		PostingDateJournalCodeKey		is AlphaUpper 14
		PrimaryLedger					is a Ledger
		Billed							is Numeric 1
            States
                Unprocessed				value is 0
                Invoiced				value is 1

                Processed				value is 3
                Distributed				value is 4
                Hold					value is 5
 		RevenueRecognized				is Numeric 1
            States
                Unprocessed				value is 0
                Processed				value is 1
                Draft					value is 2
                Hold					value is 3
 		Capitalize						is Numeric 1
			States
				Unprocessed 			value is 0
				Processed				value is 1
				Hold					value is 2
		LaborDistribution				is Numeric 1
			States
				Unprocessed				value is 0
				Processed				value is 1
				Distributed				value is 2
		OriginalLaborTransaction		is like GLTransactionDetail
		OriginatingTransactionPeriod	is a GeneralLedgerCalendarPeriod	
		OriginatingTransactionUniqueID	is UniqueID							
		DrillBackLink					is Alpha up to 500
		IndirectBurden					is Numeric 1
			States
				Unprocessed				value is 0
				Draft					value is 1
				Processed				value is 2
		CreatedByFES						is Boolean		
			protected
		FESManuallyUpdated					is Boolean
			protected
		GLTObjectId						is an ObjId			
		HROrganizationUnit				is Numeric size 6
			default label is "OrganizationUnit"		
		PayCode							is AlphaUpper size 20
		Job 							is Numeric size 9
		Position						is Numeric size 9
		MigStatus
		ColumnarReplicated				is Boolean
			disable Auditing
		UpdatedToAssets					is Boolean

	Context Fields
		BypassStructureRelationEdit
		BypassUnitAndAmountEdit
		SearchDateRange					is a DateRange
		SearchGroup						is a GLTransactionDetail group
		PostingDateRange
		ProjectDateRange
		CurrencyTable
		SearchAccountingEntity
		SearchAccountingUnit
		SearchSystemCode
		SearchAccount
		SearchProject
		SearchPostToEntity
		SearchFinanceDimension1
		SearchFinanceDimension2
		SearchFinanceDimension3
		SearchFinanceDimension4
		SearchFinanceDimension5
		SearchFinanceDimension6
		SearchFinanceDimension7
		SearchFinanceDimension8
		SearchFinanceDimension9
		SearchFinanceDimension10
		ColumnarSearchFinanceDimension1Structure	is a FinanceDimension1Structure
		ColumnarSearchFinanceDimension1				is a FinanceDimension1
		ColumnarSearchFinanceDimension2Structure	is a FinanceDimension2Structure
		ColumnarSearchFinanceDimension2				is a FinanceDimension2
		ColumnarSearchFinanceDimension3Structure	is a FinanceDimension3Structure
		ColumnarSearchFinanceDimension3				is a FinanceDimension3
		ColumnarSearchFinanceDimension4Structure	is a FinanceDimension4Structure
		ColumnarSearchFinanceDimension4				is a FinanceDimension4
		ColumnarSearchFinanceDimension5Structure	is a FinanceDimension5Structure
		ColumnarSearchFinanceDimension5				is a FinanceDimension5
		ColumnarSearchFinanceDimension6Structure	is a FinanceDimension6Structure
		ColumnarSearchFinanceDimension6				is a FinanceDimension6
		ColumnarSearchFinanceDimension7Structure	is a FinanceDimension7Structure
		ColumnarSearchFinanceDimension7				is a FinanceDimension7
		ColumnarSearchFinanceDimension8Structure	is a FinanceDimension8Structure
		ColumnarSearchFinanceDimension8				is a FinanceDimension8
		ColumnarSearchFinanceDimension9Structure	is a FinanceDimension9Structure
		ColumnarSearchFinanceDimension9				is a FinanceDimension9
		ColumnarSearchFinanceDimension10Structure	is a FinanceDimension10Structure
		ColumnarSearchFinanceDimension10			is a FinanceDimension10
		ColumnarSearchProjectStructure				is a ProjectStructure
		ColumnarSearchProject						is a Project
		ColumnarSearchAccountingUnitStructure		is a AccountingUnitStructure
		ColumnarSearchAccountingUnit				is a AccountingUnit
		ColumnarSearchReportingChart				is a ReportingChart
		ColumnarSearchGeneralLedgerChartAccount		is a GeneralLedgerChartAccount
#ifdef module ap		
		SearchVendor
		ExcludeAccountingUnit		
		ExcludeAccount
		ExcludeExpenseInvoices
#endif	
#ifdef module intercobilling
		IntercompanyBillingSettlementHeader 
#endif	
#ifdef module am
		ContextAssetInterfaceOptions				is a AssetInterfaceOptions
		BypassProjectEdits
#endif
		
		
	Derived Fields
		DerivedPostingDateJournalCodeKey is a StringField
			type is AlphaUpper 14
			restricted
			PostingDate
			JournalCode
		InterEntityPayablesAccount			is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount = SystemAccount.InterEntityPayables 
			if (SystemAccountRel exists)
				return first SystemAccountRel.GeneralLedgerChartAccount
			else
				LocalSystemAccount = SystemAccount.InterEntityPayablesAndReceivables 
				return first SystemAccountRel.GeneralLedgerChartAccount
		InterEntityReceivablesAccount		is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			LocalSystemAccount = SystemAccount.InterEntityReceivables 
			if (SystemAccountRel exists)
				return first SystemAccountRel.GeneralLedgerChartAccount
			else
				LocalSystemAccount = SystemAccount.InterEntityPayablesAndReceivables 
				return first SystemAccountRel.GeneralLedgerChartAccount
		NewJournalDescription				is a DerivedField
			type is like Description
			restricted
			if (OriginatingTransactionUniqueID entered
			and SystemCodeFromJournalizeGroup	= "RJ")
				if (RecurringJournalTransactionRel exists)
					return RecurringJournalTransactionRel.RecurringJournalDescription
				else
					return RecurringJournalBridgeRel.RecurringJournalDescription
			else
				return DerivedJournalDescription
		SystemCodeFromJournalizeGroup		is a DerivedField
			type is Alpha 2
			restricted
			return JournalizeGroup[1:2] 
		DerivedJournalDescription			is a MessageField
			restricted
			"JournalCreatedByRunGroup<JournalizeGroup>"
		ZoneSystemKeyString					is a StringField
			type is Alpha 45
			restricted
			System
			":"
			BaseZoneAccountingUnit
			":"
			BaseZoneDimension1
		ZoneFieldsString					is a StringField
			type is Alpha 40
			restricted
			ZoneAccountingUnit
			":"
			ZoneDimension1
		DerivedBaseZoneAccountingUnit		is a DerivedField
			type is like AccountingUnit 
			restricted
			if (AccountingEntity.AccountingUnitZoneBalancing)
				if (AUZoneAccountingUnitRel.ZoneAccountingUnit entered)
					return AUZoneAccountingUnitRel.ZoneAccountingUnit
				else
					return DefaultZoneAccountingUnitRel.ZoneAccountingUnit
		DerivedBaseZoneFinanceDimension		is a DerivedField
			type is like FinanceDimension1
			restricted
			if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
				if (FinDim1ZoneDimension1Rel.ZoneDimension entered)
					return FinDim1ZoneDimension1Rel.ZoneDimension
				else
					return DefaultZoneFinanceDimension1Rel.ZoneDimension
		DerivedZoneAccountingUnit			is a DerivedField
			type is like AccountingUnit 
			restricted
			if (AUZoneAccountingUnitRel.ZoneAccountingUnit entered)
				return AUZoneAccountingUnitRel.ZoneAccountingUnit
			else
		        return EntityZoneAccountingUnitRel.AccountingUnit
		DerivedZoneFinanceDimension			is a DerivedField
			type is like FinanceDimension1
			restricted
			if (FinDim1ZoneDimension1Rel.ZoneDimension entered)
        		return FinDim1ZoneDimension1Rel.ZoneDimension
		    else
        		return EnterpriseZoneFinanceDimension1Rel.FinanceDimension1
        DerivedGLTransaction is a DerivedField
        	type is Numeric 12
        	restricted
			return last GLTransactionRel.GeneralLedgerTransaction
		ProjectContractInvoicedAmount is a DerivedField
			type is like InternationalAmount
			restricted
			return sum ProjectContractInvoiceLine set.Amount
		DerivedFunctionalAmount				is a DerivedField
			type is like InternationalAmount
				precision is FinanceCodeBlock.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
			if (AccountingEntity		= FinanceCodeBlock.ToAccountingEntity)
        		return ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
		    else
        		return ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
		Debit is a DerivedField
			type is like InternationalAmount
				precision is FinanceCodeBlock.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
			if (DerivedFunctionalAmount > 0)
        		return DerivedFunctionalAmount
		    else
        		return blank
		Credit is a DerivedField
			type is like InternationalAmount
				precision is FinanceCodeBlock.ToAccountingEntity.FunctionalCurrency.NumberOfDecimals
			if (DerivedFunctionalAmount < 0)
        		return DerivedFunctionalAmount
		    else
        		return blank
		ColumnarProjectAmount is a DerivedField
			type is like InternationalAmount
				precision is FinanceCodeBlock.Project.Currency.NumberOfDecimals
       		return ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
		DerivedAlternateAmount				is a DerivedField
			type is like InternationalAmount
				precision is FinanceCodeBlock.ToAccountingEntity.AlternateCurrency.NumberOfDecimals
			if (AccountingEntity		= FinanceCodeBlock.ToAccountingEntity)
        		return ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
		    else
        		return ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
		DerivedAlternateAmount2				is a DerivedField
			type is like InternationalAmount
				precision is FinanceCodeBlock.ToAccountingEntity.AlternateCurrency2.NumberOfDecimals
			if (AccountingEntity		= FinanceCodeBlock.ToAccountingEntity)
        		return ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
		    else
        		return ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
		DerivedAlternateAmount3				is a DerivedField
			type is like InternationalAmount
				precision is FinanceCodeBlock.ToAccountingEntity.AlternateCurrency3.NumberOfDecimals
			if (AccountingEntity		= FinanceCodeBlock.ToAccountingEntity)
        		return ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
		    else
        		return ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
		DerivedFunctionalCurrencyRate		is a DerivedField
			type is like CurrencyExchangeRate
			if (AccountingEntity		= FinanceCodeBlock.ToAccountingEntity)
        		return ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
		    else
        		return ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate
		DerivedAlternateCurrencyRate		is a DerivedField
			type is like CurrencyExchangeRate
			if (AccountingEntity		= FinanceCodeBlock.ToAccountingEntity)
        		return ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
		    else
        		return ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate

		DerivedAlternate2CurrencyRate		is a DerivedField
			type is like CurrencyExchangeRate
			if (AccountingEntity		= FinanceCodeBlock.ToAccountingEntity)
        		return ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
		    else
        		return ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate
		DerivedAlternate3CurrencyRate		is a DerivedField
			type is like CurrencyExchangeRate
			if (AccountingEntity		= FinanceCodeBlock.ToAccountingEntity)
        		return ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate
		    else
        		return ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate
        		
#ifdef module intercobilling
		DerivedFunctionalCurrency is a DerivedField 
      		type is like Currency
      		default label is "FunctionalCurrency"
      		if (ReportCurrencyAmount.FunctionalAmount.ToCurrency not entered
      		and ReportCurrencyAmount.ToFunctionalAmount.ToCurrency not entered)
      			LocalAssignCurrency = ReportCurrencyAmount.AssignToCurrency
	      		
	  		if (AccountingEntity = FinanceCodeBlock.ToAccountingEntity)
	    		return ReportCurrencyAmount.FunctionalAmount.ToCurrency
		    else
	    		return ReportCurrencyAmount.ToFunctionalAmount.ToCurrency
	    		
	    DerivedAlternateCurrency is a DerivedField 
	  		type is like Currency
	  		default label is "AlternateCurrency"
	  		if (ReportCurrencyAmount.AlternateAmount.ToCurrency not entered
      		and ReportCurrencyAmount.ToAlternateAmount.ToCurrency not entered)
      			LocalAssignCurrency = ReportCurrencyAmount.AssignToCurrency
  			
  			if (AccountingEntity = FinanceCodeBlock.ToAccountingEntity)
	    		return ReportCurrencyAmount.AlternateAmount.ToCurrency
		    else
	    		return ReportCurrencyAmount.ToAlternateAmount.ToCurrency
#endif

#ifdef module ap
		DerivedPOUniqueID is a DerivedField
			type is like UniqueID
			if (FromRNIUpdate)
				return OriginatingTransaction(PurchaseOrderLineDistributionDetail).PurchaseOrderLineDistribution.UniqueID
				
		DerivedEntityYearPeriod			is a DerivedField
			type is Year
			restricted
			return EntityLedgerCurrentPeriodRel.GeneralLedgerClosePeriod.GeneralLedgerCloseYear		
	
		DerivedEntityCalendarPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			restricted
			return first GeneralLedgerCalendarPeriodRel.GeneralLedgerCalendarPeriod
			
		DerivedCompany is a DerivedField
			type is like Company
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice.Company
			else
				if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
					return OriginatingTransaction(InventoryTransactionLineDistribution).Company
				else
					if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
						return OriginatingTransaction(PurchaseOrderLineDistributionDetail).PurchaseOrder.Company
					else
						return ""

		DerivedAPInvoice is a DerivedField
			type is like Invoice
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).Invoice
			return ""
			
		DerivedAPPayablesInvoice is a DerivedField
			type is like Invoice
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice
			return ""
			
		DerivedAPInvoiceType is a DerivedField
			type is like MatchProcessType
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).DerivedInvoiceType
		DerivedExcludeInvoice is a DerivedField
			type is Boolean
			if  ((ExcludeExpenseInvoices = "Y"
			and  !DerivedAPInvoiceType = "E")
			or   !ExcludeExpenseInvoices = "Y")
				return true
		DerivedAPPurchOrder is a DerivedField
			type is like PurchaseOrder
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).PurchaseOrder
			else
				if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
					return OriginatingTransaction(PurchaseOrderLineDistributionDetail).PurchaseOrder
				else
					if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
						return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedPurchaseOrder
					else
						if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
							return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.OriginalPurchaseOrder
						else
							return ""
						
		DerivedInventoryLocation is a DerivedField
			type is like InventoryLocation
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice.Location
			else
				if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
					return OriginatingTransaction(PurchaseOrderLineDistributionDetail).PurchaseOrder.ShipToLocation
				else
					if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
						return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedLocation
					else
						return ""
						
		DerivedGLTranEntityYearPeriod is a DerivedField
			type is like GeneralLedgerCalendarPeriod
			return RelatedJournalTransaction(GeneralLedgerTransaction).GeneralLedgerTransaction.GeneralLedgerCalendarPeriod
			
		DerivedAPVendor is a DerivedField
			type is MessageField
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).DerivedVendorAndName
			else
				if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
					return OriginatingTransaction(PurchaseOrderLineDistributionDetail).DerivedVendorAndName
				else
					if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
						return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.Vendor
					else
						return ""

		DerivedVendorOnly is a DerivedField
			type is like Vendor
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).Vendor
			else
				if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
					return OriginatingTransaction(PurchaseOrderLineDistributionDetail).PurchaseOrder.Vendor
				else
					if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
						return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedVendor
					else
						if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
							return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.Vendor
						else
							return ""

		DerivedVendorGroupOnly is a DerivedField
			type is like VendorGroup
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).Vendor.VendorGroup
			else
				if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
					return OriginatingTransaction(PurchaseOrderLineDistributionDetail).PurchaseOrder.Vendor.VendorGroup
				else
					if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
						return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.Vendor.VendorGroup
					else
						return ""

		DerivedICDocumentType is a DerivedField
			type is like InventoryDocumentType
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedDocumentType
			return ""
			
		DerivedRequestingLocation is a DerivedField
			type is like InventoryLocation
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				if (OriginatingTransaction(InventoryTransactionLineDistribution).DerivedRequestingLocation entered)
					return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedRequestingLocation
				else
					return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedLocation
			else
				return ""
		
		DerivedRequisition		is a DerivedField
			type is like Requisition
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedRequisition
			return ""
			
		DerivedRequisitionLine		is a DerivedField
			type is like RequisitionLine
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedRequisitionLine
			return ""
			
		DerivedRequester			is a DerivedField
			type is like Requester
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedRequester
			return ""
			
		DerivedICInventoryTransaction is a DerivedField
			type is like InventoryTransaction
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).InventoryTransaction
			return ""
		DerivedAPItem is a DerivedField
			type is like Item
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).DerivedItem
			else
				if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
					return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedItem
				else
					if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
						return OriginatingTransaction(PurchaseOrderLineDistributionDetail).DerivedItem
					else
						if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
							return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.Item
						else
							return ""
						
		DerivedAPItemType is a DerivedField
			type is like Item
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).DerivedItemType
			else
				if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
					return "I"	
				else
					if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
						return ""	
					else
						if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
							return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.ItemType
						else
							return ""
						
		DerivedAPItemDesc is a DerivedField
			type is like Description
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).DerivedItemDescription
			else
				if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
					return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedItemDescription
				else
					if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
						return OriginatingTransaction(PurchaseOrderLineDistributionDetail).DerivedItemDescription
					else
						if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
							return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.Description
						else
							return ""
						
		DerivedAPTaxCode is a DerivedField
			type is like TaxCode
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).TaxCode
			else
				if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
					return OriginatingTransaction(PurchaseOrderLineDistributionDetail).DerivedTaxCode
				else
					if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
						return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.TaxCode
					else
						return ""
					
		DerivedAddOnCharge is a DerivedField
			type is like AddOnCharge
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).AddOnCharge
			return ""
		DerivedAPQuantity is a DerivedField
			type is like Quantity
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).DerivedQuantity
			else
				if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
					return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedReceivedQuantity		
				else
					if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
						return OriginatingTransaction(PurchaseOrderLineDistributionDetail).DerivedOrderedQuantity
					else
						if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
							return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.ReturnQuantity
						else
							return ""

		DerivedReceivedQuantity is a DerivedField
			type is like Quantity
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
				return OriginatingTransaction(PurchaseOrderLineDistributionDetail).DerivedReceivedQuantity
			else
				if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
					return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedReceivedQuantity	
				else
					return ""
				
		DerivedAPUom is a DerivedField
			type is like UnitOfMeasure
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).DerivedUOM
			else
				if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
					return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedUOM			
				else
					if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
						return OriginatingTransaction(PurchaseOrderLineDistributionDetail).DerivedUOM
					else
						if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
							return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.EnteredUOM
						else
							return ""
						
		DerivedAPUnitCost is a DerivedField
			type is like UnitCost
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).DerivedUnitCost	
			else
				if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
					return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedLineUnitCost					
				else
					if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
						return OriginatingTransaction(PurchaseOrderLineDistributionDetail).DerivedUnitCost
					else
						if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
							return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.UnitCost
						else
							return ""
						
		DerivedOrigICDocument is a DerivedField
			type is Numeric 10
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).OriginatingTransactionDocument
			return ""
		DerivedOrigICLine is a DerivedField
			type is Numeric 6
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).OriginatingTransactionLine
			return ""
		DerivedICPostingType is a DerivedField
			type is like PostingType
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).PostingType
			return ""

		DerivedLineNumber is a DerivedField
			type is like LineNumber
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
				return OriginatingTransaction(PurchaseOrderLineDistributionDetail).DerivedLineNumber
			else
				if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
					return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.OriginalPurchaseOrderLine
				else
					if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
						return OriginatingTransaction(InventoryTransactionLineDistribution).OriginatingTransactionLine
					else
						if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
							return OriginatingTransaction(PayablesInvoiceDistribution).PurchaseOrderLine
						else
							return ""

		DerivedBuyer is a DerivedField
			type is like Buyer
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
				return OriginatingTransaction(PurchaseOrderLineDistributionDetail).DerivedBuyer
			else
				if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
					return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedBuyer
				else
					if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
							return OriginatingTransaction(PayablesInvoiceDistribution).PurchaseOrder.Buyer
					else
						if (OriginatingTransaction.BusinessClassName = "VendorReturnLineDistribution")
							return OriginatingTransaction(VendorReturnLineDistribution).VendorReturnLine.OriginalPurchaseOrder.Buyer
						else
							return ""

		DerivedLineAmount is a DerivedField
			type is like CurrencyAmount
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).DistributionAmount.CurrencyAmount
			else
				if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
					return OriginatingTransaction(PurchaseOrderLineDistributionDetail).DerivedExtendedAmount
				else
					if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
						return OriginatingTransaction(InventoryTransactionLineDistribution).DerivedExtendedAmount
					else
						return ""
								

		DerivedContextMessageEntityType is a DerivedField
			type is MessageField
			restricted
			if (OriginatingTransaction.BusinessClassName = "AssetTransaction")
				return OriginatingTransaction(AssetTransaction).Asset.ContextMessageEntityType
			else
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice.ContextMessageEntityType
			else 
			if (OriginatingTransaction.BusinessClassName = "ReceivableGLDistribution")
				return OriginatingTransaction(ReceivableGLDistribution).ReceivableInvoiceRel.ContextMessageEntityType
			else
			if (OriginatingTransaction.BusinessClassName = "BillingGLDistribution")
				return OriginatingTransaction(BillingGLDistribution).BillingInvoice.ContextMessageEntityType
			else
			if (OriginatingTransaction.BusinessClassName = "CashLedgerGLDistribution")
				return OriginatingTransaction(CashLedgerGLDistribution).CashCode.ContextMessageEntityType
			else
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).InventoryTransaction.ContextMessageEntityType
			else
			if (OriginatingTransaction.BusinessClassName = "GeneralLedgerTransaction")
				return OriginatingTransaction(GeneralLedgerTransaction).GeneralLedgerJournalControl.ContextMessageEntityType
				
		DerivedContextMessageText is a DerivedField
			type is MessageField
			restricted
			if (OriginatingTransaction.BusinessClassName = "AssetTransaction")
				return OriginatingTransaction(AssetTransaction).Asset.ContextMessageText
			else
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice.ContextMessageText
			else 
			if (OriginatingTransaction.BusinessClassName = "ReceivableGLDistribution")
				return OriginatingTransaction(ReceivableGLDistribution).ReceivableInvoiceRel.ContextMessageText
			else
			if (OriginatingTransaction.BusinessClassName = "BillingGLDistribution")
				return OriginatingTransaction(BillingGLDistribution).BillingInvoice.ContextMessageText
			else
			if (OriginatingTransaction.BusinessClassName = "CashLedgerGLDistribution")
				return OriginatingTransaction(CashLedgerGLDistribution).CashCode.ContextMessageText
			else
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).InventoryTransactionLine.ContextMessageText
			else
			if (OriginatingTransaction.BusinessClassName = "GeneralLedgerTransaction")
				return OriginatingTransaction(GeneralLedgerTransaction).GeneralLedgerJournalControl.ContextMessageText
				

		DerivedId1 is a DerivedField
			type is Alpha 10
			if (OriginatingTransaction.BusinessClassName = "AssetTransaction")
				return OriginatingTransaction(AssetTransaction).FinanceEnterpriseGroup
			else
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).Company
			else 
			if (OriginatingTransaction.BusinessClassName = "ReceivableGLDistribution")
				return OriginatingTransaction(ReceivableGLDistribution).ReceivableInvoiceRel.Company
			else
			if (OriginatingTransaction.BusinessClassName = "BillingGLDistribution")
				return OriginatingTransaction(BillingGLDistribution).Company
			else
			if (OriginatingTransaction.BusinessClassName = "CashLedgerGLDistribution")
				return OriginatingTransaction(CashLedgerGLDistribution).CashManagementGroup
			else
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).InventoryLocation
			else
			if (OriginatingTransaction.BusinessClassName = "GeneralLedgerTransaction")
				return OriginatingTransaction(GeneralLedgerTransaction).FinanceEnterpriseGroup
				
		DerivedId2 is a DerivedField
			type is Alpha 20
			if (OriginatingTransaction.BusinessClassName = "AssetTransaction")
				return OriginatingTransaction(AssetTransaction).Asset
			else
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice
			else 
			if (OriginatingTransaction.BusinessClassName = "ReceivableGLDistribution")
				return OriginatingTransaction(ReceivableGLDistribution).ReceivableInvoiceRel.ReceivableInvoiceType
			else
			if (OriginatingTransaction.BusinessClassName = "BillingGLDistribution")
				return OriginatingTransaction(BillingGLDistribution).BillingInvoice.InvoicePrefix
			else
			if (OriginatingTransaction.BusinessClassName = "CashLedgerGLDistribution")
				return OriginatingTransaction(CashLedgerGLDistribution).CashCode
			else
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).InventoryTransaction
			else
			if (OriginatingTransaction.BusinessClassName = "GeneralLedgerTransaction")
				return JournalizeGroup
				
		DerivedId3 is a DerivedField
			type is Alpha 20
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).Vendor
			else 
			if (OriginatingTransaction.BusinessClassName = "ReceivableGLDistribution")
				return OriginatingTransaction(ReceivableGLDistribution).ReceivableInvoiceRel.ReceivableInvoice
			else
			if (OriginatingTransaction.BusinessClassName = "BillingGLDistribution")
				return OriginatingTransaction(BillingGLDistribution).BillingInvoice.InvoiceNumber
			else
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).TransactionSystemCode
			else
			if (OriginatingTransaction.BusinessClassName = "GeneralLedgerTransaction")
				return OriginatingTransaction(GeneralLedgerTransaction).AccountingEntity
			else
				return blank
		
		DerivedId4 is a DerivedField
			type is Alpha 22
			if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
				return OriginatingTransaction(PayablesInvoiceDistribution).Invoice
			else
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).InventoryTransactionLine.WarehouseShipment
			else
			if (OriginatingTransaction.BusinessClassName = "GeneralLedgerTransaction")
				return OriginatingTransaction(GeneralLedgerTransaction).GeneralLedgerJournalControl.PostingDate
			else
				return blank
				
		DerivedId5 is a DerivedField
			type is Alpha 6
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).InventoryTransactionLine.LineNumber
			else
				return blank
				
		DerivedId6 is a DerivedField
			type is Alpha 3
			if (OriginatingTransaction.BusinessClassName = "InventoryTransactionLineDistribution")
				return OriginatingTransaction(InventoryTransactionLineDistribution).InventoryTransactionLine.ComponentSequence
			else
				return blank
#endif
#ifdef module po
		DerivedPOLine is a DerivedField
			type is like PurchaseOrderLine
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
				return OriginatingTransaction(PurchaseOrderLineDistributionDetail).PurchaseOrderLine
			else
				return ""
		
		DerivedPurchaseLoc is a DerivedField
			type is like PurchaseFromLocation
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
				return OriginatingTransaction(PurchaseOrderLineDistributionDetail).PurchaseOrderLine.PurchaseFromLocation									
			else
				return ""
		
		DerivedRNIQuantity is a DerivedField
			type is like Quantity
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
				return OriginatingTransaction(PurchaseOrderLineDistributionDetail).PurchaseOrderLine.DerivedReceivedNotInvoicedQuantity
			else
				return ""
				
		DerivedWorkOrderNum is a DerivedField
			type is Alpha 30
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
				return OriginatingTransaction(PurchaseOrderLineDistributionDetail).PurchaseOrderLine.EAMWorkOrder
			else
				return ""
				
		DerivedProjectNum is a DerivedField
			type is Alpha 20
			if (OriginatingTransaction.BusinessClassName = "PurchaseOrderLineDistributionDetail")
				return OriginatingTransaction(PurchaseOrderLineDistributionDetail).PurchaseOrderLine.EAMWorkOrder.ProjectID			
			else
				return ""
#endif					
	Transient Fields
		ZoneFinanceCodeBlock				is a FinanceCodeBlock
		JournalByJournalCode
		BypassNegativeRateEdit 
		TransientSkipAttachRule				is a SkipAttachRule			
#ifdef module ap		
		TransientVendorOnly				is like Vendor
			derive value from DerivedVendorOnly
		TransientInvoiceType			is like MatchProcessType
			derive value from DerivedAPInvoiceType
		TransientVendorGroup			is like VendorGroup
			disable surrogates
			derive value from DerivedVendorGroupOnly
#endif
		TransientDefaultCurrencyAmount is Boolean
		SkipFESExpenditures				is Boolean
		BypassActiveCodeBlockEdit
		
	Local Fields
		LocalSystemAccount				is a SystemAccount
		LocalAccountingEntity			is like AccountingEntity
		LocalCurrencyTable				is a CurrencyTable
		LocalCurrencyCalculationGroup	is a CurrencyCalculationGroup		
		LocalClosePeriod				is a GeneralLedgerClosePeriod
		LocalJournalControl				is like GeneralLedgerJournalControl
		LocalCurrencyCode				is like Currency
		LocalSystemCode					is like GeneralLedgerSystemCode
		LocalTransactionDate			is Date
		LocalAutoReverse				is Boolean
		LocalPostAccountingEntity		is like ToAccountingEntity
		LocalBypassStructureRelationEdit is a BypassStructureRelationEdit
	    LocalInstZoneAccountingUnit		is like AccountingUnit
		LocalInstZoneDimension1			is a FinanceDimension1
	    LocalInstAccountingUnit			is like AccountingUnit
		LocalInstFinanceDimension1		is like FinanceDimension1
		LocalEntity						is a AccountingUnitTopNodeGroup
		LocalGeneralLedgerChartAccount		is a GeneralLedgerChartAccount
		LocalAmountIsPositive			is Boolean 
		LocalIntEntTransactionAmount	is an InternationalAmount
		LocalIntEntFunctionalAmount		is an InternationalAmount
		LocalIntEntAlternateAmount		is an InternationalAmount
		LocalIntEntAlternateAmount2		is an InternationalAmount
		LocalIntEntAlternateAmount3		is an InternationalAmount
		LocalIntEntReportAmount1		is an InternationalAmount
		LocalIntEntReportAmount2		is an InternationalAmount
		LocalIntEntReportAmount3		is an InternationalAmount
		LocalIntEntReportAmount4		is an InternationalAmount
		LocalIntEntReportAmount5		is an InternationalAmount
		LocalIntEntUnits				is an UnitsAmount
#ifdef module ap
		LocalEndDate					is a GeneralLedgerCalendarPeriod
		LocalExpensePostingDate			is Date
		LocalPOObjectReference			is BusinessObjectReference
        TotalGroup						is a GLExpenseTotalGroup
#endif
#ifdef module intercobilling
		LocalICBSettlementHeader		is like IntercompanyBillingSettlementHeader 
		LocalAssignCurrency				is Boolean 
#endif
		LocalFESAmount					is like InternationalAmount
		LocalProjectContract			is like Project
		LocalFinanceEnterpriseGroup			is like FinanceEnterpriseGroup
		LocalPostingDate					is like PostingDate
		LocalIncludeProjectRecordsInPurge	is Boolean
		LocalStatus							is Numeric 1
		LocalSystemCodeSelectionOption		is Numeric 1
		LocalGeneralLedgerSystemCode		is like GeneralLedgerSystemCode
		LocalRecordType						is a RecordType
	Sets
		ByRelatedJournalTransaction
    		duplicates
			Sort Order
				RelatedJournalTransaction 
		ByOriginatingTransaction
			bypass no duplicates validation
			Sort Order
				OriginatingTransaction 
		ByJournalizeGroup
			Sort Order
				FinanceEnterpriseGroup
				JournalizeGroup
				Status
				AccountingEntity
				ZoneSystemKeyFields  
				FinanceCodeBlock.Ledger
				PostingDateJournalCodeKey 
				FinanceCodeBlock.ToAccountingEntity
				CurrencyCode
				ZoneFields
				GeneralLedgerEvent
				OrganizationKeyFields 
				DimensionCode
				TransactionDate
				AutoReverse
				GLTransactionDetail
		ByResourceAndDate
			duplicates
			Sort Order
			 	FinanceEnterpriseGroup
			 	Resource
			 	FinanceCodeBlock.Project
			 	TransactionDate

		TransactionsByProject
			Sort Order
			 	FinanceEnterpriseGroup
			 	FinanceCodeBlock.Project
			 	PostingDate descending
			 	TransactionDate
			 	GLTransactionDetail

				
		BySystemAndCodeBlock
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				System
				FinanceCodeBlock.AccountingUnit
				FinanceCodeBlock.GeneralLedgerChartAccount

		ByEntityAccountingUnit
			Sort Order
				FinanceEnterpriseGroup
				AccountingEntity
				FinanceCodeBlock.AccountingUnit
				PostingDate descending
				GLTransactionDetail
				
		ByAccount
			Sort Order
				FinanceEnterpriseGroup
				FinanceCodeBlock.GeneralLedgerChartAccount
				PostingDate descending
				GLTransactionDetail

		PurgeHistoryDetailSortSet
			duplicates
			Sort Order
				FinanceEnterpriseGroup
				Status
				AccountingEntity              
				OriginatingTransaction.BusinessClassName
				PostingDate
				FinanceCodeBlock.Ledger
				PrimaryLedger
				OriginatingTransaction.BusinessObjectKey
				OriginatingTransactionUniqueID
				GLTransactionDetail







				
	Relations
#ifdef module ap
		GeneralLedgerCalendarPeriodRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Date 			not < LocalExpensePostingDate		
				and	   related.PeriodType.EndDate)
				
		EntityLedgerPeriodRel
			one-to-many relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= FinanceCodeBlock.ToAccountingEntity
				related.Ledger						= FinanceCodeBlock.Ledger
			Instance Selection
				where (related.GeneralLedgerClosePeriod.GeneralLedgerCalendarPeriod	not < LocalEndDate)
#endif								
		EntityLedgerCurrentPeriodRel
			one-to-one relation to EntityLedgerPeriod
			Field Mapping uses ByEntityLedger
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= FinanceCodeBlock.ToAccountingEntity
				related.Ledger						= FinanceCodeBlock.Ledger
				related.GeneralLedgerClosePeriod	= FinanceCodeBlock.ToAccountingEntity.CurrentPeriod
		JournalControlExistsRel
			one-to-one relation to GeneralLedgerJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= LocalAccountingEntity
				related.GeneralLedgerClosePeriod			= LocalClosePeriod
				related.GeneralLedgerJournalControl			= LocalJournalControl
		JournalControlRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= LocalAccountingEntity
		GLCurrencyJournalControlRel
			one-to-one relation to GLCurrencyJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= LocalAccountingEntity
				related.GeneralLedgerClosePeriod			= LocalClosePeriod
				related.GeneralLedgerJournalControl			= LocalJournalControl
				related.FromCurrency						= LocalCurrencyCode
		SystemAccountRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses BySystemAccount
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.SystemAccount						= LocalSystemAccount
		SystemAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses BySystemAccountingUnitInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingUnitStructure				= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity					= LocalAccountingEntity
		InterEntityAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses ByInterEntityAccountingUnitInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingUnitStructure				= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity					= LocalAccountingEntity
		FinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension1Structure			= FinanceEnterpriseGroup.EnterpriseDim1Structure
		FinanceDimension2Rel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension2Structure			= FinanceEnterpriseGroup.EnterpriseDim2Structure
		FinanceDimension3Rel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension3Structure			= FinanceEnterpriseGroup.EnterpriseDim3Structure
		FinanceDimension4Rel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension4Structure			= FinanceEnterpriseGroup.EnterpriseDim4Structure
		FinanceDimension5Rel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension5Structure			= FinanceEnterpriseGroup.EnterpriseDim5Structure
		FinanceDimension6Rel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension6Structure			= FinanceEnterpriseGroup.EnterpriseDim6Structure
		FinanceDimension7Rel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension7Structure			= FinanceEnterpriseGroup.EnterpriseDim7Structure
		FinanceDimension8Rel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension8Structure			= FinanceEnterpriseGroup.EnterpriseDim8Structure
		FinanceDimension9Rel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension9Structure			= FinanceEnterpriseGroup.EnterpriseDim9Structure
		FinanceDimension10Rel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses BySystemDimensionInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension10Structure			= FinanceEnterpriseGroup.EnterpriseDim10Structure
		GLInterEntityTotalUpdateRel
			one-to-one relation to GLInterEntityTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= LocalAccountingEntity
				related.GeneralLedgerClosePeriod			= LocalClosePeriod
				related.GeneralLedgerJournalControl			= LocalJournalControl
				related.GLInterEntityTotal.ToAccountingEntity	= LocalPostAccountingEntity
				related.GLInterEntityTotal.CurrencyCode		= LocalCurrencyCode
				related.GLInterEntityTotal.AutoReverse		= LocalAutoReverse
		GLInterEntityTotalRel
			one-to-many relation to GLInterEntityTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= LocalAccountingEntity
				related.GeneralLedgerClosePeriod			= LocalClosePeriod
				related.GeneralLedgerJournalControl			= LocalJournalControl
			Instance Selection
				where (related.Status.Unreleased
				and    related.AmountsExist)
		EntityZoneAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses ByEntityZoneAccountingUnitInStructure
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingUnitStructure				= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity					= LocalAccountingEntity
		DefaultZoneAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses ByDefaultZoneAccountingUnitInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingUnitStructure		= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity			= LocalAccountingEntity
		AUZoneAccountingUnitRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AccountingUnitStructure 	= FinanceEnterpriseGroup.EnterpriseAUStructure
				related.AccountingEntity			= LocalAccountingEntity
				related.AccountingUnit		    	= LocalInstAccountingUnit
		EnterpriseZoneFinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses ByEnterpriseZoneDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceEnterpriseGroup.EnterpriseDim1Structure
		FinDim1ZoneDimension1Rel
			one-to-many relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceEnterpriseGroup.EnterpriseDim1Structure
				related.FinanceDimension1			= LocalInstFinanceDimension1
		ColumnarSearchFinanceDimension1HierarchyRel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= ColumnarSearchFinanceDimension1Structure
				related.FinanceDimension1			= FinanceCodeBlock.FinanceDimension1

		ColumnarSearchFinanceDimension2HierarchyRel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension2Structure	= ColumnarSearchFinanceDimension2Structure
				related.FinanceDimension2			= FinanceCodeBlock.FinanceDimension2

		ColumnarSearchFinanceDimension3HierarchyRel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure	= ColumnarSearchFinanceDimension3Structure
				related.FinanceDimension3			= FinanceCodeBlock.FinanceDimension3

		ColumnarSearchFinanceDimension4HierarchyRel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure	= ColumnarSearchFinanceDimension4Structure
				related.FinanceDimension4			= FinanceCodeBlock.FinanceDimension4

		ColumnarSearchFinanceDimension5HierarchyRel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure	= ColumnarSearchFinanceDimension5Structure
				related.FinanceDimension5			= FinanceCodeBlock.FinanceDimension5

		ColumnarSearchFinanceDimension6HierarchyRel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure	= ColumnarSearchFinanceDimension6Structure
				related.FinanceDimension6			= FinanceCodeBlock.FinanceDimension6

		ColumnarSearchFinanceDimension7HierarchyRel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure	= ColumnarSearchFinanceDimension7Structure
				related.FinanceDimension7			= FinanceCodeBlock.FinanceDimension7

		ColumnarSearchFinanceDimension8HierarchyRel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure	= ColumnarSearchFinanceDimension8Structure
				related.FinanceDimension8			= FinanceCodeBlock.FinanceDimension8

		ColumnarSearchFinanceDimension9HierarchyRel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure	= ColumnarSearchFinanceDimension9Structure
				related.FinanceDimension9			= FinanceCodeBlock.FinanceDimension9

		ColumnarSearchFinanceDimension10HierarchyRel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure	= ColumnarSearchFinanceDimension10Structure
				related.FinanceDimension10			= FinanceCodeBlock.FinanceDimension10

		ColumnarSearchProjectHierarchyRel
			one-to-one relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ProjectStructure			= ColumnarSearchProjectStructure
				related.Project						= FinanceCodeBlock.Project

		ColumnarSearchAccountingUnitHierarchyRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingUnitStructure		= ColumnarSearchAccountingUnitStructure
				related.AccountingEntity			= FinanceCodeBlock.ToAccountingEntity
				related.AccountingUnit				= FinanceCodeBlock.AccountingUnit

		ColumnarSearchReportingChartAccountRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.ReportingChart				= ColumnarSearchReportingChart
				related.GeneralLedgerChartAccount	= FinanceCodeBlock.GeneralLedgerChartAccount

		DefaultZoneFinanceDimension1Rel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses ByDefaultZoneDimensionInStructure
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceEnterpriseGroup.EnterpriseDim1Structure
		GeneralLedgerZoneTotalRel
			one-to-one relation to GeneralLedgerZoneTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.AccountingEntity							= LocalAccountingEntity
				related.GeneralLedgerClosePeriod					= LocalClosePeriod
				related.GeneralLedgerJournalControl					= LocalJournalControl
				related.GeneralLedgerZoneTotal.Currency				= LocalCurrencyCode
				related.GeneralLedgerZoneTotal.ZoneAccountingUnit	= LocalInstZoneAccountingUnit
				related.GeneralLedgerZoneTotal.ZoneFinanceDimension	= LocalInstZoneDimension1
		GLTransactionRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.AccountingEntity							= LocalAccountingEntity
				related.GeneralLedgerClosePeriod					= LocalClosePeriod
				related.GeneralLedgerJournalControl					= LocalJournalControl
		SystemClosingControlRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AccountingEntity	 		= LocalAccountingEntity
				related.GeneralLedgerSystemCode		= System
		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup          = FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode         = LocalSystemCode
		GLCommitRel
			one-to-one relation to GLCommit
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction  = OriginatingTransaction
#ifdef module ap
		GLCommitPORel
			one-to-one relation to GLCommit
			Field Mapping uses ByOriginatingTransaction
				related.OriginatingTransaction = LocalPOObjectReference
#endif
		RecurringJournalTransactionRel
			one-to-one relation to RecurringJournalTransaction
			Field Mapping uses ByUniqueID
				related.UniqueID		  = OriginatingTransactionUniqueID
		RecurringJournalBridgeRel
			one-to-one relation to RecurringJournalBridge
			Field Mapping uses ByUniqueID
				related.UniqueID		  = OriginatingTransactionUniqueID
		OriginalLaborTransactionRel
			one-to-one relation to GLTransactionDetail
			Field Mapping uses symbolic key
				related.GLTransactionDetail = OriginalLaborTransaction
		PurgeHistoryDetailRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses PurgeHistoryDetailSortSet
				related.FinanceEnterpriseGroup						= LocalFinanceEnterpriseGroup
				related.Status										= LocalStatus
				related.AccountingEntity							= LocalAccountingEntity
				related.OriginatingTransaction.BusinessClassName	= "GLTransactionDetail"
				related.PostingDate									= LocalPostingDate
			Instance Selection
				where (related.OriginatingTransactionUniqueID		= blank
				and   (LocalIncludeProjectRecordsInPurge			= true
				or    (LocalIncludeProjectRecordsInPurge			= false
				and    FinanceCodeBlock.Project 					not entered)))
		
		PurgeNotToBePostedDetailRel
			one-to-many relation to GLTransactionDetail
			Field Mapping uses PurgeHistoryDetailSortSet
				related.FinanceEnterpriseGroup						= LocalFinanceEnterpriseGroup
				related.Status										= LocalStatus
				related.AccountingEntity							= LocalAccountingEntity
			Instance Selection
				where (related.PostingDate							= LocalPostingDate)
				
    	ProjectContractInvoiceRevenueRel is a ProjectContractInvoiceLine set
    		Instance Selection
    			where (related.ProjectContractInvoice.InvoiceType.RevenueRecognition
    			and    related.FeeCode not entered)
    			
    	ProjectContractInvoiceBillRel is a ProjectContractInvoiceLine set
    		Instance Selection
    			where (related.ProjectContractInvoice.InvoiceType.Bill
    			and    related.FeeCode not entered)

    	ProjectContractInvoiceRevenueFeesRel is a ProjectContractInvoiceLine set
    		Instance Selection
    			where (related.ProjectContractInvoice.InvoiceType.RevenueRecognition
    			and    related.FeeCode entered)
    			
    	ProjectContractInvoiceBillFeesRel is a ProjectContractInvoiceLine set
    		Instance Selection
    			where (related.ProjectContractInvoice.InvoiceType.Bill
    			and    related.FeeCode entered)

		ProjectContractPartialBillRel is a ProjectContractPartialTransaction set
			Instance Selection
				where (related.RecordType.Bill)

		ProjectContractPartialRevenueRel is a ProjectContractPartialTransaction set
			Instance Selection
				where (related.RecordType.Revenue)

		AccountingEntitySecurityGroupMemberRel
			one-to-one relation to AccountingEntityGroupMember
			Field Mapping uses part of key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AccountingEntityGroup	= actor.context.AccountingEntitySecurityGroup.FinanceDimensionStructure
				related.AccountingEntity		= AccountingEntity
				
		SystemClosingControlRJRel
			one-to-one relation to SystemClosingControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AccountingEntity	 		= AccountingEntity
				related.GeneralLedgerSystemCode		= "RJ"			
				
#ifdef module ap
		GLProcurementExpenseRel
			one-to-one relation to GLProcurementExpense
			Field Mapping uses ByGLTranSource
				related.GLTranSource			= reference to this instance
#endif
		ProjectFundingSourceRel
			one-to-one relation to ProjectFundingSource
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= FinanceCodeBlock.Project.ParentDisplayContractRel.Project
				related.FinanceDimension2		= FinanceCodeBlock.FinanceDimension2	
		ProjectFundingSourceFESRel
			one-to-one relation to ProjectFundingSource
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.ProjectContract			= LocalProjectContract
				related.FinanceDimension2		= FinanceCodeBlock.FinanceDimension2
#ifdef module am
		ProjectAssetinterfaceRel
			one-to-one relation to ProjectAssetInterface
    		Field Mapping uses ByGLTransactionDetail
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
    			related.GLTransactionDetail		= GLTransactionDetail

		ProjectAssetInterfaceRunGroupRel
			one-to-many relation to ProjectAssetInterface
			Field Mapping uses ByRunGroup
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.AssetInterfaceOptions	= ContextAssetInterfaceOptions
#endif
 	Conditions
#ifdef module ap
		FromRNIUpdate
			when (System = "PO"
			and   GeneralLedgerEvent = "PO"
			and   Reference = "ReceivedNotInvoiced")
		MatchesAccountingEntitySearch
			when ((SearchAccountingEntity entered
			and   AccountingEntity within SearchAccountingEntity.AccountingEntityGroup)
			or   (!SearchAccountingEntity entered))
		MatchesPostToEntitySearch
			when ((SearchPostToEntity entered
			and   FinanceCodeBlock.ToAccountingEntity within SearchPostToEntity.PostToEntityGroup)
			or   (!SearchPostToEntity entered))
		MatchesAccountingUnitSearch
			when ((!SearchAccountingUnit entered)
			or   ((ExcludeAccountingUnit = "Y"
			and    FinanceCodeBlock.AccountingUnit not within SearchAccountingUnit.AccountingUnitGroup)
			or    (!ExcludeAccountingUnit = "Y"
			and    FinanceCodeBlock.AccountingUnit within SearchAccountingUnit.AccountingUnitGroup)))
		MatchesValidSystems
			when (System = "AP"
			or    System = "IC"
			or    System = "PO")
		PostingWithinDateRange
			when ((SearchDateRange entered
			and    PostingDate within SearchDateRange)
			or    (!SearchDateRange entered))
		NotSystemTransactionEvents
			when (!GeneralLedgerEvent = "CB"
			and   !GeneralLedgerEvent = "AB"
			and   !GeneralLedgerEvent = "JE"
			and   !GeneralLedgerEvent = "ZB"
			and   !GeneralLedgerEvent = "ES")
		MatchesSystemCodeSearch
			when ((SearchSystemCode entered
			and    System within SearchSystemCode.SystemCodeGroup)
			or    (!SearchSystemCode entered))
		MatchesAccountSearch
			when ((!SearchAccount entered)
			or   ((ExcludeAccount = "Y"
			and    FinanceCodeBlock.GeneralLedgerChartAccount not within SearchAccount.AccountGroup)
			or	  (!ExcludeAccount = "Y"
			and    FinanceCodeBlock.GeneralLedgerChartAccount within SearchAccount.AccountGroup)))
		MatchesProjectSearch
			when ((!SearchProject entered)
			or	  (FinanceCodeBlock.Project within SearchProject.ProjectGroup))
		MatchesFinDim1Search
			when ((!SearchFinanceDimension1 entered)
			or	  (FinanceCodeBlock.FinanceDimension1 within SearchFinanceDimension1.FinanceDimension1Group))
		MatchesFinDim2Search
			when ((!SearchFinanceDimension2 entered)
			or	  (FinanceCodeBlock.FinanceDimension2 within SearchFinanceDimension2.FinanceDimension2Group))
		MatchesFinDim3Search
			when ((!SearchFinanceDimension3 entered)
			or	  (FinanceCodeBlock.FinanceDimension3 within SearchFinanceDimension3.FinanceDimension3Group))
		MatchesFinDim4Search
			when ((!SearchFinanceDimension4 entered)
			or	  (FinanceCodeBlock.FinanceDimension4 within SearchFinanceDimension4.FinanceDimension4Group))
		MatchesFinDim5Search
			when ((!SearchFinanceDimension5 entered)
			or	  (FinanceCodeBlock.FinanceDimension5 within SearchFinanceDimension5.FinanceDimension5Group))
		MatchesFinDim6Search
			when ((!SearchFinanceDimension6 entered)
			or	  (FinanceCodeBlock.FinanceDimension6 within SearchFinanceDimension6.FinanceDimension6Group))
		MatchesFinDim7Search
			when ((!SearchFinanceDimension7 entered)
			or	  (FinanceCodeBlock.FinanceDimension7 within SearchFinanceDimension7.FinanceDimension7Group))
		MatchesFinDim8Search
			when ((!SearchFinanceDimension8 entered)
			or	  (FinanceCodeBlock.FinanceDimension8 within SearchFinanceDimension8.FinanceDimension8Group))
		MatchesFinDim9Search
			when ((!SearchFinanceDimension9 entered)
			or	  (FinanceCodeBlock.FinanceDimension9 within SearchFinanceDimension9.FinanceDimension9Group))
		MatchesFinDim10Search
			when ((!SearchFinanceDimension10 entered)
			or	  (FinanceCodeBlock.FinanceDimension10 within SearchFinanceDimension10.FinanceDimension10Group))
#endif
		MatchesColumnarSearchFinanceDimensions
			when (MatchesColumnarSearchFinanceDimension1
			and   MatchesColumnarSearchFinanceDimension2
			and   MatchesColumnarSearchFinanceDimension3
			and   MatchesColumnarSearchFinanceDimension4
			and   MatchesColumnarSearchFinanceDimension5
			and   MatchesColumnarSearchFinanceDimension6
			and   MatchesColumnarSearchFinanceDimension7
			and   MatchesColumnarSearchFinanceDimension8
			and   MatchesColumnarSearchFinanceDimension9
			and   MatchesColumnarSearchFinanceDimension10)
		MatchesColumnarSearchFinanceDimension1
			when ((ColumnarSearchFinanceDimension1Structure not entered
			and   ColumnarSearchFinanceDimension1 not entered)
			or   ((ColumnarSearchFinanceDimension1Structure entered
			and   ColumnarSearchFinanceDimension1 entered)
			and  (ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension1
			or    ColumnarSearchFinanceDimension1HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension1)))
		MatchesColumnarSearchFinanceDimension2
			when ((ColumnarSearchFinanceDimension2Structure not entered
			and   ColumnarSearchFinanceDimension2 not entered)
			or   ((ColumnarSearchFinanceDimension2Structure entered
			and   ColumnarSearchFinanceDimension2 entered)
			and  (ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension2
			or    ColumnarSearchFinanceDimension2HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension2)))
		MatchesColumnarSearchFinanceDimension3
			when ((ColumnarSearchFinanceDimension3Structure not entered
			and   ColumnarSearchFinanceDimension3 not entered)
			or   ((ColumnarSearchFinanceDimension3Structure entered
			and   ColumnarSearchFinanceDimension3 entered)
			and  (ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension3
			or    ColumnarSearchFinanceDimension3HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension3)))
		MatchesColumnarSearchFinanceDimension4
			when ((ColumnarSearchFinanceDimension4Structure not entered
			and   ColumnarSearchFinanceDimension4 not entered)
			or   ((ColumnarSearchFinanceDimension4Structure entered
			and   ColumnarSearchFinanceDimension4 entered)
			and  (ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension4
			or    ColumnarSearchFinanceDimension4HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension4)))
		MatchesColumnarSearchFinanceDimension5
			when ((ColumnarSearchFinanceDimension5Structure not entered
			and   ColumnarSearchFinanceDimension5 not entered)
			or   ((ColumnarSearchFinanceDimension5Structure entered
			and   ColumnarSearchFinanceDimension5 entered)
			and  (ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension5
			or    ColumnarSearchFinanceDimension5HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension5)))
		MatchesColumnarSearchFinanceDimension6
			when ((ColumnarSearchFinanceDimension6Structure not entered
			and   ColumnarSearchFinanceDimension6 not entered)
			or   ((ColumnarSearchFinanceDimension6Structure entered
			and   ColumnarSearchFinanceDimension6 entered)
			and  (ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension6
			or    ColumnarSearchFinanceDimension6HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension6)))
		MatchesColumnarSearchFinanceDimension7
			when ((ColumnarSearchFinanceDimension7Structure not entered
			and   ColumnarSearchFinanceDimension7 not entered)
			or   ((ColumnarSearchFinanceDimension7Structure entered
			and   ColumnarSearchFinanceDimension7 entered)
			and  (ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension7
			or    ColumnarSearchFinanceDimension7HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension7)))
		MatchesColumnarSearchFinanceDimension8
			when ((ColumnarSearchFinanceDimension8Structure not entered
			and   ColumnarSearchFinanceDimension8 not entered)
			or   ((ColumnarSearchFinanceDimension8Structure entered
			and   ColumnarSearchFinanceDimension8 entered)
			and  (ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension8
			or    ColumnarSearchFinanceDimension8HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension8)))
		MatchesColumnarSearchFinanceDimension9
			when ((ColumnarSearchFinanceDimension9Structure not entered
			and   ColumnarSearchFinanceDimension9 not entered)
			or   ((ColumnarSearchFinanceDimension9Structure entered
			and   ColumnarSearchFinanceDimension9 entered)
			and  (ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension9
			or    ColumnarSearchFinanceDimension9HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension9)))
		MatchesColumnarSearchFinanceDimension10
			when ((ColumnarSearchFinanceDimension10Structure not entered
			and   ColumnarSearchFinanceDimension10 not entered)
			or   ((ColumnarSearchFinanceDimension10Structure entered
			and   ColumnarSearchFinanceDimension10 entered)
			and  (ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel1Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel2Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel3Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel4Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel5Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel6Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel7Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel8Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel9Parent	= ColumnarSearchFinanceDimension10
			or    ColumnarSearchFinanceDimension10HierarchyRel.DerivedLevel10Parent	= ColumnarSearchFinanceDimension10)))
		MatchesColumnarSearchProject
			when ((ColumnarSearchProjectStructure not entered
			and   ColumnarSearchProject not entered)
			or   ((ColumnarSearchProjectStructure entered
			and   ColumnarSearchProject entered)
			and  (ColumnarSearchProjectHierarchyRel.DerivedLevel1Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel2Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel3Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel4Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel5Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel6Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel7Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel8Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel9Parent				= ColumnarSearchProject
			or    ColumnarSearchProjectHierarchyRel.DerivedLevel10Parent			= ColumnarSearchProject)))
		MatchesColumnarSearchAccountingUnit
			when ((ColumnarSearchAccountingUnitStructure not entered
			and   ColumnarSearchAccountingUnit not entered)
			or   ((ColumnarSearchAccountingUnitStructure entered
			and   ColumnarSearchAccountingUnit entered)
			and  (ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel1Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel2Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel3Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel4Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel5Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel6Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel7Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel8Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel9Parent		= ColumnarSearchAccountingUnit
			or    ColumnarSearchAccountingUnitHierarchyRel.DerivedLevel10Parent		= ColumnarSearchAccountingUnit)))
		MatchesColumnarSearchAccount
			when ((ColumnarSearchReportingChart not entered
			and   ColumnarSearchGeneralLedgerChartAccount not entered)
			or   ((ColumnarSearchReportingChart entered
			and   ColumnarSearchGeneralLedgerChartAccount entered)
			and  (ColumnarSearchReportingChartAccountRel.DerivedLevel1Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel2Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel3Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel4Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel5Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel6Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel7Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel8Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel9Parent	= ColumnarSearchGeneralLedgerChartAccount
			or    ColumnarSearchReportingChartAccountRel.DerivedLevel10Parent	= ColumnarSearchGeneralLedgerChartAccount)))
 		UseOriginatingTransaction
 			when (OriginatingTransaction entered
 			and   !DrillBackLink entered)
 		UseDrillBackLink
 			when (DrillBackLink entered)
		GLProcessingSystems
			restricted
			when (System 	= "GL"
			or    System	= "RJ"
			or    System 	= "CA")
		ExpenseReportSystems
			restricted
			when ((System = "AP"
			or     System = "IC"
			or     System = "PO")
			and	  (!SystemTransactionEvents)
			and   (!OriginatingTransaction.BusinessClassName = "GLTransactionDetail"))
		SystemTransactionEvents
			restricted
			when (GeneralLedgerEvent = "CB"
			or    GeneralLedgerEvent = "AB"
			or    GeneralLedgerEvent = "JE"
			or    GeneralLedgerEvent = "ZB"
			or    GeneralLedgerEvent = "ES")
		ExcludedProjectEvents
			restricted
			when (System = "AR"
			and   GeneralLedgerEvent != "NP")
		GLGeneratedRecords
			restricted
			when (OriginatingTransaction.BusinessClassName = "GLTransactionDetail"
			or    OriginatingTransaction.BusinessClassName = "GeneralLedgerTransaction")
		AccountingUnitSelected
			restricted
        	when (FinanceEnterpriseGroup.AccountingUnitLabel entered)
		ProjectEntry
			restricted
        	when (FinanceEnterpriseGroup.ProjectLabel entered)
		FinanceDimension1Entry
			restricted
        	when (actor.context.FinanceEnterpriseGroup.FinanceDimension1Label entered)
        WithinPostingDateRange
        	restricted
			when (!PostingDateRange entered
        	or   (PostingDateRange entered
        	and   PostingDate within PostingDateRange))
		WithinSearchDateRange	
			restricted
			when (Resource entered
			and  (System = "PR"
			or    System = "PS")
			and   TransactionDate within SearchDateRange)
		ProcessedWithinSearchDateRange	
			restricted
			when (Resource entered
			and   System = "PR"
			and   TransactionDate within SearchDateRange
			and	  Status.History
			and   IsContextFEG
			and   Resource.Employee.ProjectEmployee exists)
		WithinSearchTransactionDateRange			
			restricted
			when (SearchDateRange not entered
			or   (SearchDateRange entered
			and   TransactionDate within SearchDateRange))
		WithinSearchProjectDateRange		
			restricted
			when (ProjectDateRange not entered
			or   (ProjectDateRange entered
			and   FinanceCodeBlock.Project.ProjectDateRange.BeginDate entered
			and   FinanceCodeBlock.Project.ProjectDateRange.BeginDate within ProjectDateRange
			and   FinanceCodeBlock.Project.ProjectDateRange.EndDate entered
			and   FinanceCodeBlock.Project.ProjectDateRange.EndDate within ProjectDateRange))
		WithInPostingAndTransDateRange
			restricted
			when (WithinPostingDateRange
			and   WithinSearchTransactionDateRange
			and   WithinSearchGroup)
 		WithinSearchGroup
 			restricted
 			when (SearchGroup not entered
 			or    this instance within SearchGroup)
			
		EligibleToHoldBilling	
			restricted
			when (FinanceCodeBlock.Project.IsActivePostingAndBillable
			and   Billed.Unprocessed)

		EligibleToHoldRevenue	
			restricted
			when (FinanceCodeBlock.Project.IsActivePostingAndRevenue
			and   RevenueRecognized.Unprocessed)

		EligibleForBillingHold
			restricted
			when (FinanceCodeBlock.Project.IsActivePostingAndBillable
			and   FinanceCodeBlock.Project.ParentDisplayContractRel.ProjectContract.RevenueRecognition.Combined
			and  (Billed.Unprocessed
			or    Billed.Hold)
			and  !ExcludedProjectEvents
			and   IsPosted)

		EligibleForRevenueHold
			restricted
			when (FinanceCodeBlock.Project.IsActivePostingAndRevenue
			and   FinanceCodeBlock.Project.ParentDisplayContractRel.ProjectContract.RevenueRecognition.Separate
			and  (RevenueRecognized.Unprocessed
			or    RevenueRecognized.Hold)
			and   !Billed.Distributed
			and   !ExcludedProjectEvents
			and   IsPosted)
		
		FESExcludedEvent
			restricted
			when (GeneralLedgerEvent = "AR"
			or    GeneralLedgerEvent = "BI"
			or    GeneralLedgerEvent = "BIR"
			or    GeneralLedgerEvent = "RE"
			or    GeneralLedgerEvent = "RER"
			or    GeneralLedgerEvent = "BD"
			or    GeneralLedgerEvent = "LR"
			or    GeneralLedgerEvent = "PJ"
			or    GeneralLedgerEvent = "PL"
			or    GeneralLedgerEvent = "RI"
			or    GeneralLedgerEvent = "RM")
			
#ifdef module ap			
		IsValidForExpenseReport
			restricted
			when (ExpenseReportSystems
			and	  MatchesAccountingEntitySearch
			and	  MatchesPostToEntitySearch
			and	  MatchesAccountingUnitSearch
			and	  MatchesSystemCodeSearch
			and	  MatchesAccountSearch
			and   MatchesProjectSearch
			and   MatchesFinDim1Search
			and   MatchesFinDim2Search
			and   MatchesFinDim3Search
			and   MatchesFinDim4Search
			and   MatchesFinDim5Search
			and   MatchesFinDim6Search
			and   MatchesFinDim7Search
			and   MatchesFinDim8Search
			and   MatchesFinDim9Search
			and   MatchesFinDim10Search
			and	  PostingWithinDateRange
			and   DerivedExcludeInvoice
			and   NotSystemTransactionEvents)
#endif			
		IsPosted
			restricted
			when (RelatedJournalTransaction(GeneralLedgerTransaction).Status.Posted)
		HasBurdens
			restricted
			when ((IndirectBurden.Draft
			or     IndirectBurden.Processed)
			and    System != "PS")
		IsBurden
			restricted
			when (GeneralLedgerEvent = "IB"
			or    GeneralLedgerEvent = "RB")
		ProjectContractInvoiceBillRelExists
			restricted
			when (ProjectContractInvoiceBillRel exists)
		ProjectContractInvoiceRevenueRelExists
			restricted
			when (ProjectContractInvoiceRevenueRel exists)
 		IsContextFEG
 			restricted
 			when (FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
		SecurityGroupAllowsAccess
			when (AccountingEntity.AccountingEntitySecurityGroupAllowsAccess
			and  (FinanceCodeBlock.AccountingUnit !entered
			or    FinanceCodeBlock.AccountingUnit.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.Project !entered
			or    FinanceCodeBlock.Project.SecurityGroupAllowsAccess)
			and   FinanceCodeBlock.GeneralLedgerChartAccount.SecurityGroupAllowsAccess
			and  (FinanceCodeBlock.FinanceDimension1 !entered
			or    FinanceCodeBlock.FinanceDimension1.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension2 !entered
			or    FinanceCodeBlock.FinanceDimension2.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension3 !entered
			or    FinanceCodeBlock.FinanceDimension3.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension4 !entered
			or    FinanceCodeBlock.FinanceDimension4.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension5 !entered
			or    FinanceCodeBlock.FinanceDimension5.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension6 !entered
			or    FinanceCodeBlock.FinanceDimension6.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension7 !entered
			or    FinanceCodeBlock.FinanceDimension7.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension8 !entered
			or    FinanceCodeBlock.FinanceDimension8.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension9 !entered
			or    FinanceCodeBlock.FinanceDimension9.SecurityGroupAllowsAccess)
			and  (FinanceCodeBlock.FinanceDimension10 !entered
			or    FinanceCodeBlock.FinanceDimension10.SecurityGroupAllowsAccess))
		SecurityGroupAllowsAccessBlankValuesExcluded
			when (FinanceCodeBlock.AccountingEntity.AccountingEntitySecurityGroupAllowsAccess
			and  ((FinanceEnterpriseGroup.AccountingUnitSelected  
			and    FinanceCodeBlock.AccountingUnit.SecurityGroupAllowsAccess)
			or    !FinanceEnterpriseGroup.AccountingUnitSelected)
			and  ((FinanceEnterpriseGroup.ProjectEntry  
			and   FinanceCodeBlock.Project.SecurityGroupAllowsAccess)
			or    !FinanceEnterpriseGroup.ProjectEntry)
			and   FinanceCodeBlock.GeneralLedgerChartAccount.SecurityGroupAllowsAccess
			and  ((FinanceEnterpriseGroup.FinanceDimension1Entry
			and   FinanceCodeBlock.FinanceDimension1.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension1Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension2Entry
			and   FinanceCodeBlock.FinanceDimension2.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension2Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension3Entry
			and   FinanceCodeBlock.FinanceDimension3.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension3Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension4Entry
			and   FinanceCodeBlock.FinanceDimension4.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension4Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension5Entry
			and   FinanceCodeBlock.FinanceDimension5.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension5Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension6Entry
			and   FinanceCodeBlock.FinanceDimension6.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension6Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension7Entry
			and   FinanceCodeBlock.FinanceDimension7.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension7Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension8Entry
			and   FinanceCodeBlock.FinanceDimension8.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension8Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension9Entry
			and   FinanceCodeBlock.FinanceDimension9.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension9Entry)
			and  ((FinanceEnterpriseGroup.FinanceDimension10Entry
			and   FinanceCodeBlock.FinanceDimension10.SecurityGroupAllowsAccess)
			or   !FinanceEnterpriseGroup.FinanceDimension10Entry))

		UnProcessedBilled
			when (Billed.Unprocessed
			or    Billed.Hold)
		UnProcessedCapitalized
			when (Capitalize.Unprocessed
			or    Capitalize.Hold)
		ProjectUnProcessedCapitalized
			when (FinanceCodeBlock.Project.Capital
			and   Capitalize.Unprocessed)
		ProjectHoldCapitalized
			when (FinanceCodeBlock.Project.Capital
			and   Capitalize.Hold)
		UnProcessedLaborDistribution
			when (LaborDistribution.Unprocessed)
		UnProcessedIndirectBurden
			when (IndirectBurden.Unprocessed) 
		IsSystemPR
			when (System = "PR"
			and  (GeneralLedgerEvent = "PL"
			or    GeneralLedgerEvent = "PJ"
			or    GeneralLedgerEvent = "LR"
			or    GeneralLedgerEvent = "BD"))
		IsNotValidGeneralLedgerEvent
			when (GeneralLedgerEvent = "AR"
			or    GeneralLedgerEvent = "BI"
			or    GeneralLedgerEvent = "BIR"
			or    GeneralLedgerEvent = "IB"
			or    GeneralLedgerEvent = "OS"
			or    GeneralLedgerEvent = "PE"
			or    GeneralLedgerEvent = "RB"
			or    GeneralLedgerEvent = "RE"
			or    GeneralLedgerEvent = "RER")
		EligibleToTransfer	
			when (UnProcessedBilled
			and   UnProcessedCapitalized
			and   UnProcessedLaborDistribution
			and   UnProcessedIndirectBurden
			and   !IsSystemPR
			and   !IsNotValidGeneralLedgerEvent)
			
		PendingFESTransactionDetail
			when (FinanceCodeBlock.Project.ParentDisplayContract entered
			and	  FinanceCodeBlock.Project.ParentDisplayContractRel.Project.ProjectContract.FrontEndSplitsEnabled	
			and   !FinanceCodeBlock.Project.ExcludeFromFES
			and   FinanceCodeBlock.FinanceDimension2 = blank)

#ifdef module am
		ValidForDraft
			restricted
			when (ContextAssetInterfaceOptions entered
			and Capitalize.Unprocessed)

		ValidForHold
			restricted
			when (ContextAssetInterfaceOptions entered
			and Capitalize.Unprocessed)
#endif

  	Field Groups
		FEGAndEntity
			FinanceEnterpriseGroup
			AccountingEntity
			
 	Field Rules
 		FinanceEnterpriseGroup
			required
 		AccountingEntity
			if (AccountingEntity.ValidSystems entered
			and !GLProcessingSystems)
				constraint (System within AccountingEntity.ValidSystems)
					"InvalidSystemFor<FinanceEnterpriseGroup.AccountingEntityLabel>"
			required
		DimensionCode
			force default to FinanceCodeBlock.DimensionCode
		BaseZoneAccountingUnit
			if (AccountingEntity.AccountingUnitZoneBalancing)
				LocalAccountingEntity		= AccountingEntity
				initialize LocalInstAccountingUnit
				if (ZoneFinanceCodeBlock.AccountingUnit entered)
					LocalInstAccountingUnit		= ZoneFinanceCodeBlock.AccountingUnit
	        	force default to DerivedBaseZoneAccountingUnit
	        else
	        	force default to blank 
		BaseZoneDimension1
			if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
				initialize LocalInstFinanceDimension1
				if (ZoneFinanceCodeBlock.FinanceDimension1 entered)
					LocalInstFinanceDimension1	= ZoneFinanceCodeBlock.FinanceDimension1
	        	force default to DerivedBaseZoneFinanceDimension
	        else
	        	force default to blank 
        ZoneAccountingUnit
			if (FinanceCodeBlock.ToAccountingEntity.AccountingUnitZoneBalancing)
				LocalAccountingEntity		= FinanceCodeBlock.ToAccountingEntity
				LocalInstAccountingUnit		= FinanceCodeBlock.AccountingUnit
		        force default to DerivedZoneAccountingUnit
		    else
	        	force default to blank 
        ZoneDimension1
			if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
				LocalInstFinanceDimension1	= FinanceCodeBlock.FinanceDimension1
				force default to DerivedZoneFinanceDimension
		    else
	        	force default to blank 
		OrganizationKeyFields
			force default to FinanceCodeBlock.OrganizationString
		ZoneSystemKeyFields
			force default to ZoneSystemKeyString
		ZoneFields
			force default to ZoneFieldsString
		TransactionDate
			required
		PostingDate
			required
		TransactionAmount
			if (TransactionAmount changed)
				initialize ReportCurrencyAmount
		CurrencyCode
			default to AccountingEntity.FunctionalCurrency		
			required
		ReportCurrencyAmount
    		if (CurrencyTable not entered)
    			if(SystemClosingControlRJRel exists)
					LocalCurrencyTable = SystemClosingControlRJRel.CurrencyTable
				else
					LocalCurrencyTable = FinanceEnterpriseGroup.CurrencyTable
 			else
 				LocalCurrencyTable				= CurrencyTable
			required

		APPaid
			if (!FinanceCodeBlock.Project entered)
				initialize APPaid
		GeneralLedgerEvent
			if (FinanceCodeBlock.Ledger.CurrencyLedger)
				constraint (GeneralLedgerEvent = "GR" or GeneralLedgerEvent = "CT")
					"<GeneralLedgerEvent>EventNotValidForLedger"
			required
		PostingDateJournalCodeKey
			if (JournalByJournalCode)
				PostingDateJournalCodeKey = DerivedPostingDateJournalCodeKey
			else
				PostingDateJournalCodeKey = PostingDate
		PrimaryLedger
			default to FinanceCodeBlock.Ledger
		FinanceCodeBlock
			if (FinanceCodeBlock.ToAccountingEntity.ValidSystems entered
			and !GLProcessingSystems)
				constraint (System within FinanceCodeBlock.ToAccountingEntity.ValidSystems)
					"InvalidSystemForPosting<FinanceEnterpriseGroup.AccountingEntityLabel>"
			required
		System
			required
			if (FinanceCodeBlock.GeneralLedgerChartAccount.Account.SystemRestriction entered)
				constraint (System within FinanceCodeBlock.GeneralLedgerChartAccount.Account.SystemRestriction)
					"InvalidSystemForAccount"
		OriginatingTransaction
			default to reference to this instance
			
	Rule Blocks
		ColumnarDeleteRules
			if (ColumnarReplicated)
				ColumnarReplicated = false
				invoke modify update stamp this instance

		CreateTransactionDefaultValues	
			constraint (FinanceCodeBlock.GeneralLedgerChartAccount entered)
				"BlankIsNotValidFor<FinanceEnterpriseGroup.AccountLabel>"
			DimensionCode				= FinanceCodeBlock.DimensionCode
			if (AccountingEntity.AccountingUnitZoneBalancing)
				LocalAccountingEntity		= AccountingEntity
				initialize LocalInstAccountingUnit
				if (ZoneFinanceCodeBlock.AccountingUnit entered)
					LocalInstAccountingUnit		= ZoneFinanceCodeBlock.AccountingUnit
	        	BaseZoneAccountingUnit		= DerivedBaseZoneAccountingUnit
			if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
				initialize LocalInstFinanceDimension1
				if (ZoneFinanceCodeBlock.FinanceDimension1 entered)
					LocalInstFinanceDimension1	= ZoneFinanceCodeBlock.FinanceDimension1
	        	BaseZoneDimension1			= DerivedBaseZoneFinanceDimension
			if (FinanceCodeBlock.ToAccountingEntity.AccountingUnitZoneBalancing)
				LocalAccountingEntity		= FinanceCodeBlock.ToAccountingEntity
				LocalInstAccountingUnit		= FinanceCodeBlock.AccountingUnit
		        ZoneAccountingUnit			= DerivedZoneAccountingUnit
			if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
				LocalInstFinanceDimension1	= FinanceCodeBlock.FinanceDimension1
				ZoneDimension1				= DerivedZoneFinanceDimension

			OrganizationKeyFields		= FinanceCodeBlock.OrganizationString
			ZoneSystemKeyFields			= ZoneSystemKeyString
			ZoneFields					= ZoneFieldsString
			if (!FinanceCodeBlock.Project entered)
				initialize APPaid
			if (JournalByJournalCode)
				PostingDateJournalCodeKey	= DerivedPostingDateJournalCodeKey
			else
				PostingDateJournalCodeKey	= PostingDate
			if (!PrimaryLedger entered)
				PrimaryLedger					= FinanceCodeBlock.Ledger
			if (!OriginatingTransaction.BusinessClassName entered)
				OriginatingTransaction			= reference to this instance
	
		EditTransactionDetail
			if (!BypassUnitAndAmountEdit)
				constraint (TransactionAmount entered
						or	ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount entered								
						or	ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount entered
						or	ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount entered
						or	UnitsAmount entered)
					"AmountOrUnitsAmountIsRequired"

		AssignInterEntityCodeBlockDefaults
			LocalEntity.DimensionEntity					= LocalAccountingEntity
			if (FinanceEnterpriseGroup.AccountingUnitRequired)
				if (InterEntityAccountingUnitRel exists)
					invoked.FinanceCodeBlock.AccountingUnit	= InterEntityAccountingUnitRel.AccountingUnit
				else
					if (LocalEntity.DimensionEntity.AccountingUnitZoneBalancing
					and LocalZoneAccountingUnit entered)
						invoked.FinanceCodeBlock.AccountingUnit	= LocalZoneAccountingUnit
					else
						invoked.FinanceCodeBlock.AccountingUnit	= SystemAccountingUnitRel.AccountingUnit
			if (FinanceEnterpriseGroup.FinanceDimension1Required)
				if (FinanceEnterpriseGroup.Dimension1ZoneBalancing
				and LocalZoneDimension1 entered)
					invoked.FinanceCodeBlock.FinanceDimension1	= LocalZoneDimension1
				else
					invoked.FinanceCodeBlock.FinanceDimension1	= FinanceDimension1Rel.FinanceDimension1
			if (FinanceEnterpriseGroup.FinanceDimension2Required)
				invoked.FinanceCodeBlock.FinanceDimension2	= FinanceDimension2Rel.FinanceDimension2
			if (FinanceEnterpriseGroup.FinanceDimension3Required)
				invoked.FinanceCodeBlock.FinanceDimension3	= FinanceDimension3Rel.FinanceDimension3
			if (FinanceEnterpriseGroup.FinanceDimension4Required)
				invoked.FinanceCodeBlock.FinanceDimension4	= FinanceDimension4Rel.FinanceDimension4
			if (FinanceEnterpriseGroup.FinanceDimension5Required)
				invoked.FinanceCodeBlock.FinanceDimension5	= FinanceDimension5Rel.FinanceDimension5
			if (FinanceEnterpriseGroup.FinanceDimension6Required)
				invoked.FinanceCodeBlock.FinanceDimension6	= FinanceDimension6Rel.FinanceDimension6
			if (FinanceEnterpriseGroup.FinanceDimension7Required)
				invoked.FinanceCodeBlock.FinanceDimension7	= FinanceDimension7Rel.FinanceDimension7
			if (FinanceEnterpriseGroup.FinanceDimension8Required)
				invoked.FinanceCodeBlock.FinanceDimension8	= FinanceDimension8Rel.FinanceDimension8
			if (FinanceEnterpriseGroup.FinanceDimension9Required)
				invoked.FinanceCodeBlock.FinanceDimension9	= FinanceDimension9Rel.FinanceDimension9
			if (FinanceEnterpriseGroup.FinanceDimension10Required)
				invoked.FinanceCodeBlock.FinanceDimension10	= FinanceDimension10Rel.FinanceDimension10

		UpdateInterEntityZoneAmounts
			LocalEntity.DimensionEntity					= LocalAccountingEntity
			if (LocalEntity.DimensionEntity.AccountingUnitZoneBalancing
			or	FinanceEnterpriseGroup.Dimension1ZoneBalancing)
				if (LocalFrAccountingEntity		!= LocalAccountingEntity)
					LocalClosePeriod				= LocalToAccountingEntityJournalView.GeneralLedgerClosePeriod
					LocalJournalControl				= LocalToAccountingEntityJournalView.GeneralLedgerJournalControl
					LocalBaseZoneAccountingUnit		= LocalToAccountingEntityJournalView.BaseZoneAccountingUnit
					LocalBaseZoneDimension1			= LocalToAccountingEntityJournalView.BaseZoneDimension1
				else
					if (PrmJournalCreated)
						LocalAccountingEntity			= LocalFrAccountingEntity
						LocalClosePeriod				= PrmClosePeriod
						LocalJournalControl				= PrmJournalControl
						LocalBaseZoneAccountingUnit		= JournalControlExistsRel.BaseZoneAccountingUnit
						LocalBaseZoneDimension1			= JournalControlExistsRel.BaseZoneDimension1
					else
						LocalClosePeriod				= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
						LocalJournalControl				= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
						LocalBaseZoneAccountingUnit		= LocalAccountingEntityJournalView.BaseZoneAccountingUnit
						LocalBaseZoneDimension1			= LocalAccountingEntityJournalView.BaseZoneDimension1
				include UpdateZoneTotals

		UpdateZoneTotals
			LocalCurrencyCode				= LocalActionCurrencyCode
			LocalTempZoneAccountingUnit		= LocalZoneAccountingUnit
			LocalTempZoneDimension1			= LocalZoneDimension1
			if (LocalEntity.DimensionEntity.AccountingUnitZoneBalancing
			and LocalZoneAccountingUnit		= LocalBaseZoneAccountingUnit)
				initialize LocalZoneAccountingUnit
			if (FinanceEnterpriseGroup.Dimension1ZoneBalancing
			and LocalZoneDimension1	= LocalBaseZoneDimension1)
				initialize LocalZoneDimension1
			if (LocalZoneDimension1 entered
			and !LocalZoneAccountingUnit entered)
				if (FinanceEnterpriseGroup.AccountingUnitRequired)
					if (AccountingEntity.AccountingUnitZoneBalancing)
						LocalZoneAccountingUnit		= LocalTempZoneAccountingUnit
					else
						LocalZoneAccountingUnit		= SystemAccountingUnitRel.AccountingUnit
			if (LocalZoneAccountingUnit entered
			and !LocalZoneDimension1 entered)
				if (FinanceEnterpriseGroup.FinanceDimension1Required)
					if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
						LocalZoneDimension1		= LocalTempZoneDimension1
					else
						LocalZoneDimension1		= FinanceDimension1Rel.FinanceDimension1

			if (TransactionAmountTotal		= 0
			and	FunctionalAmountTotal		= 0
			and	AlternateAmountTotal		= 0
			and	AlternateAmount2Total		= 0
			and	AlternateAmount3Total		= 0
			and	ReportAmount1Total			= 0
			and	ReportAmount2Total			= 0
			and	ReportAmount3Total			= 0
			and	ReportAmount4Total			= 0
			and	ReportAmount5Total			= 0)
				initialize LocalZoneAccountingUnit
				initialize LocalZoneDimension1
			if (LocalZoneAccountingUnit entered
			or  LocalZoneDimension1 entered)
				LocalAccountingEntity			= LocalEntity.DimensionEntity
				LocalInstZoneAccountingUnit		= LocalZoneAccountingUnit
				LocalInstZoneDimension1			= LocalZoneDimension1
				if (!FinanceCodeBlock.GeneralLedgerChartAccount.AccountType.Memo)
					invoke Update GeneralLedgerZoneTotalRel
						invoked.TransactionAmount			+= TransactionAmountTotal
						invoked.FunctionalAmount			+= FunctionalAmountTotal
						invoked.AlternateAmount				+= AlternateAmountTotal
						invoked.AlternateAmount2			+= AlternateAmount2Total
						invoked.AlternateAmount3			+= AlternateAmount3Total
						invoked.ReportAmount1				+= ReportAmount1Total
						invoked.ReportAmount2				+= ReportAmount2Total
						invoked.ReportAmount3				+= ReportAmount3Total
						invoked.ReportAmount4				+= ReportAmount4Total
						invoked.ReportAmount5				+= ReportAmount5Total
						invoked.UnitsAmount					+= UnitsAmountTotal

		CreateFromInterEntityTransaction
			LocalTransactionSequence += 1
			invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
				assign result to LocalTransactionView
				invoked.FinanceEnterpriseGroup			= PrmEnterpriseGroup
				invoked.AccountingEntity				= LocalFrAccountingEntity
				invoked.GeneralLedgerClosePeriod		= each.GeneralLedgerClosePeriod
				invoked.GeneralLedgerJournalControl		= each.GeneralLedgerJournalControl
				invoked.GeneralLedgerTransaction		= LocalTransactionSequence
				if (LocalAmountIsPositive)
					LocalGeneralLedgerChartAccount		= InterEntityReceivablesAccount
					constraint (InterEntityReceivablesAccount entered)
						"InvalidInterEntityReceivables<FinanceEnterpriseGroup.AccountLabel>"
				else
					LocalGeneralLedgerChartAccount		= InterEntityPayablesAccount
					constraint (InterEntityPayablesAccount entered)
						"InvalidInterEntityPayables<FinanceEnterpriseGroup.AccountLabel>"
				LocalEntity.DimensionEntity		= LocalToAccountingEntity
				if (FinanceEnterpriseGroup.InterEntityDimension.SubAccount
				and LocalEntity.DimensionEntity.SubAccount entered)
					invoked.FinanceCodeBlock.GeneralLedgerChartAccount = LocalGeneralLedgerChartAccount.Account + "-" + LocalEntity.DimensionEntity.SubAccount
				else
					if (PrmEnterpriseGroup.SystemSubAccount entered)
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount.Account + "-" + PrmEnterpriseGroup.SystemSubAccount
					else
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount
				invoked.Description									= each.GeneralLedgerJournalControl.Description
				invoked.FinanceCodeBlock.Ledger						= each.GeneralLedgerJournalControl.Ledger
				invoked.FinanceCodeBlock.ToAccountingEntity			= LocalFrAccountingEntity
				LocalZoneAccountingUnit								= each.GeneralLedgerJournalControl.BaseZoneAccountingUnit
				LocalZoneDimension1									= each.GeneralLedgerJournalControl.BaseZoneDimension1
				include AssignInterEntityCodeBlockDefaults
				LocalEntity.DimensionEntity		= LocalToAccountingEntity
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension1)
					invoked.FinanceCodeBlock.FinanceDimension1				= LocalEntity.DimensionEntity.FinanceDimension1
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension2)
					invoked.FinanceCodeBlock.FinanceDimension2				= LocalEntity.DimensionEntity.FinanceDimension2
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension3)
					invoked.FinanceCodeBlock.FinanceDimension3				= LocalEntity.DimensionEntity.FinanceDimension3
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension4)
					invoked.FinanceCodeBlock.FinanceDimension4				= LocalEntity.DimensionEntity.FinanceDimension4
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension5)
					invoked.FinanceCodeBlock.FinanceDimension5				= LocalEntity.DimensionEntity.FinanceDimension5
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension6)
					invoked.FinanceCodeBlock.FinanceDimension6				= LocalEntity.DimensionEntity.FinanceDimension6
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension7)
					invoked.FinanceCodeBlock.FinanceDimension7				= LocalEntity.DimensionEntity.FinanceDimension7
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension8)
					invoked.FinanceCodeBlock.FinanceDimension8				= LocalEntity.DimensionEntity.FinanceDimension8
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension9)
					invoked.FinanceCodeBlock.FinanceDimension9				= LocalEntity.DimensionEntity.FinanceDimension9
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension10)
					invoked.FinanceCodeBlock.FinanceDimension10				= LocalEntity.DimensionEntity.FinanceDimension10
				LocalEntity.DimensionEntity					= LocalAccountingEntity
				invoked.CurrencyCode								= each.GLInterEntityTotal.CurrencyCode
				invoked.GeneralLedgerEvent							= "CB" 
				invoked.AutoReverse									= each.GLInterEntityTotal.AutoReverse
				invoked.TransactionAmount												= LocalIntEntTransactionAmount
				if(!PrmDefaultCurrencyAmount)
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalIntEntFunctionalAmount
					invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalIntEntAlternateAmount
					invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalIntEntAlternateAmount2
					invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalIntEntAlternateAmount3
					invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalIntEntReportAmount1
					invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalIntEntReportAmount2
					invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalIntEntReportAmount3
					invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalIntEntReportAmount4
					invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalIntEntReportAmount5
				if(PrmDefaultCurrencyAmount) 
					if(ReportCurrencyAmount.CurrencyTable = FinanceEnterpriseGroup.CurrencyTable)
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalIntEntFunctionalAmount
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalIntEntAlternateAmount
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalIntEntAlternateAmount2
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalIntEntAlternateAmount3
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalIntEntReportAmount1
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalIntEntReportAmount2
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalIntEntReportAmount3
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalIntEntReportAmount4
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalIntEntReportAmount5
					else
						invoked.ReportCurrencyAmount						= ReportCurrencyAmount
						invoked.TransientDefaultCurrencyAmount				= PrmDefaultCurrencyAmount
				invoked.UnitsAmount														= LocalIntEntUnits
				invoked.TransientJournalizeGroup										= PrmJournalizeGroup
				invoked.JournalizeSystemTransactions									= true
				invoked.Reference														= LocalFromGeneralLedgerEvent

			if (PrmEligibleForElimination)
				LocalTransactionSequence += 1
				invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
					assign result to LocalTransactionView
					invoked.FinanceEnterpriseGroup			= PrmEnterpriseGroup
					invoked.AccountingEntity				= LocalFrAccountingEntity
					invoked.GeneralLedgerClosePeriod		= each.GeneralLedgerClosePeriod
					invoked.GeneralLedgerJournalControl		= each.GeneralLedgerJournalControl
					invoked.GeneralLedgerTransaction		= LocalTransactionSequence
					if (LocalAmountIsPositive)
						LocalGeneralLedgerChartAccount		= InterEntityReceivablesAccount
						constraint (InterEntityReceivablesAccount entered)
							"InvalidInterEntityReceivables<FinanceEnterpriseGroup.AccountLabel>"
					else
						LocalGeneralLedgerChartAccount		= InterEntityPayablesAccount
						constraint (InterEntityPayablesAccount entered)
							"InvalidInterEntityPayables<FinanceEnterpriseGroup.AccountLabel>"
					LocalEntity.DimensionEntity		= LocalToAccountingEntity
					if (FinanceEnterpriseGroup.InterEntityDimension.SubAccount
					and LocalEntity.DimensionEntity.SubAccount entered)
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount = LocalGeneralLedgerChartAccount.Account + "-" + LocalEntity.DimensionEntity.SubAccount
					else
						if (PrmEnterpriseGroup.SystemSubAccount entered)
							invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount.Account + "-" + PrmEnterpriseGroup.SystemSubAccount
						else
							invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount
					invoked.Description									= each.GeneralLedgerJournalControl.Description
					invoked.FinanceCodeBlock.Ledger						= PrmEliminationLedger
					invoked.FinanceCodeBlock.ToAccountingEntity			= LocalFrAccountingEntity
					LocalZoneAccountingUnit								= each.GeneralLedgerJournalControl.BaseZoneAccountingUnit
					LocalZoneDimension1									= each.GeneralLedgerJournalControl.BaseZoneDimension1
					include AssignInterEntityCodeBlockDefaults
					LocalEntity.DimensionEntity		= LocalToAccountingEntity
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension1)
						invoked.FinanceCodeBlock.FinanceDimension1				= LocalEntity.DimensionEntity.FinanceDimension1
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension2)
						invoked.FinanceCodeBlock.FinanceDimension2				= LocalEntity.DimensionEntity.FinanceDimension2
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension3)
						invoked.FinanceCodeBlock.FinanceDimension3				= LocalEntity.DimensionEntity.FinanceDimension3
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension4)
						invoked.FinanceCodeBlock.FinanceDimension4				= LocalEntity.DimensionEntity.FinanceDimension4
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension5)
						invoked.FinanceCodeBlock.FinanceDimension5				= LocalEntity.DimensionEntity.FinanceDimension5
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension6)
						invoked.FinanceCodeBlock.FinanceDimension6				= LocalEntity.DimensionEntity.FinanceDimension6
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension7)
						invoked.FinanceCodeBlock.FinanceDimension7				= LocalEntity.DimensionEntity.FinanceDimension7
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension8)
						invoked.FinanceCodeBlock.FinanceDimension8				= LocalEntity.DimensionEntity.FinanceDimension8
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension9)
						invoked.FinanceCodeBlock.FinanceDimension9				= LocalEntity.DimensionEntity.FinanceDimension9
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension10)
						invoked.FinanceCodeBlock.FinanceDimension10				= LocalEntity.DimensionEntity.FinanceDimension10
					LocalEntity.DimensionEntity					= LocalAccountingEntity
					invoked.CurrencyCode								= each.GLInterEntityTotal.CurrencyCode
					invoked.GeneralLedgerEvent							= "CB" 
					invoked.AutoReverse									= false
					invoked.TransactionAmount							= LocalIntEntTransactionAmount * -1
					if(!PrmDefaultCurrencyAmount)
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalIntEntFunctionalAmount * -1
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalIntEntAlternateAmount * -1
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalIntEntAlternateAmount2 * -1
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalIntEntAlternateAmount3 * -1
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalIntEntReportAmount1 * -1
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalIntEntReportAmount2 * -1
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalIntEntReportAmount3 * -1
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalIntEntReportAmount4 * -1
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalIntEntReportAmount5 * -1
					invoked.TransientJournalizeGroup										= PrmJournalizeGroup
					invoked.JournalizeSystemTransactions									= true
					invoked.Reference														= LocalFromGeneralLedgerEvent
					invoked.PrimaryLedger								= PrmEliminationLedger


		CreateToInterEntityTransaction
			LocalAccountingEntity		= LocalToAccountingEntity
			LocalToTransactionSequence += 1
			invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
				assign result to LocalTransactionView
				invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
				invoked.AccountingEntity							= LocalToAccountingEntity
				invoked.GeneralLedgerClosePeriod					= LocalToAccountingEntityJournalView.GeneralLedgerClosePeriod
				invoked.GeneralLedgerJournalControl					= LocalToAccountingEntityJournalView.GeneralLedgerJournalControl
				invoked.GeneralLedgerTransaction					= LocalToTransactionSequence
				if (LocalAmountIsPositive)
					LocalGeneralLedgerChartAccount		= InterEntityPayablesAccount
					constraint (InterEntityPayablesAccount entered)
						"InvalidInterEntityPayables<FinanceEnterpriseGroup.AccountLabel>"
				else
					LocalGeneralLedgerChartAccount		= InterEntityReceivablesAccount
					constraint (InterEntityReceivablesAccount entered)
						"InvalidInterEntityReceivables<FinanceEnterpriseGroup.AccountLabel>"
				LocalEntity.DimensionEntity		= LocalFrAccountingEntity
				if (FinanceEnterpriseGroup.InterEntityDimension.SubAccount
				and LocalEntity.DimensionEntity.SubAccount entered)
					invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount.Account + "-" + LocalEntity.DimensionEntity.SubAccount
				else
					if (PrmEnterpriseGroup.SystemSubAccount entered)
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount.Account + "-" + PrmEnterpriseGroup.SystemSubAccount
					else
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount
				invoked.Description									= LocalToAccountingEntityJournalView.Description
				invoked.FinanceCodeBlock.Ledger						= LocalToAccountingEntityJournalView.Ledger
				invoked.FinanceCodeBlock.ToAccountingEntity			= LocalToAccountingEntity
				LocalZoneAccountingUnit								= LocalToAccountingEntityJournalView.BaseZoneAccountingUnit
				LocalZoneDimension1									= LocalToAccountingEntityJournalView.BaseZoneDimension1
				include AssignInterEntityCodeBlockDefaults
				LocalEntity.DimensionEntity		= LocalFrAccountingEntity
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension1)
					invoked.FinanceCodeBlock.FinanceDimension1				= LocalEntity.DimensionEntity.FinanceDimension1
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension2)
					invoked.FinanceCodeBlock.FinanceDimension2				= LocalEntity.DimensionEntity.FinanceDimension2
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension3)
					invoked.FinanceCodeBlock.FinanceDimension3				= LocalEntity.DimensionEntity.FinanceDimension3
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension4)
					invoked.FinanceCodeBlock.FinanceDimension4				= LocalEntity.DimensionEntity.FinanceDimension4
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension5)
					invoked.FinanceCodeBlock.FinanceDimension5				= LocalEntity.DimensionEntity.FinanceDimension5
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension6)
					invoked.FinanceCodeBlock.FinanceDimension6				= LocalEntity.DimensionEntity.FinanceDimension6
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension7)
					invoked.FinanceCodeBlock.FinanceDimension7				= LocalEntity.DimensionEntity.FinanceDimension7
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension8)
					invoked.FinanceCodeBlock.FinanceDimension8				= LocalEntity.DimensionEntity.FinanceDimension8
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension9)
					invoked.FinanceCodeBlock.FinanceDimension9				= LocalEntity.DimensionEntity.FinanceDimension9
				if (FinanceEnterpriseGroup.InterEntityDimension.Dimension10)
					invoked.FinanceCodeBlock.FinanceDimension10				= LocalEntity.DimensionEntity.FinanceDimension10
				LocalEntity.DimensionEntity					= LocalAccountingEntity
				invoked.CurrencyCode								= each.GLInterEntityTotal.CurrencyCode
				invoked.GeneralLedgerEvent							= "CB" 
				invoked.AutoReverse									= each.GLInterEntityTotal.AutoReverse
				invoked.TransactionAmount												= LocalIntEntTransactionAmount
				if(!PrmDefaultCurrencyAmount) 
					invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalIntEntFunctionalAmount
					invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalIntEntAlternateAmount
					invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalIntEntAlternateAmount2
					invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalIntEntAlternateAmount3
					invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalIntEntReportAmount1
					invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalIntEntReportAmount2
					invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalIntEntReportAmount3
					invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalIntEntReportAmount4
					invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalIntEntReportAmount5	
				if(PrmDefaultCurrencyAmount) 
					if(ReportCurrencyAmount.CurrencyTable = FinanceEnterpriseGroup.CurrencyTable)
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalIntEntFunctionalAmount
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalIntEntAlternateAmount
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalIntEntAlternateAmount2
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalIntEntAlternateAmount3
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalIntEntReportAmount1
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalIntEntReportAmount2
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalIntEntReportAmount3
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalIntEntReportAmount4
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalIntEntReportAmount5
					else
						invoked.ReportCurrencyAmount						= ReportCurrencyAmount
						invoked.TransientDefaultCurrencyAmount				= PrmDefaultCurrencyAmount		
				invoked.UnitsAmount														= LocalIntEntUnits
				invoked.TransientJournalizeGroup										= PrmJournalizeGroup
				invoked.JournalizeSystemTransactions									= true
				invoked.Reference														= LocalToGeneralLedgerEvent

			if (PrmEligibleForElimination)
				LocalAccountingEntity		= LocalToAccountingEntity
				LocalToTransactionSequence += 1
				invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
					assign result to LocalTransactionView
					invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
					invoked.AccountingEntity							= LocalToAccountingEntity
					invoked.GeneralLedgerClosePeriod					= LocalToAccountingEntityJournalView.GeneralLedgerClosePeriod
					invoked.GeneralLedgerJournalControl					= LocalToAccountingEntityJournalView.GeneralLedgerJournalControl
					invoked.GeneralLedgerTransaction					= LocalToTransactionSequence
					if (LocalAmountIsPositive)
						LocalGeneralLedgerChartAccount		= InterEntityPayablesAccount
						constraint (InterEntityPayablesAccount entered)
							"InvalidInterEntityPayables<FinanceEnterpriseGroup.AccountLabel>"
					else
						LocalGeneralLedgerChartAccount		= InterEntityReceivablesAccount
						constraint (InterEntityReceivablesAccount entered)
							"InvalidInterEntityReceivables<FinanceEnterpriseGroup.AccountLabel>"
					LocalEntity.DimensionEntity		= LocalFrAccountingEntity
					if (FinanceEnterpriseGroup.InterEntityDimension.SubAccount
					and LocalEntity.DimensionEntity.SubAccount entered)
						invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount.Account + "-" + LocalEntity.DimensionEntity.SubAccount
					else
						if (PrmEnterpriseGroup.SystemSubAccount entered)
							invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount.Account + "-" + PrmEnterpriseGroup.SystemSubAccount
						else
							invoked.FinanceCodeBlock.GeneralLedgerChartAccount	= LocalGeneralLedgerChartAccount
					invoked.Description									= LocalToAccountingEntityJournalView.Description
					invoked.FinanceCodeBlock.Ledger						= PrmEliminationLedger
					invoked.FinanceCodeBlock.ToAccountingEntity			= LocalToAccountingEntity
					LocalZoneAccountingUnit								= LocalToAccountingEntityJournalView.BaseZoneAccountingUnit
					LocalZoneDimension1									= LocalToAccountingEntityJournalView.BaseZoneDimension1
					include AssignInterEntityCodeBlockDefaults
					LocalEntity.DimensionEntity		= LocalFrAccountingEntity
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension1)
						invoked.FinanceCodeBlock.FinanceDimension1				= LocalEntity.DimensionEntity.FinanceDimension1
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension2)
						invoked.FinanceCodeBlock.FinanceDimension2				= LocalEntity.DimensionEntity.FinanceDimension2
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension3)
						invoked.FinanceCodeBlock.FinanceDimension3				= LocalEntity.DimensionEntity.FinanceDimension3
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension4)
						invoked.FinanceCodeBlock.FinanceDimension4				= LocalEntity.DimensionEntity.FinanceDimension4
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension5)
						invoked.FinanceCodeBlock.FinanceDimension5				= LocalEntity.DimensionEntity.FinanceDimension5
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension6)
						invoked.FinanceCodeBlock.FinanceDimension6				= LocalEntity.DimensionEntity.FinanceDimension6
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension7)
						invoked.FinanceCodeBlock.FinanceDimension7				= LocalEntity.DimensionEntity.FinanceDimension7
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension8)
						invoked.FinanceCodeBlock.FinanceDimension8				= LocalEntity.DimensionEntity.FinanceDimension8
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension9)
						invoked.FinanceCodeBlock.FinanceDimension9				= LocalEntity.DimensionEntity.FinanceDimension9
					if (FinanceEnterpriseGroup.InterEntityDimension.Dimension10)
						invoked.FinanceCodeBlock.FinanceDimension10				= LocalEntity.DimensionEntity.FinanceDimension10
					LocalEntity.DimensionEntity					= LocalAccountingEntity
					invoked.CurrencyCode								= each.GLInterEntityTotal.CurrencyCode
					invoked.GeneralLedgerEvent							= "CB" 
					invoked.AutoReverse									= false
					invoked.TransactionAmount							= LocalIntEntTransactionAmount * -1
					if(!PrmDefaultCurrencyAmount) 
						invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= LocalIntEntFunctionalAmount * -1
						invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= LocalIntEntAlternateAmount * -1
						invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= LocalIntEntAlternateAmount2 * -1
						invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= LocalIntEntAlternateAmount3 * -1
						invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= LocalIntEntReportAmount1 * -1
						invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= LocalIntEntReportAmount2 * -1
						invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= LocalIntEntReportAmount3 * -1
						invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= LocalIntEntReportAmount4 * -1
						invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= LocalIntEntReportAmount5 * -1
					invoked.UnitsAmount														= LocalIntEntUnits * -1
					invoked.TransientJournalizeGroup										= PrmJournalizeGroup
					invoked.JournalizeSystemTransactions									= true
					invoked.Reference														= LocalToGeneralLedgerEvent
					invoked.PrimaryLedger								= PrmEliminationLedger


		CheckMissingInterentityCurrency
			if (FinanceCodeBlock.ToAccountingEntity != AccountingEntity
			and TransactionAmount					!= blank
			and ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount = blank
			and ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  = blank
			and ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount = blank
			and ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount = blank)			
				LocalCurrencyCalculationGroup.CurrencyAmount							= TransactionAmount
				LocalCurrencyCalculationGroup.ExchangeDate								= TransactionDate
				LocalCurrencyCalculationGroup.FromCurrency								= CurrencyCode
				LocalCurrencyCalculationGroup.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
	
				LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.FunctionalCurrency
				LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
				LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency
				LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
				LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency2
				LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
				LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency3
				LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount

				ReportCurrencyAmount.ToFunctionalAmount.ToCurrency						= LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency	
				ReportCurrencyAmount.ToAlternateAmount.ToCurrency						= LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency	
				ReportCurrencyAmount.ToAlternateAmount2.ToCurrency						= LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency
				ReportCurrencyAmount.ToAlternateAmount3.ToCurrency						= LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency	

				if (ReportCurrencyAmount.ToFunctionalAmount.ToCurrency != blank)
					ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate     	= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyRate 
					ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
				if (ReportCurrencyAmount.ToAlternateAmount.ToCurrency != blank)
					ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate      	= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyRate 														
					ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount	
				if (ReportCurrencyAmount.ToAlternateAmount2.ToCurrency != blank)	
					ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate     	= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyRate 
					ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount	
				if (ReportCurrencyAmount.ToAlternateAmount3.ToCurrency != blank)
					ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate     	= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyRate 
					ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount

#ifdef module ap
		FindGLYearPeriod
			LocalExpensePostingDate		= PostingDate
			LocalEndDate				= DerivedEntityCalendarPeriod

		CreateGLProcurementExpense
			invoke Create GLProcurementExpense
				fill in fields from this instance
				invoked.EntityYearPeriod			= DerivedEntityCalendarPeriod	

				invoked.PayablesCompany				= DerivedCompany
				invoked.Invoice						= DerivedAPInvoice
				invoked.MatchProcessType			= DerivedAPInvoiceType
				invoked.PurchaseOrder				= DerivedAPPurchOrder
				invoked.Item						= DerivedAPItem
				invoked.ItemType					= DerivedAPItemType
				invoked.ItemDescription				= DerivedAPItemDesc
				invoked.AddOnCharge					= DerivedAddOnCharge
				invoked.TaxCode						= DerivedAPTaxCode
				invoked.Quantity					= DerivedAPQuantity
				invoked.UnitOfMeasure				= DerivedAPUom
				invoked.UnitCost					= DerivedAPUnitCost
				invoked.Vendor						= DerivedVendorOnly


				invoked.InventoryLocation			= DerivedInventoryLocation
				invoked.OrigICDocument				= DerivedOrigICDocument
				invoked.OrigICLine					= DerivedOrigICLine
				invoked.ICPostingType				= DerivedICPostingType

				invoked.POLineNumber				= DerivedLineNumber
				invoked.LineAmount					= DerivedLineAmount
				invoked.Buyer						= DerivedBuyer
				invoked.ReceivedQuantity			= DerivedReceivedQuantity
				invoked.JournalizeGroup				= JournalizeGroup
				invoked.RelatedJournalTransaction	= RelatedJournalTransaction
				invoked.OriginatingTransaction		= OriginatingTransaction
				invoked.RequestingLocation			= DerivedRequestingLocation
				invoked.GLTranSource				= reference to this instance

				if (DerivedRequisition entered)
					invoked.Requisition				= DerivedRequisition
					invoked.RequisitionLine			= DerivedRequisitionLine
					invoked.Requester				= DerivedRequester
				if ((System = "IC"
				or   System = "PO")
				and DerivedAPQuantity entered)
					if (TransactionAmount < 0
					and DerivedAPQuantity > 0)
						invoked.Quantity = (DerivedAPQuantity * -1)
					if (TransactionAmount > 0
					and DerivedAPQuantity < 0)
						invoked.Quantity = (DerivedAPQuantity * -1)
					
#endif

	Create Rules
		ColumnarReplicated = false

 	Create Exit Rules
#ifdef module intercobilling
 		initialize LocalICBSettlementHeader
 		

 		if (IntercompanyBillingSettlementHeader entered)
 			LocalICBSettlementHeader = IntercompanyBillingSettlementHeader
 		else
 		if (OriginatingTransaction.BusinessClassName = "ReceivableGLDistribution"
 		and OriginatingTransaction(ReceivableGLDistribution).TransientIntercompanyBillingSettlementHeader entered)
 			LocalICBSettlementHeader = OriginatingTransaction(ReceivableGLDistribution).TransientIntercompanyBillingSettlementHeader
 		else
 		if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution"
 		and OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice.InvoiceSource.IntercompanyBilling)
 			LocalICBSettlementHeader = OriginatingTransaction(PayablesInvoiceDistribution).IntercompanyBillingSettlementRel.IntercompanyBillingSettlementHeader
 		

 		if (LocalICBSettlementHeader entered)
	 		invoke Create ICBSettlementGLTransactionDetail
	 			invoked.FinanceEnterpriseGroup 				= FinanceEnterpriseGroup
	 			invoked.IntercompanyBillingGroup			= FinanceEnterpriseGroup
	 			invoked.IntercompanyBillingSettlementHeader	= LocalICBSettlementHeader
	 			invoked.System								= System
#endif

	Action Exit Rules
		initialize LocalFESAmount
		if (!SkipFESExpenditures
		and  FinanceCodeBlock.Project entered
		and  FinanceCodeBlock.FinanceDimension2 entered
		and !FESExcludedEvent
		and  FinanceEnterpriseGroup.FrontEndSplits
		and  FinanceEnterpriseGroup.UseFundedAmounts
		and !FinanceCodeBlock.Project.ExcludeFromFES
		and  FinanceCodeBlock.Project.ParentDisplayContractRel.Project.ProjectContract.FrontEndSplitsEnabled
		and (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered
		or   old ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered))
			if (action type.Create)
				LocalFESAmount = ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
				if ((System = "AP"
				or   System = "CB")
				and (Status.Unreleased
				or   Status.Released)
				and (System.EncumbranceOption.TrackAndEdit
				or   System.EncumbranceOption.Track))
					LocalFESAmount = blank
				if  (System = "AR"
				and  Status.Unreleased)
					LocalFESAmount = blank
			else
			if (action type.Update)
				if (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount changed)
					LocalFESAmount = (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount - old ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount)
				if ((System = "AP"
				or   System = "CB")
				and (System.EncumbranceOption.TrackAndEdit
				or   System.EncumbranceOption.Track))
					if  (Status.Released
					or   Status.Unreleased)
						LocalFESAmount = blank
					if  (Status.History
					and  old Status.Released)
						LocalFESAmount = ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
				if (System = "AR")
					if (Status.Unreleased)
						LocalFESAmount = blank
					if (Status.Released
					and old Status.Unreleased)
						LocalFESAmount = ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
			else
			if (action type.Delete)	
				LocalFESAmount = ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1
				if ((System = "AP"
				or   System = "CB")
				and (Status.Unreleased
				or   Status.Released)
				and (System.EncumbranceOption.TrackAndEdit
				or   System.EncumbranceOption.Track))
					LocalFESAmount = blank
				if  (System = "AR"
				and  Status.Unreleased)
					LocalFESAmount = blank
			if (LocalFESAmount entered)		
				invoke UpdateFESExpenditures ProjectFundingSourceRel
					invoked.TransactionDate = TransactionDate
					invoked.FinanceCodeBlock = FinanceCodeBlock
					invoked.Amount = LocalFESAmount
 	
 	Actions
		JournalizeTransactions is a Set Action

			restricted
			Parameters
				PrmEnterpriseGroup			is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmJournalizeGroup			is a JournalizeGroup
					default label is "JournalizeGroup"
				PrmCurrencyTable			is a CurrencyTable
					default label is "CurrencyTable"
		    	PrmJournalCreated			is Boolean
		    		default label is "JournalCreated"
				PrmAccountingEntity			is a AccountingEntity
					default label is "AccountingEntity"
				PrmClosePeriod				is a GeneralLedgerClosePeriod
					default label is "ClosePeriod"
				PrmJournalControl			is a GeneralLedgerJournalControl
					default label is "JournalControl"
				PrmBypassStructureRelationEdit is Boolean
					default label is "BypassStructureRelationEdit"
				PrmOriginatingInterfaceRun	is a GLTransactionInterfaceResult
					default label is "OriginatingInterfaceRun"
				PrmInterfaceInDetail		is Boolean
					default label is "InterfaceInDetail"
				PrmJournalizeGroupDescription is Alpha 60
					default label is "JournalizeGroupDescription"
				PrmAutoReverseDate			is Date
					default label is "AutoReverseDate"
				PrmDefaultCurrencyAmount    is Boolean		
					default label is "DefaultCurrencyAmount"
				PrmPrimaryLedger			is a Ledger
					default label is "PrimaryLedger"	
				PrmEligibleForElimination	is Boolean
					default label is untranslatable:"EligibleForElimination"
				PrmElimToAccountingEntity	is like AccountingEntity
					default label is untranslatable:"PostToAccountingEntity"
				PrmEliminationLedger		is like Ledger
					default label is untranslatable:"EliminationLedger"
				PrmRJReference 				is  BusinessObjectReference
					default label is "RecurringJournalReference"

									
			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
				PrmJournalCreated
				
			Parameter Rules
				
				PrmJournalizeGroup
					required
				PrmJournalizeGroupDescription
					default to PrmJournalizeGroup
					
			Local Fields
				LocalAccountingEntityJournalView	is a GeneralLedgerJournalControl view
				LocalToAccountingEntityJournalView	is a GeneralLedgerJournalControl view
				LocalTransactionView				is a GeneralLedgerTransaction view
				LocalToTransactionView				is a GeneralLedgerTransaction view
				LocalFrAccountingEntity				is a AccountingEntity
				LocalPostingDate					is Date
				LocalToAccountingEntity				is a ToAccountingEntity
				LocalActionCurrencyCode				is a Currency
				LocalActionTransactionDate			is Date
				LocalActionAutoReverse				is Boolean
				LocalTransactionAmountDr			is an InternationalAmount
				LocalToFunctionalAmountDr			is an InternationalAmount
				LocalToAlternateAmountDr			is an InternationalAmount
				LocalToAlternateAmount2Dr			is an InternationalAmount
				LocalToAlternateAmount3Dr			is an InternationalAmount
				LocalToAutoReverseAmountDr			is an InternationalAmount
				LocalReportAmount1Dr				is an InternationalAmount
				LocalReportAmount2Dr				is an InternationalAmount
				LocalReportAmount3Dr				is an InternationalAmount
				LocalReportAmount4Dr				is an InternationalAmount
				LocalReportAmount5Dr				is an InternationalAmount
				LocalUnitsDr						is an UnitsAmount
				LocalAutoReverseUnitsDr				is an UnitsAmount				
				LocalTransactionAmountCr			is an InternationalAmount
				LocalToFunctionalAmountCr			is an InternationalAmount
				LocalToAlternateAmountCr			is an InternationalAmount
				LocalToAlternateAmount2Cr			is an InternationalAmount
				LocalToAlternateAmount3Cr			is an InternationalAmount
				LocalToAutoReverseAmountCr			is an InternationalAmount
				LocalReportAmount1Cr				is an InternationalAmount
				LocalReportAmount2Cr				is an InternationalAmount
				LocalReportAmount3Cr				is an InternationalAmount
				LocalReportAmount4Cr				is an InternationalAmount
				LocalReportAmount5Cr				is an InternationalAmount
				LocalUnitsCr						is an UnitsAmount
				LocalAutoReverseUnitsCr				is an UnitsAmount				
				LocalJeType							is Numeric 1
				LocalAmount							is an InternationalAmount
				LocalUnits							is an UnitsAmount

				Local1ToFunctionalAmountDr			is an InternationalAmount
				Local1ToAlternateAmountDr			is an InternationalAmount
				Local1ToAlternateAmount2Dr			is an InternationalAmount
				Local1ToAlternateAmount3Dr			is an InternationalAmount
				Local1ToAutoReverseAmountDr			is an InternationalAmount
				Local1ReportAmount1Dr				is an InternationalAmount
				Local1ReportAmount2Dr				is an InternationalAmount
				Local1ReportAmount3Dr				is an InternationalAmount
				Local1ReportAmount4Dr				is an InternationalAmount
				Local1ReportAmount5Dr				is an InternationalAmount
				Local1UnitsDr						is an UnitsAmount
				Local1AutoReverseUnitsDr			is an UnitsAmount
				Local1TransactionAmountCr			is an InternationalAmount
				Local1ToFunctionalAmountCr			is an InternationalAmount
				Local1ToAlternateAmountCr			is an InternationalAmount
				Local1ToAlternateAmount2Cr			is an InternationalAmount
				Local1ToAlternateAmount3Cr			is an InternationalAmount
				Local1ToAutoReverseAmountCr			is an InternationalAmount
				Local1ReportAmount1Cr				is an InternationalAmount
				Local1ReportAmount2Cr				is an InternationalAmount
				Local1ReportAmount3Cr				is an InternationalAmount
				Local1ReportAmount4Cr				is an InternationalAmount
				Local1ReportAmount5Cr				is an InternationalAmount
				Local1UnitsCr						is an UnitsAmount
				Local1AutoReverseUnitsCr			is an UnitsAmount
				LocalTransactionSequence			is Numeric 12				
				LocalToTransactionSequence			is Numeric 12
		        LocalZoneAccountingUnit				is like AccountingUnit
		        LocalTempZoneAccountingUnit			is like AccountingUnit
        		LocalZoneDimension1					is like FinanceDimension1
        		LocalTempZoneDimension1				is like FinanceDimension1
		        LocalBaseZoneAccountingUnit			is like AccountingUnit
        		LocalBaseZoneDimension1				is a FinanceDimension1
				TransactionAmountTotal				is an InternationalAmount
				FunctionalAmountTotal				is an InternationalAmount
				AlternateAmountTotal				is an InternationalAmount
				AlternateAmount2Total				is an InternationalAmount
				AlternateAmount3Total				is an InternationalAmount
				ProjectAmountTotal					is an InternationalAmount
				ReportAmount1Total					is an InternationalAmount
				ReportAmount2Total					is an InternationalAmount
				ReportAmount3Total					is an InternationalAmount
				ReportAmount4Total					is an InternationalAmount
				ReportAmount5Total					is an InternationalAmount
				UnitsTotal							is an UnitsAmount
				LocalHoldCode						is like GeneralLedgerHoldCode
				LocalInterfaceInDetail				is Boolean
				SummTransactionAmountTotal			is an InternationalAmount
				SummFunctionalAmountTotal			is an InternationalAmount
				SummAlternateAmountTotal			is an InternationalAmount
				SummAlternateAmount2Total			is an InternationalAmount
				SummAlternateAmount3Total			is an InternationalAmount
				SummToFunctionalAmountTotal			is an InternationalAmount
				SummToAlternateAmountTotal			is an InternationalAmount
				SummToAlternateAmount2Total			is an InternationalAmount
				SummToAlternateAmount3Total			is an InternationalAmount
				SummProjectAmountTotal				is an InternationalAmount
				SummReportAmount1Total				is an InternationalAmount
				SummReportAmount2Total				is an InternationalAmount
				SummReportAmount3Total				is an InternationalAmount
				SummReportAmount4Total				is an InternationalAmount
				SummReportAmount5Total				is an InternationalAmount
				SummUnitsTotal						is an UnitsAmount
				LocalJournalizeGroupResult			is a JournalizeGroupResult
				LocalSummarizedTransactionCount		is Numeric 8
				CommitNow							is Boolean
				CommitmentsInUse					is Boolean
				LocalSummarizedInterfaceTransaction is a SummarizedInterfaceTransaction		
				LocalJournalInProcess				is Boolean
				LocalToEntityJournalInProcess		is Boolean
				LocalToGeneralLedgerEvent			is like GeneralLedgerEvent
				LocalFromGeneralLedgerEvent			is like GeneralLedgerEvent
				LocalRecurringJournalControl		is like RecurringJournalControl				
				
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmEnterpriseGroup
				and    JournalizeGroup			= PrmJournalizeGroup
				and    Status.Released
				and    ((PrmAccountingEntity entered 
				and     AccountingEntity				= PrmAccountingEntity)
				or      !PrmAccountingEntity entered))
			Sort Order
				FinanceEnterpriseGroup
				JournalizeGroup
				Status
				AccountingEntity
				ZoneSystemKeyFields  
	        	FinanceCodeBlock.Ledger
				PostingDateJournalCodeKey 
	        	FinanceCodeBlock.ToAccountingEntity
				CurrencyCode
	        	ZoneFields
	        	GeneralLedgerEvent
				OrganizationKeyFields 
	            DimensionCode
				TransactionDate
				AutoReverse
			Accumulators
				TransactionAmountDrTotal
				FunctionalAmountDrTotal
				AlternateAmountDrTotal
				AlternateAmount2DrTotal
				AlternateAmount3DrTotal
				AutoReverseAmountDrTotal
				ToFunctionalAmountDrTotal
				ToAlternateAmountDrTotal
				ToAlternateAmount2DrTotal
				ToAlternateAmount3DrTotal
				ToAutoReverseAmountDrTotal
				ProjectAmountDrTotal
				ReportAmount1DrTotal
				ReportAmount2DrTotal
				ReportAmount3DrTotal
				ReportAmount4DrTotal
				ReportAmount5DrTotal
				UnitsDrTotal
				AutoReverseUnitsDrTotal
				UnitsAmountTotal

				TransactionAmountCrTotal
				FunctionalAmountCrTotal
				AlternateAmountCrTotal
				AlternateAmount2CrTotal
				AlternateAmount3CrTotal
				AutoReverseAmountCrTotal
				ToFunctionalAmountCrTotal
				ToAlternateAmountCrTotal
				ToAlternateAmount2CrTotal
				ToAlternateAmount3CrTotal
				ToAutoReverseAmountCrTotal
				ProjectAmountCrTotal
				ReportAmount1CrTotal
				ReportAmount2CrTotal
				ReportAmount3CrTotal
				ReportAmount4CrTotal
				ReportAmount5CrTotal
				UnitsCrTotal
				AutoReverseUnitsCrTotal
				
			Action Rules
				Empty Set Rules
				Set Rules
					Entrance Rules
						LocalCurrencyTable = PrmCurrencyTable
						if (!PrmJournalCreated)
							if (!PrmOriginatingInterfaceRun entered)
								LocalJournalizeGroupResult					= PrmJournalizeGroup
								if (LocalJournalizeGroupResult exists)
									if (!LocalJournalizeGroupResult.Status.Incomplete)
										invoke Update LocalJournalizeGroupResult
											invoked.Status					= 2
								else
									invoke Create JournalizeGroupResult
										invoked.FinanceEnterpriseGroup		= PrmEnterpriseGroup
										invoked.JournalizeGroupResult		= PrmJournalizeGroup
										invoked.RunTime						= current timestamp
										invoked.Status						= 2
										invoked.Description					= PrmJournalizeGroupDescription
								CommitNow = true
		
					Exit Rules
						if (!PrmJournalCreated)
							if (!PrmOriginatingInterfaceRun entered)
								LocalJournalizeGroupResult	= PrmJournalizeGroup
								invoke UpdateStatus LocalJournalizeGroupResult
									invoked.PrmStatus			= 1

				AccountingEntity Set Rules
					Entrance Rules
						LocalFrAccountingEntity		     = AccountingEntity
						LocalBypassStructureRelationEdit = PrmBypassStructureRelationEdit
						LocalFromGeneralLedgerEvent      = GeneralLedgerEvent						
													
					Exit Rules

				ZoneSystemKeyFields Set Rules
					Entrance Rules
						if (System.EncumbranceOption.TrackAndEdit
				        or  System.EncumbranceOption.Track)
							CommitmentsInUse = true
						else
							CommitmentsInUse = false
					
					Exit Rules
					
				PostingDateJournalCodeKey Set Rules 
					Entrance Rules
						initialize LocalRecurringJournalControl
						initialize LocalJeType
						initialize LocalHoldCode
						LocalAccountingEntity		= LocalFrAccountingEntity		
						LocalPostingDate			= PostingDate
						if ((!PrmJournalCreated)
						and (!LocalJournalInProcess))
							LocalHoldCode			= SystemClosingControlRel.HoldCode
							LocalTransactionSequence = 0
							invoke AutoCreate JournalControlRel
								assign result to LocalAccountingEntityJournalView
								invoked.PostingDate				= PostingDate
								invoked.TransactionDate			= TransactionDate
								invoked.Ledger					= FinanceCodeBlock.Ledger
								if(PrmPrimaryLedger entered and PrmEnterpriseGroup.CurrencyLedgerJournals)
									invoked.PrimaryLedger		= PrmPrimaryLedger
								invoked.ReleaseDate				= current corporate date
								invoked.System					= System
								invoked.Description				= NewJournalDescription
								invoked.Reference				= Reference
					        	invoked.BaseZoneAccountingUnit	= BaseZoneAccountingUnit
					        	invoked.BaseZoneDimension1		= BaseZoneDimension1
					        	invoked.OriginatingInterfaceRun = PrmOriginatingInterfaceRun
					        	invoked.HoldCode				= LocalHoldCode
								invoked.EligibleForElimination	= PrmEligibleForElimination
					        	initialize invoked.NewManualJournalControlType
					        	if (PrmCurrencyTable entered)
					        		invoked.CurrencyTable		= PrmCurrencyTable					        		
					        	if (!PrmOriginatingInterfaceRun entered)
									invoked.JournalizeGroupResult = PrmJournalizeGroup
								if (System = "RJ")   
									invoked.RelatedRJSchedule = PrmRJReference
								invoked.AutoReverseDate			= PrmAutoReverseDate
								LocalJournalInProcess = true
					    else
							LocalClosePeriod			= PrmClosePeriod
							LocalJournalControl			= PrmJournalControl
							LocalTransactionSequence 	= DerivedGLTransaction
						    
					Exit Rules

						LocalAccountingEntity		= LocalFrAccountingEntity		
						if (PrmJournalCreated)
							LocalClosePeriod			= PrmClosePeriod
							LocalJournalControl			= PrmJournalControl
							
							if (JournalControlExistsRel.Status.Unreleased)
								invoke AutoRelease JournalControlExistsRel in foreground
									invoked.PrmUpdateTotal				= false

									invoked.PrmEligibleForElimination	= PrmEligibleForElimination
									invoked.PrmEliminationLedger		= PrmEliminationLedger

						else
							if(LocalRecurringJournalControl entered)
								invoke CopyCommentsFromRecuringJournal LocalAccountingEntityJournalView.GeneralLedgerJournalControl
									invoked.PrmRecurringJournalControl = LocalRecurringJournalControl
							LocalClosePeriod		= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
							LocalJournalControl		= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
							invoke AutoRelease LocalAccountingEntityJournalView.GeneralLedgerJournalControl in foreground
								invoked.PrmFunctionalDrAmount		= FunctionalAmountDrTotal
								invoked.PrmFunctionalCrAmount		= FunctionalAmountCrTotal
								invoked.PrmAlternateDrAmount		= AlternateAmountDrTotal
								invoked.PrmAlternateCrAmount		= AlternateAmountCrTotal
								invoked.PrmAlternateDrAmount2		= AlternateAmount2DrTotal
								invoked.PrmAlternateCrAmount2		= AlternateAmount2CrTotal
								invoked.PrmAlternateDrAmount3		= AlternateAmount3DrTotal
								invoked.PrmAlternateCrAmount3		= AlternateAmount3CrTotal								
								invoked.PrmRpt1DrAmount				= ReportAmount1DrTotal
								invoked.PrmRpt1CrAmount				= ReportAmount1CrTotal
								invoked.PrmRpt2DrAmount				= ReportAmount2DrTotal
								invoked.PrmRpt2CrAmount				= ReportAmount2CrTotal
								invoked.PrmRpt3DrAmount				= ReportAmount3DrTotal
								invoked.PrmRpt3CrAmount				= ReportAmount3CrTotal
								invoked.PrmRpt4DrAmount				= ReportAmount4DrTotal
								invoked.PrmRpt4CrAmount				= ReportAmount4CrTotal
								invoked.PrmRpt5DrAmount				= ReportAmount5DrTotal
								invoked.PrmRpt5CrAmount				= ReportAmount5CrTotal
								invoked.PrmAutoReverseDrAmount		= AutoReverseAmountDrTotal
								invoked.PrmAutoReverseCrAmount		= AutoReverseAmountCrTotal
								invoked.PrmUnitsDrAmount			= UnitsDrTotal
								invoked.PrmUnitsCrAmount			= UnitsCrTotal
								invoked.PrmAutoReverseUnitsDrAmount = AutoReverseUnitsDrTotal
								invoked.PrmAutoReverseUnitsCrAmount = AutoReverseUnitsCrTotal
								invoked.PrmJeType					= LocalJeType
								invoked.PrmUpdateTotal				= true
								invoked.PrmJournalizeGroup			= PrmJournalizeGroup

								invoked.PrmEligibleForElimination	= PrmEligibleForElimination
								invoked.PrmEliminationLedger		= PrmEliminationLedger

							LocalJournalInProcess = false
						CommitNow 			= true
	        	FinanceCodeBlock.ToAccountingEntity  Set Rules
					Entrance Rules
						initialize LocalRecurringJournalControl
						LocalToAccountingEntity			= FinanceCodeBlock.ToAccountingEntity
						LocalToGeneralLedgerEvent		= GeneralLedgerEvent
						if (LocalFrAccountingEntity		!= LocalToAccountingEntity)
							LocalJeType					= 1
							LocalAccountingEntity		= LocalToAccountingEntity
							LocalHoldCode				= SystemClosingControlRel.HoldCode
							if (!LocalToEntityJournalInProcess)
								LocalToTransactionSequence = 0

								invoke AutoCreate JournalControlRel
									assign result to LocalToAccountingEntityJournalView
									invoked.PostingDate					= PostingDate
									invoked.TransactionDate				= TransactionDate
									invoked.Ledger						= FinanceCodeBlock.Ledger
									if(PrmPrimaryLedger entered and PrmEnterpriseGroup.CurrencyLedgerJournals)
										invoked.PrimaryLedger		= PrmPrimaryLedger
									invoked.ReleaseDate					= current corporate date
									invoked.System						= System
									invoked.Description					= NewJournalDescription
									invoked.Reference					= Reference
									invoked.EligibleForElimination		= PrmEligibleForElimination
									initialize invoked.NewManualJournalControlType
									if (PrmJournalControl entered)
										invoked.RelatedJournalTransaction = reference to PrmJournalControl
									else
										invoked.RelatedJournalTransaction = reference to LocalAccountingEntityJournalView.GeneralLedgerJournalControl
									LocalEntity.DimensionEntity		= LocalToAccountingEntity
									if (LocalEntity.DimensionEntity.AccountingUnitZoneBalancing)
										initialize LocalInstAccountingUnit
							        	invoked.BaseZoneAccountingUnit	= DerivedBaseZoneAccountingUnit
						        	invoked.BaseZoneDimension1			= BaseZoneDimension1
						        	invoked.OriginatingInterfaceRun		= PrmOriginatingInterfaceRun
						        	invoked.HoldCode					= LocalHoldCode
						        	if (PrmCurrencyTable entered)
						        		invoked.CurrencyTable			= PrmCurrencyTable					        	
									if (!PrmJournalCreated)
							        	if (!PrmOriginatingInterfaceRun entered)
											invoked.JournalizeGroupResult   = PrmJournalizeGroup
									if (System = "RJ")   
										invoked.RelatedRJSchedule = PrmRJReference
									invoked.AutoReverseDate				= PrmAutoReverseDate
								LocalToEntityJournalInProcess = true

					Exit Rules
						initialize Local1ToFunctionalAmountDr
						initialize Local1ToAlternateAmountDr
						initialize Local1ToAlternateAmount2Dr
						initialize Local1ToAlternateAmount3Dr
						initialize Local1ToAutoReverseAmountDr
						initialize Local1ReportAmount1Dr
						initialize Local1ReportAmount2Dr
						initialize Local1ReportAmount3Dr
						initialize Local1ReportAmount4Dr
						initialize Local1ReportAmount5Dr
						initialize Local1UnitsDr
						initialize Local1AutoReverseUnitsDr
						initialize Local1ToFunctionalAmountCr
						initialize Local1ToAlternateAmountCr
						initialize Local1ToAlternateAmount2Cr
						initialize Local1ToAlternateAmount3Cr
						initialize Local1ToAutoReverseAmountCr
						initialize Local1ReportAmount1Cr
						initialize Local1ReportAmount2Cr
						initialize Local1ReportAmount3Cr
						initialize Local1ReportAmount4Cr
						initialize Local1ReportAmount5Cr
						initialize Local1UnitsCr
						initialize Local1AutoReverseUnitsCr
						LocalAccountingEntity			= LocalFrAccountingEntity
						if (LocalFrAccountingEntity		!= LocalToAccountingEntity)
							if (PrmJournalCreated)
								LocalClosePeriod			= PrmClosePeriod
								LocalJournalControl			= PrmJournalControl
							else
								LocalClosePeriod			= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
								LocalJournalControl			= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
							for each GLInterEntityTotalRel
								initialize LocalIntEntTransactionAmount
								initialize LocalIntEntFunctionalAmount
								initialize LocalIntEntAlternateAmount
								initialize LocalIntEntAlternateAmount2
								initialize LocalIntEntAlternateAmount3
								initialize LocalIntEntReportAmount1
								initialize LocalIntEntReportAmount2
								initialize LocalIntEntReportAmount3
								initialize LocalIntEntReportAmount4
								initialize LocalIntEntReportAmount5
								initialize LocalIntEntUnits
								if (InterEntityReceivablesAccount	= InterEntityPayablesAccount)
									LocalAmountIsPositive	= true

									if (each.FromEntityAmountsExist)
										LocalIntEntTransactionAmount	= each.TransactionAmount
										LocalIntEntFunctionalAmount		= each.FunctionalAmount
										LocalIntEntAlternateAmount		= each.AlternateAmount
										LocalIntEntAlternateAmount2		= each.AlternateAmount2
										LocalIntEntAlternateAmount3		= each.AlternateAmount3
										LocalIntEntReportAmount1		= each.ReportAmount1
										LocalIntEntReportAmount2		= each.ReportAmount2
										LocalIntEntReportAmount3		= each.ReportAmount3
										LocalIntEntReportAmount4		= each.ReportAmount4
										LocalIntEntReportAmount5		= each.ReportAmount5
										LocalIntEntUnits				= each.UnitsAmount
										include CreateFromInterEntityTransaction

										TransactionAmountTotal		= each.TransactionAmount
										FunctionalAmountTotal		= each.FunctionalAmount
										AlternateAmountTotal		= each.AlternateAmount
										AlternateAmount2Total		= each.AlternateAmount2
										AlternateAmount3Total		= each.AlternateAmount3
										ProjectAmountTotal			= each.ProjectAmount
										ReportAmount1Total			= each.ReportAmount1
										ReportAmount2Total			= each.ReportAmount2
										ReportAmount3Total			= each.ReportAmount3
										ReportAmount4Total			= each.ReportAmount4
										ReportAmount5Total			= each.ReportAmount5
										include UpdateInterEntityZoneAmounts

									if (each.ToEntityAmountsExist)
										initialize LocalIntEntTransactionAmount
										initialize LocalIntEntFunctionalAmount
										initialize LocalIntEntAlternateAmount
										initialize LocalIntEntAlternateAmount2
										initialize LocalIntEntAlternateAmount3
										initialize LocalIntEntReportAmount1
										initialize LocalIntEntReportAmount2
										initialize LocalIntEntReportAmount3
										initialize LocalIntEntReportAmount4
										initialize LocalIntEntReportAmount5
										initialize LocalIntEntUnits
										LocalIntEntTransactionAmount	-= each.TransactionAmount
										LocalIntEntFunctionalAmount		-= each.ToFunctionalAmount
										LocalIntEntAlternateAmount		-= each.ToAlternateAmount
										LocalIntEntAlternateAmount2		-= each.ToAlternateAmount2
										LocalIntEntAlternateAmount3		-= each.ToAlternateAmount3
										LocalIntEntReportAmount1		-= each.ReportAmount1
										LocalIntEntReportAmount2		-= each.ReportAmount2
										LocalIntEntReportAmount3		-= each.ReportAmount3
										LocalIntEntReportAmount4		-= each.ReportAmount4
										LocalIntEntReportAmount5		-= each.ReportAmount5
										LocalIntEntUnits				-= each.UnitsAmount
										include CreateToInterEntityTransaction
								else

									if (each.FromEntityAmountsExist)
										if (each.TransactionAmount		> 0
										or  each.FunctionalAmount		> 0
										or  each.AlternateAmount		> 0
										or  each.AlternateAmount2		> 0
										or  each.AlternateAmount3		> 0
										or  each.ReportAmount1			> 0
										or  each.ReportAmount2			> 0
										or  each.ReportAmount3			> 0
										or  each.ReportAmount4			> 0
										or  each.ReportAmount5			> 0
										or  each.UnitsAmount			> 0)
											LocalAmountIsPositive	= true
											if (each.TransactionAmount		> 0)
												LocalIntEntTransactionAmount	= each.TransactionAmount
											if (each.FunctionalAmount		> 0)
												LocalIntEntFunctionalAmount		= each.FunctionalAmount
											if (each.AlternateAmount		> 0)
												LocalIntEntAlternateAmount		= each.AlternateAmount
											if (each.AlternateAmount2		> 0)
												LocalIntEntAlternateAmount2		= each.AlternateAmount2
											if (each.AlternateAmount3		> 0)
												LocalIntEntAlternateAmount3		= each.AlternateAmount3
											if (each.ReportAmount1			> 0)
												LocalIntEntReportAmount1		= each.ReportAmount1
											if (each.ReportAmount2			> 0)
												LocalIntEntReportAmount2		= each.ReportAmount2
											if (each.ReportAmount3			> 0)
												LocalIntEntReportAmount3		= each.ReportAmount3
											if (each.ReportAmount4			> 0)
												LocalIntEntReportAmount4		= each.ReportAmount4
											if (each.ReportAmount5			> 0)
												LocalIntEntReportAmount5		= each.ReportAmount5
											if (each.UnitsAmount			> 0)
												LocalIntEntUnits				= each.UnitsAmount
											include CreateFromInterEntityTransaction

										initialize LocalIntEntTransactionAmount
										initialize LocalIntEntFunctionalAmount
										initialize LocalIntEntAlternateAmount
										initialize LocalIntEntAlternateAmount2
										initialize LocalIntEntAlternateAmount3
										initialize LocalIntEntReportAmount1
										initialize LocalIntEntReportAmount2
										initialize LocalIntEntReportAmount3
										initialize LocalIntEntReportAmount4
										initialize LocalIntEntReportAmount5
										initialize LocalIntEntUnits
										if (each.TransactionAmount		< 0
										or  each.FunctionalAmount		< 0
										or  each.AlternateAmount		< 0
										or  each.AlternateAmount2		< 0
										or  each.AlternateAmount3		< 0
										or  each.ReportAmount1			< 0
										or  each.ReportAmount2			< 0
										or  each.ReportAmount3			< 0
										or  each.ReportAmount4			< 0
										or  each.ReportAmount5			< 0
										or  each.UnitsAmount			< 0)
											LocalAmountIsPositive	= false
											if (each.TransactionAmount		< 0)
												LocalIntEntTransactionAmount	= each.TransactionAmount
											if (each.FunctionalAmount		< 0)
												LocalIntEntFunctionalAmount		= each.FunctionalAmount
											if (each.AlternateAmount		< 0)
												LocalIntEntAlternateAmount		= each.AlternateAmount
											if (each.AlternateAmount2		< 0)
												LocalIntEntAlternateAmount2		= each.AlternateAmount2
											if (each.AlternateAmount3		< 0)
												LocalIntEntAlternateAmount3		= each.AlternateAmount3
											if (each.ReportAmount1			< 0)
												LocalIntEntReportAmount1		= each.ReportAmount1
											if (each.ReportAmount2			< 0)
												LocalIntEntReportAmount2		= each.ReportAmount2
											if (each.ReportAmount3			< 0)
												LocalIntEntReportAmount3		= each.ReportAmount3
											if (each.ReportAmount4			< 0)
												LocalIntEntReportAmount4		= each.ReportAmount4
											if (each.ReportAmount5			< 0)
												LocalIntEntReportAmount5		= each.ReportAmount5
											if (each.UnitsAmount			< 0)
												LocalIntEntUnits				= each.UnitsAmount
											include CreateFromInterEntityTransaction
										TransactionAmountTotal		= each.TransactionAmount
										FunctionalAmountTotal		= each.FunctionalAmount
										AlternateAmountTotal		= each.AlternateAmount
										AlternateAmount2Total		= each.AlternateAmount2
										AlternateAmount3Total		= each.AlternateAmount3
										ProjectAmountTotal			= each.ProjectAmount
										ReportAmount1Total			= each.ReportAmount1
										ReportAmount2Total			= each.ReportAmount2
										ReportAmount3Total			= each.ReportAmount3
										ReportAmount4Total			= each.ReportAmount4
										ReportAmount5Total			= each.ReportAmount5
										include UpdateInterEntityZoneAmounts

									initialize LocalIntEntTransactionAmount
									initialize LocalIntEntFunctionalAmount
									initialize LocalIntEntAlternateAmount
									initialize LocalIntEntAlternateAmount2
									initialize LocalIntEntAlternateAmount3
									initialize LocalIntEntReportAmount1
									initialize LocalIntEntReportAmount2
									initialize LocalIntEntReportAmount3
									initialize LocalIntEntReportAmount4
									initialize LocalIntEntReportAmount5
									initialize LocalIntEntUnits
									if (each.ToEntityAmountsExist)
										if (each.TransactionAmount		> 0
										or  each.ToFunctionalAmount		> 0
										or  each.ToAlternateAmount		> 0
										or  each.ToAlternateAmount2		> 0
										or  each.ToAlternateAmount3		> 0
										or  each.ReportAmount1			> 0
										or  each.ReportAmount2			> 0
										or  each.ReportAmount3			> 0
										or  each.ReportAmount4			> 0
										or  each.ReportAmount5			> 0
										or  each.UnitsAmount			> 0)
											LocalAmountIsPositive	= true
											if (each.TransactionAmount		> 0)
												LocalIntEntTransactionAmount	-= each.TransactionAmount
											if (each.ToFunctionalAmount		> 0)
												LocalIntEntFunctionalAmount		-= each.ToFunctionalAmount
											if (each.ToAlternateAmount		> 0)
												LocalIntEntAlternateAmount		-= each.ToAlternateAmount
											if (each.ToAlternateAmount2		> 0)
												LocalIntEntAlternateAmount2		-= each.ToAlternateAmount2
											if (each.ToAlternateAmount3		> 0)
												LocalIntEntAlternateAmount3		-= each.ToAlternateAmount3
											if (each.ReportAmount1			> 0)
												LocalIntEntReportAmount1		-= each.ReportAmount1
											if (each.ReportAmount2			> 0)
												LocalIntEntReportAmount2		-= each.ReportAmount2
											if (each.ReportAmount3			> 0)
												LocalIntEntReportAmount3		-= each.ReportAmount3
											if (each.ReportAmount4			> 0)
												LocalIntEntReportAmount4		-= each.ReportAmount4
											if (each.ReportAmount5			> 0)
												LocalIntEntReportAmount5		-= each.ReportAmount5
											if (each.UnitsAmount			> 0)
												LocalIntEntUnits				-= each.UnitsAmount
											include CreateToInterEntityTransaction

										initialize LocalIntEntTransactionAmount
										initialize LocalIntEntFunctionalAmount
										initialize LocalIntEntAlternateAmount
										initialize LocalIntEntAlternateAmount2
										initialize LocalIntEntAlternateAmount3
										initialize LocalIntEntReportAmount1
										initialize LocalIntEntReportAmount2
										initialize LocalIntEntReportAmount3
										initialize LocalIntEntReportAmount4
										initialize LocalIntEntReportAmount5
										initialize LocalIntEntUnits
										if (each.TransactionAmount		< 0
										or  each.ToFunctionalAmount		< 0
										or  each.ToAlternateAmount		< 0
										or  each.ToAlternateAmount2		< 0
										or  each.ToAlternateAmount3		< 0
										or  each.ReportAmount1			< 0
										or  each.ReportAmount2			< 0
										or  each.ReportAmount3			< 0
										or  each.ReportAmount4			< 0
										or  each.ReportAmount5			< 0
										or  each.UnitsAmount			< 0)
											LocalAmountIsPositive	= false
											if (each.TransactionAmount		< 0)
												LocalIntEntTransactionAmount	-= each.TransactionAmount
											if (each.ToFunctionalAmount		< 0)
												LocalIntEntFunctionalAmount		-= each.ToFunctionalAmount
											if (each.ToAlternateAmount		< 0)
												LocalIntEntAlternateAmount		-= each.ToAlternateAmount
											if (each.ToAlternateAmount2		< 0)
												LocalIntEntAlternateAmount2		-= each.ToAlternateAmount2
											if (each.ToAlternateAmount3		< 0)
												LocalIntEntAlternateAmount3		-= each.ToAlternateAmount3
											if (each.ReportAmount1			< 0)
												LocalIntEntReportAmount1		-= each.ReportAmount1
											if (each.ReportAmount2			< 0)
												LocalIntEntReportAmount2		-= each.ReportAmount2
											if (each.ReportAmount3			< 0)
												LocalIntEntReportAmount3		-= each.ReportAmount3
											if (each.ReportAmount4			< 0)
												LocalIntEntReportAmount4		-= each.ReportAmount4
											if (each.ReportAmount5			< 0)
												LocalIntEntReportAmount5		-= each.ReportAmount5
											if (each.UnitsAmount			< 0)
												LocalIntEntUnits				-= each.UnitsAmount
											include CreateToInterEntityTransaction
								if (each.ToEntityAmountsExist)
									initialize TransactionAmountTotal
									initialize FunctionalAmountTotal
									initialize AlternateAmountTotal
									initialize AlternateAmount2Total
									initialize AlternateAmount3Total
									initialize ProjectAmountTotal
									initialize ReportAmount1Total
									initialize ReportAmount2Total
									initialize ReportAmount3Total
									initialize ReportAmount4Total
									initialize ReportAmount5Total

									TransactionAmountTotal		-= each.TransactionAmount
									FunctionalAmountTotal		-= each.FunctionalAmount
									AlternateAmountTotal		-= each.AlternateAmount
									AlternateAmount2Total		-= each.AlternateAmount2
									AlternateAmount3Total		-= each.AlternateAmount3
									ProjectAmountTotal			-= each.ProjectAmount
									ReportAmount1Total			-= each.ReportAmount1
									ReportAmount2Total			-= each.ReportAmount2
									ReportAmount3Total			-= each.ReportAmount3
									ReportAmount4Total			-= each.ReportAmount4
									ReportAmount5Total			-= each.ReportAmount5
									include UpdateInterEntityZoneAmounts

									initialize LocalTransactionAmountDr
									initialize LocalTransactionAmountCr
									initialize LocalToFunctionalAmountDr
									initialize LocalToFunctionalAmountCr
									initialize LocalToAlternateAmountDr
									initialize LocalToAlternateAmountCr
									initialize LocalToAlternateAmount2Dr
									initialize LocalToAlternateAmount2Cr
									initialize LocalToAlternateAmount3Dr
									initialize LocalToAlternateAmount3Cr
									initialize LocalReportAmount1Dr
									initialize LocalReportAmount1Cr
									initialize LocalReportAmount2Dr
									initialize LocalReportAmount2Cr
									initialize LocalReportAmount3Dr
									initialize LocalReportAmount3Cr
									initialize LocalReportAmount4Dr
									initialize LocalReportAmount4Cr
									initialize LocalReportAmount5Dr
									initialize LocalReportAmount5Cr

									initialize LocalAmount
									LocalAmount			-= each.TransactionAmount
									if (LocalAmount					> 0)
										LocalTransactionAmountDr		= LocalAmount
									else
										LocalTransactionAmountCr		= LocalAmount
									initialize LocalAmount
									LocalAmount			-= each.ToFunctionalAmount
									if (LocalAmount					> 0)
										LocalToFunctionalAmountDr		= LocalAmount
										Local1ToFunctionalAmountDr		+= LocalAmount
										if (each.GLInterEntityTotal.AutoReverse)
											LocalToAutoReverseAmountDr	= LocalAmount
											Local1ToAutoReverseAmountDr	+= LocalAmount
									else
										LocalToFunctionalAmountCr		= LocalAmount
										Local1ToFunctionalAmountCr		+= LocalAmount
										if (each.GLInterEntityTotal.AutoReverse)
											LocalToAutoReverseAmountCr	= LocalAmount
											Local1ToAutoReverseAmountCr	+= LocalAmount
									initialize LocalAmount
									LocalAmount			-= each.ToAlternateAmount
									if (LocalAmount					> 0)
										LocalToAlternateAmountDr		= LocalAmount
										Local1ToAlternateAmountDr		+= LocalAmount
									else
										LocalToAlternateAmountCr		= LocalAmount
										Local1ToAlternateAmountCr		+= LocalAmount
									initialize LocalAmount
									LocalAmount			-= each.ToAlternateAmount2
									if (LocalAmount					> 0)
										LocalToAlternateAmount2Dr		= LocalAmount
										Local1ToAlternateAmount2Dr		+= LocalAmount
									else
										LocalToAlternateAmount2Cr		= LocalAmount
										Local1ToAlternateAmount2Cr		+= LocalAmount
									initialize LocalAmount
									LocalAmount			-= each.ToAlternateAmount3
									if (LocalAmount					> 0)
										LocalToAlternateAmount3Dr		= LocalAmount
										Local1ToAlternateAmount3Dr		+= LocalAmount
									else
										LocalToAlternateAmount3Cr		= LocalAmount
										Local1ToAlternateAmount3Cr		+= LocalAmount
									initialize LocalAmount
									LocalAmount			-= each.ReportAmount1
									if (LocalAmount					> 0)
										LocalReportAmount1Dr			= LocalAmount
										Local1ReportAmount1Dr			+= LocalAmount
									else
										LocalReportAmount1Cr			= LocalAmount
										Local1ReportAmount1Cr			+= LocalAmount
									initialize LocalAmount
									LocalAmount			-= each.ReportAmount2
									if (LocalAmount					> 0)
										LocalReportAmount2Dr			= LocalAmount
										Local1ReportAmount2Dr			+= LocalAmount
									else
										LocalReportAmount2Cr			= LocalAmount
										Local1ReportAmount2Cr			+= LocalAmount
									initialize LocalAmount
									LocalAmount			-= each.ReportAmount3
									if (LocalAmount					> 0)
										LocalReportAmount3Dr			= LocalAmount
										Local1ReportAmount3Dr			+= LocalAmount
									else
										LocalReportAmount3Cr			= LocalAmount
										Local1ReportAmount3Cr			+= LocalAmount
									initialize LocalAmount
									LocalAmount			-= each.ReportAmount4
									if (LocalAmount					> 0)
										LocalReportAmount4Dr			= LocalAmount
										Local1ReportAmount4Dr			+= LocalAmount
									else
										LocalReportAmount4Cr			= LocalAmount
										Local1ReportAmount4Cr			+= LocalAmount
									initialize LocalAmount
									LocalAmount			-= each.ReportAmount5
									if (LocalAmount					> 0)
										LocalReportAmount5Dr			= LocalAmount
										Local1ReportAmount5Dr			+= LocalAmount
									else
										LocalReportAmount5Cr			= LocalAmount
										Local1ReportAmount5Cr			+= LocalAmount
									
									LocalUnits 			-= each.UnitsAmount
									if (LocalUnits > 0)
										Local1UnitsDr					+= LocalUnits
										if (each.GLInterEntityTotal.AutoReverse)
											Local1AutoReverseUnitsDr    += LocalUnits
									else
										Local1UnitsCr					+= LocalUnits
										if (each.GLInterEntityTotal.AutoReverse)
											Local1AutoReverseUnitsCr    += LocalUnits												

									LocalAccountingEntity		= LocalToAccountingEntity		
									LocalClosePeriod			= LocalToAccountingEntityJournalView.GeneralLedgerClosePeriod
									LocalJournalControl			= LocalToAccountingEntityJournalView.GeneralLedgerJournalControl
									LocalCurrencyCode			= each.GLInterEntityTotal.CurrencyCode
									LocalEntity.DimensionEntity		= LocalToAccountingEntity
									if (LocalEntity.DimensionEntity.BalanceTransactionCurrency)
										invoke UpdateJournalCurrencyTotals GLCurrencyJournalControlRel in foreground
											invoked.PrmTransactionDrAmount		= LocalTransactionAmountDr
											invoked.PrmTransactionCrAmount		= LocalTransactionAmountCr
											invoked.PrmFunctionalDrAmount		= LocalToFunctionalAmountDr
											invoked.PrmFunctionalCrAmount		= LocalToFunctionalAmountCr
											invoked.PrmAutoReverseDrAmount		= LocalToAutoReverseAmountDr
											invoked.PrmAutoReverseCrAmount		= LocalToAutoReverseAmountCr
											invoked.PrmAlternateDrAmount		= LocalToAlternateAmountDr
											invoked.PrmAlternateCrAmount		= LocalToAlternateAmountCr
											invoked.PrmAlternateDrAmount2		= LocalToAlternateAmount2Dr
											invoked.PrmAlternateCrAmount2		= LocalToAlternateAmount2Cr
											invoked.PrmAlternateDrAmount3		= LocalToAlternateAmount3Dr
											invoked.PrmAlternateCrAmount3		= LocalToAlternateAmount3Cr											
											invoked.PrmRpt1DrAmount				= LocalReportAmount1Dr
											invoked.PrmRpt1CrAmount				= LocalReportAmount1Cr
											invoked.PrmRpt2DrAmount				= LocalReportAmount2Dr
											invoked.PrmRpt2CrAmount				= LocalReportAmount2Cr
											invoked.PrmRpt3DrAmount				= LocalReportAmount3Dr
											invoked.PrmRpt3CrAmount				= LocalReportAmount3Cr
											invoked.PrmRpt4DrAmount				= LocalReportAmount4Dr
											invoked.PrmRpt4CrAmount				= LocalReportAmount4Cr
											invoked.PrmRpt5DrAmount				= LocalReportAmount5Dr
											invoked.PrmRpt5CrAmount				= LocalReportAmount5Cr
								LocalAccountingEntity		= LocalFrAccountingEntity		
								invoke ChangeStatus each

							if(LocalRecurringJournalControl entered)
								invoke CopyCommentsFromRecuringJournal LocalToAccountingEntityJournalView.GeneralLedgerJournalControl
									invoked.PrmRecurringJournalControl = LocalRecurringJournalControl
							LocalAccountingEntity		= LocalToAccountingEntity
							invoke AutoRelease LocalToAccountingEntityJournalView.GeneralLedgerJournalControl in foreground
								invoked.PrmFunctionalDrAmount		= (ToFunctionalAmountDrTotal + Local1ToFunctionalAmountDr)
								invoked.PrmAlternateDrAmount		= (ToAlternateAmountDrTotal  + Local1ToAlternateAmountDr)
								invoked.PrmAlternateDrAmount2		= (ToAlternateAmount2DrTotal + Local1ToAlternateAmount2Dr)
								invoked.PrmAlternateDrAmount3		= (ToAlternateAmount3DrTotal + Local1ToAlternateAmount3Dr)
								invoked.PrmRpt1DrAmount				= (ReportAmount1DrTotal + Local1ReportAmount1Dr)
								invoked.PrmRpt2DrAmount				= (ReportAmount2DrTotal + Local1ReportAmount2Dr)
								invoked.PrmRpt3DrAmount				= (ReportAmount3DrTotal + Local1ReportAmount3Dr)
								invoked.PrmRpt4DrAmount				= (ReportAmount4DrTotal + Local1ReportAmount4Dr)
								invoked.PrmRpt5DrAmount				= (ReportAmount5DrTotal + Local1ReportAmount5Dr)
								invoked.PrmFunctionalCrAmount		= (ToFunctionalAmountCrTotal + Local1ToFunctionalAmountCr)
								invoked.PrmAlternateCrAmount		= (ToAlternateAmountCrTotal  + Local1ToAlternateAmountCr)
								invoked.PrmAlternateCrAmount2		= (ToAlternateAmount2CrTotal + Local1ToAlternateAmount2Cr)
								invoked.PrmAlternateCrAmount3		= (ToAlternateAmount3CrTotal + Local1ToAlternateAmount3Cr)
								invoked.PrmRpt1CrAmount				= (ReportAmount1CrTotal + Local1ReportAmount1Cr)
								invoked.PrmRpt2CrAmount				= (ReportAmount2CrTotal + Local1ReportAmount2Cr)
								invoked.PrmRpt3CrAmount				= (ReportAmount3CrTotal + Local1ReportAmount3Cr)
								invoked.PrmRpt4CrAmount				= (ReportAmount4CrTotal + Local1ReportAmount4Cr)
								invoked.PrmRpt5CrAmount				= (ReportAmount5CrTotal + Local1ReportAmount5Cr)
								invoked.PrmAutoReverseDrAmount		= (ToAutoReverseAmountDrTotal + Local1ToAutoReverseAmountDr)
								invoked.PrmAutoReverseCrAmount		= (ToAutoReverseAmountCrTotal + Local1ToAutoReverseAmountCr)
								invoked.PrmUnitsDrAmount			= (UnitsDrTotal + Local1UnitsDr)
								invoked.PrmUnitsCrAmount		    = (UnitsCrTotal + Local1UnitsCr)
								invoked.PrmAutoReverseUnitsDrAmount = (AutoReverseUnitsDrTotal + Local1AutoReverseUnitsDr)
								invoked.PrmAutoReverseUnitsCrAmount = (AutoReverseUnitsCrTotal + Local1AutoReverseUnitsCr)
								invoked.PrmUpdateTotal				= true
								invoked.PrmJeType					= LocalJeType
								invoked.PrmJournalizeGroup			= PrmJournalizeGroup

								invoked.PrmEligibleForElimination	= PrmEligibleForElimination
								invoked.PrmEliminationLedger		= PrmEliminationLedger

							LocalToEntityJournalInProcess = false
							CommitNow 					  = true

				CurrencyCode	Set Rules
					Entrance Rules
						LocalActionCurrencyCode		= CurrencyCode
						if (!LocalActionCurrencyCode entered)	
							LocalActionCurrencyCode = AccountingEntity.FunctionalCurrency
						
					Exit Rules
						if (!PrmJournalCreated)
							LocalAccountingEntity		= LocalFrAccountingEntity		
							LocalClosePeriod			= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
							LocalJournalControl			= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
							LocalCurrencyCode			= LocalActionCurrencyCode
							LocalEntity.DimensionEntity		= LocalFrAccountingEntity
							if (LocalEntity.DimensionEntity.BalanceTransactionCurrency)
								invoke UpdateJournalCurrencyTotals GLCurrencyJournalControlRel in foreground
									invoked.PrmTransactionDrAmount	= TransactionAmountDrTotal
									invoked.PrmTransactionCrAmount	= TransactionAmountCrTotal
									invoked.PrmFunctionalDrAmount	= FunctionalAmountDrTotal
									invoked.PrmFunctionalCrAmount	= FunctionalAmountCrTotal
									invoked.PrmAlternateDrAmount	= AlternateAmountDrTotal
									invoked.PrmAlternateCrAmount	= AlternateAmountCrTotal
									invoked.PrmAlternateDrAmount2	= AlternateAmount2DrTotal
									invoked.PrmAlternateCrAmount2	= AlternateAmount2CrTotal
									invoked.PrmAlternateDrAmount3	= AlternateAmount3DrTotal
									invoked.PrmAlternateCrAmount3	= AlternateAmount3CrTotal									
									invoked.PrmAutoReverseDrAmount	= AutoReverseAmountDrTotal
									invoked.PrmAutoReverseCrAmount	= AutoReverseAmountCrTotal
									invoked.PrmRpt1DrAmount			= ReportAmount1DrTotal
									invoked.PrmRpt1CrAmount			= ReportAmount1CrTotal
									invoked.PrmRpt2DrAmount			= ReportAmount2DrTotal
									invoked.PrmRpt2CrAmount			= ReportAmount2CrTotal
									invoked.PrmRpt3DrAmount			= ReportAmount3DrTotal
									invoked.PrmRpt3CrAmount			= ReportAmount3CrTotal
									invoked.PrmRpt4DrAmount			= ReportAmount4DrTotal
									invoked.PrmRpt4CrAmount			= ReportAmount4CrTotal
									invoked.PrmRpt5DrAmount			= ReportAmount5DrTotal
									invoked.PrmRpt5CrAmount			= ReportAmount5CrTotal
						if (LocalFrAccountingEntity		!= LocalToAccountingEntity)
							LocalAccountingEntity		= LocalToAccountingEntity		
							LocalClosePeriod			= LocalToAccountingEntityJournalView.GeneralLedgerClosePeriod
							LocalJournalControl			= LocalToAccountingEntityJournalView.GeneralLedgerJournalControl
							LocalCurrencyCode			= LocalToTransactionView.CurrencyCode
							LocalEntity.DimensionEntity		= LocalToAccountingEntity
							if (LocalEntity.DimensionEntity.BalanceTransactionCurrency)
								invoke UpdateJournalCurrencyTotals GLCurrencyJournalControlRel in foreground
									invoked.PrmTransactionDrAmount	= TransactionAmountDrTotal
									invoked.PrmTransactionCrAmount	= TransactionAmountCrTotal
									invoked.PrmFunctionalDrAmount	= ToFunctionalAmountDrTotal
									invoked.PrmFunctionalCrAmount	= ToFunctionalAmountCrTotal
									invoked.PrmAlternateDrAmount	= ToAlternateAmountDrTotal
									invoked.PrmAlternateCrAmount	= ToAlternateAmountCrTotal
									invoked.PrmAlternateDrAmount2	= ToAlternateAmount2DrTotal
									invoked.PrmAlternateCrAmount2	= ToAlternateAmount2CrTotal
									invoked.PrmAlternateDrAmount3	= ToAlternateAmount3DrTotal
									invoked.PrmAlternateCrAmount3	= ToAlternateAmount3CrTotal									
									invoked.PrmAutoReverseDrAmount	= ToAutoReverseAmountDrTotal
									invoked.PrmAutoReverseCrAmount	= ToAutoReverseAmountCrTotal
									invoked.PrmRpt1DrAmount			= ReportAmount1DrTotal
									invoked.PrmRpt1CrAmount			= ReportAmount1CrTotal
									invoked.PrmRpt2DrAmount			= ReportAmount2DrTotal
									invoked.PrmRpt2CrAmount			= ReportAmount2CrTotal
									invoked.PrmRpt3DrAmount			= ReportAmount3DrTotal
									invoked.PrmRpt3CrAmount			= ReportAmount3CrTotal
									invoked.PrmRpt4DrAmount			= ReportAmount4DrTotal
									invoked.PrmRpt4CrAmount			= ReportAmount4CrTotal
									invoked.PrmRpt5DrAmount			= ReportAmount5DrTotal
									invoked.PrmRpt5CrAmount			= ReportAmount5CrTotal

				ZoneFields	Set Rules
					Entrance Rules
				        LocalZoneAccountingUnit		= ZoneAccountingUnit
		        		LocalZoneDimension1			= ZoneDimension1

					Exit Rules
						if (MigStatus.NotMigrated)		
							TransactionAmountTotal		= TransactionAmountDrTotal	+ TransactionAmountCrTotal
							ProjectAmountTotal			= ProjectAmountDrTotal		+ ProjectAmountCrTotal
							ReportAmount1Total			= ReportAmount1DrTotal		+ ReportAmount1CrTotal
							ReportAmount2Total			= ReportAmount2DrTotal		+ ReportAmount2CrTotal
							ReportAmount3Total			= ReportAmount3DrTotal		+ ReportAmount3CrTotal
							ReportAmount4Total			= ReportAmount4DrTotal		+ ReportAmount4CrTotal
							ReportAmount5Total			= ReportAmount5DrTotal		+ ReportAmount5CrTotal
							if (LocalFrAccountingEntity		!= LocalToAccountingEntity)
								LocalEntity.DimensionEntity		= LocalToAccountingEntity
								if (LocalEntity.DimensionEntity.AccountingUnitZoneBalancing
								or	FinanceEnterpriseGroup.Dimension1ZoneBalancing)
									LocalAccountingEntity			= LocalToAccountingEntityJournalView.AccountingEntity
									LocalClosePeriod				= LocalToAccountingEntityJournalView.GeneralLedgerClosePeriod
									LocalJournalControl				= LocalToAccountingEntityJournalView.GeneralLedgerJournalControl
									LocalBaseZoneAccountingUnit		= LocalToAccountingEntityJournalView.BaseZoneAccountingUnit
									LocalBaseZoneDimension1			= LocalToAccountingEntityJournalView.BaseZoneDimension1
									FunctionalAmountTotal			= ToFunctionalAmountDrTotal	+ ToFunctionalAmountCrTotal
									AlternateAmountTotal			= ToAlternateAmountDrTotal	+ ToAlternateAmountCrTotal
									AlternateAmount2Total			= ToAlternateAmount2DrTotal	+ ToAlternateAmount2CrTotal
									AlternateAmount3Total			= ToAlternateAmount3DrTotal	+ ToAlternateAmount3CrTotal
									include UpdateZoneTotals
							else
								LocalEntity.DimensionEntity		= LocalFrAccountingEntity
								if (LocalEntity.DimensionEntity.AccountingUnitZoneBalancing
								or	FinanceEnterpriseGroup.Dimension1ZoneBalancing)
									if (PrmJournalCreated)
										LocalAccountingEntity			= LocalFrAccountingEntity
										LocalClosePeriod				= PrmClosePeriod
										LocalJournalControl				= PrmJournalControl
										LocalBaseZoneAccountingUnit		= JournalControlExistsRel.BaseZoneAccountingUnit
										LocalBaseZoneDimension1			= JournalControlExistsRel.BaseZoneDimension1
									else
										LocalAccountingEntity			= LocalAccountingEntityJournalView.AccountingEntity
										LocalClosePeriod				= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
										LocalJournalControl				= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
										LocalBaseZoneAccountingUnit		= LocalAccountingEntityJournalView.BaseZoneAccountingUnit
										LocalBaseZoneDimension1			= LocalAccountingEntityJournalView.BaseZoneDimension1
									FunctionalAmountTotal			= FunctionalAmountDrTotal	+ FunctionalAmountCrTotal
									AlternateAmountTotal			= AlternateAmountDrTotal	+ AlternateAmountCrTotal
									AlternateAmount2Total			= AlternateAmount2DrTotal	+ AlternateAmount2CrTotal
									AlternateAmount3Total			= AlternateAmount3DrTotal	+ AlternateAmount3CrTotal								
									include UpdateZoneTotals
				AutoReverse	Set Rules
					Entrance Rules
						initialize SummTransactionAmountTotal			
						initialize SummFunctionalAmountTotal
						initialize SummAlternateAmountTotal
						initialize SummAlternateAmount2Total
						initialize SummAlternateAmount3Total
						initialize SummToFunctionalAmountTotal
						initialize SummToAlternateAmountTotal
						initialize SummToAlternateAmount2Total
						initialize SummToAlternateAmount3Total
						initialize SummProjectAmountTotal
						initialize SummReportAmount1Total
						initialize SummReportAmount2Total
						initialize SummReportAmount3Total
						initialize SummReportAmount4Total
						initialize SummReportAmount5Total
						initialize SummUnitsTotal
						initialize LocalSummarizedTransactionCount
						LocalActionTransactionDate	= TransactionDate
						LocalActionAutoReverse		= AutoReverse
						if (PrmInterfaceInDetail
						or  FinanceCodeBlock.GeneralLedgerChartAccount.InterfaceInDetail)
							LocalInterfaceInDetail = true
						else
							LocalInterfaceInDetail = false  
						
						if (!PrmJournalCreated
						and !LocalInterfaceInDetail) 
							LocalTransactionSequence 			+= 1
							LocalSummarizedInterfaceTransaction = true
							

							if (FinanceCodeBlock.ToAccountingEntity != AccountingEntity  
							and TransactionAmount					!= blank
							and ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount = blank
							and ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  = blank
							and ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount = blank
							and ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount = blank)
								invoke UpdateMissingToCurrencyAmounts
							invoke CreateReleasedSystemTransactionsNoRules Released GeneralLedgerTransaction
								assign result to LocalTransactionView
								invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
								invoked.GeneralLedgerTransaction				    = LocalTransactionSequence
								invoked.AccountingEntity							= LocalFrAccountingEntity
								invoked.GeneralLedgerClosePeriod					= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
								invoked.GeneralLedgerJournalControl					= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
								invoked.CurrencyCode								= CurrencyCode
								invoked.TransactionDate								= TransactionDate
								if (Description entered
								and Resource not entered)
									invoked.Description								= Description
								else
									invoked.Description								= LocalAccountingEntityJournalView.Description
								invoked.Reference									= Reference
								invoked.FinanceCodeBlock							= FinanceCodeBlock
								invoked.DimensionCode								= DimensionCode
								invoked.GeneralLedgerEvent							= GeneralLedgerEvent
								invoked.TransactionAmount							= TransactionAmount 
								invoked.UnitsAmount									= UnitsAmount
								invoked.AutoReverse			        				= AutoReverse
								invoked.PostingDate									= PostingDate
								invoked.ChartSection								= FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection
								invoked.JournalType									= LocalAccountingEntityJournalView.JournalType
								invoked.ReportCurrencyAmount						= ReportCurrencyAmount
								invoked.System										= System
								invoked.DoNotUpdateZoneTotal						= true
								invoked.TransientDefaultCurrencyAmount				= PrmDefaultCurrencyAmount
								invoked.MigStatus									= MigStatus
									
								
						if (LocalFrAccountingEntity		!= LocalToAccountingEntity
						and !LocalInterfaceInDetail) 

							LocalToTransactionSequence 			+= 1
							LocalSummarizedInterfaceTransaction = true
							invoke CreateReleasedSystemTransactionsNoRules Released GeneralLedgerTransaction
								assign result to LocalToTransactionView
								invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
								invoked.AccountingEntity							= LocalToAccountingEntity
								invoked.GeneralLedgerClosePeriod					= LocalToAccountingEntityJournalView.GeneralLedgerClosePeriod
								invoked.GeneralLedgerJournalControl					= LocalToAccountingEntityJournalView.GeneralLedgerJournalControl
								invoked.GeneralLedgerTransaction				    = LocalToTransactionSequence
								invoked.CurrencyCode								= CurrencyCode
								invoked.TransactionDate								= TransactionDate
								if (Description entered
								and Resource not entered)
									invoked.Description								= Description
								else
									invoked.Description								= LocalToAccountingEntityJournalView.Description
								invoked.Reference									= Reference
								invoked.FinanceCodeBlock							= FinanceCodeBlock
								invoked.DimensionCode								= DimensionCode
								invoked.GeneralLedgerEvent							= GeneralLedgerEvent
								invoked.TransactionAmount							= TransactionAmount 
								invoked.UnitsAmount									= UnitsAmount
								invoked.AutoReverse			        				= AutoReverse
								invoked.PostingDate									= PostingDate
								invoked.ChartSection								= FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection
								invoked.JournalType									= LocalToAccountingEntityJournalView.JournalType
								invoked.System										= System								
								invoked.DoNotUpdateZoneTotal						= true
								invoked.TransientDefaultCurrencyAmount				= PrmDefaultCurrencyAmount
								invoked.CreatedByFES								= CreatedByFES
								invoked.FESManuallyUpdated							= FESManuallyUpdated
								invoked.MigStatus									= MigStatus
					Exit Rules
						if (!LocalInterfaceInDetail)
							if (SummTransactionAmountTotal	> 0)
								TransactionAmountDrTotal		+= SummTransactionAmountTotal
							else
								TransactionAmountCrTotal		+= SummTransactionAmountTotal
							if (SummFunctionalAmountTotal	> 0)
								FunctionalAmountDrTotal			+= SummFunctionalAmountTotal
								if (LocalActionAutoReverse)
									AutoReverseAmountDrTotal	+= SummFunctionalAmountTotal
							else
								FunctionalAmountCrTotal			+= SummFunctionalAmountTotal
								if (LocalActionAutoReverse)
									AutoReverseAmountCrTotal	+= SummFunctionalAmountTotal
							if (SummAlternateAmountTotal	> 0)
								AlternateAmountDrTotal			+= SummAlternateAmountTotal
							else
								AlternateAmountCrTotal			+= SummAlternateAmountTotal
							if (SummAlternateAmount2Total	> 0)
								AlternateAmount2DrTotal			+= SummAlternateAmount2Total
							else
								AlternateAmount2CrTotal			+= SummAlternateAmount2Total
							if (SummAlternateAmount3Total	> 0)
								AlternateAmount3DrTotal			+= SummAlternateAmount3Total
							else
								AlternateAmount3CrTotal			+= SummAlternateAmount3Total						
							if (SummToFunctionalAmountTotal	> 0)
								ToFunctionalAmountDrTotal		+= SummToFunctionalAmountTotal
								if (LocalActionAutoReverse)
									ToAutoReverseAmountDrTotal	+= SummToFunctionalAmountTotal
							else
								ToFunctionalAmountCrTotal		+= SummToFunctionalAmountTotal
								if (LocalActionAutoReverse)
									ToAutoReverseAmountCrTotal	+= SummToFunctionalAmountTotal
							if (SummToAlternateAmountTotal	> 0)
								ToAlternateAmountDrTotal		+= SummToAlternateAmountTotal
							else
								ToAlternateAmountCrTotal		+= SummToAlternateAmountTotal
							if (SummToAlternateAmount2Total	> 0)
								ToAlternateAmount2DrTotal		+= SummToAlternateAmount2Total
							else
								ToAlternateAmount2CrTotal		+= SummToAlternateAmount2Total
							if (SummToAlternateAmount3Total	> 0)
								ToAlternateAmount3DrTotal		+= SummToAlternateAmount3Total
							else
								ToAlternateAmount3CrTotal		+= SummToAlternateAmount3Total						
							if (SummProjectAmountTotal	> 0)
								ProjectAmountDrTotal			+= SummProjectAmountTotal
							else
								ProjectAmountCrTotal			+= SummProjectAmountTotal
							if (SummReportAmount1Total	> 0)
								ReportAmount1DrTotal			+= SummReportAmount1Total
							else
								ReportAmount1CrTotal			+= SummReportAmount1Total
							if (SummReportAmount2Total	> 0)
								ReportAmount2DrTotal			+= SummReportAmount2Total
							else
								ReportAmount2CrTotal			+= SummReportAmount2Total
							if (SummReportAmount3Total	> 0)
								ReportAmount3DrTotal			+= SummReportAmount3Total
							else
								ReportAmount3CrTotal			+= SummReportAmount3Total
							if (SummReportAmount4Total	> 0)
								ReportAmount4DrTotal			+= SummReportAmount4Total
							else
								ReportAmount4CrTotal			+= SummReportAmount4Total
							if (SummReportAmount5Total	> 0)
								ReportAmount5DrTotal			+= SummReportAmount5Total
							else
								ReportAmount5CrTotal			+= SummReportAmount5Total
							UnitsAmountTotal					+= SummUnitsTotal
							if (SummUnitsTotal > 0)
								UnitsDrTotal 					+= SummUnitsTotal
								if (LocalActionAutoReverse)
									AutoReverseUnitsDrTotal		+= SummUnitsTotal
							else
								UnitsCrTotal 					+= SummUnitsTotal
								if (LocalActionAutoReverse)
									AutoReverseUnitsCrTotal		+= SummUnitsTotal
						if (!PrmJournalCreated
						and !LocalInterfaceInDetail)
			 				LocalSummarizedInterfaceTransaction = true
							invoke UpdateReleasedTransactionAmountsNoRules Released LocalTransactionView.GeneralLedgerTransaction
								invoked.TransactionAmount							= TransactionAmountDrTotal	+ TransactionAmountCrTotal
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= FunctionalAmountDrTotal	+ FunctionalAmountCrTotal
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= AlternateAmountDrTotal	+ AlternateAmountCrTotal
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= AlternateAmount2DrTotal	+ AlternateAmount2CrTotal
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= AlternateAmount3DrTotal	+ AlternateAmount3CrTotal
								invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	= ToFunctionalAmountDrTotal	+ ToFunctionalAmountCrTotal
								invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	= ToAlternateAmountDrTotal	+ ToAlternateAmountCrTotal
								invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	= ToAlternateAmount2DrTotal	+ ToAlternateAmount2CrTotal
								invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	= ToAlternateAmount3DrTotal	+ ToAlternateAmount3CrTotal
								invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= ProjectAmountDrTotal		+ ProjectAmountCrTotal
								invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= ReportAmount1DrTotal		+ ReportAmount1CrTotal
								invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= ReportAmount2DrTotal		+ ReportAmount2CrTotal
								invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= ReportAmount3DrTotal		+ ReportAmount3CrTotal
								invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= ReportAmount4DrTotal		+ ReportAmount4CrTotal
								invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= ReportAmount5DrTotal		+ ReportAmount5CrTotal
								invoked.UnitsAmount														= UnitsAmountTotal
								if (LocalSummarizedTransactionCount > 1)
									invoked.Description													= "Summarized transaction"
								invoked.MigStatus														= MigStatus
									
						if (LocalFrAccountingEntity		!= LocalToAccountingEntity
						and !LocalInterfaceInDetail)

							LocalSummarizedInterfaceTransaction = true
							invoke UpdateReleasedTransactionAmountsNoRules Released LocalToTransactionView.GeneralLedgerTransaction
								invoked.TransactionAmount												= TransactionAmountDrTotal	+ TransactionAmountCrTotal
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= ToFunctionalAmountDrTotal	+ ToFunctionalAmountCrTotal
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= ToAlternateAmountDrTotal	+ ToAlternateAmountCrTotal
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= ToAlternateAmount2DrTotal	+ ToAlternateAmount2CrTotal
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= ToAlternateAmount3DrTotal	+ ToAlternateAmount3CrTotal
								invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= ProjectAmountDrTotal		+ ProjectAmountCrTotal
								invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= ReportAmount1DrTotal		+ ReportAmount1CrTotal
								invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= ReportAmount2DrTotal		+ ReportAmount2CrTotal
								invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= ReportAmount3DrTotal		+ ReportAmount3CrTotal
								invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= ReportAmount4DrTotal		+ ReportAmount4CrTotal
								invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= ReportAmount5DrTotal		+ ReportAmount5CrTotal
								invoked.UnitsAmount														= UnitsAmountTotal
								invoked.MigStatus									= MigStatus
								if(!PrmDefaultCurrencyAmount) 
									initialize invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
									initialize invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
									initialize invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
									initialize invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate
									initialize invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate
									initialize invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate
									initialize invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate
									initialize invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate
									initialize invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate
									initialize invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate
								if(PrmDefaultCurrencyAmount) 
									if(ReportCurrencyAmount.CurrencyTable = FinanceEnterpriseGroup.CurrencyTable) 
										initialize invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyRate
										initialize invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyRate
										initialize invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyRate
										initialize invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyRate
										initialize invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyRate
										initialize invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyRate
										initialize invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyRate
										initialize invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyRate
										initialize invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyRate
										initialize invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyRate								
								if (LocalSummarizedTransactionCount > 1)
									invoked.Description													= "Summarized transaction"

							LocalAccountingEntity		= LocalFrAccountingEntity    
							if (PrmJournalCreated)
								LocalClosePeriod		= PrmClosePeriod
								LocalJournalControl		= PrmJournalControl
							else
								LocalClosePeriod		= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
								LocalJournalControl		= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
							LocalPostAccountingEntity	= LocalToAccountingEntity
							LocalCurrencyCode			= LocalActionCurrencyCode
							LocalAutoReverse			= LocalActionAutoReverse
							invoke Update GLInterEntityTotalUpdateRel
								invoked.FinanceEnterpriseGroup				= PrmEnterpriseGroup
								invoked.AccountingEntity					= LocalAccountingEntity
								invoked.GeneralLedgerClosePeriod			= LocalClosePeriod
								invoked.GeneralLedgerJournalControl			= LocalJournalControl
								invoked.GLInterEntityTotal.ToAccountingEntity	= LocalPostAccountingEntity
								invoked.GLInterEntityTotal.CurrencyCode		= LocalCurrencyCode
								invoked.GLInterEntityTotal.AutoReverse		= LocalActionAutoReverse
								invoked.PrmTransactionAmount				= (TransactionAmountDrTotal		+ TransactionAmountCrTotal)
								invoked.PrmFunctionalAmount					= (FunctionalAmountDrTotal		+ FunctionalAmountCrTotal)
								invoked.PrmAlternateAmount					= (AlternateAmountDrTotal		+ AlternateAmountCrTotal)
								invoked.PrmAlternateAmount2					= (AlternateAmount2DrTotal		+ AlternateAmount2CrTotal)
								invoked.PrmAlternateAmount3					= (AlternateAmount3DrTotal		+ AlternateAmount3CrTotal)
								invoked.PrmToFunctionalAmount				= (ToFunctionalAmountDrTotal	+ ToFunctionalAmountCrTotal)
								invoked.PrmToAlternateAmount				= (ToAlternateAmountDrTotal		+ ToAlternateAmountCrTotal)
								invoked.PrmToAlternateAmount2				= (ToAlternateAmount2DrTotal	+ ToAlternateAmount2CrTotal)
								invoked.PrmToAlternateAmount3				= (ToAlternateAmount3DrTotal	+ ToAlternateAmount3CrTotal)
								invoked.PrmProjectAmount					= (ProjectAmountDrTotal			+ ProjectAmountCrTotal)
								invoked.PrmReportAmount1					= (ReportAmount1DrTotal			+ ReportAmount1CrTotal)
								invoked.PrmReportAmount2					= (ReportAmount2DrTotal			+ ReportAmount2CrTotal)
								invoked.PrmReportAmount3					= (ReportAmount3DrTotal			+ ReportAmount3CrTotal)
								invoked.PrmReportAmount4					= (ReportAmount4DrTotal			+ ReportAmount4CrTotal)
								invoked.PrmReportAmount5					= (ReportAmount5DrTotal			+ ReportAmount5CrTotal)
								invoked.PrmUnitsAmount						= UnitsAmountTotal
				Instance Rules
					if(LocalRecurringJournalControl not entered)
						if (OriginatingTransactionUniqueID entered
						and SystemCodeFromJournalizeGroup	= "RJ")
							if (RecurringJournalTransactionRel exists)
								LocalRecurringJournalControl = RecurringJournalTransactionRel.RecurringJournalControl
							else
								LocalRecurringJournalControl = RecurringJournalBridgeRel.RecurringJournalControl
					
					include CheckMissingInterentityCurrency
										
					LocalSummarizedTransactionCount += 1
					
					if (!CurrencyCode entered)	
						CurrencyCode	= 	LocalActionCurrencyCode
						
					if (CommitmentsInUse)
						if (OriginatingTransactionUniqueID entered
						or  OriginatingTransaction.BusinessObjectKey != GLTransactionDetail)
							if  (GLCommitRel exists)
								invoke UpdateReleasedCommitment GLCommitRel
									invoked.TransientFromJournalize = true	
									invoked.TransactionAmount												-= TransactionAmount
									invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		-= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		-= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		-= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		-= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	-= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	-= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	-= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	-= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		-= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		-= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		-= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		-= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		-= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
									invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		-= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount

					if (LocalInterfaceInDetail
					and !PrmJournalCreated)
						LocalTransactionSequence 			+= 1
						LocalSummarizedInterfaceTransaction = false
						invoke CreateReleasedSystemTransactionsNoRules Released GeneralLedgerTransaction
							assign result to LocalTransactionView
							fill in user fields from this instance
							invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
							invoked.GeneralLedgerTransaction				    = LocalTransactionSequence
							invoked.AccountingEntity							= LocalFrAccountingEntity
							invoked.GeneralLedgerClosePeriod					= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
							invoked.GeneralLedgerJournalControl					= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
							invoked.CurrencyCode								= CurrencyCode
							invoked.TransactionDate								= TransactionDate
							if (Description entered
							and Resource not entered)
								invoked.Description								= Description
							else
								invoked.Description								= LocalAccountingEntityJournalView.Description
							invoked.Reference									= Reference
							invoked.FinanceCodeBlock							= FinanceCodeBlock
							invoked.DimensionCode								= DimensionCode
							invoked.GeneralLedgerEvent							= GeneralLedgerEvent
							invoked.TransactionAmount							= TransactionAmount 
							invoked.UnitsAmount									= UnitsAmount
							invoked.AutoReverse			        				= AutoReverse
							invoked.PostingDate									= PostingDate
							invoked.ChartSection								= FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection
							invoked.JournalType									= LocalAccountingEntityJournalView.JournalType
							invoked.ReportCurrencyAmount						= ReportCurrencyAmount
							invoked.System										= System
							invoked.DoNotUpdateZoneTotal						= true
							invoked.CreateTransactionInDetail					= true
							invoked.CreatedByFES								= CreatedByFES
							invoked.FESManuallyUpdated							= FESManuallyUpdated
							invoked.MigStatus								 	= MigStatus

					if (LocalInterfaceInDetail)
						if (LocalFrAccountingEntity					!= FinanceCodeBlock.ToAccountingEntity)

							LocalToTransactionSequence 			+= 1
							LocalSummarizedInterfaceTransaction = true
							invoke CreateReleasedSystemTransactionsNoRules Released GeneralLedgerTransaction
								assign result to LocalToTransactionView
								fill in user fields from this instance
								invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
								invoked.GeneralLedgerTransaction				    = LocalToTransactionSequence
								invoked.AccountingEntity							= LocalToAccountingEntity
								invoked.GeneralLedgerClosePeriod					= LocalToAccountingEntityJournalView.GeneralLedgerClosePeriod
								invoked.GeneralLedgerJournalControl					= LocalToAccountingEntityJournalView.GeneralLedgerJournalControl
								invoked.CurrencyCode								= CurrencyCode
								invoked.TransactionDate								= TransactionDate
								if (Description entered
								and Resource not entered)
									invoked.Description								= Description
								else
									invoked.Description								= LocalToAccountingEntityJournalView.Description
								invoked.Reference									= Reference
								invoked.FinanceCodeBlock							= FinanceCodeBlock
								invoked.DimensionCode								= DimensionCode
								invoked.GeneralLedgerEvent							= GeneralLedgerEvent
								invoked.TransactionAmount							= TransactionAmount 
								invoked.UnitsAmount									= UnitsAmount
								invoked.AutoReverse			        				= AutoReverse
								invoked.PostingDate									= PostingDate
								invoked.ChartSection								= FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection
								invoked.JournalType									= LocalToAccountingEntityJournalView.JournalType
								invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
								invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
								invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
								invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
								invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
								invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
								invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
								invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
								invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
								invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
								invoked.UnitsAmount														= UnitsAmount
								invoked.System										= System
								invoked.DoNotUpdateZoneTotal						= true
								invoked.CreateTransactionInDetail					= true
								invoked.CreatedByFES								= CreatedByFES
								invoked.FESManuallyUpdated							= FESManuallyUpdated
								invoked.MigStatus								 	= MigStatus

							LocalAccountingEntity		= LocalFrAccountingEntity    
							if (PrmJournalCreated)
								LocalClosePeriod		= PrmClosePeriod
								LocalJournalControl		= PrmJournalControl
							else
								LocalClosePeriod		= LocalAccountingEntityJournalView.GeneralLedgerClosePeriod
								LocalJournalControl		= LocalAccountingEntityJournalView.GeneralLedgerJournalControl
							LocalPostAccountingEntity	= LocalToAccountingEntity
							LocalCurrencyCode			= LocalActionCurrencyCode
							LocalAutoReverse			= LocalActionAutoReverse
							invoke Update GLInterEntityTotalUpdateRel
								invoked.FinanceEnterpriseGroup				= PrmEnterpriseGroup
								invoked.AccountingEntity					= LocalAccountingEntity
								invoked.GeneralLedgerClosePeriod			= LocalClosePeriod
								invoked.GeneralLedgerJournalControl			= LocalJournalControl
								invoked.GLInterEntityTotal.ToAccountingEntity	= LocalPostAccountingEntity
								invoked.GLInterEntityTotal.CurrencyCode		= LocalCurrencyCode
								invoked.GLInterEntityTotal.AutoReverse		= LocalActionAutoReverse
								invoked.PrmTransactionAmount				= TransactionAmount
								invoked.PrmFunctionalAmount					= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
								invoked.PrmAlternateAmount					= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
								invoked.PrmAlternateAmount2					= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
								invoked.PrmAlternateAmount3					= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
								invoked.PrmToFunctionalAmount				= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
								invoked.PrmToAlternateAmount				= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
								invoked.PrmToAlternateAmount2				= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
								invoked.PrmToAlternateAmount3				= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
								invoked.PrmProjectAmount					= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
								invoked.PrmReportAmount1					= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
								invoked.PrmReportAmount2					= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
								invoked.PrmReportAmount3					= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
								invoked.PrmReportAmount4					= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
								invoked.PrmReportAmount5					= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
								invoked.PrmUnitsAmount						= UnitsAmount
					LocalBypassStructureRelationEdit = PrmBypassStructureRelationEdit	
								
					if (LocalFrAccountingEntity		!= LocalToAccountingEntity)
						invoke UpdateToHistory Released this instance 
							invoked.PrmRelatedJournalTransaction	= reference to LocalToTransactionView.GeneralLedgerTransaction
					else
						if (PrmJournalCreated)
							invoke UpdateToHistory Released this instance 
								invoked.PrmRelatedJournalTransaction	= OriginatingTransaction
						else
							invoke UpdateToHistory Released this instance 
								invoked.PrmRelatedJournalTransaction	= reference to LocalTransactionView.GeneralLedgerTransaction
								
					if (LocalInterfaceInDetail)
						if (TransactionAmount	> 0)
							TransactionAmountDrTotal		+= TransactionAmount
						else
							TransactionAmountCrTotal		+= TransactionAmount
						if (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	> 0)
							FunctionalAmountDrTotal			+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
							if (AutoReverse)
								AutoReverseAmountDrTotal	+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						else
							FunctionalAmountCrTotal			+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
							if (AutoReverse)
								AutoReverseAmountCrTotal	+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						if (ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	> 0)
							AlternateAmountDrTotal			+= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						else
							AlternateAmountCrTotal			+= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						if (ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	> 0)
							AlternateAmount2DrTotal			+= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						else
							AlternateAmount2CrTotal			+= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						if (ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	> 0)
							AlternateAmount3DrTotal			+= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						else
							AlternateAmount3CrTotal			+= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount						
						if (ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	> 0)
							ToFunctionalAmountDrTotal		+= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
							if (AutoReverse)
								ToAutoReverseAmountDrTotal	+= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						else
							ToFunctionalAmountCrTotal		+= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
							if (AutoReverse)
								ToAutoReverseAmountCrTotal	+= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						if (ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	> 0)
							ToAlternateAmountDrTotal		+= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						else
							ToAlternateAmountCrTotal		+= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						if (ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	> 0)
							ToAlternateAmount2DrTotal		+= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						else
							ToAlternateAmount2CrTotal		+= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						if (ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	> 0)
							ToAlternateAmount3DrTotal		+= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
						else
							ToAlternateAmount3CrTotal		+= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount						
						if (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	> 0)
							ProjectAmountDrTotal			+= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						else
							ProjectAmountCrTotal			+= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						if (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	> 0)
							ReportAmount1DrTotal			+= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						else
							ReportAmount1CrTotal			+= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						if (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	> 0)
							ReportAmount2DrTotal			+= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						else
							ReportAmount2CrTotal			+= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						if (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	> 0)
							ReportAmount3DrTotal			+= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						else
							ReportAmount3CrTotal			+= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						if (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	> 0)
							ReportAmount4DrTotal			+= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						else
							ReportAmount4CrTotal			+= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						if (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	> 0)
							ReportAmount5DrTotal			+= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						else
							ReportAmount5CrTotal			+= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						UnitsAmountTotal					+= UnitsAmount
						if (UnitsAmount > 0)
							UnitsDrTotal 					+= UnitsAmount
							if (AutoReverse)
								AutoReverseUnitsDrTotal		+= UnitsAmount
						else
							UnitsCrTotal 					+= UnitsAmount
							if (AutoReverse)
								AutoReverseUnitsCrTotal		+= UnitsAmount
					else
						SummTransactionAmountTotal			+= TransactionAmount
						SummFunctionalAmountTotal			+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						SummAlternateAmountTotal			+= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						SummAlternateAmount2Total			+= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						SummAlternateAmount3Total			+= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						SummToFunctionalAmountTotal			+= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						SummToAlternateAmountTotal			+= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						SummToAlternateAmount2Total			+= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						SummToAlternateAmount3Total			+= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
						SummProjectAmountTotal				+= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						SummReportAmount1Total				+= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						SummReportAmount2Total				+= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						SummReportAmount3Total				+= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						SummReportAmount4Total				+= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						SummReportAmount5Total				+= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						SummUnitsTotal						+= UnitsAmount


					if (PrmEligibleForElimination
					and LocalFrAccountingEntity = LocalToAccountingEntity)
						LocalTransactionSequence 			+= 1
						LocalSummarizedInterfaceTransaction = true
						invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
							assign result to LocalTransactionView		
							fill in user fields from this instance
							invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
							invoked.GeneralLedgerTransaction				    = LocalTransactionSequence
							invoked.AccountingEntity							= LocalFrAccountingEntity
							invoked.GeneralLedgerClosePeriod					= PrmClosePeriod
							invoked.GeneralLedgerJournalControl					= PrmJournalControl
							invoked.CurrencyCode								= CurrencyCode
							invoked.TransactionDate								= TransactionDate
							if (Description entered
							and Resource not entered)
								invoked.Description								= Description
							else
								invoked.Description								= LocalToAccountingEntityJournalView.Description
							invoked.Reference									= Reference
							invoked.FinanceCodeBlock							= FinanceCodeBlock
							invoked.FinanceCodeBlock.Ledger						= PrmEliminationLedger
							invoked.DimensionCode								= DimensionCode
							invoked.GeneralLedgerEvent							= GeneralLedgerEvent
							invoked.TransactionAmount							= TransactionAmount * -1
							invoked.AutoReverse			        				= AutoReverse
							invoked.PostingDate									= PostingDate
							invoked.ChartSection								= FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection
							invoked.JournalType									= LocalToAccountingEntityJournalView.JournalType
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
							invoked.UnitsAmount														= UnitsAmount * -1
							invoked.System										= System
							invoked.DoNotUpdateZoneTotal						= true
							invoked.CreateTransactionInDetail					= true
							invoked.CreatedByFES								= CreatedByFES
							invoked.FESManuallyUpdated							= FESManuallyUpdated
							invoked.PrimaryLedger								= PrmEliminationLedger
							invoked.MigStatus								 	= MigStatus


					if (PrmEligibleForElimination
					and LocalFrAccountingEntity != LocalToAccountingEntity)
						LocalToTransactionSequence 			+= 1
						LocalSummarizedInterfaceTransaction = true
						invoke CreateReleasedGLSystemTransactionsNoRules Released GeneralLedgerTransaction
							assign result to LocalToTransactionView
							fill in user fields from this instance
							invoked.FinanceEnterpriseGroup						= PrmEnterpriseGroup
							invoked.GeneralLedgerTransaction				    = LocalToTransactionSequence
							invoked.AccountingEntity							= LocalToAccountingEntity
							invoked.GeneralLedgerClosePeriod					= LocalToAccountingEntityJournalView.GeneralLedgerClosePeriod
							invoked.GeneralLedgerJournalControl					= LocalToAccountingEntityJournalView.GeneralLedgerJournalControl
							invoked.CurrencyCode								= CurrencyCode
							invoked.TransactionDate								= TransactionDate
							if (Description entered
							and Resource not entered)
								invoked.Description								= Description
							else
								invoked.Description								= LocalToAccountingEntityJournalView.Description
							invoked.Reference									= Reference
							invoked.FinanceCodeBlock							= FinanceCodeBlock
							invoked.FinanceCodeBlock.Ledger						= PrmEliminationLedger
							invoked.DimensionCode								= DimensionCode
							invoked.GeneralLedgerEvent							= GeneralLedgerEvent
							invoked.TransactionAmount							= TransactionAmount * -1
							invoked.AutoReverse			        				= AutoReverse
							invoked.PostingDate									= PostingDate
							invoked.ChartSection								= FinanceCodeBlock.GeneralLedgerChartAccount.ChartSection
							invoked.JournalType									= LocalToAccountingEntityJournalView.JournalType
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount		= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount		= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount		= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount		= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount		= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
							invoked.UnitsAmount														= UnitsAmount * -1
							invoked.System										= System
							invoked.DoNotUpdateZoneTotal						= true
							invoked.CreateTransactionInDetail					= true
							invoked.CreatedByFES								= CreatedByFES
							invoked.FESManuallyUpdated							= FESManuallyUpdated
							invoked.PrimaryLedger								= PrmEliminationLedger
							invoked.MigStatus								 	= MigStatus

					if (CommitNow)
						commit transaction
						CommitNow = false

		UpdateJournalizeGroup is an Instance Action
			restricted
			Parameters
				PrmJournalizeGroup	is a JournalizeGroup
					default label is "JournalizeGroup"
			Action Rules
				JournalizeGroup		= PrmJournalizeGroup
				
#ifdef module ap
		UpdateRNIEncumbrance is an Instance Action
			restricted
			Action Rules
				if (FromRNIUpdate
				and OriginatingTransaction(PurchaseOrderLineDistributionDetail).RecordType.DistributionAccount)
					LocalPOObjectReference.BusinessClassName = "PurchaseOrderLineDistribution"
					LocalPOObjectReference.BusinessObjectKey = DerivedPOUniqueID
					if (GLCommitPORel exists)
						invoke UpdateRNIEncumbrance GLCommitPORel
							invoked.PrmAutoReverse				= AutoReverse
							invoked.PrmTransactionAmount		= (TransactionAmount    * -1)
							invoked.PrmCurrAmountGroup.FunctionalAmount		= (ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.AlternateAmount		= (ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.AlternateAmount2		= (ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.AlternateAmount3		= (ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.ToFunctionalAmount	= (ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.ToAlternateAmount	= (ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.ToAlternateAmount2	= (ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.ToAlternateAmount3	= (ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.ProjectAmount		= (ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.ReportAmount1		= (ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.ReportAmount2		= (ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.ReportAmount3		= (ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.ReportAmount4		= (ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1)
							invoked.PrmCurrAmountGroup.ReportAmount5		= (ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1)
#endif

		UpdateMissingToCurrencyAmounts is an Instance Action
			restricted
			Action Rules
				if (FinanceCodeBlock.ToAccountingEntity != AccountingEntity
				and TransactionAmount					!= blank
				and ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount = blank
				and ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  = blank
				and ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount = blank
				and ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount = blank)			
					LocalCurrencyCalculationGroup.CurrencyAmount							= TransactionAmount
					LocalCurrencyCalculationGroup.ExchangeDate								= TransactionDate
					LocalCurrencyCalculationGroup.FromCurrency								= CurrencyCode
					LocalCurrencyCalculationGroup.FinanceEnterpriseGroup					= FinanceEnterpriseGroup
		
					LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.FunctionalCurrency
					LocalCurrencyCalculationGroup.ToFunctionalAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
					LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency
					LocalCurrencyCalculationGroup.ToAlternateAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
					LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency2
					LocalCurrencyCalculationGroup.ToAlternateAmount2.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
					LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency				= FinanceCodeBlock.ToAccountingEntity.AlternateCurrency3
					LocalCurrencyCalculationGroup.ToAlternateAmount3.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
	
					ReportCurrencyAmount.ToFunctionalAmount.ToCurrency						= LocalCurrencyCalculationGroup.ToFunctionalAmount.ToCurrency	
					ReportCurrencyAmount.ToAlternateAmount.ToCurrency						= LocalCurrencyCalculationGroup.ToAlternateAmount.ToCurrency	
					ReportCurrencyAmount.ToAlternateAmount2.ToCurrency						= LocalCurrencyCalculationGroup.ToAlternateAmount2.ToCurrency
					ReportCurrencyAmount.ToAlternateAmount3.ToCurrency						= LocalCurrencyCalculationGroup.ToAlternateAmount3.ToCurrency	
	
					if (ReportCurrencyAmount.ToFunctionalAmount.ToCurrency != blank)
						ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyRate     	= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyRate 
						ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToFunctionalAmount.OutputCurrencyAmount
					if (ReportCurrencyAmount.ToAlternateAmount.ToCurrency != blank)
						ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyRate      	= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyRate 														
						ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount.OutputCurrencyAmount	
					if (ReportCurrencyAmount.ToAlternateAmount2.ToCurrency != blank)	
						ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyRate     	= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyRate 
						ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount2.OutputCurrencyAmount	
					if (ReportCurrencyAmount.ToAlternateAmount3.ToCurrency != blank)
						ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyRate     	= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyRate 
						ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount		= LocalCurrencyCalculationGroup.ToAlternateAmount3.OutputCurrencyAmount

#ifdef module ap
		CreateProcurementExpense is a Set Action		
			restricted
			Parameters
				PrmFinanceEnterpriseGroup			is a FinanceEnterpriseGroup
				PrmRelatedJournalTransaction		is BusinessObjectReference
			Parameter Rules
				PrmRelatedJournalTransaction
					required
			Instance Selection
				where (FinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
				and	   RelatedJournalTransaction	= PrmRelatedJournalTransaction
				and    !GLProcurementExpenseRel exists)
			Sort Order is ByRelatedJournalTransaction
			Action Rules
				Instance Rules
					include FindGLYearPeriod
					include CreateGLProcurementExpense
					initialize TotalGroup
					TotalGroup.AccountingEntity								= FinanceCodeBlock.ToAccountingEntity
					TotalGroup.GLExpenseTotal.Ledger					= FinanceCodeBlock.Ledger
					TotalGroup.GLExpenseTotal.System					= System
					TotalGroup.GLExpenseTotal.Currency					= CurrencyCode
					TotalGroup.GLExpenseTotal.EntityYearPeriod			= DerivedGLTranEntityYearPeriod	
					TotalGroup.GLExpenseTotal.AccountingUnit			= FinanceCodeBlock.AccountingUnit
					TotalGroup.GLExpenseTotal.GeneralLedgerChartAccount	= FinanceCodeBlock.GeneralLedgerChartAccount
					TotalGroup.GLExpenseTotal.Project					= FinanceCodeBlock.Project
					TotalGroup.GLExpenseTotal.DimensionCode				= DimensionCode
					TotalGroup.GLExpenseTotal.PrimaryLedger				= FinanceCodeBlock.Ledger
					invoke PostTransactions TotalGroup.GLExpenseTotal
						invoked.TransactionAmount	= TransactionAmount
						invoked.FunctionalAmount	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						invoked.AlternateAmount		= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						invoked.AlternateAmount2	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						invoked.AlternateAmount3	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
						invoked.ProjectAmount		= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
						invoked.ReportAmount1		= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
						invoked.ReportAmount2		= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
						invoked.ReportAmount3		= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
						invoked.ReportAmount4		= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
						invoked.ReportAmount5		= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
						invoked.UnitsAmount			= UnitsAmount
						invoked.FinanceDimension1	= FinanceCodeBlock.FinanceDimension1
						invoked.FinanceDimension2	= FinanceCodeBlock.FinanceDimension2
						invoked.FinanceDimension3	= FinanceCodeBlock.FinanceDimension3
						invoked.FinanceDimension4	= FinanceCodeBlock.FinanceDimension4
						invoked.FinanceDimension5	= FinanceCodeBlock.FinanceDimension5
						invoked.FinanceDimension6	= FinanceCodeBlock.FinanceDimension6
						invoked.FinanceDimension7	= FinanceCodeBlock.FinanceDimension7
						invoked.FinanceDimension8	= FinanceCodeBlock.FinanceDimension8
						invoked.FinanceDimension9	= FinanceCodeBlock.FinanceDimension9
						invoked.FinanceDimension10  = FinanceCodeBlock.FinanceDimension10						
						invoked.PeriodEndingDate	= LocalEndDate.Date
#endif

		PurgeHistoryDetail is a Set Action
			restricted
			disable checkpoint
			completion message is "PurgeHistoryDetailSubmitted"
			Instance Selection
				where false
			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
	
			Sort Order is PurgeHistoryDetailSortSet

			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceenterpriseGroup"
				PrmAccountingEntity				is an AccountingEntity
					default label is "AccountingEntity"
				PrmPostingDateRange				is a DateRange
					default label is "PostingDate"
				PrmBusinessClassName 			is like BusinessClass
				SkipAttachRule
				PrmIncludeProjectRecordsInPurge		is Boolean
					default label is "IncludeProjectRecordsInPurge"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmPostingDateRange
					required
				PrmBusinessClassName
					required
			
			Local Fields
				RecordsDeleted			is Numeric 12
				
			Action Rules
				Empty Set Rules
					LocalFinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
					LocalStatus							= Status.History
					LocalAccountingEntity				= PrmAccountingEntity
					LocalIncludeProjectRecordsInPurge	= PrmIncludeProjectRecordsInPurge
					LocalPostingDate					= PrmPostingDateRange.Begin
					while (LocalPostingDate <= PrmPostingDateRange.End)
						if (PurgeHistoryDetailRel exists)
							invoke PurgeHistoryDetailThread GLTransactionDetail in background
								invoked.PrmFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
								invoked.PrmBusinessClassName   	 		= PrmBusinessClassName
								invoked.PrmAccountingEntity		 		= PrmAccountingEntity
								invoked.PrmPostingDate			 		= LocalPostingDate
								invoked.PrmIncludeProjectRecordsInPurge	= PrmIncludeProjectRecordsInPurge
						LocalPostingDate += 1

		PurgeHistoryDetailThread is a Set Action
			restricted
			allow unlimited concurrency
			completion message is "<RecordsDeleted>RecordsDeleted"
			Instance Selection  
				include deleted records
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    Status.History
				and	   AccountingEntity	                        = PrmAccountingEntity
				and    OriginatingTransaction.BusinessClassName = "GLTransactionDetail"				
				and	   PostingDate 								= PrmPostingDate
				and    OriginatingTransaction.BusinessObjectKey	= GLTransactionDetail
				and    !OriginatingTransactionUniqueID entered
				and   (PrmIncludeProjectRecordsInPurge = true
				or    (PrmIncludeProjectRecordsInPurge = false
				and    FinanceCodeBlock.Project not entered)))
	
			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
											
			Sort Order is PurgeHistoryDetailSortSet
			
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceenterpriseGroup"
				PrmAccountingEntity				is an AccountingEntity
					default label is "AccountingEntity"
				PrmPostingDate					is Date
					default label is "PostingDate"
				PrmBusinessClassName 			is like BusinessClass
				SkipAttachRule
				PrmIncludeProjectRecordsInPurge		is Boolean
					default label is "IncludeProjectRecordsInPurge"
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmPostingDate
					required
				PrmBusinessClassName
					required
			
			Local Fields
				RecordsDeleted			is Numeric 12
				
			Action Rules
				Instance Rules
					invoke RealPurge History this instance
					RecordsDeleted += 1		





		PurgeNotToBePostedDetail is a Set Action
			restricted
			disable checkpoint
			completion message is "PurgeNotToBePostedDetailSubmitted"
			Instance Selection  
				where false
			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceenterpriseGroup"
				PrmAccountingEntity				is an AccountingEntity
					default label is "AccountingEntity"
				PrmPostingDateRange				is a DateRange
					default label is "PostingDate"
				SkipAttachRule
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmPostingDateRange
					required
			Action Rules
				Empty Set Rules
					LocalFinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
					LocalStatus							= Status.NotToBePosted
					LocalAccountingEntity				= PrmAccountingEntity
					LocalPostingDate					= PrmPostingDateRange.Begin
					while (LocalPostingDate <= PrmPostingDateRange.End)
						if (PurgeNotToBePostedDetailRel exists)
							invoke PurgeNotToBePostedDetailThread GLTransactionDetail in background
								invoked.PrmFinanceEnterpriseGroup		= PrmFinanceEnterpriseGroup
								invoked.PrmAccountingEntity		 		= PrmAccountingEntity
								invoked.PrmPostingDate			 		= LocalPostingDate
						LocalPostingDate += 1

		PurgeNotToBePostedDetailThread is a Set Action
			restricted
			allow unlimited concurrency
			completion message is "<RecordsDeleted>RecordsDeleted"
			Instance Selection  
				include deleted records
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    Status.NotToBePosted
				and	   AccountingEntity	= PrmAccountingEntity
				and	   PostingDate		= PrmPostingDate)				

			Queue Mapping Fields
				PrmAccountingEntity.PostingCategory
											
			Sort Order is PurgeHistoryDetailSortSet

			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
					default label is "FinanceenterpriseGroup"
				PrmAccountingEntity				is an AccountingEntity
					default label is "AccountingEntity"
				PrmPostingDate					is Date
					default label is "PostingDate"
				SkipAttachRule
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmPostingDate
					required
			
			Local Fields
				RecordsDeleted			is Numeric 12
				
			Action Rules
				Instance Rules
					invoke RealPurge NotToBePosted this instance
					RecordsDeleted += 1		


		PurgeValidSubLedgerTrx is an Instance Action
		 	restricted
			Action Rules
				if (FinanceCodeBlock.Project not entered 
				or FinanceCodeBlock.Project.ProjectStatus.AllowPurge)
					invoke RealPurge
									

		PurgeGLTransactionDetailHistoryRecords is a Set Action
			restricted
			disable checkpoint
	
			completion message is "<RecordsPurged>RecordsPurged"
					
			Parameters
				PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
				PrmAccountingEntity				is an AccountingEntity
				PrmGeneralLedgerCloseYear		is a GeneralLedgerCloseYear
				PrmRecordType					is a RecordType
				PrmSystemCodeSelectionOption 	is Numeric 1
				PrmGeneralLedgerSystemCode 		is a GeneralLedgerSystemCode
				PrmPurgeGLRecordsResult 		is a PurgeGLRecordsResult
				PrmPurgeGLRecordsResultDetail	is a PurgeGLRecordsResultDetail
				PrmReportOnly					is Boolean
				PrmPostingDateRange				is a DateRange
				
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmGeneralLedgerCloseYear
					required
				PrmAccountingEntity
					required
				PrmPurgeGLRecordsResultDetail
					required
				PrmSystemCodeSelectionOption
					required
				PrmPostingDateRange
					required
			
			Local Fields
				RecordsPurged			is Numeric 12
				
			Instance Selection
				include deleted records
				where (	FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and 	AccountingEntity	   = PrmAccountingEntity
				and 	AccountingEntity.CloseConfiguration = PrmGeneralLedgerCloseYear.GeneralLedgerCloseConfiguration
				and    	Status.History
				and	   	PostingDate 			within PrmPostingDateRange	
				and		((FinanceCodeBlock.Project entered
				and		FinanceCodeBlock.Project.ProjectStatus.AllowPurge)
				or		FinanceCodeBlock.Project not entered )	
				and 	((PrmSystemCodeSelectionOption = 1 
				and 	System = PrmGeneralLedgerSystemCode)
				or		(PrmSystemCodeSelectionOption = 2  
				and		(PrmRecordType.System
				and 	System = "GL")
				or	 	(PrmRecordType.User 
				and 	System.RecordType = PrmRecordType)	) ) )
				
				
			Action Rules
				
				Empty Set Rules
			
				Set Rules
					
					Entrance Rules
						initialize RecordsPurged
						
					Exit Rules
						invoke Update PrmPurgeGLRecordsResultDetail.PurgeGLRecordsResultDetail
							invoked.GLTransactionDetailRecords = RecordsPurged
			
				Instance Rules
					if (!PrmReportOnly)
						invoke RealPurge History this instance
					RecordsPurged += 1	


		LaborDistributionProcessed is an Instance Action
			restricted
			Action Rules
				LaborDistribution	= LaborDistribution.Processed

		ReverseLaborDistribution is an Instance Action
			restricted
			Action Rules
				LaborDistribution	= LaborDistribution.Unprocessed

		RemoveBillingHold is an Instance Action
			valid when (Billed.Hold)
			Action Rules
				Billed = 0
				
		RemoveRevenueHold is an Instance Action
			valid when (RevenueRecognized.Hold)
			Action Rules
				RevenueRecognized = 0

		PutBillingOnHold is an Instance Action
			valid when (EligibleToHoldBilling)
			Action Rules
				Billed = 5

		PutRevenueOnHold is an Instance Action
			valid when (EligibleToHoldRevenue)
			Action Rules
				RevenueRecognized = 3

		RemoveCapitalizationHold is an Instance Action
			valid when (Capitalize.Hold)
			Action Rules
				Capitalize = 0

		PutOnHold is an Instance Action
			restricted
			Parameters
				BillingHold		is Boolean
				RevenueHold		is Boolean
				CapitalizeHold	is Boolean
			Action Rules
				if (BillingHold
				and Billed.Unprocessed)
					Billed = 5
				if (RevenueHold
				and RevenueRecognized.Unprocessed)
					RevenueRecognized = 3
				if (CapitalizeHold
				and Capitalize.Unprocessed)
					Capitalize = 2

		RemoveFromHold is an Instance Action
			restricted
			Parameters
				RemoveBillingHold		is Boolean
				RemoveRevenueHold		is Boolean
				RemoveCapitalizeHold	is Boolean
			Action Rules
				if (RemoveBillingHold
				and Billed.Hold)
					Billed = 0
				if (RemoveRevenueHold
				and RevenueRecognized.Hold)
					RevenueRecognized = 0
				if (RemoveCapitalizeHold
				and Capitalize.Hold)
					Capitalize = 0

		UpdateBilledStatus is an Instance Action
			restricted
			Parameters
				PrmBilled				is Numeric 1
		            States
		                Unprocessed				value is 0
		                Invoiced				value is 1
		                Processed				value is 3
		                Distributed				value is 4
		                Hold					value is 5
			Action Rules
				Billed = PrmBilled

		UpdateRecognizedStatus is an Instance Action
			restricted
			Parameters
				PrmRecognized		is Numeric 1
		            States
		                Unprocessed	value is 0
		                Processed	value is 1
		                Draft		value is 2
		                Hold		value is 3
			Action Rules
				RevenueRecognized = PrmRecognized

		UpdateSplitStatus is an Instance Action
			restricted
			Action Rules
				Billed				= 3
				RevenueRecognized	= 1

		UpdateIndirectBurden is an Instance Action
			restricted
			Parameters
				PrmIndirectBurden	is Numeric 1
		            States
						Unprocessed	value is 0
						Draft		value is 1
						Processed	value is 2
			Action Rules
				IndirectBurden = PrmIndirectBurden
				
		RemoveAPPaid is an Instance Action
			restricted
			Action Rules
				initialize APPaid		

		TransferIndividualTransaction is an Instance Action
			valid when (EligibleToTransfer)	
			disable multiple instance selection		
			Parameters
				PrmFinanceCodeBlock		is a TransactionCodeBlock
				PrmPostingDate			is a PostingDate
		        PrmTransactionAmount	is a CurrencyAmount 
		        PrmUnitsAmount			is an UnitsAmount
		        PrmDescription			is Alpha up to 60
		        PlaceOnHold				is Boolean
			Parameter Rules
				PrmFinanceCodeBlock
					required
					initial value is FinanceCodeBlock
				PrmPostingDate
					required
					initial value is PostingDate
					default to PostingDate
		        PrmTransactionAmount 
					initial value is TransactionAmount 
					default to TransactionAmount 
					if (TransactionAmount >= 0)
						constraint (PrmTransactionAmount >= 0)
							"ToTransactionAmountCannotBeNegative"	
						constraint (PrmTransactionAmount <= TransactionAmount)
							"ToTransactionAmountCannotBeGreaterThanTransactionAmount"
					if (TransactionAmount <= 0)
						constraint (PrmTransactionAmount <= 0)
							"ToTransactionAmountCannotBePossitive"
						constraint (PrmTransactionAmount >= TransactionAmount)
							"ToTransactionAmountCannotBeGreaterThanTransactionAmount"
				PrmUnitsAmount
					initial value is UnitsAmount 
					default to UnitsAmount
					if (UnitsAmount >= 0)
						constraint (PrmUnitsAmount >= 0)
							"ToUnitsAmountCannotBeNegative"	
						constraint (PrmUnitsAmount <= UnitsAmount)
							"ToUnitsAmountCannotBeGreaterThanUnitsAmount"
					if (UnitsAmount <= 0)
						constraint (PrmUnitsAmount <= 0)
							"ToUnitsAmountCannotBePossitive"
						constraint (PrmUnitsAmount >= UnitsAmount)
							"ToUnitsAmountCannotBeGreaterThanUnitsAmount"
				PrmDescription	
					initial value is Description// + "_TransferTransaction"				
		        
			Local Fields
        		LocalJournalizeGroup	is a JournalizeGroup
        		LocalTransactionAmount  is an InternationalAmount
        		LocalUnitsAmount		is a UnitsAmount
			Entrance Rules
				LocalSystemCode = System
	            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
				LocalJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
				LocalTransactionAmount = PrmTransactionAmount
				LocalUnitsAmount	   = PrmUnitsAmount
			Action Rules
				if (LocalTransactionAmount = TransactionAmount
				and LocalUnitsAmount       = UnitsAmount)
					invoke UpdateBilledStatus GLTransactionDetail
						invoked.PrmBilled = 3
				else
					if (PlaceOnHold)
						invoke UpdateBilledStatus GLTransactionDetail
							invoked.PrmBilled = 5
				invoke Released.Create GLTransactionDetail
					fill in fields from this instance
						except invoked.ReportCurrencyAmount			
						except invoked.OriginatingTransaction
#ifdef module ap						
					if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
						invoked.OriginatingTransaction = reference to OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice
					else
					if (OriginatingTransaction.BusinessClassName = "PayablesInvoice")
						invoked.OriginatingTransaction = OriginatingTransaction
#endif				
					invoked.JournalizeGroup		= LocalJournalizeGroup
					invoked.PostingDate			= PrmPostingDate
					invoked.TransactionAmount	= PrmTransactionAmount * -1
					invoked.UnitsAmount			= PrmUnitsAmount * -1
					invoked.Reference			= "TransferTransaction"
					invoked.Description         = PrmDescription
					if (LocalTransactionAmount  = TransactionAmount
					and LocalUnitsAmount        = UnitsAmount)
						invoked.Billed			= 3
					else
						if (PlaceOnHold)
							invoked.Billed		= 5
						else
							invoked.Billed      = 0	
					if (RevenueRecognized.Processed)
						invoked.RevenueRecognized = 0
				invoke Released.Create GLTransactionDetail
					fill in fields from this instance	
						except invoked.ReportCurrencyAmount	
						except invoked.OriginatingTransaction
#ifdef module ap						
					if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
						invoked.OriginatingTransaction = reference to OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice
					else
					if (OriginatingTransaction.BusinessClassName = "PayablesInvoice")
						invoked.OriginatingTransaction = OriginatingTransaction
#endif				
					invoked.JournalizeGroup		= LocalJournalizeGroup
					invoked.PostingDate			= PrmPostingDate
					invoked.FinanceCodeBlock	= PrmFinanceCodeBlock
					invoked.TransactionAmount	= PrmTransactionAmount
					invoked.UnitsAmount			= PrmUnitsAmount
					invoked.Reference			= "TransferTransaction"
					invoked.Description         = PrmDescription
					if (PlaceOnHold)
						invoked.Billed			= 5
					else
						invoked.Billed          = 0	
					if (RevenueRecognized.Processed)
						invoked.RevenueRecognized = 0
			Exit Rules
				invoke InitiateJournalizeForRunGroup FinanceEnterpriseGroup in background
					invoked.PrmJournalizeGroup	= LocalJournalizeGroup		

		TransferMultipleTransactions is an Instance Action
			valid when (EligibleToTransfer)	
			Parameters
				PrmFinanceCodeBlock		is a FinanceCodeBlock
				PrmPostingDate			is a PostingDate
		        PlaceOnHold				is Boolean
			Parameter Rules
				PrmPostingDate
					required
			Local Fields
        		LocalJournalizeGroup	is a JournalizeGroup
			Entrance Rules
				LocalSystemCode = System
	            increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
				LocalJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
 			Action Rules
				invoke UpdateBilledStatus GLTransactionDetail
					invoked.PrmBilled = 3
				invoke Released.Create GLTransactionDetail
					fill in fields from this instance
						except invoked.ReportCurrencyAmount	
						except invoked.OriginatingTransaction
#ifdef module ap						
					if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
						invoked.OriginatingTransaction = reference to OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice
					else
					if (OriginatingTransaction.BusinessClassName = "PayablesInvoice")
						invoked.OriginatingTransaction = OriginatingTransaction
#endif				
					invoked.JournalizeGroup		= LocalJournalizeGroup
					invoked.PostingDate			= PrmPostingDate
					invoked.TransactionAmount	= TransactionAmount * -1
					invoked.UnitsAmount			= UnitsAmount * -1
					invoked.Reference			= "TransferTransaction"
					invoked.Description         = Description// + "_TransferTransaction"
					invoked.Billed				= 3
					if (RevenueRecognized.Processed)
						invoked.RevenueRecognized = 0
				invoke Released.Create GLTransactionDetail
					fill in fields from this instance	
						except invoked.ReportCurrencyAmount	
						except invoked.OriginatingTransaction
#ifdef module ap						
					if (OriginatingTransaction.BusinessClassName = "PayablesInvoiceDistribution")
						invoked.OriginatingTransaction = reference to OriginatingTransaction(PayablesInvoiceDistribution).PayablesInvoice
					else
					if (OriginatingTransaction.BusinessClassName = "PayablesInvoice")
						invoked.OriginatingTransaction = OriginatingTransaction
#endif				
					invoked.JournalizeGroup		= LocalJournalizeGroup
					invoked.PostingDate			= PrmPostingDate
				    if (PrmFinanceCodeBlock.ToAccountingEntity entered)
				    	invoked.FinanceCodeBlock.ToAccountingEntity = PrmFinanceCodeBlock.ToAccountingEntity
				    if (PrmFinanceCodeBlock.AccountingUnit entered)	
			        	invoked.FinanceCodeBlock.AccountingUnit = PrmFinanceCodeBlock.AccountingUnit
			        if (PrmFinanceCodeBlock.GeneralLedgerChartAccount entered)
			        	invoked.FinanceCodeBlock.GeneralLedgerChartAccount = PrmFinanceCodeBlock.GeneralLedgerChartAccount
			        if (PrmFinanceCodeBlock.Project entered) 
			            invoked.FinanceCodeBlock.Project = PrmFinanceCodeBlock.Project
			        if (PrmFinanceCodeBlock.FinanceDimension1 entered)
			        	invoked.FinanceCodeBlock.FinanceDimension1 = PrmFinanceCodeBlock.FinanceDimension1   
			        if (PrmFinanceCodeBlock.FinanceDimension2 entered)
			        	invoked.FinanceCodeBlock.FinanceDimension2 = PrmFinanceCodeBlock.FinanceDimension2   
			        if (PrmFinanceCodeBlock.FinanceDimension3 entered)
			        	invoked.FinanceCodeBlock.FinanceDimension3 = PrmFinanceCodeBlock.FinanceDimension3   
			        if (PrmFinanceCodeBlock.FinanceDimension4 entered)
			        	invoked.FinanceCodeBlock.FinanceDimension4 = PrmFinanceCodeBlock.FinanceDimension4   
			        if (PrmFinanceCodeBlock.FinanceDimension5 entered)
			        	invoked.FinanceCodeBlock.FinanceDimension5 = PrmFinanceCodeBlock.FinanceDimension5  
			        if (PrmFinanceCodeBlock.FinanceDimension6 entered)
			        	invoked.FinanceCodeBlock.FinanceDimension6 = PrmFinanceCodeBlock.FinanceDimension6   
			        if (PrmFinanceCodeBlock.FinanceDimension7 entered)
			        	invoked.FinanceCodeBlock.FinanceDimension7 = PrmFinanceCodeBlock.FinanceDimension7   
			        if (PrmFinanceCodeBlock.FinanceDimension8 entered)
			        	invoked.FinanceCodeBlock.FinanceDimension8 = PrmFinanceCodeBlock.FinanceDimension8   
			        if (PrmFinanceCodeBlock.FinanceDimension9 entered)
			        	invoked.FinanceCodeBlock.FinanceDimension9 = PrmFinanceCodeBlock.FinanceDimension9   
			        if (PrmFinanceCodeBlock.FinanceDimension10 entered)
			        	invoked.FinanceCodeBlock.FinanceDimension10 = PrmFinanceCodeBlock.FinanceDimension10   
					invoked.Reference			= "TransferTransaction"
					invoked.Description         = Description// + "_TransferTransaction"	
					if (PlaceOnHold)
						invoked.Billed			= 5
					else
						invoked.Billed          = 0	
					if (RevenueRecognized.Processed)
						invoked.RevenueRecognized = 0
			Exit Rules
				invoke InitiateJournalizeForRunGroup FinanceEnterpriseGroup in background
					invoked.PrmJournalizeGroup	= LocalJournalizeGroup		
					
		PurgeData is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmAccountingEntity			is like AccountingEntity
					default label is "AccountingEntity"
				PrmLedger					is like Ledger
					default label is "Ledger"
				PrmPostingDate				is Date
					default label is "PostingDate"
				PrmBusinessClassName 		is like BusinessClass
				PrmPrimaryLedger			is like Ledger
					default label is "Ledger"

			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmAccountingEntity
					required
				PrmLedger
					required
				PrmPostingDate
					required
				PrmBusinessClassName
					required
			
			Instance Selection
				include deleted records
				where (FinanceEnterpriseGroup					= PrmFinanceEnterpriseGroup
				and    Status.History
				and	   AccountingEntity	            			= PrmAccountingEntity
				and    OriginatingTransaction.BusinessClassName = PrmBusinessClassName //"GeneralLedgerLTransaction"				
				and	   PostingDate 								<= PrmPostingDate				
				and	   FinanceCodeBlock.Ledger					= PrmLedger
				and   ((PrmPrimaryLedger entered
				and    	PrimaryLedger							=  PrmPrimaryLedger)
				or	  (!PrmPrimaryLedger entered)))

			Set Is
				PrmFinanceEnterpriseGroup
				PrmAccountingEntity
				PrmLedger

			Sort Order
				FinanceEnterpriseGroup
				Status
				AccountingEntity              
				OriginatingTransaction.BusinessClassName
				PostingDate
				FinanceCodeBlock.Ledger
				PrimaryLedger
				OriginatingTransaction.BusinessObjectKey
				OriginatingTransactionUniqueID
				GLTransactionDetail
			
			Action Rules
				Empty Set Rules
				Instance Rules
					invoke RealPurge History this instance

		CreateDetailsForJournalTransaction is a Set Action
			restricted
			Parameters
				PrmRelatedJournalTransaction	is BusinessObjectReference
					default label is "RelatedJournalTransaction"
				PrmDate							is Date
					default label is "Date"
				PrmNewJournalTransaction		is BusinessObjectReference
					default label is "NewJournalTransaction"
				PrmJournalizeGroup				is a JournalizeGroup
					default label is "JournalizeGroup"
				PrmAutoReverse					is Boolean
				ReverseAmounts					is Boolean

			Local Fields	
				LocalTransactionAmount				is an InternationalAmount 
				LocalFunctionalAmount				is an InternationalAmount 
				LocalAlternateAmount				is an InternationalAmount
				LocalAlternateAmount2				is an InternationalAmount
				LocalAlternateAmount3				is an InternationalAmount
				LocalProjectAmount					is an InternationalAmount
				LocalReportAmount1					is an InternationalAmount
				LocalReportAmount2					is an InternationalAmount
				LocalReportAmount3					is an InternationalAmount
				LocalReportAmount4					is an InternationalAmount
				LocalReportAmount5					is an InternationalAmount
				LocalUnitsAmount					is an UnitsAmount

			Set Is
				PrmRelatedJournalTransaction

			Instance Selection
				where (RelatedJournalTransaction.BusinessClassName	= PrmRelatedJournalTransaction.BusinessClassName
				and    RelatedJournalTransaction.BusinessObjectKey	= PrmRelatedJournalTransaction.BusinessObjectKey)

			Sort Order
				RelatedJournalTransaction.BusinessClassName
				RelatedJournalTransaction.BusinessObjectKey
				GLTransactionDetail
			
			Action Rules
				Empty Set Rules
				Instance Rules
					invoke CreateHistoryGLTransDetailNoRules History GLTransactionDetail
						fill in fields from this instance
						invoked.ReportCurrencyAmount.KeepRateOnly					= true
						invoked.PostingDate											= PrmDate
						invoked.TransactionDate										= PrmDate
#ifdef module ap
						if (!FromRNIUpdate)
							invoked.OriginatingTransaction							= PrmNewJournalTransaction
#endif
						invoked.RelatedJournalTransaction							= PrmNewJournalTransaction
						invoked.JournalizeGroup										= PrmJournalizeGroup
						invoked.AutoReverse											= PrmAutoReverse
						if (ReverseAmounts)
							invoked.TransactionAmount											= TransactionAmount * -1
							invoked.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount  * -1
							invoked.ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount	= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount  * -1
							invoked.ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount	= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount  * -1
							invoked.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount	= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount	= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount	= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount	= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount	= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount * -1
							invoked.UnitsAmount													= UnitsAmount * -1
							invoked.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount * -1
							invoked.ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount  * -1
							invoked.ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount  * -1
							invoked.ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount	= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount  * -1

		FixDimensionCode is a Set Action
			restricted
		    Parameters
		        PrmFinanceEnterpriseGroup is a FinanceEnterpriseGroup
		            default label is "FinanceEnterpriseGroup"
				PrmBusinessClassGroup 	  is a GLTransactionDetail group
					default label is "CustomGroup"
		    Parameter Rules
		        PrmFinanceEnterpriseGroup
		            required
		        PrmBusinessClassGroup
		        	required
		    Instance Selection
		        where (GLTransactionDetail within PrmBusinessClassGroup)
		    Sort Order
		        FinanceEnterpriseGroup
		        JournalizeGroup
		        Status
		    Action Rules
		        Instance Rules
		            if (DimensionCode != FinanceCodeBlock.DimensionCode)
		                DimensionCode = FinanceCodeBlock.DimensionCode

		FixDimensionCodeForTransaction is a Set Action
			restricted
		    Parameters
				PrmBusinessObjectReference is BusinessObjectReference
				PrmOldDimensionCode 	   is like DimensionCode
				PrmNewDimensionCode 	   is like DimensionCode
				PrmJournalType			   is Numeric 1
				PrmCodeBlockMismatch       is Boolean
		    Parameter Rules
		        PrmBusinessObjectReference
		        	required
		    Instance Selection
		        where (RelatedJournalTransaction = PrmBusinessObjectReference)
		    Sort Order
		        RelatedJournalTransaction
		    Local Fields
		    	LocalSummarizationWasIncorrect	is Boolean
		    	
		    Action Rules
		    	Set Rules
		    		Exit Rules
		    			if (LocalSummarizationWasIncorrect
		    			or  PrmCodeBlockMismatch)
						    if (!PrmBusinessObjectReference(GeneralLedgerTransaction).GLTransactionWithInvalidDimensionCode set exists)
			                    invoke Create PrmBusinessObjectReference(GeneralLedgerTransaction).GLTransactionWithInvalidDimensionCode set
			                        invoked.OldDimensionCode 		  = PrmOldDimensionCode
			                        invoked.NewDimensionCode 		  = PrmNewDimensionCode
			                        if (PrmCodeBlockMismatch)
			                            invoked.TransactionStatus 	  = 1
			                        invoked.SummarizationWasIncorrect = LocalSummarizationWasIncorrect
			                else		    		
	 							invoke Update PrmBusinessObjectReference(GeneralLedgerTransaction).GLTransactionWithInvalidDimensionCode set
			                        invoked.OldDimensionCode 		  = PrmOldDimensionCode
			                        invoked.NewDimensionCode 		  = PrmNewDimensionCode
			                        if (PrmCodeBlockMismatch)
			                            invoked.TransactionStatus 	  = 1
			                        invoked.SummarizationWasIncorrect = LocalSummarizationWasIncorrect

    			Instance Rules
    				if (FinanceCodeBlock != PrmBusinessObjectReference(GeneralLedgerTransaction).FinanceCodeBlock)
		            	if (PrmJournalType < 2)
		            		LocalSummarizationWasIncorrect = true
		                DimensionCode = FinanceCodeBlock.DimensionCode
		                		
		UpdateDimensionCode is an Instance Action
		    restricted
		    Action Rules
		    	if (DimensionCode != FinanceCodeBlock.DimensionCode)
		        	DimensionCode = FinanceCodeBlock.DimensionCode

		FixBilledFlags is a Set Action
			restricted
			Instance Selection
				where ((Billed.Invoiced
				or      RevenueRecognized.Draft)
				and     FinanceCodeBlock.Project entered
				and     ProjectContractInvoiceLine set not exists)
			Action Rules
				Instance Rules
					Billed = 0
					RevenueRecognized = 0

		FixReversedInterEntityEntries is a Set Action
			restricted
            completion message is "FixReversedInterEntityEntriesComplete<RecordCount>GLTransactionDetailRecordsCorrected"			
			Local Fields
				RecordCount is Numeric size 8
			Instance Selection
				where (AccountingEntity != FinanceCodeBlock.ToAccountingEntity
				and  ((ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount < 0
				and    ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount > 0)
				or    (ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount > 0
				and    ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount < 0)))
			Action Rules
				Instance Rules
					RecordCount += 1
					ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount *= -1
					ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount *= -1
					ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount *= -1
					ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount *= -1
					
		DeleteRecordSet is a Set Action
			restricted
			Parameters
				PrmFEG					is a FinanceEnterpriseGroup
				PrmGLTIRunGroup			is a JournalizeGroup
			Parameter Rules
				PrmFEG
					required
				PrmGLTIRunGroup
					required
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFEG
				and    JournalizeGroup	= PrmGLTIRunGroup
				and    Status.Released)
			Action Rules
				Instance Rules
					invoke Purge
		
		Purge is a Delete Action
			restricted
			Entrance Rules
				include ColumnarDeleteRules

		RealPurge is a Purge Action
			restricted
			bypass relational integrity rules

		SelectTransactionsToReallocate is a Set Action
			restricted
			completion message is "<LocalTransactionCount>TransactionsSelectedForReallocation"
			Parameters
                PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
                PrmProjectContract			is like Project
                PrmProject					is like Project
				PostingDateRange			is a DateRange
				TransactionDateRange		is a DateRange
				FundingSource1				is like FinanceDimension2
				FundingSource2				is like FinanceDimension2
				PrmBilled					is Numeric 1
        		    States
        		    	Both				value is 0
                		Unprocessed			value is 1
		                Processed			value is 2
			   	PrmSystem					is like GeneralLedgerSystemCode
				Event						is like GeneralLedgerEvent
				AppendToCurrentSelection	is Boolean
			Local Fields
		   		LocalTransactionCount		is Numeric size 8
				RecordCount					is Numeric size 3
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    FinanceCodeBlock.Project = PrmProject
				and    Status.History
				and    System != "PS"
    			and    PostingDate within PostingDateRange
    			and    GeneralLedgerEvent != "PL"
    			and    GeneralLedgerEvent != "PJ"
    			and    GeneralLedgerEvent != "BD"
    			and    GeneralLedgerEvent != "LR"
				and    FinanceCodeBlock.FinanceDimension2 entered

				and  ((FinanceCodeBlock.FinanceDimension2 = FundingSource1
				or     FinanceCodeBlock.FinanceDimension2 = FundingSource2
				or    (FundingSource1 not entered
				and    FundingSource2 not entered)))
				and   (TransactionDate within TransactionDateRange
				or     TransactionDateRange not entered)
				and   (System = PrmSystem
				or     PrmSystem not entered)
				and   (GeneralLedgerEvent = Event
				or     Event not entered)
				and  ((Billed.Unprocessed
				and   (PrmBilled.Both
				or     PrmBilled.Unprocessed))
				or    (Billed.Processed
				and   (PrmBilled.Both
				or     PrmBilled.Processed))))
			Sort Order is TransactionsByProject
			Action Rules
				Instance Rules
					if (AppendToCurrentSelection)
						if (ProjectContractReallocationSelection set not exists)
							LocalTransactionCount += 1
							invoke Create ProjectContractReallocationSelection
								resume on error											
								invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.ProjectContract			= PrmProjectContract
								invoked.GLTransactionDetail 	= GLTransactionDetail
					else
						LocalTransactionCount += 1
						invoke Create ProjectContractReallocationSelection
							resume on error
							invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.ProjectContract			= PrmProjectContract
							invoked.GLTransactionDetail 	= GLTransactionDetail

		HoldBillableTransactions is a Set Action
			restricted
			Parameters
                PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
                PrmProject					is like Project
				SelectionGroup				is a GLTransactionDetail group
				DateSelection				is Numeric size 1
					States
						Transaction			value is 1
						Posting				value is 2
				DateRange
				BillingHold					is Boolean
				RevenueHold					is Boolean
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    FinanceCodeBlock.Project = PrmProject
				and    Status.History
				and  ((Billed.Unprocessed
				and    BillingHold)
				or    (RevenueRecognized.Unprocessed
				and    RevenueHold))
    			and   !ExcludedProjectEvents
				and  ((DateSelection.Transaction
				and    TransactionDate within DateRange)
				or    (DateSelection.Posting
				and    PostingDate within DateRange)
				or     DateSelection not entered))
			Sort Order is TransactionsByProject
			Action Rules
				Instance Rules
					if ((SelectionGroup entered
					and  GLTransactionDetail within SelectionGroup)
					or   SelectionGroup not entered)
						invoke PutOnHold
							if (Billed.Unprocessed
							and BillingHold)
								invoked.BillingHold = BillingHold
							if (RevenueRecognized.Unprocessed
							and RevenueHold)
								invoked.RevenueHold	= RevenueHold

		RemoveHoldFromBillableTransactions is a Set Action
			restricted
			Parameters
                PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
                PrmProject					is like Project
				SelectionGroup				is a GLTransactionDetail group
				DateSelection				is Numeric size 1
					States
						Transaction			value is 1
						Posting				value is 2
				DateRange
				RemoveBillingHold			is Boolean
				RemoveRevenueHold			is Boolean
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    FinanceCodeBlock.Project = PrmProject
				and    Status.History
				and  ((Billed.Hold
				and    RemoveBillingHold)
				or    (RevenueRecognized.Hold
				and    RemoveRevenueHold))
    			and   !ExcludedProjectEvents
				and  ((DateSelection.Transaction
				and    TransactionDate within DateRange)
				or    (DateSelection.Posting
				and    PostingDate within DateRange)
				or     DateSelection not entered))
			Sort Order is TransactionsByProject
			Action Rules
				Instance Rules
					if ((SelectionGroup entered
					and  GLTransactionDetail within SelectionGroup)
					or   SelectionGroup not entered)
						invoke RemoveFromHold
							if (Billed.Hold
							and RemoveBillingHold)
								invoked.RemoveBillingHold = RemoveBillingHold
							if (RevenueRecognized.Hold
							and RemoveRevenueHold)
								invoked.RemoveRevenueHold = RemoveRevenueHold

		HoldCapitalizableTransactions is a Set Action
			restricted
			Parameters
                PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
                PrmProject					is like Project
				SelectionGroup				is a GLTransactionDetail group
				DateSelection				is Numeric size 1
					States
						Transaction			value is 1
						Posting				value is 2
				DateRange
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    FinanceCodeBlock.Project = PrmProject
				and    Status.History
				and    Capitalize.Unprocessed
				and  ((DateSelection.Transaction
				and    TransactionDate within DateRange)
				or    (DateSelection.Posting
				and    PostingDate within DateRange)
				or     DateSelection not entered))
			Sort Order is TransactionsByProject
			Action Rules
				Instance Rules
					if ((SelectionGroup entered
					and  GLTransactionDetail within SelectionGroup)
					or   SelectionGroup not entered)
						invoke PutOnHold
							invoked.CapitalizeHold = true

		RemoveHoldFromCapitalizableTransactions is a Set Action
			restricted
			Parameters
                PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
                PrmProject					is like Project
				SelectionGroup				is a GLTransactionDetail group
				DateSelection				is Numeric size 1
					States
						Transaction			value is 1
						Posting				value is 2
				DateRange
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and    FinanceCodeBlock.Project = PrmProject
				and    Status.History
				and    Capitalize.Hold
				and  ((DateSelection.Transaction
				and    TransactionDate within DateRange)
				or    (DateSelection.Posting
				and    PostingDate within DateRange)
				or     DateSelection not entered))
			Sort Order is TransactionsByProject
			Action Rules
				Instance Rules
					if ((SelectionGroup entered
					and  GLTransactionDetail within SelectionGroup)
					or   SelectionGroup not entered)
						invoke RemoveFromHold
							invoked.RemoveCapitalizeHold = true

		RecalculateProjectFESExpenditures is a Set Action
			restricted
			synchronized on "RecalculateProjectFESExpenditures:<PrmFinanceEnterpriseGroup><PrmProjectContract><PrmProject>"
			Parameters
                PrmFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
                PrmProjectContract			is like Project
                PrmProject					is like Project
			Local Fields
				LocalSkip					is Boolean
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and    FinanceCodeBlock.Project	= PrmProject
				and    FinanceCodeBlock.FinanceDimension2 entered
				and    ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount entered
				and   !FESExcludedEvent)
			Sort Order is TransactionsByProject
			Action Rules
				Instance Rules
					LocalProjectContract = PrmProjectContract
					if ((System = "AP"
					or   System = "CB")
					and (Status.Unreleased
					or   Status.Released)
					and (System.EncumbranceOption.TrackAndEdit
					or   System.EncumbranceOption.Track))
						LocalSkip = true
					else
						invoke UpdateFESExpenditures ProjectFundingSourceFESRel
							invoked.TransactionDate	= TransactionDate
							invoked.FinanceCodeBlock = FinanceCodeBlock
							invoked.Amount = ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount

#ifdef module ap					
		BuildProcurementExpenseRecords is a Set Action
			restricted
			Parameters

			Local Fields	
                LocalDimensionCode               is like DimensionCode
                LocalSystem                      is like GeneralLedgerSystemCode
                LocalCurrencyCode                is like Currency
                LocalFinanceCodeBlock            is like FinanceCodeBlock
                LocalToAccountingEntity			 is like AccountingEntity
				
			Instance Selection
				where ((JournalizeGroup entered
				and		Status = Status.History
				and 	!GLProcurementExpenseRel exists)
				and	   (System = "AP"
				or		System = "IC"
				or		System = "RQ"
				or		System = "PO"))

			Set Is

			Sort Order is ByJournalizeGroup

			Accumulators
				TransactionAmountTotal
				FunctionalAmountTotal
				AlternateAmountTotal
				AlternateAmount2Total
				AlternateAmount3Total
				ProjectAmountTotal
				ReportAmount1Total
				ReportAmount2Total
				ReportAmount3Total
				ReportAmount4Total
				ReportAmount5Total
				UnitsAmountTotal
							
			Action Rules
				Empty Set Rules
				Set Rules
				
				DimensionCode Set Rules
				
					Entrance Rules
						LocalSystem					= System
						LocalDimensionCode			= DimensionCode
						LocalCurrencyCode			= CurrencyCode
						LocalFinanceCodeBlock		= FinanceCodeBlock
						include FindGLYearPeriod
						LocalToAccountingEntity		= FinanceCodeBlock.ToAccountingEntity
						
					Exit Rules
						initialize TotalGroup
						TotalGroup.AccountingEntity							= LocalToAccountingEntity
						TotalGroup.GLExpenseTotal.Ledger					= LocalFinanceCodeBlock.Ledger
						TotalGroup.GLExpenseTotal.System					= LocalSystem
						TotalGroup.GLExpenseTotal.Currency					= LocalCurrencyCode
						TotalGroup.GLExpenseTotal.EntityYearPeriod			= DerivedEntityCalendarPeriod	
						TotalGroup.GLExpenseTotal.AccountingUnit			= LocalFinanceCodeBlock.AccountingUnit
						TotalGroup.GLExpenseTotal.GeneralLedgerChartAccount	= LocalFinanceCodeBlock.GeneralLedgerChartAccount
						TotalGroup.GLExpenseTotal.Project					= LocalFinanceCodeBlock.Project
						TotalGroup.GLExpenseTotal.DimensionCode				= LocalDimensionCode
						TotalGroup.GLExpenseTotal.PrimaryLedger				= LocalFinanceCodeBlock.Ledger
						invoke PostTransactions TotalGroup.GLExpenseTotal
							invoked.TransactionAmount	= TransactionAmountTotal
							invoked.FunctionalAmount	= FunctionalAmountTotal
							invoked.AlternateAmount		= AlternateAmountTotal
							invoked.AlternateAmount2	= AlternateAmount2Total
							invoked.AlternateAmount3	= AlternateAmount3Total
							invoked.ProjectAmount		= ProjectAmountTotal
							invoked.ReportAmount1		= ReportAmount1Total
							invoked.ReportAmount2		= ReportAmount2Total
							invoked.ReportAmount3		= ReportAmount3Total
							invoked.ReportAmount4		= ReportAmount4Total
							invoked.ReportAmount5		= ReportAmount5Total
							invoked.UnitsAmount			= UnitsAmountTotal
							invoked.FinanceDimension1	= LocalFinanceCodeBlock.FinanceDimension1
							invoked.FinanceDimension2	= LocalFinanceCodeBlock.FinanceDimension2
							invoked.FinanceDimension3	= LocalFinanceCodeBlock.FinanceDimension3
							invoked.FinanceDimension4	= LocalFinanceCodeBlock.FinanceDimension4
							invoked.FinanceDimension5	= LocalFinanceCodeBlock.FinanceDimension5
							invoked.FinanceDimension6	= LocalFinanceCodeBlock.FinanceDimension6
							invoked.FinanceDimension7	= LocalFinanceCodeBlock.FinanceDimension7
							invoked.FinanceDimension8	= LocalFinanceCodeBlock.FinanceDimension8
							invoked.FinanceDimension9	= LocalFinanceCodeBlock.FinanceDimension9
							invoked.FinanceDimension10  = LocalFinanceCodeBlock.FinanceDimension10						
							invoked.PeriodEndingDate	= LocalEndDate.Date
				Instance Rules
					include FindGLYearPeriod	
					invoke Create GLProcurementExpense
						invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
						invoked.JournalizeGroup				= JournalizeGroup
						invoked.AccountingEntity			= AccountingEntity
						invoked.FinanceCodeBlock			= FinanceCodeBlock
						invoked.DimensionCode				= DimensionCode
						invoked.PostingDate					= PostingDate
						invoked.TransactionDate				= TransactionDate
						invoked.EntityYearPeriod			= DerivedEntityCalendarPeriod	
						invoked.CurrencyCode				= CurrencyCode
						invoked.TransactionAmount			= TransactionAmount
						invoked.ControlDocumentNumber		= ControlDocumentNumber
						invoked.OrganizationKeyFields		= OrganizationKeyFields
						invoked.System						= System
						invoked.JournalCode					= JournalCode
						invoked.GeneralLedgerEvent			= GeneralLedgerEvent
						invoked.ReportCurrencyAmount		= ReportCurrencyAmount
						invoked.AutoReverse					= AutoReverse
						invoked.VendorGroupAndVendor		= VendorGroupAndVendor
						invoked.Reference					= Reference
						invoked.Description					= Description
						invoked.DocumentNumber				= DocumentNumber
						invoked.UnitsAmount					= UnitsAmount						
						invoked.RelatedJournalTransaction	= RelatedJournalTransaction
						invoked.OriginatingTransaction		= OriginatingTransaction
						invoked.PrimaryLedger				= PrimaryLedger
						invoked.DrillBackLink				= DrillBackLink

						invoked.PayablesCompany				= DerivedCompany
						invoked.Invoice						= DerivedAPInvoice
						invoked.MatchProcessType			= DerivedAPInvoiceType
						invoked.PurchaseOrder				= DerivedAPPurchOrder
						invoked.Vendor						= DerivedVendorOnly
						invoked.Item						= DerivedAPItem
						invoked.ItemType					= DerivedAPItemType
						invoked.ItemDescription				= DerivedAPItemDesc
						invoked.AddOnCharge					= DerivedAddOnCharge
						invoked.TaxCode						= DerivedAPTaxCode
						invoked.Quantity					= DerivedAPQuantity
						invoked.UnitOfMeasure				= DerivedAPUom
						invoked.UnitCost					= DerivedAPUnitCost

						invoked.InventoryLocation			= DerivedInventoryLocation
						invoked.OrigICDocument				= DerivedOrigICDocument
						invoked.OrigICLine					= DerivedOrigICLine
						invoked.ICPostingType				= DerivedICPostingType

						invoked.POLineNumber				= DerivedLineNumber
						invoked.LineAmount					= DerivedLineAmount
						invoked.Buyer						= DerivedBuyer
						invoked.ReceivedQuantity			= DerivedReceivedQuantity
						invoked.RequestingLocation			= DerivedRequestingLocation

						if (DerivedRequisition entered)
							invoked.Requisition				= DerivedRequisition
							invoked.RequisitionLine			= DerivedRequisitionLine
							invoked.Requester				= DerivedRequester
						invoked.GLTranSource				= reference to this instance
						if ((System = "IC"
						or   System = "PO")
						and DerivedAPQuantity entered)
							if (TransactionAmount < 0
							and DerivedAPQuantity > 0)
								invoked.Quantity = (DerivedAPQuantity * -1)
							if (TransactionAmount > 0
							and DerivedAPQuantity < 0)
								invoked.Quantity = (DerivedAPQuantity * -1)

					TransactionAmountTotal		    += TransactionAmount
					if (AccountingEntity		     = FinanceCodeBlock.ToAccountingEntity)
						FunctionalAmountTotal		+= ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
						AlternateAmountTotal		+= ReportCurrencyAmount.AlternateAmount.EnteredCurrencyAmount
						AlternateAmount2Total		+= ReportCurrencyAmount.AlternateAmount2.EnteredCurrencyAmount
						AlternateAmount3Total		+= ReportCurrencyAmount.AlternateAmount3.EnteredCurrencyAmount
					else
						FunctionalAmountTotal		+= ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
						AlternateAmountTotal		+= ReportCurrencyAmount.ToAlternateAmount.EnteredCurrencyAmount
						AlternateAmount2Total		+= ReportCurrencyAmount.ToAlternateAmount2.EnteredCurrencyAmount
						AlternateAmount3Total		+= ReportCurrencyAmount.ToAlternateAmount3.EnteredCurrencyAmount
					ProjectAmountTotal			+= ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
					ReportAmount1Total			+= ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
					ReportAmount2Total			+= ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
					ReportAmount3Total			+= ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
					ReportAmount4Total			+= ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
					ReportAmount5Total			+= ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
					UnitsAmountTotal			+= UnitsAmount

							
#endif
#ifdef module am
		CreateAssetCapitalTransactions is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmProject					is a Project

			Local Fields
  				LocalAssetCapitalTransaction				is a AssetCapitalTransaction

			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and (PrmProject not entered
				or FinanceCodeBlock.Project = PrmProject)
				and	FinanceCodeBlock.Project.Capital
				and	FinanceCodeBlock.Project.ProjectStatus.AllowCapitalization
				and !UpdatedToAssets
				and IsPosted
				and	!(Capitalize.Processed
				and ProjectAssetinterfaceRel not exists))
			Sort Order is ByRelatedJournalTransaction
			Action Rules

				Instance Rules
					invoke Create AssetCapitalTransaction
						assign result to LocalAssetCapitalTransaction
						fill in user fields from this instance
						fill in fields from this instance
						invoked.GLTransactionDetail	= GLTransactionDetail
						if (Capitalize.Processed)
							invoked.Capitalized		= true
					
					if (Capitalize.Processed
					and ProjectAssetinterfaceRel.AssetCapitalTransaction not entered)
						invoke UpdateNoRules ProjectAssetinterfaceRel
							invoked.AssetCapitalTransaction = LocalAssetCapitalTransaction.AssetCapitalTransaction

					UpdatedToAssets	= true
					initialize LocalAssetCapitalTransaction

		CreateAssetCapitalTransaction is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
				PrmRelatedJournalTransaction is BusinessObjectReference
			Instance Selection
				where (FinanceEnterpriseGroup = PrmFinanceEnterpriseGroup
				and RelatedJournalTransaction	= PrmRelatedJournalTransaction)
			
			Sort Order is ByRelatedJournalTransaction
			Action Rules

				Instance Rules
					invoke Create AssetCapitalTransaction
						fill in user fields from this instance
						fill in fields from this instance
						invoked.GLTransactionDetail	= GLTransactionDetail
						if (Capitalize.Processed)
							invoked.Capitalized		= true

					UpdatedToAssets	= true

		PutOnHoldGL is an Instance Action
			valid when (ValidForHold)
			default label is "Put_On_Hold"
			Action Rules
				Capitalize = 2


		DraftProjectInterface is an Instance Action
			valid when (ValidForDraft)
			default label is "Draft_Project_Interface"
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmSummaryCode				is AlphaUpper size 30
					default label is "SummaryCode"
				PrmOverrideProject			is a Project
					default label is "OverrideProject"
			
			Parameter Rules
				PrmFinanceEnterpriseGroup
					initial value is FinanceEnterpriseGroup

				PrmSummaryCode
					if(ContextAssetInterfaceOptions.IsValidForPostWIPToProject)
						cannot be entered
							"SummaryCodeCannotBeAssignedWhenWorkInProcessAccountNotEntered"
					if (FinanceEnterpriseGroup.FundAccounting)
						cannot be entered
							"SummaryCodeCannotBeAssignedWhenUsingFundAccounting"
					if (PrmOverrideProject entered)
						required
							"MustEnterSummaryCodeIfOverrideProjectIsEntered"

				PrmOverrideProject
					if (ContextAssetInterfaceOptions.PostingType
					and PrmOverrideProject not entered
					and PrmSummaryCode entered)
						default to FinanceCodeBlock.Project
					if (PrmSummaryCode entered
					and ContextAssetInterfaceOptions.SummaryType)
						required
							"MustEnterOverrideProjectIfSummaryCodeIsEnteredForSummaryLevelProject"
					constraint (PrmOverrideProject.ProjectType.Posting)
						"OverrideProjectMustBePostingTypeOnly"
					constraint (PrmOverrideProject.Capital)
						"MustBeACapital<FinanceEnterpriseGroup.ProjectLabel>"
					constraint (PrmOverrideProject.ProjectStatus.AllowCapitalization)
						"<FinanceEnterpriseGroup.ProjectLabel>StatusMustAllowCapitalization"

			Action Rules
				invoke Create ProjectAssetInterface
					if(ContextAssetInterfaceOptions.AssetCompany.CopyUserFields)
						fill in user fields from this instance
					invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.AssetInterfaceOptions	= ContextAssetInterfaceOptions
					invoked.GLTransactionDetail		= GLTransactionDetail
					invoked.AccountingEntity	= FinanceCodeBlock.ToAccountingEntity
					invoked.AccountingUnit		= FinanceCodeBlock.AccountingUnit
					if (PrmOverrideProject entered)
						invoked.Project			= PrmOverrideProject
					else
						invoked.Project				= FinanceCodeBlock.Project
					invoked.FinanceDimension1	= FinanceCodeBlock.FinanceDimension1
					invoked.FinanceDimension2	= FinanceCodeBlock.FinanceDimension2
					invoked.FinanceDimension3	= FinanceCodeBlock.FinanceDimension3
					invoked.FinanceDimension4	= FinanceCodeBlock.FinanceDimension4
					invoked.FinanceDimension5	= FinanceCodeBlock.FinanceDimension5
					invoked.FinanceDimension6	= FinanceCodeBlock.FinanceDimension6
					invoked.FinanceDimension7	= FinanceCodeBlock.FinanceDimension7
					invoked.FinanceDimension8	= FinanceCodeBlock.FinanceDimension8
					invoked.FinanceDimension9	= FinanceCodeBlock.FinanceDimension9
					invoked.FinanceDimension10	= FinanceCodeBlock.FinanceDimension10
					invoked.RunGroup			= last ProjectAssetInterfaceRunGroupRel.RunGroup + 1
					invoked.SummaryCode			= PrmSummaryCode

#endif
	StateCycles
		GLTransactionDetailLifeCycle is a StateCycle
			state field is Status
			
			Unreleased	is a State
		 		Create is a Create Action
		 			restricted
					Entrance Rules
						include EditTransactionDetail
						
		 		Update is an Update Action
		 			restricted
					Entrance Rules
						include EditTransactionDetail
    						
				Release is an Instance Action
					restricted
					Parameters
						MoveToNotToBePosted is Boolean
					Action Rules
		
						if (AccountingEntity.AccountingUnitZoneBalancing)
							LocalAccountingEntity		= AccountingEntity
							initialize LocalInstAccountingUnit
							if (ZoneFinanceCodeBlock.AccountingUnit entered)
								LocalInstAccountingUnit	= ZoneFinanceCodeBlock.AccountingUnit
				        	BaseZoneAccountingUnit 		= DerivedBaseZoneAccountingUnit
				        else
				        	BaseZoneAccountingUnit 		= blank 
		
						if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
							initialize LocalInstFinanceDimension1
							if (ZoneFinanceCodeBlock.FinanceDimension1 entered)
								LocalInstFinanceDimension1	= ZoneFinanceCodeBlock.FinanceDimension1
				        	BaseZoneDimension1 				= DerivedBaseZoneFinanceDimension
				        else
				        	BaseZoneDimension1 				= blank 
        
						if (FinanceCodeBlock.ToAccountingEntity.AccountingUnitZoneBalancing)
							LocalAccountingEntity		= FinanceCodeBlock.ToAccountingEntity
							LocalInstAccountingUnit		= FinanceCodeBlock.AccountingUnit
					        ZoneAccountingUnit 			= DerivedZoneAccountingUnit
					    else
				        	ZoneAccountingUnit 			= blank 
        
						if (FinanceEnterpriseGroup.Dimension1ZoneBalancing)
							LocalInstFinanceDimension1	= FinanceCodeBlock.FinanceDimension1
							ZoneDimension1  			= DerivedZoneFinanceDimension
					    else
				        	ZoneDimension1  			= blank 
		
						ZoneSystemKeyFields 			= ZoneSystemKeyString
						ZoneFields 						= ZoneFieldsString
						
						if (MoveToNotToBePosted)
							make transition to NotToBePosted
						else
							make transition to Released

		 		Delete is a Delete Action
		 			restricted
					Entrance Rules
						include ColumnarDeleteRules

				CreateUnreleasedGLTransDetailNoRules is a Create Action
					restricted
					bypass field rules
					Entrance Rules
						include EditTransactionDetail
					Action Rules
						include CreateTransactionDefaultValues

				UpdateUnreleasedGLTransDetailNoRules is an Update Action
					restricted
					bypass field rules
					Entrance Rules
						include EditTransactionDetail
					Action Rules
						include CreateTransactionDefaultValues

            Released  	is a State
		 		Create is a Create Action
		 			restricted
					Entrance Rules
						include EditTransactionDetail
				 					
		 		Update is an Update Action
		 			restricted
					Entrance Rules
						include EditTransactionDetail
    						
		 		Delete is a Delete Action
		 			restricted
					Entrance Rules
						include ColumnarDeleteRules

				UpdateToHistory is an Instance Action
					restricted
					Parameters
						PrmRelatedJournalTransaction	is BusinessObjectReference
							default label is "RelatedJournalTransaction"
					Action Rules
						RelatedJournalTransaction 	= PrmRelatedJournalTransaction
						make transition to History

		 		CreateReleasedGLTransDetailNoRules is a Create Action
		 			restricted
					bypass field rules
					Entrance Rules
						if (Reference = "ReceivedNotInvoiced")		
							TransientSkipAttachRule = true			
						include EditTransactionDetail
					Action Rules
						include CreateTransactionDefaultValues

				UpdateReleasedGLTransDetailNoRules is an Update Action		
					restricted
					bypass field rules
					Entrance Rules
						include EditTransactionDetail
					Action Rules
						include CreateTransactionDefaultValues

            NotToBePosted is a State
		 		Create is a Create Action
		 			restricted
					Entrance Rules
						include EditTransactionDetail
				 					
		 		Update is an Update Action
		 			restricted
					Entrance Rules
						include EditTransactionDetail
    						
		 		Delete is a Delete Action
		 			restricted
					Entrance Rules
						include ColumnarDeleteRules

				Purge is a Delete Action
					restricted
					Entrance Rules
						include ColumnarDeleteRules
		 							 					
				RealPurge is a Purge Action
					restricted
					bypass relational integrity rules

			History 	is a State
		 		Create is a Create Action
		 			restricted
					bypass field rules
					Entrance Rules
						include EditTransactionDetail
					Action Rules
						include CreateTransactionDefaultValues
		 		
		 		Update is an Update Action
		 			restricted
					bypass field rules
    						
		 		CapitalizeUpdates is an Instance Action
		 			restricted
		 			Parameters
		 				CapitalizePrm	is Numeric 1
							States
								Unprocessed value is 0
								Processed	value is 1
								Hold		value is 2
		 			Action Rules
		 				Capitalize = CapitalizePrm

				Purge is a Delete Action
					restricted
					Entrance Rules
						include ColumnarDeleteRules
					
				RealPurge is a Purge Action
					restricted
					bypass relational integrity rules
					
		 		CreateHistoryGLTransDetailNoRules is a Create Action
		 			restricted
					bypass field rules
					Entrance Rules

					Action Rules
						include CreateTransactionDefaultValues
						
FileCreationLogic.GLTransactionDetail is a BusinessClass

	Persistent Fields
	
	Local Fields
					
	Relations
		
	Derived Fields
				
	Actions
	
		GeneratePreviewRecordsForRunGroup is a Set Action
			restricted
			synchronized on untranslatable:"GLTransactionDetail_GeneratePreviewRecordsForRunGroup_<FinanceEnterpriseGroupPrm>_<PrmRunGroup>"

			Sort Order is ByJournalizeGroup
			
			Parameters
				FinanceEnterpriseGroupPrm		is a FinanceEnterpriseGroup
#ifdef module filecreation								
				FileCreationSetupPrm	is a FileCreationSetup
#endif				
				BeginTimeStamp			is TimeStamp
				EndTimeStamp			is TimeStamp
				AllRecords				is Boolean
				PrmNumberOfRunGroups	is Numeric 3
				PrmRunGroup				is Numeric 3
				
			Local Fields
#ifdef module filecreation							
				LocalGLTransactionDetailGroupSelection		is a GLTransactionDetail group in subject FileCreationGLTransactionDetail
#endif
			Instance Selection
				where (FinanceEnterpriseGroup = FinanceEnterpriseGroupPrm
				and    (PrmNumberOfRunGroups <= 1
				or      GLTransactionDetail % PrmNumberOfRunGroups = PrmRunGroup)
				and	   (AllRecords
				or	    (update stamp > BeginTimeStamp
				and	     update stamp <= EndTimeStamp)))

			Action Rules
				Instance Rules
#ifdef module filecreation												
					LocalGLTransactionDetailGroupSelection = FileCreationSetupPrm.EligibilityGroup
					if (LocalGLTransactionDetailGroupSelection not entered
					or	GLTransactionDetail within LocalGLTransactionDetailGroupSelection)
						invoke Create FileCreationRecord
							invoked.FinanceEnterpriseGroup		= FinanceEnterpriseGroupPrm
							invoked.FileCreationSetup	= FileCreationSetupPrm
							invoked.Key1				= GLTransactionDetail
							invoked.SystemTimeStamp		= EndTimeStamp
							invoked.EffectiveDate		= system current corporate date
							invoked.Status				= 1
#endif					
