BudgetTemplate is a BusinessClass
	owned by GeneralLedger
	prefix is BUDT
	representative text is "<BudgetTemplate>-<Description>"   
   
    Ontology
    	symbolic key is BudgetTemplate

    Persistent Fields
        Description
        BudgetPeriodType					is Numeric size 1 
			States
				Year		    value is 1
				Quarter		    value is 2
				Month		    value is 3
		PeriodToDate						is Numeric size 1
			States
				Period			value is 0
				YearToDate		value is 1
				LifeToDate		value is 2
				Total			value is 3
		BudgetYearRange
		UseCurrency
        Status								is Numeric size 1
			States
				NotReady		value is 0
				Processing		value is 1
				Ready			value is 2
				Clearing		value is 3
				NeedsCleanup	value is 4			
		LazyActivation						is Boolean
			default label is "SelectiveBudgetGroupsGenerationOnActivate" 
		PreviousStatus						is Numeric size 1
		
		Tolerance							is Percent size 5.2
			default label is "PercentageTolerance"
		ToleranceAmount						is an InternationalAmount
			default label is "AmountTolerance"
			precision is 2    
		ToleranceOption						is Numeric size 1
			default label is "ToleranceOption"
			States
				Percentage		value is 0
				Amount			value is 1
		
		LogBudgetTotals						is Boolean
		AddingPendingLazyGroups				is Boolean
		LazyStage							is Numeric size 8

		AccountChartSection					is Numeric size 1
			States
				IncomeStatement	value is 0
				BalanceSheet	value is 1
				Both			value is 2

        PostingAccountingEntity				is Boolean
        PostingAccountingUnit				is Boolean
        PostingAccount        				is Boolean
        PostingProject						is Boolean
        PostingDimension1        			is Boolean
        PostingDimension2        			is Boolean
        PostingDimension3        			is Boolean
        PostingDimension4        			is Boolean
        PostingDimension5        			is Boolean
        PostingDimension6        			is Boolean
        PostingDimension7        			is Boolean
        PostingDimension8        			is Boolean
        PostingDimension9        			is Boolean
        PostingDimension10        			is Boolean
        ManualAccountingUnit				is Boolean
        ManualAccount        				is Boolean
        ManualProject						is Boolean
        ManualDimension1        			is Boolean
        ManualDimension2        			is Boolean
        ManualDimension3        			is Boolean
        ManualDimension4        			is Boolean
        ManualDimension5        			is Boolean
        ManualDimension6        			is Boolean
        ManualDimension7        			is Boolean
        ManualDimension8        			is Boolean
        ManualDimension9        			is Boolean
        ManualDimension10        			is Boolean
        AccountingUnitIdentifier			is a BudgetIdentifier
        AccountIdentifier					is a BudgetIdentifier
        ProjectIdentifier					is a BudgetIdentifier
        Dimension1Identifier				is a BudgetIdentifier
        Dimension2Identifier				is a BudgetIdentifier
        Dimension3Identifier				is a BudgetIdentifier
        Dimension4Identifier				is a BudgetIdentifier
        Dimension5Identifier				is a BudgetIdentifier
        Dimension6Identifier				is a BudgetIdentifier
        Dimension7Identifier				is a BudgetIdentifier
        Dimension8Identifier				is a BudgetIdentifier
        Dimension9Identifier				is a BudgetIdentifier
        Dimension10Identifier				is a BudgetIdentifier
        PrimaryAccountingEntity				is Boolean
        PrimaryAccountingUnit				is Boolean
        PrimaryProject						is Boolean
        PrimaryDimension1        			is Boolean
        PrimaryDimension2        			is Boolean
        PrimaryDimension3        			is Boolean
        PrimaryDimension4        			is Boolean
        PrimaryDimension5        			is Boolean
        PrimaryDimension6        			is Boolean
        PrimaryDimension7        			is Boolean
        PrimaryDimension8        			is Boolean
        PrimaryDimension9        			is Boolean
        PrimaryDimension10        			is Boolean
        
        HasRecalculate	        			is Boolean
        
        Rebuild								is a BudgetRebuildFlags
        
        NeedsCleanupGroupTotals				is Boolean
        NeedsCleanupCube					is Boolean
        
		ErrorCheckTime						is TimeStamp
		CheckingForErrors					is Boolean
		
		EditBlanks							is Boolean
		
		AccountSection						is Numeric 1
		
		CheckGroups							is Boolean
		CheckThreshold						is Percent 8.4
		
		NextGroup							is Numeric 12
		


	Local Fields
		NumberOfClusters					is Numeric 3
		UseSparse							is Boolean
		InForeground						is Boolean
		BackgroundGroup						is AlphaUpper 200
		OldBackgroundGroup					is AlphaUpper 200
		AccountCluster						is Numeric size  3
		TrialAccountSection					is Numeric 1
		
		Generated							is a BudgetCodeBlock


		ProcessingRecalculate				is Boolean
		BudgetTemplatePending
		BudgetTemplateRecalculate
		BudgetTemplateRemove
		BudgetTemplateManual
		BudgetTemplateGroupTotal
		NextAmount							is an InternationalAmount
		GeneralLedgerSystemCode
		LocalClosePeriod					is a GeneralLedgerClosePeriod
		LocalJournalControl					is a GeneralLedgerJournalControl
		AsyncId								is a AsyncActionRequest
		GroupAsyncId						is a AsyncActionRequest
		BudgetGroupCounter					is Numeric size 4
		BudgetGroupView						is a BudgetGroup view
		Counter 							is Numeric size  9
		ClusterCounter 						is Numeric size  3
		Cluster								is Numeric size  3
		LocalBudgetEditGroup				is UniqueID
		LocalHeaderID						is UniqueID
		EditMode							is a BudgetEditMode
		EditTotalsProcessing				is a BudgetEditTotalsProcessing
		BudgetEditError
		BudgetEditErrorView					is a BudgetEditError view
		BudgetEditCounter					is Numeric 9
		IsBudgetChangeError					is Boolean
		TransactionAmount					is a CurrencyAmount 
		TransactionCurrency					is a Currency
		PostingDate							is Date
		TransactionCodeBlock				is a BudgetLazyCodeBlock	
		GroupBudgetCodeBlock				is a BudgetCodeBlock
		LocalDate							is Date
		LocalEndDate						is AlphaUpper 20 
		LocalAlphaDay						is Alpha 3
		LocalAlphaYear						is Alpha 4
		LocalJulianDate						is Alpha 7
		LocalBudgetCalendar					is a GeneralLedgerCalendar
		CodeBlockDimensionType
		BudgetTemplateMember
		BudgetGroup
		GeneralLedgerCalendarPeriod
		GeneralLedgerCalendarYear
		LocalYearStartJulian				is Alpha size 7
		LocalYearEndJulian					is Alpha size 7
		PendingCommitmentAmount				is a TotalAmount
		BudgetAmount						is a TotalAmount
		PendingBudgetAmount					is a TotalAmount
		CommitmentAmount					is a TotalAmount
		FutureCommitment					is a TotalAmount
		AdjustedBudgetAmount				is a TotalAmount
		ChangeAmount						is an InternationalAmount
		Temporary							is an InternationalAmount
		TemporaryPeriod						is AlphaUpper 20 
		FutureCommitmentPeriod				is AlphaUpper 20 
		NextPeriod							is AlphaUpper 20 
		BudgetGroupAmount
		BudgetGroupTotal
		BudgetGroupCheck
		ContinueLookup						is Boolean
		LocalBudgetRateGroup				is a BudgetRateScenarioGroup
		
		GeneralLedgerJournalControlGroup	is a GeneralLedgerJournalControl group
		GLCommitGroup						is a GLCommit group
		LocalBusinessClassGroup				is a BusinessClassGroup
		LocalGroupCondition					is LPLText
		LocalQuote							is Alpha 1
		LocalBusinessClass					is a BusinessClass
		BudgetChangeOrder
		
		ValidationAccount					is a GeneralLedgerChartAccount
		

		LocalParentAccountingUnit			is a AccountingUnit
		LocalParentAccountingEntity			is a AccountingEntity
		LocalPostingAccountingUnit          is a AccountingUnit
		LocalReportingChart					is a ReportingChart	
		LocalParentAccount					is a GeneralLedgerChartAccount
		LocalPostingAccount					is a GeneralLedgerChartAccount
		LocalParentProject					is a Project
		LocalPostingProject					is a Project


		LocalParentDimension1				is a FinanceDimension1
		LocalParentDimension2				is a FinanceDimension2
		LocalParentDimension3				is a FinanceDimension3
		LocalParentDimension4				is a FinanceDimension4
		LocalParentDimension5				is a FinanceDimension5
		LocalParentDimension6				is a FinanceDimension6
		LocalParentDimension7				is a FinanceDimension7
		LocalParentDimension8				is a FinanceDimension8
		LocalParentDimension9				is a FinanceDimension9
		LocalParentDimension10				is a FinanceDimension10
		LocalPostingDimension1              is a FinanceDimension1
		LocalPostingDimension2				is a FinanceDimension2
		LocalPostingDimension3				is a FinanceDimension3
		LocalPostingDimension4				is a FinanceDimension4
		LocalPostingDimension5				is a FinanceDimension5
		LocalPostingDimension6				is a FinanceDimension6
		LocalPostingDimension7				is a FinanceDimension7
		LocalPostingDimension8				is a FinanceDimension8
		LocalPostingDimension9				is a FinanceDimension9
		LocalPostingDimension10				is a FinanceDimension10

		FoundParentAccountingUnit		is a AccountingUnit	
		FoundParentAccount				is a GeneralLedgerChartAccount
		FoundParentProject				is a Project
		FoundParentDimension1			is a FinanceDimension1
		FoundParentDimension2			is a FinanceDimension2
		FoundParentDimension3			is a FinanceDimension3
		FoundParentDimension4			is a FinanceDimension4
		FoundParentDimension5			is a FinanceDimension5
		FoundParentDimension6			is a FinanceDimension6
		FoundParentDimension7			is a FinanceDimension7
		FoundParentDimension8			is a FinanceDimension8
		FoundParentDimension9			is a FinanceDimension9
		FoundParentDimension10			is a FinanceDimension10
		
		FoundOldParentAccountingUnit		is a AccountingUnit	
		FoundOldParentAccount				is a GeneralLedgerChartAccount
		FoundOldParentProject				is a Project
		FoundOldParentDimension1			is a FinanceDimension1
		FoundOldParentDimension2			is a FinanceDimension2
		FoundOldParentDimension3			is a FinanceDimension3
		FoundOldParentDimension4			is a FinanceDimension4
		FoundOldParentDimension5			is a FinanceDimension5
		FoundOldParentDimension6			is a FinanceDimension6
		FoundOldParentDimension7			is a FinanceDimension7
		FoundOldParentDimension8			is a FinanceDimension8
		FoundOldParentDimension9			is a FinanceDimension9
		FoundOldParentDimension10			is a FinanceDimension10
		FoundNewParentAccountingUnit		is a AccountingUnit
		FoundNewParentAccount				is a GeneralLedgerChartAccount
		FoundNewParentProject				is a Project
		FoundNewParentDimension1			is a FinanceDimension1
		FoundNewParentDimension2			is a FinanceDimension2
		FoundNewParentDimension3			is a FinanceDimension3
		FoundNewParentDimension4			is a FinanceDimension4
		FoundNewParentDimension5			is a FinanceDimension5
		FoundNewParentDimension6			is a FinanceDimension6
		FoundNewParentDimension7			is a FinanceDimension7
		FoundNewParentDimension8			is a FinanceDimension8
		FoundNewParentDimension9			is a FinanceDimension9
		FoundNewParentDimension10			is a FinanceDimension10
		
		CurrentManualAccountingUnit			is AlphaUpper size 25 
		LazyInitNeeded						is Boolean 
		SkipPrepareGroup					is Boolean 
		SkipCreateGroup						is Boolean
		IsLazyInitializing					is Boolean
		
		SkipTransactionCheck				is Boolean
		SkipSystemCheck						is Boolean
		RelationName						is Alpha 100
		
		ActionName							is Alpha 100
		ErrorMessage						is Alpha 150
		BusinessClassName					is Alpha 100
		EditContext							is Alpha 256
		BusinessObjectKey					is UniqueID
		LocalTimestamp						is TimeStamp
		PreviousAmount						is a TotalAmount
		IsBatch								is Boolean
		LocalFEG							is Alpha 100 
		LocalKey							is Alpha 100
		ActionCode
		BudgetLazyDocument
		BudgetLazyDocumentView				is a BudgetLazyDocument view
		BudgetGroupLazyInit
		BudgetEditCallBack
		IsNewGroup							is Boolean		
		NewGroupCount						is Numeric 4		
		BudgetLazyPrime
		BudgetTemplateOutput
		LocalGLCommit						is a GLCommit
		FromCurrency
		ExchangeDate
		ToCurrency
		CurrencyTable
		CurrencyExchange
		LocalReverseCommitmentAmount		is Boolean
		LocalDoGroupsInnerAccountingEntity	is like AccountingEntity
		LocalSourceDocument					is BusinessObjectReference
		LocalBypassCreateBudgetGroup		is Boolean
		LocalObligationVarianceRun			is like BudgetGroupObligationVarianceRun
		LocalCluster						is Numeric 3
		LocalNumberOfClusters				is Numeric 3
		LocalStage						is Numeric 8
	Rule Blocks
		CheckElementsInEnabledDimension
			if (config.BypassBudgetDimensionCheck != true)

				if (HasAccountingEntity)
					if (PostingAccountingEntity)
						constraint (AccountingEntitiesInBasisRel exists)
							"NoPosting<FinanceEnterpriseGroup.AccountingEntityLabel>IsIncludedForBudgetEdits"

				if (HasAccountingUnit)
					if (PostingAccountingUnit)
						constraint (PostingAccountingUnitHierarchiesInBasisRel exists)
							"NoPosting<FinanceEnterpriseGroup.AccountingUnitLabel>IsIncludedForBudgetEdits"
					else
					if (AccountingUnitIdentifier entered)

						constraint (SummaryAccountingUnitInBasisRel exists)
							"NoSummary<FinanceEnterpriseGroup.AccountingUnitLabel>IsIncludedForBudgetEdits"		
					else
						constraint (ManualAccountingUnitRel exists)
							"No<FinanceEnterpriseGroup.AccountingUnitLabel>IsAddedForBudgetEdits"

				if (HasAccount)
					if (PostingAccount)
						if (AccountChartSection.Both)
							constraint (PostingAccountsRel exists)
								"NoPosting<FinanceEnterpriseGroup.AccountLabel>IsIncludedForBudgetEdits"
						else
						if (AccountChartSection.IncomeStatement)
							constraint (IncomeStatementPostingAccountsRel exists)
								"NoPosting<FinanceEnterpriseGroup.AccountLabel>IsIncludedForBudgetEdits"
						else
							constraint (BalanceSheetPostingAccountsRel exists)
								"NoPosting<FinanceEnterpriseGroup.AccountLabel>IsIncludedForBudgetEdits"
					else
					if (AccountIdentifier	 entered)
						if (AccountChartSection.Both)
							constraint (SummaryAccountsRel exists)
								"NoSummary<FinanceEnterpriseGroup.AccountLabel>IsIncludedForBudgetEdits"		
						else
						if (AccountChartSection.IncomeStatement)
							constraint (IncomeStatementSummaryAccountsRel exists)
								"NoSummary<FinanceEnterpriseGroup.AccountLabel>IsIncludedForBudgetEdits"
						else
							constraint (BalanceSheetSummaryAccountsRel exists)
								"NoSummary<FinanceEnterpriseGroup.AccountLabel>IsIncludedForBudgetEdits"
					else
						constraint (ManualAccountRel exists)
							"No<FinanceEnterpriseGroup.AccountLabel>IsAddedForBudgetEdits"

				if (HasProject)
					if (PostingProject)
						constraint(PostingProjectsRel exists)
							"NoPosting<FinanceEnterpriseGroup.ProjectLabel>IsIncludedForBudgetEdits"	
					else
					if (ProjectIdentifier	 entered)
						constraint (SummaryProjectsRel exists)
							"NoSummary<FinanceEnterpriseGroup.ProjectLabel>IsIncludedForBudgetEdits"		
					else
						constraint (ManualProjectRel exists)
							"No<FinanceEnterpriseGroup.ProjectLabel>IsAddedForBudgetEdits"

				if (HasDimension1)
					if (PostingDimension1)
						constraint (PostingDimension1Rel exists)
							"NoPosting<FinanceEnterpriseGroup.FinanceDimension1Label>IsIncludedForBudgetEdits"			
					else
					if (Dimension1Identifier entered)
						constraint (SummaryDimension1Rel exists)
							"NoSummary<FinanceEnterpriseGroup.FinanceDimension1Label>IsIncludedForBudgetEdits"		
					else
						constraint (ManualDimension1Rel exists)
							"No<FinanceEnterpriseGroup.FinanceDimension1Label>IsAddedForBudgetEdits"					

				if (HasDimension2)
					if (PostingDimension2)
						constraint (PostingDimension2Rel exists)
							"NoPosting<FinanceEnterpriseGroup.FinanceDimension2Label>IsIncludedForBudgetEdits"			
					else
					if (Dimension2Identifier entered)
						constraint (SummaryDimension2Rel exists)
							"NoSummary<FinanceEnterpriseGroup.FinanceDimension2Label>IsIncludedForBudgetEdits"		
					else
						constraint (ManualDimension2Rel exists)
							"No<FinanceEnterpriseGroup.FinanceDimension2Label>IsAddedForBudgetEdits"			

				if (HasDimension3)
					if (PostingDimension3)
						constraint (PostingDimension3Rel exists)
							"NoPosting<FinanceEnterpriseGroup.FinanceDimension3Label>IsIncludedForBudgetEdits"			
					else
					if (Dimension3Identifier entered)
						constraint (SummaryDimension3Rel exists)
							"NoSummary<FinanceEnterpriseGroup.FinanceDimension3Label>IsIncludedForBudgetEdits"		
					else
						constraint (ManualDimension3Rel exists)
							"No<FinanceEnterpriseGroup.FinanceDimension3Label>IsAddedForBudgetEdits"			

				if (HasDimension4)
					if (PostingDimension4)
						constraint (PostingDimension4Rel exists)
							"NoPosting<FinanceEnterpriseGroup.FinanceDimension4Label>IsIncludedForBudgetEdits"			
					else
					if (Dimension4Identifier entered)
						constraint (SummaryDimension4Rel exists)
							"NoSummary<FinanceEnterpriseGroup.FinanceDimension4Label>IsIncludedForBudgetEdits"		
					else
						constraint (ManualDimension4Rel exists)
							"No<FinanceEnterpriseGroup.FinanceDimension4Label>IsAddedForBudgetEdits"			

				if (HasDimension5)
					if (PostingDimension5)
						constraint (PostingDimension5Rel exists)
							"NoPosting<FinanceEnterpriseGroup.FinanceDimension5Label>IsIncludedForBudgetEdits"			
					else
					if (Dimension5Identifier entered)
						constraint (SummaryDimension5Rel exists)
							"NoSummary<FinanceEnterpriseGroup.FinanceDimension5Label>IsIncludedForBudgetEdits"		
					else
						constraint (ManualDimension5Rel exists)
							"No<FinanceEnterpriseGroup.FinanceDimension5Label>IsAddedForBudgetEdits"			

				if (HasDimension6)
					if (PostingDimension6)
						constraint (PostingDimension6Rel exists)
							"NoPosting<FinanceEnterpriseGroup.FinanceDimension6Label>IsIncludedForBudgetEdits"			
					else
					if (Dimension6Identifier entered)
						constraint (SummaryDimension6Rel exists)
							"NoSummary<FinanceEnterpriseGroup.FinanceDimension6Label>IsIncludedForBudgetEdits"		
					else
						constraint (ManualDimension6Rel exists)
							"No<FinanceEnterpriseGroup.FinanceDimension6Label>IsAddedForBudgetEdits"

				if (HasDimension7)
					if (PostingDimension7)
						constraint (PostingDimension7Rel exists)
							"NoPosting<FinanceEnterpriseGroup.FinanceDimension7Label>IsIncludedForBudgetEdits"	
					else
					if (Dimension7Identifier entered)
						constraint (SummaryDimension7Rel exists)
							"NoSummary<FinanceEnterpriseGroup.FinanceDimension7Label>IsIncludedForBudgetEdits"		
					else
						constraint (ManualDimension7Rel exists)
							"No<FinanceEnterpriseGroup.FinanceDimension7Label>IsAddedForBudgetEdits"

				if (HasDimension8)
					if (PostingDimension8)
						constraint (PostingDimension8Rel exists)
							"NoPosting<FinanceEnterpriseGroup.FinanceDimension8Label>IsIncludedForBudgetEdits"	
					else
					if (Dimension8Identifier entered)
						constraint (SummaryDimension8Rel exists)
							"NoSummary<FinanceEnterpriseGroup.FinanceDimension8Label>IsIncludedForBudgetEdits"
					else
						constraint (ManualDimension8Rel exists)
							"No<FinanceEnterpriseGroup.FinanceDimension8Label>IsAddedForBudgetEdits"

				if (HasDimension9)
					if (PostingDimension9)
						constraint (PostingDimension9Rel exists)
							"NoPosting<FinanceEnterpriseGroup.FinanceDimension9Label>IsIncludedForBudgetEdits"			
					else
					if (Dimension9Identifier entered)
						constraint (SummaryDimension9Rel exists)
							"NoSummary<FinanceEnterpriseGroup.FinanceDimension9Label>IsIncludedForBudgetEdits"
					else
						constraint (ManualDimension9Rel exists)
							"No<FinanceEnterpriseGroup.FinanceDimension9Label>IsAddedForBudgetEdits"

				if (HasDimension10)
					if (PostingDimension10)
						constraint (PostingDimension10Rel exists)
							"NoPosting<FinanceEnterpriseGroup.FinanceDimension10Label>IsIncludedForBudgetEdits"
					else
					if (Dimension10Identifier entered)
						constraint (SummaryDimension10Rel exists)
							"NoSummary<FinanceEnterpriseGroup.FinanceDimension10Label>IsIncludedForBudgetEdits"
					else
						constraint (ManualDimension10Rel exists)
							"No<FinanceEnterpriseGroup.FinanceDimension10Label>IsAddedForBudgetEdits"

		SetGroupTotal
			PreviousAmount						= BudgetGroupTotal.Amount

			invoke Update BudgetGroupTotal
		        invoked.BusinessClassName		= "BudgetTemplate"
				if (LocalReverseCommitmentAmount)



					if (ProcessingRecalculate)
						invoked.EditContext		= "ProcessPendingRecalculateExcludeUndistributedRetainedEarning"
					else
			        	invoked.EditContext		= "Activate/ProcessPendingExcludeUndistributedRetainedEarning"
					invoked.IncrementAmount		= NextAmount
					invoked.Amount				+= NextAmount
				else
					invoked.EditContext			= EditContext
					invoked.IncrementAmount		= 0
			        invoked.Amount				= NextAmount
		        invoked.PreviousAmount			= PreviousAmount
		        
		        
		        
		IncrementTemplateTotal
			PreviousAmount						= BudgetGroupTotal.Amount

			if (BusinessClassName not entered)
				BusinessClassName				= "BudgetTemplate"
			invoke Update BudgetGroupTotal
		        invoked.BusinessClassName		= BusinessClassName
		        invoked.EditContext				= EditContext
				invoked.IncrementAmount			= NextAmount
		        invoked.Amount					+= NextAmount
		        invoked.PreviousAmount			= PreviousAmount

		CreateOrUpdateRules
			if (!HasAccount)
				AccountChartSection = AccountChartSection.IncomeStatement
			initialize Counter
			initialize PrimaryAccountingEntity
			initialize PrimaryAccountingUnit
			initialize PrimaryProject
			initialize PrimaryDimension1
			initialize PrimaryDimension2
			initialize PrimaryDimension3
			initialize PrimaryDimension4
			initialize PrimaryDimension5
			initialize PrimaryDimension6
			initialize PrimaryDimension7
			initialize PrimaryDimension8
			initialize PrimaryDimension9
			initialize PrimaryDimension10
			if (HasAccountingUnit)
				PrimaryAccountingUnit = true
				Counter += 1
			else
			if (HasAccountingEntity)
				PrimaryAccountingEntity = true
				Counter += 1
			else
			if (HasProject)
				PrimaryProject = true
				Counter += 1
			else
			if (HasDimension1)
				PrimaryDimension1 = true
				Counter += 1
			else
			if (HasDimension2)
				PrimaryDimension2 = true
				Counter += 1
			else
			if (HasDimension3)
				PrimaryDimension3 = true
				Counter += 1
			else
			if (HasDimension4)
				PrimaryDimension4 = true
				Counter += 1
			else
			if (HasDimension5)
				PrimaryDimension5 = true
				Counter += 1
			else
			if (HasDimension6)
				PrimaryDimension6 = true
				Counter += 1
			else
			if (HasDimension7)
				PrimaryDimension7 = true
				Counter += 1
			else
			if (HasDimension8)
				PrimaryDimension8 = true
				Counter += 1
			else
			if (HasDimension9)
				PrimaryDimension9 = true
				Counter += 1
			else
			if (HasDimension10)
				PrimaryDimension10 = true
				Counter += 1
			constraint (Counter = 1)
				"MustSpecifyPostingOrManualOrSummaryIdentifierForAtLeastOneDimensionInAdditionToAccount"
			if (UseCurrency.EntityFunctional)



				constraint (HasAccountingUnit
				or HasAccountingEntity)
					"MustSpecifyEitherAccountingUnitOrAccountingEntityBecauseOfBudgetCurrency<UseCurrency>"
		CheckIfBatchEditsAreCompleted
			if (AreBatchEditsRunning)
				confirmation required
					"ThereAreBatchEditsWhichAreReferencedByThisFinanceEnterpriseGroupAndHaveStartedAndNotCompleted._ProceedOnlyIfNoneAreCurrentlyRunning"
		NextItemCreated
			if (!InForeground)
				Counter = Counter + 1
				if (Counter = 100)


					invoke CommitTransaction
					Counter = 0
		NextItemProcessed
			if (!InForeground)
				Counter = Counter + 1
				if (Counter = 300)

					invoke CommitTransaction
					Counter = 0
		GetGroupAmount
			initialize CommitmentAmount
			if (UseCurrency.EntityFunctional)
				CommitmentAmount		= each.NetFunctionalAmount
			else
			if (UseCurrency.Project)
				CommitmentAmount		= each.NetProjectAmount
			else
			if (UseCurrency.Report1)
				CommitmentAmount		= each.NetReportAmount1
			else
			if (UseCurrency.Report2)
				CommitmentAmount		= each.NetReportAmount2
			else
			if (UseCurrency.Report3)
				CommitmentAmount		= each.NetReportAmount3
			else
			if (UseCurrency.Report4)
				CommitmentAmount		= each.NetReportAmount4
			else
			if (UseCurrency.Report5)
				CommitmentAmount		= each.NetReportAmount5

			if (LocalReverseCommitmentAmount)			
				CommitmentAmount		= CommitmentAmount * -1










		SetPendingStates
			if (HasAccountingUnit and PendingAccountingUnitsRel exists)
				Rebuild.HasPendingAccountingUnit = true
				Rebuild.HasPending = true
			if (HasAccount and PendingAccountsRel exists)
				Rebuild.HasPendingAccount = true
				Rebuild.HasPending = true
			if (HasProject and PendingProjectsRel exists)
				Rebuild.HasPendingProject = true
				Rebuild.HasPending = true
			if (HasDimension1 and PendingDimension1Rel exists)
				Rebuild.HasPendingDimension1 = true
				Rebuild.HasPending = true
			if (HasDimension2 and PendingDimension2Rel exists)
				Rebuild.HasPendingDimension2 = true
				Rebuild.HasPending = true
			if (HasDimension3 and PendingDimension3Rel exists)
				Rebuild.HasPendingDimension3 = true
				Rebuild.HasPending = true
			if (HasDimension4 and PendingDimension4Rel exists)
				Rebuild.HasPendingDimension4 = true
				Rebuild.HasPending = true
			if (HasDimension5 and PendingDimension5Rel exists)
				Rebuild.HasPendingDimension5 = true
				Rebuild.HasPending = true
			if (HasDimension6 and PendingDimension6Rel exists)
				Rebuild.HasPendingDimension6 = true
				Rebuild.HasPending = true
			if (HasDimension7 and PendingDimension7Rel exists)
				Rebuild.HasPendingDimension7 = true
				Rebuild.HasPending = true
			if (HasDimension8 and PendingDimension8Rel exists)
				Rebuild.HasPendingDimension8 = true
				Rebuild.HasPending = true
			if (HasDimension9 and PendingDimension9Rel exists)
				Rebuild.HasPendingDimension9 = true
				Rebuild.HasPending = true
			if (HasDimension10 and PendingDimension10Rel exists)
				Rebuild.HasPendingDimension10 = true
				Rebuild.HasPending = true
		SetPendingManualStates
			if (HasAccountingUnit and NotProcessedManualAccountingUnitsRel exists)
				Rebuild.HasPendingManualAccountingUnit = true
				Rebuild.HasPendingManual = true
			if (HasAccount and NotProcessedManualAccountsRel exists)
				Rebuild.HasPendingManualAccount = true
				Rebuild.HasPendingManual = true
			if (HasProject and NotProcessedManualProjectsRel exists)
				Rebuild.HasPendingManualProject = true
				Rebuild.HasPendingManual = true
			if (HasDimension1 and NotProcessedManualDimension1Rel exists)
				Rebuild.HasPendingManualDimension1 = true
				Rebuild.HasPendingManual = true
			if (HasDimension2 and NotProcessedManualDimension2Rel exists)
				Rebuild.HasPendingManualDimension2 = true
				Rebuild.HasPendingManual = true
			if (HasDimension3 and NotProcessedManualDimension3Rel exists)
				Rebuild.HasPendingManualDimension3 = true
				Rebuild.HasPendingManual = true
			if (HasDimension4 and NotProcessedManualDimension4Rel exists)
				Rebuild.HasPendingManualDimension4 = true
				Rebuild.HasPendingManual = true
			if (HasDimension5 and NotProcessedManualDimension5Rel exists)
				Rebuild.HasPendingManualDimension5 = true
				Rebuild.HasPendingManual = true
			if (HasDimension6 and NotProcessedManualDimension6Rel exists)
				Rebuild.HasPendingManualDimension6 = true
				Rebuild.HasPendingManual = true
			if (HasDimension7 and NotProcessedManualDimension7Rel exists)
				Rebuild.HasPendingManualDimension7 = true
				Rebuild.HasPendingManual = true
			if (HasDimension8 and NotProcessedManualDimension8Rel exists)
				Rebuild.HasPendingManualDimension8 = true
				Rebuild.HasPendingManual = true
			if (HasDimension9 and NotProcessedManualDimension9Rel exists)
				Rebuild.HasPendingManualDimension9 = true
				Rebuild.HasPendingManual = true
			if (HasDimension10 and NotProcessedManualDimension10Rel exists)
				Rebuild.HasPendingManualDimension10 = true
				Rebuild.HasPendingManual = true
		SetPendingRecalculateStates
			if (HasAccountingUnit and PendingRecalculateAccountingUnitsRel exists)
				Rebuild.HasRecalculateAccountingUnit = true
				Rebuild.HasRecalculate = true
			if (HasAccount and PendingRecalculateAccountsRel exists)
				Rebuild.HasRecalculateAccount = true
				Rebuild.HasRecalculate = true
			if (HasProject and PendingRecalculateProjectsRel exists)
				Rebuild.HasRecalculateProject = true
				Rebuild.HasRecalculate = true
			if (HasDimension1 and PendingRecalculateDimension1Rel exists)
				Rebuild.HasRecalculateDimension1 = true
				Rebuild.HasRecalculate = true
			if (HasDimension2 and PendingRecalculateDimension2Rel exists)
				Rebuild.HasRecalculateDimension2 = true
				Rebuild.HasRecalculate = true
			if (HasDimension3 and PendingRecalculateDimension3Rel exists)
				Rebuild.HasRecalculateDimension3 = true
				Rebuild.HasRecalculate = true
			if (HasDimension4 and PendingRecalculateDimension4Rel exists)
				Rebuild.HasRecalculateDimension4 = true
				Rebuild.HasRecalculate = true
			if (HasDimension5 and PendingRecalculateDimension5Rel exists)
				Rebuild.HasRecalculateDimension5 = true
				Rebuild.HasRecalculate = true
			if (HasDimension6 and PendingRecalculateDimension6Rel exists)
				Rebuild.HasRecalculateDimension6 = true
				Rebuild.HasRecalculate = true
			if (HasDimension7 and PendingRecalculateDimension7Rel exists)
				Rebuild.HasRecalculateDimension7 = true
				Rebuild.HasRecalculate = true
			if (HasDimension8 and PendingRecalculateDimension8Rel exists)
				Rebuild.HasRecalculateDimension8 = true
				Rebuild.HasRecalculate = true
			if (HasDimension9 and PendingRecalculateDimension9Rel exists)
				Rebuild.HasRecalculateDimension9 = true
				Rebuild.HasRecalculate = true
			if (HasDimension10 and PendingRecalculateDimension10Rel exists)
				Rebuild.HasRecalculateDimension10 = true
				Rebuild.HasRecalculate = true

		CheckIfContinue
			ContinueLookup = true

			if (BudgetTemplatePending entered)
				LocalParentAccountingEntity		= Generated.AccountingEntity
				LocalParentAccountingUnit		= each.GeneralLedgerTotal.AccountingUnit
				LocalParentAccount				= each.GeneralLedgerTotal.GeneralLedgerChartAccount
				LocalParentProject				= each.GeneralLedgerTotal.Project
				LocalParentDimension1			= each.FinanceDimension1
				LocalParentDimension2			= each.FinanceDimension2
				LocalParentDimension3			= each.FinanceDimension3
				LocalParentDimension4			= each.FinanceDimension4
				LocalParentDimension5			= each.FinanceDimension5
				LocalParentDimension6			= each.FinanceDimension6
				LocalParentDimension7			= each.FinanceDimension7
				LocalParentDimension8			= each.FinanceDimension8
				LocalParentDimension9			= each.FinanceDimension9
				LocalParentDimension10			= each.FinanceDimension10


				if (ContinueLookup and Rebuild.HasPendingAccountingUnit 
				and PendingContainingLocalParentAccountingUnitRel exists
				and PendingContainingLocalParentAccountingUnitRel.AccountingUnit != BudgetTemplatePending.AccountingUnit
				and PendingContainingLocalParentAccountingUnitRel.AccountingEntity != BudgetTemplatePending.AccountingEntity
				and !PendingContainingLocalParentAccountingUnitRel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingAccount 
				and PendingContainingLocalParentAccountRel exists
				and PendingContainingLocalParentAccountRel.GeneralLedgerChartAccount != BudgetTemplatePending.GeneralLedgerChartAccount
				and !PendingContainingLocalParentAccountRel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingProject 
				and PendingContainingLocalParentProjectRel exists
				and PendingContainingLocalParentProjectRel.Project != BudgetTemplatePending.Project
				and !PendingContainingLocalParentProjectRel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingDimension1 
				and PendingContainingLocalParentDimension1Rel exists 
				and PendingContainingLocalParentDimension1Rel.FinanceDimension1 != BudgetTemplatePending.FinanceDimension1
				and !PendingContainingLocalParentDimension1Rel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingDimension2 
				and PendingContainingLocalParentDimension2Rel exists 
				and PendingContainingLocalParentDimension2Rel.FinanceDimension2 != BudgetTemplatePending.FinanceDimension2
				and !PendingContainingLocalParentDimension2Rel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingDimension3 
				and PendingContainingLocalParentDimension3Rel exists 
				and PendingContainingLocalParentDimension3Rel.FinanceDimension3 != BudgetTemplatePending.FinanceDimension3
				and !PendingContainingLocalParentDimension3Rel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingDimension4 
				and PendingContainingLocalParentDimension4Rel exists 
				and PendingContainingLocalParentDimension4Rel.FinanceDimension4 != BudgetTemplatePending.FinanceDimension4
				and !PendingContainingLocalParentDimension4Rel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingDimension5 
				and PendingContainingLocalParentDimension5Rel exists 
				and PendingContainingLocalParentDimension5Rel.FinanceDimension5 != BudgetTemplatePending.FinanceDimension5
				and !PendingContainingLocalParentDimension5Rel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingDimension6 
				and PendingContainingLocalParentDimension6Rel exists 
				and PendingContainingLocalParentDimension6Rel.FinanceDimension6 != BudgetTemplatePending.FinanceDimension6
				and !PendingContainingLocalParentDimension6Rel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingDimension7 
				and PendingContainingLocalParentDimension7Rel exists 
				and PendingContainingLocalParentDimension7Rel.FinanceDimension7 != BudgetTemplatePending.FinanceDimension7
				and !PendingContainingLocalParentDimension7Rel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingDimension8 
				and PendingContainingLocalParentDimension8Rel exists 
				and PendingContainingLocalParentDimension8Rel.FinanceDimension8 != BudgetTemplatePending.FinanceDimension8
				and !PendingContainingLocalParentDimension8Rel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingDimension9 
				and PendingContainingLocalParentDimension9Rel exists 
				and PendingContainingLocalParentDimension9Rel.FinanceDimension9 != BudgetTemplatePending.FinanceDimension9
				and !PendingContainingLocalParentDimension9Rel.Processed)
					ContinueLookup = false
				if (ContinueLookup and Rebuild.HasPendingDimension10 
				and PendingContainingLocalParentDimension10Rel exists 
				and PendingContainingLocalParentDimension10Rel.FinanceDimension10 != BudgetTemplatePending.FinanceDimension10
				and !PendingContainingLocalParentDimension10Rel.Processed)
					ContinueLookup = false
		CreateBudgetGroup
			if (!InForeground)
				initialize Cluster
				if (CommitmentAmount entered
				and UseSparse
				and NumberOfClusters > 0)
					Cluster = ClusterCounter

					increment ClusterCounter
					if (ClusterCounter > NumberOfClusters)
						ClusterCounter = 1

			invoke Create BudgetGroup
				assign result to BudgetGroupView

				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.Cluster					= Cluster
				if (UseSparse
				and CommitmentAmount entered)
					invoked.RecalculateTotals	= true
				if (HasAccountingUnitOrHasAccountingEntity)
					invoked.AccountingEntity		= each.AccountingEntity
				if (HasAccountingUnit)
					invoked.AccountingUnit			= each.GeneralLedgerTotal.AccountingUnit
				if (HasAccount)
					invoked.GeneralLedgerChartAccount= each.GeneralLedgerTotal.GeneralLedgerChartAccount



					
				if (HasProject)
					invoked.Project					= each.GeneralLedgerTotal.Project
				if (HasDimension1)
					invoked.FinanceDimension1		= each.FinanceDimension1
				if (HasDimension2)
					invoked.FinanceDimension2		= each.FinanceDimension2
				if (HasDimension3)
					invoked.FinanceDimension3		= each.FinanceDimension3
				if (HasDimension4)
					invoked.FinanceDimension4		= each.FinanceDimension4
				if (HasDimension5)
					invoked.FinanceDimension5		= each.FinanceDimension5
				if (HasDimension6)
					invoked.FinanceDimension6		= each.FinanceDimension6
				if (HasDimension7)
					invoked.FinanceDimension7		= each.FinanceDimension7
				if (HasDimension8)
					invoked.FinanceDimension8		= each.FinanceDimension8
				if (HasDimension9)
					invoked.FinanceDimension9		= each.FinanceDimension9
				if (HasDimension10)
					invoked.FinanceDimension10		= each.FinanceDimension10
			BudgetGroup = BudgetGroupView.BudgetGroup

		IncrementBudgetGroupCounter
			if (!InForeground)
				increment BudgetGroupCounter
				if (BudgetGroupCounter > 100)

					invoke CommitTransaction
					initialize BudgetGroupCounter

		DoGroupsInner
			if (LocalDoGroupsInnerAccountingEntity entered)
				Generated.AccountingEntity		= LocalDoGroupsInnerAccountingEntity
			
			include DoGroupsInnerInternal

			if (UREInBudgetCharAccount)
				if (LocalDoGroupsInnerAccountingEntity entered)
					Generated.AccountingEntity   = LocalDoGroupsInnerAccountingEntity
				
				LocalReverseCommitmentAmount	 = true
				LocalBypassCreateBudgetGroup	 = true
				include DoGroupsInnerInternal	


			if (ProcessingRecalculate)
				initialize Generated

				if (LocalDoGroupsInnerAccountingEntity entered)
					Generated.AccountingEntity		= LocalDoGroupsInnerAccountingEntity

				for each CubeBudgetForAllPeriodsRel
					initialize GroupBudgetCodeBlock
					if (HasAccountingUnitOrHasAccountingEntity)
						GroupBudgetCodeBlock.AccountingEntity			= each.AccountingEntity
					if (HasAccountingUnit)
						GroupBudgetCodeBlock.AccountingUnit				= each.GeneralLedgerTotal.AccountingUnit
					if (HasAccount)
						GroupBudgetCodeBlock.GeneralLedgerChartAccount	= each.GeneralLedgerTotal.GeneralLedgerChartAccount					
					if (HasProject)
						GroupBudgetCodeBlock.Project					= each.GeneralLedgerTotal.Project
					if (HasDimension1)
						GroupBudgetCodeBlock.FinanceDimension1			= each.FinanceDimension1
					if (HasDimension2)
						GroupBudgetCodeBlock.FinanceDimension2			= each.FinanceDimension2
					if (HasDimension3)
						GroupBudgetCodeBlock.FinanceDimension3			= each.FinanceDimension3
					if (HasDimension4)
						GroupBudgetCodeBlock.FinanceDimension4			= each.FinanceDimension4
					if (HasDimension5)
						GroupBudgetCodeBlock.FinanceDimension5			= each.FinanceDimension5
					if (HasDimension6)
						GroupBudgetCodeBlock.FinanceDimension6			= each.FinanceDimension6
					if (HasDimension7)
						GroupBudgetCodeBlock.FinanceDimension7			= each.FinanceDimension7
					if (HasDimension8)
						GroupBudgetCodeBlock.FinanceDimension8			= each.FinanceDimension8
					if (HasDimension9)
						GroupBudgetCodeBlock.FinanceDimension9			= each.FinanceDimension9
					if (HasDimension10)
						GroupBudgetCodeBlock.FinanceDimension10			= each.FinanceDimension10
						
					BudgetGroup = BudgetGroupsFromGroupBudgetCodeBlock.BudgetGroup					
					GeneralLedgerCalendarPeriod	= each.GeneralLedgerTotal.EntityYearPeriod		
							
					if (BudgetGroupAmount exists)
						invoke Delete BudgetGroupAmount
						invoke Create BudgetGroupAmount
							if (BudgetTemplate.UseCurrency.EntityFunctional)
								invoked.Amount = each.NetFunctionalAmount
							else
							if (BudgetTemplate.UseCurrency.Project)
								invoked.Amount = each.NetProjectAmount
							else
							if (BudgetTemplate.UseCurrency.Report1)
								invoked.Amount = each.NetReportAmount1
							else
							if (BudgetTemplate.UseCurrency.Report2)
								invoked.Amount = each.NetReportAmount2
							else
							if (BudgetTemplate.UseCurrency.Report3)
								invoked.Amount = each.NetReportAmount3
							else
							if (BudgetTemplate.UseCurrency.Report4)
								invoked.Amount = each.NetReportAmount4
							else
							if (BudgetTemplate.UseCurrency.Report5)
								invoked.Amount = each.NetReportAmount5
					include IncrementBudgetGroupCounter

				initialize Generated
				initialize GroupBudgetCodeBlock
				initialize BudgetGroup
				initialize GeneralLedgerCalendarPeriod

			initialize LocalReverseCommitmentAmount
			initialize LocalDoGroupsInnerAccountingEntity
			initialize LocalBypassCreateBudgetGroup
			
		DoGroupsInnerInternal
			if (UseSparse)
				ClusterCounter = 1




			for each TemplateRel

				initialize BudgetGroup
				include CheckIfContinue
				include IncrementBudgetGroupCounter
				if (ContinueLookup)
					include GetGroupAmount

					if (UseSparse)
						if (ProcessingRecalculate)
							initialize GroupBudgetCodeBlock
							if (HasAccountingUnitOrHasAccountingEntity)
								GroupBudgetCodeBlock.AccountingEntity			= each.AccountingEntity
							if (HasAccountingUnit)
								GroupBudgetCodeBlock.AccountingUnit				= each.GeneralLedgerTotal.AccountingUnit
							if (HasAccount)
								GroupBudgetCodeBlock.GeneralLedgerChartAccount	= each.GeneralLedgerTotal.GeneralLedgerChartAccount					
							if (HasProject)
								GroupBudgetCodeBlock.Project					= each.GeneralLedgerTotal.Project
							if (HasDimension1)
								GroupBudgetCodeBlock.FinanceDimension1			= each.FinanceDimension1
							if (HasDimension2)
								GroupBudgetCodeBlock.FinanceDimension2			= each.FinanceDimension2
							if (HasDimension3)
								GroupBudgetCodeBlock.FinanceDimension3			= each.FinanceDimension3
							if (HasDimension4)
								GroupBudgetCodeBlock.FinanceDimension4			= each.FinanceDimension4
							if (HasDimension5)
								GroupBudgetCodeBlock.FinanceDimension5			= each.FinanceDimension5
							if (HasDimension6)
								GroupBudgetCodeBlock.FinanceDimension6			= each.FinanceDimension6
							if (HasDimension7)
								GroupBudgetCodeBlock.FinanceDimension7			= each.FinanceDimension7
							if (HasDimension8)
								GroupBudgetCodeBlock.FinanceDimension8			= each.FinanceDimension8
							if (HasDimension9)
								GroupBudgetCodeBlock.FinanceDimension9			= each.FinanceDimension9
							if (HasDimension10)
								GroupBudgetCodeBlock.FinanceDimension10			= each.FinanceDimension10
								
							BudgetGroup = BudgetGroupsFromGroupBudgetCodeBlock.BudgetGroup
							if (BudgetGroup not entered)
								include CreateBudgetGroup
							else
								if (CommitmentAmount entered)
									invoke Update BudgetGroup
										invoked.RecalculateTotals = true
								else												
									for each AllBudgetTotalsRel						
										if (each.Amount entered)
											invoke Update BudgetGroup
												invoked.RecalculateTotals = true
											end for each						
						else
							if (not LocalBypassCreateBudgetGroup)
								include CreateBudgetGroup			
					else
						initialize GroupBudgetCodeBlock
						if (HasAccountingUnitOrHasAccountingEntity)
							GroupBudgetCodeBlock.AccountingEntity			= each.AccountingEntity
						if (HasAccountingUnit)
							GroupBudgetCodeBlock.AccountingUnit				= each.GeneralLedgerTotal.AccountingUnit
						if (HasAccount)
							GroupBudgetCodeBlock.GeneralLedgerChartAccount	= each.GeneralLedgerTotal.GeneralLedgerChartAccount					
						if (HasProject)
							GroupBudgetCodeBlock.Project					= each.GeneralLedgerTotal.Project
						if (HasDimension1)
							GroupBudgetCodeBlock.FinanceDimension1			= each.FinanceDimension1
						if (HasDimension2)
							GroupBudgetCodeBlock.FinanceDimension2			= each.FinanceDimension2
						if (HasDimension3)
							GroupBudgetCodeBlock.FinanceDimension3			= each.FinanceDimension3
						if (HasDimension4)
							GroupBudgetCodeBlock.FinanceDimension4			= each.FinanceDimension4
						if (HasDimension5)
							GroupBudgetCodeBlock.FinanceDimension5			= each.FinanceDimension5
						if (HasDimension6)
							GroupBudgetCodeBlock.FinanceDimension6			= each.FinanceDimension6
						if (HasDimension7)
							GroupBudgetCodeBlock.FinanceDimension7			= each.FinanceDimension7
						if (HasDimension8)
							GroupBudgetCodeBlock.FinanceDimension8			= each.FinanceDimension8
						if (HasDimension9)
							GroupBudgetCodeBlock.FinanceDimension9			= each.FinanceDimension9
						if (HasDimension10)
							GroupBudgetCodeBlock.FinanceDimension10			= each.FinanceDimension10
						BudgetGroup = BudgetGroupsFromGroupBudgetCodeBlock.BudgetGroup
						if (BudgetGroup not entered)

							include CreateBudgetGroup

						if (ProcessingRecalculate) 
							GeneralLedgerCalendarPeriod = each.GeneralLedgerTotal.EntityYearPeriod


							PreviousAmount = BudgetGroupTotal.Amount

							if (CommitmentAmount != 0
							or PreviousAmount != 0) 
								EditContext	= "ProcessPendingRecalculate"
								NextAmount	= CommitmentAmount
								include SetGroupTotal
						else
						if (CommitmentAmount entered)
							GeneralLedgerCalendarPeriod = each.GeneralLedgerTotal.EntityYearPeriod


							EditContext	= "Activate/ProcessPending"
							NextAmount	= CommitmentAmount

							include SetGroupTotal
			initialize Generated
			invoke CommitTransaction
			
		StripeAccount
			LocalParentAccount = each.GeneralLedgerChartAccount
			invoke MarkBudgetSection AccountInStructureRel.ReportingChartAccount
				invoked.PrmSection	= AccountSection
				invoked.PrmCounter  = ClusterCounter
			increment Counter
			increment ClusterCounter
			if (Counter > 100)
				invoke CommitTransaction
				Counter = 1
			if (ClusterCounter > NumberOfClusters)
				ClusterCounter = 1

		ExtractTransactionAmount
			if (UseCurrency.EntityFunctional)
				TransactionAmount = PrmReportAmounts.FunctionalAmount
			else
			if (UseCurrency.Project)
				TransactionAmount = PrmReportAmounts.ProjectAmount
			else
			if (UseCurrency.Report1)
				TransactionAmount = PrmReportAmounts.ReportAmount1
			else
			if (UseCurrency.Report2)
				TransactionAmount = PrmReportAmounts.ReportAmount2
			else
			if (UseCurrency.Report3)
				TransactionAmount = PrmReportAmounts.ReportAmount3
			else
			if (UseCurrency.Report4)
				TransactionAmount = PrmReportAmounts.ReportAmount4
			else
			if (UseCurrency.Report5)
				TransactionAmount = PrmReportAmounts.ReportAmount5
		ExtractDifferenceTransactionAmountForRebuild
			if (UseCurrency.EntityFunctional)
				TransactionAmount = each.LastCurrAmountDiff.FunctionalAmount
			else
			if (UseCurrency.Project)
				TransactionAmount = each.LastCurrAmountDiff.ProjectAmount
			else
			if (UseCurrency.Report1)
				TransactionAmount = each.LastCurrAmountDiff.ReportAmount1
			else
			if (UseCurrency.Report2)
				TransactionAmount = each.LastCurrAmountDiff.ReportAmount2
			else
			if (UseCurrency.Report3)
				TransactionAmount = each.LastCurrAmountDiff.ReportAmount3
			else
			if (UseCurrency.Report4)
				TransactionAmount = each.LastCurrAmountDiff.ReportAmount4
			else
			if (UseCurrency.Report5)
				TransactionAmount = each.LastCurrAmountDiff.ReportAmount5
		ExtractTransactionAmountForRebuild
			if (UseCurrency.EntityFunctional)
				if (each.AccountingEntity = each.FinanceCodeBlock.ToAccountingEntity)
					TransactionAmount = each.ReportCurrencyAmount.FunctionalAmount.EnteredCurrencyAmount
				else
					TransactionAmount = each.ReportCurrencyAmount.ToFunctionalAmount.EnteredCurrencyAmount
			else
			if (UseCurrency.Project)
				TransactionAmount = each.ReportCurrencyAmount.ProjectAmount.EnteredCurrencyAmount
			else
			if (UseCurrency.Report1)
				TransactionAmount = each.ReportCurrencyAmount.ReportAmount1.EnteredCurrencyAmount
			else
			if (UseCurrency.Report2)
				TransactionAmount = each.ReportCurrencyAmount.ReportAmount2.EnteredCurrencyAmount
			else
			if (UseCurrency.Report3)
				TransactionAmount = each.ReportCurrencyAmount.ReportAmount3.EnteredCurrencyAmount
			else
			if (UseCurrency.Report4)
				TransactionAmount = each.ReportCurrencyAmount.ReportAmount4.EnteredCurrencyAmount
			else
			if (UseCurrency.Report5)
				TransactionAmount = each.ReportCurrencyAmount.ReportAmount5.EnteredCurrencyAmount
		UpdateFinanceEnterpriseGroupCurrencyCounter
			if (UseCurrency.EntityFunctional)
				increment FinanceEnterpriseGroupExtRel.EntityFunctionalCounter by Counter
			else
			if (UseCurrency.Project)
				increment FinanceEnterpriseGroupExtRel.ProjectCurrencyCounter by Counter
			else
			if (UseCurrency.Report1)
				increment FinanceEnterpriseGroupExtRel.Report1Counter by Counter
			else
			if (UseCurrency.Report2)
				increment FinanceEnterpriseGroupExtRel.Report2Counter by Counter
			else
			if (UseCurrency.Report3)
				increment FinanceEnterpriseGroupExtRel.Report3Counter by Counter
			else
			if (UseCurrency.Report4)
				increment FinanceEnterpriseGroupExtRel.Report4Counter by Counter
			else
			if (UseCurrency.Report5)
				increment FinanceEnterpriseGroupExtRel.Report5Counter by Counter










		LocalizeParameters
			TransactionCodeBlock 		= PrmTransactionCodeBlock

			LocalDate 					= PrmDate
			LocalEndDate				= PrmEndDate
			TransactionAmount			= PrmAmount

		FindPeriod
			LocalBudgetCalendar			= EditCalendar
			if (LocalEndDate entered)
				GeneralLedgerCalendarPeriod = BudgetPeriodRel.SummaryGeneralLedgerCalendarPeriod
				if (GeneralLedgerCalendarPeriod not exists)
					display "<BudgetTemplate>BudgetTemplateError:NoShadowMappingForEndDate<LocalEndDate>"
					LocalJulianDate			= LocalEndDate
					GeneralLedgerCalendarPeriod	= first GeneralLedgerCalendarPeriodsRel.GeneralLedgerCalendarPeriod
			else
				LocalJulianDate				= JulianDate
				GeneralLedgerCalendarPeriod	= first GeneralLedgerCalendarPeriodsRel.GeneralLedgerCalendarPeriod
			if (GeneralLedgerCalendarPeriod exists
			and BudgetYearRange entered)
				if (GeneralLedgerCalendarPeriod.Year < DerivedStartYear
				or GeneralLedgerCalendarPeriod.Year > DerivedEndYear)

					initialize GeneralLedgerCalendarPeriod
		
		FindGroupAndPeriodInner
			include FindPeriod
			if (GeneralLedgerCalendarPeriod entered)
				include LookupBudgetTemplateMembers
			if (BudgetGroup exists
			and LazyActivation)
				if (BudgetLazyPrimeRel exists)
					if (config.BypassBudgetGroupUpdate != true)
						invoke Update BudgetLazyPrimeRel.BudgetLazyPrime
							invoked.AccessCount				+= 1
							invoked.LastAccessed			= current timestamp
				else
					invoke Create BudgetLazyPrime
						invoked.FinanceEnterpriseGroup	= FinanceEnterpriseGroup

						invoked.FinanceCodeBlock		= TransactionCodeBlock

		FindGroupAndPeriod
			initialize BudgetGroup
			initialize GeneralLedgerCalendarPeriod
			ValidationAccount = TransactionCodeBlock.GeneralLedgerChartAccount


			if (ShouldProcessAccountForTransaction
			and !TransactionCodeBlock.Ledger.CloseLedger
			and LedgerHierarchyForTransactionRel exists
			and AccountingEntityHierarchyForTransactionRel exists)
				include FindGroupAndPeriodInner
			
















					
		ApplyUpdatesToGroupTotalsNoLookups
			ValidationAccount = each.FinanceCodeBlock.GeneralLedgerChartAccount
			if (ShouldProcessAccountForTransaction
			and ShouldIncludeTransaction)
				BudgetTemplateGroupTotal.BudgetEditGroup			= LocalBudgetEditGroup
				BudgetTemplateGroupTotal.BudgetGroup				= BudgetGroup
				BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod= GeneralLedgerCalendarPeriod
				if (PeriodToDate.YearToDate)
					BudgetTemplateGroupTotal.GeneralLedgerCalendarYear	= GeneralLedgerCalendarPeriod.Year
				invoke Update BudgetTemplateGroupTotal
					invoked.Amount += TransactionAmount
					if (LocalSourceDocument entered)
						invoked.OriginatingDocument 				= LocalSourceDocument

		ApplyUpdatesToGroupTotalsInner	
			include FindGroupAndPeriod

			if (BudgetGroup exists
			and GeneralLedgerCalendarPeriod exists
			and ShouldIncludeTransaction)
				BudgetTemplateGroupTotal.BudgetEditGroup			= LocalBudgetEditGroup
				BudgetTemplateGroupTotal.BudgetGroup				= BudgetGroup
				BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod= GeneralLedgerCalendarPeriod
				if (PeriodToDate.YearToDate)
					BudgetTemplateGroupTotal.GeneralLedgerCalendarYear	= GeneralLedgerCalendarPeriod.Year
				invoke Update BudgetTemplateGroupTotal
					invoked.Amount += TransactionAmount
					if (LocalSourceDocument entered)
						invoked.OriginatingDocument 			= LocalSourceDocument

				if (CheckGroups)
					increment BudgetGroupCheck.Count

		ApplyUpdatesToGroupTotals
			ValidationAccount = each.FinanceCodeBlock.GeneralLedgerChartAccount
			if (ShouldProcessAccountForTransaction)
				TransactionCodeBlock = each.FinanceCodeBlock
				include ApplyUpdatesToGroupTotalsInner

		GetAmounts


			constraint (Scenario.Status.Ready)
				"Scenario<Scenario>NotReady"
			LocalJulianDate						= GeneralLedgerCalendarPeriod.StartDateJulian
			LocalBudgetCalendar					= EditCalendar
			include GetCommitmentAmount
			include GetBudgetAmount

		GetAmountsForObligationChange
			include GetAmounts
			PendingCommitmentAmount 			= CommitmentAmount + ChangeAmount + FutureCommitment
			if (ToleranceOption.Percentage)
				AdjustedBudgetAmount			= BudgetAmount*(1.0 + EditTolerance)
			else
				AdjustedBudgetAmount			= BudgetAmount + ToleranceAmount
			display "<BudgetTemplate>CommitmentAmount<CommitmentAmount>"
			display "<BudgetTemplate>FutureCommitmentAmount<FutureCommitment>"
			display "<BudgetTemplate>PendingCommitmentAmount<PendingCommitmentAmount>"
			display "<BudgetTemplate>BudgetAmount<BudgetAmount>"
			display "<BudgetTemplate>AdjustedBudgetAmount<AdjustedBudgetAmount>"

		GetAmountsForBudgetChange
			include GetAmounts
			PendingBudgetAmount 				= BudgetAmount + ChangeAmount
			if (ToleranceOption.Percentage)
				AdjustedBudgetAmount			= PendingBudgetAmount*(1.0 + EditTolerance)
			else
				AdjustedBudgetAmount			= PendingBudgetAmount + ToleranceAmount
			display "<BudgetTemplate>CommitmentAmount<CommitmentAmount>"
			display "<BudgetTemplate>FutureCommitmentAmount<FutureCommitment>"
			display "<BudgetTemplate>BudgetAmount<BudgetAmount>"
			display "<BudgetTemplate>PendingBudgetAmount<PendingBudgetAmount>"
			display "<BudgetTemplate>AdjustedBudgetAmount<AdjustedBudgetAmount>"


		LookupAccountingUnit
			CodeBlockDimensionType						= CodeBlockDimensionType.AccountingUnit
			BudgetTemplateMember						= TransactionAccountingUnitMemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.AccountingUnit			= BudgetTemplateMember.FromAccountingUnit
			GroupBudgetCodeBlock.AccountingEntity		= BudgetTemplateMember.AccountingEntity
			if (BudgetTemplateMember.FromAccountingUnit not entered )
				ContinueLookup							= false
		LookupProject
			CodeBlockDimensionType						= CodeBlockDimensionType.Project
			BudgetTemplateMember						= TransactionProjectMemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.Project				= BudgetTemplateMember.FromProject
			if (BudgetTemplateMember.FromProject not entered )
				ContinueLookup							= false
		LookupAccount
			CodeBlockDimensionType						= CodeBlockDimensionType.Account
			BudgetTemplateMember						= TransactionAccountMemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.GeneralLedgerChartAccount	= BudgetTemplateMember.FromGeneralLedgerChartAccount
			if (BudgetTemplateMember.FromGeneralLedgerChartAccount not entered )
				ContinueLookup							= false
		LookupFinanceDimension1
			CodeBlockDimensionType						= CodeBlockDimensionType.Dimension1
			BudgetTemplateMember						= TransactionDimension1MemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.FinanceDimension1		= BudgetTemplateMember.FromFinanceDimension1
			if (BudgetTemplateMember.FromFinanceDimension1 not entered )
				ContinueLookup							= false
		LookupFinanceDimension2
			CodeBlockDimensionType						= CodeBlockDimensionType.Dimension2
			BudgetTemplateMember						= TransactionDimension2MemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.FinanceDimension2		= BudgetTemplateMember.FromFinanceDimension2
			if (BudgetTemplateMember.FromFinanceDimension2 not entered )
				ContinueLookup							= false
		LookupFinanceDimension3
			CodeBlockDimensionType						= CodeBlockDimensionType.Dimension3
			BudgetTemplateMember						= TransactionDimension3MemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.FinanceDimension3		= BudgetTemplateMember.FromFinanceDimension3
			if (BudgetTemplateMember.FromFinanceDimension3 not entered )
				ContinueLookup							= false
		LookupFinanceDimension4
			CodeBlockDimensionType						= CodeBlockDimensionType.Dimension4
			BudgetTemplateMember						= TransactionDimension4MemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.FinanceDimension4		= BudgetTemplateMember.FromFinanceDimension4
			if (BudgetTemplateMember.FromFinanceDimension4 not entered )
				ContinueLookup							= false
		LookupFinanceDimension5
			CodeBlockDimensionType						= CodeBlockDimensionType.Dimension5
			BudgetTemplateMember						= TransactionDimension5MemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.FinanceDimension5		= BudgetTemplateMember.FromFinanceDimension5
			if (BudgetTemplateMember.FromFinanceDimension5 not entered )
				ContinueLookup							= false
		LookupFinanceDimension6
			CodeBlockDimensionType						= CodeBlockDimensionType.Dimension6
			BudgetTemplateMember						= TransactionDimension6MemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.FinanceDimension6		= BudgetTemplateMember.FromFinanceDimension6
			if (BudgetTemplateMember.FromFinanceDimension6 not entered )
				ContinueLookup							= false
		LookupFinanceDimension7
			CodeBlockDimensionType						= CodeBlockDimensionType.Dimension7
			BudgetTemplateMember						= TransactionDimension7MemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.FinanceDimension7		= BudgetTemplateMember.FromFinanceDimension7
			if (BudgetTemplateMember.FromFinanceDimension7 not entered )
				ContinueLookup							= false
		LookupFinanceDimension8
			CodeBlockDimensionType						= CodeBlockDimensionType.Dimension8
			BudgetTemplateMember						= TransactionDimension8MemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.FinanceDimension8		= BudgetTemplateMember.FromFinanceDimension8
			if (BudgetTemplateMember.FromFinanceDimension8 not entered )
				ContinueLookup							= false
		LookupFinanceDimension9
			CodeBlockDimensionType						= CodeBlockDimensionType.Dimension9
			BudgetTemplateMember						= TransactionDimension9MemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.FinanceDimension9		= BudgetTemplateMember.FromFinanceDimension9
			if (BudgetTemplateMember.FromFinanceDimension9 not entered )
				ContinueLookup							= false
		LookupFinanceDimension10
			CodeBlockDimensionType						= CodeBlockDimensionType.Dimension10
			BudgetTemplateMember						= TransactionDimension10MemberRel.BudgetTemplateMember
			GroupBudgetCodeBlock.FinanceDimension10		= BudgetTemplateMember.FromFinanceDimension10
			if (BudgetTemplateMember.FromFinanceDimension10 not entered )
				ContinueLookup							= false			


		CheckNonRequiredDims
			if (ContinueLookup and  !HasAccountingUnit)
				if (TransactionCodeBlock.AccountingUnit entered)
					if (AccountingUnitShadowTopRel not exists)
			 			ContinueLookup = false

			if (ContinueLookup and  !HasProject)
				if (TransactionCodeBlock.Project entered)
					if (ProjectShadowTopRel not exists)
			 			ContinueLookup = false
			if (ContinueLookup and  !HasDimension1)
				if (TransactionCodeBlock.FinanceDimension1 entered)
					if (Dimension1ShadowTopRel not exists)
			 			ContinueLookup = false
			if (ContinueLookup and  !HasDimension2)
				if (TransactionCodeBlock.FinanceDimension2 entered)
					if (Dimension2ShadowTopRel not exists)
			 			ContinueLookup = false
			if (ContinueLookup and  !HasDimension3)
				if (TransactionCodeBlock.FinanceDimension3 entered)
					if (Dimension3ShadowTopRel not exists)
			 			ContinueLookup = false
			if (ContinueLookup and  !HasDimension4)
				if (TransactionCodeBlock.FinanceDimension4 entered)
					if (Dimension4ShadowTopRel not exists)
			 			ContinueLookup = false
			if (ContinueLookup and  !HasDimension5)
				if (TransactionCodeBlock.FinanceDimension5 entered)
					if (Dimension5ShadowTopRel not exists)
			 			ContinueLookup = false
			if (ContinueLookup and  !HasDimension6)
				if (TransactionCodeBlock.FinanceDimension6 entered)
					if (Dimension6ShadowTopRel not exists)
			 			ContinueLookup = false
			if (ContinueLookup and  !HasDimension7)
				if (TransactionCodeBlock.FinanceDimension7 entered)
					if (Dimension7ShadowTopRel not exists)
			 			ContinueLookup = false
			if (ContinueLookup and  !HasDimension8)
				if (TransactionCodeBlock.FinanceDimension8 entered)
					if (Dimension8ShadowTopRel not exists)
			 			ContinueLookup = false
			if (ContinueLookup and  !HasDimension9)
				if (TransactionCodeBlock.FinanceDimension9 entered)
					if (Dimension9ShadowTopRel not exists)
			 			ContinueLookup = false
			if (ContinueLookup and  !HasDimension10)
				if (TransactionCodeBlock.FinanceDimension10 entered)
					if (Dimension10ShadowTopRel not exists)
			 			ContinueLookup = false
			if (ContinueLookup and  !HasAccount)
				if (TransactionCodeBlock.GeneralLedgerChartAccount entered)
					if (AccountShadowTopRel not exists)
						ContinueLookup = false

		LookupBudgetTemplateMembers
			ContinueLookup	= true
			initialize GroupBudgetCodeBlock
			if (ContinueLookup and HasAccountingUnit)
				if (TransactionCodeBlock.AccountingUnit entered)
					if (PostingAccountingUnit)
						GroupBudgetCodeBlock.AccountingEntity					= TransactionCodeBlock.ToAccountingEntity
						GroupBudgetCodeBlock.AccountingUnit						= TransactionCodeBlock.AccountingUnit
						if (LazyActivation)
							LocalParentAccountingEntity							= GroupBudgetCodeBlock.AccountingEntity
							LocalParentAccountingUnit							= GroupBudgetCodeBlock.AccountingUnit
							if (RemoveContainingLocalParentAccountingUnitRel not exists)
								if (!AccountingUnitInStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentAccountingUnitRel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualAccountingUnit)
						GroupBudgetCodeBlock.AccountingEntity					= TransactionCodeBlock.ToAccountingEntity
						GroupBudgetCodeBlock.AccountingUnit						= TransactionCodeBlock.AccountingUnit
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockAccountingUnitRel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupAccountingUnit
				else
					if (AllowBlankAccountingUnit)
						GroupBudgetCodeBlock.AccountingEntity					= TransactionCodeBlock.ToAccountingEntity
					else
						ContinueLookup = false
			if (ContinueLookup and HasProject)
				if  (TransactionCodeBlock.Project entered)
					if (PostingProject)
						GroupBudgetCodeBlock.Project							= TransactionCodeBlock.Project
						if (LazyActivation)
							LocalParentProject									= TransactionCodeBlock.Project
							if (RemoveContainingLocalParentProjectRel not exists)
								if (!ProjectInStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentProjectRel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualProject)
						GroupBudgetCodeBlock.Project							= TransactionCodeBlock.Project
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockProjectRel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupProject
				else
				if (!AllowBlankProject)
					ContinueLookup = false
			if (ContinueLookup and  HasDimension1)
				if  (TransactionCodeBlock.FinanceDimension1 entered)
					if (PostingDimension1)
						GroupBudgetCodeBlock.FinanceDimension1					= TransactionCodeBlock.FinanceDimension1
						if (LazyActivation)
							LocalParentDimension1								= TransactionCodeBlock.FinanceDimension1
							if (RemoveContainingLocalParentDimension1Rel not exists)
								if (!Dimension1InStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentDimension1Rel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualDimension1)
						GroupBudgetCodeBlock.FinanceDimension1					= TransactionCodeBlock.FinanceDimension1
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockDimension1Rel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupFinanceDimension1
				else
				if (!AllowBlankDimension1)
					ContinueLookup = false
			if (ContinueLookup and  HasDimension2)
				if  (TransactionCodeBlock.FinanceDimension2 entered)
					if (PostingDimension2)
						GroupBudgetCodeBlock.FinanceDimension2					= TransactionCodeBlock.FinanceDimension2
						if (LazyActivation)
							LocalParentDimension2								= TransactionCodeBlock.FinanceDimension2
							if (RemoveContainingLocalParentDimension2Rel not exists)
								if (!Dimension2InStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentDimension2Rel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualDimension2)
						GroupBudgetCodeBlock.FinanceDimension2					= TransactionCodeBlock.FinanceDimension2
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockDimension2Rel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupFinanceDimension2
				else
				if (!AllowBlankDimension2)
					ContinueLookup = false
			if (ContinueLookup and  HasDimension3)
				if  (TransactionCodeBlock.FinanceDimension3 entered)
					if (PostingDimension3)
						GroupBudgetCodeBlock.FinanceDimension3					= TransactionCodeBlock.FinanceDimension3
						if (LazyActivation)
							LocalParentDimension3								= TransactionCodeBlock.FinanceDimension3
							if (RemoveContainingLocalParentDimension3Rel not exists)
								if (!Dimension3InStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentDimension3Rel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualDimension3)
						GroupBudgetCodeBlock.FinanceDimension3					= TransactionCodeBlock.FinanceDimension3
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockDimension3Rel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupFinanceDimension3						
				else
				if (!AllowBlankDimension3)
					ContinueLookup = false
			if (ContinueLookup and  HasDimension4)
				if  (TransactionCodeBlock.FinanceDimension4 entered)
					if (PostingDimension4)
						GroupBudgetCodeBlock.FinanceDimension4					= TransactionCodeBlock.FinanceDimension4
						if (LazyActivation)
							LocalParentDimension4								= TransactionCodeBlock.FinanceDimension4
							if (RemoveContainingLocalParentDimension4Rel not exists)
								if (!Dimension4InStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentDimension4Rel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualDimension4)
						GroupBudgetCodeBlock.FinanceDimension4					= TransactionCodeBlock.FinanceDimension4
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockDimension4Rel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupFinanceDimension4						
				else
				if (!AllowBlankDimension4)
					ContinueLookup = false
			if (ContinueLookup and  HasDimension5)
				if  (TransactionCodeBlock.FinanceDimension5 entered)
					if (PostingDimension5)
						GroupBudgetCodeBlock.FinanceDimension5					= TransactionCodeBlock.FinanceDimension5
						if (LazyActivation)
							LocalParentDimension5								= TransactionCodeBlock.FinanceDimension5
							if (RemoveContainingLocalParentDimension5Rel not exists)
								if (!Dimension5InStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentDimension5Rel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualDimension5)
						GroupBudgetCodeBlock.FinanceDimension5					= TransactionCodeBlock.FinanceDimension5
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockDimension5Rel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupFinanceDimension5						
				else
				if (!AllowBlankDimension5)
					ContinueLookup = false
			if (ContinueLookup and  HasDimension6)
				if  (TransactionCodeBlock.FinanceDimension6 entered)
					if (PostingDimension6)
						GroupBudgetCodeBlock.FinanceDimension6					= TransactionCodeBlock.FinanceDimension6
						if (LazyActivation)
							LocalParentDimension6								= TransactionCodeBlock.FinanceDimension6
							if (RemoveContainingLocalParentDimension6Rel not exists)
								if (!Dimension6InStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentDimension6Rel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualDimension6)
						GroupBudgetCodeBlock.FinanceDimension6					= TransactionCodeBlock.FinanceDimension6
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockDimension6Rel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupFinanceDimension6
				else
				if (!AllowBlankDimension6)
					ContinueLookup = false
			if (ContinueLookup and  HasDimension7)
				if  (TransactionCodeBlock.FinanceDimension7 entered)
					if (PostingDimension7)
						GroupBudgetCodeBlock.FinanceDimension7					= TransactionCodeBlock.FinanceDimension7
						if (LazyActivation)
							LocalParentDimension7							= TransactionCodeBlock.FinanceDimension7
							if (RemoveContainingLocalParentDimension7Rel not exists)
								if (!Dimension7InStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentDimension7Rel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualDimension7)
						GroupBudgetCodeBlock.FinanceDimension7					= TransactionCodeBlock.FinanceDimension7
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockDimension7Rel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupFinanceDimension7						
				else
				if (!AllowBlankDimension7)
					ContinueLookup = false
			if (ContinueLookup and  HasDimension8)
				if  (TransactionCodeBlock.FinanceDimension8 entered)
					if (PostingDimension8)
						GroupBudgetCodeBlock.FinanceDimension8					= TransactionCodeBlock.FinanceDimension8
						if (LazyActivation)
							LocalParentDimension8								= TransactionCodeBlock.FinanceDimension8
							if (RemoveContainingLocalParentDimension8Rel not exists)
								if (!Dimension8InStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentDimension8Rel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualDimension8)
						GroupBudgetCodeBlock.FinanceDimension8					= TransactionCodeBlock.FinanceDimension8
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockDimension8Rel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupFinanceDimension8						
				else
				if (!AllowBlankDimension8)
					ContinueLookup = false
			if (ContinueLookup and  HasDimension9)
				if  (TransactionCodeBlock.FinanceDimension9 entered)
					if (PostingDimension9)
						GroupBudgetCodeBlock.FinanceDimension9					= TransactionCodeBlock.FinanceDimension9
						if (LazyActivation)
							LocalParentDimension9								= TransactionCodeBlock.FinanceDimension9
							if (RemoveContainingLocalParentDimension9Rel not exists)
								if (!Dimension9InStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentDimension9Rel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualDimension9)
						GroupBudgetCodeBlock.FinanceDimension9					= TransactionCodeBlock.FinanceDimension9
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockDimension9Rel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupFinanceDimension9						
				else
				if (!AllowBlankDimension9)
					ContinueLookup = false
			if (ContinueLookup and  HasDimension10)
				if  (TransactionCodeBlock.FinanceDimension10 entered)
					if (PostingDimension10)
						GroupBudgetCodeBlock.FinanceDimension10					= TransactionCodeBlock.FinanceDimension10
						if (LazyActivation)
							LocalParentDimension10								= TransactionCodeBlock.FinanceDimension10
							if (RemoveContainingLocalParentDimension10Rel not exists)
								if (!Dimension10InStructureRel.IncludeInBudgetEdit
								or (PendingContainingLocalParentDimension10Rel exists and !AddingPendingLazyGroups))
									ContinueLookup	= false
					else
					if (ManualDimension10)
						GroupBudgetCodeBlock.FinanceDimension10					= TransactionCodeBlock.FinanceDimension10
						if (LazyActivation)
							BudgetTemplateManual								= ManualContainingTransactionCodeBlockDimension10Rel.BudgetTemplateManual
							if (BudgetTemplateManual exists)
								if (!BudgetTemplateManual.PendingRemove
								and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
									ContinueLookup	= false						
							else					
								ContinueLookup	= false
					else
						include LookupFinanceDimension10						
				else
				if (!AllowBlankDimension10)
					ContinueLookup = false
			if (ContinueLookup and  HasAccountingEntity)
				GroupBudgetCodeBlock.AccountingEntity							= TransactionCodeBlock.ToAccountingEntity
			if (ContinueLookup and  HasAccount)
				if (PostingAccount)
					GroupBudgetCodeBlock.GeneralLedgerChartAccount 				= TransactionCodeBlock.GeneralLedgerChartAccount
					if (LazyActivation)
						LocalParentAccount										= TransactionCodeBlock.GeneralLedgerChartAccount
						if (RemoveContainingLocalParentAccountRel not exists)							
							if (!AccountInStructureRel.IncludeInBudgetEdit
							or (PendingContainingLocalParentAccountRel exists and !AddingPendingLazyGroups))
								ContinueLookup	= false
				else
				if (ManualAccount)
					GroupBudgetCodeBlock.GeneralLedgerChartAccount				= TransactionCodeBlock.GeneralLedgerChartAccount
					if (LazyActivation)
						BudgetTemplateManual									= ManualContainingTransactionCodeBlockAccountRel.BudgetTemplateManual
						if (BudgetTemplateManual exists)
							if (!BudgetTemplateManual.PendingRemove
							and BudgetTemplateManual.Pending and !AddingPendingLazyGroups)
								ContinueLookup	= false
						else					
							ContinueLookup	= false
				else
					include LookupAccount
					
			include CheckNonRequiredDims	
			

			if (ContinueLookup)

				BudgetGroup = BudgetGroupsFromGroupBudgetCodeBlock.BudgetGroup
				if (BudgetGroup not entered
				and LazyActivation
				and !SkipCreateGroup)
					invoke Create BudgetGroup
						assign result to BudgetGroupView
						invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
						invoked.Scenario			 	= Scenario
						invoked.BudgetTemplate		 	= BudgetTemplate
						invoked.AccountingEntity 		= GroupBudgetCodeBlock.AccountingEntity
						invoked.GeneralLedgerChartAccount	= GroupBudgetCodeBlock.GeneralLedgerChartAccount
						invoked.AccountingUnit			= GroupBudgetCodeBlock.AccountingUnit
						invoked.Project					= GroupBudgetCodeBlock.Project
						invoked.FinanceDimension1		= GroupBudgetCodeBlock.FinanceDimension1
						invoked.FinanceDimension2		= GroupBudgetCodeBlock.FinanceDimension2
						invoked.FinanceDimension3		= GroupBudgetCodeBlock.FinanceDimension3
						invoked.FinanceDimension4		= GroupBudgetCodeBlock.FinanceDimension4
						invoked.FinanceDimension5		= GroupBudgetCodeBlock.FinanceDimension5
						invoked.FinanceDimension6		= GroupBudgetCodeBlock.FinanceDimension6
						invoked.FinanceDimension7		= GroupBudgetCodeBlock.FinanceDimension7
						invoked.FinanceDimension8		= GroupBudgetCodeBlock.FinanceDimension8
						invoked.FinanceDimension9		= GroupBudgetCodeBlock.FinanceDimension9
						invoked.FinanceDimension10		= GroupBudgetCodeBlock.FinanceDimension10
						invoked.LazyStage				= LazyStage
					BudgetGroup							= BudgetGroupView.BudgetGroup
					IsNewGroup							= true
					if (!Status.Processing)
						LazyInitNeeded					= true
						SkipPrepareGroup				= false

				else
				if (BudgetGroup entered
				and LazyActivation)
					if (!Status.Processing)
						LazyInitNeeded							= true 
						SkipPrepareGroup						= true


						
		GetBudgetAmount

			if (AllBudgetAmountsRel exist)
				if (PeriodToDate.YearToDate)
					LocalYearStartJulian= first BudgetCalendarYearsContainingLocalJulianDateRel.GeneralLedgerCalendarPeriod.StartDateJulian
					BudgetAmount		= sum YearToDateBudgetAmountsRel.Amount
				else
				if (PeriodToDate.LifeToDate)
					BudgetAmount		= sum LifeToDateBudgetAmountsRel.Amount
				else
				if (PeriodToDate.Total)
					BudgetAmount		= sum AllBudgetAmountsRel.Amount
				else
					BudgetAmount		= BudgetGroupAmount.Amount
			else
				BudgetAmount = BudgetCubeAmount









		GetCommitmentAmount
			if (PeriodToDate.YearToDate)
				LocalYearStartJulian 	= first BudgetCalendarYearsContainingLocalJulianDateRel.GeneralLedgerCalendarPeriod.StartDateJulian
				LocalYearEndJulian 		= last BudgetCalendarYearsContainingLocalJulianDateRel.GeneralLedgerCalendarPeriod.EndDateJulian
				CommitmentAmount		= sum YearToDateBudgetTotalsRel.Amount
				include GetFutureCommitmentAmount
			else
			if (PeriodToDate.LifeToDate)
				CommitmentAmount		= sum LifeToDateBudgetTotalsRel.Amount
				include GetFutureCommitmentAmount
			else
			if (PeriodToDate.Total)
				CommitmentAmount		= sum AllBudgetTotalsRel.Amount
			else
				CommitmentAmount		= BudgetGroupTotal.Amount

		GetFutureCommitmentAmount
			FutureCommitmentPeriod		= GeneralLedgerCalendarPeriod
			FutureCommitment			= 0
			if (!PeriodToDate.Period) 
				for each FutureBudgetTotalsRel
					if (PeriodToDate.YearToDate
					and each.BudgetGroupTotal.GeneralLedgerCalendarPeriod.StartDateJulian > LocalYearEndJulian)

						end for each
					NextPeriod	= each.BudgetGroupTotal.GeneralLedgerCalendarPeriod


					if (AllBudgetAmountsRel exist)
						Temporary		= sum NextBudgetTotalsRel.Amount - sum NextBudgetAmountsRel.Amount






					else

						include GetNextFutureCommitment
					if (Temporary > FutureCommitment)
						FutureCommitment		= Temporary
						FutureCommitmentPeriod	= NextPeriod

		GetNextFutureCommitment

			Temporary 					= sum NextBudgetTotalsRel.Amount
			TemporaryPeriod				= GeneralLedgerCalendarPeriod
			GeneralLedgerCalendarPeriod	= NextPeriod
			Temporary					-= BudgetCubeAmount





			GeneralLedgerCalendarPeriod	= TemporaryPeriod
			Temporary					+= BudgetCubeAmount








		CreateAccountingUnitMember
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.AccountingUnit
				invoked.AccountingEntity	 	= LocalParentAccountingEntity
				invoked.FromAccountingUnit	 	= LocalParentAccountingUnit
				invoked.ToAccountingUnit	 	= LocalPostingAccountingUnit
		CreateProjectMember
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Project
				invoked.FromProject			 	= LocalParentProject
				invoked.ToProject			 	= LocalPostingProject
		CreateAccountMember
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Account
				invoked.FromGeneralLedgerChartAccount	= LocalParentAccount
				invoked.ToGeneralLedgerChartAccount	 	= LocalPostingAccount
		CreateDimension1Member
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension1
				invoked.FromFinanceDimension1	= LocalParentDimension1
				invoked.ToFinanceDimension1	 	= LocalPostingDimension1
		CreateDimension2Member
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension2
				invoked.FromFinanceDimension2	= LocalParentDimension2
				invoked.ToFinanceDimension2	 	= LocalPostingDimension2
		CreateDimension3Member
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension3
				invoked.FromFinanceDimension3	= LocalParentDimension3
				invoked.ToFinanceDimension3	 	= LocalPostingDimension3
		CreateDimension4Member
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension4
				invoked.FromFinanceDimension4	= LocalParentDimension4
				invoked.ToFinanceDimension4	 	= LocalPostingDimension4
		CreateDimension5Member
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension5
				invoked.FromFinanceDimension5	= LocalParentDimension5
				invoked.ToFinanceDimension5	 	= LocalPostingDimension5
		CreateDimension6Member
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension6
				invoked.FromFinanceDimension6	= LocalParentDimension6
				invoked.ToFinanceDimension6	 	= LocalPostingDimension6
		CreateDimension7Member
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension7
				invoked.FromFinanceDimension7	= LocalParentDimension7
				invoked.ToFinanceDimension7	 	= LocalPostingDimension7
		CreateDimension8Member
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension8
				invoked.FromFinanceDimension8	= LocalParentDimension8
				invoked.ToFinanceDimension8	 	= LocalPostingDimension8
		CreateDimension9Member
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension9
				invoked.FromFinanceDimension9	= LocalParentDimension9
				invoked.ToFinanceDimension9	 	= LocalPostingDimension9
		CreateDimension10Member
			invoke Create BudgetTemplateMember
				invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				invoked.Scenario			 	= Scenario
				invoked.BudgetTemplate		 	= BudgetTemplate
				invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension10
				invoked.FromFinanceDimension10	= LocalParentDimension10
				invoked.ToFinanceDimension10	= LocalPostingDimension10

		FixupFromAccountingUnitAfterMove
			if (LocalParentAccountingUnit entered)
				if (PrmAccountingUnit.PostingAccountingUnit)
					LocalPostingAccountingUnit = PrmAccountingUnit
					invoke Delete MatchingBudgetTemplateAccountingUnitMemberRel
				else
					Generated.AccountingEntity	= LocalParentAccountingEntity
					Generated.AccountingUnit	= PrmAccountingUnit
					for each AccountingUnitShadowRel
						LocalPostingAccountingUnit = each.AccountingUnit
						invoke Delete MatchingBudgetTemplateAccountingUnitMemberRel
				include CreateRecalculateAccountingUnit
		FixupToAccountingUnitAfterMove
			if (LocalParentAccountingUnit entered)
				if (PrmAccountingUnit.PostingAccountingUnit)
					LocalPostingAccountingUnit = PrmAccountingUnit
					include CreateAccountingUnitMember
				else
					Generated.AccountingEntity	= LocalParentAccountingEntity
					Generated.AccountingUnit	= PrmAccountingUnit
					for each AccountingUnitShadowRel
						LocalPostingAccountingUnit = each.AccountingUnit
						include CreateAccountingUnitMember
				include CreateRecalculateAccountingUnit
		FixupFromProjectAfterMove
			if (LocalParentProject entered)
				if (PrmProject.IsPostingProject)
					LocalPostingProject = PrmProject
					invoke Delete MatchingBudgetTemplateProjectMemberRel
				else
					Generated.Project	= PrmProject
					for each ProjectShadowRel
						LocalPostingProject = each.Project
						invoke Delete MatchingBudgetTemplateProjectMemberRel
				include CreateRecalculateProject
		FixupToProjectAfterMove
			if (LocalParentProject entered)
				if (PrmProject.IsPostingProject)
					LocalPostingProject = PrmProject
					include CreateProjectMember
				else
					Generated.Project	= PrmProject
					for each ProjectShadowRel
						LocalPostingProject = each.Project
						include CreateProjectMember
				include CreateRecalculateProject
		FixupFromAccountAfterMove
			if (LocalParentAccount entered)
				if (PrmAccount.ChartType.Posting)
					LocalPostingAccount = PrmAccount
					invoke Delete MatchingBudgetTemplateAccountMemberRel
				else
					Generated.GeneralLedgerChartAccount	= PrmAccount
					for each AccountShadowRel
						LocalPostingAccount = each.GeneralLedgerChartAccount
						invoke Delete MatchingBudgetTemplateAccountMemberRel
				include CreateRecalculateAccount
		FixupToAccountAfterMove
			if (LocalParentAccount entered)
				if (PrmAccount.ChartType.Posting)
					LocalPostingAccount = PrmAccount
					include CreateAccountMember
				else
					Generated.GeneralLedgerChartAccount	= PrmAccount
					for each AccountShadowRel
						LocalPostingAccount = each.GeneralLedgerChartAccount
						include CreateAccountMember
				include CreateRecalculateAccount
		FixupFromDimension1AfterMove
			if (LocalParentDimension1 entered)
				if (PrmFinanceDimension1.PostingDimension)
					LocalPostingDimension1 = PrmFinanceDimension1
					invoke Delete MatchingBudgetTemplateDimension1MemberRel
				else
					Generated.FinanceDimension1	= PrmFinanceDimension1
					for each Dimension1ShadowRel
						LocalPostingDimension1 = each.FinanceDimension1
						invoke Delete MatchingBudgetTemplateDimension1MemberRel
				include CreateRecalculateDimension1
		FixupToDimension1AfterMove
			if (LocalParentDimension1 entered)
				if (PrmFinanceDimension1.PostingDimension)
					LocalPostingDimension1 = PrmFinanceDimension1
					include CreateDimension1Member
				else
					Generated.FinanceDimension1	= PrmFinanceDimension1
					for each Dimension1ShadowRel
						LocalPostingDimension1 = each.FinanceDimension1
						include CreateDimension1Member
				include CreateRecalculateDimension1
		FixupFromDimension2AfterMove
			if (LocalParentDimension2 entered)
				if (PrmFinanceDimension2.PostingDimension)
					LocalPostingDimension2 = PrmFinanceDimension2
					invoke Delete MatchingBudgetTemplateDimension2MemberRel
				else
					Generated.FinanceDimension2	= PrmFinanceDimension2
					for each Dimension2ShadowRel
						LocalPostingDimension2 = each.FinanceDimension2
						invoke Delete MatchingBudgetTemplateDimension2MemberRel
				include CreateRecalculateDimension2
		FixupToDimension2AfterMove
			if (LocalParentDimension2 entered)
				if (PrmFinanceDimension2.PostingDimension)
					LocalPostingDimension2 = PrmFinanceDimension2
					include CreateDimension2Member
				else
					Generated.FinanceDimension2	= PrmFinanceDimension2
					for each Dimension2ShadowRel
						LocalPostingDimension2 = each.FinanceDimension2
						include CreateDimension2Member
				include CreateRecalculateDimension2
		FixupFromDimension3AfterMove
			if (LocalParentDimension3 entered)
				if (PrmFinanceDimension3.PostingDimension)
					LocalPostingDimension3 = PrmFinanceDimension3
					invoke Delete MatchingBudgetTemplateDimension3MemberRel
				else
					Generated.FinanceDimension3	= PrmFinanceDimension3
					for each Dimension3ShadowRel
						LocalPostingDimension3 = each.FinanceDimension3
						invoke Delete MatchingBudgetTemplateDimension3MemberRel
				include CreateRecalculateDimension3
		FixupToDimension3AfterMove
			if (LocalParentDimension3 entered)
				if (PrmFinanceDimension3.PostingDimension)
					LocalPostingDimension3 = PrmFinanceDimension3
					include CreateDimension3Member
				else
					Generated.FinanceDimension3	= PrmFinanceDimension3
					for each Dimension3ShadowRel
						LocalPostingDimension3 = each.FinanceDimension3
						include CreateDimension3Member
				include CreateRecalculateDimension3
		FixupFromDimension4AfterMove
			if (LocalParentDimension4 entered)
				if (PrmFinanceDimension4.PostingDimension)
					LocalPostingDimension4 = PrmFinanceDimension4
					invoke Delete MatchingBudgetTemplateDimension4MemberRel
				else
					Generated.FinanceDimension4	= PrmFinanceDimension4
					for each Dimension4ShadowRel
						LocalPostingDimension4 = each.FinanceDimension4
						invoke Delete MatchingBudgetTemplateDimension4MemberRel
				include CreateRecalculateDimension4
		FixupToDimension4AfterMove
			if (LocalParentDimension4 entered)
				if (PrmFinanceDimension4.PostingDimension)
					LocalPostingDimension4 = PrmFinanceDimension4
					include CreateDimension4Member
				else
					Generated.FinanceDimension4	= PrmFinanceDimension4
					for each Dimension4ShadowRel
						LocalPostingDimension4 = each.FinanceDimension4
						include CreateDimension4Member
				include CreateRecalculateDimension4
		FixupFromDimension5AfterMove
			if (LocalParentDimension5 entered)
				if (PrmFinanceDimension5.PostingDimension)
					LocalPostingDimension5 = PrmFinanceDimension5
					invoke Delete MatchingBudgetTemplateDimension5MemberRel
				else
					Generated.FinanceDimension5	= PrmFinanceDimension5
					for each Dimension5ShadowRel
						LocalPostingDimension5 = each.FinanceDimension5
						invoke Delete MatchingBudgetTemplateDimension5MemberRel
				include CreateRecalculateDimension5
		FixupToDimension5AfterMove
			if (LocalParentDimension5 entered)
				if (PrmFinanceDimension5.PostingDimension)
					LocalPostingDimension5 = PrmFinanceDimension5
					include CreateDimension5Member
				else
					Generated.FinanceDimension5	= PrmFinanceDimension5
					for each Dimension5ShadowRel
						LocalPostingDimension5 = each.FinanceDimension5
						include CreateDimension5Member
				include CreateRecalculateDimension5
		FixupFromDimension6AfterMove
			if (LocalParentDimension6 entered)
				if (PrmFinanceDimension6.PostingDimension)
					LocalPostingDimension6 = PrmFinanceDimension6
					invoke Delete MatchingBudgetTemplateDimension6MemberRel
				else
					Generated.FinanceDimension6	= PrmFinanceDimension6
					for each Dimension6ShadowRel
						LocalPostingDimension6 = each.FinanceDimension6
						invoke Delete MatchingBudgetTemplateDimension6MemberRel
				include CreateRecalculateDimension6
		FixupToDimension6AfterMove
			if (LocalParentDimension6 entered)
				if (PrmFinanceDimension6.PostingDimension)
					LocalPostingDimension6 = PrmFinanceDimension6
					include CreateDimension6Member
				else
					Generated.FinanceDimension6	= PrmFinanceDimension6
					for each Dimension6ShadowRel
						LocalPostingDimension6 = each.FinanceDimension6
						include CreateDimension6Member
				include CreateRecalculateDimension6
		FixupFromDimension7AfterMove
			if (LocalParentDimension7 entered)
				if (PrmFinanceDimension7.PostingDimension)
					LocalPostingDimension7 = PrmFinanceDimension7
					invoke Delete MatchingBudgetTemplateDimension7MemberRel
				else
					Generated.FinanceDimension7	= PrmFinanceDimension7
					for each Dimension7ShadowRel
						LocalPostingDimension7 = each.FinanceDimension7
						invoke Delete MatchingBudgetTemplateDimension7MemberRel
				include CreateRecalculateDimension7
		FixupToDimension7AfterMove
			if (LocalParentDimension7 entered)
				if (PrmFinanceDimension7.PostingDimension)
					LocalPostingDimension7 = PrmFinanceDimension7
					include CreateDimension7Member
				else
					Generated.FinanceDimension7	= PrmFinanceDimension7
					for each Dimension7ShadowRel
						LocalPostingDimension7 = each.FinanceDimension7
						include CreateDimension7Member
				include CreateRecalculateDimension7
		FixupFromDimension8AfterMove
			if (LocalParentDimension8 entered)
				if (PrmFinanceDimension8.PostingDimension)
					LocalPostingDimension8 = PrmFinanceDimension8
					invoke Delete MatchingBudgetTemplateDimension8MemberRel
				else
					Generated.FinanceDimension8	= PrmFinanceDimension8
					for each Dimension8ShadowRel
						LocalPostingDimension8 = each.FinanceDimension8
						invoke Delete MatchingBudgetTemplateDimension8MemberRel
				include CreateRecalculateDimension8
		FixupToDimension8AfterMove
			if (LocalParentDimension8 entered)
				if (PrmFinanceDimension8.PostingDimension)
					LocalPostingDimension8 = PrmFinanceDimension8
					include CreateDimension8Member
				else
					Generated.FinanceDimension8	= PrmFinanceDimension8
					for each Dimension8ShadowRel
						LocalPostingDimension8 = each.FinanceDimension8
						include CreateDimension8Member
				include CreateRecalculateDimension8
		FixupFromDimension9AfterMove
			if (LocalParentDimension9 entered)
				if (PrmFinanceDimension9.PostingDimension)
					LocalPostingDimension9 = PrmFinanceDimension9
					invoke Delete MatchingBudgetTemplateDimension9MemberRel
				else
					Generated.FinanceDimension9	= PrmFinanceDimension9
					for each Dimension9ShadowRel
						LocalPostingDimension9 = each.FinanceDimension9
						invoke Delete MatchingBudgetTemplateDimension9MemberRel
				include CreateRecalculateDimension9
		FixupToDimension9AfterMove
			if (LocalParentDimension9 entered)
				if (PrmFinanceDimension9.PostingDimension)
					LocalPostingDimension9 = PrmFinanceDimension9
					include CreateDimension9Member
				else
					Generated.FinanceDimension9	= PrmFinanceDimension9
					for each Dimension9ShadowRel
						LocalPostingDimension9 = each.FinanceDimension9
						include CreateDimension9Member
				include CreateRecalculateDimension9
		FixupFromDimension10AfterMove
			if (LocalParentDimension10 entered)
				if (PrmFinanceDimension10.PostingDimension)
					LocalPostingDimension10 = PrmFinanceDimension10
					invoke Delete MatchingBudgetTemplateDimension10MemberRel
				else
					Generated.FinanceDimension10	= PrmFinanceDimension10
					for each Dimension10ShadowRel
						LocalPostingDimension10 = each.FinanceDimension10
						invoke Delete MatchingBudgetTemplateDimension10MemberRel
				include CreateRecalculateDimension10
		FixupToDimension10AfterMove
			if (LocalParentDimension10 entered)
				if (PrmFinanceDimension10.PostingDimension)
					LocalPostingDimension10 = PrmFinanceDimension10
					include CreateDimension10Member
				else
					Generated.FinanceDimension10	= PrmFinanceDimension10
					for each Dimension10ShadowRel
						LocalPostingDimension10 = each.FinanceDimension10
						include CreateDimension10Member
				include CreateRecalculateDimension10
		CreateRecalculateAccountingUnit
			if (LocalParentAccountingUnit entered
			and RecalculateContainingLocalParentAccountingUnitRel not exists)
				HasRecalculate = true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.AccountingEntity		= LocalParentAccountingEntity
					invoked.AccountingUnit			= LocalParentAccountingUnit
		CreateRecalculateProject
			if (LocalParentProject entered
			and RecalculateContainingLocalParentProjectRel not exists)
				HasRecalculate = true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.Project					= LocalParentProject
		CreateRecalculateAccount
			if (LocalParentAccount entered
			and RecalculateContainingLocalParentAccountRel not exists)
				HasRecalculate = true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.GeneralLedgerChartAccount	= LocalParentAccount
		CreateRecalculateDimension1
			if (LocalParentDimension1 entered
			and RecalculateContainingLocalParentDimension1Rel not exists)
				HasRecalculate = true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension1		= LocalParentDimension1
		CreateRecalculateDimension2
			if (LocalParentDimension2 entered
			and RecalculateContainingLocalParentDimension2Rel not exists)
				HasRecalculate = true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension2		= LocalParentDimension2
		CreateRecalculateDimension3
			if (LocalParentDimension3 entered
			and RecalculateContainingLocalParentDimension3Rel not exists)
				HasRecalculate = true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension3		= LocalParentDimension3
		CreateRecalculateDimension4
			if (LocalParentDimension4 entered
			and RecalculateContainingLocalParentDimension4Rel not exists)
				HasRecalculate = true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension4		= LocalParentDimension4
		CreateRecalculateDimension5
			if (LocalParentDimension5 entered
			and RecalculateContainingLocalParentDimension5Rel not exists)
				HasRecalculate = true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension5		= LocalParentDimension5
		CreateRecalculateDimension6
			if (LocalParentDimension6 entered
			and RecalculateContainingLocalParentDimension6Rel not exists)
				HasRecalculate = true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension6		= LocalParentDimension6
		CreateRecalculateDimension7
			if (LocalParentDimension7 entered
			and RecalculateContainingLocalParentDimension7Rel not exists)
				HasRecalculate = true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension7		= LocalParentDimension7
		CreateRecalculateDimension8
			if (LocalParentDimension8 entered
			and RecalculateContainingLocalParentDimension8Rel not exists)
				HasRecalculate = true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension8		= LocalParentDimension8
		CreateRecalculateDimension9
			if (LocalParentDimension9 entered
			and RecalculateContainingLocalParentDimension9Rel not exists)
				HasRecalculate	= true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension9		= LocalParentDimension9
		CreateRecalculateDimension10
			if (LocalParentDimension10 entered
			and RecalculateContainingLocalParentDimension10Rel not exists)
				HasRecalculate	= true
				invoke Create BudgetTemplateRecalculate
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension10		= LocalParentDimension10
		CreatePendingAccountingUnit
			if (RemoveContainingLocalParentAccountingUnitRel exists)
				invoke Delete RemoveContainingLocalParentAccountingUnitRel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.AccountingEntity		= LocalParentAccountingEntity
					invoked.AccountingUnit			= LocalParentAccountingUnit
		CreatePendingProject
			if (RemoveContainingLocalParentProjectRel exists)
				invoke Delete RemoveContainingLocalParentProjectRel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.Project					= LocalParentProject
		CreatePendingAccount
			if (RemoveContainingLocalParentAccountRel exists)
				invoke Delete RemoveContainingLocalParentAccountRel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.GeneralLedgerChartAccount	= LocalParentAccount
		CreatePendingDimension1
			if (RemoveContainingLocalParentDimension1Rel exists)
				invoke Delete RemoveContainingLocalParentDimension1Rel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension1		= LocalParentDimension1
		CreatePendingDimension2
			if (RemoveContainingLocalParentDimension2Rel exists)
				invoke Delete RemoveContainingLocalParentDimension2Rel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension2		= LocalParentDimension2
		CreatePendingDimension3
			if (RemoveContainingLocalParentDimension3Rel exists)
				invoke Delete RemoveContainingLocalParentDimension3Rel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension3		= LocalParentDimension3
		CreatePendingDimension4
			if (RemoveContainingLocalParentDimension4Rel exists)
				invoke Delete RemoveContainingLocalParentDimension4Rel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension4		= LocalParentDimension4
		CreatePendingDimension5
			if (RemoveContainingLocalParentDimension5Rel exists)
				invoke Delete RemoveContainingLocalParentDimension5Rel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension5		= LocalParentDimension5
		CreatePendingDimension6
			if (RemoveContainingLocalParentDimension6Rel exists)
				invoke Delete RemoveContainingLocalParentDimension6Rel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension6		= LocalParentDimension6
		CreatePendingDimension7
			if (RemoveContainingLocalParentDimension7Rel exists)
				invoke Delete RemoveContainingLocalParentDimension7Rel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension7		= LocalParentDimension7
		CreatePendingDimension8
			if (RemoveContainingLocalParentDimension8Rel exists)
				invoke Delete RemoveContainingLocalParentDimension8Rel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension8		= LocalParentDimension8
		CreatePendingDimension9
			if (RemoveContainingLocalParentDimension9Rel exists)
				invoke Delete RemoveContainingLocalParentDimension9Rel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension9		= LocalParentDimension9
		CreatePendingDimension10
			if (RemoveContainingLocalParentDimension10Rel exists)
				invoke Delete RemoveContainingLocalParentDimension10Rel
			else
				invoke Create BudgetTemplatePending
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension10		= LocalParentDimension10
		CreateRemoveAccountingUnit
			if (PendingContainingLocalParentAccountingUnitRel exists)
				invoke Delete PendingContainingLocalParentAccountingUnitRel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.AccountingEntity		= LocalParentAccountingEntity
					invoked.AccountingUnit			= LocalParentAccountingUnit
		CreateRemoveProject
			if (PendingContainingLocalParentProjectRel exists)
				invoke Delete PendingContainingLocalParentProjectRel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.Project					= LocalParentProject
		CreateRemoveAccount
			if (PendingContainingLocalParentAccountRel exists)
				invoke Delete PendingContainingLocalParentAccountRel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.GeneralLedgerChartAccount	= LocalParentAccount
		CreateRemoveDimension1
			if (PendingContainingLocalParentDimension1Rel exists)
				invoke Delete PendingContainingLocalParentDimension1Rel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension1		= LocalParentDimension1
		CreateRemoveDimension2
			if (PendingContainingLocalParentDimension2Rel exists)
				invoke Delete PendingContainingLocalParentDimension2Rel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension2		= LocalParentDimension2
		CreateRemoveDimension3
			if (PendingContainingLocalParentDimension3Rel exists)
				invoke Delete PendingContainingLocalParentDimension3Rel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension3		= LocalParentDimension3
		CreateRemoveDimension4
			if (PendingContainingLocalParentDimension4Rel exists)
				invoke Delete PendingContainingLocalParentDimension4Rel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension4		= LocalParentDimension4
		CreateRemoveDimension5
			if (PendingContainingLocalParentDimension5Rel exists)
				invoke Delete PendingContainingLocalParentDimension5Rel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension5		= LocalParentDimension5
		CreateRemoveDimension6
			if (PendingContainingLocalParentDimension6Rel exists)
				invoke Delete PendingContainingLocalParentDimension6Rel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension6		= LocalParentDimension6
		CreateRemoveDimension7
			if (PendingContainingLocalParentDimension7Rel exists)
				invoke Delete PendingContainingLocalParentDimension7Rel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension7		= LocalParentDimension7
		CreateRemoveDimension8
			if (PendingContainingLocalParentDimension8Rel exists)
				invoke Delete PendingContainingLocalParentDimension8Rel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension8		= LocalParentDimension8
		CreateRemoveDimension9
			if (PendingContainingLocalParentDimension9Rel exists)
				invoke Delete PendingContainingLocalParentDimension9Rel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension9		= LocalParentDimension9
		CreateRemoveDimension10
			if (PendingContainingLocalParentDimension10Rel exists)
				invoke Delete PendingContainingLocalParentDimension10Rel
			else
				invoke Create BudgetTemplateRemove
					invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
					invoked.Scenario			 	= Scenario
					invoked.BudgetTemplate		 	= BudgetTemplate
					invoked.FinanceDimension10		= LocalParentDimension10
					
		InitializeLocalParentFields
			initialize LocalParentAccountingEntity
			initialize LocalParentAccountingUnit
			initialize LocalParentProject
			initialize LocalParentAccount
			initialize LocalParentDimension1
			initialize LocalParentDimension2
			initialize LocalParentDimension3
			initialize LocalParentDimension4
			initialize LocalParentDimension5
			initialize LocalParentDimension6
			initialize LocalParentDimension7
			initialize LocalParentDimension8
			initialize LocalParentDimension9
			initialize LocalParentDimension10
		
		InitializeLocalParentFieldsForRemove
			include InitializeLocalParentFields

			if (BudgetTemplateRemove.AccountingUnit entered)

				LocalParentAccountingEntity				= BudgetTemplateRemove.AccountingEntity
				LocalParentAccountingUnit				= BudgetTemplateRemove.AccountingUnit
			else
			if (BudgetTemplateRemove.Project entered)
				LocalParentProject						= BudgetTemplateRemove.Project
			else
			if (BudgetTemplateRemove.GeneralLedgerChartAccount entered)
				LocalParentAccount						= BudgetTemplateRemove.GeneralLedgerChartAccount
			else
			if (BudgetTemplateRemove.FinanceDimension1 entered)
				LocalParentDimension1					= BudgetTemplateRemove.FinanceDimension1
			else
			if (BudgetTemplateRemove.FinanceDimension2 entered)
				LocalParentDimension2					= BudgetTemplateRemove.FinanceDimension2
			else
			if (BudgetTemplateRemove.FinanceDimension3 entered)
				LocalParentDimension3					= BudgetTemplateRemove.FinanceDimension3
			else
			if (BudgetTemplateRemove.FinanceDimension4 entered)
				LocalParentDimension4					= BudgetTemplateRemove.FinanceDimension4
			else
			if (BudgetTemplateRemove.FinanceDimension5 entered)
				LocalParentDimension5					= BudgetTemplateRemove.FinanceDimension5
			else
			if (BudgetTemplateRemove.FinanceDimension6 entered)
				LocalParentDimension6					= BudgetTemplateRemove.FinanceDimension6
			else
			if (BudgetTemplateRemove.FinanceDimension7 entered)
				LocalParentDimension7					= BudgetTemplateRemove.FinanceDimension7
			else
			if (BudgetTemplateRemove.FinanceDimension8 entered)
				LocalParentDimension8					= BudgetTemplateRemove.FinanceDimension8
			else
			if (BudgetTemplateRemove.FinanceDimension9 entered)
				LocalParentDimension9					= BudgetTemplateRemove.FinanceDimension9
			else
			if (BudgetTemplateRemove.FinanceDimension10 entered)
				LocalParentDimension10					= BudgetTemplateRemove.FinanceDimension10
		
		InitializeLocalParentFieldsForManual
			include InitializeLocalParentFields

			if (BudgetTemplateManual.AccountingUnit entered)
				LocalParentAccountingEntity				= BudgetTemplateManual.AccountingEntity
				LocalParentAccountingUnit				= BudgetTemplateManual.AccountingUnit
			else
			if (BudgetTemplateManual.Project entered)
				LocalParentProject						= BudgetTemplateManual.Project
			else
			if (BudgetTemplateManual.GeneralLedgerChartAccount entered)
				LocalParentAccount						= BudgetTemplateManual.GeneralLedgerChartAccount
			else
			if (BudgetTemplateManual.FinanceDimension1 entered)
				LocalParentDimension1					= BudgetTemplateManual.FinanceDimension1
			else
			if (BudgetTemplateManual.FinanceDimension2 entered)
				LocalParentDimension2					= BudgetTemplateManual.FinanceDimension2
			else
			if (BudgetTemplateManual.FinanceDimension3 entered)
				LocalParentDimension3					= BudgetTemplateManual.FinanceDimension3
			else
			if (BudgetTemplateManual.FinanceDimension4 entered)
				LocalParentDimension4					= BudgetTemplateManual.FinanceDimension4
			else
			if (BudgetTemplateManual.FinanceDimension5 entered)
				LocalParentDimension5					= BudgetTemplateManual.FinanceDimension5
			else
			if (BudgetTemplateManual.FinanceDimension6 entered)
				LocalParentDimension6					= BudgetTemplateManual.FinanceDimension6
			else
			if (BudgetTemplateManual.FinanceDimension7 entered)
				LocalParentDimension7					= BudgetTemplateManual.FinanceDimension7
			else
			if (BudgetTemplateManual.FinanceDimension8 entered)
				LocalParentDimension8					= BudgetTemplateManual.FinanceDimension8
			else
			if (BudgetTemplateManual.FinanceDimension9 entered)
				LocalParentDimension9					= BudgetTemplateManual.FinanceDimension9
			else
			if (BudgetTemplateManual.FinanceDimension10 entered)
				LocalParentDimension10					= BudgetTemplateManual.FinanceDimension10
		
		InitializeLocalParentFieldsForPending
			include InitializeLocalParentFields

			if (BudgetTemplatePending.AccountingUnit entered)
				LocalParentAccountingEntity				= BudgetTemplatePending.AccountingEntity
				LocalParentAccountingUnit				= BudgetTemplatePending.AccountingUnit
			else
			if (BudgetTemplatePending.Project entered)
				LocalParentProject						= BudgetTemplatePending.Project
			else
			if (BudgetTemplatePending.GeneralLedgerChartAccount entered)
				LocalParentAccount						= BudgetTemplatePending.GeneralLedgerChartAccount
			else
			if (BudgetTemplatePending.FinanceDimension1 entered)
				LocalParentDimension1					= BudgetTemplatePending.FinanceDimension1
			else
			if (BudgetTemplatePending.FinanceDimension2 entered)
				LocalParentDimension2					= BudgetTemplatePending.FinanceDimension2
			else
			if (BudgetTemplatePending.FinanceDimension3 entered)
				LocalParentDimension3					= BudgetTemplatePending.FinanceDimension3
			else
			if (BudgetTemplatePending.FinanceDimension4 entered)
				LocalParentDimension4					= BudgetTemplatePending.FinanceDimension4
			else
			if (BudgetTemplatePending.FinanceDimension5 entered)
				LocalParentDimension5					= BudgetTemplatePending.FinanceDimension5
			else
			if (BudgetTemplatePending.FinanceDimension6 entered)
				LocalParentDimension6					= BudgetTemplatePending.FinanceDimension6
			else
			if (BudgetTemplatePending.FinanceDimension7 entered)
				LocalParentDimension7					= BudgetTemplatePending.FinanceDimension7
			else
			if (BudgetTemplatePending.FinanceDimension8 entered)
				LocalParentDimension8					= BudgetTemplatePending.FinanceDimension8
			else
			if (BudgetTemplatePending.FinanceDimension9 entered)
				LocalParentDimension9					= BudgetTemplatePending.FinanceDimension9
			else
			if (BudgetTemplatePending.FinanceDimension10 entered)
				LocalParentDimension10					= BudgetTemplatePending.FinanceDimension10
		
		InitializeLocalParentFieldsForRecalculate
			include InitializeLocalParentFields

			if (BudgetTemplateRecalculate.AccountingUnit entered)
				LocalParentAccountingEntity				= BudgetTemplateRecalculate.AccountingEntity
				LocalParentAccountingUnit				= BudgetTemplateRecalculate.AccountingUnit
			else
			if (BudgetTemplateRecalculate.Project entered)
				LocalParentProject						= BudgetTemplateRecalculate.Project
			else
			if (BudgetTemplateRecalculate.GeneralLedgerChartAccount entered)
				LocalParentAccount						= BudgetTemplateRecalculate.GeneralLedgerChartAccount
			else
			if (BudgetTemplateRecalculate.FinanceDimension1 entered)
				LocalParentDimension1					= BudgetTemplateRecalculate.FinanceDimension1
			else
			if (BudgetTemplateRecalculate.FinanceDimension2 entered)
				LocalParentDimension2					= BudgetTemplateRecalculate.FinanceDimension2
			else
			if (BudgetTemplateRecalculate.FinanceDimension3 entered)
				LocalParentDimension3					= BudgetTemplateRecalculate.FinanceDimension3
			else
			if (BudgetTemplateRecalculate.FinanceDimension4 entered)
				LocalParentDimension4					= BudgetTemplateRecalculate.FinanceDimension4
			else
			if (BudgetTemplateRecalculate.FinanceDimension5 entered)
				LocalParentDimension5					= BudgetTemplateRecalculate.FinanceDimension5
			else
			if (BudgetTemplateRecalculate.FinanceDimension6 entered)
				LocalParentDimension6					= BudgetTemplateRecalculate.FinanceDimension6
			else
			if (BudgetTemplateRecalculate.FinanceDimension7 entered)
				LocalParentDimension7					= BudgetTemplateRecalculate.FinanceDimension7
			else
			if (BudgetTemplateRecalculate.FinanceDimension8 entered)
				LocalParentDimension8					= BudgetTemplateRecalculate.FinanceDimension8
			else
			if (BudgetTemplateRecalculate.FinanceDimension9 entered)
				LocalParentDimension9					= BudgetTemplateRecalculate.FinanceDimension9
			else
			if (BudgetTemplateRecalculate.FinanceDimension10 entered)
				LocalParentDimension10					= BudgetTemplateRecalculate.FinanceDimension10
		
		RemoveRecalculate
			if (RecalculateContainingLocalParentAccountingUnitRel exists)

				invoke Delete RecalculateContainingLocalParentAccountingUnitRel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentAccountRel exists)

				invoke Delete RecalculateContainingLocalParentAccountRel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentProjectRel exists)
				invoke Delete RecalculateContainingLocalParentProjectRel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentDimension1Rel exists)
				invoke Delete RecalculateContainingLocalParentDimension1Rel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentDimension2Rel exists)
				invoke Delete RecalculateContainingLocalParentDimension2Rel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentDimension3Rel exists)
				invoke Delete RecalculateContainingLocalParentDimension3Rel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentDimension4Rel exists)
				invoke Delete RecalculateContainingLocalParentDimension4Rel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentDimension5Rel exists)
				invoke Delete RecalculateContainingLocalParentDimension5Rel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentDimension6Rel exists)
				invoke Delete RecalculateContainingLocalParentDimension6Rel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentDimension7Rel exists)
				invoke Delete RecalculateContainingLocalParentDimension7Rel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentDimension8Rel exists)
				invoke Delete RecalculateContainingLocalParentDimension8Rel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentDimension9Rel exists)
				invoke Delete RecalculateContainingLocalParentDimension9Rel
				include NextItemCreated
			else
			if (RecalculateContainingLocalParentDimension10Rel exists)
				invoke Delete RecalculateContainingLocalParentDimension10Rel
				include NextItemCreated

		RemoveBudgetEditError
			if (LocalParentAccountingUnit entered)
				for each MatchingAccountingUnitBudgetEditErrorRel

					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentAccount entered)
				for each MatchingAccountBudgetEditErrorRel

					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentProject entered)
				for each MatchingProjectBudgetEditErrorRel
					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentDimension1 entered)
				for each MatchingDimension1BudgetEditErrorRel
					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentDimension2 entered)
				for each MatchingDimension2BudgetEditErrorRel
					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentDimension3 entered)
				for each MatchingDimension3BudgetEditErrorRel
					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentDimension4 entered)
				for each MatchingDimension4BudgetEditErrorRel
					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentDimension5 entered)
				for each MatchingDimension5BudgetEditErrorRel
					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentDimension6 entered)
				for each MatchingDimension6BudgetEditErrorRel
					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentDimension7 entered)
				for each MatchingDimension7BudgetEditErrorRel
					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentDimension8 entered)
				for each MatchingDimension8BudgetEditErrorRel
					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentDimension9 entered)
				for each MatchingDimension9BudgetEditErrorRel
					invoke Delete each.BudgetEditError
					include NextItemCreated
			else
			if (LocalParentDimension10 entered)
				for each MatchingDimension10BudgetEditErrorRel
					invoke Delete each.BudgetEditError
					include NextItemCreated
		
		RemoveBudgetTemplateGroupTotal
			if (LocalParentAccountingUnit entered)
				for each MatchingAccountingUnitBudgetTemplateGroupTotalRel

					include CheckRecoveryCount
					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
			else
			if (LocalParentAccount entered)
				for each MatchingAccountBudgetTemplateGroupTotalRel

					include CheckRecoveryCount
					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
			else
			if (LocalParentProject entered)
				for each MatchingProjectBudgetTemplateGroupTotalRel
					include CheckRecoveryCount

					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
			else
			if (LocalParentDimension1 entered)
				for each MatchingDimension1BudgetTemplateGroupTotalRel
					include CheckRecoveryCount
					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
			else
			if (LocalParentDimension2 entered)
				for each MatchingDimension2BudgetTemplateGroupTotalRel
					include CheckRecoveryCount
					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
			else
			if (LocalParentDimension3 entered)
				for each MatchingDimension3BudgetTemplateGroupTotalRel
					include CheckRecoveryCount
					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
			else
			if (LocalParentDimension4 entered)
				for each MatchingDimension4BudgetTemplateGroupTotalRel
					include CheckRecoveryCount
					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
			else
			if (LocalParentDimension5 entered)
				for each MatchingDimension5BudgetTemplateGroupTotalRel
					invoke Delete each.BudgetTemplateGroupTotal
					include CheckRecoveryCount
					include NextItemCreated
			else
			if (LocalParentDimension6 entered)
				for each MatchingDimension6BudgetTemplateGroupTotalRel
					include CheckRecoveryCount
					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
			else
			if (LocalParentDimension7 entered)
				for each MatchingDimension7BudgetTemplateGroupTotalRel
					include CheckRecoveryCount
					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
			else
			if (LocalParentDimension8 entered)
				for each MatchingDimension8BudgetTemplateGroupTotalRel
					include CheckRecoveryCount
					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
			else
			if (LocalParentDimension9 entered)
				for each MatchingDimension9BudgetTemplateGroupTotalRel
					include CheckRecoveryCount
					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
			else
			if (LocalParentDimension10 entered)
				for each MatchingDimension10BudgetTemplateGroupTotalRel
					include CheckRecoveryCount
					invoke Delete each.BudgetTemplateGroupTotal
					include NextItemCreated
		
		RemoveBudgetTemplateMember
			if (LocalParentAccountingUnit entered)
				for each ChildrenBudgetTemplateAccountingUnitMembersRel

					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentAccount entered)
				for each ChildrenBudgetTemplateAccountMembersRel

					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentProject entered)
				for each ChildrenBudgetTemplateProjectMembersRel
					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentDimension1 entered)
				for each ChildrenBudgetTemplateDimension1MembersRel
					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentDimension2 entered)
				for each ChildrenBudgetTemplateDimension2MembersRel
					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentDimension3 entered)
				for each ChildrenBudgetTemplateDimension3MembersRel
					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentDimension4 entered)
				for each ChildrenBudgetTemplateDimension4MembersRel
					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentDimension5 entered)
				for each ChildrenBudgetTemplateDimension5MembersRel
					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentDimension6 entered)
				for each ChildrenBudgetTemplateDimension6MembersRel
					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentDimension7 entered)
				for each ChildrenBudgetTemplateDimension7MembersRel
					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentDimension8 entered)
				for each ChildrenBudgetTemplateDimension8MembersRel
					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentDimension9 entered)
				for each ChildrenBudgetTemplateDimension9MembersRel
					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
			else
			if (LocalParentDimension10 entered)
				for each ChildrenBudgetTemplateDimension10MembersRel
					invoke Delete each.BudgetTemplateMember
					include NextItemCreated
		RemoveBudgetGroupChildren
			for each BudgetGroupAmountForGroupRel

				invoke Delete each.BudgetGroupAmount
				include NextItemCreated
			for each BudgetGroupTotalLogRel
				invoke Delete each.BudgetGroupTotalLog
				include NextItemCreated
			for each BudgetGroupTotalRel

				invoke Delete each.BudgetGroupTotal
				include NextItemCreated
			for each BudgetGroupCheckRel

				invoke Delete each.BudgetGroupCheck
				include NextItemCreated

		
		RemoveBudgetGroup
			if (LocalParentAccountingUnit entered)
				for each BudgetGroupsContainingLocalParentAccountingUnitRel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren

					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentAccount entered)
				for each BudgetGroupsContainingLocalParentAccountRel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren

					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentProject entered)
				for each BudgetGroupsContainingLocalParentProjectRel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren
					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentDimension1 entered)
				for each BudgetGroupsContainingLocalParentDimension1Rel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren
					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentDimension2 entered)
				for each BudgetGroupsContainingLocalParentDimension2Rel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren
					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentDimension3 entered)
				for each BudgetGroupsContainingLocalParentDimension3Rel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren
					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentDimension4 entered)
				for each BudgetGroupsContainingLocalParentDimension4Rel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren
					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentDimension5 entered)
				for each BudgetGroupsContainingLocalParentDimension5Rel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren
					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentDimension6 entered)
				for each BudgetGroupsContainingLocalParentDimension6Rel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren
					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentDimension7 entered)
				for each BudgetGroupsContainingLocalParentDimension7Rel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren
					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentDimension8 entered)
				for each BudgetGroupsContainingLocalParentDimension8Rel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren
					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentDimension9 entered)
				for each BudgetGroupsContainingLocalParentDimension9Rel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren
					invoke Delete BudgetGroup
					include NextItemCreated
			else
			if (LocalParentDimension10 entered)
				for each BudgetGroupsContainingLocalParentDimension10Rel
					BudgetGroup = each.BudgetGroup
					include RemoveBudgetGroupChildren
					invoke Delete BudgetGroup
					include NextItemCreated
		
		CreateTemplateError

			invoke Create BudgetEditError
				invoked.FinanceEnterpriseGroup 			= FinanceEnterpriseGroup
				invoked.Scenario			 			= Scenario
				invoked.BudgetTemplate		 			= BudgetTemplate
				invoked.BudgetGroup		 				= BudgetGroup
				invoked.BudgetEditError.BudgetEditGroup	= LocalBudgetEditGroup
				invoked.HeaderUniqueID		 			= LocalHeaderID 
				invoked.BudgetEditError.Counter			= BudgetEditCounter
				invoked.ChangeAmount					= ChangeAmount
				invoked.BudgetTemplatePeriod			= GeneralLedgerCalendarPeriod
				invoked.CurrentCommitmentAmount			= CommitmentAmount
				invoked.CurrentBudgetAmount				= BudgetAmount
				invoked.FutureCommitmentAmount			= FutureCommitment
				invoked.FutureCommitmentPeriod			= FutureCommitmentPeriod
				invoked.ToleranceOption					= ToleranceOption
				invoked.Tolerance						= Tolerance
				invoked.ToleranceAmount					= ToleranceAmount
				if (BudgetGroup.NeedsRecalculation)
					invoked.GroupNeedsRecalculation		= true
				if (IsBudgetChangeError)
					invoked.IsBudgetChangeError			= true
			


































































					
	 	CheckRecoveryCount
			constraint (each.RecoveryCount = 0)
				"BudgetTemplateGroupTotal<each.BudgetTemplateGroupTotal.BudgetGroup.DisplayMessage>ForBudgetEditBatch<each.BudgetTemplateGroupTotal.BudgetEditBatch>HasNonZeroRecoveryCount"
		
		VerifyNoPostingProcesses
			constraint (PostInProcessRel not exists)
				"CannotActivateWhilePostingProcessesAreRunning"

		ConvertTransactionAmountUsingGLCommit
			if (DerivedCurrencyUsingGLCommit != each.CurrencyCode)
				initialize CurrencyExchange
				FromCurrency				= each.CurrencyCode
				ExchangeDate				= PeriodFromEndDateRel.Date
				ToCurrency					= DerivedCurrencyUsingGLCommit
				CurrencyTable				= each.DerivedCurrencyTable
				CurrencyExchange.ToCurrency = DerivedCurrencyUsingGLCommit
				TransactionAmount			= CurrencyExchange.OutputCurrencyAmount
				
		VerifyBudgetedSystemCodesExist
			constraint(instance count of BudgetedSystemCodesRel > 0)
				"AtLeastOneSystemCodeMustHave_TrackOr_Track_And_Edit_EncumbranceOption"

		
		ParallelLazyGroups
			Counter							= 1
			if (instance count of BudgetGroupsByStageRel >= 100)
				Counter						= 8
			initialize ClusterCounter
			while (ClusterCounter < Counter)
				BackgroundGroup = BudgetTemplate + "-Lazy-" + current timestamp + ClusterCounter
				invoke InitializeLazyGroupsByStageAndCluster in background group(BackgroundGroup)
					assign async background group id to GroupAsyncId
					run after AsyncId
					invoked.PrmCluster					= ClusterCounter
					invoked.PrmNumberOfClusters			= Counter
					invoked.PrmStage					= LazyStage
				ClusterCounter += 1
				
		InitializeSingleLazyGroup
			if (!BudgetGroup.LazyInitialized)
				
				if (!HasSummary)
					invoke GetObligationsFromTotals BudgetGroup 
						invoked.Augment						= true
				else
					invoke Recalculate BudgetGroup
						invoked.Augment						= true
				
				if (!BudgetGroup.InitializedFromReleasedTransactions)
	 				invoke AugmentTemplateTotalsFromReleasedGLTransactionsForGroup
						invoked.Group					= BudgetGroup
	 				invoke AugmentTemplateTotalsFromPendingGLTransactionsForGroup BudgetTemplate
						invoked.Group					= BudgetGroup
				
				if (!BudgetGroup.HasUnreleasedGLTransaction)
					if (GLSystemCodeRel.EncumbranceOption.Track
					or GLSystemCodeRel.EncumbranceOption.TrackAndEdit)
						invoke BuildTemplateGroupTotalsFromUnreleasedGLGeneralLedgerTransactionForGroup
							invoked.Group			= BudgetGroup
	
				if (!BudgetGroup.HasUnreleasedCommit)
					invoke BuildTemplateGroupTotalsFromUnreleasedGLCommit
						invoked.Group				= BudgetGroup
				
				if (!BudgetGroup.HasReleasedCommit)
					invoke BuildTemplateGroupTotalsFromReleasedGLCommitWithDifferenceAmount	
						invoked.Group				= BudgetGroup
				
				if (!BudgetGroup.HasUnreleasedChange)
					invoke BuildTemplateGroupTotalsFromUnreleasedChangeOrders	
						invoked.Group				= BudgetGroup
	
				include NextItemProcessed
					
				invoke Update BudgetGroup
					invoked.LazyInitializing			= false
					invoked.LazyInitialized				= true
				invoke CommitTransaction

		BuildBudgetGroupTotalFromUnreleased
			LocalJournalControl			= each.GeneralLedgerJournalControl
			LocalHeaderID				= LocalJournalControl.UniqueID 
			if ((BypassBudgetEditGroup not entered or BypassBudgetEditGroup != LocalHeaderID)
			and each.GeneralLedgerClosePeriod	= LocalJournalControl.GeneralLedgerClosePeriod)
				IsLazyInitializing		= true
				ValidationAccount 		= each.FinanceCodeBlock.GeneralLedgerChartAccount
				TransactionCodeBlock 	= each.FinanceCodeBlock								
				if (ShouldIncludeTransaction)
					initialize GeneralLedgerCalendarPeriod
					include FindPeriod
					if (GeneralLedgerCalendarPeriod exists
					and ShouldProcessAccountForTransaction)
						LocalBudgetEditGroup	= LocalHeaderID
						LocalSourceDocument		= reference to each.GeneralLedgerJournalControl
						include ExtractTransactionAmountForRebuild
						include ApplyUpdatesToGroupTotalsNoLookups
			include NextItemProcessed

		AugmentTemplateTotal		
			LocalBudgetEditGroup = each.GeneralLedgerJournalControl.UniqueID
			if ((BypassBudgetEditGroup not entered or BypassBudgetEditGroup != LocalBudgetEditGroup)
			and each.GeneralLedgerClosePeriod	= each.GeneralLedgerJournalControl.GeneralLedgerClosePeriod)
				IsLazyInitializing				= true
				ValidationAccount				= each.FinanceCodeBlock.GeneralLedgerChartAccount
				TransactionCodeBlock 			= each.FinanceCodeBlock

				if (ShouldProcessAccountForTransaction)
					LocalEndDate				= each.GeneralLedgerJournalControl.GeneralLedgerCalendarPeriod
					include ExtractTransactionAmountForRebuild

					include FindPeriod
					if (GeneralLedgerCalendarPeriod exists
					and ShouldIncludeTransaction
					and TransactionAmount != 0)
						EditContext	= "LazyAugmentTemplateTotalsFromReleasedGLTransactionsForGroup"
						NextAmount	= TransactionAmount
						include IncrementTemplateTotal


					include NextItemProcessed
			include NextItemProcessed

	Derived Fields
		BudgetTemplateDescription 	is a MessageField
			"<BudgetTemplate>_-_<Description>"
		BudgetTemplateTitle		is a LabelField
			"BudgetTemplate<Scenario>_-_<BudgetTemplate>"			






		DerivedCurrencyUsingGLCommit	is a DerivedField
			type is AlphaUpper size 5
			if (UseCurrency.EntityFunctional)
				return LocalGLCommit.FinanceCodeBlock.ToAccountingEntity.FunctionalCurrency


















			else
			if (UseCurrency.Project)
				return LocalGLCommit.FinanceCodeBlock.Project.Currency
			else
			if (UseCurrency.Report1)
				return FinanceEnterpriseGroup.ReportCurrencyOne
			else
			if (UseCurrency.Report2)
				return FinanceEnterpriseGroup.ReportCurrencyTwo
			else
			if (UseCurrency.Report3)
				return FinanceEnterpriseGroup.ReportCurrencyThree
			else
			if (UseCurrency.Report4)
				return FinanceEnterpriseGroup.ReportCurrencyFour
			else
			if (UseCurrency.Report5)
				return FinanceEnterpriseGroup.ReportCurrencyFive
		DerivedRoundTo					is a DerivedField
    		type is Decimal 5.4
    		restricted

    		if (!TransactionCurrency exists)
    			return .01
    		if (TransactionCurrency.NumberOfDecimals = 2)
    			return .01
    		if (TransactionCurrency.NumberOfDecimals = 0)
    			return 1
    		if (TransactionCurrency.NumberOfDecimals = 3)
    			return .001
    		if (TransactionCurrency.NumberOfDecimals = 4)
    			return .0001
		ObtainAccountSection is a DerivedField
			type is Numeric 1
			restricted
			TrialAccountSection = 1
			if (TemplatesWithAccountSectionRel not exists)
				return TrialAccountSection
			TrialAccountSection = 2
			if (TemplatesWithAccountSectionRel not exists)
				return TrialAccountSection
			TrialAccountSection = 3
			if (TemplatesWithAccountSectionRel not exists)
				return TrialAccountSection
			return 0
		DerivedStartYear is a DerivedField
			type is Year
			restricted
			if (BudgetYearRange.Start entered)
				return BudgetYearRange.Start.Year
			else
				return first AllCalendarYearsRel.GeneralLedgerCalendarPeriod.Year
		DerivedEndYear is a DerivedField
			type is Year
			restricted
			if (BudgetYearRange.End entered)
				return BudgetYearRange.End.Year
			else
				return last AllCalendarYearsRel.GeneralLedgerCalendarPeriod.Year
		CubePeriod is a DerivedField
			type is AlphaUpper size 20
			restricted
			if (PeriodToDate.YearToDate)
				return GeneralLedgerCalendarPeriod + "_YTD"
			else
			if (PeriodToDate.LifeToDate)
				return GeneralLedgerCalendarPeriod + "_LTD"
			else
			if (PeriodToDate.Total)
				return last AllLTDPeriodsRel.GeneralLedgerCalendarPeriod
			else
				return GeneralLedgerCalendarPeriod
		BudgetCubeAmount is a DerivedField
			type is Decimal size 19.3 
    		restricted
			if (UseCurrency.EntityFunctional)
				BudgetCubeAmount = BudgetCubeRel.NetFunctionalAmount
			else
			if (UseCurrency.Project)
				BudgetCubeAmount = BudgetCubeRel.NetProjectAmount
			else
			if (UseCurrency.Report1)
				BudgetCubeAmount = BudgetCubeRel.NetReportAmount1
			else
			if (UseCurrency.Report2)
				BudgetCubeAmount = BudgetCubeRel.NetReportAmount2
			else
			if (UseCurrency.Report3)
				BudgetCubeAmount = BudgetCubeRel.NetReportAmount3
			else
			if (UseCurrency.Report4)
				BudgetCubeAmount = BudgetCubeRel.NetReportAmount4
			else
			if (UseCurrency.Report5)
				BudgetCubeAmount = BudgetCubeRel.NetReportAmount5
			
		JulianDate is a DerivedField
			type is Alpha 7
			restricted
			LocalAlphaYear = LocalDate year
			LocalAlphaDay  = LocalDate year day
			JulianDate = LocalAlphaYear
			if (LocalAlphaDay size = 1)
				JulianDate += "00"
			else
			if (LocalAlphaDay size = 2)
				JulianDate += "0"
			JulianDate += LocalAlphaDay 

		EditCalendar is a DerivedField
			type is AlphaUpper size 20
			restricted
			if (IsProject)

				return BudgetCalendar
			else
				return BudgetCalendar
		EditTolerance is a DerivedField
			type is Decimal size 5.2
			restricted
			return Tolerance

		BudgetParentAccountingUnit is a DerivedField
			type is AlphaUpper size 25
			restricted
			while (LocalParentAccountingUnit entered)
				if (LocalParentAccountingUnit.DimensionStructure != AccountingUnitStructure)
					return
				if ((LocalParentAccountingUnit.BudgetIdentifier = AccountingUnitIdentifier
				and PendingContainingLocalParentAccountingUnitRel not exists)
				or RemoveContainingLocalParentAccountingUnitRel exists)
					return LocalParentAccountingUnit
				LocalParentAccountingUnit 	= LocalParentAccountingUnit.ParentAccountingUnit
			return
		BudgetParentProject is a DerivedField
			type is AlphaUpper size 25
			restricted
			while (LocalParentProject entered)
				if ((LocalParentProject.BudgetIdentifier = ProjectIdentifier
				and PendingContainingLocalParentProjectRel not exists)
				or RemoveContainingLocalParentProjectRel exists)
					return LocalParentProject
				LocalParentProject 	= LocalParentProject.ParentProject
			return
		BudgetParentAccount is a DerivedField
			type is AlphaUpper size 26
			restricted
			while (LocalParentAccount entered)
				if ((LocalParentAccount.BudgetIdentifier = AccountIdentifier
				and PendingContainingLocalParentAccountRel not exists)
				or RemoveContainingLocalParentAccountRel exists)
					return LocalParentAccount
				LocalParentAccount 	= LocalParentAccount.ParentChartAccount.GeneralLedgerChartAccount
			return
		BudgetParentDimension1 is a DerivedField
			type is AlphaUpper size 15
			restricted
			while (LocalParentDimension1 entered)
				if (LocalParentDimension1.DimensionStructure != FinanceDimension1Structure)
					return
				if ((LocalParentDimension1.BudgetIdentifier = Dimension1Identifier
				and PendingContainingLocalParentDimension1Rel not exists)
				or RemoveContainingLocalParentAccountRel exists)
					return LocalParentDimension1
				LocalParentDimension1 	= LocalParentDimension1.ParentFinanceDimension1
			return
		BudgetParentDimension2 is a DerivedField
			type is AlphaUpper size 15 
			restricted
			while (LocalParentDimension2 entered)
				if (LocalParentDimension2.DimensionStructure != FinanceDimension2Structure)
					return
				if ((LocalParentDimension2.BudgetIdentifier = Dimension2Identifier
				and PendingContainingLocalParentDimension2Rel not exists)
				or RemoveContainingLocalParentAccountRel exists)
					return LocalParentDimension2
				LocalParentDimension2 	= LocalParentDimension2.ParentFinanceDimension2
			return
		BudgetParentDimension3 is a DerivedField
			type is AlphaUpper size 15
			restricted
			while (LocalParentDimension3 entered)
				if (LocalParentDimension3.DimensionStructure != FinanceDimension3Structure)
					return
				if ((LocalParentDimension3.BudgetIdentifier = Dimension3Identifier
				and PendingContainingLocalParentDimension3Rel not exists)
				or RemoveContainingLocalParentAccountRel exists)
					return LocalParentDimension3
				LocalParentDimension3 	= LocalParentDimension3.ParentFinanceDimension3
			return
		BudgetParentDimension4 is a DerivedField
			type is AlphaUpper size 15
			restricted
			while (LocalParentDimension4 entered)
				if (LocalParentDimension4.DimensionStructure != FinanceDimension4Structure)
					return
				if ((LocalParentDimension4.BudgetIdentifier = Dimension4Identifier
				and PendingContainingLocalParentDimension4Rel not exists)
				or RemoveContainingLocalParentAccountRel exists)
					return LocalParentDimension4
				LocalParentDimension4 	= LocalParentDimension4.ParentFinanceDimension4
			return
		BudgetParentDimension5 is a DerivedField
			type is AlphaUpper size 15
			restricted
			while (LocalParentDimension5 entered)
				if (LocalParentDimension5.DimensionStructure != FinanceDimension5Structure)
					return
				if ((LocalParentDimension5.BudgetIdentifier = Dimension5Identifier
				and PendingContainingLocalParentDimension5Rel not exists)
				or RemoveContainingLocalParentAccountRel exists)
					return LocalParentDimension5
				LocalParentDimension5 	= LocalParentDimension5.ParentFinanceDimension5
			return
		BudgetParentDimension6 is a DerivedField
			type is AlphaUpper size 15
			restricted
			while (LocalParentDimension6 entered)
				if (LocalParentDimension6.DimensionStructure != FinanceDimension6Structure)
					return
				if ((LocalParentDimension6.BudgetIdentifier = Dimension6Identifier
				and PendingContainingLocalParentDimension6Rel not exists)
				or RemoveContainingLocalParentAccountRel exists)
					return LocalParentDimension6
				LocalParentDimension6 	= LocalParentDimension6.ParentFinanceDimension6
			return
		BudgetParentDimension7 is a DerivedField
			type is AlphaUpper size 15
			restricted
			while (LocalParentDimension7 entered)
				if (LocalParentDimension7.DimensionStructure != FinanceDimension7Structure)
					return
				if ((LocalParentDimension7.BudgetIdentifier = Dimension7Identifier
				and PendingContainingLocalParentDimension7Rel not exists)
				or RemoveContainingLocalParentAccountRel exists)
					return LocalParentDimension7
				LocalParentDimension7 	= LocalParentDimension7.ParentFinanceDimension7
			return
		BudgetParentDimension8 is a DerivedField
			type is AlphaUpper size 15
			restricted
			while (LocalParentDimension8 entered)
				if (LocalParentDimension8.DimensionStructure != FinanceDimension8Structure)
					return
				if ((LocalParentDimension8.BudgetIdentifier = Dimension8Identifier
				and PendingContainingLocalParentDimension8Rel not exists)
				or RemoveContainingLocalParentAccountRel exists)
					return LocalParentDimension8
				LocalParentDimension8 	= LocalParentDimension8.ParentFinanceDimension8
			return
		BudgetParentDimension9 is a DerivedField
			type is AlphaUpper size 15
			restricted
			while (LocalParentDimension9 entered)
				if (LocalParentDimension9.DimensionStructure != FinanceDimension9Structure)
					return
				if ((LocalParentDimension9.BudgetIdentifier = Dimension9Identifier
				and PendingContainingLocalParentDimension9Rel not exists)
				or RemoveContainingLocalParentAccountRel exists)
					return LocalParentDimension9
				LocalParentDimension9 	= LocalParentDimension9.ParentFinanceDimension9
			return
		BudgetParentDimension10 is a DerivedField
			type is AlphaUpper size 15
			restricted
			while (LocalParentDimension10 entered)
				if (LocalParentDimension10.DimensionStructure != FinanceDimension10Structure)
					return
				if ((LocalParentDimension10.BudgetIdentifier = Dimension10Identifier
				and PendingContainingLocalParentDimension10Rel not exists)
				or RemoveContainingLocalParentAccountRel exists)
					return LocalParentDimension10
				LocalParentDimension10 	= LocalParentDimension10.ParentFinanceDimension10
			return

		DerivedCurrency		is a DerivedField
			type is AlphaUpper size 5
    		restricted
			if (UseCurrency.EntityFunctional)
				return TransactionCodeBlock.ToAccountingEntity.FunctionalCurrency


















			else
			if (UseCurrency.Project)
				return TransactionCodeBlock.Project.Currency
			else
			if (UseCurrency.Report1)
				return FinanceEnterpriseGroup.ReportCurrencyOne
			else
			if (UseCurrency.Report2)
				return FinanceEnterpriseGroup.ReportCurrencyTwo
			else
			if (UseCurrency.Report3)
				return FinanceEnterpriseGroup.ReportCurrencyThree
			else
			if (UseCurrency.Report4)
				return FinanceEnterpriseGroup.ReportCurrencyFour
			else
			if (UseCurrency.Report5)
				return FinanceEnterpriseGroup.ReportCurrencyFive
		PendingAlert is a DerivedField
			type is MessageField
			if (Status.Ready)
				if (LazyActivation
				and HasRecalculate)
					return RecalculatePendingAlert
				else	
				if (CanProcessPendingRemoveOnly
				and	not CanProcessPendingOnly)
					return OnlyRemoveAlert
				else
				if ((not LazyActivation
				and HasRecalculate)
				or	HasNewNonManualembers
				or 	HasPendingManual)
					return PendingAlertMessage
			return blank

		OnlyRemoveAlert is a MessageField
			"PendingRemovesExist.RunActionProcessPendingRemove"

		PendingAlertMessage is a MessageField
			"PendingItemsExist.RunActionProcessPending"

		LazyPendingAlert is a MessageField 
			"PendingItemsExist.RunActionProcessPending"

		RecalculatePendingAlert is a MessageField
			"PendingRecalculateForBudgetGroupsExists;ReactivateTheTemplate"

		AccountingUnitStructure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.AccountingUnitStructure
		ProjectStructure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.ProjectStructure
		AccountStructure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.ReportingChart
		FinanceDimension1Structure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.FinanceDimension1Structure
		FinanceDimension2Structure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.FinanceDimension2Structure
		FinanceDimension3Structure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.FinanceDimension3Structure
		FinanceDimension4Structure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.FinanceDimension4Structure
		FinanceDimension5Structure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.FinanceDimension5Structure
		FinanceDimension6Structure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.FinanceDimension6Structure
		FinanceDimension7Structure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.FinanceDimension7Structure
		FinanceDimension8Structure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.FinanceDimension8Structure
		FinanceDimension9Structure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.FinanceDimension9Structure
		FinanceDimension10Structure is a StringField
			type is AlphaUpper 15 
			Scenario.Basis.FinanceDimension10Structure
		BudgetCalendar is a StringField
			type is AlphaUpper size 20 
			restricted
			Scenario.Basis.GeneralLedgerCalendar
		BudgetCalendarTopNode is a StringField
			type is AlphaUpper size 20 
			restricted
			Scenario.Basis.GeneralLedgerCalendar.TopNode

		AddBlankProject is a DerivedField
			type is LPLText
			restricted
			if (AllowBlankProject)
				return " and blank dimension\n"
			else
			 	return "\n"
		AddBlankDimension1 is a DerivedField
			type is LPLText
			restricted
			if (AllowBlankDimension1)
				return " and blank dimension\n"
			else
			 	return "\n"
		AddBlankDimension2 is a DerivedField
			type is LPLText
			restricted
			if (AllowBlankDimension2)
				return " and blank dimension\n"
			else
			 	return "\n"
		AddBlankDimension3 is a DerivedField
			type is LPLText
			restricted
			if (AllowBlankDimension3)
				return " and blank dimension\n"
			else
			 	return "\n"
		AddBlankDimension4 is a DerivedField
			type is LPLText
			restricted
			if (AllowBlankDimension4)
				return " and blank dimension\n"
			else
			 	return "\n"
		AddBlankDimension5 is a DerivedField
			type is LPLText
			restricted
			if (AllowBlankDimension5)
				return " and blank dimension\n"
			else
			 	return "\n"
		AddBlankDimension6 is a DerivedField
			type is LPLText
			restricted
			if (AllowBlankDimension6)
				return " and blank dimension\n"
			else
			 	return "\n"
		AddBlankDimension7 is a DerivedField
			type is LPLText
			restricted
			if (AllowBlankDimension7)
				return " and blank dimension\n"
			else
			 	return "\n"
		AddBlankDimension8 is a DerivedField
			type is LPLText
			restricted
			if (AllowBlankDimension8)
				return " and blank dimension\n"
			else
			 	return "\n"
		AddBlankDimension9 is a DerivedField
			type is LPLText
			restricted
			if (AllowBlankDimension9)
				return " and blank dimension\n"
			else
			 	return "\n"
		AddBlankDimension10 is a DerivedField
			type is LPLText
			restricted
			if (AllowBlankDimension10)
				return " and blank dimension\n"
			else
			 	return "\n"
		ShouldIncludeRecalculateInTransaction is a DerivedField
			type is Boolean
    		restricted
			if (Rebuild.HasRecalculate)
				if (Rebuild.HasRecalculateAccountingUnit
				and RecalculateContainingBudgetGroupAccountingUnitRel exists)
					return true
				if (Rebuild.HasRecalculateProject
				and RecalculateContainingBudgetGroupProjectRel exists)
					return true
				if (Rebuild.HasRecalculateAccount
				and RecalculateContainingBudgetGroupAccountRel exists)
					return true
				if (Rebuild.HasRecalculateDimension1
				and RecalculateContainingBudgetGroupDimension1Rel exists)
					return true
				if (Rebuild.HasRecalculateDimension2
				and RecalculateContainingBudgetGroupDimension2Rel exists)
					return true
				if (Rebuild.HasRecalculateDimension3
				and RecalculateContainingBudgetGroupDimension3Rel exists)
					return true
				if (Rebuild.HasRecalculateDimension4
				and RecalculateContainingBudgetGroupDimension4Rel exists)
					return true
				if (Rebuild.HasRecalculateDimension5
				and RecalculateContainingBudgetGroupDimension5Rel exists)
					return true
				if (Rebuild.HasRecalculateDimension6
				and RecalculateContainingBudgetGroupDimension6Rel exists)
					return true
				if (Rebuild.HasRecalculateDimension7
				and RecalculateContainingBudgetGroupDimension7Rel exists)
					return true
				if (Rebuild.HasRecalculateDimension8
				and RecalculateContainingBudgetGroupDimension8Rel exists)
					return true
				if (Rebuild.HasRecalculateDimension9
				and RecalculateContainingBudgetGroupDimension9Rel exists)
					return true
				if (Rebuild.HasRecalculateDimension10
				and RecalculateContainingBudgetGroupDimension10Rel exists)
					return true
			return false
		ShouldIncludePendingOrManualInTransaction is a DerivedField
			type is Boolean
    		restricted
			if (Rebuild.HasPending)
				if (Rebuild.HasPendingAccountingUnit
				and PendingContainingBudgetGroupAccountingUnitRel exists)
					return true
				if (Rebuild.HasPendingProject
				and PendingContainingBudgetGroupProjectRel exists)
					return true
				if (Rebuild.HasPendingAccount
				and PendingContainingBudgetGroupAccountRel exists)
					return true
				if (Rebuild.HasPendingDimension1
				and PendingContainingBudgetGroupDimension1Rel exists)
					return true
				if (Rebuild.HasPendingDimension2
				and PendingContainingBudgetGroupDimension2Rel exists)
					return true
				if (Rebuild.HasPendingDimension3
				and PendingContainingBudgetGroupDimension3Rel exists)
					return true
				if (Rebuild.HasPendingDimension4
				and PendingContainingBudgetGroupDimension4Rel exists)
					return true
				if (Rebuild.HasPendingDimension5
				and PendingContainingBudgetGroupDimension5Rel exists)
					return true
				if (Rebuild.HasPendingDimension6
				and PendingContainingBudgetGroupDimension6Rel exists)
					return true
				if (Rebuild.HasPendingDimension7
				and PendingContainingBudgetGroupDimension7Rel exists)
					return true
				if (Rebuild.HasPendingDimension8
				and PendingContainingBudgetGroupDimension8Rel exists)
					return true
				if (Rebuild.HasPendingDimension9
				and PendingContainingBudgetGroupDimension9Rel exists)
					return true
				if (Rebuild.HasPendingDimension10
				and PendingContainingBudgetGroupDimension10Rel exists)
					return true
			if (Rebuild.HasPendingManual)
				if (Rebuild.HasPendingManualAccountingUnit
				and ManualContainingBudgetGroupAccountingUnitRel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualProject
				and ManualContainingBudgetGroupProjectRel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualAccount
				and ManualContainingBudgetGroupAccountRel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualDimension1
				and ManualContainingBudgetGroupDimension1Rel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualDimension2
				and ManualContainingBudgetGroupDimension2Rel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualDimension3
				and ManualContainingBudgetGroupDimension3Rel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualDimension4
				and ManualContainingBudgetGroupDimension4Rel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualDimension5
				and ManualContainingBudgetGroupDimension5Rel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualDimension6
				and ManualContainingBudgetGroupDimension6Rel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualDimension7
				and ManualContainingBudgetGroupDimension7Rel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualDimension8
				and ManualContainingBudgetGroupDimension8Rel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualDimension9
				and ManualContainingBudgetGroupDimension9Rel.InitializedFromCube)
					return true
				if (Rebuild.HasPendingManualDimension10
				and ManualContainingBudgetGroupDimension10Rel.InitializedFromCube)
					return true
			return false
		ShouldIncludeTransaction is a DerivedField
			type is Boolean
    		restricted
			if (Rebuild.NewTemplate)
				return true
			if (IsLazyInitializing)
				return true
			if (ShouldIncludePendingOrManualInTransaction)
				return true
			return ShouldIncludeRecalculateInTransaction

		AreBatchEditsRunning is a DerivedField 
			type is Boolean
			restricted
			if (InCompleteBudgetEditBatchRel exists)
				return true				
			return false




		TransactionMatchesBudgetGroupNotRequiredDims is a DerivedField
			type is Boolean
			restricted
			if (BudgetGroup.BudgetTemplate.HasProject and BudgetGroup.Project != TransactionCodeBlock.Project)
				return false
			if (BudgetGroup.BudgetTemplate.HasDimension1 and BudgetGroup.FinanceDimension1 != TransactionCodeBlock.FinanceDimension1)
				return false
			if (BudgetGroup.BudgetTemplate.HasDimension2 and BudgetGroup.FinanceDimension2 != TransactionCodeBlock.FinanceDimension2)
				return false
			if (BudgetGroup.BudgetTemplate.HasDimension3 and BudgetGroup.FinanceDimension3 != TransactionCodeBlock.FinanceDimension3)
				return false
			if (BudgetGroup.BudgetTemplate.HasDimension4 and BudgetGroup.FinanceDimension4 != TransactionCodeBlock.FinanceDimension4)
				return false
			if (BudgetGroup.BudgetTemplate.HasDimension5 and BudgetGroup.FinanceDimension5 != TransactionCodeBlock.FinanceDimension5)
				return false
			if (BudgetGroup.BudgetTemplate.HasDimension6 and BudgetGroup.FinanceDimension6 != TransactionCodeBlock.FinanceDimension6)
				return false
			if (BudgetGroup.BudgetTemplate.HasDimension7 and BudgetGroup.FinanceDimension7 != TransactionCodeBlock.FinanceDimension7)
				return false
			if (BudgetGroup.BudgetTemplate.HasDimension8 and BudgetGroup.FinanceDimension8 != TransactionCodeBlock.FinanceDimension8)
				return false
			if (BudgetGroup.BudgetTemplate.HasDimension9 and BudgetGroup.FinanceDimension9 != TransactionCodeBlock.FinanceDimension9)
				return false
			if (BudgetGroup.BudgetTemplate.HasDimension10 and BudgetGroup.FinanceDimension10 != TransactionCodeBlock.FinanceDimension10)
				return false
			return true

		TransactionMatchesBudgetGroup is a DerivedField
			type is Boolean
			restricted							
			if (BudgetGroup.BudgetTemplate.HasAccountingEntity and BudgetGroup.AccountingEntity != TransactionCodeBlock.ToAccountingEntity)
				return false
			if (BudgetGroup.BudgetTemplate.HasAccountingUnit and BudgetGroup.AccountingUnit != TransactionCodeBlock.AccountingUnit)
				if (SummaryAccountingUnit)
					LocalParentAccountingEntity	= TransactionCodeBlock.ToAccountingEntity
					LocalPostingAccountingUnit	= TransactionCodeBlock.AccountingUnit
					if (MatchingBudgetTemplateAccountingUnitMemberRel.FromAccountingUnit != BudgetGroup.AccountingUnit)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasAccount and BudgetGroup.GeneralLedgerChartAccount != TransactionCodeBlock.GeneralLedgerChartAccount)
				if (SummaryAccount)
					LocalPostingAccount = TransactionCodeBlock.GeneralLedgerChartAccount
					if (MatchingBudgetTemplateAccountMemberRel.FromGeneralLedgerChartAccount != BudgetGroup.GeneralLedgerChartAccount)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasProject and BudgetGroup.Project != TransactionCodeBlock.Project)
				if (SummaryProject)
					LocalPostingProject = TransactionCodeBlock.Project
					if (MatchingBudgetTemplateProjectMemberRel.FromProject != BudgetGroup.Project)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasDimension1 and BudgetGroup.FinanceDimension1 != TransactionCodeBlock.FinanceDimension1)
				if (BudgetGroup.BudgetTemplate.SummaryDimension1)
					LocalPostingDimension1 = TransactionCodeBlock.FinanceDimension1
					if (MatchingBudgetTemplateDimension1MemberRel.FromFinanceDimension1 != BudgetGroup.FinanceDimension1)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasDimension2 and BudgetGroup.FinanceDimension2 != TransactionCodeBlock.FinanceDimension2)
				if (BudgetGroup.BudgetTemplate.SummaryDimension2)
					LocalPostingDimension2 = TransactionCodeBlock.FinanceDimension2
					if (MatchingBudgetTemplateDimension2MemberRel.FromFinanceDimension2 != BudgetGroup.FinanceDimension2)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasDimension3 and BudgetGroup.FinanceDimension3 != TransactionCodeBlock.FinanceDimension3)
				if (BudgetGroup.BudgetTemplate.SummaryDimension3)
					LocalPostingDimension3 = TransactionCodeBlock.FinanceDimension3
					if (MatchingBudgetTemplateDimension3MemberRel.FromFinanceDimension3 != BudgetGroup.FinanceDimension3)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasDimension4 and BudgetGroup.FinanceDimension4 != TransactionCodeBlock.FinanceDimension4)
				if (BudgetGroup.BudgetTemplate.SummaryDimension4)
					LocalPostingDimension4 = TransactionCodeBlock.FinanceDimension4
					if (MatchingBudgetTemplateDimension4MemberRel.FromFinanceDimension4 != BudgetGroup.FinanceDimension4)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasDimension5 and BudgetGroup.FinanceDimension5 != TransactionCodeBlock.FinanceDimension5)
				if (BudgetGroup.BudgetTemplate.SummaryDimension5)
					LocalPostingDimension5 = TransactionCodeBlock.FinanceDimension5
					if (MatchingBudgetTemplateDimension5MemberRel.FromFinanceDimension5 != BudgetGroup.FinanceDimension5)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasDimension6 and BudgetGroup.FinanceDimension6 != TransactionCodeBlock.FinanceDimension6)
				if (BudgetGroup.BudgetTemplate.SummaryDimension6)
					LocalPostingDimension6 = TransactionCodeBlock.FinanceDimension6
					if (MatchingBudgetTemplateDimension6MemberRel.FromFinanceDimension6 != BudgetGroup.FinanceDimension6)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasDimension7 and BudgetGroup.FinanceDimension7 != TransactionCodeBlock.FinanceDimension7)
				if (BudgetGroup.BudgetTemplate.SummaryDimension7)
					LocalPostingDimension7 = TransactionCodeBlock.FinanceDimension7
					if (MatchingBudgetTemplateDimension7MemberRel.FromFinanceDimension7 != BudgetGroup.FinanceDimension7)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasDimension8 and BudgetGroup.FinanceDimension8 != TransactionCodeBlock.FinanceDimension8)
				if (BudgetGroup.BudgetTemplate.SummaryDimension8)
					LocalPostingDimension8 = TransactionCodeBlock.FinanceDimension8
					if (MatchingBudgetTemplateDimension8MemberRel.FromFinanceDimension8 != BudgetGroup.FinanceDimension8)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasDimension9 and BudgetGroup.FinanceDimension9 != TransactionCodeBlock.FinanceDimension9)
				if (BudgetGroup.BudgetTemplate.SummaryDimension9)
					LocalPostingDimension9 = TransactionCodeBlock.FinanceDimension9
					if (MatchingBudgetTemplateDimension9MemberRel.FromFinanceDimension9 != BudgetGroup.FinanceDimension9)
						return false
				else
					return false
			if (BudgetGroup.BudgetTemplate.HasDimension10 and BudgetGroup.FinanceDimension10 != TransactionCodeBlock.FinanceDimension10)
				if (BudgetGroup.BudgetTemplate.SummaryDimension10)
					LocalPostingDimension10 = TransactionCodeBlock.FinanceDimension10
					if (MatchingBudgetTemplateDimension10MemberRel.FromFinanceDimension10 != BudgetGroup.FinanceDimension10)
						return false
				else
					return false



			return true

		BudgetCubeMap is a DerivedField
			type is LPLText
			restricted
			if (BudgetGroup.AccountingEntity entered)
				BudgetCubeMap += "related.AccountingEntity = BudgetGroup.AccountingEntity\n"
			else
				if (Scenario.HasAccountingEntity)
					BudgetCubeMap += "related.AccountingEntity = Scenario.Basis.AccountingEntityTopNode\n"
			if (BudgetGroup.AccountingUnit entered)
				BudgetCubeMap += "related.GeneralLedgerTotal.AccountingUnit = BudgetGroup.AccountingUnit\n"
			else
				if (Scenario.HasPostingAccountingUnit and !AllowBlankAccountingUnit)
					BudgetCubeMap += "related.GeneralLedgerTotal.AccountingUnit = Scenario.Basis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"
			if (BudgetGroup.GeneralLedgerChartAccount entered)
				BudgetCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = BudgetGroup.GeneralLedgerChartAccount\n"
			else
				if (Scenario.HasPostingAccount)
					BudgetCubeMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = Scenario.Basis.ReportingChart.ChartAccountNode\n"
			if (BudgetGroup.Project entered)
				BudgetCubeMap += "related.GeneralLedgerTotal.Project = BudgetGroup.Project\n"
			else
				if (Scenario.HasPostingProject and !AllowBlankProject)
					BudgetCubeMap += "related.GeneralLedgerTotal.Project = Scenario.Basis.ProjectStructure.ProjectNode\n"
			if (BudgetGroup.FinanceDimension1 entered)
				BudgetCubeMap += "related.FinanceDimension1 = BudgetGroup.FinanceDimension1\n"
			else
				if (Scenario.HasPostingDimension1 and !AllowBlankDimension1)
					BudgetCubeMap += "related.FinanceDimension1 = Scenario.Basis.FinanceDimension1Structure.DimensionNode\n"
			if (BudgetGroup.FinanceDimension2 entered)
				BudgetCubeMap += "related.FinanceDimension2 = BudgetGroup.FinanceDimension2\n"
			else
				if (Scenario.HasPostingDimension2 and !AllowBlankDimension2)
					BudgetCubeMap += "related.FinanceDimension2 = Scenario.Basis.FinanceDimension2Structure.DimensionNode\n"
			if (BudgetGroup.FinanceDimension3 entered)
				BudgetCubeMap += "related.FinanceDimension3 = BudgetGroup.FinanceDimension3\n"
			else
				if (Scenario.HasPostingDimension3 and !AllowBlankDimension3)
					BudgetCubeMap += "related.FinanceDimension3 = Scenario.Basis.FinanceDimension3Structure.DimensionNode\n"
			if (BudgetGroup.FinanceDimension4 entered)
				BudgetCubeMap += "related.FinanceDimension4 = BudgetGroup.FinanceDimension4\n"
			else
				if (Scenario.HasPostingDimension4 and !AllowBlankDimension4)
					BudgetCubeMap += "related.FinanceDimension4 = Scenario.Basis.FinanceDimension4Structure.DimensionNode\n"
			if (BudgetGroup.FinanceDimension5 entered)
				BudgetCubeMap += "related.FinanceDimension5 = BudgetGroup.FinanceDimension5\n"
			else
				if (Scenario.HasPostingDimension5 and !AllowBlankDimension5)
					BudgetCubeMap += "related.FinanceDimension5 = Scenario.Basis.FinanceDimension5Structure.DimensionNode\n"
			if (BudgetGroup.FinanceDimension6 entered)
				BudgetCubeMap += "related.FinanceDimension6 = BudgetGroup.FinanceDimension6\n"
			else
				if (Scenario.HasPostingDimension6 and !AllowBlankDimension6)
					BudgetCubeMap += "related.FinanceDimension6 = Scenario.Basis.FinanceDimension6Structure.DimensionNode\n"
			if (BudgetGroup.FinanceDimension7 entered)
				BudgetCubeMap += "related.FinanceDimension7 = BudgetGroup.FinanceDimension7\n"
			else
				if (Scenario.HasPostingDimension7 and !AllowBlankDimension7)
					BudgetCubeMap += "related.FinanceDimension7 = Scenario.Basis.FinanceDimension7Structure.DimensionNode\n"
			if (BudgetGroup.FinanceDimension8 entered)
				BudgetCubeMap += "related.FinanceDimension8 = BudgetGroup.FinanceDimension8\n"
			else
				if (Scenario.HasPostingDimension8 and !AllowBlankDimension8)
					BudgetCubeMap += "related.FinanceDimension8 = Scenario.Basis.FinanceDimension8Structure.DimensionNode\n"
			if (BudgetGroup.FinanceDimension9 entered)
				BudgetCubeMap += "related.FinanceDimension9 = BudgetGroup.FinanceDimension9\n"
			else
				if (Scenario.HasPostingDimension9 and !AllowBlankDimension9)
					BudgetCubeMap += "related.FinanceDimension9 = Scenario.Basis.FinanceDimension9Structure.DimensionNode\n"
			if (BudgetGroup.FinanceDimension10 entered)
				BudgetCubeMap += "related.FinanceDimension10 = BudgetGroup.FinanceDimension10\n"
			else
				if (Scenario.HasPostingDimension10 and !AllowBlankDimension10)
					BudgetCubeMap += "related.FinanceDimension10 = Scenario.Basis.FinanceDimension10Structure.DimensionNode\n"
		MatrixMap is a DerivedField
			type is LPLText
			restricted
			if (UseSparse)
				if (BudgetYearRange entered)

					MatrixMap += "related.GeneralLedgerTotal.EntityYearPeriod = BudgetYearRange.Start\n"
				else
					MatrixMap += "related.GeneralLedgerTotal.EntityYearPeriod = Scenario.Basis.CalendarTopNode\n"
			else
				MatrixMap += "related.GeneralLedgerTotal.EntityYearPeriod = BudgetCalendarPeriodsRel.GeneralLedgerCalendarPeriod\n"
			if (HasAccountingUnitOrHasAccountingEntity)
				constraint (Generated.AccountingEntity entered)
					"ExpectedGeneratedAccountingEntity"
				MatrixMap += "related.AccountingEntity = Generated.AccountingEntity\n"
			else
				MatrixMap += "related.AccountingEntity = Scenario.Basis.AccountingEntityTopNode\n"

			if (HasAccountingUnit)
				if (CurrentManualAccountingUnit entered)
					MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = CurrentManualAccountingUnitRel.AccountingUnit\n"
				else
				if (BudgetTemplateRecalculate.AccountingUnit entered)
					MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = BudgetTemplateRecalculate.AccountingUnit\n"
				else
				if (BudgetTemplatePending.AccountingUnit entered)
					MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = BudgetTemplatePending.AccountingUnit\n"
				else
				if (PostingAccountingUnit)
					MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = PostingAccountingUnitsRel.AccountingUnit\n"
				else
					constraint (SummaryAccountingUnit)
						"ExpectingSummaryAccountingUnit"
					MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = SummaryAccountingUnitsRel.AccountingUnit\n"
			else
				if (FinanceEnterpriseGroup.AccountingUnitSelected)
					MatrixMap += "related.GeneralLedgerTotal.AccountingUnit = Scenario.Basis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode\n"
			if (HasProject)
				if (BudgetTemplatePending.Project entered)
					MatrixMap += "related.GeneralLedgerTotal.Project = BudgetTemplatePending.Project\n"
				else
				if (BudgetTemplateRecalculate.Project entered)
					MatrixMap += "related.GeneralLedgerTotal.Project = BudgetTemplateRecalculate.Project\n"
				else
				if (BudgetTemplateManual.Project entered)
					MatrixMap += "related.GeneralLedgerTotal.Project = BudgetTemplateManual.Project\n"
				else
				if (ManualProject)
					MatrixMap += "related.GeneralLedgerTotal.Project = InitializedManualProjectRel.Project\n"
				else
				if (PostingProject)
					MatrixMap += "related.GeneralLedgerTotal.Project = PostingProjectsRel.Project" + AddBlankProject
				else
					MatrixMap += "related.GeneralLedgerTotal.Project = SummaryProjectsRel.Project\n"
			else
				if (FinanceEnterpriseGroup.ProjectEntry)
					MatrixMap += "related.GeneralLedgerTotal.Project = Scenario.Basis.ProjectStructure.ProjectNode\n"
			if (HasAccount)
				if (AccountCluster entered)
					if (AccountSection = 1)
						MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = ReportingChartAccountsSection1Rel.GeneralLedgerChartAccount\n"
					else
					if (AccountSection = 2)
						MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = ReportingChartAccountsSection2Rel.GeneralLedgerChartAccount\n"
					else
					if (AccountSection = 3)
						MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = ReportingChartAccountsSection3Rel.GeneralLedgerChartAccount\n"
				else
				if (BudgetTemplatePending.GeneralLedgerChartAccount entered)
					MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = BudgetTemplatePending.GeneralLedgerChartAccount\n"
				else
				if (BudgetTemplateRecalculate.GeneralLedgerChartAccount entered)
					MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = BudgetTemplateRecalculate.GeneralLedgerChartAccount\n"
				else
				if (BudgetTemplateManual.GeneralLedgerChartAccount entered)
					MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = BudgetTemplateManual.GeneralLedgerChartAccount\n"
				else
				if (ManualAccount)
					MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = InitializedManualAccountRel.GeneralLedgerChartAccount\n"
				else
				if (PostingAccount)
					if (AccountChartSection.Both)
						MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = PostingAccountsRel.GeneralLedgerChartAccount\n"
					else
					if (AccountChartSection.IncomeStatement)
						MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = IncomeStatementPostingAccountsRel.GeneralLedgerChartAccount\n"
					else
						MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = BalanceSheetPostingAccountsRel.GeneralLedgerChartAccount\n"
				else
					if (AccountChartSection.Both)
						MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = SummaryAccountsRel.GeneralLedgerChartAccount\n"
					else
					if (AccountChartSection.IncomeStatement)
						MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = IncomeStatementSummaryAccountsRel.GeneralLedgerChartAccount\n"
					else
						MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = BalanceSheetSummaryAccountsRel.GeneralLedgerChartAccount\n"
			else



			if (LocalReverseCommitmentAmount)
				MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = first UndistributedRetainedEarningAccountShadowRel.GeneralLedgerChartAccount\n"
			else
				MatrixMap += "related.GeneralLedgerTotal.GeneralLedgerChartAccount = Scenario.Basis.ReportingChart.ChartAccountNode\n"
			if (HasDimension1)
				if (BudgetTemplatePending.FinanceDimension1 entered)
					MatrixMap += "related.FinanceDimension1 = BudgetTemplatePending.FinanceDimension1\n"
				else
				if (BudgetTemplateRecalculate.FinanceDimension1 entered)
					MatrixMap += "related.FinanceDimension1 = BudgetTemplateRecalculate.FinanceDimension1\n"
				else
				if (BudgetTemplateManual.FinanceDimension1 entered)
					MatrixMap += "related.FinanceDimension1 = BudgetTemplateManual.FinanceDimension1\n"
				else
				if (ManualDimension1)
					MatrixMap += "related.FinanceDimension1 = InitializedManualDimension1Rel.FinanceDimension1\n"
				else
				if (PostingDimension1)
					MatrixMap += "related.FinanceDimension1 = PostingDimension1Rel.FinanceDimension1" + AddBlankDimension1
				else
					MatrixMap += "related.FinanceDimension1 = SummaryDimension1Rel.FinanceDimension1\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension1Entry)
					MatrixMap += "related.FinanceDimension1 = Scenario.Basis.FinanceDimension1Structure.DimensionNode\n"
			if (HasDimension2)
				if (BudgetTemplatePending.FinanceDimension2 entered)
					MatrixMap += "related.FinanceDimension2 = BudgetTemplatePending.FinanceDimension2\n"
				else
				if (BudgetTemplateRecalculate.FinanceDimension2 entered)
					MatrixMap += "related.FinanceDimension2 = BudgetTemplateRecalculate.FinanceDimension2\n"
				else
				if (BudgetTemplateManual.FinanceDimension2 entered)
					MatrixMap += "related.FinanceDimension2 = BudgetTemplateManual.FinanceDimension2\n"
				else
				if (ManualDimension2)
					MatrixMap += "related.FinanceDimension2 = InitializedManualDimension2Rel.FinanceDimension2\n"
				else
				if (PostingDimension2)
					MatrixMap += "related.FinanceDimension2 = PostingDimension2Rel.FinanceDimension2" + AddBlankDimension2
				else
					MatrixMap += "related.FinanceDimension2 = SummaryDimension2Rel.FinanceDimension2\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension2Entry)
					MatrixMap += "related.FinanceDimension2 = Scenario.Basis.FinanceDimension2Structure.DimensionNode\n"
			if (HasDimension3)
				if (BudgetTemplatePending.FinanceDimension3 entered)
					MatrixMap += "related.FinanceDimension3 = BudgetTemplatePending.FinanceDimension3\n"
				else
				if (BudgetTemplateRecalculate.FinanceDimension3 entered)
					MatrixMap += "related.FinanceDimension3 = BudgetTemplateRecalculate.FinanceDimension3\n"
				else
				if (BudgetTemplateManual.FinanceDimension3 entered)
					MatrixMap += "related.FinanceDimension3 = BudgetTemplateManual.FinanceDimension3\n"
				else
				if (ManualDimension3)
					MatrixMap += "related.FinanceDimension3 = InitializedManualDimension3Rel.FinanceDimension3\n"
				else
				if (PostingDimension3)
					MatrixMap += "related.FinanceDimension3 = PostingDimension3Rel.FinanceDimension3" + AddBlankDimension3
				else
					MatrixMap += "related.FinanceDimension3 = SummaryDimension3Rel.FinanceDimension3\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension3Entry)
					MatrixMap += "related.FinanceDimension3 = Scenario.Basis.FinanceDimension3Structure.DimensionNode\n"
			if (HasDimension4)
				if (BudgetTemplatePending.FinanceDimension4 entered)
					MatrixMap += "related.FinanceDimension4 = BudgetTemplatePending.FinanceDimension4\n"
				else
				if (BudgetTemplateRecalculate.FinanceDimension4 entered)
					MatrixMap += "related.FinanceDimension4 = BudgetTemplateRecalculate.FinanceDimension4\n"
				else
				if (BudgetTemplateManual.FinanceDimension4 entered)
					MatrixMap += "related.FinanceDimension4 = BudgetTemplateManual.FinanceDimension4\n"
				else
				if (ManualDimension4)
					MatrixMap += "related.FinanceDimension4 = InitializedManualDimension4Rel.FinanceDimension4\n"
				else
				if (PostingDimension4)
					MatrixMap += "related.FinanceDimension4 = PostingDimension4Rel.FinanceDimension4" + AddBlankDimension4
				else
					MatrixMap += "related.FinanceDimension4 = SummaryDimension4Rel.FinanceDimension4\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension4Entry)
					MatrixMap += "related.FinanceDimension4 = Scenario.Basis.FinanceDimension4Structure.DimensionNode\n"
			if (HasDimension5)
				if (BudgetTemplatePending.FinanceDimension5 entered)
					MatrixMap += "related.FinanceDimension5 = BudgetTemplatePending.FinanceDimension5\n"
				else
				if (BudgetTemplateRecalculate.FinanceDimension5 entered)
					MatrixMap += "related.FinanceDimension5 = BudgetTemplateRecalculate.FinanceDimension5\n"
				else
				if (BudgetTemplateManual.FinanceDimension5 entered)
					MatrixMap += "related.FinanceDimension5 = BudgetTemplateManual.FinanceDimension5\n"
				else
				if (ManualDimension5)
					MatrixMap += "related.FinanceDimension5 = InitializedManualDimension5Rel.FinanceDimension5\n"
				else
				if (PostingDimension5)
					MatrixMap += "related.FinanceDimension5 = PostingDimension5Rel.FinanceDimension5" + AddBlankDimension5
				else
					MatrixMap += "related.FinanceDimension5 = SummaryDimension5Rel.FinanceDimension5\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension5Entry)
					MatrixMap += "related.FinanceDimension5 = Scenario.Basis.FinanceDimension5Structure.DimensionNode\n"
			if (HasDimension6)
				if (BudgetTemplatePending.FinanceDimension6 entered)
					MatrixMap += "related.FinanceDimension6 = BudgetTemplatePending.FinanceDimension6\n"
				else
				if (BudgetTemplateRecalculate.FinanceDimension6 entered)
					MatrixMap += "related.FinanceDimension6 = BudgetTemplateRecalculate.FinanceDimension6\n"
				else
				if (BudgetTemplateManual.FinanceDimension6 entered)
					MatrixMap += "related.FinanceDimension6 = BudgetTemplateManual.FinanceDimension6\n"
				else
				if (ManualDimension6)
					MatrixMap += "related.FinanceDimension6 = InitializedManualDimension6Rel.FinanceDimension6\n"
				else
				if (PostingDimension6)
					MatrixMap += "related.FinanceDimension6 = PostingDimension6Rel.FinanceDimension6" + AddBlankDimension6
				else
					MatrixMap += "related.FinanceDimension6 = SummaryDimension6Rel.FinanceDimension6\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension6Entry)
					MatrixMap += "related.FinanceDimension6 = Scenario.Basis.FinanceDimension6Structure.DimensionNode\n"
			if (HasDimension7)
				if (BudgetTemplatePending.FinanceDimension7 entered)
					MatrixMap += "related.FinanceDimension7 = BudgetTemplatePending.FinanceDimension7\n"
				else
				if (BudgetTemplateRecalculate.FinanceDimension7 entered)
					MatrixMap += "related.FinanceDimension7 = BudgetTemplateRecalculate.FinanceDimension7\n"
				else
				if (BudgetTemplateManual.FinanceDimension7 entered)
					MatrixMap += "related.FinanceDimension7 = BudgetTemplateManual.FinanceDimension7\n"
				else
				if (ManualDimension7)
					MatrixMap += "related.FinanceDimension7 = InitializedManualDimension7Rel.FinanceDimension7\n"
				else
				if (PostingDimension7)
					MatrixMap += "related.FinanceDimension7 = PostingDimension7Rel.FinanceDimension7" + AddBlankDimension7
				else
					MatrixMap += "related.FinanceDimension7 = SummaryDimension7Rel.FinanceDimension7\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension7Entry)
					MatrixMap += "related.FinanceDimension7 = Scenario.Basis.FinanceDimension7Structure.DimensionNode\n"
			if (HasDimension8)
				if (BudgetTemplatePending.FinanceDimension8 entered)
					MatrixMap += "related.FinanceDimension8 = BudgetTemplatePending.FinanceDimension8\n"
				else
				if (BudgetTemplateRecalculate.FinanceDimension8 entered)
					MatrixMap += "related.FinanceDimension8 = BudgetTemplateRecalculate.FinanceDimension8\n"
				else
				if (BudgetTemplateManual.FinanceDimension8 entered)
					MatrixMap += "related.FinanceDimension8 = BudgetTemplateManual.FinanceDimension8\n"
				else
				if (ManualDimension8)
					MatrixMap += "related.FinanceDimension8 = InitializedManualDimension8Rel.FinanceDimension8\n"
				else
				if (PostingDimension8)
					MatrixMap += "related.FinanceDimension8 = PostingDimension8Rel.FinanceDimension8" + AddBlankDimension8
				else
					MatrixMap += "related.FinanceDimension8 = SummaryDimension8Rel.FinanceDimension8\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension8Entry)
					MatrixMap += "related.FinanceDimension8 = Scenario.Basis.FinanceDimension8Structure.DimensionNode\n"
			if (HasDimension9)
				if (BudgetTemplatePending.FinanceDimension9 entered)
					MatrixMap += "related.FinanceDimension9 = BudgetTemplatePending.FinanceDimension9\n"
				else
				if (BudgetTemplateRecalculate.FinanceDimension9 entered)
					MatrixMap += "related.FinanceDimension9 = BudgetTemplateRecalculate.FinanceDimension9\n"
				else
				if (BudgetTemplateManual.FinanceDimension9 entered)
					MatrixMap += "related.FinanceDimension9 = BudgetTemplateManual.FinanceDimension9\n"
				else
				if (ManualDimension9)
					MatrixMap += "related.FinanceDimension9 = InitializedManualDimension9Rel.FinanceDimension9\n"
				else
				if (PostingDimension9)
					MatrixMap += "related.FinanceDimension9 = PostingDimension9Rel.FinanceDimension9" + AddBlankDimension9
				else
					MatrixMap += "related.FinanceDimension9 = SummaryDimension9Rel.FinanceDimension9\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension9Entry)
					MatrixMap += "related.FinanceDimension9 = Scenario.Basis.FinanceDimension9Structure.DimensionNode\n"
			if (HasDimension10)
				if (BudgetTemplatePending.FinanceDimension10 entered)
					MatrixMap += "related.FinanceDimension10 = BudgetTemplatePending.FinanceDimension10\n"
				else
				if (BudgetTemplateRecalculate.FinanceDimension10 entered)
					MatrixMap += "related.FinanceDimension10 = BudgetTemplateRecalculate.FinanceDimension10\n"
				else
				if (BudgetTemplateManual.FinanceDimension10 entered)
					MatrixMap += "related.FinanceDimension10 = BudgetTemplateManual.FinanceDimension10\n"
				else
				if (ManualDimension10)
					MatrixMap += "related.FinanceDimension10 = InitializedManualDimension10Rel.FinanceDimension10\n"
				else
				if (PostingDimension10)
					MatrixMap += "related.FinanceDimension10 = PostingDimension10Rel.FinanceDimension10" + AddBlankDimension10
				else
					MatrixMap += "related.FinanceDimension10 = SummaryDimension10Rel.FinanceDimension10\n"
			else
				if (FinanceEnterpriseGroup.FinanceDimension10Entry)
					MatrixMap += "related.FinanceDimension10 = Scenario.Basis.FinanceDimension10Structure.DimensionNode\n"
		DynamicMeasure is a DerivedField
			type is LPLText
			restricted
			if (UseCurrency.EntityFunctional)
				DynamicMeasure = "NetFunctionalAmount"
			else
			if (UseCurrency.Project)
				DynamicMeasure = "NetProjectAmount"









			else
			if (UseCurrency.Report1)
				DynamicMeasure = "NetReportAmount1"
			else
			if (UseCurrency.Report2)
				DynamicMeasure = "NetReportAmount2"
			else
			if (UseCurrency.Report3)
				DynamicMeasure = "NetReportAmount3"
			else
			if (UseCurrency.Report4)
				DynamicMeasure = "NetReportAmount4"
			else
			if (UseCurrency.Report5)
				DynamicMeasure = "NetReportAmount5"
				
		DynamicSelection is a DerivedField
			type is LPLText
			restricted
			is condition for BusinessClassName //"GLCommit"
			LocalQuote				= "\""
			DynamicSelection		= "("
			if (!SkipSystemCheck)
				for each BudgetedSystemCodesRel
					if (DynamicSelection = "(")
						if (BudgetGroup entered
						and !SkipTransactionCheck)
							DynamicSelection		+= "("
						DynamicSelection += "(" + RelationName + ".System="
						DynamicSelection += LocalQuote
						DynamicSelection += each.GeneralLedgerSystemCode
						DynamicSelection += LocalQuote
						DynamicSelection += ")"
					else
						DynamicSelection += " or (" + RelationName + ".System="
						DynamicSelection += LocalQuote
						DynamicSelection += each.GeneralLedgerSystemCode
						DynamicSelection += LocalQuote
						DynamicSelection += ")"
				DynamicSelection += ")"
			else
				DynamicSelection += "("	+ RelationName + ".System=GL)"			
			
			if (BudgetGroup entered
			and !SkipTransactionCheck)
				if (HasAccountingEntity)
					DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.ToAccountingEntity = " + LocalQuote + BudgetGroup.AccountingEntity + LocalQuote + " )"

				if (HasAccount)
					if (SummaryAccount)
						LocalParentAccount  = BudgetGroup.GeneralLedgerChartAccount

						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.GeneralLedgerChartAccount = any ChildrenBudgetTemplateAccountMembersRel.ToGeneralLedgerChartAccount )"
					else
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.GeneralLedgerChartAccount = " + LocalQuote + BudgetGroup.GeneralLedgerChartAccount + LocalQuote + " )"

				if (HasAccountingUnit)
					if (SummaryAccountingUnit)
						LocalParentAccountingEntity = BudgetGroup.AccountingEntity
						LocalParentAccountingUnit	= BudgetGroup.AccountingUnit

						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.AccountingUnit = any ChildrenBudgetTemplateAccountingUnitMembersRel.ToAccountingUnit )"
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.ToAccountingEntity = " +  LocalQuote + BudgetGroup.AccountingEntity + LocalQuote + " )" 
					else
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.AccountingUnit = " + LocalQuote + BudgetGroup.AccountingUnit + LocalQuote + " )"
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.ToAccountingEntity = " + LocalQuote + BudgetGroup.AccountingEntity + LocalQuote + " )" 

				if (HasProject)
					if (BudgetGroup.Project entered)
						if (SummaryProject)
							LocalParentProject = BudgetGroup.Project
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.Project = any ChildrenBudgetTemplateProjectMembersRel.ToProject )"
						else
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.Project = " + LocalQuote + BudgetGroup.Project + LocalQuote + " )"
					else
					if (EditBlanks)
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.Project not entered)"

				if (HasDimension1)
					if (BudgetGroup.FinanceDimension1 entered)
						if (SummaryDimension1)
							LocalParentDimension1 = BudgetGroup.FinanceDimension1

							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension1 = any ChildrenBudgetTemplateDimension1MembersRel.ToFinanceDimension1 )"
						else
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension1 = " +  LocalQuote + BudgetGroup.FinanceDimension1 + LocalQuote + " )"
					else
					if (EditBlanks)
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension1 not entered)"

				if (HasDimension2)
					if (BudgetGroup.FinanceDimension2 entered)
						if (SummaryDimension2)
							LocalParentDimension2 = BudgetGroup.FinanceDimension2

							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension2 = any ChildrenBudgetTemplateDimension2MembersRel.ToFinanceDimension2 )"
						else
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension2 = " + LocalQuote + BudgetGroup.FinanceDimension2 + LocalQuote + " )"
					else
					if (EditBlanks)
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension2 not entered)"

				if (HasDimension3)
					if (BudgetGroup.FinanceDimension3 entered)
						if (SummaryDimension3)
							LocalParentDimension3 = BudgetGroup.FinanceDimension3

							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension3 = any ChildrenBudgetTemplateDimension3MembersRel.ToFinanceDimension3 )"
						else
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension3 = " + LocalQuote + BudgetGroup.FinanceDimension3 + LocalQuote + " )"
					else
					if (EditBlanks)
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension3 not entered)"

				if (HasDimension4)
					if (BudgetGroup.FinanceDimension4 entered)
						if (SummaryDimension4)
							LocalParentDimension4 = BudgetGroup.FinanceDimension4	

							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension4 = any ChildrenBudgetTemplateDimension4MembersRel.ToFinanceDimension4 )"
						else
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension4 = " + LocalQuote + BudgetGroup.FinanceDimension4 + LocalQuote + " )"
					else
					if (EditBlanks)
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension4 not entered)"

				if (HasDimension5)
					if (BudgetGroup.FinanceDimension5 entered)
						if (SummaryDimension5)
							LocalParentDimension5 = BudgetGroup.FinanceDimension5

							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension5 = any ChildrenBudgetTemplateDimension5MembersRel.ToFinanceDimension5 )"
						else
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension5 = " + LocalQuote + BudgetGroup.FinanceDimension5 + LocalQuote + " )"
					else
					if (EditBlanks)
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension5 not entered)"
					
				if (HasDimension6)
					if (BudgetGroup.FinanceDimension6 entered)
						if (SummaryDimension6)
							LocalParentDimension6 = BudgetGroup.FinanceDimension6

							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension6 = any ChildrenBudgetTemplateDimension6MembersRel.ToFinanceDimension6 )"
						else
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension6 = " + LocalQuote + BudgetGroup.FinanceDimension6 + LocalQuote + " )"
					else
					if (EditBlanks)
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension6 not entered)"
					
				if (HasDimension7)
					if (BudgetGroup.FinanceDimension7 entered)
						if (SummaryDimension7)
							LocalParentDimension7 = BudgetGroup.FinanceDimension7

							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension7 = any ChildrenBudgetTemplateDimension7MembersRel.ToFinanceDimension7 )"
						else
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension7 = " + LocalQuote + BudgetGroup.FinanceDimension7 + LocalQuote + " )"
					else
					if (EditBlanks)
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension7 not entered)"
					
				if (HasDimension8)
					if (BudgetGroup.FinanceDimension8 entered)
						if (SummaryDimension8)
							LocalParentDimension8 = BudgetGroup.FinanceDimension8

							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension8 = any ChildrenBudgetTemplateDimension8MembersRel.ToFinanceDimension8 )"
						else
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension8 = " + LocalQuote + BudgetGroup.FinanceDimension8 + LocalQuote + " )"
					else
					if (EditBlanks)
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension8 not entered)"
					
				if (HasDimension9)
					if (BudgetGroup.FinanceDimension9 entered)
						if (SummaryDimension9)
							LocalParentDimension9 = BudgetGroup.FinanceDimension9

							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension9 = any ChildrenBudgetTemplateDimension9MembersRel.ToFinanceDimension9 )"
						else
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension9 = " + LocalQuote + BudgetGroup.FinanceDimension9 + LocalQuote + " )"
					else
					if (EditBlanks)
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension9 not entered)"

				if (HasDimension10)
					if (BudgetGroup.FinanceDimension10 entered)
						if (SummaryDimension10)
							LocalParentDimension10 = BudgetGroup.FinanceDimension10

							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension10 = any ChildrenBudgetTemplateDimension10MembersRel.ToFinanceDimension10 )"
						else
							DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension10 = " + LocalQuote + BudgetGroup.FinanceDimension10 + LocalQuote + " )"
					else
					if (EditBlanks)
						DynamicSelection += " and (" + RelationName + ".FinanceCodeBlock.FinanceDimension10 not entered)"
					
				DynamicSelection += ")"


		DerivedLatestLocalObligationLogTimeStamp	is a DerivedField
			type is TimeStamp
			default label is "LatestLocalObligationUpdate"
			return first LatestLocalObligationLogRel.LogTimeStamp

		ErrorUREOnChartAccount			is a MessageField 
			restricted
			"Warning:_TheSystemUndistributedRetainedEarnings_<FinanceEnterpriseGroup.AccountLabel>IsIncludedInTheChart.TheCalculationOfTotalObligationsWillIncludeTheUndistributedRetainedEarningsEntries."

		DerivedUREOnChartAccount		is a DerivedField
			type is like GeneralLedgerChartAccount
			restricted
			return first UndistributedRetainedEarningAccountShadowRel.GeneralLedgerChartAccount
	Conditions
		IsNonActiveStatus
			restricted
			when (Status.NotReady
			or    Status.Clearing
			or    Status.NeedsCleanup)
	    IsCreated
	    	restricted
	        when (BudgetTemplate exists)
	    IsYearToDate
	    	when (PeriodToDate.YearToDate)
	    IsLifeToDate
	    	when (PeriodToDate.LifeToDate)

	    ReadyOrProcessing
	    	restricted
	    	when (!Status.NotReady
	    	and !Status.Clearing)
	    NeedsCleanup
	    	restricted
	    	when (NeedsCleanupCube
	    	or NeedsCleanupGroupTotals)
	    DisplayAccountChartSection
	    	restricted
	    	when (HasAccount)
		IsAccountEditable
			restricted
			when (AccountChartSection.Both
			or (AccountChartSection.IncomeStatement
			and ValidationAccount.IncomeStatementAccount)
			or (AccountChartSection.BalanceSheet
			and ValidationAccount.BalanceSheetAccount))
		ShouldProcessAccountForTransaction
			restricted
			when (!HasAccount
			or IsAccountEditable)
		CanDelete	
			restricted
	    	when (Status.NotReady
	    	or Status.Clearing)
		ErrorGroupsExist
			restricted
			when (false)
		DisplayErrorCheckTime
			restricted
			when (ErrorCheckTime entered
			and !CheckingForErrors)
		DisplayErrorCheckStatus
			restricted
			when (DisplayErrorCheckTime
			or CheckingForErrors)
		HasManual
			restricted
			when (ManualAccountingUnit or ManualAccount or ManualProject
			or ManualDimension1
			or ManualDimension2
			or ManualDimension3
			or ManualDimension4
			or ManualDimension5
			or ManualDimension6
			or ManualDimension7
			or ManualDimension8
			or ManualDimension9
			or ManualDimension10)
		HasNewNonManualembers
			restricted
			when (BudgetPendingsRel exists)
		HasPending	
			restricted
			when (BudgetPendingsRel exists
			or BudgetManualPendingsRel exists
			or HasRecalculate
			or CanProcessPendingRemoveOnly)
		ReadyOrNeedsCleanup
			when (Status.Ready
			or Status.NeedsCleanup)
		CanProcessPendingRemoveOnly
			restricted
			when (BudgetManualPendingRemovesRel exists
			or BudgetRemovesRel exists)
		CanProcessPendingRemove
			restricted
			when (ReadyOrNeedsCleanup
			and CanProcessPendingRemoveOnly )
		HasPendingRemoveExclusive

			when (!CanProcessPendingOnly
			and CanProcessPendingRemove)
		CanProcessPendingOnly
			restricted
			when (HasRecalculate
			or BudgetPendingsRel exists
			or BudgetManualPendingsRel exists


			or RecalculateBudgetGroupsRel exists)
		CanLazyProcessPending
			restricted
			when (ReadyOrNeedsCleanup
			and LazyActivation
			and !HasRecalculate
			and RecalculateBudgetGroupsRel not exists
			and (BudgetPendingsRel exists or BudgetManualPendingsRel exists))
		CanProcessPending
			restricted
			when (ReadyOrNeedsCleanup
			and !LazyActivation
			and CanProcessPendingOnly)
		HasRemove	
			restricted
			when (BudgetRemovesRel exists)
		HasPendingManual
			restricted
			when (BudgetManualPendingsRel exists)
		HasPendingGroups
			restricted
			when (RecalculateBudgetGroupsRel exists)
		HasCheckedGroups
			restricted
			when (CheckedGroupsWithinThresholdRel exists)
		HasVarianceReport
			restricted
			when (VarianceReportRel exists)	
		DisplayCheckedGroups
			restricted
			when (CheckGroups
			and HasCheckedGroups)

	    IsAccountingEntity
	    	restricted
	        when (PrimaryAccountingEntity)
	    IsAccountingUnit
	    	restricted
	        when (PrimaryAccountingUnit)
        IsProject
        	restricted
            when (PrimaryProject)
        IsDimension1
        	restricted
            when (PrimaryDimension1)
        IsDimension2
        	restricted
            when (PrimaryDimension2)
        IsDimension3
        	restricted
            when (PrimaryDimension3)
        IsDimension4
        	restricted
            when (PrimaryDimension4)
        IsDimension5
        	restricted
            when (PrimaryDimension5)
        IsDimension6
        	restricted
            when (PrimaryDimension6)
        IsDimension7
        	restricted
            when (PrimaryDimension7)
        IsDimension8
        	restricted
            when (PrimaryDimension8)
        IsDimension9
        	restricted
            when (PrimaryDimension9)
        IsDimension10
        	restricted
            when (PrimaryDimension10)

        HasSecondaryAccountingEntity
        	restricted
            when (HasAccountingEntity and !PrimaryAccountingEntity)
        HasSecondaryAccount
        	restricted
            when (HasAccount)
        HasSecondaryProject 
        	restricted
            when (HasProject and !PrimaryProject)
        HasSecondaryDimension1  
        	restricted
            when (HasDimension1 and !PrimaryDimension1)
        HasSecondaryDimension2  
        	restricted
            when (HasDimension2 and !PrimaryDimension2)
        HasSecondaryDimension3    
        	restricted          
            when (HasDimension3 and !PrimaryDimension3)
        HasSecondaryDimension4   
        	restricted           
            when (HasDimension4 and !PrimaryDimension4)
        HasSecondaryDimension5      
        	restricted        
            when (HasDimension5 and !PrimaryDimension5)
        HasSecondaryDimension6 
        	restricted             
            when (HasDimension6 and !PrimaryDimension6)
        HasSecondaryDimension7 
        	restricted             
            when (HasDimension7 and !PrimaryDimension7)
        HasSecondaryDimension8   
        	restricted           
            when (HasDimension8 and !PrimaryDimension8)
        HasSecondaryDimension9     
        	restricted         
            when (HasDimension9 and !PrimaryDimension9)
        HasSecondaryDimension10    
        	restricted          
            when (HasDimension10 and !PrimaryDimension10)
            
        HasAccountingUnit
        	restricted
        	when (PostingAccountingUnit or AccountingUnitIdentifier entered or ManualAccountingUnit)
        HasProject
        	restricted
        	when (PostingProject or ProjectIdentifier entered or ManualProject)
        HasAccountingEntity
        	restricted
            when (PostingAccountingEntity)
        IsAccountingUnitOrIsAccountingEntity
        	restricted
        	when (IsAccountingUnit or IsAccountingEntity)
        HasAccountingUnitOrHasAccountingEntity
        	restricted
        	when (HasAccountingUnit or HasAccountingEntity)
        HasAccount
        	restricted
            when (PostingAccount or AccountIdentifier entered or ManualAccount)
        HasDimension1  
        	restricted
            when (PostingDimension1 or Dimension1Identifier entered or ManualDimension1)
        HasDimension2
        	restricted  
            when (PostingDimension2 or Dimension2Identifier entered or ManualDimension2)
        HasDimension3     
        	restricted         
            when (PostingDimension3 or Dimension3Identifier entered or ManualDimension3)
        HasDimension4 
        	restricted             
            when (PostingDimension4 or Dimension4Identifier entered or ManualDimension4)
        HasDimension5  
        	restricted            
            when (PostingDimension5 or Dimension5Identifier entered or ManualDimension5)
        HasDimension6 
        	restricted             
            when (PostingDimension6 or Dimension6Identifier entered or ManualDimension6)
        HasDimension7
			restricted             
            when (PostingDimension7 or Dimension7Identifier entered or ManualDimension7)
        HasDimension8     
        	restricted         
            when (PostingDimension8 or Dimension8Identifier entered or ManualDimension8)
        HasDimension9     
        	restricted         
            when (PostingDimension9 or Dimension9Identifier entered or ManualDimension9)
        HasDimension10   
        	restricted           
            when (PostingDimension10 or Dimension10Identifier entered or ManualDimension10)
            
		SummaryAccountingUnit
			restricted
			when (AccountingUnitIdentifier entered)
		SummaryProject
			restricted
			when (ProjectIdentifier entered)
		SummaryAccount
			restricted
			when (AccountIdentifier entered)
		SummaryDimension1
			restricted
			when (Dimension1Identifier entered)
		SummaryDimension2
			restricted
			when (Dimension2Identifier entered)
		SummaryDimension3
			restricted
			when (Dimension3Identifier entered)
		SummaryDimension4
			restricted
			when (Dimension4Identifier entered)
		SummaryDimension5
			restricted
			when (Dimension5Identifier entered)
		SummaryDimension6
			restricted
			when (Dimension6Identifier entered)
		SummaryDimension7
			restricted
			when (Dimension7Identifier entered)
		SummaryDimension8
			restricted
			when (Dimension8Identifier entered)
		SummaryDimension9
			restricted
			when (Dimension9Identifier entered)
		SummaryDimension10
			restricted
			when (Dimension10Identifier entered)
		HasSummary
			restricted
			when (SummaryAccountingUnit
			or SummaryProject
			or SummaryAccount
			or SummaryDimension1
			or SummaryDimension2
			or SummaryDimension3			
			or SummaryDimension4		
			or SummaryDimension5
			or SummaryDimension6
			or SummaryDimension7
			or SummaryDimension8			
			or SummaryDimension9		
			or SummaryDimension10)
		CanChooseAccountingEntity
			restricted
			when (Scenario.HasAccountingEntity)
		CanChooseAccountingUnit
			restricted
			when (Scenario.HasPostingAccountingUnit)
		CanChooseAccount
			restricted
			when (Scenario.HasPostingAccount)
		CanChooseProject
			restricted
			when (Scenario.HasPostingProject)
		CanChooseDimension1
			restricted
			when (Scenario.HasPostingDimension1)
		CanChooseDimension2
			restricted
			when (Scenario.HasPostingDimension2)
		CanChooseDimension3
			restricted
			when (Scenario.HasPostingDimension3)
		CanChooseDimension4
			restricted
			when (Scenario.HasPostingDimension4)
		CanChooseDimension5
			restricted
			when (Scenario.HasPostingDimension5)
		CanChooseDimension6
			restricted
			when (Scenario.HasPostingDimension6)
		CanChooseDimension7
			restricted
			when (Scenario.HasPostingDimension7)
		CanChooseDimension8
			restricted
			when (Scenario.HasPostingDimension8)
		CanChooseDimension9
			restricted
			when (Scenario.HasPostingDimension9)
		CanChooseDimension10
			restricted
			when (Scenario.HasPostingDimension10)

		NotifyOnAccountingUnit
			restricted
			when (HasAccountingUnit
			and !ManualAccountingUnit
			and ReadyOrProcessing)
			
		NotifyOnProject
			restricted
			when (HasProject
			and !ManualProject
			and ReadyOrProcessing)
			
		NotifyOnAccount
			restricted
			when (HasAccount
			and !ManualAccount
			and ReadyOrProcessing)
			
		NotifyOnDimension1
			restricted
			when (HasDimension1
			and !ManualDimension1
			and ReadyOrProcessing)
			
		NotifyOnDimension2
			restricted
			when (HasDimension2
			and !ManualDimension2
			and ReadyOrProcessing)
			
		NotifyOnDimension3
			restricted
			when (HasDimension3
			and !ManualDimension3
			and ReadyOrProcessing)
			
		NotifyOnDimension4
			restricted
			when (HasDimension4
			and !ManualDimension4
			and ReadyOrProcessing)
			
		NotifyOnDimension5
			restricted
			when (HasDimension5
			and !ManualDimension5
			and ReadyOrProcessing)
			
		NotifyOnDimension6
			restricted
			when (HasDimension6
			and !ManualDimension6
			and ReadyOrProcessing)
			
		NotifyOnDimension7
			restricted
			when (HasDimension7
			and !ManualDimension7
			and ReadyOrProcessing)
			
		NotifyOnDimension8
			restricted
			when (HasDimension8
			and !ManualDimension8
			and ReadyOrProcessing)
			
		NotifyOnDimension9
			restricted
			when (HasDimension9
			and !ManualDimension9
			and ReadyOrProcessing)
			
		NotifyOnDimension10
			restricted
			when (HasDimension10
			and !ManualDimension10
			and ReadyOrProcessing)
			
		NotifyOnAccountingUnitRemove
			restricted
			when (ManualAccountingUnit or NotifyOnAccountingUnit)
		NotifyOnProjectRemove
			restricted
			when (ManualProject or NotifyOnProject)
		NotifyOnAccountRemove
			restricted
			when (ManualAccount or NotifyOnAccount)
		NotifyOnDimension1Remove
			restricted
			when (ManualDimension1 or NotifyOnDimension1)
		NotifyOnDimension2Remove
			restricted
			when (ManualDimension2 or NotifyOnDimension2)
		NotifyOnDimension3Remove
			restricted
			when (ManualDimension3 or NotifyOnDimension3)
		NotifyOnDimension4Remove
			restricted
			when (ManualDimension4 or NotifyOnDimension4)
		NotifyOnDimension5Remove
			restricted
			when (ManualDimension5 or NotifyOnDimension5)
		NotifyOnDimension6Remove
			restricted
			when (ManualDimension6 or NotifyOnDimension6)
		NotifyOnDimension7Remove
			restricted
			when (ManualDimension7 or NotifyOnDimension7)
		NotifyOnDimension8Remove
			restricted
			when (ManualDimension8 or NotifyOnDimension8)
		NotifyOnDimension9Remove
			restricted
			when (ManualDimension9 or NotifyOnDimension9)
		NotifyOnDimension10Remove
			restricted
			when (ManualDimension10 or NotifyOnDimension10)
		AllowBlankAccountingUnit
			restricted
			when (!FinanceEnterpriseGroup.AccountingUnitRequired
			and EditBlanks
			and PostingAccountingUnit)
		AllowBlankProject
			restricted
			when (!FinanceEnterpriseGroup.ProjectRequired
			and EditBlanks
			and !UseCurrency.Project
			and PostingProject)
		AllowBlankDimension1
			restricted
			when (!FinanceEnterpriseGroup.FinanceDimension1Required
			and EditBlanks
			and PostingDimension1)
		AllowBlankDimension2
			restricted
			when (!FinanceEnterpriseGroup.FinanceDimension2Required
			and EditBlanks
			and PostingDimension2)
		AllowBlankDimension3
			restricted
			when (!FinanceEnterpriseGroup.FinanceDimension3Required
			and EditBlanks
			and PostingDimension3)
		AllowBlankDimension4
			restricted
			when (!FinanceEnterpriseGroup.FinanceDimension4Required
			and EditBlanks
			and PostingDimension4)
		AllowBlankDimension5
			restricted
			when (!FinanceEnterpriseGroup.FinanceDimension5Required
			and EditBlanks
			and PostingDimension5)
		AllowBlankDimension6
			restricted
			when (!FinanceEnterpriseGroup.FinanceDimension6Required
			and EditBlanks
			and PostingDimension6)
		AllowBlankDimension7
			restricted
			when (!FinanceEnterpriseGroup.FinanceDimension7Required
			and EditBlanks
			and PostingDimension7)
		AllowBlankDimension8
			restricted
			when (!FinanceEnterpriseGroup.FinanceDimension8Required
			and EditBlanks
			and PostingDimension8)
		AllowBlankDimension9
			restricted
			when (!FinanceEnterpriseGroup.FinanceDimension9Required
			and EditBlanks
			and PostingDimension9)
		AllowBlankDimension10
			restricted
			when (!FinanceEnterpriseGroup.FinanceDimension10Required
			and EditBlanks
			and PostingDimension10)
		CanClearLocalBudgetCopy
    		restricted
			when (Status.Ready
			and BudgetGroupAmountRel exists)
		HasLogs
			when (LogsForTemplateRel exists)
		LazyNotReadyStatus
    		restricted
			when (Status.NotReady
			and LazyActivation)
		NotLazyNotReadyStatus
    		restricted
			when (Status.NotReady
			and !LazyActivation)



		UREInBudgetCharAccount
			restricted
			when (BudgetTemplate exists
			and not HasAccount
			and UndistributedRetainedEarningAccountShadowRel exists)

		BypassLazyActivateGLTransactionOptimization
			restricted
			when (config.BypassLazyActivateGLTransactionOptimization = true)

		CanGenerateVariance
			when (Status.Ready
			and   not HasRecalculate)

		UnpostedJournals
			when (UnpostedJournalsRel exists)

	Relations
		UndistributedRetainedEarningAccountShadowRel
    		one-to-many relation to GLChartAccountShadow
		    Field Mapping uses symbolic key
		    	related.FinanceEnterpriseGroup	  = FinanceEnterpriseGroup
		        related.ReportingChart			  = AccountStructure
		        related.GeneralLedgerChartAccount = FinanceEnterpriseGroup.DerivedUndistributedRetainedEarnings
        		
        BudgetGroupsRel is a BudgetGroup set
        BudgetTemplateMembersRel is a BudgetTemplateMember set
        BudgetTemplateManualsRel is a BudgetTemplateManual set
        BudgetPendingsRel is a BudgetTemplatePending set
        BudgetRecalculatesRel is a BudgetTemplateRecalculate set
        BudgetRemovesRel is a BudgetTemplateRemove set
        BudgetTemplateGroupTotalsRel is a BudgetTemplateGroupTotal set
        GeneralLedgerCalendarPeriodRel is a GeneralLedgerCalendarPeriod set
		ManualIncomeStatementAccountsRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ( related.GeneralLedgerChartAccount.ChartSection.IncomeStatement)
		ManualBalanceSheetAccountsRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ( related.GeneralLedgerChartAccount.ChartSection.BalanceSheet)
        TemplatesWithAccountSectionRel
			one-to-many relation to BudgetTemplate
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.AccountSection		= TrialAccountSection)
        ReportingChartAccountsSection1Rel
        	one-to-many relation to ReportingChartAccount
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.ReportingChart	 			= AccountStructure
			Instance Selection
				where (related.BudgetSection1		= AccountCluster)
        ReportingChartAccountsSection2Rel
        	one-to-many relation to ReportingChartAccount
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.ReportingChart	 			= AccountStructure
			Instance Selection
				where (related.BudgetSection2		= AccountCluster)
        ReportingChartAccountsSection3Rel
        	one-to-many relation to ReportingChartAccount
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.ReportingChart	 			= AccountStructure
			Instance Selection
				where (related.BudgetSection3		= AccountCluster)
        BudgetGroupAmountForGroupRel
        	one-to-many relation to BudgetGroupAmount
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
        		related.BudgetGroup					= BudgetGroup
        BudgetGroupAmountRel
        	one-to-many relation to BudgetGroupAmount
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
        BudgetGroupTotalRel
        	one-to-many relation to BudgetGroupTotal
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
        		related.BudgetGroup					= BudgetGroup
        BudgetGroupTotalLogRel
        	one-to-many relation to BudgetGroupTotalLog
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
        		related.BudgetGroup					= BudgetGroup
        BudgetGroupCheckRel
        	one-to-many relation to BudgetGroupCheck
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
        		related.BudgetGroup					= BudgetGroup
		FinanceEnterpriseGroupExtRel		
			one-to-one relation to FinanceEnterpriseGroupExt
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroupExt	= FinanceEnterpriseGroup
		RecalculateBudgetGroupsRel
			one-to-many relation to BudgetGroup
        	Field Mapping uses ByRequiresRecalculation
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
				related.RecalculateTotals			= true
		ReleasedGLGeneralLedgerJournalControlsRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where ((related.Status.Released
				or related.Status.PendingApproval)
				and DynamicSelection)

		ReleasedGLTransactionsForGroupRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Status.Released
				and DynamicSelection)
		ReleasedGLTransactionsForGroupByProjectRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByProjectAndPostingDate
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceCodeBlock.Project	= BudgetGroup.Project
			Instance Selection
				where (related.Status.Released
				and DynamicSelection)
		ReleasedGLTransactionsForGroupByAccountRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.FinanceCodeBlock.GeneralLedgerChartAccount  = BudgetGroup.GeneralLedgerChartAccount
			Instance Selection
				where (related.Status.Released
				and DynamicSelection)
		ReleasedGLTransactionsForGroupByAccountingUnitRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByEntityAccountingUnit
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= BudgetGroup.AccountingEntity
				related.FinanceCodeBlock.AccountingUnit		= BudgetGroup.AccountingUnit
			Instance Selection
				where (related.Status.Released
				and DynamicSelection)	
		ReleasedGLTransactionsForGroupByAccountingEntityRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByEntityAccountingUnit
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= BudgetGroup.AccountingEntity
			Instance Selection
				where (related.Status.Released
				and DynamicSelection)					
		PendingGLGeneralLedgerJournalControlsForGroupRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Status.PendingApproval
				and DynamicSelection)
		ReleasedCAGeneralLedgerJournalControlsRel 
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Status						= 1
			Instance Selection
				where (related.System = "CA")		
		UnreleasedGLGeneralLedgerJournalControlsRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Status						= 0
			Instance Selection
				where (related.System = "GL")
		UnreleasedGLGeneralLedgerTransactionForGroupRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup				
			Instance Selection

				where (related.GeneralLedgerJournalControl.Status.Unreleased
				and    related.Status.Unreleased
				and    DynamicSelection)

		UnreleasedGLGeneralLedgerTransactionForGroupByProjectRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByProjectAndPostingDate
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceCodeBlock.Project	= BudgetGroup.Project
			Instance Selection
				where (related.GeneralLedgerJournalControl.Status.Unreleased
				and    related.Status.Unreleased
				and    DynamicSelection)		

		UnreleasedGLGeneralLedgerTransactionForGroupByAccountRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.FinanceCodeBlock.GeneralLedgerChartAccount	= BudgetGroup.GeneralLedgerChartAccount
			Instance Selection
				where (related.GeneralLedgerJournalControl.Status.Unreleased
				and    related.Status.Unreleased
				and    DynamicSelection)	
		UnreleasedGLGeneralLedgerTransactionForGroupByAccountingUnitRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByEntityAccountingUnit
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= BudgetGroup.AccountingEntity
				related.FinanceCodeBlock.AccountingUnit		= BudgetGroup.AccountingUnit
			Instance Selection
				where (related.GeneralLedgerJournalControl.Status.Unreleased
				and    related.Status.Unreleased
				and    DynamicSelection)

		UnreleasedGLGeneralLedgerTransactionForGroupByAccountingEntityRel		
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses ByEntityAccountingUnit
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingEntity					= BudgetGroup.AccountingEntity
			Instance Selection
				where (related.GeneralLedgerJournalControl.Status.Unreleased
				and    related.Status.Unreleased
				and    DynamicSelection)
		PostedGeneralLedgerJournalControlsRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Status						= 5
		GLTransactionRel
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.AccountingEntity							= LocalParentAccountingEntity
				related.GeneralLedgerClosePeriod					= LocalClosePeriod
				related.GeneralLedgerJournalControl					= LocalJournalControl
		GLTransactionForBudgetGroupRel 
			one-to-many relation to GeneralLedgerTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.AccountingEntity							= LocalParentAccountingEntity
				related.GeneralLedgerClosePeriod					= LocalClosePeriod
				related.GeneralLedgerJournalControl					= LocalJournalControl
		UnreleasedGLCommitRel
			one-to-many relation to GLCommit
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Status						= 0
			Instance Selection
				where (DynamicSelection)
		ReleasedGLCommitRel 
			one-to-many relation to GLCommit
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Status						= 3
			Instance Selection
				where (related.GLCommit within GLCommitGroup
				and (related.System.EncumbranceOption.Track
				or related.System.EncumbranceOption.TrackAndEdit))
		ReleasedGLCommitWithDifferenceAmountRel
			one-to-many relation to GLCommit
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Status						= 3
			Instance Selection
				where (related.LastCurrAmountDiff.FunctionalAmount != 0

				and DynamicSelection)
		GLDocumentUniqueIDRel
    		one-to-one relation to GLCommitDocument
    		Field Mapping uses ByHeaderUniqueID
    			related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
    			related.HeaderUniqueID		   = LocalBudgetEditGroup
		GLSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "GL"
		BudgetedSystemCodesRel
			one-to-many relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.EncumbranceOption.Track
				or related.EncumbranceOption.TrackAndEdit)			
		CheckedGroupsRel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByCheckPercent
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
		CheckedGroupsWithinThresholdRel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByCheckPercent
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
        	Instance Selection
        		where (related.CheckPercent entered
        		and related.CheckPercent >= CheckThreshold)
		ErrorGroupsRel
			one-to-many relation to BudgetGroup
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.ErrorFlag)
		BudgetGroupsByStageRel
			one-to-many relation to BudgetGroup
        	Field Mapping uses ByStageAndCreateCounter
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
				related.LazyStage					= LazyStage
		GroupTotalsRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.BudgetTemplateGroupTotal.BudgetEditGroup	= LocalBudgetEditGroup
		GroupTotalsCallbackRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup						= LocalFEG
				related.BudgetTemplateGroupTotal.BudgetEditGroup	= LocalBudgetEditGroup
		BudgetTemplateGroupTotalYearToDatePeriodsRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByYearAndPeriod
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.Scenario	 								= Scenario
				related.BudgetTemplate								= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetEditGroup	= LocalBudgetEditGroup
				related.BudgetTemplateGroupTotal.BudgetGroup		= BudgetGroup
				related.BudgetTemplateGroupTotal.GeneralLedgerCalendarYear	= GeneralLedgerCalendarYear
			Instance Selection
				where (related.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod	<= GeneralLedgerCalendarPeriod)
		BudgetTemplateGroupTotalLifeToDatePeriodsRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByYearAndPeriod
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.Scenario	 								= Scenario
				related.BudgetTemplate								= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetEditGroup	= LocalBudgetEditGroup
				related.BudgetTemplateGroupTotal.BudgetGroup		= BudgetGroup
			Instance Selection
				where (related.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod	<= GeneralLedgerCalendarPeriod)

		BudgetTemplateGroupTotalUptoCurrentPeriodsRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByYearAndPeriod
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.Scenario	 								= Scenario
				related.BudgetTemplate								= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetEditGroup	= LocalBudgetEditGroup
				related.BudgetTemplateGroupTotal.BudgetGroup		= BudgetGroup
			Instance Selection
				where (related.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod	<= GeneralLedgerCalendarPeriod)

		AllBudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByYearAndPeriod
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.Scenario	 								= Scenario
				related.BudgetTemplate								= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetEditGroup	= LocalBudgetEditGroup
				related.BudgetTemplateGroupTotal.BudgetGroup		= BudgetGroup
		BudgetTemplateGroupTotalFuturePeriodsRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByYearAndPeriod
				related.FinanceEnterpriseGroup						= FinanceEnterpriseGroup
				related.Scenario	 								= Scenario
				related.BudgetTemplate								= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetEditGroup	= LocalBudgetEditGroup
				related.BudgetTemplateGroupTotal.BudgetGroup		= BudgetGroup
			Instance Selection
				where (related.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod	> GeneralLedgerCalendarPeriod)
		GroupTotalForDocumentAndBudgetGroupRel
			one-to-one relation to BudgetTemplateGroupTotal
			Field Mapping uses ByYearAndPeriod
				related.FinanceEnterpriseGroup									= FinanceEnterpriseGroup
				related.Scenario												= Scenario
				related.BudgetTemplate											= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetEditGroup				= LocalHeaderID
				related.BudgetTemplateGroupTotal.BudgetGroup					= BudgetGroup
				related.BudgetTemplateGroupTotal.GeneralLedgerCalendarYear		= GeneralLedgerCalendarYear
				related.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod	= GeneralLedgerCalendarPeriod	
		BudgetEditErrorForBudgetGroupRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByHeaderUniqueID
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.HeaderUniqueID				= LocalHeaderID
			Instance Selection
				where (related.BudgetEditError.BudgetGroup	= BudgetGroup)
		BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses ByBudgetGroup
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.BudgetEditError.BudgetEditGroup		= LocalBudgetEditGroup
		BudgetEditErrorForTemplateRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
		BudgetGroupChecksForTemplateRel
			one-to-many relation to BudgetGroupCheck
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate

        BudgetGroupsFromGroupBudgetCodeBlock
        	one-to-one relation to BudgetGroup
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
        		related.Scenario	 				= Scenario
        		related.BudgetTemplate				= BudgetTemplate
        		related.BudgetGroup					= GroupBudgetCodeBlock.DimensionCode

		PeriodFromEndDateRel
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod		= LocalEndDate

		BudgetCubePeriodRel
			one-to-one relation to GeneralLedgerCalendarPeriod
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.GeneralLedgerCalendarPeriod		= CubePeriod
		CoreLedgerRel
			one-to-one relation to Ledger
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Ledger							= FinanceEnterpriseGroup.CoreLedger
				 
		LedgerHierarchyForTransactionRel
			one-to-one relation to LedgerHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TopNode							= Scenario.Basis.LedgerTopNode
				related.SubordinateLedger				= TransactionCodeBlock.Ledger



		AccountingEntityHierarchyForTransactionRel
			one-to-one relation to AccountingEntityHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TopNode							= Scenario.Basis.AccountingEntityTopNode
				related.SubordinateAccountingEntity		= TransactionCodeBlock.ToAccountingEntity
		AccountingEntityHierarchyForNotificationRel
			one-to-one relation to AccountingEntityHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TopNode							= Scenario.Basis.AccountingEntityTopNode
				related.SubordinateAccountingEntity		= LocalParentAccountingEntity
		TransactionAccountingUnitMemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.AccountingUnit
				related.To							= TransactionCodeBlock.ToAccountingEntity.DerivedSequenceNumber + TransactionCodeBlock.AccountingUnit.DerivedSequenceNumber
		TransactionProjectMemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Project
				related.To							= TransactionCodeBlock.Project.DerivedSequenceNumber
		TransactionAccountMemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Account
				related.To							= TransactionCodeBlock.GeneralLedgerChartAccount.DerivedSequenceNumber
		TransactionDimension1MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension1
				related.To							= TransactionCodeBlock.FinanceDimension1.DerivedSequenceNumber
		TransactionDimension2MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension2
				related.To							= TransactionCodeBlock.FinanceDimension2.DerivedSequenceNumber
		TransactionDimension3MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension3
				related.To							= TransactionCodeBlock.FinanceDimension3.DerivedSequenceNumber
		TransactionDimension4MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension4
				related.To							= TransactionCodeBlock.FinanceDimension4.DerivedSequenceNumber
		TransactionDimension5MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension5
				related.To							= TransactionCodeBlock.FinanceDimension5.DerivedSequenceNumber
		TransactionDimension6MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension6
				related.To							= TransactionCodeBlock.FinanceDimension6.DerivedSequenceNumber
		TransactionDimension7MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension7
				related.To							= TransactionCodeBlock.FinanceDimension7.DerivedSequenceNumber
		TransactionDimension8MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension8
				related.To							= TransactionCodeBlock.FinanceDimension8.DerivedSequenceNumber
		TransactionDimension9MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension9
				related.To							= TransactionCodeBlock.FinanceDimension9.DerivedSequenceNumber
		TransactionDimension10MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension10
				related.To							= TransactionCodeBlock.FinanceDimension10.DerivedSequenceNumber


		AccountingUnitShadowRel
			one-to-many relation to AccountingUnitShadow
			Field Mapping uses BySummaryAccountingUnit
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryEntity						= Generated.AccountingEntity
				related.SummaryAccountingUnit				= Generated.AccountingUnit
			Instance Selection
				where (related.AccountingUnitType.Posting)
				
		ProjectShadowRel
			one-to-many relation to ProjectShadow
			Field Mapping uses BySummaryProject
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryProject						= Generated.Project
			Instance Selection
				where (related.ProjectType.Posting)
								
		AccountShadowRel
			one-to-many relation to GLChartAccountShadow
			Field Mapping uses BySummaryAccount 
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryGeneralLedgerChartAccount	= Generated.GeneralLedgerChartAccount
			Instance Selection
				where (related.ChartType.Posting)
								
		Dimension1ShadowRel
			one-to-many relation to FinanceDimension1Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension1			= Generated.FinanceDimension1
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension2ShadowRel
			one-to-many relation to FinanceDimension2Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension2			= Generated.FinanceDimension2
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension3ShadowRel
			one-to-many relation to FinanceDimension3Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension3			= Generated.FinanceDimension3
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension4ShadowRel
			one-to-many relation to FinanceDimension4Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension4			= Generated.FinanceDimension4
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension5ShadowRel
			one-to-many relation to FinanceDimension5Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension5			= Generated.FinanceDimension5
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension6ShadowRel
			one-to-many relation to FinanceDimension6Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension6			= Generated.FinanceDimension6
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension7ShadowRel
			one-to-many relation to FinanceDimension7Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension7			= Generated.FinanceDimension7
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension8ShadowRel
			one-to-many relation to FinanceDimension8Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension8			= Generated.FinanceDimension8
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension9ShadowRel
			one-to-many relation to FinanceDimension9Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension9			= Generated.FinanceDimension9
			Instance Selection
				where (related.DimensionType.Posting)
								
		Dimension10ShadowRel
			one-to-many relation to FinanceDimension10Shadow
			Field Mapping uses BySummaryDimension
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup

				related.SummaryFinanceDimension10			= Generated.FinanceDimension10
			Instance Selection
				where (related.DimensionType.Posting)


		AccountingUnitShadowTopRel
			one-to-one relation to AccountingUnitShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.AccountingUnitStructure				= AccountingUnitStructure
				related.AccountingEntity					= TransactionCodeBlock.ToAccountingEntity
				related.AccountingUnit						= TransactionCodeBlock.AccountingUnit
				related.SummaryEntity						= Scenario.Basis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode.AccountingEntity
				related.SummaryAccountingUnit				= Scenario.Basis.AccountingUnitStructure.AccountingUnitTopNodeGroup.DimensionNode
		ProjectShadowTopRel
			one-to-one relation to ProjectShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ProjectStructure					= ProjectStructure
				related.Project								= TransactionCodeBlock.Project
				related.SummaryProject						= Scenario.Basis.ProjectStructure.ProjectNode
		AccountShadowTopRel
			one-to-one relation to GLChartAccountShadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.ReportingChart						= AccountStructure
				related.GeneralLedgerChartAccount			= TransactionCodeBlock.GeneralLedgerChartAccount
				related.SummaryGeneralLedgerChartAccount	= Scenario.Basis.ReportingChart.ChartAccountNode
		Dimension1ShadowTopRel
			one-to-one relation to FinanceDimension1Shadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension1Structure			= FinanceDimension1Structure
				related.FinanceDimension1					= TransactionCodeBlock.FinanceDimension1
				related.SummaryFinanceDimension1			= Scenario.Basis.FinanceDimension1Structure.DimensionNode
		Dimension2ShadowTopRel
			one-to-one relation to FinanceDimension2Shadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension2Structure			= FinanceDimension2Structure
				related.FinanceDimension2					= TransactionCodeBlock.FinanceDimension2
				related.SummaryFinanceDimension2			= Scenario.Basis.FinanceDimension2Structure.DimensionNode
		Dimension3ShadowTopRel
			one-to-one relation to FinanceDimension3Shadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension3Structure			= FinanceDimension3Structure
				related.FinanceDimension3					= TransactionCodeBlock.FinanceDimension3
				related.SummaryFinanceDimension3			= Scenario.Basis.FinanceDimension3Structure.DimensionNode
		Dimension4ShadowTopRel
			one-to-one relation to FinanceDimension4Shadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension4Structure			= FinanceDimension4Structure
				related.FinanceDimension4					= TransactionCodeBlock.FinanceDimension4
				related.SummaryFinanceDimension4			= Scenario.Basis.FinanceDimension4Structure.DimensionNode
		Dimension5ShadowTopRel
			one-to-one relation to FinanceDimension5Shadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension5Structure			= FinanceDimension5Structure
				related.FinanceDimension5					= TransactionCodeBlock.FinanceDimension5
				related.SummaryFinanceDimension5			= Scenario.Basis.FinanceDimension5Structure.DimensionNode
		Dimension6ShadowTopRel
			one-to-one relation to FinanceDimension6Shadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension6Structure			= FinanceDimension6Structure
				related.FinanceDimension6					= TransactionCodeBlock.FinanceDimension6
				related.SummaryFinanceDimension6			= Scenario.Basis.FinanceDimension6Structure.DimensionNode
		Dimension7ShadowTopRel
			one-to-one relation to FinanceDimension7Shadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension7Structure			= FinanceDimension7Structure
				related.FinanceDimension7					= TransactionCodeBlock.FinanceDimension7
				related.SummaryFinanceDimension7			= Scenario.Basis.FinanceDimension7Structure.DimensionNode
		Dimension8ShadowTopRel
			one-to-one relation to FinanceDimension8Shadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension8Structure			= FinanceDimension8Structure
				related.FinanceDimension8					= TransactionCodeBlock.FinanceDimension8
				related.SummaryFinanceDimension8			= Scenario.Basis.FinanceDimension8Structure.DimensionNode
		Dimension9ShadowTopRel
			one-to-one relation to FinanceDimension9Shadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension9Structure			= FinanceDimension9Structure
				related.FinanceDimension9					= TransactionCodeBlock.FinanceDimension9
				related.SummaryFinanceDimension9			= Scenario.Basis.FinanceDimension9Structure.DimensionNode
		Dimension10ShadowTopRel
			one-to-one relation to FinanceDimension10Shadow
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
				related.FinanceDimension10Structure			= FinanceDimension10Structure
				related.FinanceDimension10					= TransactionCodeBlock.FinanceDimension10
				related.SummaryFinanceDimension10			= Scenario.Basis.FinanceDimension10Structure.DimensionNode
				
		AllCalendarYearsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode		 				= Scenario.Basis.GeneralLedgerCalendar.TopNode
			Instance Selection
				where (related.PeriodType		 	= 1)

		AllLTDPeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode		 				= Scenario.Basis.GeneralLedgerCalendar.LTDTopNode
			Instance Selection
				where (related.PeriodType		 	= 1)
				
		PeriodsWithPeriodTypeRel
			one-to-many relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriodType2
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.GeneralLedgerCalendar		= Scenario.Basis.GeneralLedgerCalendar
				related.SummaryPeriodType			= BudgetPeriodType
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod.Year >= DerivedStartYear
				and related.GeneralLedgerCalendarPeriod.Year <= DerivedEndYear)
		BudgetPeriodRel
			one-to-one relation to GeneralLedgerPeriodShadow
			Field Mapping uses BySummaryPeriodType
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.GeneralLedgerCalendar		= LocalBudgetCalendar
				related.GeneralLedgerCalendarPeriod	= LocalEndDate
				related.SummaryPeriodType			= BudgetPeriodType
		EndDatesRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses LeafRecords
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Date 			not < LocalDate)
		GeneralLedgerCalendarPeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeTypeAndJulianDates
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode		 				= LocalBudgetCalendar.TopNode
				related.PeriodType		 			= BudgetPeriodType
				related.EndDateJulian				>= LocalJulianDate
			Instance Selection
				where (related.StartDateJulian		<= LocalJulianDate)
		BudgetCalendarPeriodsMatchingBudgetPeriodTypeRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode		 				= LocalBudgetCalendar.TopNode
			Instance Selection
				where (related.PeriodType		 	= BudgetPeriodType)
		BudgetCalendarYearsContainingLocalJulianDateRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeTypeAndJulianDates
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode		 				= LocalBudgetCalendar.TopNode
				related.PeriodType					= 1 
				related.EndDateJulian				>= LocalJulianDate
			Instance Selection
				where (related.StartDateJulian		<= LocalJulianDate)
		YearToDateBudgetAmountsRel
			one-to-many relation to BudgetGroupAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate 				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
				related.GeneralLedgerCalendarPeriod	= YearToDatePeriodsRel.GeneralLedgerCalendarPeriod
		NextBudgetAmountsRel
			one-to-many relation to BudgetGroupAmount
			Field Mapping uses symbolic key		
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate 				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
				related.GeneralLedgerCalendarPeriod	> GeneralLedgerCalendarPeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod <= NextPeriod)
		YearToDateBudgetTotalsRel
			one-to-many relation to BudgetGroupTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate 				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
				related.GeneralLedgerCalendarPeriod	= YearToDatePeriodsRel.GeneralLedgerCalendarPeriod
		NextBudgetTotalsRel
			one-to-many relation to BudgetGroupTotal
			Field Mapping uses symbolic key		
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate 				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
				related.GeneralLedgerCalendarPeriod	> GeneralLedgerCalendarPeriod
			Instance Selection
				where (related.GeneralLedgerCalendarPeriod <= NextPeriod)
		YearToDatePeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeTypeAndJulianDates
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode		 				= LocalBudgetCalendar.TopNode
				related.PeriodType		 			= BudgetPeriodType
				related.EndDateJulian 				<= GeneralLedgerCalendarPeriod.EndDateJulian
			Instance Selection
				where (related.StartDateJulian 		>= LocalYearStartJulian)
		LifeToDateBudgetAmountsRel
			one-to-many relation to BudgetGroupAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate 				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
				related.GeneralLedgerCalendarPeriod	= LifeToDatePeriodsRel.GeneralLedgerCalendarPeriod
		FutureBudgetAmountsRel
			one-to-many relation to BudgetGroupAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate 				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
				related.GeneralLedgerCalendarPeriod	> GeneralLedgerCalendarPeriod
		AllBudgetAmountsRel
			one-to-many relation to BudgetGroupAmount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate 				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
		AllBudgetTotalsRel
			one-to-many relation to BudgetGroupTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate 				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
		FutureBudgetTotalsRel
			one-to-many relation to BudgetGroupTotal
			Field Mapping uses ByPeriod
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate 				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
				related.GeneralLedgerCalendarPeriod	> GeneralLedgerCalendarPeriod
		LifeToDateBudgetTotalsRel
			one-to-many relation to BudgetGroupTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate 				= BudgetTemplate
				related.BudgetGroup 				= BudgetGroup
				related.GeneralLedgerCalendarPeriod	<= GeneralLedgerCalendarPeriod
		LifeToDatePeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeTypeAndJulianDates
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode		 				= LocalBudgetCalendar.TopNode
				related.PeriodType		 			= BudgetPeriodType
				related.EndDateJulian 				<= GeneralLedgerCalendarPeriod.EndDateJulian
		AllPeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNodeTypeAndJulianDates
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.TopNode		 				= LocalBudgetCalendar.TopNode
				related.PeriodType		 			= BudgetPeriodType
		MatchingBudgetTemplateAccountingUnitMemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.AccountingUnit
				related.To							= LocalParentAccountingEntity.DerivedSequenceNumber + LocalPostingAccountingUnit.DerivedSequenceNumber
		MatchingBudgetTemplateProjectMemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Project
				related.To							= LocalPostingProject.DerivedSequenceNumber
		MatchingBudgetTemplateAccountMemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Account
				related.To							= LocalPostingAccount.DerivedSequenceNumber
		MatchingBudgetTemplateDimension1MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension1
				related.To							= LocalPostingDimension1.DerivedSequenceNumber
		MatchingBudgetTemplateDimension2MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension2
				related.To							= LocalPostingDimension2.DerivedSequenceNumber
		MatchingBudgetTemplateDimension3MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension3
				related.To							= LocalPostingDimension3.DerivedSequenceNumber
		MatchingBudgetTemplateDimension4MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension4
				related.To							= LocalPostingDimension4.DerivedSequenceNumber
		MatchingBudgetTemplateDimension5MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension5
				related.To							= LocalPostingDimension5.DerivedSequenceNumber
		MatchingBudgetTemplateDimension6MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension6
				related.To							= LocalPostingDimension6.DerivedSequenceNumber
		MatchingBudgetTemplateDimension7MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension7
				related.To							= LocalPostingDimension7.DerivedSequenceNumber
		MatchingBudgetTemplateDimension8MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension8
				related.To							= LocalPostingDimension8.DerivedSequenceNumber
		MatchingBudgetTemplateDimension9MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension9
				related.To							= LocalPostingDimension9.DerivedSequenceNumber
		MatchingBudgetTemplateDimension10MemberRel
			one-to-one relation to BudgetTemplateMember
			Field Mapping uses ByTo
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension10
				related.To							= LocalPostingDimension10.DerivedSequenceNumber
		
		ChildrenBudgetTemplateAccountingUnitMembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.AccountingUnit
				related.From							= LocalParentAccountingEntity.DerivedSequenceNumber + LocalParentAccountingUnit.DerivedSequenceNumber
		ChildrenBudgetTemplateProjectMembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Project
				related.From							= LocalParentProject.DerivedSequenceNumber
		ChildrenBudgetTemplateAccountMembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Account
				related.From							= LocalParentAccount.DerivedSequenceNumber
		ChildrenBudgetTemplateDimension1MembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension1
				related.From							= LocalParentDimension1.DerivedSequenceNumber
		ChildrenBudgetTemplateDimension2MembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension2
				related.From							= LocalParentDimension2.DerivedSequenceNumber
		ChildrenBudgetTemplateDimension3MembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension3
				related.From							= LocalParentDimension3.DerivedSequenceNumber
		ChildrenBudgetTemplateDimension4MembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension4
				related.From							= LocalParentDimension4.DerivedSequenceNumber
		ChildrenBudgetTemplateDimension5MembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension5
				related.From							= LocalParentDimension5.DerivedSequenceNumber
		ChildrenBudgetTemplateDimension6MembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension6
				related.From							= LocalParentDimension6.DerivedSequenceNumber
		ChildrenBudgetTemplateDimension7MembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension7
				related.From							= LocalParentDimension7.DerivedSequenceNumber
		ChildrenBudgetTemplateDimension8MembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension8
				related.From							= LocalParentDimension8.DerivedSequenceNumber
		ChildrenBudgetTemplateDimension9MembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension9
				related.From							= LocalParentDimension9.DerivedSequenceNumber
		ChildrenBudgetTemplateDimension10MembersRel
			one-to-many relation to BudgetTemplateMember
			Field Mapping uses ByFrom
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension10
				related.From							= LocalParentDimension10.DerivedSequenceNumber

		BudgetGroupsContainingLocalParentAccountingUnitRel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByAccountingUnit
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= LocalParentAccountingEntity
				related.AccountingUnit				= LocalParentAccountingUnit
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentProjectRel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByProject
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Project						= LocalParentProject
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentAccountRel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByGeneralLedgerChartAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= LocalParentAccount
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentDimension1Rel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByFinanceDimension1
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1			= LocalParentDimension1
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentDimension2Rel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByFinanceDimension2
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension2			= LocalParentDimension2
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentDimension3Rel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByFinanceDimension3
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension3			= LocalParentDimension3
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentDimension4Rel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByFinanceDimension4
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension4			= LocalParentDimension4
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentDimension5Rel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByFinanceDimension5
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension5			= LocalParentDimension5
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentDimension6Rel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByFinanceDimension6
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension6			= LocalParentDimension6
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentDimension7Rel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByFinanceDimension7
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension7			= LocalParentDimension7
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentDimension8Rel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByFinanceDimension8
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension8			= LocalParentDimension8
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentDimension9Rel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByFinanceDimension9
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension9			= LocalParentDimension9
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		BudgetGroupsContainingLocalParentDimension10Rel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByFinanceDimension10
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension10			= LocalParentDimension10
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate

		MatchingAccountingUnitBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentAccountingUnitRel.BudgetGroup
		MatchingAccountingUnitBudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentAccountingUnitRel.BudgetGroup
		MatchingAccountBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentAccountRel.BudgetGroup
		MatchingAccountBudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentAccountRel.BudgetGroup
		MatchingProjectBudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentProjectRel.BudgetGroup
		MatchingProjectBudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentProjectRel.BudgetGroup
		MatchingDimension1BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentDimension1Rel.BudgetGroup
		MatchingDimension1BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentDimension1Rel.BudgetGroup
		MatchingDimension2BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentDimension2Rel.BudgetGroup
		MatchingDimension2BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentDimension2Rel.BudgetGroup
		MatchingDimension3BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentDimension3Rel.BudgetGroup
		MatchingDimension3BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentDimension3Rel.BudgetGroup
		MatchingDimension4BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentDimension4Rel.BudgetGroup
		MatchingDimension4BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentDimension4Rel.BudgetGroup
		MatchingDimension5BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentDimension5Rel.BudgetGroup
		MatchingDimension5BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentDimension5Rel.BudgetGroup
		MatchingDimension6BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentDimension6Rel.BudgetGroup
		MatchingDimension6BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentDimension6Rel.BudgetGroup
		MatchingDimension7BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentDimension7Rel.BudgetGroup
		MatchingDimension7BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentDimension7Rel.BudgetGroup
		MatchingDimension8BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentDimension8Rel.BudgetGroup
		MatchingDimension8BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentDimension8Rel.BudgetGroup
		MatchingDimension9BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentDimension9Rel.BudgetGroup
		MatchingDimension9BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentDimension9Rel.BudgetGroup
		MatchingDimension10BudgetEditErrorRel
			one-to-many relation to BudgetEditError
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetGroup					= BudgetGroupsContainingLocalParentDimension10Rel.BudgetGroup
		MatchingDimension10BudgetTemplateGroupTotalRel
			one-to-many relation to BudgetTemplateGroupTotal
			Field Mapping uses ByTemplateBudgetGroup
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.BudgetTemplateGroupTotal.BudgetGroup	= BudgetGroupsContainingLocalParentDimension10Rel.BudgetGroup
		
		AccountingEntityHierarchiesRel
			one-to-many relation to AccountingEntityHierarchy
			Field Mapping uses SubordinateInTopNode
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.TopNode							= Scenario.Basis.AccountingEntityTopNode
			Instance Selection
				where (related.SubordinateAccountingEntity.PostingEntity)
		AccountingEntitiesInBasisRel
			one-to-many relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.AccountingEntity				= AccountingEntityHierarchiesRel.SubordinateAccountingEntity
		SummaryAccountingUnitHierarchiesRel
			one-to-many relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AccountingUnitStructure 	= AccountingUnitStructure
				related.AccountingEntity		 	= Generated.AccountingEntity
			Instance Selection
				where (related.AccountingUnitType.Summary
				and related.AccountingUnit.BudgetIdentifier = AccountingUnitIdentifier)
		PostingAccountingUnitHierarchiesRel
			one-to-many relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AccountingUnitStructure 	= AccountingUnitStructure
			Instance Selection
				where (related.IncludeInBudgetEdit
				and related.AccountingUnitType.Posting)
		PostingAccountingUnitsRel
			one-to-many relation to AccountingUnit
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= Generated.AccountingEntity
				related.AccountingUnit				= PostingAccountingUnitHierarchiesRel.AccountingUnit
		SummaryAccountingUnitsRel
			one-to-many relation to AccountingUnit
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity			= Generated.AccountingEntity
				related.AccountingUnit				= SummaryAccountingUnitHierarchiesRel.AccountingUnit
		PostingAccountingUnitHierarchiesInBasisRel
			one-to-many relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.AccountingUnitStructure 	= AccountingUnitStructure
				related.AccountingEntity			= AccountingEntitiesInBasisRel.AccountingEntity
			Instance Selection
				where (related.IncludeInBudgetEdit
				and related.AccountingUnitType.Posting)

		SummaryAccountingUnitInBasisRel
			one-to-many relation to AccountingUnit
			Field Mapping uses ByDimensionStructure
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.DimensionStructure			= AccountingUnitStructure
				related.AccountingUnitType			= AccountingUnitType.Summary
				related.AccountingEntity			= AccountingEntitiesInBasisRel.AccountingEntity
			Instance Selection
				where (related.BudgetIdentifier = AccountingUnitIdentifier)
		SummaryAccountHierarchiesRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.ReportingChart			 	= AccountStructure
			Instance Selection
				where (related.GeneralLedgerChartAccount.ChartType.Summary
				and related.GeneralLedgerChartAccount.BudgetIdentifier = AccountIdentifier)
		PostingAccountHierarchiesRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.ReportingChart			 	= AccountStructure
			Instance Selection
				where (related.GeneralLedgerChartAccount.ChartType.Posting
				and related.IncludeInBudgetEdit)
		PostingAccountsRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= PostingAccountHierarchiesRel.GeneralLedgerChartAccount
		SummaryAccountsRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= SummaryAccountHierarchiesRel.GeneralLedgerChartAccount
		BalanceSheetSummaryAccountHierarchiesRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.ReportingChart			 	= AccountStructure
			Instance Selection
				where (related.GeneralLedgerChartAccount.ChartType.Summary
				and related.GeneralLedgerChartAccount.ChartSection.BalanceSheet
				and related.GeneralLedgerChartAccount.BudgetIdentifier = AccountIdentifier)
		BalanceSheetPostingAccountHierarchiesRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.ReportingChart			 	= AccountStructure
			Instance Selection
				where (related.GeneralLedgerChartAccount.ChartType.Posting
				and related.GeneralLedgerChartAccount.ChartSection.BalanceSheet
				and related.IncludeInBudgetEdit)
		BalanceSheetPostingAccountsRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= BalanceSheetPostingAccountHierarchiesRel.GeneralLedgerChartAccount
		BalanceSheetSummaryAccountsRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= BalanceSheetSummaryAccountHierarchiesRel.GeneralLedgerChartAccount
		IncomeStatementSummaryAccountHierarchiesRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.ReportingChart			 	= AccountStructure
			Instance Selection
				where (related.GeneralLedgerChartAccount.ChartType.Summary
				and related.GeneralLedgerChartAccount.ChartSection.IncomeStatement
				and related.GeneralLedgerChartAccount.BudgetIdentifier = AccountIdentifier)
		IncomeStatementPostingAccountHierarchiesRel
			one-to-many relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.ReportingChart			 	= AccountStructure
			Instance Selection
				where (related.GeneralLedgerChartAccount.ChartType.Posting
				and related.GeneralLedgerChartAccount.ChartSection.IncomeStatement
				and related.IncludeInBudgetEdit)
		IncomeStatementPostingAccountsRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= IncomeStatementPostingAccountHierarchiesRel.GeneralLedgerChartAccount
		IncomeStatementSummaryAccountsRel
			one-to-many relation to GeneralLedgerChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.GeneralLedgerChartAccount	= IncomeStatementSummaryAccountHierarchiesRel.GeneralLedgerChartAccount
		SummaryProjectHierarchiesRel
			one-to-many relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.ProjectStructure			= ProjectStructure
			Instance Selection
				where (related.ProjectType.Summary
				and related.Project.BudgetIdentifier = ProjectIdentifier)
		PostingProjectHierarchiesRel
			one-to-many relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.ProjectStructure			= ProjectStructure
			Instance Selection
				where (related.ProjectType.Posting
				and related.IncludeInBudgetEdit)
		PostingProjectsRel
			one-to-many relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Project						= PostingProjectHierarchiesRel.Project
		SummaryProjectsRel
			one-to-many relation to Project
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Project						= SummaryProjectHierarchiesRel.Project
				
		SummaryDimension1HierarchiesRel
			one-to-many relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceDimension1Structure
			Instance Selection
				where (related.DimensionType.Summary
				and related.FinanceDimension1.BudgetIdentifier = Dimension1Identifier)
		PostingDimension1HierarchiesRel
			one-to-many relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceDimension1Structure
			Instance Selection
				where (related.DimensionType.Posting
				and related.IncludeInBudgetEdit)
		PostingDimension1Rel
			one-to-many relation to FinanceDimension1
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1			= PostingDimension1HierarchiesRel.FinanceDimension1
		SummaryDimension1Rel
			one-to-many relation to FinanceDimension1
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension1			= SummaryDimension1HierarchiesRel.FinanceDimension1
				
		SummaryDimension2HierarchiesRel
			one-to-many relation to FinanceDimension2Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension2Structure	= FinanceDimension2Structure
			Instance Selection
				where (related.DimensionType.Summary
				and related.FinanceDimension2.BudgetIdentifier = Dimension2Identifier)
		PostingDimension2HierarchiesRel
			one-to-many relation to FinanceDimension2Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension2Structure	= FinanceDimension2Structure
			Instance Selection
				where (related.DimensionType.Posting
				and related.IncludeInBudgetEdit)
		PostingDimension2Rel
			one-to-many relation to FinanceDimension2
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension2			= PostingDimension2HierarchiesRel.FinanceDimension2
		SummaryDimension2Rel
			one-to-many relation to FinanceDimension2
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension2			= SummaryDimension2HierarchiesRel.FinanceDimension2
				
		SummaryDimension3HierarchiesRel
			one-to-many relation to FinanceDimension3Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure	= FinanceDimension3Structure
			Instance Selection
				where (related.DimensionType.Summary
				and related.FinanceDimension3.BudgetIdentifier = Dimension3Identifier)
		PostingDimension3HierarchiesRel
			one-to-many relation to FinanceDimension3Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure	= FinanceDimension3Structure
			Instance Selection
				where (related.DimensionType.Posting
				and related.IncludeInBudgetEdit)
		PostingDimension3Rel
			one-to-many relation to FinanceDimension3
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension3			= PostingDimension3HierarchiesRel.FinanceDimension3
		SummaryDimension3Rel
			one-to-many relation to FinanceDimension3
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension3			= SummaryDimension3HierarchiesRel.FinanceDimension3
				
		SummaryDimension4HierarchiesRel
			one-to-many relation to FinanceDimension4Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure	= FinanceDimension4Structure
			Instance Selection
				where (related.DimensionType.Summary
				and related.FinanceDimension4.BudgetIdentifier = Dimension4Identifier)
		PostingDimension4HierarchiesRel
			one-to-many relation to FinanceDimension4Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure	= FinanceDimension4Structure
			Instance Selection
				where (related.DimensionType.Posting
				and related.IncludeInBudgetEdit)
		PostingDimension4Rel
			one-to-many relation to FinanceDimension4
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension4			= PostingDimension4HierarchiesRel.FinanceDimension4
		SummaryDimension4Rel
			one-to-many relation to FinanceDimension4
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension4			= SummaryDimension4HierarchiesRel.FinanceDimension4
				
		SummaryDimension5HierarchiesRel
			one-to-many relation to FinanceDimension5Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure	= FinanceDimension5Structure
			Instance Selection
				where (related.DimensionType.Summary
				and related.FinanceDimension5.BudgetIdentifier = Dimension5Identifier)
		PostingDimension5HierarchiesRel
			one-to-many relation to FinanceDimension5Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure	= FinanceDimension5Structure
			Instance Selection
				where (related.DimensionType.Posting
				and related.IncludeInBudgetEdit)
		PostingDimension5Rel
			one-to-many relation to FinanceDimension5
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension5			= PostingDimension5HierarchiesRel.FinanceDimension5
		SummaryDimension5Rel
			one-to-many relation to FinanceDimension5
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension5			= SummaryDimension5HierarchiesRel.FinanceDimension5
				
		SummaryDimension6HierarchiesRel
			one-to-many relation to FinanceDimension6Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure	= FinanceDimension6Structure
			Instance Selection
				where (related.DimensionType.Summary
				and related.FinanceDimension6.BudgetIdentifier = Dimension6Identifier)
		PostingDimension6HierarchiesRel
			one-to-many relation to FinanceDimension6Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure	= FinanceDimension6Structure
			Instance Selection
				where (related.DimensionType.Posting
				and related.IncludeInBudgetEdit)
		PostingDimension6Rel
			one-to-many relation to FinanceDimension6
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension6			= PostingDimension6HierarchiesRel.FinanceDimension6
		SummaryDimension6Rel
			one-to-many relation to FinanceDimension6
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension6			= SummaryDimension6HierarchiesRel.FinanceDimension6
				
		SummaryDimension7HierarchiesRel
			one-to-many relation to FinanceDimension7Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure	= FinanceDimension7Structure
			Instance Selection
				where (related.DimensionType.Summary
				and related.FinanceDimension7.BudgetIdentifier = Dimension7Identifier)
		PostingDimension7HierarchiesRel
			one-to-many relation to FinanceDimension7Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure	= FinanceDimension7Structure
			Instance Selection
				where (related.DimensionType.Posting
				and related.IncludeInBudgetEdit)
		PostingDimension7Rel
			one-to-many relation to FinanceDimension7
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension7			= PostingDimension7HierarchiesRel.FinanceDimension7
		SummaryDimension7Rel
			one-to-many relation to FinanceDimension7
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension7			= SummaryDimension7HierarchiesRel.FinanceDimension7
				
		SummaryDimension8HierarchiesRel
			one-to-many relation to FinanceDimension8Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure	= FinanceDimension8Structure
			Instance Selection
				where (related.DimensionType.Summary
				and related.FinanceDimension8.BudgetIdentifier = Dimension8Identifier)
		PostingDimension8HierarchiesRel
			one-to-many relation to FinanceDimension8Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure	= FinanceDimension8Structure
			Instance Selection
				where (related.DimensionType.Posting
				and related.IncludeInBudgetEdit)
		PostingDimension8Rel
			one-to-many relation to FinanceDimension8
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension8			= PostingDimension8HierarchiesRel.FinanceDimension8
		SummaryDimension8Rel
			one-to-many relation to FinanceDimension8
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension8			= SummaryDimension8HierarchiesRel.FinanceDimension8
				
		SummaryDimension9HierarchiesRel
			one-to-many relation to FinanceDimension9Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure	= FinanceDimension9Structure
			Instance Selection
				where (related.DimensionType.Summary
				and related.FinanceDimension9.BudgetIdentifier = Dimension9Identifier)
		PostingDimension9HierarchiesRel
			one-to-many relation to FinanceDimension9Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure	= FinanceDimension9Structure
			Instance Selection
				where (related.DimensionType.Posting
				and related.IncludeInBudgetEdit)
		PostingDimension9Rel
			one-to-many relation to FinanceDimension9
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension9			= PostingDimension9HierarchiesRel.FinanceDimension9
		SummaryDimension9Rel
			one-to-many relation to FinanceDimension9
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension9			= SummaryDimension9HierarchiesRel.FinanceDimension9
				
		SummaryDimension10HierarchiesRel
			one-to-many relation to FinanceDimension10Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure	= FinanceDimension10Structure
			Instance Selection
				where (related.DimensionType.Summary
				and related.FinanceDimension10.BudgetIdentifier = Dimension10Identifier)
		PostingDimension10HierarchiesRel
			one-to-many relation to FinanceDimension10Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure	= FinanceDimension10Structure
			Instance Selection
				where (related.DimensionType.Posting
				and related.IncludeInBudgetEdit)
		PostingDimension10Rel
			one-to-many relation to FinanceDimension10
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension10			= PostingDimension10HierarchiesRel.FinanceDimension10
		SummaryDimension10Rel
			one-to-many relation to FinanceDimension10
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.FinanceDimension10			= SummaryDimension10HierarchiesRel.FinanceDimension10
				
		BudgetCalendarPeriodsRel
			one-to-many relation to GeneralLedgerCalendarPeriod
			Field Mapping uses ByTopNode
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.TopNode						= Scenario.Basis.GeneralLedgerCalendar.TopNode
				related.Year						>= BudgetTemplate.DerivedStartYear
			Instance Selection
				where (related.Year					<= BudgetTemplate.DerivedEndYear
				and related.PeriodType				= BudgetPeriodType)

		AccountingUnitInStructureRel
			one-to-one relation to AccountingUnitHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.AccountingUnitStructure = AccountingUnitStructure
				related.AccountingEntity		= LocalParentAccountingEntity
				related.AccountingUnit		    = LocalParentAccountingUnit
		ProjectInStructureRel
			one-to-one relation to ProjectHierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.ProjectStructure		= ProjectStructure
				related.Project				    = LocalParentProject
		AccountInStructureRel
			one-to-one relation to ReportingChartAccount
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.ReportingChart			= AccountStructure
				related.GeneralLedgerChartAccount	= LocalParentAccount
		Dimension1InStructureRel
			one-to-one relation to FinanceDimension1Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension1Structure	= FinanceDimension1Structure
				related.FinanceDimension1			= LocalParentDimension1
		Dimension2InStructureRel
			one-to-one relation to FinanceDimension2Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension2Structure	= FinanceDimension2Structure
				related.FinanceDimension2			= LocalParentDimension2
		Dimension3InStructureRel
			one-to-one relation to FinanceDimension3Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension3Structure	= FinanceDimension3Structure
				related.FinanceDimension3			= LocalParentDimension3
		Dimension4InStructureRel
			one-to-one relation to FinanceDimension4Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension4Structure	= FinanceDimension4Structure
				related.FinanceDimension4			= LocalParentDimension4
		Dimension5InStructureRel
			one-to-one relation to FinanceDimension5Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension5Structure	= FinanceDimension5Structure
				related.FinanceDimension5			= LocalParentDimension5
		Dimension6InStructureRel
			one-to-one relation to FinanceDimension6Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension6Structure	= FinanceDimension6Structure
				related.FinanceDimension6			= LocalParentDimension6
		Dimension7InStructureRel
			one-to-one relation to FinanceDimension7Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension7Structure	= FinanceDimension7Structure
				related.FinanceDimension7			= LocalParentDimension7
		Dimension8InStructureRel
			one-to-one relation to FinanceDimension8Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension8Structure	= FinanceDimension8Structure
				related.FinanceDimension8			= LocalParentDimension8
		Dimension9InStructureRel
			one-to-one relation to FinanceDimension9Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension9Structure	= FinanceDimension9Structure
				related.FinanceDimension9			= LocalParentDimension9
		Dimension10InStructureRel
			one-to-one relation to FinanceDimension10Hierarchy
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.FinanceDimension10Structure	= FinanceDimension10Structure
				related.FinanceDimension10			= LocalParentDimension10
				
		PendingRecalculateAccountingUnitsRel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.AccountingUnit
		PendingRecalculateProjectsRel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Project
		PendingRecalculateAccountsRel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Account
		PendingRecalculateDimension1Rel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension1
		PendingRecalculateDimension2Rel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension2
		PendingRecalculateDimension3Rel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension3
		PendingRecalculateDimension4Rel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension4
		PendingRecalculateDimension5Rel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension5
		PendingRecalculateDimension6Rel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension6
		PendingRecalculateDimension7Rel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension7
		PendingRecalculateDimension8Rel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension8
		PendingRecalculateDimension9Rel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension9
		PendingRecalculateDimension10Rel
			one-to-many relation to BudgetTemplateRecalculate
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension10

		PendingAccountingUnitsRel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.AccountingUnit
		PendingProjectsRel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Project
		PendingAccountsRel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Account
		PendingDimension1Rel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension1
		PendingDimension2Rel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension2
		PendingDimension3Rel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension3
		PendingDimension4Rel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension4
		PendingDimension5Rel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension5
		PendingDimension6Rel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension6
		PendingDimension7Rel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension7
		PendingDimension8Rel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension8
		PendingDimension9Rel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension9
		PendingDimension10Rel
			one-to-many relation to BudgetTemplatePending
			Field Mapping uses ByCodeBlockDimensionType
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.CodeBlockDimensionType		= CodeBlockDimensionType.Dimension10
		PendingContainingBudgetGroupAccountingUnitRel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByAccountingUnit
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.AccountingEntity			= BudgetGroup.AccountingEntity
				related.AccountingUnit				= BudgetGroup.AccountingUnit
		PendingContainingBudgetGroupProjectRel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByProject
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.Project						= BudgetGroup.Project
		PendingContainingBudgetGroupAccountRel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.GeneralLedgerChartAccount	= BudgetGroup.GeneralLedgerChartAccount
		PendingContainingBudgetGroupDimension1Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension1
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension1			= BudgetGroup.FinanceDimension1
		PendingContainingBudgetGroupDimension2Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension2
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension2			= BudgetGroup.FinanceDimension2
		PendingContainingBudgetGroupDimension3Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension3
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension3			= BudgetGroup.FinanceDimension3
		PendingContainingBudgetGroupDimension4Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension4
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension4			= BudgetGroup.FinanceDimension4
		PendingContainingBudgetGroupDimension5Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension5
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension5			= BudgetGroup.FinanceDimension5
		PendingContainingBudgetGroupDimension6Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension6
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension6			= BudgetGroup.FinanceDimension6
		PendingContainingBudgetGroupDimension7Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension7
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension7			= BudgetGroup.FinanceDimension7
		PendingContainingBudgetGroupDimension8Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension8
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension8			= BudgetGroup.FinanceDimension8
		PendingContainingBudgetGroupDimension9Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension9
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension9			= BudgetGroup.FinanceDimension9
		PendingContainingBudgetGroupDimension10Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension10
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension10			= BudgetGroup.FinanceDimension10
		RecalculateContainingBudgetGroupAccountingUnitRel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByAccountingUnit
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.AccountingEntity			= BudgetGroup.AccountingEntity
				related.AccountingUnit				= BudgetGroup.AccountingUnit
		RecalculateContainingBudgetGroupProjectRel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByProject
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.Project						= BudgetGroup.Project
		RecalculateContainingBudgetGroupAccountRel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.GeneralLedgerChartAccount	= BudgetGroup.GeneralLedgerChartAccount
		RecalculateContainingBudgetGroupDimension1Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension1
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension1			= BudgetGroup.FinanceDimension1
		RecalculateContainingBudgetGroupDimension2Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension2
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension2			= BudgetGroup.FinanceDimension2
		RecalculateContainingBudgetGroupDimension3Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension3
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension3			= BudgetGroup.FinanceDimension3
		RecalculateContainingBudgetGroupDimension4Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension4
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension4			= BudgetGroup.FinanceDimension4
		RecalculateContainingBudgetGroupDimension5Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension5
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension5			= BudgetGroup.FinanceDimension5
		RecalculateContainingBudgetGroupDimension6Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension6
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension6			= BudgetGroup.FinanceDimension6
		RecalculateContainingBudgetGroupDimension7Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension7
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension7			= BudgetGroup.FinanceDimension7
		RecalculateContainingBudgetGroupDimension8Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension8
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension8			= BudgetGroup.FinanceDimension8
		RecalculateContainingBudgetGroupDimension9Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension9
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension9			= BudgetGroup.FinanceDimension9
		RecalculateContainingBudgetGroupDimension10Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension10
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension10			= BudgetGroup.FinanceDimension10
		ManualContainingBudgetGroupAccountingUnitRel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByAccountingUnit
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.AccountingEntity			= BudgetGroup.AccountingEntity
				related.AccountingUnit				= BudgetGroup.AccountingUnit
		ManualContainingBudgetGroupProjectRel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByProject
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.Project						= BudgetGroup.Project
		ManualContainingBudgetGroupAccountRel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.GeneralLedgerChartAccount	= BudgetGroup.GeneralLedgerChartAccount
		ManualContainingBudgetGroupDimension1Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension1
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension1			= BudgetGroup.FinanceDimension1
		ManualContainingBudgetGroupDimension2Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension2
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension2			= BudgetGroup.FinanceDimension2
		ManualContainingBudgetGroupDimension3Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension3
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension3			= BudgetGroup.FinanceDimension3
		ManualContainingBudgetGroupDimension4Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension4
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension4			= BudgetGroup.FinanceDimension4
		ManualContainingBudgetGroupDimension5Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension5
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension5			= BudgetGroup.FinanceDimension5
		ManualContainingBudgetGroupDimension6Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension6
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension6			= BudgetGroup.FinanceDimension6
		ManualContainingBudgetGroupDimension7Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension7
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension7			= BudgetGroup.FinanceDimension7
		ManualContainingBudgetGroupDimension8Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension8
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension8			= BudgetGroup.FinanceDimension8
		ManualContainingBudgetGroupDimension9Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension9
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension9			= BudgetGroup.FinanceDimension9
		ManualContainingBudgetGroupDimension10Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension10
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension10			= BudgetGroup.FinanceDimension10

		ManualContainingTransactionCodeBlockAccountingUnitRel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByAccountingUnit
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.AccountingEntity			= TransactionCodeBlock.ToAccountingEntity
				related.AccountingUnit				= TransactionCodeBlock.AccountingUnit
		ManualContainingTransactionCodeBlockProjectRel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByProject
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.Project						= TransactionCodeBlock.Project
		ManualContainingTransactionCodeBlockAccountRel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.GeneralLedgerChartAccount	= TransactionCodeBlock.GeneralLedgerChartAccount
		ManualContainingTransactionCodeBlockDimension1Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension1
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension1			= TransactionCodeBlock.FinanceDimension1
		ManualContainingTransactionCodeBlockDimension2Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension2
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension2			= TransactionCodeBlock.FinanceDimension2
		ManualContainingTransactionCodeBlockDimension3Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension3
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension3			= TransactionCodeBlock.FinanceDimension3
		ManualContainingTransactionCodeBlockDimension4Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension4
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension4			= TransactionCodeBlock.FinanceDimension4
		ManualContainingTransactionCodeBlockDimension5Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension5
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension5			= TransactionCodeBlock.FinanceDimension5
		ManualContainingTransactionCodeBlockDimension6Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension6
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension6			= TransactionCodeBlock.FinanceDimension6
		ManualContainingTransactionCodeBlockDimension7Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension7
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension7			= TransactionCodeBlock.FinanceDimension7
		ManualContainingTransactionCodeBlockDimension8Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension8
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension8			= TransactionCodeBlock.FinanceDimension8
		ManualContainingTransactionCodeBlockDimension9Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension9
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension9			= TransactionCodeBlock.FinanceDimension9
		ManualContainingTransactionCodeBlockDimension10Rel
			one-to-one relation to BudgetTemplateManual
			Field Mapping uses ByFinanceDimension10
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension10			= TransactionCodeBlock.FinanceDimension10

		PendingContainingLocalParentAccountingUnitRel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByAccountingUnit
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.AccountingEntity			= LocalParentAccountingEntity
				related.AccountingUnit				= LocalParentAccountingUnit
		PendingContainingLocalParentProjectRel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByProject
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.Project						= LocalParentProject
		PendingContainingLocalParentAccountRel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.GeneralLedgerChartAccount	= LocalParentAccount
		PendingContainingLocalParentDimension1Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension1
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension1			= LocalParentDimension1
		PendingContainingLocalParentDimension2Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension2
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension2			= LocalParentDimension2
		PendingContainingLocalParentDimension3Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension3
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension3			= LocalParentDimension3
		PendingContainingLocalParentDimension4Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension4
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension4			= LocalParentDimension4
		PendingContainingLocalParentDimension5Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension5
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension5			= LocalParentDimension5
		PendingContainingLocalParentDimension6Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension6
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension6			= LocalParentDimension6
		PendingContainingLocalParentDimension7Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension7
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension7			= LocalParentDimension7
		PendingContainingLocalParentDimension8Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension8
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension8			= LocalParentDimension8
		PendingContainingLocalParentDimension9Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension9
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension9			= LocalParentDimension9
		PendingContainingLocalParentDimension10Rel
			one-to-one relation to BudgetTemplatePending
			Field Mapping uses ByFinanceDimension10
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension10			= LocalParentDimension10
		RecalculateContainingLocalParentAccountingUnitRel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByAccountingUnit
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.AccountingEntity			= LocalParentAccountingEntity
				related.AccountingUnit				= LocalParentAccountingUnit
		RecalculateContainingLocalParentProjectRel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByProject
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.Project						= LocalParentProject
		RecalculateContainingLocalParentAccountRel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.GeneralLedgerChartAccount	= LocalParentAccount
		RecalculateContainingLocalParentDimension1Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension1
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension1			= LocalParentDimension1
		RecalculateContainingLocalParentDimension2Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension2
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension2			= LocalParentDimension2
		RecalculateContainingLocalParentDimension3Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension3
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension3			= LocalParentDimension3
		RecalculateContainingLocalParentDimension4Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension4
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension4			= LocalParentDimension4
		RecalculateContainingLocalParentDimension5Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension5
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension5			= LocalParentDimension5
		RecalculateContainingLocalParentDimension6Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension6
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension6			= LocalParentDimension6
		RecalculateContainingLocalParentDimension7Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension7
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension7			= LocalParentDimension7
		RecalculateContainingLocalParentDimension8Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension8
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension8			= LocalParentDimension8
		RecalculateContainingLocalParentDimension9Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension9
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension9			= LocalParentDimension9
		RecalculateContainingLocalParentDimension10Rel
			one-to-one relation to BudgetTemplateRecalculate
			Field Mapping uses ByFinanceDimension10
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension10			= LocalParentDimension10
		RemoveContainingLocalParentAccountingUnitRel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByAccountingUnit
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.AccountingEntity			= LocalParentAccountingEntity
				related.AccountingUnit				= LocalParentAccountingUnit
		RemoveContainingLocalParentProjectRel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByProject
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.Project						= LocalParentProject
		RemoveContainingLocalParentAccountRel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByAccount
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.GeneralLedgerChartAccount	= LocalParentAccount
		RemoveContainingLocalParentDimension1Rel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByFinanceDimension1
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension1			= LocalParentDimension1
		RemoveContainingLocalParentDimension2Rel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByFinanceDimension2
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension2			= LocalParentDimension2
		RemoveContainingLocalParentDimension3Rel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByFinanceDimension3
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension3			= LocalParentDimension3
		RemoveContainingLocalParentDimension4Rel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByFinanceDimension4
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension4			= LocalParentDimension4
		RemoveContainingLocalParentDimension5Rel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByFinanceDimension5
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension5			= LocalParentDimension5
		RemoveContainingLocalParentDimension6Rel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByFinanceDimension6
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension6			= LocalParentDimension6
		RemoveContainingLocalParentDimension7Rel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByFinanceDimension7
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension7			= LocalParentDimension7
		RemoveContainingLocalParentDimension8Rel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByFinanceDimension8
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension8			= LocalParentDimension8
		RemoveContainingLocalParentDimension9Rel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByFinanceDimension9
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension9			= LocalParentDimension9
		RemoveContainingLocalParentDimension10Rel
			one-to-one relation to BudgetTemplateRemove
			Field Mapping uses ByFinanceDimension10
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.FinanceDimension10			= LocalParentDimension10
		BudgetManualPendingsRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed			= false)
		BudgetManualPendingRemovesRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.PendingRemove		= true)
				
		InitializedManualAccountingUnitRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.AccountingUnit)
		InitializedManualAccountRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Account)
		InitializedManualProjectRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Project)
		InitializedManualDimension1Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Dimension1)
		InitializedManualDimension2Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Dimension2)
		InitializedManualDimension3Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Dimension3)
		InitializedManualDimension4Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Dimension4)
		InitializedManualDimension5Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Dimension5)
		InitializedManualDimension6Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Dimension6)
		InitializedManualDimension7Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Dimension7)
		InitializedManualDimension8Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Dimension8)
		InitializedManualDimension9Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Dimension9)
		InitializedManualDimension10Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where ((related.Processed or related.InitializedFromCube) and related.CodeBlockDimensionType.Dimension10)
		NotProcessedManualAccountingUnitsRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.AccountingUnit)
		NotProcessedManualAccountsRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Account)
		NotProcessedManualProjectsRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Project)
		NotProcessedManualDimension1Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Dimension1)
		NotProcessedManualDimension2Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Dimension2)
		NotProcessedManualDimension3Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Dimension3)
		NotProcessedManualDimension4Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Dimension4)
		NotProcessedManualDimension5Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Dimension5)
		NotProcessedManualDimension6Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Dimension6)
		NotProcessedManualDimension7Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Dimension7)
		NotProcessedManualDimension8Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Dimension8)
		NotProcessedManualDimension9Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Dimension9)
		NotProcessedManualDimension10Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Processed = false and related.CodeBlockDimensionType.Dimension10)
		ManualAccountingUnitRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.AccountingUnit)
		ManualAccountRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Account)
		ManualProjectRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Project)
		ManualDimension1Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Dimension1)
		ManualDimension2Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Dimension2)
		ManualDimension3Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Dimension3)
		ManualDimension4Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Dimension4)
		ManualDimension5Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Dimension5)
		ManualDimension6Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Dimension6)
		ManualDimension7Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Dimension7)
		ManualDimension8Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Dimension8)
		ManualDimension9Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Dimension9)
		ManualDimension10Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.CodeBlockDimensionType.Dimension10)
		ManualLocalParentAccountingUnitRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.AccountingUnit		= LocalParentAccountingUnit
				and related.AccountingEntity		= LocalParentAccountingEntity)
		ManualLocalParentAccountRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.GeneralLedgerChartAccount = LocalParentAccount)
		ManualLocalParentProjectRel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.Project				= LocalParentProject)
		ManualLocalParentDimension1Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.FinanceDimension1	= LocalParentDimension1)
		ManualLocalParentDimension2Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.FinanceDimension2	= LocalParentDimension2)
		ManualLocalParentDimension3Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.FinanceDimension3	= LocalParentDimension3)
		ManualLocalParentDimension4Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.FinanceDimension4	= LocalParentDimension4)
		ManualLocalParentDimension5Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.FinanceDimension5	= LocalParentDimension5)
		ManualLocalParentDimension6Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.FinanceDimension6	= LocalParentDimension6)
		ManualLocalParentDimension7Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.FinanceDimension7	= LocalParentDimension7)
		ManualLocalParentDimension8Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.FinanceDimension8	= LocalParentDimension8)
		ManualLocalParentDimension9Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.FinanceDimension9	= LocalParentDimension9)
		ManualLocalParentDimension10Rel
			one-to-many relation to BudgetTemplateManual
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
			Instance Selection
				where (related.FinanceDimension10	= LocalParentDimension10)
		CurrentManualAccountingUnitRel
			one-to-one relation to AccountingUnit
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.AccountingEntity	 		= Generated.AccountingEntity
				related.AccountingUnit		 		= CurrentManualAccountingUnit
		ProcessingChangeOrdersRel
			one-to-many relation to BudgetChangeOrder
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
			Instance Selection
				where (related.Status != 0     
				and related.Status != 1        
				and related.Status != 4)       
		UnreleasedChangeOrdersRel
			one-to-many relation to BudgetChangeOrder
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
			Instance Selection
				where (related.Status		 		= 0			
				or     related.Status               = 1)		
		ChangeOrderLinesRel
			one-to-many relation to BudgetChangeOrderLine
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario			 		= Scenario
				related.BudgetChangeOrder			= BudgetChangeOrder
		InCompleteBudgetEditBatchRel 
			one-to-many relation to BudgetEditBatch
			Field Mapping uses ByCompletionTime
				related.CompletionTime				= blank
				related.BudgetEditCallBackWrap.FEG	= FinanceEnterpriseGroup
			Instance Selection
				where (related.StartTime != blank) 
		LogsForTemplateRel	
			one-to-many relation to BudgetGroupTotalLog
			Field Mapping uses ByTimeDescending
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
		PreviousLogsRel	
			one-to-many relation to BudgetGroupTotalLog
			Field Mapping uses ByTimeDescendingForAllGroups
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate
				related.LogTimeStamp				<= LocalTimestamp
		ProcessingTemplatesRel	
			one-to-many relation to BudgetTemplate 
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.Status != Status.Ready
				and related.Status != Status.NotReady
				and related.Status != Status.Clearing)
		
		RebuildTotalsRel
			one-to-one relation to BudgetRebuildBTGT
			Field Mapping uses symbolic key
				related.BudgetRebuildBTGT.DocumentID = LocalBudgetEditGroup
			
		RebuildScenarioRel
			one-to-many relation to Scenario
			Field Mapping uses ByDescription
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Description	 				= "[RebuildTest]!!"		
		
		LazyInitsForDocumentRel
			one-to-many relation to BudgetGroupLazyInit
			Field Mapping uses ByBudgetEditGroup			
				related.BudgetEditGroup				 = LocalBudgetEditGroup

		LazyDocumentRel
			one-to-one relation to BudgetLazyDocument
			Field Mapping uses symbolic key
				related.BudgetLazyDocument.DocumentID	= LocalBudgetEditGroup

		LazyPrimeRel
			one-to-many relation to BudgetLazyPrime
			Field Mapping uses ByAccessCount
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				
		BudgetLazyPrimeRel
			one-to-one relation to BudgetLazyPrime
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.BudgetLazyPrime.DimensionCode	= TransactionCodeBlock.FullDimensionCode
			
		PostInProcessRel
			one-to-many relation to AccountingEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
			Instance Selection
				where (related.ProcessStatus.PostInProcess) 
				
		ScenarioDataRel
			one-to-many relation to GeneralLedgerTotal
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup
				related.Scenario 						= Scenario.OriginalScenario

		TotalCubeRel
			one-to-one relation to AnalyticCube
			Field Mapping uses AnalyticCubeSet
				related.BusinessClass = "GeneralLedgerTotal"
				
		BudgetTemplateOutputRel
  			one-to-one relation to BudgetTemplateOutput
         	Field Mapping uses symbolic key
         		related.FinanceEnterpriseGroup 				= LocalFEG
  				related.BudgetTemplateOutput				= LocalKey

	    FinanceEnterpriseGrouplAnalyticCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "FinanceEnterpriseGroup"

	    GeneralLedgerTotalAnalyticCubeRel
			one-to-one relation to AnalyticCube
	        Field Mapping uses AnalyticCubeSet
	        	related.BusinessClass = "GeneralLedgerTotal"

		LatestLocalObligationLogRel
		    one-to-many relation to BudgetGroupTotalLog
		    Field Mapping uses ByTimeDescendingForAllGroups
		        related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Scenario	 				= Scenario
				related.BudgetTemplate				= BudgetTemplate

		BudgetGroupObligationVarianceRel
			one-to-one relation to BudgetGroupObligationVariance
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup										= FinanceEnterpriseGroup
				related.BudgetGroupObligationVarianceRun 							= LocalObligationVarianceRun
				related.BudgetGroupObligationVariance.BudgetGroup					= BudgetGroup
				related.BudgetGroupObligationVariance.GeneralLedgerCalendarPeriod	= GeneralLedgerCalendarPeriod

		VarianceReportRel
			one-to-many relation to BudgetGroupObligationVarianceRun
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.Scenario			= Scenario
				and    related.BudgetTemplate	= BudgetTemplate)
		UnpostedJournalsRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses ByStatus
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
            Instance Selection
                where (related.Status = 1   
                or     related.Status = 2)  

		BudgetGroupClusterRel
			one-to-many relation to BudgetGroup
			Field Mapping uses ByStageAndCreateCounter
            	related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
            	related.Scenario				= Scenario
				related.BudgetTemplate			= BudgetTemplate
				related.LazyStage 				= LocalStage
			Instance Selection
				where (LocalCluster				= related.CreateCounter % LocalNumberOfClusters) 

	Sets
		ByStatus
			Sort Order
				FinanceEnterpriseGroup
				Status
				Scenario
				BudgetTemplate
	
	Field Rules

	    Description
	        required
	        
		ToleranceOption
			if (ToleranceOption changed)
				if (ToleranceOption.Percentage)
					initialize ToleranceAmount
				else
					initialize Tolerance
		BudgetPeriodType



			required
			LocalBudgetCalendar = BudgetCalendar
			constraint (BudgetCalendarPeriodsMatchingBudgetPeriodTypeRel exists)
				"CalendarMustHavePeriodType<BudgetPeriodType>"
			if (!Status.NotReady)
				cannot be changed
			if (BudgetPeriodType.Year
			and PeriodToDate = PeriodToDate.YearToDate)
				PeriodToDate = PeriodToDate.Period
		PeriodToDate
			if (PeriodToDate.LifeToDate or PeriodToDate.Total)
				initialize BudgetYearRange
			if (!Status.NotReady)
				cannot be changed
		BudgetYearRange
			if (!Status.NotReady)
				cannot be changed
			if (BudgetYearRange.Start entered)
				constraint (BudgetYearRange.Start.PeriodType.Year)
					"StartYearMustBeYearTypePeriod"
				constraint (BudgetYearRange.Start.TopNode = Scenario.Basis.GeneralLedgerCalendar.TopNode)
					"StartYearMustBeInScenarioBasisCalendar"
				constraint (BudgetYearRange.Start.Year >= first AllCalendarYearsRel.GeneralLedgerCalendarPeriod.Year
				and BudgetYearRange.Start.Year <= last AllCalendarYearsRel.GeneralLedgerCalendarPeriod.Year)
					"StartYearMustBeWithinCalendarYearRange"
			if (BudgetYearRange.End entered)
				constraint (BudgetYearRange.End.PeriodType.Year)
					"EndYearMustBeYearTypePeriod"
				constraint (BudgetYearRange.End.TopNode = Scenario.Basis.GeneralLedgerCalendar.TopNode)
					"EndYearMustBeInScenarioBasisCalendar"
				constraint (BudgetYearRange.End.Year >= first AllCalendarYearsRel.GeneralLedgerCalendarPeriod.Year
				and BudgetYearRange.End.Year <= last AllCalendarYearsRel.GeneralLedgerCalendarPeriod.Year)
					"EndYearMustBeWithinCalendarYearRange"
			if (BudgetYearRange.Start entered
			and BudgetYearRange.End entered)
				constraint (BudgetYearRange.End.Year >= BudgetYearRange.Start.Year)
					"EndYearMustBeGreaterThanOrEqualToStartYear"
		LazyActivation
			if (!Status.NotReady)
				cannot be changed


		EditBlanks
			if (!Status.NotReady)
				cannot be changed


		AccountChartSection
			if (!Status.NotReady)
				cannot be changed
			if (ManualAccount
			and AccountChartSection changed)
				if (AccountChartSection.IncomeStatement)
					constraint (ManualBalanceSheetAccountsRel not exists)
						"ManualBalanceSheetAccountsExist"
				if (AccountChartSection.BalanceSheet)
					constraint (ManualIncomeStatementAccountsRel not exists)
						"ManualIncomeStatementAccountsExist"
		PostingAccountingEntity
			if (!Status.NotReady)
				cannot be changed
		PostingAccountingUnit
			constraint (AccountingUnitIdentifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualAccountingUnit)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			constraint (!HasAccountingEntity)
				"CannotSpecifyBothAccountingUnitAndAccountingEntity"
			if (!Status.NotReady)
				cannot be changed
		PostingAccount
			constraint (AccountIdentifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualAccount)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		PostingProject
			constraint (ProjectIdentifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualProject)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		PostingDimension1
			constraint (Dimension1Identifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualDimension1)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		PostingDimension2
			constraint (Dimension2Identifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualDimension2)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		PostingDimension3
			constraint (Dimension3Identifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualDimension3)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		PostingDimension4
			constraint (Dimension4Identifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualDimension4)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		PostingDimension5
			constraint (Dimension5Identifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualDimension5)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		PostingDimension6
			constraint (Dimension6Identifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualDimension6)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		PostingDimension7
			constraint (Dimension7Identifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualDimension7)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		PostingDimension8
			constraint (Dimension8Identifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualDimension8)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		PostingDimension9
			constraint (Dimension9Identifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualDimension9)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		PostingDimension10
			constraint (Dimension10Identifier not entered)
				"CannotSpecifyBothPostingAndSummaryForSameDimension"
			constraint (!ManualDimension10)
				"CannotSpecifyBothPostingAndManualForSameDimension"
			if (!Status.NotReady)
				cannot be changed
		ManualAccountingUnit
			constraint (AccountingUnitIdentifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			constraint (!HasAccountingEntity)
				"CannotSpecifyBothAccountingUnitAndAccountingEntity"
			if (!Status.NotReady)
				cannot be changed
			if (ManualAccountingUnit changed and !ManualAccountingUnit)
				invoke Delete ManualAccountingUnitRel
		ManualAccount
			constraint (AccountIdentifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualAccount changed and !ManualAccount)
				invoke Delete ManualAccountRel
		ManualProject
			constraint (ProjectIdentifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualProject changed and !ManualProject)
				invoke Delete ManualProjectRel
		ManualDimension1
			constraint (Dimension1Identifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualDimension1 changed and !ManualDimension1)
				invoke Delete ManualDimension1Rel
		ManualDimension2
			constraint (Dimension2Identifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualDimension2 changed and !ManualDimension2)
				invoke Delete ManualDimension2Rel
		ManualDimension3
			constraint (Dimension3Identifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualDimension3 changed and !ManualDimension3)
				invoke Delete ManualDimension3Rel
		ManualDimension4
			constraint (Dimension4Identifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualDimension4 changed and !ManualDimension4)
				invoke Delete ManualDimension4Rel
		ManualDimension5
			constraint (Dimension5Identifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualDimension5 changed and !ManualDimension5)
				invoke Delete ManualDimension5Rel
		ManualDimension6
			constraint (Dimension6Identifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualDimension6 changed and !ManualDimension6)
				invoke Delete ManualDimension6Rel
		ManualDimension7
			constraint (Dimension7Identifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualDimension7 changed and !ManualDimension7)
				invoke Delete ManualDimension7Rel
		ManualDimension8
			constraint (Dimension8Identifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualDimension8 changed and !ManualDimension8)
				invoke Delete ManualDimension8Rel
		ManualDimension9
			constraint (Dimension9Identifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualDimension9 changed and !ManualDimension9)
				invoke Delete ManualDimension9Rel
		ManualDimension10
			constraint (Dimension10Identifier not entered)
				"CannotSpecifyBothManualAndSummaryForSameDimension"
			if (!Status.NotReady)
				cannot be changed
			if (ManualDimension10 changed and !ManualDimension10)
				invoke Delete ManualDimension10Rel
        AccountingUnitIdentifier			
			constraint (!HasAccountingEntity)
				"CannotSpecifyBothAccountingUnitAndAccountingEntity"
			if (!Status.NotReady)
				cannot be changed
        AccountIdentifier					
			if (!Status.NotReady)
				cannot be changed
        ProjectIdentifier					
			if (!Status.NotReady)
				cannot be changed
        Dimension1Identifier				
			if (!Status.NotReady)
				cannot be changed
        Dimension2Identifier				
			if (!Status.NotReady)
				cannot be changed
        Dimension3Identifier				
			if (!Status.NotReady)
				cannot be changed
        Dimension4Identifier				
			if (!Status.NotReady)
				cannot be changed
        Dimension5Identifier				
			if (!Status.NotReady)
				cannot be changed
        Dimension6Identifier				
			if (!Status.NotReady)
				cannot be changed
        Dimension7Identifier				
			if (!Status.NotReady)
				cannot be changed
        Dimension8Identifier				
			if (!Status.NotReady)
				cannot be changed
        Dimension9Identifier				
			if (!Status.NotReady)
				cannot be changed
        Dimension10Identifier				
			if (!Status.NotReady)
				cannot be changed
        PrimaryAccountingEntity	
        	constraint (HasAccountingEntity)
        		"MustSelectPostingAccountingEntity"
			if (!Status.NotReady)
				cannot be changed
        PrimaryAccountingUnit	
			constraint (!HasAccountingEntity)
				"CannotSpecifyBothAccountingUnitAndAccountingEntity"
        	constraint (HasAccountingUnit)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
        PrimaryProject			
        	constraint (HasProject)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
        PrimaryDimension1        
        	constraint (HasDimension1)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
        PrimaryDimension2        
        	constraint (HasDimension2)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
        PrimaryDimension3        
        	constraint (HasDimension3)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
        PrimaryDimension4        
        	constraint (HasDimension4)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
        PrimaryDimension5        
        	constraint (HasDimension5)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
        PrimaryDimension6        
        	constraint (HasDimension6)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
        PrimaryDimension7        
        	constraint (HasDimension7)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
        PrimaryDimension8        
        	constraint (HasDimension8)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
        PrimaryDimension9        
        	constraint (HasDimension9)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
        PrimaryDimension10        
        	constraint (HasDimension10)
        		"MustSelectPostingOrSummary"
			if (!Status.NotReady)
				cannot be changed
		UseCurrency
			if (!Status.NotReady
			and UseCurrency changed)
				if (old UseCurrency entered)
					cannot be changed
			required
			if (UseCurrency.EntityFunctional)



				constraint (HasAccountingEntity
				or HasAccountingUnit) 
					"MustIncludeAccountingEntityOrAccountingUnitToSupportCurrency<UseCurrency>"
			if (UseCurrency.Project)
				constraint (PostingProject
				or ManualProject)
					"ScenarioMustIncludePostingOrManualProjectToSupportCurrency<UseCurrency>"
			if (UseCurrency.Report1)
				constraint (FinanceEnterpriseGroup.ReportCurrencyOne entered)
					"FinanceEnterpriseGroupReportCurrency<UseCurrency>NotSpecified"
			if (UseCurrency.Report2)
				constraint (FinanceEnterpriseGroup.ReportCurrencyTwo entered)
					"FinanceEnterpriseGroupReportCurrency<UseCurrency>NotSpecified"
			if (UseCurrency.Report3)
				constraint (FinanceEnterpriseGroup.ReportCurrencyThree entered)
					"FinanceEnterpriseGroupReportCurrency<UseCurrency>NotSpecified"
			if (UseCurrency.Report4)
				constraint (FinanceEnterpriseGroup.ReportCurrencyFour entered)
					"FinanceEnterpriseGroupReportCurrency<UseCurrency>NotSpecified"
			if (UseCurrency.Report5)
				constraint (FinanceEnterpriseGroup.ReportCurrencyFive entered)
					"FinanceEnterpriseGroupReportCurrency<UseCurrency>NotSpecified"
		
		CheckThreshold
			initial value is .9
			if (CheckGroups)
				default to .9
				constraint (CheckThreshold > 0)
					"CheckThresholdMustBePositive"
					














			
	Attach Rules
		
	Actions
	
		Create is a Create Action
			Action Rules
				constraint (Scenario.Basis.UseForBudgetEdit)
					"ScenarioReportingBasis<Scenario.Basis>MustEnableBudgetEdit"
				include CreateOrUpdateRules
				
		Update is an Update Action
			Action Rules
				include CreateOrUpdateRules

		Delete is a Delete Action
			valid when (CanDelete)
			Entrance Rules
				invoke Purge BudgetTemplateMembersRel


		NotifyCreateAccountingUnit is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity		is a AccountingEntity
					default label is "AccountingEntity"
				PrmAccountingUnit		is a AccountingUnit
					default label is "AccountingUnit"
				PrmParentAccountingUnit	is a AccountingUnit
					default label is "ParentAccountingUnit"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentAccountingEntity	= PrmAccountingUnit.AccountingEntity
				if (AccountingEntityHierarchyForNotificationRel exists
				and NotifyOnAccountingUnit
				and PrmParentAccountingUnit.DimensionStructure = AccountingUnitStructure)
					if (SummaryAccountingUnit)
						if (PrmAccountingUnit.PostingAccountingUnit)
							LocalParentAccountingUnit 	= PrmParentAccountingUnit
							LocalParentAccountingUnit 	= BudgetParentAccountingUnit
							if (LocalParentAccountingUnit entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.AccountingUnit
									invoked.AccountingEntity 		= LocalParentAccountingEntity
									invoked.FromAccountingUnit 		= LocalParentAccountingUnit
									invoked.ToAccountingUnit 		= PrmAccountingUnit
								include CreateRecalculateAccountingUnit
						else
						if (PrmAccountingUnit.SummaryAccountingUnit
						and PrmAccountingUnit.BudgetIdentifier = AccountingUnitIdentifier)
							LocalParentAccountingUnit 	= PrmAccountingUnit
							include CreatePendingAccountingUnit
					else
					if (PrmAccountingUnit.PostingAccountingUnit)
						LocalParentAccountingUnit 	= PrmAccountingUnit
						constraint (AccountingUnitInStructureRel exists)
							"InternalError"
						if (AccountingUnitInStructureRel.IncludeInBudgetEdit)
							include CreatePendingAccountingUnit
					
		NotifyMoveAccountingUnit is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity		is a AccountingEntity
					default label is "AccountingEntity"
				PrmAccountingUnit		is a AccountingUnit
					default label is "AccountingUnit"
				PrmOldParent			is a AccountingUnit
					default label is "OldParent"
				PrmNewParent			is a AccountingUnit
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (SummaryAccountingUnit
				and NotifyOnAccountingUnit
				and PrmOldParent.DimensionStructure = AccountingUnitStructure
				and PrmAccountingUnit.BudgetIdentifier != AccountingUnitIdentifier)
					LocalParentAccountingEntity	= PrmAccountingUnit.AccountingEntity
					LocalParentAccountingUnit = PrmOldParent
					FoundOldParentAccountingUnit = BudgetParentAccountingUnit
					LocalParentAccountingUnit = PrmNewParent
					FoundNewParentAccountingUnit = BudgetParentAccountingUnit
					if (FoundOldParentAccountingUnit != FoundNewParentAccountingUnit)
						LocalParentAccountingUnit = FoundOldParentAccountingUnit
						include FixupFromAccountingUnitAfterMove
						LocalParentAccountingUnit = FoundNewParentAccountingUnit
						include FixupToAccountingUnitAfterMove
		NotifyRemoveAccountingUnit is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity		is a AccountingEntity
					default label is "AccountingEntity"
				PrmAccountingUnit		is a AccountingUnit
					default label is "AccountingUnit"
				PrmOldParent			is a AccountingUnit
					default label is "OldParent"
			Action Rules
				LocalParentAccountingEntity	= PrmAccountingUnit.AccountingEntity
				if (ManualAccountingUnit
				and PrmOldParent.DimensionStructure = AccountingUnitStructure)
					LocalParentAccountingUnit 	= PrmAccountingUnit
					constraint (ManualLocalParentAccountingUnitRel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (AccountingEntityHierarchyForNotificationRel exists
				and PrmOldParent.DimensionStructure = AccountingUnitStructure
				and NotifyOnAccountingUnit)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryAccountingUnit)
						LocalParentAccountingUnit 		= PrmOldParent
						if (PrmAccountingUnit.PostingAccountingUnit)
							LocalPostingAccountingUnit 		= PrmAccountingUnit
							LocalParentAccountingUnit 		= BudgetParentAccountingUnit
							if (LocalParentAccountingUnit entered)
								include CreateRecalculateAccountingUnit
								invoke Delete MatchingBudgetTemplateAccountingUnitMemberRel
						else
						if (PrmAccountingUnit.SummaryAccountingUnit
						and PrmAccountingUnit.BudgetIdentifier = AccountingUnitIdentifier)
							LocalParentAccountingUnit		= PrmAccountingUnit
							include CreateRemoveAccountingUnit
					else
					if (PrmAccountingUnit.PostingAccountingUnit)
						LocalParentAccountingUnit 	= PrmAccountingUnit
						constraint (AccountingUnitInStructureRel exists)
							"InternalError"
						if (AccountingUnitInStructureRel.IncludeInBudgetEdit)
							include CreateRemoveAccountingUnit
		NotifyChangeIdentifierAccountingUnit is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity		is a AccountingEntity
					default label is "AccountingEntity"
				PrmAccountingUnit		is a AccountingUnit
					default label is "AccountingUnit"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentAccountingEntity	= PrmAccountingUnit.AccountingEntity
				LocalParentAccountingUnit 	= PrmAccountingUnit
				if (AccountingEntityHierarchyForNotificationRel exists
				and PrmAccountingUnit.DimensionStructure = AccountingUnitStructure)
					if (SummaryAccountingUnit
					and PrmAccountingUnit.SummaryAccountingUnit)
						if (PrmAccountingUnit.BudgetIdentifier = AccountingUnitIdentifier)
							include CreatePendingAccountingUnit
						else
						if (PrmOldIdentifier = AccountingUnitIdentifier)
							include CreateRemoveAccountingUnit
		NotifyChangeIncludeAccountingUnit is an Instance Action
			restricted
			Parameters
				PrmAccountingEntity		is a AccountingEntity
					default label is "AccountingEntity"
				PrmAccountingUnit		is a AccountingUnit
					default label is "AccountingUnit"
				PrmParentAccountingUnit	is a AccountingUnit
					default label is "ParentAccountingUnit"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentAccountingEntity	= PrmAccountingUnit.AccountingEntity
				LocalParentAccountingUnit 	= PrmAccountingUnit
				if (AccountingEntityHierarchyForNotificationRel exists
				and PrmParentAccountingUnit.DimensionStructure = AccountingUnitStructure)
					if (PostingAccountingUnit
					and PrmAccountingUnit.PostingAccountingUnit)
						if (AccountingUnitInStructureRel.IncludeInBudgetEdit)
							include CreatePendingAccountingUnit
						else
							include CreateRemoveAccountingUnit
		NotifyCreateProject is an Instance Action
			restricted
			Parameters
				PrmProject			is a Project
					default label is "Project"
				PrmParentProject	is a Project
					default label is "ParentProject"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (NotifyOnProject
				and PrmParentProject.DimensionStructure = ProjectStructure)
					if (SummaryProject)
						if (PrmProject.IsPostingProject)
							LocalParentProject 	= PrmParentProject
							LocalParentProject 	= BudgetParentProject
							if (LocalParentProject entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Project
									invoked.FromProject 			= LocalParentProject
									invoked.ToProject 				= PrmProject
								include CreateRecalculateProject
						else
						if (PrmProject.IsSummaryProject
						and PrmProject.BudgetIdentifier = ProjectIdentifier)
							LocalParentProject 	= PrmProject
							include CreatePendingProject
					else
					if (PrmProject.IsPostingProject)
						LocalParentProject 	= PrmProject
						constraint (ProjectInStructureRel exists)
							"InternalError"
						if (ProjectInStructureRel.IncludeInBudgetEdit)
							include CreatePendingProject
		NotifyMoveProject is an Instance Action
			restricted
			Parameters
				PrmProject				is a Project
					default label is "Project"
				PrmOldParent			is a Project
					default label is "OldParent"
				PrmNewParent			is a Project
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (NotifyOnProject
				and SummaryProject
				and PrmOldParent.DimensionStructure = ProjectStructure
				and PrmProject.BudgetIdentifier != ProjectIdentifier)
					LocalParentProject 		= PrmOldParent
					FoundOldParentProject	= BudgetParentProject
					LocalParentProject 		= PrmNewParent
					FoundNewParentProject = BudgetParentProject
					if (FoundOldParentProject != FoundNewParentProject)
						LocalParentProject = FoundOldParentProject
						include FixupFromProjectAfterMove
						LocalParentProject = FoundNewParentProject
						include FixupToProjectAfterMove
		NotifyRemoveProject is an Instance Action
			restricted
			Parameters
				PrmProject				is a Project
					default label is "Project"
				PrmOldParent			is a Project
					default label is "OldParent"
			Action Rules
				if (ManualProject
				and PrmOldParent.DimensionStructure = ProjectStructure)
					LocalParentProject 	= PrmProject
					constraint (ManualLocalParentProjectRel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (NotifyOnProject
				and PrmOldParent.DimensionStructure = ProjectStructure)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryProject)
						LocalParentProject 			= PrmOldParent
						if (PrmProject.IsPostingProject)
							LocalPostingProject 	= PrmProject
							LocalParentProject 		= BudgetParentProject
							if (LocalParentProject entered)
								include CreateRecalculateProject
								invoke Delete MatchingBudgetTemplateProjectMemberRel
						else
						if (PrmProject.IsSummaryProject
						and PrmProject.BudgetIdentifier = ProjectIdentifier)
							LocalParentProject			= PrmProject
							include CreateRemoveProject
					else
					if (PrmProject.IsPostingProject)
						LocalParentProject 	= PrmProject
						constraint (ProjectInStructureRel exists)
							"InternalError"
						if (ProjectInStructureRel.IncludeInBudgetEdit)
							include CreateRemoveProject
		NotifyChangeIdentifierProject is an Instance Action
			restricted
			Parameters
				PrmProject	is a Project
					default label is "Project"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentProject 	= PrmProject
				if (NotifyOnProject
				and PrmProject.DimensionStructure = ProjectStructure)
					if (SummaryProject
					and PrmProject.IsSummaryProject)
						if (PrmProject.BudgetIdentifier = ProjectIdentifier)
							include CreatePendingProject
						else
						if (PrmOldIdentifier = ProjectIdentifier)
							include CreateRemoveProject
		NotifyChangeIncludeProject is an Instance Action
			restricted
			Parameters
				PrmProject			is a Project
					default label is "Project"	
				PrmParentProject	is a Project
					default label is "ParentProject"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentProject 	= PrmProject
				if (NotifyOnProject
				and PrmParentProject.DimensionStructure = ProjectStructure)
					if (PostingProject
					and PrmProject.IsPostingProject)
						if (ProjectInStructureRel.IncludeInBudgetEdit)
							include CreatePendingProject
						else
							include CreateRemoveProject
		NotifyCreateAccount is an Instance Action
			restricted
			Parameters
				PrmAccount			is a GeneralLedgerChartAccount
					default label is "Account"
				PrmParentAccount	is a GeneralLedgerChartAccount
					default label is "ParentAccountLabel"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentAccount 	= PrmParentAccount
				ValidationAccount 	= PrmAccount
				if (NotifyOnAccount
				and IsAccountEditable
				and AccountInStructureRel.ReportingChart = AccountStructure)
					if (SummaryAccount)
						if (PrmAccount.ChartType.Posting)
							LocalParentAccount 	= PrmParentAccount
							LocalParentAccount 	= BudgetParentAccount
							if (LocalParentAccount entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Account
									invoked.FromGeneralLedgerChartAccount	= LocalParentAccount
									invoked.ToGeneralLedgerChartAccount 	= PrmAccount
								include CreateRecalculateAccount
						else
						if (PrmAccount.ChartType.Summary
						and PrmAccount.BudgetIdentifier = AccountIdentifier)
							LocalParentAccount 	= PrmAccount
							include CreatePendingAccount
					else
					if (PrmAccount.ChartType.Posting)
						LocalParentAccount 	= PrmAccount
						constraint (AccountInStructureRel exists)
							"InternalError"
						if (AccountInStructureRel.IncludeInBudgetEdit)
							include CreatePendingAccount
		NotifyMoveAccount is an Instance Action
			restricted
			Parameters
				PrmAccount				is a GeneralLedgerChartAccount
					default label is "Account"
				PrmOldParent			is a GeneralLedgerChartAccount
					default label is "OldParent"
				PrmNewParent			is a GeneralLedgerChartAccount
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentAccount 	= PrmOldParent
				ValidationAccount 	= PrmAccount
				if (NotifyOnAccount
				and SummaryAccount
				and IsAccountEditable
				and AccountInStructureRel.ReportingChart = AccountStructure
				and PrmAccount.BudgetIdentifier != AccountIdentifier)
					LocalParentAccount 		= PrmOldParent
					FoundOldParentAccount	= BudgetParentAccount
					LocalParentAccount 		= PrmNewParent
					FoundNewParentAccount = BudgetParentAccount
					if (FoundOldParentAccount != FoundNewParentAccount)
						LocalParentAccount = FoundOldParentAccount
						include FixupFromAccountAfterMove
						LocalParentAccount = FoundNewParentAccount
						include FixupToAccountAfterMove
		NotifyRemoveAccount is an Instance Action
			restricted
			Parameters
				PrmAccount				is a GeneralLedgerChartAccount
					default label is "Account"
				PrmOldParent			is a GeneralLedgerChartAccount
					default label is "OldParent"
			Action Rules
				LocalParentAccount 	= PrmOldParent
				ValidationAccount 	= PrmAccount
				if (ManualAccount
				and IsAccountEditable
				and AccountInStructureRel.ReportingChart = AccountStructure)
					LocalParentAccount 	= PrmAccount
					constraint (ManualLocalParentAccountRel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (NotifyOnAccount
				and IsAccountEditable
				and AccountInStructureRel.ReportingChart = AccountStructure)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryAccount)
						LocalParentAccount 			= PrmOldParent
						if (PrmAccount.ChartType.Posting)
							LocalPostingAccount 	= PrmAccount
							LocalParentAccount 		= BudgetParentAccount
							if (LocalParentAccount entered)
								invoke Delete MatchingBudgetTemplateAccountMemberRel
								include CreateRecalculateAccount
						else
						if (PrmAccount.ChartType.Summary
						and PrmAccount.BudgetIdentifier = AccountIdentifier)
							LocalParentAccount			= PrmAccount
							include CreateRemoveAccount
					else
					if (PrmAccount.ChartType.Posting)
						LocalParentAccount 	= PrmAccount
						constraint (AccountInStructureRel exists)
							"InternalError"
						if (AccountInStructureRel.IncludeInBudgetEdit)
							include CreateRemoveAccount
		NotifyChangeIdentifierAccount is an Instance Action
			restricted
			Parameters
				PrmAccount				is a GeneralLedgerChartAccount
					default label is "Account"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentAccount 	= PrmAccount
				ValidationAccount 	= PrmAccount
				if (NotifyOnAccount
				and IsAccountEditable
				and AccountInStructureRel.ReportingChart = AccountStructure)
					if (SummaryAccount
					and PrmAccount.ChartType.Summary)
						if (PrmAccount.BudgetIdentifier = AccountIdentifier)
							include CreatePendingAccount
						else
						if (PrmOldIdentifier = AccountIdentifier)
							include CreateRemoveAccount
		NotifyChangeIncludeAccount is an Instance Action
			restricted
			Parameters
				PrmAccount			is a GeneralLedgerChartAccount
					default label is "Account"
				PrmParentAccount	is a GeneralLedgerChartAccount
					default label is "ParentAccountLabel"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentAccount 	= PrmAccount
				ValidationAccount 	= PrmAccount
				if (NotifyOnAccount
				and IsAccountEditable
				and AccountInStructureRel.ReportingChart = AccountStructure)
					if (PostingAccount
					and PrmAccount.ChartType.Posting)
						if (AccountInStructureRel.IncludeInBudgetEdit)
							include CreatePendingAccount
						else
							include CreateRemoveAccount
		NotifyCreateDimension1 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension1		is a FinanceDimension1
					default label is "FinanceDimension1"
				PrmParentFinanceDimension1	is a FinanceDimension1
					default label is "ParentFinanceDimension1"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (PrmParentFinanceDimension1.DimensionStructure = FinanceDimension1Structure
				and NotifyOnDimension1)
					if (SummaryDimension1)
						if (PrmFinanceDimension1.PostingDimension)
							LocalParentDimension1 	= PrmParentFinanceDimension1
							LocalParentDimension1 	= BudgetParentDimension1
							if (LocalParentDimension1 entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension1
									invoked.FromFinanceDimension1 	= LocalParentDimension1
									invoked.ToFinanceDimension1 	= PrmFinanceDimension1
								include CreateRecalculateDimension1
						else
						if (PrmFinanceDimension1.SummaryDimension
						and PrmFinanceDimension1.BudgetIdentifier = Dimension1Identifier)
							LocalParentDimension1 	= PrmFinanceDimension1
							include CreatePendingDimension1
					else
					if (PrmFinanceDimension1.PostingDimension)
						LocalParentDimension1 	= PrmFinanceDimension1
						constraint (Dimension1InStructureRel exists)
							"InternalError"
						if (Dimension1InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension1
		NotifyMoveDimension1 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension1	is a FinanceDimension1
					default label is "FinanceDimension1"
				PrmOldParent			is a FinanceDimension1
					default label is "OldParent"
				PrmNewParent			is a FinanceDimension1
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (SummaryDimension1
				and NotifyOnDimension1
				and PrmOldParent.DimensionStructure = FinanceDimension1Structure
				and PrmFinanceDimension1.BudgetIdentifier != Dimension1Identifier)
					LocalParentDimension1 = PrmOldParent
					FoundOldParentDimension1 = BudgetParentDimension1
					LocalParentDimension1 = PrmNewParent
					FoundNewParentDimension1 = BudgetParentDimension1
					if (FoundOldParentDimension1 != FoundNewParentDimension1)
						LocalParentDimension1 = FoundOldParentDimension1
						include FixupFromDimension1AfterMove
						LocalParentDimension1 = FoundNewParentDimension1
						include FixupToDimension1AfterMove
		NotifyRemoveDimension1 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension1	is a FinanceDimension1
					default label is "FinanceDimension1"
				PrmOldParent			is a FinanceDimension1
					default label is "OldParent"
			Action Rules
				if (PrmOldParent.DimensionStructure = FinanceDimension1Structure
				and ManualDimension1)
					LocalParentDimension1 	= PrmFinanceDimension1
					constraint (ManualLocalParentDimension1Rel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (PrmOldParent.DimensionStructure = FinanceDimension1Structure
				and NotifyOnDimension1)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryDimension1)
						LocalParentDimension1 		= PrmOldParent
						if (PrmFinanceDimension1.PostingDimension)
							LocalPostingDimension1 		= PrmFinanceDimension1
							LocalParentDimension1 		= BudgetParentDimension1
							if (LocalParentDimension1 entered)
								invoke Delete MatchingBudgetTemplateDimension1MemberRel
								include CreateRecalculateDimension1
						else
						if (PrmFinanceDimension1.SummaryDimension
						and PrmFinanceDimension1.BudgetIdentifier = Dimension1Identifier)
							LocalParentDimension1		= PrmFinanceDimension1
							include CreateRemoveDimension1
					else
					if (PrmFinanceDimension1.PostingDimension)
						LocalParentDimension1 	= PrmFinanceDimension1
						constraint (Dimension1InStructureRel exists)
							"InternalError"
						if (Dimension1InStructureRel.IncludeInBudgetEdit)
							include CreateRemoveDimension1
		NotifyChangeIdentifierDimension1 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension1	is a FinanceDimension1
					default label is "FinanceDimension1"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension1 	= PrmFinanceDimension1
				if (PrmFinanceDimension1.DimensionStructure = FinanceDimension1Structure)
					if (SummaryDimension1
					and PrmFinanceDimension1.SummaryDimension)
						if (PrmFinanceDimension1.BudgetIdentifier = Dimension1Identifier)
							include CreatePendingDimension1
						else
						if (PrmOldIdentifier = Dimension1Identifier)
							include CreateRemoveDimension1
		NotifyChangeIncludeDimension1 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension1		is a FinanceDimension1
					default label is "FinanceDimension1"
				PrmParentFinanceDimension1	is a FinanceDimension1
					default label is "ParentFinanceDimension1"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension1 	= PrmFinanceDimension1
				if (PrmParentFinanceDimension1.DimensionStructure = FinanceDimension1Structure)
					if (PostingDimension1
					and PrmFinanceDimension1.PostingDimension)
						if (Dimension1InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension1
						else
							include CreateRemoveDimension1
		NotifyCreateDimension2 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension2		is a FinanceDimension2
					default label is "FinanceDimension2"
				PrmParentFinanceDimension2	is a FinanceDimension2
					default label is "ParentFinanceDimension2"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (PrmParentFinanceDimension2.DimensionStructure = FinanceDimension2Structure
				and NotifyOnDimension2)
					if (SummaryDimension2)
						if (PrmFinanceDimension2.PostingDimension)
							LocalParentDimension2 	= PrmParentFinanceDimension2
							LocalParentDimension2 	= BudgetParentDimension2
							if (LocalParentDimension2 entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension2
									invoked.FromFinanceDimension2 	= LocalParentDimension2
									invoked.ToFinanceDimension2 	= PrmFinanceDimension2
								include CreateRecalculateDimension2
						else
						if (PrmFinanceDimension2.SummaryDimension
						and PrmFinanceDimension2.BudgetIdentifier = Dimension2Identifier)
							LocalParentDimension2 	= PrmFinanceDimension2
							include CreatePendingDimension2
					else
					if (PrmFinanceDimension2.PostingDimension)
						LocalParentDimension2 	= PrmFinanceDimension2
						constraint (Dimension2InStructureRel exists)
							"InternalError"
						if (Dimension2InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension2
		NotifyMoveDimension2 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension2	is a FinanceDimension2
					default label is "FinanceDimension2"
				PrmOldParent			is a FinanceDimension2
					default label is "OldParent"
				PrmNewParent			is a FinanceDimension2
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (SummaryDimension2
				and NotifyOnDimension2
				and PrmOldParent.DimensionStructure = FinanceDimension2Structure
				and PrmFinanceDimension2.BudgetIdentifier != Dimension2Identifier)
					LocalParentDimension2 = PrmOldParent
					FoundOldParentDimension2 = BudgetParentDimension2
					LocalParentDimension2 = PrmNewParent
					FoundNewParentDimension2 = BudgetParentDimension2
					if (FoundOldParentDimension2 != FoundNewParentDimension2)
						LocalParentDimension2 = FoundOldParentDimension2
						include FixupFromDimension2AfterMove
						LocalParentDimension2 = FoundNewParentDimension2
						include FixupToDimension2AfterMove
		NotifyRemoveDimension2 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension2	is a FinanceDimension2
					default label is "FinanceDimension2"
				PrmOldParent			is a FinanceDimension2
					default label is "OldParent"
			Action Rules
				if (PrmOldParent.DimensionStructure = FinanceDimension2Structure
				and ManualDimension2)
					LocalParentDimension2 	= PrmFinanceDimension2
					constraint (ManualLocalParentDimension2Rel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (PrmOldParent.DimensionStructure = FinanceDimension2Structure
				and NotifyOnDimension2)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryDimension2)
						LocalParentDimension2 		= PrmOldParent
						if (PrmFinanceDimension2.PostingDimension)
							LocalPostingDimension2 		= PrmFinanceDimension2
							LocalParentDimension2 		= BudgetParentDimension2
							if (LocalParentDimension2 entered)
								invoke Delete MatchingBudgetTemplateDimension2MemberRel
								include CreateRecalculateDimension2
						else
						if (PrmFinanceDimension2.SummaryDimension
						and PrmFinanceDimension2.BudgetIdentifier = Dimension2Identifier)
							LocalParentDimension2		= PrmFinanceDimension2
							include CreateRemoveDimension2
					else
					if (PrmFinanceDimension2.PostingDimension)
						LocalParentDimension2 	= PrmFinanceDimension2
						constraint (Dimension2InStructureRel exists)
							"InternalError"
						if (Dimension2InStructureRel.IncludeInBudgetEdit)
							include CreateRemoveDimension2
		NotifyChangeIdentifierDimension2 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension2	is a FinanceDimension2
					default label is "FinanceDimension2"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension2 	= PrmFinanceDimension2
				if (PrmFinanceDimension2.DimensionStructure = FinanceDimension2Structure)
					if (SummaryDimension2
					and PrmFinanceDimension2.SummaryDimension)
						if (PrmFinanceDimension2.BudgetIdentifier = Dimension2Identifier)
							include CreatePendingDimension2
						else
						if (PrmOldIdentifier = Dimension2Identifier)
							include CreateRemoveDimension2
		NotifyChangeIncludeDimension2 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension2		is a FinanceDimension2
					default label is "FinanceDimension2"
				PrmParentFinanceDimension2	is a FinanceDimension2
					default label is "ParentFinanceDimension2"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension2 	= PrmFinanceDimension2
				if (PrmParentFinanceDimension2.DimensionStructure = FinanceDimension2Structure)
					if (PostingDimension2
					and PrmFinanceDimension2.PostingDimension)
						if (Dimension2InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension2
						else
							include CreateRemoveDimension2
		NotifyCreateDimension3 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension3		is a FinanceDimension3
					default label is "FinanceDimension3"
				PrmParentFinanceDimension3	is a FinanceDimension3
					default label is "ParentFinanceDimension3"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (PrmParentFinanceDimension3.DimensionStructure = FinanceDimension3Structure
				and NotifyOnDimension3)
					if (SummaryDimension3)
						if (PrmFinanceDimension3.PostingDimension)
							LocalParentDimension3 	= PrmParentFinanceDimension3
							LocalParentDimension3 	= BudgetParentDimension3
							if (LocalParentDimension3 entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension3
									invoked.FromFinanceDimension3 	= LocalParentDimension3
									invoked.ToFinanceDimension3 	= PrmFinanceDimension3
								include CreateRecalculateDimension3
						else
						if (PrmFinanceDimension3.SummaryDimension
						and PrmFinanceDimension3.BudgetIdentifier = Dimension3Identifier)
							LocalParentDimension3 	= PrmFinanceDimension3
							include CreatePendingDimension3
					else
					if (PrmFinanceDimension3.PostingDimension)
						LocalParentDimension3 	= PrmFinanceDimension3
						constraint (Dimension3InStructureRel exists)
							"InternalError"
						if (Dimension3InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension3
		NotifyMoveDimension3 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension3	is a FinanceDimension3
					default label is "FinanceDimension3"
				PrmOldParent			is a FinanceDimension3
					default label is "OldParent"
				PrmNewParent			is a FinanceDimension3
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (SummaryDimension3
				and NotifyOnDimension3
				and PrmOldParent.DimensionStructure = FinanceDimension3Structure
				and PrmFinanceDimension3.BudgetIdentifier != Dimension3Identifier)
					LocalParentDimension3 = PrmOldParent
					FoundOldParentDimension3 = BudgetParentDimension3
					LocalParentDimension3 = PrmNewParent
					FoundNewParentDimension3 = BudgetParentDimension3
					if (FoundOldParentDimension3 != FoundNewParentDimension3)
						LocalParentDimension3 = FoundOldParentDimension3
						include FixupFromDimension3AfterMove
						LocalParentDimension3 = FoundNewParentDimension3
						include FixupToDimension3AfterMove
		NotifyRemoveDimension3 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension3	is a FinanceDimension3
					default label is "FinanceDimension3"
				PrmOldParent			is a FinanceDimension3
					default label is "OldParent"
			Action Rules
				if (PrmOldParent.DimensionStructure = FinanceDimension3Structure
				and ManualDimension3)
					LocalParentDimension3 	= PrmFinanceDimension3
					constraint (ManualLocalParentDimension3Rel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (PrmOldParent.DimensionStructure = FinanceDimension3Structure
				and NotifyOnDimension3)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryDimension3)
						LocalParentDimension3 		= PrmOldParent
						if (PrmFinanceDimension3.PostingDimension)
							LocalPostingDimension3 		= PrmFinanceDimension3
							LocalParentDimension3 		= BudgetParentDimension3
							if (LocalParentDimension3 entered)
								invoke Delete MatchingBudgetTemplateDimension3MemberRel
								include CreateRecalculateDimension3
						else
						if (PrmFinanceDimension3.SummaryDimension
						and PrmFinanceDimension3.BudgetIdentifier = Dimension3Identifier)
							LocalParentDimension3		= PrmFinanceDimension3
							include CreateRemoveDimension3
					else
					if (PrmFinanceDimension3.PostingDimension)
						LocalParentDimension3 	= PrmFinanceDimension3
						constraint (Dimension3InStructureRel exists)
							"InternalError"
						if (Dimension3InStructureRel.IncludeInBudgetEdit)
							include CreateRemoveDimension3
		NotifyChangeIdentifierDimension3 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension3	is a FinanceDimension3
					default label is "FinanceDimension3"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension3 	= PrmFinanceDimension3
				if (PrmFinanceDimension3.DimensionStructure = FinanceDimension3Structure)
					if (SummaryDimension3
					and PrmFinanceDimension3.SummaryDimension)
						if (PrmFinanceDimension3.BudgetIdentifier = Dimension3Identifier)
							include CreatePendingDimension3
						else
						if (PrmOldIdentifier = Dimension3Identifier)
							include CreateRemoveDimension3
		NotifyChangeIncludeDimension3 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension3		is a FinanceDimension3
					default label is "FinanceDimension3"
				PrmParentFinanceDimension3	is a FinanceDimension3
					default label is "ParentFinanceDimension3"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension3 	= PrmFinanceDimension3
				if (PrmParentFinanceDimension3.DimensionStructure = FinanceDimension3Structure)
					if (PostingDimension3
					and PrmFinanceDimension3.PostingDimension)
						if (Dimension3InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension3
						else
							include CreateRemoveDimension3
		NotifyCreateDimension4 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension4		is a FinanceDimension4
					default label is "FinanceDimension4"
				PrmParentFinanceDimension4	is a FinanceDimension4
					default label is "ParentFinanceDimension4"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (PrmParentFinanceDimension4.DimensionStructure = FinanceDimension4Structure
				and NotifyOnDimension4)
					if (SummaryDimension4)
						if (PrmFinanceDimension4.PostingDimension)
							LocalParentDimension4 	= PrmParentFinanceDimension4
							LocalParentDimension4 	= BudgetParentDimension4
							if (LocalParentDimension4 entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension4
									invoked.FromFinanceDimension4 	= LocalParentDimension4
									invoked.ToFinanceDimension4 	= PrmFinanceDimension4
								include CreateRecalculateDimension4
						else
						if (PrmFinanceDimension4.SummaryDimension
						and PrmFinanceDimension4.BudgetIdentifier = Dimension4Identifier)
							LocalParentDimension4 	= PrmFinanceDimension4
							include CreatePendingDimension4
					else
					if (PrmFinanceDimension4.PostingDimension)
						LocalParentDimension4 	= PrmFinanceDimension4
						constraint (Dimension4InStructureRel exists)
							"InternalError"
						if (Dimension4InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension4
		NotifyMoveDimension4 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension4	is a FinanceDimension4
					default label is "FinanceDimension4"
				PrmOldParent			is a FinanceDimension4
					default label is "OldParent"
				PrmNewParent			is a FinanceDimension4
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (SummaryDimension4
				and NotifyOnDimension4
				and PrmOldParent.DimensionStructure = FinanceDimension4Structure
				and PrmFinanceDimension4.BudgetIdentifier != Dimension4Identifier)
					LocalParentDimension4 = PrmOldParent
					FoundOldParentDimension4 = BudgetParentDimension4
					LocalParentDimension4 = PrmNewParent
					FoundNewParentDimension4 = BudgetParentDimension4
					if (FoundOldParentDimension4 != FoundNewParentDimension4)
						LocalParentDimension4 = FoundOldParentDimension4
						include FixupFromDimension4AfterMove
						LocalParentDimension4 = FoundNewParentDimension4
						include FixupToDimension4AfterMove
		NotifyRemoveDimension4 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension4	is a FinanceDimension4
					default label is "FinanceDimension4"
				PrmOldParent			is a FinanceDimension4
					default label is "OldParent"
			Action Rules
				if (PrmOldParent.DimensionStructure = FinanceDimension4Structure
				and ManualDimension4)
					LocalParentDimension4 	= PrmFinanceDimension4
					constraint (ManualLocalParentDimension4Rel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (PrmOldParent.DimensionStructure = FinanceDimension4Structure
				and NotifyOnDimension4)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryDimension4)
						LocalParentDimension4 		= PrmOldParent
						if (PrmFinanceDimension4.PostingDimension)
							LocalPostingDimension4 		= PrmFinanceDimension4
							LocalParentDimension4 		= BudgetParentDimension4
							if (LocalParentDimension4 entered)
								invoke Delete MatchingBudgetTemplateDimension4MemberRel
								include CreateRecalculateDimension4
						else
						if (PrmFinanceDimension4.SummaryDimension
						and PrmFinanceDimension4.BudgetIdentifier = Dimension4Identifier)
							LocalParentDimension4		= PrmFinanceDimension4
							include CreateRemoveDimension4
					else
					if (PrmFinanceDimension4.PostingDimension)
						LocalParentDimension4 	= PrmFinanceDimension4
						constraint (Dimension4InStructureRel exists)
							"InternalError"
						if (Dimension4InStructureRel.IncludeInBudgetEdit)
							include CreateRemoveDimension4
		NotifyChangeIdentifierDimension4 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension4	is a FinanceDimension4
					default label is "FinanceDimension4"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension4 	= PrmFinanceDimension4
				if (PrmFinanceDimension4.DimensionStructure = FinanceDimension4Structure)
					if (SummaryDimension4
					and PrmFinanceDimension4.SummaryDimension)
						if (PrmFinanceDimension4.BudgetIdentifier = Dimension4Identifier)
							include CreatePendingDimension4
						else
						if (PrmOldIdentifier = Dimension4Identifier)
							include CreateRemoveDimension4
		NotifyChangeIncludeDimension4 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension4		is a FinanceDimension4
					default label is "FinanceDimension4"
				PrmParentFinanceDimension4	is a FinanceDimension4
					default label is "ParentFinanceDimension4"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension4 	= PrmFinanceDimension4
				if (PrmParentFinanceDimension4.DimensionStructure = FinanceDimension4Structure)
					if (PostingDimension4
					and PrmFinanceDimension4.PostingDimension)
						if (Dimension4InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension4
						else
							include CreateRemoveDimension4
		NotifyCreateDimension5 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension5		is a FinanceDimension5
					default label is "FinanceDimension5"
				PrmParentFinanceDimension5	is a FinanceDimension5
					default label is "ParentFinanceDimension5"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (PrmParentFinanceDimension5.DimensionStructure = FinanceDimension5Structure
				and NotifyOnDimension5)
					if (SummaryDimension5)
						if (PrmFinanceDimension5.PostingDimension)
							LocalParentDimension5 	= PrmParentFinanceDimension5
							LocalParentDimension5 	= BudgetParentDimension5
							if (LocalParentDimension5 entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension5
									invoked.FromFinanceDimension5 	= LocalParentDimension5
									invoked.ToFinanceDimension5 	= PrmFinanceDimension5
								include CreateRecalculateDimension5
						else
						if (PrmFinanceDimension5.SummaryDimension
						and PrmFinanceDimension5.BudgetIdentifier = Dimension5Identifier)
							LocalParentDimension5 	= PrmFinanceDimension5
							include CreatePendingDimension5
					else
					if (PrmFinanceDimension5.PostingDimension)
						LocalParentDimension5 	= PrmFinanceDimension5
						constraint (Dimension5InStructureRel exists)
							"InternalError"
						if (Dimension5InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension5
		NotifyMoveDimension5 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension5	is a FinanceDimension5
					default label is "FinanceDimension5"
				PrmOldParent			is a FinanceDimension5
					default label is "OldParent"
				PrmNewParent			is a FinanceDimension5
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (SummaryDimension5
				and NotifyOnDimension5
				and PrmOldParent.DimensionStructure = FinanceDimension5Structure
				and PrmFinanceDimension5.BudgetIdentifier != Dimension5Identifier)
					LocalParentDimension5 = PrmOldParent
					FoundOldParentDimension5 = BudgetParentDimension5
					LocalParentDimension5 = PrmNewParent
					FoundNewParentDimension5 = BudgetParentDimension5
					if (FoundOldParentDimension5 != FoundNewParentDimension5)
						LocalParentDimension5 = FoundOldParentDimension5
						include FixupFromDimension5AfterMove
						LocalParentDimension5 = FoundNewParentDimension5
						include FixupToDimension5AfterMove
		NotifyRemoveDimension5 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension5	is a FinanceDimension5
					default label is "FinanceDimension5"
				PrmOldParent			is a FinanceDimension5
					default label is "OldParent"
			Action Rules
				if (PrmOldParent.DimensionStructure = FinanceDimension5Structure
				and ManualDimension5)
					LocalParentDimension5 	= PrmFinanceDimension5
					constraint (ManualLocalParentDimension5Rel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (PrmOldParent.DimensionStructure = FinanceDimension5Structure
				and NotifyOnDimension5)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryDimension5)
						LocalParentDimension5 		= PrmOldParent
						if (PrmFinanceDimension5.PostingDimension)
							LocalPostingDimension5 		= PrmFinanceDimension5
							LocalParentDimension5 		= BudgetParentDimension5
							if (LocalParentDimension5 entered)
								invoke Delete MatchingBudgetTemplateDimension5MemberRel
								include CreateRecalculateDimension5
						else
						if (PrmFinanceDimension5.SummaryDimension
						and PrmFinanceDimension5.BudgetIdentifier = Dimension5Identifier)
							LocalParentDimension5		= PrmFinanceDimension5
							include CreateRemoveDimension5
					else
					if (PrmFinanceDimension5.PostingDimension)
						LocalParentDimension5 	= PrmFinanceDimension5
						constraint (Dimension5InStructureRel exists)
							"InternalError"
						if (Dimension5InStructureRel.IncludeInBudgetEdit)
							include CreateRemoveDimension5
		NotifyChangeIdentifierDimension5 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension5	is a FinanceDimension5
					default label is "FinanceDimension5"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension5 	= PrmFinanceDimension5
				if (PrmFinanceDimension5.DimensionStructure = FinanceDimension5Structure)
					if (SummaryDimension5
					and PrmFinanceDimension5.SummaryDimension)
						if (PrmFinanceDimension5.BudgetIdentifier = Dimension5Identifier)
							include CreatePendingDimension5
						else
						if (PrmOldIdentifier = Dimension5Identifier)
							include CreateRemoveDimension5
		NotifyChangeIncludeDimension5 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension5		is a FinanceDimension5
					default label is "FinanceDimension5"
				PrmParentFinanceDimension5	is a FinanceDimension5
					default label is "ParentFinanceDimension5"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension5 	= PrmFinanceDimension5
				if (PrmParentFinanceDimension5.DimensionStructure = FinanceDimension5Structure)
					if (PostingDimension5
					and PrmFinanceDimension5.PostingDimension)
						if (Dimension5InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension5
						else
							include CreateRemoveDimension5
		NotifyCreateDimension6 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension6		is a FinanceDimension6
					default label is "FinanceDimension6"
				PrmParentFinanceDimension6	is a FinanceDimension6
					default label is "ParentFinanceDimension6"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (PrmParentFinanceDimension6.DimensionStructure = FinanceDimension6Structure
				and NotifyOnDimension6)
					if (SummaryDimension6)
						if (PrmFinanceDimension6.PostingDimension)
							LocalParentDimension6 	= PrmParentFinanceDimension6
							LocalParentDimension6 	= BudgetParentDimension6
							if (LocalParentDimension6 entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension6
									invoked.FromFinanceDimension6 	= LocalParentDimension6
									invoked.ToFinanceDimension6 	= PrmFinanceDimension6
								include CreateRecalculateDimension6
						else
						if (PrmFinanceDimension6.SummaryDimension
						and PrmFinanceDimension6.BudgetIdentifier = Dimension6Identifier)
							LocalParentDimension6 	= PrmFinanceDimension6
							include CreatePendingDimension6
					else
					if (PrmFinanceDimension6.PostingDimension)
						LocalParentDimension6 	= PrmFinanceDimension6
						constraint (Dimension6InStructureRel exists)
							"InternalError"
						if (Dimension6InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension6
		NotifyMoveDimension6 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension6	is a FinanceDimension6
					default label is "FinanceDimension6"
				PrmOldParent			is a FinanceDimension6
					default label is "OldParent"
				PrmNewParent			is a FinanceDimension6
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (SummaryDimension6
				and NotifyOnDimension6
				and PrmOldParent.DimensionStructure = FinanceDimension6Structure
				and PrmFinanceDimension6.BudgetIdentifier != Dimension6Identifier)
					LocalParentDimension6 = PrmOldParent
					FoundOldParentDimension6 = BudgetParentDimension6
					LocalParentDimension6 = PrmNewParent
					FoundNewParentDimension6 = BudgetParentDimension6
					if (FoundOldParentDimension6 != FoundNewParentDimension6)
						LocalParentDimension6 = FoundOldParentDimension6
						include FixupFromDimension6AfterMove
						LocalParentDimension6 = FoundNewParentDimension6
						include FixupToDimension6AfterMove
		NotifyRemoveDimension6 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension6	is a FinanceDimension6
					default label is "FinanceDimension6"
				PrmOldParent			is a FinanceDimension6
					default label is "OldParent"
			Action Rules
				if (PrmOldParent.DimensionStructure = FinanceDimension6Structure
				and ManualDimension6)
					LocalParentDimension6 	= PrmFinanceDimension6
					constraint (ManualLocalParentDimension6Rel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (PrmOldParent.DimensionStructure = FinanceDimension6Structure
				and NotifyOnDimension6)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryDimension6)
						LocalParentDimension6 		= PrmOldParent
						if (PrmFinanceDimension6.PostingDimension)
							LocalPostingDimension6 		= PrmFinanceDimension6
							LocalParentDimension6 		= BudgetParentDimension6
							if (LocalParentDimension6 entered)
								invoke Delete MatchingBudgetTemplateDimension6MemberRel
								include CreateRecalculateDimension6
						else
						if (PrmFinanceDimension6.SummaryDimension
						and PrmFinanceDimension6.BudgetIdentifier = Dimension6Identifier)
							LocalParentDimension6		= PrmFinanceDimension6
							include CreateRemoveDimension6
					else
					if (PrmFinanceDimension6.PostingDimension)
						LocalParentDimension6 	= PrmFinanceDimension6
						constraint (Dimension6InStructureRel exists)
							"InternalError"
						if (Dimension6InStructureRel.IncludeInBudgetEdit)
							include CreateRemoveDimension6
		NotifyChangeIdentifierDimension6 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension6	is a FinanceDimension6
					default label is "FinanceDimension6"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension6 	= PrmFinanceDimension6
				if (PrmFinanceDimension6.DimensionStructure = FinanceDimension6Structure)
					if (SummaryDimension6
					and PrmFinanceDimension6.SummaryDimension)
						if (PrmFinanceDimension6.BudgetIdentifier = Dimension6Identifier)
							include CreatePendingDimension6
						else
						if (PrmOldIdentifier = Dimension6Identifier)
							include CreateRemoveDimension6
		NotifyChangeIncludeDimension6 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension6		is a FinanceDimension6
					default label is "FinanceDimension6"
				PrmParentFinanceDimension6	is a FinanceDimension6
					default label is "ParentFinanceDimension6"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension6 	= PrmFinanceDimension6
				if (PrmParentFinanceDimension6.DimensionStructure = FinanceDimension6Structure)
					if (PostingDimension6
					and PrmFinanceDimension6.PostingDimension)
						if (Dimension6InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension6
						else
							include CreateRemoveDimension6
		NotifyCreateDimension7 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension7		is a FinanceDimension7
					default label is "FinanceDimension7"
				PrmParentFinanceDimension7	is a FinanceDimension7
					default label is "ParentFinanceDimension7"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (PrmParentFinanceDimension7.DimensionStructure = FinanceDimension7Structure
				and NotifyOnDimension7)
					if (SummaryDimension7)
						if (PrmFinanceDimension7.PostingDimension)
							LocalParentDimension7 	= PrmParentFinanceDimension7
							LocalParentDimension7 	= BudgetParentDimension7
							if (LocalParentDimension7 entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension7
									invoked.FromFinanceDimension7 	= LocalParentDimension7
									invoked.ToFinanceDimension7 	= PrmFinanceDimension7
								include CreateRecalculateDimension7
						else
						if (PrmFinanceDimension7.SummaryDimension
						and PrmFinanceDimension7.BudgetIdentifier = Dimension7Identifier)
							LocalParentDimension7 	= PrmFinanceDimension7
							include CreatePendingDimension7
					else
					if (PrmFinanceDimension7.PostingDimension)
						LocalParentDimension7 	= PrmFinanceDimension7
						constraint (Dimension7InStructureRel exists)
							"InternalError"
						if (Dimension7InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension7
		NotifyMoveDimension7 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension7	is a FinanceDimension7
					default label is "FinanceDimension7"
				PrmOldParent			is a FinanceDimension7
					default label is "OldParent"
				PrmNewParent			is a FinanceDimension7
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (SummaryDimension7
				and NotifyOnDimension7
				and PrmOldParent.DimensionStructure = FinanceDimension7Structure
				and PrmFinanceDimension7.BudgetIdentifier != Dimension7Identifier)
					LocalParentDimension7 = PrmOldParent
					FoundOldParentDimension7 = BudgetParentDimension7
					LocalParentDimension7 = PrmNewParent
					FoundNewParentDimension7 = BudgetParentDimension7
					if (FoundOldParentDimension7 != FoundNewParentDimension7)
						LocalParentDimension7 = FoundOldParentDimension7
						include FixupFromDimension7AfterMove
						LocalParentDimension7 = FoundNewParentDimension7
						include FixupToDimension7AfterMove
		NotifyRemoveDimension7 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension7	is a FinanceDimension7
					default label is "FinanceDimension7"
				PrmOldParent			is a FinanceDimension7
					default label is "OldParent"
			Action Rules
				if (PrmOldParent.DimensionStructure = FinanceDimension7Structure
				and ManualDimension7)
					LocalParentDimension7 	= PrmFinanceDimension7
					constraint (ManualLocalParentDimension7Rel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (PrmOldParent.DimensionStructure = FinanceDimension7Structure
				and NotifyOnDimension7)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryDimension7)
						LocalParentDimension7 		= PrmOldParent
						if (PrmFinanceDimension7.PostingDimension)
							LocalPostingDimension7 		= PrmFinanceDimension7
							LocalParentDimension7 		= BudgetParentDimension7
							if (LocalParentDimension7 entered)
								invoke Delete MatchingBudgetTemplateDimension7MemberRel
								include CreateRecalculateDimension7
						else
						if (PrmFinanceDimension7.SummaryDimension
						and PrmFinanceDimension7.BudgetIdentifier = Dimension7Identifier)
							LocalParentDimension7		= PrmFinanceDimension7
							include CreateRemoveDimension7
					else
					if (PrmFinanceDimension7.PostingDimension)
						LocalParentDimension7 	= PrmFinanceDimension7
						constraint (Dimension7InStructureRel exists)
							"InternalError"
						if (Dimension7InStructureRel.IncludeInBudgetEdit)
							include CreateRemoveDimension7
		NotifyChangeIdentifierDimension7 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension7	is a FinanceDimension7
					default label is "FinanceDimension7"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension7 	= PrmFinanceDimension7
				if (PrmFinanceDimension7.DimensionStructure = FinanceDimension7Structure)
					if (SummaryDimension7
					and PrmFinanceDimension7.SummaryDimension)
						if (PrmFinanceDimension7.BudgetIdentifier = Dimension7Identifier)
							include CreatePendingDimension7
						else
						if (PrmOldIdentifier = Dimension7Identifier)
							include CreateRemoveDimension7
		NotifyChangeIncludeDimension7 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension7		is a FinanceDimension7
					default label is "FinanceDimension7"
				PrmParentFinanceDimension7	is a FinanceDimension7
					default label is "ParentFinanceDimension7"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension7 	= PrmFinanceDimension7
				if (PrmParentFinanceDimension7.DimensionStructure = FinanceDimension7Structure)
					if (PostingDimension7
					and PrmFinanceDimension7.PostingDimension)
						if (Dimension7InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension7
						else
							include CreateRemoveDimension7
		NotifyCreateDimension8 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension8		is a FinanceDimension8
					default label is "FinanceDimension8"
				PrmParentFinanceDimension8	is a FinanceDimension8
					default label is "ParentFinanceDimension8"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (PrmParentFinanceDimension8.DimensionStructure = FinanceDimension8Structure
				and NotifyOnDimension8)
					if (SummaryDimension8)
						if (PrmFinanceDimension8.PostingDimension)
							LocalParentDimension8 	= PrmParentFinanceDimension8
							LocalParentDimension8 	= BudgetParentDimension8
							if (LocalParentDimension8 entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension8
									invoked.FromFinanceDimension8 	= LocalParentDimension8
									invoked.ToFinanceDimension8 	= PrmFinanceDimension8
								include CreateRecalculateDimension8
						else
						if (PrmFinanceDimension8.SummaryDimension
						and PrmFinanceDimension8.BudgetIdentifier = Dimension8Identifier)
							LocalParentDimension8 	= PrmFinanceDimension8
							include CreatePendingDimension8
					else
					if (PrmFinanceDimension8.PostingDimension)
						LocalParentDimension8 	= PrmFinanceDimension8
						constraint (Dimension8InStructureRel exists)
							"InternalError"
						if (Dimension8InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension8
		NotifyMoveDimension8 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension8	is a FinanceDimension8
					default label is "FinanceDimension8"
				PrmOldParent			is a FinanceDimension8
					default label is "OldParent"
				PrmNewParent			is a FinanceDimension8
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (SummaryDimension8
				and NotifyOnDimension8
				and PrmOldParent.DimensionStructure = FinanceDimension8Structure
				and PrmFinanceDimension8.BudgetIdentifier != Dimension8Identifier)
					LocalParentDimension8 = PrmOldParent
					FoundOldParentDimension8 = BudgetParentDimension8
					LocalParentDimension8 = PrmNewParent
					FoundNewParentDimension8 = BudgetParentDimension8
					if (FoundOldParentDimension8 != FoundNewParentDimension8)
						LocalParentDimension8 = FoundOldParentDimension8
						include FixupFromDimension8AfterMove
						LocalParentDimension8 = FoundNewParentDimension8
						include FixupToDimension8AfterMove
		NotifyRemoveDimension8 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension8	is a FinanceDimension8
					default label is "FinanceDimension8"
				PrmOldParent			is a FinanceDimension8
					default label is "OldParent"
			Action Rules
				if (PrmOldParent.DimensionStructure = FinanceDimension8Structure
				and ManualDimension8)
					LocalParentDimension8 	= PrmFinanceDimension8
					constraint (ManualLocalParentDimension8Rel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (PrmOldParent.DimensionStructure = FinanceDimension8Structure
				and NotifyOnDimension8)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryDimension8)
						LocalParentDimension8 		= PrmOldParent
						if (PrmFinanceDimension8.PostingDimension)
							LocalPostingDimension8 		= PrmFinanceDimension8
							LocalParentDimension8 		= BudgetParentDimension8
							if (LocalParentDimension8 entered)
								invoke Delete MatchingBudgetTemplateDimension8MemberRel
								include CreateRecalculateDimension8
						else
						if (PrmFinanceDimension8.SummaryDimension
						and PrmFinanceDimension8.BudgetIdentifier = Dimension8Identifier)
							LocalParentDimension8		= PrmFinanceDimension8
							include CreateRemoveDimension8
					else
					if (PrmFinanceDimension8.PostingDimension)
						LocalParentDimension8 	= PrmFinanceDimension8
						constraint (Dimension8InStructureRel exists)
							"InternalError"
						if (Dimension8InStructureRel.IncludeInBudgetEdit)
							include CreateRemoveDimension8
		NotifyChangeIdentifierDimension8 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension8	is a FinanceDimension8
					default label is "FinanceDimension8"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension8 	= PrmFinanceDimension8
				if (PrmFinanceDimension8.DimensionStructure = FinanceDimension8Structure)
					if (SummaryDimension8
					and PrmFinanceDimension8.SummaryDimension)
						if (PrmFinanceDimension8.BudgetIdentifier = Dimension8Identifier)
							include CreatePendingDimension8
						else
						if (PrmOldIdentifier = Dimension8Identifier)
							include CreateRemoveDimension8
		NotifyChangeIncludeDimension8 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension8		is a FinanceDimension8
					default label is "FinanceDimension8"
				PrmParentFinanceDimension8	is a FinanceDimension8
					default label is "ParentFinanceDimension8"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension8 	= PrmFinanceDimension8
				if (PrmParentFinanceDimension8.DimensionStructure = FinanceDimension8Structure)
					if (PostingDimension8
					and PrmFinanceDimension8.PostingDimension)
						if (Dimension8InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension8
						else
							include CreateRemoveDimension8
		NotifyCreateDimension9 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension9		is a FinanceDimension9
					default label is "FinanceDimension9"
				PrmParentFinanceDimension9	is a FinanceDimension9
					default label is "ParentFinanceDimension9"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (PrmParentFinanceDimension9.DimensionStructure = FinanceDimension9Structure
				and NotifyOnDimension9)
					if (SummaryDimension9)
						if (PrmFinanceDimension9.PostingDimension)
							LocalParentDimension9 	= PrmParentFinanceDimension9
							LocalParentDimension9 	= BudgetParentDimension9
							if (LocalParentDimension9 entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension9
									invoked.FromFinanceDimension9 	= LocalParentDimension9
									invoked.ToFinanceDimension9 	= PrmFinanceDimension9
								include CreateRecalculateDimension9
						else
						if (PrmFinanceDimension9.SummaryDimension
						and PrmFinanceDimension9.BudgetIdentifier = Dimension9Identifier)
							LocalParentDimension9 	= PrmFinanceDimension9
							include CreatePendingDimension9
					else
					if (PrmFinanceDimension9.PostingDimension)
						LocalParentDimension9 	= PrmFinanceDimension9
						constraint (Dimension9InStructureRel exists)
							"InternalError"
						if (Dimension9InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension9
		NotifyMoveDimension9 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension9	is a FinanceDimension9
					default label is "FinanceDimension9"
				PrmOldParent			is a FinanceDimension9
					default label is "OldParent"
				PrmNewParent			is a FinanceDimension9
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (SummaryDimension9
				and NotifyOnDimension9
				and PrmOldParent.DimensionStructure = FinanceDimension9Structure
				and PrmFinanceDimension9.BudgetIdentifier != Dimension9Identifier)
					LocalParentDimension9 = PrmOldParent
					FoundOldParentDimension9 = BudgetParentDimension9
					LocalParentDimension9 = PrmNewParent
					FoundNewParentDimension9 = BudgetParentDimension9
					if (FoundOldParentDimension9 != FoundNewParentDimension9)
						LocalParentDimension9 = FoundOldParentDimension9
						include FixupFromDimension9AfterMove
						LocalParentDimension9 = FoundNewParentDimension9
						include FixupToDimension9AfterMove
		NotifyRemoveDimension9 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension9	is a FinanceDimension9
					default label is "FinanceDimension9"
				PrmOldParent			is a FinanceDimension9
					default label is "OldParent"
			Action Rules
				if (PrmOldParent.DimensionStructure = FinanceDimension9Structure
				and ManualDimension9)
					LocalParentDimension9 	= PrmFinanceDimension9
					constraint (ManualLocalParentDimension9Rel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (PrmOldParent.DimensionStructure = FinanceDimension9Structure
				and NotifyOnDimension9)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryDimension9)
						LocalParentDimension9 		= PrmOldParent
						if (PrmFinanceDimension9.PostingDimension)
							LocalPostingDimension9 		= PrmFinanceDimension9
							LocalParentDimension9 		= BudgetParentDimension9
							if (LocalParentDimension9 entered)
								invoke Delete MatchingBudgetTemplateDimension9MemberRel
								include CreateRecalculateDimension9
						else
						if (PrmFinanceDimension9.SummaryDimension
						and PrmFinanceDimension9.BudgetIdentifier = Dimension9Identifier)
							LocalParentDimension9		= PrmFinanceDimension9
							include CreateRemoveDimension9
					else
					if (PrmFinanceDimension9.PostingDimension)
						LocalParentDimension9 	= PrmFinanceDimension9
						constraint (Dimension9InStructureRel exists)
							"InternalError"
						if (Dimension9InStructureRel.IncludeInBudgetEdit)
							include CreateRemoveDimension9
		NotifyChangeIdentifierDimension9 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension9	is a FinanceDimension9
					default label is "FinanceDimension9"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension9 	= PrmFinanceDimension9
				if (PrmFinanceDimension9.DimensionStructure = FinanceDimension9Structure)
					if (SummaryDimension9
					and PrmFinanceDimension9.SummaryDimension)
						if (PrmFinanceDimension9.BudgetIdentifier = Dimension9Identifier)
							include CreatePendingDimension9
						else
						if (PrmOldIdentifier = Dimension9Identifier)
							include CreateRemoveDimension9
		NotifyChangeIncludeDimension9 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension9		is a FinanceDimension9
					default label is "FinanceDimension9"
				PrmParentFinanceDimension9	is a FinanceDimension9
					default label is "ParentFinanceDimension9"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension9 	= PrmFinanceDimension9
				if (PrmParentFinanceDimension9.DimensionStructure = FinanceDimension9Structure)
					if (PostingDimension9
					and PrmFinanceDimension9.PostingDimension)
						if (Dimension9InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension9
						else
							include CreateRemoveDimension9
		NotifyCreateDimension10 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension10		is a FinanceDimension10
					default label is "FinanceDimension10"
				PrmParentFinanceDimension10	is a FinanceDimension10
					default label is "ParentFinanceDimension10"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (PrmParentFinanceDimension10.DimensionStructure = FinanceDimension10Structure
				and NotifyOnDimension10)
					if (SummaryDimension10)
						if (PrmFinanceDimension10.PostingDimension)
							LocalParentDimension10 	= PrmParentFinanceDimension10
							LocalParentDimension10 	= BudgetParentDimension10
							if (LocalParentDimension10 entered)
								invoke Create BudgetTemplateMember
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension10
									invoked.FromFinanceDimension10 	= LocalParentDimension10
									invoked.ToFinanceDimension10 	= PrmFinanceDimension10
								include CreateRecalculateDimension10
						else
						if (PrmFinanceDimension10.SummaryDimension
						and PrmFinanceDimension10.BudgetIdentifier = Dimension10Identifier)
							LocalParentDimension10 	= PrmFinanceDimension10
							include CreatePendingDimension10
					else
					if (PrmFinanceDimension10.PostingDimension)
						LocalParentDimension10 	= PrmFinanceDimension10
						constraint (Dimension10InStructureRel exists)
							"InternalError"
						if (Dimension10InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension10
		NotifyMoveDimension10 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension10	is a FinanceDimension10
					default label is "FinanceDimension10"
				PrmOldParent			is a FinanceDimension10
					default label is "OldParent"
				PrmNewParent			is a FinanceDimension10
					default label is "NewParent"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				if (SummaryDimension10
				and NotifyOnDimension10
				and PrmOldParent.DimensionStructure = FinanceDimension10Structure
				and PrmFinanceDimension10.BudgetIdentifier != Dimension10Identifier)
					LocalParentDimension10 = PrmOldParent
					FoundOldParentDimension10 = BudgetParentDimension10
					LocalParentDimension10 = PrmNewParent
					FoundNewParentDimension10 = BudgetParentDimension10
					if (FoundOldParentDimension10 != FoundNewParentDimension10)
						LocalParentDimension10 = FoundOldParentDimension10
						include FixupFromDimension10AfterMove
						LocalParentDimension10 = FoundNewParentDimension10
						include FixupToDimension10AfterMove
		NotifyRemoveDimension10 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension10	is a FinanceDimension10
					default label is "FinanceDimension10"
				PrmOldParent			is a FinanceDimension10
					default label is "OldParent"
			Action Rules
				if (PrmOldParent.DimensionStructure = FinanceDimension10Structure
				and ManualDimension10)
					LocalParentDimension10 	= PrmFinanceDimension10
					constraint (ManualLocalParentDimension10Rel not exists)
						"BudgetTemplate<BudgetTemplate>:CannotRemoveManualElement"
				else
				if (PrmOldParent.DimensionStructure = FinanceDimension10Structure
				and NotifyOnDimension10)
					constraint (Status.Ready)
						"BudgetTemplate<BudgetTemplate>NotReady"
					if (SummaryDimension10)
						LocalParentDimension10 		= PrmOldParent
						if (PrmFinanceDimension10.PostingDimension)
							LocalPostingDimension10 		= PrmFinanceDimension10
							LocalParentDimension10 		= BudgetParentDimension10
							if (LocalParentDimension10 entered)
								invoke Delete MatchingBudgetTemplateDimension10MemberRel
								include CreateRecalculateDimension10
						else
						if (PrmFinanceDimension10.SummaryDimension
						and PrmFinanceDimension10.BudgetIdentifier = Dimension10Identifier)
							LocalParentDimension10		= PrmFinanceDimension10
							include CreateRemoveDimension10
					else
					if (PrmFinanceDimension10.PostingDimension)
						LocalParentDimension10 	= PrmFinanceDimension10
						constraint (Dimension10InStructureRel exists)
							"InternalError"
						if (Dimension10InStructureRel.IncludeInBudgetEdit)
							include CreateRemoveDimension10
		NotifyChangeIdentifierDimension10 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension10	is a FinanceDimension10
					default label is "FinanceDimension10"
				PrmOldIdentifier		is a BudgetIdentifier
					default label is "OldIdentifier"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension10 	= PrmFinanceDimension10
				if (PrmFinanceDimension10.DimensionStructure = FinanceDimension10Structure)
					if (SummaryDimension10
					and PrmFinanceDimension10.SummaryDimension)
						if (PrmFinanceDimension10.BudgetIdentifier = Dimension10Identifier)
							include CreatePendingDimension10
						else
						if (PrmOldIdentifier = Dimension10Identifier)
							include CreateRemoveDimension10
		NotifyChangeIncludeDimension10 is an Instance Action
			restricted
			Parameters
				PrmFinanceDimension10		is a FinanceDimension10
					default label is "FinanceDimension10"
				PrmParentFinanceDimension10	is a FinanceDimension10
					default label is "ParentFinanceDimension10"
			Action Rules
				constraint (Status.Ready)
					"BudgetTemplate<BudgetTemplate>NotReady"
				LocalParentDimension10 	= PrmFinanceDimension10
				if (PrmParentFinanceDimension10.DimensionStructure = FinanceDimension10Structure)
					if (PostingDimension10
					and PrmFinanceDimension10.PostingDimension)
						if (Dimension10InStructureRel.IncludeInBudgetEdit)
							include CreatePendingDimension10
						else
							include CreateRemoveDimension10

		SetActivated is an Instance Action
			restricted
			Action Rules
				if (Status.Processing)
					Status = Status.Ready
					initialize AccountSection
					initialize Rebuild
					initialize NeedsCleanupCube
					initialize NeedsCleanupGroupTotals
					Counter = 1
					include UpdateFinanceEnterpriseGroupCurrencyCounter

		SetReady is an Instance Action
			restricted
			Action Rules
				if (Status.Processing)
					Status = Status.Ready
					initialize AccountSection
					initialize Rebuild
					initialize NeedsCleanupCube
					initialize NeedsCleanupGroupTotals
					initialize AddingPendingLazyGroups				

		SetProcessing is an Instance Action
			restricted
			Action Rules
				if (Status.Ready)
					Status = Status.Processing

		SetNotReady is an Instance Action
			restricted
			Action Rules
				if (Status.Clearing)
					Status = Status.NotReady
					HasRecalculate = false
					initialize Rebuild
					initialize NeedsCleanupCube
					initialize NeedsCleanupGroupTotals
					initialize AddingPendingLazyGroups
					initialize LazyStage
					initialize NextGroup	

		SetNeedsCleanupCube is an Instance Action
			restricted
			Action Rules
				if (Status.Processing)
					NeedsCleanupCube = true

		ClearNeedsCleanupCube is an Instance Action
			restricted
			Action Rules
				if (Status.Processing)
					NeedsCleanupCube = false

		SetNeedsCleanupGroupTotals is an Instance Action
			restricted
			Action Rules
				if (Status.Processing)
					NeedsCleanupGroupTotals = true

		ClearNeedsCleanupGroupTotals is an Instance Action
			restricted
			Action Rules
				if (Status.Processing)
					NeedsCleanupGroupTotals = false

		DoAllPending is an Instance Action
			restricted
			Action Rules
				for each BudgetPendingsRel
					invoke DoPending
						invoked.PrmBudgetTemplatePending = each.BudgetTemplatePending
						invoked.PrmForeground			 = false
						
		DoPending is an Instance Action
			restricted
			Parameters
				PrmBudgetTemplatePending is a BudgetTemplatePending
					default label is "BudgetTemplatePending"
				PrmForeground			 is Boolean
					default label is "Foreground"
			Entrance Rules
				if (not LazyActivation)
					UseSparse = config.BudgetTemplateProcessPendingSparsed
			Action Rules
				InForeground = PrmForeground
				BudgetTemplatePending = PrmBudgetTemplatePending
				invoke GenerateTemplateMembersForPending
				if (!InForeground)
					invoke CommitTransaction
				

				if (!LazyActivation)
					if (BudgetTemplatePending.AccountingEntity entered)
						LocalDoGroupsInnerAccountingEntity = BudgetTemplatePending.AccountingEntity
						include DoGroupsInner				
					else
					if (HasAccountingUnitOrHasAccountingEntity)
						if (!ManualAccountingUnit)
							for each AccountingEntitiesInBasisRel
								LocalDoGroupsInnerAccountingEntity = each.AccountingEntity
								include DoGroupsInner
						else
							for each InitializedManualAccountingUnitRel
								LocalDoGroupsInnerAccountingEntity = each.AccountingEntity
								CurrentManualAccountingUnit = each.AccountingUnit
								include DoGroupsInner
					else
						include DoGroupsInner
					

				invoke SetProcessed BudgetTemplatePending

		ProcessAllRecalculate is an Instance Action
			restricted
			Action Rules
				InForeground = false
				for each BudgetRecalculatesRel
					invoke DoRecalculate
						invoked.PrmBudgetTemplateRecalculate = each.BudgetTemplateRecalculate
						invoked.PrmForeground			 = false
						
		ClearHasRecalculate is an Instance Action
			restricted
			Action Rules
				if (BudgetRecalculatesRel not exists)
					HasRecalculate = false

		DoRecalculate is an Instance Action
			restricted
			Parameters
				PrmBudgetTemplateRecalculate is a BudgetTemplateRecalculate
					default label is "BudgetTemplateRecalculate"
				PrmForeground			 is Boolean
					default label is "Foreground"
			Entrance Rules
				UseSparse = config.BudgetTemplateProcessPendingSparsed
			Action Rules
				ProcessingRecalculate = true
				InForeground = PrmForeground
				BudgetTemplateRecalculate = PrmBudgetTemplateRecalculate
				

				if (BudgetTemplateRecalculate.AccountingEntity entered)
					LocalDoGroupsInnerAccountingEntity = BudgetTemplateRecalculate.AccountingEntity
					include DoGroupsInner
				else
				if (HasAccountingUnitOrHasAccountingEntity)
					if (!ManualAccountingUnit)
						for each AccountingEntitiesInBasisRel
							LocalDoGroupsInnerAccountingEntity = each.AccountingEntity
							include DoGroupsInner
					else
						for each InitializedManualAccountingUnitRel
							LocalDoGroupsInnerAccountingEntity = each.AccountingEntity
							CurrentManualAccountingUnit = each.AccountingUnit
							include DoGroupsInner
				else
					include DoGroupsInner



		ProcessAllRemove is an Instance Action
			restricted
			Action Rules
				InForeground = false
				for each BudgetRemovesRel
					invoke DoRemove
						invoked.PrmBudgetTemplateRemove = each.BudgetTemplateRemove
				for each BudgetManualPendingRemovesRel
					invoke DoRemoveManual
						invoked.PrmBudgetTemplateManual = each.BudgetTemplateManual
						
		DoRemove is an Instance Action
			restricted
			Parameters
				PrmBudgetTemplateRemove is a BudgetTemplateRemove
					default label is "BudgetTemplateRemove"
			Action Rules
				BudgetTemplateRemove = PrmBudgetTemplateRemove
				include InitializeLocalParentFieldsForRemove
				
				include RemoveRecalculate
				include RemoveBudgetEditError
				include RemoveBudgetTemplateGroupTotal
				include RemoveBudgetTemplateMember
				include RemoveBudgetGroup
				
				invoke Delete BudgetTemplateRemove

		DoRemoveManual is an Instance Action
			restricted
			Parameters
				PrmBudgetTemplateManual is a BudgetTemplateManual
					default label is "BudgetTemplateManual"
			Action Rules
				BudgetTemplateManual = PrmBudgetTemplateManual
				include InitializeLocalParentFieldsForManual
				
				include RemoveBudgetEditError
				include RemoveBudgetTemplateGroupTotal
				include RemoveBudgetGroup
				
				invoke Delete BudgetTemplateManual

		DoRemoveGroupTotalsForRecalculate is an Instance Action
			restricted
			Action Rules
				for each BudgetRecalculatesRel
					BudgetTemplateRecalculate = each.BudgetTemplateRecalculate
					include InitializeLocalParentFieldsForRecalculate
					include RemoveBudgetTemplateGroupTotal
				
		DoCleanupGroupTotalsForPendingAndPendingManual is an Instance Action
			restricted
			Action Rules

				for each BudgetPendingsRel
					BudgetTemplatePending = each.BudgetTemplatePending
					include InitializeLocalParentFieldsForPending
					include RemoveBudgetTemplateGroupTotal
					
				for each BudgetManualPendingsRel
					BudgetTemplateManual = each.BudgetTemplateManual
					include InitializeLocalParentFieldsForManual
					include RemoveBudgetTemplateGroupTotal

		ProcessAllPendingManual is an Instance Action
			restricted
			Action Rules
				InForeground = false
				for each BudgetManualPendingsRel
					invoke DoPendingManual
						invoked.PrmBudgetTemplateManual 	= each.BudgetTemplateManual
						invoked.PrmForeground				= false
						
		DoPendingManual is an Instance Action
			restricted
			Parameters
				PrmBudgetTemplateManual is a BudgetTemplateManual
					default label is "BudgetTemplateManual"
				PrmForeground			 is Boolean
					default label is "Foreground"
			Entrance Rules
				UseSparse = config.BudgetTemplateProcessPendingSparsed
			Action Rules
				InForeground = PrmForeground
				BudgetTemplateManual = PrmBudgetTemplateManual

				if (BudgetTemplateManual.AccountingEntity entered)
					LocalDoGroupsInnerAccountingEntity  = BudgetTemplateManual.AccountingEntity
					CurrentManualAccountingUnit = BudgetTemplateManual.AccountingUnit
					include DoGroupsInner
				else
				if (HasAccountingUnitOrHasAccountingEntity)
					if (!ManualAccountingUnit)
						for each AccountingEntitiesInBasisRel
							LocalDoGroupsInnerAccountingEntity = each.AccountingEntity
							include DoGroupsInner
					else
						for each InitializedManualAccountingUnitRel
							LocalDoGroupsInnerAccountingEntity = each.AccountingEntity
							CurrentManualAccountingUnit = each.AccountingUnit
							include DoGroupsInner
				else
					include DoGroupsInner			

				invoke SetInitializedFromCube BudgetTemplateManual

		RecoverAfterProcessingError is an Instance Action
			valid when (Status.Processing)
			confirmation required
				"ThisActionShouldOnlyBeRunIfPreviousProcessingActionHasFailedAndWillNotBeRestarted"
			Action Rules
				initialize AccountSection
				invoke ResetState










				
		UpdateGroupTotals is a Set Action
			restricted
			run in foreground
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmBudgetEditGroup		is UniqueID
					default label is "BudgetEditGroup"
				PrmTransactionCodeBlock	is like FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmEndDate				is a GeneralLedgerCalendarPeriod
					default label is "EndDate"
				PrmDate					is Date
					default label is "Date"
				PrmReportAmounts		is a CurrencyAmountsGroup
					default label is "ReportAmounts"
				PrmAllowRebuild			is Boolean
					default label is "AllowRebuild"
				PrmOriginatingDocument	is BusinessObjectReference
					default label is "OriginatingDocument"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmBudgetEditGroup
					required
				PrmTransactionCodeBlock
					required
				PrmDate
					if (PrmEndDate not entered)
						required


			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and !Status.NotReady
				and !Status.Clearing)
			Sort Order
				FinanceEnterpriseGroup
				Status
			Action Rules
				Instance Rules
					include ExtractTransactionAmount

					invoke UpdateGroupTotalsForTemplate
						invoked.PrmBudgetEditGroup		= PrmBudgetEditGroup
						invoked.PrmTransactionCodeBlock	= PrmTransactionCodeBlock
						invoked.PrmEndDate				= PrmEndDate
						invoked.PrmDate					= PrmDate
						invoked.PrmAmount				= TransactionAmount
						invoked.PrmAllowRebuild			= PrmAllowRebuild


						invoked.PrmOriginatingDocument	= PrmOriginatingDocument
						
		UpdateGroupTotalsBudget is a Set Action
			restricted
			run in foreground
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario				is a Scenario
					default label is "Scenario"
				PrmBudgetEditGroup		is UniqueID
					default label is "BudgetEditGroup"
				PrmTransactionCodeBlock	is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmEndDate				is a GeneralLedgerCalendarPeriod
					default label is "EndDate"
				PrmCurrency				is a Currency
					default label is "Currency"
				PrmAmount				is a InternationalAmount
					default label is "Amount"
				PrmOriginatingDocument	is BusinessObjectReference
					default label is "OriginatingTransactionDocument"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and !Status.NotReady
				and !Status.Clearing
				and Scenario	= PrmScenario)
			Sort Order
				FinanceEnterpriseGroup
				Status
				Scenario
			Action Rules
				Instance Rules

					if (!UseCurrency.Project
					or PrmTransactionCodeBlock.Project entered)
						invoke UpdateGroupTotalsBudgetForTemplate
							invoked.PrmBudgetEditGroup		= PrmBudgetEditGroup
							invoked.PrmTransactionCodeBlock	= PrmTransactionCodeBlock
							invoked.PrmEndDate				= PrmEndDate
							invoked.PrmCurrency				= PrmCurrency
							invoked.PrmAmount				= PrmAmount
							invoked.PrmOriginatingDocument	= PrmOriginatingDocument

		UpdateTemplateTotals is a Set Action
			restricted
			run in foreground
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmTransactionCodeBlock	is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmEndDate				is a GeneralLedgerCalendarPeriod
					default label is "EndDate"
				PrmDate					is Date
					default label is "Date"
				PrmReportAmounts		is a CurrencyAmountsGroup
					default label is "ReportAmounts"
				PrmBusinessClassName			is Alpha 100
					default label is "BusinessClass"
				PrmEditContext				is Alpha 256
					default label is "EditContext"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmTransactionCodeBlock
					required
				PrmDate
					if (PrmEndDate not entered)
						required


			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and !Status.NotReady
				and !Status.Clearing)
			Sort Order
				FinanceEnterpriseGroup
				Status
			Action Rules
				Instance Rules
					include ExtractTransactionAmount

					invoke UpdateTemplateTotalsForTemplate
						invoked.PrmTransactionCodeBlock	= PrmTransactionCodeBlock
						invoked.PrmEndDate				= PrmEndDate
						invoked.PrmDate					= PrmDate
						invoked.PrmAmount				= TransactionAmount
						invoked.PrmBusinessClassName	= PrmBusinessClassName
						invoked.PrmEditContext			= PrmEditContext
						
		CheckTransaction is a Set Action
			restricted
			run in foreground
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmBudgetEditGroup		is UniqueID
					default label is "BudgetEditGroup"
				PrmHeaderUniqueID		is UniqueID
					default label is "HeaderUniqueId"
				PrmTransactionCodeBlock	is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmEndDate				is a GeneralLedgerCalendarPeriod
					default label is "EndDate"
				PrmDate					is Date
					default label is "Date"
				PrmReportAmounts		is a CurrencyAmountsGroup
					default label is "ReportAmounts"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmBudgetEditGroup
					required
				PrmTransactionCodeBlock
					required
				PrmDate
					if (PrmEndDate not entered)
						required


			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and !Status.NotReady
				and !Status.Clearing)
			Sort Order
				FinanceEnterpriseGroup
				Status
			Action Rules
				Set Rules
					Entrance Rules
						LocalBudgetEditGroup	= PrmBudgetEditGroup
						invoke Purge BudgetEditErrorRel
				Instance Rules
					include ExtractTransactionAmount
					invoke CheckTransactionForTemplate
						invoked.PrmBudgetEditGroup		= PrmBudgetEditGroup
						invoked.PrmHeaderUniqueID		= PrmHeaderUniqueID
						invoked.PrmTransactionCodeBlock	= PrmTransactionCodeBlock
						invoked.PrmEndDate				= PrmEndDate
						invoked.PrmDate					= PrmDate
						invoked.PrmAmount				= TransactionAmount

		UpdateGroupTotalsForTemplate is an Instance Action
			restricted
			Parameters
				PrmBudgetEditGroup		is UniqueID
					default label is "BudgetEditGroup"
				PrmTransactionCodeBlock	is like FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmEndDate				is a GeneralLedgerCalendarPeriod
					default label is "EndDate"
				PrmDate					is Date
					default label is "Date"
				PrmAmount				is an InternationalAmount
					default label is "Amount"
				PrmAllowRebuild			is Boolean
					default label is "AllowRebuild"
				PrmOriginatingDocument	is BusinessObjectReference
					default label is "OriginatingDocument"
			Action Rules



				SkipCreateGroup	= false
				LocalBudgetEditGroup	= PrmBudgetEditGroup
				if (RebuildTotalsRel.BudgetRebuildBTGT.DocumentID not entered
				and ProcessingTemplatesRel not exists)
					include LocalizeParameters
					include FindGroupAndPeriod

					if (GeneralLedgerCalendarPeriod exists
					and BudgetGroup exists)
						BudgetTemplateGroupTotal.BudgetEditGroup				= PrmBudgetEditGroup
						BudgetTemplateGroupTotal.BudgetGroup					= BudgetGroup
						BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod= GeneralLedgerCalendarPeriod
						if (PeriodToDate.YearToDate)
							BudgetTemplateGroupTotal.GeneralLedgerCalendarYear	= GeneralLedgerCalendarPeriod.Year
						invoke Update BudgetTemplateGroupTotal
							invoked.Amount += PrmAmount
							if (this instance.BudgetTemplateGroupTotal.OriginatingDocument not entered)
								invoked.OriginatingDocument				= PrmOriginatingDocument





						if (LazyInitNeeded)
							if (LazyDocumentRel not exists)
								invoke Create BudgetLazyDocument
									assign result to BudgetLazyDocumentView
									invoked.BudgetLazyDocument.DocumentID		= LocalBudgetEditGroup
								BudgetLazyDocument								= BudgetLazyDocumentView.BudgetLazyDocument
							else
								BudgetLazyDocument								= LazyDocumentRel.BudgetLazyDocument
							if (config.BypassBudgetGroupUpdate != true)
								invoke UpdateBudgetGroupLazyInit BudgetGroupLazyInit
									invoked.PrmBudgetEditGroup						= LocalBudgetEditGroup
									invoked.PrmBudgetLazyDocument					= BudgetLazyDocument

							AsyncId = current async action request id

							if (!SkipPrepareGroup)
								invoke LazyPrepareGroupInner BudgetGroup in background 
									run after AsyncId
									invoked.BypassBudgetEditGroup				= LocalBudgetEditGroup
							
						if (CheckGroups)
							if (config.BypassBudgetGroupUpdate != true)
								increment BudgetGroupCheck.Count 
							else
								if (BudgetGroupCheckRel not exists)				
									invoke Update BudgetGroupCheckRel			
				else
				if (RebuildTotalsRel.BudgetRebuildBTGT.DocumentID not entered
				and ProcessingTemplatesRel exists) 
					if (PrmAllowRebuild)
						invoke Create BudgetRebuildBTGT
							invoked.BudgetRebuildBTGT.DocumentID		= PrmBudgetEditGroup
							invoked.FinanceEnterpriseGroup				= FinanceEnterpriseGroup
							invoked.Timestamp							= current timestamp
					else
						constraint (first ProcessingTemplatesRel.BudgetTemplate not entered)
							"Template<first ProcessingTemplatesRel.BudgetTemplate>IsCurrentlyInAProcessingStateAndThereforeCannotProcessThisTransaction._PleaseRetryLater."				

		UpdateGroupTotalsBudgetForTemplate is an Instance Action
			restricted
			Parameters
				PrmBudgetEditGroup			is UniqueID
					default label is "BudgetEditGroup"
				PrmTransactionCodeBlock		is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmEndDate				is a GeneralLedgerCalendarPeriod
					default label is "EndDate"
				PrmCurrency				is a Currency
					default label is "Currency"
				PrmAmount				is an InternationalAmount
					default label is "Amount"
				PrmOriginatingDocument	is BusinessObjectReference
					default label is "OriginatingDocument"
			Action Rules
				constraint (Status.Ready)
					"Template<BudgetTemplate>MustBeInReadyState"
				TransactionCodeBlock											= PrmTransactionCodeBlock
				TransactionCurrency												= DerivedCurrency
				LocalBudgetEditGroup											= PrmBudgetEditGroup
				if (TransactionCurrency = PrmCurrency)
					TransactionAmount											= PrmAmount
				else
					LocalBudgetRateGroup.BudgetTranslationRate					= true
					LocalBudgetRateGroup.Scenario								= Scenario
					if (PrmTransactionCodeBlock.GeneralLedgerChartAccount entered)
						LocalBudgetRateGroup.GeneralLedgerTranslationCode		= PrmTransactionCodeBlock.GeneralLedgerChartAccount.TranslationCode
					else
						LocalBudgetRateGroup.GeneralLedgerTranslationCode		= "IS"
					LocalBudgetRateGroup.TranslationDate						= PrmEndDate.Date
					LocalBudgetRateGroup.GeneralLedgerTranslationRate.CurrencyRelationship.FromCurrency		= PrmCurrency
					LocalBudgetRateGroup.GeneralLedgerTranslationRate.CurrencyRelationship.ToCurrency		= TransactionCurrency
					TransactionAmount	= PrmAmount*LocalBudgetRateGroup.GeneralLedgerTranslationRate.Rate
					round TransactionAmount to nearest DerivedRoundTo
					if (PrmAmount entered)
						constraint (TransactionAmount entered)
							"TranslationRateDoesNotExistFrom<PrmCurrency>To<TransactionCurrency>"
				LocalEndDate			= PrmEndDate
				
				initialize BudgetGroup
				initialize GeneralLedgerCalendarPeriod
				SkipCreateGroup	= false
				include FindGroupAndPeriodInner				
				if (BudgetGroup exists
				and GeneralLedgerCalendarPeriod exists)
					BudgetTemplateGroupTotal.BudgetEditGroup				= PrmBudgetEditGroup
					BudgetTemplateGroupTotal.BudgetGroup					= BudgetGroup
					BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod	= GeneralLedgerCalendarPeriod
					if (PeriodToDate.YearToDate)
						BudgetTemplateGroupTotal.GeneralLedgerCalendarYear	= GeneralLedgerCalendarPeriod.Year
					invoke Update BudgetTemplateGroupTotal
						invoked.Amount += TransactionAmount
						if (PrmOriginatingDocument entered)
							invoked.OriginatingDocument				= PrmOriginatingDocument
					if (CheckGroups)
						increment BudgetGroupCheck.Count
					if (LazyInitNeeded)

						if (LazyDocumentRel not exists)
							invoke Create BudgetLazyDocument
								assign result to BudgetLazyDocumentView
								invoked.BudgetLazyDocument.DocumentID		= LocalBudgetEditGroup
								invoked.IsBudget							= true
							BudgetLazyDocument								= BudgetLazyDocumentView.BudgetLazyDocument
						else
							BudgetLazyDocument								= LazyDocumentRel.BudgetLazyDocument

						invoke Update BudgetGroupLazyInit
							invoked.Counter									+= 1
							invoked.BudgetEditGroup							= LocalBudgetEditGroup
							invoked.BudgetLazyDocument						= BudgetLazyDocument
						if (!SkipPrepareGroup)
							invoke LazyPrepareGroupInner BudgetGroup in background 
								invoked.BypassBudgetEditGroup				= LocalBudgetEditGroup

					if (!LazyActivation or 
					(LazyActivation and BudgetGroup.LazyInitialized))
						invoke SetErrorFalse BudgetTemplateGroupTotal
						ChangeAmount								= BudgetTemplateGroupTotal.Amount	
						include GetAmountsForBudgetChange
				
						if (CommitmentAmount + FutureCommitment > AdjustedBudgetAmount
						or BudgetGroup.NeedsRecalculation)
							BudgetEditCounter	= 1 + last BudgetEditErrorRel.BudgetEditError.Counter
							IsBudgetChangeError				= true
							include CreateTemplateError

							invoke SetError BudgetTemplateGroupTotal
							initialize IsBudgetChangeError
		UpdateTemplateTotalsForTemplate is an Instance Action
			restricted
			Parameters
				PrmTransactionCodeBlock	is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmEndDate				is a GeneralLedgerCalendarPeriod
					default label is "EndDate"
				PrmDate					is Date
					default label is "Date"
				PrmAmount				is an InternationalAmount
					default label is "Amount"
				PrmBusinessClassName			is Alpha 100
					default label is "BusinessClass"
				PrmEditContext				is Alpha 256
					default label is "EditContext"
			Action Rules
				constraint (Status.Ready)
					"Template<BudgetTemplate>MustBeInReadyState"
				SkipCreateGroup	= false
				include LocalizeParameters
				include FindGroupAndPeriod
				if (BudgetGroup exists
				and GeneralLedgerCalendarPeriod exists)


					BusinessClassName	= PrmBusinessClassName
					EditContext			= PrmEditContext
					NextAmount			= PrmAmount
					include IncrementTemplateTotal

					if (LazyInitNeeded
					and !SkipPrepareGroup)
						invoke LazyPrepareGroupInner BudgetGroup in background
							invoked.BypassBudgetEditGroup				= LocalBudgetEditGroup

		CheckTransactionForTemplate is an Instance Action
			restricted
			Parameters
				PrmBudgetEditGroup		is UniqueID
					default label is "BudgetEditGroup"
				PrmHeaderUniqueID		is UniqueID
					default label is "HeaderUniqueId"
				PrmTransactionCodeBlock	is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmEndDate				is a GeneralLedgerCalendarPeriod
					default label is "EndDate"
				PrmDate					is Date
					default label is "Date"
				PrmAmount				is an InternationalAmount
					default label is "Amount"
			Action Rules
				LocalBudgetEditGroup	= PrmBudgetEditGroup
				LocalHeaderID			= PrmHeaderUniqueID
				if (PrmAmount > 0)

					include LocalizeParameters
					SkipCreateGroup	= true 
					include FindGroupAndPeriod
					if (BudgetGroup exists
					and GeneralLedgerCalendarPeriod exists) 
					





						if (LazyInitNeeded
						and !SkipPrepareGroup)
							display "SkipCallLazyPrepareGroupInner<BudgetTemplate>,<BudgetGroup.DisplayMessage>,<PrmAmount>"

								
						if (!LazyActivation or 
						(LazyActivation and BudgetGroup.LazyInitialized))

							ChangeAmount								= PrmAmount
							include GetAmountsForObligationChange
						
							display "CommitmentAmount:<CommitmentAmount>"
							display "BudgetAmount:<BudgetAmount>"
							display "PendingCommitmentAmount:<PendingCommitmentAmount>"
							display "AdjustedBudgetAmount:<AdjustedBudgetAmount>"		

							if (PeriodToDate.YearToDate)
								GeneralLedgerCalendarYear	= GeneralLedgerCalendarPeriod.Year

							if (PendingCommitmentAmount > AdjustedBudgetAmount
							or BudgetGroup.NeedsRecalculation)
								BudgetEditCounter	= 1 + last BudgetEditErrorRel.BudgetEditError.Counter
								include CreateTemplateError
								invoke SetError GroupTotalForDocumentAndBudgetGroupRel
							else
							if (BudgetEditErrorForBudgetGroupRel not exists)
								invoke SetErrorFalse GroupTotalForDocumentAndBudgetGroupRel

							initialize GeneralLedgerCalendarYear

		GetRemainingBudget is a Set Action
			restricted
			run in foreground
			Parameters				
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmCurrency					is a Currency
					default label is "Currency"
				PrmKey						is Alpha 100
					default label is "Key"
				PrmTransactionCodeBlock		is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmDate						is Date
					default label is "Date"
			Parameter Rules
				PrmFinanceEnterpriseGroup
					required
				PrmCurrency
					required
				PrmKey
					required
				PrmTransactionCodeBlock
					required
				PrmDate
					required
			Instance Selection
				where (FinanceEnterpriseGroup			= PrmFinanceEnterpriseGroup
				and BudgetTemplate.Status.Ready)
			Action Rules
				Set Rules
					Entrance Rules
						LocalFEG						= PrmFinanceEnterpriseGroup
						LocalKey						= PrmKey

						invoke Purge BudgetTemplateOutputRel.BudgetTemplateOutput

					Exit Rules
						LocalFEG						= PrmFinanceEnterpriseGroup
						LocalKey						= PrmKey

						if (BudgetTemplateOutputRel not exists)

							invoke Create BudgetTemplateOutput
								invoked.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
								invoked.BudgetTemplateOutput	= PrmKey
								invoked.Invalid		= true		
								invoked.BudgetScenario			= Scenario					
								invoked.BudgetTemplate			= BudgetTemplate
				Instance Rules
					invoke GetRemainingBudgetForTemplate
						invoked.PrmCurrency				= PrmCurrency
						invoked.PrmKey					= PrmKey
						invoked.PrmTransactionCodeBlock	= PrmTransactionCodeBlock
						invoked.PrmDate					= PrmDate
					
		GetRemainingBudgetForTemplate is an Instance Action
			restricted
			Parameters
				PrmCurrency					is a Currency
					default label is "Currency"
				PrmKey					is Alpha 100
					default label is "Key"
				PrmTransactionCodeBlock	is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmDate					is Date
					default label is "Date"
			Parameter Rules
				PrmKey
					required
				PrmTransactionCodeBlock
					required
				PrmDate
					required
			Local Fields
				Remaining				is a TotalAmount
				CurrencyAmount
			Action Rules


				LocalFEG									= FinanceEnterpriseGroup
				LocalKey									= PrmKey
				BudgetTemplateOutput						= PrmKey
				
				SkipCreateGroup								= true
				LocalDate									= PrmDate
				TransactionCodeBlock						= PrmTransactionCodeBlock
				
				include FindGroupAndPeriod

				if (BudgetGroup exists
				and !BudgetGroup.NeedsRecalculation
				and GeneralLedgerCalendarPeriod exists
					and ((BudgetTemplateOutputRel exists and !BudgetTemplateOutputRel.Invalid)
					or BudgetTemplateOutputRel not exists))
					
					include GetCommitmentAmount
					include GetBudgetAmount
					if (ToleranceOption.Percentage)
						AdjustedBudgetAmount		= BudgetAmount*(1.0 + EditTolerance)
					else
						AdjustedBudgetAmount		= BudgetAmount + ToleranceAmount
					Remaining						= AdjustedBudgetAmount - CommitmentAmount - FutureCommitment
					

					if (Remaining != 0)
						TransactionCurrency												= DerivedCurrency
						if (TransactionCurrency != PrmCurrency)
















							
							
							initialize CurrencyExchange
							TransactionAmount			= Remaining
							FromCurrency				= TransactionCurrency
							ExchangeDate				= PrmDate
							ToCurrency					= PrmCurrency
							CurrencyTable				= FinanceEnterpriseGroup.CurrencyTable
							CurrencyExchange.ToCurrency = PrmCurrency
							Remaining					= CurrencyExchange.OutputCurrencyAmount
					

					if ((BudgetTemplateOutputRel exists
						and Remaining < BudgetTemplateOutputRel.Amount)
					or BudgetTemplateOutputRel not exists)
						display "UpdateAmont"
						invoke Update BudgetTemplateOutput
							invoked.Currency	= PrmCurrency
							invoked.Amount		= Remaining
							invoked.Invalid		= false
							invoked.BudgetScenario = Scenario
							invoked.BudgetTemplate = BudgetTemplate
				if (BudgetGroup.NeedsRecalculation)

					invoke Update BudgetTemplateOutput
						invoked.Invalid		= true							
						invoked.BudgetScenario = Scenario					
						invoked.BudgetTemplate = BudgetTemplate

		CheckGroupTotal is an Instance Action
			restricted
			Parameters
				PrmGroupTotal	is a BudgetTemplateGroupTotal
				PrmCounter		is Numeric 4
			Action Rules

				LocalBudgetEditGroup				= PrmGroupTotal.BudgetEditGroup
				BudgetGroup							= PrmGroupTotal.BudgetTemplateGroupTotal.BudgetGroup
				GeneralLedgerCalendarPeriod			= PrmGroupTotal.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod
				if (PeriodToDate.Period)
					ChangeAmount					= PrmGroupTotal.Amount
				else
				if (PeriodToDate.YearToDate)
					GeneralLedgerCalendarYear		= PrmGroupTotal.BudgetTemplateGroupTotal.GeneralLedgerCalendarYear


					if (GeneralLedgerCalendarYear entered)
						ChangeAmount					= sum BudgetTemplateGroupTotalYearToDatePeriodsRel.Amount
					else
						display "Warning:OldBudgetTemplateGroupTotal,MissingYear"
						ChangeAmount					= PrmGroupTotal.Amount
				else
				if (PeriodToDate.LifeToDate)
					ChangeAmount					= sum BudgetTemplateGroupTotalLifeToDatePeriodsRel.Amount
				else 
				if (PeriodToDate.Total)
					ChangeAmount					= sum BudgetTemplateGroupTotalUptoCurrentPeriodsRel.Amount

				if (ChangeAmount > 0)
					include GetAmountsForObligationChange

					if (PendingCommitmentAmount > AdjustedBudgetAmount
					or BudgetGroup.NeedsRecalculation)
						BudgetEditCounter				= PrmCounter + 1
						invoke SetError PrmGroupTotal
						LocalBudgetEditGroup			= PrmGroupTotal.BudgetEditGroup
						initialize LocalHeaderID
						include CreateTemplateError

		CheckGroupTotalBudget is an Instance Action
			restricted
			Parameters
				PrmGroupTotal	is a BudgetTemplateGroupTotal
				PrmCounter		is Numeric 4
			Action Rules
				LocalBudgetEditGroup				= PrmGroupTotal.BudgetEditGroup
				BudgetGroup							= PrmGroupTotal.BudgetTemplateGroupTotal.BudgetGroup
				GeneralLedgerCalendarPeriod			= PrmGroupTotal.BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod
				if (PeriodToDate.Period)
					ChangeAmount					= PrmGroupTotal.Amount
				else
				if (PeriodToDate.YearToDate)
					GeneralLedgerCalendarYear		= PrmGroupTotal.BudgetTemplateGroupTotal.GeneralLedgerCalendarYear
					ChangeAmount					= sum BudgetTemplateGroupTotalYearToDatePeriodsRel.Amount
				else
				if (PeriodToDate.LifeToDate)
					ChangeAmount					= sum BudgetTemplateGroupTotalLifeToDatePeriodsRel.Amount
				else
				if (PeriodToDate.Total)
					ChangeAmount					= sum AllBudgetTemplateGroupTotalRel.Amount

				initialize IsBudgetChangeError
				if (ChangeAmount < 0)
					if (LazyActivation)
						constraint (BudgetGroup.LazyInitialized)
							"BudgetGroup<BudgetGroup.DisplayMessage>InTemplate<BudgetTemplate>IsNotInitialized._TryAgainPlease"
					include GetAmountsForBudgetChange
					if (CommitmentAmount + FutureCommitment > AdjustedBudgetAmount
					or BudgetGroup.NeedsRecalculation)
						BudgetEditCounter				= PrmCounter + 1
						invoke SetError PrmGroupTotal
						LocalBudgetEditGroup			= PrmGroupTotal.BudgetEditGroup
						IsBudgetChangeError				= true
						initialize LocalHeaderID
						include CreateTemplateError

		CheckGroupAgainstBudget is an Instance Action
			restricted
			Parameters
				PrmBudgetGroup					is a BudgetGroup
				PrmPeriod						is a GeneralLedgerCalendarPeriod
			Action Rules
				BudgetGroup					= PrmBudgetGroup
				GeneralLedgerCalendarPeriod	= PrmPeriod
				if (Status.Ready
				and !BudgetGroup.NeedsRecalculation
				and BudgetGroup.LazyInitialized)
					LocalJulianDate				= GeneralLedgerCalendarPeriod.StartDateJulian
					LocalBudgetCalendar			= EditCalendar
					initialize LocalBudgetEditGroup
					include GetCommitmentAmount
					include GetBudgetAmount
					invoke UpdateCheckStatus BudgetGroup
						invoked.PrmPeriod		= PrmPeriod
						invoked.CommitmentAmount = CommitmentAmount + FutureCommitment
						invoked.BudgetAmount	= BudgetAmount

		DeleteThisInstance is an Instance Action
			restricted
			Action Rules
				invoke Delete BudgetTemplate
			
		FinishedCheckingForErrors is an Instance Action
			restricted
			Action Rules
				CheckingForErrors	= false
				ErrorCheckTime		= current timestamp
				

		Deactivate is an Instance Action
			valid when (ReadyOrNeedsCleanup)
			confirmation required
				"ThisActionShouldOnlyRunIfNoProcessingActivityForThisTemplateIsRunningOrWillBeRestarted"
			Action Rules
				constraint (ReadyOrNeedsCleanup)
					"CanOnlyDeactivateInReadyState"
				Counter = -1
				include UpdateFinanceEnterpriseGroupCurrencyCounter
				invoke ResetState

		SetCurrencyCounter is an Instance Action
			restricted
			Action Rules
				Counter = 1
				include UpdateFinanceEnterpriseGroupCurrencyCounter


		PrimeLazyGroups is an Instance Action
			restricted
		AugmentTemplateTotalsFromGeneralLedgerTransaction is an Instance Action
			default label is "AugmentTemplateTotalsFromGlobalLedgerTransaction"
			restricted
		InitializeObligations is an Instance Action
			restricted

		
		AugmentTemplateTotalsFromReleasedOrPendingGLTransactions is an Instance Action
			default label is "AugmentTemplateTotalsFromGlobalLedgerTransaction"
			restricted
			Action Rules

				SkipTransactionCheck			= true
				SkipSystemCheck					= false				
				RelationName					= "ReleasedGLGeneralLedgerJournalControlsRel"
				BusinessClassName				= "GeneralLedgerJournalControl"
					
				for each ReleasedGLGeneralLedgerJournalControlsRel

					LocalParentAccountingEntity	= each.AccountingEntity
					LocalClosePeriod			= each.GeneralLedgerClosePeriod
					LocalJournalControl			= each.GeneralLedgerJournalControl
					LocalEndDate				= LocalJournalControl.GeneralLedgerCalendarPeriod
					for each GLTransactionRel
						ValidationAccount 		= each.FinanceCodeBlock.GeneralLedgerChartAccount
						if (ShouldProcessAccountForTransaction)
							include ExtractTransactionAmountForRebuild
							TransactionCodeBlock = each.FinanceCodeBlock
							include FindGroupAndPeriod
							if (BudgetGroup exists
							and ShouldIncludeTransaction
							and LazyStage		= BudgetGroup.LazyStage)
								EditContext	= "AugmentTemplateTotalsFromReleasedGLTransaction"
								NextAmount	= TransactionAmount
								include IncrementTemplateTotal
								include NextItemProcessed
								invoke Update BudgetGroup
									invoked.InitializedFromReleasedTransactions	= true
						include NextItemProcessed
					include NextItemProcessed


		GetReleasedOrPendingGLTransactions is an Instance Action
			restricted
			Parameters
				PrmBudgetGroupObligationVarianceRun is like BudgetGroupObligationVarianceRun
				PrmBudgetGroupObligationVariance 	is like BudgetGroupObligationVariance

			Action Rules
				LocalObligationVarianceRun		= PrmBudgetGroupObligationVarianceRun
				SkipTransactionCheck			= true
				SkipSystemCheck					= false				
				RelationName					= "ReleasedGLGeneralLedgerJournalControlsRel"
				BusinessClassName				= "GeneralLedgerJournalControl"
					
				for each ReleasedGLGeneralLedgerJournalControlsRel
					LocalParentAccountingEntity	= each.AccountingEntity
					LocalClosePeriod			= each.GeneralLedgerClosePeriod
					LocalJournalControl			= each.GeneralLedgerJournalControl
					LocalEndDate				= LocalJournalControl.GeneralLedgerCalendarPeriod
					for each GLTransactionRel
						ValidationAccount 		= each.FinanceCodeBlock.GeneralLedgerChartAccount
						if (ShouldProcessAccountForTransaction)
							include ExtractTransactionAmountForRebuild
							TransactionCodeBlock = each.FinanceCodeBlock
							include FindGroupAndPeriod
							if (BudgetGroupTotal exists)
								invoke UpdateJournalAmount BudgetGroupObligationVarianceRel
									if (each.GeneralLedgerJournalControl.Status.Released)
										invoked.PrmReleasedJournalAmount = TransactionAmount
									if (each.GeneralLedgerJournalControl.Status.PendingApproval)
										invoked.PrmPendingApprovalJournalAmount = TransactionAmount
								include NextItemProcessed
						include NextItemProcessed
					include NextItemProcessed

		AugmentTemplateTotalsFromReleasedGLTransactionsForGroup is an Instance Action
			default label is "AugmentTemplateTotalsFromReleasedGLTransactionsForGroup"
			restricted
			Parameters
				Group						is a BudgetGroup
				BypassBudgetEditGroup		is UniqueID
			Action Rules

				BudgetGroup						= Group
				BusinessClassName				= "GeneralLedgerTransaction"
					
				SkipTransactionCheck			= false
				SkipSystemCheck					= false

				if (BypassLazyActivateGLTransactionOptimization)				
					RelationName					= "ReleasedGLTransactionsForGroupRel"
					for each ReleasedGLTransactionsForGroupRel
						include AugmentTemplateTotal
				else
					if (HasAccount and (PostingAccount or ManualAccount))
						RelationName					= "ReleasedGLTransactionsForGroupByAccountRel"
						for each ReleasedGLTransactionsForGroupByAccountRel
							include AugmentTemplateTotal				
					else
					if (HasProject and (PostingProject or ManualProject))
						RelationName					= "ReleasedGLTransactionsForGroupByProjectRel"
						for each ReleasedGLTransactionsForGroupByProjectRel
							include AugmentTemplateTotal				
					else
					if (HasAccountingUnit and (PostingAccountingUnit or ManualAccountingUnit))
						RelationName					= "ReleasedGLTransactionsForGroupByAccountingUnitRel"
						for each ReleasedGLTransactionsForGroupByAccountingUnitRel
							include AugmentTemplateTotal				
					else
					if (HasAccountingEntity)
						RelationName					= "ReleasedGLTransactionsForGroupByAccountingEntityRel"
						for each ReleasedGLTransactionsForGroupByAccountingEntityRel
							include AugmentTemplateTotal				
					else						
						RelationName					= "ReleasedGLTransactionsForGroupRel"
						for each ReleasedGLTransactionsForGroupRel
							include AugmentTemplateTotal

		AugmentTemplateTotalsFromPendingGLTransactionsForGroup is an Instance Action
			default label is "AugmentTemplateTotalsFromPendingGLTransactionsForGroup"
			restricted
			Parameters
				Group						is a BudgetGroup
				BypassBudgetEditGroup		is UniqueID
			Action Rules

				BudgetGroup						= Group
				SkipTransactionCheck			= true
				SkipSystemCheck					= false				
				RelationName					= "PendingGLGeneralLedgerJournalControlsForGroupRel"
				BusinessClassName				= "GeneralLedgerJournalControl"
					
				for each PendingGLGeneralLedgerJournalControlsForGroupRel

					LocalParentAccountingEntity		= each.AccountingEntity
					LocalClosePeriod				= each.GeneralLedgerClosePeriod
					LocalJournalControl				= each.GeneralLedgerJournalControl
					LocalEndDate					= LocalJournalControl.GeneralLedgerCalendarPeriod
					LocalHeaderID					= each.UniqueID 
					if (BypassBudgetEditGroup not entered
					or BypassBudgetEditGroup != LocalHeaderID)
						IsLazyInitializing			= true
						for each GLTransactionRel
							ValidationAccount		= each.FinanceCodeBlock.GeneralLedgerChartAccount
							TransactionCodeBlock 	= each.FinanceCodeBlock
							if (TransactionMatchesBudgetGroup
							and ShouldProcessAccountForTransaction)
								include ExtractTransactionAmountForRebuild
								include FindPeriod

								if (GeneralLedgerCalendarPeriod exists
								and ShouldIncludeTransaction
								and TransactionAmount != 0)
									EditContext	= "LazyAugmentTemplateTotalsFromPendngForGroup"
									NextAmount	= TransactionAmount
									include IncrementTemplateTotal


							include NextItemProcessed
					include NextItemProcessed


		BuildTemplateGroupTotalsFromUnreleasedGLGeneralLedgerTransaction is an Instance Action
			default label is "BuildTemplateGroupTotalsFromUnreleasedGlobalLedgerTransaction"
			restricted
			Action Rules
				constraint (GLSystemCodeRel.EncumbranceOption.Track
				or GLSystemCodeRel.EncumbranceOption.TrackAndEdit)
					"GlobalLedgerSystemCodeIsNotEnabledForBudgetEdit"

				for each UnreleasedGLGeneralLedgerJournalControlsRel
					LocalParentAccountingEntity	= each.AccountingEntity
					LocalClosePeriod			= each.GeneralLedgerClosePeriod
					LocalJournalControl			= each.GeneralLedgerJournalControl
					LocalEndDate				= LocalJournalControl.GeneralLedgerCalendarPeriod
					LocalBudgetEditGroup		= each.UniqueID
					LocalSourceDocument			= reference to each.GeneralLedgerJournalControl 
					for each GLTransactionRel
						include ExtractTransactionAmountForRebuild
						include ApplyUpdatesToGroupTotals
						if (BudgetGroup exists
						and LazyStage			= BudgetGroup.LazyStage)
							invoke Update BudgetGroup
								invoked.HasUnreleasedGLTransaction	= true							
						include NextItemProcessed

							
		BuildTemplateGroupTotalsFromUnreleasedGLGeneralLedgerTransactionForGroup is an Instance Action 
			default label is "BuildTemplateGroupTotalsFromUnreleasedGlobalLedgerTransactionForGroup"
			restricted
			Parameters
				Group						is a BudgetGroup
				BypassBudgetEditGroup		is UniqueID
			Action Rules

				BudgetGroup						= Group
 				BusinessClassName				= "GeneralLedgerJournalControl"
				SkipTransactionCheck			= false
				SkipSystemCheck					= false
				
				if (BypassLazyActivateGLTransactionOptimization)
					RelationName					= "UnreleasedGLGeneralLedgerTransactionForGroupRel"
					for each UnreleasedGLGeneralLedgerTransactionForGroupRel
						include BuildBudgetGroupTotalFromUnreleased
				else
					if (HasAccount and (PostingAccount or ManualAccount))
						RelationName					= "UnreleasedGLGeneralLedgerTransactionForGroupByAccountRel"
						for each UnreleasedGLGeneralLedgerTransactionForGroupByAccountRel
							include BuildBudgetGroupTotalFromUnreleased
					else
					if (HasProject and (PostingProject or ManualProject))
						RelationName					= "UnreleasedGLGeneralLedgerTransactionForGroupByProjectRel"
						for each UnreleasedGLGeneralLedgerTransactionForGroupByProjectRel
							include BuildBudgetGroupTotalFromUnreleased
					else
					if (HasAccountingUnit and (PostingAccountingUnit or ManualAccountingUnit))
						RelationName					= "UnreleasedGLGeneralLedgerTransactionForGroupByAccountingUnitRel"
						for each UnreleasedGLGeneralLedgerTransactionForGroupByAccountingUnitRel
							include BuildBudgetGroupTotalFromUnreleased				
					else
					if (HasAccountingEntity)
						RelationName					= "UnreleasedGLGeneralLedgerTransactionForGroupByAccountingEntityRel"
						for each UnreleasedGLGeneralLedgerTransactionForGroupByAccountingEntityRel
							include BuildBudgetGroupTotalFromUnreleased				
					else
						RelationName					= "UnreleasedGLGeneralLedgerTransactionForGroupRel"
						for each UnreleasedGLGeneralLedgerTransactionForGroupRel
							include BuildBudgetGroupTotalFromUnreleased
					


		BuildTemplateGroupTotalsFromUnreleasedGLCommit is an Instance Action
			restricted
			Parameters
				Group						is a BudgetGroup
				BypassBudgetEditGroup		is UniqueID
			Action Rules

				BudgetGroup						= Group 
				RelationName					= "UnreleasedGLCommitRel"
				BusinessClassName				= "GLCommit"
				
				if (Group not entered)
					SkipTransactionCheck		= true
					SkipSystemCheck				= false				

					for each UnreleasedGLCommitRel
						if (each.POCommitOrigPeriod entered)
							LocalEndDate		= each.POCommitOrigPeriod
						else
							LocalEndDate		= each.EntityYearPeriod
						LocalBudgetEditGroup	= each.HeaderUniqueID
						if (each.SkipBudgetRebuild)
							TransactionAmount	= 0.0
						else
						if (each.HasPriorYearPOCommit)
							LocalGLCommit		= each.GLCommit
							TransactionAmount	= each.SubsystemDerivedDifferenceAmount
							include ConvertTransactionAmountUsingGLCommit
						else
							include ExtractTransactionAmountForRebuild
						LocalSourceDocument 	= GLDocumentUniqueIDRel.HeaderObjectReference
						include ApplyUpdatesToGroupTotals
						if (LazyActivation
						and BudgetGroup exists
						and GeneralLedgerCalendarPeriod exists
						and LazyStage			= BudgetGroup.LazyStage)
							invoke Update BudgetGroup
								invoked.HasUnreleasedCommit		= true
						include NextItemProcessed
				else
					SkipTransactionCheck		= false
					SkipSystemCheck				= false				
					IsLazyInitializing			= true

					for each UnreleasedGLCommitRel
						if (BypassBudgetEditGroup not entered
						or each.HeaderUniqueID 	!= BypassBudgetEditGroup)
							initialize GeneralLedgerCalendarPeriod
							if (each.POCommitOrigPeriod entered)
								LocalEndDate			= each.POCommitOrigPeriod
							else
								LocalEndDate			= each.EntityYearPeriod
							include FindPeriod			
							if (GeneralLedgerCalendarPeriod exists)
								LocalBudgetEditGroup	= each.HeaderUniqueID
								TransactionCodeBlock 	= each.FinanceCodeBlock
								BudgetTemplateGroupTotal.BudgetEditGroup			= LocalBudgetEditGroup
								BudgetTemplateGroupTotal.BudgetGroup				= BudgetGroup
								BudgetTemplateGroupTotal.GeneralLedgerCalendarPeriod= GeneralLedgerCalendarPeriod
								if (PeriodToDate.YearToDate)
									BudgetTemplateGroupTotal.GeneralLedgerCalendarYear	= GeneralLedgerCalendarPeriod.Year
								if (BudgetTemplateGroupTotal not exists)								
									if (each.SkipBudgetRebuild)
										TransactionAmount	= 0.0
									else
									if (each.HasPriorYearPOCommit)
										LocalGLCommit		= each.GLCommit
										TransactionAmount	= each.SubsystemDerivedDifferenceAmount
										include ConvertTransactionAmountUsingGLCommit
									else
										include ExtractTransactionAmountForRebuild
									LocalSourceDocument 	= GLDocumentUniqueIDRel.HeaderObjectReference
									include ApplyUpdatesToGroupTotalsNoLookups
						include NextItemProcessed




		BuildTemplateGroupTotalsFromReleasedGLCommitWithDifferenceAmount is an Instance Action
			restricted
			Parameters
				Group						is a BudgetGroup
				BypassBudgetEditGroup		is UniqueID
			Action Rules

				BudgetGroup							= Group 




				RelationName						= "ReleasedGLCommitWithDifferenceAmountRel"
				BusinessClassName					= "GLCommit"
						
				if (Group not entered)
					SkipTransactionCheck		= true
					SkipSystemCheck				= false				
					for each ReleasedGLCommitWithDifferenceAmountRel

						LocalHeaderID			= each.HeaderUniqueID
						if (each.POCommitOrigPeriod entered)
							LocalEndDate		= each.POCommitOrigPeriod
						else
							LocalEndDate		= each.EntityYearPeriod
						LocalBudgetEditGroup	= each.HeaderUniqueID
						TransactionCodeBlock 	= each.FinanceCodeBlock
						LocalSourceDocument 	= GLDocumentUniqueIDRel.HeaderObjectReference
						include ExtractDifferenceTransactionAmountForRebuild
						include ApplyUpdatesToGroupTotals
						if (LazyActivation
						and BudgetGroup exists
						and GeneralLedgerCalendarPeriod exists
						and LazyStage			= BudgetGroup.LazyStage)
							invoke Update BudgetGroup
								invoked.HasReleasedCommit		= true
						include NextItemProcessed
				else	
					BudgetGroup					= Group
					IsLazyInitializing			= true
					SkipTransactionCheck		= false
					SkipSystemCheck				= false				
					initialize GeneralLedgerCalendarPeriod
					for each ReleasedGLCommitWithDifferenceAmountRel

						if (BypassBudgetEditGroup not entered
						or each.HeaderUniqueID 	!= BypassBudgetEditGroup)
							initialize GeneralLedgerCalendarPeriod
							if (each.POCommitOrigPeriod entered)
								LocalEndDate		= each.POCommitOrigPeriod
							else
								LocalEndDate		= each.EntityYearPeriod
							include FindPeriod			
							if (GeneralLedgerCalendarPeriod exists)
								LocalBudgetEditGroup	= each.HeaderUniqueID
								TransactionCodeBlock 	= each.FinanceCodeBlock
								LocalSourceDocument 	= GLDocumentUniqueIDRel.HeaderObjectReference
								include ExtractDifferenceTransactionAmountForRebuild
								include ApplyUpdatesToGroupTotalsNoLookups
						include NextItemProcessed




		BuildTemplateGroupTotalsFromUnreleasedChangeOrders is an Instance Action							
			restricted
			Parameters
				Group						is a BudgetGroup
				BypassBudgetEditGroup		is UniqueID
			Action Rules

				for each UnreleasedChangeOrdersRel
					BudgetChangeOrder 				= each.BudgetChangeOrder
					LocalEndDate					= BudgetChangeOrder.ReleaseDate
					LocalHeaderID					= each.UniqueID
					if (Group not entered)
						for each ChangeOrderLinesRel
							BudgetChangeOrder = each.BudgetChangeOrder
							ValidationAccount = each.BudgetChangeOrderLine.BudgetCodeBlock.GeneralLedgerChartAccount
							if (each.Amount != 0
							and (each.BudgetChangeOrderLine.BudgetCodeBlock.GeneralLedgerChartAccount not entered
							or ShouldProcessAccountForTransaction))
								invoke ProcessUnreleasedChangeOrderLine
									invoked.PrmFinanceEnterpriseGroup= each.FinanceEnterpriseGroup
									invoked.PrmScenario				= each.Scenario
									invoked.PrmChangeOrder			= each.BudgetChangeOrder
									invoked.PrmChangeOrderLine 		= each.BudgetChangeOrderLine
									invoked.PrmTransactionCodeBlock = each.BudgetCodeBlock
									invoked.PrmTransactionCodeBlock.ToAccountingEntity = each.BudgetCodeBlock.AccountingEntity
									invoked.PrmChangeOrderUniqueID	= LocalHeaderID
							include NextItemProcessed
					else					
					if (BypassBudgetEditGroup not entered
					or LocalHeaderID 	!= BypassBudgetEditGroup)
						BudgetGroup					= Group
						IsLazyInitializing			= true
						initialize GeneralLedgerCalendarPeriod
						for each ChangeOrderLinesRel
							TransactionCodeBlock 					= each.BudgetCodeBlock
							TransactionCodeBlock.ToAccountingEntity	= each.BudgetCodeBlock.AccountingEntity							
							BudgetChangeOrder 						= each.BudgetChangeOrder
							ValidationAccount 						= each.BudgetChangeOrderLine.BudgetCodeBlock.GeneralLedgerChartAccount
							if (each.Amount 						!= 0
							and (each.BudgetChangeOrderLine.BudgetCodeBlock.GeneralLedgerChartAccount not entered
							or ShouldProcessAccountForTransaction))
								if (TransactionMatchesBudgetGroup)
									invoke ProcessUnreleasedChangeOrderLine
										invoked.PrmFinanceEnterpriseGroup= each.FinanceEnterpriseGroup
										invoked.PrmScenario				= each.Scenario
										invoked.PrmChangeOrder			= each.BudgetChangeOrder
										invoked.PrmChangeOrderLine 		= each.BudgetChangeOrderLine
										invoked.PrmTransactionCodeBlock = each.BudgetCodeBlock
										invoked.PrmTransactionCodeBlock.ToAccountingEntity = each.BudgetCodeBlock.AccountingEntity
										invoked.PrmIsLazyInitializing	= true
										invoked.PrmChangeOrderUniqueID	= LocalHeaderID										
							include NextItemProcessed
						include NextItemProcessed
				commit transaction

							
		ProcessUnreleasedChangeOrderLine is an Instance Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup						is a FinanceEnterpriseGroup
				PrmScenario										is a Scenario
				PrmChangeOrder									is a BudgetChangeOrder
				PrmChangeOrderLine								is a BudgetChangeOrderLine
				PrmTransactionCodeBlock							is a FinanceCodeBlock
				PrmIsLazyInitializing							is Boolean
				PrmChangeOrderUniqueID							is UniqueID
			Action Rules
				IsLazyInitializing								= PrmIsLazyInitializing
				LocalHeaderID									= PrmChangeOrderUniqueID 
				initialize GeneralLedgerCalendarPeriod
				TransactionCodeBlock							= PrmTransactionCodeBlock
				LocalBudgetEditGroup							= PrmChangeOrderUniqueID
				LocalEndDate									= PrmChangeOrderLine.EndDate
				TransactionAmount								= PrmChangeOrderLine.Amount
				LocalSourceDocument								= reference to PrmChangeOrder

				include ApplyUpdatesToGroupTotalsInner
				if (LazyActivation
				and BudgetGroup exists
				and LazyStage									= BudgetGroup.LazyStage)
					invoke Update BudgetGroup
						invoked.HasUnreleasedChange				= true

		GenerateTemplateMembers is an Instance Action
			restricted
			Action Rules
				include VerifyNoPostingProcesses
				initialize Counter
				if (SummaryAccountingUnit)
					for each AccountingEntitiesInBasisRel
						Generated.AccountingEntity = each.AccountingEntity
						for each SummaryAccountingUnitsRel
							Generated.AccountingUnit = each.AccountingUnit
							for each AccountingUnitShadowRel
								invoke Create BudgetTemplateMember
									
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.AccountingUnit
									invoked.AccountingEntity	 	= Generated.AccountingEntity
									invoked.FromAccountingUnit	 	= Generated.AccountingUnit
									invoked.ToAccountingUnit	 	= each.AccountingUnit
								include NextItemCreated
				if (SummaryProject)
					for each SummaryProjectsRel
						Generated.Project = each.Project
						for each ProjectShadowRel
							invoke Create BudgetTemplateMember
								
								invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.Scenario			 	= Scenario
								invoked.BudgetTemplate		 	= BudgetTemplate
								invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Project
								invoked.FromProject			 	= Generated.Project
								invoked.ToProject		 	 	= each.Project
							include NextItemCreated
				if (SummaryAccount)
					if (AccountChartSection.Both)
						for each SummaryAccountsRel
							Generated.GeneralLedgerChartAccount = each.GeneralLedgerChartAccount
							for each AccountShadowRel
								invoke Create BudgetTemplateMember
								
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Account
									invoked.FromGeneralLedgerChartAccount	= Generated.GeneralLedgerChartAccount
									invoked.ToGeneralLedgerChartAccount	= each.GeneralLedgerChartAccount
								include NextItemCreated
					else
					if (AccountChartSection.IncomeStatement)
						for each IncomeStatementSummaryAccountsRel
							Generated.GeneralLedgerChartAccount = each.GeneralLedgerChartAccount
							for each AccountShadowRel
								invoke Create BudgetTemplateMember
								
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Account
									invoked.FromGeneralLedgerChartAccount	= Generated.GeneralLedgerChartAccount
									invoked.ToGeneralLedgerChartAccount	= each.GeneralLedgerChartAccount
								include NextItemCreated
					else
						for each BalanceSheetSummaryAccountsRel
							Generated.GeneralLedgerChartAccount = each.GeneralLedgerChartAccount
							for each AccountShadowRel
								invoke Create BudgetTemplateMember
								
									invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
									invoked.Scenario			 	= Scenario
									invoked.BudgetTemplate		 	= BudgetTemplate
									invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Account
									invoked.FromGeneralLedgerChartAccount	= Generated.GeneralLedgerChartAccount
									invoked.ToGeneralLedgerChartAccount	= each.GeneralLedgerChartAccount
								include NextItemCreated
				if (SummaryDimension1)
					for each SummaryDimension1Rel
						Generated.FinanceDimension1 = each.FinanceDimension1
						for each Dimension1ShadowRel
							invoke Create BudgetTemplateMember
								
								invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.Scenario			 	= Scenario
								invoked.BudgetTemplate		 	= BudgetTemplate
								invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension1
								invoked.FromFinanceDimension1	= Generated.FinanceDimension1
								invoked.ToFinanceDimension1	 	= each.FinanceDimension1
							include NextItemCreated
				if (SummaryDimension2)
					for each SummaryDimension2Rel
						Generated.FinanceDimension2 = each.FinanceDimension2
						for each Dimension2ShadowRel
							invoke Create BudgetTemplateMember
								
								invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.Scenario			 	= Scenario
								invoked.BudgetTemplate		 	= BudgetTemplate
								invoked.CodeBlockDimensionType  = CodeBlockDimensionType.Dimension2
								invoked.FromFinanceDimension2	= Generated.FinanceDimension2
								invoked.ToFinanceDimension2	 	= each.FinanceDimension2
							include NextItemCreated
				if (SummaryDimension3)
					for each SummaryDimension3Rel
						Generated.FinanceDimension3 = each.FinanceDimension3
						for each Dimension3ShadowRel
							invoke Create BudgetTemplateMember
								
								invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.Scenario			 	= Scenario
								invoked.BudgetTemplate		 	= BudgetTemplate
								invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension3
								invoked.FromFinanceDimension3	= Generated.FinanceDimension3
								invoked.ToFinanceDimension3	 	= each.FinanceDimension3
							include NextItemCreated
				if (SummaryDimension4)
					for each SummaryDimension4Rel
						Generated.FinanceDimension4 = each.FinanceDimension4
						for each Dimension4ShadowRel
							invoke Create BudgetTemplateMember
								
								invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.Scenario			 	= Scenario
								invoked.BudgetTemplate		 	= BudgetTemplate
								invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension4
								invoked.FromFinanceDimension4	= Generated.FinanceDimension4
								invoked.ToFinanceDimension4	 	= each.FinanceDimension4
							include NextItemCreated
				if (SummaryDimension5)
					for each SummaryDimension5Rel
						Generated.FinanceDimension5 = each.FinanceDimension5
						for each Dimension5ShadowRel
							invoke Create BudgetTemplateMember
								
								invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.Scenario			 	= Scenario
								invoked.BudgetTemplate		 	= BudgetTemplate
								invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension5
								invoked.FromFinanceDimension5	= Generated.FinanceDimension5
								invoked.ToFinanceDimension5	 	= each.FinanceDimension5
							include NextItemCreated
				if (SummaryDimension6)
					for each SummaryDimension6Rel
						Generated.FinanceDimension6 = each.FinanceDimension6
						for each Dimension6ShadowRel
							invoke Create BudgetTemplateMember
								
								invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.Scenario			 	= Scenario
								invoked.BudgetTemplate		 	= BudgetTemplate
								invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension6
								invoked.FromFinanceDimension6	= Generated.FinanceDimension6
								invoked.ToFinanceDimension6	 	= each.FinanceDimension6
							include NextItemCreated
				if (SummaryDimension7)
					for each SummaryDimension7Rel
						Generated.FinanceDimension7 = each.FinanceDimension7
						for each Dimension7ShadowRel
							invoke Create BudgetTemplateMember
								
								invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.Scenario			 	= Scenario
								invoked.BudgetTemplate		 	= BudgetTemplate
								invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension7
								invoked.FromFinanceDimension7	= Generated.FinanceDimension7
								invoked.ToFinanceDimension7	 	= each.FinanceDimension7
							include NextItemCreated
				if (SummaryDimension8)
					for each SummaryDimension8Rel
						Generated.FinanceDimension8 = each.FinanceDimension8
						for each Dimension8ShadowRel
							invoke Create BudgetTemplateMember
								
								invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.Scenario			 	= Scenario
								invoked.BudgetTemplate		 	= BudgetTemplate
								invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension8
								invoked.FromFinanceDimension8	= Generated.FinanceDimension8
								invoked.ToFinanceDimension8	 	= each.FinanceDimension8
							include NextItemCreated
				if (SummaryDimension9)
					for each SummaryDimension9Rel
						Generated.FinanceDimension9 = each.FinanceDimension9
						for each Dimension9ShadowRel
							invoke Create BudgetTemplateMember
								
								invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.Scenario			 	= Scenario
								invoked.BudgetTemplate		 	= BudgetTemplate
								invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension9
								invoked.FromFinanceDimension9	= Generated.FinanceDimension9
								invoked.ToFinanceDimension9	 	= each.FinanceDimension9
							include NextItemCreated
				if (SummaryDimension10)
					for each SummaryDimension10Rel
						Generated.FinanceDimension10 = each.FinanceDimension10
						for each Dimension10ShadowRel
							invoke Create BudgetTemplateMember
								
								invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.Scenario			 	= Scenario
								invoked.BudgetTemplate		 	= BudgetTemplate
								invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension10
								invoked.FromFinanceDimension10	= Generated.FinanceDimension10
								invoked.ToFinanceDimension10	= each.FinanceDimension10
							include NextItemCreated
								

		GenerateTemplateMembersForPending is an Instance Action
			restricted
			Action Rules
				include VerifyNoPostingProcesses
				initialize Counter
				if (BudgetTemplatePending.AccountingUnit entered)
					Generated.AccountingEntity = BudgetTemplatePending.AccountingEntity
					Generated.AccountingUnit = BudgetTemplatePending.AccountingUnit
					for each AccountingUnitShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.AccountingUnit
							invoked.AccountingEntity	 	= Generated.AccountingEntity
							invoked.FromAccountingUnit	 	= Generated.AccountingUnit
							invoked.ToAccountingUnit	 	= each.AccountingUnit
						include NextItemCreated
				if (BudgetTemplatePending.Project entered)
					
					Generated.Project = BudgetTemplatePending.Project
					for each ProjectShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Project
							invoked.FromProject			 	= Generated.Project
							invoked.ToProject		 	 	= each.Project
						include NextItemCreated
				if (BudgetTemplatePending.GeneralLedgerChartAccount entered)
					
					Generated.GeneralLedgerChartAccount = BudgetTemplatePending.GeneralLedgerChartAccount
					for each AccountShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Account
							invoked.FromGeneralLedgerChartAccount	= Generated.GeneralLedgerChartAccount
							invoked.ToGeneralLedgerChartAccount	= each.GeneralLedgerChartAccount
						include NextItemCreated
				if (BudgetTemplatePending.FinanceDimension1 entered)
					
					Generated.FinanceDimension1 = BudgetTemplatePending.FinanceDimension1
					for each Dimension1ShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension1
							invoked.FromFinanceDimension1	= Generated.FinanceDimension1
							invoked.ToFinanceDimension1	 	= each.FinanceDimension1
						include NextItemCreated
				if (BudgetTemplatePending.FinanceDimension2 entered)
					
					Generated.FinanceDimension2 = BudgetTemplatePending.FinanceDimension2
					for each Dimension2ShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType  = CodeBlockDimensionType.Dimension2
							invoked.FromFinanceDimension2	= Generated.FinanceDimension2
							invoked.ToFinanceDimension2	 	= each.FinanceDimension2
						include NextItemCreated
				if (BudgetTemplatePending.FinanceDimension3 entered)
					
					Generated.FinanceDimension3 = BudgetTemplatePending.FinanceDimension3
					for each Dimension3ShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension3
							invoked.FromFinanceDimension3	= Generated.FinanceDimension3
							invoked.ToFinanceDimension3	 	= each.FinanceDimension3
						include NextItemCreated
				if (BudgetTemplatePending.FinanceDimension4 entered)
					
					Generated.FinanceDimension4 = BudgetTemplatePending.FinanceDimension4
					for each Dimension4ShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension4
							invoked.FromFinanceDimension4	= Generated.FinanceDimension4
							invoked.ToFinanceDimension4	 	= each.FinanceDimension4
						include NextItemCreated
				if (BudgetTemplatePending.FinanceDimension5 entered)
					
					Generated.FinanceDimension5 = BudgetTemplatePending.FinanceDimension5
					for each Dimension5ShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension5
							invoked.FromFinanceDimension5	= Generated.FinanceDimension5
							invoked.ToFinanceDimension5	 	= each.FinanceDimension5
						include NextItemCreated
				if (BudgetTemplatePending.FinanceDimension6 entered)
					
					Generated.FinanceDimension6 = BudgetTemplatePending.FinanceDimension6
					for each Dimension6ShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension6
							invoked.FromFinanceDimension6	= Generated.FinanceDimension6
							invoked.ToFinanceDimension6	 	= each.FinanceDimension6
						include NextItemCreated
				if (BudgetTemplatePending.FinanceDimension7 entered)
					
					Generated.FinanceDimension7 = BudgetTemplatePending.FinanceDimension7
					for each Dimension7ShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension7
							invoked.FromFinanceDimension7	= Generated.FinanceDimension7
							invoked.ToFinanceDimension7	 	= each.FinanceDimension7
						include NextItemCreated
				if (BudgetTemplatePending.FinanceDimension8 entered)
					
					Generated.FinanceDimension8 = BudgetTemplatePending.FinanceDimension8
					for each Dimension8ShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension8
							invoked.FromFinanceDimension8	= Generated.FinanceDimension8
							invoked.ToFinanceDimension8	 	= each.FinanceDimension8
						include NextItemCreated
				if (BudgetTemplatePending.FinanceDimension9 entered)
					
					Generated.FinanceDimension9 = BudgetTemplatePending.FinanceDimension9
					for each Dimension9ShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension9
							invoked.FromFinanceDimension9	= Generated.FinanceDimension9
							invoked.ToFinanceDimension9	 	= each.FinanceDimension9
						include NextItemCreated
				if (BudgetTemplatePending.FinanceDimension10 entered)
					
					Generated.FinanceDimension10 = BudgetTemplatePending.FinanceDimension10
					for each Dimension10ShadowRel
						invoke Create BudgetTemplateMember
							resume on error
							invoked.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
							invoked.Scenario			 	= Scenario
							invoked.BudgetTemplate		 	= BudgetTemplate
							invoked.CodeBlockDimensionType 	= CodeBlockDimensionType.Dimension10
							invoked.FromFinanceDimension10	= Generated.FinanceDimension10
							invoked.ToFinanceDimension10	= each.FinanceDimension10
						include NextItemCreated
								

		LazyActivate is an Instance Action
			default label is "Activate"
			valid when (LazyNotReadyStatus)
			confirmation required
				"PleaseEnsureTheBudgetEditQueueIsSuspendedBeforeRunningThisAction._Proceed?"
			completion message is "ActivationIsInProcess"			
			Parameters
				PrimeFromBudget								is Boolean
					default label is "GenerateBudgetGroupsWithBudget"
				PrimeFromHistory							is Boolean
					default label is "GenerateBudgetGroupsFromTransactionHistory"			
				MaximumBudgetGroupsDuringPriming			is Numeric 6
					default label is "MaximumBudgetGroupsToBeGeneratedFromEachOption"
			Parameter Rules
				MaximumBudgetGroupsDuringPriming
					default to 10000
					initial value is 10000
				PrimeFromHistory
					initial value is true
			Action Rules
				constraint (Status.NotReady)
					"CanOnlyActivateInNotReadyState"
				include VerifyBudgetedSystemCodesExist
				include CheckElementsInEnabledDimension
				constraint (ProcessingChangeOrdersRel not exists)
					"ChangeRequestsAreBeingProcessed"
				include CheckIfBatchEditsAreCompleted
				include VerifyNoPostingProcesses
				
				Status = Status.Processing
				PreviousStatus = Status.NotReady
				
				Rebuild.NewTemplate = true
				
				invoke Refresh TotalCubeRel in background
					assign async action request id to AsyncId
				invoke GenerateTemplateMembers in background
					run after AsyncId
					assign async action request id to AsyncId			
				if (PrimeFromBudget)
					invoke PrimeFromBudget in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.MaximumBudgetGroupsDuringPriming	= MaximumBudgetGroupsDuringPriming
						invoked.MaximumRecordsToProcess				= 50000
				if (PrimeFromHistory)
					invoke PrimeFromHistory in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.MaximumBudgetGroupsDuringPriming	= MaximumBudgetGroupsDuringPriming
						invoked.MaximumRecordsToProcess				= 50000
				invoke AugmentTemplateTotalsFromReleasedOrPendingGLTransactions in background
					run after AsyncId
					assign async action request id to AsyncId
				if (GLSystemCodeRel.EncumbranceOption.Track
				or GLSystemCodeRel.EncumbranceOption.TrackAndEdit)
					invoke BuildTemplateGroupTotalsFromUnreleasedGLGeneralLedgerTransaction in background
						run after AsyncId
						assign async action request id to AsyncId
				invoke BuildTemplateGroupTotalsFromUnreleasedGLCommit in background
					run after AsyncId
					assign async action request id to AsyncId
				invoke BuildTemplateGroupTotalsFromReleasedGLCommitWithDifferenceAmount in background
					run after AsyncId
					assign async action request id to AsyncId
				invoke BuildTemplateGroupTotalsFromUnreleasedChangeOrders in background
					run after AsyncId
					assign async action request id to AsyncId					



				invoke FinishLazyActivate in background
					run after AsyncId
			
		FinishLazyActivate is an Instance Action
			restricted
			Action Rules
				include ParallelLazyGroups
				invoke SetActivated in background
					run after background group (BackgroundGroup)
					assign async action request id to AsyncId				
				invoke DoRebuilds BudgetRebuildBTGT in background 
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
				invoke ProcessBatchEdits BudgetEditBatch in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.FEG					= FinanceEnterpriseGroup
					
		Activate is an Instance Action
			valid when (NotLazyNotReadyStatus)
			confirmation required
				"PleaseEnsureTheBudgetEditQueueIsSuspendedBeforeRunningThisAction._Proceed?"
			completion message is "ActivationIsInProcess"			
			Parameters
				DataIsSparse				is Boolean
				AccountJobsPerEntity		is Numeric 3
				SparseJobs					is Numeric 3
			Parameter Rules
				DataIsSparse
					if (BudgetYearRange entered) 
						constraint (BudgetYearRange.Start = BudgetYearRange.End)
							"StartYearMustEqualEndYearIfYearRangeIsUsedAndSparseOptionSelected"
				AccountJobsPerEntity
					constraint (HasAccount)
						"ParallelOptionRequiresAccountDimension"
					constraint (!ManualAccountingUnit)
						"ParallelOptionNotSupportedWithManualAccountingUnit"
					constraint (AccountJobsPerEntity >= 0)
						"AccountJobsPerEntityCannotBeNegative"
					if (DataIsSparse)
						constraint (SparseJobs > 0)
							"SparseJobsMustBeEnteredIfAccountJobsPerEntityIsEntered"
				SparseJobs
					constraint (SparseJobs >= 0)
						"SparseJobsCannotBeNegative"
					constraint (DataIsSparse)
						"DataMustBeSparse"
					constraint (AccountJobsPerEntity entered)
						"AccountJobsPerEntityMustBeEnteredForSparseJobsToBeEntered"
			Action Rules
				constraint (Status.NotReady)
					"CanOnlyActivateInNotReadyState"
				constraint (ProcessingChangeOrdersRel not exists)
					"ChangeRequestsAreBeingProcessed"
				include VerifyBudgetedSystemCodesExist
				include CheckElementsInEnabledDimension
				include CheckIfBatchEditsAreCompleted
				include VerifyNoPostingProcesses
									
				if (AccountJobsPerEntity not entered
				or ManualAccountingUnit
				or !HasAccount)
					NumberOfClusters = 0
				else

					NumberOfClusters = AccountJobsPerEntity

				Status = Status.Processing
				PreviousStatus = Status.NotReady
				
				Rebuild.NewTemplate = true
				
				if (NumberOfClusters > 0)
					AccountSection = ObtainAccountSection
					constraint (AccountSection > 0)
						"TooManyParallelBudgetTemplateActivationsRunning"
				invoke Refresh TotalCubeRel in background
					assign async action request id to AsyncId
				invoke GenerateTemplateMembers in background
					run after AsyncId
					assign async action request id to AsyncId
				invoke DoGroups in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmUseSparse			= DataIsSparse
					invoked.PrmNumberOfClusters		= NumberOfClusters
					invoked.PrmNumberOfSparseJobs	= SparseJobs
					invoked.PrmForeground			= false
				if (DataIsSparse
				and NumberOfClusters not entered)
					invoke RecalculateGroups BudgetGroup
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
						
				if (NumberOfClusters not entered)
					
					invoke AugmentTemplateTotalsFromReleasedOrPendingGLTransactions in background
						run after AsyncId
						assign async action request id to AsyncId
					if (GLSystemCodeRel.EncumbranceOption.Track
					or GLSystemCodeRel.EncumbranceOption.TrackAndEdit)
						invoke BuildTemplateGroupTotalsFromUnreleasedGLGeneralLedgerTransaction in background
							run after AsyncId
							assign async action request id to AsyncId
					invoke BuildTemplateGroupTotalsFromUnreleasedGLCommit in background
						run after AsyncId
						assign async action request id to AsyncId
					invoke BuildTemplateGroupTotalsFromReleasedGLCommitWithDifferenceAmount in background
						run after AsyncId
						assign async action request id to AsyncId
					invoke BuildTemplateGroupTotalsFromUnreleasedChangeOrders in background
						run after AsyncId
						assign async action request id to AsyncId					

					invoke SetActivated in background
						run after AsyncId
						assign async action request id to AsyncId
					invoke DoRebuilds BudgetRebuildBTGT in background 
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoke ProcessBatchEdits BudgetEditBatch in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.FEG					= FinanceEnterpriseGroup

		DoGroups is an Instance Action
			restricted
			Parameters
				PrmNumberOfClusters		is Numeric 3
					default label is "NumberOfClusters"
				PrmNumberOfSparseJobs	is Numeric 3
					default label is "NumberOfSparseJobs"
				PrmUseSparse			is Boolean
					default label is "UseSparse"
				PrmForeground			is Boolean
					default label is "Foreground"
			Action Rules
				if (Status.Processing)
					UseSparse			= PrmUseSparse
					NumberOfClusters	= PrmNumberOfClusters
					InForeground		= PrmForeground
					if (NumberOfClusters not entered)
						if (HasAccountingUnitOrHasAccountingEntity)
							if (!ManualAccountingUnit)
								for each AccountingEntitiesInBasisRel
									LocalDoGroupsInnerAccountingEntity = each.AccountingEntity

									include DoGroupsInner
							else
								for each InitializedManualAccountingUnitRel
									BudgetTemplateManual = each.BudgetTemplateManual
									LocalDoGroupsInnerAccountingEntity = BudgetTemplateManual.AccountingEntity
									CurrentManualAccountingUnit = BudgetTemplateManual.AccountingUnit
									include DoGroupsInner
						else
							include DoGroupsInner

					else

						Counter = 1
						ClusterCounter = 1
						if (ManualAccount)
							for each InitializedManualAccountRel
								include StripeAccount
						else
						if (PostingAccount)
							if (AccountChartSection.Both)
								for each PostingAccountsRel
									include StripeAccount
							else
							if (AccountChartSection.IncomeStatement)
								for each IncomeStatementPostingAccountsRel
									include StripeAccount
							else
								for each BalanceSheetPostingAccountsRel
									include StripeAccount
						else
							if (AccountChartSection.Both)
								for each SummaryAccountsRel
									include StripeAccount
							else
							if (AccountChartSection.IncomeStatement)
								for each IncomeStatementSummaryAccountsRel
									include StripeAccount
							else
								for each BalanceSheetSummaryAccountsRel
									include StripeAccount
						BackgroundGroup = BudgetTemplate + "-1-" + current timestamp
						if (HasAccountingUnitOrHasAccountingEntity)
							for each AccountingEntitiesInBasisRel
								initialize ClusterCounter
								while (ClusterCounter < NumberOfClusters)
									ClusterCounter += 1
									invoke DoGroupsByAccount in background group(BackgroundGroup)
										assign async background group id to GroupAsyncId
										invoked.PrmAccountingEntity			= each.AccountingEntity
										invoked.PrmCluster					= ClusterCounter
										invoked.PrmNumberOfClusters			= PrmNumberOfSparseJobs
										invoked.PrmUseSparse				= UseSparse
						else
							initialize ClusterCounter
							while (ClusterCounter < NumberOfClusters)
								ClusterCounter += 1
								invoke DoGroupsByAccount in background group(BackgroundGroup)
									assign async background group id to GroupAsyncId
									invoked.PrmCluster					= ClusterCounter
									invoked.PrmNumberOfClusters			= PrmNumberOfSparseJobs
									invoked.PrmUseSparse				= UseSparse
						if (UseSparse)
							OldBackgroundGroup = BackgroundGroup
							BackgroundGroup = BudgetTemplate + "-2" + current timestamp
							initialize ClusterCounter
							while (ClusterCounter < PrmNumberOfSparseJobs)
								ClusterCounter += 1
								invoke CalculateGroupsByCluster BudgetGroup in background group(BackgroundGroup)
									run after background group(OldBackgroundGroup)
									assign async background group id to GroupAsyncId
									invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
									invoked.PrmScenario					= Scenario
									invoked.PrmTemplate					= BudgetTemplate
									invoked.PrmCluster					= ClusterCounter

						if (AccountSection = 1)
							invoke ClearBudgetSection1 ReportingChartAccount
								run after background group(BackgroundGroup)
								assign async action request id to AsyncId
								invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.PrmReportingChart			= AccountStructure
						else
						if (AccountSection = 2)
							invoke ClearBudgetSection2 ReportingChartAccount
								run after background group(BackgroundGroup)
								assign async action request id to AsyncId
								invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
								invoked.PrmReportingChart			= AccountStructure
						else
						if (AccountSection = 3)
							invoke ClearBudgetSection3 ReportingChartAccount
								run after background group(BackgroundGroup)
								assign async action request id to AsyncId
								invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
							 	invoked.PrmReportingChart			= AccountStructure

						invoke AugmentTemplateTotalsFromReleasedOrPendingGLTransactions in background
							run after AsyncId
							assign async action request id to AsyncId
						if (GLSystemCodeRel.EncumbranceOption.Track
						or GLSystemCodeRel.EncumbranceOption.TrackAndEdit)
							invoke BuildTemplateGroupTotalsFromUnreleasedGLGeneralLedgerTransaction in background
								run after AsyncId
								assign async action request id to AsyncId
						invoke BuildTemplateGroupTotalsFromUnreleasedGLCommit in background
							run after AsyncId
							assign async action request id to AsyncId
						invoke BuildTemplateGroupTotalsFromReleasedGLCommitWithDifferenceAmount in background
							run after AsyncId
							assign async action request id to AsyncId
						invoke BuildTemplateGroupTotalsFromUnreleasedChangeOrders in background
							run after AsyncId
							assign async action request id to AsyncId					
							 	
						invoke SetActivated in background
							run after AsyncId
							assign async action request id to AsyncId
						invoke DoRebuilds BudgetRebuildBTGT in background 
							run after AsyncId
							assign async action request id to AsyncId
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoke ProcessBatchEdits BudgetEditBatch in background
							run after AsyncId
							assign async action request id to AsyncId
							invoked.FEG					= FinanceEnterpriseGroup

		DoGroupsByAccount is an Instance Action
			restricted
			lazily lock this instance
			Parameters
				PrmAccountingEntity	is an AccountingEntity
					default label is "AccountingEntity"
				PrmCluster			is Numeric 3
					default label is "Cluster"

				PrmNumberOfClusters	is Numeric 3
					default label is "NumberOfClusters"
				PrmUseSparse		is Boolean
					default label is "UseSparse"
			Action Rules
				if (Status.Processing)

					Generated.AccountingEntity	= PrmAccountingEntity
					AccountCluster				= PrmCluster
					UseSparse					= PrmUseSparse
					NumberOfClusters			= PrmNumberOfClusters
					InForeground				= false



					include DoGroupsInner

		ProcessPendingRemove is an Instance Action
			valid when (CanProcessPendingRemove)
			confirmation required
				"PleaseEnsureTheBudgetEditQueueIsSuspendedBeforeRunningThisAction._Proceed?"
			Action Rules
				include VerifyBudgetedSystemCodesExist
				constraint (ProcessingChangeOrdersRel not exists)
					"ChangeRequestsAreBeingProcessed"
				include CheckIfBatchEditsAreCompleted
				Status = Status.Processing
				PreviousStatus = Status.Ready
				invoke SetNeedsCleanupCube in background
					assign async action request id to AsyncId
				invoke ProcessAllRemove in background
					run after AsyncId
					assign async action request id to AsyncId

				invoke ClearHasRecalculate in background
					run after AsyncId
					assign async action request id to AsyncId
				invoke SetReady in background
					run after AsyncId
					assign async action request id to AsyncId
				invoke DoRebuilds BudgetRebuildBTGT in background 
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
				invoke ProcessBatchEdits BudgetEditBatch in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.FEG					= FinanceEnterpriseGroup


		BatchProcessPending is a Set Action
			restricted
			Parameters
				PrmFinanceEnterpriseGroup	is a FinanceEnterpriseGroup
					default label is "FinanceEnterpriseGroup"
				PrmScenario					is a Scenario 
					default label is "Scenario"
				PrmBudgetTemplate			is a BudgetTemplate
					default label is "BudgetTemplate"
			Instance Selection
				where (FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
				and Scenario					= PrmScenario
				and BudgetTemplate				= PrmBudgetTemplate)
			Action Rules
				Instance Rules
					invoke ProcessPending PrmBudgetTemplate
					
			
		LazyProcessPending is an Instance Action
			default label is "ProcessPending"
			valid when (CanLazyProcessPending)
			confirmation required
				"PleaseEnsureTheBudgetEditQueueIsSuspendedBeforeRunningThisAction._Proceed?"
			completion message is "ProcessPendingIsInProcess"			
			Action Rules
				constraint (LazyActivation)
					"CannotInvokeThisActionWhenNotUsingLazyActivation"				
				include VerifyBudgetedSystemCodesExist			
				constraint (ProcessingChangeOrdersRel not exists)
					"ChangeRequestsAreBeingProcessed"
				include VerifyNoPostingProcesses
				include CheckIfBatchEditsAreCompleted

				if (BudgetRecalculatesRel exists
				and LazyActivation)
					constraint (!HasSummary)
						"The_Lazy_Process_PendingActionIsNotSupportedWhenTheTemplateUsesSummaryElements._PleaseReactivateTheTemplate"
				Status = Status.Processing
				PreviousStatus = Status.Ready
				
				include SetPendingStates
				include SetPendingManualStates
				
				invoke Refresh TotalCubeRel in background
					assign async action request id to AsyncId
					
				if (BudgetRemovesRel exists
				or BudgetManualPendingRemovesRel exists)
					invoke ProcessAllRemove in background
						run after AsyncId
						assign async action request id to AsyncId
											
				if (BudgetPendingsRel exists
				and HasSummary)
					invoke DoAllPending in background
						run after AsyncId
						assign async action request id to AsyncId
				if (BudgetPendingsRel exists
				or BudgetManualPendingsRel exists)
					AddingPendingLazyGroups	= true
					LazyStage				+= 1
					invoke AugmentTemplateTotalsFromReleasedOrPendingGLTransactions in background
						run after AsyncId
						assign async action request id to AsyncId
					if (GLSystemCodeRel.EncumbranceOption.Track
					or GLSystemCodeRel.EncumbranceOption.TrackAndEdit)
						invoke BuildTemplateGroupTotalsFromUnreleasedGLGeneralLedgerTransaction in background
							run after AsyncId
							assign async action request id to AsyncId
					invoke BuildTemplateGroupTotalsFromUnreleasedGLCommit in background
						run after AsyncId
						assign async action request id to AsyncId
					invoke BuildTemplateGroupTotalsFromReleasedGLCommitWithDifferenceAmount in background
						run after AsyncId
						assign async action request id to AsyncId
					invoke BuildTemplateGroupTotalsFromUnreleasedChangeOrders in background
						run after AsyncId
						assign async action request id to AsyncId					
					invoke InitializeLazyGroups in background
						run after AsyncId
						assign async action request id to AsyncId					


				if (BudgetPendingsRel exists)
					invoke DeletePendings BudgetTemplatePending in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
				if (BudgetManualPendingsRel exists)
					invoke SetAllFinalized BudgetTemplateManual in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
						
				
				invoke SetReady in background
					run after AsyncId
					assign async action request id to AsyncId
				invoke DoRebuilds BudgetRebuildBTGT in background 
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
				invoke ProcessBatchEdits BudgetEditBatch in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.FEG					= FinanceEnterpriseGroup
					
		ProcessPending is an Instance Action
			valid when (CanProcessPending)
			confirmation required
				"PleaseEnsureTheBudgetEditQueueIsSuspendedBeforeRunningThisAction._Proceed?"
			completion message is "ProcessPendingIsInProcess"			
			Entrance Rules														
				UseSparse = config.BudgetTemplateProcessPendingSparsed
			Action Rules
				constraint (!LazyActivation)
					"CannotInvokeThisActionWhenUsingLazyActivation"
				include VerifyBudgetedSystemCodesExist		
				constraint (ProcessingChangeOrdersRel not exists)
					"ChangeRequestsAreBeingProcessed"
				include VerifyNoPostingProcesses
				include CheckIfBatchEditsAreCompleted

				Status = Status.Processing
				PreviousStatus = Status.Ready
				
				include SetPendingStates
				include SetPendingManualStates
				include SetPendingRecalculateStates
				
				invoke Refresh TotalCubeRel in background
					assign async action request id to AsyncId
					
				if (!NeedsCleanupCube)
					invoke SetNeedsCleanupCube in background
						run after AsyncId
						assign async action request id to AsyncId

				if (BudgetRemovesRel exists
				or BudgetManualPendingRemovesRel exists)
					invoke ProcessAllRemove in background
						run after AsyncId
						assign async action request id to AsyncId
					

				if (BudgetPendingsRel exists)
					invoke DoAllPending in background					
						run after AsyncId
						assign async action request id to AsyncId
				if (BudgetManualPendingsRel exists)
					invoke ProcessAllPendingManual in background		
						run after AsyncId
						assign async action request id to AsyncId
				if (BudgetRecalculatesRel exists)						
					invoke ProcessAllRecalculate in background
						run after AsyncId
						assign async action request id to AsyncId

				if (UseSparse
				or RecalculateBudgetGroupsRel exists)												
					invoke RecalculateGroups BudgetGroup in background		
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
						invoked.PrmRecalculateUsingSparse	= UseSparse
				

				if (BudgetRecalculatesRel exists)
					invoke DoRemoveGroupTotalsForRecalculate in background
						run after AsyncId
						assign async action request id to AsyncId
					

				if (NeedsCleanupGroupTotals)
					invoke DoCleanupGroupTotalsForPendingAndPendingManual in background
						run after AsyncId
						assign async action request id to AsyncId
				else
					invoke SetNeedsCleanupGroupTotals in background
						run after AsyncId
						assign async action request id to AsyncId
						
				if (BudgetPendingsRel exists
				or BudgetManualPendingsRel exists
				or BudgetRecalculatesRel exists)	
					invoke AugmentTemplateTotalsFromReleasedOrPendingGLTransactions in background
						run after AsyncId
						assign async action request id to AsyncId
					if (GLSystemCodeRel.EncumbranceOption.Track
					or GLSystemCodeRel.EncumbranceOption.TrackAndEdit)
						invoke BuildTemplateGroupTotalsFromUnreleasedGLGeneralLedgerTransaction in background
							run after AsyncId
							assign async action request id to AsyncId
					invoke BuildTemplateGroupTotalsFromUnreleasedGLCommit in background
						run after AsyncId
						assign async action request id to AsyncId
					invoke BuildTemplateGroupTotalsFromReleasedGLCommitWithDifferenceAmount in background
						run after AsyncId
						assign async action request id to AsyncId
					invoke BuildTemplateGroupTotalsFromUnreleasedChangeOrders in background
						run after AsyncId
						assign async action request id to AsyncId					
				

				if (BudgetPendingsRel exists)
					invoke DeletePendings BudgetTemplatePending in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
				if (BudgetManualPendingsRel exists)
					invoke SetAllFinalized BudgetTemplateManual in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
				if (BudgetRecalculatesRel exists)
					invoke DeleteAllForTemplate BudgetTemplateRecalculate in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
					invoke ClearHasRecalculate in background
						run after AsyncId
						assign async action request id to AsyncId
				invoke SetReady in background
					run after AsyncId
					assign async action request id to AsyncId
				invoke DoRebuilds BudgetRebuildBTGT in background 
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
				invoke ProcessBatchEdits BudgetEditBatch in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.FEG					= FinanceEnterpriseGroup
					













































				

				



























		DeletePendings is an Instance Action
			restricted
			Action Rules

				invoke Delete BudgetPendingsRel


		InitializeLazyGroups is an Instance Action
			restricted
			Action Rules
				for each BudgetGroupsByStageRel
					BudgetGroup		= each.BudgetGroup
					include InitializeSingleLazyGroup
					
		InitializeALazyGroup is an Instance Action
			restricted
			Parameters
				PrmBudgetGroup		is a BudgetGroup
			Action Rules
				BudgetGroup			= PrmBudgetGroup
				include InitializeSingleLazyGroup
				
		PrimeFromBudget is an Instance Action
			restricted
			Parameters
				MaximumBudgetGroupsDuringPriming	is Numeric 6
				MaximumRecordsToProcess				is Numeric 9
			Local Fields
				GroupCounter						is Numeric 6
				LoopCounter							is Numeric 9
				OriginalScenario					is like Scenario
			Action Rules					
				OriginalScenario										= Scenario.OriginalScenario
				GroupCounter											= instance count of BudgetGroupsRel
				if (GroupCounter < MaximumBudgetGroupsDuringPriming)
					for each ScenarioDataRel
						initialize BudgetGroup
						initialize IsNewGroup
						TransactionCodeBlock		 					= each.GeneralLedgerTotal
						if (!Scenario.HasAccountingEntity)
							TransactionCodeBlock.ToAccountingEntity		= first AccountingEntitiesInBasisRel.AccountingEntity						
						else
							TransactionCodeBlock.ToAccountingEntity		= each.GeneralLedgerTotal.AccountingEntity
						TransactionCodeBlock.AccountingUnit				= each.GeneralLedgerTotal.AccountingUnit
						TransactionCodeBlock.GeneralLedgerChartAccount	= each.GeneralLedgerTotal.GeneralLedgerChartAccount
						TransactionCodeBlock.Project					= each.GeneralLedgerTotal.Project
						TransactionCodeBlock.FinanceDimension1			= each.FinanceDimension1
						TransactionCodeBlock.FinanceDimension2			= each.FinanceDimension2
						TransactionCodeBlock.FinanceDimension3			= each.FinanceDimension3
						TransactionCodeBlock.FinanceDimension4			= each.FinanceDimension4
						TransactionCodeBlock.FinanceDimension5			= each.FinanceDimension5
						TransactionCodeBlock.FinanceDimension6			= each.FinanceDimension6
						TransactionCodeBlock.FinanceDimension7			= each.FinanceDimension7
						TransactionCodeBlock.FinanceDimension8			= each.FinanceDimension8
						TransactionCodeBlock.FinanceDimension9			= each.FinanceDimension9
						TransactionCodeBlock.FinanceDimension10			= each.FinanceDimension10
						ValidationAccount 								= TransactionCodeBlock.GeneralLedgerChartAccount

						if (ShouldProcessAccountForTransaction
						and !TransactionCodeBlock.Ledger.CloseLedger
						and LedgerHierarchyForTransactionRel exists
						and AccountingEntityHierarchyForTransactionRel exists)
							include LookupBudgetTemplateMembers
							if (IsNewGroup)

								GroupCounter		+= 1
								if (GroupCounter >= MaximumBudgetGroupsDuringPriming)
									end for each 
						LoopCounter					+= 1
						if (LoopCounter > 300)
							LoopCounter				= 0
							commit transaction
				

		PrimeFromHistory is an Instance Action
			restricted
			Parameters
				MaximumBudgetGroupsDuringPriming	is Numeric 6
				MaximumRecordsToProcess				is Numeric 9
			Local Fields
				GroupCounter						is Numeric 6
				TransactionCounter					is Numeric 9
			Action Rules		
				GroupCounter						= instance count of BudgetGroupsRel
				if (GroupCounter < MaximumBudgetGroupsDuringPriming)
					for each LazyPrimeRel
						initialize BudgetGroup
						initialize IsNewGroup
						TransactionCodeBlock = each.FinanceCodeBlock
						ValidationAccount = TransactionCodeBlock.GeneralLedgerChartAccount
						if (ShouldProcessAccountForTransaction
						and !TransactionCodeBlock.Ledger.CloseLedger
						and LedgerHierarchyForTransactionRel exists
						and AccountingEntityHierarchyForTransactionRel exists)
							include LookupBudgetTemplateMembers
							if (IsNewGroup)

								GroupCounter		+= 1
								if (GroupCounter >= MaximumBudgetGroupsDuringPriming)
									end for each 
						TransactionCounter			+= 1
						if (TransactionCounter > 300)
							TransactionCounter		= 0
							commit transaction
		
		ClearLocalBudgetCopy is an Instance Action
			valid when (CanClearLocalBudgetCopy)
			confirmation required
				"ThisActionWillClearLocalCopyOfBudgetValuesAndRequiresThatTheBudgetEditQueueIsSuspended._Proceed?"
			Action Rules
				constraint (Status.Ready)
					"TemplateMustBeInReadyState"
				constraint (ProcessingChangeOrdersRel not exists)
					"ChangeRequestsAreBeingProcessed"
				Status = Status.Processing
				PreviousStatus = Status.Ready
				invoke DeleteTemplateAmounts BudgetGroupAmount in background
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmBudgetTemplate			= BudgetTemplate
				invoke SetReady in background
					run after AsyncId

		ResetState is an Instance Action
			restricted
			Action Rules

				PreviousStatus = Status
				Status = Status.Clearing
				initialize NeedsCleanupCube
				initialize NeedsCleanupGroupTotals
				initialize ErrorCheckTime
				initialize CheckingForErrors
				initialize AccountSection

				BackgroundGroup = BudgetTemplate + "-ResetState-" + current timestamp + "Step1"

				invoke PurgeGroupTotalsForTemplate BudgetTemplateGroupTotal in background group(BackgroundGroup) 
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmBudgetTemplate			= BudgetTemplate

				invoke PurgeAllTemplateMembers BudgetTemplateMember in background group(BackgroundGroup) 
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmBudgetTemplate			= BudgetTemplate
					
				invoke PurgeErrorsForTemplate BudgetEditError in background group(BackgroundGroup) 
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmTemplate					= BudgetTemplate				

				invoke PurgeLogForTemplate BudgetGroupTotalLog in background group(BackgroundGroup) 
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmTemplate					= BudgetTemplate

				invoke PurgeGroupTotalForTemplate BudgetGroupTotal in background group(BackgroundGroup) 
					run after AsyncId 
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmBudgetTemplate			= BudgetTemplate

				invoke PurgeTemplateAmounts BudgetGroupAmount in background group(BackgroundGroup) 
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmBudgetTemplate			= BudgetTemplate

				invoke PurgeChecks BudgetGroupCheck in background group(BackgroundGroup) 
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmTemplate					= BudgetTemplate

				invoke DeletePendings BudgetTemplatePending in background group(BackgroundGroup) 
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmTemplate					= BudgetTemplate

				OldBackgroundGroup = BackgroundGroup
				BackgroundGroup = BackgroundGroup = BudgetTemplate + "-ResetState-" + current timestamp + "Step2"

				if (PostingAccountingEntity)
					for each AccountingEntitiesInBasisRel
						invoke PurgeGroupsForTemplateByEntity BudgetGroup in background group(BackgroundGroup)
							run after background group (OldBackgroundGroup)
							assign async action request id to AsyncId
							invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
							invoked.PrmScenario					= Scenario
							invoked.PrmTemplate					= BudgetTemplate
							invoked.PrmAccountingEntity			= each.AccountingEntity

				else
					invoke PurgeGroupsForTemplate BudgetGroup in background group(BackgroundGroup)

						run after background group (OldBackgroundGroup)
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate

				OldBackgroundGroup = BackgroundGroup
				BackgroundGroup = BackgroundGroup = BudgetTemplate + "-ResetState-" + current timestamp + "Step3"

				invoke SetAllFinalized BudgetTemplateManual in background
					run after background group (OldBackgroundGroup)
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmTemplate					= BudgetTemplate

				invoke DeleteAllForTemplate BudgetTemplateRecalculate in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmTemplate					= BudgetTemplate

				invoke DeleteAllForTemplate BudgetTemplateRemove in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmTemplate					= BudgetTemplate
				if (LazyActivation)
					invoke DeleteAllLazyGroupsForTemplate BudgetGroupLazyInit in background	
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
				invoke SetNotReady in background
					run after AsyncId
					assign async action request id to AsyncId
				invoke DoRebuilds BudgetRebuildBTGT in background 
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
				invoke ProcessBatchEdits BudgetEditBatch in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.FEG					= FinanceEnterpriseGroup

		DeleteTemplate is an Instance Action
			valid when (ReadyOrNeedsCleanup)
			confirmation required
			Action Rules
				Counter = -1
				include UpdateFinanceEnterpriseGroupCurrencyCounter

				PreviousStatus = Status
				Status = Status.Clearing
				initialize NeedsCleanupCube
				initialize NeedsCleanupGroupTotals
				initialize AccountSection
				invoke PurgeGroupTotalsForTemplate BudgetTemplateGroupTotal in background
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmBudgetTemplate			= BudgetTemplate
				invoke PurgeAllTemplateMembers BudgetTemplateMember in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmBudgetTemplate			= BudgetTemplate
				if (0 < instance count of BudgetEditErrorForTemplateRel)
					invoke PurgeErrorsForTemplate BudgetEditError in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate				
				invoke PurgeLogForTemplate BudgetGroupTotalLog in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmTemplate					= BudgetTemplate
				invoke DeleteGroups BudgetGroup in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmTemplate					= BudgetTemplate
				if (0 < instance count of BudgetPendingsRel)
					invoke DeletePendings BudgetTemplatePending in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
				if (0 < instance count of BudgetTemplateManualsRel)
					invoke DeleteAllForTemplate BudgetTemplateManual in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
				if (0 < instance count of BudgetRecalculatesRel)
					invoke DeleteAllForTemplate BudgetTemplateRecalculate in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
				if (0 < instance count of BudgetRemovesRel)
					invoke DeleteAllForTemplate BudgetTemplateRemove in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate
				if (0 < instance count of BudgetGroupChecksForTemplateRel)
					invoke PurgeChecks BudgetGroupCheck in background
						run after AsyncId
						assign async action request id to AsyncId
						invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
						invoked.PrmScenario					= Scenario
						invoked.PrmTemplate					= BudgetTemplate				
				if (LazyActivation)
					invoke DeleteAllLazyGroupsForTemplate BudgetGroupLazyInit in background	
						run after AsyncId
						assign async action request id to AsyncId
				invoke DeleteThisInstance in background
					run after AsyncId
					assign async action request id to AsyncId
				invoke DoRebuilds BudgetRebuildBTGT in background 
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
				invoke ProcessBatchEdits BudgetEditBatch in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.FEG					= FinanceEnterpriseGroup
					
		CheckGroupsForErrors is an Instance Action
			restricted
			valid when (Status.Ready)
			Action Rules
				constraint (!HasPendingGroups)
					"MustProcessPendingBeforeCheckingForErrors"
				CheckingForErrors = true
				initialize ErrorCheckTime
				invoke ClearErrorFlag ErrorGroupsRel
				invoke Refresh TotalCubeRel in background
					assign async action request id to AsyncId
				invoke CheckForErrors BudgetGroup in background
					run after AsyncId
					assign async action request id to AsyncId
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmScenario					= Scenario
					invoked.PrmTemplate					= BudgetTemplate
				invoke FinishedCheckingForErrors in background
					run after AsyncId
					


		ReleaseCallback is an Instance Action
			restricted
			Parameters
				PrmBusinessClassName			is Alpha 100
					default label is "BusinessClass"
				PrmEditContext					is Alpha 256
					default label is "EditContext"
				PrmBusinessObjectKey			is UniqueID
					default label is "BusinessObjectKey"
				PrmIsBatch						is Boolean
					default label is "IsBatch"
				PrmBudgetEditMode				is a BudgetEditMode
					default label is "Mode"
				PrmBudgetEditTotalsProcessing	is a BudgetEditTotalsProcessing
					default label is "BudgetEditTotalsProcessing"
				PrmActionCode					is an ActionCode
					default label is "BudgetEditTotalsProcessing"
				PrmBudgetEditCallBack		is a BudgetEditCallBack
					default label is "CallBack"
			Entrance Rules

				ActionName				= "RebuildCommitmentTotals"
				BusinessObjectKey		= PrmBusinessObjectKey
				BusinessClassName		= PrmBusinessClassName
				EditContext				= PrmEditContext
				IsBatch					= PrmIsBatch
				EditTotalsProcessing	= PrmBudgetEditTotalsProcessing
				EditMode				= PrmBudgetEditMode
				BudgetEditCallBack		= PrmBudgetEditCallBack
				ActionCode				= PrmActionCode
				LocalBudgetEditGroup	= PrmBusinessObjectKey
				LocalFEG				= RebuildTotalsRel.FinanceEnterpriseGroup
					
				commit transaction


				for each GroupTotalsCallbackRel
					invoke Delete each.BudgetTemplateGroupTotal
					Counter += 1
					if (Counter > 150)
						commit transaction
						Counter	= 0

				for each LazyInitsForDocumentRel
					invoke Delete each.BudgetGroupLazyInit
					Counter += 1
					if (Counter > 150)
						commit transaction
						Counter	= 0						
				invoke Delete LazyDocumentRel.BudgetLazyDocument
				invoke Delete RebuildTotalsRel.BudgetRebuildBTGT
				commit transaction
	
		CommitTransaction is an Instance Action
			restricted
			lazily lock this instance
			Action Rules
				commit transaction

		PurgeLogEntries is an Instance Action
			valid when(Status.Ready)
			run in background			
			Parameters
				UpTo	is TimeStamp
			Parameter Rules
				UpTo
					required
			Action Rules
				LocalTimestamp	= UpTo
				for each PreviousLogsRel
					invoke Purge each.BudgetGroupTotalLog
					Counter		+= 1
					if (Counter >= 200)
						commit transaction
						Counter	= 0


		InitializeLazyGroupsByStageAndCluster is an Instance Action
			restricted
			run in background
			default label is untranslatable
			Parameters
				PrmCluster						is Numeric 3
					default label is "Cluster"
				PrmNumberOfClusters				is Numeric 3
					default label is "NumberOfClusters"
				PrmStage						is Numeric 8
					default label is "Stage"
			Action Rules
				LocalCluster 			= PrmCluster
				LocalNumberOfClusters 	= PrmNumberOfClusters
				LocalStage 				= PrmStage

				for each BudgetGroupClusterRel
					invoke InitializeALazyGroup
						invoked.PrmBudgetGroup = each.BudgetGroup
					invoke CommitTransaction			

		TestUpdateGroupTotals  is an Instance Action
			restricted
			valid when (Status.Ready)
			Parameters
				PrmLedger				is a Ledger
					default label is "Ledger"
				PrmTransactionCodeBlock	is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmSystem				is a GeneralLedgerSystemCode
					default label is "System"
				PrmDate					is Date
					default label is "Date"


				PrmAmount				is a InternationalAmount
					default label is "Amount"
				PrmAllowRebuild			is Boolean
					default label is "AllowRebuild"
			Action Rules
				LocalBudgetEditGroup		= Scenario.UniqueID

				display "BeforeThisDocument:<BudgetTemplate>,<Scenario>,<LocalBudgetEditGroup>"
				for each GroupTotalsRel
					display "<BudgetTemplate>,<each.Amount>"
				PrmTransactionCodeBlock.Ledger = PrmLedger
				LocalDate	= PrmDate
				invoke UpdateGroupTotalsForTemplate
					invoked.PrmBudgetEditGroup		= LocalBudgetEditGroup
					invoked.PrmTransactionCodeBlock	= PrmTransactionCodeBlock
					invoked.PrmEndDate				= first EndDatesRel.GeneralLedgerCalendarPeriod
					invoked.PrmAmount				= PrmAmount
					invoked.PrmAllowRebuild			= PrmAllowRebuild






				display "AfterThisDocument"
				for each GroupTotalsRel
					display "<BudgetTemplate>,<each.Amount>,<each.BudgetTemplateGroupTotal.BudgetEditGroup>"

		TestUpdateTemplateTotals  is an Instance Action
			restricted
			valid when (Status.Ready)
			Parameters
				PrmLedger				is a Ledger
					default label is "Ledger"
				PrmTransactionCodeBlock	is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmSystem				is a GeneralLedgerSystemCode
					default label is "System"
				PrmDate					is Date
					default label is "Date"
				PrmAmount				is a InternationalAmount
					default label is "Amount"
			Action Rules
				PrmTransactionCodeBlock.Ledger = PrmLedger
				LocalDate	= PrmDate
				invoke UpdateTemplateTotalsForTemplate
					invoked.PrmTransactionCodeBlock	= PrmTransactionCodeBlock
					invoked.PrmEndDate				= first EndDatesRel.GeneralLedgerCalendarPeriod
					invoked.PrmAmount				= PrmAmount
			        invoked.PrmBusinessClassName	= "BudgetTemplate"
			        invoked.PrmEditContext			= "UpdateTemplateTotalsForTemplate"

		TestCheckTransactionForTemplate is an Instance Action
			restricted
			valid when (Status.Ready)
			Parameters
				PrmLedger				is a Ledger
					default label is "Ledger"
				PrmTransactionCodeBlock	is a FinanceCodeBlock
					default label is "TransactionCodeBlock"
				PrmDate					is Date
					default label is "Date"
				PrmAmount				is a InternationalAmount
					default label is "Amount"
			Action Rules
				LocalBudgetEditGroup		= Scenario.UniqueID
				invoke Purge BudgetEditErrorRel
				PrmTransactionCodeBlock.Ledger = PrmLedger
				invoke CheckTransactionForTemplate
					invoked.PrmBudgetEditGroup		= LocalBudgetEditGroup
					invoked.PrmHeaderUniqueID		= LocalBudgetEditGroup
					invoked.PrmTransactionCodeBlock	= PrmTransactionCodeBlock
					invoked.PrmDate					= PrmDate
					invoked.PrmAmount				= PrmAmount
				invoke GetRemainingBudget
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmKey						= "M"
					invoked.PrmCurrency					= "GBP"
					invoked.PrmTransactionCodeBlock		= PrmTransactionCodeBlock
					invoked.PrmDate						= PrmDate
					

		TestYear is an Instance Action
			restricted
			Parameters
				PrmDate					is Date
					default label is "Date"
			Action Rules
				LocalDate 					= PrmDate
				LocalJulianDate				= JulianDate
				display "JulianDate[<LocalJulianDate>]"
				LocalBudgetCalendar			= EditCalendar
				GeneralLedgerCalendarPeriod	= first BudgetCalendarYearsContainingLocalJulianDateRel.GeneralLedgerCalendarPeriod
				LocalYearStartJulian	= first BudgetCalendarYearsContainingLocalJulianDateRel.GeneralLedgerCalendarPeriod.StartDateJulian
				display "<GeneralLedgerCalendarPeriod>,<LocalYearStartJulian>"

		TestEditCallBackSuccess is an Instance Action
			restricted
			Action Rules
				display "TestEditSuccess"
		TestEditCallBackFailure is an Instance Action
			restricted
			Action Rules
				display "TestEditCallBackFailure"


		TestJavaCall is an Instance Action
			restricted
			Action Rules
				display "InvokedByJava"

		TestFlow is an Instance Action
			restricted
			Local Fields
				LocalBudgetEditCallBack is a BudgetEditCallBack
			Action Rules
				trigger "BudgetEditCallBack" PA service
					resume on error
					title is "BudgetEditCallBack"


					Variables
						FinanceEnterpriseGroup
						LocalBudgetEditCallBack
							variable name is BudgetEditCallBack
		TestAccountSection is an Instance Action
			restricted
			Local Fields
				Trial is Numeric 1
			Action Rules
				Trial = ObtainAccountSection
				display "<Trial>"















		GenerateVariance is an Instance Action
			valid when (CanGenerateVariance)
            Parameters
				PrmDisplayActionForm is Boolean
					default label is "DisplayActionForm"
			Local Fields
				LocalBudgetGroupObligationVarianceRunView  is a  BudgetGroupObligationVarianceRun view
				LocalAsyncId							   is an AsyncActionRequest
			Entrance Rules
				if (not TotalCubeRel.Mode.Active)
					constraint (not TotalCubeRel.Mode.RefreshRunning)
						"CubeRefreshInProgress"
					constraint (not TotalCubeRel.Mode.ReloadRunning)
						"CubeReloadInProgress"
					constraint (TotalCubeRel.Mode.RefreshRunning
					or TotalCubeRel.Mode.ReloadRunning)
						"<TotalCubeRel.ModeStatusMessage>"

				constraint (PostInProcessRel not exists)
					"CannotGenerateWhilePostingProcessesAreRunning"

            Action Rules
				invoke Refresh TotalCubeRel in background
					assign async action request id to LocalAsyncId
                    
	            invoke Create BudgetGroupObligationVarianceRun
					assign result to LocalBudgetGroupObligationVarianceRunView
					invoked.FinanceEnterpriseGroup  = FinanceEnterpriseGroup
					invoked.Scenario                = Scenario
					invoked.BudgetTemplate          = BudgetTemplate
					invoked.Status					= 1 
					invoked.StartTime               = current timestamp
					invoked.CubeRefreshAsyncActionRequest	= LocalAsyncId

				invoke GenerateBudgetGroupObligationVariance BudgetGroupTotal in background
					run after LocalAsyncId
					assign async action request id to LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup 			 = FinanceEnterpriseGroup
					invoked.PrmBudgetGroupObligationVarianceRun	 = LocalBudgetGroupObligationVarianceRunView.BudgetGroupObligationVarianceRun
					invoked.PrmBudgetScenario		  			 = Scenario
					invoked.PrmBudgetTemplate	  			     = BudgetTemplate

				invoke GetReleasedOrPendingGLTransactions in background
					run after LocalAsyncId
					assign async action request id to LocalAsyncId
					invoked.PrmBudgetGroupObligationVarianceRun	 = LocalBudgetGroupObligationVarianceRunView.BudgetGroupObligationVarianceRun

				invoke DeleteZeroVarianceDetail BudgetGroupObligationVariance in background
					run after LocalAsyncId
					assign async action request id to LocalAsyncId
					invoked.PrmFinanceEnterpriseGroup           = FinanceEnterpriseGroup
					invoked.PrmBudgetGroupObligationVarianceRun = LocalBudgetGroupObligationVarianceRunView.BudgetGroupObligationVarianceRun

				invoke UpdateStatusToCompleted LocalBudgetGroupObligationVarianceRunView.BudgetGroupObligationVarianceRun in background
					run after LocalAsyncId

	Cube Relations
		TemplateRel
			matrix relation to GeneralLedgerTotal
			allow dimension reordering
			dynamic mapping is MatrixMap
        	Dimension Mapping
				related.GeneralLedgerTotal.Ledger				= Scenario.Basis.LedgerTopNode
				related.Scenario								= FinanceEnterpriseGroup.ActualsScenario.Parent
			dynamic preload measures are DynamicMeasure
		BudgetCubeRel
			cell relation to GeneralLedgerTotal
			dynamic mapping is BudgetCubeMap
			Dimension Mapping
				related.Scenario								= Scenario
				related.GeneralLedgerTotal.Ledger				= CoreLedgerRel.Ledger
				related.GeneralLedgerTotal.EntityYearPeriod		= BudgetCubePeriodRel.GeneralLedgerCalendarPeriod
			dynamic preload measures are DynamicMeasure
		LastBudgetCubeRel
			cell relation to GeneralLedgerTotal
			dynamic mapping is BudgetCubeMap
			Dimension Mapping
				related.Scenario								= Scenario
				related.GeneralLedgerTotal.Ledger				= CoreLedgerRel.Ledger
				related.GeneralLedgerTotal.EntityYearPeriod		= last AllPeriodsRel.GeneralLedgerCalendarPeriod
			dynamic preload measures are DynamicMeasure
		CubeBudgetForAllPeriodsRel
			matrix relation to GeneralLedgerTotal
			allow dimension reordering
			dynamic mapping is MatrixMap
			Dimension Mapping
				related.Scenario								= Scenario
				related.GeneralLedgerTotal.Ledger				= CoreLedgerRel.Ledger
			dynamic preload measures are DynamicMeasure
