PayablesInvoiceWithholding is a BusinessClass
	owned by ap
	prefix is PIWI

	Ontology
		symbolic key is PayablesInvoiceWithholding

    Patterns
        implements StaticJava
        implements Archivable
        
	Persistent Fields
		AccountingEntity
		CurrencyTable
		Type														is Numeric 1
			States
				Payment												value is 0
				Accrued												value is 1
		Vendor														is a snapshot of PayablesInvoice.Vendor
		EnrolledWithholding											is Boolean
		InvoiceNumber												is a snapshot of PayablesInvoice.Invoice
		InvoiceCancelDate											is a snapshot of PayablesInvoice.CancelDate
		PaymentVoidDate												is a snapshot of PayablesInvoicePayment.VoidDate
		ReportableAmount											is an InternationalAmount			
		InvoiceReportableAmount										is an InternationalAmount			
		WithholdingRate												is a ChrgRate						
		WithholdingScale
		InvoiceWithholdingAmount									is an InternationalAmount			
		WithholdingAmount											is an InternationalAmount			
		InvoiceCurrency												is a Currency						
		PaymentCurrency												is a Currency						
		PaymentExchangeRate											is a CurrencyExchangeRate			
		BasisForWithholding											is an InternationalAmount			
		PaymentWithholdingAmount									is a FinanceCurrencyAmountGroup		
		WithholdingDistributionAccount								is a FinanceCodeBlock		
		WithholdingDate												is an ExchangeDate
		PostDate													is Date
		ExemptAmount												is an InternationalAmount			
		PeriodTotalPaidAmount										is an InternationalAmount			
		PeriodTotalWithheldAmount									is an InternationalAmount			
		CashCode
		BankTransactionCode
		TransactionIDNumber
		Reportable													is Boolean
		
	Transient Fields
		TransientVoucherNumber										is like VoucherNumber
			derive value from PayablesInvoice.VoucherNumber
		TransientLastPayment										is Boolean

	Local Fields
		LocalCurrencyExchangeGroup									is a CurrencyExchangeGroup
		LocalFromCurrency											is an FromCurrency
		LocalEffectiveDate											is Date
		LocalAmountByCategorAndCode									is a FinanceCurrencyAmountGroup
		NegativeFinanceCurrencyAmountGroup
		LocalCalculatedAmount										is an InternationalAmount

		LocalTaxSequenceNumber										is Alpha size 30
		LocalReportingCurrency										is Alpha size 10
		LocalFunctionalCurrency										is Alpha size 5
		LocalCurrExchangeDate										is Alpha size 25
		LocalWHCFromCurrency										is Alpha size 5
		LocalWHCToCurrency											is Alpha size 5
		LocalCheckDate 												is Alpha size 25

		LocalBaseForWithholding										is an InternationalAmount		
		LocalPeriodWithheldAmount									is an InternationalAmount
		LocalEachWithholdingAmount									is an InternalAmount
		LocalDistributionAmount										is an InternationalAmount
		
	Derived Fields
		SummarizeAmountsByCategoryAndCode  is a DerivedField
			type is Boolean
			initialize LocalAmountByCategorAndCode
			for each InvoiceWithholdingByIncomeCodeRel
				LocalAmountByCategorAndCode.CurrencyAmount											+= each.PaymentWithholdingAmount.CurrencyAmount
				LocalAmountByCategorAndCode.FunctionalAmount.EnteredCurrencyAmount					+= each.PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount
				LocalAmountByCategorAndCode.AlternateAmount.EnteredCurrencyAmount					+= each.PaymentWithholdingAmount.AlternateAmount.EnteredCurrencyAmount
				LocalAmountByCategorAndCode.AlternateAmount2.EnteredCurrencyAmount					+= each.PaymentWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount
				LocalAmountByCategorAndCode.AlternateAmount3.EnteredCurrencyAmount					+= each.PaymentWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount
				LocalAmountByCategorAndCode.ReportAmount1.EnteredCurrencyAmount						+= each.PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyAmount
				LocalAmountByCategorAndCode.ReportAmount2.EnteredCurrencyAmount						+= each.PaymentWithholdingAmount.ReportAmount2.EnteredCurrencyAmount
				LocalAmountByCategorAndCode.ReportAmount3.EnteredCurrencyAmount						+= each.PaymentWithholdingAmount.ReportAmount3.EnteredCurrencyAmount
				LocalAmountByCategorAndCode.ReportAmount4.EnteredCurrencyAmount						+= each.PaymentWithholdingAmount.ReportAmount4.EnteredCurrencyAmount
				LocalAmountByCategorAndCode.ReportAmount5.EnteredCurrencyAmount						+= each.PaymentWithholdingAmount.ReportAmount5.EnteredCurrencyAmount
				
		DerivedInvoiceNumber is a DerivedField
			type is like Invoice
			return PayablesInvoice.Invoice
			
		DerivedInvoiceDate is a DerivedField
			type is Date
			return PayablesInvoice.InvoiceDate

		
		DerivedTaxWHC is a DerivedField
			type is AlphaUpper size 4
			restricted
			return IncomeWithholdingCode[1:4]

		DerivedWHCFunctionalCurrRate is a DerivedField
			type is Decimal size 31.15
			restricted	
			if(AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				LocalWHCFromCurrency = PaymentCurrency
				LocalWHCToCurrency	  = LocalFunctionalCurrency
				LocalCurrExchangeDate = LocalCheckDate
				if(CurrExchangeRateRel exists)
					DerivedWHCFunctionalCurrRate = CurrExchangeRateRel.Rate
				else
				if(LocalWHCFromCurrency = LocalWHCToCurrency)
					DerivedWHCFunctionalCurrRate = 1	
			else
			if(AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				LocalWHCFromCurrency = PaymentCurrency
				LocalWHCToCurrency	  = LocalFunctionalCurrency
				LocalCurrExchangeDate = PayablesInvoice.InvoiceDate
				if(CurrExchangeRateRel exists)
					DerivedWHCFunctionalCurrRate = CurrExchangeRateRel.Rate
				else
					DerivedWHCFunctionalCurrRate = 1		
			return DerivedWHCFunctionalCurrRate
			
		DerivedWHCReportCurrRate is a DerivedField
			type is Decimal size 31.15
			restricted	
			if(AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				LocalWHCFromCurrency = PaymentCurrency
				LocalWHCToCurrency	= LocalReportingCurrency
				LocalCurrExchangeDate = LocalCheckDate
				if(LocalWHCFromCurrency = LocalWHCToCurrency)
					DerivedWHCReportCurrRate = 1
				else
				if(CurrExchangeRateRel exists)
					DerivedWHCReportCurrRate = CurrExchangeRateRel.Rate
			else
			if(AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				LocalWHCFromCurrency = PaymentCurrency
				LocalWHCToCurrency	  = LocalReportingCurrency
				LocalCurrExchangeDate = PayablesInvoice.InvoiceDate
				if(LocalWHCFromCurrency = LocalWHCToCurrency)
					DerivedWHCReportCurrRate = 1
				else
				if(CurrExchangeRateRel exists)
					DerivedWHCReportCurrRate = CurrExchangeRateRel.Rate
			return DerivedWHCReportCurrRate
		
		DerivedBasisBaseAmount is a DerivedField
			type is Decimal size 19.3
			restricted
			if(AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				DerivedBasisBaseAmount = ReportableAmount * DerivedWHCFunctionalCurrRate
			else
			if(AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				DerivedBasisBaseAmount = ReportableAmount * DerivedWHCFunctionalCurrRate
			else	
				if(PaymentCurrency != LocalFunctionalCurrency)
					DerivedBasisBaseAmount = ReportableAmount * PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyRate
				else
					DerivedBasisBaseAmount = ReportableAmount
			return DerivedBasisBaseAmount
				
		DerivedBasisReportAmount is a DerivedField
			type is like InternationalAmount
			restricted
			if(AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				DerivedBasisReportAmount = ReportableAmount * DerivedWHCReportCurrRate
			else
			if(AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				DerivedBasisReportAmount = ReportableAmount * DerivedWHCReportCurrRate
			else
				if(PaymentCurrency != LocalReportingCurrency)
					DerivedBasisReportAmount = ReportableAmount * PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyRate
				else
					DerivedBasisReportAmount = ReportableAmount
			return DerivedBasisReportAmount
			
		DerivedWithHoldingRate is a DerivedField
			type is Decimal size 19.3
			restricted
			DerivedWithHoldingRate = WithholdingRate * 100
			return DerivedWithHoldingRate
		
		DerivedEnteredCurrencyAmountPT is a DerivedField
			type is Decimal size 19.3
			restricted
			if(AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				DerivedEnteredCurrencyAmountPT = WithholdingAmount * DerivedWHCFunctionalCurrRate
			else
			if(AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				DerivedEnteredCurrencyAmountPT = WithholdingAmount * DerivedWHCFunctionalCurrRate
			else
			if(PaymentCurrency != LocalFunctionalCurrency)	
				DerivedEnteredCurrencyAmountPT = WithholdingAmount * PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyRate
			else
				DerivedEnteredCurrencyAmountPT = WithholdingAmount
			return DerivedEnteredCurrencyAmountPT
				
		DerivedReportCurrencyAmount is a DerivedField
			type is Decimal size 19.3
			restricted
			if(AccountingEntity.AddressCode.PostalAddress.Country = "MX")
				DerivedReportCurrencyAmount = WithholdingAmount * DerivedWHCReportCurrRate
			else
			if(AccountingEntity.AddressCode.PostalAddress.Country = "AR")
				DerivedReportCurrencyAmount = WithholdingAmount * DerivedWHCReportCurrRate
			else
				if(PaymentCurrency != LocalReportingCurrency)
					return WithholdingAmount * PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyRate
				else
					return WithholdingAmount
				
		DerivedWithholdingCodeDescription is a DerivedField
			type is Alpha size 60
			restricted
			return IncomeWithholdingCode.Description

		DerivedVATRegistrationNumber is a DerivedField
			type is like VATRegistrationNumber
			restricted
			if (Vendor.VATRegistrationNumber	entered)
				return Vendor.VATRegistrationNumber
			if (PayablesInvoice.PurchaseFromLocation.VATRegistrationNumber entered)
				return PayablesInvoice.PurchaseFromLocation.VATRegistrationNumber
			return TaxEntityRel.VATRegistrationNumber	
			
		DerivedPaidAccruedWithholdingAmount is a DerivedField			
			type is like InternationalAmount
			restricted
			return sum PaidPayablesInvoiceWithholdingRel.InvoiceWithholdingAmount

		DerivedLocalRoundTo is a DerivedField
			type is Decimal 5.4
			restricted
			if (PayablesInvoice.InvoiceCurrency.NumberOfDecimals = 2)
				return .01
			else
			if (PayablesInvoice.InvoiceCurrency.NumberOfDecimals = 0)
				return 1
			else
			if (PayablesInvoice.InvoiceCurrency.NumberOfDecimals = 3)
				return .001
			else
			if (PayablesInvoice.InvoiceCurrency.NumberOfDecimals = 4)
				return .0001





	Field Groups
		CategoryAndCode
			WithholdingCategory
			IncomeWithholdingCode

	Relations
		IncomeWithholdingCodeDetailRel
			one-to-one relation to IncomeWithholdingCodeDetail
			Field Mapping uses symbolic key
				related.VendorGroup				= Company.VendorGroup
				related.IncomeWithholdingCode	= IncomeWithholdingCode
				related.Company					= Company

		IncomeWithholdingRateRel
			one-to-many relation to IncomeWithholdingRate
			Field Mapping uses symbolic key
				related.VendorGroup								= Company.VendorGroup
				related.IncomeWithholdingCode					= IncomeWithholdingCode
				related.WithholdingCategory						= WithholdingCategory
			Instance Selection
				where (related.EffectiveDate			<= LocalEffectiveDate)

		PaidInvoiceWithholdingRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses symbolic key
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
			Instance Selection
				where (related.PayablesInvoicePayment			entered
				and    related.PaymentVoidDate					!entered)

		InvoiceWithholdingByIncomeCodeRel
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses ByCategoryWithholdingCode
				related.Company									= Company
				related.PayablesInvoice							= PayablesInvoice
				related.PayablesInvoicePayment					= PayablesInvoicePayment
				related.WithholdingCategory						= WithholdingCategory
				related.IncomeWithholdingCode					= IncomeWithholdingCode

		PaidPayablesInvoiceWithholdingRel				
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses ByAccruedCategoryWithholdingCode
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.Type							= Type
				related.WithholdingCategory				= WithholdingCategory
				related.IncomeWithholdingCode			= IncomeWithholdingCode
				related.PayablesInvoiceDistribution		= PayablesInvoiceDistribution
			Instance Selection
				where (related.PayablesInvoicePayment entered)

		PayablesInvoiceWithholdingRel					
			one-to-many relation to PayablesInvoiceWithholding
			Field Mapping uses ByAccruedCategoryWithholdingCode
				related.Company							= Company
				related.PayablesInvoice					= PayablesInvoice
				related.Type							= Type
				related.WithholdingCategory				= WithholdingCategory
				related.IncomeWithholdingCode			= IncomeWithholdingCode
				related.PayablesInvoiceDistribution		= PayablesInvoiceDistribution
			Instance Selection
				where (related.PayablesInvoicePayment	!entered)
			

		VendorWithholdingBalanceRel
			one-to-one relation to VendorWithholdingBalance
			Field Mapping uses symbolic key
				related.VendorGroup				= Company.VendorGroup
				related.Vendor					= Vendor
				related.IncomeWithholdingCode	= IncomeWithholdingCode
				related.Year					= WithholdingDate year

		CashPaymentWithholdingRel
			one-to-one relation to CashPaymentWithholding
			Field Mapping uses symbolic key
				related.VendorGroup					= Company.VendorGroup
				related.CashCode                    = CashCode
				related.BankTransactionCode			= BankTransactionCode
				related.TransactionIDNumber			= TransactionIDNumber
				related.IncomeWithholdingCode       = IncomeWithholdingCode
				related.WithholdingCategory			= WithholdingCategory

		LinkedTaxDistributionsRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses NewSet10
				related.Company					= Company
				related.Vendor					= Vendor
				related.PayablesInvoice			= PayablesInvoice
				related.OriginalDistribution	= PayablesInvoiceDistribution

		TotalInvoicedTaxDistributionRel
			one-to-many relation to PayablesInvoiceDistribution
			Field Mapping uses symbolic key
				related.Company    		= Company
				related.PayablesInvoice = PayablesInvoice
			Instance Selection
				where (related.IsInvoicedTaxDistribution)
				
		CurrExchangeRateRel
			one-to-one relation to CurrExchangeRate
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup									= Company.FinanceEnterpriseGroup
				related.CurrencyTable											= PayablesInvoice.CurrencyTable
				related.CurrExchangeRate.CurrencyRelationship.FromCurrency		= LocalWHCFromCurrency
				related.CurrExchangeRate.CurrencyRelationship.ToCurrency		= LocalWHCToCurrency
				related.ExchangeDate											= LocalCurrExchangeDate

		TaxEntityRel				 
			one-to-one relation to TaxEntity
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= Company.FinanceEnterpriseGroup
				related.TaxEntity 				= AccountingEntity
				
	Conditions
		CreateActionValid
			restricted
			when (PayablesInvoice.Status < 5)
			
		UpdateActionValid
			restricted
			when (!Reportable
			and   PaidInvoiceWithholdingRel	!exists)
			
		RecordExists
			restricted
			when (PayablesInvoiceWithholding exists)
			
		CalculatedUsingScale
			restricted
			when (WithholdingScale entered)

	Sets
		ByReportableRecords
			Sort Order
				Reportable descending
				Company
				IncomeWithholdingCode
				WithholdingCategory
				Vendor
				InvoiceNumber
				PayablesInvoice
				PayablesInvoicePayment
				PayablesInvoiceDistribution

		ByCategoryWithholdingCode
			Sort Order
				Company
				PayablesInvoice
				PayablesInvoicePayment
				WithholdingCategory
				IncomeWithholdingCode
				PayablesInvoiceDistribution

		ByAccruedCategoryWithholdingCode
			Sort Order
				Company
				PayablesInvoice
				Type
				WithholdingCategory
				IncomeWithholdingCode
				PayablesInvoiceDistribution
				PayablesInvoicePayment
				
		ByPaymentWithholdingCode
			Sort Order
				CashCode
				BankTransactionCode
				TransactionIDNumber
				IncomeWithholdingCode
				WithholdingCategory
				Company
				InvoiceNumber
				PayablesInvoice
				PayablesInvoicePayment
				PayablesInvoiceDistribution

	Field Rules
		Type
			force default to IncomeWithholdingCode.Type

		Vendor
			force default to PayablesInvoice.Vendor
		
		EnrolledWithholding
			force default to Vendor.EnrolledWithholding

		InvoiceNumber
			force default to PayablesInvoice.Invoice

		InvoiceReportableAmount
			if (Vendor.LineLevelWithholding
			and PayablesInvoiceDistribution !entered)
				cannot be entered
			if (Vendor.LineLevelWithholding)
				if (IncomeWithholdingCode.IncludeTax)			
					LocalDistributionAmount = PayablesInvoiceDistribution.DistributionAmount.CurrencyAmount + sum LinkedTaxDistributionsRel.DistributionAmount.CurrencyAmount
				else
					LocalDistributionAmount = PayablesInvoiceDistribution.DistributionAmount.CurrencyAmount
				if (PayablesInvoiceDistribution.DistributionAmount.CurrencyAmount > 0)
					constraint (InvoiceReportableAmount >= 0)
						"ReportableAmountCannotBeNegativeForInvoices"
					constraint (InvoiceReportableAmount <= LocalDistributionAmount)
						"ReportableAmountCannotBeGreaterThanDistributionAmountOf<LocalDistributionAmount>"
				else
					constraint (InvoiceReportableAmount <= 0)
						"ReportableAmountCannotBePositiveForCredits"
					constraint (InvoiceReportableAmount >= LocalDistributionAmount)
						"ReportableAmountCannotBeGreaterThanDistributionAmountOf<LocalDistributionAmount>"
			else
				if (PayablesInvoice.InvoiceAmount.CurrencyAmount > 0)
					constraint (InvoiceReportableAmount >= 0)
						"ReportableAmountCannotBeNegativeForInvoices"
					constraint (InvoiceReportableAmount <= PayablesInvoice.InvoiceAmount.CurrencyAmount)
						"ReportableAmountCannotBeGreaterThanInvoiceAmountOf<PayablesInvoice.InvoiceAmount.CurrencyAmount>"
				else
					constraint (InvoiceReportableAmount <= 0)
						"ReportableAmountCannotBePositiveForCredits"
					constraint (InvoiceReportableAmount >= PayablesInvoice.InvoiceAmount.CurrencyAmount)
						"ReportableAmountCannotBeGreaterThanInvoiceAmountOf<PayablesInvoice.InvoiceAmount.CurrencyAmount>"


		WithholdingRate
			if (Type.Accrued)
				LocalEffectiveDate = PayablesInvoice.InvoiceDate
				if (WithholdingRate !entered)
					WithholdingRate = last IncomeWithholdingRateRel.Rate
					required
						"WithholdingRateNotDefinedForWithholdingCode:<IncomeWithholdingCode>For<LocalEffectiveDate>"
			else
				if (WithholdingRate entered)				
					constraint (WithholdingDate entered)
						"CannotOverrideWithholdingRateOnPaymentTypeWithholding"
				LocalEffectiveDate = WithholdingDate
			default to last IncomeWithholdingRateRel.Rate

		IncomeWithholdingCode
			if (IncomeWithholdingCode.Currency entered)
				if (IncomeWithholdingCode.Type.Payment)
					constraint (IncomeWithholdingCode.Currency = PayablesInvoice.CashCode.Currency)
						"WithholdingCodeCurrency:<IncomeWithholdingCode.Currency>MustEqualPaymentCurrency:<PayablesInvoice.CashCode.Currency>"
				if (IncomeWithholdingCode.Type.Accrued)
					constraint (IncomeWithholdingCode.Currency = PayablesInvoice.InvoiceCurrency)
						"WithholdingCodeCurrency:<IncomeWithholdingCode.Currency>MustEqualPaymentCurrency:<PayablesInvoice.InvoiceCurrency>"
			constraint (IncomeWithholdingCodeDetailRel exists)
				"IncomeWithholdingCodeDetailDoesNotExistForCompany:<Company>"

		AccountingEntity
			force default to Company.AccountingEntity

		CurrencyTable
			force default to Company.CurrencyTable

		InvoiceCurrency
			force default to PayablesInvoice.InvoiceCurrency

		PaymentWithholdingAmount
			AccountingEntity = Company.AccountingEntity
			if (Type.Payment)
				PaymentWithholdingAmount.CurrencyAmount				= WithholdingAmount
				LocalFromCurrency									= PaymentCurrency
				PaymentWithholdingAmount.ExchangeDate				= WithholdingDate					






			else
				PaymentWithholdingAmount.CurrencyAmount				= InvoiceWithholdingAmount
				LocalFromCurrency									= InvoiceCurrency
				PaymentWithholdingAmount.ExchangeDate				= PayablesInvoice.InvoiceDate		

		WithholdingDistributionAccount
			default to IncomeWithholdingCodeDetailRel.WithholdingAccount

	Rule Blocks
		DefaultReportableAmount
			if (InvoiceReportableAmount !entered
			and !PayablesInvoice.Status.Unreleased
			and !PayablesInvoice.Status.PendingApproval
			and	!PayablesInvoice.Status.Approved
			and !PayablesInvoice.Status.Rejected
			and !Reportable)
				if (Vendor.LineLevelWithholding)
					invoke UpdateReportableAmount
						invoked.PrmInvoiceAmount	= PayablesInvoiceDistribution.DistributionAmount.CurrencyAmount
						invoked.PrmTaxAmount		= sum LinkedTaxDistributionsRel.DistributionAmount.CurrencyAmount
				else
					invoke UpdateReportableAmount
						invoked.PrmInvoiceAmount	= (PayablesInvoice.InvoiceAmount.CurrencyAmount - sum TotalInvoicedTaxDistributionRel.DistributionAmount.CurrencyAmount)
						invoked.PrmTaxAmount		= sum TotalInvoicedTaxDistributionRel.DistributionAmount.CurrencyAmount
					

	Actions
		Create is a Create Action
			valid when (CreateActionValid)
			Entrance Rules
				InvoiceCurrency = PayablesInvoice.InvoiceCurrency
			Action Rules
				if (!PayablesInvoice.Status.Unreleased
				and !PayablesInvoice.Status.PendingApproval
				and	!PayablesInvoice.Status.Approved
				and !PayablesInvoice.Status.Rejected
				and !Reportable)
					constraint (IncomeWithholdingCode.Type.Payment)
						"AccruedTypeWithholdingCodesCannotBeEnteredOnReleasedInvoices"
					constraint (PaidInvoiceWithholdingRel	!exists)
						"CannotAddWithholdingToInvoiceWithScheduledPayments"


			Exit Rules
				include DefaultReportableAmount
			
		CreateFromPaymentCycle is a Create Action
			restricted
			Entrance Rules
				InvoiceCurrency = PayablesInvoice.InvoiceCurrency
			Exit Rules
				if (TransientLastPayment)					
					InvoiceReportableAmount = InvoiceReportableAmount + first PayablesInvoiceWithholdingRel.InvoiceReportableAmount - sum PaidPayablesInvoiceWithholdingRel.InvoiceReportableAmount
					ReportableAmount		= InvoiceReportableAmount * PaymentExchangeRate
					PaymentWithholdingAmount.CurrencyAmount	= PaymentWithholdingAmount.CurrencyAmount + first PayablesInvoiceWithholdingRel.PaymentWithholdingAmount.CurrencyAmount - sum PaidPayablesInvoiceWithholdingRel.PaymentWithholdingAmount.CurrencyAmount
					PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount = PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount + first PayablesInvoiceWithholdingRel.PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount - sum PaidPayablesInvoiceWithholdingRel.PaymentWithholdingAmount.FunctionalAmount.EnteredCurrencyAmount
					PaymentWithholdingAmount.AlternateAmount.EnteredCurrencyAmount	= PaymentWithholdingAmount.AlternateAmount.EnteredCurrencyAmount + first PayablesInvoiceWithholdingRel.PaymentWithholdingAmount.AlternateAmount.EnteredCurrencyAmount - sum PaidPayablesInvoiceWithholdingRel.PaymentWithholdingAmount.AlternateAmount.EnteredCurrencyAmount
					PaymentWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount	= PaymentWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount + first PayablesInvoiceWithholdingRel.PaymentWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount - sum PaidPayablesInvoiceWithholdingRel.PaymentWithholdingAmount.AlternateAmount2.EnteredCurrencyAmount
					PaymentWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount	= PaymentWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount + first PayablesInvoiceWithholdingRel.PaymentWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount - sum PaidPayablesInvoiceWithholdingRel.PaymentWithholdingAmount.AlternateAmount3.EnteredCurrencyAmount
					PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyAmount	= PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyAmount + first PayablesInvoiceWithholdingRel.PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyAmount - sum PaidPayablesInvoiceWithholdingRel.PaymentWithholdingAmount.ReportAmount1.EnteredCurrencyAmount
					PaymentWithholdingAmount.ReportAmount2.EnteredCurrencyAmount	= PaymentWithholdingAmount.ReportAmount2.EnteredCurrencyAmount + first PayablesInvoiceWithholdingRel.PaymentWithholdingAmount.ReportAmount2.EnteredCurrencyAmount - sum PaidPayablesInvoiceWithholdingRel.PaymentWithholdingAmount.ReportAmount2.EnteredCurrencyAmount
					PaymentWithholdingAmount.ReportAmount3.EnteredCurrencyAmount	= PaymentWithholdingAmount.ReportAmount3.EnteredCurrencyAmount + first PayablesInvoiceWithholdingRel.PaymentWithholdingAmount.ReportAmount3.EnteredCurrencyAmount - sum PaidPayablesInvoiceWithholdingRel.PaymentWithholdingAmount.ReportAmount3.EnteredCurrencyAmount
					PaymentWithholdingAmount.ReportAmount4.EnteredCurrencyAmount	= PaymentWithholdingAmount.ReportAmount4.EnteredCurrencyAmount + first PayablesInvoiceWithholdingRel.PaymentWithholdingAmount.ReportAmount4.EnteredCurrencyAmount - sum PaidPayablesInvoiceWithholdingRel.PaymentWithholdingAmount.ReportAmount4.EnteredCurrencyAmount
					PaymentWithholdingAmount.ReportAmount5.EnteredCurrencyAmount	= PaymentWithholdingAmount.ReportAmount5.EnteredCurrencyAmount + first PayablesInvoiceWithholdingRel.PaymentWithholdingAmount.ReportAmount5.EnteredCurrencyAmount - sum PaidPayablesInvoiceWithholdingRel.PaymentWithholdingAmount.ReportAmount5.EnteredCurrencyAmount
					
			
		Delete is a Delete Action
			valid when (UpdateActionValid)
			Entrance Rules
				if (VendorWithholdingBalanceRel exists)
					invoke Update VendorWithholdingBalanceRel
						invoked.TransientWithheldAmount = WithholdingAmount * -1
						invoked.TransientPaymentAmount 	= ReportableAmount * -1
						invoked.TransientPaymentDate	= WithholdingDate
						
		Purge is a Purge Action
			restricted
			bypass relational integrity rules

		Update is an Update Action
			valid when (UpdateActionValid)
			Action Rules
				include DefaultReportableAmount

		FastUpdate is an Update Action
			default label is untranslatable
			restricted
			bypass field rules

		UpdateReportableAmount is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmInvoiceAmount		is an InternationalAmount
				PrmTaxAmount			is an InternationalAmount
			Action Rules
				if (InvoiceReportableAmount !entered)
					if (IncomeWithholdingCode.IncludeTax)
						InvoiceReportableAmount		= PrmInvoiceAmount + PrmTaxAmount
					else
						if (IncomeWithholdingCode.VATWithholding)
							InvoiceReportableAmount		= PrmTaxAmount
						else
							InvoiceReportableAmount		= PrmInvoiceAmount
				if (Type.Accrued)
					Reportable				= true
					WithholdingDate			= PayablesInvoice.InvoiceDate						
					LocalEffectiveDate 		= PayablesInvoice.InvoiceDate
					if (last IncomeWithholdingRateRel.PeriodInvoicedThreshold entered)			
						if ((InvoiceReportableAmount + VendorWithholdingBalanceRel.PeriodPaidAmount.PaidAmount[WithholdingDate month]) > (last IncomeWithholdingRateRel.PeriodInvoicedThreshold))
							LocalBaseForWithholding		= InvoiceReportableAmount + VendorWithholdingBalanceRel.PeriodPaidAmount.PaidAmount[WithholdingDate month]
							LocalPeriodWithheldAmount	= VendorWithholdingBalanceRel.PeriodWithheldAmount.WithheldAmount[WithholdingDate month]
							LocalEachWithholdingAmount	= LocalBaseForWithholding * WithholdingRate
							round LocalEachWithholdingAmount to nearest DerivedLocalRoundTo
							InvoiceWithholdingAmount	= LocalEachWithholdingAmount - LocalPeriodWithheldAmount
						else
							if (InvoiceReportableAmount >= last IncomeWithholdingRateRel.MinimumInvoicedAmount)
								InvoiceWithholdingAmount	= InvoiceReportableAmount * WithholdingRate
							else
								InvoiceWithholdingAmount	= 0
						invoke Update VendorWithholdingBalanceRel
							invoked.TransientPaymentAmount	= InvoiceReportableAmount
							invoked.TransientWithheldAmount = InvoiceWithholdingAmount
							invoked.TransientPaymentDate	= WithholdingDate
					else
						if (InvoiceReportableAmount < 0)
							LocalCalculatedAmount = (InvoiceReportableAmount * -1)
						if (InvoiceReportableAmount		>= last IncomeWithholdingRateRel.MinimumInvoicedAmount
						or  LocalCalculatedAmount	>= last IncomeWithholdingRateRel.MinimumInvoicedAmount)
							InvoiceWithholdingAmount	= InvoiceReportableAmount * WithholdingRate
							if (last IncomeWithholdingRateRel.MinimumWithholding entered)
								if (InvoiceWithholdingAmount	>= 0
								and InvoiceWithholdingAmount	< last IncomeWithholdingRateRel.MinimumWithholding)
									initialize InvoiceWithholdingAmount
								if (InvoiceWithholdingAmount 	< 0)
									LocalCalculatedAmount = (InvoiceWithholdingAmount * -1)
									if (LocalCalculatedAmount < last IncomeWithholdingRateRel.MinimumWithholding)
										initialize InvoiceWithholdingAmount
					InvoiceCurrency			= PayablesInvoice.InvoiceCurrency


					PostDate				= PayablesInvoice.DistributionDate
					invoke Update

		CreateGlobalWithholdingDistribution is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmControlDocumentNumber 			is Alpha 30
				PrmDescription           			is Alpha up to 60
				PrmReference             			is a Reference
				PrmJournalizeGroup       			is like JournalizeGroup
				PrmVoidDate				 			is Date 
				PrmUpdateForRounding	 			is Boolean
				PrmRoundingAmount					is a CalculateFinanceCurrencyAmountGroup
			Local Fields
				LocalBoolean			 is Boolean
			Action Rules
				LocalBoolean															= SummarizeAmountsByCategoryAndCode

				if (PrmUpdateForRounding )
					LocalAmountByCategorAndCode.FunctionalAmount.EnteredCurrencyAmount	+= PrmRoundingAmount.Total.FunctionalAmount.EnteredCurrencyAmount
					LocalAmountByCategorAndCode.AlternateAmount.EnteredCurrencyAmount	+= PrmRoundingAmount.Total.AlternateAmount.EnteredCurrencyAmount
					LocalAmountByCategorAndCode.AlternateAmount2.EnteredCurrencyAmount	+= PrmRoundingAmount.Total.AlternateAmount2.EnteredCurrencyAmount
					LocalAmountByCategorAndCode.AlternateAmount3.EnteredCurrencyAmount	+= PrmRoundingAmount.Total.AlternateAmount3.EnteredCurrencyAmount
					LocalAmountByCategorAndCode.ReportAmount1.EnteredCurrencyAmount		+= PrmRoundingAmount.Total.ReportAmount1.EnteredCurrencyAmount
					LocalAmountByCategorAndCode.ReportAmount2.EnteredCurrencyAmount		+= PrmRoundingAmount.Total.ReportAmount2.EnteredCurrencyAmount
					LocalAmountByCategorAndCode.ReportAmount3.EnteredCurrencyAmount		+= PrmRoundingAmount.Total.ReportAmount3.EnteredCurrencyAmount
					LocalAmountByCategorAndCode.ReportAmount4.EnteredCurrencyAmount		+= PrmRoundingAmount.Total.ReportAmount4.EnteredCurrencyAmount
					LocalAmountByCategorAndCode.ReportAmount5.EnteredCurrencyAmount		+= PrmRoundingAmount.Total.ReportAmount5.EnteredCurrencyAmount

				NegativeFinanceCurrencyAmountGroup = LocalAmountByCategorAndCode
				LocalBoolean = NegativeFinanceCurrencyAmountGroup.PerformCalculation

				invoke CreateFromBatchNoParms PayablesInvoiceDistribution
					invoked.CreateAlternateGLTransDetail	= true
					if (PrmVoidDate	entered)
						invoked.GLTPostingDate				= PrmVoidDate
						invoked.DistributionDate			= PrmVoidDate
						invoked.GLTGeneralLedgerEvent		= "VP"
						invoked.DistributionAmount			= LocalAmountByCategorAndCode
					else
						invoked.GLTPostingDate				= WithholdingDate
						invoked.DistributionDate			= WithholdingDate
						invoked.GLTGeneralLedgerEvent		= "AP"
						invoked.DistributionAmount			= NegativeFinanceCurrencyAmountGroup
					invoked.GLTTransactionDate			= WithholdingDate
					invoked.Company						= Company
					invoked.GLTCurrencyCode				= PaymentCurrency
					invoked.PayablesInvoice				= PayablesInvoice
					invoked.DistributionType 			= "W"
					invoked.PostingOption				= "S"
					invoked.Status						= 1
					invoked.GLTControlDocumentNumber	= PrmControlDocumentNumber
                    invoked.GLTDocumentNumber           = PrmControlDocumentNumber
					invoked.Description					= PrmDescription
					invoked.DistributionReference		= PrmReference
					invoked.InvoiceCurrency				= PaymentCurrency
					invoked.DistributionAmount.ExchangeDate			= WithholdingDate
					invoked.DistributionAmount.KeepRateAndAmount	= true
					invoked.GLFinanceCodeBlock			= WithholdingDistributionAccount
					invoked.GLTTransactionCodeBlock		= WithholdingDistributionAccount
					invoked.DistributionAccount			= WithholdingDistributionAccount
					invoked.GLTJournalizeGroup			= PrmJournalizeGroup
					invoked.BypassActiveCodeBlockEdit 	= true		

		UpdatePaymentInformation is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmCashCode						is a CashCode
				PrmBankTransactionCode			is a BankTransactionCode
				PrmTransactionIDNumber			is a TransactionIDNumber
				PrmPayGroup						is a PayGroup
				PrmCashRequirementsResult		is a CashRequirementsResult

			Action Rules
				CashCode			= PrmCashCode
				BankTransactionCode	= PrmBankTransactionCode
				TransactionIDNumber	= PrmTransactionIDNumber
				invoke Update CashPaymentWithholdingRel
					invoked.PayGroup						= PrmPayGroup
					invoked.CashRequirementsResult			= PrmCashRequirementsResult
					invoked.Vendor							= Vendor
					invoked.WithholdingScale				= WithholdingScale
					invoked.TransientPeriodPaidAmount		= PeriodTotalPaidAmount
					invoked.TransientPeriodWithheldAmount	= PeriodTotalWithheldAmount
					invoked.CurrentPaidAmount				+= ReportableAmount
					invoked.CurrentWithholdingAmount		+= WithholdingAmount
					invoked.ExemptAmount					= ExemptAmount

		UpdateVoidDate is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				PrmVoidSequence	is a VoidSequence
				PrmVoidDate		is Date
			Action Rules
				PayablesInvoicePayment.VoidSequence	= PrmVoidSequence
				PaymentVoidDate						= PrmVoidDate

		UpdateSnapshotFields is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				Vendor				= PayablesInvoice.Vendor
				InvoiceNumber		= PayablesInvoice.Invoice
				InvoiceCancelDate	= PayablesInvoice.CancelDate
				if (InvoiceCancelDate entered)
					Reportable = false


		UpdateSnapshotFieldsSet is a Set Action			
			default label is untranslatable
			restricted
			Parameters
				PrmCompany		is a PayablesCompany
				PrmInvoice		is a PayablesInvoice
			Parameter Rules
				PrmCompany
				PrmInvoice
				
			Instance Selection
				where (Company 			= PrmCompany
				and    PayablesInvoice	= PrmInvoice)
				
			Action Rules
				Instance Rules
					Vendor				= PrmInvoice.Vendor
					InvoiceNumber		= PrmInvoice.Invoice
					InvoiceCancelDate	= PrmInvoice.CancelDate
					if (InvoiceCancelDate entered)
						Reportable = false
							
		PurgePayablesInvoiceWithholding is a Set Action
			default label is untranslatable
			restricted
			Parameters
				PrmPayablesCompany	is a PayablesCompany
				PrmPayablesInvoice	is like PayablesInvoice

			Parameter Rules
				PrmPayablesCompany
					required
				PrmPayablesInvoice
					required

			Instance Selection
				include deleted records
				where (Company				= PrmPayablesCompany
				and    PayablesInvoice		= PrmPayablesInvoice)

			Action Rules
				Set Rules
						Exit Rules
				Instance Rules
					invoke Purge
