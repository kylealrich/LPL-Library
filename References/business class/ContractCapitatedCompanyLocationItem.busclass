ContractCapitatedCompanyLocationItem is a BusinessClass
	owned by po
	prefix is CCBI
	sql name is "ContractCapitatedCompLocI"

	Ontology
		symbolic key is ContractCapitatedCompanyLocationItem

	Persistent Fields
		Company		is a GeneralLedgerCompany
			disable surrogates
		Location	is an InventoryLocation
		ComponentContractLine               is a ContractLine
		PrimaryDiscount                     is Percent size 6.3
		RevisionDiscount                    is Percent size 6.3
		PrimaryFinalCost                    is a ContractUnitCost
			precision is ComponentContractLine.DerivedNumberOfDecimalsCost
		RevisionFinalCost                   is a ContractUnitCost 
			precision is ComponentContractLine.DerivedNumberOfDecimalsCost				

	Local Fields 
		LocalUseBaseCostForPrimary          is Boolean

	Derived Fields 

	Context Fields 
		ContextCompany			is a Company 
		ContextRequisition      is a Requisition
	
	Field Rules 

		Company 
			required 

		PrimaryDiscount 

			constraint (PrimaryDiscount < 100%)
				"PrimaryDiscountMustBeLessThan100%"


		RevisionDiscount

			constraint (RevisionDiscount < 100%)
				"RevisionDiscountMustBeLessThan100%"		

	Conditions
		HasComponentGroup 
			restricted
			when (ContractCapitatedComponentGroup entered)

		NoProcedure 
			restricted 
			when (ContractLine !entered)

		NeedsCostTestForAll
			restricted 
			when  (ComponentContractLine.CostOption = 1
			and    ContractLine.LineNotClosed
			and    ContractCapitatedComponentGroupItem.ComponentGroupQuantityLimit
			and   (NeedsCostTestForPrimary
			or     NeedsCostTestForRevision
			or     NeedsCostTestForNoProcedureOrBoth))
		
		NeedsCostTestForPrimary 
			restricted
			when (ContractLine.PrimaryProcedure
			and   PrimaryFinalCost = 0)   
		
		NeedsCostTestForRevision
			restricted
			when (ContractLine.RevisionProcedure 
			and   RevisionFinalCost = 0)

		NeedsCostTestForNoProcedureOrBoth
			restricted
			when ((NoProcedure
			or     ContractLine.PrimaryOrRevisionProcedure)
			and   (RevisionFinalCost = 0
			or     PrimaryFinalCost  = 0))

	Relations

		ComponentContractLineRel 
			one-to-one relation to ContractLine 
			Field Mapping uses symbolic key 
				related.ContractGroup		= ContractGroup 
				related.Contract            = Contract 
				related.ContractLine        = ComponentContractLine

		AnotherCompanyLocationItemRel 
			one-to-many relation to ContractCapitatedCompanyLocationItem 
			Field Mapping uses ByCapitatedItem 
				related.ContractGroup						= ContractGroup 
				related.Contract            				= Contract 
				related.ContractLine        				= ContractLine 
				related.ContractCapitatedComponentGroup		= ContractCapitatedComponentGroup
				related.ContractCapitatedComponentGroupItem	= ContractCapitatedComponentGroupItem
				related.Company                             = Company 
				related.Location                            = Location 
			Instance Selection
				where (related.UniqueID != UniqueID)

	Sets
		
		ByCapitatedItem 
			Sort Order
			 	ContractGroup
		 		Contract 
		 		ContractLine 
				ContractCapitatedComponentGroup
				ContractCapitatedComponentGroupItem
				Company 
				Location 
				ContractCapitatedCompanyLocationItem 

		ByContractLine 
			Sort Order
			 	ContractGroup
		 		Contract 
		 		ComponentContractLine 
		 		ContractLine 
				ContractCapitatedComponentGroup
				ContractCapitatedComponentGroupItem 
				ContractCapitatedCompanyLocationItem 


		ByComponentLine 
			Sort Order
			 	ContractGroup
		 		Contract 
		 		ContractLine 
				ContractCapitatedComponentGroup
				ComponentContractLine 
				Company 
				Location 
				ContractCapitatedComponentGroupItem
				ContractCapitatedCompanyLocationItem 

		ByComponentLineNoProcedure 
			Sort Order
			 	ContractGroup
		 		Contract 
		 		ComponentContractLine 
				Company 
				Location 
				ContractCapitatedComponentGroup
				ContractLine 
				ContractCapitatedComponentGroupItem
				ContractCapitatedCompanyLocationItem 			

	Actions
		Create is a Create Action
			restricted

			Action Rules 

				if (NoProcedure)
					if (PrimaryFinalCost entered)
						constraint (PrimaryDiscount !entered)
							"CannotEnterAPrimaryDiscountAndAPrimaryFinalCost"
					if (PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * PrimaryDiscount)
					else 
					if (ContractCapitatedComponentGroupItem.PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroupItem.PrimaryDiscount)
					else
					if (ContractCapitatedComponentGroup.PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroup.PrimaryDiscount)
					else
					if (LocalUseBaseCostForPrimary)
					 	PrimaryFinalCost = ComponentContractLineRel.BaseCost 
					if (RevisionFinalCost entered)
						constraint (RevisionDiscount !entered)
							"CannotEnterARevisionDiscountAndARevisionFinalCost"
					if (RevisionDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * RevisionDiscount)
					else
					if (ContractCapitatedComponentGroupItem.PrimaryDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroupItem.RevisionDiscount)
					else
					if (ContractCapitatedComponentGroup.RevisionDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroup.RevisionDiscount)
				if (ContractLine.EitherPrimaryProcedure)
					if (PrimaryFinalCost entered)
						constraint (PrimaryDiscount !entered)
							"CannotEnterAPrimaryDiscountAndAPrimaryFinalCost"
					if (PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * PrimaryDiscount)
					else 
					if (ContractCapitatedComponentGroupItem.PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroupItem.PrimaryDiscount)
					else
					if (ContractCapitatedComponentGroup.PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroup.PrimaryDiscount)
					else
					if (LocalUseBaseCostForPrimary)
					 	PrimaryFinalCost = ComponentContractLineRel.BaseCost 	
				if (ContractLine.EitherRevisionProcedure)
					if (RevisionFinalCost entered)
						constraint (RevisionDiscount !entered)
							"CannotEnterARevisionDiscountAndARevisionFinalCost"
					if (RevisionDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * RevisionDiscount)
					else
					if (ContractCapitatedComponentGroupItem.PrimaryDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroupItem.RevisionDiscount)
					else
					if (ContractCapitatedComponentGroup.RevisionDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroup.RevisionDiscount)

		Update is an Update Action

			Action Rules

				display "InLocationItemUpdate"
				if (NoProcedure)
					if (PrimaryFinalCost entered and PrimaryFinalCost changed)
						constraint (PrimaryDiscount !entered)
							"CannotEnterAPrimaryDiscountAndAPrimaryFinalCost"
					if (PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * PrimaryDiscount)
					else 
					if (ContractCapitatedComponentGroupItem.PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroupItem.PrimaryDiscount)
					else
					if (ContractCapitatedComponentGroup.PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroup.PrimaryDiscount)
					if (RevisionFinalCost entered and RevisionFinalCost changed)
						constraint (RevisionDiscount !entered)
							"CannotEnterARevisionDiscountAndARevisionFinalCost"
					if (RevisionDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * RevisionDiscount)
					else
					if (ContractCapitatedComponentGroupItem.PrimaryDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroupItem.RevisionDiscount)
					else
					if (ContractCapitatedComponentGroup.RevisionDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroup.RevisionDiscount)
				if (ContractLine.EitherPrimaryProcedure)
					display "InEitherPrimaryProcedure"
					display "ContractCapitatedComponentGroupItem<ContractCapitatedComponentGroupItem.PrimaryDiscount>"
					display "CompGroupDisc<ContractCapitatedComponentGroup.PrimaryDiscount >"
					if (PrimaryFinalCost entered and PrimaryFinalCost changed)
						constraint (PrimaryDiscount !entered)
							"CannotEnterAPrimaryDiscountAndAPrimaryFinalCost"
					if (PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * PrimaryDiscount)
					else 
					if (ContractCapitatedComponentGroupItem.PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroupItem.PrimaryDiscount)
					else
					if (ContractCapitatedComponentGroup.PrimaryDiscount entered)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroup.PrimaryDiscount)
					display "PrimaryFinalCostAfterGoingThroughDiscounts<PrimaryFinalCost>"
				if (ContractLine.EitherRevisionProcedure)
					if (RevisionFinalCost entered and RevisionFinalCost changed)
						constraint (RevisionDiscount !entered)
							"CannotEnterARevisionDiscountAndARevisionFinalCost"
					if (RevisionDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * RevisionDiscount)
					else
					if (ContractCapitatedComponentGroupItem.PrimaryDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroupItem.RevisionDiscount)
					else
					if (ContractCapitatedComponentGroup.RevisionDiscount entered)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * ContractCapitatedComponentGroup.RevisionDiscount)

		Delete is a Delete Action
			valid when (!ContractLine.ContractLineState.Closed)

		Purge is a Purge Action
			restricted

		UpdateFromLineBaseCost is an Instance Action 
			restricted 
			Parameters 
				OldBaseCost                         is a ContractUnitCost
				NewBaseCost                         is a ContractUnitCost

			Action Rules
				if (PrimaryDiscount entered)
					PrimaryFinalCost = NewBaseCost - (NewBaseCost * PrimaryDiscount)
				else
				if (ContractCapitatedComponentGroup.PrimaryDiscount entered)
					PrimaryFinalCost = NewBaseCost - (NewBaseCost * ContractCapitatedComponentGroup.PrimaryDiscount)	
				else 
				if (OldBaseCost = PrimaryFinalCost)
					PrimaryFinalCost = NewBaseCost 

				if (RevisionDiscount entered)
					RevisionFinalCost = NewBaseCost - (NewBaseCost * RevisionDiscount)
				else
				if (ContractCapitatedComponentGroup.RevisionDiscount entered)
					RevisionFinalCost = NewBaseCost - (NewBaseCost * ContractCapitatedComponentGroup.RevisionDiscount)				
		
		UpdateDiscountPercent is an Instance Action 
			Parameters
				NewPrimaryDiscount  				is Percent 6.3
				NewRevisionDiscount 				is Percent 6.3

			Parameter Rules 

				NewPrimaryDiscount 
					initial value is PrimaryDiscount 
					constraint (NewPrimaryDiscount < 100%)
						"NewPrimaryDiscountMustBeLessThan100%"
				NewRevisionDiscount 
					initial value is RevisionDiscount 
					constraint (NewRevisionDiscount < 100%)
						"NewRevisionDiscountMustBeLessThan100%"

			Action Rules 

				if (NewPrimaryDiscount > 0
				and NewPrimaryDiscount != PrimaryDiscount)
					PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * NewPrimaryDiscount)

				if (NewRevisionDiscount > 0
				and NewRevisionDiscount != RevisionDiscount)
					RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * NewRevisionDiscount)	
				PrimaryDiscount 	= NewPrimaryDiscount
				RevisionDiscount	= NewRevisionDiscount
				
		UpdateDiscountPercentFromItem is a Set Action	
			restricted
			Parameters
				ParmContractGroup						is a ContractGroup
				ParmContract        					is a Contract 
				ParmContractLine    					is a ContractLine 
				ParmContractCapitatedComponentGroup 	is a ContractCapitatedComponentGroup
				ParmContractCapitatedComponentGroupItem	is a ContractCapitatedComponentGroupItem
				NewPrimaryDiscount  					is Percent 6.3
				NewRevisionDiscount 					is Percent 6.3

			Instance Selection 
				where (ParmContractGroup 						= ContractGroup
				and    ParmContract      						= Contract
				and    ParmContractLine  						= ContractLine
				and    ParmContractCapitatedComponentGroup 		= ContractCapitatedComponentGroup
				and    ParmContractCapitatedComponentGroupItem	= ContractCapitatedComponentGroupItem)

			Action Rules
				Instance Rules 
					if (NewPrimaryDiscount > 0
					and PrimaryDiscount !> 0)
						PrimaryFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * NewPrimaryDiscount)

					if (NewRevisionDiscount > 0
					and RevisionDiscount !> 0)
						RevisionFinalCost = ComponentContractLineRel.BaseCost - (ComponentContractLineRel.BaseCost * NewRevisionDiscount)
