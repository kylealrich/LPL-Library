SourcingEvent is a BusinessClass
	owned by ss
	prefix is EVT
	representative text is "<EventVersionString>_-_<Name>"

	Ontology
		symbolic key is SourcingEvent

	Patterns
		implements CompoundDocument
			Document Components
				SourcingEventQuestion set
				SourcingEventArticle set
				SourcingEventTermAndCondition set
				SourcingEventMeeting set
				SourcingEventAttachment set
				SourcingEventContact set
				SourcingEventComment set
				SourcingEventNotification set
				SourcingEventCommodities set
				SourcingEventLine set
		implements AnalyticCube

	Persistent Fields
		Name						is a Description
		Description					is Text
		EventReference				is a Description
		Template					is Boolean
		Status						is Numeric size 2
			States
				Draft		value is 1
				Open		value is 2
				Cancelled	value is 3
				Closed		value is 4
				Suspended   value is 5
		ApprovalStatus				is Numeric size 1
			States
				NeedsApproval	value is 1
				Approved		value is 2
		NotificationStatus			is Numeric size 1
			States
				NotNotified	value is 1
				Notified	value is 2
				Amended		value is 3
	 	PreviousState				is Numeric size 2
			States
				Draft		value is 1
				Open		value is 2
				Cancelled	value is 3
				Closed		value is 4
				Suspended   value is 5
		AlreadyNotified				is Boolean
		Rejected					is Boolean
		SourcingEventType
		Sealed						is Boolean
		OutputType					is Numeric size 2
			States
				PO				value is 1
				Contract		value is 2
				Blanket			value is 3
				CatalogQuote	value is 4
				Standing		value is 5
				Service			value is 6
				NoOutput		value is 7
		CreateAmendments			is Boolean
		AllowSupplierQandA			is Boolean
			default label is "Allow Supplier Q & A"
		RequireAllLines 			is Boolean
 		CurrencyCode				is a Currency
		AllowResponseInOtherCurrency is Boolean
			default label is "Allow Responses in a Different Currency"
		PreviewDate					is TimeStamp
		OpenDate					is TimeStamp
		CloseDate					is TimeStamp
		QandAOpenDate				is TimeStamp
			default label is "Q & A Open Date"
		QandACloseDate				is TimeStamp
			default label is "Q & A Close Date"
		DisputeCloseDate			is TimeStamp
		StepTwoStarted				is Boolean
		StepTwoCloseDate			is TimeStamp
		BestAndFinalStarted			is Boolean
		BestAndFinalCloseDate		is TimeStamp
		RequestedDeliveryDate		is Date
		FinalizedDate				is Date
		BuyerWeightingFinalDate     is Date
			default label is "BuyerWeightingFinalEntryDate"
		Buyer
		Category
		SubCategory
		DefaultShipTo				is an InventoryLocation
		DefaultAccount				is a TransactionCodeBlock
		AssetInformation
		LastVersionNumber			is Numeric size 2
			disable Auditing
		EventSearchDocument			is Text
			sql name is SEARCHDOC
			text searchable
			disable Auditing
		InformalQuote				is Boolean
		PostingOptions
		InternalEvent				is Boolean
		ConsolidateAward			is Boolean
		NumberOfLines				is Numeric size 6
		CancelDate					is TimeStamp
		ArticleDisplayChange		is Boolean
		YellowAlert					is Numeric size 6
		RedAlert					is Numeric size 6
		DefaultWeightingToLines		is Boolean
		WeightingCriteria
		DiversityScoreAllocation	is a ScoreAllocation
		DeliveryScoreAllocation		is a ScoreAllocation
		DeliveryScoringOption		is Numeric size 1
			States
				AsSoonAsPossible		value is 1
				OnRequestedDeliveryDate	value is 2
		LowestBidOption				is Numeric size 1
			States
				LessThanLowestBid			value is 1
				LessThanOrEqualToLowestBid	value is 2
		DisplayLowestBidAmount		is Boolean
		RequireFullQuantity			is Boolean
		AllowTermsToBeNegotiated	is Boolean
		AllowAlternateResponses		is Boolean
		AllowAddOnCharge			is Boolean
		DefaultContractType			is a ContractType
		DefaultContractSubType		is a ContractSubtype
		DefaultContractClass		is a ContractClassification
		DefaultContractSubClass		is a ContractSubclassification
		DefaultEffectiveDate		is Date
		DefaultExpirationDate		is Date
		DefaultScheduleFrequency	is a ScheduleFrequency
		DefaultMaxReleaseNumber		is Numeric size 4
		DefaultParticipant			is a Participant
		CommoditySearch				is Text
			text searchable
		EstimatedTotal				is a CurrencyAmount
		DisplayPlanHoldersList		is Boolean
		IncompleteBuyerScoringEdit
		OnlyNotifyResponders		is Boolean
		TwoStepBidding				is Numeric size 1
			States
				Separate	value is 1
					default label is "TechnicalProposalSubmittedSeparately_fromPricingAmounts"
				Combined	value is 2
					default label is "TechnicalProposal_andPricingAmountsSubmitted_at_theSameTime"
		RequireBidBond				is Boolean
		BidBondPercent				is Numeric size 2
		BestAndFinalOffer			is Boolean
			default label is "Best_andFinalOffer"
		VendorItemProcessing
		AllowsConditionalQuestions	is Boolean
		DeliveryDateResponseRequired is Boolean
			default label is "RequireSupplier_toEnterDeliveryDateWhenResponding_toLines_withPOOutput"
		LastArticleDisplayOrder		is a SequenceNumber
			disable Auditing
		LastQuestionDisplayOrder	is a SequenceNumber
			disable Auditing
		DisplayBidTabulation		is Numeric 1
			States
				DoNotDisplay								value is 1
				DisplayWhenEventAwardedAndClosed			value is 2
				DisplayWhenEventClosedForBidding			value is 3
				DisplayWhenEventAwardedAndClosedOrCanceled	value is 4
				DisplayWhenEventClosedForBiddingOrCanceled	value is 5

	Local Fields
		LocalCounter						is Numeric size 2
		LocalItemGroup						is like ItemGroup
		LocalNotifiedSupplier				is a NotifiedSupplier
		ReleaseDate							is Date
		LocalProxyEmailAddressList			is an EmailAddressMulti 
			holds pii
		LocalProxyEmailAddressFound			is Boolean
		LocalPostingDate					is a PostingDate
		LocalExchangeDate					is an ExchangeDate
		LocalBuyer							is like Buyer
		InSuspendProcess            		is Boolean
		LocalUserTemplate					is like UserTemplate
		LocalSupplierGroup                  is like SupplierGroup 
		LocalNotifiedSupplierNumber         is like Supplier
		LocalNotifiedSupplierSourceId       is like SupplierSourceId		
		LocalQuestion						is like Question
		LocalOriginalQuestion				is like Question
		LocalOriginalSourcingEvent			is like SourcingEvent
		LocalOriginalSourcingEventLine		is like SourcingEventLine

	Context Fields
		Item
		Contract
		Requisition
		Supplier
		SupplyManagementReportContext is a SupplyManagementReport

	Dimensions
		Buyer

	Measures
		DerivedCubeCount

	Field Groups
		RevisionControlled
			Name
			Description
			SourcingEventType
			RequireAllLines
			PreviewDate
			OpenDate
			CloseDate
			BestAndFinalCloseDate
			StepTwoCloseDate
			QandAOpenDate
			QandACloseDate
			DisputeCloseDate
			RequestedDeliveryDate
			Buyer
			PostingOptions
			RequireBidBond
			BidBondPercent

		InitializedFields
			Status
			ApprovalStatus
			NotificationStatus
			PreviousState
			AlreadyNotified
			Rejected
			PreviewDate
			OpenDate
			CloseDate
			QandAOpenDate
			QandACloseDate
			DisputeCloseDate
			RequestedDeliveryDate
			EventSearchDocument
			ConsolidateAward
			FinalizedDate
			CancelDate
			NumberOfLines
			CommoditySearch

	Transient Fields
		CreateByCopy							is Boolean
		CreateFromLibrary 						is Boolean
		SystemCode								is a GeneralLedgerSystemCode
		TransientCreateWeightingForEventBuyer	is Boolean
		TransientEventDocument					is BinaryDocument

	Rule Blocks
		BuildTextIndexes
			build text search field EventSearchDocument
				Fields
					SourcingEvent
					Name
					Description
					EventReference
					SourcingEventLine set.Name
					SourcingEventLine set.Description
					SourcingEventLine set.CommodityCode
					SourcingEventLine set.CommodityCode.Description
					SourcingEventLine set.ItemNumber
					SourcingEventLine set.ItemDescription

			build text search field CommoditySearch
				Fields
					SourcingEventLine set.CommodityCode.CommoditySearch
					SourcingEventCommodities set.CommodityCode.CommoditySearch

		CheckPlanHoldersListFlag
			if (!IsTemplate
			and	DisplayPlanHoldersList changed
			and DisplayPlanHoldersList = false)
				confirmation required
					"Warning:DisplayPlanHoldersListHasBeenChangedToNo.TheExistingPlanHoldersListWillBeDeleted.DoYouWantToContinue?"

		UpdatePlanHoldersList
			if (!IsTemplate
			and	DisplayPlanHoldersList changed)
				if (DisplayPlanHoldersList = false)
					for each PlanHoldersListRel
						invoke Delete each
				else

					for each SourcingEventNotification set

						LocalNotifiedSupplier.SupplierGroup		= each.NotifiedSupplier.SupplierGroup
						LocalNotifiedSupplier.Supplier			= each.NotifiedSupplier.Supplier
						LocalNotifiedSupplier.SupplierSourceId	= each.NotifiedSupplier.SupplierSourceId

						invoke Update SourcingEventPlanHolderRel

					for each CreatedResponsesExcludingNoBidsAndNoNotifications
						LocalNotifiedSupplier.SupplierGroup  	= each.NotifiedSupplier.SupplierGroup
						LocalNotifiedSupplier.Supplier			= each.NotifiedSupplier.Supplier
						LocalNotifiedSupplier.SupplierSourceId	= each.NotifiedSupplier.SupplierSourceId

						invoke Create SourcingEventPlanHolder
							invoked.Company								= Company
							invoked.SourcingEvent						= SourcingEvent
							invoked.NotifiedSupplier.SupplierGroup  	= LocalNotifiedSupplier.SupplierGroup
							invoked.NotifiedSupplier.Supplier			= LocalNotifiedSupplier.Supplier
							invoked.NotifiedSupplier.SupplierSourceId	= LocalNotifiedSupplier.SupplierSourceId

		CreateAmendedEventSupplierContactMessage
			invoke Create SupplierContactMessage
				invoked.SupplierGroup 		= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
				invoked.Supplier 			= each.NotifiedSupplier.SupplierSourceId.Supplier
				invoked.SupplierSourceId	= each.NotifiedSupplier.SupplierSourceId
				invoked.CreationDateTime	= current timestamp
				invoked.MessageTitle		= Company.FinalAmendmentEmailSubject
				invoked.MessageText			= Company.FinalAmendmentEmailContent + each.NotifiedSupplier.SupplierSourceId.SupplierGroup.NewLine + "Amendment Description : " + last SourcingEventVersion set.VersionComment
				invoked.Status				= 1
				invoked.Priority			= 2
				invoked.SystemGenerated		= true
				invoked.ReleaseStatus		= 2
				invoked.OriginatingEvent    = SourcingEvent
				invoked.OriginatingCompany  = Company
				invoked.MessageOwner        = Buyer

		SendAmendmentEmailMessage
			LocalNotifiedSupplier = each.NotifiedSupplier
			send email
				to each.NotifiedSupplier.SupplierSourceId.EmailAddress
				cc DerivedProxyEmailAddressList
				from DerivedFromEmail
				subject "<Company.FinalAmendmentEmailSubject>"
				Contents
					"<Company.FinalAmendmentEmailContent>"
					"AmendmentDescription:<last SourcingEventVersion set.VersionComment>"
					"<DerivedEmailLink>"

		SendLinesCancelledEmailMessage
			LocalNotifiedSupplier = each.NotifiedSupplier
			send email
				to each.NotifiedSupplier.SupplierSourceId.EmailAddress
				cc DerivedProxyEmailAddressList
				from DerivedFromEmail
				subject "<Company.FinalCancelEmailSubject>"
				Contents
					"<Company.FinalCancelEmailContent>"
					"<DerivedEmailLink>"

		CreateLinesCancelledSupplierContactMessage
			invoke Create SupplierContactMessage
				invoked.SupplierGroup 		= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
				invoked.Supplier 			= each.NotifiedSupplier.SupplierSourceId.Supplier
				invoked.SupplierSourceId	= each.NotifiedSupplier.SupplierSourceId
				invoked.CreationDateTime	= current timestamp
				invoked.MessageTitle		= Company.FinalCancelEmailSubject
				invoked.MessageText			= Company.FinalCancelEmailContent
				invoked.Status				= 1
				invoked.Priority			= 2
				invoked.SystemGenerated		= true
				invoked.ReleaseStatus		= 2
				invoked.OriginatingEvent    = SourcingEvent
				invoked.OriginatingCompany  = Company
				invoked.MessageOwner        = Buyer

		UpdateRules
			if (Status.Open)
				if (EventUsingScoring)
					if 	(WeightingCriteria changed
					or   DiversityScoreAllocation changed
					or   DeliveryScoreAllocation changed
					or   DeliveryScoringOption changed)
						if (SubmittedResponses exists)
							invoke CalculateEventScoreSet SourcingEventResponse
								invoked.ParmCompany		= Company
								invoked.ParmEvent       = SourcingEvent 

			if (BestAndFinalOffer changed)
				if (BestAndFinalOffer = true)
			
					constraint (!AnyLinePrelimAwardedForAnyQuantity)
						"CannotChangeEventToBestAndFinalOfferWhenAwardedLinesExist"

					if (ShowResponsesNotViewed)
						invoke MarkResponsesAsViewed SourcingEvent

					if (HasOpenModificationRequests)
						invoke CancelModificationRequests SourcingEventResponse
							invoked.ParmSourcingCompany = Company
							invoked.ParmSourcingEvent   = SourcingEvent

				if (BestAndFinalOffer = false)

					constraint (!BestAndFinalStarted)
						"CannotChangeToNotBeABestAndFinalOfferEventWhenBestAndFinalProcessHasStarted"				

								
		BuildProxyEmailAddressList
			LocalProxyEmailAddressFound = false
			LocalProxyEmailAddressList  = ""
			for each SupplierContactProxyRel
				if (LocalProxyEmailAddressFound)
					LocalProxyEmailAddressList = LocalProxyEmailAddressList + "," + each.EmailAddress
				else
					LocalProxyEmailAddressList = each.EmailAddress
					LocalProxyEmailAddressFound = true

	Derived Fields
		RepresentativeText is a StringField
			type is Text
			default label is "Event"
			EventVersionString " - " Name

		BuyerName is a StringField
			type is Text
			Buyer.RepresentativeText

		TypeDescription is a StringField
			type is Alpha size 250
			SourcingEventType.Description

		RecentlyFinalizedDate is a ComputeField
			type is Date
			restricted
			(FinalizedDate + Company.RecentlyFinalizeDay)

		NumberOfNewSupplierQuestions is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of UnansweredQandAs)

		NumberOfSupplierQuestions is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of SourcingEventQandA set)

		NumberOfSupplierNotifications is a ComputeField
			type is Numeric size 6
			(instance count of SourcingEventNotification set)

		NumberOfNotifiedSuppliersWhoHaveResponded is a ComputeField
			type is Numeric size 6
			(instance count of NotifiedSuppliersWhoResponded)

		NumberOfResponses is a ComputeField
			type is Numeric size 6
			(instance count of SubmittedResponses)

		NumberOfSubmittedNoBidResponses is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of SubmittedNoBidResponses)

		NumberOfResponsesNotViewed is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of SourcingEventResponseNotViewedRel)

		NumberOfTechnicalResponses is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of SubmittedResponsesAcceptedTechnical)

		NumberOfBestAndFinalResponses is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of SubmittedResponsesBestAndFinal)

		NumberOfResponsesLessTechnicalNotAccepted is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of SubmittedResponsesLessTechnicalNo)

		NumberOfSourcingEventLinesAwarded is a ComputeField
			type is Numeric size 6
			(instance count of AwardedLines)

		NumberOfSuppliersAwarded is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of AwardedResponses)

		NumberOfSourcingEventLines is a ComputeField
			type is Numeric size 6
			(instance count of SourcingEventLine set)

		NumberOfNonCancelledSourcingEventLines is a ComputeField
			type is Numeric size 6
			restricted
			(instance count of NonCancelledLines)

		NumberOfAmendments is a ConditionalField
			type is Alpha size 2
			if (LastVersionNumber entered)
				LastVersionNumber
			else
				"0"

		DerivedAppsValue				is a DerivedField
			type is like PfiAppsValue
			return "SEventApproval" + UniqueID

		DerivedAwardAppsValue			is a DerivedField
			type is like PfiAppsValue
			return "SEAwardApproval" + UniqueID

		UserActionRoutingAsHtml			is a DerivedField
			type is RichText
			return first PfiWorkunitRel.UserActionRoutingAsHtml

		UserActionRoutingAsHtmlForAward is a DerivedField
			type is RichText
			return first PfiAwardWorkunitRel.UserActionRoutingAsHtml

		LinesAwardedString is a StringField
			type is Alpha size 15
			NumberOfSourcingEventLinesAwarded
			"/"
			NumberOfSourcingEventLines

		SupplierQuestionsString is a StringField
			type is Alpha size 15
			restricted
			NumberOfNewSupplierQuestions
			"/"
			NumberOfSupplierQuestions

		RequiresResponse1Message is a MessageField
			restricted
			"ResponseIsRequiredForAllLines"

		RequiresResponse2Message is a MessageField
			restricted
			"NotAllLinesAreRequired"

		RequiresResponseAllLines is a ConditionalField
			type is Text
			restricted
			if (RequireAllLines)
				RequiresResponse1Message
			else
				RequiresResponse2Message

		DraftMessage is a LabelField
			restricted
			"Draft"

		PreviewMessage is a LabelField
			restricted
			"Preview"

		PendingOpenMessage is a LabelField
			restricted
			"PendingOpen"

		PendingEventApprovalMessage is a LabelField
			restricted
			"PendingEventApproval"

		OpenMessage is a LabelField
			restricted
			"Open"

		AmendmentInProgressMessage is a LabelField
			restricted
			"Amendment_inProgress"

		PendingAwardMessage is a LabelField
			restricted
			"PendingAward"

		PendingOutputMessage is a LabelField	
			restricted
			"PendingOutput"

		CancelledMessage is a LabelField
			restricted
			"Cancelled"

		SuspendedMessage is a LabelField
			restricted
			"Suspended"

		ClosedMessage is a LabelField
			restricted
			"Closed"

		DerivedStatus is a ConditionalField
			type is Alpha 45
			if (Status.Draft)
				DraftMessage
			else
			if  (Status.Open
			and  ApprovalStatus.NeedsApproval
			and  NotificationStatus.NotNotified
			and (PreviousState.Draft
			or   PreviousState.Open))
				PendingEventApprovalMessage
			else
			if (BeforeActive
			and !NotificationStatus.Amended)
				PendingOpenMessage
			else
			if (BeforeActive
			and NotificationStatus.Amended)
				AmendmentInProgressMessage
			else
			if (OpenPreview
			and !NotificationStatus.Amended)
				PreviewMessage
			else
			if (OpenPreview
			and NotificationStatus.Amended)
				AmendmentInProgressMessage
			else
			if (OpenAvailable
			and !NotificationStatus.Amended)
				OpenMessage
			else
			if (OpenAvailable
			and NotificationStatus.Amended)
				AmendmentInProgressMessage
			else
			if (OpenPending)
				PendingAwardMessage
			else
			if (Status.Cancelled)
				CancelledMessage
			else
			if (Status.Suspended)
				SuspendedMessage
			else
			if (Status.Closed)
				ClosedMessage
			else
				blank

		AwardedMessage is a MessageField
			restricted
			"Awarded"

		DerivedStatusForSupplier is a ConditionalField
			type is Text
			if (Status.Draft)
				DraftMessage
			else
			if (Status.Open
			and ApprovalStatus.NeedsApproval
			and NotificationStatus.NotNotified
			and PreviousState.Draft)
				PendingEventApprovalMessage
			else
			if (BeforeActive
			and !NotificationStatus.Amended)
				PendingOpenMessage
			else
			if (BeforeActive
			and NotificationStatus.Amended)
				AmendmentInProgressMessage
			else
			if (OpenPreview
			and !NotificationStatus.Amended)
				PreviewMessage
			else
			if (OpenPreview
			and NotificationStatus.Amended)
				AmendmentInProgressMessage
			else
			if (OpenAvailable
			and !NotificationStatus.Amended)
				OpenMessage
			else
			if (OpenAvailable
			and NotificationStatus.Amended)
				AmendmentInProgressMessage
			else
			if (OpenPending)
				PendingAwardMessage
			else
			if (Status.Cancelled)
				CancelledMessage
			else
			if (Status.Closed)
				AwardedMessage
			else
				blank

		NumericDerivedStatus is a ConditionalField	
			type is Numeric 2
			restricted
			if (Status.Draft)
				1	
			else
			if (Status.Cancelled)
				8	
			else
			if (OpenAvailable
			and !NotificationStatus.Amended)
				7	
			else
			if (OpenPending)
				6	
			else
			if (NotificationStatus.Amended
			and (BeforeActive
			or  OpenPreview
			or  OpenAvailable))
				4	
			else
			if (OpenPreview
			and !NotificationStatus.Amended)
				5	
			else
			if (Status.Open
			and ApprovalStatus.NeedsApproval
			and NotificationStatus.NotNotified
			and PreviousState.Draft)
				2	
			else
			if (BeforeActive
			and !NotificationStatus.Amended)
				3	
			else
				0

		AmendmentInProgress is a ConditionalField
			type is Text
			restricted
			if (OpenAvailable
			and	NotificationStatus.Amended)
				AmendmentInProgressMessage
			else
				blank

		NewMessage is a MessageField
			restricted
			"New"

		QuestionCount is a StringField
			type is Alpha size 20
			restricted
			NewMessage
			" ("
			NumberOfNewSupplierQuestions
			")"

		DerivedQuestionLink is a ConditionalField
			type is Alpha size 20
			if (SupplierQuestionLink)
				QuestionCount
			else
				blank

		AnalyzeMessage is a MessageField
			restricted
			"Analyze"

		TechnicalProposalMessage is a MessageField
			restricted
			"AnalyzeTechnicalProposals"

		Step2Message is a MessageField
			restricted
			"AnalyzePricing"

		BestAndFinalStep1Message is a MessageField
			restricted
			"AnalyzeBestAndFinalStepOne"

		BestAndFinalResponseMessage is a MessageField
			restricted
			"AnalyzeBestAndFinal"

		ResponseCount is a StringField
			type is Alpha size 40
			restricted
			AnalyzeMessage
			" ("
			NumberOfResponses
			")"

		TechnicalResponseStep1Count is a StringField
			type is Alpha size 50
			restricted
			TechnicalProposalMessage
			" ("
			NumberOfResponses
			")"

		TwoStepStep2Count is a StringField
			type is Alpha size 50
			restricted
			Step2Message
			" ("
			NumberOfTechnicalResponses
			")"

		BestAndFinalStep1Count is a StringField
			type is Alpha size 50
			restricted
			BestAndFinalStep1Message
			" ("
			NumberOfResponsesLessTechnicalNotAccepted
			")"

		BestAndFinalResponseCount is a StringField
			type is Alpha size 50
			restricted
			BestAndFinalResponseMessage
			" ("
			NumberOfBestAndFinalResponses
			")"

		NewDerivedResponseLink is a ConditionalField
			type is Alpha size 50
			if (EventStillSealed)
				if ((Status.Draft)
				or	(BeforeActive
				and !NotificationStatus.Amended))
					blank
				else
					NewSealedCount
			else
			if (ResponseLink)
				ResponseCount
			else
			if (TechnicalResponseStep1Link)
				TechnicalResponseStep1Count
			else
			if (TechnicalResponseStep2Link)
				TwoStepStep2Count	
			else 
			if (BestAndFinalStep1Derived)
				BestAndFinalStep1Count
			else
			if (BestAndFinalResponseLink)
				BestAndFinalResponseCount
			else
				blank

		DerivedResponseLink is a ConditionalField
			type is Alpha size 20
			restricted
			if (EventStillSealed)
				if ((Status.Draft)
				or	(BeforeActive
				and !NotificationStatus.Amended)
				or  (NeedToStartPricingProcess))
					blank
				else
					SealedCount
			else
			if (ResponseLink)
				ResponseCount
			else
				blank

		ResponseExistsMessage is a MessageField
			restricted
			"ResponseExists"

		ResponsesExist is a ConditionalField
			type is Alpha 20
			restricted
			if (CurrentActorResponse exists)
				ResponseExistsMessage
			else
				blank

		SealedMessage is a MessageField
			restricted
			"Sealed"

		SealedTechnicalProposalMessage is a MessageField
			restricted
			"SealedTechnicalProposals"

		SealedStep2Message is a MessageField
			restricted
			"SealedPricing"

		SealedBestAndFinalStep1Message is a MessageField
			restricted
			"SealedBestAndFinalStepOne"

		SealedBestAndFinalResponseMessage is a MessageField
			restricted
			"SealedBestAndFinal"

		NewSealedCount is a ConditionalField
			type is Alpha size 50
			restricted
			if (SealedResponseLink)
				SealedCount
			else
			if (SealedTechnicalResponseStep1Link)
				SealedTechnicalResponseStep1Count
			else
			if (SealedTechnicalResponseStep2Link)
				SealedTwoStepStep2Count
			else
			if (SealedBestAndFinalResponseStep1Link)
				SealedBestAndFinalStep1Count
			else
			if (SealedBestAndFinalResponseLink)
				SealedBestAndFinalResponseCount
			else
				blank

		SealedCount is a StringField
			type is Alpha size 50
			restricted
			SealedMessage
			" ("
			NumberOfResponses
			")"

		SealedTwoStepStep2Count is a StringField
			type is Alpha size 50
			restricted
			SealedStep2Message
			" ("
			NumberOfTechnicalResponses
			")"

		SealedBestAndFinalResponseCount is a StringField
			type is Alpha size 50
			restricted
			SealedBestAndFinalResponseMessage
			" ("
			NumberOfBestAndFinalResponses
			")"

		SealedTechnicalResponseStep1Count is a StringField
			type is Alpha size 50
			restricted
			SealedTechnicalProposalMessage
			" ("
			NumberOfResponses
			")"

		SealedBestAndFinalStep1Count is a StringField
			type is Alpha size 50
			restricted
			SealedBestAndFinalStep1Message
			" ("
			NumberOfResponses
			")"

		MeetingsMessage is a MessageField
			restricted
			"Meetings"

		MeetingsExistHdr is a ConditionalField
			type is Alpha 20
			restricted
			if (MeetingsExist)
				MeetingsMessage
			else
				blank

		HasRequiredQuestionsMessage is a MessageField
			restricted
			"Note:LineQuestionsAlsoExistThatRequireAResponse"

		HasRequiredLineQuestions is a ConditionalField
			type is Text
			restricted
			if (ReqLineQuestions)
				HasRequiredQuestionsMessage
			else
				blank

		EventVersionString is a StringField
			type is Alpha size 16
			SourcingEvent
			"-"
			LastVersionNumber

		CreateMessage is a MessageField
			restricted
			"Create_Event"

		DisplayEventNumber is a DerivedField
			type is Alpha size 20
			restricted
			if (EventExists)
				return EventMessage + " " + SourcingEvent
			else
				return CreateMessage

		EventMessage is a MessageField
			restricted
			"Event"

		TemplateMessage is a MessageField
			restricted
			"Template"

		EventOrTemplate is a ConditionalField
			type is Alpha size 16
			restricted
			if (IsEvent)
				EventMessage
			else
				TemplateMessage

		EventVersionOrTemplate is a ConditionalField
			type is Alpha size 16
			restricted
			if (IsEvent)
				EventVersionString
			else
				SourcingEvent

		RespondNowMessage is a MessageField
			restricted
			"Respond_Now"

		EditResponseMessage is a MessageField
			restricted
			"Edit_Response"

		ViewResponseMessage is a MessageField
			restricted
			"View_Response"

		EnterPricingMessage is a MessageField
			restricted
			"Enter_Pricing"

		EnterBestAndFinalMessage is a MessageField
			restricted
			"Enter_Best_And_Final"

		ResponseButton is a ConditionalField
			type is Text
			restricted
			if (DisplayRespondNowButton)
				RespondNowMessage
			else
			if (DisplayEditResponseButton)
				EditResponseMessage
			else
			if (DisplayViewResponseButton)
				ViewResponseMessage
			else
			if (DisplayEnterPricingButton)
				EnterPricingMessage
			else
			if (DisplayEnterBestAndFinalButton)
				EnterBestAndFinalMessage
			else
				blank

		YellowAlertDate is a ComputeField
			type is TimeStamp
			restricted
			(CloseDate - YellowAlert as days)

		RedAlertDate is a ComputeField
			type is TimeStamp
			restricted
			(CloseDate - RedAlert as days)

		TotalWeightingByEvent is a ComputeField
			type is Percent size 6.3
   			(WeightingCriteria.PriceWeighting + WeightingCriteria.DiversityWeighting + WeightingCriteria.DeliveryWeighting + TotalQuestionWeighting + TotalBuyerWeighting)

		TotalTechnicalProposalWeightingByEvent is a ComputeField
			type is Percent size 6.3
			restricted
   			(WeightingCriteria.DiversityWeighting + TotalQuestionWeighting + TotalBuyerWeighting)

		TotalBuyerWeighting is a ComputeField
			type is Percent 6.3
			(sum EventBuyerWeightingRel.CriteriaWeighting)

		TotalLineWeighting is a ComputeField
			type is Percent size 6.3
   			(sum LinesWithWeighting.LineWeighting)

   		TotalQuestionWeighting is a ComputeField
			type is Percent size 6.3
   			(sum QuestionsWithWeighting.QuestionWeighting)

		TimeLeftToBidOnEvent is a ComputeField
			type is Numeric size 20
			restricted
			(CloseDate - current timestamp)

		BestEventScoreCalc is a DerivedField
			type is like InternationalAmount
			restricted
			for each SubmittedResponsesConsiderForScoring
				if (each.EventScore >= BestEventScoreCalc)
					BestEventScoreCalc = each.EventScore

		PrimaryPurchasingContact is a ConditionalField
			type is Text
			restricted
			if (PrimaryPurchasingContactRel exists)
				first PrimaryContactRel.Name
			else
				blank

		PreviewDateMessage is a MessageField
			restricted
			"PreviewDate:<PreviewDate>"

		MessagePreviewDate is a ConditionalField
			type is Alpha size 60
			restricted
			if (!InformalQuote)
				PreviewDateMessage
			else
				blank

		OpenDateMessage is a MessageField
			restricted
			"OpenDate:<OpenDate>"

		MessageOpenDate is a ConditionalField
			type is Alpha size 60
			restricted
			if (!InformalQuote)
				OpenDateMessage
			else
				blank

		CloseDateMessage is a MessageField
			restricted
			"CloseDate:<CloseDate>"

		MessageCloseDate is a ConditionalField
			type is Alpha size 60
			restricted
			if (!InformalQuote)
				CloseDateMessage
			else
				blank

		EnterAwardDefaultsMessage is a MessageField
			restricted
			"EnterAwardDefaults"

		ViewAwardDefaultsMessage is a MessageField
			restricted
			"ViewAwardDefaults"

		DerivedAwardDefaults is a ConditionalField
			type is Text
			restricted
			if (!DefaultsEntered)
				EnterAwardDefaultsMessage
			else
				ViewAwardDefaultsMessage

		ContractType is a ConditionalField
			type is Numeric size 1
			restricted
			if (OutputType.Contract)
				1
			else
			if (OutputType.Blanket)
				2
			else
			if (OutputType.Standing)
				3
			else
			if (OutputType.CatalogQuote)
				4
			else
			if (OutputType.Service)
				5
			else
				blank

		PurchaseOrderExampleText is a MessageField
			restricted
			"Example:(XXXX-XXXXXXXXXXXXXX-9999)"

		QAndAString is a MessageField
			restricted
			"Q_and_A"

		QAndAOpenDateString is a MessageField
			restricted
			"Q_and_AOpenDate"


		QAndACloseDateString is a MessageField
			restricted
			"Q_and_ACloseDate"

		AllowSupplierQAndAString is a MessageField
			restricted
			"AllowSupplierQ_and_A"

		DerivedEstimatedLineTotal is a DerivedField
			type is like InternationalAmount
			return (sum NonCancelledLines.DerivedExtendedEstimate)

		EnterBuyerWeightingMessage is a MessageField
			restricted
			"EnterBuyerWeighting"

		ViewBuyerWeightingMessage is a MessageField
			restricted
			"ViewBuyerWeighting"

		DerivedBuyerWeighting is a ConditionalField
			type is Text
			restricted
			if (!HasBuyerWeighting)
				EnterBuyerWeightingMessage
			else
				ViewBuyerWeightingMessage

		DerivedEmptyField is a DerivedField
			type is Alpha 1
			return ""

		EventQuestionCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventQuestion set exists)
				return "(" + instance count of SourcingEventQuestion set + ")"
			else
				return ""

		EventQuestionsCount is a DerivedField
			type is Numeric size 5
			restricted
			default label is "Questions"
			if (SourcingEvent.AllowsConditionalQuestions)
				if (SourcingEventSupplierQuestionPortalRel exists)
					return instance count of SourcingEventSupplierQuestionPortalRel
				else
					return 0
			else
				if (SourcingEventQuestion set exists)
					return instance count of SourcingEventQuestion set
				else
					return 0

		EventQuestionResponsesCount is a DerivedField
			type is Numeric size 5
			default label is "Question_Responses"
			if (SourcingEvent.AllowsConditionalQuestions)
				if (SESupplierQuestionResponseForASupplierRel exists)
					return instance count of SESupplierQuestionResponseForASupplierRel
				else
					return 0
			else
				if (SourcingEventQuestionResponseForASupplierRel exists)
					return instance count of SourcingEventQuestionResponseForASupplierRel
				else
					return 0

		WeightingIndicator is a DerivedField
			type is Alpha size up to 20
			restricted
			if (TotalWeightingByEvent entered)
				return "*"
			else
				return ""

		ArticleIndicator is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventArticle set exists)
				return "*"
			else
				return ""

		LineCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventLine set exists)
				return "*"
			else
				return ""

		EventLinesCount is a DerivedField
			type is Numeric size 5
			restricted
			default label is "Event_Lines"
			if (SourcingEventLine set exists)
				return instance count of SourcingEventLine set
			else
				return 0

		EventLineResponseCount is a DerivedField
			type is Numeric size 5
			default label is "Event_Lines"
			if (SourcingEventLineResponseRel exists)
				return instance count of SourcingEventLineResponseRel
			else
				return 0

		EventLineResponseBySupplierCount is a DerivedField
			type is Numeric size 5
			default label is "Event_Lines"
			if (SourcingEventLineResponseBySupplierRel exists)
				return instance count of SourcingEventLineResponseBySupplierRel
			else
				return 0

		MeetingCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventMeeting set exists)
				return "(" + instance count of SourcingEventMeeting set + ")"
			else
				return ""

		AttachmentCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventAttachment set exists)
				return "(" + instance count of SourcingEventAttachment set + ")"
			else
				return ""

		ContactCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventContact set exists)
				return "(" + instance count of SourcingEventContact set + ")"
			else
				return ""

		CommentCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventComment set exists)
				return "(" + instance count of SourcingEventComment set + ")"
			else
				return ""

		NotificationCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventNotification set exists)
				return "(" + instance count of SourcingEventNotification set + ")"
			else
				return ""

		CommodityCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventCommodities set exists)
				return "(" + instance count of SourcingEventCommodities set + ")"
			else
				return ""

		PlanHolderCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventPlanHolder set exists)
				return "(" + instance count of SourcingEventPlanHolder set + ")"
			else
				return ""

		QAndACount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventQandA set exists)
				return "(" + instance count of SourcingEventQandA set + ")"
			else
				return ""

		AOCCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (SourcingEventHeaderAOCRel exists)
				return "(" + instance count of SourcingEventHeaderAOCRel + ")"
			else
				return ""

		TwoStepSeparateMessage is a MessageField
			restricted
   			"PleaseLogInToSupplierPortalAndEnterBidAmountsForTheEventInMyResponses-UnsubmittedPricingSection;TheResponseMustBeResubmitted"

   		TwoStepCombinedMessage is a MessageField
   			restricted
   			"YouHaveAlreadySubmittedABidAmount;NoMoreStepsNeedBeTakenAtThisTime"

   		AdditionalStepTwoInstructions is a ConditionalField
   			type is Alpha size 150
   			restricted
   			if (SourcingEvent.TwoStepBidding.Separate)
   				TwoStepSeparateMessage
   			else
   				TwoStepCombinedMessage

   		DerivedTextPreview is a ConditionalField
   			type is TimeStamp
   			if (PreviewDate entered)
   				PreviewDate
   			else
   				blank

   		DerivedTextQAOpen is a ConditionalField
   			type is TimeStamp
   			if (QandAOpenDate entered)
   				QandAOpenDate
   			else
   				blank

   		DerivedTextQAClose is a ConditionalField
   			type is TimeStamp
   			if (QandACloseDate entered)
   				QandACloseDate
   			else
   				blank

   		DerivedTextDisputeClose is a ConditionalField
   			type is TimeStamp
   			if (DisputeCloseDate entered)
   				DisputeCloseDate
   			else
   				blank

   		DerivedTextOpenDate is a ConditionalField
   			type is TimeStamp
   			if (OpenDate entered)
   				OpenDate
   			else
   				OpenDate

   		DerivedTextBestAndFinalCloseDate is a ConditionalField
   			type is TimeStamp
   			if (BestAndFinalCloseDate entered)
   				BestAndFinalCloseDate
   			else
   				blank

   		DerivedTextStepTwoCloseDate is a ConditionalField
   			type is TimeStamp
   			if (StepTwoCloseDate entered)
   				StepTwoCloseDate
   			else
   				blank

   		DerivedCloseDate is a ConditionalField
 			type is TimeStamp
 			if (BestAndFinalCloseDate entered)
 				BestAndFinalCloseDate
 			else
 			if (StepTwoCloseDate entered)
 				StepTwoCloseDate
 			else
 				CloseDate

   		DerivedCloseDateOnly is a ConditionalField
 			type is Date
 			if (BestAndFinalCloseDate entered)
 				BestAndFinalCloseDate date
 			else
 			if (StepTwoCloseDate entered)
 				StepTwoCloseDate date
 			else
 				CloseDate date

 		DerivedProxyEmailAddressList is a DerivedField 
			type is EmailAddressField with multiple addresses
 			holds pii
			restricted
			include BuildProxyEmailAddressList
			return LocalProxyEmailAddressList

		DerivedCubeCount is a DerivedField
			type is Numeric 9
			default label is "EventCount"
			return 1

   		BidBondMessage is a MessageField
   			"ABidBondMustBeProvidedWhenResponding"


		TotalEventsBid is a ComputeField
			type is Numeric 6
			restricted
			(instance count of NoBidSourcingEventResponsesRel)

		TotalLinesBid is a ComputeField
			type is Numeric 6
			restricted
			(instance count of NoBidResponses)
			
		MissingTemplateMsg is a MessageField
			"TheTemplateCouldNotBeFound"
			
		TermsAndConditionsTemplate is a DerivedField
			type is XMLDocument
			default label is untranslatable
			restricted
			LocalUserTemplate = "SourcingEventTermsAndConditions_ST"
			if (UserTemplateRel exists)
				TermsAndConditionsTemplate = template.SourcingEventTermsAndConditions_ST document for this instance
			else
				TermsAndConditionsTemplate = MissingTemplateMsg
			return TermsAndConditionsTemplate
			
		SourcingEventTermsAndConditionsArticles is a DerivedField
			type is XMLDocument
			default label is untranslatable
			restricted
			for each SourcingEventArticlesByDisplayRel
				SourcingEventTermsAndConditionsArticles += each.ArticleTemplate
			
		TermsAndConditionsText is a DerivedField
			type is RichText
			default label is untranslatable
			return TermsAndConditionsTemplate

		DerivedEventLinkback is a MessageField
			restricted
			"<linkback(webapp is SupplyManagementSupplier navigation is SupplyPortalSummaryNav text is \"here\")>"

		DerivedEmailLink is a DerivedField
			type is Alpha size up to 1000
			restricted
			return "Click " + DerivedEventLinkback + " to review the Event."

		AttachmentName is a MessageField
			restricted
			"Event<SourcingEvent>.\pdf"

		DerivedFromEmail is a DerivedField
			type is Alpha size 100
			if (Company.EmailAddressOption.UseCompanyEmailAddress)
				return Company.EventEmailAddress
			else
				return Buyer.EmailAddress
		
		DerivedOneYearReplicationData is a DerivedField	
        	type is Boolean
            if ((current date - create date) <  360)
                return true
            else
                return false
                
	Conditions
		RecordExists
			restricted
			when (SourcingEvent exists)
		IsEvent
			restricted
			when (!Template)
		IsTemplate
			restricted
			when (Template)
		HasResponsesNotViewed
			restricted
			when (SourcingEventResponseNotViewedRel exists)
		
		HasDialogForASourcingEventExists
			when (BuyerSupplierContactMessageRel exists)
		HasLineQuestions 
			restricted
			when (LineQuestionsRel exists)
		HasLinesThatAllowAlternates 
			restricted
			when (LinesThatAllowAlternates exists)
		HasLinesWithLowestBid 
			restricted
			when (LinesWithLowestBid exists)
		HasLinesWithAddOnCharges 
			restricted 
			when (SourcingEventLineAOCRel exists)
		HasResponsesViewed
			restricted
			when (SourcingEventResponseViewedRel exists)
		ShowResponsesNotViewed
			restricted
			when (HasResponsesNotViewed
			and   Company.ShowResponsesViewed)
		ShowResponsesNotViewedAndNotSealed
			restricted
			when (HasResponsesNotViewed
			and   Company.ShowResponsesViewed
			and  !EventStillSealed)		
		HasSubmittedNoBidResponses
			restricted
			when (SubmittedNoBidResponses exists)
		LogoEntered
			restricted
			when (Company.HasReportLogo
			or    Company.SourcingGroup.HasReportLogo)
		ForSupplier
			restricted
			when (Company.ProcurementGroup = actor.agent(SupplierSourceId).SupplierGroup)
		HasMessageDialog
			restricted
			when (SupplierContactMessageRel exists)
		HasMessageDialogOther
			restricted
			when (SupplierMessageDialogRel exists)
		BeforeActive
			restricted
			when ((!InformalQuote
			and   !PreviewDate entered
			and   Status.Open
			and	  ApprovalStatus.Approved
			and   current timestamp <= OpenDate)
			or	  (!InformalQuote
			and	  PreviewDate entered
			and   Status.Open
			and	  ApprovalStatus.Approved
			and   current timestamp <= PreviewDate))
		AmendmentInApproval 
			restricted 
			when (!InformalQuote
			and	  current timestamp > OpenDate
			and   Status.Open
			and   ApprovalStatus.NeedsApproval)
		PendingOpenForList 
			restricted 
			when (BeforeActive
			or    AmendmentInApproval)
		OpenPreview
			restricted
			when (!InformalQuote
			and	  PreviewDate entered
			and   Status.Open
			and	  ApprovalStatus.Approved
			and   current timestamp >= PreviewDate
			and   current timestamp <= OpenDate)
		OpenAvailable  
			restricted
			when (Status.Open
			and	 ((ApprovalStatus.Approved
			and   current timestamp >= OpenDate
			and   current timestamp <= CloseDate)
			or 	  (InformalQuote
			and	  ApprovalStatus.Approved
			and   !AnyLinePrelimAwarded
			and   !BestAndFinalStarted
			and   !StepTwoStarted)
			or    (BestAndFinalStarted
			and    current timestamp <= BestAndFinalCloseDate)
			or    (StepTwoStarted
			and    current timestamp <= StepTwoCloseDate)))
		AvailableForBuyerResponse  
			restricted
			when ((OpenAvailable
			and   !Sealed)
			or   (Sealed
			and  !Status.Cancelled
			and  !Status.Closed
			and  ((current timestamp > CloseDate)
			or   (StepTwoStarted
			and   current timestamp > StepTwoCloseDate)
			or   (BestAndFinalStarted
			and   current timestamp > BestAndFinalCloseDate))))
		AvailableForResponseModificationRequest
			restricted
			when (!Status.Cancelled
			and  !Status.Closed
			and  ((current timestamp > CloseDate
			and  !InformalQuote
			and  !BestAndFinalOffer
			and   TwoStepBidding = 0)
			or   (StepTwoStarted
			and   current timestamp > StepTwoCloseDate)
			or   (BestAndFinalStarted
			and   current timestamp > BestAndFinalCloseDate)))			
		AvailableToEnterBuyerWeighting
			restricted
			when  (SubmittedResponsesExist
			and   !AnyLinePrelimAwarded
			and   HasBuyerWeighting
			and  (BuyerWeightingFinalDate !entered
			or    BuyerWeightingFinalDate >= current corporate date))
		PastBuyerWeightingDate
			restricted
			when (HasBuyerWeighting
			and   BuyerWeightingFinalDate entered
			and   BuyerWeightingFinalDate < current corporate date)
		SecOpenAvailable  
			restricted
			when (Status.Open
			and	 ((ApprovalStatus.Approved
			and   current timestamp >= OpenDate
			and   current timestamp <= CloseDate)
			or 	  (InformalQuote
			and	  ApprovalStatus.Approved)
			or   (BestAndFinalStarted
			and   current timestamp <= BestAndFinalCloseDate)
			or   (StepTwoStarted
			and   current timestamp <= StepTwoCloseDate)))
	
		CompanyCategoryBuyerSecurityAllowsAccess 
			restricted 
			when (IsValidForActorContext
			and   Company.SecurityGroupAllowsAccess
			and (!BuyerActorContextExists
			or    Buyer = actor.context.Buyer)	
			and  (SubCategory !entered
			or   !SubCategoryActorContextExists
			or    SubCategory = any actor.context.SubCategory)
			and  (Category !entered
			or   !CategoryActorContextExists
			or    Category = any actor.context.Category))
		
		CanRespondModifyOrWithdraw
			restricted
			when (CanRespond
			or    CanRespondBestAndFinal
			or    CanRespondTwoStep)
		CanRespond
			restricted
			when (Status.Open
			and	  ApprovalStatus.Approved
			and   NotificationStatus.Notified
			and   ((current timestamp >= OpenDate
			and   current timestamp <= CloseDate)
			or 	  (InformalQuote
			and   !AnyLinePrelimAwarded
			and   !BestAndFinalStarted
			and   !StepTwoStarted)))
		HasOpenModificationRequests
			restricted
			when (SourcingEventResponseOpenModificationRequestRel exists)
		HasModificationRequests
			restricted
			when (SourcingEventResponseModificationRequestRel exists)
		HasCanceledModificationRequests
			restricted
			when (SourcingEventResponseCanceledModificationRequestRel exists)			
		CanRespondBestAndFinal
			restricted
			when (BestAndFinalStarted
			and   current timestamp <= BestAndFinalCloseDate)
		SupplierCanRespond
			restricted
			when (CanRespond
			or   (BestAndFinalOffer
			and   CanRespondBestAndFinal))
		CanDisplayFinalStartedPanel
			restricted
			when (CanRespondBestAndFinal
			and   !SubmittedResponsesBestAndFinal exists)
		CanRespondTwoStep
			restricted
			when (StepTwoStarted
			and   current timestamp <= StepTwoCloseDate)
		CanDisplayPricingStartedPanel
			restricted
			when (CanRespondTwoStep
			and   !SubmittedResponsesAcceptedTechnical exists)
		CanDisplayBestAndFinalStepOnePanel   
			restricted
			when (StepTwoStarted
			and   BestAndFinalOffer
			and  !BestAndFinalStarted
			and   TwoStepBidding = 1)
		CanRespondFormal
			restricted
			when (Status.Open
			and	  ApprovalStatus.Approved
			and   NotificationStatus.Notified
			and   current timestamp >= OpenDate
			and   current timestamp <= CloseDate)
		CanRespondInformal
			restricted
			when  (InformalQuote
			and   Status.Open
			and	  ApprovalStatus.Approved
			and   NotificationStatus.Notified)
		DisplayRespondNowButton
			restricted
			when (CanRespond
			and   !CurrentActorResponse exists
			and   actor != "Anonymous")
	 	DisplayResponseText
			restricted
			when (CanRespond
			and   actor = "Anonymous")
		ActorNotAnonymous
			restricted
			when (actor != "Anonymous")
		DisplayEditButton
			restricted
			when (DisplayEditResponseButton
			or    DisplayEnterPricingButton
			or    DisplayEnterBestAndFinalButton)
		DisplayEditResponseButton
			restricted
			when (CanRespondModifyOrWithdraw
			and   CurrentActorResponse exists
			and   !CurrentActorIsStepTwo exists
			and   !CurrentActorIsBestAndFinal exists
			and   CurrentActorResponse.Status.Draft)
		DisplayEnterPricingButton
			restricted
			when (CanRespondModifyOrWithdraw
			and   CurrentActorResponse exists
			and   CurrentActorIsStepTwo exists
			and   !CurrentActorResponse.Status.Submitted)
		DisplayEnterBestAndFinalButton
			restricted
			when (CanRespondModifyOrWithdraw
			and   CurrentActorResponse exists
			and   CurrentActorIsBestAndFinal exists
			and   !CurrentActorResponse.Status.Submitted)
		DisplayViewResponseButton
			restricted
			when (CanRespondModifyOrWithdraw
			and   CurrentActorResponse exists
			and   CurrentActorResponse.Status.Submitted)
		DisplayResponseButton
			restricted
			when (DisplayEditResponseButton
			or    DisplayViewResponseButton
			or    DisplayEnterPricingButton
			or    DisplayEnterBestAndFinalButton)
		OpenPending
			restricted
			when(Status.Open
			and ((!InformalQuote
			and	  ApprovalStatus.Approved
			and   current timestamp >= CloseDate
			and  !BestAndFinalStarted
			and  !StepTwoStarted)
			or    (InformalQuote
			and	   AnyLinePrelimAwarded)
			or    (BestAndFinalStarted
			and    current timestamp >= BestAndFinalCloseDate)
			or    (StepTwoStarted
			and    current timestamp >= StepTwoCloseDate)))
		SecOpenPending  
			restricted
			when (!InformalQuote
			and   Status.Open
			and	  ApprovalStatus.Approved
			and   current timestamp >= CloseDate)
 		EventCanceled
 			when (Status.Cancelled)
		RecentlyFinalized
			restricted
			when ((Status.Closed
			or     Status.Cancelled)
			and    current corporate date < RecentlyFinalizedDate)
		EventHistory
			restricted
			when (((Status.Open
			and	    ApprovalStatus.Approved
			and     !NotificationStatus.NotNotified)
			or      Status.Cancelled
			or      Status.Closed)
			and     ((PreviewDate entered
			and	      current timestamp >= PreviewDate)
			or	     (OpenDate entered
			and	      current timestamp >= OpenDate)
			or	      InformalQuote)
			and      !PostingOptions.DoNotDisplayOnPortal)

		SourcingEventHasConditionalQuestions
			restricted 
			when (SourcingEventConditionalQuestionsCreatedRel exists)
		
		HasDirectConditionalQuestions 
			when (ConditionalQuestionsDirectRel exists)
		
		SourcingEventSupplierQuestionPortalExists
			restricted
			when (SourcingEventSupplierQuestionPortalRel exists)

		QuestionsExistNoSupplierQuestions
			restricted
			when (SourcingEventSupplierQuestionPortalRel !exists
			and   QuestionsExist)

		SourcingEventQuestionsExist
			restricted
			when (!AllowsConditionalQuestions
			and   QuestionsExist)

		SourcingEventSupplierQuestionsExist
			restricted
			when (AllowsConditionalQuestions
			and   QuestionsExist)

		SourcingEventLineQuestionsExist
			restricted
			when (!AllowsConditionalQuestions
			and   LineQuestionsExist)

		SourcingEventLineSupplierQuestionsExist
			restricted
			when (AllowsConditionalQuestions
			and   LineQuestionsExist)


		InQandAPeriod
			restricted
			when ((Status.Open
					and current timestamp >= QandAOpenDate
					and current timestamp <= QandACloseDate)
				or (InformalQuote
					and AllowSupplierQandA
					and !OpenPendingClosedCancelled))

		InQandAPeriodFormal
			restricted
			when (Status.Open
				and current timestamp >= QandAOpenDate
				and current timestamp <= QandACloseDate)

		InQandAPeriodInformal
			restricted
			when (InformalQuote
				and AllowSupplierQandA
				and !OpenPendingClosedCancelled)

		DisplayQandAButton
			restricted
			when (InQandAPeriod
				and SupplierLoggedIn)

		DisplayQandA
			restricted
			when (((Status.Open
						and current timestamp >= QandAOpenDate
						and !InformalQuote)
					or (Status.Open
						and InformalQuote)
					or Status.Closed
					or Status.Cancelled)
				and AllowSupplierQandA)

		InActionableState
			restricted
			when  (Status.Draft
			or	  (Status.Open
			and    ApprovalStatus.Approved
			and    !NotificationStatus.NotNotified)
			and	  (current timestamp <= CloseDate
			or	  (InformalQuote
			and    !AnyLinePrelimAwarded)))
		CanAddQuestion
			restricted
			when  (Status.Draft
			or	  (Status.Open
			and    ApprovalStatus.Approved
			and    !NotificationStatus.NotNotified)
			and	  (current timestamp <= CloseDate
			or	  (InformalQuote
			and    !AnyLinePrelimAwarded)
			or     (BestAndFinalOffer
			and    !BestAndFinalStarted)
			or     (TwoStepBiddingUsed
			and    !StepTwoStarted)))
		InEditableState
			restricted
			when (InActionableState
			and	  !SourcingEvent.NeedsApproval)
		AddOnChargesAllowed
			restricted
			when (InEditableState
			and   AllowAddOnCharge
			and  !SupplierResponsesExist)
		InInitiateAmendmentState
			restricted
			when (CreateAmendments
			and   Status.Open
			and   ApprovalStatus.Approved
			and   NotificationStatus.Notified
			and	  (current timestamp <= CloseDate
			or	   (InformalQuote
			and    !AnyLinePrelimAwarded)
			or     CanRespondTwoStep
			or     CanRespondBestAndFinal))

		SupplierQuestionLink
			restricted
			when (UnansweredQandAs exists)

		HeaderResponsesExist
			restricted
			when (SourcingEventResponseRel exists)
		NewResponseLink
			restricted
			when (ResponseLink
			or    TechnicalResponseStep1Link
			or    TechnicalResponseStep2Link
			or    BestAndFinalStep1Derived
			or    BestAndFinalResponseLink)
		SealedResponseLink
			restricted
			when (SubmittedResponses exists
			and   !BestAndFinalOffer
			and   !TwoStepBiddingUsed
			and    Sealed
			and    current timestamp < CloseDate)
		ResponseLink
			restricted
			when (SubmittedResponses exists
			and   !BestAndFinalOffer
			and   !TwoStepBiddingUsed
			and   (!Sealed
			or    (Sealed
			and    current timestamp > CloseDate)))
		ContractOnlyResponseLink
			restricted
			when (ResponseLink
			and   ContractOutputExists
			and   !HasPoLines
			and   !HasNoOutput)
		PurchaseOrderOnlyResponseLink
			restricted
			when  (ResponseLink
			and    !ContractOutputExists
			and    HasPoLines
			and    !HasNoOutput)
		NoOutputOnlyResponseLink
			restricted
			when  (ResponseLink
			and    !ContractOutputExists
			and    !HasPoLines
			and    HasNoOutput)
		MixedResponseLink
			restricted
			when (ResponseLink
			and  (HasPoLines
			and   ContractOutputExists)
			or   (HasNoOutput
			and   HasPoLines)
			or   (HasNoOutput
			and   ContractOutputExists))
		HasNoOutput
			when (NoOutputRel exists)
		TechnicalResponseStep1Link
			restricted
			when (SubmittedResponses exists
			and   TwoStepBiddingUsed
			and   !StepTwoStarted
			and   (!Sealed
			or    (Sealed
			and    current timestamp > CloseDate)))
		SealedTechnicalResponseStep1Link
			restricted
			when (SubmittedResponses exists
			and   TwoStepBiddingUsed
			and   !StepTwoStarted
			and    Sealed
			and    current timestamp < CloseDate)
		TechnicalResponseStep2Link
			restricted
			when (SubmittedResponsesAcceptedTechnical exists
			and   TwoStepBiddingUsed
			and   StepTwoStarted
			and  !BestAndFinalOffer
			and   (!Sealed
			or    (Sealed
			and    current timestamp > StepTwoCloseDate)))
		TechnicalResponseStep2LinkMixed
			restricted
			when (TechnicalResponseStep2Link
			and  ((HasPoLines
			and   ContractOutputExists)
			or    HasNoOutput))
		TechnicalResponseStep2LinkPurchaseOrder
			restricted
			when (TechnicalResponseStep2Link
			and    !ContractOutputExists
			and    HasPoLines)
		TechnicalResponseStep2LinkContract
			restricted
			when (TechnicalResponseStep2Link
			and   ContractOutputExists
			and   !HasPoLines)

		SealedTechnicalResponseStep2Link
			restricted
			when (SubmittedResponsesAcceptedTechnical exists
			and   TwoStepBiddingUsed
			and   StepTwoStarted
			and  !BestAndFinalOffer
			and   Sealed
			and   current timestamp < StepTwoCloseDate)
		BestAndFinalStep1Derived
			restricted
			when (SubmittedResponses exists
			and    BestAndFinalOffer
			and   !BestAndFinalStarted
			and  ((StepTwoStarted
			and    TwoStepBidding > 0)
			or     TwoStepBidding = 0) 
			and   (!Sealed
			or    (Sealed
			and    current timestamp > CloseDate)))
		BestAndFinalResponseStep1Link
			restricted
			when (SubmittedResponses exists
			and    BestAndFinalOffer
			and   !BestAndFinalStarted
			and   !CanDisplayBestAndFinalStepOnePanel
			and  ((StepTwoStarted
			and    TwoStepBidding > 0)
			or     TwoStepBidding = 0)
			and   (!Sealed
			or    (Sealed
			and    current timestamp > CloseDate)))
		SealedBestAndFinalResponseStep1Link
			restricted
			when (SubmittedResponses exists
			and    BestAndFinalOffer
			and   !BestAndFinalStarted
			and    Sealed
			and    current timestamp < CloseDate)
		PricingStepInProcess
			restricted
			when (SubmittedResponses exists
			and   StepTwoStarted
			and   current timestamp < StepTwoCloseDate)
		BestAndFinalResponseLink
			restricted
			when (SubmittedResponses exists
			and   BestAndFinalResponsesExist
			and   BestAndFinalStarted
			and   (!Sealed
			or    (Sealed
			and    current timestamp > BestAndFinalCloseDate)))
		ContractOnlyBestAndFinalResponseLink
			restricted
			when (BestAndFinalResponseLink
			and   ContractOutputExists
			and   !HasPoLines)
		PurchaseOrderOnlyBestAndFinalResponseLink
			restricted
			when  (BestAndFinalResponseLink
			and    !ContractOutputExists
			and    HasPoLines)
		MixedBestAndFinalResponseLink
			restricted
			when (BestAndFinalResponseLink
			and  ((HasPoLines
			and   ContractOutputExists)
			or    HasNoOutput))
		BestAndFinalInProcess
			restricted
			when (SubmittedResponses exists
			and   BestAndFinalStarted
			and   current timestamp < BestAndFinalCloseDate)
		SealedBestAndFinalResponseLink
			restricted
			when (SubmittedResponses exists
			and   BestAndFinalResponsesExist
			and   BestAndFinalStarted
			and   Sealed
			and   current timestamp < BestAndFinalCloseDate)
		EventStillSealed
			restricted
			when (Sealed
			and  ((current timestamp <= CloseDate)
			or   (BestAndFinalOffer
			and   BestAndFinalStarted
			and   current timestamp <= BestAndFinalCloseDate)
			or   (TwoStepBiddingUsed
			and   StepTwoStarted
			and   current timestamp <= StepTwoCloseDate)))
		ResponsesExistButStillSealed
			restricted
			when (EventStillSealed
			and   SubmittedResponsesExcludingNoBids exists)
		AwardedLink
			restricted
			when (AwardedLines exists)
		ShowAwardSummary
			restricted
			when (AwardedAndApprovedLines exists
			and   AwardedLineResponses exists)
		IsDraftEvent
			restricted
			when (!Template
			and   Status.Draft)
		HasBuyerEmail
			restricted
			when (Buyer.EmployeeWorkEmailAddress entered)
		NeedsApproval
			restricted
			when (Status.Open
			and   ApprovalStatus.NeedsApproval)
		HasAmendments
			restricted
			when (LastVersionNumber >= 1)
		AllCancelled
			restricted
			when (!NonCancelledLines exists)
		AllProcessed
			restricted
			when (!OpenLines exists
			and	  !OutputNotCreated exists)
		AnyLinePrelimAwarded
			restricted
			when (HeaderResponsesExist
			and   LineResponsesWithAwardsRel exists)
		AnyLinePrelimAwardedForAnyQuantity
			restricted
			when (LineAwardedForAnyQuantity exists)
		CloseDateExpired
			restricted
			when (current timestamp >= CloseDate)
		FinalAwardAvailable
			restricted
			when (OpenAwardedLines exists)
		CreateOutputAvailable
			restricted
			when (OutputNotCreatedAndApproved exists)
		InvitedSuppliers
			restricted
			when (PostingOptions.DisplayForNotifiedSuppliersOnly
			and   NotifiedSupplierLoggedIn exists)
		HasAwardWorkunit
			restricted
			when (PfiAwardWorkunitRel exists)
		HasWorkunit
			restricted
			when (PfiWorkunitRel exists)
		ActorResponse
			restricted
			when (CurrentActorResponse exists)
		ContactsExist
			restricted
			when (SourcingEventContact set exists)
		MeetingsExist
			restricted
			when (SourcingEventMeeting set exists)
		SomeQuestionsExist
			when (QuestionsExist
			or    LineQuestionsExist)
		QuestionsExist
			when (SourcingEventQuestionByDisplayRel exists)
		LineQuestionsExist
			restricted
			when (SourcingEventLineQuestionRel exists)
		TermsExist
			when (SourcingEventArticle set exists)
		AttachmentsExist
			when (SourcingEventAttachment set exists)
		ContractOutput
			restricted
			when (OutputType.Contract
			or	  OutputType.Blanket
			or 	  OutputType.CatalogQuote
			or    OutputType.Standing
			or    OutputType.Service
			or   (OutputType.NoOutput
			and   FromContract))
		NonServiceContractOutput
			restricted
			when (OutputType.Contract
			or    OutputType.Blanket
			or    OutputType.CatalogQuote
			or    OutputType.Standing)
		Standing
			restricted
			when (OutputType.Standing)
		EffectiveDateValid
			restricted
			when (ContractOutput)
		ReqLineQuestions
			restricted
			when (RequiredLineQuestions exists)
		ContractOutputExists
			restricted
			when (LinesWithContractOutput exists)
		EventExists
			restricted
			when (SourcingEvent entered)
		CommentsExist
			restricted
			when (SourcingEventComment set exists)
		LineCommentsExist 
			restricted 
			when (SourcingEventLineCommentsRel exists)
		SupplierCommentsExist
			restricted
			when (SupplierSourcingEventCommentsRel exists)
		SupplierAttachmentsExist
			restricted
			when (SupplierSourcingEventAttachmentsRel exists)
		CommoditiesExist
			restricted
			when (SourcingEventCommodities set exists)
		YellowAlertCond
			restricted
			when ((CloseDate entered
			and    YellowAlert != 0
			and    current corporate date >= YellowAlertDate
			and    YellowAlertDate <= RedAlertDate
			and    CanRespond)
			or    (CloseDate entered
			and    YellowAlert != 0
			and    current corporate date >= YellowAlertDate
			and    YellowAlertDate <= RedAlertDate
			and    OpenAvailable
			and    NotificationStatus.Amended))

		RedAlertCond
			restricted
			when ((CloseDate entered
			and    RedAlert != 0
			and    current corporate date >= RedAlertDate
			and    RedAlertDate <= CloseDate
			and    CanRespond)
			or    (CloseDate entered
			and    RedAlert != 0
			and    current corporate date >= RedAlertDate
			and    RedAlertDate <= CloseDate
			and    OpenAvailable
			and    NotificationStatus.Amended))
		RedOrYellowAlert
			restricted
			when (RedAlertCond
			or    YellowAlertCond)
		ShowNotifiedSupplierAlert
			restricted
			when (NotAllNotifiedSuppliersResponded)
		ShowYellowAlert
			restricted
			when ((YellowAlertCond
			and   (NumberOfResponses = 0
			or    BidCheck)))
		ShowRedAlert
			restricted
			when (RedAlertCond
			and   (NumberOfResponses = 0
			or    BidCheck))
		SoleSourceEvent
			when (NumberOfResponses = 1)
		BidCheck
			restricted
			when (all SubmittedResponses.NoBid
			or    all SubmittedResponses.NoBidCheck)
		FinalizedDateEntered
			restricted
			when (FinalizedDate entered)
		DisplayNoBid
			restricted
			when (CanRespond
			and   !SubmittedResponseForCurrentActor exists
			and   !actor.agent(SupplierSourceId).SupplierGroup.RequireNoBidReason)
		DisplayNoBidReason
			restricted
			when (CanRespond
			and   !SubmittedResponseForCurrentActor exists
			and   actor.agent(SupplierSourceId).SupplierGroup.RequireNoBidReason)
		WeightingsTotal
			restricted
			when (TotalWeightingByEvent = 100%)
		LineWeightingsTotal
			restricted
			when (TotalLineWeighting = 100%)
		LineWeightingsEntered
			restricted
			when (TotalLineWeighting != 0)
		WeightingEnteredForEvent
			restricted
			when (TotalWeightingByEvent > 0)
		EventUsingScoring 
			restricted 
			when (WeightingEnteredForEvent
			or    LineWeightingsEntered)
		OpenWithDates
			restricted
			when (Status.Open
			and	  ApprovalStatus.Approved
			and   current timestamp >= OpenDate
			and   current timestamp <= CloseDate)
		LowestBidCond
			restricted
			when (LowestBidOption.LessThanLowestBid
			or    LowestBidOption.LessThanOrEqualToLowestBid)
		HasPoLines
			restricted
			when (POLines exists)
		HasPoLinesOrNoOutput
			restricted
			when (HasPoLines
			or    HasNoOutput)
		NotAllNotifiedSuppliersResponded
			restricted
			when (SourcingEventNotification set exists
			and   SubmittedResponses exists
			and  !Sealed
			and   NumberOfSupplierNotifications != NumberOfNotifiedSuppliersWhoHaveResponded)
		HasCancelledLineQuantity
			restricted
			when (CancelledQuantityRel exists)
		QandAAnswered
			restricted
			when (AnsweredQandA exists)
		QandAUnanswered
			restricted
			when (UnansweredQandAs exists)
		SupplierResponsesExist
			restricted
			when (SourcingEventLineResponseRel exists)

		RespondedButNotNotifiedExist
			restricted
			when (RespondedButNotNotifiedRel exists
	 		and   SourcingEventNotification set exists)
		NoSubmittedResponses
			restricted
			when (!SubmittedResponses exist
			and    CanRespond)
		HasSubmittedResponses
			when (SubmittedResponses exist)
		DefaultsEntered
			restricted
			when (DefaultContractType 		entered
			or    DefaultContractClass 		entered
			or    DefaultEffectiveDate      entered
			or    DefaultExpirationDate     entered
			or    DefaultScheduleFrequency  entered
			or    DefaultMaxReleaseNumber   entered
			or    DefaultParticipant        entered)
		SupplierMatches
			restricted
			when (!Supplier entered
			or   (Supplier entered
			and   SupplierResponsesRel exists))
		EventSearchFilter
			restricted
			when ((!Item entered
			and	   !Contract entered
			and    !Requisition entered)
			or    (Item entered
			and    !Contract entered
			and	   !Requisition entered
			and    ItemSearchRel exists)
			or	  (Contract entered
			and    !Item entered
			and	   !Requisition entered
			and    ContractSearchRel exists)
			or	  (Requisition entered
			and    !Item entered
			and	   !Contract entered
			and    RequisitionSearchRel exists)
			or    (Item entered
			and    Contract entered
			and	   ItemSearchRel exists
			and    ContractSearchRel exists)
			or    (Item entered
			and    Requisition entered
			and	   ItemSearchRel exists
			and    RequisitionSearchRel exists)
			or    (Contract entered
			and	   Requisition entered
			and    ContractSearchRel exists
			and	   RequisitionSearchRel exists)
			or 	  (Item entered
			and    Contract entered
			and    Requisition entered
			and	   ItemSearchRel exists
			and    ContractSearchRel exists
			and    RequisitionSearchRel exists))

		IsValidForActorContext	
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)
		SourcingEventLinesExist
			restricted
			when (SourcingEventLine set exists)
		InProcessStatus
			restricted
			when (Status.Draft
 			or	  Status.Open)
		ProcessedLinesExist
			restricted
			when (NonOpenLines exists)
		OpenLinesExist
			restricted
			when (OpenLines exists)
		LinesPartiallyProcessed
			restricted
			when (NonOpenLines exists
			and	  OpenLines exists)
		OpenPendingClosedCancelled
			restricted
			when (OpenPending
			or    Status.Closed
			or    Status.Cancelled)
		ClosedOrCancelled
			restricted
			when (Status.Closed
			or    Status.Cancelled)
		ClosedOrCancelledOrSuspended
			restricted
			when (ClosedOrCancelled
			or    Status.Suspended)
		DisplayBidTabulationReport
			restricted
			when (((DisplayBidTabulation.DisplayWhenEventAwardedAndClosed
			or    DisplayBidTabulation.DisplayWhenEventClosedForBidding
			or    DisplayBidTabulation.DisplayWhenEventClosedForBiddingOrCanceled
			or    DisplayBidTabulation.DisplayWhenEventAwardedAndClosedOrCanceled)
			and   Status.Closed)
			or   ((DisplayBidTabulation.DisplayWhenEventClosedForBidding
			or     DisplayBidTabulation.DisplayWhenEventClosedForBiddingOrCanceled)
			and   CloseDateExpired
			and   CloseDate entered
			and   SubmittedResponsesExist)
			or   ((DisplayBidTabulation.DisplayWhenEventClosedForBiddingOrCanceled
			or    DisplayBidTabulation.DisplayWhenEventAwardedAndClosedOrCanceled)
			and   Status.Cancelled
			and   SubmittedResponsesExist))
		SubmittedResponsesExist
			restricted
			when (SubmittedResponses exists)
		UsingEstimatedTotal
			restricted
			when (EstimatedTotal entered)
		HasPerUnitEstimateLines
			restricted
			when (PerUnitEstimateRel exists)
		HasPerUnitEstimateLineAOCs
			restricted
			when (PerUnitEstimateAOCRel exists)
		SupplierLoggedIn
			restricted
			when (actor.agent(SupplierSourceId).SupplierSourceId exists)
		AddMeToPlanHoldersListValid
			restricted
			when (DisplayPlanHoldersList
			and	  SupplierLoggedIn
			and	  SourcingEvent.InActionableState
			and	  !CurrentSupplierPlanHolderRel exists)
		RemoveMeFromPlanHoldersListValid
			restricted
			when (DisplayPlanHoldersList
			and	  SourcingEvent.InActionableState
			and	  CurrentSupplierPlanHolderRel exists)
		UsingPlanHoldersList
			restricted
			when (DisplayPlanHoldersList)
		HasBuyerWeighting
			restricted
			when (EventBuyerWeightingRel exists)
		HasWeightingBuyer
			restricted
			when (WeightingBuyerRel exists)
		ResponsesNeedBuyerScoring
			restricted
			when (TotalBuyerWeighting entered
			and   SubmittedResponsesNeedingBuyerScore exists)
		FromRequisition
			restricted
			when (RequisitionSourceRel exists)
		FromContract
			restricted
			when (ContractSourceRel exists)
		BuyerActorContextExists
			restricted
			when (ActorContextBuyerRel exists)
		CategoryActorContextExists
			restricted
			when (ActorContextCategoryRel exists)
		ContextPropertyCategoryRelExists
			when (ContextPropertyCategoryRel exists)
		SubCategoryActorContextExists
			restricted
			when (ActorContextSubCategoryRel exists)
		DisplayOnPortal
			restricted
			when (PostingOptions !=3)
		AmendmentsAllowed
			restricted
			when  (PostingOptions !=3
			and    CreateAmendments
			and   (Company.CreateAmendedMessage
			or     Company.SendAmendedEmail))
		NotClosedNotSealed
			restricted
			when (!SourcingEvent.Status.Closed
			and  (!Sealed
			or    current timestamp > CloseDate))
		UseCompanyLogo
			restricted
			when (Company.HasReportLogo)
		UseGroupLogo
			restricted
			when (!Company.HasReportLogo
			and    Company.SourcingGroup.HasReportLogo)
		UnsubmittedResponses
			restricted
			when (UnsubmittedStandardResponsesRel exists
			or    UnsubmittedBestAndFinalResponsesRel exists
			or    UnsubmittedTwoStepResponsesRel exists)
		UnsubmittedCombinedResponses 
			restricted 
			when (UnsubmittedCombinedResponsesRel exists)
		BestAndFinalResponsesExist
			restricted
			when (BestAndFinalResponsesRel exists)
		BestAndFinalNeedToStart
			restricted
			when (BestAndFinalOffer
			and   BestAndFinalResponsesExist
			and  !BestAndFinalStarted)
		TwoStepBiddingUsed
			when (TwoStepBidding > 0)
		NeedToStartPricingProcess
			restricted
			when (TwoStepBiddingUsed
			and   !StepTwoStarted)
		CanSelectBestAndFinal
			restricted
			when  (BestAndFinalOffer
			and   !BestAndFinalStarted)
		StepTwoNeedToStart
			restricted
			when  (NeedToStartPricingProcess
			and    ResponsesSelectedForStepTwo exists)
		StepTwoInProcess
			restricted
			when  (BestAndFinalStarted
			or     StepTwoStarted)
		BestAndFinalFromTwoStep
			restricted
			when  (BestAndFinalOffer
			and   !BestAndFinalStarted
			and   !StepTwoStarted
			and   !NeedToStartPricingProcess 
			and    TwoStepBiddingUsed
			and    SubmittedResponsesNotTechnical exists)
		BestAndFinalForSupplier
			restricted
			when  (BestAndFinalStarted
			and    CurrentActorIsBestAndFinal exists)
		StepTwoForSupplier
			restricted
			when  (StepTwoStarted
			and    CurrentActorIsStepTwo exists)
		TechnicalProposalsOnly
			restricted
			when  (TwoStepBidding = 1
			and   !StepTwoStarted)
		NotBestAndFinalNotTwoStep
			restricted
			when (!BestAndFinalOffer
			and   TwoStepBidding = 0)
		NotBestAndFinal
			restricted
			when (!BestAndFinalOffer)
		NotTwoStep
			restricted
			when (TwoStepBidding = 0)
		HasQuestionsWithWeighting
			restricted
			when (QuestionsWithWeighting exists)
		WeightingBuyerForEventBuyerExists
			restricted
			when (WeightingBuyerForBuyerRel exists)
		RespondersHaveVendorLocations
			restricted
			when (SubmittedResponsesWithVendorLocations exists)
		RespondersHavePerformanceEvaluations
			restricted
			when (SubmittedResponsesWithPerformanceEvaluations exists)
		RespondersHaveAttachments
			restricted
			when (SubmittedResponsesWithAttachments exists)
		HasQuestionWithRequiredAttachment
			restricted
			when (QuestionWithRequiredAttachment exists)
		HasLineQuestionWithRequiredAttachment
			restricted
			when (LineQuestionWithRequiredAttachment exists)
		CanSendWeightingEmail
			restricted
			when (!AllProcessed
			and   HasWeightingBuyer
			and   SupplierResponsesExist)
		PortalPostingOptions
			restricted
			when (PostingOptions = 1
			or    PostingOptions = 2)
		UseWizardTerms
			restricted
			when (Company.WizardForTerms = true)
		UseWizardMeetings
			restricted
			when (Company.WizardForMeetings = true)
		UseWizardWeighting
			restricted
			when (Company.WizardForWeighting = true)
		UseWizardAttachments
			restricted
			when (Company.WizardForAttachments = true)
		UseWizardContacts
			restricted
			when (Company.WizardForContacts = true)
		UseWizardQuestions
			restricted
			when (Company.WizardForQuestions = true)
		HasEventReference
			restricted
			when (EventReference entered)
		CompleteNotSubmitted
			restricted
			when (!EventResponsesRel.Status.Submitted
			and	  not EventResponsesRel.RequirementsNotSatisfied)


		QAndAExists 
			restricted
			when (SourcingEventQandARel exists)
		
		IncludeEventContacts
			restricted
			when (SupplyManagementReportContext.IncludeEventContacts)

		IncludeEventTerms
			restricted
			when (SupplyManagementReportContext.IncludeEventTerms)

		IncludeQuestionsAndResponses
			restricted
			when (SupplyManagementReportContext.IncludeQuestionsAndResponses)

		IncludeQandA
			restricted
			when (SupplyManagementReportContext.IncludeQandA)

		IncludeSupplierContact	
			restricted
			when (SupplyManagementReportContext.IncludeSupplierContact)

		HasResponsesWithBids
			restricted
			when (SubmittedResponsesNotNoBid exists)

		IncludeResponseDetails
			restricted
			when (SupplyManagementReportContext.IncludeResponseDetails)
		IsApprovedStatus
			when (ApprovalStatus.Approved)

		UseBidTabulation
			restricted
			when (SupplierGroupRel.UseBidTabulationReport = true)
		CloseDateEntered
			restricted
			when (CloseDate entered)

		HasMissingScores
			restricted
			when (WeightingBuyerMissingScoresRel exists)

		HasAnswers
			when (SourcingEventQuestionResponseRel exists
			or    SourcingEventLineQuestionResponseRel exists)

		HeaderResponsesAllExist
			when (SEResponsesExists exists)

		HeaderAOCExists
			restricted
			when (SourcingEventHeaderAOCRel exists)


		BuyerRequired	
			restricted
			when (SourcingEvent exists
			and Status.Draft)
		DeliveryWeightingRequired
			restricted
			when (!WeightingCriteria.PriceWeighting entered
			and TotalLineWeighting > 0)
		DescriptionAndSourcingEventTypeRequired	
			restricted
			when ((SourcingEvent exists
				and Status.Draft)
			or (Status.Open
				and IsEvent))
		DisplayLowestBidAmountRequired
			restricted
			when (LowestBidCond
			and SourcingEvent exists
			and (Status.Draft
				or (Status.Open
					and (NotificationStatus.Notified
						or NotificationStatus.Amended))))
		DisputeCloseDateRequired
			restricted
			when (Company.DisputePeriod
			and ((Status.Draft
					and SourcingEvent exists
					and !InformalQuote)
				or (Status.Open
					and IsEvent)))
		IncompleteBuyerScoringEditRequired
			restricted
			when (TotalBuyerWeighting != 0)
		OpenCloseDateRequired
			restricted
			when (!InformalQuote
			and ((SourcingEvent exists
					and Status.Draft)
				or (Status.Open
					and IsEvent)))
		PriceWeightingRequired
			restricted
			when (WeightingCriteria.DeliveryWeighting changed
			and !WeightingCriteria.DeliveryWeighting entered
			and TotalLineWeighting > 0)
		QandACloseDateRequired
			restricted
			when (AllowSupplierQandA
			and ((!InformalQuote
					and (SourcingEvent exists
						and Status.Draft))
				or (Status.Open
					and IsEvent
					and CloseDate entered)))
		QandAOpenDateRequired
			restricted
			when (AllowSupplierQandA
			and ((!InformalQuote
					and (SourcingEvent exists
						and Status.Draft))
				or (Status.Open
					and IsEvent
					and OpenDate entered)))

		SourcingEventQandASetExists
			restricted
			when (SourcingEventQandA set exists)
		
		IsOpen
			restricted
			when (Status.Open)
			
	Form Invokes
		CreateDraftSourcingEventResponse
			if (actor = "Anonymous")
				invoke SupplierCreate Supplier
					invoked.SupplierGroup = session.key.SupplierGroup
					invoked.EventCompany  = Company
					invoked.EventToCreate = SourcingEvent
			else
				if (CurrentActorResponse exists
				and CurrentActorResponse.Status.Draft)
					invoke Update Draft CurrentActorResponse
				else
				if (CurrentActorResponse.Status.Withdrawn)
					invoke Update Withdrawn CurrentActorResponse
				else
				if (CurrentActorResponse.Status.Submitted)
					invoke Update Submitted CurrentActorResponse
				else
					invoke Create Draft SourcingEventResponse(SourcingEvent) set
						invoked.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
						invoked.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
						invoked.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId

		SupplierCreateDraftSourcingEventQandA
			invoke SupplierCreate Unanswered SourcingEventQandA set
				invoked.Supplier			= actor.agent(SupplierSourceId).Supplier
				invoked.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
		
	Matrix Forms
		CompareResponsesForNewPO
			rows are  SourcingEventLine set
			column is SourcingEventResponse
			cell is   SourcingEventLineResponse

		CompareResponsesAppendToPO
			rows are  SourcingEventLine set
			column is SourcingEventResponse
			cell is   SourcingEventLineResponse

		CompareResponsesForNewContract
			rows are  SourcingEventLine set
			column is SourcingEventResponse
			cell is   SourcingEventLineResponse

		CompareResponsesAppendToContract
			rows are  SourcingEventLine set
			column is SourcingEventResponse
			cell is   SourcingEventLineResponse

	Relations

		EventNotificationRel
        	one-to-one relation to SourcingEventNotification
        	Field Mapping uses part of key
        		related.Company          					= Company
        		related.SourcingEvent    					= SourcingEvent
        		related.NotifiedSupplier.SupplierGroup 		= LocalSupplierGroup
				related.NotifiedSupplier.Supplier       	= LocalNotifiedSupplierNumber 
				related.NotifiedSupplier.SupplierSourceId	= LocalNotifiedSupplierSourceId

		EventPlanHolderRel
        	one-to-one relation to SourcingEventPlanHolder
        	Field Mapping uses part of key
        		related.Company          					= Company
        		related.SourcingEvent    					= SourcingEvent
       			related.NotifiedSupplier.SupplierGroup 		= LocalSupplierGroup
				related.NotifiedSupplier.Supplier       	= LocalNotifiedSupplierNumber 
				related.NotifiedSupplier.SupplierSourceId	= LocalNotifiedSupplierSourceId
		SourcingEventLinesRel is a SourcingEventLine set
			Instance Selection
				where ((related.Company = SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingCompany
				or SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingCompany not entered)
				and (related.SourcingEvent = SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent
				or SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEvent not entered)
				and (related.SourcingEventLine = SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEventLine
				or SupplyManagementReportContext.SupplyManagementReportSourcingGroupField.SourcingEventLine not entered))

		BuyerSupplierContactMessageRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses BySourcingEvent
				related.OriginatingCompany			= Company
				related.OriginatingEvent			= SourcingEvent
		SubmittedResponses
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Submitted)

		SubmittedResponsesForBidTabulation 
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Submitted
				and    DisplayBidTabulationReport)		

		SubmittedResponsesNotNoBid
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Submitted
				and   !related.NoBid)

		SubmittedResponsesWithVendorLocations
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Submitted
				and    related.NotifiedSupplier.SupplierSourceId.VendorLocationEntered)

		SubmittedResponsesWithPerformanceEvaluations
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Submitted
				and    related.NotifiedSupplier.Supplier.HasCurrentSupplierPerformanceEvaluation)

		SubmittedResponsesWithAttachments
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Submitted
				and    related.AttachmentsExist)

		SubmittedResponsesConsiderForScoring
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Submitted
				and    related.ConsiderForScoring)

		UnsubmittedStandardResponsesRel
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Draft
				and    !SourcingEvent.BestAndFinalOffer
				and    !SourcingEvent.TwoStepBidding.Combined
				and    !SourcingEvent.TwoStepBidding.Separate
				and     current timestamp <= CloseDate)

		UnsubmittedTwoStepResponsesRel
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Draft
				and	  ((SourcingEvent.StepTwoStarted
				and    related.TechnicalProposalAccepted
				and    current timestamp <= StepTwoCloseDate)
				or    (!SourcingEvent.StepTwoStarted
				and    current timestamp <= CloseDate))
				and    SourcingEvent.TwoStepBidding.Combined
				or     SourcingEvent.TwoStepBidding.Separate)

		UnsubmittedBestAndFinalResponsesRel
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Draft
				and	  ((SourcingEvent.BestAndFinalStarted
				and    related.BestAndFinalSupplier
				and    current timestamp <= BestAndFinalCloseDate)
				or    (!SourcingEvent.BestAndFinalStarted
				and    current timestamp <= CloseDate))
				and    SourcingEvent.BestAndFinalOffer)

		UnsubmittedCombinedResponsesRel 
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent	
			Instance Selection
				where (related.Status.Draft
				and   (!SourcingEvent.BestAndFinalOffer
				and    !SourcingEvent.TwoStepBidding.Combined
				and    !SourcingEvent.TwoStepBidding.Separate
				and     current timestamp <= CloseDate)
				or     (SourcingEvent.BestAndFinalStarted
				and     related.BestAndFinalSupplier
				and     current timestamp <= BestAndFinalCloseDate)
				or    (!SourcingEvent.BestAndFinalStarted
				and    current timestamp <= CloseDate
				and    SourcingEvent.BestAndFinalOffer)	
				or    (SourcingEvent.StepTwoStarted
				and    related.TechnicalProposalAccepted
				and    current timestamp <= StepTwoCloseDate)
				or    (!SourcingEvent.StepTwoStarted
				and    current timestamp <= CloseDate
				and   (SourcingEvent.TwoStepBidding.Combined
				or     SourcingEvent.TwoStepBidding.Separate)))				
		SupplierContactMessageRel
			one-to-many relation to SupplierContactMessage
			Field Mapping uses symbolic key
				related.SupplierGroup				= actor.agent(SupplierSourceId).SupplierGroup
 				related.Supplier  			 		= actor.agent(SupplierSourceId).Supplier
				related.SupplierSourceId            = actor.agent(SupplierSourceId).SupplierSourceId
			Instance Selection
				where (related.OriginatingCompany			= Company
				and    related.OriginatingEvent             = SourcingEvent)

		SupplierMessageDialogRel
			one-to-many relation to SupplierMessageDialog
			Field Mapping uses symbolic key
				related.SupplierGroup				= SupplierGroupRel.SupplierGroup


			Instance Selection
				where (related.SupplierContactMessage.OriginatingCompany	= Company
				and    related.SupplierContactMessage.OriginatingEvent 		= SourcingEvent)				

		ResponsesSelectedForStepTwo
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.TechnicalProposalAccepted)

		ResponsesNotSelectedForStepTwo
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (!related.TechnicalProposalAccepted
				and     related.Status.Submitted)

		SubmittedResponsesNotTechnical
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Submitted
				and    related.TwoStepBiddingStepTwoOrNoTwoStep)

		SubmittedResponsesAcceptedTechnical
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.TechnicalProposalAccepted
				and    related.Status.Submitted)

		SubmittedResponsesLessTechnicalNo  
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.Status.Submitted
				and   (related.TechnicalProposalAccepted
				or    (!related.TechnicalProposalAccepted
				and    !TwoStepBiddingUsed)))

		SourcingEventConditionalQuestionsCreatedRel 
			one-to-many relation to SourcingEventQuestion 
			Field Mapping uses symbolic key 
				related.Company								= Company
				related.SourcingEvent						= SourcingEvent
			Instance Selection 
				where (related.CreatedFromQuestionEntered)				

		ConditionalQuestionsDirectRel 
			one-to-many relation to ConditionalQuestion 
			Field Mapping uses symbolic key 
				related.ProcurementGroup = Company.SourcingGroup 
				related.Question         = LocalQuestion 		
		
		QuestionRel 
			one-to-one relation to Question 
			Field Mapping uses symbolic key 
				related.ProcurementGroup = Company.SourcingGroup 
				related.Question         = LocalQuestion 		
		
		SourcingEventSupplierQuestionPortalRel
            one-to-many relation to SourcingEventSupplierQuestion 
            Field Mapping uses symbolic key
 				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
	 			related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
	 			related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
            	related.Company								= Company
            	related.SourcingEvent						= SourcingEvent

		ResponsesAcceptedTechnicalSendEmail
			one-to-many relation using ResponsesSelectedForStepTwo
			Instance Selection
				where (related.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)

		SourcingEventResponseOpenModificationRequestRel  
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.HasCurrentModificationRequests)			

		SourcingEventResponseModificationRequestRel  
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvents
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.HasModificationRequests)

		SourcingEventResponseCanceledModificationRequestRel  
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.HasCanceledModificationRequests)	

		SubmittedResponsesPricingStep
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (TwoStepBidding > 0
				and    related.Status.Submitted)

		ResponsesSelectedForBestAndFinal
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (BestAndFinalOffer
				and    related.BestAndFinalSupplier)

		SubmittedResponsesBestAndFinal
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (BestAndFinalOffer
				and    related.Status.Submitted
				and    related.BestAndFinalSupplier)

		ResponsesBestAndFinalSendEmail
			one-to-many relation using ResponsesSelectedForBestAndFinal
			Instance Selection
				where (related.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)

		SubmittedResponsesBestAndFinalNo
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (BestAndFinalOffer
				and    related.Status.Submitted
				and    !related.BestAndFinalSupplier)

		ResponsesToEmail
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company			= Company
				related.SourcingEvent	= SourcingEvent
			Instance Selection
				where (related.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)

		PfiWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "SOURCINGEVENT"
				related.AppsValue	= DerivedAppsValue

		PfiAwardWorkunitRel
			one-to-many relation to PfiWorkunit
			Field Mapping uses ByAppsKeyAppsValueWorkunit
				related.AppsKey		= "SOURCINGEVENT"
				related.AppsValue   = DerivedAwardAppsValue

		SourcingEventWeightingBuyerRel
			one-to-many relation to SourcingEventWeightingBuyer
			delete cascades
			Field Mapping uses symbolic key
				related.Company       = Company
				related.SourcingEvent = SourcingEvent

		WeightingBuyerMissingScoresRel
			one-to-many relation to SourcingEventWeightingBuyer
			delete cascades
			Field Mapping uses symbolic key
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.MissingScores = true)

		WeightingBuyerForBuyerRel
			one-to-many relation to SourcingEventWeightingBuyer
			Field Mapping uses ByEmployee
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
				related.Employee      = Buyer

		SourcingEventResponseRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent

		SourcingEventResponseForEventResponseListingRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEventAndSupplier	
				related.Company       = Company
				related.SourcingEvent = SourcingEvent

		SourcingEventResponseAnalysisRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvents
				related.Company       = Company
				related.SourcingEvent = SourcingEvent

		SourcingEventResponseViewedRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvents
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.ResponseViewed)
				
		SourcingEventResponseNotViewedRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvents
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (!related.ResponseViewed
				and     related.Status.Submitted
				and    !related.NoBid)				

		SourcingEventResponseNoStepTwoRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvents
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (!related.TechnicalProposalAccepted
				and    !related.BestAndFinalSupplier)

		NoBidSourcingEventResponsesRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.NoBid)

		SubmittedResponsesExcludingNoBids
			one-to-many relation using SubmittedResponses
 			Instance Selection
 				where (!related.NoBid)

		SubmittedResponsesNeedingBuyerScore
			one-to-many relation using SubmittedResponses
 			Instance Selection
 				where (related.BuyerScoreIncomplete
 				and    !related.NoBid)

		AwardedResponses
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.SupplierAwardedLines)

		CreatedResponsesExcludingNoBidsAndNoNotifications
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (!related.NoBid
				and     related.RespondedButNotNotified)

		LineResponsesWithAwardsRel 
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses symbolic key
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.IsAwardedUpdate)
		
		NoBidResponses
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses symbolic key
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.ResponseAmount.NoBid)

		SubmittedNoBidResponses
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses symbolic key
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.ResponseAmount.NoBid
				and    related.Status.Submitted)

		SourcingEventLineResponseRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses symbolic key
				related.Company       = Company
				related.SourcingEvent = SourcingEvent

		SourcingEventLineResponseBySupplierRel
			one-to-many relation to SourcingEventLineResponse
			Field Mapping uses symbolic key
	 			related.Company            					= Company
	 			related.SourcingEvent      					= SourcingEvent
	 		Instance Selection
				where	(related.NotifiedSupplier.SupplierGroup  	= actor.agent(SupplierSourceId).SupplierGroup
				and		 related.NotifiedSupplier.Supplier           = actor.agent(SupplierSourceId).Supplier
				and		 related.NotifiedSupplier.SupplierSourceId   = actor.agent(SupplierSourceId).SupplierSourceId)

		BlankNonAwardReasonsNotSelectedStepTwo is a SourcingEventLineResponse set
			Instance Selection
				where (!related.AwardReason entered
				and	   related.Status.Submitted
				and   !related.NoBid
				and    !related.SourcingEventResponse.TechnicalProposalAccepted)

		BlankNonAwardReasonsNotSelectedBestAndFinal is a SourcingEventLineResponse set
			Instance Selection
				where (!related.AwardReason entered
				and	   related.Status.Submitted
				and   !related.NoBid
				and    !related.SourcingEventResponse.BestAndFinalSupplier)

		AwardedLineResponses is a SourcingEventLineResponse set
			Instance Selection
				where  ((related.IsAwarded
				and      related.NotifiedSupplier.SupplierGroup.AllowNonAwardedView)		
				or      (related.IsAwarded
				and     !related.NotifiedSupplier.SupplierGroup.AllowNonAwardedView		
				and      related.NotifiedSupplier.SupplierGroup    = actor.agent(SupplierSourceId).SupplierGroup
				and      related.NotifiedSupplier.Supplier         = actor.agent(SupplierSourceId).Supplier
		 		and      related.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId))

		UnansweredQandAs is a SourcingEventQandA set
			Instance Selection
				where (related.Status.Unanswered)

		AnsweredQandA is a SourcingEventQandA set
			Instance Selection
				where (related.Status.Answered)

		ReqCommentRel
			one-to-many relation to SourcingEventLineSource
			Field Mapping uses symbolic key
				related.Company						= Company
				related.SourcingEvent 				= SourcingEvent
			Instance Selection
				where (related.Requisitions)

		UnenteredCommodities is a SourcingEventLine set
			Instance Selection
				where (!related.CommodityCode entered)

		BestAndFinalResponsesRel is a SourcingEventResponse set
			Instance Selection
				where (related.Status.Submitted
				and    related.BestAndFinalSupplier)

		SourcingQuestionsRel
			one-to-many relation to Question
			Field Mapping uses symbolic key
				related.ProcurementGroup	= Company.SourcingGroup
			Instance Selection
				where (related.Question.Active
				and	   !related.IsListQuestionWithoutAnswers
				and	   !related.NoCorrectAnswerDefined)

		EmployeeRel
			one-to-many relation to Employee
			Field Mapping uses symbolic key
				related.HROrganization     = Company.FinanceEnterpriseGroup.HROrganization

		TermAndConditionRel
			one-to-many relation to TermAndCondition
			Field Mapping uses symbolic key
				related.ProcurementGroup = Company.SourcingGroup

		TermAndConditionDisplayRel
			one-to-many relation to TermAndCondition
			Field Mapping uses ByDisplayOrder
				related.ProcurementGroup = Company.SourcingGroup

		SupplierContactsRel
			one-to-many relation to SupplierSourceId
			Field Mapping uses symbolic key
				related.SupplierGroup = Company.SourcingGroup
			Instance Selection 
				where (related.Active)
		PlanHoldersListRel is a SourcingEventPlanHolder set

		CommodityCodeRel
			one-to-many relation to CommodityCode
			Field Mapping uses symbolic key
				related.ItemGroup = Company.SourcingGroup

		RespondedButNotNotified
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvents
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.RespondedButNotNotified
				and	   related.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)

		RespondedButNotNotifiedRel
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.RespondedButNotNotified)

		AllRespondedButNotNotified
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.RespondedButNotNotified)

		RespondedButNotNotifiedProxy
			one-to-many relation to SourcingEventResponse
			delete restricted
			Field Mapping uses ByEvent
				related.Company       = Company
				related.SourcingEvent = SourcingEvent
			Instance Selection
				where (related.RespondedButNotNotified)

		OpenLines is a SourcingEventLine set
			Instance Selection
				where (related.Status.Open)

		NonOpenLines is a SourcingEventLine set
			Instance Selection
				where (!related.Status.Open)

		OpenAwardedLines is a SourcingEventLine set
			Instance Selection
				where (related.FinalAwardValid)

		AwardedLines is a SourcingEventLine set
			Instance Selection
				where (related.Status.Awarded)

		PrelimAwardedLines is a SourcingEventLine set
			Instance Selection
				where (related.LineAwarded
				or     related.SomeContractAwardExists)

		LineAwardedForAnyQuantity is a SourcingEventLine set
			Instance Selection
				where (related.TotalAwardQuantity > 0
				or     related.SomeContractAwardExists)

		NonCancelledLines is a SourcingEventLine set
			Instance Selection
				where (!related.Status.Cancelled)

		LinesWithContractOutput is a SourcingEventLine set
			Instance Selection
				where (related.ContractOutput)

		NoOutputRel is a SourcingEventLine set
			Instance Selection
				where (related.OutputType.NoOutput)

		RequiredLineQuestions is a SourcingEventLine set
			Instance Selection
				where (related.LineReqQuestions)

		POLines	is a SourcingEventLine set
			Instance Selection
				where (related.OutputType.PO)

		POLinesWithNoRequestedDeliveryDate is a SourcingEventLine set
			Instance Selection
				where (related.OutputType.PO
				and	   !related.RequestedDeliveryDate entered)

		LinesWithOldRequestedDeliveryDate is a SourcingEventLine set
			Instance Selection
				where (related.RequestedDeliveryDate entered
				and    related.RequestedDeliveryDate < current corporate date)

		OutputNotCreated
			one-to-many relation using AwardedLines
			Instance Selection
				where (!related.OutputCreated)

		OutputNotCreatedAndApproved
			one-to-many relation using AwardedLines
			Instance Selection
				where (!related.OutputCreated
				and     related.AwardApprovalStatus.Approved)

		AwardedAndApprovedLines
			one-to-many relation using AwardedLines
			Instance Selection
				where (related.AwardApprovalStatus.Approved)

		SpecialEventLines is a SourcingEventLine set
			Instance Selection
				where (related.ItemType.Special)

		SupplierSourceIdsToNotify is a SourcingEventNotification set
			Instance Selection
				where (related.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)

		SupplierContactProxyRel
			one-to-many relation to SupplierContactProxy
			Field Mapping uses part of key
				related.SupplierGroup		= LocalNotifiedSupplier.SupplierGroup
				related.Supplier			= LocalNotifiedSupplier.Supplier
				related.SupplierSourceId	= LocalNotifiedSupplier.SupplierSourceId
			Instance Selection
				where (related.ReceiveEmailNotification)

		CurrentActorResponse
			one-to-one relation to SourcingEventResponse
			Field Mapping uses symbolic key
		 		related.NotifiedSupplier.SupplierGroup    = actor.agent(SupplierSourceId).SupplierGroup
		 		related.NotifiedSupplier.Supplier         = actor.agent(SupplierSourceId).Supplier
		 		related.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId
		 		related.Company                           = Company
		 		related.SourcingEvent                     = SourcingEvent
		 		related.SourcingEventResponse             = blank

		CurrentActorIsBestAndFinal
			one-to-many relation to SourcingEventResponse
			Field Mapping uses symbolic key
		 		related.NotifiedSupplier.SupplierGroup    = actor.agent(SupplierSourceId).SupplierGroup
		 		related.NotifiedSupplier.Supplier         = actor.agent(SupplierSourceId).Supplier
		 		related.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId
		 		related.Company                           = Company
		 		related.SourcingEvent                     = SourcingEvent
		 		related.SourcingEventResponse             = blank
		 	Instance Selection
		 		where (related.BestAndFinalSupplier)

		CurrentActorIsStepTwo
			one-to-many relation to SourcingEventResponse
			Field Mapping uses symbolic key
		 		related.NotifiedSupplier.SupplierGroup    = actor.agent(SupplierSourceId).SupplierGroup
		 		related.NotifiedSupplier.Supplier         = actor.agent(SupplierSourceId).Supplier
		 		related.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId
		 		related.Company                           = Company
		 		related.SourcingEvent                     = SourcingEvent
		 		related.SourcingEventResponse             = blank
		 	Instance Selection
		 		where (related.TechnicalProposalAccepted)

		SubmittedResponseForCurrentActor
			one-to-many relation to SourcingEventResponse
			Field Mapping uses symbolic key
		 		related.NotifiedSupplier.SupplierGroup    = actor.agent(SupplierSourceId).SupplierGroup
		 		related.NotifiedSupplier.Supplier         = actor.agent(SupplierSourceId).Supplier
		 		related.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId
		 		related.Company                           = Company
		 		related.SourcingEvent                     = SourcingEvent
		 		related.SourcingEventResponse             = blank
			Instance Selection
				where (related.Status.Submitted)

		AnsweredQandAs is a SourcingEventQandA set
			Instance Selection
				where (related.AllowSupplierView
				or    ((related.AnswersOnlySuppliersCanView
				or	   related.NotAnswered)
				and    related.Supplier         = actor.agent(SupplierSourceId).Supplier
		 		and    related.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId))

		SourcingPOHdrComment is a SourcingEventComment set
			Instance Selection
				where (!related.Type.Event)

		SourcingVAHdrComment is a SourcingEventComment set
			Instance Selection
				where (related.Type.PrintOnPurchaseOrder
				or     related.Type.DisplayOnly
				or     related.Type.InvoiceComments)

		SourcingEventNotificationRel
			one-to-many relation to SourcingEventNotification
			Field Mapping uses part of key
				related.Company                           = Company
		 		related.SourcingEvent                     = SourcingEvent
			Instance Selection
				where (related.SupplierSourceIdRel.Active)

		NotifiedSupplierLoggedIn
			one-to-one relation to SourcingEventNotification
			Field Mapping uses part of key
				related.Company                           = Company
		 		related.SourcingEvent                     = SourcingEvent
		 		related.NotifiedSupplier.SupplierGroup    = actor.agent(SupplierSourceId).SupplierGroup
		 		related.NotifiedSupplier.Supplier         = actor.agent(SupplierSourceId).Supplier
		 		related.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId

		SEResponsesExists is a SourcingEventResponse set

		SourcingEventByEventRel
			one-to-many relation to SourcingEvent
			Field Mapping uses ByEvent
		 		related.SourcingEvent                     = SourcingEvent
			Instance Selection
				where (related.Status.Draft)

		ListQuestionsWithNoValue is a SourcingEventQuestion set
			Instance Selection
				where (related.ResponseType.List
				and	   !related.HasListValues)

		LineQuestionsRel is a SourcingEventLineQuestion set 
		
		ListLineQuestionsWithNoValue is a SourcingEventLineQuestion set
			Instance Selection
				where (related.ResponseType.List
				and    !related.HasListValues)

		BuyerGroupRel
			one-to-one relation to BuyerGroup
			Field Mapping uses symbolic key
				related.ProcurementGroup	= Company.SourcingGroup
				related.BuyerGroup			= Buyer.BuyerGroup

		CMQuestions is a SourcingEventQuestion set
			Instance Selection
				where (related.CMQuestion)

		CMArticles is a SourcingEventArticle set
			Instance Selection
				where (related.CMArticle)

		ActiveCMArticles is a SourcingEventArticle set
			Instance Selection
				where (related.CMArticle
				and	   related.IsActive)

		CMTerms is a SourcingEventTermAndCondition set
			Instance Selection
				where (related.CMTerm)

		PurchasingContacts is a SourcingEventContact set
			Instance Selection
				where (related.PurchasingContact)

		PrimaryPurchasingContactRel is a SourcingEventContact set
			Instance Selection
				where (related.PurchasingContact
				and    related.PrimaryContact)

		SourcingEventContactRel is a SourcingEventContact set

		PrimaryContactRel is a SourcingEventContact set
			Instance Selection
				where (related.PrimaryContact)

		CMComments is a SourcingEventComment set
			Instance Selection
				where (related.CMComment
				and	   related.ContractComments)

		CMAttachments is a SourcingEventAttachment set
			Instance Selection
				where (related.CMAttachment)

		SupplierSourcingEventCommentsRel is a SourcingEventComment set
			Instance Selection
				where (related.SupplierCanView)

		SourcingEventLineCommentsRel
			one-to-many relation to SourcingEventLineComment 
			Field Mapping uses part of key 
 				related.Company		  =	Company
 				related.SourcingEvent = SourcingEvent			
		
		SupplierSourcingEventAttachmentsRel is a SourcingEventAttachment set
			Instance Selection
				where (related.SupplierCanView)

		ArticleRel
			one-to-many relation to Article
			Field Mapping uses ByDisplayOrder
				related.ProcurementGroup	= Company.SourcingGroup

		SourcingEventArticlesByDisplayRel
			one-to-many relation to SourcingEventArticle
			Field Mapping uses ByDisplayOrder
				related.Company       = Company
				related.SourcingEvent = SourcingEvent

		ActiveSourcingEventArticlesRel is a SourcingEventArticle set
			Instance Selection
				where (related.IsActive)

		SourcingEventTermsByDisplayRel
			one-to-many relation to SourcingEventTermAndCondition
			Field Mapping uses ByDisplayOrder
 				related.Company		  =	Company
 				related.SourcingEvent = SourcingEvent

		SourcingEventQuestionByDisplayRel
			one-to-many relation to SourcingEventQuestion
			Field Mapping uses ByDisplayOrder
 				related.Company		  =	Company
 				related.SourcingEvent = SourcingEvent

		QuestionWithRequiredAttachment is a SourcingEventQuestion set
			Instance Selection
				where (related.AlwaysRequireResponseAttachment)

		LineQuestionWithRequiredAttachment is a SourcingEventLineQuestion set
			Instance Selection
				where (related.AlwaysRequireResponseAttachment)

		MeetingsWithNoDatesRel is a SourcingEventMeeting set
			Instance Selection
				where (!related.MeetingDate entered)

		LinesWithWeighting is a SourcingEventLine set
			Instance Selection
				where (related.LineWeighting entered)

		QuestionsWithWeighting is a SourcingEventQuestion set
			Instance Selection
				where (related.QuestionWeighting entered)

		LinesWithLowestBid is a SourcingEventLine set
			Instance Selection
				where (related.LowestBidOption.LessThanLowestBid
				or     related.LowestBidOption.LessThanOrEqualToLowestBid
				or     related.DisplayLowestBidAmount)

		ResponsesWithNegotiatedTerms
			one-to-many relation to SourcingEventResponse
	 		Field Mapping uses ByEvent
	 			related.Company          				  = Company
				related.SourcingEvent    				  = SourcingEvent
	 		Instance Selection
	 			where (related.RequestToNegotiateTerms)

		LinesThatAllowAlternates is a SourcingEventLine set
	 		Instance Selection
	 			where (related.AllowAlternateResponses)

		LinesThatAllowAddOnCharge is a SourcingEventLine set
	 		Instance Selection
	 			where (related.AllowAddOnCharge)

		AwardedLinesExist is a SourcingEventLine set
			Instance Selection
				where (related.DeleteAwardValid)

		NotifiedSuppliersWhoResponded is a SourcingEventNotification set
			Instance Selection
				where (related.ResponsesExist)

		NotifiedSuppliersWhoHaveNotResponded is a SourcingEventNotification set
			Instance Selection
				where (!related.ResponsesExist)

		CancelledQuantityRel is a SourcingEventLine set
			Instance Selection
				where (related.CancelledQuantity entered)

		ContractSourceRel
			one-to-many relation to SourcingEventLineSource
			Field Mapping uses symbolic key
				related.Company          = Company
				related.SourcingEvent	 = SourcingEvent
			Instance Selection
				where (related.OriginCode = "CM")

		RequisitionSourceRel
			one-to-many relation to SourcingEventLineSource
			Field Mapping uses symbolic key
				related.Company          = Company
				related.SourcingEvent	 = SourcingEvent
			Instance Selection
				where (related.OriginCode = "RQ")

		ItemSearchRel is a SourcingEventLine set
			Instance Selection
				where (related.ItemNumber		= Item)

		ContractSearchRel is a SourcingEventLineSource set
			Instance Selection
				where (related.ProcurementGroup 		= Company.SourcingGroup
				and	   related.OriginCode				= "CM"
				and	   related.SourceDocumentNumeric	= Contract)

		RequisitionSearchRel is a SourcingEventLineSource set
			Instance Selection
				where (related.ProcurementGroup 		= Company.SourcingGroup
				and	   related.OriginCode				= "RQ"
				and	   related.SourceDocumentNumeric	= Requisition)

		PerUnitEstimateRel is a SourcingEventLine set
			Instance Selection
				where (related.PerUnitEstimate entered)

		SourcingEventLineAOCRel 
			one-to-many relation to SourcingEventLineAOC 
			Field Mapping uses symbolic key
				related.Company								= Company
				related.SourcingEvent						= SourcingEvent
			Instance Selection
				where (related.SourcingEventLine > 0)		
		PerUnitEstimateAOCRel
			one-to-many relation to SourcingEventLineAOC
			Field Mapping uses symbolic key
				related.Company								= Company
				related.SourcingEvent						= SourcingEvent
			Instance Selection
				where (related.PerUnitEstimate entered)

		SourcingEventHeaderAOCRel
			one-to-many relation to SourcingEventLineAOC
			Field Mapping uses symbolic key
				related.Company								= Company
				related.SourcingEvent						= SourcingEvent
				related.SourcingEventLine                   = 0

		CurrentSupplierPlanHolderRel
			one-to-many relation to SourcingEventPlanHolder
			Field Mapping uses BySupplier
				related.NotifiedSupplier.SupplierGroup 	  = actor.agent(SupplierSourceId).SupplierGroup
				related.NotifiedSupplier.Supplier	   	  = actor.agent(SupplierSourceId).Supplier
				related.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId
				related.Company                           = Company
				related.SourcingEvent                     = SourcingEvent

		PlanHoldersToNotifyRel is a SourcingEventPlanHolder set
			Instance Selection
				where (!related.SupplierContactNotified
				and	   !related.SupplierContactHasResponded
				and	   related.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)

		BuyerWeightingRel
			one-to-many relation to BuyerWeighting
			Field Mapping uses symbolic key
				related.SourcingGroup	= Company.SourcingGroup
			Instance Selection
				where (related.Active)

		EventBuyerWeightingRel is a SourcingEventBuyerWeighting set

		WeightingBuyerRel is a SourcingEventWeightingBuyer set

		EventBuyerWeightingZeroRel is a SourcingEventBuyerWeighting set
			Instance Selection
				where (related.CriteriaWeighting = 0)

		GeneralLedgerCompanyRel			
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company				

		ContextPropertyCategoryRel
			one-to-one relation to ContextProperty
			Field Mapping uses ByKeyField
				related.KeyField = "Category"
				related.DataArea = parentcontext.dataarea

		ContextPropertySubcategoryRel
			one-to-one relation to ContextProperty
			Field Mapping uses ByKeyField
				related.KeyField = "SubCategory"
				related.DataArea = parentcontext.dataarea

		ContextPropertyBuyerRel
			one-to-one relation to ContextProperty
			Field Mapping uses ByKeyField
				related.KeyField = "Buyer"
				related.DataArea = parentcontext.dataarea

		ActorContextBuyerRel
			one-to-one relation to ActorContext
			Field Mapping uses SymbolicKeyByContextProperty
				related.ContextProperty          = ContextPropertyBuyerRel.ContextProperty
				related.Actor                    = actor

		ActorContextCategoryRel
			one-to-one relation to ActorContext
			Field Mapping uses SymbolicKeyByContextProperty
				related.ContextProperty          = ContextPropertyCategoryRel.ContextProperty
				related.Actor                    = actor

		ActorContextSubCategoryRel
			one-to-one relation to ActorContext
			Field Mapping uses SymbolicKeyByContextProperty
				related.ContextProperty          = ContextPropertySubcategoryRel.ContextProperty
				related.Actor                    = actor

		SourcingEventPlanHolderRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses symbolic key
				related.NotifiedSupplier.SupplierGroup    = LocalNotifiedSupplier.SupplierGroup
				related.NotifiedSupplier.Supplier         = LocalNotifiedSupplier.Supplier
				related.NotifiedSupplier.SupplierSourceId = LocalNotifiedSupplier.SupplierSourceId
				related.Company                           = Company
				related.SourcingEvent                     = SourcingEvent

		SupplierResponsesRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses BySupplierSearch
				related.NotifiedSupplier.SupplierGroup    = Company.SourcingGroup
				related.NotifiedSupplier.Supplier         = Supplier
				related.Company                           = Company
				related.SourcingEvent                     = SourcingEvent

		EventResponsesRel
			one-to-many relation to SourcingEventResponse
			Field Mapping uses ByEvents
				related.Company								= Company
				related.SourcingEvent						= SourcingEvent
				related.NotifiedSupplier.SupplierGroup		= actor.agent(SupplierSourceId).SupplierGroup
				related.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
				related.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId

		SourcingCompanyExtensionRel
			one-to-one relation to SourcingCompanyExtension
			Field Mapping uses symbolic key
				related.Company = Company



		ExecutiveEventLinesRel
			one-to-many relation to SourcingEventLine
			Field Mapping uses symbolic key
				related.Company					= Company
				related.SourcingEvent			= SourcingEvent


		ExecutiveSummaryEventContactRel
			one-to-many relation to SourcingEventContact
			Field Mapping uses ByContact
				related.Company					= Company
				related.SourcingEvent			= SourcingEvent

		EventTermsAndConditionRel    
			one-to-many relation to SourcingEventTermAndCondition
			Field Mapping uses ByTermAndCondition
			Instance Selection
				where (related.Company				= Company
				and related.SourcingEvent			= SourcingEvent)

		SourcingEventQuestionResponseRel
			one-to-many relation to SourcingEventQuestionResponse
    		Field Mapping uses ByQuestion
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent

		SourcingEventQuestionResponseForASupplierRel
			one-to-many relation to SourcingEventQuestionResponse
     		Field Mapping uses BySupplier
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
				related.NotifiedSupplier.SupplierGroup  	= actor.agent(SupplierSourceId).SupplierGroup
				related.NotifiedSupplier.Supplier           = actor.agent(SupplierSourceId).Supplier
				related.NotifiedSupplier.SupplierSourceId   = actor.agent(SupplierSourceId).SupplierSourceId

		SESupplierQuestionResponseForASupplierRel
			one-to-many relation to SESupplierQuestionResponse
     		Field Mapping uses BySupplier
     			related.Company            					= Company
     			related.SourcingEvent      					= SourcingEvent
				related.NotifiedSupplier.SupplierGroup  	= actor.agent(SupplierSourceId).SupplierGroup
				related.NotifiedSupplier.Supplier           = actor.agent(SupplierSourceId).Supplier
				related.NotifiedSupplier.SupplierSourceId   = actor.agent(SupplierSourceId).SupplierSourceId

		SourcingEventLineQuestionResponseRel
			one-to-many relation to SourcingEventLineQuestionResponse
			Field Mapping uses ByQuestion
			Instance Selection
				where (related.Company			= Company
				and related.SourcingEvent		= SourcingEvent)

		SourcingEventLineQuestionRel
			one-to-many relation to SourcingEventLineQuestion
			Field Mapping uses ByQuestion
				related.Company					= Company
				related.SourcingEvent			= SourcingEvent

		SourcingEventQandARel
			one-to-many relation to SourcingEventQandA
			Field Mapping uses part of key
				related.Company					= Company
				related.SourcingEvent			= SourcingEvent

		DuplicateBuyerRel
			one-to-many relation to SourcingEventResponseBuyerWeighting
	   		Field Mapping uses ByEvent
  				related.Company						= Company
				related.SourcingEvent				= SourcingEvent
			Instance Selection
				where (Buyer   		= LocalBuyer)

		SupplierGroupRel
			one-to-one relation to SupplierGroup
			Field Mapping uses symbolic key
				related.SupplierGroup             = Company.SourcingGroup


		SupplierDiversityResponseRel
			one-to-many relation to SupplierDiversityResponse
			Field Mapping uses ByDiversityCode
				related.SupplierGroup				= actor.agent(SupplierSourceId).SupplierGroup

		UserTemplateRel
			one-to-one relation to UserTemplate
			Field Mapping uses symbolic key
		 		related.UserTemplate = LocalUserTemplate

	Sets
 		ByCategory
 			Sort Order
 				Category
 				SubCategory
 				Company
 				SourcingEvent

 		ByEvent
 			indexed
 			Sort Order
 				SourcingEvent descending
 				Company

 		ByCloseDate
 			indexed
 			Sort Order
 				CloseDate descending
 				SourcingEvent
 				Company

 		ByType
 			Sort Order
 				SourcingEventType
				Company
				SourcingEvent

		ByStatus
			indexed
			Sort Order
				Company
				Status
				SourcingEvent
			Instance Selection
				where (InProcessStatus)

		ByFinalizedDate
			indexed
			Sort Order
				FinalizedDate descending
				SourcingEvent
				Company

		ByCompany
			indexed
			Sort Order
				Company
				SourcingEvent

	Field Rules
		Name
			required
		Template
			cannot be changed
		CreateAmendments
			constraint (Company.AmendmentSelected)
				"NoAmendmentCriteriaSelectedForCompany"
		FinalizedDate
			cannot be changed
		Buyer
			default to actor.agent(Employee).Employee
			constraint (HasBuyerEmail)
				"BuyerMustHaveAnEmailAddress"
		CurrencyCode
			initial value is Company.Currency
			default to Company.Currency

			if (CurrencyCode changed)
				constraint (!SupplierResponsesExist)
					"CannotChangeCurrencyCode;SupplierResponsesExist"

		Sealed
			if (InformalQuote)
				constraint (!Sealed)
					"SealedBidNotValidWhenDatesNotRequiredOnEventSelected"
			constraint(!LowestBidCond)
				"CannotSelectLowestBidOptionOnSealedBid"
			constraint (!DisplayLowestBidAmount)
				"CannotDisplayLowestBidAmountOnSealedBid"

		RequireAllLines
			if (WeightingCriteria.PriceWeighting entered)
	   			required
	   				"MustRequireResponseForAllLinesWhenUsingPriceWeightingCriteria"
	   	PostingOptions
			default to Company.PostingOptions

			if (PostingOptions changed
			and PostingOptions.DoNotDisplayOnPortal)
				invoke Delete SourcingEventNotification set

		DefaultShipTo
			if (DefaultShipTo entered)
				constraint (OutputType.PO)
					"CanOnlyEnterShipToForPurchaseOrderOutputTypes"
		DiversityScoreAllocation
			if (!WeightingCriteria.DiversityWeighting entered)
				initialize

		DisplayPlanHoldersList
			if (PostingOptions.DoNotDisplayOnPortal)
				force default to false

		DeliveryScoreAllocation
			if (DeliveryScoringOption.AsSoonAsPossible)
				initialize
			if (!WeightingCriteria.DeliveryWeighting entered)
				initialize

		DeliveryScoringOption
			if (WeightingCriteria.DeliveryWeighting entered)
				default to DeliveryScoringOption.AsSoonAsPossible
			else
				initialize

		WeightingCriteria
			if (WeightingCriteria.PriceWeighting changed
			and !WeightingCriteria.PriceWeighting entered
			and TotalLineWeighting > 0)
				constraint (WeightingCriteria.DeliveryWeighting entered)
					"CannotEnterLineWeightingOverridePercentageUnlessPriceOrDeliveryWeightingIsEntered"
			if (WeightingCriteria.DeliveryWeighting changed
			and !WeightingCriteria.DeliveryWeighting entered
			and TotalLineWeighting > 0)
				constraint (WeightingCriteria.PriceWeighting entered)
					"CannotEnterLineWeightingOverridePercentageUnlessPriceOrDeliveryWeightingIsEntered"

		AllowSupplierQandA
			if (AllowSupplierQandA not entered)
				constraint (!SourcingEventQandA set exists)
					"MustAllowSupplier<QAndAString>,SupplierQuestionsExist"

		OutputType
			if (DefaultContractType.PurchaseType   != ContractType
			and !DefaultContractSubType entered
			and  DefaultContractType exists)
				initialize DefaultContractType
			if (DefaultContractSubType.PurchaseType != ContractType
			and  DefaultContractSubType entered
			and  DefaultContractSubType exists)
				initialize DefaultContractType
				initialize DefaultContractSubType
			if (!ContractOutput)
				initialize DefaultContractClass
				initialize DefaultContractSubClass
			if (!EffectiveDateValid)
				initialize DefaultEffectiveDate
				initialize DefaultExpirationDate
			if (!OutputType.Standing)
				initialize DefaultScheduleFrequency
				initialize DefaultMaxReleaseNumber
				initialize DefaultParticipant
			if (!OutputType.PO)
				initialize RequestedDeliveryDate
				initialize DefaultShipTo

		DefaultEffectiveDate
			constraint (EffectiveDateValid)
				"CannotEnterEffectiveDateForPoOutputOrNoOutput"

		DefaultExpirationDate
			constraint (EffectiveDateValid)
				"CannotEnterExpirationDateForPoOutputOrNoOutput"
			if (DefaultEffectiveDate entered)
				constraint (DefaultExpirationDate > DefaultEffectiveDate)
					"DefaultExpirationDateMustBeLaterThanDefaultEffectiveDate"
			if (OutputType.Standing)
				if (DefaultMaxReleaseNumber entered)
					cannot be entered
						"CanEnterEitherExpirationDateOrMaxReleaseNumberForStandingOutputType"

		DefaultContractType
			if (!DefaultContractSubType entered)
				constraint (DefaultContractType.PurchaseType   = ContractType)
					"TypeForContractTypeDoesNotMatchOutputType"

		DefaultContractSubType
			constraint (DefaultContractType entered)
				"CannotEnterContractSubtypeWithoutContractType"
			constraint (DefaultContractSubType.PurchaseType   = ContractType)
				"TypeForContractSubtypeDoesNotMatchOutputType"

		DefaultContractSubClass
			constraint (DefaultContractClass entered)
				"CannotEnterContractSubclassificationWithoutContractClassification"

		DefaultScheduleFrequency
			constraint (OutputType.Standing)
				"CanOnlyEnterScheduleFrequencyForStandingOutputType"

		DefaultMaxReleaseNumber
			constraint (OutputType.Standing)
				"CanOnlyEnterMaxReleaseNumberForStandingOutputType"
			if (OutputType.Standing)
				if (DefaultExpirationDate entered)
					cannot be entered
						"CanEnterEitherExpirationDateOrMaxReleaseNumberForStandingOutputType"

		DefaultParticipant
			constraint (OutputType.Standing)
				"CanOnlyEnterParticipantForStandingOutputType"

		DefaultAccount
			if (DefaultAccount.Project entered)
				LocalExchangeDate	= current corporate date
				LocalPostingDate	= current corporate date

		IncompleteBuyerScoringEdit
			default to Company.IncompleteBuyerScoringEdit
			if (TotalBuyerWeighting !=0)
				required
					"MustEnterAnIncompleteBuyerScoringEditWhenUsingBuyerWeighting"

		OnlyNotifyResponders
			if (OnlyNotifyResponders)
				constraint (AmendmentsAllowed)
					"WhenSendAmendmentNotificationsOnlyToRespondingSuppliersIsSelectedCreateAmendmentsMustBeSelectedAndSupplierPortalOptionsMustBeSetToDisplayOnPortalOrDisplayForNotifiedSuppliersOnly:SourcingCompanyMustAlsoBeSetToSendEmailOrCreateMessagesForAmendments"

		BidBondPercent
			if (RequireBidBond = false)
				initialize

		VendorItemProcessing
			if (!CreateByCopy)
				default to Company.VendorItemProcessing

		DisplayBidTabulation
			if (SupplierGroupRel.BidTabulationDefault = 0)
				default to 1 
			else
			if (SupplierGroupRel.BidTabulationDefault = 1)
				default to 2 
			else
			if (SupplierGroupRel.BidTabulationDefault = 2)
				default to 3 
			else
			if (SupplierGroupRel.BidTabulationDefault = 3)
				default to 4 
			else
				default to 5 

		TransientCreateWeightingForEventBuyer
			if (TransientCreateWeightingForEventBuyer)
				if (!WeightingBuyerForEventBuyerExists)
					invoke Create SourcingEventWeightingBuyer
						invoked.Company   		= Company
						invoked.SourcingEvent 	= SourcingEvent
						invoked.Employee        = Buyer

	SubType IsEvent Field Rules
		PreviewDate
			if (InformalQuote)
				initialize PreviewDate
				initialize OpenDate
				initialize CloseDate
				initialize QandAOpenDate
				initialize QandACloseDate
				initialize DisputeCloseDate
		 		cannot be entered
		 			"PreviewDateCannotBeEnteredWhenDatesNotRequiredOnSelectedEvent"
		OpenDate
			if (OpenDate entered)
				constraint (OpenDate >= PreviewDate)
					"OpenDateMustBeGreaterThanPreviewDate"
		 	if (InformalQuote)
		 		cannot be entered
		 			"OpenDateCannotBeEnteredWhenDatesNotRequiredOnSelectedEvent"
		CloseDate
			if (CloseDate entered)
				constraint (CloseDate > OpenDate)
					"CloseDateCannotBeEarlierThanOpenDate"
			if (InformalQuote)
		 		cannot be entered
		 			"CloseDateCannotBeEnteredWhenDatesNotRequiredOnSelectedEvent"
			if (CloseDate entered
			and BuyerWeightingFinalDate entered)
				constraint (BuyerWeightingFinalDate >= CloseDate date)
					"BuyerWeightingFinalEntryDateCannotBeBeforeCloseDate"

		BuyerWeightingFinalDate

			if (CloseDate entered
			and BuyerWeightingFinalDate entered)
				constraint (BuyerWeightingFinalDate >= CloseDate date)
					"BuyerWeightingFinalEntryDateCannotBeBeforeCloseDate"

			if (BuyerWeightingFinalDate entered
			and CloseDate !entered)
				constraint (BuyerWeightingFinalDate > current corporate date)
					"BuyerWeightingFinalEntryDateMustBeAfterTodaysDate"

	 	QandAOpenDate
			if (AllowSupplierQandA)
				if (PreviewDate entered)
					constraint (QandAOpenDate >= PreviewDate)
						"<QAndAOpenDateString>MustBeGreaterThanPreviewDate"
				else
				if (OpenDate entered)
					constraint (QandAOpenDate >= OpenDate)
						"<QAndAOpenDateString>MustBeGreaterThanOpenDate"
				else
					cannot be entered
						"<QAndAOpenDateString>CannotBeEnteredWhenEventOpenDateIsNotEntered"
			else
				cannot be entered
					"<QAndAOpenDateString>CannotBeEnteredWhen<AllowSupplierQAndAString>FlagIsNo"

		QandACloseDate
		   	if (AllowSupplierQandA)
		   		constraint (QandACloseDate >= QandAOpenDate)
					"<QAndACloseDateString>MustBeGreaterThan<QAndAOpenDateString>"
				if (CloseDate entered)
					constraint (QandACloseDate <= CloseDate)
						"<QAndACloseDateString>MustBeLessThanEventCloseDate"
				else
					cannot be entered
						"<QAndACloseDateString>CannotBeEnteredWhenEventCloseDateIsNotEntered"
			else
				cannot be entered
					"<QAndACloseDateString>CannotBeEnteredWhen<AllowSupplierQAndAString>FlagIsNo"
		RequestedDeliveryDate
			if (OutputType entered)
				constraint (!ContractOutput)
					"CannotEnterRequestedDeliveryDateForEventGoingToContract"
			if (DisputeCloseDate entered)
				constraint (RequestedDeliveryDate >= DisputeCloseDate)
			   		"RequestedDeliveryDateMustBeGreaterThanDisputeCloseDate"
			else
			if (CloseDate entered)
				constraint (RequestedDeliveryDate >= CloseDate)
					"RequestedDeliveryDateMustBeGreaterThanEventCloseDate"

		DisputeCloseDate
			if (!Company.DisputePeriod)
				cannot be entered
					"DisputeCloseDateCannotBeEnteredWhenDisputePeriodFlagOnSourcingCompanyIsNo"
			else
			if (CloseDate entered)
				constraint (DisputeCloseDate >= CloseDate)
					"DisputeCloseDateMustBeGreaterThanCloseDate"

		InformalQuote
			if (InformalQuote)
				initialize PreviewDate
 	   			initialize OpenDate
				initialize CloseDate
				initialize QandAOpenDate
				initialize QandACloseDate
				initialize DisputeCloseDate

	SubType IsTemplate Field Rules
		PreviewDate
			cannot be entered
	  	OpenDate
			cannot be entered
		CloseDate
			cannot be entered
	 	QandAOpenDate
			cannot be entered
		QandACloseDate
			cannot be entered
		RequestedDeliveryDate
			cannot be entered

	Actions
		AddMeToPlanHoldersList is an Instance Action
			valid when (AddMeToPlanHoldersListValid)
			Action Rules
				invoke Create SourcingEventPlanHolder
					invoked.Company								= Company
					invoked.SourcingEvent						= SourcingEvent
					invoked.NotifiedSupplier.SupplierGroup  	= actor.agent(SupplierSourceId).SupplierGroup
					invoked.NotifiedSupplier.Supplier			= actor.agent(SupplierSourceId).Supplier
					invoked.NotifiedSupplier.SupplierSourceId	= actor.agent(SupplierSourceId).SupplierSourceId
					invoked.AddedBySupplier						= true

		RemoveMeFromPlanHoldersList is an Instance Action
			valid when (RemoveMeFromPlanHoldersListValid)
			Action Rules
				for each CurrentSupplierPlanHolderRel
					invoke Delete each

		CloseCancel is an Instance Action
			restricted
			Action Rules
				if (AllCancelled)
					Status 			= 3		
					CancelDate		= current timestamp
					FinalizedDate 	= current corporate date
				else
				if (AllProcessed)
					Status 			= 4		
					FinalizedDate 	= current corporate date

		SendBuyerWeightingEmail is an Instance Action
			valid when (CanSendWeightingEmail)

			Action Rules

				for each WeightingBuyerMissingScoresRel
					send email
						to each.Employee.EmployeeWorkEmailAddress
						from Buyer.EmployeeWorkEmailAddress
						subject "EventBuyerWeightingToScore"
						Contents
							"YouHaveBuyerWeightingToScoreForEvent<SourcingEvent>-<SourcingEvent.Description>"
							"EnterScoringInManageEvents;EventBuyerWeighting"

		CancelNotify is an Instance Action
			restricted
			Action Rules
				if (!PostingOptions.DoNotDisplayOnPortal)
					if (Company.SendCanceledEmail
					and !StepTwoInProcess)
						for each SupplierSourceIdsToNotify
							include SendLinesCancelledEmailMessage

						for each RespondedButNotNotified
							include SendLinesCancelledEmailMessage

						for each PlanHoldersToNotifyRel
							include SendLinesCancelledEmailMessage

					else
					if (StepTwoInProcess)
						for each ResponsesAcceptedTechnicalSendEmail
							include SendLinesCancelledEmailMessage

						for each ResponsesBestAndFinalSendEmail
							include SendLinesCancelledEmailMessage

					if (Company.CreateCanceledMessage
					and !StepTwoInProcess)

						for each SourcingEventNotification set
							include CreateLinesCancelledSupplierContactMessage

						for each SourcingEvent.AllRespondedButNotNotified
							include CreateLinesCancelledSupplierContactMessage

						for each PlanHoldersToNotifyRel
							include CreateLinesCancelledSupplierContactMessage

					else
					if (StepTwoInProcess)
						for each ResponsesAcceptedTechnicalSendEmail
							include CreateLinesCancelledSupplierContactMessage

						for each ResponsesBestAndFinalSendEmail
							include CreateLinesCancelledSupplierContactMessage

		AddAOCToAllLines is an Instance Action
			valid when (AddOnChargesAllowed)
			Parameters
				AOC			is an AddOnCharge
				Required	is Boolean

			Action Rules
				for each LinesThatAllowAddOnCharge
					invoke Create SourcingEventLineAOC
						invoked.Company				= Company
						invoked.SourcingEvent		= SourcingEvent
						invoked.SourcingEventLine	= each.SourcingEventLine
						invoked.AOC					= AOC
						invoked.Required			= Required

		StartBestAndFinalProcess is an Instance Action
			valid when (BestAndFinalNeedToStart)

			Parameters
				ParmBestAndFinalCloseDate is TimeStamp

			Parameter Rules

				ParmBestAndFinalCloseDate

					required
						"CloseDateForBestAndFinalIsRequired"
					constraint (ParmBestAndFinalCloseDate > current timestamp)
						"CloseDateForBestAndFinalMustBeGreaterThanCurrentDateAndTime"

			Action Rules

				if (Company.RequireNonAwardReason)
					constraint (!BlankNonAwardReasonsNotSelectedBestAndFinal exists)
						"MustSpecifyNonAwardReasonsForEachSupplierNotSelectedForBestAndFinal"

				if (!PostingOptions.DoNotDisplayOnPortal)
					if (SourcingCompanyExtensionRel.SendBestAndFinalYesEmail)
						for each ResponsesSelectedForBestAndFinal
							if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
								LocalNotifiedSupplier = each.NotifiedSupplier
								send email
									to each.NotifiedSupplier.SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									from DerivedFromEmail
									subject "<SourcingCompanyExtensionRel.FinalBestAndFinalYesEmailSubject>"
									Contents
										"<SourcingCompanyExtensionRel.FinalBestAndFinalYesEmailContent>"
										"<DerivedEmailLink>"

					if (SourcingCompanyExtensionRel.CreateBestAndFinalYesMessage)
						for each ResponsesSelectedForBestAndFinal
							invoke Create SupplierContactMessage
								invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
								invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
								invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
								invoked.CreationDateTime				= current timestamp
								invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalBestAndFinalYesEmailSubject
								invoked.MessageText						= SourcingCompanyExtensionRel.FinalBestAndFinalYesEmailContent
								invoked.Status							= 1
								invoked.Priority						= 2
								invoked.SystemGenerated					= true
								invoked.ReleaseStatus					= 2
								invoked.OriginatingEvent    			= SourcingEvent
								invoked.OriginatingCompany  			= Company
								invoked.MessageOwner        			= Buyer

					if (SourcingCompanyExtensionRel.SendBestAndFinalNoEmail)
						for each SubmittedResponsesBestAndFinalNo
							if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
								LocalNotifiedSupplier = each.NotifiedSupplier
								send email
									to each.NotifiedSupplier.SupplierSourceId.EmailAddress
									cc DerivedProxyEmailAddressList
									from DerivedFromEmail
									subject "<SourcingCompanyExtensionRel.FinalBestAndFinalNoEmailSubject>"
									Contents
										"<SourcingCompanyExtensionRel.FinalBestAndFinalNoEmailContent>"
										"<DerivedEmailLink>"

					if (SourcingCompanyExtensionRel.CreateBestAndFinalNoMessage)
						for each SubmittedResponsesBestAndFinalNo
							invoke Create SupplierContactMessage
								invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
								invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
								invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
								invoked.CreationDateTime				= current timestamp
								invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalBestAndFinalNoEmailSubject
								invoked.MessageText						= SourcingCompanyExtensionRel.FinalBestAndFinalNoEmailContent
								invoked.Status							= 1
								invoked.Priority						= 2
								invoked.SystemGenerated					= true
								invoked.ReleaseStatus					= 2
								invoked.OriginatingEvent    			= SourcingEvent
								invoked.OriginatingCompany  			= Company
								invoked.MessageOwner        			= Buyer

				BestAndFinalStarted   = true
				BestAndFinalCloseDate = ParmBestAndFinalCloseDate

				for each SourcingEventLineResponseRel
					if (each.Status.Submitted)
						invoke SetInitialCost Submitted each

				for each ResponsesSelectedForBestAndFinal
					invoke ModifyResponseFromEvent Submitted each

		StartBestAndFinalStepOne is an Instance Action
			valid when (BestAndFinalFromTwoStep)
			Action Rules

				if (Company.RequireNonAwardReason)
					constraint (!BlankNonAwardReasonsNotSelectedStepTwo exists)
						"MustSpecifyNonAwardReasonsForEachSupplierNotSelectedForNextStep"

				if (!PostingOptions.DoNotDisplayOnPortal)
					if (TwoStepBidding.Separate)
						if (SourcingCompanyExtensionRel.SendStepTwoYesEmail)
							for each ResponsesSelectedForStepTwo
								if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
									LocalNotifiedSupplier = each.NotifiedSupplier
									send email
										to each.NotifiedSupplier.SupplierSourceId.EmailAddress
										cc DerivedProxyEmailAddressList
										from DerivedFromEmail
										subject "<SourcingCompanyExtensionRel.FinalStepTwoYesEmailSubject>"
										Contents
											"<SourcingCompanyExtensionRel.FinalStepTwoYesEmailContent>"
											"<AdditionalStepTwoInstructions>"
											"<DerivedEmailLink>"

						if (SourcingCompanyExtensionRel.CreateStepTwoYesMessage)
							for each ResponsesSelectedForStepTwo
								invoke Create SupplierContactMessage
									invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
									invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
									invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
									invoked.CreationDateTime				= current timestamp
									invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalStepTwoYesEmailSubject
									invoked.MessageText						= SourcingCompanyExtensionRel.FinalStepTwoYesEmailContent + ". " + AdditionalStepTwoInstructions
									invoked.Status							= 1
									invoked.Priority						= 2
									invoked.SystemGenerated					= true
									invoked.ReleaseStatus					= 2
									invoked.OriginatingEvent    			= SourcingEvent
									invoked.OriginatingCompany  			= Company
									invoked.MessageOwner        			= Buyer

						if (SourcingCompanyExtensionRel.SendStepTwoNoEmail)
							for each ResponsesNotSelectedForStepTwo
								if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
									LocalNotifiedSupplier = each.NotifiedSupplier
									send email
										to each.NotifiedSupplier.SupplierSourceId.EmailAddress
										cc DerivedProxyEmailAddressList
										from DerivedFromEmail
										subject "<SourcingCompanyExtensionRel.FinalStepTwoNoEmailSubject>"
										Contents
											"<SourcingCompanyExtensionRel.FinalStepTwoNoEmailContent>"
											"<DerivedEmailLink>"

						if (SourcingCompanyExtensionRel.CreateStepTwoNoMessage)
							for each ResponsesNotSelectedForStepTwo
								invoke Create SupplierContactMessage
									invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
									invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
									invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
									invoked.CreationDateTime				= current timestamp
									invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalStepTwoNoEmailSubject
									invoked.MessageText						= SourcingCompanyExtensionRel.FinalStepTwoNoEmailContent
									invoked.Status							= 1
									invoked.Priority						= 2
									invoked.SystemGenerated					= true
									invoked.ReleaseStatus					= 2
									invoked.OriginatingEvent    			= SourcingEvent
									invoked.OriginatingCompany  			= Company
									invoked.MessageOwner        			= Buyer

				StepTwoStarted   = true

				if (TwoStepBidding.Separate)
					for each ResponsesSelectedForStepTwo
	 					invoke ModifyResponseFromEvent Submitted each

		StartPricingProcess is an Instance Action
			valid when (StepTwoNeedToStart)

			Parameters
				ParmStepTwoCloseDate is TimeStamp

			Parameter Rules

				ParmStepTwoCloseDate

					if (TwoStepBidding.Combined)
						default to current timestamp
					else
						required
							"CloseDateForStepTwo_(Pricing)IsRequired"
					constraint (ParmStepTwoCloseDate >= current timestamp)
						"CloseDateForStepTwo_(Pricing)MustBeGreaterThanCurrentDateAndTime"

			Action Rules

				if (Company.RequireNonAwardReason)
					constraint (!BlankNonAwardReasonsNotSelectedStepTwo exists)
						"MustSpecifyNonAwardReasonsForEachSupplierNotSelectedForStepTwo_(Pricing)"

				if (!PostingOptions.DoNotDisplayOnPortal)
					if (TwoStepBidding.Separate)
						if (SourcingCompanyExtensionRel.SendStepTwoYesEmail)
							for each ResponsesSelectedForStepTwo
								if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
									LocalNotifiedSupplier = each.NotifiedSupplier
									send email
										to each.NotifiedSupplier.SupplierSourceId.EmailAddress
										cc DerivedProxyEmailAddressList
										from DerivedFromEmail
										subject "<SourcingCompanyExtensionRel.FinalStepTwoYesEmailSubject>"
										Contents
											"<SourcingCompanyExtensionRel.FinalStepTwoYesEmailContent>"
											"<AdditionalStepTwoInstructions>"
											"<DerivedEmailLink>"

						if (SourcingCompanyExtensionRel.CreateStepTwoYesMessage)
							for each ResponsesSelectedForStepTwo
								invoke Create SupplierContactMessage
									invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
									invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
									invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
									invoked.CreationDateTime				= current timestamp
									invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalStepTwoYesEmailSubject
									invoked.MessageText						= SourcingCompanyExtensionRel.FinalStepTwoYesEmailContent + ". " + AdditionalStepTwoInstructions
									invoked.Status							= 1
									invoked.Priority						= 2
									invoked.SystemGenerated					= true
									invoked.ReleaseStatus					= 2
									invoked.OriginatingEvent    			= SourcingEvent
									invoked.OriginatingCompany  			= Company
									invoked.MessageOwner        			= Buyer

						if (SourcingCompanyExtensionRel.SendStepTwoNoEmail)
							for each ResponsesNotSelectedForStepTwo
								if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
									LocalNotifiedSupplier = each.NotifiedSupplier
									send email
										to each.NotifiedSupplier.SupplierSourceId.EmailAddress
										cc DerivedProxyEmailAddressList
										from DerivedFromEmail
										subject "<SourcingCompanyExtensionRel.FinalStepTwoNoEmailSubject>"
										Contents
											"<SourcingCompanyExtensionRel.FinalStepTwoNoEmailContent>"
											"<DerivedEmailLink>"

						if (SourcingCompanyExtensionRel.CreateStepTwoNoMessage)
							for each ResponsesNotSelectedForStepTwo
								invoke Create SupplierContactMessage
									invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
									invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
									invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
									invoked.CreationDateTime				= current timestamp
									invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalStepTwoNoEmailSubject
									invoked.MessageText						= SourcingCompanyExtensionRel.FinalStepTwoNoEmailContent
									invoked.Status							= 1
									invoked.Priority						= 2
									invoked.SystemGenerated					= true
									invoked.ReleaseStatus					= 2
									invoked.OriginatingEvent    			= SourcingEvent
									invoked.OriginatingCompany  			= Company
									invoked.MessageOwner        			= Buyer

				StepTwoStarted   = true
				StepTwoCloseDate = ParmStepTwoCloseDate


				if (TwoStepBidding.Separate)
					for each ResponsesSelectedForStepTwo
	 					invoke ModifyResponseFromEvent Submitted each

		CreateSupplierMessageAndDialog is an Instance Action
			valid when (ForSupplier)
			Parameters
				ParmDialogMessage       is Alpha size 1000
					default label is "Message"
				ParmDialogAttachment	is an Attachment
					default label is "Attachment"
				ParmPriority            is Numeric 1
					States
						Low				value is 1
						Normal			value is 2
						High			value is 3
					default label is "Priority"
				ParmResponseRequested   is Boolean
					default label is "ResponseRequired"

			Parameter Rules
				ParmDialogMessage
					required

				ParmPriority
					initial value is 2

			Local Fields
				LocalSupplierContactMessage        is a SupplierContactMessage view

			Action Rules

				invoke Create SupplierContactMessage
					assign result to LocalSupplierContactMessage
					invoked.SupplierGroup  					= actor.agent(SupplierSourceId).SupplierGroup
 					invoked.Supplier    			 		= actor.agent(SupplierSourceId).Supplier
					invoked.SupplierSourceId                = actor.agent(SupplierSourceId).SupplierSourceId
					invoked.MessageTitle					= "Dialog for Event: " + RepresentativeText
					invoked.MessageText                     = "User Created Message and Dialog for Event: " + RepresentativeText
					invoked.Status							= 1
					invoked.Priority						= ParmPriority
					invoked.ReleaseStatus					= 2
					invoked.MessageOwner                    = Buyer
					invoked.OriginatingCompany              = Company
					invoked.OriginatingEvent                = SourcingEvent

				invoke Create SupplierMessageDialog
					invoked.SupplierGroup  					= actor.agent(SupplierSourceId).SupplierGroup
 					invoked.Supplier    			 		= actor.agent(SupplierSourceId).Supplier
					invoked.SupplierSourceId                = actor.agent(SupplierSourceId).SupplierSourceId
					invoked.SupplierContactMessage 			= LocalSupplierContactMessage.SupplierContactMessage
					invoked.Message                 		= ParmDialogMessage
					invoked.MessageAttachment       		= ParmDialogAttachment
					invoked.ResponseRequested       		= ParmResponseRequested

	 	NotifyMissingResponses is a Set Action
			restricted
			Parameters
				SourcingGroup
				DaysToCloseDate     is Numeric size 3

			Instance Selection
				where (SourcingGroup                   = SourcingGroup
				and    Status.Open)


			Action Rules

				Instance Rules

					if    (current corporate date >= (DerivedCloseDate - DaysToCloseDate as days)
					and    DerivedCloseDate > current corporate date)

						if (SourcingCompanyExtensionRel.SendPendingEmail)
							for each NotifiedSuppliersWhoHaveNotResponded
								if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
									LocalNotifiedSupplier = each.NotifiedSupplier
									send email
										to each.NotifiedSupplier.SupplierSourceId.EmailAddress
										cc DerivedProxyEmailAddressList
										from DerivedFromEmail
										subject "<SourcingCompanyExtensionRel.FinalPendingEmailSubject>"
										Contents
											"<SourcingCompanyExtensionRel.FinalPendingEmailContent>"
											"YouHaveBeenNotifiedOfTheEventButHaveNotResponded.AResponseMustBeEnteredAndSubmittedBy<DerivedCloseDate>ToBeConsideredForAward."

						if (SourcingCompanyExtensionRel.CreatePendingMessage)
							for each NotifiedSuppliersWhoHaveNotResponded
								invoke Create SupplierContactMessage
									invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
									invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
									invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
									invoked.CreationDateTime				= current timestamp
									invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalPendingEmailSubject
									invoked.MessageText						= SourcingCompanyExtensionRel.FinalPendingEmailContent
									invoked.MessageText                     = "You Have Been Notified Of The Event But Have Not Responded. A Response Must Be Entered And Submitted By" + SourcingEvent.DerivedCloseDate + "To Be Considered For Award."
									invoked.Status							= 1
									invoked.Priority						= 2
									invoked.SystemGenerated					= true
									invoked.ReleaseStatus					= 2
									invoked.OriginatingEvent    			= SourcingEvent
									invoked.OriginatingCompany  			= Company
	 								invoked.MessageOwner        			= Buyer

		MarkResponsesAsViewed is an Instance Action
			valid when (ShowResponsesNotViewed)
			Action Rules
			
				for each SubmittedResponses
					invoke Update Submitted each
						invoked.ResponseViewed = true 

	 	NotifyMissingResponsesNoClose is a Set Action
			restricted
			Parameters
				SourcingGroup
				DaysSinceRelease     is Numeric size 3

			Instance Selection
				where (SourcingGroup                   = SourcingGroup
				and    Status.Open)

			Action Rules

				Instance Rules
					for each audit log records
						if (each.action = "ReleaseDraft")
							ReleaseDate = each.effective date

					if    (current corporate date >= (ReleaseDate + DaysSinceRelease as days)
					and    InformalQuote
					and   !BestAndFinalStarted
					and   !StepTwoStarted)

						if (SourcingCompanyExtensionRel.SendPendingEmail)
							for each NotifiedSuppliersWhoHaveNotResponded
								if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
									LocalNotifiedSupplier = each.NotifiedSupplier
									send email
										to each.NotifiedSupplier.SupplierSourceId.EmailAddress
										cc DerivedProxyEmailAddressList
										from DerivedFromEmail
										subject "<SourcingCompanyExtensionRel.FinalPendingEmailSubject>"
										Contents
											"<SourcingCompanyExtensionRel.FinalPendingEmailContent>"
											"YouHaveBeenNotifiedOfTheEventButHaveNotResponded.AResponseMustBeEnteredAndSubmittedToBeConsideredForAward."

						if (SourcingCompanyExtensionRel.CreatePendingMessage)
							for each NotifiedSuppliersWhoHaveNotResponded
								invoke Create SupplierContactMessage
									invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
									invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
									invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
									invoked.CreationDateTime				= current timestamp
									invoked.MessageTitle					= SourcingCompanyExtensionRel.FinalPendingEmailSubject
									invoked.MessageText						= SourcingCompanyExtensionRel.FinalPendingEmailContent
									invoked.MessageText                     = "YouHaveBeenNotifiedOfTheEventButHaveNotResponded.AResponseMustBeEnteredAndSubmittedToBeConsideredForAward."
									invoked.Status							= 1
									invoked.Priority						= 2
									invoked.SystemGenerated					= true
									invoked.ReleaseStatus					= 2
								   	invoked.OriginatingEvent    			= SourcingEvent
									invoked.OriginatingCompany  			= Company
									invoked.MessageOwner        			= Buyer

		SendEventAvailableEmails is an Instance Action
			default label is untranslatable
			restricted
			Parameters
				Report is BinaryDocument
		
			Action Rules
				TransientEventDocument = Report
			
			Exit Rules
				for each SupplierSourceIdsToNotify
					LocalNotifiedSupplier = each.NotifiedSupplier
					send email
						to LocalNotifiedSupplier.SupplierSourceId.EmailAddress
						cc DerivedProxyEmailAddressList
						from DerivedFromEmail
						subject "<Company.FinalEventEmailSubject>"
						Attachments
							attachment TransientEventDocument
								name is AttachmentName
								mime type is "application/pdf"
						Contents
							"<Company.FinalEventEmailContent>"
							"PreviewDate:<PreviewDate>;OpenDate:<OpenDate>;CloseDate;<CloseDate>"
							"<DerivedEmailLink>"

	StateCycles
		EventLifeCycle is a StateCycle
			state field is Status

			Draft is a State

				SubType IsEvent Field Rules
					PreviewDate
						if (InformalQuote = true)
							initialize PreviewDate
						if (PreviewDate entered)
							constraint (PreviewDate >= current timestamp)
								"PreviewDateMustBeGreaterThanCurrentDate"
					OpenDate
						if (InformalQuote = true)
							initialize OpenDate
						if (OpenDate entered)
							constraint (OpenDate >= current timestamp)
								"OpenDateCannotBeEarlierThanCurrentDate"
					CloseDate
						if (InformalQuote = true)
							initialize CloseDate
						if (CloseDate entered)
							constraint (CloseDate >= current timestamp)
								"CloseDateCannotBeEarlierThanCurrentDate"

				Exit Rules
					PreviousState = PreviousState.Draft

				Create is a Create Action
					completion message is "Event#<this instance.SourcingEvent>HasBeenCreated"

					Field Rules
						SourcingEvent
								autosequence using Company.SourcingGroup.LastSourcingEvent
						CreateAmendments
							if (!CreateByCopy
							and	Company.AmendmentSelected)
								default to true
						AllowSupplierQandA
							if (!CreateByCopy)
								default to true
						DisplayLowestBidAmount
							if (!CreateByCopy
							and LowestBidCond)
								default to true
						AllowTermsToBeNegotiated
							default to Company.AllowTermsToBeNegotiated

						OnlyNotifyResponders
							if (AmendmentsAllowed)
								default to Company.OnlyNotifyResponders

						DeliveryDateResponseRequired
							default to Company.DeliveryDateResponseRequired
						RequestedDeliveryDate
							if (!CloseDate entered)
								constraint (RequestedDeliveryDate >= current corporate date)
									"RequestedDeliveryDateCannotBeBeforeCurrentDate"
						AllowsConditionalQuestions
							default to true
					Action Rules
						Template = false

						if (YellowAlert entered)
							if (!RedAlert entered)
								RedAlert = Company.RedAlert
							constraint (YellowAlert >= 0)
								"CannotEnterNegativeDaysInYellowAlert"
							constraint (RedAlert entered)
								"MustEnterRedAlertNumberOfDays"
							constraint (YellowAlert > RedAlert)
								"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"
						else
							YellowAlert = Company.YellowAlert

						if (RedAlert entered)
							if (!YellowAlert entered)
								YellowAlert = Company.YellowAlert
							constraint (RedAlert >= 0)
								"CannotEnterNegativeDaysInRedAlert"
							constraint (YellowAlert entered)
								"MustEnterYellowAlertNumberOfDays"
							constraint (RedAlert < YellowAlert)
								"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"
						else
							RedAlert = Company.RedAlert

				CreateFromWizard is a Create Action
					Field Rules
						SourcingEvent
								autosequence using Company.SourcingGroup.LastSourcingEvent
						CreateAmendments
							if (!CreateByCopy
							and	Company.AmendmentSelected)
								default to true
						AllowSupplierQandA
							if (!CreateByCopy)
								default to true
						DisplayLowestBidAmount
							if (!CreateByCopy
							and LowestBidCond)
								default to true
						AllowTermsToBeNegotiated
							default to Company.AllowTermsToBeNegotiated

						OnlyNotifyResponders
							if (AmendmentsAllowed)
								default to Company.OnlyNotifyResponders

						DeliveryDateResponseRequired
							default to Company.DeliveryDateResponseRequired
						RequestedDeliveryDate
							if (!CloseDate entered)
								constraint (RequestedDeliveryDate >= current corporate date)
									"RequestedDeliveryDateCannotBeBeforeCurrentDate"
						AllowsConditionalQuestions
							default to true
					Action Rules
						Template = false

				CreateInternalEvent is a Create Action
					completion message is "Event#<this instance.SourcingEvent>HasBeenCreated"

					Field Rules
						SourcingEvent
								autosequence using Company.SourcingGroup.LastSourcingEvent

						CreateAmendments
							if (Company.AmendmentSelected)
								default to true

						AllowTermsToBeNegotiated
							default to Company.AllowTermsToBeNegotiated

						DeliveryDateResponseRequired
							default to Company.DeliveryDateResponseRequired

						AllowsConditionalQuestions
							default to true

					Action Rules
						Template			 	 = false
						InternalEvent		 	 = true
						AllowSupplierQandA   	 = false
						OnlyNotifyResponders 	 = false
						PostingOptions       	 = 3 
						Sealed               	 = false
						DisplayLowestBidAmount 	 = false
						LowestBidOption          = 0
						DisplayPlanHoldersList   = false
						AllowTermsToBeNegotiated = false
						TwoStepBidding           = 0

						if (YellowAlert entered)
							if (!RedAlert entered)
								RedAlert = Company.RedAlert
							constraint (YellowAlert >= 0)
								"CannotEnterNegativeDaysInYellowAlert"
							constraint (RedAlert entered)
								"MustEnterRedAlertNumberOfDays"
							constraint (YellowAlert > RedAlert)
								"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"
						else
							YellowAlert = Company.YellowAlert

						if (RedAlert entered)
							if (!YellowAlert entered)
								YellowAlert = Company.YellowAlert
							constraint (RedAlert >= 0)
								"CannotEnterNegativeDaysInRedAlert"
							constraint (YellowAlert entered)
								"MustEnterYellowAlertNumberOfDays"
							constraint (RedAlert < YellowAlert)
								"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"
						else
							RedAlert = Company.RedAlert

				CreateEventTemplate is a Create Action
					completion message is "EventTemplate#<this instance.SourcingEvent>HasBeenCreated"

					Action Rules
						Template = true
						if (!Company.SourcingGroup.LastSourcingTemplate entered)
							invoke SetTemplate Company.SourcingGroup

					Field Rules
						SourcingEvent
							autosequence using Company.SourcingGroup.LastSourcingTemplate
						CreateAmendments
							if (Company.AmendmentSelected)
								default to true
						AllowSupplierQandA
							default to true
						AllowTermsToBeNegotiated
							default to Company.AllowTermsToBeNegotiated
						OnlyNotifyResponders
							if (AmendmentsAllowed)
								default to Company.OnlyNotifyResponders
						DeliveryDateResponseRequired
							default to Company.DeliveryDateResponseRequired
						AllowsConditionalQuestions
							default to true

				CreateEventFromEvent is a Create Action
					default label is "CreateFromEvent"
					completion message is "Event#<this instance.SourcingEvent>HasBeenCreated"

					Parameters
						Company							is a SourcingCompany
						FromEvent						is a SourcingEvent
						NewName							is a Description
						NewDescription					is Text
						NewEventReference				is a Description
						NewSourcingEventType			is a SourcingEventType
						NewBuyer						is a Buyer
						NewCategory						is a Category
						NewSubCategory					is a SubCategory
						NewCurrencyCode					is a Currency
						NewAllowResponseInOtherCurrency	is Boolean
							default label is "Allow Responses in a Different Currency"
						NewPostingOptions				is a PostingOptions
						NewDisplayPlanHoldersList		is Boolean
						NewCreateAmendments				is Boolean
						NewOnlyNotifyResponders			is Boolean
						NewAllowSupplierQandA			is Boolean
							default label is "Allow Supplier Q & A"
						NewDisplayBidTabulation			is Numeric 1
							States
								DoNotDisplay								value is 1
								DisplayWhenEventAwardedAndClosed			value is 2
								DisplayWhenEventClosedForBidding			value is 3
								DisplayWhenEventAwardedAndClosedOrCanceled	value is 4
								DisplayWhenEventClosedForBiddingOrCanceled	value is 5
						NewInformalQuote				is Boolean
						NewRequireBidBond				is Boolean
						NewBidBondPercent				is Numeric size 2
						NewTwoStepBidding				is Numeric size 1
							States
								Separate value is 1
									default label is "TechnicalProposalSubmittedSeparatelyFromBidAmounts"
								Combined value is 2
									default label is "TechnicalProposalAndBidAmountsSubmittedAtTheSameTime"
						NewBestAndFinalOffer			is Boolean
						NewVendorItemProcessing			is a VendorItemProcessing
						NewPreviewDate					is TimeStamp
						NewOpenDate						is TimeStamp
						NewCloseDate					is TimeStamp
						NewQandAOpenDate				is TimeStamp
							default label is "Q & A Open"
						NewQandACloseDate				is TimeStamp
							default label is "Q & A Close"
						NewDisputeCloseDate				is TimeStamp
						NewRequestedDeliveryDate		is Date
						NewDefaultEffectiveDate			is Date
						NewDefaultExpirationDate		is Date
						CopySelectAll					is Boolean
						CopyEventQuestions				is Boolean
						CopyArticlesAndTerms			is Boolean
						CopyEventMeetings				is Boolean
						CopyEventAttachments			is Boolean
						CopyEventContacts				is Boolean
						CopyEventComments				is Boolean
						CopyBuyerWeighting				is Boolean
						CopyEventLines					is Boolean
						CopyEventLineQuestions			is Boolean
						CopyEventLineComments			is Boolean
						CopyEventLineAttachments		is Boolean
						CopyEventLineDistributions		is Boolean
						CopyEventLineAOC				is Boolean
						CopyNotifications               is Boolean

					Parameter Rules
						Company
							required
						FromEvent
							required
							constraint (FromEvent exists
								and FromEvent.IsEvent)
								"EventDoesNotExist"
						NewName
							required
							initial value is FromEvent.Name
							default to FromEvent.Name
						NewDescription
							initial value is FromEvent.Description
							default to FromEvent.Description
						NewEventReference
							initial value is FromEvent.EventReference
							default to FromEvent.EventReference
						NewSourcingEventType
							initial value is FromEvent.SourcingEventType
							default to FromEvent.SourcingEventType
						NewBuyer
							initial value is FromEvent.Buyer
							default to FromEvent.Buyer
						NewCategory
							initial value is FromEvent.Category
							default to FromEvent.Category
						NewSubCategory
							initial value is FromEvent.SubCategory
							default to FromEvent.SubCategory
						NewCurrencyCode
							initial value is FromEvent.CurrencyCode
							default to FromEvent.CurrencyCode
						NewAllowResponseInOtherCurrency
							initial value is FromEvent.AllowResponseInOtherCurrency
						NewPostingOptions
							initial value is FromEvent.PostingOptions
							default to FromEvent.PostingOptions
						NewDisplayPlanHoldersList
							initial value is FromEvent.DisplayPlanHoldersList
						NewCreateAmendments
							initial value is FromEvent.CreateAmendments
						NewOnlyNotifyResponders
							initial value is FromEvent.OnlyNotifyResponders
						NewAllowSupplierQandA
							initial value is FromEvent.AllowSupplierQandA
						NewDisplayBidTabulation
							initial value is FromEvent.DisplayBidTabulation
						NewInformalQuote
							initial value is FromEvent.InformalQuote
						NewRequireBidBond
							initial value is FromEvent.RequireBidBond
						NewBidBondPercent
							initial value is FromEvent.BidBondPercent
						NewTwoStepBidding
							initial value is FromEvent.TwoStepBidding
						NewBestAndFinalOffer
							initial value is FromEvent.BestAndFinalOffer
						NewVendorItemProcessing
							initial value is FromEvent.VendorItemProcessing
						NewRequestedDeliveryDate
							if (!NewCloseDate entered)
								constraint (NewRequestedDeliveryDate >= current corporate date)
									"RequestedDeliveryDateCannotBeBeforeCurrentDate"
						CopySelectAll
							initial value is true
						CopyEventLineQuestions
							constraint (CopyEventLines)
								"CannotCopyEventLineQuestionsWithoutCopyingEventLines"
						CopyEventLineComments
							constraint (CopyEventLines)
								"CannotCopyEventLineCommentsWithoutCopyingEventLines"
						CopyEventLineAttachments
							constraint (CopyEventLines)
								"CannotCopyEventLineAttachmentsWithoutCopyingEventLines"
						CopyEventLineDistributions
							constraint (CopyEventLines)
								"CannotCopyEventLineDistributionsWithoutCopyingEventLines"
						CopyEventLineAOC
							constraint (CopyEventLines)
								"CannotCopyEventLineAOCWithoutCopyingEventLines"

					Local Fields
						LocalSourcingEventQuestion		is a SourcingEventQuestion view
						LocalSourcingEventArticle		is a SourcingEventArticle view
						LocalSourcingEventTerm			is a SourcingEventTermAndCondition view
						LocalSourcingEventLine			is a SourcingEventLine view
						LocalSourcingEventLineQuestion  is a SourcingEventLineQuestion view

					Action Rules
						if (CopyEventQuestions
						or	CopyArticlesAndTerms
						or	CopyEventMeetings
						or	CopyEventAttachments
						or	CopyEventContacts
						or	CopyEventComments
						or  CopyBuyerWeighting
						or	CopyEventLines
						or	CopyEventLineQuestions
						or	CopyEventLineComments
						or	CopyEventLineAttachments
						or	CopyEventLineDistributions
						or  CopyEventLineAOC
						or  CopyNotifications)
							constraint (!CopySelectAll)
								"CannotCheckSelectAllOptionWhenIndividualCopyOptionsAreChecked"

						LocalItemGroup = Company.SourcingGroup 

						invoke Create this instance
							fill in fields from FromEvent
							invoked.CreateByCopy 	  	= true
							invoked.CreateFromLibrary 	= true
							invoked.Name					= NewName
							invoked.Description				= NewDescription
							invoked.EventReference			= NewEventReference
							invoked.SourcingEventType 		= NewSourcingEventType
							invoked.Buyer 					= NewBuyer
							invoked.Category 				= NewCategory
							invoked.SubCategory 			= NewSubCategory
							invoked.CurrencyCode            = NewCurrencyCode
							invoked.AllowResponseInOtherCurrency = NewAllowResponseInOtherCurrency
							invoked.PostingOptions 			= NewPostingOptions
							invoked.DisplayPlanHoldersList	= NewDisplayPlanHoldersList
							invoked.CreateAmendments 		= NewCreateAmendments
							invoked.OnlyNotifyResponders    = NewOnlyNotifyResponders
							invoked.AllowSupplierQandA		= NewAllowSupplierQandA
							invoked.DisplayBidTabulation    = NewDisplayBidTabulation
							invoked.InformalQuote 			= NewInformalQuote
							invoked.PreviewDate 			= NewPreviewDate
							invoked.OpenDate 				= NewOpenDate
							invoked.CloseDate 				= NewCloseDate
							invoked.QandAOpenDate 			= NewQandAOpenDate
							invoked.QandACloseDate 			= NewQandACloseDate
							invoked.DisputeCloseDate 		= NewDisputeCloseDate
							invoked.RequireBidBond          = NewRequireBidBond
							invoked.BidBondPercent          = NewBidBondPercent
							invoked.TwoStepBidding          = NewTwoStepBidding
							invoked.BestAndFinalOffer       = NewBestAndFinalOffer
							invoked.VendorItemProcessing    = NewVendorItemProcessing
							initialize invoked.LastVersionNumber
							initialize invoked.Status
							initialize invoked.ApprovalStatus
							initialize invoked.NotificationStatus
							initialize invoked.PreviousState
							initialize invoked.AlreadyNotified
							initialize invoked.Rejected
							initialize invoked.EventSearchDocument
							initialize invoked.RequestedDeliveryDate
							initialize invoked.ConsolidateAward
							initialize invoked.FinalizedDate
							initialize invoked.CancelDate
							initialize invoked.NumberOfLines
							initialize invoked.CommoditySearch
							initialize invoked.StepTwoCloseDate
							initialize invoked.BestAndFinalCloseDate
							initialize invoked.BuyerWeightingFinalDate
							invoked.BestAndFinalStarted = false
							invoked.StepTwoStarted      = false
							invoked.AllowsConditionalQuestions = true

							if (!CopySelectAll and !CopyBuyerWeighting)
								initialize invoked.IncompleteBuyerScoringEdit

						if (CopySelectAll or CopyEventMeetings)
							for each FromEvent.SourcingEventMeeting set
								invoke Create SourcingEventMeeting set
									fill in fields from each
									initialize invoked.MeetingDate

						if (CopySelectAll or CopyEventAttachments)
							for each FromEvent.SourcingEventAttachment set
								invoke Create SourcingEventAttachment set
									fill in fields from each

						if (CopySelectAll or CopyEventContacts)
							for each FromEvent.SourcingEventContact set
								if (each.Contact entered)
									invoke CreateContactFromEmployee SourcingEventContact set
										fill in fields from each
								else
									invoke CreateAdHocContact SourcingEventContact set
										fill in fields from each

						if (CopySelectAll or CopyEventComments)
							for each FromEvent.SourcingEventComment set
								invoke Create SourcingEventComment set
									fill in fields from each

						if (CopySelectAll or CopyEventLines)
							for each FromEvent.SourcingEventCommodities set
								invoke Create SourcingEventCommodities set
									fill in fields from each

						if (CopySelectAll or CopyEventQuestions)
							for each FromEvent.SourcingEventQuestion set
								invoke Create SourcingEventQuestion set
									assign result to LocalSourcingEventQuestion
									fill in fields from each

								for each each.SourcingEventQuestionValue set
									invoke CreateDisplay LocalSourcingEventQuestion.SourcingEventQuestion.SourcingEventQuestionValue set
										fill in fields from each

								for each each.SourcingEventQuestionAllocation set
									invoke InternalCreate LocalSourcingEventQuestion.SourcingEventQuestion.SourcingEventQuestionAllocation set
										fill in fields from each

								LocalQuestion				= LocalSourcingEventQuestion.Question
								LocalOriginalQuestion		= each.SourcingEventQuestion
								LocalOriginalSourcingEvent	= each.SourcingEvent

						if (CopySelectAll or CopyArticlesAndTerms)
							for each FromEvent.ActiveSourcingEventArticlesRel
								invoke Create SourcingEventArticle set
									assign result to LocalSourcingEventArticle
									fill in fields from each
										except invoked.LastTermAndConditionDisplayOrder

								for each each.ActiveSourcingEventTermAndConditionRel
									invoke Create LocalSourcingEventArticle.SourcingEventArticle.SourcingEventTermAndCondition set
										assign result to LocalSourcingEventTerm
										fill in fields from each
											except invoked.DisplayOrder
											except invoked.LastChildTermAndConditionDisplayOrder

									for each each.SourcingEventTermAndConditionAttachment set
										invoke Create LocalSourcingEventTerm.SourcingEventTermAndCondition.SourcingEventTermAndConditionAttachment set
											fill in fields from each

						if (CopySelectAll or CopyBuyerWeighting)
							for each FromEvent.SourcingEventBuyerWeighting set
								invoke Create SourcingEventBuyerWeighting set
									fill in fields from each
							for each FromEvent.SourcingEventWeightingBuyer set
								invoke Create SourcingEventWeightingBuyer set
									fill in fields from each

						if (CopySelectAll or CopyNotifications)
							for each FromEvent.SourcingEventNotificationRel
								invoke Create SourcingEventNotification set
									fill in fields from each

						if (CopySelectAll or CopyEventLines)
							for each FromEvent.SourcingEventLine set
								invoke Create SourcingEventLine set
									assign result to LocalSourcingEventLine
									invoked.CreateFromAnother 	    = true
									if (each.ContractOutput)
										invoked.DefaultEffectiveDate	= NewDefaultEffectiveDate
										invoked.DefaultExpirationDate 	= NewDefaultExpirationDate
									if (each.OutputType.PO)
										invoked.RequestedDeliveryDate   = NewRequestedDeliveryDate
									fill in fields from each
									initialize invoked.Status
									initialize invoked.OutputCreated
									if (!NewRequestedDeliveryDate entered)
										initialize invoked.RequestedDeliveryDate
									initialize invoked.CancelDate
									initialize invoked.CancelledQuantity
									if (each.ItemNumber exists
									and each.ItemType.Special)
										initialize invoked.ItemType
										initialize invoked.UOM

								if (CopySelectAll or CopyEventLineDistributions)
									if (each.ContractOutput
									or (each.OutputType.PO
									and !each.ItemType.Inventoried))
										for each each.SourcingEventLineDistribution set
											invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineDistribution set
												fill in fields from each
												invoked.Percent = each.Percent

								if (CopySelectAll or CopyEventLineComments)
									for each each.SourcingEventLineComment set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineComment set
											fill in fields from each

								if (CopySelectAll or CopyEventLineAttachments)
									for each each.SourcingEventLineAttachment set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineAttachment set
											fill in fields from each

								if (CopySelectAll or CopyEventLineQuestions)
									for each each.SourcingEventLineQuestion set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineQuestion set
											assign result to LocalSourcingEventLineQuestion
											fill in fields from each

										for each each.SourcingEventLineQuestionValue set
											invoke CreateDisplay LocalSourcingEventLineQuestion.SourcingEventLineQuestion.SourcingEventLineQuestionValue set
												fill in fields from each

										for each each.SourcingEventLineQuestionAllocation set
											invoke InternalCreate LocalSourcingEventLineQuestion.SourcingEventLineQuestion.SourcingEventLineQuestionAllocation set
												fill in fields from each

										LocalQuestion				= LocalSourcingEventLineQuestion.Question
										LocalOriginalQuestion		= each.SourcingEventLineQuestion
										LocalOriginalSourcingEvent	= each.SourcingEvent
										LocalOriginalSourcingEventLine = each.SourcingEventLine

								if (CopySelectAll or CopyEventLineAOC)
									for each each.SourcingEventLineAOC set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineAOC set
											fill in fields from each

				CreateEventFromTemplateOverrideCompany is a Create Action 
					default label is "CreateEventFromTemplateForOverrideCompany"
					completion message is "Event#<this instance.SourcingEvent>HasBeenCreated"

					Parameters
						Company							is a SourcingCompany
						TemplateEvent					is a SourcingEvent
							context of Company
						OverrideCompany					is a SourcingCompany
						NewName							is a Description
						NewDescription					is Text
						NewEventReference				is a Description
						NewSourcingEventType			is a SourcingEventType
							context of Company
						NewBuyer						is a Buyer
							context of Company
						NewCurrencyCode					is a Currency
						NewAllowResponseInOtherCurrency	is Boolean
							default label is "Allow Responses in a Different Currency"
						NewCategory						is a Category
							context of Company
						NewSubCategory					is a SubCategory
							context of Company
						NewPostingOptions				is a PostingOptions
						NewDisplayPlanHoldersList		is Boolean
						NewCreateAmendments				is Boolean
						NewAllowSupplierQandA			is Boolean
							default label is "Allow Supplier Q & A"
						NewDisplayBidTabulation			is Numeric 1
							States
								DoNotDisplay								value is 1
								DisplayWhenEventAwardedAndClosed			value is 2
								DisplayWhenEventClosedForBidding			value is 3
								DisplayWhenEventAwardedAndClosedOrCanceled	value is 4
								DisplayWhenEventClosedForBiddingOrCanceled	value is 5
						NewOnlyNotifyResponders			is Boolean
						NewInformalQuote				is Boolean
						NewRequireBidBond				is Boolean
						NewBidBondPercent				is Numeric size 2
						NewTwoStepBidding				is Numeric size 1
							States
								Separate value is 1
									default label is "TechnicalProposalSubmittedSeparatelyFromBidAmounts"
								Combined value is 2
									default label is "TechnicalProposalAndBidAmountsSubmittedAtTheSameTime"
						NewBestAndFinalOffer			is Boolean
						NewVendorItemProcessing			is a VendorItemProcessing
						NewPreviewDate					is TimeStamp
						NewOpenDate						is TimeStamp
						NewCloseDate					is TimeStamp
						NewQandAOpenDate				is TimeStamp
							default label is "Q & A Open"
						NewQandACloseDate				is TimeStamp
							default label is "Q & A Close"
						NewDisputeCloseDate				is TimeStamp
						NewRequestedDeliveryDate		is Date
						NewDefaultContractType			is a ContractType
							context of Company
						NewDefaultContractSubType		is a ContractSubtype
							context of Company
						NewDefaultContractClass			is a ContractClassification
							context of Company
						NewDefaultContractSubClass		is a ContractSubclassification
							context of Company
						NewDefaultEffectiveDate			is Date
						NewDefaultExpirationDate		is Date
						NewDefaultScheduleFrequency		is a ScheduleFrequency
						NewDefaultMaxReleaseNumber		is Numeric size 4
						NewDefaultParticipant			is a Participant
						CopySelectAll					is Boolean
						CopyEventQuestions				is Boolean
						CopyArticlesAndTerms			is Boolean
						CopyEventMeetings				is Boolean
						CopyEventAttachments			is Boolean
						CopyEventContacts				is Boolean
						CopyEventComments				is Boolean
						CopyBuyerWeighting				is Boolean
						CopyEventLines					is Boolean
						CopyEventLineQuestions			is Boolean
						CopyEventLineComments			is Boolean
						CopyEventLineAttachments		is Boolean
						CopyEventLineDistributions		is Boolean
						CopyEventLineAOC				is Boolean

					Parameter Rules
						Company
							required
						TemplateEvent
							required
							constraint (TemplateEvent exists
								and TemplateEvent.IsTemplate)
								"EventTemplateDoesNotExist"
						OverrideCompany
							required
						NewName
							required
							initial value is TemplateEvent.Name
							default to TemplateEvent.Name
						NewDescription
							initial value is TemplateEvent.Description
							default to TemplateEvent.Description
						NewEventReference
							initial value is TemplateEvent.EventReference
							default to TemplateEvent.EventReference
						NewSourcingEventType
							initial value is TemplateEvent.SourcingEventType
							default to TemplateEvent.SourcingEventType
						NewBuyer
							initial value is TemplateEvent.Buyer
							default to TemplateEvent.Buyer
						NewCategory
							initial value is TemplateEvent.Category
							default to TemplateEvent.Category
						NewSubCategory
							initial value is TemplateEvent.SubCategory
							default to TemplateEvent.SubCategory
						NewCurrencyCode
							initial value is TemplateEvent.CurrencyCode
							default to TemplateEvent.CurrencyCode
						NewAllowResponseInOtherCurrency
							initial value is TemplateEvent.AllowResponseInOtherCurrency
						NewPostingOptions
							initial value is TemplateEvent.PostingOptions
							default to TemplateEvent.PostingOptions
						NewDisplayPlanHoldersList
							initial value is TemplateEvent.DisplayPlanHoldersList
						NewCreateAmendments
							initial value is TemplateEvent.CreateAmendments
						NewOnlyNotifyResponders
							initial value is TemplateEvent.OnlyNotifyResponders
						NewAllowSupplierQandA
							initial value is TemplateEvent.AllowSupplierQandA
						NewDisplayBidTabulation
							initial value is TemplateEvent.DisplayBidTabulation
						NewInformalQuote
							initial value is TemplateEvent.InformalQuote
						NewRequireBidBond
							initial value is TemplateEvent.RequireBidBond
						NewBidBondPercent
							initial value is TemplateEvent.BidBondPercent
						NewTwoStepBidding
							initial value is TemplateEvent.TwoStepBidding
						NewBestAndFinalOffer
							initial value is TemplateEvent.BestAndFinalOffer
						NewVendorItemProcessing
							initial value is TemplateEvent.VendorItemProcessing
						NewDefaultEffectiveDate
							constraint (TemplateEvent.EffectiveDateValid)
								"CannotEnterEffectiveDateForPoOutputOrNoOutputThatIsNotGoingToContract"
						NewDefaultExpirationDate
							constraint (TemplateEvent.EffectiveDateValid)
								"CannotEnterExpirationDateForPoOutputOrNoOutputThatIsNotGoingToContract"
							if (NewDefaultEffectiveDate entered)
								constraint (NewDefaultExpirationDate > NewDefaultEffectiveDate)
									"DefaultExpirationDateMustBeLaterThanDefaultEffectiveDate"
							if (TemplateEvent.OutputType.Standing)
								if (NewDefaultMaxReleaseNumber entered)
									cannot be entered
										"CanEnterEitherExpirationDateOrMaxReleaseNumberForStandingOutputType"
						NewRequestedDeliveryDate
							if (!NewCloseDate entered)
								constraint (NewRequestedDeliveryDate >= current corporate date)
									"RequestedDeliveryDateCannotBeBeforeCurrentDate"
						NewDefaultContractType
							if (!NewDefaultContractSubType entered)
								constraint (NewDefaultContractType.PurchaseType = TemplateEvent.ContractType)
									"PurchaseTypeForContractTypeDoesNotMatchOutputTypeOnTemplate"
						NewDefaultContractSubType
							constraint (NewDefaultContractType entered)
								"CannotEnterContractSubtypeWithoutContractType"
							constraint (NewDefaultContractSubType.PurchaseType = TemplateEvent.ContractType)
								"TypeForContractSubtypeDoesNotMatchOutputTypeOnTemplate"
						NewDefaultContractSubClass
							constraint (NewDefaultContractClass entered)
								"CannotEnterContractSubclassificationWithoutContractClassification"
						NewDefaultScheduleFrequency
							constraint (TemplateEvent.OutputType.Standing)
								"CanOnlyEnterScheduleFrequencyForStandingOutputType;TemplateOutputTypeNotStanding"
						NewDefaultMaxReleaseNumber
							constraint (TemplateEvent.OutputType.Standing)
								"CanOnlyEnterMaxReleaseNumberForStandingOutputType;TemplateOutputTypeNotStanding"
							if (TemplateEvent.OutputType.Standing)
								if (NewDefaultExpirationDate entered)
									cannot be entered
										"CanEnterEitherExpirationDateOrMaxReleaseNumberForStandingOutputType"
						NewDefaultParticipant
							constraint (TemplateEvent.OutputType.Standing)
								"CanOnlyEnterParticipantForStandingOutputType:TemplateOutputTypeNotStanding"

						CopySelectAll
							initial value is true
						CopyEventLineQuestions
							constraint (CopyEventLines)
								"CannotCopyTemplateLineQuestionsWithoutCopyingEventLines"
						CopyEventLineComments
							constraint (CopyEventLines)
								"CannotCopyTemplateLineCommentsWithoutCopyingEventLines"
						CopyEventLineAttachments
							constraint (CopyEventLines)
								"CannotCopyTemplateLineAttachmentsWithoutCopyingEventLines"
						CopyEventLineDistributions
							constraint (CopyEventLines)
								"CannotCopyTemplateLineDistributionsWithoutCopyingEventLines"
						CopyEventLineAOC
							constraint (CopyEventLines)
								"CannotCopyEventLineAOCWithoutCopyingEventLines"

					Local Fields
						LocalSourcingEventQuestion		is a SourcingEventQuestion view
						LocalSourcingEventArticle		is a SourcingEventArticle view
						LocalSourcingEventTerm			is a SourcingEventTermAndCondition view
						LocalSourcingEventLine			is a SourcingEventLine view
						LocalSourcingEventLineQuestion	is a SourcingEventLineQuestion view

					Action Rules
						if (CopyEventQuestions
							or CopyArticlesAndTerms
							or CopyEventMeetings
							or CopyEventAttachments
							or CopyEventContacts
							or CopyEventComments
							or CopyBuyerWeighting
							or CopyEventLines
							or CopyEventLineQuestions
							or CopyEventLineComments
							or CopyEventLineAttachments
							or CopyEventLineDistributions
							or CopyEventLineAOC)
							constraint (!CopySelectAll)
								"CannotCheckSelectAllOptionWhenIndividualCopyOptionsAreChecked"

						LocalItemGroup = Company.SourcingGroup 

						invoke Create this instance
							fill in fields from TemplateEvent
							invoked.Company							= OverrideCompany
							invoked.CreateByCopy					= true
							invoked.CreateFromLibrary				= true
							invoked.Name							= NewName
							invoked.Description						= NewDescription
							invoked.EventReference					= NewEventReference
							invoked.SourcingEventType				= NewSourcingEventType
							invoked.Buyer							= NewBuyer
							invoked.Category						= NewCategory
							invoked.SubCategory						= NewSubCategory
							invoked.CurrencyCode					= NewCurrencyCode
							invoked.AllowResponseInOtherCurrency	= NewAllowResponseInOtherCurrency
							invoked.PostingOptions					= NewPostingOptions
							invoked.DisplayPlanHoldersList			= NewDisplayPlanHoldersList
							invoked.CreateAmendments				= NewCreateAmendments
							invoked.OnlyNotifyResponders			= NewOnlyNotifyResponders
							invoked.AllowSupplierQandA				= NewAllowSupplierQandA
							invoked.DisplayBidTabulation			= NewDisplayBidTabulation
							invoked.InformalQuote					= NewInformalQuote
							invoked.PreviewDate						= NewPreviewDate
							invoked.OpenDate						= NewOpenDate
							invoked.CloseDate						= NewCloseDate
							invoked.QandAOpenDate					= NewQandAOpenDate
							invoked.QandACloseDate					= NewQandACloseDate
							invoked.DisputeCloseDate				= NewDisputeCloseDate
							invoked.DefaultContractType				= NewDefaultContractType
							invoked.DefaultContractSubType			= NewDefaultContractSubType
							invoked.DefaultContractClass			= NewDefaultContractClass
							invoked.DefaultContractSubClass			= NewDefaultContractSubClass
							invoked.DefaultEffectiveDate			= NewDefaultEffectiveDate
							invoked.DefaultExpirationDate			= NewDefaultExpirationDate
							invoked.DefaultScheduleFrequency		= NewDefaultScheduleFrequency
							invoked.DefaultMaxReleaseNumber			= NewDefaultMaxReleaseNumber
							invoked.DefaultParticipant				= NewDefaultParticipant

							initialize invoked.Template
							initialize invoked.Status
							initialize invoked.ApprovalStatus
							initialize invoked.NotificationStatus
							initialize invoked.PreviousState
							initialize invoked.AlreadyNotified
							initialize invoked.Rejected
							initialize invoked.EventSearchDocument
							initialize invoked.ConsolidateAward
							initialize invoked.FinalizedDate
							initialize invoked.CancelDate
							initialize invoked.NumberOfLines
							initialize invoked.CommoditySearch
							invoked.RequireBidBond					= NewRequireBidBond
							invoked.BidBondPercent					= NewBidBondPercent
							invoked.TwoStepBidding					= NewTwoStepBidding
							invoked.BestAndFinalOffer				= NewBestAndFinalOffer
							invoked.VendorItemProcessing			= NewVendorItemProcessing
							invoked.AllowsConditionalQuestions		= true

							if (!CopySelectAll and !CopyBuyerWeighting)
								initialize invoked.IncompleteBuyerScoringEdit

						if (CopySelectAll or CopyEventMeetings)
							for each TemplateEvent.SourcingEventMeeting set
								invoke Create SourcingEventMeeting set
									fill in fields from each
									initialize invoked.MeetingDate

						if (CopySelectAll or CopyEventAttachments)
							for each TemplateEvent.SourcingEventAttachment set
								invoke Create SourcingEventAttachment set
									fill in fields from each

						if (CopySelectAll or CopyEventContacts)
							for each TemplateEvent.SourcingEventContact set
								if (each.Contact entered)
									invoke CreateContactFromEmployee SourcingEventContact set
										fill in fields from each
								else
									invoke CreateAdHocContact SourcingEventContact set
										fill in fields from each

						if (CopySelectAll or CopyEventComments)
							for each TemplateEvent.SourcingEventComment set
								invoke Create SourcingEventComment set
									fill in fields from each

						for each TemplateEvent.SourcingEventCommodities set
							invoke Create SourcingEventCommodities set
								fill in fields from each

						if (CopySelectAll or CopyEventQuestions)
							for each TemplateEvent.SourcingEventQuestion set
								invoke Create SourcingEventQuestion set
									assign result to LocalSourcingEventQuestion
									fill in fields from each

								for each each.SourcingEventQuestionValue set
									invoke CreateDisplay LocalSourcingEventQuestion.SourcingEventQuestion.SourcingEventQuestionValue set
										fill in fields from each

								for each each.SourcingEventQuestionAllocation set
									invoke InternalCreate LocalSourcingEventQuestion.SourcingEventQuestion.SourcingEventQuestionAllocation set
										fill in fields from each

						if (CopySelectAll or CopyArticlesAndTerms)
							for each TemplateEvent.ActiveSourcingEventArticlesRel
								invoke Create SourcingEventArticle set
									assign result to LocalSourcingEventArticle
									fill in fields from each
										except invoked.LastTermAndConditionDisplayOrder

								for each each.ActiveSourcingEventTermAndConditionRel
									invoke Create SourcingEventTermAndCondition
										assign result to LocalSourcingEventTerm
										fill in fields from each
											except invoked.DisplayOrder
											except invoked.LastChildTermAndConditionDisplayOrder
										invoked.Company       			= OverrideCompany
										invoked.SourcingEvent 			= SourcingEvent
										invoked.SourcingEventArticle 	= LocalSourcingEventArticle.SourcingEventArticle

									for each each.SourcingEventTermAndConditionAttachment set
										invoke Create LocalSourcingEventTerm.SourcingEventTermAndCondition.SourcingEventTermAndConditionAttachment set
											fill in fields from each

						if (CopySelectAll or CopyBuyerWeighting)
							for each TemplateEvent.SourcingEventBuyerWeighting set
								invoke Create SourcingEventBuyerWeighting set
									fill in fields from each
							for each TemplateEvent.SourcingEventWeightingBuyer set
								invoke Create SourcingEventWeightingBuyer set
									fill in fields from each

						if (CopySelectAll or CopyEventLines)
							for each TemplateEvent.SourcingEventLine set
								invoke Create SourcingEventLine set
									assign result to LocalSourcingEventLine
									invoked.CreateFromAnother 	    = true
									if (each.OutputType.PO)
										invoked.RequestedDeliveryDate = NewRequestedDeliveryDate
									fill in fields from each
									invoked.Company					= OverrideCompany
									initialize invoked.Status
									initialize invoked.OutputCreated
									initialize invoked.CancelDate
									if (each.ItemNumber exists
									and each.ItemType.Special)
										initialize invoked.ItemType
										initialize invoked.UOM
									if (each.ItemNumber exists
									and each.ItemType.Inventoried
									and each.OutputType.PO)
										initialize invoked.ItemType

								if (CopySelectAll or CopyEventLineDistributions)
									if (each.ContractOutput
									or (each.OutputType.PO
									and !each.ItemType.Inventoried))
										for each each.SourcingEventLineDistribution set
											invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineDistribution set
												fill in fields from each

								if (CopySelectAll or CopyEventLineComments)
									for each each.SourcingEventLineComment set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineComment set
											fill in fields from each

								if (CopySelectAll or CopyEventLineAttachments)
									for each each.SourcingEventLineAttachment set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineAttachment set
											fill in fields from each

								if (CopySelectAll or CopyEventLineQuestions)
									for each each.SourcingEventLineQuestion set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineQuestion set
											assign result to LocalSourcingEventLineQuestion
											fill in fields from each

										for each each.SourcingEventLineQuestionValue set
											invoke CreateDisplay LocalSourcingEventLineQuestion.SourcingEventLineQuestion.SourcingEventLineQuestionValue set
												fill in fields from each

										for each each.SourcingEventLineQuestionAllocation set
											invoke InternalCreate LocalSourcingEventLineQuestion.SourcingEventLineQuestion.SourcingEventLineQuestionAllocation set
												fill in fields from each

								if (CopySelectAll or CopyEventLineAOC)
									for each each.SourcingEventLineAOC set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineAOC set
											fill in fields from each

				CreateEventFromEventTemplate is a Create Action 
					default label is "CreateEventFromTemplate"
					completion message is "Event#<this instance.SourcingEvent>HasBeenCreated"

					Parameters
						Company							is a SourcingCompany
						TemplateEvent					is a SourcingEvent
						NewName							is a Description
						NewDescription					is Text
						NewEventReference				is a Description
						NewSourcingEventType			is a SourcingEventType
						NewBuyer						is a Buyer
						NewCurrencyCode					is a Currency
						NewAllowResponseInOtherCurrency	is Boolean
							default label is "Allow Responses in a Different Currency"
						NewCategory						is a Category
						NewSubCategory					is a SubCategory
						NewPostingOptions				is a PostingOptions
						NewDisplayPlanHoldersList		is Boolean
						NewCreateAmendments				is Boolean
						NewAllowSupplierQandA			is Boolean
							default label is "Allow Supplier Q & A"
						NewDisplayBidTabulation			is Numeric 1
							States
								DoNotDisplay								value is 1
								DisplayWhenEventAwardedAndClosed			value is 2
								DisplayWhenEventClosedForBidding			value is 3
								DisplayWhenEventAwardedAndClosedOrCanceled	value is 4
								DisplayWhenEventClosedForBiddingOrCanceled	value is 5
						NewOnlyNotifyResponders			is Boolean
						NewInformalQuote				is Boolean
						NewRequireBidBond				is Boolean
						NewBidBondPercent				is Numeric size 2
						NewTwoStepBidding				is Numeric size 1
							States
								Separate value is 1
									default label is "TechnicalProposalSubmittedSeparatelyFromBidAmounts"
								Combined value is 2
									default label is "TechnicalProposalAndBidAmountsSubmittedAtTheSameTime"
						NewBestAndFinalOffer			is Boolean
						NewVendorItemProcessing			is a VendorItemProcessing
						NewPreviewDate					is TimeStamp
						NewOpenDate						is TimeStamp
						NewCloseDate					is TimeStamp
						NewQandAOpenDate				is TimeStamp
							default label is "Q & A Open"
						NewQandACloseDate				is TimeStamp
							default label is "Q & A Close"
						NewDisputeCloseDate				is TimeStamp
						NewRequestedDeliveryDate		is Date
						NewDefaultContractType			is a ContractType
						NewDefaultContractSubType		is a ContractSubtype
						NewDefaultContractClass			is a ContractClassification
						NewDefaultContractSubClass		is a ContractSubclassification
						NewDefaultEffectiveDate			is Date
						NewDefaultExpirationDate		is Date
						NewDefaultScheduleFrequency		is a ScheduleFrequency
						NewDefaultMaxReleaseNumber		is Numeric size 4
						NewDefaultParticipant			is a Participant
						CopySelectAll					is Boolean
						CopyEventQuestions				is Boolean
						CopyArticlesAndTerms			is Boolean
						CopyEventMeetings				is Boolean
						CopyEventAttachments			is Boolean
						CopyEventContacts				is Boolean
						CopyEventComments				is Boolean
						CopyBuyerWeighting				is Boolean
						CopyEventLines					is Boolean
						CopyEventLineQuestions			is Boolean
						CopyEventLineComments			is Boolean
						CopyEventLineAttachments		is Boolean
						CopyEventLineDistributions		is Boolean
						CopyEventLineAOC				is Boolean

					Parameter Rules
						Company
							required
						TemplateEvent
							required
							constraint (TemplateEvent exists
								and TemplateEvent.IsTemplate)
								"EventTemplateDoesNotExist"
						NewName
							required
							initial value is TemplateEvent.Name
							default to TemplateEvent.Name
						NewDescription
							initial value is TemplateEvent.Description
							default to TemplateEvent.Description
						NewEventReference
							initial value is TemplateEvent.EventReference
							default to TemplateEvent.EventReference
						NewSourcingEventType
							initial value is TemplateEvent.SourcingEventType
							default to TemplateEvent.SourcingEventType
						NewBuyer
							initial value is TemplateEvent.Buyer
							default to TemplateEvent.Buyer
						NewCategory
							initial value is TemplateEvent.Category
							default to TemplateEvent.Category
						NewSubCategory
							initial value is TemplateEvent.SubCategory
							default to TemplateEvent.SubCategory
						NewCurrencyCode
							initial value is TemplateEvent.CurrencyCode
							default to TemplateEvent.CurrencyCode
						NewAllowResponseInOtherCurrency
							initial value is TemplateEvent.AllowResponseInOtherCurrency
						NewPostingOptions
							initial value is TemplateEvent.PostingOptions
							default to TemplateEvent.PostingOptions
						NewDisplayPlanHoldersList
							initial value is TemplateEvent.DisplayPlanHoldersList
						NewCreateAmendments
							initial value is TemplateEvent.CreateAmendments
						NewOnlyNotifyResponders
							initial value is TemplateEvent.OnlyNotifyResponders
						NewAllowSupplierQandA
							initial value is TemplateEvent.AllowSupplierQandA
						NewDisplayBidTabulation
							initial value is TemplateEvent.DisplayBidTabulation
						NewInformalQuote
							initial value is TemplateEvent.InformalQuote
						NewRequireBidBond
							initial value is TemplateEvent.RequireBidBond
						NewBidBondPercent
							initial value is TemplateEvent.BidBondPercent
						NewTwoStepBidding
							initial value is TemplateEvent.TwoStepBidding
						NewBestAndFinalOffer
							initial value is TemplateEvent.BestAndFinalOffer
						NewVendorItemProcessing
							initial value is TemplateEvent.VendorItemProcessing
						NewDefaultEffectiveDate
							constraint (TemplateEvent.EffectiveDateValid)
								"CannotEnterEffectiveDateForPoOutputOrNoOutputThatIsNotGoingToContract"
						NewDefaultExpirationDate
							constraint (TemplateEvent.EffectiveDateValid)
								"CannotEnterExpirationDateForPoOutputOrNoOutputThatIsNotGoingToContract"
							if (NewDefaultEffectiveDate entered)
								constraint (NewDefaultExpirationDate > NewDefaultEffectiveDate)
									"DefaultExpirationDateMustBeLaterThanDefaultEffectiveDate"
							if (TemplateEvent.OutputType.Standing)
								if (NewDefaultMaxReleaseNumber entered)
									cannot be entered
										"CanEnterEitherExpirationDateOrMaxReleaseNumberForStandingOutputType"
						NewRequestedDeliveryDate
							if (!NewCloseDate entered)
								constraint (NewRequestedDeliveryDate >= current corporate date)
									"RequestedDeliveryDateCannotBeBeforeCurrentDate"
						NewDefaultContractType
							if (!NewDefaultContractSubType entered)
								constraint (NewDefaultContractType.PurchaseType = TemplateEvent.ContractType)
									"PurchaseTypeForContractTypeDoesNotMatchOutputTypeOnTemplate"
						NewDefaultContractSubType
							constraint (NewDefaultContractType entered)
								"CannotEnterContractSubtypeWithoutContractType"
							constraint (NewDefaultContractSubType.PurchaseType = TemplateEvent.ContractType)
								"TypeForContractSubtypeDoesNotMatchOutputTypeOnTemplate"
						NewDefaultContractSubClass
							constraint (NewDefaultContractClass entered)
								"CannotEnterContractSubclassificationWithoutContractClassification"
						NewDefaultScheduleFrequency
							constraint (TemplateEvent.OutputType.Standing)
								"CanOnlyEnterScheduleFrequencyForStandingOutputType;TemplateOutputTypeNotStanding"
						NewDefaultMaxReleaseNumber
							constraint (TemplateEvent.OutputType.Standing)
								"CanOnlyEnterMaxReleaseNumberForStandingOutputType;TemplateOutputTypeNotStanding"
							if (TemplateEvent.OutputType.Standing)
								if (NewDefaultExpirationDate entered)
									cannot be entered
										"CanEnterEitherExpirationDateOrMaxReleaseNumberForStandingOutputType"
						NewDefaultParticipant
							constraint (TemplateEvent.OutputType.Standing)
								"CanOnlyEnterParticipantForStandingOutputType:TemplateOutputTypeNotStanding"

						CopySelectAll
							initial value is true
						CopyEventLineQuestions
							constraint (CopyEventLines)
								"CannotCopyTemplateLineQuestionsWithoutCopyingEventLines"
						CopyEventLineComments
							constraint (CopyEventLines)
								"CannotCopyTemplateLineCommentsWithoutCopyingEventLines"
						CopyEventLineAttachments
							constraint (CopyEventLines)
								"CannotCopyTemplateLineAttachmentsWithoutCopyingEventLines"
						CopyEventLineDistributions
							constraint (CopyEventLines)
								"CannotCopyTemplateLineDistributionsWithoutCopyingEventLines"
						CopyEventLineAOC
							constraint (CopyEventLines)
								"CannotCopyEventLineAOCWithoutCopyingEventLines"

					Local Fields
						LocalSourcingEventQuestion		is a SourcingEventQuestion view
						LocalSourcingEventArticle		is a SourcingEventArticle view
						LocalSourcingEventTerm			is a SourcingEventTermAndCondition view
						LocalSourcingEventLine			is a SourcingEventLine view
						LocalSourcingEventLineQuestion	is a SourcingEventLineQuestion view

					Action Rules
						if (CopyEventQuestions
							or CopyArticlesAndTerms
							or CopyEventMeetings
							or CopyEventAttachments
							or CopyEventContacts
							or CopyEventComments
							or CopyBuyerWeighting
							or CopyEventLines
							or CopyEventLineQuestions
							or CopyEventLineComments
							or CopyEventLineAttachments
							or CopyEventLineDistributions
							or CopyEventLineAOC)
							constraint (!CopySelectAll)
								"CannotCheckSelectAllOptionWhenIndividualCopyOptionsAreChecked"

						LocalItemGroup = Company.SourcingGroup 

						invoke Create this instance
							fill in fields from TemplateEvent
							invoked.CreateByCopy					= true
							invoked.CreateFromLibrary				= true
							invoked.Name							= NewName
							invoked.Description						= NewDescription
							invoked.EventReference					= NewEventReference
							invoked.SourcingEventType				= NewSourcingEventType
							invoked.Buyer							= NewBuyer
							invoked.Category						= NewCategory
							invoked.SubCategory						= NewSubCategory
							invoked.CurrencyCode					= NewCurrencyCode
							invoked.AllowResponseInOtherCurrency	= NewAllowResponseInOtherCurrency
							invoked.PostingOptions					= NewPostingOptions
							invoked.DisplayPlanHoldersList			= NewDisplayPlanHoldersList
							invoked.CreateAmendments				= NewCreateAmendments
							invoked.OnlyNotifyResponders			= NewOnlyNotifyResponders
							invoked.AllowSupplierQandA				= NewAllowSupplierQandA
							invoked.DisplayBidTabulation			= NewDisplayBidTabulation
							invoked.InformalQuote					= NewInformalQuote
							invoked.PreviewDate						= NewPreviewDate
							invoked.OpenDate						= NewOpenDate
							invoked.CloseDate						= NewCloseDate
							invoked.QandAOpenDate					= NewQandAOpenDate
							invoked.QandACloseDate					= NewQandACloseDate
							invoked.DisputeCloseDate				= NewDisputeCloseDate
							invoked.DefaultContractType				= NewDefaultContractType
							invoked.DefaultContractSubType			= NewDefaultContractSubType
							invoked.DefaultContractClass			= NewDefaultContractClass
							invoked.DefaultContractSubClass			= NewDefaultContractSubClass
							invoked.DefaultEffectiveDate			= NewDefaultEffectiveDate
							invoked.DefaultExpirationDate			= NewDefaultExpirationDate
							invoked.DefaultScheduleFrequency		= NewDefaultScheduleFrequency
							invoked.DefaultMaxReleaseNumber			= NewDefaultMaxReleaseNumber
							invoked.DefaultParticipant				= NewDefaultParticipant

							initialize invoked.Template
							initialize invoked.Status
							initialize invoked.ApprovalStatus
							initialize invoked.NotificationStatus
							initialize invoked.PreviousState
							initialize invoked.AlreadyNotified
							initialize invoked.Rejected
							initialize invoked.EventSearchDocument
							initialize invoked.ConsolidateAward
							initialize invoked.FinalizedDate
							initialize invoked.CancelDate
							initialize invoked.NumberOfLines
							initialize invoked.CommoditySearch
							invoked.RequireBidBond					= NewRequireBidBond
							invoked.BidBondPercent					= NewBidBondPercent
							invoked.TwoStepBidding					= NewTwoStepBidding
							invoked.BestAndFinalOffer				= NewBestAndFinalOffer
							invoked.VendorItemProcessing			= NewVendorItemProcessing
							invoked.AllowsConditionalQuestions		= true

							if (!CopySelectAll and !CopyBuyerWeighting)
								initialize invoked.IncompleteBuyerScoringEdit

						if (CopySelectAll or CopyEventMeetings)
							for each TemplateEvent.SourcingEventMeeting set
								invoke Create SourcingEventMeeting set
									fill in fields from each
									initialize invoked.MeetingDate

						if (CopySelectAll or CopyEventAttachments)
							for each TemplateEvent.SourcingEventAttachment set
								invoke Create SourcingEventAttachment set
									fill in fields from each

						if (CopySelectAll or CopyEventContacts)
							for each TemplateEvent.SourcingEventContact set
								if (each.Contact entered)
									invoke CreateContactFromEmployee SourcingEventContact set
										fill in fields from each
								else
									invoke CreateAdHocContact SourcingEventContact set
										fill in fields from each

						if (CopySelectAll or CopyEventComments)
							for each TemplateEvent.SourcingEventComment set
								invoke Create SourcingEventComment set
									fill in fields from each

						for each TemplateEvent.SourcingEventCommodities set
							invoke Create SourcingEventCommodities set
								fill in fields from each

						if (CopySelectAll or CopyEventQuestions)
							for each TemplateEvent.SourcingEventQuestion set
								invoke Create SourcingEventQuestion set
									assign result to LocalSourcingEventQuestion
									fill in fields from each

								for each each.SourcingEventQuestionValue set
									invoke CreateDisplay LocalSourcingEventQuestion.SourcingEventQuestion.SourcingEventQuestionValue set
										fill in fields from each

								for each each.SourcingEventQuestionAllocation set
									invoke InternalCreate LocalSourcingEventQuestion.SourcingEventQuestion.SourcingEventQuestionAllocation set
										fill in fields from each

						if (CopySelectAll or CopyArticlesAndTerms)
							for each TemplateEvent.ActiveSourcingEventArticlesRel
								invoke Create SourcingEventArticle set
									assign result to LocalSourcingEventArticle
									fill in fields from each
										except invoked.LastTermAndConditionDisplayOrder

								for each each.ActiveSourcingEventTermAndConditionRel
									invoke Create SourcingEventTermAndCondition
										assign result to LocalSourcingEventTerm
										fill in fields from each
											except invoked.DisplayOrder
											except invoked.LastChildTermAndConditionDisplayOrder
										invoked.Company       			= Company
										invoked.SourcingEvent 			= SourcingEvent
										invoked.SourcingEventArticle 	= LocalSourcingEventArticle.SourcingEventArticle

									for each each.SourcingEventTermAndConditionAttachment set
										invoke Create LocalSourcingEventTerm.SourcingEventTermAndCondition.SourcingEventTermAndConditionAttachment set
											fill in fields from each

						if (CopySelectAll or CopyBuyerWeighting)
							for each TemplateEvent.SourcingEventBuyerWeighting set
								invoke Create SourcingEventBuyerWeighting set
									fill in fields from each
							for each TemplateEvent.SourcingEventWeightingBuyer set
								invoke Create SourcingEventWeightingBuyer set
									fill in fields from each

						if (CopySelectAll or CopyEventLines)
							for each TemplateEvent.SourcingEventLine set
								invoke Create SourcingEventLine set
									assign result to LocalSourcingEventLine
									invoked.CreateFromAnother 	    = true
									if (each.OutputType.PO)
										invoked.RequestedDeliveryDate = NewRequestedDeliveryDate
									fill in fields from each
									initialize invoked.Status
									initialize invoked.OutputCreated
									initialize invoked.CancelDate
									if (each.ItemNumber exists
									and each.ItemType.Special)
										initialize invoked.ItemType
										initialize invoked.UOM

								if (CopySelectAll or CopyEventLineDistributions)
									if (each.ContractOutput
									or (each.OutputType.PO
									and !each.ItemType.Inventoried))
										for each each.SourcingEventLineDistribution set
											invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineDistribution set
												fill in fields from each

								if (CopySelectAll or CopyEventLineComments)
									for each each.SourcingEventLineComment set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineComment set
											fill in fields from each

								if (CopySelectAll or CopyEventLineAttachments)
									for each each.SourcingEventLineAttachment set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineAttachment set
											fill in fields from each

								if (CopySelectAll or CopyEventLineQuestions)
									for each each.SourcingEventLineQuestion set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineQuestion set
											assign result to LocalSourcingEventLineQuestion
											fill in fields from each

										for each each.SourcingEventLineQuestionValue set
											invoke CreateDisplay LocalSourcingEventLineQuestion.SourcingEventLineQuestion.SourcingEventLineQuestionValue set
												fill in fields from each

										for each each.SourcingEventLineQuestionAllocation set
											invoke InternalCreate LocalSourcingEventLineQuestion.SourcingEventLineQuestion.SourcingEventLineQuestionAllocation set
												fill in fields from each

								if (CopySelectAll or CopyEventLineAOC)
									for each each.SourcingEventLineAOC set
										invoke Create LocalSourcingEventLine.SourcingEventLine.SourcingEventLineAOC set
											fill in fields from each

				Update is an Update Action
					Action Rules
						if (YellowAlert entered)
							constraint (YellowAlert >= 0)
								"CannotEnterNegativeDaysInYellowAlert"
							constraint (RedAlert entered)
								"MustEnterRedAlertNumberOfDays"
							constraint (YellowAlert > RedAlert)
								"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"

						if (RedAlert entered)
							constraint (RedAlert >= 0)
								"CannotEnterNegativeDaysInRedAlert"
							constraint (YellowAlert entered)
								"MustEnterYellowAlertNumberOfDays"
							constraint (RedAlert < YellowAlert)
								"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"

						if (LowestBidCond)
							constraint (DisplayLowestBidAmount)
								"DisplayLowestBidAmountIsRequiredWhenUsingTheLowestBidOption"

						if (BuyerWeightingFinalDate changed)
							constraint (AnyLinePrelimAwarded = false)
								"CannotChangeFinalBuyerWeightingEntryDate;AwardingHasAlreadyTakenPlace"

						if (Sealed
						and LinesWithLowestBid exists)
							confirmation required
								"Warning:AllLinesThatHaveLowestBidOptionAndDisplayLowestBidAmountWillBeSetToNoIfTheyAreTurnedOnForAnyLines.DoYouWantToContinue?"

						if  (Category changed
						and !SubCategory changed
						and  SubCategory entered)
							constraint (SubCategory exists)
								"SubCategoryNotValidForCategory"

						if  (TwoStepBidding changed
						and  ReqLineQuestions
						and  TwoStepBidding.Separate)
							confirmation required
								"RequiredQuestionsExist;WithThisTwoStepBiddingOptionLineLevelInformationWillNotBeEnteredUntilStepTwo_(Pricing);TheQuestionAnswersWillNotBeAbleToBeUsedToAcceptTheTechnicalProposal;DoYouWantToContinue?"

						include CheckPlanHoldersListFlag

					Exit Rules
						if (Sealed
						and LinesWithLowestBid exists)
							invoke Update Draft LinesWithLowestBid
								invoked.LowestBidOption		   = 0
								invoked.DisplayLowestBidAmount = false

						include UpdatePlanHoldersList

				InternalEventUpdate is an Update Action

				Delete is a Delete Action
					Action Rules
						invoke Delete Draft SourcingEventLine set

				GetSuppliers is an Instance Action
					valid when (!PostingOptions.DoNotDisplayOnPortal)
					Parameters
						Approved               is Boolean
						ValidatedSuppliersOnly is Boolean
						GetAllSuppliers        is Boolean

					Parameter Rules
						ValidatedSuppliersOnly
							initial value is Company.ValidatedSuppliersForEvent

					Action Rules
						constraint (!UnenteredCommodities exists)
							"CommodityCodesMustBeAssignedToAllLines"
						constraint (SourcingEventLine set exists)
							"CannotUseGetSuppliers,EventLinesDoNotExist"
						invoke Delete SourcingEventNotification set
						if (!GetAllSuppliers)
							invoke GetSuppliers SourcingEventCommodities
								invoked.ParmCompany		        = Company
								invoked.ParmSourcingEvent       = SourcingEvent
								invoked.OnlyApprovedCommodities = Approved
								invoked.OnlyValidatedSuppliers  = ValidatedSuppliersOnly
						else 
						if (GetAllSuppliers)
							for each SupplierContactsRel
								LocalSupplierGroup            = each.SupplierGroup
								LocalNotifiedSupplierNumber   = each.Supplier
								LocalNotifiedSupplierSourceId = each.SupplierSourceId
								invoke Update EventNotificationRel
								invoke Update EventPlanHolderRel							

				Release is an Instance Action
					Action Rules
						constraint (IsEvent)
							"CannotReleaseAnEventTemplate"
						if (!InformalQuote)
							constraint (OpenDate entered)
								"OpenDateIsRequiredToPostEvent"
							constraint (CloseDate entered)
								"CloseDateIsRequiredToPostEvent"
							if (AllowSupplierQandA)
								constraint (QandAOpenDate entered
								and			QandACloseDate entered)
									"MustEnter<QAndAString>DateRange"
							if (Company.DisputePeriod)
								constraint (DisputeCloseDate entered)
									"DisputeCloseDateIsRequiredToPostEvent"
						constraint (Description entered)
							"DescriptionIsRequiredToPostEvent"
						for each SourcingEventContactRel
							if (each.Contact entered)
								constraint (each.Contact.IsActive)
									"CannotRelease;Contact<each.Contact.Name>IsInactive"
						constraint (SourcingEventType entered)
							"EventTypeIsRequiredToPostEvent"
						constraint (Buyer entered)
							"BuyerIsRequiredToPostEvent"
						constraint (Buyer.Active)
							"BuyerIsInactive"
						if (PreviewDate entered)
							constraint (PreviewDate >= current timestamp)
								"CannotReleaseIfPreviewDateEarlierThanCurrentDate"
						if (OpenDate entered)
							constraint (OpenDate >= current timestamp)
								"CannotReleaseIfOpenDateEarlierThanCurrentDate"
						if (EventBuyerWeightingRel exists)
							constraint (SourcingEventWeightingBuyerRel exists)
								"BuyerWeightingHasBeenDefined;MustHaveAtLeastOneWeightingBuyer"
						constraint (SourcingEventLine set exists)
							"MustHaveAtLeastOneEventLine"
						constraint (!LinesWithOldRequestedDeliveryDate exists)
							"LinesWithARequestedDeliveryDateCannotHaveADateBeforeToday;UpdateRequestedDeliveryDateOnLine<first LinesWithOldRequestedDeliveryDate.SourcingEventLine>"
						constraint (!MeetingsWithNoDatesRel exists)
							"MeetingDatesRequiredForAllMeetings"
						constraint (!ListQuestionsWithNoValue exists)
							"ListTypeQuestionsExistWithoutAssociatedValuesDefined"
						constraint (!ListLineQuestionsWithNoValue exists)
							"ListTypeLineQuestionsExistWithoutAssociatedValuesDefined"
						if (PostingOptions.DisplayForNotifiedSuppliersOnly)
							constraint (SourcingEventNotification set exists)
								"MustHaveAtLeastOneSupplierWhenThePostingOptionIsDisplayForNotifiedSuppliersOnly"
						constraint (!EventBuyerWeightingZeroRel exists)
							"AllBuyerWeightingCriteriaMustHaveAPercentageEntered"
						if (IncompleteBuyerScoringEdit !entered)
							constraint (TotalBuyerWeighting =0)
								"MustEnterAnIncompleteBuyerScoringEditWhenUsingBuyerWeighting"

						if (TotalWeightingByEvent > 0)
							constraint (WeightingsTotal)
								"EventWeightingPercentageMustEqual100%"
						if (TotalLineWeighting > 0)
							constraint (WeightingCriteria entered)
								"MustDefineWeightingCriteriaForEventWhenLineWeightingsAreEntered"
							constraint (LineWeightingsTotal)
								"LineWeightingOverridePercentagesMustEqual100%"
						if (WeightingCriteria.DeliveryWeighting entered)
							constraint (POLines exists)
								"MustHaveOneLineWithPOOutputTypeToUseDeliveryWeightingCriteria"
						for each QuestionsWithWeighting
							constraint (each.ScoreAllocationEntered exists)
								"WeightingIsEnteredForEventQuestion<each.SourcingEventQuestion>;MustDefineAScoreAllocation"
						if (AllowTermsToBeNegotiated)
							constraint (SourcingEventTermsByDisplayRel exists)
								"NoTermsDefinedForEvent;CannotAllowTermsToBeNegotiated"
						if (TwoStepBidding.Separate)
							constraint (HasQuestionWithRequiredAttachment)
								"EventWithTwoStepBiddingMustHaveAtLeastOneQuestionWithARequiredAttachment"
						if (TwoStepBidding.Combined
						and !HasQuestionWithRequiredAttachment)
							constraint (HasLineQuestionWithRequiredAttachment)
								"EventWithTwoStepBiddingMustHaveAtLeastOneQuestionWithARequiredAttachment"
						if (HeaderAOCExists)
							constraint (HasPoLinesOrNoOutput)
								"EventHasHeaderAOCButAllLinesHaveContractOutput;ContractsDoNotHaveHeaderAOC"
						invoke Release Draft SourcingEventLine set
						make transition to Open

			Open is a State

				SubType IsEvent Field Rules
					Description
						required
					SourcingEventType
						required
					PreviewDate
						if (PreviewDate changed)
							if (current timestamp >= PreviewDate)
								cannot be changed
									"PreviewDateCannotBeChangedIfCurrentDateAndTimeIsGreaterThanPreviewDateAndTime"
						if (PreviewDate changed)
							if (current timestamp >= OpenDate)
								cannot be entered
									"PreviewDateCannotBeEnteredIfCurrentDateAndTimeIsGreaterThanOpenDateAndTime"
						if (PreviewDate changed)
							constraint (PreviewDate >= current timestamp)
								"PreviewDateMustBeGreaterThanCurrentDate"
						if (InformalQuote)
							cannot be entered
		 						"PreviewDateCannotBeEnteredWhenDatesNotRequiredOnSelectedEvent"
					OpenDate
						if (OpenDate changed)
							if (current timestamp >= OpenDate)
								cannot be changed
									"OpenDateCannotBeChangedIfCurrentDateAndTimeIsGreaterThanOpenDateAndTime"
						if (OpenDate changed)
							constraint (OpenDate >= current timestamp)
								"OpenDateMustBeGreaterThanCurrentDate"
						if (!InformalQuote)
							required
						else
							cannot be entered
		 						"OpenDateCannotBeEnteredWhenDatesNotRequiredOnSelectedEvent"
						if (!OpenAvailable
						and old OpenDate <= current timestamp)
							cannot be changed
 								"CannotChangeOpenDateWhileEventIsInProgress"
					CloseDate
						if (CloseDate changed)
							if (CloseDate < old CloseDate)
								if (SubmittedResponsesExist)
									if (!Sealed)
										if (Company.CloseDateChangeNonSealedEarlier = 1)
											cannot be changed
												"CannotChangeCloseDateToAnEarlierDate;SubmittedResponsesExist"
										else
										if (Company.CloseDateChangeNonSealedEarlier = 2)
											cannot be changed
												"CannotChangeCloseDateToAnEarlierDateForAnOpenEvent"
									else
									if (Sealed)
										if (Company.CloseDateChangeSealedEarlier = 1)
											cannot be changed
												"CannotChangeCloseDateToAnEarlierDate;SubmittedResponsesExist"
										else
										if (Company.CloseDateChangeSealedEarlier = 2)
											cannot be changed
												"CannotChangeCloseDateToAnEarlierDateForAnOpenEvent"
								else
								if (!SubmittedResponsesExist)
									if (!Sealed)
										if (Company.CloseDateChangeNonSealedEarlier = 2)
											cannot be changed
												"CannotChangeCloseDateToAnEarlierDateForAnOpenEvent"
									if (Sealed)
										if (Company.CloseDateChangeSealedEarlier = 2)
											cannot be changed
												"CannotChangeCloseDateToAnEarlierDateForAnOpenEvent"
							if (CloseDate > old CloseDate)
								if (SubmittedResponsesExist)
									if (!Sealed)
										if (Company.CloseDateChangeNonSealedLater = 1)
											cannot be changed
												"CannotChangeCloseDateToALaterDate;SubmittedResponsesExist"
                                        else
										if (Company.CloseDateChangeNonSealedLater = 2)
											cannot be changed
												"CannotChangeCloseDateToALaterDateForAnOpenEvent"
									else
									if (Sealed)
										if (Company.ChangeCloseDateWithResponses = 1)
											cannot be changed
												"CannotChangeCloseDateToALaterDate;SubmittedResponsesExist"
										else
										if (Company.ChangeCloseDateWithResponses = 2)
											cannot be changed
												"CannotChangeCloseDateToALaterDateForAnOpenEvent"												
								else
								if (!SubmittedResponsesExist)
									if (!Sealed)
										if (Company.CloseDateChangeNonSealedLater = 2)
											cannot be changed
												"CannotChangeCloseDateToALaterDateForAnOpenEvent"
									if (Sealed)
										if (Company.ChangeCloseDateWithResponses = 2)
											cannot be changed
												"CannotChangeCloseDateToALaterDateForAnOpenEvent"
								constraint (SourcingEventResponseOpenModificationRequestRel !exists)
									"CannotChangeCloseDateToALaterDate;ResponseModificationRequestsExistWithAModifyByDatePriorToTheNewCloseDate"				
							constraint (current timestamp <= old CloseDate)
								"CannotChangeCloseDateAfterTheEventIsClosed"
							constraint (CloseDate >= current timestamp)
					 			"CloseDateCannotBeEarlierThanCurrentDate"
						if (!InformalQuote)
							required
						else
							cannot be entered
		 						"CloseDateCannotBeEnteredWhenDatesNotRequiredOnSelectedEvent"
					QandAOpenDate
						if (AllowSupplierQandA)
							if (PreviewDate entered)
								constraint (QandAOpenDate >= PreviewDate)
									"<QAndAOpenDateString>MustBeGreaterThanPreviewDate"
							else
							if (OpenDate entered)
								required
									"<QAndAOpenDateString>IsRequired"
								constraint (QandAOpenDate >= OpenDate)
									"<QAndAOpenDateString>MustBeGreaterThanOpenDate"
							else
								cannot be entered
									"<QAndAOpenDateString>CannotBeEnteredWhenEventOpenDateIsNotEntered"
						else
							cannot be entered
								"<QAndAOpenDateString>CannotBeEnteredWhen<AllowSupplierQAndAString>FlagIsNo"
					QandACloseDate
					   	if (AllowSupplierQandA)
					   		constraint (QandACloseDate >= QandAOpenDate)
								"<QAndACloseDateString>MustBeGreaterThan<QAndAOpenDateString>"
							if (CloseDate entered)
								required
									"<QAndACloseDateString>IsRequired"
								constraint (QandACloseDate <= CloseDate)
									"<QAndACloseDateString>MustBeLessThanEventCloseDate"
							else
								cannot be entered
									"<QAndACloseDateString>CannotBeEnteredWhenEventCloseDateIsNotEntered"
						else
							cannot be entered
								"<QAndACloseDateString>CannotBeEnteredWhen<AllowSupplierQAndAString>FlagIsNo"
					RequestedDeliveryDate
						if (RequestedDeliveryDate changed
						and RequestedDeliveryDate entered)
							constraint (RequestedDeliveryDate >= current corporate date)
								"RequestedDeliveryDateCannotBeBeforeCurrentDate"
					DisputeCloseDate
						if (Company.DisputePeriod)
							constraint (DisputeCloseDate entered)
								"DisputeCloseDateIsRequired"
					CreateAmendments
						cannot be changed
							"CannotChangeCreateAmendmentsFlagAfterEventHasBeenReleased"
					InformalQuote
						cannot be changed
							"CannotChangeDatesNotRequiredOnEventFlagAfterEventHasBeenReleased"
					Sealed
						cannot be changed
							"CannotChangeSealedBidFlagAfterEventHasBeenReleased"
					DeliveryScoringOption
						if (DeliveryScoringOption changed
						and DeliveryScoringOption.OnRequestedDeliveryDate)
							constraint (!POLinesWithNoRequestedDeliveryDate exists)
								"AllLinesWithPOOutputMustHaveARequestedDeliveryDateEnteredIfTheEventDeliveryWeightingOptionIsOnRequestedDeliveryDate;RequestedDeliveryDateMustBeAddedToLine<first POLinesWithNoRequestedDeliveryDate.SourcingEventLine>"
					DisplayPlanHoldersList
						include CheckPlanHoldersListFlag

					TwoStepBidding
						cannot be changed
							"CannotChangeTwoStepBiddingSelectionAfterEventHasBeenReleased"
					RequireBidBond
						if (HeaderResponsesExist)
							cannot be changed
								"CannotChangeRequireBidBondAfterResponsesHaveBeenEntered"
					BestAndFinalCloseDate
						if (BestAndFinalCloseDate changed)
							if (BestAndFinalCloseDate < old BestAndFinalCloseDate)
								if (!Sealed)
									if (Company.CloseDateChangeNonSealedEarlier = 2
									or  Company.CloseDateChangeNonSealedEarlier = 1)
										cannot be changed
											"CannotChangeBestAndFinalCloseDateToAnEarlierDateForAnOpenEvent"
								if (Sealed)
									if (Company.CloseDateChangeSealedEarlier = 2
									or  Company.CloseDateChangeSealedEarlier = 1)
										cannot be changed
											"CannotChangeBestAndFinalCloseDateToAnEarlierDateForAnOpenEvent"
							else
							if (BestAndFinalCloseDate > old BestAndFinalCloseDate)
								if (!Sealed)
									if (Company.CloseDateChangeNonSealedLater = 2
									or  Company.CloseDateChangeNonSealedLater = 1)
										cannot be changed
											"CannotChangeBestAndFinalCloseDateToALaterDateForAnOpenEvent"
								if (Sealed)
									if (Company.ChangeCloseDateWithResponses = 2
									or  Company.ChangeCloseDateWithResponses = 1)
										cannot be changed
											"CannotChangeBestAndFinalCloseDateToALaterDateForAnOpenEvent"
							constraint (BestAndFinalCloseDate > CloseDate)
								"BestAndFinalCloseDateMustBeAfterInitialCloseDate"
							constraint (BestAndFinalCloseDate entered)
								"BestAndFinalCloseDateMustBeEntered"
							constraint (BestAndFinalCloseDate > current corporate date)
								"BestAndFinalCloseDateMustBeAfterCurrentDate"
					StepTwoCloseDate
						if (StepTwoCloseDate changed)
							if (StepTwoCloseDate < old StepTwoCloseDate)
								if (!Sealed)
									if (Company.CloseDateChangeNonSealedEarlier = 2
									or  Company.CloseDateChangeNonSealedEarlier = 1)
										cannot be changed
											"CannotChangeStepTwoCloseDateToAnEarlierDateForAnOpenEvent"
								if (Sealed)
									if (Company.CloseDateChangeSealedEarlier = 2
									or  Company.CloseDateChangeSealedEarlier = 1)
										cannot be changed
											"CannotChangeStepTwoCloseDateToAnEarlierDateForAnOpenEvent"
							else
							if (StepTwoCloseDate > old StepTwoCloseDate)
								if (!Sealed)
									if (Company.CloseDateChangeNonSealedLater = 2
									or  Company.CloseDateChangeNonSealedLater = 1)
										cannot be changed
											"CannotChangeStepTwoCloseDateToALaterDateForAnOpenEvent"
								if (Sealed)
									if (Company.ChangeCloseDateWithResponses = 2
									or  Company.ChangeCloseDateWithResponses = 1)
										cannot be changed
											"CannotChangeStepTwoCloseDateToALaterDateForAnOpenEvent"
							constraint (StepTwoCloseDate > CloseDate)
								"StepTwo_(Pricing)CloseDateMustBeAfterInitialCloseDate"
							constraint (StepTwoCloseDate entered)
								"StepTwo_(Pricing)CloseDateMustBeEntered"
							constraint (StepTwoCloseDate > current corporate date)
								"StepTwo_(Pricing)CloseDateMustBeAfterCurrentDate"

		 			VendorItemProcessing
						if (VendorItemProcessing changed)
		 					constraint (!SEResponsesExists exists)
		 						"CannotChangeVendorItemProcessingWhenResponsesExist"

		 			DeliveryDateResponseRequired
		 				if (DeliveryDateResponseRequired changed)
		 					constraint (!SEResponsesExists exists)
		 						"CannotChangeDeliveryDateRequiredFlagWhenResponsesExist"

				NoBid is an Instance Action
					restricted
					Action Rules
						if (CurrentActorResponse exists)
							invoke UpdateNoBid Draft CurrentActorResponse
						else
							invoke CreateNoBid Draft SourcingEventResponse
								invoked.Company							  = Company
								invoked.SourcingEvent					  = SourcingEvent
								invoked.NotifiedSupplier.SupplierGroup    = actor.agent(SupplierSourceId).SupplierGroup
								invoked.NotifiedSupplier.Supplier         = actor.agent(SupplierSourceId).Supplier
					   			invoked.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId

				NoBidReason is an Instance Action
					restricted
					Parameters
						NoBidReason

					Parameter Rules
						NoBidReason
							required

					Action Rules
						if (CurrentActorResponse exists)
							invoke UpdateNoBidWithReason Draft CurrentActorResponse
					   			invoked.NoBidReason						  = NoBidReason
						else
							invoke CreateNoBidWithReason Draft SourcingEventResponse
								invoked.Company							  = Company
								invoked.SourcingEvent					  = SourcingEvent
								invoked.NotifiedSupplier.SupplierGroup    = actor.agent(SupplierSourceId).SupplierGroup
								invoked.NotifiedSupplier.Supplier         = actor.agent(SupplierSourceId).Supplier
					   			invoked.NotifiedSupplier.SupplierSourceId = actor.agent(SupplierSourceId).SupplierSourceId
					   			invoked.NoBidReason						  = NoBidReason

				Exit Rules
					PreviousState = PreviousState.Open

				Approval is a StateCycle
					state field is ApprovalStatus

					NeedsApproval is a State

						Entrance Rules
							if (PreviousState.Draft)
								if (!Company.EventApprovalRequired
								or 	PreviousState.Cancelled)
									invoke Approve
								else
									initiate SEventApproval process
										title is "Company<Company>SourcingEvent<SourcingEvent>"
										Criteria
											Company
										category filter is Buyer
										Variables
											Company
											SourcingEvent
											Name
										URLs
											"<linkback(webapp is SourcingManager navigation is EventPreviewPflow text is \"ViewEvent\")>"
									send email
										to Company.ApproverEmailAddress
										from DerivedFromEmail
										subject "<Company.FinalNeedsApprovalEmailSubject>"
										Contents
											"<Company.FinalNeedsApprovalEmailContent>"
							else
								if (!Company.AmendmentApprovalRequired)
									invoke Approve
								else
									initiate SEventApproval process
										title is "Company<Company>SourcingEvent<SourcingEvent>"
										Criteria
											Company
										category filter is Buyer
										Variables
											Company
											SourcingEvent
											Name
										URLs
											"<linkback(webapp is SourcingManager navigation is EventPreviewPflow text is \"ViewEvent\")>"
									send email
										to Company.ApproverEmailAddress
										from Buyer.EmployeeWorkEmailAddress
										subject "<Company.FinalNeedsApprovalEmailSubject>"
										Contents
											"<Company.FinalNeedsApprovalEmailContent>"

						Approve is an Instance Action
							restricted
							Action Rules
								if (PreviousState.Draft)
									if (PreviewDate entered
									and PreviewDate < current timestamp)
										invoke TransitionToDraft Open SourcingEventLine set
										initialize ApprovalStatus
										initialize NotificationStatus
										make transition to Draft
										send email
											to Buyer.EmployeeWorkEmailAddress
											from Company.ApproverEmailAddress
											subject "Event<SourcingEvent>-<Name>NotApproved"
											Contents
												"Event<SourcingEvent>-<Name>WasNotApproved;EventPreviewDateIsEarlierThanCurrentDate"
												"MustChangePreviewDateOnEventAndReleaseAndApproveAgain"
									else
									if (OpenDate entered
									and OpenDate < current timestamp)
										invoke TransitionToDraft Open SourcingEventLine set
										initialize ApprovalStatus
										initialize NotificationStatus
										make transition to Draft
										send email
											to Buyer.EmployeeWorkEmailAddress
											from Company.ApproverEmailAddress
											subject "Event<SourcingEvent>-<Name>NotApproved"
											Contents
												"Event<SourcingEvent>-<Name>WasNotApproved;EventOpenDateIsEarlierThanCurrentDate"
												"MustChangeOpenDateOnEventAndReleaseAndApproveAgain"
									else
										make transition to Approved
								if (!PreviousState.Draft)
									invoke Update last SourcingEventVersion set
										invoked.VersionCloseStamp = current timestamp
									make transition to Approved

						Disapprove is an Instance Action
							restricted
							Action Rules
								if (PreviousState.Draft)
									invoke TransitionToDraft Open SourcingEventLine set
									initialize ApprovalStatus
									initialize NotificationStatus
									make transition to Draft

									send email
										to Buyer.EmployeeWorkEmailAddress
										from Company.ApproverEmailAddress
										subject "<Company.FinalDisapprovedEmailSubject>"
										Contents
											"<Company.FinalDisapprovedEmailContent>"
								else
									make transition to Approved
									make transition to Amended

						Reject is an Instance Action
							restricted
							Action Rules
								invoke CancelLines Open SourcingEventLine set
								Rejected = true
								make transition to Cancelled
								initialize ApprovalStatus
								initialize NotificationStatus

								send email
									to Buyer.EmployeeWorkEmailAddress
									from Company.ApproverEmailAddress
									subject "<Company.FinalRejectedEmailSubject>"
									Contents
										"<Company.FinalRejectedEmailContent>"

						ManualApprove is an Instance Action
							Action Rules
								if (PreviousState.Draft)
									if (PreviewDate entered)
										constraint (PreviewDate >= current timestamp)
											"CannotApproveIfPreviewDateEarlierThanCurrentDate"
									if (OpenDate entered)
										constraint (OpenDate >= current timestamp)
											"CannotApproveIfOpenDateEarlierThanCurrentDate"
								if (!PreviousState.Draft)
									invoke Update last SourcingEventVersion set
										invoked.VersionCloseStamp = current timestamp
								make transition to Approved
								cancel SEventApproval process

						ManualDisapprove is an Instance Action
							Action Rules
								if (PreviousState.Draft)
									invoke TransitionToDraft Open SourcingEventLine set
									initialize ApprovalStatus
									initialize NotificationStatus
									make transition to Draft
									cancel SEventApproval process

									send email
										to Buyer.EmployeeWorkEmailAddress
										from Company.ApproverEmailAddress
										subject "<Company.FinalDisapprovedEmailSubject>"
										Contents
											"<Company.FinalDisapprovedEmailContent>"
								else
									make transition to Approved
									make transition to Amended
									cancel SEventApproval process

						ManualReject is an Instance Action
							Action Rules
								invoke CancelLines Open SourcingEventLine set
								Rejected = true
								make transition to Cancelled
								cancel SEventApproval process
								initialize ApprovalStatus
								initialize NotificationStatus

								send email
									to Buyer.EmployeeWorkEmailAddress
									from Company.ApproverEmailAddress
									subject "<Company.FinalRejectedEmailSubject>"
									Contents
										"<Company.FinalRejectedEmailContent>"

					Approved is a State
						Entrance Rules
							include BuildTextIndexes

				Notification is a StateCycle
					state field is NotificationStatus

					NotNotified is a State

						on entrance to Approved
							Action Rules
								if (PreviousState.Draft)
									if (AlreadyNotified)
										make transition to Notified
									else
										if (!PostingOptions.DoNotDisplayOnPortal)
											if (Company.SendEventAvailableEmail)
												generate document EventPrint as pdf in portrait font offset is -2
													set using action SendEventAvailableEmails

											if (Company.CreateEventAvailableMessage)
												for each SourcingEventNotification set
													invoke Create SupplierContactMessage
														invoked.SupplierGroup 					= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
														invoked.Supplier 						= each.NotifiedSupplier.SupplierSourceId.Supplier
														invoked.SupplierSourceId				= each.NotifiedSupplier.SupplierSourceId
														invoked.CreationDateTime				= current timestamp
														invoked.MessageTitle					= Company.FinalEventEmailSubject
														invoked.MessageText						= Company.FinalEventEmailContent
														invoked.Status							= 1
														invoked.Priority						= 2
														invoked.SystemGenerated					= true
														invoked.ReleaseStatus					= 2
														invoked.OriginatingEvent    			= SourcingEvent
														invoked.OriginatingCompany  			= Company
														invoked.MessageOwner        			= Buyer

										make transition to Notified

								else
									if (!PostingOptions.DoNotDisplayOnPortal
									and !InSuspendProcess)
										if  (Company.SendAmendedEmail)
											if (!OnlyNotifyResponders
											and !StepTwoInProcess)
												for each SupplierSourceIdsToNotify
													include SendAmendmentEmailMessage

												for each RespondedButNotNotified
													include SendAmendmentEmailMessage

												for each PlanHoldersToNotifyRel
													include SendAmendmentEmailMessage

											else
											if (OnlyNotifyResponders
											and !StepTwoInProcess)
												for each ResponsesToEmail
													include SendAmendmentEmailMessage

											else
											if (StepTwoInProcess)
												for each ResponsesAcceptedTechnicalSendEmail
													include SendAmendmentEmailMessage

												for each ResponsesBestAndFinalSendEmail
													include SendAmendmentEmailMessage

										if  (Company.CreateAmendedMessage)
											if (!OnlyNotifyResponders
											and !StepTwoInProcess)

												for each SourcingEventNotification set
													include CreateAmendedEventSupplierContactMessage

												for each AllRespondedButNotNotified
													include CreateAmendedEventSupplierContactMessage

												for each PlanHoldersToNotifyRel
													include CreateAmendedEventSupplierContactMessage

											else
											if  (OnlyNotifyResponders
											and !StepTwoInProcess)
												for each ResponsesToEmail
													include CreateAmendedEventSupplierContactMessage

											else
											if (StepTwoInProcess)
												for each ResponsesAcceptedTechnicalSendEmail
													include CreateAmendedEventSupplierContactMessage

												for each ResponsesBestAndFinalSendEmail
													include CreateAmendedEventSupplierContactMessage

									make transition to Notified

					Notified is a State
						Entrance Rules
							if (AllCancelled)
								make transition to Cancelled
							else
							if (AllProcessed)
								make transition to Closed

						Update is an Update Action
							Action Rules
								if (YellowAlert entered)
									constraint (YellowAlert >= 0)
										"CannotEnterNegativeDaysInYellowAlert"
									constraint (RedAlert entered)
										"MustEnterRedAlertNumberOfDays"
									constraint (YellowAlert > RedAlert)
										"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"
								if (RedAlert entered)
									constraint (RedAlert >= 0)
										"CannotEnterNegativeDaysInRedAlert"
									constraint (YellowAlert entered)
										"MustEnterYellowAlertNumberOfDays"
									constraint (RedAlert < YellowAlert)
										"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"

								if (LowestBidCond)
									constraint (DisplayLowestBidAmount)
										"DisplayLowestBidAmountIsRequiredWhenUsingTheLowestBidOption"

								if  (Category changed
								and !SubCategory changed
								and  SubCategory entered)
									constraint (SubCategory exists)
										"SubCategoryNotValidForCategory"

								if (BuyerWeightingFinalDate changed)
									constraint (AnyLinePrelimAwarded = false)
										"CannotChangeFinalBuyerWeightingEntryDate;AwardingHasAlreadyTakenPlace"

								if (BeforeActive
								and OpenDate not changed)
									invoke TransitionToDraft Open SourcingEventLine set
									make transition to Draft
									initialize ApprovalStatus
									initialize NotificationStatus
									AlreadyNotified = true
								if ((OpenPreview
								or	OpenAvailable
								or  OpenDate changed)
								and RevisionControlled changed
								and InInitiateAmendmentState
								and Company.AmendmentCriteria.UpdateSourcingEvent)
									invoke Create SourcingEventVersion set
										invoked.VersionOpenStamp = current timestamp
									make transition to Amended
								include CheckPlanHoldersListFlag

							Exit Rules
								include UpdateRules
								include UpdatePlanHoldersList
								if (Sealed)
									if (CloseDate changed
									or  BestAndFinalCloseDate changed
									or  StepTwoCloseDate changed
									or  BestAndFinalStarted changed
									or  StepTwoStarted changed)
										for each SourcingEventResponse set
											invoke UpdateForSealedBids each
												invoked.ParmCloseDate 			  = CloseDate
												invoked.ParmBestAndFinalCloseDate = BestAndFinalCloseDate
												invoked.ParmStepTwoCloseDate      = StepTwoCloseDate
												invoked.ParmBestAndFinalStarted   = BestAndFinalStarted
												invoked.ParmStepTwoStarted        = StepTwoStarted

						InternalEventUpdate is an Update Action
							Action Rules
								if (RevisionControlled changed
								and InInitiateAmendmentState
								and Company.AmendmentCriteria.UpdateSourcingEvent)
									invoke Create SourcingEventVersion set
										invoked.VersionOpenStamp = current timestamp
									make transition to Amended

						UpdateAward is an Update Action
							restricted

						TransitionToDraft is an Instance Action
							restricted
							Action Rules
								invoke TransitionToDraft Open SourcingEventLine set
								make transition to Draft
								initialize ApprovalStatus
								initialize NotificationStatus
								AlreadyNotified = true

						Suspend is an Instance Action
							valid when (!ProcessedLinesExist)
							Action Rules
								make transition to Suspended

								if (!PostingOptions.DoNotDisplayOnPortal)
									if (Company.SendSuspendedEmail)
										for each SupplierSourceIdsToNotify
											LocalNotifiedSupplier = each.NotifiedSupplier
											send email
												to each.NotifiedSupplier.SupplierSourceId.EmailAddress
												cc DerivedProxyEmailAddressList
												from DerivedFromEmail
												subject "<Company.FinalSuspendEmailSubject>"
												Contents
													"<Company.FinalSuspendEmailContent>"
													"<DerivedEmailLink>"

										for each RespondedButNotNotified
											LocalNotifiedSupplier = each.NotifiedSupplier
											send email
												to each.NotifiedSupplier.SupplierSourceId.EmailAddress
												cc DerivedProxyEmailAddressList
												from DerivedFromEmail
												subject "<Company.FinalSuspendEmailSubject>"
												Contents
													"<Company.FinalSuspendEmailContent>"
													"<DerivedEmailLink>"

										for each PlanHoldersToNotifyRel
											LocalNotifiedSupplier = each.NotifiedSupplier
											send email
												to each.NotifiedSupplier.SupplierSourceId.EmailAddress
												cc DerivedProxyEmailAddressList
												from DerivedFromEmail
												subject "<Company.FinalSuspendEmailSubject>"
												Contents
													"<Company.FinalSuspendEmailContent>"
													"<DerivedEmailLink>"

									if (Company.CreateSuspendedMessage)
										for each SupplierSourceIdsToNotify
											invoke Create SupplierContactMessage
												invoked.SupplierGroup 		= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
												invoked.Supplier 			= each.NotifiedSupplier.SupplierSourceId.Supplier
												invoked.SupplierSourceId	= each.NotifiedSupplier.SupplierSourceId
												invoked.CreationDateTime	= current timestamp
												invoked.MessageTitle		= Company.FinalSuspendEmailSubject
												invoked.MessageText			= Company.FinalSuspendEmailContent
												invoked.Status				= 1
												invoked.Priority			= 2
												invoked.SystemGenerated		= true
												invoked.ReleaseStatus		= 2
												invoked.MessageOwner        = Buyer

										for each RespondedButNotNotified
											invoke Create SupplierContactMessage
												invoked.SupplierGroup 		= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
												invoked.Supplier 			= each.NotifiedSupplier.SupplierSourceId.Supplier
												invoked.SupplierSourceId	= each.NotifiedSupplier.SupplierSourceId
												invoked.CreationDateTime	= current timestamp
												invoked.MessageTitle		= Company.FinalSuspendEmailSubject
												invoked.MessageText			= Company.FinalSuspendEmailContent
												invoked.Status				= 1
												invoked.Priority			= 2
												invoked.SystemGenerated		= true
												invoked.ReleaseStatus		= 2
												invoked.OriginatingEvent    = SourcingEvent
												invoked.OriginatingCompany  = Company
												invoked.MessageOwner        = Buyer

										for each PlanHoldersToNotifyRel
											invoke Create SupplierContactMessage
												invoked.SupplierGroup 		= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
												invoked.Supplier 			= each.NotifiedSupplier.SupplierSourceId.Supplier
												invoked.SupplierSourceId	= each.NotifiedSupplier.SupplierSourceId
												invoked.CreationDateTime	= current timestamp
												invoked.MessageTitle		= Company.FinalSuspendEmailSubject
												invoked.MessageText			= Company.FinalSuspendEmailContent
												invoked.Status				= 1
												invoked.Priority			= 2
												invoked.SystemGenerated		= true
												invoked.ReleaseStatus		= 2
												invoked.OriginatingEvent    = SourcingEvent
												invoked.OriginatingCompany  = Company
												invoked.MessageOwner        = Buyer

								if (HasOpenModificationRequests)
									invoke CancelModificationRequests SourcingEventResponse
										invoked.ParmSourcingCompany = Company
										invoked.ParmSourcingEvent   = SourcingEvent

						Cancel is an Instance Action
							valid when (!ProcessedLinesExist)
							confirmation required
								"AreYouSureYouWantToCancelThisEvent?"
   	 						Action Rules
								constraint (!NonOpenLines exists)
									"CancelledOrAwardedEventLinesExist-UseCancelRemaining"
								if (InInitiateAmendmentState
			   					and Company.AmendmentCriteria.CancelSourcingEvent)
									if ((!Company.SendAmendedEmail
									and   Company.SendCanceledEmail)
									or  (!Company.CreateAmendedMessage
									and   Company.CreateCanceledMessage))
										invoke CancelNotify
									invoke Amend Open.Notified SourcingEvent
								invoke CancelLines Open SourcingEventLine set
								if ((!CreateAmendments)
								and ((current timestamp >= OpenDate)
								or (PreviewDate entered
								and current timestamp >= PreviewDate))
								or  (CreateAmendments
								and current timestamp > CloseDate
								and !InformalQuote)
		  						or  (InformalQuote
								and  AnyLinePrelimAwarded)
								or (!Company.AmendmentCriteria.CancelSourcingEvent
								or  !CreateAmendments))
									invoke CloseCancelNotify
								if (HasOpenModificationRequests)
									invoke CancelModificationRequests SourcingEventResponse
										invoked.ParmSourcingCompany = Company
										invoked.ParmSourcingEvent   = SourcingEvent

						CancelRemaining is an Instance Action
							valid when (LinesPartiallyProcessed)
							confirmation required
								"AreYouSureYouWantToCancelTheRemainingOpenLinesOnThisEvent?"
   	 						Action Rules
								constraint (NonOpenLines exists)
									"UseCancelActionToCancelEvent"
								if (InInitiateAmendmentState
			   					and Company.AmendmentCriteria.CancelSourcingEvent)
									if ((!Company.SendAmendedEmail
									and   Company.SendCanceledEmail)
									or  (!Company.CreateAmendedMessage
									and   Company.CreateCanceledMessage))
										invoke CancelNotify
									invoke Amend Open.Notified SourcingEvent
								for each OpenLines
									invoke CancelLines Open each
								if ((!CreateAmendments)
								and ((current timestamp >= OpenDate)
								or (PreviewDate entered
								and current timestamp >= PreviewDate))
								or  (CreateAmendments
								and current timestamp > CloseDate
								and !InformalQuote)
		  						or  (InformalQuote
								and  AnyLinePrelimAwarded)
								or (!Company.AmendmentCriteria.CancelSourcingEvent
								or  !CreateAmendments))
									invoke CloseCancelNotify

						FinalAward is an Instance Action
							Action Rules
								for each OpenAwardedLines
									invoke FinalAward Open each

						CreateOutput is an Instance Action
							Action Rules
								for each OutputNotCreated
									invoke CreateOutput Awarded.Approved each

						CloseEvent is an Instance Action
							restricted
							Action Rules
								if (AllProcessed)
									make transition to Closed

						Amend is an Instance Action
							restricted
							Action Rules
								invoke Create SourcingEventVersion set
									invoked.VersionOpenStamp = current timestamp
								make transition to Amended

						CloseCancelNotify is an Instance Action
							restricted
							Action Rules
								if (AllCancelled)
									make transition to Cancelled
								else
								if (AllProcessed)
									make transition to Closed

								invoke CancelNotify

						ChangeToBestAndFinalOffer is an Instance Action
							valid when (NotBestAndFinal)
							Action Rules

								constraint (!AnyLinePrelimAwardedForAnyQuantity)
									"CannotChangeEventToBestAndFinalOfferWhenAwardedLinesExist"

								BestAndFinalOffer = true

							Exit Rules
					
								if (ShowResponsesNotViewed)
									invoke MarkResponsesAsViewed SourcingEvent

								if (HasOpenModificationRequests)
									invoke CancelModificationRequests SourcingEventResponse
										invoked.ParmSourcingCompany = Company
										invoked.ParmSourcingEvent   = SourcingEvent

						EmailSuppliersWithUnsubmittedResponses is an Instance Action
							valid when (UnsubmittedResponses)

							Action Rules

								for each UnsubmittedStandardResponsesRel
									if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
										LocalNotifiedSupplier = each.NotifiedSupplier
										send email
											to each.NotifiedSupplier.SupplierSourceId.EmailAddress
											cc DerivedProxyEmailAddressList
											from DerivedFromEmail
											subject "<SourcingCompanyExtensionRel.FinalPendingEmailSubject>"
											Contents
												"<SourcingCompanyExtensionRel.FinalPendingEmailContent>"
												"TheResponseMustBeSubmittedBy<SourcingEvent.DerivedCloseDate>ToBeConsideredForAnAward."
								for each UnsubmittedBestAndFinalResponsesRel
									if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
										send email
											to each.NotifiedSupplier.SupplierSourceId.EmailAddress
											cc DerivedProxyEmailAddressList
											from DerivedFromEmail
											subject "<SourcingCompanyExtensionRel.FinalPendingEmailSubject>"
											Contents
												"<SourcingCompanyExtensionRel.FinalPendingEmailContent>"
												"TheResponseMustBeSubmittedBy<SourcingEvent.DerivedCloseDate>ToBeConsideredForAnAward."
												"YouHaveBeenSelectedForBestAndFinalOrder.ABestAndFinalAmountMustBeEnteredAndTheResponseMustBeResubmitted."
								for each UnsubmittedTwoStepResponsesRel
									if (each.NotifiedSupplier.SupplierSourceId.ReceiveEmailNotification)
										send email
											to each.NotifiedSupplier.SupplierSourceId.EmailAddress
											cc DerivedProxyEmailAddressList
											from DerivedFromEmail
											subject "<SourcingCompanyExtensionRel.FinalPendingEmailSubject>"
											Contents
												"<SourcingCompanyExtensionRel.FinalPendingEmailContent>"
												"TheResponseMustBeSubmittedBy<SourcingEvent.DerivedCloseDate>ToBeConsideredForAnAward."
												"YourTechnicalResponseHasBeenAccepted.APricingAmountMustBeEnteredAndTheResponseSubmitted"

					Amended is a State
						Update is an Update Action
							Action Rules
								if (YellowAlert entered)
									constraint (YellowAlert >= 0)
										"CannotEnterNegativeDaysInYellowAlert"
									constraint (RedAlert entered)
										"MustEnterRedAlertNumberOfDays"
									constraint (YellowAlert > RedAlert)
										"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"
								if (RedAlert entered)
									constraint (RedAlert >= 0)
										"CannotEnterNegativeDaysInRedAlert"
									constraint (YellowAlert entered)
										"MustEnterYellowAlertNumberOfDays"
									constraint (RedAlert < YellowAlert)
										"YellowAlertNumberOfDaysMustBeGreaterThanRedAlertNumberOfDays"

								if (LowestBidCond)
									constraint (DisplayLowestBidAmount)
										"DisplayLowestBidAmountIsRequiredWhenUsingTheLowestBidOption"

								if (BuyerWeightingFinalDate changed)
									constraint (AnyLinePrelimAwarded = false)
										"CannotChangeFinalBuyerWeightingEntryDate;AwardingHasAlreadyTakenPlace"

								if  (Category changed
								and !SubCategory changed
								and  SubCategory entered)
									constraint (SubCategory exists)
										"SubCategoryNotValidForCategory"

								include CheckPlanHoldersListFlag

							Exit Rules
								include UpdatePlanHoldersList
								include UpdateRules
								if (Sealed)
									if (CloseDate changed
									or  BestAndFinalCloseDate changed
									or  StepTwoCloseDate changed
									or  BestAndFinalStarted changed
									or  StepTwoStarted changed)
										for each SourcingEventResponse set
											invoke UpdateForSealedBids each
												invoked.ParmCloseDate 			  = CloseDate
												invoked.ParmBestAndFinalCloseDate = BestAndFinalCloseDate
												invoked.ParmStepTwoCloseDate      = StepTwoCloseDate
												invoked.ParmBestAndFinalStarted   = BestAndFinalStarted
												invoked.ParmStepTwoStarted        = StepTwoStarted

						InternalEventUpdate is an Update Action

						Release is an Instance Action
							Parameters
								Comment			is a Description4

							Parameter Rules
								Comment
									required
										"CommentsAreRequiredToReleaseAmendment"

							Action Rules
								constraint (!ListQuestionsWithNoValue exists)
									"ListTypeQuestionsExistWithoutAssociatedValuesDefined"
								constraint (!ListLineQuestionsWithNoValue exists)
									"ListTypeLineQuestionsExistWithoutAssociatedValuesDefined"
								constraint (!EventBuyerWeightingZeroRel exists)
									"AllBuyerWeightingCriteriaMustHaveAPercentageEntered"
								if (TotalWeightingByEvent > 0)
									constraint (WeightingsTotal)
										"EventWeightingPercentageMustEqual100%"
								if (TotalLineWeighting > 0)
									constraint (WeightingCriteria entered)
										"MustDefineWeightingCriteriaForEventWhenLineWeightingsAreEntered"
									constraint (LineWeightingsTotal)
										"LineWeightingOverridePercentagesMustEqual100%"
								if (WeightingCriteria.DeliveryWeighting entered)
									constraint (POLines exists)
										"MustHaveOneLineWithPOOutputTypeToUseDeliveryWeightingCriteria"
								for each QuestionsWithWeighting
									constraint (each.ScoreAllocationEntered exists)
										"WeightingIsEnteredForEventQuestion<each.SourcingEventQuestion>;MustDefineAScoreAllocation"
								invoke UpdateComment last SourcingEventVersion set
									invoked.Comment = Comment
								invoke ReleaseAmended Open OpenLines
								make transition to NotNotified 
								make transition to NeedsApproval
								AlreadyNotified = false

			Cancelled is a State
				Entrance Rules
					FinalizedDate = current corporate date
					CancelDate	  = current timestamp

				Exit Rules
					PreviousState = PreviousState.Cancelled

				Reinstate is an Instance Action
					Action Rules
						if (Rejected)
							invoke ReinstateDraft Cancelled SourcingEventLine set
							make transition to Draft
							initialize ApprovalStatus
							initialize NotificationStatus
							initialize Rejected
						else
							invoke ReinstateOpen Cancelled SourcingEventLine set
							make transition to Open

						initialize FinalizedDate
						initialize CancelDate

			Suspended is a State
				Entrance Rules
					CancelDate = current timestamp

				Exit Rules
					PreviousState = PreviousState.Suspended

				Reinstate is an Instance Action
					Action Rules

						InSuspendProcess = true
						make transition to Open

						initialize CancelDate

						for each SupplierSourceIdsToNotify
							LocalNotifiedSupplier = each.NotifiedSupplier
							send email
								to each.NotifiedSupplier.SupplierSourceId.EmailAddress
								cc DerivedProxyEmailAddressList
								from DerivedFromEmail
								subject "SuspendedEvent_<RepresentativeText>_HasBeenReinstated"
								Contents
									"SuspendedEvent_<RepresentativeText>_HasBeenReinstated;PleaseViewInSupplierPortalToRespondOrAdjustResponse"

						for each RespondedButNotNotified
							LocalNotifiedSupplier = each.NotifiedSupplier
							send email
								to each.NotifiedSupplier.SupplierSourceId.EmailAddress
								cc DerivedProxyEmailAddressList
								from DerivedFromEmail
								subject "SuspendedEvent_<RepresentativeText>_HasBeenReinstated"
								Contents
									"SuspendedEvent_<RepresentativeText>_HasBeenReinstated;PleaseViewInSupplierPortalToRespondOrAdjustResponse"

						for each PlanHoldersToNotifyRel
							LocalNotifiedSupplier = each.NotifiedSupplier
							send email
								to each.NotifiedSupplier.SupplierSourceId.EmailAddress
								cc DerivedProxyEmailAddressList
								from DerivedFromEmail
								subject "SuspendedEvent_<RepresentativeText>_HasBeenReinstated"
								Contents
									"SuspendedEvent_<RepresentativeText>_HasBeenReinstated;PleaseViewInSupplierPortalToRespondOrAdjustResponse"

						for each SupplierSourceIdsToNotify
							invoke Create SupplierContactMessage
								invoked.SupplierGroup 		= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
								invoked.Supplier 			= each.NotifiedSupplier.SupplierSourceId.Supplier
								invoked.SupplierSourceId	= each.NotifiedSupplier.SupplierSourceId
								invoked.CreationDateTime	= current timestamp
								invoked.MessageTitle		= "Suspended Event " + SourcingEvent.RepresentativeText + " Has Been Reinstated"
								invoked.MessageText			= "Suspended Event " + SourcingEvent.RepresentativeText + " Has Been Reinstated ; Please View In Supplier Portal To Respond Or Adjust Response"
								invoked.Status				= 1
								invoked.Priority			= 2
								invoked.SystemGenerated		= true
								invoked.ReleaseStatus		= 2
								invoked.OriginatingEvent    = SourcingEvent
								invoked.OriginatingCompany  = Company
								invoked.MessageOwner        = Buyer

						for each RespondedButNotNotified
							invoke Create SupplierContactMessage
								invoked.SupplierGroup 		= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
								invoked.Supplier 			= each.NotifiedSupplier.SupplierSourceId.Supplier
								invoked.SupplierSourceId	= each.NotifiedSupplier.SupplierSourceId
								invoked.CreationDateTime	= current timestamp
								invoked.MessageTitle		= "Suspended Event " + SourcingEvent.RepresentativeText + " Has Been Reinstated"
								invoked.MessageText			= "Suspended Event " + SourcingEvent.RepresentativeText + " Has Been Reinstated ; Please View In Supplier Portal To Respond Or Adjust Response"
								invoked.Status				= 1
								invoked.Priority			= 2
								invoked.SystemGenerated		= true
								invoked.ReleaseStatus		= 2
								invoked.OriginatingEvent    = SourcingEvent
								invoked.OriginatingCompany  = Company
								invoked.MessageOwner        = Buyer

						for each PlanHoldersToNotifyRel
							invoke Create SupplierContactMessage
								invoked.SupplierGroup 		= each.NotifiedSupplier.SupplierSourceId.SupplierGroup
								invoked.Supplier 			= each.NotifiedSupplier.SupplierSourceId.Supplier
								invoked.SupplierSourceId	= each.NotifiedSupplier.SupplierSourceId
								invoked.CreationDateTime	= current timestamp
								invoked.MessageTitle		= "Suspended Event " + SourcingEvent.RepresentativeText + " Has Been Reinstated"
								invoked.MessageText			= "Suspended Event " + SourcingEvent.RepresentativeText + " Has Been Reinstated ; Please View In Supplier Portal To Respond Or Adjust Response"
								invoked.Status				= 1
								invoked.Priority			= 2
								invoked.SystemGenerated		= true
								invoked.ReleaseStatus		= 2
								invoked.OriginatingEvent    = SourcingEvent
								invoked.OriginatingCompany  = Company
								invoked.MessageOwner        = Buyer

						if (HasCanceledModificationRequests)
							invoke ReinstateModificationRequests SourcingEventResponse
								invoked.ParmSourcingCompany = Company
								invoked.ParmSourcingEvent   = SourcingEvent

				Cancel is an Instance Action
					confirmation required
						"AreYouSureYouWantToCancelThisEvent?"
					Action Rules
						constraint (!NonOpenLines exists)
							"CancelledOrAwardedEventLinesExist-UseCancelRemaining"
						if (InInitiateAmendmentState
	   					and Company.AmendmentCriteria.CancelSourcingEvent)
							if ((!Company.SendAmendedEmail
							and   Company.SendCanceledEmail)
							or  (!Company.CreateAmendedMessage
							and   Company.CreateCanceledMessage))
								invoke CancelNotify
							invoke Amend Open.Notified SourcingEvent
						invoke CancelLines Open SourcingEventLine set
						if ((!CreateAmendments)
						and ((current timestamp >= OpenDate)
						or (PreviewDate entered
						and current timestamp >= PreviewDate))
						or  (CreateAmendments
						and current timestamp > CloseDate
						and !InformalQuote)
  						or  (InformalQuote
						and  AnyLinePrelimAwarded)
						or (!Company.AmendmentCriteria.CancelSourcingEvent
						or  !CreateAmendments))
							invoke CloseCancelNotify

				CloseCancelNotify is an Instance Action
					restricted
					Action Rules
						if (AllCancelled)
							make transition to Cancelled
						else
						if (AllProcessed)
							make transition to Closed

						invoke CancelNotify

			Closed is a State
				Entrance Rules
					FinalizedDate = current corporate date

				Purge is a Delete Action
					restricted

				OpenEvent is an Instance Action
					restricted
					Action Rules
						make transition to Open
						initialize FinalizedDate

				Exit Rules
					PreviousState = PreviousState.Closed
