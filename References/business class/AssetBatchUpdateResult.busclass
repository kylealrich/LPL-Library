AssetBatchUpdateResult is a BusinessClass
	owned by am
	prefix is ABUR
	Ontology
		symbolic key is AssetBatchUpdateResult
		
	Patterns
		disable Auditing
		disable EffectiveDated 
	
	Persistent Fields
		CreateDate					is TimeStamp
		Source						is a AssetBatchSource

			default label is "Source"




		Release                 is AlphaUpper size 1
            States
				No  				value is "N"
					default label is "No With Error Report"
				YesNoErrorReport 	value is "R"
                Yes 				value is "Y"
					default label is "Yes With Error Report"
		Status						is Numeric 1
			States
				InProcess			value is 1
				NoRecordsToProcess	value is 2
				Completed 			value is 4
				CompletedWithErrors	value is 5
        Process             	is AlphaUpper size 3
            States
                All  		value is blank
                Addition  	value is "ADD"
                Adjustment 	value is "ADJ"
                Disposal	value is "DSP"
				Impair		value is "IMP"
				Reinstate	value is "RIN"
				Revalue		value is "RVL"
				Transfer	value is "TRF"
        Book			
		BookGroup	
        Company 			is an AssetCompany	
        CompanyGroup		is a  GeneralLedgerCompanyGroup										
        LocationName        is an AssetLocation
        Division            is an AssetDivision

		AssetGroup          
        AssetAccountingUnitGroup
        AssetType           
        CreatorId           is an Actor
        DetailView			is	Numeric 2
        	States			
        		Transactions	value is 1
        		Assets			value is 2
        		Both			value is 3
        		None			value is 4
        AssetGroupSelection		is AlphaUpper size 1
            States
                Specific  	value is "S"
                Without  	value is "W"
                All			value is "A"
		Total                   is AlphaUpper size 1
            States
                SummarizeByAccount value is "S"
                SummarizeByAsset   value is "T"
                DetailByAccount    value is "D"
                DetailByAsset      value is "E"
		DetailMode				is AlphaUpper size 1
            States
                No  	value is "N"
                Yes   	value is "Y"
        BackgroundGroupAsyncId	is an AsyncActionRequest
        	delete ignored	
    	IncludeTransactionAmounts is Boolean	
		JournalizeGroup
		CreatedBy				is an Actor
		PeriodEndDate 			is Date
		DefaultTransactionDimension	is a FinanceCodeBlockNoAccount
		Queue						is Numeric 3
			default label is "NumberOfThreads"
		PostingDate					is Date


        Classification          is AlphaUpper size 1
            States
                All           value is "A"
                Purchased     value is "P"
                FinanceLeased value is "C"
        Compute                 is AlphaUpper size 1
            States
                SinceLastRun             value is "S"
                AllAssets                value is "A"
                ListingOnlyNoCalculation value is "L"
                    default label is "Listing Only - No Calculation"
        Simulated               is AlphaUpper size 1
            States
                No   value is "N"
                Yes  value is "Y"
                Only value is "O"






























   	
    Local Fields
		AssetBackgroundGroup		is AlphaUpper up to 200
		LastBackgroundGroup			is AlphaUpper up to 200
		LocalJournalizeGroup		is a JournalizeGroup
		LocalCompany				is like AssetCompany
		LocalActor					is Actor

		LocalBook					is a Book
		PeriodCloseError			is Boolean
		CloseControlError			is Boolean
		CloseRangeError				is Boolean
		Thread						is Numeric 3 
		BookProcess					is Boolean
		LocalThreadCount			is Numeric 3
		ThreadCounter				is Numeric 3
		LocalCreatorId				is like Operator
		LocalNumberOfPeriodsClose	is Numeric size 2
		LocalArrayCount 			is Numeric size 2
		PendingYearEndOption		is Boolean
		LocalPosting				is Boolean
		ClassDepreciationExists		is Boolean
		DepreciationCalculationError	is Boolean
		LocalErrorMessage			is Alpha up to 200
		I1							is Numeric 2
		LocalAsset							is a Asset
		LocalDistributionAccount			is a FinanceCodeBlock
		LocalCounter						is Numeric 4
		LocalAPCDistributionAccount			is a FinanceCodeBlock
		LocalAssetType						is like AssetType				
		LocalAssetAccountGroup				is like AssetAccountGroup
		LocalAssetAccountingUnitGroup 		is like AssetAccountingUnitGroup
		LocalAssetAccountingUnit			is a FinanceCodeBlockNoAccountFull
		LocalDepreciationExpenseProject		is a FinanceCodeBlockProjectOnly
		LocalErrorExists					is Boolean
		LocalByPassEdits					is Boolean

	Transient Fields
		PendingYearEndClose					is Decimal size 7.3
		TransientRelease					is AlphaUpper size 1
            States
                Yes 				value is "Y"
                No  				value is "N"
			derive value from Release

	Context Fields
		AssetCompany

	Field Rules
		FinanceEnterpriseGroup
			initial value is actor.context.FinanceEnterpriseGroup
			default to actor.context.FinanceEnterpriseGroup
	 	Release
			initial value is "N"
            default to "N"
		CreateDate
            default to current timestamp 
		
		Status
			initial value is 1	
			default to 1
		DetailView
			initial value is 4
			default to 4	
		
		Book
			if (Source.AssetPeriodClose)
				if (Book not entered
				and BookGroup not entered)
					required
						"MustEnterEitherBookOrBookGroup"
				if (Book entered
				and BookGroup entered)
					constraint (false)
						"CannotEnterBothBookAndBookGroup"
		Company
			initial value is AssetCompany
			if (Source.AssetPeriodClose)
				if (Company entered
				and CompanyGroup entered)
					constraint (false)
						"CannotEnterBothCompanyAndCompanyGroup"
	        	if (Company entered)
	        		constraint (!Company.PeriodCloseRelease.No)
	        			"ReleaseAssetsHasNotBeenRun"
	        		constraint (CompanyGroup not entered)
	        			"CompanyProvided;CompanyGroupMustBeBlank"
	        	else 
	        		constraint (CompanyGroup entered)
	        			"CompanyOrCompanyGroupMustBeProvided"
	
		CompanyGroup
			if (Source.ReleaseAssets)
				constraint (AssetType not entered)
					"CannotEnter_Asset_TypeWhen_Company_GroupEntered"
				constraint (AssetAccountingUnitGroup not entered)
					"CannotEnter_Asset_Dimension_GroupWhen_Company_GroupEntered"

        AssetGroup
        	if (Source.AssetPeriodClose)
	        	if (AssetGroupSelection.Specific)
	        		required
	        			"AssetGroupSelectionIsSelectedToSpecificAssetGroupIsRequired"
        
        AssetGroupSelection
        	initial value is "A"
        	if (Source.AssetPeriodClose)
	        	default to "A"
        



		CreatedBy
			default to actor
        
        DetailMode
        	initial value is "Y"
            default to "Y"
            
        IncludeTransactionAmounts
        	initial value is false
        	default to false  		



			
		Queue
			initial value is config.PeriodCloseThreads
			default to 4






        Classification
        	initial value is Classification.All
            default to Classification.All
        Compute
        	initial value is Compute.SinceLastRun
            default to Compute.SinceLastRun
        Simulated
        	initial value is Simulated.No
            default to Simulated.No

		TransientRelease
			initial value is "Y"
            default to "Y"

        	
	Relations
	
		
		JournalizeGroupRel
			one-to-many relation to GeneralLedgerJournalControl
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
			Instance Selection
				where (related.System = "AM" 
				and    related.JournalizeGroupResult = JournalizeGroup)	
					
		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 		= FinanceEnterpriseGroup
				related.GeneralLedgerSystemCode     = "AM"
					
		GeneralLedgerCompanyGroupMemberRel
			one-to-many relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup		= CompanyGroup
				
		AssetTransactionDetailRel
			one-to-many relation to AssetTransactionDetail
        	Field Mapping uses Set1
        		related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
        		related.AssetBatchUpdateResult = AssetBatchUpdateResult	
        
        AssetCompanyRel
        	one-to-one relation to AssetCompany
        	Field Mapping uses symbolic key
        		related.Company					= LocalCompany

		AssetCompanyCloseBookCalendarsRel
            one-to-many relation to BookCalendar
            Field Mapping uses Set4
                related.Company 				= LocalCompany
			Instance Selection
				where (related.CloseBook		= 0
				and related.PostingBook			= true)
        		
		LocalBooksRel
			one-to-one relation to Book
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.Book						= LocalBook
		
		BookGroupRel
			one-to-one relation to BookGroup
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.BookGroup 					= BookGroup
		
		AllBookGroupBookRel
			one-to-many relation to BookGroupBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
				related.BookGroup 					= BookGroup
		
		LocalCurrentBookCalendarRel
			one-to-one relation to BookCalendar
			Field Mapping uses Set4
				related.Company						= LocalCompany
				related.Book						= LocalBook

		LocalCompanySystemClosingControlRel
			one-to-one relation to CompanySystemClosingControl
			Field Mapping uses BySystemCode 
				related.GeneralLedgerSystemCode	= "AM"
				related.Company					= LocalCompany
		
		AssetTransactionJournalizeRel
			one-to-many relation to AssetTransaction
			Field Mapping uses ByPeriodEndDate
				related.FinanceEnterpriseGroup		= FinanceEnterpriseGroup
			Instance Selection
				where (related.BatchUpdateResult			= AssetBatchUpdateResult)
		
		BookCalendarsRel
            classic name is AMCALENDAR
            one-to-many relation to BookCalendar
            Field Mapping uses Set4
                related.Company 				= Company
		
		BookCalendarRel
			classic name is AMCALENDAR
            one-to-many relation to BookCalendar
            Field Mapping uses Set4
				related.Company 				= Company
				related.Book					= Book










		LocalBookCalendarRel
            one-to-many relation to BookCalendar
            Field Mapping uses Set4
                related.Company 				= LocalCompany
				related.Book					= LocalBook
                	
        AssetTransactionsInCompanyRel
        	one-to-many relation to AssetTransactionDetail
        	Field Mapping uses ByAssetCompanyResult
        		related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
        		related.AssetCompany	 	 	=  Company
        		related.AssetBatchUpdateResult  = AssetBatchUpdateResult	
        		related.RecordType			   	= 1
    		
		AssetsInCompanyRel
			one-to-many relation to AssetTransactionDetail
			Field Mapping uses ByAssetCompanyResult
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.AssetCompany	 		= Company
        		related.AssetBatchUpdateResult	= AssetBatchUpdateResult	
        		related.RecordType				= 2
        		
        AllAssetsRel
			one-to-many relation to AssetTransactionDetail
			Field Mapping uses Set1
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
        		related.AssetBatchUpdateResult 	= AssetBatchUpdateResult	
        		related.RecordType				= 2	
        		
        AllAssetTransactionsRel
			one-to-many relation to AssetTransactionDetail
			Field Mapping uses Set1
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
        		related.AssetBatchUpdateResult 	= AssetBatchUpdateResult	
        		related.RecordType				= 1	
        		
		AssetTransactionsInCompanyGroupRel
        	one-to-many relation to AssetTransactionDetail
        	Field Mapping uses ByCompanyGroup
        		related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
        		related.CompanyGroup       	   = CompanyGroup
        		related.AssetBatchUpdateResult = AssetBatchUpdateResult	
        		related.RecordType			   = 1

		AssetsInCompanyGroupRel
			one-to-many relation to AssetTransactionDetail
			Field Mapping uses ByCompanyGroup
				related.FinanceEnterpriseGroup = FinanceEnterpriseGroup
				related.CompanyGroup       	   = CompanyGroup
        		related.AssetBatchUpdateResult = AssetBatchUpdateResult	
        		related.RecordType			   = 2
		
		AssetPeriodTransactionRel
    		one-to-many relation to AssetTransactionDetail
			Field Mapping uses ByPostingBook
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.AssetBatchUpdateResult	= AssetBatchUpdateResult
		
		AssetTransactionRel
    		one-to-many relation to AssetTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.Company					= Company
				related.Book					= Book	
			Instance Selection
				where (related.BatchUpdateResult = AssetBatchUpdateResult)
		
		AssetTransactionGroupRel
    		one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key	
			Instance Selection
				where (related.BatchUpdateResult = AssetBatchUpdateResult)

		AssetBookTransactionRel
    		one-to-many relation to AssetBookTransaction
			Field Mapping uses ByCompanyBookAssetAccountType
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Company					= Company
				related.Book					= Book	
			Instance Selection
				where (related.BatchUpdateResult = AssetBatchUpdateResult)
		
		AssetBookTransactionGroupRel
    		one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
			Instance Selection
				where (related.BatchUpdateResult = AssetBatchUpdateResult)
		
		AssetPeriodBookTransactionRel
    		one-to-many relation to AssetTransactionDetail
			Field Mapping uses ByNonPostingBook
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.AssetBatchUpdateResult	= AssetBatchUpdateResult
		
		AssetErrorResultRel
			one-to-many relation to AssetErrorResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.AssetBatchUpdateResult	= AssetBatchUpdateResult

		AssetEdistsErrorResultRel
			one-to-many relation to AssetErrorResult
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.AssetBatchUpdateResult	= AssetBatchUpdateResult
			Instance Selection
				where (related.Asset entered)		

		UnreleasedAssetsRel
        	one-to-many relation to Asset
        	Field Mapping uses symbolic key
        		related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
			Instance Selection
        		where (((related.Status.Unreleased
				or related.Status.PostRelease)
				and !related.InterfaceInProgress)
				and ((!Process.All and 
				related.AssetProcess = Process)
				or Process.All)
				and	!related.WorkInProcess
				and	(LocationName not entered
				or related.AssetLocation = LocationName)
				and (Division not entered
				or related.AssetDivision = Division)
				and (AssetGroup not entered
				or related.AssetGroup = AssetGroup)
				and (AssetAccountingUnitGroup not entered
				or related.AssetAccountingUnitGroup = AssetAccountingUnitGroup)
				and (AssetType not entered
				or related.AssetType = AssetType)
				and (CreatorId not entered
				or related.CreatedBy = CreatorId)
				and ((CompanyEntered
				and ((related.Company	= Company
				and ((related.AssetProcess.Transfer
				and related.UnreleasedAssetTransferExists)
				or !related.AssetProcess.Transfer))
				or (related.AssetProcess.Transfer
				and !related.AssetTransferFullOrPartial="F"
				and related.TransferFromCompany = Company)))
				or (CompanyGroupEntered
				and ((related.Company	= any GeneralLedgerCompanyGroupMemberRel.Company
				and ((related.AssetProcess.Transfer
				and related.UnreleasedAssetTransferExists)
				or !related.AssetProcess.Transfer))
				or (related.AssetProcess.Transfer
				and !related.AssetTransferFullOrPartial="F"
				and related.TransferFromCompany = any GeneralLedgerCompanyGroupMemberRel.Company))))
				and (DefaultTransactionDimension not entered
				or	((DefaultTransactionDimension.Ledger not entered
				or	related.AssetAccountingUnit.Ledger	= DefaultTransactionDimension.Ledger)
				and	(DefaultTransactionDimension.ToAccountingEntity not entered
				or  related.AssetAccountingUnit.ToAccountingEntity	= DefaultTransactionDimension.ToAccountingEntity)
				and	(DefaultTransactionDimension.AccountingUnit not entered
				or 	(DefaultTransactionDimension.AccountingUnit entered
				and	related.AssetAccountingUnit.AccountingUnit	= DefaultTransactionDimension.AccountingUnit))
				and	(DefaultTransactionDimension.Project not entered
				or 	related.AssetAccountingUnit.Project	= DefaultTransactionDimension.Project)
				and	(DefaultTransactionDimension.FinanceDimension1 not entered
				or related.AssetAccountingUnit.FinanceDimension1	= DefaultTransactionDimension.FinanceDimension1)
				and	(DefaultTransactionDimension.FinanceDimension2 not entered
				or related.AssetAccountingUnit.FinanceDimension2	= DefaultTransactionDimension.FinanceDimension2)
				and	(DefaultTransactionDimension.FinanceDimension3 not entered
				or related.AssetAccountingUnit.FinanceDimension3	= DefaultTransactionDimension.FinanceDimension3)
				and	(DefaultTransactionDimension.FinanceDimension4 not entered
				or related.AssetAccountingUnit.FinanceDimension4	= DefaultTransactionDimension.FinanceDimension4)
				and	(DefaultTransactionDimension.FinanceDimension5 not entered
				or related.AssetAccountingUnit.FinanceDimension5	= DefaultTransactionDimension.FinanceDimension5)
				and	(DefaultTransactionDimension.FinanceDimension6 not entered
				or related.AssetAccountingUnit.FinanceDimension6	= DefaultTransactionDimension.FinanceDimension6)
				and	(DefaultTransactionDimension.FinanceDimension7 not entered
				or related.AssetAccountingUnit.FinanceDimension7	= DefaultTransactionDimension.FinanceDimension7)
				and	(DefaultTransactionDimension.FinanceDimension8 not entered
				or related.AssetAccountingUnit.FinanceDimension8	= DefaultTransactionDimension.FinanceDimension8)
				and	(DefaultTransactionDimension.FinanceDimension9 not entered
				or related.AssetAccountingUnit.FinanceDimension9	= DefaultTransactionDimension.FinanceDimension9)
				and	(DefaultTransactionDimension.FinanceDimension10 not entered
				or related.AssetAccountingUnit.FinanceDimension10	= DefaultTransactionDimension.FinanceDimension10))))
    
		UnreleasedTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (((!Process.All and 
				related.Asset.AssetProcess = Process)
				or Process.All)
				and	(LocationName not entered
				or related.Asset.AssetLocation = LocationName)
				and (Division not entered
				or related.Asset.AssetDivision = Division)
				and (AssetGroup not entered
				or related.Asset.AssetGroup = AssetGroup)
				and (AssetAccountingUnitGroup not entered
				or related.Asset.AssetAccountingUnitGroup = AssetAccountingUnitGroup)
				and (AssetType not entered
				or related.Asset.AssetType = AssetType)
				and (CreatorId not entered
				or related.Asset.CreatedBy = CreatorId)
				and ((CompanyEntered
				and ((related.Asset.Company	= Company
				and ((related.Asset.AssetProcess.Transfer
				and related.Asset.UnreleasedAssetTransferExists)
				or !related.Asset.AssetProcess.Transfer))
				or (related.Asset.AssetProcess.Transfer
				and !related.Asset.AssetTransferFullOrPartial="F"
				and related.Asset.TransferFromCompany = Company)))
				or (CompanyGroupEntered
				and ((related.Asset.Company	= any GeneralLedgerCompanyGroupMemberRel.Company
				and ((related.Asset.AssetProcess.Transfer
				and related.Asset.UnreleasedAssetTransferExists)
				or !related.Asset.AssetProcess.Transfer))
				or (related.Asset.AssetProcess.Transfer
				and !related.Asset.AssetTransferFullOrPartial="F"
				and related.Asset.TransferFromCompany = any GeneralLedgerCompanyGroupMemberRel.Company))))
				and related.TransactionStatus	= "U"
				and (DefaultTransactionDimension not entered
				or	((DefaultTransactionDimension.Ledger not entered
				or related.Asset.AssetAccountingUnit.Ledger	= DefaultTransactionDimension.Ledger)
				and	(DefaultTransactionDimension.ToAccountingEntity not entered
				or related.Asset.AssetAccountingUnit.ToAccountingEntity	= DefaultTransactionDimension.ToAccountingEntity)
				and	(DefaultTransactionDimension.AccountingUnit not entered
				or related.Asset.AssetAccountingUnit.AccountingUnit	= DefaultTransactionDimension.AccountingUnit)
				and	(DefaultTransactionDimension.Project not entered
				or related.Asset.AssetAccountingUnit.Project	= DefaultTransactionDimension.Project)
				and	(DefaultTransactionDimension.FinanceDimension1 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension1	= DefaultTransactionDimension.FinanceDimension1)
				and	(DefaultTransactionDimension.FinanceDimension2 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension2	= DefaultTransactionDimension.FinanceDimension2)
				and	(DefaultTransactionDimension.FinanceDimension3 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension3	= DefaultTransactionDimension.FinanceDimension3)
				and	(DefaultTransactionDimension.FinanceDimension4 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension4	= DefaultTransactionDimension.FinanceDimension4)
				and	(DefaultTransactionDimension.FinanceDimension5 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension5	= DefaultTransactionDimension.FinanceDimension5)
				and	(DefaultTransactionDimension.FinanceDimension6 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension6	= DefaultTransactionDimension.FinanceDimension6)
				and	(DefaultTransactionDimension.FinanceDimension7 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension7	= DefaultTransactionDimension.FinanceDimension7)
				and	(DefaultTransactionDimension.FinanceDimension8 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension8	= DefaultTransactionDimension.FinanceDimension8)
				and	(DefaultTransactionDimension.FinanceDimension9 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension9	= DefaultTransactionDimension.FinanceDimension9)
				and	(DefaultTransactionDimension.FinanceDimension10 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension10	= DefaultTransactionDimension.FinanceDimension10))))

		UnreleasedBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (((!Process.All and 
				related.Asset.AssetProcess = Process)
				or Process.All)
				and	(LocationName not entered
				or related.Asset.AssetLocation = LocationName)
				and (Division not entered
				or related.Asset.AssetDivision = Division)
				and (AssetGroup not entered
				or related.Asset.AssetGroup = AssetGroup)
				and (AssetAccountingUnitGroup not entered
				or related.Asset.AssetAccountingUnitGroup = AssetAccountingUnitGroup)
				and (AssetType not entered
				or related.Asset.AssetType = AssetType)
				and (CreatorId not entered
				or related.Asset.CreatedBy = CreatorId)
				and ((CompanyEntered
				and ((related.Asset.Company	= Company
				and ((related.Asset.AssetProcess.Transfer
				and related.Asset.UnreleasedAssetTransferExists)
				or !related.Asset.AssetProcess.Transfer))
				or (related.Asset.AssetProcess.Transfer
				and !related.Asset.AssetTransferFullOrPartial="F"
				and related.Asset.TransferFromCompany = Company)))
				or (CompanyGroupEntered
				and ((related.Asset.Company	= any GeneralLedgerCompanyGroupMemberRel.Company
				and ((related.Asset.AssetProcess.Transfer
				and related.Asset.UnreleasedAssetTransferExists)
				or !related.Asset.AssetProcess.Transfer))
				or (related.Asset.AssetProcess.Transfer
				and !related.Asset.AssetTransferFullOrPartial="F"
				and related.Asset.TransferFromCompany = any GeneralLedgerCompanyGroupMemberRel.Company))))
				and related.TransactionStatus	= "U"
				and (DefaultTransactionDimension not entered
				or	((DefaultTransactionDimension.Ledger not entered
				or	related.Asset.AssetAccountingUnit.Ledger	= DefaultTransactionDimension.Ledger)
				and	(DefaultTransactionDimension.ToAccountingEntity not entered
				or  related.Asset.AssetAccountingUnit.ToAccountingEntity	= DefaultTransactionDimension.ToAccountingEntity)
				and	(DefaultTransactionDimension.AccountingUnit not entered
				or 	related.Asset.AssetAccountingUnit.AccountingUnit	= DefaultTransactionDimension.AccountingUnit)
				and	(DefaultTransactionDimension.Project not entered
				or 	related.Asset.AssetAccountingUnit.Project	= DefaultTransactionDimension.Project)
				and	(DefaultTransactionDimension.FinanceDimension1 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension1	= DefaultTransactionDimension.FinanceDimension1)
				and	(DefaultTransactionDimension.FinanceDimension2 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension2	= DefaultTransactionDimension.FinanceDimension2)
				and	(DefaultTransactionDimension.FinanceDimension3 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension3	= DefaultTransactionDimension.FinanceDimension3)
				and	(DefaultTransactionDimension.FinanceDimension4 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension4	= DefaultTransactionDimension.FinanceDimension4)
				and	(DefaultTransactionDimension.FinanceDimension5 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension5	= DefaultTransactionDimension.FinanceDimension5)
				and	(DefaultTransactionDimension.FinanceDimension6 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension6	= DefaultTransactionDimension.FinanceDimension6)
				and	(DefaultTransactionDimension.FinanceDimension7 entered
				or	related.Asset.AssetAccountingUnit.FinanceDimension7	= DefaultTransactionDimension.FinanceDimension7)
				and	(DefaultTransactionDimension.FinanceDimension8 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension8	= DefaultTransactionDimension.FinanceDimension8)
				and	(DefaultTransactionDimension.FinanceDimension9 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension9	= DefaultTransactionDimension.FinanceDimension9)
				and	(DefaultTransactionDimension.FinanceDimension10 not entered
				or related.Asset.AssetAccountingUnit.FinanceDimension10	= DefaultTransactionDimension.FinanceDimension10))))

		ReleasedTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.BatchUpdateResult	= AssetBatchUpdateResult)

		ReleasedPostedTransactionsRel
			one-to-many relation to AssetTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.BatchUpdateResult	= AssetBatchUpdateResult
				and related.IsPostedToGL)

		ReleasedBookTransactionsRel
			one-to-many relation to AssetBookTransaction
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.BatchUpdateResult	= AssetBatchUpdateResult)

		PeriodCloseBookRel
			one-to-many relation to AssetBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
			Instance Selection
				where (related.BatchUpdateResult = AssetBatchUpdateResult
				and    related.CurrentPeriodDepreciationCalculated)
				
		AssetRel
			one-to-many relation to Asset
        	Field Mapping uses ByCompanyAsset
        		related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Company					= LocalCompany
			Instance Selection
				where (related.Status.Released)

		LocalAssetRel
			one-to-many relation to Asset
        	Field Mapping uses ByCompanyAsset
        		related.FinanceEnterpriseGroup 	= FinanceEnterpriseGroup
				related.Company					= LocalCompany
			Instance Selection
				where (related.AssetType				= LocalAssetType
				and related.AssetAccountGroup			= LocalAssetAccountGroup
				and related.AssetAccountingUnitGroup	= LocalAssetAccountingUnitGroup
				and related.AssetAccountingUnit			= LocalAssetAccountingUnit
				and related.DepreciationExpenseProject	= LocalDepreciationExpenseProject)


		BookGroupBookRel
			one-to-many relation to BookGroupBook
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.BookGroup				= BookGroup

		GeneralLedgerCompanyGroupRel
			one-to-many relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup 	= CompanyGroup

		UnreleasedorPostReleaseAssetsRel
			one-to-many relation to Asset
			Field Mapping uses Set2
				related.FinanceEnterpriseGroup	= FinanceEnterpriseGroup
				related.Company					= LocalCompany
			Instance Selection
				where ((related.Status.Unreleased or related.Status.PostRelease) and !related.WorkInProcess)

		DepreciationAssetBookRel
			one-to-many relation to AssetBook
			Field Mapping uses ByDepreciationBatchUpdateResult
				related.FinanceEnterpriseGroup			= FinanceEnterpriseGroup	
				related.DepreciationBatchUpdateResult 	= AssetBatchUpdateResult



	Conditions
		Incomplete
			when (!Status.Completed)
		ErrorsExist
			restricted
			when (AssetErrorResultRel exists)
		CompanyGroupEntered
			when (CompanyGroup entered)
		CompanyEntered
			when (Company entered)
		DisplayCompanyReleasedAssets
			when (DisplayReleasedAssets
			and CompanyGroupEntered
			and AllAssetsRel exists)
		DisplayNoCompanyReleasedAssets
			when (DisplayReleasedAssets
			and CompanyEntered
			and AllAssetsRel exists)
		DisplayCompanyTransactions
			when (DisplayTransactions
			and CompanyGroupEntered)
		DisplayNoCompanyTransactions
			when (DisplayTransactions
			and CompanyEntered)			
		DisplayReleasedAssets
			when (DetailView= 2
			or DetailView = 3)
		DisplayTransactions
			when (DetailView = 1
			or DetailView = 3)
		DisplayErrors
			when (Source.ReleaseAssets
			and DerivedErrorCount > 0)			
		
		IsBookEntered
    		when (Book entered)

		IsBookAndCompanyEntered
    		when (Book entered
			and Company entered)

    	IsBookGroupEntered
    		when (BookGroup entered)
    	
    	IsCompanyEntered
    		when (Company entered)
    	
    	IsCompanyGroupEntered
    		when (CompanyGroup entered)
    	
    	IsAssetGroupEntered
    		when (AssetGroup entered)
    	
    	HasErrors
    		when (Source.AssetPeriodClose
			and AssetErrorResultRel exists)

		HasNoGLErrors
			when (Source.AssetPeriodClose
			and !AssetEdistsErrorResultRel exists
			and AssetErrorResultRel exists)

		HasEditsErrors
			when (Source.AssetPeriodClose
			and AssetEdistsErrorResultRel exists)

    	DepreciationErrorsExists
			when (Source.DepreciationCalculation
			and AssetErrorResultRel exists)

    	HasAssetTransactions
    		when (AssetPeriodTransactionRel exists)
    	
    	HasAssetBookTransaction
    		when (AssetPeriodBookTransactionRel exists)

		HasAssetTransaction
    		when (AssetTransactionRel exists)

		HasAssetBookTransactions
    		when (AssetBookTransactionRel exists)
    	
    	HasNoRecordsToProcess
    		when (!(HasErrors
    		or HasAssetTransactions
    		or HasAssetBookTransaction))	
    		
    	IncludeTransaction
    		when (HasAssetTransaction
    		and IsIncludeTransactionAmounts)
    	
    	IncludeBookTransaction
    		when (HasAssetBookTransactions
    		and IncludeTransactionAmounts)
    	
    	IsIncludeTransactionAmounts			
			when (IncludeTransactionAmounts)
		
    	ReleasedIncludeTransactionAmounts
			when (IncludeTransactionAmounts
			and AllAssetTransactionsRel exists)

		ExcludeTransactionAmounts
			when (not IncludeTransactionAmounts
			and	HasAssetTransactions)
			
		JournalizedTransactionsExist
			when (first AllAssetTransactionsRel.DerivedJournalizeGroup entered)

		UnreleasedIncludeTransactionAmount
			restricted
			when (Release.No
			and IncludeTransactionAmounts
			and  UnreleasedTransactionsExists
			and Source.ReleaseAssets)

		UnreleasedExcludeTransactionAmount
			restricted
			when (Release.No
			and !IncludeTransactionAmounts
			and  UnreleasedTransactionsExists
			and Source.ReleaseAssets)
		
		UnreleasedIncludeBookTransactionAmount
			restricted
			when (Release.No
			and IncludeTransactionAmounts
			and  UnreleasedBookTransactionsExists
			and Source.ReleaseAssets)

		UnreleasedExcludeBookTransactionAmount
			restricted
			when (Release.No
			and !IncludeTransactionAmounts
			and  UnreleasedBookTransactionsExists
			and Source.ReleaseAssets)
		
		ReleasedIncludeTransactionAmount
			restricted
			when (Release.Yes
			and IncludeTransactionAmounts
			and ReleasedTransactionsExists
			and Source.ReleaseAssets)

		ReleasedExcludeTransactionAmount
			restricted
			when (Release.Yes
			and !IncludeTransactionAmounts
			and ReleasedTransactionsExists
			and Source.ReleaseAssets)
		
		ReleasedIncludeBookTransactionAmount
			restricted
			when (Release.Yes
			and IncludeTransactionAmounts
			and  ReleasedBookTransactionsExists
			and Source.ReleaseAssets)

		ReleasedExcludeBookTransactionAmount
			restricted
			when (Release.Yes
			and !IncludeTransactionAmounts
			and  ReleasedBookTransactionsExists
			and Source.ReleaseAssets)

		ReleasedTransactionsExists
			restricted
			when (ReleasedTransactionsRel exists)
		
		ReleasedPostedTransactionsExists
			restricted
			when (ReleasedPostedTransactionsRel exists)
		
		ReleasedBookTransactionsExists
			restricted
			when (ReleasedBookTransactionsRel exists)
		
		UnreleasedTransactionsExists
			restricted
			when (UnreleasedTransactionsRel exists)
		
		UnreleasedBookTransactionsExists
			restricted
			when (UnreleasedBookTransactionsRel exists)

		AssetTransactionsExists
			when (AssetTransactionGroupRel exists)
			
		AssetBookTransactionsExists
			when (AssetBookTransactionGroupRel exists)








    		
    	DisplayDetailModeAssetTransactions
			restricted
    		when ((Release.Yes
			or Release.YesNoErrorReport)
    		and AssetTransactionGroupRel exists
    		and IncludeTransactionAmounts
			and Source.AssetPeriodClose)
    		
    	DisplayDetailModeWithNoTransactionAmountsAssetTransactions
    		restricted
			when ((Release.Yes
			or Release.YesNoErrorReport)
    		and AssetTransactionGroupRel exists
    		and !IncludeTransactionAmounts
			and Source.AssetPeriodClose)
    		
    	DisplayDetailModeAssetBookTransactions
    		restricted
			when ((Release.Yes
			or Release.YesNoErrorReport)
    		and AssetBookTransactionGroupRel exists
    		and IncludeTransactionAmounts
			and Source.AssetPeriodClose)
    		
    	DisplayDetailModeWithNoTransactionAmountsAssetBookTransactions
    		restricted
			when ((Release.Yes
			or Release.YesNoErrorReport)
    		and AssetBookTransactionGroupRel exists
    		and !IncludeTransactionAmounts
			and Source.AssetPeriodClose)
  	
		UpdateOnly
			restricted
			when (Release.No
			and Source.ReleaseAssets)

		AssetPerioCloseTransactionsExists
			restricted
			when (AssetTransactionRel exists
			or AssetBookTransactionRel exists
			or AssetTransactionGroupRel exists
			or AssetBookTransactionGroupRel exists)

		NonUpdateModePeriodClose
			restricted
			when (Release.No
			and Source.AssetPeriodClose
			and PeriodCloseBookRel exists
			and (AssetErrorResultRel not exists
			or AssetEdistsErrorResultRel exists))

		DepreciationCalculationSource
			restricted
			when (Source.DepreciationCalculation)

		DepreciationCalculationSourceCompany
			restricted
			when (Source.DepreciationCalculation
			and Company entered
			and Book entered
			and !Compute.ListingOnlyNoCalculation
			and DepreciationAssetBookRel exists)
			
		DepreciationCalculationSourceCG
			restricted
			when (Source.DepreciationCalculation
			and CompanyGroup entered
			and Book entered
			and !Compute.ListingOnlyNoCalculation
			and DepreciationAssetBookRel exists)

		DepreciationCalculationSourceCompanyAndBG
			restricted
			when (Source.DepreciationCalculation
			and Company entered
			and BookGroup entered
			and !Compute.ListingOnlyNoCalculation
			and DepreciationAssetBookRel exists)
			
		DepreciationCalculationSourceCGAndBG
			restricted
			when (Source.DepreciationCalculation
			and CompanyGroup entered
			and BookGroup entered
			and !Compute.ListingOnlyNoCalculation
			and DepreciationAssetBookRel exists)

		DepreciationCalculationSourceListOnly
			restricted
			when (Source.DepreciationCalculation
			and Compute.ListingOnlyNoCalculation
			and DepreciationAssetBookRel exists)

	Derived Fields
	
		DerivedJournalizeGroup is a DerivedField
			type is AlphaUpper 30

			return LocalJournalizeGroup
			
		DerivedAssetsCount is a DerivedField
			type is Numeric 10

    		return instance count of AllAssetsRel










		
		DerivedErrorCount is a DerivedField
			type is Numeric 10
        	return instance count of AssetErrorResultRel
        	
		ConcatenatedKey is a StringField
			type is Alpha 27
			Company
			"-"
			CompanyGroup
			"-"
			AssetBatchUpdateResult
				
		BackgroundGroupKey is a StringField
			type is Alpha 150
			"AssetMassReleaseResult-ReleaseAssets"
			"-"
			ConcatenatedKey	
			
		BatchName is a DerivedField
			type is Alpha size up to 60 
			if (Source.ReleaseAssets)
				return "Release Assets"
			if (Source.AssetPeriodClose)
				return "Asset Period Close"
			if (Source.DepreciationCalculation)
				return "Depreciation Calculation"
			return ""
			
		CurrentPeriod is a DerivedField
			type is Decimal size 2
			restricted
			return (first BookCalendarRel.CurrentPeriod)

		PeriodEnding is a DerivedField
			type is Date
			restricted
			return (first BookCalendarRel.CurrentPeriodDate)

		NumberOfPeriodsInProcess is a DerivedField
			type is Decimal size 2
			restricted
			return (first BookCalendarRel.NumberOfPeriodsInProcess)

		PeriodClose is a MessageField
			"PeriodCloseRanFor<PeriodEndDate>ForBook<Book>"
			
		DepreciationCalculation	is a MessageField
			"DepreciationCalculationRunFor<NumberOfPeriodsInProcess>Period(s)Ending<PeriodEndDate>ForBook<Book>"

		DerivedRelease is a DerivedField
			type is Alpha size up to 60 
			if (Release.Yes)
				return "Yes"
			if (Release.No)
				return "No"
																			
	Sets
    	ByCreateDate
    		Sort Order
    			CreateDate				descending
    			FinanceEnterpriseGroup
    			Company
 
    Attach Rules

	Rule Blocks

		EditTransactionRuleBlock
			if (CompanyGroup entered)
				for each GeneralLedgerCompanyGroupMemberRel
					LocalCompany = each.Company
					for each distinct TransactionEditFieldGroup in AssetRel
						LocalCounter += 1
						LocalCompany							= each.Company
						LocalAssetType							= each.AssetType
						LocalAssetAccountGroup					= each.AssetAccountGroup
						LocalAssetAccountingUnitGroup			= each.AssetAccountingUnitGroup
						LocalAssetAccountingUnit				= each.AssetAccountingUnit
						LocalDepreciationExpenseProject			= each.DepreciationExpenseProject	
						
						invoke CheckAPC first LocalAssetRel
							invoked.PrmCloseBatchResult					= AssetBatchUpdateResult
							invoked.PrmCompany							= LocalCompany
			else
				LocalCompany = Company
				for each distinct TransactionEditFieldGroup in AssetRel
					LocalCounter += 1
					LocalCompany							= each.Company
					LocalAssetType							= each.AssetType
					LocalAssetAccountGroup					= each.AssetAccountGroup
					LocalAssetAccountingUnitGroup			= each.AssetAccountingUnitGroup
					LocalAssetAccountingUnit				= each.AssetAccountingUnit
					LocalDepreciationExpenseProject			= each.DepreciationExpenseProject	
					
					invoke CheckAPC first LocalAssetRel
						invoked.PrmCloseBatchResult					= AssetBatchUpdateResult
						invoked.PrmCompany							= LocalCompany


		EditParameters




			if (Company not entered)
				constraint (CompanyGroup entered)
					"MustEnterCompanyOrCompanyGroup" 
				constraint (GeneralLedgerCompanyGroupMemberRel exists)
					"CompanyGroup<CompanyGroup>HasNoCompaniesDefined"
			else
				constraint (CompanyGroup not entered)
					"CannotSpecifyBothCompanyAndCompanyGroup"
			if (Source.ReleaseAssets)
				if(Company entered)

					if (Company.PendingYearEndCount entered)
						constraint (false)
							"CannotRunRelease-YearEndClosePendingForCompany<Company>"
					if(Company.PeriodCloseRelease.InProcess)
						constraint (false)
							"PeriodOrYearEndCloseForCompany<Company>IsInProcess"		
					for each BookCalendarsRel
						if (each.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[1] not entered)
							constraint (false)
								"MustRe-enterRunScheduleAfterShortYearClose"	
				if (CompanyGroup entered)
					for each GeneralLedgerCompanyGroupMemberRel
						LocalCompany = each.Company
						if (AssetCompanyRel.PendingYearEndCount entered)
							constraint (false)
								"CannotRunRelease-YearEndClosePendingForCompany<each.Company>"
						if(AssetCompanyRel.PeriodCloseRelease.InProcess)
							constraint (false)
								"PeriodOrYearEndCloseForCompany<each.Company>IsInProcess"		
						for each BookCalendarsRel
							if (each.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[1] not entered)
								constraint (false)
									"MustRe-enterRunScheduleAfterShortYearClose"	
						initialize Company

			if (Source.DepreciationCalculation)
				if (Book not entered)
					constraint (BookGroup entered)
						"MustEnterEitherBookOrBookGroup" 

				if (BookGroup entered)
					constraint (Book not entered)
						"CannotSpecifyBothBookAndBookGroup"	
					constraint (BookGroupBookRel exists)
						"BookGroup<BookGroup>HasNoBooksDefined"
					for each BookGroupBookRel
						LocalBook = each.Book
						if (!LocalBook.Active)

							LocalErrorMessage = "Book " + LocalBook + " is Inactive"
							include DepreciationErrorCreation						
					if (Company entered)
						LocalCompany = Company

						for each BookGroupBookRel
							LocalBook = each.Book
							constraint (LocalBookCalendarRel exists)
								"CalendarIsNotSetUpForThisBook<LocalBook>"
							if (each.Book.DepreciationType.ClassLevel)
								ClassDepreciationExists = true		 	 
				else
					constraint (BookGroup not entered)
						"CannotSpecifyBothBookAndBookGroup"

					constraint (Book.Active)
						"BookIs_Inactive"
					if (Book.DepreciationType.ClassLevel)
						ClassDepreciationExists = true				



				if(Company entered)
					LocalCompany = Company

					constraint (AssetCompanyRel exists)
						"Company<Company>IsNotBeingUsedInThe_AM_System"
					include EditCompany
					constraint (UnreleasedorPostReleaseAssetsRel not exists)
						"UnreleasedOrInprogressAssetExistsForCompany<Company>"
				else

					for each GeneralLedgerCompanyGroupRel
						LocalCompany = each.Company

						if(AssetCompanyRel not exists)

							LocalErrorMessage = "Company" + LocalCompany + " in company group " + LocalCompany + " not in AM"
							include DepreciationErrorCreation
						
						if(AssetCompanyRel.PeriodCloseRelease.No)
							DepreciationCalculationError = true
							LocalErrorMessage = "Release Assets must be run"
							include DepreciationErrorCreation
						
						if (UnreleasedorPostReleaseAssetsRel exists)
							DepreciationCalculationError = true
							LocalErrorMessage = "Unreleased Or Inprogress asset exists for Company " + LocalCompany
							include DepreciationErrorCreation

						if(AssetCompanyRel.PeriodCloseRelease.InProcess)
							DepreciationCalculationError = true
							LocalErrorMessage = "Period or Year End Close for Company " + LocalCompany + " is in process"
							include DepreciationErrorCreation
						
						if (BookGroup entered)
							for each BookGroupBookRel
								LocalBook = each.Book
								if (LocalCurrentBookCalendarRel not exists)
									DepreciationCalculationError = true
									LocalErrorMessage = "Book " + LocalBook + " does not have current calendar for company " + LocalCompany
									include DepreciationErrorCreation
								if (AssetCompanyRel.PendingYearEndCount entered)
									if (LocalCurrentBookCalendarRel exists
									and (LocalCurrentBookCalendarRel.DepreciationPeriodsPerYear = LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed))
										DepreciationCalculationError = true
										LocalErrorMessage = "Year-end close pending for book " + LocalBook + "in company " + LocalCompany
										include DepreciationErrorCreation
						else
							if (AssetCompanyRel.PendingYearEndCount entered
							and LocalCurrentBookCalendarRel exists
							and (LocalCurrentBookCalendarRel.DepreciationPeriodsPerYear = LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed))
								DepreciationCalculationError = true
								LocalErrorMessage = "Year-end close pending for book " + LocalBook + "in company " + LocalCompany
								include DepreciationErrorCreation
						
		DepreciationErrorCreation
			invoke Create AssetErrorResult
				invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
				invoked.Company				   = LocalCompany
				invoked.ErrorClass			   = 3
				invoked.ErrorLevel             = 1
				invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
				invoked.ErrorMessage		   = LocalErrorMessage

		PeriodCloseRules
			if (Book not entered
			and BookGroup not entered)
				constraint (false)
					"MustEnterEitherBookOrBookGroup"
			if (Company not entered
			and CompanyGroup not entered)
				constraint (false)
					"MustEnterEitherCompanyOrCompanyGroup"

			if (BookGroup entered)
				constraint (BookGroupRel exists)
					"BookGroup<BookGroup>NotFound"
				constraint (AllBookGroupBookRel exists)
					"BookGroupHasNoBooksDefined"
			if (Company entered)
				LocalCompany = Company
				constraint (AssetCompanyRel exists)
					"AssetCompanyNotFounds"
				constraint (!AssetCompanyRel.PeriodCloseRelease.InProcess)
					"PeriodCloseIsInProgressForCompany<Company>"
				if (AssetCompanyRel.UnreleasedAssetExists
				or AssetCompanyRel.PostReleaseAssetExists)
					constraint (AssetCompanyRel.ReleasedAssetsExist)
						"UnreleasedAssetExistsForCompany<Company>"
				constraint (!AssetCompanyRel.PeriodCloseRelease.No)
					"ReleaseAssetsHasNotRunForCompany<Company>"




				if (Book entered)
					LocalBook = Book
					if (LocalBookCalendarRel.IsPostingBook)
						LocalPosting = true
					constraint (LocalBooksRel exists)
						"BookNotFound"
					constraint (LocalCurrentBookCalendarRel exists)
						"Book<LocalBook>Company<LocalCompany>NotInBookCalendar"
					constraint (LocalCurrentBookCalendarRel.DepreciationCalculated)
						"AssetDepreciationCalculationAndListHasNotCalculatedForBook:<Book>Company:<Company>"
					if (LocalCurrentBookCalendarRel exists)
						constraint (LocalCurrentBookCalendarRel.DepreciationPeriodsPerYear != LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed)
							"ThisBook<Book>Company<Company>IsReadyForYearEndClose"
					if (Book.ImpairmentBook exists)
						constraint (LocalCurrentBookCalendarRel exists)
							"Book<Book>Company<LocalCompany>NotInBookCalendar"
					else
						constraint (LocalCurrentBookCalendarRel exists)
							"Book<Book>Company<LocalCompany>NotInBookCalendar.<Book.ImpairmentBook>Company<LocalCompany>NotInBookCalendar"
					constraint (LocalCurrentBookCalendarRel.DepreciationCalculated)
						"AssetDepreciationCalculationAndListHasNotCalculatedForBook:<Book>Company:<Company>"
					if (LocalCurrentBookCalendarRel.IsPostingBook
					and LocalCurrentBookCalendarRel.CloseBook.Yes
					and (LocalCurrentBookCalendarRel.DepreciationPeriodsPerYear >= (LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed + LocalCurrentBookCalendarRel.NumberOfPeriodsInProcess)))
						if (LocalCompanySystemClosingControlRel exists)
							if (LocalCompanySystemClosingControlRel.ClosedPeriod.GeneralLedgerCalendarPeriod = AssetCompanyRel.Company.AccountingEntity.CurrentPeriod.GeneralLedgerCalendarPeriod)
								PeriodCloseError = true
								if (!CloseControlError)
									CloseControlError = true
									invoke Create AssetErrorResult
										invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
										invoked.Company				   = LocalCompany
										invoked.ErrorClass			   = 3
										invoked.ErrorLevel             = 1
										invoked.AssetBatchUpdateResult = AssetBatchUpdateResult

										invoked.ErrorMessage		   = "Global Ledger must be closed to period "+LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed+" prior to closing Asset period "+(LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed+1)+" for Company "+LocalCompany
									if (!(LocalCurrentBookCalendarRel.CurrentPeriodDate within LocalCompanySystemClosingControlRel.ValidEntryDate))
										PeriodCloseError = true
										invoke Create AssetErrorResult
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
											invoked.Company				   = LocalCompany
											invoked.ErrorClass			   = 3
											invoked.ErrorLevel             = 1
											invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
											invoked.ErrorMessage		   = "Posting date for company "+LocalCompany+" Must be with in system closing control valid date range"
							else
								if (!CloseRangeError)
									constraint (LocalCurrentBookCalendarRel.CurrentPeriodDate within LocalCompanySystemClosingControlRel.ValidEntryDate)
										"PostingDateForCompany<LocalCompany>MustBeWithinSystemClosingControlValidDateRange"
					constraint (PostingDate not entered
						or (PostingDate > LocalCurrentBookCalendarRel.LastPeriodDate
						and PostingDate <= LocalCurrentBookCalendarRel.CurrentPeriodDate))
							"PostingDateMustBeInTheCurrentPeriodForBook<LocalBook>Company<LocalCompany>"
					
					if(Release.Yes
					or Release.YesNoErrorReport)
						if(AssetCompanyRel.DepreciationApproval)
							if(!LocalBookCalendarRel.DepreciationCalculationStatus.Approved)
								PeriodCloseError = true
								invoke Create AssetErrorResult
									invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
									invoked.Company				   = LocalCompany
									invoked.ErrorClass			   = 3
									invoked.ErrorLevel             = 1
									invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
									invoked.ErrorMessage		   = "Cannot close the book "+LocalBook+"; Depreciation is pending for approval"
				else
					if (BookGroup entered)
						for each AllBookGroupBookRel	
							LocalBook = each.Book
							if (LocalBookCalendarRel.IsPostingBook)
								LocalPosting = true
							constraint (LocalCurrentBookCalendarRel exists)
								"Book<LocalBook>Company<LocalCompany>NotInBookCalendar.<each.Book.ImpairmentBook>Company<LocalCompany>NotInBookCalendar"
							constraint (PostingDate not entered
							or (PostingDate > LocalCurrentBookCalendarRel.LastPeriodDate
							and PostingDate <= LocalCurrentBookCalendarRel.CurrentPeriodDate))
								"PostingDateMustBeInTheCurrentPeriodForBook<LocalBook>Company<LocalCompany>"
							if (LocalCurrentBookCalendarRel exists)
								constraint (LocalCurrentBookCalendarRel.DepreciationPeriodsPerYear != LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed)
									"ThisBook<Book>Company<Company>IsReadyForYearEndClose"
							if (!LocalCurrentBookCalendarRel.DepreciationCalculated)
								PeriodCloseError = true
								invoke Create AssetErrorResult
									invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
									invoked.Company				   = LocalCompany
									invoked.ErrorClass			   = 3
									invoked.ErrorLevel             = 1
									invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
									invoked.ErrorMessage		   = "Asset Depreciation Calculation And List Has Not Calculated For Book " + LocalBook + " Company " + LocalCompany
							if(Release.Yes
							or Release.YesNoErrorReport)
								if(AssetCompanyRel.DepreciationApproval)
									if(!LocalBookCalendarRel.DepreciationCalculationStatus.Approved)
										PeriodCloseError = true
										invoke Create AssetErrorResult
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
											invoked.Company				   = LocalCompany
											invoked.ErrorClass			   = 3
											invoked.ErrorLevel             = 1
											invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
											invoked.ErrorMessage		   = "Cannot close the book "+LocalBook+"; Depreciation is pending for approval"
							if (!PeriodCloseError
							and LocalCurrentBookCalendarRel.IsPostingBook
							and LocalCurrentBookCalendarRel.CloseBook.Yes
							and (LocalCurrentBookCalendarRel.DepreciationPeriodsPerYear >= (LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed + LocalCurrentBookCalendarRel.NumberOfPeriodsInProcess)))
								if (LocalCompanySystemClosingControlRel exists)
									if (LocalCompanySystemClosingControlRel.ClosedPeriod.GeneralLedgerCalendarPeriod = AssetCompanyRel.Company.AccountingEntity.CurrentPeriod.GeneralLedgerCalendarPeriod)
										PeriodCloseError = true
										invoke Create AssetErrorResult
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
											invoked.Company				   = LocalCompany
											invoked.ErrorClass			   = 3
											invoked.ErrorLevel             = 1
											invoked.AssetBatchUpdateResult = AssetBatchUpdateResult

											invoked.ErrorMessage		   = "Global Ledger must be closed to period "+LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed+" prior to closing Asset period "+(LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed+1)+" for Company "+LocalCompany
										if (!(LocalCurrentBookCalendarRel.CurrentPeriodDate within LocalCompanySystemClosingControlRel.ValidEntryDate))
											PeriodCloseError = true
											invoke Create AssetErrorResult
												invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
												invoked.Company				   = LocalCompany
												invoked.ErrorClass			   = 3
												invoked.ErrorLevel             = 1
												invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
												invoked.ErrorMessage		   = "Posting date for company "+LocalCompany+" Must be with in system closing control valid date range"
									else
										if (!CloseRangeError)
											constraint (LocalCurrentBookCalendarRel.CurrentPeriodDate within LocalCompanySystemClosingControlRel.ValidEntryDate)
												"PostingDateForCompany<LocalCompany>MustBeWithinSystemClosingControlValidDateRange"
				if (!PeriodCloseError
				and (Release.Yes
				or Release.YesNoErrorReport))
					if (AssetCompanyRel exists)
						invoke SetPeriodCloseRelease AssetCompanyRel
							invoked.PrmPeriodCloseRelease = "X"
			else
			if (CompanyGroup entered)
				for each GeneralLedgerCompanyGroupMemberRel
					LocalCompany = each.Company
					if (AssetCompanyRel.UnreleasedAssetExists
					or AssetCompanyRel.PostReleaseAssetExists)
						constraint (AssetCompanyRel.ReleasedAssetsExist)
							"UnreleasedAssetExistsForCompany<LocalCompany>"
					constraint (!AssetCompanyRel.PeriodCloseRelease.No)
						"ReleaseAssetsHasNotRunForCompany<LocalCompany>"
					constraint (!AssetCompanyRel.PeriodCloseRelease.InProcess)
						"PeriodCloseIsInProgressForCompany<LocalCompany>"




					
					if (Book entered)
						LocalBook = Book
						if (LocalBookCalendarRel.IsPostingBook)
							LocalPosting = true
						if (Book.ImpairmentBook exists)
							constraint (LocalCurrentBookCalendarRel exists)
								"Book<LocalBook>Company<LocalCompany>NotInBookCalendar"
						else
							constraint (LocalCurrentBookCalendarRel exists)
								"Book<LocalBook>Company<LocalCompany>NotInBookCalendar.<Book.ImpairmentBook>Company<LocalCompany>NotInBookCalendar"
						if (!LocalCurrentBookCalendarRel.DepreciationCalculated)
							PeriodCloseError = true
							invoke Create AssetErrorResult
								invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
								invoked.Company				   = LocalCompany
								invoked.ErrorClass			   = 3
								invoked.ErrorLevel             = 1
								invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
								invoked.ErrorMessage		   = "Asset Depreciation Calculation And List Has Not Calculated For Book " + LocalBook + " Company " + LocalCompany
						if(Release.Yes
						or Release.YesNoErrorReport)
							if(AssetCompanyRel.DepreciationApproval)
								if(!LocalBookCalendarRel.DepreciationCalculationStatus.Approved)
									PeriodCloseError = true
									invoke Create AssetErrorResult
										invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
										invoked.Company				   = LocalCompany
										invoked.ErrorClass			   = 3
										invoked.ErrorLevel             = 1
										invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
										invoked.ErrorMessage		   = "Cannot close the book "+LocalBook+"; Depreciation is pending for approval"
						if (!PeriodCloseError
						and LocalCurrentBookCalendarRel.IsPostingBook
						and LocalCurrentBookCalendarRel.CloseBook.Yes
						and (LocalCurrentBookCalendarRel.DepreciationPeriodsPerYear >= (LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed + LocalCurrentBookCalendarRel.NumberOfPeriodsInProcess)))
							if (LocalCompanySystemClosingControlRel exists)
								if (LocalCompanySystemClosingControlRel.ClosedPeriod.GeneralLedgerCalendarPeriod = AssetCompanyRel.Company.AccountingEntity.CurrentPeriod.GeneralLedgerCalendarPeriod)
									PeriodCloseError = true
									if (!CloseControlError)
										invoke Create AssetErrorResult
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
											invoked.Company				   = LocalCompany
											invoked.ErrorClass			   = 3
											invoked.ErrorLevel             = 1
											invoked.AssetBatchUpdateResult = AssetBatchUpdateResult

											invoked.ErrorMessage		   = "Global Ledger must be closed to period "+LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed+" prior to closing Asset period "+(LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed+1)+" for Company "+LocalCompany
										if (!(LocalCurrentBookCalendarRel.CurrentPeriodDate within LocalCompanySystemClosingControlRel.ValidEntryDate))
											PeriodCloseError = true
											invoke Create AssetErrorResult
												invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
												invoked.Company				   = LocalCompany
												invoked.ErrorClass			   = 3
												invoked.ErrorLevel             = 1
												invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
												invoked.ErrorMessage		   = "Posting date for company "+LocalCompany+" Must be with in system closing control valid date range"
								else
									if (!CloseRangeError)
										constraint (LocalCurrentBookCalendarRel.CurrentPeriodDate within LocalCompanySystemClosingControlRel.ValidEntryDate)
											"PostingDateForCompany<LocalCompany>MustBeWithinSystemClosingControlValidDateRange"
						constraint (PostingDate not entered
							or (PostingDate > LocalCurrentBookCalendarRel.LastPeriodDate
							and PostingDate <= LocalCurrentBookCalendarRel.CurrentPeriodDate))
								"PostingDateMustBeInTheCurrentPeriodForBook<LocalBook>Company<LocalCompany>"
					else
					if (BookGroup entered)
						for each AllBookGroupBookRel	
							LocalBook = each.Book
							if (LocalBookCalendarRel.IsPostingBook)
								LocalPosting = true
							constraint (LocalCurrentBookCalendarRel exists)
								"Book<LocalBook>Company<LocalCompany>NotInBookCalendar.<LocalBook.ImpairmentBook>Company<LocalCompany>NotInBookCalendar"
							constraint (PostingDate not entered
							or (PostingDate > LocalCurrentBookCalendarRel.LastPeriodDate
							and PostingDate <= LocalCurrentBookCalendarRel.CurrentPeriodDate))
								"PostingDateMustBeInTheCurrentPeriodForBook<LocalBook>Company<LocalCompany>"
							if (!LocalCurrentBookCalendarRel.DepreciationCalculated)
								PeriodCloseError = true
								invoke Create AssetErrorResult
									invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
									invoked.Company				   = LocalCompany
									invoked.ErrorClass			   = 3
									invoked.ErrorLevel             = 1
									invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
									invoked.ErrorMessage		   = "Asset Depreciation Calculation And List Has Not Calculated For Book " + LocalBook + " Company " + LocalCompany
							if(Release.Yes
							or Release.YesNoErrorReport)
								if(AssetCompanyRel.DepreciationApproval)
									if(!LocalBookCalendarRel.DepreciationCalculationStatus.Approved)
										PeriodCloseError = true
										invoke Create AssetErrorResult
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
											invoked.Company				   = LocalCompany
											invoked.ErrorClass			   = 3
											invoked.ErrorLevel             = 1
											invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
											invoked.ErrorMessage		   = "Cannot close the book "+LocalBook+"; Depreciation is pending for approval"
							if (!PeriodCloseError
							and LocalCurrentBookCalendarRel.IsPostingBook
							and LocalCurrentBookCalendarRel.CloseBook.Yes
							and (LocalCurrentBookCalendarRel.DepreciationPeriodsPerYear >= (LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed + LocalCurrentBookCalendarRel.NumberOfPeriodsInProcess)))
								if (LocalCompanySystemClosingControlRel exists)
									if (LocalCompanySystemClosingControlRel.ClosedPeriod.GeneralLedgerCalendarPeriod = AssetCompanyRel.Company.AccountingEntity.CurrentPeriod.GeneralLedgerCalendarPeriod)
										PeriodCloseError = true
										invoke Create AssetErrorResult
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
											invoked.Company				   = LocalCompany
											invoked.ErrorClass			   = 3
											invoked.ErrorLevel             = 1
											invoked.AssetBatchUpdateResult = AssetBatchUpdateResult

											invoked.ErrorMessage		   = "Global Ledger must be closed to period "+LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed+" prior to closing Asset period "+(LocalCurrentBookCalendarRel.NumberOfDepreciationPeriodsClosed+1)+" for Company "+LocalCompany
										if (!(LocalCurrentBookCalendarRel.CurrentPeriodDate within LocalCompanySystemClosingControlRel.ValidEntryDate))
											PeriodCloseError = true
											invoke Create AssetErrorResult
												invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup	
												invoked.Company				   = LocalCompany
												invoked.ErrorClass			   = 3
												invoked.ErrorLevel             = 1
												invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
												invoked.ErrorMessage		   = "Posting date for company "+LocalCompany+" Must be with in system closing control valid date range"
									else
										if (!CloseRangeError)
											constraint (LocalCurrentBookCalendarRel.CurrentPeriodDate within LocalCompanySystemClosingControlRel.ValidEntryDate)
												"PostingDateForCompany<LocalCompany>MustBeWithinSystemClosingControlValidDateRange"


					
				if (!PeriodCloseError
				and (Release.Yes
				or Release.YesNoErrorReport))
					for each GeneralLedgerCompanyGroupMemberRel
						LocalCompany = each.Company
						if (AssetCompanyRel exists)
							invoke SetPeriodCloseRelease AssetCompanyRel
								invoked.PrmPeriodCloseRelease = "X"
											
		EditCompany
			if(Company.PeriodCloseRelease.No)
				constraint (false)
					"Release_AssetsMustBeRun"
			if(Company.PeriodCloseRelease.InProcess)
				constraint (false)
					"PeriodOrYearEndCloseForCompany<Company>IsInProcess"
			if (Company.PendingYearEndCount entered)

				if (BookGroup entered)

					for each BookGroupBookRel
						LocalBook = each.Book

						if (LocalBookCalendarRel exists
						and (LocalBookCalendarRel.DepreciationPeriodsPerYear = LocalBookCalendarRel.NumberOfDepreciationPeriodsClosed))

							DepreciationCalculationError = true
							LocalErrorMessage = "Year-end close pending for book " + LocalBook + " in company " + Company
							include DepreciationErrorCreation
				else

					if (LocalBookCalendarRel exists
					and (LocalBookCalendarRel.DepreciationPeriodsPerYear = LocalBookCalendarRel.NumberOfDepreciationPeriodsClosed))
						constraint (false)
							"Year-endClosePendingForBook<Book>InCompany<Company>"

		UpdateCurrentBookCalendarForDepreciation
			I1 = LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1
			invoke NoEditUpdate LocalCurrentBookCalendarRel
				invoked.NumberOfPeriodsInProcess 		= LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[I1]
				invoked.InProcessFiscalPeriodEndDate 	= LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]
				invoked.DepreciationCalculated			= true
			
			if(AssetCompanyRel.DepreciationApproval)
				invoke NoEditUpdate LocalCurrentBookCalendarRel
					invoked.DepreciationCalculationStatus = "S"
				invoke ProcessFlow LocalCurrentBookCalendarRel
				

			if (LocalBook.ImpairmentBook entered)
				LocalBook = LocalBook.ImpairmentBook
				I1 = LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns + 1
				invoke NoEditUpdate LocalCurrentBookCalendarRel
					invoked.NumberOfPeriodsInProcess 		= LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[I1]
					invoked.InProcessFiscalPeriodEndDate 	= LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodEndDates.DepreciationPeriodEndDate[I1]
					invoked.DepreciationCalculated			= true




  																
	
	Actions
		Create is a Create Action
			restricted

		Update is an Update Action
			restricted
		
		FastUpdate is an Update Action
			restricted
			bypass field rules
		
		StatusUpdate is an Instance Action
			restricted
			default label is untranslatable
			Parameters
				PrmDetailView	is Numeric 2
			Action Rules
				if (ErrorsExist)

					Status = Status.CompletedWithErrors
					LocalActor = actor
					send notification
						to LocalActor
						description is "<BatchName>HasCompletedWithErrors"
						priority is high
						detail is "OutputIsAvailableInAssetsHomeProcessingResultsTab"
				else
				if((Release.Yes
				and (ReleasedTransactionsRel exists
				or ReleasedBookTransactionsRel exists
				or JournalizeGroup entered))
				or (Release.No
				and UnreleasedAssetsRel exists))


					Status = Status.Completed
					LocalActor = actor
					send notification
						to LocalActor
						description is "<BatchName>HasCompleted"
						priority is medium
						detail is "OutputIsAvailableInAssetsHomeProcessingResultsTab"
				else
					LocalActor = actor
					Status = Status.NoRecordsToProcess
						send notification
							to LocalActor
							description is "<BatchName>HasCompletedNoRecordsFoundToProcess"
							priority is medium
							detail is "NoRecordsFoundToProcess"
		
		Delete is a Delete Action
			default label is "Delete"
			Entrance Rules
				invoke Delete AssetTransactionDetailRel
				invoke Delete AssetErrorResultRel
		
		ReleaseAssets is a Create Action
			completion message is "ReleaseAssetsSubmitted"
			
			Entrance Rules
				Release = TransientRelease

			Action Rules
				Source = "1"
				FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup
				include EditParameters
				Status = Status.InProcess

			Exit Rules

				AssetBackgroundGroup	 				= BackgroundGroupKey + "Phase1"

				invoke MassRelease Asset in background group (AssetBackgroundGroup)
					assign async action request id to BackgroundGroupAsyncId
					invoked.PrmFinanceEnterpriseGroup 		= FinanceEnterpriseGroup
					invoked.PrmRelease    					= Release  		
					invoked.Process         				= Process		
					invoked.PrmCompany 						= Company		
					invoked.PrmCompanyGroup					= CompanyGroup
					invoked.PrmLocationName 				= LocationName        
					invoked.PrmDivision    					= Division         
					invoked.PrmAssetGroup   				= AssetGroup         
					invoked.PrmAuGroup      				= AssetAccountingUnitGroup        
					invoked.PrmAssetType   			    	= AssetType        
					invoked.PrmCreatorId    				= CreatorId
					invoked.PrmAssetMassReleaseResult 		= AssetBatchUpdateResult
					invoked.PrmJournalizeGroup		  		= LocalJournalizeGroup

					invoked.PrmDefaultTransactionDimension			= DefaultTransactionDimension




















							
				LastBackgroundGroup						= AssetBackgroundGroup
				AssetBackgroundGroup					= BackgroundGroupKey + "Phase2"










				invoke StatusUpdate in background group (AssetBackgroundGroup)
					run after BackgroundGroupAsyncId
					assign async action request id to BackgroundGroupAsyncId



		
		AssetPeriodClose is a Create Action
			default label is "ClosePeriod"
			completion message is "AssetPeriodCloseSubmitted"
			Entrance Rules
				
			Action Rules
				Source = "2"
				initialize Thread
				
			Exit Rules
				include PeriodCloseRules
				if ((Release.Yes
				or Release.No)
				and !PeriodCloseError)
					include EditTransactionRuleBlock

				if ((Release.Yes
				or Release.YesNoErrorReport)
				and LocalPosting
				and !PeriodCloseError)
					increment GeneralLedgerSystemCodeRel.LastJournalizeGroup
					JournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
				PeriodEndDate = PeriodEnding
				AssetBackgroundGroup = "AssetPeriodCloseResult_" + AssetBatchUpdateResult + "Phase1"
				if (!PeriodCloseError)	
					while (Thread < Queue)
						invoke AssetPeriodClose AssetBook in background group (AssetBackgroundGroup)
							assign async action request id to BackgroundGroupAsyncId
								invoked.PrmFinanceEnterpriseGroup 	= FinanceEnterpriseGroup
								invoked.PrmBook						= Book	
								invoked.PrmBookGroup 				= BookGroup
								invoked.PrmCompany   				= Company        
								invoked.PrmCompanyGroup  			= CompanyGroup
								invoked.PrmRelease					= Release
								invoked.PrmAssetGroup				= AssetGroup
								invoked.PrmAssetGroupSelection		= AssetGroupSelection
								invoked.PrmAssetPeriodCloseResult	= AssetBatchUpdateResult
								invoked.PrmReportMode				= DetailMode
								invoked.PrmPostingDate              = PostingDate
								invoked.PrmThread					= Thread
								invoked.PrmQueue					= Queue
								invoked.PrmJournalizeGroup			= JournalizeGroup
						Thread += 1
					
					LastBackgroundGroup = AssetBackgroundGroup
					AssetBackgroundGroup = "AssetPeriodCloseResult_" + AssetBatchUpdateResult + "Phase2"
					
					if (Release.Yes
					or Release.YesNoErrorReport)
						invoke RebuildAssetTransactionSummary AssetTransaction in background group (AssetBackgroundGroup)  
							run after background group (LastBackgroundGroup)
							invoked.PrmSetAction 				= true
							invoked.PrmAssetBatchUpdateResult	= AssetBatchUpdateResult

						LastBackgroundGroup = AssetBackgroundGroup
						AssetBackgroundGroup = "AssetPeriodCloseResult_" + AssetBatchUpdateResult + "Phase3"

						invoke RebuildAssetTransactionSummary AssetBookTransaction in background group (AssetBackgroundGroup)  
							run after background group (LastBackgroundGroup)
							invoked.PrmSetAction 				= true
							invoked.PrmAssetBatchUpdateResult	= AssetBatchUpdateResult

						LastBackgroundGroup = AssetBackgroundGroup
						AssetBackgroundGroup = "AssetPeriodCloseResult_" + AssetBatchUpdateResult + "Phase4"

						invoke UpdateBook in background group (AssetBackgroundGroup)   
							run after background group (LastBackgroundGroup)
						
						LastBackgroundGroup = AssetBackgroundGroup
						AssetBackgroundGroup = "AssetPeriodCloseResult_" + AssetBatchUpdateResult + "Phase5"
						
				invoke UpdateStatusOnResult in background group (AssetBackgroundGroup)
					run after background group (LastBackgroundGroup)


		UpdateBook is an Instance Action
			restricted

			Action Rules
				invoke JournalizeDistributionsForBatch first AssetTransactionJournalizeRel
					invoked.PrmOptions					= "1"
					invoked.PrmUpdateOrigin				= "2"
					invoked.PrmFinanceEnterpriseGroup	= FinanceEnterpriseGroup
					invoked.PrmPostingDate				= PostingDate
					if (Company entered)
						invoked.PrmAssetCompany 		= Company
					else
					if (CompanyGroup entered)
						invoked.PrmCompanyGroup			= CompanyGroup
					invoked.PrmDescription				= "Asset Period Close"
					invoked.PrmJournalizeGroup			= JournalizeGroup
		
				if (AssetPerioCloseTransactionsExists
				or !PeriodCloseError)
					if (Company entered)
						LocalCompany = Company
						
						if (Book entered)
							LocalBook = Book
							LocalNumberOfPeriodsClose = LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
							invoke NoEditUpdate LocalCurrentBookCalendarRel
								invoked.NumberOfPeriodCloseRuns += 1
								invoked.DepreciationCalculationStatus = " "
								LocalArrayCount					= LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
								invoked.NumberOfDepreciationPeriodsClosed += LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount]
								invoked.InProcessFiscalPeriodEndDate = 0
								invoked.NumberOfPeriodsInProcess = 0
								if (invoked.DepreciationPeriodsPerYear = (invoked.NumberOfDepreciationPeriodsClosed + invoked.NumberOfPeriodsInProcess))
									PendingYearEndOption			= true
									invoked.DepreciationCalculated 	= true
								else
									invoked.DepreciationCalculated 	= false
							
							if (LocalBooksRel.ImpairmentBook entered)
								LocalBook = LocalBooksRel.ImpairmentBook
								invoke NoEditUpdate LocalCurrentBookCalendarRel
									invoked.NumberOfPeriodCloseRuns += 1

									LocalArrayCount					= LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
									invoked.NumberOfDepreciationPeriodsClosed += LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount]
									invoked.InProcessFiscalPeriodEndDate = 0
									invoked.NumberOfPeriodsInProcess = 0
									if (invoked.DepreciationPeriodsPerYear = (invoked.NumberOfDepreciationPeriodsClosed + invoked.NumberOfPeriodsInProcess))
										PendingYearEndOption			= true
										invoked.DepreciationCalculated 	= true
									else
										invoked.DepreciationCalculated 	= false
								if (PendingYearEndOption)
									invoke AssetPeriodCloseUpdates AssetCompanyRel
										invoked.PrmPendingYearEndCount += 1
							
							invoke AssetPeriodCloseUpdates AssetCompanyRel
								invoked.PrmAssetPeriodCloseRelease = "Y"
								if (PendingYearEndOption)
									invoked.PrmPendingYearEndCount += 1
							
							LocalBook = Book
							if (AssetCompanyCloseBookCalendarsRel exists)
								if (any AssetCompanyCloseBookCalendarsRel.NumberOfPeriodCloseRuns = LocalNumberOfPeriodsClose)
									invoke Create AssetErrorResult
										invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
										invoked.Company				   = Company
										invoked.ErrorLevel             = 2
										invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
										invoked.ErrorMessage		   = "Period Close for Company "+LocalCompany+" and Book "+LocalBook+" is complete. System closing control will be updated once all close books have been closed for Current Period"

							if (!PeriodCloseError)
								if (AssetCompanyCloseBookCalendarsRel exists)
									if (all AssetCompanyCloseBookCalendarsRel.NumberOfPeriodCloseRuns = LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns)
										invoke CloseAssetSystem AssetCompanyRel
											invoked.PrmCompany = AssetCompanyRel.Company
						else
						if (BookGroup entered)
							for each AllBookGroupBookRel
								LocalBook = each.Book
								LocalNumberOfPeriodsClose = LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
								invoke NoEditUpdate LocalCurrentBookCalendarRel
									invoked.NumberOfPeriodCloseRuns += 1
									invoked.DepreciationCalculationStatus = " "
									LocalArrayCount					= LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
									invoked.NumberOfDepreciationPeriodsClosed += LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount]
									invoked.InProcessFiscalPeriodEndDate = 0
									invoked.NumberOfPeriodsInProcess = 0
									if (invoked.DepreciationPeriodsPerYear = (invoked.NumberOfDepreciationPeriodsClosed + invoked.NumberOfPeriodsInProcess))
										PendingYearEndOption			= true
										invoked.DepreciationCalculated 	= true
									else
										invoked.DepreciationCalculated 	= false
								
								if (LocalBooksRel.ImpairmentBook entered)
									LocalBook = LocalBooksRel.ImpairmentBook
									invoke NoEditUpdate LocalCurrentBookCalendarRel
										invoked.NumberOfPeriodCloseRuns += 1

										LocalArrayCount					= LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
										invoked.NumberOfDepreciationPeriodsClosed += LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount]
										invoked.InProcessFiscalPeriodEndDate = 0
										invoked.NumberOfPeriodsInProcess = 0
										if (invoked.DepreciationPeriodsPerYear = (invoked.NumberOfDepreciationPeriodsClosed + invoked.NumberOfPeriodsInProcess))
											PendingYearEndOption			= true
											invoked.DepreciationCalculated 	= true
										else
											invoked.DepreciationCalculated 	= false
									if (PendingYearEndOption)
										invoke AssetPeriodCloseUpdates AssetCompanyRel
											invoked.PrmPendingYearEndCount += 1
							
								invoke AssetPeriodCloseUpdates AssetCompanyRel
									invoked.PrmAssetPeriodCloseRelease = "Y"
									if (PendingYearEndOption)
										invoked.PrmPendingYearEndCount += 1
								
							if (AssetCompanyCloseBookCalendarsRel exists
							and LocalCompanySystemClosingControlRel exists)
								if (any AssetCompanyCloseBookCalendarsRel.NumberOfPeriodCloseRuns = LocalNumberOfPeriodsClose)
									invoke Create AssetErrorResult
										invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
										invoked.Company				   = LocalCompany
										invoked.ErrorLevel             = 2
										invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
										invoked.ErrorMessage		   = "Period Close for Company "+LocalCompany+" and Book Group "+BookGroup+" is complete. System closing control will be updated once all close books have been closed for Current Period"
							
							if (!PeriodCloseError)
								if (AssetCompanyCloseBookCalendarsRel exists)
									if (all AssetCompanyCloseBookCalendarsRel.NumberOfPeriodCloseRuns = LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns)
										invoke CloseAssetSystem AssetCompanyRel
											invoked.PrmCompany = AssetCompanyRel.Company
					
					if (CompanyGroup entered)
						for each GeneralLedgerCompanyGroupMemberRel
							LocalCompany = each.Company
							if (Book entered)
								LocalBook = Book
								LocalNumberOfPeriodsClose = LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
								invoke NoEditUpdate LocalCurrentBookCalendarRel
									invoked.NumberOfPeriodCloseRuns += 1
									invoked.DepreciationCalculationStatus = " "
									LocalArrayCount					= LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
									invoked.NumberOfDepreciationPeriodsClosed += LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount]
									invoked.InProcessFiscalPeriodEndDate = 0
									invoked.NumberOfPeriodsInProcess = 0
									if (invoked.DepreciationPeriodsPerYear = (invoked.NumberOfDepreciationPeriodsClosed + invoked.NumberOfPeriodsInProcess))
										PendingYearEndOption			= true
										invoked.DepreciationCalculated 	= true
									else
										invoked.DepreciationCalculated 	= false
								
								if (LocalBooksRel.ImpairmentBook entered)
									LocalBook = LocalBooksRel.ImpairmentBook
									invoke NoEditUpdate LocalCurrentBookCalendarRel
										invoked.NumberOfPeriodCloseRuns += 1

										LocalArrayCount					= LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
										invoked.NumberOfDepreciationPeriodsClosed += LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount]
										invoked.InProcessFiscalPeriodEndDate = 0
										invoked.NumberOfPeriodsInProcess = 0
										if (invoked.DepreciationPeriodsPerYear = (invoked.NumberOfDepreciationPeriodsClosed + invoked.NumberOfPeriodsInProcess))
											PendingYearEndOption			= true
											invoked.DepreciationCalculated 	= true
										else
											invoked.DepreciationCalculated 	= false
									if (PendingYearEndOption)
										invoke AssetPeriodCloseUpdates AssetCompanyRel
											invoked.PrmPendingYearEndCount += 1
								
								invoke AssetPeriodCloseUpdates AssetCompanyRel
									invoked.PrmAssetPeriodCloseRelease = "Y"
									if (PendingYearEndOption)
										invoked.PrmPendingYearEndCount += 1
								
								LocalBook = Book
								if (AssetCompanyCloseBookCalendarsRel exists)
									if (any AssetCompanyCloseBookCalendarsRel.NumberOfPeriodCloseRuns = LocalNumberOfPeriodsClose)
										invoke Create AssetErrorResult
											invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
											invoked.Company				   = LocalCompany
											invoked.ErrorLevel             = 2
											invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
											invoked.ErrorMessage		   = "Period Close for Company "+LocalCompany+" and Book "+LocalBook+" is complete. System closing control will be updated once all close books have been closed for Current Period "
								
								if (!PeriodCloseError)
									if (AssetCompanyCloseBookCalendarsRel exists)
										if (all AssetCompanyCloseBookCalendarsRel.NumberOfPeriodCloseRuns = LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns)
											invoke CloseAssetSystem AssetCompanyRel
												invoked.PrmCompany = AssetCompanyRel.Company
							else
							if (BookGroup entered)
								for each AllBookGroupBookRel
									LocalBook = each.Book
									LocalNumberOfPeriodsClose = LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
									invoke NoEditUpdate LocalCurrentBookCalendarRel
										invoked.NumberOfPeriodCloseRuns += 1
										invoked.DepreciationCalculationStatus = " "
										LocalArrayCount					= LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
										invoked.NumberOfDepreciationPeriodsClosed += LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount]
										invoked.InProcessFiscalPeriodEndDate = 0
										invoked.NumberOfPeriodsInProcess = 0
										if (invoked.DepreciationPeriodsPerYear = (invoked.NumberOfDepreciationPeriodsClosed + invoked.NumberOfPeriodsInProcess))
											PendingYearEndOption			= true
											invoked.DepreciationCalculated 	= true
										else
											invoked.DepreciationCalculated 	= false
									
									if (LocalBooksRel.ImpairmentBook entered)
										LocalBook = LocalBooksRel.ImpairmentBook
										invoke NoEditUpdate LocalCurrentBookCalendarRel
											invoked.NumberOfPeriodCloseRuns += 1

											LocalArrayCount					= LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns
											invoked.NumberOfDepreciationPeriodsClosed += LocalCurrentBookCalendarRel.DepreciationPeriods.DepreciationPeriodNumbers.DepreciationPeriodNumber[LocalArrayCount]
											invoked.InProcessFiscalPeriodEndDate = 0
											invoked.NumberOfPeriodsInProcess = 0
											if (invoked.DepreciationPeriodsPerYear = (invoked.NumberOfDepreciationPeriodsClosed + invoked.NumberOfPeriodsInProcess))
												PendingYearEndOption			= true
												invoked.DepreciationCalculated 	= true
											else
												invoked.DepreciationCalculated 	= false
										if (PendingYearEndOption)
											invoke AssetPeriodCloseUpdates AssetCompanyRel
												invoked.PrmPendingYearEndCount += 1
									
									invoke AssetPeriodCloseUpdates AssetCompanyRel
										invoked.PrmAssetPeriodCloseRelease = "Y"
										if (PendingYearEndOption)
											invoked.PrmPendingYearEndCount += 1

								if (AssetCompanyCloseBookCalendarsRel exists
								and LocalCompanySystemClosingControlRel exists)
									if (any AssetCompanyCloseBookCalendarsRel.NumberOfPeriodCloseRuns = LocalNumberOfPeriodsClose)
										if (PeriodCloseError)
											invoke Create AssetErrorResult
												invoked.FinanceEnterpriseGroup = FinanceEnterpriseGroup
												invoked.Company				   = LocalCompany
												invoked.ErrorLevel             = 2
												invoked.AssetBatchUpdateResult = AssetBatchUpdateResult
												invoked.ErrorMessage		   = "Period Close for Company "+LocalCompany+" and Book "+BookGroup+" is complete. System closing control will be updated once all close books have been closed for Current Period "

								if (!PeriodCloseError)
									if (AssetCompanyCloseBookCalendarsRel exists)
										if (all AssetCompanyCloseBookCalendarsRel.NumberOfPeriodCloseRuns = LocalCurrentBookCalendarRel.NumberOfPeriodCloseRuns)
											invoke CloseAssetSystem AssetCompanyRel
												invoked.PrmCompany = AssetCompanyRel.Company

		DepreciationCalculation is a Create Action
			default label is "CalculateDepreciation"
			completion message is "PerformCalculateDepreciationSubmitted"

			Entrance Rules
				Source = Source.DepreciationCalculation

				if (Book entered)
					LocalBook = Book
				
			Exit Rules
				include EditParameters			
				LocalBook = Book
				PeriodEndDate = PeriodEnding
				AssetBackgroundGroup = "CalculateDepreciationResult_" + AssetBatchUpdateResult + "Phase1"
				if (!DepreciationCalculationError)
					while (Thread < Queue)
						invoke DepreciationCalculation AssetBook in background group (AssetBackgroundGroup)
							assign async action request id to BackgroundGroupAsyncId
								invoked.PrmFinanceEnterpriseGroup 	= FinanceEnterpriseGroup

								invoked.PrmBook						= Book	
								invoked.PrmBookGroup 				= BookGroup
								invoked.PrmCompany   				= Company        
								invoked.PrmCompanyGroup  			= CompanyGroup
								invoked.PrmClassification			= Classification
								invoked.PrmCompute 					= Compute
								invoked.PrmSimulated				= Simulated







								invoked.PrmDepreciationCalculationResult	= AssetBatchUpdateResult
								invoked.PrmThread					= Thread
								invoked.PrmQueue					= Queue
								
						Thread += 1

					LastBackgroundGroup = AssetBackgroundGroup
					AssetBackgroundGroup = "CalculateDepreciationResult_" + AssetBatchUpdateResult + "Phase2"

					if (!Compute.ListingOnlyNoCalculation)
						if (Book entered)
							LocalBook		= Book 
						if (Company entered)
							LocalCompany 	= Company
							if (Book entered)								

								include UpdateCurrentBookCalendarForDepreciation							
							else
								for each AllBookGroupBookRel
									LocalBook = each.Book

									if (LocalBook.Active)	
										include UpdateCurrentBookCalendarForDepreciation									
						else
							for each GeneralLedgerCompanyGroupRel
								LocalCompany 	= each.Company
								if (Book entered)

									include UpdateCurrentBookCalendarForDepreciation									
								else
									for each AllBookGroupBookRel
										LocalBook = each.Book

										if (LocalBook.Active)	
											include UpdateCurrentBookCalendarForDepreciation

				invoke UpdateStatusOnResult in background group (AssetBackgroundGroup)
					run after background group (LastBackgroundGroup)
				
		DeleteAllReleaseCompleted is a Set Action
			default label is "DeleteAllCompleted"
			restricted
			Instance Selection 
				where (!Status.InProcess
				and Source.ReleaseAssets)
			Action Rules
				Instance Rules
					invoke Delete
		
		DeleteAllCloseCompleted is a Set Action
			default label is "DeleteAllCompleted"
			restricted
			Instance Selection 
				where (!Status.InProcess
				and Source.AssetPeriodClose)
			Action Rules
				Instance Rules
					invoke Delete

		DeleteAllDepreciationCalculationCompleted is a Set Action
			restricted
			Instance Selection 
				where (!Status.InProcess
				and Source.DepreciationCalculation)
			Action Rules
				Instance Rules
					invoke Delete

		DeleteAll is a Set Action
			default label is "DeleteAllCompleted"
			Instance Selection 
				where (!Status.InProcess
				and (Source.AssetPeriodClose
				or Source.ReleaseAssets
				or Source.DepreciationCalculation))
			Action Rules
				Instance Rules
					invoke Delete
		
		UpdateStatusOnResult is an Instance Action
			restricted
			Local Fields
				PrmRecordsExists	is Boolean
				LocalActor			is Actor
			Action Rules
				if (Source.AssetPeriodClose)
					if(Release.No)
						if (AssetEdistsErrorResultRel exists)
							LocalActor = actor
							Status = Status.CompletedWithErrors
							send notification
								to LocalActor
								description is "<BatchName>HasCompletedWithErrors"
								priority is high
								detail is "CompletedWithErrors,OutputIsAvailableInAssetsHomeProcessingResultsTab"

						else
							if (AssetErrorResultRel exists)
								LocalActor = actor
								Status = Status.CompletedWithErrors
								send notification
									to LocalActor
									description is "<BatchName>HasCompletedWithErrors"
									priority is high
									detail is "CompletedWithErrors,OutputIsAvailableInAssetsHomeProcessingResultsTab"

						if (PeriodCloseBookRel exists
						and !AssetEdistsErrorResultRel exists
						and !AssetErrorResultRel exists)
							LocalActor = actor
							Status = Status.Completed
							send notification
								to LocalActor
								description is "<BatchName>HasCompleted"
								priority is medium
								detail is "OutputIsAvailableInAssetsHomeProcessingResultsTab"
						else
							if (!PeriodCloseBookRel exists
							and !AssetEdistsErrorResultRel exists
							and !AssetErrorResultRel exists)
								LocalActor = actor
								Status = Status.NoRecordsToProcess
								send notification
									to LocalActor
									description is "<BatchName>HasCompletedNoRecordsFoundToProcess"
									priority is medium
									detail is "NoRecordsFoundToProcess"
					else	
					if (AssetErrorResultRel exists)	
						LocalActor = actor
						Status = Status.CompletedWithErrors
						send notification
							to LocalActor
							description is "<BatchName>HasCompletedWithErrors"
							priority is high
							detail is "CompletedWithErrors,OutputIsAvailableInAssetsHomeProcessingResultsTab"		
					else
					if (AssetTransactionRel exists
					or AssetBookTransactionRel exists)
						LocalActor = actor
						Status = Status.Completed
						send notification
							to LocalActor
							description is "<BatchName>HasCompleted"
							priority is medium
							detail is "OutputIsAvailableInAssetsHomeProcessingResultsTab"	
					else
					if (AssetTransactionGroupRel exists
					or AssetBookTransactionGroupRel exists)
						LocalActor = actor
						Status = Status.Completed
						send notification
							to LocalActor
							description is "<BatchName>HasCompleted"
							priority is medium
							detail is "OutputIsAvailableInAssetsHomeProcessingResultsTab"		
					else
						if (!PrmRecordsExists)
							LocalActor = actor
							Status = Status.NoRecordsToProcess
							send notification
								to LocalActor
								description is "<BatchName>HasCompletedNoRecordsFoundToProcess"
								priority is medium
								detail is "NoRecordsFoundToProcess"
				else
				if (Source.DepreciationCalculation)
					LocalActor = actor
					if (AssetErrorResultRel exists)	
						Status = Status.CompletedWithErrors
						send notification
							to LocalActor
							description is "<BatchName>HasCompletedWithErrors"
							priority is high
							detail is "CompletedWithErrors,OutputIsAvailableInAssetsHomeProcessingResultsTab"
					else
						if (DepreciationAssetBookRel exists)
							Status = Status.Completed
							send notification
								to LocalActor
								description is "<BatchName>HasCompleted"
								priority is medium
								detail is "OutputIsAvailableInAssetsHomeProcessingResultsTab"
						else
							Status = Status.NoRecordsToProcess
							send notification
								to LocalActor
								description is "<BatchName>HasCompletedNoRecordsFoundToProcess"
								priority is medium
								detail is "NoRecordsFoundToProcess"									
							
