NationalAccountBalance is a BusinessClass
	owned by ar
	prefix is NAB
	classic name is NATBALANCE

	Ontology
		symbolic key is NationalAccountBalance
			classic set name is NABSET1
			name is NationalAccountBalance
			classic name for Company is NAT-COMPANY
			classic name for Customer is NAT-CUSTOMER

	Patterns
		implements StaticJava
		disable AuditIndex

	Persistent Fields

		CurrentBalance						is an InternationalAmount
			disable Auditing	
			classic name is CURR-BAL
		BillOfExchangeBalance				is an InternationalAmount
			disable Auditing	
			classic name is DRAFT-BAL
		OpenOrderAmount						is an InternationalAmount
			disable Auditing	
			classic name is OPEN-ORDS
		CreditLimit							is a CreditLim
			classic name is CREDIT-LIM
		CreditLimitDate						is Date
			classic name is CREDIT-LIM-DAT
		ReviewDate							is Date
		ReviewCode							is AlphaUpper size 1
			States
				OpenToReview	value is "O"
				Reviewed		value is "R"
				No				value is blank
		ReceivableHoldCode
		HighBals							is a HighBalX13InNatbalance
			disable Auditing	
			classic name is HIGH-BAL
		LastDunningLetterNumber				is a LastDunn
			disable Auditing	
			classic name is LAST-DUNN
		LastDunningLetterDate				is Date
			disable Auditing	
			classic name is LAST-DUN-DATE
		StatementRequired					is Boolean
			classic name is STATEMENT-REQ
		InvoicedCustomerBalanceForward		is AlphaUpper size 1
			classic name is INV-CUST-BF-BL
			States
				VN	value is "N"
				VI	value is "I"
		BalanceForwardStatementCycle
		OpenItemStatementCycle
		ReceivableStatementCycle			is a StmntCycle
			classic name is STMNT-CYCLE
		ZeroBalanceStatement				is Boolean
			classic name is ZERO-STMNT-FL
		CreditBalanceStatement				is Boolean
			classic name is CRED-STMNT-FL
		PastDueOnlyStatement				is Boolean
			classic name is PAST-STMNT-FL
		OverCreditLimitStatement			is Boolean
			classic name is OVER-STMNT-FL
		NationalAccountSummaryStatement		is Boolean
			sql name is NAccountSummaryStatement
			classic name is NA-SUMMARY
		AllowReturns						is AlphaUpper size 1
			States
				No		value is "N"
				Yes		value is "Y"
				Limit	value is "L"
		LastReturnAuthorizationDate			is Date
			classic name is ALLOW-RTN-DATE


	Local Fields

		LocalGroupCurrency				is like Currency
		CurrencyWork					is a ReceivableExchange
		LocalWorkAmount					is an InternationalAmount
		I1								is Numeric 3
		LocalDate						is Date
		CurrentYear						is Numeric 4
		CurrentPeriod					is Numeric 2
		LocalTransactionDate			is Date
		LocalCollectDays				is Numeric 6
		LocalCount						is Numeric 2
		LocalParentHighBal				is Decimal size 15
		LocalChildHighBal				is Decimal size 15


		SumOfNationalAccountRelCompanyCustomerRelAmountsDone					is Boolean					
		SumOfNationalAccountRelCompanyCustomerRelPaysPrompt						is Decimal size 9			
		SumOfNationalAccountRelCompanyCustomerRelTotalReturnToMaker				is Decimal size 4			
		SumOfNationalAccountRelCompanyCustomerRelDisputedInvoices				is Decimal size 4			
		SumOfNationalAccountRelCompanyCustomerRelCurrentCashDays				is an InternationalAmount	
		SumOfNationalAccountRelCompanyCustomerRelCurrentCashPaid				is an InternationalAmount	
		SumOfNationalAccountRelCompanyCustomerRelYearToDateCashDays				is an InternationalAmount	
		SumOfNationalAccountRelCompanyCustomerRelYearToDateCashPaid				is an InternationalAmount	
		SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsCash			is an InternationalAmount	
		SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsCashDays		is an InternationalAmount	
		SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsYearToDateCash	is an InternationalAmount	
		SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsYearToDateDays	is an InternationalAmount	
		SumOfNationalAccountRelCompanyCustomerRelYear2CollectionDays			is a Year2Days				
		SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsPriorYear		is a DbtPrYr				


	Rule Blocks


		SumNationalAccountRelCompanyCustomerRelAmounts	
			if (!SumOfNationalAccountRelCompanyCustomerRelAmountsDone)		
				initialize SumOfNationalAccountRelCompanyCustomerRelPaysPrompt						
				initialize SumOfNationalAccountRelCompanyCustomerRelTotalReturnToMaker				
				initialize SumOfNationalAccountRelCompanyCustomerRelDisputedInvoices				
				initialize SumOfNationalAccountRelCompanyCustomerRelCurrentCashDays					
				initialize SumOfNationalAccountRelCompanyCustomerRelCurrentCashPaid					
				initialize SumOfNationalAccountRelCompanyCustomerRelYearToDateCashDays				
				initialize SumOfNationalAccountRelCompanyCustomerRelYearToDateCashPaid				
				initialize SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsCash				
				initialize SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsCashDays			
				initialize SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsYearToDateCash	
				initialize SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsYearToDateDays	
				initialize SumOfNationalAccountRelCompanyCustomerRelYear2CollectionDays				
				initialize SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsPriorYear		
					for each NationalAccountRel
						SumOfNationalAccountRelCompanyCustomerRelPaysPrompt							 += each.CompanyCustomerRel.PaysPrompt						
						SumOfNationalAccountRelCompanyCustomerRelTotalReturnToMaker					 += each.CompanyCustomerRel.TotalReturnToMaker				
						SumOfNationalAccountRelCompanyCustomerRelDisputedInvoices					 += each.CompanyCustomerRel.DisputedInvoices				
						SumOfNationalAccountRelCompanyCustomerRelCurrentCashDays					 += each.CompanyCustomerRel.CurrentCashDays				
						SumOfNationalAccountRelCompanyCustomerRelCurrentCashPaid					 += each.CompanyCustomerRel.CurrentCashPaid				
						SumOfNationalAccountRelCompanyCustomerRelYearToDateCashDays					 += each.CompanyCustomerRel.YearToDateCashDays				
						SumOfNationalAccountRelCompanyCustomerRelYearToDateCashPaid					 += each.CompanyCustomerRel.YearToDateCashPaid				
						SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsCash				 += each.CompanyCustomerRel.DaysBeyondTermsCash			
						SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsCashDays			 += each.CompanyCustomerRel.DaysBeyondTermsCashDays		
						SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsYearToDateCash		 += each.CompanyCustomerRel.DaysBeyondTermsYearToDateCash	
						SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsYearToDateDays		 += each.CompanyCustomerRel.DaysBeyondTermsYearToDateDays	
						SumOfNationalAccountRelCompanyCustomerRelYear2CollectionDays				 += each.CompanyCustomerRel.Year2CollectionDays			
						SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsPriorYear			 += each.CompanyCustomerRel.DaysBeyondTermsPriorYear		
				SumOfNationalAccountRelCompanyCustomerRelAmountsDone = true	


	Derived Fields

		DerivedInquiryLevel				is a MessageField
			"National_\Account"


		DerivedAgingCode				is a DerivedField
			type is Alpha 2
			if (CompanyCustomerStaticAgingRel.AgingCode entered)
				return CompanyCustomerStaticAgingRel.AgingCode
			else
				return blank


		CurrentPlusBillOfExchangeBalance is a DerivedField
			type is like InternationalAmount
			return (CurrentBalance + BillOfExchangeBalance)

		CurrentBalanceUpdateForToCurrency is a DerivedField
			type is like ToCurrency
			if (Company.Currency != Company.CustomerGroupField.CustomerGroup.Currency)
				return Company.CustomerGroupField.CustomerGroup.Currency	
 
		DerivedHighBalance is a DerivedField
			type is like InternationalAmount
			initialize LocalWorkAmount
			I1 = 1
			while (I1 <= 13)
				if (HighBals.HighBal[I1] > LocalWorkAmount)
					LocalWorkAmount = HighBals.HighBal[I1]
				I1 +=1
			return LocalWorkAmount


		TotalUnreleasedApplied is a DerivedField
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.UnreleasedApplied

			for each NationalAccountRel

				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.UnreleasedApplied
				else
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.UnreleasedApplied
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount





















		TotalUnappliedPaymentsCredits is a DerivedField	
			type is like InternationalAmount

			return (CompanyCustomerRel.GroupUnappliedPaymentsCredits)	


		TotalUnreleasedPayments is a DerivedField
			type is like InternationalAmount

			LocalWorkAmount = CompanyCustomerRel.UnreleasedPayments
			for each NationalAccountRel


				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.UnreleasedPayments
				else
					CurrencyWork.FinanceEnterpriseGroup			= NationalAccountBalance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.UnreleasedPayments
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		PaysPrompt is a DerivedField	
			type is Decimal size 9
			include SumNationalAccountRelCompanyCustomerRelAmounts	

			return (SumOfNationalAccountRelCompanyCustomerRelPaysPrompt + CompanyCustomerRel.PaysPrompt)	


		TotalReturnToMaker is a DerivedField	
			type is Decimal size 4
			include SumNationalAccountRelCompanyCustomerRelAmounts	

			return (SumOfNationalAccountRelCompanyCustomerRelTotalReturnToMaker + CompanyCustomerRel.TotalReturnToMaker)	



		PercentOfBalance is a DerivedField
			type is like InternationalAmount
			return (((CurrentBalance + OpenOrderAmount + BillOfExchangeBalance) / CreditLimit) * 100)


		TotalHighBalance is a DerivedField	
			type is Decimal size 16
			restricted
			LocalWorkAmount = (sum HighBals)
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.HigHBalance
				else
					CurrencyWork.FinanceEnterpriseGroup			= NationalAccountBalance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup		
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.HigHBalance
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency 
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency 
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount

		DerivedLastInvoiceDate is a DerivedField	
			type is Date
			LocalDate = CompanyCustomerRel.LastInvoiceDate
			for each NationalAccountRel
				if (each.CompanyCustomerRel.LastInvoiceDate > LocalDate)
					LocalDate				= each.CompanyCustomerRel.LastInvoiceDate
			return LocalDate

		DerivedLastStatementDate is a DerivedField	
			type is Date
			LocalDate = CompanyCustomerRel.LastStatementDate
			for each NationalAccountRel
				if (each.CompanyCustomerRel.LastStatementDate > LocalDate)
					LocalDate				= each.CompanyCustomerRel.LastStatementDate
			return LocalDate

		DerivedLastPaymentDate is a DerivedField
			type is Date
			LocalDate = CompanyCustomerRel.LastPaymentDate
			for each NationalAccountRel
				if (each.CompanyCustomerRel.LastPaymentDate > LocalDate)
					LocalDate				= each.CompanyCustomerRel.LastPaymentDate
			return LocalDate


		DerivedLastPaymentAmount is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.LastPaymentAmount
			for each NationalAccountRel
				if (each.CompanyCustomerRel.LastPaymentAmount > LocalWorkAmount)
					LocalWorkAmount				= each.CompanyCustomerRel.LastPaymentAmount

			return LocalWorkAmount


		DerivedDisputedInvoiceAmount is a DerivedField	
			type is Decimal size 16
			LocalWorkAmount = CompanyCustomerRel.DisputedInvoiceAmount
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.DisputedInvoiceAmount
				else
					CurrencyWork.FinanceEnterpriseGroup			= NationalAccountBalance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.DisputedInvoiceAmount
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency 
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency 
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		DerivedDisputedInvoices is a DerivedField	
			type is Decimal size 4
			include SumNationalAccountRelCompanyCustomerRelAmounts	

			return (CompanyCustomerRel.DisputedInvoices + SumOfNationalAccountRelCompanyCustomerRelDisputedInvoices)	



		DerivedFiscalYear is a DerivedField
			type is Numeric 4

			if (Company.PeriodsPerYear.Twelve)
				CurrentYear = current year
				LocalTransactionDate = current corporate date
				CurrentPeriod = LocalTransactionDate month 
				if (Company.PeriodOffset entered)
					CurrentPeriod += Company.PeriodOffset
					if (CurrentPeriod > 12)
						CurrentYear += 1
						CurrentPeriod -=12
			else
				LocalTransactionDate = current corporate date
				CurrentYear = LocalTransactionDate year
				CurrentPeriod = LocalTransactionDate week / 4

			return CurrentYear


		DerivedFiscalPeriod is a DerivedField
			type is Numeric 4

			if (Company.PeriodsPerYear.Twelve)
				CurrentYear = current year
				LocalTransactionDate = current corporate date
				CurrentPeriod = LocalTransactionDate month 
				if (Company.PeriodOffset entered)
					CurrentPeriod += Company.PeriodOffset
					if (CurrentPeriod > 12)
						CurrentYear += 1
						CurrentPeriod -=12
			else
				LocalTransactionDate = current corporate date
				CurrentYear = LocalTransactionDate year
				CurrentPeriod = LocalTransactionDate week / 4

			return CurrentPeriod


		YearToDateWriteOffs is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.YearToDateWriteOffs
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.YearToDateWriteOffs
				else
					CurrencyWork.FinanceEnterpriseGroup			= NationalAccountBalance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.YearToDateWriteOffs
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency 
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency 
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		YearToDateChargebacks is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.YearToDateChargebacks
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.YearToDateChargebacks
				else
					CurrencyWork.FinanceEnterpriseGroup			= NationalAccountBalance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.YearToDateChargebacks
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency 
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency 
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		YearToDateCredits is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.YearToDateCredits
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.YearToDateCredits
				else
					CurrencyWork.FinanceEnterpriseGroup			= NationalAccountBalance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.YearToDateCredits
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency 
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency 
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		YearToDatePaid is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.YearToDatePaid
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.YearToDatePaid
				else
					CurrencyWork.FinanceEnterpriseGroup			= NationalAccountBalance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.YearToDatePaid
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		YearToDateSales is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.YearToDateSales
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.YearToDateSales
				else
					CurrencyWork.FinanceEnterpriseGroup			= NationalAccountBalance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.YearToDateSales
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		YearToDateEarnedDiscounts is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.YearToDateEarnedDiscounts
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.GeneralLedgerCompanyRel.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.YearToDateEarnedDiscounts
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.YearToDateEarnedDiscounts
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency 
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency 
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		YearToDateUnearnedDiscounts is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.YearToDateUnearnedDiscounts
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.YearToDateUnearnedDiscounts
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.YearToDateUnearnedDiscounts
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		CurrentPeriodWriteOffs is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.CurrentPeriodWriteOffs
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.CurrentPeriodWriteOffs
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.CurrentPeriodWriteOffs
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		CurrentPeriodChargebacks is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.CurrentPeriodChargebacks
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.CurrentPeriodChargebacks
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.CurrentPeriodChargebacks
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		CurrentPeriodCredits is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.CurrentPeriodCredits
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.CurrentPeriodCredits
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.CurrentPeriodCredits
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		CurrentPeriodPaid is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.CurrentPeriodPaid
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.CurrentPeriodPaid
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.CurrentPeriodPaid
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		CurrentPeriodBillings is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.CurrentPeriodBillings
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.CurrentPeriodBillings
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.CurrentPeriodBillings
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		CurrentPeriodEarnedDiscounts is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.CurrentPeriodEarnedDiscounts
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.CurrentPeriodEarnedDiscounts
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.CurrentPeriodEarnedDiscounts
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		CurrentPeriodUnearnedDiscounts is a DerivedField	
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.CurrentPeriodUnearnedDiscounts
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.CurrentPeriodUnearnedDiscounts
				else
					CurrencyWork.FinanceEnterpriseGroup			= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.CurrentPeriodUnearnedDiscounts
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		CurrentIPA is a DerivedField	
			type is Decimal size 6	
			include SumNationalAccountRelCompanyCustomerRelAmounts	

			return ((CompanyCustomerRel.CurrentCashDays + SumOfNationalAccountRelCompanyCustomerRelCurrentCashDays) / (CompanyCustomerRel.CurrentCashPaid + SumOfNationalAccountRelCompanyCustomerRelCurrentCashPaid))	


		YearToDateIPA is a DerivedField	
			type is Decimal size 6
			include SumNationalAccountRelCompanyCustomerRelAmounts	

			return ((CompanyCustomerRel.YearToDateCashDays + SumOfNationalAccountRelCompanyCustomerRelYearToDateCashDays) / (CompanyCustomerRel.YearToDateCashPaid + SumOfNationalAccountRelCompanyCustomerRelYearToDateCashPaid))	


		DebtRatio is a DerivedField	
			type is Decimal size 6
			include SumNationalAccountRelCompanyCustomerRelAmounts	

			return ((CompanyCustomerRel.DaysBeyondTermsCash + SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsCash) / (CompanyCustomerRel.DaysBeyondTermsCashDays + SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsCashDays))	


		DebtYearToDateCash is a DerivedField	
			type is Decimal size 6
			include SumNationalAccountRelCompanyCustomerRelAmounts	

			return ((CompanyCustomerRel.DaysBeyondTermsYearToDateCash + SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsYearToDateCash) / (CompanyCustomerRel.DaysBeyondTermsYearToDateDays + SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsYearToDateDays))	


		Year2CollectionDays is a DerivedField	
			type is Decimal size 4
			include SumNationalAccountRelCompanyCustomerRelAmounts	

			return (CompanyCustomerRel.Year2CollectionDays + SumOfNationalAccountRelCompanyCustomerRelYear2CollectionDays)	


		DaysBeyondTermsPriorYear is a DerivedField	
			type is Decimal size 4
			include SumNationalAccountRelCompanyCustomerRelAmounts	

			return (CompanyCustomerRel.DaysBeyondTermsPriorYear + SumOfNationalAccountRelCompanyCustomerRelDaysBeyondTermsPriorYear)	



		TwelveMonthPeriodAverage is a DerivedField	
			type is Decimal size 6
			initialize LocalCollectDays
			initialize LocalCount
			I1 = 1
			while (I1 <= 11)
				if (CompanyCustomerRel.CollectDayses.CollectDays[I1] entered)
					LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[I1]
					LocalCount			+= 1
				I1 += 1

			for each NationalAccountRel
				I1 = 1
				while (I1 <= 11)
					if (each.CompanyCustomerRel.CollectDayses.CollectDays[I1] entered)
						LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[I1]
						LocalCount			+= 1
					I1 += 1
			return (LocalCollectDays / LocalCount)


		TwelveMonthPeriodDebtAverage is a DerivedField
			type is Decimal size 6
			initialize LocalCollectDays
			initialize LocalCount
			I1 = 1
			while (I1 <= 11)
				if (CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[I1] entered)
					LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[I1]
					LocalCount			+= 1
				I1 += 1

			for each NationalAccountRel
				I1 = 1
				while (I1 <= 11)
					if (each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[I1] entered)
						LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[I1]
						LocalCount			+= 1
					I1 += 1
			return (LocalCollectDays / LocalCount)


		CollectDays1 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[1] entered)
				LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[1]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[1] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[1]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		CollectDays2 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[2] entered)
				LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[2]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[2] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[2]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		CollectDays3 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[3] entered)
				LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[3]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[3] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[3]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		CollectDays4 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[4] entered)
				LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[4]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[4] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[4]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		CollectDays5 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[5] entered)
				LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[5]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[5] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[5]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		CollectDays6 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[6] entered)
				LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[6]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[6] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[6]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		CollectDays7 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[7] entered)
				LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[7]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[7] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[7]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		CollectDays8 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[8] entered)
				LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[8]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[8] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[8]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		CollectDays9 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[9] entered)
				LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[9]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[9] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[9]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		CollectDays10 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[10] entered)
				LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[10]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[10] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[10]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		CollectDays11 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[11] entered)
				LocalCollectDays	+= CompanyCustomerRel.CollectDayses.CollectDays[11]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[11] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.CollectDayses.CollectDays[11]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		DebtRatio1 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[1] entered)
				LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[1]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[1] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[1]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		DebtRatio2 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[2] entered)
				LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[2]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[2] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[2]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		DebtRatio3 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[3] entered)
				LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[3]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[3] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[3]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		DebtRatio4 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[4] entered)
				LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[4]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[4] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[4]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		DebtRatio5 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[5] entered)
				LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[5]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[5] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[5]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		DebtRatio6 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[6] entered)
				LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[6]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[6] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[6]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		DebtRatio7 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[7] entered)
				LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[7]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[7] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[7]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		DebtRatio8 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[8] entered)
				LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[8]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[8] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[8]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		DebtRatio9 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[9] entered)
				LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[9]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[9] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[9]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		DebtRatio10 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[10] entered)
				LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[10]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[10] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[10]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		DebtRatio11 is a DerivedField
			type is Numeric size 4
			initialize LocalCollectDays
			initialize LocalCount
			if (CompanyCustomerRel.CollectDayses.CollectDays[11] entered)
				LocalCollectDays	+= CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[11]
				LocalCount			+= 1

			for each NationalAccountRel
				if (each.CompanyCustomerRel.CollectDayses.CollectDays[11] entered)
					LocalCollectDays	+= each.CompanyCustomerRel.DaysBeyondTermsRatio.DbtRatio[11]
					LocalCount			+= 1

			return (LocalCollectDays / LocalCount)


		FilteredAmountGroupCurrency is a DerivedField
			type is like InternationalAmount
			LocalWorkAmount = CompanyCustomerRel.FilteredAmountGroupCurrency
			for each NationalAccountRel
				if (each.CompanyCustomerRel.Company.Currency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency)
					LocalWorkAmount								+= each.CompanyCustomerRel.FilteredAmountGroupCurrency
				else
					CurrencyWork.ExchangeDate					= current corporate date
					CurrencyWork.TransactionAmount				= each.CompanyCustomerRel.FilteredAmountGroupCurrency
					CurrencyWork.FromCurrency					= each.CompanyCustomerRel.Company.Currency 
					CurrencyWork.BaseAmount.ToCurrency			= NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency 
					LocalWorkAmount								+= CurrencyWork.BaseAmount.OutputCurrencyAmount

			return LocalWorkAmount


		FilterButtonLabel is a DerivedField
			type is Alpha 8
			restricted
			if (FilterExists)
				return "*Filter"
			else
				return "Filter"


		DerivedNationalCompany is a DerivedField
			type is like ReceivableCompany
			restricted
			if (CompanyCustomerRel.NationalAccountIndicator.Child)
				return first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCompany
			else
				return Company


		DerivedNationalCustomer is a DerivedField
			type is like Customer
			restricted
			if (CompanyCustomerRel.NationalAccountIndicator.Child)
				return first NationalAccountInvoiceRel.NationalAccount.NationalAccountGroup.NatCustomer
			else
				return Customer


		MixedCompanyCurrency is a DerivedField
			type is Boolean
			restricted
			if (any CompanyCustomerRel.Company.Currency	!= NationalAccountBalance.Company.Currency)
				MixedCompanyCurrency						= true
			else
				MixedCompanyCurrency						= false	


		DerivedPastDue is a DerivedField
			type is like InternationalAmount
			for each NationalAccountRel
				DerivedPastDue						+= each.CompanyCustomerRel.CompanyCustomerStaticAging.DerivedPastDue


		CompanyCustomerTitleWithRecord is a LabelField	
			"ForCompany<Company>_-_<Company.Name>_-_Customer<Customer>_-_<Customer.Name>"
		
		CompanyCustomerTitleNoRecord is a LabelField	
			"CompanyCustomer"

		CompanyCustomerTitle is a DerivedField	
			type is MessageField

			return CompanyCustomerTitleWithRecord





	Transient Fields
		TransientCreditAction			is AlphaUpper size 1
			States
				Called		value is "C"
				NoProblem	value is "N"
				OtherAction	value is "O"
		TransientHoldFlag				is a HoldFlag
		TransientDunningNumber			is a DunningNbr
		TransientNewReview				is Date
		TransientReview					is Boolean

		TransientInvoiceCustomer		is a CompanyAndCustomer
		TransientNationalAccountSource	is Boolean
		TransientCurrentBalanceCurrency	is a ToCurrency
			derive value from CurrentBalanceUpdateForToCurrency
		TransientIncludeReceivablePayments	is Boolean	

	Field Rules
		StatementRequired
			if (BalanceForwardStatementCycle entered
			or  OpenItemStatementCycle entered)
				constraint (StatementRequired)
					"MustSpecifyRequireStatementWhenCycleCodeEntered"

			if (BalanceForwardStatementCycle not entered
			and OpenItemStatementCycle not entered)
				constraint (!StatementRequired)
					"MustEnterCycleCodeWhenRequiringStatement"

		BalanceForwardStatementCycle
			if (BalanceForwardStatementCycle entered)
				constraint (StatementRequired)
					"MustSpecifyRequireStatementWhenCycleCodeEntered"

		OpenItemStatementCycle
			if (OpenItemStatementCycle entered)
				constraint (StatementRequired)
					"MustSpecifyRequireStatementWhenCycleCodeEntered"

		PastDueOnlyStatement
			constraint (!ZeroBalanceStatement)
				"ZeroBalanceCannot_=_\Yes"								
			constraint (!OverCreditLimitStatement)
				"OverBalanceCannot_=_\Yes"								
			constraint (!CreditBalanceStatement)
				"CreditBalanceCannot_=_\Yes"							

		OverCreditLimitStatement
			constraint (!ZeroBalanceStatement)
				"ZeroBalanceCannot_=_\Yes"								
			constraint (!CreditBalanceStatement)
				"CreditBalanceCannot_=_\Yes"							


	Conditions

		IsDeletePending
			when (any NationalAccountRel.NationalAccountTransactionStatus = 2)

		IsValidForActorContext
			restricted
			when (GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	

		SecurityGroupAllowsAccess	
			when (actor.context.CompanySecurityGroup = blank
			or	  CompanySecurityGroupMemberRel exists)

		HasCompanyCustomerStaticAging
			restricted
			when (CompanyCustomerStaticAgingRel exists
			and CompanyCustomerStaticAgingRel.AgingCode entered)

		FilterExists
			restricted
			when (ReceivableFilterRel exists)

		FilterExistsAndIncludeHistory	//IEFIN-114145 - "All Records (Open and Closed) AND Filtered"
			restricted
			when (FilterExists
			and ReceivableFilterRel.HistoryFlag.IncludeHistory)

		FilterExistsAndOnlyShowHistory	//IEFIN-114145 - "Closed Records AND Filtered"
			restricted
			when (FilterExists
			and ReceivableFilterRel.HistoryFlag.OnlyShowHistory)

		FilterExistsAndNoHistory	//IEFIN-114145	 - "Default / Open AND Filtered"
			restricted
			when (FilterExists
			and ReceivableFilterRel.HistoryFlag.NoHistory)

		NoFilterExistsOrNoHistory	
			restricted
			when (!FilterExists
			or ReceivableFilterRel.HistoryFlag.NoHistory)


		NoFilterExistsAndIncludeReceivablePayments	
			restricted
			when (!FilterExists
			and TransientIncludeReceivablePayments)

		NoFilterExistsAndNoIncludeReceivablePayments	
			restricted
			when (!FilterExists
			and !TransientIncludeReceivablePayments)

		IsBalanceForwardProcessing
			restricted
			when (CompanyCustomerRel.ReceivableProcessingMethod.BalanceForward)

		IsOpenItemProcessing
			restricted
			when (CompanyCustomerRel.ReceivableProcessingMethod.OpenItem)

		IsMixedCompanyCurrency
			restricted
			when (MixedCompanyCurrency)

		IsNationalAccountBalance
			restricted
			when (NationalAccountBalance exists)

		IsBOECustomerGroup	//No longer used.  Replaced with "BOEProcessing" IEFIN-76227
			restricted
			when (NationalAccountRel.CustomerGroupField.CustomerGroup.BillOfExchangeProcessing)

		BOEProcessing	
			restricted
			when (Company.CustomerGroupField.CustomerGroup.BillOfExchangeProcessing
			and   CompanyCustomerRel.BillOfExchangeProcessing.Individual
			or	  CompanyCustomerRel.BillOfExchangeProcessing.Summary)

		CompanyCustomerCommentIsTransactionCommentRelExists	
			restricted
			when (CompanyCustomerCommentIsTransactionCommentRel exists)

		CompanyCustomerCommentIsCustomerCommentRelExists	
			restricted
			when (CompanyCustomerCommentIsCustomerCommentRel exists)

		CompanyCustomerCommentIsOrderCommentRelExists	
			restricted
			when (CompanyCustomerCommentIsOrderCommentRel exists)

		IsNationalAccountCompanyCurrency						
			restricted
			when (first CompanyCustomerReviewSelectRel.IsNationalAccountCompanyCurrency)

		IsNationalAccountCompanyCustomerCurrency				
			restricted
			when (first CompanyCustomerReviewSelectRel.IsNationalAccountCompanyCustomerCurrency)


	Relations	



		CompanyCustomerRel	
			one-to-one relation to CompanyCustomer
			required
			Field Mapping uses symbolic key
				related.Company			 = Company
				related.Customer		 = Customer

		TransientCompanyCustomerRel	
			one-to-one relation to CompanyCustomer
			required
			Field Mapping uses symbolic key
				related.Company									= TransientInvoiceCustomer.Company
				related.Customer								= TransientInvoiceCustomer.Customer




		CompanyCustomerCommentIsCustomerCommentRel	
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses Set3	
				related.Company									 = Company
				related.Customer								 = Customer

		CompanyCustomerCommentIsOrderCommentRel	
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses Set5	
				related.Company									 = Company
				related.Customer								 = Customer

		CompanyCustomerCommentIsTransactionCommentRel	
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses Set2	
				related.Company									 = Company
				related.Customer								 = Customer

		CompanyCustomerCommentRel	
			one-to-many relation to CompanyCustomerComment
			Field Mapping uses symbolic key
				related.Company									 = Company
				related.Customer								 = Customer

		ReceivableCommentsRel is a CompanyCustomerComment set	




		CompanyCustomerPeriodTotalsRel	
			one-to-one relation to CompanyCustomerPeriodTotals
			Field Mapping uses symbolic key
				related.Company									 = Company
				related.CompanyCustomerPeriodTotals.Customer	 = Customer
				related.CompanyCustomerPeriodTotals.Year		 = blank




		CompanyCustomerReviewSelectRel	
			one-to-many relation to CompanyCustomerReviewSelect
			Field Mapping uses Set3
				related.Company										 = Company
				related.CreditAnalyst								 = CompanyCustomerRel.CreditAnalyst
				related.CompanyCustomerReviewSelect.Customer		 = Customer
				related.CompanyCustomerReviewSelect.SelectLevel		 = "N"




		CompanyCustomerStaticAgingRel	
			one-to-one relation to CompanyCustomerStaticAging

			Field Mapping uses symbolic key
				related.Company			 = NationalAccountBalance.Company
				related.Customer		 = NationalAccountBalance.Customer




		CustomerRel	
			one-to-one relation to Customer
			required
			Field Mapping uses symbolic key
				related.CustomerGroup	 = Company.CustomerGroupField.CustomerGroup
				related.Customer		 = Customer




		NationalAccountCustomerDraftRel	
			one-to-many relation to CustomerDraft
			Field Mapping uses symbolic key
			Instance Selection
				where (related.DerivedNationalCompany	 = DerivedNationalCompany
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)





		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company


		CompanySecurityGroupMemberRel	
			one-to-one relation to GeneralLedgerCompanyGroupMember
			Field Mapping uses symbolic key
				related.GeneralLedgerCompanyGroup	= actor.context.CompanySecurityGroup.FinanceDimensionStructure
				related.Company						= Company




		NationalAccountInvoiceRel	
			one-to-many relation to NationalAccount
			Field Mapping uses Set2
				related.NationalAccount.InvoiceAccountGroup.Company		 = Company
				related.NationalAccount.InvoiceAccountGroup.Customer	 = Customer

		NationalAccountRel	
			one-to-many relation to NationalAccount
			Field Mapping uses Set5		
				related.NationalAccount.NationalAccountGroup.NatCompany  = NationalAccountBalance.Company	
				related.NationalAccount.NationalAccountGroup.NatCustomer = NationalAccountBalance.Customer	




		OneNationalAccountRel	
			one-to-many relation to NationalAccount
			Field Mapping uses Set5	
				related.NationalAccount.NationalAccountGroup.NatCompany  = NationalAccountBalance.Company	
				related.NationalAccount.NationalAccountGroup.NatCustomer = NationalAccountBalance.Customer	
			Instance Selection


				where   (instance count of NationalAccountRel = 1)




		NationalAccountParentTransactionsRel	
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses ByNationalAccount

				related.NationalAccount.Company					= Company
				related.NationalAccount.Customer				= Customer
				related.Company									= Company
				related.Customer								= Customer

		PartOfNationalAccountTransactionsRel	
			one-to-many relation to NationalAccountTransaction
			Field Mapping uses ByNationalAccountTransaction	
				related.NationalAccount.Company					= NationalAccountBalance.CompanyCustomer.DerivedNationalCompany
				related.NationalAccount.Customer				= NationalAccountBalance.CompanyCustomer.DerivedNationalCustomer

		



		AgingPeriodRel	
			one-to-many relation to ReceivableAgePeriod
			Field Mapping uses symbolic key
			Instance Selection
				where (related.CustomerGroup	 = Company.CustomerGroupField.CustomerGroup	
				and	related.ReceivableCompany	 = blank
				and	related.AgingCode			 = blank
				and	related.SetupIndicator		 = "C")




		ReceivableFilterRel	
			one-to-one relation to ReceivableFilter
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		 = GeneralLedgerCompanyRel.FinanceEnterpriseGroup	

				related.ReceivableFilter			 = actor




		ClosedTransactionsNavRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set5	
			Instance Selection
				where (related.DerivedNationalCompany	 = DerivedNationalCompany
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer
				and related.IsNotOpen)

		NationalAccountReceivableInvoiceDetailRel	
			classic name is AROITEMS
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set5		
			Instance Selection
				where (related.DerivedNationalCompany	 = DerivedNationalCompany
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)

		OpenNationalAccountReceivableInvoiceDetailRel	
			one-to-many relation to ReceivableInvoiceDetail
			Field Mapping uses Set3		//Set3 has an Instance Selection of where (IsOpen) - IsOpen is defined as "when (Status.OpenTransaction)"
			Instance Selection
				where (related.DerivedNationalCompany	 = DerivedNationalCompany
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)




		ClosedPaymentNavRel	
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set10	
			Instance Selection
				where (related.DerivedNationalCompany	 = DerivedNationalCompany
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer
				and related.IsNotOpen)

		NationalAccountReceivablePaymentsRel	
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set10	
			Instance Selection	
				where (related.DerivedNationalCompany	 = DerivedNationalCompany
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)

		OpenOrUnreleasedNationalAccountReceivablePaymentsRel	
			one-to-many relation to ReceivablePayment
			Field Mapping uses Set9		//Set9 has an Instance Selection of where (IsUnreleasedOrOpen) - IsUnreleasedOrOpen is defined as "when (Status.OpenTransaction)"
			Instance Selection	
				where (related.DerivedNationalCompany	 = DerivedNationalCompany
				and	related.DerivedNationalCustomer		 = DerivedNationalCustomer)




	Actions
		Create is a Create Action
			Entrance Rules
				constraint(TransientInvoiceCustomer.Company entered)
					"InvoiceCompanyRequired"
				constraint (TransientInvoiceCustomer.Customer entered)
					"InvoiceCustomerRequired"

			Action Rules

				if (BalanceForwardStatementCycle entered)
					ReceivableStatementCycle = BalanceForwardStatementCycle
				if (OpenItemStatementCycle entered)
					ReceivableStatementCycle = OpenItemStatementCycle

				LocalGroupCurrency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency

				if (LocalGroupCurrency != NationalAccountBalance.Company.Currency)
					CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.FromCurrency								= NationalAccountBalance.Company.Currency
					CurrencyWork.TransactionAmount							= CompanyCustomerRel.CurrentBalance
					CurrencyWork.ExchangeDate								= current corporate date
					CurrencyWork.BaseAmount.ToCurrency						= LocalGroupCurrency
					CurrentBalance											= CurrencyWork.BaseAmount.OutputCurrencyAmount
				else
					CurrentBalance											= CompanyCustomerRel.CurrentBalance

				if (LocalGroupCurrency != NationalAccountBalance.Company.Currency)
					CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.FromCurrency								= NationalAccountBalance.Company.Currency
					CurrencyWork.TransactionAmount							= CompanyCustomerRel.BillOfExchangeBalance
					CurrencyWork.ExchangeDate								= current corporate date
					CurrencyWork.BaseAmount.ToCurrency						= LocalGroupCurrency
					BillOfExchangeBalance									= CurrencyWork.BaseAmount.OutputCurrencyAmount
				else
					BillOfExchangeBalance									= CompanyCustomerRel.BillOfExchangeBalance

			Exit Rules
				if (Company.NatAccountTransUpdateSource.TransactionsUpdatedInMaintenanceForm)
					for each CompanyCustomerRel.OpenReceivableInvoiceDetailRel
						invoke Create NationalAccountTransaction
							fill in fields from each

							invoked.NationalAccount.Company															  = Company
							invoked.NationalAccount.Customer														  = Customer
							invoked.NationalAccountTransaction.ReceivableInvoiceDetail.ReceivableInvoiceDetailType	  = each.ReceivableInvoiceDetail.ReceivableInvoiceDetailType
							invoked.NationalAccountTransaction.ReceivableInvoiceDetail								  = each.ReceivableInvoiceDetail
							invoked.Company																			  = each.ReceivableInvoiceDetail.Company
							invoked.Customer																		  = each.ReceivableInvoiceDetail.Customer

							invoked.TransactionAmount					= each.InvoiceAmount.CurrencyAmount
							invoked.BaseAmount							= each.InvoiceAmount.FunctionalAmount.EnteredCurrencyAmount
							invoked.OpenBaseAmount						= each.BaseOpenAmount
							invoked.OpenTransactionAmount				= each.OpenAmount
							invoked.OpenSortBaseAmount					= each.BaseOpenAmount


				if  (TransientInvoiceCustomer.Customer entered
				and  !TransientNationalAccountSource)
					invoke Create NationalAccount 
						invoked.NationalAccount.NationalAccountGroup.NatCompany		= Company
						invoked.NationalAccount.NationalAccountGroup.NatCustomer	= Customer
						invoked.NationalAccount.InvoiceAccountGroup.Company			= TransientInvoiceCustomer.Company
						invoked.NationalAccount.InvoiceAccountGroup.Customer		= TransientInvoiceCustomer.Customer

				if  (TransientInvoiceCustomer.Customer entered)
					LocalGroupCurrency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency

					if (LocalGroupCurrency != NationalAccountBalance.Company.Currency)
						CurrencyWork.FinanceEnterpriseGroup						= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
						CurrencyWork.FromCurrency								= NationalAccountBalance.Company.Currency

						CurrencyWork.TransactionAmount							= CompanyCustomerRel.DerivedHighBalance
						CurrencyWork.ExchangeDate								= current corporate date
						CurrencyWork.BaseAmount.ToCurrency						= LocalGroupCurrency
						LocalParentHighBal										= CurrencyWork.BaseAmount.OutputCurrencyAmount

					else
						LocalParentHighBal										= CompanyCustomerRel.DerivedHighBalance

					if (LocalGroupCurrency != NationalAccountBalance.Company.Currency)
						CurrencyWork.FinanceEnterpriseGroup						= TransientCompanyCustomerRel.Company.FinanceEnterpriseGroup
						CurrencyWork.FromCurrency								= TransientCompanyCustomerRel.Company.Currency

						CurrencyWork.TransactionAmount							= TransientCompanyCustomerRel.DerivedHighBalance
						CurrencyWork.ExchangeDate								= current corporate date
						CurrencyWork.BaseAmount.ToCurrency						= LocalGroupCurrency
						LocalChildHighBal										= CurrencyWork.BaseAmount.OutputCurrencyAmount

					else
						LocalChildHighBal										= TransientCompanyCustomerRel.DerivedHighBalance

					HighBals.HighBal[1] = LocalParentHighBal + LocalChildHighBal



		Update is an Update Action
			Exit Rules
				if (BalanceForwardStatementCycle entered)
					ReceivableStatementCycle = BalanceForwardStatementCycle
				if (OpenItemStatementCycle entered)
					ReceivableStatementCycle = OpenItemStatementCycle
				if (OpenItemStatementCycle not entered
					and BalanceForwardStatementCycle not entered)
					ReceivableStatementCycle = blank


		InvoiceCustomerUpdate is an Instance Action
			restricted
			Parameters
				PrmCompany			is a ReceivableCompany

				PrmCustomer		is a Customer
				PrmType				is Numeric 1
					States
						Add			value is 1
						Delete		value is 2
			Action Rules
				LocalGroupCurrency = NationalAccountBalance.Company.CustomerGroupField.CustomerGroup.Currency
				TransientInvoiceCustomer.Company							= PrmCompany
				TransientInvoiceCustomer.Customer							= PrmCustomer

				if (LocalGroupCurrency != PrmCompany.Currency)
					CurrencyWork.FinanceEnterpriseGroup						= NationalAccountBalance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.FromCurrency								= PrmCompany.Currency
					CurrencyWork.TransactionAmount							= TransientCompanyCustomerRel.CurrentBalance
					CurrencyWork.ExchangeDate								= current corporate date
					CurrencyWork.BaseAmount.ToCurrency						= LocalGroupCurrency
					if (PrmType.Add)
						CurrentBalance										+= CurrencyWork.BaseAmount.OutputCurrencyAmount
					else
						CurrentBalance										-= CurrencyWork.BaseAmount.OutputCurrencyAmount
				else
					if (PrmType.Add)
						CurrentBalance										+= TransientCompanyCustomerRel.CurrentBalance
					else
						CurrentBalance										-= TransientCompanyCustomerRel.CurrentBalance

				if (LocalGroupCurrency != PrmCompany.Currency)
					CurrencyWork.FinanceEnterpriseGroup						= NationalAccountBalance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.FromCurrency								= PrmCompany.Currency
					CurrencyWork.TransactionAmount							= TransientCompanyCustomerRel.DerivedHighBalance
					CurrencyWork.ExchangeDate								= current corporate date
					CurrencyWork.BaseAmount.ToCurrency						= LocalGroupCurrency
					if (PrmType.Add)
						HighBals.HighBal[1]									+= CurrencyWork.BaseAmount.OutputCurrencyAmount
					else
						HighBals.HighBal[1]									= CurrencyWork.BaseAmount.OutputCurrencyAmount

				else
					if (PrmType.Add)
						HighBals.HighBal[1]									+= TransientCompanyCustomerRel.HigHBalance.HighBal[1]
					else
						HighBals.HighBal[1]									-= TransientCompanyCustomerRel.HigHBalance.HighBal[1]

				if (LocalGroupCurrency != NationalAccountBalance.Company.Currency)
					CurrencyWork.FinanceEnterpriseGroup						= NationalAccountBalance.GeneralLedgerCompanyRel.FinanceEnterpriseGroup
					CurrencyWork.FromCurrency								= PrmCompany.Currency
					CurrencyWork.TransactionAmount							= TransientCompanyCustomerRel.BillOfExchangeBalance
					CurrencyWork.ExchangeDate								= current corporate date
					CurrencyWork.BaseAmount.ToCurrency						= LocalGroupCurrency
					if (PrmType.Add)
						BillOfExchangeBalance								+= CurrencyWork.BaseAmount.OutputCurrencyAmount
					else
						BillOfExchangeBalance								-= CurrencyWork.BaseAmount.OutputCurrencyAmount
				else
					if (PrmType.Add)
						BillOfExchangeBalance								+= TransientCompanyCustomerRel.BillOfExchangeBalance
					else
						BillOfExchangeBalance								-= TransientCompanyCustomerRel.BillOfExchangeBalance


		Delete is a Delete Action
			valid when (Company.NatAccountTransUpdateSource.TransactionsUpdatedInMaintenanceForm)
			Entrance Rules
				if (NationalAccountParentTransactionsRel exists)	
					confirmation required	
						"This_National_Account_Balance_and_all_of_its_National_Account_Parent_and_Children_definitions_will_be_deleted.Continue?"	

				invoke Delete NationalAccountParentTransactionsRel

			Action Rules

				invoke JustDelete NationalAccountRel

			Exit Rules
				invoke Update CompanyCustomerRel
					invoked.NationalAccountIndicator = blank


		DeleteWithMassUpdateLogic is an Instance Action
			completion message is "DeletePending;RunNationalAccountTransactionUpdate"
			default label is "Delete"
			valid when (Company.NatAccountTransUpdateSource.TransactionsUpdatedWithMassUpdateLogic)
			Entrance Rules
				constraint (!IsDeletePending)
					"CustomerIsAlreadySetForDeletion;RunNationalAccountTransactionUpdate"

			Action Rules
				for each NationalAccountRel
					invoke Update NationalAccountRel
						invoked.NationalAccountTransactionStatus = 2


		UpdateCurrentBalance is an Instance Action
			restricted
			Parameters
				ChangeAmount								is an InternationalAmount
			Action Rules
				CurrentBalance					= CurrentBalance + ChangeAmount

				if (CurrentBalance		>  HighBals.HighBal[1])
					HighBals.HighBal[1]	= CurrentBalance


		UpdateDraftBalance is an Instance Action
			restricted
			Parameters
				ChangeAmount			is an InternationalAmount
			Action Rules
				BillOfExchangeBalance += ChangeAmount


		ClearFilter is an Instance Action
			valid when (FilterExists)
			Action Rules
				invoke Purge ReceivableFilterRel


		UpdateFilters is an Instance Action
			Parameters
				HistoryFlag										is Alpha 1
					States
						IncludeHistory	value is "I"
						OnlyShowHistory	value is "O"
						NoHistory		value is "N"
				PrmReceivableProcessLevel						is a ReceivableProcessLevel
					default label is "ProcessLevel"			
				Currency
				TransactionAmountRange							is an AmountRange
				OpenAmountRange									is an AmountRange
				TransactionDateRange							is a DateRange
				XrefNbrRange									is an InvoiceRange
				CustomerPurchaseOrderRange
				TransUser1Range
				DueDateRange									is a DateRange
				PrmProject										is a ProjectRange

			Parameter Rules
				HistoryFlag
					initial value is ReceivableFilterRel.HistoryFlag
				PrmReceivableProcessLevel
					initial value is ReceivableFilterRel.ReceivableProcessLevel
				Currency
					initial value is ReceivableFilterRel.Currency
				TransactionAmountRange
					initial value is ReceivableFilterRel.TransactionAmountRange
				OpenAmountRange
					initial value is ReceivableFilterRel.OpenAmountRange
				TransactionDateRange
					initial value is ReceivableFilterRel.TransactionDateRange
				XrefNbrRange
					initial value is ReceivableFilterRel.XrefNbrRange
				CustomerPurchaseOrderRange
					initial value is ReceivableFilterRel.CustomerPurchaseOrderRange
				TransUser1Range
					initial value is ReceivableFilterRel.TransUser1Range
				DueDateRange
					initial value is ReceivableFilterRel.DueDateRange
				PrmProject
					initial value is ReceivableFilterRel.ProjectRange

			Action Rules
				if (!ReceivableFilterRel exists)
					invoke Create ReceivableFilterRel
						invoked.HistoryFlag							= HistoryFlag
						if (PrmReceivableProcessLevel entered)	
							invoked.ReceivableCompany				= PrmReceivableProcessLevel.Company	
						invoked.ReceivableProcessLevel				= PrmReceivableProcessLevel
						invoked.Currency							= Currency
						invoked.TransactionAmountRange				= TransactionAmountRange
						invoked.OpenAmountRange						= OpenAmountRange
						invoked.TransactionDateRange				= TransactionDateRange
						invoked.XrefNbrRange						= XrefNbrRange
						invoked.CustomerPurchaseOrderRange			= CustomerPurchaseOrderRange
						invoked.TransUser1Range						= TransUser1Range
						invoked.DueDateRange						= DueDateRange
						invoked.ProjectRange						= PrmProject
				else
					invoke Update ReceivableFilterRel
						invoked.HistoryFlag							= HistoryFlag
						if (PrmReceivableProcessLevel entered)	
							invoked.ReceivableCompany				= PrmReceivableProcessLevel.Company	
						invoked.ReceivableProcessLevel				= PrmReceivableProcessLevel
						invoked.Currency							= Currency
						invoked.TransactionAmountRange				= TransactionAmountRange
						invoked.OpenAmountRange						= OpenAmountRange
						invoked.TransactionDateRange				= TransactionDateRange
						invoked.XrefNbrRange						= XrefNbrRange
						invoked.CustomerPurchaseOrderRange			= CustomerPurchaseOrderRange
						invoked.TransUser1Range						= TransUser1Range
						invoked.DueDateRange						= DueDateRange
						invoked.ProjectRange						= PrmProject



		AddCustomer is an Instance Action
			run in foreground
			Parameters
				PrmCompany is a ReceivableCompany
				PrmCustomer is a Customer

			Parameter Rules
				PrmCompany
					required
				PrmCustomer
					required

			Action Rules
				invoke Create NationalAccount
					invoked.CustomerGroup										= Company.CustomerGroupField.CustomerGroup
					invoked.NationalAccount.NationalAccountGroup.NatCompany		= Company
					invoked.NationalAccount.NationalAccountGroup.NatCustomer	= Customer
					invoked.NationalAccount.InvoiceAccountGroup.Company			= PrmCompany
					invoked.NationalAccount.InvoiceAccountGroup.Customer		= PrmCustomer


		Purge is a Purge Action
			restricted

		InitializeCurrentAndDraftBalance is a Set Action
			restricted
			Parameters
				PrmCustomerGroup  is a CustomerGroup
				PrmCustomerRange  is a CustomerRange
			Instance Selection
				where ((Company.CustomerGroupField.CustomerGroup = PrmCustomerGroup)
				and (PrmCustomerRange	not entered
				or	  Customer within PrmCustomerRange))
			Action Rules
				Instance Rules
					initialize CurrentBalance
					initialize BillOfExchangeBalance
