ReceivablePaymentImport2 is a BusinessClass
	owned by ar
	prefix is AIP
	classic name is ARIPAYMENT

	Ontology
		symbolic key is ReceivablePaymentImport2
			classic set name is AIPSET1

	Patterns
		disable AuditIndex
		disable Auditing 
		disable EffectiveDated
		disable DataTranslations

	Persistent Fields
		TransactionAmount is an InternationalAmount
			classic name is ORIG-AMT
		XrefNbr
		UserField01	
			classic name is USR-FLD-01
			restricted
		UserField02	
			classic name is USR-FLD-02
			restricted
		UserField03	
			classic name is USR-FLD-03
			restricted
		UserField04	
			classic name is USR-FLD-04
			restricted
		UserField05	
			classic name is USR-FLD-05
			restricted
		C2pExists is AlphaUpper size 1
			classic name is C2P-EXIST
		ErrorMessage						is Alpha 150
		RecordInError						is Boolean
		InterfaceRun						is a ReceivablesInterfaceResult
			delete ignored
		ReceivablePaymentHeader
			delete ignored
		ReceivablePayment
			delete ignored
		Prepayment							is Boolean		
		PrepaymentXrefNumber 				is AlphaUpper size 22		
			default label is "PrepaymentCrossReferenceNumber"

		BankEntity							is like BankEntity	
		BankAccountNumber										
		IDMUniqueID							is like IDMPID
			default label is "ReferenceIDM_ID"
			protected

	Local Fields
		LocalCompany					is like ReceivableCompany
		LocalBatch						is like ReceivablePaymentHeader
		WorkBatch						is like ReceivablePaymentHeader
		SkipPayment						is Boolean
		
		InterfacedPayment				is a ReceivablePayment view
		LocalProformaInvoice			is like ProformaInvoice
		LocalProformaPendingAmount		is an InternationalAmount
		LocalExtraAmount				is an InternationalAmount
		LocalLockBox					is like ReceivableLockBox


		FirstAllCompanyCustomerBankAccountRelCustomer		is like Customer	
		FirstAllCompanyCustomerBankAccountRelCompanyDone	is Boolean	
		LocalGotIDMDocumentURL			is Boolean
		IDMItem
		IDMAttributes
		LocalIDMUniqueId				is like IDMPID


	Field Rules

		PrepaymentXrefNumber			
			if (!Prepayment)
				cannot be entered
					"PrepaymentCrossReferenceNumberCannotBeEntered;ImportIsNotSetForPrepayment"

	Rule Blocks

		FirstAllCompanyCustomerBankAccountRelCompanyCustomer	
			if (!FirstAllCompanyCustomerBankAccountRelCompanyDone)

				initialize FirstAllCompanyCustomerBankAccountRelCustomer
					for each AllCompanyCustomerBankAccountRel

						FirstAllCompanyCustomerBankAccountRelCustomer		 = each.Customer
				FirstAllCompanyCustomerBankAccountRelCompanyDone = true


	Derived Fields
		DerivedCustomer is a DerivedField
			type is like Customer
			if  (ReceivablePaymentImport2.Customer not entered
			and  CustomerMappingTableInterfaceRel exists)
				return CustomerMappingTableInterfaceRel.Customer
			else
			if  (ReceivablePaymentImport2.Customer not entered	
			and BankEntity entered
			and BankAccountNumber entered
			and CompanyCustomerBankAccountRelExists)
				return CompanyCustomerBankAccountRel.Customer
			else
			if  (ReceivablePaymentImport2.Customer not entered	
			and BankEntity entered
			and BankAccountNumber entered
			and AllCompanyCustomerBankAccountRelExists)
				include FirstAllCompanyCustomerBankAccountRelCompanyCustomer
				return FirstAllCompanyCustomerBankAccountRelCustomer
			else
				return ReceivablePaymentImport2.Customer


		RemmitanceCountForRPI2 is a DerivedField
			type is Numeric 10
			return instance count of ReceivablePaymentRemitImportRel

		DerivedDetailCount is a DerivedField
			type is Numeric 10
			return instance count of ReceivablePaymentImport2Rel

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforARInterfacePayment2"

		ContextMessageText is a MessageField
			restricted
			"ReceivablePaymentImport2<ReceivablePaymentImport2.TransNbr>"

		DerivedIDMDocumentURL is a DerivedField
    		type is Alpha size up to 2083
			if (IsIDMConfigured)
				if (not LocalGotIDMDocumentURL)
					if (IDMUniqueID entered)
						IDMItem.DocumentType	= "FSM_ReceivablePaymentImport2"
						IDMItem.IDMUniqueId		= IDMUniqueID
						LocalGotIDMDocumentURL	= true
						return IDMItem.GetLink
    		return blank

	Relations

		AllCompanyCustomerBankAccountRel	
			one-to-many relation to CompanyCustomerBankAccount
			Field Mapping uses Set3
				related.CompanyCustomerBankAccount.CustomerBankAccountNumber		 = BankAccountNumber
				related.CompanyCustomerBankAccount.CustomerBankEntity				 = BankEntity

		CompanyCustomerBankAccountRel	
			one-to-one relation to CompanyCustomerBankAccount
			Field Mapping uses symbolic key
				related.Company													 = Company
				related.CompanyCustomerBankAccount.CustomerBankEntity			 = BankEntity
				related.CompanyCustomerBankAccount.CustomerBankAccountNumber	 = BankAccountNumber


		GeneralLedgerCompanyRel	
			one-to-one relation to GeneralLedgerCompany
			Field Mapping uses symbolic key
				related.Company		= Company

		ProformaInvoiceRel
			one-to-one relation to ProformaInvoice
			Field Mapping uses symbolic key  
				related.Company				= Company
				related.ProformaInvoice		= LocalProformaInvoice

		ReceivablePaymentRemitImportRel
			one-to-many relation to ReceivablePaymentRemitImport
			delete cascades
			Field Mapping uses symbolic key
				related.Company												= Company
			Instance Selection
				where (related.Customer										= ReceivablePaymentImport2.Customer
				and	related.ReceivablePaymentRemitImport.InterfacedCustomer	= ReceivablePaymentImport2.InterfacedCustomer
				and	related.ReceivablePaymentRemitImport.TransNbr			= ReceivablePaymentImport2.TransNbr
				and	related.ReceivablePaymentRemitImport.SeqNbr				= ReceivablePaymentImport2.SeqNbr)

		LocalReceivablePaymentHeaderRel
			one-to-one relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
				related.ReceivablePaymentHeader					= LocalBatch

		WorkBatchRel
			one-to-one relation to ReceivablePaymentHeader
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
				related.ReceivablePaymentHeader					= WorkBatch

		LocalReceivablePaymentImport3Rel
			one-to-many relation to ReceivablePaymentImport3
			Field Mapping uses symbolic key
				related.Company									= LocalCompany

		LocalReceivablePaymentImport3NoBatchRel
			one-to-many relation to ReceivablePaymentImport3
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
			Instance Selection
				where (related.BatchNumber not entered)

		LocalImport2OnlyRel
			one-to-many relation to ReceivablePaymentImport2
			Field Mapping uses symbolic key
				related.Company									= LocalCompany
			Instance Selection
				where (related.C2pExists != "Y")

		ReceivablePaymentImport2Rel
			one-to-many relation to ReceivablePaymentImport2
			Field Mapping uses symbolic key
				related.Company	= Company

		ReceivablePaymentImport3Rel
			one-to-one relation to ReceivablePaymentImport3
			Field Mapping uses symbolic key
				related.Company										= Company
				related.ReceivablePaymentImport3.TransactionNumber	= ReceivablePaymentImport2.TransNbr 
				related.ReceivablePaymentImport3.Customer			= ReceivablePaymentImport2.Customer 
				related.ReceivablePaymentImport3.SequenceNumber		= ReceivablePaymentImport2.SeqNbr

		CustomerMappingTableInterfaceRel
			one-to-one relation to CustomerMappingTableInterface
			Field Mapping uses ByInterfacedCustomer
				related.CustomerGroup				= Company.CustomerGroupField.CustomerGroup
				related.InterfacedCustomer			= ReceivablePaymentImport2.InterfacedCustomer

		ReceivableLockBoxRel	
			one-to-one relation to ReceivableLockBox
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup			= actor.context.FinanceEnterpriseGroup
				related.ReceivableLockBox				= LocalLockBox 

		IDMConfigurationRel
			one-to-one relation to IDMConfiguration
			Field Mapping uses symbolic key
				related.IDMConfiguration = actor.context.FinanceEnterpriseGroup



	Conditions
		ProformaEligibe
			restricted
			when (ProformaInvoiceRel exists
			and	  ProformaInvoiceRel.Status.Open)

		IsValidForActorContext
			restricted
			when ((Company entered	
			and GeneralLedgerCompanyRel.FinanceEnterpriseGroup = actor.context.FinanceEnterpriseGroup)	
			or Company not entered)	

		ErrorExists								
			when (ErrorMessage entered)


		AllCompanyCustomerBankAccountRelExists	
			restricted
			when (AllCompanyCustomerBankAccountRel exists)

		CompanyCustomerBankAccountRelExists	
			restricted
			when (CompanyCustomerBankAccountRel exists)

		CustomerMappingTableInterfaceRelExists	
			restricted
			when (CustomerMappingTableInterfaceRel exists)

		DocumentManagementButtonValid
			restricted
			when (DerivedIDMDocumentURL entered)

		IsIDMConfigured
			when (IDMConfigurationRel.DerivedDefaultConnection entered
			or IsIDMAuthDSConfigured)
		
		IsIDMAuthDSConfigured
			restricted
			when (config.AUTH_DS_PUBLIC_KEY != blank
			and config.AUTH_DS_SECRET_KEY != blank
			and config.AUTH_DS_URL != blank)

	Sets
		ByInterfaceRun
			Sort Order
				InterfaceRun
				Company
				ReceivablePaymentImport2.Customer
				ReceivablePaymentImport2.InterfacedCustomer
				ReceivablePaymentImport2.TransNbr
				ReceivablePaymentImport2.SeqNbr


	Actions
		Create is a Create Action
			Field Rules	
				Company	
					required	
			Entrance Rules	
				if  (ReceivablePaymentImport2.Customer not entered
					and  CustomerMappingTableInterfaceRel exists)
						ReceivablePaymentImport2.Customer = CustomerMappingTableInterfaceRel.Customer
				else
				if  (ReceivablePaymentImport2.Customer not entered
					and BankEntity entered
					and BankAccountNumber entered
					and CompanyCustomerBankAccountRelExists)
						ReceivablePaymentImport2.Customer = CompanyCustomerBankAccountRel.Customer

		RoboticProcessAutomationCreate is a Create Action
			restricted
			Entrance Rules	

				if  (ReceivablePaymentImport2.Customer not entered
					and  CustomerMappingTableInterfaceRel exists)
						ReceivablePaymentImport2.Customer = CustomerMappingTableInterfaceRel.Customer
				else
				if  (ReceivablePaymentImport2.Customer not entered
					and BankEntity entered
					and BankAccountNumber entered
					and CompanyCustomerBankAccountRel exists)
						ReceivablePaymentImport2.Customer = CompanyCustomerBankAccountRel.Customer



		Update is an Update Action

		Delete is a Delete Action

		DeleteAllTransactionsForCompany is a Set Action
			default label is "DeleteAllTransactionsForCompany"
			confirmation required

			Parameters
				PrmCompany		is a ReceivableCompany

			Instance Selection
				where (Company	= PrmCompany
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup)

			Action Rules
				Instance Rules
					invoke FastDelete


		InterfacePayments is a Set Action
			default label is "InterfacePayments"
			Parameters
				PrmCompany					is a ReceivableCompany
					default label is "Company"
				PostDate					is a PostingDate		
				DepositDate					is an ExchangeDate		
				LockBox						is a ReceivableLockBox
					default label is "Lockbox"	
				Operator					is a ReceivableOperator
				Batch						is a ReceivablePaymentHeader
				AddToUnreleasedBatch		is Boolean
				ProcessLevel				is a ReceivableProcessLevel
				CashCode
				Currency
				ExchangeRate				is an OrigRate
				ReleaseBatch				is Boolean
				PrmReference				is like Reference
				DepositBankCode				is a BankTransactionCode
				BankCharges					is like InternationalAmount
				BankChargesAccount			is a TransactionCodeBlock	
				CashLedgerUserField1		is AlphaUpper size 30
					default label is "TransactionData1"		
				CashLedgerUserField2		is AlphaUpper size 30
					default label is "TransactionData2"		
				CashLedgerUserField3		is AlphaUpper size 30
					default label is "TransactionData3"		
				CashLedgerUserField4		is AlphaUpper size 30
					default label is "TransactionData4"		

			Parameter Rules
				PrmCompany
					required

				AddToUnreleasedBatch
					if (AddToUnreleasedBatch)
						constraint (Batch entered)
							"BatchRequiredIfAddToUnreleasedBatchChecked"

				Batch



					if (PrmCompany.PaymentBatchNumbering
					and !AddToUnreleasedBatch)
						cannot be entered
							"CannotEnterBatch;AutoBatchNumberingIsTurnedOn"
					else
						if (AddToUnreleasedBatch)
							required
								"BatchNumberIsRequiredIfAddToUnreleasedBatchIsChecked"
						else
						if (!PrmCompany.PaymentBatchNumbering)
							required
								"BatchNumberIsRequired;CompanyAutoBatchNumberingIsTurnedOff"

						LocalCompany	= PrmCompany 
						LocalBatch		= Batch
						constraint (LocalReceivablePaymentHeaderRel exists)
							"BatchDoesNotExist"

						if  (!AddToUnreleasedBatch)
							constraint (!LocalReceivablePaymentHeaderRel.ReceivableApplicationRel exists)
								"BatchNumberStillInUseForApplicationRecord"

						if  (AddToUnreleasedBatch)
							constraint (LocalReceivablePaymentHeaderRel.Status.OpenBatchUnreleased)
								"BatchMustBeUnreleasedIfAddToUnreleasedBatchChecked"
							if  (PostDate entered)
								constraint (LocalReceivablePaymentHeaderRel.GeneralLedgerDate = PostDate)
									"IfAddToUnreleasedBatchCheckedPostDateMustMatch"
							if  (DepositDate entered)
								constraint (LocalReceivablePaymentHeaderRel.DepositDate = DepositDate)
									"IfAddToUnreleasedBatchCheckedDepositDateMustMatch"
							if  (ProcessLevel entered)
								constraint (LocalReceivablePaymentHeaderRel.ReceivableProcessLevel = ProcessLevel)
									"IfAddToUnreleasedBatchCheckedProcessLevelMustMatch"
							if  (CashCode entered)
								constraint (LocalReceivablePaymentHeaderRel.CashCode = CashCode)
									"IfAddToUnreleasedBatchCheckedCashCodeMustMatch"
							if  (LockBox entered)
								constraint (LocalReceivablePaymentHeaderRel.ReceivableLockBox = LockBox)
									"IfAddToUnreleasedBatchCheckedLockboxMustMatch"	

				PostDate
					required
					if (PrmCompany.CompanySystemClosingControlRel.Control and Company.VerifyGLDateWithinGLDateRange)
						constraint (PostDate within PrmCompany.CompanySystemClosingControlRel.ValidEntryDate)
							"PostDate<PostDate>IsNotWithinValidEntryDatesForCompany;ValidDateRangeIs<PrmCompany.CompanySystemClosingControlRel.ValidEntryDate.Begin>-<PrmCompany.CompanySystemClosingControlRel.ValidEntryDate.End>"

				DepositDate
					required

				LockBox





				ReleaseBatch
					initial value is true
					if (ReleaseBatch)
						LocalCompany = PrmCompany
						constraint (!LocalReceivablePaymentImport3Rel exists)
							"OCRRecordsExist;ReleaseBatchMustBeSetToFalse"

				Operator
					if (PrmCompany.CashOperatorRequired)
						constraint (Operator entered)
							"OperatorRequired"
						constraint (Operator exists)
							"OperatorDoesNotExist"
					if (Operator not entered)
						default to actor

				ProcessLevel
					if (ProcessLevel not entered
					and Batch not entered
					and LockBox.ReceivableProcessLevel not entered
					and PrmCompany.DefaultReceivableProcessLevel entered)
						ProcessLevel = PrmCompany.DefaultReceivableProcessLevel

					if  (ProcessLevel not entered)
						if (Batch not entered)
							constraint (LockBox.ReceivableProcessLevel entered)
								"ProcessLevelRequiredAndNotFoundOnBatchOrLockbox"	
							constraint (LockBox.ReceivableProcessLevel.IsActive) 
								"LockboxProcessLevelMustBeActive"	
					else
						required
						constraint (ProcessLevel exists)
							"ProcessLevelDoesNotExist"
						constraint (ProcessLevel.IsActive)
							"ProcessLevelMustBeActive"

				CashCode
					if  (!AddToUnreleasedBatch
					and (LockBox not entered
					or   LockBox.CashCode not entered)
					and (ProcessLevel not entered
					or   ProcessLevel.CashCode not entered))
						required

				BankCharges
					if  (BankCharges entered)
						constraint (BankChargesAccount entered)
							"AccountRequiredIfBankChargesEntered"

				DepositBankCode
					if  (DepositBankCode entered)
						constraint (DepositBankCode.BankTransactionType.BankService)
							"MustBeABankServiceTypeDepositBankPayCode"
						constraint (DepositBankCode.TransactionType.CreditTransaction)
							"DepositBankCodeMustBeACreditType"

			Local Fields
				LocalInterfaceResultView		is a ReceivablesInterfaceResult view
				NewBatch						is a ReceivablePaymentHeader view
				SetErrorOccurred				is Boolean
				HasPaymentImport3Records		is Boolean
				BatchError						is Boolean
				BatchErrorMessage				is Alpha 150
				HasUnassignedPayments			is Boolean
				NextSentence					is Boolean
				LocalActor						is Actor
				LocalRemmitanceCount			is Numeric 12
				LocalRemitRecordInError			is Boolean
			Accumulators
				InstanceCount

			Instance Selection
				where (Company = PrmCompany
				and	GeneralLedgerCompanyRel.FinanceEnterpriseGroup	= actor.context.FinanceEnterpriseGroup)



			Action Rules

				Empty Set Rules
					invoke Create ReceivablesInterfaceResult
						assign result to LocalInterfaceResultView
						invoked.FinanceEnterpriseGroup		= PrmCompany.FinanceEnterpriseGroup
						invoked.RunTime						= current timestamp
						invoked.RunType						= 4
						invoked.Company						= PrmCompany
						invoked.PrmReference				= PrmReference
						invoked.ReleaseBatch				= ReleaseBatch
						invoked.DepositBankCode				= DepositBankCode
						invoked.Status						= 1

						invoked.PostDate					= PostDate
						invoked.DepositDate					= DepositDate
						invoked.Operator					= Operator
						invoked.Batch						= Batch
						invoked.AddToUnreleasedBatch		= AddToUnreleasedBatch
						invoked.ProcessLevel				= ProcessLevel
						invoked.CashCode					= CashCode
						invoked.Currency					= Currency
						invoked.ExchangeRate				= ExchangeRate
						invoked.BankCharges					= BankCharges
						invoked.BankChargesAccount			= BankChargesAccount
						invoked.CashLedgerUserField1		= CashLedgerUserField1		
						invoked.CashLedgerUserField2		= CashLedgerUserField2		
						invoked.CashLedgerUserField3		= CashLedgerUserField3		
						invoked.CashLedgerUserField4		= CashLedgerUserField4		

				Set Rules
					Entrance Rules
						invoke Create ReceivablesInterfaceResult
							assign result to LocalInterfaceResultView
							invoked.FinanceEnterpriseGroup		= GeneralLedgerCompanyRel.FinanceEnterpriseGroup
							invoked.RunTime						= current timestamp
							invoked.RunType						= 4
							invoked.Company						= PrmCompany
							invoked.PrmReference				= PrmReference
							invoked.ReleaseBatch				= ReleaseBatch
							invoked.DepositBankCode				= DepositBankCode

							invoked.PostDate					= PostDate
							invoked.DepositDate					= DepositDate
							invoked.Operator					= Operator
							invoked.Batch						= Batch
							invoked.AddToUnreleasedBatch		= AddToUnreleasedBatch
							invoked.ProcessLevel				= ProcessLevel
							invoked.CashCode					= CashCode
							invoked.Currency					= Currency
							invoked.ExchangeRate				= ExchangeRate
							invoked.BankCharges					= BankCharges
							invoked.BankChargesAccount			= BankChargesAccount
							invoked.CashLedgerUserField1		= CashLedgerUserField1		
							invoked.CashLedgerUserField2		= CashLedgerUserField2		
							invoked.CashLedgerUserField3		= CashLedgerUserField3		
							invoked.CashLedgerUserField4		= CashLedgerUserField4		
							invoked.ReceivableInterfaceCounts.DetailCount	= DerivedDetailCount

						LocalCompany = PrmCompany

						if  (LocalReceivablePaymentImport3Rel exists)
							HasPaymentImport3Records				= true

						if  (!AddToUnreleasedBatch
						and (!HasPaymentImport3Records
						or   LocalReceivablePaymentImport3NoBatchRel exists))

							invoke Create ReceivablePaymentHeader
								resume on error
									BatchError						= true
									BatchErrorMessage				= error message
								assign result to NewBatch
								invoked.Company						= PrmCompany
								invoked.ReceivablePaymentHeader		= Batch
								invoked.ReceivableProcessLevel		= ProcessLevel
								invoked.ReceivableOperator			= Operator
								invoked.DepositDate					= DepositDate
								invoked.GeneralLedgerDate			= PostDate
								invoked.CashCode					= CashCode
								invoked.Currency					= Currency
								invoked.CurrencyRate				= ExchangeRate
								invoked.ReceivableLockBox			= LockBox
								invoked.AdditionalAmount			= BankCharges
								invoked.AdditionalAmountAccount		= BankChargesAccount
								invoked.DepositBankCode				= DepositBankCode
								invoked.OriginatingInterfaceRun		= LocalInterfaceResultView.ReceivablesInterfaceResult
								invoked.InterfaceInProcess			= true
								invoked.Reference					= PrmReference
								invoked.CbUserField1				= CashLedgerUserField1		
								invoked.CbUserField2				= CashLedgerUserField2		
								invoked.CbUserField3				= CashLedgerUserField3		
								invoked.CbUserField4				= CashLedgerUserField4		
								invoked.Origin					  = "N" 

						if (BatchError)

							invoke FastUpdate LocalInterfaceResultView.ReceivablesInterfaceResult
								invoked.Status						= 2
								invoked.ResultErrorMessage			= BatchErrorMessage

					Exit Rules
						if  (NewBatch.BatchCount not entered)

							invoke Delete NewBatch.ReceivablePaymentHeader
							if (!SetErrorOccurred)
								invoke FastUpdate LocalInterfaceResultView.ReceivablesInterfaceResult
									invoked.RecordsProcessed									= InstanceCount
									invoked.ReceivableInterfaceCounts.PassedHeaderCount			= InstanceCount
									invoked.ReceivableInterfaceCounts.AdditionalDetailCount		= LocalRemmitanceCount
									if (LocalInterfaceResultView.Status != 2)
										invoked.Status					= 1

							else
								invoke FastUpdate LocalInterfaceResultView.ReceivablesInterfaceResult
									invoked.RecordsProcessed									= InstanceCount
									invoked.ReceivableInterfaceCounts.PassedHeaderCount			= InstanceCount
									invoked.ReceivableInterfaceCounts.AdditionalDetailCount		= LocalRemmitanceCount
									invoked.Status					= 2
						else
						if (!BatchError)
							invoke FastUpdate LocalInterfaceResultView.ReceivablesInterfaceResult
								invoked.RecordsProcessed									= InstanceCount
								invoked.ReceivableInterfaceCounts.PassedHeaderCount			= InstanceCount
								invoked.ReceivableInterfaceCounts.AdditionalDetailCount		= LocalRemmitanceCount
								if (LocalInterfaceResultView.Status != 2)
									invoked.Status					= 1
	
							if  (NewBatch entered)
								invoke FastUpdate NewBatch.ReceivablePaymentHeader
									if (!SetErrorOccurred
									or (SetErrorOccurred
									and LocalRemitRecordInError))
										invoked.InterfaceInProcess	= false
							if (!SetErrorOccurred
							or (SetErrorOccurred
							and LocalRemitRecordInError))
								if  (ReleaseBatch)

									if  (HasPaymentImport3Records
									and  HasUnassignedPayments)
										NextSentence = true
									else
										if  (NewBatch entered)
											invoke OpenBatchUnreleased.Release NewBatch.ReceivablePaymentHeader
												resume on error
			
										if  (Batch entered)
											invoke OpenBatchUnreleased.Release Batch
												resume on error

						LocalActor = actor
						send notification
							to LocalActor
							description is "ReceivablePayment2InterfaceHasCompleted"
							priority is high
							detail is "ResultsCanBeSeenInInterfaceResults"

				Instance Rules

					if (!BatchError)

						SetErrorOccurred							= false

						InterfaceRun								= LocalInterfaceResultView.ReceivablesInterfaceResult
						RecordInError								= false
						initialize ErrorMessage

						if  (C2pExists = "Y"
						and  !ReceivablePaymentImport3Rel exists)
							C2pExists								= "N"

						if  (HasPaymentImport3Records
						and  C2pExists != "Y")
							SkipPayment							= true
						else
						if  (C2pExists = "Y"
						and (ReceivablePaymentImport3Rel.PostingDate != PostDate
						or   ReceivablePaymentImport3Rel.CashCode	 != CashCode))
							SkipPayment							= true
						else
							InstanceCount							+= 1
							LocalRemmitanceCount					+= RemmitanceCountForRPI2	
							if  (ReceivablePayment entered)
								LocalCompany						= Company
								WorkBatch							= ReceivablePaymentHeader
								invoke FastUpdate ReceivablePayment
									invoked.OriginatingInterfaceRun	= LocalInterfaceResultView.ReceivablesInterfaceResult
							else
							if  (ReceivablePayment not entered)  




								if (C2pExists = "Y"
								and ReceivablePaymentImport3Rel.BatchNumber entered
								and ReceivablePaymentImport3Rel.BatchNumberRel.Status.OpenBatchUnreleased)
									LocalCompany						= ReceivablePaymentImport3Rel.Company
									WorkBatch							= ReceivablePaymentImport3Rel.BatchNumber
								else
								if (Batch entered)
									LocalCompany						= PrmCompany
									WorkBatch							= Batch
								else
									LocalCompany						= NewBatch.Company
									WorkBatch							= NewBatch.ReceivablePaymentHeader

								initialize LocalProformaInvoice
								initialize LocalProformaPendingAmount
								initialize LocalExtraAmount
								if (first ReceivablePaymentRemitImportRel.TransRemNbr[1:2] = "PF")
									LocalProformaInvoice = first ReceivablePaymentRemitImportRel.TransRemNbr[3:10]
								LocalProformaPendingAmount = (ProformaInvoiceRel.InvoiceAmount - sum ProformaInvoiceRel.ReceivablePrepaymentRel.ReceivablePayment.TransactionAmount)
								if (LocalProformaPendingAmount > 0)
									LocalExtraAmount = TransactionAmount - LocalProformaPendingAmount

								invoke InterfaceCreate ReceivablePayment
									assign result to InterfacedPayment
									resume on error
										SetErrorOccurred				= true
										RecordInError					= true
										ErrorMessage					= error message
									fill in user fields from this instance	

									invoked.Company						= Company
									invoked.ReceivablePaymentHeader	= WorkBatch
									invoked.Origin						= "N" 
									invoked.TypeOfPayment				= "P"
									invoked.Customer					= DerivedCustomer
									invoked.BankEntity					= BankEntity	
									invoked.BankAccountNumber			= BankAccountNumber	
									invoked.PaymentNumber				= ReceivablePaymentImport2.TransNbr
									invoked.ReferenceNumber				= ReceivablePaymentImport2.XrefNbr
									if (LocalExtraAmount > 0)							
										invoked.TransientSeparatePaymentAmount  = LocalExtraAmount
										invoked.TransactionAmount				= TransactionAmount - LocalExtraAmount
									else
										invoked.TransactionAmount		= TransactionAmount
									invoked.OriginatingInterfaceRun		= InterfaceRun
									if (IDMUniqueID entered)
										invoked.TransientIDMDocumentType = "FSM_ReceivablePaymentImport2"
										invoked.TransientIDMUniqueID 	= IDMUniqueID

								if (RecordInError)





									if (C2pExists = "Y"
									and ReceivablePaymentImport3Rel.BatchNumber not entered)
										invoke Update ReceivablePaymentImport3Rel
											invoked.BatchNumber			= NewBatch.ReceivablePaymentHeader
								else


									invoke FastUpdate WorkBatchRel
										invoked.BatchCount					+= 1
										if (LocalExtraAmount > 0)
											invoked.BatchTotal				+= (TransactionAmount - LocalExtraAmount)
										else
											invoked.BatchTotal				+= TransactionAmount

									if (Prepayment)		
										invoke Create ReceivablePrepayment
											fill in user fields from this instance
											invoked.Company							= Company
											invoked.ReceivablePaymentHeader			= InterfacedPayment.ReceivablePaymentHeader
											invoked.ReceivablePayment				= InterfacedPayment.ReceivablePayment
											invoked.InputReferenceType				= "N"
											if (ReceivablePaymentImport2.PrepaymentXrefNumber entered)
												invoked.Invoice						= PrepaymentXrefNumber	
											else
												invoked.Invoice						= ReceivablePaymentImport2.TransNbr

							if (!RecordInError)
								if  (!ReceivablePaymentRemitImportRel exists)
									invoke FastDelete
								else
									if (InterfacedPayment entered)
										ReceivablePaymentHeader						= InterfacedPayment.ReceivablePaymentHeader
										ReceivablePayment							= InterfacedPayment.ReceivablePayment
									for each ReceivablePaymentRemitImportRel
										initialize LocalRemitRecordInError			
										if (each.ErrorExists)
											invoke ResetErrorMessage each
					
										if (each.TransRemNbr[1:2] = "PF")
											LocalProformaInvoice = each.TransRemNbr[3:10]
											if (ProformaEligibe)
												invoke Create ReceivablePrepayment




													fill in user fields from this instance	
													invoked.Company							= Company
													invoked.ReceivablePaymentHeader			= InterfacedPayment.ReceivablePaymentHeader
													invoked.ReceivablePayment				= InterfacedPayment.ReceivablePayment
													invoked.InputReferenceType				= "R"
													invoked.ProformaInvoice					= LocalProformaInvoice






										invoke Create ReceivablePaymentRemittance
											resume on error
												SetErrorOccurred					= true
												LocalRemitRecordInError				= true		
												ErrorMessage						= error message
											fill in user fields from first ReceivablePaymentRemitImportRel	
											invoked.Company							= Company
											if (ReceivablePaymentHeader entered)
												invoked.ReceivablePaymentHeader			= ReceivablePaymentHeader
											else
												invoked.ReceivablePaymentHeader			= WorkBatch

											invoked.ReceivablePayment				= ReceivablePayment

											invoked.ReceivablePaymentRemittance		= each.ReceivablePaymentRemitImport.LastRemittanceSequence
											invoked.ReceivableInvoiceType			= each.TransType
											invoked.ReceivableInvoice				= each.TransRemNbr
											if (ProformaEligibe)
												invoked.AppldAmt					= InterfacedPayment.TransactionAmount
												invoked.TransientProformaInterface	= true
												invoked.Status						= 2
											else
												invoked.AppldAmt					= each.AppldAmt
											invoked.OriginatingInterfaceRun			= InterfaceRun
											
										if (LocalRemitRecordInError)		

											invoke FastUpdate LocalInterfaceResultView.ReceivablesInterfaceResult
												invoked.Status						= 2
											invoke Update each					
												invoked.ErrorMessage	= ErrorMessage
												invoked.InterfaceRun	= LocalInterfaceResultView.ReceivablesInterfaceResult
											
											RecordInError	 = true
										else
											invoke Delete each

									if (!RecordInError)
										invoke FastDelete


		FastUpdate is an Update Action
			restricted
			bypass field rules


		FastDelete is a Delete Action
			restricted
			bypass relational integrity rules


		ResetErrorMessage is an Instance Action
			valid when (ErrorExists)					
			Action Rules
				initialize ErrorMessage



		MovePaymentImportToDifferentCompanyCustomer is an Instance Action	
			disable multiple instance selection	
			Parameters
				PrmNewReceivableCompany		is a ReceivableCompany
					default label is "NewCompany"
				PrmNewCustomer				is a Customer
					default label is "NewCustomer"
			Parameter Rules
				PrmNewReceivableCompany
					initial value is Company
					required
				PrmNewCustomer
					initial value is ReceivablePaymentImport2.Customer
					required
			Action Rules
				invoke Create ReceivablePaymentImport2
					fill in fields from this instance
						except invoked.Company
						except invoked.ReceivablePaymentImport2.Customer
					invoked.Company								= PrmNewReceivableCompany
					invoked.ReceivablePaymentImport2.Customer	= PrmNewCustomer
				for each ReceivablePaymentRemitImportRel
					invoke Create ReceivablePaymentRemitImport
						fill in fields from each
							except invoked.Company
							except invoked.Customer
						invoked.Company							= PrmNewReceivableCompany
						invoked.Customer						= PrmNewCustomer
					invoke FastDelete each
				invoke FastDelete




