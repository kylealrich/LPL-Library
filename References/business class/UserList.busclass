UserList is a BusinessClass
    owned by repository
    prefix is uld
    framework type is LPLConfiguration

	Patterns
		disable EffectiveDated
		disable AsOfDateProcessing
		implements DynamicCreation
		implements ConfigurationMetadata
		implements AuditLogEntryActions

    Ontology
        symbolic key is UserList



    Persistent Fields
    	Owner is like Actor // LMRK-97977 Was "is Actor". Likely meant to be "is an Actor". Changed to "like" so we have the same dict type but without changing existing functionality.
    	Actor
        UserFolder
        	delete cascades
    	BusinessView
        BusinessList is LPLName
    	FolderName is LPLName
    	Delta is LPL
    		default label is "LPL"
    	Status 			is a UserObjectStatus
    	Description		is a ConfigDescription
    	UserEditorType
    	Independent		is Boolean
		HasReportInfo   is a UserObjectHasReportInfo
			default label is "ReportInformationExists"
    	LPLIndex 		is Text 
    	ErrorText		is Text

	Transient Fields
		TBusinessList is a BusinessList
			default label is "BusinessList"
			derive value from DerivedBusinessList 
        TNoInvalid is Boolean
            default label is "MustBeValid_LPL"

    Derived Fields

    	DerivedBusinessList is a DerivedField
    		type is LPLName
    		restricted
    		if (BusinessListRel exists)
    			return BusinessList

    		return blank

    	ContextKey is a DerivedField
    		type is LPLName
    		if (Actor entered)
	    		return  "Actor  '" + Actor + "', " + BusinessView + ", " + BusinessList
    		if (UserFolder entered)
    			return "Folder '" + UserFolder.Name + "', " + BusinessView + ", " + BusinessList
    		if (FolderName entered)
    			return "FolderName '" + FolderName + "', " + BusinessView + ", " + BusinessList
    		return  "blank, " + BusinessView + ", " + BusinessList


		ConfigActor is a ConditionalField
			type is Actor
			default label is "Actor"
			if (IsFolder)
				UserFolder.Actor
			else
				Actor

		ParseText is a NativeField
			type is Text

		NewInitialLPL is a NativeField
		    type is Text
		    
		UpdIndIndexStamp is a NativeField
			type is Text
			restricted
			default label is "UpdateIndexStamp"


		OverrideNotificationDescription is a MessageField
    		"YourPersonalizationHasBeenUpdated"

		OverrideNotificationDetails is a MessageField
    		"YourPreviousModificationsFor<BusinessView>.<BusinessList>HaveBeenOverriddenByTheConfigurationAdministratorAndAreNoLongerActive"

        SharedPersonalizationNotificationDescription is a MessageField
            "SomeoneHasSharedAPersonalizationWithYou!"

        SharedPersonalizationNotificationDetails is a MessageField
            "YourViewOf<BusinessList>on<BusinessView>HasNowBeenUpdated.ThePersonalizationOriginatedFrom_Owner:<LocCopyFromList.Owner>And_Actor:<LocCopyFromList.Actor>.SharedBy:<authenticated actor>."

		BusinessClassViewMF is a MessageField
            "Business_Class"

        BusinessTaskViewMF is a MessageField
            "Business_Task"

        BusinessViewDefaultMF is a MessageField
            "View"

        BusinessViewLabel is a ConditionalField
            type is Alpha 20
            if (BusinessView.Type.BusinessClass)
                BusinessClassViewMF
            else
            if (BusinessView.Type.BusinessTask)
                BusinessTaskViewMF
            else
                BusinessViewDefaultMF

        OverriddenCount is a DerivedField
            type is Numeric size 4
            if (GlobalList)
                return (instance count of OverriddenConfigurationRel)
            else
                return blank

		ReportCategory is a MessageField
			restricted
			"Report"

		ConfigurationCategory is a MessageField
			restricted
			"Configuration"

		PersonalizationCategory is a MessageField
			restricted
			"Personalization"

		Category is a DerivedField
			type is Alpha size 50

			if (IsFolder)
				return ReportCategory
			if (GlobalList)
				return ConfigurationCategory
			if (IsActor)
				return PersonalizationCategory

			return ConfigurationCategory
			
		SearchFormConverted is a MessageField
    		"SearchFormConvertedToInline"			
    		
    	SearchFormNotConverted is a MessageField
    		"SearchFormWasNotConvertedToInline"
    		
    	SearchFormConvertedMessage is a DerivedField
    		type is MessageField
    		restricted
    		
    		if (LocConvertedSF)
    			return SearchFormConverted
    	
    		return SearchFormNotConverted
    	
    	CanConvertToIlineSearchForm is a NativeField
    		type is Boolean
        	restricted

        InitialConfiguration is a DerivedField
            type is LPL
			for each audit log records
				if (each.action type.Create)
					return each.Delta
            return blank

	Local Fields
		LocParseText 	    is Text
		LocBasedOnList      is a BusinessList
		LocTargetActor      is an Actor
		LocCopyFromList     is a UserList
		LocConvertedSF		is Boolean
        LocActor            is Actor
        LocBusinessView     is LPLName
        LocName             is LPLName

    Field Rules
		Owner
			default to actor
    	BusinessView
    		required

    	BusinessList
    		required


    		constraint (GlobalList or BusinessListRel exists) 
    			"PersonalizationsAndFoldersMustBeBackedByAnExistingList"

    	UserFolder
    		if (old Independent 
    		and IsListIndependent
			and UserFolder entered
			and not old UserFolder entered)
				cannot be changed
					"CannotChangeAnIndependentListToAFolder.PleaseCreateANewFolder"

			constraint (Actor not entered)
				"CannotEnterBothActorAndFolder"

    	FolderName
    		if (old Independent  
    		and IsListIndependent
			and FolderName entered
			and not old FolderName entered)
				cannot be changed
					"CannotChangeAnIndependentListToAFolder.PleaseCreateANewFolder"

			constraint (Actor not entered)
				"CannotEnterBothActorAndFolder"

    	Actor
    		if (old Independent  
    		and IsListIndependent
			and Actor entered
			and not old Actor entered)
				cannot be changed
					"CannotChangeAnIndependentListToAPersonalization.PleaseCreateANewPersonalization"

    		constraint (UserFolder not entered and FolderName not entered)
    			"CannotEnterBothActorAndFolder"

		Delta
			required

			if (Delta changed)
				LPLIndex = blank

			if (Status.Active)
				LocParseText = ParseText

				if (not LocParseText = blank)
				    if (TNoInvalid)
				        constraint (false)
				            "InvalidList.__<LocParseText>"
				    else
                        confirmation required
                            "<LocParseText>:_User_ListIsInvalid.__DoYouWantToSaveAnyway?"

					Status = Status.Invalid
					ErrorText = LocParseText

		UserEditorType
			default to UserEditorType.LPL

		Status
			if (Status.Active)
				initialize ErrorText


    Conditions
    	IsFolder
    		default label is "Folder"
   			when (FolderName entered or UserFolder entered)

   		NameOnlyFolder
   			when (FolderName entered and UserFolder not entered)

   		IsActor
   			default label is "Actor"
   			when (Actor entered)

    	GlobalList
    		when (!IsActor and !IsFolder)

		ConfigGlobal
			default label is "GlobalConfiguration"
			when ((IsFolder and UserFolder.Actor not entered) or GlobalList)

		IsForUserBusinessView
			default label is untranslatable
			when (BusinessView.IsUserClass)

		IsListDependent
			restricted
			when (BusinessListRel exists
			and   not BusinessListRel.Independent)

		IsListIndependent
			restricted
			when (not BusinessListRel exists
			or    BusinessListRel.Independent)

		CondIndependent
			restricted
			when (GlobalList and IsListIndependent)

		HasErrorText
			default label is "ErrorTextEntered"
			when (ErrorText entered)


        IsOverridden
            default label is "Overridden"
            when (first OverriddenConfigurationRel exists
            and GlobalList)

        PersonalizedLPLMatchesConfiguration
            when (!GlobalList
            and   Delta = first ConfigurationCheckRel.Delta)
         
    Actions
    	Create is a Create Action
    		Action Rules
	    		if (TBusinessList entered)
	    			if (TBusinessList entered)
	    				constraint (BusinessList = TBusinessList)
	    					"OnlyListOrAnExistingListCanBeEntered" 

	    			BusinessList = TBusinessList

				Independent = CondIndependent

    		Exit Rules


			    if (Independent
    			and Status.Active)
					LocParseText = ParseText
					
				invoke FireEvent
				
				if (UserFolder entered and UserFolder exists)
					invoke UpdateApplicationReport UserFolder
    			
    	CreateFromSnapshot is a Create Action
    		restricted
    		bypass field rules

    			
    		Exit Rules

			    if (Independent
    			and Status.Active)
					LPLIndex = UpdIndIndexStamp
			
    	Update is an Update Action
    		Local Fields
    			LocalDeltaChanged is Boolean
    		Action Rules
    			if (TBusinessList entered)
	    			if (BusinessList entered)
	    				constraint (BusinessList = TBusinessList)
	    					"OnlyListOrAnExistingListCanBeEntered" 

	    			BusinessList = TBusinessList
					
				Independent = CondIndependent

                if (Delta changed)
					LocalDeltaChanged = true

    			if (not UserFolder entered)
    				if (Actor changed
    				and DuplicateRel exists)
    					if (Actor entered) 
    						confirmation required
								"User_ListPersonalizationExists.__DoYouWantToOverwrite?"
    					else
    						confirmation required
								"User_ListConfigurationExists.__DoYouWantToOverwrite?"
    					invoke Delete DuplicateRel

    		Exit Rules


			    if (Independent
    			and Status.Active)
					LocParseText = ParseText
					
				invoke FireEvent
				
				if (LocalDeltaChanged and UserFolder entered and UserFolder exists)
					invoke UpdateApplicationReport UserFolder

		UpdateFromSnapshot is an Update Action
			restricted
			bypass field rules

				
			Action Rules
    			if (not UserFolder entered)
    				if (Actor changed
    				and DuplicateRel exists)
    					invoke Delete DuplicateRel

    		Exit Rules

			    if (Independent
    			and Status.Active)
					LPLIndex = UpdIndIndexStamp
			
    	Delete is a Delete Action
    		Local Fields
    			LocUserFolder is a UserFolder
    		
    		Entrance Rules
    			LocUserFolder = UserFolder
    		
    		Exit Rules
    			invoke FireEvent
    			
    			if (LocUserFolder entered and LocUserFolder exists)
    				invoke UpdateApplicationReport LocUserFolder

		DeleteFromSnapshot is a Delete Action
			restricted
			bypass relational integrity rules


		Purge is a Purge Action
			restricted
			Local Fields
    			LocUserFolder is a UserFolder
    		
    		Entrance Rules
    			LocUserFolder = UserFolder
    		
    		Exit Rules
    			invoke FireEvent
    			
    			if (LocUserFolder entered and LocUserFolder exists)
    				invoke UpdateApplicationReport LocUserFolder

    	Activate is an Instance Action
    		valid when (not Status.Active)
    		completion message is "<Category>_Activated"
    		Action Rules
    			LocParseText = ParseText

				if (not LocParseText = blank)
					constraint(LocParseText = blank)
						"<LocParseText>:_User_ListIsInvalid._Cannot_Activate."

    			Status = Status.Active
    			initialize ErrorText

			Exit Rules



				if (Independent)
					LocParseText = ParseText 

			 	invoke FireEvent
			 	
			 	if (UserFolder entered and UserFolder exists)
    				invoke UpdateApplicationReport UserFolder

    	Deactivate is an Instance Action
    		valid when (not Status.Inactive)
    		completion message is "<Category>_Deactivated"
    		Action Rules
    			Status = Status.Inactive

			Exit Rules
    			invoke FireEvent
    			
    			if (UserFolder entered and UserFolder exists)
    				invoke UpdateApplicationReport UserFolder

    	Invalidate is an Instance Action
    		valid when (not Status.Invalid)
    		restricted
    		Action Rules
    			Status = Status.Invalid

			Exit Rules
    			invoke FireEvent
    			
    			if (UserFolder entered and UserFolder exists)
    				invoke UpdateApplicationReport UserFolder

    	FireEvent is an Instance Action
			restricted

        SharePersonalization is an Instance Action
            valid when (IsActor) 
            restricted
            Parameters
                CopyFromList                        is a UserList
                CopyToActor                         is an Actor
                OverrideExistingPersonalizations    is Numeric 1
                    States
                        Skip        value is 1
                        Overwrite   value is 2
            Parameter Rules
                CopyFromList
                    required
                CopyToActor
                    required
                OverrideExistingPersonalizations
                    required
                    initial value is OverrideExistingPersonalizations.Skip
            Local Fields
                SendMessage is Boolean
            Action Rules
                LocTargetActor  = CopyToActor  
                LocCopyFromList = CopyFromList



                if (CopyToActorHasPersonalizationRel exists)


                    if (OverrideExistingPersonalizations.Overwrite)

                        invoke Update first CopyToActorHasPersonalizationRel
                            invoked.Delta               = CopyFromList.Delta
                            invoked.Status              = CopyFromList.Status
                            invoked.LPLIndex 		    = CopyFromList.LPLIndex
                            invoked.ErrorText		    = CopyFromList.ErrorText
                        SendMessage = true
                else  

                    invoke Create UserList
                        invoked.Owner               = CopyToActor
                        invoked.Actor               = CopyToActor
                        invoked.BusinessView        = CopyFromList.BusinessView
                        invoked.BusinessList        = CopyFromList.BusinessList
                        invoked.Delta               = CopyFromList.Delta
                        invoked.Status              = CopyFromList.Status
                        invoked.UserEditorType      = CopyFromList.UserEditorType
                        invoked.Independent         = CopyFromList.Independent
                        invoked.LPLIndex 		    = CopyFromList.LPLIndex
                        invoked.ErrorText		    = CopyFromList.ErrorText
                    SendMessage = true

                if (SendMessage)

                    invoke CreateMessage UserNotification
                        invoked.ParamActor 			= CopyToActor
                        invoked.ParamPriority 		= 5
                        invoked.ParamDescription	= this instance(locale of Actor.IsoLocale).SharedPersonalizationNotificationDescription
                        invoked.ParamDetails		= this instance(locale of Actor.IsoLocale).SharedPersonalizationNotificationDetails

		OverridePersonalizations is a Set Action
			run in foreground
			Parameters
				Config is a UserList
					default label is "Configuration"

			Parameter Rules
				Config
					required
					constraint(Config.GlobalList)
						"OverridePersonalizationsActionIsOnlyValidForAConfiguration"

			Instance Selection
		   		where (BusinessView = Config.BusinessView
		   		and    BusinessList = Config.BusinessList
		   		and    IsActor
		   		and    not UserFolder entered)

		   	Action Rules
		   		Instance Rules
		   			invoke Update
		   				invoked.Delta = Config.Delta

                    if (ActorRel exists)
                        invoke CreateMessage UserNotification
                            invoked.ParamActor 			= Actor
                            invoked.ParamPriority 		= 5
                            invoked.ParamDescription	= this instance(locale of Actor.IsoLocale).OverrideNotificationDescription
                            invoked.ParamDetails		= this instance(locale of Actor.IsoLocale).OverrideNotificationDetails

		DeletePersonalizationsForActor is a Set Action
			Parameters
				ParamActor is an Actor
					default label is "Actor"
				ParamDeletedActor is like Actor
					default label is "DeletedActor"

			Parameter Rules
				ParamActor
					if (ParamActor entered)
						ParamDeletedActor = ParamActor
					else
					if (ParamDeletedActor not entered)
						required
							"MustEnterActorOrDeletedActor"

			Instance Selection
				where (Actor = ParamDeletedActor)

			Sort Order
				Actor
    			BusinessView
        		BusinessList

			Action Rules
				Instance Rules
					invoke Delete

		PurgePersonalizationsForActor is a Set Action
			Parameters
				ParamActor is an Actor
					default label is "Actor"
				ParamDeletedActor is like Actor
					default label is "DeletedActor"

			Parameter Rules
				ParamActor
					if (ParamActor entered)
						ParamDeletedActor = ParamActor
					else
					if (ParamDeletedActor not entered)
						required
							"MustEnterActorOrDeletedActor"

			Instance Selection
				include deleted records
				where (Actor = ParamDeletedActor)

			Sort Order
				Actor
    			BusinessView
        		BusinessList

			Action Rules
				Instance Rules
					invoke Purge

		ReassignOwner is an Instance Action
			Parameters
				PrmNewOwner is an Actor
					default label is "NewOwner"
			Parameter Rules
				PrmNewOwner
					required
						"MustEnterNewOwner"
			Action Rules
				Owner = PrmNewOwner


        CreateConfiguration is a Create Action
        	completion message is "ConfigurationCreated"
            Parameters
                BusinessView
                	default label is "BusinessClass"
                List is a BusinessList

			Parameter Rules
				BusinessView
					required
			    List
			        required

            Entrance Rules
                LocActor = blank
                LocBusinessView = BusinessView
                LocName = List
                constraint (!LocalDuplicateRel exists)
                    "ConfigurationExistsFor_'<LocName>'"

            Action Rules
                invoke Create this instance
                    invoked.BusinessView = BusinessView
                    invoked.BusinessList = List
                    invoked.Delta        = BusinessListRel.BaseLPL

        CreateNewList is a Create Action
            default label is "AddNewList"
        	completion message is "NewListCreated"
            Parameters
                BusinessView
                	default label is "BusinessClass"
                ListName is LPLName
                BasedOnList is a BusinessList

			Parameter Rules
				BusinessView
					required
			    ListName
			        required

            Entrance Rules
                LocActor = blank
                LocBusinessView = BusinessView
                LocName = ListName
                constraint (!LocalDuplicateRel exists)
                    "ListNameInUse_'<LocName>'"

                constraint (!LocalBusinessListRel exists)
                    "ListNameInUse_'<LocName>'"

            Action Rules
                invoke Create this instance
                    invoked.BusinessView = BusinessView
                    invoked.BusinessList = ListName
                    invoked.Independent  = true

                    if (BasedOnList entered)
                        invoked.LocBasedOnList = BasedOnList

                    invoked.Delta = this instance.NewInitialLPL

        CreatePersonalization is a Create Action
        	completion message is "PersonalizationCreated"
            Parameters
                BusinessView
                	default label is "BusinessClass"
                List is a BusinessList

			Parameter Rules
				BusinessView
					required
			    List
			        required

            Entrance Rules
                LocActor = actor
                LocBusinessView = BusinessView
                LocName = List
                constraint (!LocalDuplicateRel exists)
                    "PersonalizationExistsFor_'<LocName>'"

            Action Rules
                invoke Create this instance
                	invoked.Actor		 	= actor
                    invoked.BusinessView 	= BusinessView
                    invoked.BusinessList 	= List
					invoked.Delta 			= BusinessListRel.LPL

		TagItem is an Instance Action
			Parameters
				ParamConfigurationTag is a ConfigurationTag
					default label is "Tag"
			
			Entrance Rules
				if (Status.Inactive)
					confirmation required
						"UserListIsInactive,TagAnyway?"
							
				if (Status.Invalid)
					confirmation required
						"UserListIsInvalid,TagAnyway?"
							
			Action Rules
				invoke Create ConfigurationTagItem
					invoked.ConfigurationTag = ParamConfigurationTag
					invoked.ConfigurationTagItem.Reference = reference to this instance		  
					
		ConvertToInlineSearchForm is an Instance Action 
			valid when (CanConvertToIlineSearchForm)
			completion message is "<SearchFormConvertedMessage>"
			
			Exit Rules
				if (LocConvertedSF)
					invoke FireEvent
		



		SetReportInfoTrue is an Instance Action
    		valid when (Status.Active)
    		default label is "Set_'ReportInformationExists'_Field_to_'True'"
    		restricted
    		
    		Action Rules
    			HasReportInfo = HasReportInfo.True
    			
		SetReportInfoFalse is an Instance Action
    		valid when (Status.Active)
    		default label is "Set_'ReportInformationExists'_Field_to_'False'"
    		restricted
    		
    		Action Rules
    			HasReportInfo = HasReportInfo.False

		SetReportInfoNotComputed is an Instance Action
    		valid when (Status.Active)
    		default label is "Set_'ReportInformationExists'_Field_to_'NotComputed'"
    		restricted
    		
    		Action Rules
    			HasReportInfo = HasReportInfo.NotComputed
    	
    	SetAllReportInfoNotComputed is a Set Action
			run in foreground
			default label is "Set_'ReportInformationExists'_FieldOfAllActiveConfiguredLists_to_'NotComputed'"

			Instance Selection
		   		where (Status.Active)

		   	Action Rules
		   		Instance Rules
		   			invoke SetReportInfoNotComputed
 			
		
		
    Sets
    	ActorSet
    		Sort Order
    			Actor
    			BusinessView
        		BusinessList
        	Instance Selection
				where (IsActor)

		FolderSet
			Sort Order
    			UserFolder
    			BusinessView
        		BusinessList
        	Instance Selection
				where (IsFolder)

		FolderNameSet
			Sort Order
    			FolderName
    			BusinessView
        		BusinessList
        	Instance Selection
				where (NameOnlyFolder)

		AllActorSet
			duplicates
    		Sort Order
    			Actor
    			BusinessView
        		BusinessList

		GlobalListSet
			Sort Order
				BusinessView
				BusinessList
			Instance Selection
				where (GlobalList)

		ByViewListActor
			sql name is uldBYVLA
			Sort Order
				BusinessView
				BusinessList
				Actor
				UserFolder
				UserList

		ByListViewActor
			sql name is uldBYLVA
			Sort Order
				BusinessList
				BusinessView
				Actor
				UserFolder
				UserList

		IndependentConfigLists
			sql name is ulidtcf
			Sort Order
				BusinessView
				BusinessList
			Instance Selection
				where (Independent)

	Relations
		FoldersByName
			one-to-many relation to UserFolder
			Field Mapping uses FolderByName
				related.Name = FolderName

		DuplicateRel
    		one-to-many relation to UserList 
			Field Mapping uses ByViewListActor
				related.BusinessView = BusinessView
				related.BusinessList = BusinessList
				related.Actor 		 = Actor
			Instance Selection
				where (related.UserFolder not entered
				and    related.UserList != UserList)

		BusinessListRel
			one-to-one relation to BusinessList
			Field Mapping uses symbolic key
				related.BusinessView = BusinessView
				related.BusinessList = BusinessList

		OverriddenConfigurationRel
    		one-to-many relation to UserList
			Field Mapping uses ByViewListActor
                related.BusinessView = BusinessView
                related.BusinessList = BusinessList
	        Instance Selection
		        where (not related.GlobalList and not related.IsFolder)

        CopyToActorHasPersonalizationRel
            one-to-many relation to UserList
            Field Mapping uses ActorSet
                related.Actor           = LocTargetActor
                related.BusinessView    = BusinessView
                related.BusinessList    = BusinessList
            Instance Selection
                where (not related.GlobalList and not related.IsFolder)

        ConfigurationCheckRel
            one-to-many relation to UserList
            Field Mapping uses GlobalListSet
                related.BusinessView    = BusinessView
                related.BusinessList    = BusinessList

        ActorRel
            one-to-one relation to Actor
            Field Mapping uses symbolic key
                related.Actor = Actor

        UpdateStampActorRel
            one-to-one relation to Actor
            Field Mapping uses symbolic key
                related.Actor = update stamp.actor

        ConfigEntityRel
            one-to-one relation to ConfigEntity
            Field Mapping uses ByEntityType
                related.EntityType = 9
                related.BusinessView = BusinessView
                related.Name = BusinessList
                related.Actor = Actor

		LocalDuplicateRel
		    one-to-many relation to UserList
			Field Mapping uses AllActorSet
			    related.Actor = LocActor
			    related.BusinessView    = LocBusinessView
				related.BusinessList    = LocName

	        Instance Selection
		        where (not related.IsFolder)

		LocalBusinessListRel
            one-to-one relation to BusinessList
            Field Mapping uses symbolic key
			    related.BusinessView    = LocBusinessView
				related.BusinessList    = LocName

	Create Rules
		if (UserFolder entered and FolderName not entered)
			FolderName = UserFolder.Name
