ContractRebateThresholdQualifier is a BusinessClass
	owned by po
	prefix is CRthr
	sql name is CMRebateThresholdQual
	
	Ontology
		symbolic key is ContractRebateThresholdQualifier
		
	Patterns
	
	Persistent Fields
   		FirstOperator				is AlphaUpper size 2
    		States
    			GreaterThanOrEqual		value is "GE"
    				default label is "GreaterThanOrEqualTo"
    			GreaterThan				value is "GT"
    	LowerPercentOfAll			is a Percent
    	LowerAmount					is an InternationalAmount
    	LowerUnits					is Numeric size 10
   		SecondOperator				is AlphaUpper size 2
    		States
    			LessThanOrEqual   		value is "LE"
    				default label is "LessThanOrEqualTo"
     			LessThan				value is "LT"
    	UpperPercentOfAll			is a Percent
    	UpperAmount					is an InternationalAmount
    	UpperUnits					is Numeric size 10
    	PercentPaid					is a Percent
    	RebatePercentOfAmount		is an InternationalAmount		
    	RebateAmount				is an InternationalAmount		
    	RebateAmountPerUnit			is an InternationalAmount
    	
    Transient Fields
    	ThresholdQualifierArray
    	ArrayCount 							is Numeric size 3
    	QualifierFound						is Boolean
    	
    Derived Fields
    	ConvertedPercent1 is a ComputeField
    		type is Decimal size 5.2
   			(LowerPercentOfAll * 100)
   			
    	ConvertedPercent2 is a ComputeField
    		type is Decimal size 5.2
   			(UpperPercentOfAll * 100)
   			
		DerivedPercent1 is a StringField
			type is Alpha 8			
			ConvertedPercent1
			"%"
   			
		DerivedPercent2 is a StringField
			type is Alpha 8			
			ConvertedPercent2
			"%"
			
		DerivedAmount1 is a StringField
			type is Alpha 19			
			LowerAmount

		NumberOfAllThresholdQualifiers is a ComputeField
			type is Numeric 3
			(instance count of ContractRebateThresholdQualifierRel)
				
    	NextQualifier is a ComputeField
    		type is Numeric size 3
   			(ArrayCount + 1)
				
    	PreviousQualifier is a ComputeField
    		type is Numeric size 3
   			(ArrayCount - 1)
			
		DerivedLowerThresholdQualifierPercentAmountOrUnits is a DerivedField
			type is Decimal size 18.2
			if (LowerPercentOfAll entered)
				return (LowerPercentOfAll * 100)
			else
			if (LowerAmount entered)
				return LowerAmount
			else
			if (LowerUnits entered)
				return LowerUnits
			else
				return 0
				
		DerivedLowerThresholdQualifierPostSymbolPercentAmountOrUnits is a DerivedField
			type is Alpha size up to 1
			if (LowerPercentOfAll entered)
				return "%"
			else
			if (LowerAmount entered)
				return blank
			else
			if (LowerUnits entered)
				return blank
			else
				return blank
				
		DerivedLowerThresholdQualifierLabelPercentAmountOrUnits is a DerivedField
			type is Alpha size 7
			if (ContractRebate.first ContractRebateThresholdQualifier set.LowerPercentOfAll entered)
				return "Percent"
			else
			if (ContractRebate.first ContractRebateThresholdQualifier set.LowerAmount entered)
				return "Amount"
			else
			if (ContractRebate.first ContractRebateThresholdQualifier set.LowerUnits entered)
				return "Units"
			else
				return blank
				
		DerivedUpperThresholdQualifierPercentAmountOrUnits is a DerivedField
			type is Decimal size 18.2
			if (UpperPercentOfAll entered)
				return (UpperPercentOfAll * 100)
			else
			if (UpperAmount entered)
				return UpperAmount
			else
			if (UpperUnits entered)
				return UpperUnits
			else
				return 0
				
		DerivedUpperThresholdQualifierPostSymbolPercentAmountOrUnits is a DerivedField
			type is Alpha size up to 1
			if (UpperPercentOfAll entered)
				return "%"
			else
			if (UpperAmount entered)
				return blank
			else
			if (UpperUnits entered)
				return blank
			else
				return blank
				
		DerivedUpperThresholdQualifierLabelPercentAmountOrUnits is a DerivedField
			type is Alpha size 7
			if (ContractRebate.first ContractRebateThresholdQualifier set.UpperPercentOfAll entered)
				return "Percent"
			else
			if (ContractRebate.first ContractRebateThresholdQualifier set.UpperAmount entered)
				return "Amount"
			else
			if (ContractRebate.first ContractRebateThresholdQualifier set.UpperUnits entered)
				return "Units"
			else
				return blank
				
		DerivedRebatePaidPercentAmountOrAmountPerUnit is a DerivedField
			type is Decimal size 18.2
			if (PercentPaid entered)
				return (PercentPaid * 100)
			else
			if (RebateAmount entered)
				return RebateAmount
			else
			if (RebateAmountPerUnit entered)
				return RebateAmountPerUnit
			else
				return 0
				
		DerivedRebatePaidPostSymbolPercentAmountOrAmountPerUnit is a DerivedField
			type is Alpha size up to 5
			if (PercentPaid entered)
				return "%"
			else
			if (RebateAmount entered)
				return blank
			else
			if (RebateAmountPerUnit entered)
				return "/Unit"
			else
				return blank
				
		DerivedRebatePaidLabelPercentAmountOrAmountPerUnit is a DerivedField
			type is Alpha size 19
			if (ContractRebate.first ContractRebateThresholdQualifier set.PercentPaid entered)
				return "Rebate Percent"
			else
			if (ContractRebate.first ContractRebateThresholdQualifier set.RebateAmount entered)
				return "Rebate Amount"
			else
			if (ContractRebate.first ContractRebateThresholdQualifier set.RebateAmountPerUnit entered)
				return "Rebate Amount"
			else
				return blank
				
	Sets
		ByPercentPaid
			duplicates
			Sort Order
				PercentPaid
				ContractGroup
				Contract
				ContractRebate
				ContractRebateThresholdQualifier
				
		ByAmount
			duplicates
			Sort Order
				RebateAmount
				ContractGroup
				Contract
				ContractRebate
				ContractRebateThresholdQualifier
			
    Conditions
    	ThresholdPercentEntered
    		restricted
    		when (ThresholdByPercentRel exists)
    	ThresholdAmountEntered
    		restricted
    		when (ThresholdByAmountRel exists)
    	ThresholdUnitsEntered
    		restricted
    		when (ThresholdByUnitsRel exists)
    	ThresholdAmountNotEntered
    		restricted
    		when (!ThresholdByAmountRel exists)
    	ThresholdRebateAmountEntered
    		restricted
    		when (ThresholdAmountRebateRel exists)
    	ThresholdRebateAmountPerUnitEntered
    		restricted
    		when (ThresholdAmountPerUnitRebateRel exists)
    	EitherAmountPerUnitOrAmountOrPercentRequired
    		restricted
    		when (PercentPaid > 0
    		or   RebateAmount > 0
    		or   RebateAmountPerUnit > 0)
    	ThresholdRebatePercentEntered
    		restricted
    		when (ThresholdPercentRebateRel exists)
    	ThresholdRebatePercentNotEntered
    		restricted
    		when (!ThresholdPercentRebateRel exists)
    	AmountType
    		restricted
    		when (ContractRebate.first ContractRebateQualifierRel.SpendType.Amount)
    	UnitsType
    		restricted
    		when (ContractRebate.first ContractRebateQualifierRel.SpendType.Units)

    Relations
		ThresholdByPercentRel
			one-to-many relation to ContractRebateThresholdQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where ((related.LowerPercentOfAll > 0
				or      related.UpperPercentOfAll > 0)
				and    (related.ContractRebateThresholdQualifier != ContractRebateThresholdQualifier))
		ThresholdByAmountRel
			one-to-many relation to ContractRebateThresholdQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where ((related.LowerAmount > 0
				or      related.UpperAmount > 0)
				and    (related.ContractRebateThresholdQualifier != ContractRebateThresholdQualifier))
		ThresholdByUnitsRel
			one-to-many relation to ContractRebateThresholdQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where ((related.LowerUnits > 0
				or      related.UpperUnits > 0)
				and    (related.ContractRebateThresholdQualifier != ContractRebateThresholdQualifier))
		ThresholdAmountRebateRel
			one-to-many relation to ContractRebateThresholdQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where (related.RebateAmount > 0
				and    related.ContractRebateThresholdQualifier != ContractRebateThresholdQualifier)
		ThresholdPercentRebateRel
			one-to-many relation to ContractRebateThresholdQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where (related.PercentPaid > 0
				and    related.ContractRebateThresholdQualifier != ContractRebateThresholdQualifier)
		ThresholdAmountPerUnitRebateRel
			one-to-many relation to ContractRebateThresholdQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
            Instance Selection
				where (related.RebateAmountPerUnit > 0
				and    related.ContractRebateThresholdQualifier != ContractRebateThresholdQualifier)
		ThresholdQualifierIterationRel
			one-to-many relation to ContractRebateThresholdQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
		ContractRebateThresholdQualifierRel
			one-to-many relation to ContractRebateThresholdQualifier
			Field Mapping uses symbolic key
				related.ContractGroup					= ContractGroup
				related.Contract						= Contract
				related.ContractRebateType		    	= ContractRebateType
				related.ContractRebate					= blank
    
	Field Rules
		FirstOperator
			required
				"FirstOperatorIsRequired"
		LowerPercentOfAll
			if (LowerPercentOfAll entered)
				constraint (LowerAmount = 0)
					"CannotEnterBothPercentsAndAmounts"
				constraint (LowerUnits = 0)
					"CannotEnterBothPercentsAndAmounts"
				constraint (!ThresholdAmountEntered)
					"ThresholdQualifiersByAmountAlreadyExist;CannotMixBothPercentsAndAmounts"
				constraint (!ThresholdUnitsEntered)
					"ThresholdQualifiersByUnitsAlreadyExist;CannotMixBothPercentsAndAmounts"
				constraint (LowerAmount = 0 and UpperAmount = 0)
					"CannotEnterBothPercentsAndAmountsOnThresholdQualifiers"
				constraint (LowerUnits = 0 and UpperUnits = 0)
					"CannotEnterBothPercentsAndUnitsOnThresholdQualifiers"
		LowerAmount
			if (LowerAmount entered)
				constraint (LowerPercentOfAll = 0)
					"CannotEnterBothAmountAndPercent"
				constraint (LowerUnits = 0)
					"CannotEnterBothAmountAndUnits"
				constraint (!ThresholdPercentEntered)
					"ThresholdQualifiersByPercentAlreadyExist;CannotMixBothAmountsAndPercents"
				constraint (!ThresholdUnitsEntered)
					"ThresholdQualifiersByUnitsAlreadyExist;CannotMixBothAmountAndUnits"
				constraint (LowerPercentOfAll = 0 and UpperPercentOfAll = 0)
					"CannotEnterBothAmountsAndPercentsOnThresholdQualifiers"
				constraint (LowerUnits = 0 and UpperUnits = 0)
					"CannotEnterBothAmountAndAmountInUntsOnThresholdQualifiers"
		LowerUnits
			if (LowerUnits entered)
				constraint (LowerPercentOfAll = 0)
					"CannotEnterBothAmountAndPercent"
				constraint (LowerAmount = 0)
					"CannotEnterBothAmountAndUnits"
				constraint (!ThresholdPercentEntered)
					"ThresholdQualifiersByPercentAlreadyExist;CannotMixBothAmountsAndPercents"
				constraint (!ThresholdAmountEntered)
					"ThresholdQualifiersByAmountAlreadyExist;CannotMixBothAmountAndUnits"
				constraint (LowerPercentOfAll = 0 and UpperPercentOfAll = 0)
					"CannotEnterBothAmountsAndPercentsOnThresholdQualifiers"
				constraint (LowerAmount = 0 and UpperAmount = 0)
					"CannotEnterBothAmountAndAmountInUntsOnThresholdQualifiers"
		SecondOperator
			if (SecondOperator entered)
				constraint (UpperPercentOfAll > 0 or UpperAmount > 0 or UpperUnits > 0)
					"ToPercentOrToAmountIsRequired"
			if (UpperPercentOfAll entered)
				required
					"SecondOperatorIsRequiredWhenEnteringToPercent"
			if (UpperAmount entered)
				required
					"SecondOperatorIsRequiredWhenEnteringToAmount"
			if (UpperUnits entered)
				required
					"SecondOperatorIsRequiredWhenEnteringToUnits"
		UpperPercentOfAll
			if (UpperPercentOfAll entered)
				constraint (!ThresholdAmountEntered)
					"ThresholdQualifiersByAmountAlreadyExist;CannotMixBothPercentsAndAmounts"
				constraint (LowerAmount = 0 and UpperAmount = 0)
					"CannotEnterBothPercentsAndAmountsOnThresholdQualifiers"
				constraint (!ThresholdUnitsEntered)
					"ThresholdQualifiersByUnitsAlreadyExist;CannotMixBothPercentsAndAmounts"
				constraint (LowerUnits = 0 and UpperUnits = 0)
					"CannotEnterBothPercentsAndAmountsOnThresholdQualifiers"
			if (SecondOperator entered)
				if (!UpperAmount entered)
					if (!UpperUnits entered)
						if (ThresholdPercentEntered)
							required
								"ToPercentIsRequired"
			if (LowerPercentOfAll > 0
			and UpperPercentOfAll entered)
				constraint (UpperPercentOfAll > LowerPercentOfAll)
					"ToPercentMustBeGreaterThanFromPercent"
		UpperAmount
			if (UpperAmount entered)
				constraint (LowerPercentOfAll = 0 and UpperPercentOfAll = 0)
					"CannotMixBothAmountsAndPercentsOnThresholdQualifiers"
				constraint (!ThresholdPercentEntered)
					"ThresholdQualifiersByPercentAlreadyExist;CannotMixBothAmountsAndPercents"
				constraint (!ThresholdUnitsEntered)
					"ThresholdQualifiersByUnitsAlreadyExist;CannotMixBothAmountAndUnits"
				constraint (LowerUnits = 0 and UpperUnits = 0)
					"CannotEnterBothAmountAndUnitsOnThresholdQualifiers"
			if (SecondOperator entered)
				if (!UpperPercentOfAll entered)
					if (!UpperUnits entered)
						if (ThresholdAmountEntered)
							required
								"ToAmountIsRequired"
			if (LowerAmount > 0
			and UpperAmount entered)
				constraint (UpperAmount > LowerAmount)
					"ToAmountMustBeGreaterThanFromAmount"
		UpperUnits
			if (UpperUnits entered)
				constraint (LowerPercentOfAll = 0 and UpperPercentOfAll = 0)
					"CannotMixBothAmountsAndPercentsOnThresholdQualifiers"
				constraint (!ThresholdPercentEntered)
					"ThresholdQualifiersByPercentAlreadyExist;CannotMixBothAmountsAndPercents"
				constraint (!ThresholdAmountEntered)
					"ThresholdQualifiersByAmountAlreadyExist;CannotMixBothAmountAndUnits"
				constraint (LowerAmount = 0 and UpperAmount = 0)
					"CannotEnterBothAmountAndAmountInUntsOnThresholdQualifiers"
			if (SecondOperator entered)
				if (!UpperPercentOfAll entered)
					if (!UpperAmount entered)
						if (ThresholdUnitsEntered)
							required
								"ToUnitsIsRequired"
			if (LowerUnits > 0
			and UpperUnits entered)
				constraint (UpperUnits > LowerUnits)
					"ToUnitsMustBeGreaterThanFromUnits"
		PercentPaid
			if (PercentPaid > 0)
				constraint (RebateAmount = 0)
					"CannotEnterBothRebatePercentAndRebateAmountForThresholdQualifier"
				constraint (RebateAmountPerUnit = 0)
					"CannotEnterBothRebatePercentAndRebateAmountPerUnitForThresholdQualifier"
			constraint (!ThresholdRebateAmountEntered)
				"ThresholdQualifiersForRebateAmountAlreadyExist;CannotMixBothRebatePercentsAndRebateAmounts"
			constraint (!ThresholdRebateAmountPerUnitEntered)
				"ThresholdQualifiersForRebateAmountPerUnitAlreadyExist;CannotMixBothRebatePercentsAndRebateAmountsPerUnit"
		RebateAmount
			if (RebateAmount > 0)
				constraint (!ContractRebate.CalculateRebateAmountOnAllSpendForQualifyingContracts)
					"CannotUse_Rebate_AmountWith_'Entire_Contract_Calculation_Basis'_rebateOption"
				constraint (PercentPaid = 0)
					"CannotEnterBothRebateAmountAndRebatePercentForThresholdQualifier"
				constraint (RebateAmountPerUnit = 0)
					"CannotEnterBothRebateAmountAndRebateAmountPerUnitForThresholdQualifier"
			constraint (!ThresholdRebatePercentEntered)
				"ThresholdQualifiersForRebatePercentAlreadyExist;CannotMixBothRebateAmountsAndRebatePercents"
			constraint (!ThresholdRebateAmountPerUnitEntered)
				"ThresholdQualifiersForRebateAmountPerUnitAlreadyExist;CannotMixBothRebateAmountsAndRebateAmountsPerUnit"
		RebateAmountPerUnit
			if (RebateAmountPerUnit > 0)
				constraint (!ContractRebate.CalculateRebateAmountOnAllSpendForQualifyingContracts)
					"CannotUse_Rebate_Amount_Per_UnitWith_'Entire_Contract_Calculation_Basis'_rebateOption"
				constraint (LowerUnits > 0)
					"CannotEnterRebateAmountPerUnitUnlessThisThresholdQualifierIsUnitBased"
				constraint (PercentPaid = 0)
					"CannotEnterBothRebateAmountPerUnitAndRebatePercentForThresholdQualifier"
				constraint (RebateAmount = 0)
					"CannotEnterBothRebateAmountPerUnitAndRebateAmountForThresholdQualifier"
			constraint (!ThresholdRebatePercentEntered)
				"ThresholdQualifiersForRebatePercentAlreadyExist;CannotMixBothRebateAmountsPerUnitAndRebatePercents"
			constraint (!ThresholdRebateAmountEntered)
				"ThresholdQualifiersForRebateAmountAlreadyExist;CannotMixBothRebateAmountsPerUnitAndRebateAmounts"
			               
	Actions
		Create is a Create Action
    		valid when (Contract.CanAmend)
			Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToAddThresholdRebateQualifier"   	
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToAddRebateThresholdQualifiers"
				constraint (EitherAmountPerUnitOrAmountOrPercentRequired)
					"RebatePercent,RebateAmountOrRebateAmountPerUnitIsRequired"
				if (PercentPaid > 0)
					constraint (PercentPaid > last ThresholdQualifierIterationRel.PercentPaid)
						"RebatePercentMustGrowFromOneThresholdQualifierToTheNext"
				else
				if (RebateAmount > 0)
					constraint (RebateAmount > last ThresholdQualifierIterationRel.RebateAmount)
						"RebateAmountMustGrowFromOneThresholdQualifierToTheNext"
						
				if (LowerPercentOfAll > 0)
					if (last ThresholdQualifierIterationRel.SecondOperator.LessThan)
						constraint (LowerPercentOfAll not < last ThresholdQualifierIterationRel.UpperPercentOfAll)
							"From_PercentMustBeGreaterThanOrEqualToThe_To_PercentOnThresholdQualifier<last ThresholdQualifierIterationRel.ContractRebateThresholdQualifier>"
					else
					if (last ThresholdQualifierIterationRel.SecondOperator.LessThanOrEqual)
						if (FirstOperator.GreaterThan)
							constraint (LowerPercentOfAll >= last ThresholdQualifierIterationRel.UpperPercentOfAll)
								"From_PercentMustBeGreaterThanThe_To_PercentOnThresholdQualifier<last ThresholdQualifierIterationRel.ContractRebateThresholdQualifier>"
						else
						if (FirstOperator.GreaterThanOrEqual)
							constraint (LowerPercentOfAll > last ThresholdQualifierIterationRel.UpperPercentOfAll)
								"From_PercentMustBeGreaterThanThe_To_PercentOnThresholdQualifier<last ThresholdQualifierIterationRel.ContractRebateThresholdQualifier>"
				else
				if (LowerAmount > 0)
					if (last ThresholdQualifierIterationRel.SecondOperator.LessThan)
						constraint (LowerAmount not < last ThresholdQualifierIterationRel.UpperAmount)
							"From_AmountMustBeGreaterThanOrEqualToThe_To_AmountOnThresholdQualifier<last ThresholdQualifierIterationRel.ContractRebateThresholdQualifier>"
					else
					if (last ThresholdQualifierIterationRel.SecondOperator.LessThanOrEqual)
						if (FirstOperator.GreaterThan)
							constraint (LowerAmount >= last ThresholdQualifierIterationRel.UpperAmount)
								"From_AmountMustBeGreaterThanThe_T_oAmountOnThresholdQualifier<last ThresholdQualifierIterationRel.ContractRebateThresholdQualifier>"
						else
						if (FirstOperator.GreaterThanOrEqual)
							constraint (LowerAmount > last ThresholdQualifierIterationRel.UpperAmount)
								"From_AmountMustBeGreaterThanThe_To_AmountOnThresholdQualifier<last ThresholdQualifierIterationRel.ContractRebateThresholdQualifier>"
				else
				if (LowerUnits > 0)
					if (last ThresholdQualifierIterationRel.SecondOperator.LessThan)
						constraint (LowerUnits not < last ThresholdQualifierIterationRel.UpperUnits)
							"From_UnitsMustBeGreaterThanOrEqualToThe_To_UnitsOnThresholdQualifier<last ThresholdQualifierIterationRel.ContractRebateThresholdQualifier>"
					else
					if (last ThresholdQualifierIterationRel.SecondOperator.LessThanOrEqual)
						if (FirstOperator.GreaterThan)
							constraint (LowerUnits >= last ThresholdQualifierIterationRel.UpperUnits)
								"From_UnitsMustBeGreaterThanThe_To_UnitsOnThresholdQualifier<last ThresholdQualifierIterationRel.ContractRebateThresholdQualifier>"
						else
						if (FirstOperator.GreaterThanOrEqual)
							constraint (LowerUnits > last ThresholdQualifierIterationRel.UpperUnits)
								"From_UnitsMustBeGreaterThanThe_To_UnitsOnThresholdQualifier<last ThresholdQualifierIterationRel.ContractRebateThresholdQualifier>"
        			
    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate

		Update is an Update Action
    		valid when (Contract.CanAmend)
			Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToModifyThresholdRebateQualifier"
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToModifyRebateThresholdQualifiers"
				constraint (EitherAmountPerUnitOrAmountOrPercentRequired)
					"RebatePercent,RebateAmountOrRebateAmountPerUnitIsRequired"
				invoke BuildThresholdArray
				invoke PositionWithinThresholdArray
				invoke EditThresholdArray

    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate
		
		Delete is a Delete Action
    		valid when (Contract.CanAmend)
			Action Rules
    			constraint (Contract.CanAmend)
    				"ContractMustBeInDraftOrAddendumOrAmendmentStatusToDeleteThresholdRebateQualifier"
    			constraint (ContractRebate.Active)
    				"ContractRebateMustBeActiveToDeleteRebateThresholdQualifiers"
    				
    		Exit Rules
    			invoke SetQualifierChangedFlagToYes ContractRebate

    	BuildThresholdArray is an Instance Action
    		restricted
    		Action Rules
    			initialize ThresholdQualifierArray
    			initialize ArrayCount
    			for each ContractRebateThresholdQualifierRel
    				ArrayCount += 1
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].QualifierSeq 			= each.ContractRebateThresholdQualifier
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].FirstOperator   			= each.FirstOperator
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].LowerPercentOfAll    	= each.LowerPercentOfAll
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].LowerAmount 	   			= each.LowerAmount
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].LowerUnits   			= each.LowerUnits
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].SecondOperator  			= each.SecondOperator
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].UpperPercentOfAll   		= each.UpperPercentOfAll
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].UpperAmount    			= each.UpperAmount
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].UpperUnits				= each.UpperUnits
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].PercentPaid 		   		= each.PercentPaid
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].RebatePercentOfAmount 	= each.RebatePercentOfAmount
    				ThresholdQualifierArray.ThresholdQualifier[ArrayCount].RebateAmount 		   	= each.RebateAmount

    	PositionWithinThresholdArray is an Instance Action
    		restricted
    		Action Rules
				initialize ArrayCount
				QualifierFound = false
     			while (!QualifierFound and ArrayCount < NumberOfAllThresholdQualifiers)
     				for each ThresholdQualifierArray.ThresholdQualifier
    					ArrayCount += 1
     					if (each.QualifierSeq = ContractRebateThresholdQualifier)
							QualifierFound = true
							end for each

    	EditThresholdArray is an Instance Action
    		restricted
    		Action Rules
				if (QualifierFound)
					if (ArrayCount > 1)	
						if (PercentPaid > 0)
							constraint (PercentPaid > ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].PercentPaid)
								"RebatePercentMustGrowFromOneThresholdQualifierToTheNext"
						else
						if (RebateAmount > 0)
							constraint (RebateAmount > ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].RebateAmount)
								"RebateAmountMustGrowFromOneThresholdQualifierToTheNext"
								
						if (LowerPercentOfAll > 0)
							if (ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].SecondOperator.LessThan)
								constraint (LowerPercentOfAll not < ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].UpperPercentOfAll)
									"FromPercentMustBeGreaterThanOrEqualToTheToPercentOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].QualifierSeq>"
							else
							if (ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].SecondOperator.LessThanOrEqual)
								if (FirstOperator.GreaterThan)
									constraint (LowerPercentOfAll >= ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].UpperPercentOfAll)
										"FromPercentMustBeGreaterThanTheToPercentOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].QualifierSeq>"
								else
								if (FirstOperator.GreaterThanOrEqual)
									constraint (LowerPercentOfAll > last ThresholdQualifierIterationRel.UpperPercentOfAll)
										"FromPercentMustBeGreaterThanTheToPercentOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].QualifierSeq>"
						else
						if (LowerAmount > 0)
							if (ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].SecondOperator.LessThan)
								constraint (LowerAmount not < ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].UpperAmount)
									"FromAmountMustBeGreaterThanOrEqualToTheToAmountOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].QualifierSeq>"
							else
							if (ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].SecondOperator.LessThanOrEqual)
								if (FirstOperator.GreaterThan)
									constraint (LowerAmount >= ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].UpperAmount)
										"FromAmountMustBeGreaterThanTheToAmountOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].QualifierSeq>"
								else
								if (FirstOperator.GreaterThanOrEqual)
									constraint (LowerAmount > ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].UpperAmount)
										"FromAmountMustBeGreaterThanTheToAmountOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].QualifierSeq>"
						else
						if (LowerUnits > 0)
							if (ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].SecondOperator.LessThan)
								constraint (LowerUnits not < ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].UpperUnits)
									"FromUnitsMustBeGreaterThanOrEqualToTheToUnitsOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].QualifierSeq>"
							else
							if (ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].SecondOperator.LessThanOrEqual)
								if (FirstOperator.GreaterThan)
									constraint (LowerUnits >= ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].UpperUnits)
										"FromUnitsMustBeGreaterThanTheToUnitsOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].QualifierSeq>"
								else
								if (FirstOperator.GreaterThanOrEqual)
									constraint (LowerUnits > ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].UpperUnits)
										"FromUnitsMustBeGreaterThanTheToUnitsOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[PreviousQualifier].QualifierSeq>"
										
					if (ArrayCount < NumberOfAllThresholdQualifiers)
						if (PercentPaid > 0)
							constraint (PercentPaid < ThresholdQualifierArray.ThresholdQualifier[NextQualifier].PercentPaid)
								"RebatePercentMustGrowFromOneThresholdQualifierToTheNext"
						else
						if (RebateAmount > 0)
							constraint (RebateAmount < ThresholdQualifierArray.ThresholdQualifier[NextQualifier].RebateAmount)
								"RebateAmountMustGrowFromOneThresholdQualifierToTheNext"
								
						if (UpperPercentOfAll > 0)
							if (ThresholdQualifierArray.ThresholdQualifier[NextQualifier].FirstOperator.GreaterThan)
								constraint (UpperPercentOfAll not > ThresholdQualifierArray.ThresholdQualifier[NextQualifier].LowerPercentOfAll)
									"ToPercentMustBeLessThanOrEqualToTheFromPercentOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[NextQualifier].QualifierSeq>"
							else
							if (ThresholdQualifierArray.ThresholdQualifier[NextQualifier].FirstOperator.GreaterThanOrEqual)
								if (SecondOperator.LessThanOrEqual)
									constraint (UpperPercentOfAll < ThresholdQualifierArray.ThresholdQualifier[NextQualifier].LowerPercentOfAll)
										"ToPercentMustBeLessThanTheFromPercentOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[NextQualifier].QualifierSeq>"
								else
								if (SecondOperator.LessThan)
									constraint (UpperPercentOfAll not > ThresholdQualifierArray.ThresholdQualifier[NextQualifier].LowerPercentOfAll)
										"ToPercentMustBeLessThanOrEqualToTheFromPercentOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[NextQualifier].QualifierSeq>"
						else
						if (UpperAmount > 0)
							if (ThresholdQualifierArray.ThresholdQualifier[NextQualifier].FirstOperator.GreaterThan)
								constraint (UpperAmount not > ThresholdQualifierArray.ThresholdQualifier[NextQualifier].LowerAmount)
									"ToAmountMustBeLessThanOrEqualToTheFromAmountOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[NextQualifier].QualifierSeq>"
							else
							if (ThresholdQualifierArray.ThresholdQualifier[NextQualifier].FirstOperator.GreaterThanOrEqual)
								if (SecondOperator.LessThanOrEqual)
									constraint (UpperAmount < ThresholdQualifierArray.ThresholdQualifier[NextQualifier].LowerAmount)
										"ToAmountMustBeLessThanTheFromAmountOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[NextQualifier].QualifierSeq>"
								else
								if (SecondOperator.LessThan)
									constraint (UpperAmount not > ThresholdQualifierArray.ThresholdQualifier[NextQualifier].LowerAmount)
										"ToAmountMustBeLessThanOrEqualToTheFromAmountOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[NextQualifier].QualifierSeq>"
						else
						if (UpperUnits > 0)
							if (ThresholdQualifierArray.ThresholdQualifier[NextQualifier].FirstOperator.GreaterThan)
								constraint (UpperUnits not > ThresholdQualifierArray.ThresholdQualifier[NextQualifier].LowerUnits)
									"ToUnitsMustBeLessThanOrEqualToTheFromUnitsOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[NextQualifier].QualifierSeq>"
							else
							if (ThresholdQualifierArray.ThresholdQualifier[NextQualifier].FirstOperator.GreaterThanOrEqual)
								if (SecondOperator.LessThanOrEqual)
									constraint (UpperUnits < ThresholdQualifierArray.ThresholdQualifier[NextQualifier].LowerUnits)
										"ToUnitsMustBeLessThanTheFromUnitsOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[NextQualifier].QualifierSeq>"
								else
								if (SecondOperator.LessThan)
									constraint (UpperUnits not > ThresholdQualifierArray.ThresholdQualifier[NextQualifier].LowerUnits)
										"ToUnitsMustBeLessThanOrEqualToTheFromUnitsOnThresholdQualifier<ThresholdQualifierArray.ThresholdQualifier[NextQualifier].QualifierSeq>"
	
