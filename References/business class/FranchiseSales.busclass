FranchiseSales is a BusinessClass
	owned by fr
	prefix is FRL
	classic name is FRSALES



	Ontology
		symbolic key is FranchiseSales
			classic set name is FRLSET1
			classic name for FranchiseSales.AdjustmentNumber is ADJ-NBR
			classic name for CustomerShipTo is SHIP-TO
			classic name for FranchiseContract is CONTR-NBR

	Patterns
		implements InlineUserFields
			size is 1000	   
		implements StaticJava
		disable AuditIndex

	Persistent Fields

		FiscalYear			is a Year
		FiscalMonth			is Numeric size 2
		CycleNumber			is Numeric size 2
			classic name is CYCLE-NBR
		Status				is Numeric size 1
			States
				Unreleased	value is 0
				Released	value is 1
				Invoiced	value is 2
				Closed		value is 9
		ClosingSales		is an InternationalAmount
			classic name is REGISTER-CLOSE
		CalculatedTax		is an InternationalAmount
		SalesTax			is an InternationalAmount
		Adjustments			is an InternationalAmount
		NetSales			is an InternationalAmount
		TotalClosingSales	is an InternationalAmount
			classic name is TTL-REG-CLOSE
		TotalSalesTax		is an InternationalAmount
			classic name is TTL-SALES-TAX
		TotalAdjustment		is an InternationalAmount
			classic name is TTL-ADJUSTMENT
		TotalNetSales		is an InternationalAmount
			classic name is TTL-NET-SALES
		TotalCharges		is an InternationalAmount
			classic name is TTL-CHARGES
		TotalDue			is an InternationalAmount
			classic name is TTL-DUE
		TotalVariance		is an InternationalAmount
			classic name is TTL-VARIANCE
		InvoicePrefix
			classic name is INVC-PREFIX
		InvoiceNumber
			classic name is INVC-NUMBER
		EnterChargeFlag		is AlphaUpper size 1
			classic name is ENTER-CHG-FL
			States
				Yes		value is "Y"
				No		value is "N"
		ProcessLevel		is a BillingProcessLevel
		PostDate			is Date


	Local Fields
		LocalLastLineTotalAmount			is an InternationalAmount
		LocalSubmittedAmount				is an InternationalAmount
		LocalFranchiseContractCharge		is like FranchiseContractCharge
		LocalSalesType						is a SalesType
		LocalCounter						is Numeric size 2
		LocalTotalCharges					is like InternationalAmount
		LocalTotalDue						is like InternationalAmount
		LocalTotalVariance					is like InternationalAmount
		ValidateCycleDate		
		LocalCycleEditAction				is Alpha 1
			States	
				Add					value is "A"
				Change				value is "C"
				Release				value is "R"
				Delete				value is "D"
		FranchiseCycleChargeAmounts
		LocalCycleCharge					is like FranchiseCycleCharge


		LocalCalculatedAmount				is an InternationalAmount
		LocalBeginningNoteBalance			is an InternationalAmount
		LocalEndingNoteBalance				is an InternationalAmount
		LocalPrincipal						is an InternationalAmount
		LocalInterest						is an InternationalAmount 
		LocalCycleChargeCounter				is Numeric 3
		AddStepLayersCounter				is Numeric 3

		LocalMaxAmount						is an InternationalAmount
		LocalAmount							is an InternationalAmount
		LocalHoldSalesType					is Alpha 1
		LocalFranchiseSalesFlag				is Boolean
		LocalDateCount						is Numeric 3
		LocalPaymentFlag					is Boolean
		CalculateTax
		CurrencyExchange
		LocalFromCurrency					is a FromCurrency
		LocalCalculatedSalesTax				is an InternationalAmount
		LocalCalculateTaxExecuted			is Alpha 1
		LocalContractChargePaymentAmount	is an InternationalAmount
		LocalDateFlag						is Boolean
		I1									is Numeric size 2
		LocalNetSales						is an InternationalAmount
		LocalFrequency						is AlphaUpper size 1
		LocalSales							is an InternationalAmount
		LocalTaxRate						is Percent size 7.5
		LocalDateCounter					is Numeric size 2
		LocalFranchiseCalendarDate			is Date
		LocalPreviousFranchiseSalesDate		is Date
		LocalChargeEffectiveDates			is Boolean
		LocalCurrentYearDate				is Boolean
		LocalChargeCalendarDate				is Boolean
		LocalNotSkippedPeriodDate			is Boolean
		LocalSalesCalendarDate				is Boolean


	Transient Fields	
		TransientAdjustmentNumber				is an AdjustmentNumber
			derive value from first BySalesAdjustmentDescendingRel.FranchiseSales.AdjustmentNumber	


	Conditions
		IsInterfaced
			restricted
			when (FranchiseSales.SalesType.Actualinvoice
			and   InvoiceNumber entered
			and   InvoicePrefix entered)

		RelatedFranchiseSalesExists
			restricted
			when (FranchiseSalesRel exists)

		IsAdjustment
			restricted
			when (FranchiseSales.AdjustmentNumber > 1)	

		IsClosed
			restricted
			when (Status.Closed)

		IsUnreleased
			restricted
			when (Status.Unreleased)

		IsDeleteEdit
			restricted
			when (Status <  9)

		IsInvcCreation
			restricted
			when (FranchiseSales.SalesType.Actualinvoice
			and   Status.Released)

		IsNoEstimates
			restricted
			when (not FranchiseSales.SalesType.Estimatedinvoice
			and   Status >  blank)

		IsNoteBalance
			restricted
			when (Status.Released)

		IsOpenEst
			restricted
			when (not FranchiseSales.SalesType.Actualinvoice
			and   Status.Released)

		IsOpenEstimate
			restricted
			when (not FranchiseSales.SalesType.Actualinvoice
			and   Status.Released)

		IsOpenEstimatedAndCallInSales
			restricted
			when ((FranchiseSales.SalesType.Callinestimate
			or FranchiseSales.SalesType.Estimatedinvoice)
			and  Status.Released)


		IsReleaseActual
			restricted
			when (Status <  2)

		IsSalesOnly
			restricted
			when (FranchiseSales.SalesType.Aggregatesales)

		IsSalesRepRpt
			restricted
			when (Status.Released)

		IsVarianceRpt
			restricted
			when (FranchiseSales.SalesType.Actualinvoice
			and   Status <  2)




		IsValidCYChargeCalendarDate
			restricted
			when (ValidateCycleDate.LocalIsCurrentYearTransaction) 

		IsReleasedCallIn
			restricted
			when (FranchiseSales.SalesType.Callinestimate and Status.Released)

		ActualInvoiceExists
			restricted
			when (ActualInvoiceFranchiseSalesRel exists)

		UnreleasedCallInEstimateExists
			restricted
			when (UnreleasedCallInEstimateRel exists)

		IsTaxable
			restricted	
			when (FranchiseContract.TaxableFlag.Taxable)	

		HasFranchiseSalesBudget
			restricted
			when ((FranchiseSales.SalesType.Actualinvoice
			or FranchiseSales.SalesType.Callinestimate) 
			and Status.Released
			and CustomerSalesBudgetRel exists
			and FranchiseSales.AdjustmentNumber = DerivedLastRelesedAdjustmentNumber)	

		IsStepLimitEntered
			restricted
			when (any FranchiseContractChargeRel.StepsExist)

		RecordExists
			restricted
			when (FranchiseSales exists)


	Derived Fields
		DerivedInvoice is a StringField
			type is Alpha 13
			InvoicePrefix
			" "
			InvoiceNumber


		SkippedPeriodDateCheck is a DerivedField		
			type is Boolean
			restricted
			initialize LocalFranchiseCalendarDate
			initialize LocalCounter
			initialize LocalFrequency
			for each FranchiseContractChargesRel
				LocalCounter = 1
				LocalFrequency = each.Frequency		
				while (LocalCounter <= 53)
					if (FranchiseSales.Date <= VerifyFranchiseCalendarDateRel.Dates.Date[LocalCounter])
						LocalFranchiseCalendarDate = VerifyFranchiseCalendarDateRel.Dates.Date[LocalCounter]
						LocalDateCounter = LocalCounter
						LocalCounter = 54
					else
						LocalCounter += 1

				LocalNotSkippedPeriodDate = true
				if (LocalDateCounter > 1
				and LocalFranchiseCalendarDate > each.BeginDate
				and LocalFranchiseCalendarDate > each.NextCycleDate)
					LocalPreviousFranchiseSalesDate = VerifyFranchiseCalendarDateRel.Dates.Date[LocalDateCounter - 1]
					if (!LastCycleDateFranchiseSalesRel exists)
						LocalNotSkippedPeriodDate = false
						end for each

			return LocalNotSkippedPeriodDate

		ChargeEffectiveDates is a DerivedField		
			type is Boolean
			restricted
			initialize LocalFranchiseCalendarDate
			initialize LocalCounter
			initialize LocalFrequency
			for each FranchiseContractChargesRel
				LocalCounter = 1
				LocalFrequency = each.Frequency
				while (LocalCounter <= 53)
					if (VerifyFranchiseCalendarDateRel.Dates.Date[LocalCounter] entered)
						if (VerifyFranchiseCalendarDateRel.Dates.Date[LocalCounter] = FranchiseSales.Date)
							LocalFranchiseCalendarDate = VerifyFranchiseCalendarDateRel.Dates.Date[LocalCounter]
							LocalCounter = 54
						else 
							LocalCounter += 1
						
						if (LocalFranchiseCalendarDate >= each.BeginDate
						and LocalFranchiseCalendarDate <= each.EndDate)
							LocalChargeEffectiveDates = true
							end for each 
					else
						LocalCounter = 54

			return LocalChargeEffectiveDates

		ChargeCalendarPeriodDate is a DerivedField		
			type is Boolean
			restricted
			initialize LocalCounter
			initialize LocalFrequency
			for each FranchiseContractChargesRel
				LocalCounter = 1
				LocalFrequency = each.Frequency
				while (LocalCounter <= 53)
					if (VerifyFranchiseCalendarDateRel.Dates.Date[LocalCounter] entered)	
						if (VerifyFranchiseCalendarDateRel.Dates.Date[LocalCounter] = FranchiseSales.Date)
							LocalCounter	= 54
							LocalChargeCalendarDate = true
							end for each
						else 
							LocalCounter += 1
					else
						LocalCounter = 54

			return LocalChargeCalendarDate	

		CurrentYearPeriodDate is a DerivedField		
			type is Boolean
			restricted
			initialize LocalCounter
			for each FranchiseCalendarDateRel
				LocalCounter = 1
				while (LocalCounter <= 53)
					if (each.Dates.Date[LocalCounter] entered)
						if (each.Dates.Date[LocalCounter] = FranchiseSales.Date)
							LocalCounter = 54
							LocalCurrentYearDate = true
							end for each
						else 
							LocalCounter += 1
					else
						LocalCounter = 54
			
			return LocalCurrentYearDate	

		CurrentYearPeriodDate1 is a DerivedField
			type is Boolean
			restricted
			if (FranchiseSales.SalesType.Aggregatesales)		  
				if (FranchiseContractChargeRel.Frequency = "W"
				or FranchiseContractChargeRel.Frequency = "M")
					LocalFrequency = "W"						
				else
				if (FranchiseContractChargeRel.Frequency = "Y")
					LocalFrequency = "Q" 
				else
				if (FranchiseContractChargeRel.Frequency = "Q")
					LocalFrequency = "M"	 
				else
					LocalFrequency = FranchiseContractChargeRel.Frequency   
			else
				LocalFrequency = FranchiseContractChargeRel.Frequency
			
			if (any FranchiseWeeklyCalendarDatesRel.Dates.Date = FranchiseSales.Date)
				return true
			else
				return false	


		CurrentYearSalesCalPeriodDate is a DerivedField
			type is Boolean
			restricted
			initialize LocalCounter
			for each FranchiseSalesCalendarRel
				LocalCounter = 1
				while (LocalCounter <= 53)
					if (each.Dates.Date[LocalCounter] = FranchiseSales.Date)
						LocalSalesCalendarDate = true
						end for each
					else
						LocalCounter += 1

			return LocalSalesCalendarDate


		DerivedCycleCharges is a DerivedField
			type is like InternationalAmount
			restricted
			FranchiseCycleChargeAmounts.EditFranchiseCompany	= Company
			FranchiseCycleChargeAmounts.EditShipTo				= CustomerShipTo
			FranchiseCycleChargeAmounts.EditFranchiseCustomer	= Customer
			FranchiseCycleChargeAmounts.EditFranchiseContract	= FranchiseContract
			FranchiseCycleChargeAmounts.EditSalesType			= FranchiseSales.SalesType
			FranchiseCycleChargeAmounts.EditDate				= FranchiseSales.Date
			FranchiseCycleChargeAmounts.EditAdjustmentNumber	= FranchiseSales.AdjustmentNumber

			FranchiseCycleChargeAmounts.EditEnterChargeFlag		= EnterChargeFlag
			FranchiseCycleChargeAmounts.EditNetSales			= NetSales
			if (LocalCycleEditAction = "A" or LocalCycleEditAction = "A")
				FranchiseCycleChargeAmounts.EditFunctionCode		= "A"
			if (LocalCycleEditAction = "C" or LocalCycleEditAction = "C")
				FranchiseCycleChargeAmounts.EditFunctionCode		= "C"
			if (LocalCycleEditAction = "C" or LocalCycleEditAction = "R")
				FranchiseCycleChargeAmounts.EditFunctionCode		= "R"

		NextCycleDate is a DerivedField
			type is Date
			restricted
			return (first NextCycleDateRel.NextCycleDate)

		DerivedAdjustmentNumber is a DerivedField
			type is like AdjustmentNumber
			restricted
			return (first BySalesAdjustmentDescendingRel.FranchiseSales.AdjustmentNumber)

		DerivedLastAdjustmentNumber is a DerivedField
			type is like AdjustmentNumber
			restricted
			return last PreviousFranchiseSalesRel.FranchiseSales.AdjustmentNumber

		UnreleasedMessage				is a MessageField
			restricted
			"Unreleased"

		ReleasedMessage					is a MessageField
			restricted
			"Released"

		InvoicedMessage					is a MessageField
			restricted
			"Invoiced"

		ClosedMessage					is a MessageField
			restricted
			"Closed"

		DerivedStatus					is a DerivedField
			type is Alpha 10
			default label is "Status"
			if (Status.Released)
				return ReleasedMessage
			else
			if (Status.Invoiced)
				return InvoicedMessage
			else
			if (Status.Closed)
				return ClosedMessage
			else
				return UnreleasedMessage

		CalculatedSalesTax is a DerivedField	   
			type is like InternationalAmount
			restricted
			initialize LocalCalculateTaxExecuted
			initialize LocalCalculatedSalesTax
			
			if (FranchiseContract.TaxableFlag.Taxable)
				initialize CalculateTax				
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.TaxCode				= FranchiseContract.TaxCode
				CalculateTax.Function				= "C"
				CalculateTax.TaxDate				= FranchiseSales.Date
				CalculateTax.TaxableAmount			= ClosingSales
				CalculateTax.TaxableAmount		 -= Adjustments
				if (FranchiseContract.Currency		= Company.Currency)
					CalculateTax.BaseNbrOfDecimals	= Company.BaseNumberOfDecimals
				else
					initialize CurrencyExchange
					LocalFromCurrency				= FranchiseContract.Currency

					CurrencyExchange.ToCurrency	= Company.Currency
					CalculateTax.BaseNbrOfDecimals	= CurrencyExchange.OutputNumberOfDecimals
				CalculateTax.System				= "FR"
				CalculateTax.TaxAmount				= NetSales

				CalculateTax.PostalAddress			= Customer.PostalAddress
				CalculateTax.FromPostalAddress		= Company.PostalAddress
					
				LocalCalculateTaxExecuted = CalculateTax.ExecuteCalculateTax
				LocalCalculatedSalesTax = CalculateTax.OutputTotalTaxAmount
				if (FranchiseContract.CalculateTaxOnNetSales)
					LocalTaxRate			= CalculateTax.OutputTaxRate
					LocalCalculatedSalesTax = (((ClosingSales - Adjustments)/(1+ LocalTaxRate)) * LocalTaxRate)


			return LocalCalculatedSalesTax

		DerivedLastRelesedAdjustmentNumber is a DerivedField
			type is like AdjustmentNumber
			restricted
			return last FranchiseBudgetarySalesRel.FranchiseSales.AdjustmentNumber

		DerivedSalesBudgetAmount is a DerivedField
			type is like InternationalAmount
			if (CustomerSalesBudgetRel exists)
				initialize I1
				for each first CustomerSalesBudgetRel.Dates.Date
					I1 += 1
					if (each = FranchiseSales.Date)
						end for each					

				return first CustomerSalesBudgetRel.TransactionAmounts.TransactionAmount[I1]


		DerivedSalesBudgetDiffAmount is a DerivedField
			type is like InternationalAmount		
			for each FranchiseBudgetarySalesRel
				if (each.FranchiseSales.AdjustmentNumber = DerivedLastRelesedAdjustmentNumber)
					LocalNetSales = each.NetSales
					end for each

			return (DerivedSalesBudgetAmount - LocalNetSales)

		DerivedSalesBudgetPercent is a DerivedField
			type is Percent size 6.3
			return (DerivedSalesBudgetDiffAmount / DerivedSalesBudgetAmount)

		DerivedEstimatesTotalCharges is a DerivedField
			type is like InternationalAmount
			return (sum FranchiseSalesWithOpenEstimatesCallInRel.TotalCharges)

		ContextMessageEntityType is a StringField
			type is Alpha 30
			restricted
			"InforFranchiseSales"

		ContextMessageText is a MessageField
			restricted
			"FranchiseSales<FranchiseSales>"


	Relations
		FranchiseSalesRel
			one-to-many relation to FranchiseSales
			required
			Field Mapping uses Set9
				related.Company								= Company
				related.Customer							= Customer
				related.CustomerShipTo						= CustomerShipTo
				related.FranchiseContract					= FranchiseContract
				related.FranchiseSales.Date					= FranchiseSales.Date
				related.FranchiseSales.SalesType			= LocalSalesType
				related.FranchiseSales.AdjustmentNumber		= blank


		UnreleasedLocalTypeFRSalesRel
			one-to-many relation to FranchiseSales
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
				related.FranchiseSales.Date				= FranchiseSales.Date
				related.FranchiseSales.SalesType		= LocalSalesType
			Instance Selection
				where (related.Status					= Status.Unreleased)


		BySalesAdjustmentDescendingRel
			one-to-many relation to FranchiseSales
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
				related.FranchiseSales.Date				= FranchiseSales.Date
				related.FranchiseSales.SalesType		= FranchiseSales.SalesType


		FranchiseCompanyRel	  
			one-to-one relation to FranchiseCompany
			Field Mapping uses symbolic key
				related.Company			= Company


		PreviousFranchiseSalesRel
			one-to-many relation to FranchiseSales
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
				related.FranchiseSales.Date				= FranchiseSales.Date 
				related.FranchiseSales.SalesType		= FranchiseSales.SalesType


		ActualInvoiceFranchiseSalesRel
			one-to-many relation to FranchiseSales
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
				related.FranchiseSales.Date				= FranchiseSales.Date 
				related.FranchiseSales.SalesType		= FranchiseSales.SalesType.Actualinvoice


		FranchiseSalesUpdateRel
			one-to-one relation to FranchiseSales
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
				related.FranchiseSales.Date				= FranchiseSales.Date 
				related.FranchiseSales.SalesType		= FranchiseSales.SalesType
				related.FranchiseSales.AdjustmentNumber = 1


		UnreleasedFranchiseSalesRel
			one-to-many relation to FranchiseSales
			Field Mapping uses Set7
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
			Instance Selection
				where (related.FranchiseSales.Date		<= FranchiseSales.Date
				and related.FranchiseSales.SalesType	= FranchiseSales.SalesType
				and related.Status						= Status.Unreleased)


		PreviousUnreleasedChargeRel
			one-to-many relation to FranchiseSales
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
			Instance Selection
				where (related.FranchiseSales.Date		<= FranchiseSales.Date
				and	related.Status						= Status.Unreleased)


		CallInEstimateRel
			one-to-many relation to FranchiseSales
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
				related.FranchiseSales.Date				= FranchiseSales.Date
				related.FranchiseSales.SalesType		= FranchiseSales.SalesType.Callinestimate


		CallInEstimateAdjustment0Rel
			one-to-many relation to FranchiseSales
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
				related.FranchiseSales.Date				= FranchiseSales.Date
				related.FranchiseSales.SalesType		= FranchiseSales.SalesType.Callinestimate
				related.FranchiseSales.AdjustmentNumber = blank	


		UnreleasedCallInEstimateRel
			one-to-many relation to FranchiseSales
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
				related.FranchiseSales.Date				= FranchiseSales.Date
				related.FranchiseSales.SalesType		= FranchiseSales.SalesType.Callinestimate
			Instance Selection
				where (related.Status					= Status.Unreleased)


		LastCycleDateFranchiseSalesRel
			one-to-many relation to FranchiseSales
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
				related.FranchiseSales.Date				= LocalPreviousFranchiseSalesDate


		FranchiseSalesLocalSalesTypeRel
			one-to-one relation to FranchiseSales
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
				related.FranchiseSales.Date				= FranchiseSales.Date
				related.FranchiseSales.SalesType		= LocalSalesType
				related.FranchiseSales.AdjustmentNumber	= 1


		FranchiseContractChargesRel
			one-to-many relation to FranchiseContractCharge
			Field Mapping uses symbolic key
				related.Company								= Company
				related.Customer							= Customer
				related.CustomerShipTo						= CustomerShipTo
				related.FranchiseContract					= FranchiseContract
			Instance Selection
				where (related.Active = true)


		VerifyFranchiseCalendarDateRel
			one-to-one relation to FranchiseCalendarDates
			Field Mapping uses symbolic key
				related.Company								= Company
				related.FranchiseCalendar					= Company.FranchiseCalendar
				related.FranchiseCalendarDates.Year			= Company.CurrentYear
				related.FranchiseCalendarDates.Frequency	= LocalFrequency


		FranchiseCalendarDateRel
			one-to-many relation to FranchiseCalendarDates
			Field Mapping uses CalendarDatesByYear
				related.Company								= Company
				related.FranchiseCalendar					= Company.FranchiseCalendar
				related.FranchiseCalendarDates.Year			= Company.CurrentYear


		FranchiseContractRel
			one-to-one relation to FranchiseContract
			required
			Field Mapping uses symbolic key
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract

		FranchiseContractChargeRel is a FranchiseContractCharge set


		FranchiseActiveContractChargeRel is a FranchiseContractCharge set
			Instance Selection
				where (related.Active = true)


		FrequencyContractChargesRel is a FranchiseContractCharge set
			Instance Selection
				where (related.NextCycleDate = FranchiseSales.Date)
				


		NextCycleDateRel is a FranchiseContractCharge set
			Instance Selection
				where (related.NextCycleDate >= FranchiseSales.Date)


		FranchiseCalendarDatesRel
			one-to-many relation to FranchiseCalendarDates
			Field Mapping uses CalendarDatesByYear
				related.Company								= Company
				related.FranchiseCalendar					= Company.FranchiseCalendar
				related.FranchiseCalendarDates.Year			= Company.CurrentYear
				related.FranchiseCalendarDates.Frequency	= FranchiseContractChargeRel.Frequency


		FranchiseWeeklyCalendarDatesRel
			one-to-many relation to FranchiseCalendarDates
			Field Mapping uses CalendarDatesByYear
				related.Company								= Company
				related.FranchiseCalendar					= Company.FranchiseCalendar
				related.FranchiseCalendarDates.Year			= Company.CurrentYear
				related.FranchiseCalendarDates.Frequency	= LocalFrequency//"W"


		FranchiseSalesCalendarRel
			one-to-many relation to FranchiseSalesCalendar
			Field Mapping uses symbolic key
				related.Company								= Company
				related.FranchiseSalesCalendar.Year			= Company.CurrentYear


		FranchiseCycleChargesRel is a FranchiseCycleCharge set


		FranchiseCycleChargesUpdateRel
			one-to-many relation to FranchiseCycleCharge
			Field Mapping uses symbolic key
				related.Company								= Company
				related.Customer							= Customer
				related.CustomerShipTo						= CustomerShipTo
				related.FranchiseContract					= FranchiseContract
				related.FranchiseSales.SalesType			= FranchiseSales.SalesType
				related.FranchiseSales.Date					= FranchiseSales.Date
				related.FranchiseSales.AdjustmentNumber		= 1


		ClosedStateFranchiseCycleChargeRel
			one-to-many relation to FranchiseCycleCharge
			Field Mapping uses symbolic key
				related.Company								= Company
				related.Customer							= Customer
				related.CustomerShipTo						= CustomerShipTo
				related.FranchiseContract					= FranchiseContract
				related.FranchiseSales.SalesType			= FranchiseSales.SalesType
				related.FranchiseSales.Date					= FranchiseSales.Date
				related.FranchiseSales.AdjustmentNumber		= FranchiseSales.AdjustmentNumber


		FranciseCycleChargeForContractChargeRel
			one-to-one relation to FranchiseCycleCharge
			Field Mapping uses symbolic key
				related.Company								= Company
				related.Customer							= Customer
				related.CustomerShipTo						= CustomerShipTo
				related.FranchiseContract					= FranchiseContract
				related.FranchiseSales.SalesType			= FranchiseSales.SalesType
				related.FranchiseSales.Date					= FranchiseSales.Date
				related.FranchiseSales.AdjustmentNumber		= FranchiseSales.AdjustmentNumber
				related.FranchiseContractCharge				= LocalFranchiseContractCharge


		FranciseCycleChargeAdjustmentRel
			one-to-one relation to FranchiseCycleCharge
			Field Mapping uses symbolic key
				related.Company								= Company
				related.Customer							= Customer
				related.CustomerShipTo						= CustomerShipTo
				related.FranchiseContract					= FranchiseContract
				related.FranchiseSales.SalesType			= FranchiseSales.SalesType
				related.FranchiseSales.Date					= FranchiseSales.Date
				related.FranchiseSales.AdjustmentNumber		= 1
				related.FranchiseContractCharge				= LocalFranchiseContractCharge


		OtherFranciseCycleChargeAdjustmentRel
			one-to-one relation to FranchiseCycleCharge
			Field Mapping uses symbolic key
				related.Company								= Company
				related.Customer							= Customer
				related.CustomerShipTo						= CustomerShipTo
				related.FranchiseContract					= FranchiseContract
				related.FranchiseSales.SalesType			= FranchiseSales.SalesType
				related.FranchiseSales.Date					= FranchiseSales.Date
				related.FranchiseSales.AdjustmentNumber		= FranchiseSales.AdjustmentNumber - 1
				related.FranchiseContractCharge				= LocalFranchiseContractCharge


		PreviousFranchiseCycleChargeRel
			one-to-many relation to FranchiseCycleCharge
			Field Mapping uses symbolic key
				related.Company								= Company
				related.Customer							= Customer
				related.CustomerShipTo						= CustomerShipTo
				related.FranchiseContract					= FranchiseContract
				related.FranchiseSales.SalesType			= LocalSalesType
				related.FranchiseSales.Date					= FranchiseSales.Date
				related.FranchiseSales.AdjustmentNumber		= 1
				related.FranchiseContractCharge				= LocalFranchiseContractCharge


		FranchiseSalesUserFieldsRel is a FranchiseSalesUserFields set


		ClosedStateFranchiseSalesUserFieldsRel
			one-to-one relation to FranchiseSalesUserFields
			Field Mapping uses symbolic key
				related.Company								= Company
				related.Customer							= Customer
				related.CustomerShipTo						= CustomerShipTo
				related.FranchiseContract					= FranchiseContract
				related.FranchiseSales.SalesType			= FranchiseSales.SalesType
				related.FranchiseSales.Date					= FranchiseSales.Date
				related.FranchiseSales.AdjustmentNumber		= FranchiseSales.AdjustmentNumber


		FranchiseCycleChargeRel
			one-to-one relation to FranchiseCycleCharge
			Field Mapping uses Set2	
				related.Company							= FranchiseCycleChargeAmounts.EditFranchiseCompany
				related.Customer						= FranchiseCycleChargeAmounts.EditFranchiseCustomer
				related.CustomerShipTo					= FranchiseCycleChargeAmounts.EditShipTo
				related.FranchiseContract				= FranchiseCycleChargeAmounts.EditFranchiseContract
				related.FranchiseContractCharge			= FranchiseCycleChargeAmounts.EditFranchiseContractCharge
				related.FranchiseSales.AdjustmentNumber	= FranchiseCycleChargeAmounts.EditAdjustmentNumber
				related.FranchiseSales.SalesType		= FranchiseCycleChargeAmounts.LocalSalesType
				related.FranchiseSales.Date				 = FranchiseCycleChargeAmounts.EditDate 









		CustomerShipToRel
			one-to-one relation to CustomerShipTo
			required
			Field Mapping uses symbolic key
				related.Company								= Company
				related.Customer							= Customer
				related.CustomerShipTo						= CustomerShipTo


		CustomerRel
			one-to-one relation to Customer
			required
			Field Mapping uses symbolic key
				related.CustomerGroup						= Company.CustomerGroupField.CustomerGroup	
				related.Customer							= Customer


		CYCalendarDatesRel
			one-to-one relation to FranchiseCalendarDates
			Field Mapping uses CalendarDatesByYear
				related.Company								= Company
				related.FranchiseCalendar					= Company.FranchiseCalendar
				related.FranchiseCalendarDates.Year			= Company.CurrentYear
				related.FranchiseCalendarDates.Frequency	= "M"


		LYCalendarDatesRel
			one-to-one relation to FranchiseCalendarDates
			Field Mapping uses CalendarDatesByYear
				related.Company								= Company
				related.FranchiseCalendar					= Company.FranchiseCalendar
				related.FranchiseCalendarDates.Year			= Company.CurrentYear - 1
				related.FranchiseCalendarDates.Frequency	= "M"


		FranchiseBudgetarySalesRel
			one-to-many relation to FranchiseSales			
			Field Mapping uses Set9
				related.Company							= Company
				related.Customer						= Customer
				related.CustomerShipTo					= CustomerShipTo
				related.FranchiseContract				= FranchiseContract
				related.FranchiseSales.Date				= FranchiseSales.Date
				related.FranchiseSales.SalesType		= FranchiseSales.SalesType.Actualinvoice
			Instance Selection
				where (related.Status					= Status.Released) 


		CustomerSalesBudgetRel
			one-to-many relation to FranchiseContractBudget
			Field Mapping uses symbolic key
				related.Company							= Company
			Instance Selection 
				where (related.Customer					= Customer
				and related.CustomerShipTo				= CustomerShipTo
				and related.FranchiseContract			= FranchiseContract)



		EstimatedAndCallInEstimateRel
			one-to-many relation to FranchiseSales
			Field Mapping uses symbolic key
				related.Company									= Company
				related.Customer								= Customer
				related.CustomerShipTo							= CustomerShipTo
				related.FranchiseContract						= FranchiseContract
			Instance Selection
				where (related.IsOpenEstimatedAndCallInSales
				and	related.FranchiseSales.Date				= FranchiseSales.Date
				and	related.FranchiseSales.AdjustmentNumber		= FranchiseSales.AdjustmentNumber)  


		FranchiseSalesWithOpenEstimatesCallInRel
			one-to-many relation to FranchiseSales
			Field Mapping uses Set2
				related.Company						= Company
				related.Customer					= Customer


	Sets

		Set2
			indexed
			Instance Selection
				where (IsOpenEst)
			Sort Order
				Company
				Customer
				CustomerShipTo
				FranchiseContract
				FranchiseSales.Date
				FranchiseSales.SalesType
				FranchiseSales.AdjustmentNumber

		Set3
			indexed
			Instance Selection
				where (IsNoEstimates)
			Sort Order
				Company
				Customer
				CustomerShipTo
				FranchiseContract descending
				FranchiseSales.Date descending
				FranchiseSales.SalesType
				FranchiseSales.AdjustmentNumber

		Set4
			indexed
			Instance Selection
				where (IsInvcCreation)
			Sort Order
				Company
				Customer
				CustomerShipTo
				FranchiseContract
				FranchiseSales.Date
				FranchiseSales.SalesType
				FranchiseSales.AdjustmentNumber

		Set5
			indexed
			Instance Selection
				where (IsVarianceRpt)
			Sort Order
				Company
				Customer
				CustomerShipTo
				FranchiseContract
				FranchiseSales.Date
				FranchiseSales.SalesType
				FranchiseSales.AdjustmentNumber

		Set6
			indexed
			Instance Selection
				where (IsSalesOnly)
			Sort Order
				Company
				Customer
				CustomerShipTo
				FranchiseContract
				FranchiseSales.Date
				FranchiseSales.AdjustmentNumber
				FranchiseSales.SalesType

		Set7
			indexed
			Instance Selection
				where (IsReleaseActual)
			Sort Order
				Company
				Customer
				CustomerShipTo
				FranchiseContract
				FranchiseSales.Date
				FranchiseSales.SalesType
				FranchiseSales.AdjustmentNumber

		Set9
			indexed
			Sort Order
				Company
				Customer
				CustomerShipTo
				FranchiseContract
				FranchiseSales.Date
				FranchiseSales.SalesType
				FranchiseSales.AdjustmentNumber

		BySalesAdjustmentDescending
			Sort Order
				Company
				Customer
				CustomerShipTo
				FranchiseContract
				FranchiseSales.Date
				FranchiseSales.SalesType
				FranchiseSales.AdjustmentNumber   descending   

		ByDate
			indexed
			Instance Selection
				where (IsInvcCreation)
			Sort Order
				Company
				Customer
				FranchiseSales.Date
				CustomerShipTo
				FranchiseContract
				FranchiseSales.SalesType
				FranchiseSales.AdjustmentNumber		  



	Rule Blocks
		EditData
			constraint (FranchiseContract.Active)
				"ContractIsInactive" 
			constraint (FranchiseSales.Date >= FranchiseContract.ContractDate)
				"CycleDateNotWithinContractEffectiveDateRange" 
			constraint (FranchiseSales.Date <= FranchiseContract.TerminateDate)
				"CycleDateNotWithinContractEffectiveDateRange" 
			if (!Company.AllowNegativeSales
			or IsStepLimitEntered)
				if (FranchiseSales.AdjustmentNumber <= 1)
					constraint (SalesTax >= 0)
						"SalesTaxCannotBeNegative" 
					constraint (ClosingSales >= 0)
						"Closing_\SalesCannotBeNegative" 
			if (FranchiseContract.TaxableFlag.Taxable
			and FranchiseSales.AdjustmentNumber <= 1
			and ClosingSales not = Adjustments
			and !FranchiseContract.CalculateTaxOnNetSales)
				constraint (SalesTax not = 0)
					"SalesTaxRequired" 
			NetSales = ClosingSales - SalesTax - Adjustments 


		CalculatedSalesTaxBlock									
			initialize LocalCalculateTaxExecuted
			initialize LocalCalculatedSalesTax

			if (FranchiseContract.TaxableFlag.Taxable)
				initialize CalculateTax
				CalculateTax.TaxEntity				= Company.AccountingEntity
				CalculateTax.TaxCode				= FranchiseContract.TaxCode
				CalculateTax.Function				= "C"
				CalculateTax.TaxDate				= FranchiseSales.Date
				CalculateTax.TaxableAmount			= ClosingSales
				CalculateTax.TaxableAmount			-= Adjustments
				if (FranchiseContract.Currency		= Company.Currency)
					CalculateTax.BaseNbrOfDecimals	= Company.BaseNumberOfDecimals
				else
					initialize CurrencyExchange
					LocalFromCurrency				= FranchiseContract.Currency

					CurrencyExchange.ToCurrency	= Company.Currency
					CalculateTax.BaseNbrOfDecimals	= CurrencyExchange.OutputNumberOfDecimals
				CalculateTax.System					= "FR"
				CalculateTax.TaxAmount				= NetSales

				CalculateTax.PostalAddress			= Customer.PostalAddress
				CalculateTax.FromPostalAddress		= Company.PostalAddress

				LocalCalculateTaxExecuted = CalculateTax.ExecuteCalculateTax
				LocalCalculatedSalesTax = CalculateTax.OutputTotalTaxAmount
				if (FranchiseContract.CalculateTaxOnNetSales)
					LocalTaxRate			= CalculateTax.OutputTaxRate
					LocalCalculatedSalesTax = (((ClosingSales - Adjustments)/(1+ LocalTaxRate)) * LocalTaxRate)



		LocalFranchiseCycleChargeAmounts
			initialize LocalCalculatedAmount
			initialize LocalBeginningNoteBalance
			initialize LocalPrincipal
			initialize LocalInterest
			initialize LocalEndingNoteBalance
			initialize LocalCycleChargeCounter

			initialize LocalMaxAmount
			initialize LocalSales





			if (FranchiseContract.CalculateInvoiceAmountOnGrossSales)
				LocalSales = ClosingSales - Adjustments
			else
				LocalSales = NetSales

			if (each.ChargeType.SalesBased)
				initialize LocalCycleChargeCounter
				LocalCycleChargeCounter = 1
				if (each.MaximumAmount entered)
					LocalMaxAmount = each.MaximumAmount
				else 
					LocalMaxAmount = 9999999999	

				if (!each.StepLimits.StepLimit[LocalCycleChargeCounter] entered)  
					LocalCalculatedAmount = ((LocalSales * each.PercentOfSales) + each.BaseAmount + FranciseCycleChargeForContractChargeRel.LineTotalAmount) 
					if (LocalCalculatedAmount < each.MinimumAmount
					and each.MinimumAmount entered)
						LocalCalculatedAmount = (each.MinimumAmount - FranciseCycleChargeForContractChargeRel.LineTotalAmount)

					else 
						if (LocalCalculatedAmount > LocalMaxAmount)	
							LocalCalculatedAmount = (LocalMaxAmount - FranciseCycleChargeForContractChargeRel.LineTotalAmount)						
						else 
							LocalCalculatedAmount = ((LocalSales * each.PercentOfSales) + each.BaseAmount)
				else
					if (each.StepOperand = 0)

						while (LocalCycleChargeCounter < 11)
							if (each.StepLimits.StepLimit[LocalCycleChargeCounter] > LocalSales)
								LocalCalculatedAmount = ((LocalSales * each.StepPercents.StepPercent[LocalCycleChargeCounter]) + each.BaseAmount)

								if (each.MinimumAmount entered
								and LocalCalculatedAmount < each.MinimumAmount)
									LocalCalculatedAmount = each.MinimumAmount 
								if (LocalCalculatedAmount > LocalMaxAmount)
									LocalCalculatedAmount = LocalMaxAmount


								LocalCycleChargeCounter = 11
							else
								LocalCycleChargeCounter += 1


					if (each.StepOperand = 1)	

						initialize LocalCalculatedAmount
						initialize LocalAmount
						initialize AddStepLayersCounter

						LocalCycleChargeCounter = 1

						while (LocalCycleChargeCounter < 11)
							if (each.StepLimits.StepLimit[LocalCycleChargeCounter] > LocalSales)
								AddStepLayersCounter = LocalCycleChargeCounter
								LocalCycleChargeCounter = 11

							else
								LocalCycleChargeCounter += 1

						LocalCycleChargeCounter = 1

						while (LocalCycleChargeCounter <= AddStepLayersCounter)

							LocalCalculatedAmount = LocalCalculatedAmount + (each.StepPercents.StepPercent[LocalCycleChargeCounter] * (each.StepLimits.StepLimit[LocalCycleChargeCounter] - LocalAmount))
							LocalAmount = each.StepLimits.StepLimit[LocalCycleChargeCounter]

							LocalCycleChargeCounter += 1

						LocalCalculatedAmount = (((LocalSales - LocalAmount) * each.StepPercents.StepPercent[AddStepLayersCounter]) + (LocalCalculatedAmount) + (each.BaseAmount))

						if (each.MinimumAmount entered
						and LocalCalculatedAmount < each.MinimumAmount)
							LocalCalculatedAmount = each.MinimumAmount

						if (LocalCalculatedAmount > LocalMaxAmount)
							LocalCalculatedAmount = LocalMaxAmount


			if (each.ChargeType.NoteBased)


				FranchiseCycleChargeAmounts.EditFranchiseCompany	= Company
				FranchiseCycleChargeAmounts.EditShipTo				= CustomerShipTo		
				FranchiseCycleChargeAmounts.EditFranchiseCustomer	= Customer	
				FranchiseCycleChargeAmounts.EditFranchiseContract	= FranchiseContract		
				FranchiseCycleChargeAmounts.EditSalesType			= FranchiseSales.SalesType	
				FranchiseCycleChargeAmounts.EditDate				= FranchiseSales.Date
				FranchiseCycleChargeAmounts.EditAdjustmentNumber	= FranchiseSales.AdjustmentNumber

				FranchiseCycleChargeAmounts.EditEnterChargeFlag		= EnterChargeFlag
				FranchiseCycleChargeAmounts.EditNetSales			= LocalSales
				FranchiseCycleChargeAmounts.EditFranchiseContractCharge = LocalFranchiseContractCharge
				if (LocalCycleEditAction = "A") 
					FranchiseCycleChargeAmounts.EditFunctionCode		= "A"	
				if (LocalCycleEditAction = "C") 
					FranchiseCycleChargeAmounts.EditFunctionCode		= "C"	



				if (FranchiseCycleChargeAmounts.EditFunctionCode.Add)	
					if (!FranchiseCycleChargeAmounts.EditSalesType.Callinestimate)
						FranchiseCycleChargeAmounts.LocalSalesType	= "C"
						if (FranchiseCycleChargeRel exists)
							LocalFranchiseSalesFlag	= true
							LocalHoldSalesType = "C"
					if (!FranchiseCycleChargeAmounts.EditSalesType.Estimatedinvoice)
						FranchiseCycleChargeAmounts.LocalSalesType	= "E"
						if (FranchiseCycleChargeRel exists)
							LocalFranchiseSalesFlag	= true
							LocalHoldSalesType = "E"
					if (!FranchiseCycleChargeAmounts.EditSalesType.Actualinvoice)
						FranchiseCycleChargeAmounts.LocalSalesType	= "A"
						if (FranchiseCycleChargeRel exists)
							LocalFranchiseSalesFlag	= true
							LocalHoldSalesType = "A"

					if (FranchiseCycleChargeAmounts.EditSalesType.Actualinvoice)
						if (FranchiseSales.SalesType.Callinestimate)
							LocalFranchiseSalesFlag	= true
							LocalHoldSalesType = "C"
						if (FranchiseSales.SalesType.Estimatedinvoice)
							LocalFranchiseSalesFlag	= true
							LocalHoldSalesType = "E"

					if (FranchiseCycleChargeAmounts.EditSalesType.Callinestimate)
						if (FranchiseSales.SalesType.Actualinvoice)
							LocalFranchiseSalesFlag	= true
							LocalHoldSalesType = "A"
						if (FranchiseSales.SalesType.Estimatedinvoice)
							LocalFranchiseSalesFlag	= true
							LocalHoldSalesType = "E"

					if (FranchiseCycleChargeAmounts.EditSalesType.Estimatedinvoice)
						if (FranchiseSales.SalesType.Actualinvoice)
							LocalFranchiseSalesFlag	= true
							LocalHoldSalesType = "A"
						if (FranchiseSales.SalesType.Callinestimate)
							LocalFranchiseSalesFlag	= true
							LocalHoldSalesType = "C"


				if (FranchiseCycleChargeAmounts.EditFunctionCode.Change
				or LocalFranchiseSalesFlag)

					LocalSalesType				= FranchiseCycleChargeAmounts.EditSalesType  
					LocalCalculatedAmount		= each.PaymentAmount  

					if (FranchiseCycleChargeAmounts.EditFunctionCode.Change)
						FranchiseCycleChargeAmounts.LocalSalesType = FranchiseSales.SalesType
					else
						FranchiseCycleChargeAmounts.LocalSalesType = LocalHoldSalesType

					LocalBeginningNoteBalance	= FranchiseCycleChargeRel.BeginningNoteBalance
					LocalEndingNoteBalance		= FranchiseCycleChargeRel.EndingNoteBalance
					LocalPrincipal				= FranchiseCycleChargeRel.Principal
					LocalInterest				= FranchiseCycleChargeRel.Interest
				else
				if (FranchiseCycleChargeAmounts.EditFunctionCode.Add
				or FranchiseCycleChargeAmounts.EditFunctionCode.Release) 

					initialize LocalDateCount
					initialize LocalCounter
					if (CYCalendarDatesRel exists)
						LocalCounter = 1
						while (LocalCounter <= 53)
							

							if (CYCalendarDatesRel.Dates.Date[LocalCounter] = FranchiseCycleChargeAmounts.EditDate)
								LocalDateFlag = true

							if (CYCalendarDatesRel.Dates.Date[LocalCounter] entered)
								LocalDateCount += 1

							LocalCounter += 1

						if (!LocalDateFlag)
							if (LYCalendarDatesRel exists)	
								LocalCounter = 1
								while (LocalCounter <= 53)

									if (CYCalendarDatesRel.Dates.Date[LocalCounter] = FranchiseCycleChargeAmounts.EditDate)
										LocalDateFlag = true

									if (CYCalendarDatesRel.Dates.Date[LocalCounter] entered)
										LocalDateCount += 1

									LocalCounter += 1


					LocalInterest   = ((each.InterestRate / LocalDateCount) * each.CurrentBalance)
					LocalPrincipal  = (each.PaymentAmount - LocalInterest)



					LocalPaymentFlag = false
					
					if (each.RemainingPayments = 1
					or LocalPrincipal > each.CurrentBalance )
						LocalPrincipal						= each.CurrentBalance
						LocalContractChargePaymentAmount	= LocalPrincipal + LocalInterest 
						LocalPaymentFlag					= true
						LocalCalculatedAmount				= LocalContractChargePaymentAmount
					else	
						LocalCalculatedAmount				= each.PaymentAmount	
					
					LocalBeginningNoteBalance				= each.CurrentBalance		
					LocalEndingNoteBalance					= LocalBeginningNoteBalance - LocalPrincipal


	Field Rules
		EnterChargeFlag
			default to "Y"

		CalculatedTax
			include CalculatedSalesTaxBlock
			if (!IsAdjustment)
				CalculatedTax = LocalCalculatedSalesTax

		SalesTax
			if (!FranchiseContract.TaxableFlag.Taxable)
				cannot be entered
					"CannotEnterSalesTax;ContractIsTaxExempt"	
			if (FranchiseContract.CalculateTaxOnNetSales)
				default to CalculatedTax

		ProcessLevel
			default to FranchiseContract.ProcessLevel
			default to FranchiseCompanyRel.ProcessLevel


	Actions
		Create is a Create Action
			Action Rules
				constraint (!FranchiseSales.SalesType.Estimatedinvoice)			
					"CannotCreateEstimatedInvoiceOnThisScreen;UseCreateEstimates"				




				constraint (CustomerShipTo.Active)
					"ShipToIsInactive"															
				constraint (FranchiseActiveContractChargeRel exists)
					"CannotAdd;NoValidOrContractChargesExist"

				if (PreviousFranchiseSalesRel exists
				and DerivedLastAdjustmentNumber > 0)
					FranchiseSales.AdjustmentNumber = DerivedLastAdjustmentNumber + 1

				if (FranchiseSales.AdjustmentNumber > 1)
					constraint (FranchiseSalesUpdateRel exists)
						"CreatingOfAdjustmentSalesIsNotValid;SalesRecordDoesNotExist"

				if (FranchiseSales.SalesType.Callinestimate)
					constraint (!FranchiseSales.AdjustmentNumber > 1)
						"CannotAddAdjustmentToCallInEstimate"									
					constraint (ActualInvoiceFranchiseSalesRel not exists)
						"CannotAddCallInEstimate;ActualInvoiceAlreadyExists"					
				else
				if (FranchiseSales.SalesType.Actualinvoice)
					constraint (UnreleasedCallInEstimateRel not exists)
						"CallInIsUnreleased;CannotAddActualInvoice"								
					constraint (UnreleasedFranchiseSalesRel not exists)
						"CannotAdd_-_\UnreleasedPreviousSalesEntriesExists"						
				else
					constraint (!PreviousUnreleasedChargeRel exists)
						"CannotAdd_-_\UnreleasedPreviousSalesEntriesExists"						

				if (!FranchiseSales.SalesType.Aggregatesales)
					constraint (CurrentYearPeriodDate)
						"InvalidDate"
					constraint (ChargeCalendarPeriodDate)
						"InvalidDate;DateNotFoundInCalendarsUsedByCharges"
					constraint (ChargeEffectiveDates)
						"InvalidCycleDate;CannotBePriorToOrCannotBeAfterContractChargeDateRange"  
					constraint (SkippedPeriodDateCheck)
						"InvalidDate;CannotSkipPeriods"

					if (FranchiseSales.AdjustmentNumber = blank)









						LocalSalesType	= "E"

						if (FranchiseSales.SalesType.Callinestimate)
							LocalSalesType = "A"
							constraint (!FranchiseSalesRel exists)
								"CannotAddCallInEstimate;ActualAlreadyExists"
						else
							LocalSalesType = "C"
							constraint (!UnreleasedLocalTypeFRSalesRel exists)
								"CannotAddActual;UnreleasedCallInEstimateExists"
					else
						LocalSalesType = "S"
						constraint (!UnreleasedLocalTypeFRSalesRel exists)
							"CannotAdd;UnreleasedAggregateSalesChargeExists"

				else
					if(FranchiseContract.SalesByDate.Yes)
						constraint (CurrentYearSalesCalPeriodDate)
							"InvalidDate"












				include EditData

			Exit Rules
				if (!FranchiseSales.SalesType.Aggregatesales)
					if (FranchiseSales.AdjustmentNumber = 1)
						LocalSalesType = "E"
						if (FranchiseSalesLocalSalesTypeRel exists)
							invoke CopyFRYToFRY 
								invoked.HoldSalesType = LocalSalesType
						else
							if (!FranchiseSales.SalesType.Callinestimate)
								LocalSalesType = FranchiseSales.SalesType.Callinestimate
								if (FranchiseSalesLocalSalesTypeRel exists)
									invoke CopyFRYToFRY 
										invoked.HoldSalesType = LocalSalesType
								else
									invoke CopyFRGToFRY 
							else
								invoke CopyFRGToFRY 

					else
						invoke CopyFRYToFRY 
							invoked.HoldSalesType = FranchiseSales.SalesType.Actualinvoice














				invoke UpdateFranchiseSalesTotals
				if (IsAdjustment)
					invoke UpdateFranchiseSalesFromAdjustment FranchiseSalesUpdateRel
						invoked.PrmTotalClosingSales		= ClosingSales
						invoked.PrmTotalNetSales			= NetSales
						invoked.PrmTotalSalesTax			= SalesTax
						invoked.PrmTotalAdjustment			= Adjustments


		CreateEstimatedInvoice is a Create Action
			restricted
			Action Rules
				constraint (FranchiseSales.SalesType.Estimatedinvoice)
					"OnlyEstimatedTypeInvoicesCanBeCreatedWithThisAction"


		Update is an Update Action
			restricted
			Exit Rules
				invoke UpdateFranchiseSalesTotals
				invoke UpdateCycleChargeAmounts


		CopyFRYToFRY is an Instance Action  
			restricted
			Parameters
				HoldSalesType				is a SalesType
			Action Rules
				LocalSalesType = HoldSalesType
				for each FranchiseContractChargesRel
					LocalFranchiseContractCharge = each.FranchiseContractCharge
					if (PreviousFranchiseCycleChargeRel exists)		
						LocalCycleEditAction = "A"
						include LocalFranchiseCycleChargeAmounts	
						if (FranchiseSales.AdjustmentNumber > 2)
							LocalLastLineTotalAmount = OtherFranciseCycleChargeAdjustmentRel.LineTotalAmount
						
						if (EnterChargeFlag.Yes)
							if (each.ChargeType = 3)
								LocalSubmittedAmount			= each.PaymentAmount
							else
								LocalSubmittedAmount			= LocalCalculatedAmount
							
						invoke Create FranchiseCycleCharge

							fill in fields from this instance
							invoked.FranchiseContractCharge			= each.FranchiseContractCharge
							invoked.Charge							= each.FranchiseStandardCharge.Charge
							invoked.ChargeType						= each.FranchiseStandardCharge.ChargeType
							invoked.ProcessLevel					= each.ProcessLevel
							invoked.FranchiseSales.SalesType		= FranchiseSales.SalesType
							invoked.FranchiseSales.AdjustmentNumber = FranchiseSales.AdjustmentNumber
							invoked.CalculatedAmount				= LocalCalculatedAmount
							if (EnterChargeFlag.Yes)	
								if (each.ChargeType = 3)
									invoked.SubmittedAmount			= LocalSubmittedAmount
								else
									invoked.SubmittedAmount			= LocalSubmittedAmount
									
							
							if (each.ChargeType = 2)
								if (IsAdjustment)
									invoked.SubmittedAmount		= 0
									invoked.CalculatedAmount		= 0
								else
									invoked.SubmittedAmount			= LocalSubmittedAmount
								invoked.BeginningNoteBalance		= LocalBeginningNoteBalance
								invoked.EndingNoteBalance			= LocalEndingNoteBalance
								invoked.Principal					= LocalPrincipal
								invoked.Interest					= LocalInterest
						
							if (each.ChargeType = 3
							and each.PaymentAmount entered)
								invoked.CalculatedAmount			= each.PaymentAmount
		
							if (!IsAdjustment)
								invoked.LineTotalAmount				= LocalSubmittedAmount
							else
								invoked.LineTotalAmount				= OtherFranciseCycleChargeAdjustmentRel.SubmittedAmount + LocalLastLineTotalAmount
							
						TotalVariance		+= FranciseCycleChargeForContractChargeRel.SubmittedAmount - FranciseCycleChargeForContractChargeRel.CalculatedAmount
						TotalCharges		+= FranciseCycleChargeForContractChargeRel.CalculatedAmount
						TotalDue			+= FranciseCycleChargeForContractChargeRel.SubmittedAmount
							
						if (IsAdjustment)
							invoke UpdateFromSales FranciseCycleChargeAdjustmentRel
								invoked.LineTotalAmount += FranciseCycleChargeForContractChargeRel.SubmittedAmount


		Delete is a Delete Action
			valid when (IsUnreleased)
			Entrance Rules
				constraint (!FranchiseSales.SalesType.Estimatedinvoice)
					"EstimateCannotBeDeleted" 

				if (IsAdjustment)
					LocalSalesType = FranchiseSales.SalesType

					for each FranchiseCycleChargesUpdateRel							
						invoke Update each
							invoked.LineTotalAmount -= each.SubmittedAmount

					invoke DeleteFranchiseSalesTotals FranchiseSalesLocalSalesTypeRel
						invoked.PrmTotalClosingSales	= ClosingSales
						invoked.PrmTotalSalesTax		= SalesTax
						invoked.PrmTotalAdjustment		= Adjustments
						invoked.PrmTotalNetSales		= NetSales


		CopyFRGToFRY is an Instance Action
			restricted
			Action Rules
				for each FranchiseContractChargesRel					
					if (each.BeginDate		<= FranchiseSales.Date
					and each.EndDate		>= FranchiseSales.Date
					and	each.NextCycleDate	 = FranchiseSales.Date)		
						LocalFranchiseContractCharge = each.FranchiseContractCharge
						LocalCycleEditAction = "A"
						include LocalFranchiseCycleChargeAmounts		
						if (FranchiseSales.AdjustmentNumber > 2)
							LocalLastLineTotalAmount = OtherFranciseCycleChargeAdjustmentRel.LineTotalAmount

						if (EnterChargeFlag.Yes)
							if (each.ChargeType = 3)
								LocalSubmittedAmount			= each.PaymentAmount
							else
								LocalSubmittedAmount			= LocalCalculatedAmount

						invoke Create FranchiseCycleCharge
							assign result to LocalCycleCharge
							fill in fields from this instance
							invoked.FranchiseContractCharge			= each.FranchiseContractCharge
							invoked.Charge							= each.FranchiseStandardCharge.Charge
							invoked.ChargeType						= each.FranchiseStandardCharge.ChargeType
							invoked.ProcessLevel					= each.ProcessLevel
							invoked.FranchiseSales.SalesType		= FranchiseSales.SalesType
							invoked.FranchiseSales.AdjustmentNumber = FranchiseSales.AdjustmentNumber
							invoked.CalculatedAmount				= LocalCalculatedAmount
							if (EnterChargeFlag.Yes)	
								if (each.ChargeType = 3)
									invoked.SubmittedAmount			= LocalSubmittedAmount
								else
									invoked.SubmittedAmount			= LocalSubmittedAmount

							if (each.ChargeType = 2)
								if (IsAdjustment)
									invoked.SubmittedAmount		= 0
									invoked.CalculatedAmount		= 0
								else
									invoked.SubmittedAmount			= LocalSubmittedAmount
								invoked.BeginningNoteBalance		= LocalBeginningNoteBalance
								invoked.EndingNoteBalance			= LocalEndingNoteBalance
								invoked.Principal					= LocalPrincipal
								invoked.Interest					= LocalInterest

							if (each.ChargeType = 3
							and each.PaymentAmount entered)
								invoked.CalculatedAmount			= each.PaymentAmount
	
							if (!IsAdjustment)
								invoked.LineTotalAmount				= LocalSubmittedAmount
							else
								invoked.LineTotalAmount				= OtherFranciseCycleChargeAdjustmentRel.SubmittedAmount + LocalLastLineTotalAmount

						TotalVariance		+= FranciseCycleChargeForContractChargeRel.SubmittedAmount - FranciseCycleChargeForContractChargeRel.CalculatedAmount
						TotalCharges		+= FranciseCycleChargeForContractChargeRel.CalculatedAmount
						TotalDue			+= FranciseCycleChargeForContractChargeRel.SubmittedAmount
							
						if (IsAdjustment)
							invoke UpdateFromSales FranciseCycleChargeAdjustmentRel
								invoked.LineTotalAmount += FranciseCycleChargeForContractChargeRel.SubmittedAmount


		CalculateCharges is an Instance Action
			restricted
			Action Rules
				for each FranchiseCycleChargesRel
					if (EnterChargeFlag.Yes)	
						invoke Update each
							invoked.SubmittedAmount			= FranchiseCycleChargeAmounts.LocalCalculatedAmount
					else
						invoke Update each
							invoked.SubmittedAmount				= 0
					if (each.ChargeType = 2)
						if (FranchiseSales.AdjustmentNumber > 1)
							invoke Update each
								invoked.SubmittedAmount		= 0
								invoked.CalculatedAmount		= 0
						else
							invoke Update each
								invoked.SubmittedAmount			= FranchiseCycleChargeAmounts.LocalCalculatedAmount
								invoked.CalculatedAmount		= FranchiseCycleChargeAmounts.LocalCalculatedAmount
								invoked.BeginningNoteBalance	= FranchiseCycleChargeAmounts.LocalBeginningNoteBalance
								invoked.EndingNoteBalance		= FranchiseCycleChargeAmounts.LocalBeginningNoteBalance
								invoked.Principal				= FranchiseCycleChargeAmounts.LocalPrincipal
								invoked.Interest				= FranchiseCycleChargeAmounts.LocalInterest
							TotalCharges				= LocalTotalCharges + FranchiseCycleChargeAmounts.LocalCalculatedAmount
							TotalDue					= LocalTotalDue + FranchiseCycleChargeAmounts.LocalCalculatedAmount
							TotalVariance				= LocalTotalVariance + 0 








		UpdateCycleChargeAmounts is an Instance Action
			restricted
			Action Rules
				initialize TotalCharges
				initialize TotalDue
				initialize TotalVariance
				for each FranchiseContractChargesRel



					LocalFranchiseContractCharge	= each.FranchiseContractCharge
					LocalCycleEditAction = "C"
					include LocalFranchiseCycleChargeAmounts   

					if (FranciseCycleChargeForContractChargeRel exists)
						invoke UpdateFromSales FranciseCycleChargeForContractChargeRel
							if (each.ChargeType = 3)
								invoked.CalculatedAmount		= each.PaymentAmount
							else
								invoked.CalculatedAmount		= LocalCalculatedAmount

							if (invoked.ChargeType = 2)
								if (!IsAdjustment)
									invoked.SubmittedAmount			= LocalCalculatedAmount
									invoked.CalculatedAmount		= LocalCalculatedAmount
									invoked.LineTotalAmount			= LocalCalculatedAmount
								else
									invoked.SubmittedAmount			= 0
									invoked.CalculatedAmount		= 0
								invoked.BeginningNoteBalance		= LocalBeginningNoteBalance
								invoked.EndingNoteBalance			= LocalEndingNoteBalance
								invoked.Principal					= LocalPrincipal
								invoked.Interest					= LocalInterest

						TotalCharges		+= FranciseCycleChargeForContractChargeRel.CalculatedAmount
						TotalDue			+= FranciseCycleChargeForContractChargeRel.SubmittedAmount
						TotalVariance		+= FranciseCycleChargeForContractChargeRel.SubmittedAmount - FranciseCycleChargeForContractChargeRel.CalculatedAmount

				if (IsAdjustment)
					invoke UpdateFranchiseSalesFromAdjustment FranchiseSalesUpdateRel
						invoked.PrmTotalClosingSales		= ClosingSales - old ClosingSales
						invoked.PrmTotalNetSales			= NetSales	   - old NetSales
						invoked.PrmTotalSalesTax			= SalesTax	   - old SalesTax
						invoked.PrmTotalAdjustment			= Adjustments  - old Adjustments










		AddFRYTotals is an Instance Action
			restricted
			Action Rules



		UpdateFranchiseSalesTotals is an Instance Action
			restricted
			Action Rules
				if (FranchiseContract.CalculateInvoiceAmountOnGrossSales)
					NetSales = ClosingSales - Adjustments
				else
					NetSales   = ClosingSales - SalesTax - Adjustments

				if (!IsAdjustment)
					TotalClosingSales	= ClosingSales
					TotalNetSales		= NetSales
					TotalSalesTax		= SalesTax
					TotalAdjustment		= Adjustments


		DeleteFranchiseSalesTotals is an Instance Action			
			restricted
			Parameters
				PrmTotalClosingSales	is an InternationalAmount
				PrmTotalNetSales		is an InternationalAmount
				PrmTotalSalesTax		is an InternationalAmount
				PrmTotalAdjustment		is an InternationalAmount
			Action Rules
				TotalClosingSales		-= PrmTotalClosingSales
				TotalNetSales			-= PrmTotalNetSales
				TotalSalesTax			-= PrmTotalSalesTax
				TotalAdjustment			-= PrmTotalAdjustment


		UpdateFranchiseSalesFromAdjustment is an Instance Action
			restricted
			Parameters
				PrmTotalClosingSales	is an InternationalAmount
				PrmTotalNetSales		is an InternationalAmount
				PrmTotalSalesTax		is an InternationalAmount
				PrmTotalAdjustment		is an InternationalAmount
			Action Rules
				TotalClosingSales		+= PrmTotalClosingSales
				TotalNetSales			+= PrmTotalNetSales
				TotalSalesTax			+= PrmTotalSalesTax
				TotalAdjustment			+= PrmTotalAdjustment


		SalesPurge is a Set Action
			restricted
			default label is "Purge"
			Parameters
				PrmCompany			is a FranchiseCompany
					default label is "Company"
				PrmCutOffDate		is Date
					default label is "CutOffDate"

			Parameter Rules
				PrmCompany
					required
				PrmCutOffDate
					required

			Local Fields
				LocalFranchiseSalesRecordCount				is Numeric 10
				LocalActor									is an Actor

			Instance Selection			
				include deleted records
				where (Company				= PrmCompany
				and	   FranchiseSales.Date <= PrmCutOffDate
				and	Status				= 9)

			Action Rules	
				Set Rules
					Entrance Rules
						initialize LocalFranchiseSalesRecordCount
						LocalActor			= actor

					Exit Rules
						send notification
							to LocalActor
							description is "PurgeProcessCompleted"
							priority is high
							detail is "Processed<LocalFranchiseSalesRecordCount>SalesRecords"

				Instance Rules
					invoke Purge ClosedStateFranchiseCycleChargeRel
					invoke Purge ClosedStateFranchiseSalesUserFieldsRel

					increment LocalFranchiseSalesRecordCount
					invoke Closed.Purge


		UpdateFieldCalculatedTax is a Set Action
			restricted
			Instance Selection
				where (FranchiseContract.TaxableFlag.Taxable
				and	CalculatedTax not entered
				and	   !IsAdjustment)

			Action Rules
				Instance Rules
					include CalculatedSalesTaxBlock
					CalculatedTax = LocalCalculatedSalesTax



	StateCycles
		FranchiseSalesLifeCycle is a StateCycle
			state field is Status

			Unreleased is a State

				Update is an Update Action
					Action Rules
						include EditData
						invoke UpdateFranchiseSalesTotals
						invoke UpdateCycleChargeAmounts

				Release is an Instance Action
					valid when (IsUnreleased)
					Action Rules



						for each FranchiseCycleChargesRel
							if (each.CustomerShipTo.TaxExemptCode.Exempt)
								constraint (each.FranchiseContractCharge.TaxableFlag.Exempt)
									"CannotRelease-InvalidTaxableFlagFor<each.FranchiseContractCharge>" 





















							if (each.ChargeType.NoteBased)
								invoke FastUpdate each.FranchiseContractCharge
									if (!IsAdjustment
									and each.FranchiseContractCharge.CurrentBalance > 0)
										invoked.CurrentBalance -= each.Principal
										invoked.ChargeToDate += each.CalculatedAmount
										invoked.RemainingPayments -= 1
									if (each.FranchiseContractCharge.RemainingPayments = 0
									or each.FranchiseContractCharge.CurrentBalance <= 0)
										invoked.PaymentAmount = each.CalculatedAmount
										invoked.Active = false


						if((FranchiseSales.SalesType.Actualinvoice
						or  FranchiseSales.SalesType.Callinestimate) 
						and EstimatedAndCallInEstimateRel exists)	

							invoke Released.CloseTransaction EstimatedAndCallInEstimateRel
								
						if (!FranchiseSales.SalesType.Aggregatesales)
							if (FranchiseSales.Date > FranchiseContractRel.LastActivityDate)	
								invoke Update FranchiseContractRel
									invoked.LastActivityDate	= FranchiseSales.Date
							if ((FranchiseSales.SalesType.Actualinvoice
							or FranchiseSales.SalesType.Callinestimate)
							and (first FrequencyContractChargesRel.NextCycleDate = FranchiseSales.Date)) 
								for each FrequencyContractChargesRel
									invoke UpdateNextCycleDate each
						make transition to Released


			Released is a State

				Invoice is an Instance Action
					restricted
					Action Rules
						make transition to Invoiced
						if ((FranchiseSales.SalesType.Actualinvoice
						or FranchiseSales.SalesType.Callinestimate)
						and FranchiseContractChargeRel.NextCycleDate = FranchiseSales.Date)
							for each FranchiseContractChargeRel
								if (FranchiseSales.Date = ValidateCycleDate.LocalNextCycleDate)
									invoke Update each
										invoked.NextCycleDate = ValidateCycleDate.LocalNextNextCycleDate

				CloseTransaction is an Instance Action
					restricted
					Action Rules	
						make transition to Closed



			Invoiced is a State

				Close is an Instance Action
					valid when (!IsClosed)
					Action Rules
						constraint (IsReleasedCallIn)
							"CallInIsNotReleasedCannotClose"
						constraint (!FranchiseSales.SalesType.Actualinvoice)
							"CannotCloseAnActualInvoice" 
						make transition to Closed

			Closed is a State

				Purge is a Purge Action
					restricted


