CashLedgerTransactionImport is a BusinessClass
    owned by cb
    prefix is CVC
    classic name is CBCTRANS

    Ontology
        symbolic key is CashLedgerTransactionImport
            classic set name is CVCSET1
            classic name for CashLedgerTransactionImport.BankTransactionCode is BANK-INST-CODE
            classic name for CashLedgerTransactionImport.TransactionNumber is TRANS-NBR
            classic name for CashLedgerTransactionImport.SequenceNumber is SEQ-NBR

    Patterns
    	implements InlineUserFields
			size is 1000
        implements StaticJava
        disable AuditIndex
		enable explicit context override
		disable Auditing 
       	disable EffectiveDated
		        

    Persistent Fields
        Company                             is a GeneralLedgerCompany
        Vendor								
		Status                              is Numeric 1
            classic name is REC-STATUS
            States
                OpenUnreconciled 	value is 1
                    default label is "Open (Unreconciled)"
                Reconciled       	value is 2
                Voided           	value is 3
                Unreleased         	value is 4
				StaleDated			value is 5
        GeneralLedgerSourceCode				is a GeneralLedgerSystemCode  
        	context of CashManagementGroup  
            classic name is SOURCE-CODE
            default label is "SourceCode"
        IssueDate                           is Date
        IssuedBankAmount                    is an InternationalAmount
            classic name is ISSUE-BNK-AMT
        IssuedBaseAmount                    is an InternationalAmount
            classic name is ISSUE-BASE-AMT
        ReconciliationDate                  is Date
            classic name is RECON-DATE
        ReconciledBankAmount                is an InternationalAmount
            classic name is RECON-BNK-AMT
        ReconciledBaseAmount                is an InternationalAmount
            classic name is RECON-BASE-AMT
        Description
        Reference

        TaxCode
        	context of CashManagementGroup  
        TaxableBankAmount                   is an InternationalAmount
            classic name is TRAN-TAXABLE
        TaxAmountTransactionCurrency        is an InternationalAmount
            classic name is TRAN-TAX-AMT
        JournalBook
            classic name is JRNL-BOOK-NBR
            restricted
        AmountTransactionCurrency           is an InternationalAmount
            classic name is ISSUE-TRAN-AMT
        BankAccountCurrencyExchangeRate     is a CurrencyRate	
            sql name is BAccountCurrencyExchangeRate
            classic name is BNK-CNV-RATE
        Currency							
            classic name is CURRENCY-CODE
        BankAccountCurrencyNumberOfDecimals is an AcctNd
            sql name is BACurrencyNumberOfDecimals
            classic name is BANK-ND
        TransactionCurrencyNumberOfDecimals is an AcctNd
            sql name is TCurrencyNumberOfDecimals
            classic name is TRAN-ND
        StatementStatus                     is a StmtStatus
            classic name is STMT-STATUS
        PayGroup							
        CurrencyExchangeRate                is a CurrencyRate	
            classic name is ORIG-CNV-RATE
        Source								is AlphaUpper size 1
        	States
                InputAp  value is "I"
                    default label is "Input AP"
                OutputAr value is "O"
                    default label is "Output AR"
        AnalysisField                       is an AnalysisFld
            classic name is ANALYSIS-FLD
		TransactionData1                    is a TransactionData
            classic name is USER-FIELD1
		TransactionData2                    is a TransactionData
            classic name is USER-FIELD2
		TransactionData3                    is a TransactionData
            classic name is USER-FIELD3
		TransactionData4                    is a TransactionData
            classic name is USER-FIELD4
        PostDate                            is Date
        DistributionAccount                 is a FinanceCodeBlock
        	context of CashManagementGroup
            classic name for DistributionAccount.ToAccountingEntity is DIS-COMPANY
            classic name for DistributionAccount.AccountingUnit is DIS-ACCT-UNIT
            classic name for DistributionAccount.GeneralLedgerChartAccount is DIS-ACCOUNT
            classic name for DistributionAccount.Project is ACTIVITY
		TaxAccountingEntity					is a ToAccountingEntity
			context of CashManagementGroup
		InterfaceAsPosted					is Boolean
		BypassCashFundUpdate				is Boolean 
		InterfacedVendor					is an OldVendor
		PayablesCompany
			disable surrogates
		GeneralLedgerEvent		
			context of CashManagementGroup
		CashAllocationCode		
		UnitsAmount							is an InternationalAmount	
			default label is "Units"		

		PayeeName                           is a VendorName 
			holds pii
        MailingName 	                    is a VendorName 
        	holds pii
        ConfirmationNumber					
        PayCurrency                         is a FromCurrency    
        PaymentAmount                       is a CurrencyAmount
        PayeePostalAddress                  is a PostalAddressV2	
        	holds pii
        BankName
        BankPostalAddress					is a PostalAddressV2	
        	holds pii
		BankAccountNumber
		BankEntity
		BankAccountType
		GlobalBankAccountType	
		CrossBorderIdentifier
		SwiftID
			default label is "SWIFT/BIC"
		ChargeCode
		IntermediaryBankName				is a BankName
        IntermediaryBankPostalAddress		is a PostalAddressV2	
        	holds pii
        IntermediaryBankEntity				is a BankEntity
        IntermediaryCrossBorderIdentifier	is a CrossBorderIdentifier
        IntermediarySwiftID					is a SwiftID
        	default label is "SWIFT/BIC"
        CommentText
        PayeeFirstName						is a FirstName			
		PayeeMiddleName						is a MiddleName			


        ImportStatus						is Numeric 1
            States
                ReadyToImport			value is 0
                Error		   			value is 1
		ErrorMessage						is Alpha 150
		CashLedgerTransactionInError		is a TransactionIDNumber
		CreatedByFES						is Boolean		
			protected
		FESManuallyUpdated					is Boolean
			protected


	Local Fields
		LocalRunGroup				is a RunGroup
        LocalSequenceNumber			is a SeqNbr 

		LocalFinanceEnterpriseGroup	is like FinanceEnterpriseGroup
		LocalDerivedFESKey 			is a FrontEndSplitKey
		LocalFEGtext				is like FinanceEnterpriseGroup
		
	Field Groups
		DistribUserFields
			include user fields
									
	Derived Fields
		DerivedVendor is a DerivedField
			type is like Vendor
			if  (Vendor not entered)
				if  (VendorForLegacyVendorRel exists)
					return first VendorForLegacyVendorRel.Vendor 
				else
				if (InterfaceMappingVendorRel exists)
					return first InterfaceMappingVendorRel.Vendor
			else
				return Vendor

		DerivedFromCurrency						is a DerivedField
			type is like FromCurrency
			if (Currency entered)
				return Currency
			else
				return CashLedgerTransactionImport.CashCode.Currency

		DerivedCashLedgerSourceRecord			is a DerivedField
			type is like CashLedgerSourceRecord
			restricted
			if (GeneralLedgerSourceCode = "AP")
				return "CHK"
			else
				return "CBT"
				
		IssueTranAmountRequiredErrorMessage		is a MessageField	
			restricted
			"IssueTransactionAmountIsRequired"
		SystemCodeRequiredErrorMessage			is a MessageField	
			restricted
			"SystemCodeIsRequired"			
		APDistribLimitErrorMessage				is a MessageField	
			restricted
			"OnlyOneDistributionLineAllowedForAPTransaction"	
		IssuedBankAmountNegativeErrorMessage	is a MessageField	
			restricted
			"DistributionAmountCannotBeNegativeForAPTransaction"		
		CashPaymentRequiredErrorMessage			is a MessageField	
			restricted
			"BankTransactionCodeMustBeACashPaymentForAPTransaction"		
		InvalidSystemCodeErrorMessage			is a MessageField	
			restricted
			"InvalidSystemCode;SystemCodeMustBeAPOrCB"	//IEFIN-59586	//CannotBeAR"	
		InvalidStatusErrorMessage				is a MessageField	
			restricted
			"InvalidStatus;StatusMustBeOpen,Reconciled,OrVoided"	
		AutoReconErrorMessage					is a MessageField	
			restricted
			"StatusMustBeReconciledIfBankTransactionCodeSetForAutoReconciliation"	
		ClearingAccountErrorMessage				is a MessageField
			restricted
			"CannotRelease:CashAccountsNotSetUpInCompanyCashCode"	
		ReconAccountErrorMessage					is a MessageField
			restricted
			"CannotRelease:ReconciliationAccountsNotSetUpInCompanyCashCode"	
		ReconBankAmountRequiredErrorMessage		is a MessageField	
			restricted
			"ReconciledBankAmountIsRequiredForReconciledTransaction"
		ReconDateInvalidErrorMessage			is a MessageField	
			restricted
			"ReconciliationDateValidOnlyOnReconciledOrVoidedTransaction"	
		ReconBankAmountInvalidErrorMessage		is a MessageField	
			restricted
			"ReconciledBankAmountMustBeZeroForOpenTransaction"
		ReconBaseAmountInvalidErrorMessage		is a MessageField	
			restricted
			"ReconciledFunctionalAmountMustBeZeroForOpenTransaction"
		ReconBankAmountNegativeErrorMessage		is a MessageField	
			restricted
			"ReconciledBankAmountCannotBeNegative"
		ReconBaseAmountNegativeErrorMessage		is a MessageField	
			restricted
			"ReconciledFunctionalAmountCannotBeNegative"
		TranBankAmountNegativeErrorMessage		is a MessageField	
			restricted
			"IssueTransactionAmountCannotBeNegative"
		IssuedBaseAmountNegativeErrorMessage	is a MessageField	
			restricted
			"FunctionalAmountCannotBeNegative"
		IssueDateRequiredErrorMessage			is a MessageField	
			restricted
			"IssueDateIsRequired"
		AccountInvalidErrorMessage				is a MessageField	
			restricted
			"FinanceStructureMustBeBlankForVoidedTransaction"	
		TaxDataInvalidErrorMessage				is a MessageField	
			restricted
			"TaxDataMustBeBlankForVoidedTransaction"
		TaxableAmountNegativeErrorMessage		is a MessageField	
			restricted
			"TaxableAmountCannotBeNegativeForNonAPTransaction"	
		VendorRequiredForAPErrorMessage			is a MessageField	
			restricted
			"VendorOrInterfacedVendorRequiredForAPTransaction"
		InterfacedVendorNotFoundMsg 			is a MessageField
			restricted
			"InterfacedVendorNotFound"
		InterfaceVendorDoesNotMatchVendorMsg 	is a MessageField
			restricted
			"InterfaceVendorDoesNotMatchVendor"
		PayGroupRequiredAPErrorMessage			is a MessageField	
			restricted
			"PayGroupRequiredForAPTransaction"
		PayGroupDoesNotExistErrorMessage		is a MessageField	
			restricted
			"PayGroupDoesNotExist"
		PayGroupInvalidErrorMessage				is a MessageField	
			restricted
			"PayGroupPostCompanyMustEqualTransactionCompany"		
		CashCodeDefaultPostCompanyValidMessage	is a MessageField
			restricted
			"TransactionCompanyMustEqualCashCodeDefaultPostCompany"
		DescriptionMessage						is a MessageField
			restricted
			"CreatedByCashLedgerTransactionInterface"	
		IssuedBankAmountRequiredForAPErrorMessage	is a MessageField	
			restricted
			"ZeroPaymentNotAllowed;IssuedBankAmountRequiredForAPTransaction"
		InterfacePostingMessage 				is a LabelField 
			restricted
			"JournalCreatedByCashLedgerTransactionImport"
		CurrenciesDifferIssueTranAmountRequiredErrorMessage		is a MessageField	
			restricted
			"CurrencyAndCashCodeCurrencyDiffer;IssueTransactionAmountIsRequired"	
		AllocationAndAccountErrorMessage	is a MessageField 
			restricted
			"CannotSpecifyBothCashAllocationCodeAndAccount"		
		BypassWithoutPostedErrorMessage		is a MessageField	
			restricted
			"BypassCashFundUpdateRequiresSelectingInterfaceAsPosted"
		StaleDateAccountUndefinedErrorMessage is a MessageField
			restricted
			"CannotStaleDate;StaleDateAccountNotDefinedInCompanyCashCode"

		ReferenceNumberErrorMessage    is a MessageField
            restricted
            "ReferenceNumberHasErrors"
			 
	Transient Fields
		TransientFromCurrency						is a FromCurrency
			derive value from DerivedFromCurrency

    Conditions
    	RecordExists
    		restricted
    		when (CashLedgerTransactionImport exists)
    		
		IsPartiallyImported
			when (HasCashLedgerTransactionImportInProcess)	


		HasCashLedgerTransactionImportInProcess	
			restricted
			when (CashLedgerTransactionInErrorRel.ImportInProcess = true)

		PayGroupExists
			when (PayGroupRel exists)
			
		PayGroupNotValid
			when (PayGroupRel.exists
			and   PayGroupRel.PostCompany 		!= Company
			and   CashLedgerTransactionImport.CashCode.DefaultPostCompany 	!entered)

		CashCodeDefaultPostCompanyNotValid
			when (CashLedgerTransactionImport.CashCode.DefaultPostCompany 	entered
			and   CashLedgerTransactionImport.CashCode.DefaultPostCompany	!= Company)

		AutoNumberingAllowed
			restricted
			when ((CashLedgerTransactionImport.BankTransactionCode.BankTransactionType.BankService
			and    GeneralLedgerSourceCode != "AP")
			and   ((CashManagementGroup.AutoTranNumberByCompany
			and     Company.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoTranNumberByCashCode
			and     CashLedgerTransactionImport.CashCode.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoTranNumberByBankTransactionCode
			and     CashLedgerTransactionImport.BankTransactionCode.AutoTransactionNumbering)
			or     (CashManagementGroup.AutoTranNumberByCashCodeBankTranCode
			and     CashLedgerTransactionImport.BankTransactionCode.AutoTransactionNumbering
			and     CashLedgerTransactionImport.CashCode.AutoTransactionNumbering)))

		FrontEndSplitsEnabled
			restricted
			when (actor.context.FinanceEnterpriseGroup.FrontEndSplits)	
		
		IsValidForActorContext		
			restricted
			when (CashManagementGroup = actor.context.FinanceEnterpriseGroup)	
																
	Relations
	
		CashLedgerTransactionInErrorRel
			one-to-one relation to CashLedgerTransaction
			Field Mapping uses symbolic key
	           	related.CashManagementGroup		= CashManagementGroup	
                related.BankTransactionCode		= CashLedgerTransactionImport.BankTransactionCode
				related.CashLedgerSourceRecord	= DerivedCashLedgerSourceRecord
                related.CashLedgerTransaction	= CashLedgerTransactionInError







                
        CompanyCashCodeRel
            one-to-one relation to CompanyCashCode
            Field Mapping uses symbolic key
                related.Company  				= Company
                related.CashCode 				= CashLedgerTransactionImport.CashCode

 		CashLedgerTransactionImportRel
 			one-to-many relation to CashLedgerTransactionImport
 			Field Mapping uses symbolic key
 				related.CashManagementGroup										= CashManagementGroup
 			Instance Selection
            	where (related.CashLedgerTransactionImport.RunGroup				= CashLedgerTransactionImport.RunGroup
            	and    related.CashLedgerTransactionImport.CashCode				= CashLedgerTransactionImport.CashCode
            	and    related.CashLedgerTransactionImport.BankTransactionCode	= CashLedgerTransactionImport.BankTransactionCode)

		CashLedgerTransactionImportRel2
 			one-to-many relation to CashLedgerTransactionImport
 			Field Mapping uses symbolic key
 				related.CashManagementGroup										= CashManagementGroup
 			Instance Selection
            	where (related.CashLedgerTransactionImport.RunGroup				= CashLedgerTransactionImport.RunGroup
            	and    related.CashLedgerTransactionImport.CashCode				= CashLedgerTransactionImport.CashCode
            	and    related.CashLedgerTransactionImport.BankTransactionCode	= CashLedgerTransactionImport.BankTransactionCode
				and    related.CashLedgerTransactionImport.TransactionNumber	= CashLedgerTransactionImport.TransactionNumber)











 
  		CashLedgerTransactionImportMultiSeqNbrRel
 			one-to-many relation to CashLedgerTransactionImport
 			Field Mapping uses symbolic key
 				related.CashManagementGroup										= CashManagementGroup
 			Instance Selection
            	where (related.CashLedgerTransactionImport.RunGroup				= CashLedgerTransactionImport.RunGroup
            	and    related.CashLedgerTransactionImport.CashCode				= CashLedgerTransactionImport.CashCode
            	and    related.CashLedgerTransactionImport.BankTransactionCode	= CashLedgerTransactionImport.BankTransactionCode
            	and    related.CashLedgerTransactionImport.TransactionNumber	= CashLedgerTransactionImport.TransactionNumber
            	and    related.CashLedgerTransactionImport.SequenceNumber		> CashLedgerTransactionImport.SequenceNumber)
            	           	
		PayGroupRel
			one-to-many relation to PayGroup
			Field Mapping uses symbolic key
                related.VendorGroup = Company.BusinessGroup  
				related.PayGroup	= PayGroup

		GeneralLedgerSystemCodeRel
			one-to-one relation to GeneralLedgerSystemCode
			Field Mapping uses symbolic key
				related.FinanceEnterpriseGroup		= LocalFinanceEnterpriseGroup
				related.GeneralLedgerSystemCode		= "CB"

		VendorForLegacyVendorRel
            one-to-many relation to Vendor
            Field Mapping uses ByLegacyVendor
				related.VendorGroup						= PayGroup.VendorGroup
				related.LegacyVendor					= InterfacedVendor
			
		InterfaceMappingVendorRel
            one-to-many relation to VendorMappingTableInterface
            Field Mapping uses symbolic key
				related.VendorGroup						= PayGroup.VendorGroup
			Instance Selection
				where (related.VendorMappingTableInterface.OldVendor	= InterfacedVendor)

		FESDistributionsByKeyLocalRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey

		FESDistByDistributionRel
			one-to-many relation to FrontEndSplitDistributions
			Field Mapping uses ByFundingGroup
				related.FinanceEnterpriseGroup						= LocalFEGtext
			    related.FrontEndSplitDistributions.FundingKey 		= LocalDerivedFESKey
			    related.FrontEndSplitDistributions.Distribution		= CashLedgerTransactionImport.SequenceNumber

        StaleDatingGLAccountRel
			one-to-many relation to StaleDatingGLAccount
            Field Mapping uses symbolic key
            	related.Company             = Company
                related.CashCode            = CashLedgerTransactionImport.CashCode
			Instance Selection
            	where (related.PayablesCompanyProcessLevel !entered)
			
	Sets
		ByCashLedgerTransactionInError
			indexed
			Sort Order
				CashManagementGroup
				CashLedgerTransactionImport.CashCode
				CashLedgerTransactionImport.BankTransactionCode
				CashLedgerTransactionInError
				CashLedgerTransactionImport.TransactionNumber
				CashLedgerTransactionImport.SequenceNumber
				CashLedgerTransactionImport.RunGroup
 			                            				 
    Field Rules

        Company
            required

		GeneralLedgerSourceCode
			required

        Status
            required
            if (InterfaceAsPosted)
            	constraint (Status.OpenUnreconciled 
				or Status.Reconciled)
					"StatusMustBe_OpenOr_ReconciledWhen_Interface_As_PostedIsSelected"

        IssueDate
            required
			
        IssuedBankAmount
            if  (GeneralLedgerSourceCode != "AP"
            and  UnitsAmount                !entered
            and (CashAllocationCode     !entered
            or   !CashAllocationCode.AllocationType.Amount))
                required
                    "IssuedBankAmountOrUnitsAmountRequired"
			
		Description
			default to DescriptionMessage

		PayablesCompany
			if (GeneralLedgerSourceCode = "AP")
				default to Company
											
	Rule Blocks


	Actions
		InterfaceCashLedgerTransactions is a Set Action

			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmRunGroup					is AlphaUpper 30
					default label is "RunGroup"
				PrmMoveErrorsToNewRunGroup  is Boolean
					default label is "MoveErrorsToNewRunGroup"
				PrmErrorRunGroupPrefix		is AlphaUpper 15
					default label is "ErrorRunGroupPrefix"
				PrmCurrencyTable			is a CurrencyTable
					default label is "CurrencyTable"
				PrmJournalizeDistributions	is Boolean
					default label is "JournalizeReleasedDistributions"
				PrmAutoNumberingAction 			is Numeric 1
					States
						OverrideNumberWithAnAutoGeneratedNumber	value is 1
						BypassAutoTransactionNumbering			value is 2
					default label is "AutoTransactionNumberingAction"
											
			Parameter Rules
				PrmRunGroup
					required
						"RunGroupIsRequired"
					LocalFinanceEnterpriseGroup = PrmCashManagementGroup        
				PrmAutoNumberingAction
					if (PrmCashManagementGroup.AutoTranNumberForTransactionForm)
						required
							"AutoNumberingActionSelectionRequired"
				PrmJournalizeDistributions													
					LocalFinanceEnterpriseGroup	= PrmCashManagementGroup
					constraint (GeneralLedgerSystemCodeRel.EncumbranceOption.NotUsed)
						"JournalizeDistributionsNotAllowedWhenBudgetingSetToTrackOrTrackAndEdit"
																	
			Local Fields
				ErrorOccurred							is Boolean
				TransactionError						is Boolean
				DistributionError						is Boolean
				PayablesPaymentError					is Boolean
				LocalErrorMessage						is Alpha 150
				LocalCompletionMessage					is Alpha 150
				LocalErrorRunGroup						is AlphaUpper 30
				LocalErrorSequence						is Numeric 12
				PostingDateError						is Boolean
				LocalTransactionIDNumber				is a TransactionIDNumber
				CurrentTransactionIDNumber				is a TransactionIDNumber
				ErrorUpdate								is Boolean
				LocalInstanceCount						is Numeric 10
				LocalOpenUnreconciledTransaction		is Boolean
				LocalReconciledTransaction				is Boolean
				LocalVoidedTransaction					is Boolean
				LocalCashTransactionImportResultView	is a CashTransactionImportResult view				
				LocalCashLedgerTransaction				is a CashLedgerTransaction view
				LocalCashLedgerPayablesPayment			is a CashLedgerPayablesPayment view
				LocalGeneralLedgerSourceCode			is a GeneralLedgerSystemCode

				LocalStatus                            	is Numeric 1
					classic name is REC-STATUS
					States
						OpenUnreconciled 	value is 1
							default label is "Open (Unreconciled)"
						Reconciled       	value is 2
						Voided           	value is 3
						Unreleased         	value is 4
						StaleDated			value is 5
				DistribUserFieldsFound					is Boolean
				LocalInterfaceAsPosted					is Boolean
				LocalBypassCashFundUpdate				is Boolean					
				GLTJournalizeGroup						is like JournalizeGroup
				CommitNow								is Boolean
				LocalInterfacedTransactionsAmount		is an InternationalAmount	
				LocalInterfacedTransactionsCount		is Numeric 7				
				LocalAllocationCodeProcessing 			is Boolean					
				
				
			Instance Selection
				where (CashManagementGroup					= PrmCashManagementGroup
				and    CashLedgerTransactionImport.RunGroup	= PrmRunGroup)
			
			Sort Order
				CashManagementGroup
				CashLedgerTransactionImport.RunGroup
				CashLedgerTransactionImport.CashCode
				CashLedgerTransactionImport.BankTransactionCode
				CashLedgerTransactionImport.TransactionNumber
				CashLedgerTransactionImport.SequenceNumber

  			Accumulators
				NetTransactionAmount
				NumberOfDistributions
				NumberOfIssuedTransactions
				NumberOfReconciledTransactions
				CurrentReconciledAmount
				UnreconciledAmount
				
			Action Rules
				Empty Set Rules
					if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
                    or  GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)				
						invoke ProcessInterfaceBatchEdits BudgetEditBatch in background			
							invoked.PrmFinanceEnterpriseGroup	= PrmCashManagementGroup
							invoked.PrmBusinessClassName		= "CashLedgerTransaction"
				Set Rules
					Exit Rules
						if (ErrorOccurred)
							LocalCompletionMessage = PrmCashManagementGroup.FinanceEnterpriseGroup.InterfaceErrorsMovedMessage
							LocalCompletionMessage += (" " + LocalErrorRunGroup)
						else		
							LocalCompletionMessage = PrmCashManagementGroup.FinanceEnterpriseGroup.InterfaceCompleteMessage
				
				CashManagementGroup Set Rules
					Entrance Rules
						ErrorOccurred			= false
						
						if (PrmJournalizeDistributions)
							LocalFinanceEnterpriseGroup = PrmCashManagementGroup
							invoke IncrementLastJournalizeGroup GeneralLedgerSystemCodeRel
							GLTJournalizeGroup = GeneralLedgerSystemCodeRel.DerivedJournalizeGroup
							CommitNow			= true
						
						invoke Create CashTransactionImportResult
							assign result to LocalCashTransactionImportResultView
							invoked.CashManagementGroup	= CashManagementGroup
							invoked.RunTime				= current timestamp
							invoked.RunGroup			= PrmRunGroup
							invoked.RunType				= 3 
							invoked.JournalizeGroup		= GLTJournalizeGroup

					Exit Rules
						LocalFinanceEnterpriseGroup = PrmCashManagementGroup        
						if (GeneralLedgerSystemCodeRel.EncumbranceOption.Track
						or  GeneralLedgerSystemCodeRel.EncumbranceOption.TrackAndEdit)				
							invoke ProcessInterfaceBatchEdits BudgetEditBatch in background			
								invoked.PrmFinanceEnterpriseGroup	= PrmCashManagementGroup
								invoked.PrmBusinessClassName		= "CashLedgerTransaction"
						if (PrmJournalizeDistributions)
							invoke JournalizeDistributionsForGroup CashLedgerGLDistribution in background
								invoked.PrmCashManagementGroup	= PrmCashManagementGroup
								invoked.PrmJournalizeGroup		= GLTJournalizeGroup
								invoked.PrmDescription			= InterfacePostingMessage

						invoke Update LocalCashTransactionImportResultView.CashTransactionImportResult
							if (ErrorOccurred)
								invoked.Status 		  = 2	
								invoked.ErrorRunGroup = LocalErrorRunGroup
							else
								invoked.Status        = 1	
							invoked.InterfacedTransactionsAmount	= LocalInterfacedTransactionsAmount	
							invoked.InterfacedTransactionsCount		= LocalInterfacedTransactionsCount	
								

				CashLedgerTransactionImport.BankTransactionCode Set Rules
					Entrance Rules
						initialize LocalInstanceCount
						initialize CurrentTransactionIDNumber
					Exit Rules
						if (CurrentReconciledAmount	entered
						or  UnreconciledAmount		entered)
							invoke Create CashCodeConsolidatedUpdate
								invoked.CashManagementGroup								= PrmCashManagementGroup
								invoked.CashCode										= CashLedgerTransactionImport.CashCode
								invoked.CashCodeConsolidatedUpdate.Company				= Company
								invoked.CashCodeConsolidatedUpdate.BankTransactionCode	= CashLedgerTransactionImport.BankTransactionCode
								invoked.IssuedAmount									= (CurrentReconciledAmount + UnreconciledAmount)
								invoked.IssuedCount										= NumberOfIssuedTransactions
								invoked.UnreconciledAmount								= UnreconciledAmount
								invoked.ReconciledAmount								= CurrentReconciledAmount
								invoked.ReconciledCount									= NumberOfReconciledTransactions
						
				CashLedgerTransactionImport.TransactionNumber Set Rules
					Entrance Rules
						initialize LocalErrorMessage
						initialize LocalTransactionIDNumber
						NumberOfDistributions				= 1
						TransactionError					= false
						DistributionError					= false
						PayablesPaymentError				= false
						LocalOpenUnreconciledTransaction	= false
						LocalReconciledTransaction			= false
						LocalVoidedTransaction				= false	

						LocalGeneralLedgerSourceCode		= GeneralLedgerSourceCode
						LocalStatus							= Status
						DistribUserFieldsFound				= false
						LocalInterfaceAsPosted				= InterfaceAsPosted
						LocalBypassCashFundUpdate			= BypassCashFundUpdate	
						
					Exit Rules
						if (!TransactionError) 
							invoke Unreleased.Update LocalCashLedgerTransaction.CashLedgerTransaction
								invoked.CreateFromBatchType			= 2
								if (LocalGeneralLedgerSourceCode 	= "AP")
									invoked.CashLedgerTransactionIdentifier	= LocalCashLedgerPayablesPayment.CashLedgerTransactionIdentifier
								if (LocalGeneralLedgerSourceCode 	!= "AP"
								and !LocalVoidedTransaction
								and !LocalAllocationCodeProcessing)

									invoked.LastDistributionSequence		= (NumberOfDistributions -1)
								if (!DistributionError
								and !PayablesPaymentError)
									invoked.ImportInProcess				= false
									invoked.OriginatingImportRun		= LocalCashTransactionImportResultView.CashTransactionImportResult
								if (LocalInterfaceAsPosted)	
									invoked.LocalInterfaceAsPosted							= LocalInterfaceAsPosted
							if (!DistributionError
							and !PayablesPaymentError
							and !Status.Unreleased)
								invoke Unreleased.ReleaseFromImport LocalCashLedgerTransaction.CashLedgerTransaction
									resume on error
										ErrorOccurred		= true
										TransactionError	= true
										LocalErrorMessage	= error message
									invoked.PrmInterfaceAsPosted = LocalInterfaceAsPosted
									invoked.PrmJournalizeGroup	 = GLTJournalizeGroup	
									invoked.PrmBypassCashFundUpdate	= LocalBypassCashFundUpdate 
								if (TransactionError)
									invoke Unreleased.Update LocalCashLedgerTransaction.CashLedgerTransaction
										invoked.ImportErrorMessage	= LocalErrorMessage
								else
									if (!Status.Voided)
										if (Status.Reconciled
										or  CashLedgerTransactionImport.BankTransactionCode.AutomaticReconciliation)
											if (CashLedgerTransactionImport.BankTransactionCode.TransactionType.CreditTransaction)
												CurrentReconciledAmount		+= AmountTransactionCurrency
											else
												if (LocalGeneralLedgerSourceCode = "AP")
													CurrentReconciledAmount		-= IssuedBankAmount
												else
													CurrentReconciledAmount		-= AmountTransactionCurrency
											NumberOfIssuedTransactions		+= 1
											NumberOfReconciledTransactions	+= 1
										else
											if (CashLedgerTransactionImport.BankTransactionCode.TransactionType.CreditTransaction)
												UnreconciledAmount			+= AmountTransactionCurrency
											else
												if (LocalGeneralLedgerSourceCode = "AP")
													UnreconciledAmount			-= IssuedBankAmount
												else
													UnreconciledAmount			-= AmountTransactionCurrency
											NumberOfIssuedTransactions		+= 1

							if (DistribUserFieldsFound)
								invoke UpdateTextSearchIndexes LocalCashLedgerTransaction.CashLedgerTransaction	
						if ((TransactionError
						or   DistributionError)
						and  PrmJournalizeDistributions)
							invoke UpdateJournalizeGroup LocalCashLedgerTransaction.CashLedgerTransaction
								invoked.PrmJournalizeGroup	= blank
																
				Instance Rules
					if (CommitNow)
						commit transaction
						CommitNow = false
					
					if (ImportStatus.Error)
						ErrorOccurred	  = true
						DistributionError = true
					else

						if (LocalInstanceCount !entered)
							for each distinct CashLedgerTransactionImport.TransactionNumber in CashLedgerTransactionImportRel
								LocalInstanceCount	+= 1
							increment CashLedgerTransactionImport.BankTransactionCode.TransactionIDNumber by LocalInstanceCount
							CurrentTransactionIDNumber	= (CashLedgerTransactionImport.BankTransactionCode.TransactionIDNumber - LocalInstanceCount + 1)
							commit transaction
						if (CashLedgerTransactionInError entered)
							LocalCashLedgerTransaction		= CashLedgerTransactionInErrorRel.CashLedgerTransaction
							LocalTransactionIDNumber		= CashLedgerTransactionInError
							NumberOfDistributions			+= CashLedgerTransactionInErrorRel.LastDistributionSequence
							NetTransactionAmount			+= CashLedgerTransactionInErrorRel.IssuedBankAmount

							if (Status.OpenUnreconciled)
								LocalOpenUnreconciledTransaction	= true
							if (Status.Reconciled)
								LocalReconciledTransaction			= true
							if (Status.Voided)
								LocalVoidedTransaction				= true
							if (PrmJournalizeDistributions)
								invoke UpdateJournalizeGroup CashLedgerTransactionInErrorRel.CashLedgerTransaction
									invoked.PrmJournalizeGroup	= GLTJournalizeGroup
							
						if (!CashLedgerTransactionInError	entered
						and LocalTransactionIDNumber 	!entered)
							if (GeneralLedgerSourceCode not entered)
								ErrorOccurred		= true
								TransactionError	= true
								LocalErrorMessage	= SystemCodeRequiredErrorMessage 
							if (GeneralLedgerSourceCode != "AP"	//IEFIN-59586	//"AR")
							and GeneralLedgerSourceCode != "CB") 
								ErrorOccurred		= true
								TransactionError	= true
								LocalErrorMessage	= InvalidSystemCodeErrorMessage	
							if (!Status.OpenUnreconciled
							and	!Status.Reconciled
							and !Status.Voided
							and !Status.Unreleased
							and !Status.StaleDated)
								ErrorOccurred		= true
								TransactionError	= true
								LocalErrorMessage	= InvalidStatusErrorMessage						
							if (CashLedgerTransactionImport.BankTransactionCode.AutomaticReconciliation)	
								if (Status.OpenUnreconciled
								or  Status.Voided)							
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= AutoReconErrorMessage
							if (Status.OpenUnreconciled)
								if (CashLedgerTransactionImport.BankTransactionCode.AutomaticReconciliation
								and CompanyCashCodeRel.ReconcileGeneralLedgerEntry)
									if (CompanyCashCodeRel.ReconciliationAccount !entered) 
										ErrorOccurred		= true
										TransactionError	= true
										LocalErrorMessage	= ReconAccountErrorMessage	
								else	
									if (CompanyCashCodeRel.CashAccount !entered) 
										ErrorOccurred		= true
										TransactionError	= true
										LocalErrorMessage	= ClearingAccountErrorMessage
							if (Status.Reconciled
							and ReconciledBankAmount not entered									
							and GeneralLedgerSourceCode != "AP"
							and !CashLedgerTransactionImport.BankTransactionCode.BankTransactionType.BankService)
								ErrorOccurred		= true
								TransactionError	= true
								LocalErrorMessage	= ReconBankAmountRequiredErrorMessage	
							if (BypassCashFundUpdate	
							and !InterfaceAsPosted)
								ErrorOccurred		= true
								TransactionError	= true
								LocalErrorMessage	= BypassWithoutPostedErrorMessage
							if (Status.OpenUnreconciled)
								if (ReconciliationDate entered)									
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= ReconDateInvalidErrorMessage		
								if (ReconciledBankAmount entered)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= ReconBankAmountInvalidErrorMessage	
								if (ReconciledBaseAmount entered)									
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= ReconBaseAmountInvalidErrorMessage	
							if (Status.StaleDated)
								if (StaleDatingGLAccountRel.StaleDateAccount not entered)
                        			ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= StaleDateAccountUndefinedErrorMessage
							if (ReconciledBankAmount < 0)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= ReconBankAmountNegativeErrorMessage	
							if (ReconciledBaseAmount < 0)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= ReconBaseAmountNegativeErrorMessage	
							if (AmountTransactionCurrency < 0)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= TranBankAmountNegativeErrorMessage	
							if (IssuedBaseAmount < 0)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= IssuedBaseAmountNegativeErrorMessage	
							if (IssueDate not entered)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= IssueDateRequiredErrorMessage																					
							if (Status.Voided)
								if (DistributionAccount entered)									
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= AccountInvalidErrorMessage		
								if (TaxCode entered
								or  TaxableBankAmount entered
								or  TaxAmountTransactionCurrency entered
								or  TaxAccountingEntity entered)
									ErrorOccurred		= true								
									TransactionError	= true
									LocalErrorMessage	= TaxDataInvalidErrorMessage																			
							if (GeneralLedgerSourceCode != "AP")
								if (TaxableBankAmount < 0)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= TaxableAmountNegativeErrorMessage							
							if (GeneralLedgerSourceCode = "AP")

								if (CashLedgerTransactionImportMultiSeqNbrRel exists)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= APDistribLimitErrorMessage
								else	
								if (IssuedBankAmount < 0)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= IssuedBankAmountNegativeErrorMessage
								else			
								if (!CashLedgerTransactionImport.BankTransactionCode.BankTransactionType.CashPayment)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= CashPaymentRequiredErrorMessage
								else	
								if (PayGroup not entered)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= PayGroupRequiredAPErrorMessage
								else	
								if (!PayGroupExists)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= PayGroupDoesNotExistErrorMessage
								else		
								if (PayGroupNotValid)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= PayGroupInvalidErrorMessage	
								else	
								if (Vendor not entered
								and InterfacedVendor not entered)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= VendorRequiredForAPErrorMessage
								else	
								if  (Vendor not entered
								and  InterfacedVendor entered
								and  VendorForLegacyVendorRel !exists
								and  InterfaceMappingVendorRel !exists)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= InterfacedVendorNotFoundMsg
								else	
								if  (Vendor entered
								and  InterfacedVendor entered					
								and  Vendor != first VendorForLegacyVendorRel.Vendor
								and  Vendor != first InterfaceMappingVendorRel.Vendor)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= InterfaceVendorDoesNotMatchVendorMsg
								else
								if (AmountTransactionCurrency not entered	
								and Currency != CashLedgerTransactionImport.CashCode.Currency)	
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= CurrenciesDifferIssueTranAmountRequiredErrorMessage
								if (IssuedBankAmount not entered)
									if (Vendor entered
									and !Vendor.VendorClass.ZeroPaymentAllowed)
										ErrorOccurred		= true
										TransactionError	= true
										LocalErrorMessage	= IssuedBankAmountRequiredForAPErrorMessage
									else
									if (InterfacedVendor entered)
										if (VendorForLegacyVendorRel exists
										and !first VendorForLegacyVendorRel.Vendor.VendorClass.ZeroPaymentAllowed)
											ErrorOccurred		= true
											TransactionError	= true
											LocalErrorMessage	= IssuedBankAmountRequiredForAPErrorMessage	
										else
										if (InterfaceMappingVendorRel exists
										and !first InterfaceMappingVendorRel.Vendor.VendorClass.ZeroPaymentAllowed)
											ErrorOccurred		= true
											TransactionError	= true
											LocalErrorMessage	= IssuedBankAmountRequiredForAPErrorMessage		
								else		
								if (CashCodeDefaultPostCompanyNotValid)
									ErrorOccurred		= true
									TransactionError	= true
									LocalErrorMessage	= CashCodeDefaultPostCompanyValidMessage
							if (!TransactionError)
								invoke Create CashLedgerTransaction
									assign result to LocalCashLedgerTransaction
									resume on error
										ErrorOccurred		= true
										TransactionError	= true
										LocalErrorMessage	= error message
									fill in fields from this instance
										except invoked.Status
									if (Status.Unreleased)
										invoked.Status									= 0
									invoked.CashManagementGroup							= CashManagementGroup
									invoked.CashCode									= CashLedgerTransactionImport.CashCode						
									invoked.BankTransactionCode							= CashLedgerTransactionImport.BankTransactionCode
									invoked.CashLedgerSourceRecord						= DerivedCashLedgerSourceRecord
									invoked.CashLedgerTransaction						= CurrentTransactionIDNumber
									if (PrmAutoNumberingAction.OverrideNumberWithAnAutoGeneratedNumber
									and AutoNumberingAllowed)
										invoked.TransactionNumber						= blank
									else	
										invoked.TransactionNumber						= CashLedgerTransactionImport.TransactionNumber
									invoked.IssueDate									= IssueDate
									invoked.SourceCode 									= GeneralLedgerSourceCode
									invoked.Company.OrigCompany 						= Company
									invoked.Reference 									= Reference
									if (Description not entered)
										invoked.Description								= DescriptionMessage
									else
										invoked.Description								= Description	
									invoked.GeneralLedgerPostDate 						= PostDate
									invoked.Source 										= Source
									invoked.GeneralLedgerEvent 							= GeneralLedgerEvent		
									if (Status.Reconciled
									or  Status.Voided
									or  Status.StaleDated) 
										if (ReconciliationDate not entered
										and !Status.StaleDated)
											invoked.ReconciliationData.ExchangeDate 	= IssueDate
										else	
											invoked.ReconciliationData.ExchangeDate 	= ReconciliationDate
										if (Status.Reconciled)	
											invoked.ReconciliationData.CurrencyAmount 							= ReconciledBankAmount
											invoked.ReconciliationData.FunctionalAmount.EnteredCurrencyAmount 	= ReconciledBaseAmount
									if (GeneralLedgerSourceCode = "AP")
										if (Currency not entered
										or  Currency = CashLedgerTransactionImport.CashCode.Currency)	
											invoked.Currency									= CashLedgerTransactionImport.CashCode.Currency
											invoked.IssueTranAmt								= IssuedBankAmount	
										else	
											invoked.Currency									= Currency
											invoked.IssueTranAmt								= AmountTransactionCurrency	
										invoked.PayablesCompanyVendorProcLevel.PayablesCompany	= PayablesCompany	
										invoked.PayablesCompanyVendorProcLevel.Vendor 			= DerivedVendor
										invoked.PayGroup										= PayGroup
										invoked.IssuedBankAmount								= IssuedBankAmount
										invoked.IssuedBankAmountUnsigned						= IssuedBankAmount 									
									else
										invoked.Currency										= CashLedgerTransactionImport.CashCode.Currency
										invoked.IssuedBankAmount								= AmountTransactionCurrency
										invoked.IssuedBankAmountUnsigned						= AmountTransactionCurrency 									
									invoked.IssuedBaseAmount.FunctionalAmount.EnteredCurrencyAmount	= IssuedBaseAmount
									invoked.OriginatingImportRun								= LocalCashTransactionImportResultView.CashTransactionImportResult
									invoked.ImportInProcess										= true	
									if (!Status.Unreleased)
										invoked.ImportStatus									= Status
									invoked.CurrencyTable										= PrmCurrencyTable
									invoked.AutoNumberingAction									= PrmAutoNumberingAction
									if (LocalInterfaceAsPosted)
										invoked.LocalInterfaceAsPosted							= LocalInterfaceAsPosted

								if (!TransactionError)
									LocalTransactionIDNumber	= CurrentTransactionIDNumber 
									CurrentTransactionIDNumber	+= 1
									LocalInterfacedTransactionsCount	+= 1	
									if (GeneralLedgerSourceCode = "AP")			
										LocalInterfacedTransactionsAmount		+= IssuedBankAmount	
									else
										LocalInterfacedTransactionsAmount		+= AmountTransactionCurrency

									if (Status.OpenUnreconciled)
										LocalOpenUnreconciledTransaction	= true
									if (Status.Reconciled)
										LocalReconciledTransaction			= true
									if (Status.Voided)
										LocalVoidedTransaction				= true	
									if (DistribUserFields entered)
										DistribUserFieldsFound 				= true
										
						if (TransactionError)
							if (PrmMoveErrorsToNewRunGroup)
								if (!LocalErrorRunGroup entered)
									increment PrmCashManagementGroup.LastErrorRunGroupNumber
									LocalErrorRunGroup = PrmErrorRunGroupPrefix + "ERRORS_" + PrmCashManagementGroup.LastErrorRunGroupNumber
							invoke UpdateError ReadyToImport this instance 
								invoked.PrmErrorMessage			= LocalErrorMessage
								if (PrmMoveErrorsToNewRunGroup)
									invoked.PrmErrorRunGroup	= LocalErrorRunGroup
						else
							if (LocalGeneralLedgerSourceCode = "AP")
								initialize LocalErrorMessage
								invoke CreateFromBatch CashLedgerPayablesPayment
									assign result to LocalCashLedgerPayablesPayment	
									resume on error
										ErrorOccurred			= true
										PayablesPaymentError	= true
										LocalErrorMessage		= error message
									invoked.CashManagementGroup								= CashManagementGroup
									invoked.CashCode										= CashLedgerTransactionImport.CashCode						
									invoked.CashLedgerPayablesPayment.BankTransactionCode	= CashLedgerTransactionImport.BankTransactionCode
									invoked.CashLedgerPayablesPayment.TransactionIDNumber	= LocalTransactionIDNumber
									invoked.TransactionNumber								= CashLedgerTransactionImport.TransactionNumber										
									invoked.PayablesCompanyProcessLevel.PayablesCompany		= PayablesCompany	
									invoked.PayGroup										= PayGroup
									invoked.PaidVendor										= DerivedVendor
									invoked.PaidName										= Vendor.VendorName
									if (Currency not entered
									or  Currency = CashLedgerTransactionImport.CashCode.Currency)	
										invoked.PayCurrency									= CashLedgerTransactionImport.CashCode.Currency
										invoked.PaymentAmount								= IssuedBankAmount	
										invoked.PaidAmountInvoiceCurrency					= IssuedBankAmount	
									else	
										invoked.PayCurrency									= Currency
										invoked.PaymentAmount								= AmountTransactionCurrency	
										invoked.PaidAmountInvoiceCurrency					= AmountTransactionCurrency	
									invoked.VendorGroup										= PayGroup.VendorGroup
									invoked.Status											= 2	
									invoked.ReleasedStatus 									= "N"
									invoked.PaymentDate										= IssueDate
									invoked.CurrencyTable									= PrmCurrencyTable
									invoked.PaymentAmountBankAccountCurrency.EnteredCurrencyAmount	= IssuedBankAmount	
									invoked.BasePaymentAmount.EnteredCurrencyAmount					= IssuedBaseAmount	
									invoked.AppliedBaseAmount.BaseAmount.EnteredCurrencyAmount		= IssuedBaseAmount	
							else		
								initialize LocalErrorMessage

								if (!LocalStatus.Voided)
								
									if (CashAllocationCode entered)				
										if (DistributionAccount entered)
											ErrorOccurred		= true
											DistributionError	= true
											LocalErrorMessage 	= AllocationAndAccountErrorMessage
										else
											LocalAllocationCodeProcessing = true
											invoke ApplyAdditionalAllocations LocalCashLedgerTransaction.CashLedgerTransaction
												resume on error
													ErrorOccurred		= true
													DistributionError	= true
													LocalErrorMessage	= error message
												invoked.PrmCashAllocationCode 			= CashAllocationCode
												invoked.PrmCashAllocationAmount			= IssuedBankAmount
												invoked.PrmCashLedgerTransactionImport	= reference to this instance
									
									else
										invoke Create CashLedgerGLDistribution
											resume on error
												ErrorOccurred		= true
												DistributionError	= true
												LocalErrorMessage	= error message
											fill in fields from this instance
											invoked.CashCode										= CashLedgerTransactionImport.CashCode
											invoked.CashLedgerSourceRecord							= "CBT"
											invoked.CashLedgerGLDistribution.BankTransactionCode	= CashLedgerTransactionImport.BankTransactionCode
											invoked.CashLedgerGLDistribution.TransactionIDNumber	= LocalTransactionIDNumber
											invoked.CashLedgerGLDistribution.SequenceNumber			= NumberOfDistributions
											invoked.TransactionNumber								= LocalCashLedgerTransaction.CashLedgerTransaction.TransactionNumber
											invoked.CompanyAccountingEntity							= LocalCashLedgerTransaction.CashLedgerTransaction.Company.OrigCompany.AccountingEntity 


											invoked.Reference										= Reference	
											if (Description not entered)	
												invoked.Description									= DescriptionMessage
											else	
												invoked.Description									= Description
											invoked.LocalControlDocumentNumber						= LocalCashLedgerTransaction.CashLedgerTransaction.TransactionNumber
											invoked.LocalDocumentNumber								= LocalCashLedgerTransaction.CashLedgerTransaction.TransactionNumber
											invoked.LocalExchangeDate								= LocalCashLedgerTransaction.CashLedgerTransaction.IssueDate
											if (LocalCashLedgerTransaction.CashLedgerTransaction.GeneralLedgerPostDate	!entered)
												invoked.LocalPostingDate							= LocalCashLedgerTransaction.CashLedgerTransaction.IssueDate
												invoked.PostDate									= LocalCashLedgerTransaction.CashLedgerTransaction.IssueDate
											else
												invoked.LocalPostingDate							= LocalCashLedgerTransaction.CashLedgerTransaction.GeneralLedgerPostDate
												invoked.PostDate									= LocalCashLedgerTransaction.CashLedgerTransaction.GeneralLedgerPostDate


											if (LocalCashLedgerTransaction.CashLedgerTransaction.GeneralLedgerEvent	entered			
											and LocalCashLedgerTransaction.CashLedgerTransaction.GeneralLedgerEvent	!= "CB")		
												invoked.LocalGeneralLedgerEvent						= LocalCashLedgerTransaction.CashLedgerTransaction.GeneralLedgerEvent
												invoked.GeneralLedgerSourceCode						= LocalCashLedgerTransaction.CashLedgerTransaction.GeneralLedgerEvent
											else
												invoked.LocalGeneralLedgerEvent						= "CL"
												invoked.GeneralLedgerSourceCode						= LocalCashLedgerTransaction.CashLedgerTransaction.GeneralLedgerEvent
											invoked.Company.OrigCompany								= LocalCashLedgerTransaction.CashLedgerTransaction.Company.OrigCompany 
											invoked.RecordType										= ""
											invoked.LocalKeepRateOnly								= false
											invoked.GLFinanceCodeBlock								= DistributionAccount
											invoked.GLTransactionAmount								= IssuedBankAmount
											invoked.Status											= 0	
											invoked.CreateFromBatchType								= 2	
											invoked.BypassBudgetEditing							 	= true
											invoked.LocalHeaderUniqueID								= LocalCashLedgerTransaction.CashLedgerTransaction.UniqueID
											invoked.LocalHeaderBusinessObjectRef					= reference to LocalCashLedgerTransaction.CashLedgerTransaction
											invoked.LocalCurrencyTable								= LocalCashLedgerTransaction.CashLedgerTransaction.CurrencyTable
											if (!Status.Unreleased																										
											and PrmJournalizeDistributions)
												invoked.GLTJournalizeGroup							= GLTJournalizeGroup
											if (LocalInterfaceAsPosted)	
												invoked.InterfaceAsPosted							= LocalInterfaceAsPosted	
											invoked.TransientUnitsAmount							= UnitsAmount	
							if (LocalErrorMessage entered)
								if (PrmMoveErrorsToNewRunGroup)
									if (!LocalErrorRunGroup entered)
										increment PrmCashManagementGroup.LastErrorRunGroupNumber
										LocalErrorRunGroup = PrmErrorRunGroupPrefix + "ERRORS_" + PrmCashManagementGroup.LastErrorRunGroupNumber

								CashLedgerTransactionInError	= LocalTransactionIDNumber
								invoke UpdateError ReadyToImport this instance 
									invoked.PrmErrorMessage			= LocalErrorMessage
									if (PrmMoveErrorsToNewRunGroup)
										invoked.PrmErrorRunGroup	= LocalErrorRunGroup
							else
								if (LocalGeneralLedgerSourceCode = "AP")
									NetTransactionAmount		= IssuedBankAmount
								else	
									NumberOfDistributions		+= 1
									NetTransactionAmount		+= IssuedBankAmount
								invoke Purge ReadyToImport this instance 
		
		FrontEndSplitTransactions is a Set Action
			completion message is "FrontEndSplitTransactionsSubmitted"
			valid when (FrontEndSplitsEnabled)
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmRunGroup					is AlphaUpper 30
					default label is "RunGroup"
				PrmInterface				is Boolean
					default label is "InterfaceCashTransactions"
				PrmMoveErrorsToNewRunGroup  is Boolean
					default label is "MoveErrorsToNewRunGroup"
				PrmErrorRunGroupPrefix		is AlphaUpper 15
					default label is "ErrorRunGroupPrefix"
				PrmCurrencyTable			is a CurrencyTable
					default label is "CurrencyTable"
				PrmJournalizeDistributions	is Boolean
					default label is "JournalizeReleasedDistributions"
				PrmAutoNumberingAction 			is Numeric 1
					States
						OverrideNumberWithAnAutoGeneratedNumber	value is 1
						BypassAutoTransactionNumbering			value is 2
					default label is "AutoTransactionNumberingAction"
				PrmMoveFrontEndSplitErrorsToErrorGroup is Boolean
    				default label is "MoveFrontEndSplitErrorsToErrorRunGroup"					
			Parameter Rules
				PrmRunGroup
					required
						"RunGroupIsRequired"
					LocalFinanceEnterpriseGroup = PrmCashManagementGroup
				PrmAutoNumberingAction
					if (PrmInterface and PrmCashManagementGroup.AutoTranNumberForTransactionForm)
						required
							"AutoNumberingActionSelectionRequired"
				PrmJournalizeDistributions
					LocalFinanceEnterpriseGroup	= PrmCashManagementGroup
					if(PrmInterface)
						constraint (GeneralLedgerSystemCodeRel.EncumbranceOption.NotUsed)
							"JournalizeDistributionsNotAllowedWhenBudgetingSetToTrackOrTrackAndEdit"
																				
			Local Fields
				LocalAsyncId						is an AsyncActionRequest
				ErrorOccurred						is Boolean
				TransactionError					is Boolean
				ReferenceNumberHasErrors			is Boolean
				LocalErrorMessage					is Alpha 150
				LocalForEachSumFESAmount			is an InternationalAmount
				LocalForEachSumUnitsAmount			is an UnitsAmount

			Instance Selection
				where (CashManagementGroup = PrmCashManagementGroup
				and	CashLedgerTransactionImport.RunGroup = PrmRunGroup
				and TaxCode not entered
				and not CreatedByFES
				and (IssuedBankAmount entered
				or (IssuedBankAmount not entered
				and UnitsAmount entered))
				and DistributionAccount.Project entered
				and DistributionAccount.FinanceDimension2 not entered
				and !DistributionAccount.Project.ExcludeFromFES
        		and DistributionAccount.Project.first FESProjectShadowContractRel.SummaryProject.ProjectContract.FrontEndSplits)

			Sort Order
				CashManagementGroup
				CashLedgerTransactionImport.RunGroup
				CashLedgerTransactionImport.CashCode
				CashLedgerTransactionImport.BankTransactionCode
				CashLedgerTransactionImport.TransactionNumber
				CashLedgerTransactionImport.SequenceNumber

			Accumulators
				SequenceNumber
				DistributionCount

			Rule Blocks
				FillFESKeyFields
					LocalFinanceEnterpriseGroup	= PrmCashManagementGroup.FinanceEnterpriseGroup
					LocalFEGtext				= PrmCashManagementGroup.FinanceEnterpriseGroup
					LocalDerivedFESKey			= "CLTI-"+CashLedgerTransactionImport.RunGroup+"-"+CashLedgerTransactionImport.CashCode+""+CashLedgerTransactionImport.BankTransactionCode+"-"+CashLedgerTransactionImport.TransactionNumber

				RunInterface
					invoke InterfaceCashLedgerTransactions CashLedgerTransactionImport
						run after LocalAsyncId
						invoked.PrmCashManagementGroup		= PrmCashManagementGroup
						invoked.PrmRunGroup					= PrmRunGroup
						invoked.PrmMoveErrorsToNewRunGroup  = PrmMoveErrorsToNewRunGroup
						invoked.PrmErrorRunGroupPrefix		= PrmErrorRunGroupPrefix
						invoked.PrmCurrencyTable			= PrmCurrencyTable
						invoked.PrmJournalizeDistributions	= PrmJournalizeDistributions
						invoked.PrmAutoNumberingAction 		= PrmAutoNumberingAction

			Action Rules
				Empty Set Rules
					if(!ErrorOccurred)
						if (PrmInterface)
							include RunInterface
				Set Rules
					Entrance Rules
						
					Exit Rules
						if (LocalAsyncId !entered)
							LocalAsyncId = current async action request id
						if(!ErrorOccurred
						or PrmMoveFrontEndSplitErrorsToErrorGroup)
							if (PrmInterface)
								include RunInterface
				
				CashLedgerTransactionImport.TransactionNumber Set Rules
					Entrance Rules
						ReferenceNumberHasErrors 	= false
						include FillFESKeyFields
						invoke Purge FESDistributionsByKeyLocalRel
					Exit Rules
						include FillFESKeyFields
						invoke Purge FESDistributionsByKeyLocalRel
						if (ReferenceNumberHasErrors
						and DistributionCount > 1)
							if (DistributionCount > 50)
								invoke MoveFESErrorsToErrorGroupSet
									run after LocalAsyncId
									assign async action request id to LocalAsyncId
									invoked.PrmCashManagementGroup	= PrmCashManagementGroup
									invoked.PrmRunGroup				= PrmRunGroup 
									invoked.PrmCashCode				= CashLedgerTransactionImport.CashCode
									invoked.PrmBankTransactionCode	= CashLedgerTransactionImport.BankTransactionCode
									invoked.PrmTransactionNumber	= CashLedgerTransactionImport.TransactionNumber
							else
								invoke MoveFESErrorsToErrorGroupSet in foreground
									invoked.PrmCashManagementGroup	= PrmCashManagementGroup
									invoked.PrmRunGroup				= PrmRunGroup 
									invoked.PrmCashCode				= CashLedgerTransactionImport.CashCode
									invoked.PrmBankTransactionCode	= CashLedgerTransactionImport.BankTransactionCode
									invoked.PrmTransactionNumber	= CashLedgerTransactionImport.TransactionNumber

				Instance Rules
					DistributionCount	+= 1
					TransactionError	= false
					initialize	LocalErrorMessage
					include FillFESKeyFields

					if(ImportStatus.Error)
						initialize ErrorMessage	
						make transition to ReadyToImport

					if (SequenceNumber !entered)
						SequenceNumber = last CashLedgerTransactionImportRel2.CashLedgerTransactionImport.SequenceNumber + 1

					invoke SplitDistribution FrontEndSplitDistributions in foreground
						resume on error
							TransactionError	= true
							LocalErrorMessage	= error message
						invoked.PrmFinanceEnterpriseGroup 							= PrmCashManagementGroup.FinanceEnterpriseGroup
						invoked.PrmDerivedFESKey									= LocalDerivedFESKey
						invoked.PrmDistribution										= CashLedgerTransactionImport.SequenceNumber
						invoked.PrmDistributionAmount								= IssuedBankAmount
						invoked.PrmDistributionAmountWithTax						= IssuedBankAmount
						invoked.PrmDistributionUnitsAmount							= UnitsAmount
						invoked.PrmTransactionDate									= IssueDate
						if(PostDate entered)
							invoked.PrmPostingDate									= PostDate
						else
							invoked.PrmPostingDate									= IssueDate
						invoked.PrmTransactionCurrencyCode							= CashLedgerTransactionImport.CashCode.Currency
						invoked.PrmDistributionBy									= DistributionBy.ByAmount
						invoked.PrmNumberOfDecimalsQuantity							= NumberOfDecimalsQuantity.0Decimals
						invoked.PrmGeneralLedgerSystemCode							= GeneralLedgerSystemCodeRel.GeneralLedgerSystemCode
						invoked.PrmAccountingEntity									= DistributionAccount.ToAccountingEntity
						invoked.PrmTransactionCodeBlock								= DistributionAccount
					if (LocalErrorMessage entered)
						TransactionError = true
					if(!TransactionError)
						initialize LocalForEachSumFESAmount
						initialize LocalForEachSumUnitsAmount
						if(FESDistByDistributionRel exists)
							for each FESDistByDistributionRel
								LocalForEachSumFESAmount			+= each.FESAmount
								LocalForEachSumUnitsAmount 			+= each.FESUnitsAmount
								invoke CreateFromCopy ReadyToImport CashLedgerTransactionImport
									fill in fields from this instance
									invoked.CashLedgerTransactionImport.SequenceNumber		= SequenceNumber
									if (last FESDistByDistributionRel.FrontEndSplitDistributions = each.FrontEndSplitDistributions)
										invoked.UnitsAmount					= each.FESUnitsAmount + (UnitsAmount - LocalForEachSumUnitsAmount)
										invoked.IssuedBankAmount 			= each.FESAmount + (IssuedBankAmount - LocalForEachSumFESAmount)
									else
										invoked.UnitsAmount					= each.FESUnitsAmount
										invoked.IssuedBankAmount 			= each.FESAmount
									invoked.DistributionAccount				= each.CodeBlock
									invoked.CreatedByFES					= true
								SequenceNumber	+= 1
							invoke Purge ReadyToImport this instance
					if(TransactionError)
						ErrorOccurred = true
						if (PrmMoveFrontEndSplitErrorsToErrorGroup)
							ReferenceNumberHasErrors = true
						invoke UpdateError ReadyToImport this instance 
							invoked.PrmErrorMessage			= LocalErrorMessage
					if (ReferenceNumberHasErrors)
						invoke UpdateFESErrorRunGroup

		MoveFESErrorsToErrorGroupSet is a Set Action
			restricted
			default label is untranslatable
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
					default label is "CashManagementGroup"
				PrmRunGroup					is AlphaUpper 30
					default label is "RunGroup"
				PrmCashCode					is a CashCode
				PrmBankTransactionCode		is a BankTransactionCode
				PrmTransactionNumber		is a TransactionNumber

			Parameter Rules
				PrmRunGroup
					required
				PrmCashCode
					required
				PrmBankTransactionCode
					required
				PrmTransactionNumber
					required

			Instance Selection
				where (CashManagementGroup 								= PrmCashManagementGroup
				and	   CashLedgerTransactionImport.RunGroup 			= PrmRunGroup
				and    CashLedgerTransactionImport.CashCode				= PrmCashCode
				and    CashLedgerTransactionImport.BankTransactionCode	= PrmBankTransactionCode
				and    CashLedgerTransactionImport.TransactionNumber	= PrmTransactionNumber)

			Sort Order
				CashManagementGroup
				CashLedgerTransactionImport.RunGroup
				CashLedgerTransactionImport.CashCode
				CashLedgerTransactionImport.BankTransactionCode
				CashLedgerTransactionImport.TransactionNumber
				CashLedgerTransactionImport.SequenceNumber
				
			Action Rules
				Instance Rules
					invoke UpdateFESErrorRunGroup

		UpdateFESErrorRunGroup is an Instance Action
			default label is untranslatable
			restricted
			Action Rules
				if(!(CashLedgerTransactionImport.RunGroup contains "-ERROR"))
					CashLedgerTransactionImport.RunGroup	= CashLedgerTransactionImport.RunGroup + "-ERROR"
				if (ErrorMessage !entered)
					ErrorMessage	= ReferenceNumberErrorMessage
				if (ImportStatus.ReadyToImport)
					make transition to Error

		DeletePartiallyImportedRecord is an Instance Action
		 	valid when (IsPartiallyImported)
			Action Rules
				invoke Delete CashLedgerTransactionInErrorRel
							
		DeleteAllRelatedRecords is a Delete Action
			default label is untranslatable
			restricted

		DeleteAllTransactionsForRunGroup is a Set Action
			confirmation required
		
			Parameters
				PrmCashManagementGroup		is a CashManagementGroup
				PrmRunGroup				  	is AlphaUpper 30
					default label is "RunGroup"

			Parameter Rules

			Instance Selection
				where (CashManagementGroup					= PrmCashManagementGroup
				and    CashLedgerTransactionImport.RunGroup	= PrmRunGroup)
				
			Action Rules
				Instance Rules
					if (IsPartiallyImported)
						invoke DeletePartiallyImportedRecord
					else	
				    	invoke RunGroupDelete

		RunGroupDelete is a Delete Action
			default label is untranslatable
			restricted
																		
	StateCycles
		CashLedgerTransactionImportLifeCycle is a StateCycle
			state field is ImportStatus
			
			ReadyToImport	is a State
		 		Create is a Create Action
					Action Rules

		 		CreateFromCopy is a Create Action
					default label is untranslatable
					restricted
					bypass field rules

		 		Update is an Update Action
					Action Rules

		 		Delete is a Delete Action
		 			valid when (!IsPartiallyImported)

				UpdateError is an Instance Action
					default label is untranslatable
					restricted
					Parameters
						PrmErrorMessage		is Alpha 150
							default label is "ErrorMessage"
						PrmErrorRunGroup    is AlphaUpper 30
							default label is "ErrorRunGroup"
					Action Rules
						if (PrmErrorRunGroup entered)
							CashLedgerTransactionImport.RunGroup 	  = PrmErrorRunGroup
						ErrorMessage 		= PrmErrorMessage
						make transition to Error

				Purge is a Purge Action
					restricted
			
			Error is a State
		 		Update is an Update Action
					Action Rules
						if (instance count of CashLedgerTransactionImportRel2 = 1)
							initialize ErrorMessage
							make transition to ReadyToImport

		 		ResetErrorMessage is an Instance Action
					Action Rules
						if (CashLedgerTransactionInError	!entered
              			and instance count of CashLedgerTransactionImportRel2 > 1)
							confirmation required
								"ResettingErrorMessageOnNonInterfacedRecordWillResetAllErrorsForTransactionNumber;Continue?"
									for each CashLedgerTransactionImportRel2
										if (each.ImportStatus.Error)
											invoke Error.InvokedResetErrorMessage each
						else
							initialize ErrorMessage
							make transition to ReadyToImport

				InvokedResetErrorMessage is an Instance Action
					restricted
					default label is untranslatable
					Action Rules
			 			initialize ErrorMessage
						make transition to ReadyToImport

				ResetErrorsByRunGroup is a Set Action		
					Parameters
						PrmFinanceEnterpriseGroup		is a FinanceEnterpriseGroup
							default label is "FinanceEnterpriseGroup"
						PrmRunGroup						is AlphaUpper 30
							default label is "RunGroup"

					Parameter Rules
						PrmRunGroup
							required
								"RunGroupIsRequired"

					Instance Selection
						where (CashManagementGroup.FinanceEnterpriseGroup	= PrmFinanceEnterpriseGroup
						and    CashLedgerTransactionImport.RunGroup			= PrmRunGroup
						and    ErrorMessage entered)

					Action Rules
						Instance Rules
							invoke InvokedResetErrorMessage

		 		Delete is a Delete Action
		 			valid when (!IsPartiallyImported)
			
