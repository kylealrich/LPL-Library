RecallNoticeTask is a BusinessClass
	owned by recall
	prefix is RMRNT

	Ontology
		symbolic key is RecallNoticeTask

	Patterns
		implements ContextualParent
		implements DynamicCreation
		implements CompoundDocument
			Document Components
				RecallNoticeTaskQuestion set
				RecallNoticeTaskProduct set

	Persistent Fields
		Owner							is a RecallUser
		Priority						is Numeric size 2
			States
				High	value is 1
				Medium	value is 2
				Low		value is 3

		DueDate							is TimeStamp
		Status							is Numeric size 2
			States	
				New			value is 1
				Accepted	value is 2
				Completed	value is 3

		ProposedItem					is Numeric size 1
			States
				NotApplicable			value is 0
				Proposed				value is 1
				Approved				value is 2
				Rejected				value is 3
				ApprovedPendingTrial	value is 4
				Canceled				value is 5
				CoordinatorApproval     value is 6

		ManuallyCreatedTask				is Boolean
		RecallTaskInstruction
		TaskInstructionDescription
		TaskForUndefinedLocations		is Boolean
		CompletionRequiredToCloseNotice	is Boolean
		RefreshTimeStamp				is TimeStamp
		AcceptedTimestamp				is TimeStamp
		DaysToAccept					is Numeric size 4
		CompletedTimestamp				is TimeStamp
		DaysToComplete					is Numeric size 4
		ShowDetail						is Boolean

	Context Fields
		RecallNoticeDateRange	is a DateRange
		ReleaseDateRange		is a DateRange
		DueDateRange			is a DateRangeSecond

	Transient Fields
		NewOwner	is a RecallUser
		NewDueDate	is TimeStamp
		NewPriority	is Numeric size 2
			States
				High	value is 1
				Medium	value is 2
				Low		value is 3

	Local Fields
		LocalRecallNoticeTaskQuestion		is a RecallNoticeTaskQuestion
			context of RecallNoticeTask
		LocalRecallProduct					is a RecallProduct
		LocalRecallProductTransaction		is a RecallProductTransaction
		FromProductTransactionQuery			is Boolean
		FromOrganization                    is Boolean
		CreateItems                         is Boolean
		MailContent							is Alpha size up to 2000
		LocalItem							is a RecallProductItem
		LocalInstructions					is a RecallTaskInstruction
		LocalNewRecallNoticeTask			is a RecallNoticeTask
		LocalOldRecallNoticeTask			is a RecallNoticeTask
		LocalRecallNoticeTaskQuestionView	is a RecallNoticeTaskQuestion view
		LocalQuestionDescription			is Text
		LocalQuestionResponseType			is Numeric size 2

	Field Groups
		NotifyIfUpdated
			Priority
			DueDate

	Derived Fields
		StatusCount is a DerivedField
			type is Numeric size 2
			restricted
			return 1

		ViewQuestionsMessage is a MessageField
			restricted
			"ViewQuestions"
			
		EnterQuestionsMessage is a MessageField
			restricted
			"EnterQuestions"
		
		QuestionEntryText is a ConditionalField
			type is Text
			restricted
			if (RecallNoticeTaskQuestion set exists)
				ViewQuestionsMessage
			else
				EnterQuestionsMessage
				
		DueDateCompare is a ConditionalField
			type is Numeric size 4
			restricted
			if ((CompletedTimestamp date - DueDate date)< 0)
				0
			else
				(CompletedTimestamp date - DueDate date) 

		AcceptedTimestampDateOnly is a StringField
    		type is Date
    		AcceptedTimestamp date

    	CompletedTimestampDateOnly is a StringField
    		type is Date
    		CompletedTimestamp date

    	DueDateDateOnly is a StringField
    		type is Date
    		restricted
    		DueDate date

    	Priority1Message is a MessageField
    		restricted
    		"ThePriorityAndDuedateHaveChangedForYourAssignedTask;PleaseReview"

    	Priority2Message is a MessageField
    		restricted
    		"ThePriorityHasChangedForYourAssignedTask;PleaseReview"

    	DueDateMessage is a MessageField
    		restricted
    		"TheDueDateHasChangedForYourAssignedTask;PleaseReview"	

    	PriorityDueDateSubject is a DerivedField
    		type is Text
    		restricted
			if (Priority changed
			and DueDate changed)
				return Priority1Message
			else
			if (Priority changed)
				return Priority2Message
			else
			if (DueDate changed)
				return DueDateMessage

		AttachmentCount is a DerivedField
			type is Alpha size up to 20
			restricted
			if (RecallNoticeTaskAttachment set exists)
				return "(" + instance count of RecallNoticeTaskAttachment set + ")"
			else
				return ""

		ItemReviewLinkback is a MessageField
			restricted
			"<linkback(webapp is RecallResponder navigation is ReviewerItemProposalNav text is \"here\" session key RecallGroup is RecallGroup)>"

		FormattedDueDate is a StringField
			type is Alpha 10
			DueDate month
			"/"
			DueDate day
			"/"
			DueDate year


		RecallNoticeTaskAndWorkingId is a LabelField
			"WorkingId:<RecallNotice.WorkingId>_|_Task:<RecallNoticeTask>"

		QuantityForTask is a DerivedField
			type is like Quantity
			return sum QuantitiesEnteredRel.QuantityIdentified 
		
		MobileTaskPriority is a DerivedField
			type is Alpha 8
			default label is "Priority"
			if(Priority.High)
				return "High"
			if(Priority.Medium)
				return "Medium"
			if(Priority.Low)
				return "Low"

		MobileTransactionDateRange is a LabelField
			"<RecallNotice.DerivedQueryBeginDate>_-_<RecallNotice.DerivedQueryEndDate>"
			
		MobileFormattedDueDate is a DerivedField
			type is Date
			default label is "DueDate"
			return DueDate date
			
		MobileFormattedTrialEndDate is a DerivedField
			type is Alpha 10
			default label is "TrialEndDate"
			if (RecallNotice.TrialEndDate entered)
				return RecallNotice.TrialEndDate month + "/" + RecallNotice.TrialEndDate day + "/" + RecallNotice.TrialEndDate year
			else
				return ""



	Field Rules
		Priority
			required

		DueDate
			required

		RecallTaskInstruction
			if (RecallTaskInstruction changed
			and !FromProductTransactionQuery)
				if (ManualTaskWithQuestions)
					if (RecallTaskInstruction.HasQuestions)
						confirmation required
							"ExistingQuestionsWillBeReplacedWithTheQuestionsAssociatedWithTaskInstruction<RecallTaskInstruction>;WouldYouLikeToContinue?"
					else
						confirmation required
							"ExistingQuestionsWillBeDeleted;WouldYouLikeToContinue?"

				invoke Delete RecallNoticeTaskQuestion set

				if (RecallTaskInstruction exists)
					for each RecallTaskInstruction.RecallTaskInstructionQuestion set
						invoke Create RecallNoticeTaskQuestion
							assign result to LocalRecallNoticeTaskQuestion 
							invoked.RecallGroup		 	= RecallGroup
							invoked.RecallNotice	 	= RecallNotice
							invoked.RecallNoticeTask	= RecallNoticeTask
							fill in fields from each
							
						for each each.RecallTaskInstructionQuestionValue set
							invoke Create RecallNoticeTaskQuestionValue
								invoked.RecallGroup			 	 = RecallGroup
								invoked.RecallNotice		 	 = RecallNotice
								invoked.RecallNoticeTask	 	 = LocalRecallNoticeTaskQuestion.RecallNoticeTask
								invoked.RecallNoticeTaskQuestion = LocalRecallNoticeTaskQuestion.RecallNoticeTaskQuestion
								fill in fields from each

	Conditions
		IsOwner
			restricted
			when (RecallUserRel.HROrganization = RecallGroup.BusinessGroup.FinanceEnterpriseGroup.HROrganization
			and	  RecallUserRel.RecallUser  = Owner)

		TaskIsOpen
			restricted
			when (Status.New
			or	  Status.Accepted)

		CanSendEmailReminder
			restricted
			when (TaskIsOpen
			and  !ItemProposalNotice
			and   HasOwner)

		TaskCanBeAccepted
			restricted
			when (Status.New
			and  (IsOwner
			or    RecallNotice.MyCoordinatorNotices)
			and   RecallNotice.Status.Active)

		TaskCanBeCompleted
			restricted
			when (Status.Accepted
			and	  RecallNotice.Status.Active
			and  (IsOwner
			or    RecallNotice.MyCoordinatorNotices)
			and !RecallNoticeTaskProductRel.HasRemainingRequiredQuestions)

		OwnerOpen
			restricted
			when (IsOwner
			and   RecallNotice.Status.Active
			and   NotProposedItem
			and  (TaskIsOpen
			or   (RecallGroup.AllowResolutionsByResponders
			and   HasRemainingQuantities
			and  !RecallNotice.HasActionsByCoordinator)))

		AllOpen
			restricted
			when (RecallNotice.Status.Active
			and   NotProposedItem
			and  (TaskIsOpen
			or   (RecallGroup.AllowResolutionsByResponders
			and   HasRemainingQuantities
			and  !RecallNotice.HasActionsByCoordinator)))

		OwnerFinished
			restricted
			when (IsOwner
			and   Status.Completed
			and   NotProposedItem
			and  (!RecallGroup.AllowResolutionsByResponders
			or    !HasRemainingQuantities
			or     RecallNotice.HasActionsByCoordinator))

		TaskCanBeReopened
			restricted
			when (Status.Completed
			and	  RecallNotice.Status.Active
			and   NotProposedItem)
			
		HasRemainingQuantities
			restricted
			when (RemainingQuantitiesRel exists)

		CompletedUnresolved
			restricted
			when (Status.Completed
			and   HasRemainingQuantities)
			
		TaskCanBeReassigned
			restricted
			when (!Status.Completed
			and  (IsOwner
			or    RecallNotice.MyCoordinatorNotices)
			and	 (RecallNotice.Status.Active
			or   (RecallNotice.Status.Pending
			and  (RecallNotice.TransactionActivityExists
			or    ManuallyCreatedTask))))

		ItemProposalReviewCanBeReassigned
			restricted
			when (ProposedItem = 1)

		TaskCanBeUpdated
			restricted
			when (!Status.Completed
			and  (IsOwner
			or    RecallNotice.MyCoordinatorNotices)
			and	 (RecallNotice.Status.Active
			or    RecallNotice.Status.Pending))

		NewRecallNoticeTasks
			restricted
			when (Status.New
			and   !RefreshTimeStamp entered)

		IsHighPriority
			restricted
			when (Priority.High)

		IsPastDue
			when (TaskIsOpen
			and   DueDate entered
			and	  current timestamp > DueDate)
		
		IsDue
			when (TaskIsOpen
			and   DueDate entered
			and	  current timestamp >= DueDate)

		ManualTaskWithQuestions
			restricted
			when (ManuallyCreatedTask
			and	  RecallNoticeTaskQuestion set exists)

		TaskWithQuestions
			restricted
			when (RecallNoticeTaskQuestion set exists)

		HasRecallProducts
			restricted
			when (RecallNoticeTaskProductRel exists)
		
		HasRecallProductsManual
			restricted
			when (HasRecallProducts
			and   ManuallyCreatedTask)   
		
		HasRecallProductsNotManual
			restricted
			when (HasRecallProducts
			and  !ManuallyCreatedTask)
		
		HasRecallProductsManualUnreleased
			restricted
			when (HasRecallProductsManual
			and   RecallNotice.Status = 1)
		
		HasRecallProductsManualReleased
			restricted
			when (HasRecallProductsManual
			and   RecallNotice.Status > 1)
		
		HasRecallProductsNotManualUnreleased
			restricted
			when (HasRecallProductsNotManual
			and   RecallNotice.Status = 1)
		
		HasRecallProductsNotManualReleased
			restricted
			when (HasRecallProductsNotManual
			and   RecallNotice.Status > 1)
		
		HasRecallProductsWithQuestions
			restricted
			when (RecallNoticeTaskProductWithQuestionsRel exists)
		
		HasRecallProductsWithLocationActivity
			restricted
			when (RecallNoticeTaskProductWithLocationActivityRel exists)
		
		HasRecallProductsWithQuantity
			restricted
			when (HasRecallProducts
			and   RecallProductTaskItemRel.HasQuantities)
		
		CanDeleteTask
			restricted
			when (ManuallyCreatedTask
			and	  RecallNotice.RecallNoticeUpdatable)
		
		CanUpdateTaskInstructions
			restricted
			when (ManuallyCreatedTask
			and	  RecallNotice.RecallNoticeUpdatable)
		
		CannotUpdateTaskInstructions
			restricted
			when (ManuallyCreatedTask
			and	  !RecallNotice.RecallNoticeUpdatable)
			
		UnassignedTask
			restricted
			when (!Owner entered)
			
		HasOwner
			restricted
			when (Owner entered)

		ManufacturerNameEntered
			restricted
			when (RecallNotice.ManufacturerName entered)
			
		ManufactureDateRangeEntered
			restricted
			when (RecallNotice.ManufactureDateRange entered)
		
		DistributionDateRangeEntered
			restricted
			when (RecallNotice.DistributionDateRange entered)
			
		RecallWithinDateRange
			restricted
			when (RecallNotice.create date within RecallNoticeDateRange)
		
		HasLinkToDisplay
			restricted
			when (DisplayLinkOnTaskRel exists)
		
		HasAttachmentToDisplay
			restricted
			when (DisplayAttachmentOnTaskRel exists)
			
		HasTaskQuestionAnswers
			restricted
			when (ResponseToRecallNoticeTaskQuestion set exists)
			
		NewOwnerTaskExists
			restricted
			when (NewOwnerRecallNoticeTaskRel exists)
			
		HasProductQuestionAnswers
			restricted
			when (any RecallNoticeTaskProduct set.HasProductQuestionAnswers)

		NewOwnerHasProductQuestionAnswers
			restricted
			when (first NewOwnerRecallNoticeTaskRel.RecallNoticeTaskProduct set.HasProductQuestionAnswers)
			
		HasTaskAttachments
			restricted
			when (RecallNoticeTaskAttachment set exists)
			
		UnacceptedNonManualTaskWithQuestions
			restricted
			when (TaskCanBeAccepted
			and  !ManuallyCreatedTask
			and   HasRecallProductsWithQuestions)
			
		HasTaskOwnerQandA
			restricted
			when (TaskOwnerQandARel exists)

		HasItemActions
			restricted
			when (ItemActionsRel exists)
						
		HasTaskItems
			restricted
			when (RecallProductTaskItemRel exists)
			
		QuantitiesEntered
			restricted
			when (QuantitiesEnteredRel exists)
	
		AllowQuantityUpdates
			restricted
			when (Status.Accepted
			and   RecallNotice.Status.Active
			and   HasTaskItems)
			
		HasTransactionQueryDateRange
			restricted
			when (RecallNotice.LastTransactionQueryDateRange.Begin entered)
		
		ShowResolutions
			restricted
			when (HasItemActions
			or   (RecallGroup.AllowResolutionsByResponders
			and   RecallNotice.Status.Active
			and   Status.Completed
   			and   QuantitiesEntered
   			and  !RecallNotice.HasActionsByCoordinator))
   			
		CanApprovePendingTrial
			restricted
			when (ProposedItem.Proposed
			and   IsOwner
			and   !RecallNotice.ProposedItem.ApprovedPendingTrial)
		
		CanApproveOrReject
			restricted
			when ((ProposedItem.Proposed
			or   (ProposedItem.ApprovedPendingTrial
			and   RecallNotice.TrialEndDate <= current corporate date
			and   RecallNotice.TrialEndDate entered))
			and   IsOwner)
		
		TrialEndDateBeforeNow
			when (RecallNotice.TrialEndDate <= current time)
			
		TrialEndDateBeforeNowBasedOnDate
			when (RecallNotice.TrialEndDate <= current corporate date)

		NotProposedItem
			restricted
			when (ProposedItem.NotApplicable)
		
		ProposedItemTask
			restricted
			when (ProposedItem > 0)
		
		ItemTaskProposedOnly
			restricted
			when (ProposedItem.Proposed)

		ItemProposalApprovedOrRejected
			restricted
			when (ProposedItem.Approved
			or    ProposedItem.Rejected)   		
   		
 		ItemProposalApproved
			restricted
			when (ProposedItem.Approved)
			
		ItemProposalRejected
			restricted
			when (ProposedItem.Rejected)   
 
   		ItemProposalNotice
   			restricted
   			when (RecallNotice.ProposedItem = 1)
   		
   		CanCancelReview
   			restricted
 			when ((ProposedItem.Proposed
			or    ProposedItem.ApprovedPendingTrial)
   			and   RecallNotice.UnapprovedItemProposal)
   			
   		CoordinatorCanOverride 
			restricted 
			when (ProposedItem.Proposed 
			or    ProposedItem.ApprovedPendingTrial
			or    ProposedItem.Rejected)
		
		CanReopenReview
   			restricted
   			when (ProposedItem.Canceled
   			and   RecallNotice.UnapprovedItemProposal)
   		
   		AskAQuestionAllowed
   			restricted
   			when (OpenProposedItemTask
   			or    NotProposedItem)
   		
		HasManualOrganization
			restricted
			when (ManualRecallNoticeOrganizationRel exists)

		OpenProposedItemTask
			restricted
			when ((ProposedItem.Proposed
			or    ProposedItem.ApprovedPendingTrial)
			and   RecallNotice.Status.Pending)

		OwnerItemProposalOpen
			restricted
			when (IsOwner
			and   OpenProposedItemTask)	
		
		PendingTrial 
			restricted 
			when (ProposedItem.ApprovedPendingTrial)

		OwnerItemProposalFinished
			restricted
			when (IsOwner
			and   ProposedItemTask
			and  (ProposedItem.Approved
			or    ProposedItem.Rejected
			or    ProposedItem.Canceled))

		HasNoticeOrganization
			restricted
			when (RecallNoticeOrganizationRel exists)
		
		SupplierItemQuestionResponsesExist
			restricted
			when (ResponseToSupplierItemRequestQuestionRel exists)

   		DocumentsOnly
   			restricted
   			when (RecallProductTransactionTaskNonDocRel !exists)

		DoesNotHaveTransactionTasks
			restricted 
			when (RecallProductTransactionTaskRel !exists)
   			
	Sets
		ByOwner 
			indexed
			bypass no duplicates validation
			Sort Order
				RecallGroup
				RecallNotice
				Owner
							
		ByOwnerNotice
			indexed
			bypass no duplicates validation
			Sort Order
				RecallGroup
				Owner
				RecallNotice
		
		ByNewUnrefreshedTasks
			sql name is "ByNewTasks"
			indexed
			Sort Order	
				RecallGroup
				RecallNotice
				Owner
				RecallNoticeTask
			Instance Selection
				where (NewRecallNoticeTasks)
		
		ByNoticeDueDate
			indexed
			Sort Order
				RecallGroup
				RecallNotice
				DueDate
				Owner
				RecallNoticeTask
				
		ByDueDate
			indexed
			Sort Order
				DueDate
				RecallGroup
				RecallNotice
				Owner
				RecallNoticeTask
				
		ByPriority
			indexed
			Sort Order
				Priority
				RecallGroup
				RecallNotice
				Owner
				RecallNoticeTask
		
		ByStatus
			indexed
			Sort Order
				Status
				RecallGroup
				RecallNotice
				RecallNoticeTask
				Owner
		
	Relations
		RecallNoticeTaskProductRel
			one-to-many relation to RecallNoticeTaskProduct
			delete cascades
			Field Mapping uses symbolic key
				related.RecallGroup		 = RecallGroup
				related.RecallNotice	 = RecallNotice
				related.RecallNoticeTask = RecallNoticeTask
				
		RecallNoticeTaskProductWithQuestionsRel
			one-to-many relation to RecallNoticeTaskProduct
			Field Mapping uses symbolic key
				related.RecallGroup		 = RecallGroup
				related.RecallNotice	 = RecallNotice
				related.RecallNoticeTask = RecallNoticeTask
			Instance Selection
				where (related.ShowProductQuestions)
				
		RecallNoticeTaskProductWithLocationActivityRel
			one-to-many relation to RecallNoticeTaskProduct
			Field Mapping uses symbolic key
				related.RecallGroup		 = RecallGroup
				related.RecallNotice	 = RecallNotice
				related.RecallNoticeTask = RecallNoticeTask
			Instance Selection
				where (related.HasLocationActivity)
				
		RecallNoticeReferenceRel 
			one-to-many relation to RecallNoticeReference
			Field Mapping uses symbolic key
				related.RecallGroup		  = RecallGroup
				related.RecallNotice	  = RecallNotice

		DisplayLinkOnTaskRel 
			one-to-many relation to RecallNoticeReference
			Field Mapping uses symbolic key
				related.RecallGroup		  = RecallGroup
				related.RecallNotice	  = RecallNotice
			Instance Selection
				where (related.DisplayLinkOnTask)
		
		DisplayAttachmentOnTaskRel 
			one-to-many relation to RecallNoticeReference
			Field Mapping uses symbolic key
				related.RecallGroup		  		= RecallGroup
				related.RecallNotice	  		= RecallNotice
			Instance Selection
				where (related.DisplayAttachmentOnTask)
						
		SupplierAttachmentsRel
			one-to-many relation to RecallNoticeReference
			Field Mapping uses symbolic key
				related.RecallGroup		  		= RecallGroup
				related.RecallNotice	  		= RecallNotice
			Instance Selection
				where (related.CreatedBySupplier)
		
		RequiredRecallNoticeTaskQuestionsRel is a RecallNoticeTaskQuestion set
  			Instance Selection
  				where (related.ResponseRequired)
  		
  		RecallNoticeTaskQuestionRel 
  			one-to-many relation to RecallNoticeTaskQuestion
  			Field Mapping uses symbolic key
  				related.RecallGroup		 = RecallGroup
				related.RecallNotice	 = RecallNotice
				related.RecallNoticeTask = this instance.RecallNoticeTask
			Instance Selection 
				where (related.Description 	= LocalQuestionDescription
				and    related.ResponseType = LocalQuestionResponseType)
  		
  		LocalRecallNoticeTaskProductRel
    		one-to-one relation to RecallNoticeTaskProduct
    		Field Mapping uses symbolic key
				related.RecallGroup		 = RecallGroup
				related.RecallNotice	 = RecallNotice
				related.RecallNoticeTask = this instance.RecallNoticeTask
				related.RecallProduct	 = LocalRecallProduct
		
		NewItemProposalQuestionRel
			one-to-many relation to RecallProductQuestion
			Field Mapping uses symbolic key
				related.RecallGroup		 = RecallGroup
				related.RecallNotice	 = RecallNotice
			Instance Selection
				where (related.NewItemProposalQuestion)	
		
		RecallProductTransactionTaskRel
			one-to-many relation to RecallProductTransactionTask
			delete cascades
			Field Mapping uses ByTaskProduct
				related.RecallGroup		 = RecallGroup
				related.RecallNotice	 = RecallNotice
				related.RecallNoticeTask = RecallNoticeTask

		RecallProductTransactionTaskNonDocRel
			one-to-many relation to RecallProductTransactionTask
			delete cascades
			Field Mapping uses ByTaskProduct
				related.RecallGroup		 = RecallGroup
				related.RecallNotice	 = RecallNotice
				related.RecallNoticeTask = RecallNoticeTask
			Instance Selection
				where (related.RecallProductTransaction.IsARequestingLocationActivity
				or     related.RecallProductTransaction.IsAnInventoryLocationActivity)
		
		LocalRecallProductTransactionTaskRel
			one-to-one relation to RecallProductTransactionTask
    		Field Mapping uses symbolic key
				related.RecallGroup		 		 = RecallGroup
				related.RecallNotice	 		 = RecallNotice
				related.RecallProduct	 		 = LocalRecallProduct
				related.RecallProductTransaction = LocalRecallProductTransaction
				related.RecallNoticeTask 		 = this instance.RecallNoticeTask
		
		UnenteredQuantityForTaskRel is a RecallNoticeTaskProduct set
			Instance Selection
				where (related.HasLocationActivity
				and   !related.QuantityIdentified entered)	
				
  		NewOwnerRecallNoticeTaskRel
    		one-to-many relation to RecallNoticeTask
    		Field Mapping uses ByOwner
				related.RecallGroup			= RecallGroup
				related.RecallNotice	 	= RecallNotice
				related.Owner				= NewOwner
			Instance Selection
				where (related.UniqueID     != UniqueID)
		
		NewOwnerRecallNoticeTaskProductRel
			one-to-one relation to RecallNoticeTaskProduct
			Field Mapping uses symbolic key
				related.RecallGroup      	= RecallGroup
				related.RecallNotice     	= RecallNotice
				related.RecallNoticeTask 	= LocalNewRecallNoticeTask
				related.RecallProduct		= LocalRecallProduct
		
  		NewTaskRel
    		one-to-many relation to RecallNoticeTask
    		Field Mapping uses symbolic key
				related.RecallGroup			= RecallGroup
				related.RecallNotice	 	= RecallNotice
			Instance Selection
				where (related.RecallNoticeTask	!=RecallNoticeTask
				and    related.Status.New)
		
  		NewOrAcceptedTaskRel
    		one-to-many relation to RecallNoticeTask
    		Field Mapping uses symbolic key
				related.RecallGroup			= RecallGroup
				related.RecallNotice	 	= RecallNotice
			Instance Selection
				where (related.RecallNoticeTask	!=RecallNoticeTask
				and   (related.Status.New
				or     related.Status.Accepted))
		
  		TaskOwnerQandARel
    		one-to-many relation to RecallNoticeQandA
    		Field Mapping uses ByAskedBy
				related.RecallGroup			= RecallGroup
				related.RecallNotice	 	= RecallNotice
				related.AskedBy				= Owner

		ResponseToRecallNoticeTaskQuestionRel
			one-to-many relation to ResponseToRecallNoticeTaskQuestion
			Field Mapping uses part of key
				related.RecallGroup = RecallGroup
				related.RecallNotice = RecallNotice
		
		RecallProductTaskItemRel
    		one-to-many relation to RecallProductTaskItem
    		delete cascades
    		Field Mapping uses symbolic key 
				related.RecallGroup			= RecallGroup
				related.RecallNotice		= RecallNotice
				related.RecallNoticeTask	= RecallNoticeTask
		
		OldRecallProductTaskItemRel

    		one-to-many relation to RecallProductTaskItem
    		delete cascades
    		Field Mapping uses symbolic key 
				related.RecallGroup			= RecallGroup
				related.RecallNotice		= RecallNotice
				related.RecallNoticeTask	= LocalOldRecallNoticeTask
				related.RecallProduct       = LocalRecallProduct
				related.RecallProductItem   = LocalItem
		
		NewRecallProductTaskItemRel

    		one-to-many relation to RecallProductTaskItem    		
    		Field Mapping uses symbolic key 
				related.RecallGroup			= RecallGroup
				related.RecallNotice		= RecallNotice
				related.RecallNoticeTask	= LocalNewRecallNoticeTask
				related.RecallProduct		= LocalRecallProduct
				related.RecallProductItem	= LocalItem

		ItemActionsRel
    		one-to-many relation to RecallProductItemAction
    		Field Mapping uses ByTaskProductItem
				related.RecallGroup			= RecallGroup
				related.RecallNotice		= RecallNotice
				related.RecallNoticeTask	= RecallNoticeTask
		
   		RemainingQuantitiesRel
    		one-to-many relation to RecallProductTaskItem
    		Field Mapping uses symbolic key	
    			related.RecallGroup	  			= RecallGroup
    			related.RecallNotice  			= RecallNotice
				related.RecallNoticeTask		= RecallNoticeTask
    		Instance Selection
    			where (related.RemainingQuantity > 0)
   		
   		QuantitiesEnteredRel
    		one-to-many relation to RecallProductTaskItem
    		Field Mapping uses symbolic key	
    			related.RecallGroup	  			= RecallGroup
    			related.RecallNotice  			= RecallNotice
				related.RecallNoticeTask		= RecallNoticeTask
    		Instance Selection
    			where (related.QuantityIdentified > 0)
   		
   		NoQuantityResponseForTaskRel 
  			one-to-many relation to RecallProductTaskItem
  			Field Mapping uses symbolic key
  				related.RecallGroup	  			= RecallGroup
    			related.RecallNotice  			= RecallNotice
				related.RecallNoticeTask		= RecallNoticeTask
			Instance Selection
				where (related.QuantityIdentified = 0
				and    related.ZeroQuantityFound = false)
   		
   		RecallUserRel
   			one-to-many relation to RecallUser
   			Field Mapping uses symbolic key
   				related.HROrganization           = actor.agent(Employee).HROrganization
   				related.RecallUser               = actor.agent(Employee).Employee
   				
   		RecallTaskInstructionRel
   			one-to-one relation to RecallTaskInstruction
   			Field Mapping uses symbolic key
   				related.RecallGroup	  			= RecallGroup
   				related.RecallTaskInstruction   = RecallTaskInstruction
   		
		ResponseToSupplierItemRequestQuestionRel
			one-to-many relation to ResponseToSupplierItemRequestQuestion
			Field Mapping uses part of key
				related.RecallGroup             = RecallGroup
				related.RecallNotice            = RecallNotice
		
		RecallNoticeOrganizationRel
			one-to-many relation to RecallNoticeOrganization
			Field Mapping uses symbolic key
				related.RecallGroup             = RecallGroup
				related.RecallNotice            = RecallNotice
			Instance Selection
				where (related.AssignedUser     = Owner) 

		ManualRecallNoticeOrganizationRel
			one-to-many relation to RecallNoticeOrganization
			Field Mapping uses symbolic key
				related.RecallGroup             = RecallGroup
				related.RecallNotice            = RecallNotice
			Instance Selection
				where (related.AssignedUser     = Owner
				and    related.FromManualTask   = true) 		
		
		RecallProductRel 
			one-to-many relation to RecallProduct
			Field Mapping uses symbolic key
			  	related.RecallGroup	  			= RecallGroup
    			related.RecallNotice  			= RecallNotice

	Rule Blocks
		ActiveAdhocTaskEmail
			send email
				to Owner.EmployeeWorkEmailAddress
				from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
				subject "<RecallGroup.FinalTaskEmailSubject>"
				Contents
					"<RecallGroup.FinalTaskEmailContent>"
					"Task:_<RecallNoticeTask>"
					"Priority:_<Priority>"
					"DueDate:_<DueDate>"
					"Click<RecallNotice.TaskLinkback>ToViewTheNotice."
										
		AcceptTaskEmail
			if (RecallGroup.SendEachAcceptedTaskEmail)
				send email
					to RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					from Owner.EmployeeWorkEmailAddress
					subject "Task<RecallNoticeTask>ForRecallNotice<RecallNotice>HasBeenAccepted"
					Contents
						"Task<RecallNoticeTask>ForNotice<RecallNotice>HasBeenAcceptedBy<Owner.RecallUserName>"
			else
			if  (RecallGroup.SendAllAcceptedTaskEmail
			and  !NewTaskRel exists)
				initialize MailContent
				for each RecallNotice.RecallNoticeTask set
					MailContent += "Task:" + each.RecallNoticeTask + RecallGroup.NewLine
					MailContent += "Owner:" + each.Owner.RecallUserName + RecallGroup.NewLine
					MailContent += "Due:" + each.DueDate + RecallGroup.NewLine
					MailContent += RecallGroup.NewLine
				send email
					to RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					from Owner.EmployeeWorkEmailAddress
					subject "AllTasksForRecallNotice<RecallNotice>HaveBeenAccepted"
					Contents
						"<MailContent>"
		
		CompleteTaskEmail
			if (RecallGroup.SendEachCompletedTaskEmail)
				send email
					to RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					from Owner.EmployeeWorkEmailAddress
					subject "Task<RecallNoticeTask>ForRecallNotice<RecallNotice>HasBeenCompleted"
					Contents
						"Task<RecallNoticeTask>ForNotice<RecallNotice>HasBeenCompletedBy<Owner.RecallUserName>"
			else
			if (RecallGroup.SendAllCompletedTaskEmail
			and !NewOrAcceptedTaskRel exists)
				initialize MailContent
				for each RecallNotice.RecallNoticeTask set
					MailContent += "Task:" + each.RecallNoticeTask + RecallGroup.NewLine
					MailContent += "Owner:" + each.Owner.RecallUserName + RecallGroup.NewLine
					MailContent += "Due:" + each.DueDate + RecallGroup.NewLine
					MailContent += RecallGroup.NewLine

				send email
					to RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					from Owner.EmployeeWorkEmailAddress
					subject "AllTasksForRecallNotice<RecallNotice>HaveBeenCompleted"
					Contents
						"<MailContent>"
		
		UpdatedTaskEmail
			if (NotifyIfUpdated changed)
				send email
					to Owner.EmployeeWorkEmailAddress
					from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					subject "<PriorityDueDateSubject>"
					Contents
						"Notice:_<RecallNotice>_-_<RecallNotice.Name>"
						"Task:_<RecallNoticeTask>"
						"Priority:_<Priority>"
						"DueDate:_<DueDate>"
						"Click<RecallNotice.TaskLinkback>ToViewTheNotice."
						
		ReassignTaskEmail
			if (RecallGroup.SendTaskEmail)
				send email
					to Owner.EmployeeWorkEmailAddress
					from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					subject "<RecallGroup.FinalTaskEmailSubject>"
					Contents
						"<RecallGroup.FinalTaskEmailContent>"
						"Task:_<RecallNoticeTask>"
						"Priority:_<Priority>"
						"DueDate:_<DueDate>"
						"Click<RecallNotice.TaskLinkback>ToViewTheNotice."
	
		CreateProductTransactionQueryRecords
			if (!CreateItems
			and !FromOrganization)
				invoke Update LocalRecallNoticeTaskProductRel
					invoked.RecallProduct	 = LocalRecallProduct
					invoked.RecallNoticeTask = this instance.RecallNoticeTask
				
				if (!LocalRecallProductTransactionTaskRel exists)
					invoke Create LocalRecallProductTransactionTaskRel
						invoked.RecallProduct	 		 = LocalRecallProduct
						invoked.RecallProductTransaction = LocalRecallProductTransaction
						invoked.RecallNoticeTask 		 = this instance.RecallNoticeTask

			else
			if (CreateItems)
				for each RecallProductRel
					LocalRecallProduct = each.RecallProduct
					invoke Update LocalRecallNoticeTaskProductRel
						invoked.RecallProduct	 = LocalRecallProduct
						invoked.RecallNoticeTask = this instance.RecallNoticeTask					
	
	Form Invokes
		RecallNoticeQandA
			invoke Create Unanswered RecallNoticeQandA
				invoked.RecallGroup		= RecallGroup
				invoked.RecallNotice	= RecallNotice
								
	StateCycles
		RecallTaskLifeCycle is a StateCycle
			state field is Status
		
			New is a State
				Create is a Create Action
					restricted
					Field Rules
						DueDate
							required
					
						CompletionRequiredToCloseNotice
							default to true
							
					Exit Rules
						if (FromProductTransactionQuery)
							include CreateProductTransactionQueryRecords	
							if (LocalInstructions entered)
								RecallTaskInstruction      = LocalInstructions
								TaskInstructionDescription = LocalInstructions.Description
								
								for each RecallTaskInstruction.RecallTaskInstructionQuestion set
									
									LocalQuestionDescription             = each.Description
									LocalQuestionResponseType            = each.ResponseType
									if (RecallNoticeTaskQuestionRel !exists)
										invoke Create RecallNoticeTaskQuestion
											assign result to LocalRecallNoticeTaskQuestionView 
											invoked.RecallGroup			= RecallGroup
											invoked.RecallNotice	 	= RecallNotice
											invoked.RecallNoticeTask	= RecallNoticeTask
											fill in fields from each
									
									for each each.RecallTaskInstructionQuestionValue set
										LocalRecallNoticeTaskQuestion = LocalRecallNoticeTaskQuestionView.RecallNoticeTaskQuestion
										invoke Create RecallNoticeTaskQuestionValue
											invoked.RecallGroup				 = RecallGroup
											invoked.RecallNotice		 	 = RecallNotice
											invoked.RecallNoticeTask	 	 = RecallNoticeTask
											invoked.RecallNoticeTaskQuestion = LocalRecallNoticeTaskQuestion
											fill in fields from each							
						
						if (RecallNotice.Status.Active)
							include ActiveAdhocTaskEmail
							
				Update is an Update Action
					valid when (TaskCanBeUpdated)
					Action Rules
						constraint (!Status.Completed)
							"CannotUpdate;TaskHasBeenCompleted"
								
					Exit Rules
						if (FromProductTransactionQuery)
							include CreateProductTransactionQueryRecords	
							
							if (!FromOrganization)
								ManuallyCreatedTask = false
							if (LocalInstructions entered)
								RecallTaskInstruction      = LocalInstructions
								TaskInstructionDescription = LocalInstructions.Description
								
								for each RecallTaskInstruction.RecallTaskInstructionQuestion set
									
									LocalQuestionDescription             = each.Description
									LocalQuestionResponseType            = each.ResponseType
									if (RecallNoticeTaskQuestionRel !exists)
										invoke Create RecallNoticeTaskQuestion
											assign result to LocalRecallNoticeTaskQuestionView 
											invoked.RecallGroup			= RecallGroup
											invoked.RecallNotice	 	= RecallNotice
											invoked.RecallNoticeTask	= RecallNoticeTask
											fill in fields from each
									
									for each each.RecallTaskInstructionQuestionValue set
										LocalRecallNoticeTaskQuestion = LocalRecallNoticeTaskQuestionView.RecallNoticeTaskQuestion
										invoke Create RecallNoticeTaskQuestionValue
											invoked.RecallGroup				 = RecallGroup
											invoked.RecallNotice		 	 = RecallNotice
											invoked.RecallNoticeTask	 	 = RecallNoticeTask
											invoked.RecallNoticeTaskQuestion = LocalRecallNoticeTaskQuestion
											fill in fields from each																 

				Delete is a Delete Action
					Action Rules
						for each RecallNoticeOrganizationRel
							invoke Delete each
				
				TransitionToAccepted is an Instance Action
					restricted
					Action Rules
						make transition to Accepted	
							
				AcceptTask is an Instance Action
					valid when (TaskCanBeAccepted)
					Action Rules
						include AcceptTaskEmail
						make transition to Accepted	
			
			Accepted is a State
				on entrance to Accepted
					Action Rules
						if (AcceptedTimestamp not entered)
							AcceptedTimestamp = current timestamp
							DaysToAccept      = (AcceptedTimestamp date - RecallNotice.ReleasedTimestamp date) 
						
				Update is an Update Action
					valid when (TaskCanBeUpdated)
					Action Rules
						include UpdatedTaskEmail
								
				CompleteTask is an Instance Action
					valid when (TaskCanBeCompleted)
					Action Rules
						if (UnenteredQuantityForTaskRel exists
						and RecallNotice.QuantityRequired = false)
							confirmation required
								"QuantityFoundHasNotBeenEnteredForProduct_<first UnenteredQuantityForTaskRel.RecallProduct.ProductName>_;DoYouWantToContinueToCompleteTheTask?"
						
						if (RecallNotice.QuantityRequired)
							constraint (!NoQuantityResponseForTaskRel exists)
								"CannotCompleteTask;MustEitherEnterAQuantityOrIndicateThatZeroQuantityWasFoundForEachItem"
						
						if (TaskWithQuestions)
							for each RequiredRecallNoticeTaskQuestionsRel
								constraint (each.RecallNoticeTaskQuestion = any ResponseToRecallNoticeTaskQuestion set.RecallNoticeTaskQuestion)
									"CannotCompleteTask;RequiredQuestion_#<each.RecallNoticeTaskQuestion>'<each.Description>_'_isUnanswered"
						else
							for each RecallNoticeTaskProduct set
								invoke RequiredQuestionVerification each
									 
						include CompleteTaskEmail
						make transition to Completed
					
				Merge is an Update Action
					restricted
					Exit Rules
						if (FromProductTransactionQuery)
							include CreateProductTransactionQueryRecords	
						if (RecallGroup.RequireTaskAcceptance)
							initialize AcceptedTimestamp
							initialize DaysToAccept 
							make transition to New
						
				TransitionToNew is an Instance Action
					restricted
					Action Rules
						initialize AcceptedTimestamp 
						initialize DaysToAccept
						make transition to New	
							
			Completed is a State
				on entrance to Completed
					Action Rules
						CompletedTimestamp = current timestamp
						DaysToComplete     = (CompletedTimestamp date - RecallNotice.ReleasedTimestamp date)
						 		
				Create is a Create Action
					restricted
				
				Update is an Update Action
					valid when (OpenProposedItemTask)
				
				ReopenTask is an Instance Action
					valid when (TaskCanBeReopened)
					subject is ReopenRecallNoticeTask
					reason code required
					Action Rules
						make transition to Accepted
						initialize CompletedTimestamp
						initialize DaysToComplete

				Merge is an Update Action
					restricted
					Action Rules
					Exit Rules
						if (FromProductTransactionQuery)
							include CreateProductTransactionQueryRecords	
						initialize CompletedTimestamp
						initialize DaysToComplete
						if (RecallGroup.RequireTaskAcceptance)
							initialize AcceptedTimestamp
							initialize DaysToAccept 
							make transition to New
						else
							make transition to Accepted
						
	Actions
		ReassignTask is an Update Action
			valid when (TaskCanBeReassigned)

			Field Rules
				NewOwner
					required
					constraint (NewOwner != Owner)
						"<NewOwner.FirstLastName>_(<NewOwner>)IsAlreadyAssignedToThisTask"
			Action Rules
				if  (NewDueDate entered
				and  NewDueDate < current timestamp)
					confirmation required
						"DueDateIsPriorToCurrentDate.Continue?"
					
				if (NewOwnerRecallNoticeTaskRel exists)
					if (!HasNoticeOrganization)
						constraint (!ManuallyCreatedTask)
							"CannotReassignManualTaskToOwnerWhoAlreadyHasATask"
						constraint (!NewOwnerRecallNoticeTaskRel.ManuallyCreatedTask)
							"NewOwnerHasAManualTask.CannotMergeTasks"
					constraint (!HasItemActions)
						"ActionsHaveAlreadyBeenCreatedForTask.CannotMerge"
					constraint (!NewOwnerRecallNoticeTaskRel.HasItemActions)
						"NewOwnerHasAlreadyCreatedActionsForTheirTask.CannotMerge"
				else
					initialize NewPriority
					initialize NewDueDate
		
				if (NewPriority not entered)
					if (NewOwnerRecallNoticeTaskRel.Priority.High
					or  Priority.High)
						NewPriority = NewPriority.High
					else						
					if (NewOwnerRecallNoticeTaskRel.Priority.Medium
					or  Priority.Medium)
						NewPriority = NewPriority.Medium
					else						
						NewPriority = NewPriority.Low
	
				if (NewDueDate not entered)
					if (NewOwnerRecallNoticeTaskRel.DueDate < DueDate)
						NewDueDate = NewOwnerRecallNoticeTaskRel.DueDate
					else						
						NewDueDate = DueDate

			Exit Rules
				
				for each RecallNoticeOrganizationRel
					invoke Update each
						invoked.AssignedUser = NewOwner
				
				if (NewOwnerRecallNoticeTaskRel exists)
					for each RecallProductTransactionTask set
						invoke TransferTask RecallProductTransaction
							invoked.RecallGroup					= each.RecallGroup
							invoked.RecallNotice				= each.RecallNotice
							invoked.RecallProduct	 		 	= each.RecallProduct
							invoked.RecallProductTransaction 	= each.RecallProductTransaction
							invoked.LocalRecallUser				= NewOwner
							invoked.LocalPriority				= NewPriority
							invoked.LocalDueDate				= NewDueDate



					for each RecallNoticeTaskProduct set
						LocalRecallProduct = each.RecallProduct
						LocalNewRecallNoticeTask = NewOwnerRecallNoticeTaskRel.RecallNoticeTask
						if (NewOwnerRecallNoticeTaskProductRel.HasProductQuestionAnswers)
							invoke Purge NewOwnerRecallNoticeTaskProductRel.ResponseToRecallProductQuestion set
						
						if (each.QuantityIdentified > 0)
							invoke Update NewOwnerRecallNoticeTaskProductRel
								invoked.QuantityIdentified += each.QuantityIdentified
								invoked.LocalFromReassignTask = true
							invoke Update each
								invoked.QuantityIdentified = 0
								invoked.LocalFromReassignTask = true
                         
						for each each.RecallProductItemRel
							LocalItem = each.RecallProductItem
							LocalOldRecallNoticeTask = RecallNoticeTask
							if (OldRecallProductTaskItemRel exists)
								invoke UpdateFast NewRecallProductTaskItemRel
									invoked.LocalIncrementQuantityIdentified = OldRecallProductTaskItemRel.QuantityIdentified

						invoke Purge each

					invoke Purge RecallProductTransactionTask set	
					invoke Purge

					if (RecallGroup.SendTaskEmail
					and RecallNotice.Status.Active)						
						send email
							to NewOwner.EmployeeWorkEmailAddress
							from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
							subject "<RecallGroup.FinalMergeTaskEmailSubject>"
							Contents
								"<RecallGroup.FinalMergeTaskEmailContent>"
								"Task:_<first NewOwnerRecallNoticeTaskRel.RecallNoticeTask>"
								"Priority:_<NewPriority>"
								"DueDate:_<NewDueDate>"
								"Click<RecallNotice.TaskLinkback>ToViewTheNotice."
				else
					Owner = NewOwner
				
					if (Status.Accepted
					and RecallGroup.RequireTaskAcceptance)
						Status = Status.New
						initialize AcceptedTimestamp
						initialize DaysToAccept 
						
					if (RecallNotice.Status.Active)						
						include ReassignTaskEmail

		ReassignNewItemProposalReview is an Update Action
			default label is "ReassignReviewer"
			valid when (ItemProposalReviewCanBeReassigned)

			Field Rules
				NewOwner
					required
					constraint (NewOwner != Owner)
						"<NewOwner.FirstLastName>_(<NewOwner>)IsAlreadyAssignedToThisNewItemProposalReview"
						
				NewPriority
					NewPriority = Priority
					required
					
				NewDueDate
					NewDueDate  = DueDate
					required
					 
			Action Rules
				if  (NewDueDate entered
				and  NewDueDate < current timestamp)
					confirmation required
						"DueDateIsPriorToCurrentDate.Continue?"
				if (ProposedItem > 0)
					constraint (NewOwner.ProposedItemReviewer)
						"CannotReassignNewItemProposalReviewToRecallUserWhoIsNotANewProposedItemReviewer"
					
				if (NewOwnerRecallNoticeTaskRel exists)
					constraint (!OpenProposedItemTask)
						"CannotReassign;NewOwnerAlreadyHasANewItemProposalReview"
		
				ProposedItem = 1 
				
			Exit Rules
				Owner        = NewOwner
				
				send email
					to NewOwner.EmployeeWorkEmailAddress
					from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					subject "YouHaveBeenAssignedANewItemProposalReview"
					Contents
						"YouHaveBeenAssignedANewItemProposalReview"
						"ItemProposal:_<RecallNotice.RepresentativeText>"
						"Priority:_<NewPriority>"
						"DueDate:_<NewDueDate>"
						"Click<ItemReviewLinkback>ToViewTheNewItemProposalInformation."			

		Purge is a Purge Action
			restricted

			Action Rules
				for each RecallNoticeOrganizationRel
					invoke Delete each
		
		SendEmailReminder is an Instance Action
			valid when (CanSendEmailReminder)
			Action Rules
				send email
					to Owner.EmployeeWorkEmailAddress
					from RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					subject "NoticeTaskReminder"
					Contents
						"PleaseCompleteThisTaskForANotice"
						"Notice:_<RecallNotice.RepresentativeText>"
						"Priority:_<Priority>"
						"DueDate:_<DueDate>"
						"Coordinator:_<RecallNotice.RecallCoordinator.RecallUser.RecallUserName>"
						"Click<RecallNotice.TaskLinkback>ToViewTheTaskInformation."	

		AddAttachmentOrComment is an Instance Action
			valid when (RecallNotice.ActiveRecallNotice)
			Parameters
				Attachment
				Comment 		is Text
			Action Rules
				invoke Create RecallNoticeTaskAttachment set
					invoked.Attachment				= Attachment
					invoked.Comment					= Comment
					
		AskAQuestion is an Instance Action
			valid when (AskAQuestionAllowed)
			Parameters
				Question		is Alpha size up to 500
			Action Rules
				invoke Unanswered.Create RecallNoticeQandA
					invoked.RecallGroup			= RecallGroup
					invoked.RecallNotice		= RecallNotice
					invoked.Question			= Question	

		MobileAskAQuestion is an Instance Action
			default label is "AskAQuestion"	
			valid when (AskAQuestionAllowed)
			Parameters
				Question		is Alpha size up to 500
			Action Rules
				invoke AskAQuestion
					invoked.Question			= Question								

		ShowSummary is an Instance Action
			restricted
			Action Rules
				ShowDetail = false
				
		ApproveProposedItem is an Instance Action
			default label is "Approve"
			valid when (CanApproveOrReject)
			Action Rules
				ProposedItem = ProposedItem.Approved
				
				if (TaskWithQuestions)
					for each RequiredRecallNoticeTaskQuestionsRel
						constraint (each.RecallNoticeTaskQuestion = any ResponseToRecallNoticeTaskQuestion set.RecallNoticeTaskQuestion)
							"CannotApproveProposedNewItem;RequiredQuestion_#<each.RecallNoticeTaskQuestion>'<each.Description>_'_isUnanswered"
				else
					for each RecallNoticeTaskProduct set
						invoke RequiredQuestionVerification each
						
				send email
					to RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					from Owner.EmployeeWorkEmailAddress
					subject "ReviewForNewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApproved"
					Contents
						"ReviewForNewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApprovedBy<Owner.RecallUserName>"				
						
		UpdateDueDate is an Instance Action
			restricted
			Parameters
				PrmNewDueDate is TimeStamp
			
			Action Rules
				DueDate  = PrmNewDueDate				
		
		ApproveProposedItemPendingTrial is an Instance Action
			default label is "ApprovePendingTrial"
			valid when (CanApprovePendingTrial)
			
			Action Rules
				ProposedItem = ProposedItem.ApprovedPendingTrial
				
				if (TaskWithQuestions)
					for each RequiredRecallNoticeTaskQuestionsRel
						constraint (each.RecallNoticeTaskQuestion = any ResponseToRecallNoticeTaskQuestion set.RecallNoticeTaskQuestion)
							"CannotApproveProposedNewItemPendingTrial;RequiredQuestion_#<each.RecallNoticeTaskQuestion>'<each.Description>_'_isUnanswered"
				else
					for each RecallNoticeTaskProduct set
						invoke RequiredQuestionVerification each
						
				send email
					to RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					from Owner.EmployeeWorkEmailAddress
					subject "ReviewForNewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApprovedPendingTrial"
					Contents
						"ReviewForNewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenApprovedBy<Owner.RecallUserName>PendingTrial"				

		CancelReview is an Instance Action
			valid when (CanCancelReview)
			default label is "Cancel"
			action comment required
			Action Rules
				ProposedItem = ProposedItem.Canceled
		
		ReopenReview is an Instance Action
			valid when (CanReopenReview)
			Action Rules
				ProposedItem = ProposedItem.Proposed
		
		OverrideApproveReview is an Instance Action 
			restricted 
			Action Rules
				ProposedItem = ProposedItem.CoordinatorApproval
		
		RejectProposedItem is an Instance Action
			valid when (CanApproveOrReject)
			default label is "Reject"
			action comment required
			Action Rules
				ProposedItem = ProposedItem.Rejected
				
				send email
					to RecallNotice.RecallCoordinator.RecallUser.EmployeeWorkEmailAddress
					from Owner.EmployeeWorkEmailAddress
					subject "ReviewForNewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenRejected"
					Contents
						"ReviewForNewItemProposal<RecallNotice>-<RecallNotice.Name>HasBeenRejectedBy<Owner.RecallUserName>"				
						"Reason:<action comment>"
						
		ShowDetail is an Instance Action
			restricted
			Action Rules
				ShowDetail = true
														
